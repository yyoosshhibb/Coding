
-- 
--
-- VHDL Architecture sdi_hdsd_tx.register_array.rtl
--
-- Created:
--          by  C. Netzberger (KPROJR2611)
--          FH JOANNEUM
--          Werk-VI Str. 46 /Kapfenberg / Austria
--          at - 10:02:43 20.07.2006
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.1 (Build 83)
--
-- 
library ieee;
use ieee.std_logic_1164.ALL;
use ieee.std_logic_arith.ALL;
use ieee.std_logic_unsigned.ALL;
library work;
use work.utilities.ALL;

--$entity
entity regs8 is
   generic( 
      addr_width_g : integer := 8;      --width of address
      data_width_g : integer := 8;      --width of data
      addr_base_g  : std_logic_vector;
      addr_range_g : std_logic_vector;
--$nregs_g
      nregs_g      : integer := 16      --number of registers
   );
   port( 
      sbus_addr              : in     std_logic_vector (15 downto 0);
      sbus_be                : in     std_logic_vector (3 downto 0);
      sbus_rd                : in     std_logic;
      sbus_wdata             : in     std_logic_vector (31 downto 0);
      sbus_we                : in     std_logic;
      sbus_ack               : out    std_logic;
      sbus_rdata             : out    std_logic_vector (31 downto 0);
--$portsignals
      leds                   :out    std_logic_vector(3 downto 0);
      pmod_o                 :out    std_logic_vector(23 downto 0);
      timer                  :out    std_logic_vector(31 downto 0);
      pwm                    :out    std_logic_vector(31 downto 0);
      buzzer                 :out    std_logic;
      buttons_s              :in     std_logic_vector(43 downto 0);
--$end_portsignals
      reset    : in     std_logic;                                             -- synchronous, active high reset
      clk      : in     std_logic                                              -- register clock
   );

-- Declarations
--$end_entity
end entity regs8;

--$architecture  
architecture rtl of regs8 is

signal bus_addr :     std_logic_vector (addr_width_g-1 downto 0);            -- register address
signal reg_addr :     std_logic_vector (log2(nregs_g)-1 downto 0);            -- register address
signal bus_cs   :     std_logic;                                             -- chip select, active high
signal bus_din  :     std_logic_vector (data_width_g-1 downto 0);            -- bus input data
signal bus_be   :     std_logic_vector (data_width_g/8-1 downto 0);            -- byte enable, active high
signal bus_we   :     std_logic;                                             -- write enable, active high
signal bus_rd   :     std_logic;                                             -- write enable, active high
signal bus_dout :     std_logic_vector (data_width_g-1 downto 0);            -- bus output data
signal bus_ack  :     std_logic;

signal reg: std_logic_vector(nregs_g*data_width_g - 1 downto 0);
signal update_int: std_logic := '0';
signal rd_tmp, rd_q: std_logic_vector ( nregs_g-1 downto 0);  
signal resetval :     std_logic_vector ( nregs_g*data_width_g-1 downto 0 );
signal reg_din  :     std_logic_vector ( nregs_g*data_width_g-1 downto 0 );  -- parallel input for readback
signal reg_dout :     std_logic_vector ( nregs_g*data_width_g-1 downto 0 );  -- parallel output of all registers
signal we       :     std_logic_vector ( nregs_g-1 downto 0);                -- active high write strobes
signal rd       :     std_logic_vector ( nregs_g-1 downto 0);                -- active high read strobes
signal update   :     std_logic;

--$regsignals
signal reg00:      std_logic_vector(31 downto 0);
signal reg00_in:   std_logic_vector(31 downto 0);
signal reg00_def:  std_logic_vector(31 downto 0);
signal reg01:      std_logic_vector(31 downto 0);
signal reg01_in:   std_logic_vector(31 downto 0);
signal reg01_def:  std_logic_vector(31 downto 0);
signal reg02:      std_logic_vector(31 downto 0);
signal reg02_in:   std_logic_vector(31 downto 0);
signal reg02_def:  std_logic_vector(31 downto 0);
signal reg03:      std_logic_vector(31 downto 0);
signal reg03_in:   std_logic_vector(31 downto 0);
signal reg03_def:  std_logic_vector(31 downto 0);
signal reg04:      std_logic_vector(31 downto 0);
signal reg04_in:   std_logic_vector(31 downto 0);
signal reg04_def:  std_logic_vector(31 downto 0);
signal reg05:      std_logic_vector(31 downto 0);
signal reg05_in:   std_logic_vector(31 downto 0);
signal reg05_def:  std_logic_vector(31 downto 0);
signal reg06:      std_logic_vector(31 downto 0);
signal reg06_in:   std_logic_vector(31 downto 0);
signal reg06_def:  std_logic_vector(31 downto 0);
signal reg07:      std_logic_vector(31 downto 0);
signal reg07_in:   std_logic_vector(31 downto 0);
signal reg07_def:  std_logic_vector(31 downto 0);
--$end_regsignals

begin
  
  -- connect to slave bus --
  bus_addr    <= sbus_addr(bus_addr'range);
  reg_addr    <= sbus_addr(reg_addr'range);
  bus_din     <= sbus_wdata(bus_din'range);
  bus_be      <= sbus_be;
  bus_we      <= sbus_we;
  bus_rd      <= sbus_rd;
  sbus_rdata  <= bus_dout;
  sbus_ack    <= bus_ack;
  
  -- addr decoder
  bus_cs <= '1' when bus_addr >= addr_base_g and bus_addr < (addr_base_g + addr_range_g) else '0';
  
  --- Write to Register Array ----------------------------------------------------------------
  process(clk)
  begin
     if clk ='1' and clk'event then
       we <= (others => '0'); 
        for i in 0 to nregs_g-1 loop
           if reset = '1' then
              reg((i+1)*data_width_g-1 downto i*data_width_g) <= resetval((i+1)*data_width_g-1 downto i*data_width_g);
           elsif reg_addr = i and bus_cs = '1' and bus_we = '1' then
--              reg((i+1)*data_width_g-1 downto i*data_width_g) <= bus_din;
              for k in bus_be'range loop --byte access
                reg(i*data_width_g+7+ k*8 downto i*data_width_g +k*8) <= bus_din(7 + k*8 downto k*8);
              end loop;
              we(i) <= '1';
           end if;
       end loop;
     end  if;
  end process; 

  -- indicate register write by toggling the "update" signal
  process(clk)
    variable q: std_logic;
  begin
     if clk ='1' and clk'event then
       if bus_we = '1' and q = '0' and bus_cs = '1' then -- consider rising bus_we only
         update_int <= not update_int;
       end if;
       q := bus_we;
     end  if;
  end process; 
  update <= update_int;
  
  --Read from Register Array--------------------
  process(reg, bus_addr, bus_cs,reg_din)
  begin
     bus_dout <= (others => '0');
     rd_tmp  <=  (others => '0');
     for i in 0 to nregs_g-1 loop
        if reg_addr = i and bus_cs = '1'  then
             bus_dout <= reg_din((i+1)*data_width_g-1 downto i*data_width_g);
             rd_tmp(i) <= bus_rd;
        end if;
     end loop;
  end process;

  ---register read strobes--------------------
  process(clk)
  begin
     if clk ='1' and clk'event then
       if reset = '1' then
         rd_q <= (others => '0');
       else
         rd_q <= rd_tmp;
       end if;
     end  if;
  end process; 
  rd <=  rd_tmp and not rd_q;
  
  reg_dout <= reg; 
  
  bus_ack <= bus_cs and (bus_we or bus_rd);

   --slice registers from vector---------------
--$regslices
 reg00 <= reg_dout(31 downto 0);
 reg01 <= reg_dout(63 downto 32);
 reg02 <= reg_dout(95 downto 64);
 reg03 <= reg_dout(127 downto 96);
 reg04 <= reg_dout(159 downto 128);
 reg05 <= reg_dout(191 downto 160);
 reg06 <= reg_dout(223 downto 192);
 reg07 <= reg_dout(255 downto 224);
--$end_regsignals


--$readback_regs
process(clk)
begin
   if rising_edge(clk) then
         -- default assignment: internal register readback----------
        reg_din <= reg_dout;
          --external readback registers-----
        reg_din(151 downto 148) <= buttons_s;
    end if;
end process;

--$default_values
 reg00_def <= X"0000AA00";
 reg01_def <= X"12345678";
 reg02_def <= X"00004092";
 reg03_def <= X"00000000";
 reg04_def <= X"00E00000";
 reg05_def <= X"00000000";
 reg06_def <= X"00000000";
 reg07_def <= X"00000000";
 resetval(31 downto 0) <= reg00_def";
 resetval(63 downto 32) <= reg01_def";
 resetval(95 downto 64) <= reg02_def";
 resetval(127 downto 96) <= reg03_def";
 resetval(159 downto 128) <= reg04_def";
 resetval(191 downto 160) <= reg05_def";
 resetval(223 downto 192) <= reg06_def";
 resetval(255 downto 224) <= reg07_def";
--$end_default_values

   --rd_regs_on
reg04_in(23 downto 20) <= buttons_s;--button values
   --rd_regs_off

   --wr_regs_on
leds                 <= reg00(3 downto 0);--4 onboard leds
pmod_o               <= reg00(15 downto 8);--8 pmod gpios
timer                <= reg01(31 downto 0);--general purpose timer reload value
pwm                  <= reg02(31 downto 0);--pwm duty cycle
buzzer               <= reg03(0);--buzzer on/off
   --wr_regs_off
   
  
end architecture rtl;

