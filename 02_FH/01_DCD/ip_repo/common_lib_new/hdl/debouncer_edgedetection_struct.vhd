-- VHDL Entity common_lib_new.Debouncer_EdgeDetection.symbol
--
-- Created:
--          by - Yoshi.UNKNOWN (YOSHIS-LAPTOP)
--          at - 12:47:51 23.03.2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2017.1a (Build 5)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

entity Debouncer_EdgeDetection is
   port( 
      D        : in     std_logic;
      clk      : in     std_logic;
      Neg_Edge : out    std_logic;
      Pos_Edge : out    std_logic;
      Q        : out    std_logic
   );

-- Declarations

end Debouncer_EdgeDetection ;

--
-- VHDL Architecture common_lib_new.Debouncer_EdgeDetection.struct
--
-- Created:
--          by - Yoshi.UNKNOWN (YOSHIS-LAPTOP)
--          at - 12:47:51 23.03.2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2017.1a (Build 5)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

library common_lib;

architecture struct of Debouncer_EdgeDetection is

   -- Architecture declarations

   -- Internal signal declarations
   signal Q1 : std_logic;
   signal Qx : std_logic;

   -- Implicit buffer signal declarations
   signal Q_internal : std_logic;


   -- Component Declarations
   component D_FlipFlop
   port (
      clk : in     std_logic ;
      D   : in     std_logic ;
      Q   : out    std_logic 
   );
   end component;
   component EdgeDetection
   port (
      clk : in     std_logic ;
      Qn  : in     std_logic ;
      Qn1 : in     std_logic ;
      Pos : out    std_logic ;
      Neg : out    std_logic 
   );
   end component;

   -- Optional embedded configurations
   -- pragma synthesis_off
   for all : D_FlipFlop use entity common_lib.D_FlipFlop;
   for all : EdgeDetection use entity common_lib.EdgeDetection;
   -- pragma synthesis_on


begin

   -- Instance port mappings.
   U_0 : D_FlipFlop
      port map (
         clk => clk,
         D   => D,
         Q   => Qx
      );
   U_1 : D_FlipFlop
      port map (
         clk => clk,
         D   => Qx,
         Q   => Q1
      );
   U_3 : D_FlipFlop
      port map (
         clk => clk,
         D   => Q1,
         Q   => Q_internal
      );
   U_2 : EdgeDetection
      port map (
         clk => clk,
         Qn  => Q_internal,
         Qn1 => Q1,
         Pos => Pos_Edge,
         Neg => Neg_Edge
      );

   -- Implicit buffered output assignments
   Q <= Q_internal;

end struct;
