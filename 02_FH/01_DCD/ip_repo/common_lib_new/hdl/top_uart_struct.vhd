-- VHDL Entity sbus_uart_lib.top_uart.symbol
--
-- Created:
--          by - Net.UNKNOWN (M00443)
--          at - 11:44:06 24.11.2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2017.1a (Build 5)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

entity top_uart is
   generic( 
      tx_baudrate_g : integer := 115200;
      rx_baudrate_g : integer := 115200
   );
   port( 
      clk        : in     std_logic;
      loopback   : in     std_logic;
      reset      : in     std_logic;
      rxd        : in     std_logic;
      tx_data    : in     std_logic_vector (7 downto 0);
      tx_trig    : in     std_logic;
      rx_data    : out    std_logic_vector (7 downto 0);
      rx_data_en : out    std_logic;
      txd        : out    std_logic
   );

-- Declarations

end top_uart ;

--
-- VHDL Architecture sbus_uart_lib.top_uart.struct
--
-- Created:
--          by - Net.UNKNOWN (M00443)
--          at - 12:03:36 24.11.2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2017.1a (Build 5)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

library sbus_uart_lib;

architecture struct of top_uart is

   -- Architecture declarations

   -- Internal signal declarations
   signal hi               : std_logic;
   signal lo               : std_logic;
   signal lo8              : std_logic_vector(7 downto 0);
   signal pulse_length     : std_logic_vector(3 downto 0);
   signal rx_baud_8x_stb   : std_logic;
   signal rx_baud_stb      : std_logic;
   signal rx_baud_stb_q1   : std_logic;
   signal rx_end_of_frame  : std_logic;
   signal rx_frame         : std_logic;
   signal rx_restart       : std_logic;
   signal rxd_bit          : std_logic;
   signal rxd_framed       : std_logic;
   signal rxd_int_val      : std_logic_vector(3 downto 0);
   signal rxd_parallel_out : std_logic_vector(7 downto 0);
   signal rxd_s            : std_logic;
   signal rxd_sampled      : std_logic;
   signal rxd_stb_a        : std_logic;
   signal rxd_stb_s        : std_logic;
   signal rxd_tmp          : std_logic;
   signal tx_baud_8x_stb   : std_logic;
   signal tx_baud_stb      : std_logic;
   signal tx_frame         : std_logic_vector(8 downto 0);
   signal tx_start_stb     : std_logic;
   signal txd_tmp          : std_logic;


   -- Component Declarations
   component comp_counter_modulo
   generic (
      nbits_g  : integer := 8;
      module_g : integer := 256
   );
   port (
      clk   : in     std_logic ;
      reset : in     std_logic ;
      en    : in     std_logic ;
      tc    : out    std_logic ;
      cnt   : out    std_logic_vector (nbits_g-1 downto 0)
   );
   end component;
   component comp_datareg
   generic (
      dwidth_g : integer := 8
   );
   port (
      clk   : in     std_logic ;
      en    : in     std_logic ;
      din   : in     std_logic_vector (dwidth_g-1 downto 0);
      reset : in     std_logic ;
      dout  : out    std_logic_vector (dwidth_g-1 downto 0)
   );
   end component;
   component comp_delay
   generic (
      delay_g : integer := 1
   );
   port (
      din   : in     std_logic ;
      reset : in     std_logic ;
      clk   : in     std_logic ;
      din_q : out    std_logic 
   );
   end component;
   component comp_edge_det
   port (
      din   : in     std_logic ;
      reset : in     std_logic ;
      clk   : in     std_logic ;
      rise  : out    std_logic ;
      fall  : out    std_logic ;
      any   : out    std_logic 
   );
   end component;
   component comp_integrator
   generic (
      dwidth_g : integer := 8
   );
   port (
      en      : in     std_logic ;
      dump    : in     std_logic ;
      reset   : in     std_logic ;
      clk     : in     std_logic ;
      int_val : out    std_logic_vector (dwidth_g-1 downto 0)
   );
   end component;
   component comp_oneshot
   generic (
      nbits_g : integer := 16
   );
   port (
      pulse_length : in     std_logic_vector (nbits_g-1 downto 0);
      trigger      : in     std_logic ;
      enable       : in     std_logic ;
      reset        : in     std_logic ;
      clk          : in     std_logic ;
      stb          : out    std_logic ;
      pulse        : out    std_logic 
   );
   end component;
   component comp_timer
   generic (
      core_clk_freq_g : integer := 125000000;
      timer_freq_g    : integer := 1000
   );
   port (
      clk       : in     std_logic ;
      reset     : in     std_logic ;
      timer_stb : out    std_logic 
   );
   end component;
   component loopback_mux
   port (
      clk      : in     std_logic ;
      reset    : in     std_logic ;
      rxd      : in     std_logic ;
      txd      : out    std_logic ;
      txd_tmp  : in     std_logic ;
      loopback : in     std_logic ;
      rxd_tmp  : out    std_logic 
   );
   end component;
   component resync
   port (
      clk     : in     std_logic ;
      stb_a   : in     std_logic ;
      sync_en : in     std_logic ;
      stb_s   : out    std_logic 
   );
   end component;
   component shreg
   generic (
      dwidth_g : integer := 8
   );
   port (
      clk          : in     std_logic ;
      load_en      : in     std_logic ;
      parallel_in  : in     std_logic_vector (dwidth_g-1 downto 0);
      reset        : in     std_logic ;
      serial_in    : in     std_logic ;
      shift_en     : in     std_logic ;
      parallel_out : out    std_logic_vector (dwidth_g-1 downto 0);
      serial_out   : out    std_logic 
   );
   end component;

   -- Optional embedded configurations
   -- pragma synthesis_off
   for all : comp_counter_modulo use entity sbus_uart_lib.comp_counter_modulo;
   for all : comp_datareg use entity sbus_uart_lib.comp_datareg;
   for all : comp_delay use entity sbus_uart_lib.comp_delay;
   for all : comp_edge_det use entity sbus_uart_lib.comp_edge_det;
   for all : comp_integrator use entity sbus_uart_lib.comp_integrator;
   for all : comp_oneshot use entity sbus_uart_lib.comp_oneshot;
   for all : comp_timer use entity sbus_uart_lib.comp_timer;
   for all : loopback_mux use entity sbus_uart_lib.loopback_mux;
   for all : resync use entity sbus_uart_lib.resync;
   for all : shreg use entity sbus_uart_lib.shreg;
   -- pragma synthesis_on


begin
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 constants
   hi <= '1';
   lo <= '0';     
   lo8 <= (others => '0');             

   -- HDL Embedded Text Block 2 txframe
   tx_frame <= tx_data & '0'; -- append start bit                                    

   -- HDL Embedded Text Block 3 eb2
   rxd_sampled <= rxd_s and rx_baud_8x_stb;                                   

   -- HDL Embedded Text Block 4 eb3
   pulse_length <= X"A";                       

   -- HDL Embedded Text Block 5 decision
   -- decision 5  
   rxd_bit <= '1' when rxd_int_val > 3 else '0';                                      

   -- HDL Embedded Text Block 6 eb4
   rx_restart <= rx_baud_stb or rxd_stb_s;                                   

   -- HDL Embedded Text Block 7 frame_mask
   rxd_framed <= rxd_s or rx_frame;        


   -- Instance port mappings.
   U_1 : comp_counter_modulo
      generic map (
         nbits_g  => 3,
         module_g => 8
      )
      port map (
         clk   => clk,
         reset => reset,
         en    => tx_baud_8x_stb,
         tc    => tx_baud_stb,
         cnt   => open
      );
   U_9 : comp_counter_modulo
      generic map (
         nbits_g  => 3,
         module_g => 8
      )
      port map (
         clk   => clk,
         reset => rxd_stb_s,
         en    => rx_baud_8x_stb,
         tc    => rx_baud_stb,
         cnt   => open
      );
   U_11 : comp_datareg
      generic map (
         dwidth_g => 8
      )
      port map (
         clk   => clk,
         en    => rx_end_of_frame,
         din   => rxd_parallel_out,
         reset => reset,
         dout  => rx_data
      );
   U_6 : comp_delay
      generic map (
         delay_g => 3
      )
      port map (
         din   => rxd_tmp,
         reset => reset,
         clk   => clk,
         din_q => rxd_s
      );
   U_12 : comp_delay
      generic map (
         delay_g => 1
      )
      port map (
         din   => rx_baud_stb,
         reset => reset,
         clk   => clk,
         din_q => rx_baud_stb_q1
      );
   U_13 : comp_delay
      generic map (
         delay_g => 1
      )
      port map (
         din   => rx_end_of_frame,
         reset => reset,
         clk   => clk,
         din_q => rx_data_en
      );
   U_4 : comp_edge_det
      port map (
         din   => rxd_framed,
         reset => reset,
         clk   => clk,
         rise  => open,
         fall  => rxd_stb_a,
         any   => open
      );
   U_8 : comp_integrator
      generic map (
         dwidth_g => 4
      )
      port map (
         en      => rxd_sampled,
         dump    => rx_restart,
         reset   => reset,
         clk     => clk,
         int_val => rxd_int_val
      );
   U_7 : comp_oneshot
      generic map (
         nbits_g => 4
      )
      port map (
         pulse_length => pulse_length,
         trigger      => rxd_stb_s,
         enable       => rx_baud_stb,
         reset        => reset,
         clk          => clk,
         stb          => rx_end_of_frame,
         pulse        => rx_frame
      );
   U_0 : comp_timer
      generic map (
         core_clk_freq_g => 125000000,
         timer_freq_g    => 8*tx_baudrate_g
      )
      port map (
         clk       => clk,
         reset     => reset,
         timer_stb => tx_baud_8x_stb
      );
   U_14 : comp_timer
      generic map (
         core_clk_freq_g => 125000000,
         timer_freq_g    => 8*rx_baudrate_g
      )
      port map (
         clk       => clk,
         reset     => reset,
         timer_stb => rx_baud_8x_stb
      );
   U_15 : loopback_mux
      port map (
         clk      => clk,
         loopback => loopback,
         reset    => reset,
         rxd      => rxd,
         txd_tmp  => txd_tmp,
         rxd_tmp  => rxd_tmp,
         txd      => txd
      );
   U_2 : resync
      port map (
         clk     => clk,
         stb_a   => tx_trig,
         sync_en => tx_baud_stb,
         stb_s   => tx_start_stb
      );
   U_5 : resync
      port map (
         clk     => clk,
         stb_a   => rxd_stb_a,
         sync_en => rx_baud_8x_stb,
         stb_s   => rxd_stb_s
      );
   U_3 : shreg
      generic map (
         dwidth_g => 9
      )
      port map (
         clk          => clk,
         load_en      => tx_start_stb,
         parallel_in  => tx_frame,
         reset        => reset,
         serial_in    => hi,
         shift_en     => tx_baud_stb,
         parallel_out => open,
         serial_out   => txd_tmp
      );
   U_10 : shreg
      generic map (
         dwidth_g => 8
      )
      port map (
         clk          => clk,
         load_en      => lo,
         parallel_in  => lo8,
         reset        => reset,
         serial_in    => rxd_bit,
         shift_en     => rx_baud_stb_q1,
         parallel_out => rxd_parallel_out,
         serial_out   => open
      );

end struct;
