/* Borrowed from ZynqBook Tutorials */

/* Include Files */
#include "xparameters.h"
#include "xgpio.h"
#include "xstatus.h"
#include "xil_printf.h"

/* Definitions */
#define GPIO_DEVICE_ID_1  XPAR_AXI_GPIO_1_DEVICE_ID	/* GPIO device that LEDs are connected to */
#define GPIO_DEVICE_ID_0  XPAR_AXI_GPIO_0_DEVICE_ID // GPIO device that BTNs are connected to
#define LED 0x01									/* Initial LED value - 00XX */
#define LED_DELAY 10000000							/* Software delay length */
#define LED_CHANNEL 1								/* GPIO port for LEDs */
#define BTN_CHANNEL 1								// GPIO port for Buttons
#define printf xil_printf							/* smaller, optimized printf */

XGpio GpioLed;											/* GPIO Device driver instance */
XGpio GpioBtn;

int LEDOutputExample(void)
{

	volatile int Delay;
	int Status1, Status2;
	int led = LED;
	int ledA = LED; /* Hold current LED value. Initialize to LED definition */
	int ledB = ~ledA;
	int btn = 0;
	xil_printf("Gratulation - done!\r\n");

		/* GPIO driver initialization */
		Status1 = XGpio_Initialize(&GpioLed, GPIO_DEVICE_ID_1);
		if (Status1 != XST_SUCCESS) {
			return XST_FAILURE;
		}

		Status2 = XGpio_Initialize(&GpioBtn, GPIO_DEVICE_ID_0);
				if (Status2 != XST_SUCCESS) {
					return XST_FAILURE;
				}

		/*Set the direction for the LEDs to output. */
		XGpio_SetDataDirection(&GpioLed, LED_CHANNEL, 0x00);
		XGpio_SetDataDirection(&GpioBtn, BTN_CHANNEL, 0x0F);

		XGpio_DiscreteWrite(&GpioLed, LED_CHANNEL, 0);

		/* Loop forever blinking the LED. */
			while (1) {
				/* Write output to the LEDs. */
				btn = XGpio_DiscreteRead(&GpioBtn, BTN_CHANNEL);
				led = btn;
				XGpio_DiscreteWrite(&GpioLed, LED_CHANNEL, led);


			}

		return XST_SUCCESS; /* Ideally unreachable */
}

/* Main function. */
int main(void){

	int Status;

	/* Execute the LED output. */
	Status = LEDOutputExample();
	if (Status != XST_SUCCESS) {
		xil_printf("GPIO output to the LEDs failed!\r\n");
	}

	return 0;
}

