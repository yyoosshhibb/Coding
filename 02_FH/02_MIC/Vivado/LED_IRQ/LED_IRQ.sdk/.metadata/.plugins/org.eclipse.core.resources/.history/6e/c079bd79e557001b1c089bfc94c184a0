/* Borrowed from ZynqBook Tutorials */

/* Include Files */
#include "xparameters.h"
#include "xgpio.h"
#include "xstatus.h"
#include "xil_printf.h"
#include "xil_exception.h"
#include "xgpiops.h"
#include "xscugic.h"
#include "xplatform_info.h"

#ifdef XPAR_INTC_0_DEVICE_ID
 #include "xintc.h"
 #include <stdio.h>
#else
 #include "xscugic.h"
 #include "xil_printf.h"
#endif

/* Definitions */

#ifndef TESTAPP_GEN
/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are defined here such that a user can easily
 * change all the needed parameters in one place.
 */
#define GPIO_DEVICE_ID_1  XPAR_AXI_GPIO_1_DEVICE_ID	/* GPIO device that LEDs are connected to */
#define LED_CHANNEL 1								/* GPIO port for LEDs */
#define GPIO_DEVICE_ID_0  XPAR_AXI_GPIO_0_DEVICE_ID	/* GPIO device that BTNs are connected to */
#define BTN_CHANNEL 1								/* GPIO port for BTNs */

#ifdef XPAR_INTC_0_DEVICE_ID
 #define INTC_GPIO_INTERRUPT_ID	XPAR_INTC_0_GPIO_0_VEC_ID
 #define INTC_DEVICE_ID	XPAR_INTC_0_DEVICE_ID
#else
 #define INTC_GPIO_INTERRUPT_ID	XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR
 #define INTC_DEVICE_ID	XPAR_SCUGIC_SINGLE_DEVICE_ID
#endif /* XPAR_INTC_0_DEVICE_ID */

/*
 * The following constants define the positions of the buttons and LEDs each
 * channel of the GPIO
 */
#define GPIO_ALL_LEDS		0x0F
#define GPIO_ALL_BUTTONS	0x0F

/*
 * The following constants define the GPIO channel that is used for the buttons
 * and the LEDs. They allow the channels to be reversed easily.
 */
#define BUTTON_INTERRUPT XGPIO_IR_CH1_MASK  /* Channel 1 Interrupt Mask */

/*
 * The following constant determines which buttons must be pressed at the same
 * time to cause interrupt processing to stop and start
 */
#define INTERRUPT_CONTROL_VALUE 0x7

/*
 * The following constant is used to wait after an LED is turned on to make
 * sure that it is visible to the human eye.  This constant might need to be
 * tuned for faster or slower processor speeds.
 */
#define LED_DELAY	10000000

#endif /* TESTAPP_GEN */



#define LED 0x01									/* Initial LED value - 00XX */
#define printf xil_printf							/* smaller, optimized printf */

XGpio GpioLed;											/* GPIO Device driver instance */
XGpio GpioBtn;

int LEDOutputExample(void)
{

	volatile int Delay = LED_DELAY;
	int Status1, Status2;
	int led = LED;
	int ledA = LED; /* Hold current LED value. Initialize to LED definition */
	xil_printf("Gratulation - done!\r\n");

		/* GPIO driver initialization */
		Status1 = XGpio_Initialize(&GpioLed, GPIO_DEVICE_ID_1);
		if (Status1 != XST_SUCCESS) {
			return XST_FAILURE;
		}

		Status2 = XGpio_Initialize(&GpioBtn, GPIO_DEVICE_ID_0);
				if (Status2 != XST_SUCCESS) {
					return XST_FAILURE;
				}

		/*Set the direction for the LEDs to output. */
		XGpio_SetDataDirection(&GpioLed, LED_CHANNEL, 0x00);
		XGpio_SetDataDirection(&GpioBtn, BTN_CHANNEL, 0x0F);

		XGpio_DiscreteWrite(&GpioLed, LED_CHANNEL, 0);

		/* Loop forever blinking the LED. */
			while (1) {
				/* Write output to the LEDs. */
				if(led == 0)
				{
					led = 1;
				}
				else
				{
					led = 0;
				}
				XGpio_DiscreteWrite(&GpioLed, LED_CHANNEL, led);
				for(int i = 0; i < Delay; i++);


			}

		return XST_SUCCESS; /* Ideally unreachable */
}

/* Main function. */
int main(void){

	int Status;

	/* Execute the LED output. */
	Status = LEDOutputExample();
	if (Status != XST_SUCCESS) {
		xil_printf("GPIO output to the LEDs failed!\r\n");
	}

	return 0;
}

