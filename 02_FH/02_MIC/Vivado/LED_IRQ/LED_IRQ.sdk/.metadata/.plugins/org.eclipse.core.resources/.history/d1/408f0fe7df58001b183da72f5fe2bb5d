/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and\or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
* helloworld.c: simple test application
*
* This application configures UART 16550 to baud rate 9600.
* PS7 UART (Zynq) is not initialized by this application, since
* bootrom\bsp configures it to baud rate 115200
*
* ------------------------------------------------
* | UART TYPE   BAUD RATE                        |
* ------------------------------------------------
*   uartns550   9600
*   uartlite    Configurable only in HW design
*   ps7_uart    115200 (configured by bootrom\bsp)
*/
#include <xtime_l.h>
#include <math.h>
#include <stdio.h>
#include <xil_types.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xil_cache.h"
#include "xil_cache_l.h"

#define SIZE_N 257
#define SIZE_M SIZE_N
#define SIZE_P SIZE_N
#define ITERATIONS 1


//#define MATRIX_PRINT

float A[SIZE_N][SIZE_M] = {2};
float B[SIZE_M][SIZE_P] = {3};
float C[SIZE_N][SIZE_P] = {4};


//initialize matrices with incrementing numbers starting at first_val, increasing the increment
//from cell to cell. starting row first then columns
void init_matrix(int *M, int row_size, int column_size, int first_val, int increment)
{
       int x,y;
       *M = first_val;
       int buffer = first_val;
       for(x = 0; x <= row_size-1; x++)
       {
              for(y = 0; y <= column_size-1; y++)
              {
                     *(M++) = buffer;
                     buffer += increment;
              }
       }
}

void print_matrix(int *M, int row_size, int column_size)
{
       int x,y;
       for(x = 0; x <= row_size-1; x++)
       {
              for(y = 0; y <= column_size-1; y++)
              {
                     printf("%d ",*(M++));
              }
              printf("\n");
       }
       printf("\n");
}

int main()
{
    init_platform();
    int i,j,k,l;

    XTime tStart, tEnd;
    print("\n\n---Matrix multiply---\n\r");
    init_matrix(&A[0][0], SIZE_N, SIZE_M, 0, 2);
    init_matrix(&B[0][0], SIZE_M, SIZE_P, 1, 2);
    init_matrix(&C[0][0], SIZE_M, SIZE_M, 0, 0);
    print("Matrices initialized\n\r");

       #ifdef MATRIX_PRINT
              print_matrix(&A[0][0], SIZE_N, SIZE_M);
              print_matrix(&B[0][0], SIZE_M, SIZE_P);
              print_matrix(&C[0][0], SIZE_N, SIZE_P);
       #endif


		int m = 0;
		for(m = 0;m<4;m++){
			if(m == 0)
			{
				Xil_DCacheEnable();
                Xil_ICacheEnable();
				XTime_GetTime(&tStart);
				for(l = 0; l < ITERATIONS; l++){
					for(i = 0; i < SIZE_N; i++){
						for(j = 0; j < SIZE_P; j++){
                           C[i][j] = 0;
							for(k = 0; k < SIZE_M; k++){
                                  C[i][j] +=  A[i][k] * B[k][j];
                            }
						}
					}
				}
				XTime_GetTime(&tEnd);
				double time_ms = 1.0 * (tEnd - tStart) / (COUNTS_PER_SECOND/1000);
				printf("Data cache enabled, Instruction cache enabled is: %.3f ms.\n",time_ms);
			}
			else if(m == 1)
			{
				Xil_DCacheDisable();
                Xil_ICacheEnable();
				XTime_GetTime(&tStart);
				for(l = 0; l < ITERATIONS; l++){
					for(i = 0; i < SIZE_N; i++){
						for(j = 0; j < SIZE_P; j++){
                           C[i][j] = 0;
							for(k = 0; k < SIZE_M; k++){
                                  C[i][j] +=  A[i][k] * B[k][j];

							}

						}

					}
				}
				XTime_GetTime(&tEnd);
				double time_ms = 1.0 * (tEnd - tStart) / (COUNTS_PER_SECOND/1000);
				printf("Data cache disabled, Instruction cache enabled is: %.3f ms.\n",time_ms);
			}
			else if(m == 2)
			{
				Xil_DCacheEnable();
                Xil_ICacheDisable();
				XTime_GetTime(&tStart);
				for(l = 0; l < ITERATIONS; l++){
					for(i = 0; i < SIZE_N; i++){
						for(j = 0; j < SIZE_P; j++){
                           C[i][j] = 0;
							for(k = 0; k < SIZE_M; k++){
                                  C[i][j] +=  A[i][k] * B[k][j];

							}

						}

					}
				}
				XTime_GetTime(&tEnd);
				double time_ms = 1.0 * (tEnd - tStart) / (COUNTS_PER_SECOND/1000);
				printf("Data cache enabled, Instruction cache disabled is: %.3f ms.\n",time_ms);
			}
			else if(m == 3)
			{
				Xil_DCacheDisable();
                Xil_ICacheDisable();
				XTime_GetTime(&tStart);
				for(l = 0; l < ITERATIONS; l++){
					for(i = 0; i < SIZE_N; i++){
						for(j = 0; j < SIZE_P; j++){
                           C[i][j] = 0;
							for(k = 0; k < SIZE_M; k++){
                                  C[i][j] +=  A[i][k] * B[k][j];
							}

						}
					}
				}
				XTime_GetTime(&tEnd);
				double time_ms = 1.0 * (tEnd - tStart) / (COUNTS_PER_SECOND/1000);
				printf("Data cache disabled, Instruction cache disabled is: %.3f ms.\n",time_ms);
			}
		}





    cleanup_platform();
    return 0;
}



