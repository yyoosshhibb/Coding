/*********************************************************************************

Copyright(c) 2015 Analog Devices, Inc. All Rights Reserved.

This software is proprietary and confidential.  By using this software you agree
to the terms of the associated Analog Devices License Agreement.

*********************************************************************************/

/**
 * @file:    adi_adau1761.h
 * @brief:   ADAU1761 low power stereo audio codec device driver definitions
 * @version: $Revision: 20811 $
 * @date:    $Date: 2015-01-22 16:19:06 -0500 (Thu, 22 Jan 2015) $
 *
 * @details
 *            This is the primary header file for the Low power stereo audio codec,
 *            which contains the API declarations, data and constant definitions
 *            used in the APIs.
 */

#ifndef ADI_ADAU1761_H_
#define ADI_ADAU1761_H_

#include <blackfin.h>
#include <services/gpio/adi_gpio.h>
#include <services/int/adi_int.h>
#include <drivers/twi/adi_twi.h>
#include <drivers/spi/adi_spi.h>
#include <drivers/sport/adi_sport.h>
/* The Audio Class Driver Device Entry Point Declaration */
#include <drivers/device_class/audio/adi_dev_audio_pdd.h>
#include "adi_adau1761_reg.h"

/* disable misra diagnostics as necessary */
#ifdef _MISRA_RULES
#pragma diag(push)
#pragma diag(suppress:misra_rule_5_1:"Identifiers (internal and external) shall not rely on the significance of more than 31 characters.")
#endif /* _MISRA_RULES */

/** @addtogroup ADAU1761_Driver ADAU1761 Low power stereo audio codec driver
 *  @{
 */


/** ADAU1761 Audio Codec Class Driver Entry Point Definition. */
extern ADI_DEV_AUDIO_ENTRY_POINT     ADIDevAudioADAU1761EntryPoint;


/** ADAU1761 device handle. */
typedef void*  ADI_ADAU1761_HANDLE;

/** SigmaStudio download function signature */
typedef void (* ADI_SIGMA_STUDIO_LOAD) ( void );

/*
 * Memory size in bytes required to open the communication device
 * Should be maximum of memory required by TWI and SPI
 **/
#define ADAU1761_COMM_DEV_MEM_SIZE ((ADI_TWI_MEMORY_SIZE) > (ADI_SPI_INT_MEMORY_SIZE) ? (ADI_TWI_MEMORY_SIZE) : (ADI_SPI_INT_MEMORY_SIZE))

/* Memory size required for the driver itself excluding the dependent drivers */
#define ADI_ADAU1761_SELF_MEMORY_SIZE     (290u)

/** The amount of application supplied memory required by the ADAU1761 driver (bytes). */
#define ADI_ADAU1761_MEMORY_SIZE          (ADI_ADAU1761_SELF_MEMORY_SIZE + ADAU1761_COMM_DEV_MEM_SIZE)

/** The return codes generated by the ADAU1761 driver. */
typedef enum
{
	ADI_ADAU1761_SUCCESS,                 /*!< The API is successful. */
	ADI_ADAU1761_FAILURE,                 /*!< The API failed to complete the operation. */
	ADI_ADAU1761_INVALID_DEVICE_NUM,      /*!< The device number is invalid. */
	ADI_ADAU1761_INSUFFICIENT_MEM,        /*!< The application supplied memory size is insufficient. */
	ADI_ADAU1761_NULL_POINTER,            /*!< A NULL pointer is invalid for this API. */
	ADI_ADAU1761_BAD_DEVICE_HANDLE,       /*!< The device handle is invalid. */
	ADI_ADAU1761_DEVICE_NOT_OPEN,         /*!< The device is not open. */
	ADI_ADAU1761_DEVICE_IN_USE,           /*!< The device is in use. */
	ADI_ADAU1761_SPORT_ERROR,             /*!< A SPORT device error occurred. */
	ADI_ADAU1761_COMM_DEV_FAILED,         /*!< The selected communication device failed. */
	ADI_ADAU1761_ACCESS_FAILED,           /*!< A failure to read/write the device registers occurred. */
	ADI_ADAU1761_INVALID_OPERATION,       /*!< The API call is invalid for the selected communication device. */
	ADI_ADAU1761_GPIO_FAILED,             /*!< The GPIO service returned an error. */
	ADI_ADAU1761_INVALID_VALUE,           /*!< The value parameter is invalid for this API. */
	ADI_ADAU1761_SEMAPHORE_FAILED,        /*!< A semaphore related failure occurred. */
	ADI_ADAU1761_MUTEX_FAILED,            /*!< A mutex related failure occurred. */
	ADI_ADAU1761_NO_BUFFER,               /*!< A descriptor is not available to store the given buffer. */
	ADI_ADAU1761_BUFFER_SIZE_ERROR,       /*!< The size of buffers is not equal. */
	ADI_ADAU1761_PLL_FRAC_MODE_REQ        /*!< This sample rate requires PLL fractional mode. */
} ADI_ADAU1761_RESULT;

/*! Enumeration of different events notified by the ADAU1761 driver */
typedef enum
{
    /*!< The audio Rx buffer is processed. */
	ADI_ADAU1761_EVENT_RX_BUFFER_PROCESSED   =   ADI_SPORT_EVENT_RX_BUFFER_PROCESSED,
    /*!< The audio Tx buffer is processed. */
	ADI_ADAU1761_EVENT_TX_BUFFER_PROCESSED   =   ADI_SPORT_EVENT_TX_BUFFER_PROCESSED
} ADI_ADAU1761_EVENT;

/*! Enumeration of hardware errors that are reported by the driver */
typedef enum
{
    /*!< No error occurred. */
	ADI_ADAU1761_HW_ERR_NONE                             = ADI_SPORT_HW_ERR_NONE,
    /*!< Data underflow in primary channel when transmitting data. */
	ADI_ADAU1761_HW_ERR_PRIMARY_CHNL_UNDERFLOW           = ADI_SPORT_HW_ERR_PRIMARY_CHNL_UNDERFLOW,
    /*!< Data overflow primary channel when receiving data. */
	ADI_ADAU1761_HW_ERR_PRIMARY_CHNL_OVERFLOW            = ADI_SPORT_HW_ERR_PRIMARY_CHNL_OVERFLOW,
    /*!< Data underflow in secondary channel when transmitting data. */
	ADI_ADAU1761_HW_ERR_SECONDARY_CHNL_UNDERFLOW         = ADI_SPORT_HW_ERR_SECONDARY_CHNL_UNDERFLOW,
    /*!< Data overflow secondary channel when receiving data. */
	ADI_ADAU1761_HW_ERR_SECONDARY_CHNL_OVERFLOW          = ADI_SPORT_HW_ERR_SECONDARY_CHNL_OVERFLOW,
    /*!< A frame sync error occurred. */
	ADI_ADAU1761_HW_ERR_FS                               = ADI_SPORT_HW_ERR_FS,
    /*!< A DMA error occurred. */
	ADI_ADAU1761_HW_ERR_DMA                              = ADI_SPORT_HW_ERR_DMA
} ADI_ADAU1761_HW_ERR;


/** The communication protocols supported by the ADAU1761 driver. */
typedef enum
{
	ADI_ADAU1761_COMM_DEV_SPI,          /*!< Use SPI for communicating with ADAU1761. */
	ADI_ADAU1761_COMM_DEV_TWI           /*!< Use TWI for communicating with ADAU1761. */
} ADI_ADAU1761_COMM_DEV;

/**
 * The ADAU1761 supports four TWI Addresses. Depending upon the board design
 * one of the enumerated addresses can be used.
 */
typedef enum
{
	ADI_ADAU1761_TWI_ADDR0   =  0x38u,  /*!< The TWI address when ADD1 pin is low and ADD0 pin is low */
	ADI_ADAU1761_TWI_ADDR1   =  0x39u,  /*!< The TWI address when ADD1 pin is low and ADD0 pin is high */
	ADI_ADAU1761_TWI_ADDR2   =  0x3Au,  /*!< The TWI address when ADD1 pin is high and ADD0 pin is low */
	ADI_ADAU1761_TWI_ADDR3   =  0x3Bu   /*!< The TWI address when ADD1 pin is high and ADD0 pin is high */
} ADI_ADAU1761_TWI_ADDR;

/**
 * SPORT input/output configuration
 */
typedef enum
{
	ADI_ADAU1761_SPORT_INPUT,  /*!< Configure the SPORT input channel. */
	ADI_ADAU1761_SPORT_OUTPUT  /*!< Configure the SPORT output channel. */
} ADI_ADAU1761_SPORT_DIR;

/**
 * SPORT mode configuration
 */
typedef enum
{
	ADI_ADAU1761_SPORT_I2S,   /*!< Configure the SPORT for I2S transfer mode. */
	ADI_ADAU1761_SPORT_TDM4,  /*!< Configure the SPORT for TDM4 transfer mode. */
	ADI_ADAU1761_SPORT_TDM8   /*!< Configure the SPORT for TDM8 transfer mode. */
} ADI_ADAU1761_SPORT_MODE;

/**
 * SPORT data length configuration
 */
typedef enum
{
	ADI_ADAU1761_SPORT_DATA_16 = 15u,   /*!< Configure the SPORT for 16-bit data transfer. */
	ADI_ADAU1761_SPORT_DATA_18 = 17u,   /*!< Configure the SPORT for 18-bit data transfer. */
	ADI_ADAU1761_SPORT_DATA_20 = 19u,   /*!< Configure the SPORT for 20-bit data transfer. */
	ADI_ADAU1761_SPORT_DATA_24 = 23u,   /*!< Configure the SPORT for 24-bit data transfer. */
	ADI_ADAU1761_SPORT_DATA_32 = 31u    /*!< Configure the SPORT for 32-bit data transfer. */
} ADI_ADAU1761_SPORT_DATA_LEN;

/**
 * Structure to hold the information regarding the SPORT device configuration.
 */
typedef struct adi_adau1761_SPORT_info
{
    uint32_t                    nDeviceNum;        /*!< The SPORT device number to be used for data transfer. */
    ADI_SPORT_CHANNEL           eChannel;          /*!< The SPORT channel number to be used for data transfer. */
    ADI_ADAU1761_SPORT_MODE     eMode;             /*!< The SPORT data transfer mode. */
    ADI_SPORT_HANDLE            hDevice;           /*!< The SPORT device handle. */
    uint8_t                    *pMemory;           /*!< The memory required by the SPORT device. */
    bool                        bEnableDMA;        /*!< The flag to enable DMA data transfer. */
    ADI_ADAU1761_SPORT_DATA_LEN eDataLen;          /*!< The SPORT data transfer length. */
    bool                        bEnableStreaming;  /*!< The flag to enable SPORT streaming mode. */
    uint32_t                    reserved1;         /* Reserved */
    uint32_t                    reserved2;         /* Reserved */
    uint32_t                    reserved3;         /* Reserved */
} ADI_ADAU1761_SPORT_INFO;

/**
 * Input source selection.
 */
typedef enum
{
	ADI_ADAU1761_INPUT_ADC,  /*!< Select the ADC as the input source. */
	ADI_ADAU1761_INPUT_MIC   /*!< Select the microphone as the input source. */
} ADI_ADAU1761_INPUT_SOURCE;

/**
 * Volume setting.
 */
typedef enum
{
	ADI_ADAU1761_VOL_HEADPHONE,        /*!< Set the Headphone volume control. */
	ADI_ADAU1761_VOL_LINE_OUT,         /*!< Set the line output volume. */
	ADI_ADAU1761_VOL_ADC_MIC,          /*!< Set the ADC or the digital microphone input volume. */
	ADI_ADAU1761_VOL_DAC,              /*!< Set the DAC input volume. */
	ADI_ADAU1761_VOL_LINE_IN_DIFF      /*!< Set the differential line input volume. */
} ADI_ADAU1761_VOLUME_CONTROL;

/**
 * Volume channel.
 */
typedef enum
{
	ADI_ADAU1761_VOL_CHAN_LEFT,        /*!< Set the left channel volume. */
	ADI_ADAU1761_VOL_CHAN_RIGHT,       /*!< Set the right channel volume. */
	ADI_ADAU1761_VOL_CHAN_BOTH         /*!< Set both the left and right channel volume. */
} ADI_ADAU1761_VOLUME_CHANNEL;

/**
 * Sample rates.
 */
typedef enum
{
	ADI_ADAU1761_SAMPLE_RATE_8KHZ,     /*!< Set the sample rate to 8 kHz. */
	ADI_ADAU1761_SAMPLE_RATE_12KHZ,    /*!< Set the sample rate to 12 kHz. */
	ADI_ADAU1761_SAMPLE_RATE_16KHZ,    /*!< Set the sample rate to 16 kHz. */
	ADI_ADAU1761_SAMPLE_RATE_24KHZ,    /*!< Set the sample rate to 24 kHz. */
	ADI_ADAU1761_SAMPLE_RATE_32KHZ,    /*!< Set the sample rate to 32 kHz. */
	ADI_ADAU1761_SAMPLE_RATE_44_1KHZ,  /*!< Set the sample rate to 44.1 kHz. */
	ADI_ADAU1761_SAMPLE_RATE_48KHZ,    /*!< Set the sample rate to 48 kHz. */
	ADI_ADAU1761_SAMPLE_RATE_96KHZ     /*!< Set the sample rate to 96 kHz. */
} ADI_ADAU1761_SAMPLE_RATE;

/*
 * API's
 */

#ifdef __cplusplus
extern "C" {
#endif

/*
 * Open the ADAU1761 driver.
 */
ADI_ADAU1761_RESULT adi_adau1761_Open (
	uint32_t              const     nDeviceNum,
	void *                const     pDeviceMemory,
	uint32_t              const     nMemSize,
	ADI_ADAU1761_COMM_DEV const     eCommDev,
	ADI_ADAU1761_HANDLE * const     phDevice
);

/*
 * Close the ADAU1761 driver.
 */
ADI_ADAU1761_RESULT adi_adau1761_Close (
	ADI_ADAU1761_HANDLE  const       hDevice
);

/*
 * Configure the SPI device used for communication.
 */
ADI_ADAU1761_RESULT adi_adau1761_ConfigSPI (
	ADI_ADAU1761_HANDLE  const  hDevice,
	uint32_t             const  nSPIDevNum,
	ADI_SPI_SSENABLE     const  eSlaveSelect
);

/*
 * Configure the TWI device used for communication.
 */
ADI_ADAU1761_RESULT adi_adau1761_ConfigTWI (
	ADI_ADAU1761_HANDLE     const  hDevice,
	uint32_t                const  nTWIDevNum,
	ADI_ADAU1761_TWI_ADDR   const  eTWIAddr
);

/*
 * Configure the SPORT device used for transferring audio data between
 * the ADAU1761 and host processor.
 */
ADI_ADAU1761_RESULT adi_adau1761_ConfigSPORT (
	ADI_ADAU1761_HANDLE       const  hDevice,
	ADI_ADAU1761_SPORT_DIR    const  eDir,
	ADI_ADAU1761_SPORT_INFO          *pInfoStruct
);

/*
 * Enable/Disable transfer of audio input data between the ADAU1761 and
 * host processor.
 */
ADI_ADAU1761_RESULT adi_adau1761_EnableInput (
	ADI_ADAU1761_HANDLE       const hDevice,
	bool                      const bEnable
);

/*
 * Enable/Disable transfer of audio output data between the ADAU1761 and
 * host processor.
 */
ADI_ADAU1761_RESULT adi_adau1761_EnableOutput (
	ADI_ADAU1761_HANDLE       const hDevice,
	bool                      const bEnable
);

/*
 * Registers a transmit callback for reporting the events.
 */
ADI_ADAU1761_RESULT adi_adau1761_RegisterTxCallback (
    ADI_ADAU1761_HANDLE  const      hDevice,
    ADI_CALLBACK                    pfCallback,
    void *const                     pCBParam
);

/*
 * Registers a receive callback for reporting the events.
 */
ADI_ADAU1761_RESULT adi_adau1761_RegisterRxCallback (
    ADI_ADAU1761_HANDLE  const      hDevice,
    ADI_CALLBACK                    pfCallback,
    void *const                     pCBParam
);

/*
 * Submit a transmit buffer to the ADAU1761 device (non-blocking).
 */
ADI_ADAU1761_RESULT adi_adau1761_SubmitTxBuffer(
		ADI_ADAU1761_HANDLE    const hDevice,
		void                        *pBuffer,
		uint32_t               const nBufSize
);

/*
 * Submit a receive buffer to the ADAU1761 device (non-blocking).
 */
ADI_ADAU1761_RESULT adi_adau1761_SubmitRxBuffer(
		ADI_ADAU1761_HANDLE    const hDevice,
		void                        *pBuffer,
		uint32_t               const nBufSize
);

/*
 * Return the transmit buffer if a filled buffer is available, otherwise
 * wait until a buffer is filled.
 */
ADI_ADAU1761_RESULT adi_adau1761_GetTxBuffer (
		ADI_ADAU1761_HANDLE   const hDevice,
		void                 **ppBuffer
);

/*
 * Return the receive buffer if a filled buffer is available, otherwise
 * wait until a buffer is filled.
 */
ADI_ADAU1761_RESULT adi_adau1761_GetRxBuffer (
		ADI_ADAU1761_HANDLE   const hDevice,
		void                 **ppBuffer
);

/*
 * Checks if a transmit buffer is available.
 */
ADI_ADAU1761_RESULT adi_adau1761_IsTxBuffAvailable (

	ADI_ADAU1761_HANDLE            const hDevice,
    bool *const                    pbAvailable
);

/*
 * Checks if a receive buffer is available.
 */
ADI_ADAU1761_RESULT adi_adau1761_IsRxBuffAvailable (

	ADI_ADAU1761_HANDLE            const hDevice,
    bool *const                    pbAvailable
);

/*
 * Select ADC or Digital Microphone as the audio input source.
 */
ADI_ADAU1761_RESULT adi_adau1761_SelectInputSource (
	ADI_ADAU1761_HANDLE            const hDevice,
	ADI_ADAU1761_INPUT_SOURCE      const eSource
);

/*
 * Set a volume control level.
 */
ADI_ADAU1761_RESULT adi_adau1761_SetVolume (
	ADI_ADAU1761_HANDLE            const hDevice,
	ADI_ADAU1761_VOLUME_CONTROL    const eVolumeCtrl,
	ADI_ADAU1761_VOLUME_CHANNEL    const eChannel,
	bool                           const bEnable,
	uint8_t                        const value
);

/*
 * Set the ADC, DAC, serial port and DSP sample rate.
 */
ADI_ADAU1761_RESULT adi_adau1761_SetSampleRate (
	ADI_ADAU1761_HANDLE            const hDevice,
	ADI_ADAU1761_SAMPLE_RATE       const eSampleRate
);

/*
 * Write values to one or more ADAU1761 device registers.
 */
ADI_ADAU1761_RESULT adi_adau1761_SetRegisterBlock (
	ADI_ADAU1761_HANDLE       const hDevice,
	uint16_t                  const regAddr,
	uint16_t                  const length,
	uint8_t                         *pData
);

/*
 * Write a value to a single ADAU1761 device register.
 */
ADI_ADAU1761_RESULT adi_adau1761_SetRegister (
	ADI_ADAU1761_HANDLE       const hDevice,
	uint16_t                  const regAddr,
	uint8_t                         value
);

/*
 * Read values from one or more ADAU1761 device registers.
 */
ADI_ADAU1761_RESULT adi_adau1761_GetRegisterBlock (
	ADI_ADAU1761_HANDLE       const hDevice,
	uint16_t                  const regAddr,
	uint16_t                  const length,
	uint8_t                         *pData
);

/*
 * Read a value from a single ADAU1761 device register.
 */
ADI_ADAU1761_RESULT adi_adau1761_GetRegister (
	ADI_ADAU1761_HANDLE            const hDevice,
	uint16_t                       const regAddr,
	uint8_t                              *pValue
);

/*
 * Sigma Studio functions
 */

/*
 * Loads SigmaStudio program data, parameter data and register settings.
 */
ADI_ADAU1761_RESULT adi_adau1761_SigmaStudioLoad (
	ADI_ADAU1761_HANDLE     const  hDevice,
	ADI_SIGMA_STUDIO_LOAD   const  pfSSLoad
);

/*
 * Device register write function required by SigmaStudio load.
 */
void SIGMA_WRITE_REGISTER_BLOCK(
	uint16_t  devAddress,
	uint16_t  regAddr,
	uint16_t  length,
	uint8_t   *pRegData
);

/*
 * A simple delay loop required by SigmaStudio load.
 */
void SIGMA_WRITE_DELAY(
	uint16_t  devAddress,
	uint16_t  length,
	uint8_t   *pData
);

#ifdef __cplusplus
}
#endif

/**@}*/

#ifdef _MISRA_RULES
#pragma diag(pop)
#endif /* _MISRA_RULES */

#endif /* ADI_ADAU1761_H_ */
