-- VHDL Entity sbus_awfg_lib.tb_top_awfg_app.symbol
--
-- Created:
--          by - Net.UNKNOWN (M00443)
--          at - 13:03:28 11.02.2022
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2017.1a (Build 5)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

entity tb_top_awfg_app is
   generic( 
      C_DMA_DWIDTH : integer := 64
   );
-- Declarations

end tb_top_awfg_app ;

--
-- VHDL Architecture sbus_awfg_lib.tb_top_awfg_app.struct
--
-- Created:
--          by - Net.UNKNOWN (M00443)
--          at - 13:21:00 15.06.2022
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2017.1a (Build 5)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

library sbus_awfg_lib;

architecture struct of tb_top_awfg_app is

   -- Architecture declarations

   -- Internal signal declarations
   signal adc0        : std_logic_vector(15 downto 0);
   signal adc1        : std_logic_vector(15 downto 0);
   signal adc_cs      : std_logic;
   signal adc_sclk    : std_logic;
   signal adc_sdata0  : std_logic;
   signal adc_sdata1  : std_logic;
   signal buttons     : std_logic_vector(3 downto 0);
   signal clk         : std_logic;
   signal dac0        : std_logic_vector(15 downto 0);
   signal dac1        : std_logic_vector(15 downto 0);
   signal dac_sclk    : std_logic;
   signal dac_sdin0   : std_logic;
   signal dac_sdin1   : std_logic;
   signal dac_sync    : std_logic;
   signal encoder0    : std_logic_vector(1 downto 0);
   signal encoder1    : std_logic_vector(1 downto 0);
   signal leds        : std_logic_vector(3 downto 0);
   signal next_sample : std_logic;
   signal reset       : std_logic;
   signal rxd         : std_logic;
   signal sbus_ack    : std_logic;
   signal sbus_addr   : std_logic_vector(15 downto 0);
   signal sbus_be     : std_logic_vector(3 downto 0);
   signal sbus_rd     : std_logic;
   signal sbus_rdata  : std_logic_vector(31 downto 0);
   signal sbus_wdata  : std_logic_vector(31 downto 0);
   signal sbus_we     : std_logic;
   signal sliders     : std_logic_vector(3 downto 0);
   signal txd         : std_logic;


   -- Component Declarations
   component adc_model
   port (
      adc0        : in     std_logic_vector (15 downto 0);
      adc1        : in     std_logic_vector (15 downto 0);
      adc_cs      : in     std_logic;
      adc_sclk    : in     std_logic;
      adc_sdata0  : out    std_logic;
      adc_sdata1  : out    std_logic;
      next_sample : out    std_logic
   );
   end component;
   component bhv_sbus_bfm
   generic (
      COMMANDS : string  := "buscommands.txt";
      AWIDTH   : integer := 32;              -- 
      DWIDTH   : integer := 32               -- 
   );
   port (
      bus_addr : out    std_logic_vector ( AWIDTH-1 downto 0 );
      bus_we   : out    std_logic ;
      bus_dout : out    std_logic_vector ( DWIDTH-1 downto 0 );
      bus_rd   : out    std_logic ;
      bus_din  : in     std_logic_vector ( DWIDTH-1 downto 0 );
      clk      : in     std_logic ;
      reset    : in     std_logic ;
      bus_ack  : in     std_logic ;
      eof      : out    std_logic ;
      bus_be   : out    std_logic_vector (3 downto 0)
   );
   end component;
   component bhv_zybo_tester2
   generic (
      commands_g           : string  := "commands.txt";
      clk_period_g         : time    := 8 ns;
      strobe0_clk_cycles_g : integer := 10;
      strobe1_clk_cycles_g : integer := 10;
      reset_clk_cycles_g   : integer := 10
   );
   port (
      buttons  : out    std_logic_vector (3 downto 0);
      clk      : out    std_logic ;
      reset    : out    std_logic ;
      strobe0  : out    std_logic ;
      strobe1  : out    std_logic ;
      encoder0 : out    std_logic_vector (1 downto 0);
      encoder1 : out    std_logic_vector (1 downto 0);
      sliders  : out    std_logic_vector (3 downto 0)
   );
   end component;
   component dac_model
   port (
      dac_sclk  : in     std_logic;
      dac_sdin0 : in     std_logic;
      dac_sdin1 : in     std_logic;
      dac_sync  : in     std_logic;
      dac0      : out    std_logic_vector (15 downto 0);
      dac1      : out    std_logic_vector (15 downto 0)
   );
   end component;
   component top_awfg
   generic (
      C_SLV_ADDR_BASE      : std_logic_vector := X"0000";
      C_SLV_ADDR_RANGE     : std_logic_vector := X"0000";
      C_CORE_CLK_FREQUENCY : integer          := 100000000;
      simulation_g         : boolean          := false
   );
   port (
      buttons    : in     std_logic_vector (3 downto 0);
      clk        : in     std_logic ;
      reset      : in     std_logic ;
      rxd        : in     std_logic ;
      sbus_addr  : in     std_logic_vector (15 downto 0);
      sbus_be    : in     std_logic_vector (3 downto 0);
      sbus_rd    : in     std_logic ;
      sbus_wdata : in     std_logic_vector (31 downto 0);
      sbus_we    : in     std_logic ;
      sliders    : in     std_logic_vector (3 downto 0);
      dac_sclk   : out    std_logic ;
      dac_sdin0  : out    std_logic ;
      dac_sdin1  : out    std_logic ;
      dac_sync   : out    std_logic ;
      leds       : out    std_logic_vector (3 downto 0);
      pmod_jc    : out    std_logic_vector (7 downto 0);
      sbus_ack   : out    std_logic ;
      sbus_rdata : out    std_logic_vector (31 downto 0);
      txd        : out    std_logic 
   );
   end component;

   -- Optional embedded configurations
   -- pragma synthesis_off
   for all : adc_model use entity sbus_awfg_lib.adc_model;
   for all : bhv_sbus_bfm use entity sbus_awfg_lib.bhv_sbus_bfm;
   for all : bhv_zybo_tester2 use entity sbus_awfg_lib.bhv_zybo_tester2;
   for all : dac_model use entity sbus_awfg_lib.dac_model;
   for all : top_awfg use entity sbus_awfg_lib.top_awfg;
   -- pragma synthesis_on


begin
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 2 eb2
   adc0 <= X"0800";
   adc1 <= X"5555";                                   


   -- Instance port mappings.
   U_10 : adc_model
      port map (
         adc0        => adc0,
         adc1        => adc1,
         adc_cs      => adc_cs,
         adc_sclk    => adc_sclk,
         adc_sdata0  => adc_sdata0,
         adc_sdata1  => adc_sdata1,
         next_sample => next_sample
      );
   U_9 : bhv_sbus_bfm
      generic map (
         COMMANDS => "buscommands.txt",
         AWIDTH   => 16,              -- 
         DWIDTH   => 32               -- 
      )
      port map (
         bus_addr => sbus_addr,
         bus_we   => sbus_we,
         bus_dout => sbus_wdata,
         bus_rd   => sbus_rd,
         bus_din  => sbus_rdata,
         clk      => clk,
         reset    => reset,
         bus_ack  => sbus_ack,
         eof      => open,
         bus_be   => sbus_be
      );
   U_3 : bhv_zybo_tester2
      generic map (
         commands_g           => "commands.txt",
         clk_period_g         => 10 ns,
         strobe0_clk_cycles_g => 10,
         strobe1_clk_cycles_g => 10,
         reset_clk_cycles_g   => 10
      )
      port map (
         buttons  => buttons,
         clk      => clk,
         reset    => reset,
         strobe0  => open,
         strobe1  => open,
         encoder0 => encoder0,
         encoder1 => encoder1,
         sliders  => sliders
      );
   U_8 : dac_model
      port map (
         dac_sclk  => dac_sclk,
         dac_sdin0 => dac_sdin0,
         dac_sdin1 => dac_sdin1,
         dac_sync  => dac_sync,
         dac0      => dac0,
         dac1      => dac1
      );
   U_0 : top_awfg
      generic map (
         C_SLV_ADDR_BASE      => X"4000",
         C_SLV_ADDR_RANGE     => X"0018",
         C_CORE_CLK_FREQUENCY => 100000000,
         simulation_g         => true
      )
      port map (
         buttons    => buttons,
         clk        => clk,
         reset      => reset,
         rxd        => rxd,
         sbus_addr  => sbus_addr,
         sbus_be    => sbus_be,
         sbus_rd    => sbus_rd,
         sbus_wdata => sbus_wdata,
         sbus_we    => sbus_we,
         sliders    => sliders,
         dac_sclk   => dac_sclk,
         dac_sdin0  => dac_sdin0,
         dac_sdin1  => dac_sdin1,
         dac_sync   => dac_sync,
         leds       => leds,
         pmod_jc    => open,
         sbus_ack   => sbus_ack,
         sbus_rdata => sbus_rdata,
         txd        => txd
      );

end struct;
