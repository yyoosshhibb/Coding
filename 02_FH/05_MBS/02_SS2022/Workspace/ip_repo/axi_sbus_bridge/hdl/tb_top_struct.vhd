-- VHDL Entity axi_sbus_bridge.tb_top.symbol
--
-- Created:
--          by - net.UNKNOWN (KPERSM7467)
--          at - 10:25:19 13.12.2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.2 (Build 5)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

entity tb_top is
   generic( 
      -- Width of Address Bus
      C_M00_AXI_ADDR_WIDTH   : integer := 32;
      -- Width of User Read Address Bus
      C_M00_AXI_ARUSER_WIDTH : integer := 1;
      -- Width of User Write Address Bus
      C_M00_AXI_AWUSER_WIDTH : integer := 1;
      -- Burst Length. Supports 1, 2, 4, 8, 16, 32, 64, 128, 256 burst lengths
      C_M00_AXI_BURST_LEN    : integer := 16;
      -- Width of User Response Bus
      C_M00_AXI_BUSER_WIDTH  : integer := 1;
      -- Width of Data Bus
      C_M00_AXI_DATA_WIDTH   : integer := 64;
      -- Thread ID Width
      C_M00_AXI_ID_WIDTH     : integer := 12;
      -- Width of User Read Data Bus
      C_M00_AXI_RUSER_WIDTH  : integer := 1;
      -- Width of User Write Data Bus
      C_M00_AXI_WUSER_WIDTH  : integer := 1;
      -- Width of Address Bus
      C_M01_AXI_ADDR_WIDTH   : integer := 32;
      -- Width of User Read Address Bus
      C_M01_AXI_ARUSER_WIDTH : integer := 1;
      -- Width of User Write Address Bus
      C_M01_AXI_AWUSER_WIDTH : integer := 1;
      -- Burst Length. Supports 1, 2, 4, 8, 16, 32, 64, 128, 256 burst lengths
      C_M01_AXI_BURST_LEN    : integer := 4;
      -- Width of User Response Bus
      C_M01_AXI_BUSER_WIDTH  : integer := 1;
      -- Width of Data Bus
      C_M01_AXI_DATA_WIDTH   : integer := 64;
      -- Thread ID Width
      C_M01_AXI_ID_WIDTH     : integer := 12;
      -- Width of User Read Data Bus
      C_M01_AXI_RUSER_WIDTH  : integer := 1;
      -- Width of User Write Data Bus
      C_M01_AXI_WUSER_WIDTH  : integer := 1;
      C_S00_AXI_ADDR_WIDTH   : integer := 18;
      C_S00_AXI_ARUSER_WIDTH : integer := 1;
      C_S00_AXI_AWUSER_WIDTH : integer := 1;
      C_S00_AXI_BUSER_WIDTH  : integer := 1;
      C_S00_AXI_DATA_WIDTH   : integer := 32;
      -- Users to add parameters here
      
      -- User parameters ends
      -- Do not modify the parameters beyond this line
      
      
      -- Parameters of Axi Slave Bus Interface S00_AXI
      C_S00_AXI_ID_WIDTH     : integer := 12;
      C_S00_AXI_RUSER_WIDTH  : integer := 1;
      C_S00_AXI_WUSER_WIDTH  : integer := 1;
      C_SLV_ADDR_WIDTH       : integer := 16;
      C_SLV_DATA_WIDTH       : integer := 32
   );
-- Declarations

end tb_top ;

--
-- VHDL Architecture axi_sbus_bridge.tb_top.struct
--
-- Created:
--          by - net.UNKNOWN (KPERSM7467)
--          at - 10:25:35 13.12.2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.2 (Build 5)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
library work;
use work.busdef.all;

library axi_sbus_bridge;

architecture struct of tb_top is

   -- Architecture declarations

   -- Internal signal declarations
   -- Users to add ports here
   signal clk              : std_logic;
   signal lo               : std_logic;
   signal lo32             : std_logic_vector(31 downto 0);
   signal load2mem         : std_logic;
   -- User ports ends
-- Do not modify the ports beyond this line


-- Ports of Axi Slave Bus Interface S00_AXI
   signal s00_axi_aclk     : std_logic;
   signal s00_axi_araddr   : std_logic_vector(C_S00_AXI_ADDR_WIDTH-1 downto 0);
   signal s00_axi_arburst  : std_logic_vector(1 downto 0);
   signal s00_axi_arcache  : std_logic_vector(3 downto 0);
   signal s00_axi_aresetn  : std_logic;
   signal s00_axi_arid     : std_logic_vector(C_S00_AXI_ID_WIDTH-1 downto 0);
   signal s00_axi_arlen    : std_logic_vector(7 downto 0);
   signal s00_axi_arlock   : std_logic;
   signal s00_axi_arprot   : std_logic_vector(2 downto 0);
   signal s00_axi_arqos    : std_logic_vector(3 downto 0);
   signal s00_axi_arready  : std_logic;
   signal s00_axi_arregion : std_logic_vector(3 downto 0);
   signal s00_axi_arsize   : std_logic_vector(2 downto 0);
   signal s00_axi_aruser   : std_logic_vector(C_S00_AXI_ARUSER_WIDTH-1 downto 0);
   signal s00_axi_arvalid  : std_logic;
   signal s00_axi_awaddr   : std_logic_vector(C_S00_AXI_ADDR_WIDTH-1 downto 0);
   signal s00_axi_awburst  : std_logic_vector(1 downto 0);
   signal s00_axi_awcache  : std_logic_vector(3 downto 0);
   signal s00_axi_awid     : std_logic_vector(C_S00_AXI_ID_WIDTH-1 downto 0);
   signal s00_axi_awlen    : std_logic_vector(7 downto 0);
   signal s00_axi_awlock   : std_logic;
   signal s00_axi_awprot   : std_logic_vector(2 downto 0);
   signal s00_axi_awqos    : std_logic_vector(3 downto 0);
   signal s00_axi_awready  : std_logic;
   signal s00_axi_awregion : std_logic_vector(3 downto 0);
   signal s00_axi_awsize   : std_logic_vector(2 downto 0);
   signal s00_axi_awuser   : std_logic_vector(C_S00_AXI_AWUSER_WIDTH-1 downto 0);
   signal s00_axi_awvalid  : std_logic;
   signal s00_axi_bid      : std_logic_vector(C_S00_AXI_ID_WIDTH-1 downto 0);
   signal s00_axi_bready   : std_logic;
   signal s00_axi_bresp    : std_logic_vector(1 downto 0);
   signal s00_axi_buser    : std_logic_vector(C_S00_AXI_BUSER_WIDTH-1 downto 0);
   signal s00_axi_bvalid   : std_logic;
   signal s00_axi_rdata    : std_logic_vector(C_S00_AXI_DATA_WIDTH-1 downto 0);
   signal s00_axi_rid      : std_logic_vector(C_S00_AXI_ID_WIDTH-1 downto 0);
   signal s00_axi_rlast    : std_logic;
   signal s00_axi_rready   : std_logic;
   signal s00_axi_rresp    : std_logic_vector(1 downto 0);
   signal s00_axi_ruser    : std_logic_vector(C_S00_AXI_RUSER_WIDTH-1 downto 0);
   signal s00_axi_rvalid   : std_logic;
   signal s00_axi_wdata    : std_logic_vector(C_S00_AXI_DATA_WIDTH-1 downto 0);
   signal s00_axi_wlast    : std_logic;
   signal s00_axi_wready   : std_logic;
   signal s00_axi_wstrb    : std_logic_vector((C_S00_AXI_DATA_WIDTH/8)-1 downto 0);
   signal s00_axi_wuser    : std_logic_vector(C_S00_AXI_WUSER_WIDTH-1 downto 0);
   signal s00_axi_wvalid   : std_logic;
   signal save2file        : std_logic;
   signal sbus_ack         : std_logic;
   signal sbus_addr        : std_logic_vector(15 downto 0);
   signal sbus_i           : sbus_i_t;
   signal sbus_i_null      : sbus_i_t;
   signal sbus_o           : sbus_o_t;
   signal sbus_rd          : std_logic;
   signal sbus_rdata       : std_logic_vector(31 downto 0);
   signal sbus_wdata       : std_logic_vector(31 downto 0);
   signal sbus_we          : std_logic;


   -- Component Declarations
   component dpram_fileio
   generic (
      simulation_g    : boolean := false;
      hex_format_g    : boolean := true;
      save_filename_g : string  := "dpram32_dump.txt";
      load_filename_g : string  := "dpram32_dump.txt";
      addr_base_a_g   : std_logic_vector;
      addr_base_b_g   : std_logic_vector;
      addr_range_g    : std_logic_vector;
      addr_width_g    : integer := 8;                --width of address
      data_width_g    : integer := 32                --width of data
   );
   port (
      clka      : in     std_logic ;
      save2file : in     std_logic ;
      load2mem  : in     std_logic ;
      sbus_i_a  : in     sbus_i_t ;
      sbus_i_b  : in     sbus_i_t ;
      sbus_o_a  : out    sbus_o_t ;
      sbus_o_b  : out    sbus_o_t 
   );
   end component;
   component sbus_termination
   port (
      sbus_i_null : out    sbus_i_t;
      sbus_o_null : out    sbus_o_t
   );
   end component;
   component test_axi_mst
   generic (
      C_S00_AXI_ADDR_WIDTH   : integer := 6;
      C_S00_AXI_ARUSER_WIDTH : integer := 1;
      C_S00_AXI_AWUSER_WIDTH : integer := 1;
      C_S00_AXI_BUSER_WIDTH  : integer := 1;
      C_S00_AXI_DATA_WIDTH   : integer := 32;
      -- Users to add parameters here
      
      -- User parameters ends
      -- Do not modify the parameters beyond this line
      
      
      -- Parameters of Axi Slave Bus Interface S00_AXI
      C_S00_AXI_ID_WIDTH     : integer := 1;
      C_S00_AXI_RUSER_WIDTH  : integer := 1;
      C_S00_AXI_WUSER_WIDTH  : integer := 1;
      clk_period_g           : time    := 8ps;
      COMMANDS               : string  := "buscommands.txt"
   );
   port (
      s00_axi_arready  : in     std_logic ;
      s00_axi_awready  : in     std_logic ;
      s00_axi_bid      : in     std_logic_vector (C_S00_AXI_ID_WIDTH-1 downto 0);
      s00_axi_bresp    : in     std_logic_vector (1 downto 0);
      s00_axi_buser    : in     std_logic_vector (C_S00_AXI_BUSER_WIDTH-1 downto 0);
      s00_axi_bvalid   : in     std_logic ;
      s00_axi_rdata    : in     std_logic_vector (C_S00_AXI_DATA_WIDTH-1 downto 0);
      s00_axi_rid      : in     std_logic_vector (C_S00_AXI_ID_WIDTH-1 downto 0);
      s00_axi_rlast    : in     std_logic ;
      s00_axi_rresp    : in     std_logic_vector (1 downto 0);
      s00_axi_ruser    : in     std_logic_vector (C_S00_AXI_RUSER_WIDTH-1 downto 0);
      s00_axi_rvalid   : in     std_logic ;
      s00_axi_wready   : in     std_logic ;
      -- User ports ends
      -- Do not modify the ports beyond this line
      
      
      -- Ports of Axi Slave Bus Interface S00_AXI
      s00_axi_aclk     : out    std_logic ;
      s00_axi_araddr   : out    std_logic_vector (C_S00_AXI_ADDR_WIDTH-1 downto 0);
      s00_axi_arburst  : out    std_logic_vector (1 downto 0);
      s00_axi_arcache  : out    std_logic_vector (3 downto 0);
      s00_axi_aresetn  : out    std_logic ;
      s00_axi_arid     : out    std_logic_vector (C_S00_AXI_ID_WIDTH-1 downto 0);
      s00_axi_arlen    : out    std_logic_vector (7 downto 0);
      s00_axi_arlock   : out    std_logic ;
      s00_axi_arprot   : out    std_logic_vector (2 downto 0);
      s00_axi_arqos    : out    std_logic_vector (3 downto 0);
      s00_axi_arregion : out    std_logic_vector (3 downto 0);
      s00_axi_arsize   : out    std_logic_vector (2 downto 0);
      s00_axi_aruser   : out    std_logic_vector (C_S00_AXI_ARUSER_WIDTH-1 downto 0);
      s00_axi_arvalid  : out    std_logic ;
      s00_axi_awaddr   : out    std_logic_vector (C_S00_AXI_ADDR_WIDTH-1 downto 0);
      s00_axi_awburst  : out    std_logic_vector (1 downto 0);
      s00_axi_awcache  : out    std_logic_vector (3 downto 0);
      s00_axi_awid     : out    std_logic_vector (C_S00_AXI_ID_WIDTH-1 downto 0);
      s00_axi_awlen    : out    std_logic_vector (7 downto 0);
      s00_axi_awlock   : out    std_logic ;
      s00_axi_awprot   : out    std_logic_vector (2 downto 0);
      s00_axi_awqos    : out    std_logic_vector (3 downto 0);
      s00_axi_awregion : out    std_logic_vector (3 downto 0);
      s00_axi_awsize   : out    std_logic_vector (2 downto 0);
      s00_axi_awuser   : out    std_logic_vector (C_S00_AXI_AWUSER_WIDTH-1 downto 0);
      s00_axi_awvalid  : out    std_logic ;
      s00_axi_bready   : out    std_logic ;
      s00_axi_rready   : out    std_logic ;
      s00_axi_wdata    : out    std_logic_vector (C_S00_AXI_DATA_WIDTH-1 downto 0);
      s00_axi_wlast    : out    std_logic ;
      s00_axi_wstrb    : out    std_logic_vector ((C_S00_AXI_DATA_WIDTH/8)-1 downto 0);
      s00_axi_wuser    : out    std_logic_vector (C_S00_AXI_WUSER_WIDTH-1 downto 0);
      s00_axi_wvalid   : out    std_logic 
   );
   end component;
   component to_sbus
   port (
      sbus_ack   : out    std_logic ;
      sbus_rd    : in     std_logic ;
      sbus_we    : in     std_logic ;
      sbus_addr  : in     std_logic_vector (15 downto 0);
      sbus_i     : out    sbus_i_t ;
      sbus_o     : in     sbus_o_t ;
      sbus_rdata : out    std_logic_vector (31 downto 0);
      sbus_wdata : in     std_logic_vector (31 downto 0)
   );
   end component;
   component top_axi_sbus_bridge
   generic (
      C_S00_AXI_ADDR_WIDTH   : integer := 18;
      C_S00_AXI_ARUSER_WIDTH : integer := 0;
      C_S00_AXI_AWUSER_WIDTH : integer := 0;
      C_S00_AXI_BUSER_WIDTH  : integer := 0;
      C_S00_AXI_DATA_WIDTH   : integer := 32;
      -- Users to add parameters here
      
      -- User parameters ends
      -- Do not modify the parameters beyond this line
      
      
      -- Parameters of Axi Slave Bus Interface S00_AXI
      C_S00_AXI_ID_WIDTH     : integer := 12;
      C_S00_AXI_RUSER_WIDTH  : integer := 0;
      C_S00_AXI_WUSER_WIDTH  : integer := 0;
      C_SLV_ADDR_WIDTH       : integer := 16;
      C_SLV_DATA_WIDTH       : integer := 32;
      C_SYNC_WIDTH           : integer := 8;
      C_CORE_CLOCK_FREQ      : integer := 100000000;
      hw_serial_number_g     : integer := 12;
      hw_version_g           : integer := 123
   );
   port (
      bus0_sbus_ack    : in     std_logic ;
      bus0_sbus_rdata  : in     std_logic_vector (31 downto 0);
      bus1_sbus_ack    : in     std_logic ;
      bus1_sbus_rdata  : in     std_logic_vector (31 downto 0);
      bus2_sbus_ack    : in     std_logic ;
      bus2_sbus_rdata  : in     std_logic_vector (31 downto 0);
      bus3_sbus_ack    : in     std_logic ;
      bus3_sbus_rdata  : in     std_logic_vector (31 downto 0);
      -- Users to add ports here
      
      -- User ports ends
      -- Do not modify the ports beyond this line
      
      
      -- Ports of Axi Slave Bus Interface S00_AXI
      s00_axi_aclk     : in     std_logic ;
      s00_axi_araddr   : in     std_logic_vector (C_S00_AXI_ADDR_WIDTH-1 downto 0);
      s00_axi_arburst  : in     std_logic_vector (1 downto 0);
      s00_axi_arcache  : in     std_logic_vector (3 downto 0);
      s00_axi_aresetn  : in     std_logic ;
      s00_axi_arid     : in     std_logic_vector (C_S00_AXI_ID_WIDTH-1 downto 0);
      s00_axi_arlen    : in     std_logic_vector (7 downto 0);
      s00_axi_arlock   : in     std_logic ;
      s00_axi_arprot   : in     std_logic_vector (2 downto 0);
      s00_axi_arqos    : in     std_logic_vector (3 downto 0);
      s00_axi_arregion : in     std_logic_vector (3 downto 0);
      s00_axi_arsize   : in     std_logic_vector (2 downto 0);
      s00_axi_aruser   : in     std_logic_vector (C_S00_AXI_ARUSER_WIDTH-1 downto 0);
      s00_axi_arvalid  : in     std_logic ;
      s00_axi_awaddr   : in     std_logic_vector (C_S00_AXI_ADDR_WIDTH-1 downto 0);
      s00_axi_awburst  : in     std_logic_vector (1 downto 0);
      s00_axi_awcache  : in     std_logic_vector (3 downto 0);
      s00_axi_awid     : in     std_logic_vector (C_S00_AXI_ID_WIDTH-1 downto 0);
      s00_axi_awlen    : in     std_logic_vector (7 downto 0);
      s00_axi_awlock   : in     std_logic ;
      s00_axi_awprot   : in     std_logic_vector (2 downto 0);
      s00_axi_awqos    : in     std_logic_vector (3 downto 0);
      s00_axi_awregion : in     std_logic_vector (3 downto 0);
      s00_axi_awsize   : in     std_logic_vector (2 downto 0);
      s00_axi_awuser   : in     std_logic_vector (C_S00_AXI_AWUSER_WIDTH-1 downto 0);
      s00_axi_awvalid  : in     std_logic ;
      s00_axi_bready   : in     std_logic ;
      s00_axi_rready   : in     std_logic ;
      s00_axi_wdata    : in     std_logic_vector (C_S00_AXI_DATA_WIDTH-1 downto 0);
      s00_axi_wlast    : in     std_logic ;
      s00_axi_wstrb    : in     std_logic_vector ((C_S00_AXI_DATA_WIDTH/8)-1 downto 0);
      s00_axi_wuser    : in     std_logic_vector (C_S00_AXI_WUSER_WIDTH-1 downto 0);
      s00_axi_wvalid   : in     std_logic ;
      bus0_sbus_addr   : out    std_logic_vector (15 downto 0);
      bus0_sbus_rd     : out    std_logic ;
      bus0_sbus_wdata  : out    std_logic_vector (31 downto 0);
      bus0_sbus_we     : out    std_logic ;
      bus1_sbus_addr   : out    std_logic_vector (15 downto 0);
      bus1_sbus_rd     : out    std_logic ;
      bus1_sbus_wdata  : out    std_logic_vector (31 downto 0);
      bus1_sbus_we     : out    std_logic ;
      bus2_sbus_addr   : out    std_logic_vector (15 downto 0);
      bus2_sbus_rd     : out    std_logic ;
      bus2_sbus_wdata  : out    std_logic_vector (31 downto 0);
      bus2_sbus_we     : out    std_logic ;
      bus3_sbus_addr   : out    std_logic_vector (15 downto 0);
      bus3_sbus_rd     : out    std_logic ;
      bus3_sbus_wdata  : out    std_logic_vector (31 downto 0);
      bus3_sbus_we     : out    std_logic ;
      -- Users to add ports here
      clk_o            : out    std_logic ;
      irq_o            : out    std_logic ;
      reset_o          : out    std_logic ;
      s00_axi_arready  : out    std_logic ;
      s00_axi_awready  : out    std_logic ;
      s00_axi_bid      : out    std_logic_vector (C_S00_AXI_ID_WIDTH-1 downto 0);
      s00_axi_bresp    : out    std_logic_vector (1 downto 0);
      s00_axi_buser    : out    std_logic_vector (C_S00_AXI_BUSER_WIDTH-1 downto 0);
      s00_axi_bvalid   : out    std_logic ;
      s00_axi_rdata    : out    std_logic_vector (C_S00_AXI_DATA_WIDTH-1 downto 0);
      s00_axi_rid      : out    std_logic_vector (C_S00_AXI_ID_WIDTH-1 downto 0);
      s00_axi_rlast    : out    std_logic ;
      s00_axi_rresp    : out    std_logic_vector (1 downto 0);
      s00_axi_ruser    : out    std_logic_vector (C_S00_AXI_RUSER_WIDTH-1 downto 0);
      s00_axi_rvalid   : out    std_logic ;
      s00_axi_wready   : out    std_logic ;
      sync_o           : out    std_logic_vector (C_SYNC_WIDTH-1 downto 0)
   );
   end component;

   -- Optional embedded configurations
   -- pragma synthesis_off
   for all : dpram_fileio use entity axi_sbus_bridge.dpram_fileio;
   for all : sbus_termination use entity axi_sbus_bridge.sbus_termination;
   for all : test_axi_mst use entity axi_sbus_bridge.test_axi_mst;
   for all : to_sbus use entity axi_sbus_bridge.to_sbus;
   for all : top_axi_sbus_bridge use entity axi_sbus_bridge.top_axi_sbus_bridge;
   -- pragma synthesis_on


begin
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   lo32 <= (others => '0'); 
   lo <= '0';                            

   -- HDL Embedded Text Block 2 dpram_load_store
   --we can load the memory with contents of a text file
   --we can store the memory content to a text file
   process
   begin
      save2file <= '0';
      load2mem <= '0';
      wait for 1 us;
      load2mem <= '1';
      wait for 1 ms;
      save2file <= '1';
      wait;
   end process;                                    


   -- Instance port mappings.
   U_2 : dpram_fileio
      generic map (
         simulation_g    => true,
         hex_format_g    => true,
         save_filename_g => "dpram32_dump.txt",
         load_filename_g => "dpram32_source.txt",
         addr_base_a_g   => X"1000",
         addr_base_b_g   => X"0000",
         addr_range_g    => X"0100",
         addr_width_g    => 8,                  --width of address
         data_width_g    => 32                  --width of data
      )
      port map (
         clka      => clk,
         save2file => save2file,
         load2mem  => load2mem,
         sbus_i_a  => sbus_i,
         sbus_i_b  => sbus_i_null,
         sbus_o_a  => sbus_o,
         sbus_o_b  => open
      );
   U_4 : sbus_termination
      port map (
         sbus_o_null => open,
         sbus_i_null => sbus_i_null
      );
   U_1 : test_axi_mst
      generic map (
         C_S00_AXI_ADDR_WIDTH   => C_S00_AXI_ADDR_WIDTH,
         C_S00_AXI_ARUSER_WIDTH => C_S00_AXI_ARUSER_WIDTH,
         C_S00_AXI_AWUSER_WIDTH => C_S00_AXI_AWUSER_WIDTH,
         C_S00_AXI_BUSER_WIDTH  => C_S00_AXI_BUSER_WIDTH,
         C_S00_AXI_DATA_WIDTH   => C_S00_AXI_DATA_WIDTH,
         -- Users to add parameters here
         
         -- User parameters ends
         -- Do not modify the parameters beyond this line
         
         
         -- Parameters of Axi Slave Bus Interface S00_AXI
         C_S00_AXI_ID_WIDTH     => C_S00_AXI_ID_WIDTH,
         C_S00_AXI_RUSER_WIDTH  => C_S00_AXI_RUSER_WIDTH,
         C_S00_AXI_WUSER_WIDTH  => C_S00_AXI_WUSER_WIDTH,
         clk_period_g           => 10 ns,
         COMMANDS               => "buscommands.txt"
      )
      port map (
         s00_axi_arready  => s00_axi_arready,
         s00_axi_awready  => s00_axi_awready,
         s00_axi_bid      => s00_axi_bid,
         s00_axi_bresp    => s00_axi_bresp,
         s00_axi_buser    => s00_axi_buser,
         s00_axi_bvalid   => s00_axi_bvalid,
         s00_axi_rdata    => s00_axi_rdata,
         s00_axi_rid      => s00_axi_rid,
         s00_axi_rlast    => s00_axi_rlast,
         s00_axi_rresp    => s00_axi_rresp,
         s00_axi_ruser    => s00_axi_ruser,
         s00_axi_rvalid   => s00_axi_rvalid,
         s00_axi_wready   => s00_axi_wready,
         s00_axi_aclk     => s00_axi_aclk,
         s00_axi_araddr   => s00_axi_araddr,
         s00_axi_arburst  => s00_axi_arburst,
         s00_axi_arcache  => s00_axi_arcache,
         s00_axi_aresetn  => s00_axi_aresetn,
         s00_axi_arid     => s00_axi_arid,
         s00_axi_arlen    => s00_axi_arlen,
         s00_axi_arlock   => s00_axi_arlock,
         s00_axi_arprot   => s00_axi_arprot,
         s00_axi_arqos    => s00_axi_arqos,
         s00_axi_arregion => s00_axi_arregion,
         s00_axi_arsize   => s00_axi_arsize,
         s00_axi_aruser   => s00_axi_aruser,
         s00_axi_arvalid  => s00_axi_arvalid,
         s00_axi_awaddr   => s00_axi_awaddr,
         s00_axi_awburst  => s00_axi_awburst,
         s00_axi_awcache  => s00_axi_awcache,
         s00_axi_awid     => s00_axi_awid,
         s00_axi_awlen    => s00_axi_awlen,
         s00_axi_awlock   => s00_axi_awlock,
         s00_axi_awprot   => s00_axi_awprot,
         s00_axi_awqos    => s00_axi_awqos,
         s00_axi_awregion => s00_axi_awregion,
         s00_axi_awsize   => s00_axi_awsize,
         s00_axi_awuser   => s00_axi_awuser,
         s00_axi_awvalid  => s00_axi_awvalid,
         s00_axi_bready   => s00_axi_bready,
         s00_axi_rready   => s00_axi_rready,
         s00_axi_wdata    => s00_axi_wdata,
         s00_axi_wlast    => s00_axi_wlast,
         s00_axi_wstrb    => s00_axi_wstrb,
         s00_axi_wuser    => s00_axi_wuser,
         s00_axi_wvalid   => s00_axi_wvalid
      );
   U_3 : to_sbus
      port map (
         sbus_addr  => sbus_addr,
         sbus_o     => sbus_o,
         sbus_rd    => sbus_rd,
         sbus_wdata => sbus_wdata,
         sbus_we    => sbus_we,
         sbus_ack   => sbus_ack,
         sbus_i     => sbus_i,
         sbus_rdata => sbus_rdata
      );
   U_0 : top_axi_sbus_bridge
      generic map (
         C_S00_AXI_ADDR_WIDTH   => C_S00_AXI_ADDR_WIDTH,
         C_S00_AXI_ARUSER_WIDTH => C_S00_AXI_ARUSER_WIDTH,
         C_S00_AXI_AWUSER_WIDTH => C_S00_AXI_AWUSER_WIDTH,
         C_S00_AXI_BUSER_WIDTH  => C_S00_AXI_BUSER_WIDTH,
         C_S00_AXI_DATA_WIDTH   => 32,
         -- Users to add parameters here
         
         -- User parameters ends
         -- Do not modify the parameters beyond this line
         
         
         -- Parameters of Axi Slave Bus Interface S00_AXI
         C_S00_AXI_ID_WIDTH     => C_S00_AXI_ID_WIDTH,
         C_S00_AXI_RUSER_WIDTH  => C_S00_AXI_RUSER_WIDTH,
         C_S00_AXI_WUSER_WIDTH  => C_S00_AXI_WUSER_WIDTH,
         C_SLV_ADDR_WIDTH       => 16,
         C_SLV_DATA_WIDTH       => 32,
         C_CORE_CLOCK_FREQ      => 100000000,
         hw_serial_number_g     => 12,
         hw_version_g           => 123
      )
      port map (
         bus0_sbus_ack    => sbus_ack,
         bus0_sbus_rdata  => sbus_rdata,
         bus1_sbus_ack    => lo,
         bus1_sbus_rdata  => lo32,
         bus2_sbus_ack    => lo,
         bus2_sbus_rdata  => lo32,
         bus3_sbus_ack    => lo,
         bus3_sbus_rdata  => lo32,
         s00_axi_aclk     => s00_axi_aclk,
         s00_axi_araddr   => s00_axi_araddr,
         s00_axi_arburst  => s00_axi_arburst,
         s00_axi_arcache  => s00_axi_arcache,
         s00_axi_aresetn  => s00_axi_aresetn,
         s00_axi_arid     => s00_axi_arid,
         s00_axi_arlen    => s00_axi_arlen,
         s00_axi_arlock   => s00_axi_arlock,
         s00_axi_arprot   => s00_axi_arprot,
         s00_axi_arqos    => s00_axi_arqos,
         s00_axi_arregion => s00_axi_arregion,
         s00_axi_arsize   => s00_axi_arsize,
         s00_axi_aruser   => s00_axi_aruser,
         s00_axi_arvalid  => s00_axi_arvalid,
         s00_axi_awaddr   => s00_axi_awaddr,
         s00_axi_awburst  => s00_axi_awburst,
         s00_axi_awcache  => s00_axi_awcache,
         s00_axi_awid     => s00_axi_awid,
         s00_axi_awlen    => s00_axi_awlen,
         s00_axi_awlock   => s00_axi_awlock,
         s00_axi_awprot   => s00_axi_awprot,
         s00_axi_awqos    => s00_axi_awqos,
         s00_axi_awregion => s00_axi_awregion,
         s00_axi_awsize   => s00_axi_awsize,
         s00_axi_awuser   => s00_axi_awuser,
         s00_axi_awvalid  => s00_axi_awvalid,
         s00_axi_bready   => s00_axi_bready,
         s00_axi_rready   => s00_axi_rready,
         s00_axi_wdata    => s00_axi_wdata,
         s00_axi_wlast    => s00_axi_wlast,
         s00_axi_wstrb    => s00_axi_wstrb,
         s00_axi_wuser    => s00_axi_wuser,
         s00_axi_wvalid   => s00_axi_wvalid,
         bus0_sbus_addr   => sbus_addr,
         bus0_sbus_rd     => sbus_rd,
         bus0_sbus_wdata  => sbus_wdata,
         bus0_sbus_we     => sbus_we,
         bus1_sbus_addr   => open,
         bus1_sbus_rd     => open,
         bus1_sbus_wdata  => open,
         bus1_sbus_we     => open,
         bus2_sbus_addr   => open,
         bus2_sbus_rd     => open,
         bus2_sbus_wdata  => open,
         bus2_sbus_we     => open,
         bus3_sbus_addr   => open,
         bus3_sbus_rd     => open,
         bus3_sbus_wdata  => open,
         bus3_sbus_we     => open,
         clk_o            => clk,
         irq_o            => open,
         reset_o          => open,
         s00_axi_arready  => s00_axi_arready,
         s00_axi_awready  => s00_axi_awready,
         s00_axi_bid      => s00_axi_bid,
         s00_axi_bresp    => s00_axi_bresp,
         s00_axi_buser    => s00_axi_buser,
         s00_axi_bvalid   => s00_axi_bvalid,
         s00_axi_rdata    => s00_axi_rdata,
         s00_axi_rid      => s00_axi_rid,
         s00_axi_rlast    => s00_axi_rlast,
         s00_axi_rresp    => s00_axi_rresp,
         s00_axi_ruser    => s00_axi_ruser,
         s00_axi_rvalid   => s00_axi_rvalid,
         s00_axi_wready   => s00_axi_wready,
         sync_o           => open
      );

end struct;
