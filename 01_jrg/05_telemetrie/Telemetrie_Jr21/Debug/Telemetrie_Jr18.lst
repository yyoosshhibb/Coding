
Telemetrie_Jr18.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000514c  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         00000404  20000000  0c00514c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000002dc  20000404  0c005550  00010404  2**2
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00001150  00000000  00000000  00010408  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001e92b  00000000  00000000  00011558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ce3  00000000  00000000  0002fe83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009372  00000000  00000000  00033b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004500  00000000  00000000  0003ced8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000bf3e  00000000  00000000  000413d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000090b4  00000000  00000000  0004d316  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e88  00000000  00000000  000563ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000881  00000000  00000000  00057252  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 bd 4c 00 08 b1 02 00 08     .........L......
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 11 26 00 08     .............&..
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00514c 	.word	0x0c00514c
 800024c:	20000000 	.word	0x20000000
 8000250:	00000404 	.word	0x00000404
 8000254:	0c005550 	.word	0x0c005550
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00514c 	.word	0x0c00514c
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00514c 	.word	0x0c00514c
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000404 	.word	0x20000404
 800027c:	000002d8 	.word	0x000002d8
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08004d19 	.word	0x08004d19
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08004c29 	.word	0x08004c29

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f002 fc5b 	bl	8002b80 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f002 fcc3 	bl	8002c54 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f002 fca2 	bl	8002c40 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	460b      	mov	r3, r1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	089b      	lsrs	r3, r3, #2
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	4618      	mov	r0, r3
 80003be:	7afb      	ldrb	r3, [r7, #11]
 80003c0:	089b      	lsrs	r3, r3, #2
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3204      	adds	r2, #4
 80003ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ce:	7afb      	ldrb	r3, [r7, #11]
 80003d0:	f003 0303 	and.w	r3, r3, #3
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	4619      	mov	r1, r3
 80003d8:	23f8      	movs	r3, #248	; 0xf8
 80003da:	408b      	lsls	r3, r1
 80003dc:	43db      	mvns	r3, r3
 80003de:	ea02 0103 	and.w	r1, r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	1d02      	adds	r2, r0, #4
 80003e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003ee:	7afb      	ldrb	r3, [r7, #11]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	4619      	mov	r1, r3
 80003f4:	2303      	movs	r3, #3
 80003f6:	408b      	lsls	r3, r1
 80003f8:	43db      	mvns	r3, r3
 80003fa:	401a      	ands	r2, r3
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	4a3a      	ldr	r2, [pc, #232]	; (80004ec <XMC_GPIO_Init+0x144>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d003      	beq.n	8000410 <XMC_GPIO_Init+0x68>
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4a39      	ldr	r2, [pc, #228]	; (80004f0 <XMC_GPIO_Init+0x148>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d10a      	bne.n	8000426 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000414:	7afb      	ldrb	r3, [r7, #11]
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	661a      	str	r2, [r3, #96]	; 0x60
 8000424:	e042      	b.n	80004ac <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	b2db      	uxtb	r3, r3
 800042c:	b25b      	sxtb	r3, r3
 800042e:	2b00      	cmp	r3, #0
 8000430:	da3c      	bge.n	80004ac <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	685a      	ldr	r2, [r3, #4]
 8000436:	7afb      	ldrb	r3, [r7, #11]
 8000438:	409a      	lsls	r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	08db      	lsrs	r3, r3, #3
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4618      	mov	r0, r3
 8000446:	7afb      	ldrb	r3, [r7, #11]
 8000448:	08db      	lsrs	r3, r3, #3
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3210      	adds	r2, #16
 8000452:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000456:	7afb      	ldrb	r3, [r7, #11]
 8000458:	f003 0307 	and.w	r3, r3, #7
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	4619      	mov	r1, r3
 8000460:	2307      	movs	r3, #7
 8000462:	408b      	lsls	r3, r1
 8000464:	43db      	mvns	r3, r3
 8000466:	ea02 0103 	and.w	r1, r2, r3
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	f100 0210 	add.w	r2, r0, #16
 8000470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000474:	7afb      	ldrb	r3, [r7, #11]
 8000476:	08db      	lsrs	r3, r3, #3
 8000478:	b2db      	uxtb	r3, r3
 800047a:	4618      	mov	r0, r3
 800047c:	7afb      	ldrb	r3, [r7, #11]
 800047e:	08db      	lsrs	r3, r3, #3
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	3210      	adds	r2, #16
 8000488:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	7a1b      	ldrb	r3, [r3, #8]
 8000490:	4619      	mov	r1, r3
 8000492:	7afb      	ldrb	r3, [r7, #11]
 8000494:	f003 0307 	and.w	r3, r3, #7
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	fa01 f303 	lsl.w	r3, r1, r3
 800049e:	ea42 0103 	orr.w	r1, r2, r3
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	f100 0210 	add.w	r2, r0, #16
 80004a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004ac:	7afb      	ldrb	r3, [r7, #11]
 80004ae:	089b      	lsrs	r3, r3, #2
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	4618      	mov	r0, r3
 80004b4:	7afb      	ldrb	r3, [r7, #11]
 80004b6:	089b      	lsrs	r3, r3, #2
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	461a      	mov	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	3204      	adds	r2, #4
 80004c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	4619      	mov	r1, r3
 80004ca:	7afb      	ldrb	r3, [r7, #11]
 80004cc:	f003 0303 	and.w	r3, r3, #3
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	ea42 0103 	orr.w	r1, r2, r3
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	1d02      	adds	r2, r0, #4
 80004de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	48028e00 	.word	0x48028e00
 80004f0:	48028f00 	.word	0x48028f00

080004f4 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004fa:	681b      	ldr	r3, [r3, #0]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000ffc0 	.word	0x2000ffc0

0800050c <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <XMC_SCU_GetMirrorStatus+0x14>)
 8000512:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000516:	4618      	mov	r0, r3
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	50004000 	.word	0x50004000

08000524 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 800052c:	f7ff fed2 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <XMC_SCU_lDelay+0x3c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <XMC_SCU_lDelay+0x40>)
 8000536:	fba2 2303 	umull	r2, r3, r2, r3
 800053a:	0c9a      	lsrs	r2, r3, #18
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	fb02 f303 	mul.w	r3, r2, r3
 8000542:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	e003      	b.n	8000552 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800054a:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	3301      	adds	r3, #1
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	429a      	cmp	r2, r3
 8000558:	d3f7      	bcc.n	800054a <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000ffc0 	.word	0x2000ffc0
 8000564:	431bde83 	.word	0x431bde83

08000568 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af02      	add	r7, sp, #8
 800056e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000570:	2000      	movs	r0, #0
 8000572:	f000 f89b 	bl	80006ac <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000576:	f000 fa2d 	bl	80009d4 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	79db      	ldrb	r3, [r3, #7]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d00a      	beq.n	8000598 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000582:	f000 fa65 	bl	8000a50 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000586:	bf00      	nop
 8000588:	f000 fa50 	bl	8000a2c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 800058c:	4603      	mov	r3, r0
 800058e:	f083 0301 	eor.w	r3, r3, #1
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1f7      	bne.n	8000588 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	7a5b      	ldrb	r3, [r3, #9]
 800059c:	4618      	mov	r0, r3
 800059e:	f000 f8ff 	bl	80007a0 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005a2:	bf00      	nop
 80005a4:	f7ff ffb2 	bl	800050c <XMC_SCU_GetMirrorStatus>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1fa      	bne.n	80005a4 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7a1b      	ldrb	r3, [r3, #8]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 f9e8 	bl	8000988 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	7c1b      	ldrb	r3, [r3, #16]
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 f90d 	bl	80007dc <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	7c5b      	ldrb	r3, [r3, #17]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f930 	bl	800082c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	7c9b      	ldrb	r3, [r3, #18]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f917 	bl	8000804 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	7cdb      	ldrb	r3, [r3, #19]
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f93a 	bl	8000854 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	799b      	ldrb	r3, [r3, #6]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d00a      	beq.n	80005fe <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005e8:	f000 fa66 	bl	8000ab8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005ec:	bf00      	nop
 80005ee:	f000 fa8b 	bl	8000b08 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005f2:	4603      	mov	r3, r0
 80005f4:	f083 0301 	eor.w	r3, r3, #1
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f7      	bne.n	80005ee <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	78db      	ldrb	r3, [r3, #3]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d102      	bne.n	800060c <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8000606:	f000 faa3 	bl	8000b50 <XMC_SCU_CLOCK_DisableSystemPll>
 800060a:	e014      	b.n	8000636 <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800060c:	f000 fa90 	bl	8000b30 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	8899      	ldrh	r1, [r3, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800061c:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000622:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	4608      	mov	r0, r1
 800062c:	4611      	mov	r1, r2
 800062e:	462a      	mov	r2, r5
 8000630:	4623      	mov	r3, r4
 8000632:	f000 fa9d 	bl	8000b70 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	68db      	ldr	r3, [r3, #12]
 800063a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800063e:	d103      	bne.n	8000648 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000640:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000644:	f000 f832 	bl	80006ac <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000648:	f7ff fe44 	bl	80002d4 <SystemCoreClockUpdate>
}
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bdb0      	pop	{r4, r5, r7, pc}
 8000652:	bf00      	nop

08000654 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	0f1b      	lsrs	r3, r3, #28
 8000660:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000668:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	4613      	mov	r3, r2
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	4413      	add	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	461a      	mov	r2, r3
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000678:	4413      	add	r3, r2
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	601a      	str	r2, [r3, #0]
}
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	50004414 	.word	0x50004414

0800068c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000690:	f7ff ff30 	bl	80004f4 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000694:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8000696:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000698:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	50004600 	.word	0x50004600

080006ac <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006b4:	4906      	ldr	r1, [pc, #24]	; (80006d0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006b8:	68db      	ldr	r3, [r3, #12]
 80006ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	50004600 	.word	0x50004600

080006d4 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006dc:	4906      	ldr	r1, [pc, #24]	; (80006f8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	50004600 	.word	0x50004600

080006fc <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000704:	4906      	ldr	r1, [pc, #24]	; (8000720 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4313      	orrs	r3, r2
 8000712:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	50004600 	.word	0x50004600

08000724 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d108      	bne.n	8000746 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000734:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800073e:	f023 0301 	bic.w	r3, r3, #1
 8000742:	60d3      	str	r3, [r2, #12]
 8000744:	e007      	b.n	8000756 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000746:	4a06      	ldr	r2, [pc, #24]	; (8000760 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	60d3      	str	r3, [r2, #12]
  }
}
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	50004710 	.word	0x50004710

08000764 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800076e:	bf00      	nop
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000772:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000776:	f003 0308 	and.w	r3, r3, #8
 800077a:	2b00      	cmp	r3, #0
 800077c:	d1f8      	bne.n	8000770 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800077e:	4907      	ldr	r1, [pc, #28]	; (800079c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000788:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800078a:	4313      	orrs	r3, r2
 800078c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	50004000 	.word	0x50004000
 800079c:	50004300 	.word	0x50004300

080007a0 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007aa:	bf00      	nop
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1f8      	bne.n	80007ac <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007ba:	4907      	ldr	r1, [pc, #28]	; (80007d8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007c4:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007c6:	4313      	orrs	r3, r2
 80007c8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	50004000 	.word	0x50004000
 80007d8:	50004300 	.word	0x50004300

080007dc <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007e4:	4906      	ldr	r1, [pc, #24]	; (8000800 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007e8:	68db      	ldr	r3, [r3, #12]
 80007ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007f2:	4313      	orrs	r3, r2
 80007f4:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	50004600 	.word	0x50004600

08000804 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800080c:	4906      	ldr	r1, [pc, #24]	; (8000828 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000810:	6a1b      	ldr	r3, [r3, #32]
 8000812:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800081a:	4313      	orrs	r3, r2
 800081c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	50004600 	.word	0x50004600

0800082c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000834:	4906      	ldr	r1, [pc, #24]	; (8000850 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000838:	691b      	ldr	r3, [r3, #16]
 800083a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000842:	4313      	orrs	r3, r2
 8000844:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	50004600 	.word	0x50004600

08000854 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800085c:	4906      	ldr	r1, [pc, #24]	; (8000878 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800086a:	4313      	orrs	r3, r2
 800086c:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	50004600 	.word	0x50004600

0800087c <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000884:	4906      	ldr	r1, [pc, #24]	; (80008a0 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000892:	4313      	orrs	r3, r2
 8000894:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	50004600 	.word	0x50004600

080008a4 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008ac:	4906      	ldr	r1, [pc, #24]	; (80008c8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008ba:	4313      	orrs	r3, r2
 80008bc:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	50004600 	.word	0x50004600

080008cc <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008d4:	4906      	ldr	r1, [pc, #24]	; (80008f0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008e2:	4313      	orrs	r3, r2
 80008e4:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	50004600 	.word	0x50004600

080008f4 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80008fe:	4a04      	ldr	r2, [pc, #16]	; (8000910 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	6053      	str	r3, [r2, #4]
}
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	50004600 	.word	0x50004600

08000914 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800091e:	4a19      	ldr	r2, [pc, #100]	; (8000984 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 800092a:	4a16      	ldr	r2, [pc, #88]	; (8000984 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	f043 0310 	orr.w	r3, r3, #16
 8000934:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000936:	4913      	ldr	r1, [pc, #76]	; (8000984 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	3b01      	subs	r3, #1
 800093c:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3b01      	subs	r3, #1
 8000942:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000944:	4313      	orrs	r3, r2
 8000946:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000948:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000952:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000954:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f023 0310 	bic.w	r3, r3, #16
 800095e:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000960:	4a08      	ldr	r2, [pc, #32]	; (8000984 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800096a:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 800096c:	bf00      	nop
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000970:	691b      	ldr	r3, [r3, #16]
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	2b00      	cmp	r3, #0
 8000978:	d0f9      	beq.n	800096e <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	50004710 	.word	0x50004710

08000988 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800099c:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d10e      	bne.n	80009c2 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80009a4:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80009ae:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80009b0:	2064      	movs	r0, #100	; 0x64
 80009b2:	f7ff fdb7 	bl	8000524 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80009b6:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009c0:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80009c2:	2064      	movs	r0, #100	; 0x64
 80009c4:	f7ff fdae 	bl	8000524 <XMC_SCU_lDelay>
}
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	50004710 	.word	0x50004710

080009d4 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d109      	bne.n	80009f8 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009ea:	bf00      	nop
 80009ec:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f9      	beq.n	80009ec <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d00a      	beq.n	8000a1a <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a0a:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a0c:	bf00      	nop
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d1f9      	bne.n	8000a0e <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	50004200 	.word	0x50004200
 8000a28:	50004400 	.word	0x50004400

08000a2c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f003 0308 	and.w	r3, r3, #8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	bf0c      	ite	eq
 8000a3c:	2301      	moveq	r3, #1
 8000a3e:	2300      	movne	r3, #0
 8000a40:	b2db      	uxtb	r3, r3
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	50004300 	.word	0x50004300

08000a50 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000a54:	bf00      	nop
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a58:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1f8      	bne.n	8000a56 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a64:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a6e:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000a70:	bf00      	nop
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a74:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d1f8      	bne.n	8000a72 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000a80:	4a0c      	ldr	r2, [pc, #48]	; (8000ab4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	f043 0308 	orr.w	r3, r3, #8
 8000a8a:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8000a8c:	bf00      	nop
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a90:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1f8      	bne.n	8000a8e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8000aa2:	bf00      	nop
 8000aa4:	f7ff fd32 	bl	800050c <XMC_SCU_GetMirrorStatus>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1fa      	bne.n	8000aa4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	50004000 	.word	0x50004000
 8000ab4:	50004300 	.word	0x50004300

08000ab8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000abc:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ac6:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000ac8:	4d0d      	ldr	r5, [pc, #52]	; (8000b00 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000ad2:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000ad6:	f002 f8b3 	bl	8002c40 <OSCHP_GetFrequency>
 8000ada:	4602      	mov	r2, r0
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000ade:	fba3 2302 	umull	r2, r3, r3, r2
 8000ae2:	0d1b      	lsrs	r3, r3, #20
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000ae8:	4323      	orrs	r3, r4
 8000aea:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000aec:	4a03      	ldr	r2, [pc, #12]	; (8000afc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000af6:	6053      	str	r3, [r2, #4]
}
 8000af8:	bdb0      	pop	{r4, r5, r7, pc}
 8000afa:	bf00      	nop
 8000afc:	50004710 	.word	0x50004710
 8000b00:	50004700 	.word	0x50004700
 8000b04:	6b5fca6b 	.word	0x6b5fca6b

08000b08 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b14:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	50004710 	.word	0x50004710

08000b30 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b34:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b3e:	f023 0302 	bic.w	r3, r3, #2
 8000b42:	6053      	str	r3, [r2, #4]
}
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	50004710 	.word	0x50004710

08000b50 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b54:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	6053      	str	r3, [r2, #4]
}
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	50004710 	.word	0x50004710

08000b70 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60ba      	str	r2, [r7, #8]
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	81fb      	strh	r3, [r7, #14]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000b82:	89fb      	ldrh	r3, [r7, #14]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fdcd 	bl	8000724 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000b8a:	7b7b      	ldrb	r3, [r7, #13]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	f040 8084 	bne.w	8000c9a <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000b92:	89fb      	ldrh	r3, [r7, #14]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d109      	bne.n	8000bac <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000b98:	f002 f852 	bl	8002c40 <OSCHP_GetFrequency>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	4b4b      	ldr	r3, [pc, #300]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000ba0:	fba3 2302 	umull	r2, r3, r3, r2
 8000ba4:	0c9b      	lsrs	r3, r3, #18
 8000ba6:	059b      	lsls	r3, r3, #22
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	e002      	b.n	8000bb2 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000bac:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000bb0:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	fb02 f203 	mul.w	r2, r2, r3
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc0:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	4a42      	ldr	r2, [pc, #264]	; (8000cd0 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bca:	091b      	lsrs	r3, r3, #4
 8000bcc:	0d9b      	lsrs	r3, r3, #22
 8000bce:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000bd0:	4a40      	ldr	r2, [pc, #256]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bd2:	4b40      	ldr	r3, [pc, #256]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bdc:	4a3d      	ldr	r2, [pc, #244]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bde:	4b3d      	ldr	r3, [pc, #244]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000be8:	493a      	ldr	r1, [pc, #232]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bea:	4b3a      	ldr	r3, [pc, #232]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000bf0:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	0212      	lsls	r2, r2, #8
 8000bf8:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c00:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c0c:	4a31      	ldr	r2, [pc, #196]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c16:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c18:	4a2e      	ldr	r2, [pc, #184]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f023 0310 	bic.w	r3, r3, #16
 8000c22:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c24:	4a2b      	ldr	r2, [pc, #172]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c26:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c2e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c30:	bf00      	nop
 8000c32:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d0f9      	beq.n	8000c32 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c3e:	4a25      	ldr	r2, [pc, #148]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f023 0301 	bic.w	r3, r3, #1
 8000c48:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c4a:	bf00      	nop
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f9      	bne.n	8000c4c <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	4a20      	ldr	r2, [pc, #128]	; (8000cdc <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c60:	095b      	lsrs	r3, r3, #5
 8000c62:	0d9b      	lsrs	r3, r3, #22
 8000c64:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c66:	6a3a      	ldr	r2, [r7, #32]
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d202      	bcs.n	8000c74 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c6e:	6938      	ldr	r0, [r7, #16]
 8000c70:	f000 f838 	bl	8000ce4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	085b      	lsrs	r3, r3, #1
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7e:	095b      	lsrs	r3, r3, #5
 8000c80:	0d9b      	lsrs	r3, r3, #22
 8000c82:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c84:	6a3a      	ldr	r2, [r7, #32]
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d202      	bcs.n	8000c92 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c8c:	6938      	ldr	r0, [r7, #16]
 8000c8e:	f000 f829 	bl	8000ce4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000c92:	6a38      	ldr	r0, [r7, #32]
 8000c94:	f000 f826 	bl	8000ce4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000c98:	e015      	b.n	8000cc6 <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000c9a:	490e      	ldr	r1, [pc, #56]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
 8000ca6:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cac:	4a09      	ldr	r2, [pc, #36]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000cb8:	bf00      	nop
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0f9      	beq.n	8000cba <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	431bde83 	.word	0x431bde83
 8000cd0:	aaaaaaab 	.word	0xaaaaaaab
 8000cd4:	50004710 	.word	0x50004710
 8000cd8:	f08080ff 	.word	0xf08080ff
 8000cdc:	88888889 	.word	0x88888889
 8000ce0:	b60b60b7 	.word	0xb60b60b7

08000ce4 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000d00:	2032      	movs	r0, #50	; 0x32
 8000d02:	f7ff fc0f 	bl	8000524 <XMC_SCU_lDelay>
}
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	50004710 	.word	0x50004710

08000d10 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8000d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	bf0c      	ite	eq
 8000d26:	2301      	moveq	r3, #1
 8000d28:	2300      	movne	r3, #0
 8000d2a:	b2db      	uxtb	r3, r3
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	4608      	mov	r0, r1
 8000d42:	4611      	mov	r1, r2
 8000d44:	461a      	mov	r2, r3
 8000d46:	4603      	mov	r3, r0
 8000d48:	70fb      	strb	r3, [r7, #3]
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	70bb      	strb	r3, [r7, #2]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000d52:	78fa      	ldrb	r2, [r7, #3]
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000d54:	78bb      	ldrb	r3, [r7, #2]
 8000d56:	041b      	lsls	r3, r3, #16
 8000d58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000d5c:	431a      	orrs	r2, r3
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8000d5e:	787b      	ldrb	r3, [r7, #1]
 8000d60:	061b      	lsls	r3, r3, #24
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000d62:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	601a      	str	r2, [r3, #0]
}
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	601a      	str	r2, [r3, #0]
}
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	bf38      	it	cc
 8000dc6:	4613      	movcc	r3, r2
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4293      	cmp	r3, r2
 8000de4:	bf28      	it	cs
 8000de6:	4613      	movcs	r3, r2
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <XMC_CAN_NODE_NominalBitTimeConfigure>:
}

/* Baudrate Configuration */
void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b090      	sub	sp, #64	; 0x40
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t temp_brp = 12U ;
 8000dfe:	230c      	movs	r3, #12
 8000e00:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t temp_tseg1 = 12U;
 8000e02:	230c      	movs	r3, #12
 8000e04:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t best_brp = 0U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t best_tseg1 = 1U;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t best_tseg2 = 0U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  uint32_t best_tbaud = 0U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t best_error = 10000U;
 8000e16:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e20:	e067      	b.n	8000ef2 <XMC_CAN_NODE_NominalBitTimeConfigure+0xfe>
  {

    uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	461a      	mov	r2, r3
 8000e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	613b      	str	r3, [r7, #16]
    uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t temp_baudrate;
    uint32_t error;

  if((temp_tbaud % 10U) > 5U)
 8000e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e46:	4b5b      	ldr	r3, [pc, #364]	; (8000fb4 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000e48:	fba3 2301 	umull	r2, r3, r3, r1
 8000e4c:	08da      	lsrs	r2, r3, #3
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	1aca      	subs	r2, r1, r3
 8000e58:	2a05      	cmp	r2, #5
 8000e5a:	d909      	bls.n	8000e70 <XMC_CAN_NODE_NominalBitTimeConfigure+0x7c>
  {
  temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	4a55      	ldr	r2, [pc, #340]	; (8000fb4 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000e60:	fba2 2303 	umull	r2, r3, r2, r3
 8000e64:	08db      	lsrs	r3, r3, #3
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  temp_tbaud++;
 8000e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e6e:	e005      	b.n	8000e7c <XMC_CAN_NODE_NominalBitTimeConfigure+0x88>
  }
  else
  {
  temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	4a50      	ldr	r2, [pc, #320]	; (8000fb4 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000e74:	fba2 2303 	umull	r2, r3, r2, r3
 8000e78:	08db      	lsrs	r3, r3, #3
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(temp_tbaud > 0U)
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00a      	beq.n	8000e98 <XMC_CAN_NODE_NominalBitTimeConfigure+0xa4>
  {
    temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 8000e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e84:	4613      	mov	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e94:	623b      	str	r3, [r7, #32]
 8000e96:	e007      	b.n	8000ea8 <XMC_CAN_NODE_NominalBitTimeConfigure+0xb4>
  }
  else
  {
    temp_baudrate = f_quanta / 10U;
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4a46      	ldr	r2, [pc, #280]	; (8000fb4 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	623b      	str	r3, [r7, #32]
  temp_tbaud = 1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(temp_baudrate >= can_bit_time->baudrate)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	6a3b      	ldr	r3, [r7, #32]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d805      	bhi.n	8000ebe <XMC_CAN_NODE_NominalBitTimeConfigure+0xca>
  {
  error = temp_baudrate - can_bit_time->baudrate;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	6a3a      	ldr	r2, [r7, #32]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	61fb      	str	r3, [r7, #28]
 8000ebc:	e004      	b.n	8000ec8 <XMC_CAN_NODE_NominalBitTimeConfigure+0xd4>
  }
  else
  {
  error = can_bit_time->baudrate - temp_baudrate;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	6a3b      	ldr	r3, [r7, #32]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	61fb      	str	r3, [r7, #28]
  }

  if ((temp_tbaud <= 20U) && (best_error > error))
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	2b14      	cmp	r3, #20
 8000ecc:	d80e      	bhi.n	8000eec <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
 8000ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d90a      	bls.n	8000eec <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
  {
    best_brp = temp_brp;
 8000ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
    best_tbaud = temp_tbaud;
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    best_error = (error);
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28

    if (error < 1000U)
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ee8:	d200      	bcs.n	8000eec <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
    {
      break;
 8000eea:	e005      	b.n	8000ef8 <XMC_CAN_NODE_NominalBitTimeConfigure+0x104>
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 8000eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eee:	3301      	adds	r3, #1
 8000ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ef4:	2b40      	cmp	r3, #64	; 0x40
 8000ef6:	d994      	bls.n	8000e22 <XMC_CAN_NODE_NominalBitTimeConfigure+0x2e>
      break;
    }
   }
  }
  /* search for best sample point */
  best_error = 10000U;
 8000ef8:	f242 7310 	movw	r3, #10000	; 0x2710
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 8000efe:	2340      	movs	r3, #64	; 0x40
 8000f00:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f02:	e02e      	b.n	8000f62 <XMC_CAN_NODE_NominalBitTimeConfigure+0x16e>
  {
    uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 8000f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f06:	3301      	adds	r3, #1
 8000f08:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f0c:	fb02 f203 	mul.w	r2, r2, r3
 8000f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f16:	60fb      	str	r3, [r7, #12]
  uint32_t error;
  if (tempSamplePoint >= can_bit_time->sample_point)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	891b      	ldrh	r3, [r3, #8]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d806      	bhi.n	8000f32 <XMC_CAN_NODE_NominalBitTimeConfigure+0x13e>
  {
      error = tempSamplePoint  - can_bit_time->sample_point;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	891b      	ldrh	r3, [r3, #8]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	1a9b      	subs	r3, r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
 8000f30:	e005      	b.n	8000f3e <XMC_CAN_NODE_NominalBitTimeConfigure+0x14a>
  }
  else
  {
    error = can_bit_time->sample_point  - tempSamplePoint;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	891b      	ldrh	r3, [r3, #8]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	61bb      	str	r3, [r7, #24]
  }
    if (best_error > error)
 8000f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d903      	bls.n	8000f4e <XMC_CAN_NODE_NominalBitTimeConfigure+0x15a>
    {
      best_tseg1 = temp_tseg1;
 8000f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
      best_error = error;
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (tempSamplePoint < (can_bit_time->sample_point))
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	891b      	ldrh	r3, [r3, #8]
 8000f52:	461a      	mov	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d900      	bls.n	8000f5c <XMC_CAN_NODE_NominalBitTimeConfigure+0x168>
    {
      break;
 8000f5a:	e005      	b.n	8000f68 <XMC_CAN_NODE_NominalBitTimeConfigure+0x174>
   }
  }
  /* search for best sample point */
  best_error = 10000U;

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 8000f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d8cd      	bhi.n	8000f04 <XMC_CAN_NODE_NominalBitTimeConfigure+0x110>
    {
      break;
    }
  }

  best_tseg2 = best_tbaud - best_tseg1 - 1U;
 8000f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff fefe 	bl	8000d74 <XMC_CAN_NODE_EnableConfigurationChange>
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	031b      	lsls	r3, r3, #12
 8000f7e:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	895b      	ldrh	r3, [r3, #10]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	019b      	lsls	r3, r3, #6
 8000f8a:	b2db      	uxtb	r3, r3

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000f8c:	431a      	orrs	r2, r3
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
 8000f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f90:	3b01      	subs	r3, #1
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
 8000f98:	431a      	orrs	r2, r3
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
 8000f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fa2:	431a      	orrs	r2, r3

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	611a      	str	r2, [r3, #16]
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff fef3 	bl	8000d94 <XMC_CAN_NODE_DisableConfigurationChange>
}
 8000fae:	3740      	adds	r7, #64	; 0x40
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	cccccccd 	.word	0xcccccccd

08000fb8 <XMC_CAN_AllocateMOtoNodeList>:
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 8000fc8:	bf00      	nop
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fea0 	bl	8000d10 <XMC_CAN_IsPanelControlReady>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f083 0301 	eor.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f6      	bne.n	8000fca <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	78ba      	ldrb	r2, [r7, #2]
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	f7ff fea6 	bl	8000d38 <XMC_CAN_PanelControl>
}
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop

08000ff4 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8000ffc:	4809      	ldr	r0, [pc, #36]	; (8001024 <XMC_CAN_Enable+0x30>)
 8000ffe:	f7ff fb29 	bl	8000654 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 0201 	bic.w	r2, r3, #1
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 800100e:	bf00      	nop
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f9      	bne.n	8001010 <XMC_CAN_Enable+0x1c>
  {
    /*Do nothing*/
  };
}
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	10000010 	.word	0x10000010

08001028 <XMC_CAN_Init>:
}

#else
/* Initialization of XMC_CAN GLOBAL Object */
void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	; 0x30
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t step;
  uint32_t can_frequency_khz;
  uint32_t peripheral_frequency_khz;
  XMC_CAN_DM_t can_divider_mode;

  uint32_t peripheral_frequency = (XMC_SCU_CLOCK_GetPeripheralClockFrequency());
 8001032:	f7ff fb2b 	bl	800068c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001036:	62f8      	str	r0, [r7, #44]	; 0x2c

  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ffdb 	bl	8000ff4 <XMC_CAN_Enable>

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 800103e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800104a:	2000      	movs	r0, #0
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff feb1 	bl	8000db4 <max>
 8001052:	4603      	mov	r3, r0
 8001054:	4618      	mov	r0, r3
 8001056:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800105a:	f7ff febb 	bl	8000dd4 <min>
 800105e:	62b8      	str	r0, [r7, #40]	; 0x28
  freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 8001060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001062:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001068:	fbb2 f3f3 	udiv	r3, r2, r3
 800106c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Fractional divider mode */
  can_frequency_khz = (uint32_t) (can_frequency >> 6);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	099b      	lsrs	r3, r3, #6
 8001072:	623b      	str	r3, [r7, #32]
  peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 8001074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001076:	099b      	lsrs	r3, r3, #6
 8001078:	61fb      	str	r3, [r7, #28]

  step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	029a      	lsls	r2, r3, #10
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fbb2 f3f3 	udiv	r3, r2, r3
 8001084:	4618      	mov	r0, r3
 8001086:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800108a:	f7ff fea3 	bl	8000dd4 <min>
 800108e:	61b8      	str	r0, [r7, #24]
  freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	fb02 f303 	mul.w	r3, r2, r3
 8001098:	0a9b      	lsrs	r3, r3, #10
 800109a:	617b      	str	r3, [r7, #20]
  freq_f = freq_f << 6;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	019b      	lsls	r3, r3, #6
 80010a0:	617b      	str	r3, [r7, #20]

  normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	1ad2      	subs	r2, r2, r3
 80010a8:	6839      	ldr	r1, [r7, #0]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	1acb      	subs	r3, r1, r3
 80010ae:	429a      	cmp	r2, r3
 80010b0:	bf94      	ite	ls
 80010b2:	2301      	movls	r3, #1
 80010b4:	2300      	movhi	r3, #0
 80010b6:	74fb      	strb	r3, [r7, #19]

  step   = (normal_divider != 0U) ? step_n : step_f;
 80010b8:	7cfb      	ldrb	r3, [r7, #19]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <XMC_CAN_Init+0x9a>
 80010be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c0:	e000      	b.n	80010c4 <XMC_CAN_Init+0x9c>
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	60fb      	str	r3, [r7, #12]
  can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 80010c6:	7cfb      	ldrb	r3, [r7, #19]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <XMC_CAN_Init+0xa8>
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <XMC_CAN_Init+0xaa>
 80010d0:	2302      	movs	r3, #2
 80010d2:	72fb      	strb	r3, [r7, #11]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80010dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	7afb      	ldrb	r3, [r7, #11]
 80010ea:	0399      	lsls	r1, r3, #14
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	430b      	orrs	r3, r1
 80010f0:	431a      	orrs	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	60da      	str	r2, [r3, #12]
}
 80010f6:	3730      	adds	r7, #48	; 0x30
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t reg;
  
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 800110c:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8001110:	095b      	lsrs	r3, r3, #5
 8001112:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	035a      	lsls	r2, r3, #13
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f003 031f 	and.w	r3, r3, #31
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	6892      	ldr	r2, [r2, #8]
 8001130:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001134:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	6891      	ldr	r1, [r2, #8]
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	430a      	orrs	r2, r1
 8001144:	609a      	str	r2, [r3, #8]
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	79db      	ldrb	r3, [r3, #7]
 800114a:	f003 0320 	and.w	r3, r3, #32
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d007      	beq.n	8001164 <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	79db      	ldrb	r3, [r3, #7]
 8001158:	f003 0320 	and.w	r3, r3, #32
 800115c:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 800115e:	2b00      	cmp	r3, #0
 8001160:	d100      	bne.n	8001164 <XMC_CAN_MO_Config+0x68>
 8001162:	e060      	b.n	8001226 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8001168:	2b00      	cmp	r3, #0
 800116a:	d004      	beq.n	8001176 <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8001170:	2b01      	cmp	r3, #1
 8001172:	d000      	beq.n	8001176 <XMC_CAN_MO_Config+0x7a>
 8001174:	e057      	b.n	8001226 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2220      	movs	r2, #32
 800117c:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	79db      	ldrb	r3, [r3, #7]
 8001182:	f003 0320 	and.w	r3, r3, #32
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d128      	bne.n	80011de <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001198:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80011a2:	049b      	lsls	r3, r3, #18
 80011a4:	461a      	mov	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80011c0:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80011ca:	049b      	lsls	r3, r3, #18
 80011cc:	461a      	mov	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	e009      	b.n	80011f2 <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6852      	ldr	r2, [r2, #4]
 80011e6:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	6892      	ldr	r2, [r2, #8]
 80011f0:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7e1b      	ldrb	r3, [r3, #24]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d10c      	bne.n	8001214 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f81a 	bl	8001234 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001208:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a07      	ldr	r2, [pc, #28]	; (800122c <XMC_CAN_MO_Config+0x130>)
 8001210:	61da      	str	r2, [r3, #28]
 8001212:	e008      	b.n	8001226 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800121c:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a03      	ldr	r2, [pc, #12]	; (8001230 <XMC_CAN_MO_Config+0x134>)
 8001224:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	062000c0 	.word	0x062000c0
 8001230:	00a00640 	.word	0x00a00640

08001234 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800123c:	2303      	movs	r3, #3
 800123e:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7e1b      	ldrb	r3, [r3, #24]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d122      	bne.n	800128e <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2220      	movs	r2, #32
 800124e:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	7b12      	ldrb	r2, [r2, #12]
 8001262:	0612      	lsls	r2, r2, #24
 8001264:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6912      	ldr	r2, [r2, #16]
 8001274:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	6952      	ldr	r2, [r2, #20]
 800127e:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOCTR_RESRTSEL_Msk);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <XMC_CAN_MO_UpdateData+0x6c>)
 8001286:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e001      	b.n	8001292 <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800128e:	2303      	movs	r3, #3
 8001290:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	00280040 	.word	0x00280040

080012a4 <XMC_CAN_MO_ReceiveData>:
  return error;
}

/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012c2:	0adb      	lsrs	r3, r3, #11
 80012c4:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <XMC_CAN_MO_ReceiveData+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80012da:	2303      	movs	r3, #3
 80012dc:	75fb      	strb	r3, [r7, #23]
 80012de:	e025      	b.n	800132c <XMC_CAN_MO_ReceiveData+0x88>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d102      	bne.n	80012ec <XMC_CAN_MO_ReceiveData+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 80012e6:	2302      	movs	r3, #2
 80012e8:	75fb      	strb	r3, [r7, #23]
 80012ea:	e01f      	b.n	800132c <XMC_CAN_MO_ReceiveData+0x88>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	691a      	ldr	r2, [r3, #16]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	695a      	ldr	r2, [r3, #20]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	08db      	lsrs	r3, r3, #3
 800131a:	757b      	strb	r3, [r7, #21]
    } while ((rx_pnd != 0U) && (new_data != 0U));
 800131c:	7dbb      	ldrb	r3, [r7, #22]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <XMC_CAN_MO_ReceiveData+0x84>
 8001322:	7d7b      	ldrb	r3, [r7, #21]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1e1      	bne.n	80012ec <XMC_CAN_MO_ReceiveData+0x48>

    error = XMC_CAN_STATUS_SUCCESS;
 8001328:	2300      	movs	r3, #0
 800132a:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 800132c:	7dfb      	ldrb	r3, [r7, #23]
}
 800132e:	4618      	mov	r0, r3
 8001330:	371c      	adds	r7, #28
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop

0800133c <XMC_CAN_MO_Receive>:


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800135a:	0adb      	lsrs	r3, r3, #11
 800135c:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8001372:	2303      	movs	r3, #3
 8001374:	75fb      	strb	r3, [r7, #23]
 8001376:	e0a7      	b.n	80014c8 <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d102      	bne.n	8001384 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 800137e:	2302      	movs	r3, #2
 8001380:	75fb      	strb	r3, [r7, #23]
 8001382:	e0a1      	b.n	80014c8 <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2208      	movs	r2, #8
 800138a:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001396:	0f5b      	lsrs	r3, r3, #29
 8001398:	2b00      	cmp	r3, #0
 800139a:	d140      	bne.n	800141e <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	79d3      	ldrb	r3, [r2, #7]
 80013a0:	f36f 1345 	bfc	r3, #5, #1
 80013a4:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	699a      	ldr	r2, [r3, #24]
 80013ac:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <XMC_CAN_MO_Receive+0x19c>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	0c9b      	lsrs	r3, r3, #18
 80013b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6853      	ldr	r3, [r2, #4]
 80013ba:	f361 031c 	bfi	r3, r1, #0, #29
 80013be:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013ca:	0f5b      	lsrs	r3, r3, #29
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	b2d9      	uxtb	r1, r3
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	7ad3      	ldrb	r3, [r2, #11]
 80013d8:	f361 1345 	bfi	r3, r1, #5, #1
 80013dc:	72d3      	strb	r3, [r2, #11]
        if(can_mo->can_ide_mask == 1U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7adb      	ldrb	r3, [r3, #11]
 80013e2:	f003 0320 	and.w	r3, r3, #32
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00d      	beq.n	8001408 <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <XMC_CAN_MO_Receive+0x19c>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	0c9b      	lsrs	r3, r3, #18
 80013f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6893      	ldr	r3, [r2, #8]
 8001400:	f361 031c 	bfi	r3, r1, #0, #29
 8001404:	6093      	str	r3, [r2, #8]
 8001406:	e032      	b.n	800146e <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6893      	ldr	r3, [r2, #8]
 8001416:	f361 031c 	bfi	r3, r1, #0, #29
 800141a:	6093      	str	r3, [r2, #8]
 800141c:	e027      	b.n	800146e <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	79d3      	ldrb	r3, [r2, #7]
 8001422:	f043 0320 	orr.w	r3, r3, #32
 8001426:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6853      	ldr	r3, [r2, #4]
 8001436:	f361 031c 	bfi	r3, r1, #0, #29
 800143a:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6893      	ldr	r3, [r2, #8]
 800144a:	f361 031c 	bfi	r3, r1, #0, #29
 800144e:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800145a:	0f5b      	lsrs	r3, r3, #29
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	b2d9      	uxtb	r1, r3
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	7ad3      	ldrb	r3, [r2, #11]
 8001468:	f361 1345 	bfi	r3, r1, #5, #1
 800146c:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001478:	0e1b      	lsrs	r3, r3, #24
 800147a:	b2da      	uxtb	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	691a      	ldr	r2, [r3, #16]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	695a      	ldr	r2, [r3, #20]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	08db      	lsrs	r3, r3, #3
 80014ae:	757b      	strb	r3, [r7, #21]
    } while ((rx_pnd != 0U) && (new_data != 0U));
 80014b0:	7dbb      	ldrb	r3, [r7, #22]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <XMC_CAN_MO_Receive+0x182>
 80014b6:	7d7b      	ldrb	r3, [r7, #21]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f47f af63 	bne.w	8001384 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 80014c4:	2300      	movs	r3, #0
 80014c6:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	371c      	adds	r7, #28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	1ffc0000 	.word	0x1ffc0000

080014dc <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  if(event != XMC_CAN_NODE_EVENT_CFCIE)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014ec:	d006      	beq.n	80014fc <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e005      	b.n	8001508 <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699a      	ldr	r2, [r3, #24]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	619a      	str	r2, [r3, #24]
  }
}
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop

08001514 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	60da      	str	r2, [r3, #12]
}
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop

08001534 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a10      	ldr	r2, [pc, #64]	; (8001580 <XMC_CCU4_lDeassertReset+0x4c>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d103      	bne.n	800154c <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8001544:	2004      	movs	r0, #4
 8001546:	f7ff f885 	bl	8000654 <XMC_SCU_RESET_DeassertPeripheralReset>
 800154a:	e016      	b.n	800157a <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <XMC_CCU4_lDeassertReset+0x50>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d103      	bne.n	800155c <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8001554:	2008      	movs	r0, #8
 8001556:	f7ff f87d 	bl	8000654 <XMC_SCU_RESET_DeassertPeripheralReset>
 800155a:	e00e      	b.n	800157a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <XMC_CCU4_lDeassertReset+0x54>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d103      	bne.n	800156c <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8001564:	2010      	movs	r0, #16
 8001566:	f7ff f875 	bl	8000654 <XMC_SCU_RESET_DeassertPeripheralReset>
 800156a:	e006      	b.n	800157a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a07      	ldr	r2, [pc, #28]	; (800158c <XMC_CCU4_lDeassertReset+0x58>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d102      	bne.n	800157a <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8001574:	4806      	ldr	r0, [pc, #24]	; (8001590 <XMC_CCU4_lDeassertReset+0x5c>)
 8001576:	f7ff f86d 	bl	8000654 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	4000c000 	.word	0x4000c000
 8001584:	40010000 	.word	0x40010000
 8001588:	40014000 	.word	0x40014000
 800158c:	48004000 	.word	0x48004000
 8001590:	10000001 	.word	0x10000001

08001594 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 800159c:	2010      	movs	r0, #16
 800159e:	f7ff f9a9 	bl	80008f4 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffc6 	bl	8001534 <XMC_CCU4_lDeassertReset>
#endif
}
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop

080015b0 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ffe9 	bl	8001594 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffa6 	bl	8001514 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015d4:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	039b      	lsls	r3, r3, #14
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	601a      	str	r2, [r3, #0]
}
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	795b      	ldrb	r3, [r3, #5]
 8001602:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001606:	b2db      	uxtb	r3, r3
 8001608:	051a      	lsls	r2, r3, #20
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	791b      	ldrb	r3, [r3, #4]
 8001612:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	795b      	ldrb	r3, [r3, #5]
 8001622:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	795b      	ldrb	r3, [r3, #5]
 8001632:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	461a      	mov	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	791b      	ldrb	r3, [r3, #4]
 8001642:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001646:	b2db      	uxtb	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]
 8001664:	4613      	mov	r3, r2
 8001666:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800166e:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	2b09      	cmp	r3, #9
 8001674:	d82c      	bhi.n	80016d0 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8001676:	a201      	add	r2, pc, #4	; (adr r2, 800167c <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8001678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167c:	080016a5 	.word	0x080016a5
 8001680:	080016a5 	.word	0x080016a5
 8001684:	080016af 	.word	0x080016af
 8001688:	080016af 	.word	0x080016af
 800168c:	080016d1 	.word	0x080016d1
 8001690:	080016d1 	.word	0x080016d1
 8001694:	080016d1 	.word	0x080016d1
 8001698:	080016d1 	.word	0x080016d1
 800169c:	080016b9 	.word	0x080016b9
 80016a0:	080016c5 	.word	0x080016c5
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 80016a4:	2303      	movs	r3, #3
 80016a6:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
      break;
 80016ac:	e016      	b.n	80016dc <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 80016ae:	230c      	movs	r3, #12
 80016b0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 80016b2:	2302      	movs	r3, #2
 80016b4:	617b      	str	r3, [r7, #20]
      break;
 80016b6:	e011      	b.n	80016dc <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 80016b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016bc:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 80016be:	2308      	movs	r3, #8
 80016c0:	617b      	str	r3, [r7, #20]
      break;
 80016c2:	e00b      	b.n	80016dc <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 80016c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016c8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 80016ca:	230a      	movs	r3, #10
 80016cc:	617b      	str	r3, [r7, #20]
      break;
 80016ce:	e005      	b.n	80016dc <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 80016d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80016d4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 80016d6:	230c      	movs	r3, #12
 80016d8:	617b      	str	r3, [r7, #20]
      break;
 80016da:	bf00      	nop
  }
  
  srs &= ~mask; 
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	43db      	mvns	r3, r3
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4013      	ands	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 80016e6:	78ba      	ldrb	r2, [r7, #2]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80016fc:	371c      	adds	r7, #28
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop

08001708 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	70fb      	strb	r3, [r7, #3]
 8001714:	4613      	mov	r3, r2
 8001716:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4619      	mov	r1, r3
 8001722:	2303      	movs	r3, #3
 8001724:	408b      	lsls	r3, r1
 8001726:	43db      	mvns	r3, r3
 8001728:	401a      	ands	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001732:	78bb      	ldrb	r3, [r7, #2]
 8001734:	78f9      	ldrb	r1, [r7, #3]
 8001736:	0049      	lsls	r1, r1, #1
 8001738:	408b      	lsls	r3, r1
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop

0800174c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800175e:	b2db      	uxtb	r3, r3
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop

08001788 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8001792:	2310      	movs	r3, #16
 8001794:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f88c 	bl	80018b4 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	79db      	ldrb	r3, [r3, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	79db      	ldrb	r3, [r3, #7]
 80017a8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	4619      	mov	r1, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	f000 f8ca 	bl	800194c <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	799b      	ldrb	r3, [r3, #6]
 80017bc:	3b01      	subs	r3, #1
 80017be:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	085b      	lsrs	r3, r3, #1
 80017c4:	3301      	adds	r3, #1
 80017c6:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80017c8:	4313      	orrs	r3, r2
 80017ca:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	791b      	ldrb	r3, [r3, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	061b      	lsls	r3, r3, #24
 80017de:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	795b      	ldrb	r3, [r3, #5]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	795b      	ldrb	r3, [r3, #5]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	041b      	lsls	r3, r3, #16
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001800:	e008      	b.n	8001814 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	791b      	ldrb	r3, [r3, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	041b      	lsls	r3, r3, #16
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800181a:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f04f 32ff 	mov.w	r2, #4294967295
 8001822:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	891b      	ldrh	r3, [r3, #8]
 8001828:	461a      	mov	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001846:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d110      	bne.n	8001870 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800184e:	bf00      	nop
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff7b 	bl	800174c <XMC_USIC_CH_GetTransmitBufferStatus>
 8001856:	4603      	mov	r3, r0
 8001858:	2b80      	cmp	r3, #128	; 0x80
 800185a:	d0f9      	beq.n	8001850 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001862:	f7ff ff83 	bl	800176c <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800186e:	e003      	b.n	8001878 <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8001870:	887a      	ldrh	r2, [r7, #2]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop

08001880 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800188e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d103      	bne.n	800189e <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189a:	81fb      	strh	r3, [r7, #14]
 800189c:	e003      	b.n	80018a6 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80018a4:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 80018a6:	89fb      	ldrh	r3, [r7, #14]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a1a      	ldr	r2, [pc, #104]	; (8001928 <XMC_USIC_CH_Enable+0x74>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d003      	beq.n	80018cc <XMC_USIC_CH_Enable+0x18>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a19      	ldr	r2, [pc, #100]	; (800192c <XMC_USIC_CH_Enable+0x78>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d103      	bne.n	80018d4 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 80018cc:	4818      	ldr	r0, [pc, #96]	; (8001930 <XMC_USIC_CH_Enable+0x7c>)
 80018ce:	f000 f933 	bl	8001b38 <XMC_USIC_Enable>
 80018d2:	e016      	b.n	8001902 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a17      	ldr	r2, [pc, #92]	; (8001934 <XMC_USIC_CH_Enable+0x80>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d003      	beq.n	80018e4 <XMC_USIC_CH_Enable+0x30>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a16      	ldr	r2, [pc, #88]	; (8001938 <XMC_USIC_CH_Enable+0x84>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d103      	bne.n	80018ec <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 80018e4:	4815      	ldr	r0, [pc, #84]	; (800193c <XMC_USIC_CH_Enable+0x88>)
 80018e6:	f000 f927 	bl	8001b38 <XMC_USIC_Enable>
 80018ea:	e00a      	b.n	8001902 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a14      	ldr	r2, [pc, #80]	; (8001940 <XMC_USIC_CH_Enable+0x8c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d003      	beq.n	80018fc <XMC_USIC_CH_Enable+0x48>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a13      	ldr	r2, [pc, #76]	; (8001944 <XMC_USIC_CH_Enable+0x90>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d102      	bne.n	8001902 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 80018fc:	4812      	ldr	r0, [pc, #72]	; (8001948 <XMC_USIC_CH_Enable+0x94>)
 80018fe:	f000 f91b 	bl	8001b38 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2203      	movs	r2, #3
 8001906:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001908:	bf00      	nop
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f9      	beq.n	800190a <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f023 020f 	bic.w	r2, r3, #15
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40030000 	.word	0x40030000
 800192c:	40030200 	.word	0x40030200
 8001930:	40030008 	.word	0x40030008
 8001934:	48020000 	.word	0x48020000
 8001938:	48020200 	.word	0x48020200
 800193c:	48020008 	.word	0x48020008
 8001940:	48024000 	.word	0x48024000
 8001944:	48024200 	.word	0x48024200
 8001948:	48024008 	.word	0x48024008

0800194c <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08e      	sub	sp, #56	; 0x38
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b63      	cmp	r3, #99	; 0x63
 800195c:	d958      	bls.n	8001a10 <XMC_USIC_CH_SetBaudrate+0xc4>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d055      	beq.n	8001a10 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001964:	f7fe fe92 	bl	800068c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001968:	4602      	mov	r2, r0
 800196a:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <XMC_USIC_CH_SetBaudrate+0xd8>)
 800196c:	fba3 2302 	umull	r2, r3, r3, r2
 8001970:	095b      	lsrs	r3, r3, #5
 8001972:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	4a2b      	ldr	r2, [pc, #172]	; (8001a24 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	095b      	lsrs	r3, r3, #5
 800197e:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8001980:	2301      	movs	r3, #1
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001984:	2301      	movs	r3, #1
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001988:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800198c:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 800198e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001992:	633b      	str	r3, [r7, #48]	; 0x30
 8001994:	e022      	b.n	80019dc <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800199a:	fb02 f203 	mul.w	r2, r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	0a9b      	lsrs	r3, r3, #10
 80019b0:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019b8:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c0:	d209      	bcs.n	80019d6 <XMC_USIC_CH_SetBaudrate+0x8a>
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d205      	bcs.n	80019d6 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 80019d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80019d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d8:	3b01      	subs	r3, #1
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
 80019dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1d9      	bne.n	8001996 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 80019e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <XMC_USIC_CH_SetBaudrate+0xdc>)
 80019f2:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	3a01      	subs	r2, #1
 80019f8:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80019fa:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 80019fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fe:	3b01      	subs	r3, #1
 8001a00:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001a02:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a0e:	e002      	b.n	8001a16 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8001a16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3738      	adds	r7, #56	; 0x38
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	51eb851f 	.word	0x51eb851f
 8001a28:	fc0080ef 	.word	0xfc0080ef

08001a2c <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001a42:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001a54:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	0211      	lsls	r1, r2, #8
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8001a5e:	79fa      	ldrb	r2, [r7, #7]
 8001a60:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001a62:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001a64:	4313      	orrs	r3, r2
 8001a66:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	efffc0c0 	.word	0xefffc0c0

08001a80 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	72fb      	strb	r3, [r7, #11]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001a94:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001aa4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001aac:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8001aae:	7afb      	ldrb	r3, [r7, #11]
 8001ab0:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	460b      	mov	r3, r1
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	699a      	ldr	r2, [r3, #24]
 8001ad6:	7afb      	ldrb	r3, [r7, #11]
 8001ad8:	2107      	movs	r1, #7
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 8001ae2:	7afb      	ldrb	r3, [r7, #11]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001aea:	431a      	orrs	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop

08001afc <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	460b      	mov	r3, r1
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001b10:	7afb      	ldrb	r3, [r7, #11]
 8001b12:	2107      	movs	r1, #7
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8001b1c:	7afb      	ldrb	r3, [r7, #11]
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001b24:	431a      	orrs	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop

08001b38 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a0d      	ldr	r2, [pc, #52]	; (8001b78 <XMC_USIC_Enable+0x40>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d104      	bne.n	8001b52 <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001b48:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b4c:	f7fe fd82 	bl	8000654 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001b50:	e00e      	b.n	8001b70 <XMC_USIC_Enable+0x38>
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <XMC_USIC_Enable+0x44>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d103      	bne.n	8001b62 <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8001b5a:	4809      	ldr	r0, [pc, #36]	; (8001b80 <XMC_USIC_Enable+0x48>)
 8001b5c:	f7fe fd7a 	bl	8000654 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001b60:	e006      	b.n	8001b70 <XMC_USIC_Enable+0x38>
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <XMC_USIC_Enable+0x4c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d102      	bne.n	8001b70 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001b6a:	4807      	ldr	r0, [pc, #28]	; (8001b88 <XMC_USIC_Enable+0x50>)
 8001b6c:	f7fe fd72 	bl	8000654 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40030008 	.word	0x40030008
 8001b7c:	48020008 	.word	0x48020008
 8001b80:	10000080 	.word	0x10000080
 8001b84:	48024008 	.word	0x48024008
 8001b88:	10000100 	.word	0x10000100

08001b8c <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001b96:	783b      	ldrb	r3, [r7, #0]
 8001b98:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8001ba0:	78bb      	ldrb	r3, [r7, #2]
 8001ba2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001bca:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c06:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop

08001c1c <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop

08001c40 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8001c44:	2001      	movs	r0, #1
 8001c46:	f7fe fd05 	bl	8000654 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8001c56:	f7ff fff3 	bl	8001c40 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop

08001ca0 <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	4613      	mov	r3, r2
 8001cae:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f240 731f 	movw	r3, #1823	; 0x71f
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	6839      	ldr	r1, [r7, #0]
 8001cc2:	3128      	adds	r1, #40	; 0x28
 8001cc4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001cc8:	e007      	b.n	8001cda <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	3128      	adds	r1, #40	; 0x28
 8001cd6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	071f0000 	.word	0x071f0000

08001ce8 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cf6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	e016      	b.n	8001d34 <XMC_VADC_GLOBAL_StartupCalibration+0x4c>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <XMC_VADC_GLOBAL_StartupCalibration+0x5c>)
 8001d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0e:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <XMC_VADC_GLOBAL_StartupCalibration+0x46>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8001d1e:	bf00      	nop
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f8      	bne.n	8001d20 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	3301      	adds	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d9e5      	bls.n	8001d06 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	08004d64 	.word	0x08004d64

08001d48 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	70fb      	strb	r3, [r7, #3]
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d903      	bls.n	8001d62 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	3b04      	subs	r3, #4
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	e001      	b.n	8001d66 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d6c:	f023 020f 	bic.w	r2, r3, #15
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	6859      	ldr	r1, [r3, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	2300      	movs	r3, #0
 8001da4:	f000 f828 	bl	8001df8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	6859      	ldr	r1, [r3, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	2300      	movs	r3, #0
 8001db2:	f000 f821 	bl	8001df8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	6899      	ldr	r1, [r3, #8]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f000 f81a 	bl	8001df8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	6899      	ldr	r1, [r3, #8]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	2301      	movs	r3, #1
 8001dce:	f000 f813 	bl	8001df8 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	f7ff fece 	bl	8001b8c <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop

08001df8 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b08d      	sub	sp, #52	; 0x34
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	4613      	mov	r3, r2
 8001e06:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d113      	bne.n	8001e36 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8001e0e:	2308      	movs	r3, #8
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8001e12:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8001e1c:	231f      	movs	r3, #31
 8001e1e:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8001e20:	7a3b      	ldrb	r3, [r7, #8]
 8001e22:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8001e2a:	7a7b      	ldrb	r3, [r7, #9]
 8001e2c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	76fb      	strb	r3, [r7, #27]
 8001e34:	e013      	b.n	8001e5e <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8001e36:	2318      	movs	r3, #24
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8001e3a:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8001e40:	2310      	movs	r3, #16
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8001e44:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8001e48:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8001e4a:	7abb      	ldrb	r3, [r7, #10]
 8001e4c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8001e54:	7afb      	ldrb	r3, [r7, #11]
 8001e56:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	3228      	adds	r2, #40	; 0x28
 8001e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e68:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4013      	ands	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8001e74:	7efa      	ldrb	r2, [r7, #27]
 8001e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8001e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	3228      	adds	r2, #40	; 0x28
 8001ea0:	6979      	ldr	r1, [r7, #20]
 8001ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001ea6:	3734      	adds	r7, #52	; 0x34
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ec2:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f023 0303 	bic.w	r3, r3, #3
 8001eca:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop

08001ee8 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	75fb      	strb	r3, [r7, #23]
 8001ef6:	e009      	b.n	8001f0c <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	4a39      	ldr	r2, [pc, #228]	; (8001fe0 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fe8b 	bl	8001c1c <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	75fb      	strb	r3, [r7, #23]
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d9f2      	bls.n	8001ef8 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8001f24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f28:	613b      	str	r3, [r7, #16]
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	75fb      	strb	r3, [r7, #23]
 8001f2e:	e021      	b.n	8001f74 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	4a2b      	ldr	r2, [pc, #172]	; (8001fe0 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f3c:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f44:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
  
    /* Program the start mode */
    reg |= conv_start_mask;
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
 8001f70:	3301      	adds	r3, #1
 8001f72:	75fb      	strb	r3, [r7, #23]
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d9da      	bls.n	8001f30 <XMC_VADC_GLOBAL_BackgroundInit+0x48>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f043 0201 	orr.w	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d107      	bne.n	8001fb8 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	75fb      	strb	r3, [r7, #23]
 8001fbc:	e009      	b.n	8001fd2 <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8001fbe:	7dfb      	ldrb	r3, [r7, #23]
 8001fc0:	4a07      	ldr	r2, [pc, #28]	; (8001fe0 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fe16 	bl	8001bf8 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001fcc:	7dfb      	ldrb	r3, [r7, #23]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	75fb      	strb	r3, [r7, #23]
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d9f2      	bls.n	8001fbe <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	08004d64 	.word	0x08004d64

08001fe4 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7a1b      	ldrb	r3, [r3, #8]
 8001ff4:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffc:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2201      	movs	r2, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	4013      	ands	r3, r2
 800200c:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	7a5b      	ldrb	r3, [r3, #9]
 8002028:	b25b      	sxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	db29      	blt.n	8002082 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d10a      	bne.n	800204e <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8002038:	2308      	movs	r3, #8
 800203a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002042:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800204c:	e00c      	b.n	8002068 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d109      	bne.n	8002068 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800205e:	f023 021f 	bic.w	r2, r3, #31
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	7a52      	ldrb	r2, [r2, #9]
 8002072:	b251      	sxtb	r1, r2
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	fa01 f202 	lsl.w	r2, r1, r2
 800207a:	431a      	orrs	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	431a      	orrs	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6819      	ldr	r1, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	3280      	adds	r2, #128	; 0x80
 800209e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80020a2:	3724      	adds	r7, #36	; 0x24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_init>:
  }
}

/* Init */
void _init(void)
{}
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	401a      	ands	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop

080020fc <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	43db      	mvns	r3, r3
 8002134:	401a      	ands	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop

08002148 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002156:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	bf14      	ite	ne
 800217a:	2301      	movne	r3, #1
 800217c:	2300      	moveq	r3, #0
 800217e:	b2db      	uxtb	r3, r3
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4798      	blx	r3
 80021a0:	4603      	mov	r3, r0
 80021a2:	73fb      	strb	r3, [r7, #15]

  return status;
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop

080021b0 <UART_Receive>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 80021bc:	2304      	movs	r3, #4
 80021be:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->receive_mode)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d000      	beq.n	80021ce <UART_Receive+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 80021cc:	e007      	b.n	80021de <UART_Receive+0x2e>

  switch(handle->config->receive_mode)
  {
#ifdef UART_RX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartReceiveIRQ(handle, data_ptr, count);
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	f000 f808 	bl	80021e8 <UART_StartReceiveIRQ>
 80021d8:	4603      	mov	r3, r0
 80021da:	75fb      	strb	r3, [r7, #23]
    break;
 80021dc:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 80021de:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <UART_StartReceiveIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 80021f4:	2304      	movs	r3, #4
 80021f6:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002206:	2b00      	cmp	r3, #0
 8002208:	d13e      	bne.n	8002288 <UART_StartReceiveIRQ+0xa0>
  {
    ret_stat = UART_STATUS_BUSY;
 800220a:	2302      	movs	r3, #2
 800220c:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->rx_busy == false)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	7e5b      	ldrb	r3, [r3, #25]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	f083 0301 	eor.w	r3, r3, #1
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d034      	beq.n	8002288 <UART_StartReceiveIRQ+0xa0>
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d02f      	beq.n	8002284 <UART_StartReceiveIRQ+0x9c>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d02c      	beq.n	8002284 <UART_StartReceiveIRQ+0x9c>
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	605a      	str	r2, [r3, #4]
        ptr_runtime->rx_data_count = count;
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	611a      	str	r2, [r3, #16]
        ptr_runtime->rx_busy = true;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2201      	movs	r2, #1
 800223a:	765a      	strb	r2, [r3, #25]
        ptr_runtime->rx_data_index = 0U;
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2200      	movs	r2, #0
 8002240:	615a      	str	r2, [r3, #20]

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800224a:	2b00      	cmp	r3, #0
 800224c:	d010      	beq.n	8002270 <UART_StartReceiveIRQ+0x88>
        {
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff ff78 	bl	8002148 <XMC_USIC_CH_RXFIFO_Flush>

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	f000 f8aa 	bl	80023b4 <UART_lReconfigureRxFIFO>

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800226a:	f7ff ff47 	bl	80020fc <XMC_USIC_CH_RXFIFO_EnableEvent>
 800226e:	e006      	b.n	800227e <UART_StartReceiveIRQ+0x96>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800227a:	f7ff ff1d 	bl	80020b8 <XMC_USIC_CH_EnableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
        }
        ret_stat = UART_STATUS_SUCCESS;
 800227e:	2300      	movs	r3, #0
 8002280:	75fb      	strb	r3, [r7, #23]
 8002282:	e001      	b.n	8002288 <UART_StartReceiveIRQ+0xa0>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8002284:	2303      	movs	r3, #3
 8002286:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 8002288:	7dfb      	ldrb	r3, [r7, #23]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop

08002294 <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	60fb      	str	r3, [r7, #12]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d04e      	beq.n	800234c <UART_lReceiveHandler+0xb8>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 80022ae:	e032      	b.n	8002316 <UART_lReceiveHandler+0x82>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d211      	bcs.n	80022e0 <UART_lReceiveHandler+0x4c>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	18d4      	adds	r4, r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fad8 	bl	8001880 <XMC_UART_CH_GetReceivedData>
 80022d0:	4603      	mov	r3, r0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	7023      	strb	r3, [r4, #0]
        (ptr_runtime->rx_data_index)++;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	615a      	str	r2, [r3, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d114      	bne.n	8002316 <UART_lReceiveHandler+0x82>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	765a      	strb	r2, [r3, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80022fc:	f7ff ff10 	bl	8002120 <XMC_USIC_CH_RXFIFO_DisableEvent>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d004      	beq.n	8002314 <UART_lReceiveHandler+0x80>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4798      	blx	r3
        }
        break;
 8002312:	e00b      	b.n	800232c <UART_lReceiveHandler+0x98>
 8002314:	e00a      	b.n	800232c <UART_lReceiveHandler+0x98>
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff22 	bl	8002164 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8002320:	4603      	mov	r3, r0
 8002322:	f083 0301 	eor.w	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1c1      	bne.n	80022b0 <UART_lReceiveHandler+0x1c>
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	429a      	cmp	r2, r3
 8002336:	d23a      	bcs.n	80023ae <UART_lReceiveHandler+0x11a>
    {
      UART_lReconfigureRxFIFO(handle,
          (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	695b      	ldr	r3, [r3, #20]
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	4619      	mov	r1, r3
 8002346:	f000 f835 	bl	80023b4 <UART_lReconfigureRxFIFO>
 800234a:	e030      	b.n	80023ae <UART_lReceiveHandler+0x11a>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	429a      	cmp	r2, r3
 8002356:	d211      	bcs.n	800237c <UART_lReceiveHandler+0xe8>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	18d4      	adds	r4, r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fa8a 	bl	8001880 <XMC_UART_CH_GetReceivedData>
 800236c:	4603      	mov	r3, r0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	7023      	strb	r3, [r4, #0]
      (ptr_runtime->rx_data_index)++;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	615a      	str	r2, [r3, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	429a      	cmp	r2, r3
 8002386:	d112      	bne.n	80023ae <UART_lReceiveHandler+0x11a>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	765a      	strb	r2, [r3, #25]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002398:	f7ff fe9e 	bl	80020d8 <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <UART_lReceiveHandler+0x11a>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4798      	blx	r3
      }
    }
  }
}
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd90      	pop	{r4, r7, pc}

080023b4 <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023ca:	461a      	mov	r2, r3
 80023cc:	2301      	movs	r3, #1
 80023ce:	4093      	lsls	r3, r2
 80023d0:	60bb      	str	r3, [r7, #8]
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d203      	bcs.n	80023e2 <UART_lReconfigureRxFIFO+0x2e>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	3b01      	subs	r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	e002      	b.n	80023e8 <UART_lReconfigureRxFIFO+0x34>
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681a      	ldr	r2, [r3, #0]
        handle->config->rx_fifo_size, ret_limit_val);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 80023f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	f7ff fb41 	bl	8001a80 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <__NVIC_GetPriorityGrouping+0x18>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002410:	0a1b      	lsrs	r3, r3, #8
}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	2b00      	cmp	r3, #0
 8002430:	db0b      	blt.n	800244a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002432:	4908      	ldr	r1, [pc, #32]	; (8002454 <__NVIC_EnableIRQ+0x34>)
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	79fa      	ldrb	r2, [r7, #7]
 800243c:	f002 021f 	and.w	r2, r2, #31
 8002440:	2001      	movs	r0, #1
 8002442:	fa00 f202 	lsl.w	r2, r0, r2
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	490d      	ldr	r1, [pc, #52]	; (80024a4 <__NVIC_SetPriority+0x4c>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	0092      	lsls	r2, r2, #2
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	4909      	ldr	r1, [pc, #36]	; (80024a8 <__NVIC_SetPriority+0x50>)
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	3b04      	subs	r3, #4
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	0092      	lsls	r2, r2, #2
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
  }
}
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	bf28      	it	cs
 80024ca:	2306      	movcs	r3, #6
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3306      	adds	r3, #6
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b01      	subs	r3, #1
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2201      	movs	r2, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	1e5a      	subs	r2, r3, #1
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	401a      	ands	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2101      	movs	r1, #1
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	1e59      	subs	r1, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002500:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002502:	4618      	mov	r0, r3
 8002504:	3724      	adds	r7, #36	; 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop

08002510 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	70fb      	strb	r3, [r7, #3]
 800251c:	4613      	mov	r3, r2
 800251e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002520:	78f8      	ldrb	r0, [r7, #3]
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	3306      	adds	r3, #6
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8002532:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002534:	431a      	orrs	r2, r3
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	1d83      	adds	r3, r0, #6
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop

0800254c <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f023 030f 	bic.w	r3, r3, #15
 800255c:	f043 0202 	orr.w	r2, r3, #2
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop

08002570 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8002576:	2300      	movs	r3, #0
 8002578:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 0U, &UART_0_rx_pin_config);
 800257a:	4820      	ldr	r0, [pc, #128]	; (80025fc <UART_0_init+0x8c>)
 800257c:	2100      	movs	r1, #0
 800257e:	4a20      	ldr	r2, [pc, #128]	; (8002600 <UART_0_init+0x90>)
 8002580:	f7fd ff12 	bl	80003a8 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH1, &UART_0_channel_config);
 8002584:	481f      	ldr	r0, [pc, #124]	; (8002604 <UART_0_init+0x94>)
 8002586:	4920      	ldr	r1, [pc, #128]	; (8002608 <UART_0_init+0x98>)
 8002588:	f7ff f8fe 	bl	8001788 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH1, XMC_USIC_CH_INPUT_DX0, 3U);
 800258c:	481d      	ldr	r0, [pc, #116]	; (8002604 <UART_0_init+0x94>)
 800258e:	2100      	movs	r1, #0
 8002590:	2203      	movs	r2, #3
 8002592:	f7ff ffbd 	bl	8002510 <XMC_USIC_CH_SetInputSource>
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART1_CH1,
 8002596:	481b      	ldr	r0, [pc, #108]	; (8002604 <UART_0_init+0x94>)
 8002598:	2100      	movs	r1, #0
 800259a:	2204      	movs	r2, #4
 800259c:	2300      	movs	r3, #0
 800259e:	f7ff fa45 	bl	8001a2c <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART1_CH1);
 80025a2:	4818      	ldr	r0, [pc, #96]	; (8002604 <UART_0_init+0x94>)
 80025a4:	f7ff ffd2 	bl	800254c <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 1U, &UART_0_tx_pin_config);
 80025a8:	4814      	ldr	r0, [pc, #80]	; (80025fc <UART_0_init+0x8c>)
 80025aa:	2101      	movs	r1, #1
 80025ac:	4a17      	ldr	r2, [pc, #92]	; (800260c <UART_0_init+0x9c>)
 80025ae:	f7fd fefb 	bl	80003a8 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH1, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 80025b2:	4814      	ldr	r0, [pc, #80]	; (8002604 <UART_0_init+0x94>)
 80025b4:	2110      	movs	r1, #16
 80025b6:	2201      	movs	r2, #1
 80025b8:	f7ff fa84 	bl	8001ac4 <XMC_USIC_CH_SetInterruptNodePointer>
     1U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART1_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 80025bc:	4811      	ldr	r0, [pc, #68]	; (8002604 <UART_0_init+0x94>)
 80025be:	2110      	movs	r1, #16
 80025c0:	2200      	movs	r2, #0
 80025c2:	f7ff fa9b 	bl	8001afc <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x0U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART1_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
 80025c6:	480f      	ldr	r0, [pc, #60]	; (8002604 <UART_0_init+0x94>)
 80025c8:	2113      	movs	r1, #19
 80025ca:	2200      	movs	r2, #0
 80025cc:	f7ff fa96 	bl	8001afc <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x0U);
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)90, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80025d0:	f7ff ff18 	bl	8002404 <__NVIC_GetPriorityGrouping>
 80025d4:	4603      	mov	r3, r0
 80025d6:	4618      	mov	r0, r3
 80025d8:	2105      	movs	r1, #5
 80025da:	2200      	movs	r2, #0
 80025dc:	f7ff ff66 	bl	80024ac <NVIC_EncodePriority>
 80025e0:	4603      	mov	r3, r0
 80025e2:	205a      	movs	r0, #90	; 0x5a
 80025e4:	4619      	mov	r1, r3
 80025e6:	f7ff ff37 	bl	8002458 <__NVIC_SetPriority>
                      5U, 0U));
  NVIC_EnableIRQ((IRQn_Type)90);
 80025ea:	205a      	movs	r0, #90	; 0x5a
 80025ec:	f7ff ff18 	bl	8002420 <__NVIC_EnableIRQ>
  return status;
 80025f0:	79fb      	ldrb	r3, [r7, #7]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	48028000 	.word	0x48028000
 8002600:	08004dc4 	.word	0x08004dc4
 8002604:	48020200 	.word	0x48020200
 8002608:	08004d74 	.word	0x08004d74
 800260c:	08004d80 	.word	0x08004d80

08002610 <USIC1_0_IRQHandler>:
/*Receive ISR*/
void UART_0_RX_HANDLER()
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  UART_lReceiveHandler(&UART_0);
 8002614:	4801      	ldr	r0, [pc, #4]	; (800261c <USIC1_0_IRQHandler+0xc>)
 8002616:	f7ff fe3d 	bl	8002294 <UART_lReceiveHandler>
}
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000000 	.word	0x20000000

08002620 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	2101      	movs	r1, #1
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	60da      	str	r2, [r3, #12]
}
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	60da      	str	r2, [r3, #12]
}
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	611a      	str	r2, [r3, #16]
}
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8002684:	887a      	ldrh	r2, [r7, #2]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	635a      	str	r2, [r3, #52]	; 0x34
}
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80026a0:	887a      	ldrh	r2, [r7, #2]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	611a      	str	r2, [r3, #16]
}
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop

080026cc <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	2101      	movs	r1, #1
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800270a:	f083 0301 	eor.w	r3, r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d009      	beq.n	8002728 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800271a:	2b00      	cmp	r3, #0
 800271c:	d104      	bne.n	8002728 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f808 	bl	8002734 <TIMER_CCU4_lInit>
 8002724:	4603      	mov	r3, r0
 8002726:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8002728:	7bfb      	ldrb	r3, [r7, #15]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop

08002734 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 f92b 	bl	800299c <GLOBAL_CCU4_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	7e1b      	ldrb	r3, [r3, #24]
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	f7ff ff62 	bl	8002620 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f7fe ff40 	bl	80015ec <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f82d 	bl	80027cc <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00f      	beq.n	800279c <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002786:	4610      	mov	r0, r2
 8002788:	2100      	movs	r1, #0
 800278a:	461a      	mov	r2, r3
 800278c:	f7fe ff64 	bl	8001658 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	4618      	mov	r0, r3
 8002796:	2100      	movs	r1, #0
 8002798:	f7ff ff98 	bl	80026cc <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff5d 	bl	8002660 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d004      	beq.n	80027c2 <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff43 	bl	8002648 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695a      	ldr	r2, [r3, #20]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	f7ff ff4a 	bl	8002678 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	4618      	mov	r0, r3
 80027ea:	2100      	movs	r1, #0
 80027ec:	f7ff ff52 	bl	8002694 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	f7ff ff57 	bl	80026b0 <XMC_CCU4_EnableShadowTransfer>
}
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <__NVIC_GetPriorityGrouping+0x18>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002814:	0a1b      	lsrs	r3, r3, #8
}
 8002816:	4618      	mov	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	2b00      	cmp	r3, #0
 8002834:	db0b      	blt.n	800284e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002836:	4908      	ldr	r1, [pc, #32]	; (8002858 <__NVIC_EnableIRQ+0x34>)
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	79fa      	ldrb	r2, [r7, #7]
 8002840:	f002 021f 	and.w	r2, r2, #31
 8002844:	2001      	movs	r0, #1
 8002846:	fa00 f202 	lsl.w	r2, r0, r2
 800284a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000e100 	.word	0xe000e100

0800285c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	6039      	str	r1, [r7, #0]
 8002866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286c:	2b00      	cmp	r3, #0
 800286e:	db0a      	blt.n	8002886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002870:	490d      	ldr	r1, [pc, #52]	; (80028a8 <__NVIC_SetPriority+0x4c>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	0092      	lsls	r2, r2, #2
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	440b      	add	r3, r1
 8002880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002884:	e00a      	b.n	800289c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002886:	4909      	ldr	r1, [pc, #36]	; (80028ac <__NVIC_SetPriority+0x50>)
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	3b04      	subs	r3, #4
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	0092      	lsls	r2, r2, #2
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	440b      	add	r3, r1
 800289a:	761a      	strb	r2, [r3, #24]
  }
}
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000e100 	.word	0xe000e100
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	; 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f1c3 0307 	rsb	r3, r3, #7
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	bf28      	it	cs
 80028ce:	2306      	movcs	r3, #6
 80028d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3306      	adds	r3, #6
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d902      	bls.n	80028e0 <NVIC_EncodePriority+0x30>
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3b01      	subs	r3, #1
 80028de:	e000      	b.n	80028e2 <NVIC_EncodePriority+0x32>
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2201      	movs	r2, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	1e5a      	subs	r2, r3, #1
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	401a      	ands	r2, r3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2101      	movs	r1, #1
 80028fa:	fa01 f303 	lsl.w	r3, r1, r3
 80028fe:	1e59      	subs	r1, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002904:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002906:	4618      	mov	r0, r3
 8002908:	3724      	adds	r7, #36	; 0x24
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop

08002914 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	b25b      	sxtb	r3, r3
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff7e 	bl	8002824 <__NVIC_EnableIRQ>
}
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop

08002930 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	781c      	ldrb	r4, [r3, #0]
 800293c:	f7ff ff64 	bl	8002808 <__NVIC_GetPriorityGrouping>
 8002940:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002946:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800294c:	4608      	mov	r0, r1
 800294e:	4611      	mov	r1, r2
 8002950:	461a      	mov	r2, r3
 8002952:	f7ff ffad 	bl	80028b0 <NVIC_EncodePriority>
 8002956:	4602      	mov	r2, r0
 8002958:	b263      	sxtb	r3, r4
 800295a:	4618      	mov	r0, r3
 800295c:	4611      	mov	r1, r2
 800295e:	f7ff ff7d 	bl	800285c <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	78db      	ldrb	r3, [r3, #3]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ffd2 	bl	8002914 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bd90      	pop	{r4, r7, pc}
 800297a:	bf00      	nop

0800297c <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	60da      	str	r2, [r3, #12]
}
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop

0800299c <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	7b5b      	ldrb	r3, [r3, #13]
 80029a8:	f083 0301 	eor.w	r3, r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00f      	beq.n	80029d2 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	7b1b      	ldrb	r3, [r3, #12]
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	f7fe fdf7 	bl	80015b0 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ffd8 	bl	800297c <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7a5b      	ldrb	r3, [r3, #9]
 80029ec:	f083 0301 	eor.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00c      	beq.n	8002a10 <GLOBAL_CAN_Init+0x34>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_Init(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
#else
    XMC_CAN_Init(handle->canglobal_ptr, handle->can_frequency);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	f7fe fb11 	bl	8001028 <XMC_CAN_Init>
#endif
    handle->init_status = true;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8002a10:	7bfb      	ldrb	r3, [r7, #15]

}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop

08002a1c <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	3310      	adds	r3, #16
 8002a30:	4619      	mov	r1, r3
 8002a32:	2301      	movs	r3, #1
 8002a34:	408b      	lsls	r3, r1
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7e1b      	ldrb	r3, [r3, #24]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d149      	bne.n	8002aec <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	f7ff f8f2 	bl	8001c4c <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e02f      	b.n	8002ace <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a76:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4608      	mov	r0, r1
 8002a84:	4619      	mov	r1, r3
 8002a86:	f7ff f983 	bl	8001d90 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	2103      	movs	r1, #3
 8002a98:	f7ff fa0a 	bl	8001eb0 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa4:	7a1b      	ldrb	r3, [r3, #8]
 8002aa6:	f083 0301 	eor.w	r3, r3, #1
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	68f9      	ldr	r1, [r7, #12]
 8002ab8:	f7ff ffb0 	bl	8002a1c <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3301      	adds	r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d9cc      	bls.n	8002a6e <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	7e5b      	ldrb	r3, [r3, #25]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d004      	beq.n	8002ae6 <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff f901 	bl	8001ce8 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7e1b      	ldrb	r3, [r3, #24]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	7c1a      	ldrb	r2, [r3, #16]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	461a      	mov	r2, r3
 8002b12:	f7fd fc49 	bl	80003a8 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6819      	ldr	r1, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	7c1a      	ldrb	r2, [r3, #16]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	7c5b      	ldrb	r3, [r3, #17]
 8002b22:	4608      	mov	r0, r1
 8002b24:	4611      	mov	r1, r2
 8002b26:	461a      	mov	r2, r3
 8002b28:	f7fe fdee 	bl	8001708 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop

08002b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <__NVIC_SetPriorityGrouping+0x44>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b54:	4013      	ands	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b68:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002b6a:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <__NVIC_SetPriorityGrouping+0x44>)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	60d3      	str	r3, [r2, #12]
}
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8002b86:	2001      	movs	r0, #1
 8002b88:	f7ff ffd6 	bl	8002b38 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b8c:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8002b8e:	4b21      	ldr	r3, [pc, #132]	; (8002c14 <SystemCoreSetup+0x94>)
 8002b90:	4a21      	ldr	r2, [pc, #132]	; (8002c18 <SystemCoreSetup+0x98>)
 8002b92:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b94:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002b98:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8002b9a:	4a1e      	ldr	r2, [pc, #120]	; (8002c14 <SystemCoreSetup+0x94>)
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <SystemCoreSetup+0x94>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ba6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <SystemCoreSetup+0x9c>)
 8002bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb0:	3314      	adds	r3, #20
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f023 030f 	bic.w	r3, r3, #15
 8002bbc:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f043 0303 	orr.w	r3, r3, #3
 8002bc4:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <SystemCoreSetup+0x9c>)
 8002bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bcc:	3314      	adds	r3, #20
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8002bd2:	4a10      	ldr	r2, [pc, #64]	; (8002c14 <SystemCoreSetup+0x94>)
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <SystemCoreSetup+0x94>)
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f023 0310 	bic.w	r3, r3, #16
 8002bdc:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8002bde:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <SystemCoreSetup+0x94>)
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <SystemCoreSetup+0x94>)
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f023 0308 	bic.w	r3, r3, #8
 8002be8:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <SystemCoreSetup+0x94>)
 8002bec:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <SystemCoreSetup+0x94>)
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8002bf6:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <SystemCoreSetup+0x94>)
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <SystemCoreSetup+0x94>)
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002c00:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8002c02:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <SystemCoreSetup+0x94>)
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <SystemCoreSetup+0x94>)
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0c:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	e000ed00 	.word	0xe000ed00
 8002c18:	08000000 	.word	0x08000000
 8002c1c:	58001000 	.word	0x58001000

08002c20 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]

  return (status);
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8002c44:	4b02      	ldr	r3, [pc, #8]	; (8002c50 <OSCHP_GetFrequency+0x10>)
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	00b71b00 	.word	0x00b71b00

08002c54 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8002c54:	b5b0      	push	{r4, r5, r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <SystemCoreClockSetup+0x50>)
 8002c5c:	1d3c      	adds	r4, r7, #4
 8002c5e:	461d      	mov	r5, r3
 8002c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c64:	682b      	ldr	r3, [r5, #0]
 8002c66:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc7c 	bl	8000568 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8002c70:	2000      	movs	r0, #0
 8002c72:	f7fd fd77 	bl	8000764 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8002c76:	2000      	movs	r0, #0
 8002c78:	f7fd fd2c 	bl	80006d4 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8002c7c:	2004      	movs	r0, #4
 8002c7e:	f7fd fdfd 	bl	800087c <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8002c82:	2001      	movs	r0, #1
 8002c84:	2120      	movs	r1, #32
 8002c86:	f7fd fe45 	bl	8000914 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7fd fd36 	bl	80006fc <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8002c90:	2001      	movs	r0, #1
 8002c92:	f7fd fe1b 	bl	80008cc <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8002c96:	2001      	movs	r0, #1
 8002c98:	f7fd fe04 	bl	80008a4 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	08004e50 	.word	0x08004e50

08002ca8 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
                                          const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
                                          const uint32_t service_request)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	7afb      	ldrb	r3, [r7, #11]
 8002cbc:	2107      	movs	r1, #7
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	401a      	ands	r2, r3
 8002cc6:	7afb      	ldrb	r3, [r7, #11]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	609a      	str	r2, [r3, #8]
}
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop

08002ce0 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop

08002d0c <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	60da      	str	r2, [r3, #12]
}
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop

08002d2c <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	601a      	str	r2, [r3, #0]
}
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop

08002d4c <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	601a      	str	r2, [r3, #0]
}
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop

08002d6c <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f043 0201 	orr.w	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	601a      	str	r2, [r3, #0]
}
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop

08002d8c <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f023 0201 	bic.w	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	601a      	str	r2, [r3, #0]
}
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop

08002dac <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	460b      	mov	r3, r1
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	6891      	ldr	r1, [r2, #8]
 8002dc4:	7afa      	ldrb	r2, [r7, #11]
 8002dc6:	2007      	movs	r0, #7
 8002dc8:	fa00 f202 	lsl.w	r2, r0, r2
 8002dcc:	43d2      	mvns	r2, r2
 8002dce:	4011      	ands	r1, r2
                          (service_request << (uint32_t)can_mo_ptr_int);
 8002dd0:	7afa      	ldrb	r2, [r7, #11]
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	609a      	str	r2, [r3, #8]
                          (service_request << (uint32_t)can_mo_ptr_int);
}
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop

08002de8 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
                                        const uint32_t event)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	6811      	ldr	r1, [r2, #0]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]
}
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <CAN_NODE_MO_EnableTxEvent>:
 *     return (1);
 *  }
 *  @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002e1e:	f7ff ffe3 	bl	8002de8 <XMC_CAN_MO_EnableEvent>
}
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <CAN_NODE_MO_EnableRxEvent>:
 *  }
 *  @endcode
 */

__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002e3a:	f7ff ffd5 	bl	8002de8 <XMC_CAN_MO_EnableEvent>
}
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f831 	bl	8002eb8 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f043 0302 	orr.w	r3, r3, #2
 8002e66:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f043 0304 	orr.w	r3, r3, #4
 8002e78:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f043 0308 	orr.w	r3, r3, #8
 8002e8a:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4618      	mov	r0, r3
 8002e92:	68f9      	ldr	r1, [r7, #12]
 8002e94:	f7fe fb22 	bl	80014dc <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d006      	beq.n	8002eb0 <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002eac:	f7fe fb16 	bl	80014dc <XMC_CAN_NODE_EnableEvent>
  }

}
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop

08002eb8 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eca:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8002ecc:	4610      	mov	r0, r2
 8002ece:	2100      	movs	r1, #0
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	f7ff fee9 	bl	8002ca8 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee0:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	2104      	movs	r1, #4
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f7ff fede 	bl	8002ca8 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ef6:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8002ef8:	4610      	mov	r0, r2
 8002efa:	2108      	movs	r1, #8
 8002efc:	461a      	mov	r2, r3
 8002efe:	f7ff fed3 	bl	8002ca8 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f0c:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8002f0e:	4610      	mov	r0, r2
 8002f10:	210c      	movs	r1, #12
 8002f12:	461a      	mov	r2, r3
 8002f14:	f7ff fec8 	bl	8002ca8 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop

08002f20 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fe f8e5 	bl	80010fc <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	79db      	ldrb	r3, [r3, #7]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	795b      	ldrb	r3, [r3, #5]
 8002f42:	4610      	mov	r0, r2
 8002f44:	2104      	movs	r1, #4
 8002f46:	461a      	mov	r2, r3
 8002f48:	f7ff ff30 	bl	8002dac <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ff5d 	bl	8002e0c <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	7a1b      	ldrb	r3, [r3, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00b      	beq.n	8002f72 <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	799b      	ldrb	r3, [r3, #6]
 8002f62:	4610      	mov	r0, r2
 8002f64:	2100      	movs	r1, #0
 8002f66:	461a      	mov	r2, r3
 8002f68:	f7ff ff20 	bl	8002dac <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ff5b 	bl	8002e28 <CAN_NODE_MO_EnableRxEvent>
  }

}
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <CAN_NODE_MO_Receive>:
  return (status);
}

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8002f80:	2300      	movs	r3, #0
 8002f82:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe f9d7 	bl	800133c <XMC_CAN_MO_Receive>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	73fb      	strb	r3, [r7, #15]
  return (status);
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <CAN_NODE_MO_ReceiveData>:

/* Function to read the received CAN message data from the selected message object excluding other parameters. */
CAN_NODE_STATUS_t CAN_NODE_MO_ReceiveData( CAN_NODE_LMO_t *lmo_ptr)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_ReceiveData: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_ReceiveData(lmo_ptr->mo_ptr);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fe f979 	bl	80012a4 <XMC_CAN_MO_ReceiveData>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	73fb      	strb	r3, [r7, #15]
  return (status);
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fcff 	bl	80029dc <GLOBAL_CAN_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d17b      	bne.n	80030e0 <CAN_NODE_Init+0x120>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    XMC_CAN_NODE_NominalBitTimeConfigure(handle->node_ptr, handle->baudrate_config);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f7fd fefe 	bl	8000df4 <XMC_CAN_NODE_NominalBitTimeConfigure>
    /* set CCE and INIT bit NCR for node configuration */
    XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fe95 	bl	8002d2c <XMC_CAN_NODE_EnableConfigurationChange>
    XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff feb0 	bl	8002d6c <XMC_CAN_NODE_SetInitBit>

    if (handle->loopback_enable == true) /* Loop back mode enabled */
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <CAN_NODE_Init+0x62>
    {
      XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fe76 	bl	8002d0c <XMC_CAN_NODE_EnableLoopBack>
 8003020:	e018      	b.n	8003054 <CAN_NODE_Init+0x94>
    }
    else
    {
      XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003028:	6819      	ldr	r1, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003030:	791a      	ldrb	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003038:	4608      	mov	r0, r1
 800303a:	4611      	mov	r1, r2
 800303c:	461a      	mov	r2, r3
 800303e:	f7fd f9b3 	bl	80003a8 <XMC_GPIO_Init>
      XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	f7ff fe46 	bl	8002ce0 <XMC_CAN_NODE_SetReceiveInput>
    }
    CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff fef5 	bl	8002e44 <CAN_NODE_SetNodeEvents>

    for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	e019      	b.n	8003094 <CAN_NODE_Init+0xd4>
    {
      lmo_ptr = handle->lmobj_ptr[loop_count];
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	3302      	adds	r3, #2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	60bb      	str	r3, [r7, #8]
      XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	791b      	ldrb	r3, [r3, #4]
 800307e:	4608      	mov	r0, r1
 8003080:	4611      	mov	r1, r2
 8003082:	461a      	mov	r2, r3
 8003084:	f7fd ff98 	bl	8000fb8 <XMC_CAN_AllocateMOtoNodeList>
      CAN_NODE_MO_Init(lmo_ptr);
 8003088:	68b8      	ldr	r0, [r7, #8]
 800308a:	f7ff ff49 	bl	8002f20 <CAN_NODE_MO_Init>
      XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
      XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
    }
    CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

    for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	3301      	adds	r3, #1
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800309a:	461a      	mov	r2, r3
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d8de      	bhi.n	8003060 <CAN_NODE_Init+0xa0>
      lmo_ptr = handle->lmobj_ptr[loop_count];
      XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
      CAN_NODE_MO_Init(lmo_ptr);
    }
    /* reset CCE and INIT bit NCR for node configuration */
    XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fe50 	bl	8002d4c <XMC_CAN_NODE_DisableConfigurationChange>
    XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fe6b 	bl	8002d8c <XMC_CAN_NODE_ResetInitBit>
    if (handle->loopback_enable == false)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 80030bc:	f083 0301 	eor.w	r3, r3, #1
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00e      	beq.n	80030e4 <CAN_NODE_Init+0x124>
    {
      /* CAN transmit pin configuration */
      XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6819      	ldr	r1, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	791a      	ldrb	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d4:	4608      	mov	r0, r1
 80030d6:	4611      	mov	r1, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	f7fd f965 	bl	80003a8 <XMC_GPIO_Init>
 80030de:	e001      	b.n	80030e4 <CAN_NODE_Init+0x124>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 80030e0:	2301      	movs	r3, #1
 80030e2:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 80030e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop

080030f0 <ANALOG_IO_Init>:
 * Input Parameter  : Handler Pointer pointing to APP data structure.
 * Output Parameter : ANALOG_IO_STATUS_t (ANALOG_IO APP initialization status).
 */

ANALOG_IO_STATUS_t ANALOG_IO_Init(const ANALOG_IO_t *const handle)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ANALOG_IO_Init: Passed handler is a null pointer", handler != NULL);
  if (*(handle->state) == ANALOG_IO_STATE_NOT_INITIALIZED)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10a      	bne.n	8003118 <ANALOG_IO_Init+0x28>
  {
    if (handle->config_ptr != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <ANALOG_IO_Init+0x20>
    {
      /* Instance specific initialization function call*/
      handle->config_ptr();
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4798      	blx	r3
    }
    /* Set the state variable to initialized state*/
    *(handle->state) = ANALOG_IO_STATE_INITIALIZED;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
  }
  return (ANALOG_IO_STATUS_OK);
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop

08003124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <__NVIC_GetPriorityGrouping+0x18>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003130:	0a1b      	lsrs	r3, r3, #8
}
 8003132:	4618      	mov	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	2b00      	cmp	r3, #0
 8003150:	db0b      	blt.n	800316a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003152:	4908      	ldr	r1, [pc, #32]	; (8003174 <__NVIC_EnableIRQ+0x34>)
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	79fa      	ldrb	r2, [r7, #7]
 800315c:	f002 021f 	and.w	r2, r2, #31
 8003160:	2001      	movs	r0, #1
 8003162:	fa00 f202 	lsl.w	r2, r0, r2
 8003166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000e100 	.word	0xe000e100

08003178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	6039      	str	r1, [r7, #0]
 8003182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003188:	2b00      	cmp	r3, #0
 800318a:	db0a      	blt.n	80031a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318c:	490d      	ldr	r1, [pc, #52]	; (80031c4 <__NVIC_SetPriority+0x4c>)
 800318e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	0092      	lsls	r2, r2, #2
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	440b      	add	r3, r1
 800319c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80031a0:	e00a      	b.n	80031b8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a2:	4909      	ldr	r1, [pc, #36]	; (80031c8 <__NVIC_SetPriority+0x50>)
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	3b04      	subs	r3, #4
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	0092      	lsls	r2, r2, #2
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	440b      	add	r3, r1
 80031b6:	761a      	strb	r2, [r3, #24]
  }
}
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	e000e100 	.word	0xe000e100
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b089      	sub	sp, #36	; 0x24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f1c3 0307 	rsb	r3, r3, #7
 80031e6:	2b06      	cmp	r3, #6
 80031e8:	bf28      	it	cs
 80031ea:	2306      	movcs	r3, #6
 80031ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3306      	adds	r3, #6
 80031f2:	2b06      	cmp	r3, #6
 80031f4:	d902      	bls.n	80031fc <NVIC_EncodePriority+0x30>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	e000      	b.n	80031fe <NVIC_EncodePriority+0x32>
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2201      	movs	r2, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	1e5a      	subs	r2, r3, #1
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	401a      	ands	r2, r3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2101      	movs	r1, #1
 8003216:	fa01 f303 	lsl.w	r3, r1, r3
 800321a:	1e59      	subs	r1, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003220:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8003222:	4618      	mov	r0, r3
 8003224:	3724      	adds	r7, #36	; 0x24
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop

08003230 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800323e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop

08003254 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
                                                                    const uint32_t grp_num,
                                                                    const uint32_t ch_num)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	3260      	adds	r2, #96	; 0x60
 8003266:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2101      	movs	r1, #1
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	ea42 0103 	orr.w	r1, r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	3260      	adds	r2, #96	; 0x60
 800327c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop

0800328c <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6819      	ldr	r1, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	32a0      	adds	r2, #160	; 0xa0
 80032a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	7e1b      	ldrb	r3, [r3, #24]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	f040 80a7 	bne.w	8003410 <ADC_MEASUREMENT_Init+0x160>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fbbe 	bl	8002a48 <GLOBAL_ADC_Init>
 80032cc:	4603      	mov	r3, r0
 80032ce:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	4610      	mov	r0, r2
 80032dc:	6819      	ldr	r1, [r3, #0]
 80032de:	2200      	movs	r2, #0
 80032e0:	2300      	movs	r3, #0
 80032e2:	f7fe fcdd 	bl	8001ca0 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	f7fe fdf8 	bl	8001ee8 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 80032f8:	2300      	movs	r3, #0
 80032fa:	73fb      	strb	r3, [r7, #15]
 80032fc:	e03c      	b.n	8003378 <ADC_MEASUREMENT_Init+0xc8>
    {
      indexed = handle_ptr->array->channel_array[j];
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003308:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	7c5b      	ldrb	r3, [r3, #17]
 8003312:	4619      	mov	r1, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4610      	mov	r0, r2
 800331a:	461a      	mov	r2, r3
 800331c:	f7fe fe62 	bl	8001fe4 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	789b      	ldrb	r3, [r3, #2]
 800332a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800332e:	b2db      	uxtb	r3, r3
 8003330:	4619      	mov	r1, r3
                                indexed->res_handle);
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8003336:	4610      	mov	r0, r2
 8003338:	461a      	mov	r2, r3
 800333a:	f7ff ffa7 	bl	800328c <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	7c1b      	ldrb	r3, [r3, #16]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8003348:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	7c5b      	ldrb	r3, [r3, #17]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800334e:	4610      	mov	r0, r2
 8003350:	461a      	mov	r2, r3
 8003352:	f7ff ff7f 	bl	8003254 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);

#ifdef ADC_MEASUREMENT_ANALOG_IO_USED
      /* ANALOG_IO initialization for the channel*/
      if(indexed->analog_io_config != NULL)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <ADC_MEASUREMENT_Init+0xc2>
      {
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fec4 	bl	80030f0 <ANALOG_IO_Init>
 8003368:	4603      	mov	r3, r0
 800336a:	461a      	mov	r2, r3
 800336c:	7bbb      	ldrb	r3, [r7, #14]
 800336e:	4313      	orrs	r3, r2
 8003370:	73bb      	strb	r3, [r7, #14]
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	3301      	adds	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0bf      	beq.n	80032fe <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	7a1b      	ldrb	r3, [r3, #8]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d02c      	beq.n	80033e8 <ADC_MEASUREMENT_Init+0x138>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d028      	beq.n	80033e8 <ADC_MEASUREMENT_Init+0x138>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	b2dc      	uxtb	r4, r3
 800339e:	f7ff fec1 	bl	8003124 <__NVIC_GetPriorityGrouping>
 80033a2:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80033a8:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4608      	mov	r0, r1
 80033b2:	4611      	mov	r1, r2
 80033b4:	461a      	mov	r2, r3
 80033b6:	f7ff ff09 	bl	80031cc <NVIC_EncodePriority>
 80033ba:	4602      	mov	r2, r0
 80033bc:	b263      	sxtb	r3, r4
 80033be:	4618      	mov	r0, r3
 80033c0:	4611      	mov	r1, r2
 80033c2:	f7ff fed9 	bl	8003178 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	7e5b      	ldrb	r3, [r3, #25]
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	f7fe fcb8 	bl	8001d48 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	b25b      	sxtb	r3, r3
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff feac 	bl	8003140 <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <ADC_MEASUREMENT_Init+0x146>
    {
    	(handle_ptr->mux_config)();
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	7e9b      	ldrb	r3, [r3, #26]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <ADC_MEASUREMENT_Init+0x15a>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ff13 	bl	8003230 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	7bba      	ldrb	r2, [r7, #14]
 800340e:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	7e1b      	ldrb	r3, [r3, #24]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	bd90      	pop	{r4, r7, pc}

0800341c <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8003422:	2300      	movs	r3, #0
 8003424:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8003426:	4821      	ldr	r0, [pc, #132]	; (80034ac <DAVE_Init+0x90>)
 8003428:	f7ff fbfa 	bl	8002c20 <CLOCK_XMC4_Init>
 800342c:	4603      	mov	r3, r0
 800342e:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d104      	bne.n	8003440 <DAVE_Init+0x24>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_2 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_2); 
 8003436:	481e      	ldr	r0, [pc, #120]	; (80034b0 <DAVE_Init+0x94>)
 8003438:	f7ff fdc2 	bl	8002fc0 <CAN_NODE_Init>
 800343c:	4603      	mov	r3, r0
 800343e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003440:	79fb      	ldrb	r3, [r7, #7]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d104      	bne.n	8003450 <DAVE_Init+0x34>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_1 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_1); 
 8003446:	481b      	ldr	r0, [pc, #108]	; (80034b4 <DAVE_Init+0x98>)
 8003448:	f7ff fdba 	bl	8002fc0 <CAN_NODE_Init>
 800344c:	4603      	mov	r3, r0
 800344e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d104      	bne.n	8003460 <DAVE_Init+0x44>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 8003456:	4818      	ldr	r0, [pc, #96]	; (80034b8 <DAVE_Init+0x9c>)
 8003458:	f7fe fe98 	bl	800218c <UART_Init>
 800345c:	4603      	mov	r3, r0
 800345e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d104      	bne.n	8003470 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_1); 
 8003466:	4815      	ldr	r0, [pc, #84]	; (80034bc <DAVE_Init+0xa0>)
 8003468:	f7ff fb46 	bl	8002af8 <DIGITAL_IO_Init>
 800346c:	4603      	mov	r3, r0
 800346e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d104      	bne.n	8003480 <DAVE_Init+0x64>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 8003476:	4812      	ldr	r0, [pc, #72]	; (80034c0 <DAVE_Init+0xa4>)
 8003478:	f7ff f93e 	bl	80026f8 <TIMER_Init>
 800347c:	4603      	mov	r3, r0
 800347e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d104      	bne.n	8003490 <DAVE_Init+0x74>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
 8003486:	480f      	ldr	r0, [pc, #60]	; (80034c4 <DAVE_Init+0xa8>)
 8003488:	f7ff fa52 	bl	8002930 <INTERRUPT_Init>
 800348c:	4603      	mov	r3, r0
 800348e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d104      	bne.n	80034a0 <DAVE_Init+0x84>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
 8003496:	480c      	ldr	r0, [pc, #48]	; (80034c8 <DAVE_Init+0xac>)
 8003498:	f7ff ff0a 	bl	80032b0 <ADC_MEASUREMENT_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80034a0:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000420 	.word	0x20000420
 80034b0:	08004f68 	.word	0x08004f68
 80034b4:	08005084 	.word	0x08005084
 80034b8:	20000000 	.word	0x20000000
 80034bc:	08004e3c 	.word	0x08004e3c
 80034c0:	20000014 	.word	0x20000014
 80034c4:	08004dd0 	.word	0x08004dd0
 80034c8:	200003e4 	.word	0x200003e4

080034cc <CAN_1_Receive>:
	//TTC_LaunchControl
		uint8_t* p_brake_rear = 0;
		//uint8_t* LC_clutch_pos_des = 0;

void CAN_1_Receive()
	{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
	//LINK_1_boost_gear 0x10 LMO1
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_01_Config);
 80034d2:	48a7      	ldr	r0, [pc, #668]	; (8003770 <CAN_1_Receive+0x2a4>)
 80034d4:	f7ff fd50 	bl	8002f78 <CAN_NODE_MO_Receive>

	p_air_22 = &(CAN_1_LMO_01_Config.mo_ptr->can_data_byte[0]);
 80034d8:	4ba5      	ldr	r3, [pc, #660]	; (8003770 <CAN_1_Receive+0x2a4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3310      	adds	r3, #16
 80034de:	4aa5      	ldr	r2, [pc, #660]	; (8003774 <CAN_1_Receive+0x2a8>)
 80034e0:	6013      	str	r3, [r2, #0]
	n_engine = &(CAN_1_LMO_01_Config.mo_ptr->can_data_word[1]);
 80034e2:	4ba3      	ldr	r3, [pc, #652]	; (8003770 <CAN_1_Receive+0x2a4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3312      	adds	r3, #18
 80034e8:	4aa3      	ldr	r2, [pc, #652]	; (8003778 <CAN_1_Receive+0x2ac>)
 80034ea:	6013      	str	r3, [r2, #0]
	gear =  &(CAN_1_LMO_01_Config.mo_ptr->can_data_byte[4]); // ACHTUNG MOTOROLA und nur 5 bit NEU
 80034ec:	4ba0      	ldr	r3, [pc, #640]	; (8003770 <CAN_1_Receive+0x2a4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3314      	adds	r3, #20
 80034f2:	4aa2      	ldr	r2, [pc, #648]	; (800377c <CAN_1_Receive+0x2b0>)
 80034f4:	6013      	str	r3, [r2, #0]

	gear_1 = *gear >> 3;
 80034f6:	4ba1      	ldr	r3, [pc, #644]	; (800377c <CAN_1_Receive+0x2b0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	08db      	lsrs	r3, r3, #3
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	4b9f      	ldr	r3, [pc, #636]	; (8003780 <CAN_1_Receive+0x2b4>)
 8003502:	701a      	strb	r2, [r3, #0]
	ign_angle =  &(CAN_1_LMO_01_Config.mo_ptr->can_data[1]); //NEU
 8003504:	4b9a      	ldr	r3, [pc, #616]	; (8003770 <CAN_1_Receive+0x2a4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3314      	adds	r3, #20
 800350a:	4a9e      	ldr	r2, [pc, #632]	; (8003784 <CAN_1_Receive+0x2b8>)
 800350c:	6013      	str	r3, [r2, #0]
	ign_angle_1 = getbits(*ign_angle,23,16);
 800350e:	4b9d      	ldr	r3, [pc, #628]	; (8003784 <CAN_1_Receive+0x2b8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	2117      	movs	r1, #23
 8003518:	2210      	movs	r2, #16
 800351a:	f001 fb49 	bl	8004bb0 <getbits>
 800351e:	4603      	mov	r3, r0
 8003520:	b29a      	uxth	r2, r3
 8003522:	4b99      	ldr	r3, [pc, #612]	; (8003788 <CAN_1_Receive+0x2bc>)
 8003524:	801a      	strh	r2, [r3, #0]


	//STW 0x08 LM02
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_02_Config);
 8003526:	4899      	ldr	r0, [pc, #612]	; (800378c <CAN_1_Receive+0x2c0>)
 8003528:	f7ff fd26 	bl	8002f78 <CAN_NODE_MO_Receive>

	uint8_t* temp= &(CAN_1_LMO_02_Config.mo_ptr->can_data[0]);
 800352c:	4b97      	ldr	r3, [pc, #604]	; (800378c <CAN_1_Receive+0x2c0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3310      	adds	r3, #16
 8003532:	607b      	str	r3, [r7, #4]
	shift_up=temp&&0x01;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf14      	ite	ne
 800353a:	2301      	movne	r3, #1
 800353c:	2300      	moveq	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	461a      	mov	r2, r3
 8003542:	4b93      	ldr	r3, [pc, #588]	; (8003790 <CAN_1_Receive+0x2c4>)
 8003544:	701a      	strb	r2, [r3, #0]
	shift_down=temp&&0x02;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	bf14      	ite	ne
 800354c:	2301      	movne	r3, #1
 800354e:	2300      	moveq	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	461a      	mov	r2, r3
 8003554:	4b8f      	ldr	r3, [pc, #572]	; (8003794 <CAN_1_Receive+0x2c8>)
 8003556:	701a      	strb	r2, [r3, #0]
	eng_map=temp&&0x04;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	bf14      	ite	ne
 800355e:	2301      	movne	r3, #1
 8003560:	2300      	moveq	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	4b8c      	ldr	r3, [pc, #560]	; (8003798 <CAN_1_Receive+0x2cc>)
 8003568:	701a      	strb	r2, [r3, #0]


	//CAN Module Measurement 0x7E1 LM03
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_03_Config);
 800356a:	488c      	ldr	r0, [pc, #560]	; (800379c <CAN_1_Receive+0x2d0>)
 800356c:	f7ff fd04 	bl	8002f78 <CAN_NODE_MO_Receive>
	p_pneu = &(CAN_1_LMO_03_Config.mo_ptr->can_data_byte[0]);
 8003570:	4b8a      	ldr	r3, [pc, #552]	; (800379c <CAN_1_Receive+0x2d0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3310      	adds	r3, #16
 8003576:	4a8a      	ldr	r2, [pc, #552]	; (80037a0 <CAN_1_Receive+0x2d4>)
 8003578:	6013      	str	r3, [r2, #0]
	x_RH_RL= &(CAN_1_LMO_03_Config.mo_ptr->can_data_byte[1]);
 800357a:	4b88      	ldr	r3, [pc, #544]	; (800379c <CAN_1_Receive+0x2d0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3311      	adds	r3, #17
 8003580:	4a88      	ldr	r2, [pc, #544]	; (80037a4 <CAN_1_Receive+0x2d8>)
 8003582:	6013      	str	r3, [r2, #0]
	x_RH_RR= &(CAN_1_LMO_03_Config.mo_ptr->can_data_byte[2]);
 8003584:	4b85      	ldr	r3, [pc, #532]	; (800379c <CAN_1_Receive+0x2d0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3312      	adds	r3, #18
 800358a:	4a87      	ldr	r2, [pc, #540]	; (80037a8 <CAN_1_Receive+0x2dc>)
 800358c:	6013      	str	r3, [r2, #0]
	t_oil_gb= &(CAN_1_LMO_03_Config.mo_ptr->can_data_byte[5]);
 800358e:	4b83      	ldr	r3, [pc, #524]	; (800379c <CAN_1_Receive+0x2d0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3315      	adds	r3, #21
 8003594:	4a85      	ldr	r2, [pc, #532]	; (80037ac <CAN_1_Receive+0x2e0>)
 8003596:	6013      	str	r3, [r2, #0]
	t_canmod=&(CAN_1_LMO_03_Config.mo_ptr->can_data_byte[6]);
 8003598:	4b80      	ldr	r3, [pc, #512]	; (800379c <CAN_1_Receive+0x2d0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3316      	adds	r3, #22
 800359e:	4a84      	ldr	r2, [pc, #528]	; (80037b0 <CAN_1_Receive+0x2e4>)
 80035a0:	6013      	str	r3, [r2, #0]




	//0x771 Link press temp LMO4
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_04_Config);
 80035a2:	4884      	ldr	r0, [pc, #528]	; (80037b4 <CAN_1_Receive+0x2e8>)
 80035a4:	f7ff fce8 	bl	8002f78 <CAN_NODE_MO_Receive>

	p_oil = &(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0]);
 80035a8:	4b82      	ldr	r3, [pc, #520]	; (80037b4 <CAN_1_Receive+0x2e8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3310      	adds	r3, #16
 80035ae:	4a82      	ldr	r2, [pc, #520]	; (80037b8 <CAN_1_Receive+0x2ec>)
 80035b0:	6013      	str	r3, [r2, #0]
	p_fuel_rail =  &(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[1]);
 80035b2:	4b80      	ldr	r3, [pc, #512]	; (80037b4 <CAN_1_Receive+0x2e8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3311      	adds	r3, #17
 80035b8:	4a80      	ldr	r2, [pc, #512]	; (80037bc <CAN_1_Receive+0x2f0>)
 80035ba:	6013      	str	r3, [r2, #0]
	a_ath = &(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[2]); //x_throttleValve
 80035bc:	4b7d      	ldr	r3, [pc, #500]	; (80037b4 <CAN_1_Receive+0x2e8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3312      	adds	r3, #18
 80035c2:	4a7f      	ldr	r2, [pc, #508]	; (80037c0 <CAN_1_Receive+0x2f4>)
 80035c4:	6013      	str	r3, [r2, #0]
	t_water_engine = &(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[3]);
 80035c6:	4b7b      	ldr	r3, [pc, #492]	; (80037b4 <CAN_1_Receive+0x2e8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3313      	adds	r3, #19
 80035cc:	4a7d      	ldr	r2, [pc, #500]	; (80037c4 <CAN_1_Receive+0x2f8>)
 80035ce:	6013      	str	r3, [r2, #0]
	t_air_22 = &(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[4]);
 80035d0:	4b78      	ldr	r3, [pc, #480]	; (80037b4 <CAN_1_Receive+0x2e8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3314      	adds	r3, #20
 80035d6:	4a7c      	ldr	r2, [pc, #496]	; (80037c8 <CAN_1_Receive+0x2fc>)
 80035d8:	6013      	str	r3, [r2, #0]
	t_oil_engine =  &(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[5]);
 80035da:	4b76      	ldr	r3, [pc, #472]	; (80037b4 <CAN_1_Receive+0x2e8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3315      	adds	r3, #21
 80035e0:	4a7a      	ldr	r2, [pc, #488]	; (80037cc <CAN_1_Receive+0x300>)
 80035e2:	6013      	str	r3, [r2, #0]


	//LIMK_LAMBDA 0x772 LMO5

	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_05_Config);
 80035e4:	487a      	ldr	r0, [pc, #488]	; (80037d0 <CAN_1_Receive+0x304>)
 80035e6:	f7ff fcc7 	bl	8002f78 <CAN_NODE_MO_Receive>

	lambda1 = &(CAN_1_LMO_05_Config.mo_ptr->can_data[0]);
 80035ea:	4b79      	ldr	r3, [pc, #484]	; (80037d0 <CAN_1_Receive+0x304>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3310      	adds	r3, #16
 80035f0:	4a78      	ldr	r2, [pc, #480]	; (80037d4 <CAN_1_Receive+0x308>)
 80035f2:	6013      	str	r3, [r2, #0]
	lambda = getbits(*lambda1,23,16);
 80035f4:	4b77      	ldr	r3, [pc, #476]	; (80037d4 <CAN_1_Receive+0x308>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	2117      	movs	r1, #23
 80035fe:	2210      	movs	r2, #16
 8003600:	f001 fad6 	bl	8004bb0 <getbits>
 8003604:	4603      	mov	r3, r0
 8003606:	b29a      	uxth	r2, r3
 8003608:	4b73      	ldr	r3, [pc, #460]	; (80037d8 <CAN_1_Receive+0x30c>)
 800360a:	801a      	strh	r2, [r3, #0]
	trigger_error= &(CAN_1_LMO_05_Config.mo_ptr->can_data_byte[6]); //NEU
 800360c:	4b70      	ldr	r3, [pc, #448]	; (80037d0 <CAN_1_Receive+0x304>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3316      	adds	r3, #22
 8003612:	4a72      	ldr	r2, [pc, #456]	; (80037dc <CAN_1_Receive+0x310>)
 8003614:	6013      	str	r3, [r2, #0]

	//VCU_LaunchControl LMO6
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_06_Config);
 8003616:	4872      	ldr	r0, [pc, #456]	; (80037e0 <CAN_1_Receive+0x314>)
 8003618:	f7ff fcae 	bl	8002f78 <CAN_NODE_MO_Receive>

	p_brake_rear = &(CAN_1_LMO_06_Config.mo_ptr->can_data_byte[0]);
 800361c:	4b70      	ldr	r3, [pc, #448]	; (80037e0 <CAN_1_Receive+0x314>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3310      	adds	r3, #16
 8003622:	4a70      	ldr	r2, [pc, #448]	; (80037e4 <CAN_1_Receive+0x318>)
 8003624:	6013      	str	r3, [r2, #0]
	//LC_clutch_pos_des = &(CAN_1_LMO_06_Config.mo_ptr->can_data_byte[2]);

//######################################################################
//################ calculation and write to struct #####################
	//LMO1
	carData.p_air_22 =(float)*p_air_22*0.01f;
 8003626:	4b53      	ldr	r3, [pc, #332]	; (8003774 <CAN_1_Receive+0x2a8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	ee07 3a90 	vmov	s15, r3
 8003630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003634:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80037e8 <CAN_1_Receive+0x31c>
 8003638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800363c:	4b6b      	ldr	r3, [pc, #428]	; (80037ec <CAN_1_Receive+0x320>)
 800363e:	ee17 2a90 	vmov	r2, s15
 8003642:	605a      	str	r2, [r3, #4]
	carData.n_engine =*n_engine;
 8003644:	4b4c      	ldr	r3, [pc, #304]	; (8003778 <CAN_1_Receive+0x2ac>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	881a      	ldrh	r2, [r3, #0]
 800364a:	4b68      	ldr	r3, [pc, #416]	; (80037ec <CAN_1_Receive+0x320>)
 800364c:	805a      	strh	r2, [r3, #2]
	carData.gear = gear_1;
 800364e:	4b4c      	ldr	r3, [pc, #304]	; (8003780 <CAN_1_Receive+0x2b4>)
 8003650:	781a      	ldrb	r2, [r3, #0]
 8003652:	4b66      	ldr	r3, [pc, #408]	; (80037ec <CAN_1_Receive+0x320>)
 8003654:	721a      	strb	r2, [r3, #8]
	carData.ign_angle =(((float)ign_angle_1*0.1f)-100);
 8003656:	4b4c      	ldr	r3, [pc, #304]	; (8003788 <CAN_1_Receive+0x2bc>)
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003662:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80037f0 <CAN_1_Receive+0x324>
 8003666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800366a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80037f4 <CAN_1_Receive+0x328>
 800366e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003672:	4b5e      	ldr	r3, [pc, #376]	; (80037ec <CAN_1_Receive+0x320>)
 8003674:	3309      	adds	r3, #9
 8003676:	ee17 2a90 	vmov	r2, s15
 800367a:	601a      	str	r2, [r3, #0]


	//LM02
	carData.shift_up = shift_up;
 800367c:	4b44      	ldr	r3, [pc, #272]	; (8003790 <CAN_1_Receive+0x2c4>)
 800367e:	781a      	ldrb	r2, [r3, #0]
 8003680:	4b5a      	ldr	r3, [pc, #360]	; (80037ec <CAN_1_Receive+0x320>)
 8003682:	735a      	strb	r2, [r3, #13]
	carData.shift_down = shift_down;
 8003684:	4b43      	ldr	r3, [pc, #268]	; (8003794 <CAN_1_Receive+0x2c8>)
 8003686:	781a      	ldrb	r2, [r3, #0]
 8003688:	4b58      	ldr	r3, [pc, #352]	; (80037ec <CAN_1_Receive+0x320>)
 800368a:	739a      	strb	r2, [r3, #14]
	carData.eng_map = eng_map;
 800368c:	4b42      	ldr	r3, [pc, #264]	; (8003798 <CAN_1_Receive+0x2cc>)
 800368e:	781a      	ldrb	r2, [r3, #0]
 8003690:	4b56      	ldr	r3, [pc, #344]	; (80037ec <CAN_1_Receive+0x320>)
 8003692:	73da      	strb	r2, [r3, #15]

	//LM03
	carData.p_pneu = (float)*p_pneu*0.04f;
 8003694:	4b42      	ldr	r3, [pc, #264]	; (80037a0 <CAN_1_Receive+0x2d4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	ee07 3a90 	vmov	s15, r3
 800369e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80037f8 <CAN_1_Receive+0x32c>
 80036a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036aa:	4b50      	ldr	r3, [pc, #320]	; (80037ec <CAN_1_Receive+0x320>)
 80036ac:	ee17 2a90 	vmov	r2, s15
 80036b0:	611a      	str	r2, [r3, #16]
	carData.x_RH_RL = (float)*x_RH_RL*0.5f;
 80036b2:	4b3c      	ldr	r3, [pc, #240]	; (80037a4 <CAN_1_Receive+0x2d8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	ee07 3a90 	vmov	s15, r3
 80036bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 80036c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036c8:	4b48      	ldr	r3, [pc, #288]	; (80037ec <CAN_1_Receive+0x320>)
 80036ca:	ee17 2a90 	vmov	r2, s15
 80036ce:	615a      	str	r2, [r3, #20]
	carData.x_RH_RR = (float)*x_RH_RR*0.5f;
 80036d0:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <CAN_1_Receive+0x2dc>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 80036e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036e6:	4b41      	ldr	r3, [pc, #260]	; (80037ec <CAN_1_Receive+0x320>)
 80036e8:	ee17 2a90 	vmov	r2, s15
 80036ec:	619a      	str	r2, [r3, #24]
	carData.t_oil_gb = *t_oil_gb;
 80036ee:	4b2f      	ldr	r3, [pc, #188]	; (80037ac <CAN_1_Receive+0x2e0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	781a      	ldrb	r2, [r3, #0]
 80036f4:	4b3d      	ldr	r3, [pc, #244]	; (80037ec <CAN_1_Receive+0x320>)
 80036f6:	771a      	strb	r2, [r3, #28]
	carData.t_canmod = *t_canmod;
 80036f8:	4b2d      	ldr	r3, [pc, #180]	; (80037b0 <CAN_1_Receive+0x2e4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	781a      	ldrb	r2, [r3, #0]
 80036fe:	4b3b      	ldr	r3, [pc, #236]	; (80037ec <CAN_1_Receive+0x320>)
 8003700:	775a      	strb	r2, [r3, #29]

	//LMO4
	carData.p_oil =(float)*p_oil*0.032f;
 8003702:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <CAN_1_Receive+0x2ec>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	ee07 3a90 	vmov	s15, r3
 800370c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003710:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80037fc <CAN_1_Receive+0x330>
 8003714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003718:	4b34      	ldr	r3, [pc, #208]	; (80037ec <CAN_1_Receive+0x320>)
 800371a:	331e      	adds	r3, #30
 800371c:	ee17 2a90 	vmov	r2, s15
 8003720:	601a      	str	r2, [r3, #0]
	carData.p_fuel_rail =(float)*p_fuel_rail*0.032f;
 8003722:	4b26      	ldr	r3, [pc, #152]	; (80037bc <CAN_1_Receive+0x2f0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	ee07 3a90 	vmov	s15, r3
 800372c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003730:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80037fc <CAN_1_Receive+0x330>
 8003734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003738:	4b2c      	ldr	r3, [pc, #176]	; (80037ec <CAN_1_Receive+0x320>)
 800373a:	3322      	adds	r3, #34	; 0x22
 800373c:	ee17 2a90 	vmov	r2, s15
 8003740:	601a      	str	r2, [r3, #0]
	carData.x_throttle_valve =(float)*a_ath*0.4f;
 8003742:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <CAN_1_Receive+0x2f4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	ee07 3a90 	vmov	s15, r3
 800374c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003750:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003800 <CAN_1_Receive+0x334>
 8003754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003758:	4b24      	ldr	r3, [pc, #144]	; (80037ec <CAN_1_Receive+0x320>)
 800375a:	3326      	adds	r3, #38	; 0x26
 800375c:	ee17 2a90 	vmov	r2, s15
 8003760:	601a      	str	r2, [r3, #0]
	carData.t_water_engine =*t_water_engine-50;
 8003762:	4b18      	ldr	r3, [pc, #96]	; (80037c4 <CAN_1_Receive+0x2f8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b32      	subs	r3, #50	; 0x32
 800376c:	e04a      	b.n	8003804 <CAN_1_Receive+0x338>
 800376e:	bf00      	nop
 8003770:	0800503c 	.word	0x0800503c
 8003774:	2000042c 	.word	0x2000042c
 8003778:	20000430 	.word	0x20000430
 800377c:	20000434 	.word	0x20000434
 8003780:	20000438 	.word	0x20000438
 8003784:	2000043c 	.word	0x2000043c
 8003788:	20000440 	.word	0x20000440
 800378c:	08005048 	.word	0x08005048
 8003790:	20000442 	.word	0x20000442
 8003794:	20000443 	.word	0x20000443
 8003798:	20000444 	.word	0x20000444
 800379c:	08005054 	.word	0x08005054
 80037a0:	20000448 	.word	0x20000448
 80037a4:	2000044c 	.word	0x2000044c
 80037a8:	20000450 	.word	0x20000450
 80037ac:	20000454 	.word	0x20000454
 80037b0:	20000458 	.word	0x20000458
 80037b4:	08005060 	.word	0x08005060
 80037b8:	2000045c 	.word	0x2000045c
 80037bc:	20000460 	.word	0x20000460
 80037c0:	20000464 	.word	0x20000464
 80037c4:	20000468 	.word	0x20000468
 80037c8:	2000046c 	.word	0x2000046c
 80037cc:	20000470 	.word	0x20000470
 80037d0:	0800506c 	.word	0x0800506c
 80037d4:	20000474 	.word	0x20000474
 80037d8:	20000478 	.word	0x20000478
 80037dc:	2000047c 	.word	0x2000047c
 80037e0:	08005078 	.word	0x08005078
 80037e4:	20000480 	.word	0x20000480
 80037e8:	3c23d70a 	.word	0x3c23d70a
 80037ec:	20000618 	.word	0x20000618
 80037f0:	3dcccccd 	.word	0x3dcccccd
 80037f4:	42c80000 	.word	0x42c80000
 80037f8:	3d23d70a 	.word	0x3d23d70a
 80037fc:	3d03126f 	.word	0x3d03126f
 8003800:	3ecccccd 	.word	0x3ecccccd
 8003804:	b29a      	uxth	r2, r3
 8003806:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <CAN_1_Receive+0x3a4>)
 8003808:	855a      	strh	r2, [r3, #42]	; 0x2a
	carData.t_air_22 = *t_air_22-50;
 800380a:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <CAN_1_Receive+0x3a8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b32      	subs	r3, #50	; 0x32
 8003814:	b29a      	uxth	r2, r3
 8003816:	4b16      	ldr	r3, [pc, #88]	; (8003870 <CAN_1_Receive+0x3a4>)
 8003818:	859a      	strh	r2, [r3, #44]	; 0x2c
	carData.t_oil_engine = *t_oil_engine-50;
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <CAN_1_Receive+0x3ac>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b32      	subs	r3, #50	; 0x32
 8003824:	b29a      	uxth	r2, r3
 8003826:	4b12      	ldr	r3, [pc, #72]	; (8003870 <CAN_1_Receive+0x3a4>)
 8003828:	85da      	strh	r2, [r3, #46]	; 0x2e

	//LMO5
	carData.lambda = (float)lambda * 0.001f;
 800382a:	4b14      	ldr	r3, [pc, #80]	; (800387c <CAN_1_Receive+0x3b0>)
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	ee07 3a90 	vmov	s15, r3
 8003832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003836:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003880 <CAN_1_Receive+0x3b4>
 800383a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800383e:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <CAN_1_Receive+0x3a4>)
 8003840:	ee17 2a90 	vmov	r2, s15
 8003844:	631a      	str	r2, [r3, #48]	; 0x30
	carData.trigger_error = *trigger_error;
 8003846:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <CAN_1_Receive+0x3b8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	781a      	ldrb	r2, [r3, #0]
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <CAN_1_Receive+0x3a4>)
 800384e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	//LMO6
	carData.p_brake_rear = (float)*p_brake_rear;
 8003852:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <CAN_1_Receive+0x3bc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	ee07 3a90 	vmov	s15, r3
 800385c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <CAN_1_Receive+0x3a4>)
 8003862:	3335      	adds	r3, #53	; 0x35
 8003864:	ee17 2a90 	vmov	r2, s15
 8003868:	601a      	str	r2, [r3, #0]
	//carData.LC_clutch_pos_des = 44;// (float)*LC_clutch_pos_des*10;

	//CAN_NODE_MO_Transmit(&CAN_1_LMO_07_Config);
}
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000618 	.word	0x20000618
 8003874:	2000046c 	.word	0x2000046c
 8003878:	20000470 	.word	0x20000470
 800387c:	20000478 	.word	0x20000478
 8003880:	3a83126f 	.word	0x3a83126f
 8003884:	2000047c 	.word	0x2000047c
 8003888:	20000480 	.word	0x20000480

0800388c <CAN_2_Receive>:
	uint16_t t_tyre_RR_6=0;
	uint16_t t_tyre_RR_7=0;
	uint16_t t_tyre_RR_8=0;


void CAN_2_Receive(){
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0

	// 0x7E2 LMO_01
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_01_Config);
 8003892:	4893      	ldr	r0, [pc, #588]	; (8003ae0 <CAN_2_Receive+0x254>)
 8003894:	f7ff fb82 	bl	8002f9c <CAN_NODE_MO_ReceiveData>


	//0x520 LMO_02
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_02_Config);
 8003898:	4892      	ldr	r0, [pc, #584]	; (8003ae4 <CAN_2_Receive+0x258>)
 800389a:	f7ff fb7f 	bl	8002f9c <CAN_NODE_MO_ReceiveData>

	i_tot = &(CAN_2_LMO_02_Config.mo_ptr->can_data_byte[5]);
 800389e:	4b91      	ldr	r3, [pc, #580]	; (8003ae4 <CAN_2_Receive+0x258>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3315      	adds	r3, #21
 80038a4:	4a90      	ldr	r2, [pc, #576]	; (8003ae8 <CAN_2_Receive+0x25c>)
 80038a6:	6013      	str	r3, [r2, #0]
	//AY = &(CAN_2_LMO_02_Config.mo_ptr->can_data_word[2]);
	//AY = getbits(*AY1,31,16);

	//0x521 LMO_03
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_03_Config);
 80038a8:	4890      	ldr	r0, [pc, #576]	; (8003aec <CAN_2_Receive+0x260>)
 80038aa:	f7ff fb77 	bl	8002f9c <CAN_NODE_MO_ReceiveData>
	t_pcm = &(CAN_2_LMO_03_Config.mo_ptr->can_data_byte[5]);
 80038ae:	4b8f      	ldr	r3, [pc, #572]	; (8003aec <CAN_2_Receive+0x260>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3315      	adds	r3, #21
 80038b4:	4a8e      	ldr	r2, [pc, #568]	; (8003af0 <CAN_2_Receive+0x264>)
 80038b6:	6013      	str	r3, [r2, #0]
	//AX = getbits(*AY1,31,16);

	//0x7DF LMO_04
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_04_Config);
 80038b8:	488e      	ldr	r0, [pc, #568]	; (8003af4 <CAN_2_Receive+0x268>)
 80038ba:	f7ff fb6f 	bl	8002f9c <CAN_NODE_MO_ReceiveData>
	//x_dp_RL += &(CAN_2_LMO_04_Config.mo_ptr->can_data_byte[4]);
	//x_dp_RR = &(CAN_2_LMO_04_Config.mo_ptr->can_data_byte[7]<<8);
	//x_dp_RR += &(CAN_2_LMO_04_Config.mo_ptr->can_data_byte[6]);

	//0x7E0 LMO_05
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_05_Config);
 80038be:	488e      	ldr	r0, [pc, #568]	; (8003af8 <CAN_2_Receive+0x26c>)
 80038c0:	f7ff fb6c 	bl	8002f9c <CAN_NODE_MO_ReceiveData>
	//f_fl += &(CAN_2_LMO_05_Config.mo_ptr->can_data_byte[0]);
	//f_fr = &(CAN_2_LMO_05_Config.mo_ptr->can_data_byte[3]<<8);
	//f_fr += &(CAN_2_LMO_05_Config.mo_ptr->can_data_byte[2]);

	//0x7E2 LMO_06
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_06_Config);
 80038c4:	488d      	ldr	r0, [pc, #564]	; (8003afc <CAN_2_Receive+0x270>)
 80038c6:	f7ff fb69 	bl	8002f9c <CAN_NODE_MO_ReceiveData>
	t_VCU = &(CAN_2_LMO_06_Config.mo_ptr->can_data_byte[1]);
 80038ca:	4b8c      	ldr	r3, [pc, #560]	; (8003afc <CAN_2_Receive+0x270>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3311      	adds	r3, #17
 80038d0:	4a8b      	ldr	r2, [pc, #556]	; (8003b00 <CAN_2_Receive+0x274>)
 80038d2:	6013      	str	r3, [r2, #0]
	x_RH_F = &(CAN_2_LMO_06_Config.mo_ptr->can_data_byte[2]);
 80038d4:	4b89      	ldr	r3, [pc, #548]	; (8003afc <CAN_2_Receive+0x270>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3312      	adds	r3, #18
 80038da:	4a8a      	ldr	r2, [pc, #552]	; (8003b04 <CAN_2_Receive+0x278>)
 80038dc:	6013      	str	r3, [r2, #0]
	x_clutch = &(CAN_2_LMO_06_Config.mo_ptr->can_data_byte[3]);
 80038de:	4b87      	ldr	r3, [pc, #540]	; (8003afc <CAN_2_Receive+0x270>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3313      	adds	r3, #19
 80038e4:	4a88      	ldr	r2, [pc, #544]	; (8003b08 <CAN_2_Receive+0x27c>)
 80038e6:	6013      	str	r3, [r2, #0]
	x_clutch_STW = &(CAN_2_LMO_06_Config.mo_ptr->can_data_byte[4]);
 80038e8:	4b84      	ldr	r3, [pc, #528]	; (8003afc <CAN_2_Receive+0x270>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3314      	adds	r3, #20
 80038ee:	4a87      	ldr	r2, [pc, #540]	; (8003b0c <CAN_2_Receive+0x280>)
 80038f0:	6013      	str	r3, [r2, #0]
	u_bat = &(CAN_2_LMO_06_Config.mo_ptr->can_data_byte[6]);
 80038f2:	4b82      	ldr	r3, [pc, #520]	; (8003afc <CAN_2_Receive+0x270>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3316      	adds	r3, #22
 80038f8:	4a85      	ldr	r2, [pc, #532]	; (8003b10 <CAN_2_Receive+0x284>)
 80038fa:	6013      	str	r3, [r2, #0]

	//0x24A LMO_07
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_07_Config);
 80038fc:	4885      	ldr	r0, [pc, #532]	; (8003b14 <CAN_2_Receive+0x288>)
 80038fe:	f7ff fb4d 	bl	8002f9c <CAN_NODE_MO_ReceiveData>
	n_wheel_FL = &(CAN_2_LMO_07_Config.mo_ptr->can_data_word[0]);
 8003902:	4b84      	ldr	r3, [pc, #528]	; (8003b14 <CAN_2_Receive+0x288>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3310      	adds	r3, #16
 8003908:	4a83      	ldr	r2, [pc, #524]	; (8003b18 <CAN_2_Receive+0x28c>)
 800390a:	6013      	str	r3, [r2, #0]
	n_wheel_FR = &(CAN_2_LMO_07_Config.mo_ptr->can_data_word[1]);
 800390c:	4b81      	ldr	r3, [pc, #516]	; (8003b14 <CAN_2_Receive+0x288>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3312      	adds	r3, #18
 8003912:	4a82      	ldr	r2, [pc, #520]	; (8003b1c <CAN_2_Receive+0x290>)
 8003914:	6013      	str	r3, [r2, #0]
	n_wheel_RL = &(CAN_2_LMO_07_Config.mo_ptr->can_data_word[2]);
 8003916:	4b7f      	ldr	r3, [pc, #508]	; (8003b14 <CAN_2_Receive+0x288>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3314      	adds	r3, #20
 800391c:	4a80      	ldr	r2, [pc, #512]	; (8003b20 <CAN_2_Receive+0x294>)
 800391e:	6013      	str	r3, [r2, #0]
	n_wheel_RR = &(CAN_2_LMO_07_Config.mo_ptr->can_data_word[3]);
 8003920:	4b7c      	ldr	r3, [pc, #496]	; (8003b14 <CAN_2_Receive+0x288>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3316      	adds	r3, #22
 8003926:	4a7f      	ldr	r2, [pc, #508]	; (8003b24 <CAN_2_Receive+0x298>)
 8003928:	6013      	str	r3, [r2, #0]

	//0x5C0 LMO_08
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_08_Config);
 800392a:	487f      	ldr	r0, [pc, #508]	; (8003b28 <CAN_2_Receive+0x29c>)
 800392c:	f7ff fb36 	bl	8002f9c <CAN_NODE_MO_ReceiveData>
	//p_brake_front = &(CAN_2_LMO_08_Config.mo_ptr->can_data_byte[1]<<8);
	//p_brake_front += &(CAN_2_LMO_08_Config.mo_ptr->can_data_byte[0]);

	//0x70 LMO_09
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_09_Config);
 8003930:	487e      	ldr	r0, [pc, #504]	; (8003b2c <CAN_2_Receive+0x2a0>)
 8003932:	f7ff fb33 	bl	8002f9c <CAN_NODE_MO_ReceiveData>
	AY = &(CAN_2_LMO_09_Config.mo_ptr->can_data_word[2]);
 8003936:	4b7d      	ldr	r3, [pc, #500]	; (8003b2c <CAN_2_Receive+0x2a0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3314      	adds	r3, #20
 800393c:	4a7c      	ldr	r2, [pc, #496]	; (8003b30 <CAN_2_Receive+0x2a4>)
 800393e:	6013      	str	r3, [r2, #0]

	//0x80 LMO_10
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_10_Config);
 8003940:	487c      	ldr	r0, [pc, #496]	; (8003b34 <CAN_2_Receive+0x2a8>)
 8003942:	f7ff fb2b 	bl	8002f9c <CAN_NODE_MO_ReceiveData>
	AX = &(CAN_2_LMO_10_Config.mo_ptr->can_data_word[2]);
 8003946:	4b7b      	ldr	r3, [pc, #492]	; (8003b34 <CAN_2_Receive+0x2a8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3314      	adds	r3, #20
 800394c:	4a7a      	ldr	r2, [pc, #488]	; (8003b38 <CAN_2_Receive+0x2ac>)
 800394e:	6013      	str	r3, [r2, #0]

	//0x4B0 t_tyre_FL
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_11_Config);
 8003950:	487a      	ldr	r0, [pc, #488]	; (8003b3c <CAN_2_Receive+0x2b0>)
 8003952:	f7ff fb23 	bl	8002f9c <CAN_NODE_MO_ReceiveData>
	 t_tyre_FL_1_MSB =  &(CAN_2_LMO_11_Config.mo_ptr->can_data_byte[0]);
 8003956:	4b79      	ldr	r3, [pc, #484]	; (8003b3c <CAN_2_Receive+0x2b0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3310      	adds	r3, #16
 800395c:	4a78      	ldr	r2, [pc, #480]	; (8003b40 <CAN_2_Receive+0x2b4>)
 800395e:	6013      	str	r3, [r2, #0]
	 t_tyre_FL_1_LSB =  &(CAN_2_LMO_11_Config.mo_ptr->can_data_byte[1]);
 8003960:	4b76      	ldr	r3, [pc, #472]	; (8003b3c <CAN_2_Receive+0x2b0>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3311      	adds	r3, #17
 8003966:	4a77      	ldr	r2, [pc, #476]	; (8003b44 <CAN_2_Receive+0x2b8>)
 8003968:	6013      	str	r3, [r2, #0]
	 t_tyre_FL_2_MSB=  &(CAN_2_LMO_11_Config.mo_ptr->can_data_byte[2]);
 800396a:	4b74      	ldr	r3, [pc, #464]	; (8003b3c <CAN_2_Receive+0x2b0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3312      	adds	r3, #18
 8003970:	4a75      	ldr	r2, [pc, #468]	; (8003b48 <CAN_2_Receive+0x2bc>)
 8003972:	6013      	str	r3, [r2, #0]
	 t_tyre_FL_2_LSB =  &(CAN_2_LMO_11_Config.mo_ptr->can_data_byte[3]);
 8003974:	4b71      	ldr	r3, [pc, #452]	; (8003b3c <CAN_2_Receive+0x2b0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3313      	adds	r3, #19
 800397a:	4a74      	ldr	r2, [pc, #464]	; (8003b4c <CAN_2_Receive+0x2c0>)
 800397c:	6013      	str	r3, [r2, #0]
	 t_tyre_FL_3_MSB =  &(CAN_2_LMO_11_Config.mo_ptr->can_data_byte[4]);
 800397e:	4b6f      	ldr	r3, [pc, #444]	; (8003b3c <CAN_2_Receive+0x2b0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3314      	adds	r3, #20
 8003984:	4a72      	ldr	r2, [pc, #456]	; (8003b50 <CAN_2_Receive+0x2c4>)
 8003986:	6013      	str	r3, [r2, #0]
	 t_tyre_FL_3_LSB =  &(CAN_2_LMO_11_Config.mo_ptr->can_data_byte[5]);
 8003988:	4b6c      	ldr	r3, [pc, #432]	; (8003b3c <CAN_2_Receive+0x2b0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3315      	adds	r3, #21
 800398e:	4a71      	ldr	r2, [pc, #452]	; (8003b54 <CAN_2_Receive+0x2c8>)
 8003990:	6013      	str	r3, [r2, #0]
	 t_tyre_FL_4_MSB =  &(CAN_2_LMO_11_Config.mo_ptr->can_data_byte[6]);
 8003992:	4b6a      	ldr	r3, [pc, #424]	; (8003b3c <CAN_2_Receive+0x2b0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3316      	adds	r3, #22
 8003998:	4a6f      	ldr	r2, [pc, #444]	; (8003b58 <CAN_2_Receive+0x2cc>)
 800399a:	6013      	str	r3, [r2, #0]
	 t_tyre_FL_4_LSB =  &(CAN_2_LMO_11_Config.mo_ptr->can_data_byte[7]);
 800399c:	4b67      	ldr	r3, [pc, #412]	; (8003b3c <CAN_2_Receive+0x2b0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3317      	adds	r3, #23
 80039a2:	4a6e      	ldr	r2, [pc, #440]	; (8003b5c <CAN_2_Receive+0x2d0>)
 80039a4:	6013      	str	r3, [r2, #0]
	//0x4B1 t_tyre_FL
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_12_Config);
 80039a6:	486e      	ldr	r0, [pc, #440]	; (8003b60 <CAN_2_Receive+0x2d4>)
 80039a8:	f7ff faf8 	bl	8002f9c <CAN_NODE_MO_ReceiveData>
	 t_tyre_FL_5_MSB =  &(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[0]);
 80039ac:	4b6c      	ldr	r3, [pc, #432]	; (8003b60 <CAN_2_Receive+0x2d4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3310      	adds	r3, #16
 80039b2:	4a6c      	ldr	r2, [pc, #432]	; (8003b64 <CAN_2_Receive+0x2d8>)
 80039b4:	6013      	str	r3, [r2, #0]
	 t_tyre_FL_5_LSB =  &(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[1]);
 80039b6:	4b6a      	ldr	r3, [pc, #424]	; (8003b60 <CAN_2_Receive+0x2d4>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3311      	adds	r3, #17
 80039bc:	4a6a      	ldr	r2, [pc, #424]	; (8003b68 <CAN_2_Receive+0x2dc>)
 80039be:	6013      	str	r3, [r2, #0]
	 t_tyre_FL_6_MSB =  &(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[2]);
 80039c0:	4b67      	ldr	r3, [pc, #412]	; (8003b60 <CAN_2_Receive+0x2d4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3312      	adds	r3, #18
 80039c6:	4a69      	ldr	r2, [pc, #420]	; (8003b6c <CAN_2_Receive+0x2e0>)
 80039c8:	6013      	str	r3, [r2, #0]
	 t_tyre_FL_6_LSB =  &(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[3]);
 80039ca:	4b65      	ldr	r3, [pc, #404]	; (8003b60 <CAN_2_Receive+0x2d4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3313      	adds	r3, #19
 80039d0:	4a67      	ldr	r2, [pc, #412]	; (8003b70 <CAN_2_Receive+0x2e4>)
 80039d2:	6013      	str	r3, [r2, #0]
	 t_tyre_FL_7_MSB =  &(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[4]);
 80039d4:	4b62      	ldr	r3, [pc, #392]	; (8003b60 <CAN_2_Receive+0x2d4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3314      	adds	r3, #20
 80039da:	4a66      	ldr	r2, [pc, #408]	; (8003b74 <CAN_2_Receive+0x2e8>)
 80039dc:	6013      	str	r3, [r2, #0]
	 t_tyre_FL_7_LSB =  &(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5]);
 80039de:	4b60      	ldr	r3, [pc, #384]	; (8003b60 <CAN_2_Receive+0x2d4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3315      	adds	r3, #21
 80039e4:	4a64      	ldr	r2, [pc, #400]	; (8003b78 <CAN_2_Receive+0x2ec>)
 80039e6:	6013      	str	r3, [r2, #0]
	 t_tyre_FL_8_MSB =  &(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[6]);
 80039e8:	4b5d      	ldr	r3, [pc, #372]	; (8003b60 <CAN_2_Receive+0x2d4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3316      	adds	r3, #22
 80039ee:	4a63      	ldr	r2, [pc, #396]	; (8003b7c <CAN_2_Receive+0x2f0>)
 80039f0:	6013      	str	r3, [r2, #0]
	 t_tyre_FL_8_LSB =  &(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[7]);
 80039f2:	4b5b      	ldr	r3, [pc, #364]	; (8003b60 <CAN_2_Receive+0x2d4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3317      	adds	r3, #23
 80039f8:	4a61      	ldr	r2, [pc, #388]	; (8003b80 <CAN_2_Receive+0x2f4>)
 80039fa:	6013      	str	r3, [r2, #0]

	//0x4B4 t_tyre_FR
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_13_Config);
 80039fc:	4861      	ldr	r0, [pc, #388]	; (8003b84 <CAN_2_Receive+0x2f8>)
 80039fe:	f7ff facd 	bl	8002f9c <CAN_NODE_MO_ReceiveData>
	 t_tyre_FR_1_MSB =  &(CAN_2_LMO_13_Config.mo_ptr->can_data_byte[0]);
 8003a02:	4b60      	ldr	r3, [pc, #384]	; (8003b84 <CAN_2_Receive+0x2f8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3310      	adds	r3, #16
 8003a08:	4a5f      	ldr	r2, [pc, #380]	; (8003b88 <CAN_2_Receive+0x2fc>)
 8003a0a:	6013      	str	r3, [r2, #0]
	 t_tyre_FR_1_LSB =  &(CAN_2_LMO_13_Config.mo_ptr->can_data_byte[1]);
 8003a0c:	4b5d      	ldr	r3, [pc, #372]	; (8003b84 <CAN_2_Receive+0x2f8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3311      	adds	r3, #17
 8003a12:	4a5e      	ldr	r2, [pc, #376]	; (8003b8c <CAN_2_Receive+0x300>)
 8003a14:	6013      	str	r3, [r2, #0]
	 t_tyre_FR_2_MSB =  &(CAN_2_LMO_13_Config.mo_ptr->can_data_byte[2]);
 8003a16:	4b5b      	ldr	r3, [pc, #364]	; (8003b84 <CAN_2_Receive+0x2f8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3312      	adds	r3, #18
 8003a1c:	4a5c      	ldr	r2, [pc, #368]	; (8003b90 <CAN_2_Receive+0x304>)
 8003a1e:	6013      	str	r3, [r2, #0]
	 t_tyre_FR_2_LSB =  &(CAN_2_LMO_13_Config.mo_ptr->can_data_byte[3]);
 8003a20:	4b58      	ldr	r3, [pc, #352]	; (8003b84 <CAN_2_Receive+0x2f8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3313      	adds	r3, #19
 8003a26:	4a5b      	ldr	r2, [pc, #364]	; (8003b94 <CAN_2_Receive+0x308>)
 8003a28:	6013      	str	r3, [r2, #0]
	 t_tyre_FR_3_MSB =  &(CAN_2_LMO_13_Config.mo_ptr->can_data_byte[4]);
 8003a2a:	4b56      	ldr	r3, [pc, #344]	; (8003b84 <CAN_2_Receive+0x2f8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3314      	adds	r3, #20
 8003a30:	4a59      	ldr	r2, [pc, #356]	; (8003b98 <CAN_2_Receive+0x30c>)
 8003a32:	6013      	str	r3, [r2, #0]
	 t_tyre_FR_3_LSB =  &(CAN_2_LMO_13_Config.mo_ptr->can_data_byte[5]);
 8003a34:	4b53      	ldr	r3, [pc, #332]	; (8003b84 <CAN_2_Receive+0x2f8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3315      	adds	r3, #21
 8003a3a:	4a58      	ldr	r2, [pc, #352]	; (8003b9c <CAN_2_Receive+0x310>)
 8003a3c:	6013      	str	r3, [r2, #0]
	 t_tyre_FR_4_MSB =  &(CAN_2_LMO_13_Config.mo_ptr->can_data_byte[6]);
 8003a3e:	4b51      	ldr	r3, [pc, #324]	; (8003b84 <CAN_2_Receive+0x2f8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3316      	adds	r3, #22
 8003a44:	4a56      	ldr	r2, [pc, #344]	; (8003ba0 <CAN_2_Receive+0x314>)
 8003a46:	6013      	str	r3, [r2, #0]
	 t_tyre_FR_4_LSB =  &(CAN_2_LMO_13_Config.mo_ptr->can_data_byte[7]);
 8003a48:	4b4e      	ldr	r3, [pc, #312]	; (8003b84 <CAN_2_Receive+0x2f8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3317      	adds	r3, #23
 8003a4e:	4a55      	ldr	r2, [pc, #340]	; (8003ba4 <CAN_2_Receive+0x318>)
 8003a50:	6013      	str	r3, [r2, #0]

	//0x4B5 t_tyre_FR
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_14_Config);
 8003a52:	4855      	ldr	r0, [pc, #340]	; (8003ba8 <CAN_2_Receive+0x31c>)
 8003a54:	f7ff faa2 	bl	8002f9c <CAN_NODE_MO_ReceiveData>
	 t_tyre_FR_5_MSB =  &(CAN_2_LMO_14_Config.mo_ptr->can_data_byte[0]);
 8003a58:	4b53      	ldr	r3, [pc, #332]	; (8003ba8 <CAN_2_Receive+0x31c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3310      	adds	r3, #16
 8003a5e:	4a53      	ldr	r2, [pc, #332]	; (8003bac <CAN_2_Receive+0x320>)
 8003a60:	6013      	str	r3, [r2, #0]
	 t_tyre_FR_5_LSB =  &(CAN_2_LMO_14_Config.mo_ptr->can_data_byte[1]);
 8003a62:	4b51      	ldr	r3, [pc, #324]	; (8003ba8 <CAN_2_Receive+0x31c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3311      	adds	r3, #17
 8003a68:	4a51      	ldr	r2, [pc, #324]	; (8003bb0 <CAN_2_Receive+0x324>)
 8003a6a:	6013      	str	r3, [r2, #0]
	 t_tyre_FR_6_MSB =  &(CAN_2_LMO_14_Config.mo_ptr->can_data_byte[2]);
 8003a6c:	4b4e      	ldr	r3, [pc, #312]	; (8003ba8 <CAN_2_Receive+0x31c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3312      	adds	r3, #18
 8003a72:	4a50      	ldr	r2, [pc, #320]	; (8003bb4 <CAN_2_Receive+0x328>)
 8003a74:	6013      	str	r3, [r2, #0]
	 t_tyre_FR_6_LSB =  &(CAN_2_LMO_14_Config.mo_ptr->can_data_byte[3]);
 8003a76:	4b4c      	ldr	r3, [pc, #304]	; (8003ba8 <CAN_2_Receive+0x31c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3313      	adds	r3, #19
 8003a7c:	4a4e      	ldr	r2, [pc, #312]	; (8003bb8 <CAN_2_Receive+0x32c>)
 8003a7e:	6013      	str	r3, [r2, #0]
	 t_tyre_FR_7_MSB =  &(CAN_2_LMO_14_Config.mo_ptr->can_data_byte[4]);
 8003a80:	4b49      	ldr	r3, [pc, #292]	; (8003ba8 <CAN_2_Receive+0x31c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3314      	adds	r3, #20
 8003a86:	4a4d      	ldr	r2, [pc, #308]	; (8003bbc <CAN_2_Receive+0x330>)
 8003a88:	6013      	str	r3, [r2, #0]
	 t_tyre_FR_7_LSB =  &(CAN_2_LMO_14_Config.mo_ptr->can_data_byte[5]);
 8003a8a:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <CAN_2_Receive+0x31c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3315      	adds	r3, #21
 8003a90:	4a4b      	ldr	r2, [pc, #300]	; (8003bc0 <CAN_2_Receive+0x334>)
 8003a92:	6013      	str	r3, [r2, #0]
	 t_tyre_FR_8_MSB =  &(CAN_2_LMO_14_Config.mo_ptr->can_data_byte[6]);
 8003a94:	4b44      	ldr	r3, [pc, #272]	; (8003ba8 <CAN_2_Receive+0x31c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3316      	adds	r3, #22
 8003a9a:	4a4a      	ldr	r2, [pc, #296]	; (8003bc4 <CAN_2_Receive+0x338>)
 8003a9c:	6013      	str	r3, [r2, #0]
	 t_tyre_FR_8_LSB =  &(CAN_2_LMO_14_Config.mo_ptr->can_data_byte[7]);
 8003a9e:	4b42      	ldr	r3, [pc, #264]	; (8003ba8 <CAN_2_Receive+0x31c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3317      	adds	r3, #23
 8003aa4:	4a48      	ldr	r2, [pc, #288]	; (8003bc8 <CAN_2_Receive+0x33c>)
 8003aa6:	6013      	str	r3, [r2, #0]

	//0x4B8 t_tyre_RL
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_15_Config);
 8003aa8:	4848      	ldr	r0, [pc, #288]	; (8003bcc <CAN_2_Receive+0x340>)
 8003aaa:	f7ff fa77 	bl	8002f9c <CAN_NODE_MO_ReceiveData>
	t_tyre_RL_1_MSB =  &(CAN_2_LMO_15_Config.mo_ptr->can_data_byte[0]);
 8003aae:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <CAN_2_Receive+0x340>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3310      	adds	r3, #16
 8003ab4:	4a46      	ldr	r2, [pc, #280]	; (8003bd0 <CAN_2_Receive+0x344>)
 8003ab6:	6013      	str	r3, [r2, #0]
	t_tyre_RL_1_LSB =  &(CAN_2_LMO_15_Config.mo_ptr->can_data_byte[1]);
 8003ab8:	4b44      	ldr	r3, [pc, #272]	; (8003bcc <CAN_2_Receive+0x340>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3311      	adds	r3, #17
 8003abe:	4a45      	ldr	r2, [pc, #276]	; (8003bd4 <CAN_2_Receive+0x348>)
 8003ac0:	6013      	str	r3, [r2, #0]
	t_tyre_RL_2_MSB =  &(CAN_2_LMO_15_Config.mo_ptr->can_data_byte[2]);
 8003ac2:	4b42      	ldr	r3, [pc, #264]	; (8003bcc <CAN_2_Receive+0x340>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3312      	adds	r3, #18
 8003ac8:	4a43      	ldr	r2, [pc, #268]	; (8003bd8 <CAN_2_Receive+0x34c>)
 8003aca:	6013      	str	r3, [r2, #0]
	t_tyre_RL_2_LSB =  &(CAN_2_LMO_15_Config.mo_ptr->can_data_byte[3]);
 8003acc:	4b3f      	ldr	r3, [pc, #252]	; (8003bcc <CAN_2_Receive+0x340>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3313      	adds	r3, #19
 8003ad2:	4a42      	ldr	r2, [pc, #264]	; (8003bdc <CAN_2_Receive+0x350>)
 8003ad4:	6013      	str	r3, [r2, #0]
	t_tyre_RL_3_MSB =  &(CAN_2_LMO_15_Config.mo_ptr->can_data_byte[4]);
 8003ad6:	4b3d      	ldr	r3, [pc, #244]	; (8003bcc <CAN_2_Receive+0x340>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3314      	adds	r3, #20
 8003adc:	e080      	b.n	8003be0 <CAN_2_Receive+0x354>
 8003ade:	bf00      	nop
 8003ae0:	08004e90 	.word	0x08004e90
 8003ae4:	08004e9c 	.word	0x08004e9c
 8003ae8:	20000484 	.word	0x20000484
 8003aec:	08004ea8 	.word	0x08004ea8
 8003af0:	20000488 	.word	0x20000488
 8003af4:	08004eb4 	.word	0x08004eb4
 8003af8:	08004ec0 	.word	0x08004ec0
 8003afc:	08004ecc 	.word	0x08004ecc
 8003b00:	200004a4 	.word	0x200004a4
 8003b04:	200004a8 	.word	0x200004a8
 8003b08:	200004ac 	.word	0x200004ac
 8003b0c:	200004b0 	.word	0x200004b0
 8003b10:	200004b4 	.word	0x200004b4
 8003b14:	08004ed8 	.word	0x08004ed8
 8003b18:	200004b8 	.word	0x200004b8
 8003b1c:	200004bc 	.word	0x200004bc
 8003b20:	200004c0 	.word	0x200004c0
 8003b24:	200004c4 	.word	0x200004c4
 8003b28:	08004ee4 	.word	0x08004ee4
 8003b2c:	08004ef0 	.word	0x08004ef0
 8003b30:	200004cc 	.word	0x200004cc
 8003b34:	08004efc 	.word	0x08004efc
 8003b38:	200004d0 	.word	0x200004d0
 8003b3c:	08004f08 	.word	0x08004f08
 8003b40:	200004d4 	.word	0x200004d4
 8003b44:	200004d8 	.word	0x200004d8
 8003b48:	200004dc 	.word	0x200004dc
 8003b4c:	200004e0 	.word	0x200004e0
 8003b50:	200004e4 	.word	0x200004e4
 8003b54:	200004e8 	.word	0x200004e8
 8003b58:	200004ec 	.word	0x200004ec
 8003b5c:	200004f0 	.word	0x200004f0
 8003b60:	08004f14 	.word	0x08004f14
 8003b64:	200004f4 	.word	0x200004f4
 8003b68:	200004f8 	.word	0x200004f8
 8003b6c:	200004fc 	.word	0x200004fc
 8003b70:	20000500 	.word	0x20000500
 8003b74:	20000504 	.word	0x20000504
 8003b78:	20000508 	.word	0x20000508
 8003b7c:	2000050c 	.word	0x2000050c
 8003b80:	20000510 	.word	0x20000510
 8003b84:	08004f20 	.word	0x08004f20
 8003b88:	20000514 	.word	0x20000514
 8003b8c:	20000518 	.word	0x20000518
 8003b90:	2000051c 	.word	0x2000051c
 8003b94:	20000520 	.word	0x20000520
 8003b98:	20000524 	.word	0x20000524
 8003b9c:	20000528 	.word	0x20000528
 8003ba0:	2000052c 	.word	0x2000052c
 8003ba4:	20000530 	.word	0x20000530
 8003ba8:	08004f2c 	.word	0x08004f2c
 8003bac:	20000534 	.word	0x20000534
 8003bb0:	20000538 	.word	0x20000538
 8003bb4:	2000053c 	.word	0x2000053c
 8003bb8:	20000540 	.word	0x20000540
 8003bbc:	20000544 	.word	0x20000544
 8003bc0:	20000548 	.word	0x20000548
 8003bc4:	2000054c 	.word	0x2000054c
 8003bc8:	20000550 	.word	0x20000550
 8003bcc:	08004f38 	.word	0x08004f38
 8003bd0:	20000554 	.word	0x20000554
 8003bd4:	20000558 	.word	0x20000558
 8003bd8:	2000055c 	.word	0x2000055c
 8003bdc:	20000560 	.word	0x20000560
 8003be0:	4aa7      	ldr	r2, [pc, #668]	; (8003e80 <CAN_2_Receive+0x5f4>)
 8003be2:	6013      	str	r3, [r2, #0]
	t_tyre_RL_3_LSB =  &(CAN_2_LMO_15_Config.mo_ptr->can_data_byte[5]);
 8003be4:	4ba7      	ldr	r3, [pc, #668]	; (8003e84 <CAN_2_Receive+0x5f8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3315      	adds	r3, #21
 8003bea:	4aa7      	ldr	r2, [pc, #668]	; (8003e88 <CAN_2_Receive+0x5fc>)
 8003bec:	6013      	str	r3, [r2, #0]
	t_tyre_RL_4_MSB =  &(CAN_2_LMO_15_Config.mo_ptr->can_data_byte[6]);
 8003bee:	4ba5      	ldr	r3, [pc, #660]	; (8003e84 <CAN_2_Receive+0x5f8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3316      	adds	r3, #22
 8003bf4:	4aa5      	ldr	r2, [pc, #660]	; (8003e8c <CAN_2_Receive+0x600>)
 8003bf6:	6013      	str	r3, [r2, #0]
	t_tyre_RL_4_LSB =  &(CAN_2_LMO_15_Config.mo_ptr->can_data_byte[7]);
 8003bf8:	4ba2      	ldr	r3, [pc, #648]	; (8003e84 <CAN_2_Receive+0x5f8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3317      	adds	r3, #23
 8003bfe:	4aa4      	ldr	r2, [pc, #656]	; (8003e90 <CAN_2_Receive+0x604>)
 8003c00:	6013      	str	r3, [r2, #0]
	//0x4B9 t_tyre_RL
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_16_Config);
 8003c02:	48a4      	ldr	r0, [pc, #656]	; (8003e94 <CAN_2_Receive+0x608>)
 8003c04:	f7ff f9ca 	bl	8002f9c <CAN_NODE_MO_ReceiveData>
	t_tyre_RL_5_MSB =  &(CAN_2_LMO_16_Config.mo_ptr->can_data_byte[0]);
 8003c08:	4ba2      	ldr	r3, [pc, #648]	; (8003e94 <CAN_2_Receive+0x608>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3310      	adds	r3, #16
 8003c0e:	4aa2      	ldr	r2, [pc, #648]	; (8003e98 <CAN_2_Receive+0x60c>)
 8003c10:	6013      	str	r3, [r2, #0]
	t_tyre_RL_5_LSB =  &(CAN_2_LMO_16_Config.mo_ptr->can_data_byte[1]);
 8003c12:	4ba0      	ldr	r3, [pc, #640]	; (8003e94 <CAN_2_Receive+0x608>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3311      	adds	r3, #17
 8003c18:	4aa0      	ldr	r2, [pc, #640]	; (8003e9c <CAN_2_Receive+0x610>)
 8003c1a:	6013      	str	r3, [r2, #0]
	t_tyre_RL_6_MSB =  &(CAN_2_LMO_16_Config.mo_ptr->can_data_byte[2]);
 8003c1c:	4b9d      	ldr	r3, [pc, #628]	; (8003e94 <CAN_2_Receive+0x608>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3312      	adds	r3, #18
 8003c22:	4a9f      	ldr	r2, [pc, #636]	; (8003ea0 <CAN_2_Receive+0x614>)
 8003c24:	6013      	str	r3, [r2, #0]
	t_tyre_RL_6_LSB =  &(CAN_2_LMO_16_Config.mo_ptr->can_data_byte[3]);
 8003c26:	4b9b      	ldr	r3, [pc, #620]	; (8003e94 <CAN_2_Receive+0x608>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3313      	adds	r3, #19
 8003c2c:	4a9d      	ldr	r2, [pc, #628]	; (8003ea4 <CAN_2_Receive+0x618>)
 8003c2e:	6013      	str	r3, [r2, #0]
	t_tyre_RL_7_MSB =  &(CAN_2_LMO_16_Config.mo_ptr->can_data_byte[4]);
 8003c30:	4b98      	ldr	r3, [pc, #608]	; (8003e94 <CAN_2_Receive+0x608>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3314      	adds	r3, #20
 8003c36:	4a9c      	ldr	r2, [pc, #624]	; (8003ea8 <CAN_2_Receive+0x61c>)
 8003c38:	6013      	str	r3, [r2, #0]
	t_tyre_RL_7_LSB =  &(CAN_2_LMO_16_Config.mo_ptr->can_data_byte[5]);
 8003c3a:	4b96      	ldr	r3, [pc, #600]	; (8003e94 <CAN_2_Receive+0x608>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3315      	adds	r3, #21
 8003c40:	4a9a      	ldr	r2, [pc, #616]	; (8003eac <CAN_2_Receive+0x620>)
 8003c42:	6013      	str	r3, [r2, #0]
	t_tyre_RL_8_MSB =  &(CAN_2_LMO_16_Config.mo_ptr->can_data_byte[6]);
 8003c44:	4b93      	ldr	r3, [pc, #588]	; (8003e94 <CAN_2_Receive+0x608>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3316      	adds	r3, #22
 8003c4a:	4a99      	ldr	r2, [pc, #612]	; (8003eb0 <CAN_2_Receive+0x624>)
 8003c4c:	6013      	str	r3, [r2, #0]
	t_tyre_RL_8_LSB =  &(CAN_2_LMO_16_Config.mo_ptr->can_data_byte[7]);
 8003c4e:	4b91      	ldr	r3, [pc, #580]	; (8003e94 <CAN_2_Receive+0x608>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3317      	adds	r3, #23
 8003c54:	4a97      	ldr	r2, [pc, #604]	; (8003eb4 <CAN_2_Receive+0x628>)
 8003c56:	6013      	str	r3, [r2, #0]

	//0x4BC t_tyre_RR
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_17_Config);
 8003c58:	4897      	ldr	r0, [pc, #604]	; (8003eb8 <CAN_2_Receive+0x62c>)
 8003c5a:	f7ff f99f 	bl	8002f9c <CAN_NODE_MO_ReceiveData>
	t_tyre_RR_1_MSB =  &(CAN_2_LMO_17_Config.mo_ptr->can_data_byte[0]);
 8003c5e:	4b96      	ldr	r3, [pc, #600]	; (8003eb8 <CAN_2_Receive+0x62c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3310      	adds	r3, #16
 8003c64:	4a95      	ldr	r2, [pc, #596]	; (8003ebc <CAN_2_Receive+0x630>)
 8003c66:	6013      	str	r3, [r2, #0]
	t_tyre_RR_1_LSB =  &(CAN_2_LMO_17_Config.mo_ptr->can_data_byte[1]);
 8003c68:	4b93      	ldr	r3, [pc, #588]	; (8003eb8 <CAN_2_Receive+0x62c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3311      	adds	r3, #17
 8003c6e:	4a94      	ldr	r2, [pc, #592]	; (8003ec0 <CAN_2_Receive+0x634>)
 8003c70:	6013      	str	r3, [r2, #0]
	t_tyre_RR_2_MSB =  &(CAN_2_LMO_17_Config.mo_ptr->can_data_byte[2]);
 8003c72:	4b91      	ldr	r3, [pc, #580]	; (8003eb8 <CAN_2_Receive+0x62c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3312      	adds	r3, #18
 8003c78:	4a92      	ldr	r2, [pc, #584]	; (8003ec4 <CAN_2_Receive+0x638>)
 8003c7a:	6013      	str	r3, [r2, #0]
	t_tyre_RR_2_LSB =  &(CAN_2_LMO_17_Config.mo_ptr->can_data_byte[3]);
 8003c7c:	4b8e      	ldr	r3, [pc, #568]	; (8003eb8 <CAN_2_Receive+0x62c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3313      	adds	r3, #19
 8003c82:	4a91      	ldr	r2, [pc, #580]	; (8003ec8 <CAN_2_Receive+0x63c>)
 8003c84:	6013      	str	r3, [r2, #0]
	t_tyre_RR_3_MSB =  &(CAN_2_LMO_17_Config.mo_ptr->can_data_byte[4]);
 8003c86:	4b8c      	ldr	r3, [pc, #560]	; (8003eb8 <CAN_2_Receive+0x62c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3314      	adds	r3, #20
 8003c8c:	4a8f      	ldr	r2, [pc, #572]	; (8003ecc <CAN_2_Receive+0x640>)
 8003c8e:	6013      	str	r3, [r2, #0]
	t_tyre_RR_3_LSB = &(CAN_2_LMO_17_Config.mo_ptr->can_data_byte[5]);
 8003c90:	4b89      	ldr	r3, [pc, #548]	; (8003eb8 <CAN_2_Receive+0x62c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3315      	adds	r3, #21
 8003c96:	4a8e      	ldr	r2, [pc, #568]	; (8003ed0 <CAN_2_Receive+0x644>)
 8003c98:	6013      	str	r3, [r2, #0]
	t_tyre_RR_4_MSB =  &(CAN_2_LMO_17_Config.mo_ptr->can_data_byte[6]);
 8003c9a:	4b87      	ldr	r3, [pc, #540]	; (8003eb8 <CAN_2_Receive+0x62c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3316      	adds	r3, #22
 8003ca0:	4a8c      	ldr	r2, [pc, #560]	; (8003ed4 <CAN_2_Receive+0x648>)
 8003ca2:	6013      	str	r3, [r2, #0]
	t_tyre_RR_4_LSB =  &(CAN_2_LMO_17_Config.mo_ptr->can_data_byte[7]);
 8003ca4:	4b84      	ldr	r3, [pc, #528]	; (8003eb8 <CAN_2_Receive+0x62c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3317      	adds	r3, #23
 8003caa:	4a8b      	ldr	r2, [pc, #556]	; (8003ed8 <CAN_2_Receive+0x64c>)
 8003cac:	6013      	str	r3, [r2, #0]

	//0x4BD t_tyre_FL
	CAN_NODE_MO_ReceiveData((CAN_NODE_LMO_t*)&CAN_2_LMO_18_Config);
 8003cae:	488b      	ldr	r0, [pc, #556]	; (8003edc <CAN_2_Receive+0x650>)
 8003cb0:	f7ff f974 	bl	8002f9c <CAN_NODE_MO_ReceiveData>
	t_tyre_RR_5_MSB =  &(CAN_2_LMO_18_Config.mo_ptr->can_data_byte[0]);
 8003cb4:	4b89      	ldr	r3, [pc, #548]	; (8003edc <CAN_2_Receive+0x650>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3310      	adds	r3, #16
 8003cba:	4a89      	ldr	r2, [pc, #548]	; (8003ee0 <CAN_2_Receive+0x654>)
 8003cbc:	6013      	str	r3, [r2, #0]
	t_tyre_RR_5_LSB =  &(CAN_2_LMO_18_Config.mo_ptr->can_data_byte[1]);
 8003cbe:	4b87      	ldr	r3, [pc, #540]	; (8003edc <CAN_2_Receive+0x650>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3311      	adds	r3, #17
 8003cc4:	4a87      	ldr	r2, [pc, #540]	; (8003ee4 <CAN_2_Receive+0x658>)
 8003cc6:	6013      	str	r3, [r2, #0]
	t_tyre_RR_6_MSB =  &(CAN_2_LMO_18_Config.mo_ptr->can_data_byte[2]);
 8003cc8:	4b84      	ldr	r3, [pc, #528]	; (8003edc <CAN_2_Receive+0x650>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3312      	adds	r3, #18
 8003cce:	4a86      	ldr	r2, [pc, #536]	; (8003ee8 <CAN_2_Receive+0x65c>)
 8003cd0:	6013      	str	r3, [r2, #0]
	t_tyre_RR_6_LSB =  &(CAN_2_LMO_18_Config.mo_ptr->can_data_byte[3]);
 8003cd2:	4b82      	ldr	r3, [pc, #520]	; (8003edc <CAN_2_Receive+0x650>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3313      	adds	r3, #19
 8003cd8:	4a84      	ldr	r2, [pc, #528]	; (8003eec <CAN_2_Receive+0x660>)
 8003cda:	6013      	str	r3, [r2, #0]
	t_tyre_RR_7_MSB =  &(CAN_2_LMO_18_Config.mo_ptr->can_data_byte[4]);
 8003cdc:	4b7f      	ldr	r3, [pc, #508]	; (8003edc <CAN_2_Receive+0x650>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3314      	adds	r3, #20
 8003ce2:	4a83      	ldr	r2, [pc, #524]	; (8003ef0 <CAN_2_Receive+0x664>)
 8003ce4:	6013      	str	r3, [r2, #0]
	t_tyre_RR_7_LSB =  &(CAN_2_LMO_18_Config.mo_ptr->can_data_byte[5]);
 8003ce6:	4b7d      	ldr	r3, [pc, #500]	; (8003edc <CAN_2_Receive+0x650>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3315      	adds	r3, #21
 8003cec:	4a81      	ldr	r2, [pc, #516]	; (8003ef4 <CAN_2_Receive+0x668>)
 8003cee:	6013      	str	r3, [r2, #0]
	t_tyre_RR_8_MSB =  &(CAN_2_LMO_18_Config.mo_ptr->can_data_byte[6]);
 8003cf0:	4b7a      	ldr	r3, [pc, #488]	; (8003edc <CAN_2_Receive+0x650>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3316      	adds	r3, #22
 8003cf6:	4a80      	ldr	r2, [pc, #512]	; (8003ef8 <CAN_2_Receive+0x66c>)
 8003cf8:	6013      	str	r3, [r2, #0]
	t_tyre_RR_8_LSB =  &(CAN_2_LMO_18_Config.mo_ptr->can_data_byte[7]);
 8003cfa:	4b78      	ldr	r3, [pc, #480]	; (8003edc <CAN_2_Receive+0x650>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3317      	adds	r3, #23
 8003d00:	4a7e      	ldr	r2, [pc, #504]	; (8003efc <CAN_2_Receive+0x670>)
 8003d02:	6013      	str	r3, [r2, #0]
	//carData.x_clutch_STW=(float)*x_clutch_STW*0.1f;
	//carData.p_pneu =(float)*p_pneu*0.1f;
	//carData.U_bat = (float)*U_bat*0.1f;

	// LMO_02
	carData.i_tot = *i_tot;
 8003d04:	4b7e      	ldr	r3, [pc, #504]	; (8003f00 <CAN_2_Receive+0x674>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	781a      	ldrb	r2, [r3, #0]
 8003d0a:	4b7e      	ldr	r3, [pc, #504]	; (8003f04 <CAN_2_Receive+0x678>)
 8003d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	// LMO_03
	carData.t_PCM = *t_pcm;
 8003d10:	4b7d      	ldr	r3, [pc, #500]	; (8003f08 <CAN_2_Receive+0x67c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	781a      	ldrb	r2, [r3, #0]
 8003d16:	4b7b      	ldr	r3, [pc, #492]	; (8003f04 <CAN_2_Receive+0x678>)
 8003d18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a


	// LMO_04
	carData.f_rl = (float)*f_rl*0.1f;
 8003d1c:	4b7b      	ldr	r3, [pc, #492]	; (8003f0c <CAN_2_Receive+0x680>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2a:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8003f10 <CAN_2_Receive+0x684>
 8003d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d32:	4b74      	ldr	r3, [pc, #464]	; (8003f04 <CAN_2_Receive+0x678>)
 8003d34:	333b      	adds	r3, #59	; 0x3b
 8003d36:	ee17 2a90 	vmov	r2, s15
 8003d3a:	601a      	str	r2, [r3, #0]
	carData.f_rr = (float)*f_rr*0.1f;
 8003d3c:	4b75      	ldr	r3, [pc, #468]	; (8003f14 <CAN_2_Receive+0x688>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4a:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8003f10 <CAN_2_Receive+0x684>
 8003d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d52:	4b6c      	ldr	r3, [pc, #432]	; (8003f04 <CAN_2_Receive+0x678>)
 8003d54:	333f      	adds	r3, #63	; 0x3f
 8003d56:	ee17 2a90 	vmov	r2, s15
 8003d5a:	601a      	str	r2, [r3, #0]
	carData.x_dp_RL = (float)*x_dp_RL*0.0022888f;
 8003d5c:	4b6e      	ldr	r3, [pc, #440]	; (8003f18 <CAN_2_Receive+0x68c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8003f1c <CAN_2_Receive+0x690>
 8003d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d72:	4b64      	ldr	r3, [pc, #400]	; (8003f04 <CAN_2_Receive+0x678>)
 8003d74:	3343      	adds	r3, #67	; 0x43
 8003d76:	ee17 2a90 	vmov	r2, s15
 8003d7a:	601a      	str	r2, [r3, #0]
	carData.x_dp_RR = (float)*x_dp_RR*0.0022888f;
 8003d7c:	4b68      	ldr	r3, [pc, #416]	; (8003f20 <CAN_2_Receive+0x694>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8a:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003f1c <CAN_2_Receive+0x690>
 8003d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d92:	4b5c      	ldr	r3, [pc, #368]	; (8003f04 <CAN_2_Receive+0x678>)
 8003d94:	3347      	adds	r3, #71	; 0x47
 8003d96:	ee17 2a90 	vmov	r2, s15
 8003d9a:	601a      	str	r2, [r3, #0]

	// LMO_05
	carData.f_fl = (float)*f_fl*0.1f;
 8003d9c:	4b61      	ldr	r3, [pc, #388]	; (8003f24 <CAN_2_Receive+0x698>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003daa:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003f10 <CAN_2_Receive+0x684>
 8003dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003db2:	4b54      	ldr	r3, [pc, #336]	; (8003f04 <CAN_2_Receive+0x678>)
 8003db4:	334b      	adds	r3, #75	; 0x4b
 8003db6:	ee17 2a90 	vmov	r2, s15
 8003dba:	601a      	str	r2, [r3, #0]
	carData.f_fr = (float)*f_fr*0.1f;
 8003dbc:	4b5a      	ldr	r3, [pc, #360]	; (8003f28 <CAN_2_Receive+0x69c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dca:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8003f10 <CAN_2_Receive+0x684>
 8003dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dd2:	4b4c      	ldr	r3, [pc, #304]	; (8003f04 <CAN_2_Receive+0x678>)
 8003dd4:	334f      	adds	r3, #79	; 0x4f
 8003dd6:	ee17 2a90 	vmov	r2, s15
 8003dda:	601a      	str	r2, [r3, #0]


	//LMO_06
	carData.t_VCU = *t_VCU;
 8003ddc:	4b53      	ldr	r3, [pc, #332]	; (8003f2c <CAN_2_Receive+0x6a0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	781a      	ldrb	r2, [r3, #0]
 8003de2:	4b48      	ldr	r3, [pc, #288]	; (8003f04 <CAN_2_Receive+0x678>)
 8003de4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	carData.x_RH_F = (float)*x_RH_F*0.67f;
 8003de8:	4b51      	ldr	r3, [pc, #324]	; (8003f30 <CAN_2_Receive+0x6a4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003f34 <CAN_2_Receive+0x6a8>
 8003dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dfe:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <CAN_2_Receive+0x678>)
 8003e00:	ee17 2a90 	vmov	r2, s15
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54
	carData.x_clutch = *x_clutch;
 8003e06:	4b4c      	ldr	r3, [pc, #304]	; (8003f38 <CAN_2_Receive+0x6ac>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	781a      	ldrb	r2, [r3, #0]
 8003e0c:	4b3d      	ldr	r3, [pc, #244]	; (8003f04 <CAN_2_Receive+0x678>)
 8003e0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	carData.x_clutch_STW = *x_clutch_STW;
 8003e12:	4b4a      	ldr	r3, [pc, #296]	; (8003f3c <CAN_2_Receive+0x6b0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	4b3a      	ldr	r3, [pc, #232]	; (8003f04 <CAN_2_Receive+0x678>)
 8003e1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	carData.u_bat = (float)*u_bat*0.1f;
 8003e1e:	4b48      	ldr	r3, [pc, #288]	; (8003f40 <CAN_2_Receive+0x6b4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	ee07 3a90 	vmov	s15, r3
 8003e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003f10 <CAN_2_Receive+0x684>
 8003e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e34:	4b33      	ldr	r3, [pc, #204]	; (8003f04 <CAN_2_Receive+0x678>)
 8003e36:	335a      	adds	r3, #90	; 0x5a
 8003e38:	ee17 2a90 	vmov	r2, s15
 8003e3c:	601a      	str	r2, [r3, #0]

	//LMO_07
	carData.n_wheel_FL = (float)*n_wheel_FL*0.05625f;
 8003e3e:	4b41      	ldr	r3, [pc, #260]	; (8003f44 <CAN_2_Receive+0x6b8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	ee07 3a90 	vmov	s15, r3
 8003e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003f48 <CAN_2_Receive+0x6bc>
 8003e50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e54:	4b2b      	ldr	r3, [pc, #172]	; (8003f04 <CAN_2_Receive+0x678>)
 8003e56:	335e      	adds	r3, #94	; 0x5e
 8003e58:	ee17 2a90 	vmov	r2, s15
 8003e5c:	601a      	str	r2, [r3, #0]
	carData.n_wheel_FR = (float)*n_wheel_FR*0.05625f;
 8003e5e:	4b3b      	ldr	r3, [pc, #236]	; (8003f4c <CAN_2_Receive+0x6c0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	ee07 3a90 	vmov	s15, r3
 8003e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003f48 <CAN_2_Receive+0x6bc>
 8003e70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e74:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <CAN_2_Receive+0x678>)
 8003e76:	3362      	adds	r3, #98	; 0x62
 8003e78:	ee17 2a90 	vmov	r2, s15
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	e067      	b.n	8003f50 <CAN_2_Receive+0x6c4>
 8003e80:	20000564 	.word	0x20000564
 8003e84:	08004f38 	.word	0x08004f38
 8003e88:	20000568 	.word	0x20000568
 8003e8c:	2000056c 	.word	0x2000056c
 8003e90:	20000570 	.word	0x20000570
 8003e94:	08004f44 	.word	0x08004f44
 8003e98:	20000574 	.word	0x20000574
 8003e9c:	20000578 	.word	0x20000578
 8003ea0:	2000057c 	.word	0x2000057c
 8003ea4:	20000580 	.word	0x20000580
 8003ea8:	20000584 	.word	0x20000584
 8003eac:	20000588 	.word	0x20000588
 8003eb0:	2000058c 	.word	0x2000058c
 8003eb4:	20000590 	.word	0x20000590
 8003eb8:	08004f50 	.word	0x08004f50
 8003ebc:	20000594 	.word	0x20000594
 8003ec0:	20000598 	.word	0x20000598
 8003ec4:	2000059c 	.word	0x2000059c
 8003ec8:	200005a0 	.word	0x200005a0
 8003ecc:	200005a4 	.word	0x200005a4
 8003ed0:	200005a8 	.word	0x200005a8
 8003ed4:	200005ac 	.word	0x200005ac
 8003ed8:	200005b0 	.word	0x200005b0
 8003edc:	08004f5c 	.word	0x08004f5c
 8003ee0:	200005b4 	.word	0x200005b4
 8003ee4:	200005b8 	.word	0x200005b8
 8003ee8:	200005bc 	.word	0x200005bc
 8003eec:	200005c0 	.word	0x200005c0
 8003ef0:	200005c4 	.word	0x200005c4
 8003ef4:	200005c8 	.word	0x200005c8
 8003ef8:	200005cc 	.word	0x200005cc
 8003efc:	200005d0 	.word	0x200005d0
 8003f00:	20000484 	.word	0x20000484
 8003f04:	20000618 	.word	0x20000618
 8003f08:	20000488 	.word	0x20000488
 8003f0c:	2000048c 	.word	0x2000048c
 8003f10:	3dcccccd 	.word	0x3dcccccd
 8003f14:	20000490 	.word	0x20000490
 8003f18:	20000494 	.word	0x20000494
 8003f1c:	3b15ffb1 	.word	0x3b15ffb1
 8003f20:	20000498 	.word	0x20000498
 8003f24:	2000049c 	.word	0x2000049c
 8003f28:	200004a0 	.word	0x200004a0
 8003f2c:	200004a4 	.word	0x200004a4
 8003f30:	200004a8 	.word	0x200004a8
 8003f34:	3f2b851f 	.word	0x3f2b851f
 8003f38:	200004ac 	.word	0x200004ac
 8003f3c:	200004b0 	.word	0x200004b0
 8003f40:	200004b4 	.word	0x200004b4
 8003f44:	200004b8 	.word	0x200004b8
 8003f48:	3d666666 	.word	0x3d666666
 8003f4c:	200004bc 	.word	0x200004bc
	carData.n_wheel_RL = (float)*n_wheel_RL*0.05625f;
 8003f50:	4ba6      	ldr	r3, [pc, #664]	; (80041ec <CAN_2_Receive+0x960>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 80041f0 <CAN_2_Receive+0x964>
 8003f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f66:	4ba3      	ldr	r3, [pc, #652]	; (80041f4 <CAN_2_Receive+0x968>)
 8003f68:	3366      	adds	r3, #102	; 0x66
 8003f6a:	ee17 2a90 	vmov	r2, s15
 8003f6e:	601a      	str	r2, [r3, #0]
	carData.n_wheel_RR = (float)*n_wheel_RR*0.05625f;
 8003f70:	4ba1      	ldr	r3, [pc, #644]	; (80041f8 <CAN_2_Receive+0x96c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	ee07 3a90 	vmov	s15, r3
 8003f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7e:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80041f0 <CAN_2_Receive+0x964>
 8003f82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f86:	4b9b      	ldr	r3, [pc, #620]	; (80041f4 <CAN_2_Receive+0x968>)
 8003f88:	336a      	adds	r3, #106	; 0x6a
 8003f8a:	ee17 2a90 	vmov	r2, s15
 8003f8e:	601a      	str	r2, [r3, #0]
 // +16Byte

	//LMO_08
	carData.p_brake_F = ((float)*p_brake_front*0.0153f)-20.0f;
 8003f90:	4b9a      	ldr	r3, [pc, #616]	; (80041fc <CAN_2_Receive+0x970>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9e:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8004200 <CAN_2_Receive+0x974>
 8003fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fa6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x34
 8003faa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fae:	4b91      	ldr	r3, [pc, #580]	; (80041f4 <CAN_2_Receive+0x968>)
 8003fb0:	336e      	adds	r3, #110	; 0x6e
 8003fb2:	ee17 2a90 	vmov	r2, s15
 8003fb6:	601a      	str	r2, [r3, #0]

	//LMO_09
	carData.ay = ((float)*AY * 0.0001272f) - 4.1768f;
 8003fb8:	4b92      	ldr	r3, [pc, #584]	; (8004204 <CAN_2_Receive+0x978>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc6:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8004208 <CAN_2_Receive+0x97c>
 8003fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fce:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 800420c <CAN_2_Receive+0x980>
 8003fd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fd6:	4b87      	ldr	r3, [pc, #540]	; (80041f4 <CAN_2_Receive+0x968>)
 8003fd8:	3372      	adds	r3, #114	; 0x72
 8003fda:	ee17 2a90 	vmov	r2, s15
 8003fde:	601a      	str	r2, [r3, #0]


	//LMO_10
	carData.ax =((float)*AX * 0.0001272f) - 4.1768f;
 8003fe0:	4b8b      	ldr	r3, [pc, #556]	; (8004210 <CAN_2_Receive+0x984>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	ee07 3a90 	vmov	s15, r3
 8003fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fee:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8004208 <CAN_2_Receive+0x97c>
 8003ff2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ff6:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800420c <CAN_2_Receive+0x980>
 8003ffa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ffe:	4b7d      	ldr	r3, [pc, #500]	; (80041f4 <CAN_2_Receive+0x968>)
 8004000:	3376      	adds	r3, #118	; 0x76
 8004002:	ee17 2a90 	vmov	r2, s15
 8004006:	601a      	str	r2, [r3, #0]

	//LMO for tyre temps are not changed

	//LMO_11 FL
	t_tyre_FL_1 =shift(*t_tyre_FL_1_MSB,*t_tyre_FL_1_LSB);// (*t_tyre_FL_1_MSB<<8)|*t_tyre_FL_1_LSB;
 8004008:	4b82      	ldr	r3, [pc, #520]	; (8004214 <CAN_2_Receive+0x988>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	4b82      	ldr	r3, [pc, #520]	; (8004218 <CAN_2_Receive+0x98c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	4610      	mov	r0, r2
 8004016:	4619      	mov	r1, r3
 8004018:	f000 fde4 	bl	8004be4 <shift>
 800401c:	4603      	mov	r3, r0
 800401e:	b29a      	uxth	r2, r3
 8004020:	4b7e      	ldr	r3, [pc, #504]	; (800421c <CAN_2_Receive+0x990>)
 8004022:	801a      	strh	r2, [r3, #0]
	t_tyre_FL_2 =shift(*t_tyre_FL_2_MSB,*t_tyre_FL_2_LSB);// (*t_tyre_FL_2_MSB<<8)|*t_tyre_FL_2_LSB;
 8004024:	4b7e      	ldr	r3, [pc, #504]	; (8004220 <CAN_2_Receive+0x994>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	781a      	ldrb	r2, [r3, #0]
 800402a:	4b7e      	ldr	r3, [pc, #504]	; (8004224 <CAN_2_Receive+0x998>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	4610      	mov	r0, r2
 8004032:	4619      	mov	r1, r3
 8004034:	f000 fdd6 	bl	8004be4 <shift>
 8004038:	4603      	mov	r3, r0
 800403a:	b29a      	uxth	r2, r3
 800403c:	4b7a      	ldr	r3, [pc, #488]	; (8004228 <CAN_2_Receive+0x99c>)
 800403e:	801a      	strh	r2, [r3, #0]
	t_tyre_FL_3 =shift(*t_tyre_FL_3_MSB,*t_tyre_FL_3_LSB);// (*t_tyre_FL_3_MSB<<8)|*t_tyre_FL_3_LSB;
 8004040:	4b7a      	ldr	r3, [pc, #488]	; (800422c <CAN_2_Receive+0x9a0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	4b7a      	ldr	r3, [pc, #488]	; (8004230 <CAN_2_Receive+0x9a4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	4610      	mov	r0, r2
 800404e:	4619      	mov	r1, r3
 8004050:	f000 fdc8 	bl	8004be4 <shift>
 8004054:	4603      	mov	r3, r0
 8004056:	b29a      	uxth	r2, r3
 8004058:	4b76      	ldr	r3, [pc, #472]	; (8004234 <CAN_2_Receive+0x9a8>)
 800405a:	801a      	strh	r2, [r3, #0]
	t_tyre_FL_4 =shift(*t_tyre_FL_4_MSB,*t_tyre_FL_4_LSB);// (*t_tyre_FL_4_MSB<<8)|*t_tyre_FL_4_LSB;
 800405c:	4b76      	ldr	r3, [pc, #472]	; (8004238 <CAN_2_Receive+0x9ac>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	781a      	ldrb	r2, [r3, #0]
 8004062:	4b76      	ldr	r3, [pc, #472]	; (800423c <CAN_2_Receive+0x9b0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	4610      	mov	r0, r2
 800406a:	4619      	mov	r1, r3
 800406c:	f000 fdba 	bl	8004be4 <shift>
 8004070:	4603      	mov	r3, r0
 8004072:	b29a      	uxth	r2, r3
 8004074:	4b72      	ldr	r3, [pc, #456]	; (8004240 <CAN_2_Receive+0x9b4>)
 8004076:	801a      	strh	r2, [r3, #0]
	t_tyre_FL_5 = shift(*t_tyre_FL_5_MSB,*t_tyre_FL_5_LSB);
 8004078:	4b72      	ldr	r3, [pc, #456]	; (8004244 <CAN_2_Receive+0x9b8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	781a      	ldrb	r2, [r3, #0]
 800407e:	4b72      	ldr	r3, [pc, #456]	; (8004248 <CAN_2_Receive+0x9bc>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	4610      	mov	r0, r2
 8004086:	4619      	mov	r1, r3
 8004088:	f000 fdac 	bl	8004be4 <shift>
 800408c:	4603      	mov	r3, r0
 800408e:	b29a      	uxth	r2, r3
 8004090:	4b6e      	ldr	r3, [pc, #440]	; (800424c <CAN_2_Receive+0x9c0>)
 8004092:	801a      	strh	r2, [r3, #0]
	t_tyre_FL_6 = shift(*t_tyre_FL_6_MSB,*t_tyre_FL_6_LSB);
 8004094:	4b6e      	ldr	r3, [pc, #440]	; (8004250 <CAN_2_Receive+0x9c4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	781a      	ldrb	r2, [r3, #0]
 800409a:	4b6e      	ldr	r3, [pc, #440]	; (8004254 <CAN_2_Receive+0x9c8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	4610      	mov	r0, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	f000 fd9e 	bl	8004be4 <shift>
 80040a8:	4603      	mov	r3, r0
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	4b6a      	ldr	r3, [pc, #424]	; (8004258 <CAN_2_Receive+0x9cc>)
 80040ae:	801a      	strh	r2, [r3, #0]
	t_tyre_FL_7 = shift(*t_tyre_FL_7_MSB,*t_tyre_FL_7_LSB);
 80040b0:	4b6a      	ldr	r3, [pc, #424]	; (800425c <CAN_2_Receive+0x9d0>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	4b6a      	ldr	r3, [pc, #424]	; (8004260 <CAN_2_Receive+0x9d4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	4610      	mov	r0, r2
 80040be:	4619      	mov	r1, r3
 80040c0:	f000 fd90 	bl	8004be4 <shift>
 80040c4:	4603      	mov	r3, r0
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	4b66      	ldr	r3, [pc, #408]	; (8004264 <CAN_2_Receive+0x9d8>)
 80040ca:	801a      	strh	r2, [r3, #0]
	t_tyre_FL_8 = shift(*t_tyre_FL_8_MSB,*t_tyre_FL_8_LSB);
 80040cc:	4b66      	ldr	r3, [pc, #408]	; (8004268 <CAN_2_Receive+0x9dc>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	781a      	ldrb	r2, [r3, #0]
 80040d2:	4b66      	ldr	r3, [pc, #408]	; (800426c <CAN_2_Receive+0x9e0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	f000 fd82 	bl	8004be4 <shift>
 80040e0:	4603      	mov	r3, r0
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	4b62      	ldr	r3, [pc, #392]	; (8004270 <CAN_2_Receive+0x9e4>)
 80040e6:	801a      	strh	r2, [r3, #0]

	//t_tyre FR
	t_tyre_FR_1 = shift(*t_tyre_FR_1_MSB,*t_tyre_FR_1_LSB);
 80040e8:	4b62      	ldr	r3, [pc, #392]	; (8004274 <CAN_2_Receive+0x9e8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	781a      	ldrb	r2, [r3, #0]
 80040ee:	4b62      	ldr	r3, [pc, #392]	; (8004278 <CAN_2_Receive+0x9ec>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	4610      	mov	r0, r2
 80040f6:	4619      	mov	r1, r3
 80040f8:	f000 fd74 	bl	8004be4 <shift>
 80040fc:	4603      	mov	r3, r0
 80040fe:	b29a      	uxth	r2, r3
 8004100:	4b5e      	ldr	r3, [pc, #376]	; (800427c <CAN_2_Receive+0x9f0>)
 8004102:	801a      	strh	r2, [r3, #0]
	t_tyre_FR_2 = shift(*t_tyre_FR_2_MSB,*t_tyre_FR_2_LSB);
 8004104:	4b5e      	ldr	r3, [pc, #376]	; (8004280 <CAN_2_Receive+0x9f4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	781a      	ldrb	r2, [r3, #0]
 800410a:	4b5e      	ldr	r3, [pc, #376]	; (8004284 <CAN_2_Receive+0x9f8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	4610      	mov	r0, r2
 8004112:	4619      	mov	r1, r3
 8004114:	f000 fd66 	bl	8004be4 <shift>
 8004118:	4603      	mov	r3, r0
 800411a:	b29a      	uxth	r2, r3
 800411c:	4b5a      	ldr	r3, [pc, #360]	; (8004288 <CAN_2_Receive+0x9fc>)
 800411e:	801a      	strh	r2, [r3, #0]
	t_tyre_FR_3 = shift(*t_tyre_FR_3_MSB,*t_tyre_FR_3_LSB);
 8004120:	4b5a      	ldr	r3, [pc, #360]	; (800428c <CAN_2_Receive+0xa00>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	4b5a      	ldr	r3, [pc, #360]	; (8004290 <CAN_2_Receive+0xa04>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	4610      	mov	r0, r2
 800412e:	4619      	mov	r1, r3
 8004130:	f000 fd58 	bl	8004be4 <shift>
 8004134:	4603      	mov	r3, r0
 8004136:	b29a      	uxth	r2, r3
 8004138:	4b56      	ldr	r3, [pc, #344]	; (8004294 <CAN_2_Receive+0xa08>)
 800413a:	801a      	strh	r2, [r3, #0]
	t_tyre_FR_4 = shift(*t_tyre_FR_4_MSB,*t_tyre_FR_4_LSB);
 800413c:	4b56      	ldr	r3, [pc, #344]	; (8004298 <CAN_2_Receive+0xa0c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	781a      	ldrb	r2, [r3, #0]
 8004142:	4b56      	ldr	r3, [pc, #344]	; (800429c <CAN_2_Receive+0xa10>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	4610      	mov	r0, r2
 800414a:	4619      	mov	r1, r3
 800414c:	f000 fd4a 	bl	8004be4 <shift>
 8004150:	4603      	mov	r3, r0
 8004152:	b29a      	uxth	r2, r3
 8004154:	4b52      	ldr	r3, [pc, #328]	; (80042a0 <CAN_2_Receive+0xa14>)
 8004156:	801a      	strh	r2, [r3, #0]
	t_tyre_FR_5 = shift(*t_tyre_FR_5_MSB,*t_tyre_FR_5_LSB);
 8004158:	4b52      	ldr	r3, [pc, #328]	; (80042a4 <CAN_2_Receive+0xa18>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	781a      	ldrb	r2, [r3, #0]
 800415e:	4b52      	ldr	r3, [pc, #328]	; (80042a8 <CAN_2_Receive+0xa1c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	4610      	mov	r0, r2
 8004166:	4619      	mov	r1, r3
 8004168:	f000 fd3c 	bl	8004be4 <shift>
 800416c:	4603      	mov	r3, r0
 800416e:	b29a      	uxth	r2, r3
 8004170:	4b4e      	ldr	r3, [pc, #312]	; (80042ac <CAN_2_Receive+0xa20>)
 8004172:	801a      	strh	r2, [r3, #0]
	t_tyre_FR_6 = shift(*t_tyre_FR_6_MSB,*t_tyre_FR_6_LSB);
 8004174:	4b4e      	ldr	r3, [pc, #312]	; (80042b0 <CAN_2_Receive+0xa24>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	781a      	ldrb	r2, [r3, #0]
 800417a:	4b4e      	ldr	r3, [pc, #312]	; (80042b4 <CAN_2_Receive+0xa28>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	f000 fd2e 	bl	8004be4 <shift>
 8004188:	4603      	mov	r3, r0
 800418a:	b29a      	uxth	r2, r3
 800418c:	4b4a      	ldr	r3, [pc, #296]	; (80042b8 <CAN_2_Receive+0xa2c>)
 800418e:	801a      	strh	r2, [r3, #0]
	t_tyre_FR_7 = shift(*t_tyre_FR_7_MSB,*t_tyre_FR_7_LSB);
 8004190:	4b4a      	ldr	r3, [pc, #296]	; (80042bc <CAN_2_Receive+0xa30>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	4b4a      	ldr	r3, [pc, #296]	; (80042c0 <CAN_2_Receive+0xa34>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	f000 fd20 	bl	8004be4 <shift>
 80041a4:	4603      	mov	r3, r0
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	4b46      	ldr	r3, [pc, #280]	; (80042c4 <CAN_2_Receive+0xa38>)
 80041aa:	801a      	strh	r2, [r3, #0]
	t_tyre_FR_8 = shift(*t_tyre_FR_8_MSB,*t_tyre_FR_8_LSB);
 80041ac:	4b46      	ldr	r3, [pc, #280]	; (80042c8 <CAN_2_Receive+0xa3c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	781a      	ldrb	r2, [r3, #0]
 80041b2:	4b46      	ldr	r3, [pc, #280]	; (80042cc <CAN_2_Receive+0xa40>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	4610      	mov	r0, r2
 80041ba:	4619      	mov	r1, r3
 80041bc:	f000 fd12 	bl	8004be4 <shift>
 80041c0:	4603      	mov	r3, r0
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	4b42      	ldr	r3, [pc, #264]	; (80042d0 <CAN_2_Receive+0xa44>)
 80041c6:	801a      	strh	r2, [r3, #0]

	// t_tyre RL
	t_tyre_RL_1 = shift(*t_tyre_RL_1_MSB,*t_tyre_RL_1_LSB);
 80041c8:	4b42      	ldr	r3, [pc, #264]	; (80042d4 <CAN_2_Receive+0xa48>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	781a      	ldrb	r2, [r3, #0]
 80041ce:	4b42      	ldr	r3, [pc, #264]	; (80042d8 <CAN_2_Receive+0xa4c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	4610      	mov	r0, r2
 80041d6:	4619      	mov	r1, r3
 80041d8:	f000 fd04 	bl	8004be4 <shift>
 80041dc:	4603      	mov	r3, r0
 80041de:	b29a      	uxth	r2, r3
 80041e0:	4b3e      	ldr	r3, [pc, #248]	; (80042dc <CAN_2_Receive+0xa50>)
 80041e2:	801a      	strh	r2, [r3, #0]
	t_tyre_RL_2 = shift(*t_tyre_RL_2_MSB,*t_tyre_RL_2_LSB);
 80041e4:	4b3e      	ldr	r3, [pc, #248]	; (80042e0 <CAN_2_Receive+0xa54>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	e07c      	b.n	80042e4 <CAN_2_Receive+0xa58>
 80041ea:	bf00      	nop
 80041ec:	200004c0 	.word	0x200004c0
 80041f0:	3d666666 	.word	0x3d666666
 80041f4:	20000618 	.word	0x20000618
 80041f8:	200004c4 	.word	0x200004c4
 80041fc:	200004c8 	.word	0x200004c8
 8004200:	3c7aacda 	.word	0x3c7aacda
 8004204:	200004cc 	.word	0x200004cc
 8004208:	390560fd 	.word	0x390560fd
 800420c:	4085a858 	.word	0x4085a858
 8004210:	200004d0 	.word	0x200004d0
 8004214:	200004d4 	.word	0x200004d4
 8004218:	200004d8 	.word	0x200004d8
 800421c:	200005d4 	.word	0x200005d4
 8004220:	200004dc 	.word	0x200004dc
 8004224:	200004e0 	.word	0x200004e0
 8004228:	200005d6 	.word	0x200005d6
 800422c:	200004e4 	.word	0x200004e4
 8004230:	200004e8 	.word	0x200004e8
 8004234:	200005d8 	.word	0x200005d8
 8004238:	200004ec 	.word	0x200004ec
 800423c:	200004f0 	.word	0x200004f0
 8004240:	200005da 	.word	0x200005da
 8004244:	200004f4 	.word	0x200004f4
 8004248:	200004f8 	.word	0x200004f8
 800424c:	200005dc 	.word	0x200005dc
 8004250:	200004fc 	.word	0x200004fc
 8004254:	20000500 	.word	0x20000500
 8004258:	200005de 	.word	0x200005de
 800425c:	20000504 	.word	0x20000504
 8004260:	20000508 	.word	0x20000508
 8004264:	200005e0 	.word	0x200005e0
 8004268:	2000050c 	.word	0x2000050c
 800426c:	20000510 	.word	0x20000510
 8004270:	200005e2 	.word	0x200005e2
 8004274:	20000514 	.word	0x20000514
 8004278:	20000518 	.word	0x20000518
 800427c:	200005e4 	.word	0x200005e4
 8004280:	2000051c 	.word	0x2000051c
 8004284:	20000520 	.word	0x20000520
 8004288:	200005e6 	.word	0x200005e6
 800428c:	20000524 	.word	0x20000524
 8004290:	20000528 	.word	0x20000528
 8004294:	200005e8 	.word	0x200005e8
 8004298:	2000052c 	.word	0x2000052c
 800429c:	20000530 	.word	0x20000530
 80042a0:	200005ea 	.word	0x200005ea
 80042a4:	20000534 	.word	0x20000534
 80042a8:	20000538 	.word	0x20000538
 80042ac:	200005ec 	.word	0x200005ec
 80042b0:	2000053c 	.word	0x2000053c
 80042b4:	20000540 	.word	0x20000540
 80042b8:	200005ee 	.word	0x200005ee
 80042bc:	20000544 	.word	0x20000544
 80042c0:	20000548 	.word	0x20000548
 80042c4:	200005f0 	.word	0x200005f0
 80042c8:	2000054c 	.word	0x2000054c
 80042cc:	20000550 	.word	0x20000550
 80042d0:	200005f2 	.word	0x200005f2
 80042d4:	20000554 	.word	0x20000554
 80042d8:	20000558 	.word	0x20000558
 80042dc:	200005f4 	.word	0x200005f4
 80042e0:	2000055c 	.word	0x2000055c
 80042e4:	781a      	ldrb	r2, [r3, #0]
 80042e6:	4bad      	ldr	r3, [pc, #692]	; (800459c <CAN_2_Receive+0xd10>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	4610      	mov	r0, r2
 80042ee:	4619      	mov	r1, r3
 80042f0:	f000 fc78 	bl	8004be4 <shift>
 80042f4:	4603      	mov	r3, r0
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	4ba9      	ldr	r3, [pc, #676]	; (80045a0 <CAN_2_Receive+0xd14>)
 80042fa:	801a      	strh	r2, [r3, #0]
	t_tyre_RL_3 = shift(*t_tyre_RL_3_MSB,*t_tyre_RL_3_LSB);
 80042fc:	4ba9      	ldr	r3, [pc, #676]	; (80045a4 <CAN_2_Receive+0xd18>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	781a      	ldrb	r2, [r3, #0]
 8004302:	4ba9      	ldr	r3, [pc, #676]	; (80045a8 <CAN_2_Receive+0xd1c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	f000 fc6a 	bl	8004be4 <shift>
 8004310:	4603      	mov	r3, r0
 8004312:	b29a      	uxth	r2, r3
 8004314:	4ba5      	ldr	r3, [pc, #660]	; (80045ac <CAN_2_Receive+0xd20>)
 8004316:	801a      	strh	r2, [r3, #0]
	t_tyre_RL_4 = shift(*t_tyre_RL_4_MSB,*t_tyre_RL_4_LSB);
 8004318:	4ba5      	ldr	r3, [pc, #660]	; (80045b0 <CAN_2_Receive+0xd24>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	781a      	ldrb	r2, [r3, #0]
 800431e:	4ba5      	ldr	r3, [pc, #660]	; (80045b4 <CAN_2_Receive+0xd28>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	f000 fc5c 	bl	8004be4 <shift>
 800432c:	4603      	mov	r3, r0
 800432e:	b29a      	uxth	r2, r3
 8004330:	4ba1      	ldr	r3, [pc, #644]	; (80045b8 <CAN_2_Receive+0xd2c>)
 8004332:	801a      	strh	r2, [r3, #0]
	t_tyre_RL_5 = shift(*t_tyre_RL_5_MSB,*t_tyre_RL_5_LSB);
 8004334:	4ba1      	ldr	r3, [pc, #644]	; (80045bc <CAN_2_Receive+0xd30>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	781a      	ldrb	r2, [r3, #0]
 800433a:	4ba1      	ldr	r3, [pc, #644]	; (80045c0 <CAN_2_Receive+0xd34>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	4610      	mov	r0, r2
 8004342:	4619      	mov	r1, r3
 8004344:	f000 fc4e 	bl	8004be4 <shift>
 8004348:	4603      	mov	r3, r0
 800434a:	b29a      	uxth	r2, r3
 800434c:	4b9d      	ldr	r3, [pc, #628]	; (80045c4 <CAN_2_Receive+0xd38>)
 800434e:	801a      	strh	r2, [r3, #0]
	t_tyre_RL_6 = shift(*t_tyre_RL_6_MSB,*t_tyre_RL_6_LSB);
 8004350:	4b9d      	ldr	r3, [pc, #628]	; (80045c8 <CAN_2_Receive+0xd3c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	781a      	ldrb	r2, [r3, #0]
 8004356:	4b9d      	ldr	r3, [pc, #628]	; (80045cc <CAN_2_Receive+0xd40>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	4610      	mov	r0, r2
 800435e:	4619      	mov	r1, r3
 8004360:	f000 fc40 	bl	8004be4 <shift>
 8004364:	4603      	mov	r3, r0
 8004366:	b29a      	uxth	r2, r3
 8004368:	4b99      	ldr	r3, [pc, #612]	; (80045d0 <CAN_2_Receive+0xd44>)
 800436a:	801a      	strh	r2, [r3, #0]
	t_tyre_RL_7 = shift(*t_tyre_RL_7_MSB,*t_tyre_RL_7_LSB);
 800436c:	4b99      	ldr	r3, [pc, #612]	; (80045d4 <CAN_2_Receive+0xd48>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	781a      	ldrb	r2, [r3, #0]
 8004372:	4b99      	ldr	r3, [pc, #612]	; (80045d8 <CAN_2_Receive+0xd4c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	4610      	mov	r0, r2
 800437a:	4619      	mov	r1, r3
 800437c:	f000 fc32 	bl	8004be4 <shift>
 8004380:	4603      	mov	r3, r0
 8004382:	b29a      	uxth	r2, r3
 8004384:	4b95      	ldr	r3, [pc, #596]	; (80045dc <CAN_2_Receive+0xd50>)
 8004386:	801a      	strh	r2, [r3, #0]
	t_tyre_RL_8 = shift(*t_tyre_RL_8_MSB,*t_tyre_RL_8_LSB);
 8004388:	4b95      	ldr	r3, [pc, #596]	; (80045e0 <CAN_2_Receive+0xd54>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	781a      	ldrb	r2, [r3, #0]
 800438e:	4b95      	ldr	r3, [pc, #596]	; (80045e4 <CAN_2_Receive+0xd58>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	4610      	mov	r0, r2
 8004396:	4619      	mov	r1, r3
 8004398:	f000 fc24 	bl	8004be4 <shift>
 800439c:	4603      	mov	r3, r0
 800439e:	b29a      	uxth	r2, r3
 80043a0:	4b91      	ldr	r3, [pc, #580]	; (80045e8 <CAN_2_Receive+0xd5c>)
 80043a2:	801a      	strh	r2, [r3, #0]

	t_tyre_RR_1 = shift(*t_tyre_RR_1_MSB,*t_tyre_RR_1_LSB);
 80043a4:	4b91      	ldr	r3, [pc, #580]	; (80045ec <CAN_2_Receive+0xd60>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	781a      	ldrb	r2, [r3, #0]
 80043aa:	4b91      	ldr	r3, [pc, #580]	; (80045f0 <CAN_2_Receive+0xd64>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	4610      	mov	r0, r2
 80043b2:	4619      	mov	r1, r3
 80043b4:	f000 fc16 	bl	8004be4 <shift>
 80043b8:	4603      	mov	r3, r0
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	4b8d      	ldr	r3, [pc, #564]	; (80045f4 <CAN_2_Receive+0xd68>)
 80043be:	801a      	strh	r2, [r3, #0]
	t_tyre_RR_2 = shift(*t_tyre_RR_2_MSB,*t_tyre_RR_2_LSB);
 80043c0:	4b8d      	ldr	r3, [pc, #564]	; (80045f8 <CAN_2_Receive+0xd6c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	4b8d      	ldr	r3, [pc, #564]	; (80045fc <CAN_2_Receive+0xd70>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	f000 fc08 	bl	8004be4 <shift>
 80043d4:	4603      	mov	r3, r0
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	4b89      	ldr	r3, [pc, #548]	; (8004600 <CAN_2_Receive+0xd74>)
 80043da:	801a      	strh	r2, [r3, #0]
	t_tyre_RR_3 = shift(*t_tyre_RR_3_MSB,*t_tyre_RR_3_LSB);
 80043dc:	4b89      	ldr	r3, [pc, #548]	; (8004604 <CAN_2_Receive+0xd78>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	4b89      	ldr	r3, [pc, #548]	; (8004608 <CAN_2_Receive+0xd7c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	f000 fbfa 	bl	8004be4 <shift>
 80043f0:	4603      	mov	r3, r0
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	4b85      	ldr	r3, [pc, #532]	; (800460c <CAN_2_Receive+0xd80>)
 80043f6:	801a      	strh	r2, [r3, #0]
	t_tyre_RR_4 = shift(*t_tyre_RR_4_MSB,*t_tyre_RR_4_LSB);
 80043f8:	4b85      	ldr	r3, [pc, #532]	; (8004610 <CAN_2_Receive+0xd84>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	781a      	ldrb	r2, [r3, #0]
 80043fe:	4b85      	ldr	r3, [pc, #532]	; (8004614 <CAN_2_Receive+0xd88>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	4610      	mov	r0, r2
 8004406:	4619      	mov	r1, r3
 8004408:	f000 fbec 	bl	8004be4 <shift>
 800440c:	4603      	mov	r3, r0
 800440e:	b29a      	uxth	r2, r3
 8004410:	4b81      	ldr	r3, [pc, #516]	; (8004618 <CAN_2_Receive+0xd8c>)
 8004412:	801a      	strh	r2, [r3, #0]
	t_tyre_RR_5 = shift(*t_tyre_RR_5_MSB,*t_tyre_RR_5_LSB);
 8004414:	4b81      	ldr	r3, [pc, #516]	; (800461c <CAN_2_Receive+0xd90>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	781a      	ldrb	r2, [r3, #0]
 800441a:	4b81      	ldr	r3, [pc, #516]	; (8004620 <CAN_2_Receive+0xd94>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	4610      	mov	r0, r2
 8004422:	4619      	mov	r1, r3
 8004424:	f000 fbde 	bl	8004be4 <shift>
 8004428:	4603      	mov	r3, r0
 800442a:	b29a      	uxth	r2, r3
 800442c:	4b7d      	ldr	r3, [pc, #500]	; (8004624 <CAN_2_Receive+0xd98>)
 800442e:	801a      	strh	r2, [r3, #0]
	t_tyre_RR_6 = shift(*t_tyre_RR_6_MSB,*t_tyre_RR_6_LSB);
 8004430:	4b7d      	ldr	r3, [pc, #500]	; (8004628 <CAN_2_Receive+0xd9c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	781a      	ldrb	r2, [r3, #0]
 8004436:	4b7d      	ldr	r3, [pc, #500]	; (800462c <CAN_2_Receive+0xda0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	4610      	mov	r0, r2
 800443e:	4619      	mov	r1, r3
 8004440:	f000 fbd0 	bl	8004be4 <shift>
 8004444:	4603      	mov	r3, r0
 8004446:	b29a      	uxth	r2, r3
 8004448:	4b79      	ldr	r3, [pc, #484]	; (8004630 <CAN_2_Receive+0xda4>)
 800444a:	801a      	strh	r2, [r3, #0]
	t_tyre_RR_7 = shift(*t_tyre_RR_7_MSB,*t_tyre_RR_7_LSB);
 800444c:	4b79      	ldr	r3, [pc, #484]	; (8004634 <CAN_2_Receive+0xda8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	781a      	ldrb	r2, [r3, #0]
 8004452:	4b79      	ldr	r3, [pc, #484]	; (8004638 <CAN_2_Receive+0xdac>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	f000 fbc2 	bl	8004be4 <shift>
 8004460:	4603      	mov	r3, r0
 8004462:	b29a      	uxth	r2, r3
 8004464:	4b75      	ldr	r3, [pc, #468]	; (800463c <CAN_2_Receive+0xdb0>)
 8004466:	801a      	strh	r2, [r3, #0]
	t_tyre_RR_8 = shift(*t_tyre_RR_8_MSB,*t_tyre_RR_8_LSB);
 8004468:	4b75      	ldr	r3, [pc, #468]	; (8004640 <CAN_2_Receive+0xdb4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	781a      	ldrb	r2, [r3, #0]
 800446e:	4b75      	ldr	r3, [pc, #468]	; (8004644 <CAN_2_Receive+0xdb8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	4610      	mov	r0, r2
 8004476:	4619      	mov	r1, r3
 8004478:	f000 fbb4 	bl	8004be4 <shift>
 800447c:	4603      	mov	r3, r0
 800447e:	b29a      	uxth	r2, r3
 8004480:	4b71      	ldr	r3, [pc, #452]	; (8004648 <CAN_2_Receive+0xdbc>)
 8004482:	801a      	strh	r2, [r3, #0]


	carData.t_tyre_FL_1 = ((float)t_tyre_FL_1*0.1f)-100.0f;
 8004484:	4b71      	ldr	r3, [pc, #452]	; (800464c <CAN_2_Receive+0xdc0>)
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	ee07 3a90 	vmov	s15, r3
 800448c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004490:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8004650 <CAN_2_Receive+0xdc4>
 8004494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004498:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8004654 <CAN_2_Receive+0xdc8>
 800449c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044a4:	edc7 7a01 	vstr	s15, [r7, #4]
 80044a8:	88bb      	ldrh	r3, [r7, #4]
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	4b6a      	ldr	r3, [pc, #424]	; (8004658 <CAN_2_Receive+0xdcc>)
 80044ae:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	carData.t_tyre_FL_2 = ((float)t_tyre_FL_2*0.1f)-100.0f;
 80044b2:	4b6a      	ldr	r3, [pc, #424]	; (800465c <CAN_2_Receive+0xdd0>)
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044be:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8004650 <CAN_2_Receive+0xdc4>
 80044c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044c6:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8004654 <CAN_2_Receive+0xdc8>
 80044ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80044d6:	88bb      	ldrh	r3, [r7, #4]
 80044d8:	b29a      	uxth	r2, r3
 80044da:	4b5f      	ldr	r3, [pc, #380]	; (8004658 <CAN_2_Receive+0xdcc>)
 80044dc:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	carData.t_tyre_FL_3 = ((float)t_tyre_FL_3*0.1f)-100.0f;
 80044e0:	4b5f      	ldr	r3, [pc, #380]	; (8004660 <CAN_2_Receive+0xdd4>)
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	ee07 3a90 	vmov	s15, r3
 80044e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ec:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8004650 <CAN_2_Receive+0xdc4>
 80044f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044f4:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8004654 <CAN_2_Receive+0xdc8>
 80044f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004500:	edc7 7a01 	vstr	s15, [r7, #4]
 8004504:	88bb      	ldrh	r3, [r7, #4]
 8004506:	b29a      	uxth	r2, r3
 8004508:	4b53      	ldr	r3, [pc, #332]	; (8004658 <CAN_2_Receive+0xdcc>)
 800450a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	carData.t_tyre_FL_4 = ((float)t_tyre_FL_4*0.1f)-100.0f;
 800450e:	4b55      	ldr	r3, [pc, #340]	; (8004664 <CAN_2_Receive+0xdd8>)
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8004650 <CAN_2_Receive+0xdc4>
 800451e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004522:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8004654 <CAN_2_Receive+0xdc8>
 8004526:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800452a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800452e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004532:	88bb      	ldrh	r3, [r7, #4]
 8004534:	b29a      	uxth	r2, r3
 8004536:	4b48      	ldr	r3, [pc, #288]	; (8004658 <CAN_2_Receive+0xdcc>)
 8004538:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	// LMO_09
	carData.t_tyre_FL_5 = ((float)t_tyre_FL_5*0.1f)-100.0f;
 800453c:	4b4a      	ldr	r3, [pc, #296]	; (8004668 <CAN_2_Receive+0xddc>)
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	ee07 3a90 	vmov	s15, r3
 8004544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004548:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8004650 <CAN_2_Receive+0xdc4>
 800454c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004550:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004654 <CAN_2_Receive+0xdc8>
 8004554:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800455c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004560:	88bb      	ldrh	r3, [r7, #4]
 8004562:	b29a      	uxth	r2, r3
 8004564:	4b3c      	ldr	r3, [pc, #240]	; (8004658 <CAN_2_Receive+0xdcc>)
 8004566:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	carData.t_tyre_FL_6 = ((float)t_tyre_FL_6*0.1f)-100.0f;
 800456a:	4b40      	ldr	r3, [pc, #256]	; (800466c <CAN_2_Receive+0xde0>)
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004576:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004650 <CAN_2_Receive+0xdc4>
 800457a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800457e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004654 <CAN_2_Receive+0xdc8>
 8004582:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800458a:	edc7 7a01 	vstr	s15, [r7, #4]
 800458e:	88bb      	ldrh	r3, [r7, #4]
 8004590:	b29a      	uxth	r2, r3
 8004592:	4b31      	ldr	r3, [pc, #196]	; (8004658 <CAN_2_Receive+0xdcc>)
 8004594:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8004598:	e06a      	b.n	8004670 <CAN_2_Receive+0xde4>
 800459a:	bf00      	nop
 800459c:	20000560 	.word	0x20000560
 80045a0:	200005f6 	.word	0x200005f6
 80045a4:	20000564 	.word	0x20000564
 80045a8:	20000568 	.word	0x20000568
 80045ac:	200005f8 	.word	0x200005f8
 80045b0:	2000056c 	.word	0x2000056c
 80045b4:	20000570 	.word	0x20000570
 80045b8:	200005fa 	.word	0x200005fa
 80045bc:	20000574 	.word	0x20000574
 80045c0:	20000578 	.word	0x20000578
 80045c4:	200005fc 	.word	0x200005fc
 80045c8:	2000057c 	.word	0x2000057c
 80045cc:	20000580 	.word	0x20000580
 80045d0:	200005fe 	.word	0x200005fe
 80045d4:	20000584 	.word	0x20000584
 80045d8:	20000588 	.word	0x20000588
 80045dc:	20000600 	.word	0x20000600
 80045e0:	2000058c 	.word	0x2000058c
 80045e4:	20000590 	.word	0x20000590
 80045e8:	20000602 	.word	0x20000602
 80045ec:	20000594 	.word	0x20000594
 80045f0:	20000598 	.word	0x20000598
 80045f4:	20000604 	.word	0x20000604
 80045f8:	2000059c 	.word	0x2000059c
 80045fc:	200005a0 	.word	0x200005a0
 8004600:	20000606 	.word	0x20000606
 8004604:	200005a4 	.word	0x200005a4
 8004608:	200005a8 	.word	0x200005a8
 800460c:	20000608 	.word	0x20000608
 8004610:	200005ac 	.word	0x200005ac
 8004614:	200005b0 	.word	0x200005b0
 8004618:	2000060a 	.word	0x2000060a
 800461c:	200005b4 	.word	0x200005b4
 8004620:	200005b8 	.word	0x200005b8
 8004624:	2000060c 	.word	0x2000060c
 8004628:	200005bc 	.word	0x200005bc
 800462c:	200005c0 	.word	0x200005c0
 8004630:	2000060e 	.word	0x2000060e
 8004634:	200005c4 	.word	0x200005c4
 8004638:	200005c8 	.word	0x200005c8
 800463c:	20000610 	.word	0x20000610
 8004640:	200005cc 	.word	0x200005cc
 8004644:	200005d0 	.word	0x200005d0
 8004648:	20000612 	.word	0x20000612
 800464c:	200005d4 	.word	0x200005d4
 8004650:	3dcccccd 	.word	0x3dcccccd
 8004654:	42c80000 	.word	0x42c80000
 8004658:	20000618 	.word	0x20000618
 800465c:	200005d6 	.word	0x200005d6
 8004660:	200005d8 	.word	0x200005d8
 8004664:	200005da 	.word	0x200005da
 8004668:	200005dc 	.word	0x200005dc
 800466c:	200005de 	.word	0x200005de
	carData.t_tyre_FL_7 = ((float)t_tyre_FL_7*0.1f)-100.0f;
 8004670:	4bd0      	ldr	r3, [pc, #832]	; (80049b4 <CAN_2_Receive+0x1128>)
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	ee07 3a90 	vmov	s15, r3
 8004678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467c:	ed9f 7ace 	vldr	s14, [pc, #824]	; 80049b8 <CAN_2_Receive+0x112c>
 8004680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004684:	ed9f 7acd 	vldr	s14, [pc, #820]	; 80049bc <CAN_2_Receive+0x1130>
 8004688:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800468c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004690:	edc7 7a01 	vstr	s15, [r7, #4]
 8004694:	88bb      	ldrh	r3, [r7, #4]
 8004696:	b29a      	uxth	r2, r3
 8004698:	4bc9      	ldr	r3, [pc, #804]	; (80049c0 <CAN_2_Receive+0x1134>)
 800469a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	carData.t_tyre_FL_8 = ((float)t_tyre_FL_8*0.1f)-100.0f;
 800469e:	4bc9      	ldr	r3, [pc, #804]	; (80049c4 <CAN_2_Receive+0x1138>)
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046aa:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 80049b8 <CAN_2_Receive+0x112c>
 80046ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046b2:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 80049bc <CAN_2_Receive+0x1130>
 80046b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046be:	edc7 7a01 	vstr	s15, [r7, #4]
 80046c2:	88bb      	ldrh	r3, [r7, #4]
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	4bbe      	ldr	r3, [pc, #760]	; (80049c0 <CAN_2_Receive+0x1134>)
 80046c8:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88


	//LMO_10
	carData.t_tyre_FR_1 = ((float)t_tyre_FR_1*0.1f)-100.0f;
 80046cc:	4bbe      	ldr	r3, [pc, #760]	; (80049c8 <CAN_2_Receive+0x113c>)
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	ee07 3a90 	vmov	s15, r3
 80046d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d8:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80049b8 <CAN_2_Receive+0x112c>
 80046dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046e0:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 80049bc <CAN_2_Receive+0x1130>
 80046e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ec:	edc7 7a01 	vstr	s15, [r7, #4]
 80046f0:	88bb      	ldrh	r3, [r7, #4]
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	4bb2      	ldr	r3, [pc, #712]	; (80049c0 <CAN_2_Receive+0x1134>)
 80046f6:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	carData.t_tyre_FR_2 = ((float)t_tyre_FR_2*0.1f)-100.0f;
 80046fa:	4bb4      	ldr	r3, [pc, #720]	; (80049cc <CAN_2_Receive+0x1140>)
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004706:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80049b8 <CAN_2_Receive+0x112c>
 800470a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800470e:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80049bc <CAN_2_Receive+0x1130>
 8004712:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800471a:	edc7 7a01 	vstr	s15, [r7, #4]
 800471e:	88bb      	ldrh	r3, [r7, #4]
 8004720:	b29a      	uxth	r2, r3
 8004722:	4ba7      	ldr	r3, [pc, #668]	; (80049c0 <CAN_2_Receive+0x1134>)
 8004724:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	carData.t_tyre_FR_3 = ((float)t_tyre_FR_3*0.1f)-100.0f;
 8004728:	4ba9      	ldr	r3, [pc, #676]	; (80049d0 <CAN_2_Receive+0x1144>)
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	ee07 3a90 	vmov	s15, r3
 8004730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004734:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 80049b8 <CAN_2_Receive+0x112c>
 8004738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800473c:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 80049bc <CAN_2_Receive+0x1130>
 8004740:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004748:	edc7 7a01 	vstr	s15, [r7, #4]
 800474c:	88bb      	ldrh	r3, [r7, #4]
 800474e:	b29a      	uxth	r2, r3
 8004750:	4b9b      	ldr	r3, [pc, #620]	; (80049c0 <CAN_2_Receive+0x1134>)
 8004752:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
	carData.t_tyre_FR_4 = ((float)t_tyre_FR_4*0.1f)-100.0f;
 8004756:	4b9f      	ldr	r3, [pc, #636]	; (80049d4 <CAN_2_Receive+0x1148>)
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004762:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80049b8 <CAN_2_Receive+0x112c>
 8004766:	ee67 7a87 	vmul.f32	s15, s15, s14
 800476a:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80049bc <CAN_2_Receive+0x1130>
 800476e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004776:	edc7 7a01 	vstr	s15, [r7, #4]
 800477a:	88bb      	ldrh	r3, [r7, #4]
 800477c:	b29a      	uxth	r2, r3
 800477e:	4b90      	ldr	r3, [pc, #576]	; (80049c0 <CAN_2_Receive+0x1134>)
 8004780:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	// LMO_11
	carData.t_tyre_FR_5 = ((float)t_tyre_FR_5*0.1f)-100.0f;
 8004784:	4b94      	ldr	r3, [pc, #592]	; (80049d8 <CAN_2_Receive+0x114c>)
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	ee07 3a90 	vmov	s15, r3
 800478c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004790:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80049b8 <CAN_2_Receive+0x112c>
 8004794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004798:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80049bc <CAN_2_Receive+0x1130>
 800479c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a4:	edc7 7a01 	vstr	s15, [r7, #4]
 80047a8:	88bb      	ldrh	r3, [r7, #4]
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	4b84      	ldr	r3, [pc, #528]	; (80049c0 <CAN_2_Receive+0x1134>)
 80047ae:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	carData.t_tyre_FR_6 = ((float)t_tyre_FR_6*0.1f)-100.0f;
 80047b2:	4b8a      	ldr	r3, [pc, #552]	; (80049dc <CAN_2_Receive+0x1150>)
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047be:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80049b8 <CAN_2_Receive+0x112c>
 80047c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047c6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80049bc <CAN_2_Receive+0x1130>
 80047ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80047d6:	88bb      	ldrh	r3, [r7, #4]
 80047d8:	b29a      	uxth	r2, r3
 80047da:	4b79      	ldr	r3, [pc, #484]	; (80049c0 <CAN_2_Receive+0x1134>)
 80047dc:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	carData.t_tyre_FR_7 = ((float)t_tyre_FR_7*0.1f)-100.0f;
 80047e0:	4b7f      	ldr	r3, [pc, #508]	; (80049e0 <CAN_2_Receive+0x1154>)
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	ee07 3a90 	vmov	s15, r3
 80047e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ec:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80049b8 <CAN_2_Receive+0x112c>
 80047f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047f4:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80049bc <CAN_2_Receive+0x1130>
 80047f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004800:	edc7 7a01 	vstr	s15, [r7, #4]
 8004804:	88bb      	ldrh	r3, [r7, #4]
 8004806:	b29a      	uxth	r2, r3
 8004808:	4b6d      	ldr	r3, [pc, #436]	; (80049c0 <CAN_2_Receive+0x1134>)
 800480a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	carData.t_tyre_FR_8 = ((float)t_tyre_FR_8*0.1f)-100.0f;
 800480e:	4b75      	ldr	r3, [pc, #468]	; (80049e4 <CAN_2_Receive+0x1158>)
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80049b8 <CAN_2_Receive+0x112c>
 800481e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004822:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80049bc <CAN_2_Receive+0x1130>
 8004826:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800482a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800482e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004832:	88bb      	ldrh	r3, [r7, #4]
 8004834:	b29a      	uxth	r2, r3
 8004836:	4b62      	ldr	r3, [pc, #392]	; (80049c0 <CAN_2_Receive+0x1134>)
 8004838:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98

	//LMO_12
	carData.t_tyre_RL_1 = ((float)t_tyre_RL_1*0.1f)-100.0f;
 800483c:	4b6a      	ldr	r3, [pc, #424]	; (80049e8 <CAN_2_Receive+0x115c>)
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	ee07 3a90 	vmov	s15, r3
 8004844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004848:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80049b8 <CAN_2_Receive+0x112c>
 800484c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004850:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80049bc <CAN_2_Receive+0x1130>
 8004854:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800485c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004860:	88bb      	ldrh	r3, [r7, #4]
 8004862:	b29a      	uxth	r2, r3
 8004864:	4b56      	ldr	r3, [pc, #344]	; (80049c0 <CAN_2_Receive+0x1134>)
 8004866:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	carData.t_tyre_RL_2 = ((float)t_tyre_RL_2*0.1f)-100.0f;
 800486a:	4b60      	ldr	r3, [pc, #384]	; (80049ec <CAN_2_Receive+0x1160>)
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004876:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80049b8 <CAN_2_Receive+0x112c>
 800487a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800487e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80049bc <CAN_2_Receive+0x1130>
 8004882:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800488a:	edc7 7a01 	vstr	s15, [r7, #4]
 800488e:	88bb      	ldrh	r3, [r7, #4]
 8004890:	b29a      	uxth	r2, r3
 8004892:	4b4b      	ldr	r3, [pc, #300]	; (80049c0 <CAN_2_Receive+0x1134>)
 8004894:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	carData.t_tyre_RL_3 = ((float)t_tyre_RL_3*0.1f)-100.0f;
 8004898:	4b55      	ldr	r3, [pc, #340]	; (80049f0 <CAN_2_Receive+0x1164>)
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	ee07 3a90 	vmov	s15, r3
 80048a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80049b8 <CAN_2_Receive+0x112c>
 80048a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048ac:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80049bc <CAN_2_Receive+0x1130>
 80048b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80048b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80048bc:	88bb      	ldrh	r3, [r7, #4]
 80048be:	b29a      	uxth	r2, r3
 80048c0:	4b3f      	ldr	r3, [pc, #252]	; (80049c0 <CAN_2_Receive+0x1134>)
 80048c2:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
	carData.t_tyre_RL_4 = ((float)t_tyre_RL_4*0.1f)-100.0f;
 80048c6:	4b4b      	ldr	r3, [pc, #300]	; (80049f4 <CAN_2_Receive+0x1168>)
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80049b8 <CAN_2_Receive+0x112c>
 80048d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048da:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80049bc <CAN_2_Receive+0x1130>
 80048de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80048e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80048ea:	88bb      	ldrh	r3, [r7, #4]
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	4b34      	ldr	r3, [pc, #208]	; (80049c0 <CAN_2_Receive+0x1134>)
 80048f0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	// LMO_13
	carData.t_tyre_RL_5 =((float)t_tyre_RL_5*0.1f)-100.0f;
 80048f4:	4b40      	ldr	r3, [pc, #256]	; (80049f8 <CAN_2_Receive+0x116c>)
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	ee07 3a90 	vmov	s15, r3
 80048fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004900:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80049b8 <CAN_2_Receive+0x112c>
 8004904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004908:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80049bc <CAN_2_Receive+0x1130>
 800490c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004914:	edc7 7a01 	vstr	s15, [r7, #4]
 8004918:	88bb      	ldrh	r3, [r7, #4]
 800491a:	b29a      	uxth	r2, r3
 800491c:	4b28      	ldr	r3, [pc, #160]	; (80049c0 <CAN_2_Receive+0x1134>)
 800491e:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	carData.t_tyre_RL_6 =((float)t_tyre_RL_6*0.1f)-100.0f;
 8004922:	4b36      	ldr	r3, [pc, #216]	; (80049fc <CAN_2_Receive+0x1170>)
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80049b8 <CAN_2_Receive+0x112c>
 8004932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004936:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80049bc <CAN_2_Receive+0x1130>
 800493a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800493e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004942:	edc7 7a01 	vstr	s15, [r7, #4]
 8004946:	88bb      	ldrh	r3, [r7, #4]
 8004948:	b29a      	uxth	r2, r3
 800494a:	4b1d      	ldr	r3, [pc, #116]	; (80049c0 <CAN_2_Receive+0x1134>)
 800494c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	carData.t_tyre_RL_7 =((float)t_tyre_RL_7*0.1f)-100.0f;
 8004950:	4b2b      	ldr	r3, [pc, #172]	; (8004a00 <CAN_2_Receive+0x1174>)
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	ee07 3a90 	vmov	s15, r3
 8004958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80049b8 <CAN_2_Receive+0x112c>
 8004960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004964:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80049bc <CAN_2_Receive+0x1130>
 8004968:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800496c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004970:	edc7 7a01 	vstr	s15, [r7, #4]
 8004974:	88bb      	ldrh	r3, [r7, #4]
 8004976:	b29a      	uxth	r2, r3
 8004978:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <CAN_2_Receive+0x1134>)
 800497a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	carData.t_tyre_RL_8 =((float)t_tyre_RL_8*0.1f)-100.0f;
 800497e:	4b21      	ldr	r3, [pc, #132]	; (8004a04 <CAN_2_Receive+0x1178>)
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80049b8 <CAN_2_Receive+0x112c>
 800498e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004992:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80049bc <CAN_2_Receive+0x1130>
 8004996:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800499a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800499e:	edc7 7a01 	vstr	s15, [r7, #4]
 80049a2:	88bb      	ldrh	r3, [r7, #4]
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <CAN_2_Receive+0x1134>)
 80049a8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	//LMO_14
	carData.t_tyre_RR_1 = ((float)t_tyre_RR_1*0.1f)-100.0f;
 80049ac:	4b16      	ldr	r3, [pc, #88]	; (8004a08 <CAN_2_Receive+0x117c>)
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	e030      	b.n	8004a14 <CAN_2_Receive+0x1188>
 80049b2:	bf00      	nop
 80049b4:	200005e0 	.word	0x200005e0
 80049b8:	3dcccccd 	.word	0x3dcccccd
 80049bc:	42c80000 	.word	0x42c80000
 80049c0:	20000618 	.word	0x20000618
 80049c4:	200005e2 	.word	0x200005e2
 80049c8:	200005e4 	.word	0x200005e4
 80049cc:	200005e6 	.word	0x200005e6
 80049d0:	200005e8 	.word	0x200005e8
 80049d4:	200005ea 	.word	0x200005ea
 80049d8:	200005ec 	.word	0x200005ec
 80049dc:	200005ee 	.word	0x200005ee
 80049e0:	200005f0 	.word	0x200005f0
 80049e4:	200005f2 	.word	0x200005f2
 80049e8:	200005f4 	.word	0x200005f4
 80049ec:	200005f6 	.word	0x200005f6
 80049f0:	200005f8 	.word	0x200005f8
 80049f4:	200005fa 	.word	0x200005fa
 80049f8:	200005fc 	.word	0x200005fc
 80049fc:	200005fe 	.word	0x200005fe
 8004a00:	20000600 	.word	0x20000600
 8004a04:	20000602 	.word	0x20000602
 8004a08:	20000604 	.word	0x20000604
 8004a0c:	3dcccccd 	.word	0x3dcccccd
 8004a10:	42c80000 	.word	0x42c80000
 8004a14:	ee07 3a90 	vmov	s15, r3
 8004a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1c:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8004a0c <CAN_2_Receive+0x1180>
 8004a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a24:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8004a10 <CAN_2_Receive+0x1184>
 8004a28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a30:	edc7 7a01 	vstr	s15, [r7, #4]
 8004a34:	88bb      	ldrh	r3, [r7, #4]
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	4b53      	ldr	r3, [pc, #332]	; (8004b88 <CAN_2_Receive+0x12fc>)
 8004a3a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	carData.t_tyre_RR_2 = ((float)t_tyre_RR_2*0.1f)-100.0f;
 8004a3e:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <CAN_2_Receive+0x1300>)
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8004b90 <CAN_2_Receive+0x1304>
 8004a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a52:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8004b94 <CAN_2_Receive+0x1308>
 8004a56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a5e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004a62:	88bb      	ldrh	r3, [r7, #4]
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	4b48      	ldr	r3, [pc, #288]	; (8004b88 <CAN_2_Receive+0x12fc>)
 8004a68:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	carData.t_tyre_RR_3 = ((float)t_tyre_RR_3*0.1f)-100.0f;
 8004a6c:	4b4a      	ldr	r3, [pc, #296]	; (8004b98 <CAN_2_Receive+0x130c>)
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	ee07 3a90 	vmov	s15, r3
 8004a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a78:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004b90 <CAN_2_Receive+0x1304>
 8004a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a80:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8004b94 <CAN_2_Receive+0x1308>
 8004a84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a8c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004a90:	88bb      	ldrh	r3, [r7, #4]
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	4b3c      	ldr	r3, [pc, #240]	; (8004b88 <CAN_2_Receive+0x12fc>)
 8004a96:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	carData.t_tyre_RR_4 = ((float)t_tyre_RR_4*0.1f)-100.0f;
 8004a9a:	4b40      	ldr	r3, [pc, #256]	; (8004b9c <CAN_2_Receive+0x1310>)
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa6:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8004b90 <CAN_2_Receive+0x1304>
 8004aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004aae:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004b94 <CAN_2_Receive+0x1308>
 8004ab2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aba:	edc7 7a01 	vstr	s15, [r7, #4]
 8004abe:	88bb      	ldrh	r3, [r7, #4]
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	4b31      	ldr	r3, [pc, #196]	; (8004b88 <CAN_2_Receive+0x12fc>)
 8004ac4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	// LMO_15
	carData.t_tyre_RR_5 = ((float)t_tyre_RR_5*0.1f)-100.0f;
 8004ac8:	4b35      	ldr	r3, [pc, #212]	; (8004ba0 <CAN_2_Receive+0x1314>)
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	ee07 3a90 	vmov	s15, r3
 8004ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004b90 <CAN_2_Receive+0x1304>
 8004ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004adc:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004b94 <CAN_2_Receive+0x1308>
 8004ae0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae8:	edc7 7a01 	vstr	s15, [r7, #4]
 8004aec:	88bb      	ldrh	r3, [r7, #4]
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	4b25      	ldr	r3, [pc, #148]	; (8004b88 <CAN_2_Receive+0x12fc>)
 8004af2:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
	carData.t_tyre_RR_6 =((float)t_tyre_RR_6*0.1f)-100.0f;
 8004af6:	4b2b      	ldr	r3, [pc, #172]	; (8004ba4 <CAN_2_Receive+0x1318>)
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b02:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004b90 <CAN_2_Receive+0x1304>
 8004b06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b0a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004b94 <CAN_2_Receive+0x1308>
 8004b0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b16:	edc7 7a01 	vstr	s15, [r7, #4]
 8004b1a:	88bb      	ldrh	r3, [r7, #4]
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	4b1a      	ldr	r3, [pc, #104]	; (8004b88 <CAN_2_Receive+0x12fc>)
 8004b20:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	carData.t_tyre_RR_7 =((float)t_tyre_RR_7*0.1f)-100.0f;
 8004b24:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <CAN_2_Receive+0x131c>)
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	ee07 3a90 	vmov	s15, r3
 8004b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b30:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004b90 <CAN_2_Receive+0x1304>
 8004b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b38:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004b94 <CAN_2_Receive+0x1308>
 8004b3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b44:	edc7 7a01 	vstr	s15, [r7, #4]
 8004b48:	88bb      	ldrh	r3, [r7, #4]
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <CAN_2_Receive+0x12fc>)
 8004b4e:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	carData.t_tyre_RR_8 = ((float)t_tyre_RR_8*0.1f)-100.0f;
 8004b52:	4b16      	ldr	r3, [pc, #88]	; (8004bac <CAN_2_Receive+0x1320>)
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004b90 <CAN_2_Receive+0x1304>
 8004b62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b66:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8004b94 <CAN_2_Receive+0x1308>
 8004b6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b72:	edc7 7a01 	vstr	s15, [r7, #4]
 8004b76:	88bb      	ldrh	r3, [r7, #4]
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	4b03      	ldr	r3, [pc, #12]	; (8004b88 <CAN_2_Receive+0x12fc>)
 8004b7c:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

}
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000618 	.word	0x20000618
 8004b8c:	20000606 	.word	0x20000606
 8004b90:	3dcccccd 	.word	0x3dcccccd
 8004b94:	42c80000 	.word	0x42c80000
 8004b98:	20000608 	.word	0x20000608
 8004b9c:	2000060a 	.word	0x2000060a
 8004ba0:	2000060c 	.word	0x2000060c
 8004ba4:	2000060e 	.word	0x2000060e
 8004ba8:	20000610 	.word	0x20000610
 8004bac:	20000612 	.word	0x20000612

08004bb0 <getbits>:
in the right most n bits; complementing that with ~ makes a mask with ones in the rightmost n bits.
vgl. "THE C PROGRAMMING LANGUGE" Brian W. KERNIGHAN PAGE 49
ACHTUNG!!! das ganz rechte bit des Wortes is bit 0. BSP getbis(x,4,3) gibt bit 4,3,2 bit von rechts gezählt zurück.
*/
unsigned getbits(unsigned x,int p, int n)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
	return(x >> (p+1-n)) & ~(~0 << n);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bca:	f04f 31ff 	mov.w	r1, #4294967295
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd4:	43d2      	mvns	r2, r2
 8004bd6:	4013      	ands	r3, r2
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <shift>:
   b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
   return b;
}

unsigned shift(unsigned MSB ,unsigned LSB)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
	return (MSB<<8)|LSB;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	021a      	lsls	r2, r3, #8
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	4313      	orrs	r3, r2
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop

08004c04 <UART_TransmitWord>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE void UART_TransmitWord(const UART_t* const handle, uint8_t data)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL))
  XMC_UART_CH_Transmit(handle->channel, (uint16_t)data);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	f7fc fe0a 	bl	8001834 <XMC_UART_CH_Transmit>
}
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop

08004c28 <main>:
uint8_t sync = 77;
uint8_t ok = 1;
uint8_t buffer[6] ;

int main(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
	carData.id = 1;
 8004c2e:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <main+0x38>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	705a      	strb	r2, [r3, #1]
	carData.sync = '0x234';
 8004c34:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <main+0x38>)
 8004c36:	2234      	movs	r2, #52	; 0x34
 8004c38:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8004c3c:	f7fe fbee 	bl	800341c <DAVE_Init>
 8004c40:	4603      	mov	r3, r0
 8004c42:	71fb      	strb	r3, [r7, #7]

  if(status != DAVE_STATUS_SUCCESS)
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d000      	beq.n	8004c4c <main+0x24>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 8004c4a:	e7fe      	b.n	8004c4a <main+0x22>
  }

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	   CAN_1_Receive();
 8004c4c:	f7fe fc3e 	bl	80034cc <CAN_1_Receive>
	   UART_Receive(&UART_0, buffer, sizeof(buffer));
 8004c50:	4804      	ldr	r0, [pc, #16]	; (8004c64 <main+0x3c>)
 8004c52:	4905      	ldr	r1, [pc, #20]	; (8004c68 <main+0x40>)
 8004c54:	2206      	movs	r2, #6
 8004c56:	f7fd faab 	bl	80021b0 <UART_Receive>
	   CAN_2_Receive();
 8004c5a:	f7fe fe17 	bl	800388c <CAN_2_Receive>
  }
 8004c5e:	e7f5      	b.n	8004c4c <main+0x24>
 8004c60:	20000618 	.word	0x20000618
 8004c64:	20000000 	.word	0x20000000
 8004c68:	200006d4 	.word	0x200006d4

08004c6c <uartreceive>:
}

// Interrupt Routine zum Empfangen der Daten
void uartreceive()
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
	ok = 0;
 8004c70:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <uartreceive+0x3c>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	701a      	strb	r2, [r3, #0]
	UART_Receive(&UART_0, buffer, sizeof(buffer));
 8004c76:	480d      	ldr	r0, [pc, #52]	; (8004cac <uartreceive+0x40>)
 8004c78:	490d      	ldr	r1, [pc, #52]	; (8004cb0 <uartreceive+0x44>)
 8004c7a:	2206      	movs	r2, #6
 8004c7c:	f7fd fa98 	bl	80021b0 <UART_Receive>
	// Empfangen der Daten von der Pitwall und ins struct schreiben zum prüfen
	if(buffer[0] == id && buffer[5]==sync)
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <uartreceive+0x44>)
 8004c82:	781a      	ldrb	r2, [r3, #0]
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <uartreceive+0x48>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	429a      	cmp	r2, r3
		//carData.Launch_3=buffer[3];
		//carData.Launch_4=buffer[4];

	}
	// wenn check ok sende Daten am CAN
	if(buffer[0] == id_check && buffer[1] == 19)
 8004c8a:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <uartreceive+0x44>)
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <uartreceive+0x4c>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d106      	bne.n	8004ca4 <uartreceive+0x38>
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <uartreceive+0x44>)
 8004c98:	785b      	ldrb	r3, [r3, #1]
 8004c9a:	2b13      	cmp	r3, #19
 8004c9c:	d102      	bne.n	8004ca4 <uartreceive+0x38>
	{
		ok = 1;
 8004c9e:	4b02      	ldr	r3, [pc, #8]	; (8004ca8 <uartreceive+0x3c>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	701a      	strb	r2, [r3, #0]
	}
}
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000402 	.word	0x20000402
 8004cac:	20000000 	.word	0x20000000
 8004cb0:	200006d4 	.word	0x200006d4
 8004cb4:	20000400 	.word	0x20000400
 8004cb8:	20000401 	.word	0x20000401

08004cbc <CCU43_1_IRQHandler>:

// interrupt zum seriellen senden der daten an den XBEE
void uart_isr(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
	// CAN_1_Transmit(ok);
	 sendTlm();
 8004cc0:	f000 f802 	bl	8004cc8 <sendTlm>
}
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop

08004cc8 <sendTlm>:
// packen der daten
void sendTlm()
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
	carData.length = sizeof(carData);
 8004ccc:	4b03      	ldr	r3, [pc, #12]	; (8004cdc <sendTlm+0x14>)
 8004cce:	22bb      	movs	r2, #187	; 0xbb
 8004cd0:	701a      	strb	r2, [r3, #0]
	writeTlm(( char*)&carData,sizeof(carData));
 8004cd2:	4802      	ldr	r0, [pc, #8]	; (8004cdc <sendTlm+0x14>)
 8004cd4:	21bb      	movs	r1, #187	; 0xbb
 8004cd6:	f000 f803 	bl	8004ce0 <writeTlm>
}
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20000618 	.word	0x20000618

08004ce0 <writeTlm>:
// senden der Daten
void writeTlm(const char* pkt, int size)
		{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
	for(int i=0;i<size;i++)
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	e00a      	b.n	8004d06 <writeTlm+0x26>
	{
	UART_TransmitWord(&UART_0,pkt[i]);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	4806      	ldr	r0, [pc, #24]	; (8004d14 <writeTlm+0x34>)
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	f7ff ff82 	bl	8004c04 <UART_TransmitWord>
	writeTlm(( char*)&carData,sizeof(carData));
}
// senden der Daten
void writeTlm(const char* pkt, int size)
		{
	for(int i=0;i<size;i++)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3301      	adds	r3, #1
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	dbf0      	blt.n	8004cf0 <writeTlm+0x10>
	{
	UART_TransmitWord(&UART_0,pkt[i]);
	}
		}
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20000000 	.word	0x20000000

08004d18 <__libc_init_array>:
 8004d18:	b570      	push	{r4, r5, r6, lr}
 8004d1a:	4b0e      	ldr	r3, [pc, #56]	; (8004d54 <__libc_init_array+0x3c>)
 8004d1c:	4c0e      	ldr	r4, [pc, #56]	; (8004d58 <__libc_init_array+0x40>)
 8004d1e:	1ae4      	subs	r4, r4, r3
 8004d20:	10a4      	asrs	r4, r4, #2
 8004d22:	2500      	movs	r5, #0
 8004d24:	461e      	mov	r6, r3
 8004d26:	42a5      	cmp	r5, r4
 8004d28:	d004      	beq.n	8004d34 <__libc_init_array+0x1c>
 8004d2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d2e:	4798      	blx	r3
 8004d30:	3501      	adds	r5, #1
 8004d32:	e7f8      	b.n	8004d26 <__libc_init_array+0xe>
 8004d34:	f7fd f9ba 	bl	80020ac <_init>
 8004d38:	4c08      	ldr	r4, [pc, #32]	; (8004d5c <__libc_init_array+0x44>)
 8004d3a:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <__libc_init_array+0x48>)
 8004d3c:	1ae4      	subs	r4, r4, r3
 8004d3e:	10a4      	asrs	r4, r4, #2
 8004d40:	2500      	movs	r5, #0
 8004d42:	461e      	mov	r6, r3
 8004d44:	42a5      	cmp	r5, r4
 8004d46:	d004      	beq.n	8004d52 <__libc_init_array+0x3a>
 8004d48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d4c:	4798      	blx	r3
 8004d4e:	3501      	adds	r5, #1
 8004d50:	e7f8      	b.n	8004d44 <__libc_init_array+0x2c>
 8004d52:	bd70      	pop	{r4, r5, r6, pc}
 8004d54:	20000404 	.word	0x20000404
 8004d58:	20000404 	.word	0x20000404
 8004d5c:	20000404 	.word	0x20000404
 8004d60:	20000404 	.word	0x20000404

08004d64 <g_xmc_vadc_group_array>:
 8004d64:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

08004d74 <UART_0_channel_config>:
 8004d74:	0000e100 08010808 00000000              ............

08004d80 <UART_0_tx_pin_config>:
 8004d80:	00000090 00000001 00000002              ............

08004d8c <UART_0_tx_pin>:
 8004d8c:	48028000 00000001 08004d80              ...H.....M..

08004d98 <UART_0_config>:
 8004d98:	08004d74 08002571 08004c6d 00000000     tM..q%..mL......
	...
 8004db8:	08004d8c 00000200 00000004              .M..........

08004dc4 <UART_0_rx_pin_config>:
 8004dc4:	00000000 00000001 00000002              ............

08004dd0 <INTERRUPT_0>:
 8004dd0:	01003c39                                9<..

08004dd4 <group_init_handle0>:
	...

08004de8 <group_init_handle1>:
	...

08004dfc <group_init_handle2>:
	...

08004e10 <group_init_handle3>:
	...

08004e24 <global_config>:
 8004e24:	00000000 00000003 00000000 00000000     ................
	...

08004e3c <LED_1>:
 8004e3c:	48028100 00000000 00000000 00000000     ...H............
 8004e4c:	00000001 01040250 00010000 00000000     ....P...........
 8004e5c:	00010000 01010101                       ........

08004e64 <CAN_2_gpio_out>:
 8004e64:	48028100 00000005                       ...H....

08004e6c <CAN_2_gpio_out_config>:
 8004e6c:	00000088 00000001 00000002              ............

08004e78 <CAN_2_gpio_in>:
 8004e78:	48028100 00000004                       ...H....

08004e80 <CAN_2_gpio_in_config>:
	...

08004e8c <CAN_2_sr>:
 8004e8c:	00000000                                ....

08004e90 <CAN_2_LMO_01_Config>:
 8004e90:	200000b0 00000025 00000000              ... %.......

08004e9c <CAN_2_LMO_02_Config>:
 8004e9c:	200000d0 00000026 00000000              ... &.......

08004ea8 <CAN_2_LMO_03_Config>:
 8004ea8:	200000f0 00000027 00000000              ... '.......

08004eb4 <CAN_2_LMO_04_Config>:
 8004eb4:	20000110 0000001e 00000000              ... ........

08004ec0 <CAN_2_LMO_05_Config>:
 8004ec0:	20000130 0000001f 00000000              0.. ........

08004ecc <CAN_2_LMO_06_Config>:
 8004ecc:	20000150 00000020 00000000              P..  .......

08004ed8 <CAN_2_LMO_07_Config>:
 8004ed8:	20000170 00000021 00000000              p.. !.......

08004ee4 <CAN_2_LMO_08_Config>:
 8004ee4:	20000190 00000022 00000000              ... ".......

08004ef0 <CAN_2_LMO_09_Config>:
 8004ef0:	200001b0 00000023 00000000              ... #.......

08004efc <CAN_2_LMO_10_Config>:
 8004efc:	200001d0 00000015 00000000              ... ........

08004f08 <CAN_2_LMO_11_Config>:
 8004f08:	200001f0 00000016 00000000              ... ........

08004f14 <CAN_2_LMO_12_Config>:
 8004f14:	20000210 00000006 00000000              ... ........

08004f20 <CAN_2_LMO_13_Config>:
 8004f20:	20000230 00000005 00000000              0.. ........

08004f2c <CAN_2_LMO_14_Config>:
 8004f2c:	20000250 00000008 00000000              P.. ........

08004f38 <CAN_2_LMO_15_Config>:
 8004f38:	20000270 00000007 00000000              p.. ........

08004f44 <CAN_2_LMO_16_Config>:
 8004f44:	20000290 0000003c 00000000              ... <.......

08004f50 <CAN_2_LMO_17_Config>:
 8004f50:	200002b0 00000009 00000000              ... ........

08004f5c <CAN_2_LMO_18_Config>:
 8004f5c:	200002d0 00000024 00000000              ... $.......

08004f68 <CAN_2>:
 8004f68:	2000004c 48014300 200000a4 08004e90     L.. .C.H... .N..
 8004f78:	08004e9c 08004ea8 08004eb4 08004ec0     .N...N...N...N..
 8004f88:	08004ecc 08004ed8 08004ee4 08004ef0     .N...N...N...N..
 8004f98:	08004efc 08004f08 08004f14 08004f20     .N...O...O.. O..
 8004fa8:	08004f2c 08004f38 08004f44 08004f50     ,O..8O..DO..PO..
 8004fb8:	08004f5c 00000000 00000000 00000000     \O..............
	...
 8004ff4:	08004e8c 08004e64 08004e6c 08004e78     .N..dN..lN..xN..
 8005004:	08004e80 00120103 00000000              .N..........

08005010 <CAN_1_gpio_out>:
 8005010:	48028100 00000009                       ...H....

08005018 <CAN_1_gpio_out_config>:
 8005018:	00000090 00000001 00000002              ............

08005024 <CAN_1_gpio_in>:
 8005024:	48028100 00000008                       ...H....

0800502c <CAN_1_gpio_in_config>:
	...

08005038 <CAN_1_sr>:
 8005038:	00000000                                ....

0800503c <CAN_1_LMO_01_Config>:
 800503c:	20000300 00000018 00000000              ... ........

08005048 <CAN_1_LMO_02_Config>:
 8005048:	20000320 00000017 00000000               .. ........

08005054 <CAN_1_LMO_03_Config>:
 8005054:	20000340 00000014 00000000              @.. ........

08005060 <CAN_1_LMO_04_Config>:
 8005060:	20000360 0000001d 00000000              `.. ........

0800506c <CAN_1_LMO_05_Config>:
 800506c:	20000380 0000003d 00000000              ... =.......

08005078 <CAN_1_LMO_06_Config>:
 8005078:	200003a0 0000001a 00000000              ... ........

08005084 <CAN_1>:
 8005084:	2000004c 48014400 200002f0 0800503c     L.. .D.H... <P..
 8005094:	08005048 08005054 08005060 0800506c     HP..TP..`P..lP..
 80050a4:	08005078 00000000 00000000 00000000     xP..............
	...
 8005110:	08005038 08005010 08005018 08005024     8P...P...P..$P..
 8005120:	0800502c 00060200 00000000              ,P..........

0800512c <ANALOG_IO_0>:
 800512c:	00000000 20000424 48028e00 00000004     ....$.. ...H....

0800513c <global_iclass_config>:
 800513c:	00000100                                ....

08005140 <backgnd_config>:
 8005140:	00000005 00000000 00000010              ............
