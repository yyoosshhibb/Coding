   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.UART_TransmitWord,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	UART_TransmitWord:
  25              	.LFB324:
  26              	 .file 1 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART/uart.h"
   1:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
   2:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @file uart.h
   3:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @date 2015-12-17
   4:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
   5:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * NOTE:
   6:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
   8:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @cond
   9:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  10:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * UART v4.1.10 - Configures a USIC channel to perform transmit & receive operations using UART pro
  11:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
  12:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  13:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * All rights reserved.
  14:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
  15:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * following conditions are met:
  17:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
  18:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   disclaimer.
  20:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
  21:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.
  23:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
  24:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   products derived from this software without specific prior written permission.
  26:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
  27:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
  35:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * with Infineon Technologies AG (dave@infineon.com).
  37:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  38:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
  39:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Change History
  40:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * --------------
  41:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
  42:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * 2015-02-16:
  43:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     - Initial version for DAVEv4
  44:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
  45:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * 2015-06-20:
  46:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     - Changed the abort API name from UART_Abort_Receive to UART_AbortReceive and added return t
  47:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
  48:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * 2015-07-01:
  49:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     - Changed structure name from UART_DYNAMIC_t to UART_RUNTIME_t
  50:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
  51:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * 2015-07-09:
  52:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     - Renamed UART_GetProtocolStatus as UART_GetFlagStatus and UART_ClearProtocolStatus as UART_
  53:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     - Removed APIs UART_GetTXFIFOStatus, UART_GetRXFIFOStatus, UART_ClearTXFIFOStatus,
  54:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       UART_ClearRXFIFOStatus
  55:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
  56:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * 2015-07-14:
  57:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     - Added support for DMA and Direct mode
  58:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
  59:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @endcond
  60:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
  61:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
  62:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
  63:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  64:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * HEADER FILES
  65:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  66:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #ifndef UART_H
  67:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #define UART_H
  68:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
  69:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #include <xmc_scu.h>
  70:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #include <xmc_gpio.h>
  71:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #include <xmc_uart.h>
  72:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
  73:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  74:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****        (XMC_LIB_MINOR_VERSION >= 1U) && \
  75:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****        (XMC_LIB_PATCH_VERSION >= 10U)))
  76:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #error "UART requires XMC Peripheral Library v2.1.10 or higher"
  77:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #endif
  78:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
  79:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #include <DAVE_common.h>
  80:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #include "uart_conf.h"
  81:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #if ((defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED))
  82:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #include "../GLOBAL_DMA/global_dma.h"
  83:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #endif
  84:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
  85:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  86:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * MACROS
  87:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  88:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /*
  89:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Represents the maximum data size for DMA transaction*/
  90:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #define UART_DMA_MAXCOUNT (4095U)
  91:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
  92:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  93:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * ENUMS
  94:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  95:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
  96:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @ingroup UART_enumerations
  97:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @{
  98:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
  99:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 100:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 101:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Enum to describe the possible status values, returned
 102:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  by UART APIs.
 103:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 104:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** typedef enum UART_STATUS
 105:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** {
 106:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_STATUS_SUCCESS,        /**< Indicates App initialization state successful */
 107:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 108:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_STATUS_FAILURE,        /**< Unknown error */
 109:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 110:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_STATUS_BUSY,           /**< UART Busy */
 111:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 112:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_STATUS_BUFFER_INVALID, /**< Buffer provided or the buffer size is invalid*/
 113:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 114:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_STATUS_MODE_MISMATCH   /**< API invoked by a handle configured with different mode.
 115:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****                                    e.g, If UART_StartTransmitDMA is invoked for an instance
 116:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****                                    which has transmit mode configured as "Interrupt", will
 117:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****                                    return this status.*/
 118:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 119:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** } UART_STATUS_t;
 120:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 121:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 122:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Enum used to describe the UART Mode of operation
 123:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 124:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** typedef enum UART_MODE
 125:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** {
 126:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_MODE_FULLDUPLEX, /**< Full Duplex mode selected */
 127:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_MODE_HALFDUPLEX, /**< Half Duplex mode selected */
 128:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_MODE_LOOPBACK    /**< LoopBack mode selected */
 129:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** } UART_MODE_t;
 130:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 131:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 132:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify UART protocol event callback function
 133:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 134:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** typedef enum UART_EVENT
 135:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** {
 136:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_EVENT_SYNC_BRK,    /**< Synchronization break detected event */
 137:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_EVENT_RX_NOISE,    /**< Receiver noise detected event */
 138:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR0, /**< Frame format error at stop bit 0 event */
 139:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR1, /**< Frame format error at stop bit 1 event */
 140:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_EVENT_COLLISION,   /**< Data collision detected in half duplex mode event */
 141:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_EVENT_MAX          /**< Indicates number of UART events supported*/
 142:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** } UART_EVENT_t;
 143:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 144:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 145:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify the transfer type used for either transmit or receive function.
 146:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 147:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** typedef enum UART_TRANSFER_MODE
 148:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** {
 149:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_INTERRUPT,  /**< Implement data transmit or receive using interrupts */
 150:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DMA,        /**< Implement data transmit or receive using DMA */
 151:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DIRECT      /**< This configuration exposes signals for external APP connectio
 152:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** }UART_TRANSFER_MODE_t;
 153:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 154:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 155:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @}
 156:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 157:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 158:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 159:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * DATA STRUCTURES
 160:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 161:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 162:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for callback function
 163:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 164:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** typedef void (*UART_cbhandler)(void);
 165:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 166:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for initialization function
 167:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 168:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** typedef UART_STATUS_t (*UART_init_handler)(void);
 169:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 170:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @ingroup UART_datastructures
 171:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @{
 172:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 173:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 174:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 175:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Wrapper typedefinition for XMC_UART_PROTOCOL_STATUS_t.
 176:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 177:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** typedef XMC_UART_CH_STATUS_FLAG_t UART_PROTOCOL_STATUS_t;
 178:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 179:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 180:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Structure for transmit pin configuration.
 181:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 182:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** typedef struct UART_TX_CONFIG
 183:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** {
 184:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   XMC_GPIO_PORT_t *const port;            /**< Pointer to the GPIO port base address */
 185:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   const uint8_t pin;                      /**< Pin number in the port*/
 186:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   const XMC_GPIO_CONFIG_t *const config;  /**< Pin configuration structure */
 187:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** } UART_TX_CONFIG_t;
 188:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 189:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #if (defined(UART_TX_DMA_USED) || defined(UART_RX_DMA_USED))
 190:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 191:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Structure for DMA configuration.
 192:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 193:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** typedef struct UART_DMA_CONFIG
 194:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** {
 195:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   const XMC_DMA_CH_CONFIG_t * dma_ch_config;   /**< Pointer to the DMA channel configuration.*/
 196:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   uint8_t dma_channel;                         /**< DMA channel number */
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** }UART_DMA_CONFIG_t;
 198:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #endif
 199:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 200:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 201:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Structure for holding the configuration parameters of UART channel.
 202:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 203:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** typedef struct UART_CONFIG
 204:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** {
 205:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   const XMC_UART_CH_CONFIG_t * const channel_config;   /**< Basic UART configuration from the GUI w
 206:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****                                                             frame length, stop bits and parity */
 207:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #if (defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED)
 208:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   GLOBAL_DMA_t * global_dma;                           /**< Global DMA handle */
 209:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #endif
 210:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 211:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const transmit_dma_config; /**< Pointer to the DMA channel configuratio
 212:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #endif
 213:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 214:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const receive_dma_config;  /**< Pointer to the DMA channel configuratio
 215:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #endif
 216:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_init_handler fptr_uart_config;                  /**< Function pointer to configure the MUX v
 217:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 218:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_cbhandler tx_cbhandler;                         /**< Function pointer to hold the callback f
 219:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****                                                             called when the transmission is complet
 220:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #endif
 221:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 222:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_cbhandler;                         /**< Function pointer to hold the callback f
 223:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****                                                             called when the reception is complete *
 224:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #endif
 225:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_cbhandler sync_error_cbhandler;                 /**< Function pointer to hold the callback f
 226:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****                                                             called when synchronization break detec
 227:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_noise_error_cbhandler;             /**< Function pointer to hold the callback f
 228:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****                                                             called when receiver noise is detected*
 229:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit0_cbhandler;          /**< Function pointer to hold the callback f
 230:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 231:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit1_cbhandler;          /**< Function pointer to hold the callback f
 232:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 233:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_cbhandler collision_error_cbhandler;            /**< Function pointer to hold the callback f
 234:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****                                                             called when collision error is detected
 235:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   const UART_TX_CONFIG_t * tx_pin_config;              /**< Transmit pin configuration to be used d
 236:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****                                                             and while changing baudrate. */
 237:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_MODE_t mode;                                    /**< UART operation mode */
 238:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t transmit_mode;                  /**< Mode used for transmitting data. Data c
 239:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 240:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t receive_mode;                   /**< Mode used for receiving data. Data can 
 241:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 242:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t tx_fifo_size;                /**< Transmit FIFO size configuration */
 243:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t rx_fifo_size;                /**< Receive FIFO size configuration */
 244:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   uint8_t tx_sr;                                       /**< Service request number assigned to tran
 245:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** } UART_CONFIG_t;
 246:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 247:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 248:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Structure to hold the dynamic variables for the UART communication.
 249:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 250:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** typedef struct UART_RUNTIME
 251:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** {
 252:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   uint8_t * tx_data;            /**< Pointer to the transmit data buffer*/
 253:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   uint8_t * rx_data;            /**< Pointer to the receive data buffer*/
 254:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   uint32_t tx_data_count;       /**< Number of bytes of data to be transmitted*/
 255:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   uint32_t tx_data_index;       /**< Index to the byte to be transmitted next in the tx_data buffer
 256:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   uint32_t rx_data_count;       /**< Number of bytes of data to be received*/
 257:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   uint32_t rx_data_index;       /**< Indicates the number of bytes currently available in the rx_da
 258:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   volatile bool tx_busy;        /**< Status flag to indicate busy when a transmission is assigned*/
 259:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   volatile bool rx_busy;        /**< Status flag to indicate busy when a reception is assigned*/
 260:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** } UART_RUNTIME_t;
 261:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 262:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 263:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Handler structure with pointers to dynamic and static parameters.
 264:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 265:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** typedef struct UART
 266:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** {
 267:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_t * const channel;              /**< USIC channel*/
 268:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   const UART_CONFIG_t * const config;         /**< UART configuration structure pointer*/
 269:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   UART_RUNTIME_t * const runtime;             /**< Pointer to the structure holding all variables,
 270:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****                                                    that can change at runtime*/
 271:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** } UART_t;
 272:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 273:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 274:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @}
 275:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 276:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 277:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 278:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * API Prototypes
 279:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 280:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 281:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #ifdef __cplusplus
 282:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** extern "C" {
 283:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #endif
 284:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 285:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @ingroup UART_apidoc
 286:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @{
 287:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 288:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 289:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Get the UART APP version.
 290:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 291:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 292:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Example Usage:
 293:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @code
 294:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  //Description:
 295:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  //Transmits the text "UART APP supported.", if the UART APP version is v4.1.x, where x can be a
 296:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>
 297:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 298:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   int main(void)
 299:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   {
 300:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 301:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     DAVE_APP_VERSION_t uart_version;
 302:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t valid_str[] = "UART APP supported.";
 303:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 304:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 305:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 306:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 307:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       uart_version = UART_GetAppVersion();
 308:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       if((uart_version.major == 4) &&
 309:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *          (uart_version.minor == 1))
 310:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       {
 311:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, valid_str, sizeof(valid_str));
 312:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       }
 313:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 314:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     else
 315:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 316:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 317:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      while(1U)
 318:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      {
 319:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      }
 320:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 321:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      return 1U;
 322:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  }
 323:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  @endcode
 324:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 325:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** DAVE_APP_VERSION_t UART_GetAppVersion(void);
 326:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 327:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 328:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Initializes the UART module as per the configuration made
 329:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * in UI.
 330:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
 331:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Status of UART driver initialization.\n
 332:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_SUCCESS - on successful initialization.\n
 333:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_FAILURE - if initialization fails.\n
 334:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_BUSY - if UART channel is busy.\n
 335:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 336:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 337:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Initializes IO pins used for the UART communication, configures
 338:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * USIC registers based on the settings provided in the GUI. Calculates divider
 339:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * values PDIV and STEP for a precise baudrate. It also enables configured interrupt
 340:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * flags and service request values.
 341:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * <BR>
 342:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 343:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Example Usage:
 344:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @code
 345:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 346:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 347:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   int main(void)
 348:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   {
 349:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 350:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 351:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 352:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 353:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 354:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         while(1U)
 355:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         {
 356:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         }
 357:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 358:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     else
 359:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 360:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 361:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      while(1U)
 362:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      {
 363:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      }
 364:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 365:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      return 1U;
 366:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  }
 367:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  @endcode
 368:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 369:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Init(const UART_t *const handle);
 370:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 371:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 372:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 373:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 374:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 375:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 376:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 377:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 378:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 379:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 380:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 381:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 382:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 383:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 384:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 385:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 386:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 387:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. After the requested number of data bytes are received,
 388:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 389:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Data reception is accomplished using the receive mode selected in the UI.
 390:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 391:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer(RBUF) or receive FIFO(OUT) is used
 392:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 393:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 394:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 395:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * CPU load. Before starting data reception, the receive buffers are flushed. So only those data, r
 396:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 397:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 398:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * function will be executed.
 399:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 400:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 401:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 402:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * <br>
 403:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 404:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * DMA mode is available only in XMC4x family of microcontrollers. In this mode, a DMA channel is
 405:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * configured for receiving data from standard receive buffer(RBUF) to the user buffer. By calling
 406:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * this API, the DMA channel destination address is configured to the user buffer and the channel i
 407:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * enabled. FIFO will not be used when the receive mode is DMA.
 408:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Before starting data reception, the receive buffers are flushed. So only those data, received
 409:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 410:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 411:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * function will be executed.
 412:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 413:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 414:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 415:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * <br>
 416:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * <b>Direct</b><br>
 417:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * In Direct receive mode, neither interrupt nor DMA is used. The API polls
 418:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * the receive flag to read the received data and waits for all the requested number of bytes to
 419:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * be received. Based on FIFO configuration, either RBUF or OUT register is used for reading receiv
 420:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * data. Before starting data reception, the receive buffers are flushed. So only those data, recei
 421:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 422:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is re
 423:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_GetReceivedWord, @ref UART_GetPr
 424:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 425:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Example Usage:
 426:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @code
 427:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 428:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 429:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 430:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Receive mode should be configured as "Direct".
 431:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Description:
 432:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Transmits 10 bytes of data after receiving 10 bytes of data.
 433:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 434:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   int main(void)
 435:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   {
 436:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 437:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 438:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 439:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 440:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 441:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 442:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       while(1)
 443:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       {
 444:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 445:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         if(UART_Receive(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 446:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         {
 447:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           //Retransmit the received 10 bytes
 448:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, ReadData, 10);
 449:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         }
 450:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       }
 451:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 452:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     else
 453:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 454:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 455:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      while(1U)
 456:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      {
 457:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      }
 458:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 459:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      return 1U;
 460:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  }
 461:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  @endcode
 462:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 463:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 464:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 465:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 466:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 467:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 468:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 469:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 470:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 471:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 472:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 473:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 474:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 475:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 476:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 477:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 478:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 479:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 480:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * request is registered.
 481:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 482:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 483:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Transmits data using the UART channel. Transmission is accomplished using the transmit mode
 484:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * as configured in the UI.<br>
 485:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 486:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 487:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 488:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 489:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved out of FIFO.
 490:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * The APP handle's runtime structure is used to store the data pointer, count, data index
 491:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 492:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 493:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 494:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * the data to the transmit buffer. If transmit FIFO is configured, the data is filled into the FIF
 495:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated subsequently when the transmit FIFO is empty. At this
 496:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 497:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 498:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 499:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 500:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 501:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 502:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * the completion of data transmission.<br>
 503:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 504:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * A DMA channel is configured to provide data to the UART transmit buffer. This removes the load
 505:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * off the CPU. This API will only configure and enable the DMA channel by specifying the data buff
 506:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * and count of bytes to transmit. Rest is taken care without the CPU's intervention. User can conf
 507:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the transmission is complete, the callback function will
 508:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * FIFO will not be used in DMA mode. Transmit buffer interrupt is configured for triggering the
 509:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * DMA channel. So each byte is transmitted in the background through the DMA channel.
 510:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * If the callback function is not configured, \a handle->runtime->tx_busy flag can be checked to
 511:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * verify if the transmission is complete.
 512:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * <b>Direct:</b><br>
 513:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Data will be transmitted using polling method. Status flags are used to check if data can be tra
 514:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is tr
 515:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_TransmitWord, @ref UART_GetProto
 516:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 517:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Example Usage:
 518:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @code
 519:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 520:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 521:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 522:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Direct".
 523:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Description:
 524:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon".
 525:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 526:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   int main(void)
 527:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   {
 528:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 529:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 530:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 531:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 532:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 533:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 534:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       //Transmit the string.
 535:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data)-1);
 536:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       while(1)
 537:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       {
 538:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       }
 539:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 540:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     else
 541:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 542:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 543:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      while(1U)
 544:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      {
 545:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      }
 546:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 547:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      return 1U;
 548:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  }
 549:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @endcode
 550:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 551:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 552:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 553:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 554:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #if (defined UART_TX_INTERRUPT_USED || defined UART_TX_DMA_USED)
 555:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 556:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Aborts the ongoing data transmission.
 557:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param handle  UART APP handle pointer of type @ref UART_t
 558:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of transmit abort request.\n
 559:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel transmission is stopped
 560:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                       successfully.\n
 561:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if transmit mode is Direct.\n
 562:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 563:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 564:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 565:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * the existing data will be flushed. After the transmission is stopped, user can start
 566:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * a new transmission without delay. Abort request for transmit mode direct cannot be serviced sinc
 567:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * the direct mode transmit API is a blocking call.
 568:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 569:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Example Usage:
 570:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @code
 571:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 572:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 573:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 574:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 575:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Description:
 576:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Initiates the transmission of one string, aborts the transmission immediately and
 577:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //starts transmission of another string. The receiver might see traces of first string followe
 578:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //by the complete second string.
 579:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 580:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   int main(void)
 581:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   {
 582:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 583:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     //String1
 584:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 585:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     //String2
 586:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t NewData[] = "New data message";
 587:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 588:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 589:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 590:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 591:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       //Initiate transmission of first string.
 592:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 593:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *		 //When the first string is being transmitted,
 594:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->tx_busy)
 595:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       {
 596:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         //Stop the transmission of first string.
 597:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         if(UART_AbortTransmit(&UART_0) == UART_STATUS_SUCCESS)
 598:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         {
 599:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           //Start the transmission of second string
 600:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, NewData, sizeof(NewData));
 601:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           //Wait till the transmission is finished.
 602:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->tx_busy);
 603:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         }
 604:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       }
 605:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       while(1)
 606:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       {
 607:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       }
 608:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 609:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     else
 610:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 611:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 612:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      while(1U)
 613:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      {
 614:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      }
 615:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 616:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      return 1U;
 617:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  }
 618:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @endcode
 619:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 620:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 621:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortTransmit(const UART_t *const handle);
 622:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #endif
 623:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 624:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #if (defined UART_RX_INTERRUPT_USED || defined UART_RX_DMA_USED)
 625:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 626:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Stops the active data reception sequence.
 627:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
 628:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of reception abort request.\n
 629:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel reception has
 630:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                       been stopped.\n
 631:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if receive mode is Direct.\n
 632:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 633:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 634:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * If a reception is in progress, it will be stopped. When a reception request
 635:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * is active, user will not be able to place a new receive request till the active
 636:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * reception is complete. This API can stop the progressing reception to make
 637:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * a new receive request. Abort request for receive mode direct cannot be serviced since
 638:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * the direct mode receive API is a blocking call.
 639:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 640:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Example Usage:
 641:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @code
 642:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 643:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 644:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 645:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 646:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Description:
 647:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon DAVE application." and starts to receive data.
 648:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //After receiving first byte, checks the value of first byte. If the first byte is 0x55,
 649:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //aborts the ongoing reception and transmits the received byte.
 650:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 651:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   int main(void)
 652:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   {
 653:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 654:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 655:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[64];
 656:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 657:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 658:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 659:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 660:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       //Transmit the initial string.
 661:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 662:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       //Wait till the string is transmitted.
 663:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->tx_busy);
 664:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 665:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       //Start reception of data
 666:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       UART_Receive(&UART_0, Rec_Data, 15);
 667:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       //Wait till atleast one byte is received.
 668:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->rx_data_index == 0);
 669:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       //If the first byte is 0x55,
 670:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->rx_data[0] == 0x55)
 671:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       {
 672:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         //Stop the reception
 673:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         if(UART_AbortReceive(&UART_0) == UART_STATUS_SUCCESS)
 674:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         {
 675:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           //Transmit the received one byte.
 676:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, Rec_Data, 1);
 677:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         }
 678:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       }
 679:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 680:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     else
 681:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 682:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 683:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      while(1U)
 684:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      {
 685:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      }
 686:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 687:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      return 1U;
 688:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  }
 689:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @endcode
 690:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 691:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 692:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortReceive(const UART_t *const handle);
 693:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #endif
 694:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 695:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 696:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 697:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 698:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 699:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 700:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 701:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 702:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 703:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 704:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 705:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 706:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 707:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 708:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 709:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 710:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 711:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 712:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 713:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 714:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer or receive FIFO is used
 715:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 716:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 717:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 718:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * CPU load.  When all the requested number of data bytes are received, the configured callback
 719:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * function will be executed.
 720:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 721:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 722:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 723:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 724:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Example Usage:
 725:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @code
 726:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 727:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 728:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 729:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 730:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Description:
 731:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the same.
 732:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 733:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   int main(void)
 734:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   {
 735:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 736:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 737:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 738:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 739:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 740:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 741:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       while(1)
 742:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       {
 743:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       //Start reception of 10 bytes. The status will be returned success, if the channel is not 
 744:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       if(UART_StartReceiveIRQ(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 745:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       {
 746:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         //Wait till the data is received.
 747:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy)
 748:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         {
 749:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         }
 750:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         //Transmit the received data.
 751:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, ReadData, 10);
 752:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 753:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         {
 754:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         }
 755:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       }
 756:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       }
 757:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 758:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     else
 759:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 760:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 761:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      while(1U)
 762:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      {
 763:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      }
 764:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 765:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      return 1U;
 766:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  }
 767:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  @endcode
 768:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 769:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 770:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 771:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #endif
 772:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 773:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 774:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 775:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 776:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 777:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 778:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 779:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 780:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 781:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 782:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 783:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 784:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 785:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 786:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 787:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 788:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * request is registered.
 789:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 790:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 791:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 792:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 793:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 794:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved from FIFO.
 795:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the data pointer, count, data index
 796:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 797:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 798:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 799:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * the data. If transmit FIFO is configured, the data is filled into the FIFO.
 800:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated next time when the transmit FIFO is empty. At this
 801:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 802:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 803:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 804:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 805:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 806:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 807:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 808:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 809:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Example Usage:
 810:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @code
 811:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 812:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 813:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 814:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 815:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Description:
 816:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon"
 817:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 818:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   int main(void)
 819:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   {
 820:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 821:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 822:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 823:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 824:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 825:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 826:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitIRQ(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 827:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       {
 828:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         //Wait till the data transmission is ongoing.
 829:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 830:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         {
 831:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         }
 832:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       }
 833:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 834:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     else
 835:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 836:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 837:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      while(1U)
 838:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      {
 839:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      }
 840:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 841:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      return 1U;
 842:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  }
 843:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @endcode
 844:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 845:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 846:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 847:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #endif
 848:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 849:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 850:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 851:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel using DMA.
 852:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 853:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 854:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 855:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  count Total number of words to be transmitted.\n
 856:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= 4096.
 857:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 858:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 859:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 860:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 861:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 862:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        DMA transmit mode. \n
 863:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 864:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 865:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 866:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * request is registered.
 867:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 868:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 869:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using DMA. User can configure
 870:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 871:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * function will be executed.
 872:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the status of transmission.
 873:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * This function only registers a data transmission request, if
 874:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens through DMA channe
 875:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be transmitted in one API call. This limit is because of the DMA sin
 876:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 877:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 878:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 879:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 880:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * If data more than the block size of 4096 have to be transmitted, user will have to transmit them
 881:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 882:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Example Usage:
 883:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @code
 884:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 885:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 886:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 887:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "DMA".
 888:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Description:
 889:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon" using DMA.
 890:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 891:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   int main(void)
 892:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   {
 893:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 894:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 895:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 896:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 897:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 898:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 899:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitDMA(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 900:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       {
 901:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         //Wait till the data is transmitted.
 902:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 903:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         {
 904:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         }
 905:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       }
 906:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 907:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     else
 908:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 909:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 910:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      while(1U)
 911:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      {
 912:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      }
 913:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 914:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      return 1U;
 915:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  }
 916:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @endcode
 917:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 918:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 919:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 920:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #endif
 921:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 922:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 923:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 924:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel using DMA.
 925:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 926:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 927:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 928:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 929:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 930:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= 4096.
 931:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 932:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 933:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 934:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 935:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 936:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        DMA receive mode. \n
 937:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 938:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 939:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 940:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 941:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 942:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 943:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * This function only registers a request to receive a number of data bytes from a USIC channel.
 944:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 945:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * function will be executed.
 946:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 947:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 948:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 949:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be received in one API call. This limit is because of the DMA single
 950:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 951:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Example Usage:
 952:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @code
 953:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 954:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 955:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Pre condition:
 956:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured to "DMA"
 957:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Description:
 958:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the received data.
 959:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 960:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   int main(void)
 961:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   {
 962:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 963:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 964:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 965:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 966:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 967:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 968:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       while(1)
 969:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       {
 970:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 971:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         if(UART_StartReceiveDMA(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 972:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         {
 973:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           //Wait till 10 bytes are received
 974:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->rx_busy)
 975:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           {
 976:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           }
 977:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           //Transmit the received data.
 978:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           UART_StartTransmitDMA(&UART_0, ReadData, 10);
 979:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         }
 980:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       }
 981:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 982:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     else
 983:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
 984:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 985:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      while(1U)
 986:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      {
 987:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      }
 988:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
 989:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      return 1U;
 990:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  }
 991:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  @endcode
 992:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
 993:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
 994:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 995:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** #endif
 996:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
 997:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
 998:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Changes the baudrate of UART channel.
 999:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1000:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param UART_t * Pointer to the UART APP handle.
1001:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param baud Value of new baudrate.
1002:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param oversampling Number of samples to be considered for each symbol. 16 is the standard value
1003:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1004:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t UART_STATUS_SUCCESS if baudrate changed successfully.
1005:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                       UART_STATUS_FAILURE if baudrate could not be changed.
1006:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1007:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1008:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * The function stops the channel, calculates the clock divider values to achieve the desired baudr
1009:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Sets the divider values and reconfigures the channel as per the configuration in the UI. The cha
1010:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * enabled at the end of configuration.
1011:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * <BR>
1012:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1013:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Example Usage:
1014:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * <i>Please disable the receive FIFO in the 'Advanced Settings' tab</i>
1015:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @code
1016:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1017:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>      //Declarations from DAVE Code Generation (includes SFR declaration)
1018:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1019:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * //Precondition:
1020:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * //Disable receive FIFO in the Advanced settings tab.
1021:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * //Description:
1022:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * //Waits for user input of new baudrate value. Input is recognized after line feed is provided.
1023:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * //Value is set as the new baudrate and the application waits for any key to be pressed.
1024:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * //This helps in reconfiguring the terminal application to the newly set baudrate. On receiving
1025:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * //new character, message indicating the successful baudrate change will be displayed using updat
1026:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * //value of baudrate.
1027:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1028:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * const uint8_t send_askbaud[] = "Please enter desired baudrate:";
1029:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * const uint8_t send_data[] = "\nPress 'y' to change baudrate to desired value:";
1030:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * const uint8_t send_invalid[] = "\nInvalid value!!";
1031:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * const uint8_t send_success[] = "\nWe made it...Baudrate changed successfully :-).\n\n";
1032:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * uint8_t rec_data[11];
1033:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * int main(void)
1034:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * {
1035:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1036:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   uint32_t baud;
1037:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1038:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();    // Initialization of DAVE Apps
1039:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1040:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1041:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   {
1042:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
1043:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     while(1U)
1044:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
1045:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
1046:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   }
1047:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1048:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   while(1U)
1049:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   {
1050:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     UART_Transmit(&UART_0, send_askbaud, sizeof(send_askbaud)-1);
1051:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     UART_Receive(&UART_0, rec_data, 10);
1052:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1053:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->rx_busy)
1054:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
1055:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       //If user enters newline character, accept the value
1056:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       if((UART_0.runtime->rx_data_index > 0) && (UART_0.runtime->rx_data[UART_0.runtime->rx_data
1057:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       {
1058:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         //End reception of data on finding newline character
1059:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         UART_AbortReceive(&UART_0);
1060:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       }
1061:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
1062:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     //Add end of string character to the last location
1063:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     rec_data[UART_0.runtime->rx_data_index] = 0;
1064:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     //Convert the entered string to number.
1065:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     baud = atoi(rec_data);
1066:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     //If the conversion is successful, set the baudrate.
1067:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     if(baud > 0)
1068:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
1069:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       //Set the baudrate to USIC channel
1070:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       if(UART_SetBaudrate(&UART_0, baud, 16) == UART_STATUS_SUCCESS)
1071:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       {
1072:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         //After changing the baudrate successfully,
1073:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         //Wait for user to enter a character.
1074:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         //This wait gives time for the user to change
1075:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         //the baudrate of the terminal tool used.
1076:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         UART_Receive(&UART_0, rec_data, 1);
1077:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy);
1078:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_success, sizeof(send_success)-1);
1079:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       }
1080:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       else
1081:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       {
1082:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1083:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       }
1084:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
1085:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     else
1086:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
1087:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1088:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
1089:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1090:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   }
1091:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * }
1092:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @endcode
1093:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * */
1094:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_SetBaudrate(const UART_t * handle, uint32_t baud, uint32_t oversampling);
1095:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
1096:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
1097:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Gets the transmit FIFO event flags.
1098:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1099:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1100:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1101:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of the STBI and TBERI bits in TRBSR register in
1102:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                      their bit positions.\n
1103:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *                      \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t for the bitmask of event
1104:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1105:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1106:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Function reads the value of TRBSR register. It masks the standard transmit buffer
1107:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * interrupt flag and transmit buffer error flag before providing the value.
1108:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * User has to mask the bits of interest before checking the status.
1109:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1110:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Example Usage:
1111:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @code
1112:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1113:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1114:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  //Pre-condition:
1115:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  //Configure transmit mode as "Direct" with transmit FIFO enabled.
1116:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  //Description:
1117:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  //Transmits the string "Infineon".
1118:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   int main(void)
1119:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   {
1120:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1121:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1122:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1123:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1124:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1125:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1126:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
1127:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        //Clear the Tx FIFO standard transmit buffer event.
1128:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1129:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        //Iterate for the length of the string "Infineon"
1130:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data)-1)
1131:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        {
1132:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           //Put the character in the transmit FIFO.
1133:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           XMC_USIC_CH_TXFIFO_PutData((XMC_USIC_CH_t *)UART_0.channel,(uint16_t)Send_Data[index])
1134:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           index++;
1135:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1136:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining dat
1137:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1138:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1139:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        }
1140:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
1141:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     else
1142:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
1143:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1144:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      while(1U)
1145:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      {
1146:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      }
1147:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
1148:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      return 1U;
1149:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  }
1150:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @endcode
1151:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1152:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
1153:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetTXFIFOStatus(const UART_t* const handle)
1154:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** {
1155:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1156:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_TXFIFO_GetEvent(handle->channel);
1157:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** }
1158:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
1159:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
1160:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Provides the received data from receive buffer.
1161:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1162:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1163:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @return uint8_t: Data read from RBUF.\n
1164:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1165:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1166:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * This can be used in receive mode "Direct" to read the received data.
1167:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * If Rx FIFO is not configured, function reads the value of RBUF register.
1168:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Otherwise it reads the data from OUTR register.
1169:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure an interrupt by connecting the
1170:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP to receive event signals. This API can be used inside the ISR to read the
1171:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1172:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Example Usage:
1173:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @code
1174:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1175:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1176:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
1177:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct" with transmit FIFO and receive FIFO ena
1178:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Description:
1179:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon", receives 10 bytes and retransmits the received 10 bytes.
1180:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1181:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   int main(void)
1182:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   {
1183:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1184:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1185:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1186:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1187:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1188:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1189:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1190:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
1191:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        //Transmit the string "Infineon"
1192:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1193:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        {
1194:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1195:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           index++;
1196:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1198:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1199:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1200:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        }
1201:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1202:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        //Configure receive FIFO trigger limit to 9.
1203:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        UART_SetRXFIFOTriggerLimit(&UART_0, 9);
1204:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        //Receive 10 bytes input
1205:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        index = 0;
1206:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        //Wait till 10 bytes are received
1207:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        while(!(UART_GetRXFIFOStatus(&UART_0) &
1208:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *             (XMC_USIC_CH_RXFIFO_EVENT_STANDARD | XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE)))
1209:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        {
1210:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *          Rec_Data[index] = UART_GetReceivedWord(&UART_0);
1211:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *          index++;
1212:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *          if(index == 10)
1213:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *          {
1214:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *            break;
1215:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *          }
1216:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1217:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        }
1218:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1219:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        //Transmit the received data
1220:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        index = 0;
1221:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        while(index < 10)
1222:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        {
1223:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Rec_Data[index]);
1224:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           index++;
1225:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1226:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1227:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1228:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1229:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        }
1230:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1231:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
1232:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     else
1233:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
1234:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1235:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      while(1U)
1236:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      {
1237:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      }
1238:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
1239:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      return 1U;
1240:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  }
1241:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @endcode
1242:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1243:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
1244:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
1245:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** {
1246:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1247:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
1248:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** }
1249:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** 
1250:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** /**
1251:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @brief Transmits a word of data.
1252:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1253:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t \n
1254:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @param data Data to be transmitted.\n
1255:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @return None\n
1256:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1257:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1258:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Transmits a byte of data through the UART channel.
1259:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * If Tx FIFO is configured, the data is placed in the IN[0] register of the USIC channel used.
1260:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * If Tx FIFO is not configured, API waits for the TBUF to be free and then places the data in the 
1261:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure interrupt by connecting an
1262:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP. This API can be used inside the ISR to read the received data.
1263:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1264:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * Example Usage:
1265:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @code
1266:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1267:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1268:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Precondition:
1269:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct"
1270:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Description:
1271:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infinon"
1272:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1273:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   int main(void)
1274:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *   {
1275:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1276:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1277:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1278:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1279:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1280:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1281:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1282:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
1283:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1284:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        {
1285:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1286:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           index++;
1287:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1288:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1289:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1290:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1291:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *        }
1292:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
1293:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     else
1294:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     {
1295:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1296:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      while(1U)
1297:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      {
1298:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      }
1299:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *     }
1300:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *      return 1U;
1301:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *  }
1302:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  * @endcode
1303:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  *
1304:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****  */
1305:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_TransmitWord(const UART_t* const handle, uint8_t data)
1306:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** {
  27              	 .loc 1 1306 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31 0000 80B5     	 push {r7,lr}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 8
  34              	 .cfi_offset 7,-8
  35              	 .cfi_offset 14,-4
  36 0002 82B0     	 sub sp,sp,#8
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
1307:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1308:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h ****   XMC_UART_CH_Transmit(handle->channel, (uint16_t)data);
  45              	 .loc 1 1308 0
  46 000c 7B68     	 ldr r3,[r7,#4]
  47 000e 1A68     	 ldr r2,[r3]
  48 0010 FB78     	 ldrb r3,[r7,#3]
  49 0012 9BB2     	 uxth r3,r3
  50 0014 1046     	 mov r0,r2
  51 0016 1946     	 mov r1,r3
  52 0018 FFF7FEFF 	 bl XMC_UART_CH_Transmit
1309:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART\uart.h **** }
  53              	 .loc 1 1309 0
  54 001c 0837     	 adds r7,r7,#8
  55              	.LCFI3:
  56              	 .cfi_def_cfa_offset 8
  57 001e BD46     	 mov sp,r7
  58              	.LCFI4:
  59              	 .cfi_def_cfa_register 13
  60              	 
  61 0020 80BD     	 pop {r7,pc}
  62              	 .cfi_endproc
  63              	.LFE324:
  65              	 .comm carData,187,4
  66              	 .comm delay_count,4,4
  67              	 .global z
  68 0022 00BF     	 .section .bss.z,"aw",%nobits
  71              	z:
  72 0000 00       	 .space 1
  73              	 .global id
  74              	 .section .data.id,"aw",%progbits
  77              	id:
  78 0000 01       	 .byte 1
  79              	 .global id_check
  80              	 .section .data.id_check,"aw",%progbits
  83              	id_check:
  84 0000 02       	 .byte 2
  85              	 .global sync
  86              	 .section .data.sync,"aw",%progbits
  89              	sync:
  90 0000 4D       	 .byte 77
  91              	 .global ok
  92              	 .section .data.ok,"aw",%progbits
  95              	ok:
  96 0000 01       	 .byte 1
  97              	 .comm buffer,6,4
  98              	 .section .text.main,"ax",%progbits
  99              	 .align 2
 100              	 .global main
 101              	 .thumb
 102              	 .thumb_func
 104              	main:
 105              	.LFB471:
 106              	 .file 2 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 2018 Jun 15 14:14:54
   5:../main.c     ****  *  Author: Lukas
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** #include "Tele.h"                //Declarations from DAVE Code Generation (includes SFR declaration
   9:../main.c     **** 
  10:../main.c     **** struct data_tele carData;
  11:../main.c     **** //static void delay(uint32_t cycles);
  12:../main.c     **** uint32_t delay_count;
  13:../main.c     **** uint8_t z = 0;
  14:../main.c     **** uint8_t id = 1;
  15:../main.c     **** uint8_t id_check = 2;
  16:../main.c     **** uint8_t sync = 77;
  17:../main.c     **** uint8_t ok = 1;
  18:../main.c     **** uint8_t buffer[6] ;
  19:../main.c     **** 
  20:../main.c     **** int main(void)
  21:../main.c     **** {
 107              	 .loc 2 21 0
 108              	 .cfi_startproc
 109              	 
 110              	 
 111 0000 80B5     	 push {r7,lr}
 112              	.LCFI5:
 113              	 .cfi_def_cfa_offset 8
 114              	 .cfi_offset 7,-8
 115              	 .cfi_offset 14,-4
 116 0002 82B0     	 sub sp,sp,#8
 117              	.LCFI6:
 118              	 .cfi_def_cfa_offset 16
 119 0004 00AF     	 add r7,sp,#0
 120              	.LCFI7:
 121              	 .cfi_def_cfa_register 7
  22:../main.c     **** 	carData.id = 1;
 122              	 .loc 2 22 0
 123 0006 0C4B     	 ldr r3,.L5
 124 0008 0122     	 movs r2,#1
 125 000a 5A70     	 strb r2,[r3,#1]
  23:../main.c     **** 	carData.sync = '0x234';
 126              	 .loc 2 23 0
 127 000c 0A4B     	 ldr r3,.L5
 128 000e 3422     	 movs r2,#52
 129 0010 83F8BA20 	 strb r2,[r3,#186]
  24:../main.c     ****   DAVE_STATUS_t status;
  25:../main.c     **** 
  26:../main.c     ****   status = DAVE_Init();           /* Initialization of DAVE APPs  */
 130              	 .loc 2 26 0
 131 0014 FFF7FEFF 	 bl DAVE_Init
 132 0018 0346     	 mov r3,r0
 133 001a FB71     	 strb r3,[r7,#7]
  27:../main.c     **** 
  28:../main.c     ****   if(status != DAVE_STATUS_SUCCESS)
 134              	 .loc 2 28 0
 135 001c FB79     	 ldrb r3,[r7,#7]
 136 001e 002B     	 cmp r3,#0
 137 0020 00D0     	 beq .L3
 138              	.L4:
  29:../main.c     ****   {
  30:../main.c     ****     /* Placeholder for error handler code. The while loop below can be replaced with an user error 
  31:../main.c     ****     XMC_DEBUG("DAVE APPs initialization failed\n");
  32:../main.c     **** 
  33:../main.c     ****     while(1U)
  34:../main.c     ****     {
  35:../main.c     **** 
  36:../main.c     ****     }
 139              	 .loc 2 36 0 discriminator 1
 140 0022 FEE7     	 b .L4
 141              	.L3:
  37:../main.c     ****   }
  38:../main.c     **** 
  39:../main.c     ****   /* Placeholder for user application code. The while loop below can be replaced with user applicat
  40:../main.c     ****   while(1U)
  41:../main.c     ****   {
  42:../main.c     **** 	   CAN_1_Receive();
 142              	 .loc 2 42 0 discriminator 1
 143 0024 FFF7FEFF 	 bl CAN_1_Receive
  43:../main.c     **** 	   UART_Receive(&UART_0, buffer, sizeof(buffer));
 144              	 .loc 2 43 0 discriminator 1
 145 0028 0448     	 ldr r0,.L5+4
 146 002a 0549     	 ldr r1,.L5+8
 147 002c 0622     	 movs r2,#6
 148 002e FFF7FEFF 	 bl UART_Receive
  44:../main.c     **** 	   CAN_2_Receive();
 149              	 .loc 2 44 0 discriminator 1
 150 0032 FFF7FEFF 	 bl CAN_2_Receive
  45:../main.c     ****   }
 151              	 .loc 2 45 0 discriminator 1
 152 0036 F5E7     	 b .L3
 153              	.L6:
 154              	 .align 2
 155              	.L5:
 156 0038 00000000 	 .word carData
 157 003c 00000000 	 .word UART_0
 158 0040 00000000 	 .word buffer
 159              	 .cfi_endproc
 160              	.LFE471:
 162              	 .section .text.uartreceive,"ax",%progbits
 163              	 .align 2
 164              	 .global uartreceive
 165              	 .thumb
 166              	 .thumb_func
 168              	uartreceive:
 169              	.LFB472:
  46:../main.c     **** }
  47:../main.c     **** 
  48:../main.c     **** // Interrupt Routine zum Empfangen der Daten
  49:../main.c     **** void uartreceive()
  50:../main.c     **** {
 170              	 .loc 2 50 0
 171              	 .cfi_startproc
 172              	 
 173              	 
 174 0000 80B5     	 push {r7,lr}
 175              	.LCFI8:
 176              	 .cfi_def_cfa_offset 8
 177              	 .cfi_offset 7,-8
 178              	 .cfi_offset 14,-4
 179 0002 00AF     	 add r7,sp,#0
 180              	.LCFI9:
 181              	 .cfi_def_cfa_register 7
  51:../main.c     **** 	ok = 0;
 182              	 .loc 2 51 0
 183 0004 0D4B     	 ldr r3,.L10
 184 0006 0022     	 movs r2,#0
 185 0008 1A70     	 strb r2,[r3]
  52:../main.c     **** 	UART_Receive(&UART_0, buffer, sizeof(buffer));
 186              	 .loc 2 52 0
 187 000a 0D48     	 ldr r0,.L10+4
 188 000c 0D49     	 ldr r1,.L10+8
 189 000e 0622     	 movs r2,#6
 190 0010 FFF7FEFF 	 bl UART_Receive
  53:../main.c     **** 	// Empfangen der Daten von der Pitwall und ins struct schreiben zum prüfen
  54:../main.c     **** 	if(buffer[0] == id && buffer[5]==sync)
 191              	 .loc 2 54 0
 192 0014 0B4B     	 ldr r3,.L10+8
 193 0016 1A78     	 ldrb r2,[r3]
 194 0018 0B4B     	 ldr r3,.L10+12
 195 001a 1B78     	 ldrb r3,[r3]
 196 001c 9A42     	 cmp r2,r3
  55:../main.c     **** 	{
  56:../main.c     **** 		//carData.Launch_1=buffer[1];
  57:../main.c     **** 		//carData.Launch_2=buffer[2];
  58:../main.c     **** 		//carData.Launch_3=buffer[3];
  59:../main.c     **** 		//carData.Launch_4=buffer[4];
  60:../main.c     **** 
  61:../main.c     **** 	}
  62:../main.c     **** 	// wenn check ok sende Daten am CAN
  63:../main.c     **** 	if(buffer[0] == id_check && buffer[1] == 19)
 197              	 .loc 2 63 0
 198 001e 094B     	 ldr r3,.L10+8
 199 0020 1A78     	 ldrb r2,[r3]
 200 0022 0A4B     	 ldr r3,.L10+16
 201 0024 1B78     	 ldrb r3,[r3]
 202 0026 9A42     	 cmp r2,r3
 203 0028 06D1     	 bne .L7
 204              	 .loc 2 63 0 is_stmt 0 discriminator 1
 205 002a 064B     	 ldr r3,.L10+8
 206 002c 5B78     	 ldrb r3,[r3,#1]
 207 002e 132B     	 cmp r3,#19
 208 0030 02D1     	 bne .L7
  64:../main.c     **** 	{
  65:../main.c     **** 		ok = 1;
 209              	 .loc 2 65 0 is_stmt 1
 210 0032 024B     	 ldr r3,.L10
 211 0034 0122     	 movs r2,#1
 212 0036 1A70     	 strb r2,[r3]
 213              	.L7:
  66:../main.c     **** 	}
  67:../main.c     **** }
 214              	 .loc 2 67 0
 215 0038 80BD     	 pop {r7,pc}
 216              	.L11:
 217 003a 00BF     	 .align 2
 218              	.L10:
 219 003c 00000000 	 .word ok
 220 0040 00000000 	 .word UART_0
 221 0044 00000000 	 .word buffer
 222 0048 00000000 	 .word id
 223 004c 00000000 	 .word id_check
 224              	 .cfi_endproc
 225              	.LFE472:
 227              	 .section .text.CCU43_1_IRQHandler,"ax",%progbits
 228              	 .align 2
 229              	 .global CCU43_1_IRQHandler
 230              	 .thumb
 231              	 .thumb_func
 233              	CCU43_1_IRQHandler:
 234              	.LFB473:
  68:../main.c     **** 
  69:../main.c     **** // interrupt zum seriellen senden der daten an den XBEE
  70:../main.c     **** void uart_isr(void)
  71:../main.c     **** {
 235              	 .loc 2 71 0
 236              	 .cfi_startproc
 237              	 
 238              	 
 239 0000 80B5     	 push {r7,lr}
 240              	.LCFI10:
 241              	 .cfi_def_cfa_offset 8
 242              	 .cfi_offset 7,-8
 243              	 .cfi_offset 14,-4
 244 0002 00AF     	 add r7,sp,#0
 245              	.LCFI11:
 246              	 .cfi_def_cfa_register 7
  72:../main.c     **** 	// CAN_1_Transmit(ok);
  73:../main.c     **** 	 sendTlm();
 247              	 .loc 2 73 0
 248 0004 FFF7FEFF 	 bl sendTlm
  74:../main.c     **** }
 249              	 .loc 2 74 0
 250 0008 80BD     	 pop {r7,pc}
 251              	 .cfi_endproc
 252              	.LFE473:
 254 000a 00BF     	 .section .text.sendTlm,"ax",%progbits
 255              	 .align 2
 256              	 .global sendTlm
 257              	 .thumb
 258              	 .thumb_func
 260              	sendTlm:
 261              	.LFB474:
  75:../main.c     **** // packen der daten
  76:../main.c     **** void sendTlm()
  77:../main.c     **** {
 262              	 .loc 2 77 0
 263              	 .cfi_startproc
 264              	 
 265              	 
 266 0000 80B5     	 push {r7,lr}
 267              	.LCFI12:
 268              	 .cfi_def_cfa_offset 8
 269              	 .cfi_offset 7,-8
 270              	 .cfi_offset 14,-4
 271 0002 00AF     	 add r7,sp,#0
 272              	.LCFI13:
 273              	 .cfi_def_cfa_register 7
  78:../main.c     **** 	carData.length = sizeof(carData);
 274              	 .loc 2 78 0
 275 0004 034B     	 ldr r3,.L14
 276 0006 BB22     	 movs r2,#187
 277 0008 1A70     	 strb r2,[r3]
  79:../main.c     **** 	writeTlm(( char*)&carData,sizeof(carData));
 278              	 .loc 2 79 0
 279 000a 0248     	 ldr r0,.L14
 280 000c BB21     	 movs r1,#187
 281 000e FFF7FEFF 	 bl writeTlm
  80:../main.c     **** }
 282              	 .loc 2 80 0
 283 0012 80BD     	 pop {r7,pc}
 284              	.L15:
 285              	 .align 2
 286              	.L14:
 287 0014 00000000 	 .word carData
 288              	 .cfi_endproc
 289              	.LFE474:
 291              	 .section .text.writeTlm,"ax",%progbits
 292              	 .align 2
 293              	 .global writeTlm
 294              	 .thumb
 295              	 .thumb_func
 297              	writeTlm:
 298              	.LFB475:
  81:../main.c     **** // senden der Daten
  82:../main.c     **** void writeTlm(const char* pkt, int size)
  83:../main.c     **** 		{
 299              	 .loc 2 83 0
 300              	 .cfi_startproc
 301              	 
 302              	 
 303 0000 80B5     	 push {r7,lr}
 304              	.LCFI14:
 305              	 .cfi_def_cfa_offset 8
 306              	 .cfi_offset 7,-8
 307              	 .cfi_offset 14,-4
 308 0002 84B0     	 sub sp,sp,#16
 309              	.LCFI15:
 310              	 .cfi_def_cfa_offset 24
 311 0004 00AF     	 add r7,sp,#0
 312              	.LCFI16:
 313              	 .cfi_def_cfa_register 7
 314 0006 7860     	 str r0,[r7,#4]
 315 0008 3960     	 str r1,[r7]
 316              	.LBB2:
  84:../main.c     **** 	for(int i=0;i<size;i++)
 317              	 .loc 2 84 0
 318 000a 0023     	 movs r3,#0
 319 000c FB60     	 str r3,[r7,#12]
 320 000e 0AE0     	 b .L17
 321              	.L18:
  85:../main.c     **** 	{
  86:../main.c     **** 	UART_TransmitWord(&UART_0,pkt[i]);
 322              	 .loc 2 86 0 discriminator 3
 323 0010 FB68     	 ldr r3,[r7,#12]
 324 0012 7A68     	 ldr r2,[r7,#4]
 325 0014 1344     	 add r3,r3,r2
 326 0016 1B78     	 ldrb r3,[r3]
 327 0018 0648     	 ldr r0,.L19
 328 001a 1946     	 mov r1,r3
 329 001c FFF7FEFF 	 bl UART_TransmitWord
  84:../main.c     **** 	for(int i=0;i<size;i++)
 330              	 .loc 2 84 0 discriminator 3
 331 0020 FB68     	 ldr r3,[r7,#12]
 332 0022 0133     	 adds r3,r3,#1
 333 0024 FB60     	 str r3,[r7,#12]
 334              	.L17:
  84:../main.c     **** 	for(int i=0;i<size;i++)
 335              	 .loc 2 84 0 is_stmt 0 discriminator 1
 336 0026 FA68     	 ldr r2,[r7,#12]
 337 0028 3B68     	 ldr r3,[r7]
 338 002a 9A42     	 cmp r2,r3
 339 002c F0DB     	 blt .L18
 340              	.LBE2:
  87:../main.c     **** 	}
  88:../main.c     **** 		}
 341              	 .loc 2 88 0 is_stmt 1
 342 002e 1037     	 adds r7,r7,#16
 343              	.LCFI17:
 344              	 .cfi_def_cfa_offset 8
 345 0030 BD46     	 mov sp,r7
 346              	.LCFI18:
 347              	 .cfi_def_cfa_register 13
 348              	 
 349 0032 80BD     	 pop {r7,pc}
 350              	.L20:
 351              	 .align 2
 352              	.L19:
 353 0034 00000000 	 .word UART_0
 354              	 .cfi_endproc
 355              	.LFE475:
 357              	 .text
 358              	.Letext0:
 359              	 .file 3 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 360              	 .file 4 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 361              	 .file 5 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Libraries/XMCLib/inc/xmc_gpio.h"
 362              	 .file 6 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Libraries/XMCLib/inc/xmc4_gpio.h"
 363              	 .file 7 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Libraries/XMCLib/inc/xmc_usic.h"
 364              	 .file 8 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Libraries/XMCLib/inc/xmc_uart.h"
 365              	 .file 9 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/DAVE.h"
 366              	 .file 10 "../Tele.h"
 367              	 .file 11 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Libraries/CMSIS/Include/core_cm4.h"
 368              	 .file 12 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 369              	 .file 13 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/05_telemetrie/Telemetrie_Jr21/Dave/Generated/UART/uart_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.UART_TransmitWord:00000000 $t
    {standard input}:24     .text.UART_TransmitWord:00000000 UART_TransmitWord
                            *COM*:000000bb carData
                            *COM*:00000004 delay_count
    {standard input}:71     .bss.z:00000000 z
    {standard input}:72     .bss.z:00000000 $d
    {standard input}:77     .data.id:00000000 id
    {standard input}:83     .data.id_check:00000000 id_check
    {standard input}:89     .data.sync:00000000 sync
    {standard input}:95     .data.ok:00000000 ok
                            *COM*:00000006 buffer
    {standard input}:99     .text.main:00000000 $t
    {standard input}:104    .text.main:00000000 main
    {standard input}:156    .text.main:00000038 $d
    {standard input}:163    .text.uartreceive:00000000 $t
    {standard input}:168    .text.uartreceive:00000000 uartreceive
    {standard input}:219    .text.uartreceive:0000003c $d
    {standard input}:228    .text.CCU43_1_IRQHandler:00000000 $t
    {standard input}:233    .text.CCU43_1_IRQHandler:00000000 CCU43_1_IRQHandler
    {standard input}:260    .text.sendTlm:00000000 sendTlm
    {standard input}:255    .text.sendTlm:00000000 $t
    {standard input}:297    .text.writeTlm:00000000 writeTlm
    {standard input}:287    .text.sendTlm:00000014 $d
    {standard input}:292    .text.writeTlm:00000000 $t
    {standard input}:353    .text.writeTlm:00000034 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_UART_CH_Transmit
DAVE_Init
CAN_1_Receive
UART_Receive
CAN_2_Receive
UART_0
