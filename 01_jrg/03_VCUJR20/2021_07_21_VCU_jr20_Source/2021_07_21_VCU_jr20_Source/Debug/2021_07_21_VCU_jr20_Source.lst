
2021_07_21_VCU_jr20_Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fa4c  08000000  0c000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00020000  2**0
                  ALLOC
  2 .data         000006b0  20000000  0c00fa4c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000e00  200006b0  0c0100fc  000186b0  2**3
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  0001ffc0  2**2
                  ALLOC
  5 .debug_aranges 00001aa8  00000000  00000000  000186b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0003fa42  00000000  00000000  0001a158  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006cc3  00000000  00000000  00059b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001278d  00000000  00000000  0006085d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00006964  00000000  00000000  00072fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010716  00000000  00000000  00079950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d067  00000000  00000000  0008a066  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000015f8  00000000  00000000  000970cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 000011fb  00000000  00000000  000986c5  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 e5 cb 00 08 d5 ac 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	e1 84 00 08 b1 02 00 08 00 00 00 00 21 87 00 08     ............!...
 800003c:	91 87 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 a9 d6 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00fa4c 	.word	0x0c00fa4c
 800024c:	20000000 	.word	0x20000000
 8000250:	000006b0 	.word	0x000006b0
 8000254:	0c0100fc 	.word	0x0c0100fc
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00fa4c 	.word	0x0c00fa4c
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00fa4c 	.word	0x0c00fa4c
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200006b0 	.word	0x200006b0
 800027c:	00000dfc 	.word	0x00000dfc
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	0800ef49 	.word	0x0800ef49
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	0800e1b9 	.word	0x0800e1b9

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f00a fd9d 	bl	800ae04 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f00a fe2f 	bl	800af2c <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f00a fe0e 	bl	800af18 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <FUNC_Brakelight>:
#include "VCU.h"
#include "VCU_private.h"

/* Output and update for atomic system: '<Root>/Brakelight' */
void FUNC_Brakelight(void)
{
 80003a8:	b598      	push	{r3, r4, r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* RelationalOperator: '<S1>/Relational Operator' incorporates:
   *  Constant: '<S1>/Constant'
   */
  VCU_B.RelationalOperator_c = (VCU_B.Add1_m > 5.0);
 80003ac:	4b20      	ldr	r3, [pc, #128]	; (8000430 <FUNC_Brakelight+0x88>)
 80003ae:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80003b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003b6:	2101      	movs	r1, #1
 80003b8:	460c      	mov	r4, r1
 80003ba:	4610      	mov	r0, r2
 80003bc:	4619      	mov	r1, r3
 80003be:	f04f 0200 	mov.w	r2, #0
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <FUNC_Brakelight+0x8c>)
 80003c4:	f00e fd90 	bl	800eee8 <__aeabi_dcmpgt>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d101      	bne.n	80003d2 <FUNC_Brakelight+0x2a>
 80003ce:	2300      	movs	r3, #0
 80003d0:	461c      	mov	r4, r3
 80003d2:	b2e3      	uxtb	r3, r4
 80003d4:	461a      	mov	r2, r3
 80003d6:	4b16      	ldr	r3, [pc, #88]	; (8000430 <FUNC_Brakelight+0x88>)
 80003d8:	f883 2780 	strb.w	r2, [r3, #1920]	; 0x780

  /* RelationalOperator: '<S1>/Relational Operator1' incorporates:
   *  Constant: '<S1>/Constant'
   */
  VCU_B.RelationalOperator1_b = (5.0 < VCU_B.Sensitivity1538mVbar);
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <FUNC_Brakelight+0x88>)
 80003de:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80003e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003e6:	2101      	movs	r1, #1
 80003e8:	460c      	mov	r4, r1
 80003ea:	4610      	mov	r0, r2
 80003ec:	4619      	mov	r1, r3
 80003ee:	f04f 0200 	mov.w	r2, #0
 80003f2:	4b10      	ldr	r3, [pc, #64]	; (8000434 <FUNC_Brakelight+0x8c>)
 80003f4:	f00e fd78 	bl	800eee8 <__aeabi_dcmpgt>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d101      	bne.n	8000402 <FUNC_Brakelight+0x5a>
 80003fe:	2300      	movs	r3, #0
 8000400:	461c      	mov	r4, r3
 8000402:	b2e3      	uxtb	r3, r4
 8000404:	461a      	mov	r2, r3
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <FUNC_Brakelight+0x88>)
 8000408:	f883 2781 	strb.w	r2, [r3, #1921]	; 0x781

  /* Logic: '<S1>/Logical Operator' */
  VCU_B.Brakelight_f = (VCU_B.RelationalOperator_c ||
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <FUNC_Brakelight+0x88>)
 800040e:	f893 3780 	ldrb.w	r3, [r3, #1920]	; 0x780
 8000412:	2b00      	cmp	r3, #0
 8000414:	d104      	bne.n	8000420 <FUNC_Brakelight+0x78>
                        VCU_B.RelationalOperator1_b);
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <FUNC_Brakelight+0x88>)
 8000418:	f893 3781 	ldrb.w	r3, [r3, #1921]	; 0x781
   *  Constant: '<S1>/Constant'
   */
  VCU_B.RelationalOperator1_b = (5.0 < VCU_B.Sensitivity1538mVbar);

  /* Logic: '<S1>/Logical Operator' */
  VCU_B.Brakelight_f = (VCU_B.RelationalOperator_c ||
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <FUNC_Brakelight+0x7c>
 8000420:	2301      	movs	r3, #1
 8000422:	e000      	b.n	8000426 <FUNC_Brakelight+0x7e>
 8000424:	2300      	movs	r3, #0
 8000426:	b2da      	uxtb	r2, r3
 8000428:	4b01      	ldr	r3, [pc, #4]	; (8000430 <FUNC_Brakelight+0x88>)
 800042a:	f883 2782 	strb.w	r2, [r3, #1922]	; 0x782
                        VCU_B.RelationalOperator1_b);
}
 800042e:	bd98      	pop	{r3, r4, r7, pc}
 8000430:	200008c8 	.word	0x200008c8
 8000434:	40140000 	.word	0x40140000

08000438 <FUNC_InputData>:
#include "VCU.h"
#include "VCU_private.h"

/* Output and update for atomic system: '<Root>/Input Data' */
void FUNC_InputData(void)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b083      	sub	sp, #12
 800043c:	af02      	add	r7, sp, #8
  /* DataStoreRead: '<S8>/Data Store Read1' */
  VCU_B.DataStoreRead1_d = VCU_DW.VAR_IN_p_brake_F_LSB;
 800043e:	4bc0      	ldr	r3, [pc, #768]	; (8000740 <FUNC_InputData+0x308>)
 8000440:	f893 2113 	ldrb.w	r2, [r3, #275]	; 0x113
 8000444:	4bbf      	ldr	r3, [pc, #764]	; (8000744 <FUNC_InputData+0x30c>)
 8000446:	f883 26a2 	strb.w	r2, [r3, #1698]	; 0x6a2

  /* DataStoreRead: '<S8>/Data Store Read4' */
  VCU_B.DataStoreRead4_p = VCU_DW.VAR_IN_p_brake_F_MSB;
 800044a:	4bbd      	ldr	r3, [pc, #756]	; (8000740 <FUNC_InputData+0x308>)
 800044c:	f893 2116 	ldrb.w	r2, [r3, #278]	; 0x116
 8000450:	4bbc      	ldr	r3, [pc, #752]	; (8000744 <FUNC_InputData+0x30c>)
 8000452:	f883 26a3 	strb.w	r2, [r3, #1699]	; 0x6a3

  /* Gain: '<S16>/Gain' */
  VCU_B.Gain_d = (uint16_T)(VCU_B.DataStoreRead4_p << 7);
 8000456:	4bbb      	ldr	r3, [pc, #748]	; (8000744 <FUNC_InputData+0x30c>)
 8000458:	f893 36a3 	ldrb.w	r3, [r3, #1699]	; 0x6a3
 800045c:	b29b      	uxth	r3, r3
 800045e:	01db      	lsls	r3, r3, #7
 8000460:	b29a      	uxth	r2, r3
 8000462:	4bb8      	ldr	r3, [pc, #736]	; (8000744 <FUNC_InputData+0x30c>)
 8000464:	f8a3 266c 	strh.w	r2, [r3, #1644]	; 0x66c

  /* Sum: '<S16>/Add' */
  VCU_B.Add_a = (uint16_T)((((uint32_T)VCU_B.Gain_d << 1) +
 8000468:	4bb6      	ldr	r3, [pc, #728]	; (8000744 <FUNC_InputData+0x30c>)
 800046a:	f8b3 366c 	ldrh.w	r3, [r3, #1644]	; 0x66c
 800046e:	005b      	lsls	r3, r3, #1
    VCU_B.DataStoreRead1_d) >> 1);
 8000470:	4ab4      	ldr	r2, [pc, #720]	; (8000744 <FUNC_InputData+0x30c>)
 8000472:	f892 26a2 	ldrb.w	r2, [r2, #1698]	; 0x6a2

  /* Gain: '<S16>/Gain' */
  VCU_B.Gain_d = (uint16_T)(VCU_B.DataStoreRead4_p << 7);

  /* Sum: '<S16>/Add' */
  VCU_B.Add_a = (uint16_T)((((uint32_T)VCU_B.Gain_d << 1) +
 8000476:	4413      	add	r3, r2
    VCU_B.DataStoreRead1_d) >> 1);
 8000478:	085b      	lsrs	r3, r3, #1

  /* Gain: '<S16>/Gain' */
  VCU_B.Gain_d = (uint16_T)(VCU_B.DataStoreRead4_p << 7);

  /* Sum: '<S16>/Add' */
  VCU_B.Add_a = (uint16_T)((((uint32_T)VCU_B.Gain_d << 1) +
 800047a:	b29a      	uxth	r2, r3
 800047c:	4bb1      	ldr	r3, [pc, #708]	; (8000744 <FUNC_InputData+0x30c>)
 800047e:	f8a3 266e 	strh.w	r2, [r3, #1646]	; 0x66e
    VCU_B.DataStoreRead1_d) >> 1);

  /* DataTypeConversion: '<S16>/Data Type Conversion' */
  VCU_B.DataTypeConversion = (uint16_T)(VCU_B.Add_a << 1);
 8000482:	4bb0      	ldr	r3, [pc, #704]	; (8000744 <FUNC_InputData+0x30c>)
 8000484:	f8b3 366e 	ldrh.w	r3, [r3, #1646]	; 0x66e
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	b29a      	uxth	r2, r3
 800048c:	4bad      	ldr	r3, [pc, #692]	; (8000744 <FUNC_InputData+0x30c>)
 800048e:	f8a3 265a 	strh.w	r2, [r3, #1626]	; 0x65a

  /* Gain: '<S15>/Factor' */
  VCU_B.Factor_g = 64173U * VCU_B.DataTypeConversion;
 8000492:	4bac      	ldr	r3, [pc, #688]	; (8000744 <FUNC_InputData+0x30c>)
 8000494:	f8b3 365a 	ldrh.w	r3, [r3, #1626]	; 0x65a
 8000498:	461a      	mov	r2, r3
 800049a:	f64f 23ad 	movw	r3, #64173	; 0xfaad
 800049e:	fb03 f302 	mul.w	r3, r3, r2
 80004a2:	4aa8      	ldr	r2, [pc, #672]	; (8000744 <FUNC_InputData+0x30c>)
 80004a4:	f8c2 362c 	str.w	r3, [r2, #1580]	; 0x62c

  /* Sum: '<S15>/Add1' incorporates:
   *  Constant: '<S15>/Offset'
   */
  VCU_B.Add1_m = (real_T)VCU_B.Factor_g * 2.384185791015625E-7 + -20.0;
 80004a8:	4ba6      	ldr	r3, [pc, #664]	; (8000744 <FUNC_InputData+0x30c>)
 80004aa:	f8d3 362c 	ldr.w	r3, [r3, #1580]	; 0x62c
 80004ae:	4618      	mov	r0, r3
 80004b0:	f00e fa14 	bl	800e8dc <__aeabi_ui2d>
 80004b4:	4602      	mov	r2, r0
 80004b6:	460b      	mov	r3, r1
 80004b8:	4610      	mov	r0, r2
 80004ba:	4619      	mov	r1, r3
 80004bc:	f04f 0200 	mov.w	r2, #0
 80004c0:	4ba1      	ldr	r3, [pc, #644]	; (8000748 <FUNC_InputData+0x310>)
 80004c2:	f00e fa81 	bl	800e9c8 <__aeabi_dmul>
 80004c6:	4602      	mov	r2, r0
 80004c8:	460b      	mov	r3, r1
 80004ca:	4610      	mov	r0, r2
 80004cc:	4619      	mov	r1, r3
 80004ce:	f04f 0200 	mov.w	r2, #0
 80004d2:	4b9e      	ldr	r3, [pc, #632]	; (800074c <FUNC_InputData+0x314>)
 80004d4:	f00e f8c4 	bl	800e660 <__aeabi_dsub>
 80004d8:	4602      	mov	r2, r0
 80004da:	460b      	mov	r3, r1
 80004dc:	4999      	ldr	r1, [pc, #612]	; (8000744 <FUNC_InputData+0x30c>)
 80004de:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 80004e2:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S8>/Data Store Read2' */
  VCU_B.DataStoreRead2 = VCU_DW.VAR_IN_ABS_BL_switch;
 80004e6:	4b96      	ldr	r3, [pc, #600]	; (8000740 <FUNC_InputData+0x308>)
 80004e8:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
 80004ec:	4b95      	ldr	r3, [pc, #596]	; (8000744 <FUNC_InputData+0x30c>)
 80004ee:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4

  /* DataTypeConversion: '<S8>/Data Type Conversion2' */
  VCU_B.ABS_BL_switch = VCU_B.DataStoreRead2;
 80004f2:	4b94      	ldr	r3, [pc, #592]	; (8000744 <FUNC_InputData+0x30c>)
 80004f4:	f893 36a4 	ldrb.w	r3, [r3, #1700]	; 0x6a4
 80004f8:	4618      	mov	r0, r3
 80004fa:	f00e f9ef 	bl	800e8dc <__aeabi_ui2d>
 80004fe:	4602      	mov	r2, r0
 8000500:	460b      	mov	r3, r1
 8000502:	4990      	ldr	r1, [pc, #576]	; (8000744 <FUNC_InputData+0x30c>)
 8000504:	f501 6184 	add.w	r1, r1, #1056	; 0x420
 8000508:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S8>/Data Store Read3' */
  VCU_B.DataStoreRead3_l = VCU_DW.VAR_IN_ABS_switchstate;
 800050c:	4b8c      	ldr	r3, [pc, #560]	; (8000740 <FUNC_InputData+0x308>)
 800050e:	f893 2115 	ldrb.w	r2, [r3, #277]	; 0x115
 8000512:	4b8c      	ldr	r3, [pc, #560]	; (8000744 <FUNC_InputData+0x30c>)
 8000514:	f883 26a5 	strb.w	r2, [r3, #1701]	; 0x6a5

  /* DataTypeConversion: '<S8>/Data Type Conversion' */
  VCU_B.ABS_switchstate = VCU_B.DataStoreRead3_l;
 8000518:	4b8a      	ldr	r3, [pc, #552]	; (8000744 <FUNC_InputData+0x30c>)
 800051a:	f893 36a5 	ldrb.w	r3, [r3, #1701]	; 0x6a5
 800051e:	4618      	mov	r0, r3
 8000520:	f00e f9dc 	bl	800e8dc <__aeabi_ui2d>
 8000524:	4602      	mov	r2, r0
 8000526:	460b      	mov	r3, r1
 8000528:	4986      	ldr	r1, [pc, #536]	; (8000744 <FUNC_InputData+0x30c>)
 800052a:	f501 6185 	add.w	r1, r1, #1064	; 0x428
 800052e:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S8>/Data Store Read5' */
  VCU_B.DataStoreRead5_d = VCU_DW.VAR_IN_ABS_EBD_Lamp;
 8000532:	4b83      	ldr	r3, [pc, #524]	; (8000740 <FUNC_InputData+0x308>)
 8000534:	f893 2117 	ldrb.w	r2, [r3, #279]	; 0x117
 8000538:	4b82      	ldr	r3, [pc, #520]	; (8000744 <FUNC_InputData+0x30c>)
 800053a:	f883 26a6 	strb.w	r2, [r3, #1702]	; 0x6a6

  /* DataTypeConversion: '<S8>/Data Type Conversion4' */
  VCU_B.ABS_EBD_Lamp = VCU_B.DataStoreRead5_d;
 800053e:	4b81      	ldr	r3, [pc, #516]	; (8000744 <FUNC_InputData+0x30c>)
 8000540:	f893 36a6 	ldrb.w	r3, [r3, #1702]	; 0x6a6
 8000544:	4618      	mov	r0, r3
 8000546:	f00e f9c9 	bl	800e8dc <__aeabi_ui2d>
 800054a:	4602      	mov	r2, r0
 800054c:	460b      	mov	r3, r1
 800054e:	497d      	ldr	r1, [pc, #500]	; (8000744 <FUNC_InputData+0x30c>)
 8000550:	f501 6186 	add.w	r1, r1, #1072	; 0x430
 8000554:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S8>/Data Store Read6' */
  VCU_B.DataStoreRead6_j = VCU_DW.VAR_IN_ABS_active;
 8000558:	4b79      	ldr	r3, [pc, #484]	; (8000740 <FUNC_InputData+0x308>)
 800055a:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 800055e:	4b79      	ldr	r3, [pc, #484]	; (8000744 <FUNC_InputData+0x30c>)
 8000560:	f883 26a7 	strb.w	r2, [r3, #1703]	; 0x6a7

  /* DataTypeConversion: '<S8>/Data Type Conversion3' */
  VCU_B.ABS_active = VCU_B.DataStoreRead6_j;
 8000564:	4b77      	ldr	r3, [pc, #476]	; (8000744 <FUNC_InputData+0x30c>)
 8000566:	f893 36a7 	ldrb.w	r3, [r3, #1703]	; 0x6a7
 800056a:	4618      	mov	r0, r3
 800056c:	f00e f9b6 	bl	800e8dc <__aeabi_ui2d>
 8000570:	4602      	mov	r2, r0
 8000572:	460b      	mov	r3, r1
 8000574:	4973      	ldr	r1, [pc, #460]	; (8000744 <FUNC_InputData+0x30c>)
 8000576:	f501 6187 	add.w	r1, r1, #1080	; 0x438
 800057a:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S8>/Data Store Read7' */
  VCU_B.DataStoreRead7_l = VCU_DW.VAR_IN_ABS_Lamp;
 800057e:	4b70      	ldr	r3, [pc, #448]	; (8000740 <FUNC_InputData+0x308>)
 8000580:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8000584:	4b6f      	ldr	r3, [pc, #444]	; (8000744 <FUNC_InputData+0x30c>)
 8000586:	f883 26a8 	strb.w	r2, [r3, #1704]	; 0x6a8

  /* DataTypeConversion: '<S8>/Data Type Conversion5' */
  VCU_B.ABS_Lamp = VCU_B.DataStoreRead7_l;
 800058a:	4b6e      	ldr	r3, [pc, #440]	; (8000744 <FUNC_InputData+0x30c>)
 800058c:	f893 36a8 	ldrb.w	r3, [r3, #1704]	; 0x6a8
 8000590:	4618      	mov	r0, r3
 8000592:	f00e f9a3 	bl	800e8dc <__aeabi_ui2d>
 8000596:	4602      	mov	r2, r0
 8000598:	460b      	mov	r3, r1
 800059a:	496a      	ldr	r1, [pc, #424]	; (8000744 <FUNC_InputData+0x30c>)
 800059c:	f501 6188 	add.w	r1, r1, #1088	; 0x440
 80005a0:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S9>/Data Store Read5' */
  VCU_B.DataStoreRead5_n = VCU_DW.VAR_IN_n_wheel_FL_mpros_LSB;
 80005a4:	4b66      	ldr	r3, [pc, #408]	; (8000740 <FUNC_InputData+0x308>)
 80005a6:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
 80005aa:	4b66      	ldr	r3, [pc, #408]	; (8000744 <FUNC_InputData+0x30c>)
 80005ac:	f883 26a9 	strb.w	r2, [r3, #1705]	; 0x6a9

  /* DataStoreRead: '<S9>/Data Store Read1' */
  VCU_B.DataStoreRead1_k = VCU_DW.VAR_IN_n_wheel_FL_mpros_MSB;
 80005b0:	4b63      	ldr	r3, [pc, #396]	; (8000740 <FUNC_InputData+0x308>)
 80005b2:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 80005b6:	4b63      	ldr	r3, [pc, #396]	; (8000744 <FUNC_InputData+0x30c>)
 80005b8:	f883 26aa 	strb.w	r2, [r3, #1706]	; 0x6aa

  /* Gain: '<S21>/Gain' */
  VCU_B.Gain_i2 = (uint16_T)(VCU_B.DataStoreRead1_k << 7);
 80005bc:	4b61      	ldr	r3, [pc, #388]	; (8000744 <FUNC_InputData+0x30c>)
 80005be:	f893 36aa 	ldrb.w	r3, [r3, #1706]	; 0x6aa
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	01db      	lsls	r3, r3, #7
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	4b5e      	ldr	r3, [pc, #376]	; (8000744 <FUNC_InputData+0x30c>)
 80005ca:	f8a3 2670 	strh.w	r2, [r3, #1648]	; 0x670

  /* Sum: '<S21>/Add' */
  VCU_B.Add_li = (uint16_T)((((uint32_T)VCU_B.Gain_i2 << 1) +
 80005ce:	4b5d      	ldr	r3, [pc, #372]	; (8000744 <FUNC_InputData+0x30c>)
 80005d0:	f8b3 3670 	ldrh.w	r3, [r3, #1648]	; 0x670
 80005d4:	005b      	lsls	r3, r3, #1
    VCU_B.DataStoreRead5_n) >> 1);
 80005d6:	4a5b      	ldr	r2, [pc, #364]	; (8000744 <FUNC_InputData+0x30c>)
 80005d8:	f892 26a9 	ldrb.w	r2, [r2, #1705]	; 0x6a9

  /* Gain: '<S21>/Gain' */
  VCU_B.Gain_i2 = (uint16_T)(VCU_B.DataStoreRead1_k << 7);

  /* Sum: '<S21>/Add' */
  VCU_B.Add_li = (uint16_T)((((uint32_T)VCU_B.Gain_i2 << 1) +
 80005dc:	4413      	add	r3, r2
    VCU_B.DataStoreRead5_n) >> 1);
 80005de:	085b      	lsrs	r3, r3, #1

  /* Gain: '<S21>/Gain' */
  VCU_B.Gain_i2 = (uint16_T)(VCU_B.DataStoreRead1_k << 7);

  /* Sum: '<S21>/Add' */
  VCU_B.Add_li = (uint16_T)((((uint32_T)VCU_B.Gain_i2 << 1) +
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	4b58      	ldr	r3, [pc, #352]	; (8000744 <FUNC_InputData+0x30c>)
 80005e4:	f8a3 2672 	strh.w	r2, [r3, #1650]	; 0x672
    VCU_B.DataStoreRead5_n) >> 1);

  /* DataTypeConversion: '<S21>/Data Type Conversion' */
  VCU_B.DataTypeConversion_a = (uint16_T)(VCU_B.Add_li << 1);
 80005e8:	4b56      	ldr	r3, [pc, #344]	; (8000744 <FUNC_InputData+0x30c>)
 80005ea:	f8b3 3672 	ldrh.w	r3, [r3, #1650]	; 0x672
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	4b54      	ldr	r3, [pc, #336]	; (8000744 <FUNC_InputData+0x30c>)
 80005f4:	f8a3 265c 	strh.w	r2, [r3, #1628]	; 0x65c

  /* Gain: '<S17>/Factor' */
  VCU_B.Factor_br = (uint32_T)VCU_B.DataTypeConversion_a << 15;
 80005f8:	4b52      	ldr	r3, [pc, #328]	; (8000744 <FUNC_InputData+0x30c>)
 80005fa:	f8b3 365c 	ldrh.w	r3, [r3, #1628]	; 0x65c
 80005fe:	03db      	lsls	r3, r3, #15
 8000600:	4a50      	ldr	r2, [pc, #320]	; (8000744 <FUNC_InputData+0x30c>)
 8000602:	f8c2 3630 	str.w	r3, [r2, #1584]	; 0x630

  /* Sum: '<S17>/Add1' */
  VCU_B.Add1_k = (real_T)VCU_B.Factor_br * 4.76837158203125E-7;
 8000606:	4b4f      	ldr	r3, [pc, #316]	; (8000744 <FUNC_InputData+0x30c>)
 8000608:	f8d3 3630 	ldr.w	r3, [r3, #1584]	; 0x630
 800060c:	4618      	mov	r0, r3
 800060e:	f00e f965 	bl	800e8dc <__aeabi_ui2d>
 8000612:	4602      	mov	r2, r0
 8000614:	460b      	mov	r3, r1
 8000616:	4610      	mov	r0, r2
 8000618:	4619      	mov	r1, r3
 800061a:	f04f 0200 	mov.w	r2, #0
 800061e:	4b4c      	ldr	r3, [pc, #304]	; (8000750 <FUNC_InputData+0x318>)
 8000620:	f00e f9d2 	bl	800e9c8 <__aeabi_dmul>
 8000624:	4602      	mov	r2, r0
 8000626:	460b      	mov	r3, r1
 8000628:	4946      	ldr	r1, [pc, #280]	; (8000744 <FUNC_InputData+0x30c>)
 800062a:	f501 6189 	add.w	r1, r1, #1096	; 0x448
 800062e:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S9>/Data Store Read2' */
  VCU_B.DataStoreRead2_n = VCU_DW.VAR_IN_n_wheel_FR_mpros_LSB;
 8000632:	4b43      	ldr	r3, [pc, #268]	; (8000740 <FUNC_InputData+0x308>)
 8000634:	f893 211b 	ldrb.w	r2, [r3, #283]	; 0x11b
 8000638:	4b42      	ldr	r3, [pc, #264]	; (8000744 <FUNC_InputData+0x30c>)
 800063a:	f883 26ab 	strb.w	r2, [r3, #1707]	; 0x6ab

  /* DataStoreRead: '<S9>/Data Store Read3' */
  VCU_B.DataStoreRead3_k = VCU_DW.VAR_IN_n_wheel_FR_mpros_MSB;
 800063e:	4b40      	ldr	r3, [pc, #256]	; (8000740 <FUNC_InputData+0x308>)
 8000640:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 8000644:	4b3f      	ldr	r3, [pc, #252]	; (8000744 <FUNC_InputData+0x30c>)
 8000646:	f883 26ac 	strb.w	r2, [r3, #1708]	; 0x6ac

  /* Gain: '<S22>/Gain' */
  VCU_B.Gain_e = (uint16_T)(VCU_B.DataStoreRead3_k << 7);
 800064a:	4b3e      	ldr	r3, [pc, #248]	; (8000744 <FUNC_InputData+0x30c>)
 800064c:	f893 36ac 	ldrb.w	r3, [r3, #1708]	; 0x6ac
 8000650:	b29b      	uxth	r3, r3
 8000652:	01db      	lsls	r3, r3, #7
 8000654:	b29a      	uxth	r2, r3
 8000656:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <FUNC_InputData+0x30c>)
 8000658:	f8a3 2674 	strh.w	r2, [r3, #1652]	; 0x674

  /* Sum: '<S22>/Add' */
  VCU_B.Add_f = (uint16_T)((((uint32_T)VCU_B.Gain_e << 1) +
 800065c:	4b39      	ldr	r3, [pc, #228]	; (8000744 <FUNC_InputData+0x30c>)
 800065e:	f8b3 3674 	ldrh.w	r3, [r3, #1652]	; 0x674
 8000662:	005b      	lsls	r3, r3, #1
    VCU_B.DataStoreRead2_n) >> 1);
 8000664:	4a37      	ldr	r2, [pc, #220]	; (8000744 <FUNC_InputData+0x30c>)
 8000666:	f892 26ab 	ldrb.w	r2, [r2, #1707]	; 0x6ab

  /* Gain: '<S22>/Gain' */
  VCU_B.Gain_e = (uint16_T)(VCU_B.DataStoreRead3_k << 7);

  /* Sum: '<S22>/Add' */
  VCU_B.Add_f = (uint16_T)((((uint32_T)VCU_B.Gain_e << 1) +
 800066a:	4413      	add	r3, r2
    VCU_B.DataStoreRead2_n) >> 1);
 800066c:	085b      	lsrs	r3, r3, #1

  /* Gain: '<S22>/Gain' */
  VCU_B.Gain_e = (uint16_T)(VCU_B.DataStoreRead3_k << 7);

  /* Sum: '<S22>/Add' */
  VCU_B.Add_f = (uint16_T)((((uint32_T)VCU_B.Gain_e << 1) +
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b34      	ldr	r3, [pc, #208]	; (8000744 <FUNC_InputData+0x30c>)
 8000672:	f8a3 2676 	strh.w	r2, [r3, #1654]	; 0x676
    VCU_B.DataStoreRead2_n) >> 1);

  /* DataTypeConversion: '<S22>/Data Type Conversion' */
  VCU_B.DataTypeConversion_l = (uint16_T)(VCU_B.Add_f << 1);
 8000676:	4b33      	ldr	r3, [pc, #204]	; (8000744 <FUNC_InputData+0x30c>)
 8000678:	f8b3 3676 	ldrh.w	r3, [r3, #1654]	; 0x676
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b30      	ldr	r3, [pc, #192]	; (8000744 <FUNC_InputData+0x30c>)
 8000682:	f8a3 265e 	strh.w	r2, [r3, #1630]	; 0x65e

  /* Gain: '<S18>/Factor' */
  VCU_B.Factor_gm = (uint32_T)VCU_B.DataTypeConversion_l << 15;
 8000686:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <FUNC_InputData+0x30c>)
 8000688:	f8b3 365e 	ldrh.w	r3, [r3, #1630]	; 0x65e
 800068c:	03db      	lsls	r3, r3, #15
 800068e:	4a2d      	ldr	r2, [pc, #180]	; (8000744 <FUNC_InputData+0x30c>)
 8000690:	f8c2 3634 	str.w	r3, [r2, #1588]	; 0x634

  /* Sum: '<S18>/Add1' */
  VCU_B.Add1_de = (real_T)VCU_B.Factor_gm * 4.76837158203125E-7;
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <FUNC_InputData+0x30c>)
 8000696:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
 800069a:	4618      	mov	r0, r3
 800069c:	f00e f91e 	bl	800e8dc <__aeabi_ui2d>
 80006a0:	4602      	mov	r2, r0
 80006a2:	460b      	mov	r3, r1
 80006a4:	4610      	mov	r0, r2
 80006a6:	4619      	mov	r1, r3
 80006a8:	f04f 0200 	mov.w	r2, #0
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <FUNC_InputData+0x318>)
 80006ae:	f00e f98b 	bl	800e9c8 <__aeabi_dmul>
 80006b2:	4602      	mov	r2, r0
 80006b4:	460b      	mov	r3, r1
 80006b6:	4923      	ldr	r1, [pc, #140]	; (8000744 <FUNC_InputData+0x30c>)
 80006b8:	f501 618a 	add.w	r1, r1, #1104	; 0x450
 80006bc:	e9c1 2300 	strd	r2, r3, [r1]

  /* Sum: '<S9>/Add' */
  VCU_B.Add_l1 = VCU_B.Add1_k + VCU_B.Add1_de;
 80006c0:	4b20      	ldr	r3, [pc, #128]	; (8000744 <FUNC_InputData+0x30c>)
 80006c2:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80006c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <FUNC_InputData+0x30c>)
 80006cc:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80006d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006d4:	f00d ffc6 	bl	800e664 <__adddf3>
 80006d8:	4602      	mov	r2, r0
 80006da:	460b      	mov	r3, r1
 80006dc:	4919      	ldr	r1, [pc, #100]	; (8000744 <FUNC_InputData+0x30c>)
 80006de:	f501 618b 	add.w	r1, r1, #1112	; 0x458
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S9>/Gain4' */
  VCU_B.Gain4 = 0.9 * VCU_B.Add_l1;
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <FUNC_InputData+0x30c>)
 80006e8:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80006ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006f0:	4610      	mov	r0, r2
 80006f2:	4619      	mov	r1, r3
 80006f4:	a310      	add	r3, pc, #64	; (adr r3, 8000738 <FUNC_InputData+0x300>)
 80006f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006fa:	f00e f965 	bl	800e9c8 <__aeabi_dmul>
 80006fe:	4602      	mov	r2, r0
 8000700:	460b      	mov	r3, r1
 8000702:	4910      	ldr	r1, [pc, #64]	; (8000744 <FUNC_InputData+0x30c>)
 8000704:	f501 618c 	add.w	r1, r1, #1120	; 0x460
 8000708:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S9>/Data Store Read4' */
  VCU_B.DataStoreRead4_o = VCU_DW.VAR_IN_n_wheel_RL_mpros_LSB;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <FUNC_InputData+0x308>)
 800070e:	f893 211d 	ldrb.w	r2, [r3, #285]	; 0x11d
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <FUNC_InputData+0x30c>)
 8000714:	f883 26ad 	strb.w	r2, [r3, #1709]	; 0x6ad

  /* DataStoreRead: '<S9>/Data Store Read6' */
  VCU_B.DataStoreRead6_f = VCU_DW.VAR_IN_n_wheel_RL_mpros_MSB;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <FUNC_InputData+0x308>)
 800071a:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <FUNC_InputData+0x30c>)
 8000720:	f883 26ae 	strb.w	r2, [r3, #1710]	; 0x6ae

  /* Gain: '<S23>/Gain' */
  VCU_B.Gain_me = (uint16_T)(VCU_B.DataStoreRead6_f << 7);
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <FUNC_InputData+0x30c>)
 8000726:	f893 36ae 	ldrb.w	r3, [r3, #1710]	; 0x6ae
 800072a:	b29b      	uxth	r3, r3
 800072c:	01db      	lsls	r3, r3, #7
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <FUNC_InputData+0x30c>)
 8000732:	f8a3 2678 	strh.w	r2, [r3, #1656]	; 0x678
 8000736:	e00d      	b.n	8000754 <FUNC_InputData+0x31c>
 8000738:	cccccccd 	.word	0xcccccccd
 800073c:	3feccccc 	.word	0x3feccccc
 8000740:	20001058 	.word	0x20001058
 8000744:	200008c8 	.word	0x200008c8
 8000748:	3e900000 	.word	0x3e900000
 800074c:	40340000 	.word	0x40340000
 8000750:	3ea00000 	.word	0x3ea00000

  /* Sum: '<S23>/Add' */
  VCU_B.Add_o = (uint16_T)((((uint32_T)VCU_B.Gain_me << 1) +
 8000754:	4bc0      	ldr	r3, [pc, #768]	; (8000a58 <FUNC_InputData+0x620>)
 8000756:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	; 0x678
 800075a:	005b      	lsls	r3, r3, #1
    VCU_B.DataStoreRead4_o) >> 1);
 800075c:	4abe      	ldr	r2, [pc, #760]	; (8000a58 <FUNC_InputData+0x620>)
 800075e:	f892 26ad 	ldrb.w	r2, [r2, #1709]	; 0x6ad

  /* Gain: '<S23>/Gain' */
  VCU_B.Gain_me = (uint16_T)(VCU_B.DataStoreRead6_f << 7);

  /* Sum: '<S23>/Add' */
  VCU_B.Add_o = (uint16_T)((((uint32_T)VCU_B.Gain_me << 1) +
 8000762:	4413      	add	r3, r2
    VCU_B.DataStoreRead4_o) >> 1);
 8000764:	085b      	lsrs	r3, r3, #1

  /* Gain: '<S23>/Gain' */
  VCU_B.Gain_me = (uint16_T)(VCU_B.DataStoreRead6_f << 7);

  /* Sum: '<S23>/Add' */
  VCU_B.Add_o = (uint16_T)((((uint32_T)VCU_B.Gain_me << 1) +
 8000766:	b29a      	uxth	r2, r3
 8000768:	4bbb      	ldr	r3, [pc, #748]	; (8000a58 <FUNC_InputData+0x620>)
 800076a:	f8a3 267a 	strh.w	r2, [r3, #1658]	; 0x67a
    VCU_B.DataStoreRead4_o) >> 1);

  /* DataTypeConversion: '<S23>/Data Type Conversion' */
  VCU_B.DataTypeConversion_j = (uint16_T)(VCU_B.Add_o << 1);
 800076e:	4bba      	ldr	r3, [pc, #744]	; (8000a58 <FUNC_InputData+0x620>)
 8000770:	f8b3 367a 	ldrh.w	r3, [r3, #1658]	; 0x67a
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	b29a      	uxth	r2, r3
 8000778:	4bb7      	ldr	r3, [pc, #732]	; (8000a58 <FUNC_InputData+0x620>)
 800077a:	f8a3 2660 	strh.w	r2, [r3, #1632]	; 0x660

  /* Gain: '<S19>/Factor' */
  VCU_B.Factor_d5 = (uint32_T)VCU_B.DataTypeConversion_j << 15;
 800077e:	4bb6      	ldr	r3, [pc, #728]	; (8000a58 <FUNC_InputData+0x620>)
 8000780:	f8b3 3660 	ldrh.w	r3, [r3, #1632]	; 0x660
 8000784:	03db      	lsls	r3, r3, #15
 8000786:	4ab4      	ldr	r2, [pc, #720]	; (8000a58 <FUNC_InputData+0x620>)
 8000788:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638

  /* Sum: '<S19>/Add1' */
  VCU_B.Add1_ks = (real_T)VCU_B.Factor_d5 * 4.76837158203125E-7;
 800078c:	4bb2      	ldr	r3, [pc, #712]	; (8000a58 <FUNC_InputData+0x620>)
 800078e:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
 8000792:	4618      	mov	r0, r3
 8000794:	f00e f8a2 	bl	800e8dc <__aeabi_ui2d>
 8000798:	4602      	mov	r2, r0
 800079a:	460b      	mov	r3, r1
 800079c:	4610      	mov	r0, r2
 800079e:	4619      	mov	r1, r3
 80007a0:	f04f 0200 	mov.w	r2, #0
 80007a4:	4bad      	ldr	r3, [pc, #692]	; (8000a5c <FUNC_InputData+0x624>)
 80007a6:	f00e f90f 	bl	800e9c8 <__aeabi_dmul>
 80007aa:	4602      	mov	r2, r0
 80007ac:	460b      	mov	r3, r1
 80007ae:	49aa      	ldr	r1, [pc, #680]	; (8000a58 <FUNC_InputData+0x620>)
 80007b0:	f501 618d 	add.w	r1, r1, #1128	; 0x468
 80007b4:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S9>/Data Store Read7' */
  VCU_B.DataStoreRead7_h = VCU_DW.VAR_IN_n_wheel_RR_mpros_LSB;
 80007b8:	4ba9      	ldr	r3, [pc, #676]	; (8000a60 <FUNC_InputData+0x628>)
 80007ba:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 80007be:	4ba6      	ldr	r3, [pc, #664]	; (8000a58 <FUNC_InputData+0x620>)
 80007c0:	f883 26af 	strb.w	r2, [r3, #1711]	; 0x6af

  /* DataStoreRead: '<S9>/Data Store Read8' */
  VCU_B.DataStoreRead8_e = VCU_DW.VAR_IN_n_wheel_RR_mpros_MSB;
 80007c4:	4ba6      	ldr	r3, [pc, #664]	; (8000a60 <FUNC_InputData+0x628>)
 80007c6:	f893 2121 	ldrb.w	r2, [r3, #289]	; 0x121
 80007ca:	4ba3      	ldr	r3, [pc, #652]	; (8000a58 <FUNC_InputData+0x620>)
 80007cc:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0

  /* Gain: '<S24>/Gain' */
  VCU_B.Gain_c = (uint16_T)(VCU_B.DataStoreRead8_e << 7);
 80007d0:	4ba1      	ldr	r3, [pc, #644]	; (8000a58 <FUNC_InputData+0x620>)
 80007d2:	f893 36b0 	ldrb.w	r3, [r3, #1712]	; 0x6b0
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	01db      	lsls	r3, r3, #7
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b9e      	ldr	r3, [pc, #632]	; (8000a58 <FUNC_InputData+0x620>)
 80007de:	f8a3 267c 	strh.w	r2, [r3, #1660]	; 0x67c

  /* Sum: '<S24>/Add' */
  VCU_B.Add_fb = (uint16_T)((((uint32_T)VCU_B.Gain_c << 1) +
 80007e2:	4b9d      	ldr	r3, [pc, #628]	; (8000a58 <FUNC_InputData+0x620>)
 80007e4:	f8b3 367c 	ldrh.w	r3, [r3, #1660]	; 0x67c
 80007e8:	005b      	lsls	r3, r3, #1
    VCU_B.DataStoreRead7_h) >> 1);
 80007ea:	4a9b      	ldr	r2, [pc, #620]	; (8000a58 <FUNC_InputData+0x620>)
 80007ec:	f892 26af 	ldrb.w	r2, [r2, #1711]	; 0x6af

  /* Gain: '<S24>/Gain' */
  VCU_B.Gain_c = (uint16_T)(VCU_B.DataStoreRead8_e << 7);

  /* Sum: '<S24>/Add' */
  VCU_B.Add_fb = (uint16_T)((((uint32_T)VCU_B.Gain_c << 1) +
 80007f0:	4413      	add	r3, r2
    VCU_B.DataStoreRead7_h) >> 1);
 80007f2:	085b      	lsrs	r3, r3, #1

  /* Gain: '<S24>/Gain' */
  VCU_B.Gain_c = (uint16_T)(VCU_B.DataStoreRead8_e << 7);

  /* Sum: '<S24>/Add' */
  VCU_B.Add_fb = (uint16_T)((((uint32_T)VCU_B.Gain_c << 1) +
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b98      	ldr	r3, [pc, #608]	; (8000a58 <FUNC_InputData+0x620>)
 80007f8:	f8a3 267e 	strh.w	r2, [r3, #1662]	; 0x67e
    VCU_B.DataStoreRead7_h) >> 1);

  /* DataTypeConversion: '<S24>/Data Type Conversion' */
  VCU_B.DataTypeConversion_c = (uint16_T)(VCU_B.Add_fb << 1);
 80007fc:	4b96      	ldr	r3, [pc, #600]	; (8000a58 <FUNC_InputData+0x620>)
 80007fe:	f8b3 367e 	ldrh.w	r3, [r3, #1662]	; 0x67e
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	b29a      	uxth	r2, r3
 8000806:	4b94      	ldr	r3, [pc, #592]	; (8000a58 <FUNC_InputData+0x620>)
 8000808:	f8a3 2662 	strh.w	r2, [r3, #1634]	; 0x662

  /* Gain: '<S20>/Factor' */
  VCU_B.Factor_jp = (uint32_T)VCU_B.DataTypeConversion_c << 15;
 800080c:	4b92      	ldr	r3, [pc, #584]	; (8000a58 <FUNC_InputData+0x620>)
 800080e:	f8b3 3662 	ldrh.w	r3, [r3, #1634]	; 0x662
 8000812:	03db      	lsls	r3, r3, #15
 8000814:	4a90      	ldr	r2, [pc, #576]	; (8000a58 <FUNC_InputData+0x620>)
 8000816:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c

  /* Sum: '<S20>/Add1' */
  VCU_B.Add1_eq = (real_T)VCU_B.Factor_jp * 4.76837158203125E-7;
 800081a:	4b8f      	ldr	r3, [pc, #572]	; (8000a58 <FUNC_InputData+0x620>)
 800081c:	f8d3 363c 	ldr.w	r3, [r3, #1596]	; 0x63c
 8000820:	4618      	mov	r0, r3
 8000822:	f00e f85b 	bl	800e8dc <__aeabi_ui2d>
 8000826:	4602      	mov	r2, r0
 8000828:	460b      	mov	r3, r1
 800082a:	4610      	mov	r0, r2
 800082c:	4619      	mov	r1, r3
 800082e:	f04f 0200 	mov.w	r2, #0
 8000832:	4b8a      	ldr	r3, [pc, #552]	; (8000a5c <FUNC_InputData+0x624>)
 8000834:	f00e f8c8 	bl	800e9c8 <__aeabi_dmul>
 8000838:	4602      	mov	r2, r0
 800083a:	460b      	mov	r3, r1
 800083c:	4986      	ldr	r1, [pc, #536]	; (8000a58 <FUNC_InputData+0x620>)
 800083e:	f501 618e 	add.w	r1, r1, #1136	; 0x470
 8000842:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S25>/Data Store Read1' */
  VCU_B.DataStoreRead1_g = VCU_DW.VAR_IN_u_TPS;
 8000846:	4b86      	ldr	r3, [pc, #536]	; (8000a60 <FUNC_InputData+0x628>)
 8000848:	f893 2122 	ldrb.w	r2, [r3, #290]	; 0x122
 800084c:	4b82      	ldr	r3, [pc, #520]	; (8000a58 <FUNC_InputData+0x620>)
 800084e:	f883 26b1 	strb.w	r2, [r3, #1713]	; 0x6b1

  /* DataStoreRead: '<S26>/Data Store Read4' */
  VCU_B.DataStoreRead4_k = VCU_DW.VAR_IN_p_air_22_des;
 8000852:	4b83      	ldr	r3, [pc, #524]	; (8000a60 <FUNC_InputData+0x628>)
 8000854:	f893 2127 	ldrb.w	r2, [r3, #295]	; 0x127
 8000858:	4b7f      	ldr	r3, [pc, #508]	; (8000a58 <FUNC_InputData+0x620>)
 800085a:	f883 26b2 	strb.w	r2, [r3, #1714]	; 0x6b2

  /* DataTypeConversion: '<S26>/Data Type Conversion1' */
  VCU_B.DataTypeConversion1 = VCU_B.DataStoreRead4_k;
 800085e:	4b7e      	ldr	r3, [pc, #504]	; (8000a58 <FUNC_InputData+0x620>)
 8000860:	f893 36b2 	ldrb.w	r3, [r3, #1714]	; 0x6b2
 8000864:	4618      	mov	r0, r3
 8000866:	f00e f839 	bl	800e8dc <__aeabi_ui2d>
 800086a:	4602      	mov	r2, r0
 800086c:	460b      	mov	r3, r1
 800086e:	497a      	ldr	r1, [pc, #488]	; (8000a58 <FUNC_InputData+0x620>)
 8000870:	f501 618f 	add.w	r1, r1, #1144	; 0x478
 8000874:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S26>/Data Store Read1' */
  VCU_B.DataStoreRead1_m = VCU_DW.VAR_IN_n_engine_MSB;
 8000878:	4b79      	ldr	r3, [pc, #484]	; (8000a60 <FUNC_InputData+0x628>)
 800087a:	f893 2124 	ldrb.w	r2, [r3, #292]	; 0x124
 800087e:	4b76      	ldr	r3, [pc, #472]	; (8000a58 <FUNC_InputData+0x620>)
 8000880:	f883 26b3 	strb.w	r2, [r3, #1715]	; 0x6b3

  /* Gain: '<S29>/Gain' */
  VCU_B.Gain_cv = (uint16_T)(VCU_B.DataStoreRead1_m << 7);
 8000884:	4b74      	ldr	r3, [pc, #464]	; (8000a58 <FUNC_InputData+0x620>)
 8000886:	f893 36b3 	ldrb.w	r3, [r3, #1715]	; 0x6b3
 800088a:	b29b      	uxth	r3, r3
 800088c:	01db      	lsls	r3, r3, #7
 800088e:	b29a      	uxth	r2, r3
 8000890:	4b71      	ldr	r3, [pc, #452]	; (8000a58 <FUNC_InputData+0x620>)
 8000892:	f8a3 2680 	strh.w	r2, [r3, #1664]	; 0x680

  /* DataStoreRead: '<S26>/Data Store Read2' */
  VCU_B.DataStoreRead2_o = VCU_DW.VAR_IN_n_engine_LSB;
 8000896:	4b72      	ldr	r3, [pc, #456]	; (8000a60 <FUNC_InputData+0x628>)
 8000898:	f893 2125 	ldrb.w	r2, [r3, #293]	; 0x125
 800089c:	4b6e      	ldr	r3, [pc, #440]	; (8000a58 <FUNC_InputData+0x620>)
 800089e:	f883 26b4 	strb.w	r2, [r3, #1716]	; 0x6b4

  /* Sum: '<S29>/Add' */
  VCU_B.Add_d = (uint16_T)((((uint32_T)VCU_B.Gain_cv << 1) +
 80008a2:	4b6d      	ldr	r3, [pc, #436]	; (8000a58 <FUNC_InputData+0x620>)
 80008a4:	f8b3 3680 	ldrh.w	r3, [r3, #1664]	; 0x680
 80008a8:	005b      	lsls	r3, r3, #1
    VCU_B.DataStoreRead2_o) >> 1);
 80008aa:	4a6b      	ldr	r2, [pc, #428]	; (8000a58 <FUNC_InputData+0x620>)
 80008ac:	f892 26b4 	ldrb.w	r2, [r2, #1716]	; 0x6b4

  /* DataStoreRead: '<S26>/Data Store Read2' */
  VCU_B.DataStoreRead2_o = VCU_DW.VAR_IN_n_engine_LSB;

  /* Sum: '<S29>/Add' */
  VCU_B.Add_d = (uint16_T)((((uint32_T)VCU_B.Gain_cv << 1) +
 80008b0:	4413      	add	r3, r2
    VCU_B.DataStoreRead2_o) >> 1);
 80008b2:	085b      	lsrs	r3, r3, #1

  /* DataStoreRead: '<S26>/Data Store Read2' */
  VCU_B.DataStoreRead2_o = VCU_DW.VAR_IN_n_engine_LSB;

  /* Sum: '<S29>/Add' */
  VCU_B.Add_d = (uint16_T)((((uint32_T)VCU_B.Gain_cv << 1) +
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b68      	ldr	r3, [pc, #416]	; (8000a58 <FUNC_InputData+0x620>)
 80008b8:	f8a3 2682 	strh.w	r2, [r3, #1666]	; 0x682
    VCU_B.DataStoreRead2_o) >> 1);

  /* DataTypeConversion: '<S29>/Data Type Conversion' */
  VCU_B.DataTypeConversion_o = (uint16_T)(VCU_B.Add_d << 1);
 80008bc:	4b66      	ldr	r3, [pc, #408]	; (8000a58 <FUNC_InputData+0x620>)
 80008be:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	; 0x682
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b64      	ldr	r3, [pc, #400]	; (8000a58 <FUNC_InputData+0x620>)
 80008c8:	f8a3 2664 	strh.w	r2, [r3, #1636]	; 0x664

  /* DataTypeConversion: '<S26>/Data Type Conversion2' */
  VCU_B.DataTypeConversion2 = VCU_B.DataTypeConversion_o;
 80008cc:	4b62      	ldr	r3, [pc, #392]	; (8000a58 <FUNC_InputData+0x620>)
 80008ce:	f8b3 3664 	ldrh.w	r3, [r3, #1636]	; 0x664
 80008d2:	4618      	mov	r0, r3
 80008d4:	f00e f802 	bl	800e8dc <__aeabi_ui2d>
 80008d8:	4602      	mov	r2, r0
 80008da:	460b      	mov	r3, r1
 80008dc:	495e      	ldr	r1, [pc, #376]	; (8000a58 <FUNC_InputData+0x620>)
 80008de:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 80008e2:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S26>/Data Store Read' */
  VCU_B.DataStoreRead_h = VCU_DW.VAR_IN_gear;
 80008e6:	4b5e      	ldr	r3, [pc, #376]	; (8000a60 <FUNC_InputData+0x628>)
 80008e8:	f893 2123 	ldrb.w	r2, [r3, #291]	; 0x123
 80008ec:	4b5a      	ldr	r3, [pc, #360]	; (8000a58 <FUNC_InputData+0x620>)
 80008ee:	f883 26b5 	strb.w	r2, [r3, #1717]	; 0x6b5

  /* ArithShift: '<S26>/Shift Arithmetic' */
  VCU_B.ShiftArithmetic = (uint8_T)((uint32_T)VCU_B.DataStoreRead_h >> 3);
 80008f2:	4b59      	ldr	r3, [pc, #356]	; (8000a58 <FUNC_InputData+0x620>)
 80008f4:	f893 36b5 	ldrb.w	r3, [r3, #1717]	; 0x6b5
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b56      	ldr	r3, [pc, #344]	; (8000a58 <FUNC_InputData+0x620>)
 80008fe:	f883 26b6 	strb.w	r2, [r3, #1718]	; 0x6b6

  /* DataTypeConversion: '<S26>/Data Type Conversion3' */
  VCU_B.DataTypeConversion3 = VCU_B.ShiftArithmetic;
 8000902:	4b55      	ldr	r3, [pc, #340]	; (8000a58 <FUNC_InputData+0x620>)
 8000904:	f893 36b6 	ldrb.w	r3, [r3, #1718]	; 0x6b6
 8000908:	4618      	mov	r0, r3
 800090a:	f00d ffe7 	bl	800e8dc <__aeabi_ui2d>
 800090e:	4602      	mov	r2, r0
 8000910:	460b      	mov	r3, r1
 8000912:	4951      	ldr	r1, [pc, #324]	; (8000a58 <FUNC_InputData+0x620>)
 8000914:	f501 6191 	add.w	r1, r1, #1160	; 0x488
 8000918:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S26>/Data Store Read3' */
  VCU_B.DataStoreRead3_a = VCU_DW.VAR_IN_TPS_Plausi;
 800091c:	4b50      	ldr	r3, [pc, #320]	; (8000a60 <FUNC_InputData+0x628>)
 800091e:	f893 2126 	ldrb.w	r2, [r3, #294]	; 0x126
 8000922:	4b4d      	ldr	r3, [pc, #308]	; (8000a58 <FUNC_InputData+0x620>)
 8000924:	f883 26b7 	strb.w	r2, [r3, #1719]	; 0x6b7

  /* DataStoreRead: '<S26>/Data Store Read5' */
  VCU_B.DataStoreRead5_i = VCU_DW.VAR_IN_p_air_22;
 8000928:	4b4d      	ldr	r3, [pc, #308]	; (8000a60 <FUNC_InputData+0x628>)
 800092a:	f893 2128 	ldrb.w	r2, [r3, #296]	; 0x128
 800092e:	4b4a      	ldr	r3, [pc, #296]	; (8000a58 <FUNC_InputData+0x620>)
 8000930:	f883 26b8 	strb.w	r2, [r3, #1720]	; 0x6b8

  /* DataStoreRead: '<S27>/Data Store Read1' */
  VCU_B.DataStoreRead1_g5 = VCU_DW.VAR_IN_t_water_engine;
 8000934:	4b4a      	ldr	r3, [pc, #296]	; (8000a60 <FUNC_InputData+0x628>)
 8000936:	f893 2129 	ldrb.w	r2, [r3, #297]	; 0x129
 800093a:	4b47      	ldr	r3, [pc, #284]	; (8000a58 <FUNC_InputData+0x620>)
 800093c:	f883 26b9 	strb.w	r2, [r3, #1721]	; 0x6b9

  /* Gain: '<S30>/Factor' */
  VCU_B.Factor_ba = (uint16_T)(VCU_B.DataStoreRead1_g5 << 7);
 8000940:	4b45      	ldr	r3, [pc, #276]	; (8000a58 <FUNC_InputData+0x620>)
 8000942:	f893 36b9 	ldrb.w	r3, [r3, #1721]	; 0x6b9
 8000946:	b29b      	uxth	r3, r3
 8000948:	01db      	lsls	r3, r3, #7
 800094a:	b29a      	uxth	r2, r3
 800094c:	4b42      	ldr	r3, [pc, #264]	; (8000a58 <FUNC_InputData+0x620>)
 800094e:	f8a3 2666 	strh.w	r2, [r3, #1638]	; 0x666

  /* Sum: '<S30>/Add1' incorporates:
   *  Constant: '<S30>/Offset'
   */
  VCU_B.Add1_iu = (real_T)VCU_B.Factor_ba * 0.0078125 + -50.0;
 8000952:	4b41      	ldr	r3, [pc, #260]	; (8000a58 <FUNC_InputData+0x620>)
 8000954:	f8b3 3666 	ldrh.w	r3, [r3, #1638]	; 0x666
 8000958:	4618      	mov	r0, r3
 800095a:	f00d ffbf 	bl	800e8dc <__aeabi_ui2d>
 800095e:	4602      	mov	r2, r0
 8000960:	460b      	mov	r3, r1
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	f04f 0200 	mov.w	r2, #0
 800096a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800096e:	f00e f82b 	bl	800e9c8 <__aeabi_dmul>
 8000972:	4602      	mov	r2, r0
 8000974:	460b      	mov	r3, r1
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	f04f 0200 	mov.w	r2, #0
 800097e:	4b39      	ldr	r3, [pc, #228]	; (8000a64 <FUNC_InputData+0x62c>)
 8000980:	f00d fe6e 	bl	800e660 <__aeabi_dsub>
 8000984:	4602      	mov	r2, r0
 8000986:	460b      	mov	r3, r1
 8000988:	4933      	ldr	r1, [pc, #204]	; (8000a58 <FUNC_InputData+0x620>)
 800098a:	f501 6192 	add.w	r1, r1, #1168	; 0x490
 800098e:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S11>/Data Store Read1' */
  VCU_B.TeleFansDC_h = VCU_DW.VAR_IN_TeleFansDC;
 8000992:	4b33      	ldr	r3, [pc, #204]	; (8000a60 <FUNC_InputData+0x628>)
 8000994:	f893 212a 	ldrb.w	r2, [r3, #298]	; 0x12a
 8000998:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <FUNC_InputData+0x620>)
 800099a:	f883 26ba 	strb.w	r2, [r3, #1722]	; 0x6ba

  /* DataTypeConversion: '<S11>/Data Type Conversion1' */
  VCU_B.TeleFansDC = VCU_B.TeleFansDC_h;
 800099e:	4b2e      	ldr	r3, [pc, #184]	; (8000a58 <FUNC_InputData+0x620>)
 80009a0:	f893 36ba 	ldrb.w	r3, [r3, #1722]	; 0x6ba
 80009a4:	4618      	mov	r0, r3
 80009a6:	f00d ff99 	bl	800e8dc <__aeabi_ui2d>
 80009aa:	4602      	mov	r2, r0
 80009ac:	460b      	mov	r3, r1
 80009ae:	492a      	ldr	r1, [pc, #168]	; (8000a58 <FUNC_InputData+0x620>)
 80009b0:	f501 6193 	add.w	r1, r1, #1176	; 0x498
 80009b4:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S31>/Factor' */
  VCU_B.Factor_kk = 0.01 * VCU_B.TeleFansDC;
 80009b8:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <FUNC_InputData+0x620>)
 80009ba:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80009be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	a322      	add	r3, pc, #136	; (adr r3, 8000a50 <FUNC_InputData+0x618>)
 80009c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009cc:	f00d fffc 	bl	800e9c8 <__aeabi_dmul>
 80009d0:	4602      	mov	r2, r0
 80009d2:	460b      	mov	r3, r1
 80009d4:	4920      	ldr	r1, [pc, #128]	; (8000a58 <FUNC_InputData+0x620>)
 80009d6:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 80009da:	e9c1 2300 	strd	r2, r3, [r1]

  /* Sum: '<S31>/Add1' */
  VCU_B.Add1_ik = VCU_B.Factor_kk;
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <FUNC_InputData+0x620>)
 80009e0:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80009e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009e8:	491b      	ldr	r1, [pc, #108]	; (8000a58 <FUNC_InputData+0x620>)
 80009ea:	f501 6195 	add.w	r1, r1, #1192	; 0x4a8
 80009ee:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S11>/Data Store Read8' */
  VCU_B.TeleActiveBit_p = VCU_DW.VAR_IN_TeleActiveBit;
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <FUNC_InputData+0x628>)
 80009f4:	f893 212b 	ldrb.w	r2, [r3, #299]	; 0x12b
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <FUNC_InputData+0x620>)
 80009fa:	f883 26bb 	strb.w	r2, [r3, #1723]	; 0x6bb

  /* DataTypeConversion: '<S11>/Data Type Conversion' */
  VCU_B.TeleActiveBit = VCU_B.TeleActiveBit_p;
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <FUNC_InputData+0x620>)
 8000a00:	f893 36bb 	ldrb.w	r3, [r3, #1723]	; 0x6bb
 8000a04:	4618      	mov	r0, r3
 8000a06:	f00d ff69 	bl	800e8dc <__aeabi_ui2d>
 8000a0a:	4602      	mov	r2, r0
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	4912      	ldr	r1, [pc, #72]	; (8000a58 <FUNC_InputData+0x620>)
 8000a10:	f501 6196 	add.w	r1, r1, #1200	; 0x4b0
 8000a14:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S12>/Data Store Read1' */
  VCU_B.DataStoreRead1_f = VCU_DW.VAR_IN_g_yaw_ABS_MSB;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <FUNC_InputData+0x628>)
 8000a1a:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <FUNC_InputData+0x620>)
 8000a20:	f883 26bc 	strb.w	r2, [r3, #1724]	; 0x6bc

  /* DataStoreRead: '<S12>/Data Store Read3' */
  VCU_B.DataStoreRead3_o = VCU_DW.VAR_IN_g_yaw_ABS_LSB;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <FUNC_InputData+0x628>)
 8000a26:	f893 212e 	ldrb.w	r2, [r3, #302]	; 0x12e
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <FUNC_InputData+0x620>)
 8000a2c:	f883 26bd 	strb.w	r2, [r3, #1725]	; 0x6bd

  /* DataStoreRead: '<S12>/Data Store Read2' */
  VCU_B.DataStoreRead2_h = VCU_DW.VAR_IN_g_long_ABS_MSB;
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <FUNC_InputData+0x628>)
 8000a32:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <FUNC_InputData+0x620>)
 8000a38:	f883 26be 	strb.w	r2, [r3, #1726]	; 0x6be

  /* DataStoreRead: '<S12>/Data Store Read4' */
  VCU_B.DataStoreRead4_l = VCU_DW.VAR_IN_g_long_ABS_LSB;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <FUNC_InputData+0x628>)
 8000a3e:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <FUNC_InputData+0x620>)
 8000a44:	f883 26bf 	strb.w	r2, [r3, #1727]	; 0x6bf

  /* DataStoreRead: '<S13>/Data Store Read9' */
  VCU_B.DataStoreRead9 = VCU_DW.VAR_IN_x_clutch_STW;
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <FUNC_InputData+0x628>)
 8000a4a:	e00d      	b.n	8000a68 <FUNC_InputData+0x630>
 8000a4c:	f3af 8000 	nop.w
 8000a50:	47ae147b 	.word	0x47ae147b
 8000a54:	3f847ae1 	.word	0x3f847ae1
 8000a58:	200008c8 	.word	0x200008c8
 8000a5c:	3ea00000 	.word	0x3ea00000
 8000a60:	20001058 	.word	0x20001058
 8000a64:	40490000 	.word	0x40490000
 8000a68:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8000a6c:	4926      	ldr	r1, [pc, #152]	; (8000b08 <FUNC_InputData+0x6d0>)
 8000a6e:	f501 6197 	add.w	r1, r1, #1208	; 0x4b8
 8000a72:	e9c1 2300 	strd	r2, r3, [r1]

  /* Saturate: '<S13>/Saturation' incorporates:
   *  Gain: '<S13>/mV//V'
   */
  VCU_B.mVV = 0.001 * VCU_B.DataStoreRead9;
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <FUNC_InputData+0x6d0>)
 8000a78:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8000a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a80:	4610      	mov	r0, r2
 8000a82:	4619      	mov	r1, r3
 8000a84:	a31e      	add	r3, pc, #120	; (adr r3, 8000b00 <FUNC_InputData+0x6c8>)
 8000a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a8a:	f00d ff9d 	bl	800e9c8 <__aeabi_dmul>
 8000a8e:	4602      	mov	r2, r0
 8000a90:	460b      	mov	r3, r1
 8000a92:	491d      	ldr	r1, [pc, #116]	; (8000b08 <FUNC_InputData+0x6d0>)
 8000a94:	f501 6198 	add.w	r1, r1, #1216	; 0x4c0
 8000a98:	e9c1 2300 	strd	r2, r3, [r1]
  if (VCU_B.mVV > 5.0) {
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <FUNC_InputData+0x6d0>)
 8000a9e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8000aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f04f 0200 	mov.w	r2, #0
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <FUNC_InputData+0x6d4>)
 8000ab0:	f00e fa1a 	bl	800eee8 <__aeabi_dcmpgt>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d008      	beq.n	8000acc <FUNC_InputData+0x694>
    VCU_B.Saturation_e = 5.0;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <FUNC_InputData+0x6d0>)
 8000abc:	f503 6199 	add.w	r1, r3, #1224	; 0x4c8
 8000ac0:	f04f 0200 	mov.w	r2, #0
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <FUNC_InputData+0x6d4>)
 8000ac6:	e9c1 2300 	strd	r2, r3, [r1]
 8000aca:	e02b      	b.n	8000b24 <FUNC_InputData+0x6ec>
  } else if (VCU_B.mVV < 0.0) {
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <FUNC_InputData+0x6d0>)
 8000ace:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8000ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f04f 0200 	mov.w	r2, #0
 8000ade:	f04f 0300 	mov.w	r3, #0
 8000ae2:	f00e f9e3 	bl	800eeac <__aeabi_dcmplt>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d011      	beq.n	8000b10 <FUNC_InputData+0x6d8>
    VCU_B.Saturation_e = 0.0;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <FUNC_InputData+0x6d0>)
 8000aee:	f503 6199 	add.w	r1, r3, #1224	; 0x4c8
 8000af2:	f04f 0200 	mov.w	r2, #0
 8000af6:	f04f 0300 	mov.w	r3, #0
 8000afa:	e9c1 2300 	strd	r2, r3, [r1]
 8000afe:	e011      	b.n	8000b24 <FUNC_InputData+0x6ec>
 8000b00:	d2f1a9fc 	.word	0xd2f1a9fc
 8000b04:	3f50624d 	.word	0x3f50624d
 8000b08:	200008c8 	.word	0x200008c8
 8000b0c:	40140000 	.word	0x40140000
  } else {
    VCU_B.Saturation_e = VCU_B.mVV;
 8000b10:	4bb5      	ldr	r3, [pc, #724]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b12:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8000b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b1a:	49b3      	ldr	r1, [pc, #716]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b1c:	f501 6199 	add.w	r1, r1, #1224	; 0x4c8
 8000b20:	e9c1 2300 	strd	r2, r3, [r1]
  }

  /* End of Saturate: '<S13>/Saturation' */

  /* Lookup_n-D: '<S13>/1-D Lookup Table' */
  VCU_B.x_clutch_STW = look1_binlxpw(VCU_B.Saturation_e,
 8000b24:	4bb0      	ldr	r3, [pc, #704]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b26:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	2101      	movs	r1, #1
 8000b30:	9100      	str	r1, [sp, #0]
 8000b32:	4610      	mov	r0, r2
 8000b34:	4619      	mov	r1, r3
 8000b36:	4aad      	ldr	r2, [pc, #692]	; (8000dec <FUNC_InputData+0x9b4>)
 8000b38:	4bad      	ldr	r3, [pc, #692]	; (8000df0 <FUNC_InputData+0x9b8>)
 8000b3a:	f005 f82d 	bl	8005b98 <look1_binlxpw>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	49a9      	ldr	r1, [pc, #676]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b44:	f501 619a 	add.w	r1, r1, #1232	; 0x4d0
 8000b48:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.uDLookupTable_bp01Data, VCU_ConstP.pooled5, 1U);

  /* DataStoreRead: '<S13>/Data Store Read10' */
  VCU_B.DataStoreRead10_b = VCU_DW.VAR_IN_STW_mue_tyre;
 8000b4c:	4ba9      	ldr	r3, [pc, #676]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000b4e:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
 8000b52:	4ba5      	ldr	r3, [pc, #660]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b54:	f883 26c0 	strb.w	r2, [r3, #1728]	; 0x6c0

  /* Gain: '<S36>/Factor' */
  VCU_B.Factor_oq = (uint16_T)(164U * VCU_B.DataStoreRead10_b);
 8000b58:	4ba3      	ldr	r3, [pc, #652]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b5a:	f893 36c0 	ldrb.w	r3, [r3, #1728]	; 0x6c0
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	0092      	lsls	r2, r2, #2
 8000b64:	441a      	add	r2, r3
 8000b66:	00d2      	lsls	r2, r2, #3
 8000b68:	4413      	add	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b9e      	ldr	r3, [pc, #632]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b70:	f8a3 2668 	strh.w	r2, [r3, #1640]	; 0x668

  /* Sum: '<S36>/Add1' */
  VCU_B.Add1_f = (real_T)VCU_B.Factor_oq * 6.103515625E-5;
 8000b74:	4b9c      	ldr	r3, [pc, #624]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b76:	f8b3 3668 	ldrh.w	r3, [r3, #1640]	; 0x668
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f00d feae 	bl	800e8dc <__aeabi_ui2d>
 8000b80:	4602      	mov	r2, r0
 8000b82:	460b      	mov	r3, r1
 8000b84:	4610      	mov	r0, r2
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 0200 	mov.w	r2, #0
 8000b8c:	4b9a      	ldr	r3, [pc, #616]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000b8e:	f00d ff1b 	bl	800e9c8 <__aeabi_dmul>
 8000b92:	4602      	mov	r2, r0
 8000b94:	460b      	mov	r3, r1
 8000b96:	4994      	ldr	r1, [pc, #592]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b98:	f501 619b 	add.w	r1, r1, #1240	; 0x4d8
 8000b9c:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S13>/Data Store Read' */
  VCU_B.DataStoreRead_c = VCU_DW.VAR_IN_STW_shift_up_request;
 8000ba0:	4b94      	ldr	r3, [pc, #592]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000ba2:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8000ba6:	4b90      	ldr	r3, [pc, #576]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000ba8:	f883 26c1 	strb.w	r2, [r3, #1729]	; 0x6c1

  /* DataTypeConversion: '<S13>/Data Type Conversion' */
  VCU_B.STW_shift_up_request = VCU_B.DataStoreRead_c;
 8000bac:	4b8e      	ldr	r3, [pc, #568]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000bae:	f893 36c1 	ldrb.w	r3, [r3, #1729]	; 0x6c1
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f00d fe92 	bl	800e8dc <__aeabi_ui2d>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	498a      	ldr	r1, [pc, #552]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000bbe:	f501 619c 	add.w	r1, r1, #1248	; 0x4e0
 8000bc2:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S13>/Data Store Read1' */
  VCU_B.DataStoreRead1_j = VCU_DW.VAR_IN_STW_shift_down_request;
 8000bc6:	4b8b      	ldr	r3, [pc, #556]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000bc8:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
 8000bcc:	4b86      	ldr	r3, [pc, #536]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000bce:	f883 26c2 	strb.w	r2, [r3, #1730]	; 0x6c2

  /* DataTypeConversion: '<S13>/Data Type Conversion1' */
  VCU_B.STW_shift_down_request = VCU_B.DataStoreRead1_j;
 8000bd2:	4b85      	ldr	r3, [pc, #532]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000bd4:	f893 36c2 	ldrb.w	r3, [r3, #1730]	; 0x6c2
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f00d fe7f 	bl	800e8dc <__aeabi_ui2d>
 8000bde:	4602      	mov	r2, r0
 8000be0:	460b      	mov	r3, r1
 8000be2:	4981      	ldr	r1, [pc, #516]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000be4:	f501 619d 	add.w	r1, r1, #1256	; 0x4e8
 8000be8:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S13>/Data Store Read2' */
  VCU_B.DataStoreRead2_i = VCU_DW.VAR_IN_STW_transmission_mode;
 8000bec:	4b81      	ldr	r3, [pc, #516]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000bee:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
 8000bf2:	4b7d      	ldr	r3, [pc, #500]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000bf4:	f883 26c3 	strb.w	r2, [r3, #1731]	; 0x6c3

  /* DataTypeConversion: '<S13>/Data Type Conversion6' */
  VCU_B.STW_transmission_mode = VCU_B.DataStoreRead2_i;
 8000bf8:	4b7b      	ldr	r3, [pc, #492]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000bfa:	f893 36c3 	ldrb.w	r3, [r3, #1731]	; 0x6c3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f00d fe6c 	bl	800e8dc <__aeabi_ui2d>
 8000c04:	4602      	mov	r2, r0
 8000c06:	460b      	mov	r3, r1
 8000c08:	4977      	ldr	r1, [pc, #476]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c0a:	f501 619e 	add.w	r1, r1, #1264	; 0x4f0
 8000c0e:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S14>/Data Store Read9' */
  VCU_B.DataStoreRead9_m = VCU_DW.VAR_IN_x_RH_F;
 8000c12:	4b78      	ldr	r3, [pc, #480]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000c14:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8000c18:	4973      	ldr	r1, [pc, #460]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c1a:	f501 619f 	add.w	r1, r1, #1272	; 0x4f8
 8000c1e:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V19' */
  VCU_B.mVV19 = 0.001 * VCU_B.DataStoreRead9_m;
 8000c22:	4b71      	ldr	r3, [pc, #452]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c24:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 8000c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2c:	4610      	mov	r0, r2
 8000c2e:	4619      	mov	r1, r3
 8000c30:	a36b      	add	r3, pc, #428	; (adr r3, 8000de0 <FUNC_InputData+0x9a8>)
 8000c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c36:	f00d fec7 	bl	800e9c8 <__aeabi_dmul>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	496a      	ldr	r1, [pc, #424]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c40:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8000c44:	e9c1 2300 	strd	r2, r3, [r1]

  /* Lookup_n-D: '<S14>/1-D Lookup Table4' */
  VCU_B.x_RH_F = look1_binlxpw(VCU_B.mVV19, VCU_ConstP.pooled7,
 8000c48:	4b67      	ldr	r3, [pc, #412]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c52:	2101      	movs	r1, #1
 8000c54:	9100      	str	r1, [sp, #0]
 8000c56:	4610      	mov	r0, r2
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4a68      	ldr	r2, [pc, #416]	; (8000dfc <FUNC_InputData+0x9c4>)
 8000c5c:	4b68      	ldr	r3, [pc, #416]	; (8000e00 <FUNC_InputData+0x9c8>)
 8000c5e:	f004 ff9b 	bl	8005b98 <look1_binlxpw>
 8000c62:	4602      	mov	r2, r0
 8000c64:	460b      	mov	r3, r1
 8000c66:	4960      	ldr	r1, [pc, #384]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c68:	f501 61a1 	add.w	r1, r1, #1288	; 0x508
 8000c6c:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.pooled6, 1U);

  /* DataStoreRead: '<S14>/Data Store Read10' */
  VCU_B.DataStoreRead10 = VCU_DW.VAR_IN_x_RH_RL;
 8000c70:	4b60      	ldr	r3, [pc, #384]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000c72:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000c76:	495c      	ldr	r1, [pc, #368]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c78:	f501 61a2 	add.w	r1, r1, #1296	; 0x510
 8000c7c:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V20' */
  VCU_B.mVV20 = 0.001 * VCU_B.DataStoreRead10;
 8000c80:	4b59      	ldr	r3, [pc, #356]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c82:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8000c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	a354      	add	r3, pc, #336	; (adr r3, 8000de0 <FUNC_InputData+0x9a8>)
 8000c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c94:	f00d fe98 	bl	800e9c8 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4952      	ldr	r1, [pc, #328]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c9e:	f501 61a3 	add.w	r1, r1, #1304	; 0x518
 8000ca2:	e9c1 2300 	strd	r2, r3, [r1]

  /* Lookup_n-D: '<S14>/1-D Lookup Table5' */
  VCU_B.x_RH_RL = look1_binlxpw(VCU_B.mVV20, VCU_ConstP.uDLookupTable5_bp01Data,
 8000ca6:	4b50      	ldr	r3, [pc, #320]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000ca8:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8000cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	9100      	str	r1, [sp, #0]
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4a52      	ldr	r2, [pc, #328]	; (8000e04 <FUNC_InputData+0x9cc>)
 8000cba:	4b51      	ldr	r3, [pc, #324]	; (8000e00 <FUNC_InputData+0x9c8>)
 8000cbc:	f004 ff6c 	bl	8005b98 <look1_binlxpw>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	4948      	ldr	r1, [pc, #288]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000cc6:	f501 61a4 	add.w	r1, r1, #1312	; 0x520
 8000cca:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.pooled6, 1U);

  /* DataStoreRead: '<S14>/Data Store Read11' */
  VCU_B.DataStoreRead11 = VCU_DW.VAR_IN_x_RH_RR;
 8000cce:	4b49      	ldr	r3, [pc, #292]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000cd0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8000cd4:	4944      	ldr	r1, [pc, #272]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000cd6:	f501 61a5 	add.w	r1, r1, #1320	; 0x528
 8000cda:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V21' */
  VCU_B.mVV21 = 0.001 * VCU_B.DataStoreRead11;
 8000cde:	4b42      	ldr	r3, [pc, #264]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000ce0:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8000ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce8:	4610      	mov	r0, r2
 8000cea:	4619      	mov	r1, r3
 8000cec:	a33c      	add	r3, pc, #240	; (adr r3, 8000de0 <FUNC_InputData+0x9a8>)
 8000cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf2:	f00d fe69 	bl	800e9c8 <__aeabi_dmul>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	493b      	ldr	r1, [pc, #236]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000cfc:	f501 61a6 	add.w	r1, r1, #1328	; 0x530
 8000d00:	e9c1 2300 	strd	r2, r3, [r1]

  /* Lookup_n-D: '<S14>/1-D Lookup Table6' */
  VCU_B.x_RH_RR = look1_binlxpw(VCU_B.mVV21, VCU_ConstP.pooled7,
 8000d04:	4b38      	ldr	r3, [pc, #224]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d06:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8000d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0e:	2101      	movs	r1, #1
 8000d10:	9100      	str	r1, [sp, #0]
 8000d12:	4610      	mov	r0, r2
 8000d14:	4619      	mov	r1, r3
 8000d16:	4a39      	ldr	r2, [pc, #228]	; (8000dfc <FUNC_InputData+0x9c4>)
 8000d18:	4b39      	ldr	r3, [pc, #228]	; (8000e00 <FUNC_InputData+0x9c8>)
 8000d1a:	f004 ff3d 	bl	8005b98 <look1_binlxpw>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4931      	ldr	r1, [pc, #196]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d24:	f501 61a7 	add.w	r1, r1, #1336	; 0x538
 8000d28:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.pooled6, 1U);

  /* DataStoreRead: '<S14>/Data Store Read2' */
  VCU_B.DataStoreRead2_k = VCU_DW.VAR_IN_p_pneum;
 8000d2c:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000d2e:	f893 2134 	ldrb.w	r2, [r3, #308]	; 0x134
 8000d32:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d34:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4

  /* Gain: '<S14>/CAN to bar' */
  VCU_B.p_pneum = (uint16_T)(164U * VCU_B.DataStoreRead2_k);
 8000d38:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d3a:	f893 36c4 	ldrb.w	r3, [r3, #1732]	; 0x6c4
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	461a      	mov	r2, r3
 8000d42:	0092      	lsls	r2, r2, #2
 8000d44:	441a      	add	r2, r3
 8000d46:	00d2      	lsls	r2, r2, #3
 8000d48:	4413      	add	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d50:	f8a3 266a 	strh.w	r2, [r3, #1642]	; 0x66a

  /* DataStoreRead: '<S14>/Data Store Read3' */
  VCU_B.DataStoreRead3 = VCU_DW.VAR_IN_x_clutch;
 8000d54:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000d56:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000d5a:	4923      	ldr	r1, [pc, #140]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d5c:	f501 61a8 	add.w	r1, r1, #1344	; 0x540
 8000d60:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V14' */
  VCU_B.mVV14 = 0.001 * VCU_B.DataStoreRead3;
 8000d64:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d66:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8000d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6e:	4610      	mov	r0, r2
 8000d70:	4619      	mov	r1, r3
 8000d72:	a31b      	add	r3, pc, #108	; (adr r3, 8000de0 <FUNC_InputData+0x9a8>)
 8000d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d78:	f00d fe26 	bl	800e9c8 <__aeabi_dmul>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	4919      	ldr	r1, [pc, #100]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d82:	f501 61a9 	add.w	r1, r1, #1352	; 0x548
 8000d86:	e9c1 2300 	strd	r2, r3, [r1]

  /* Saturate: '<S14>/Saturation' incorporates:
   *  Lookup_n-D: '<S14>/Clutch_Pos2'
   */
  VCU_B.x_clutch = look1_binlxpw(VCU_B.mVV14, VCU_ConstP.Clutch_Pos2_bp01Data,
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d8c:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 8000d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d94:	2101      	movs	r1, #1
 8000d96:	9100      	str	r1, [sp, #0]
 8000d98:	4610      	mov	r0, r2
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4a1a      	ldr	r2, [pc, #104]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <FUNC_InputData+0x9b8>)
 8000da0:	f004 fefa 	bl	8005b98 <look1_binlxpw>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	490f      	ldr	r1, [pc, #60]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000daa:	f501 61aa 	add.w	r1, r1, #1360	; 0x550
 8000dae:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.pooled5, 1U);
  if (VCU_B.x_clutch > 25.0) {
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000db4:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8000db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbc:	4610      	mov	r0, r2
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f04f 0200 	mov.w	r2, #0
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <FUNC_InputData+0x9d4>)
 8000dc6:	f00e f88f 	bl	800eee8 <__aeabi_dcmpgt>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d023      	beq.n	8000e18 <FUNC_InputData+0x9e0>
    VCU_B.x_clutch_b = 25.0;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000dd2:	f503 61ab 	add.w	r1, r3, #1368	; 0x558
 8000dd6:	f04f 0200 	mov.w	r2, #0
 8000dda:	e019      	b.n	8000e10 <FUNC_InputData+0x9d8>
 8000ddc:	f3af 8000 	nop.w
 8000de0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000de4:	3f50624d 	.word	0x3f50624d
 8000de8:	200008c8 	.word	0x200008c8
 8000dec:	0800f158 	.word	0x0800f158
 8000df0:	0800f148 	.word	0x0800f148
 8000df4:	20001058 	.word	0x20001058
 8000df8:	3f100000 	.word	0x3f100000
 8000dfc:	0800f178 	.word	0x0800f178
 8000e00:	0800f168 	.word	0x0800f168
 8000e04:	0800f188 	.word	0x0800f188
 8000e08:	0800f198 	.word	0x0800f198
 8000e0c:	40390000 	.word	0x40390000
 8000e10:	4ba7      	ldr	r3, [pc, #668]	; (80010b0 <FUNC_InputData+0xc78>)
 8000e12:	e9c1 2300 	strd	r2, r3, [r1]
 8000e16:	e023      	b.n	8000e60 <FUNC_InputData+0xa28>
  } else if (VCU_B.x_clutch < 0.0) {
 8000e18:	4ba6      	ldr	r3, [pc, #664]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000e1a:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	4610      	mov	r0, r2
 8000e24:	4619      	mov	r1, r3
 8000e26:	f04f 0200 	mov.w	r2, #0
 8000e2a:	f04f 0300 	mov.w	r3, #0
 8000e2e:	f00e f83d 	bl	800eeac <__aeabi_dcmplt>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d009      	beq.n	8000e4c <FUNC_InputData+0xa14>
    VCU_B.x_clutch_b = 0.0;
 8000e38:	4b9e      	ldr	r3, [pc, #632]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000e3a:	f503 61ab 	add.w	r1, r3, #1368	; 0x558
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9c1 2300 	strd	r2, r3, [r1]
 8000e4a:	e009      	b.n	8000e60 <FUNC_InputData+0xa28>
  } else {
    VCU_B.x_clutch_b = VCU_B.x_clutch;
 8000e4c:	4b99      	ldr	r3, [pc, #612]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000e4e:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	4997      	ldr	r1, [pc, #604]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000e58:	f501 61ab 	add.w	r1, r1, #1368	; 0x558
 8000e5c:	e9c1 2300 	strd	r2, r3, [r1]
  }

  /* End of Saturate: '<S14>/Saturation' */

  /* DataStoreRead: '<S14>/Data Store Read' */
  VCU_B.DataStoreRead = VCU_DW.VAR_IN_Fans_dash_bit;
 8000e60:	4b95      	ldr	r3, [pc, #596]	; (80010b8 <FUNC_InputData+0xc80>)
 8000e62:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8000e66:	4993      	ldr	r1, [pc, #588]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000e68:	f501 61ac 	add.w	r1, r1, #1376	; 0x560
 8000e6c:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataTypeConversion: '<S14>/Data Type Conversion10' */
  VCU_B.Fans_dash_bit = (VCU_B.DataStoreRead != 0.0);
 8000e70:	4b90      	ldr	r3, [pc, #576]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000e72:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8000e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	460c      	mov	r4, r1
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	f04f 0300 	mov.w	r3, #0
 8000e8a:	f00e f805 	bl	800ee98 <__aeabi_dcmpeq>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <FUNC_InputData+0xa60>
 8000e94:	2300      	movs	r3, #0
 8000e96:	461c      	mov	r4, r3
 8000e98:	b2e3      	uxtb	r3, r4
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b85      	ldr	r3, [pc, #532]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000e9e:	f883 277e 	strb.w	r2, [r3, #1918]	; 0x77e

  /* DataStoreRead: '<S14>/Data Store Read1' */
  VCU_B.DataStoreRead1 = VCU_DW.VAR_IN_p_brake_R;
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <FUNC_InputData+0xc80>)
 8000ea4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000ea8:	4982      	ldr	r1, [pc, #520]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000eaa:	f501 61ad 	add.w	r1, r1, #1384	; 0x568
 8000eae:	e9c1 2300 	strd	r2, r3, [r1]

  /* Saturate: '<S41>/Saturation' incorporates:
   *  Gain: '<S14>/mV//V11'
   */
  VCU_B.mVV11 = 0.001 * VCU_B.DataStoreRead1;
 8000eb2:	4b80      	ldr	r3, [pc, #512]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000eb4:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	a373      	add	r3, pc, #460	; (adr r3, 8001090 <FUNC_InputData+0xc58>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	f00d fd7f 	bl	800e9c8 <__aeabi_dmul>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4979      	ldr	r1, [pc, #484]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000ed0:	f501 61ae 	add.w	r1, r1, #1392	; 0x570
 8000ed4:	e9c1 2300 	strd	r2, r3, [r1]
  if (VCU_B.mVV11 > 4.8) {
 8000ed8:	4b76      	ldr	r3, [pc, #472]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000eda:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	a36c      	add	r3, pc, #432	; (adr r3, 8001098 <FUNC_InputData+0xc60>)
 8000ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eec:	f00d fffc 	bl	800eee8 <__aeabi_dcmpgt>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d008      	beq.n	8000f08 <FUNC_InputData+0xad0>
    VCU_B.Saturation_i = 4.8;
 8000ef6:	4b6f      	ldr	r3, [pc, #444]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000ef8:	f503 61af 	add.w	r1, r3, #1400	; 0x578
 8000efc:	a366      	add	r3, pc, #408	; (adr r3, 8001098 <FUNC_InputData+0xc60>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	e9c1 2300 	strd	r2, r3, [r1]
 8000f06:	e021      	b.n	8000f4c <FUNC_InputData+0xb14>
  } else if (VCU_B.mVV11 < 0.5) {
 8000f08:	4b6a      	ldr	r3, [pc, #424]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000f0a:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	4b68      	ldr	r3, [pc, #416]	; (80010bc <FUNC_InputData+0xc84>)
 8000f1c:	f00d ffc6 	bl	800eeac <__aeabi_dcmplt>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d008      	beq.n	8000f38 <FUNC_InputData+0xb00>
    VCU_B.Saturation_i = 0.5;
 8000f26:	4b63      	ldr	r3, [pc, #396]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000f28:	f503 61af 	add.w	r1, r3, #1400	; 0x578
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	4b62      	ldr	r3, [pc, #392]	; (80010bc <FUNC_InputData+0xc84>)
 8000f32:	e9c1 2300 	strd	r2, r3, [r1]
 8000f36:	e009      	b.n	8000f4c <FUNC_InputData+0xb14>
  } else {
    VCU_B.Saturation_i = VCU_B.mVV11;
 8000f38:	4b5e      	ldr	r3, [pc, #376]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000f3a:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8000f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f42:	495c      	ldr	r1, [pc, #368]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000f44:	f501 61af 	add.w	r1, r1, #1400	; 0x578
 8000f48:	e9c1 2300 	strd	r2, r3, [r1]
  /* End of Saturate: '<S41>/Saturation' */

  /* Sum: '<S41>/Add' incorporates:
   *  Constant: '<S41>/Offset'
   */
  VCU_B.Add_p = VCU_B.Saturation_i - 0.5;
 8000f4c:	4b59      	ldr	r3, [pc, #356]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000f4e:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8000f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f56:	4610      	mov	r0, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	4b57      	ldr	r3, [pc, #348]	; (80010bc <FUNC_InputData+0xc84>)
 8000f60:	f00d fb7e 	bl	800e660 <__aeabi_dsub>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4952      	ldr	r1, [pc, #328]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000f6a:	f501 61b0 	add.w	r1, r1, #1408	; 0x580
 8000f6e:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S41>/Sensitivity: 15,38 mV // bar' */
  VCU_B.Sensitivity1538mVbar = 65.019505851755525 * VCU_B.Add_p;
 8000f72:	4b50      	ldr	r3, [pc, #320]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000f74:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	a347      	add	r3, pc, #284	; (adr r3, 80010a0 <FUNC_InputData+0xc68>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	f00d fd1f 	bl	800e9c8 <__aeabi_dmul>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4949      	ldr	r1, [pc, #292]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000f90:	f501 61b1 	add.w	r1, r1, #1416	; 0x588
 8000f94:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S14>/Data Store Read12' */
  VCU_B.DataStoreRead12 = VCU_DW.VAR_IN_U_Bat;
 8000f98:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <FUNC_InputData+0xc80>)
 8000f9a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000f9e:	4945      	ldr	r1, [pc, #276]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000fa0:	f501 61b2 	add.w	r1, r1, #1424	; 0x590
 8000fa4:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V13' */
  VCU_B.U_Bat = 0.001 * VCU_B.DataStoreRead12;
 8000fa8:	4b42      	ldr	r3, [pc, #264]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000faa:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	a336      	add	r3, pc, #216	; (adr r3, 8001090 <FUNC_InputData+0xc58>)
 8000fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbc:	f00d fd04 	bl	800e9c8 <__aeabi_dmul>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	493b      	ldr	r1, [pc, #236]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000fc6:	f501 61b3 	add.w	r1, r1, #1432	; 0x598
 8000fca:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S14>/Data Store Read4' */
  VCU_B.DataStoreRead4 = VCU_DW.VAR_IN_f_FL;
 8000fce:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <FUNC_InputData+0xc80>)
 8000fd0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000fd4:	4937      	ldr	r1, [pc, #220]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000fd6:	f501 61b4 	add.w	r1, r1, #1440	; 0x5a0
 8000fda:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V15' */
  VCU_B.mVV15 = 0.001 * VCU_B.DataStoreRead4;
 8000fde:	4b35      	ldr	r3, [pc, #212]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000fe0:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8000fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	a328      	add	r3, pc, #160	; (adr r3, 8001090 <FUNC_InputData+0xc58>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	f00d fce9 	bl	800e9c8 <__aeabi_dmul>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	492e      	ldr	r1, [pc, #184]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000ffc:	f501 61b5 	add.w	r1, r1, #1448	; 0x5a8
 8001000:	e9c1 2300 	strd	r2, r3, [r1]

  /* Saturate: '<S42>/Saturation1' incorporates:
   *  Lookup_n-D: '<S42>/1-D Lookup Table1'
   */
  VCU_B.uDLookupTable1 = look1_binlxpw(VCU_B.mVV15,
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <FUNC_InputData+0xc7c>)
 8001006:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	2101      	movs	r1, #1
 8001010:	9100      	str	r1, [sp, #0]
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	4a2a      	ldr	r2, [pc, #168]	; (80010c0 <FUNC_InputData+0xc88>)
 8001018:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <FUNC_InputData+0xc8c>)
 800101a:	f004 fdbd 	bl	8005b98 <look1_binlxpw>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4924      	ldr	r1, [pc, #144]	; (80010b4 <FUNC_InputData+0xc7c>)
 8001024:	f501 61b6 	add.w	r1, r1, #1456	; 0x5b0
 8001028:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.uDLookupTable1_bp01Data, VCU_ConstP.uDLookupTable1_tableData, 1U);
  if (VCU_B.uDLookupTable1 > 9000.0) {
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <FUNC_InputData+0xc7c>)
 800102e:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	a31b      	add	r3, pc, #108	; (adr r3, 80010a8 <FUNC_InputData+0xc70>)
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	f00d ff52 	bl	800eee8 <__aeabi_dcmpgt>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d008      	beq.n	800105c <FUNC_InputData+0xc24>
    VCU_B.Saturation1_e = 9000.0;
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <FUNC_InputData+0xc7c>)
 800104c:	f503 61b7 	add.w	r1, r3, #1464	; 0x5b8
 8001050:	a315      	add	r3, pc, #84	; (adr r3, 80010a8 <FUNC_InputData+0xc70>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	e9c1 2300 	strd	r2, r3, [r1]
 800105a:	e03f      	b.n	80010dc <FUNC_InputData+0xca4>
  } else if (VCU_B.uDLookupTable1 < 0.0) {
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <FUNC_InputData+0xc7c>)
 800105e:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	f00d ff1b 	bl	800eeac <__aeabi_dcmplt>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d025      	beq.n	80010c8 <FUNC_InputData+0xc90>
    VCU_B.Saturation1_e = 0.0;
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <FUNC_InputData+0xc7c>)
 800107e:	f503 61b7 	add.w	r1, r3, #1464	; 0x5b8
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	e9c1 2300 	strd	r2, r3, [r1]
 800108e:	e025      	b.n	80010dc <FUNC_InputData+0xca4>
 8001090:	d2f1a9fc 	.word	0xd2f1a9fc
 8001094:	3f50624d 	.word	0x3f50624d
 8001098:	33333333 	.word	0x33333333
 800109c:	40133333 	.word	0x40133333
 80010a0:	9578d7b8 	.word	0x9578d7b8
 80010a4:	4050413f 	.word	0x4050413f
 80010a8:	00000000 	.word	0x00000000
 80010ac:	40c19400 	.word	0x40c19400
 80010b0:	40390000 	.word	0x40390000
 80010b4:	200008c8 	.word	0x200008c8
 80010b8:	20001058 	.word	0x20001058
 80010bc:	3fe00000 	.word	0x3fe00000
 80010c0:	0800f1b8 	.word	0x0800f1b8
 80010c4:	0800f1a8 	.word	0x0800f1a8
  } else {
    VCU_B.Saturation1_e = VCU_B.uDLookupTable1;
 80010c8:	4ba5      	ldr	r3, [pc, #660]	; (8001360 <FUNC_InputData+0xf28>)
 80010ca:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	49a3      	ldr	r1, [pc, #652]	; (8001360 <FUNC_InputData+0xf28>)
 80010d4:	f501 61b7 	add.w	r1, r1, #1464	; 0x5b8
 80010d8:	e9c1 2300 	strd	r2, r3, [r1]
  }

  /* End of Saturate: '<S42>/Saturation1' */

  /* DataStoreRead: '<S14>/Data Store Read5' */
  VCU_B.DataStoreRead5 = VCU_DW.VAR_IN_f_FR;
 80010dc:	4ba1      	ldr	r3, [pc, #644]	; (8001364 <FUNC_InputData+0xf2c>)
 80010de:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80010e2:	499f      	ldr	r1, [pc, #636]	; (8001360 <FUNC_InputData+0xf28>)
 80010e4:	f501 61b8 	add.w	r1, r1, #1472	; 0x5c0
 80010e8:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V16' */
  VCU_B.mVV16 = 0.001 * VCU_B.DataStoreRead5;
 80010ec:	4b9c      	ldr	r3, [pc, #624]	; (8001360 <FUNC_InputData+0xf28>)
 80010ee:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	a395      	add	r3, pc, #596	; (adr r3, 8001350 <FUNC_InputData+0xf18>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	f00d fc62 	bl	800e9c8 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4995      	ldr	r1, [pc, #596]	; (8001360 <FUNC_InputData+0xf28>)
 800110a:	f501 61b9 	add.w	r1, r1, #1480	; 0x5c8
 800110e:	e9c1 2300 	strd	r2, r3, [r1]

  /* Saturate: '<S43>/Saturation1' incorporates:
   *  Lookup_n-D: '<S43>/1-D Lookup Table1'
   */
  VCU_B.uDLookupTable1_k = look1_binlxpw(VCU_B.mVV16,
 8001112:	4b93      	ldr	r3, [pc, #588]	; (8001360 <FUNC_InputData+0xf28>)
 8001114:	f503 63b9 	add.w	r3, r3, #1480	; 0x5c8
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	2101      	movs	r1, #1
 800111e:	9100      	str	r1, [sp, #0]
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	4a90      	ldr	r2, [pc, #576]	; (8001368 <FUNC_InputData+0xf30>)
 8001126:	4b91      	ldr	r3, [pc, #580]	; (800136c <FUNC_InputData+0xf34>)
 8001128:	f004 fd36 	bl	8005b98 <look1_binlxpw>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	498b      	ldr	r1, [pc, #556]	; (8001360 <FUNC_InputData+0xf28>)
 8001132:	f501 61ba 	add.w	r1, r1, #1488	; 0x5d0
 8001136:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.uDLookupTable1_bp01Data_d, VCU_ConstP.uDLookupTable1_tableData_o,
    1U);
  if (VCU_B.uDLookupTable1_k > 9000.0) {
 800113a:	4b89      	ldr	r3, [pc, #548]	; (8001360 <FUNC_InputData+0xf28>)
 800113c:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8001140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	a383      	add	r3, pc, #524	; (adr r3, 8001358 <FUNC_InputData+0xf20>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f00d fecb 	bl	800eee8 <__aeabi_dcmpgt>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d008      	beq.n	800116a <FUNC_InputData+0xd32>
    VCU_B.Saturation1_n = 9000.0;
 8001158:	4b81      	ldr	r3, [pc, #516]	; (8001360 <FUNC_InputData+0xf28>)
 800115a:	f503 61bb 	add.w	r1, r3, #1496	; 0x5d8
 800115e:	a37e      	add	r3, pc, #504	; (adr r3, 8001358 <FUNC_InputData+0xf20>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	e9c1 2300 	strd	r2, r3, [r1]
 8001168:	e023      	b.n	80011b2 <FUNC_InputData+0xd7a>
  } else if (VCU_B.uDLookupTable1_k < 0.0) {
 800116a:	4b7d      	ldr	r3, [pc, #500]	; (8001360 <FUNC_InputData+0xf28>)
 800116c:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	f00d fe94 	bl	800eeac <__aeabi_dcmplt>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d009      	beq.n	800119e <FUNC_InputData+0xd66>
    VCU_B.Saturation1_n = 0.0;
 800118a:	4b75      	ldr	r3, [pc, #468]	; (8001360 <FUNC_InputData+0xf28>)
 800118c:	f503 61bb 	add.w	r1, r3, #1496	; 0x5d8
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	e9c1 2300 	strd	r2, r3, [r1]
 800119c:	e009      	b.n	80011b2 <FUNC_InputData+0xd7a>
  } else {
    VCU_B.Saturation1_n = VCU_B.uDLookupTable1_k;
 800119e:	4b70      	ldr	r3, [pc, #448]	; (8001360 <FUNC_InputData+0xf28>)
 80011a0:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	496d      	ldr	r1, [pc, #436]	; (8001360 <FUNC_InputData+0xf28>)
 80011aa:	f501 61bb 	add.w	r1, r1, #1496	; 0x5d8
 80011ae:	e9c1 2300 	strd	r2, r3, [r1]
  }

  /* End of Saturate: '<S43>/Saturation1' */

  /* DataStoreRead: '<S14>/Data Store Read6' */
  VCU_B.DataStoreRead6 = VCU_DW.VAR_IN_f_RL;
 80011b2:	4b6c      	ldr	r3, [pc, #432]	; (8001364 <FUNC_InputData+0xf2c>)
 80011b4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80011b8:	4969      	ldr	r1, [pc, #420]	; (8001360 <FUNC_InputData+0xf28>)
 80011ba:	f501 61bc 	add.w	r1, r1, #1504	; 0x5e0
 80011be:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V17' */
  VCU_B.mVV17 = 0.001 * VCU_B.DataStoreRead6;
 80011c2:	4b67      	ldr	r3, [pc, #412]	; (8001360 <FUNC_InputData+0xf28>)
 80011c4:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	a35f      	add	r3, pc, #380	; (adr r3, 8001350 <FUNC_InputData+0xf18>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f00d fbf7 	bl	800e9c8 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4960      	ldr	r1, [pc, #384]	; (8001360 <FUNC_InputData+0xf28>)
 80011e0:	f501 61bd 	add.w	r1, r1, #1512	; 0x5e8
 80011e4:	e9c1 2300 	strd	r2, r3, [r1]

  /* Saturate: '<S44>/Saturation1' incorporates:
   *  Lookup_n-D: '<S44>/1-D Lookup Table1'
   */
  VCU_B.uDLookupTable1_p = look1_binlxpw(VCU_B.mVV17,
 80011e8:	4b5d      	ldr	r3, [pc, #372]	; (8001360 <FUNC_InputData+0xf28>)
 80011ea:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	2104      	movs	r1, #4
 80011f4:	9100      	str	r1, [sp, #0]
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	4a5d      	ldr	r2, [pc, #372]	; (8001370 <FUNC_InputData+0xf38>)
 80011fc:	4b5d      	ldr	r3, [pc, #372]	; (8001374 <FUNC_InputData+0xf3c>)
 80011fe:	f004 fccb 	bl	8005b98 <look1_binlxpw>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4956      	ldr	r1, [pc, #344]	; (8001360 <FUNC_InputData+0xf28>)
 8001208:	f501 61be 	add.w	r1, r1, #1520	; 0x5f0
 800120c:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.uDLookupTable1_bp01Data_o, VCU_ConstP.uDLookupTable1_tableData_d,
    4U);
  if (VCU_B.uDLookupTable1_p > 9000.0) {
 8001210:	4b53      	ldr	r3, [pc, #332]	; (8001360 <FUNC_InputData+0xf28>)
 8001212:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	a34e      	add	r3, pc, #312	; (adr r3, 8001358 <FUNC_InputData+0xf20>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	f00d fe60 	bl	800eee8 <__aeabi_dcmpgt>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d008      	beq.n	8001240 <FUNC_InputData+0xe08>
    VCU_B.Saturation1_o = 9000.0;
 800122e:	4b4c      	ldr	r3, [pc, #304]	; (8001360 <FUNC_InputData+0xf28>)
 8001230:	f503 61bf 	add.w	r1, r3, #1528	; 0x5f8
 8001234:	a348      	add	r3, pc, #288	; (adr r3, 8001358 <FUNC_InputData+0xf20>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	e9c1 2300 	strd	r2, r3, [r1]
 800123e:	e023      	b.n	8001288 <FUNC_InputData+0xe50>
  } else if (VCU_B.uDLookupTable1_p < 0.0) {
 8001240:	4b47      	ldr	r3, [pc, #284]	; (8001360 <FUNC_InputData+0xf28>)
 8001242:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	f00d fe29 	bl	800eeac <__aeabi_dcmplt>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d009      	beq.n	8001274 <FUNC_InputData+0xe3c>
    VCU_B.Saturation1_o = 0.0;
 8001260:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <FUNC_InputData+0xf28>)
 8001262:	f503 61bf 	add.w	r1, r3, #1528	; 0x5f8
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	e9c1 2300 	strd	r2, r3, [r1]
 8001272:	e009      	b.n	8001288 <FUNC_InputData+0xe50>
  } else {
    VCU_B.Saturation1_o = VCU_B.uDLookupTable1_p;
 8001274:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <FUNC_InputData+0xf28>)
 8001276:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	4938      	ldr	r1, [pc, #224]	; (8001360 <FUNC_InputData+0xf28>)
 8001280:	f501 61bf 	add.w	r1, r1, #1528	; 0x5f8
 8001284:	e9c1 2300 	strd	r2, r3, [r1]
  }

  /* End of Saturate: '<S44>/Saturation1' */

  /* DataStoreRead: '<S14>/Data Store Read7' */
  VCU_B.DataStoreRead7 = VCU_DW.VAR_IN_f_RR;
 8001288:	4b36      	ldr	r3, [pc, #216]	; (8001364 <FUNC_InputData+0xf2c>)
 800128a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800128e:	4934      	ldr	r1, [pc, #208]	; (8001360 <FUNC_InputData+0xf28>)
 8001290:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
 8001294:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V18' */
  VCU_B.mVV18 = 0.001 * VCU_B.DataStoreRead7;
 8001298:	4b31      	ldr	r3, [pc, #196]	; (8001360 <FUNC_InputData+0xf28>)
 800129a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	a32a      	add	r3, pc, #168	; (adr r3, 8001350 <FUNC_InputData+0xf18>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f00d fb8c 	bl	800e9c8 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	492a      	ldr	r1, [pc, #168]	; (8001360 <FUNC_InputData+0xf28>)
 80012b6:	f501 61c1 	add.w	r1, r1, #1544	; 0x608
 80012ba:	e9c1 2300 	strd	r2, r3, [r1]

  /* Saturate: '<S45>/Saturation1' incorporates:
   *  Lookup_n-D: '<S45>/1-D Lookup Table1'
   */
  VCU_B.uDLookupTable1_kb = look1_binlxpw(VCU_B.mVV18,
 80012be:	4b28      	ldr	r3, [pc, #160]	; (8001360 <FUNC_InputData+0xf28>)
 80012c0:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	2104      	movs	r1, #4
 80012ca:	9100      	str	r1, [sp, #0]
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	4a29      	ldr	r2, [pc, #164]	; (8001378 <FUNC_InputData+0xf40>)
 80012d2:	4b2a      	ldr	r3, [pc, #168]	; (800137c <FUNC_InputData+0xf44>)
 80012d4:	f004 fc60 	bl	8005b98 <look1_binlxpw>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4920      	ldr	r1, [pc, #128]	; (8001360 <FUNC_InputData+0xf28>)
 80012de:	f501 61c2 	add.w	r1, r1, #1552	; 0x610
 80012e2:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.uDLookupTable1_bp01Data_n, VCU_ConstP.uDLookupTable1_tableData_l,
    4U);
  if (VCU_B.uDLookupTable1_kb > 9000.0) {
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <FUNC_InputData+0xf28>)
 80012e8:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	a318      	add	r3, pc, #96	; (adr r3, 8001358 <FUNC_InputData+0xf20>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f00d fdf5 	bl	800eee8 <__aeabi_dcmpgt>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d008      	beq.n	8001316 <FUNC_InputData+0xede>
    VCU_B.Saturation1_h = 9000.0;
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <FUNC_InputData+0xf28>)
 8001306:	f503 61c3 	add.w	r1, r3, #1560	; 0x618
 800130a:	a313      	add	r3, pc, #76	; (adr r3, 8001358 <FUNC_InputData+0xf20>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	e9c1 2300 	strd	r2, r3, [r1]
 8001314:	e03e      	b.n	8001394 <FUNC_InputData+0xf5c>
  } else if (VCU_B.uDLookupTable1_kb < 0.0) {
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <FUNC_InputData+0xf28>)
 8001318:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	f00d fdbe 	bl	800eeac <__aeabi_dcmplt>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d024      	beq.n	8001380 <FUNC_InputData+0xf48>
    VCU_B.Saturation1_h = 0.0;
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <FUNC_InputData+0xf28>)
 8001338:	f503 61c3 	add.w	r1, r3, #1560	; 0x618
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	e9c1 2300 	strd	r2, r3, [r1]
 8001348:	e024      	b.n	8001394 <FUNC_InputData+0xf5c>
 800134a:	bf00      	nop
 800134c:	f3af 8000 	nop.w
 8001350:	d2f1a9fc 	.word	0xd2f1a9fc
 8001354:	3f50624d 	.word	0x3f50624d
 8001358:	00000000 	.word	0x00000000
 800135c:	40c19400 	.word	0x40c19400
 8001360:	200008c8 	.word	0x200008c8
 8001364:	20001058 	.word	0x20001058
 8001368:	0800f1d8 	.word	0x0800f1d8
 800136c:	0800f1c8 	.word	0x0800f1c8
 8001370:	0800f210 	.word	0x0800f210
 8001374:	0800f1e8 	.word	0x0800f1e8
 8001378:	0800f260 	.word	0x0800f260
 800137c:	0800f238 	.word	0x0800f238
  } else {
    VCU_B.Saturation1_h = VCU_B.uDLookupTable1_kb;
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <FUNC_InputData+0xfa4>)
 8001382:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	4914      	ldr	r1, [pc, #80]	; (80013dc <FUNC_InputData+0xfa4>)
 800138c:	f501 61c3 	add.w	r1, r1, #1560	; 0x618
 8001390:	e9c1 2300 	strd	r2, r3, [r1]
  }

  /* End of Saturate: '<S45>/Saturation1' */

  /* DataStoreRead: '<S14>/Data Store Read8' */
  VCU_B.DataStoreRead8 = VCU_DW.VAR_IN_LC_dash_bit;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <FUNC_InputData+0xfa8>)
 8001396:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800139a:	4910      	ldr	r1, [pc, #64]	; (80013dc <FUNC_InputData+0xfa4>)
 800139c:	f501 61c4 	add.w	r1, r1, #1568	; 0x620
 80013a0:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataTypeConversion: '<S14>/Data Type Conversion11' */
  VCU_B.LC_dash_bit = (VCU_B.DataStoreRead8 != 0.0);
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <FUNC_InputData+0xfa4>)
 80013a6:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	2101      	movs	r1, #1
 80013b0:	460c      	mov	r4, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	f00d fd6b 	bl	800ee98 <__aeabi_dcmpeq>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <FUNC_InputData+0xf94>
 80013c8:	2300      	movs	r3, #0
 80013ca:	461c      	mov	r4, r3
 80013cc:	b2e3      	uxtb	r3, r4
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b02      	ldr	r3, [pc, #8]	; (80013dc <FUNC_InputData+0xfa4>)
 80013d2:	f883 277f 	strb.w	r2, [r3, #1919]	; 0x77f
}
 80013d6:	3704      	adds	r7, #4
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd90      	pop	{r4, r7, pc}
 80013dc:	200008c8 	.word	0x200008c8
 80013e0:	20001058 	.word	0x20001058
 80013e4:	f3af 8000 	nop.w

080013e8 <FUNC_OutputData>:
#include "VCU.h"
#include "VCU_private.h"

/* Output and update for atomic system: '<Root>/Output Data' */
void FUNC_OutputData(void)
{
 80013e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013ec:	b0be      	sub	sp, #248	; 0xf8
 80013ee:	af00      	add	r7, sp, #0
  real_T tmp;

  /* Gain: '<S63>/Gain' */
  VCU_B.n_wheel_FL_kmh = 3.6 * VCU_B.Add1_k;
 80013f0:	4bb1      	ldr	r3, [pc, #708]	; (80016b8 <FUNC_OutputData+0x2d0>)
 80013f2:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	a3ac      	add	r3, pc, #688	; (adr r3, 80016b0 <FUNC_OutputData+0x2c8>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f00d fae0 	bl	800e9c8 <__aeabi_dmul>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	4ba9      	ldr	r3, [pc, #676]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001412:	e9c3 019c 	strd	r0, r1, [r3, #624]	; 0x270

  /* Gain: '<S70>/Factor' */
  VCU_B.Factor = 10.0 * VCU_B.n_wheel_FL_kmh;
 8001416:	4ba8      	ldr	r3, [pc, #672]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001418:	e9d3 239c 	ldrd	r2, r3, [r3, #624]	; 0x270
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	4ba5      	ldr	r3, [pc, #660]	; (80016bc <FUNC_OutputData+0x2d4>)
 8001426:	f00d facf 	bl	800e9c8 <__aeabi_dmul>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	4ba1      	ldr	r3, [pc, #644]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001434:	e9c3 019e 	strd	r0, r1, [r3, #632]	; 0x278

  /* Sum: '<S70>/Add1' */
  VCU_B.Add1 = VCU_B.Factor;
 8001438:	4b9f      	ldr	r3, [pc, #636]	; (80016b8 <FUNC_OutputData+0x2d0>)
 800143a:	e9d3 239e 	ldrd	r2, r3, [r3, #632]	; 0x278
 800143e:	499e      	ldr	r1, [pc, #632]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001440:	e9c1 23a0 	strd	r2, r3, [r1, #640]	; 0x280

  /* DataTypeConversion: '<S70>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1);
 8001444:	4b9c      	ldr	r3, [pc, #624]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001446:	e9d3 23a0 	ldrd	r2, r3, [r3, #640]	; 0x280
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f00c fec7 	bl	800e1e0 <floor>
 8001452:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8001456:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800145a:	f004 ffb5 	bl	80063c8 <rtIsNaN>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d106      	bne.n	8001472 <FUNC_OutputData+0x8a>
 8001464:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001468:	f004 ff8a 	bl	8006380 <rtIsInf>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d006      	beq.n	8001480 <FUNC_OutputData+0x98>
    tmp = 0.0;
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800147e:	e008      	b.n	8001492 <FUNC_OutputData+0xaa>
  } else {
    tmp = fmod(tmp, 65536.0);
 8001480:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	4b8d      	ldr	r3, [pc, #564]	; (80016c0 <FUNC_OutputData+0x2d8>)
 800148a:	f00c ff31 	bl	800e2f0 <fmod>
 800148e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10 = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 8001492:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	f00d fd05 	bl	800eeac <__aeabi_dcmplt>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00e      	beq.n	80014c6 <FUNC_OutputData+0xde>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 80014a8:	f8d7 40f0 	ldr.w	r4, [r7, #240]	; 0xf0
 80014ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014b0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014b4:	4620      	mov	r0, r4
 80014b6:	4629      	mov	r1, r5
 80014b8:	f00d fd20 	bl	800eefc <__aeabi_d2uiz>
 80014bc:	4603      	mov	r3, r0
 80014be:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10 = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80014c0:	425b      	negs	r3, r3
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	e005      	b.n	80014d2 <FUNC_OutputData+0xea>
 80014c6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80014ca:	f00d fd17 	bl	800eefc <__aeabi_d2uiz>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4a79      	ldr	r2, [pc, #484]	; (80016b8 <FUNC_OutputData+0x2d0>)
 80014d4:	f8a2 3640 	strh.w	r3, [r2, #1600]	; 0x640
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S70>/Data Type Conversion10' */

  /* DataStoreWrite: '<S64>/Data Store Write' */
  VCU_DW.VAR_OUT_n_wheel_FL_kmproh = VCU_B.DataTypeConversion10;
 80014d8:	4b77      	ldr	r3, [pc, #476]	; (80016b8 <FUNC_OutputData+0x2d0>)
 80014da:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 80014de:	4a79      	ldr	r2, [pc, #484]	; (80016c4 <FUNC_OutputData+0x2dc>)
 80014e0:	f8a2 30a0 	strh.w	r3, [r2, #160]	; 0xa0

  /* Gain: '<S63>/Gain1' */
  VCU_B.n_wheel_FR_kmh = 3.6 * VCU_B.Add1_de;
 80014e4:	4b74      	ldr	r3, [pc, #464]	; (80016b8 <FUNC_OutputData+0x2d0>)
 80014e6:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	a36f      	add	r3, pc, #444	; (adr r3, 80016b0 <FUNC_OutputData+0x2c8>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f00d fa66 	bl	800e9c8 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	4b6c      	ldr	r3, [pc, #432]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001506:	e9c3 01a2 	strd	r0, r1, [r3, #648]	; 0x288

  /* Gain: '<S71>/Factor' */
  VCU_B.Factor_c = 10.0 * VCU_B.n_wheel_FR_kmh;
 800150a:	4b6b      	ldr	r3, [pc, #428]	; (80016b8 <FUNC_OutputData+0x2d0>)
 800150c:	e9d3 23a2 	ldrd	r2, r3, [r3, #648]	; 0x288
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b68      	ldr	r3, [pc, #416]	; (80016bc <FUNC_OutputData+0x2d4>)
 800151a:	f00d fa55 	bl	800e9c8 <__aeabi_dmul>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	4b64      	ldr	r3, [pc, #400]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001528:	e9c3 01a4 	strd	r0, r1, [r3, #656]	; 0x290

  /* Sum: '<S71>/Add1' */
  VCU_B.Add1_i = VCU_B.Factor_c;
 800152c:	4b62      	ldr	r3, [pc, #392]	; (80016b8 <FUNC_OutputData+0x2d0>)
 800152e:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	; 0x290
 8001532:	4961      	ldr	r1, [pc, #388]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001534:	e9c1 23a6 	strd	r2, r3, [r1, #664]	; 0x298

  /* DataTypeConversion: '<S71>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_i);
 8001538:	4b5f      	ldr	r3, [pc, #380]	; (80016b8 <FUNC_OutputData+0x2d0>)
 800153a:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	; 0x298
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f00c fe4d 	bl	800e1e0 <floor>
 8001546:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 800154a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800154e:	f004 ff3b 	bl	80063c8 <rtIsNaN>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d106      	bne.n	8001566 <FUNC_OutputData+0x17e>
 8001558:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800155c:	f004 ff10 	bl	8006380 <rtIsInf>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <FUNC_OutputData+0x18c>
    tmp = 0.0;
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001572:	e008      	b.n	8001586 <FUNC_OutputData+0x19e>
  } else {
    tmp = fmod(tmp, 65536.0);
 8001574:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4b50      	ldr	r3, [pc, #320]	; (80016c0 <FUNC_OutputData+0x2d8>)
 800157e:	f00c feb7 	bl	800e2f0 <fmod>
 8001582:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_b = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 8001586:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	f00d fc8b 	bl	800eeac <__aeabi_dcmplt>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00e      	beq.n	80015ba <FUNC_OutputData+0x1d2>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 800159c:	f8d7 80f0 	ldr.w	r8, [r7, #240]	; 0xf0
 80015a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015a4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80015a8:	4640      	mov	r0, r8
 80015aa:	4649      	mov	r1, r9
 80015ac:	f00d fca6 	bl	800eefc <__aeabi_d2uiz>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10_b = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80015b4:	425b      	negs	r3, r3
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	e005      	b.n	80015c6 <FUNC_OutputData+0x1de>
 80015ba:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80015be:	f00d fc9d 	bl	800eefc <__aeabi_d2uiz>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	4a3c      	ldr	r2, [pc, #240]	; (80016b8 <FUNC_OutputData+0x2d0>)
 80015c8:	f8a2 3642 	strh.w	r3, [r2, #1602]	; 0x642
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S71>/Data Type Conversion10' */

  /* DataStoreWrite: '<S64>/Data Store Write1' */
  VCU_DW.VAR_OUT_n_wheel_FR_kmproh = VCU_B.DataTypeConversion10_b;
 80015cc:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <FUNC_OutputData+0x2d0>)
 80015ce:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 80015d2:	4a3c      	ldr	r2, [pc, #240]	; (80016c4 <FUNC_OutputData+0x2dc>)
 80015d4:	f8a2 30a2 	strh.w	r3, [r2, #162]	; 0xa2

  /* Gain: '<S63>/Gain2' */
  VCU_B.n_wheel_RL_kmh = 3.6 * VCU_B.Add1_ks;
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <FUNC_OutputData+0x2d0>)
 80015da:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	a332      	add	r3, pc, #200	; (adr r3, 80016b0 <FUNC_OutputData+0x2c8>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f00d f9ec 	bl	800e9c8 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <FUNC_OutputData+0x2d0>)
 80015fa:	e9c3 01a8 	strd	r0, r1, [r3, #672]	; 0x2a0

  /* Gain: '<S72>/Factor' */
  VCU_B.Factor_j = 10.0 * VCU_B.n_wheel_RL_kmh;
 80015fe:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001600:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <FUNC_OutputData+0x2d4>)
 800160e:	f00d f9db 	bl	800e9c8 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <FUNC_OutputData+0x2d0>)
 800161c:	e9c3 01aa 	strd	r0, r1, [r3, #680]	; 0x2a8

  /* Sum: '<S72>/Add1' */
  VCU_B.Add1_a = VCU_B.Factor_j;
 8001620:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001622:	e9d3 23aa 	ldrd	r2, r3, [r3, #680]	; 0x2a8
 8001626:	4924      	ldr	r1, [pc, #144]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001628:	e9c1 23ac 	strd	r2, r3, [r1, #688]	; 0x2b0

  /* DataTypeConversion: '<S72>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_a);
 800162c:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <FUNC_OutputData+0x2d0>)
 800162e:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f00c fdd3 	bl	800e1e0 <floor>
 800163a:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 800163e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001642:	f004 fec1 	bl	80063c8 <rtIsNaN>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d106      	bne.n	800165a <FUNC_OutputData+0x272>
 800164c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001650:	f004 fe96 	bl	8006380 <rtIsInf>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d006      	beq.n	8001668 <FUNC_OutputData+0x280>
    tmp = 0.0;
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001666:	e008      	b.n	800167a <FUNC_OutputData+0x292>
  } else {
    tmp = fmod(tmp, 65536.0);
 8001668:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <FUNC_OutputData+0x2d8>)
 8001672:	f00c fe3d 	bl	800e2f0 <fmod>
 8001676:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_be = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 800167a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	f00d fc11 	bl	800eeac <__aeabi_dcmplt>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d01b      	beq.n	80016c8 <FUNC_OutputData+0x2e0>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 8001690:	f8d7 a0f0 	ldr.w	sl, [r7, #240]	; 0xf0
 8001694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001698:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800169c:	4650      	mov	r0, sl
 800169e:	4659      	mov	r1, fp
 80016a0:	f00d fc2c 	bl	800eefc <__aeabi_d2uiz>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10_be = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80016a8:	425b      	negs	r3, r3
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	e012      	b.n	80016d4 <FUNC_OutputData+0x2ec>
 80016ae:	bf00      	nop
 80016b0:	cccccccd 	.word	0xcccccccd
 80016b4:	400ccccc 	.word	0x400ccccc
 80016b8:	200008c8 	.word	0x200008c8
 80016bc:	40240000 	.word	0x40240000
 80016c0:	40f00000 	.word	0x40f00000
 80016c4:	20001058 	.word	0x20001058
 80016c8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80016cc:	f00d fc16 	bl	800eefc <__aeabi_d2uiz>
 80016d0:	4603      	mov	r3, r0
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4aa2      	ldr	r2, [pc, #648]	; (8001960 <FUNC_OutputData+0x578>)
 80016d6:	f8a2 3644 	strh.w	r3, [r2, #1604]	; 0x644
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S72>/Data Type Conversion10' */

  /* DataStoreWrite: '<S64>/Data Store Write2' */
  VCU_DW.VAR_OUT_n_wheel_RL_kmproh = VCU_B.DataTypeConversion10_be;
 80016da:	4ba1      	ldr	r3, [pc, #644]	; (8001960 <FUNC_OutputData+0x578>)
 80016dc:	f8b3 3644 	ldrh.w	r3, [r3, #1604]	; 0x644
 80016e0:	4aa0      	ldr	r2, [pc, #640]	; (8001964 <FUNC_OutputData+0x57c>)
 80016e2:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4

  /* Gain: '<S63>/Gain3' */
  VCU_B.n_wheel_RR_kmh = 3.6 * VCU_B.Add1_eq;
 80016e6:	4b9e      	ldr	r3, [pc, #632]	; (8001960 <FUNC_OutputData+0x578>)
 80016e8:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	a398      	add	r3, pc, #608	; (adr r3, 8001958 <FUNC_OutputData+0x570>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f00d f965 	bl	800e9c8 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	4b96      	ldr	r3, [pc, #600]	; (8001960 <FUNC_OutputData+0x578>)
 8001708:	e9c3 01ae 	strd	r0, r1, [r3, #696]	; 0x2b8

  /* Gain: '<S73>/Factor' */
  VCU_B.Factor_h = 10.0 * VCU_B.n_wheel_RR_kmh;
 800170c:	4b94      	ldr	r3, [pc, #592]	; (8001960 <FUNC_OutputData+0x578>)
 800170e:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	4b93      	ldr	r3, [pc, #588]	; (8001968 <FUNC_OutputData+0x580>)
 800171c:	f00d f954 	bl	800e9c8 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	4b8d      	ldr	r3, [pc, #564]	; (8001960 <FUNC_OutputData+0x578>)
 800172a:	e9c3 01b0 	strd	r0, r1, [r3, #704]	; 0x2c0

  /* Sum: '<S73>/Add1' */
  VCU_B.Add1_e = VCU_B.Factor_h;
 800172e:	4b8c      	ldr	r3, [pc, #560]	; (8001960 <FUNC_OutputData+0x578>)
 8001730:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 8001734:	498a      	ldr	r1, [pc, #552]	; (8001960 <FUNC_OutputData+0x578>)
 8001736:	e9c1 23b2 	strd	r2, r3, [r1, #712]	; 0x2c8

  /* DataTypeConversion: '<S73>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_e);
 800173a:	4b89      	ldr	r3, [pc, #548]	; (8001960 <FUNC_OutputData+0x578>)
 800173c:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f00c fd4c 	bl	800e1e0 <floor>
 8001748:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 800174c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001750:	f004 fe3a 	bl	80063c8 <rtIsNaN>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d106      	bne.n	8001768 <FUNC_OutputData+0x380>
 800175a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800175e:	f004 fe0f 	bl	8006380 <rtIsInf>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <FUNC_OutputData+0x38e>
    tmp = 0.0;
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001774:	e008      	b.n	8001788 <FUNC_OutputData+0x3a0>
  } else {
    tmp = fmod(tmp, 65536.0);
 8001776:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b7b      	ldr	r3, [pc, #492]	; (800196c <FUNC_OutputData+0x584>)
 8001780:	f00c fdb6 	bl	800e2f0 <fmod>
 8001784:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_o = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 8001788:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	f00d fb8a 	bl	800eeac <__aeabi_dcmplt>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d012      	beq.n	80017c4 <FUNC_OutputData+0x3dc>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 800179e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80017a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80017a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80017ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017b2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80017b6:	f00d fba1 	bl	800eefc <__aeabi_d2uiz>
 80017ba:	4603      	mov	r3, r0
 80017bc:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10_o = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80017be:	425b      	negs	r3, r3
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	e005      	b.n	80017d0 <FUNC_OutputData+0x3e8>
 80017c4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80017c8:	f00d fb98 	bl	800eefc <__aeabi_d2uiz>
 80017cc:	4603      	mov	r3, r0
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4a63      	ldr	r2, [pc, #396]	; (8001960 <FUNC_OutputData+0x578>)
 80017d2:	f8a2 3646 	strh.w	r3, [r2, #1606]	; 0x646
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S73>/Data Type Conversion10' */

  /* DataStoreWrite: '<S64>/Data Store Write3' */
  VCU_DW.VAR_OUT_n_wheel_RR_kmproh = VCU_B.DataTypeConversion10_o;
 80017d6:	4b62      	ldr	r3, [pc, #392]	; (8001960 <FUNC_OutputData+0x578>)
 80017d8:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 80017dc:	4a61      	ldr	r2, [pc, #388]	; (8001964 <FUNC_OutputData+0x57c>)
 80017de:	f8a2 30a6 	strh.w	r3, [r2, #166]	; 0xa6

  /* Sum: '<S80>/Add1' */
  VCU_B.Add1_j = VCU_B.Sensitivity1538mVbar;
 80017e2:	4b5f      	ldr	r3, [pc, #380]	; (8001960 <FUNC_OutputData+0x578>)
 80017e4:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	495c      	ldr	r1, [pc, #368]	; (8001960 <FUNC_OutputData+0x578>)
 80017ee:	e9c1 23b4 	strd	r2, r3, [r1, #720]	; 0x2d0

  /* DataTypeConversion: '<S80>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_j);
 80017f2:	4b5b      	ldr	r3, [pc, #364]	; (8001960 <FUNC_OutputData+0x578>)
 80017f4:	e9d3 23b4 	ldrd	r2, r3, [r3, #720]	; 0x2d0
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f00c fcf0 	bl	800e1e0 <floor>
 8001800:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8001804:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001808:	f004 fdde 	bl	80063c8 <rtIsNaN>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d106      	bne.n	8001820 <FUNC_OutputData+0x438>
 8001812:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001816:	f004 fdb3 	bl	8006380 <rtIsInf>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d006      	beq.n	800182e <FUNC_OutputData+0x446>
    tmp = 0.0;
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800182c:	e008      	b.n	8001840 <FUNC_OutputData+0x458>
  } else {
    tmp = fmod(tmp, 256.0);
 800182e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <FUNC_OutputData+0x588>)
 8001838:	f00c fd5a 	bl	800e2f0 <fmod>
 800183c:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_ho = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001840:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	f00d fb2e 	bl	800eeac <__aeabi_dcmplt>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d012      	beq.n	800187c <FUNC_OutputData+0x494>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001856:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800185a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800185e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001862:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800186a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800186e:	f00d fb45 	bl	800eefc <__aeabi_d2uiz>
 8001872:	4603      	mov	r3, r0
 8001874:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_ho = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001876:	425b      	negs	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	e005      	b.n	8001888 <FUNC_OutputData+0x4a0>
 800187c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001880:	f00d fb3c 	bl	800eefc <__aeabi_d2uiz>
 8001884:	4603      	mov	r3, r0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	4a35      	ldr	r2, [pc, #212]	; (8001960 <FUNC_OutputData+0x578>)
 800188a:	f882 368e 	strb.w	r3, [r2, #1678]	; 0x68e
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S80>/Data Type Conversion10' */

  /* DataStoreWrite: '<S66>/Data Store Write' */
  VCU_DW.VAR_OUT_p_brake_R = VCU_B.DataTypeConversion10_ho;
 800188e:	4b34      	ldr	r3, [pc, #208]	; (8001960 <FUNC_OutputData+0x578>)
 8001890:	f893 368e 	ldrb.w	r3, [r3, #1678]	; 0x68e
 8001894:	4a33      	ldr	r2, [pc, #204]	; (8001964 <FUNC_OutputData+0x57c>)
 8001896:	f882 30fe 	strb.w	r3, [r2, #254]	; 0xfe

  /* Gain: '<S81>/Factor' */
  VCU_B.Factor_d = 100.0 * VCU_B.Add1_f;
 800189a:	4b31      	ldr	r3, [pc, #196]	; (8001960 <FUNC_OutputData+0x578>)
 800189c:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	4b31      	ldr	r3, [pc, #196]	; (8001974 <FUNC_OutputData+0x58c>)
 80018ae:	f00d f88b 	bl	800e9c8 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	4b29      	ldr	r3, [pc, #164]	; (8001960 <FUNC_OutputData+0x578>)
 80018bc:	e9c3 01b6 	strd	r0, r1, [r3, #728]	; 0x2d8

  /* Sum: '<S81>/Add1' */
  VCU_B.Add1_l = VCU_B.Factor_d;
 80018c0:	4b27      	ldr	r3, [pc, #156]	; (8001960 <FUNC_OutputData+0x578>)
 80018c2:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 80018c6:	4926      	ldr	r1, [pc, #152]	; (8001960 <FUNC_OutputData+0x578>)
 80018c8:	e9c1 23b8 	strd	r2, r3, [r1, #736]	; 0x2e0

  /* DataTypeConversion: '<S81>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_l);
 80018cc:	4b24      	ldr	r3, [pc, #144]	; (8001960 <FUNC_OutputData+0x578>)
 80018ce:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	; 0x2e0
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f00c fc83 	bl	800e1e0 <floor>
 80018da:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 80018de:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80018e2:	f004 fd71 	bl	80063c8 <rtIsNaN>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d106      	bne.n	80018fa <FUNC_OutputData+0x512>
 80018ec:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80018f0:	f004 fd46 	bl	8006380 <rtIsInf>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <FUNC_OutputData+0x520>
    tmp = 0.0;
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001906:	e008      	b.n	800191a <FUNC_OutputData+0x532>
  } else {
    tmp = fmod(tmp, 256.0);
 8001908:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <FUNC_OutputData+0x588>)
 8001912:	f00c fced 	bl	800e2f0 <fmod>
 8001916:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_fx = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 800191a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	f00d fac1 	bl	800eeac <__aeabi_dcmplt>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d023      	beq.n	8001978 <FUNC_OutputData+0x590>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001930:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001934:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800193c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001940:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001944:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001948:	f00d fad8 	bl	800eefc <__aeabi_d2uiz>
 800194c:	4603      	mov	r3, r0
 800194e:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_fx = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001950:	425b      	negs	r3, r3
 8001952:	b2db      	uxtb	r3, r3
 8001954:	e016      	b.n	8001984 <FUNC_OutputData+0x59c>
 8001956:	bf00      	nop
 8001958:	cccccccd 	.word	0xcccccccd
 800195c:	400ccccc 	.word	0x400ccccc
 8001960:	200008c8 	.word	0x200008c8
 8001964:	20001058 	.word	0x20001058
 8001968:	40240000 	.word	0x40240000
 800196c:	40f00000 	.word	0x40f00000
 8001970:	40700000 	.word	0x40700000
 8001974:	40590000 	.word	0x40590000
 8001978:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800197c:	f00d fabe 	bl	800eefc <__aeabi_d2uiz>
 8001980:	4603      	mov	r3, r0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	4aa8      	ldr	r2, [pc, #672]	; (8001c28 <FUNC_OutputData+0x840>)
 8001986:	f882 368f 	strb.w	r3, [r2, #1679]	; 0x68f
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S81>/Data Type Conversion10' */

  /* DataStoreWrite: '<S66>/Data Store Write1' */
  VCU_DW.VAR_OUT_STW_mue_tyre = VCU_B.DataTypeConversion10_fx;
 800198a:	4ba7      	ldr	r3, [pc, #668]	; (8001c28 <FUNC_OutputData+0x840>)
 800198c:	f893 368f 	ldrb.w	r3, [r3, #1679]	; 0x68f
 8001990:	4aa6      	ldr	r2, [pc, #664]	; (8001c2c <FUNC_OutputData+0x844>)
 8001992:	f882 30ff 	strb.w	r3, [r2, #255]	; 0xff

  /* Gain: '<S82>/Factor' */
  VCU_B.Factor_b = 10.0 * VCU_B.x_clutch_LC;
 8001996:	4ba4      	ldr	r3, [pc, #656]	; (8001c28 <FUNC_OutputData+0x840>)
 8001998:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	4ba2      	ldr	r3, [pc, #648]	; (8001c30 <FUNC_OutputData+0x848>)
 80019a6:	f00d f80f 	bl	800e9c8 <__aeabi_dmul>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	4b9d      	ldr	r3, [pc, #628]	; (8001c28 <FUNC_OutputData+0x840>)
 80019b4:	e9c3 01ba 	strd	r0, r1, [r3, #744]	; 0x2e8

  /* Sum: '<S82>/Add1' */
  VCU_B.Add1_ll = VCU_B.Factor_b;
 80019b8:	4b9b      	ldr	r3, [pc, #620]	; (8001c28 <FUNC_OutputData+0x840>)
 80019ba:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	; 0x2e8
 80019be:	499a      	ldr	r1, [pc, #616]	; (8001c28 <FUNC_OutputData+0x840>)
 80019c0:	e9c1 23bc 	strd	r2, r3, [r1, #752]	; 0x2f0

  /* DataTypeConversion: '<S82>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_ll);
 80019c4:	4b98      	ldr	r3, [pc, #608]	; (8001c28 <FUNC_OutputData+0x840>)
 80019c6:	e9d3 23bc 	ldrd	r2, r3, [r3, #752]	; 0x2f0
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f00c fc07 	bl	800e1e0 <floor>
 80019d2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 80019d6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80019da:	f004 fcf5 	bl	80063c8 <rtIsNaN>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d106      	bne.n	80019f2 <FUNC_OutputData+0x60a>
 80019e4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80019e8:	f004 fcca 	bl	8006380 <rtIsInf>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <FUNC_OutputData+0x618>
    tmp = 0.0;
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80019fe:	e008      	b.n	8001a12 <FUNC_OutputData+0x62a>
  } else {
    tmp = fmod(tmp, 256.0);
 8001a00:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	4b8a      	ldr	r3, [pc, #552]	; (8001c34 <FUNC_OutputData+0x84c>)
 8001a0a:	f00c fc71 	bl	800e2f0 <fmod>
 8001a0e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_ae = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001a12:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	f00d fa45 	bl	800eeac <__aeabi_dcmplt>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d012      	beq.n	8001a4e <FUNC_OutputData+0x666>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001a28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a3c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001a40:	f00d fa5c 	bl	800eefc <__aeabi_d2uiz>
 8001a44:	4603      	mov	r3, r0
 8001a46:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_ae = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001a48:	425b      	negs	r3, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	e005      	b.n	8001a5a <FUNC_OutputData+0x672>
 8001a4e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001a52:	f00d fa53 	bl	800eefc <__aeabi_d2uiz>
 8001a56:	4603      	mov	r3, r0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4a73      	ldr	r2, [pc, #460]	; (8001c28 <FUNC_OutputData+0x840>)
 8001a5c:	f882 3690 	strb.w	r3, [r2, #1680]	; 0x690
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S82>/Data Type Conversion10' */

  /* DataStoreWrite: '<S66>/Data Store Write2' */
  VCU_DW.VAR_OUT_x_clutch_LC = VCU_B.DataTypeConversion10_ae;
 8001a60:	4b71      	ldr	r3, [pc, #452]	; (8001c28 <FUNC_OutputData+0x840>)
 8001a62:	f893 3690 	ldrb.w	r3, [r3, #1680]	; 0x690
 8001a66:	4a71      	ldr	r2, [pc, #452]	; (8001c2c <FUNC_OutputData+0x844>)
 8001a68:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100

  /* Gain: '<S83>/Factor' */
  VCU_B.Factor_ii = (uint8_T)(VCU_B.LC_dash_bit << 7);
 8001a6c:	4b6e      	ldr	r3, [pc, #440]	; (8001c28 <FUNC_OutputData+0x840>)
 8001a6e:	f893 377f 	ldrb.w	r3, [r3, #1919]	; 0x77f
 8001a72:	01db      	lsls	r3, r3, #7
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4a6c      	ldr	r2, [pc, #432]	; (8001c28 <FUNC_OutputData+0x840>)
 8001a78:	f882 36c5 	strb.w	r3, [r2, #1733]	; 0x6c5

  /* Sum: '<S83>/Add1' */
  VCU_B.Add1_b = (real_T)VCU_B.Factor_ii * 0.0078125;
 8001a7c:	4b6a      	ldr	r3, [pc, #424]	; (8001c28 <FUNC_OutputData+0x840>)
 8001a7e:	f893 36c5 	ldrb.w	r3, [r3, #1733]	; 0x6c5
 8001a82:	4618      	mov	r0, r3
 8001a84:	f00c ff2a 	bl	800e8dc <__aeabi_ui2d>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a98:	f00c ff96 	bl	800e9c8 <__aeabi_dmul>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4b60      	ldr	r3, [pc, #384]	; (8001c28 <FUNC_OutputData+0x840>)
 8001aa6:	e9c3 01be 	strd	r0, r1, [r3, #760]	; 0x2f8

  /* DataTypeConversion: '<S83>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_b);
 8001aaa:	4b5f      	ldr	r3, [pc, #380]	; (8001c28 <FUNC_OutputData+0x840>)
 8001aac:	e9d3 23be 	ldrd	r2, r3, [r3, #760]	; 0x2f8
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f00c fb94 	bl	800e1e0 <floor>
 8001ab8:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8001abc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001ac0:	f004 fc82 	bl	80063c8 <rtIsNaN>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <FUNC_OutputData+0x6f0>
 8001aca:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001ace:	f004 fc57 	bl	8006380 <rtIsInf>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <FUNC_OutputData+0x6fe>
    tmp = 0.0;
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001ae4:	e008      	b.n	8001af8 <FUNC_OutputData+0x710>
  } else {
    tmp = fmod(tmp, 256.0);
 8001ae6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	4b51      	ldr	r3, [pc, #324]	; (8001c34 <FUNC_OutputData+0x84c>)
 8001af0:	f00c fbfe 	bl	800e2f0 <fmod>
 8001af4:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_c = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001af8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	f00d f9d2 	bl	800eeac <__aeabi_dcmplt>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d012      	beq.n	8001b34 <FUNC_OutputData+0x74c>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001b0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001b12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b1a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001b26:	f00d f9e9 	bl	800eefc <__aeabi_d2uiz>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_c = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001b2e:	425b      	negs	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	e005      	b.n	8001b40 <FUNC_OutputData+0x758>
 8001b34:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001b38:	f00d f9e0 	bl	800eefc <__aeabi_d2uiz>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	4a39      	ldr	r2, [pc, #228]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b42:	f882 3691 	strb.w	r3, [r2, #1681]	; 0x691
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S83>/Data Type Conversion10' */

  /* DataStoreWrite: '<S66>/Data Store Write3' */
  VCU_DW.VAR_OUT_LC_dash_Bit = VCU_B.DataTypeConversion10_c;
 8001b46:	4b38      	ldr	r3, [pc, #224]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b48:	f893 3691 	ldrb.w	r3, [r3, #1681]	; 0x691
 8001b4c:	4a37      	ldr	r2, [pc, #220]	; (8001c2c <FUNC_OutputData+0x844>)
 8001b4e:	f882 3101 	strb.w	r3, [r2, #257]	; 0x101

  /* RelationalOperator: '<S108>/Compare' */
  VCU_B.Compare_k5 = VCU_B.LC_active_bit;
 8001b52:	4b35      	ldr	r3, [pc, #212]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b54:	f893 36ce 	ldrb.w	r3, [r3, #1742]	; 0x6ce
 8001b58:	4a33      	ldr	r2, [pc, #204]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b5a:	f882 3778 	strb.w	r3, [r2, #1912]	; 0x778

  /* Gain: '<S84>/Factor' */
  VCU_B.Factor_c0 = (uint8_T)(VCU_B.Compare_k5 << 7);
 8001b5e:	4b32      	ldr	r3, [pc, #200]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b60:	f893 3778 	ldrb.w	r3, [r3, #1912]	; 0x778
 8001b64:	01db      	lsls	r3, r3, #7
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	4a2f      	ldr	r2, [pc, #188]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b6a:	f882 36c6 	strb.w	r3, [r2, #1734]	; 0x6c6

  /* Sum: '<S84>/Add1' */
  VCU_B.Add1_n = (real_T)VCU_B.Factor_c0 * 0.0078125;
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b70:	f893 36c6 	ldrb.w	r3, [r3, #1734]	; 0x6c6
 8001b74:	4618      	mov	r0, r3
 8001b76:	f00c feb1 	bl	800e8dc <__aeabi_ui2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b8a:	f00c ff1d 	bl	800e9c8 <__aeabi_dmul>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b98:	e9c3 01c0 	strd	r0, r1, [r3, #768]	; 0x300

  /* DataTypeConversion: '<S84>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_n);
 8001b9c:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b9e:	e9d3 23c0 	ldrd	r2, r3, [r3, #768]	; 0x300
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f00c fb1b 	bl	800e1e0 <floor>
 8001baa:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8001bae:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001bb2:	f004 fc09 	bl	80063c8 <rtIsNaN>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d106      	bne.n	8001bca <FUNC_OutputData+0x7e2>
 8001bbc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001bc0:	f004 fbde 	bl	8006380 <rtIsInf>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d006      	beq.n	8001bd8 <FUNC_OutputData+0x7f0>
    tmp = 0.0;
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001bd6:	e008      	b.n	8001bea <FUNC_OutputData+0x802>
  } else {
    tmp = fmod(tmp, 256.0);
 8001bd8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <FUNC_OutputData+0x84c>)
 8001be2:	f00c fb85 	bl	800e2f0 <fmod>
 8001be6:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_ou = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001bea:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	f00d f959 	bl	800eeac <__aeabi_dcmplt>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d01b      	beq.n	8001c38 <FUNC_OutputData+0x850>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001c00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001c04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c14:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001c18:	f00d f970 	bl	800eefc <__aeabi_d2uiz>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_ou = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001c20:	425b      	negs	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	e00e      	b.n	8001c44 <FUNC_OutputData+0x85c>
 8001c26:	bf00      	nop
 8001c28:	200008c8 	.word	0x200008c8
 8001c2c:	20001058 	.word	0x20001058
 8001c30:	40240000 	.word	0x40240000
 8001c34:	40700000 	.word	0x40700000
 8001c38:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001c3c:	f00d f95e 	bl	800eefc <__aeabi_d2uiz>
 8001c40:	4603      	mov	r3, r0
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	4a9a      	ldr	r2, [pc, #616]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001c46:	f882 3692 	strb.w	r3, [r2, #1682]	; 0x692
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S84>/Data Type Conversion10' */

  /* DataStoreWrite: '<S66>/Data Store Write4' */
  VCU_DW.VAR_OUT_LC_active_bit = VCU_B.DataTypeConversion10_ou;
 8001c4a:	4b99      	ldr	r3, [pc, #612]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001c4c:	f893 3692 	ldrb.w	r3, [r3, #1682]	; 0x692
 8001c50:	4a98      	ldr	r2, [pc, #608]	; (8001eb4 <FUNC_OutputData+0xacc>)
 8001c52:	f882 3102 	strb.w	r3, [r2, #258]	; 0x102

  /* Gain: '<S85>/Factor' */
  VCU_B.Factor_b4 = (uint8_T)(VCU_B.LC_ready_bit << 7);
 8001c56:	4b96      	ldr	r3, [pc, #600]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001c58:	f893 36cf 	ldrb.w	r3, [r3, #1743]	; 0x6cf
 8001c5c:	01db      	lsls	r3, r3, #7
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4a93      	ldr	r2, [pc, #588]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001c62:	f882 36c7 	strb.w	r3, [r2, #1735]	; 0x6c7

  /* Sum: '<S85>/Add1' */
  VCU_B.Add1_jg = (real_T)VCU_B.Factor_b4 * 0.0078125;
 8001c66:	4b92      	ldr	r3, [pc, #584]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001c68:	f893 36c7 	ldrb.w	r3, [r3, #1735]	; 0x6c7
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f00c fe35 	bl	800e8dc <__aeabi_ui2d>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001c82:	f00c fea1 	bl	800e9c8 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4b88      	ldr	r3, [pc, #544]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001c90:	e9c3 01c2 	strd	r0, r1, [r3, #776]	; 0x308

  /* DataTypeConversion: '<S85>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_jg);
 8001c94:	4b86      	ldr	r3, [pc, #536]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001c96:	e9d3 23c2 	ldrd	r2, r3, [r3, #776]	; 0x308
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f00c fa9f 	bl	800e1e0 <floor>
 8001ca2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8001ca6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001caa:	f004 fb8d 	bl	80063c8 <rtIsNaN>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d106      	bne.n	8001cc2 <FUNC_OutputData+0x8da>
 8001cb4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001cb8:	f004 fb62 	bl	8006380 <rtIsInf>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <FUNC_OutputData+0x8e8>
    tmp = 0.0;
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001cce:	e008      	b.n	8001ce2 <FUNC_OutputData+0x8fa>
  } else {
    tmp = fmod(tmp, 256.0);
 8001cd0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	4b77      	ldr	r3, [pc, #476]	; (8001eb8 <FUNC_OutputData+0xad0>)
 8001cda:	f00c fb09 	bl	800e2f0 <fmod>
 8001cde:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_p = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001ce2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	f00d f8dd 	bl	800eeac <__aeabi_dcmplt>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d012      	beq.n	8001d1e <FUNC_OutputData+0x936>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001cf8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001d0c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001d10:	f00d f8f4 	bl	800eefc <__aeabi_d2uiz>
 8001d14:	4603      	mov	r3, r0
 8001d16:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_p = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001d18:	425b      	negs	r3, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	e005      	b.n	8001d2a <FUNC_OutputData+0x942>
 8001d1e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d22:	f00d f8eb 	bl	800eefc <__aeabi_d2uiz>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	4a61      	ldr	r2, [pc, #388]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001d2c:	f882 3693 	strb.w	r3, [r2, #1683]	; 0x693
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S85>/Data Type Conversion10' */

  /* DataStoreWrite: '<S66>/Data Store Write5' */
  VCU_DW.VAR_OUT_LC_ready_bit = VCU_B.DataTypeConversion10_p;
 8001d30:	4b5f      	ldr	r3, [pc, #380]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001d32:	f893 3693 	ldrb.w	r3, [r3, #1683]	; 0x693
 8001d36:	4a5f      	ldr	r2, [pc, #380]	; (8001eb4 <FUNC_OutputData+0xacc>)
 8001d38:	f882 3103 	strb.w	r3, [r2, #259]	; 0x103

  /* Sum: '<S86>/Add1' */
  VCU_B.Add1_bq = VCU_B.LC_Mdes;
 8001d3c:	4b5c      	ldr	r3, [pc, #368]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001d3e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001d42:	495b      	ldr	r1, [pc, #364]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001d44:	e9c1 23c4 	strd	r2, r3, [r1, #784]	; 0x310

  /* DataTypeConversion: '<S86>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_bq);
 8001d48:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001d4a:	e9d3 23c4 	ldrd	r2, r3, [r3, #784]	; 0x310
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	f00c fa45 	bl	800e1e0 <floor>
 8001d56:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8001d5a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d5e:	f004 fb33 	bl	80063c8 <rtIsNaN>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d106      	bne.n	8001d76 <FUNC_OutputData+0x98e>
 8001d68:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d6c:	f004 fb08 	bl	8006380 <rtIsInf>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d006      	beq.n	8001d84 <FUNC_OutputData+0x99c>
    tmp = 0.0;
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001d82:	e008      	b.n	8001d96 <FUNC_OutputData+0x9ae>
  } else {
    tmp = fmod(tmp, 256.0);
 8001d84:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	4b4a      	ldr	r3, [pc, #296]	; (8001eb8 <FUNC_OutputData+0xad0>)
 8001d8e:	f00c faaf 	bl	800e2f0 <fmod>
 8001d92:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_ci = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001d96:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	f00d f883 	bl	800eeac <__aeabi_dcmplt>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d012      	beq.n	8001dd2 <FUNC_OutputData+0x9ea>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001dac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001dc0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001dc4:	f00d f89a 	bl	800eefc <__aeabi_d2uiz>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_ci = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001dcc:	425b      	negs	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	e005      	b.n	8001dde <FUNC_OutputData+0x9f6>
 8001dd2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001dd6:	f00d f891 	bl	800eefc <__aeabi_d2uiz>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4a34      	ldr	r2, [pc, #208]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001de0:	f882 3694 	strb.w	r3, [r2, #1684]	; 0x694
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S86>/Data Type Conversion10' */

  /* DataStoreWrite: '<S66>/Data Store Write6' */
  VCU_DW.VAR_OUT_LC_Mdes = VCU_B.DataTypeConversion10_ci;
 8001de4:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001de6:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8001dea:	4a32      	ldr	r2, [pc, #200]	; (8001eb4 <FUNC_OutputData+0xacc>)
 8001dec:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

  /* Gain: '<S87>/Factor' */
  VCU_B.Factor_n = 0.1 * VCU_B.LC_Fnr;
 8001df0:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001df2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	a32b      	add	r3, pc, #172	; (adr r3, 8001ea8 <FUNC_OutputData+0xac0>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f00c fde2 	bl	800e9c8 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001e0e:	e9c3 01c6 	strd	r0, r1, [r3, #792]	; 0x318

  /* Sum: '<S87>/Add1' */
  VCU_B.Add1_io = VCU_B.Factor_n;
 8001e12:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001e14:	e9d3 23c6 	ldrd	r2, r3, [r3, #792]	; 0x318
 8001e18:	4925      	ldr	r1, [pc, #148]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001e1a:	e9c1 23c8 	strd	r2, r3, [r1, #800]	; 0x320

  /* DataTypeConversion: '<S87>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_io);
 8001e1e:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001e20:	e9d3 23c8 	ldrd	r2, r3, [r3, #800]	; 0x320
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f00c f9da 	bl	800e1e0 <floor>
 8001e2c:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8001e30:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e34:	f004 fac8 	bl	80063c8 <rtIsNaN>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <FUNC_OutputData+0xa64>
 8001e3e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e42:	f004 fa9d 	bl	8006380 <rtIsInf>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <FUNC_OutputData+0xa72>
    tmp = 0.0;
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001e58:	e008      	b.n	8001e6c <FUNC_OutputData+0xa84>
  } else {
    tmp = fmod(tmp, 256.0);
 8001e5a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <FUNC_OutputData+0xad0>)
 8001e64:	f00c fa44 	bl	800e2f0 <fmod>
 8001e68:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_j = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001e6c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	f00d f818 	bl	800eeac <__aeabi_dcmplt>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d01c      	beq.n	8001ebc <FUNC_OutputData+0xad4>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001e82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001e86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e8e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001e96:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001e9a:	f00d f82f 	bl	800eefc <__aeabi_d2uiz>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_j = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001ea2:	425b      	negs	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	e00f      	b.n	8001ec8 <FUNC_OutputData+0xae0>
 8001ea8:	9999999a 	.word	0x9999999a
 8001eac:	3fb99999 	.word	0x3fb99999
 8001eb0:	200008c8 	.word	0x200008c8
 8001eb4:	20001058 	.word	0x20001058
 8001eb8:	40700000 	.word	0x40700000
 8001ebc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001ec0:	f00d f81c 	bl	800eefc <__aeabi_d2uiz>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	4aa1      	ldr	r2, [pc, #644]	; (8002150 <FUNC_OutputData+0xd68>)
 8001eca:	f882 3695 	strb.w	r3, [r2, #1685]	; 0x695
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S87>/Data Type Conversion10' */

  /* DataStoreWrite: '<S66>/Data Store Write7' */
  VCU_DW.VAR_OUT_LC_Fnr = VCU_B.DataTypeConversion10_j;
 8001ece:	4ba0      	ldr	r3, [pc, #640]	; (8002150 <FUNC_OutputData+0xd68>)
 8001ed0:	f893 3695 	ldrb.w	r3, [r3, #1685]	; 0x695
 8001ed4:	4a9f      	ldr	r2, [pc, #636]	; (8002154 <FUNC_OutputData+0xd6c>)
 8001ed6:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105

  /* Sum: '<S74>/Add1' */
  VCU_B.Add1_p = VCU_B.ABS_switchstate;
 8001eda:	4b9d      	ldr	r3, [pc, #628]	; (8002150 <FUNC_OutputData+0xd68>)
 8001edc:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee4:	499a      	ldr	r1, [pc, #616]	; (8002150 <FUNC_OutputData+0xd68>)
 8001ee6:	e9c1 23ca 	strd	r2, r3, [r1, #808]	; 0x328

  /* DataTypeConversion: '<S74>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_p);
 8001eea:	4b99      	ldr	r3, [pc, #612]	; (8002150 <FUNC_OutputData+0xd68>)
 8001eec:	e9d3 23ca 	ldrd	r2, r3, [r3, #808]	; 0x328
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f00c f974 	bl	800e1e0 <floor>
 8001ef8:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8001efc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f00:	f004 fa62 	bl	80063c8 <rtIsNaN>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d106      	bne.n	8001f18 <FUNC_OutputData+0xb30>
 8001f0a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f0e:	f004 fa37 	bl	8006380 <rtIsInf>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d006      	beq.n	8001f26 <FUNC_OutputData+0xb3e>
    tmp = 0.0;
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001f24:	e008      	b.n	8001f38 <FUNC_OutputData+0xb50>
  } else {
    tmp = fmod(tmp, 256.0);
 8001f26:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	4b8a      	ldr	r3, [pc, #552]	; (8002158 <FUNC_OutputData+0xd70>)
 8001f30:	f00c f9de 	bl	800e2f0 <fmod>
 8001f34:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_o3 = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001f38:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	f00c ffb2 	bl	800eeac <__aeabi_dcmplt>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d012      	beq.n	8001f74 <FUNC_OutputData+0xb8c>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001f4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001f52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f5a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001f62:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001f66:	f00c ffc9 	bl	800eefc <__aeabi_d2uiz>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_o3 = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001f6e:	425b      	negs	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	e005      	b.n	8001f80 <FUNC_OutputData+0xb98>
 8001f74:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f78:	f00c ffc0 	bl	800eefc <__aeabi_d2uiz>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	4a73      	ldr	r2, [pc, #460]	; (8002150 <FUNC_OutputData+0xd68>)
 8001f82:	f882 3696 	strb.w	r3, [r2, #1686]	; 0x696
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S74>/Data Type Conversion10' */

  /* DataStoreWrite: '<S65>/Data Store Write' */
  VCU_DW.VAR_OUT_ABS_switchstate = VCU_B.DataTypeConversion10_o3;
 8001f86:	4b72      	ldr	r3, [pc, #456]	; (8002150 <FUNC_OutputData+0xd68>)
 8001f88:	f893 3696 	ldrb.w	r3, [r3, #1686]	; 0x696
 8001f8c:	4a71      	ldr	r2, [pc, #452]	; (8002154 <FUNC_OutputData+0xd6c>)
 8001f8e:	f882 3106 	strb.w	r3, [r2, #262]	; 0x106

  /* Sum: '<S75>/Add1' */
  VCU_B.Add1_c = VCU_B.Add1_m;
 8001f92:	4b6f      	ldr	r3, [pc, #444]	; (8002150 <FUNC_OutputData+0xd68>)
 8001f94:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	496c      	ldr	r1, [pc, #432]	; (8002150 <FUNC_OutputData+0xd68>)
 8001f9e:	e9c1 23cc 	strd	r2, r3, [r1, #816]	; 0x330

  /* DataTypeConversion: '<S75>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_c);
 8001fa2:	4b6b      	ldr	r3, [pc, #428]	; (8002150 <FUNC_OutputData+0xd68>)
 8001fa4:	e9d3 23cc 	ldrd	r2, r3, [r3, #816]	; 0x330
 8001fa8:	4610      	mov	r0, r2
 8001faa:	4619      	mov	r1, r3
 8001fac:	f00c f918 	bl	800e1e0 <floor>
 8001fb0:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8001fb4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001fb8:	f004 fa06 	bl	80063c8 <rtIsNaN>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d106      	bne.n	8001fd0 <FUNC_OutputData+0xbe8>
 8001fc2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001fc6:	f004 f9db 	bl	8006380 <rtIsInf>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <FUNC_OutputData+0xbf6>
    tmp = 0.0;
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001fdc:	e008      	b.n	8001ff0 <FUNC_OutputData+0xc08>
  } else {
    tmp = fmod(tmp, 65536.0);
 8001fde:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	4b5d      	ldr	r3, [pc, #372]	; (800215c <FUNC_OutputData+0xd74>)
 8001fe8:	f00c f982 	bl	800e2f0 <fmod>
 8001fec:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_h = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 8001ff0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	f00c ff56 	bl	800eeac <__aeabi_dcmplt>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d012      	beq.n	800202c <FUNC_OutputData+0xc44>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 8002006:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800200a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800200e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002012:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002016:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800201a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800201e:	f00c ff6d 	bl	800eefc <__aeabi_d2uiz>
 8002022:	4603      	mov	r3, r0
 8002024:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10_h = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 8002026:	425b      	negs	r3, r3
 8002028:	b29b      	uxth	r3, r3
 800202a:	e005      	b.n	8002038 <FUNC_OutputData+0xc50>
 800202c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002030:	f00c ff64 	bl	800eefc <__aeabi_d2uiz>
 8002034:	4603      	mov	r3, r0
 8002036:	b29b      	uxth	r3, r3
 8002038:	4a45      	ldr	r2, [pc, #276]	; (8002150 <FUNC_OutputData+0xd68>)
 800203a:	f8a2 3648 	strh.w	r3, [r2, #1608]	; 0x648
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S75>/Data Type Conversion10' */

  /* DataStoreWrite: '<S65>/Data Store Write1' */
  VCU_DW.VAR_OUT_p_brake_F = VCU_B.DataTypeConversion10_h;
 800203e:	4b44      	ldr	r3, [pc, #272]	; (8002150 <FUNC_OutputData+0xd68>)
 8002040:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 8002044:	4a43      	ldr	r2, [pc, #268]	; (8002154 <FUNC_OutputData+0xd6c>)
 8002046:	f8a2 30a8 	strh.w	r3, [r2, #168]	; 0xa8

  /* Sum: '<S76>/Add1' */
  VCU_B.Add1_js = VCU_B.ABS_BL_switch;
 800204a:	4b41      	ldr	r3, [pc, #260]	; (8002150 <FUNC_OutputData+0xd68>)
 800204c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	493e      	ldr	r1, [pc, #248]	; (8002150 <FUNC_OutputData+0xd68>)
 8002056:	e9c1 23ce 	strd	r2, r3, [r1, #824]	; 0x338

  /* DataTypeConversion: '<S76>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_js);
 800205a:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <FUNC_OutputData+0xd68>)
 800205c:	e9d3 23ce 	ldrd	r2, r3, [r3, #824]	; 0x338
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	f00c f8bc 	bl	800e1e0 <floor>
 8002068:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 800206c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002070:	f004 f9aa 	bl	80063c8 <rtIsNaN>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <FUNC_OutputData+0xca0>
 800207a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800207e:	f004 f97f 	bl	8006380 <rtIsInf>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <FUNC_OutputData+0xcae>
    tmp = 0.0;
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002094:	e008      	b.n	80020a8 <FUNC_OutputData+0xcc0>
  } else {
    tmp = fmod(tmp, 256.0);
 8002096:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <FUNC_OutputData+0xd70>)
 80020a0:	f00c f926 	bl	800e2f0 <fmod>
 80020a4:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_ok = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 80020a8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	f00c fefa 	bl	800eeac <__aeabi_dcmplt>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d012      	beq.n	80020e4 <FUNC_OutputData+0xcfc>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 80020be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80020c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80020ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80020d2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80020d6:	f00c ff11 	bl	800eefc <__aeabi_d2uiz>
 80020da:	4603      	mov	r3, r0
 80020dc:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_ok = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 80020de:	425b      	negs	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	e005      	b.n	80020f0 <FUNC_OutputData+0xd08>
 80020e4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80020e8:	f00c ff08 	bl	800eefc <__aeabi_d2uiz>
 80020ec:	4603      	mov	r3, r0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	4a17      	ldr	r2, [pc, #92]	; (8002150 <FUNC_OutputData+0xd68>)
 80020f2:	f882 3697 	strb.w	r3, [r2, #1687]	; 0x697
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S76>/Data Type Conversion10' */

  /* DataStoreWrite: '<S65>/Data Store Write2' */
  VCU_DW.VAR_OUT_ABS_BL_switch = VCU_B.DataTypeConversion10_ok;
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <FUNC_OutputData+0xd68>)
 80020f8:	f893 3697 	ldrb.w	r3, [r3, #1687]	; 0x697
 80020fc:	4a15      	ldr	r2, [pc, #84]	; (8002154 <FUNC_OutputData+0xd6c>)
 80020fe:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107

  /* Sum: '<S77>/Add1' */
  VCU_B.Add1_ak = VCU_B.ABS_active;
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <FUNC_OutputData+0xd68>)
 8002104:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8002108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210c:	4910      	ldr	r1, [pc, #64]	; (8002150 <FUNC_OutputData+0xd68>)
 800210e:	e9c1 23d0 	strd	r2, r3, [r1, #832]	; 0x340

  /* DataTypeConversion: '<S77>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_ak);
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <FUNC_OutputData+0xd68>)
 8002114:	e9d3 23d0 	ldrd	r2, r3, [r3, #832]	; 0x340
 8002118:	4610      	mov	r0, r2
 800211a:	4619      	mov	r1, r3
 800211c:	f00c f860 	bl	800e1e0 <floor>
 8002120:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002124:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002128:	f004 f94e 	bl	80063c8 <rtIsNaN>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <FUNC_OutputData+0xd58>
 8002132:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002136:	f004 f923 	bl	8006380 <rtIsInf>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00f      	beq.n	8002160 <FUNC_OutputData+0xd78>
    tmp = 0.0;
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800214c:	e011      	b.n	8002172 <FUNC_OutputData+0xd8a>
 800214e:	bf00      	nop
 8002150:	200008c8 	.word	0x200008c8
 8002154:	20001058 	.word	0x20001058
 8002158:	40700000 	.word	0x40700000
 800215c:	40f00000 	.word	0x40f00000
  } else {
    tmp = fmod(tmp, 256.0);
 8002160:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	4ba1      	ldr	r3, [pc, #644]	; (80023f0 <FUNC_OutputData+0x1008>)
 800216a:	f00c f8c1 	bl	800e2f0 <fmod>
 800216e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_ah = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002172:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	f00c fe95 	bl	800eeac <__aeabi_dcmplt>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d012      	beq.n	80021ae <FUNC_OutputData+0xdc6>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8002188:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800218c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002194:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002198:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800219c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80021a0:	f00c feac 	bl	800eefc <__aeabi_d2uiz>
 80021a4:	4603      	mov	r3, r0
 80021a6:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_ah = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 80021a8:	425b      	negs	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	e005      	b.n	80021ba <FUNC_OutputData+0xdd2>
 80021ae:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80021b2:	f00c fea3 	bl	800eefc <__aeabi_d2uiz>
 80021b6:	4603      	mov	r3, r0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	4a8e      	ldr	r2, [pc, #568]	; (80023f4 <FUNC_OutputData+0x100c>)
 80021bc:	f882 3698 	strb.w	r3, [r2, #1688]	; 0x698
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S77>/Data Type Conversion10' */

  /* DataStoreWrite: '<S65>/Data Store Write3' */
  VCU_DW.VAR_OUT_ABS_active = VCU_B.DataTypeConversion10_ah;
 80021c0:	4b8c      	ldr	r3, [pc, #560]	; (80023f4 <FUNC_OutputData+0x100c>)
 80021c2:	f893 3698 	ldrb.w	r3, [r3, #1688]	; 0x698
 80021c6:	4a8c      	ldr	r2, [pc, #560]	; (80023f8 <FUNC_OutputData+0x1010>)
 80021c8:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108

  /* Sum: '<S78>/Add1' */
  VCU_B.Add1_n4 = VCU_B.ABS_EBD_Lamp;
 80021cc:	4b89      	ldr	r3, [pc, #548]	; (80023f4 <FUNC_OutputData+0x100c>)
 80021ce:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	4987      	ldr	r1, [pc, #540]	; (80023f4 <FUNC_OutputData+0x100c>)
 80021d8:	e9c1 23d2 	strd	r2, r3, [r1, #840]	; 0x348

  /* DataTypeConversion: '<S78>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_n4);
 80021dc:	4b85      	ldr	r3, [pc, #532]	; (80023f4 <FUNC_OutputData+0x100c>)
 80021de:	e9d3 23d2 	ldrd	r2, r3, [r3, #840]	; 0x348
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f00b fffb 	bl	800e1e0 <floor>
 80021ea:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 80021ee:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80021f2:	f004 f8e9 	bl	80063c8 <rtIsNaN>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d106      	bne.n	800220a <FUNC_OutputData+0xe22>
 80021fc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002200:	f004 f8be 	bl	8006380 <rtIsInf>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d006      	beq.n	8002218 <FUNC_OutputData+0xe30>
    tmp = 0.0;
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002216:	e008      	b.n	800222a <FUNC_OutputData+0xe42>
  } else {
    tmp = fmod(tmp, 256.0);
 8002218:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	4b73      	ldr	r3, [pc, #460]	; (80023f0 <FUNC_OutputData+0x1008>)
 8002222:	f00c f865 	bl	800e2f0 <fmod>
 8002226:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_d = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 800222a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	f00c fe39 	bl	800eeac <__aeabi_dcmplt>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d012      	beq.n	8002266 <FUNC_OutputData+0xe7e>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8002240:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002244:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800224c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002254:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002258:	f00c fe50 	bl	800eefc <__aeabi_d2uiz>
 800225c:	4603      	mov	r3, r0
 800225e:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_d = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002260:	425b      	negs	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	e005      	b.n	8002272 <FUNC_OutputData+0xe8a>
 8002266:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800226a:	f00c fe47 	bl	800eefc <__aeabi_d2uiz>
 800226e:	4603      	mov	r3, r0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	4a60      	ldr	r2, [pc, #384]	; (80023f4 <FUNC_OutputData+0x100c>)
 8002274:	f882 3699 	strb.w	r3, [r2, #1689]	; 0x699
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S78>/Data Type Conversion10' */

  /* DataStoreWrite: '<S65>/Data Store Write4' */
  VCU_DW.VAR_OUT_ABS_EBD_Lamp = VCU_B.DataTypeConversion10_d;
 8002278:	4b5e      	ldr	r3, [pc, #376]	; (80023f4 <FUNC_OutputData+0x100c>)
 800227a:	f893 3699 	ldrb.w	r3, [r3, #1689]	; 0x699
 800227e:	4a5e      	ldr	r2, [pc, #376]	; (80023f8 <FUNC_OutputData+0x1010>)
 8002280:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109

  /* Sum: '<S79>/Add1' */
  VCU_B.Add1_h = VCU_B.ABS_Lamp;
 8002284:	4b5b      	ldr	r3, [pc, #364]	; (80023f4 <FUNC_OutputData+0x100c>)
 8002286:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	4959      	ldr	r1, [pc, #356]	; (80023f4 <FUNC_OutputData+0x100c>)
 8002290:	e9c1 23d4 	strd	r2, r3, [r1, #848]	; 0x350

  /* DataTypeConversion: '<S79>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_h);
 8002294:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <FUNC_OutputData+0x100c>)
 8002296:	e9d3 23d4 	ldrd	r2, r3, [r3, #848]	; 0x350
 800229a:	4610      	mov	r0, r2
 800229c:	4619      	mov	r1, r3
 800229e:	f00b ff9f 	bl	800e1e0 <floor>
 80022a2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 80022a6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80022aa:	f004 f88d 	bl	80063c8 <rtIsNaN>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d106      	bne.n	80022c2 <FUNC_OutputData+0xeda>
 80022b4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80022b8:	f004 f862 	bl	8006380 <rtIsInf>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <FUNC_OutputData+0xee8>
    tmp = 0.0;
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80022ce:	e008      	b.n	80022e2 <FUNC_OutputData+0xefa>
  } else {
    tmp = fmod(tmp, 256.0);
 80022d0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	4b45      	ldr	r3, [pc, #276]	; (80023f0 <FUNC_OutputData+0x1008>)
 80022da:	f00c f809 	bl	800e2f0 <fmod>
 80022de:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_bd = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 80022e2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	f00c fddd 	bl	800eeac <__aeabi_dcmplt>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d010      	beq.n	800231a <FUNC_OutputData+0xf32>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 80022f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80022fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80022fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002302:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002306:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002308:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800230c:	f00c fdf6 	bl	800eefc <__aeabi_d2uiz>
 8002310:	4603      	mov	r3, r0
 8002312:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_bd = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002314:	425b      	negs	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	e005      	b.n	8002326 <FUNC_OutputData+0xf3e>
 800231a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800231e:	f00c fded 	bl	800eefc <__aeabi_d2uiz>
 8002322:	4603      	mov	r3, r0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	4a33      	ldr	r2, [pc, #204]	; (80023f4 <FUNC_OutputData+0x100c>)
 8002328:	f882 369a 	strb.w	r3, [r2, #1690]	; 0x69a
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S79>/Data Type Conversion10' */

  /* DataStoreWrite: '<S65>/Data Store Write5' */
  VCU_DW.VAR_OUT_ABS_Lamp = VCU_B.DataTypeConversion10_bd;
 800232c:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <FUNC_OutputData+0x100c>)
 800232e:	f893 369a 	ldrb.w	r3, [r3, #1690]	; 0x69a
 8002332:	4a31      	ldr	r2, [pc, #196]	; (80023f8 <FUNC_OutputData+0x1010>)
 8002334:	f882 310a 	strb.w	r3, [r2, #266]	; 0x10a

  /* Gain: '<S88>/Factor' */
  VCU_B.Factor_a = 10.0 * VCU_B.Saturation1_e;
 8002338:	4b2e      	ldr	r3, [pc, #184]	; (80023f4 <FUNC_OutputData+0x100c>)
 800233a:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <FUNC_OutputData+0x1014>)
 800234c:	f00c fb3c 	bl	800e9c8 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <FUNC_OutputData+0x100c>)
 800235a:	e9c3 01d6 	strd	r0, r1, [r3, #856]	; 0x358

  /* Sum: '<S88>/Add1' */
  VCU_B.Add1_lh = VCU_B.Factor_a;
 800235e:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <FUNC_OutputData+0x100c>)
 8002360:	e9d3 23d6 	ldrd	r2, r3, [r3, #856]	; 0x358
 8002364:	4923      	ldr	r1, [pc, #140]	; (80023f4 <FUNC_OutputData+0x100c>)
 8002366:	e9c1 23d8 	strd	r2, r3, [r1, #864]	; 0x360

  /* DataTypeConversion: '<S88>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_lh);
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <FUNC_OutputData+0x100c>)
 800236c:	e9d3 23d8 	ldrd	r2, r3, [r3, #864]	; 0x360
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	f00b ff34 	bl	800e1e0 <floor>
 8002378:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 800237c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002380:	f004 f822 	bl	80063c8 <rtIsNaN>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <FUNC_OutputData+0xfb0>
 800238a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800238e:	f003 fff7 	bl	8006380 <rtIsInf>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d006      	beq.n	80023a6 <FUNC_OutputData+0xfbe>
    tmp = 0.0;
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80023a4:	e008      	b.n	80023b8 <FUNC_OutputData+0xfd0>
  } else {
    tmp = fmod(tmp, 65536.0);
 80023a6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <FUNC_OutputData+0x1018>)
 80023b0:	f00b ff9e 	bl	800e2f0 <fmod>
 80023b4:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_m = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80023b8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	f00c fd72 	bl	800eeac <__aeabi_dcmplt>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01a      	beq.n	8002404 <FUNC_OutputData+0x101c>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 80023ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80023d2:	673b      	str	r3, [r7, #112]	; 0x70
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023dc:	677b      	str	r3, [r7, #116]	; 0x74
 80023de:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80023e2:	f00c fd8b 	bl	800eefc <__aeabi_d2uiz>
 80023e6:	4603      	mov	r3, r0
 80023e8:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10_m = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80023ea:	425b      	negs	r3, r3
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	e00f      	b.n	8002410 <FUNC_OutputData+0x1028>
 80023f0:	40700000 	.word	0x40700000
 80023f4:	200008c8 	.word	0x200008c8
 80023f8:	20001058 	.word	0x20001058
 80023fc:	40240000 	.word	0x40240000
 8002400:	40f00000 	.word	0x40f00000
 8002404:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002408:	f00c fd78 	bl	800eefc <__aeabi_d2uiz>
 800240c:	4603      	mov	r3, r0
 800240e:	b29b      	uxth	r3, r3
 8002410:	4a9d      	ldr	r2, [pc, #628]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002412:	f8a2 364a 	strh.w	r3, [r2, #1610]	; 0x64a
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S88>/Data Type Conversion10' */

  /* DataStoreWrite: '<S67>/Data Store Write' */
  VCU_DW.VAR_OUT_f_FL = VCU_B.DataTypeConversion10_m;
 8002416:	4b9c      	ldr	r3, [pc, #624]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002418:	f8b3 364a 	ldrh.w	r3, [r3, #1610]	; 0x64a
 800241c:	4a9b      	ldr	r2, [pc, #620]	; (800268c <FUNC_OutputData+0x12a4>)
 800241e:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa

  /* Gain: '<S89>/Factor' */
  VCU_B.Factor_i = 10.0 * VCU_B.Saturation1_n;
 8002422:	4b99      	ldr	r3, [pc, #612]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002424:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	4b96      	ldr	r3, [pc, #600]	; (8002690 <FUNC_OutputData+0x12a8>)
 8002436:	f00c fac7 	bl	800e9c8 <__aeabi_dmul>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	4b91      	ldr	r3, [pc, #580]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002444:	e9c3 01da 	strd	r0, r1, [r3, #872]	; 0x368

  /* Sum: '<S89>/Add1' */
  VCU_B.Add1_bqm = VCU_B.Factor_i;
 8002448:	4b8f      	ldr	r3, [pc, #572]	; (8002688 <FUNC_OutputData+0x12a0>)
 800244a:	e9d3 23da 	ldrd	r2, r3, [r3, #872]	; 0x368
 800244e:	498e      	ldr	r1, [pc, #568]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002450:	e9c1 23dc 	strd	r2, r3, [r1, #880]	; 0x370

  /* DataTypeConversion: '<S89>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_bqm);
 8002454:	4b8c      	ldr	r3, [pc, #560]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002456:	e9d3 23dc 	ldrd	r2, r3, [r3, #880]	; 0x370
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	f00b febf 	bl	800e1e0 <floor>
 8002462:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002466:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800246a:	f003 ffad 	bl	80063c8 <rtIsNaN>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d106      	bne.n	8002482 <FUNC_OutputData+0x109a>
 8002474:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002478:	f003 ff82 	bl	8006380 <rtIsInf>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <FUNC_OutputData+0x10a8>
    tmp = 0.0;
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800248e:	e008      	b.n	80024a2 <FUNC_OutputData+0x10ba>
  } else {
    tmp = fmod(tmp, 65536.0);
 8002490:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	4b7e      	ldr	r3, [pc, #504]	; (8002694 <FUNC_OutputData+0x12ac>)
 800249a:	f00b ff29 	bl	800e2f0 <fmod>
 800249e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_f = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80024a2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	f00c fcfd 	bl	800eeac <__aeabi_dcmplt>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d010      	beq.n	80024da <FUNC_OutputData+0x10f2>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 80024b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80024bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80024be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80024c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024cc:	f00c fd16 	bl	800eefc <__aeabi_d2uiz>
 80024d0:	4603      	mov	r3, r0
 80024d2:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10_f = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80024d4:	425b      	negs	r3, r3
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	e005      	b.n	80024e6 <FUNC_OutputData+0x10fe>
 80024da:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80024de:	f00c fd0d 	bl	800eefc <__aeabi_d2uiz>
 80024e2:	4603      	mov	r3, r0
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	4a68      	ldr	r2, [pc, #416]	; (8002688 <FUNC_OutputData+0x12a0>)
 80024e8:	f8a2 364c 	strh.w	r3, [r2, #1612]	; 0x64c
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S89>/Data Type Conversion10' */

  /* DataStoreWrite: '<S67>/Data Store Write1' */
  VCU_DW.VAR_OUT_f_FR = VCU_B.DataTypeConversion10_f;
 80024ec:	4b66      	ldr	r3, [pc, #408]	; (8002688 <FUNC_OutputData+0x12a0>)
 80024ee:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 80024f2:	4a66      	ldr	r2, [pc, #408]	; (800268c <FUNC_OutputData+0x12a4>)
 80024f4:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac

  /* Gain: '<S90>/Factor' */
  VCU_B.Factor_jn = 10.0 * VCU_B.Saturation1_o;
 80024f8:	4b63      	ldr	r3, [pc, #396]	; (8002688 <FUNC_OutputData+0x12a0>)
 80024fa:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	4b61      	ldr	r3, [pc, #388]	; (8002690 <FUNC_OutputData+0x12a8>)
 800250c:	f00c fa5c 	bl	800e9c8 <__aeabi_dmul>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	4b5b      	ldr	r3, [pc, #364]	; (8002688 <FUNC_OutputData+0x12a0>)
 800251a:	e9c3 01de 	strd	r0, r1, [r3, #888]	; 0x378

  /* Sum: '<S90>/Add1' */
  VCU_B.Add1_iv = VCU_B.Factor_jn;
 800251e:	4b5a      	ldr	r3, [pc, #360]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002520:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 8002524:	4958      	ldr	r1, [pc, #352]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002526:	e9c1 23e0 	strd	r2, r3, [r1, #896]	; 0x380

  /* DataTypeConversion: '<S90>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_iv);
 800252a:	4b57      	ldr	r3, [pc, #348]	; (8002688 <FUNC_OutputData+0x12a0>)
 800252c:	e9d3 23e0 	ldrd	r2, r3, [r3, #896]	; 0x380
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	f00b fe54 	bl	800e1e0 <floor>
 8002538:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 800253c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002540:	f003 ff42 	bl	80063c8 <rtIsNaN>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <FUNC_OutputData+0x1170>
 800254a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800254e:	f003 ff17 	bl	8006380 <rtIsInf>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <FUNC_OutputData+0x117e>
    tmp = 0.0;
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002564:	e008      	b.n	8002578 <FUNC_OutputData+0x1190>
  } else {
    tmp = fmod(tmp, 65536.0);
 8002566:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	4b49      	ldr	r3, [pc, #292]	; (8002694 <FUNC_OutputData+0x12ac>)
 8002570:	f00b febe 	bl	800e2f0 <fmod>
 8002574:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_a = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 8002578:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	f00c fc92 	bl	800eeac <__aeabi_dcmplt>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d010      	beq.n	80025b0 <FUNC_OutputData+0x11c8>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 800258e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002592:	663b      	str	r3, [r7, #96]	; 0x60
 8002594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002598:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800259c:	667b      	str	r3, [r7, #100]	; 0x64
 800259e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80025a2:	f00c fcab 	bl	800eefc <__aeabi_d2uiz>
 80025a6:	4603      	mov	r3, r0
 80025a8:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10_a = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80025aa:	425b      	negs	r3, r3
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	e005      	b.n	80025bc <FUNC_OutputData+0x11d4>
 80025b0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80025b4:	f00c fca2 	bl	800eefc <__aeabi_d2uiz>
 80025b8:	4603      	mov	r3, r0
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4a32      	ldr	r2, [pc, #200]	; (8002688 <FUNC_OutputData+0x12a0>)
 80025be:	f8a2 364e 	strh.w	r3, [r2, #1614]	; 0x64e
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S90>/Data Type Conversion10' */

  /* DataStoreWrite: '<S67>/Data Store Write2' */
  VCU_DW.VAR_OUT_f_RL = VCU_B.DataTypeConversion10_a;
 80025c2:	4b31      	ldr	r3, [pc, #196]	; (8002688 <FUNC_OutputData+0x12a0>)
 80025c4:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 80025c8:	4a30      	ldr	r2, [pc, #192]	; (800268c <FUNC_OutputData+0x12a4>)
 80025ca:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae

  /* Gain: '<S91>/Factor' */
  VCU_B.Factor_h0 = 10.0 * VCU_B.Saturation1_h;
 80025ce:	4b2e      	ldr	r3, [pc, #184]	; (8002688 <FUNC_OutputData+0x12a0>)
 80025d0:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <FUNC_OutputData+0x12a8>)
 80025e2:	f00c f9f1 	bl	800e9c8 <__aeabi_dmul>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	4b26      	ldr	r3, [pc, #152]	; (8002688 <FUNC_OutputData+0x12a0>)
 80025f0:	e9c3 01e2 	strd	r0, r1, [r3, #904]	; 0x388

  /* Sum: '<S91>/Add1' */
  VCU_B.Add1_i1 = VCU_B.Factor_h0;
 80025f4:	4b24      	ldr	r3, [pc, #144]	; (8002688 <FUNC_OutputData+0x12a0>)
 80025f6:	e9d3 23e2 	ldrd	r2, r3, [r3, #904]	; 0x388
 80025fa:	4923      	ldr	r1, [pc, #140]	; (8002688 <FUNC_OutputData+0x12a0>)
 80025fc:	e9c1 23e4 	strd	r2, r3, [r1, #912]	; 0x390

  /* DataTypeConversion: '<S91>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_i1);
 8002600:	4b21      	ldr	r3, [pc, #132]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002602:	e9d3 23e4 	ldrd	r2, r3, [r3, #912]	; 0x390
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	f00b fde9 	bl	800e1e0 <floor>
 800260e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002612:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002616:	f003 fed7 	bl	80063c8 <rtIsNaN>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d106      	bne.n	800262e <FUNC_OutputData+0x1246>
 8002620:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002624:	f003 feac 	bl	8006380 <rtIsInf>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <FUNC_OutputData+0x1254>
    tmp = 0.0;
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800263a:	e008      	b.n	800264e <FUNC_OutputData+0x1266>
  } else {
    tmp = fmod(tmp, 65536.0);
 800263c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <FUNC_OutputData+0x12ac>)
 8002646:	f00b fe53 	bl	800e2f0 <fmod>
 800264a:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_n = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 800264e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	f00c fc27 	bl	800eeac <__aeabi_dcmplt>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d019      	beq.n	8002698 <FUNC_OutputData+0x12b0>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 8002664:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002668:	65bb      	str	r3, [r7, #88]	; 0x58
 800266a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002672:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002674:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002678:	f00c fc40 	bl	800eefc <__aeabi_d2uiz>
 800267c:	4603      	mov	r3, r0
 800267e:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10_n = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 8002680:	425b      	negs	r3, r3
 8002682:	b29b      	uxth	r3, r3
 8002684:	e00e      	b.n	80026a4 <FUNC_OutputData+0x12bc>
 8002686:	bf00      	nop
 8002688:	200008c8 	.word	0x200008c8
 800268c:	20001058 	.word	0x20001058
 8002690:	40240000 	.word	0x40240000
 8002694:	40f00000 	.word	0x40f00000
 8002698:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800269c:	f00c fc2e 	bl	800eefc <__aeabi_d2uiz>
 80026a0:	4603      	mov	r3, r0
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	4aa0      	ldr	r2, [pc, #640]	; (8002928 <FUNC_OutputData+0x1540>)
 80026a6:	f8a2 3650 	strh.w	r3, [r2, #1616]	; 0x650
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S91>/Data Type Conversion10' */

  /* DataStoreWrite: '<S67>/Data Store Write3' */
  VCU_DW.VAR_OUT_f_RR = VCU_B.DataTypeConversion10_n;
 80026aa:	4b9f      	ldr	r3, [pc, #636]	; (8002928 <FUNC_OutputData+0x1540>)
 80026ac:	f8b3 3650 	ldrh.w	r3, [r3, #1616]	; 0x650
 80026b0:	4a9e      	ldr	r2, [pc, #632]	; (800292c <FUNC_OutputData+0x1544>)
 80026b2:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0

  /* Gain: '<S92>/Factor' */
  VCU_B.Factor_dd = 1.3 * VCU_B.x_RH_RL;
 80026b6:	4b9c      	ldr	r3, [pc, #624]	; (8002928 <FUNC_OutputData+0x1540>)
 80026b8:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	a396      	add	r3, pc, #600	; (adr r3, 8002920 <FUNC_OutputData+0x1538>)
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	f00c f97d 	bl	800e9c8 <__aeabi_dmul>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	4b94      	ldr	r3, [pc, #592]	; (8002928 <FUNC_OutputData+0x1540>)
 80026d8:	e9c3 01e6 	strd	r0, r1, [r3, #920]	; 0x398

  /* Sum: '<S92>/Add1' */
  VCU_B.Add1_ai = VCU_B.Factor_dd;
 80026dc:	4b92      	ldr	r3, [pc, #584]	; (8002928 <FUNC_OutputData+0x1540>)
 80026de:	e9d3 23e6 	ldrd	r2, r3, [r3, #920]	; 0x398
 80026e2:	4991      	ldr	r1, [pc, #580]	; (8002928 <FUNC_OutputData+0x1540>)
 80026e4:	e9c1 23e8 	strd	r2, r3, [r1, #928]	; 0x3a0

  /* DataTypeConversion: '<S92>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_ai);
 80026e8:	4b8f      	ldr	r3, [pc, #572]	; (8002928 <FUNC_OutputData+0x1540>)
 80026ea:	e9d3 23e8 	ldrd	r2, r3, [r3, #928]	; 0x3a0
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	f00b fd75 	bl	800e1e0 <floor>
 80026f6:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 80026fa:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80026fe:	f003 fe63 	bl	80063c8 <rtIsNaN>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d106      	bne.n	8002716 <FUNC_OutputData+0x132e>
 8002708:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800270c:	f003 fe38 	bl	8006380 <rtIsInf>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d006      	beq.n	8002724 <FUNC_OutputData+0x133c>
    tmp = 0.0;
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002722:	e008      	b.n	8002736 <FUNC_OutputData+0x134e>
  } else {
    tmp = fmod(tmp, 256.0);
 8002724:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	4b80      	ldr	r3, [pc, #512]	; (8002930 <FUNC_OutputData+0x1548>)
 800272e:	f00b fddf 	bl	800e2f0 <fmod>
 8002732:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_px = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002736:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	f00c fbb3 	bl	800eeac <__aeabi_dcmplt>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d010      	beq.n	800276e <FUNC_OutputData+0x1386>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 800274c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002750:	653b      	str	r3, [r7, #80]	; 0x50
 8002752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002756:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800275a:	657b      	str	r3, [r7, #84]	; 0x54
 800275c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002760:	f00c fbcc 	bl	800eefc <__aeabi_d2uiz>
 8002764:	4603      	mov	r3, r0
 8002766:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_px = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002768:	425b      	negs	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	e005      	b.n	800277a <FUNC_OutputData+0x1392>
 800276e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002772:	f00c fbc3 	bl	800eefc <__aeabi_d2uiz>
 8002776:	4603      	mov	r3, r0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	4a6b      	ldr	r2, [pc, #428]	; (8002928 <FUNC_OutputData+0x1540>)
 800277c:	f882 369b 	strb.w	r3, [r2, #1691]	; 0x69b
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S92>/Data Type Conversion10' */

  /* DataStoreWrite: '<S68>/Data Store Write' */
  VCU_DW.VAR_OUT_x_RH_RL = VCU_B.DataTypeConversion10_px;
 8002780:	4b69      	ldr	r3, [pc, #420]	; (8002928 <FUNC_OutputData+0x1540>)
 8002782:	f893 369b 	ldrb.w	r3, [r3, #1691]	; 0x69b
 8002786:	4a69      	ldr	r2, [pc, #420]	; (800292c <FUNC_OutputData+0x1544>)
 8002788:	f882 310b 	strb.w	r3, [r2, #267]	; 0x10b

  /* Gain: '<S93>/Factor' */
  VCU_B.Factor_bc = 1.3 * VCU_B.x_RH_RR;
 800278c:	4b66      	ldr	r3, [pc, #408]	; (8002928 <FUNC_OutputData+0x1540>)
 800278e:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8002792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	a361      	add	r3, pc, #388	; (adr r3, 8002920 <FUNC_OutputData+0x1538>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f00c f912 	bl	800e9c8 <__aeabi_dmul>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	4b5e      	ldr	r3, [pc, #376]	; (8002928 <FUNC_OutputData+0x1540>)
 80027ae:	e9c3 01ea 	strd	r0, r1, [r3, #936]	; 0x3a8

  /* Sum: '<S93>/Add1' */
  VCU_B.Add1_o = VCU_B.Factor_bc;
 80027b2:	4b5d      	ldr	r3, [pc, #372]	; (8002928 <FUNC_OutputData+0x1540>)
 80027b4:	e9d3 23ea 	ldrd	r2, r3, [r3, #936]	; 0x3a8
 80027b8:	495b      	ldr	r1, [pc, #364]	; (8002928 <FUNC_OutputData+0x1540>)
 80027ba:	e9c1 23ec 	strd	r2, r3, [r1, #944]	; 0x3b0

  /* DataTypeConversion: '<S93>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_o);
 80027be:	4b5a      	ldr	r3, [pc, #360]	; (8002928 <FUNC_OutputData+0x1540>)
 80027c0:	e9d3 23ec 	ldrd	r2, r3, [r3, #944]	; 0x3b0
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	f00b fd0a 	bl	800e1e0 <floor>
 80027cc:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 80027d0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80027d4:	f003 fdf8 	bl	80063c8 <rtIsNaN>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <FUNC_OutputData+0x1404>
 80027de:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80027e2:	f003 fdcd 	bl	8006380 <rtIsInf>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <FUNC_OutputData+0x1412>
    tmp = 0.0;
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80027f8:	e008      	b.n	800280c <FUNC_OutputData+0x1424>
  } else {
    tmp = fmod(tmp, 256.0);
 80027fa:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	4b4b      	ldr	r3, [pc, #300]	; (8002930 <FUNC_OutputData+0x1548>)
 8002804:	f00b fd74 	bl	800e2f0 <fmod>
 8002808:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_ab = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 800280c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	f00c fb48 	bl	800eeac <__aeabi_dcmplt>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d010      	beq.n	8002844 <FUNC_OutputData+0x145c>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8002822:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002826:	64bb      	str	r3, [r7, #72]	; 0x48
 8002828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800282c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002832:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002836:	f00c fb61 	bl	800eefc <__aeabi_d2uiz>
 800283a:	4603      	mov	r3, r0
 800283c:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_ab = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 800283e:	425b      	negs	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	e005      	b.n	8002850 <FUNC_OutputData+0x1468>
 8002844:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002848:	f00c fb58 	bl	800eefc <__aeabi_d2uiz>
 800284c:	4603      	mov	r3, r0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4a35      	ldr	r2, [pc, #212]	; (8002928 <FUNC_OutputData+0x1540>)
 8002852:	f882 369c 	strb.w	r3, [r2, #1692]	; 0x69c
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S93>/Data Type Conversion10' */

  /* DataStoreWrite: '<S68>/Data Store Write1' */
  VCU_DW.VAR_OUT_x_RH_RR = VCU_B.DataTypeConversion10_ab;
 8002856:	4b34      	ldr	r3, [pc, #208]	; (8002928 <FUNC_OutputData+0x1540>)
 8002858:	f893 369c 	ldrb.w	r3, [r3, #1692]	; 0x69c
 800285c:	4a33      	ldr	r2, [pc, #204]	; (800292c <FUNC_OutputData+0x1544>)
 800285e:	f882 310c 	strb.w	r3, [r2, #268]	; 0x10c

  /* Gain: '<S94>/Factor' */
  VCU_B.Factor_f = 1.3 * VCU_B.x_RH_F;
 8002862:	4b31      	ldr	r3, [pc, #196]	; (8002928 <FUNC_OutputData+0x1540>)
 8002864:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	a32b      	add	r3, pc, #172	; (adr r3, 8002920 <FUNC_OutputData+0x1538>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	f00c f8a7 	bl	800e9c8 <__aeabi_dmul>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	4b29      	ldr	r3, [pc, #164]	; (8002928 <FUNC_OutputData+0x1540>)
 8002884:	e9c3 01ee 	strd	r0, r1, [r3, #952]	; 0x3b8

  /* Sum: '<S94>/Add1' */
  VCU_B.Add1_g = VCU_B.Factor_f;
 8002888:	4b27      	ldr	r3, [pc, #156]	; (8002928 <FUNC_OutputData+0x1540>)
 800288a:	e9d3 23ee 	ldrd	r2, r3, [r3, #952]	; 0x3b8
 800288e:	4926      	ldr	r1, [pc, #152]	; (8002928 <FUNC_OutputData+0x1540>)
 8002890:	e9c1 23f0 	strd	r2, r3, [r1, #960]	; 0x3c0

  /* DataTypeConversion: '<S94>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_g);
 8002894:	4b24      	ldr	r3, [pc, #144]	; (8002928 <FUNC_OutputData+0x1540>)
 8002896:	e9d3 23f0 	ldrd	r2, r3, [r3, #960]	; 0x3c0
 800289a:	4610      	mov	r0, r2
 800289c:	4619      	mov	r1, r3
 800289e:	f00b fc9f 	bl	800e1e0 <floor>
 80028a2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 80028a6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80028aa:	f003 fd8d 	bl	80063c8 <rtIsNaN>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d106      	bne.n	80028c2 <FUNC_OutputData+0x14da>
 80028b4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80028b8:	f003 fd62 	bl	8006380 <rtIsInf>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d006      	beq.n	80028d0 <FUNC_OutputData+0x14e8>
    tmp = 0.0;
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80028ce:	e008      	b.n	80028e2 <FUNC_OutputData+0x14fa>
  } else {
    tmp = fmod(tmp, 256.0);
 80028d0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	4b15      	ldr	r3, [pc, #84]	; (8002930 <FUNC_OutputData+0x1548>)
 80028da:	f00b fd09 	bl	800e2f0 <fmod>
 80028de:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_e = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 80028e2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	f00c fadd 	bl	800eeac <__aeabi_dcmplt>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01d      	beq.n	8002934 <FUNC_OutputData+0x154c>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 80028f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80028fc:	643b      	str	r3, [r7, #64]	; 0x40
 80028fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002902:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002906:	647b      	str	r3, [r7, #68]	; 0x44
 8002908:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800290c:	f00c faf6 	bl	800eefc <__aeabi_d2uiz>
 8002910:	4603      	mov	r3, r0
 8002912:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_e = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002914:	425b      	negs	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	e012      	b.n	8002940 <FUNC_OutputData+0x1558>
 800291a:	bf00      	nop
 800291c:	f3af 8000 	nop.w
 8002920:	cccccccd 	.word	0xcccccccd
 8002924:	3ff4cccc 	.word	0x3ff4cccc
 8002928:	200008c8 	.word	0x200008c8
 800292c:	20001058 	.word	0x20001058
 8002930:	40700000 	.word	0x40700000
 8002934:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002938:	f00c fae0 	bl	800eefc <__aeabi_d2uiz>
 800293c:	4603      	mov	r3, r0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4aa1      	ldr	r2, [pc, #644]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002942:	f882 369d 	strb.w	r3, [r2, #1693]	; 0x69d
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S94>/Data Type Conversion10' */

  /* DataStoreWrite: '<S68>/Data Store Write2' */
  VCU_DW.VAR_OUT_x_RH_F = VCU_B.DataTypeConversion10_e;
 8002946:	4ba0      	ldr	r3, [pc, #640]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002948:	f893 369d 	ldrb.w	r3, [r3, #1693]	; 0x69d
 800294c:	4a9f      	ldr	r2, [pc, #636]	; (8002bcc <FUNC_OutputData+0x17e4>)
 800294e:	f882 310d 	strb.w	r3, [r2, #269]	; 0x10d

  /* Gain: '<S95>/Factor' */
  VCU_B.Factor_o = 10.0 * VCU_B.x_clutch_b;
 8002952:	4b9d      	ldr	r3, [pc, #628]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002954:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8002958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	4b9a      	ldr	r3, [pc, #616]	; (8002bd0 <FUNC_OutputData+0x17e8>)
 8002966:	f00c f82f 	bl	800e9c8 <__aeabi_dmul>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	4b95      	ldr	r3, [pc, #596]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002974:	e9c3 01f2 	strd	r0, r1, [r3, #968]	; 0x3c8

  /* Sum: '<S95>/Add1' */
  VCU_B.Add1_id = VCU_B.Factor_o;
 8002978:	4b93      	ldr	r3, [pc, #588]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 800297a:	e9d3 23f2 	ldrd	r2, r3, [r3, #968]	; 0x3c8
 800297e:	4992      	ldr	r1, [pc, #584]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002980:	e9c1 23f4 	strd	r2, r3, [r1, #976]	; 0x3d0

  /* DataTypeConversion: '<S95>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_id);
 8002984:	4b90      	ldr	r3, [pc, #576]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002986:	e9d3 23f4 	ldrd	r2, r3, [r3, #976]	; 0x3d0
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	f00b fc27 	bl	800e1e0 <floor>
 8002992:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002996:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800299a:	f003 fd15 	bl	80063c8 <rtIsNaN>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d106      	bne.n	80029b2 <FUNC_OutputData+0x15ca>
 80029a4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80029a8:	f003 fcea 	bl	8006380 <rtIsInf>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d006      	beq.n	80029c0 <FUNC_OutputData+0x15d8>
    tmp = 0.0;
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80029be:	e008      	b.n	80029d2 <FUNC_OutputData+0x15ea>
  } else {
    tmp = fmod(tmp, 256.0);
 80029c0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	4b82      	ldr	r3, [pc, #520]	; (8002bd4 <FUNC_OutputData+0x17ec>)
 80029ca:	f00b fc91 	bl	800e2f0 <fmod>
 80029ce:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_g = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 80029d2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	f00c fa65 	bl	800eeac <__aeabi_dcmplt>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d010      	beq.n	8002a0a <FUNC_OutputData+0x1622>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 80029e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80029ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80029f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029f8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80029fc:	f00c fa7e 	bl	800eefc <__aeabi_d2uiz>
 8002a00:	4603      	mov	r3, r0
 8002a02:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_g = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002a04:	425b      	negs	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	e005      	b.n	8002a16 <FUNC_OutputData+0x162e>
 8002a0a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002a0e:	f00c fa75 	bl	800eefc <__aeabi_d2uiz>
 8002a12:	4603      	mov	r3, r0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	4a6c      	ldr	r2, [pc, #432]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002a18:	f882 369e 	strb.w	r3, [r2, #1694]	; 0x69e
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S95>/Data Type Conversion10' */

  /* DataStoreWrite: '<S68>/Data Store Write3' */
  VCU_DW.VAR_OUT_x_clutch = VCU_B.DataTypeConversion10_g;
 8002a1c:	4b6a      	ldr	r3, [pc, #424]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002a1e:	f893 369e 	ldrb.w	r3, [r3, #1694]	; 0x69e
 8002a22:	4a6a      	ldr	r2, [pc, #424]	; (8002bcc <FUNC_OutputData+0x17e4>)
 8002a24:	f882 310e 	strb.w	r3, [r2, #270]	; 0x10e

  /* Gain: '<S96>/Factor' */
  VCU_B.Factor_k = 10.0 * VCU_B.x_clutch_STW;
 8002a28:	4b67      	ldr	r3, [pc, #412]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002a2a:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8002a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	4b65      	ldr	r3, [pc, #404]	; (8002bd0 <FUNC_OutputData+0x17e8>)
 8002a3c:	f00b ffc4 	bl	800e9c8 <__aeabi_dmul>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	4b5f      	ldr	r3, [pc, #380]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002a4a:	e9c3 01f6 	strd	r0, r1, [r3, #984]	; 0x3d8

  /* Sum: '<S96>/Add1' */
  VCU_B.Add1_d = VCU_B.Factor_k;
 8002a4e:	4b5e      	ldr	r3, [pc, #376]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002a50:	e9d3 23f6 	ldrd	r2, r3, [r3, #984]	; 0x3d8
 8002a54:	495c      	ldr	r1, [pc, #368]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002a56:	e9c1 23f8 	strd	r2, r3, [r1, #992]	; 0x3e0

  /* DataTypeConversion: '<S96>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_d);
 8002a5a:	4b5b      	ldr	r3, [pc, #364]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002a5c:	e9d3 23f8 	ldrd	r2, r3, [r3, #992]	; 0x3e0
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	f00b fbbc 	bl	800e1e0 <floor>
 8002a68:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002a6c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002a70:	f003 fcaa 	bl	80063c8 <rtIsNaN>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <FUNC_OutputData+0x16a0>
 8002a7a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002a7e:	f003 fc7f 	bl	8006380 <rtIsInf>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d006      	beq.n	8002a96 <FUNC_OutputData+0x16ae>
    tmp = 0.0;
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002a94:	e008      	b.n	8002aa8 <FUNC_OutputData+0x16c0>
  } else {
    tmp = fmod(tmp, 256.0);
 8002a96:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	4b4d      	ldr	r3, [pc, #308]	; (8002bd4 <FUNC_OutputData+0x17ec>)
 8002aa0:	f00b fc26 	bl	800e2f0 <fmod>
 8002aa4:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_k = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002aa8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	f00c f9fa 	bl	800eeac <__aeabi_dcmplt>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d010      	beq.n	8002ae0 <FUNC_OutputData+0x16f8>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8002abe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ac2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ace:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002ad2:	f00c fa13 	bl	800eefc <__aeabi_d2uiz>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_k = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002ada:	425b      	negs	r3, r3
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e005      	b.n	8002aec <FUNC_OutputData+0x1704>
 8002ae0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002ae4:	f00c fa0a 	bl	800eefc <__aeabi_d2uiz>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	4a36      	ldr	r2, [pc, #216]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002aee:	f882 369f 	strb.w	r3, [r2, #1695]	; 0x69f
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S96>/Data Type Conversion10' */

  /* DataStoreWrite: '<S68>/Data Store Write4' */
  VCU_DW.VAR_OUT_x_clutch_STW = VCU_B.DataTypeConversion10_k;
 8002af2:	4b35      	ldr	r3, [pc, #212]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002af4:	f893 369f 	ldrb.w	r3, [r3, #1695]	; 0x69f
 8002af8:	4a34      	ldr	r2, [pc, #208]	; (8002bcc <FUNC_OutputData+0x17e4>)
 8002afa:	f882 310f 	strb.w	r3, [r2, #271]	; 0x10f

  /* Gain: '<S97>/Factor' */
  VCU_B.Factor_cv = 40960U * VCU_B.p_pneum;
 8002afe:	4b32      	ldr	r3, [pc, #200]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002b00:	f8b3 366a 	ldrh.w	r3, [r3, #1642]	; 0x66a
 8002b04:	461a      	mov	r2, r3
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	035b      	lsls	r3, r3, #13
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002b12:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628

  /* Sum: '<S97>/Add1' */
  VCU_B.Add1_a5 = (real_T)VCU_B.Factor_cv * 5.9604644775390625E-8;
 8002b16:	4b2c      	ldr	r3, [pc, #176]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002b18:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f00b fedd 	bl	800e8dc <__aeabi_ui2d>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	4b2a      	ldr	r3, [pc, #168]	; (8002bd8 <FUNC_OutputData+0x17f0>)
 8002b30:	f00b ff4a 	bl	800e9c8 <__aeabi_dmul>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002b3e:	e9c3 01fa 	strd	r0, r1, [r3, #1000]	; 0x3e8

  /* DataTypeConversion: '<S97>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_a5);
 8002b42:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002b44:	e9d3 23fa 	ldrd	r2, r3, [r3, #1000]	; 0x3e8
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f00b fb48 	bl	800e1e0 <floor>
 8002b50:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002b54:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002b58:	f003 fc36 	bl	80063c8 <rtIsNaN>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <FUNC_OutputData+0x1788>
 8002b62:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002b66:	f003 fc0b 	bl	8006380 <rtIsInf>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d006      	beq.n	8002b7e <FUNC_OutputData+0x1796>
    tmp = 0.0;
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002b7c:	e008      	b.n	8002b90 <FUNC_OutputData+0x17a8>
  } else {
    tmp = fmod(tmp, 256.0);
 8002b7e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <FUNC_OutputData+0x17ec>)
 8002b88:	f00b fbb2 	bl	800e2f0 <fmod>
 8002b8c:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_p5 = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002b90:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	f00c f986 	bl	800eeac <__aeabi_dcmplt>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d01a      	beq.n	8002bdc <FUNC_OutputData+0x17f4>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8002ba6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bba:	f00c f99f 	bl	800eefc <__aeabi_d2uiz>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_p5 = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002bc2:	425b      	negs	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e00f      	b.n	8002be8 <FUNC_OutputData+0x1800>
 8002bc8:	200008c8 	.word	0x200008c8
 8002bcc:	20001058 	.word	0x20001058
 8002bd0:	40240000 	.word	0x40240000
 8002bd4:	40700000 	.word	0x40700000
 8002bd8:	3e700000 	.word	0x3e700000
 8002bdc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002be0:	f00c f98c 	bl	800eefc <__aeabi_d2uiz>
 8002be4:	4603      	mov	r3, r0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	4a89      	ldr	r2, [pc, #548]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002bea:	f882 36a0 	strb.w	r3, [r2, #1696]	; 0x6a0
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S97>/Data Type Conversion10' */

  /* DataStoreWrite: '<S68>/Data Store Write5' */
  VCU_DW.VAR_OUT_p_pneum = VCU_B.DataTypeConversion10_p5;
 8002bee:	4b88      	ldr	r3, [pc, #544]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002bf0:	f893 26a0 	ldrb.w	r2, [r3, #1696]	; 0x6a0
 8002bf4:	4b87      	ldr	r3, [pc, #540]	; (8002e14 <FUNC_OutputData+0x1a2c>)
 8002bf6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

  /* Gain: '<S98>/Factor' */
  VCU_B.Factor_nt = 10.0 * VCU_B.U_Bat;
 8002bfa:	4b85      	ldr	r3, [pc, #532]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002bfc:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	4610      	mov	r0, r2
 8002c06:	4619      	mov	r1, r3
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	4b82      	ldr	r3, [pc, #520]	; (8002e18 <FUNC_OutputData+0x1a30>)
 8002c0e:	f00b fedb 	bl	800e9c8 <__aeabi_dmul>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	497e      	ldr	r1, [pc, #504]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002c18:	e9c1 23fc 	strd	r2, r3, [r1, #1008]	; 0x3f0

  /* Sum: '<S98>/Add1' */
  VCU_B.Add1_ph = VCU_B.Factor_nt;
 8002c1c:	4b7c      	ldr	r3, [pc, #496]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002c1e:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8002c22:	497b      	ldr	r1, [pc, #492]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002c24:	e9c1 23fe 	strd	r2, r3, [r1, #1016]	; 0x3f8

  /* DataTypeConversion: '<S98>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_ph);
 8002c28:	4b79      	ldr	r3, [pc, #484]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002c2a:	e9d3 23fe 	ldrd	r2, r3, [r3, #1016]	; 0x3f8
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	f00b fad5 	bl	800e1e0 <floor>
 8002c36:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002c3a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002c3e:	f003 fbc3 	bl	80063c8 <rtIsNaN>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <FUNC_OutputData+0x186e>
 8002c48:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002c4c:	f003 fb98 	bl	8006380 <rtIsInf>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <FUNC_OutputData+0x187c>
    tmp = 0.0;
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002c62:	e008      	b.n	8002c76 <FUNC_OutputData+0x188e>
  } else {
    tmp = fmod(tmp, 256.0);
 8002c64:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	4b6b      	ldr	r3, [pc, #428]	; (8002e1c <FUNC_OutputData+0x1a34>)
 8002c6e:	f00b fb3f 	bl	800e2f0 <fmod>
 8002c72:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_bm = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002c76:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	f00c f913 	bl	800eeac <__aeabi_dcmplt>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d010      	beq.n	8002cae <FUNC_OutputData+0x18c6>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8002c8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002c90:	623b      	str	r3, [r7, #32]
 8002c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c96:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ca0:	f00c f92c 	bl	800eefc <__aeabi_d2uiz>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_bm = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002ca8:	425b      	negs	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	e005      	b.n	8002cba <FUNC_OutputData+0x18d2>
 8002cae:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002cb2:	f00c f923 	bl	800eefc <__aeabi_d2uiz>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	4a55      	ldr	r2, [pc, #340]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002cbc:	f882 36a1 	strb.w	r3, [r2, #1697]	; 0x6a1
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S98>/Data Type Conversion10' */

  /* DataStoreWrite: '<S68>/Data Store Write6' */
  VCU_DW.VAR_OUT_U_Bat = VCU_B.DataTypeConversion10_bm;
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002cc2:	f893 26a1 	ldrb.w	r2, [r3, #1697]	; 0x6a1
 8002cc6:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <FUNC_OutputData+0x1a2c>)
 8002cc8:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111

  /* Sum: '<S106>/Add1' */
  VCU_B.Add1_jp = VCU_B.Saturation;
 8002ccc:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002cce:	e9d3 2396 	ldrd	r2, r3, [r3, #600]	; 0x258
 8002cd2:	494f      	ldr	r1, [pc, #316]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002cd4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002cd8:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreWrite: '<S69>/Data Store Write' */
  VCU_DW.VAR_OUT_Fans_active = VCU_B.Add1_jp;
 8002cdc:	4b4c      	ldr	r3, [pc, #304]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	494b      	ldr	r1, [pc, #300]	; (8002e14 <FUNC_OutputData+0x1a2c>)
 8002ce8:	e9c1 2308 	strd	r2, r3, [r1, #32]

  /* DataStoreWrite: '<S69>/Data Store Write1' */
  VCU_DW.VAR_OUT_Waterpump_active = VCU_ConstB.Add1;
 8002cec:	4b4c      	ldr	r3, [pc, #304]	; (8002e20 <FUNC_OutputData+0x1a38>)
 8002cee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002cf2:	4948      	ldr	r1, [pc, #288]	; (8002e14 <FUNC_OutputData+0x1a2c>)
 8002cf4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

  /* RelationalOperator: '<S109>/Compare' incorporates:
   *  Constant: '<S109>/Constant'
   */
  VCU_B.Compare_mi = (VCU_B.VOVG_ShiftUp > 0.0);
 8002cf8:	4b45      	ldr	r3, [pc, #276]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfe:	2101      	movs	r1, #1
 8002d00:	460c      	mov	r4, r1
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	f00c f8eb 	bl	800eee8 <__aeabi_dcmpgt>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <FUNC_OutputData+0x1934>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	461c      	mov	r4, r3
 8002d1c:	b2e3      	uxtb	r3, r4
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002d22:	f883 2779 	strb.w	r2, [r3, #1913]	; 0x779

  /* DataStoreWrite: '<S63>/Data Store Write' */
  VCU_DW.VAR_OUT_VOVG_ShiftUp = VCU_B.Compare_mi;
 8002d26:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002d28:	f893 2779 	ldrb.w	r2, [r3, #1913]	; 0x779
 8002d2c:	4b39      	ldr	r3, [pc, #228]	; (8002e14 <FUNC_OutputData+0x1a2c>)
 8002d2e:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146

  /* RelationalOperator: '<S110>/Compare' incorporates:
   *  Constant: '<S110>/Constant'
   */
  VCU_B.Compare_ek = (VCU_B.VOVG_ShiftDown > 0.0);
 8002d32:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002d34:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d38:	2101      	movs	r1, #1
 8002d3a:	460c      	mov	r4, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	f00c f8ce 	bl	800eee8 <__aeabi_dcmpgt>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <FUNC_OutputData+0x196e>
 8002d52:	2300      	movs	r3, #0
 8002d54:	461c      	mov	r4, r3
 8002d56:	b2e3      	uxtb	r3, r4
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002d5c:	f883 277a 	strb.w	r2, [r3, #1914]	; 0x77a

  /* DataStoreWrite: '<S63>/Data Store Write1' */
  VCU_DW.VAR_OUT_VOVG_ShiftDown = VCU_B.Compare_ek;
 8002d60:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002d62:	f893 277a 	ldrb.w	r2, [r3, #1914]	; 0x77a
 8002d66:	4b2b      	ldr	r3, [pc, #172]	; (8002e14 <FUNC_OutputData+0x1a2c>)
 8002d68:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

  /* Gain: '<S63>/Gain4' */
  tmp = floor(65535.0 * VCU_B.Saturation);
 8002d6c:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002d6e:	e9d3 2396 	ldrd	r2, r3, [r3, #600]	; 0x258
 8002d72:	4610      	mov	r0, r2
 8002d74:	4619      	mov	r1, r3
 8002d76:	a324      	add	r3, pc, #144	; (adr r3, 8002e08 <FUNC_OutputData+0x1a20>)
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	f00b fe24 	bl	800e9c8 <__aeabi_dmul>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	f00b fa2a 	bl	800e1e0 <floor>
 8002d8c:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002d90:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002d94:	f003 fb18 	bl	80063c8 <rtIsNaN>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <FUNC_OutputData+0x19c4>
 8002d9e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002da2:	f003 faed 	bl	8006380 <rtIsInf>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d006      	beq.n	8002dba <FUNC_OutputData+0x19d2>
    tmp = 0.0;
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002db8:	e008      	b.n	8002dcc <FUNC_OutputData+0x19e4>
  } else {
    tmp = fmod(tmp, 65536.0);
 8002dba:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <FUNC_OutputData+0x1a3c>)
 8002dc4:	f00b fa94 	bl	800e2f0 <fmod>
 8002dc8:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.Gain4_f = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)
 8002dcc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	f00c f868 	bl	800eeac <__aeabi_dcmplt>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d022      	beq.n	8002e28 <FUNC_OutputData+0x1a40>
    -tmp : (int32_T)(uint16_T)tmp);
 8002de2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002df0:	61fb      	str	r3, [r7, #28]
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.Gain4_f = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)
 8002df2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002df6:	f00c f881 	bl	800eefc <__aeabi_d2uiz>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	425b      	negs	r3, r3
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	e017      	b.n	8002e34 <FUNC_OutputData+0x1a4c>
 8002e04:	f3af 8000 	nop.w
 8002e08:	00000000 	.word	0x00000000
 8002e0c:	40efffe0 	.word	0x40efffe0
 8002e10:	200008c8 	.word	0x200008c8
 8002e14:	20001058 	.word	0x20001058
 8002e18:	40240000 	.word	0x40240000
 8002e1c:	40700000 	.word	0x40700000
 8002e20:	0800f130 	.word	0x0800f130
 8002e24:	40f00000 	.word	0x40f00000
 8002e28:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002e2c:	f00c f866 	bl	800eefc <__aeabi_d2uiz>
 8002e30:	4603      	mov	r3, r0
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	4aaa      	ldr	r2, [pc, #680]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002e36:	f8a2 3652 	strh.w	r3, [r2, #1618]	; 0x652
    -tmp : (int32_T)(uint16_T)tmp);

  /* End of Gain: '<S63>/Gain4' */

  /* DataStoreWrite: '<S63>/Data Store Write10' */
  VCU_DW.VAR_OUT_Fans2_PWM_active = VCU_B.Gain4_f;
 8002e3a:	4ba9      	ldr	r3, [pc, #676]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002e3c:	f8b3 2652 	ldrh.w	r2, [r3, #1618]	; 0x652
 8002e40:	4ba8      	ldr	r3, [pc, #672]	; (80030e4 <FUNC_OutputData+0x1cfc>)
 8002e42:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

  /* RelationalOperator: '<S113>/Compare' incorporates:
   *  Constant: '<S113>/Constant'
   */
  VCU_B.Compare_pr = (VCU_B.Ignition_Cut > 0.0);
 8002e46:	4ba6      	ldr	r3, [pc, #664]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002e48:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	460c      	mov	r4, r1
 8002e50:	4610      	mov	r0, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	f00c f844 	bl	800eee8 <__aeabi_dcmpgt>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <FUNC_OutputData+0x1a82>
 8002e66:	2300      	movs	r3, #0
 8002e68:	461c      	mov	r4, r3
 8002e6a:	b2e3      	uxtb	r3, r4
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b9c      	ldr	r3, [pc, #624]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002e70:	f883 277b 	strb.w	r2, [r3, #1915]	; 0x77b

  /* DataStoreWrite: '<S63>/Data Store Write2' */
  VCU_DW.VAR_OUT_Ignition_Cut = VCU_B.Compare_pr;
 8002e74:	4b9a      	ldr	r3, [pc, #616]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002e76:	f893 277b 	ldrb.w	r2, [r3, #1915]	; 0x77b
 8002e7a:	4b9a      	ldr	r3, [pc, #616]	; (80030e4 <FUNC_OutputData+0x1cfc>)
 8002e7c:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149

  /* RelationalOperator: '<S111>/Compare' incorporates:
   *  Constant: '<S111>/Constant'
   */
  VCU_B.Compare_d3 = (VCU_B.VOVG_IN > 0.0);
 8002e80:	4b97      	ldr	r3, [pc, #604]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002e82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e86:	2101      	movs	r1, #1
 8002e88:	460c      	mov	r4, r1
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	f00c f827 	bl	800eee8 <__aeabi_dcmpgt>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <FUNC_OutputData+0x1abc>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	461c      	mov	r4, r3
 8002ea4:	b2e3      	uxtb	r3, r4
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b8d      	ldr	r3, [pc, #564]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002eaa:	f883 277c 	strb.w	r2, [r3, #1916]	; 0x77c

  /* DataStoreWrite: '<S63>/Data Store Write3' */
  VCU_DW.VAR_OUT_VOVG_IN = VCU_B.Compare_d3;
 8002eae:	4b8c      	ldr	r3, [pc, #560]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002eb0:	f893 277c 	ldrb.w	r2, [r3, #1916]	; 0x77c
 8002eb4:	4b8b      	ldr	r3, [pc, #556]	; (80030e4 <FUNC_OutputData+0x1cfc>)
 8002eb6:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a

  /* RelationalOperator: '<S112>/Compare' incorporates:
   *  Constant: '<S112>/Constant'
   */
  VCU_B.Compare_bb = (VCU_B.VOVG_OUT > 0.0);
 8002eba:	4b89      	ldr	r3, [pc, #548]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002ebc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	460c      	mov	r4, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	f00c f80a 	bl	800eee8 <__aeabi_dcmpgt>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <FUNC_OutputData+0x1af6>
 8002eda:	2300      	movs	r3, #0
 8002edc:	461c      	mov	r4, r3
 8002ede:	b2e3      	uxtb	r3, r4
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b7f      	ldr	r3, [pc, #508]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002ee4:	f883 277d 	strb.w	r2, [r3, #1917]	; 0x77d

  /* DataStoreWrite: '<S63>/Data Store Write4' */
  VCU_DW.VAR_OUT_VOVG_OUT = VCU_B.Compare_bb;
 8002ee8:	4b7d      	ldr	r3, [pc, #500]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002eea:	f893 277d 	ldrb.w	r2, [r3, #1917]	; 0x77d
 8002eee:	4b7d      	ldr	r3, [pc, #500]	; (80030e4 <FUNC_OutputData+0x1cfc>)
 8002ef0:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b

  /* Saturate: '<S63>/Saturation1' */
  if (VCU_B.MHJ9_IN > 1.0) {
 8002ef4:	4b7a      	ldr	r3, [pc, #488]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002ef6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	4b79      	ldr	r3, [pc, #484]	; (80030e8 <FUNC_OutputData+0x1d00>)
 8002f04:	f00b fff0 	bl	800eee8 <__aeabi_dcmpgt>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <FUNC_OutputData+0x1b38>
    VCU_B.Saturation1 = 1.0;
 8002f0e:	4b74      	ldr	r3, [pc, #464]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002f10:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	4b73      	ldr	r3, [pc, #460]	; (80030e8 <FUNC_OutputData+0x1d00>)
 8002f1a:	e9c1 2300 	strd	r2, r3, [r1]
 8002f1e:	e01f      	b.n	8002f60 <FUNC_OutputData+0x1b78>
  } else if (VCU_B.MHJ9_IN < 0.0) {
 8002f20:	4b6f      	ldr	r3, [pc, #444]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002f22:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	f00b ffbb 	bl	800eeac <__aeabi_dcmplt>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d009      	beq.n	8002f50 <FUNC_OutputData+0x1b68>
    VCU_B.Saturation1 = 0.0;
 8002f3c:	4b68      	ldr	r3, [pc, #416]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002f3e:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	e9c1 2300 	strd	r2, r3, [r1]
 8002f4e:	e007      	b.n	8002f60 <FUNC_OutputData+0x1b78>
  } else {
    VCU_B.Saturation1 = VCU_B.MHJ9_IN;
 8002f50:	4b63      	ldr	r3, [pc, #396]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002f52:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002f56:	4962      	ldr	r1, [pc, #392]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002f58:	f501 6181 	add.w	r1, r1, #1032	; 0x408
 8002f5c:	e9c1 2300 	strd	r2, r3, [r1]
  }

  /* End of Saturate: '<S63>/Saturation1' */

  /* Gain: '<S63>/uint16 ' */
  tmp = floor(65535.0 * VCU_B.Saturation1);
 8002f60:	4b5f      	ldr	r3, [pc, #380]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002f62:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	a35a      	add	r3, pc, #360	; (adr r3, 80030d8 <FUNC_OutputData+0x1cf0>)
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	f00b fd28 	bl	800e9c8 <__aeabi_dmul>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	4619      	mov	r1, r3
 8002f80:	f00b f92e 	bl	800e1e0 <floor>
 8002f84:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002f88:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002f8c:	f003 fa1c 	bl	80063c8 <rtIsNaN>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <FUNC_OutputData+0x1bbc>
 8002f96:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002f9a:	f003 f9f1 	bl	8006380 <rtIsInf>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d006      	beq.n	8002fb2 <FUNC_OutputData+0x1bca>
    tmp = 0.0;
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002fb0:	e008      	b.n	8002fc4 <FUNC_OutputData+0x1bdc>
  } else {
    tmp = fmod(tmp, 65536.0);
 8002fb2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	4b4c      	ldr	r3, [pc, #304]	; (80030ec <FUNC_OutputData+0x1d04>)
 8002fbc:	f00b f998 	bl	800e2f0 <fmod>
 8002fc0:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.uint16 = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)
 8002fc4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	f00b ff6c 	bl	800eeac <__aeabi_dcmplt>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d010      	beq.n	8002ffc <FUNC_OutputData+0x1c14>
    -tmp : (int32_T)(uint16_T)tmp);
 8002fda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002fe8:	617b      	str	r3, [r7, #20]
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.uint16 = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)
 8002fea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fee:	f00b ff85 	bl	800eefc <__aeabi_d2uiz>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	425b      	negs	r3, r3
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	e005      	b.n	8003008 <FUNC_OutputData+0x1c20>
 8002ffc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003000:	f00b ff7c 	bl	800eefc <__aeabi_d2uiz>
 8003004:	4603      	mov	r3, r0
 8003006:	b29b      	uxth	r3, r3
 8003008:	4a35      	ldr	r2, [pc, #212]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 800300a:	f8a2 3654 	strh.w	r3, [r2, #1620]	; 0x654
    -tmp : (int32_T)(uint16_T)tmp);

  /* End of Gain: '<S63>/uint16 ' */

  /* DataStoreWrite: '<S63>/Data Store Write5' */
  VCU_DW.VAR_OUT_MHJ9_IN = VCU_B.uint16;
 800300e:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8003010:	f8b3 2654 	ldrh.w	r2, [r3, #1620]	; 0x654
 8003014:	4b33      	ldr	r3, [pc, #204]	; (80030e4 <FUNC_OutputData+0x1cfc>)
 8003016:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

  /* Saturate: '<S63>/Saturation2' */
  if (VCU_B.MHJ9_OUT > 1.0) {
 800301a:	4b31      	ldr	r3, [pc, #196]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 800301c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	4b2f      	ldr	r3, [pc, #188]	; (80030e8 <FUNC_OutputData+0x1d00>)
 800302a:	f00b ff5d 	bl	800eee8 <__aeabi_dcmpgt>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <FUNC_OutputData+0x1c5e>
    VCU_B.Saturation2 = 1.0;
 8003034:	4b2a      	ldr	r3, [pc, #168]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8003036:	f503 6182 	add.w	r1, r3, #1040	; 0x410
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <FUNC_OutputData+0x1d00>)
 8003040:	e9c1 2300 	strd	r2, r3, [r1]
 8003044:	e01f      	b.n	8003086 <FUNC_OutputData+0x1c9e>
  } else if (VCU_B.MHJ9_OUT < 0.0) {
 8003046:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8003048:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	f00b ff28 	bl	800eeac <__aeabi_dcmplt>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <FUNC_OutputData+0x1c8e>
    VCU_B.Saturation2 = 0.0;
 8003062:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8003064:	f503 6182 	add.w	r1, r3, #1040	; 0x410
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	e9c1 2300 	strd	r2, r3, [r1]
 8003074:	e007      	b.n	8003086 <FUNC_OutputData+0x1c9e>
  } else {
    VCU_B.Saturation2 = VCU_B.MHJ9_OUT;
 8003076:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8003078:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800307c:	4918      	ldr	r1, [pc, #96]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 800307e:	f501 6182 	add.w	r1, r1, #1040	; 0x410
 8003082:	e9c1 2300 	strd	r2, r3, [r1]
  }

  /* End of Saturate: '<S63>/Saturation2' */

  /* Gain: '<S63>/uint16_1 ' */
  tmp = floor(65535.0 * VCU_B.Saturation2);
 8003086:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8003088:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003090:	4610      	mov	r0, r2
 8003092:	4619      	mov	r1, r3
 8003094:	a310      	add	r3, pc, #64	; (adr r3, 80030d8 <FUNC_OutputData+0x1cf0>)
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	f00b fc95 	bl	800e9c8 <__aeabi_dmul>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	f00b f89b 	bl	800e1e0 <floor>
 80030aa:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 80030ae:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80030b2:	f003 f989 	bl	80063c8 <rtIsNaN>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d106      	bne.n	80030ca <FUNC_OutputData+0x1ce2>
 80030bc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80030c0:	f003 f95e 	bl	8006380 <rtIsInf>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d012      	beq.n	80030f0 <FUNC_OutputData+0x1d08>
    tmp = 0.0;
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80030d6:	e014      	b.n	8003102 <FUNC_OutputData+0x1d1a>
 80030d8:	00000000 	.word	0x00000000
 80030dc:	40efffe0 	.word	0x40efffe0
 80030e0:	200008c8 	.word	0x200008c8
 80030e4:	20001058 	.word	0x20001058
 80030e8:	3ff00000 	.word	0x3ff00000
 80030ec:	40f00000 	.word	0x40f00000
  } else {
    tmp = fmod(tmp, 65536.0);
 80030f0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	4b51      	ldr	r3, [pc, #324]	; (8003240 <FUNC_OutputData+0x1e58>)
 80030fa:	f00b f8f9 	bl	800e2f0 <fmod>
 80030fe:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.uint16_1 = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)
 8003102:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	f00b fecd 	bl	800eeac <__aeabi_dcmplt>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <FUNC_OutputData+0x1d52>
    -tmp : (int32_T)(uint16_T)tmp);
 8003118:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003122:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003126:	60fb      	str	r3, [r7, #12]
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.uint16_1 = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)
 8003128:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800312c:	f00b fee6 	bl	800eefc <__aeabi_d2uiz>
 8003130:	4603      	mov	r3, r0
 8003132:	b29b      	uxth	r3, r3
 8003134:	425b      	negs	r3, r3
 8003136:	b29b      	uxth	r3, r3
 8003138:	e005      	b.n	8003146 <FUNC_OutputData+0x1d5e>
 800313a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800313e:	f00b fedd 	bl	800eefc <__aeabi_d2uiz>
 8003142:	4603      	mov	r3, r0
 8003144:	b29b      	uxth	r3, r3
 8003146:	4a3f      	ldr	r2, [pc, #252]	; (8003244 <FUNC_OutputData+0x1e5c>)
 8003148:	f8a2 3656 	strh.w	r3, [r2, #1622]	; 0x656
    -tmp : (int32_T)(uint16_T)tmp);

  /* End of Gain: '<S63>/uint16_1 ' */

  /* DataStoreWrite: '<S63>/Data Store Write6' */
  VCU_DW.VAR_OUT_MHJ9_OUT = VCU_B.uint16_1;
 800314c:	4b3d      	ldr	r3, [pc, #244]	; (8003244 <FUNC_OutputData+0x1e5c>)
 800314e:	f8b3 2656 	ldrh.w	r2, [r3, #1622]	; 0x656
 8003152:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <FUNC_OutputData+0x1e60>)
 8003154:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6

  /* DataStoreWrite: '<S63>/Data Store Write8' */
  VCU_DW.VAR_OUT_Waterpump_PWM_active = VCU_ConstB.Gain6;
 8003158:	4b3c      	ldr	r3, [pc, #240]	; (800324c <FUNC_OutputData+0x1e64>)
 800315a:	8a1a      	ldrh	r2, [r3, #16]
 800315c:	4b3a      	ldr	r3, [pc, #232]	; (8003248 <FUNC_OutputData+0x1e60>)
 800315e:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

  /* Gain: '<S63>/Gain5' */
  tmp = floor(65535.0 * VCU_B.Saturation);
 8003162:	4b38      	ldr	r3, [pc, #224]	; (8003244 <FUNC_OutputData+0x1e5c>)
 8003164:	e9d3 2396 	ldrd	r2, r3, [r3, #600]	; 0x258
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	a332      	add	r3, pc, #200	; (adr r3, 8003238 <FUNC_OutputData+0x1e50>)
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	f00b fc29 	bl	800e9c8 <__aeabi_dmul>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	f00b f82f 	bl	800e1e0 <floor>
 8003182:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8003186:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800318a:	f003 f91d 	bl	80063c8 <rtIsNaN>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d106      	bne.n	80031a2 <FUNC_OutputData+0x1dba>
 8003194:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003198:	f003 f8f2 	bl	8006380 <rtIsInf>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d006      	beq.n	80031b0 <FUNC_OutputData+0x1dc8>
    tmp = 0.0;
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80031ae:	e008      	b.n	80031c2 <FUNC_OutputData+0x1dda>
  } else {
    tmp = fmod(tmp, 65536.0);
 80031b0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	4b21      	ldr	r3, [pc, #132]	; (8003240 <FUNC_OutputData+0x1e58>)
 80031ba:	f00b f899 	bl	800e2f0 <fmod>
 80031be:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.Gain5 = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)
 80031c2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	f00b fe6d 	bl	800eeac <__aeabi_dcmplt>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d010      	beq.n	80031fa <FUNC_OutputData+0x1e12>
    -tmp : (int32_T)(uint16_T)tmp);
 80031d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80031e6:	607b      	str	r3, [r7, #4]
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.Gain5 = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)
 80031e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031ec:	f00b fe86 	bl	800eefc <__aeabi_d2uiz>
 80031f0:	4603      	mov	r3, r0
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	425b      	negs	r3, r3
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	e005      	b.n	8003206 <FUNC_OutputData+0x1e1e>
 80031fa:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80031fe:	f00b fe7d 	bl	800eefc <__aeabi_d2uiz>
 8003202:	4603      	mov	r3, r0
 8003204:	b29b      	uxth	r3, r3
 8003206:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <FUNC_OutputData+0x1e5c>)
 8003208:	f8a2 3658 	strh.w	r3, [r2, #1624]	; 0x658
    -tmp : (int32_T)(uint16_T)tmp);

  /* End of Gain: '<S63>/Gain5' */

  /* DataStoreWrite: '<S63>/Data Store Write9' */
  VCU_DW.VAR_OUT_Fans1_PWM_active = VCU_B.Gain5;
 800320c:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <FUNC_OutputData+0x1e5c>)
 800320e:	f8b3 2658 	ldrh.w	r2, [r3, #1624]	; 0x658
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <FUNC_OutputData+0x1e60>)
 8003214:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

  /* DataStoreWrite: '<S63>/Data Store Write11' */
  VCU_DW.VAR_OUT_BSD = VCU_B.LogicalOperator1_a;
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <FUNC_OutputData+0x1e5c>)
 800321a:	f893 2777 	ldrb.w	r2, [r3, #1911]	; 0x777
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <FUNC_OutputData+0x1e60>)
 8003220:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148

  /* DataStoreWrite: '<S63>/Data Store Write7' */
  VCU_DW.VAR_OUT_Brakelight = VCU_B.Brakelight_f;
 8003224:	4b07      	ldr	r3, [pc, #28]	; (8003244 <FUNC_OutputData+0x1e5c>)
 8003226:	f893 2782 	ldrb.w	r2, [r3, #1922]	; 0x782
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <FUNC_OutputData+0x1e60>)
 800322c:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
}
 8003230:	37f8      	adds	r7, #248	; 0xf8
 8003232:	46bd      	mov	sp, r7
 8003234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003238:	00000000 	.word	0x00000000
 800323c:	40efffe0 	.word	0x40efffe0
 8003240:	40f00000 	.word	0x40f00000
 8003244:	200008c8 	.word	0x200008c8
 8003248:	20001058 	.word	0x20001058
 800324c:	0800f130 	.word	0x0800f130

08003250 <FUNC_PumpAndFans>:
#include "VCU.h"
#include "VCU_private.h"

/* Output and update for atomic system: '<Root>/Pump and Fans' */
void FUNC_PumpAndFans(void)
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b087      	sub	sp, #28
 8003254:	af06      	add	r7, sp, #24
  /* Switch: '<S120>/Switch' incorporates:
   *  Switch: '<S120>/Switch1'
   */
  if (VCU_B.Fans_dash_bit) {
 8003256:	4b42      	ldr	r3, [pc, #264]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003258:	f893 377e 	ldrb.w	r3, [r3, #1918]	; 0x77e
 800325c:	2b00      	cmp	r3, #0
 800325e:	d006      	beq.n	800326e <FUNC_PumpAndFans+0x1e>
    /* Saturate: '<S120>/Saturation' incorporates:
     *  Constant: '<S120>/Constant'
     */
    VCU_B.Switch_j = 1.0;
 8003260:	493f      	ldr	r1, [pc, #252]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	4b3f      	ldr	r3, [pc, #252]	; (8003364 <FUNC_PumpAndFans+0x114>)
 8003268:	e9c1 2394 	strd	r2, r3, [r1, #592]	; 0x250
 800326c:	e03e      	b.n	80032ec <FUNC_PumpAndFans+0x9c>
  } else {
    if (VCU_B.TeleActiveBit >= 1.0) {
 800326e:	4b3c      	ldr	r3, [pc, #240]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003270:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	4610      	mov	r0, r2
 800327a:	4619      	mov	r1, r3
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	4b38      	ldr	r3, [pc, #224]	; (8003364 <FUNC_PumpAndFans+0x114>)
 8003282:	f00b fe27 	bl	800eed4 <__aeabi_dcmpge>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <FUNC_PumpAndFans+0x4e>
      /* Switch: '<S120>/Switch1' */
      VCU_B.Switch1_d = VCU_B.Add1_ik;
 800328c:	4b34      	ldr	r3, [pc, #208]	; (8003360 <FUNC_PumpAndFans+0x110>)
 800328e:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8003292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003296:	4932      	ldr	r1, [pc, #200]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003298:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
 800329c:	e020      	b.n	80032e0 <FUNC_PumpAndFans+0x90>
    } else {
      /* Lookup_n-D: '<S120>/2-D Lookup Table' incorporates:
       *  Switch: '<S120>/Switch1'
       */
      VCU_B.uDLookupTable = look2_binlxpw(VCU_B.Add1_iu, VCU_B.Gain4,
 800329e:	4b30      	ldr	r3, [pc, #192]	; (8003360 <FUNC_PumpAndFans+0x110>)
 80032a0:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80032a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032a8:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <FUNC_PumpAndFans+0x110>)
 80032aa:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80032ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b2:	4c2d      	ldr	r4, [pc, #180]	; (8003368 <FUNC_PumpAndFans+0x118>)
 80032b4:	9400      	str	r4, [sp, #0]
 80032b6:	4c2d      	ldr	r4, [pc, #180]	; (800336c <FUNC_PumpAndFans+0x11c>)
 80032b8:	9401      	str	r4, [sp, #4]
 80032ba:	4c2d      	ldr	r4, [pc, #180]	; (8003370 <FUNC_PumpAndFans+0x120>)
 80032bc:	9402      	str	r4, [sp, #8]
 80032be:	4c2d      	ldr	r4, [pc, #180]	; (8003374 <FUNC_PumpAndFans+0x124>)
 80032c0:	9403      	str	r4, [sp, #12]
 80032c2:	2407      	movs	r4, #7
 80032c4:	9404      	str	r4, [sp, #16]
 80032c6:	f002 fd51 	bl	8005d6c <look2_binlxpw>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4924      	ldr	r1, [pc, #144]	; (8003360 <FUNC_PumpAndFans+0x110>)
 80032d0:	e9c1 239a 	strd	r2, r3, [r1, #616]	; 0x268
        VCU_ConstP.uDLookupTable_bp01Data_h, VCU_ConstP.uDLookupTable_bp02Data,
        VCU_ConstP.uDLookupTable_tableData, VCU_ConstP.uDLookupTable_maxIndex,
        7U);

      /* Switch: '<S120>/Switch1' */
      VCU_B.Switch1_d = VCU_B.uDLookupTable;
 80032d4:	4b22      	ldr	r3, [pc, #136]	; (8003360 <FUNC_PumpAndFans+0x110>)
 80032d6:	e9d3 239a 	ldrd	r2, r3, [r3, #616]	; 0x268
 80032da:	4921      	ldr	r1, [pc, #132]	; (8003360 <FUNC_PumpAndFans+0x110>)
 80032dc:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
    }

    /* Saturate: '<S120>/Saturation' */
    VCU_B.Switch_j = VCU_B.Switch1_d;
 80032e0:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <FUNC_PumpAndFans+0x110>)
 80032e2:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 80032e6:	491e      	ldr	r1, [pc, #120]	; (8003360 <FUNC_PumpAndFans+0x110>)
 80032e8:	e9c1 2394 	strd	r2, r3, [r1, #592]	; 0x250
  }

  /* End of Switch: '<S120>/Switch' */

  /* Saturate: '<S120>/Saturation' */
  if (VCU_B.Switch_j > 0.9999) {
 80032ec:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <FUNC_PumpAndFans+0x110>)
 80032ee:	e9d3 2394 	ldrd	r2, r3, [r3, #592]	; 0x250
 80032f2:	4610      	mov	r0, r2
 80032f4:	4619      	mov	r1, r3
 80032f6:	a318      	add	r3, pc, #96	; (adr r3, 8003358 <FUNC_PumpAndFans+0x108>)
 80032f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fc:	f00b fdf4 	bl	800eee8 <__aeabi_dcmpgt>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d006      	beq.n	8003314 <FUNC_PumpAndFans+0xc4>
    VCU_B.Saturation = 0.9999;
 8003306:	4916      	ldr	r1, [pc, #88]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003308:	a313      	add	r3, pc, #76	; (adr r3, 8003358 <FUNC_PumpAndFans+0x108>)
 800330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330e:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
 8003312:	e01b      	b.n	800334c <FUNC_PumpAndFans+0xfc>
  } else if (VCU_B.Switch_j < 0.0) {
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003316:	e9d3 2394 	ldrd	r2, r3, [r3, #592]	; 0x250
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	f00b fdc1 	bl	800eeac <__aeabi_dcmplt>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <FUNC_PumpAndFans+0xf0>
    VCU_B.Saturation = 0.0;
 8003330:	490b      	ldr	r1, [pc, #44]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
 800333e:	e005      	b.n	800334c <FUNC_PumpAndFans+0xfc>
  } else {
    VCU_B.Saturation = VCU_B.Switch_j;
 8003340:	4b07      	ldr	r3, [pc, #28]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003342:	e9d3 2394 	ldrd	r2, r3, [r3, #592]	; 0x250
 8003346:	4906      	ldr	r1, [pc, #24]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003348:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
  }
}
 800334c:	3704      	adds	r7, #4
 800334e:	46bd      	mov	sp, r7
 8003350:	bd90      	pop	{r4, r7, pc}
 8003352:	bf00      	nop
 8003354:	f3af 8000 	nop.w
 8003358:	48e8a71e 	.word	0x48e8a71e
 800335c:	3fefff2e 	.word	0x3fefff2e
 8003360:	200008c8 	.word	0x200008c8
 8003364:	3ff00000 	.word	0x3ff00000
 8003368:	0800f330 	.word	0x0800f330
 800336c:	0800f368 	.word	0x0800f368
 8003370:	0800f288 	.word	0x0800f288
 8003374:	0800f470 	.word	0x0800f470

08003378 <FUNC_Safety>:
#include "VCU.h"
#include "VCU_private.h"

/* Output and update for atomic system: '<Root>/Safety ' */
void FUNC_Safety(void)
{
 8003378:	b598      	push	{r3, r4, r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* RelationalOperator: '<S127>/Compare' incorporates:
   *  Constant: '<S127>/Constant'
   */
  VCU_B.Compare_dm = (VCU_B.DataStoreRead3_a == 2);
 800337c:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <FUNC_Safety+0x70>)
 800337e:	f893 36b7 	ldrb.w	r3, [r3, #1719]	; 0x6b7
 8003382:	2b02      	cmp	r3, #2
 8003384:	bf0c      	ite	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	2300      	movne	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	461a      	mov	r2, r3
 800338e:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <FUNC_Safety+0x70>)
 8003390:	f883 2775 	strb.w	r2, [r3, #1909]	; 0x775

  /* RelationalOperator: '<S5>/Relational Operator3' incorporates:
   *  Constant: '<S5>/Constant5'
   */
  VCU_B.RelationalOperator3 = (VCU_B.Sensitivity1538mVbar > 200.0);
 8003394:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <FUNC_Safety+0x70>)
 8003396:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 800339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339e:	2101      	movs	r1, #1
 80033a0:	460c      	mov	r4, r1
 80033a2:	4610      	mov	r0, r2
 80033a4:	4619      	mov	r1, r3
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	4b10      	ldr	r3, [pc, #64]	; (80033ec <FUNC_Safety+0x74>)
 80033ac:	f00b fd9c 	bl	800eee8 <__aeabi_dcmpgt>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <FUNC_Safety+0x42>
 80033b6:	2300      	movs	r3, #0
 80033b8:	461c      	mov	r4, r3
 80033ba:	b2e3      	uxtb	r3, r4
 80033bc:	461a      	mov	r2, r3
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <FUNC_Safety+0x70>)
 80033c0:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776

  /* Logic: '<S5>/Logical Operator1' */
  VCU_B.LogicalOperator1_a = (VCU_B.RelationalOperator3 || VCU_B.Compare_dm);
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <FUNC_Safety+0x70>)
 80033c6:	f893 3776 	ldrb.w	r3, [r3, #1910]	; 0x776
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d104      	bne.n	80033d8 <FUNC_Safety+0x60>
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <FUNC_Safety+0x70>)
 80033d0:	f893 3775 	ldrb.w	r3, [r3, #1909]	; 0x775
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <FUNC_Safety+0x64>
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <FUNC_Safety+0x66>
 80033dc:	2300      	movs	r3, #0
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	4b01      	ldr	r3, [pc, #4]	; (80033e8 <FUNC_Safety+0x70>)
 80033e2:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
}
 80033e6:	bd98      	pop	{r3, r4, r7, pc}
 80033e8:	200008c8 	.word	0x200008c8
 80033ec:	40690000 	.word	0x40690000

080033f0 <FUNC_Transmission_Init>:
#include "VCU.h"
#include "VCU_private.h"

/* System initialize for atomic system: '<Root>/Transmission' */
void FUNC_Transmission_Init(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* SystemInitialize for Enabled SubSystem: '<S7>/LC_jr19' */
  /* InitializeConditions for S-Function (sdspcount2): '<S145>/Counter1' */
  VCU_DW.Counter1_Count_k = 0U;
 80033f4:	4b0d      	ldr	r3, [pc, #52]	; (800342c <FUNC_Transmission_Init+0x3c>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc

  /* InitializeConditions for S-Function (sdspcount2): '<S144>/Counter' */
  VCU_DW.Counter_Count_m = 0U;
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <FUNC_Transmission_Init+0x3c>)
 80033fe:	2200      	movs	r2, #0
 8003400:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

  /* InitializeConditions for S-Function (sdspcount2): '<S145>/Counter' */
  VCU_DW.Counter_Count_a = 0U;
 8003404:	4b09      	ldr	r3, [pc, #36]	; (800342c <FUNC_Transmission_Init+0x3c>)
 8003406:	2200      	movs	r2, #0
 8003408:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

  /* End of SystemInitialize for SubSystem: '<S7>/LC_jr19' */

  /* SystemInitialize for Enabled SubSystem: '<S7>/semi_auto_jr18' */
  /* InitializeConditions for S-Function (sdspcount2): '<S200>/Counter1' */
  VCU_DW.Counter1_Count = 0U;
 800340c:	4b07      	ldr	r3, [pc, #28]	; (800342c <FUNC_Transmission_Init+0x3c>)
 800340e:	2200      	movs	r2, #0
 8003410:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa

  /* InitializeConditions for S-Function (sdspcount2): '<S199>/Counter' */
  VCU_DW.Counter_Count = 0U;
 8003414:	4b05      	ldr	r3, [pc, #20]	; (800342c <FUNC_Transmission_Init+0x3c>)
 8003416:	2200      	movs	r2, #0
 8003418:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  /* InitializeConditions for S-Function (sdspcount2): '<S200>/Counter' */
  VCU_DW.Counter_Count_i = 0U;
 800341c:	4b03      	ldr	r3, [pc, #12]	; (800342c <FUNC_Transmission_Init+0x3c>)
 800341e:	2200      	movs	r2, #0
 8003420:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

  /* End of SystemInitialize for SubSystem: '<S7>/semi_auto_jr18' */
}
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	20001058 	.word	0x20001058

08003430 <FUNC_Transmission>:

/* Output and update for atomic system: '<Root>/Transmission' */
void FUNC_Transmission(void)
{
 8003430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af02      	add	r7, sp, #8
  int32_T rowIdx;
  boolean_T tmp;
  real_T tmp_0;

  /* DataTypeConversion: '<S7>/Data Type Conversion' */
  tmp_0 = floor(VCU_B.STW_transmission_mode);
 8003436:	4b8e      	ldr	r3, [pc, #568]	; (8003670 <FUNC_Transmission+0x240>)
 8003438:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	4610      	mov	r0, r2
 8003442:	4619      	mov	r1, r3
 8003444:	f00a fecc 	bl	800e1e0 <floor>
 8003448:	e9c7 0102 	strd	r0, r1, [r7, #8]
  if (rtIsNaN(tmp_0) || rtIsInf(tmp_0)) {
 800344c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003450:	f002 ffba 	bl	80063c8 <rtIsNaN>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <FUNC_Transmission+0x38>
 800345a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800345e:	f002 ff8f 	bl	8006380 <rtIsInf>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d006      	beq.n	8003476 <FUNC_Transmission+0x46>
    tmp_0 = 0.0;
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003474:	e008      	b.n	8003488 <FUNC_Transmission+0x58>
  } else {
    tmp_0 = fmod(tmp_0, 256.0);
 8003476:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	4b7d      	ldr	r3, [pc, #500]	; (8003674 <FUNC_Transmission+0x244>)
 8003480:	f00a ff36 	bl	800e2f0 <fmod>
 8003484:	e9c7 0102 	strd	r0, r1, [r7, #8]
  }

  VCU_B.DataTypeConversion_cg = (int8_T)(tmp_0 < 0.0 ? (int32_T)(int8_T)-(int8_T)
 8003488:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	f00b fd0a 	bl	800eeac <__aeabi_dcmplt>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00d      	beq.n	80034ba <FUNC_Transmission+0x8a>
    (uint8_T)-tmp_0 : (int32_T)(int8_T)(uint8_T)tmp_0);
 800349e:	68bc      	ldr	r4, [r7, #8]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80034a6:	4620      	mov	r0, r4
 80034a8:	4629      	mov	r1, r5
 80034aa:	f00b fd27 	bl	800eefc <__aeabi_d2uiz>
 80034ae:	4603      	mov	r3, r0
 80034b0:	b2db      	uxtb	r3, r3
    tmp_0 = 0.0;
  } else {
    tmp_0 = fmod(tmp_0, 256.0);
  }

  VCU_B.DataTypeConversion_cg = (int8_T)(tmp_0 < 0.0 ? (int32_T)(int8_T)-(int8_T)
 80034b2:	425b      	negs	r3, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	e006      	b.n	80034c8 <FUNC_Transmission+0x98>
    (uint8_T)-tmp_0 : (int32_T)(int8_T)(uint8_T)tmp_0);
 80034ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034be:	f00b fd1d 	bl	800eefc <__aeabi_d2uiz>
 80034c2:	4603      	mov	r3, r0
 80034c4:	b2db      	uxtb	r3, r3
    tmp_0 = 0.0;
  } else {
    tmp_0 = fmod(tmp_0, 256.0);
  }

  VCU_B.DataTypeConversion_cg = (int8_T)(tmp_0 < 0.0 ? (int32_T)(int8_T)-(int8_T)
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	4a69      	ldr	r2, [pc, #420]	; (8003670 <FUNC_Transmission+0x240>)
 80034ca:	f882 36c8 	strb.w	r3, [r2, #1736]	; 0x6c8
  /* End of DataTypeConversion: '<S7>/Data Type Conversion' */

  /* RelationalOperator: '<S135>/Compare' incorporates:
   *  Constant: '<S135>/Constant'
   */
  VCU_B.Compare = (VCU_B.DataTypeConversion_cg == 3);
 80034ce:	4b68      	ldr	r3, [pc, #416]	; (8003670 <FUNC_Transmission+0x240>)
 80034d0:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 80034d4:	b25b      	sxtb	r3, r3
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	bf0c      	ite	eq
 80034da:	2301      	moveq	r3, #1
 80034dc:	2300      	movne	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b63      	ldr	r3, [pc, #396]	; (8003670 <FUNC_Transmission+0x240>)
 80034e4:	f883 26c9 	strb.w	r2, [r3, #1737]	; 0x6c9

  /* Outputs for Enabled SubSystem: '<S7>/LC_jr19' incorporates:
   *  EnablePort: '<S136>/Enable'
   */
  if (VCU_B.Compare) {
 80034e8:	4b61      	ldr	r3, [pc, #388]	; (8003670 <FUNC_Transmission+0x240>)
 80034ea:	f893 36c9 	ldrb.w	r3, [r3, #1737]	; 0x6c9
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f001 8027 	beq.w	8004542 <FUNC_Transmission+0x1112>
    /* Memory: '<S147>/Memory' */
    VCU_B.Memory_dj = VCU_DW.Memory_PreviousInput_g;
 80034f4:	4b60      	ldr	r3, [pc, #384]	; (8003678 <FUNC_Transmission+0x248>)
 80034f6:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 80034fa:	4b5d      	ldr	r3, [pc, #372]	; (8003670 <FUNC_Transmission+0x240>)
 80034fc:	f883 2721 	strb.w	r2, [r3, #1825]	; 0x721

    /* CombinatorialLogic: '<S189>/Logic' incorporates:
     *  RelationalOperator: '<S147>/GreaterThan'
     */
    VCU_B.GreaterThan_l = ((int32_T)VCU_B.LC_dash_bit > (int32_T)VCU_B.Memory_dj);
 8003500:	4b5b      	ldr	r3, [pc, #364]	; (8003670 <FUNC_Transmission+0x240>)
 8003502:	f893 277f 	ldrb.w	r2, [r3, #1919]	; 0x77f
 8003506:	4b5a      	ldr	r3, [pc, #360]	; (8003670 <FUNC_Transmission+0x240>)
 8003508:	f893 3721 	ldrb.w	r3, [r3, #1825]	; 0x721
 800350c:	429a      	cmp	r2, r3
 800350e:	bf8c      	ite	hi
 8003510:	2301      	movhi	r3, #1
 8003512:	2300      	movls	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	4b55      	ldr	r3, [pc, #340]	; (8003670 <FUNC_Transmission+0x240>)
 800351a:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722

    /* Logic: '<S147>/Logical Operator2' */
    VCU_B.LogicalOperator2_m = !VCU_B.LC_dash_bit;
 800351e:	4b54      	ldr	r3, [pc, #336]	; (8003670 <FUNC_Transmission+0x240>)
 8003520:	f893 377f 	ldrb.w	r3, [r3, #1919]	; 0x77f
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf0c      	ite	eq
 8003528:	2301      	moveq	r3, #1
 800352a:	2300      	movne	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	4b4f      	ldr	r3, [pc, #316]	; (8003670 <FUNC_Transmission+0x240>)
 8003532:	f883 2723 	strb.w	r2, [r3, #1827]	; 0x723

    /* Memory: '<S147>/Memory1' */
    VCU_B.Memory1_a = VCU_DW.Memory1_PreviousInput_p;
 8003536:	4b50      	ldr	r3, [pc, #320]	; (8003678 <FUNC_Transmission+0x248>)
 8003538:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 800353c:	4b4c      	ldr	r3, [pc, #304]	; (8003670 <FUNC_Transmission+0x240>)
 800353e:	f883 2724 	strb.w	r2, [r3, #1828]	; 0x724

    /* RelationalOperator: '<S147>/Relational Operator' incorporates:
     *  Constant: '<S147>/Constant'
     */
    VCU_B.RelationalOperator_k = (VCU_B.Sensitivity1538mVbar > 3.0);
 8003542:	4b4b      	ldr	r3, [pc, #300]	; (8003670 <FUNC_Transmission+0x240>)
 8003544:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8003548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354c:	2101      	movs	r1, #1
 800354e:	460c      	mov	r4, r1
 8003550:	4610      	mov	r0, r2
 8003552:	4619      	mov	r1, r3
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	4b48      	ldr	r3, [pc, #288]	; (800367c <FUNC_Transmission+0x24c>)
 800355a:	f00b fcc5 	bl	800eee8 <__aeabi_dcmpgt>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <FUNC_Transmission+0x138>
 8003564:	2300      	movs	r3, #0
 8003566:	461c      	mov	r4, r3
 8003568:	b2e3      	uxtb	r3, r4
 800356a:	461a      	mov	r2, r3
 800356c:	4b40      	ldr	r3, [pc, #256]	; (8003670 <FUNC_Transmission+0x240>)
 800356e:	f883 2725 	strb.w	r2, [r3, #1829]	; 0x725

    /* RelationalOperator: '<S147>/Relational Operator1' incorporates:
     *  Constant: '<S147>/Constant'
     */
    VCU_B.RelationalOperator1_d = (3.0 < VCU_B.Add1_m);
 8003572:	4b3f      	ldr	r3, [pc, #252]	; (8003670 <FUNC_Transmission+0x240>)
 8003574:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	2101      	movs	r1, #1
 800357e:	460c      	mov	r4, r1
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	4b3c      	ldr	r3, [pc, #240]	; (800367c <FUNC_Transmission+0x24c>)
 800358a:	f00b fcad 	bl	800eee8 <__aeabi_dcmpgt>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <FUNC_Transmission+0x168>
 8003594:	2300      	movs	r3, #0
 8003596:	461c      	mov	r4, r3
 8003598:	b2e3      	uxtb	r3, r4
 800359a:	461a      	mov	r2, r3
 800359c:	4b34      	ldr	r3, [pc, #208]	; (8003670 <FUNC_Transmission+0x240>)
 800359e:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726

    /* Logic: '<S147>/Logical Operator' */
    VCU_B.Brakelight_n = (VCU_B.RelationalOperator_k ||
 80035a2:	4b33      	ldr	r3, [pc, #204]	; (8003670 <FUNC_Transmission+0x240>)
 80035a4:	f893 3725 	ldrb.w	r3, [r3, #1829]	; 0x725
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d104      	bne.n	80035b6 <FUNC_Transmission+0x186>
                          VCU_B.RelationalOperator1_d);
 80035ac:	4b30      	ldr	r3, [pc, #192]	; (8003670 <FUNC_Transmission+0x240>)
 80035ae:	f893 3726 	ldrb.w	r3, [r3, #1830]	; 0x726
     *  Constant: '<S147>/Constant'
     */
    VCU_B.RelationalOperator1_d = (3.0 < VCU_B.Add1_m);

    /* Logic: '<S147>/Logical Operator' */
    VCU_B.Brakelight_n = (VCU_B.RelationalOperator_k ||
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <FUNC_Transmission+0x18a>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <FUNC_Transmission+0x18c>
 80035ba:	2300      	movs	r3, #0
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	4b2c      	ldr	r3, [pc, #176]	; (8003670 <FUNC_Transmission+0x240>)
 80035c0:	f883 2727 	strb.w	r2, [r3, #1831]	; 0x727
                          VCU_B.RelationalOperator1_d);

    /* RelationalOperator: '<S147>/GreaterThan1' */
    VCU_B.GreaterThan1_d = ((int32_T)VCU_B.Memory1_a > (int32_T)
 80035c4:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <FUNC_Transmission+0x240>)
 80035c6:	f893 2724 	ldrb.w	r2, [r3, #1828]	; 0x724
      VCU_B.Brakelight_n);
 80035ca:	4b29      	ldr	r3, [pc, #164]	; (8003670 <FUNC_Transmission+0x240>)
 80035cc:	f893 3727 	ldrb.w	r3, [r3, #1831]	; 0x727
    /* Logic: '<S147>/Logical Operator' */
    VCU_B.Brakelight_n = (VCU_B.RelationalOperator_k ||
                          VCU_B.RelationalOperator1_d);

    /* RelationalOperator: '<S147>/GreaterThan1' */
    VCU_B.GreaterThan1_d = ((int32_T)VCU_B.Memory1_a > (int32_T)
 80035d0:	429a      	cmp	r2, r3
 80035d2:	bf8c      	ite	hi
 80035d4:	2301      	movhi	r3, #1
 80035d6:	2300      	movls	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	4b24      	ldr	r3, [pc, #144]	; (8003670 <FUNC_Transmission+0x240>)
 80035de:	f883 2728 	strb.w	r2, [r3, #1832]	; 0x728

    /* CombinatorialLogic: '<S189>/Logic' incorporates:
     *  Logic: '<S147>/Logical Operator1'
     *  Memory: '<S189>/Memory'
     */
    VCU_B.LogicalOperator1_o = (VCU_B.LogicalOperator2_m || VCU_B.GreaterThan1_d);
 80035e2:	4b23      	ldr	r3, [pc, #140]	; (8003670 <FUNC_Transmission+0x240>)
 80035e4:	f893 3723 	ldrb.w	r3, [r3, #1827]	; 0x723
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d104      	bne.n	80035f6 <FUNC_Transmission+0x1c6>
 80035ec:	4b20      	ldr	r3, [pc, #128]	; (8003670 <FUNC_Transmission+0x240>)
 80035ee:	f893 3728 	ldrb.w	r3, [r3, #1832]	; 0x728
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <FUNC_Transmission+0x1ca>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <FUNC_Transmission+0x1cc>
 80035fa:	2300      	movs	r3, #0
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <FUNC_Transmission+0x240>)
 8003600:	f883 2729 	strb.w	r2, [r3, #1833]	; 0x729
    VCU_B.Memory_aw = VCU_DW.Memory_PreviousInput_gi;
 8003604:	4b1c      	ldr	r3, [pc, #112]	; (8003678 <FUNC_Transmission+0x248>)
 8003606:	f893 213f 	ldrb.w	r2, [r3, #319]	; 0x13f
 800360a:	4b19      	ldr	r3, [pc, #100]	; (8003670 <FUNC_Transmission+0x240>)
 800360c:	f883 272a 	strb.w	r2, [r3, #1834]	; 0x72a
    rowIdx = VCU_B.GreaterThan_l;
 8003610:	4b17      	ldr	r3, [pc, #92]	; (8003670 <FUNC_Transmission+0x240>)
 8003612:	f893 3722 	ldrb.w	r3, [r3, #1826]	; 0x722
 8003616:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.LogicalOperator1_o);
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4a14      	ldr	r2, [pc, #80]	; (8003670 <FUNC_Transmission+0x240>)
 800361e:	f892 2729 	ldrb.w	r2, [r2, #1833]	; 0x729
 8003622:	4413      	add	r3, r2
 8003624:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_aw);
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	4a11      	ldr	r2, [pc, #68]	; (8003670 <FUNC_Transmission+0x240>)
 800362c:	f892 272a 	ldrb.w	r2, [r2, #1834]	; 0x72a
 8003630:	4413      	add	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_b[0U] = VCU_ConstP.pooled37[(uint32_T)rowIdx];
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	4a12      	ldr	r2, [pc, #72]	; (8003680 <FUNC_Transmission+0x250>)
 8003638:	4413      	add	r3, r2
 800363a:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 800363e:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <FUNC_Transmission+0x240>)
 8003640:	f883 272b 	strb.w	r2, [r3, #1835]	; 0x72b
    VCU_B.Logic_b[1U] = VCU_ConstP.pooled37[rowIdx + 8U];
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	3308      	adds	r3, #8
 8003648:	4a0d      	ldr	r2, [pc, #52]	; (8003680 <FUNC_Transmission+0x250>)
 800364a:	4413      	add	r3, r2
 800364c:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003650:	4b07      	ldr	r3, [pc, #28]	; (8003670 <FUNC_Transmission+0x240>)
 8003652:	f883 272c 	strb.w	r2, [r3, #1836]	; 0x72c

    /* Logic: '<S147>/Logical Operator3' */
    VCU_B.LogicalOperator3_f = (VCU_B.Logic_b[0] && VCU_B.Brakelight_n);
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <FUNC_Transmission+0x240>)
 8003658:	f893 372b 	ldrb.w	r3, [r3, #1835]	; 0x72b
 800365c:	2b00      	cmp	r3, #0
 800365e:	d011      	beq.n	8003684 <FUNC_Transmission+0x254>
 8003660:	4b03      	ldr	r3, [pc, #12]	; (8003670 <FUNC_Transmission+0x240>)
 8003662:	f893 3727 	ldrb.w	r3, [r3, #1831]	; 0x727
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00c      	beq.n	8003684 <FUNC_Transmission+0x254>
 800366a:	2301      	movs	r3, #1
 800366c:	e00b      	b.n	8003686 <FUNC_Transmission+0x256>
 800366e:	bf00      	nop
 8003670:	200008c8 	.word	0x200008c8
 8003674:	40700000 	.word	0x40700000
 8003678:	20001058 	.word	0x20001058
 800367c:	40080000 	.word	0x40080000
 8003680:	0800f148 	.word	0x0800f148
 8003684:	2300      	movs	r3, #0
 8003686:	b2da      	uxtb	r2, r3
 8003688:	4b93      	ldr	r3, [pc, #588]	; (80038d8 <FUNC_Transmission+0x4a8>)
 800368a:	f883 272d 	strb.w	r2, [r3, #1837]	; 0x72d

    /* DataTypeConversion: '<S136>/Data Type Conversion10' */
    VCU_B.LC_active_bit_a = VCU_B.LogicalOperator3_f;
 800368e:	4b92      	ldr	r3, [pc, #584]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003690:	f893 272d 	ldrb.w	r2, [r3, #1837]	; 0x72d
 8003694:	4b90      	ldr	r3, [pc, #576]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003696:	f883 272e 	strb.w	r2, [r3, #1838]	; 0x72e
    /* CombinatorialLogic: '<S174>/Logic' incorporates:
     *  Delay: '<S144>/Delay'
     *  Memory: '<S174>/Memory'
     *  UnitDelay: '<S144>/Unit Delay1'
     */
    VCU_B.UnitDelay1_o = VCU_DW.UnitDelay1_DSTATE_p;
 800369a:	4b90      	ldr	r3, [pc, #576]	; (80038dc <FUNC_Transmission+0x4ac>)
 800369c:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
 80036a0:	4b8d      	ldr	r3, [pc, #564]	; (80038d8 <FUNC_Transmission+0x4a8>)
 80036a2:	f883 272f 	strb.w	r2, [r3, #1839]	; 0x72f
    VCU_B.Delay_e = VCU_DW.Delay_DSTATE_j[0];
 80036a6:	4b8d      	ldr	r3, [pc, #564]	; (80038dc <FUNC_Transmission+0x4ac>)
 80036a8:	f893 20de 	ldrb.w	r2, [r3, #222]	; 0xde
 80036ac:	4b8a      	ldr	r3, [pc, #552]	; (80038d8 <FUNC_Transmission+0x4a8>)
 80036ae:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
    VCU_B.Memory_lj = VCU_DW.Memory_PreviousInput_pa;
 80036b2:	4b8a      	ldr	r3, [pc, #552]	; (80038dc <FUNC_Transmission+0x4ac>)
 80036b4:	f893 2140 	ldrb.w	r2, [r3, #320]	; 0x140
 80036b8:	4b87      	ldr	r3, [pc, #540]	; (80038d8 <FUNC_Transmission+0x4a8>)
 80036ba:	f883 2731 	strb.w	r2, [r3, #1841]	; 0x731
    rowIdx = VCU_B.UnitDelay1_o;
 80036be:	4b86      	ldr	r3, [pc, #536]	; (80038d8 <FUNC_Transmission+0x4a8>)
 80036c0:	f893 372f 	ldrb.w	r3, [r3, #1839]	; 0x72f
 80036c4:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Delay_e);
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	4a83      	ldr	r2, [pc, #524]	; (80038d8 <FUNC_Transmission+0x4a8>)
 80036cc:	f892 2730 	ldrb.w	r2, [r2, #1840]	; 0x730
 80036d0:	4413      	add	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_lj);
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4a7f      	ldr	r2, [pc, #508]	; (80038d8 <FUNC_Transmission+0x4a8>)
 80036da:	f892 2731 	ldrb.w	r2, [r2, #1841]	; 0x731
 80036de:	4413      	add	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_g[0U] = VCU_ConstP.pooled37[(uint32_T)rowIdx];
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	4a7e      	ldr	r2, [pc, #504]	; (80038e0 <FUNC_Transmission+0x4b0>)
 80036e6:	4413      	add	r3, r2
 80036e8:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 80036ec:	4b7a      	ldr	r3, [pc, #488]	; (80038d8 <FUNC_Transmission+0x4a8>)
 80036ee:	f883 2732 	strb.w	r2, [r3, #1842]	; 0x732
    VCU_B.Logic_g[1U] = VCU_ConstP.pooled37[rowIdx + 8U];
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	3308      	adds	r3, #8
 80036f6:	4a7a      	ldr	r2, [pc, #488]	; (80038e0 <FUNC_Transmission+0x4b0>)
 80036f8:	4413      	add	r3, r2
 80036fa:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 80036fe:	4b76      	ldr	r3, [pc, #472]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003700:	f883 2733 	strb.w	r2, [r3, #1843]	; 0x733

    /* DataTypeConversion: '<S136>/Data Type Conversion11' */
    VCU_B.VOVG_ShiftDown_a = VCU_B.Logic_g[0];
 8003704:	4b74      	ldr	r3, [pc, #464]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003706:	f893 3732 	ldrb.w	r3, [r3, #1842]	; 0x732
 800370a:	4618      	mov	r0, r3
 800370c:	f00b f8e6 	bl	800e8dc <__aeabi_ui2d>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4970      	ldr	r1, [pc, #448]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003716:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
     *
     * Block description for '<S171>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_o = VCU_DW.DelayInput1_DSTATE_j;
 800371a:	4b70      	ldr	r3, [pc, #448]	; (80038dc <FUNC_Transmission+0x4ac>)
 800371c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003720:	496d      	ldr	r1, [pc, #436]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003722:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198
    /* CombinatorialLogic: '<S172>/Logic' incorporates:
     *  Delay: '<S144>/Delay1'
     *  Memory: '<S172>/Memory'
     *  RelationalOperator: '<S171>/FixPt Relational Operator'
     */
    VCU_B.FixPtRelationalOperator_p = (VCU_B.STW_shift_down_request >
 8003726:	4b6c      	ldr	r3, [pc, #432]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003728:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 800372c:	e9d3 0100 	ldrd	r0, r1, [r3]
      VCU_B.Uk1_o);
 8003730:	4b69      	ldr	r3, [pc, #420]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003732:	e9d3 2366 	ldrd	r2, r3, [r3, #408]	; 0x198
    /* CombinatorialLogic: '<S172>/Logic' incorporates:
     *  Delay: '<S144>/Delay1'
     *  Memory: '<S172>/Memory'
     *  RelationalOperator: '<S171>/FixPt Relational Operator'
     */
    VCU_B.FixPtRelationalOperator_p = (VCU_B.STW_shift_down_request >
 8003736:	2401      	movs	r4, #1
 8003738:	f00b fbd6 	bl	800eee8 <__aeabi_dcmpgt>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <FUNC_Transmission+0x316>
 8003742:	2300      	movs	r3, #0
 8003744:	461c      	mov	r4, r3
 8003746:	b2e3      	uxtb	r3, r4
 8003748:	461a      	mov	r2, r3
 800374a:	4b63      	ldr	r3, [pc, #396]	; (80038d8 <FUNC_Transmission+0x4a8>)
 800374c:	f883 2734 	strb.w	r2, [r3, #1844]	; 0x734
      VCU_B.Uk1_o);
    VCU_B.Delay1_p = VCU_DW.Delay1_DSTATE_p;
 8003750:	4b62      	ldr	r3, [pc, #392]	; (80038dc <FUNC_Transmission+0x4ac>)
 8003752:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 8003756:	4b60      	ldr	r3, [pc, #384]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003758:	f883 2735 	strb.w	r2, [r3, #1845]	; 0x735
    VCU_B.Memory_i = VCU_DW.Memory_PreviousInput_c;
 800375c:	4b5f      	ldr	r3, [pc, #380]	; (80038dc <FUNC_Transmission+0x4ac>)
 800375e:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
 8003762:	4b5d      	ldr	r3, [pc, #372]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003764:	f883 2736 	strb.w	r2, [r3, #1846]	; 0x736
    rowIdx = VCU_B.FixPtRelationalOperator_p;
 8003768:	4b5b      	ldr	r3, [pc, #364]	; (80038d8 <FUNC_Transmission+0x4a8>)
 800376a:	f893 3734 	ldrb.w	r3, [r3, #1844]	; 0x734
 800376e:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Delay1_p);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4a58      	ldr	r2, [pc, #352]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003776:	f892 2735 	ldrb.w	r2, [r2, #1845]	; 0x735
 800377a:	4413      	add	r3, r2
 800377c:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_i);
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4a55      	ldr	r2, [pc, #340]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003784:	f892 2736 	ldrb.w	r2, [r2, #1846]	; 0x736
 8003788:	4413      	add	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_c[0U] = VCU_ConstP.pooled37[(uint32_T)rowIdx];
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	4a54      	ldr	r2, [pc, #336]	; (80038e0 <FUNC_Transmission+0x4b0>)
 8003790:	4413      	add	r3, r2
 8003792:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003796:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003798:	f883 2737 	strb.w	r2, [r3, #1847]	; 0x737
    VCU_B.Logic_c[1U] = VCU_ConstP.pooled37[rowIdx + 8U];
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	3308      	adds	r3, #8
 80037a0:	4a4f      	ldr	r2, [pc, #316]	; (80038e0 <FUNC_Transmission+0x4b0>)
 80037a2:	4413      	add	r3, r2
 80037a4:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 80037a8:	4b4b      	ldr	r3, [pc, #300]	; (80038d8 <FUNC_Transmission+0x4a8>)
 80037aa:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738

    /* UnitDelay: '<S144>/Unit Delay4' */
    VCU_B.UnitDelay4_h = VCU_DW.UnitDelay4_DSTATE_e;
 80037ae:	4b4b      	ldr	r3, [pc, #300]	; (80038dc <FUNC_Transmission+0x4ac>)
 80037b0:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
 80037b4:	4b48      	ldr	r3, [pc, #288]	; (80038d8 <FUNC_Transmission+0x4a8>)
 80037b6:	f883 2739 	strb.w	r2, [r3, #1849]	; 0x739

    /* Gain: '<S175>/Gain' */
    VCU_B.Gain_i = 2.0 * VCU_B.DataTypeConversion1;
 80037ba:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <FUNC_Transmission+0x4a8>)
 80037bc:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	4610      	mov	r0, r2
 80037c6:	4619      	mov	r1, r3
 80037c8:	f00a ff4c 	bl	800e664 <__adddf3>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4941      	ldr	r1, [pc, #260]	; (80038d8 <FUNC_Transmission+0x4a8>)
 80037d2:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0

    /* RelationalOperator: '<S175>/Relational Operator' incorporates:
     *  Constant: '<S175>/Constant'
     */
    VCU_B.RelationalOperator_a = (VCU_B.Gain_i > 169.0);
 80037d6:	4b40      	ldr	r3, [pc, #256]	; (80038d8 <FUNC_Transmission+0x4a8>)
 80037d8:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 80037dc:	2101      	movs	r1, #1
 80037de:	460c      	mov	r4, r1
 80037e0:	4610      	mov	r0, r2
 80037e2:	4619      	mov	r1, r3
 80037e4:	a338      	add	r3, pc, #224	; (adr r3, 80038c8 <FUNC_Transmission+0x498>)
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f00b fb7d 	bl	800eee8 <__aeabi_dcmpgt>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <FUNC_Transmission+0x3c8>
 80037f4:	2300      	movs	r3, #0
 80037f6:	461c      	mov	r4, r3
 80037f8:	b2e3      	uxtb	r3, r4
 80037fa:	461a      	mov	r2, r3
 80037fc:	4b36      	ldr	r3, [pc, #216]	; (80038d8 <FUNC_Transmission+0x4a8>)
 80037fe:	f883 273a 	strb.w	r2, [r3, #1850]	; 0x73a

    /* RelationalOperator: '<S175>/Relational Operator1' incorporates:
     *  Constant: '<S175>/Constant1'
     */
    VCU_B.RelationalOperator1_g = (VCU_B.Gain_i > 228.0);
 8003802:	4b35      	ldr	r3, [pc, #212]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003804:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8003808:	2101      	movs	r1, #1
 800380a:	460c      	mov	r4, r1
 800380c:	4610      	mov	r0, r2
 800380e:	4619      	mov	r1, r3
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	4b33      	ldr	r3, [pc, #204]	; (80038e4 <FUNC_Transmission+0x4b4>)
 8003816:	f00b fb67 	bl	800eee8 <__aeabi_dcmpgt>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <FUNC_Transmission+0x3f4>
 8003820:	2300      	movs	r3, #0
 8003822:	461c      	mov	r4, r3
 8003824:	b2e3      	uxtb	r3, r4
 8003826:	461a      	mov	r2, r3
 8003828:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <FUNC_Transmission+0x4a8>)
 800382a:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b

    /* RelationalOperator: '<S175>/Relational Operator2' incorporates:
     *  Constant: '<S175>/Constant2'
     */
    VCU_B.RelationalOperator2_e = (VCU_B.Gain_i > 325.0);
 800382e:	4b2a      	ldr	r3, [pc, #168]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003830:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8003834:	2101      	movs	r1, #1
 8003836:	460c      	mov	r4, r1
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	a324      	add	r3, pc, #144	; (adr r3, 80038d0 <FUNC_Transmission+0x4a0>)
 800383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003842:	f00b fb51 	bl	800eee8 <__aeabi_dcmpgt>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <FUNC_Transmission+0x420>
 800384c:	2300      	movs	r3, #0
 800384e:	461c      	mov	r4, r3
 8003850:	b2e3      	uxtb	r3, r4
 8003852:	461a      	mov	r2, r3
 8003854:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003856:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c

    /* Sum: '<S175>/Add' */
    VCU_B.Add_fn = (uint8_T)(((uint32_T)VCU_B.RelationalOperator_a +
 800385a:	4b1f      	ldr	r3, [pc, #124]	; (80038d8 <FUNC_Transmission+0x4a8>)
 800385c:	f893 273a 	ldrb.w	r2, [r3, #1850]	; 0x73a
      VCU_B.RelationalOperator1_g) + VCU_B.RelationalOperator2_e);
 8003860:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003862:	f893 373b 	ldrb.w	r3, [r3, #1851]	; 0x73b
     *  Constant: '<S175>/Constant2'
     */
    VCU_B.RelationalOperator2_e = (VCU_B.Gain_i > 325.0);

    /* Sum: '<S175>/Add' */
    VCU_B.Add_fn = (uint8_T)(((uint32_T)VCU_B.RelationalOperator_a +
 8003866:	4413      	add	r3, r2
 8003868:	b2da      	uxtb	r2, r3
      VCU_B.RelationalOperator1_g) + VCU_B.RelationalOperator2_e);
 800386a:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <FUNC_Transmission+0x4a8>)
 800386c:	f893 373c 	ldrb.w	r3, [r3, #1852]	; 0x73c
     *  Constant: '<S175>/Constant2'
     */
    VCU_B.RelationalOperator2_e = (VCU_B.Gain_i > 325.0);

    /* Sum: '<S175>/Add' */
    VCU_B.Add_fn = (uint8_T)(((uint32_T)VCU_B.RelationalOperator_a +
 8003870:	4413      	add	r3, r2
 8003872:	b2da      	uxtb	r2, r3
 8003874:	4b18      	ldr	r3, [pc, #96]	; (80038d8 <FUNC_Transmission+0x4a8>)
 8003876:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689
      VCU_B.RelationalOperator1_g) + VCU_B.RelationalOperator2_e);

    /* RelationalOperator: '<S165>/Compare' incorporates:
     *  Constant: '<S165>/Constant'
     */
    VCU_B.Compare_j1 = (VCU_B.x_clutch_STW >= 15.0);
 800387a:	4b17      	ldr	r3, [pc, #92]	; (80038d8 <FUNC_Transmission+0x4a8>)
 800387c:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	2101      	movs	r1, #1
 8003886:	460c      	mov	r4, r1
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <FUNC_Transmission+0x4b8>)
 8003892:	f00b fb1f 	bl	800eed4 <__aeabi_dcmpge>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <FUNC_Transmission+0x470>
 800389c:	2300      	movs	r3, #0
 800389e:	461c      	mov	r4, r3
 80038a0:	b2e3      	uxtb	r3, r4
 80038a2:	461a      	mov	r2, r3
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <FUNC_Transmission+0x4a8>)
 80038a6:	f883 273d 	strb.w	r2, [r3, #1853]	; 0x73d

    /* Switch: '<S144>/Switch' incorporates:
     *  Constant: '<S144>/Constant'
     *  Constant: '<S144>/Constant1'
     */
    if (VCU_B.Compare_j1) {
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <FUNC_Transmission+0x4a8>)
 80038ac:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01d      	beq.n	80038f0 <FUNC_Transmission+0x4c0>
      VCU_B.Switch_m = 1.0;
 80038b4:	4908      	ldr	r1, [pc, #32]	; (80038d8 <FUNC_Transmission+0x4a8>)
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <FUNC_Transmission+0x4bc>)
 80038bc:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 80038c0:	e01d      	b.n	80038fe <FUNC_Transmission+0x4ce>
 80038c2:	bf00      	nop
 80038c4:	f3af 8000 	nop.w
 80038c8:	00000000 	.word	0x00000000
 80038cc:	40652000 	.word	0x40652000
 80038d0:	00000000 	.word	0x00000000
 80038d4:	40745000 	.word	0x40745000
 80038d8:	200008c8 	.word	0x200008c8
 80038dc:	20001058 	.word	0x20001058
 80038e0:	0800f148 	.word	0x0800f148
 80038e4:	406c8000 	.word	0x406c8000
 80038e8:	402e0000 	.word	0x402e0000
 80038ec:	3ff00000 	.word	0x3ff00000
    } else {
      VCU_B.Switch_m = 2.0;
 80038f0:	495f      	ldr	r1, [pc, #380]	; (8003a70 <FUNC_Transmission+0x640>)
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038fa:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
    }

    /* End of Switch: '<S144>/Switch' */

    /* RelationalOperator: '<S144>/Relational Operator' */
    VCU_B.LessthanNeutral_j = (VCU_B.Add_fn < VCU_B.Switch_m);
 80038fe:	4b5c      	ldr	r3, [pc, #368]	; (8003a70 <FUNC_Transmission+0x640>)
 8003900:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 8003904:	4618      	mov	r0, r3
 8003906:	f00a fff9 	bl	800e8fc <__aeabi_i2d>
 800390a:	4604      	mov	r4, r0
 800390c:	460d      	mov	r5, r1
 800390e:	4b58      	ldr	r3, [pc, #352]	; (8003a70 <FUNC_Transmission+0x640>)
 8003910:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 8003914:	2101      	movs	r1, #1
 8003916:	460e      	mov	r6, r1
 8003918:	4620      	mov	r0, r4
 800391a:	4629      	mov	r1, r5
 800391c:	f00b fac6 	bl	800eeac <__aeabi_dcmplt>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <FUNC_Transmission+0x4fa>
 8003926:	2300      	movs	r3, #0
 8003928:	461e      	mov	r6, r3
 800392a:	b2f3      	uxtb	r3, r6
 800392c:	461a      	mov	r2, r3
 800392e:	4b50      	ldr	r3, [pc, #320]	; (8003a70 <FUNC_Transmission+0x640>)
 8003930:	f883 273e 	strb.w	r2, [r3, #1854]	; 0x73e

    /* UnitDelay: '<S145>/Unit Delay' */
    VCU_B.UnitDelay_b = VCU_DW.UnitDelay_DSTATE_g;
 8003934:	4b4f      	ldr	r3, [pc, #316]	; (8003a74 <FUNC_Transmission+0x644>)
 8003936:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
 800393a:	4b4d      	ldr	r3, [pc, #308]	; (8003a70 <FUNC_Transmission+0x640>)
 800393c:	f883 273f 	strb.w	r2, [r3, #1855]	; 0x73f

    /* UnitDelay: '<S144>/Unit Delay2' */
    VCU_B.Timeout_p = VCU_DW.UnitDelay2_DSTATE_k;
 8003940:	4b4c      	ldr	r3, [pc, #304]	; (8003a74 <FUNC_Transmission+0x644>)
 8003942:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
 8003946:	4b4a      	ldr	r3, [pc, #296]	; (8003a70 <FUNC_Transmission+0x640>)
 8003948:	f883 2740 	strb.w	r2, [r3, #1856]	; 0x740

    /* RelationalOperator: '<S166>/Compare' incorporates:
     *  Constant: '<S166>/Constant'
     */
    VCU_B.Compare_jn = (VCU_B.DataTypeConversion2 > 5000.0);
 800394c:	4b48      	ldr	r3, [pc, #288]	; (8003a70 <FUNC_Transmission+0x640>)
 800394e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	2101      	movs	r1, #1
 8003958:	460c      	mov	r4, r1
 800395a:	4610      	mov	r0, r2
 800395c:	4619      	mov	r1, r3
 800395e:	a340      	add	r3, pc, #256	; (adr r3, 8003a60 <FUNC_Transmission+0x630>)
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f00b fac0 	bl	800eee8 <__aeabi_dcmpgt>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <FUNC_Transmission+0x542>
 800396e:	2300      	movs	r3, #0
 8003970:	461c      	mov	r4, r3
 8003972:	b2e3      	uxtb	r3, r4
 8003974:	461a      	mov	r2, r3
 8003976:	4b3e      	ldr	r3, [pc, #248]	; (8003a70 <FUNC_Transmission+0x640>)
 8003978:	f883 2741 	strb.w	r2, [r3, #1857]	; 0x741

    /* RelationalOperator: '<S167>/Compare' incorporates:
     *  Constant: '<S167>/Constant'
     */
    VCU_B.Compare_lh = (VCU_B.Add_fn == 2);
 800397c:	4b3c      	ldr	r3, [pc, #240]	; (8003a70 <FUNC_Transmission+0x640>)
 800397e:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 8003982:	2b02      	cmp	r3, #2
 8003984:	bf0c      	ite	eq
 8003986:	2301      	moveq	r3, #1
 8003988:	2300      	movne	r3, #0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	4b38      	ldr	r3, [pc, #224]	; (8003a70 <FUNC_Transmission+0x640>)
 8003990:	f883 2742 	strb.w	r2, [r3, #1858]	; 0x742

    /* Logic: '<S144>/Logical Operator1' */
    VCU_B.RPMcheckgear21_f = (VCU_B.Compare_lh && VCU_B.Compare_jn);
 8003994:	4b36      	ldr	r3, [pc, #216]	; (8003a70 <FUNC_Transmission+0x640>)
 8003996:	f893 3742 	ldrb.w	r3, [r3, #1858]	; 0x742
 800399a:	2b00      	cmp	r3, #0
 800399c:	d006      	beq.n	80039ac <FUNC_Transmission+0x57c>
 800399e:	4b34      	ldr	r3, [pc, #208]	; (8003a70 <FUNC_Transmission+0x640>)
 80039a0:	f893 3741 	ldrb.w	r3, [r3, #1857]	; 0x741
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <FUNC_Transmission+0x57c>
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <FUNC_Transmission+0x57e>
 80039ac:	2300      	movs	r3, #0
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	4b2f      	ldr	r3, [pc, #188]	; (8003a70 <FUNC_Transmission+0x640>)
 80039b2:	f883 2743 	strb.w	r2, [r3, #1859]	; 0x743

    /* RelationalOperator: '<S168>/Compare' incorporates:
     *  Constant: '<S168>/Constant'
     */
    VCU_B.Compare_gw = (VCU_B.DataTypeConversion2 > 5300.0);
 80039b6:	4b2e      	ldr	r3, [pc, #184]	; (8003a70 <FUNC_Transmission+0x640>)
 80039b8:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	2101      	movs	r1, #1
 80039c2:	460c      	mov	r4, r1
 80039c4:	4610      	mov	r0, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	a327      	add	r3, pc, #156	; (adr r3, 8003a68 <FUNC_Transmission+0x638>)
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	f00b fa8b 	bl	800eee8 <__aeabi_dcmpgt>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <FUNC_Transmission+0x5ac>
 80039d8:	2300      	movs	r3, #0
 80039da:	461c      	mov	r4, r3
 80039dc:	b2e3      	uxtb	r3, r4
 80039de:	461a      	mov	r2, r3
 80039e0:	4b23      	ldr	r3, [pc, #140]	; (8003a70 <FUNC_Transmission+0x640>)
 80039e2:	f883 2744 	strb.w	r2, [r3, #1860]	; 0x744

    /* RelationalOperator: '<S169>/Compare' incorporates:
     *  Constant: '<S169>/Constant'
     */
    VCU_B.Compare_aq = (VCU_B.Add_fn == 3);
 80039e6:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <FUNC_Transmission+0x640>)
 80039e8:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	bf0c      	ite	eq
 80039f0:	2301      	moveq	r3, #1
 80039f2:	2300      	movne	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <FUNC_Transmission+0x640>)
 80039fa:	f883 2745 	strb.w	r2, [r3, #1861]	; 0x745

    /* Logic: '<S144>/Logical Operator2' */
    VCU_B.RPMcheckgear31_d = (VCU_B.Compare_gw && VCU_B.Compare_aq);
 80039fe:	4b1c      	ldr	r3, [pc, #112]	; (8003a70 <FUNC_Transmission+0x640>)
 8003a00:	f893 3744 	ldrb.w	r3, [r3, #1860]	; 0x744
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d006      	beq.n	8003a16 <FUNC_Transmission+0x5e6>
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <FUNC_Transmission+0x640>)
 8003a0a:	f893 3745 	ldrb.w	r3, [r3, #1861]	; 0x745
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <FUNC_Transmission+0x5e6>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <FUNC_Transmission+0x5e8>
 8003a16:	2300      	movs	r3, #0
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <FUNC_Transmission+0x640>)
 8003a1c:	f883 2746 	strb.w	r2, [r3, #1862]	; 0x746

    /* CombinatorialLogic: '<S173>/Logic' incorporates:
     *  Logic: '<S144>/Logical Operator'
     *  Memory: '<S173>/Memory'
     */
    VCU_B.LogicalOperator_n = (VCU_B.UnitDelay4_h || VCU_B.LessthanNeutral_j ||
 8003a20:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <FUNC_Transmission+0x640>)
 8003a22:	f893 3739 	ldrb.w	r3, [r3, #1849]	; 0x739
      VCU_B.UnitDelay_b || VCU_B.Timeout_p || VCU_B.RPMcheckgear21_f ||
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d118      	bne.n	8003a5c <FUNC_Transmission+0x62c>

    /* CombinatorialLogic: '<S173>/Logic' incorporates:
     *  Logic: '<S144>/Logical Operator'
     *  Memory: '<S173>/Memory'
     */
    VCU_B.LogicalOperator_n = (VCU_B.UnitDelay4_h || VCU_B.LessthanNeutral_j ||
 8003a2a:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <FUNC_Transmission+0x640>)
 8003a2c:	f893 373e 	ldrb.w	r3, [r3, #1854]	; 0x73e
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d113      	bne.n	8003a5c <FUNC_Transmission+0x62c>
      VCU_B.UnitDelay_b || VCU_B.Timeout_p || VCU_B.RPMcheckgear21_f ||
 8003a34:	4b0e      	ldr	r3, [pc, #56]	; (8003a70 <FUNC_Transmission+0x640>)
 8003a36:	f893 373f 	ldrb.w	r3, [r3, #1855]	; 0x73f

    /* CombinatorialLogic: '<S173>/Logic' incorporates:
     *  Logic: '<S144>/Logical Operator'
     *  Memory: '<S173>/Memory'
     */
    VCU_B.LogicalOperator_n = (VCU_B.UnitDelay4_h || VCU_B.LessthanNeutral_j ||
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10e      	bne.n	8003a5c <FUNC_Transmission+0x62c>
      VCU_B.UnitDelay_b || VCU_B.Timeout_p || VCU_B.RPMcheckgear21_f ||
 8003a3e:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <FUNC_Transmission+0x640>)
 8003a40:	f893 3740 	ldrb.w	r3, [r3, #1856]	; 0x740
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d109      	bne.n	8003a5c <FUNC_Transmission+0x62c>
 8003a48:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <FUNC_Transmission+0x640>)
 8003a4a:	f893 3743 	ldrb.w	r3, [r3, #1859]	; 0x743
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d104      	bne.n	8003a5c <FUNC_Transmission+0x62c>
      VCU_B.RPMcheckgear31_d);
 8003a52:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <FUNC_Transmission+0x640>)
 8003a54:	f893 3746 	ldrb.w	r3, [r3, #1862]	; 0x746
    /* CombinatorialLogic: '<S173>/Logic' incorporates:
     *  Logic: '<S144>/Logical Operator'
     *  Memory: '<S173>/Memory'
     */
    VCU_B.LogicalOperator_n = (VCU_B.UnitDelay4_h || VCU_B.LessthanNeutral_j ||
      VCU_B.UnitDelay_b || VCU_B.Timeout_p || VCU_B.RPMcheckgear21_f ||
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00d      	beq.n	8003a78 <FUNC_Transmission+0x648>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e00c      	b.n	8003a7a <FUNC_Transmission+0x64a>
 8003a60:	00000000 	.word	0x00000000
 8003a64:	40b38800 	.word	0x40b38800
 8003a68:	00000000 	.word	0x00000000
 8003a6c:	40b4b400 	.word	0x40b4b400
 8003a70:	200008c8 	.word	0x200008c8
 8003a74:	20001058 	.word	0x20001058
 8003a78:	2300      	movs	r3, #0

    /* CombinatorialLogic: '<S173>/Logic' incorporates:
     *  Logic: '<S144>/Logical Operator'
     *  Memory: '<S173>/Memory'
     */
    VCU_B.LogicalOperator_n = (VCU_B.UnitDelay4_h || VCU_B.LessthanNeutral_j ||
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	4bb4      	ldr	r3, [pc, #720]	; (8003d50 <FUNC_Transmission+0x920>)
 8003a7e:	f883 2747 	strb.w	r2, [r3, #1863]	; 0x747
      VCU_B.UnitDelay_b || VCU_B.Timeout_p || VCU_B.RPMcheckgear21_f ||
      VCU_B.RPMcheckgear31_d);
    VCU_B.Memory_c5 = VCU_DW.Memory_PreviousInput_jz;
 8003a82:	4bb4      	ldr	r3, [pc, #720]	; (8003d54 <FUNC_Transmission+0x924>)
 8003a84:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
 8003a88:	4bb1      	ldr	r3, [pc, #708]	; (8003d50 <FUNC_Transmission+0x920>)
 8003a8a:	f883 2748 	strb.w	r2, [r3, #1864]	; 0x748
    tmp = VCU_B.Logic_c[0];
 8003a8e:	4bb0      	ldr	r3, [pc, #704]	; (8003d50 <FUNC_Transmission+0x920>)
 8003a90:	f893 3737 	ldrb.w	r3, [r3, #1847]	; 0x737
 8003a94:	71fb      	strb	r3, [r7, #7]
    rowIdx = tmp;
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.LogicalOperator_n);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	4aac      	ldr	r2, [pc, #688]	; (8003d50 <FUNC_Transmission+0x920>)
 8003aa0:	f892 2747 	ldrb.w	r2, [r2, #1863]	; 0x747
 8003aa4:	4413      	add	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_c5);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	4aa8      	ldr	r2, [pc, #672]	; (8003d50 <FUNC_Transmission+0x920>)
 8003aae:	f892 2748 	ldrb.w	r2, [r2, #1864]	; 0x748
 8003ab2:	4413      	add	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_j[0U] = VCU_ConstP.pooled37[(uint32_T)rowIdx];
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	4aa7      	ldr	r2, [pc, #668]	; (8003d58 <FUNC_Transmission+0x928>)
 8003aba:	4413      	add	r3, r2
 8003abc:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003ac0:	4ba3      	ldr	r3, [pc, #652]	; (8003d50 <FUNC_Transmission+0x920>)
 8003ac2:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
    VCU_B.Logic_j[1U] = VCU_ConstP.pooled37[rowIdx + 8U];
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	3308      	adds	r3, #8
 8003aca:	4aa3      	ldr	r2, [pc, #652]	; (8003d58 <FUNC_Transmission+0x928>)
 8003acc:	4413      	add	r3, r2
 8003ace:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003ad2:	4b9f      	ldr	r3, [pc, #636]	; (8003d50 <FUNC_Transmission+0x920>)
 8003ad4:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a

    /* Sum: '<S185>/Add' */
    VCU_B.Add_b = VCU_B.Add1_k + VCU_B.Add1_de;
 8003ad8:	4b9d      	ldr	r3, [pc, #628]	; (8003d50 <FUNC_Transmission+0x920>)
 8003ada:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8003ade:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ae2:	4b9b      	ldr	r3, [pc, #620]	; (8003d50 <FUNC_Transmission+0x920>)
 8003ae4:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f00a fdba 	bl	800e664 <__adddf3>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4996      	ldr	r1, [pc, #600]	; (8003d50 <FUNC_Transmission+0x920>)
 8003af6:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0

    /* Gain: '<S185>/Gain' */
    VCU_B.v_Veh = 0.5 * VCU_B.Add_b;
 8003afa:	4b95      	ldr	r3, [pc, #596]	; (8003d50 <FUNC_Transmission+0x920>)
 8003afc:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 8003b00:	4610      	mov	r0, r2
 8003b02:	4619      	mov	r1, r3
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	4b94      	ldr	r3, [pc, #592]	; (8003d5c <FUNC_Transmission+0x92c>)
 8003b0a:	f00a ff5d 	bl	800e9c8 <__aeabi_dmul>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	498f      	ldr	r1, [pc, #572]	; (8003d50 <FUNC_Transmission+0x920>)
 8003b14:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8

    /* RelationalOperator: '<S185>/Relational Operator' incorporates:
     *  Constant: '<S185>/Const_vVeh_Threshold'
     */
    VCU_B.RelationalOperator_h = (VCU_B.v_Veh > 15.0);
 8003b18:	4b8d      	ldr	r3, [pc, #564]	; (8003d50 <FUNC_Transmission+0x920>)
 8003b1a:	e9d3 236e 	ldrd	r2, r3, [r3, #440]	; 0x1b8
 8003b1e:	2101      	movs	r1, #1
 8003b20:	460c      	mov	r4, r1
 8003b22:	4610      	mov	r0, r2
 8003b24:	4619      	mov	r1, r3
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	4b8d      	ldr	r3, [pc, #564]	; (8003d60 <FUNC_Transmission+0x930>)
 8003b2c:	f00b f9dc 	bl	800eee8 <__aeabi_dcmpgt>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <FUNC_Transmission+0x70a>
 8003b36:	2300      	movs	r3, #0
 8003b38:	461c      	mov	r4, r3
 8003b3a:	b2e3      	uxtb	r3, r4
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4b84      	ldr	r3, [pc, #528]	; (8003d50 <FUNC_Transmission+0x920>)
 8003b40:	f883 274b 	strb.w	r2, [r3, #1867]	; 0x74b

    /* Gain: '<S184>/Gain' */
    VCU_B.Gain_a = 2.0 * VCU_B.DataTypeConversion1;
 8003b44:	4b82      	ldr	r3, [pc, #520]	; (8003d50 <FUNC_Transmission+0x920>)
 8003b46:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8003b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	f00a fd87 	bl	800e664 <__adddf3>
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	497d      	ldr	r1, [pc, #500]	; (8003d50 <FUNC_Transmission+0x920>)
 8003b5c:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0

    /* RelationalOperator: '<S184>/Relational Operator' incorporates:
     *  Constant: '<S184>/Constant'
     */
    VCU_B.RelationalOperator_p = (VCU_B.Gain_a > 169.0);
 8003b60:	4b7b      	ldr	r3, [pc, #492]	; (8003d50 <FUNC_Transmission+0x920>)
 8003b62:	e9d3 2370 	ldrd	r2, r3, [r3, #448]	; 0x1c0
 8003b66:	2101      	movs	r1, #1
 8003b68:	460c      	mov	r4, r1
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	a374      	add	r3, pc, #464	; (adr r3, 8003d40 <FUNC_Transmission+0x910>)
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f00b f9b8 	bl	800eee8 <__aeabi_dcmpgt>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <FUNC_Transmission+0x752>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	461c      	mov	r4, r3
 8003b82:	b2e3      	uxtb	r3, r4
 8003b84:	461a      	mov	r2, r3
 8003b86:	4b72      	ldr	r3, [pc, #456]	; (8003d50 <FUNC_Transmission+0x920>)
 8003b88:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c

    /* RelationalOperator: '<S184>/Relational Operator1' incorporates:
     *  Constant: '<S184>/Constant1'
     */
    VCU_B.RelationalOperator1_l = (VCU_B.Gain_a > 269.0);
 8003b8c:	4b70      	ldr	r3, [pc, #448]	; (8003d50 <FUNC_Transmission+0x920>)
 8003b8e:	e9d3 2370 	ldrd	r2, r3, [r3, #448]	; 0x1c0
 8003b92:	2101      	movs	r1, #1
 8003b94:	460c      	mov	r4, r1
 8003b96:	4610      	mov	r0, r2
 8003b98:	4619      	mov	r1, r3
 8003b9a:	a36b      	add	r3, pc, #428	; (adr r3, 8003d48 <FUNC_Transmission+0x918>)
 8003b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba0:	f00b f9a2 	bl	800eee8 <__aeabi_dcmpgt>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <FUNC_Transmission+0x77e>
 8003baa:	2300      	movs	r3, #0
 8003bac:	461c      	mov	r4, r3
 8003bae:	b2e3      	uxtb	r3, r4
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4b67      	ldr	r3, [pc, #412]	; (8003d50 <FUNC_Transmission+0x920>)
 8003bb4:	f883 274d 	strb.w	r2, [r3, #1869]	; 0x74d

    /* RelationalOperator: '<S184>/Relational Operator2' incorporates:
     *  Constant: '<S184>/Constant2'
     */
    VCU_B.RelationalOperator2_l = (VCU_B.Gain_a > 360.0);
 8003bb8:	4b65      	ldr	r3, [pc, #404]	; (8003d50 <FUNC_Transmission+0x920>)
 8003bba:	e9d3 2370 	ldrd	r2, r3, [r3, #448]	; 0x1c0
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	460c      	mov	r4, r1
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	4b66      	ldr	r3, [pc, #408]	; (8003d64 <FUNC_Transmission+0x934>)
 8003bcc:	f00b f98c 	bl	800eee8 <__aeabi_dcmpgt>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <FUNC_Transmission+0x7aa>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	461c      	mov	r4, r3
 8003bda:	b2e3      	uxtb	r3, r4
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4b5c      	ldr	r3, [pc, #368]	; (8003d50 <FUNC_Transmission+0x920>)
 8003be0:	f883 274e 	strb.w	r2, [r3, #1870]	; 0x74e

    /* Sum: '<S184>/Add' */
    VCU_B.Add_ax = (uint8_T)(((uint32_T)VCU_B.RelationalOperator_p +
 8003be4:	4b5a      	ldr	r3, [pc, #360]	; (8003d50 <FUNC_Transmission+0x920>)
 8003be6:	f893 274c 	ldrb.w	r2, [r3, #1868]	; 0x74c
      VCU_B.RelationalOperator1_l) + VCU_B.RelationalOperator2_l);
 8003bea:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <FUNC_Transmission+0x920>)
 8003bec:	f893 374d 	ldrb.w	r3, [r3, #1869]	; 0x74d
     *  Constant: '<S184>/Constant2'
     */
    VCU_B.RelationalOperator2_l = (VCU_B.Gain_a > 360.0);

    /* Sum: '<S184>/Add' */
    VCU_B.Add_ax = (uint8_T)(((uint32_T)VCU_B.RelationalOperator_p +
 8003bf0:	4413      	add	r3, r2
 8003bf2:	b2da      	uxtb	r2, r3
      VCU_B.RelationalOperator1_l) + VCU_B.RelationalOperator2_l);
 8003bf4:	4b56      	ldr	r3, [pc, #344]	; (8003d50 <FUNC_Transmission+0x920>)
 8003bf6:	f893 374e 	ldrb.w	r3, [r3, #1870]	; 0x74e
     *  Constant: '<S184>/Constant2'
     */
    VCU_B.RelationalOperator2_l = (VCU_B.Gain_a > 360.0);

    /* Sum: '<S184>/Add' */
    VCU_B.Add_ax = (uint8_T)(((uint32_T)VCU_B.RelationalOperator_p +
 8003bfa:	4413      	add	r3, r2
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	4b54      	ldr	r3, [pc, #336]	; (8003d50 <FUNC_Transmission+0x920>)
 8003c00:	f883 268a 	strb.w	r2, [r3, #1674]	; 0x68a
      VCU_B.RelationalOperator1_l) + VCU_B.RelationalOperator2_l);

    /* RelationalOperator: '<S186>/Compare' incorporates:
     *  Constant: '<S186>/Constant'
     */
    VCU_B.Compare_k = (VCU_B.Add_ax == 2);
 8003c04:	4b52      	ldr	r3, [pc, #328]	; (8003d50 <FUNC_Transmission+0x920>)
 8003c06:	f893 368a 	ldrb.w	r3, [r3, #1674]	; 0x68a
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	bf0c      	ite	eq
 8003c0e:	2301      	moveq	r3, #1
 8003c10:	2300      	movne	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	4b4e      	ldr	r3, [pc, #312]	; (8003d50 <FUNC_Transmission+0x920>)
 8003c18:	f883 274f 	strb.w	r2, [r3, #1871]	; 0x74f

    /* Logic: '<S185>/Logical Operator3' */
    VCU_B.LogicalOperator3_n = (VCU_B.RelationalOperator_h && VCU_B.Compare_k);
 8003c1c:	4b4c      	ldr	r3, [pc, #304]	; (8003d50 <FUNC_Transmission+0x920>)
 8003c1e:	f893 374b 	ldrb.w	r3, [r3, #1867]	; 0x74b
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d006      	beq.n	8003c34 <FUNC_Transmission+0x804>
 8003c26:	4b4a      	ldr	r3, [pc, #296]	; (8003d50 <FUNC_Transmission+0x920>)
 8003c28:	f893 374f 	ldrb.w	r3, [r3, #1871]	; 0x74f
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <FUNC_Transmission+0x804>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <FUNC_Transmission+0x806>
 8003c34:	2300      	movs	r3, #0
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	4b45      	ldr	r3, [pc, #276]	; (8003d50 <FUNC_Transmission+0x920>)
 8003c3a:	f883 2750 	strb.w	r2, [r3, #1872]	; 0x750
     *
     * Block description for '<S187>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_ii = VCU_DW.DelayInput1_DSTATE_m5;
 8003c3e:	4b45      	ldr	r3, [pc, #276]	; (8003d54 <FUNC_Transmission+0x924>)
 8003c40:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 8003c44:	4b42      	ldr	r3, [pc, #264]	; (8003d50 <FUNC_Transmission+0x920>)
 8003c46:	f883 2751 	strb.w	r2, [r3, #1873]	; 0x751

    /* CombinatorialLogic: '<S188>/Logic' incorporates:
     *  RelationalOperator: '<S187>/FixPt Relational Operator'
     */
    VCU_B.FixPtRelationalOperator_dz = ((int32_T)VCU_B.LogicalOperator3_n >
 8003c4a:	4b41      	ldr	r3, [pc, #260]	; (8003d50 <FUNC_Transmission+0x920>)
 8003c4c:	f893 2750 	ldrb.w	r2, [r3, #1872]	; 0x750
      (int32_T)VCU_B.Uk1_ii);
 8003c50:	4b3f      	ldr	r3, [pc, #252]	; (8003d50 <FUNC_Transmission+0x920>)
 8003c52:	f893 3751 	ldrb.w	r3, [r3, #1873]	; 0x751
    VCU_B.Uk1_ii = VCU_DW.DelayInput1_DSTATE_m5;

    /* CombinatorialLogic: '<S188>/Logic' incorporates:
     *  RelationalOperator: '<S187>/FixPt Relational Operator'
     */
    VCU_B.FixPtRelationalOperator_dz = ((int32_T)VCU_B.LogicalOperator3_n >
 8003c56:	429a      	cmp	r2, r3
 8003c58:	bf8c      	ite	hi
 8003c5a:	2301      	movhi	r3, #1
 8003c5c:	2300      	movls	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b3b      	ldr	r3, [pc, #236]	; (8003d50 <FUNC_Transmission+0x920>)
 8003c64:	f883 2752 	strb.w	r2, [r3, #1874]	; 0x752
      (int32_T)VCU_B.Uk1_ii);

    /* Logic: '<S185>/Logical Operator' */
    VCU_B.LogicalOperator_g = !VCU_B.Compare_k;
 8003c68:	4b39      	ldr	r3, [pc, #228]	; (8003d50 <FUNC_Transmission+0x920>)
 8003c6a:	f893 374f 	ldrb.w	r3, [r3, #1871]	; 0x74f
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bf0c      	ite	eq
 8003c72:	2301      	moveq	r3, #1
 8003c74:	2300      	movne	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4b35      	ldr	r3, [pc, #212]	; (8003d50 <FUNC_Transmission+0x920>)
 8003c7c:	f883 2753 	strb.w	r2, [r3, #1875]	; 0x753
     *
     * Block description for '<S180>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_p = VCU_DW.DelayInput1_DSTATE_m;
 8003c80:	4b34      	ldr	r3, [pc, #208]	; (8003d54 <FUNC_Transmission+0x924>)
 8003c82:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 8003c86:	4b32      	ldr	r3, [pc, #200]	; (8003d50 <FUNC_Transmission+0x920>)
 8003c88:	f883 268b 	strb.w	r2, [r3, #1675]	; 0x68b

    /* RelationalOperator: '<S180>/FixPt Relational Operator' */
    VCU_B.FixPtRelationalOperator_j = (VCU_B.Add_ax > VCU_B.Uk1_p);
 8003c8c:	4b30      	ldr	r3, [pc, #192]	; (8003d50 <FUNC_Transmission+0x920>)
 8003c8e:	f893 268a 	ldrb.w	r2, [r3, #1674]	; 0x68a
 8003c92:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <FUNC_Transmission+0x920>)
 8003c94:	f893 368b 	ldrb.w	r3, [r3, #1675]	; 0x68b
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	bf8c      	ite	hi
 8003c9c:	2301      	movhi	r3, #1
 8003c9e:	2300      	movls	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4b2a      	ldr	r3, [pc, #168]	; (8003d50 <FUNC_Transmission+0x920>)
 8003ca6:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754

    /* RelationalOperator: '<S176>/Compare' incorporates:
     *  Constant: '<S176>/Constant'
     */
    VCU_B.Compare_j0 = (VCU_B.Add_ax >= 3);
 8003caa:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <FUNC_Transmission+0x920>)
 8003cac:	f893 368a 	ldrb.w	r3, [r3, #1674]	; 0x68a
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	bf8c      	ite	hi
 8003cb4:	2301      	movhi	r3, #1
 8003cb6:	2300      	movls	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <FUNC_Transmission+0x920>)
 8003cbe:	f883 2755 	strb.w	r2, [r3, #1877]	; 0x755

    /* UnitDelay: '<S144>/Unit Delay' */
    VCU_B.UnitDelay_g = VCU_DW.UnitDelay_DSTATE_n;
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <FUNC_Transmission+0x924>)
 8003cc4:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
 8003cc8:	4b21      	ldr	r3, [pc, #132]	; (8003d50 <FUNC_Transmission+0x920>)
 8003cca:	f883 2756 	strb.w	r2, [r3, #1878]	; 0x756

    /* UnitDelay: '<S145>/Unit Delay1' */
    VCU_B.Timeout_px = VCU_DW.UnitDelay1_DSTATE_l;
 8003cce:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <FUNC_Transmission+0x924>)
 8003cd0:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 8003cd4:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <FUNC_Transmission+0x920>)
 8003cd6:	f883 2757 	strb.w	r2, [r3, #1879]	; 0x757

    /* RelationalOperator: '<S178>/Compare' incorporates:
     *  Constant: '<S178>/Constant'
     */
    VCU_B.Compare_d = (VCU_B.Add_ax == 0);
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <FUNC_Transmission+0x920>)
 8003cdc:	f893 368a 	ldrb.w	r3, [r3, #1674]	; 0x68a
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2301      	moveq	r3, #1
 8003ce6:	2300      	movne	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	4b18      	ldr	r3, [pc, #96]	; (8003d50 <FUNC_Transmission+0x920>)
 8003cee:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758

    /* RelationalOperator: '<S177>/Compare' incorporates:
     *  Constant: '<S177>/Constant'
     */
    VCU_B.Compare_i = (VCU_B.x_clutch_STW < 15.0);
 8003cf2:	4b17      	ldr	r3, [pc, #92]	; (8003d50 <FUNC_Transmission+0x920>)
 8003cf4:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	460c      	mov	r4, r1
 8003d00:	4610      	mov	r0, r2
 8003d02:	4619      	mov	r1, r3
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <FUNC_Transmission+0x930>)
 8003d0a:	f00b f8cf 	bl	800eeac <__aeabi_dcmplt>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <FUNC_Transmission+0x8e8>
 8003d14:	2300      	movs	r3, #0
 8003d16:	461c      	mov	r4, r3
 8003d18:	b2e3      	uxtb	r3, r4
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <FUNC_Transmission+0x920>)
 8003d1e:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759

    /* Logic: '<S145>/Logical Operator1' */
    VCU_B.FailSafefirstgear_n = (VCU_B.Compare_d && VCU_B.Compare_i);
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <FUNC_Transmission+0x920>)
 8003d24:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01d      	beq.n	8003d68 <FUNC_Transmission+0x938>
 8003d2c:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <FUNC_Transmission+0x920>)
 8003d2e:	f893 3759 	ldrb.w	r3, [r3, #1881]	; 0x759
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d018      	beq.n	8003d68 <FUNC_Transmission+0x938>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e017      	b.n	8003d6a <FUNC_Transmission+0x93a>
 8003d3a:	bf00      	nop
 8003d3c:	f3af 8000 	nop.w
 8003d40:	00000000 	.word	0x00000000
 8003d44:	40652000 	.word	0x40652000
 8003d48:	00000000 	.word	0x00000000
 8003d4c:	4070d000 	.word	0x4070d000
 8003d50:	200008c8 	.word	0x200008c8
 8003d54:	20001058 	.word	0x20001058
 8003d58:	0800f148 	.word	0x0800f148
 8003d5c:	3fe00000 	.word	0x3fe00000
 8003d60:	402e0000 	.word	0x402e0000
 8003d64:	40768000 	.word	0x40768000
 8003d68:	2300      	movs	r3, #0
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	4bb7      	ldr	r3, [pc, #732]	; (800404c <FUNC_Transmission+0xc1c>)
 8003d6e:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a

    /* CombinatorialLogic: '<S182>/Logic' incorporates:
     *  Logic: '<S145>/Logical Operator'
     */
    VCU_B.LogicalOperator_ny = (VCU_B.FixPtRelationalOperator_j ||
 8003d72:	4bb6      	ldr	r3, [pc, #728]	; (800404c <FUNC_Transmission+0xc1c>)
 8003d74:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
      VCU_B.Compare_j0 || VCU_B.UnitDelay_g || VCU_B.Timeout_px ||
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d113      	bne.n	8003da4 <FUNC_Transmission+0x974>
 8003d7c:	4bb3      	ldr	r3, [pc, #716]	; (800404c <FUNC_Transmission+0xc1c>)
 8003d7e:	f893 3755 	ldrb.w	r3, [r3, #1877]	; 0x755
    VCU_B.FailSafefirstgear_n = (VCU_B.Compare_d && VCU_B.Compare_i);

    /* CombinatorialLogic: '<S182>/Logic' incorporates:
     *  Logic: '<S145>/Logical Operator'
     */
    VCU_B.LogicalOperator_ny = (VCU_B.FixPtRelationalOperator_j ||
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10e      	bne.n	8003da4 <FUNC_Transmission+0x974>
      VCU_B.Compare_j0 || VCU_B.UnitDelay_g || VCU_B.Timeout_px ||
 8003d86:	4bb1      	ldr	r3, [pc, #708]	; (800404c <FUNC_Transmission+0xc1c>)
 8003d88:	f893 3756 	ldrb.w	r3, [r3, #1878]	; 0x756
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d109      	bne.n	8003da4 <FUNC_Transmission+0x974>
 8003d90:	4bae      	ldr	r3, [pc, #696]	; (800404c <FUNC_Transmission+0xc1c>)
 8003d92:	f893 3757 	ldrb.w	r3, [r3, #1879]	; 0x757
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d104      	bne.n	8003da4 <FUNC_Transmission+0x974>
      VCU_B.FailSafefirstgear_n);
 8003d9a:	4bac      	ldr	r3, [pc, #688]	; (800404c <FUNC_Transmission+0xc1c>)
 8003d9c:	f893 375a 	ldrb.w	r3, [r3, #1882]	; 0x75a

    /* CombinatorialLogic: '<S182>/Logic' incorporates:
     *  Logic: '<S145>/Logical Operator'
     */
    VCU_B.LogicalOperator_ny = (VCU_B.FixPtRelationalOperator_j ||
      VCU_B.Compare_j0 || VCU_B.UnitDelay_g || VCU_B.Timeout_px ||
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <FUNC_Transmission+0x978>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <FUNC_Transmission+0x97a>
 8003da8:	2300      	movs	r3, #0
    VCU_B.FailSafefirstgear_n = (VCU_B.Compare_d && VCU_B.Compare_i);

    /* CombinatorialLogic: '<S182>/Logic' incorporates:
     *  Logic: '<S145>/Logical Operator'
     */
    VCU_B.LogicalOperator_ny = (VCU_B.FixPtRelationalOperator_j ||
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	4ba7      	ldr	r3, [pc, #668]	; (800404c <FUNC_Transmission+0xc1c>)
 8003dae:	f883 275b 	strb.w	r2, [r3, #1883]	; 0x75b

    /* CombinatorialLogic: '<S188>/Logic' incorporates:
     *  Logic: '<S185>/Logical Operator1'
     *  Memory: '<S188>/Memory'
     */
    VCU_B.LogicalOperator1_b = (VCU_B.LogicalOperator_g ||
 8003db2:	4ba6      	ldr	r3, [pc, #664]	; (800404c <FUNC_Transmission+0xc1c>)
 8003db4:	f893 3753 	ldrb.w	r3, [r3, #1875]	; 0x753
      (VCU_B.STW_shift_up_request != 0.0) || VCU_B.LogicalOperator_ny);
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d114      	bne.n	8003de6 <FUNC_Transmission+0x9b6>
 8003dbc:	4ba3      	ldr	r3, [pc, #652]	; (800404c <FUNC_Transmission+0xc1c>)
 8003dbe:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]

    /* CombinatorialLogic: '<S188>/Logic' incorporates:
     *  Logic: '<S185>/Logical Operator1'
     *  Memory: '<S188>/Memory'
     */
    VCU_B.LogicalOperator1_b = (VCU_B.LogicalOperator_g ||
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	4619      	mov	r1, r3
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	f00b f861 	bl	800ee98 <__aeabi_dcmpeq>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <FUNC_Transmission+0x9b6>
      (VCU_B.STW_shift_up_request != 0.0) || VCU_B.LogicalOperator_ny);
 8003ddc:	4b9b      	ldr	r3, [pc, #620]	; (800404c <FUNC_Transmission+0xc1c>)
 8003dde:	f893 375b 	ldrb.w	r3, [r3, #1883]	; 0x75b
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <FUNC_Transmission+0x9ba>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <FUNC_Transmission+0x9bc>
 8003dea:	2300      	movs	r3, #0

    /* CombinatorialLogic: '<S188>/Logic' incorporates:
     *  Logic: '<S185>/Logical Operator1'
     *  Memory: '<S188>/Memory'
     */
    VCU_B.LogicalOperator1_b = (VCU_B.LogicalOperator_g ||
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	4b97      	ldr	r3, [pc, #604]	; (800404c <FUNC_Transmission+0xc1c>)
 8003df0:	f883 275c 	strb.w	r2, [r3, #1884]	; 0x75c
      (VCU_B.STW_shift_up_request != 0.0) || VCU_B.LogicalOperator_ny);
    VCU_B.Memory_p = VCU_DW.Memory_PreviousInput_n;
 8003df4:	4b96      	ldr	r3, [pc, #600]	; (8004050 <FUNC_Transmission+0xc20>)
 8003df6:	f893 2143 	ldrb.w	r2, [r3, #323]	; 0x143
 8003dfa:	4b94      	ldr	r3, [pc, #592]	; (800404c <FUNC_Transmission+0xc1c>)
 8003dfc:	f883 275d 	strb.w	r2, [r3, #1885]	; 0x75d
    rowIdx = VCU_B.FixPtRelationalOperator_dz;
 8003e00:	4b92      	ldr	r3, [pc, #584]	; (800404c <FUNC_Transmission+0xc1c>)
 8003e02:	f893 3752 	ldrb.w	r3, [r3, #1874]	; 0x752
 8003e06:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.LogicalOperator1_b);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	4a8f      	ldr	r2, [pc, #572]	; (800404c <FUNC_Transmission+0xc1c>)
 8003e0e:	f892 275c 	ldrb.w	r2, [r2, #1884]	; 0x75c
 8003e12:	4413      	add	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_p);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	4a8c      	ldr	r2, [pc, #560]	; (800404c <FUNC_Transmission+0xc1c>)
 8003e1c:	f892 275d 	ldrb.w	r2, [r2, #1885]	; 0x75d
 8003e20:	4413      	add	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_gy[0U] = VCU_ConstP.pooled37[(uint32_T)rowIdx];
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	4a8b      	ldr	r2, [pc, #556]	; (8004054 <FUNC_Transmission+0xc24>)
 8003e28:	4413      	add	r3, r2
 8003e2a:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003e2e:	4b87      	ldr	r3, [pc, #540]	; (800404c <FUNC_Transmission+0xc1c>)
 8003e30:	f883 275e 	strb.w	r2, [r3, #1886]	; 0x75e
    VCU_B.Logic_gy[1U] = VCU_ConstP.pooled37[rowIdx + 8U];
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	3308      	adds	r3, #8
 8003e38:	4a86      	ldr	r2, [pc, #536]	; (8004054 <FUNC_Transmission+0xc24>)
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003e40:	4b82      	ldr	r3, [pc, #520]	; (800404c <FUNC_Transmission+0xc1c>)
 8003e42:	f883 275f 	strb.w	r2, [r3, #1887]	; 0x75f

    /* Logic: '<S145>/Logical Operator3' */
    VCU_B.LogicalOperator3_e = ((VCU_B.STW_shift_up_request != 0.0) ||
 8003e46:	4b81      	ldr	r3, [pc, #516]	; (800404c <FUNC_Transmission+0xc1c>)
 8003e48:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	4610      	mov	r0, r2
 8003e52:	4619      	mov	r1, r3
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	f00b f81c 	bl	800ee98 <__aeabi_dcmpeq>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d004      	beq.n	8003e70 <FUNC_Transmission+0xa40>
      VCU_B.Logic_gy[0]);
 8003e66:	4b79      	ldr	r3, [pc, #484]	; (800404c <FUNC_Transmission+0xc1c>)
 8003e68:	f893 375e 	ldrb.w	r3, [r3, #1886]	; 0x75e
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_p);
    VCU_B.Logic_gy[0U] = VCU_ConstP.pooled37[(uint32_T)rowIdx];
    VCU_B.Logic_gy[1U] = VCU_ConstP.pooled37[rowIdx + 8U];

    /* Logic: '<S145>/Logical Operator3' */
    VCU_B.LogicalOperator3_e = ((VCU_B.STW_shift_up_request != 0.0) ||
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <FUNC_Transmission+0xa44>
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <FUNC_Transmission+0xa46>
 8003e74:	2300      	movs	r3, #0
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	4b74      	ldr	r3, [pc, #464]	; (800404c <FUNC_Transmission+0xc1c>)
 8003e7a:	f883 2760 	strb.w	r2, [r3, #1888]	; 0x760
     *
     * Block description for '<S179>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_d = VCU_DW.DelayInput1_DSTATE_e;
 8003e7e:	4b74      	ldr	r3, [pc, #464]	; (8004050 <FUNC_Transmission+0xc20>)
 8003e80:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 8003e84:	4b71      	ldr	r3, [pc, #452]	; (800404c <FUNC_Transmission+0xc1c>)
 8003e86:	f883 2761 	strb.w	r2, [r3, #1889]	; 0x761

    /* CombinatorialLogic: '<S182>/Logic' incorporates:
     *  Memory: '<S182>/Memory'
     *  RelationalOperator: '<S179>/FixPt Relational Operator'
     */
    VCU_B.FixPtRelationalOperator_i = ((int32_T)VCU_B.LogicalOperator3_e >
 8003e8a:	4b70      	ldr	r3, [pc, #448]	; (800404c <FUNC_Transmission+0xc1c>)
 8003e8c:	f893 2760 	ldrb.w	r2, [r3, #1888]	; 0x760
      (int32_T)VCU_B.Uk1_d);
 8003e90:	4b6e      	ldr	r3, [pc, #440]	; (800404c <FUNC_Transmission+0xc1c>)
 8003e92:	f893 3761 	ldrb.w	r3, [r3, #1889]	; 0x761

    /* CombinatorialLogic: '<S182>/Logic' incorporates:
     *  Memory: '<S182>/Memory'
     *  RelationalOperator: '<S179>/FixPt Relational Operator'
     */
    VCU_B.FixPtRelationalOperator_i = ((int32_T)VCU_B.LogicalOperator3_e >
 8003e96:	429a      	cmp	r2, r3
 8003e98:	bf8c      	ite	hi
 8003e9a:	2301      	movhi	r3, #1
 8003e9c:	2300      	movls	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4b6a      	ldr	r3, [pc, #424]	; (800404c <FUNC_Transmission+0xc1c>)
 8003ea4:	f883 2762 	strb.w	r2, [r3, #1890]	; 0x762
      (int32_T)VCU_B.Uk1_d);
    VCU_B.Memory_ig = VCU_DW.Memory_PreviousInput_e;
 8003ea8:	4b69      	ldr	r3, [pc, #420]	; (8004050 <FUNC_Transmission+0xc20>)
 8003eaa:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
 8003eae:	4b67      	ldr	r3, [pc, #412]	; (800404c <FUNC_Transmission+0xc1c>)
 8003eb0:	f883 2763 	strb.w	r2, [r3, #1891]	; 0x763
    rowIdx = VCU_B.FixPtRelationalOperator_i;
 8003eb4:	4b65      	ldr	r3, [pc, #404]	; (800404c <FUNC_Transmission+0xc1c>)
 8003eb6:	f893 3762 	ldrb.w	r3, [r3, #1890]	; 0x762
 8003eba:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.LogicalOperator_ny);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	4a62      	ldr	r2, [pc, #392]	; (800404c <FUNC_Transmission+0xc1c>)
 8003ec2:	f892 275b 	ldrb.w	r2, [r2, #1883]	; 0x75b
 8003ec6:	4413      	add	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_ig);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4a5f      	ldr	r2, [pc, #380]	; (800404c <FUNC_Transmission+0xc1c>)
 8003ed0:	f892 2763 	ldrb.w	r2, [r2, #1891]	; 0x763
 8003ed4:	4413      	add	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_jv[0U] = VCU_ConstP.pooled37[(uint32_T)rowIdx];
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	4a5e      	ldr	r2, [pc, #376]	; (8004054 <FUNC_Transmission+0xc24>)
 8003edc:	4413      	add	r3, r2
 8003ede:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003ee2:	4b5a      	ldr	r3, [pc, #360]	; (800404c <FUNC_Transmission+0xc1c>)
 8003ee4:	f883 2764 	strb.w	r2, [r3, #1892]	; 0x764
    VCU_B.Logic_jv[1U] = VCU_ConstP.pooled37[rowIdx + 8U];
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	3308      	adds	r3, #8
 8003eec:	4a59      	ldr	r2, [pc, #356]	; (8004054 <FUNC_Transmission+0xc24>)
 8003eee:	4413      	add	r3, r2
 8003ef0:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003ef4:	4b55      	ldr	r3, [pc, #340]	; (800404c <FUNC_Transmission+0xc1c>)
 8003ef6:	f883 2765 	strb.w	r2, [r3, #1893]	; 0x765

    /* CombinatorialLogic: '<S183>/Logic' incorporates:
     *  S-Function (sdspcount2): '<S145>/Counter1'
     */
    VCU_B.Counter1_p = false;
 8003efa:	4b54      	ldr	r3, [pc, #336]	; (800404c <FUNC_Transmission+0xc1c>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2766 	strb.w	r2, [r3, #1894]	; 0x766

    /* S-Function (sdspcount2): '<S145>/Counter1' */
    if (VCU_B.LogicalOperator_ny) {
 8003f02:	4b52      	ldr	r3, [pc, #328]	; (800404c <FUNC_Transmission+0xc1c>)
 8003f04:	f893 375b 	ldrb.w	r3, [r3, #1883]	; 0x75b
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <FUNC_Transmission+0xae4>
      VCU_DW.Counter1_Count_k = 0U;
 8003f0c:	4b50      	ldr	r3, [pc, #320]	; (8004050 <FUNC_Transmission+0xc20>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    }

    if (VCU_B.Logic_jv[0]) {
 8003f14:	4b4d      	ldr	r3, [pc, #308]	; (800404c <FUNC_Transmission+0xc1c>)
 8003f16:	f893 3764 	ldrb.w	r3, [r3, #1892]	; 0x764
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d011      	beq.n	8003f42 <FUNC_Transmission+0xb12>
      if (VCU_DW.Counter1_Count_k < 60) {
 8003f1e:	4b4c      	ldr	r3, [pc, #304]	; (8004050 <FUNC_Transmission+0xc20>)
 8003f20:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003f24:	2b3b      	cmp	r3, #59	; 0x3b
 8003f26:	d808      	bhi.n	8003f3a <FUNC_Transmission+0xb0a>
        VCU_DW.Counter1_Count_k++;
 8003f28:	4b49      	ldr	r3, [pc, #292]	; (8004050 <FUNC_Transmission+0xc20>)
 8003f2a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003f2e:	3301      	adds	r3, #1
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	4b47      	ldr	r3, [pc, #284]	; (8004050 <FUNC_Transmission+0xc20>)
 8003f34:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 8003f38:	e003      	b.n	8003f42 <FUNC_Transmission+0xb12>
      } else {
        VCU_DW.Counter1_Count_k = 0U;
 8003f3a:	4b45      	ldr	r3, [pc, #276]	; (8004050 <FUNC_Transmission+0xc20>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
      }
    }

    if (VCU_DW.Counter1_Count_k == 1) {
 8003f42:	4b43      	ldr	r3, [pc, #268]	; (8004050 <FUNC_Transmission+0xc20>)
 8003f44:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d103      	bne.n	8003f54 <FUNC_Transmission+0xb24>
      /* CombinatorialLogic: '<S183>/Logic' */
      VCU_B.Counter1_p = true;
 8003f4c:	4b3f      	ldr	r3, [pc, #252]	; (800404c <FUNC_Transmission+0xc1c>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2766 	strb.w	r2, [r3, #1894]	; 0x766
     *
     * Block description for '<S181>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_e = VCU_DW.DelayInput1_DSTATE_b;
 8003f54:	4b3e      	ldr	r3, [pc, #248]	; (8004050 <FUNC_Transmission+0xc20>)
 8003f56:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 8003f5a:	4b3c      	ldr	r3, [pc, #240]	; (800404c <FUNC_Transmission+0xc1c>)
 8003f5c:	f883 268c 	strb.w	r2, [r3, #1676]	; 0x68c

    /* RelationalOperator: '<S181>/FixPt Relational Operator' */
    VCU_B.FixPtRelationalOperator_ia = (VCU_B.Add_ax > VCU_B.Uk1_e);
 8003f60:	4b3a      	ldr	r3, [pc, #232]	; (800404c <FUNC_Transmission+0xc1c>)
 8003f62:	f893 268a 	ldrb.w	r2, [r3, #1674]	; 0x68a
 8003f66:	4b39      	ldr	r3, [pc, #228]	; (800404c <FUNC_Transmission+0xc1c>)
 8003f68:	f893 368c 	ldrb.w	r3, [r3, #1676]	; 0x68c
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	bf8c      	ite	hi
 8003f70:	2301      	movhi	r3, #1
 8003f72:	2300      	movls	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	4b34      	ldr	r3, [pc, #208]	; (800404c <FUNC_Transmission+0xc1c>)
 8003f7a:	f883 2767 	strb.w	r2, [r3, #1895]	; 0x767

    /* CombinatorialLogic: '<S183>/Logic' incorporates:
     *  Logic: '<S145>/Logical Operator2'
     *  Memory: '<S183>/Memory'
     */
    VCU_B.LogicalOperator2_c = (VCU_B.LogicalOperator_ny ||
 8003f7e:	4b33      	ldr	r3, [pc, #204]	; (800404c <FUNC_Transmission+0xc1c>)
 8003f80:	f893 375b 	ldrb.w	r3, [r3, #1883]	; 0x75b
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d104      	bne.n	8003f92 <FUNC_Transmission+0xb62>
      VCU_B.FixPtRelationalOperator_ia);
 8003f88:	4b30      	ldr	r3, [pc, #192]	; (800404c <FUNC_Transmission+0xc1c>)
 8003f8a:	f893 3767 	ldrb.w	r3, [r3, #1895]	; 0x767

    /* CombinatorialLogic: '<S183>/Logic' incorporates:
     *  Logic: '<S145>/Logical Operator2'
     *  Memory: '<S183>/Memory'
     */
    VCU_B.LogicalOperator2_c = (VCU_B.LogicalOperator_ny ||
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <FUNC_Transmission+0xb66>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <FUNC_Transmission+0xb68>
 8003f96:	2300      	movs	r3, #0
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	4b2c      	ldr	r3, [pc, #176]	; (800404c <FUNC_Transmission+0xc1c>)
 8003f9c:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
      VCU_B.FixPtRelationalOperator_ia);
    VCU_B.Memory_py = VCU_DW.Memory_PreviousInput_ez;
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	; (8004050 <FUNC_Transmission+0xc20>)
 8003fa2:	f893 2145 	ldrb.w	r2, [r3, #325]	; 0x145
 8003fa6:	4b29      	ldr	r3, [pc, #164]	; (800404c <FUNC_Transmission+0xc1c>)
 8003fa8:	f883 2769 	strb.w	r2, [r3, #1897]	; 0x769
    rowIdx = VCU_B.Counter1_p;
 8003fac:	4b27      	ldr	r3, [pc, #156]	; (800404c <FUNC_Transmission+0xc1c>)
 8003fae:	f893 3766 	ldrb.w	r3, [r3, #1894]	; 0x766
 8003fb2:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.LogicalOperator2_c);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	4a24      	ldr	r2, [pc, #144]	; (800404c <FUNC_Transmission+0xc1c>)
 8003fba:	f892 2768 	ldrb.w	r2, [r2, #1896]	; 0x768
 8003fbe:	4413      	add	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_py);
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	4a21      	ldr	r2, [pc, #132]	; (800404c <FUNC_Transmission+0xc1c>)
 8003fc8:	f892 2769 	ldrb.w	r2, [r2, #1897]	; 0x769
 8003fcc:	4413      	add	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_p[0U] = VCU_ConstP.pooled37[(uint32_T)rowIdx];
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	4a20      	ldr	r2, [pc, #128]	; (8004054 <FUNC_Transmission+0xc24>)
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003fda:	4b1c      	ldr	r3, [pc, #112]	; (800404c <FUNC_Transmission+0xc1c>)
 8003fdc:	f883 276a 	strb.w	r2, [r3, #1898]	; 0x76a
    VCU_B.Logic_p[1U] = VCU_ConstP.pooled37[rowIdx + 8U];
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	4a1b      	ldr	r2, [pc, #108]	; (8004054 <FUNC_Transmission+0xc24>)
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003fec:	4b17      	ldr	r3, [pc, #92]	; (800404c <FUNC_Transmission+0xc1c>)
 8003fee:	f883 276b 	strb.w	r2, [r3, #1899]	; 0x76b

    /* DataTypeConversion: '<S136>/Data Type Conversion12' */
    VCU_B.Ignition_Cut_d = VCU_B.Logic_p[0];
 8003ff2:	4b16      	ldr	r3, [pc, #88]	; (800404c <FUNC_Transmission+0xc1c>)
 8003ff4:	f893 376a 	ldrb.w	r3, [r3, #1898]	; 0x76a
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f00a fc6f 	bl	800e8dc <__aeabi_ui2d>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4912      	ldr	r1, [pc, #72]	; (800404c <FUNC_Transmission+0xc1c>)
 8004004:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8

    /* S-Function (sdspcount2): '<S144>/Counter' */
    VCU_B.Counter_f = false;
 8004008:	4b10      	ldr	r3, [pc, #64]	; (800404c <FUNC_Transmission+0xc1c>)
 800400a:	2200      	movs	r2, #0
 800400c:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c
    if (VCU_B.LogicalOperator_n) {
 8004010:	4b0e      	ldr	r3, [pc, #56]	; (800404c <FUNC_Transmission+0xc1c>)
 8004012:	f893 3747 	ldrb.w	r3, [r3, #1863]	; 0x747
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <FUNC_Transmission+0xbf2>
      VCU_DW.Counter_Count_m = 0U;
 800401a:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <FUNC_Transmission+0xc20>)
 800401c:	2200      	movs	r2, #0
 800401e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
    }

    if (VCU_B.Logic_c[0]) {
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <FUNC_Transmission+0xc1c>)
 8004024:	f893 3737 	ldrb.w	r3, [r3, #1847]	; 0x737
 8004028:	2b00      	cmp	r3, #0
 800402a:	d019      	beq.n	8004060 <FUNC_Transmission+0xc30>
      if (VCU_DW.Counter_Count_m < 500) {
 800402c:	4b08      	ldr	r3, [pc, #32]	; (8004050 <FUNC_Transmission+0xc20>)
 800402e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8004032:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004036:	d20f      	bcs.n	8004058 <FUNC_Transmission+0xc28>
        VCU_DW.Counter_Count_m++;
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <FUNC_Transmission+0xc20>)
 800403a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800403e:	3301      	adds	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	4b03      	ldr	r3, [pc, #12]	; (8004050 <FUNC_Transmission+0xc20>)
 8004044:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8004048:	e00a      	b.n	8004060 <FUNC_Transmission+0xc30>
 800404a:	bf00      	nop
 800404c:	200008c8 	.word	0x200008c8
 8004050:	20001058 	.word	0x20001058
 8004054:	0800f148 	.word	0x0800f148
      } else {
        VCU_DW.Counter_Count_m = 0U;
 8004058:	4ba0      	ldr	r3, [pc, #640]	; (80042dc <FUNC_Transmission+0xeac>)
 800405a:	2200      	movs	r2, #0
 800405c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
      }
    }

    if (VCU_DW.Counter_Count_m == 500) {
 8004060:	4b9e      	ldr	r3, [pc, #632]	; (80042dc <FUNC_Transmission+0xeac>)
 8004062:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8004066:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800406a:	d103      	bne.n	8004074 <FUNC_Transmission+0xc44>
      VCU_B.Counter_f = true;
 800406c:	4b9c      	ldr	r3, [pc, #624]	; (80042e0 <FUNC_Transmission+0xeb0>)
 800406e:	2201      	movs	r2, #1
 8004070:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c
    }

    /* End of S-Function (sdspcount2): '<S144>/Counter' */

    /* S-Function (sdspcount2): '<S145>/Counter' */
    VCU_B.Counter_g = false;
 8004074:	4b9a      	ldr	r3, [pc, #616]	; (80042e0 <FUNC_Transmission+0xeb0>)
 8004076:	2200      	movs	r2, #0
 8004078:	f883 276d 	strb.w	r2, [r3, #1901]	; 0x76d
    if (VCU_B.LogicalOperator_ny) {
 800407c:	4b98      	ldr	r3, [pc, #608]	; (80042e0 <FUNC_Transmission+0xeb0>)
 800407e:	f893 375b 	ldrb.w	r3, [r3, #1883]	; 0x75b
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <FUNC_Transmission+0xc5e>
      VCU_DW.Counter_Count_a = 0U;
 8004086:	4b95      	ldr	r3, [pc, #596]	; (80042dc <FUNC_Transmission+0xeac>)
 8004088:	2200      	movs	r2, #0
 800408a:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
    }

    if (VCU_B.Logic_jv[0]) {
 800408e:	4b94      	ldr	r3, [pc, #592]	; (80042e0 <FUNC_Transmission+0xeb0>)
 8004090:	f893 3764 	ldrb.w	r3, [r3, #1892]	; 0x764
 8004094:	2b00      	cmp	r3, #0
 8004096:	d011      	beq.n	80040bc <FUNC_Transmission+0xc8c>
      if (VCU_DW.Counter_Count_a < 200) {
 8004098:	4b90      	ldr	r3, [pc, #576]	; (80042dc <FUNC_Transmission+0xeac>)
 800409a:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 800409e:	2bc7      	cmp	r3, #199	; 0xc7
 80040a0:	d808      	bhi.n	80040b4 <FUNC_Transmission+0xc84>
        VCU_DW.Counter_Count_a++;
 80040a2:	4b8e      	ldr	r3, [pc, #568]	; (80042dc <FUNC_Transmission+0xeac>)
 80040a4:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 80040a8:	3301      	adds	r3, #1
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	4b8b      	ldr	r3, [pc, #556]	; (80042dc <FUNC_Transmission+0xeac>)
 80040ae:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
 80040b2:	e003      	b.n	80040bc <FUNC_Transmission+0xc8c>
      } else {
        VCU_DW.Counter_Count_a = 0U;
 80040b4:	4b89      	ldr	r3, [pc, #548]	; (80042dc <FUNC_Transmission+0xeac>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
      }
    }

    if (VCU_DW.Counter_Count_a == 180) {
 80040bc:	4b87      	ldr	r3, [pc, #540]	; (80042dc <FUNC_Transmission+0xeac>)
 80040be:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 80040c2:	2bb4      	cmp	r3, #180	; 0xb4
 80040c4:	d103      	bne.n	80040ce <FUNC_Transmission+0xc9e>
      VCU_B.Counter_g = true;
 80040c6:	4b86      	ldr	r3, [pc, #536]	; (80042e0 <FUNC_Transmission+0xeb0>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 276d 	strb.w	r2, [r3, #1901]	; 0x76d
    }

    /* End of S-Function (sdspcount2): '<S145>/Counter' */

    /* DataTypeConversion: '<S136>/Data Type Conversion21' */
    VCU_B.VOVG_ShiftUp_oi = VCU_B.Logic_jv[0];
 80040ce:	4b84      	ldr	r3, [pc, #528]	; (80042e0 <FUNC_Transmission+0xeb0>)
 80040d0:	f893 3764 	ldrb.w	r3, [r3, #1892]	; 0x764
 80040d4:	4618      	mov	r0, r3
 80040d6:	f00a fc01 	bl	800e8dc <__aeabi_ui2d>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4980      	ldr	r1, [pc, #512]	; (80042e0 <FUNC_Transmission+0xeb0>)
 80040e0:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
     *
     * Block description for '<S170>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_m1 = VCU_DW.DelayInput1_DSTATE_n;
 80040e4:	4b7d      	ldr	r3, [pc, #500]	; (80042dc <FUNC_Transmission+0xeac>)
 80040e6:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
 80040ea:	4b7d      	ldr	r3, [pc, #500]	; (80042e0 <FUNC_Transmission+0xeb0>)
 80040ec:	f883 268d 	strb.w	r2, [r3, #1677]	; 0x68d

    /* RelationalOperator: '<S170>/FixPt Relational Operator' */
    VCU_B.FixPtRelationalOperator_o = (VCU_B.Add_fn < VCU_B.Uk1_m1);
 80040f0:	4b7b      	ldr	r3, [pc, #492]	; (80042e0 <FUNC_Transmission+0xeb0>)
 80040f2:	f893 2689 	ldrb.w	r2, [r3, #1673]	; 0x689
 80040f6:	4b7a      	ldr	r3, [pc, #488]	; (80042e0 <FUNC_Transmission+0xeb0>)
 80040f8:	f893 368d 	ldrb.w	r3, [r3, #1677]	; 0x68d
 80040fc:	429a      	cmp	r2, r3
 80040fe:	bf34      	ite	cc
 8004100:	2301      	movcc	r3, #1
 8004102:	2300      	movcs	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	4b75      	ldr	r3, [pc, #468]	; (80042e0 <FUNC_Transmission+0xeb0>)
 800410a:	f883 276e 	strb.w	r2, [r3, #1902]	; 0x76e

    /* Switch: '<S139>/Switch' */
    if (VCU_B.Logic_c[0]) {
 800410e:	4b74      	ldr	r3, [pc, #464]	; (80042e0 <FUNC_Transmission+0xeb0>)
 8004110:	f893 3737 	ldrb.w	r3, [r3, #1847]	; 0x737
 8004114:	2b00      	cmp	r3, #0
 8004116:	d006      	beq.n	8004126 <FUNC_Transmission+0xcf6>
      /* MinMax: '<S139>/MinMax' incorporates:
       *  Constant: '<S139>/Constant'
       */
      VCU_B.Switch_h = 20.0;
 8004118:	4971      	ldr	r1, [pc, #452]	; (80042e0 <FUNC_Transmission+0xeb0>)
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	4b71      	ldr	r3, [pc, #452]	; (80042e4 <FUNC_Transmission+0xeb4>)
 8004120:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
 8004124:	e006      	b.n	8004134 <FUNC_Transmission+0xd04>
    } else {
      /* MinMax: '<S139>/MinMax' incorporates:
       *  Constant: '<S139>/Constant1'
       */
      VCU_B.Switch_h = 0.0;
 8004126:	496e      	ldr	r1, [pc, #440]	; (80042e0 <FUNC_Transmission+0xeb0>)
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
    }

    /* End of Switch: '<S139>/Switch' */

    /* MinMax: '<S139>/MinMax' */
    if ((VCU_B.x_clutch_STW > VCU_B.Switch_h) || rtIsNaN(VCU_B.Switch_h)) {
 8004134:	4b6a      	ldr	r3, [pc, #424]	; (80042e0 <FUNC_Transmission+0xeb0>)
 8004136:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 800413a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800413e:	4b68      	ldr	r3, [pc, #416]	; (80042e0 <FUNC_Transmission+0xeb0>)
 8004140:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	; 0x1d8
 8004144:	f00a fed0 	bl	800eee8 <__aeabi_dcmpgt>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <FUNC_Transmission+0xd32>
 800414e:	4b64      	ldr	r3, [pc, #400]	; (80042e0 <FUNC_Transmission+0xeb0>)
 8004150:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	; 0x1d8
 8004154:	4610      	mov	r0, r2
 8004156:	4619      	mov	r1, r3
 8004158:	f002 f936 	bl	80063c8 <rtIsNaN>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d008      	beq.n	8004174 <FUNC_Transmission+0xd44>
      VCU_B.MinMax_n = VCU_B.x_clutch_STW;
 8004162:	4b5f      	ldr	r3, [pc, #380]	; (80042e0 <FUNC_Transmission+0xeb0>)
 8004164:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	495c      	ldr	r1, [pc, #368]	; (80042e0 <FUNC_Transmission+0xeb0>)
 800416e:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
 8004172:	e005      	b.n	8004180 <FUNC_Transmission+0xd50>
    } else {
      VCU_B.MinMax_n = VCU_B.Switch_h;
 8004174:	4b5a      	ldr	r3, [pc, #360]	; (80042e0 <FUNC_Transmission+0xeb0>)
 8004176:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	; 0x1d8
 800417a:	4959      	ldr	r1, [pc, #356]	; (80042e0 <FUNC_Transmission+0xeb0>)
 800417c:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
    }

    if (!(VCU_B.MinMax_n > 0.0)) {
 8004180:	4b57      	ldr	r3, [pc, #348]	; (80042e0 <FUNC_Transmission+0xeb0>)
 8004182:	e9d3 2378 	ldrd	r2, r3, [r3, #480]	; 0x1e0
 8004186:	2101      	movs	r1, #1
 8004188:	460c      	mov	r4, r1
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	f00a fea7 	bl	800eee8 <__aeabi_dcmpgt>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <FUNC_Transmission+0xd74>
 80041a0:	2300      	movs	r3, #0
 80041a2:	461c      	mov	r4, r3
 80041a4:	b2e3      	uxtb	r3, r4
 80041a6:	f083 0301 	eor.w	r3, r3, #1
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d006      	beq.n	80041be <FUNC_Transmission+0xd8e>
      VCU_B.MinMax_n = 0.0;
 80041b0:	494b      	ldr	r1, [pc, #300]	; (80042e0 <FUNC_Transmission+0xeb0>)
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
    }

    /* RelationalOperator: '<S148>/Compare' incorporates:
     *  Constant: '<S148>/Constant'
     */
    VCU_B.Compare_gr = (VCU_B.MinMax_n > 1.0);
 80041be:	4b48      	ldr	r3, [pc, #288]	; (80042e0 <FUNC_Transmission+0xeb0>)
 80041c0:	e9d3 2378 	ldrd	r2, r3, [r3, #480]	; 0x1e0
 80041c4:	2101      	movs	r1, #1
 80041c6:	460c      	mov	r4, r1
 80041c8:	4610      	mov	r0, r2
 80041ca:	4619      	mov	r1, r3
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	4b45      	ldr	r3, [pc, #276]	; (80042e8 <FUNC_Transmission+0xeb8>)
 80041d2:	f00a fe89 	bl	800eee8 <__aeabi_dcmpgt>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <FUNC_Transmission+0xdb0>
 80041dc:	2300      	movs	r3, #0
 80041de:	461c      	mov	r4, r3
 80041e0:	b2e3      	uxtb	r3, r4
 80041e2:	461a      	mov	r2, r3
 80041e4:	4b3e      	ldr	r3, [pc, #248]	; (80042e0 <FUNC_Transmission+0xeb0>)
 80041e6:	f883 276f 	strb.w	r2, [r3, #1903]	; 0x76f

    /* DataTypeConversion: '<S136>/Data Type Conversion13' */
    VCU_B.VOVG_IN_g = VCU_B.Compare_gr;
 80041ea:	4b3d      	ldr	r3, [pc, #244]	; (80042e0 <FUNC_Transmission+0xeb0>)
 80041ec:	f893 376f 	ldrb.w	r3, [r3, #1903]	; 0x76f
 80041f0:	4618      	mov	r0, r3
 80041f2:	f00a fb73 	bl	800e8dc <__aeabi_ui2d>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4939      	ldr	r1, [pc, #228]	; (80042e0 <FUNC_Transmission+0xeb0>)
 80041fc:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8

    /* Sum: '<S139>/Add' */
    VCU_B.Add_g = VCU_B.MinMax_n - VCU_B.x_clutch_b;
 8004200:	4b37      	ldr	r3, [pc, #220]	; (80042e0 <FUNC_Transmission+0xeb0>)
 8004202:	e9d3 0178 	ldrd	r0, r1, [r3, #480]	; 0x1e0
 8004206:	4b36      	ldr	r3, [pc, #216]	; (80042e0 <FUNC_Transmission+0xeb0>)
 8004208:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	f00a fa26 	bl	800e660 <__aeabi_dsub>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4931      	ldr	r1, [pc, #196]	; (80042e0 <FUNC_Transmission+0xeb0>)
 800421a:	e9c1 237c 	strd	r2, r3, [r1, #496]	; 0x1f0

    /* RelationalOperator: '<S150>/Compare' incorporates:
     *  Constant: '<S150>/Constant'
     */
    VCU_B.Compare_gp = (VCU_B.Add_g < -0.5);
 800421e:	4b30      	ldr	r3, [pc, #192]	; (80042e0 <FUNC_Transmission+0xeb0>)
 8004220:	e9d3 237c 	ldrd	r2, r3, [r3, #496]	; 0x1f0
 8004224:	2101      	movs	r1, #1
 8004226:	460c      	mov	r4, r1
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	4b2e      	ldr	r3, [pc, #184]	; (80042ec <FUNC_Transmission+0xebc>)
 8004232:	f00a fe3b 	bl	800eeac <__aeabi_dcmplt>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <FUNC_Transmission+0xe10>
 800423c:	2300      	movs	r3, #0
 800423e:	461c      	mov	r4, r3
 8004240:	b2e3      	uxtb	r3, r4
 8004242:	461a      	mov	r2, r3
 8004244:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <FUNC_Transmission+0xeb0>)
 8004246:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770

    /* Lookup_n-D: '<S139>/Duty Cycle MHJ1' */
    VCU_B.DutyCycleMHJ1_n = look1_binlxpw(VCU_B.Add_g, VCU_ConstP.pooled29,
 800424a:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <FUNC_Transmission+0xeb0>)
 800424c:	e9d3 237c 	ldrd	r2, r3, [r3, #496]	; 0x1f0
 8004250:	210e      	movs	r1, #14
 8004252:	9100      	str	r1, [sp, #0]
 8004254:	4610      	mov	r0, r2
 8004256:	4619      	mov	r1, r3
 8004258:	4a25      	ldr	r2, [pc, #148]	; (80042f0 <FUNC_Transmission+0xec0>)
 800425a:	4b26      	ldr	r3, [pc, #152]	; (80042f4 <FUNC_Transmission+0xec4>)
 800425c:	f001 fc9c 	bl	8005b98 <look1_binlxpw>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	491e      	ldr	r1, [pc, #120]	; (80042e0 <FUNC_Transmission+0xeb0>)
 8004266:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8
      VCU_ConstP.pooled28, 14U);

    /* Product: '<S139>/Product1' */
    VCU_B.Product1_f = VCU_B.DutyCycleMHJ1_n * (real_T)VCU_B.Compare_gp;
 800426a:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <FUNC_Transmission+0xeb0>)
 800426c:	e9d3 457e 	ldrd	r4, r5, [r3, #504]	; 0x1f8
 8004270:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <FUNC_Transmission+0xeb0>)
 8004272:	f893 3770 	ldrb.w	r3, [r3, #1904]	; 0x770
 8004276:	4618      	mov	r0, r3
 8004278:	f00a fb30 	bl	800e8dc <__aeabi_ui2d>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4620      	mov	r0, r4
 8004282:	4629      	mov	r1, r5
 8004284:	f00a fba0 	bl	800e9c8 <__aeabi_dmul>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4914      	ldr	r1, [pc, #80]	; (80042e0 <FUNC_Transmission+0xeb0>)
 800428e:	e9c1 2380 	strd	r2, r3, [r1, #512]	; 0x200

    /* RelationalOperator: '<S149>/Compare' incorporates:
     *  Constant: '<S149>/Constant'
     */
    VCU_B.Compare_kk = (VCU_B.x_clutch_b > 20.0);
 8004292:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <FUNC_Transmission+0xeb0>)
 8004294:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	2101      	movs	r1, #1
 800429e:	460c      	mov	r4, r1
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	4b0e      	ldr	r3, [pc, #56]	; (80042e4 <FUNC_Transmission+0xeb4>)
 80042aa:	f00a fe1d 	bl	800eee8 <__aeabi_dcmpgt>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <FUNC_Transmission+0xe88>
 80042b4:	2300      	movs	r3, #0
 80042b6:	461c      	mov	r4, r3
 80042b8:	b2e3      	uxtb	r3, r4
 80042ba:	461a      	mov	r2, r3
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <FUNC_Transmission+0xeb0>)
 80042be:	f883 2771 	strb.w	r2, [r3, #1905]	; 0x771

    /* Switch: '<S139>/Switch1' incorporates:
     *  Constant: '<S139>/Constant2'
     *  Constant: '<S139>/Constant3'
     */
    if (VCU_B.Compare_kk) {
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <FUNC_Transmission+0xeb0>)
 80042c4:	f893 3771 	ldrb.w	r3, [r3, #1905]	; 0x771
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d015      	beq.n	80042f8 <FUNC_Transmission+0xec8>
      VCU_B.Switch1_n = 2.0;
 80042cc:	4904      	ldr	r1, [pc, #16]	; (80042e0 <FUNC_Transmission+0xeb0>)
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042d6:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
 80042da:	e013      	b.n	8004304 <FUNC_Transmission+0xed4>
 80042dc:	20001058 	.word	0x20001058
 80042e0:	200008c8 	.word	0x200008c8
 80042e4:	40340000 	.word	0x40340000
 80042e8:	3ff00000 	.word	0x3ff00000
 80042ec:	bfe00000 	.word	0xbfe00000
 80042f0:	0800f3f8 	.word	0x0800f3f8
 80042f4:	0800f380 	.word	0x0800f380
    } else {
      VCU_B.Switch1_n = 1.0;
 80042f8:	49a5      	ldr	r1, [pc, #660]	; (8004590 <FUNC_Transmission+0x1160>)
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	4ba5      	ldr	r3, [pc, #660]	; (8004594 <FUNC_Transmission+0x1164>)
 8004300:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
    }

    /* End of Switch: '<S139>/Switch1' */

    /* Product: '<S139>/Product2' */
    VCU_B.Product2_f = VCU_B.Product1_f * VCU_B.Switch1_n;
 8004304:	4ba2      	ldr	r3, [pc, #648]	; (8004590 <FUNC_Transmission+0x1160>)
 8004306:	e9d3 0180 	ldrd	r0, r1, [r3, #512]	; 0x200
 800430a:	4ba1      	ldr	r3, [pc, #644]	; (8004590 <FUNC_Transmission+0x1160>)
 800430c:	e9d3 2382 	ldrd	r2, r3, [r3, #520]	; 0x208
 8004310:	f00a fb5a 	bl	800e9c8 <__aeabi_dmul>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	499d      	ldr	r1, [pc, #628]	; (8004590 <FUNC_Transmission+0x1160>)
 800431a:	e9c1 2384 	strd	r2, r3, [r1, #528]	; 0x210

    /* DataTypeConversion: '<S136>/Data Type Conversion16' */
    VCU_B.MHJ9_OUT_d5 = VCU_B.Product2_f;
 800431e:	4b9c      	ldr	r3, [pc, #624]	; (8004590 <FUNC_Transmission+0x1160>)
 8004320:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
 8004324:	499a      	ldr	r1, [pc, #616]	; (8004590 <FUNC_Transmission+0x1160>)
 8004326:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218

    /* RelationalOperator: '<S151>/Compare' incorporates:
     *  Constant: '<S151>/Constant'
     */
    VCU_B.Compare_js = (VCU_B.Add_g > 0.0);
 800432a:	4b99      	ldr	r3, [pc, #612]	; (8004590 <FUNC_Transmission+0x1160>)
 800432c:	e9d3 237c 	ldrd	r2, r3, [r3, #496]	; 0x1f0
 8004330:	2101      	movs	r1, #1
 8004332:	460c      	mov	r4, r1
 8004334:	4610      	mov	r0, r2
 8004336:	4619      	mov	r1, r3
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	f00a fdd2 	bl	800eee8 <__aeabi_dcmpgt>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <FUNC_Transmission+0xf1e>
 800434a:	2300      	movs	r3, #0
 800434c:	461c      	mov	r4, r3
 800434e:	b2e3      	uxtb	r3, r4
 8004350:	461a      	mov	r2, r3
 8004352:	4b8f      	ldr	r3, [pc, #572]	; (8004590 <FUNC_Transmission+0x1160>)
 8004354:	f883 2772 	strb.w	r2, [r3, #1906]	; 0x772

    /* Product: '<S139>/Product3' */
    VCU_B.Product3_n = VCU_B.DutyCycleMHJ1_n * (real_T)VCU_B.Compare_js;
 8004358:	4b8d      	ldr	r3, [pc, #564]	; (8004590 <FUNC_Transmission+0x1160>)
 800435a:	e9d3 457e 	ldrd	r4, r5, [r3, #504]	; 0x1f8
 800435e:	4b8c      	ldr	r3, [pc, #560]	; (8004590 <FUNC_Transmission+0x1160>)
 8004360:	f893 3772 	ldrb.w	r3, [r3, #1906]	; 0x772
 8004364:	4618      	mov	r0, r3
 8004366:	f00a fab9 	bl	800e8dc <__aeabi_ui2d>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4620      	mov	r0, r4
 8004370:	4629      	mov	r1, r5
 8004372:	f00a fb29 	bl	800e9c8 <__aeabi_dmul>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4985      	ldr	r1, [pc, #532]	; (8004590 <FUNC_Transmission+0x1160>)
 800437c:	e9c1 2388 	strd	r2, r3, [r1, #544]	; 0x220

    /* DataTypeConversion: '<S136>/Data Type Conversion15' */
    VCU_B.MHJ9_IN_h = VCU_B.Product3_n;
 8004380:	4b83      	ldr	r3, [pc, #524]	; (8004590 <FUNC_Transmission+0x1160>)
 8004382:	e9d3 2388 	ldrd	r2, r3, [r3, #544]	; 0x220
 8004386:	4982      	ldr	r1, [pc, #520]	; (8004590 <FUNC_Transmission+0x1160>)
 8004388:	e9c1 238a 	strd	r2, r3, [r1, #552]	; 0x228

    /* RelationalOperator: '<S152>/Compare' incorporates:
     *  Constant: '<S152>/Constant'
     */
    VCU_B.Compare_hu = (VCU_B.Add_g < -20.0);
 800438c:	4b80      	ldr	r3, [pc, #512]	; (8004590 <FUNC_Transmission+0x1160>)
 800438e:	e9d3 237c 	ldrd	r2, r3, [r3, #496]	; 0x1f0
 8004392:	2101      	movs	r1, #1
 8004394:	460c      	mov	r4, r1
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	4b7e      	ldr	r3, [pc, #504]	; (8004598 <FUNC_Transmission+0x1168>)
 80043a0:	f00a fd84 	bl	800eeac <__aeabi_dcmplt>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <FUNC_Transmission+0xf7e>
 80043aa:	2300      	movs	r3, #0
 80043ac:	461c      	mov	r4, r3
 80043ae:	b2e3      	uxtb	r3, r4
 80043b0:	461a      	mov	r2, r3
 80043b2:	4b77      	ldr	r3, [pc, #476]	; (8004590 <FUNC_Transmission+0x1160>)
 80043b4:	f883 2773 	strb.w	r2, [r3, #1907]	; 0x773

    /* DataTypeConversion: '<S136>/Data Type Conversion14' */
    VCU_B.VOVG_OUT_b = VCU_B.Compare_hu;
 80043b8:	4b75      	ldr	r3, [pc, #468]	; (8004590 <FUNC_Transmission+0x1160>)
 80043ba:	f893 3773 	ldrb.w	r3, [r3, #1907]	; 0x773
 80043be:	4618      	mov	r0, r3
 80043c0:	f00a fa8c 	bl	800e8dc <__aeabi_ui2d>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4971      	ldr	r1, [pc, #452]	; (8004590 <FUNC_Transmission+0x1160>)
 80043ca:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230

    /* DataTypeConversion: '<S136>/Data Type Conversion20' incorporates:
     *  Constant: '<S136>/Constant'
     */
    VCU_B.LC_ready_bit_p = true;
 80043ce:	4b70      	ldr	r3, [pc, #448]	; (8004590 <FUNC_Transmission+0x1160>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774

    /* DataTypeConversion: '<S136>/Data Type Conversion17' */
    VCU_B.x_clutch_LC_bg = 0.0;
 80043d6:	496e      	ldr	r1, [pc, #440]	; (8004590 <FUNC_Transmission+0x1160>)
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	e9c1 238e 	strd	r2, r3, [r1, #568]	; 0x238

    /* DataTypeConversion: '<S136>/Data Type Conversion18' */
    VCU_B.LC_Mdes_o = 0.0;
 80043e4:	496a      	ldr	r1, [pc, #424]	; (8004590 <FUNC_Transmission+0x1160>)
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	e9c1 2390 	strd	r2, r3, [r1, #576]	; 0x240

    /* DataTypeConversion: '<S136>/Data Type Conversion19' */
    VCU_B.LC_Fnr_lv = 0.0;
 80043f2:	4967      	ldr	r1, [pc, #412]	; (8004590 <FUNC_Transmission+0x1160>)
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	e9c1 2392 	strd	r2, r3, [r1, #584]	; 0x248

    /* Update for Memory: '<S147>/Memory' */
    VCU_DW.Memory_PreviousInput_g = VCU_B.LC_dash_bit;
 8004400:	4b63      	ldr	r3, [pc, #396]	; (8004590 <FUNC_Transmission+0x1160>)
 8004402:	f893 277f 	ldrb.w	r2, [r3, #1919]	; 0x77f
 8004406:	4b65      	ldr	r3, [pc, #404]	; (800459c <FUNC_Transmission+0x116c>)
 8004408:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

    /* Update for Memory: '<S147>/Memory1' */
    VCU_DW.Memory1_PreviousInput_p = VCU_B.Brakelight_n;
 800440c:	4b60      	ldr	r3, [pc, #384]	; (8004590 <FUNC_Transmission+0x1160>)
 800440e:	f893 2727 	ldrb.w	r2, [r3, #1831]	; 0x727
 8004412:	4b62      	ldr	r3, [pc, #392]	; (800459c <FUNC_Transmission+0x116c>)
 8004414:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e

    /* Update for Memory: '<S189>/Memory' */
    VCU_DW.Memory_PreviousInput_gi = VCU_B.Logic_b[0];
 8004418:	4b5d      	ldr	r3, [pc, #372]	; (8004590 <FUNC_Transmission+0x1160>)
 800441a:	f893 272b 	ldrb.w	r2, [r3, #1835]	; 0x72b
 800441e:	4b5f      	ldr	r3, [pc, #380]	; (800459c <FUNC_Transmission+0x116c>)
 8004420:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

    /* Update for UnitDelay: '<S144>/Unit Delay1' */
    VCU_DW.UnitDelay1_DSTATE_p = VCU_B.Logic_c[0];
 8004424:	4b5a      	ldr	r3, [pc, #360]	; (8004590 <FUNC_Transmission+0x1160>)
 8004426:	f893 2737 	ldrb.w	r2, [r3, #1847]	; 0x737
 800442a:	4b5c      	ldr	r3, [pc, #368]	; (800459c <FUNC_Transmission+0x116c>)
 800442c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Update for Delay: '<S144>/Delay' */
    for (rowIdx = 0; rowIdx < 19; rowIdx++) {
 8004430:	2300      	movs	r3, #0
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	e00e      	b.n	8004454 <FUNC_Transmission+0x1024>
      VCU_DW.Delay_DSTATE_j[rowIdx] = VCU_DW.Delay_DSTATE_j[rowIdx + 1];
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	3301      	adds	r3, #1
 800443a:	4a58      	ldr	r2, [pc, #352]	; (800459c <FUNC_Transmission+0x116c>)
 800443c:	4413      	add	r3, r2
 800443e:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
 8004442:	4a56      	ldr	r2, [pc, #344]	; (800459c <FUNC_Transmission+0x116c>)
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	4413      	add	r3, r2
 8004448:	33d8      	adds	r3, #216	; 0xd8
 800444a:	460a      	mov	r2, r1
 800444c:	719a      	strb	r2, [r3, #6]

    /* Update for UnitDelay: '<S144>/Unit Delay1' */
    VCU_DW.UnitDelay1_DSTATE_p = VCU_B.Logic_c[0];

    /* Update for Delay: '<S144>/Delay' */
    for (rowIdx = 0; rowIdx < 19; rowIdx++) {
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	3301      	adds	r3, #1
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b12      	cmp	r3, #18
 8004458:	dded      	ble.n	8004436 <FUNC_Transmission+0x1006>
      VCU_DW.Delay_DSTATE_j[rowIdx] = VCU_DW.Delay_DSTATE_j[rowIdx + 1];
    }

    VCU_DW.Delay_DSTATE_j[19] = VCU_B.LogicalOperator_n;
 800445a:	4b4d      	ldr	r3, [pc, #308]	; (8004590 <FUNC_Transmission+0x1160>)
 800445c:	f893 2747 	ldrb.w	r2, [r3, #1863]	; 0x747
 8004460:	4b4e      	ldr	r3, [pc, #312]	; (800459c <FUNC_Transmission+0x116c>)
 8004462:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1

    /* End of Update for Delay: '<S144>/Delay' */

    /* Update for Memory: '<S174>/Memory' */
    VCU_DW.Memory_PreviousInput_pa = VCU_B.Logic_g[0];
 8004466:	4b4a      	ldr	r3, [pc, #296]	; (8004590 <FUNC_Transmission+0x1160>)
 8004468:	f893 2732 	ldrb.w	r2, [r3, #1842]	; 0x732
 800446c:	4b4b      	ldr	r3, [pc, #300]	; (800459c <FUNC_Transmission+0x116c>)
 800446e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
     *
     * Block description for '<S171>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_j = VCU_B.STW_shift_down_request;
 8004472:	4b47      	ldr	r3, [pc, #284]	; (8004590 <FUNC_Transmission+0x1160>)
 8004474:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	4947      	ldr	r1, [pc, #284]	; (800459c <FUNC_Transmission+0x116c>)
 800447e:	e9c1 2304 	strd	r2, r3, [r1, #16]

    /* Update for Delay: '<S144>/Delay1' */
    VCU_DW.Delay1_DSTATE_p = VCU_B.LogicalOperator_n;
 8004482:	4b43      	ldr	r3, [pc, #268]	; (8004590 <FUNC_Transmission+0x1160>)
 8004484:	f893 2747 	ldrb.w	r2, [r3, #1863]	; 0x747
 8004488:	4b44      	ldr	r3, [pc, #272]	; (800459c <FUNC_Transmission+0x116c>)
 800448a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2

    /* Update for Memory: '<S172>/Memory' */
    VCU_DW.Memory_PreviousInput_c = VCU_B.Logic_c[0];
 800448e:	4b40      	ldr	r3, [pc, #256]	; (8004590 <FUNC_Transmission+0x1160>)
 8004490:	f893 2737 	ldrb.w	r2, [r3, #1847]	; 0x737
 8004494:	4b41      	ldr	r3, [pc, #260]	; (800459c <FUNC_Transmission+0x116c>)
 8004496:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141

    /* Update for UnitDelay: '<S144>/Unit Delay4' */
    VCU_DW.UnitDelay4_DSTATE_e = VCU_B.FixPtRelationalOperator_o;
 800449a:	4b3d      	ldr	r3, [pc, #244]	; (8004590 <FUNC_Transmission+0x1160>)
 800449c:	f893 276e 	ldrb.w	r2, [r3, #1902]	; 0x76e
 80044a0:	4b3e      	ldr	r3, [pc, #248]	; (800459c <FUNC_Transmission+0x116c>)
 80044a2:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3

    /* Update for UnitDelay: '<S145>/Unit Delay' */
    VCU_DW.UnitDelay_DSTATE_g = VCU_B.Logic_jv[0];
 80044a6:	4b3a      	ldr	r3, [pc, #232]	; (8004590 <FUNC_Transmission+0x1160>)
 80044a8:	f893 2764 	ldrb.w	r2, [r3, #1892]	; 0x764
 80044ac:	4b3b      	ldr	r3, [pc, #236]	; (800459c <FUNC_Transmission+0x116c>)
 80044ae:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4

    /* Update for UnitDelay: '<S144>/Unit Delay2' */
    VCU_DW.UnitDelay2_DSTATE_k = VCU_B.Counter_f;
 80044b2:	4b37      	ldr	r3, [pc, #220]	; (8004590 <FUNC_Transmission+0x1160>)
 80044b4:	f893 276c 	ldrb.w	r2, [r3, #1900]	; 0x76c
 80044b8:	4b38      	ldr	r3, [pc, #224]	; (800459c <FUNC_Transmission+0x116c>)
 80044ba:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5

    /* Update for Memory: '<S173>/Memory' */
    VCU_DW.Memory_PreviousInput_jz = VCU_B.Logic_j[0];
 80044be:	4b34      	ldr	r3, [pc, #208]	; (8004590 <FUNC_Transmission+0x1160>)
 80044c0:	f893 2749 	ldrb.w	r2, [r3, #1865]	; 0x749
 80044c4:	4b35      	ldr	r3, [pc, #212]	; (800459c <FUNC_Transmission+0x116c>)
 80044c6:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
     *
     * Block description for '<S187>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_m5 = VCU_B.LogicalOperator3_n;
 80044ca:	4b31      	ldr	r3, [pc, #196]	; (8004590 <FUNC_Transmission+0x1160>)
 80044cc:	f893 2750 	ldrb.w	r2, [r3, #1872]	; 0x750
 80044d0:	4b32      	ldr	r3, [pc, #200]	; (800459c <FUNC_Transmission+0x116c>)
 80044d2:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
     *
     * Block description for '<S180>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_m = VCU_B.Add_ax;
 80044d6:	4b2e      	ldr	r3, [pc, #184]	; (8004590 <FUNC_Transmission+0x1160>)
 80044d8:	f893 268a 	ldrb.w	r2, [r3, #1674]	; 0x68a
 80044dc:	4b2f      	ldr	r3, [pc, #188]	; (800459c <FUNC_Transmission+0x116c>)
 80044de:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf

    /* Update for UnitDelay: '<S144>/Unit Delay' */
    VCU_DW.UnitDelay_DSTATE_n = VCU_B.Logic_j[0];
 80044e2:	4b2b      	ldr	r3, [pc, #172]	; (8004590 <FUNC_Transmission+0x1160>)
 80044e4:	f893 2749 	ldrb.w	r2, [r3, #1865]	; 0x749
 80044e8:	4b2c      	ldr	r3, [pc, #176]	; (800459c <FUNC_Transmission+0x116c>)
 80044ea:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7

    /* Update for UnitDelay: '<S145>/Unit Delay1' */
    VCU_DW.UnitDelay1_DSTATE_l = VCU_B.Counter_g;
 80044ee:	4b28      	ldr	r3, [pc, #160]	; (8004590 <FUNC_Transmission+0x1160>)
 80044f0:	f893 276d 	ldrb.w	r2, [r3, #1901]	; 0x76d
 80044f4:	4b29      	ldr	r3, [pc, #164]	; (800459c <FUNC_Transmission+0x116c>)
 80044f6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8

    /* Update for Memory: '<S188>/Memory' */
    VCU_DW.Memory_PreviousInput_n = VCU_B.Logic_gy[0];
 80044fa:	4b25      	ldr	r3, [pc, #148]	; (8004590 <FUNC_Transmission+0x1160>)
 80044fc:	f893 275e 	ldrb.w	r2, [r3, #1886]	; 0x75e
 8004500:	4b26      	ldr	r3, [pc, #152]	; (800459c <FUNC_Transmission+0x116c>)
 8004502:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
     *
     * Block description for '<S179>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_e = VCU_B.LogicalOperator3_e;
 8004506:	4b22      	ldr	r3, [pc, #136]	; (8004590 <FUNC_Transmission+0x1160>)
 8004508:	f893 2760 	ldrb.w	r2, [r3, #1888]	; 0x760
 800450c:	4b23      	ldr	r3, [pc, #140]	; (800459c <FUNC_Transmission+0x116c>)
 800450e:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9

    /* Update for Memory: '<S182>/Memory' */
    VCU_DW.Memory_PreviousInput_e = VCU_B.Logic_jv[0];
 8004512:	4b1f      	ldr	r3, [pc, #124]	; (8004590 <FUNC_Transmission+0x1160>)
 8004514:	f893 2764 	ldrb.w	r2, [r3, #1892]	; 0x764
 8004518:	4b20      	ldr	r3, [pc, #128]	; (800459c <FUNC_Transmission+0x116c>)
 800451a:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
     *
     * Block description for '<S181>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_b = VCU_B.Add_ax;
 800451e:	4b1c      	ldr	r3, [pc, #112]	; (8004590 <FUNC_Transmission+0x1160>)
 8004520:	f893 268a 	ldrb.w	r2, [r3, #1674]	; 0x68a
 8004524:	4b1d      	ldr	r3, [pc, #116]	; (800459c <FUNC_Transmission+0x116c>)
 8004526:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    /* Update for Memory: '<S183>/Memory' */
    VCU_DW.Memory_PreviousInput_ez = VCU_B.Logic_p[0];
 800452a:	4b19      	ldr	r3, [pc, #100]	; (8004590 <FUNC_Transmission+0x1160>)
 800452c:	f893 276a 	ldrb.w	r2, [r3, #1898]	; 0x76a
 8004530:	4b1a      	ldr	r3, [pc, #104]	; (800459c <FUNC_Transmission+0x116c>)
 8004532:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
     *
     * Block description for '<S170>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_n = VCU_B.Add_fn;
 8004536:	4b16      	ldr	r3, [pc, #88]	; (8004590 <FUNC_Transmission+0x1160>)
 8004538:	f893 2689 	ldrb.w	r2, [r3, #1673]	; 0x689
 800453c:	4b17      	ldr	r3, [pc, #92]	; (800459c <FUNC_Transmission+0x116c>)
 800453e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
  /* End of Outputs for SubSystem: '<S7>/LC_jr19' */

  /* RelationalOperator: '<S132>/Compare' incorporates:
   *  Constant: '<S132>/Constant'
   */
  VCU_B.Compare_c = (VCU_B.DataTypeConversion_cg == 1);
 8004542:	4b13      	ldr	r3, [pc, #76]	; (8004590 <FUNC_Transmission+0x1160>)
 8004544:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8004548:	b25b      	sxtb	r3, r3
 800454a:	2b01      	cmp	r3, #1
 800454c:	bf0c      	ite	eq
 800454e:	2301      	moveq	r3, #1
 8004550:	2300      	movne	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <FUNC_Transmission+0x1160>)
 8004558:	f883 26ca 	strb.w	r2, [r3, #1738]	; 0x6ca

  /* RelationalOperator: '<S133>/Compare' incorporates:
   *  Constant: '<S133>/Constant'
   */
  VCU_B.Compare_g = (VCU_B.DataTypeConversion_cg > 3);
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <FUNC_Transmission+0x1160>)
 800455e:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8004562:	b25b      	sxtb	r3, r3
 8004564:	2b03      	cmp	r3, #3
 8004566:	bfcc      	ite	gt
 8004568:	2301      	movgt	r3, #1
 800456a:	2300      	movle	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <FUNC_Transmission+0x1160>)
 8004572:	f883 26cb 	strb.w	r2, [r3, #1739]	; 0x6cb

  /* Logic: '<S7>/Logical Operator' */
  VCU_B.LogicalOperator = (VCU_B.Compare_c || VCU_B.Compare_g);
 8004576:	4b06      	ldr	r3, [pc, #24]	; (8004590 <FUNC_Transmission+0x1160>)
 8004578:	f893 36ca 	ldrb.w	r3, [r3, #1738]	; 0x6ca
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <FUNC_Transmission+0x115a>
 8004580:	4b03      	ldr	r3, [pc, #12]	; (8004590 <FUNC_Transmission+0x1160>)
 8004582:	f893 36cb 	ldrb.w	r3, [r3, #1739]	; 0x6cb
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <FUNC_Transmission+0x1170>
 800458a:	2301      	movs	r3, #1
 800458c:	e009      	b.n	80045a2 <FUNC_Transmission+0x1172>
 800458e:	bf00      	nop
 8004590:	200008c8 	.word	0x200008c8
 8004594:	3ff00000 	.word	0x3ff00000
 8004598:	c0340000 	.word	0xc0340000
 800459c:	20001058 	.word	0x20001058
 80045a0:	2300      	movs	r3, #0
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	4b62      	ldr	r3, [pc, #392]	; (8004730 <FUNC_Transmission+0x1300>)
 80045a6:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc

  /* Outputs for Enabled SubSystem: '<S7>/semi_auto_jr18' incorporates:
   *  EnablePort: '<S138>/Enable'
   */
  if (VCU_B.LogicalOperator) {
 80045aa:	4b61      	ldr	r3, [pc, #388]	; (8004730 <FUNC_Transmission+0x1300>)
 80045ac:	f893 36cc 	ldrb.w	r3, [r3, #1740]	; 0x6cc
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 8743 	beq.w	800543c <FUNC_Transmission+0x200c>
    /* Memory: '<S201>/Memory' */
    VCU_B.Memory = VCU_DW.Memory_PreviousInput;
 80045b6:	4b5f      	ldr	r3, [pc, #380]	; (8004734 <FUNC_Transmission+0x1304>)
 80045b8:	f893 2135 	ldrb.w	r2, [r3, #309]	; 0x135
 80045bc:	4b5c      	ldr	r3, [pc, #368]	; (8004730 <FUNC_Transmission+0x1300>)
 80045be:	f883 26d0 	strb.w	r2, [r3, #1744]	; 0x6d0

    /* CombinatorialLogic: '<S227>/Logic' incorporates:
     *  RelationalOperator: '<S201>/GreaterThan'
     */
    VCU_B.GreaterThan = ((int32_T)VCU_B.LC_dash_bit > (int32_T)VCU_B.Memory);
 80045c2:	4b5b      	ldr	r3, [pc, #364]	; (8004730 <FUNC_Transmission+0x1300>)
 80045c4:	f893 277f 	ldrb.w	r2, [r3, #1919]	; 0x77f
 80045c8:	4b59      	ldr	r3, [pc, #356]	; (8004730 <FUNC_Transmission+0x1300>)
 80045ca:	f893 36d0 	ldrb.w	r3, [r3, #1744]	; 0x6d0
 80045ce:	429a      	cmp	r2, r3
 80045d0:	bf8c      	ite	hi
 80045d2:	2301      	movhi	r3, #1
 80045d4:	2300      	movls	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	4b55      	ldr	r3, [pc, #340]	; (8004730 <FUNC_Transmission+0x1300>)
 80045dc:	f883 26d1 	strb.w	r2, [r3, #1745]	; 0x6d1

    /* Logic: '<S201>/Logical Operator2' */
    VCU_B.LogicalOperator2 = !VCU_B.LC_dash_bit;
 80045e0:	4b53      	ldr	r3, [pc, #332]	; (8004730 <FUNC_Transmission+0x1300>)
 80045e2:	f893 377f 	ldrb.w	r3, [r3, #1919]	; 0x77f
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bf0c      	ite	eq
 80045ea:	2301      	moveq	r3, #1
 80045ec:	2300      	movne	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	4b4f      	ldr	r3, [pc, #316]	; (8004730 <FUNC_Transmission+0x1300>)
 80045f4:	f883 26d2 	strb.w	r2, [r3, #1746]	; 0x6d2

    /* Memory: '<S201>/Memory1' */
    VCU_B.Memory1 = VCU_DW.Memory1_PreviousInput;
 80045f8:	4b4e      	ldr	r3, [pc, #312]	; (8004734 <FUNC_Transmission+0x1304>)
 80045fa:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
 80045fe:	4b4c      	ldr	r3, [pc, #304]	; (8004730 <FUNC_Transmission+0x1300>)
 8004600:	f883 26d3 	strb.w	r2, [r3, #1747]	; 0x6d3

    /* RelationalOperator: '<S201>/Relational Operator' incorporates:
     *  Constant: '<S201>/Constant'
     */
    VCU_B.RelationalOperator = (VCU_B.Sensitivity1538mVbar > 3.0);
 8004604:	4b4a      	ldr	r3, [pc, #296]	; (8004730 <FUNC_Transmission+0x1300>)
 8004606:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	2101      	movs	r1, #1
 8004610:	460c      	mov	r4, r1
 8004612:	4610      	mov	r0, r2
 8004614:	4619      	mov	r1, r3
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	4b47      	ldr	r3, [pc, #284]	; (8004738 <FUNC_Transmission+0x1308>)
 800461c:	f00a fc64 	bl	800eee8 <__aeabi_dcmpgt>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <FUNC_Transmission+0x11fa>
 8004626:	2300      	movs	r3, #0
 8004628:	461c      	mov	r4, r3
 800462a:	b2e3      	uxtb	r3, r4
 800462c:	461a      	mov	r2, r3
 800462e:	4b40      	ldr	r3, [pc, #256]	; (8004730 <FUNC_Transmission+0x1300>)
 8004630:	f883 26d4 	strb.w	r2, [r3, #1748]	; 0x6d4

    /* RelationalOperator: '<S201>/Relational Operator1' incorporates:
     *  Constant: '<S201>/Constant'
     */
    VCU_B.RelationalOperator1 = (3.0 < VCU_B.Add1_m);
 8004634:	4b3e      	ldr	r3, [pc, #248]	; (8004730 <FUNC_Transmission+0x1300>)
 8004636:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800463a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463e:	2101      	movs	r1, #1
 8004640:	460c      	mov	r4, r1
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	4b3b      	ldr	r3, [pc, #236]	; (8004738 <FUNC_Transmission+0x1308>)
 800464c:	f00a fc4c 	bl	800eee8 <__aeabi_dcmpgt>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <FUNC_Transmission+0x122a>
 8004656:	2300      	movs	r3, #0
 8004658:	461c      	mov	r4, r3
 800465a:	b2e3      	uxtb	r3, r4
 800465c:	461a      	mov	r2, r3
 800465e:	4b34      	ldr	r3, [pc, #208]	; (8004730 <FUNC_Transmission+0x1300>)
 8004660:	f883 26d5 	strb.w	r2, [r3, #1749]	; 0x6d5

    /* Logic: '<S201>/Logical Operator' */
    VCU_B.Brakelight = (VCU_B.RelationalOperator || VCU_B.RelationalOperator1);
 8004664:	4b32      	ldr	r3, [pc, #200]	; (8004730 <FUNC_Transmission+0x1300>)
 8004666:	f893 36d4 	ldrb.w	r3, [r3, #1748]	; 0x6d4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d104      	bne.n	8004678 <FUNC_Transmission+0x1248>
 800466e:	4b30      	ldr	r3, [pc, #192]	; (8004730 <FUNC_Transmission+0x1300>)
 8004670:	f893 36d5 	ldrb.w	r3, [r3, #1749]	; 0x6d5
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <FUNC_Transmission+0x124c>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <FUNC_Transmission+0x124e>
 800467c:	2300      	movs	r3, #0
 800467e:	b2da      	uxtb	r2, r3
 8004680:	4b2b      	ldr	r3, [pc, #172]	; (8004730 <FUNC_Transmission+0x1300>)
 8004682:	f883 26d6 	strb.w	r2, [r3, #1750]	; 0x6d6

    /* RelationalOperator: '<S201>/GreaterThan1' */
    VCU_B.GreaterThan1 = ((int32_T)VCU_B.Memory1 > (int32_T)VCU_B.Brakelight);
 8004686:	4b2a      	ldr	r3, [pc, #168]	; (8004730 <FUNC_Transmission+0x1300>)
 8004688:	f893 26d3 	ldrb.w	r2, [r3, #1747]	; 0x6d3
 800468c:	4b28      	ldr	r3, [pc, #160]	; (8004730 <FUNC_Transmission+0x1300>)
 800468e:	f893 36d6 	ldrb.w	r3, [r3, #1750]	; 0x6d6
 8004692:	429a      	cmp	r2, r3
 8004694:	bf8c      	ite	hi
 8004696:	2301      	movhi	r3, #1
 8004698:	2300      	movls	r3, #0
 800469a:	b2db      	uxtb	r3, r3
 800469c:	461a      	mov	r2, r3
 800469e:	4b24      	ldr	r3, [pc, #144]	; (8004730 <FUNC_Transmission+0x1300>)
 80046a0:	f883 26d7 	strb.w	r2, [r3, #1751]	; 0x6d7

    /* CombinatorialLogic: '<S227>/Logic' incorporates:
     *  Logic: '<S201>/Logical Operator1'
     *  Memory: '<S227>/Memory'
     */
    VCU_B.LogicalOperator1 = (VCU_B.LogicalOperator2 || VCU_B.GreaterThan1);
 80046a4:	4b22      	ldr	r3, [pc, #136]	; (8004730 <FUNC_Transmission+0x1300>)
 80046a6:	f893 36d2 	ldrb.w	r3, [r3, #1746]	; 0x6d2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d104      	bne.n	80046b8 <FUNC_Transmission+0x1288>
 80046ae:	4b20      	ldr	r3, [pc, #128]	; (8004730 <FUNC_Transmission+0x1300>)
 80046b0:	f893 36d7 	ldrb.w	r3, [r3, #1751]	; 0x6d7
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <FUNC_Transmission+0x128c>
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <FUNC_Transmission+0x128e>
 80046bc:	2300      	movs	r3, #0
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	4b1b      	ldr	r3, [pc, #108]	; (8004730 <FUNC_Transmission+0x1300>)
 80046c2:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
    VCU_B.Memory_c = VCU_DW.Memory_PreviousInput_j;
 80046c6:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <FUNC_Transmission+0x1304>)
 80046c8:	f893 2137 	ldrb.w	r2, [r3, #311]	; 0x137
 80046cc:	4b18      	ldr	r3, [pc, #96]	; (8004730 <FUNC_Transmission+0x1300>)
 80046ce:	f883 26d9 	strb.w	r2, [r3, #1753]	; 0x6d9
    rowIdx = VCU_B.GreaterThan;
 80046d2:	4b17      	ldr	r3, [pc, #92]	; (8004730 <FUNC_Transmission+0x1300>)
 80046d4:	f893 36d1 	ldrb.w	r3, [r3, #1745]	; 0x6d1
 80046d8:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.LogicalOperator1);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	4a14      	ldr	r2, [pc, #80]	; (8004730 <FUNC_Transmission+0x1300>)
 80046e0:	f892 26d8 	ldrb.w	r2, [r2, #1752]	; 0x6d8
 80046e4:	4413      	add	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_c);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	4a10      	ldr	r2, [pc, #64]	; (8004730 <FUNC_Transmission+0x1300>)
 80046ee:	f892 26d9 	ldrb.w	r2, [r2, #1753]	; 0x6d9
 80046f2:	4413      	add	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]
    VCU_B.Logic[0U] = VCU_ConstP.pooled37[(uint32_T)rowIdx];
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	4a10      	ldr	r2, [pc, #64]	; (800473c <FUNC_Transmission+0x130c>)
 80046fa:	4413      	add	r3, r2
 80046fc:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004700:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <FUNC_Transmission+0x1300>)
 8004702:	f883 26da 	strb.w	r2, [r3, #1754]	; 0x6da
    VCU_B.Logic[1U] = VCU_ConstP.pooled37[rowIdx + 8U];
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	3308      	adds	r3, #8
 800470a:	4a0c      	ldr	r2, [pc, #48]	; (800473c <FUNC_Transmission+0x130c>)
 800470c:	4413      	add	r3, r2
 800470e:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004712:	4b07      	ldr	r3, [pc, #28]	; (8004730 <FUNC_Transmission+0x1300>)
 8004714:	f883 26db 	strb.w	r2, [r3, #1755]	; 0x6db

    /* Logic: '<S201>/Logical Operator3' */
    VCU_B.LogicalOperator3 = (VCU_B.Logic[0] && VCU_B.Brakelight);
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <FUNC_Transmission+0x1300>)
 800471a:	f893 36da 	ldrb.w	r3, [r3, #1754]	; 0x6da
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00e      	beq.n	8004740 <FUNC_Transmission+0x1310>
 8004722:	4b03      	ldr	r3, [pc, #12]	; (8004730 <FUNC_Transmission+0x1300>)
 8004724:	f893 36d6 	ldrb.w	r3, [r3, #1750]	; 0x6d6
 8004728:	2b00      	cmp	r3, #0
 800472a:	d009      	beq.n	8004740 <FUNC_Transmission+0x1310>
 800472c:	2301      	movs	r3, #1
 800472e:	e008      	b.n	8004742 <FUNC_Transmission+0x1312>
 8004730:	200008c8 	.word	0x200008c8
 8004734:	20001058 	.word	0x20001058
 8004738:	40080000 	.word	0x40080000
 800473c:	0800f148 	.word	0x0800f148
 8004740:	2300      	movs	r3, #0
 8004742:	b2da      	uxtb	r2, r3
 8004744:	4b92      	ldr	r3, [pc, #584]	; (8004990 <FUNC_Transmission+0x1560>)
 8004746:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc

    /* DataTypeConversion: '<S138>/Data Type Conversion1' */
    VCU_B.LC_active_bit_f = VCU_B.LogicalOperator3;
 800474a:	4b91      	ldr	r3, [pc, #580]	; (8004990 <FUNC_Transmission+0x1560>)
 800474c:	f893 26dc 	ldrb.w	r2, [r3, #1756]	; 0x6dc
 8004750:	4b8f      	ldr	r3, [pc, #572]	; (8004990 <FUNC_Transmission+0x1560>)
 8004752:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
    /* CombinatorialLogic: '<S216>/Logic' incorporates:
     *  Delay: '<S199>/Delay'
     *  Memory: '<S216>/Memory'
     *  UnitDelay: '<S199>/Unit Delay1'
     */
    VCU_B.UnitDelay1 = VCU_DW.UnitDelay1_DSTATE;
 8004756:	4b8f      	ldr	r3, [pc, #572]	; (8004994 <FUNC_Transmission+0x1564>)
 8004758:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
 800475c:	4b8c      	ldr	r3, [pc, #560]	; (8004990 <FUNC_Transmission+0x1560>)
 800475e:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
    VCU_B.Delay = VCU_DW.Delay_DSTATE[0];
 8004762:	4b8c      	ldr	r3, [pc, #560]	; (8004994 <FUNC_Transmission+0x1564>)
 8004764:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
 8004768:	4b89      	ldr	r3, [pc, #548]	; (8004990 <FUNC_Transmission+0x1560>)
 800476a:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
    VCU_B.Memory_g = VCU_DW.Memory_PreviousInput_p;
 800476e:	4b89      	ldr	r3, [pc, #548]	; (8004994 <FUNC_Transmission+0x1564>)
 8004770:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
 8004774:	4b86      	ldr	r3, [pc, #536]	; (8004990 <FUNC_Transmission+0x1560>)
 8004776:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0
    rowIdx = VCU_B.UnitDelay1;
 800477a:	4b85      	ldr	r3, [pc, #532]	; (8004990 <FUNC_Transmission+0x1560>)
 800477c:	f893 36de 	ldrb.w	r3, [r3, #1758]	; 0x6de
 8004780:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Delay);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	4a82      	ldr	r2, [pc, #520]	; (8004990 <FUNC_Transmission+0x1560>)
 8004788:	f892 26df 	ldrb.w	r2, [r2, #1759]	; 0x6df
 800478c:	4413      	add	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_g);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	4a7e      	ldr	r2, [pc, #504]	; (8004990 <FUNC_Transmission+0x1560>)
 8004796:	f892 26e0 	ldrb.w	r2, [r2, #1760]	; 0x6e0
 800479a:	4413      	add	r3, r2
 800479c:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_o[0U] = VCU_ConstP.pooled37[(uint32_T)rowIdx];
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	4a7d      	ldr	r2, [pc, #500]	; (8004998 <FUNC_Transmission+0x1568>)
 80047a2:	4413      	add	r3, r2
 80047a4:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 80047a8:	4b79      	ldr	r3, [pc, #484]	; (8004990 <FUNC_Transmission+0x1560>)
 80047aa:	f883 26e1 	strb.w	r2, [r3, #1761]	; 0x6e1
    VCU_B.Logic_o[1U] = VCU_ConstP.pooled37[rowIdx + 8U];
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	3308      	adds	r3, #8
 80047b2:	4a79      	ldr	r2, [pc, #484]	; (8004998 <FUNC_Transmission+0x1568>)
 80047b4:	4413      	add	r3, r2
 80047b6:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 80047ba:	4b75      	ldr	r3, [pc, #468]	; (8004990 <FUNC_Transmission+0x1560>)
 80047bc:	f883 26e2 	strb.w	r2, [r3, #1762]	; 0x6e2

    /* DataTypeConversion: '<S138>/Data Type Conversion10' */
    VCU_B.VOVG_ShiftDown_m = VCU_B.Logic_o[0];
 80047c0:	4b73      	ldr	r3, [pc, #460]	; (8004990 <FUNC_Transmission+0x1560>)
 80047c2:	f893 36e1 	ldrb.w	r3, [r3, #1761]	; 0x6e1
 80047c6:	4618      	mov	r0, r3
 80047c8:	f00a f888 	bl	800e8dc <__aeabi_ui2d>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	496f      	ldr	r1, [pc, #444]	; (8004990 <FUNC_Transmission+0x1560>)
 80047d2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
     *
     * Block description for '<S213>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1 = VCU_DW.DelayInput1_DSTATE;
 80047d6:	4b6f      	ldr	r3, [pc, #444]	; (8004994 <FUNC_Transmission+0x1564>)
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	496c      	ldr	r1, [pc, #432]	; (8004990 <FUNC_Transmission+0x1560>)
 80047de:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    /* CombinatorialLogic: '<S214>/Logic' incorporates:
     *  Delay: '<S199>/Delay1'
     *  Memory: '<S214>/Memory'
     *  RelationalOperator: '<S213>/FixPt Relational Operator'
     */
    VCU_B.FixPtRelationalOperator = (VCU_B.STW_shift_down_request > VCU_B.Uk1);
 80047e2:	4b6b      	ldr	r3, [pc, #428]	; (8004990 <FUNC_Transmission+0x1560>)
 80047e4:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 80047e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047ec:	4b68      	ldr	r3, [pc, #416]	; (8004990 <FUNC_Transmission+0x1560>)
 80047ee:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80047f2:	2401      	movs	r4, #1
 80047f4:	f00a fb78 	bl	800eee8 <__aeabi_dcmpgt>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <FUNC_Transmission+0x13d2>
 80047fe:	2300      	movs	r3, #0
 8004800:	461c      	mov	r4, r3
 8004802:	b2e3      	uxtb	r3, r4
 8004804:	461a      	mov	r2, r3
 8004806:	4b62      	ldr	r3, [pc, #392]	; (8004990 <FUNC_Transmission+0x1560>)
 8004808:	f883 26e3 	strb.w	r2, [r3, #1763]	; 0x6e3
    VCU_B.Delay1 = VCU_DW.Delay1_DSTATE;
 800480c:	4b61      	ldr	r3, [pc, #388]	; (8004994 <FUNC_Transmission+0x1564>)
 800480e:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
 8004812:	4b5f      	ldr	r3, [pc, #380]	; (8004990 <FUNC_Transmission+0x1560>)
 8004814:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
    VCU_B.Memory_d = VCU_DW.Memory_PreviousInput_l;
 8004818:	4b5e      	ldr	r3, [pc, #376]	; (8004994 <FUNC_Transmission+0x1564>)
 800481a:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 800481e:	4b5c      	ldr	r3, [pc, #368]	; (8004990 <FUNC_Transmission+0x1560>)
 8004820:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
    rowIdx = VCU_B.FixPtRelationalOperator;
 8004824:	4b5a      	ldr	r3, [pc, #360]	; (8004990 <FUNC_Transmission+0x1560>)
 8004826:	f893 36e3 	ldrb.w	r3, [r3, #1763]	; 0x6e3
 800482a:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Delay1);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	4a57      	ldr	r2, [pc, #348]	; (8004990 <FUNC_Transmission+0x1560>)
 8004832:	f892 26e4 	ldrb.w	r2, [r2, #1764]	; 0x6e4
 8004836:	4413      	add	r3, r2
 8004838:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_d);
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	4a54      	ldr	r2, [pc, #336]	; (8004990 <FUNC_Transmission+0x1560>)
 8004840:	f892 26e5 	ldrb.w	r2, [r2, #1765]	; 0x6e5
 8004844:	4413      	add	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_i[0U] = VCU_ConstP.pooled37[(uint32_T)rowIdx];
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	4a53      	ldr	r2, [pc, #332]	; (8004998 <FUNC_Transmission+0x1568>)
 800484c:	4413      	add	r3, r2
 800484e:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004852:	4b4f      	ldr	r3, [pc, #316]	; (8004990 <FUNC_Transmission+0x1560>)
 8004854:	f883 26e6 	strb.w	r2, [r3, #1766]	; 0x6e6
    VCU_B.Logic_i[1U] = VCU_ConstP.pooled37[rowIdx + 8U];
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	3308      	adds	r3, #8
 800485c:	4a4e      	ldr	r2, [pc, #312]	; (8004998 <FUNC_Transmission+0x1568>)
 800485e:	4413      	add	r3, r2
 8004860:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004864:	4b4a      	ldr	r3, [pc, #296]	; (8004990 <FUNC_Transmission+0x1560>)
 8004866:	f883 26e7 	strb.w	r2, [r3, #1767]	; 0x6e7

    /* UnitDelay: '<S199>/Unit Delay4' */
    VCU_B.UnitDelay4 = VCU_DW.UnitDelay4_DSTATE;
 800486a:	4b4a      	ldr	r3, [pc, #296]	; (8004994 <FUNC_Transmission+0x1564>)
 800486c:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
 8004870:	4b47      	ldr	r3, [pc, #284]	; (8004990 <FUNC_Transmission+0x1560>)
 8004872:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8

    /* Gain: '<S217>/Gain' */
    VCU_B.Gain = 2.0 * VCU_B.DataTypeConversion1;
 8004876:	4b46      	ldr	r3, [pc, #280]	; (8004990 <FUNC_Transmission+0x1560>)
 8004878:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 800487c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004880:	4610      	mov	r0, r2
 8004882:	4619      	mov	r1, r3
 8004884:	f009 feee 	bl	800e664 <__adddf3>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4940      	ldr	r1, [pc, #256]	; (8004990 <FUNC_Transmission+0x1560>)
 800488e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

    /* RelationalOperator: '<S217>/Relational Operator' incorporates:
     *  Constant: '<S217>/Constant'
     */
    VCU_B.RelationalOperator_m = (VCU_B.Gain > 169.0);
 8004892:	4b3f      	ldr	r3, [pc, #252]	; (8004990 <FUNC_Transmission+0x1560>)
 8004894:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004898:	2101      	movs	r1, #1
 800489a:	460c      	mov	r4, r1
 800489c:	4610      	mov	r0, r2
 800489e:	4619      	mov	r1, r3
 80048a0:	a337      	add	r3, pc, #220	; (adr r3, 8004980 <FUNC_Transmission+0x1550>)
 80048a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a6:	f00a fb1f 	bl	800eee8 <__aeabi_dcmpgt>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <FUNC_Transmission+0x1484>
 80048b0:	2300      	movs	r3, #0
 80048b2:	461c      	mov	r4, r3
 80048b4:	b2e3      	uxtb	r3, r4
 80048b6:	461a      	mov	r2, r3
 80048b8:	4b35      	ldr	r3, [pc, #212]	; (8004990 <FUNC_Transmission+0x1560>)
 80048ba:	f883 26e9 	strb.w	r2, [r3, #1769]	; 0x6e9

    /* RelationalOperator: '<S217>/Relational Operator1' incorporates:
     *  Constant: '<S217>/Constant1'
     */
    VCU_B.RelationalOperator1_o = (VCU_B.Gain > 228.0);
 80048be:	4b34      	ldr	r3, [pc, #208]	; (8004990 <FUNC_Transmission+0x1560>)
 80048c0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80048c4:	2101      	movs	r1, #1
 80048c6:	460c      	mov	r4, r1
 80048c8:	4610      	mov	r0, r2
 80048ca:	4619      	mov	r1, r3
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	4b32      	ldr	r3, [pc, #200]	; (800499c <FUNC_Transmission+0x156c>)
 80048d2:	f00a fb09 	bl	800eee8 <__aeabi_dcmpgt>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <FUNC_Transmission+0x14b0>
 80048dc:	2300      	movs	r3, #0
 80048de:	461c      	mov	r4, r3
 80048e0:	b2e3      	uxtb	r3, r4
 80048e2:	461a      	mov	r2, r3
 80048e4:	4b2a      	ldr	r3, [pc, #168]	; (8004990 <FUNC_Transmission+0x1560>)
 80048e6:	f883 26ea 	strb.w	r2, [r3, #1770]	; 0x6ea

    /* RelationalOperator: '<S217>/Relational Operator2' incorporates:
     *  Constant: '<S217>/Constant2'
     */
    VCU_B.RelationalOperator2 = (VCU_B.Gain > 325.0);
 80048ea:	4b29      	ldr	r3, [pc, #164]	; (8004990 <FUNC_Transmission+0x1560>)
 80048ec:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80048f0:	2101      	movs	r1, #1
 80048f2:	460c      	mov	r4, r1
 80048f4:	4610      	mov	r0, r2
 80048f6:	4619      	mov	r1, r3
 80048f8:	a323      	add	r3, pc, #140	; (adr r3, 8004988 <FUNC_Transmission+0x1558>)
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	f00a faf3 	bl	800eee8 <__aeabi_dcmpgt>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <FUNC_Transmission+0x14dc>
 8004908:	2300      	movs	r3, #0
 800490a:	461c      	mov	r4, r3
 800490c:	b2e3      	uxtb	r3, r4
 800490e:	461a      	mov	r2, r3
 8004910:	4b1f      	ldr	r3, [pc, #124]	; (8004990 <FUNC_Transmission+0x1560>)
 8004912:	f883 26eb 	strb.w	r2, [r3, #1771]	; 0x6eb

    /* Sum: '<S217>/Add' */
    VCU_B.Add_c = (uint8_T)(((uint32_T)VCU_B.RelationalOperator_m +
 8004916:	4b1e      	ldr	r3, [pc, #120]	; (8004990 <FUNC_Transmission+0x1560>)
 8004918:	f893 26e9 	ldrb.w	r2, [r3, #1769]	; 0x6e9
      VCU_B.RelationalOperator1_o) + VCU_B.RelationalOperator2);
 800491c:	4b1c      	ldr	r3, [pc, #112]	; (8004990 <FUNC_Transmission+0x1560>)
 800491e:	f893 36ea 	ldrb.w	r3, [r3, #1770]	; 0x6ea
     *  Constant: '<S217>/Constant2'
     */
    VCU_B.RelationalOperator2 = (VCU_B.Gain > 325.0);

    /* Sum: '<S217>/Add' */
    VCU_B.Add_c = (uint8_T)(((uint32_T)VCU_B.RelationalOperator_m +
 8004922:	4413      	add	r3, r2
 8004924:	b2da      	uxtb	r2, r3
      VCU_B.RelationalOperator1_o) + VCU_B.RelationalOperator2);
 8004926:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <FUNC_Transmission+0x1560>)
 8004928:	f893 36eb 	ldrb.w	r3, [r3, #1771]	; 0x6eb
     *  Constant: '<S217>/Constant2'
     */
    VCU_B.RelationalOperator2 = (VCU_B.Gain > 325.0);

    /* Sum: '<S217>/Add' */
    VCU_B.Add_c = (uint8_T)(((uint32_T)VCU_B.RelationalOperator_m +
 800492c:	4413      	add	r3, r2
 800492e:	b2da      	uxtb	r2, r3
 8004930:	4b17      	ldr	r3, [pc, #92]	; (8004990 <FUNC_Transmission+0x1560>)
 8004932:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
      VCU_B.RelationalOperator1_o) + VCU_B.RelationalOperator2);

    /* RelationalOperator: '<S207>/Compare' incorporates:
     *  Constant: '<S207>/Constant'
     */
    VCU_B.Compare_b = (VCU_B.x_clutch_STW >= 15.0);
 8004936:	4b16      	ldr	r3, [pc, #88]	; (8004990 <FUNC_Transmission+0x1560>)
 8004938:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	2101      	movs	r1, #1
 8004942:	460c      	mov	r4, r1
 8004944:	4610      	mov	r0, r2
 8004946:	4619      	mov	r1, r3
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <FUNC_Transmission+0x1570>)
 800494e:	f00a fac1 	bl	800eed4 <__aeabi_dcmpge>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <FUNC_Transmission+0x152c>
 8004958:	2300      	movs	r3, #0
 800495a:	461c      	mov	r4, r3
 800495c:	b2e3      	uxtb	r3, r4
 800495e:	461a      	mov	r2, r3
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <FUNC_Transmission+0x1560>)
 8004962:	f883 26ec 	strb.w	r2, [r3, #1772]	; 0x6ec

    /* Switch: '<S199>/Switch' incorporates:
     *  Constant: '<S199>/Constant'
     *  Constant: '<S199>/Constant1'
     */
    if (VCU_B.Compare_b) {
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <FUNC_Transmission+0x1560>)
 8004968:	f893 36ec 	ldrb.w	r3, [r3, #1772]	; 0x6ec
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01b      	beq.n	80049a8 <FUNC_Transmission+0x1578>
      VCU_B.Switch = 1.0;
 8004970:	4907      	ldr	r1, [pc, #28]	; (8004990 <FUNC_Transmission+0x1560>)
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <FUNC_Transmission+0x1574>)
 8004978:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800497c:	e01b      	b.n	80049b6 <FUNC_Transmission+0x1586>
 800497e:	bf00      	nop
 8004980:	00000000 	.word	0x00000000
 8004984:	40652000 	.word	0x40652000
 8004988:	00000000 	.word	0x00000000
 800498c:	40745000 	.word	0x40745000
 8004990:	200008c8 	.word	0x200008c8
 8004994:	20001058 	.word	0x20001058
 8004998:	0800f148 	.word	0x0800f148
 800499c:	406c8000 	.word	0x406c8000
 80049a0:	402e0000 	.word	0x402e0000
 80049a4:	3ff00000 	.word	0x3ff00000
    } else {
      VCU_B.Switch = 2.0;
 80049a8:	495f      	ldr	r1, [pc, #380]	; (8004b28 <FUNC_Transmission+0x16f8>)
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049b2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    }

    /* End of Switch: '<S199>/Switch' */

    /* RelationalOperator: '<S199>/Relational Operator' */
    VCU_B.LessthanNeutral = (VCU_B.Add_c < VCU_B.Switch);
 80049b6:	4b5c      	ldr	r3, [pc, #368]	; (8004b28 <FUNC_Transmission+0x16f8>)
 80049b8:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 80049bc:	4618      	mov	r0, r3
 80049be:	f009 ff9d 	bl	800e8fc <__aeabi_i2d>
 80049c2:	4604      	mov	r4, r0
 80049c4:	460d      	mov	r5, r1
 80049c6:	4b58      	ldr	r3, [pc, #352]	; (8004b28 <FUNC_Transmission+0x16f8>)
 80049c8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80049cc:	2101      	movs	r1, #1
 80049ce:	460e      	mov	r6, r1
 80049d0:	4620      	mov	r0, r4
 80049d2:	4629      	mov	r1, r5
 80049d4:	f00a fa6a 	bl	800eeac <__aeabi_dcmplt>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <FUNC_Transmission+0x15b2>
 80049de:	2300      	movs	r3, #0
 80049e0:	461e      	mov	r6, r3
 80049e2:	b2f3      	uxtb	r3, r6
 80049e4:	461a      	mov	r2, r3
 80049e6:	4b50      	ldr	r3, [pc, #320]	; (8004b28 <FUNC_Transmission+0x16f8>)
 80049e8:	f883 26ed 	strb.w	r2, [r3, #1773]	; 0x6ed

    /* UnitDelay: '<S200>/Unit Delay' */
    VCU_B.UnitDelay = VCU_DW.UnitDelay_DSTATE;
 80049ec:	4b4f      	ldr	r3, [pc, #316]	; (8004b2c <FUNC_Transmission+0x16fc>)
 80049ee:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
 80049f2:	4b4d      	ldr	r3, [pc, #308]	; (8004b28 <FUNC_Transmission+0x16f8>)
 80049f4:	f883 26ee 	strb.w	r2, [r3, #1774]	; 0x6ee

    /* UnitDelay: '<S199>/Unit Delay2' */
    VCU_B.Timeout = VCU_DW.UnitDelay2_DSTATE;
 80049f8:	4b4c      	ldr	r3, [pc, #304]	; (8004b2c <FUNC_Transmission+0x16fc>)
 80049fa:	f893 20da 	ldrb.w	r2, [r3, #218]	; 0xda
 80049fe:	4b4a      	ldr	r3, [pc, #296]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004a00:	f883 26ef 	strb.w	r2, [r3, #1775]	; 0x6ef

    /* RelationalOperator: '<S208>/Compare' incorporates:
     *  Constant: '<S208>/Constant'
     */
    VCU_B.Compare_f = (VCU_B.DataTypeConversion2 > 5000.0);
 8004a04:	4b48      	ldr	r3, [pc, #288]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004a06:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8004a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0e:	2101      	movs	r1, #1
 8004a10:	460c      	mov	r4, r1
 8004a12:	4610      	mov	r0, r2
 8004a14:	4619      	mov	r1, r3
 8004a16:	a340      	add	r3, pc, #256	; (adr r3, 8004b18 <FUNC_Transmission+0x16e8>)
 8004a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1c:	f00a fa64 	bl	800eee8 <__aeabi_dcmpgt>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <FUNC_Transmission+0x15fa>
 8004a26:	2300      	movs	r3, #0
 8004a28:	461c      	mov	r4, r3
 8004a2a:	b2e3      	uxtb	r3, r4
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4b3e      	ldr	r3, [pc, #248]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004a30:	f883 26f0 	strb.w	r2, [r3, #1776]	; 0x6f0

    /* RelationalOperator: '<S209>/Compare' incorporates:
     *  Constant: '<S209>/Constant'
     */
    VCU_B.Compare_n = (VCU_B.Add_c == 2);
 8004a34:	4b3c      	ldr	r3, [pc, #240]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004a36:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	bf0c      	ite	eq
 8004a3e:	2301      	moveq	r3, #1
 8004a40:	2300      	movne	r3, #0
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	461a      	mov	r2, r3
 8004a46:	4b38      	ldr	r3, [pc, #224]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004a48:	f883 26f1 	strb.w	r2, [r3, #1777]	; 0x6f1

    /* Logic: '<S199>/Logical Operator1' */
    VCU_B.RPMcheckgear21 = (VCU_B.Compare_n && VCU_B.Compare_f);
 8004a4c:	4b36      	ldr	r3, [pc, #216]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004a4e:	f893 36f1 	ldrb.w	r3, [r3, #1777]	; 0x6f1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d006      	beq.n	8004a64 <FUNC_Transmission+0x1634>
 8004a56:	4b34      	ldr	r3, [pc, #208]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004a58:	f893 36f0 	ldrb.w	r3, [r3, #1776]	; 0x6f0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <FUNC_Transmission+0x1634>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <FUNC_Transmission+0x1636>
 8004a64:	2300      	movs	r3, #0
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	4b2f      	ldr	r3, [pc, #188]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004a6a:	f883 26f2 	strb.w	r2, [r3, #1778]	; 0x6f2

    /* RelationalOperator: '<S210>/Compare' incorporates:
     *  Constant: '<S210>/Constant'
     */
    VCU_B.Compare_l = (VCU_B.DataTypeConversion2 > 5300.0);
 8004a6e:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004a70:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	2101      	movs	r1, #1
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	a327      	add	r3, pc, #156	; (adr r3, 8004b20 <FUNC_Transmission+0x16f0>)
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f00a fa2f 	bl	800eee8 <__aeabi_dcmpgt>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <FUNC_Transmission+0x1664>
 8004a90:	2300      	movs	r3, #0
 8004a92:	461c      	mov	r4, r3
 8004a94:	b2e3      	uxtb	r3, r4
 8004a96:	461a      	mov	r2, r3
 8004a98:	4b23      	ldr	r3, [pc, #140]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004a9a:	f883 26f3 	strb.w	r2, [r3, #1779]	; 0x6f3

    /* RelationalOperator: '<S211>/Compare' incorporates:
     *  Constant: '<S211>/Constant'
     */
    VCU_B.Compare_h = (VCU_B.Add_c == 3);
 8004a9e:	4b22      	ldr	r3, [pc, #136]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004aa0:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2301      	moveq	r3, #1
 8004aaa:	2300      	movne	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004ab2:	f883 26f4 	strb.w	r2, [r3, #1780]	; 0x6f4

    /* Logic: '<S199>/Logical Operator2' */
    VCU_B.RPMcheckgear31 = (VCU_B.Compare_l && VCU_B.Compare_h);
 8004ab6:	4b1c      	ldr	r3, [pc, #112]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004ab8:	f893 36f3 	ldrb.w	r3, [r3, #1779]	; 0x6f3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d006      	beq.n	8004ace <FUNC_Transmission+0x169e>
 8004ac0:	4b19      	ldr	r3, [pc, #100]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004ac2:	f893 36f4 	ldrb.w	r3, [r3, #1780]	; 0x6f4
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <FUNC_Transmission+0x169e>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e000      	b.n	8004ad0 <FUNC_Transmission+0x16a0>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004ad4:	f883 26f5 	strb.w	r2, [r3, #1781]	; 0x6f5

    /* CombinatorialLogic: '<S215>/Logic' incorporates:
     *  Logic: '<S199>/Logical Operator'
     *  Memory: '<S215>/Memory'
     */
    VCU_B.LogicalOperator_d = (VCU_B.UnitDelay4 || VCU_B.LessthanNeutral ||
 8004ad8:	4b13      	ldr	r3, [pc, #76]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004ada:	f893 36e8 	ldrb.w	r3, [r3, #1768]	; 0x6e8
      VCU_B.UnitDelay || VCU_B.Timeout || VCU_B.RPMcheckgear21 ||
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d118      	bne.n	8004b14 <FUNC_Transmission+0x16e4>

    /* CombinatorialLogic: '<S215>/Logic' incorporates:
     *  Logic: '<S199>/Logical Operator'
     *  Memory: '<S215>/Memory'
     */
    VCU_B.LogicalOperator_d = (VCU_B.UnitDelay4 || VCU_B.LessthanNeutral ||
 8004ae2:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004ae4:	f893 36ed 	ldrb.w	r3, [r3, #1773]	; 0x6ed
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d113      	bne.n	8004b14 <FUNC_Transmission+0x16e4>
      VCU_B.UnitDelay || VCU_B.Timeout || VCU_B.RPMcheckgear21 ||
 8004aec:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004aee:	f893 36ee 	ldrb.w	r3, [r3, #1774]	; 0x6ee

    /* CombinatorialLogic: '<S215>/Logic' incorporates:
     *  Logic: '<S199>/Logical Operator'
     *  Memory: '<S215>/Memory'
     */
    VCU_B.LogicalOperator_d = (VCU_B.UnitDelay4 || VCU_B.LessthanNeutral ||
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10e      	bne.n	8004b14 <FUNC_Transmission+0x16e4>
      VCU_B.UnitDelay || VCU_B.Timeout || VCU_B.RPMcheckgear21 ||
 8004af6:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004af8:	f893 36ef 	ldrb.w	r3, [r3, #1775]	; 0x6ef
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d109      	bne.n	8004b14 <FUNC_Transmission+0x16e4>
 8004b00:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004b02:	f893 36f2 	ldrb.w	r3, [r3, #1778]	; 0x6f2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d104      	bne.n	8004b14 <FUNC_Transmission+0x16e4>
      VCU_B.RPMcheckgear31);
 8004b0a:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <FUNC_Transmission+0x16f8>)
 8004b0c:	f893 36f5 	ldrb.w	r3, [r3, #1781]	; 0x6f5
    /* CombinatorialLogic: '<S215>/Logic' incorporates:
     *  Logic: '<S199>/Logical Operator'
     *  Memory: '<S215>/Memory'
     */
    VCU_B.LogicalOperator_d = (VCU_B.UnitDelay4 || VCU_B.LessthanNeutral ||
      VCU_B.UnitDelay || VCU_B.Timeout || VCU_B.RPMcheckgear21 ||
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00d      	beq.n	8004b30 <FUNC_Transmission+0x1700>
 8004b14:	2301      	movs	r3, #1
 8004b16:	e00c      	b.n	8004b32 <FUNC_Transmission+0x1702>
 8004b18:	00000000 	.word	0x00000000
 8004b1c:	40b38800 	.word	0x40b38800
 8004b20:	00000000 	.word	0x00000000
 8004b24:	40b4b400 	.word	0x40b4b400
 8004b28:	200008c8 	.word	0x200008c8
 8004b2c:	20001058 	.word	0x20001058
 8004b30:	2300      	movs	r3, #0

    /* CombinatorialLogic: '<S215>/Logic' incorporates:
     *  Logic: '<S199>/Logical Operator'
     *  Memory: '<S215>/Memory'
     */
    VCU_B.LogicalOperator_d = (VCU_B.UnitDelay4 || VCU_B.LessthanNeutral ||
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	4b96      	ldr	r3, [pc, #600]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004b36:	f883 26f6 	strb.w	r2, [r3, #1782]	; 0x6f6
      VCU_B.UnitDelay || VCU_B.Timeout || VCU_B.RPMcheckgear21 ||
      VCU_B.RPMcheckgear31);
    VCU_B.Memory_l = VCU_DW.Memory_PreviousInput_a;
 8004b3a:	4b96      	ldr	r3, [pc, #600]	; (8004d94 <FUNC_Transmission+0x1964>)
 8004b3c:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8004b40:	4b93      	ldr	r3, [pc, #588]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004b42:	f883 26f7 	strb.w	r2, [r3, #1783]	; 0x6f7
    tmp = VCU_B.Logic_i[0];
 8004b46:	4b92      	ldr	r3, [pc, #584]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004b48:	f893 36e6 	ldrb.w	r3, [r3, #1766]	; 0x6e6
 8004b4c:	71fb      	strb	r3, [r7, #7]
    rowIdx = tmp;
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.LogicalOperator_d);
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	4a8e      	ldr	r2, [pc, #568]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004b58:	f892 26f6 	ldrb.w	r2, [r2, #1782]	; 0x6f6
 8004b5c:	4413      	add	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_l);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	4a8a      	ldr	r2, [pc, #552]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004b66:	f892 26f7 	ldrb.w	r2, [r2, #1783]	; 0x6f7
 8004b6a:	4413      	add	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_iy[0U] = VCU_ConstP.pooled37[(uint32_T)rowIdx];
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	4a89      	ldr	r2, [pc, #548]	; (8004d98 <FUNC_Transmission+0x1968>)
 8004b72:	4413      	add	r3, r2
 8004b74:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004b78:	4b85      	ldr	r3, [pc, #532]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004b7a:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
    VCU_B.Logic_iy[1U] = VCU_ConstP.pooled37[rowIdx + 8U];
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	3308      	adds	r3, #8
 8004b82:	4a85      	ldr	r2, [pc, #532]	; (8004d98 <FUNC_Transmission+0x1968>)
 8004b84:	4413      	add	r3, r2
 8004b86:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004b8a:	4b81      	ldr	r3, [pc, #516]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004b8c:	f883 26f9 	strb.w	r2, [r3, #1785]	; 0x6f9
     *
     * Block description for '<S221>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_i = VCU_DW.DelayInput1_DSTATE_g;
 8004b90:	4b80      	ldr	r3, [pc, #512]	; (8004d94 <FUNC_Transmission+0x1964>)
 8004b92:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b96:	497e      	ldr	r1, [pc, #504]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004b98:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* CombinatorialLogic: '<S224>/Logic' incorporates:
     *  RelationalOperator: '<S221>/FixPt Relational Operator'
     */
    VCU_B.FixPtRelationalOperator_c = (VCU_B.STW_shift_up_request > VCU_B.Uk1_i);
 8004b9c:	4b7c      	ldr	r3, [pc, #496]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004b9e:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8004ba2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ba6:	4b7a      	ldr	r3, [pc, #488]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004ba8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004bac:	2401      	movs	r4, #1
 8004bae:	f00a f99b 	bl	800eee8 <__aeabi_dcmpgt>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <FUNC_Transmission+0x178c>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	461c      	mov	r4, r3
 8004bbc:	b2e3      	uxtb	r3, r4
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4b73      	ldr	r3, [pc, #460]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004bc2:	f883 26fa 	strb.w	r2, [r3, #1786]	; 0x6fa

    /* Gain: '<S226>/Gain' */
    VCU_B.Gain_m = 2.0 * VCU_B.DataTypeConversion1;
 8004bc6:	4b72      	ldr	r3, [pc, #456]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004bc8:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	f009 fd46 	bl	800e664 <__adddf3>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	496c      	ldr	r1, [pc, #432]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004bde:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

    /* RelationalOperator: '<S226>/Relational Operator' incorporates:
     *  Constant: '<S226>/Constant'
     */
    VCU_B.RelationalOperator_d = (VCU_B.Gain_m > 169.0);
 8004be2:	4b6b      	ldr	r3, [pc, #428]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004be4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004be8:	2101      	movs	r1, #1
 8004bea:	460c      	mov	r4, r1
 8004bec:	4610      	mov	r0, r2
 8004bee:	4619      	mov	r1, r3
 8004bf0:	a363      	add	r3, pc, #396	; (adr r3, 8004d80 <FUNC_Transmission+0x1950>)
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	f00a f977 	bl	800eee8 <__aeabi_dcmpgt>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <FUNC_Transmission+0x17d4>
 8004c00:	2300      	movs	r3, #0
 8004c02:	461c      	mov	r4, r3
 8004c04:	b2e3      	uxtb	r3, r4
 8004c06:	461a      	mov	r2, r3
 8004c08:	4b61      	ldr	r3, [pc, #388]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004c0a:	f883 26fb 	strb.w	r2, [r3, #1787]	; 0x6fb

    /* RelationalOperator: '<S226>/Relational Operator1' incorporates:
     *  Constant: '<S226>/Constant1'
     */
    VCU_B.RelationalOperator1_a = (VCU_B.Gain_m > 269.0);
 8004c0e:	4b60      	ldr	r3, [pc, #384]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004c10:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004c14:	2101      	movs	r1, #1
 8004c16:	460c      	mov	r4, r1
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	a35a      	add	r3, pc, #360	; (adr r3, 8004d88 <FUNC_Transmission+0x1958>)
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	f00a f961 	bl	800eee8 <__aeabi_dcmpgt>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <FUNC_Transmission+0x1800>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	461c      	mov	r4, r3
 8004c30:	b2e3      	uxtb	r3, r4
 8004c32:	461a      	mov	r2, r3
 8004c34:	4b56      	ldr	r3, [pc, #344]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004c36:	f883 26fc 	strb.w	r2, [r3, #1788]	; 0x6fc

    /* RelationalOperator: '<S226>/Relational Operator2' incorporates:
     *  Constant: '<S226>/Constant2'
     */
    VCU_B.RelationalOperator2_d = (VCU_B.Gain_m > 360.0);
 8004c3a:	4b55      	ldr	r3, [pc, #340]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004c3c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004c40:	2101      	movs	r1, #1
 8004c42:	460c      	mov	r4, r1
 8004c44:	4610      	mov	r0, r2
 8004c46:	4619      	mov	r1, r3
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	4b53      	ldr	r3, [pc, #332]	; (8004d9c <FUNC_Transmission+0x196c>)
 8004c4e:	f00a f94b 	bl	800eee8 <__aeabi_dcmpgt>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <FUNC_Transmission+0x182c>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	461c      	mov	r4, r3
 8004c5c:	b2e3      	uxtb	r3, r4
 8004c5e:	461a      	mov	r2, r3
 8004c60:	4b4b      	ldr	r3, [pc, #300]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004c62:	f883 26fd 	strb.w	r2, [r3, #1789]	; 0x6fd

    /* Sum: '<S226>/Add' */
    VCU_B.Add_j = (uint8_T)(((uint32_T)VCU_B.RelationalOperator_d +
 8004c66:	4b4a      	ldr	r3, [pc, #296]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004c68:	f893 26fb 	ldrb.w	r2, [r3, #1787]	; 0x6fb
      VCU_B.RelationalOperator1_a) + VCU_B.RelationalOperator2_d);
 8004c6c:	4b48      	ldr	r3, [pc, #288]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004c6e:	f893 36fc 	ldrb.w	r3, [r3, #1788]	; 0x6fc
     *  Constant: '<S226>/Constant2'
     */
    VCU_B.RelationalOperator2_d = (VCU_B.Gain_m > 360.0);

    /* Sum: '<S226>/Add' */
    VCU_B.Add_j = (uint8_T)(((uint32_T)VCU_B.RelationalOperator_d +
 8004c72:	4413      	add	r3, r2
 8004c74:	b2da      	uxtb	r2, r3
      VCU_B.RelationalOperator1_a) + VCU_B.RelationalOperator2_d);
 8004c76:	4b46      	ldr	r3, [pc, #280]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004c78:	f893 36fd 	ldrb.w	r3, [r3, #1789]	; 0x6fd
     *  Constant: '<S226>/Constant2'
     */
    VCU_B.RelationalOperator2_d = (VCU_B.Gain_m > 360.0);

    /* Sum: '<S226>/Add' */
    VCU_B.Add_j = (uint8_T)(((uint32_T)VCU_B.RelationalOperator_d +
 8004c7c:	4413      	add	r3, r2
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	4b43      	ldr	r3, [pc, #268]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004c82:	f883 2685 	strb.w	r2, [r3, #1669]	; 0x685
     *
     * Block description for '<S222>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_b = VCU_DW.DelayInput1_DSTATE_ga;
 8004c86:	4b43      	ldr	r3, [pc, #268]	; (8004d94 <FUNC_Transmission+0x1964>)
 8004c88:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
 8004c8c:	4b40      	ldr	r3, [pc, #256]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004c8e:	f883 2686 	strb.w	r2, [r3, #1670]	; 0x686

    /* RelationalOperator: '<S222>/FixPt Relational Operator' */
    VCU_B.FixPtRelationalOperator_m = (VCU_B.Add_j > VCU_B.Uk1_b);
 8004c92:	4b3f      	ldr	r3, [pc, #252]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004c94:	f893 2685 	ldrb.w	r2, [r3, #1669]	; 0x685
 8004c98:	4b3d      	ldr	r3, [pc, #244]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004c9a:	f893 3686 	ldrb.w	r3, [r3, #1670]	; 0x686
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	bf8c      	ite	hi
 8004ca2:	2301      	movhi	r3, #1
 8004ca4:	2300      	movls	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4b39      	ldr	r3, [pc, #228]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004cac:	f883 26fe 	strb.w	r2, [r3, #1790]	; 0x6fe

    /* RelationalOperator: '<S218>/Compare' incorporates:
     *  Constant: '<S218>/Constant'
     */
    VCU_B.Compare_ha = (VCU_B.Add_j >= 3);
 8004cb0:	4b37      	ldr	r3, [pc, #220]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004cb2:	f893 3685 	ldrb.w	r3, [r3, #1669]	; 0x685
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	bf8c      	ite	hi
 8004cba:	2301      	movhi	r3, #1
 8004cbc:	2300      	movls	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4b33      	ldr	r3, [pc, #204]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004cc4:	f883 26ff 	strb.w	r2, [r3, #1791]	; 0x6ff

    /* UnitDelay: '<S199>/Unit Delay' */
    VCU_B.UnitDelay_p = VCU_DW.UnitDelay_DSTATE_b;
 8004cc8:	4b32      	ldr	r3, [pc, #200]	; (8004d94 <FUNC_Transmission+0x1964>)
 8004cca:	f893 20db 	ldrb.w	r2, [r3, #219]	; 0xdb
 8004cce:	4b30      	ldr	r3, [pc, #192]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004cd0:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700

    /* UnitDelay: '<S200>/Unit Delay1' */
    VCU_B.Timeout_i = VCU_DW.UnitDelay1_DSTATE_k;
 8004cd4:	4b2f      	ldr	r3, [pc, #188]	; (8004d94 <FUNC_Transmission+0x1964>)
 8004cd6:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004cda:	4b2d      	ldr	r3, [pc, #180]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004cdc:	f883 2701 	strb.w	r2, [r3, #1793]	; 0x701

    /* RelationalOperator: '<S220>/Compare' incorporates:
     *  Constant: '<S220>/Constant'
     */
    VCU_B.Compare_e = (VCU_B.Add_j == 0);
 8004ce0:	4b2b      	ldr	r3, [pc, #172]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004ce2:	f893 3685 	ldrb.w	r3, [r3, #1669]	; 0x685
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bf0c      	ite	eq
 8004cea:	2301      	moveq	r3, #1
 8004cec:	2300      	movne	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	4b27      	ldr	r3, [pc, #156]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004cf4:	f883 2702 	strb.w	r2, [r3, #1794]	; 0x702

    /* RelationalOperator: '<S219>/Compare' incorporates:
     *  Constant: '<S219>/Constant'
     */
    VCU_B.Compare_a = (VCU_B.x_clutch_STW < 15.0);
 8004cf8:	4b25      	ldr	r3, [pc, #148]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004cfa:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	2101      	movs	r1, #1
 8004d04:	460c      	mov	r4, r1
 8004d06:	4610      	mov	r0, r2
 8004d08:	4619      	mov	r1, r3
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	4b24      	ldr	r3, [pc, #144]	; (8004da0 <FUNC_Transmission+0x1970>)
 8004d10:	f00a f8cc 	bl	800eeac <__aeabi_dcmplt>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <FUNC_Transmission+0x18ee>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	461c      	mov	r4, r3
 8004d1e:	b2e3      	uxtb	r3, r4
 8004d20:	461a      	mov	r2, r3
 8004d22:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004d24:	f883 2703 	strb.w	r2, [r3, #1795]	; 0x703

    /* Logic: '<S200>/Logical Operator1' */
    VCU_B.FailSafefirstgear = (VCU_B.Compare_e && VCU_B.Compare_a);
 8004d28:	4b19      	ldr	r3, [pc, #100]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004d2a:	f893 3702 	ldrb.w	r3, [r3, #1794]	; 0x702
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d006      	beq.n	8004d40 <FUNC_Transmission+0x1910>
 8004d32:	4b17      	ldr	r3, [pc, #92]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004d34:	f893 3703 	ldrb.w	r3, [r3, #1795]	; 0x703
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <FUNC_Transmission+0x1910>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <FUNC_Transmission+0x1912>
 8004d40:	2300      	movs	r3, #0
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	4b12      	ldr	r3, [pc, #72]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004d46:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704

    /* CombinatorialLogic: '<S224>/Logic' incorporates:
     *  Logic: '<S200>/Logical Operator'
     *  Memory: '<S224>/Memory'
     */
    VCU_B.LogicalOperator_i = (VCU_B.FixPtRelationalOperator_m ||
 8004d4a:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004d4c:	f893 36fe 	ldrb.w	r3, [r3, #1790]	; 0x6fe
      VCU_B.Compare_ha || VCU_B.UnitDelay_p || VCU_B.Timeout_i ||
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d113      	bne.n	8004d7c <FUNC_Transmission+0x194c>
 8004d54:	4b0e      	ldr	r3, [pc, #56]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004d56:	f893 36ff 	ldrb.w	r3, [r3, #1791]	; 0x6ff

    /* CombinatorialLogic: '<S224>/Logic' incorporates:
     *  Logic: '<S200>/Logical Operator'
     *  Memory: '<S224>/Memory'
     */
    VCU_B.LogicalOperator_i = (VCU_B.FixPtRelationalOperator_m ||
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10e      	bne.n	8004d7c <FUNC_Transmission+0x194c>
      VCU_B.Compare_ha || VCU_B.UnitDelay_p || VCU_B.Timeout_i ||
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004d60:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d109      	bne.n	8004d7c <FUNC_Transmission+0x194c>
 8004d68:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004d6a:	f893 3701 	ldrb.w	r3, [r3, #1793]	; 0x701
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d104      	bne.n	8004d7c <FUNC_Transmission+0x194c>
      VCU_B.FailSafefirstgear);
 8004d72:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <FUNC_Transmission+0x1960>)
 8004d74:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
    /* CombinatorialLogic: '<S224>/Logic' incorporates:
     *  Logic: '<S200>/Logical Operator'
     *  Memory: '<S224>/Memory'
     */
    VCU_B.LogicalOperator_i = (VCU_B.FixPtRelationalOperator_m ||
      VCU_B.Compare_ha || VCU_B.UnitDelay_p || VCU_B.Timeout_i ||
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d013      	beq.n	8004da4 <FUNC_Transmission+0x1974>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e012      	b.n	8004da6 <FUNC_Transmission+0x1976>
 8004d80:	00000000 	.word	0x00000000
 8004d84:	40652000 	.word	0x40652000
 8004d88:	00000000 	.word	0x00000000
 8004d8c:	4070d000 	.word	0x4070d000
 8004d90:	200008c8 	.word	0x200008c8
 8004d94:	20001058 	.word	0x20001058
 8004d98:	0800f148 	.word	0x0800f148
 8004d9c:	40768000 	.word	0x40768000
 8004da0:	402e0000 	.word	0x402e0000
 8004da4:	2300      	movs	r3, #0

    /* CombinatorialLogic: '<S224>/Logic' incorporates:
     *  Logic: '<S200>/Logical Operator'
     *  Memory: '<S224>/Memory'
     */
    VCU_B.LogicalOperator_i = (VCU_B.FixPtRelationalOperator_m ||
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	4bb0      	ldr	r3, [pc, #704]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004daa:	f883 2705 	strb.w	r2, [r3, #1797]	; 0x705
      VCU_B.Compare_ha || VCU_B.UnitDelay_p || VCU_B.Timeout_i ||
      VCU_B.FailSafefirstgear);
    VCU_B.Memory_a = VCU_DW.Memory_PreviousInput_al;
 8004dae:	4bb0      	ldr	r3, [pc, #704]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004db0:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
 8004db4:	4bad      	ldr	r3, [pc, #692]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004db6:	f883 2706 	strb.w	r2, [r3, #1798]	; 0x706
    rowIdx = VCU_B.FixPtRelationalOperator_c;
 8004dba:	4bac      	ldr	r3, [pc, #688]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004dbc:	f893 36fa 	ldrb.w	r3, [r3, #1786]	; 0x6fa
 8004dc0:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.LogicalOperator_i);
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	4aa9      	ldr	r2, [pc, #676]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004dc8:	f892 2705 	ldrb.w	r2, [r2, #1797]	; 0x705
 8004dcc:	4413      	add	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_a);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	4aa5      	ldr	r2, [pc, #660]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004dd6:	f892 2706 	ldrb.w	r2, [r2, #1798]	; 0x706
 8004dda:	4413      	add	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_iz[0U] = VCU_ConstP.pooled37[(uint32_T)rowIdx];
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	4aa4      	ldr	r2, [pc, #656]	; (8005074 <FUNC_Transmission+0x1c44>)
 8004de2:	4413      	add	r3, r2
 8004de4:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004de8:	4ba0      	ldr	r3, [pc, #640]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004dea:	f883 2707 	strb.w	r2, [r3, #1799]	; 0x707
    VCU_B.Logic_iz[1U] = VCU_ConstP.pooled37[rowIdx + 8U];
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	3308      	adds	r3, #8
 8004df2:	4aa0      	ldr	r2, [pc, #640]	; (8005074 <FUNC_Transmission+0x1c44>)
 8004df4:	4413      	add	r3, r2
 8004df6:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004dfa:	4b9c      	ldr	r3, [pc, #624]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004dfc:	f883 2708 	strb.w	r2, [r3, #1800]	; 0x708

    /* CombinatorialLogic: '<S225>/Logic' incorporates:
     *  S-Function (sdspcount2): '<S200>/Counter1'
     */
    VCU_B.Counter1 = false;
 8004e00:	4b9a      	ldr	r3, [pc, #616]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2709 	strb.w	r2, [r3, #1801]	; 0x709

    /* S-Function (sdspcount2): '<S200>/Counter1' */
    if (VCU_B.LogicalOperator_i) {
 8004e08:	4b98      	ldr	r3, [pc, #608]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004e0a:	f893 3705 	ldrb.w	r3, [r3, #1797]	; 0x705
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <FUNC_Transmission+0x19ea>
      VCU_DW.Counter1_Count = 0U;
 8004e12:	4b97      	ldr	r3, [pc, #604]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
    }

    if (VCU_B.Logic_iz[0]) {
 8004e1a:	4b94      	ldr	r3, [pc, #592]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004e1c:	f893 3707 	ldrb.w	r3, [r3, #1799]	; 0x707
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d011      	beq.n	8004e48 <FUNC_Transmission+0x1a18>
      if (VCU_DW.Counter1_Count < 60) {
 8004e24:	4b92      	ldr	r3, [pc, #584]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004e26:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004e2a:	2b3b      	cmp	r3, #59	; 0x3b
 8004e2c:	d808      	bhi.n	8004e40 <FUNC_Transmission+0x1a10>
        VCU_DW.Counter1_Count++;
 8004e2e:	4b90      	ldr	r3, [pc, #576]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004e30:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004e34:	3301      	adds	r3, #1
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	4b8d      	ldr	r3, [pc, #564]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004e3a:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8004e3e:	e003      	b.n	8004e48 <FUNC_Transmission+0x1a18>
      } else {
        VCU_DW.Counter1_Count = 0U;
 8004e40:	4b8b      	ldr	r3, [pc, #556]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      }
    }

    if (VCU_DW.Counter1_Count == 1) {
 8004e48:	4b89      	ldr	r3, [pc, #548]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004e4a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d103      	bne.n	8004e5a <FUNC_Transmission+0x1a2a>
      /* CombinatorialLogic: '<S225>/Logic' */
      VCU_B.Counter1 = true;
 8004e52:	4b86      	ldr	r3, [pc, #536]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2709 	strb.w	r2, [r3, #1801]	; 0x709
     *
     * Block description for '<S223>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_m = VCU_DW.DelayInput1_DSTATE_f;
 8004e5a:	4b85      	ldr	r3, [pc, #532]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004e5c:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
 8004e60:	4b82      	ldr	r3, [pc, #520]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004e62:	f883 2687 	strb.w	r2, [r3, #1671]	; 0x687

    /* RelationalOperator: '<S223>/FixPt Relational Operator' */
    VCU_B.FixPtRelationalOperator_b = (VCU_B.Add_j > VCU_B.Uk1_m);
 8004e66:	4b81      	ldr	r3, [pc, #516]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004e68:	f893 2685 	ldrb.w	r2, [r3, #1669]	; 0x685
 8004e6c:	4b7f      	ldr	r3, [pc, #508]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004e6e:	f893 3687 	ldrb.w	r3, [r3, #1671]	; 0x687
 8004e72:	429a      	cmp	r2, r3
 8004e74:	bf8c      	ite	hi
 8004e76:	2301      	movhi	r3, #1
 8004e78:	2300      	movls	r3, #0
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4b7b      	ldr	r3, [pc, #492]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004e80:	f883 270a 	strb.w	r2, [r3, #1802]	; 0x70a

    /* CombinatorialLogic: '<S225>/Logic' incorporates:
     *  Logic: '<S200>/Logical Operator2'
     *  Memory: '<S225>/Memory'
     */
    VCU_B.LogicalOperator2_h = (VCU_B.LogicalOperator_i ||
 8004e84:	4b79      	ldr	r3, [pc, #484]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004e86:	f893 3705 	ldrb.w	r3, [r3, #1797]	; 0x705
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d104      	bne.n	8004e98 <FUNC_Transmission+0x1a68>
      VCU_B.FixPtRelationalOperator_b);
 8004e8e:	4b77      	ldr	r3, [pc, #476]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004e90:	f893 370a 	ldrb.w	r3, [r3, #1802]	; 0x70a

    /* CombinatorialLogic: '<S225>/Logic' incorporates:
     *  Logic: '<S200>/Logical Operator2'
     *  Memory: '<S225>/Memory'
     */
    VCU_B.LogicalOperator2_h = (VCU_B.LogicalOperator_i ||
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <FUNC_Transmission+0x1a6c>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e000      	b.n	8004e9e <FUNC_Transmission+0x1a6e>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	4b72      	ldr	r3, [pc, #456]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004ea2:	f883 270b 	strb.w	r2, [r3, #1803]	; 0x70b
      VCU_B.FixPtRelationalOperator_b);
    VCU_B.Memory_gt = VCU_DW.Memory_PreviousInput_k;
 8004ea6:	4b72      	ldr	r3, [pc, #456]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004ea8:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
 8004eac:	4b6f      	ldr	r3, [pc, #444]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004eae:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
    rowIdx = VCU_B.Counter1;
 8004eb2:	4b6e      	ldr	r3, [pc, #440]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004eb4:	f893 3709 	ldrb.w	r3, [r3, #1801]	; 0x709
 8004eb8:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.LogicalOperator2_h);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	4a6b      	ldr	r2, [pc, #428]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004ec0:	f892 270b 	ldrb.w	r2, [r2, #1803]	; 0x70b
 8004ec4:	4413      	add	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_gt);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	4a67      	ldr	r2, [pc, #412]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004ece:	f892 270c 	ldrb.w	r2, [r2, #1804]	; 0x70c
 8004ed2:	4413      	add	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_e[0U] = VCU_ConstP.pooled37[(uint32_T)rowIdx];
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	4a66      	ldr	r2, [pc, #408]	; (8005074 <FUNC_Transmission+0x1c44>)
 8004eda:	4413      	add	r3, r2
 8004edc:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004ee0:	4b62      	ldr	r3, [pc, #392]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004ee2:	f883 270d 	strb.w	r2, [r3, #1805]	; 0x70d
    VCU_B.Logic_e[1U] = VCU_ConstP.pooled37[rowIdx + 8U];
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	3308      	adds	r3, #8
 8004eea:	4a62      	ldr	r2, [pc, #392]	; (8005074 <FUNC_Transmission+0x1c44>)
 8004eec:	4413      	add	r3, r2
 8004eee:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004ef2:	4b5e      	ldr	r3, [pc, #376]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004ef4:	f883 270e 	strb.w	r2, [r3, #1806]	; 0x70e

    /* DataTypeConversion: '<S138>/Data Type Conversion11' */
    VCU_B.Ignition_Cut_o = VCU_B.Logic_e[0];
 8004ef8:	4b5c      	ldr	r3, [pc, #368]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004efa:	f893 370d 	ldrb.w	r3, [r3, #1805]	; 0x70d
 8004efe:	4618      	mov	r0, r3
 8004f00:	f009 fcec 	bl	800e8dc <__aeabi_ui2d>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4958      	ldr	r1, [pc, #352]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004f0a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

    /* S-Function (sdspcount2): '<S199>/Counter' */
    VCU_B.Counter = false;
 8004f0e:	4b57      	ldr	r3, [pc, #348]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 270f 	strb.w	r2, [r3, #1807]	; 0x70f
    if (VCU_B.LogicalOperator_d) {
 8004f16:	4b55      	ldr	r3, [pc, #340]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004f18:	f893 36f6 	ldrb.w	r3, [r3, #1782]	; 0x6f6
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <FUNC_Transmission+0x1af8>
      VCU_DW.Counter_Count = 0U;
 8004f20:	4b53      	ldr	r3, [pc, #332]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    }

    if (VCU_B.Logic_i[0]) {
 8004f28:	4b50      	ldr	r3, [pc, #320]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004f2a:	f893 36e6 	ldrb.w	r3, [r3, #1766]	; 0x6e6
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d012      	beq.n	8004f58 <FUNC_Transmission+0x1b28>
      if (VCU_DW.Counter_Count < 500) {
 8004f32:	4b4f      	ldr	r3, [pc, #316]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004f34:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004f38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f3c:	d208      	bcs.n	8004f50 <FUNC_Transmission+0x1b20>
        VCU_DW.Counter_Count++;
 8004f3e:	4b4c      	ldr	r3, [pc, #304]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004f40:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004f44:	3301      	adds	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	4b49      	ldr	r3, [pc, #292]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004f4a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8004f4e:	e003      	b.n	8004f58 <FUNC_Transmission+0x1b28>
      } else {
        VCU_DW.Counter_Count = 0U;
 8004f50:	4b47      	ldr	r3, [pc, #284]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      }
    }

    if (VCU_DW.Counter_Count == 500) {
 8004f58:	4b45      	ldr	r3, [pc, #276]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004f5a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004f5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f62:	d103      	bne.n	8004f6c <FUNC_Transmission+0x1b3c>
      VCU_B.Counter = true;
 8004f64:	4b41      	ldr	r3, [pc, #260]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 270f 	strb.w	r2, [r3, #1807]	; 0x70f
    }

    /* End of S-Function (sdspcount2): '<S199>/Counter' */

    /* S-Function (sdspcount2): '<S200>/Counter' */
    VCU_B.Counter_d = false;
 8004f6c:	4b3f      	ldr	r3, [pc, #252]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2710 	strb.w	r2, [r3, #1808]	; 0x710
    if (VCU_B.LogicalOperator_i) {
 8004f74:	4b3d      	ldr	r3, [pc, #244]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004f76:	f893 3705 	ldrb.w	r3, [r3, #1797]	; 0x705
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <FUNC_Transmission+0x1b56>
      VCU_DW.Counter_Count_i = 0U;
 8004f7e:	4b3c      	ldr	r3, [pc, #240]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
    }

    if (VCU_B.Logic_iz[0]) {
 8004f86:	4b39      	ldr	r3, [pc, #228]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004f88:	f893 3707 	ldrb.w	r3, [r3, #1799]	; 0x707
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d011      	beq.n	8004fb4 <FUNC_Transmission+0x1b84>
      if (VCU_DW.Counter_Count_i < 200) {
 8004f90:	4b37      	ldr	r3, [pc, #220]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004f92:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8004f96:	2bc7      	cmp	r3, #199	; 0xc7
 8004f98:	d808      	bhi.n	8004fac <FUNC_Transmission+0x1b7c>
        VCU_DW.Counter_Count_i++;
 8004f9a:	4b35      	ldr	r3, [pc, #212]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004f9c:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	4b32      	ldr	r3, [pc, #200]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004fa6:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
 8004faa:	e003      	b.n	8004fb4 <FUNC_Transmission+0x1b84>
      } else {
        VCU_DW.Counter_Count_i = 0U;
 8004fac:	4b30      	ldr	r3, [pc, #192]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
      }
    }

    if (VCU_DW.Counter_Count_i == 180) {
 8004fb4:	4b2e      	ldr	r3, [pc, #184]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004fb6:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8004fba:	2bb4      	cmp	r3, #180	; 0xb4
 8004fbc:	d103      	bne.n	8004fc6 <FUNC_Transmission+0x1b96>
      VCU_B.Counter_d = true;
 8004fbe:	4b2b      	ldr	r3, [pc, #172]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2710 	strb.w	r2, [r3, #1808]	; 0x710
    }

    /* End of S-Function (sdspcount2): '<S200>/Counter' */

    /* DataTypeConversion: '<S138>/Data Type Conversion8' */
    VCU_B.VOVG_ShiftUp_k = VCU_B.Logic_iz[0];
 8004fc6:	4b29      	ldr	r3, [pc, #164]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004fc8:	f893 3707 	ldrb.w	r3, [r3, #1799]	; 0x707
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f009 fc85 	bl	800e8dc <__aeabi_ui2d>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4925      	ldr	r1, [pc, #148]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004fd8:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
     *
     * Block description for '<S212>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_f = VCU_DW.DelayInput1_DSTATE_p;
 8004fdc:	4b24      	ldr	r3, [pc, #144]	; (8005070 <FUNC_Transmission+0x1c40>)
 8004fde:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 8004fe2:	4b22      	ldr	r3, [pc, #136]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004fe4:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688

    /* RelationalOperator: '<S212>/FixPt Relational Operator' */
    VCU_B.FixPtRelationalOperator_d = (VCU_B.Add_c < VCU_B.Uk1_f);
 8004fe8:	4b20      	ldr	r3, [pc, #128]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004fea:	f893 2684 	ldrb.w	r2, [r3, #1668]	; 0x684
 8004fee:	4b1f      	ldr	r3, [pc, #124]	; (800506c <FUNC_Transmission+0x1c3c>)
 8004ff0:	f893 3688 	ldrb.w	r3, [r3, #1672]	; 0x688
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	bf34      	ite	cc
 8004ff8:	2301      	movcc	r3, #1
 8004ffa:	2300      	movcs	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	461a      	mov	r2, r3
 8005000:	4b1a      	ldr	r3, [pc, #104]	; (800506c <FUNC_Transmission+0x1c3c>)
 8005002:	f883 2711 	strb.w	r2, [r3, #1809]	; 0x711

    /* Switch: '<S198>/Switch' */
    if (VCU_B.Logic_i[0]) {
 8005006:	4b19      	ldr	r3, [pc, #100]	; (800506c <FUNC_Transmission+0x1c3c>)
 8005008:	f893 36e6 	ldrb.w	r3, [r3, #1766]	; 0x6e6
 800500c:	2b00      	cmp	r3, #0
 800500e:	d006      	beq.n	800501e <FUNC_Transmission+0x1bee>
      /* MinMax: '<S198>/MinMax' incorporates:
       *  Constant: '<S198>/Constant'
       */
      VCU_B.Switch_g = 20.0;
 8005010:	4916      	ldr	r1, [pc, #88]	; (800506c <FUNC_Transmission+0x1c3c>)
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	4b18      	ldr	r3, [pc, #96]	; (8005078 <FUNC_Transmission+0x1c48>)
 8005018:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 800501c:	e006      	b.n	800502c <FUNC_Transmission+0x1bfc>
    } else {
      /* MinMax: '<S198>/MinMax' incorporates:
       *  Constant: '<S198>/Constant1'
       */
      VCU_B.Switch_g = 0.0;
 800501e:	4913      	ldr	r1, [pc, #76]	; (800506c <FUNC_Transmission+0x1c3c>)
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    }

    /* End of Switch: '<S198>/Switch' */

    /* MinMax: '<S198>/MinMax' */
    if ((VCU_B.x_clutch_STW > VCU_B.Switch_g) || rtIsNaN(VCU_B.Switch_g)) {
 800502c:	4b0f      	ldr	r3, [pc, #60]	; (800506c <FUNC_Transmission+0x1c3c>)
 800502e:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8005032:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005036:	4b0d      	ldr	r3, [pc, #52]	; (800506c <FUNC_Transmission+0x1c3c>)
 8005038:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800503c:	f009 ff54 	bl	800eee8 <__aeabi_dcmpgt>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <FUNC_Transmission+0x1c2a>
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <FUNC_Transmission+0x1c3c>)
 8005048:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800504c:	4610      	mov	r0, r2
 800504e:	4619      	mov	r1, r3
 8005050:	f001 f9ba 	bl	80063c8 <rtIsNaN>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d010      	beq.n	800507c <FUNC_Transmission+0x1c4c>
      VCU_B.MinMax = VCU_B.x_clutch_STW;
 800505a:	4b04      	ldr	r3, [pc, #16]	; (800506c <FUNC_Transmission+0x1c3c>)
 800505c:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	4901      	ldr	r1, [pc, #4]	; (800506c <FUNC_Transmission+0x1c3c>)
 8005066:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 800506a:	e00d      	b.n	8005088 <FUNC_Transmission+0x1c58>
 800506c:	200008c8 	.word	0x200008c8
 8005070:	20001058 	.word	0x20001058
 8005074:	0800f148 	.word	0x0800f148
 8005078:	40340000 	.word	0x40340000
    } else {
      VCU_B.MinMax = VCU_B.Switch_g;
 800507c:	4ba9      	ldr	r3, [pc, #676]	; (8005324 <FUNC_Transmission+0x1ef4>)
 800507e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8005082:	49a8      	ldr	r1, [pc, #672]	; (8005324 <FUNC_Transmission+0x1ef4>)
 8005084:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
    }

    if (!(VCU_B.MinMax > 0.0)) {
 8005088:	4ba6      	ldr	r3, [pc, #664]	; (8005324 <FUNC_Transmission+0x1ef4>)
 800508a:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800508e:	2101      	movs	r1, #1
 8005090:	460c      	mov	r4, r1
 8005092:	4610      	mov	r0, r2
 8005094:	4619      	mov	r1, r3
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	f04f 0300 	mov.w	r3, #0
 800509e:	f009 ff23 	bl	800eee8 <__aeabi_dcmpgt>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <FUNC_Transmission+0x1c7c>
 80050a8:	2300      	movs	r3, #0
 80050aa:	461c      	mov	r4, r3
 80050ac:	b2e3      	uxtb	r3, r4
 80050ae:	f083 0301 	eor.w	r3, r3, #1
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d006      	beq.n	80050c6 <FUNC_Transmission+0x1c96>
      VCU_B.MinMax = 0.0;
 80050b8:	499a      	ldr	r1, [pc, #616]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
    }

    /* RelationalOperator: '<S202>/Compare' incorporates:
     *  Constant: '<S202>/Constant'
     */
    VCU_B.Compare_ao = (VCU_B.MinMax > 1.0);
 80050c6:	4b97      	ldr	r3, [pc, #604]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80050c8:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80050cc:	2101      	movs	r1, #1
 80050ce:	460c      	mov	r4, r1
 80050d0:	4610      	mov	r0, r2
 80050d2:	4619      	mov	r1, r3
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	4b93      	ldr	r3, [pc, #588]	; (8005328 <FUNC_Transmission+0x1ef8>)
 80050da:	f009 ff05 	bl	800eee8 <__aeabi_dcmpgt>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <FUNC_Transmission+0x1cb8>
 80050e4:	2300      	movs	r3, #0
 80050e6:	461c      	mov	r4, r3
 80050e8:	b2e3      	uxtb	r3, r4
 80050ea:	461a      	mov	r2, r3
 80050ec:	4b8d      	ldr	r3, [pc, #564]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80050ee:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712

    /* DataTypeConversion: '<S138>/Data Type Conversion12' */
    VCU_B.VOVG_IN_h = VCU_B.Compare_ao;
 80050f2:	4b8c      	ldr	r3, [pc, #560]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80050f4:	f893 3712 	ldrb.w	r3, [r3, #1810]	; 0x712
 80050f8:	4618      	mov	r0, r3
 80050fa:	f009 fbef 	bl	800e8dc <__aeabi_ui2d>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4988      	ldr	r1, [pc, #544]	; (8005324 <FUNC_Transmission+0x1ef4>)
 8005104:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

    /* Sum: '<S198>/Add' */
    VCU_B.Add = VCU_B.MinMax - VCU_B.x_clutch_b;
 8005108:	4b86      	ldr	r3, [pc, #536]	; (8005324 <FUNC_Transmission+0x1ef4>)
 800510a:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 800510e:	4b85      	ldr	r3, [pc, #532]	; (8005324 <FUNC_Transmission+0x1ef4>)
 8005110:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	f009 faa2 	bl	800e660 <__aeabi_dsub>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4980      	ldr	r1, [pc, #512]	; (8005324 <FUNC_Transmission+0x1ef4>)
 8005122:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8

    /* RelationalOperator: '<S204>/Compare' incorporates:
     *  Constant: '<S204>/Constant'
     */
    VCU_B.Compare_gu = (VCU_B.Add < -0.5);
 8005126:	4b7f      	ldr	r3, [pc, #508]	; (8005324 <FUNC_Transmission+0x1ef4>)
 8005128:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800512c:	2101      	movs	r1, #1
 800512e:	460c      	mov	r4, r1
 8005130:	4610      	mov	r0, r2
 8005132:	4619      	mov	r1, r3
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	4b7c      	ldr	r3, [pc, #496]	; (800532c <FUNC_Transmission+0x1efc>)
 800513a:	f009 feb7 	bl	800eeac <__aeabi_dcmplt>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <FUNC_Transmission+0x1d18>
 8005144:	2300      	movs	r3, #0
 8005146:	461c      	mov	r4, r3
 8005148:	b2e3      	uxtb	r3, r4
 800514a:	461a      	mov	r2, r3
 800514c:	4b75      	ldr	r3, [pc, #468]	; (8005324 <FUNC_Transmission+0x1ef4>)
 800514e:	f883 2713 	strb.w	r2, [r3, #1811]	; 0x713

    /* Lookup_n-D: '<S198>/Duty Cycle MHJ1' */
    VCU_B.DutyCycleMHJ1 = look1_binlxpw(VCU_B.Add, VCU_ConstP.pooled29,
 8005152:	4b74      	ldr	r3, [pc, #464]	; (8005324 <FUNC_Transmission+0x1ef4>)
 8005154:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8005158:	210e      	movs	r1, #14
 800515a:	9100      	str	r1, [sp, #0]
 800515c:	4610      	mov	r0, r2
 800515e:	4619      	mov	r1, r3
 8005160:	4a73      	ldr	r2, [pc, #460]	; (8005330 <FUNC_Transmission+0x1f00>)
 8005162:	4b74      	ldr	r3, [pc, #464]	; (8005334 <FUNC_Transmission+0x1f04>)
 8005164:	f000 fd18 	bl	8005b98 <look1_binlxpw>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	496d      	ldr	r1, [pc, #436]	; (8005324 <FUNC_Transmission+0x1ef4>)
 800516e:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
      VCU_ConstP.pooled28, 14U);

    /* Product: '<S198>/Product1' */
    VCU_B.Product1 = VCU_B.DutyCycleMHJ1 * (real_T)VCU_B.Compare_gu;
 8005172:	4b6c      	ldr	r3, [pc, #432]	; (8005324 <FUNC_Transmission+0x1ef4>)
 8005174:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8005178:	4b6a      	ldr	r3, [pc, #424]	; (8005324 <FUNC_Transmission+0x1ef4>)
 800517a:	f893 3713 	ldrb.w	r3, [r3, #1811]	; 0x713
 800517e:	4618      	mov	r0, r3
 8005180:	f009 fbac 	bl	800e8dc <__aeabi_ui2d>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4620      	mov	r0, r4
 800518a:	4629      	mov	r1, r5
 800518c:	f009 fc1c 	bl	800e9c8 <__aeabi_dmul>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4963      	ldr	r1, [pc, #396]	; (8005324 <FUNC_Transmission+0x1ef4>)
 8005196:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8

    /* RelationalOperator: '<S203>/Compare' incorporates:
     *  Constant: '<S203>/Constant'
     */
    VCU_B.Compare_eh = (VCU_B.x_clutch_b > 20.0);
 800519a:	4b62      	ldr	r3, [pc, #392]	; (8005324 <FUNC_Transmission+0x1ef4>)
 800519c:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	2101      	movs	r1, #1
 80051a6:	460c      	mov	r4, r1
 80051a8:	4610      	mov	r0, r2
 80051aa:	4619      	mov	r1, r3
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	4b61      	ldr	r3, [pc, #388]	; (8005338 <FUNC_Transmission+0x1f08>)
 80051b2:	f009 fe99 	bl	800eee8 <__aeabi_dcmpgt>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <FUNC_Transmission+0x1d90>
 80051bc:	2300      	movs	r3, #0
 80051be:	461c      	mov	r4, r3
 80051c0:	b2e3      	uxtb	r3, r4
 80051c2:	461a      	mov	r2, r3
 80051c4:	4b57      	ldr	r3, [pc, #348]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80051c6:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714

    /* Switch: '<S198>/Switch1' incorporates:
     *  Constant: '<S198>/Constant2'
     *  Constant: '<S198>/Constant3'
     */
    if (VCU_B.Compare_eh) {
 80051ca:	4b56      	ldr	r3, [pc, #344]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80051cc:	f893 3714 	ldrb.w	r3, [r3, #1812]	; 0x714
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d007      	beq.n	80051e4 <FUNC_Transmission+0x1db4>
      VCU_B.Switch1 = 2.0;
 80051d4:	4953      	ldr	r1, [pc, #332]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051de:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
 80051e2:	e005      	b.n	80051f0 <FUNC_Transmission+0x1dc0>
    } else {
      VCU_B.Switch1 = 1.0;
 80051e4:	494f      	ldr	r1, [pc, #316]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	4b4f      	ldr	r3, [pc, #316]	; (8005328 <FUNC_Transmission+0x1ef8>)
 80051ec:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    }

    /* End of Switch: '<S198>/Switch1' */

    /* Product: '<S198>/Product2' */
    VCU_B.Product2 = VCU_B.Product1 * VCU_B.Switch1;
 80051f0:	4b4c      	ldr	r3, [pc, #304]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80051f2:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 80051f6:	4b4b      	ldr	r3, [pc, #300]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80051f8:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 80051fc:	f009 fbe4 	bl	800e9c8 <__aeabi_dmul>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4947      	ldr	r1, [pc, #284]	; (8005324 <FUNC_Transmission+0x1ef4>)
 8005206:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8

    /* DataTypeConversion: '<S138>/Data Type Conversion15' */
    VCU_B.MHJ9_OUT_d = VCU_B.Product2;
 800520a:	4b46      	ldr	r3, [pc, #280]	; (8005324 <FUNC_Transmission+0x1ef4>)
 800520c:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8005210:	4944      	ldr	r1, [pc, #272]	; (8005324 <FUNC_Transmission+0x1ef4>)
 8005212:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0

    /* RelationalOperator: '<S205>/Compare' incorporates:
     *  Constant: '<S205>/Constant'
     */
    VCU_B.Compare_m = (VCU_B.Add > 0.0);
 8005216:	4b43      	ldr	r3, [pc, #268]	; (8005324 <FUNC_Transmission+0x1ef4>)
 8005218:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800521c:	2101      	movs	r1, #1
 800521e:	460c      	mov	r4, r1
 8005220:	4610      	mov	r0, r2
 8005222:	4619      	mov	r1, r3
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	f009 fe5c 	bl	800eee8 <__aeabi_dcmpgt>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <FUNC_Transmission+0x1e0a>
 8005236:	2300      	movs	r3, #0
 8005238:	461c      	mov	r4, r3
 800523a:	b2e3      	uxtb	r3, r4
 800523c:	461a      	mov	r2, r3
 800523e:	4b39      	ldr	r3, [pc, #228]	; (8005324 <FUNC_Transmission+0x1ef4>)
 8005240:	f883 2715 	strb.w	r2, [r3, #1813]	; 0x715

    /* Product: '<S198>/Product3' */
    VCU_B.Product3 = VCU_B.DutyCycleMHJ1 * (real_T)VCU_B.Compare_m;
 8005244:	4b37      	ldr	r3, [pc, #220]	; (8005324 <FUNC_Transmission+0x1ef4>)
 8005246:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 800524a:	4b36      	ldr	r3, [pc, #216]	; (8005324 <FUNC_Transmission+0x1ef4>)
 800524c:	f893 3715 	ldrb.w	r3, [r3, #1813]	; 0x715
 8005250:	4618      	mov	r0, r3
 8005252:	f009 fb43 	bl	800e8dc <__aeabi_ui2d>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4620      	mov	r0, r4
 800525c:	4629      	mov	r1, r5
 800525e:	f009 fbb3 	bl	800e9c8 <__aeabi_dmul>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	492f      	ldr	r1, [pc, #188]	; (8005324 <FUNC_Transmission+0x1ef4>)
 8005268:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8

    /* DataTypeConversion: '<S138>/Data Type Conversion14' */
    VCU_B.MHJ9_IN_e = VCU_B.Product3;
 800526c:	4b2d      	ldr	r3, [pc, #180]	; (8005324 <FUNC_Transmission+0x1ef4>)
 800526e:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8005272:	492c      	ldr	r1, [pc, #176]	; (8005324 <FUNC_Transmission+0x1ef4>)
 8005274:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0

    /* RelationalOperator: '<S206>/Compare' incorporates:
     *  Constant: '<S206>/Constant'
     */
    VCU_B.Compare_md = (VCU_B.Add < -20.0);
 8005278:	4b2a      	ldr	r3, [pc, #168]	; (8005324 <FUNC_Transmission+0x1ef4>)
 800527a:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800527e:	2101      	movs	r1, #1
 8005280:	460c      	mov	r4, r1
 8005282:	4610      	mov	r0, r2
 8005284:	4619      	mov	r1, r3
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	4b2c      	ldr	r3, [pc, #176]	; (800533c <FUNC_Transmission+0x1f0c>)
 800528c:	f009 fe0e 	bl	800eeac <__aeabi_dcmplt>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <FUNC_Transmission+0x1e6a>
 8005296:	2300      	movs	r3, #0
 8005298:	461c      	mov	r4, r3
 800529a:	b2e3      	uxtb	r3, r4
 800529c:	461a      	mov	r2, r3
 800529e:	4b21      	ldr	r3, [pc, #132]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80052a0:	f883 2716 	strb.w	r2, [r3, #1814]	; 0x716

    /* DataTypeConversion: '<S138>/Data Type Conversion13' */
    VCU_B.VOVG_OUT_j = VCU_B.Compare_md;
 80052a4:	4b1f      	ldr	r3, [pc, #124]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80052a6:	f893 3716 	ldrb.w	r3, [r3, #1814]	; 0x716
 80052aa:	4618      	mov	r0, r3
 80052ac:	f009 fb16 	bl	800e8dc <__aeabi_ui2d>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	491b      	ldr	r1, [pc, #108]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80052b6:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8

    /* DataTypeConversion: '<S138>/Data Type Conversion2' incorporates:
     *  Constant: '<S138>/Constant'
     */
    VCU_B.LC_ready_bit_e = true;
 80052ba:	4b1a      	ldr	r3, [pc, #104]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2717 	strb.w	r2, [r3, #1815]	; 0x717

    /* DataTypeConversion: '<S138>/Data Type Conversion16' */
    VCU_B.x_clutch_LC_b = 0.0;
 80052c2:	4918      	ldr	r1, [pc, #96]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    /* DataTypeConversion: '<S138>/Data Type Conversion17' */
    VCU_B.LC_Mdes_b = 0.0;
 80052d0:	4914      	ldr	r1, [pc, #80]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8

    /* DataTypeConversion: '<S138>/Data Type Conversion18' */
    VCU_B.LC_Fnr_l = 0.0;
 80052de:	4911      	ldr	r1, [pc, #68]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	f04f 0300 	mov.w	r3, #0
 80052e8:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100

    /* Update for Memory: '<S201>/Memory' */
    VCU_DW.Memory_PreviousInput = VCU_B.LC_dash_bit;
 80052ec:	4b0d      	ldr	r3, [pc, #52]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80052ee:	f893 277f 	ldrb.w	r2, [r3, #1919]	; 0x77f
 80052f2:	4b13      	ldr	r3, [pc, #76]	; (8005340 <FUNC_Transmission+0x1f10>)
 80052f4:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135

    /* Update for Memory: '<S201>/Memory1' */
    VCU_DW.Memory1_PreviousInput = VCU_B.Brakelight;
 80052f8:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <FUNC_Transmission+0x1ef4>)
 80052fa:	f893 26d6 	ldrb.w	r2, [r3, #1750]	; 0x6d6
 80052fe:	4b10      	ldr	r3, [pc, #64]	; (8005340 <FUNC_Transmission+0x1f10>)
 8005300:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136

    /* Update for Memory: '<S227>/Memory' */
    VCU_DW.Memory_PreviousInput_j = VCU_B.Logic[0];
 8005304:	4b07      	ldr	r3, [pc, #28]	; (8005324 <FUNC_Transmission+0x1ef4>)
 8005306:	f893 26da 	ldrb.w	r2, [r3, #1754]	; 0x6da
 800530a:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <FUNC_Transmission+0x1f10>)
 800530c:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137

    /* Update for UnitDelay: '<S199>/Unit Delay1' */
    VCU_DW.UnitDelay1_DSTATE = VCU_B.Logic_i[0];
 8005310:	4b04      	ldr	r3, [pc, #16]	; (8005324 <FUNC_Transmission+0x1ef4>)
 8005312:	f893 26e6 	ldrb.w	r2, [r3, #1766]	; 0x6e6
 8005316:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <FUNC_Transmission+0x1f10>)
 8005318:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

    /* Update for Delay: '<S199>/Delay' */
    for (rowIdx = 0; rowIdx < 19; rowIdx++) {
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	e01f      	b.n	8005362 <FUNC_Transmission+0x1f32>
 8005322:	bf00      	nop
 8005324:	200008c8 	.word	0x200008c8
 8005328:	3ff00000 	.word	0x3ff00000
 800532c:	bfe00000 	.word	0xbfe00000
 8005330:	0800f3f8 	.word	0x0800f3f8
 8005334:	0800f380 	.word	0x0800f380
 8005338:	40340000 	.word	0x40340000
 800533c:	c0340000 	.word	0xc0340000
 8005340:	20001058 	.word	0x20001058
      VCU_DW.Delay_DSTATE[rowIdx] = VCU_DW.Delay_DSTATE[rowIdx + 1];
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	3301      	adds	r3, #1
 8005348:	4a9d      	ldr	r2, [pc, #628]	; (80055c0 <FUNC_Transmission+0x2190>)
 800534a:	4413      	add	r3, r2
 800534c:	f893 10c3 	ldrb.w	r1, [r3, #195]	; 0xc3
 8005350:	4a9b      	ldr	r2, [pc, #620]	; (80055c0 <FUNC_Transmission+0x2190>)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	4413      	add	r3, r2
 8005356:	33c0      	adds	r3, #192	; 0xc0
 8005358:	460a      	mov	r2, r1
 800535a:	70da      	strb	r2, [r3, #3]

    /* Update for UnitDelay: '<S199>/Unit Delay1' */
    VCU_DW.UnitDelay1_DSTATE = VCU_B.Logic_i[0];

    /* Update for Delay: '<S199>/Delay' */
    for (rowIdx = 0; rowIdx < 19; rowIdx++) {
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	3301      	adds	r3, #1
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b12      	cmp	r3, #18
 8005366:	dded      	ble.n	8005344 <FUNC_Transmission+0x1f14>
      VCU_DW.Delay_DSTATE[rowIdx] = VCU_DW.Delay_DSTATE[rowIdx + 1];
    }

    VCU_DW.Delay_DSTATE[19] = VCU_B.LogicalOperator_d;
 8005368:	4b96      	ldr	r3, [pc, #600]	; (80055c4 <FUNC_Transmission+0x2194>)
 800536a:	f893 26f6 	ldrb.w	r2, [r3, #1782]	; 0x6f6
 800536e:	4b94      	ldr	r3, [pc, #592]	; (80055c0 <FUNC_Transmission+0x2190>)
 8005370:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6

    /* End of Update for Delay: '<S199>/Delay' */

    /* Update for Memory: '<S216>/Memory' */
    VCU_DW.Memory_PreviousInput_p = VCU_B.Logic_o[0];
 8005374:	4b93      	ldr	r3, [pc, #588]	; (80055c4 <FUNC_Transmission+0x2194>)
 8005376:	f893 26e1 	ldrb.w	r2, [r3, #1761]	; 0x6e1
 800537a:	4b91      	ldr	r3, [pc, #580]	; (80055c0 <FUNC_Transmission+0x2190>)
 800537c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     *
     * Block description for '<S213>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE = VCU_B.STW_shift_down_request;
 8005380:	4b90      	ldr	r3, [pc, #576]	; (80055c4 <FUNC_Transmission+0x2194>)
 8005382:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	498d      	ldr	r1, [pc, #564]	; (80055c0 <FUNC_Transmission+0x2190>)
 800538c:	e9c1 2300 	strd	r2, r3, [r1]

    /* Update for Delay: '<S199>/Delay1' */
    VCU_DW.Delay1_DSTATE = VCU_B.LogicalOperator_d;
 8005390:	4b8c      	ldr	r3, [pc, #560]	; (80055c4 <FUNC_Transmission+0x2194>)
 8005392:	f893 26f6 	ldrb.w	r2, [r3, #1782]	; 0x6f6
 8005396:	4b8a      	ldr	r3, [pc, #552]	; (80055c0 <FUNC_Transmission+0x2190>)
 8005398:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7

    /* Update for Memory: '<S214>/Memory' */
    VCU_DW.Memory_PreviousInput_l = VCU_B.Logic_i[0];
 800539c:	4b89      	ldr	r3, [pc, #548]	; (80055c4 <FUNC_Transmission+0x2194>)
 800539e:	f893 26e6 	ldrb.w	r2, [r3, #1766]	; 0x6e6
 80053a2:	4b87      	ldr	r3, [pc, #540]	; (80055c0 <FUNC_Transmission+0x2190>)
 80053a4:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139

    /* Update for UnitDelay: '<S199>/Unit Delay4' */
    VCU_DW.UnitDelay4_DSTATE = VCU_B.FixPtRelationalOperator_d;
 80053a8:	4b86      	ldr	r3, [pc, #536]	; (80055c4 <FUNC_Transmission+0x2194>)
 80053aa:	f893 2711 	ldrb.w	r2, [r3, #1809]	; 0x711
 80053ae:	4b84      	ldr	r3, [pc, #528]	; (80055c0 <FUNC_Transmission+0x2190>)
 80053b0:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8

    /* Update for UnitDelay: '<S200>/Unit Delay' */
    VCU_DW.UnitDelay_DSTATE = VCU_B.Logic_iz[0];
 80053b4:	4b83      	ldr	r3, [pc, #524]	; (80055c4 <FUNC_Transmission+0x2194>)
 80053b6:	f893 2707 	ldrb.w	r2, [r3, #1799]	; 0x707
 80053ba:	4b81      	ldr	r3, [pc, #516]	; (80055c0 <FUNC_Transmission+0x2190>)
 80053bc:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9

    /* Update for UnitDelay: '<S199>/Unit Delay2' */
    VCU_DW.UnitDelay2_DSTATE = VCU_B.Counter;
 80053c0:	4b80      	ldr	r3, [pc, #512]	; (80055c4 <FUNC_Transmission+0x2194>)
 80053c2:	f893 270f 	ldrb.w	r2, [r3, #1807]	; 0x70f
 80053c6:	4b7e      	ldr	r3, [pc, #504]	; (80055c0 <FUNC_Transmission+0x2190>)
 80053c8:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda

    /* Update for Memory: '<S215>/Memory' */
    VCU_DW.Memory_PreviousInput_a = VCU_B.Logic_iy[0];
 80053cc:	4b7d      	ldr	r3, [pc, #500]	; (80055c4 <FUNC_Transmission+0x2194>)
 80053ce:	f893 26f8 	ldrb.w	r2, [r3, #1784]	; 0x6f8
 80053d2:	4b7b      	ldr	r3, [pc, #492]	; (80055c0 <FUNC_Transmission+0x2190>)
 80053d4:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
     *
     * Block description for '<S221>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_g = VCU_B.STW_shift_up_request;
 80053d8:	4b7a      	ldr	r3, [pc, #488]	; (80055c4 <FUNC_Transmission+0x2194>)
 80053da:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	4977      	ldr	r1, [pc, #476]	; (80055c0 <FUNC_Transmission+0x2190>)
 80053e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
     *
     * Block description for '<S222>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_ga = VCU_B.Add_j;
 80053e8:	4b76      	ldr	r3, [pc, #472]	; (80055c4 <FUNC_Transmission+0x2194>)
 80053ea:	f893 2685 	ldrb.w	r2, [r3, #1669]	; 0x685
 80053ee:	4b74      	ldr	r3, [pc, #464]	; (80055c0 <FUNC_Transmission+0x2190>)
 80053f0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

    /* Update for UnitDelay: '<S199>/Unit Delay' */
    VCU_DW.UnitDelay_DSTATE_b = VCU_B.Logic_iy[0];
 80053f4:	4b73      	ldr	r3, [pc, #460]	; (80055c4 <FUNC_Transmission+0x2194>)
 80053f6:	f893 26f8 	ldrb.w	r2, [r3, #1784]	; 0x6f8
 80053fa:	4b71      	ldr	r3, [pc, #452]	; (80055c0 <FUNC_Transmission+0x2190>)
 80053fc:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb

    /* Update for UnitDelay: '<S200>/Unit Delay1' */
    VCU_DW.UnitDelay1_DSTATE_k = VCU_B.Counter_d;
 8005400:	4b70      	ldr	r3, [pc, #448]	; (80055c4 <FUNC_Transmission+0x2194>)
 8005402:	f893 2710 	ldrb.w	r2, [r3, #1808]	; 0x710
 8005406:	4b6e      	ldr	r3, [pc, #440]	; (80055c0 <FUNC_Transmission+0x2190>)
 8005408:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    /* Update for Memory: '<S224>/Memory' */
    VCU_DW.Memory_PreviousInput_al = VCU_B.Logic_iz[0];
 800540c:	4b6d      	ldr	r3, [pc, #436]	; (80055c4 <FUNC_Transmission+0x2194>)
 800540e:	f893 2707 	ldrb.w	r2, [r3, #1799]	; 0x707
 8005412:	4b6b      	ldr	r3, [pc, #428]	; (80055c0 <FUNC_Transmission+0x2190>)
 8005414:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
     *
     * Block description for '<S223>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_f = VCU_B.Add_j;
 8005418:	4b6a      	ldr	r3, [pc, #424]	; (80055c4 <FUNC_Transmission+0x2194>)
 800541a:	f893 2685 	ldrb.w	r2, [r3, #1669]	; 0x685
 800541e:	4b68      	ldr	r3, [pc, #416]	; (80055c0 <FUNC_Transmission+0x2190>)
 8005420:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd

    /* Update for Memory: '<S225>/Memory' */
    VCU_DW.Memory_PreviousInput_k = VCU_B.Logic_e[0];
 8005424:	4b67      	ldr	r3, [pc, #412]	; (80055c4 <FUNC_Transmission+0x2194>)
 8005426:	f893 270d 	ldrb.w	r2, [r3, #1805]	; 0x70d
 800542a:	4b65      	ldr	r3, [pc, #404]	; (80055c0 <FUNC_Transmission+0x2190>)
 800542c:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
     *
     * Block description for '<S212>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_p = VCU_B.Add_c;
 8005430:	4b64      	ldr	r3, [pc, #400]	; (80055c4 <FUNC_Transmission+0x2194>)
 8005432:	f893 2684 	ldrb.w	r2, [r3, #1668]	; 0x684
 8005436:	4b62      	ldr	r3, [pc, #392]	; (80055c0 <FUNC_Transmission+0x2190>)
 8005438:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
  /* End of Outputs for SubSystem: '<S7>/semi_auto_jr18' */

  /* RelationalOperator: '<S134>/Compare' incorporates:
   *  Constant: '<S134>/Constant'
   */
  VCU_B.Compare_j = (VCU_B.DataTypeConversion_cg == 2);
 800543c:	4b61      	ldr	r3, [pc, #388]	; (80055c4 <FUNC_Transmission+0x2194>)
 800543e:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8005442:	b25b      	sxtb	r3, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	bf0c      	ite	eq
 8005448:	2301      	moveq	r3, #1
 800544a:	2300      	movne	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	461a      	mov	r2, r3
 8005450:	4b5c      	ldr	r3, [pc, #368]	; (80055c4 <FUNC_Transmission+0x2194>)
 8005452:	f883 26cd 	strb.w	r2, [r3, #1741]	; 0x6cd

  /* Outputs for Enabled SubSystem: '<S7>/driver_jr18' incorporates:
   *  EnablePort: '<S137>/Enable'
   */
  if (VCU_B.Compare_j) {
 8005456:	4b5b      	ldr	r3, [pc, #364]	; (80055c4 <FUNC_Transmission+0x2194>)
 8005458:	f893 36cd 	ldrb.w	r3, [r3, #1741]	; 0x6cd
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 81c3 	beq.w	80057e8 <FUNC_Transmission+0x23b8>
    /* MinMax: '<S190>/MinMax' */
    if (VCU_B.x_clutch_STW > 0.0) {
 8005462:	4b58      	ldr	r3, [pc, #352]	; (80055c4 <FUNC_Transmission+0x2194>)
 8005464:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8005468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546c:	4610      	mov	r0, r2
 800546e:	4619      	mov	r1, r3
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	f009 fd36 	bl	800eee8 <__aeabi_dcmpgt>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d008      	beq.n	8005494 <FUNC_Transmission+0x2064>
      VCU_B.MinMax_l = VCU_B.x_clutch_STW;
 8005482:	4b50      	ldr	r3, [pc, #320]	; (80055c4 <FUNC_Transmission+0x2194>)
 8005484:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	494d      	ldr	r1, [pc, #308]	; (80055c4 <FUNC_Transmission+0x2194>)
 800548e:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
 8005492:	e006      	b.n	80054a2 <FUNC_Transmission+0x2072>
    } else {
      VCU_B.MinMax_l = 0.0;
 8005494:	494b      	ldr	r1, [pc, #300]	; (80055c4 <FUNC_Transmission+0x2194>)
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
    /* End of MinMax: '<S190>/MinMax' */

    /* RelationalOperator: '<S193>/Compare' incorporates:
     *  Constant: '<S193>/Constant'
     */
    VCU_B.Compare_bd = (VCU_B.MinMax_l > 1.0);
 80054a2:	4b48      	ldr	r3, [pc, #288]	; (80055c4 <FUNC_Transmission+0x2194>)
 80054a4:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 80054a8:	2101      	movs	r1, #1
 80054aa:	460c      	mov	r4, r1
 80054ac:	4610      	mov	r0, r2
 80054ae:	4619      	mov	r1, r3
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	4b44      	ldr	r3, [pc, #272]	; (80055c8 <FUNC_Transmission+0x2198>)
 80054b6:	f009 fd17 	bl	800eee8 <__aeabi_dcmpgt>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <FUNC_Transmission+0x2094>
 80054c0:	2300      	movs	r3, #0
 80054c2:	461c      	mov	r4, r3
 80054c4:	b2e3      	uxtb	r3, r4
 80054c6:	461a      	mov	r2, r3
 80054c8:	4b3e      	ldr	r3, [pc, #248]	; (80055c4 <FUNC_Transmission+0x2194>)
 80054ca:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718

    /* DataTypeConversion: '<S137>/Data Type Conversion12' */
    VCU_B.VOVG_IN_c = VCU_B.Compare_bd;
 80054ce:	4b3d      	ldr	r3, [pc, #244]	; (80055c4 <FUNC_Transmission+0x2194>)
 80054d0:	f893 3718 	ldrb.w	r3, [r3, #1816]	; 0x718
 80054d4:	4618      	mov	r0, r3
 80054d6:	f009 fa01 	bl	800e8dc <__aeabi_ui2d>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4939      	ldr	r1, [pc, #228]	; (80055c4 <FUNC_Transmission+0x2194>)
 80054e0:	e9c1 2344 	strd	r2, r3, [r1, #272]	; 0x110

    /* Sum: '<S190>/Add' */
    VCU_B.Add_l = VCU_B.MinMax_l - VCU_B.x_clutch_b;
 80054e4:	4b37      	ldr	r3, [pc, #220]	; (80055c4 <FUNC_Transmission+0x2194>)
 80054e6:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	; 0x108
 80054ea:	4b36      	ldr	r3, [pc, #216]	; (80055c4 <FUNC_Transmission+0x2194>)
 80054ec:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	f009 f8b4 	bl	800e660 <__aeabi_dsub>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4931      	ldr	r1, [pc, #196]	; (80055c4 <FUNC_Transmission+0x2194>)
 80054fe:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118

    /* RelationalOperator: '<S195>/Compare' incorporates:
     *  Constant: '<S195>/Constant'
     */
    VCU_B.Compare_e5 = (VCU_B.Add_l < -0.5);
 8005502:	4b30      	ldr	r3, [pc, #192]	; (80055c4 <FUNC_Transmission+0x2194>)
 8005504:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8005508:	2101      	movs	r1, #1
 800550a:	460c      	mov	r4, r1
 800550c:	4610      	mov	r0, r2
 800550e:	4619      	mov	r1, r3
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	4b2d      	ldr	r3, [pc, #180]	; (80055cc <FUNC_Transmission+0x219c>)
 8005516:	f009 fcc9 	bl	800eeac <__aeabi_dcmplt>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <FUNC_Transmission+0x20f4>
 8005520:	2300      	movs	r3, #0
 8005522:	461c      	mov	r4, r3
 8005524:	b2e3      	uxtb	r3, r4
 8005526:	461a      	mov	r2, r3
 8005528:	4b26      	ldr	r3, [pc, #152]	; (80055c4 <FUNC_Transmission+0x2194>)
 800552a:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719

    /* Lookup_n-D: '<S190>/Duty Cycle MHJ9' */
    VCU_B.DutyCycleMHJ9 = look1_binlxpw(VCU_B.Add_l, VCU_ConstP.pooled29,
 800552e:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <FUNC_Transmission+0x2194>)
 8005530:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8005534:	210e      	movs	r1, #14
 8005536:	9100      	str	r1, [sp, #0]
 8005538:	4610      	mov	r0, r2
 800553a:	4619      	mov	r1, r3
 800553c:	4a24      	ldr	r2, [pc, #144]	; (80055d0 <FUNC_Transmission+0x21a0>)
 800553e:	4b25      	ldr	r3, [pc, #148]	; (80055d4 <FUNC_Transmission+0x21a4>)
 8005540:	f000 fb2a 	bl	8005b98 <look1_binlxpw>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	491e      	ldr	r1, [pc, #120]	; (80055c4 <FUNC_Transmission+0x2194>)
 800554a:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
      VCU_ConstP.pooled28, 14U);

    /* Product: '<S190>/Product1' */
    VCU_B.Product1_p = VCU_B.DutyCycleMHJ9 * (real_T)VCU_B.Compare_e5;
 800554e:	4b1d      	ldr	r3, [pc, #116]	; (80055c4 <FUNC_Transmission+0x2194>)
 8005550:	e9d3 4548 	ldrd	r4, r5, [r3, #288]	; 0x120
 8005554:	4b1b      	ldr	r3, [pc, #108]	; (80055c4 <FUNC_Transmission+0x2194>)
 8005556:	f893 3719 	ldrb.w	r3, [r3, #1817]	; 0x719
 800555a:	4618      	mov	r0, r3
 800555c:	f009 f9be 	bl	800e8dc <__aeabi_ui2d>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4620      	mov	r0, r4
 8005566:	4629      	mov	r1, r5
 8005568:	f009 fa2e 	bl	800e9c8 <__aeabi_dmul>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4914      	ldr	r1, [pc, #80]	; (80055c4 <FUNC_Transmission+0x2194>)
 8005572:	e9c1 234a 	strd	r2, r3, [r1, #296]	; 0x128

    /* RelationalOperator: '<S194>/Compare' incorporates:
     *  Constant: '<S194>/Constant'
     */
    VCU_B.Compare_p = (VCU_B.x_clutch_b > 20.0);
 8005576:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <FUNC_Transmission+0x2194>)
 8005578:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	2101      	movs	r1, #1
 8005582:	460c      	mov	r4, r1
 8005584:	4610      	mov	r0, r2
 8005586:	4619      	mov	r1, r3
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <FUNC_Transmission+0x21a8>)
 800558e:	f009 fcab 	bl	800eee8 <__aeabi_dcmpgt>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <FUNC_Transmission+0x216c>
 8005598:	2300      	movs	r3, #0
 800559a:	461c      	mov	r4, r3
 800559c:	b2e3      	uxtb	r3, r4
 800559e:	461a      	mov	r2, r3
 80055a0:	4b08      	ldr	r3, [pc, #32]	; (80055c4 <FUNC_Transmission+0x2194>)
 80055a2:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a

    /* Switch: '<S190>/Switch1' incorporates:
     *  Constant: '<S190>/Constant2'
     *  Constant: '<S190>/Constant3'
     */
    if (VCU_B.Compare_p) {
 80055a6:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <FUNC_Transmission+0x2194>)
 80055a8:	f893 371a 	ldrb.w	r3, [r3, #1818]	; 0x71a
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d015      	beq.n	80055dc <FUNC_Transmission+0x21ac>
      VCU_B.Switch1_e = 2.0;
 80055b0:	4904      	ldr	r1, [pc, #16]	; (80055c4 <FUNC_Transmission+0x2194>)
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055ba:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
 80055be:	e013      	b.n	80055e8 <FUNC_Transmission+0x21b8>
 80055c0:	20001058 	.word	0x20001058
 80055c4:	200008c8 	.word	0x200008c8
 80055c8:	3ff00000 	.word	0x3ff00000
 80055cc:	bfe00000 	.word	0xbfe00000
 80055d0:	0800f3f8 	.word	0x0800f3f8
 80055d4:	0800f380 	.word	0x0800f380
 80055d8:	40340000 	.word	0x40340000
    } else {
      VCU_B.Switch1_e = 1.0;
 80055dc:	49a5      	ldr	r1, [pc, #660]	; (8005874 <FUNC_Transmission+0x2444>)
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	4ba5      	ldr	r3, [pc, #660]	; (8005878 <FUNC_Transmission+0x2448>)
 80055e4:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
    }

    /* End of Switch: '<S190>/Switch1' */

    /* Product: '<S190>/Product2' */
    VCU_B.Product2_p = VCU_B.Product1_p * VCU_B.Switch1_e;
 80055e8:	4ba2      	ldr	r3, [pc, #648]	; (8005874 <FUNC_Transmission+0x2444>)
 80055ea:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	; 0x128
 80055ee:	4ba1      	ldr	r3, [pc, #644]	; (8005874 <FUNC_Transmission+0x2444>)
 80055f0:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80055f4:	f009 f9e8 	bl	800e9c8 <__aeabi_dmul>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	499d      	ldr	r1, [pc, #628]	; (8005874 <FUNC_Transmission+0x2444>)
 80055fe:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138

    /* DataTypeConversion: '<S137>/Data Type Conversion15' */
    VCU_B.MHJ9_OUT_k = VCU_B.Product2_p;
 8005602:	4b9c      	ldr	r3, [pc, #624]	; (8005874 <FUNC_Transmission+0x2444>)
 8005604:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8005608:	499a      	ldr	r1, [pc, #616]	; (8005874 <FUNC_Transmission+0x2444>)
 800560a:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140

    /* RelationalOperator: '<S196>/Compare' incorporates:
     *  Constant: '<S196>/Constant'
     */
    VCU_B.Compare_gz = (VCU_B.Add_l > 0.0);
 800560e:	4b99      	ldr	r3, [pc, #612]	; (8005874 <FUNC_Transmission+0x2444>)
 8005610:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8005614:	2101      	movs	r1, #1
 8005616:	460c      	mov	r4, r1
 8005618:	4610      	mov	r0, r2
 800561a:	4619      	mov	r1, r3
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	f009 fc60 	bl	800eee8 <__aeabi_dcmpgt>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <FUNC_Transmission+0x2202>
 800562e:	2300      	movs	r3, #0
 8005630:	461c      	mov	r4, r3
 8005632:	b2e3      	uxtb	r3, r4
 8005634:	461a      	mov	r2, r3
 8005636:	4b8f      	ldr	r3, [pc, #572]	; (8005874 <FUNC_Transmission+0x2444>)
 8005638:	f883 271b 	strb.w	r2, [r3, #1819]	; 0x71b

    /* Product: '<S190>/Product3' */
    VCU_B.Product3_d = VCU_B.DutyCycleMHJ9 * (real_T)VCU_B.Compare_gz;
 800563c:	4b8d      	ldr	r3, [pc, #564]	; (8005874 <FUNC_Transmission+0x2444>)
 800563e:	e9d3 4548 	ldrd	r4, r5, [r3, #288]	; 0x120
 8005642:	4b8c      	ldr	r3, [pc, #560]	; (8005874 <FUNC_Transmission+0x2444>)
 8005644:	f893 371b 	ldrb.w	r3, [r3, #1819]	; 0x71b
 8005648:	4618      	mov	r0, r3
 800564a:	f009 f947 	bl	800e8dc <__aeabi_ui2d>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	4620      	mov	r0, r4
 8005654:	4629      	mov	r1, r5
 8005656:	f009 f9b7 	bl	800e9c8 <__aeabi_dmul>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4985      	ldr	r1, [pc, #532]	; (8005874 <FUNC_Transmission+0x2444>)
 8005660:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148

    /* DataTypeConversion: '<S137>/Data Type Conversion14' */
    VCU_B.MHJ9_IN_p = VCU_B.Product3_d;
 8005664:	4b83      	ldr	r3, [pc, #524]	; (8005874 <FUNC_Transmission+0x2444>)
 8005666:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800566a:	4982      	ldr	r1, [pc, #520]	; (8005874 <FUNC_Transmission+0x2444>)
 800566c:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150

    /* RelationalOperator: '<S197>/Compare' incorporates:
     *  Constant: '<S197>/Constant'
     */
    VCU_B.Compare_bh = (VCU_B.Add_l < -20.0);
 8005670:	4b80      	ldr	r3, [pc, #512]	; (8005874 <FUNC_Transmission+0x2444>)
 8005672:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8005676:	2101      	movs	r1, #1
 8005678:	460c      	mov	r4, r1
 800567a:	4610      	mov	r0, r2
 800567c:	4619      	mov	r1, r3
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	4b7e      	ldr	r3, [pc, #504]	; (800587c <FUNC_Transmission+0x244c>)
 8005684:	f009 fc12 	bl	800eeac <__aeabi_dcmplt>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <FUNC_Transmission+0x2262>
 800568e:	2300      	movs	r3, #0
 8005690:	461c      	mov	r4, r3
 8005692:	b2e3      	uxtb	r3, r4
 8005694:	461a      	mov	r2, r3
 8005696:	4b77      	ldr	r3, [pc, #476]	; (8005874 <FUNC_Transmission+0x2444>)
 8005698:	f883 271c 	strb.w	r2, [r3, #1820]	; 0x71c

    /* DataTypeConversion: '<S137>/Data Type Conversion13' */
    VCU_B.VOVG_OUT_o = VCU_B.Compare_bh;
 800569c:	4b75      	ldr	r3, [pc, #468]	; (8005874 <FUNC_Transmission+0x2444>)
 800569e:	f893 371c 	ldrb.w	r3, [r3, #1820]	; 0x71c
 80056a2:	4618      	mov	r0, r3
 80056a4:	f009 f91a 	bl	800e8dc <__aeabi_ui2d>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4971      	ldr	r1, [pc, #452]	; (8005874 <FUNC_Transmission+0x2444>)
 80056ae:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158

    /* RelationalOperator: '<S191>/Compare' incorporates:
     *  Constant: '<S191>/Constant'
     */
    VCU_B.Compare_g5 = (VCU_B.DataTypeConversion3 < 3.0);
 80056b2:	4b70      	ldr	r3, [pc, #448]	; (8005874 <FUNC_Transmission+0x2444>)
 80056b4:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	2101      	movs	r1, #1
 80056be:	460c      	mov	r4, r1
 80056c0:	4610      	mov	r0, r2
 80056c2:	4619      	mov	r1, r3
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	4b6d      	ldr	r3, [pc, #436]	; (8005880 <FUNC_Transmission+0x2450>)
 80056ca:	f009 fbef 	bl	800eeac <__aeabi_dcmplt>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <FUNC_Transmission+0x22a8>
 80056d4:	2300      	movs	r3, #0
 80056d6:	461c      	mov	r4, r3
 80056d8:	b2e3      	uxtb	r3, r4
 80056da:	461a      	mov	r2, r3
 80056dc:	4b65      	ldr	r3, [pc, #404]	; (8005874 <FUNC_Transmission+0x2444>)
 80056de:	f883 271d 	strb.w	r2, [r3, #1821]	; 0x71d

    /* Logic: '<S137>/Logical Operator1' */
    VCU_B.LogicalOperator1_p = ((VCU_B.STW_shift_up_request != 0.0) &&
 80056e2:	4b64      	ldr	r3, [pc, #400]	; (8005874 <FUNC_Transmission+0x2444>)
 80056e4:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	4610      	mov	r0, r2
 80056ee:	4619      	mov	r1, r3
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	f04f 0300 	mov.w	r3, #0
 80056f8:	f009 fbce 	bl	800ee98 <__aeabi_dcmpeq>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <FUNC_Transmission+0x22e0>
      VCU_B.Compare_g5);
 8005702:	4b5c      	ldr	r3, [pc, #368]	; (8005874 <FUNC_Transmission+0x2444>)
 8005704:	f893 371d 	ldrb.w	r3, [r3, #1821]	; 0x71d
     *  Constant: '<S191>/Constant'
     */
    VCU_B.Compare_g5 = (VCU_B.DataTypeConversion3 < 3.0);

    /* Logic: '<S137>/Logical Operator1' */
    VCU_B.LogicalOperator1_p = ((VCU_B.STW_shift_up_request != 0.0) &&
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <FUNC_Transmission+0x22e0>
 800570c:	2301      	movs	r3, #1
 800570e:	e000      	b.n	8005712 <FUNC_Transmission+0x22e2>
 8005710:	2300      	movs	r3, #0
 8005712:	b2da      	uxtb	r2, r3
 8005714:	4b57      	ldr	r3, [pc, #348]	; (8005874 <FUNC_Transmission+0x2444>)
 8005716:	f883 271e 	strb.w	r2, [r3, #1822]	; 0x71e
      VCU_B.Compare_g5);

    /* DataTypeConversion: '<S137>/Data Type Conversion8' */
    VCU_B.VOVG_ShiftUp_o = VCU_B.LogicalOperator1_p;
 800571a:	4b56      	ldr	r3, [pc, #344]	; (8005874 <FUNC_Transmission+0x2444>)
 800571c:	f893 371e 	ldrb.w	r3, [r3, #1822]	; 0x71e
 8005720:	4618      	mov	r0, r3
 8005722:	f009 f8db 	bl	800e8dc <__aeabi_ui2d>
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	4952      	ldr	r1, [pc, #328]	; (8005874 <FUNC_Transmission+0x2444>)
 800572c:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160

    /* RelationalOperator: '<S192>/Compare' incorporates:
     *  Constant: '<S192>/Constant'
     */
    VCU_B.Compare_mz = (VCU_B.DataTypeConversion3 >= 0.0);
 8005730:	4b50      	ldr	r3, [pc, #320]	; (8005874 <FUNC_Transmission+0x2444>)
 8005732:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	2101      	movs	r1, #1
 800573c:	460c      	mov	r4, r1
 800573e:	4610      	mov	r0, r2
 8005740:	4619      	mov	r1, r3
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	f009 fbc3 	bl	800eed4 <__aeabi_dcmpge>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <FUNC_Transmission+0x2328>
 8005754:	2300      	movs	r3, #0
 8005756:	461c      	mov	r4, r3
 8005758:	b2e3      	uxtb	r3, r4
 800575a:	461a      	mov	r2, r3
 800575c:	4b45      	ldr	r3, [pc, #276]	; (8005874 <FUNC_Transmission+0x2444>)
 800575e:	f883 271f 	strb.w	r2, [r3, #1823]	; 0x71f

    /* Logic: '<S137>/Logical Operator' */
    VCU_B.LogicalOperator_e = (VCU_B.Compare_mz && (VCU_B.STW_shift_down_request
 8005762:	4b44      	ldr	r3, [pc, #272]	; (8005874 <FUNC_Transmission+0x2444>)
 8005764:	f893 371f 	ldrb.w	r3, [r3, #1823]	; 0x71f
 8005768:	2b00      	cmp	r3, #0
 800576a:	d011      	beq.n	8005790 <FUNC_Transmission+0x2360>
 800576c:	4b41      	ldr	r3, [pc, #260]	; (8005874 <FUNC_Transmission+0x2444>)
 800576e:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	4610      	mov	r0, r2
 8005778:	4619      	mov	r1, r3
 800577a:	f04f 0200 	mov.w	r2, #0
 800577e:	f04f 0300 	mov.w	r3, #0
 8005782:	f009 fb89 	bl	800ee98 <__aeabi_dcmpeq>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <FUNC_Transmission+0x2360>
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <FUNC_Transmission+0x2362>
 8005790:	2300      	movs	r3, #0
 8005792:	b2da      	uxtb	r2, r3
 8005794:	4b37      	ldr	r3, [pc, #220]	; (8005874 <FUNC_Transmission+0x2444>)
 8005796:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720
      != 0.0));

    /* DataTypeConversion: '<S137>/Data Type Conversion10' */
    VCU_B.VOVG_ShiftDown_f = VCU_B.LogicalOperator_e;
 800579a:	4b36      	ldr	r3, [pc, #216]	; (8005874 <FUNC_Transmission+0x2444>)
 800579c:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 80057a0:	4618      	mov	r0, r3
 80057a2:	f009 f89b 	bl	800e8dc <__aeabi_ui2d>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4932      	ldr	r1, [pc, #200]	; (8005874 <FUNC_Transmission+0x2444>)
 80057ac:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168

    /* DataTypeConversion: '<S137>/Data Type Conversion11' */
    VCU_B.Ignition_Cut_h = 0.0;
 80057b0:	4930      	ldr	r1, [pc, #192]	; (8005874 <FUNC_Transmission+0x2444>)
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	f04f 0300 	mov.w	r3, #0
 80057ba:	e9c1 235c 	strd	r2, r3, [r1, #368]	; 0x170

    /* DataTypeConversion: '<S137>/Data Type Conversion16' */
    VCU_B.x_clutch_LC_i = 0.0;
 80057be:	492d      	ldr	r1, [pc, #180]	; (8005874 <FUNC_Transmission+0x2444>)
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	f04f 0300 	mov.w	r3, #0
 80057c8:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178

    /* DataTypeConversion: '<S137>/Data Type Conversion17' */
    VCU_B.LC_Mdes_f = 0.0;
 80057cc:	4929      	ldr	r1, [pc, #164]	; (8005874 <FUNC_Transmission+0x2444>)
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	e9c1 2360 	strd	r2, r3, [r1, #384]	; 0x180

    /* DataTypeConversion: '<S137>/Data Type Conversion18' */
    VCU_B.LC_Fnr_f = 0.0;
 80057da:	4926      	ldr	r1, [pc, #152]	; (8005874 <FUNC_Transmission+0x2444>)
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
  }

  /* End of Outputs for SubSystem: '<S7>/driver_jr18' */

  /* MultiPortSwitch: '<S7>/Multiport Switch' */
  switch (VCU_B.DataTypeConversion_cg) {
 80057e8:	4b22      	ldr	r3, [pc, #136]	; (8005874 <FUNC_Transmission+0x2444>)
 80057ea:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 80057ee:	b25b      	sxtb	r3, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d00a      	beq.n	800580a <FUNC_Transmission+0x23da>
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d00f      	beq.n	8005818 <FUNC_Transmission+0x23e8>
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d114      	bne.n	8005826 <FUNC_Transmission+0x23f6>
   case 1:
    VCU_B.VOVG_ShiftUp = VCU_B.VOVG_ShiftUp_k;
 80057fc:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <FUNC_Transmission+0x2444>)
 80057fe:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8005802:	491c      	ldr	r1, [pc, #112]	; (8005874 <FUNC_Transmission+0x2444>)
 8005804:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 8005808:	e014      	b.n	8005834 <FUNC_Transmission+0x2404>

   case 2:
    VCU_B.VOVG_ShiftUp = VCU_B.VOVG_ShiftUp_o;
 800580a:	4b1a      	ldr	r3, [pc, #104]	; (8005874 <FUNC_Transmission+0x2444>)
 800580c:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 8005810:	4918      	ldr	r1, [pc, #96]	; (8005874 <FUNC_Transmission+0x2444>)
 8005812:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 8005816:	e00d      	b.n	8005834 <FUNC_Transmission+0x2404>

   case 3:
    VCU_B.VOVG_ShiftUp = VCU_B.VOVG_ShiftUp_oi;
 8005818:	4b16      	ldr	r3, [pc, #88]	; (8005874 <FUNC_Transmission+0x2444>)
 800581a:	e9d3 2374 	ldrd	r2, r3, [r3, #464]	; 0x1d0
 800581e:	4915      	ldr	r1, [pc, #84]	; (8005874 <FUNC_Transmission+0x2444>)
 8005820:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 8005824:	e006      	b.n	8005834 <FUNC_Transmission+0x2404>

   default:
    VCU_B.VOVG_ShiftUp = VCU_B.VOVG_ShiftUp_k;
 8005826:	4b13      	ldr	r3, [pc, #76]	; (8005874 <FUNC_Transmission+0x2444>)
 8005828:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800582c:	4911      	ldr	r1, [pc, #68]	; (8005874 <FUNC_Transmission+0x2444>)
 800582e:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 8005832:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 8005834:	4b0f      	ldr	r3, [pc, #60]	; (8005874 <FUNC_Transmission+0x2444>)
 8005836:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 800583a:	b25b      	sxtb	r3, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d00a      	beq.n	8005856 <FUNC_Transmission+0x2426>
 8005840:	2b03      	cmp	r3, #3
 8005842:	d00f      	beq.n	8005864 <FUNC_Transmission+0x2434>
 8005844:	2b01      	cmp	r3, #1
 8005846:	d11d      	bne.n	8005884 <FUNC_Transmission+0x2454>
   case 1:
    VCU_B.LC_Fnr = VCU_B.LC_Fnr_l;
 8005848:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <FUNC_Transmission+0x2444>)
 800584a:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 800584e:	4909      	ldr	r1, [pc, #36]	; (8005874 <FUNC_Transmission+0x2444>)
 8005850:	e9c1 2302 	strd	r2, r3, [r1, #8]
    break;
 8005854:	e01d      	b.n	8005892 <FUNC_Transmission+0x2462>

   case 2:
    VCU_B.LC_Fnr = VCU_B.LC_Fnr_f;
 8005856:	4b07      	ldr	r3, [pc, #28]	; (8005874 <FUNC_Transmission+0x2444>)
 8005858:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 800585c:	4905      	ldr	r1, [pc, #20]	; (8005874 <FUNC_Transmission+0x2444>)
 800585e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    break;
 8005862:	e016      	b.n	8005892 <FUNC_Transmission+0x2462>

   case 3:
    VCU_B.LC_Fnr = VCU_B.LC_Fnr_lv;
 8005864:	4b03      	ldr	r3, [pc, #12]	; (8005874 <FUNC_Transmission+0x2444>)
 8005866:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	; 0x248
 800586a:	4902      	ldr	r1, [pc, #8]	; (8005874 <FUNC_Transmission+0x2444>)
 800586c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    break;
 8005870:	e00f      	b.n	8005892 <FUNC_Transmission+0x2462>
 8005872:	bf00      	nop
 8005874:	200008c8 	.word	0x200008c8
 8005878:	3ff00000 	.word	0x3ff00000
 800587c:	c0340000 	.word	0xc0340000
 8005880:	40080000 	.word	0x40080000

   default:
    VCU_B.LC_Fnr = VCU_B.LC_Fnr_l;
 8005884:	4b84      	ldr	r3, [pc, #528]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005886:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 800588a:	4983      	ldr	r1, [pc, #524]	; (8005a98 <FUNC_Transmission+0x2668>)
 800588c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    break;
 8005890:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 8005892:	4b81      	ldr	r3, [pc, #516]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005894:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8005898:	b25b      	sxtb	r3, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d00a      	beq.n	80058b4 <FUNC_Transmission+0x2484>
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d00f      	beq.n	80058c2 <FUNC_Transmission+0x2492>
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d114      	bne.n	80058d0 <FUNC_Transmission+0x24a0>
   case 1:
    VCU_B.VOVG_ShiftDown = VCU_B.VOVG_ShiftDown_m;
 80058a6:	4b7c      	ldr	r3, [pc, #496]	; (8005a98 <FUNC_Transmission+0x2668>)
 80058a8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80058ac:	497a      	ldr	r1, [pc, #488]	; (8005a98 <FUNC_Transmission+0x2668>)
 80058ae:	e9c1 2304 	strd	r2, r3, [r1, #16]
    break;
 80058b2:	e014      	b.n	80058de <FUNC_Transmission+0x24ae>

   case 2:
    VCU_B.VOVG_ShiftDown = VCU_B.VOVG_ShiftDown_f;
 80058b4:	4b78      	ldr	r3, [pc, #480]	; (8005a98 <FUNC_Transmission+0x2668>)
 80058b6:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 80058ba:	4977      	ldr	r1, [pc, #476]	; (8005a98 <FUNC_Transmission+0x2668>)
 80058bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    break;
 80058c0:	e00d      	b.n	80058de <FUNC_Transmission+0x24ae>

   case 3:
    VCU_B.VOVG_ShiftDown = VCU_B.VOVG_ShiftDown_a;
 80058c2:	4b75      	ldr	r3, [pc, #468]	; (8005a98 <FUNC_Transmission+0x2668>)
 80058c4:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 80058c8:	4973      	ldr	r1, [pc, #460]	; (8005a98 <FUNC_Transmission+0x2668>)
 80058ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
    break;
 80058ce:	e006      	b.n	80058de <FUNC_Transmission+0x24ae>

   default:
    VCU_B.VOVG_ShiftDown = VCU_B.VOVG_ShiftDown_m;
 80058d0:	4b71      	ldr	r3, [pc, #452]	; (8005a98 <FUNC_Transmission+0x2668>)
 80058d2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80058d6:	4970      	ldr	r1, [pc, #448]	; (8005a98 <FUNC_Transmission+0x2668>)
 80058d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    break;
 80058dc:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 80058de:	4b6e      	ldr	r3, [pc, #440]	; (8005a98 <FUNC_Transmission+0x2668>)
 80058e0:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 80058e4:	b25b      	sxtb	r3, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d00a      	beq.n	8005900 <FUNC_Transmission+0x24d0>
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d00f      	beq.n	800590e <FUNC_Transmission+0x24de>
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d114      	bne.n	800591c <FUNC_Transmission+0x24ec>
   case 1:
    VCU_B.Ignition_Cut = VCU_B.Ignition_Cut_o;
 80058f2:	4b69      	ldr	r3, [pc, #420]	; (8005a98 <FUNC_Transmission+0x2668>)
 80058f4:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80058f8:	4967      	ldr	r1, [pc, #412]	; (8005a98 <FUNC_Transmission+0x2668>)
 80058fa:	e9c1 2306 	strd	r2, r3, [r1, #24]
    break;
 80058fe:	e014      	b.n	800592a <FUNC_Transmission+0x24fa>

   case 2:
    VCU_B.Ignition_Cut = VCU_B.Ignition_Cut_h;
 8005900:	4b65      	ldr	r3, [pc, #404]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005902:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	; 0x170
 8005906:	4964      	ldr	r1, [pc, #400]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005908:	e9c1 2306 	strd	r2, r3, [r1, #24]
    break;
 800590c:	e00d      	b.n	800592a <FUNC_Transmission+0x24fa>

   case 3:
    VCU_B.Ignition_Cut = VCU_B.Ignition_Cut_d;
 800590e:	4b62      	ldr	r3, [pc, #392]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005910:	e9d3 2372 	ldrd	r2, r3, [r3, #456]	; 0x1c8
 8005914:	4960      	ldr	r1, [pc, #384]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005916:	e9c1 2306 	strd	r2, r3, [r1, #24]
    break;
 800591a:	e006      	b.n	800592a <FUNC_Transmission+0x24fa>

   default:
    VCU_B.Ignition_Cut = VCU_B.Ignition_Cut_o;
 800591c:	4b5e      	ldr	r3, [pc, #376]	; (8005a98 <FUNC_Transmission+0x2668>)
 800591e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005922:	495d      	ldr	r1, [pc, #372]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005924:	e9c1 2306 	strd	r2, r3, [r1, #24]
    break;
 8005928:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 800592a:	4b5b      	ldr	r3, [pc, #364]	; (8005a98 <FUNC_Transmission+0x2668>)
 800592c:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8005930:	b25b      	sxtb	r3, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d00a      	beq.n	800594c <FUNC_Transmission+0x251c>
 8005936:	2b03      	cmp	r3, #3
 8005938:	d00f      	beq.n	800595a <FUNC_Transmission+0x252a>
 800593a:	2b01      	cmp	r3, #1
 800593c:	d114      	bne.n	8005968 <FUNC_Transmission+0x2538>
   case 1:
    VCU_B.VOVG_IN = VCU_B.VOVG_IN_h;
 800593e:	4b56      	ldr	r3, [pc, #344]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005940:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8005944:	4954      	ldr	r1, [pc, #336]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005946:	e9c1 2308 	strd	r2, r3, [r1, #32]
    break;
 800594a:	e014      	b.n	8005976 <FUNC_Transmission+0x2546>

   case 2:
    VCU_B.VOVG_IN = VCU_B.VOVG_IN_c;
 800594c:	4b52      	ldr	r3, [pc, #328]	; (8005a98 <FUNC_Transmission+0x2668>)
 800594e:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	; 0x110
 8005952:	4951      	ldr	r1, [pc, #324]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005954:	e9c1 2308 	strd	r2, r3, [r1, #32]
    break;
 8005958:	e00d      	b.n	8005976 <FUNC_Transmission+0x2546>

   case 3:
    VCU_B.VOVG_IN = VCU_B.VOVG_IN_g;
 800595a:	4b4f      	ldr	r3, [pc, #316]	; (8005a98 <FUNC_Transmission+0x2668>)
 800595c:	e9d3 237a 	ldrd	r2, r3, [r3, #488]	; 0x1e8
 8005960:	494d      	ldr	r1, [pc, #308]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005962:	e9c1 2308 	strd	r2, r3, [r1, #32]
    break;
 8005966:	e006      	b.n	8005976 <FUNC_Transmission+0x2546>

   default:
    VCU_B.VOVG_IN = VCU_B.VOVG_IN_h;
 8005968:	4b4b      	ldr	r3, [pc, #300]	; (8005a98 <FUNC_Transmission+0x2668>)
 800596a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800596e:	494a      	ldr	r1, [pc, #296]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005970:	e9c1 2308 	strd	r2, r3, [r1, #32]
    break;
 8005974:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 8005976:	4b48      	ldr	r3, [pc, #288]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005978:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 800597c:	b25b      	sxtb	r3, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d00a      	beq.n	8005998 <FUNC_Transmission+0x2568>
 8005982:	2b03      	cmp	r3, #3
 8005984:	d00f      	beq.n	80059a6 <FUNC_Transmission+0x2576>
 8005986:	2b01      	cmp	r3, #1
 8005988:	d114      	bne.n	80059b4 <FUNC_Transmission+0x2584>
   case 1:
    VCU_B.VOVG_OUT = VCU_B.VOVG_OUT_j;
 800598a:	4b43      	ldr	r3, [pc, #268]	; (8005a98 <FUNC_Transmission+0x2668>)
 800598c:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8005990:	4941      	ldr	r1, [pc, #260]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005992:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    break;
 8005996:	e014      	b.n	80059c2 <FUNC_Transmission+0x2592>

   case 2:
    VCU_B.VOVG_OUT = VCU_B.VOVG_OUT_o;
 8005998:	4b3f      	ldr	r3, [pc, #252]	; (8005a98 <FUNC_Transmission+0x2668>)
 800599a:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
 800599e:	493e      	ldr	r1, [pc, #248]	; (8005a98 <FUNC_Transmission+0x2668>)
 80059a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    break;
 80059a4:	e00d      	b.n	80059c2 <FUNC_Transmission+0x2592>

   case 3:
    VCU_B.VOVG_OUT = VCU_B.VOVG_OUT_b;
 80059a6:	4b3c      	ldr	r3, [pc, #240]	; (8005a98 <FUNC_Transmission+0x2668>)
 80059a8:	e9d3 238c 	ldrd	r2, r3, [r3, #560]	; 0x230
 80059ac:	493a      	ldr	r1, [pc, #232]	; (8005a98 <FUNC_Transmission+0x2668>)
 80059ae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    break;
 80059b2:	e006      	b.n	80059c2 <FUNC_Transmission+0x2592>

   default:
    VCU_B.VOVG_OUT = VCU_B.VOVG_OUT_j;
 80059b4:	4b38      	ldr	r3, [pc, #224]	; (8005a98 <FUNC_Transmission+0x2668>)
 80059b6:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80059ba:	4937      	ldr	r1, [pc, #220]	; (8005a98 <FUNC_Transmission+0x2668>)
 80059bc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    break;
 80059c0:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 80059c2:	4b35      	ldr	r3, [pc, #212]	; (8005a98 <FUNC_Transmission+0x2668>)
 80059c4:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 80059c8:	b25b      	sxtb	r3, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d00a      	beq.n	80059e4 <FUNC_Transmission+0x25b4>
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d00f      	beq.n	80059f2 <FUNC_Transmission+0x25c2>
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d114      	bne.n	8005a00 <FUNC_Transmission+0x25d0>
   case 1:
    VCU_B.MHJ9_IN = VCU_B.MHJ9_IN_e;
 80059d6:	4b30      	ldr	r3, [pc, #192]	; (8005a98 <FUNC_Transmission+0x2668>)
 80059d8:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 80059dc:	492e      	ldr	r1, [pc, #184]	; (8005a98 <FUNC_Transmission+0x2668>)
 80059de:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    break;
 80059e2:	e014      	b.n	8005a0e <FUNC_Transmission+0x25de>

   case 2:
    VCU_B.MHJ9_IN = VCU_B.MHJ9_IN_p;
 80059e4:	4b2c      	ldr	r3, [pc, #176]	; (8005a98 <FUNC_Transmission+0x2668>)
 80059e6:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80059ea:	492b      	ldr	r1, [pc, #172]	; (8005a98 <FUNC_Transmission+0x2668>)
 80059ec:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    break;
 80059f0:	e00d      	b.n	8005a0e <FUNC_Transmission+0x25de>

   case 3:
    VCU_B.MHJ9_IN = VCU_B.MHJ9_IN_h;
 80059f2:	4b29      	ldr	r3, [pc, #164]	; (8005a98 <FUNC_Transmission+0x2668>)
 80059f4:	e9d3 238a 	ldrd	r2, r3, [r3, #552]	; 0x228
 80059f8:	4927      	ldr	r1, [pc, #156]	; (8005a98 <FUNC_Transmission+0x2668>)
 80059fa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    break;
 80059fe:	e006      	b.n	8005a0e <FUNC_Transmission+0x25de>

   default:
    VCU_B.MHJ9_IN = VCU_B.MHJ9_IN_e;
 8005a00:	4b25      	ldr	r3, [pc, #148]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a02:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 8005a06:	4924      	ldr	r1, [pc, #144]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a08:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    break;
 8005a0c:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 8005a0e:	4b22      	ldr	r3, [pc, #136]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a10:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8005a14:	b25b      	sxtb	r3, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d00a      	beq.n	8005a30 <FUNC_Transmission+0x2600>
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d00f      	beq.n	8005a3e <FUNC_Transmission+0x260e>
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d114      	bne.n	8005a4c <FUNC_Transmission+0x261c>
   case 1:
    VCU_B.MHJ9_OUT = VCU_B.MHJ9_OUT_d;
 8005a22:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a24:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8005a28:	491b      	ldr	r1, [pc, #108]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a2a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    break;
 8005a2e:	e014      	b.n	8005a5a <FUNC_Transmission+0x262a>

   case 2:
    VCU_B.MHJ9_OUT = VCU_B.MHJ9_OUT_k;
 8005a30:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a32:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 8005a36:	4918      	ldr	r1, [pc, #96]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a38:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    break;
 8005a3c:	e00d      	b.n	8005a5a <FUNC_Transmission+0x262a>

   case 3:
    VCU_B.MHJ9_OUT = VCU_B.MHJ9_OUT_d5;
 8005a3e:	4b16      	ldr	r3, [pc, #88]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a40:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	; 0x218
 8005a44:	4914      	ldr	r1, [pc, #80]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a46:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    break;
 8005a4a:	e006      	b.n	8005a5a <FUNC_Transmission+0x262a>

   default:
    VCU_B.MHJ9_OUT = VCU_B.MHJ9_OUT_d;
 8005a4c:	4b12      	ldr	r3, [pc, #72]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a4e:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8005a52:	4911      	ldr	r1, [pc, #68]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a54:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    break;
 8005a58:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 8005a5a:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a5c:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8005a60:	b25b      	sxtb	r3, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d00a      	beq.n	8005a7c <FUNC_Transmission+0x264c>
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	d00f      	beq.n	8005a8a <FUNC_Transmission+0x265a>
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d116      	bne.n	8005a9c <FUNC_Transmission+0x266c>
   case 1:
    VCU_B.x_clutch_LC = VCU_B.x_clutch_LC_b;
 8005a6e:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a70:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 8005a74:	4908      	ldr	r1, [pc, #32]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a76:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    break;
 8005a7a:	e016      	b.n	8005aaa <FUNC_Transmission+0x267a>

   case 2:
    VCU_B.x_clutch_LC = VCU_B.x_clutch_LC_i;
 8005a7c:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a7e:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 8005a82:	4905      	ldr	r1, [pc, #20]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a84:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    break;
 8005a88:	e00f      	b.n	8005aaa <FUNC_Transmission+0x267a>

   case 3:
    VCU_B.x_clutch_LC = VCU_B.x_clutch_LC_bg;
 8005a8a:	4b03      	ldr	r3, [pc, #12]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a8c:	e9d3 238e 	ldrd	r2, r3, [r3, #568]	; 0x238
 8005a90:	4901      	ldr	r1, [pc, #4]	; (8005a98 <FUNC_Transmission+0x2668>)
 8005a92:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    break;
 8005a96:	e008      	b.n	8005aaa <FUNC_Transmission+0x267a>
 8005a98:	200008c8 	.word	0x200008c8

   default:
    VCU_B.x_clutch_LC = VCU_B.x_clutch_LC_b;
 8005a9c:	4b3c      	ldr	r3, [pc, #240]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005a9e:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 8005aa2:	493b      	ldr	r1, [pc, #236]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005aa4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    break;
 8005aa8:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 8005aaa:	4b39      	ldr	r3, [pc, #228]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005aac:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8005ab0:	b25b      	sxtb	r3, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d00a      	beq.n	8005acc <FUNC_Transmission+0x269c>
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d00f      	beq.n	8005ada <FUNC_Transmission+0x26aa>
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d114      	bne.n	8005ae8 <FUNC_Transmission+0x26b8>
   case 1:
    VCU_B.LC_Mdes = VCU_B.LC_Mdes_b;
 8005abe:	4b34      	ldr	r3, [pc, #208]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005ac0:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8005ac4:	4932      	ldr	r1, [pc, #200]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005ac6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    break;
 8005aca:	e014      	b.n	8005af6 <FUNC_Transmission+0x26c6>

   case 2:
    VCU_B.LC_Mdes = VCU_B.LC_Mdes_f;
 8005acc:	4b30      	ldr	r3, [pc, #192]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005ace:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 8005ad2:	492f      	ldr	r1, [pc, #188]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005ad4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    break;
 8005ad8:	e00d      	b.n	8005af6 <FUNC_Transmission+0x26c6>

   case 3:
    VCU_B.LC_Mdes = VCU_B.LC_Mdes_o;
 8005ada:	4b2d      	ldr	r3, [pc, #180]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005adc:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	; 0x240
 8005ae0:	492b      	ldr	r1, [pc, #172]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005ae2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    break;
 8005ae6:	e006      	b.n	8005af6 <FUNC_Transmission+0x26c6>

   default:
    VCU_B.LC_Mdes = VCU_B.LC_Mdes_b;
 8005ae8:	4b29      	ldr	r3, [pc, #164]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005aea:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8005aee:	4928      	ldr	r1, [pc, #160]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005af0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    break;
 8005af4:	bf00      	nop
  }

  /* End of MultiPortSwitch: '<S7>/Multiport Switch' */

  /* MultiPortSwitch: '<S7>/Multiport Switch1' */
  switch (VCU_B.DataTypeConversion_cg) {
 8005af6:	4b26      	ldr	r3, [pc, #152]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005af8:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8005afc:	b25b      	sxtb	r3, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d00a      	beq.n	8005b18 <FUNC_Transmission+0x26e8>
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d00e      	beq.n	8005b24 <FUNC_Transmission+0x26f4>
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d113      	bne.n	8005b32 <FUNC_Transmission+0x2702>
   case 1:
    VCU_B.LC_active_bit = VCU_B.LC_active_bit_f;
 8005b0a:	4b21      	ldr	r3, [pc, #132]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005b0c:	f893 26dd 	ldrb.w	r2, [r3, #1757]	; 0x6dd
 8005b10:	4b1f      	ldr	r3, [pc, #124]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005b12:	f883 26ce 	strb.w	r2, [r3, #1742]	; 0x6ce
    break;
 8005b16:	e013      	b.n	8005b40 <FUNC_Transmission+0x2710>

   case 2:
    VCU_B.LC_active_bit = VCU_ConstB.LC_active_bit;
 8005b18:	4b1e      	ldr	r3, [pc, #120]	; (8005b94 <FUNC_Transmission+0x2764>)
 8005b1a:	7c9a      	ldrb	r2, [r3, #18]
 8005b1c:	4b1c      	ldr	r3, [pc, #112]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005b1e:	f883 26ce 	strb.w	r2, [r3, #1742]	; 0x6ce
    break;
 8005b22:	e00d      	b.n	8005b40 <FUNC_Transmission+0x2710>

   case 3:
    VCU_B.LC_active_bit = VCU_B.LC_active_bit_a;
 8005b24:	4b1a      	ldr	r3, [pc, #104]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005b26:	f893 272e 	ldrb.w	r2, [r3, #1838]	; 0x72e
 8005b2a:	4b19      	ldr	r3, [pc, #100]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005b2c:	f883 26ce 	strb.w	r2, [r3, #1742]	; 0x6ce
    break;
 8005b30:	e006      	b.n	8005b40 <FUNC_Transmission+0x2710>

   default:
    VCU_B.LC_active_bit = VCU_B.LC_active_bit_f;
 8005b32:	4b17      	ldr	r3, [pc, #92]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005b34:	f893 26dd 	ldrb.w	r2, [r3, #1757]	; 0x6dd
 8005b38:	4b15      	ldr	r3, [pc, #84]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005b3a:	f883 26ce 	strb.w	r2, [r3, #1742]	; 0x6ce
    break;
 8005b3e:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 8005b40:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005b42:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8005b46:	b25b      	sxtb	r3, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d00a      	beq.n	8005b62 <FUNC_Transmission+0x2732>
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d00e      	beq.n	8005b6e <FUNC_Transmission+0x273e>
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d113      	bne.n	8005b7c <FUNC_Transmission+0x274c>
   case 1:
    VCU_B.LC_ready_bit = VCU_B.LC_ready_bit_e;
 8005b54:	4b0e      	ldr	r3, [pc, #56]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005b56:	f893 2717 	ldrb.w	r2, [r3, #1815]	; 0x717
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005b5c:	f883 26cf 	strb.w	r2, [r3, #1743]	; 0x6cf
    break;
 8005b60:	e013      	b.n	8005b8a <FUNC_Transmission+0x275a>

   case 2:
    VCU_B.LC_ready_bit = VCU_ConstB.LC_ready_bit;
 8005b62:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <FUNC_Transmission+0x2764>)
 8005b64:	7cda      	ldrb	r2, [r3, #19]
 8005b66:	4b0a      	ldr	r3, [pc, #40]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005b68:	f883 26cf 	strb.w	r2, [r3, #1743]	; 0x6cf
    break;
 8005b6c:	e00d      	b.n	8005b8a <FUNC_Transmission+0x275a>

   case 3:
    VCU_B.LC_ready_bit = VCU_B.LC_ready_bit_p;
 8005b6e:	4b08      	ldr	r3, [pc, #32]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005b70:	f893 2774 	ldrb.w	r2, [r3, #1908]	; 0x774
 8005b74:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005b76:	f883 26cf 	strb.w	r2, [r3, #1743]	; 0x6cf
    break;
 8005b7a:	e006      	b.n	8005b8a <FUNC_Transmission+0x275a>

   default:
    VCU_B.LC_ready_bit = VCU_B.LC_ready_bit_e;
 8005b7c:	4b04      	ldr	r3, [pc, #16]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005b7e:	f893 2717 	ldrb.w	r2, [r3, #1815]	; 0x717
 8005b82:	4b03      	ldr	r3, [pc, #12]	; (8005b90 <FUNC_Transmission+0x2760>)
 8005b84:	f883 26cf 	strb.w	r2, [r3, #1743]	; 0x6cf
    break;
 8005b88:	bf00      	nop
  }

  /* End of MultiPortSwitch: '<S7>/Multiport Switch1' */
}
 8005b8a:	371c      	adds	r7, #28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b90:	200008c8 	.word	0x200008c8
 8005b94:	0800f130 	.word	0x0800f130

08005b98 <look1_binlxpw>:
/* Real-time model */
RT_MODEL_VCU_T VCU_M_;
RT_MODEL_VCU_T *const VCU_M = &VCU_M_;
real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 8005b98:	b5b0      	push	{r4, r5, r7, lr}
 8005b9a:	b08a      	sub	sp, #40	; 0x28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bac:	4610      	mov	r0, r2
 8005bae:	4619      	mov	r1, r3
 8005bb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bb4:	f009 f98e 	bl	800eed4 <__aeabi_dcmpge>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d020      	beq.n	8005c00 <look1_binlxpw+0x68>
    iLeft = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005bcc:	f008 fd48 	bl	800e660 <__aeabi_dsub>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4614      	mov	r4, r2
 8005bd6:	461d      	mov	r5, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3308      	adds	r3, #8
 8005bdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f008 fd3b 	bl	800e660 <__aeabi_dsub>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	4620      	mov	r0, r4
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	f009 f813 	bl	800ec1c <__aeabi_ddiv>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005bfe:	e08b      	b.n	8005d18 <look1_binlxpw+0x180>
  } else if (u0 < bp0[maxIndex]) {
 8005c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	4413      	add	r3, r2
 8005c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4619      	mov	r1, r3
 8005c10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c14:	f009 f968 	bl	800eee8 <__aeabi_dcmpgt>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d04d      	beq.n	8005cba <look1_binlxpw+0x122>
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	617b      	str	r3, [r7, #20]
    iLeft = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	61bb      	str	r3, [r7, #24]
    iRght = maxIndex;
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 8005c2c:	e018      	b.n	8005c60 <look1_binlxpw+0xc8>
      if (u0 < bp0[bpIdx]) {
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	4413      	add	r3, r2
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c42:	f009 f951 	bl	800eee8 <__aeabi_dcmpgt>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <look1_binlxpw+0xba>
        iRght = bpIdx;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	61fb      	str	r3, [r7, #28]
 8005c50:	e001      	b.n	8005c56 <look1_binlxpw+0xbe>
      } else {
        iLeft = bpIdx;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	61bb      	str	r3, [r7, #24]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8005c56:	69fa      	ldr	r2, [r7, #28]
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	617b      	str	r3, [r7, #20]
  } else if (u0 < bp0[maxIndex]) {
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
    iLeft = 0U;
    iRght = maxIndex;
    while (iRght - iLeft > 1U) {
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d8e1      	bhi.n	8005c2e <look1_binlxpw+0x96>
      }

      bpIdx = (iRght + iLeft) >> 1U;
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	4413      	add	r3, r2
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c7a:	f008 fcf1 	bl	800e660 <__aeabi_dsub>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4614      	mov	r4, r2
 8005c84:	461d      	mov	r5, r3
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	4413      	add	r3, r2
 8005c90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	f008 fcde 	bl	800e660 <__aeabi_dsub>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4620      	mov	r0, r4
 8005caa:	4629      	mov	r1, r5
 8005cac:	f008 ffb6 	bl	800ec1c <__aeabi_ddiv>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005cb8:	e02e      	b.n	8005d18 <look1_binlxpw+0x180>
  } else {
    iLeft = maxIndex - 1U;
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	4413      	add	r3, r2
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005cd6:	f008 fcc3 	bl	800e660 <__aeabi_dsub>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4614      	mov	r4, r2
 8005ce0:	461d      	mov	r5, r3
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	4413      	add	r3, r2
 8005cea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d00:	f008 fcae 	bl	800e660 <__aeabi_dsub>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4620      	mov	r0, r4
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	f008 ff86 	bl	800ec1c <__aeabi_ddiv>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	4413      	add	r3, r2
 8005d22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d32:	f008 fc95 	bl	800e660 <__aeabi_dsub>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d42:	f008 fe41 	bl	800e9c8 <__aeabi_dmul>
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	00db      	lsls	r3, r3, #3
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	4413      	add	r3, r2
 8005d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5a:	f008 fc83 	bl	800e664 <__adddf3>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
}
 8005d62:	4610      	mov	r0, r2
 8005d64:	4619      	mov	r1, r3
 8005d66:	3728      	adds	r7, #40	; 0x28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bdb0      	pop	{r4, r5, r7, pc}

08005d6c <look2_binlxpw>:

real_T look2_binlxpw(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[],
                     const real_T table[], const uint32_T maxIndex[], uint32_T
                     stride)
{
 8005d6c:	b5b0      	push	{r4, r5, r7, lr}
 8005d6e:	b092      	sub	sp, #72	; 0x48
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005d76:	e9c7 2300 	strd	r2, r3, [r7]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8005d7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	4610      	mov	r0, r2
 8005d82:	4619      	mov	r1, r3
 8005d84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d88:	f009 f8a4 	bl	800eed4 <__aeabi_dcmpge>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d020      	beq.n	8005dd4 <look2_binlxpw+0x68>
    iLeft = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8005d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005da0:	f008 fc5e 	bl	800e660 <__aeabi_dsub>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4614      	mov	r4, r2
 8005daa:	461d      	mov	r5, r3
 8005dac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dae:	3308      	adds	r3, #8
 8005db0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f008 fc51 	bl	800e660 <__aeabi_dsub>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	f008 ff29 	bl	800ec1c <__aeabi_ddiv>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8005dd2:	e092      	b.n	8005efa <look2_binlxpw+0x18e>
  } else if (u0 < bp0[maxIndex[0U]]) {
 8005dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ddc:	4413      	add	r3, r2
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	4610      	mov	r0, r2
 8005de4:	4619      	mov	r1, r3
 8005de6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dea:	f009 f87d 	bl	800eee8 <__aeabi_dcmpgt>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d04f      	beq.n	8005e94 <look2_binlxpw+0x128>
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
 8005df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	085b      	lsrs	r3, r3, #1
 8005dfa:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[0U];
 8005e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 8005e06:	e018      	b.n	8005e3a <look2_binlxpw+0xce>
      if (u0 < bp0[bpIdx]) {
 8005e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e0e:	4413      	add	r3, r2
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	4610      	mov	r0, r2
 8005e16:	4619      	mov	r1, r3
 8005e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e1c:	f009 f864 	bl	800eee8 <__aeabi_dcmpgt>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <look2_binlxpw+0xc0>
        iRght = bpIdx;
 8005e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e2a:	e001      	b.n	8005e30 <look2_binlxpw+0xc4>
      } else {
        iLeft = bpIdx;
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2e:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8005e30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e34:	4413      	add	r3, r2
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	63bb      	str	r3, [r7, #56]	; 0x38
  } else if (u0 < bp0[maxIndex[0U]]) {
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
    iLeft = 0U;
    iRght = maxIndex[0U];
    while (iRght - iLeft > 1U) {
 8005e3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d8e1      	bhi.n	8005e08 <look2_binlxpw+0x9c>
      }

      bpIdx = (iRght + iLeft) >> 1U;
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8005e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e4a:	4413      	add	r3, r2
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e54:	f008 fc04 	bl	800e660 <__aeabi_dsub>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4614      	mov	r4, r2
 8005e5e:	461d      	mov	r5, r3
 8005e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e62:	3301      	adds	r3, #1
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e68:	4413      	add	r3, r2
 8005e6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e74:	4413      	add	r3, r2
 8005e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7a:	f008 fbf1 	bl	800e660 <__aeabi_dsub>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4620      	mov	r0, r4
 8005e84:	4629      	mov	r1, r5
 8005e86:	f008 fec9 	bl	800ec1c <__aeabi_ddiv>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8005e92:	e032      	b.n	8005efa <look2_binlxpw+0x18e>
  } else {
    iLeft = maxIndex[0U] - 1U;
 8005e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U]
 8005e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eaa:	4413      	add	r3, r2
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005eb4:	f008 fbd4 	bl	800e660 <__aeabi_dsub>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4614      	mov	r4, r2
 8005ebe:	461d      	mov	r5, r3
 8005ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ec8:	4413      	add	r3, r2
 8005eca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005edc:	4413      	add	r3, r2
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	f008 fbbd 	bl	800e660 <__aeabi_dsub>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4620      	mov	r0, r4
 8005eec:	4629      	mov	r1, r5
 8005eee:	f008 fe95 	bl	800ec1c <__aeabi_ddiv>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      - 1U]);
  }

  fractions[0U] = frac;
 8005efa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005efe:	e9c7 2304 	strd	r2, r3, [r7, #16]
  bpIndices[0U] = iLeft;
 8005f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f04:	623b      	str	r3, [r7, #32]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u1 <= bp1[0U]) {
 8005f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	4619      	mov	r1, r3
 8005f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f14:	f008 ffde 	bl	800eed4 <__aeabi_dcmpge>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d020      	beq.n	8005f60 <look2_binlxpw+0x1f4>
    iLeft = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 8005f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f2c:	f008 fb98 	bl	800e660 <__aeabi_dsub>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4614      	mov	r4, r2
 8005f36:	461d      	mov	r5, r3
 8005f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f3a:	3308      	adds	r3, #8
 8005f3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	f008 fb8b 	bl	800e660 <__aeabi_dsub>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4620      	mov	r0, r4
 8005f50:	4629      	mov	r1, r5
 8005f52:	f008 fe63 	bl	800ec1c <__aeabi_ddiv>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8005f5e:	e098      	b.n	8006092 <look2_binlxpw+0x326>
  } else if (u1 < bp1[maxIndex[1U]]) {
 8005f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f62:	3304      	adds	r3, #4
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f6a:	4413      	add	r3, r2
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	4610      	mov	r0, r2
 8005f72:	4619      	mov	r1, r3
 8005f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f78:	f008 ffb6 	bl	800eee8 <__aeabi_dcmpgt>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d050      	beq.n	8006024 <look2_binlxpw+0x2b8>
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
 8005f82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f84:	3304      	adds	r3, #4
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	085b      	lsrs	r3, r3, #1
 8005f8a:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[1U];
 8005f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 8005f96:	e018      	b.n	8005fca <look2_binlxpw+0x25e>
      if (u1 < bp1[bpIdx]) {
 8005f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f9e:	4413      	add	r3, r2
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fac:	f008 ff9c 	bl	800eee8 <__aeabi_dcmpgt>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <look2_binlxpw+0x250>
        iRght = bpIdx;
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fba:	e001      	b.n	8005fc0 <look2_binlxpw+0x254>
      } else {
        iLeft = bpIdx;
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8005fc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc4:	4413      	add	r3, r2
 8005fc6:	085b      	lsrs	r3, r3, #1
 8005fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  } else if (u1 < bp1[maxIndex[1U]]) {
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
    iLeft = 0U;
    iRght = maxIndex[1U];
    while (iRght - iLeft > 1U) {
 8005fca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d8e1      	bhi.n	8005f98 <look2_binlxpw+0x22c>
      }

      bpIdx = (iRght + iLeft) >> 1U;
    }

    frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 8005fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fda:	4413      	add	r3, r2
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fe4:	f008 fb3c 	bl	800e660 <__aeabi_dsub>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4614      	mov	r4, r2
 8005fee:	461d      	mov	r5, r3
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ff8:	4413      	add	r3, r2
 8005ffa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006004:	4413      	add	r3, r2
 8006006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600a:	f008 fb29 	bl	800e660 <__aeabi_dsub>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	4620      	mov	r0, r4
 8006014:	4629      	mov	r1, r5
 8006016:	f008 fe01 	bl	800ec1c <__aeabi_ddiv>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8006022:	e036      	b.n	8006092 <look2_binlxpw+0x326>
  } else {
    iLeft = maxIndex[1U] - 1U;
 8006024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006026:	3304      	adds	r3, #4
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3b01      	subs	r3, #1
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U]
 800602e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006030:	3304      	adds	r3, #4
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006038:	3b01      	subs	r3, #1
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800603e:	4413      	add	r3, r2
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006048:	f008 fb0a 	bl	800e660 <__aeabi_dsub>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4614      	mov	r4, r2
 8006052:	461d      	mov	r5, r3
 8006054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006056:	3304      	adds	r3, #4
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800605e:	4413      	add	r3, r2
 8006060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006066:	3304      	adds	r3, #4
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800606e:	3b01      	subs	r3, #1
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006074:	4413      	add	r3, r2
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	f008 faf1 	bl	800e660 <__aeabi_dsub>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4620      	mov	r0, r4
 8006084:	4629      	mov	r1, r5
 8006086:	f008 fdc9 	bl	800ec1c <__aeabi_ddiv>
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  /* Interpolation 2-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
 8006092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006094:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006096:	fb02 f203 	mul.w	r2, r2, r3
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	4413      	add	r3, r2
 800609e:	63bb      	str	r3, [r7, #56]	; 0x38
  yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
 80060a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a2:	3301      	adds	r3, #1
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060a8:	4413      	add	r3, r2
 80060aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060b4:	4413      	add	r3, r2
 80060b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ba:	f008 fad1 	bl	800e660 <__aeabi_dsub>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4610      	mov	r0, r2
 80060c4:	4619      	mov	r1, r3
 80060c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80060ca:	f008 fc7d 	bl	800e9c8 <__aeabi_dmul>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	4610      	mov	r0, r2
 80060d4:	4619      	mov	r1, r3
 80060d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060dc:	4413      	add	r3, r2
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	f008 fabf 	bl	800e664 <__adddf3>
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  bpIdx += stride;
 80060ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060f2:	4413      	add	r3, r2
 80060f4:	63bb      	str	r3, [r7, #56]	; 0x38
  return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) -
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	3301      	adds	r3, #1
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060fe:	4413      	add	r3, r2
 8006100:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800610a:	4413      	add	r3, r2
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f008 faa6 	bl	800e660 <__aeabi_dsub>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4610      	mov	r0, r2
 800611a:	4619      	mov	r1, r3
 800611c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006120:	f008 fc52 	bl	800e9c8 <__aeabi_dmul>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4610      	mov	r0, r2
 800612a:	4619      	mov	r1, r3
 800612c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006132:	4413      	add	r3, r2
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f008 fa94 	bl	800e664 <__adddf3>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4610      	mov	r0, r2
 8006142:	4619      	mov	r1, r3
 8006144:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006148:	f008 fa8a 	bl	800e660 <__aeabi_dsub>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
          yL_1d) * frac + yL_1d;
 8006150:	4610      	mov	r0, r2
 8006152:	4619      	mov	r1, r3
 8006154:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006158:	f008 fc36 	bl	800e9c8 <__aeabi_dmul>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
     Overflow mode: 'portable wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
  yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
  bpIdx += stride;
  return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) -
 8006160:	4610      	mov	r0, r2
 8006162:	4619      	mov	r1, r3
 8006164:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006168:	f008 fa7c 	bl	800e664 <__adddf3>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
          yL_1d) * frac + yL_1d;
}
 8006170:	4610      	mov	r0, r2
 8006172:	4619      	mov	r1, r3
 8006174:	3748      	adds	r7, #72	; 0x48
 8006176:	46bd      	mov	sp, r7
 8006178:	bdb0      	pop	{r4, r5, r7, pc}
 800617a:	bf00      	nop

0800617c <VCU_initialize>:
  /* End of Outputs for SubSystem: '<Root>/Output Data' */
}

/* Model initialize function */
void VCU_initialize(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 8006180:	2008      	movs	r0, #8
 8006182:	f000 f8c5 	bl	8006310 <rt_InitInfAndNaN>

  /* initialize error status */
  rtmSetErrorStatus(VCU_M, (NULL));
 8006186:	4b09      	ldr	r3, [pc, #36]	; (80061ac <VCU_initialize+0x30>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]

  /* block I/O */
  (void) memset(((void *) &VCU_B), 0,
 800618c:	4808      	ldr	r0, [pc, #32]	; (80061b0 <VCU_initialize+0x34>)
 800618e:	2100      	movs	r1, #0
 8006190:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8006194:	f008 ff19 	bl	800efca <memset>
                sizeof(B_VCU_T));

  /* states (dwork) */
  (void) memset((void *)&VCU_DW, 0,
 8006198:	4806      	ldr	r0, [pc, #24]	; (80061b4 <VCU_initialize+0x38>)
 800619a:	2100      	movs	r1, #0
 800619c:	f44f 72a8 	mov.w	r2, #336	; 0x150
 80061a0:	f008 ff13 	bl	800efca <memset>
                sizeof(DW_VCU_T));

  /* SystemInitialize for Atomic SubSystem: '<Root>/Transmission' */
  FUNC_Transmission_Init();
 80061a4:	f7fd f924 	bl	80033f0 <FUNC_Transmission_Init>

  /* End of SystemInitialize for SubSystem: '<Root>/Transmission' */
}
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20001050 	.word	0x20001050
 80061b0:	200008c8 	.word	0x200008c8
 80061b4:	20001058 	.word	0x20001058

080061b8 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80061be:	2340      	movs	r3, #64	; 0x40
 80061c0:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 80061c2:	f04f 0200 	mov.w	r2, #0
 80061c6:	f04f 0300 	mov.w	r3, #0
 80061ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	d10a      	bne.n	80061ea <rtGetInf+0x32>
    inf = rtGetInfF();
 80061d4:	f000 f81a 	bl	800620c <rtGetInfF>
 80061d8:	4603      	mov	r3, r0
 80061da:	4618      	mov	r0, r3
 80061dc:	f008 fba0 	bl	800e920 <__aeabi_f2d>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80061e8:	e007      	b.n	80061fa <rtGetInf+0x42>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 80061ea:	4b07      	ldr	r3, [pc, #28]	; (8006208 <rtGetInf+0x50>)
 80061ec:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 80061f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 80061fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80061fe:	4610      	mov	r0, r2
 8006200:	4619      	mov	r1, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	7ff00000 	.word	0x7ff00000

0800620c <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 8006212:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8006216:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8006218:	687b      	ldr	r3, [r7, #4]
}
 800621a:	4618      	mov	r0, r3
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop

08006228 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800622e:	2340      	movs	r3, #64	; 0x40
 8006230:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 8006232:	f04f 0200 	mov.w	r2, #0
 8006236:	f04f 0300 	mov.w	r3, #0
 800623a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b20      	cmp	r3, #32
 8006242:	d10a      	bne.n	800625a <rtGetMinusInf+0x32>
    minf = rtGetMinusInfF();
 8006244:	f000 f81a 	bl	800627c <rtGetMinusInfF>
 8006248:	4603      	mov	r3, r0
 800624a:	4618      	mov	r0, r3
 800624c:	f008 fb68 	bl	800e920 <__aeabi_f2d>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8006258:	e007      	b.n	800626a <rtGetMinusInf+0x42>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800625a:	4b07      	ldr	r3, [pc, #28]	; (8006278 <rtGetMinusInf+0x50>)
 800625c:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800625e:	2300      	movs	r3, #0
 8006260:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 8006262:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006266:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 800626a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800626e:	4610      	mov	r0, r2
 8006270:	4619      	mov	r1, r3
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	fff00000 	.word	0xfff00000

0800627c <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 8006282:	4b04      	ldr	r3, [pc, #16]	; (8006294 <rtGetMinusInfF+0x18>)
 8006284:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 8006286:	687b      	ldr	r3, [r7, #4]
}
 8006288:	4618      	mov	r0, r3
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	ff800000 	.word	0xff800000

08006298 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800629e:	2340      	movs	r3, #64	; 0x40
 80062a0:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 80062a2:	f04f 0200 	mov.w	r2, #0
 80062a6:	f04f 0300 	mov.w	r3, #0
 80062aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b20      	cmp	r3, #32
 80062b2:	d10a      	bne.n	80062ca <rtGetNaN+0x32>
    nan = rtGetNaNF();
 80062b4:	f000 f81a 	bl	80062ec <rtGetNaNF>
 80062b8:	4603      	mov	r3, r0
 80062ba:	4618      	mov	r0, r3
 80062bc:	f008 fb30 	bl	800e920 <__aeabi_f2d>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80062c8:	e007      	b.n	80062da <rtGetNaN+0x42>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 80062ca:	4b07      	ldr	r3, [pc, #28]	; (80062e8 <rtGetNaN+0x50>)
 80062cc:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 80062d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 80062da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80062de:	4610      	mov	r0, r2
 80062e0:	4619      	mov	r1, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	fff80000 	.word	0xfff80000

080062ec <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 80062f8:	4b04      	ldr	r3, [pc, #16]	; (800630c <rtGetNaNF+0x20>)
 80062fa:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 80062fc:	687b      	ldr	r3, [r7, #4]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	ffc00000 	.word	0xffc00000

08006310 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8006318:	f7ff ffbe 	bl	8006298 <rtGetNaN>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4911      	ldr	r1, [pc, #68]	; (8006368 <rt_InitInfAndNaN+0x58>)
 8006322:	e9c1 2300 	strd	r2, r3, [r1]
  rtNaNF = rtGetNaNF();
 8006326:	f7ff ffe1 	bl	80062ec <rtGetNaNF>
 800632a:	4602      	mov	r2, r0
 800632c:	4b0f      	ldr	r3, [pc, #60]	; (800636c <rt_InitInfAndNaN+0x5c>)
 800632e:	601a      	str	r2, [r3, #0]
  rtInf = rtGetInf();
 8006330:	f7ff ff42 	bl	80061b8 <rtGetInf>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	490d      	ldr	r1, [pc, #52]	; (8006370 <rt_InitInfAndNaN+0x60>)
 800633a:	e9c1 2300 	strd	r2, r3, [r1]
  rtInfF = rtGetInfF();
 800633e:	f7ff ff65 	bl	800620c <rtGetInfF>
 8006342:	4602      	mov	r2, r0
 8006344:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <rt_InitInfAndNaN+0x64>)
 8006346:	601a      	str	r2, [r3, #0]
  rtMinusInf = rtGetMinusInf();
 8006348:	f7ff ff6e 	bl	8006228 <rtGetMinusInf>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4909      	ldr	r1, [pc, #36]	; (8006378 <rt_InitInfAndNaN+0x68>)
 8006352:	e9c1 2300 	strd	r2, r3, [r1]
  rtMinusInfF = rtGetMinusInfF();
 8006356:	f7ff ff91 	bl	800627c <rtGetMinusInfF>
 800635a:	4602      	mov	r2, r0
 800635c:	4b07      	ldr	r3, [pc, #28]	; (800637c <rt_InitInfAndNaN+0x6c>)
 800635e:	601a      	str	r2, [r3, #0]
}
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	200011b8 	.word	0x200011b8
 800636c:	200011a8 	.word	0x200011a8
 8006370:	200011b0 	.word	0x200011b0
 8006374:	200011ac 	.word	0x200011ac
 8006378:	200011c0 	.word	0x200011c0
 800637c:	200011c8 	.word	0x200011c8

08006380 <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800638a:	4b0d      	ldr	r3, [pc, #52]	; (80063c0 <rtIsInf+0x40>)
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006394:	f008 fd80 	bl	800ee98 <__aeabi_dcmpeq>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d109      	bne.n	80063b2 <rtIsInf+0x32>
 800639e:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <rtIsInf+0x44>)
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063a8:	f008 fd76 	bl	800ee98 <__aeabi_dcmpeq>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <rtIsInf+0x36>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <rtIsInf+0x38>
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	200011b0 	.word	0x200011b0
 80063c4:	200011c0 	.word	0x200011c0

080063c8 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value!=value) ? 1U : 0U);
 80063d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063da:	f008 fd5d 	bl	800ee98 <__aeabi_dcmpeq>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <rtIsNaN+0x20>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e000      	b.n	80063ea <rtIsNaN+0x22>
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop

080063f4 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a05      	ldr	r2, [pc, #20]	; (8006414 <XMC_ERU_Enable+0x20>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d103      	bne.n	800640c <XMC_ERU_Enable+0x18>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 8006404:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006408:	f000 f99a 	bl	8006740 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	40044000 	.word	0x40044000

08006418 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	460b      	mov	r3, r1
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8006426:	7afb      	ldrb	r3, [r7, #11]
 8006428:	089b      	lsrs	r3, r3, #2
 800642a:	b2db      	uxtb	r3, r3
 800642c:	4618      	mov	r0, r3
 800642e:	7afb      	ldrb	r3, [r7, #11]
 8006430:	089b      	lsrs	r3, r3, #2
 8006432:	b2db      	uxtb	r3, r3
 8006434:	461a      	mov	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3204      	adds	r2, #4
 800643a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800643e:	7afb      	ldrb	r3, [r7, #11]
 8006440:	f003 0303 	and.w	r3, r3, #3
 8006444:	00db      	lsls	r3, r3, #3
 8006446:	4619      	mov	r1, r3
 8006448:	23f8      	movs	r3, #248	; 0xf8
 800644a:	408b      	lsls	r3, r1
 800644c:	43db      	mvns	r3, r3
 800644e:	ea02 0103 	and.w	r1, r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	1d02      	adds	r2, r0, #4
 8006456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800645e:	7afb      	ldrb	r3, [r7, #11]
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	4619      	mov	r1, r3
 8006464:	2303      	movs	r3, #3
 8006466:	408b      	lsls	r3, r1
 8006468:	43db      	mvns	r3, r3
 800646a:	401a      	ands	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4a3a      	ldr	r2, [pc, #232]	; (800655c <XMC_GPIO_Init+0x144>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <XMC_GPIO_Init+0x68>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4a39      	ldr	r2, [pc, #228]	; (8006560 <XMC_GPIO_Init+0x148>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d10a      	bne.n	8006496 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006484:	7afb      	ldrb	r3, [r7, #11]
 8006486:	2101      	movs	r1, #1
 8006488:	fa01 f303 	lsl.w	r3, r1, r3
 800648c:	43db      	mvns	r3, r3
 800648e:	401a      	ands	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	661a      	str	r2, [r3, #96]	; 0x60
 8006494:	e042      	b.n	800651c <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	b2db      	uxtb	r3, r3
 800649c:	b25b      	sxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	da3c      	bge.n	800651c <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	7afb      	ldrb	r3, [r7, #11]
 80064a8:	409a      	lsls	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80064ae:	7afb      	ldrb	r3, [r7, #11]
 80064b0:	08db      	lsrs	r3, r3, #3
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	4618      	mov	r0, r3
 80064b6:	7afb      	ldrb	r3, [r7, #11]
 80064b8:	08db      	lsrs	r3, r3, #3
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	461a      	mov	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3210      	adds	r2, #16
 80064c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064c6:	7afb      	ldrb	r3, [r7, #11]
 80064c8:	f003 0307 	and.w	r3, r3, #7
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4619      	mov	r1, r3
 80064d0:	2307      	movs	r3, #7
 80064d2:	408b      	lsls	r3, r1
 80064d4:	43db      	mvns	r3, r3
 80064d6:	ea02 0103 	and.w	r1, r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f100 0210 	add.w	r2, r0, #16
 80064e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80064e4:	7afb      	ldrb	r3, [r7, #11]
 80064e6:	08db      	lsrs	r3, r3, #3
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	4618      	mov	r0, r3
 80064ec:	7afb      	ldrb	r3, [r7, #11]
 80064ee:	08db      	lsrs	r3, r3, #3
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	461a      	mov	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3210      	adds	r2, #16
 80064f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	7a1b      	ldrb	r3, [r3, #8]
 8006500:	4619      	mov	r1, r3
 8006502:	7afb      	ldrb	r3, [r7, #11]
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	fa01 f303 	lsl.w	r3, r1, r3
 800650e:	ea42 0103 	orr.w	r1, r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f100 0210 	add.w	r2, r0, #16
 8006518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800651c:	7afb      	ldrb	r3, [r7, #11]
 800651e:	089b      	lsrs	r3, r3, #2
 8006520:	b2db      	uxtb	r3, r3
 8006522:	4618      	mov	r0, r3
 8006524:	7afb      	ldrb	r3, [r7, #11]
 8006526:	089b      	lsrs	r3, r3, #2
 8006528:	b2db      	uxtb	r3, r3
 800652a:	461a      	mov	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3204      	adds	r2, #4
 8006530:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	4619      	mov	r1, r3
 800653a:	7afb      	ldrb	r3, [r7, #11]
 800653c:	f003 0303 	and.w	r3, r3, #3
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	fa01 f303 	lsl.w	r3, r1, r3
 8006546:	ea42 0103 	orr.w	r1, r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	1d02      	adds	r2, r0, #4
 800654e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	48028e00 	.word	0x48028e00
 8006560:	48028f00 	.word	0x48028f00

08006564 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8006564:	b480      	push	{r7}
 8006566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006568:	4b03      	ldr	r3, [pc, #12]	; (8006578 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 800656a:	681b      	ldr	r3, [r3, #0]
}
 800656c:	4618      	mov	r0, r3
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	2000ffc0 	.word	0x2000ffc0

0800657c <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8006580:	4b03      	ldr	r3, [pc, #12]	; (8006590 <XMC_SCU_GetMirrorStatus+0x14>)
 8006582:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8006586:	4618      	mov	r0, r3
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	50004000 	.word	0x50004000

08006594 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 800659c:	f7f9 fe9a 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80065a0:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <XMC_SCU_lDelay+0x3c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a0b      	ldr	r2, [pc, #44]	; (80065d4 <XMC_SCU_lDelay+0x40>)
 80065a6:	fba2 2303 	umull	r2, r3, r2, r3
 80065aa:	0c9a      	lsrs	r2, r3, #18
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	fb02 f303 	mul.w	r3, r2, r3
 80065b2:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	e003      	b.n	80065c2 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80065ba:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3301      	adds	r3, #1
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d3f7      	bcc.n	80065ba <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	2000ffc0 	.word	0x2000ffc0
 80065d4:	431bde83 	.word	0x431bde83

080065d8 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 80065e0:	4905      	ldr	r1, [pc, #20]	; (80065f8 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 80065e2:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 80065e4:	689a      	ldr	r2, [r3, #8]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	608b      	str	r3, [r1, #8]
}
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	50004074 	.word	0x50004074

080065fc <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8006600:	4b03      	ldr	r3, [pc, #12]	; (8006610 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8006602:	685b      	ldr	r3, [r3, #4]
}
 8006604:	4618      	mov	r0, r3
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	50004074 	.word	0x50004074

08006614 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 800661c:	4a03      	ldr	r2, [pc, #12]	; (800662c <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	60d3      	str	r3, [r2, #12]
}
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	50004074 	.word	0x50004074

08006630 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8006630:	b5b0      	push	{r4, r5, r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af02      	add	r7, sp, #8
 8006636:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8006638:	2000      	movs	r0, #0
 800663a:	f000 f8ad 	bl	8006798 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800663e:	f000 fa3f 	bl	8006ac0 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	79db      	ldrb	r3, [r3, #7]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800664a:	f000 fa77 	bl	8006b3c <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800664e:	bf00      	nop
 8006650:	f000 fa62 	bl	8006b18 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8006654:	4603      	mov	r3, r0
 8006656:	f083 0301 	eor.w	r3, r3, #1
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1f7      	bne.n	8006650 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	7a5b      	ldrb	r3, [r3, #9]
 8006664:	4618      	mov	r0, r3
 8006666:	f000 f911 	bl	800688c <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 800666a:	bf00      	nop
 800666c:	f7ff ff86 	bl	800657c <XMC_SCU_GetMirrorStatus>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1fa      	bne.n	800666c <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	7a1b      	ldrb	r3, [r3, #8]
 800667a:	4618      	mov	r0, r3
 800667c:	f000 f9fa 	bl	8006a74 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	7c1b      	ldrb	r3, [r3, #16]
 8006684:	4618      	mov	r0, r3
 8006686:	f000 f91f 	bl	80068c8 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	7c5b      	ldrb	r3, [r3, #17]
 800668e:	4618      	mov	r0, r3
 8006690:	f000 f942 	bl	8006918 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	7c9b      	ldrb	r3, [r3, #18]
 8006698:	4618      	mov	r0, r3
 800669a:	f000 f929 	bl	80068f0 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	7cdb      	ldrb	r3, [r3, #19]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 f94c 	bl	8006940 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	799b      	ldrb	r3, [r3, #6]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00a      	beq.n	80066c6 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80066b0:	f000 fa7c 	bl	8006bac <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80066b4:	bf00      	nop
 80066b6:	f000 faa1 	bl	8006bfc <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f083 0301 	eor.w	r3, r3, #1
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f7      	bne.n	80066b6 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	78db      	ldrb	r3, [r3, #3]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d102      	bne.n	80066d4 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80066ce:	f000 fab9 	bl	8006c44 <XMC_SCU_CLOCK_DisableSystemPll>
 80066d2:	e014      	b.n	80066fe <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80066d4:	f000 faa6 	bl	8006c24 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	8899      	ldrh	r1, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80066e4:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80066ea:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	4608      	mov	r0, r1
 80066f4:	4611      	mov	r1, r2
 80066f6:	462a      	mov	r2, r5
 80066f8:	4623      	mov	r3, r4
 80066fa:	f000 fab3 	bl	8006c64 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006706:	d103      	bne.n	8006710 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8006708:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800670c:	f000 f844 	bl	8006798 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8006710:	f7f9 fde0 	bl	80002d4 <SystemCoreClockUpdate>
}
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bdb0      	pop	{r4, r5, r7, pc}
 800671a:	bf00      	nop

0800671c <XMC_SCU_INTERRUPT_EnableNmiRequest>:
  SCU_PARITY->PETE &= (uint32_t)~memory; 
}

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8006724:	4905      	ldr	r1, [pc, #20]	; (800673c <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8006726:	4b05      	ldr	r3, [pc, #20]	; (800673c <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8006728:	695a      	ldr	r2, [r3, #20]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4313      	orrs	r3, r2
 800672e:	614b      	str	r3, [r1, #20]
}
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	50004074 	.word	0x50004074

08006740 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	0f1b      	lsrs	r3, r3, #28
 800674c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006754:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4613      	mov	r3, r2
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	4413      	add	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	461a      	mov	r2, r3
 8006762:	4b04      	ldr	r3, [pc, #16]	; (8006774 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8006764:	4413      	add	r3, r2
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	601a      	str	r2, [r3, #0]
}
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	50004414 	.word	0x50004414

08006778 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800677c:	f7ff fef2 	bl	8006564 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8006780:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8006782:	4b04      	ldr	r3, [pc, #16]	; (8006794 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8006784:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 800678e:	4618      	mov	r0, r3
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	50004600 	.word	0x50004600

08006798 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80067a0:	4906      	ldr	r1, [pc, #24]	; (80067bc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80067a2:	4b06      	ldr	r3, [pc, #24]	; (80067bc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	50004600 	.word	0x50004600

080067c0 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80067c8:	4906      	ldr	r1, [pc, #24]	; (80067e4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80067ca:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	50004600 	.word	0x50004600

080067e8 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80067f0:	4906      	ldr	r1, [pc, #24]	; (800680c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80067f2:	4b06      	ldr	r3, [pc, #24]	; (800680c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	50004600 	.word	0x50004600

08006810 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	4603      	mov	r3, r0
 8006818:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800681a:	88fb      	ldrh	r3, [r7, #6]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d108      	bne.n	8006832 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8006820:	4a0a      	ldr	r2, [pc, #40]	; (800684c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8006822:	4b0a      	ldr	r3, [pc, #40]	; (800684c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800682a:	f023 0301 	bic.w	r3, r3, #1
 800682e:	60d3      	str	r3, [r2, #12]
 8006830:	e007      	b.n	8006842 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8006832:	4a06      	ldr	r2, [pc, #24]	; (800684c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8006834:	4b05      	ldr	r3, [pc, #20]	; (800684c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800683c:	f043 0301 	orr.w	r3, r3, #1
 8006840:	60d3      	str	r3, [r2, #12]
  }
}
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	50004710 	.word	0x50004710

08006850 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	4603      	mov	r3, r0
 8006858:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800685a:	bf00      	nop
 800685c:	4b09      	ldr	r3, [pc, #36]	; (8006884 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800685e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1f8      	bne.n	800685c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800686a:	4907      	ldr	r1, [pc, #28]	; (8006888 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800686c:	4b06      	ldr	r3, [pc, #24]	; (8006888 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8006874:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8006876:	4313      	orrs	r3, r2
 8006878:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	50004000 	.word	0x50004000
 8006888:	50004300 	.word	0x50004300

0800688c <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	4603      	mov	r3, r0
 8006894:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8006896:	bf00      	nop
 8006898:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800689a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f8      	bne.n	8006898 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80068a6:	4907      	ldr	r1, [pc, #28]	; (80068c4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80068a8:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80068b0:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	50004000 	.word	0x50004000
 80068c4:	50004300 	.word	0x50004300

080068c8 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80068d0:	4906      	ldr	r1, [pc, #24]	; (80068ec <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80068d2:	4b06      	ldr	r3, [pc, #24]	; (80068ec <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80068de:	4313      	orrs	r3, r2
 80068e0:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	50004600 	.word	0x50004600

080068f0 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80068f8:	4906      	ldr	r1, [pc, #24]	; (8006914 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80068fa:	4b06      	ldr	r3, [pc, #24]	; (8006914 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8006906:	4313      	orrs	r3, r2
 8006908:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	50004600 	.word	0x50004600

08006918 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8006920:	4906      	ldr	r1, [pc, #24]	; (800693c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8006922:	4b06      	ldr	r3, [pc, #24]	; (800693c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800692e:	4313      	orrs	r3, r2
 8006930:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	50004600 	.word	0x50004600

08006940 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8006948:	4906      	ldr	r1, [pc, #24]	; (8006964 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800694a:	4b06      	ldr	r3, [pc, #24]	; (8006964 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8006956:	4313      	orrs	r3, r2
 8006958:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	50004600 	.word	0x50004600

08006968 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8006970:	4906      	ldr	r1, [pc, #24]	; (800698c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8006972:	4b06      	ldr	r3, [pc, #24]	; (800698c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800697e:	4313      	orrs	r3, r2
 8006980:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	50004600 	.word	0x50004600

08006990 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8006998:	4906      	ldr	r1, [pc, #24]	; (80069b4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800699a:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80069a6:	4313      	orrs	r3, r2
 80069a8:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	50004600 	.word	0x50004600

080069b8 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80069c0:	4906      	ldr	r1, [pc, #24]	; (80069dc <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80069c2:	4b06      	ldr	r3, [pc, #24]	; (80069dc <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80069ce:	4313      	orrs	r3, r2
 80069d0:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	50004600 	.word	0x50004600

080069e0 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	4603      	mov	r3, r0
 80069e8:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80069ea:	4a04      	ldr	r2, [pc, #16]	; (80069fc <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80069ec:	79fb      	ldrb	r3, [r7, #7]
 80069ee:	6053      	str	r3, [r2, #4]
}
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	50004600 	.word	0x50004600

08006a00 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8006a0a:	4a19      	ldr	r2, [pc, #100]	; (8006a70 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006a0c:	4b18      	ldr	r3, [pc, #96]	; (8006a70 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	f043 0301 	orr.w	r3, r3, #1
 8006a14:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8006a16:	4a16      	ldr	r2, [pc, #88]	; (8006a70 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006a18:	4b15      	ldr	r3, [pc, #84]	; (8006a70 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	f043 0310 	orr.w	r3, r3, #16
 8006a20:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8006a22:	4913      	ldr	r1, [pc, #76]	; (8006a70 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8006a30:	4313      	orrs	r3, r2
 8006a32:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8006a34:	4a0e      	ldr	r2, [pc, #56]	; (8006a70 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006a36:	4b0e      	ldr	r3, [pc, #56]	; (8006a70 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3e:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8006a40:	4a0b      	ldr	r2, [pc, #44]	; (8006a70 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006a42:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	f023 0310 	bic.w	r3, r3, #16
 8006a4a:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8006a4c:	4a08      	ldr	r2, [pc, #32]	; (8006a70 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006a4e:	4b08      	ldr	r3, [pc, #32]	; (8006a70 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a56:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8006a58:	bf00      	nop
 8006a5a:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	f003 0304 	and.w	r3, r3, #4
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0f9      	beq.n	8006a5a <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	50004710 	.word	0x50004710

08006a74 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8006a7e:	4a0f      	ldr	r2, [pc, #60]	; (8006abc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006a80:	4b0e      	ldr	r3, [pc, #56]	; (8006abc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a88:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d10e      	bne.n	8006aae <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8006a90:	4a0a      	ldr	r2, [pc, #40]	; (8006abc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006a92:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006a9a:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8006a9c:	2064      	movs	r0, #100	; 0x64
 8006a9e:	f7ff fd79 	bl	8006594 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8006aa2:	4a06      	ldr	r2, [pc, #24]	; (8006abc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006aa4:	4b05      	ldr	r3, [pc, #20]	; (8006abc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006aac:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8006aae:	2064      	movs	r0, #100	; 0x64
 8006ab0:	f7ff fd70 	bl	8006594 <XMC_SCU_lDelay>
}
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	50004710 	.word	0x50004710

08006ac0 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8006ac4:	4b12      	ldr	r3, [pc, #72]	; (8006b10 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d109      	bne.n	8006ae4 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8006ad0:	4b0f      	ldr	r3, [pc, #60]	; (8006b10 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8006ad6:	bf00      	nop
 8006ad8:	4b0d      	ldr	r3, [pc, #52]	; (8006b10 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0f9      	beq.n	8006ad8 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8006ae4:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00a      	beq.n	8006b06 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8006af0:	4b08      	ldr	r3, [pc, #32]	; (8006b14 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8006af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006af6:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8006af8:	bf00      	nop
 8006afa:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1f9      	bne.n	8006afa <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	50004200 	.word	0x50004200
 8006b14:	50004400 	.word	0x50004400

08006b18 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8006b1c:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0308 	and.w	r3, r3, #8
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	bf0c      	ite	eq
 8006b28:	2301      	moveq	r3, #1
 8006b2a:	2300      	movne	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	50004300 	.word	0x50004300

08006b3c <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8006b40:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006b44:	f7ff fd66 	bl	8006614 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8006b48:	4a17      	ldr	r2, [pc, #92]	; (8006ba8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006b4a:	4b17      	ldr	r3, [pc, #92]	; (8006ba8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006b52:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8006b54:	bf00      	nop
 8006b56:	f7ff fd51 	bl	80065fc <XMC_SCU_INTERUPT_GetEventStatus>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0f8      	beq.n	8006b56 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8006b64:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006b68:	f7ff fd54 	bl	8006614 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8006b6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ba8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006b6e:	2208      	movs	r2, #8
 8006b70:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8006b72:	bf00      	nop
 8006b74:	f7ff fd42 	bl	80065fc <XMC_SCU_INTERUPT_GetEventStatus>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0f8      	beq.n	8006b74 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8006b82:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006b86:	f7ff fd45 	bl	8006614 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8006b8a:	4a07      	ldr	r2, [pc, #28]	; (8006ba8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006b8c:	4b06      	ldr	r3, [pc, #24]	; (8006ba8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f043 0308 	orr.w	r3, r3, #8
 8006b94:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8006b96:	bf00      	nop
 8006b98:	f7ff fd30 	bl	80065fc <XMC_SCU_INTERUPT_GetEventStatus>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0f8      	beq.n	8006b98 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	50004300 	.word	0x50004300

08006bac <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8006bac:	b5b0      	push	{r4, r5, r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8006bb0:	4a0f      	ldr	r2, [pc, #60]	; (8006bf0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8006bb2:	4b0f      	ldr	r3, [pc, #60]	; (8006bf0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bba:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8006bbc:	4d0d      	ldr	r5, [pc, #52]	; (8006bf4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8006bbe:	4b0d      	ldr	r3, [pc, #52]	; (8006bf4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8006bc6:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8006bca:	f004 f9a5 	bl	800af18 <OSCHP_GetFrequency>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8006bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8006bd6:	0d1b      	lsrs	r3, r3, #20
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8006bdc:	4323      	orrs	r3, r4
 8006bde:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8006be0:	4a03      	ldr	r2, [pc, #12]	; (8006bf0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8006be2:	4b03      	ldr	r3, [pc, #12]	; (8006bf0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006bea:	6053      	str	r3, [r2, #4]
}
 8006bec:	bdb0      	pop	{r4, r5, r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	50004710 	.word	0x50004710
 8006bf4:	50004700 	.word	0x50004700
 8006bf8:	6b5fca6b 	.word	0x6b5fca6b

08006bfc <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8006c00:	4b07      	ldr	r3, [pc, #28]	; (8006c20 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8006c08:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8006c0c:	bf0c      	ite	eq
 8006c0e:	2301      	moveq	r3, #1
 8006c10:	2300      	movne	r3, #0
 8006c12:	b2db      	uxtb	r3, r3
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	50004710 	.word	0x50004710

08006c24 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8006c28:	4a05      	ldr	r2, [pc, #20]	; (8006c40 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8006c2a:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c32:	f023 0302 	bic.w	r3, r3, #2
 8006c36:	6053      	str	r3, [r2, #4]
}
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	50004710 	.word	0x50004710

08006c44 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8006c48:	4a05      	ldr	r2, [pc, #20]	; (8006c60 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8006c4a:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c52:	f043 0302 	orr.w	r3, r3, #2
 8006c56:	6053      	str	r3, [r2, #4]
}
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	50004710 	.word	0x50004710

08006c64 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60ba      	str	r2, [r7, #8]
 8006c6c:	607b      	str	r3, [r7, #4]
 8006c6e:	4603      	mov	r3, r0
 8006c70:	81fb      	strh	r3, [r7, #14]
 8006c72:	460b      	mov	r3, r1
 8006c74:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8006c76:	89fb      	ldrh	r3, [r7, #14]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff fdc9 	bl	8006810 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8006c7e:	7b7b      	ldrb	r3, [r7, #13]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	f040 8084 	bne.w	8006d8e <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8006c86:	89fb      	ldrh	r3, [r7, #14]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d109      	bne.n	8006ca0 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8006c8c:	f004 f944 	bl	800af18 <OSCHP_GetFrequency>
 8006c90:	4602      	mov	r2, r0
 8006c92:	4b4b      	ldr	r3, [pc, #300]	; (8006dc0 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8006c94:	fba3 2302 	umull	r2, r3, r3, r2
 8006c98:	0c9b      	lsrs	r3, r3, #18
 8006c9a:	059b      	lsls	r3, r3, #22
 8006c9c:	617b      	str	r3, [r7, #20]
 8006c9e:	e002      	b.n	8006ca6 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8006ca0:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8006ca4:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	fb02 f203 	mul.w	r2, r2, r3
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb4:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	4a42      	ldr	r2, [pc, #264]	; (8006dc4 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8006cba:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbe:	091b      	lsrs	r3, r3, #4
 8006cc0:	0d9b      	lsrs	r3, r3, #22
 8006cc2:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8006cc4:	4a40      	ldr	r2, [pc, #256]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006cc6:	4b40      	ldr	r3, [pc, #256]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f043 0301 	orr.w	r3, r3, #1
 8006cce:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8006cd0:	4a3d      	ldr	r2, [pc, #244]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006cd2:	4b3d      	ldr	r3, [pc, #244]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f043 0310 	orr.w	r3, r3, #16
 8006cda:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8006cdc:	493a      	ldr	r1, [pc, #232]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006cde:	4b3a      	ldr	r3, [pc, #232]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	4b3a      	ldr	r3, [pc, #232]	; (8006dcc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8006ce4:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	3a01      	subs	r2, #1
 8006cea:	0212      	lsls	r2, r2, #8
 8006cec:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006cf4:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8006d00:	4a31      	ldr	r2, [pc, #196]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d02:	4b31      	ldr	r3, [pc, #196]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d0a:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8006d0c:	4a2e      	ldr	r2, [pc, #184]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d0e:	4b2e      	ldr	r3, [pc, #184]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f023 0310 	bic.w	r3, r3, #16
 8006d16:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8006d18:	4a2b      	ldr	r2, [pc, #172]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d1a:	4b2b      	ldr	r3, [pc, #172]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d22:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8006d24:	bf00      	nop
 8006d26:	4b28      	ldr	r3, [pc, #160]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0f9      	beq.n	8006d26 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8006d32:	4a25      	ldr	r2, [pc, #148]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d34:	4b24      	ldr	r3, [pc, #144]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f023 0301 	bic.w	r3, r3, #1
 8006d3c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8006d3e:	bf00      	nop
 8006d40:	4b21      	ldr	r3, [pc, #132]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1f9      	bne.n	8006d40 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	4a20      	ldr	r2, [pc, #128]	; (8006dd0 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8006d50:	fba2 2303 	umull	r2, r3, r2, r3
 8006d54:	095b      	lsrs	r3, r3, #5
 8006d56:	0d9b      	lsrs	r3, r3, #22
 8006d58:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8006d5a:	6a3a      	ldr	r2, [r7, #32]
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d202      	bcs.n	8006d68 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8006d62:	6938      	ldr	r0, [r7, #16]
 8006d64:	f000 f838 	bl	8006dd8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	085b      	lsrs	r3, r3, #1
 8006d6c:	4a19      	ldr	r2, [pc, #100]	; (8006dd4 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8006d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d72:	095b      	lsrs	r3, r3, #5
 8006d74:	0d9b      	lsrs	r3, r3, #22
 8006d76:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8006d78:	6a3a      	ldr	r2, [r7, #32]
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d202      	bcs.n	8006d86 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8006d80:	6938      	ldr	r0, [r7, #16]
 8006d82:	f000 f829 	bl	8006dd8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8006d86:	6a38      	ldr	r0, [r7, #32]
 8006d88:	f000 f826 	bl	8006dd8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8006d8c:	e015      	b.n	8006dba <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8006d8e:	490e      	ldr	r1, [pc, #56]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d90:	4b0d      	ldr	r3, [pc, #52]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8006da0:	4a09      	ldr	r2, [pc, #36]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006da2:	4b09      	ldr	r3, [pc, #36]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f043 0301 	orr.w	r3, r3, #1
 8006daa:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8006dac:	bf00      	nop
 8006dae:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0f9      	beq.n	8006dae <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	431bde83 	.word	0x431bde83
 8006dc4:	aaaaaaab 	.word	0xaaaaaaab
 8006dc8:	50004710 	.word	0x50004710
 8006dcc:	f08080ff 	.word	0xf08080ff
 8006dd0:	88888889 	.word	0x88888889
 8006dd4:	b60b60b7 	.word	0xb60b60b7

08006dd8 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8006de0:	4907      	ldr	r1, [pc, #28]	; (8006e00 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8006de2:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8006df0:	4313      	orrs	r3, r2
 8006df2:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8006df4:	2032      	movs	r0, #50	; 0x32
 8006df6:	f7ff fbcd 	bl	8006594 <XMC_SCU_lDelay>
}
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	50004710 	.word	0x50004710

08006e04 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8006e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	bf0c      	ite	eq
 8006e1a:	2301      	moveq	r3, #1
 8006e1c:	2300      	movne	r3, #0
 8006e1e:	b2db      	uxtb	r3, r3
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	4608      	mov	r0, r1
 8006e36:	4611      	mov	r1, r2
 8006e38:	461a      	mov	r2, r3
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	70fb      	strb	r3, [r7, #3]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	70bb      	strb	r3, [r7, #2]
 8006e42:	4613      	mov	r3, r2
 8006e44:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8006e46:	78fa      	ldrb	r2, [r7, #3]
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8006e48:	78bb      	ldrb	r3, [r7, #2]
 8006e4a:	041b      	lsls	r3, r3, #16
 8006e4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8006e50:	431a      	orrs	r2, r3
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8006e52:	787b      	ldrb	r3, [r7, #1]
 8006e54:	061b      	lsls	r3, r3, #24
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8006e56:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	601a      	str	r2, [r3, #0]
}
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop

08006e88 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	601a      	str	r2, [r3, #0]
}
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop

08006ea8 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	bf38      	it	cc
 8006eba:	4613      	movcc	r3, r2
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	bf28      	it	cs
 8006eda:	4613      	movcs	r3, r2
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
                                               const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	6852      	ldr	r2, [r2, #4]
 8006efa:	fbb3 f1f2 	udiv	r1, r3, r2
 8006efe:	fb02 f201 	mul.w	r2, r2, r1
 8006f02:	1a9b      	subs	r3, r3, r2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f040 808e 	bne.w	8007026 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x13e>
  {
    uint32_t prescaler;
    uint32_t div8 = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1a:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 8006f1c:	2319      	movs	r3, #25
 8006f1e:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
 8006f20:	2300      	movs	r3, #0
 8006f22:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
 8006f24:	2300      	movs	r3, #0
 8006f26:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8006f28:	e04b      	b.n	8006fc2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xda>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f32:	6979      	ldr	r1, [r7, #20]
 8006f34:	fb01 f202 	mul.w	r2, r1, r2
 8006f38:	1a9b      	subs	r3, r3, r2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d13e      	bne.n	8006fbc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
      {
    	  div8 = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4a:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d034      	beq.n	8006fbc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f58:	d830      	bhi.n	8006fbc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
        {
          if (prescaler >= 64)
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	2b3f      	cmp	r3, #63	; 0x3f
 8006f5e:	d90a      	bls.n	8006f76 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8a>
            {
              --ntq;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	617b      	str	r3, [r7, #20]
              continue;
 8006f70:	e027      	b.n	8006fc2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xda>
            }
            else
            {
              div8 = 1;
 8006f72:	2301      	movs	r3, #1
 8006f74:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	8912      	ldrh	r2, [r2, #8]
 8006f7e:	fb02 f303 	mul.w	r3, r2, r3
 8006f82:	4a2b      	ldr	r2, [pc, #172]	; (8007030 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x148>)
 8006f84:	fba2 2303 	umull	r2, r3, r2, r3
 8006f88:	0b5b      	lsrs	r3, r3, #13
 8006f8a:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	3b01      	subs	r3, #1
 8006f94:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d90f      	bls.n	8006fbc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	2b0f      	cmp	r3, #15
 8006fa0:	d80c      	bhi.n	8006fbc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d909      	bls.n	8006fbc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
        		  (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2b06      	cmp	r3, #6
 8006fac:	d806      	bhi.n	8006fbc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	895b      	ldrh	r3, [r3, #10]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d800      	bhi.n	8006fbc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
          {
            break;
 8006fba:	e005      	b.n	8006fc8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe0>
          }


        }
      }
      --ntq;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2b07      	cmp	r3, #7
 8006fc6:	d8b0      	bhi.n	8006f2a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x42>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2b07      	cmp	r3, #7
 8006fcc:	d92b      	bls.n	8007026 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x13e>
    {


      XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7ff ff4a 	bl	8006e68 <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	031b      	lsls	r3, r3, #12
 8006fda:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	895b      	ldrh	r3, [r3, #10]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	019b      	lsls	r3, r3, #6
 8006fe6:	b2db      	uxtb	r3, r3


      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8006fe8:	431a      	orrs	r2, r3
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	021b      	lsls	r3, r3, #8
 8006ff0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8006ff4:	ea42 0103 	orr.w	r1, r2, r3
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	4413      	add	r3, r2
 8007000:	461a      	mov	r2, r3
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	40d3      	lsrs	r3, r2
 8007006:	3b01      	subs	r3, #1
 8007008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 800700c:	ea41 0203 	orr.w	r2, r1, r3
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	03db      	lsls	r3, r3, #15
 8007014:	b29b      	uxth	r3, r3

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8007016:	431a      	orrs	r2, r3


      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	611a      	str	r2, [r3, #16]
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff ff33 	bl	8006e88 <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
 8007022:	2300      	movs	r3, #0
 8007024:	e000      	b.n	8007028 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x140>
    }
  }

  return XMC_CAN_STATUS_ERROR;
 8007026:	2301      	movs	r3, #1
}
 8007028:	4618      	mov	r0, r3
 800702a:	3720      	adds	r7, #32
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	d1b71759 	.word	0xd1b71759

08007034 <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
 8007040:	4613      	mov	r3, r2
 8007042:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 8007044:	bf00      	nop
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff fedc 	bl	8006e04 <XMC_CAN_IsPanelControlReady>
 800704c:	4603      	mov	r3, r0
 800704e:	f083 0301 	eor.w	r3, r3, #1
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1f6      	bne.n	8007046 <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	3301      	adds	r3, #1
 800705c:	b2db      	uxtb	r3, r3
 800705e:	78ba      	ldrb	r2, [r7, #2]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	2102      	movs	r1, #2
 8007064:	f7ff fee2 	bl	8006e2c <XMC_CAN_PanelControl>
}
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop

08007070 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8007078:	4809      	ldr	r0, [pc, #36]	; (80070a0 <XMC_CAN_Enable+0x30>)
 800707a:	f7ff fb61 	bl	8006740 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f023 0201 	bic.w	r2, r3, #1
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 800708a:	bf00      	nop
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1f9      	bne.n	800708c <XMC_CAN_Enable+0x1c>
  {
    /*Do nothing*/
  };
}
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	10000010 	.word	0x10000010

080070a4 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	460b      	mov	r3, r1
 80070ae:	70fb      	strb	r3, [r7, #3]
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop

080070bc <XMC_CAN_GetBaudrateClockFrequency>:
  return XMC_CAN_CANCLKSRC_FPERI;
#endif    
}

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
      frequency = 0;
      break;
  }
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 80070c4:	f7ff fb58 	bl	8006778 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80070c8:	60f8      	str	r0, [r7, #12]
#endif  

  return frequency;
 80070ca:	68fb      	ldr	r3, [r7, #12]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	460b      	mov	r3, r1
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	72fb      	strb	r3, [r7, #11]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7ff ffc4 	bl	8007070 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 80070e8:	7afb      	ldrb	r3, [r7, #11]
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	4619      	mov	r1, r3
 80070ee:	f7ff ffd9 	bl	80070a4 <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f7ff ffe2 	bl	80070bc <XMC_CAN_GetBaudrateClockFrequency>
 80070f8:	61f8      	str	r0, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 80070fa:	69fa      	ldr	r2, [r7, #28]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007102:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8007106:	2000      	movs	r0, #0
 8007108:	4619      	mov	r1, r3
 800710a:	f7ff fecd 	bl	8006ea8 <max>
 800710e:	4603      	mov	r3, r0
 8007110:	4618      	mov	r0, r3
 8007112:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007116:	f7ff fed7 	bl	8006ec8 <min>
 800711a:	61b8      	str	r0, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	fbb2 f3f3 	udiv	r3, r2, r3
 8007128:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8007132:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	4313      	orrs	r3, r2
 8007142:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	60da      	str	r2, [r3, #12]

  return freq_n;
 800714a:	697b      	ldr	r3, [r7, #20]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3720      	adds	r7, #32
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t reg;
  
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 8007164:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8007168:	095b      	lsrs	r3, r3, #5
 800716a:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	095b      	lsrs	r3, r3, #5
 8007170:	035a      	lsls	r2, r3, #13
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f003 031f 	and.w	r3, r3, #31
 8007178:	021b      	lsls	r3, r3, #8
 800717a:	4313      	orrs	r3, r2
 800717c:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6812      	ldr	r2, [r2, #0]
 8007186:	6892      	ldr	r2, [r2, #8]
 8007188:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800718c:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6812      	ldr	r2, [r2, #0]
 8007196:	6891      	ldr	r1, [r2, #8]
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	430a      	orrs	r2, r1
 800719c:	609a      	str	r2, [r3, #8]
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	79db      	ldrb	r3, [r3, #7]
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d007      	beq.n	80071bc <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	79db      	ldrb	r3, [r3, #7]
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d100      	bne.n	80071bc <XMC_CAN_MO_Config+0x68>
 80071ba:	e060      	b.n	800727e <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d004      	beq.n	80071ce <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d000      	beq.n	80071ce <XMC_CAN_MO_Config+0x7a>
 80071cc:	e057      	b.n	800727e <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2220      	movs	r2, #32
 80071d4:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	79db      	ldrb	r3, [r3, #7]
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d128      	bne.n	8007236 <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80071f0:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80071fa:	049b      	lsls	r3, r3, #18
 80071fc:	461a      	mov	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8007218:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8007222:	049b      	lsls	r3, r3, #18
 8007224:	461a      	mov	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	4313      	orrs	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	60da      	str	r2, [r3, #12]
 8007234:	e009      	b.n	800724a <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6852      	ldr	r2, [r2, #4]
 800723e:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	6892      	ldr	r2, [r2, #8]
 8007248:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	7e1b      	ldrb	r3, [r3, #24]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d10c      	bne.n	800726c <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f81a 	bl	800728c <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007260:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a07      	ldr	r2, [pc, #28]	; (8007284 <XMC_CAN_MO_Config+0x130>)
 8007268:	61da      	str	r2, [r3, #28]
 800726a:	e008      	b.n	800727e <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007274:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a03      	ldr	r2, [pc, #12]	; (8007288 <XMC_CAN_MO_Config+0x134>)
 800727c:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 800727e:	3718      	adds	r7, #24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	062000c0 	.word	0x062000c0
 8007288:	00a00640 	.word	0x00a00640

0800728c <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8007294:	2303      	movs	r3, #3
 8007296:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	7e1b      	ldrb	r3, [r3, #24]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d122      	bne.n	80072e6 <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2220      	movs	r2, #32
 80072a6:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6812      	ldr	r2, [r2, #0]
 80072b0:	6812      	ldr	r2, [r2, #0]
 80072b2:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	7b12      	ldrb	r2, [r2, #12]
 80072ba:	0612      	lsls	r2, r2, #24
 80072bc:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 80072c0:	430a      	orrs	r2, r1
 80072c2:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6912      	ldr	r2, [r2, #16]
 80072cc:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	6952      	ldr	r2, [r2, #20]
 80072d6:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOCTR_RESRTSEL_Msk);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a06      	ldr	r2, [pc, #24]	; (80072f8 <XMC_CAN_MO_UpdateData+0x6c>)
 80072de:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 80072e0:	2300      	movs	r3, #0
 80072e2:	73fb      	strb	r3, [r7, #15]
 80072e4:	e001      	b.n	80072ea <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80072e6:	2303      	movs	r3, #3
 80072e8:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	00280040 	.word	0x00280040

080072fc <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	f003 0320 	and.w	r3, r3, #32
 8007312:	095b      	lsrs	r3, r3, #5
 8007314:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007320:	0a1b      	lsrs	r3, r3, #8
 8007322:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d102      	bne.n	8007330 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 800732a:	2304      	movs	r3, #4
 800732c:	75fb      	strb	r3, [r7, #23]
 800732e:	e00c      	b.n	800734a <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d102      	bne.n	800733c <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 8007336:	2302      	movs	r3, #2
 8007338:	75fb      	strb	r3, [r7, #23]
 800733a:	e006      	b.n	800734a <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8007344:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 8007346:	2300      	movs	r3, #0
 8007348:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 800734a:	7dfb      	ldrb	r3, [r7, #23]
}
 800734c:	4618      	mov	r0, r3
 800734e:	371c      	adds	r7, #28
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007376:	0adb      	lsrs	r3, r3, #11
 8007378:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	089b      	lsrs	r3, r3, #2
 8007386:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800738e:	2303      	movs	r3, #3
 8007390:	75fb      	strb	r3, [r7, #23]
 8007392:	e0a7      	b.n	80074e4 <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d102      	bne.n	80073a0 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 800739a:	2302      	movs	r3, #2
 800739c:	75fb      	strb	r3, [r7, #23]
 800739e:	e0a1      	b.n	80074e4 <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2208      	movs	r2, #8
 80073a6:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073b2:	0f5b      	lsrs	r3, r3, #29
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d140      	bne.n	800743a <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	79d3      	ldrb	r3, [r2, #7]
 80073bc:	f36f 1345 	bfc	r3, #5, #1
 80073c0:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	699a      	ldr	r2, [r3, #24]
 80073c8:	4b4a      	ldr	r3, [pc, #296]	; (80074f4 <XMC_CAN_MO_Receive+0x19c>)
 80073ca:	4013      	ands	r3, r2
 80073cc:	0c9b      	lsrs	r3, r3, #18
 80073ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6853      	ldr	r3, [r2, #4]
 80073d6:	f361 031c 	bfi	r3, r1, #0, #29
 80073da:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073e6:	0f5b      	lsrs	r3, r3, #29
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	b2d9      	uxtb	r1, r3
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	7ad3      	ldrb	r3, [r2, #11]
 80073f4:	f361 1345 	bfi	r3, r1, #5, #1
 80073f8:	72d3      	strb	r3, [r2, #11]
        if(can_mo->can_ide_mask == 1U)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	7adb      	ldrb	r3, [r3, #11]
 80073fe:	f003 0320 	and.w	r3, r3, #32
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00d      	beq.n	8007424 <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	4b39      	ldr	r3, [pc, #228]	; (80074f4 <XMC_CAN_MO_Receive+0x19c>)
 8007410:	4013      	ands	r3, r2
 8007412:	0c9b      	lsrs	r3, r3, #18
 8007414:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6893      	ldr	r3, [r2, #8]
 800741c:	f361 031c 	bfi	r3, r1, #0, #29
 8007420:	6093      	str	r3, [r2, #8]
 8007422:	e032      	b.n	800748a <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	6893      	ldr	r3, [r2, #8]
 8007432:	f361 031c 	bfi	r3, r1, #0, #29
 8007436:	6093      	str	r3, [r2, #8]
 8007438:	e027      	b.n	800748a <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	79d3      	ldrb	r3, [r2, #7]
 800743e:	f043 0320 	orr.w	r3, r3, #32
 8007442:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6853      	ldr	r3, [r2, #4]
 8007452:	f361 031c 	bfi	r3, r1, #0, #29
 8007456:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	6893      	ldr	r3, [r2, #8]
 8007466:	f361 031c 	bfi	r3, r1, #0, #29
 800746a:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007476:	0f5b      	lsrs	r3, r3, #29
 8007478:	b2db      	uxtb	r3, r3
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	b2d9      	uxtb	r1, r3
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	7ad3      	ldrb	r3, [r2, #11]
 8007484:	f361 1345 	bfi	r3, r1, #5, #1
 8007488:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8007494:	0e1b      	lsrs	r3, r3, #24
 8007496:	b2da      	uxtb	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	691a      	ldr	r2, [r3, #16]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	695a      	ldr	r2, [r3, #20]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	f003 0304 	and.w	r3, r3, #4
 80074ba:	089b      	lsrs	r3, r3, #2
 80074bc:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	f003 0308 	and.w	r3, r3, #8
 80074c8:	08db      	lsrs	r3, r3, #3
 80074ca:	757b      	strb	r3, [r7, #21]
    } while ((rx_pnd != 0U) && (new_data != 0U));
 80074cc:	7dbb      	ldrb	r3, [r7, #22]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d003      	beq.n	80074da <XMC_CAN_MO_Receive+0x182>
 80074d2:	7d7b      	ldrb	r3, [r7, #21]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f47f af63 	bne.w	80073a0 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 80074e0:	2300      	movs	r3, #0
 80074e2:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	371c      	adds	r7, #28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	1ffc0000 	.word	0x1ffc0000

080074f8 <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  if(event != XMC_CAN_NODE_EVENT_CFCIE)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007508:	d006      	beq.n	8007518 <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	e005      	b.n	8007524 <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	699a      	ldr	r2, [r3, #24]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	431a      	orrs	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	619a      	str	r2, [r3, #24]
  }
}
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop

08007530 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800753e:	60da      	str	r2, [r3, #12]
}
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop

0800754c <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a10      	ldr	r2, [pc, #64]	; (8007598 <XMC_CCU4_lDeassertReset+0x4c>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d103      	bne.n	8007564 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 800755c:	2004      	movs	r0, #4
 800755e:	f7ff f8ef 	bl	8006740 <XMC_SCU_RESET_DeassertPeripheralReset>
 8007562:	e016      	b.n	8007592 <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a0d      	ldr	r2, [pc, #52]	; (800759c <XMC_CCU4_lDeassertReset+0x50>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d103      	bne.n	8007574 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 800756c:	2008      	movs	r0, #8
 800756e:	f7ff f8e7 	bl	8006740 <XMC_SCU_RESET_DeassertPeripheralReset>
 8007572:	e00e      	b.n	8007592 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a0a      	ldr	r2, [pc, #40]	; (80075a0 <XMC_CCU4_lDeassertReset+0x54>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d103      	bne.n	8007584 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 800757c:	2010      	movs	r0, #16
 800757e:	f7ff f8df 	bl	8006740 <XMC_SCU_RESET_DeassertPeripheralReset>
 8007582:	e006      	b.n	8007592 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a07      	ldr	r2, [pc, #28]	; (80075a4 <XMC_CCU4_lDeassertReset+0x58>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d102      	bne.n	8007592 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 800758c:	4806      	ldr	r0, [pc, #24]	; (80075a8 <XMC_CCU4_lDeassertReset+0x5c>)
 800758e:	f7ff f8d7 	bl	8006740 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	4000c000 	.word	0x4000c000
 800759c:	40010000 	.word	0x40010000
 80075a0:	40014000 	.word	0x40014000
 80075a4:	48004000 	.word	0x48004000
 80075a8:	10000001 	.word	0x10000001

080075ac <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80075b4:	2010      	movs	r0, #16
 80075b6:	f7ff fa13 	bl	80069e0 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff ffc6 	bl	800754c <XMC_CCU4_lDeassertReset>
#endif
}
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop

080075c8 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7ff ffe9 	bl	80075ac <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff ffa8 	bl	8007530 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80075ec:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 80075ee:	78fb      	ldrb	r3, [r7, #3]
 80075f0:	039b      	lsls	r3, r3, #14
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	601a      	str	r2, [r3, #0]
}
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	795b      	ldrb	r3, [r3, #5]
 800761a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800761e:	b2db      	uxtb	r3, r3
 8007620:	051a      	lsls	r2, r3, #20
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	791b      	ldrb	r3, [r3, #4]
 800762a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800762e:	b2db      	uxtb	r3, r3
 8007630:	461a      	mov	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	795b      	ldrb	r3, [r3, #5]
 800763a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800763e:	b2db      	uxtb	r3, r3
 8007640:	461a      	mov	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	795b      	ldrb	r3, [r3, #5]
 800764a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800764e:	b2db      	uxtb	r3, r3
 8007650:	461a      	mov	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	791b      	ldrb	r3, [r3, #4]
 800765a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800765e:	b2db      	uxtb	r3, r3
 8007660:	461a      	mov	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8007670:	b480      	push	{r7}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	460b      	mov	r3, r1
 800767a:	70fb      	strb	r3, [r7, #3]
 800767c:	4613      	mov	r3, r2
 800767e:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007686:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8007688:	78fb      	ldrb	r3, [r7, #3]
 800768a:	2b09      	cmp	r3, #9
 800768c:	d82c      	bhi.n	80076e8 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 800768e:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8007690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007694:	080076bd 	.word	0x080076bd
 8007698:	080076bd 	.word	0x080076bd
 800769c:	080076c7 	.word	0x080076c7
 80076a0:	080076c7 	.word	0x080076c7
 80076a4:	080076e9 	.word	0x080076e9
 80076a8:	080076e9 	.word	0x080076e9
 80076ac:	080076e9 	.word	0x080076e9
 80076b0:	080076e9 	.word	0x080076e9
 80076b4:	080076d1 	.word	0x080076d1
 80076b8:	080076dd 	.word	0x080076dd
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 80076bc:	2303      	movs	r3, #3
 80076be:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 80076c0:	2300      	movs	r3, #0
 80076c2:	617b      	str	r3, [r7, #20]
      break;
 80076c4:	e016      	b.n	80076f4 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 80076c6:	230c      	movs	r3, #12
 80076c8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 80076ca:	2302      	movs	r3, #2
 80076cc:	617b      	str	r3, [r7, #20]
      break;
 80076ce:	e011      	b.n	80076f4 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 80076d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80076d4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 80076d6:	2308      	movs	r3, #8
 80076d8:	617b      	str	r3, [r7, #20]
      break;
 80076da:	e00b      	b.n	80076f4 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 80076dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80076e0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 80076e2:	230a      	movs	r3, #10
 80076e4:	617b      	str	r3, [r7, #20]
      break;
 80076e6:	e005      	b.n	80076f4 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 80076e8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80076ec:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 80076ee:	230c      	movs	r3, #12
 80076f0:	617b      	str	r3, [r7, #20]
      break;
 80076f2:	bf00      	nop
  }
  
  srs &= ~mask; 
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	43db      	mvns	r3, r3
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4013      	ands	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 80076fe:	78ba      	ldrb	r2, [r7, #2]
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	fa02 f303 	lsl.w	r3, r2, r3
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	4313      	orrs	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop

08007720 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	460b      	mov	r3, r1
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f7fe fe60 	bl	80063f4 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8007738:	7afb      	ldrb	r3, [r7, #11]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4619      	mov	r1, r3
 800773e:	230f      	movs	r3, #15
 8007740:	408b      	lsls	r3, r1
 8007742:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8007744:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	7af9      	ldrb	r1, [r7, #11]
 800774c:	0089      	lsls	r1, r1, #2
 800774e:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8007750:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 8007756:	7afa      	ldrb	r2, [r7, #11]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6859      	ldr	r1, [r3, #4]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3204      	adds	r2, #4
 8007760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop

0800776c <XMC_ERU_OGU_Init>:

/* Initializes the selected ERU_OGUy channel with the config structure.  */
void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_OGU_CONFIG_t *const config)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	460b      	mov	r3, r1
 8007776:	607a      	str	r2, [r7, #4]
 8007778:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f7fe fe3a 	bl	80063f4 <XMC_ERU_Enable>

  eru->EXOCON[channel] = config->raw;
 8007780:	7afa      	ldrb	r2, [r7, #11]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6819      	ldr	r1, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3208      	adds	r2, #8
 800778a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	70fb      	strb	r3, [r7, #3]
 80077a0:	4613      	mov	r3, r2
 80077a2:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80077a8:	78fb      	ldrb	r3, [r7, #3]
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	4619      	mov	r1, r3
 80077ae:	2303      	movs	r3, #3
 80077b0:	408b      	lsls	r3, r1
 80077b2:	43db      	mvns	r3, r3
 80077b4:	401a      	ands	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80077be:	78bb      	ldrb	r3, [r7, #2]
 80077c0:	78f9      	ldrb	r1, [r7, #3]
 80077c2:	0049      	lsls	r1, r1, #1
 80077c4:	408b      	lsls	r3, r1
 80077c6:	431a      	orrs	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	675a      	str	r2, [r3, #116]	; 0x74
}
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop

080077d8 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80077e2:	783b      	ldrb	r3, [r7, #0]
 80077e4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 80077ec:	78bb      	ldrb	r3, [r7, #2]
 80077ee:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8007802:	78fb      	ldrb	r3, [r7, #3]
 8007804:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007808:	b2db      	uxtb	r3, r3
 800780a:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 800780c:	78fb      	ldrb	r3, [r7, #3]
 800780e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007812:	b2db      	uxtb	r3, r3
 8007814:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8007816:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 8007818:	78fb      	ldrb	r3, [r7, #3]
 800781a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800781e:	b2db      	uxtb	r3, r3
 8007820:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8007822:	4313      	orrs	r3, r2
 8007824:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4313      	orrs	r3, r2
 8007830:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007852:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop

08007868 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007876:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop

0800788c <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	af00      	add	r7, sp, #0
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8007890:	2001      	movs	r0, #1
 8007892:	f7fe ff55 	bl	8006740 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8007896:	bd80      	pop	{r7, pc}

08007898 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 80078a2:	f7ff fff3 	bl	800788c <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	695a      	ldr	r2, [r3, #20]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	691a      	ldr	r2, [r3, #16]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop

080078ec <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	603b      	str	r3, [r7, #0]
 80078f8:	4613      	mov	r3, r2
 80078fa:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 80078fc:	79fb      	ldrb	r3, [r7, #7]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d109      	bne.n	8007916 <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
	XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	f240 731f 	movw	r3, #1823	; 0x71f
 8007908:	4013      	ands	r3, r2
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	3128      	adds	r1, #40	; 0x28
 8007910:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007914:	e007      	b.n	8007926 <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	4b05      	ldr	r3, [pc, #20]	; (8007930 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 800791a:	4013      	ands	r3, r2
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	3128      	adds	r1, #40	; 0x28
 8007922:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	071f0000 	.word	0x071f0000

08007934 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007942:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800794c:	2300      	movs	r3, #0
 800794e:	73fb      	strb	r3, [r7, #15]
 8007950:	e017      	b.n	8007982 <XMC_VADC_GLOBAL_StartupCalibration+0x4e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8007952:	7bfb      	ldrb	r3, [r7, #15]
 8007954:	4a0f      	ldr	r2, [pc, #60]	; (8007994 <XMC_VADC_GLOBAL_StartupCalibration+0x60>)
 8007956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800795a:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007962:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d008      	beq.n	800797c <XMC_VADC_GLOBAL_StartupCalibration+0x48>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 800796a:	e000      	b.n	800796e <XMC_VADC_GLOBAL_StartupCalibration+0x3a>
      {
        __NOP();
 800796c:	bf00      	nop
  {
    group_ptr = g_xmc_vadc_group_array[i];
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1f7      	bne.n	800796c <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800797c:	7bfb      	ldrb	r3, [r7, #15]
 800797e:	3301      	adds	r3, #1
 8007980:	73fb      	strb	r3, [r7, #15]
 8007982:	7bfb      	ldrb	r3, [r7, #15]
 8007984:	2b03      	cmp	r3, #3
 8007986:	d9e4      	bls.n	8007952 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	0800f488 	.word	0x0800f488

08007998 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70fb      	strb	r3, [r7, #3]
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 80079a4:	78fb      	ldrb	r3, [r7, #3]
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d903      	bls.n	80079b2 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 80079aa:	78fb      	ldrb	r3, [r7, #3]
 80079ac:	3b04      	subs	r3, #4
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	e001      	b.n	80079b6 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 80079b2:	78fb      	ldrb	r3, [r7, #3]
 80079b4:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80079bc:	f023 020f 	bic.w	r2, r3, #15
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	431a      	orrs	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	6859      	ldr	r1, [r3, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	2300      	movs	r3, #0
 80079f4:	f000 f828 	bl	8007a48 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	6859      	ldr	r1, [r3, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	2300      	movs	r3, #0
 8007a02:	f000 f821 	bl	8007a48 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	6899      	ldr	r1, [r3, #8]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2301      	movs	r3, #1
 8007a10:	f000 f81a 	bl	8007a48 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	6899      	ldr	r1, [r3, #8]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	f000 f813 	bl	8007a48 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	691a      	ldr	r2, [r3, #16]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	68da      	ldr	r2, [r3, #12]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	6819      	ldr	r1, [r3, #0]
 8007a3c:	f7ff fecc 	bl	80077d8 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop

08007a48 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b08d      	sub	sp, #52	; 0x34
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	603b      	str	r3, [r7, #0]
 8007a54:	4613      	mov	r3, r2
 8007a56:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8007a58:	79fb      	ldrb	r3, [r7, #7]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d113      	bne.n	8007a86 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8007a5e:	2308      	movs	r3, #8
 8007a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8007a62:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8007a66:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8007a6c:	231f      	movs	r3, #31
 8007a6e:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8007a70:	7a3b      	ldrb	r3, [r7, #8]
 8007a72:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8007a7a:	7a7b      	ldrb	r3, [r7, #9]
 8007a7c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	76fb      	strb	r3, [r7, #27]
 8007a84:	e013      	b.n	8007aae <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8007a86:	2318      	movs	r3, #24
 8007a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8007a8a:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8007a90:	2310      	movs	r3, #16
 8007a92:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8007a94:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8007a98:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8007a9a:	7abb      	ldrb	r3, [r7, #10]
 8007a9c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8007aa4:	7afb      	ldrb	r3, [r7, #11]
 8007aa6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	3228      	adds	r2, #40	; 0x28
 8007ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab8:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	43db      	mvns	r3, r3
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8007ac4:	7efa      	ldrb	r2, [r7, #27]
 8007ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	43db      	mvns	r3, r3
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	3228      	adds	r2, #40	; 0x28
 8007af0:	6979      	ldr	r1, [r7, #20]
 8007af2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007af6:	3734      	adds	r7, #52	; 0x34
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b12:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0303 	bic.w	r3, r3, #3
 8007b1a:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8007b1c:	78fb      	ldrb	r3, [r7, #3]
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop

08007b38 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007b42:	2300      	movs	r3, #0
 8007b44:	75fb      	strb	r3, [r7, #23]
 8007b46:	e009      	b.n	8007b5c <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
 8007b4a:	4a39      	ldr	r2, [pc, #228]	; (8007c30 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7ff fe89 	bl	8007868 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007b56:	7dfb      	ldrb	r3, [r7, #23]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	75fb      	strb	r3, [r7, #23]
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	d9f2      	bls.n	8007b48 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	f003 0303 	and.w	r3, r3, #3
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8007b74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b78:	613b      	str	r3, [r7, #16]
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	75fb      	strb	r3, [r7, #23]
 8007b7e:	e021      	b.n	8007bc4 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8007b80:	7dfb      	ldrb	r3, [r7, #23]
 8007b82:	4a2b      	ldr	r2, [pc, #172]	; (8007c30 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b8c:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b94:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	021b      	lsls	r3, r3, #8
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
  
    /* Program the start mode */
    reg |= conv_start_mask;
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
 8007bb2:	4a1f      	ldr	r2, [pc, #124]	; (8007c30 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	75fb      	strb	r3, [r7, #23]
 8007bc4:	7dfb      	ldrb	r3, [r7, #23]
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d9da      	bls.n	8007b80 <XMC_VADC_GLOBAL_BackgroundInit+0x48>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f043 0201 	orr.w	r2, r3, #1
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	f003 0303 	and.w	r3, r3, #3
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d107      	bne.n	8007c08 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007bfe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007c08:	2300      	movs	r3, #0
 8007c0a:	75fb      	strb	r3, [r7, #23]
 8007c0c:	e009      	b.n	8007c22 <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
 8007c10:	4a07      	ldr	r2, [pc, #28]	; (8007c30 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff fe14 	bl	8007844 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	75fb      	strb	r3, [r7, #23]
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
 8007c24:	2b03      	cmp	r3, #3
 8007c26:	d9f2      	bls.n	8007c0e <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	0800f488 	.word	0x0800f488

08007c34 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b089      	sub	sp, #36	; 0x24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	7a1b      	ldrb	r3, [r3, #8]
 8007c44:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4c:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2201      	movs	r2, #1
 8007c52:	fa02 f303 	lsl.w	r3, r2, r3
 8007c56:	43db      	mvns	r3, r3
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	fa02 f303 	lsl.w	r3, r2, r3
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	7a5b      	ldrb	r3, [r3, #9]
 8007c78:	b25b      	sxtb	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	db29      	blt.n	8007cd2 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d10a      	bne.n	8007c9e <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8007c88:	2308      	movs	r3, #8
 8007c8a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c92:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8007c9c:	e00c      	b.n	8007cb8 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d109      	bne.n	8007cb8 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007cae:	f023 021f 	bic.w	r2, r3, #31
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	7a52      	ldrb	r2, [r2, #9]
 8007cc2:	b251      	sxtb	r1, r2
 8007cc4:	69fa      	ldr	r2, [r7, #28]
 8007cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6819      	ldr	r1, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	3280      	adds	r2, #128	; 0x80
 8007cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8007cf2:	3724      	adds	r7, #36	; 0x24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <XMC_WDT_Enable>:
 * API IMPLEMENTATION
  ********************************************************************************************************************/

/* Enables watchdog clock and releases watchdog reset. */
void XMC_WDT_Enable(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
#if UC_FAMILY == XMC4
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_WDT);
 8007d00:	2020      	movs	r0, #32
 8007d02:	f7fe fe6d 	bl	80069e0 <XMC_SCU_CLOCK_EnableClock>

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_WDT);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_WDT);
 8007d06:	4802      	ldr	r0, [pc, #8]	; (8007d10 <XMC_WDT_Enable+0x14>)
 8007d08:	f7fe fd1a 	bl	8006740 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
}
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	20000002 	.word	0x20000002

08007d14 <XMC_WDT_Init>:
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_WDT);
#endif
}
/* Initializes and configures watchdog with configuration data pointed by \a config. */
void XMC_WDT_Init(const XMC_WDT_CONFIG_t *const config)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  XMC_WDT_Enable();
 8007d1c:	f7ff ffee 	bl	8007cfc <XMC_WDT_Enable>
  WDT->CTR = config->wdt_ctr;
 8007d20:	4a07      	ldr	r2, [pc, #28]	; (8007d40 <XMC_WDT_Init+0x2c>)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	6053      	str	r3, [r2, #4]
  WDT->WLB = config->window_lower_bound;
 8007d28:	4a05      	ldr	r2, [pc, #20]	; (8007d40 <XMC_WDT_Init+0x2c>)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	6113      	str	r3, [r2, #16]
  WDT->WUB = config->window_upper_bound;
 8007d30:	4a03      	ldr	r2, [pc, #12]	; (8007d40 <XMC_WDT_Init+0x2c>)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6153      	str	r3, [r2, #20]
}
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	50008000 	.word	0x50008000

08007d44 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8007d4c:	4b14      	ldr	r3, [pc, #80]	; (8007da0 <_sbrk+0x5c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d102      	bne.n	8007d5a <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8007d54:	4b12      	ldr	r3, [pc, #72]	; (8007da0 <_sbrk+0x5c>)
 8007d56:	4a13      	ldr	r2, [pc, #76]	; (8007da4 <_sbrk+0x60>)
 8007d58:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8007d5a:	4b11      	ldr	r3, [pc, #68]	; (8007da0 <_sbrk+0x5c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3303      	adds	r3, #3
 8007d64:	f023 0303 	bic.w	r3, r3, #3
 8007d68:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8007d6a:	4b0d      	ldr	r3, [pc, #52]	; (8007da0 <_sbrk+0x5c>)
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4413      	add	r3, r2
 8007d72:	4a0d      	ldr	r2, [pc, #52]	; (8007da8 <_sbrk+0x64>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d207      	bcs.n	8007d88 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8007d78:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <_sbrk+0x5c>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4413      	add	r3, r2
 8007d80:	4a07      	ldr	r2, [pc, #28]	; (8007da0 <_sbrk+0x5c>)
 8007d82:	6013      	str	r3, [r2, #0]
    return (base);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	e006      	b.n	8007d96 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8007d88:	f007 f8d8 	bl	800ef3c <__errno>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	230c      	movs	r3, #12
 8007d90:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8007d92:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	200006b0 	.word	0x200006b0
 8007da4:	200014b0 	.word	0x200014b0
 8007da8:	2000ffc0 	.word	0x2000ffc0

08007dac <_init>:

/* Init */
void _init(void)
{}
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <WATCHDOG_Init>:
  return (version);
}

/* Initializes the watchdog timer with the generated configuration */
WATCHDOG_STATUS_t WATCHDOG_Init(WATCHDOG_t *handle)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;

  XMC_ASSERT("WATCHDOG_Init:handle NULL" , (handle != NULL));

  status = WATCHDOG_STATUS_SUCCESS;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	73fb      	strb	r3, [r7, #15]

  /* Check for app instance is initialized or not */
  if (false == handle->initialized)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	791b      	ldrb	r3, [r3, #4]
 8007dc8:	f083 0301 	eor.w	r3, r3, #1
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00f      	beq.n	8007df2 <WATCHDOG_Init+0x3a>
  {
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      /* Service Event Handling */
      status = WATCHDOG_lPrewarning_Configure(handle);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f812 	bl	8007dfc <WATCHDOG_lPrewarning_Configure>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	73fb      	strb	r3, [r7, #15]
      if(WATCHDOG_STATUS_FAILURE != status)
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d007      	beq.n	8007df2 <WATCHDOG_Init+0x3a>
      {
#endif
        /* Initialize the WDT peripheral */
        XMC_WDT_Init(handle->config);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff ff94 	bl	8007d14 <XMC_WDT_Init>
        /* Update the initialization flag */
        handle->initialized = true;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	711a      	strb	r2, [r3, #4]
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      }
#endif
  }

  return (status);
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <WATCHDOG_lPrewarning_Configure>:
#if (WATCHDOG_PREWARNING_CHECK == 1U)
/*
 * Register the Pre-warning event with GLOBAL_SCU APP
 */
WATCHDOG_STATUS_t WATCHDOG_lPrewarning_Configure(WATCHDOG_t *handle)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;
  status = WATCHDOG_STATUS_SUCCESS;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73fb      	strb	r3, [r7, #15]
      status = WATCHDOG_STATUS_FAILURE;
    }
#endif

#if (WATCHDOG_EVENT_VIA_NMI == 1U)
    XMC_SCU_INTERRUPT_EnableEvent((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8007e08:	2001      	movs	r0, #1
 8007e0a:	f7fe fbe5 	bl	80065d8 <XMC_SCU_INTERRUPT_EnableEvent>
    XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8007e0e:	2001      	movs	r0, #1
 8007e10:	f7fe fc84 	bl	800671c <XMC_SCU_INTERRUPT_EnableNmiRequest>
#endif

  return (status);
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop

08007e20 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8007e2c:	78fb      	ldrb	r3, [r7, #3]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	409a      	lsls	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	60da      	str	r2, [r3, #12]
}
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	60da      	str	r2, [r3, #12]
}
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8007e64:	887a      	ldrh	r2, [r7, #2]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8007e80:	887a      	ldrh	r2, [r7, #2]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	611a      	str	r2, [r3, #16]
}
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop

08007eac <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8007ebe:	78fb      	ldrb	r3, [r7, #3]
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL))

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d14d      	bne.n	8007f8a <PWM_lCCU4_Init+0xb2>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 f9ea 	bl	80082cc <GLOBAL_CCU4_Init>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	73fb      	strb	r3, [r7, #15]

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d13f      	bne.n	8007f82 <PWM_lCCU4_Init+0xaa>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	689a      	ldr	r2, [r3, #8]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	f7ff fb79 	bl	8007604 <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	689a      	ldr	r2, [r3, #8]
    		                             (uint16_t)handle_ptr->period_value);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	4619      	mov	r1, r3
 8007f20:	f7ff ff9a 	bl	8007e58 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	4610      	mov	r0, r2
 8007f30:	4619      	mov	r1, r3
 8007f32:	f7ff ff9f 	bl	8007e74 <XMC_CCU4_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	4610      	mov	r0, r2
 8007f40:	4619      	mov	r1, r3
 8007f42:	f7ff ffa5 	bl	8007e90 <XMC_CCU4_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f824 	bl	8007f94 <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6919      	ldr	r1, [r3, #16]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	4608      	mov	r0, r1
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f7fe fa5a 	bl	8006418 <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <PWM_lCCU4_Init+0xa4>
      {
        PWM_Start(handle_ptr);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f8b8 	bl	80080ec <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	73fb      	strb	r3, [r7, #15]
 8007f80:	e003      	b.n	8007f8a <PWM_lCCU4_Init+0xb2>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2202      	movs	r2, #2
 8007f86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }

  }
  return (status);
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_lCCU4_Init() api */
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00f      	beq.n	8007fc6 <PWM_lCCU4_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	4618      	mov	r0, r3
 8007fac:	2100      	movs	r1, #0
 8007fae:	f7ff ff7d 	bl	8007eac <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	689a      	ldr	r2, [r3, #8]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	f7ff fb55 	bl	8007670 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00f      	beq.n	8007ff0 <PWM_lCCU4_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	2102      	movs	r1, #2
 8007fd8:	f7ff ff68 	bl	8007eac <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	689a      	ldr	r2, [r3, #8]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	2102      	movs	r1, #2
 8007fea:	461a      	mov	r2, r3
 8007fec:	f7ff fb40 	bl	8007670 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop

08007ff8 <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008006:	2b00      	cmp	r3, #0
 8008008:	d004      	beq.n	8008014 <PWM_lCCU4_Start+0x1c>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008010:	2b04      	cmp	r3, #4
 8008012:	d111      	bne.n	8008038 <PWM_lCCU4_Start+0x40>
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800801e:	4610      	mov	r0, r2
 8008020:	4619      	mov	r1, r3
 8008022:	f7ff fefd 	bl	8007e20 <XMC_CCU4_EnableClock>
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	4618      	mov	r0, r3
 800802c:	f7ff ff08 	bl	8007e40 <XMC_CCU4_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2203      	movs	r2, #3
 8008034:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU4_Start:start PWM")
  }
} /* end of PWM_lCCU4_Start() api */
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop

08008040 <PWM_lCCU4_SetDutyCycle>:
} /* end of PWM_lCCU4_Stop() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Sets the duty cycle for CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  uint32_t compare;
  PWM_STATUS_t status;

  XMC_ASSERT("PWM_lCCU4_SetDutyCycle:Invalid duty_cycle " , ((duty_cycle >= 0) && (duty_cycle <= PWM_MAX_DUTY_CYCLE)))

  status = PWM_STATUS_FAILURE;
 800804a:	2301      	movs	r3, #1
 800804c:	75fb      	strb	r3, [r7, #23]
  if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008054:	2b02      	cmp	r3, #2
 8008056:	d02c      	beq.n	80080b2 <PWM_lCCU4_SetDutyCycle+0x72>
  {
    /* Duty cycle needs between 0 and 10000 */
    if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	f242 7210 	movw	r2, #10000	; 0x2710
 800805e:	4293      	cmp	r3, r2
 8008060:	d827      	bhi.n	80080b2 <PWM_lCCU4_SetDutyCycle+0x72>
    {
      /* period = (PR + 1) */
      period = (uint32_t)handle_ptr->period_value + 1U;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	3301      	adds	r3, #1
 8008068:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8008070:	3310      	adds	r3, #16
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	fb02 f303 	mul.w	r3, r2, r3
 8008078:	4a10      	ldr	r2, [pc, #64]	; (80080bc <PWM_lCCU4_SetDutyCycle+0x7c>)
 800807a:	fba2 2303 	umull	r2, r3, r2, r3
 800807e:	0b5b      	lsrs	r3, r3, #13
 8008080:	60fb      	str	r3, [r7, #12]

      handle_ptr->compare_value = compare;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	619a      	str	r2, [r3, #24]
      handle_ptr->duty_cycle = duty_cycle;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	621a      	str	r2, [r3, #32]

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	689a      	ldr	r2, [r3, #8]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	b29b      	uxth	r3, r3
 8008096:	4610      	mov	r0, r2
 8008098:	4619      	mov	r1, r3
 800809a:	f7ff feeb 	bl	8007e74 <XMC_CCU4_SLICE_SetTimerCompareMatch>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	4610      	mov	r0, r2
 80080a8:	4619      	mov	r1, r3
 80080aa:	f7ff fef1 	bl	8007e90 <XMC_CCU4_EnableShadowTransfer>
      status = PWM_STATUS_SUCCESS;
 80080ae:	2300      	movs	r3, #0
 80080b0:	75fb      	strb	r3, [r7, #23]
    }
  }

  XMC_DEBUG("PWM_lCCU4_SetDutyCycle:dutycycle set")
  return (status);
 80080b2:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_lCCU4_SetDutyCycle() api */
 80080b4:	4618      	mov	r0, r3
 80080b6:	3718      	adds	r7, #24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	d1b71759 	.word	0xd1b71759

080080c0 <PWM_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function initializes the app */
PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 80080c8:	2301      	movs	r3, #1
 80080ca:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d104      	bne.n	80080e0 <PWM_Init+0x20>
  {
    status = PWM_lCCU4_Init(handle_ptr);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff fefe 	bl	8007ed8 <PWM_lCCU4_Init>
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]
  {
    status = PWM_lCCU8_Init(handle_ptr);
  }
#endif

  return (status);
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop

080080ec <PWM_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function starts the PWM generation. This needs to be called even if external start is configured.*/
void PWM_Start(PWM_t *const handle_ptr)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d102      	bne.n	8008104 <PWM_Start+0x18>
  {
    PWM_lCCU4_Start(handle_ptr);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7ff ff7a 	bl	8007ff8 <PWM_lCCU4_Start>
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    PWM_lCCU8_Start(handle_ptr);
  }
#endif
}
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop

0800810c <PWM_SetDutyCycle>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*This function is used to set the duty cycle (uint32_t) of the PWM waveform  */
PWM_STATUS_t PWM_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 8008116:	2301      	movs	r3, #1
 8008118:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008120:	2b00      	cmp	r3, #0
 8008122:	d105      	bne.n	8008130 <PWM_SetDutyCycle+0x24>
  {
    status = PWM_lCCU4_SetDutyCycle(handle_ptr, duty_cycle);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	f7ff ff8a 	bl	8008040 <PWM_lCCU4_SetDutyCycle>
 800812c:	4603      	mov	r3, r0
 800812e:	73fb      	strb	r3, [r7, #15]
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    status = PWM_lCCU8_SetDutyCycle(handle_ptr, duty_cycle);
  }
#endif
  return (status);
 8008130:	7bfb      	ldrb	r3, [r7, #15]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop

0800813c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800813c:	b480      	push	{r7}
 800813e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008140:	4b04      	ldr	r3, [pc, #16]	; (8008154 <__NVIC_GetPriorityGrouping+0x18>)
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008148:	0a1b      	lsrs	r3, r3, #8
}
 800814a:	4618      	mov	r0, r3
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	e000ed00 	.word	0xe000ed00

08008158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008166:	2b00      	cmp	r3, #0
 8008168:	db0b      	blt.n	8008182 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800816a:	4908      	ldr	r1, [pc, #32]	; (800818c <__NVIC_EnableIRQ+0x34>)
 800816c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008170:	095b      	lsrs	r3, r3, #5
 8008172:	79fa      	ldrb	r2, [r7, #7]
 8008174:	f002 021f 	and.w	r2, r2, #31
 8008178:	2001      	movs	r0, #1
 800817a:	fa00 f202 	lsl.w	r2, r0, r2
 800817e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	e000e100 	.word	0xe000e100

08008190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	4603      	mov	r3, r0
 8008198:	6039      	str	r1, [r7, #0]
 800819a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800819c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	db0a      	blt.n	80081ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081a4:	490d      	ldr	r1, [pc, #52]	; (80081dc <__NVIC_SetPriority+0x4c>)
 80081a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	b2d2      	uxtb	r2, r2
 80081ae:	0092      	lsls	r2, r2, #2
 80081b0:	b2d2      	uxtb	r2, r2
 80081b2:	440b      	add	r3, r1
 80081b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80081b8:	e00a      	b.n	80081d0 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081ba:	4909      	ldr	r1, [pc, #36]	; (80081e0 <__NVIC_SetPriority+0x50>)
 80081bc:	79fb      	ldrb	r3, [r7, #7]
 80081be:	f003 030f 	and.w	r3, r3, #15
 80081c2:	3b04      	subs	r3, #4
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	b2d2      	uxtb	r2, r2
 80081c8:	0092      	lsls	r2, r2, #2
 80081ca:	b2d2      	uxtb	r2, r2
 80081cc:	440b      	add	r3, r1
 80081ce:	761a      	strb	r2, [r3, #24]
  }
}
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	e000e100 	.word	0xe000e100
 80081e0:	e000ed00 	.word	0xe000ed00

080081e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b089      	sub	sp, #36	; 0x24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f003 0307 	and.w	r3, r3, #7
 80081f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	f1c3 0307 	rsb	r3, r3, #7
 80081fe:	2b06      	cmp	r3, #6
 8008200:	bf28      	it	cs
 8008202:	2306      	movcs	r3, #6
 8008204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	3306      	adds	r3, #6
 800820a:	2b06      	cmp	r3, #6
 800820c:	d902      	bls.n	8008214 <NVIC_EncodePriority+0x30>
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	3b01      	subs	r3, #1
 8008212:	e000      	b.n	8008216 <NVIC_EncodePriority+0x32>
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	2201      	movs	r2, #1
 800821c:	fa02 f303 	lsl.w	r3, r2, r3
 8008220:	1e5a      	subs	r2, r3, #1
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	401a      	ands	r2, r3
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2101      	movs	r1, #1
 800822e:	fa01 f303 	lsl.w	r3, r1, r3
 8008232:	1e59      	subs	r1, r3, #1
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8008238:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800823a:	4618      	mov	r0, r3
 800823c:	3724      	adds	r7, #36	; 0x24
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop

08008248 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	b25b      	sxtb	r3, r3
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff ff7e 	bl	8008158 <__NVIC_EnableIRQ>
}
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop

08008264 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8008264:	b590      	push	{r4, r7, lr}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	781c      	ldrb	r4, [r3, #0]
 8008270:	f7ff ff64 	bl	800813c <__NVIC_GetPriorityGrouping>
 8008274:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800827a:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8008280:	4608      	mov	r0, r1
 8008282:	4611      	mov	r1, r2
 8008284:	461a      	mov	r2, r3
 8008286:	f7ff ffad 	bl	80081e4 <NVIC_EncodePriority>
 800828a:	4602      	mov	r2, r0
 800828c:	b263      	sxtb	r3, r4
 800828e:	4618      	mov	r0, r3
 8008290:	4611      	mov	r1, r2
 8008292:	f7ff ff7d 	bl	8008190 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	78db      	ldrb	r3, [r3, #3]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d002      	beq.n	80082a4 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7ff ffd2 	bl	8008248 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd90      	pop	{r4, r7, pc}
 80082ae:	bf00      	nop

080082b0 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082be:	60da      	str	r2, [r3, #12]
}
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop

080082cc <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	7b5b      	ldrb	r3, [r3, #13]
 80082d8:	f083 0301 	eor.w	r3, r3, #1
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00f      	beq.n	8008302 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	689a      	ldr	r2, [r3, #8]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	7b1b      	ldrb	r3, [r3, #12]
 80082ea:	4610      	mov	r0, r2
 80082ec:	4619      	mov	r1, r3
 80082ee:	f7ff f96b 	bl	80075c8 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7ff ffda 	bl	80082b0 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 8008314:	2300      	movs	r3, #0
 8008316:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	7a5b      	ldrb	r3, [r3, #9]
 800831c:	f083 0301 	eor.w	r3, r3, #1
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00d      	beq.n	8008342 <GLOBAL_CAN_Init+0x36>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4610      	mov	r0, r2
 8008330:	2101      	movs	r1, #1
 8008332:	461a      	mov	r2, r3
 8008334:	f7fe fece 	bl	80070d4 <XMC_CAN_InitEx>
#endif
    handle->init_status = true;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 800833e:	2300      	movs	r3, #0
 8008340:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8008342:	7bfb      	ldrb	r3, [r7, #15]

}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	3310      	adds	r3, #16
 8008360:	4619      	mov	r1, r3
 8008362:	2301      	movs	r3, #1
 8008364:	408b      	lsls	r3, r1
 8008366:	431a      	orrs	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	7e1b      	ldrb	r3, [r3, #24]
 8008384:	2b02      	cmp	r3, #2
 8008386:	d149      	bne.n	800841c <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	695a      	ldr	r2, [r3, #20]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	4610      	mov	r0, r2
 8008392:	4619      	mov	r1, r3
 8008394:	f7ff fa80 	bl	8007898 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8008398:	2300      	movs	r3, #0
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	e02f      	b.n	80083fe <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a6:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	4608      	mov	r0, r1
 80083b4:	4619      	mov	r1, r3
 80083b6:	f7ff fb13 	bl	80079e0 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4618      	mov	r0, r3
 80083c6:	2103      	movs	r1, #3
 80083c8:	f7ff fb9a 	bl	8007b00 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d4:	7a1b      	ldrb	r3, [r3, #8]
 80083d6:	f083 0301 	eor.w	r3, r3, #1
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d005      	beq.n	80083ec <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	4618      	mov	r0, r3
 80083e6:	68f9      	ldr	r1, [r7, #12]
 80083e8:	f7ff ffb0 	bl	800834c <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f4:	2200      	movs	r2, #0
 80083f6:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3301      	adds	r3, #1
 80083fc:	60fb      	str	r3, [r7, #12]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b03      	cmp	r3, #3
 8008402:	d9cc      	bls.n	800839e <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	7e5b      	ldrb	r3, [r3, #25]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d004      	beq.n	8008416 <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	4618      	mov	r0, r3
 8008412:	f7ff fa8f 	bl	8007934 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	7e1b      	ldrb	r3, [r3, #24]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	3b04      	subs	r3, #4
 8008438:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3b04      	subs	r3, #4
 8008446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	f023 0201 	bic.w	r2, r3, #1
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3b04      	subs	r3, #4
 8008456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008458:	4a0c      	ldr	r2, [pc, #48]	; (800848c <pxPortInitialiseStack+0x64>)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3b14      	subs	r3, #20
 8008462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	3b04      	subs	r3, #4
 800846e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f06f 0202 	mvn.w	r2, #2
 8008476:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	3b20      	subs	r3, #32
 800847c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800847e:	68fb      	ldr	r3, [r7, #12]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	08008491 	.word	0x08008491

08008490 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800849a:	4b10      	ldr	r3, [pc, #64]	; (80084dc <prvTaskExitError+0x4c>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a2:	d009      	beq.n	80084b8 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084a4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	60fb      	str	r3, [r7, #12]
 80084b6:	e7fe      	b.n	80084b6 <prvTaskExitError+0x26>
 80084b8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084ca:	bf00      	nop
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d0fc      	beq.n	80084cc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	20000190 	.word	0x20000190

080084e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084e0:	4b07      	ldr	r3, [pc, #28]	; (8008500 <pxCurrentTCBConst2>)
 80084e2:	6819      	ldr	r1, [r3, #0]
 80084e4:	6808      	ldr	r0, [r1, #0]
 80084e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ea:	f380 8809 	msr	PSP, r0
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f04f 0000 	mov.w	r0, #0
 80084f6:	f380 8811 	msr	BASEPRI, r0
 80084fa:	4770      	bx	lr
 80084fc:	f3af 8000 	nop.w

08008500 <pxCurrentTCBConst2>:
 8008500:	200006bc 	.word	0x200006bc
 8008504:	f3af 8000 	nop.w
 8008508:	f3af 8000 	nop.w
 800850c:	f3af 8000 	nop.w

08008510 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008510:	4808      	ldr	r0, [pc, #32]	; (8008534 <prvPortStartFirstTask+0x24>)
 8008512:	6800      	ldr	r0, [r0, #0]
 8008514:	6800      	ldr	r0, [r0, #0]
 8008516:	f380 8808 	msr	MSP, r0
 800851a:	f04f 0000 	mov.w	r0, #0
 800851e:	f380 8814 	msr	CONTROL, r0
 8008522:	b662      	cpsie	i
 8008524:	b661      	cpsie	f
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	df00      	svc	0
 8008530:	bf00      	nop
 8008532:	0000      	.short	0x0000
 8008534:	e000ed08 	.word	0xe000ed08

08008538 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800853e:	4b44      	ldr	r3, [pc, #272]	; (8008650 <xPortStartScheduler+0x118>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a44      	ldr	r2, [pc, #272]	; (8008654 <xPortStartScheduler+0x11c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d109      	bne.n	800855c <xPortStartScheduler+0x24>
 8008548:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	e7fe      	b.n	800855a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800855c:	4b3c      	ldr	r3, [pc, #240]	; (8008650 <xPortStartScheduler+0x118>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a3d      	ldr	r2, [pc, #244]	; (8008658 <xPortStartScheduler+0x120>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d109      	bne.n	800857a <xPortStartScheduler+0x42>
 8008566:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	e7fe      	b.n	8008578 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800857a:	4b38      	ldr	r3, [pc, #224]	; (800865c <xPortStartScheduler+0x124>)
 800857c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	22ff      	movs	r2, #255	; 0xff
 800858a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	b2db      	uxtb	r3, r3
 8008592:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008594:	78fb      	ldrb	r3, [r7, #3]
 8008596:	b2db      	uxtb	r3, r3
 8008598:	f023 0303 	bic.w	r3, r3, #3
 800859c:	b2da      	uxtb	r2, r3
 800859e:	4b30      	ldr	r3, [pc, #192]	; (8008660 <xPortStartScheduler+0x128>)
 80085a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085a2:	4b30      	ldr	r3, [pc, #192]	; (8008664 <xPortStartScheduler+0x12c>)
 80085a4:	2207      	movs	r2, #7
 80085a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085a8:	e009      	b.n	80085be <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80085aa:	4b2e      	ldr	r3, [pc, #184]	; (8008664 <xPortStartScheduler+0x12c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	4a2c      	ldr	r2, [pc, #176]	; (8008664 <xPortStartScheduler+0x12c>)
 80085b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	70fb      	strb	r3, [r7, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085be:	78fb      	ldrb	r3, [r7, #3]
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	b25b      	sxtb	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	dbef      	blt.n	80085aa <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80085ca:	4b26      	ldr	r3, [pc, #152]	; (8008664 <xPortStartScheduler+0x12c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f1c3 0307 	rsb	r3, r3, #7
 80085d2:	2b06      	cmp	r3, #6
 80085d4:	d009      	beq.n	80085ea <xPortStartScheduler+0xb2>
 80085d6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	60bb      	str	r3, [r7, #8]
 80085e8:	e7fe      	b.n	80085e8 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085ea:	4b1e      	ldr	r3, [pc, #120]	; (8008664 <xPortStartScheduler+0x12c>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	021b      	lsls	r3, r3, #8
 80085f0:	4a1c      	ldr	r2, [pc, #112]	; (8008664 <xPortStartScheduler+0x12c>)
 80085f2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80085f4:	4b1b      	ldr	r3, [pc, #108]	; (8008664 <xPortStartScheduler+0x12c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80085fc:	4a19      	ldr	r2, [pc, #100]	; (8008664 <xPortStartScheduler+0x12c>)
 80085fe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	b2da      	uxtb	r2, r3
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008608:	4a17      	ldr	r2, [pc, #92]	; (8008668 <xPortStartScheduler+0x130>)
 800860a:	4b17      	ldr	r3, [pc, #92]	; (8008668 <xPortStartScheduler+0x130>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f443 037c 	orr.w	r3, r3, #16515072	; 0xfc0000
 8008612:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008614:	4a14      	ldr	r2, [pc, #80]	; (8008668 <xPortStartScheduler+0x130>)
 8008616:	4b14      	ldr	r3, [pc, #80]	; (8008668 <xPortStartScheduler+0x130>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f043 437c 	orr.w	r3, r3, #4227858432	; 0xfc000000
 800861e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008620:	f000 f8d6 	bl	80087d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008624:	4b11      	ldr	r3, [pc, #68]	; (800866c <xPortStartScheduler+0x134>)
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800862a:	f000 f8f3 	bl	8008814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800862e:	4a10      	ldr	r2, [pc, #64]	; (8008670 <xPortStartScheduler+0x138>)
 8008630:	4b0f      	ldr	r3, [pc, #60]	; (8008670 <xPortStartScheduler+0x138>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008638:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800863a:	f7ff ff69 	bl	8008510 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800863e:	f001 fbaf 	bl	8009da0 <vTaskSwitchContext>
	prvTaskExitError();
 8008642:	f7ff ff25 	bl	8008490 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3718      	adds	r7, #24
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	e000ed00 	.word	0xe000ed00
 8008654:	410fc271 	.word	0x410fc271
 8008658:	410fc270 	.word	0x410fc270
 800865c:	e000e400 	.word	0xe000e400
 8008660:	200006b4 	.word	0x200006b4
 8008664:	200006b8 	.word	0x200006b8
 8008668:	e000ed20 	.word	0xe000ed20
 800866c:	20000190 	.word	0x20000190
 8008670:	e000ef34 	.word	0xe000ef34

08008674 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800868c:	4b0e      	ldr	r3, [pc, #56]	; (80086c8 <vPortEnterCritical+0x54>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3301      	adds	r3, #1
 8008692:	4a0d      	ldr	r2, [pc, #52]	; (80086c8 <vPortEnterCritical+0x54>)
 8008694:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008696:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <vPortEnterCritical+0x54>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d10e      	bne.n	80086bc <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800869e:	4b0b      	ldr	r3, [pc, #44]	; (80086cc <vPortEnterCritical+0x58>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d009      	beq.n	80086bc <vPortEnterCritical+0x48>
 80086a8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	603b      	str	r3, [r7, #0]
 80086ba:	e7fe      	b.n	80086ba <vPortEnterCritical+0x46>
	}
}
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	20000190 	.word	0x20000190
 80086cc:	e000ed04 	.word	0xe000ed04

080086d0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086d6:	4b10      	ldr	r3, [pc, #64]	; (8008718 <vPortExitCritical+0x48>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d109      	bne.n	80086f2 <vPortExitCritical+0x22>
 80086de:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	607b      	str	r3, [r7, #4]
 80086f0:	e7fe      	b.n	80086f0 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80086f2:	4b09      	ldr	r3, [pc, #36]	; (8008718 <vPortExitCritical+0x48>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3b01      	subs	r3, #1
 80086f8:	4a07      	ldr	r2, [pc, #28]	; (8008718 <vPortExitCritical+0x48>)
 80086fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80086fc:	4b06      	ldr	r3, [pc, #24]	; (8008718 <vPortExitCritical+0x48>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d104      	bne.n	800870e <vPortExitCritical+0x3e>
 8008704:	2300      	movs	r3, #0
 8008706:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	20000190 	.word	0x20000190
 800871c:	00000000 	.word	0x00000000

08008720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008720:	f3ef 8009 	mrs	r0, PSP
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	4b15      	ldr	r3, [pc, #84]	; (8008780 <pxCurrentTCBConst>)
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	f01e 0f10 	tst.w	lr, #16
 8008730:	bf08      	it	eq
 8008732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873a:	6010      	str	r0, [r2, #0]
 800873c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008740:	f04f 00fc 	mov.w	r0, #252	; 0xfc
 8008744:	f380 8811 	msr	BASEPRI, r0
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f001 fb26 	bl	8009da0 <vTaskSwitchContext>
 8008754:	f04f 0000 	mov.w	r0, #0
 8008758:	f380 8811 	msr	BASEPRI, r0
 800875c:	bc09      	pop	{r0, r3}
 800875e:	6819      	ldr	r1, [r3, #0]
 8008760:	6808      	ldr	r0, [r1, #0]
 8008762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008766:	f01e 0f10 	tst.w	lr, #16
 800876a:	bf08      	it	eq
 800876c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008770:	f380 8809 	msr	PSP, r0
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	f3af 8000 	nop.w

08008780 <pxCurrentTCBConst>:
 8008780:	200006bc 	.word	0x200006bc
 8008784:	f3af 8000 	nop.w
 8008788:	f3af 8000 	nop.w
 800878c:	f3af 8000 	nop.w

08008790 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008796:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087a8:	f001 fa40 	bl	8009c2c <xTaskIncrementTick>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d003      	beq.n	80087ba <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087b2:	4b06      	ldr	r3, [pc, #24]	; (80087cc <SysTick_Handler+0x3c>)
 80087b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	2300      	movs	r3, #0
 80087bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	e000ed04 	.word	0xe000ed04

080087d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087d0:	b480      	push	{r7}
 80087d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087d4:	4b0a      	ldr	r3, [pc, #40]	; (8008800 <vPortSetupTimerInterrupt+0x30>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087da:	4b0a      	ldr	r3, [pc, #40]	; (8008804 <vPortSetupTimerInterrupt+0x34>)
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087e0:	4a09      	ldr	r2, [pc, #36]	; (8008808 <vPortSetupTimerInterrupt+0x38>)
 80087e2:	4b0a      	ldr	r3, [pc, #40]	; (800880c <vPortSetupTimerInterrupt+0x3c>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	490a      	ldr	r1, [pc, #40]	; (8008810 <vPortSetupTimerInterrupt+0x40>)
 80087e8:	fba1 1303 	umull	r1, r3, r1, r3
 80087ec:	099b      	lsrs	r3, r3, #6
 80087ee:	3b01      	subs	r3, #1
 80087f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087f2:	4b03      	ldr	r3, [pc, #12]	; (8008800 <vPortSetupTimerInterrupt+0x30>)
 80087f4:	2207      	movs	r2, #7
 80087f6:	601a      	str	r2, [r3, #0]
}
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	e000e010 	.word	0xe000e010
 8008804:	e000e018 	.word	0xe000e018
 8008808:	e000e014 	.word	0xe000e014
 800880c:	2000ffc0 	.word	0x2000ffc0
 8008810:	10624dd3 	.word	0x10624dd3

08008814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008824 <vPortEnableVFP+0x10>
 8008818:	6801      	ldr	r1, [r0, #0]
 800881a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800881e:	6001      	str	r1, [r0, #0]
 8008820:	4770      	bx	lr
 8008822:	0000      	.short	0x0000
 8008824:	e000ed88 	.word	0xe000ed88

08008828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800882e:	f3ef 8305 	mrs	r3, IPSR
 8008832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b0f      	cmp	r3, #15
 8008838:	d913      	bls.n	8008862 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800883a:	4a15      	ldr	r2, [pc, #84]	; (8008890 <vPortValidateInterruptPriority+0x68>)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4413      	add	r3, r2
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008844:	4b13      	ldr	r3, [pc, #76]	; (8008894 <vPortValidateInterruptPriority+0x6c>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	7afa      	ldrb	r2, [r7, #11]
 800884a:	429a      	cmp	r2, r3
 800884c:	d209      	bcs.n	8008862 <vPortValidateInterruptPriority+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800884e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	607b      	str	r3, [r7, #4]
 8008860:	e7fe      	b.n	8008860 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008862:	4b0d      	ldr	r3, [pc, #52]	; (8008898 <vPortValidateInterruptPriority+0x70>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800886a:	4b0c      	ldr	r3, [pc, #48]	; (800889c <vPortValidateInterruptPriority+0x74>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	429a      	cmp	r2, r3
 8008870:	d909      	bls.n	8008886 <vPortValidateInterruptPriority+0x5e>
 8008872:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	603b      	str	r3, [r7, #0]
 8008884:	e7fe      	b.n	8008884 <vPortValidateInterruptPriority+0x5c>
	}
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	e000e3f0 	.word	0xe000e3f0
 8008894:	200006b4 	.word	0x200006b4
 8008898:	e000ed0c 	.word	0xe000ed0c
 800889c:	200006b8 	.word	0x200006b8

080088a0 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 80088a8:	f001 f904 	bl	8009ab4 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f006 fb71 	bl	800ef94 <malloc>
 80088b2:	4603      	mov	r3, r0
 80088b4:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80088b6:	f001 f90b 	bl	8009ad0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80088ba:	68fb      	ldr	r3, [r7, #12]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
	if( pv )
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d006      	beq.n	80088e0 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 80088d2:	f001 f8ef 	bl	8009ab4 <vTaskSuspendAll>
		{
			free( pv );
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f006 fb64 	bl	800efa4 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 80088dc:	f001 f8f8 	bl	8009ad0 <xTaskResumeAll>
	}
}
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop

080088e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f103 0208 	add.w	r2, r3, #8
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008900:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f103 0208 	add.w	r2, r3, #8
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f103 0208 	add.w	r2, r3, #8
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop

08008928 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	689a      	ldr	r2, [r3, #8]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	601a      	str	r2, [r3, #0]
}
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop

08008988 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899e:	d103      	bne.n	80089a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	60fb      	str	r3, [r7, #12]
 80089a6:	e00c      	b.n	80089c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3308      	adds	r3, #8
 80089ac:	60fb      	str	r3, [r7, #12]
 80089ae:	e002      	b.n	80089b6 <vListInsert+0x2e>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d9f6      	bls.n	80089b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	601a      	str	r2, [r3, #0]
}
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	6892      	ldr	r2, [r2, #8]
 8008a0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	6852      	ldr	r2, [r2, #4]
 8008a18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d103      	bne.n	8008a2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	689a      	ldr	r2, [r3, #8]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	1e5a      	subs	r2, r3, #1
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d109      	bne.n	8008a74 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a60:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	60bb      	str	r3, [r7, #8]
 8008a72:	e7fe      	b.n	8008a72 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008a74:	f7ff fdfe 	bl	8008674 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a80:	68f9      	ldr	r1, [r7, #12]
 8008a82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a84:	fb01 f303 	mul.w	r3, r1, r3
 8008a88:	441a      	add	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	68f9      	ldr	r1, [r7, #12]
 8008aa8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008aaa:	fb01 f303 	mul.w	r3, r1, r3
 8008aae:	441a      	add	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	22ff      	movs	r2, #255	; 0xff
 8008ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	22ff      	movs	r2, #255	; 0xff
 8008ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d114      	bne.n	8008af4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d01a      	beq.n	8008b08 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3310      	adds	r3, #16
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f001 fa08 	bl	8009eec <xTaskRemoveFromEventList>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d012      	beq.n	8008b08 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008ae2:	4b0d      	ldr	r3, [pc, #52]	; (8008b18 <xQueueGenericReset+0xcc>)
 8008ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	e009      	b.n	8008b08 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	3310      	adds	r3, #16
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7ff fef5 	bl	80088e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	3324      	adds	r3, #36	; 0x24
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7ff fef0 	bl	80088e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b08:	f7ff fde2 	bl	80086d0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b0c:	2301      	movs	r3, #1
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	e000ed04 	.word	0xe000ed04

08008b1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008b1c:	b590      	push	{r4, r7, lr}
 8008b1e:	b08b      	sub	sp, #44	; 0x2c
 8008b20:	af02      	add	r7, sp, #8
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	4613      	mov	r3, r2
 8008b28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d109      	bne.n	8008b44 <xQueueGenericCreate+0x28>
 8008b30:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	613b      	str	r3, [r7, #16]
 8008b42:	e7fe      	b.n	8008b42 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d102      	bne.n	8008b50 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	61fb      	str	r3, [r7, #28]
 8008b4e:	e004      	b.n	8008b5a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	fb02 f303 	mul.w	r3, r2, r3
 8008b58:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	3354      	adds	r3, #84	; 0x54
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7ff fe9e 	bl	80088a0 <pvPortMalloc>
 8008b64:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00d      	beq.n	8008b88 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	3354      	adds	r3, #84	; 0x54
 8008b74:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b76:	79fc      	ldrb	r4, [r7, #7]
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	68b9      	ldr	r1, [r7, #8]
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	4623      	mov	r3, r4
 8008b84:	f000 f806 	bl	8008b94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b88:	69bb      	ldr	r3, [r7, #24]
	}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3724      	adds	r7, #36	; 0x24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd90      	pop	{r4, r7, pc}
 8008b92:	bf00      	nop

08008b94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
 8008ba0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d103      	bne.n	8008bb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	69ba      	ldr	r2, [r7, #24]
 8008bac:	601a      	str	r2, [r3, #0]
 8008bae:	e002      	b.n	8008bb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008bc2:	69b8      	ldr	r0, [r7, #24]
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	f7ff ff41 	bl	8008a4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	78fa      	ldrb	r2, [r7, #3]
 8008bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop

08008be0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b08e      	sub	sp, #56	; 0x38
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
 8008bec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d109      	bne.n	8008c10 <xQueueGenericSend+0x30>
 8008bfc:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c0e:	e7fe      	b.n	8008c0e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d103      	bne.n	8008c1e <xQueueGenericSend+0x3e>
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <xQueueGenericSend+0x42>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e000      	b.n	8008c24 <xQueueGenericSend+0x44>
 8008c22:	2300      	movs	r3, #0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d109      	bne.n	8008c3c <xQueueGenericSend+0x5c>
 8008c28:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	623b      	str	r3, [r7, #32]
 8008c3a:	e7fe      	b.n	8008c3a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d103      	bne.n	8008c4a <xQueueGenericSend+0x6a>
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d101      	bne.n	8008c4e <xQueueGenericSend+0x6e>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e000      	b.n	8008c50 <xQueueGenericSend+0x70>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d109      	bne.n	8008c68 <xQueueGenericSend+0x88>
 8008c54:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	61fb      	str	r3, [r7, #28]
 8008c66:	e7fe      	b.n	8008c66 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c68:	f001 fae8 	bl	800a23c <xTaskGetSchedulerState>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d102      	bne.n	8008c78 <xQueueGenericSend+0x98>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d101      	bne.n	8008c7c <xQueueGenericSend+0x9c>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e000      	b.n	8008c7e <xQueueGenericSend+0x9e>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d109      	bne.n	8008c96 <xQueueGenericSend+0xb6>
 8008c82:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	61bb      	str	r3, [r7, #24]
 8008c94:	e7fe      	b.n	8008c94 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c96:	f7ff fced 	bl	8008674 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d302      	bcc.n	8008cac <xQueueGenericSend+0xcc>
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d148      	bne.n	8008d3e <xQueueGenericSend+0x15e>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb0:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008cb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cb4:	68b9      	ldr	r1, [r7, #8]
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	f000 fa36 	bl	8009128 <prvCopyDataToQueue>
 8008cbc:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d017      	beq.n	8008cf6 <xQueueGenericSend+0x116>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d104      	bne.n	8008cd6 <xQueueGenericSend+0xf6>
 8008ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <xQueueGenericSend+0xf6>
 8008cd2:	bf00      	nop
 8008cd4:	e02f      	b.n	8008d36 <xQueueGenericSend+0x156>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8008cd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	f000 fba3 	bl	8009424 <prvNotifyQueueSetContainer>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d028      	beq.n	8008d36 <xQueueGenericSend+0x156>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ce4:	4b4c      	ldr	r3, [pc, #304]	; (8008e18 <xQueueGenericSend+0x238>)
 8008ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	f3bf 8f6f 	isb	sy
 8008cf4:	e01f      	b.n	8008d36 <xQueueGenericSend+0x156>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d010      	beq.n	8008d20 <xQueueGenericSend+0x140>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d00:	3324      	adds	r3, #36	; 0x24
 8008d02:	4618      	mov	r0, r3
 8008d04:	f001 f8f2 	bl	8009eec <xTaskRemoveFromEventList>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d013      	beq.n	8008d36 <xQueueGenericSend+0x156>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8008d0e:	4b42      	ldr	r3, [pc, #264]	; (8008e18 <xQueueGenericSend+0x238>)
 8008d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	e00a      	b.n	8008d36 <xQueueGenericSend+0x156>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8008d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d007      	beq.n	8008d36 <xQueueGenericSend+0x156>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d26:	4b3c      	ldr	r3, [pc, #240]	; (8008e18 <xQueueGenericSend+0x238>)
 8008d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d36:	f7ff fccb 	bl	80086d0 <vPortExitCritical>
				return pdPASS;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e067      	b.n	8008e0e <xQueueGenericSend+0x22e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d103      	bne.n	8008d4c <xQueueGenericSend+0x16c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d44:	f7ff fcc4 	bl	80086d0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	e060      	b.n	8008e0e <xQueueGenericSend+0x22e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d106      	bne.n	8008d60 <xQueueGenericSend+0x180>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d52:	f107 0310 	add.w	r3, r7, #16
 8008d56:	4618      	mov	r0, r3
 8008d58:	f001 f92c 	bl	8009fb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d60:	f7ff fcb6 	bl	80086d0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d64:	f000 fea6 	bl	8009ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d68:	f7ff fc84 	bl	8008674 <vPortEnterCritical>
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	b25b      	sxtb	r3, r3
 8008d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7a:	d103      	bne.n	8008d84 <xQueueGenericSend+0x1a4>
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	b25b      	sxtb	r3, r3
 8008d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d92:	d103      	bne.n	8008d9c <xQueueGenericSend+0x1bc>
 8008d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d9c:	f7ff fc98 	bl	80086d0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008da0:	f107 0210 	add.w	r2, r7, #16
 8008da4:	1d3b      	adds	r3, r7, #4
 8008da6:	4610      	mov	r0, r2
 8008da8:	4619      	mov	r1, r3
 8008daa:	f001 f919 	bl	8009fe0 <xTaskCheckForTimeOut>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d124      	bne.n	8008dfe <xQueueGenericSend+0x21e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008db6:	f000 fabf 	bl	8009338 <prvIsQueueFull>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d018      	beq.n	8008df2 <xQueueGenericSend+0x212>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc2:	f103 0210 	add.w	r2, r3, #16
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4610      	mov	r0, r2
 8008dca:	4619      	mov	r1, r3
 8008dcc:	f001 f842 	bl	8009e54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dd2:	f000 fa3b 	bl	800924c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008dd6:	f000 fe7b 	bl	8009ad0 <xTaskResumeAll>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d115      	bne.n	8008e0c <xQueueGenericSend+0x22c>
				{
					portYIELD_WITHIN_API();
 8008de0:	4b0d      	ldr	r3, [pc, #52]	; (8008e18 <xQueueGenericSend+0x238>)
 8008de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	e00c      	b.n	8008e0c <xQueueGenericSend+0x22c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008df2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008df4:	f000 fa2a 	bl	800924c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008df8:	f000 fe6a 	bl	8009ad0 <xTaskResumeAll>
 8008dfc:	e74b      	b.n	8008c96 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008dfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e00:	f000 fa24 	bl	800924c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e04:	f000 fe64 	bl	8009ad0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	e000      	b.n	8008e0e <xQueueGenericSend+0x22e>
		}
	} /*lint -restore */
 8008e0c:	e743      	b.n	8008c96 <xQueueGenericSend+0xb6>
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3738      	adds	r7, #56	; 0x38
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	e000ed04 	.word	0xe000ed04

08008e1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b08e      	sub	sp, #56	; 0x38
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
 8008e28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d109      	bne.n	8008e48 <xQueueGenericSendFromISR+0x2c>
 8008e34:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	627b      	str	r3, [r7, #36]	; 0x24
 8008e46:	e7fe      	b.n	8008e46 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d103      	bne.n	8008e56 <xQueueGenericSendFromISR+0x3a>
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d101      	bne.n	8008e5a <xQueueGenericSendFromISR+0x3e>
 8008e56:	2301      	movs	r3, #1
 8008e58:	e000      	b.n	8008e5c <xQueueGenericSendFromISR+0x40>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d109      	bne.n	8008e74 <xQueueGenericSendFromISR+0x58>
 8008e60:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	623b      	str	r3, [r7, #32]
 8008e72:	e7fe      	b.n	8008e72 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d103      	bne.n	8008e82 <xQueueGenericSendFromISR+0x66>
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d101      	bne.n	8008e86 <xQueueGenericSendFromISR+0x6a>
 8008e82:	2301      	movs	r3, #1
 8008e84:	e000      	b.n	8008e88 <xQueueGenericSendFromISR+0x6c>
 8008e86:	2300      	movs	r3, #0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d109      	bne.n	8008ea0 <xQueueGenericSendFromISR+0x84>
 8008e8c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008e90:	f383 8811 	msr	BASEPRI, r3
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	61fb      	str	r3, [r7, #28]
 8008e9e:	e7fe      	b.n	8008e9e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ea0:	f7ff fcc2 	bl	8008828 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ea4:	f3ef 8211 	mrs	r2, BASEPRI
 8008ea8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	61ba      	str	r2, [r7, #24]
 8008eba:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ebc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d302      	bcc.n	8008ed2 <xQueueGenericSendFromISR+0xb6>
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d13e      	bne.n	8008f50 <xQueueGenericSendFromISR+0x134>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ede:	68b9      	ldr	r1, [r7, #8]
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	f000 f921 	bl	8009128 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ee6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eee:	d124      	bne.n	8008f3a <xQueueGenericSendFromISR+0x11e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00d      	beq.n	8008f14 <xQueueGenericSendFromISR+0xf8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8008ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	f000 fa92 	bl	8009424 <prvNotifyQueueSetContainer>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d021      	beq.n	8008f4a <xQueueGenericSendFromISR+0x12e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d01e      	beq.n	8008f4a <xQueueGenericSendFromISR+0x12e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	601a      	str	r2, [r3, #0]
 8008f12:	e01a      	b.n	8008f4a <xQueueGenericSendFromISR+0x12e>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d016      	beq.n	8008f4a <xQueueGenericSendFromISR+0x12e>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1e:	3324      	adds	r3, #36	; 0x24
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 ffe3 	bl	8009eec <xTaskRemoveFromEventList>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00e      	beq.n	8008f4a <xQueueGenericSendFromISR+0x12e>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00b      	beq.n	8008f4a <xQueueGenericSendFromISR+0x12e>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	e007      	b.n	8008f4a <xQueueGenericSendFromISR+0x12e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f3e:	3301      	adds	r3, #1
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	637b      	str	r3, [r7, #52]	; 0x34
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 8008f4e:	e001      	b.n	8008f54 <xQueueGenericSendFromISR+0x138>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f50:	2300      	movs	r3, #0
 8008f52:	637b      	str	r3, [r7, #52]	; 0x34
 8008f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f56:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3738      	adds	r7, #56	; 0x38
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b08c      	sub	sp, #48	; 0x30
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f74:	2300      	movs	r3, #0
 8008f76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d109      	bne.n	8008f96 <xQueueReceive+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008f82:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	623b      	str	r3, [r7, #32]
 8008f94:	e7fe      	b.n	8008f94 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d103      	bne.n	8008fa4 <xQueueReceive+0x3c>
 8008f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <xQueueReceive+0x40>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e000      	b.n	8008faa <xQueueReceive+0x42>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d109      	bne.n	8008fc2 <xQueueReceive+0x5a>
 8008fae:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	61fb      	str	r3, [r7, #28]
 8008fc0:	e7fe      	b.n	8008fc0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fc2:	f001 f93b 	bl	800a23c <xTaskGetSchedulerState>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d102      	bne.n	8008fd2 <xQueueReceive+0x6a>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <xQueueReceive+0x6e>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e000      	b.n	8008fd8 <xQueueReceive+0x70>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d109      	bne.n	8008ff0 <xQueueReceive+0x88>
 8008fdc:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	61bb      	str	r3, [r7, #24]
 8008fee:	e7fe      	b.n	8008fee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ff0:	f7ff fb40 	bl	8008674 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d01f      	beq.n	8009040 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009002:	68b9      	ldr	r1, [r7, #8]
 8009004:	f000 f8fc 	bl	8009200 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	1e5a      	subs	r2, r3, #1
 800900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00f      	beq.n	8009038 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901a:	3310      	adds	r3, #16
 800901c:	4618      	mov	r0, r3
 800901e:	f000 ff65 	bl	8009eec <xTaskRemoveFromEventList>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d007      	beq.n	8009038 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009028:	4b3e      	ldr	r3, [pc, #248]	; (8009124 <xQueueReceive+0x1bc>)
 800902a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800902e:	601a      	str	r2, [r3, #0]
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009038:	f7ff fb4a 	bl	80086d0 <vPortExitCritical>
				return pdPASS;
 800903c:	2301      	movs	r3, #1
 800903e:	e06d      	b.n	800911c <xQueueReceive+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d103      	bne.n	800904e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009046:	f7ff fb43 	bl	80086d0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800904a:	2300      	movs	r3, #0
 800904c:	e066      	b.n	800911c <xQueueReceive+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800904e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009050:	2b00      	cmp	r3, #0
 8009052:	d106      	bne.n	8009062 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009054:	f107 0310 	add.w	r3, r7, #16
 8009058:	4618      	mov	r0, r3
 800905a:	f000 ffab 	bl	8009fb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800905e:	2301      	movs	r3, #1
 8009060:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009062:	f7ff fb35 	bl	80086d0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009066:	f000 fd25 	bl	8009ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800906a:	f7ff fb03 	bl	8008674 <vPortEnterCritical>
 800906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009074:	b2db      	uxtb	r3, r3
 8009076:	b25b      	sxtb	r3, r3
 8009078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907c:	d103      	bne.n	8009086 <xQueueReceive+0x11e>
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	2200      	movs	r2, #0
 8009082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800908c:	b2db      	uxtb	r3, r3
 800908e:	b25b      	sxtb	r3, r3
 8009090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009094:	d103      	bne.n	800909e <xQueueReceive+0x136>
 8009096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009098:	2200      	movs	r2, #0
 800909a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800909e:	f7ff fb17 	bl	80086d0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090a2:	f107 0210 	add.w	r2, r7, #16
 80090a6:	1d3b      	adds	r3, r7, #4
 80090a8:	4610      	mov	r0, r2
 80090aa:	4619      	mov	r1, r3
 80090ac:	f000 ff98 	bl	8009fe0 <xTaskCheckForTimeOut>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d124      	bne.n	8009100 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090b8:	f000 f928 	bl	800930c <prvIsQueueEmpty>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d018      	beq.n	80090f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80090c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4610      	mov	r0, r2
 80090cc:	4619      	mov	r1, r3
 80090ce:	f000 fec1 	bl	8009e54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80090d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090d4:	f000 f8ba 	bl	800924c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090d8:	f000 fcfa 	bl	8009ad0 <xTaskResumeAll>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d11b      	bne.n	800911a <xQueueReceive+0x1b2>
				{
					portYIELD_WITHIN_API();
 80090e2:	4b10      	ldr	r3, [pc, #64]	; (8009124 <xQueueReceive+0x1bc>)
 80090e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090e8:	601a      	str	r2, [r3, #0]
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	e012      	b.n	800911a <xQueueReceive+0x1b2>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80090f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090f6:	f000 f8a9 	bl	800924c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090fa:	f000 fce9 	bl	8009ad0 <xTaskResumeAll>
 80090fe:	e777      	b.n	8008ff0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009102:	f000 f8a3 	bl	800924c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009106:	f000 fce3 	bl	8009ad0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800910a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800910c:	f000 f8fe 	bl	800930c <prvIsQueueEmpty>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <xQueueReceive+0x1b2>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009116:	2300      	movs	r3, #0
 8009118:	e000      	b.n	800911c <xQueueReceive+0x1b4>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
 800911a:	e769      	b.n	8008ff0 <xQueueReceive+0x88>
}
 800911c:	4618      	mov	r0, r3
 800911e:	3730      	adds	r7, #48	; 0x30
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	e000ed04 	.word	0xe000ed04

08009128 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009134:	2300      	movs	r3, #0
 8009136:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10d      	bne.n	8009162 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d14f      	bne.n	80091ee <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	4618      	mov	r0, r3
 8009154:	f001 f890 	bl	800a278 <xTaskPriorityDisinherit>
 8009158:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	609a      	str	r2, [r3, #8]
 8009160:	e045      	b.n	80091ee <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d11a      	bne.n	800919e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009170:	4610      	mov	r0, r2
 8009172:	68b9      	ldr	r1, [r7, #8]
 8009174:	461a      	mov	r2, r3
 8009176:	f005 ff1d 	bl	800efb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009182:	441a      	add	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	429a      	cmp	r2, r3
 8009192:	d32c      	bcc.n	80091ee <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	605a      	str	r2, [r3, #4]
 800919c:	e027      	b.n	80091ee <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	68da      	ldr	r2, [r3, #12]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a6:	4610      	mov	r0, r2
 80091a8:	68b9      	ldr	r1, [r7, #8]
 80091aa:	461a      	mov	r2, r3
 80091ac:	f005 ff02 	bl	800efb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	68da      	ldr	r2, [r3, #12]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b8:	425b      	negs	r3, r3
 80091ba:	441a      	add	r2, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	68da      	ldr	r2, [r3, #12]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d207      	bcs.n	80091dc <prvCopyDataToQueue+0xb4>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d4:	425b      	negs	r3, r3
 80091d6:	441a      	add	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d105      	bne.n	80091ee <prvCopyDataToQueue+0xc6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	3b01      	subs	r3, #1
 80091ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	1c5a      	adds	r2, r3, #1
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80091f6:	697b      	ldr	r3, [r7, #20]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920e:	2b00      	cmp	r3, #0
 8009210:	d019      	beq.n	8009246 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68da      	ldr	r2, [r3, #12]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921a:	441a      	add	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	68da      	ldr	r2, [r3, #12]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	429a      	cmp	r2, r3
 800922a:	d303      	bcc.n	8009234 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68da      	ldr	r2, [r3, #12]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923c:	6838      	ldr	r0, [r7, #0]
 800923e:	4611      	mov	r1, r2
 8009240:	461a      	mov	r2, r3
 8009242:	f005 feb7 	bl	800efb4 <memcpy>
	}
}
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009254:	f7ff fa0e 	bl	8008674 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800925e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009260:	e021      	b.n	80092a6 <prvUnlockQueue+0x5a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009266:	2b00      	cmp	r3, #0
 8009268:	d009      	beq.n	800927e <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	2100      	movs	r1, #0
 800926e:	f000 f8d9 	bl	8009424 <prvNotifyQueueSetContainer>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d012      	beq.n	800929e <prvUnlockQueue+0x52>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8009278:	f000 ff22 	bl	800a0c0 <vTaskMissedYield>
 800927c:	e00f      	b.n	800929e <prvUnlockQueue+0x52>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00a      	beq.n	800929c <prvUnlockQueue+0x50>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	3324      	adds	r3, #36	; 0x24
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fe2e 	bl	8009eec <xTaskRemoveFromEventList>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d003      	beq.n	800929e <prvUnlockQueue+0x52>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8009296:	f000 ff13 	bl	800a0c0 <vTaskMissedYield>
 800929a:	e000      	b.n	800929e <prvUnlockQueue+0x52>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
 800929c:	e007      	b.n	80092ae <prvUnlockQueue+0x62>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800929e:	7bfb      	ldrb	r3, [r7, #15]
 80092a0:	3b01      	subs	r3, #1
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	dcd9      	bgt.n	8009262 <prvUnlockQueue+0x16>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	22ff      	movs	r2, #255	; 0xff
 80092b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80092b6:	f7ff fa0b 	bl	80086d0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80092ba:	f7ff f9db 	bl	8008674 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092c6:	e013      	b.n	80092f0 <prvUnlockQueue+0xa4>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00e      	beq.n	80092ee <prvUnlockQueue+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3310      	adds	r3, #16
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 fe09 	bl	8009eec <xTaskRemoveFromEventList>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d001      	beq.n	80092e4 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 80092e0:	f000 feee 	bl	800a0c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80092e4:	7bbb      	ldrb	r3, [r7, #14]
 80092e6:	3b01      	subs	r3, #1
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	73bb      	strb	r3, [r7, #14]
 80092ec:	e000      	b.n	80092f0 <prvUnlockQueue+0xa4>
			}
			else
			{
				break;
 80092ee:	e003      	b.n	80092f8 <prvUnlockQueue+0xac>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dce7      	bgt.n	80092c8 <prvUnlockQueue+0x7c>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	22ff      	movs	r2, #255	; 0xff
 80092fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009300:	f7ff f9e6 	bl	80086d0 <vPortExitCritical>
}
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop

0800930c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009314:	f7ff f9ae 	bl	8008674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009320:	2301      	movs	r3, #1
 8009322:	60fb      	str	r3, [r7, #12]
 8009324:	e001      	b.n	800932a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009326:	2300      	movs	r3, #0
 8009328:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800932a:	f7ff f9d1 	bl	80086d0 <vPortExitCritical>

	return xReturn;
 800932e:	68fb      	ldr	r3, [r7, #12]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009340:	f7ff f998 	bl	8008674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800934c:	429a      	cmp	r2, r3
 800934e:	d102      	bne.n	8009356 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009350:	2301      	movs	r3, #1
 8009352:	60fb      	str	r3, [r7, #12]
 8009354:	e001      	b.n	800935a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009356:	2300      	movs	r3, #0
 8009358:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800935a:	f7ff f9b9 	bl	80086d0 <vPortExitCritical>

	return xReturn;
 800935e:	68fb      	ldr	r3, [r7, #12]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009372:	2300      	movs	r3, #0
 8009374:	60fb      	str	r3, [r7, #12]
 8009376:	e014      	b.n	80093a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009378:	4a0e      	ldr	r2, [pc, #56]	; (80093b4 <vQueueAddToRegistry+0x4c>)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10b      	bne.n	800939c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009384:	490b      	ldr	r1, [pc, #44]	; (80093b4 <vQueueAddToRegistry+0x4c>)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	683a      	ldr	r2, [r7, #0]
 800938a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800938e:	4a09      	ldr	r2, [pc, #36]	; (80093b4 <vQueueAddToRegistry+0x4c>)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	00db      	lsls	r3, r3, #3
 8009394:	4413      	add	r3, r2
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800939a:	e005      	b.n	80093a8 <vQueueAddToRegistry+0x40>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	3301      	adds	r3, #1
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2b07      	cmp	r3, #7
 80093a6:	d9e7      	bls.n	8009378 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	200011cc 	.word	0x200011cc

080093b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80093c8:	f7ff f954 	bl	8008674 <vPortEnterCritical>
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	b25b      	sxtb	r3, r3
 80093d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093da:	d103      	bne.n	80093e4 <vQueueWaitForMessageRestricted+0x2c>
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	b25b      	sxtb	r3, r3
 80093ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f2:	d103      	bne.n	80093fc <vQueueWaitForMessageRestricted+0x44>
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093fc:	f7ff f968 	bl	80086d0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009404:	2b00      	cmp	r3, #0
 8009406:	d106      	bne.n	8009416 <vQueueWaitForMessageRestricted+0x5e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	3324      	adds	r3, #36	; 0x24
 800940c:	4618      	mov	r0, r3
 800940e:	68b9      	ldr	r1, [r7, #8]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	f000 fd41 	bl	8009e98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009416:	6978      	ldr	r0, [r7, #20]
 8009418:	f7ff ff18 	bl	800924c <prvUnlockQueue>
	}
 800941c:	3718      	adds	r7, #24
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop

08009424 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8009424:	b580      	push	{r7, lr}
 8009426:	b088      	sub	sp, #32
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009432:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8009434:	2300      	movs	r3, #0
 8009436:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d109      	bne.n	8009452 <prvNotifyQueueSetContainer+0x2e>
 800943e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	613b      	str	r3, [r7, #16]
 8009450:	e7fe      	b.n	8009450 <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945a:	429a      	cmp	r2, r3
 800945c:	d309      	bcc.n	8009472 <prvNotifyQueueSetContainer+0x4e>
 800945e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009462:	f383 8811 	msr	BASEPRI, r3
 8009466:	f3bf 8f6f 	isb	sy
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	e7fe      	b.n	8009470 <prvNotifyQueueSetContainer+0x4c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947a:	429a      	cmp	r2, r3
 800947c:	d226      	bcs.n	80094cc <prvNotifyQueueSetContainer+0xa8>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009484:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 8009486:	1d3b      	adds	r3, r7, #4
 8009488:	69b8      	ldr	r0, [r7, #24]
 800948a:	4619      	mov	r1, r3
 800948c:	683a      	ldr	r2, [r7, #0]
 800948e:	f7ff fe4b 	bl	8009128 <prvCopyDataToQueue>
 8009492:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8009494:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800949c:	d10e      	bne.n	80094bc <prvNotifyQueueSetContainer+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d012      	beq.n	80094cc <prvNotifyQueueSetContainer+0xa8>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	3324      	adds	r3, #36	; 0x24
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 fd1e 	bl	8009eec <xTaskRemoveFromEventList>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00a      	beq.n	80094cc <prvNotifyQueueSetContainer+0xa8>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80094b6:	2301      	movs	r3, #1
 80094b8:	61fb      	str	r3, [r7, #28]
 80094ba:	e007      	b.n	80094cc <prvNotifyQueueSetContainer+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80094bc:	7dfb      	ldrb	r3, [r7, #23]
 80094be:	3301      	adds	r3, #1
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094ca:	e7ff      	b.n	80094cc <prvNotifyQueueSetContainer+0xa8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094cc:	69fb      	ldr	r3, [r7, #28]
	}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3720      	adds	r7, #32
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop

080094d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08c      	sub	sp, #48	; 0x30
 80094dc:	af04      	add	r7, sp, #16
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	603b      	str	r3, [r7, #0]
 80094e4:	4613      	mov	r3, r2
 80094e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80094e8:	88fb      	ldrh	r3, [r7, #6]
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7ff f9d7 	bl	80088a0 <pvPortMalloc>
 80094f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00e      	beq.n	8009518 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80094fa:	2070      	movs	r0, #112	; 0x70
 80094fc:	f7ff f9d0 	bl	80088a0 <pvPortMalloc>
 8009500:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d003      	beq.n	8009510 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	631a      	str	r2, [r3, #48]	; 0x30
 800950e:	e005      	b.n	800951c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009510:	6978      	ldr	r0, [r7, #20]
 8009512:	f7ff f9d7 	bl	80088c4 <vPortFree>
 8009516:	e001      	b.n	800951c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009518:	2300      	movs	r3, #0
 800951a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d013      	beq.n	800954a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009522:	88fa      	ldrh	r2, [r7, #6]
 8009524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952a:	9301      	str	r3, [sp, #4]
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	9302      	str	r3, [sp, #8]
 8009530:	2300      	movs	r3, #0
 8009532:	9303      	str	r3, [sp, #12]
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	68b9      	ldr	r1, [r7, #8]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	f000 f80f 	bl	800955c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800953e:	69f8      	ldr	r0, [r7, #28]
 8009540:	f000 f8ae 	bl	80096a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009544:	2301      	movs	r3, #1
 8009546:	61bb      	str	r3, [r7, #24]
 8009548:	e002      	b.n	8009550 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800954a:	f04f 33ff 	mov.w	r3, #4294967295
 800954e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009550:	69bb      	ldr	r3, [r7, #24]
	}
 8009552:	4618      	mov	r0, r3
 8009554:	3720      	adds	r7, #32
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop

0800955c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b088      	sub	sp, #32
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
 8009568:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800956a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4610      	mov	r0, r2
 8009574:	21a5      	movs	r1, #165	; 0xa5
 8009576:	461a      	mov	r2, r3
 8009578:	f005 fd27 	bl	800efca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800957c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009586:	3b01      	subs	r3, #1
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	f023 0307 	bic.w	r3, r3, #7
 8009594:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	f003 0307 	and.w	r3, r3, #7
 800959c:	2b00      	cmp	r3, #0
 800959e:	d009      	beq.n	80095b4 <prvInitialiseNewTask+0x58>
 80095a0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	617b      	str	r3, [r7, #20]
 80095b2:	e7fe      	b.n	80095b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d01e      	beq.n	80095f8 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095ba:	2300      	movs	r3, #0
 80095bc:	61fb      	str	r3, [r7, #28]
 80095be:	e013      	b.n	80095e8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	4413      	add	r3, r2
 80095c6:	7819      	ldrb	r1, [r3, #0]
 80095c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	4413      	add	r3, r2
 80095ce:	3330      	adds	r3, #48	; 0x30
 80095d0:	460a      	mov	r2, r1
 80095d2:	711a      	strb	r2, [r3, #4]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	4413      	add	r3, r2
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d100      	bne.n	80095e2 <prvInitialiseNewTask+0x86>
			{
				break;
 80095e0:	e005      	b.n	80095ee <prvInitialiseNewTask+0x92>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	3301      	adds	r3, #1
 80095e6:	61fb      	str	r3, [r7, #28]
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	2b0f      	cmp	r3, #15
 80095ec:	d9e8      	bls.n	80095c0 <prvInitialiseNewTask+0x64>
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80095ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095f6:	e003      	b.n	8009600 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80095f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009602:	2b05      	cmp	r3, #5
 8009604:	d901      	bls.n	800960a <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009606:	2305      	movs	r3, #5
 8009608:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800960a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800960e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009614:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009618:	2200      	movs	r2, #0
 800961a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961e:	3304      	adds	r3, #4
 8009620:	4618      	mov	r0, r3
 8009622:	f7ff f981 	bl	8008928 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	3318      	adds	r3, #24
 800962a:	4618      	mov	r0, r3
 800962c:	f7ff f97c 	bl	8008928 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009634:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	f1c3 0206 	rsb	r2, r3, #6
 800963c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009644:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8009646:	2300      	movs	r3, #0
 8009648:	61fb      	str	r3, [r7, #28]
 800964a:	e009      	b.n	8009660 <prvInitialiseNewTask+0x104>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 800964c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	3314      	adds	r3, #20
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4413      	add	r3, r2
 8009656:	2200      	movs	r2, #0
 8009658:	605a      	str	r2, [r3, #4]
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	3301      	adds	r3, #1
 800965e:	61fb      	str	r3, [r7, #28]
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	2b04      	cmp	r3, #4
 8009664:	d9f2      	bls.n	800964c <prvInitialiseNewTask+0xf0>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	2200      	movs	r2, #0
 800966a:	669a      	str	r2, [r3, #104]	; 0x68
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800966c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966e:	2200      	movs	r2, #0
 8009670:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8009674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009676:	2200      	movs	r2, #0
 8009678:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800967c:	69b8      	ldr	r0, [r7, #24]
 800967e:	68f9      	ldr	r1, [r7, #12]
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	f7fe fed1 	bl	8008428 <pxPortInitialiseStack>
 8009686:	4602      	mov	r2, r0
 8009688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800968c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968e:	2b00      	cmp	r3, #0
 8009690:	d002      	beq.n	8009698 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009696:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009698:	3720      	adds	r7, #32
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop

080096a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80096a8:	f7fe ffe4 	bl	8008674 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80096ac:	4b2d      	ldr	r3, [pc, #180]	; (8009764 <prvAddNewTaskToReadyList+0xc4>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3301      	adds	r3, #1
 80096b2:	4a2c      	ldr	r2, [pc, #176]	; (8009764 <prvAddNewTaskToReadyList+0xc4>)
 80096b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80096b6:	4b2c      	ldr	r3, [pc, #176]	; (8009768 <prvAddNewTaskToReadyList+0xc8>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d109      	bne.n	80096d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80096be:	4a2a      	ldr	r2, [pc, #168]	; (8009768 <prvAddNewTaskToReadyList+0xc8>)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80096c4:	4b27      	ldr	r3, [pc, #156]	; (8009764 <prvAddNewTaskToReadyList+0xc4>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d110      	bne.n	80096ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80096cc:	f000 fd1c 	bl	800a108 <prvInitialiseTaskLists>
 80096d0:	e00d      	b.n	80096ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80096d2:	4b26      	ldr	r3, [pc, #152]	; (800976c <prvAddNewTaskToReadyList+0xcc>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d109      	bne.n	80096ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80096da:	4b23      	ldr	r3, [pc, #140]	; (8009768 <prvAddNewTaskToReadyList+0xc8>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d802      	bhi.n	80096ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80096e8:	4a1f      	ldr	r2, [pc, #124]	; (8009768 <prvAddNewTaskToReadyList+0xc8>)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80096ee:	4b20      	ldr	r3, [pc, #128]	; (8009770 <prvAddNewTaskToReadyList+0xd0>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3301      	adds	r3, #1
 80096f4:	4a1e      	ldr	r2, [pc, #120]	; (8009770 <prvAddNewTaskToReadyList+0xd0>)
 80096f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80096f8:	4b1d      	ldr	r3, [pc, #116]	; (8009770 <prvAddNewTaskToReadyList+0xd0>)
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	461a      	mov	r2, r3
 8009706:	2301      	movs	r3, #1
 8009708:	fa03 f202 	lsl.w	r2, r3, r2
 800970c:	4b19      	ldr	r3, [pc, #100]	; (8009774 <prvAddNewTaskToReadyList+0xd4>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4313      	orrs	r3, r2
 8009712:	4a18      	ldr	r2, [pc, #96]	; (8009774 <prvAddNewTaskToReadyList+0xd4>)
 8009714:	6013      	str	r3, [r2, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971a:	4613      	mov	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4a15      	ldr	r2, [pc, #84]	; (8009778 <prvAddNewTaskToReadyList+0xd8>)
 8009724:	441a      	add	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	3304      	adds	r3, #4
 800972a:	4610      	mov	r0, r2
 800972c:	4619      	mov	r1, r3
 800972e:	f7ff f907 	bl	8008940 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009732:	f7fe ffcd 	bl	80086d0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009736:	4b0d      	ldr	r3, [pc, #52]	; (800976c <prvAddNewTaskToReadyList+0xcc>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00e      	beq.n	800975c <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800973e:	4b0a      	ldr	r3, [pc, #40]	; (8009768 <prvAddNewTaskToReadyList+0xc8>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009748:	429a      	cmp	r2, r3
 800974a:	d207      	bcs.n	800975c <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800974c:	4b0b      	ldr	r3, [pc, #44]	; (800977c <prvAddNewTaskToReadyList+0xdc>)
 800974e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	200007a8 	.word	0x200007a8
 8009768:	200006bc 	.word	0x200006bc
 800976c:	200007b4 	.word	0x200007b4
 8009770:	200007c4 	.word	0x200007c4
 8009774:	200007b0 	.word	0x200007b0
 8009778:	200006c0 	.word	0x200006c0
 800977c:	e000ed04 	.word	0xe000ed04

08009780 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009788:	2300      	movs	r3, #0
 800978a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d016      	beq.n	80097c0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009792:	4b12      	ldr	r3, [pc, #72]	; (80097dc <vTaskDelay+0x5c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d009      	beq.n	80097ae <vTaskDelay+0x2e>
 800979a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	60bb      	str	r3, [r7, #8]
 80097ac:	e7fe      	b.n	80097ac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80097ae:	f000 f981 	bl	8009ab4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	2100      	movs	r1, #0
 80097b6:	f000 fde5 	bl	800a384 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80097ba:	f000 f989 	bl	8009ad0 <xTaskResumeAll>
 80097be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d107      	bne.n	80097d6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80097c6:	4b06      	ldr	r3, [pc, #24]	; (80097e0 <vTaskDelay+0x60>)
 80097c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	200007d0 	.word	0x200007d0
 80097e0:	e000ed04 	.word	0xe000ed04

080097e4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80097ec:	f7fe ff42 	bl	8008674 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d102      	bne.n	80097fc <vTaskSuspend+0x18>
 80097f6:	4b3b      	ldr	r3, [pc, #236]	; (80098e4 <vTaskSuspend+0x100>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	e000      	b.n	80097fe <vTaskSuspend+0x1a>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	3304      	adds	r3, #4
 8009804:	4618      	mov	r0, r3
 8009806:	f7ff f8f7 	bl	80089f8 <uxListRemove>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d115      	bne.n	800983c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009814:	4934      	ldr	r1, [pc, #208]	; (80098e8 <vTaskSuspend+0x104>)
 8009816:	4613      	mov	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	440b      	add	r3, r1
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10a      	bne.n	800983c <vTaskSuspend+0x58>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982a:	461a      	mov	r2, r3
 800982c:	2301      	movs	r3, #1
 800982e:	4093      	lsls	r3, r2
 8009830:	43da      	mvns	r2, r3
 8009832:	4b2e      	ldr	r3, [pc, #184]	; (80098ec <vTaskSuspend+0x108>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4013      	ands	r3, r2
 8009838:	4a2c      	ldr	r2, [pc, #176]	; (80098ec <vTaskSuspend+0x108>)
 800983a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009840:	2b00      	cmp	r3, #0
 8009842:	d004      	beq.n	800984e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	3318      	adds	r3, #24
 8009848:	4618      	mov	r0, r3
 800984a:	f7ff f8d5 	bl	80089f8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	3304      	adds	r3, #4
 8009852:	4827      	ldr	r0, [pc, #156]	; (80098f0 <vTaskSuspend+0x10c>)
 8009854:	4619      	mov	r1, r3
 8009856:	f7ff f873 	bl	8008940 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b01      	cmp	r3, #1
 8009864:	d103      	bne.n	800986e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800986e:	f7fe ff2f 	bl	80086d0 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009872:	4b20      	ldr	r3, [pc, #128]	; (80098f4 <vTaskSuspend+0x110>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d005      	beq.n	8009886 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800987a:	f7fe fefb 	bl	8008674 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800987e:	f000 fcbd 	bl	800a1fc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009882:	f7fe ff25 	bl	80086d0 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009886:	4b17      	ldr	r3, [pc, #92]	; (80098e4 <vTaskSuspend+0x100>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	429a      	cmp	r2, r3
 800988e:	d126      	bne.n	80098de <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8009890:	4b18      	ldr	r3, [pc, #96]	; (80098f4 <vTaskSuspend+0x110>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d016      	beq.n	80098c6 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009898:	4b17      	ldr	r3, [pc, #92]	; (80098f8 <vTaskSuspend+0x114>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d009      	beq.n	80098b4 <vTaskSuspend+0xd0>
 80098a0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	60bb      	str	r3, [r7, #8]
 80098b2:	e7fe      	b.n	80098b2 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 80098b4:	4b11      	ldr	r3, [pc, #68]	; (80098fc <vTaskSuspend+0x118>)
 80098b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ba:	601a      	str	r2, [r3, #0]
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	f3bf 8f6f 	isb	sy
 80098c4:	e00b      	b.n	80098de <vTaskSuspend+0xfa>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80098c6:	4b0a      	ldr	r3, [pc, #40]	; (80098f0 <vTaskSuspend+0x10c>)
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	4b0d      	ldr	r3, [pc, #52]	; (8009900 <vTaskSuspend+0x11c>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d103      	bne.n	80098da <vTaskSuspend+0xf6>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 80098d2:	4b04      	ldr	r3, [pc, #16]	; (80098e4 <vTaskSuspend+0x100>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	601a      	str	r2, [r3, #0]
 80098d8:	e001      	b.n	80098de <vTaskSuspend+0xfa>
				}
				else
				{
					vTaskSwitchContext();
 80098da:	f000 fa61 	bl	8009da0 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	200006bc 	.word	0x200006bc
 80098e8:	200006c0 	.word	0x200006c0
 80098ec:	200007b0 	.word	0x200007b0
 80098f0:	20000794 	.word	0x20000794
 80098f4:	200007b4 	.word	0x200007b4
 80098f8:	200007d0 	.word	0x200007d0
 80098fc:	e000ed04 	.word	0xe000ed04
 8009900:	200007a8 	.word	0x200007a8

08009904 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009904:	b480      	push	{r7}
 8009906:	b087      	sub	sp, #28
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800990c:	2300      	movs	r3, #0
 800990e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d109      	bne.n	800992e <prvTaskIsTaskSuspended+0x2a>
 800991a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	60fb      	str	r3, [r7, #12]
 800992c:	e7fe      	b.n	800992c <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	4a0a      	ldr	r2, [pc, #40]	; (800995c <prvTaskIsTaskSuspended+0x58>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d10a      	bne.n	800994e <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800993c:	4a08      	ldr	r2, [pc, #32]	; (8009960 <prvTaskIsTaskSuspended+0x5c>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d005      	beq.n	800994e <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009946:	2b00      	cmp	r3, #0
 8009948:	d101      	bne.n	800994e <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 800994a:	2301      	movs	r3, #1
 800994c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800994e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009950:	4618      	mov	r0, r3
 8009952:	371c      	adds	r7, #28
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	20000794 	.word	0x20000794
 8009960:	20000768 	.word	0x20000768

08009964 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d109      	bne.n	800998a <vTaskResume+0x26>
 8009976:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	60bb      	str	r3, [r7, #8]
 8009988:	e7fe      	b.n	8009988 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800998a:	4b21      	ldr	r3, [pc, #132]	; (8009a10 <vTaskResume+0xac>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	429a      	cmp	r2, r3
 8009992:	d039      	beq.n	8009a08 <vTaskResume+0xa4>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d036      	beq.n	8009a08 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800999a:	f7fe fe6b 	bl	8008674 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f7ff ffb0 	bl	8009904 <prvTaskIsTaskSuspended>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d02c      	beq.n	8009a04 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	3304      	adds	r3, #4
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff f822 	bl	80089f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b8:	461a      	mov	r2, r3
 80099ba:	2301      	movs	r3, #1
 80099bc:	fa03 f202 	lsl.w	r2, r3, r2
 80099c0:	4b14      	ldr	r3, [pc, #80]	; (8009a14 <vTaskResume+0xb0>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	4a13      	ldr	r2, [pc, #76]	; (8009a14 <vTaskResume+0xb0>)
 80099c8:	6013      	str	r3, [r2, #0]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ce:	4613      	mov	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4a10      	ldr	r2, [pc, #64]	; (8009a18 <vTaskResume+0xb4>)
 80099d8:	441a      	add	r2, r3
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	3304      	adds	r3, #4
 80099de:	4610      	mov	r0, r2
 80099e0:	4619      	mov	r1, r3
 80099e2:	f7fe ffad 	bl	8008940 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ea:	4b09      	ldr	r3, [pc, #36]	; (8009a10 <vTaskResume+0xac>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d307      	bcc.n	8009a04 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80099f4:	4b09      	ldr	r3, [pc, #36]	; (8009a1c <vTaskResume+0xb8>)
 80099f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099fa:	601a      	str	r2, [r3, #0]
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8009a04:	f7fe fe64 	bl	80086d0 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	200006bc 	.word	0x200006bc
 8009a14:	200007b0 	.word	0x200007b0
 8009a18:	200006c0 	.word	0x200006c0
 8009a1c:	e000ed04 	.word	0xe000ed04

08009a20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009a26:	2300      	movs	r3, #0
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	4b1c      	ldr	r3, [pc, #112]	; (8009a9c <vTaskStartScheduler+0x7c>)
 8009a2c:	9301      	str	r3, [sp, #4]
 8009a2e:	481c      	ldr	r0, [pc, #112]	; (8009aa0 <vTaskStartScheduler+0x80>)
 8009a30:	491c      	ldr	r1, [pc, #112]	; (8009aa4 <vTaskStartScheduler+0x84>)
 8009a32:	2282      	movs	r2, #130	; 0x82
 8009a34:	2300      	movs	r3, #0
 8009a36:	f7ff fd4f 	bl	80094d8 <xTaskCreate>
 8009a3a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d102      	bne.n	8009a48 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8009a42:	f000 fd09 	bl	800a458 <xTimerCreateTimerTask>
 8009a46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d115      	bne.n	8009a7a <vTaskStartScheduler+0x5a>
 8009a4e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a60:	4b11      	ldr	r3, [pc, #68]	; (8009aa8 <vTaskStartScheduler+0x88>)
 8009a62:	f04f 32ff 	mov.w	r2, #4294967295
 8009a66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a68:	4b10      	ldr	r3, [pc, #64]	; (8009aac <vTaskStartScheduler+0x8c>)
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a6e:	4b10      	ldr	r3, [pc, #64]	; (8009ab0 <vTaskStartScheduler+0x90>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a74:	f7fe fd60 	bl	8008538 <xPortStartScheduler>
 8009a78:	e00d      	b.n	8009a96 <vTaskStartScheduler+0x76>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a80:	d109      	bne.n	8009a96 <vTaskStartScheduler+0x76>
 8009a82:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	607b      	str	r3, [r7, #4]
 8009a94:	e7fe      	b.n	8009a94 <vTaskStartScheduler+0x74>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	200007cc 	.word	0x200007cc
 8009aa0:	0800a0d9 	.word	0x0800a0d9
 8009aa4:	0800f568 	.word	0x0800f568
 8009aa8:	200007c8 	.word	0x200007c8
 8009aac:	200007b4 	.word	0x200007b4
 8009ab0:	200007ac 	.word	0x200007ac

08009ab4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009ab8:	4b04      	ldr	r3, [pc, #16]	; (8009acc <vTaskSuspendAll+0x18>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	3301      	adds	r3, #1
 8009abe:	4a03      	ldr	r2, [pc, #12]	; (8009acc <vTaskSuspendAll+0x18>)
 8009ac0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	200007d0 	.word	0x200007d0

08009ad0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ada:	2300      	movs	r3, #0
 8009adc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009ade:	4b42      	ldr	r3, [pc, #264]	; (8009be8 <xTaskResumeAll+0x118>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d109      	bne.n	8009afa <xTaskResumeAll+0x2a>
 8009ae6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009aea:	f383 8811 	msr	BASEPRI, r3
 8009aee:	f3bf 8f6f 	isb	sy
 8009af2:	f3bf 8f4f 	dsb	sy
 8009af6:	603b      	str	r3, [r7, #0]
 8009af8:	e7fe      	b.n	8009af8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009afa:	f7fe fdbb 	bl	8008674 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009afe:	4b3a      	ldr	r3, [pc, #232]	; (8009be8 <xTaskResumeAll+0x118>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	3b01      	subs	r3, #1
 8009b04:	4a38      	ldr	r2, [pc, #224]	; (8009be8 <xTaskResumeAll+0x118>)
 8009b06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b08:	4b37      	ldr	r3, [pc, #220]	; (8009be8 <xTaskResumeAll+0x118>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d163      	bne.n	8009bd8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b10:	4b36      	ldr	r3, [pc, #216]	; (8009bec <xTaskResumeAll+0x11c>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d05f      	beq.n	8009bd8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b18:	e030      	b.n	8009b7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b1a:	4b35      	ldr	r3, [pc, #212]	; (8009bf0 <xTaskResumeAll+0x120>)
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	3318      	adds	r3, #24
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fe ff66 	bl	80089f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	3304      	adds	r3, #4
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fe ff61 	bl	80089f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	fa03 f202 	lsl.w	r2, r3, r2
 8009b42:	4b2c      	ldr	r3, [pc, #176]	; (8009bf4 <xTaskResumeAll+0x124>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	4a2a      	ldr	r2, [pc, #168]	; (8009bf4 <xTaskResumeAll+0x124>)
 8009b4a:	6013      	str	r3, [r2, #0]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b50:	4613      	mov	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	4a27      	ldr	r2, [pc, #156]	; (8009bf8 <xTaskResumeAll+0x128>)
 8009b5a:	441a      	add	r2, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	3304      	adds	r3, #4
 8009b60:	4610      	mov	r0, r2
 8009b62:	4619      	mov	r1, r3
 8009b64:	f7fe feec 	bl	8008940 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6c:	4b23      	ldr	r3, [pc, #140]	; (8009bfc <xTaskResumeAll+0x12c>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d302      	bcc.n	8009b7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009b76:	4b22      	ldr	r3, [pc, #136]	; (8009c00 <xTaskResumeAll+0x130>)
 8009b78:	2201      	movs	r2, #1
 8009b7a:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b7c:	4b1c      	ldr	r3, [pc, #112]	; (8009bf0 <xTaskResumeAll+0x120>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1ca      	bne.n	8009b1a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b8a:	f000 fb37 	bl	800a1fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009b8e:	4b1d      	ldr	r3, [pc, #116]	; (8009c04 <xTaskResumeAll+0x134>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d010      	beq.n	8009bbc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b9a:	f000 f847 	bl	8009c2c <xTaskIncrementTick>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d002      	beq.n	8009baa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009ba4:	4b16      	ldr	r3, [pc, #88]	; (8009c00 <xTaskResumeAll+0x130>)
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	3b01      	subs	r3, #1
 8009bae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1f1      	bne.n	8009b9a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009bb6:	4b13      	ldr	r3, [pc, #76]	; (8009c04 <xTaskResumeAll+0x134>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009bbc:	4b10      	ldr	r3, [pc, #64]	; (8009c00 <xTaskResumeAll+0x130>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d009      	beq.n	8009bd8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009bc8:	4b0f      	ldr	r3, [pc, #60]	; (8009c08 <xTaskResumeAll+0x138>)
 8009bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009bd8:	f7fe fd7a 	bl	80086d0 <vPortExitCritical>

	return xAlreadyYielded;
 8009bdc:	68bb      	ldr	r3, [r7, #8]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	200007d0 	.word	0x200007d0
 8009bec:	200007a8 	.word	0x200007a8
 8009bf0:	20000768 	.word	0x20000768
 8009bf4:	200007b0 	.word	0x200007b0
 8009bf8:	200006c0 	.word	0x200006c0
 8009bfc:	200006bc 	.word	0x200006bc
 8009c00:	200007bc 	.word	0x200007bc
 8009c04:	200007b8 	.word	0x200007b8
 8009c08:	e000ed04 	.word	0xe000ed04

08009c0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009c12:	4b05      	ldr	r3, [pc, #20]	; (8009c28 <xTaskGetTickCount+0x1c>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009c18:	687b      	ldr	r3, [r7, #4]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	200007ac 	.word	0x200007ac

08009c2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c32:	2300      	movs	r3, #0
 8009c34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c36:	4b4f      	ldr	r3, [pc, #316]	; (8009d74 <xTaskIncrementTick+0x148>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f040 8089 	bne.w	8009d52 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c40:	4b4d      	ldr	r3, [pc, #308]	; (8009d78 <xTaskIncrementTick+0x14c>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	3301      	adds	r3, #1
 8009c46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c48:	4a4b      	ldr	r2, [pc, #300]	; (8009d78 <xTaskIncrementTick+0x14c>)
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d11f      	bne.n	8009c94 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c54:	4b49      	ldr	r3, [pc, #292]	; (8009d7c <xTaskIncrementTick+0x150>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d009      	beq.n	8009c72 <xTaskIncrementTick+0x46>
 8009c5e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	603b      	str	r3, [r7, #0]
 8009c70:	e7fe      	b.n	8009c70 <xTaskIncrementTick+0x44>
 8009c72:	4b42      	ldr	r3, [pc, #264]	; (8009d7c <xTaskIncrementTick+0x150>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	60fb      	str	r3, [r7, #12]
 8009c78:	4b41      	ldr	r3, [pc, #260]	; (8009d80 <xTaskIncrementTick+0x154>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a3f      	ldr	r2, [pc, #252]	; (8009d7c <xTaskIncrementTick+0x150>)
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	4a3f      	ldr	r2, [pc, #252]	; (8009d80 <xTaskIncrementTick+0x154>)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6013      	str	r3, [r2, #0]
 8009c86:	4b3f      	ldr	r3, [pc, #252]	; (8009d84 <xTaskIncrementTick+0x158>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	4a3d      	ldr	r2, [pc, #244]	; (8009d84 <xTaskIncrementTick+0x158>)
 8009c8e:	6013      	str	r3, [r2, #0]
 8009c90:	f000 fab4 	bl	800a1fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c94:	4b3c      	ldr	r3, [pc, #240]	; (8009d88 <xTaskIncrementTick+0x15c>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d34a      	bcc.n	8009d34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c9e:	4b37      	ldr	r3, [pc, #220]	; (8009d7c <xTaskIncrementTick+0x150>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d104      	bne.n	8009cb2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ca8:	4b37      	ldr	r3, [pc, #220]	; (8009d88 <xTaskIncrementTick+0x15c>)
 8009caa:	f04f 32ff 	mov.w	r2, #4294967295
 8009cae:	601a      	str	r2, [r3, #0]
					break;
 8009cb0:	e040      	b.n	8009d34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cb2:	4b32      	ldr	r3, [pc, #200]	; (8009d7c <xTaskIncrementTick+0x150>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009cc2:	693a      	ldr	r2, [r7, #16]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d203      	bcs.n	8009cd2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009cca:	4a2f      	ldr	r2, [pc, #188]	; (8009d88 <xTaskIncrementTick+0x15c>)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009cd0:	e030      	b.n	8009d34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	3304      	adds	r3, #4
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7fe fe8e 	bl	80089f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d004      	beq.n	8009cee <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	3318      	adds	r3, #24
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fe fe85 	bl	80089f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	fa03 f202 	lsl.w	r2, r3, r2
 8009cfa:	4b24      	ldr	r3, [pc, #144]	; (8009d8c <xTaskIncrementTick+0x160>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	4a22      	ldr	r2, [pc, #136]	; (8009d8c <xTaskIncrementTick+0x160>)
 8009d02:	6013      	str	r3, [r2, #0]
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d08:	4613      	mov	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4a1f      	ldr	r2, [pc, #124]	; (8009d90 <xTaskIncrementTick+0x164>)
 8009d12:	441a      	add	r2, r3
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	3304      	adds	r3, #4
 8009d18:	4610      	mov	r0, r2
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	f7fe fe10 	bl	8008940 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d24:	4b1b      	ldr	r3, [pc, #108]	; (8009d94 <xTaskIncrementTick+0x168>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d301      	bcc.n	8009d32 <xTaskIncrementTick+0x106>
						{
							xSwitchRequired = pdTRUE;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 8009d32:	e7b4      	b.n	8009c9e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d34:	4b17      	ldr	r3, [pc, #92]	; (8009d94 <xTaskIncrementTick+0x168>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d3a:	4915      	ldr	r1, [pc, #84]	; (8009d90 <xTaskIncrementTick+0x164>)
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4413      	add	r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	440b      	add	r3, r1
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d901      	bls.n	8009d50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	617b      	str	r3, [r7, #20]
 8009d50:	e004      	b.n	8009d5c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009d52:	4b11      	ldr	r3, [pc, #68]	; (8009d98 <xTaskIncrementTick+0x16c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	3301      	adds	r3, #1
 8009d58:	4a0f      	ldr	r2, [pc, #60]	; (8009d98 <xTaskIncrementTick+0x16c>)
 8009d5a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009d5c:	4b0f      	ldr	r3, [pc, #60]	; (8009d9c <xTaskIncrementTick+0x170>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8009d64:	2301      	movs	r3, #1
 8009d66:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009d68:	697b      	ldr	r3, [r7, #20]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	200007d0 	.word	0x200007d0
 8009d78:	200007ac 	.word	0x200007ac
 8009d7c:	20000760 	.word	0x20000760
 8009d80:	20000764 	.word	0x20000764
 8009d84:	200007c0 	.word	0x200007c0
 8009d88:	200007c8 	.word	0x200007c8
 8009d8c:	200007b0 	.word	0x200007b0
 8009d90:	200006c0 	.word	0x200006c0
 8009d94:	200006bc 	.word	0x200006bc
 8009d98:	200007b8 	.word	0x200007b8
 8009d9c:	200007bc 	.word	0x200007bc

08009da0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009da0:	b480      	push	{r7}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009da6:	4b26      	ldr	r3, [pc, #152]	; (8009e40 <vTaskSwitchContext+0xa0>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d003      	beq.n	8009db6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009dae:	4b25      	ldr	r3, [pc, #148]	; (8009e44 <vTaskSwitchContext+0xa4>)
 8009db0:	2201      	movs	r2, #1
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	e03e      	b.n	8009e34 <vTaskSwitchContext+0x94>
	}
	else
	{
		xYieldPending = pdFALSE;
 8009db6:	4b23      	ldr	r3, [pc, #140]	; (8009e44 <vTaskSwitchContext+0xa4>)
 8009db8:	2200      	movs	r2, #0
 8009dba:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dbc:	4b22      	ldr	r3, [pc, #136]	; (8009e48 <vTaskSwitchContext+0xa8>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	60fb      	str	r3, [r7, #12]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	fab3 f383 	clz	r3, r3
 8009dc8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009dca:	7afb      	ldrb	r3, [r7, #11]
 8009dcc:	f1c3 031f 	rsb	r3, r3, #31
 8009dd0:	617b      	str	r3, [r7, #20]
 8009dd2:	491e      	ldr	r1, [pc, #120]	; (8009e4c <vTaskSwitchContext+0xac>)
 8009dd4:	697a      	ldr	r2, [r7, #20]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	440b      	add	r3, r1
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d109      	bne.n	8009dfa <vTaskSwitchContext+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009de6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009dea:	f383 8811 	msr	BASEPRI, r3
 8009dee:	f3bf 8f6f 	isb	sy
 8009df2:	f3bf 8f4f 	dsb	sy
 8009df6:	607b      	str	r3, [r7, #4]
 8009df8:	e7fe      	b.n	8009df8 <vTaskSwitchContext+0x58>
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4413      	add	r3, r2
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4a11      	ldr	r2, [pc, #68]	; (8009e4c <vTaskSwitchContext+0xac>)
 8009e06:	4413      	add	r3, r2
 8009e08:	613b      	str	r3, [r7, #16]
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	685a      	ldr	r2, [r3, #4]
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	605a      	str	r2, [r3, #4]
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	685a      	ldr	r2, [r3, #4]
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	3308      	adds	r3, #8
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d104      	bne.n	8009e2a <vTaskSwitchContext+0x8a>
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	685a      	ldr	r2, [r3, #4]
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	605a      	str	r2, [r3, #4]
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	4a07      	ldr	r2, [pc, #28]	; (8009e50 <vTaskSwitchContext+0xb0>)
 8009e32:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e34:	371c      	adds	r7, #28
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	200007d0 	.word	0x200007d0
 8009e44:	200007bc 	.word	0x200007bc
 8009e48:	200007b0 	.word	0x200007b0
 8009e4c:	200006c0 	.word	0x200006c0
 8009e50:	200006bc 	.word	0x200006bc

08009e54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d109      	bne.n	8009e78 <vTaskPlaceOnEventList+0x24>
 8009e64:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	60fb      	str	r3, [r7, #12]
 8009e76:	e7fe      	b.n	8009e76 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e78:	4b06      	ldr	r3, [pc, #24]	; (8009e94 <vTaskPlaceOnEventList+0x40>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3318      	adds	r3, #24
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	4619      	mov	r1, r3
 8009e82:	f7fe fd81 	bl	8008988 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e86:	6838      	ldr	r0, [r7, #0]
 8009e88:	2101      	movs	r1, #1
 8009e8a:	f000 fa7b 	bl	800a384 <prvAddCurrentTaskToDelayedList>
}
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	200006bc 	.word	0x200006bc

08009e98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d109      	bne.n	8009ebe <vTaskPlaceOnEventListRestricted+0x26>
 8009eaa:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	617b      	str	r3, [r7, #20]
 8009ebc:	e7fe      	b.n	8009ebc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ebe:	4b0a      	ldr	r3, [pc, #40]	; (8009ee8 <vTaskPlaceOnEventListRestricted+0x50>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3318      	adds	r3, #24
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	f7fe fd3a 	bl	8008940 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d002      	beq.n	8009ed8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ed8:	68b8      	ldr	r0, [r7, #8]
 8009eda:	6879      	ldr	r1, [r7, #4]
 8009edc:	f000 fa52 	bl	800a384 <prvAddCurrentTaskToDelayedList>
	}
 8009ee0:	3718      	adds	r7, #24
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	200006bc 	.word	0x200006bc

08009eec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b086      	sub	sp, #24
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d109      	bne.n	8009f16 <xTaskRemoveFromEventList+0x2a>
 8009f02:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	60fb      	str	r3, [r7, #12]
 8009f14:	e7fe      	b.n	8009f14 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	3318      	adds	r3, #24
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7fe fd6c 	bl	80089f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f20:	4b1e      	ldr	r3, [pc, #120]	; (8009f9c <xTaskRemoveFromEventList+0xb0>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d11e      	bne.n	8009f66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7fe fd63 	bl	80089f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f36:	461a      	mov	r2, r3
 8009f38:	2301      	movs	r3, #1
 8009f3a:	fa03 f202 	lsl.w	r2, r3, r2
 8009f3e:	4b18      	ldr	r3, [pc, #96]	; (8009fa0 <xTaskRemoveFromEventList+0xb4>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	4a16      	ldr	r2, [pc, #88]	; (8009fa0 <xTaskRemoveFromEventList+0xb4>)
 8009f46:	6013      	str	r3, [r2, #0]
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4413      	add	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4a13      	ldr	r2, [pc, #76]	; (8009fa4 <xTaskRemoveFromEventList+0xb8>)
 8009f56:	441a      	add	r2, r3
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	4619      	mov	r1, r3
 8009f60:	f7fe fcee 	bl	8008940 <vListInsertEnd>
 8009f64:	e005      	b.n	8009f72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	3318      	adds	r3, #24
 8009f6a:	480f      	ldr	r0, [pc, #60]	; (8009fa8 <xTaskRemoveFromEventList+0xbc>)
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	f7fe fce7 	bl	8008940 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f76:	4b0d      	ldr	r3, [pc, #52]	; (8009fac <xTaskRemoveFromEventList+0xc0>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d905      	bls.n	8009f8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f80:	2301      	movs	r3, #1
 8009f82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f84:	4b0a      	ldr	r3, [pc, #40]	; (8009fb0 <xTaskRemoveFromEventList+0xc4>)
 8009f86:	2201      	movs	r2, #1
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	e001      	b.n	8009f90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f90:	697b      	ldr	r3, [r7, #20]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3718      	adds	r7, #24
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	200007d0 	.word	0x200007d0
 8009fa0:	200007b0 	.word	0x200007b0
 8009fa4:	200006c0 	.word	0x200006c0
 8009fa8:	20000768 	.word	0x20000768
 8009fac:	200006bc 	.word	0x200006bc
 8009fb0:	200007bc 	.word	0x200007bc

08009fb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009fbc:	4b06      	ldr	r3, [pc, #24]	; (8009fd8 <vTaskInternalSetTimeOutState+0x24>)
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009fc4:	4b05      	ldr	r3, [pc, #20]	; (8009fdc <vTaskInternalSetTimeOutState+0x28>)
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	605a      	str	r2, [r3, #4]
}
 8009fcc:	370c      	adds	r7, #12
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	200007c0 	.word	0x200007c0
 8009fdc:	200007ac 	.word	0x200007ac

08009fe0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b088      	sub	sp, #32
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d109      	bne.n	800a004 <xTaskCheckForTimeOut+0x24>
 8009ff0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	613b      	str	r3, [r7, #16]
 800a002:	e7fe      	b.n	800a002 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d109      	bne.n	800a01e <xTaskCheckForTimeOut+0x3e>
 800a00a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	60fb      	str	r3, [r7, #12]
 800a01c:	e7fe      	b.n	800a01c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a01e:	f7fe fb29 	bl	8008674 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a022:	4b24      	ldr	r3, [pc, #144]	; (800a0b4 <xTaskCheckForTimeOut+0xd4>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	69ba      	ldr	r2, [r7, #24]
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800a032:	4b21      	ldr	r3, [pc, #132]	; (800a0b8 <xTaskCheckForTimeOut+0xd8>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d007      	beq.n	800a04e <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a03e:	4b1e      	ldr	r3, [pc, #120]	; (800a0b8 <xTaskCheckForTimeOut+0xd8>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
				xReturn = pdTRUE;
 800a048:	2301      	movs	r3, #1
 800a04a:	61fb      	str	r3, [r7, #28]
 800a04c:	e02b      	b.n	800a0a6 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a056:	d102      	bne.n	800a05e <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a058:	2300      	movs	r3, #0
 800a05a:	61fb      	str	r3, [r7, #28]
 800a05c:	e023      	b.n	800a0a6 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	4b16      	ldr	r3, [pc, #88]	; (800a0bc <xTaskCheckForTimeOut+0xdc>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	429a      	cmp	r2, r3
 800a068:	d007      	beq.n	800a07a <xTaskCheckForTimeOut+0x9a>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	429a      	cmp	r2, r3
 800a072:	d802      	bhi.n	800a07a <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a074:	2301      	movs	r3, #1
 800a076:	61fb      	str	r3, [r7, #28]
 800a078:	e015      	b.n	800a0a6 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	429a      	cmp	r2, r3
 800a082:	d90b      	bls.n	800a09c <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	1ad2      	subs	r2, r2, r3
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f7ff ff8f 	bl	8009fb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a096:	2300      	movs	r3, #0
 800a098:	61fb      	str	r3, [r7, #28]
 800a09a:	e004      	b.n	800a0a6 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a0a6:	f7fe fb13 	bl	80086d0 <vPortExitCritical>

	return xReturn;
 800a0aa:	69fb      	ldr	r3, [r7, #28]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3720      	adds	r7, #32
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	200007ac 	.word	0x200007ac
 800a0b8:	200006bc 	.word	0x200006bc
 800a0bc:	200007c0 	.word	0x200007c0

0800a0c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a0c4:	4b03      	ldr	r3, [pc, #12]	; (800a0d4 <vTaskMissedYield+0x14>)
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	601a      	str	r2, [r3, #0]
}
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	200007bc 	.word	0x200007bc

0800a0d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a0e0:	f000 f850 	bl	800a184 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a0e4:	4b06      	ldr	r3, [pc, #24]	; (800a100 <prvIdleTask+0x28>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d907      	bls.n	800a0fc <prvIdleTask+0x24>
			{
				taskYIELD();
 800a0ec:	4b05      	ldr	r3, [pc, #20]	; (800a104 <prvIdleTask+0x2c>)
 800a0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0f2:	601a      	str	r2, [r3, #0]
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 800a0fc:	e7f0      	b.n	800a0e0 <prvIdleTask+0x8>
 800a0fe:	bf00      	nop
 800a100:	200006c0 	.word	0x200006c0
 800a104:	e000ed04 	.word	0xe000ed04

0800a108 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a10e:	2300      	movs	r3, #0
 800a110:	607b      	str	r3, [r7, #4]
 800a112:	e00c      	b.n	800a12e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	4613      	mov	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4a11      	ldr	r2, [pc, #68]	; (800a164 <prvInitialiseTaskLists+0x5c>)
 800a120:	4413      	add	r3, r2
 800a122:	4618      	mov	r0, r3
 800a124:	f7fe fbe0 	bl	80088e8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	3301      	adds	r3, #1
 800a12c:	607b      	str	r3, [r7, #4]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b05      	cmp	r3, #5
 800a132:	d9ef      	bls.n	800a114 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800a134:	480c      	ldr	r0, [pc, #48]	; (800a168 <prvInitialiseTaskLists+0x60>)
 800a136:	f7fe fbd7 	bl	80088e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a13a:	480c      	ldr	r0, [pc, #48]	; (800a16c <prvInitialiseTaskLists+0x64>)
 800a13c:	f7fe fbd4 	bl	80088e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a140:	480b      	ldr	r0, [pc, #44]	; (800a170 <prvInitialiseTaskLists+0x68>)
 800a142:	f7fe fbd1 	bl	80088e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a146:	480b      	ldr	r0, [pc, #44]	; (800a174 <prvInitialiseTaskLists+0x6c>)
 800a148:	f7fe fbce 	bl	80088e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a14c:	480a      	ldr	r0, [pc, #40]	; (800a178 <prvInitialiseTaskLists+0x70>)
 800a14e:	f7fe fbcb 	bl	80088e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a152:	4b0a      	ldr	r3, [pc, #40]	; (800a17c <prvInitialiseTaskLists+0x74>)
 800a154:	4a04      	ldr	r2, [pc, #16]	; (800a168 <prvInitialiseTaskLists+0x60>)
 800a156:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a158:	4b09      	ldr	r3, [pc, #36]	; (800a180 <prvInitialiseTaskLists+0x78>)
 800a15a:	4a04      	ldr	r2, [pc, #16]	; (800a16c <prvInitialiseTaskLists+0x64>)
 800a15c:	601a      	str	r2, [r3, #0]
}
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	200006c0 	.word	0x200006c0
 800a168:	20000738 	.word	0x20000738
 800a16c:	2000074c 	.word	0x2000074c
 800a170:	20000768 	.word	0x20000768
 800a174:	2000077c 	.word	0x2000077c
 800a178:	20000794 	.word	0x20000794
 800a17c:	20000760 	.word	0x20000760
 800a180:	20000764 	.word	0x20000764

0800a184 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a18a:	e019      	b.n	800a1c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a18c:	f7fe fa72 	bl	8008674 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a190:	4b0f      	ldr	r3, [pc, #60]	; (800a1d0 <prvCheckTasksWaitingTermination+0x4c>)
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	3304      	adds	r3, #4
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fe fc2b 	bl	80089f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a1a2:	4b0c      	ldr	r3, [pc, #48]	; (800a1d4 <prvCheckTasksWaitingTermination+0x50>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	4a0a      	ldr	r2, [pc, #40]	; (800a1d4 <prvCheckTasksWaitingTermination+0x50>)
 800a1aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a1ac:	4b0a      	ldr	r3, [pc, #40]	; (800a1d8 <prvCheckTasksWaitingTermination+0x54>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	4a09      	ldr	r2, [pc, #36]	; (800a1d8 <prvCheckTasksWaitingTermination+0x54>)
 800a1b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a1b6:	f7fe fa8b 	bl	80086d0 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f80e 	bl	800a1dc <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1c0:	4b05      	ldr	r3, [pc, #20]	; (800a1d8 <prvCheckTasksWaitingTermination+0x54>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e1      	bne.n	800a18c <prvCheckTasksWaitingTermination+0x8>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	2000077c 	.word	0x2000077c
 800a1d4:	200007a8 	.word	0x200007a8
 800a1d8:	20000790 	.word	0x20000790

0800a1dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fe fb6b 	bl	80088c4 <vPortFree>
			vPortFree( pxTCB );
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7fe fb68 	bl	80088c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop

0800a1fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a202:	4b0c      	ldr	r3, [pc, #48]	; (800a234 <prvResetNextTaskUnblockTime+0x38>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d104      	bne.n	800a216 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a20c:	4b0a      	ldr	r3, [pc, #40]	; (800a238 <prvResetNextTaskUnblockTime+0x3c>)
 800a20e:	f04f 32ff 	mov.w	r2, #4294967295
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	e008      	b.n	800a228 <prvResetNextTaskUnblockTime+0x2c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a216:	4b07      	ldr	r3, [pc, #28]	; (800a234 <prvResetNextTaskUnblockTime+0x38>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	4a04      	ldr	r2, [pc, #16]	; (800a238 <prvResetNextTaskUnblockTime+0x3c>)
 800a226:	6013      	str	r3, [r2, #0]
	}
}
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	20000760 	.word	0x20000760
 800a238:	200007c8 	.word	0x200007c8

0800a23c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a242:	4b0b      	ldr	r3, [pc, #44]	; (800a270 <xTaskGetSchedulerState+0x34>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d102      	bne.n	800a250 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a24a:	2301      	movs	r3, #1
 800a24c:	607b      	str	r3, [r7, #4]
 800a24e:	e008      	b.n	800a262 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a250:	4b08      	ldr	r3, [pc, #32]	; (800a274 <xTaskGetSchedulerState+0x38>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d102      	bne.n	800a25e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a258:	2302      	movs	r3, #2
 800a25a:	607b      	str	r3, [r7, #4]
 800a25c:	e001      	b.n	800a262 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a25e:	2300      	movs	r3, #0
 800a260:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a262:	687b      	ldr	r3, [r7, #4]
	}
 800a264:	4618      	mov	r0, r3
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	200007b4 	.word	0x200007b4
 800a274:	200007d0 	.word	0x200007d0

0800a278 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a284:	2300      	movs	r3, #0
 800a286:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d06e      	beq.n	800a36c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a28e:	4b3a      	ldr	r3, [pc, #232]	; (800a378 <xTaskPriorityDisinherit+0x100>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	429a      	cmp	r2, r3
 800a296:	d009      	beq.n	800a2ac <xTaskPriorityDisinherit+0x34>
 800a298:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a29c:	f383 8811 	msr	BASEPRI, r3
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	60fb      	str	r3, [r7, #12]
 800a2aa:	e7fe      	b.n	800a2aa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d109      	bne.n	800a2c8 <xTaskPriorityDisinherit+0x50>
 800a2b4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	60bb      	str	r3, [r7, #8]
 800a2c6:	e7fe      	b.n	800a2c6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2cc:	1e5a      	subs	r2, r3, #1
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d046      	beq.n	800a36c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d142      	bne.n	800a36c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	3304      	adds	r3, #4
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fe fb84 	bl	80089f8 <uxListRemove>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d115      	bne.n	800a322 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2fa:	4920      	ldr	r1, [pc, #128]	; (800a37c <xTaskPriorityDisinherit+0x104>)
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	4413      	add	r3, r2
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	440b      	add	r3, r1
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10a      	bne.n	800a322 <xTaskPriorityDisinherit+0xaa>
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a310:	461a      	mov	r2, r3
 800a312:	2301      	movs	r3, #1
 800a314:	4093      	lsls	r3, r2
 800a316:	43da      	mvns	r2, r3
 800a318:	4b19      	ldr	r3, [pc, #100]	; (800a380 <xTaskPriorityDisinherit+0x108>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4013      	ands	r3, r2
 800a31e:	4a18      	ldr	r2, [pc, #96]	; (800a380 <xTaskPriorityDisinherit+0x108>)
 800a320:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32e:	f1c3 0206 	rsb	r2, r3, #6
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33a:	461a      	mov	r2, r3
 800a33c:	2301      	movs	r3, #1
 800a33e:	fa03 f202 	lsl.w	r2, r3, r2
 800a342:	4b0f      	ldr	r3, [pc, #60]	; (800a380 <xTaskPriorityDisinherit+0x108>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4313      	orrs	r3, r2
 800a348:	4a0d      	ldr	r2, [pc, #52]	; (800a380 <xTaskPriorityDisinherit+0x108>)
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a350:	4613      	mov	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4a08      	ldr	r2, [pc, #32]	; (800a37c <xTaskPriorityDisinherit+0x104>)
 800a35a:	441a      	add	r2, r3
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	3304      	adds	r3, #4
 800a360:	4610      	mov	r0, r2
 800a362:	4619      	mov	r1, r3
 800a364:	f7fe faec 	bl	8008940 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a368:	2301      	movs	r3, #1
 800a36a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a36c:	697b      	ldr	r3, [r7, #20]
	}
 800a36e:	4618      	mov	r0, r3
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	200006bc 	.word	0x200006bc
 800a37c:	200006c0 	.word	0x200006c0
 800a380:	200007b0 	.word	0x200007b0

0800a384 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a38e:	4b2b      	ldr	r3, [pc, #172]	; (800a43c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a394:	4b2a      	ldr	r3, [pc, #168]	; (800a440 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a39e:	4b28      	ldr	r3, [pc, #160]	; (800a440 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fe fb27 	bl	80089f8 <uxListRemove>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10b      	bne.n	800a3c8 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a3b0:	4b23      	ldr	r3, [pc, #140]	; (800a440 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	4093      	lsls	r3, r2
 800a3bc:	43da      	mvns	r2, r3
 800a3be:	4b21      	ldr	r3, [pc, #132]	; (800a444 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	4a1f      	ldr	r2, [pc, #124]	; (800a444 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a3c6:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ce:	d10a      	bne.n	800a3e6 <prvAddCurrentTaskToDelayedList+0x62>
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d007      	beq.n	800a3e6 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3d6:	4b1a      	ldr	r3, [pc, #104]	; (800a440 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	3304      	adds	r3, #4
 800a3dc:	481a      	ldr	r0, [pc, #104]	; (800a448 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a3de:	4619      	mov	r1, r3
 800a3e0:	f7fe faae 	bl	8008940 <vListInsertEnd>
 800a3e4:	e026      	b.n	800a434 <prvAddCurrentTaskToDelayedList+0xb0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a3ee:	4b14      	ldr	r3, [pc, #80]	; (800a440 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d209      	bcs.n	800a412 <prvAddCurrentTaskToDelayedList+0x8e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3fe:	4b13      	ldr	r3, [pc, #76]	; (800a44c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	4b0f      	ldr	r3, [pc, #60]	; (800a440 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	3304      	adds	r3, #4
 800a408:	4610      	mov	r0, r2
 800a40a:	4619      	mov	r1, r3
 800a40c:	f7fe fabc 	bl	8008988 <vListInsert>
 800a410:	e010      	b.n	800a434 <prvAddCurrentTaskToDelayedList+0xb0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a412:	4b0f      	ldr	r3, [pc, #60]	; (800a450 <prvAddCurrentTaskToDelayedList+0xcc>)
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	4b0a      	ldr	r3, [pc, #40]	; (800a440 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	3304      	adds	r3, #4
 800a41c:	4610      	mov	r0, r2
 800a41e:	4619      	mov	r1, r3
 800a420:	f7fe fab2 	bl	8008988 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800a424:	4b0b      	ldr	r3, [pc, #44]	; (800a454 <prvAddCurrentTaskToDelayedList+0xd0>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d202      	bcs.n	800a434 <prvAddCurrentTaskToDelayedList+0xb0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800a42e:	4a09      	ldr	r2, [pc, #36]	; (800a454 <prvAddCurrentTaskToDelayedList+0xd0>)
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	200007ac 	.word	0x200007ac
 800a440:	200006bc 	.word	0x200006bc
 800a444:	200007b0 	.word	0x200007b0
 800a448:	20000794 	.word	0x20000794
 800a44c:	20000764 	.word	0x20000764
 800a450:	20000760 	.word	0x20000760
 800a454:	200007c8 	.word	0x200007c8

0800a458 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800a45e:	2300      	movs	r3, #0
 800a460:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a462:	f000 fb4f 	bl	800ab04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a466:	4b11      	ldr	r3, [pc, #68]	; (800a4ac <xTimerCreateTimerTask+0x54>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00b      	beq.n	800a486 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800a46e:	2304      	movs	r3, #4
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	4b0f      	ldr	r3, [pc, #60]	; (800a4b0 <xTimerCreateTimerTask+0x58>)
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	480f      	ldr	r0, [pc, #60]	; (800a4b4 <xTimerCreateTimerTask+0x5c>)
 800a478:	490f      	ldr	r1, [pc, #60]	; (800a4b8 <xTimerCreateTimerTask+0x60>)
 800a47a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a47e:	2300      	movs	r3, #0
 800a480:	f7ff f82a 	bl	80094d8 <xTaskCreate>
 800a484:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d109      	bne.n	800a4a0 <xTimerCreateTimerTask+0x48>
 800a48c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	603b      	str	r3, [r7, #0]
 800a49e:	e7fe      	b.n	800a49e <xTimerCreateTimerTask+0x46>
	return xReturn;
 800a4a0:	687b      	ldr	r3, [r7, #4]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	20000804 	.word	0x20000804
 800a4b0:	20000808 	.word	0x20000808
 800a4b4:	0800a6b1 	.word	0x0800a6b1
 800a4b8:	0800f580 	.word	0x0800f580

0800a4bc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b088      	sub	sp, #32
 800a4c0:	af02      	add	r7, sp, #8
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
 800a4c8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a4ca:	202c      	movs	r0, #44	; 0x2c
 800a4cc:	f7fe f9e8 	bl	80088a0 <pvPortMalloc>
 800a4d0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00d      	beq.n	800a4f4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a4e0:	6a3b      	ldr	r3, [r7, #32]
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	9301      	str	r3, [sp, #4]
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	68b9      	ldr	r1, [r7, #8]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	f000 f806 	bl	800a500 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a4f4:	697b      	ldr	r3, [r7, #20]
	}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3718      	adds	r7, #24
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop

0800a500 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]
 800a50c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d109      	bne.n	800a528 <prvInitialiseNewTimer+0x28>
 800a514:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	617b      	str	r3, [r7, #20]
 800a526:	e7fe      	b.n	800a526 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d01e      	beq.n	800a56c <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a52e:	f000 fae9 	bl	800ab04 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a540:	683a      	ldr	r2, [r7, #0]
 800a542:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a546:	6a3a      	ldr	r2, [r7, #32]
 800a548:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54c:	3304      	adds	r3, #4
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fe f9ea 	bl	8008928 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d008      	beq.n	800a56c <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a560:	f043 0304 	orr.w	r3, r3, #4
 800a564:	b2da      	uxtb	r2, r3
 800a566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a568:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a56c:	3718      	adds	r7, #24
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop

0800a574 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b08a      	sub	sp, #40	; 0x28
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
 800a580:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a582:	2300      	movs	r3, #0
 800a584:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d109      	bne.n	800a5a0 <xTimerGenericCommand+0x2c>
 800a58c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	623b      	str	r3, [r7, #32]
 800a59e:	e7fe      	b.n	800a59e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a5a0:	4b1c      	ldr	r3, [pc, #112]	; (800a614 <xTimerGenericCommand+0xa0>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d030      	beq.n	800a60a <xTimerGenericCommand+0x96>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	2b05      	cmp	r3, #5
 800a5b8:	dc1c      	bgt.n	800a5f4 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a5ba:	f7ff fe3f 	bl	800a23c <xTaskGetSchedulerState>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d10b      	bne.n	800a5dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a5c4:	4b13      	ldr	r3, [pc, #76]	; (800a614 <xTimerGenericCommand+0xa0>)
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	f107 0310 	add.w	r3, r7, #16
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f7fe fb04 	bl	8008be0 <xQueueGenericSend>
 800a5d8:	6278      	str	r0, [r7, #36]	; 0x24
 800a5da:	e016      	b.n	800a60a <xTimerGenericCommand+0x96>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a5dc:	4b0d      	ldr	r3, [pc, #52]	; (800a614 <xTimerGenericCommand+0xa0>)
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	f107 0310 	add.w	r3, r7, #16
 800a5e4:	4610      	mov	r0, r2
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	f7fe faf8 	bl	8008be0 <xQueueGenericSend>
 800a5f0:	6278      	str	r0, [r7, #36]	; 0x24
 800a5f2:	e00a      	b.n	800a60a <xTimerGenericCommand+0x96>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a5f4:	4b07      	ldr	r3, [pc, #28]	; (800a614 <xTimerGenericCommand+0xa0>)
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	f107 0310 	add.w	r3, r7, #16
 800a5fc:	4610      	mov	r0, r2
 800a5fe:	4619      	mov	r1, r3
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	2300      	movs	r3, #0
 800a604:	f7fe fc0a 	bl	8008e1c <xQueueGenericSendFromISR>
 800a608:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3728      	adds	r7, #40	; 0x28
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	20000804 	.word	0x20000804

0800a618 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b088      	sub	sp, #32
 800a61c:	af02      	add	r7, sp, #8
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a622:	4b22      	ldr	r3, [pc, #136]	; (800a6ac <prvProcessExpiredTimer+0x94>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	3304      	adds	r3, #4
 800a630:	4618      	mov	r0, r3
 800a632:	f7fe f9e1 	bl	80089f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a63c:	f003 0304 	and.w	r3, r3, #4
 800a640:	2b00      	cmp	r3, #0
 800a642:	d022      	beq.n	800a68a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	699a      	ldr	r2, [r3, #24]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	4413      	add	r3, r2
 800a64c:	6978      	ldr	r0, [r7, #20]
 800a64e:	4619      	mov	r1, r3
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f000 f8d0 	bl	800a7f8 <prvInsertTimerInActiveList>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d01e      	beq.n	800a69c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a65e:	2300      	movs	r3, #0
 800a660:	9300      	str	r3, [sp, #0]
 800a662:	6978      	ldr	r0, [r7, #20]
 800a664:	2100      	movs	r1, #0
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	2300      	movs	r3, #0
 800a66a:	f7ff ff83 	bl	800a574 <xTimerGenericCommand>
 800a66e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d112      	bne.n	800a69c <prvProcessExpiredTimer+0x84>
 800a676:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a67a:	f383 8811 	msr	BASEPRI, r3
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	60fb      	str	r3, [r7, #12]
 800a688:	e7fe      	b.n	800a688 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a690:	f023 0301 	bic.w	r3, r3, #1
 800a694:	b2da      	uxtb	r2, r3
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	6a1b      	ldr	r3, [r3, #32]
 800a6a0:	6978      	ldr	r0, [r7, #20]
 800a6a2:	4798      	blx	r3
}
 800a6a4:	3718      	adds	r7, #24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	200007fc 	.word	0x200007fc

0800a6b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6b8:	f107 0308 	add.w	r3, r7, #8
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 f857 	bl	800a770 <prvGetNextExpireTime>
 800a6c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	f000 f803 	bl	800a6d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a6ce:	f000 f8d5 	bl	800a87c <prvProcessReceivedCommands>
	}
 800a6d2:	e7f1      	b.n	800a6b8 <prvTimerTask+0x8>

0800a6d4 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a6de:	f7ff f9e9 	bl	8009ab4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6e2:	f107 0308 	add.w	r3, r7, #8
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 f866 	bl	800a7b8 <prvSampleTimeNow>
 800a6ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d131      	bne.n	800a758 <prvProcessTimerOrBlockTask+0x84>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10a      	bne.n	800a710 <prvProcessTimerOrBlockTask+0x3c>
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d806      	bhi.n	800a710 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a702:	f7ff f9e5 	bl	8009ad0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	68f9      	ldr	r1, [r7, #12]
 800a70a:	f7ff ff85 	bl	800a618 <prvProcessExpiredTimer>
 800a70e:	e025      	b.n	800a75c <prvProcessTimerOrBlockTask+0x88>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d008      	beq.n	800a728 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a716:	4b13      	ldr	r3, [pc, #76]	; (800a764 <prvProcessTimerOrBlockTask+0x90>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d101      	bne.n	800a724 <prvProcessTimerOrBlockTask+0x50>
 800a720:	2301      	movs	r3, #1
 800a722:	e000      	b.n	800a726 <prvProcessTimerOrBlockTask+0x52>
 800a724:	2300      	movs	r3, #0
 800a726:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a728:	4b0f      	ldr	r3, [pc, #60]	; (800a768 <prvProcessTimerOrBlockTask+0x94>)
 800a72a:	6819      	ldr	r1, [r3, #0]
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	4608      	mov	r0, r1
 800a734:	4619      	mov	r1, r3
 800a736:	683a      	ldr	r2, [r7, #0]
 800a738:	f7fe fe3e 	bl	80093b8 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 800a73c:	f7ff f9c8 	bl	8009ad0 <xTaskResumeAll>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10a      	bne.n	800a75c <prvProcessTimerOrBlockTask+0x88>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 800a746:	4b09      	ldr	r3, [pc, #36]	; (800a76c <prvProcessTimerOrBlockTask+0x98>)
 800a748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	e001      	b.n	800a75c <prvProcessTimerOrBlockTask+0x88>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 800a758:	f7ff f9ba 	bl	8009ad0 <xTaskResumeAll>
		}
	}
}
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	20000800 	.word	0x20000800
 800a768:	20000804 	.word	0x20000804
 800a76c:	e000ed04 	.word	0xe000ed04

0800a770 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a778:	4b0e      	ldr	r3, [pc, #56]	; (800a7b4 <prvGetNextExpireTime+0x44>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <prvGetNextExpireTime+0x16>
 800a782:	2201      	movs	r2, #1
 800a784:	e000      	b.n	800a788 <prvGetNextExpireTime+0x18>
 800a786:	2200      	movs	r2, #0
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d105      	bne.n	800a7a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a794:	4b07      	ldr	r3, [pc, #28]	; (800a7b4 <prvGetNextExpireTime+0x44>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	60fb      	str	r3, [r7, #12]
 800a79e:	e001      	b.n	800a7a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	200007fc 	.word	0x200007fc

0800a7b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a7c0:	f7ff fa24 	bl	8009c0c <xTaskGetTickCount>
 800a7c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a7c6:	4b0b      	ldr	r3, [pc, #44]	; (800a7f4 <prvSampleTimeNow+0x3c>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d205      	bcs.n	800a7dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a7d0:	f000 f936 	bl	800aa40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	601a      	str	r2, [r3, #0]
 800a7da:	e002      	b.n	800a7e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a7e2:	4a04      	ldr	r2, [pc, #16]	; (800a7f4 <prvSampleTimeNow+0x3c>)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	2000080c 	.word	0x2000080c

0800a7f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
 800a804:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a806:	2300      	movs	r3, #0
 800a808:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d812      	bhi.n	800a844 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	1ad2      	subs	r2, r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	699b      	ldr	r3, [r3, #24]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d302      	bcc.n	800a832 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a82c:	2301      	movs	r3, #1
 800a82e:	617b      	str	r3, [r7, #20]
 800a830:	e01b      	b.n	800a86a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a832:	4b10      	ldr	r3, [pc, #64]	; (800a874 <prvInsertTimerInActiveList+0x7c>)
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	3304      	adds	r3, #4
 800a83a:	4610      	mov	r0, r2
 800a83c:	4619      	mov	r1, r3
 800a83e:	f7fe f8a3 	bl	8008988 <vListInsert>
 800a842:	e012      	b.n	800a86a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d206      	bcs.n	800a85a <prvInsertTimerInActiveList+0x62>
 800a84c:	68ba      	ldr	r2, [r7, #8]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	429a      	cmp	r2, r3
 800a852:	d302      	bcc.n	800a85a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a854:	2301      	movs	r3, #1
 800a856:	617b      	str	r3, [r7, #20]
 800a858:	e007      	b.n	800a86a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a85a:	4b07      	ldr	r3, [pc, #28]	; (800a878 <prvInsertTimerInActiveList+0x80>)
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	3304      	adds	r3, #4
 800a862:	4610      	mov	r0, r2
 800a864:	4619      	mov	r1, r3
 800a866:	f7fe f88f 	bl	8008988 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a86a:	697b      	ldr	r3, [r7, #20]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3718      	adds	r7, #24
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	20000800 	.word	0x20000800
 800a878:	200007fc 	.word	0x200007fc

0800a87c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b08e      	sub	sp, #56	; 0x38
 800a880:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a882:	e0cb      	b.n	800aa1c <prvProcessReceivedCommands+0x1a0>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	da18      	bge.n	800a8bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a88a:	1d3b      	adds	r3, r7, #4
 800a88c:	3304      	adds	r3, #4
 800a88e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a892:	2b00      	cmp	r3, #0
 800a894:	d109      	bne.n	800a8aa <prvProcessReceivedCommands+0x2e>
 800a896:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a89a:	f383 8811 	msr	BASEPRI, r3
 800a89e:	f3bf 8f6f 	isb	sy
 800a8a2:	f3bf 8f4f 	dsb	sy
 800a8a6:	61fb      	str	r3, [r7, #28]
 800a8a8:	e7fe      	b.n	800a8a8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8b0:	6851      	ldr	r1, [r2, #4]
 800a8b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8b4:	6892      	ldr	r2, [r2, #8]
 800a8b6:	4608      	mov	r0, r1
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f2c0 80ac 	blt.w	800aa1c <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ca:	695b      	ldr	r3, [r3, #20]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d004      	beq.n	800a8da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d2:	3304      	adds	r3, #4
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fe f88f 	bl	80089f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8da:	463b      	mov	r3, r7
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7ff ff6b 	bl	800a7b8 <prvSampleTimeNow>
 800a8e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b09      	cmp	r3, #9
 800a8e8:	f200 8097 	bhi.w	800aa1a <prvProcessReceivedCommands+0x19e>
 800a8ec:	a201      	add	r2, pc, #4	; (adr r2, 800a8f4 <prvProcessReceivedCommands+0x78>)
 800a8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f2:	bf00      	nop
 800a8f4:	0800a91d 	.word	0x0800a91d
 800a8f8:	0800a91d 	.word	0x0800a91d
 800a8fc:	0800a91d 	.word	0x0800a91d
 800a900:	0800a993 	.word	0x0800a993
 800a904:	0800a9a7 	.word	0x0800a9a7
 800a908:	0800a9f1 	.word	0x0800a9f1
 800a90c:	0800a91d 	.word	0x0800a91d
 800a910:	0800a91d 	.word	0x0800a91d
 800a914:	0800a993 	.word	0x0800a993
 800a918:	0800a9a7 	.word	0x0800a9a7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a922:	f043 0301 	orr.w	r3, r3, #1
 800a926:	b2da      	uxtb	r2, r3
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a932:	699b      	ldr	r3, [r3, #24]
 800a934:	441a      	add	r2, r3
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a93a:	4611      	mov	r1, r2
 800a93c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a93e:	f7ff ff5b 	bl	800a7f8 <prvInsertTimerInActiveList>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d023      	beq.n	800a990 <prvProcessReceivedCommands+0x114>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94a:	6a1b      	ldr	r3, [r3, #32]
 800a94c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a94e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a956:	f003 0304 	and.w	r3, r3, #4
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d018      	beq.n	800a990 <prvProcessReceivedCommands+0x114>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a962:	699b      	ldr	r3, [r3, #24]
 800a964:	441a      	add	r2, r3
 800a966:	2300      	movs	r3, #0
 800a968:	9300      	str	r3, [sp, #0]
 800a96a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a96c:	2100      	movs	r1, #0
 800a96e:	2300      	movs	r3, #0
 800a970:	f7ff fe00 	bl	800a574 <xTimerGenericCommand>
 800a974:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d109      	bne.n	800a990 <prvProcessReceivedCommands+0x114>
 800a97c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	61bb      	str	r3, [r7, #24]
 800a98e:	e7fe      	b.n	800a98e <prvProcessReceivedCommands+0x112>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 800a990:	e044      	b.n	800aa1c <prvProcessReceivedCommands+0x1a0>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a998:	f023 0301 	bic.w	r3, r3, #1
 800a99c:	b2da      	uxtb	r2, r3
 800a99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a9a4:	e03a      	b.n	800aa1c <prvProcessReceivedCommands+0x1a0>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9ac:	f043 0301 	orr.w	r3, r3, #1
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d109      	bne.n	800a9da <prvProcessReceivedCommands+0x15e>
 800a9c6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	617b      	str	r3, [r7, #20]
 800a9d8:	e7fe      	b.n	800a9d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9dc:	699a      	ldr	r2, [r3, #24]
 800a9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e0:	4413      	add	r3, r2
 800a9e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	f7ff ff05 	bl	800a7f8 <prvInsertTimerInActiveList>
					break;
 800a9ee:	e015      	b.n	800aa1c <prvProcessReceivedCommands+0x1a0>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9f6:	f003 0302 	and.w	r3, r3, #2
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d103      	bne.n	800aa06 <prvProcessReceivedCommands+0x18a>
						{
							vPortFree( pxTimer );
 800a9fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa00:	f7fd ff60 	bl	80088c4 <vPortFree>
 800aa04:	e008      	b.n	800aa18 <prvProcessReceivedCommands+0x19c>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa0c:	f023 0301 	bic.w	r3, r3, #1
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa18:	e000      	b.n	800aa1c <prvProcessReceivedCommands+0x1a0>

				default	:
					/* Don't expect to get here. */
					break;
 800aa1a:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa1c:	4b07      	ldr	r3, [pc, #28]	; (800aa3c <prvProcessReceivedCommands+0x1c0>)
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	1d3b      	adds	r3, r7, #4
 800aa22:	4610      	mov	r0, r2
 800aa24:	4619      	mov	r1, r3
 800aa26:	2200      	movs	r2, #0
 800aa28:	f7fe fa9e 	bl	8008f68 <xQueueReceive>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	f47f af28 	bne.w	800a884 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 800aa34:	3730      	adds	r7, #48	; 0x30
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20000804 	.word	0x20000804

0800aa40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b088      	sub	sp, #32
 800aa44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa46:	e047      	b.n	800aad8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa48:	4b2c      	ldr	r3, [pc, #176]	; (800aafc <prvSwitchTimerLists+0xbc>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa52:	4b2a      	ldr	r3, [pc, #168]	; (800aafc <prvSwitchTimerLists+0xbc>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	3304      	adds	r3, #4
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7fd ffc9 	bl	80089f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	6a1b      	ldr	r3, [r3, #32]
 800aa6a:	6938      	ldr	r0, [r7, #16]
 800aa6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa74:	f003 0304 	and.w	r3, r3, #4
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d02d      	beq.n	800aad8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	699a      	ldr	r2, [r3, #24]
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	4413      	add	r3, r2
 800aa84:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800aa86:	68fa      	ldr	r2, [r7, #12]
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d90e      	bls.n	800aaac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa9a:	4b18      	ldr	r3, [pc, #96]	; (800aafc <prvSwitchTimerLists+0xbc>)
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	4610      	mov	r0, r2
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	f7fd ff6f 	bl	8008988 <vListInsert>
 800aaaa:	e015      	b.n	800aad8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aaac:	2300      	movs	r3, #0
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	6938      	ldr	r0, [r7, #16]
 800aab2:	2100      	movs	r1, #0
 800aab4:	697a      	ldr	r2, [r7, #20]
 800aab6:	2300      	movs	r3, #0
 800aab8:	f7ff fd5c 	bl	800a574 <xTimerGenericCommand>
 800aabc:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d109      	bne.n	800aad8 <prvSwitchTimerLists+0x98>
 800aac4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	603b      	str	r3, [r7, #0]
 800aad6:	e7fe      	b.n	800aad6 <prvSwitchTimerLists+0x96>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aad8:	4b08      	ldr	r3, [pc, #32]	; (800aafc <prvSwitchTimerLists+0xbc>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1b2      	bne.n	800aa48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aae2:	4b06      	ldr	r3, [pc, #24]	; (800aafc <prvSwitchTimerLists+0xbc>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800aae8:	4b05      	ldr	r3, [pc, #20]	; (800ab00 <prvSwitchTimerLists+0xc0>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a03      	ldr	r2, [pc, #12]	; (800aafc <prvSwitchTimerLists+0xbc>)
 800aaee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aaf0:	4a03      	ldr	r2, [pc, #12]	; (800ab00 <prvSwitchTimerLists+0xc0>)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6013      	str	r3, [r2, #0]
}
 800aaf6:	3718      	adds	r7, #24
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	200007fc 	.word	0x200007fc
 800ab00:	20000800 	.word	0x20000800

0800ab04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab08:	f7fd fdb4 	bl	8008674 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab0c:	4b12      	ldr	r3, [pc, #72]	; (800ab58 <prvCheckForValidListAndQueue+0x54>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d11d      	bne.n	800ab50 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab14:	4811      	ldr	r0, [pc, #68]	; (800ab5c <prvCheckForValidListAndQueue+0x58>)
 800ab16:	f7fd fee7 	bl	80088e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab1a:	4811      	ldr	r0, [pc, #68]	; (800ab60 <prvCheckForValidListAndQueue+0x5c>)
 800ab1c:	f7fd fee4 	bl	80088e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab20:	4b10      	ldr	r3, [pc, #64]	; (800ab64 <prvCheckForValidListAndQueue+0x60>)
 800ab22:	4a0e      	ldr	r2, [pc, #56]	; (800ab5c <prvCheckForValidListAndQueue+0x58>)
 800ab24:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab26:	4b10      	ldr	r3, [pc, #64]	; (800ab68 <prvCheckForValidListAndQueue+0x64>)
 800ab28:	4a0d      	ldr	r2, [pc, #52]	; (800ab60 <prvCheckForValidListAndQueue+0x5c>)
 800ab2a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ab2c:	2005      	movs	r0, #5
 800ab2e:	2110      	movs	r1, #16
 800ab30:	2200      	movs	r2, #0
 800ab32:	f7fd fff3 	bl	8008b1c <xQueueGenericCreate>
 800ab36:	4602      	mov	r2, r0
 800ab38:	4b07      	ldr	r3, [pc, #28]	; (800ab58 <prvCheckForValidListAndQueue+0x54>)
 800ab3a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab3c:	4b06      	ldr	r3, [pc, #24]	; (800ab58 <prvCheckForValidListAndQueue+0x54>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d005      	beq.n	800ab50 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab44:	4b04      	ldr	r3, [pc, #16]	; (800ab58 <prvCheckForValidListAndQueue+0x54>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	4908      	ldr	r1, [pc, #32]	; (800ab6c <prvCheckForValidListAndQueue+0x68>)
 800ab4c:	f7fe fc0c 	bl	8009368 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab50:	f7fd fdbe 	bl	80086d0 <vPortExitCritical>
}
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	20000804 	.word	0x20000804
 800ab5c:	200007d4 	.word	0x200007d4
 800ab60:	200007e8 	.word	0x200007e8
 800ab64:	200007fc 	.word	0x200007fc
 800ab68:	20000800 	.word	0x20000800
 800ab6c:	0800f588 	.word	0x0800f588

0800ab70 <EVENT_GENERATOR_Init>:

/*
 * This function Initializes a EVENT_GENERATOR APP instances based on user configuration.
 */
EVENT_GENERATOR_STATUS_t EVENT_GENERATOR_Init(EVENT_GENERATOR_t *const handle)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_GENERATOR_Init:handle NULL" , (handle != NULL));
  
  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	7b5b      	ldrb	r3, [r3, #13]
 800ab7c:	f083 0301 	eor.w	r3, r3, #1
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d012      	beq.n	800abac <EVENT_GENERATOR_Init+0x3c>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_OGU_Init(handle->eru, handle->channel, handle->config);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6819      	ldr	r1, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	7b1a      	ldrb	r2, [r3, #12]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	4608      	mov	r0, r1
 800ab94:	4611      	mov	r1, r2
 800ab96:	461a      	mov	r2, r3
 800ab98:	f7fc fde8 	bl	800776c <XMC_ERU_OGU_Init>
    #if (EVENT_GENERATOR_NMI_SUPPORTED == 1U)
    /* Promote the eru event as NMI, Applicable only for XMC4000 devices */
    XMC_SCU_INTERRUPT_EnableNmiRequest(handle->nmi_eru_msk);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fb fdbb 	bl	800671c <XMC_SCU_INTERRUPT_EnableNmiRequest>
    #endif
    /* Update the init status of the instance */
    handle->init_status = true;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2201      	movs	r2, #1
 800abaa:	735a      	strb	r2, [r3, #13]
  }
  
  return EVENT_GENERATOR_STATUS_SUCCESS;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3708      	adds	r7, #8
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop

0800abb8 <EVENT_DETECTOR_Init>:

/*
 * This function Initializes a EVENT_DETECTOR APP instances (ERSx+ETLx) based on user configuration.
 */
EVENT_DETECTOR_STATUS_t EVENT_DETECTOR_Init(EVENT_DETECTOR_t *const handle)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_DETECTOR_Init:handle NULL" , (handle != NULL));

  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	7b1b      	ldrb	r3, [r3, #12]
 800abc4:	f083 0301 	eor.w	r3, r3, #1
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00d      	beq.n	800abea <EVENT_DETECTOR_Init+0x32>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_ETL_Init(handle->eru, handle->channel, handle->config);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6819      	ldr	r1, [r3, #0]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	791a      	ldrb	r2, [r3, #4]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	4608      	mov	r0, r1
 800abdc:	4611      	mov	r1, r2
 800abde:	461a      	mov	r2, r3
 800abe0:	f7fc fd9e 	bl	8007720 <XMC_ERU_ETL_Init>
    /* Update the init status of the instance */
    handle->init_status = true;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	731a      	strb	r2, [r3, #12]
  }
  
  return EVENT_DETECTOR_STATUS_SUCCESS;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6819      	ldr	r1, [r3, #0]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	7c1a      	ldrb	r2, [r3, #16]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	3304      	adds	r3, #4
 800ac08:	4608      	mov	r0, r1
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	f7fb fc03 	bl	8006418 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6819      	ldr	r1, [r3, #0]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	7c1a      	ldrb	r2, [r3, #16]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	7c5b      	ldrb	r3, [r3, #17]
 800ac1e:	4608      	mov	r0, r1
 800ac20:	4611      	mov	r1, r2
 800ac22:	461a      	mov	r2, r3
 800ac24:	f7fc fdb6 	bl	8007794 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop

0800ac34 <__HardFault_Handler>:
 */
#if defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#endif
__attribute__((naked)) void __HardFault_Handler(uint32_t args[])
{
 800ac34:	4603      	mov	r3, r0

  // Configurable Fault Status Register
  // Consists of MMSR, BFSR and UFSR
  _CFSR = SCB->CFSR;
 800ac36:	4a18      	ldr	r2, [pc, #96]	; (800ac98 <__HardFault_Handler+0x64>)
 800ac38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ac3a:	4918      	ldr	r1, [pc, #96]	; (800ac9c <__HardFault_Handler+0x68>)
 800ac3c:	600a      	str	r2, [r1, #0]

  // Hard Fault Status Register
  _HFSR = SCB->HFSR;
 800ac3e:	4a16      	ldr	r2, [pc, #88]	; (800ac98 <__HardFault_Handler+0x64>)
 800ac40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ac42:	4917      	ldr	r1, [pc, #92]	; (800aca0 <__HardFault_Handler+0x6c>)
 800ac44:	600a      	str	r2, [r1, #0]

  // Debug Fault Status Register
  _DFSR = SCB->DFSR;
 800ac46:	4a14      	ldr	r2, [pc, #80]	; (800ac98 <__HardFault_Handler+0x64>)
 800ac48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ac4a:	4916      	ldr	r1, [pc, #88]	; (800aca4 <__HardFault_Handler+0x70>)
 800ac4c:	600a      	str	r2, [r1, #0]

  // Auxiliary Fault Status Register
  _AFSR = SCB->AFSR;
 800ac4e:	4a12      	ldr	r2, [pc, #72]	; (800ac98 <__HardFault_Handler+0x64>)
 800ac50:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ac52:	4915      	ldr	r1, [pc, #84]	; (800aca8 <__HardFault_Handler+0x74>)
 800ac54:	600a      	str	r2, [r1, #0]

  // Read the Fault Address Registers. These may not contain valid values.
  // Check BFARVALID/MMARVALID to see if they are valid values
  // MemManage Fault Address Register
  _MMAR = SCB->MMFAR;
 800ac56:	4a10      	ldr	r2, [pc, #64]	; (800ac98 <__HardFault_Handler+0x64>)
 800ac58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ac5a:	4914      	ldr	r1, [pc, #80]	; (800acac <__HardFault_Handler+0x78>)
 800ac5c:	600a      	str	r2, [r1, #0]

  // Bus Fault Address Register
  _BFAR = SCB->BFAR;
 800ac5e:	4a0e      	ldr	r2, [pc, #56]	; (800ac98 <__HardFault_Handler+0x64>)
 800ac60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ac62:	4913      	ldr	r1, [pc, #76]	; (800acb0 <__HardFault_Handler+0x7c>)
 800ac64:	600a      	str	r2, [r1, #0]

  stacked_r0 = ((uint32_t)args[0]);
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	4912      	ldr	r1, [pc, #72]	; (800acb4 <__HardFault_Handler+0x80>)
 800ac6a:	600a      	str	r2, [r1, #0]
  stacked_r1 = ((uint32_t)args[1]);
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	4912      	ldr	r1, [pc, #72]	; (800acb8 <__HardFault_Handler+0x84>)
 800ac70:	600a      	str	r2, [r1, #0]
  stacked_r2 = ((uint32_t)args[2]);
 800ac72:	689a      	ldr	r2, [r3, #8]
 800ac74:	4911      	ldr	r1, [pc, #68]	; (800acbc <__HardFault_Handler+0x88>)
 800ac76:	600a      	str	r2, [r1, #0]
  stacked_r3 = ((uint32_t)args[3]);
 800ac78:	68da      	ldr	r2, [r3, #12]
 800ac7a:	4911      	ldr	r1, [pc, #68]	; (800acc0 <__HardFault_Handler+0x8c>)
 800ac7c:	600a      	str	r2, [r1, #0]
  stacked_r12 = ((uint32_t)args[4]);
 800ac7e:	691a      	ldr	r2, [r3, #16]
 800ac80:	4910      	ldr	r1, [pc, #64]	; (800acc4 <__HardFault_Handler+0x90>)
 800ac82:	600a      	str	r2, [r1, #0]
  stacked_lr = ((uint32_t)args[5]);
 800ac84:	695a      	ldr	r2, [r3, #20]
 800ac86:	4910      	ldr	r1, [pc, #64]	; (800acc8 <__HardFault_Handler+0x94>)
 800ac88:	600a      	str	r2, [r1, #0]
  stacked_pc = ((uint32_t)args[6]);
 800ac8a:	699a      	ldr	r2, [r3, #24]
 800ac8c:	490f      	ldr	r1, [pc, #60]	; (800accc <__HardFault_Handler+0x98>)
 800ac8e:	600a      	str	r2, [r1, #0]
  stacked_psr = ((uint32_t)args[7]);
 800ac90:	69db      	ldr	r3, [r3, #28]
 800ac92:	4a0f      	ldr	r2, [pc, #60]	; (800acd0 <__HardFault_Handler+0x9c>)
 800ac94:	6013      	str	r3, [r2, #0]

  __asm("BKPT 0\n") ; // Break into the debugger
 800ac96:	be00      	bkpt	0x0000
 800ac98:	e000ed00 	.word	0xe000ed00
 800ac9c:	20001214 	.word	0x20001214
 800aca0:	20001238 	.word	0x20001238
 800aca4:	20001240 	.word	0x20001240
 800aca8:	2000123c 	.word	0x2000123c
 800acac:	2000122c 	.word	0x2000122c
 800acb0:	2000120c 	.word	0x2000120c
 800acb4:	20001224 	.word	0x20001224
 800acb8:	20001210 	.word	0x20001210
 800acbc:	20001234 	.word	0x20001234
 800acc0:	20001218 	.word	0x20001218
 800acc4:	20001228 	.word	0x20001228
 800acc8:	2000121c 	.word	0x2000121c
 800accc:	20001220 	.word	0x20001220
 800acd0:	20001230 	.word	0x20001230

0800acd4 <HardFault_Handler>:

/*GCC*/
#if defined(__GNUC__)
__attribute__((naked)) void HardFault_Handler(void)
{
__asm("  TST    LR, #4  \n"
 800acd4:	f01e 0f04 	tst.w	lr, #4
 800acd8:	bf0c      	ite	eq
 800acda:	f3ef 8008 	mrseq	r0, MSP
 800acde:	f3ef 8009 	mrsne	r0, PSP
 800ace2:	f7ff bfa7 	b.w	800ac34 <__HardFault_Handler>
 800ace6:	bf00      	nop

0800ace8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f003 0307 	and.w	r3, r3, #7
 800acf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800acf8:	4b0c      	ldr	r3, [pc, #48]	; (800ad2c <__NVIC_SetPriorityGrouping+0x44>)
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ad04:	4013      	ands	r3, r2
 800ad06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800ad10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ad14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad18:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800ad1a:	4a04      	ldr	r2, [pc, #16]	; (800ad2c <__NVIC_SetPriorityGrouping+0x44>)
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	60d3      	str	r3, [r2, #12]
}
 800ad20:	3714      	adds	r7, #20
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	e000ed00 	.word	0xe000ed00

0800ad30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ad30:	b480      	push	{r7}
 800ad32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ad34:	4b04      	ldr	r3, [pc, #16]	; (800ad48 <__NVIC_GetPriorityGrouping+0x18>)
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad3c:	0a1b      	lsrs	r3, r3, #8
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr
 800ad48:	e000ed00 	.word	0xe000ed00

0800ad4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	4603      	mov	r3, r0
 800ad54:	6039      	str	r1, [r7, #0]
 800ad56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	db0a      	blt.n	800ad76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad60:	490d      	ldr	r1, [pc, #52]	; (800ad98 <__NVIC_SetPriority+0x4c>)
 800ad62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad66:	683a      	ldr	r2, [r7, #0]
 800ad68:	b2d2      	uxtb	r2, r2
 800ad6a:	0092      	lsls	r2, r2, #2
 800ad6c:	b2d2      	uxtb	r2, r2
 800ad6e:	440b      	add	r3, r1
 800ad70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800ad74:	e00a      	b.n	800ad8c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad76:	4909      	ldr	r1, [pc, #36]	; (800ad9c <__NVIC_SetPriority+0x50>)
 800ad78:	79fb      	ldrb	r3, [r7, #7]
 800ad7a:	f003 030f 	and.w	r3, r3, #15
 800ad7e:	3b04      	subs	r3, #4
 800ad80:	683a      	ldr	r2, [r7, #0]
 800ad82:	b2d2      	uxtb	r2, r2
 800ad84:	0092      	lsls	r2, r2, #2
 800ad86:	b2d2      	uxtb	r2, r2
 800ad88:	440b      	add	r3, r1
 800ad8a:	761a      	strb	r2, [r3, #24]
  }
}
 800ad8c:	370c      	adds	r7, #12
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr
 800ad96:	bf00      	nop
 800ad98:	e000e100 	.word	0xe000e100
 800ad9c:	e000ed00 	.word	0xe000ed00

0800ada0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b089      	sub	sp, #36	; 0x24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f003 0307 	and.w	r3, r3, #7
 800adb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	f1c3 0307 	rsb	r3, r3, #7
 800adba:	2b06      	cmp	r3, #6
 800adbc:	bf28      	it	cs
 800adbe:	2306      	movcs	r3, #6
 800adc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	3306      	adds	r3, #6
 800adc6:	2b06      	cmp	r3, #6
 800adc8:	d902      	bls.n	800add0 <NVIC_EncodePriority+0x30>
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	3b01      	subs	r3, #1
 800adce:	e000      	b.n	800add2 <NVIC_EncodePriority+0x32>
 800add0:	2300      	movs	r3, #0
 800add2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	2201      	movs	r2, #1
 800add8:	fa02 f303 	lsl.w	r3, r2, r3
 800addc:	1e5a      	subs	r2, r3, #1
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	401a      	ands	r2, r3
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	2101      	movs	r1, #1
 800adea:	fa01 f303 	lsl.w	r3, r1, r3
 800adee:	1e59      	subs	r1, r3, #1
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800adf4:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3724      	adds	r7, #36	; 0x24
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop

0800ae04 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800ae0a:	2001      	movs	r0, #1
 800ae0c:	f7ff ff6c 	bl	800ace8 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800ae10:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 800ae12:	4b36      	ldr	r3, [pc, #216]	; (800aeec <SystemCoreSetup+0xe8>)
 800ae14:	4a36      	ldr	r2, [pc, #216]	; (800aef0 <SystemCoreSetup+0xec>)
 800ae16:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ae18:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800ae1c:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800ae1e:	4a33      	ldr	r2, [pc, #204]	; (800aeec <SystemCoreSetup+0xe8>)
 800ae20:	4b32      	ldr	r3, [pc, #200]	; (800aeec <SystemCoreSetup+0xe8>)
 800ae22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800ae2e:	4b31      	ldr	r3, [pc, #196]	; (800aef4 <SystemCoreSetup+0xf0>)
 800ae30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae34:	3314      	adds	r3, #20
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f023 030f 	bic.w	r3, r3, #15
 800ae40:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f043 0303 	orr.w	r3, r3, #3
 800ae48:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800ae4a:	4b2a      	ldr	r3, [pc, #168]	; (800aef4 <SystemCoreSetup+0xf0>)
 800ae4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae50:	3314      	adds	r3, #20
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	601a      	str	r2, [r3, #0]


  /* Enable divide by zero trap */
  SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk; 
 800ae56:	4a25      	ldr	r2, [pc, #148]	; (800aeec <SystemCoreSetup+0xe8>)
 800ae58:	4b24      	ldr	r3, [pc, #144]	; (800aeec <SystemCoreSetup+0xe8>)
 800ae5a:	695b      	ldr	r3, [r3, #20]
 800ae5c:	f043 0310 	orr.w	r3, r3, #16
 800ae60:	6153      	str	r3, [r2, #20]

  /* Enable unaligned memory access trap */
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk; 
 800ae62:	4a22      	ldr	r2, [pc, #136]	; (800aeec <SystemCoreSetup+0xe8>)
 800ae64:	4b21      	ldr	r3, [pc, #132]	; (800aeec <SystemCoreSetup+0xe8>)
 800ae66:	695b      	ldr	r3, [r3, #20]
 800ae68:	f043 0308 	orr.w	r3, r3, #8
 800ae6c:	6153      	str	r3, [r2, #20]

  /* Set priority of memory managment fault */
  NVIC_SetPriority((IRQn_Type)MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0,0));
 800ae6e:	f7ff ff5f 	bl	800ad30 <__NVIC_GetPriorityGrouping>
 800ae72:	4603      	mov	r3, r0
 800ae74:	4618      	mov	r0, r3
 800ae76:	2100      	movs	r1, #0
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f7ff ff91 	bl	800ada0 <NVIC_EncodePriority>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	f06f 000b 	mvn.w	r0, #11
 800ae84:	4619      	mov	r1, r3
 800ae86:	f7ff ff61 	bl	800ad4c <__NVIC_SetPriority>
  /* Enable memory management fault */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800ae8a:	4a18      	ldr	r2, [pc, #96]	; (800aeec <SystemCoreSetup+0xe8>)
 800ae8c:	4b17      	ldr	r3, [pc, #92]	; (800aeec <SystemCoreSetup+0xe8>)
 800ae8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae94:	6253      	str	r3, [r2, #36]	; 0x24


  /* Set priority of bus fault */
  NVIC_SetPriority((IRQn_Type)BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0,0));
 800ae96:	f7ff ff4b 	bl	800ad30 <__NVIC_GetPriorityGrouping>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	2100      	movs	r1, #0
 800aea0:	2200      	movs	r2, #0
 800aea2:	f7ff ff7d 	bl	800ada0 <NVIC_EncodePriority>
 800aea6:	4603      	mov	r3, r0
 800aea8:	f06f 000a 	mvn.w	r0, #10
 800aeac:	4619      	mov	r1, r3
 800aeae:	f7ff ff4d 	bl	800ad4c <__NVIC_SetPriority>
  /* Enable bus fault */
  SCB->SHCSR |= SCB_SHCSR_BUSFAULTENA_Msk;
 800aeb2:	4a0e      	ldr	r2, [pc, #56]	; (800aeec <SystemCoreSetup+0xe8>)
 800aeb4:	4b0d      	ldr	r3, [pc, #52]	; (800aeec <SystemCoreSetup+0xe8>)
 800aeb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aebc:	6253      	str	r3, [r2, #36]	; 0x24
 

  /* Set priority of usage fault */
  NVIC_SetPriority((IRQn_Type)UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0,0));
 800aebe:	f7ff ff37 	bl	800ad30 <__NVIC_GetPriorityGrouping>
 800aec2:	4603      	mov	r3, r0
 800aec4:	4618      	mov	r0, r3
 800aec6:	2100      	movs	r1, #0
 800aec8:	2200      	movs	r2, #0
 800aeca:	f7ff ff69 	bl	800ada0 <NVIC_EncodePriority>
 800aece:	4603      	mov	r3, r0
 800aed0:	f06f 0009 	mvn.w	r0, #9
 800aed4:	4619      	mov	r1, r3
 800aed6:	f7ff ff39 	bl	800ad4c <__NVIC_SetPriority>
  /* Enable usage fault */
  SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk;
 800aeda:	4a04      	ldr	r2, [pc, #16]	; (800aeec <SystemCoreSetup+0xe8>)
 800aedc:	4b03      	ldr	r3, [pc, #12]	; (800aeec <SystemCoreSetup+0xe8>)
 800aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aee4:	6253      	str	r3, [r2, #36]	; 0x24
  
}
 800aee6:	3708      	adds	r7, #8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	e000ed00 	.word	0xe000ed00
 800aef0:	08000000 	.word	0x08000000
 800aef4:	58001000 	.word	0x58001000

0800aef8 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b085      	sub	sp, #20
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 800af00:	2300      	movs	r3, #0
 800af02:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	701a      	strb	r2, [r3, #0]

  return (status);
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3714      	adds	r7, #20
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 800af18:	b480      	push	{r7}
 800af1a:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 800af1c:	4b02      	ldr	r3, [pc, #8]	; (800af28 <OSCHP_GetFrequency+0x10>)
}
 800af1e:	4618      	mov	r0, r3
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr
 800af28:	00b71b00 	.word	0x00b71b00

0800af2c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 800af2c:	b5b0      	push	{r4, r5, r7, lr}
 800af2e:	b086      	sub	sp, #24
 800af30:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 800af32:	4b12      	ldr	r3, [pc, #72]	; (800af7c <SystemCoreClockSetup+0x50>)
 800af34:	1d3c      	adds	r4, r7, #4
 800af36:	461d      	mov	r5, r3
 800af38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af3c:	682b      	ldr	r3, [r5, #0]
 800af3e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 800af40:	1d3b      	adds	r3, r7, #4
 800af42:	4618      	mov	r0, r3
 800af44:	f7fb fb74 	bl	8006630 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 800af48:	2000      	movs	r0, #0
 800af4a:	f7fb fc81 	bl	8006850 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800af4e:	2000      	movs	r0, #0
 800af50:	f7fb fc36 	bl	80067c0 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 800af54:	2004      	movs	r0, #4
 800af56:	f7fb fd07 	bl	8006968 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800af5a:	2001      	movs	r0, #1
 800af5c:	2120      	movs	r1, #32
 800af5e:	f7fb fd4f 	bl	8006a00 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 800af62:	2000      	movs	r0, #0
 800af64:	f7fb fc40 	bl	80067e8 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 800af68:	2001      	movs	r0, #1
 800af6a:	f7fb fd25 	bl	80069b8 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800af6e:	2001      	movs	r0, #1
 800af70:	f7fb fd0e 	bl	8006990 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 800af74:	3718      	adds	r7, #24
 800af76:	46bd      	mov	sp, r7
 800af78:	bdb0      	pop	{r4, r5, r7, pc}
 800af7a:	bf00      	nop
 800af7c:	0800f600 	.word	0x0800f600

0800af80 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
                                          const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
                                          const uint32_t service_request)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	460b      	mov	r3, r1
 800af8a:	607a      	str	r2, [r7, #4]
 800af8c:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	689a      	ldr	r2, [r3, #8]
 800af92:	7afb      	ldrb	r3, [r7, #11]
 800af94:	2107      	movs	r1, #7
 800af96:	fa01 f303 	lsl.w	r3, r1, r3
 800af9a:	43db      	mvns	r3, r3
 800af9c:	401a      	ands	r2, r3
 800af9e:	7afb      	ldrb	r3, [r7, #11]
 800afa0:	6879      	ldr	r1, [r7, #4]
 800afa2:	fa01 f303 	lsl.w	r3, r1, r3
 800afa6:	431a      	orrs	r2, r3
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	609a      	str	r2, [r3, #8]
}
 800afac:	3714      	adds	r7, #20
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop

0800afb8 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	460b      	mov	r3, r1
 800afc2:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 800afcc:	78fb      	ldrb	r3, [r7, #3]
 800afce:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 800afd2:	431a      	orrs	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 800afd8:	370c      	adds	r7, #12
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop

0800afe4 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	60da      	str	r2, [r3, #12]
}
 800aff8:	370c      	adds	r7, #12
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop

0800b004 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	601a      	str	r2, [r3, #0]
}
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop

0800b024 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	601a      	str	r2, [r3, #0]
}
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop

0800b044 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f043 0201 	orr.w	r2, r3, #1
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	601a      	str	r2, [r3, #0]
}
 800b058:	370c      	adds	r7, #12
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop

0800b064 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f023 0201 	bic.w	r2, r3, #1
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	601a      	str	r2, [r3, #0]
}
 800b078:	370c      	adds	r7, #12
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop

0800b084 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	460b      	mov	r3, r1
 800b08e:	607a      	str	r2, [r7, #4]
 800b090:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	6812      	ldr	r2, [r2, #0]
 800b09a:	6891      	ldr	r1, [r2, #8]
 800b09c:	7afa      	ldrb	r2, [r7, #11]
 800b09e:	2007      	movs	r0, #7
 800b0a0:	fa00 f202 	lsl.w	r2, r0, r2
 800b0a4:	43d2      	mvns	r2, r2
 800b0a6:	4011      	ands	r1, r2
                          (service_request << (uint32_t)can_mo_ptr_int);
 800b0a8:	7afa      	ldrb	r2, [r7, #11]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 800b0b0:	430a      	orrs	r2, r1
 800b0b2:	609a      	str	r2, [r3, #8]
                          (service_request << (uint32_t)can_mo_ptr_int);
}
 800b0b4:	3714      	adds	r7, #20
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop

0800b0c0 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
                                        const uint32_t event)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	6812      	ldr	r2, [r2, #0]
 800b0d2:	6811      	ldr	r1, [r2, #0]
 800b0d4:	683a      	ldr	r2, [r7, #0]
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	601a      	str	r2, [r3, #0]
}
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <CAN_NODE_MO_EnableTxEvent>:
 *     return (1);
 *  }
 *  @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800b0f6:	f7ff ffe3 	bl	800b0c0 <XMC_CAN_MO_EnableEvent>
}
 800b0fa:	3708      	adds	r7, #8
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <CAN_NODE_MO_EnableRxEvent>:
 *  }
 *  @endcode
 */

__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4618      	mov	r0, r3
 800b10e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b112:	f7ff ffd5 	bl	800b0c0 <XMC_CAN_MO_EnableEvent>
}
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 800b124:	2300      	movs	r3, #0
 800b126:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 f831 	bl	800b190 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800b134:	2b00      	cmp	r3, #0
 800b136:	d003      	beq.n	800b140 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f043 0302 	orr.w	r3, r3, #2
 800b13e:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800b146:	2b00      	cmp	r3, #0
 800b148:	d003      	beq.n	800b152 <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f043 0304 	orr.w	r3, r3, #4
 800b150:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d003      	beq.n	800b164 <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f043 0308 	orr.w	r3, r3, #8
 800b162:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	4618      	mov	r0, r3
 800b16a:	68f9      	ldr	r1, [r7, #12]
 800b16c:	f7fc f9c4 	bl	80074f8 <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800b176:	2b00      	cmp	r3, #0
 800b178:	d006      	beq.n	800b188 <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	4618      	mov	r0, r3
 800b180:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b184:	f7fc f9b8 	bl	80074f8 <XMC_CAN_NODE_EnableEvent>
  }

}
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop

0800b190 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1a2:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 800b1a4:	4610      	mov	r0, r2
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	f7ff fee9 	bl	800af80 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1b8:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 800b1ba:	4610      	mov	r0, r2
 800b1bc:	2104      	movs	r1, #4
 800b1be:	461a      	mov	r2, r3
 800b1c0:	f7ff fede 	bl	800af80 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1ce:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 800b1d0:	4610      	mov	r0, r2
 800b1d2:	2108      	movs	r1, #8
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	f7ff fed3 	bl	800af80 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1e4:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 800b1e6:	4610      	mov	r0, r2
 800b1e8:	210c      	movs	r1, #12
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	f7ff fec8 	bl	800af80 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop

0800b1f8 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4618      	mov	r0, r3
 800b206:	f7fb ffa5 	bl	8007154 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	79db      	ldrb	r3, [r3, #7]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00b      	beq.n	800b22a <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	795b      	ldrb	r3, [r3, #5]
 800b21a:	4610      	mov	r0, r2
 800b21c:	2104      	movs	r1, #4
 800b21e:	461a      	mov	r2, r3
 800b220:	f7ff ff30 	bl	800b084 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7ff ff5d 	bl	800b0e4 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	7a1b      	ldrb	r3, [r3, #8]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00b      	beq.n	800b24a <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	799b      	ldrb	r3, [r3, #6]
 800b23a:	4610      	mov	r0, r2
 800b23c:	2100      	movs	r1, #0
 800b23e:	461a      	mov	r2, r3
 800b240:	f7ff ff20 	bl	800b084 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f7ff ff5b 	bl	800b100 <CAN_NODE_MO_EnableRxEvent>
  }

}
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800b258:	2300      	movs	r3, #0
 800b25a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4618      	mov	r0, r3
 800b262:	f7fc f84b 	bl	80072fc <XMC_CAN_MO_Transmit>
 800b266:	4603      	mov	r3, r0
 800b268:	73fb      	strb	r3, [r7, #15]
  return (status);
 800b26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3710      	adds	r7, #16
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800b27c:	2300      	movs	r3, #0
 800b27e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4618      	mov	r0, r3
 800b286:	f7fc f867 	bl	8007358 <XMC_CAN_MO_Receive>
 800b28a:	4603      	mov	r3, r0
 800b28c:	73fb      	strb	r3, [r7, #15]
  return (status);
 800b28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	73fb      	strb	r3, [r7, #15]
  uint32_t *data_pointer = (uint32_t*) array_data;
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	6812      	ldr	r2, [r2, #0]
 800b2b2:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	6852      	ldr	r2, [r2, #4]
 800b2bc:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7fb ffe2 	bl	800728c <XMC_CAN_MO_UpdateData>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	73fb      	strb	r3, [r7, #15]
  return (status);
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop

0800b2d8 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2ea:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7fd f80b 	bl	800830c <GLOBAL_CAN_Init>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 800b2fa:	7dfb      	ldrb	r3, [r7, #23]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f040 8082 	bne.w	800b406 <CAN_NODE_Init+0x12e>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	685a      	ldr	r2, [r3, #4]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	4610      	mov	r0, r2
 800b30c:	4619      	mov	r1, r3
 800b30e:	f7fb fdeb 	bl	8006ee8 <XMC_CAN_NODE_NominalBitTimeConfigureEx>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d173      	bne.n	800b400 <CAN_NODE_Init+0x128>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7ff fe71 	bl	800b004 <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	4618      	mov	r0, r3
 800b328:	f7ff fe8c 	bl	800b044 <XMC_CAN_NODE_SetInitBit>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800b332:	2b00      	cmp	r3, #0
 800b334:	d005      	beq.n	800b342 <CAN_NODE_Init+0x6a>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7ff fe52 	bl	800afe4 <XMC_CAN_NODE_EnableLoopBack>
 800b340:	e018      	b.n	800b374 <CAN_NODE_Init+0x9c>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b348:	6819      	ldr	r1, [r3, #0]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b350:	791a      	ldrb	r2, [r3, #4]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b358:	4608      	mov	r0, r1
 800b35a:	4611      	mov	r1, r2
 800b35c:	461a      	mov	r2, r3
 800b35e:	f7fb f85b 	bl	8006418 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	685a      	ldr	r2, [r3, #4]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b36c:	4610      	mov	r0, r2
 800b36e:	4619      	mov	r1, r3
 800b370:	f7ff fe22 	bl	800afb8 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7ff fed1 	bl	800b11c <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 800b37a:	2300      	movs	r3, #0
 800b37c:	613b      	str	r3, [r7, #16]
 800b37e:	e019      	b.n	800b3b4 <CAN_NODE_Init+0xdc>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	3302      	adds	r3, #2
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	4413      	add	r3, r2
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	6859      	ldr	r1, [r3, #4]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	791b      	ldrb	r3, [r3, #4]
 800b39e:	4608      	mov	r0, r1
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	f7fb fe46 	bl	8007034 <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
 800b3a8:	68b8      	ldr	r0, [r7, #8]
 800b3aa:	f7ff ff25 	bl	800b1f8 <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	613b      	str	r3, [r7, #16]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d8de      	bhi.n	800b380 <CAN_NODE_Init+0xa8>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7ff fe2c 	bl	800b024 <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7ff fe47 	bl	800b064 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800b3dc:	f083 0301 	eor.w	r3, r3, #1
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d011      	beq.n	800b40a <CAN_NODE_Init+0x132>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6819      	ldr	r1, [r3, #0]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	791a      	ldrb	r2, [r3, #4]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3f4:	4608      	mov	r0, r1
 800b3f6:	4611      	mov	r1, r2
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	f7fb f80d 	bl	8006418 <XMC_GPIO_Init>
 800b3fe:	e004      	b.n	800b40a <CAN_NODE_Init+0x132>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
 800b400:	2301      	movs	r3, #1
 800b402:	75fb      	strb	r3, [r7, #23]
 800b404:	e001      	b.n	800b40a <CAN_NODE_Init+0x132>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 800b406:	2301      	movs	r3, #1
 800b408:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 800b40a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3718      	adds	r7, #24
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	460b      	mov	r3, r1
 800b41e:	607a      	str	r2, [r7, #4]
 800b420:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
 800b422:	7afb      	ldrb	r3, [r7, #11]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	409a      	lsls	r2, r3
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	605a      	str	r2, [r3, #4]
}
 800b42c:	3714      	adds	r7, #20
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop

0800b438 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	460b      	mov	r3, r1
 800b442:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b448:	78fb      	ldrb	r3, [r7, #3]
 800b44a:	fa22 f303 	lsr.w	r3, r2, r3
 800b44e:	f003 0301 	and.w	r3, r3, #1
}
 800b452:	4618      	mov	r0, r3
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop

0800b460 <BUS_IO_Init>:
* @param handle_ptr Pointer pointing to APP data structure.
* @return BUS_IO_STATUS_t BUS_IO APP status.
*/

BUS_IO_STATUS_t BUS_IO_Init(BUS_IO_t *const handle_ptr)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  uint8_t i;

  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	7c5b      	ldrb	r3, [r3, #17]
 800b46c:	f083 0301 	eor.w	r3, r3, #1
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b00      	cmp	r3, #0
 800b474:	d020      	beq.n	800b4b8 <BUS_IO_Init+0x58>
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b476:	2300      	movs	r3, #0
 800b478:	73fb      	strb	r3, [r7, #15]
 800b47a:	e015      	b.n	800b4a8 <BUS_IO_Init+0x48>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	7bfb      	ldrb	r3, [r7, #15]
 800b482:	00db      	lsls	r3, r3, #3
 800b484:	4413      	add	r3, r2
 800b486:	6819      	ldr	r1, [r3, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
 800b48e:	00db      	lsls	r3, r3, #3
 800b490:	4413      	add	r3, r2
 800b492:	791a      	ldrb	r2, [r3, #4]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	3304      	adds	r3, #4
 800b498:	4608      	mov	r0, r1
 800b49a:	4611      	mov	r1, r2
 800b49c:	461a      	mov	r2, r3
 800b49e:	f7fa ffbb 	bl	8006418 <XMC_GPIO_Init>
  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	73fb      	strb	r3, [r7, #15]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	7c1b      	ldrb	r3, [r3, #16]
 800b4ac:	7bfa      	ldrb	r2, [r7, #15]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d3e4      	bcc.n	800b47c <BUS_IO_Init+0x1c>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
    }
    handle_ptr->initialized = (bool)true;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	745a      	strb	r2, [r3, #17]
  }
  return (BUS_IO_STATUS_OK);
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop

0800b4c4 <BUS_IO_Read>:
  }
}

/* Function to read the bus pins state */
uint16_t BUS_IO_Read(BUS_IO_t *const handle_ptr)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint16_t count = 0U;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	81bb      	strh	r3, [r7, #12]

  XMC_ASSERT("BUS_IO_Read: handle_ptr null pointer", handle_ptr != NULL);

  /* Iterate the list of pins reading the pin state and packing the result according the pin position in the list, from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	73fb      	strb	r3, [r7, #15]
 800b4d4:	e01a      	b.n	800b50c <BUS_IO_Read+0x48>
  {
    /* Reading a bus pin's state */
    count |= (uint16_t)(XMC_GPIO_GetInput(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin) << i);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
 800b4dc:	00db      	lsls	r3, r3, #3
 800b4de:	4413      	add	r3, r2
 800b4e0:	6819      	ldr	r1, [r3, #0]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
 800b4e8:	00db      	lsls	r3, r3, #3
 800b4ea:	4413      	add	r3, r2
 800b4ec:	791b      	ldrb	r3, [r3, #4]
 800b4ee:	4608      	mov	r0, r1
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	f7ff ffa1 	bl	800b438 <XMC_GPIO_GetInput>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	7bfb      	ldrb	r3, [r7, #15]
 800b4fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	89bb      	ldrh	r3, [r7, #12]
 800b502:	4313      	orrs	r3, r2
 800b504:	81bb      	strh	r3, [r7, #12]
  uint16_t count = 0U;

  XMC_ASSERT("BUS_IO_Read: handle_ptr null pointer", handle_ptr != NULL);

  /* Iterate the list of pins reading the pin state and packing the result according the pin position in the list, from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b506:	7bfb      	ldrb	r3, [r7, #15]
 800b508:	3301      	adds	r3, #1
 800b50a:	73fb      	strb	r3, [r7, #15]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	7c1b      	ldrb	r3, [r3, #16]
 800b510:	7bfa      	ldrb	r2, [r7, #15]
 800b512:	429a      	cmp	r2, r3
 800b514:	d3df      	bcc.n	800b4d6 <BUS_IO_Read+0x12>
  {
    /* Reading a bus pin's state */
    count |= (uint16_t)(XMC_GPIO_GetInput(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin) << i);
  }
  return(count);
 800b516:	89bb      	ldrh	r3, [r7, #12]
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <BUS_IO_Write>:

/* Function to set the pins bus state */
void BUS_IO_Write(BUS_IO_t *const handle_ptr, const uint16_t data)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  const BUS_IO_PORT_PIN_t *bus_io_port_pin;

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	60bb      	str	r3, [r7, #8]
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b532:	2300      	movs	r3, #0
 800b534:	73fb      	strb	r3, [r7, #15]
 800b536:	e023      	b.n	800b580 <BUS_IO_Write+0x60>
  {
    if (data & (uint16_t)((uint16_t)1 << i))
 800b538:	7bfb      	ldrb	r3, [r7, #15]
 800b53a:	2201      	movs	r2, #1
 800b53c:	fa02 f303 	lsl.w	r3, r2, r3
 800b540:	b29a      	uxth	r2, r3
 800b542:	887b      	ldrh	r3, [r7, #2]
 800b544:	4013      	ands	r3, r2
 800b546:	b29b      	uxth	r3, r3
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d009      	beq.n	800b560 <BUS_IO_Write+0x40>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_HIGH);
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	791b      	ldrb	r3, [r3, #4]
 800b554:	4610      	mov	r0, r2
 800b556:	4619      	mov	r1, r3
 800b558:	2201      	movs	r2, #1
 800b55a:	f7ff ff5b 	bl	800b414 <XMC_GPIO_SetOutputLevel>
 800b55e:	e009      	b.n	800b574 <BUS_IO_Write+0x54>
    }
    else
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	791b      	ldrb	r3, [r3, #4]
 800b568:	4610      	mov	r0, r2
 800b56a:	4619      	mov	r1, r3
 800b56c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b570:	f7ff ff50 	bl	800b414 <XMC_GPIO_SetOutputLevel>
    }
   bus_io_port_pin++;
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	3308      	adds	r3, #8
 800b578:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b57a:	7bfb      	ldrb	r3, [r7, #15]
 800b57c:	3301      	adds	r3, #1
 800b57e:	73fb      	strb	r3, [r7, #15]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	7c1b      	ldrb	r3, [r3, #16]
 800b584:	7bfa      	ldrb	r2, [r7, #15]
 800b586:	429a      	cmp	r2, r3
 800b588:	d3d6      	bcc.n	800b538 <BUS_IO_Write+0x18>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
    }
   bus_io_port_pin++;
  }
}
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <ANALOG_IO_Init>:
 * Input Parameter  : Handler Pointer pointing to APP data structure.
 * Output Parameter : ANALOG_IO_STATUS_t (ANALOG_IO APP initialization status).
 */

ANALOG_IO_STATUS_t ANALOG_IO_Init(const ANALOG_IO_t *const handle)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ANALOG_IO_Init: Passed handler is a null pointer", handler != NULL);
  if (*(handle->state) == ANALOG_IO_STATE_NOT_INITIALIZED)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d10a      	bne.n	800b5b8 <ANALOG_IO_Init+0x28>
  {
    if (handle->config_ptr != NULL)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d002      	beq.n	800b5b0 <ANALOG_IO_Init+0x20>
    {
      /* Instance specific initialization function call*/
      handle->config_ptr();
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4798      	blx	r3
    }
    /* Set the state variable to initialized state*/
    *(handle->state) = ANALOG_IO_STATE_INITIALIZED;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	701a      	strb	r2, [r3, #0]
  }
  return (ANALOG_IO_STATUS_OK);
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop

0800b5c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b5c8:	4b04      	ldr	r3, [pc, #16]	; (800b5dc <__NVIC_GetPriorityGrouping+0x18>)
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b5d0:	0a1b      	lsrs	r3, r3, #8
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr
 800b5dc:	e000ed00 	.word	0xe000ed00

0800b5e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b5ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	db0b      	blt.n	800b60a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b5f2:	4908      	ldr	r1, [pc, #32]	; (800b614 <__NVIC_EnableIRQ+0x34>)
 800b5f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5f8:	095b      	lsrs	r3, r3, #5
 800b5fa:	79fa      	ldrb	r2, [r7, #7]
 800b5fc:	f002 021f 	and.w	r2, r2, #31
 800b600:	2001      	movs	r0, #1
 800b602:	fa00 f202 	lsl.w	r2, r0, r2
 800b606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr
 800b614:	e000e100 	.word	0xe000e100

0800b618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	4603      	mov	r3, r0
 800b620:	6039      	str	r1, [r7, #0]
 800b622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	db0a      	blt.n	800b642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b62c:	490d      	ldr	r1, [pc, #52]	; (800b664 <__NVIC_SetPriority+0x4c>)
 800b62e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b632:	683a      	ldr	r2, [r7, #0]
 800b634:	b2d2      	uxtb	r2, r2
 800b636:	0092      	lsls	r2, r2, #2
 800b638:	b2d2      	uxtb	r2, r2
 800b63a:	440b      	add	r3, r1
 800b63c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800b640:	e00a      	b.n	800b658 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b642:	4909      	ldr	r1, [pc, #36]	; (800b668 <__NVIC_SetPriority+0x50>)
 800b644:	79fb      	ldrb	r3, [r7, #7]
 800b646:	f003 030f 	and.w	r3, r3, #15
 800b64a:	3b04      	subs	r3, #4
 800b64c:	683a      	ldr	r2, [r7, #0]
 800b64e:	b2d2      	uxtb	r2, r2
 800b650:	0092      	lsls	r2, r2, #2
 800b652:	b2d2      	uxtb	r2, r2
 800b654:	440b      	add	r3, r1
 800b656:	761a      	strb	r2, [r3, #24]
  }
}
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	e000e100 	.word	0xe000e100
 800b668:	e000ed00 	.word	0xe000ed00

0800b66c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b089      	sub	sp, #36	; 0x24
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f003 0307 	and.w	r3, r3, #7
 800b67e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	f1c3 0307 	rsb	r3, r3, #7
 800b686:	2b06      	cmp	r3, #6
 800b688:	bf28      	it	cs
 800b68a:	2306      	movcs	r3, #6
 800b68c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	3306      	adds	r3, #6
 800b692:	2b06      	cmp	r3, #6
 800b694:	d902      	bls.n	800b69c <NVIC_EncodePriority+0x30>
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	3b01      	subs	r3, #1
 800b69a:	e000      	b.n	800b69e <NVIC_EncodePriority+0x32>
 800b69c:	2300      	movs	r3, #0
 800b69e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b6a8:	1e5a      	subs	r2, r3, #1
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	401a      	ands	r2, r3
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2101      	movs	r1, #1
 800b6b6:	fa01 f303 	lsl.w	r3, r1, r3
 800b6ba:	1e59      	subs	r1, r3, #1
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800b6c0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3724      	adds	r7, #36	; 0x24
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop

0800b6d0 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b6de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 800b6e8:	370c      	adds	r7, #12
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop

0800b6f4 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
                                                                    const uint32_t grp_num,
                                                                    const uint32_t ch_num)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	3260      	adds	r2, #96	; 0x60
 800b706:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2101      	movs	r1, #1
 800b70e:	fa01 f303 	lsl.w	r3, r1, r3
 800b712:	ea42 0103 	orr.w	r1, r2, r3
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	3260      	adds	r2, #96	; 0x60
 800b71c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800b720:	3714      	adds	r7, #20
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop

0800b72c <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b085      	sub	sp, #20
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6819      	ldr	r1, [r3, #0]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	32a0      	adds	r2, #160	; 0xa0
 800b742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800b746:	3714      	adds	r7, #20
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	683a      	ldr	r2, [r7, #0]
 800b75e:	32c0      	adds	r2, #192	; 0xc0
 800b760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b764:	b29b      	uxth	r3, r3
}
 800b766:	4618      	mov	r0, r3
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop

0800b774 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 800b774:	b590      	push	{r4, r7, lr}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	7e1b      	ldrb	r3, [r3, #24]
 800b780:	2b02      	cmp	r3, #2
 800b782:	f040 80a7 	bne.w	800b8d4 <ADC_MEASUREMENT_Init+0x160>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7fc fdf4 	bl	8008378 <GLOBAL_ADC_Init>
 800b790:	4603      	mov	r3, r0
 800b792:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	695a      	ldr	r2, [r3, #20]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	4610      	mov	r0, r2
 800b7a0:	6819      	ldr	r1, [r3, #0]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	f7fc f8a1 	bl	80078ec <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	695a      	ldr	r2, [r3, #20]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	4610      	mov	r0, r2
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	f7fc f9be 	bl	8007b38 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800b7bc:	2300      	movs	r3, #0
 800b7be:	73fb      	strb	r3, [r7, #15]
 800b7c0:	e03c      	b.n	800b83c <ADC_MEASUREMENT_Init+0xc8>
    {
      indexed = handle_ptr->array->channel_array[j];
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	7bfa      	ldrb	r2, [r7, #15]
 800b7c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7cc:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	689a      	ldr	r2, [r3, #8]
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	7c5b      	ldrb	r3, [r3, #17]
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4610      	mov	r0, r2
 800b7de:	461a      	mov	r2, r3
 800b7e0:	f7fc fa28 	bl	8007c34 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	689a      	ldr	r2, [r3, #8]
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	789b      	ldrb	r3, [r3, #2]
 800b7ee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	4619      	mov	r1, r3
                                indexed->res_handle);
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 800b7fa:	4610      	mov	r0, r2
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	f7ff ff95 	bl	800b72c <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	7c1b      	ldrb	r3, [r3, #16]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800b80c:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	7c5b      	ldrb	r3, [r3, #17]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800b812:	4610      	mov	r0, r2
 800b814:	461a      	mov	r2, r3
 800b816:	f7ff ff6d 	bl	800b6f4 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);

#ifdef ADC_MEASUREMENT_ANALOG_IO_USED
      /* ANALOG_IO initialization for the channel*/
      if(indexed->analog_io_config != NULL)
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d009      	beq.n	800b836 <ADC_MEASUREMENT_Init+0xc2>
      {
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	68db      	ldr	r3, [r3, #12]
 800b826:	4618      	mov	r0, r3
 800b828:	f7ff feb2 	bl	800b590 <ANALOG_IO_Init>
 800b82c:	4603      	mov	r3, r0
 800b82e:	461a      	mov	r2, r3
 800b830:	7bbb      	ldrb	r3, [r7, #14]
 800b832:	4313      	orrs	r3, r2
 800b834:	73bb      	strb	r3, [r7, #14]
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800b836:	7bfb      	ldrb	r3, [r7, #15]
 800b838:	3301      	adds	r3, #1
 800b83a:	73fb      	strb	r3, [r7, #15]
 800b83c:	7bfb      	ldrb	r3, [r7, #15]
 800b83e:	2b0a      	cmp	r3, #10
 800b840:	d9bf      	bls.n	800b7c2 <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	7a1b      	ldrb	r3, [r3, #8]
 800b848:	f003 0308 	and.w	r3, r3, #8
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d02c      	beq.n	800b8ac <ADC_MEASUREMENT_Init+0x138>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	691b      	ldr	r3, [r3, #16]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d028      	beq.n	800b8ac <ADC_MEASUREMENT_Init+0x138>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	b2dc      	uxtb	r4, r3
 800b862:	f7ff feaf 	bl	800b5c4 <__NVIC_GetPriorityGrouping>
 800b866:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800b86c:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	4608      	mov	r0, r1
 800b876:	4611      	mov	r1, r2
 800b878:	461a      	mov	r2, r3
 800b87a:	f7ff fef7 	bl	800b66c <NVIC_EncodePriority>
 800b87e:	4602      	mov	r2, r0
 800b880:	b263      	sxtb	r3, r4
 800b882:	4618      	mov	r0, r3
 800b884:	4611      	mov	r1, r2
 800b886:	f7ff fec7 	bl	800b618 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	695a      	ldr	r2, [r3, #20]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	7e5b      	ldrb	r3, [r3, #25]
 800b894:	4610      	mov	r0, r2
 800b896:	4619      	mov	r1, r3
 800b898:	f7fc f87e 	bl	8007998 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	691b      	ldr	r3, [r3, #16]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	b25b      	sxtb	r3, r3
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7ff fe9a 	bl	800b5e0 <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	695b      	ldr	r3, [r3, #20]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d002      	beq.n	800b8ba <ADC_MEASUREMENT_Init+0x146>
    {
    	(handle_ptr->mux_config)();
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	695b      	ldr	r3, [r3, #20]
 800b8b8:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	7e9b      	ldrb	r3, [r3, #26]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d005      	beq.n	800b8ce <ADC_MEASUREMENT_Init+0x15a>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	695b      	ldr	r3, [r3, #20]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7ff ff01 	bl	800b6d0 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	7bba      	ldrb	r2, [r7, #14]
 800b8d2:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	7e1b      	ldrb	r3, [r3, #24]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3714      	adds	r7, #20
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd90      	pop	{r4, r7, pc}

0800b8e0 <ADC_MEASUREMENT_GetResult>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	689a      	ldr	r2, [r3, #8]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	789b      	ldrb	r3, [r3, #2]
 800b8f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	4610      	mov	r0, r2
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	f7ff ff28 	bl	800b750 <XMC_VADC_GROUP_GetResult>
 800b900:	4603      	mov	r3, r0
 800b902:	81fb      	strh	r3, [r7, #14]

  return (result);
 800b904:	89fb      	ldrh	r3, [r7, #14]
}
 800b906:	4618      	mov	r0, r3
 800b908:	3710      	adds	r7, #16
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop

0800b910 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800b916:	2300      	movs	r3, #0
 800b918:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 800b91a:	4851      	ldr	r0, [pc, #324]	; (800ba60 <DAVE_Init+0x150>)
 800b91c:	f7ff faec 	bl	800aef8 <CLOCK_XMC4_Init>
 800b920:	4603      	mov	r3, r0
 800b922:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 800b924:	79fb      	ldrb	r3, [r7, #7]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d104      	bne.n	800b934 <DAVE_Init+0x24>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_1 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_1); 
 800b92a:	484e      	ldr	r0, [pc, #312]	; (800ba64 <DAVE_Init+0x154>)
 800b92c:	f7ff fcd4 	bl	800b2d8 <CAN_NODE_Init>
 800b930:	4603      	mov	r3, r0
 800b932:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800b934:	79fb      	ldrb	r3, [r7, #7]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d104      	bne.n	800b944 <DAVE_Init+0x34>
  {
	 /**  Initialization of BUS_IO APP instance BUS_IO */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&BUS_IO); 
 800b93a:	484b      	ldr	r0, [pc, #300]	; (800ba68 <DAVE_Init+0x158>)
 800b93c:	f7ff fd90 	bl	800b460 <BUS_IO_Init>
 800b940:	4603      	mov	r3, r0
 800b942:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800b944:	79fb      	ldrb	r3, [r7, #7]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d104      	bne.n	800b954 <DAVE_Init+0x44>
  {
	 /**  Initialization of WATCHDOG APP instance WATCHDOG */
	 init_status = (DAVE_STATUS_t)WATCHDOG_Init(&WATCHDOG); 
 800b94a:	4848      	ldr	r0, [pc, #288]	; (800ba6c <DAVE_Init+0x15c>)
 800b94c:	f7fc fa34 	bl	8007db8 <WATCHDOG_Init>
 800b950:	4603      	mov	r3, r0
 800b952:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800b954:	79fb      	ldrb	r3, [r7, #7]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d104      	bne.n	800b964 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_Debug_LED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_Debug_LED); 
 800b95a:	4845      	ldr	r0, [pc, #276]	; (800ba70 <DAVE_Init+0x160>)
 800b95c:	f7ff f94a 	bl	800abf4 <DIGITAL_IO_Init>
 800b960:	4603      	mov	r3, r0
 800b962:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800b964:	79fb      	ldrb	r3, [r7, #7]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d104      	bne.n	800b974 <DAVE_Init+0x64>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_2 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_2); 
 800b96a:	4842      	ldr	r0, [pc, #264]	; (800ba74 <DAVE_Init+0x164>)
 800b96c:	f7ff fcb4 	bl	800b2d8 <CAN_NODE_Init>
 800b970:	4603      	mov	r3, r0
 800b972:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800b974:	79fb      	ldrb	r3, [r7, #7]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d104      	bne.n	800b984 <DAVE_Init+0x74>
  {
	 /**  Initialization of PWM APP instance PWM_MHJ9_IN */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MHJ9_IN); 
 800b97a:	483f      	ldr	r0, [pc, #252]	; (800ba78 <DAVE_Init+0x168>)
 800b97c:	f7fc fba0 	bl	80080c0 <PWM_Init>
 800b980:	4603      	mov	r3, r0
 800b982:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800b984:	79fb      	ldrb	r3, [r7, #7]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d104      	bne.n	800b994 <DAVE_Init+0x84>
  {
	 /**  Initialization of PWM APP instance PWM_MHJ9_OUT */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MHJ9_OUT); 
 800b98a:	483c      	ldr	r0, [pc, #240]	; (800ba7c <DAVE_Init+0x16c>)
 800b98c:	f7fc fb98 	bl	80080c0 <PWM_Init>
 800b990:	4603      	mov	r3, r0
 800b992:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800b994:	79fb      	ldrb	r3, [r7, #7]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d104      	bne.n	800b9a4 <DAVE_Init+0x94>
  {
	 /**  Initialization of PWM APP instance PWM_Waterpump */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_Waterpump); 
 800b99a:	4839      	ldr	r0, [pc, #228]	; (800ba80 <DAVE_Init+0x170>)
 800b99c:	f7fc fb90 	bl	80080c0 <PWM_Init>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800b9a4:	79fb      	ldrb	r3, [r7, #7]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d104      	bne.n	800b9b4 <DAVE_Init+0xa4>
  {
	 /**  Initialization of PWM APP instance PWM_Fans1 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_Fans1); 
 800b9aa:	4836      	ldr	r0, [pc, #216]	; (800ba84 <DAVE_Init+0x174>)
 800b9ac:	f7fc fb88 	bl	80080c0 <PWM_Init>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800b9b4:	79fb      	ldrb	r3, [r7, #7]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d104      	bne.n	800b9c4 <DAVE_Init+0xb4>
  {
	 /**  Initialization of PWM APP instance PWM_Fans2 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_Fans2); 
 800b9ba:	4833      	ldr	r0, [pc, #204]	; (800ba88 <DAVE_Init+0x178>)
 800b9bc:	f7fc fb80 	bl	80080c0 <PWM_Init>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800b9c4:	79fb      	ldrb	r3, [r7, #7]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d104      	bne.n	800b9d4 <DAVE_Init+0xc4>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT); 
 800b9ca:	4830      	ldr	r0, [pc, #192]	; (800ba8c <DAVE_Init+0x17c>)
 800b9cc:	f7ff fed2 	bl	800b774 <ADC_MEASUREMENT_Init>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800b9d4:	79fb      	ldrb	r3, [r7, #7]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d104      	bne.n	800b9e4 <DAVE_Init+0xd4>
  {
	 /**  Initialization of DIGITAL_IO APP instance CAN1_Res */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CAN1_Res); 
 800b9da:	482d      	ldr	r0, [pc, #180]	; (800ba90 <DAVE_Init+0x180>)
 800b9dc:	f7ff f90a 	bl	800abf4 <DIGITAL_IO_Init>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800b9e4:	79fb      	ldrb	r3, [r7, #7]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d104      	bne.n	800b9f4 <DAVE_Init+0xe4>
  {
	 /**  Initialization of DIGITAL_IO APP instance CAN2_Res */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CAN2_Res); 
 800b9ea:	482a      	ldr	r0, [pc, #168]	; (800ba94 <DAVE_Init+0x184>)
 800b9ec:	f7ff f902 	bl	800abf4 <DIGITAL_IO_Init>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800b9f4:	79fb      	ldrb	r3, [r7, #7]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d104      	bne.n	800ba04 <DAVE_Init+0xf4>
  {
	 /**  Initialization of EVENT_DETECTOR APP instance EVENT_DETECTOR_Shifting */
	 init_status = (DAVE_STATUS_t)EVENT_DETECTOR_Init(&EVENT_DETECTOR_Shifting); 
 800b9fa:	4827      	ldr	r0, [pc, #156]	; (800ba98 <DAVE_Init+0x188>)
 800b9fc:	f7ff f8dc 	bl	800abb8 <EVENT_DETECTOR_Init>
 800ba00:	4603      	mov	r3, r0
 800ba02:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800ba04:	79fb      	ldrb	r3, [r7, #7]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d104      	bne.n	800ba14 <DAVE_Init+0x104>
  {
	 /**  Initialization of EVENT_GENERATOR APP instance EVENT_GENERATOR_Shifting */
	 init_status = (DAVE_STATUS_t)EVENT_GENERATOR_Init(&EVENT_GENERATOR_Shifting); 
 800ba0a:	4824      	ldr	r0, [pc, #144]	; (800ba9c <DAVE_Init+0x18c>)
 800ba0c:	f7ff f8b0 	bl	800ab70 <EVENT_GENERATOR_Init>
 800ba10:	4603      	mov	r3, r0
 800ba12:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800ba14:	79fb      	ldrb	r3, [r7, #7]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d104      	bne.n	800ba24 <DAVE_Init+0x114>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_Shifting */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_Shifting); 
 800ba1a:	4821      	ldr	r0, [pc, #132]	; (800baa0 <DAVE_Init+0x190>)
 800ba1c:	f7fc fc22 	bl	8008264 <INTERRUPT_Init>
 800ba20:	4603      	mov	r3, r0
 800ba22:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800ba24:	79fb      	ldrb	r3, [r7, #7]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d104      	bne.n	800ba34 <DAVE_Init+0x124>
  {
	 /**  Initialization of DIGITAL_IO APP instance Signal_DownShift */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Signal_DownShift); 
 800ba2a:	481e      	ldr	r0, [pc, #120]	; (800baa4 <DAVE_Init+0x194>)
 800ba2c:	f7ff f8e2 	bl	800abf4 <DIGITAL_IO_Init>
 800ba30:	4603      	mov	r3, r0
 800ba32:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800ba34:	79fb      	ldrb	r3, [r7, #7]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d104      	bne.n	800ba44 <DAVE_Init+0x134>
  {
	 /**  Initialization of DIGITAL_IO APP instance Signal_UpShift */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Signal_UpShift); 
 800ba3a:	481b      	ldr	r0, [pc, #108]	; (800baa8 <DAVE_Init+0x198>)
 800ba3c:	f7ff f8da 	bl	800abf4 <DIGITAL_IO_Init>
 800ba40:	4603      	mov	r3, r0
 800ba42:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800ba44:	79fb      	ldrb	r3, [r7, #7]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d104      	bne.n	800ba54 <DAVE_Init+0x144>
  {
	 /**  Initialization of BUS_IO APP instance BUS_IO_Input */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&BUS_IO_Input); 
 800ba4a:	4818      	ldr	r0, [pc, #96]	; (800baac <DAVE_Init+0x19c>)
 800ba4c:	f7ff fd08 	bl	800b460 <BUS_IO_Init>
 800ba50:	4603      	mov	r3, r0
 800ba52:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 800ba54:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800ba56:	4618      	mov	r0, r3
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	20000810 	.word	0x20000810
 800ba64:	0800f6a0 	.word	0x0800f6a0
 800ba68:	20000470 	.word	0x20000470
 800ba6c:	2000000c 	.word	0x2000000c
 800ba70:	0800f59c 	.word	0x0800f59c
 800ba74:	0800f810 	.word	0x0800f810
 800ba78:	20000014 	.word	0x20000014
 800ba7c:	20000048 	.word	0x20000048
 800ba80:	2000007c 	.word	0x2000007c
 800ba84:	200000b0 	.word	0x200000b0
 800ba88:	200000e4 	.word	0x200000e4
 800ba8c:	20000624 	.word	0x20000624
 800ba90:	0800f5b0 	.word	0x0800f5b0
 800ba94:	0800f5c4 	.word	0x0800f5c4
 800ba98:	200001a4 	.word	0x200001a4
 800ba9c:	20000194 	.word	0x20000194
 800baa0:	0800f4fc 	.word	0x0800f4fc
 800baa4:	0800f5d8 	.word	0x0800f5d8
 800baa8:	0800f5ec 	.word	0x0800f5ec
 800baac:	20000484 	.word	0x20000484

0800bab0 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	460b      	mov	r3, r1
 800baba:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800babc:	78fb      	ldrb	r3, [r7, #3]
 800babe:	2201      	movs	r2, #1
 800bac0:	409a      	lsls	r2, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	605a      	str	r2, [r3, #4]
}
 800bac6:	370c      	adds	r7, #12
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	460b      	mov	r3, r1
 800bada:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800badc:	78fb      	ldrb	r3, [r7, #3]
 800bade:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bae2:	409a      	lsls	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	605a      	str	r2, [r3, #4]
}
 800bae8:	370c      	adds	r7, #12
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop

0800baf4 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	7c1b      	ldrb	r3, [r3, #16]
 800bb04:	4610      	mov	r0, r2
 800bb06:	4619      	mov	r1, r3
 800bb08:	f7ff ffd2 	bl	800bab0 <XMC_GPIO_SetOutputHigh>
}
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop

0800bb14 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	7c1b      	ldrb	r3, [r3, #16]
 800bb24:	4610      	mov	r0, r2
 800bb26:	4619      	mov	r1, r3
 800bb28:	f7ff ffd2 	bl	800bad0 <XMC_GPIO_SetOutputLow>
}
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop

0800bb34 <CAN_1_ini>:
boolean_T CAN_1_RES = true;

uint8_t clutch_mode_ini = 0;

void CAN_1_ini()
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	af00      	add	r7, sp, #0
	//Termination Resistor on CAN 1
	if (CAN_1_RES)
 800bb38:	4b41      	ldr	r3, [pc, #260]	; (800bc40 <CAN_1_ini+0x10c>)
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d003      	beq.n	800bb48 <CAN_1_ini+0x14>
		DIGITAL_IO_SetOutputHigh (&CAN1_Res);
 800bb40:	4840      	ldr	r0, [pc, #256]	; (800bc44 <CAN_1_ini+0x110>)
 800bb42:	f7ff ffd7 	bl	800baf4 <DIGITAL_IO_SetOutputHigh>
 800bb46:	e002      	b.n	800bb4e <CAN_1_ini+0x1a>
	else
		DIGITAL_IO_SetOutputLow (&CAN1_Res);
 800bb48:	483e      	ldr	r0, [pc, #248]	; (800bc44 <CAN_1_ini+0x110>)
 800bb4a:	f7ff ffe3 	bl	800bb14 <DIGITAL_IO_SetOutputLow>

	//------LINK4_1_boost_gear_rev_map 0x10 LMO1------ todo
	canData.p_air_22 				= &VCU_DW.VAR_IN_p_air_22;
 800bb4e:	4b3e      	ldr	r3, [pc, #248]	; (800bc48 <CAN_1_ini+0x114>)
 800bb50:	4a3e      	ldr	r2, [pc, #248]	; (800bc4c <CAN_1_ini+0x118>)
 800bb52:	601a      	str	r2, [r3, #0]
	canData.AN5GearPos	 			= &VCU_DW.VAR_IN_p_air_22_des;
 800bb54:	4b3c      	ldr	r3, [pc, #240]	; (800bc48 <CAN_1_ini+0x114>)
 800bb56:	4a3e      	ldr	r2, [pc, #248]	; (800bc50 <CAN_1_ini+0x11c>)
 800bb58:	605a      	str	r2, [r3, #4]
	canData.n_engine 				= &n_engine;
 800bb5a:	4b3b      	ldr	r3, [pc, #236]	; (800bc48 <CAN_1_ini+0x114>)
 800bb5c:	4a3d      	ldr	r2, [pc, #244]	; (800bc54 <CAN_1_ini+0x120>)
 800bb5e:	609a      	str	r2, [r3, #8]
	n_engine_LSB					= &VCU_DW.VAR_IN_n_engine_LSB;
 800bb60:	4b3d      	ldr	r3, [pc, #244]	; (800bc58 <CAN_1_ini+0x124>)
 800bb62:	4a3e      	ldr	r2, [pc, #248]	; (800bc5c <CAN_1_ini+0x128>)
 800bb64:	601a      	str	r2, [r3, #0]
	n_engine_MSB					= &VCU_DW.VAR_IN_n_engine_MSB;
 800bb66:	4b3e      	ldr	r3, [pc, #248]	; (800bc60 <CAN_1_ini+0x12c>)
 800bb68:	4a3e      	ldr	r2, [pc, #248]	; (800bc64 <CAN_1_ini+0x130>)
 800bb6a:	601a      	str	r2, [r3, #0]
	//canData.ign_angle 				= (uint8_t*)&VCU_DW.
	canData.gear 					= &VCU_DW.VAR_IN_gear;
 800bb6c:	4b36      	ldr	r3, [pc, #216]	; (800bc48 <CAN_1_ini+0x114>)
 800bb6e:	4a3e      	ldr	r2, [pc, #248]	; (800bc68 <CAN_1_ini+0x134>)
 800bb70:	60da      	str	r2, [r3, #12]
	//canData.gear_shift_status 		= (uint8_t*)&VCU_DW.VAR_IN_gear_shift_status;
	//canData.fuel_table_1_status 	= (uint8_t*)&VCU_DW.VAR_IN_
	//canData.fuel_table_2_status 	= (uint8_t*)&VCU_DW.VAR_IN_
	//canData.ign_table_1_status 	= (uint8_t*)&VCU_DW.VAR_IN_
	//canData.ign_table_2_status 	= (uint8_t*)&VCU_DW.VAR_IN_
	canData.TPS						= &VCU_DW.VAR_IN_TPS_Plausi;
 800bb72:	4b35      	ldr	r3, [pc, #212]	; (800bc48 <CAN_1_ini+0x114>)
 800bb74:	4a3d      	ldr	r2, [pc, #244]	; (800bc6c <CAN_1_ini+0x138>)
 800bb76:	629a      	str	r2, [r3, #40]	; 0x28

	//------LINK4_2_press_temp_Wg 0x771 LMO2------ todo
	//canData.p_oil 				= (uint8_t*)&VCU_DW.VAR_IN_p_Oil;
	//canData.p_fuel_rail 		= (uint8_t*)&VCU_DW.VAR_IN_p_fuel_rail;
	//canData.x_throttle_valve 	= (uint8_t*)&VCU_DW.VAR_IN_x_ath;
	canData.t_water_engine 		= &VCU_DW.VAR_IN_t_water_engine;
 800bb78:	4b33      	ldr	r3, [pc, #204]	; (800bc48 <CAN_1_ini+0x114>)
 800bb7a:	4a3d      	ldr	r2, [pc, #244]	; (800bc70 <CAN_1_ini+0x13c>)
 800bb7c:	639a      	str	r2, [r3, #56]	; 0x38
	//canData.lambda_status = (uint8_t*)&VCU_DW.VAR_IN_
	//canData.error_trigger = (uint8_t*)&VCU_DW.VAR_IN_
	//canData.boost_table = (uint8_t*)&VCU_DW.VAR_IN_

	//------STW 0x8 LM04------
	canData.STW_shift_up_request 	= &VCU_DW.VAR_IN_STW_shift_up_request;
 800bb7e:	4b32      	ldr	r3, [pc, #200]	; (800bc48 <CAN_1_ini+0x114>)
 800bb80:	4a3c      	ldr	r2, [pc, #240]	; (800bc74 <CAN_1_ini+0x140>)
 800bb82:	665a      	str	r2, [r3, #100]	; 0x64
	canData.STW_shift_down_request 	= &VCU_DW.VAR_IN_STW_shift_down_request;
 800bb84:	4b30      	ldr	r3, [pc, #192]	; (800bc48 <CAN_1_ini+0x114>)
 800bb86:	4a3c      	ldr	r2, [pc, #240]	; (800bc78 <CAN_1_ini+0x144>)
 800bb88:	669a      	str	r2, [r3, #104]	; 0x68
	canData.STW_transmission_mode 	= &VCU_DW.VAR_IN_STW_transmission_mode;
 800bb8a:	4b2f      	ldr	r3, [pc, #188]	; (800bc48 <CAN_1_ini+0x114>)
 800bb8c:	4a3b      	ldr	r2, [pc, #236]	; (800bc7c <CAN_1_ini+0x148>)
 800bb8e:	67da      	str	r2, [r3, #124]	; 0x7c
	//canData.STW_trigger_point		= (uint8_t*)&VCU_DW.VAR_IN_STW_map_max;
	//canData.STW_engine_map 			= (uint8_t*)&VCU_DW.VAR_IN_STW_map_min;
	//canData.STW_rev_limiter 		= (uint8_t*)&VCU_DW.VAR_IN_STW_map_3;
	canData.STW_clutch_mode 		= &clutch_mode_ini;//(uint8_t*)&VCU_DW.VAR_IN_STW_clutch_mode;
 800bb90:	4b2d      	ldr	r3, [pc, #180]	; (800bc48 <CAN_1_ini+0x114>)
 800bb92:	4a3b      	ldr	r2, [pc, #236]	; (800bc80 <CAN_1_ini+0x14c>)
 800bb94:	679a      	str	r2, [r3, #120]	; 0x78
	canData.STW_mue_tyre 			= &VCU_DW.VAR_IN_STW_mue_tyre;
 800bb96:	4b2c      	ldr	r3, [pc, #176]	; (800bc48 <CAN_1_ini+0x114>)
 800bb98:	4a3a      	ldr	r2, [pc, #232]	; (800bc84 <CAN_1_ini+0x150>)
 800bb9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	//canData.STW_brake_balance 		= (uint8_t*)&VCU_DW.VAR_IN_brake_ratio_R;

	//------TTC_ABS 0x5C0 LM05------
	canData.ABS_switchstate	= &VCU_DW.VAR_OUT_ABS_switchstate;
 800bb9e:	4b2a      	ldr	r3, [pc, #168]	; (800bc48 <CAN_1_ini+0x114>)
 800bba0:	4a39      	ldr	r2, [pc, #228]	; (800bc88 <CAN_1_ini+0x154>)
 800bba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	canData.p_brake_F		= &VCU_DW.VAR_OUT_p_brake_F;
 800bba6:	4b28      	ldr	r3, [pc, #160]	; (800bc48 <CAN_1_ini+0x114>)
 800bba8:	4a38      	ldr	r2, [pc, #224]	; (800bc8c <CAN_1_ini+0x158>)
 800bbaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	canData.ABS_BL_switch	= &VCU_DW.VAR_OUT_ABS_BL_switch;
 800bbae:	4b26      	ldr	r3, [pc, #152]	; (800bc48 <CAN_1_ini+0x114>)
 800bbb0:	4a37      	ldr	r2, [pc, #220]	; (800bc90 <CAN_1_ini+0x15c>)
 800bbb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	canData.ABS_active		= &VCU_DW.VAR_OUT_ABS_active;
 800bbb6:	4b24      	ldr	r3, [pc, #144]	; (800bc48 <CAN_1_ini+0x114>)
 800bbb8:	4a36      	ldr	r2, [pc, #216]	; (800bc94 <CAN_1_ini+0x160>)
 800bbba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	canData.ABS_EBD_lamp	= &VCU_DW.VAR_OUT_ABS_EBD_Lamp;
 800bbbe:	4b22      	ldr	r3, [pc, #136]	; (800bc48 <CAN_1_ini+0x114>)
 800bbc0:	4a35      	ldr	r2, [pc, #212]	; (800bc98 <CAN_1_ini+0x164>)
 800bbc2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	canData.ABS_lamp		= &VCU_DW.VAR_OUT_ABS_Lamp;
 800bbc6:	4b20      	ldr	r3, [pc, #128]	; (800bc48 <CAN_1_ini+0x114>)
 800bbc8:	4a34      	ldr	r2, [pc, #208]	; (800bc9c <CAN_1_ini+0x168>)
 800bbca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	canData.Brakelight_CAN1	= &VCU_DW.VAR_OUT_Brakelight;
 800bbce:	4b1e      	ldr	r3, [pc, #120]	; (800bc48 <CAN_1_ini+0x114>)
 800bbd0:	4a33      	ldr	r2, [pc, #204]	; (800bca0 <CAN_1_ini+0x16c>)
 800bbd2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	//------TTC_LaunchControl 0x7F0 LM06------
	canData.p_brake_R			= &VCU_DW.VAR_OUT_p_brake_R;
 800bbd6:	4b1c      	ldr	r3, [pc, #112]	; (800bc48 <CAN_1_ini+0x114>)
 800bbd8:	4a32      	ldr	r2, [pc, #200]	; (800bca4 <CAN_1_ini+0x170>)
 800bbda:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	canData.LC_mue_tyre			= &VCU_DW.VAR_OUT_STW_mue_tyre;
 800bbde:	4b1a      	ldr	r3, [pc, #104]	; (800bc48 <CAN_1_ini+0x114>)
 800bbe0:	4a31      	ldr	r2, [pc, #196]	; (800bca8 <CAN_1_ini+0x174>)
 800bbe2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	canData.LC_clutch_pos_des	= &VCU_DW.VAR_OUT_x_clutch_LC;
 800bbe6:	4b18      	ldr	r3, [pc, #96]	; (800bc48 <CAN_1_ini+0x114>)
 800bbe8:	4a30      	ldr	r2, [pc, #192]	; (800bcac <CAN_1_ini+0x178>)
 800bbea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	canData.LC_dash_bit			= &VCU_DW.VAR_OUT_LC_dash_Bit;
 800bbee:	4b16      	ldr	r3, [pc, #88]	; (800bc48 <CAN_1_ini+0x114>)
 800bbf0:	4a2f      	ldr	r2, [pc, #188]	; (800bcb0 <CAN_1_ini+0x17c>)
 800bbf2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	canData.LC_active_bit		= &VCU_DW.VAR_OUT_LC_active_bit;
 800bbf6:	4b14      	ldr	r3, [pc, #80]	; (800bc48 <CAN_1_ini+0x114>)
 800bbf8:	4a2e      	ldr	r2, [pc, #184]	; (800bcb4 <CAN_1_ini+0x180>)
 800bbfa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	canData.LC_ready_bit		= &VCU_DW.VAR_OUT_LC_ready_bit;
 800bbfe:	4b12      	ldr	r3, [pc, #72]	; (800bc48 <CAN_1_ini+0x114>)
 800bc00:	4a2d      	ldr	r2, [pc, #180]	; (800bcb8 <CAN_1_ini+0x184>)
 800bc02:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	canData.LC_Mdes				= &VCU_DW.VAR_OUT_LC_Mdes;
 800bc06:	4b10      	ldr	r3, [pc, #64]	; (800bc48 <CAN_1_ini+0x114>)
 800bc08:	4a2c      	ldr	r2, [pc, #176]	; (800bcbc <CAN_1_ini+0x188>)
 800bc0a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	canData.LC_Fnr				= &VCU_DW.VAR_OUT_LC_Fnr;
 800bc0e:	4b0e      	ldr	r3, [pc, #56]	; (800bc48 <CAN_1_ini+0x114>)
 800bc10:	4a2b      	ldr	r2, [pc, #172]	; (800bcc0 <CAN_1_ini+0x18c>)
 800bc12:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//------TTC_WheelSpeed 0x340 LM07------
	canData.n_wheel_FL			= &VCU_DW.VAR_OUT_n_wheel_FL_kmproh;
 800bc16:	4b0c      	ldr	r3, [pc, #48]	; (800bc48 <CAN_1_ini+0x114>)
 800bc18:	4a2a      	ldr	r2, [pc, #168]	; (800bcc4 <CAN_1_ini+0x190>)
 800bc1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	canData.n_wheel_FR			= &VCU_DW.VAR_OUT_n_wheel_FR_kmproh;
 800bc1e:	4b0a      	ldr	r3, [pc, #40]	; (800bc48 <CAN_1_ini+0x114>)
 800bc20:	4a29      	ldr	r2, [pc, #164]	; (800bcc8 <CAN_1_ini+0x194>)
 800bc22:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	canData.n_wheel_RL			= &VCU_DW.VAR_OUT_n_wheel_RL_kmproh;
 800bc26:	4b08      	ldr	r3, [pc, #32]	; (800bc48 <CAN_1_ini+0x114>)
 800bc28:	4a28      	ldr	r2, [pc, #160]	; (800bccc <CAN_1_ini+0x198>)
 800bc2a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	canData.n_wheel_RR			= &VCU_DW.VAR_OUT_n_wheel_FL_kmproh;
 800bc2e:	4b06      	ldr	r3, [pc, #24]	; (800bc48 <CAN_1_ini+0x114>)
 800bc30:	4a24      	ldr	r2, [pc, #144]	; (800bcc4 <CAN_1_ini+0x190>)
 800bc32:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	//----CAN-Modeul Measurement 0x7E1 LM08------
	canData.p_pneu_VCU_IN		= &VCU_DW.VAR_IN_p_pneum;
 800bc36:	4b04      	ldr	r3, [pc, #16]	; (800bc48 <CAN_1_ini+0x114>)
 800bc38:	4a25      	ldr	r2, [pc, #148]	; (800bcd0 <CAN_1_ini+0x19c>)
 800bc3a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
}
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	20000640 	.word	0x20000640
 800bc44:	0800f5b0 	.word	0x0800f5b0
 800bc48:	20001338 	.word	0x20001338
 800bc4c:	20001180 	.word	0x20001180
 800bc50:	2000117f 	.word	0x2000117f
 800bc54:	20000864 	.word	0x20000864
 800bc58:	20001254 	.word	0x20001254
 800bc5c:	2000117d 	.word	0x2000117d
 800bc60:	20001260 	.word	0x20001260
 800bc64:	2000117c 	.word	0x2000117c
 800bc68:	2000117b 	.word	0x2000117b
 800bc6c:	2000117e 	.word	0x2000117e
 800bc70:	20001181 	.word	0x20001181
 800bc74:	20001188 	.word	0x20001188
 800bc78:	20001189 	.word	0x20001189
 800bc7c:	2000118b 	.word	0x2000118b
 800bc80:	20000866 	.word	0x20000866
 800bc84:	2000118a 	.word	0x2000118a
 800bc88:	2000115e 	.word	0x2000115e
 800bc8c:	20001100 	.word	0x20001100
 800bc90:	2000115f 	.word	0x2000115f
 800bc94:	20001160 	.word	0x20001160
 800bc98:	20001161 	.word	0x20001161
 800bc9c:	20001162 	.word	0x20001162
 800bca0:	200011a4 	.word	0x200011a4
 800bca4:	20001156 	.word	0x20001156
 800bca8:	20001157 	.word	0x20001157
 800bcac:	20001158 	.word	0x20001158
 800bcb0:	20001159 	.word	0x20001159
 800bcb4:	2000115a 	.word	0x2000115a
 800bcb8:	2000115b 	.word	0x2000115b
 800bcbc:	2000115c 	.word	0x2000115c
 800bcc0:	2000115d 	.word	0x2000115d
 800bcc4:	200010f8 	.word	0x200010f8
 800bcc8:	200010fa 	.word	0x200010fa
 800bccc:	200010fc 	.word	0x200010fc
 800bcd0:	2000118c 	.word	0x2000118c

0800bcd4 <CAN_1_Receive>:

void CAN_1_Receive()
{
 800bcd4:	b598      	push	{r3, r4, r7, lr}
 800bcd6:	af00      	add	r7, sp, #0
	//------LINK4_1_boost_gear_rev_map 0x10 LMO1------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_01_Config);
 800bcd8:	4857      	ldr	r0, [pc, #348]	; (800be38 <CAN_1_Receive+0x164>)
 800bcda:	f7ff facb 	bl	800b274 <CAN_NODE_MO_Receive>

	*canData.p_air_22 = checkRangePlausi(CAN_1_LMO_01_Config.mo_ptr->can_data_byte[0], ERR_P_AIR_22); // ACHTUNG MOTOROLA und Offset --> Umwandlung in Simulink
 800bcde:	4b57      	ldr	r3, [pc, #348]	; (800be3c <CAN_1_Receive+0x168>)
 800bce0:	681c      	ldr	r4, [r3, #0]
 800bce2:	4b55      	ldr	r3, [pc, #340]	; (800be38 <CAN_1_Receive+0x164>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	7c1b      	ldrb	r3, [r3, #16]
 800bce8:	4618      	mov	r0, r3
 800bcea:	210b      	movs	r1, #11
 800bcec:	f000 ffb8 	bl	800cc60 <checkRangePlausi>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	7023      	strb	r3, [r4, #0]
	*canData.AN5GearPos = checkRangePlausi(CAN_1_LMO_01_Config.mo_ptr->can_data_byte[1], ERR_P_AIR_22_DES); //p_air_22_des
 800bcf6:	4b51      	ldr	r3, [pc, #324]	; (800be3c <CAN_1_Receive+0x168>)
 800bcf8:	685c      	ldr	r4, [r3, #4]
 800bcfa:	4b4f      	ldr	r3, [pc, #316]	; (800be38 <CAN_1_Receive+0x164>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	7c5b      	ldrb	r3, [r3, #17]
 800bd00:	4618      	mov	r0, r3
 800bd02:	210c      	movs	r1, #12
 800bd04:	f000 ffac 	bl	800cc60 <checkRangePlausi>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	7023      	strb	r3, [r4, #0]
	*canData.n_engine = checkRangePlausi(CAN_1_LMO_01_Config.mo_ptr->can_data_word[1], ERR_N_ENGINE);
 800bd0e:	4b4b      	ldr	r3, [pc, #300]	; (800be3c <CAN_1_Receive+0x168>)
 800bd10:	689c      	ldr	r4, [r3, #8]
 800bd12:	4b49      	ldr	r3, [pc, #292]	; (800be38 <CAN_1_Receive+0x164>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	8a5b      	ldrh	r3, [r3, #18]
 800bd18:	4618      	mov	r0, r3
 800bd1a:	2106      	movs	r1, #6
 800bd1c:	f000 ffa0 	bl	800cc60 <checkRangePlausi>
 800bd20:	4603      	mov	r3, r0
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	8023      	strh	r3, [r4, #0]
	*n_engine_LSB	= getbits(*canData.n_engine, 7, 8);
 800bd26:	4b46      	ldr	r3, [pc, #280]	; (800be40 <CAN_1_Receive+0x16c>)
 800bd28:	681c      	ldr	r4, [r3, #0]
 800bd2a:	4b44      	ldr	r3, [pc, #272]	; (800be3c <CAN_1_Receive+0x168>)
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	881b      	ldrh	r3, [r3, #0]
 800bd30:	4618      	mov	r0, r3
 800bd32:	2107      	movs	r1, #7
 800bd34:	2208      	movs	r2, #8
 800bd36:	f002 f995 	bl	800e064 <getbits>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	7023      	strb	r3, [r4, #0]
	*n_engine_MSB	= getbits(*canData.n_engine, 15, 8);
 800bd40:	4b40      	ldr	r3, [pc, #256]	; (800be44 <CAN_1_Receive+0x170>)
 800bd42:	681c      	ldr	r4, [r3, #0]
 800bd44:	4b3d      	ldr	r3, [pc, #244]	; (800be3c <CAN_1_Receive+0x168>)
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	881b      	ldrh	r3, [r3, #0]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	210f      	movs	r1, #15
 800bd4e:	2208      	movs	r2, #8
 800bd50:	f002 f988 	bl	800e064 <getbits>
 800bd54:	4603      	mov	r3, r0
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	7023      	strb	r3, [r4, #0]
	*canData.gear =  checkRangePlausi(CAN_1_LMO_01_Config.mo_ptr->can_data_byte[4],ERR_GEAR); // ACHTUNG MOTOROLA und nur 5 bit NEU --> Umwandlung in Simulink
 800bd5a:	4b38      	ldr	r3, [pc, #224]	; (800be3c <CAN_1_Receive+0x168>)
 800bd5c:	68dc      	ldr	r4, [r3, #12]
 800bd5e:	4b36      	ldr	r3, [pc, #216]	; (800be38 <CAN_1_Receive+0x164>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	7d1b      	ldrb	r3, [r3, #20]
 800bd64:	4618      	mov	r0, r3
 800bd66:	2104      	movs	r1, #4
 800bd68:	f000 ff7a 	bl	800cc60 <checkRangePlausi>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	7023      	strb	r3, [r4, #0]
	//*canData.gear_shift_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],28,4);
	//*canData.fuel_table_1_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],29,1);
	//*canData.fuel_table_2_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],30,1);
	//*canData.ign_table_1_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],31,1);
	//*canData.ign_table_2_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],32,1);
	*canData.TPS = CAN_1_LMO_01_Config.mo_ptr->can_data_byte[4] & 0x07;
 800bd72:	4b32      	ldr	r3, [pc, #200]	; (800be3c <CAN_1_Receive+0x168>)
 800bd74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd76:	4a30      	ldr	r2, [pc, #192]	; (800be38 <CAN_1_Receive+0x164>)
 800bd78:	6812      	ldr	r2, [r2, #0]
 800bd7a:	7d12      	ldrb	r2, [r2, #20]
 800bd7c:	f002 0207 	and.w	r2, r2, #7
 800bd80:	b2d2      	uxtb	r2, r2
 800bd82:	701a      	strb	r2, [r3, #0]

	//------LINK4_2_press_temp_Wg 0x771 LMO2------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_02_Config);
 800bd84:	4830      	ldr	r0, [pc, #192]	; (800be48 <CAN_1_Receive+0x174>)
 800bd86:	f7ff fa75 	bl	800b274 <CAN_NODE_MO_Receive>

	//*canData.p_oil = CAN_1_LMO_02_Config.mo_ptr->can_data_byte[0];
	//*canData.p_fuel_rail =  CAN_1_LMO_02_Config.mo_ptr->can_data_byte[1];
	//*canData.x_throttle_valve = CAN_1_LMO_02_Config.mo_ptr->can_data_byte[2]; //x_throttleValve
	*canData.t_water_engine = CAN_1_LMO_02_Config.mo_ptr->can_data_byte[3];
 800bd8a:	4b2c      	ldr	r3, [pc, #176]	; (800be3c <CAN_1_Receive+0x168>)
 800bd8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd8e:	4a2e      	ldr	r2, [pc, #184]	; (800be48 <CAN_1_Receive+0x174>)
 800bd90:	6812      	ldr	r2, [r2, #0]
 800bd92:	7cd2      	ldrb	r2, [r2, #19]
 800bd94:	701a      	strb	r2, [r3, #0]
	*canData.error_trigger = (CAN_1_LMO_03_Config.mo_ptr->can_data_byte[6]);
	*canData.boost_table = CAN_1_LMO_03_Config.mo_ptr->can_data_byte[7];
	*/

	//------STW 0x8 LM04------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_04_Config);
 800bd96:	482d      	ldr	r0, [pc, #180]	; (800be4c <CAN_1_Receive+0x178>)
 800bd98:	f7ff fa6c 	bl	800b274 <CAN_NODE_MO_Receive>

	*canData.STW_shift_up_request = checkRangePlausi(getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],0,1),ERR_STW_SHIFT_UP_REQUEST);
 800bd9c:	4b27      	ldr	r3, [pc, #156]	; (800be3c <CAN_1_Receive+0x168>)
 800bd9e:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800bda0:	4b2a      	ldr	r3, [pc, #168]	; (800be4c <CAN_1_Receive+0x178>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	7c1b      	ldrb	r3, [r3, #16]
 800bda6:	4618      	mov	r0, r3
 800bda8:	2100      	movs	r1, #0
 800bdaa:	2201      	movs	r2, #1
 800bdac:	f002 f95a 	bl	800e064 <getbits>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	2112      	movs	r1, #18
 800bdb6:	f000 ff53 	bl	800cc60 <checkRangePlausi>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	7023      	strb	r3, [r4, #0]
	*canData.STW_shift_down_request = checkRangePlausi(getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],1,1),ERR_STW_SHIFT_DOWN_REQUEST);
 800bdc0:	4b1e      	ldr	r3, [pc, #120]	; (800be3c <CAN_1_Receive+0x168>)
 800bdc2:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800bdc4:	4b21      	ldr	r3, [pc, #132]	; (800be4c <CAN_1_Receive+0x178>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	7c1b      	ldrb	r3, [r3, #16]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	2101      	movs	r1, #1
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f002 f948 	bl	800e064 <getbits>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	2111      	movs	r1, #17
 800bdda:	f000 ff41 	bl	800cc60 <checkRangePlausi>
 800bdde:	4603      	mov	r3, r0
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	7023      	strb	r3, [r4, #0]
	//*canData.STW_trigger_point = getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],2,1);
	//*canData.STW_engine_map = getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],3,1);
	//*canData.STW_rev_limiter = getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],4,1);
	*canData.STW_clutch_mode = CAN_1_LMO_04_Config.mo_ptr->can_data_byte[1];
 800bde4:	4b15      	ldr	r3, [pc, #84]	; (800be3c <CAN_1_Receive+0x168>)
 800bde6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bde8:	4a18      	ldr	r2, [pc, #96]	; (800be4c <CAN_1_Receive+0x178>)
 800bdea:	6812      	ldr	r2, [r2, #0]
 800bdec:	7c52      	ldrb	r2, [r2, #17]
 800bdee:	701a      	strb	r2, [r3, #0]
	*canData.STW_transmission_mode = checkRangePlausi(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[2],ERR_TRANSMISSION_MODE);
 800bdf0:	4b12      	ldr	r3, [pc, #72]	; (800be3c <CAN_1_Receive+0x168>)
 800bdf2:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800bdf4:	4b15      	ldr	r3, [pc, #84]	; (800be4c <CAN_1_Receive+0x178>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	7c9b      	ldrb	r3, [r3, #18]
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	2114      	movs	r1, #20
 800bdfe:	f000 ff2f 	bl	800cc60 <checkRangePlausi>
 800be02:	4603      	mov	r3, r0
 800be04:	b2db      	uxtb	r3, r3
 800be06:	7023      	strb	r3, [r4, #0]
	*canData.STW_mue_tyre = checkRangePlausi(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[3],ERR_MUE_TYRE);
 800be08:	4b0c      	ldr	r3, [pc, #48]	; (800be3c <CAN_1_Receive+0x168>)
 800be0a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800be0e:	4b0f      	ldr	r3, [pc, #60]	; (800be4c <CAN_1_Receive+0x178>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	7cdb      	ldrb	r3, [r3, #19]
 800be14:	4618      	mov	r0, r3
 800be16:	2110      	movs	r1, #16
 800be18:	f000 ff22 	bl	800cc60 <checkRangePlausi>
 800be1c:	4603      	mov	r3, r0
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	7023      	strb	r3, [r4, #0]
	//*canData.STW_brake_balance = CAN_1_LMO_04_Config.mo_ptr->can_data_byte[4];

	//-----CAN-Modul LM08-----
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_08_Config);
 800be22:	480b      	ldr	r0, [pc, #44]	; (800be50 <CAN_1_Receive+0x17c>)
 800be24:	f7ff fa26 	bl	800b274 <CAN_NODE_MO_Receive>

	*canData.p_pneu_VCU_IN = CAN_1_LMO_08_Config.mo_ptr->can_data_byte[0];
 800be28:	4b04      	ldr	r3, [pc, #16]	; (800be3c <CAN_1_Receive+0x168>)
 800be2a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800be2e:	4a08      	ldr	r2, [pc, #32]	; (800be50 <CAN_1_Receive+0x17c>)
 800be30:	6812      	ldr	r2, [r2, #0]
 800be32:	7c12      	ldrb	r2, [r2, #16]
 800be34:	701a      	strb	r2, [r3, #0]
}
 800be36:	bd98      	pop	{r3, r4, r7, pc}
 800be38:	0800f640 	.word	0x0800f640
 800be3c:	20001338 	.word	0x20001338
 800be40:	20001254 	.word	0x20001254
 800be44:	20001260 	.word	0x20001260
 800be48:	0800f64c 	.word	0x0800f64c
 800be4c:	0800f664 	.word	0x0800f664
 800be50:	0800f694 	.word	0x0800f694

0800be54 <CAN_1_Transmit>:

void CAN_1_Transmit()
{
 800be54:	b598      	push	{r3, r4, r7, lr}
 800be56:	af00      	add	r7, sp, #0
	//------TTC_ABS 0x5C0 LM05------
	CAN1_data_Tx_LM05[0] = *canData.ABS_switchstate;
 800be58:	4b97      	ldr	r3, [pc, #604]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800be5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be5e:	781a      	ldrb	r2, [r3, #0]
 800be60:	4b96      	ldr	r3, [pc, #600]	; (800c0bc <CAN_1_Transmit+0x268>)
 800be62:	701a      	strb	r2, [r3, #0]
	CAN1_data_Tx_LM05[1] = getbits(*canData.p_brake_F, 7,8);
 800be64:	4b94      	ldr	r3, [pc, #592]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800be66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be6a:	881b      	ldrh	r3, [r3, #0]
 800be6c:	4618      	mov	r0, r3
 800be6e:	2107      	movs	r1, #7
 800be70:	2208      	movs	r2, #8
 800be72:	f002 f8f7 	bl	800e064 <getbits>
 800be76:	4603      	mov	r3, r0
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	4b90      	ldr	r3, [pc, #576]	; (800c0bc <CAN_1_Transmit+0x268>)
 800be7c:	705a      	strb	r2, [r3, #1]
	CAN1_data_Tx_LM05[2] = getbits(*canData.p_brake_F, 15,8);
 800be7e:	4b8e      	ldr	r3, [pc, #568]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800be80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be84:	881b      	ldrh	r3, [r3, #0]
 800be86:	4618      	mov	r0, r3
 800be88:	210f      	movs	r1, #15
 800be8a:	2208      	movs	r2, #8
 800be8c:	f002 f8ea 	bl	800e064 <getbits>
 800be90:	4603      	mov	r3, r0
 800be92:	b2da      	uxtb	r2, r3
 800be94:	4b89      	ldr	r3, [pc, #548]	; (800c0bc <CAN_1_Transmit+0x268>)
 800be96:	709a      	strb	r2, [r3, #2]
	CAN1_data_Tx_LM05[3] = getbits(*canData.ABS_BL_switch,0,1) | getbits(*canData.ABS_active,0,1) << 5 | getbits(*canData.ABS_EBD_lamp,0,1) << 6 | getbits(*canData.ABS_lamp,0,1) << 7 | getbits(*canData.Brakelight_CAN1,0,1) << 1;
 800be98:	4b87      	ldr	r3, [pc, #540]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800be9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	4618      	mov	r0, r3
 800bea2:	2100      	movs	r1, #0
 800bea4:	2201      	movs	r2, #1
 800bea6:	f002 f8dd 	bl	800e064 <getbits>
 800beaa:	4603      	mov	r3, r0
 800beac:	b2dc      	uxtb	r4, r3
 800beae:	4b82      	ldr	r3, [pc, #520]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800beb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	4618      	mov	r0, r3
 800beb8:	2100      	movs	r1, #0
 800beba:	2201      	movs	r2, #1
 800bebc:	f002 f8d2 	bl	800e064 <getbits>
 800bec0:	4603      	mov	r3, r0
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	015b      	lsls	r3, r3, #5
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	4323      	orrs	r3, r4
 800beca:	b2dc      	uxtb	r4, r3
 800becc:	4b7a      	ldr	r3, [pc, #488]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800bece:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	4618      	mov	r0, r3
 800bed6:	2100      	movs	r1, #0
 800bed8:	2201      	movs	r2, #1
 800beda:	f002 f8c3 	bl	800e064 <getbits>
 800bede:	4603      	mov	r3, r0
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	019b      	lsls	r3, r3, #6
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	4323      	orrs	r3, r4
 800bee8:	b2dc      	uxtb	r4, r3
 800beea:	4b73      	ldr	r3, [pc, #460]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800beec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	4618      	mov	r0, r3
 800bef4:	2100      	movs	r1, #0
 800bef6:	2201      	movs	r2, #1
 800bef8:	f002 f8b4 	bl	800e064 <getbits>
 800befc:	4603      	mov	r3, r0
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	01db      	lsls	r3, r3, #7
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	4323      	orrs	r3, r4
 800bf06:	b2dc      	uxtb	r4, r3
 800bf08:	4b6b      	ldr	r3, [pc, #428]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800bf0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	4618      	mov	r0, r3
 800bf12:	2100      	movs	r1, #0
 800bf14:	2201      	movs	r2, #1
 800bf16:	f002 f8a5 	bl	800e064 <getbits>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	005b      	lsls	r3, r3, #1
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	4323      	orrs	r3, r4
 800bf24:	b2da      	uxtb	r2, r3
 800bf26:	4b65      	ldr	r3, [pc, #404]	; (800c0bc <CAN_1_Transmit+0x268>)
 800bf28:	70da      	strb	r2, [r3, #3]

	CAN_NODE_MO_UpdateData(&CAN_1_LMO_05_Config, CAN1_data_Tx_LM05);
 800bf2a:	4865      	ldr	r0, [pc, #404]	; (800c0c0 <CAN_1_Transmit+0x26c>)
 800bf2c:	4963      	ldr	r1, [pc, #396]	; (800c0bc <CAN_1_Transmit+0x268>)
 800bf2e:	f7ff f9b3 	bl	800b298 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_1_LMO_05_Config);
 800bf32:	4863      	ldr	r0, [pc, #396]	; (800c0c0 <CAN_1_Transmit+0x26c>)
 800bf34:	f7ff f98c 	bl	800b250 <CAN_NODE_MO_Transmit>

	//------TTC_LaunchControl 0x7F0 LM06------
	CAN1_data_Tx_LM06[0] = *canData.p_brake_R;
 800bf38:	4b5f      	ldr	r3, [pc, #380]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800bf3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf3e:	781a      	ldrb	r2, [r3, #0]
 800bf40:	4b60      	ldr	r3, [pc, #384]	; (800c0c4 <CAN_1_Transmit+0x270>)
 800bf42:	701a      	strb	r2, [r3, #0]
	CAN1_data_Tx_LM06[1] = *canData.LC_mue_tyre;
 800bf44:	4b5c      	ldr	r3, [pc, #368]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800bf46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bf4a:	781a      	ldrb	r2, [r3, #0]
 800bf4c:	4b5d      	ldr	r3, [pc, #372]	; (800c0c4 <CAN_1_Transmit+0x270>)
 800bf4e:	705a      	strb	r2, [r3, #1]
	CAN1_data_Tx_LM06[2] = *canData.LC_clutch_pos_des;
 800bf50:	4b59      	ldr	r3, [pc, #356]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800bf52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bf56:	781a      	ldrb	r2, [r3, #0]
 800bf58:	4b5a      	ldr	r3, [pc, #360]	; (800c0c4 <CAN_1_Transmit+0x270>)
 800bf5a:	709a      	strb	r2, [r3, #2]
	CAN1_data_Tx_LM06[3] = getbits(*canData.LC_dash_bit,0,1) | getbits(*canData.LC_active_bit,0,1) << 1 |  getbits(*canData.LC_ready_bit,0,1) << 2;
 800bf5c:	4b56      	ldr	r3, [pc, #344]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800bf5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	4618      	mov	r0, r3
 800bf66:	2100      	movs	r1, #0
 800bf68:	2201      	movs	r2, #1
 800bf6a:	f002 f87b 	bl	800e064 <getbits>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	b2dc      	uxtb	r4, r3
 800bf72:	4b51      	ldr	r3, [pc, #324]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800bf74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	2100      	movs	r1, #0
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f002 f870 	bl	800e064 <getbits>
 800bf84:	4603      	mov	r3, r0
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	005b      	lsls	r3, r3, #1
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	4323      	orrs	r3, r4
 800bf8e:	b2dc      	uxtb	r4, r3
 800bf90:	4b49      	ldr	r3, [pc, #292]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800bf92:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f002 f861 	bl	800e064 <getbits>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	4323      	orrs	r3, r4
 800bfac:	b2da      	uxtb	r2, r3
 800bfae:	4b45      	ldr	r3, [pc, #276]	; (800c0c4 <CAN_1_Transmit+0x270>)
 800bfb0:	70da      	strb	r2, [r3, #3]
	CAN1_data_Tx_LM06[4] = *canData.LC_Mdes;
 800bfb2:	4b41      	ldr	r3, [pc, #260]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800bfb4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bfb8:	781a      	ldrb	r2, [r3, #0]
 800bfba:	4b42      	ldr	r3, [pc, #264]	; (800c0c4 <CAN_1_Transmit+0x270>)
 800bfbc:	711a      	strb	r2, [r3, #4]
	CAN1_data_Tx_LM06[5] = *canData.LC_Fnr;
 800bfbe:	4b3e      	ldr	r3, [pc, #248]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800bfc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800bfc4:	781a      	ldrb	r2, [r3, #0]
 800bfc6:	4b3f      	ldr	r3, [pc, #252]	; (800c0c4 <CAN_1_Transmit+0x270>)
 800bfc8:	715a      	strb	r2, [r3, #5]

	CAN_NODE_MO_UpdateData(&CAN_1_LMO_06_Config, CAN1_data_Tx_LM06);
 800bfca:	483f      	ldr	r0, [pc, #252]	; (800c0c8 <CAN_1_Transmit+0x274>)
 800bfcc:	493d      	ldr	r1, [pc, #244]	; (800c0c4 <CAN_1_Transmit+0x270>)
 800bfce:	f7ff f963 	bl	800b298 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_1_LMO_06_Config);
 800bfd2:	483d      	ldr	r0, [pc, #244]	; (800c0c8 <CAN_1_Transmit+0x274>)
 800bfd4:	f7ff f93c 	bl	800b250 <CAN_NODE_MO_Transmit>

	//------TTC_WheelSpeed 0x340 LM07------
	CAN1_data_Tx_LM07[0] = getbits(*canData.n_wheel_FL,7,8);
 800bfd8:	4b37      	ldr	r3, [pc, #220]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800bfda:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800bfde:	881b      	ldrh	r3, [r3, #0]
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	2107      	movs	r1, #7
 800bfe4:	2208      	movs	r2, #8
 800bfe6:	f002 f83d 	bl	800e064 <getbits>
 800bfea:	4603      	mov	r3, r0
 800bfec:	b2da      	uxtb	r2, r3
 800bfee:	4b37      	ldr	r3, [pc, #220]	; (800c0cc <CAN_1_Transmit+0x278>)
 800bff0:	701a      	strb	r2, [r3, #0]
	CAN1_data_Tx_LM07[1] = getbits(*canData.n_wheel_FL,15,8);
 800bff2:	4b31      	ldr	r3, [pc, #196]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800bff4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800bff8:	881b      	ldrh	r3, [r3, #0]
 800bffa:	4618      	mov	r0, r3
 800bffc:	210f      	movs	r1, #15
 800bffe:	2208      	movs	r2, #8
 800c000:	f002 f830 	bl	800e064 <getbits>
 800c004:	4603      	mov	r3, r0
 800c006:	b2da      	uxtb	r2, r3
 800c008:	4b30      	ldr	r3, [pc, #192]	; (800c0cc <CAN_1_Transmit+0x278>)
 800c00a:	705a      	strb	r2, [r3, #1]
	CAN1_data_Tx_LM07[2] = getbits(*canData.n_wheel_FR,7,8);
 800c00c:	4b2a      	ldr	r3, [pc, #168]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800c00e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c012:	881b      	ldrh	r3, [r3, #0]
 800c014:	4618      	mov	r0, r3
 800c016:	2107      	movs	r1, #7
 800c018:	2208      	movs	r2, #8
 800c01a:	f002 f823 	bl	800e064 <getbits>
 800c01e:	4603      	mov	r3, r0
 800c020:	b2da      	uxtb	r2, r3
 800c022:	4b2a      	ldr	r3, [pc, #168]	; (800c0cc <CAN_1_Transmit+0x278>)
 800c024:	709a      	strb	r2, [r3, #2]
	CAN1_data_Tx_LM07[3] = getbits(*canData.n_wheel_FR,15,8);
 800c026:	4b24      	ldr	r3, [pc, #144]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800c028:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c02c:	881b      	ldrh	r3, [r3, #0]
 800c02e:	4618      	mov	r0, r3
 800c030:	210f      	movs	r1, #15
 800c032:	2208      	movs	r2, #8
 800c034:	f002 f816 	bl	800e064 <getbits>
 800c038:	4603      	mov	r3, r0
 800c03a:	b2da      	uxtb	r2, r3
 800c03c:	4b23      	ldr	r3, [pc, #140]	; (800c0cc <CAN_1_Transmit+0x278>)
 800c03e:	70da      	strb	r2, [r3, #3]
	CAN1_data_Tx_LM07[4] = getbits(*canData.n_wheel_RL,7,8);
 800c040:	4b1d      	ldr	r3, [pc, #116]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800c042:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c046:	881b      	ldrh	r3, [r3, #0]
 800c048:	4618      	mov	r0, r3
 800c04a:	2107      	movs	r1, #7
 800c04c:	2208      	movs	r2, #8
 800c04e:	f002 f809 	bl	800e064 <getbits>
 800c052:	4603      	mov	r3, r0
 800c054:	b2da      	uxtb	r2, r3
 800c056:	4b1d      	ldr	r3, [pc, #116]	; (800c0cc <CAN_1_Transmit+0x278>)
 800c058:	711a      	strb	r2, [r3, #4]
	CAN1_data_Tx_LM07[5] = getbits(*canData.n_wheel_RL,15,8);
 800c05a:	4b17      	ldr	r3, [pc, #92]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800c05c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c060:	881b      	ldrh	r3, [r3, #0]
 800c062:	4618      	mov	r0, r3
 800c064:	210f      	movs	r1, #15
 800c066:	2208      	movs	r2, #8
 800c068:	f001 fffc 	bl	800e064 <getbits>
 800c06c:	4603      	mov	r3, r0
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	4b16      	ldr	r3, [pc, #88]	; (800c0cc <CAN_1_Transmit+0x278>)
 800c072:	715a      	strb	r2, [r3, #5]
	CAN1_data_Tx_LM07[6] = getbits(*canData.n_wheel_RR,7,8);
 800c074:	4b10      	ldr	r3, [pc, #64]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800c076:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c07a:	881b      	ldrh	r3, [r3, #0]
 800c07c:	4618      	mov	r0, r3
 800c07e:	2107      	movs	r1, #7
 800c080:	2208      	movs	r2, #8
 800c082:	f001 ffef 	bl	800e064 <getbits>
 800c086:	4603      	mov	r3, r0
 800c088:	b2da      	uxtb	r2, r3
 800c08a:	4b10      	ldr	r3, [pc, #64]	; (800c0cc <CAN_1_Transmit+0x278>)
 800c08c:	719a      	strb	r2, [r3, #6]
	CAN1_data_Tx_LM07[7] = getbits(*canData.n_wheel_RR,15,8);
 800c08e:	4b0a      	ldr	r3, [pc, #40]	; (800c0b8 <CAN_1_Transmit+0x264>)
 800c090:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c094:	881b      	ldrh	r3, [r3, #0]
 800c096:	4618      	mov	r0, r3
 800c098:	210f      	movs	r1, #15
 800c09a:	2208      	movs	r2, #8
 800c09c:	f001 ffe2 	bl	800e064 <getbits>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	b2da      	uxtb	r2, r3
 800c0a4:	4b09      	ldr	r3, [pc, #36]	; (800c0cc <CAN_1_Transmit+0x278>)
 800c0a6:	71da      	strb	r2, [r3, #7]

	CAN_NODE_MO_UpdateData(&CAN_1_LMO_07_Config, CAN1_data_Tx_LM07);
 800c0a8:	4809      	ldr	r0, [pc, #36]	; (800c0d0 <CAN_1_Transmit+0x27c>)
 800c0aa:	4908      	ldr	r1, [pc, #32]	; (800c0cc <CAN_1_Transmit+0x278>)
 800c0ac:	f7ff f8f4 	bl	800b298 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_1_LMO_07_Config);
 800c0b0:	4807      	ldr	r0, [pc, #28]	; (800c0d0 <CAN_1_Transmit+0x27c>)
 800c0b2:	f7ff f8cd 	bl	800b250 <CAN_NODE_MO_Transmit>
}
 800c0b6:	bd98      	pop	{r3, r4, r7, pc}
 800c0b8:	20001338 	.word	0x20001338
 800c0bc:	2000084c 	.word	0x2000084c
 800c0c0:	0800f670 	.word	0x0800f670
 800c0c4:	20000854 	.word	0x20000854
 800c0c8:	0800f67c 	.word	0x0800f67c
 800c0cc:	2000085c 	.word	0x2000085c
 800c0d0:	0800f688 	.word	0x0800f688

0800c0d4 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800c0e0:	78fb      	ldrb	r3, [r7, #3]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	409a      	lsls	r2, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	605a      	str	r2, [r3, #4]
}
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800c100:	78fb      	ldrb	r3, [r7, #3]
 800c102:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c106:	409a      	lsls	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	605a      	str	r2, [r3, #4]
}
 800c10c:	370c      	adds	r7, #12
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop

0800c118 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	7c1b      	ldrb	r3, [r3, #16]
 800c128:	4610      	mov	r0, r2
 800c12a:	4619      	mov	r1, r3
 800c12c:	f7ff ffd2 	bl	800c0d4 <XMC_GPIO_SetOutputHigh>
}
 800c130:	3708      	adds	r7, #8
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop

0800c138 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	7c1b      	ldrb	r3, [r3, #16]
 800c148:	4610      	mov	r0, r2
 800c14a:	4619      	mov	r1, r3
 800c14c:	f7ff ffd2 	bl	800c0f4 <XMC_GPIO_SetOutputLow>
}
 800c150:	3708      	adds	r7, #8
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop

0800c158 <CAN_2_ini>:
uint8_t *n_wheel_RR_mpros_LSB, *n_wheel_RR_mpros_MSB;

boolean_T CAN_2_RES = true;

void CAN_2_ini()
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	af00      	add	r7, sp, #0
	//Termination Resistor on CAN 2
	if (CAN_2_RES)
 800c15c:	4b79      	ldr	r3, [pc, #484]	; (800c344 <CAN_2_ini+0x1ec>)
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d003      	beq.n	800c16c <CAN_2_ini+0x14>
		DIGITAL_IO_SetOutputHigh (&CAN2_Res);
 800c164:	4878      	ldr	r0, [pc, #480]	; (800c348 <CAN_2_ini+0x1f0>)
 800c166:	f7ff ffd7 	bl	800c118 <DIGITAL_IO_SetOutputHigh>
 800c16a:	e002      	b.n	800c172 <CAN_2_ini+0x1a>
	else
		DIGITAL_IO_SetOutputLow (&CAN2_Res);
 800c16c:	4876      	ldr	r0, [pc, #472]	; (800c348 <CAN_2_ini+0x1f0>)
 800c16e:	f7ff ffe3 	bl	800c138 <DIGITAL_IO_SetOutputLow>

	//------ABS 0x80 LM01------
	canData.g_yaw_ABS 			= &g_yaw_ABS;
 800c172:	4b76      	ldr	r3, [pc, #472]	; (800c34c <CAN_2_ini+0x1f4>)
 800c174:	4a76      	ldr	r2, [pc, #472]	; (800c350 <CAN_2_ini+0x1f8>)
 800c176:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	g_yaw_ABS_LSB				= &VCU_DW.VAR_IN_g_yaw_ABS_LSB;
 800c17a:	4b76      	ldr	r3, [pc, #472]	; (800c354 <CAN_2_ini+0x1fc>)
 800c17c:	4a76      	ldr	r2, [pc, #472]	; (800c358 <CAN_2_ini+0x200>)
 800c17e:	601a      	str	r2, [r3, #0]
	g_yaw_ABS_MSB				= &VCU_DW.VAR_IN_g_long_ABS_MSB;
 800c180:	4b76      	ldr	r3, [pc, #472]	; (800c35c <CAN_2_ini+0x204>)
 800c182:	4a77      	ldr	r2, [pc, #476]	; (800c360 <CAN_2_ini+0x208>)
 800c184:	601a      	str	r2, [r3, #0]
	canData.g_long_ABS			= &g_long_ABS;
 800c186:	4b71      	ldr	r3, [pc, #452]	; (800c34c <CAN_2_ini+0x1f4>)
 800c188:	4a76      	ldr	r2, [pc, #472]	; (800c364 <CAN_2_ini+0x20c>)
 800c18a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	g_long_ABS_LSB				= &VCU_DW.VAR_IN_g_long_ABS_LSB;
 800c18e:	4b76      	ldr	r3, [pc, #472]	; (800c368 <CAN_2_ini+0x210>)
 800c190:	4a76      	ldr	r2, [pc, #472]	; (800c36c <CAN_2_ini+0x214>)
 800c192:	601a      	str	r2, [r3, #0]
	g_long_ABS_MSB				= &VCU_DW.VAR_IN_g_long_ABS_MSB;
 800c194:	4b76      	ldr	r3, [pc, #472]	; (800c370 <CAN_2_ini+0x218>)
 800c196:	4a72      	ldr	r2, [pc, #456]	; (800c360 <CAN_2_ini+0x208>)
 800c198:	601a      	str	r2, [r3, #0]

	//------ABS 0x5C0 LM02------
	canData.ABS_switchstate_CAN2	= &VCU_DW.VAR_IN_ABS_switchstate;
 800c19a:	4b6c      	ldr	r3, [pc, #432]	; (800c34c <CAN_2_ini+0x1f4>)
 800c19c:	4a75      	ldr	r2, [pc, #468]	; (800c374 <CAN_2_ini+0x21c>)
 800c19e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	canData.p_brake_F_CAN2			= &p_brake_F;
 800c1a2:	4b6a      	ldr	r3, [pc, #424]	; (800c34c <CAN_2_ini+0x1f4>)
 800c1a4:	4a74      	ldr	r2, [pc, #464]	; (800c378 <CAN_2_ini+0x220>)
 800c1a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	p_brake_F_LSB					= &VCU_DW.VAR_IN_p_brake_F_LSB;
 800c1aa:	4b74      	ldr	r3, [pc, #464]	; (800c37c <CAN_2_ini+0x224>)
 800c1ac:	4a74      	ldr	r2, [pc, #464]	; (800c380 <CAN_2_ini+0x228>)
 800c1ae:	601a      	str	r2, [r3, #0]
	p_brake_F_MSB					= &VCU_DW.VAR_IN_p_brake_F_MSB;
 800c1b0:	4b74      	ldr	r3, [pc, #464]	; (800c384 <CAN_2_ini+0x22c>)
 800c1b2:	4a75      	ldr	r2, [pc, #468]	; (800c388 <CAN_2_ini+0x230>)
 800c1b4:	601a      	str	r2, [r3, #0]
	canData.ABS_BL_swtich_CAN2		= &VCU_DW.VAR_IN_ABS_BL_switch;
 800c1b6:	4b65      	ldr	r3, [pc, #404]	; (800c34c <CAN_2_ini+0x1f4>)
 800c1b8:	4a74      	ldr	r2, [pc, #464]	; (800c38c <CAN_2_ini+0x234>)
 800c1ba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	canData.ABS_active_CAN2			= &VCU_DW.VAR_IN_ABS_active;
 800c1be:	4b63      	ldr	r3, [pc, #396]	; (800c34c <CAN_2_ini+0x1f4>)
 800c1c0:	4a73      	ldr	r2, [pc, #460]	; (800c390 <CAN_2_ini+0x238>)
 800c1c2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	canData.ABS_EBD_lamp_CAN2		= &VCU_DW.VAR_IN_ABS_EBD_Lamp;
 800c1c6:	4b61      	ldr	r3, [pc, #388]	; (800c34c <CAN_2_ini+0x1f4>)
 800c1c8:	4a72      	ldr	r2, [pc, #456]	; (800c394 <CAN_2_ini+0x23c>)
 800c1ca:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	//------Wheel n 0x140 LM03------
	canData.n_wheel_FL_mpros	= &n_wheel_FL_mpros;
 800c1ce:	4b5f      	ldr	r3, [pc, #380]	; (800c34c <CAN_2_ini+0x1f4>)
 800c1d0:	4a71      	ldr	r2, [pc, #452]	; (800c398 <CAN_2_ini+0x240>)
 800c1d2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	n_wheel_FL_mpros_LSB 		= &VCU_DW.VAR_IN_n_wheel_FL_mpros_LSB;
 800c1d6:	4b71      	ldr	r3, [pc, #452]	; (800c39c <CAN_2_ini+0x244>)
 800c1d8:	4a71      	ldr	r2, [pc, #452]	; (800c3a0 <CAN_2_ini+0x248>)
 800c1da:	601a      	str	r2, [r3, #0]
	n_wheel_FL_mpros_MSB 		= &VCU_DW.VAR_IN_n_wheel_FL_mpros_MSB;
 800c1dc:	4b71      	ldr	r3, [pc, #452]	; (800c3a4 <CAN_2_ini+0x24c>)
 800c1de:	4a72      	ldr	r2, [pc, #456]	; (800c3a8 <CAN_2_ini+0x250>)
 800c1e0:	601a      	str	r2, [r3, #0]

	//------Wheel n 0x142 LM04------
	canData.n_wheel_FR_mpros	= &n_wheel_FR_mpros;
 800c1e2:	4b5a      	ldr	r3, [pc, #360]	; (800c34c <CAN_2_ini+0x1f4>)
 800c1e4:	4a71      	ldr	r2, [pc, #452]	; (800c3ac <CAN_2_ini+0x254>)
 800c1e6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	n_wheel_FR_mpros_LSB 		= &VCU_DW.VAR_IN_n_wheel_FR_mpros_LSB;
 800c1ea:	4b71      	ldr	r3, [pc, #452]	; (800c3b0 <CAN_2_ini+0x258>)
 800c1ec:	4a71      	ldr	r2, [pc, #452]	; (800c3b4 <CAN_2_ini+0x25c>)
 800c1ee:	601a      	str	r2, [r3, #0]
	n_wheel_FR_mpros_MSB 		= &VCU_DW.VAR_IN_n_wheel_FR_mpros_MSB;
 800c1f0:	4b71      	ldr	r3, [pc, #452]	; (800c3b8 <CAN_2_ini+0x260>)
 800c1f2:	4a72      	ldr	r2, [pc, #456]	; (800c3bc <CAN_2_ini+0x264>)
 800c1f4:	601a      	str	r2, [r3, #0]

	//------Wheel n 0x340 LM05------
	canData.n_wheel_RL_mpros	= &n_wheel_RL_mpros;
 800c1f6:	4b55      	ldr	r3, [pc, #340]	; (800c34c <CAN_2_ini+0x1f4>)
 800c1f8:	4a71      	ldr	r2, [pc, #452]	; (800c3c0 <CAN_2_ini+0x268>)
 800c1fa:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	n_wheel_RL_mpros_LSB 		= &VCU_DW.VAR_IN_n_wheel_RL_mpros_LSB;
 800c1fe:	4b71      	ldr	r3, [pc, #452]	; (800c3c4 <CAN_2_ini+0x26c>)
 800c200:	4a71      	ldr	r2, [pc, #452]	; (800c3c8 <CAN_2_ini+0x270>)
 800c202:	601a      	str	r2, [r3, #0]
	n_wheel_RL_mpros_MSB 		= &VCU_DW.VAR_IN_n_wheel_RL_mpros_MSB;
 800c204:	4b71      	ldr	r3, [pc, #452]	; (800c3cc <CAN_2_ini+0x274>)
 800c206:	4a72      	ldr	r2, [pc, #456]	; (800c3d0 <CAN_2_ini+0x278>)
 800c208:	601a      	str	r2, [r3, #0]

	//------Wheel n 0x342 LM06------
	canData.n_wheel_RR_mpros	= &n_wheel_RR_mpros;
 800c20a:	4b50      	ldr	r3, [pc, #320]	; (800c34c <CAN_2_ini+0x1f4>)
 800c20c:	4a71      	ldr	r2, [pc, #452]	; (800c3d4 <CAN_2_ini+0x27c>)
 800c20e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	n_wheel_RR_mpros_LSB 		= &VCU_DW.VAR_IN_n_wheel_RR_mpros_LSB;
 800c212:	4b71      	ldr	r3, [pc, #452]	; (800c3d8 <CAN_2_ini+0x280>)
 800c214:	4a71      	ldr	r2, [pc, #452]	; (800c3dc <CAN_2_ini+0x284>)
 800c216:	601a      	str	r2, [r3, #0]
	n_wheel_RR_mpros_MSB 		= &VCU_DW.VAR_IN_n_wheel_RR_mpros_MSB;
 800c218:	4b71      	ldr	r3, [pc, #452]	; (800c3e0 <CAN_2_ini+0x288>)
 800c21a:	4a72      	ldr	r2, [pc, #456]	; (800c3e4 <CAN_2_ini+0x28c>)
 800c21c:	601a      	str	r2, [r3, #0]
	//BSPD 0x200 LM07

	//BSPD 0x201 LM08

	//Wheelforce 0x7E0 LM09
	canData.f_FL			= &VCU_DW.VAR_OUT_f_FL;
 800c21e:	4b4b      	ldr	r3, [pc, #300]	; (800c34c <CAN_2_ini+0x1f4>)
 800c220:	4a71      	ldr	r2, [pc, #452]	; (800c3e8 <CAN_2_ini+0x290>)
 800c222:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	canData.f_FR			= &VCU_DW.VAR_OUT_f_FR;
 800c226:	4b49      	ldr	r3, [pc, #292]	; (800c34c <CAN_2_ini+0x1f4>)
 800c228:	4a70      	ldr	r2, [pc, #448]	; (800c3ec <CAN_2_ini+0x294>)
 800c22a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	//canData.f_RL			= (uint16_t*)&VCU_DW.VAR_OUT_f_RL;
	//canData.f_RR			= (uint16_t*)&VCU_DW.VAR_OUT_f_RR;
	canData.TR1_VSense_WP	= &VAR_TR1_VSense_WP;
 800c22e:	4b47      	ldr	r3, [pc, #284]	; (800c34c <CAN_2_ini+0x1f4>)
 800c230:	4a6f      	ldr	r2, [pc, #444]	; (800c3f0 <CAN_2_ini+0x298>)
 800c232:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	canData.TR2_VSense_FAN1	= &VAR_TR2_VSense_FAN1;
 800c236:	4b45      	ldr	r3, [pc, #276]	; (800c34c <CAN_2_ini+0x1f4>)
 800c238:	4a6e      	ldr	r2, [pc, #440]	; (800c3f4 <CAN_2_ini+0x29c>)
 800c23a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	canData.TR3_VSense_FAN2	= &VAR_TR3_VSense_FAN2;
 800c23e:	4b43      	ldr	r3, [pc, #268]	; (800c34c <CAN_2_ini+0x1f4>)
 800c240:	4a6d      	ldr	r2, [pc, #436]	; (800c3f8 <CAN_2_ini+0x2a0>)
 800c242:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	//Measurement 0x7E2 LM10
	//canData.x_RH_RL			= (uint8_t*)&VCU_DW.VAR_OUT_x_RH_RL;
	//canData.x_RH_RR			= (uint8_t*)&VCU_DW.VAR_OUT_x_RH_RR;
	canData.Brakelight		= &VCU_DW.VAR_OUT_Brakelight;
 800c246:	4b41      	ldr	r3, [pc, #260]	; (800c34c <CAN_2_ini+0x1f4>)
 800c248:	4a6c      	ldr	r2, [pc, #432]	; (800c3fc <CAN_2_ini+0x2a4>)
 800c24a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	canData.x_RH_F			= &VCU_DW.VAR_OUT_x_RH_F;
 800c24e:	4b3f      	ldr	r3, [pc, #252]	; (800c34c <CAN_2_ini+0x1f4>)
 800c250:	4a6b      	ldr	r2, [pc, #428]	; (800c400 <CAN_2_ini+0x2a8>)
 800c252:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	canData.x_clutch		= &VCU_DW.VAR_OUT_x_clutch;
 800c256:	4b3d      	ldr	r3, [pc, #244]	; (800c34c <CAN_2_ini+0x1f4>)
 800c258:	4a6a      	ldr	r2, [pc, #424]	; (800c404 <CAN_2_ini+0x2ac>)
 800c25a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	canData.x_clutch_STW	= &VCU_DW.VAR_OUT_x_clutch_STW;
 800c25e:	4b3b      	ldr	r3, [pc, #236]	; (800c34c <CAN_2_ini+0x1f4>)
 800c260:	4a69      	ldr	r2, [pc, #420]	; (800c408 <CAN_2_ini+0x2b0>)
 800c262:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	canData.p_pneu			= &VCU_DW.VAR_OUT_p_pneum;
 800c266:	4b39      	ldr	r3, [pc, #228]	; (800c34c <CAN_2_ini+0x1f4>)
 800c268:	4a68      	ldr	r2, [pc, #416]	; (800c40c <CAN_2_ini+0x2b4>)
 800c26a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	canData.U_bat			= &VCU_DW.VAR_OUT_U_Bat;
 800c26e:	4b37      	ldr	r3, [pc, #220]	; (800c34c <CAN_2_ini+0x1f4>)
 800c270:	4a67      	ldr	r2, [pc, #412]	; (800c410 <CAN_2_ini+0x2b8>)
 800c272:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	canData.t_board_VCU		= &VAR_boardTemp;
 800c276:	4b35      	ldr	r3, [pc, #212]	; (800c34c <CAN_2_ini+0x1f4>)
 800c278:	4a66      	ldr	r2, [pc, #408]	; (800c414 <CAN_2_ini+0x2bc>)
 800c27a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	canData.BSD				= &VCU_DW.VAR_OUT_BSD;
 800c27e:	4b33      	ldr	r3, [pc, #204]	; (800c34c <CAN_2_ini+0x1f4>)
 800c280:	4a65      	ldr	r2, [pc, #404]	; (800c418 <CAN_2_ini+0x2c0>)
 800c282:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

	//Error 0x7E3 LM11
	canData.plausi_error 	= 0;
 800c286:	4b31      	ldr	r3, [pc, #196]	; (800c34c <CAN_2_ini+0x1f4>)
 800c288:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 800c28c:	f04f 0200 	mov.w	r2, #0
 800c290:	f04f 0300 	mov.w	r3, #0
 800c294:	e9c1 2300 	strd	r2, r3, [r1]

	//Manual Control 0x7FF LM12
	canData.ManualControl_Active = 0;
 800c298:	4b2c      	ldr	r3, [pc, #176]	; (800c34c <CAN_2_ini+0x1f4>)
 800c29a:	2200      	movs	r2, #0
 800c29c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	canData.ManConOn_MHJ9_IN = 0;
 800c2a0:	4b2a      	ldr	r3, [pc, #168]	; (800c34c <CAN_2_ini+0x1f4>)
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	canData.ManConOn_MHJ9_OUT = 0;
 800c2a8:	4b28      	ldr	r3, [pc, #160]	; (800c34c <CAN_2_ini+0x1f4>)
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
	canData.ManConOn_Waterpump = 0;
 800c2b0:	4b26      	ldr	r3, [pc, #152]	; (800c34c <CAN_2_ini+0x1f4>)
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	canData.ManConOn_Fans1 = 0;
 800c2b8:	4b24      	ldr	r3, [pc, #144]	; (800c34c <CAN_2_ini+0x1f4>)
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	canData.ManConOn_Fans2 = 0;
 800c2c0:	4b22      	ldr	r3, [pc, #136]	; (800c34c <CAN_2_ini+0x1f4>)
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
	canData.ManConOn_VOVGShiftDown = 0;
 800c2c8:	4b20      	ldr	r3, [pc, #128]	; (800c34c <CAN_2_ini+0x1f4>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	canData.ManConOn_VOVGShiftUp = 0;
 800c2d0:	4b1e      	ldr	r3, [pc, #120]	; (800c34c <CAN_2_ini+0x1f4>)
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
	canData.ManConOn_IgnCut = 0;
 800c2d8:	4b1c      	ldr	r3, [pc, #112]	; (800c34c <CAN_2_ini+0x1f4>)
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	canData.ManConOn_VOVG_IN = 0;
 800c2e0:	4b1a      	ldr	r3, [pc, #104]	; (800c34c <CAN_2_ini+0x1f4>)
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
	canData.ManConOn_VOVG_OUT = 0;
 800c2e8:	4b18      	ldr	r3, [pc, #96]	; (800c34c <CAN_2_ini+0x1f4>)
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
	canData.ManConVar_MHJ9_IN = 0;
 800c2f0:	4b16      	ldr	r3, [pc, #88]	; (800c34c <CAN_2_ini+0x1f4>)
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	canData.ManConVar_MHJ9_OUT = 0;
 800c2f8:	4b14      	ldr	r3, [pc, #80]	; (800c34c <CAN_2_ini+0x1f4>)
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
	canData.ManConVar_Waterpump = 0;
 800c300:	4b12      	ldr	r3, [pc, #72]	; (800c34c <CAN_2_ini+0x1f4>)
 800c302:	2200      	movs	r2, #0
 800c304:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
	canData.ManConVar_Fans1 = 0;
 800c308:	4b10      	ldr	r3, [pc, #64]	; (800c34c <CAN_2_ini+0x1f4>)
 800c30a:	2200      	movs	r2, #0
 800c30c:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	canData.ManConVar_Fans2 = 0;
 800c310:	4b0e      	ldr	r3, [pc, #56]	; (800c34c <CAN_2_ini+0x1f4>)
 800c312:	2200      	movs	r2, #0
 800c314:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
	canData.ManConVar_VOVGShiftDown = 0;
 800c318:	4b0c      	ldr	r3, [pc, #48]	; (800c34c <CAN_2_ini+0x1f4>)
 800c31a:	2200      	movs	r2, #0
 800c31c:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
	canData.ManConVar_VOVGShiftUp = 0;
 800c320:	4b0a      	ldr	r3, [pc, #40]	; (800c34c <CAN_2_ini+0x1f4>)
 800c322:	2200      	movs	r2, #0
 800c324:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
	canData.ManConVar_IgnCut = 0;
 800c328:	4b08      	ldr	r3, [pc, #32]	; (800c34c <CAN_2_ini+0x1f4>)
 800c32a:	2200      	movs	r2, #0
 800c32c:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
	canData.ManConVar_VOVG_IN = 0;
 800c330:	4b06      	ldr	r3, [pc, #24]	; (800c34c <CAN_2_ini+0x1f4>)
 800c332:	2200      	movs	r2, #0
 800c334:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
	canData.ManConVar_VOVG_OUT = 0;
 800c338:	4b04      	ldr	r3, [pc, #16]	; (800c34c <CAN_2_ini+0x1f4>)
 800c33a:	2200      	movs	r2, #0
 800c33c:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
}
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	20000641 	.word	0x20000641
 800c348:	0800f5c4 	.word	0x0800f5c4
 800c34c:	20001338 	.word	0x20001338
 800c350:	20000880 	.word	0x20000880
 800c354:	200012b0 	.word	0x200012b0
 800c358:	20001186 	.word	0x20001186
 800c35c:	200012ac 	.word	0x200012ac
 800c360:	20001185 	.word	0x20001185
 800c364:	20000882 	.word	0x20000882
 800c368:	20001284 	.word	0x20001284
 800c36c:	20001187 	.word	0x20001187
 800c370:	20001298 	.word	0x20001298
 800c374:	2000116d 	.word	0x2000116d
 800c378:	20000884 	.word	0x20000884
 800c37c:	20001290 	.word	0x20001290
 800c380:	2000116b 	.word	0x2000116b
 800c384:	2000129c 	.word	0x2000129c
 800c388:	2000116e 	.word	0x2000116e
 800c38c:	2000116c 	.word	0x2000116c
 800c390:	20001170 	.word	0x20001170
 800c394:	2000116f 	.word	0x2000116f
 800c398:	20000886 	.word	0x20000886
 800c39c:	20001294 	.word	0x20001294
 800c3a0:	20001176 	.word	0x20001176
 800c3a4:	200012a0 	.word	0x200012a0
 800c3a8:	20001172 	.word	0x20001172
 800c3ac:	20000888 	.word	0x20000888
 800c3b0:	200012b4 	.word	0x200012b4
 800c3b4:	20001173 	.word	0x20001173
 800c3b8:	20001280 	.word	0x20001280
 800c3bc:	20001174 	.word	0x20001174
 800c3c0:	2000088a 	.word	0x2000088a
 800c3c4:	200012a8 	.word	0x200012a8
 800c3c8:	20001175 	.word	0x20001175
 800c3cc:	20001288 	.word	0x20001288
 800c3d0:	20001177 	.word	0x20001177
 800c3d4:	2000088c 	.word	0x2000088c
 800c3d8:	200012a4 	.word	0x200012a4
 800c3dc:	20001178 	.word	0x20001178
 800c3e0:	2000128c 	.word	0x2000128c
 800c3e4:	20001179 	.word	0x20001179
 800c3e8:	20001102 	.word	0x20001102
 800c3ec:	20001104 	.word	0x20001104
 800c3f0:	20001258 	.word	0x20001258
 800c3f4:	20001278 	.word	0x20001278
 800c3f8:	20001248 	.word	0x20001248
 800c3fc:	200011a4 	.word	0x200011a4
 800c400:	20001165 	.word	0x20001165
 800c404:	20001166 	.word	0x20001166
 800c408:	20001167 	.word	0x20001167
 800c40c:	20001168 	.word	0x20001168
 800c410:	20001169 	.word	0x20001169
 800c414:	20001268 	.word	0x20001268
 800c418:	200011a0 	.word	0x200011a0

0800c41c <CAN_2_Receive>:

void CAN_2_Receive()
{
 800c41c:	b598      	push	{r3, r4, r7, lr}
 800c41e:	af00      	add	r7, sp, #0
	//------ABS 0x80 LM01------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_01_Config);
 800c420:	48b5      	ldr	r0, [pc, #724]	; (800c6f8 <CAN_2_Receive+0x2dc>)
 800c422:	f7fe ff27 	bl	800b274 <CAN_NODE_MO_Receive>

	*canData.g_yaw_ABS 			= checkRangePlausi(CAN_2_LMO_01_Config.mo_ptr->can_data_word[0],ERR_G_YAW_ABS);
 800c426:	4bb5      	ldr	r3, [pc, #724]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c428:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 800c42c:	4bb2      	ldr	r3, [pc, #712]	; (800c6f8 <CAN_2_Receive+0x2dc>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	8a1b      	ldrh	r3, [r3, #16]
 800c432:	4618      	mov	r0, r3
 800c434:	2103      	movs	r1, #3
 800c436:	f000 fc13 	bl	800cc60 <checkRangePlausi>
 800c43a:	4603      	mov	r3, r0
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	8023      	strh	r3, [r4, #0]
	*g_yaw_ABS_LSB				= getbits(*canData.g_yaw_ABS, 7, 8);
 800c440:	4baf      	ldr	r3, [pc, #700]	; (800c700 <CAN_2_Receive+0x2e4>)
 800c442:	681c      	ldr	r4, [r3, #0]
 800c444:	4bad      	ldr	r3, [pc, #692]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c446:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c44a:	881b      	ldrh	r3, [r3, #0]
 800c44c:	4618      	mov	r0, r3
 800c44e:	2107      	movs	r1, #7
 800c450:	2208      	movs	r2, #8
 800c452:	f001 fe07 	bl	800e064 <getbits>
 800c456:	4603      	mov	r3, r0
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	7023      	strb	r3, [r4, #0]
	*g_yaw_ABS_MSB				= getbits(*canData.g_yaw_ABS, 15, 8);
 800c45c:	4ba9      	ldr	r3, [pc, #676]	; (800c704 <CAN_2_Receive+0x2e8>)
 800c45e:	681c      	ldr	r4, [r3, #0]
 800c460:	4ba6      	ldr	r3, [pc, #664]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c462:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c466:	881b      	ldrh	r3, [r3, #0]
 800c468:	4618      	mov	r0, r3
 800c46a:	210f      	movs	r1, #15
 800c46c:	2208      	movs	r2, #8
 800c46e:	f001 fdf9 	bl	800e064 <getbits>
 800c472:	4603      	mov	r3, r0
 800c474:	b2db      	uxtb	r3, r3
 800c476:	7023      	strb	r3, [r4, #0]
	*canData.g_long_ABS			= checkRangePlausi(CAN_2_LMO_01_Config.mo_ptr->can_data_word[1],ERR_G_LONG_ABS);
 800c478:	4ba0      	ldr	r3, [pc, #640]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c47a:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 800c47e:	4b9e      	ldr	r3, [pc, #632]	; (800c6f8 <CAN_2_Receive+0x2dc>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	8a5b      	ldrh	r3, [r3, #18]
 800c484:	4618      	mov	r0, r3
 800c486:	2102      	movs	r1, #2
 800c488:	f000 fbea 	bl	800cc60 <checkRangePlausi>
 800c48c:	4603      	mov	r3, r0
 800c48e:	b29b      	uxth	r3, r3
 800c490:	8023      	strh	r3, [r4, #0]
	*g_long_ABS_LSB				= getbits(*canData.g_long_ABS, 7, 8);
 800c492:	4b9d      	ldr	r3, [pc, #628]	; (800c708 <CAN_2_Receive+0x2ec>)
 800c494:	681c      	ldr	r4, [r3, #0]
 800c496:	4b99      	ldr	r3, [pc, #612]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c498:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c49c:	881b      	ldrh	r3, [r3, #0]
 800c49e:	4618      	mov	r0, r3
 800c4a0:	2107      	movs	r1, #7
 800c4a2:	2208      	movs	r2, #8
 800c4a4:	f001 fdde 	bl	800e064 <getbits>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	7023      	strb	r3, [r4, #0]
	*g_long_ABS_MSB				= getbits(*canData.g_long_ABS, 15, 8);
 800c4ae:	4b97      	ldr	r3, [pc, #604]	; (800c70c <CAN_2_Receive+0x2f0>)
 800c4b0:	681c      	ldr	r4, [r3, #0]
 800c4b2:	4b92      	ldr	r3, [pc, #584]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c4b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c4b8:	881b      	ldrh	r3, [r3, #0]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	210f      	movs	r1, #15
 800c4be:	2208      	movs	r2, #8
 800c4c0:	f001 fdd0 	bl	800e064 <getbits>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	7023      	strb	r3, [r4, #0]

	//------ABS 0x5C0 LM02------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_02_Config);
 800c4ca:	4891      	ldr	r0, [pc, #580]	; (800c710 <CAN_2_Receive+0x2f4>)
 800c4cc:	f7fe fed2 	bl	800b274 <CAN_NODE_MO_Receive>

	*canData.ABS_switchstate_CAN2	= CAN_2_LMO_02_Config.mo_ptr->can_data_byte[0];
 800c4d0:	4b8a      	ldr	r3, [pc, #552]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c4d2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c4d6:	4a8e      	ldr	r2, [pc, #568]	; (800c710 <CAN_2_Receive+0x2f4>)
 800c4d8:	6812      	ldr	r2, [r2, #0]
 800c4da:	7c12      	ldrb	r2, [r2, #16]
 800c4dc:	701a      	strb	r2, [r3, #0]
	*canData.p_brake_F_CAN2			= checkRangePlausi(getbits(CAN_2_LMO_02_Config.mo_ptr->can_data_long,23,16),ERR_P_BRAKE_F);
 800c4de:	4b87      	ldr	r3, [pc, #540]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c4e0:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
 800c4e4:	4b8a      	ldr	r3, [pc, #552]	; (800c710 <CAN_2_Receive+0x2f4>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	2117      	movs	r1, #23
 800c4f2:	2210      	movs	r2, #16
 800c4f4:	f001 fdb6 	bl	800e064 <getbits>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	210d      	movs	r1, #13
 800c4fe:	f000 fbaf 	bl	800cc60 <checkRangePlausi>
 800c502:	4603      	mov	r3, r0
 800c504:	b29b      	uxth	r3, r3
 800c506:	8023      	strh	r3, [r4, #0]
	*p_brake_F_LSB					= getbits(*canData.p_brake_F_CAN2, 7, 8);
 800c508:	4b82      	ldr	r3, [pc, #520]	; (800c714 <CAN_2_Receive+0x2f8>)
 800c50a:	681c      	ldr	r4, [r3, #0]
 800c50c:	4b7b      	ldr	r3, [pc, #492]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c50e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c512:	881b      	ldrh	r3, [r3, #0]
 800c514:	4618      	mov	r0, r3
 800c516:	2107      	movs	r1, #7
 800c518:	2208      	movs	r2, #8
 800c51a:	f001 fda3 	bl	800e064 <getbits>
 800c51e:	4603      	mov	r3, r0
 800c520:	b2db      	uxtb	r3, r3
 800c522:	7023      	strb	r3, [r4, #0]
	*p_brake_F_MSB					= getbits(*canData.p_brake_F_CAN2, 15, 8);
 800c524:	4b7c      	ldr	r3, [pc, #496]	; (800c718 <CAN_2_Receive+0x2fc>)
 800c526:	681c      	ldr	r4, [r3, #0]
 800c528:	4b74      	ldr	r3, [pc, #464]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c52a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c52e:	881b      	ldrh	r3, [r3, #0]
 800c530:	4618      	mov	r0, r3
 800c532:	210f      	movs	r1, #15
 800c534:	2208      	movs	r2, #8
 800c536:	f001 fd95 	bl	800e064 <getbits>
 800c53a:	4603      	mov	r3, r0
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	7023      	strb	r3, [r4, #0]
	*canData.ABS_BL_swtich_CAN2		= CAN_2_LMO_02_Config.mo_ptr->can_data_byte[3];
 800c540:	4b6e      	ldr	r3, [pc, #440]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c542:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c546:	4a72      	ldr	r2, [pc, #456]	; (800c710 <CAN_2_Receive+0x2f4>)
 800c548:	6812      	ldr	r2, [r2, #0]
 800c54a:	7cd2      	ldrb	r2, [r2, #19]
 800c54c:	701a      	strb	r2, [r3, #0]
	*canData.ABS_active_CAN2		= CAN_2_LMO_02_Config.mo_ptr->can_data_byte[4];
 800c54e:	4b6b      	ldr	r3, [pc, #428]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c554:	4a6e      	ldr	r2, [pc, #440]	; (800c710 <CAN_2_Receive+0x2f4>)
 800c556:	6812      	ldr	r2, [r2, #0]
 800c558:	7d12      	ldrb	r2, [r2, #20]
 800c55a:	701a      	strb	r2, [r3, #0]
	*canData.ABS_EBD_lamp_CAN2		= CAN_2_LMO_02_Config.mo_ptr->can_data_byte[5];
 800c55c:	4b67      	ldr	r3, [pc, #412]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c55e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800c562:	4a6b      	ldr	r2, [pc, #428]	; (800c710 <CAN_2_Receive+0x2f4>)
 800c564:	6812      	ldr	r2, [r2, #0]
 800c566:	7d52      	ldrb	r2, [r2, #21]
 800c568:	701a      	strb	r2, [r3, #0]
	//*canData.n_wheel_RR_mpros	= checkRangePlausi(CAN_2_LMO_06_Config.mo_ptr->can_data_word[0],ERR_N_WHEEL_RR);
	//*n_wheel_RR_mpros_LSB		= getbits(*canData.n_wheel_RR_mpros, 7, 8);
	//*n_wheel_RR_mpros_MSB		= getbits(*canData.n_wheel_RR_mpros, 15, 8);

	//------Manual Control 0x7FF LM12------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_12_Config);
 800c56a:	486c      	ldr	r0, [pc, #432]	; (800c71c <CAN_2_Receive+0x300>)
 800c56c:	f7fe fe82 	bl	800b274 <CAN_NODE_MO_Receive>
	canData.ManualControl_Active = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[7],7,1);
 800c570:	4b6a      	ldr	r3, [pc, #424]	; (800c71c <CAN_2_Receive+0x300>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	7ddb      	ldrb	r3, [r3, #23]
 800c576:	4618      	mov	r0, r3
 800c578:	2107      	movs	r1, #7
 800c57a:	2201      	movs	r2, #1
 800c57c:	f001 fd72 	bl	800e064 <getbits>
 800c580:	4603      	mov	r3, r0
 800c582:	b2da      	uxtb	r2, r3
 800c584:	4b5d      	ldr	r3, [pc, #372]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c586:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	canData.ManConOn_MHJ9_IN = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[0],0,1);
 800c58a:	4b64      	ldr	r3, [pc, #400]	; (800c71c <CAN_2_Receive+0x300>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	7c1b      	ldrb	r3, [r3, #16]
 800c590:	4618      	mov	r0, r3
 800c592:	2100      	movs	r1, #0
 800c594:	2201      	movs	r2, #1
 800c596:	f001 fd65 	bl	800e064 <getbits>
 800c59a:	4603      	mov	r3, r0
 800c59c:	b2da      	uxtb	r2, r3
 800c59e:	4b57      	ldr	r3, [pc, #348]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c5a0:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	canData.ManConOn_MHJ9_OUT = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[1],0,1);
 800c5a4:	4b5d      	ldr	r3, [pc, #372]	; (800c71c <CAN_2_Receive+0x300>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	7c5b      	ldrb	r3, [r3, #17]
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f001 fd58 	bl	800e064 <getbits>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	4b50      	ldr	r3, [pc, #320]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c5ba:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
	canData.ManConOn_Waterpump = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[2],0,1);
 800c5be:	4b57      	ldr	r3, [pc, #348]	; (800c71c <CAN_2_Receive+0x300>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	7c9b      	ldrb	r3, [r3, #18]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	f001 fd4b 	bl	800e064 <getbits>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	b2da      	uxtb	r2, r3
 800c5d2:	4b4a      	ldr	r3, [pc, #296]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c5d4:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	canData.ManConOn_Fans1 = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[3],0,1);
 800c5d8:	4b50      	ldr	r3, [pc, #320]	; (800c71c <CAN_2_Receive+0x300>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	7cdb      	ldrb	r3, [r3, #19]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	f001 fd3e 	bl	800e064 <getbits>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	b2da      	uxtb	r2, r3
 800c5ec:	4b43      	ldr	r3, [pc, #268]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c5ee:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	canData.ManConOn_Fans2 = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[4],0,1);
 800c5f2:	4b4a      	ldr	r3, [pc, #296]	; (800c71c <CAN_2_Receive+0x300>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	7d1b      	ldrb	r3, [r3, #20]
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	f001 fd31 	bl	800e064 <getbits>
 800c602:	4603      	mov	r3, r0
 800c604:	b2da      	uxtb	r2, r3
 800c606:	4b3d      	ldr	r3, [pc, #244]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c608:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
	canData.ManConOn_VOVGShiftUp = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],0,1);
 800c60c:	4b43      	ldr	r3, [pc, #268]	; (800c71c <CAN_2_Receive+0x300>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	7d5b      	ldrb	r3, [r3, #21]
 800c612:	4618      	mov	r0, r3
 800c614:	2100      	movs	r1, #0
 800c616:	2201      	movs	r2, #1
 800c618:	f001 fd24 	bl	800e064 <getbits>
 800c61c:	4603      	mov	r3, r0
 800c61e:	b2da      	uxtb	r2, r3
 800c620:	4b36      	ldr	r3, [pc, #216]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c622:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
	canData.ManConOn_VOVGShiftDown = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],2,1);
 800c626:	4b3d      	ldr	r3, [pc, #244]	; (800c71c <CAN_2_Receive+0x300>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	7d5b      	ldrb	r3, [r3, #21]
 800c62c:	4618      	mov	r0, r3
 800c62e:	2102      	movs	r1, #2
 800c630:	2201      	movs	r2, #1
 800c632:	f001 fd17 	bl	800e064 <getbits>
 800c636:	4603      	mov	r3, r0
 800c638:	b2da      	uxtb	r2, r3
 800c63a:	4b30      	ldr	r3, [pc, #192]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c63c:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	canData.ManConOn_IgnCut = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],4,1);
 800c640:	4b36      	ldr	r3, [pc, #216]	; (800c71c <CAN_2_Receive+0x300>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	7d5b      	ldrb	r3, [r3, #21]
 800c646:	4618      	mov	r0, r3
 800c648:	2104      	movs	r1, #4
 800c64a:	2201      	movs	r2, #1
 800c64c:	f001 fd0a 	bl	800e064 <getbits>
 800c650:	4603      	mov	r3, r0
 800c652:	b2da      	uxtb	r2, r3
 800c654:	4b29      	ldr	r3, [pc, #164]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c656:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	canData.ManConOn_VOVG_IN = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],6,1);
 800c65a:	4b30      	ldr	r3, [pc, #192]	; (800c71c <CAN_2_Receive+0x300>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	7d5b      	ldrb	r3, [r3, #21]
 800c660:	4618      	mov	r0, r3
 800c662:	2106      	movs	r1, #6
 800c664:	2201      	movs	r2, #1
 800c666:	f001 fcfd 	bl	800e064 <getbits>
 800c66a:	4603      	mov	r3, r0
 800c66c:	b2da      	uxtb	r2, r3
 800c66e:	4b23      	ldr	r3, [pc, #140]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c670:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
	canData.ManConOn_VOVG_OUT = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[6],0,1);
 800c674:	4b29      	ldr	r3, [pc, #164]	; (800c71c <CAN_2_Receive+0x300>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	7d9b      	ldrb	r3, [r3, #22]
 800c67a:	4618      	mov	r0, r3
 800c67c:	2100      	movs	r1, #0
 800c67e:	2201      	movs	r2, #1
 800c680:	f001 fcf0 	bl	800e064 <getbits>
 800c684:	4603      	mov	r3, r0
 800c686:	b2da      	uxtb	r2, r3
 800c688:	4b1c      	ldr	r3, [pc, #112]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c68a:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
	canData.ManConVar_MHJ9_IN = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[0],7,7);
 800c68e:	4b23      	ldr	r3, [pc, #140]	; (800c71c <CAN_2_Receive+0x300>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	7c1b      	ldrb	r3, [r3, #16]
 800c694:	4618      	mov	r0, r3
 800c696:	2107      	movs	r1, #7
 800c698:	2207      	movs	r2, #7
 800c69a:	f001 fce3 	bl	800e064 <getbits>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	b2da      	uxtb	r2, r3
 800c6a2:	4b16      	ldr	r3, [pc, #88]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c6a4:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	canData.ManConVar_MHJ9_OUT = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[1],7,7);
 800c6a8:	4b1c      	ldr	r3, [pc, #112]	; (800c71c <CAN_2_Receive+0x300>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	7c5b      	ldrb	r3, [r3, #17]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	2107      	movs	r1, #7
 800c6b2:	2207      	movs	r2, #7
 800c6b4:	f001 fcd6 	bl	800e064 <getbits>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	b2da      	uxtb	r2, r3
 800c6bc:	4b0f      	ldr	r3, [pc, #60]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c6be:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
	canData.ManConVar_Waterpump = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[2],7,7);
 800c6c2:	4b16      	ldr	r3, [pc, #88]	; (800c71c <CAN_2_Receive+0x300>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	7c9b      	ldrb	r3, [r3, #18]
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	2107      	movs	r1, #7
 800c6cc:	2207      	movs	r2, #7
 800c6ce:	f001 fcc9 	bl	800e064 <getbits>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	4b09      	ldr	r3, [pc, #36]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c6d8:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
	canData.ManConVar_Fans1 = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[3],7,7);
 800c6dc:	4b0f      	ldr	r3, [pc, #60]	; (800c71c <CAN_2_Receive+0x300>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	7cdb      	ldrb	r3, [r3, #19]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	2107      	movs	r1, #7
 800c6e6:	2207      	movs	r2, #7
 800c6e8:	f001 fcbc 	bl	800e064 <getbits>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	b2da      	uxtb	r2, r3
 800c6f0:	4b02      	ldr	r3, [pc, #8]	; (800c6fc <CAN_2_Receive+0x2e0>)
 800c6f2:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
 800c6f6:	e013      	b.n	800c720 <CAN_2_Receive+0x304>
 800c6f8:	0800f774 	.word	0x0800f774
 800c6fc:	20001338 	.word	0x20001338
 800c700:	200012b0 	.word	0x200012b0
 800c704:	200012ac 	.word	0x200012ac
 800c708:	20001284 	.word	0x20001284
 800c70c:	20001298 	.word	0x20001298
 800c710:	0800f780 	.word	0x0800f780
 800c714:	20001290 	.word	0x20001290
 800c718:	2000129c 	.word	0x2000129c
 800c71c:	0800f7f8 	.word	0x0800f7f8
	canData.ManConVar_Fans2 = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[4],7,7);
 800c720:	4b7a      	ldr	r3, [pc, #488]	; (800c90c <CAN_2_Receive+0x4f0>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	7d1b      	ldrb	r3, [r3, #20]
 800c726:	4618      	mov	r0, r3
 800c728:	2107      	movs	r1, #7
 800c72a:	2207      	movs	r2, #7
 800c72c:	f001 fc9a 	bl	800e064 <getbits>
 800c730:	4603      	mov	r3, r0
 800c732:	b2da      	uxtb	r2, r3
 800c734:	4b76      	ldr	r3, [pc, #472]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c736:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
	canData.ManConVar_VOVGShiftUp = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],1,1);
 800c73a:	4b74      	ldr	r3, [pc, #464]	; (800c90c <CAN_2_Receive+0x4f0>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	7d5b      	ldrb	r3, [r3, #21]
 800c740:	4618      	mov	r0, r3
 800c742:	2101      	movs	r1, #1
 800c744:	2201      	movs	r2, #1
 800c746:	f001 fc8d 	bl	800e064 <getbits>
 800c74a:	4603      	mov	r3, r0
 800c74c:	b2da      	uxtb	r2, r3
 800c74e:	4b70      	ldr	r3, [pc, #448]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c750:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
	canData.ManConVar_VOVGShiftDown = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],3,1);
 800c754:	4b6d      	ldr	r3, [pc, #436]	; (800c90c <CAN_2_Receive+0x4f0>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	7d5b      	ldrb	r3, [r3, #21]
 800c75a:	4618      	mov	r0, r3
 800c75c:	2103      	movs	r1, #3
 800c75e:	2201      	movs	r2, #1
 800c760:	f001 fc80 	bl	800e064 <getbits>
 800c764:	4603      	mov	r3, r0
 800c766:	b2da      	uxtb	r2, r3
 800c768:	4b69      	ldr	r3, [pc, #420]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c76a:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
	canData.ManConVar_IgnCut = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],5,1);
 800c76e:	4b67      	ldr	r3, [pc, #412]	; (800c90c <CAN_2_Receive+0x4f0>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	7d5b      	ldrb	r3, [r3, #21]
 800c774:	4618      	mov	r0, r3
 800c776:	2105      	movs	r1, #5
 800c778:	2201      	movs	r2, #1
 800c77a:	f001 fc73 	bl	800e064 <getbits>
 800c77e:	4603      	mov	r3, r0
 800c780:	b2da      	uxtb	r2, r3
 800c782:	4b63      	ldr	r3, [pc, #396]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c784:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
	canData.ManConVar_VOVG_IN = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],7,1);
 800c788:	4b60      	ldr	r3, [pc, #384]	; (800c90c <CAN_2_Receive+0x4f0>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	7d5b      	ldrb	r3, [r3, #21]
 800c78e:	4618      	mov	r0, r3
 800c790:	2107      	movs	r1, #7
 800c792:	2201      	movs	r2, #1
 800c794:	f001 fc66 	bl	800e064 <getbits>
 800c798:	4603      	mov	r3, r0
 800c79a:	b2da      	uxtb	r2, r3
 800c79c:	4b5c      	ldr	r3, [pc, #368]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c79e:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
	canData.ManConVar_VOVG_OUT = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],9,1);
 800c7a2:	4b5a      	ldr	r3, [pc, #360]	; (800c90c <CAN_2_Receive+0x4f0>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	7d5b      	ldrb	r3, [r3, #21]
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	2109      	movs	r1, #9
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	f001 fc59 	bl	800e064 <getbits>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	b2da      	uxtb	r2, r3
 800c7b6:	4b56      	ldr	r3, [pc, #344]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c7b8:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c

	//------Bremse_2 0x24A LM13------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_13_Config);
 800c7bc:	4855      	ldr	r0, [pc, #340]	; (800c914 <CAN_2_Receive+0x4f8>)
 800c7be:	f7fe fd59 	bl	800b274 <CAN_NODE_MO_Receive>

	*canData.n_wheel_FL_mpros	= checkRangePlausi(CAN_2_LMO_13_Config.mo_ptr->can_data_word[0],ERR_N_WHEEL_FL);
 800c7c2:	4b53      	ldr	r3, [pc, #332]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c7c4:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
 800c7c8:	4b52      	ldr	r3, [pc, #328]	; (800c914 <CAN_2_Receive+0x4f8>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	8a1b      	ldrh	r3, [r3, #16]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	2107      	movs	r1, #7
 800c7d2:	f000 fa45 	bl	800cc60 <checkRangePlausi>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	8023      	strh	r3, [r4, #0]
	*n_wheel_FL_mpros_LSB		= getbits(*canData.n_wheel_FL_mpros, 7, 8);
 800c7dc:	4b4e      	ldr	r3, [pc, #312]	; (800c918 <CAN_2_Receive+0x4fc>)
 800c7de:	681c      	ldr	r4, [r3, #0]
 800c7e0:	4b4b      	ldr	r3, [pc, #300]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c7e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	2107      	movs	r1, #7
 800c7ec:	2208      	movs	r2, #8
 800c7ee:	f001 fc39 	bl	800e064 <getbits>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	b2db      	uxtb	r3, r3
 800c7f6:	7023      	strb	r3, [r4, #0]
	*n_wheel_FL_mpros_MSB		= getbits(*canData.n_wheel_FL_mpros, 15, 8);
 800c7f8:	4b48      	ldr	r3, [pc, #288]	; (800c91c <CAN_2_Receive+0x500>)
 800c7fa:	681c      	ldr	r4, [r3, #0]
 800c7fc:	4b44      	ldr	r3, [pc, #272]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c7fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c802:	881b      	ldrh	r3, [r3, #0]
 800c804:	4618      	mov	r0, r3
 800c806:	210f      	movs	r1, #15
 800c808:	2208      	movs	r2, #8
 800c80a:	f001 fc2b 	bl	800e064 <getbits>
 800c80e:	4603      	mov	r3, r0
 800c810:	b2db      	uxtb	r3, r3
 800c812:	7023      	strb	r3, [r4, #0]

	*canData.n_wheel_FR_mpros	= checkRangePlausi(CAN_2_LMO_13_Config.mo_ptr->can_data_word[1],ERR_N_WHEEL_FR);
 800c814:	4b3e      	ldr	r3, [pc, #248]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c816:	f8d3 40f8 	ldr.w	r4, [r3, #248]	; 0xf8
 800c81a:	4b3e      	ldr	r3, [pc, #248]	; (800c914 <CAN_2_Receive+0x4f8>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	8a5b      	ldrh	r3, [r3, #18]
 800c820:	4618      	mov	r0, r3
 800c822:	2108      	movs	r1, #8
 800c824:	f000 fa1c 	bl	800cc60 <checkRangePlausi>
 800c828:	4603      	mov	r3, r0
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	8023      	strh	r3, [r4, #0]
	*n_wheel_FR_mpros_LSB		= getbits(*canData.n_wheel_FR_mpros, 7, 8);
 800c82e:	4b3c      	ldr	r3, [pc, #240]	; (800c920 <CAN_2_Receive+0x504>)
 800c830:	681c      	ldr	r4, [r3, #0]
 800c832:	4b37      	ldr	r3, [pc, #220]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c834:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c838:	881b      	ldrh	r3, [r3, #0]
 800c83a:	4618      	mov	r0, r3
 800c83c:	2107      	movs	r1, #7
 800c83e:	2208      	movs	r2, #8
 800c840:	f001 fc10 	bl	800e064 <getbits>
 800c844:	4603      	mov	r3, r0
 800c846:	b2db      	uxtb	r3, r3
 800c848:	7023      	strb	r3, [r4, #0]
	*n_wheel_FR_mpros_MSB		= getbits(*canData.n_wheel_FR_mpros, 15, 8);
 800c84a:	4b36      	ldr	r3, [pc, #216]	; (800c924 <CAN_2_Receive+0x508>)
 800c84c:	681c      	ldr	r4, [r3, #0]
 800c84e:	4b30      	ldr	r3, [pc, #192]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c850:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c854:	881b      	ldrh	r3, [r3, #0]
 800c856:	4618      	mov	r0, r3
 800c858:	210f      	movs	r1, #15
 800c85a:	2208      	movs	r2, #8
 800c85c:	f001 fc02 	bl	800e064 <getbits>
 800c860:	4603      	mov	r3, r0
 800c862:	b2db      	uxtb	r3, r3
 800c864:	7023      	strb	r3, [r4, #0]

	*canData.n_wheel_RL_mpros	= checkRangePlausi(CAN_2_LMO_13_Config.mo_ptr->can_data_word[2],ERR_N_WHEEL_RL);
 800c866:	4b2a      	ldr	r3, [pc, #168]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c868:	f8d3 40fc 	ldr.w	r4, [r3, #252]	; 0xfc
 800c86c:	4b29      	ldr	r3, [pc, #164]	; (800c914 <CAN_2_Receive+0x4f8>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	8a9b      	ldrh	r3, [r3, #20]
 800c872:	4618      	mov	r0, r3
 800c874:	2109      	movs	r1, #9
 800c876:	f000 f9f3 	bl	800cc60 <checkRangePlausi>
 800c87a:	4603      	mov	r3, r0
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	8023      	strh	r3, [r4, #0]
	*n_wheel_RL_mpros_LSB		= getbits(*canData.n_wheel_RL_mpros, 7, 8);
 800c880:	4b29      	ldr	r3, [pc, #164]	; (800c928 <CAN_2_Receive+0x50c>)
 800c882:	681c      	ldr	r4, [r3, #0]
 800c884:	4b22      	ldr	r3, [pc, #136]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c886:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c88a:	881b      	ldrh	r3, [r3, #0]
 800c88c:	4618      	mov	r0, r3
 800c88e:	2107      	movs	r1, #7
 800c890:	2208      	movs	r2, #8
 800c892:	f001 fbe7 	bl	800e064 <getbits>
 800c896:	4603      	mov	r3, r0
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	7023      	strb	r3, [r4, #0]
	*n_wheel_RL_mpros_MSB		= getbits(*canData.n_wheel_RL_mpros, 15, 8);
 800c89c:	4b23      	ldr	r3, [pc, #140]	; (800c92c <CAN_2_Receive+0x510>)
 800c89e:	681c      	ldr	r4, [r3, #0]
 800c8a0:	4b1b      	ldr	r3, [pc, #108]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c8a2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c8a6:	881b      	ldrh	r3, [r3, #0]
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	210f      	movs	r1, #15
 800c8ac:	2208      	movs	r2, #8
 800c8ae:	f001 fbd9 	bl	800e064 <getbits>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	7023      	strb	r3, [r4, #0]

	*canData.n_wheel_RR_mpros	= checkRangePlausi(CAN_2_LMO_13_Config.mo_ptr->can_data_word[3],ERR_N_WHEEL_RR);
 800c8b8:	4b15      	ldr	r3, [pc, #84]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c8ba:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 800c8be:	4b15      	ldr	r3, [pc, #84]	; (800c914 <CAN_2_Receive+0x4f8>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	8adb      	ldrh	r3, [r3, #22]
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	210a      	movs	r1, #10
 800c8c8:	f000 f9ca 	bl	800cc60 <checkRangePlausi>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	8023      	strh	r3, [r4, #0]
	*n_wheel_RR_mpros_LSB		= getbits(*canData.n_wheel_RR_mpros, 7, 8);
 800c8d2:	4b17      	ldr	r3, [pc, #92]	; (800c930 <CAN_2_Receive+0x514>)
 800c8d4:	681c      	ldr	r4, [r3, #0]
 800c8d6:	4b0e      	ldr	r3, [pc, #56]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c8d8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c8dc:	881b      	ldrh	r3, [r3, #0]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	2107      	movs	r1, #7
 800c8e2:	2208      	movs	r2, #8
 800c8e4:	f001 fbbe 	bl	800e064 <getbits>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	7023      	strb	r3, [r4, #0]
	*n_wheel_RR_mpros_MSB		= getbits(*canData.n_wheel_RR_mpros, 15, 8);
 800c8ee:	4b11      	ldr	r3, [pc, #68]	; (800c934 <CAN_2_Receive+0x518>)
 800c8f0:	681c      	ldr	r4, [r3, #0]
 800c8f2:	4b07      	ldr	r3, [pc, #28]	; (800c910 <CAN_2_Receive+0x4f4>)
 800c8f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c8f8:	881b      	ldrh	r3, [r3, #0]
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	210f      	movs	r1, #15
 800c8fe:	2208      	movs	r2, #8
 800c900:	f001 fbb0 	bl	800e064 <getbits>
 800c904:	4603      	mov	r3, r0
 800c906:	b2db      	uxtb	r3, r3
 800c908:	7023      	strb	r3, [r4, #0]

}
 800c90a:	bd98      	pop	{r3, r4, r7, pc}
 800c90c:	0800f7f8 	.word	0x0800f7f8
 800c910:	20001338 	.word	0x20001338
 800c914:	0800f804 	.word	0x0800f804
 800c918:	20001294 	.word	0x20001294
 800c91c:	200012a0 	.word	0x200012a0
 800c920:	200012b4 	.word	0x200012b4
 800c924:	20001280 	.word	0x20001280
 800c928:	200012a8 	.word	0x200012a8
 800c92c:	20001288 	.word	0x20001288
 800c930:	200012a4 	.word	0x200012a4
 800c934:	2000128c 	.word	0x2000128c

0800c938 <CAN_2_Transmit>:

void CAN_2_Transmit()
{
 800c938:	b590      	push	{r4, r7, lr}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
	//Wheelforce 0x7E0 LM09
	CAN2_data_Tx_LM09[0] = getbits(*canData.f_FL,7,8);
 800c93e:	4b6c      	ldr	r3, [pc, #432]	; (800caf0 <CAN_2_Transmit+0x1b8>)
 800c940:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c944:	881b      	ldrh	r3, [r3, #0]
 800c946:	4618      	mov	r0, r3
 800c948:	2107      	movs	r1, #7
 800c94a:	2208      	movs	r2, #8
 800c94c:	f001 fb8a 	bl	800e064 <getbits>
 800c950:	4603      	mov	r3, r0
 800c952:	b2da      	uxtb	r2, r3
 800c954:	4b67      	ldr	r3, [pc, #412]	; (800caf4 <CAN_2_Transmit+0x1bc>)
 800c956:	701a      	strb	r2, [r3, #0]
	CAN2_data_Tx_LM09[1] = getbits(*canData.f_FL,15,8);
 800c958:	4b65      	ldr	r3, [pc, #404]	; (800caf0 <CAN_2_Transmit+0x1b8>)
 800c95a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c95e:	881b      	ldrh	r3, [r3, #0]
 800c960:	4618      	mov	r0, r3
 800c962:	210f      	movs	r1, #15
 800c964:	2208      	movs	r2, #8
 800c966:	f001 fb7d 	bl	800e064 <getbits>
 800c96a:	4603      	mov	r3, r0
 800c96c:	b2da      	uxtb	r2, r3
 800c96e:	4b61      	ldr	r3, [pc, #388]	; (800caf4 <CAN_2_Transmit+0x1bc>)
 800c970:	705a      	strb	r2, [r3, #1]
	CAN2_data_Tx_LM09[2] = getbits(*canData.f_FR,7,8);
 800c972:	4b5f      	ldr	r3, [pc, #380]	; (800caf0 <CAN_2_Transmit+0x1b8>)
 800c974:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c978:	881b      	ldrh	r3, [r3, #0]
 800c97a:	4618      	mov	r0, r3
 800c97c:	2107      	movs	r1, #7
 800c97e:	2208      	movs	r2, #8
 800c980:	f001 fb70 	bl	800e064 <getbits>
 800c984:	4603      	mov	r3, r0
 800c986:	b2da      	uxtb	r2, r3
 800c988:	4b5a      	ldr	r3, [pc, #360]	; (800caf4 <CAN_2_Transmit+0x1bc>)
 800c98a:	709a      	strb	r2, [r3, #2]
	CAN2_data_Tx_LM09[3] = getbits(*canData.f_FR,15,8);
 800c98c:	4b58      	ldr	r3, [pc, #352]	; (800caf0 <CAN_2_Transmit+0x1b8>)
 800c98e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c992:	881b      	ldrh	r3, [r3, #0]
 800c994:	4618      	mov	r0, r3
 800c996:	210f      	movs	r1, #15
 800c998:	2208      	movs	r2, #8
 800c99a:	f001 fb63 	bl	800e064 <getbits>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	b2da      	uxtb	r2, r3
 800c9a2:	4b54      	ldr	r3, [pc, #336]	; (800caf4 <CAN_2_Transmit+0x1bc>)
 800c9a4:	70da      	strb	r2, [r3, #3]
	CAN2_data_Tx_LM09[4] = (uint8_t)(*canData.TR1_VSense_WP);
 800c9a6:	4b52      	ldr	r3, [pc, #328]	; (800caf0 <CAN_2_Transmit+0x1b8>)
 800c9a8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b0:	4610      	mov	r0, r2
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	f002 faa2 	bl	800eefc <__aeabi_d2uiz>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	b2da      	uxtb	r2, r3
 800c9bc:	4b4d      	ldr	r3, [pc, #308]	; (800caf4 <CAN_2_Transmit+0x1bc>)
 800c9be:	711a      	strb	r2, [r3, #4]
	CAN2_data_Tx_LM09[5] = (uint8_t)(*canData.TR2_VSense_FAN1);
 800c9c0:	4b4b      	ldr	r3, [pc, #300]	; (800caf0 <CAN_2_Transmit+0x1b8>)
 800c9c2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ca:	4610      	mov	r0, r2
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	f002 fa95 	bl	800eefc <__aeabi_d2uiz>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	4b47      	ldr	r3, [pc, #284]	; (800caf4 <CAN_2_Transmit+0x1bc>)
 800c9d8:	715a      	strb	r2, [r3, #5]
	CAN2_data_Tx_LM09[6] = (uint8_t)(*canData.TR3_VSense_FAN2);
 800c9da:	4b45      	ldr	r3, [pc, #276]	; (800caf0 <CAN_2_Transmit+0x1b8>)
 800c9dc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e4:	4610      	mov	r0, r2
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	f002 fa88 	bl	800eefc <__aeabi_d2uiz>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	b2da      	uxtb	r2, r3
 800c9f0:	4b40      	ldr	r3, [pc, #256]	; (800caf4 <CAN_2_Transmit+0x1bc>)
 800c9f2:	719a      	strb	r2, [r3, #6]
	//CAN2_data_Tx_LM09[4] = getbits(*canData.f_RL,7,8);
	//CAN2_data_Tx_LM09[5] = getbits(*canData.f_RL,15,8);
	//CAN2_data_Tx_LM09[6] = getbits(*canData.f_RR,7,8);
	//CAN2_data_Tx_LM09[7] = getbits(*canData.f_RR,15,8);

	CAN_NODE_MO_UpdateData(&CAN_2_LMO_09_Config, CAN2_data_Tx_LM09);
 800c9f4:	4840      	ldr	r0, [pc, #256]	; (800caf8 <CAN_2_Transmit+0x1c0>)
 800c9f6:	493f      	ldr	r1, [pc, #252]	; (800caf4 <CAN_2_Transmit+0x1bc>)
 800c9f8:	f7fe fc4e 	bl	800b298 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_2_LMO_09_Config);
 800c9fc:	483e      	ldr	r0, [pc, #248]	; (800caf8 <CAN_2_Transmit+0x1c0>)
 800c9fe:	f7fe fc27 	bl	800b250 <CAN_NODE_MO_Transmit>

	//Measurement 0x7E2 LM10
	//CAN2_data_Tx_LM10[0] = *canData.x_RH_RL;
	//CAN2_data_Tx_LM10[1] = *canData.x_RH_RR;
	CAN2_data_Tx_LM10[0] = *canData.Brakelight << 7;
 800ca02:	4b3b      	ldr	r3, [pc, #236]	; (800caf0 <CAN_2_Transmit+0x1b8>)
 800ca04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	01db      	lsls	r3, r3, #7
 800ca0c:	b2da      	uxtb	r2, r3
 800ca0e:	4b3b      	ldr	r3, [pc, #236]	; (800cafc <CAN_2_Transmit+0x1c4>)
 800ca10:	701a      	strb	r2, [r3, #0]
	CAN2_data_Tx_LM10[1] = (uint8_t)(*canData.t_board_VCU / 0.6);
 800ca12:	4b37      	ldr	r3, [pc, #220]	; (800caf0 <CAN_2_Transmit+0x1b8>)
 800ca14:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800ca18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1c:	4610      	mov	r0, r2
 800ca1e:	4619      	mov	r1, r3
 800ca20:	a331      	add	r3, pc, #196	; (adr r3, 800cae8 <CAN_2_Transmit+0x1b0>)
 800ca22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca26:	f002 f8f9 	bl	800ec1c <__aeabi_ddiv>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	4610      	mov	r0, r2
 800ca30:	4619      	mov	r1, r3
 800ca32:	f002 fa63 	bl	800eefc <__aeabi_d2uiz>
 800ca36:	4603      	mov	r3, r0
 800ca38:	b2da      	uxtb	r2, r3
 800ca3a:	4b30      	ldr	r3, [pc, #192]	; (800cafc <CAN_2_Transmit+0x1c4>)
 800ca3c:	705a      	strb	r2, [r3, #1]
	CAN2_data_Tx_LM10[2] = *canData.x_RH_F;
 800ca3e:	4b2c      	ldr	r3, [pc, #176]	; (800caf0 <CAN_2_Transmit+0x1b8>)
 800ca40:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800ca44:	781a      	ldrb	r2, [r3, #0]
 800ca46:	4b2d      	ldr	r3, [pc, #180]	; (800cafc <CAN_2_Transmit+0x1c4>)
 800ca48:	709a      	strb	r2, [r3, #2]
	CAN2_data_Tx_LM10[3] = *canData.x_clutch;
 800ca4a:	4b29      	ldr	r3, [pc, #164]	; (800caf0 <CAN_2_Transmit+0x1b8>)
 800ca4c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800ca50:	781a      	ldrb	r2, [r3, #0]
 800ca52:	4b2a      	ldr	r3, [pc, #168]	; (800cafc <CAN_2_Transmit+0x1c4>)
 800ca54:	70da      	strb	r2, [r3, #3]
	CAN2_data_Tx_LM10[4] = *canData.x_clutch_STW;
 800ca56:	4b26      	ldr	r3, [pc, #152]	; (800caf0 <CAN_2_Transmit+0x1b8>)
 800ca58:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800ca5c:	781a      	ldrb	r2, [r3, #0]
 800ca5e:	4b27      	ldr	r3, [pc, #156]	; (800cafc <CAN_2_Transmit+0x1c4>)
 800ca60:	711a      	strb	r2, [r3, #4]
	CAN2_data_Tx_LM10[5] = *canData.p_pneu;
 800ca62:	4b23      	ldr	r3, [pc, #140]	; (800caf0 <CAN_2_Transmit+0x1b8>)
 800ca64:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800ca68:	781a      	ldrb	r2, [r3, #0]
 800ca6a:	4b24      	ldr	r3, [pc, #144]	; (800cafc <CAN_2_Transmit+0x1c4>)
 800ca6c:	715a      	strb	r2, [r3, #5]
	CAN2_data_Tx_LM10[6] = *canData.U_bat;
 800ca6e:	4b20      	ldr	r3, [pc, #128]	; (800caf0 <CAN_2_Transmit+0x1b8>)
 800ca70:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ca74:	781a      	ldrb	r2, [r3, #0]
 800ca76:	4b21      	ldr	r3, [pc, #132]	; (800cafc <CAN_2_Transmit+0x1c4>)
 800ca78:	719a      	strb	r2, [r3, #6]
	CAN2_data_Tx_LM10[7] = *canData.BSD;
 800ca7a:	4b1d      	ldr	r3, [pc, #116]	; (800caf0 <CAN_2_Transmit+0x1b8>)
 800ca7c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800ca80:	781a      	ldrb	r2, [r3, #0]
 800ca82:	4b1e      	ldr	r3, [pc, #120]	; (800cafc <CAN_2_Transmit+0x1c4>)
 800ca84:	71da      	strb	r2, [r3, #7]

	CAN_NODE_MO_UpdateData(&CAN_2_LMO_10_Config, CAN2_data_Tx_LM10);
 800ca86:	481e      	ldr	r0, [pc, #120]	; (800cb00 <CAN_2_Transmit+0x1c8>)
 800ca88:	491c      	ldr	r1, [pc, #112]	; (800cafc <CAN_2_Transmit+0x1c4>)
 800ca8a:	f7fe fc05 	bl	800b298 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_2_LMO_10_Config);
 800ca8e:	481c      	ldr	r0, [pc, #112]	; (800cb00 <CAN_2_Transmit+0x1c8>)
 800ca90:	f7fe fbde 	bl	800b250 <CAN_NODE_MO_Transmit>

	//VCU_Failure 0x7E3 LM11
	for (int i = 0; i < 8; i++) {
 800ca94:	2300      	movs	r3, #0
 800ca96:	607b      	str	r3, [r7, #4]
 800ca98:	e018      	b.n	800cacc <CAN_2_Transmit+0x194>
		CAN2_data_Tx_LM11[i] = getbits64(canData.plausi_error, 8*(i+1)-1, 8);
 800ca9a:	4b15      	ldr	r3, [pc, #84]	; (800caf0 <CAN_2_Transmit+0x1b8>)
 800ca9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800caa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa4:	6879      	ldr	r1, [r7, #4]
 800caa6:	3101      	adds	r1, #1
 800caa8:	00c9      	lsls	r1, r1, #3
 800caaa:	1e4c      	subs	r4, r1, #1
 800caac:	4610      	mov	r0, r2
 800caae:	4619      	mov	r1, r3
 800cab0:	4622      	mov	r2, r4
 800cab2:	2308      	movs	r3, #8
 800cab4:	f001 faf0 	bl	800e098 <getbits64>
 800cab8:	4603      	mov	r3, r0
 800caba:	b2d9      	uxtb	r1, r3
 800cabc:	4a11      	ldr	r2, [pc, #68]	; (800cb04 <CAN_2_Transmit+0x1cc>)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4413      	add	r3, r2
 800cac2:	460a      	mov	r2, r1
 800cac4:	701a      	strb	r2, [r3, #0]

	CAN_NODE_MO_UpdateData(&CAN_2_LMO_10_Config, CAN2_data_Tx_LM10);
	CAN_NODE_MO_Transmit(&CAN_2_LMO_10_Config);

	//VCU_Failure 0x7E3 LM11
	for (int i = 0; i < 8; i++) {
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	3301      	adds	r3, #1
 800caca:	607b      	str	r3, [r7, #4]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b07      	cmp	r3, #7
 800cad0:	dde3      	ble.n	800ca9a <CAN_2_Transmit+0x162>
		CAN2_data_Tx_LM11[i] = getbits64(canData.plausi_error, 8*(i+1)-1, 8);
	}
	CAN_NODE_MO_UpdateData(&CAN_2_LMO_11_Config, CAN2_data_Tx_LM11);
 800cad2:	480d      	ldr	r0, [pc, #52]	; (800cb08 <CAN_2_Transmit+0x1d0>)
 800cad4:	490b      	ldr	r1, [pc, #44]	; (800cb04 <CAN_2_Transmit+0x1cc>)
 800cad6:	f7fe fbdf 	bl	800b298 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_2_LMO_11_Config);
 800cada:	480b      	ldr	r0, [pc, #44]	; (800cb08 <CAN_2_Transmit+0x1d0>)
 800cadc:	f7fe fbb8 	bl	800b250 <CAN_NODE_MO_Transmit>
}
 800cae0:	370c      	adds	r7, #12
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd90      	pop	{r4, r7, pc}
 800cae6:	bf00      	nop
 800cae8:	33333333 	.word	0x33333333
 800caec:	3fe33333 	.word	0x3fe33333
 800caf0:	20001338 	.word	0x20001338
 800caf4:	20000868 	.word	0x20000868
 800caf8:	0800f7d4 	.word	0x0800f7d4
 800cafc:	20000870 	.word	0x20000870
 800cb00:	0800f7e0 	.word	0x0800f7e0
 800cb04:	20000878 	.word	0x20000878
 800cb08:	0800f7ec 	.word	0x0800f7ec
 800cb0c:	f3af 8000 	nop.w

0800cb10 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	460b      	mov	r3, r1
 800cb1a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800cb1c:	78fb      	ldrb	r3, [r7, #3]
 800cb1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cb22:	409a      	lsls	r2, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	605a      	str	r2, [r3, #4]
}
 800cb28:	370c      	adds	r7, #12
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop

0800cb34 <XMC_WDT_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Init(), XMC_WDT_Stop()
 */
__STATIC_INLINE void XMC_WDT_Start(void)
{
 800cb34:	b480      	push	{r7}
 800cb36:	af00      	add	r7, sp, #0
  WDT->CTR |= (uint32_t)WDT_CTR_ENB_Msk;
 800cb38:	4a04      	ldr	r2, [pc, #16]	; (800cb4c <XMC_WDT_Start+0x18>)
 800cb3a:	4b04      	ldr	r3, [pc, #16]	; (800cb4c <XMC_WDT_Start+0x18>)
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	f043 0301 	orr.w	r3, r3, #1
 800cb42:	6053      	str	r3, [r2, #4]
}
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr
 800cb4c:	50008000 	.word	0x50008000

0800cb50 <XMC_WDT_Service>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_GetCounter(), XMC_WDT_SetWindowBounds(), XMC_WDT_SetServicePulseWidth()
 */
__STATIC_INLINE void XMC_WDT_Service(void)
{
 800cb50:	b480      	push	{r7}
 800cb52:	af00      	add	r7, sp, #0
  WDT->SRV = XMC_WDT_MAGIC_WORD;
 800cb54:	4b03      	ldr	r3, [pc, #12]	; (800cb64 <XMC_WDT_Service+0x14>)
 800cb56:	4a04      	ldr	r2, [pc, #16]	; (800cb68 <XMC_WDT_Service+0x18>)
 800cb58:	609a      	str	r2, [r3, #8]
}
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	50008000 	.word	0x50008000
 800cb68:	abadcafe 	.word	0xabadcafe

0800cb6c <XMC_WDT_ClearAlarm>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Service(), XMC_WDT_SetMode()
 */
__STATIC_INLINE void XMC_WDT_ClearAlarm(void)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	af00      	add	r7, sp, #0
  WDT->WDTCLR = WDT_WDTCLR_ALMC_Msk;
 800cb70:	4b03      	ldr	r3, [pc, #12]	; (800cb80 <XMC_WDT_ClearAlarm+0x14>)
 800cb72:	2201      	movs	r2, #1
 800cb74:	61da      	str	r2, [r3, #28]
}
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	50008000 	.word	0x50008000

0800cb84 <WATCHDOG_Start>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Start(void)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	af00      	add	r7, sp, #0
  XMC_WDT_Start();
 800cb88:	f7ff ffd4 	bl	800cb34 <XMC_WDT_Start>
}
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop

0800cb90 <WATCHDOG_Service>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Service(void)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	af00      	add	r7, sp, #0
  XMC_WDT_Service();
 800cb94:	f7ff ffdc 	bl	800cb50 <XMC_WDT_Service>
}
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop

0800cb9c <WATCHDOG_ClearAlarm>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_ClearAlarm(void)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	af00      	add	r7, sp, #0
  XMC_WDT_ClearAlarm();
 800cba0:	f7ff ffe4 	bl	800cb6c <XMC_WDT_ClearAlarm>
}
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop

0800cba8 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	7c1b      	ldrb	r3, [r3, #16]
 800cbb8:	4610      	mov	r0, r2
 800cbba:	4619      	mov	r1, r3
 800cbbc:	f7ff ffa8 	bl	800cb10 <XMC_GPIO_SetOutputLow>
}
 800cbc0:	3708      	adds	r7, #8
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop

0800cbc8 <Watchdog_Start>:


//######## Watchdog ########

void Watchdog_Start()
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	af00      	add	r7, sp, #0
	  WATCHDOG_Start();
 800cbcc:	f7ff ffda 	bl	800cb84 <WATCHDOG_Start>
}
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop

0800cbd4 <Watchdog_Reset>:

void Watchdog_Reset()
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	af00      	add	r7, sp, #0
	  WATCHDOG_ClearAlarm();
 800cbd8:	f7ff ffe0 	bl	800cb9c <WATCHDOG_ClearAlarm>
	  WATCHDOG_Service();
 800cbdc:	f7ff ffd8 	bl	800cb90 <WATCHDOG_Service>
}
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop

0800cbe4 <NMI_Handler>:

void NMI_Handler(void) //Watchdog Prewarning Handler
{
 800cbe4:	b590      	push	{r4, r7, lr}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_Debug_LED);
 800cbea:	4818      	ldr	r0, [pc, #96]	; (800cc4c <NMI_Handler+0x68>)
 800cbec:	f7ff ffdc 	bl	800cba8 <DIGITAL_IO_SetOutputLow>

	setbitTrue((unsigned*)&canData.plausi_error, 63);
 800cbf0:	4817      	ldr	r0, [pc, #92]	; (800cc50 <NMI_Handler+0x6c>)
 800cbf2:	213f      	movs	r1, #63	; 0x3f
 800cbf4:	f001 fa8c 	bl	800e110 <setbitTrue>
	for (int i = 0; i < 8; i++) {
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	607b      	str	r3, [r7, #4]
 800cbfc:	e018      	b.n	800cc30 <NMI_Handler+0x4c>
		plausi_error_array[i] = getbits64(canData.plausi_error, 8*(i+1)-1, 8);
 800cbfe:	4b15      	ldr	r3, [pc, #84]	; (800cc54 <NMI_Handler+0x70>)
 800cc00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc08:	6879      	ldr	r1, [r7, #4]
 800cc0a:	3101      	adds	r1, #1
 800cc0c:	00c9      	lsls	r1, r1, #3
 800cc0e:	1e4c      	subs	r4, r1, #1
 800cc10:	4610      	mov	r0, r2
 800cc12:	4619      	mov	r1, r3
 800cc14:	4622      	mov	r2, r4
 800cc16:	2308      	movs	r3, #8
 800cc18:	f001 fa3e 	bl	800e098 <getbits64>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	b2d9      	uxtb	r1, r3
 800cc20:	4a0d      	ldr	r2, [pc, #52]	; (800cc58 <NMI_Handler+0x74>)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	4413      	add	r3, r2
 800cc26:	460a      	mov	r2, r1
 800cc28:	701a      	strb	r2, [r3, #0]
void NMI_Handler(void) //Watchdog Prewarning Handler
{
	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_Debug_LED);

	setbitTrue((unsigned*)&canData.plausi_error, 63);
	for (int i = 0; i < 8; i++) {
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	607b      	str	r3, [r7, #4]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2b07      	cmp	r3, #7
 800cc34:	dde3      	ble.n	800cbfe <NMI_Handler+0x1a>
		plausi_error_array[i] = getbits64(canData.plausi_error, 8*(i+1)-1, 8);
	}
	CAN_NODE_MO_UpdateData(&CAN_2_LMO_11_Config, plausi_error_array);
 800cc36:	4809      	ldr	r0, [pc, #36]	; (800cc5c <NMI_Handler+0x78>)
 800cc38:	4907      	ldr	r1, [pc, #28]	; (800cc58 <NMI_Handler+0x74>)
 800cc3a:	f7fe fb2d 	bl	800b298 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_2_LMO_11_Config);
 800cc3e:	4807      	ldr	r0, [pc, #28]	; (800cc5c <NMI_Handler+0x78>)
 800cc40:	f7fe fb06 	bl	800b250 <CAN_NODE_MO_Transmit>
}
 800cc44:	370c      	adds	r7, #12
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd90      	pop	{r4, r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	0800f59c 	.word	0x0800f59c
 800cc50:	20001488 	.word	0x20001488
 800cc54:	20001338 	.word	0x20001338
 800cc58:	20000890 	.word	0x20000890
 800cc5c:	0800f7ec 	.word	0x0800f7ec

0800cc60 <checkRangePlausi>:

//######## Plausi Check ########

unsigned checkRangePlausi(unsigned value, VCU_Failure error_code)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b086      	sub	sp, #24
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	460b      	mov	r3, r1
 800cc6a:	70fb      	strb	r3, [r7, #3]
	if(checkRangePlausi_active)
 800cc6c:	4b94      	ldr	r3, [pc, #592]	; (800cec0 <checkRangePlausi+0x260>)
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f000 816a 	beq.w	800cf4a <checkRangePlausi+0x2ea>
	{
		int upperLimit, lowerLimit;
		unsigned prevValue;

		switch(error_code){
 800cc76:	78fb      	ldrb	r3, [r7, #3]
 800cc78:	3b01      	subs	r3, #1
 800cc7a:	2b16      	cmp	r3, #22
 800cc7c:	f200 8136 	bhi.w	800ceec <checkRangePlausi+0x28c>
 800cc80:	a201      	add	r2, pc, #4	; (adr r2, 800cc88 <checkRangePlausi+0x28>)
 800cc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc86:	bf00      	nop
 800cc88:	0800cce5 	.word	0x0800cce5
 800cc8c:	0800ccf7 	.word	0x0800ccf7
 800cc90:	0800cd0d 	.word	0x0800cd0d
 800cc94:	0800cd23 	.word	0x0800cd23
 800cc98:	0800cd35 	.word	0x0800cd35
 800cc9c:	0800cd47 	.word	0x0800cd47
 800cca0:	0800cd5b 	.word	0x0800cd5b
 800cca4:	0800cd71 	.word	0x0800cd71
 800cca8:	0800cd87 	.word	0x0800cd87
 800ccac:	0800cd9d 	.word	0x0800cd9d
 800ccb0:	0800cdb3 	.word	0x0800cdb3
 800ccb4:	0800cdc7 	.word	0x0800cdc7
 800ccb8:	0800cddb 	.word	0x0800cddb
 800ccbc:	0800cdf1 	.word	0x0800cdf1
 800ccc0:	0800ce11 	.word	0x0800ce11
 800ccc4:	0800ce25 	.word	0x0800ce25
 800ccc8:	0800ce39 	.word	0x0800ce39
 800cccc:	0800ce4b 	.word	0x0800ce4b
 800ccd0:	0800ce5d 	.word	0x0800ce5d
 800ccd4:	0800ce6f 	.word	0x0800ce6f
 800ccd8:	0800ce81 	.word	0x0800ce81
 800ccdc:	0800cea1 	.word	0x0800cea1
 800cce0:	0800cecd 	.word	0x0800cecd
		case ERR_FANS_DASH_BIT: prevValue = (unsigned)*IOportData.Fans_dash_bit;
 800cce4:	4b77      	ldr	r3, [pc, #476]	; (800cec4 <checkRangePlausi+0x264>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	60fb      	str	r3, [r7, #12]
								upperLimit=1;
 800ccec:	2301      	movs	r3, #1
 800ccee:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	613b      	str	r3, [r7, #16]
								break;
 800ccf4:	e0fa      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_G_LONG_ABS: 	prevValue = (unsigned)*canData.g_long_ABS; //todo
 800ccf6:	4b74      	ldr	r3, [pc, #464]	; (800cec8 <checkRangePlausi+0x268>)
 800ccf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ccfc:	881b      	ldrh	r3, [r3, #0]
 800ccfe:	60fb      	str	r3, [r7, #12]
								upperLimit=32e3;
 800cd00:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cd04:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cd06:	2300      	movs	r3, #0
 800cd08:	613b      	str	r3, [r7, #16]
								break;
 800cd0a:	e0ef      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_G_YAW_ABS: 	prevValue = (unsigned)*canData.g_yaw_ABS; //todo
 800cd0c:	4b6e      	ldr	r3, [pc, #440]	; (800cec8 <checkRangePlausi+0x268>)
 800cd0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cd12:	881b      	ldrh	r3, [r3, #0]
 800cd14:	60fb      	str	r3, [r7, #12]
								upperLimit=32e3;
 800cd16:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cd1a:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	613b      	str	r3, [r7, #16]
								break;
 800cd20:	e0e4      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_GEAR:		 	prevValue = (unsigned)*canData.gear;
 800cd22:	4b69      	ldr	r3, [pc, #420]	; (800cec8 <checkRangePlausi+0x268>)
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	60fb      	str	r3, [r7, #12]
								upperLimit =3<<3; //Motorola
 800cd2a:	2318      	movs	r3, #24
 800cd2c:	617b      	str	r3, [r7, #20]
								lowerLimit =0<<3; //Motorola
 800cd2e:	2300      	movs	r3, #0
 800cd30:	613b      	str	r3, [r7, #16]
								break;
 800cd32:	e0db      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_LC_DASH_BIT: 	prevValue = (unsigned)*IOportData.LC_dash_bit;
 800cd34:	4b63      	ldr	r3, [pc, #396]	; (800cec4 <checkRangePlausi+0x264>)
 800cd36:	6a1b      	ldr	r3, [r3, #32]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	60fb      	str	r3, [r7, #12]
								upperLimit=1;
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cd40:	2300      	movs	r3, #0
 800cd42:	613b      	str	r3, [r7, #16]
								break;
 800cd44:	e0d2      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_N_ENGINE:	 	prevValue = (unsigned)*canData.n_engine;
 800cd46:	4b60      	ldr	r3, [pc, #384]	; (800cec8 <checkRangePlausi+0x268>)
 800cd48:	689b      	ldr	r3, [r3, #8]
 800cd4a:	881b      	ldrh	r3, [r3, #0]
 800cd4c:	60fb      	str	r3, [r7, #12]
								upperLimit=10000;
 800cd4e:	f242 7310 	movw	r3, #10000	; 0x2710
 800cd52:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cd54:	2300      	movs	r3, #0
 800cd56:	613b      	str	r3, [r7, #16]
								break;
 800cd58:	e0c8      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_N_WHEEL_FL: 	prevValue = (unsigned)*canData.n_wheel_FL;
 800cd5a:	4b5b      	ldr	r3, [pc, #364]	; (800cec8 <checkRangePlausi+0x268>)
 800cd5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800cd60:	881b      	ldrh	r3, [r3, #0]
 800cd62:	60fb      	str	r3, [r7, #12]
								upperLimit=3840;
 800cd64:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800cd68:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	613b      	str	r3, [r7, #16]
								break;
 800cd6e:	e0bd      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_N_WHEEL_FR: 	prevValue = (unsigned)*canData.n_wheel_FR;
 800cd70:	4b55      	ldr	r3, [pc, #340]	; (800cec8 <checkRangePlausi+0x268>)
 800cd72:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800cd76:	881b      	ldrh	r3, [r3, #0]
 800cd78:	60fb      	str	r3, [r7, #12]
								upperLimit=3840;
 800cd7a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800cd7e:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cd80:	2300      	movs	r3, #0
 800cd82:	613b      	str	r3, [r7, #16]
								break;
 800cd84:	e0b2      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_N_WHEEL_RL: 	prevValue = (unsigned)*canData.n_wheel_RL;
 800cd86:	4b50      	ldr	r3, [pc, #320]	; (800cec8 <checkRangePlausi+0x268>)
 800cd88:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800cd8c:	881b      	ldrh	r3, [r3, #0]
 800cd8e:	60fb      	str	r3, [r7, #12]
								upperLimit=3840;
 800cd90:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800cd94:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cd96:	2300      	movs	r3, #0
 800cd98:	613b      	str	r3, [r7, #16]
								break;
 800cd9a:	e0a7      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_N_WHEEL_RR: 	prevValue = (unsigned)*canData.n_wheel_RR;
 800cd9c:	4b4a      	ldr	r3, [pc, #296]	; (800cec8 <checkRangePlausi+0x268>)
 800cd9e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800cda2:	881b      	ldrh	r3, [r3, #0]
 800cda4:	60fb      	str	r3, [r7, #12]
								upperLimit=3840;
 800cda6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800cdaa:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cdac:	2300      	movs	r3, #0
 800cdae:	613b      	str	r3, [r7, #16]
								break;
 800cdb0:	e09c      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_P_AIR_22:	 	prevValue = (unsigned)*canData.p_air_22;
 800cdb2:	4b45      	ldr	r3, [pc, #276]	; (800cec8 <checkRangePlausi+0x268>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	60fb      	str	r3, [r7, #12]
								upperLimit=1000;
 800cdba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cdbe:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	613b      	str	r3, [r7, #16]
								break;
 800cdc4:	e092      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_P_AIR_22_DES: 	prevValue = (unsigned)*canData.AN5GearPos;
 800cdc6:	4b40      	ldr	r3, [pc, #256]	; (800cec8 <checkRangePlausi+0x268>)
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	60fb      	str	r3, [r7, #12]
								upperLimit=1000;
 800cdce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cdd2:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	613b      	str	r3, [r7, #16]
								break;
 800cdd8:	e088      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_P_BRAKE_F: 	prevValue = (unsigned)*canData.p_brake_F; //todo
 800cdda:	4b3b      	ldr	r3, [pc, #236]	; (800cec8 <checkRangePlausi+0x268>)
 800cddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cde0:	881b      	ldrh	r3, [r3, #0]
 800cde2:	60fb      	str	r3, [r7, #12]
								upperLimit=32e3;
 800cde4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cde8:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cdea:	2300      	movs	r3, #0
 800cdec:	613b      	str	r3, [r7, #16]
								break;
 800cdee:	e07d      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_P_BRAKE_R: 	prevValue = (unsigned)*IOportData.p_brake_R;
 800cdf0:	4b34      	ldr	r3, [pc, #208]	; (800cec4 <checkRangePlausi+0x264>)
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf8:	4610      	mov	r0, r2
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	f002 f87e 	bl	800eefc <__aeabi_d2uiz>
 800ce00:	4603      	mov	r3, r0
 800ce02:	60fb      	str	r3, [r7, #12]
								upperLimit = 6000;
 800ce04:	f241 7370 	movw	r3, #6000	; 0x1770
 800ce08:	617b      	str	r3, [r7, #20]
								lowerLimit = 0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	613b      	str	r3, [r7, #16]
								break;
 800ce0e:	e06d      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_STW_CLTUCH_MODE: 	prevValue = (unsigned)*canData.STW_clutch_mode; //todo
 800ce10:	4b2d      	ldr	r3, [pc, #180]	; (800cec8 <checkRangePlausi+0x268>)
 800ce12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	60fb      	str	r3, [r7, #12]
									upperLimit = 32e3;
 800ce18:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ce1c:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	613b      	str	r3, [r7, #16]
									break;
 800ce22:	e063      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_MUE_TYRE:		 	prevValue = (unsigned)*canData.STW_mue_tyre;
 800ce24:	4b28      	ldr	r3, [pc, #160]	; (800cec8 <checkRangePlausi+0x268>)
 800ce26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	60fb      	str	r3, [r7, #12]
									upperLimit = 100;
 800ce2e:	2364      	movs	r3, #100	; 0x64
 800ce30:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800ce32:	2300      	movs	r3, #0
 800ce34:	613b      	str	r3, [r7, #16]
									break;
 800ce36:	e059      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_STW_SHIFT_DOWN_REQUEST: 	prevValue = (unsigned)*canData.STW_shift_down_request;
 800ce38:	4b23      	ldr	r3, [pc, #140]	; (800cec8 <checkRangePlausi+0x268>)
 800ce3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	60fb      	str	r3, [r7, #12]
											upperLimit = 1;
 800ce40:	2301      	movs	r3, #1
 800ce42:	617b      	str	r3, [r7, #20]
											lowerLimit = 0;
 800ce44:	2300      	movs	r3, #0
 800ce46:	613b      	str	r3, [r7, #16]
											break;
 800ce48:	e050      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_STW_SHIFT_UP_REQUEST: 	prevValue = (unsigned)*canData.STW_shift_up_request;
 800ce4a:	4b1f      	ldr	r3, [pc, #124]	; (800cec8 <checkRangePlausi+0x268>)
 800ce4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	60fb      	str	r3, [r7, #12]
											upperLimit = 1;
 800ce52:	2301      	movs	r3, #1
 800ce54:	617b      	str	r3, [r7, #20]
											lowerLimit = 0;
 800ce56:	2300      	movs	r3, #0
 800ce58:	613b      	str	r3, [r7, #16]
											break;
 800ce5a:	e047      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_T_WATER_ENGINE: 	prevValue = (unsigned)*canData.t_water_engine;
 800ce5c:	4b1a      	ldr	r3, [pc, #104]	; (800cec8 <checkRangePlausi+0x268>)
 800ce5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	60fb      	str	r3, [r7, #12]
									upperLimit = 250;
 800ce64:	23fa      	movs	r3, #250	; 0xfa
 800ce66:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	613b      	str	r3, [r7, #16]
									break;
 800ce6c:	e03e      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_TRANSMISSION_MODE:	prevValue = (unsigned)*canData.t_water_engine;
 800ce6e:	4b16      	ldr	r3, [pc, #88]	; (800cec8 <checkRangePlausi+0x268>)
 800ce70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	60fb      	str	r3, [r7, #12]
									upperLimit = 250;
 800ce76:	23fa      	movs	r3, #250	; 0xfa
 800ce78:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	613b      	str	r3, [r7, #16]
									break;
 800ce7e:	e035      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_U_BAT:				prevValue = (unsigned)*IOportData.U_Bat;
 800ce80:	4b10      	ldr	r3, [pc, #64]	; (800cec4 <checkRangePlausi+0x264>)
 800ce82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce88:	4610      	mov	r0, r2
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	f002 f836 	bl	800eefc <__aeabi_d2uiz>
 800ce90:	4603      	mov	r3, r0
 800ce92:	60fb      	str	r3, [r7, #12]
									upperLimit = 20000;
 800ce94:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ce98:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	613b      	str	r3, [r7, #16]
									break;
 800ce9e:	e025      	b.n	800ceec <checkRangePlausi+0x28c>
		case ERR_X_CLUTCH:			prevValue = (unsigned)*IOportData.x_clutch;
 800cea0:	4b08      	ldr	r3, [pc, #32]	; (800cec4 <checkRangePlausi+0x264>)
 800cea2:	68db      	ldr	r3, [r3, #12]
 800cea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea8:	4610      	mov	r0, r2
 800ceaa:	4619      	mov	r1, r3
 800ceac:	f002 f826 	bl	800eefc <__aeabi_d2uiz>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	60fb      	str	r3, [r7, #12]
									upperLimit = 5000;
 800ceb4:	f241 3388 	movw	r3, #5000	; 0x1388
 800ceb8:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800ceba:	2300      	movs	r3, #0
 800cebc:	613b      	str	r3, [r7, #16]
									break;
 800cebe:	e015      	b.n	800ceec <checkRangePlausi+0x28c>
 800cec0:	20000642 	.word	0x20000642
 800cec4:	200012c0 	.word	0x200012c0
 800cec8:	20001338 	.word	0x20001338
		case ERR_X_CLUTCH_STW:			prevValue = (unsigned)*IOportData.x_clutch_STW;
 800cecc:	4b21      	ldr	r3, [pc, #132]	; (800cf54 <checkRangePlausi+0x2f4>)
 800cece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ced0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced4:	4610      	mov	r0, r2
 800ced6:	4619      	mov	r1, r3
 800ced8:	f002 f810 	bl	800eefc <__aeabi_d2uiz>
 800cedc:	4603      	mov	r3, r0
 800cede:	60fb      	str	r3, [r7, #12]
										upperLimit = 5000;
 800cee0:	f241 3388 	movw	r3, #5000	; 0x1388
 800cee4:	617b      	str	r3, [r7, #20]
										lowerLimit = 0;
 800cee6:	2300      	movs	r3, #0
 800cee8:	613b      	str	r3, [r7, #16]
										break;
 800ceea:	bf00      	nop
		}

		if(value >= lowerLimit && value <= upperLimit)
 800ceec:	693a      	ldr	r2, [r7, #16]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d814      	bhi.n	800cf1e <checkRangePlausi+0x2be>
 800cef4:	697a      	ldr	r2, [r7, #20]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d310      	bcc.n	800cf1e <checkRangePlausi+0x2be>
		{
			setbitFalse((unsigned*)&canData.plausi_error, 2*(error_code-1));
 800cefc:	78fb      	ldrb	r3, [r7, #3]
 800cefe:	3b01      	subs	r3, #1
 800cf00:	005b      	lsls	r3, r3, #1
 800cf02:	4815      	ldr	r0, [pc, #84]	; (800cf58 <checkRangePlausi+0x2f8>)
 800cf04:	4619      	mov	r1, r3
 800cf06:	f001 f92b 	bl	800e160 <setbitFalse>
			setbitFalse((unsigned*)&canData.plausi_error, 2*(error_code-1)+1);
 800cf0a:	78fb      	ldrb	r3, [r7, #3]
 800cf0c:	3b01      	subs	r3, #1
 800cf0e:	005b      	lsls	r3, r3, #1
 800cf10:	3301      	adds	r3, #1
 800cf12:	4811      	ldr	r0, [pc, #68]	; (800cf58 <checkRangePlausi+0x2f8>)
 800cf14:	4619      	mov	r1, r3
 800cf16:	f001 f923 	bl	800e160 <setbitFalse>
			return value;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	e016      	b.n	800cf4c <checkRangePlausi+0x2ec>
		}
		else
		{
			if(value <= lowerLimit)
 800cf1e:	693a      	ldr	r2, [r7, #16]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d307      	bcc.n	800cf36 <checkRangePlausi+0x2d6>
			{
				setbitTrue((unsigned*)&canData.plausi_error, 2*(error_code-1));
 800cf26:	78fb      	ldrb	r3, [r7, #3]
 800cf28:	3b01      	subs	r3, #1
 800cf2a:	005b      	lsls	r3, r3, #1
 800cf2c:	480a      	ldr	r0, [pc, #40]	; (800cf58 <checkRangePlausi+0x2f8>)
 800cf2e:	4619      	mov	r1, r3
 800cf30:	f001 f8ee 	bl	800e110 <setbitTrue>
 800cf34:	e007      	b.n	800cf46 <checkRangePlausi+0x2e6>
			}
			else
			{
				setbitTrue((unsigned*)&canData.plausi_error, 2*(error_code-1)+1);
 800cf36:	78fb      	ldrb	r3, [r7, #3]
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	005b      	lsls	r3, r3, #1
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	4806      	ldr	r0, [pc, #24]	; (800cf58 <checkRangePlausi+0x2f8>)
 800cf40:	4619      	mov	r1, r3
 800cf42:	f001 f8e5 	bl	800e110 <setbitTrue>
			}
			return prevValue;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	e000      	b.n	800cf4c <checkRangePlausi+0x2ec>
		}
	}
	else
	{
		return value; //No Plausi Check
 800cf4a:	687b      	ldr	r3, [r7, #4]
	}
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3718      	adds	r7, #24
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	200012c0 	.word	0x200012c0
 800cf58:	20001488 	.word	0x20001488

0800cf5c <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b083      	sub	sp, #12
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	460b      	mov	r3, r1
 800cf66:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf6c:	78fb      	ldrb	r3, [r7, #3]
 800cf6e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf72:	f003 0301 	and.w	r3, r3, #1
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	370c      	adds	r7, #12
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop

0800cf84 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	7c1b      	ldrb	r3, [r3, #16]
 800cf94:	4610      	mov	r0, r2
 800cf96:	4619      	mov	r1, r3
 800cf98:	f7ff ffe0 	bl	800cf5c <XMC_GPIO_GetInput>
 800cf9c:	4603      	mov	r3, r0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3708      	adds	r7, #8
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop

0800cfa8 <IOPort_ini>:
uint16_t busio_read;
extern boolean_T shiftDownInterrupt;
extern boolean_T shiftUpInterrupt;

void IOPort_ini()
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	af00      	add	r7, sp, #0
	//Inputs
	IOportData.Fans_dash_bit = (boolean_T*)&VCU_DW.VAR_IN_Fans_dash_bit;
 800cfac:	4b3c      	ldr	r3, [pc, #240]	; (800d0a0 <IOPort_ini+0xf8>)
 800cfae:	4a3d      	ldr	r2, [pc, #244]	; (800d0a4 <IOPort_ini+0xfc>)
 800cfb0:	601a      	str	r2, [r3, #0]
	IOportData.p_brake_R = &VCU_DW.VAR_IN_p_brake_R;
 800cfb2:	4b3b      	ldr	r3, [pc, #236]	; (800d0a0 <IOPort_ini+0xf8>)
 800cfb4:	4a3c      	ldr	r2, [pc, #240]	; (800d0a8 <IOPort_ini+0x100>)
 800cfb6:	605a      	str	r2, [r3, #4]
	//IOportData.p_pneum = &VCU_DW.VAR_IN_p_pneum;
	IOportData.x_clutch = &VCU_DW.VAR_IN_x_clutch;
 800cfb8:	4b39      	ldr	r3, [pc, #228]	; (800d0a0 <IOPort_ini+0xf8>)
 800cfba:	4a3c      	ldr	r2, [pc, #240]	; (800d0ac <IOPort_ini+0x104>)
 800cfbc:	60da      	str	r2, [r3, #12]
	IOportData.f_FL = &VCU_DW.VAR_IN_f_FL;
 800cfbe:	4b38      	ldr	r3, [pc, #224]	; (800d0a0 <IOPort_ini+0xf8>)
 800cfc0:	4a3b      	ldr	r2, [pc, #236]	; (800d0b0 <IOPort_ini+0x108>)
 800cfc2:	611a      	str	r2, [r3, #16]
	IOportData.f_FR = &VCU_DW.VAR_IN_f_FR;
 800cfc4:	4b36      	ldr	r3, [pc, #216]	; (800d0a0 <IOPort_ini+0xf8>)
 800cfc6:	4a3b      	ldr	r2, [pc, #236]	; (800d0b4 <IOPort_ini+0x10c>)
 800cfc8:	615a      	str	r2, [r3, #20]
	IOportData.f_RL = &VCU_DW.VAR_IN_f_RL;
 800cfca:	4b35      	ldr	r3, [pc, #212]	; (800d0a0 <IOPort_ini+0xf8>)
 800cfcc:	4a3a      	ldr	r2, [pc, #232]	; (800d0b8 <IOPort_ini+0x110>)
 800cfce:	619a      	str	r2, [r3, #24]
	IOportData.f_RR = &VCU_DW.VAR_IN_f_RR;
 800cfd0:	4b33      	ldr	r3, [pc, #204]	; (800d0a0 <IOPort_ini+0xf8>)
 800cfd2:	4a3a      	ldr	r2, [pc, #232]	; (800d0bc <IOPort_ini+0x114>)
 800cfd4:	61da      	str	r2, [r3, #28]
	IOportData.LC_dash_bit = (boolean_T*)&VCU_DW.VAR_IN_LC_dash_bit;
 800cfd6:	4b32      	ldr	r3, [pc, #200]	; (800d0a0 <IOPort_ini+0xf8>)
 800cfd8:	4a39      	ldr	r2, [pc, #228]	; (800d0c0 <IOPort_ini+0x118>)
 800cfda:	621a      	str	r2, [r3, #32]
	IOportData.x_RH_F = &VCU_DW.VAR_IN_x_RH_F;
 800cfdc:	4b30      	ldr	r3, [pc, #192]	; (800d0a0 <IOPort_ini+0xf8>)
 800cfde:	4a39      	ldr	r2, [pc, #228]	; (800d0c4 <IOPort_ini+0x11c>)
 800cfe0:	625a      	str	r2, [r3, #36]	; 0x24
	IOportData.x_RH_RL = &VCU_DW.VAR_IN_x_RH_RL;
 800cfe2:	4b2f      	ldr	r3, [pc, #188]	; (800d0a0 <IOPort_ini+0xf8>)
 800cfe4:	4a38      	ldr	r2, [pc, #224]	; (800d0c8 <IOPort_ini+0x120>)
 800cfe6:	629a      	str	r2, [r3, #40]	; 0x28
	IOportData.x_RH_RR = &VCU_DW.VAR_IN_x_RH_RR;
 800cfe8:	4b2d      	ldr	r3, [pc, #180]	; (800d0a0 <IOPort_ini+0xf8>)
 800cfea:	4a38      	ldr	r2, [pc, #224]	; (800d0cc <IOPort_ini+0x124>)
 800cfec:	62da      	str	r2, [r3, #44]	; 0x2c
	IOportData.U_Bat = &VCU_DW.VAR_IN_U_Bat;
 800cfee:	4b2c      	ldr	r3, [pc, #176]	; (800d0a0 <IOPort_ini+0xf8>)
 800cff0:	4a37      	ldr	r2, [pc, #220]	; (800d0d0 <IOPort_ini+0x128>)
 800cff2:	631a      	str	r2, [r3, #48]	; 0x30
	IOportData.x_clutch_STW = &VCU_DW.VAR_IN_x_clutch_STW;
 800cff4:	4b2a      	ldr	r3, [pc, #168]	; (800d0a0 <IOPort_ini+0xf8>)
 800cff6:	4a37      	ldr	r2, [pc, #220]	; (800d0d4 <IOPort_ini+0x12c>)
 800cff8:	635a      	str	r2, [r3, #52]	; 0x34
	VAR_boardTemp = 0; IOportData.boardTemp = &VAR_boardTemp;
 800cffa:	4937      	ldr	r1, [pc, #220]	; (800d0d8 <IOPort_ini+0x130>)
 800cffc:	f04f 0200 	mov.w	r2, #0
 800d000:	f04f 0300 	mov.w	r3, #0
 800d004:	e9c1 2300 	strd	r2, r3, [r1]
 800d008:	4b25      	ldr	r3, [pc, #148]	; (800d0a0 <IOPort_ini+0xf8>)
 800d00a:	4a33      	ldr	r2, [pc, #204]	; (800d0d8 <IOPort_ini+0x130>)
 800d00c:	639a      	str	r2, [r3, #56]	; 0x38
	VAR_TR1_VSense_WP = 0; IOportData.TR1_VSense_WP = &VAR_TR1_VSense_WP;
 800d00e:	4933      	ldr	r1, [pc, #204]	; (800d0dc <IOPort_ini+0x134>)
 800d010:	f04f 0200 	mov.w	r2, #0
 800d014:	f04f 0300 	mov.w	r3, #0
 800d018:	e9c1 2300 	strd	r2, r3, [r1]
 800d01c:	4b20      	ldr	r3, [pc, #128]	; (800d0a0 <IOPort_ini+0xf8>)
 800d01e:	4a2f      	ldr	r2, [pc, #188]	; (800d0dc <IOPort_ini+0x134>)
 800d020:	63da      	str	r2, [r3, #60]	; 0x3c
	VAR_TR2_VSense_FAN1 = 0; IOportData.TR2_VSense_FAN1 = &VAR_TR2_VSense_FAN1;
 800d022:	492f      	ldr	r1, [pc, #188]	; (800d0e0 <IOPort_ini+0x138>)
 800d024:	f04f 0200 	mov.w	r2, #0
 800d028:	f04f 0300 	mov.w	r3, #0
 800d02c:	e9c1 2300 	strd	r2, r3, [r1]
 800d030:	4b1b      	ldr	r3, [pc, #108]	; (800d0a0 <IOPort_ini+0xf8>)
 800d032:	4a2b      	ldr	r2, [pc, #172]	; (800d0e0 <IOPort_ini+0x138>)
 800d034:	641a      	str	r2, [r3, #64]	; 0x40
	VAR_TR3_VSense_FAN2 = 0; IOportData.TR3_VSense_FAN2 = &VAR_TR3_VSense_FAN2;
 800d036:	492b      	ldr	r1, [pc, #172]	; (800d0e4 <IOPort_ini+0x13c>)
 800d038:	f04f 0200 	mov.w	r2, #0
 800d03c:	f04f 0300 	mov.w	r3, #0
 800d040:	e9c1 2300 	strd	r2, r3, [r1]
 800d044:	4b16      	ldr	r3, [pc, #88]	; (800d0a0 <IOPort_ini+0xf8>)
 800d046:	4a27      	ldr	r2, [pc, #156]	; (800d0e4 <IOPort_ini+0x13c>)
 800d048:	645a      	str	r2, [r3, #68]	; 0x44

	//Outputs
	IOportData.VOVG_ShiftUp = &VCU_DW.VAR_OUT_VOVG_ShiftUp;
 800d04a:	4b15      	ldr	r3, [pc, #84]	; (800d0a0 <IOPort_ini+0xf8>)
 800d04c:	4a26      	ldr	r2, [pc, #152]	; (800d0e8 <IOPort_ini+0x140>)
 800d04e:	649a      	str	r2, [r3, #72]	; 0x48
	IOportData.VOVG_ShiftDown = &VCU_DW.VAR_OUT_VOVG_ShiftDown;
 800d050:	4b13      	ldr	r3, [pc, #76]	; (800d0a0 <IOPort_ini+0xf8>)
 800d052:	4a26      	ldr	r2, [pc, #152]	; (800d0ec <IOPort_ini+0x144>)
 800d054:	64da      	str	r2, [r3, #76]	; 0x4c
	IOportData.Ignition_Cut = &VCU_DW.VAR_OUT_Ignition_Cut;
 800d056:	4b12      	ldr	r3, [pc, #72]	; (800d0a0 <IOPort_ini+0xf8>)
 800d058:	4a25      	ldr	r2, [pc, #148]	; (800d0f0 <IOPort_ini+0x148>)
 800d05a:	651a      	str	r2, [r3, #80]	; 0x50
	IOportData.VOVG_IN = &VCU_DW.VAR_OUT_VOVG_IN;
 800d05c:	4b10      	ldr	r3, [pc, #64]	; (800d0a0 <IOPort_ini+0xf8>)
 800d05e:	4a25      	ldr	r2, [pc, #148]	; (800d0f4 <IOPort_ini+0x14c>)
 800d060:	655a      	str	r2, [r3, #84]	; 0x54
	IOportData.VOVG_OUT = &VCU_DW.VAR_OUT_VOVG_OUT;
 800d062:	4b0f      	ldr	r3, [pc, #60]	; (800d0a0 <IOPort_ini+0xf8>)
 800d064:	4a24      	ldr	r2, [pc, #144]	; (800d0f8 <IOPort_ini+0x150>)
 800d066:	659a      	str	r2, [r3, #88]	; 0x58
	IOportData.MHJ9_IN = (uint16_t*)&VCU_DW.VAR_OUT_MHJ9_IN; //PWM
 800d068:	4b0d      	ldr	r3, [pc, #52]	; (800d0a0 <IOPort_ini+0xf8>)
 800d06a:	4a24      	ldr	r2, [pc, #144]	; (800d0fc <IOPort_ini+0x154>)
 800d06c:	65da      	str	r2, [r3, #92]	; 0x5c
	IOportData.MHJ9_OUT = (uint16_t*)&VCU_DW.VAR_OUT_MHJ9_OUT; //PWM
 800d06e:	4b0c      	ldr	r3, [pc, #48]	; (800d0a0 <IOPort_ini+0xf8>)
 800d070:	4a23      	ldr	r2, [pc, #140]	; (800d100 <IOPort_ini+0x158>)
 800d072:	661a      	str	r2, [r3, #96]	; 0x60
	IOportData.Brakelight = &VCU_DW.VAR_OUT_Brakelight;
 800d074:	4b0a      	ldr	r3, [pc, #40]	; (800d0a0 <IOPort_ini+0xf8>)
 800d076:	4a23      	ldr	r2, [pc, #140]	; (800d104 <IOPort_ini+0x15c>)
 800d078:	665a      	str	r2, [r3, #100]	; 0x64
	IOportData.Waterpump_PWM_active = &VCU_DW.VAR_OUT_Waterpump_PWM_active;
 800d07a:	4b09      	ldr	r3, [pc, #36]	; (800d0a0 <IOPort_ini+0xf8>)
 800d07c:	4a22      	ldr	r2, [pc, #136]	; (800d108 <IOPort_ini+0x160>)
 800d07e:	669a      	str	r2, [r3, #104]	; 0x68
	IOportData.Fans1_PWM_active = &VCU_DW.VAR_OUT_Fans1_PWM_active;
 800d080:	4b07      	ldr	r3, [pc, #28]	; (800d0a0 <IOPort_ini+0xf8>)
 800d082:	4a22      	ldr	r2, [pc, #136]	; (800d10c <IOPort_ini+0x164>)
 800d084:	66da      	str	r2, [r3, #108]	; 0x6c
	IOportData.Fans2_PWM_active = &VCU_DW.VAR_OUT_Fans2_PWM_active;
 800d086:	4b06      	ldr	r3, [pc, #24]	; (800d0a0 <IOPort_ini+0xf8>)
 800d088:	4a21      	ldr	r2, [pc, #132]	; (800d110 <IOPort_ini+0x168>)
 800d08a:	671a      	str	r2, [r3, #112]	; 0x70

	output_pins = 0;
 800d08c:	4b21      	ldr	r3, [pc, #132]	; (800d114 <IOPort_ini+0x16c>)
 800d08e:	2200      	movs	r2, #0
 800d090:	601a      	str	r2, [r3, #0]
	busio_read = 0;
 800d092:	4b21      	ldr	r3, [pc, #132]	; (800d118 <IOPort_ini+0x170>)
 800d094:	2200      	movs	r2, #0
 800d096:	801a      	strh	r2, [r3, #0]
}
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr
 800d0a0:	200012c0 	.word	0x200012c0
 800d0a4:	20001090 	.word	0x20001090
 800d0a8:	20001098 	.word	0x20001098
 800d0ac:	200010b8 	.word	0x200010b8
 800d0b0:	200010c0 	.word	0x200010c0
 800d0b4:	200010c8 	.word	0x200010c8
 800d0b8:	200010d0 	.word	0x200010d0
 800d0bc:	200010d8 	.word	0x200010d8
 800d0c0:	200010e0 	.word	0x200010e0
 800d0c4:	200010e8 	.word	0x200010e8
 800d0c8:	200010a0 	.word	0x200010a0
 800d0cc:	200010a8 	.word	0x200010a8
 800d0d0:	200010b0 	.word	0x200010b0
 800d0d4:	20001088 	.word	0x20001088
 800d0d8:	20001268 	.word	0x20001268
 800d0dc:	20001258 	.word	0x20001258
 800d0e0:	20001278 	.word	0x20001278
 800d0e4:	20001248 	.word	0x20001248
 800d0e8:	2000119e 	.word	0x2000119e
 800d0ec:	2000119f 	.word	0x2000119f
 800d0f0:	200011a1 	.word	0x200011a1
 800d0f4:	200011a2 	.word	0x200011a2
 800d0f8:	200011a3 	.word	0x200011a3
 800d0fc:	2000110c 	.word	0x2000110c
 800d100:	2000110e 	.word	0x2000110e
 800d104:	200011a4 	.word	0x200011a4
 800d108:	20001110 	.word	0x20001110
 800d10c:	20001112 	.word	0x20001112
 800d110:	2000110a 	.word	0x2000110a
 800d114:	200012b8 	.word	0x200012b8
 800d118:	200012bc 	.word	0x200012bc

0800d11c <IOPort_setDOUTS>:

void IOPort_setDOUTS()
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	af00      	add	r7, sp, #0
	if(canData.ManualControl_Active) //set manual values if controlled by CANoe
 800d120:	4b14      	ldr	r3, [pc, #80]	; (800d174 <IOPort_setDOUTS+0x58>)
 800d122:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <IOPort_setDOUTS+0x12>
	{
		ManualControl_setDOUTS();
 800d12a:	f000 fad7 	bl	800d6dc <ManualControl_setDOUTS>
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
 800d12e:	4b12      	ldr	r3, [pc, #72]	; (800d178 <IOPort_setDOUTS+0x5c>)
 800d130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	461a      	mov	r2, r3
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
 800d136:	4b10      	ldr	r3, [pc, #64]	; (800d178 <IOPort_setDOUTS+0x5c>)
 800d138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	005b      	lsls	r3, r3, #1
	if(canData.ManualControl_Active) //set manual values if controlled by CANoe
	{
		ManualControl_setDOUTS();
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
 800d13e:	431a      	orrs	r2, r3
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
					(*IOportData.Ignition_Cut << 2) |
 800d140:	4b0d      	ldr	r3, [pc, #52]	; (800d178 <IOPort_setDOUTS+0x5c>)
 800d142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	009b      	lsls	r3, r3, #2
	{
		ManualControl_setDOUTS();
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
 800d148:	431a      	orrs	r2, r3
					(*IOportData.Ignition_Cut << 2) |
					(*IOportData.VOVG_IN << 3) |
 800d14a:	4b0b      	ldr	r3, [pc, #44]	; (800d178 <IOPort_setDOUTS+0x5c>)
 800d14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	00db      	lsls	r3, r3, #3
		ManualControl_setDOUTS();
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
					(*IOportData.Ignition_Cut << 2) |
 800d152:	431a      	orrs	r2, r3
					(*IOportData.VOVG_IN << 3) |
					(*IOportData.VOVG_OUT << 4);
 800d154:	4b08      	ldr	r3, [pc, #32]	; (800d178 <IOPort_setDOUTS+0x5c>)
 800d156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	011b      	lsls	r3, r3, #4
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
					(*IOportData.Ignition_Cut << 2) |
					(*IOportData.VOVG_IN << 3) |
 800d15c:	4313      	orrs	r3, r2
	if(canData.ManualControl_Active) //set manual values if controlled by CANoe
	{
		ManualControl_setDOUTS();
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
 800d15e:	4a07      	ldr	r2, [pc, #28]	; (800d17c <IOPort_setDOUTS+0x60>)
 800d160:	6013      	str	r3, [r2, #0]
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
					(*IOportData.Ignition_Cut << 2) |
					(*IOportData.VOVG_IN << 3) |
					(*IOportData.VOVG_OUT << 4);

	  BUS_IO_Write(&BUS_IO, (uint8_t) output_pins);
 800d162:	4b06      	ldr	r3, [pc, #24]	; (800d17c <IOPort_setDOUTS+0x60>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	b2db      	uxtb	r3, r3
 800d168:	b29b      	uxth	r3, r3
 800d16a:	4805      	ldr	r0, [pc, #20]	; (800d180 <IOPort_setDOUTS+0x64>)
 800d16c:	4619      	mov	r1, r3
 800d16e:	f7fe f9d7 	bl	800b520 <BUS_IO_Write>
}
 800d172:	bd80      	pop	{r7, pc}
 800d174:	20001338 	.word	0x20001338
 800d178:	200012c0 	.word	0x200012c0
 800d17c:	200012b8 	.word	0x200012b8
 800d180:	20000470 	.word	0x20000470

0800d184 <IOPort_readDINS>:

void IOPort_readDINS()
{
 800d184:	b598      	push	{r3, r4, r7, lr}
 800d186:	af00      	add	r7, sp, #0
	busio_read = BUS_IO_Read(&BUS_IO_Input);
 800d188:	4814      	ldr	r0, [pc, #80]	; (800d1dc <IOPort_readDINS+0x58>)
 800d18a:	f7fe f99b 	bl	800b4c4 <BUS_IO_Read>
 800d18e:	4603      	mov	r3, r0
 800d190:	461a      	mov	r2, r3
 800d192:	4b13      	ldr	r3, [pc, #76]	; (800d1e0 <IOPort_readDINS+0x5c>)
 800d194:	801a      	strh	r2, [r3, #0]
	*IOportData.Fans_dash_bit = checkRangePlausi(getbits(busio_read, 1, 1),ERR_FANS_DASH_BIT);
 800d196:	4b13      	ldr	r3, [pc, #76]	; (800d1e4 <IOPort_readDINS+0x60>)
 800d198:	681c      	ldr	r4, [r3, #0]
 800d19a:	4b11      	ldr	r3, [pc, #68]	; (800d1e0 <IOPort_readDINS+0x5c>)
 800d19c:	881b      	ldrh	r3, [r3, #0]
 800d19e:	4618      	mov	r0, r3
 800d1a0:	2101      	movs	r1, #1
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f000 ff5e 	bl	800e064 <getbits>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	2101      	movs	r1, #1
 800d1ae:	f7ff fd57 	bl	800cc60 <checkRangePlausi>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	7023      	strb	r3, [r4, #0]
	*IOportData.LC_dash_bit = checkRangePlausi(getbits(busio_read, 0, 1),ERR_LC_DASH_BIT);
 800d1b8:	4b0a      	ldr	r3, [pc, #40]	; (800d1e4 <IOPort_readDINS+0x60>)
 800d1ba:	6a1c      	ldr	r4, [r3, #32]
 800d1bc:	4b08      	ldr	r3, [pc, #32]	; (800d1e0 <IOPort_readDINS+0x5c>)
 800d1be:	881b      	ldrh	r3, [r3, #0]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	2100      	movs	r1, #0
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	f000 ff4d 	bl	800e064 <getbits>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	2105      	movs	r1, #5
 800d1d0:	f7ff fd46 	bl	800cc60 <checkRangePlausi>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	7023      	strb	r3, [r4, #0]
}
 800d1da:	bd98      	pop	{r3, r4, r7, pc}
 800d1dc:	20000484 	.word	0x20000484
 800d1e0:	200012bc 	.word	0x200012bc
 800d1e4:	200012c0 	.word	0x200012c0

0800d1e8 <IOPort_setPWMOUTS>:

void IOPort_setPWMOUTS()
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	af00      	add	r7, sp, #0
	if(canData.ManualControl_Active) //set manual values if controlled by CANoe
 800d1ec:	4b3a      	ldr	r3, [pc, #232]	; (800d2d8 <IOPort_setPWMOUTS+0xf0>)
 800d1ee:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d001      	beq.n	800d1fa <IOPort_setPWMOUTS+0x12>
	{
		ManualControl_setPWMOUTS();
 800d1f6:	f000 fab3 	bl	800d760 <ManualControl_setPWMOUTS>
	}
	//set calculated values if controlled by VCU
	//setMHJ9Freq();
	PWM_SetDutyCycle(&PWM_MHJ9_IN, (float)*IOportData.MHJ9_IN/65536*10000);//100% = 10000, var_max = 65536
 800d1fa:	4b38      	ldr	r3, [pc, #224]	; (800d2dc <IOPort_setPWMOUTS+0xf4>)
 800d1fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d1fe:	881b      	ldrh	r3, [r3, #0]
 800d200:	ee07 3a90 	vmov	s15, r3
 800d204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d208:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800d2e0 <IOPort_setPWMOUTS+0xf8>
 800d20c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d210:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d2e4 <IOPort_setPWMOUTS+0xfc>
 800d214:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d21c:	4832      	ldr	r0, [pc, #200]	; (800d2e8 <IOPort_setPWMOUTS+0x100>)
 800d21e:	ee17 1a90 	vmov	r1, s15
 800d222:	f7fa ff73 	bl	800810c <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_MHJ9_OUT, (float)*IOportData.MHJ9_OUT/65536*10000);
 800d226:	4b2d      	ldr	r3, [pc, #180]	; (800d2dc <IOPort_setPWMOUTS+0xf4>)
 800d228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d22a:	881b      	ldrh	r3, [r3, #0]
 800d22c:	ee07 3a90 	vmov	s15, r3
 800d230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d234:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d2e0 <IOPort_setPWMOUTS+0xf8>
 800d238:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d23c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800d2e4 <IOPort_setPWMOUTS+0xfc>
 800d240:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d248:	4828      	ldr	r0, [pc, #160]	; (800d2ec <IOPort_setPWMOUTS+0x104>)
 800d24a:	ee17 1a90 	vmov	r1, s15
 800d24e:	f7fa ff5d 	bl	800810c <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_Waterpump, (float)*IOportData.Waterpump_PWM_active/65536*10000);
 800d252:	4b22      	ldr	r3, [pc, #136]	; (800d2dc <IOPort_setPWMOUTS+0xf4>)
 800d254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d256:	881b      	ldrh	r3, [r3, #0]
 800d258:	ee07 3a90 	vmov	s15, r3
 800d25c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d260:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d2e0 <IOPort_setPWMOUTS+0xf8>
 800d264:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d268:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800d2e4 <IOPort_setPWMOUTS+0xfc>
 800d26c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d274:	481e      	ldr	r0, [pc, #120]	; (800d2f0 <IOPort_setPWMOUTS+0x108>)
 800d276:	ee17 1a90 	vmov	r1, s15
 800d27a:	f7fa ff47 	bl	800810c <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_Fans1, (float)*IOportData.Fans1_PWM_active/65536*10000);
 800d27e:	4b17      	ldr	r3, [pc, #92]	; (800d2dc <IOPort_setPWMOUTS+0xf4>)
 800d280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d282:	881b      	ldrh	r3, [r3, #0]
 800d284:	ee07 3a90 	vmov	s15, r3
 800d288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d28c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800d2e0 <IOPort_setPWMOUTS+0xf8>
 800d290:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d294:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800d2e4 <IOPort_setPWMOUTS+0xfc>
 800d298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d29c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2a0:	4814      	ldr	r0, [pc, #80]	; (800d2f4 <IOPort_setPWMOUTS+0x10c>)
 800d2a2:	ee17 1a90 	vmov	r1, s15
 800d2a6:	f7fa ff31 	bl	800810c <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_Fans2, (float)*IOportData.Fans2_PWM_active/65536*10000);
 800d2aa:	4b0c      	ldr	r3, [pc, #48]	; (800d2dc <IOPort_setPWMOUTS+0xf4>)
 800d2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2ae:	881b      	ldrh	r3, [r3, #0]
 800d2b0:	ee07 3a90 	vmov	s15, r3
 800d2b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2b8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800d2e0 <IOPort_setPWMOUTS+0xf8>
 800d2bc:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d2c0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800d2e4 <IOPort_setPWMOUTS+0xfc>
 800d2c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d2c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2cc:	480a      	ldr	r0, [pc, #40]	; (800d2f8 <IOPort_setPWMOUTS+0x110>)
 800d2ce:	ee17 1a90 	vmov	r1, s15
 800d2d2:	f7fa ff1b 	bl	800810c <PWM_SetDutyCycle>
	//PWM_SetFreq(&PWM_Fans1, 1000);//TEST
	//PWM_SetDutyCycle(&PWM_Fans1, 5000);//TEST
}
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	20001338 	.word	0x20001338
 800d2dc:	200012c0 	.word	0x200012c0
 800d2e0:	47800000 	.word	0x47800000
 800d2e4:	461c4000 	.word	0x461c4000
 800d2e8:	20000014 	.word	0x20000014
 800d2ec:	20000048 	.word	0x20000048
 800d2f0:	2000007c 	.word	0x2000007c
 800d2f4:	200000b0 	.word	0x200000b0
 800d2f8:	200000e4 	.word	0x200000e4
 800d2fc:	00000000 	.word	0x00000000

0800d300 <IOPort_readAINS>:

void IOPort_readAINS()
{
 800d300:	b598      	push	{r3, r4, r7, lr}
 800d302:	af00      	add	r7, sp, #0
	*IOportData.x_clutch_STW = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A)/4095.0*5*1000; //5V = 4095
 800d304:	4bd4      	ldr	r3, [pc, #848]	; (800d658 <IOPort_readAINS+0x358>)
 800d306:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800d308:	48d4      	ldr	r0, [pc, #848]	; (800d65c <IOPort_readAINS+0x35c>)
 800d30a:	f7fe fae9 	bl	800b8e0 <ADC_MEASUREMENT_GetResult>
 800d30e:	4603      	mov	r3, r0
 800d310:	4618      	mov	r0, r3
 800d312:	f001 faf3 	bl	800e8fc <__aeabi_i2d>
 800d316:	4602      	mov	r2, r0
 800d318:	460b      	mov	r3, r1
 800d31a:	4610      	mov	r0, r2
 800d31c:	4619      	mov	r1, r3
 800d31e:	a3c8      	add	r3, pc, #800	; (adr r3, 800d640 <IOPort_readAINS+0x340>)
 800d320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d324:	f001 fc7a 	bl	800ec1c <__aeabi_ddiv>
 800d328:	4602      	mov	r2, r0
 800d32a:	460b      	mov	r3, r1
 800d32c:	4610      	mov	r0, r2
 800d32e:	4619      	mov	r1, r3
 800d330:	f04f 0200 	mov.w	r2, #0
 800d334:	4bca      	ldr	r3, [pc, #808]	; (800d660 <IOPort_readAINS+0x360>)
 800d336:	f001 fb47 	bl	800e9c8 <__aeabi_dmul>
 800d33a:	4602      	mov	r2, r0
 800d33c:	460b      	mov	r3, r1
 800d33e:	4610      	mov	r0, r2
 800d340:	4619      	mov	r1, r3
 800d342:	f04f 0200 	mov.w	r2, #0
 800d346:	4bc7      	ldr	r3, [pc, #796]	; (800d664 <IOPort_readAINS+0x364>)
 800d348:	f001 fb3e 	bl	800e9c8 <__aeabi_dmul>
 800d34c:	4602      	mov	r2, r0
 800d34e:	460b      	mov	r3, r1
 800d350:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.U_Bat = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_B)/4095.0*14.8*1000;
 800d354:	4bc0      	ldr	r3, [pc, #768]	; (800d658 <IOPort_readAINS+0x358>)
 800d356:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800d358:	48c3      	ldr	r0, [pc, #780]	; (800d668 <IOPort_readAINS+0x368>)
 800d35a:	f7fe fac1 	bl	800b8e0 <ADC_MEASUREMENT_GetResult>
 800d35e:	4603      	mov	r3, r0
 800d360:	4618      	mov	r0, r3
 800d362:	f001 facb 	bl	800e8fc <__aeabi_i2d>
 800d366:	4602      	mov	r2, r0
 800d368:	460b      	mov	r3, r1
 800d36a:	4610      	mov	r0, r2
 800d36c:	4619      	mov	r1, r3
 800d36e:	a3b4      	add	r3, pc, #720	; (adr r3, 800d640 <IOPort_readAINS+0x340>)
 800d370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d374:	f001 fc52 	bl	800ec1c <__aeabi_ddiv>
 800d378:	4602      	mov	r2, r0
 800d37a:	460b      	mov	r3, r1
 800d37c:	4610      	mov	r0, r2
 800d37e:	4619      	mov	r1, r3
 800d380:	a3b1      	add	r3, pc, #708	; (adr r3, 800d648 <IOPort_readAINS+0x348>)
 800d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d386:	f001 fb1f 	bl	800e9c8 <__aeabi_dmul>
 800d38a:	4602      	mov	r2, r0
 800d38c:	460b      	mov	r3, r1
 800d38e:	4610      	mov	r0, r2
 800d390:	4619      	mov	r1, r3
 800d392:	f04f 0200 	mov.w	r2, #0
 800d396:	4bb3      	ldr	r3, [pc, #716]	; (800d664 <IOPort_readAINS+0x364>)
 800d398:	f001 fb16 	bl	800e9c8 <__aeabi_dmul>
 800d39c:	4602      	mov	r2, r0
 800d39e:	460b      	mov	r3, r1
 800d3a0:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.x_RH_F = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_C)/4095.0*12*1000;
 800d3a4:	4bac      	ldr	r3, [pc, #688]	; (800d658 <IOPort_readAINS+0x358>)
 800d3a6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d3a8:	48b0      	ldr	r0, [pc, #704]	; (800d66c <IOPort_readAINS+0x36c>)
 800d3aa:	f7fe fa99 	bl	800b8e0 <ADC_MEASUREMENT_GetResult>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f001 faa3 	bl	800e8fc <__aeabi_i2d>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	4610      	mov	r0, r2
 800d3bc:	4619      	mov	r1, r3
 800d3be:	a3a0      	add	r3, pc, #640	; (adr r3, 800d640 <IOPort_readAINS+0x340>)
 800d3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c4:	f001 fc2a 	bl	800ec1c <__aeabi_ddiv>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	4610      	mov	r0, r2
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	f04f 0200 	mov.w	r2, #0
 800d3d4:	4ba6      	ldr	r3, [pc, #664]	; (800d670 <IOPort_readAINS+0x370>)
 800d3d6:	f001 faf7 	bl	800e9c8 <__aeabi_dmul>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	460b      	mov	r3, r1
 800d3de:	4610      	mov	r0, r2
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	f04f 0200 	mov.w	r2, #0
 800d3e6:	4b9f      	ldr	r3, [pc, #636]	; (800d664 <IOPort_readAINS+0x364>)
 800d3e8:	f001 faee 	bl	800e9c8 <__aeabi_dmul>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.f_FR = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_D)/4095.0*5*1000;
 800d3f4:	4b98      	ldr	r3, [pc, #608]	; (800d658 <IOPort_readAINS+0x358>)
 800d3f6:	695c      	ldr	r4, [r3, #20]
 800d3f8:	489e      	ldr	r0, [pc, #632]	; (800d674 <IOPort_readAINS+0x374>)
 800d3fa:	f7fe fa71 	bl	800b8e0 <ADC_MEASUREMENT_GetResult>
 800d3fe:	4603      	mov	r3, r0
 800d400:	4618      	mov	r0, r3
 800d402:	f001 fa7b 	bl	800e8fc <__aeabi_i2d>
 800d406:	4602      	mov	r2, r0
 800d408:	460b      	mov	r3, r1
 800d40a:	4610      	mov	r0, r2
 800d40c:	4619      	mov	r1, r3
 800d40e:	a38c      	add	r3, pc, #560	; (adr r3, 800d640 <IOPort_readAINS+0x340>)
 800d410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d414:	f001 fc02 	bl	800ec1c <__aeabi_ddiv>
 800d418:	4602      	mov	r2, r0
 800d41a:	460b      	mov	r3, r1
 800d41c:	4610      	mov	r0, r2
 800d41e:	4619      	mov	r1, r3
 800d420:	f04f 0200 	mov.w	r2, #0
 800d424:	4b8e      	ldr	r3, [pc, #568]	; (800d660 <IOPort_readAINS+0x360>)
 800d426:	f001 facf 	bl	800e9c8 <__aeabi_dmul>
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	4610      	mov	r0, r2
 800d430:	4619      	mov	r1, r3
 800d432:	f04f 0200 	mov.w	r2, #0
 800d436:	4b8b      	ldr	r3, [pc, #556]	; (800d664 <IOPort_readAINS+0x364>)
 800d438:	f001 fac6 	bl	800e9c8 <__aeabi_dmul>
 800d43c:	4602      	mov	r2, r0
 800d43e:	460b      	mov	r3, r1
 800d440:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.f_FL = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_E)/4095.0*5*1000;
 800d444:	4b84      	ldr	r3, [pc, #528]	; (800d658 <IOPort_readAINS+0x358>)
 800d446:	691c      	ldr	r4, [r3, #16]
 800d448:	488b      	ldr	r0, [pc, #556]	; (800d678 <IOPort_readAINS+0x378>)
 800d44a:	f7fe fa49 	bl	800b8e0 <ADC_MEASUREMENT_GetResult>
 800d44e:	4603      	mov	r3, r0
 800d450:	4618      	mov	r0, r3
 800d452:	f001 fa53 	bl	800e8fc <__aeabi_i2d>
 800d456:	4602      	mov	r2, r0
 800d458:	460b      	mov	r3, r1
 800d45a:	4610      	mov	r0, r2
 800d45c:	4619      	mov	r1, r3
 800d45e:	a378      	add	r3, pc, #480	; (adr r3, 800d640 <IOPort_readAINS+0x340>)
 800d460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d464:	f001 fbda 	bl	800ec1c <__aeabi_ddiv>
 800d468:	4602      	mov	r2, r0
 800d46a:	460b      	mov	r3, r1
 800d46c:	4610      	mov	r0, r2
 800d46e:	4619      	mov	r1, r3
 800d470:	f04f 0200 	mov.w	r2, #0
 800d474:	4b7a      	ldr	r3, [pc, #488]	; (800d660 <IOPort_readAINS+0x360>)
 800d476:	f001 faa7 	bl	800e9c8 <__aeabi_dmul>
 800d47a:	4602      	mov	r2, r0
 800d47c:	460b      	mov	r3, r1
 800d47e:	4610      	mov	r0, r2
 800d480:	4619      	mov	r1, r3
 800d482:	f04f 0200 	mov.w	r2, #0
 800d486:	4b77      	ldr	r3, [pc, #476]	; (800d664 <IOPort_readAINS+0x364>)
 800d488:	f001 fa9e 	bl	800e9c8 <__aeabi_dmul>
 800d48c:	4602      	mov	r2, r0
 800d48e:	460b      	mov	r3, r1
 800d490:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.x_clutch = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_F)/4095.0*5*1000;
 800d494:	4b70      	ldr	r3, [pc, #448]	; (800d658 <IOPort_readAINS+0x358>)
 800d496:	68dc      	ldr	r4, [r3, #12]
 800d498:	4878      	ldr	r0, [pc, #480]	; (800d67c <IOPort_readAINS+0x37c>)
 800d49a:	f7fe fa21 	bl	800b8e0 <ADC_MEASUREMENT_GetResult>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f001 fa2b 	bl	800e8fc <__aeabi_i2d>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	4610      	mov	r0, r2
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	a364      	add	r3, pc, #400	; (adr r3, 800d640 <IOPort_readAINS+0x340>)
 800d4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b4:	f001 fbb2 	bl	800ec1c <__aeabi_ddiv>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	4610      	mov	r0, r2
 800d4be:	4619      	mov	r1, r3
 800d4c0:	f04f 0200 	mov.w	r2, #0
 800d4c4:	4b66      	ldr	r3, [pc, #408]	; (800d660 <IOPort_readAINS+0x360>)
 800d4c6:	f001 fa7f 	bl	800e9c8 <__aeabi_dmul>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	4610      	mov	r0, r2
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	f04f 0200 	mov.w	r2, #0
 800d4d6:	4b63      	ldr	r3, [pc, #396]	; (800d664 <IOPort_readAINS+0x364>)
 800d4d8:	f001 fa76 	bl	800e9c8 <__aeabi_dmul>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	460b      	mov	r3, r1
 800d4e0:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.p_brake_R = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_G)/4095.0*5*1000;
 800d4e4:	4b5c      	ldr	r3, [pc, #368]	; (800d658 <IOPort_readAINS+0x358>)
 800d4e6:	685c      	ldr	r4, [r3, #4]
 800d4e8:	4865      	ldr	r0, [pc, #404]	; (800d680 <IOPort_readAINS+0x380>)
 800d4ea:	f7fe f9f9 	bl	800b8e0 <ADC_MEASUREMENT_GetResult>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f001 fa03 	bl	800e8fc <__aeabi_i2d>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	4610      	mov	r0, r2
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	a350      	add	r3, pc, #320	; (adr r3, 800d640 <IOPort_readAINS+0x340>)
 800d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d504:	f001 fb8a 	bl	800ec1c <__aeabi_ddiv>
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	4610      	mov	r0, r2
 800d50e:	4619      	mov	r1, r3
 800d510:	f04f 0200 	mov.w	r2, #0
 800d514:	4b52      	ldr	r3, [pc, #328]	; (800d660 <IOPort_readAINS+0x360>)
 800d516:	f001 fa57 	bl	800e9c8 <__aeabi_dmul>
 800d51a:	4602      	mov	r2, r0
 800d51c:	460b      	mov	r3, r1
 800d51e:	4610      	mov	r0, r2
 800d520:	4619      	mov	r1, r3
 800d522:	f04f 0200 	mov.w	r2, #0
 800d526:	4b4f      	ldr	r3, [pc, #316]	; (800d664 <IOPort_readAINS+0x364>)
 800d528:	f001 fa4e 	bl	800e9c8 <__aeabi_dmul>
 800d52c:	4602      	mov	r2, r0
 800d52e:	460b      	mov	r3, r1
 800d530:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.boardTemp = NTC_Calc(ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_H));
 800d534:	4b48      	ldr	r3, [pc, #288]	; (800d658 <IOPort_readAINS+0x358>)
 800d536:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800d538:	4852      	ldr	r0, [pc, #328]	; (800d684 <IOPort_readAINS+0x384>)
 800d53a:	f7fe f9d1 	bl	800b8e0 <ADC_MEASUREMENT_GetResult>
 800d53e:	4603      	mov	r3, r0
 800d540:	4618      	mov	r0, r3
 800d542:	f001 f9cb 	bl	800e8dc <__aeabi_ui2d>
 800d546:	4602      	mov	r2, r0
 800d548:	460b      	mov	r3, r1
 800d54a:	4610      	mov	r0, r2
 800d54c:	4619      	mov	r1, r3
 800d54e:	f000 f9ab 	bl	800d8a8 <NTC_Calc>
 800d552:	4602      	mov	r2, r0
 800d554:	460b      	mov	r3, r1
 800d556:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.TR1_VSense_WP = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_I)/4095.0*3.3*1000;
 800d55a:	4b3f      	ldr	r3, [pc, #252]	; (800d658 <IOPort_readAINS+0x358>)
 800d55c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800d55e:	484a      	ldr	r0, [pc, #296]	; (800d688 <IOPort_readAINS+0x388>)
 800d560:	f7fe f9be 	bl	800b8e0 <ADC_MEASUREMENT_GetResult>
 800d564:	4603      	mov	r3, r0
 800d566:	4618      	mov	r0, r3
 800d568:	f001 f9c8 	bl	800e8fc <__aeabi_i2d>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4610      	mov	r0, r2
 800d572:	4619      	mov	r1, r3
 800d574:	a332      	add	r3, pc, #200	; (adr r3, 800d640 <IOPort_readAINS+0x340>)
 800d576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57a:	f001 fb4f 	bl	800ec1c <__aeabi_ddiv>
 800d57e:	4602      	mov	r2, r0
 800d580:	460b      	mov	r3, r1
 800d582:	4610      	mov	r0, r2
 800d584:	4619      	mov	r1, r3
 800d586:	a332      	add	r3, pc, #200	; (adr r3, 800d650 <IOPort_readAINS+0x350>)
 800d588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58c:	f001 fa1c 	bl	800e9c8 <__aeabi_dmul>
 800d590:	4602      	mov	r2, r0
 800d592:	460b      	mov	r3, r1
 800d594:	4610      	mov	r0, r2
 800d596:	4619      	mov	r1, r3
 800d598:	f04f 0200 	mov.w	r2, #0
 800d59c:	4b31      	ldr	r3, [pc, #196]	; (800d664 <IOPort_readAINS+0x364>)
 800d59e:	f001 fa13 	bl	800e9c8 <__aeabi_dmul>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.TR2_VSense_FAN1 = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_J)/4095.0*3.3*1000;
 800d5aa:	4b2b      	ldr	r3, [pc, #172]	; (800d658 <IOPort_readAINS+0x358>)
 800d5ac:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800d5ae:	4837      	ldr	r0, [pc, #220]	; (800d68c <IOPort_readAINS+0x38c>)
 800d5b0:	f7fe f996 	bl	800b8e0 <ADC_MEASUREMENT_GetResult>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f001 f9a0 	bl	800e8fc <__aeabi_i2d>
 800d5bc:	4602      	mov	r2, r0
 800d5be:	460b      	mov	r3, r1
 800d5c0:	4610      	mov	r0, r2
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	a31e      	add	r3, pc, #120	; (adr r3, 800d640 <IOPort_readAINS+0x340>)
 800d5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ca:	f001 fb27 	bl	800ec1c <__aeabi_ddiv>
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	4610      	mov	r0, r2
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	a31e      	add	r3, pc, #120	; (adr r3, 800d650 <IOPort_readAINS+0x350>)
 800d5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5dc:	f001 f9f4 	bl	800e9c8 <__aeabi_dmul>
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	460b      	mov	r3, r1
 800d5e4:	4610      	mov	r0, r2
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	f04f 0200 	mov.w	r2, #0
 800d5ec:	4b1d      	ldr	r3, [pc, #116]	; (800d664 <IOPort_readAINS+0x364>)
 800d5ee:	f001 f9eb 	bl	800e9c8 <__aeabi_dmul>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.TR3_VSense_FAN2 = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_K)/4095.0*3.3*1000;
 800d5fa:	4b17      	ldr	r3, [pc, #92]	; (800d658 <IOPort_readAINS+0x358>)
 800d5fc:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800d5fe:	4824      	ldr	r0, [pc, #144]	; (800d690 <IOPort_readAINS+0x390>)
 800d600:	f7fe f96e 	bl	800b8e0 <ADC_MEASUREMENT_GetResult>
 800d604:	4603      	mov	r3, r0
 800d606:	4618      	mov	r0, r3
 800d608:	f001 f978 	bl	800e8fc <__aeabi_i2d>
 800d60c:	4602      	mov	r2, r0
 800d60e:	460b      	mov	r3, r1
 800d610:	4610      	mov	r0, r2
 800d612:	4619      	mov	r1, r3
 800d614:	a30a      	add	r3, pc, #40	; (adr r3, 800d640 <IOPort_readAINS+0x340>)
 800d616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d61a:	f001 faff 	bl	800ec1c <__aeabi_ddiv>
 800d61e:	4602      	mov	r2, r0
 800d620:	460b      	mov	r3, r1
 800d622:	4610      	mov	r0, r2
 800d624:	4619      	mov	r1, r3
 800d626:	a30a      	add	r3, pc, #40	; (adr r3, 800d650 <IOPort_readAINS+0x350>)
 800d628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62c:	f001 f9cc 	bl	800e9c8 <__aeabi_dmul>
 800d630:	4602      	mov	r2, r0
 800d632:	460b      	mov	r3, r1
 800d634:	4610      	mov	r0, r2
 800d636:	4619      	mov	r1, r3
 800d638:	f04f 0200 	mov.w	r2, #0
 800d63c:	e02a      	b.n	800d694 <IOPort_readAINS+0x394>
 800d63e:	bf00      	nop
 800d640:	00000000 	.word	0x00000000
 800d644:	40affe00 	.word	0x40affe00
 800d648:	9999999a 	.word	0x9999999a
 800d64c:	402d9999 	.word	0x402d9999
 800d650:	66666666 	.word	0x66666666
 800d654:	400a6666 	.word	0x400a6666
 800d658:	200012c0 	.word	0x200012c0
 800d65c:	200004a4 	.word	0x200004a4
 800d660:	40140000 	.word	0x40140000
 800d664:	408f4000 	.word	0x408f4000
 800d668:	200004c4 	.word	0x200004c4
 800d66c:	200004e4 	.word	0x200004e4
 800d670:	40280000 	.word	0x40280000
 800d674:	20000504 	.word	0x20000504
 800d678:	20000524 	.word	0x20000524
 800d67c:	20000544 	.word	0x20000544
 800d680:	20000564 	.word	0x20000564
 800d684:	20000584 	.word	0x20000584
 800d688:	200005a4 	.word	0x200005a4
 800d68c:	200005c4 	.word	0x200005c4
 800d690:	200005e4 	.word	0x200005e4
 800d694:	4b03      	ldr	r3, [pc, #12]	; (800d6a4 <IOPort_readAINS+0x3a4>)
 800d696:	f001 f997 	bl	800e9c8 <__aeabi_dmul>
 800d69a:	4602      	mov	r2, r0
 800d69c:	460b      	mov	r3, r1
 800d69e:	e9c4 2300 	strd	r2, r3, [r4]
	//int test2 = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_H);
  }
 800d6a2:	bd98      	pop	{r3, r4, r7, pc}
 800d6a4:	408f4000 	.word	0x408f4000

0800d6a8 <ERU0_3_IRQHandler>:

void Interrupt_Shifting(void)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	af00      	add	r7, sp, #0
	shiftUpInterrupt = DIGITAL_IO_GetInput(&Signal_UpShift);
 800d6ac:	4807      	ldr	r0, [pc, #28]	; (800d6cc <ERU0_3_IRQHandler+0x24>)
 800d6ae:	f7ff fc69 	bl	800cf84 <DIGITAL_IO_GetInput>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	b2da      	uxtb	r2, r3
 800d6b6:	4b06      	ldr	r3, [pc, #24]	; (800d6d0 <ERU0_3_IRQHandler+0x28>)
 800d6b8:	701a      	strb	r2, [r3, #0]
	shiftDownInterrupt = DIGITAL_IO_GetInput(&Signal_DownShift);
 800d6ba:	4806      	ldr	r0, [pc, #24]	; (800d6d4 <ERU0_3_IRQHandler+0x2c>)
 800d6bc:	f7ff fc62 	bl	800cf84 <DIGITAL_IO_GetInput>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	b2da      	uxtb	r2, r3
 800d6c4:	4b04      	ldr	r3, [pc, #16]	; (800d6d8 <ERU0_3_IRQHandler+0x30>)
 800d6c6:	701a      	strb	r2, [r3, #0]
}
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	0800f5ec 	.word	0x0800f5ec
 800d6d0:	20001270 	.word	0x20001270
 800d6d4:	0800f5d8 	.word	0x0800f5d8
 800d6d8:	20001250 	.word	0x20001250

0800d6dc <ManualControl_setDOUTS>:

void ManualControl_setDOUTS()
{
 800d6dc:	b480      	push	{r7}
 800d6de:	af00      	add	r7, sp, #0
	if(canData.ManConOn_VOVGShiftUp)
 800d6e0:	4b1d      	ldr	r3, [pc, #116]	; (800d758 <ManualControl_setDOUTS+0x7c>)
 800d6e2:	f893 315f 	ldrb.w	r3, [r3, #351]	; 0x15f
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d005      	beq.n	800d6f6 <ManualControl_setDOUTS+0x1a>
	  *IOportData.VOVG_ShiftUp = canData.ManConVar_VOVGShiftUp;
 800d6ea:	4b1c      	ldr	r3, [pc, #112]	; (800d75c <ManualControl_setDOUTS+0x80>)
 800d6ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6ee:	4a1a      	ldr	r2, [pc, #104]	; (800d758 <ManualControl_setDOUTS+0x7c>)
 800d6f0:	f892 2169 	ldrb.w	r2, [r2, #361]	; 0x169
 800d6f4:	701a      	strb	r2, [r3, #0]

	if(canData.ManConOn_VOVGShiftDown)
 800d6f6:	4b18      	ldr	r3, [pc, #96]	; (800d758 <ManualControl_setDOUTS+0x7c>)
 800d6f8:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d005      	beq.n	800d70c <ManualControl_setDOUTS+0x30>
	  *IOportData.VOVG_ShiftDown = canData.ManConVar_VOVGShiftDown;
 800d700:	4b16      	ldr	r3, [pc, #88]	; (800d75c <ManualControl_setDOUTS+0x80>)
 800d702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d704:	4a14      	ldr	r2, [pc, #80]	; (800d758 <ManualControl_setDOUTS+0x7c>)
 800d706:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 800d70a:	701a      	strb	r2, [r3, #0]

	if(canData.ManConOn_IgnCut)
 800d70c:	4b12      	ldr	r3, [pc, #72]	; (800d758 <ManualControl_setDOUTS+0x7c>)
 800d70e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800d712:	2b00      	cmp	r3, #0
 800d714:	d005      	beq.n	800d722 <ManualControl_setDOUTS+0x46>
	  *IOportData.Ignition_Cut = canData.ManConVar_IgnCut;
 800d716:	4b11      	ldr	r3, [pc, #68]	; (800d75c <ManualControl_setDOUTS+0x80>)
 800d718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d71a:	4a0f      	ldr	r2, [pc, #60]	; (800d758 <ManualControl_setDOUTS+0x7c>)
 800d71c:	f892 216a 	ldrb.w	r2, [r2, #362]	; 0x16a
 800d720:	701a      	strb	r2, [r3, #0]

	if(canData.ManConOn_VOVG_IN)
 800d722:	4b0d      	ldr	r3, [pc, #52]	; (800d758 <ManualControl_setDOUTS+0x7c>)
 800d724:	f893 3161 	ldrb.w	r3, [r3, #353]	; 0x161
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d005      	beq.n	800d738 <ManualControl_setDOUTS+0x5c>
	  *IOportData.VOVG_IN = canData.ManConVar_VOVG_IN;
 800d72c:	4b0b      	ldr	r3, [pc, #44]	; (800d75c <ManualControl_setDOUTS+0x80>)
 800d72e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d730:	4a09      	ldr	r2, [pc, #36]	; (800d758 <ManualControl_setDOUTS+0x7c>)
 800d732:	f892 216b 	ldrb.w	r2, [r2, #363]	; 0x16b
 800d736:	701a      	strb	r2, [r3, #0]

	if(canData.ManConOn_VOVG_OUT)
 800d738:	4b07      	ldr	r3, [pc, #28]	; (800d758 <ManualControl_setDOUTS+0x7c>)
 800d73a:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d005      	beq.n	800d74e <ManualControl_setDOUTS+0x72>
	  *IOportData.VOVG_OUT = canData.ManConVar_VOVG_OUT;
 800d742:	4b06      	ldr	r3, [pc, #24]	; (800d75c <ManualControl_setDOUTS+0x80>)
 800d744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d746:	4a04      	ldr	r2, [pc, #16]	; (800d758 <ManualControl_setDOUTS+0x7c>)
 800d748:	f892 216c 	ldrb.w	r2, [r2, #364]	; 0x16c
 800d74c:	701a      	strb	r2, [r3, #0]
}
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop
 800d758:	20001338 	.word	0x20001338
 800d75c:	200012c0 	.word	0x200012c0

0800d760 <ManualControl_setPWMOUTS>:

void ManualControl_setPWMOUTS()
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
	if(canData.ManConOn_MHJ9_IN)
 800d766:	4b4b      	ldr	r3, [pc, #300]	; (800d894 <ManualControl_setPWMOUTS+0x134>)
 800d768:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d017      	beq.n	800d7a0 <ManualControl_setPWMOUTS+0x40>
	  *IOportData.MHJ9_IN = (float)canData.ManConVar_MHJ9_IN/100*65536;
 800d770:	4b49      	ldr	r3, [pc, #292]	; (800d898 <ManualControl_setPWMOUTS+0x138>)
 800d772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d774:	4a47      	ldr	r2, [pc, #284]	; (800d894 <ManualControl_setPWMOUTS+0x134>)
 800d776:	f892 2163 	ldrb.w	r2, [r2, #355]	; 0x163
 800d77a:	ee07 2a90 	vmov	s15, r2
 800d77e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d782:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800d89c <ManualControl_setPWMOUTS+0x13c>
 800d786:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d78a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800d8a0 <ManualControl_setPWMOUTS+0x140>
 800d78e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d796:	edc7 7a01 	vstr	s15, [r7, #4]
 800d79a:	88ba      	ldrh	r2, [r7, #4]
 800d79c:	b292      	uxth	r2, r2
 800d79e:	801a      	strh	r2, [r3, #0]

	if(canData.ManConOn_MHJ9_OUT)
 800d7a0:	4b3c      	ldr	r3, [pc, #240]	; (800d894 <ManualControl_setPWMOUTS+0x134>)
 800d7a2:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d017      	beq.n	800d7da <ManualControl_setPWMOUTS+0x7a>
	  *IOportData.MHJ9_OUT = (float)canData.ManConVar_MHJ9_OUT/100*65536;
 800d7aa:	4b3b      	ldr	r3, [pc, #236]	; (800d898 <ManualControl_setPWMOUTS+0x138>)
 800d7ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7ae:	4a39      	ldr	r2, [pc, #228]	; (800d894 <ManualControl_setPWMOUTS+0x134>)
 800d7b0:	f892 2164 	ldrb.w	r2, [r2, #356]	; 0x164
 800d7b4:	ee07 2a90 	vmov	s15, r2
 800d7b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7bc:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800d89c <ManualControl_setPWMOUTS+0x13c>
 800d7c0:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d7c4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d8a0 <ManualControl_setPWMOUTS+0x140>
 800d7c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d7cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7d0:	edc7 7a01 	vstr	s15, [r7, #4]
 800d7d4:	88ba      	ldrh	r2, [r7, #4]
 800d7d6:	b292      	uxth	r2, r2
 800d7d8:	801a      	strh	r2, [r3, #0]

	if(canData.ManConOn_Waterpump)
 800d7da:	4b2e      	ldr	r3, [pc, #184]	; (800d894 <ManualControl_setPWMOUTS+0x134>)
 800d7dc:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d017      	beq.n	800d814 <ManualControl_setPWMOUTS+0xb4>
	  *IOportData.Waterpump_PWM_active = (float)canData.ManConVar_Waterpump/100*65536;
 800d7e4:	4b2c      	ldr	r3, [pc, #176]	; (800d898 <ManualControl_setPWMOUTS+0x138>)
 800d7e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7e8:	4a2a      	ldr	r2, [pc, #168]	; (800d894 <ManualControl_setPWMOUTS+0x134>)
 800d7ea:	f892 2165 	ldrb.w	r2, [r2, #357]	; 0x165
 800d7ee:	ee07 2a90 	vmov	s15, r2
 800d7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7f6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800d89c <ManualControl_setPWMOUTS+0x13c>
 800d7fa:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d7fe:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800d8a0 <ManualControl_setPWMOUTS+0x140>
 800d802:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d80a:	edc7 7a01 	vstr	s15, [r7, #4]
 800d80e:	88ba      	ldrh	r2, [r7, #4]
 800d810:	b292      	uxth	r2, r2
 800d812:	801a      	strh	r2, [r3, #0]

	if(canData.ManConOn_Fans1)
 800d814:	4b1f      	ldr	r3, [pc, #124]	; (800d894 <ManualControl_setPWMOUTS+0x134>)
 800d816:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d017      	beq.n	800d84e <ManualControl_setPWMOUTS+0xee>
	  *IOportData.Fans1_PWM_active = (float)canData.ManConVar_Fans1/100*65536;
 800d81e:	4b1e      	ldr	r3, [pc, #120]	; (800d898 <ManualControl_setPWMOUTS+0x138>)
 800d820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d822:	4a1c      	ldr	r2, [pc, #112]	; (800d894 <ManualControl_setPWMOUTS+0x134>)
 800d824:	f892 2166 	ldrb.w	r2, [r2, #358]	; 0x166
 800d828:	ee07 2a90 	vmov	s15, r2
 800d82c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d830:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800d89c <ManualControl_setPWMOUTS+0x13c>
 800d834:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d838:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800d8a0 <ManualControl_setPWMOUTS+0x140>
 800d83c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d844:	edc7 7a01 	vstr	s15, [r7, #4]
 800d848:	88ba      	ldrh	r2, [r7, #4]
 800d84a:	b292      	uxth	r2, r2
 800d84c:	801a      	strh	r2, [r3, #0]

	if(canData.ManConOn_Fans2)
 800d84e:	4b11      	ldr	r3, [pc, #68]	; (800d894 <ManualControl_setPWMOUTS+0x134>)
 800d850:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 800d854:	2b00      	cmp	r3, #0
 800d856:	d017      	beq.n	800d888 <ManualControl_setPWMOUTS+0x128>
	  *IOportData.Fans2_PWM_active = (float)canData.ManConVar_Fans2/100*65536;
 800d858:	4b0f      	ldr	r3, [pc, #60]	; (800d898 <ManualControl_setPWMOUTS+0x138>)
 800d85a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d85c:	4a0d      	ldr	r2, [pc, #52]	; (800d894 <ManualControl_setPWMOUTS+0x134>)
 800d85e:	f892 2167 	ldrb.w	r2, [r2, #359]	; 0x167
 800d862:	ee07 2a90 	vmov	s15, r2
 800d866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d86a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d89c <ManualControl_setPWMOUTS+0x13c>
 800d86e:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d872:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800d8a0 <ManualControl_setPWMOUTS+0x140>
 800d876:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d87a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d87e:	edc7 7a01 	vstr	s15, [r7, #4]
 800d882:	88ba      	ldrh	r2, [r7, #4]
 800d884:	b292      	uxth	r2, r2
 800d886:	801a      	strh	r2, [r3, #0]
}
 800d888:	370c      	adds	r7, #12
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
 800d892:	bf00      	nop
 800d894:	20001338 	.word	0x20001338
 800d898:	200012c0 	.word	0x200012c0
 800d89c:	42c80000 	.word	0x42c80000
 800d8a0:	47800000 	.word	0x47800000
 800d8a4:	00000000 	.word	0x00000000

0800d8a8 <NTC_Calc>:

double NTC_Calc(double Temp)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b098      	sub	sp, #96	; 0x60
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	e9c7 0100 	strd	r0, r1, [r7]
			int NTC_LUT_NB_POINT = 6;
 800d8b2:	2306      	movs	r3, #6
 800d8b4:	64bb      	str	r3, [r7, #72]	; 0x48
			int i;
			uint16_t Temp_Val;
			float x0,y0,x1,y1,a,b;
			uint32_t LUT_NTC_V[6]={0};
 800d8b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	601a      	str	r2, [r3, #0]
 800d8be:	3304      	adds	r3, #4
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	601a      	str	r2, [r3, #0]
 800d8c4:	3304      	adds	r3, #4
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	601a      	str	r2, [r3, #0]
 800d8ca:	3304      	adds	r3, #4
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	601a      	str	r2, [r3, #0]
 800d8d0:	3304      	adds	r3, #4
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	601a      	str	r2, [r3, #0]
 800d8d6:	3304      	adds	r3, #4
 800d8d8:	2200      	movs	r2, #0
 800d8da:	601a      	str	r2, [r3, #0]
 800d8dc:	3304      	adds	r3, #4
			float LUT_NTC[6]={0};
 800d8de:	f107 030c 	add.w	r3, r7, #12
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	601a      	str	r2, [r3, #0]
 800d8e6:	3304      	adds	r3, #4
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	601a      	str	r2, [r3, #0]
 800d8ec:	3304      	adds	r3, #4
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	601a      	str	r2, [r3, #0]
 800d8f2:	3304      	adds	r3, #4
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	601a      	str	r2, [r3, #0]
 800d8f8:	3304      	adds	r3, #4
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	601a      	str	r2, [r3, #0]
 800d8fe:	3304      	adds	r3, #4
 800d900:	2200      	movs	r2, #0
 800d902:	601a      	str	r2, [r3, #0]
 800d904:	3304      	adds	r3, #4

			LUT_NTC_V[0] = 140;
 800d906:	238c      	movs	r3, #140	; 0x8c
 800d908:	627b      	str	r3, [r7, #36]	; 0x24
			LUT_NTC_V[1] = 283;
 800d90a:	f240 131b 	movw	r3, #283	; 0x11b
 800d90e:	62bb      	str	r3, [r7, #40]	; 0x28
			LUT_NTC_V[2] = 602;
 800d910:	f240 235a 	movw	r3, #602	; 0x25a
 800d914:	62fb      	str	r3, [r7, #44]	; 0x2c
			LUT_NTC_V[3] = 1288;
 800d916:	f44f 63a1 	mov.w	r3, #1288	; 0x508
 800d91a:	633b      	str	r3, [r7, #48]	; 0x30
			LUT_NTC_V[4] = 2500;
 800d91c:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800d920:	637b      	str	r3, [r7, #52]	; 0x34
			LUT_NTC_V[5] = 3850;
 800d922:	f640 730a 	movw	r3, #3850	; 0xf0a
 800d926:	63bb      	str	r3, [r7, #56]	; 0x38

		    LUT_NTC[0] = 125;
 800d928:	4b77      	ldr	r3, [pc, #476]	; (800db08 <NTC_Calc+0x260>)
 800d92a:	60fb      	str	r3, [r7, #12]
			LUT_NTC[1] = 100;
 800d92c:	4b77      	ldr	r3, [pc, #476]	; (800db0c <NTC_Calc+0x264>)
 800d92e:	613b      	str	r3, [r7, #16]
			LUT_NTC[2] = 75;
 800d930:	4b77      	ldr	r3, [pc, #476]	; (800db10 <NTC_Calc+0x268>)
 800d932:	617b      	str	r3, [r7, #20]
			LUT_NTC[3] = 50;
 800d934:	4b77      	ldr	r3, [pc, #476]	; (800db14 <NTC_Calc+0x26c>)
 800d936:	61bb      	str	r3, [r7, #24]
			LUT_NTC[4] = 25;
 800d938:	4b77      	ldr	r3, [pc, #476]	; (800db18 <NTC_Calc+0x270>)
 800d93a:	61fb      	str	r3, [r7, #28]
			LUT_NTC[5] = 0;
 800d93c:	f04f 0300 	mov.w	r3, #0
 800d940:	623b      	str	r3, [r7, #32]

			i=0;
 800d942:	2300      	movs	r3, #0
 800d944:	65fb      	str	r3, [r7, #92]	; 0x5c
			Temp_Val = ((Temp)*5000/4095);
 800d946:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d94a:	a36b      	add	r3, pc, #428	; (adr r3, 800daf8 <NTC_Calc+0x250>)
 800d94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d950:	f001 f83a 	bl	800e9c8 <__aeabi_dmul>
 800d954:	4602      	mov	r2, r0
 800d956:	460b      	mov	r3, r1
 800d958:	4610      	mov	r0, r2
 800d95a:	4619      	mov	r1, r3
 800d95c:	a368      	add	r3, pc, #416	; (adr r3, 800db00 <NTC_Calc+0x258>)
 800d95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d962:	f001 f95b 	bl	800ec1c <__aeabi_ddiv>
 800d966:	4602      	mov	r2, r0
 800d968:	460b      	mov	r3, r1
 800d96a:	4610      	mov	r0, r2
 800d96c:	4619      	mov	r1, r3
 800d96e:	f001 fac5 	bl	800eefc <__aeabi_d2uiz>
 800d972:	4603      	mov	r3, r0
 800d974:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			while(i<NTC_LUT_NB_POINT && LUT_NTC_V[i]<=Temp_Val) i++;
 800d978:	e002      	b.n	800d980 <NTC_Calc+0xd8>
 800d97a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d97c:	3301      	adds	r3, #1
 800d97e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d980:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d984:	429a      	cmp	r2, r3
 800d986:	da0a      	bge.n	800d99e <NTC_Calc+0xf6>
 800d988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d990:	4413      	add	r3, r2
 800d992:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800d996:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d9ed      	bls.n	800d97a <NTC_Calc+0xd2>
			if(i==0){
 800d99e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d112      	bne.n	800d9ca <NTC_Calc+0x122>
				x0 = LUT_NTC_V[0];
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a6:	ee07 3a90 	vmov	s15, r3
 800d9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ae:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				y0 = LUT_NTC[0];
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	657b      	str	r3, [r7, #84]	; 0x54
				x1 = LUT_NTC_V[1];
 800d9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b8:	ee07 3a90 	vmov	s15, r3
 800d9bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9c0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				y1 = LUT_NTC[1];
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d9c8:	e05e      	b.n	800da88 <NTC_Calc+0x1e0>
			}
			else if(i==NTC_LUT_NB_POINT){
 800d9ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d9cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d12e      	bne.n	800da30 <NTC_Calc+0x188>
				x0 = LUT_NTC_V[NTC_LUT_NB_POINT-2];
 800d9d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9d4:	3b02      	subs	r3, #2
 800d9d6:	009b      	lsls	r3, r3, #2
 800d9d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d9dc:	4413      	add	r3, r2
 800d9de:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d9e2:	ee07 3a90 	vmov	s15, r3
 800d9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ea:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				y0 = LUT_NTC[NTC_LUT_NB_POINT-2];
 800d9ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9f0:	3b02      	subs	r3, #2
 800d9f2:	009b      	lsls	r3, r3, #2
 800d9f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d9f8:	4413      	add	r3, r2
 800d9fa:	3b54      	subs	r3, #84	; 0x54
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	657b      	str	r3, [r7, #84]	; 0x54
				x1 = LUT_NTC_V[NTC_LUT_NB_POINT-1];
 800da00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da02:	3b01      	subs	r3, #1
 800da04:	009b      	lsls	r3, r3, #2
 800da06:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800da0a:	4413      	add	r3, r2
 800da0c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800da10:	ee07 3a90 	vmov	s15, r3
 800da14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da18:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				y1 = LUT_NTC[NTC_LUT_NB_POINT-1];
 800da1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da1e:	3b01      	subs	r3, #1
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800da26:	4413      	add	r3, r2
 800da28:	3b54      	subs	r3, #84	; 0x54
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da2e:	e02b      	b.n	800da88 <NTC_Calc+0x1e0>
			}
			else{
				x0 = LUT_NTC_V[i-1];
 800da30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da32:	3b01      	subs	r3, #1
 800da34:	009b      	lsls	r3, r3, #2
 800da36:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800da3a:	4413      	add	r3, r2
 800da3c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800da40:	ee07 3a90 	vmov	s15, r3
 800da44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da48:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				y0 = LUT_NTC[i-1];
 800da4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da4e:	3b01      	subs	r3, #1
 800da50:	009b      	lsls	r3, r3, #2
 800da52:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800da56:	4413      	add	r3, r2
 800da58:	3b54      	subs	r3, #84	; 0x54
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	657b      	str	r3, [r7, #84]	; 0x54
				x1 = LUT_NTC_V[i];
 800da5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da60:	009b      	lsls	r3, r3, #2
 800da62:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800da66:	4413      	add	r3, r2
 800da68:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800da6c:	ee07 3a90 	vmov	s15, r3
 800da70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da74:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				y1 = LUT_NTC[i];
 800da78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da7a:	009b      	lsls	r3, r3, #2
 800da7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800da80:	4413      	add	r3, r2
 800da82:	3b54      	subs	r3, #84	; 0x54
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	64fb      	str	r3, [r7, #76]	; 0x4c
			}

			a = (y1-y0)/(x1-x0);
 800da88:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800da8c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800da90:	ee37 7a67 	vsub.f32	s14, s14, s15
 800da94:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800da98:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800da9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800daa0:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800daa4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			b = y0 - a*x0;
 800daa8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800daac:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800dab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dab4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800dab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dabc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			return a*(Temp_Val) + b;
 800dac0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dac4:	ee07 3a90 	vmov	s15, r3
 800dac8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dacc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800dad0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dad4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800dad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dadc:	ee17 0a90 	vmov	r0, s15
 800dae0:	f000 ff1e 	bl	800e920 <__aeabi_f2d>
 800dae4:	4602      	mov	r2, r0
 800dae6:	460b      	mov	r3, r1

}
 800dae8:	4610      	mov	r0, r2
 800daea:	4619      	mov	r1, r3
 800daec:	3760      	adds	r7, #96	; 0x60
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	f3af 8000 	nop.w
 800daf8:	00000000 	.word	0x00000000
 800dafc:	40b38800 	.word	0x40b38800
 800db00:	00000000 	.word	0x00000000
 800db04:	40affe00 	.word	0x40affe00
 800db08:	42fa0000 	.word	0x42fa0000
 800db0c:	42c80000 	.word	0x42c80000
 800db10:	42960000 	.word	0x42960000
 800db14:	42480000 	.word	0x42480000
 800db18:	41c80000 	.word	0x41c80000
 800db1c:	f3af 8000 	nop.w

0800db20 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	460b      	mov	r3, r1
 800db2a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db30:	78fb      	ldrb	r3, [r7, #3]
 800db32:	fa22 f303 	lsr.w	r3, r2, r3
 800db36:	f003 0301 	and.w	r3, r3, #1
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	370c      	adds	r7, #12
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr
 800db46:	bf00      	nop

0800db48 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	7c1b      	ldrb	r3, [r3, #16]
 800db58:	4610      	mov	r0, r2
 800db5a:	4619      	mov	r1, r3
 800db5c:	f7ff ffe0 	bl	800db20 <XMC_GPIO_GetInput>
 800db60:	4603      	mov	r3, r0
}
 800db62:	4618      	mov	r0, r3
 800db64:	3708      	adds	r7, #8
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop

0800db6c <Task_Transmission>:

uint8_t test1 =0,test2 =0;
boolean_T transActive = 0;

void Task_Transmission (void *p)
{
 800db6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db70:	b084      	sub	sp, #16
 800db72:	af02      	add	r7, sp, #8
 800db74:	6078      	str	r0, [r7, #4]
	while(1)
	{
		transActive=1;
 800db76:	4b47      	ldr	r3, [pc, #284]	; (800dc94 <Task_Transmission+0x128>)
 800db78:	2201      	movs	r2, #1
 800db7a:	701a      	strb	r2, [r3, #0]

	      //Run Brakelight Task (if braking during shifting)
		  FUNC_Brakelight();
 800db7c:	f7f2 fc14 	bl	80003a8 <FUNC_Brakelight>

		  //Safety
		  FUNC_Safety();
 800db80:	f7f5 fbfa 	bl	8003378 <FUNC_Safety>

		  //Start Transmission Calculation and send Data
		  FUNC_Transmission();
 800db84:	f7f5 fc54 	bl	8003430 <FUNC_Transmission>

		  //Set Outputs from Transmission Calculation
		  FUNC_OutputData();
 800db88:	f7f3 fc2e 	bl	80013e8 <FUNC_OutputData>
		  CAN_1_Transmit(); //Vllt unnötig
 800db8c:	f7fe f962 	bl	800be54 <CAN_1_Transmit>
		  CAN_2_Transmit();
 800db90:	f7fe fed2 	bl	800c938 <CAN_2_Transmit>
		  IOPort_setDOUTS();
 800db94:	f7ff fac2 	bl	800d11c <IOPort_setDOUTS>
		  IOPort_setPWMOUTS();
 800db98:	f7ff fb26 	bl	800d1e8 <IOPort_setPWMOUTS>

		  //Read Inputs for next Calculation
		  CAN_1_Receive();
 800db9c:	f7fe f89a 	bl	800bcd4 <CAN_1_Receive>
		  CAN_2_Receive();
 800dba0:	f7fe fc3c 	bl	800c41c <CAN_2_Receive>
		  IOPort_readAINS();
 800dba4:	f7ff fbac 	bl	800d300 <IOPort_readAINS>
		  IOPort_readDINS();
 800dba8:	f7ff faec 	bl	800d184 <IOPort_readDINS>

		  if(shiftDownInterrupt | shiftUpInterrupt)
 800dbac:	4b3a      	ldr	r3, [pc, #232]	; (800dc98 <Task_Transmission+0x12c>)
 800dbae:	781a      	ldrb	r2, [r3, #0]
 800dbb0:	4b3a      	ldr	r3, [pc, #232]	; (800dc9c <Task_Transmission+0x130>)
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00f      	beq.n	800dbdc <Task_Transmission+0x70>
		  {
			  VCU_DW.VAR_IN_STW_shift_up_request = DIGITAL_IO_GetInput(&Signal_UpShift);
 800dbbc:	4838      	ldr	r0, [pc, #224]	; (800dca0 <Task_Transmission+0x134>)
 800dbbe:	f7ff ffc3 	bl	800db48 <DIGITAL_IO_GetInput>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	b2da      	uxtb	r2, r3
 800dbc6:	4b37      	ldr	r3, [pc, #220]	; (800dca4 <Task_Transmission+0x138>)
 800dbc8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
			  VCU_DW.VAR_IN_STW_shift_down_request = DIGITAL_IO_GetInput(&Signal_DownShift);
 800dbcc:	4836      	ldr	r0, [pc, #216]	; (800dca8 <Task_Transmission+0x13c>)
 800dbce:	f7ff ffbb 	bl	800db48 <DIGITAL_IO_GetInput>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	b2da      	uxtb	r2, r3
 800dbd6:	4b33      	ldr	r3, [pc, #204]	; (800dca4 <Task_Transmission+0x138>)
 800dbd8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
		  }
		  FUNC_InputData();
 800dbdc:	f7f2 fc2c 	bl	8000438 <FUNC_InputData>

		  //Reset if clutch is pressed
		  if((*canData.STW_shift_up_request == 1) | (*canData.STW_shift_down_request == 1) | (*IOportData.x_clutch_STW < clutch_STW_threshold) | shiftDownInterrupt | shiftUpInterrupt | *canData.LC_dash_bit)
 800dbe0:	4b32      	ldr	r3, [pc, #200]	; (800dcac <Task_Transmission+0x140>)
 800dbe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	bf0c      	ite	eq
 800dbea:	2301      	moveq	r3, #1
 800dbec:	2300      	movne	r3, #0
 800dbee:	b2da      	uxtb	r2, r3
 800dbf0:	4b2e      	ldr	r3, [pc, #184]	; (800dcac <Task_Transmission+0x140>)
 800dbf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	bf0c      	ite	eq
 800dbfa:	2301      	moveq	r3, #1
 800dbfc:	2300      	movne	r3, #0
 800dbfe:	b2db      	uxtb	r3, r3
 800dc00:	4313      	orrs	r3, r2
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	461e      	mov	r6, r3
 800dc06:	4b2a      	ldr	r3, [pc, #168]	; (800dcb0 <Task_Transmission+0x144>)
 800dc08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc0a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800dc0e:	4b29      	ldr	r3, [pc, #164]	; (800dcb4 <Task_Transmission+0x148>)
 800dc10:	881b      	ldrh	r3, [r3, #0]
 800dc12:	4618      	mov	r0, r3
 800dc14:	f000 fe72 	bl	800e8fc <__aeabi_i2d>
 800dc18:	4680      	mov	r8, r0
 800dc1a:	4689      	mov	r9, r1
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	469a      	mov	sl, r3
 800dc20:	4620      	mov	r0, r4
 800dc22:	4629      	mov	r1, r5
 800dc24:	4642      	mov	r2, r8
 800dc26:	464b      	mov	r3, r9
 800dc28:	f001 f940 	bl	800eeac <__aeabi_dcmplt>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d101      	bne.n	800dc36 <Task_Transmission+0xca>
 800dc32:	2300      	movs	r3, #0
 800dc34:	469a      	mov	sl, r3
 800dc36:	fa5f f38a 	uxtb.w	r3, sl
 800dc3a:	4333      	orrs	r3, r6
 800dc3c:	4a16      	ldr	r2, [pc, #88]	; (800dc98 <Task_Transmission+0x12c>)
 800dc3e:	7812      	ldrb	r2, [r2, #0]
 800dc40:	4313      	orrs	r3, r2
 800dc42:	4a16      	ldr	r2, [pc, #88]	; (800dc9c <Task_Transmission+0x130>)
 800dc44:	7812      	ldrb	r2, [r2, #0]
 800dc46:	4313      	orrs	r3, r2
 800dc48:	4a18      	ldr	r2, [pc, #96]	; (800dcac <Task_Transmission+0x140>)
 800dc4a:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800dc4e:	7812      	ldrb	r2, [r2, #0]
 800dc50:	4313      	orrs	r3, r2
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00d      	beq.n	800dc72 <Task_Transmission+0x106>
		  {
			  Watchdog_Reset();
 800dc56:	f7fe ffbd 	bl	800cbd4 <Watchdog_Reset>
			  xTimerReset(TimerHandle_Transmission,0);
 800dc5a:	4b17      	ldr	r3, [pc, #92]	; (800dcb8 <Task_Transmission+0x14c>)
 800dc5c:	681c      	ldr	r4, [r3, #0]
 800dc5e:	f7fb ffd5 	bl	8009c0c <xTaskGetTickCount>
 800dc62:	4602      	mov	r2, r0
 800dc64:	2300      	movs	r3, #0
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	4620      	mov	r0, r4
 800dc6a:	2102      	movs	r1, #2
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	f7fc fc81 	bl	800a574 <xTimerGenericCommand>
		  }
		  if(TransmissionTask_Stop)
 800dc72:	4b12      	ldr	r3, [pc, #72]	; (800dcbc <Task_Transmission+0x150>)
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00a      	beq.n	800dc90 <Task_Transmission+0x124>
		  {
			  transActive = 0;
 800dc7a:	4b06      	ldr	r3, [pc, #24]	; (800dc94 <Task_Transmission+0x128>)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	701a      	strb	r2, [r3, #0]
			  TransmissionTask_Stop = 0;
 800dc80:	4b0e      	ldr	r3, [pc, #56]	; (800dcbc <Task_Transmission+0x150>)
 800dc82:	2200      	movs	r2, #0
 800dc84:	701a      	strb	r2, [r3, #0]
			  vTaskSuspend(TaskHandle_Transmission);
 800dc86:	4b0e      	ldr	r3, [pc, #56]	; (800dcc0 <Task_Transmission+0x154>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7fb fdaa 	bl	80097e4 <vTaskSuspend>
		  }
	}
 800dc90:	e771      	b.n	800db76 <Task_Transmission+0xa>
 800dc92:	bf00      	nop
 800dc94:	200008b8 	.word	0x200008b8
 800dc98:	20001250 	.word	0x20001250
 800dc9c:	20001270 	.word	0x20001270
 800dca0:	0800f5ec 	.word	0x0800f5ec
 800dca4:	20001058 	.word	0x20001058
 800dca8:	0800f5d8 	.word	0x0800f5d8
 800dcac:	20001338 	.word	0x20001338
 800dcb0:	200012c0 	.word	0x200012c0
 800dcb4:	20000648 	.word	0x20000648
 800dcb8:	200008ac 	.word	0x200008ac
 800dcbc:	200008b4 	.word	0x200008b4
 800dcc0:	200008a0 	.word	0x200008a0

0800dcc4 <Task_Transmit>:
}

void Task_Transmit (void *p)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
	while(1)
	{
		  //Simulink
		  FUNC_OutputData();
 800dccc:	f7f3 fb8c 	bl	80013e8 <FUNC_OutputData>

		  //CAN
		  CAN_1_Transmit();
 800dcd0:	f7fe f8c0 	bl	800be54 <CAN_1_Transmit>
		  CAN_2_Transmit();
 800dcd4:	f7fe fe30 	bl	800c938 <CAN_2_Transmit>

		  //IOPort
		  IOPort_setDOUTS();
 800dcd8:	f7ff fa20 	bl	800d11c <IOPort_setDOUTS>
		  IOPort_setPWMOUTS();
 800dcdc:	f7ff fa84 	bl	800d1e8 <IOPort_setPWMOUTS>

		  //Watchdog
		  wachdog_reset[1] = 1;
 800dce0:	4b08      	ldr	r3, [pc, #32]	; (800dd04 <Task_Transmit+0x40>)
 800dce2:	2201      	movs	r2, #1
 800dce4:	705a      	strb	r2, [r3, #1]

		  //TaskHandler Delay
		  vTaskDelay(pdMS_TO_TICKS(delay_for_transmitting));
 800dce6:	4b08      	ldr	r3, [pc, #32]	; (800dd08 <Task_Transmit+0x44>)
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	461a      	mov	r2, r3
 800dcec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dcf0:	fb03 f302 	mul.w	r3, r3, r2
 800dcf4:	4a05      	ldr	r2, [pc, #20]	; (800dd0c <Task_Transmit+0x48>)
 800dcf6:	fba2 2303 	umull	r2, r3, r2, r3
 800dcfa:	099b      	lsrs	r3, r3, #6
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7fb fd3f 	bl	8009780 <vTaskDelay>
	}
 800dd02:	e7e3      	b.n	800dccc <Task_Transmit+0x8>
 800dd04:	200008b0 	.word	0x200008b0
 800dd08:	20000643 	.word	0x20000643
 800dd0c:	10624dd3 	.word	0x10624dd3

0800dd10 <Task_Reveive>:
}

void Task_Reveive (void *p)
{
 800dd10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd14:	b084      	sub	sp, #16
 800dd16:	af02      	add	r7, sp, #8
 800dd18:	6078      	str	r0, [r7, #4]
	while(1)
	{
		 test1 = DIGITAL_IO_GetInput(&Signal_UpShift);
 800dd1a:	4843      	ldr	r0, [pc, #268]	; (800de28 <Task_Reveive+0x118>)
 800dd1c:	f7ff ff14 	bl	800db48 <DIGITAL_IO_GetInput>
 800dd20:	4603      	mov	r3, r0
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	4b41      	ldr	r3, [pc, #260]	; (800de2c <Task_Reveive+0x11c>)
 800dd26:	701a      	strb	r2, [r3, #0]
		 test2 =  DIGITAL_IO_GetInput(&Signal_DownShift);
 800dd28:	4841      	ldr	r0, [pc, #260]	; (800de30 <Task_Reveive+0x120>)
 800dd2a:	f7ff ff0d 	bl	800db48 <DIGITAL_IO_GetInput>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	b2da      	uxtb	r2, r3
 800dd32:	4b40      	ldr	r3, [pc, #256]	; (800de34 <Task_Reveive+0x124>)
 800dd34:	701a      	strb	r2, [r3, #0]

		  //CAN
		  CAN_1_Receive();
 800dd36:	f7fd ffcd 	bl	800bcd4 <CAN_1_Receive>
		  CAN_2_Receive();
 800dd3a:	f7fe fb6f 	bl	800c41c <CAN_2_Receive>

		  //IOPort
		  IOPort_readDINS();
 800dd3e:	f7ff fa21 	bl	800d184 <IOPort_readDINS>
		  IOPort_readAINS();
 800dd42:	f7ff fadd 	bl	800d300 <IOPort_readAINS>

		  //Simulink
		  FUNC_InputData();
 800dd46:	f7f2 fb77 	bl	8000438 <FUNC_InputData>

		  //Reset Watchdog
		  if(wachdog_reset[0] & wachdog_reset[1])
 800dd4a:	4b3b      	ldr	r3, [pc, #236]	; (800de38 <Task_Reveive+0x128>)
 800dd4c:	781a      	ldrb	r2, [r3, #0]
 800dd4e:	4b3a      	ldr	r3, [pc, #232]	; (800de38 <Task_Reveive+0x128>)
 800dd50:	785b      	ldrb	r3, [r3, #1]
 800dd52:	4013      	ands	r3, r2
 800dd54:	b2db      	uxtb	r3, r3
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d007      	beq.n	800dd6a <Task_Reveive+0x5a>
		  {
			  Watchdog_Reset();
 800dd5a:	f7fe ff3b 	bl	800cbd4 <Watchdog_Reset>

			  wachdog_reset[0]=0;
 800dd5e:	4b36      	ldr	r3, [pc, #216]	; (800de38 <Task_Reveive+0x128>)
 800dd60:	2200      	movs	r2, #0
 800dd62:	701a      	strb	r2, [r3, #0]
			  wachdog_reset[1]=0;
 800dd64:	4b34      	ldr	r3, [pc, #208]	; (800de38 <Task_Reveive+0x128>)
 800dd66:	2200      	movs	r2, #0
 800dd68:	705a      	strb	r2, [r3, #1]
		  }

		  //Start Transmission-Task if shift up or down request occurs
		  if((*canData.STW_shift_up_request == 1) | (*canData.STW_shift_down_request == 1) | (*IOportData.x_clutch_STW < clutch_STW_threshold) | shiftDownInterrupt | shiftUpInterrupt | *canData.LC_dash_bit)
 800dd6a:	4b34      	ldr	r3, [pc, #208]	; (800de3c <Task_Reveive+0x12c>)
 800dd6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	bf0c      	ite	eq
 800dd74:	2301      	moveq	r3, #1
 800dd76:	2300      	movne	r3, #0
 800dd78:	b2da      	uxtb	r2, r3
 800dd7a:	4b30      	ldr	r3, [pc, #192]	; (800de3c <Task_Reveive+0x12c>)
 800dd7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	bf0c      	ite	eq
 800dd84:	2301      	moveq	r3, #1
 800dd86:	2300      	movne	r3, #0
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	461e      	mov	r6, r3
 800dd90:	4b2b      	ldr	r3, [pc, #172]	; (800de40 <Task_Reveive+0x130>)
 800dd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd94:	e9d3 4500 	ldrd	r4, r5, [r3]
 800dd98:	4b2a      	ldr	r3, [pc, #168]	; (800de44 <Task_Reveive+0x134>)
 800dd9a:	881b      	ldrh	r3, [r3, #0]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f000 fdad 	bl	800e8fc <__aeabi_i2d>
 800dda2:	4680      	mov	r8, r0
 800dda4:	4689      	mov	r9, r1
 800dda6:	2301      	movs	r3, #1
 800dda8:	469a      	mov	sl, r3
 800ddaa:	4620      	mov	r0, r4
 800ddac:	4629      	mov	r1, r5
 800ddae:	4642      	mov	r2, r8
 800ddb0:	464b      	mov	r3, r9
 800ddb2:	f001 f87b 	bl	800eeac <__aeabi_dcmplt>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d101      	bne.n	800ddc0 <Task_Reveive+0xb0>
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	469a      	mov	sl, r3
 800ddc0:	fa5f f38a 	uxtb.w	r3, sl
 800ddc4:	4333      	orrs	r3, r6
 800ddc6:	4a20      	ldr	r2, [pc, #128]	; (800de48 <Task_Reveive+0x138>)
 800ddc8:	7812      	ldrb	r2, [r2, #0]
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	4a1f      	ldr	r2, [pc, #124]	; (800de4c <Task_Reveive+0x13c>)
 800ddce:	7812      	ldrb	r2, [r2, #0]
 800ddd0:	4313      	orrs	r3, r2
 800ddd2:	4a1a      	ldr	r2, [pc, #104]	; (800de3c <Task_Reveive+0x12c>)
 800ddd4:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800ddd8:	7812      	ldrb	r2, [r2, #0]
 800ddda:	4313      	orrs	r3, r2
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d021      	beq.n	800de24 <Task_Reveive+0x114>
		  {
			  if(shiftDownInterrupt)
 800dde0:	4b19      	ldr	r3, [pc, #100]	; (800de48 <Task_Reveive+0x138>)
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d004      	beq.n	800ddf2 <Task_Reveive+0xe2>
			  {
				  VCU_DW.VAR_IN_STW_shift_down_request = 1;
 800dde8:	4b19      	ldr	r3, [pc, #100]	; (800de50 <Task_Reveive+0x140>)
 800ddea:	2201      	movs	r2, #1
 800ddec:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
 800ddf0:	e007      	b.n	800de02 <Task_Reveive+0xf2>
			  }
			  else if(shiftUpInterrupt)
 800ddf2:	4b16      	ldr	r3, [pc, #88]	; (800de4c <Task_Reveive+0x13c>)
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d003      	beq.n	800de02 <Task_Reveive+0xf2>
			  {
				  VCU_DW.VAR_IN_STW_shift_up_request = 1;
 800ddfa:	4b15      	ldr	r3, [pc, #84]	; (800de50 <Task_Reveive+0x140>)
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
			  }
			  xTimerReset(TimerHandle_Transmission,0);
 800de02:	4b14      	ldr	r3, [pc, #80]	; (800de54 <Task_Reveive+0x144>)
 800de04:	681c      	ldr	r4, [r3, #0]
 800de06:	f7fb ff01 	bl	8009c0c <xTaskGetTickCount>
 800de0a:	4602      	mov	r2, r0
 800de0c:	2300      	movs	r3, #0
 800de0e:	9300      	str	r3, [sp, #0]
 800de10:	4620      	mov	r0, r4
 800de12:	2102      	movs	r1, #2
 800de14:	2300      	movs	r3, #0
 800de16:	f7fc fbad 	bl	800a574 <xTimerGenericCommand>
			  vTaskResume(TaskHandle_Transmission);
 800de1a:	4b0f      	ldr	r3, [pc, #60]	; (800de58 <Task_Reveive+0x148>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	4618      	mov	r0, r3
 800de20:	f7fb fda0 	bl	8009964 <vTaskResume>
		  }
	}
 800de24:	e779      	b.n	800dd1a <Task_Reveive+0xa>
 800de26:	bf00      	nop
 800de28:	0800f5ec 	.word	0x0800f5ec
 800de2c:	200008b6 	.word	0x200008b6
 800de30:	0800f5d8 	.word	0x0800f5d8
 800de34:	200008b7 	.word	0x200008b7
 800de38:	200008b0 	.word	0x200008b0
 800de3c:	20001338 	.word	0x20001338
 800de40:	200012c0 	.word	0x200012c0
 800de44:	20000648 	.word	0x20000648
 800de48:	20001250 	.word	0x20001250
 800de4c:	20001270 	.word	0x20001270
 800de50:	20001058 	.word	0x20001058
 800de54:	200008ac 	.word	0x200008ac
 800de58:	200008a0 	.word	0x200008a0

0800de5c <Task_LowPrioTask>:
}

void Task_LowPrioTask (void *p)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//Simulink
		FUNC_PumpAndFans();
 800de64:	f7f5 f9f4 	bl	8003250 <FUNC_PumpAndFans>
		FUNC_Brakelight();
 800de68:	f7f2 fa9e 	bl	80003a8 <FUNC_Brakelight>
		FUNC_Safety();
 800de6c:	f7f5 fa84 	bl	8003378 <FUNC_Safety>

		//Watchdog
		wachdog_reset[0] = 1;
 800de70:	4b08      	ldr	r3, [pc, #32]	; (800de94 <Task_LowPrioTask+0x38>)
 800de72:	2201      	movs	r2, #1
 800de74:	701a      	strb	r2, [r3, #0]

		//TaskHandler Delay
		vTaskDelay(pdMS_TO_TICKS(delay_for_lowPrioTasks));
 800de76:	4b08      	ldr	r3, [pc, #32]	; (800de98 <Task_LowPrioTask+0x3c>)
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	461a      	mov	r2, r3
 800de7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800de80:	fb03 f302 	mul.w	r3, r3, r2
 800de84:	4a05      	ldr	r2, [pc, #20]	; (800de9c <Task_LowPrioTask+0x40>)
 800de86:	fba2 2303 	umull	r2, r3, r2, r3
 800de8a:	099b      	lsrs	r3, r3, #6
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7fb fc77 	bl	8009780 <vTaskDelay>
	}
 800de92:	e7e7      	b.n	800de64 <Task_LowPrioTask+0x8>
 800de94:	200008b0 	.word	0x200008b0
 800de98:	20000644 	.word	0x20000644
 800de9c:	10624dd3 	.word	0x10624dd3

0800dea0 <Task_OneLoop>:
}

void Task_OneLoop(void *p)
//Backup-Task which runs everything in one loop
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		  //CAN
		  CAN_1_Receive();
 800dea8:	f7fd ff14 	bl	800bcd4 <CAN_1_Receive>
		  CAN_2_Receive();
 800deac:	f7fe fab6 	bl	800c41c <CAN_2_Receive>

		  //IOPort
		  IOPort_readDINS();
 800deb0:	f7ff f968 	bl	800d184 <IOPort_readDINS>
		  IOPort_readAINS();
 800deb4:	f7ff fa24 	bl	800d300 <IOPort_readAINS>

		  //Simulink
		  FUNC_InputData();
 800deb8:	f7f2 fabe 	bl	8000438 <FUNC_InputData>
		  FUNC_Transmission();
 800debc:	f7f5 fab8 	bl	8003430 <FUNC_Transmission>
		  FUNC_PumpAndFans();
 800dec0:	f7f5 f9c6 	bl	8003250 <FUNC_PumpAndFans>
		  FUNC_Brakelight();
 800dec4:	f7f2 fa70 	bl	80003a8 <FUNC_Brakelight>
		  FUNC_OutputData();
 800dec8:	f7f3 fa8e 	bl	80013e8 <FUNC_OutputData>
		  FUNC_Safety();
 800decc:	f7f5 fa54 	bl	8003378 <FUNC_Safety>

		   //CAN
		   CAN_1_Transmit();
 800ded0:	f7fd ffc0 	bl	800be54 <CAN_1_Transmit>
		   CAN_2_Transmit();
 800ded4:	f7fe fd30 	bl	800c938 <CAN_2_Transmit>

		   //IOPort
		   IOPort_setDOUTS();
 800ded8:	f7ff f920 	bl	800d11c <IOPort_setDOUTS>
		   IOPort_setPWMOUTS();
 800dedc:	f7ff f984 	bl	800d1e8 <IOPort_setPWMOUTS>

		  //Reset Watchdog
		  Watchdog_Reset();
 800dee0:	f7fe fe78 	bl	800cbd4 <Watchdog_Reset>
	}
 800dee4:	e7e0      	b.n	800dea8 <Task_OneLoop+0x8>
 800dee6:	bf00      	nop

0800dee8 <vCallback_SuspendTransmission>:
}

static void vCallback_SuspendTransmission(xTimerHandle pxTimer)
{
 800dee8:	b480      	push	{r7}
 800deea:	b083      	sub	sp, #12
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
	  shiftDownInterrupt = 0;
 800def0:	4b06      	ldr	r3, [pc, #24]	; (800df0c <vCallback_SuspendTransmission+0x24>)
 800def2:	2200      	movs	r2, #0
 800def4:	701a      	strb	r2, [r3, #0]
	  shiftUpInterrupt = 0;
 800def6:	4b06      	ldr	r3, [pc, #24]	; (800df10 <vCallback_SuspendTransmission+0x28>)
 800def8:	2200      	movs	r2, #0
 800defa:	701a      	strb	r2, [r3, #0]
	  TransmissionTask_Stop = 1;
 800defc:	4b05      	ldr	r3, [pc, #20]	; (800df14 <vCallback_SuspendTransmission+0x2c>)
 800defe:	2201      	movs	r2, #1
 800df00:	701a      	strb	r2, [r3, #0]
	 //vTaskSuspend(TaskHandle_Transmission);
	 //xTimerStop(TimerHandle_Transmission, 0);
}
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr
 800df0c:	20001250 	.word	0x20001250
 800df10:	20001270 	.word	0x20001270
 800df14:	200008b4 	.word	0x200008b4

0800df18 <RTOS_Handling_ini>:

void RTOS_Handling_ini()
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af02      	add	r7, sp, #8
	shiftDownInterrupt = 0;
 800df1e:	4b3a      	ldr	r3, [pc, #232]	; (800e008 <RTOS_Handling_ini+0xf0>)
 800df20:	2200      	movs	r2, #0
 800df22:	701a      	strb	r2, [r3, #0]
	shiftUpInterrupt = 0;
 800df24:	4b39      	ldr	r3, [pc, #228]	; (800e00c <RTOS_Handling_ini+0xf4>)
 800df26:	2200      	movs	r2, #0
 800df28:	701a      	strb	r2, [r3, #0]

	  xTaskCreate(Task_Reveive, "Task_Reveive", 200, (void*) 0, tskIDLE_PRIORITY + 0, &TaskHandle_Receive);
 800df2a:	2300      	movs	r3, #0
 800df2c:	9300      	str	r3, [sp, #0]
 800df2e:	4b38      	ldr	r3, [pc, #224]	; (800e010 <RTOS_Handling_ini+0xf8>)
 800df30:	9301      	str	r3, [sp, #4]
 800df32:	4838      	ldr	r0, [pc, #224]	; (800e014 <RTOS_Handling_ini+0xfc>)
 800df34:	4938      	ldr	r1, [pc, #224]	; (800e018 <RTOS_Handling_ini+0x100>)
 800df36:	22c8      	movs	r2, #200	; 0xc8
 800df38:	2300      	movs	r3, #0
 800df3a:	f7fb facd 	bl	80094d8 <xTaskCreate>
	  xTaskCreate(Task_LowPrioTask, "Task_LowPrioTask", 200, (void*) 0, tskIDLE_PRIORITY + 1, &TaskHandle_LowPrioTasks);
 800df3e:	2301      	movs	r3, #1
 800df40:	9300      	str	r3, [sp, #0]
 800df42:	4b36      	ldr	r3, [pc, #216]	; (800e01c <RTOS_Handling_ini+0x104>)
 800df44:	9301      	str	r3, [sp, #4]
 800df46:	4836      	ldr	r0, [pc, #216]	; (800e020 <RTOS_Handling_ini+0x108>)
 800df48:	4936      	ldr	r1, [pc, #216]	; (800e024 <RTOS_Handling_ini+0x10c>)
 800df4a:	22c8      	movs	r2, #200	; 0xc8
 800df4c:	2300      	movs	r3, #0
 800df4e:	f7fb fac3 	bl	80094d8 <xTaskCreate>
	  xTaskCreate(Task_Transmit, "Task_Transmit", 200, (void*) 0, tskIDLE_PRIORITY + 2, &TaskHandle_Transmit);
 800df52:	2302      	movs	r3, #2
 800df54:	9300      	str	r3, [sp, #0]
 800df56:	4b34      	ldr	r3, [pc, #208]	; (800e028 <RTOS_Handling_ini+0x110>)
 800df58:	9301      	str	r3, [sp, #4]
 800df5a:	4834      	ldr	r0, [pc, #208]	; (800e02c <RTOS_Handling_ini+0x114>)
 800df5c:	4934      	ldr	r1, [pc, #208]	; (800e030 <RTOS_Handling_ini+0x118>)
 800df5e:	22c8      	movs	r2, #200	; 0xc8
 800df60:	2300      	movs	r3, #0
 800df62:	f7fb fab9 	bl	80094d8 <xTaskCreate>
	  xTaskCreate(Task_Transmission, "Task_Transmission", 200, (void*) 0, tskIDLE_PRIORITY + 3, &TaskHandle_Transmission);
 800df66:	2303      	movs	r3, #3
 800df68:	9300      	str	r3, [sp, #0]
 800df6a:	4b32      	ldr	r3, [pc, #200]	; (800e034 <RTOS_Handling_ini+0x11c>)
 800df6c:	9301      	str	r3, [sp, #4]
 800df6e:	4832      	ldr	r0, [pc, #200]	; (800e038 <RTOS_Handling_ini+0x120>)
 800df70:	4932      	ldr	r1, [pc, #200]	; (800e03c <RTOS_Handling_ini+0x124>)
 800df72:	22c8      	movs	r2, #200	; 0xc8
 800df74:	2300      	movs	r3, #0
 800df76:	f7fb faaf 	bl	80094d8 <xTaskCreate>
	  xTaskCreate(Task_OneLoop, "Task_OneLoopTask", 200, (void*) 0, tskIDLE_PRIORITY + 4, &TaskHandle_OneLoopTask);
 800df7a:	2304      	movs	r3, #4
 800df7c:	9300      	str	r3, [sp, #0]
 800df7e:	4b30      	ldr	r3, [pc, #192]	; (800e040 <RTOS_Handling_ini+0x128>)
 800df80:	9301      	str	r3, [sp, #4]
 800df82:	4830      	ldr	r0, [pc, #192]	; (800e044 <RTOS_Handling_ini+0x12c>)
 800df84:	4930      	ldr	r1, [pc, #192]	; (800e048 <RTOS_Handling_ini+0x130>)
 800df86:	22c8      	movs	r2, #200	; 0xc8
 800df88:	2300      	movs	r3, #0
 800df8a:	f7fb faa5 	bl	80094d8 <xTaskCreate>

	  TimerHandle_Transmission = xTimerCreate("Timer_Transmission", pdMS_TO_TICKS(runtime_for_transmission), pdFALSE, (void*) 0, vCallback_SuspendTransmission);
 800df8e:	4b2f      	ldr	r3, [pc, #188]	; (800e04c <RTOS_Handling_ini+0x134>)
 800df90:	881b      	ldrh	r3, [r3, #0]
 800df92:	461a      	mov	r2, r3
 800df94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df98:	fb03 f302 	mul.w	r3, r3, r2
 800df9c:	4a2c      	ldr	r2, [pc, #176]	; (800e050 <RTOS_Handling_ini+0x138>)
 800df9e:	fba2 2303 	umull	r2, r3, r2, r3
 800dfa2:	099a      	lsrs	r2, r3, #6
 800dfa4:	4b2b      	ldr	r3, [pc, #172]	; (800e054 <RTOS_Handling_ini+0x13c>)
 800dfa6:	9300      	str	r3, [sp, #0]
 800dfa8:	482b      	ldr	r0, [pc, #172]	; (800e058 <RTOS_Handling_ini+0x140>)
 800dfaa:	4611      	mov	r1, r2
 800dfac:	2200      	movs	r2, #0
 800dfae:	2300      	movs	r3, #0
 800dfb0:	f7fc fa84 	bl	800a4bc <xTimerCreate>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	4b29      	ldr	r3, [pc, #164]	; (800e05c <RTOS_Handling_ini+0x144>)
 800dfb8:	601a      	str	r2, [r3, #0]

	  vTaskSuspend(TaskHandle_OneLoopTask);
 800dfba:	4b21      	ldr	r3, [pc, #132]	; (800e040 <RTOS_Handling_ini+0x128>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fb fc10 	bl	80097e4 <vTaskSuspend>
	  vTaskSuspend(TaskHandle_Transmission);
 800dfc4:	4b1b      	ldr	r3, [pc, #108]	; (800e034 <RTOS_Handling_ini+0x11c>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7fb fc0b 	bl	80097e4 <vTaskSuspend>

	  //run one loop task if one-loop-mode is active
	  if(oneloopmode)
 800dfce:	4b24      	ldr	r3, [pc, #144]	; (800e060 <RTOS_Handling_ini+0x148>)
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d013      	beq.n	800dffe <RTOS_Handling_ini+0xe6>
	  {
		  vTaskSuspend(TaskHandle_Transmit);
 800dfd6:	4b14      	ldr	r3, [pc, #80]	; (800e028 <RTOS_Handling_ini+0x110>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7fb fc02 	bl	80097e4 <vTaskSuspend>
		  vTaskSuspend(TaskHandle_LowPrioTasks);
 800dfe0:	4b0e      	ldr	r3, [pc, #56]	; (800e01c <RTOS_Handling_ini+0x104>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fb fbfd 	bl	80097e4 <vTaskSuspend>
		  vTaskSuspend(TaskHandle_Receive);
 800dfea:	4b09      	ldr	r3, [pc, #36]	; (800e010 <RTOS_Handling_ini+0xf8>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7fb fbf8 	bl	80097e4 <vTaskSuspend>

		  vTaskResume(TaskHandle_OneLoopTask);
 800dff4:	4b12      	ldr	r3, [pc, #72]	; (800e040 <RTOS_Handling_ini+0x128>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fb fcb3 	bl	8009964 <vTaskResume>
	  }

	  vTaskStartScheduler();
 800dffe:	f7fb fd0f 	bl	8009a20 <vTaskStartScheduler>
}
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	20001250 	.word	0x20001250
 800e00c:	20001270 	.word	0x20001270
 800e010:	20000898 	.word	0x20000898
 800e014:	0800dd11 	.word	0x0800dd11
 800e018:	0800f9c0 	.word	0x0800f9c0
 800e01c:	200008a4 	.word	0x200008a4
 800e020:	0800de5d 	.word	0x0800de5d
 800e024:	0800f9d0 	.word	0x0800f9d0
 800e028:	2000089c 	.word	0x2000089c
 800e02c:	0800dcc5 	.word	0x0800dcc5
 800e030:	0800f9e4 	.word	0x0800f9e4
 800e034:	200008a0 	.word	0x200008a0
 800e038:	0800db6d 	.word	0x0800db6d
 800e03c:	0800f9f4 	.word	0x0800f9f4
 800e040:	200008a8 	.word	0x200008a8
 800e044:	0800dea1 	.word	0x0800dea1
 800e048:	0800fa08 	.word	0x0800fa08
 800e04c:	20000646 	.word	0x20000646
 800e050:	10624dd3 	.word	0x10624dd3
 800e054:	0800dee9 	.word	0x0800dee9
 800e058:	0800fa1c 	.word	0x0800fa1c
 800e05c:	200008ac 	.word	0x200008ac
 800e060:	200008b5 	.word	0x200008b5

0800e064 <getbits>:
in the right most n bits; complementing that with ~ makes a mask with ones in the rightmost n bits.
vgl. "THE C PROGRAMMING LANGUGE" Brian W. KERNIGHAN PAGE 49
ACHTUNG!!! das ganz rechte bit des Wortes is bit 0. BSP getbis(x,4,3) gibt bit 4,3,2 bit von rechts gezählt zurück.
*/
unsigned getbits(unsigned x,int p, int n)
{
 800e064:	b480      	push	{r7}
 800e066:	b085      	sub	sp, #20
 800e068:	af00      	add	r7, sp, #0
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	60b9      	str	r1, [r7, #8]
 800e06e:	607a      	str	r2, [r7, #4]
	return(x >> (p+1-n)) & ~(~0 << n);
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	1c5a      	adds	r2, r3, #1
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	1ad3      	subs	r3, r2, r3
 800e078:	68fa      	ldr	r2, [r7, #12]
 800e07a:	fa22 f303 	lsr.w	r3, r2, r3
 800e07e:	f04f 31ff 	mov.w	r1, #4294967295
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	fa01 f202 	lsl.w	r2, r1, r2
 800e088:	43d2      	mvns	r2, r2
 800e08a:	4013      	ands	r3, r2
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3714      	adds	r7, #20
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr

0800e098 <getbits64>:

unsigned getbits64(unsigned long long int x,int p, int n)
{
 800e098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e09c:	b085      	sub	sp, #20
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800e0a4:	607a      	str	r2, [r7, #4]
 800e0a6:	603b      	str	r3, [r7, #0]
	return(unsigned)((x >> (p+1-n)) & ~(~0ULL << n));
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	1c5a      	adds	r2, r3, #1
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	1ad1      	subs	r1, r2, r3
 800e0b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e0b4:	f1c1 0620 	rsb	r6, r1, #32
 800e0b8:	f1a1 0020 	sub.w	r0, r1, #32
 800e0bc:	fa22 f801 	lsr.w	r8, r2, r1
 800e0c0:	fa03 f606 	lsl.w	r6, r3, r6
 800e0c4:	ea48 0806 	orr.w	r8, r8, r6
 800e0c8:	fa23 f000 	lsr.w	r0, r3, r0
 800e0cc:	ea48 0800 	orr.w	r8, r8, r0
 800e0d0:	fa23 f901 	lsr.w	r9, r3, r1
 800e0d4:	46c6      	mov	lr, r8
 800e0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0da:	f04f 33ff 	mov.w	r3, #4294967295
 800e0de:	6839      	ldr	r1, [r7, #0]
 800e0e0:	f1a1 0620 	sub.w	r6, r1, #32
 800e0e4:	f1c1 0020 	rsb	r0, r1, #32
 800e0e8:	fa03 f501 	lsl.w	r5, r3, r1
 800e0ec:	fa02 f606 	lsl.w	r6, r2, r6
 800e0f0:	4335      	orrs	r5, r6
 800e0f2:	fa22 f000 	lsr.w	r0, r2, r0
 800e0f6:	4305      	orrs	r5, r0
 800e0f8:	fa02 f401 	lsl.w	r4, r2, r1
 800e0fc:	4623      	mov	r3, r4
 800e0fe:	43db      	mvns	r3, r3
 800e100:	ea0e 0303 	and.w	r3, lr, r3
}
 800e104:	4618      	mov	r0, r3
 800e106:	3714      	adds	r7, #20
 800e108:	46bd      	mov	sp, r7
 800e10a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e10e:	bf00      	nop

0800e110 <setbitTrue>:
{
	return (MSB<<8)|LSB;
}

void setbitTrue(unsigned long long *x, int n)
{
 800e110:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800e114:	b082      	sub	sp, #8
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
 800e11a:	6039      	str	r1, [r7, #0]
	*x |= (1ULL<<n);
 800e11c:	6879      	ldr	r1, [r7, #4]
 800e11e:	e9d1 8900 	ldrd	r8, r9, [r1]
 800e122:	f04f 0001 	mov.w	r0, #1
 800e126:	f04f 0100 	mov.w	r1, #0
 800e12a:	683c      	ldr	r4, [r7, #0]
 800e12c:	f1a4 0620 	sub.w	r6, r4, #32
 800e130:	f1c4 0520 	rsb	r5, r4, #32
 800e134:	fa01 f304 	lsl.w	r3, r1, r4
 800e138:	fa00 f606 	lsl.w	r6, r0, r6
 800e13c:	4333      	orrs	r3, r6
 800e13e:	fa20 f505 	lsr.w	r5, r0, r5
 800e142:	432b      	orrs	r3, r5
 800e144:	fa00 f204 	lsl.w	r2, r0, r4
 800e148:	ea42 0208 	orr.w	r2, r2, r8
 800e14c:	ea43 0309 	orr.w	r3, r3, r9
 800e150:	6879      	ldr	r1, [r7, #4]
 800e152:	e9c1 2300 	strd	r2, r3, [r1]
}
 800e156:	3708      	adds	r7, #8
 800e158:	46bd      	mov	sp, r7
 800e15a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e15e:	4770      	bx	lr

0800e160 <setbitFalse>:

void setbitFalse(unsigned long long *x, int n)
{
 800e160:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800e164:	b082      	sub	sp, #8
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
 800e16a:	6039      	str	r1, [r7, #0]
	*x &= ~(1ULL<<n);
 800e16c:	6879      	ldr	r1, [r7, #4]
 800e16e:	e9d1 8900 	ldrd	r8, r9, [r1]
 800e172:	f04f 0001 	mov.w	r0, #1
 800e176:	f04f 0100 	mov.w	r1, #0
 800e17a:	683c      	ldr	r4, [r7, #0]
 800e17c:	f1a4 0620 	sub.w	r6, r4, #32
 800e180:	f1c4 0520 	rsb	r5, r4, #32
 800e184:	fa01 f304 	lsl.w	r3, r1, r4
 800e188:	fa00 f606 	lsl.w	r6, r0, r6
 800e18c:	4333      	orrs	r3, r6
 800e18e:	fa20 f505 	lsr.w	r5, r0, r5
 800e192:	432b      	orrs	r3, r5
 800e194:	fa00 f204 	lsl.w	r2, r0, r4
 800e198:	ea6f 0202 	mvn.w	r2, r2
 800e19c:	ea6f 0303 	mvn.w	r3, r3
 800e1a0:	ea02 0208 	and.w	r2, r2, r8
 800e1a4:	ea03 0309 	and.w	r3, r3, r9
 800e1a8:	6879      	ldr	r1, [r7, #4]
 800e1aa:	e9c1 2300 	strd	r2, r3, [r1]
}
 800e1ae:	3708      	adds	r7, #8
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e1b6:	4770      	bx	lr

0800e1b8 <main>:

/****************************************************
   Main Function
 *****************************************************/
int main (void)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	af00      	add	r7, sp, #0
  DAVE_Init();
 800e1bc:	f7fd fba8 	bl	800b910 <DAVE_Init>
  Watchdog_Start();
 800e1c0:	f7fe fd02 	bl	800cbc8 <Watchdog_Start>
  VCU_initialize();
 800e1c4:	f7f7 ffda 	bl	800617c <VCU_initialize>
  CAN_1_ini();
 800e1c8:	f7fd fcb4 	bl	800bb34 <CAN_1_ini>
  CAN_2_ini();
 800e1cc:	f7fd ffc4 	bl	800c158 <CAN_2_ini>
  IOPort_ini();
 800e1d0:	f7fe feea 	bl	800cfa8 <IOPort_ini>
  RTOS_Handling_ini();  //Kupplung, Detect increase Block ???
 800e1d4:	f7ff fea0 	bl	800df18 <RTOS_Handling_ini>
 800e1d8:	2300      	movs	r3, #0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop

0800e1e0 <floor>:
 800e1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1e4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800e1e8:	f2a8 35ff 	subw	r5, r8, #1023	; 0x3ff
 800e1ec:	2d13      	cmp	r5, #19
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	460c      	mov	r4, r1
 800e1f4:	4607      	mov	r7, r0
 800e1f6:	4689      	mov	r9, r1
 800e1f8:	4606      	mov	r6, r0
 800e1fa:	dc1d      	bgt.n	800e238 <floor+0x58>
 800e1fc:	2d00      	cmp	r5, #0
 800e1fe:	db40      	blt.n	800e282 <floor+0xa2>
 800e200:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800e2ec <floor+0x10c>
 800e204:	fa48 f805 	asr.w	r8, r8, r5
 800e208:	ea08 0e01 	and.w	lr, r8, r1
 800e20c:	ea5e 0707 	orrs.w	r7, lr, r7
 800e210:	d017      	beq.n	800e242 <floor+0x62>
 800e212:	a334      	add	r3, pc, #208	; (adr r3, 800e2e4 <floor+0x104>)
 800e214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e218:	f000 fa24 	bl	800e664 <__adddf3>
 800e21c:	2200      	movs	r2, #0
 800e21e:	2300      	movs	r3, #0
 800e220:	f000 fe62 	bl	800eee8 <__aeabi_dcmpgt>
 800e224:	b120      	cbz	r0, 800e230 <floor+0x50>
 800e226:	2c00      	cmp	r4, #0
 800e228:	db3f      	blt.n	800e2aa <floor+0xca>
 800e22a:	ea29 0408 	bic.w	r4, r9, r8
 800e22e:	2600      	movs	r6, #0
 800e230:	4621      	mov	r1, r4
 800e232:	4630      	mov	r0, r6
 800e234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e238:	2d33      	cmp	r5, #51	; 0x33
 800e23a:	dd06      	ble.n	800e24a <floor+0x6a>
 800e23c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800e240:	d02f      	beq.n	800e2a2 <floor+0xc2>
 800e242:	4610      	mov	r0, r2
 800e244:	4619      	mov	r1, r3
 800e246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e24a:	f2a8 4e13 	subw	lr, r8, #1043	; 0x413
 800e24e:	f04f 37ff 	mov.w	r7, #4294967295
 800e252:	fa27 f70e 	lsr.w	r7, r7, lr
 800e256:	4207      	tst	r7, r0
 800e258:	d0f3      	beq.n	800e242 <floor+0x62>
 800e25a:	a322      	add	r3, pc, #136	; (adr r3, 800e2e4 <floor+0x104>)
 800e25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e260:	f000 fa00 	bl	800e664 <__adddf3>
 800e264:	2200      	movs	r2, #0
 800e266:	2300      	movs	r3, #0
 800e268:	f000 fe3e 	bl	800eee8 <__aeabi_dcmpgt>
 800e26c:	2800      	cmp	r0, #0
 800e26e:	d0df      	beq.n	800e230 <floor+0x50>
 800e270:	2c00      	cmp	r4, #0
 800e272:	db1f      	blt.n	800e2b4 <floor+0xd4>
 800e274:	464c      	mov	r4, r9
 800e276:	ea26 0607 	bic.w	r6, r6, r7
 800e27a:	4621      	mov	r1, r4
 800e27c:	4630      	mov	r0, r6
 800e27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e282:	a318      	add	r3, pc, #96	; (adr r3, 800e2e4 <floor+0x104>)
 800e284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e288:	f000 f9ec 	bl	800e664 <__adddf3>
 800e28c:	2200      	movs	r2, #0
 800e28e:	2300      	movs	r3, #0
 800e290:	f000 fe2a 	bl	800eee8 <__aeabi_dcmpgt>
 800e294:	2800      	cmp	r0, #0
 800e296:	d0cb      	beq.n	800e230 <floor+0x50>
 800e298:	2c00      	cmp	r4, #0
 800e29a:	db19      	blt.n	800e2d0 <floor+0xf0>
 800e29c:	2600      	movs	r6, #0
 800e29e:	4634      	mov	r4, r6
 800e2a0:	e7c6      	b.n	800e230 <floor+0x50>
 800e2a2:	f000 f9df 	bl	800e664 <__adddf3>
 800e2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e2ae:	412b      	asrs	r3, r5
 800e2b0:	4499      	add	r9, r3
 800e2b2:	e7ba      	b.n	800e22a <floor+0x4a>
 800e2b4:	2d14      	cmp	r5, #20
 800e2b6:	d008      	beq.n	800e2ca <floor+0xea>
 800e2b8:	f5c8 6886 	rsb	r8, r8, #1072	; 0x430
 800e2bc:	f108 0803 	add.w	r8, r8, #3
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	fa03 f308 	lsl.w	r3, r3, r8
 800e2c6:	199e      	adds	r6, r3, r6
 800e2c8:	d3d4      	bcc.n	800e274 <floor+0x94>
 800e2ca:	f109 0901 	add.w	r9, r9, #1
 800e2ce:	e7d1      	b.n	800e274 <floor+0x94>
 800e2d0:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
 800e2d4:	4b02      	ldr	r3, [pc, #8]	; (800e2e0 <floor+0x100>)
 800e2d6:	433a      	orrs	r2, r7
 800e2d8:	bf18      	it	ne
 800e2da:	461c      	movne	r4, r3
 800e2dc:	2600      	movs	r6, #0
 800e2de:	e7a7      	b.n	800e230 <floor+0x50>
 800e2e0:	bff00000 	.word	0xbff00000
 800e2e4:	8800759c 	.word	0x8800759c
 800e2e8:	7e37e43c 	.word	0x7e37e43c
 800e2ec:	000fffff 	.word	0x000fffff

0800e2f0 <fmod>:
 800e2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2f4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800e3a0 <fmod+0xb0>
 800e2f8:	b08a      	sub	sp, #40	; 0x28
 800e2fa:	461f      	mov	r7, r3
 800e2fc:	4680      	mov	r8, r0
 800e2fe:	4689      	mov	r9, r1
 800e300:	4616      	mov	r6, r2
 800e302:	f000 f84f 	bl	800e3a4 <__ieee754_fmod>
 800e306:	f99a 3000 	ldrsb.w	r3, [sl]
 800e30a:	3301      	adds	r3, #1
 800e30c:	4604      	mov	r4, r0
 800e30e:	460d      	mov	r5, r1
 800e310:	d004      	beq.n	800e31c <fmod+0x2c>
 800e312:	4630      	mov	r0, r6
 800e314:	4639      	mov	r1, r7
 800e316:	f000 f971 	bl	800e5fc <__fpclassifyd>
 800e31a:	b920      	cbnz	r0, 800e326 <fmod+0x36>
 800e31c:	4620      	mov	r0, r4
 800e31e:	4629      	mov	r1, r5
 800e320:	b00a      	add	sp, #40	; 0x28
 800e322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e326:	4640      	mov	r0, r8
 800e328:	4649      	mov	r1, r9
 800e32a:	f000 f967 	bl	800e5fc <__fpclassifyd>
 800e32e:	2800      	cmp	r0, #0
 800e330:	d0f4      	beq.n	800e31c <fmod+0x2c>
 800e332:	4630      	mov	r0, r6
 800e334:	4639      	mov	r1, r7
 800e336:	2200      	movs	r2, #0
 800e338:	2300      	movs	r3, #0
 800e33a:	f000 fdad 	bl	800ee98 <__aeabi_dcmpeq>
 800e33e:	2800      	cmp	r0, #0
 800e340:	d0ec      	beq.n	800e31c <fmod+0x2c>
 800e342:	4b16      	ldr	r3, [pc, #88]	; (800e39c <fmod+0xac>)
 800e344:	f89a 4000 	ldrb.w	r4, [sl]
 800e348:	9301      	str	r3, [sp, #4]
 800e34a:	2201      	movs	r2, #1
 800e34c:	2300      	movs	r3, #0
 800e34e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e352:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e356:	9200      	str	r2, [sp, #0]
 800e358:	9308      	str	r3, [sp, #32]
 800e35a:	b194      	cbz	r4, 800e382 <fmod+0x92>
 800e35c:	2000      	movs	r0, #0
 800e35e:	2100      	movs	r1, #0
 800e360:	4602      	mov	r2, r0
 800e362:	460b      	mov	r3, r1
 800e364:	f000 fc5a 	bl	800ec1c <__aeabi_ddiv>
 800e368:	2c02      	cmp	r4, #2
 800e36a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e36e:	d10a      	bne.n	800e386 <fmod+0x96>
 800e370:	f000 fde4 	bl	800ef3c <__errno>
 800e374:	2321      	movs	r3, #33	; 0x21
 800e376:	6003      	str	r3, [r0, #0]
 800e378:	9b08      	ldr	r3, [sp, #32]
 800e37a:	b953      	cbnz	r3, 800e392 <fmod+0xa2>
 800e37c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e380:	e7ce      	b.n	800e320 <fmod+0x30>
 800e382:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800e386:	4668      	mov	r0, sp
 800e388:	f000 f964 	bl	800e654 <matherr>
 800e38c:	2800      	cmp	r0, #0
 800e38e:	d1f3      	bne.n	800e378 <fmod+0x88>
 800e390:	e7ee      	b.n	800e370 <fmod+0x80>
 800e392:	f000 fdd3 	bl	800ef3c <__errno>
 800e396:	9b08      	ldr	r3, [sp, #32]
 800e398:	6003      	str	r3, [r0, #0]
 800e39a:	e7ef      	b.n	800e37c <fmod+0x8c>
 800e39c:	0800fa30 	.word	0x0800fa30
 800e3a0:	2000064a 	.word	0x2000064a

0800e3a4 <__ieee754_fmod>:
 800e3a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a8:	4690      	mov	r8, r2
 800e3aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e3ae:	ea52 0408 	orrs.w	r4, r2, r8
 800e3b2:	4682      	mov	sl, r0
 800e3b4:	468b      	mov	fp, r1
 800e3b6:	4699      	mov	r9, r3
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	4641      	mov	r1, r8
 800e3bc:	d01f      	beq.n	800e3fe <__ieee754_fmod+0x5a>
 800e3be:	465d      	mov	r5, fp
 800e3c0:	f00b 4600 	and.w	r6, fp, #2147483648	; 0x80000000
 800e3c4:	4c86      	ldr	r4, [pc, #536]	; (800e5e0 <__ieee754_fmod+0x23c>)
 800e3c6:	4075      	eors	r5, r6
 800e3c8:	42a5      	cmp	r5, r4
 800e3ca:	dc18      	bgt.n	800e3fe <__ieee754_fmod+0x5a>
 800e3cc:	424c      	negs	r4, r1
 800e3ce:	430c      	orrs	r4, r1
 800e3d0:	f8df e220 	ldr.w	lr, [pc, #544]	; 800e5f4 <__ieee754_fmod+0x250>
 800e3d4:	ea42 74d4 	orr.w	r4, r2, r4, lsr #31
 800e3d8:	4574      	cmp	r4, lr
 800e3da:	d810      	bhi.n	800e3fe <__ieee754_fmod+0x5a>
 800e3dc:	4295      	cmp	r5, r2
 800e3de:	46d4      	mov	ip, sl
 800e3e0:	4653      	mov	r3, sl
 800e3e2:	4647      	mov	r7, r8
 800e3e4:	dc17      	bgt.n	800e416 <__ieee754_fmod+0x72>
 800e3e6:	db28      	blt.n	800e43a <__ieee754_fmod+0x96>
 800e3e8:	45c2      	cmp	sl, r8
 800e3ea:	d326      	bcc.n	800e43a <__ieee754_fmod+0x96>
 800e3ec:	d113      	bne.n	800e416 <__ieee754_fmod+0x72>
 800e3ee:	4b7d      	ldr	r3, [pc, #500]	; (800e5e4 <__ieee754_fmod+0x240>)
 800e3f0:	0ff6      	lsrs	r6, r6, #31
 800e3f2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e3f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e3fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3fe:	4642      	mov	r2, r8
 800e400:	464b      	mov	r3, r9
 800e402:	4650      	mov	r0, sl
 800e404:	4659      	mov	r1, fp
 800e406:	f000 fadf 	bl	800e9c8 <__aeabi_dmul>
 800e40a:	4602      	mov	r2, r0
 800e40c:	460b      	mov	r3, r1
 800e40e:	f000 fc05 	bl	800ec1c <__aeabi_ddiv>
 800e412:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e416:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800e41a:	da12      	bge.n	800e442 <__ieee754_fmod+0x9e>
 800e41c:	2d00      	cmp	r5, #0
 800e41e:	f040 80a2 	bne.w	800e566 <__ieee754_fmod+0x1c2>
 800e422:	f1bc 0f00 	cmp.w	ip, #0
 800e426:	4664      	mov	r4, ip
 800e428:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 800e5f8 <__ieee754_fmod+0x254>
 800e42c:	dd0d      	ble.n	800e44a <__ieee754_fmod+0xa6>
 800e42e:	0064      	lsls	r4, r4, #1
 800e430:	2c00      	cmp	r4, #0
 800e432:	f108 38ff 	add.w	r8, r8, #4294967295
 800e436:	dcfa      	bgt.n	800e42e <__ieee754_fmod+0x8a>
 800e438:	e007      	b.n	800e44a <__ieee754_fmod+0xa6>
 800e43a:	4650      	mov	r0, sl
 800e43c:	4659      	mov	r1, fp
 800e43e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e442:	ea4f 5825 	mov.w	r8, r5, asr #20
 800e446:	f2a8 38ff 	subw	r8, r8, #1023	; 0x3ff
 800e44a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800e44e:	da0d      	bge.n	800e46c <__ieee754_fmod+0xc8>
 800e450:	2a00      	cmp	r2, #0
 800e452:	f040 80a1 	bne.w	800e598 <__ieee754_fmod+0x1f4>
 800e456:	2900      	cmp	r1, #0
 800e458:	460c      	mov	r4, r1
 800e45a:	f8df e19c 	ldr.w	lr, [pc, #412]	; 800e5f8 <__ieee754_fmod+0x254>
 800e45e:	dd09      	ble.n	800e474 <__ieee754_fmod+0xd0>
 800e460:	0064      	lsls	r4, r4, #1
 800e462:	2c00      	cmp	r4, #0
 800e464:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e468:	dcfa      	bgt.n	800e460 <__ieee754_fmod+0xbc>
 800e46a:	e003      	b.n	800e474 <__ieee754_fmod+0xd0>
 800e46c:	ea4f 5e22 	mov.w	lr, r2, asr #20
 800e470:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 800e474:	4c5c      	ldr	r4, [pc, #368]	; (800e5e8 <__ieee754_fmod+0x244>)
 800e476:	45a0      	cmp	r8, r4
 800e478:	db58      	blt.n	800e52c <__ieee754_fmod+0x188>
 800e47a:	f3c5 0413 	ubfx	r4, r5, #0, #20
 800e47e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800e482:	4d59      	ldr	r5, [pc, #356]	; (800e5e8 <__ieee754_fmod+0x244>)
 800e484:	45ae      	cmp	lr, r5
 800e486:	db5f      	blt.n	800e548 <__ieee754_fmod+0x1a4>
 800e488:	f3c0 0113 	ubfx	r1, r0, #0, #20
 800e48c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e490:	ebce 0008 	rsb	r0, lr, r8
 800e494:	e007      	b.n	800e4a6 <__ieee754_fmod+0x102>
 800e496:	ea52 0305 	orrs.w	r3, r2, r5
 800e49a:	d012      	beq.n	800e4c2 <__ieee754_fmod+0x11e>
 800e49c:	0fec      	lsrs	r4, r5, #31
 800e49e:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800e4a2:	006b      	lsls	r3, r5, #1
 800e4a4:	3801      	subs	r0, #1
 800e4a6:	1bdd      	subs	r5, r3, r7
 800e4a8:	1a62      	subs	r2, r4, r1
 800e4aa:	b190      	cbz	r0, 800e4d2 <__ieee754_fmod+0x12e>
 800e4ac:	42bb      	cmp	r3, r7
 800e4ae:	bf38      	it	cc
 800e4b0:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800e4b4:	2a00      	cmp	r2, #0
 800e4b6:	daee      	bge.n	800e496 <__ieee754_fmod+0xf2>
 800e4b8:	0fda      	lsrs	r2, r3, #31
 800e4ba:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800e4be:	005b      	lsls	r3, r3, #1
 800e4c0:	e7f0      	b.n	800e4a4 <__ieee754_fmod+0x100>
 800e4c2:	4b48      	ldr	r3, [pc, #288]	; (800e5e4 <__ieee754_fmod+0x240>)
 800e4c4:	0ff6      	lsrs	r6, r6, #31
 800e4c6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e4ca:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e4ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d2:	429f      	cmp	r7, r3
 800e4d4:	4611      	mov	r1, r2
 800e4d6:	bf88      	it	hi
 800e4d8:	f102 31ff 	addhi.w	r1, r2, #4294967295
 800e4dc:	2900      	cmp	r1, #0
 800e4de:	bfac      	ite	ge
 800e4e0:	1bdb      	subge	r3, r3, r7
 800e4e2:	4621      	movlt	r1, r4
 800e4e4:	ea51 0203 	orrs.w	r2, r1, r3
 800e4e8:	d0eb      	beq.n	800e4c2 <__ieee754_fmod+0x11e>
 800e4ea:	4840      	ldr	r0, [pc, #256]	; (800e5ec <__ieee754_fmod+0x248>)
 800e4ec:	4281      	cmp	r1, r0
 800e4ee:	dc08      	bgt.n	800e502 <__ieee754_fmod+0x15e>
 800e4f0:	0fda      	lsrs	r2, r3, #31
 800e4f2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e4f6:	4281      	cmp	r1, r0
 800e4f8:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e4fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e500:	ddf6      	ble.n	800e4f0 <__ieee754_fmod+0x14c>
 800e502:	4a39      	ldr	r2, [pc, #228]	; (800e5e8 <__ieee754_fmod+0x244>)
 800e504:	4596      	cmp	lr, r2
 800e506:	da50      	bge.n	800e5aa <__ieee754_fmod+0x206>
 800e508:	4a37      	ldr	r2, [pc, #220]	; (800e5e8 <__ieee754_fmod+0x244>)
 800e50a:	ebce 0202 	rsb	r2, lr, r2
 800e50e:	2a14      	cmp	r2, #20
 800e510:	dc55      	bgt.n	800e5be <__ieee754_fmod+0x21a>
 800e512:	f20e 4e1e 	addw	lr, lr, #1054	; 0x41e
 800e516:	40d3      	lsrs	r3, r2
 800e518:	fa01 f00e 	lsl.w	r0, r1, lr
 800e51c:	4303      	orrs	r3, r0
 800e51e:	fa41 f202 	asr.w	r2, r1, r2
 800e522:	ea42 0106 	orr.w	r1, r2, r6
 800e526:	4618      	mov	r0, r3
 800e528:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e52c:	4b2e      	ldr	r3, [pc, #184]	; (800e5e8 <__ieee754_fmod+0x244>)
 800e52e:	ebc8 0303 	rsb	r3, r8, r3
 800e532:	2b1f      	cmp	r3, #31
 800e534:	dc29      	bgt.n	800e58a <__ieee754_fmod+0x1e6>
 800e536:	f208 441e 	addw	r4, r8, #1054	; 0x41e
 800e53a:	409d      	lsls	r5, r3
 800e53c:	fa2c f404 	lsr.w	r4, ip, r4
 800e540:	fa0c f303 	lsl.w	r3, ip, r3
 800e544:	432c      	orrs	r4, r5
 800e546:	e79c      	b.n	800e482 <__ieee754_fmod+0xde>
 800e548:	4827      	ldr	r0, [pc, #156]	; (800e5e8 <__ieee754_fmod+0x244>)
 800e54a:	ebce 0000 	rsb	r0, lr, r0
 800e54e:	281f      	cmp	r0, #31
 800e550:	dc15      	bgt.n	800e57e <__ieee754_fmod+0x1da>
 800e552:	f20e 451e 	addw	r5, lr, #1054	; 0x41e
 800e556:	4082      	lsls	r2, r0
 800e558:	fa21 f505 	lsr.w	r5, r1, r5
 800e55c:	fa01 f700 	lsl.w	r7, r1, r0
 800e560:	ea42 0105 	orr.w	r1, r2, r5
 800e564:	e794      	b.n	800e490 <__ieee754_fmod+0xec>
 800e566:	02ec      	lsls	r4, r5, #11
 800e568:	2c00      	cmp	r4, #0
 800e56a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800e5e8 <__ieee754_fmod+0x244>
 800e56e:	f77f af6c 	ble.w	800e44a <__ieee754_fmod+0xa6>
 800e572:	0064      	lsls	r4, r4, #1
 800e574:	2c00      	cmp	r4, #0
 800e576:	f108 38ff 	add.w	r8, r8, #4294967295
 800e57a:	dcfa      	bgt.n	800e572 <__ieee754_fmod+0x1ce>
 800e57c:	e765      	b.n	800e44a <__ieee754_fmod+0xa6>
 800e57e:	4a1c      	ldr	r2, [pc, #112]	; (800e5f0 <__ieee754_fmod+0x24c>)
 800e580:	ebce 0202 	rsb	r2, lr, r2
 800e584:	4091      	lsls	r1, r2
 800e586:	2700      	movs	r7, #0
 800e588:	e782      	b.n	800e490 <__ieee754_fmod+0xec>
 800e58a:	4b19      	ldr	r3, [pc, #100]	; (800e5f0 <__ieee754_fmod+0x24c>)
 800e58c:	ebc8 0303 	rsb	r3, r8, r3
 800e590:	fa0c f403 	lsl.w	r4, ip, r3
 800e594:	2300      	movs	r3, #0
 800e596:	e774      	b.n	800e482 <__ieee754_fmod+0xde>
 800e598:	f8df e04c 	ldr.w	lr, [pc, #76]	; 800e5e8 <__ieee754_fmod+0x244>
 800e59c:	02d4      	lsls	r4, r2, #11
 800e59e:	0064      	lsls	r4, r4, #1
 800e5a0:	2c00      	cmp	r4, #0
 800e5a2:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e5a6:	dcfa      	bgt.n	800e59e <__ieee754_fmod+0x1fa>
 800e5a8:	e764      	b.n	800e474 <__ieee754_fmod+0xd0>
 800e5aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e5ae:	430e      	orrs	r6, r1
 800e5b0:	f20e 3eff 	addw	lr, lr, #1023	; 0x3ff
 800e5b4:	ea46 510e 	orr.w	r1, r6, lr, lsl #20
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5be:	2a1f      	cmp	r2, #31
 800e5c0:	dc07      	bgt.n	800e5d2 <__ieee754_fmod+0x22e>
 800e5c2:	f20e 4e1e 	addw	lr, lr, #1054	; 0x41e
 800e5c6:	40d3      	lsrs	r3, r2
 800e5c8:	fa01 f10e 	lsl.w	r1, r1, lr
 800e5cc:	430b      	orrs	r3, r1
 800e5ce:	4632      	mov	r2, r6
 800e5d0:	e7a7      	b.n	800e522 <__ieee754_fmod+0x17e>
 800e5d2:	4b07      	ldr	r3, [pc, #28]	; (800e5f0 <__ieee754_fmod+0x24c>)
 800e5d4:	ebce 0303 	rsb	r3, lr, r3
 800e5d8:	fa41 f303 	asr.w	r3, r1, r3
 800e5dc:	4632      	mov	r2, r6
 800e5de:	e7a0      	b.n	800e522 <__ieee754_fmod+0x17e>
 800e5e0:	7fefffff 	.word	0x7fefffff
 800e5e4:	0800fa38 	.word	0x0800fa38
 800e5e8:	fffffc02 	.word	0xfffffc02
 800e5ec:	000fffff 	.word	0x000fffff
 800e5f0:	fffffbe2 	.word	0xfffffbe2
 800e5f4:	7ff00000 	.word	0x7ff00000
 800e5f8:	fffffbed 	.word	0xfffffbed

0800e5fc <__fpclassifyd>:
 800e5fc:	b410      	push	{r4}
 800e5fe:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800e602:	460b      	mov	r3, r1
 800e604:	d008      	beq.n	800e618 <__fpclassifyd+0x1c>
 800e606:	4a11      	ldr	r2, [pc, #68]	; (800e64c <__fpclassifyd+0x50>)
 800e608:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e60c:	4291      	cmp	r1, r2
 800e60e:	d808      	bhi.n	800e622 <__fpclassifyd+0x26>
 800e610:	2004      	movs	r0, #4
 800e612:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e616:	4770      	bx	lr
 800e618:	b918      	cbnz	r0, 800e622 <__fpclassifyd+0x26>
 800e61a:	2002      	movs	r0, #2
 800e61c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e620:	4770      	bx	lr
 800e622:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800e626:	4a09      	ldr	r2, [pc, #36]	; (800e64c <__fpclassifyd+0x50>)
 800e628:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d9ef      	bls.n	800e610 <__fpclassifyd+0x14>
 800e630:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e634:	d201      	bcs.n	800e63a <__fpclassifyd+0x3e>
 800e636:	2003      	movs	r0, #3
 800e638:	e7eb      	b.n	800e612 <__fpclassifyd+0x16>
 800e63a:	4b05      	ldr	r3, [pc, #20]	; (800e650 <__fpclassifyd+0x54>)
 800e63c:	429c      	cmp	r4, r3
 800e63e:	d001      	beq.n	800e644 <__fpclassifyd+0x48>
 800e640:	2000      	movs	r0, #0
 800e642:	e7e6      	b.n	800e612 <__fpclassifyd+0x16>
 800e644:	fab0 f080 	clz	r0, r0
 800e648:	0940      	lsrs	r0, r0, #5
 800e64a:	e7e2      	b.n	800e612 <__fpclassifyd+0x16>
 800e64c:	7fdfffff 	.word	0x7fdfffff
 800e650:	7ff00000 	.word	0x7ff00000

0800e654 <matherr>:
 800e654:	2000      	movs	r0, #0
 800e656:	4770      	bx	lr

0800e658 <__aeabi_drsub>:
 800e658:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800e65c:	e002      	b.n	800e664 <__adddf3>
 800e65e:	bf00      	nop

0800e660 <__aeabi_dsub>:
 800e660:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800e664 <__adddf3>:
 800e664:	b530      	push	{r4, r5, lr}
 800e666:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800e66a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800e66e:	ea94 0f05 	teq	r4, r5
 800e672:	bf08      	it	eq
 800e674:	ea90 0f02 	teqeq	r0, r2
 800e678:	bf1f      	itttt	ne
 800e67a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800e67e:	ea55 0c02 	orrsne.w	ip, r5, r2
 800e682:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800e686:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800e68a:	f000 80e2 	beq.w	800e852 <__adddf3+0x1ee>
 800e68e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800e692:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800e696:	bfb8      	it	lt
 800e698:	426d      	neglt	r5, r5
 800e69a:	dd0c      	ble.n	800e6b6 <__adddf3+0x52>
 800e69c:	442c      	add	r4, r5
 800e69e:	ea80 0202 	eor.w	r2, r0, r2
 800e6a2:	ea81 0303 	eor.w	r3, r1, r3
 800e6a6:	ea82 0000 	eor.w	r0, r2, r0
 800e6aa:	ea83 0101 	eor.w	r1, r3, r1
 800e6ae:	ea80 0202 	eor.w	r2, r0, r2
 800e6b2:	ea81 0303 	eor.w	r3, r1, r3
 800e6b6:	2d36      	cmp	r5, #54	; 0x36
 800e6b8:	bf88      	it	hi
 800e6ba:	bd30      	pophi	{r4, r5, pc}
 800e6bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800e6c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800e6c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800e6c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800e6cc:	d002      	beq.n	800e6d4 <__adddf3+0x70>
 800e6ce:	4240      	negs	r0, r0
 800e6d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e6d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800e6d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e6dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800e6e0:	d002      	beq.n	800e6e8 <__adddf3+0x84>
 800e6e2:	4252      	negs	r2, r2
 800e6e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800e6e8:	ea94 0f05 	teq	r4, r5
 800e6ec:	f000 80a7 	beq.w	800e83e <__adddf3+0x1da>
 800e6f0:	f1a4 0401 	sub.w	r4, r4, #1
 800e6f4:	f1d5 0e20 	rsbs	lr, r5, #32
 800e6f8:	db0d      	blt.n	800e716 <__adddf3+0xb2>
 800e6fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 800e6fe:	fa22 f205 	lsr.w	r2, r2, r5
 800e702:	1880      	adds	r0, r0, r2
 800e704:	f141 0100 	adc.w	r1, r1, #0
 800e708:	fa03 f20e 	lsl.w	r2, r3, lr
 800e70c:	1880      	adds	r0, r0, r2
 800e70e:	fa43 f305 	asr.w	r3, r3, r5
 800e712:	4159      	adcs	r1, r3
 800e714:	e00e      	b.n	800e734 <__adddf3+0xd0>
 800e716:	f1a5 0520 	sub.w	r5, r5, #32
 800e71a:	f10e 0e20 	add.w	lr, lr, #32
 800e71e:	2a01      	cmp	r2, #1
 800e720:	fa03 fc0e 	lsl.w	ip, r3, lr
 800e724:	bf28      	it	cs
 800e726:	f04c 0c02 	orrcs.w	ip, ip, #2
 800e72a:	fa43 f305 	asr.w	r3, r3, r5
 800e72e:	18c0      	adds	r0, r0, r3
 800e730:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800e734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e738:	d507      	bpl.n	800e74a <__adddf3+0xe6>
 800e73a:	f04f 0e00 	mov.w	lr, #0
 800e73e:	f1dc 0c00 	rsbs	ip, ip, #0
 800e742:	eb7e 0000 	sbcs.w	r0, lr, r0
 800e746:	eb6e 0101 	sbc.w	r1, lr, r1
 800e74a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e74e:	d31b      	bcc.n	800e788 <__adddf3+0x124>
 800e750:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800e754:	d30c      	bcc.n	800e770 <__adddf3+0x10c>
 800e756:	0849      	lsrs	r1, r1, #1
 800e758:	ea5f 0030 	movs.w	r0, r0, rrx
 800e75c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800e760:	f104 0401 	add.w	r4, r4, #1
 800e764:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800e768:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800e76c:	f080 809a 	bcs.w	800e8a4 <__adddf3+0x240>
 800e770:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800e774:	bf08      	it	eq
 800e776:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800e77a:	f150 0000 	adcs.w	r0, r0, #0
 800e77e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800e782:	ea41 0105 	orr.w	r1, r1, r5
 800e786:	bd30      	pop	{r4, r5, pc}
 800e788:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800e78c:	4140      	adcs	r0, r0
 800e78e:	eb41 0101 	adc.w	r1, r1, r1
 800e792:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e796:	f1a4 0401 	sub.w	r4, r4, #1
 800e79a:	d1e9      	bne.n	800e770 <__adddf3+0x10c>
 800e79c:	f091 0f00 	teq	r1, #0
 800e7a0:	bf04      	itt	eq
 800e7a2:	4601      	moveq	r1, r0
 800e7a4:	2000      	moveq	r0, #0
 800e7a6:	fab1 f381 	clz	r3, r1
 800e7aa:	bf08      	it	eq
 800e7ac:	3320      	addeq	r3, #32
 800e7ae:	f1a3 030b 	sub.w	r3, r3, #11
 800e7b2:	f1b3 0220 	subs.w	r2, r3, #32
 800e7b6:	da0c      	bge.n	800e7d2 <__adddf3+0x16e>
 800e7b8:	320c      	adds	r2, #12
 800e7ba:	dd08      	ble.n	800e7ce <__adddf3+0x16a>
 800e7bc:	f102 0c14 	add.w	ip, r2, #20
 800e7c0:	f1c2 020c 	rsb	r2, r2, #12
 800e7c4:	fa01 f00c 	lsl.w	r0, r1, ip
 800e7c8:	fa21 f102 	lsr.w	r1, r1, r2
 800e7cc:	e00c      	b.n	800e7e8 <__adddf3+0x184>
 800e7ce:	f102 0214 	add.w	r2, r2, #20
 800e7d2:	bfd8      	it	le
 800e7d4:	f1c2 0c20 	rsble	ip, r2, #32
 800e7d8:	fa01 f102 	lsl.w	r1, r1, r2
 800e7dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 800e7e0:	bfdc      	itt	le
 800e7e2:	ea41 010c 	orrle.w	r1, r1, ip
 800e7e6:	4090      	lslle	r0, r2
 800e7e8:	1ae4      	subs	r4, r4, r3
 800e7ea:	bfa2      	ittt	ge
 800e7ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800e7f0:	4329      	orrge	r1, r5
 800e7f2:	bd30      	popge	{r4, r5, pc}
 800e7f4:	ea6f 0404 	mvn.w	r4, r4
 800e7f8:	3c1f      	subs	r4, #31
 800e7fa:	da1c      	bge.n	800e836 <__adddf3+0x1d2>
 800e7fc:	340c      	adds	r4, #12
 800e7fe:	dc0e      	bgt.n	800e81e <__adddf3+0x1ba>
 800e800:	f104 0414 	add.w	r4, r4, #20
 800e804:	f1c4 0220 	rsb	r2, r4, #32
 800e808:	fa20 f004 	lsr.w	r0, r0, r4
 800e80c:	fa01 f302 	lsl.w	r3, r1, r2
 800e810:	ea40 0003 	orr.w	r0, r0, r3
 800e814:	fa21 f304 	lsr.w	r3, r1, r4
 800e818:	ea45 0103 	orr.w	r1, r5, r3
 800e81c:	bd30      	pop	{r4, r5, pc}
 800e81e:	f1c4 040c 	rsb	r4, r4, #12
 800e822:	f1c4 0220 	rsb	r2, r4, #32
 800e826:	fa20 f002 	lsr.w	r0, r0, r2
 800e82a:	fa01 f304 	lsl.w	r3, r1, r4
 800e82e:	ea40 0003 	orr.w	r0, r0, r3
 800e832:	4629      	mov	r1, r5
 800e834:	bd30      	pop	{r4, r5, pc}
 800e836:	fa21 f004 	lsr.w	r0, r1, r4
 800e83a:	4629      	mov	r1, r5
 800e83c:	bd30      	pop	{r4, r5, pc}
 800e83e:	f094 0f00 	teq	r4, #0
 800e842:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800e846:	bf06      	itte	eq
 800e848:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800e84c:	3401      	addeq	r4, #1
 800e84e:	3d01      	subne	r5, #1
 800e850:	e74e      	b.n	800e6f0 <__adddf3+0x8c>
 800e852:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800e856:	bf18      	it	ne
 800e858:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800e85c:	d029      	beq.n	800e8b2 <__adddf3+0x24e>
 800e85e:	ea94 0f05 	teq	r4, r5
 800e862:	bf08      	it	eq
 800e864:	ea90 0f02 	teqeq	r0, r2
 800e868:	d005      	beq.n	800e876 <__adddf3+0x212>
 800e86a:	ea54 0c00 	orrs.w	ip, r4, r0
 800e86e:	bf04      	itt	eq
 800e870:	4619      	moveq	r1, r3
 800e872:	4610      	moveq	r0, r2
 800e874:	bd30      	pop	{r4, r5, pc}
 800e876:	ea91 0f03 	teq	r1, r3
 800e87a:	bf1e      	ittt	ne
 800e87c:	2100      	movne	r1, #0
 800e87e:	2000      	movne	r0, #0
 800e880:	bd30      	popne	{r4, r5, pc}
 800e882:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800e886:	d105      	bne.n	800e894 <__adddf3+0x230>
 800e888:	0040      	lsls	r0, r0, #1
 800e88a:	4149      	adcs	r1, r1
 800e88c:	bf28      	it	cs
 800e88e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800e892:	bd30      	pop	{r4, r5, pc}
 800e894:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800e898:	bf3c      	itt	cc
 800e89a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800e89e:	bd30      	popcc	{r4, r5, pc}
 800e8a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e8a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800e8a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e8ac:	f04f 0000 	mov.w	r0, #0
 800e8b0:	bd30      	pop	{r4, r5, pc}
 800e8b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800e8b6:	bf1a      	itte	ne
 800e8b8:	4619      	movne	r1, r3
 800e8ba:	4610      	movne	r0, r2
 800e8bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800e8c0:	bf1c      	itt	ne
 800e8c2:	460b      	movne	r3, r1
 800e8c4:	4602      	movne	r2, r0
 800e8c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800e8ca:	bf06      	itte	eq
 800e8cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800e8d0:	ea91 0f03 	teqeq	r1, r3
 800e8d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800e8d8:	bd30      	pop	{r4, r5, pc}
 800e8da:	bf00      	nop

0800e8dc <__aeabi_ui2d>:
 800e8dc:	f090 0f00 	teq	r0, #0
 800e8e0:	bf04      	itt	eq
 800e8e2:	2100      	moveq	r1, #0
 800e8e4:	4770      	bxeq	lr
 800e8e6:	b530      	push	{r4, r5, lr}
 800e8e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e8ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e8f0:	f04f 0500 	mov.w	r5, #0
 800e8f4:	f04f 0100 	mov.w	r1, #0
 800e8f8:	e750      	b.n	800e79c <__adddf3+0x138>
 800e8fa:	bf00      	nop

0800e8fc <__aeabi_i2d>:
 800e8fc:	f090 0f00 	teq	r0, #0
 800e900:	bf04      	itt	eq
 800e902:	2100      	moveq	r1, #0
 800e904:	4770      	bxeq	lr
 800e906:	b530      	push	{r4, r5, lr}
 800e908:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e90c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e910:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800e914:	bf48      	it	mi
 800e916:	4240      	negmi	r0, r0
 800e918:	f04f 0100 	mov.w	r1, #0
 800e91c:	e73e      	b.n	800e79c <__adddf3+0x138>
 800e91e:	bf00      	nop

0800e920 <__aeabi_f2d>:
 800e920:	0042      	lsls	r2, r0, #1
 800e922:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800e926:	ea4f 0131 	mov.w	r1, r1, rrx
 800e92a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800e92e:	bf1f      	itttt	ne
 800e930:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800e934:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800e938:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800e93c:	4770      	bxne	lr
 800e93e:	f092 0f00 	teq	r2, #0
 800e942:	bf14      	ite	ne
 800e944:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800e948:	4770      	bxeq	lr
 800e94a:	b530      	push	{r4, r5, lr}
 800e94c:	f44f 7460 	mov.w	r4, #896	; 0x380
 800e950:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e954:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e958:	e720      	b.n	800e79c <__adddf3+0x138>
 800e95a:	bf00      	nop

0800e95c <__aeabi_ul2d>:
 800e95c:	ea50 0201 	orrs.w	r2, r0, r1
 800e960:	bf08      	it	eq
 800e962:	4770      	bxeq	lr
 800e964:	b530      	push	{r4, r5, lr}
 800e966:	f04f 0500 	mov.w	r5, #0
 800e96a:	e00a      	b.n	800e982 <__aeabi_l2d+0x16>

0800e96c <__aeabi_l2d>:
 800e96c:	ea50 0201 	orrs.w	r2, r0, r1
 800e970:	bf08      	it	eq
 800e972:	4770      	bxeq	lr
 800e974:	b530      	push	{r4, r5, lr}
 800e976:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800e97a:	d502      	bpl.n	800e982 <__aeabi_l2d+0x16>
 800e97c:	4240      	negs	r0, r0
 800e97e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e982:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e986:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e98a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800e98e:	f43f aedc 	beq.w	800e74a <__adddf3+0xe6>
 800e992:	f04f 0203 	mov.w	r2, #3
 800e996:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800e99a:	bf18      	it	ne
 800e99c:	3203      	addne	r2, #3
 800e99e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800e9a2:	bf18      	it	ne
 800e9a4:	3203      	addne	r2, #3
 800e9a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800e9aa:	f1c2 0320 	rsb	r3, r2, #32
 800e9ae:	fa00 fc03 	lsl.w	ip, r0, r3
 800e9b2:	fa20 f002 	lsr.w	r0, r0, r2
 800e9b6:	fa01 fe03 	lsl.w	lr, r1, r3
 800e9ba:	ea40 000e 	orr.w	r0, r0, lr
 800e9be:	fa21 f102 	lsr.w	r1, r1, r2
 800e9c2:	4414      	add	r4, r2
 800e9c4:	e6c1      	b.n	800e74a <__adddf3+0xe6>
 800e9c6:	bf00      	nop

0800e9c8 <__aeabi_dmul>:
 800e9c8:	b570      	push	{r4, r5, r6, lr}
 800e9ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800e9ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800e9d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800e9d6:	bf1d      	ittte	ne
 800e9d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800e9dc:	ea94 0f0c 	teqne	r4, ip
 800e9e0:	ea95 0f0c 	teqne	r5, ip
 800e9e4:	f000 f8de 	bleq	800eba4 <__aeabi_dmul+0x1dc>
 800e9e8:	442c      	add	r4, r5
 800e9ea:	ea81 0603 	eor.w	r6, r1, r3
 800e9ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800e9f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800e9f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800e9fa:	bf18      	it	ne
 800e9fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800ea00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ea04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea08:	d038      	beq.n	800ea7c <__aeabi_dmul+0xb4>
 800ea0a:	fba0 ce02 	umull	ip, lr, r0, r2
 800ea0e:	f04f 0500 	mov.w	r5, #0
 800ea12:	fbe1 e502 	umlal	lr, r5, r1, r2
 800ea16:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800ea1a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800ea1e:	f04f 0600 	mov.w	r6, #0
 800ea22:	fbe1 5603 	umlal	r5, r6, r1, r3
 800ea26:	f09c 0f00 	teq	ip, #0
 800ea2a:	bf18      	it	ne
 800ea2c:	f04e 0e01 	orrne.w	lr, lr, #1
 800ea30:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800ea34:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800ea38:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800ea3c:	d204      	bcs.n	800ea48 <__aeabi_dmul+0x80>
 800ea3e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800ea42:	416d      	adcs	r5, r5
 800ea44:	eb46 0606 	adc.w	r6, r6, r6
 800ea48:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800ea4c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800ea50:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800ea54:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800ea58:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800ea5c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800ea60:	bf88      	it	hi
 800ea62:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800ea66:	d81e      	bhi.n	800eaa6 <__aeabi_dmul+0xde>
 800ea68:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800ea6c:	bf08      	it	eq
 800ea6e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800ea72:	f150 0000 	adcs.w	r0, r0, #0
 800ea76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800ea7a:	bd70      	pop	{r4, r5, r6, pc}
 800ea7c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800ea80:	ea46 0101 	orr.w	r1, r6, r1
 800ea84:	ea40 0002 	orr.w	r0, r0, r2
 800ea88:	ea81 0103 	eor.w	r1, r1, r3
 800ea8c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800ea90:	bfc2      	ittt	gt
 800ea92:	ebd4 050c 	rsbsgt	r5, r4, ip
 800ea96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800ea9a:	bd70      	popgt	{r4, r5, r6, pc}
 800ea9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800eaa0:	f04f 0e00 	mov.w	lr, #0
 800eaa4:	3c01      	subs	r4, #1
 800eaa6:	f300 80ab 	bgt.w	800ec00 <__aeabi_dmul+0x238>
 800eaaa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800eaae:	bfde      	ittt	le
 800eab0:	2000      	movle	r0, #0
 800eab2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800eab6:	bd70      	pople	{r4, r5, r6, pc}
 800eab8:	f1c4 0400 	rsb	r4, r4, #0
 800eabc:	3c20      	subs	r4, #32
 800eabe:	da35      	bge.n	800eb2c <__aeabi_dmul+0x164>
 800eac0:	340c      	adds	r4, #12
 800eac2:	dc1b      	bgt.n	800eafc <__aeabi_dmul+0x134>
 800eac4:	f104 0414 	add.w	r4, r4, #20
 800eac8:	f1c4 0520 	rsb	r5, r4, #32
 800eacc:	fa00 f305 	lsl.w	r3, r0, r5
 800ead0:	fa20 f004 	lsr.w	r0, r0, r4
 800ead4:	fa01 f205 	lsl.w	r2, r1, r5
 800ead8:	ea40 0002 	orr.w	r0, r0, r2
 800eadc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800eae0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800eae4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800eae8:	fa21 f604 	lsr.w	r6, r1, r4
 800eaec:	eb42 0106 	adc.w	r1, r2, r6
 800eaf0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800eaf4:	bf08      	it	eq
 800eaf6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800eafa:	bd70      	pop	{r4, r5, r6, pc}
 800eafc:	f1c4 040c 	rsb	r4, r4, #12
 800eb00:	f1c4 0520 	rsb	r5, r4, #32
 800eb04:	fa00 f304 	lsl.w	r3, r0, r4
 800eb08:	fa20 f005 	lsr.w	r0, r0, r5
 800eb0c:	fa01 f204 	lsl.w	r2, r1, r4
 800eb10:	ea40 0002 	orr.w	r0, r0, r2
 800eb14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800eb18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800eb1c:	f141 0100 	adc.w	r1, r1, #0
 800eb20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800eb24:	bf08      	it	eq
 800eb26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800eb2a:	bd70      	pop	{r4, r5, r6, pc}
 800eb2c:	f1c4 0520 	rsb	r5, r4, #32
 800eb30:	fa00 f205 	lsl.w	r2, r0, r5
 800eb34:	ea4e 0e02 	orr.w	lr, lr, r2
 800eb38:	fa20 f304 	lsr.w	r3, r0, r4
 800eb3c:	fa01 f205 	lsl.w	r2, r1, r5
 800eb40:	ea43 0302 	orr.w	r3, r3, r2
 800eb44:	fa21 f004 	lsr.w	r0, r1, r4
 800eb48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800eb4c:	fa21 f204 	lsr.w	r2, r1, r4
 800eb50:	ea20 0002 	bic.w	r0, r0, r2
 800eb54:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800eb58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800eb5c:	bf08      	it	eq
 800eb5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800eb62:	bd70      	pop	{r4, r5, r6, pc}
 800eb64:	f094 0f00 	teq	r4, #0
 800eb68:	d10f      	bne.n	800eb8a <__aeabi_dmul+0x1c2>
 800eb6a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800eb6e:	0040      	lsls	r0, r0, #1
 800eb70:	eb41 0101 	adc.w	r1, r1, r1
 800eb74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800eb78:	bf08      	it	eq
 800eb7a:	3c01      	subeq	r4, #1
 800eb7c:	d0f7      	beq.n	800eb6e <__aeabi_dmul+0x1a6>
 800eb7e:	ea41 0106 	orr.w	r1, r1, r6
 800eb82:	f095 0f00 	teq	r5, #0
 800eb86:	bf18      	it	ne
 800eb88:	4770      	bxne	lr
 800eb8a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800eb8e:	0052      	lsls	r2, r2, #1
 800eb90:	eb43 0303 	adc.w	r3, r3, r3
 800eb94:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800eb98:	bf08      	it	eq
 800eb9a:	3d01      	subeq	r5, #1
 800eb9c:	d0f7      	beq.n	800eb8e <__aeabi_dmul+0x1c6>
 800eb9e:	ea43 0306 	orr.w	r3, r3, r6
 800eba2:	4770      	bx	lr
 800eba4:	ea94 0f0c 	teq	r4, ip
 800eba8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800ebac:	bf18      	it	ne
 800ebae:	ea95 0f0c 	teqne	r5, ip
 800ebb2:	d00c      	beq.n	800ebce <__aeabi_dmul+0x206>
 800ebb4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800ebb8:	bf18      	it	ne
 800ebba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800ebbe:	d1d1      	bne.n	800eb64 <__aeabi_dmul+0x19c>
 800ebc0:	ea81 0103 	eor.w	r1, r1, r3
 800ebc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ebc8:	f04f 0000 	mov.w	r0, #0
 800ebcc:	bd70      	pop	{r4, r5, r6, pc}
 800ebce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800ebd2:	bf06      	itte	eq
 800ebd4:	4610      	moveq	r0, r2
 800ebd6:	4619      	moveq	r1, r3
 800ebd8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800ebdc:	d019      	beq.n	800ec12 <__aeabi_dmul+0x24a>
 800ebde:	ea94 0f0c 	teq	r4, ip
 800ebe2:	d102      	bne.n	800ebea <__aeabi_dmul+0x222>
 800ebe4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800ebe8:	d113      	bne.n	800ec12 <__aeabi_dmul+0x24a>
 800ebea:	ea95 0f0c 	teq	r5, ip
 800ebee:	d105      	bne.n	800ebfc <__aeabi_dmul+0x234>
 800ebf0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800ebf4:	bf1c      	itt	ne
 800ebf6:	4610      	movne	r0, r2
 800ebf8:	4619      	movne	r1, r3
 800ebfa:	d10a      	bne.n	800ec12 <__aeabi_dmul+0x24a>
 800ebfc:	ea81 0103 	eor.w	r1, r1, r3
 800ec00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ec04:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800ec08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ec0c:	f04f 0000 	mov.w	r0, #0
 800ec10:	bd70      	pop	{r4, r5, r6, pc}
 800ec12:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800ec16:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800ec1a:	bd70      	pop	{r4, r5, r6, pc}

0800ec1c <__aeabi_ddiv>:
 800ec1c:	b570      	push	{r4, r5, r6, lr}
 800ec1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800ec22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800ec26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800ec2a:	bf1d      	ittte	ne
 800ec2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800ec30:	ea94 0f0c 	teqne	r4, ip
 800ec34:	ea95 0f0c 	teqne	r5, ip
 800ec38:	f000 f8a7 	bleq	800ed8a <__aeabi_ddiv+0x16e>
 800ec3c:	eba4 0405 	sub.w	r4, r4, r5
 800ec40:	ea81 0e03 	eor.w	lr, r1, r3
 800ec44:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800ec48:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800ec4c:	f000 8088 	beq.w	800ed60 <__aeabi_ddiv+0x144>
 800ec50:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800ec54:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800ec58:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800ec5c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800ec60:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800ec64:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800ec68:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800ec6c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800ec70:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800ec74:	429d      	cmp	r5, r3
 800ec76:	bf08      	it	eq
 800ec78:	4296      	cmpeq	r6, r2
 800ec7a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800ec7e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800ec82:	d202      	bcs.n	800ec8a <__aeabi_ddiv+0x6e>
 800ec84:	085b      	lsrs	r3, r3, #1
 800ec86:	ea4f 0232 	mov.w	r2, r2, rrx
 800ec8a:	1ab6      	subs	r6, r6, r2
 800ec8c:	eb65 0503 	sbc.w	r5, r5, r3
 800ec90:	085b      	lsrs	r3, r3, #1
 800ec92:	ea4f 0232 	mov.w	r2, r2, rrx
 800ec96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ec9a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800ec9e:	ebb6 0e02 	subs.w	lr, r6, r2
 800eca2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800eca6:	bf22      	ittt	cs
 800eca8:	1ab6      	subcs	r6, r6, r2
 800ecaa:	4675      	movcs	r5, lr
 800ecac:	ea40 000c 	orrcs.w	r0, r0, ip
 800ecb0:	085b      	lsrs	r3, r3, #1
 800ecb2:	ea4f 0232 	mov.w	r2, r2, rrx
 800ecb6:	ebb6 0e02 	subs.w	lr, r6, r2
 800ecba:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ecbe:	bf22      	ittt	cs
 800ecc0:	1ab6      	subcs	r6, r6, r2
 800ecc2:	4675      	movcs	r5, lr
 800ecc4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800ecc8:	085b      	lsrs	r3, r3, #1
 800ecca:	ea4f 0232 	mov.w	r2, r2, rrx
 800ecce:	ebb6 0e02 	subs.w	lr, r6, r2
 800ecd2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ecd6:	bf22      	ittt	cs
 800ecd8:	1ab6      	subcs	r6, r6, r2
 800ecda:	4675      	movcs	r5, lr
 800ecdc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800ece0:	085b      	lsrs	r3, r3, #1
 800ece2:	ea4f 0232 	mov.w	r2, r2, rrx
 800ece6:	ebb6 0e02 	subs.w	lr, r6, r2
 800ecea:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ecee:	bf22      	ittt	cs
 800ecf0:	1ab6      	subcs	r6, r6, r2
 800ecf2:	4675      	movcs	r5, lr
 800ecf4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800ecf8:	ea55 0e06 	orrs.w	lr, r5, r6
 800ecfc:	d018      	beq.n	800ed30 <__aeabi_ddiv+0x114>
 800ecfe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800ed02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800ed06:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800ed0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800ed0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800ed12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800ed16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800ed1a:	d1c0      	bne.n	800ec9e <__aeabi_ddiv+0x82>
 800ed1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800ed20:	d10b      	bne.n	800ed3a <__aeabi_ddiv+0x11e>
 800ed22:	ea41 0100 	orr.w	r1, r1, r0
 800ed26:	f04f 0000 	mov.w	r0, #0
 800ed2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800ed2e:	e7b6      	b.n	800ec9e <__aeabi_ddiv+0x82>
 800ed30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800ed34:	bf04      	itt	eq
 800ed36:	4301      	orreq	r1, r0
 800ed38:	2000      	moveq	r0, #0
 800ed3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800ed3e:	bf88      	it	hi
 800ed40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800ed44:	f63f aeaf 	bhi.w	800eaa6 <__aeabi_dmul+0xde>
 800ed48:	ebb5 0c03 	subs.w	ip, r5, r3
 800ed4c:	bf04      	itt	eq
 800ed4e:	ebb6 0c02 	subseq.w	ip, r6, r2
 800ed52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800ed56:	f150 0000 	adcs.w	r0, r0, #0
 800ed5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800ed5e:	bd70      	pop	{r4, r5, r6, pc}
 800ed60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800ed64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800ed68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800ed6c:	bfc2      	ittt	gt
 800ed6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 800ed72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800ed76:	bd70      	popgt	{r4, r5, r6, pc}
 800ed78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ed7c:	f04f 0e00 	mov.w	lr, #0
 800ed80:	3c01      	subs	r4, #1
 800ed82:	e690      	b.n	800eaa6 <__aeabi_dmul+0xde>
 800ed84:	ea45 0e06 	orr.w	lr, r5, r6
 800ed88:	e68d      	b.n	800eaa6 <__aeabi_dmul+0xde>
 800ed8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800ed8e:	ea94 0f0c 	teq	r4, ip
 800ed92:	bf08      	it	eq
 800ed94:	ea95 0f0c 	teqeq	r5, ip
 800ed98:	f43f af3b 	beq.w	800ec12 <__aeabi_dmul+0x24a>
 800ed9c:	ea94 0f0c 	teq	r4, ip
 800eda0:	d10a      	bne.n	800edb8 <__aeabi_ddiv+0x19c>
 800eda2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800eda6:	f47f af34 	bne.w	800ec12 <__aeabi_dmul+0x24a>
 800edaa:	ea95 0f0c 	teq	r5, ip
 800edae:	f47f af25 	bne.w	800ebfc <__aeabi_dmul+0x234>
 800edb2:	4610      	mov	r0, r2
 800edb4:	4619      	mov	r1, r3
 800edb6:	e72c      	b.n	800ec12 <__aeabi_dmul+0x24a>
 800edb8:	ea95 0f0c 	teq	r5, ip
 800edbc:	d106      	bne.n	800edcc <__aeabi_ddiv+0x1b0>
 800edbe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800edc2:	f43f aefd 	beq.w	800ebc0 <__aeabi_dmul+0x1f8>
 800edc6:	4610      	mov	r0, r2
 800edc8:	4619      	mov	r1, r3
 800edca:	e722      	b.n	800ec12 <__aeabi_dmul+0x24a>
 800edcc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800edd0:	bf18      	it	ne
 800edd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800edd6:	f47f aec5 	bne.w	800eb64 <__aeabi_dmul+0x19c>
 800edda:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800edde:	f47f af0d 	bne.w	800ebfc <__aeabi_dmul+0x234>
 800ede2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800ede6:	f47f aeeb 	bne.w	800ebc0 <__aeabi_dmul+0x1f8>
 800edea:	e712      	b.n	800ec12 <__aeabi_dmul+0x24a>

0800edec <__gedf2>:
 800edec:	f04f 3cff 	mov.w	ip, #4294967295
 800edf0:	e006      	b.n	800ee00 <__cmpdf2+0x4>
 800edf2:	bf00      	nop

0800edf4 <__ledf2>:
 800edf4:	f04f 0c01 	mov.w	ip, #1
 800edf8:	e002      	b.n	800ee00 <__cmpdf2+0x4>
 800edfa:	bf00      	nop

0800edfc <__cmpdf2>:
 800edfc:	f04f 0c01 	mov.w	ip, #1
 800ee00:	f84d cd04 	str.w	ip, [sp, #-4]!
 800ee04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800ee08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800ee0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800ee10:	bf18      	it	ne
 800ee12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800ee16:	d01b      	beq.n	800ee50 <__cmpdf2+0x54>
 800ee18:	b001      	add	sp, #4
 800ee1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800ee1e:	bf0c      	ite	eq
 800ee20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800ee24:	ea91 0f03 	teqne	r1, r3
 800ee28:	bf02      	ittt	eq
 800ee2a:	ea90 0f02 	teqeq	r0, r2
 800ee2e:	2000      	moveq	r0, #0
 800ee30:	4770      	bxeq	lr
 800ee32:	f110 0f00 	cmn.w	r0, #0
 800ee36:	ea91 0f03 	teq	r1, r3
 800ee3a:	bf58      	it	pl
 800ee3c:	4299      	cmppl	r1, r3
 800ee3e:	bf08      	it	eq
 800ee40:	4290      	cmpeq	r0, r2
 800ee42:	bf2c      	ite	cs
 800ee44:	17d8      	asrcs	r0, r3, #31
 800ee46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800ee4a:	f040 0001 	orr.w	r0, r0, #1
 800ee4e:	4770      	bx	lr
 800ee50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800ee54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800ee58:	d102      	bne.n	800ee60 <__cmpdf2+0x64>
 800ee5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800ee5e:	d107      	bne.n	800ee70 <__cmpdf2+0x74>
 800ee60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800ee64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800ee68:	d1d6      	bne.n	800ee18 <__cmpdf2+0x1c>
 800ee6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800ee6e:	d0d3      	beq.n	800ee18 <__cmpdf2+0x1c>
 800ee70:	f85d 0b04 	ldr.w	r0, [sp], #4
 800ee74:	4770      	bx	lr
 800ee76:	bf00      	nop

0800ee78 <__aeabi_cdrcmple>:
 800ee78:	4684      	mov	ip, r0
 800ee7a:	4610      	mov	r0, r2
 800ee7c:	4662      	mov	r2, ip
 800ee7e:	468c      	mov	ip, r1
 800ee80:	4619      	mov	r1, r3
 800ee82:	4663      	mov	r3, ip
 800ee84:	e000      	b.n	800ee88 <__aeabi_cdcmpeq>
 800ee86:	bf00      	nop

0800ee88 <__aeabi_cdcmpeq>:
 800ee88:	b501      	push	{r0, lr}
 800ee8a:	f7ff ffb7 	bl	800edfc <__cmpdf2>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	bf48      	it	mi
 800ee92:	f110 0f00 	cmnmi.w	r0, #0
 800ee96:	bd01      	pop	{r0, pc}

0800ee98 <__aeabi_dcmpeq>:
 800ee98:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ee9c:	f7ff fff4 	bl	800ee88 <__aeabi_cdcmpeq>
 800eea0:	bf0c      	ite	eq
 800eea2:	2001      	moveq	r0, #1
 800eea4:	2000      	movne	r0, #0
 800eea6:	f85d fb08 	ldr.w	pc, [sp], #8
 800eeaa:	bf00      	nop

0800eeac <__aeabi_dcmplt>:
 800eeac:	f84d ed08 	str.w	lr, [sp, #-8]!
 800eeb0:	f7ff ffea 	bl	800ee88 <__aeabi_cdcmpeq>
 800eeb4:	bf34      	ite	cc
 800eeb6:	2001      	movcc	r0, #1
 800eeb8:	2000      	movcs	r0, #0
 800eeba:	f85d fb08 	ldr.w	pc, [sp], #8
 800eebe:	bf00      	nop

0800eec0 <__aeabi_dcmple>:
 800eec0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800eec4:	f7ff ffe0 	bl	800ee88 <__aeabi_cdcmpeq>
 800eec8:	bf94      	ite	ls
 800eeca:	2001      	movls	r0, #1
 800eecc:	2000      	movhi	r0, #0
 800eece:	f85d fb08 	ldr.w	pc, [sp], #8
 800eed2:	bf00      	nop

0800eed4 <__aeabi_dcmpge>:
 800eed4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800eed8:	f7ff ffce 	bl	800ee78 <__aeabi_cdrcmple>
 800eedc:	bf94      	ite	ls
 800eede:	2001      	movls	r0, #1
 800eee0:	2000      	movhi	r0, #0
 800eee2:	f85d fb08 	ldr.w	pc, [sp], #8
 800eee6:	bf00      	nop

0800eee8 <__aeabi_dcmpgt>:
 800eee8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800eeec:	f7ff ffc4 	bl	800ee78 <__aeabi_cdrcmple>
 800eef0:	bf34      	ite	cc
 800eef2:	2001      	movcc	r0, #1
 800eef4:	2000      	movcs	r0, #0
 800eef6:	f85d fb08 	ldr.w	pc, [sp], #8
 800eefa:	bf00      	nop

0800eefc <__aeabi_d2uiz>:
 800eefc:	004a      	lsls	r2, r1, #1
 800eefe:	d211      	bcs.n	800ef24 <__aeabi_d2uiz+0x28>
 800ef00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800ef04:	d211      	bcs.n	800ef2a <__aeabi_d2uiz+0x2e>
 800ef06:	d50d      	bpl.n	800ef24 <__aeabi_d2uiz+0x28>
 800ef08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800ef0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800ef10:	d40e      	bmi.n	800ef30 <__aeabi_d2uiz+0x34>
 800ef12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800ef16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ef1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800ef1e:	fa23 f002 	lsr.w	r0, r3, r2
 800ef22:	4770      	bx	lr
 800ef24:	f04f 0000 	mov.w	r0, #0
 800ef28:	4770      	bx	lr
 800ef2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800ef2e:	d102      	bne.n	800ef36 <__aeabi_d2uiz+0x3a>
 800ef30:	f04f 30ff 	mov.w	r0, #4294967295
 800ef34:	4770      	bx	lr
 800ef36:	f04f 0000 	mov.w	r0, #0
 800ef3a:	4770      	bx	lr

0800ef3c <__errno>:
 800ef3c:	4b01      	ldr	r3, [pc, #4]	; (800ef44 <__errno+0x8>)
 800ef3e:	6818      	ldr	r0, [r3, #0]
 800ef40:	4770      	bx	lr
 800ef42:	bf00      	nop
 800ef44:	200006ac 	.word	0x200006ac

0800ef48 <__libc_init_array>:
 800ef48:	b570      	push	{r4, r5, r6, lr}
 800ef4a:	4b0e      	ldr	r3, [pc, #56]	; (800ef84 <__libc_init_array+0x3c>)
 800ef4c:	4c0e      	ldr	r4, [pc, #56]	; (800ef88 <__libc_init_array+0x40>)
 800ef4e:	1ae4      	subs	r4, r4, r3
 800ef50:	10a4      	asrs	r4, r4, #2
 800ef52:	2500      	movs	r5, #0
 800ef54:	461e      	mov	r6, r3
 800ef56:	42a5      	cmp	r5, r4
 800ef58:	d004      	beq.n	800ef64 <__libc_init_array+0x1c>
 800ef5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ef5e:	4798      	blx	r3
 800ef60:	3501      	adds	r5, #1
 800ef62:	e7f8      	b.n	800ef56 <__libc_init_array+0xe>
 800ef64:	f7f8 ff22 	bl	8007dac <_init>
 800ef68:	4c08      	ldr	r4, [pc, #32]	; (800ef8c <__libc_init_array+0x44>)
 800ef6a:	4b09      	ldr	r3, [pc, #36]	; (800ef90 <__libc_init_array+0x48>)
 800ef6c:	1ae4      	subs	r4, r4, r3
 800ef6e:	10a4      	asrs	r4, r4, #2
 800ef70:	2500      	movs	r5, #0
 800ef72:	461e      	mov	r6, r3
 800ef74:	42a5      	cmp	r5, r4
 800ef76:	d004      	beq.n	800ef82 <__libc_init_array+0x3a>
 800ef78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ef7c:	4798      	blx	r3
 800ef7e:	3501      	adds	r5, #1
 800ef80:	e7f8      	b.n	800ef74 <__libc_init_array+0x2c>
 800ef82:	bd70      	pop	{r4, r5, r6, pc}
 800ef84:	200006b0 	.word	0x200006b0
 800ef88:	200006b0 	.word	0x200006b0
 800ef8c:	200006b0 	.word	0x200006b0
 800ef90:	200006b0 	.word	0x200006b0

0800ef94 <malloc>:
 800ef94:	4b02      	ldr	r3, [pc, #8]	; (800efa0 <malloc+0xc>)
 800ef96:	4601      	mov	r1, r0
 800ef98:	6818      	ldr	r0, [r3, #0]
 800ef9a:	f000 b863 	b.w	800f064 <_malloc_r>
 800ef9e:	bf00      	nop
 800efa0:	200006ac 	.word	0x200006ac

0800efa4 <free>:
 800efa4:	4b02      	ldr	r3, [pc, #8]	; (800efb0 <free+0xc>)
 800efa6:	4601      	mov	r1, r0
 800efa8:	6818      	ldr	r0, [r3, #0]
 800efaa:	f000 b817 	b.w	800efdc <_free_r>
 800efae:	bf00      	nop
 800efb0:	200006ac 	.word	0x200006ac

0800efb4 <memcpy>:
 800efb4:	b510      	push	{r4, lr}
 800efb6:	1e43      	subs	r3, r0, #1
 800efb8:	440a      	add	r2, r1
 800efba:	4291      	cmp	r1, r2
 800efbc:	d004      	beq.n	800efc8 <memcpy+0x14>
 800efbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efc6:	e7f8      	b.n	800efba <memcpy+0x6>
 800efc8:	bd10      	pop	{r4, pc}

0800efca <memset>:
 800efca:	4402      	add	r2, r0
 800efcc:	4603      	mov	r3, r0
 800efce:	4293      	cmp	r3, r2
 800efd0:	d002      	beq.n	800efd8 <memset+0xe>
 800efd2:	f803 1b01 	strb.w	r1, [r3], #1
 800efd6:	e7fa      	b.n	800efce <memset+0x4>
 800efd8:	4770      	bx	lr
	...

0800efdc <_free_r>:
 800efdc:	b530      	push	{r4, r5, lr}
 800efde:	2900      	cmp	r1, #0
 800efe0:	d03d      	beq.n	800f05e <_free_r+0x82>
 800efe2:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800efe6:	1f0b      	subs	r3, r1, #4
 800efe8:	491d      	ldr	r1, [pc, #116]	; (800f060 <_free_r+0x84>)
 800efea:	2a00      	cmp	r2, #0
 800efec:	bfb8      	it	lt
 800efee:	189b      	addlt	r3, r3, r2
 800eff0:	680a      	ldr	r2, [r1, #0]
 800eff2:	460c      	mov	r4, r1
 800eff4:	b912      	cbnz	r2, 800effc <_free_r+0x20>
 800eff6:	605a      	str	r2, [r3, #4]
 800eff8:	600b      	str	r3, [r1, #0]
 800effa:	bd30      	pop	{r4, r5, pc}
 800effc:	4293      	cmp	r3, r2
 800effe:	d20d      	bcs.n	800f01c <_free_r+0x40>
 800f000:	6819      	ldr	r1, [r3, #0]
 800f002:	1858      	adds	r0, r3, r1
 800f004:	4290      	cmp	r0, r2
 800f006:	bf01      	itttt	eq
 800f008:	585a      	ldreq	r2, [r3, r1]
 800f00a:	1852      	addeq	r2, r2, r1
 800f00c:	601a      	streq	r2, [r3, #0]
 800f00e:	6842      	ldreq	r2, [r0, #4]
 800f010:	605a      	str	r2, [r3, #4]
 800f012:	6023      	str	r3, [r4, #0]
 800f014:	bd30      	pop	{r4, r5, pc}
 800f016:	4299      	cmp	r1, r3
 800f018:	d803      	bhi.n	800f022 <_free_r+0x46>
 800f01a:	460a      	mov	r2, r1
 800f01c:	6851      	ldr	r1, [r2, #4]
 800f01e:	2900      	cmp	r1, #0
 800f020:	d1f9      	bne.n	800f016 <_free_r+0x3a>
 800f022:	6814      	ldr	r4, [r2, #0]
 800f024:	1915      	adds	r5, r2, r4
 800f026:	429d      	cmp	r5, r3
 800f028:	d10a      	bne.n	800f040 <_free_r+0x64>
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	4423      	add	r3, r4
 800f02e:	18d0      	adds	r0, r2, r3
 800f030:	4288      	cmp	r0, r1
 800f032:	6013      	str	r3, [r2, #0]
 800f034:	d113      	bne.n	800f05e <_free_r+0x82>
 800f036:	6808      	ldr	r0, [r1, #0]
 800f038:	4403      	add	r3, r0
 800f03a:	6013      	str	r3, [r2, #0]
 800f03c:	684b      	ldr	r3, [r1, #4]
 800f03e:	e00d      	b.n	800f05c <_free_r+0x80>
 800f040:	d902      	bls.n	800f048 <_free_r+0x6c>
 800f042:	230c      	movs	r3, #12
 800f044:	6003      	str	r3, [r0, #0]
 800f046:	bd30      	pop	{r4, r5, pc}
 800f048:	681c      	ldr	r4, [r3, #0]
 800f04a:	1918      	adds	r0, r3, r4
 800f04c:	4288      	cmp	r0, r1
 800f04e:	bf04      	itt	eq
 800f050:	6808      	ldreq	r0, [r1, #0]
 800f052:	6849      	ldreq	r1, [r1, #4]
 800f054:	6059      	str	r1, [r3, #4]
 800f056:	bf04      	itt	eq
 800f058:	1900      	addeq	r0, r0, r4
 800f05a:	6018      	streq	r0, [r3, #0]
 800f05c:	6053      	str	r3, [r2, #4]
 800f05e:	bd30      	pop	{r4, r5, pc}
 800f060:	200008c0 	.word	0x200008c0

0800f064 <_malloc_r>:
 800f064:	b570      	push	{r4, r5, r6, lr}
 800f066:	1ccc      	adds	r4, r1, #3
 800f068:	f024 0403 	bic.w	r4, r4, #3
 800f06c:	3408      	adds	r4, #8
 800f06e:	2c0c      	cmp	r4, #12
 800f070:	bf38      	it	cc
 800f072:	240c      	movcc	r4, #12
 800f074:	2c00      	cmp	r4, #0
 800f076:	4606      	mov	r6, r0
 800f078:	da03      	bge.n	800f082 <_malloc_r+0x1e>
 800f07a:	230c      	movs	r3, #12
 800f07c:	6033      	str	r3, [r6, #0]
 800f07e:	2000      	movs	r0, #0
 800f080:	bd70      	pop	{r4, r5, r6, pc}
 800f082:	428c      	cmp	r4, r1
 800f084:	d3f9      	bcc.n	800f07a <_malloc_r+0x16>
 800f086:	4a20      	ldr	r2, [pc, #128]	; (800f108 <_malloc_r+0xa4>)
 800f088:	6813      	ldr	r3, [r2, #0]
 800f08a:	4610      	mov	r0, r2
 800f08c:	4619      	mov	r1, r3
 800f08e:	b1a1      	cbz	r1, 800f0ba <_malloc_r+0x56>
 800f090:	680a      	ldr	r2, [r1, #0]
 800f092:	1b12      	subs	r2, r2, r4
 800f094:	d40e      	bmi.n	800f0b4 <_malloc_r+0x50>
 800f096:	2a0b      	cmp	r2, #11
 800f098:	d903      	bls.n	800f0a2 <_malloc_r+0x3e>
 800f09a:	600a      	str	r2, [r1, #0]
 800f09c:	188b      	adds	r3, r1, r2
 800f09e:	508c      	str	r4, [r1, r2]
 800f0a0:	e01f      	b.n	800f0e2 <_malloc_r+0x7e>
 800f0a2:	428b      	cmp	r3, r1
 800f0a4:	bf0d      	iteet	eq
 800f0a6:	685a      	ldreq	r2, [r3, #4]
 800f0a8:	684a      	ldrne	r2, [r1, #4]
 800f0aa:	605a      	strne	r2, [r3, #4]
 800f0ac:	6002      	streq	r2, [r0, #0]
 800f0ae:	bf18      	it	ne
 800f0b0:	460b      	movne	r3, r1
 800f0b2:	e016      	b.n	800f0e2 <_malloc_r+0x7e>
 800f0b4:	460b      	mov	r3, r1
 800f0b6:	6849      	ldr	r1, [r1, #4]
 800f0b8:	e7e9      	b.n	800f08e <_malloc_r+0x2a>
 800f0ba:	4d14      	ldr	r5, [pc, #80]	; (800f10c <_malloc_r+0xa8>)
 800f0bc:	682b      	ldr	r3, [r5, #0]
 800f0be:	b91b      	cbnz	r3, 800f0c8 <_malloc_r+0x64>
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	f000 f825 	bl	800f110 <_sbrk_r>
 800f0c6:	6028      	str	r0, [r5, #0]
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	4621      	mov	r1, r4
 800f0cc:	f000 f820 	bl	800f110 <_sbrk_r>
 800f0d0:	1c42      	adds	r2, r0, #1
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	d0d1      	beq.n	800f07a <_malloc_r+0x16>
 800f0d6:	1cc5      	adds	r5, r0, #3
 800f0d8:	f025 0503 	bic.w	r5, r5, #3
 800f0dc:	4285      	cmp	r5, r0
 800f0de:	d10a      	bne.n	800f0f6 <_malloc_r+0x92>
 800f0e0:	601c      	str	r4, [r3, #0]
 800f0e2:	f103 000b 	add.w	r0, r3, #11
 800f0e6:	1d1a      	adds	r2, r3, #4
 800f0e8:	f020 0007 	bic.w	r0, r0, #7
 800f0ec:	1a82      	subs	r2, r0, r2
 800f0ee:	d00a      	beq.n	800f106 <_malloc_r+0xa2>
 800f0f0:	4251      	negs	r1, r2
 800f0f2:	5099      	str	r1, [r3, r2]
 800f0f4:	bd70      	pop	{r4, r5, r6, pc}
 800f0f6:	4630      	mov	r0, r6
 800f0f8:	1ae9      	subs	r1, r5, r3
 800f0fa:	f000 f809 	bl	800f110 <_sbrk_r>
 800f0fe:	3001      	adds	r0, #1
 800f100:	d0bb      	beq.n	800f07a <_malloc_r+0x16>
 800f102:	462b      	mov	r3, r5
 800f104:	e7ec      	b.n	800f0e0 <_malloc_r+0x7c>
 800f106:	bd70      	pop	{r4, r5, r6, pc}
 800f108:	200008c0 	.word	0x200008c0
 800f10c:	200008bc 	.word	0x200008bc

0800f110 <_sbrk_r>:
 800f110:	b538      	push	{r3, r4, r5, lr}
 800f112:	4c06      	ldr	r4, [pc, #24]	; (800f12c <_sbrk_r+0x1c>)
 800f114:	2300      	movs	r3, #0
 800f116:	4605      	mov	r5, r0
 800f118:	4608      	mov	r0, r1
 800f11a:	6023      	str	r3, [r4, #0]
 800f11c:	f7f8 fe12 	bl	8007d44 <_sbrk>
 800f120:	1c43      	adds	r3, r0, #1
 800f122:	d102      	bne.n	800f12a <_sbrk_r+0x1a>
 800f124:	6823      	ldr	r3, [r4, #0]
 800f126:	b103      	cbz	r3, 800f12a <_sbrk_r+0x1a>
 800f128:	602b      	str	r3, [r5, #0]
 800f12a:	bd38      	pop	{r3, r4, r5, pc}
 800f12c:	200014a8 	.word	0x200014a8

0800f130 <VCU_ConstB>:
 800f130:	48e8a71e 3fefff2e 48e8a71e 3fefff2e     ...H...?...H...?
 800f140:	0000fff8 00000000                       ........

0800f148 <VCU_ConstP>:
 800f148:	00000000 40390000 00000000 00000000     ......9@........
	...
 800f164:	40140000 00000000 404b8000 00000000     ...@......K@....
 800f174:	40640000 47ae147b 3fb47ae1 8f5c28f6     ..d@{..G.z.?.(\.
 800f184:	4008f5c2 47ae147b 3fb47ae1 851eb852     ...@{..G.z.?R...
 800f194:	400851eb 00000000 40060000 c28f5c29     .Q.@.......@)\..
 800f1a4:	401028f5 00000000 c0440000 00000000     .(.@......D.....
 800f1b4:	4072c000 2b020c4a 3fb91687 c083126f     ..r@J..+...?o...
 800f1c4:	3fc5a1ca 00000000 c0440000 00000000     ...?......D.....
 800f1d4:	4077a000 72b020c5 3fdd9168 e353f7cf     ..w@. .rh..?..S.
 800f1e4:	3fe09ba5 00000000 40901800 00000000     ...?.......@....
 800f1f4:	409f5400 00000000 40af0400 00000000     .T.@.......@....
 800f204:	40b73400 00000000 40bee600 a5e353f8     .4.@.......@.S..
 800f214:	3fe8c49b b645a1cb 3ff4fdf3 33333333     ...?..E....?3333
 800f224:	40033333 1eb851ec 400beb85 f1a9fbe7     33.@.Q.....@....
 800f234:	40124dd2 00000000 408fd000 00000000     .M.@.......@....
 800f244:	409f1800 00000000 40aebe00 00000000     ...@.......@....
 800f254:	40b6f300 00000000 40be9600 5a1cac08     ...@.......@...Z
 800f264:	3feb3b64 374bc6a8 3ff64189 a1cac083     d;.?..K7.A.?....
 800f274:	4003b645 851eb852 400c51eb 47ae147b     E..@R....Q.@{..G
 800f284:	40127ae1 00000000 00000000 00000000     .z.@............
	...
 800f2ac:	3fe00000 66666666 3fe66666 00000000     ...?ffffff.?....
 800f2bc:	3ff00000 00000000 00000000 00000000     ...?............
	...
 800f2e4:	3fe00000 66666666 3fe66666 00000000     ...?ffffff.?....
 800f2f4:	3ff00000 00000000 00000000 00000000     ...?............
	...
 800f31c:	3fe00000 66666666 3fe66666 00000000     ...?ffffff.?....
 800f32c:	3ff00000 00000000 00000000 00000000     ...?............
 800f33c:	404e0000 00000000 40518000 00000000     ..N@......Q@....
 800f34c:	40528000 00000000 4052c000 00000000     ..R@......R@....
 800f35c:	40540000 00000000 40554000 00000000     ..T@.....@U@....
	...
 800f374:	40240000 00000000 40568000 00000000     ..$@......V@....
 800f384:	3ff00000 00000000 3fe00000 9999999a     ...?.......?....
 800f394:	3fb99999 9999999a 3fa99999 9999999a     ...?.......?....
 800f3a4:	3fa99999 9999999a 3fa99999 eb851eb8     ...?.......?....
 800f3b4:	3f9eb851 00000000 00000000 00000000     Q..?............
 800f3c4:	00000000 eb851eb8 3f9eb851 eb851eb8     ........Q..?....
 800f3d4:	3f9eb851 9999999a 3fa99999 9999999a     Q..?.......?....
 800f3e4:	3fd99999 9999999a 3fe99999 00000000     ...?.......?....
 800f3f4:	3ff00000 00000000 c0390000 00000000     ...?......9.....
 800f404:	c0140000 00000000 c0080000 00000000     ................
 800f414:	c0000000 00000000 bff00000 00000000     ................
 800f424:	bfe00000 9999999a bfb99999 00000000     ................
 800f434:	00000000 9999999a 3fb99999 00000000     ...........?....
 800f444:	3fe00000 00000000 3ff00000 00000000     ...?.......?....
 800f454:	40000000 00000000 40140000 00000000     ...@.......@....
 800f464:	401c0000 00000000 40390000 00000006     ...@......9@....
 800f474:	00000002 00000100 00000101 01010001     ................
 800f484:	00000000                                ....

0800f488 <g_xmc_vadc_group_array>:
 800f488:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

0800f498 <PWM_MHJ9_IN_compare_config>:
 800f498:	00000000 00000005                       ........

0800f4a0 <PWM_MHJ9_IN_gpio_out_config>:
 800f4a0:	00000098 00010000 00000004              ............

0800f4ac <PWM_MHJ9_OUT_compare_config>:
 800f4ac:	00000000 00000005                       ........

0800f4b4 <PWM_MHJ9_OUT_gpio_out_config>:
 800f4b4:	00000098 00010000 00000004              ............

0800f4c0 <PWM_Waterpump_compare_config>:
 800f4c0:	00000000 00000004                       ........

0800f4c8 <PWM_Waterpump_gpio_out_config>:
 800f4c8:	00000098 00010000 00000004              ............

0800f4d4 <PWM_Fans1_compare_config>:
 800f4d4:	00000000 00000004                       ........

0800f4dc <PWM_Fans1_gpio_out_config>:
 800f4dc:	00000098 00010000 00000004              ............

0800f4e8 <PWM_Fans2_compare_config>:
 800f4e8:	00000000 00000004                       ........

0800f4f0 <PWM_Fans2_gpio_out_config>:
 800f4f0:	00000098 00010000 00000004              ............

0800f4fc <INTERRUPT_Shifting>:
 800f4fc:	01003f04                                .?..

0800f500 <group_init_handle0>:
	...

0800f514 <group_init_handle1>:
	...

0800f528 <group_init_handle2>:
	...

0800f53c <group_init_handle3>:
	...

0800f550 <global_config>:
 800f550:	00000000 00000003 00000000 00000000     ................
	...
 800f568:	454c4449 00000000 09632509 25097525     IDLE.....%c.%u.%
 800f578:	75250975 00000a0d 20726d54 00637653     u.%u....Tmr Svc.
 800f588:	51726d54 00000000                       TmrQ....

0800f590 <EVENT_GENERATOR_Shifting_OGU_Config>:
 800f590:	00000010                                ....

0800f594 <EVENT_DETECTOR_Shifting_ETL_Config>:
 800f594:	00000005 00000237                       ....7...

0800f59c <DIGITAL_IO_Debug_LED>:
 800f59c:	48028000 00000080 00000001 00000000     ...H............
 800f5ac:	00000002                                ....

0800f5b0 <CAN1_Res>:
 800f5b0:	48028100 00000080 00000001 00000000     ...H............
 800f5c0:	00000006                                ....

0800f5c4 <CAN2_Res>:
 800f5c4:	48028100 00000080 00000001 00000000     ...H............
 800f5d4:	0000000e                                ....

0800f5d8 <Signal_DownShift>:
 800f5d8:	48028300 00000008 00000000 00000000     ...H............
 800f5e8:	00000002                                ....

0800f5ec <Signal_UpShift>:
 800f5ec:	48028300 00000008 00000000 00000000     ...H............
 800f5fc:	00000001 01040250 00010000 00000000     ....P...........
 800f60c:	00010000 01010101                       ........

0800f614 <CAN_1_gpio_out>:
 800f614:	48028100 0000000c                       ...H....

0800f61c <CAN_1_gpio_out_config>:
 800f61c:	00000090 00000001 00000002              ............

0800f628 <CAN_1_gpio_in>:
 800f628:	48028100 0000000d                       ...H....

0800f630 <CAN_1_gpio_in_config>:
	...

0800f63c <CAN_1_sr>:
 800f63c:	00000000                                ....

0800f640 <CAN_1_LMO_01_Config>:
 800f640:	200001c0 00000026 00000000              ... &.......

0800f64c <CAN_1_LMO_02_Config>:
 800f64c:	200001e0 00000027 00000000              ... '.......

0800f658 <CAN_1_LMO_03_Config>:
 800f658:	20000200 0000001e 00000000              ... ........

0800f664 <CAN_1_LMO_04_Config>:
 800f664:	20000220 0000001f 00000000               .. ........

0800f670 <CAN_1_LMO_05_Config>:
 800f670:	20000240 00000020 00000000              @..  .......

0800f67c <CAN_1_LMO_06_Config>:
 800f67c:	20000260 00000021 00000000              `.. !.......

0800f688 <CAN_1_LMO_07_Config>:
 800f688:	20000280 00000022 00000000              ... ".......

0800f694 <CAN_1_LMO_08_Config>:
 800f694:	200002a0 00000023 00000000              ... #.......

0800f6a0 <CAN_1>:
 800f6a0:	20000138 48014300 200001b4 0800f640     8.. .C.H... @...
 800f6b0:	0800f64c 0800f658 0800f664 0800f670     L...X...d...p...
 800f6c0:	0800f67c 0800f688 0800f694 00000000     |...............
	...
 800f72c:	0800f63c 0800f614 0800f61c 0800f628     <...........(...
 800f73c:	0800f630 00080102 00000000              0...........

0800f748 <CAN_2_gpio_out>:
 800f748:	48028100 00000004                       ...H....

0800f750 <CAN_2_gpio_out_config>:
 800f750:	00000090 00000001 00000002              ............

0800f75c <CAN_2_gpio_in>:
 800f75c:	48028100 00000005                       ...H....

0800f764 <CAN_2_gpio_in_config>:
	...

0800f770 <CAN_2_sr>:
 800f770:	00000000                                ....

0800f774 <CAN_2_LMO_01_Config>:
 800f774:	200002d0 00000007 00000000              ... ........

0800f780 <CAN_2_LMO_02_Config>:
 800f780:	200002f0 00000008 00000000              ... ........

0800f78c <CAN_2_LMO_03_Config>:
 800f78c:	20000310 00000005 00000000              ... ........

0800f798 <CAN_2_LMO_04_Config>:
 800f798:	20000330 00000006 00000000              0.. ........

0800f7a4 <CAN_2_LMO_05_Config>:
 800f7a4:	20000350 00000016 00000000              P.. ........

0800f7b0 <CAN_2_LMO_06_Config>:
 800f7b0:	20000370 00000015 00000000              p.. ........

0800f7bc <CAN_2_LMO_07_Config>:
 800f7bc:	20000390 00000018 00000000              ... ........

0800f7c8 <CAN_2_LMO_08_Config>:
 800f7c8:	200003b0 00000017 00000000              ... ........

0800f7d4 <CAN_2_LMO_09_Config>:
 800f7d4:	200003d0 00000014 00000000              ... ........

0800f7e0 <CAN_2_LMO_10_Config>:
 800f7e0:	200003f0 00000025 00000000              ... %.......

0800f7ec <CAN_2_LMO_11_Config>:
 800f7ec:	20000410 00000024 00000000              ... $.......

0800f7f8 <CAN_2_LMO_12_Config>:
 800f7f8:	20000430 00000009 00000000              0.. ........

0800f804 <CAN_2_LMO_13_Config>:
 800f804:	20000450 0000003c 00000000              P.. <.......

0800f810 <CAN_2>:
 800f810:	20000138 48014200 200002c0 0800f774     8.. .B.H... t...
 800f820:	0800f780 0800f78c 0800f798 0800f7a4     ................
 800f830:	0800f7b0 0800f7bc 0800f7c8 0800f7d4     ................
 800f840:	0800f7e0 0800f7ec 0800f7f8 0800f804     ................
	...
 800f89c:	0800f770 0800f748 0800f750 0800f75c     p...H...P...\...
 800f8ac:	0800f764 000d0000 00000000              d...........

0800f8b8 <BUS_IO_pin_list>:
 800f8b8:	48028000 00000009 48028000 0000000a     ...H.......H....
 800f8c8:	48028000 00000004 48028000 00000005     ...H.......H....
 800f8d8:	48028000 00000006 48028500 00000002     ...H.......H....
 800f8e8:	48028500 00000007                       ...H....

0800f8f0 <BUS_IO_Input_pin_list>:
 800f8f0:	48028000 00000007 48028000 00000008     ...H.......H....

0800f900 <ANALOG_IO_boardTemp>:
 800f900:	00000000 20000814 48028e00 0000000e     ....... ...H....

0800f910 <ANALOG_IO_pbrakeR>:
 800f910:	00000000 20000815 48028e00 00000006     ....... ...H....

0800f920 <ANALOG_IO_xClutch>:
 800f920:	00000000 20000816 48028e00 00000005     ....... ...H....

0800f930 <ANALOG_IO_fFL>:
 800f930:	00000000 20000817 48028e00 00000002     ....... ...H....

0800f940 <ANALOG_IO_fFR>:
 800f940:	00000000 20000818 48028e00 00000003     ....... ...H....

0800f950 <ANALOG_IO_xRHF>:
 800f950:	00000000 20000819 48028e00 00000004     ....... ...H....

0800f960 <ANALOG_IO_UBat>:
 800f960:	00000000 2000081a 48028e00 00000008     ....... ...H....

0800f970 <ANALOG_IO_xClutchSTW>:
 800f970:	00000000 2000081b 48028e00 00000000     ....... ...H....

0800f980 <ANALOG_IO_TR1_I_WP>:
 800f980:	00000000 2000081c 48028f00 00000002     ....... ...H....

0800f990 <ANALOG_IO_TR2_I_FAN1>:
 800f990:	00000000 2000081d 48028f00 00000003     ....... ...H....

0800f9a0 <ANALOG_IO_TR3_I_FAN2>:
 800f9a0:	00000000 2000081e 48028f00 00000008     ....... ...H....

0800f9b0 <global_iclass_config>:
 800f9b0:	00000000                                ....

0800f9b4 <backgnd_config>:
 800f9b4:	00000005 00000000 00000010 6b736154     ............Task
 800f9c4:	7665525f 65766965 00000000 6b736154     _Reveive....Task
 800f9d4:	776f4c5f 6f697250 6b736154 00000000     _LowPrioTask....
 800f9e4:	6b736154 6172545f 696d736e 00000074     Task_Transmit...
 800f9f4:	6b736154 6172545f 696d736e 6f697373     Task_Transmissio
 800fa04:	0000006e 6b736154 656e4f5f 706f6f4c     n...Task_OneLoop
 800fa14:	6b736154 00000000 656d6954 72545f72     Task....Timer_Tr
 800fa24:	6d736e61 69737369 00006e6f 646f6d66     ansmission..fmod
 800fa34:	00000000                                ....

0800fa38 <Zero>:
	...
 800fa44:	80000000 00000043                       ....C...
