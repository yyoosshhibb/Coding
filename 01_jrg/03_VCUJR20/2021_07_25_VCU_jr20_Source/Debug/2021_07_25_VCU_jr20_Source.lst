
2021_07_25_VCU_jr20_Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000faec  08000000  0c000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00020000  2**0
                  ALLOC
  2 .data         000006b0  20000000  0c00faec  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000e00  200006b0  0c01019c  000186b0  2**3
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  0001ffc0  2**2
                  ALLOC
  5 .debug_aranges 00001aa8  00000000  00000000  000186b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00040c75  00000000  00000000  0001a158  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006d4a  00000000  00000000  0005adcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000113e7  00000000  00000000  00061b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000696c  00000000  00000000  00072f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010739  00000000  00000000  0007986c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d08b  00000000  00000000  00089fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000015f8  00000000  00000000  00097030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 000011fb  00000000  00000000  00098628  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 85 cc 00 08 75 ad 00 08     ............u...
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	81 85 00 08 b1 02 00 08 00 00 00 00 c1 87 00 08     ................
 800003c:	31 88 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     1...............
 800004c:	b1 02 00 08 49 d7 00 08 b1 02 00 08 b1 02 00 08     ....I...........
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00faec 	.word	0x0c00faec
 800024c:	20000000 	.word	0x20000000
 8000250:	000006b0 	.word	0x000006b0
 8000254:	0c01019c 	.word	0x0c01019c
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00faec 	.word	0x0c00faec
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00faec 	.word	0x0c00faec
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200006b0 	.word	0x200006b0
 800027c:	00000dfc 	.word	0x00000dfc
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	0800efe9 	.word	0x0800efe9
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	0800e259 	.word	0x0800e259

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f00a fded 	bl	800aea4 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f00a fe7f 	bl	800afcc <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f00a fe5e 	bl	800afb8 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <FUNC_Brakelight>:
          /* Output and update for atomic system: '<Root>/Brakelight' */
      
              
  
        void FUNC_Brakelight(void)
  {
 80003a8:	b598      	push	{r3, r4, r7, lr}
 80003aa:	af00      	add	r7, sp, #0


                                /* RelationalOperator: '<S1>/Relational Operator' incorporates:
 *  Constant: '<S1>/Constant'
 */
/*@>c966*/VCU_B./*@>cafc*/RelationalOperator_c/*@>6a8b*/ = (/*@>c96c*/VCU_B./*@>caff*/Add1_m/*@>6a8a*/ > /*@>c6da*/5.0);
 80003ac:	4b20      	ldr	r3, [pc, #128]	; (8000430 <FUNC_Brakelight+0x88>)
 80003ae:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80003b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003b6:	2101      	movs	r1, #1
 80003b8:	460c      	mov	r4, r1
 80003ba:	4610      	mov	r0, r2
 80003bc:	4619      	mov	r1, r3
 80003be:	f04f 0200 	mov.w	r2, #0
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <FUNC_Brakelight+0x8c>)
 80003c4:	f00e fde0 	bl	800ef88 <__aeabi_dcmpgt>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d101      	bne.n	80003d2 <FUNC_Brakelight+0x2a>
 80003ce:	2300      	movs	r3, #0
 80003d0:	461c      	mov	r4, r3
 80003d2:	b2e3      	uxtb	r3, r4
 80003d4:	461a      	mov	r2, r3
 80003d6:	4b16      	ldr	r3, [pc, #88]	; (8000430 <FUNC_Brakelight+0x88>)
 80003d8:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
/* RelationalOperator: '<S1>/Relational Operator1' incorporates:
 *  Constant: '<S1>/Constant'
 */
/*@>c972*/VCU_B./*@>cb02*/RelationalOperator1_b/*@>6a8f*/ = (/*@>c6db*/5.0/*@>6a8e*/ < /*@>c978*/VCU_B./*@>cb05*/Sensitivity1538mVbar);
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <FUNC_Brakelight+0x88>)
 80003de:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80003e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003e6:	2101      	movs	r1, #1
 80003e8:	460c      	mov	r4, r1
 80003ea:	4610      	mov	r0, r2
 80003ec:	4619      	mov	r1, r3
 80003ee:	f04f 0200 	mov.w	r2, #0
 80003f2:	4b10      	ldr	r3, [pc, #64]	; (8000434 <FUNC_Brakelight+0x8c>)
 80003f4:	f00e fdc8 	bl	800ef88 <__aeabi_dcmpgt>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d101      	bne.n	8000402 <FUNC_Brakelight+0x5a>
 80003fe:	2300      	movs	r3, #0
 8000400:	461c      	mov	r4, r3
 8000402:	b2e3      	uxtb	r3, r4
 8000404:	461a      	mov	r2, r3
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <FUNC_Brakelight+0x88>)
 8000408:	f883 2785 	strb.w	r2, [r3, #1925]	; 0x785
/* Logic: '<S1>/Logical Operator' */
/*@>c97e*/VCU_B./*@>cb08*/Brakelight_f/*@>6a95*/ = (/*@>c984*/VCU_B./*@>cb0b*/RelationalOperator_c/*@>6a94*/ || /*@>c98a*/VCU_B./*@>cb0e*/RelationalOperator1_b);
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <FUNC_Brakelight+0x88>)
 800040e:	f893 3784 	ldrb.w	r3, [r3, #1924]	; 0x784
 8000412:	2b00      	cmp	r3, #0
 8000414:	d104      	bne.n	8000420 <FUNC_Brakelight+0x78>
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <FUNC_Brakelight+0x88>)
 8000418:	f893 3785 	ldrb.w	r3, [r3, #1925]	; 0x785
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <FUNC_Brakelight+0x7c>
 8000420:	2301      	movs	r3, #1
 8000422:	e000      	b.n	8000426 <FUNC_Brakelight+0x7e>
 8000424:	2300      	movs	r3, #0
 8000426:	b2da      	uxtb	r2, r3
 8000428:	4b01      	ldr	r3, [pc, #4]	; (8000430 <FUNC_Brakelight+0x88>)
 800042a:	f883 2786 	strb.w	r2, [r3, #1926]	; 0x786


        
    
      
          }
 800042e:	bd98      	pop	{r3, r4, r7, pc}
 8000430:	200008c8 	.word	0x200008c8
 8000434:	40140000 	.word	0x40140000

08000438 <FUNC_InputData>:
          /* Output and update for atomic system: '<Root>/Input Data' */
      
              
  
        void FUNC_InputData(void)
  {
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b083      	sub	sp, #12
 800043c:	af02      	add	r7, sp, #8
  



                                /* DataStoreRead: '<S8>/Data Store Read1' */
/*@>fbb1*/VCU_B./*@>110e3*/DataStoreRead1_d/*@>6aaa*/ = /*@>102ca*/VCU_DW./*@>113fb*/VAR_IN_p_brake_F_LSB;
 800043e:	4bc0      	ldr	r3, [pc, #768]	; (8000740 <FUNC_InputData+0x308>)
 8000440:	f893 2113 	ldrb.w	r2, [r3, #275]	; 0x113
 8000444:	4bbf      	ldr	r3, [pc, #764]	; (8000744 <FUNC_InputData+0x30c>)
 8000446:	f883 26a2 	strb.w	r2, [r3, #1698]	; 0x6a2
/* DataStoreRead: '<S8>/Data Store Read4' */
/*@>fbb7*/VCU_B./*@>110e6*/DataStoreRead4_p/*@>6aac*/ = /*@>102d0*/VCU_DW./*@>113fe*/VAR_IN_p_brake_F_MSB;
 800044a:	4bbd      	ldr	r3, [pc, #756]	; (8000740 <FUNC_InputData+0x308>)
 800044c:	f893 2116 	ldrb.w	r2, [r3, #278]	; 0x116
 8000450:	4bbc      	ldr	r3, [pc, #752]	; (8000744 <FUNC_InputData+0x30c>)
 8000452:	f883 26a3 	strb.w	r2, [r3, #1699]	; 0x6a3
/* Gain: '<S16>/Gain' */
/*@>fbbd*/VCU_B./*@>110e9*/Gain_d/*@>6ab4*/ = /*@>e7fe*/(uint16_T)(/*@>fbc3*/VCU_B./*@>110ec*/DataStoreRead4_p/*@>e7e2*/ << /*@>e7e1*/7);
 8000456:	4bbb      	ldr	r3, [pc, #748]	; (8000744 <FUNC_InputData+0x30c>)
 8000458:	f893 36a3 	ldrb.w	r3, [r3, #1699]	; 0x6a3
 800045c:	b29b      	uxth	r3, r3
 800045e:	01db      	lsls	r3, r3, #7
 8000460:	b29a      	uxth	r2, r3
 8000462:	4bb8      	ldr	r3, [pc, #736]	; (8000744 <FUNC_InputData+0x30c>)
 8000464:	f8a3 266c 	strh.w	r2, [r3, #1644]	; 0x66c
/* Sum: '<S16>/Add' */
/*@>fbc9*/VCU_B./*@>110ef*/Add_a/*@>88ce*/ = /*@>e7d2*/(uint16_T)(((/*@>e803*/(uint32_T)/*@>fbcf*/VCU_B./*@>110f2*/Gain_d/*@>e7d9*/ << /*@>e7d8*/1)/*@>88ca*/ + /*@>fbd5*/VCU_B./*@>110f5*/DataStoreRead1_d)/*@>e7d0*/ >> /*@>e7cf*/1);
 8000468:	4bb6      	ldr	r3, [pc, #728]	; (8000744 <FUNC_InputData+0x30c>)
 800046a:	f8b3 366c 	ldrh.w	r3, [r3, #1644]	; 0x66c
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	4ab4      	ldr	r2, [pc, #720]	; (8000744 <FUNC_InputData+0x30c>)
 8000472:	f892 26a2 	ldrb.w	r2, [r2, #1698]	; 0x6a2
 8000476:	4413      	add	r3, r2
 8000478:	085b      	lsrs	r3, r3, #1
 800047a:	b29a      	uxth	r2, r3
 800047c:	4bb1      	ldr	r3, [pc, #708]	; (8000744 <FUNC_InputData+0x30c>)
 800047e:	f8a3 266e 	strh.w	r2, [r3, #1646]	; 0x66e
/* DataTypeConversion: '<S16>/Data Type Conversion' */
/*@>fbdb*/VCU_B./*@>110f8*/DataTypeConversion/*@>6abc*/ = /*@>f6f3*/(uint16_T)(/*@>fbe1*/VCU_B./*@>110fb*/Add_a/*@>e7c6*/ << /*@>f2f6*/1);
 8000482:	4bb0      	ldr	r3, [pc, #704]	; (8000744 <FUNC_InputData+0x30c>)
 8000484:	f8b3 366e 	ldrh.w	r3, [r3, #1646]	; 0x66e
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	b29a      	uxth	r2, r3
 800048c:	4bad      	ldr	r3, [pc, #692]	; (8000744 <FUNC_InputData+0x30c>)
 800048e:	f8a3 265a 	strh.w	r2, [r3, #1626]	; 0x65a
/* Gain: '<S15>/Factor' */
/*@>fbe7*/VCU_B./*@>110fe*/Factor_g/*@>6ac4*/ = /*@>e7ee*/64173U/*@>e7bf*/ * /*@>fbed*/VCU_B./*@>11101*/DataTypeConversion;
 8000492:	4bac      	ldr	r3, [pc, #688]	; (8000744 <FUNC_InputData+0x30c>)
 8000494:	f8b3 365a 	ldrh.w	r3, [r3, #1626]	; 0x65a
 8000498:	461a      	mov	r2, r3
 800049a:	f64f 23ad 	movw	r3, #64173	; 0xfaad
 800049e:	fb03 f302 	mul.w	r3, r3, r2
 80004a2:	4aa8      	ldr	r2, [pc, #672]	; (8000744 <FUNC_InputData+0x30c>)
 80004a4:	f8c2 362c 	str.w	r3, [r2, #1580]	; 0x62c
/* Sum: '<S15>/Add1' incorporates:
 *  Constant: '<S15>/Offset'
 */
/*@>fbf3*/VCU_B./*@>11104*/Add1_m/*@>88d5*/ = /*@>e810*/(real_T)/*@>fbf9*/VCU_B./*@>11107*/Factor_g/*@>e7b8*/ * /*@>e7b7*/2.384185791015625E-7/*@>88d2*/ + /*@>e61e*/-20.0;
 80004a8:	4ba6      	ldr	r3, [pc, #664]	; (8000744 <FUNC_InputData+0x30c>)
 80004aa:	f8d3 362c 	ldr.w	r3, [r3, #1580]	; 0x62c
 80004ae:	4618      	mov	r0, r3
 80004b0:	f00e fa64 	bl	800e97c <__aeabi_ui2d>
 80004b4:	4602      	mov	r2, r0
 80004b6:	460b      	mov	r3, r1
 80004b8:	4610      	mov	r0, r2
 80004ba:	4619      	mov	r1, r3
 80004bc:	f04f 0200 	mov.w	r2, #0
 80004c0:	4ba1      	ldr	r3, [pc, #644]	; (8000748 <FUNC_InputData+0x310>)
 80004c2:	f00e fad1 	bl	800ea68 <__aeabi_dmul>
 80004c6:	4602      	mov	r2, r0
 80004c8:	460b      	mov	r3, r1
 80004ca:	4610      	mov	r0, r2
 80004cc:	4619      	mov	r1, r3
 80004ce:	f04f 0200 	mov.w	r2, #0
 80004d2:	4b9e      	ldr	r3, [pc, #632]	; (800074c <FUNC_InputData+0x314>)
 80004d4:	f00e f914 	bl	800e700 <__aeabi_dsub>
 80004d8:	4602      	mov	r2, r0
 80004da:	460b      	mov	r3, r1
 80004dc:	4999      	ldr	r1, [pc, #612]	; (8000744 <FUNC_InputData+0x30c>)
 80004de:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 80004e2:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S8>/Data Store Read2' */
/*@>fbff*/VCU_B./*@>1110a*/DataStoreRead2/*@>6acb*/ = /*@>102d6*/VCU_DW./*@>11401*/VAR_IN_ABS_BL_switch;
 80004e6:	4b96      	ldr	r3, [pc, #600]	; (8000740 <FUNC_InputData+0x308>)
 80004e8:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
 80004ec:	4b95      	ldr	r3, [pc, #596]	; (8000744 <FUNC_InputData+0x30c>)
 80004ee:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
/* DataTypeConversion: '<S8>/Data Type Conversion2' */
/*@>fc05*/VCU_B./*@>1110d*/ABS_BL_switch/*@>6ace*/ = /*@>fc0b*/VCU_B./*@>11110*/DataStoreRead2;
 80004f2:	4b94      	ldr	r3, [pc, #592]	; (8000744 <FUNC_InputData+0x30c>)
 80004f4:	f893 36a4 	ldrb.w	r3, [r3, #1700]	; 0x6a4
 80004f8:	4618      	mov	r0, r3
 80004fa:	f00e fa3f 	bl	800e97c <__aeabi_ui2d>
 80004fe:	4602      	mov	r2, r0
 8000500:	460b      	mov	r3, r1
 8000502:	4990      	ldr	r1, [pc, #576]	; (8000744 <FUNC_InputData+0x30c>)
 8000504:	f501 6184 	add.w	r1, r1, #1056	; 0x420
 8000508:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S8>/Data Store Read3' */
/*@>fc11*/VCU_B./*@>11113*/DataStoreRead3_l/*@>6ad0*/ = /*@>102dc*/VCU_DW./*@>11404*/VAR_IN_ABS_switchstate;
 800050c:	4b8c      	ldr	r3, [pc, #560]	; (8000740 <FUNC_InputData+0x308>)
 800050e:	f893 2115 	ldrb.w	r2, [r3, #277]	; 0x115
 8000512:	4b8c      	ldr	r3, [pc, #560]	; (8000744 <FUNC_InputData+0x30c>)
 8000514:	f883 26a5 	strb.w	r2, [r3, #1701]	; 0x6a5
/* DataTypeConversion: '<S8>/Data Type Conversion' */
/*@>fc17*/VCU_B./*@>11116*/ABS_switchstate/*@>6ad3*/ = /*@>fc1d*/VCU_B./*@>11119*/DataStoreRead3_l;
 8000518:	4b8a      	ldr	r3, [pc, #552]	; (8000744 <FUNC_InputData+0x30c>)
 800051a:	f893 36a5 	ldrb.w	r3, [r3, #1701]	; 0x6a5
 800051e:	4618      	mov	r0, r3
 8000520:	f00e fa2c 	bl	800e97c <__aeabi_ui2d>
 8000524:	4602      	mov	r2, r0
 8000526:	460b      	mov	r3, r1
 8000528:	4986      	ldr	r1, [pc, #536]	; (8000744 <FUNC_InputData+0x30c>)
 800052a:	f501 6185 	add.w	r1, r1, #1064	; 0x428
 800052e:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S8>/Data Store Read5' */
/*@>fc23*/VCU_B./*@>1111c*/DataStoreRead5_d/*@>6ad5*/ = /*@>102e2*/VCU_DW./*@>11407*/VAR_IN_ABS_EBD_Lamp;
 8000532:	4b83      	ldr	r3, [pc, #524]	; (8000740 <FUNC_InputData+0x308>)
 8000534:	f893 2117 	ldrb.w	r2, [r3, #279]	; 0x117
 8000538:	4b82      	ldr	r3, [pc, #520]	; (8000744 <FUNC_InputData+0x30c>)
 800053a:	f883 26a6 	strb.w	r2, [r3, #1702]	; 0x6a6
/* DataTypeConversion: '<S8>/Data Type Conversion4' */
/*@>fc29*/VCU_B./*@>1111f*/ABS_EBD_Lamp/*@>6ad8*/ = /*@>fc2f*/VCU_B./*@>11122*/DataStoreRead5_d;
 800053e:	4b81      	ldr	r3, [pc, #516]	; (8000744 <FUNC_InputData+0x30c>)
 8000540:	f893 36a6 	ldrb.w	r3, [r3, #1702]	; 0x6a6
 8000544:	4618      	mov	r0, r3
 8000546:	f00e fa19 	bl	800e97c <__aeabi_ui2d>
 800054a:	4602      	mov	r2, r0
 800054c:	460b      	mov	r3, r1
 800054e:	497d      	ldr	r1, [pc, #500]	; (8000744 <FUNC_InputData+0x30c>)
 8000550:	f501 6186 	add.w	r1, r1, #1072	; 0x430
 8000554:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S8>/Data Store Read6' */
/*@>fc35*/VCU_B./*@>11125*/DataStoreRead6_j/*@>6ada*/ = /*@>102e8*/VCU_DW./*@>1140a*/VAR_IN_ABS_active;
 8000558:	4b79      	ldr	r3, [pc, #484]	; (8000740 <FUNC_InputData+0x308>)
 800055a:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 800055e:	4b79      	ldr	r3, [pc, #484]	; (8000744 <FUNC_InputData+0x30c>)
 8000560:	f883 26a7 	strb.w	r2, [r3, #1703]	; 0x6a7
/* DataTypeConversion: '<S8>/Data Type Conversion3' */
/*@>fc3b*/VCU_B./*@>11128*/ABS_active/*@>6add*/ = /*@>fc41*/VCU_B./*@>1112b*/DataStoreRead6_j;
 8000564:	4b77      	ldr	r3, [pc, #476]	; (8000744 <FUNC_InputData+0x30c>)
 8000566:	f893 36a7 	ldrb.w	r3, [r3, #1703]	; 0x6a7
 800056a:	4618      	mov	r0, r3
 800056c:	f00e fa06 	bl	800e97c <__aeabi_ui2d>
 8000570:	4602      	mov	r2, r0
 8000572:	460b      	mov	r3, r1
 8000574:	4973      	ldr	r1, [pc, #460]	; (8000744 <FUNC_InputData+0x30c>)
 8000576:	f501 6187 	add.w	r1, r1, #1080	; 0x438
 800057a:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S8>/Data Store Read7' */
/*@>fc47*/VCU_B./*@>1112e*/DataStoreRead7_l/*@>6adf*/ = /*@>102ee*/VCU_DW./*@>1140d*/VAR_IN_ABS_Lamp;
 800057e:	4b70      	ldr	r3, [pc, #448]	; (8000740 <FUNC_InputData+0x308>)
 8000580:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8000584:	4b6f      	ldr	r3, [pc, #444]	; (8000744 <FUNC_InputData+0x30c>)
 8000586:	f883 26a8 	strb.w	r2, [r3, #1704]	; 0x6a8
/* DataTypeConversion: '<S8>/Data Type Conversion5' */
/*@>fc4d*/VCU_B./*@>11131*/ABS_Lamp/*@>6ae2*/ = /*@>fc53*/VCU_B./*@>11134*/DataStoreRead7_l;
 800058a:	4b6e      	ldr	r3, [pc, #440]	; (8000744 <FUNC_InputData+0x30c>)
 800058c:	f893 36a8 	ldrb.w	r3, [r3, #1704]	; 0x6a8
 8000590:	4618      	mov	r0, r3
 8000592:	f00e f9f3 	bl	800e97c <__aeabi_ui2d>
 8000596:	4602      	mov	r2, r0
 8000598:	460b      	mov	r3, r1
 800059a:	496a      	ldr	r1, [pc, #424]	; (8000744 <FUNC_InputData+0x30c>)
 800059c:	f501 6188 	add.w	r1, r1, #1088	; 0x440
 80005a0:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S9>/Data Store Read5' */
/*@>fc59*/VCU_B./*@>11137*/DataStoreRead5_n/*@>6ae4*/ = /*@>102f4*/VCU_DW./*@>11410*/VAR_IN_n_wheel_FL_mpros_LSB;
 80005a4:	4b66      	ldr	r3, [pc, #408]	; (8000740 <FUNC_InputData+0x308>)
 80005a6:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
 80005aa:	4b66      	ldr	r3, [pc, #408]	; (8000744 <FUNC_InputData+0x30c>)
 80005ac:	f883 26a9 	strb.w	r2, [r3, #1705]	; 0x6a9
/* DataStoreRead: '<S9>/Data Store Read1' */
/*@>fc5f*/VCU_B./*@>1113a*/DataStoreRead1_k/*@>6ae6*/ = /*@>102fa*/VCU_DW./*@>11413*/VAR_IN_n_wheel_FL_mpros_MSB;
 80005b0:	4b63      	ldr	r3, [pc, #396]	; (8000740 <FUNC_InputData+0x308>)
 80005b2:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 80005b6:	4b63      	ldr	r3, [pc, #396]	; (8000744 <FUNC_InputData+0x30c>)
 80005b8:	f883 26aa 	strb.w	r2, [r3, #1706]	; 0x6aa
/* Gain: '<S21>/Gain' */
/*@>fc65*/VCU_B./*@>1113d*/Gain_i2/*@>6aee*/ = /*@>e832*/(uint16_T)(/*@>fc6b*/VCU_B./*@>11140*/DataStoreRead1_k/*@>e7b3*/ << /*@>e7b2*/7);
 80005bc:	4b61      	ldr	r3, [pc, #388]	; (8000744 <FUNC_InputData+0x30c>)
 80005be:	f893 36aa 	ldrb.w	r3, [r3, #1706]	; 0x6aa
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	01db      	lsls	r3, r3, #7
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	4b5e      	ldr	r3, [pc, #376]	; (8000744 <FUNC_InputData+0x30c>)
 80005ca:	f8a3 2670 	strh.w	r2, [r3, #1648]	; 0x670
/* Sum: '<S21>/Add' */
/*@>fc71*/VCU_B./*@>11143*/Add_li/*@>88de*/ = /*@>e7a3*/(uint16_T)(((/*@>e837*/(uint32_T)/*@>fc77*/VCU_B./*@>11146*/Gain_i2/*@>e7aa*/ << /*@>e7a9*/1)/*@>88da*/ + /*@>fc7d*/VCU_B./*@>11149*/DataStoreRead5_n)/*@>e7a1*/ >> /*@>e7a0*/1);
 80005ce:	4b5d      	ldr	r3, [pc, #372]	; (8000744 <FUNC_InputData+0x30c>)
 80005d0:	f8b3 3670 	ldrh.w	r3, [r3, #1648]	; 0x670
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	4a5b      	ldr	r2, [pc, #364]	; (8000744 <FUNC_InputData+0x30c>)
 80005d8:	f892 26a9 	ldrb.w	r2, [r2, #1705]	; 0x6a9
 80005dc:	4413      	add	r3, r2
 80005de:	085b      	lsrs	r3, r3, #1
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	4b58      	ldr	r3, [pc, #352]	; (8000744 <FUNC_InputData+0x30c>)
 80005e4:	f8a3 2672 	strh.w	r2, [r3, #1650]	; 0x672
/* DataTypeConversion: '<S21>/Data Type Conversion' */
/*@>fc83*/VCU_B./*@>1114c*/DataTypeConversion_a/*@>6af6*/ = /*@>f6f2*/(uint16_T)(/*@>fc89*/VCU_B./*@>1114f*/Add_li/*@>e797*/ << /*@>f2f8*/1);
 80005e8:	4b56      	ldr	r3, [pc, #344]	; (8000744 <FUNC_InputData+0x30c>)
 80005ea:	f8b3 3672 	ldrh.w	r3, [r3, #1650]	; 0x672
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	4b54      	ldr	r3, [pc, #336]	; (8000744 <FUNC_InputData+0x30c>)
 80005f4:	f8a3 265c 	strh.w	r2, [r3, #1628]	; 0x65c
/* Gain: '<S17>/Factor' */
/*@>fc8f*/VCU_B./*@>11152*/Factor_br/*@>6afe*/ = /*@>e841*/(uint32_T)/*@>fc95*/VCU_B./*@>11155*/DataTypeConversion_a/*@>e792*/ << /*@>e791*/15;
 80005f8:	4b52      	ldr	r3, [pc, #328]	; (8000744 <FUNC_InputData+0x30c>)
 80005fa:	f8b3 365c 	ldrh.w	r3, [r3, #1628]	; 0x65c
 80005fe:	03db      	lsls	r3, r3, #15
 8000600:	4a50      	ldr	r2, [pc, #320]	; (8000744 <FUNC_InputData+0x30c>)
 8000602:	f8c2 3630 	str.w	r3, [r2, #1584]	; 0x630
/* Sum: '<S17>/Add1' */
/*@>fc9b*/VCU_B./*@>11158*/Add1_k/*@>88e5*/ = /*@>e845*/(real_T)/*@>fca1*/VCU_B./*@>1115b*/Factor_br/*@>e787*/ * /*@>e786*/4.76837158203125E-7;
 8000606:	4b4f      	ldr	r3, [pc, #316]	; (8000744 <FUNC_InputData+0x30c>)
 8000608:	f8d3 3630 	ldr.w	r3, [r3, #1584]	; 0x630
 800060c:	4618      	mov	r0, r3
 800060e:	f00e f9b5 	bl	800e97c <__aeabi_ui2d>
 8000612:	4602      	mov	r2, r0
 8000614:	460b      	mov	r3, r1
 8000616:	4610      	mov	r0, r2
 8000618:	4619      	mov	r1, r3
 800061a:	f04f 0200 	mov.w	r2, #0
 800061e:	4b4c      	ldr	r3, [pc, #304]	; (8000750 <FUNC_InputData+0x318>)
 8000620:	f00e fa22 	bl	800ea68 <__aeabi_dmul>
 8000624:	4602      	mov	r2, r0
 8000626:	460b      	mov	r3, r1
 8000628:	4946      	ldr	r1, [pc, #280]	; (8000744 <FUNC_InputData+0x30c>)
 800062a:	f501 6189 	add.w	r1, r1, #1096	; 0x448
 800062e:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S9>/Data Store Read2' */
/*@>fca7*/VCU_B./*@>1115e*/DataStoreRead2_n/*@>6b05*/ = /*@>10300*/VCU_DW./*@>11416*/VAR_IN_n_wheel_FR_mpros_LSB;
 8000632:	4b43      	ldr	r3, [pc, #268]	; (8000740 <FUNC_InputData+0x308>)
 8000634:	f893 211b 	ldrb.w	r2, [r3, #283]	; 0x11b
 8000638:	4b42      	ldr	r3, [pc, #264]	; (8000744 <FUNC_InputData+0x30c>)
 800063a:	f883 26ab 	strb.w	r2, [r3, #1707]	; 0x6ab
/* DataStoreRead: '<S9>/Data Store Read3' */
/*@>fcad*/VCU_B./*@>11161*/DataStoreRead3_k/*@>6b07*/ = /*@>10306*/VCU_DW./*@>11419*/VAR_IN_n_wheel_FR_mpros_MSB;
 800063e:	4b40      	ldr	r3, [pc, #256]	; (8000740 <FUNC_InputData+0x308>)
 8000640:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 8000644:	4b3f      	ldr	r3, [pc, #252]	; (8000744 <FUNC_InputData+0x30c>)
 8000646:	f883 26ac 	strb.w	r2, [r3, #1708]	; 0x6ac
/* Gain: '<S22>/Gain' */
/*@>fcb3*/VCU_B./*@>11164*/Gain_e/*@>6b0f*/ = /*@>e84e*/(uint16_T)(/*@>fcb9*/VCU_B./*@>11167*/DataStoreRead3_k/*@>e782*/ << /*@>e781*/7);
 800064a:	4b3e      	ldr	r3, [pc, #248]	; (8000744 <FUNC_InputData+0x30c>)
 800064c:	f893 36ac 	ldrb.w	r3, [r3, #1708]	; 0x6ac
 8000650:	b29b      	uxth	r3, r3
 8000652:	01db      	lsls	r3, r3, #7
 8000654:	b29a      	uxth	r2, r3
 8000656:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <FUNC_InputData+0x30c>)
 8000658:	f8a3 2674 	strh.w	r2, [r3, #1652]	; 0x674
/* Sum: '<S22>/Add' */
/*@>fcbf*/VCU_B./*@>1116a*/Add_f/*@>88ee*/ = /*@>e772*/(uint16_T)(((/*@>e853*/(uint32_T)/*@>fcc5*/VCU_B./*@>1116d*/Gain_e/*@>e779*/ << /*@>e778*/1)/*@>88ea*/ + /*@>fccb*/VCU_B./*@>11170*/DataStoreRead2_n)/*@>e770*/ >> /*@>e76f*/1);
 800065c:	4b39      	ldr	r3, [pc, #228]	; (8000744 <FUNC_InputData+0x30c>)
 800065e:	f8b3 3674 	ldrh.w	r3, [r3, #1652]	; 0x674
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4a37      	ldr	r2, [pc, #220]	; (8000744 <FUNC_InputData+0x30c>)
 8000666:	f892 26ab 	ldrb.w	r2, [r2, #1707]	; 0x6ab
 800066a:	4413      	add	r3, r2
 800066c:	085b      	lsrs	r3, r3, #1
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b34      	ldr	r3, [pc, #208]	; (8000744 <FUNC_InputData+0x30c>)
 8000672:	f8a3 2676 	strh.w	r2, [r3, #1654]	; 0x676
/* DataTypeConversion: '<S22>/Data Type Conversion' */
/*@>fcd1*/VCU_B./*@>11173*/DataTypeConversion_l/*@>6b17*/ = /*@>f6f1*/(uint16_T)(/*@>fcd7*/VCU_B./*@>11176*/Add_f/*@>e766*/ << /*@>f2fa*/1);
 8000676:	4b33      	ldr	r3, [pc, #204]	; (8000744 <FUNC_InputData+0x30c>)
 8000678:	f8b3 3676 	ldrh.w	r3, [r3, #1654]	; 0x676
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b30      	ldr	r3, [pc, #192]	; (8000744 <FUNC_InputData+0x30c>)
 8000682:	f8a3 265e 	strh.w	r2, [r3, #1630]	; 0x65e
/* Gain: '<S18>/Factor' */
/*@>fcdd*/VCU_B./*@>11179*/Factor_gm/*@>6b1f*/ = /*@>e85d*/(uint32_T)/*@>fce3*/VCU_B./*@>1117c*/DataTypeConversion_l/*@>e761*/ << /*@>e760*/15;
 8000686:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <FUNC_InputData+0x30c>)
 8000688:	f8b3 365e 	ldrh.w	r3, [r3, #1630]	; 0x65e
 800068c:	03db      	lsls	r3, r3, #15
 800068e:	4a2d      	ldr	r2, [pc, #180]	; (8000744 <FUNC_InputData+0x30c>)
 8000690:	f8c2 3634 	str.w	r3, [r2, #1588]	; 0x634
/* Sum: '<S18>/Add1' */
/*@>fce9*/VCU_B./*@>1117f*/Add1_de/*@>88f5*/ = /*@>e861*/(real_T)/*@>fcef*/VCU_B./*@>11182*/Factor_gm/*@>e756*/ * /*@>e755*/4.76837158203125E-7;
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <FUNC_InputData+0x30c>)
 8000696:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
 800069a:	4618      	mov	r0, r3
 800069c:	f00e f96e 	bl	800e97c <__aeabi_ui2d>
 80006a0:	4602      	mov	r2, r0
 80006a2:	460b      	mov	r3, r1
 80006a4:	4610      	mov	r0, r2
 80006a6:	4619      	mov	r1, r3
 80006a8:	f04f 0200 	mov.w	r2, #0
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <FUNC_InputData+0x318>)
 80006ae:	f00e f9db 	bl	800ea68 <__aeabi_dmul>
 80006b2:	4602      	mov	r2, r0
 80006b4:	460b      	mov	r3, r1
 80006b6:	4923      	ldr	r1, [pc, #140]	; (8000744 <FUNC_InputData+0x30c>)
 80006b8:	f501 618a 	add.w	r1, r1, #1104	; 0x450
 80006bc:	e9c1 2300 	strd	r2, r3, [r1]
/* Sum: '<S9>/Add' */
/*@>fcf5*/VCU_B./*@>11185*/Add_l1/*@>88fa*/ = /*@>fcfb*/VCU_B./*@>11188*/Add1_k/*@>88f7*/ + /*@>fd01*/VCU_B./*@>1118b*/Add1_de;
 80006c0:	4b20      	ldr	r3, [pc, #128]	; (8000744 <FUNC_InputData+0x30c>)
 80006c2:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80006c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <FUNC_InputData+0x30c>)
 80006cc:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80006d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006d4:	f00e f816 	bl	800e704 <__adddf3>
 80006d8:	4602      	mov	r2, r0
 80006da:	460b      	mov	r3, r1
 80006dc:	4919      	ldr	r1, [pc, #100]	; (8000744 <FUNC_InputData+0x30c>)
 80006de:	f501 618b 	add.w	r1, r1, #1112	; 0x458
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S9>/Gain4' */
/*@>fd07*/VCU_B./*@>1118e*/Gain4/*@>6b31*/ = /*@>e61f*/0.9/*@>e750*/ * /*@>fd0d*/VCU_B./*@>11191*/Add_l1;
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <FUNC_InputData+0x30c>)
 80006e8:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80006ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006f0:	4610      	mov	r0, r2
 80006f2:	4619      	mov	r1, r3
 80006f4:	a310      	add	r3, pc, #64	; (adr r3, 8000738 <FUNC_InputData+0x300>)
 80006f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006fa:	f00e f9b5 	bl	800ea68 <__aeabi_dmul>
 80006fe:	4602      	mov	r2, r0
 8000700:	460b      	mov	r3, r1
 8000702:	4910      	ldr	r1, [pc, #64]	; (8000744 <FUNC_InputData+0x30c>)
 8000704:	f501 618c 	add.w	r1, r1, #1120	; 0x460
 8000708:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S9>/Data Store Read4' */
/*@>fd13*/VCU_B./*@>11194*/DataStoreRead4_o/*@>6b33*/ = /*@>1030c*/VCU_DW./*@>1141c*/VAR_IN_n_wheel_RL_mpros_LSB;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <FUNC_InputData+0x308>)
 800070e:	f893 211d 	ldrb.w	r2, [r3, #285]	; 0x11d
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <FUNC_InputData+0x30c>)
 8000714:	f883 26ad 	strb.w	r2, [r3, #1709]	; 0x6ad
/* DataStoreRead: '<S9>/Data Store Read6' */
/*@>fd19*/VCU_B./*@>11197*/DataStoreRead6_f/*@>6b35*/ = /*@>10312*/VCU_DW./*@>1141f*/VAR_IN_n_wheel_RL_mpros_MSB;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <FUNC_InputData+0x308>)
 800071a:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <FUNC_InputData+0x30c>)
 8000720:	f883 26ae 	strb.w	r2, [r3, #1710]	; 0x6ae
/* Gain: '<S23>/Gain' */
/*@>fd1f*/VCU_B./*@>1119a*/Gain_me/*@>6b3d*/ = /*@>e86f*/(uint16_T)(/*@>fd25*/VCU_B./*@>1119d*/DataStoreRead6_f/*@>e74d*/ << /*@>e74c*/7);
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <FUNC_InputData+0x30c>)
 8000726:	f893 36ae 	ldrb.w	r3, [r3, #1710]	; 0x6ae
 800072a:	b29b      	uxth	r3, r3
 800072c:	01db      	lsls	r3, r3, #7
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <FUNC_InputData+0x30c>)
 8000732:	f8a3 2678 	strh.w	r2, [r3, #1656]	; 0x678
 8000736:	e00d      	b.n	8000754 <FUNC_InputData+0x31c>
 8000738:	cccccccd 	.word	0xcccccccd
 800073c:	3feccccc 	.word	0x3feccccc
 8000740:	20001058 	.word	0x20001058
 8000744:	200008c8 	.word	0x200008c8
 8000748:	3e900000 	.word	0x3e900000
 800074c:	40340000 	.word	0x40340000
 8000750:	3ea00000 	.word	0x3ea00000
/* Sum: '<S23>/Add' */
/*@>fd2b*/VCU_B./*@>111a0*/Add_o/*@>8903*/ = /*@>e73d*/(uint16_T)(((/*@>e874*/(uint32_T)/*@>fd31*/VCU_B./*@>111a3*/Gain_me/*@>e744*/ << /*@>e743*/1)/*@>88ff*/ + /*@>fd37*/VCU_B./*@>111a6*/DataStoreRead4_o)/*@>e73b*/ >> /*@>e73a*/1);
 8000754:	4bc0      	ldr	r3, [pc, #768]	; (8000a58 <FUNC_InputData+0x620>)
 8000756:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	; 0x678
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4abe      	ldr	r2, [pc, #760]	; (8000a58 <FUNC_InputData+0x620>)
 800075e:	f892 26ad 	ldrb.w	r2, [r2, #1709]	; 0x6ad
 8000762:	4413      	add	r3, r2
 8000764:	085b      	lsrs	r3, r3, #1
 8000766:	b29a      	uxth	r2, r3
 8000768:	4bbb      	ldr	r3, [pc, #748]	; (8000a58 <FUNC_InputData+0x620>)
 800076a:	f8a3 267a 	strh.w	r2, [r3, #1658]	; 0x67a
/* DataTypeConversion: '<S23>/Data Type Conversion' */
/*@>fd3d*/VCU_B./*@>111a9*/DataTypeConversion_j/*@>6b45*/ = /*@>f6f0*/(uint16_T)(/*@>fd43*/VCU_B./*@>111ac*/Add_o/*@>e731*/ << /*@>f2fc*/1);
 800076e:	4bba      	ldr	r3, [pc, #744]	; (8000a58 <FUNC_InputData+0x620>)
 8000770:	f8b3 367a 	ldrh.w	r3, [r3, #1658]	; 0x67a
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	b29a      	uxth	r2, r3
 8000778:	4bb7      	ldr	r3, [pc, #732]	; (8000a58 <FUNC_InputData+0x620>)
 800077a:	f8a3 2660 	strh.w	r2, [r3, #1632]	; 0x660
/* Gain: '<S19>/Factor' */
/*@>fd49*/VCU_B./*@>111af*/Factor_d5/*@>6b4d*/ = /*@>e87e*/(uint32_T)/*@>fd4f*/VCU_B./*@>111b2*/DataTypeConversion_j/*@>e72c*/ << /*@>e72b*/15;
 800077e:	4bb6      	ldr	r3, [pc, #728]	; (8000a58 <FUNC_InputData+0x620>)
 8000780:	f8b3 3660 	ldrh.w	r3, [r3, #1632]	; 0x660
 8000784:	03db      	lsls	r3, r3, #15
 8000786:	4ab4      	ldr	r2, [pc, #720]	; (8000a58 <FUNC_InputData+0x620>)
 8000788:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
/* Sum: '<S19>/Add1' */
/*@>fd55*/VCU_B./*@>111b5*/Add1_ks/*@>890a*/ = /*@>e882*/(real_T)/*@>fd5b*/VCU_B./*@>111b8*/Factor_d5/*@>e721*/ * /*@>e720*/4.76837158203125E-7;
 800078c:	4bb2      	ldr	r3, [pc, #712]	; (8000a58 <FUNC_InputData+0x620>)
 800078e:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
 8000792:	4618      	mov	r0, r3
 8000794:	f00e f8f2 	bl	800e97c <__aeabi_ui2d>
 8000798:	4602      	mov	r2, r0
 800079a:	460b      	mov	r3, r1
 800079c:	4610      	mov	r0, r2
 800079e:	4619      	mov	r1, r3
 80007a0:	f04f 0200 	mov.w	r2, #0
 80007a4:	4bad      	ldr	r3, [pc, #692]	; (8000a5c <FUNC_InputData+0x624>)
 80007a6:	f00e f95f 	bl	800ea68 <__aeabi_dmul>
 80007aa:	4602      	mov	r2, r0
 80007ac:	460b      	mov	r3, r1
 80007ae:	49aa      	ldr	r1, [pc, #680]	; (8000a58 <FUNC_InputData+0x620>)
 80007b0:	f501 618d 	add.w	r1, r1, #1128	; 0x468
 80007b4:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S9>/Data Store Read7' */
/*@>fd61*/VCU_B./*@>111bb*/DataStoreRead7_h/*@>6b54*/ = /*@>10318*/VCU_DW./*@>11422*/VAR_IN_n_wheel_RR_mpros_LSB;
 80007b8:	4ba9      	ldr	r3, [pc, #676]	; (8000a60 <FUNC_InputData+0x628>)
 80007ba:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 80007be:	4ba6      	ldr	r3, [pc, #664]	; (8000a58 <FUNC_InputData+0x620>)
 80007c0:	f883 26af 	strb.w	r2, [r3, #1711]	; 0x6af
/* DataStoreRead: '<S9>/Data Store Read8' */
/*@>fd67*/VCU_B./*@>111be*/DataStoreRead8_e/*@>6b56*/ = /*@>1031e*/VCU_DW./*@>11425*/VAR_IN_n_wheel_RR_mpros_MSB;
 80007c4:	4ba6      	ldr	r3, [pc, #664]	; (8000a60 <FUNC_InputData+0x628>)
 80007c6:	f893 2121 	ldrb.w	r2, [r3, #289]	; 0x121
 80007ca:	4ba3      	ldr	r3, [pc, #652]	; (8000a58 <FUNC_InputData+0x620>)
 80007cc:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0
/* Gain: '<S24>/Gain' */
/*@>fd6d*/VCU_B./*@>111c1*/Gain_c/*@>6b5e*/ = /*@>e88b*/(uint16_T)(/*@>fd73*/VCU_B./*@>111c4*/DataStoreRead8_e/*@>e71c*/ << /*@>e71b*/7);
 80007d0:	4ba1      	ldr	r3, [pc, #644]	; (8000a58 <FUNC_InputData+0x620>)
 80007d2:	f893 36b0 	ldrb.w	r3, [r3, #1712]	; 0x6b0
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	01db      	lsls	r3, r3, #7
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b9e      	ldr	r3, [pc, #632]	; (8000a58 <FUNC_InputData+0x620>)
 80007de:	f8a3 267c 	strh.w	r2, [r3, #1660]	; 0x67c
/* Sum: '<S24>/Add' */
/*@>fd79*/VCU_B./*@>111c7*/Add_fb/*@>8913*/ = /*@>e70c*/(uint16_T)(((/*@>e890*/(uint32_T)/*@>fd7f*/VCU_B./*@>111ca*/Gain_c/*@>e713*/ << /*@>e712*/1)/*@>890f*/ + /*@>fd85*/VCU_B./*@>111cd*/DataStoreRead7_h)/*@>e70a*/ >> /*@>e709*/1);
 80007e2:	4b9d      	ldr	r3, [pc, #628]	; (8000a58 <FUNC_InputData+0x620>)
 80007e4:	f8b3 367c 	ldrh.w	r3, [r3, #1660]	; 0x67c
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	4a9b      	ldr	r2, [pc, #620]	; (8000a58 <FUNC_InputData+0x620>)
 80007ec:	f892 26af 	ldrb.w	r2, [r2, #1711]	; 0x6af
 80007f0:	4413      	add	r3, r2
 80007f2:	085b      	lsrs	r3, r3, #1
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b98      	ldr	r3, [pc, #608]	; (8000a58 <FUNC_InputData+0x620>)
 80007f8:	f8a3 267e 	strh.w	r2, [r3, #1662]	; 0x67e
/* DataTypeConversion: '<S24>/Data Type Conversion' */
/*@>fd8b*/VCU_B./*@>111d0*/DataTypeConversion_c/*@>6b66*/ = /*@>f6ef*/(uint16_T)(/*@>fd91*/VCU_B./*@>111d3*/Add_fb/*@>e700*/ << /*@>f2fe*/1);
 80007fc:	4b96      	ldr	r3, [pc, #600]	; (8000a58 <FUNC_InputData+0x620>)
 80007fe:	f8b3 367e 	ldrh.w	r3, [r3, #1662]	; 0x67e
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	b29a      	uxth	r2, r3
 8000806:	4b94      	ldr	r3, [pc, #592]	; (8000a58 <FUNC_InputData+0x620>)
 8000808:	f8a3 2662 	strh.w	r2, [r3, #1634]	; 0x662
/* Gain: '<S20>/Factor' */
/*@>fd97*/VCU_B./*@>111d6*/Factor_jp/*@>6b6e*/ = /*@>e89a*/(uint32_T)/*@>fd9d*/VCU_B./*@>111d9*/DataTypeConversion_c/*@>e6fb*/ << /*@>e6fa*/15;
 800080c:	4b92      	ldr	r3, [pc, #584]	; (8000a58 <FUNC_InputData+0x620>)
 800080e:	f8b3 3662 	ldrh.w	r3, [r3, #1634]	; 0x662
 8000812:	03db      	lsls	r3, r3, #15
 8000814:	4a90      	ldr	r2, [pc, #576]	; (8000a58 <FUNC_InputData+0x620>)
 8000816:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
/* Sum: '<S20>/Add1' */
/*@>fda3*/VCU_B./*@>111dc*/Add1_eq/*@>891a*/ = /*@>e89e*/(real_T)/*@>fda9*/VCU_B./*@>111df*/Factor_jp/*@>e6f0*/ * /*@>e6ef*/4.76837158203125E-7;
 800081a:	4b8f      	ldr	r3, [pc, #572]	; (8000a58 <FUNC_InputData+0x620>)
 800081c:	f8d3 363c 	ldr.w	r3, [r3, #1596]	; 0x63c
 8000820:	4618      	mov	r0, r3
 8000822:	f00e f8ab 	bl	800e97c <__aeabi_ui2d>
 8000826:	4602      	mov	r2, r0
 8000828:	460b      	mov	r3, r1
 800082a:	4610      	mov	r0, r2
 800082c:	4619      	mov	r1, r3
 800082e:	f04f 0200 	mov.w	r2, #0
 8000832:	4b8a      	ldr	r3, [pc, #552]	; (8000a5c <FUNC_InputData+0x624>)
 8000834:	f00e f918 	bl	800ea68 <__aeabi_dmul>
 8000838:	4602      	mov	r2, r0
 800083a:	460b      	mov	r3, r1
 800083c:	4986      	ldr	r1, [pc, #536]	; (8000a58 <FUNC_InputData+0x620>)
 800083e:	f501 618e 	add.w	r1, r1, #1136	; 0x470
 8000842:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S25>/Data Store Read1' */
/*@>fdaf*/VCU_B./*@>111e2*/DataStoreRead1_g/*@>6b75*/ = /*@>10324*/VCU_DW./*@>11428*/VAR_IN_u_TPS;
 8000846:	4b86      	ldr	r3, [pc, #536]	; (8000a60 <FUNC_InputData+0x628>)
 8000848:	f893 2122 	ldrb.w	r2, [r3, #290]	; 0x122
 800084c:	4b82      	ldr	r3, [pc, #520]	; (8000a58 <FUNC_InputData+0x620>)
 800084e:	f883 26b1 	strb.w	r2, [r3, #1713]	; 0x6b1
/* DataStoreRead: '<S26>/Data Store Read4' */
/*@>fdb5*/VCU_B./*@>111e5*/DataStoreRead4_k/*@>6b77*/ = /*@>1032a*/VCU_DW./*@>1142b*/VAR_IN_p_air_22_des;
 8000852:	4b83      	ldr	r3, [pc, #524]	; (8000a60 <FUNC_InputData+0x628>)
 8000854:	f893 2127 	ldrb.w	r2, [r3, #295]	; 0x127
 8000858:	4b7f      	ldr	r3, [pc, #508]	; (8000a58 <FUNC_InputData+0x620>)
 800085a:	f883 26b2 	strb.w	r2, [r3, #1714]	; 0x6b2
/* DataTypeConversion: '<S26>/Data Type Conversion1' */
/*@>fdbb*/VCU_B./*@>111e8*/DataTypeConversion1/*@>6b7a*/ = /*@>fdc1*/VCU_B./*@>111eb*/DataStoreRead4_k;
 800085e:	4b7e      	ldr	r3, [pc, #504]	; (8000a58 <FUNC_InputData+0x620>)
 8000860:	f893 36b2 	ldrb.w	r3, [r3, #1714]	; 0x6b2
 8000864:	4618      	mov	r0, r3
 8000866:	f00e f889 	bl	800e97c <__aeabi_ui2d>
 800086a:	4602      	mov	r2, r0
 800086c:	460b      	mov	r3, r1
 800086e:	497a      	ldr	r1, [pc, #488]	; (8000a58 <FUNC_InputData+0x620>)
 8000870:	f501 618f 	add.w	r1, r1, #1144	; 0x478
 8000874:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S26>/Data Store Read1' */
/*@>fdc7*/VCU_B./*@>111ee*/DataStoreRead1_m/*@>6b7c*/ = /*@>10330*/VCU_DW./*@>1142e*/VAR_IN_n_engine_MSB;
 8000878:	4b79      	ldr	r3, [pc, #484]	; (8000a60 <FUNC_InputData+0x628>)
 800087a:	f893 2124 	ldrb.w	r2, [r3, #292]	; 0x124
 800087e:	4b76      	ldr	r3, [pc, #472]	; (8000a58 <FUNC_InputData+0x620>)
 8000880:	f883 26b3 	strb.w	r2, [r3, #1715]	; 0x6b3
/* Gain: '<S29>/Gain' */
/*@>fdcd*/VCU_B./*@>111f1*/Gain_cv/*@>6b84*/ = /*@>e8ac*/(uint16_T)(/*@>fdd3*/VCU_B./*@>111f4*/DataStoreRead1_m/*@>e6eb*/ << /*@>e6ea*/7);
 8000884:	4b74      	ldr	r3, [pc, #464]	; (8000a58 <FUNC_InputData+0x620>)
 8000886:	f893 36b3 	ldrb.w	r3, [r3, #1715]	; 0x6b3
 800088a:	b29b      	uxth	r3, r3
 800088c:	01db      	lsls	r3, r3, #7
 800088e:	b29a      	uxth	r2, r3
 8000890:	4b71      	ldr	r3, [pc, #452]	; (8000a58 <FUNC_InputData+0x620>)
 8000892:	f8a3 2680 	strh.w	r2, [r3, #1664]	; 0x680
/* DataStoreRead: '<S26>/Data Store Read2' */
/*@>fdd9*/VCU_B./*@>111f7*/DataStoreRead2_o/*@>6b86*/ = /*@>10336*/VCU_DW./*@>11431*/VAR_IN_n_engine_LSB;
 8000896:	4b72      	ldr	r3, [pc, #456]	; (8000a60 <FUNC_InputData+0x628>)
 8000898:	f893 2125 	ldrb.w	r2, [r3, #293]	; 0x125
 800089c:	4b6e      	ldr	r3, [pc, #440]	; (8000a58 <FUNC_InputData+0x620>)
 800089e:	f883 26b4 	strb.w	r2, [r3, #1716]	; 0x6b4
/* Sum: '<S29>/Add' */
/*@>fddf*/VCU_B./*@>111fa*/Add_d/*@>8923*/ = /*@>e6db*/(uint16_T)(((/*@>e8b3*/(uint32_T)/*@>fde5*/VCU_B./*@>111fd*/Gain_cv/*@>e6e2*/ << /*@>e6e1*/1)/*@>891f*/ + /*@>fdeb*/VCU_B./*@>11200*/DataStoreRead2_o)/*@>e6d9*/ >> /*@>e6d8*/1);
 80008a2:	4b6d      	ldr	r3, [pc, #436]	; (8000a58 <FUNC_InputData+0x620>)
 80008a4:	f8b3 3680 	ldrh.w	r3, [r3, #1664]	; 0x680
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	4a6b      	ldr	r2, [pc, #428]	; (8000a58 <FUNC_InputData+0x620>)
 80008ac:	f892 26b4 	ldrb.w	r2, [r2, #1716]	; 0x6b4
 80008b0:	4413      	add	r3, r2
 80008b2:	085b      	lsrs	r3, r3, #1
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b68      	ldr	r3, [pc, #416]	; (8000a58 <FUNC_InputData+0x620>)
 80008b8:	f8a3 2682 	strh.w	r2, [r3, #1666]	; 0x682
/* DataTypeConversion: '<S29>/Data Type Conversion' */
/*@>fdf1*/VCU_B./*@>11203*/DataTypeConversion_o/*@>6b8e*/ = /*@>f6ee*/(uint16_T)(/*@>fdf7*/VCU_B./*@>11206*/Add_d/*@>e6cf*/ << /*@>f300*/1);
 80008bc:	4b66      	ldr	r3, [pc, #408]	; (8000a58 <FUNC_InputData+0x620>)
 80008be:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	; 0x682
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b64      	ldr	r3, [pc, #400]	; (8000a58 <FUNC_InputData+0x620>)
 80008c8:	f8a3 2664 	strh.w	r2, [r3, #1636]	; 0x664
/* DataTypeConversion: '<S26>/Data Type Conversion2' */
/*@>fdfd*/VCU_B./*@>11209*/DataTypeConversion2/*@>6b91*/ = /*@>fe03*/VCU_B./*@>1120c*/DataTypeConversion_o;
 80008cc:	4b62      	ldr	r3, [pc, #392]	; (8000a58 <FUNC_InputData+0x620>)
 80008ce:	f8b3 3664 	ldrh.w	r3, [r3, #1636]	; 0x664
 80008d2:	4618      	mov	r0, r3
 80008d4:	f00e f852 	bl	800e97c <__aeabi_ui2d>
 80008d8:	4602      	mov	r2, r0
 80008da:	460b      	mov	r3, r1
 80008dc:	495e      	ldr	r1, [pc, #376]	; (8000a58 <FUNC_InputData+0x620>)
 80008de:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 80008e2:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S26>/Data Store Read' */
/*@>fe09*/VCU_B./*@>1120f*/DataStoreRead_h/*@>6b93*/ = /*@>1033c*/VCU_DW./*@>11434*/VAR_IN_gear;
 80008e6:	4b5e      	ldr	r3, [pc, #376]	; (8000a60 <FUNC_InputData+0x628>)
 80008e8:	f893 2123 	ldrb.w	r2, [r3, #291]	; 0x123
 80008ec:	4b5a      	ldr	r3, [pc, #360]	; (8000a58 <FUNC_InputData+0x620>)
 80008ee:	f883 26b5 	strb.w	r2, [r3, #1717]	; 0x6b5
/* ArithShift: '<S26>/Shift Arithmetic' */
/*@>fe0f*/VCU_B./*@>11212*/ShiftArithmetic/*@>88c5*/ = /*@>e8c4*/(uint8_T)(/*@>e8c2*/(uint32_T)/*@>fe15*/VCU_B./*@>11215*/DataStoreRead_h/*@>e6ca*/ >> /*@>e6c6*/3);
 80008f2:	4b59      	ldr	r3, [pc, #356]	; (8000a58 <FUNC_InputData+0x620>)
 80008f4:	f893 36b5 	ldrb.w	r3, [r3, #1717]	; 0x6b5
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b56      	ldr	r3, [pc, #344]	; (8000a58 <FUNC_InputData+0x620>)
 80008fe:	f883 26b6 	strb.w	r2, [r3, #1718]	; 0x6b6
/* DataTypeConversion: '<S26>/Data Type Conversion3' */
/*@>fe1b*/VCU_B./*@>11218*/DataTypeConversion3/*@>6b97*/ = /*@>fe21*/VCU_B./*@>1121b*/ShiftArithmetic;
 8000902:	4b55      	ldr	r3, [pc, #340]	; (8000a58 <FUNC_InputData+0x620>)
 8000904:	f893 36b6 	ldrb.w	r3, [r3, #1718]	; 0x6b6
 8000908:	4618      	mov	r0, r3
 800090a:	f00e f837 	bl	800e97c <__aeabi_ui2d>
 800090e:	4602      	mov	r2, r0
 8000910:	460b      	mov	r3, r1
 8000912:	4951      	ldr	r1, [pc, #324]	; (8000a58 <FUNC_InputData+0x620>)
 8000914:	f501 6191 	add.w	r1, r1, #1160	; 0x488
 8000918:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S26>/Data Store Read3' */
/*@>fe27*/VCU_B./*@>1121e*/DataStoreRead3_a/*@>6b99*/ = /*@>10342*/VCU_DW./*@>11437*/VAR_IN_TPS_Plausi;
 800091c:	4b50      	ldr	r3, [pc, #320]	; (8000a60 <FUNC_InputData+0x628>)
 800091e:	f893 2126 	ldrb.w	r2, [r3, #294]	; 0x126
 8000922:	4b4d      	ldr	r3, [pc, #308]	; (8000a58 <FUNC_InputData+0x620>)
 8000924:	f883 26b7 	strb.w	r2, [r3, #1719]	; 0x6b7
/* DataStoreRead: '<S26>/Data Store Read5' */
/*@>fe2d*/VCU_B./*@>11221*/DataStoreRead5_i/*@>6b9b*/ = /*@>10348*/VCU_DW./*@>1143a*/VAR_IN_p_air_22;
 8000928:	4b4d      	ldr	r3, [pc, #308]	; (8000a60 <FUNC_InputData+0x628>)
 800092a:	f893 2128 	ldrb.w	r2, [r3, #296]	; 0x128
 800092e:	4b4a      	ldr	r3, [pc, #296]	; (8000a58 <FUNC_InputData+0x620>)
 8000930:	f883 26b8 	strb.w	r2, [r3, #1720]	; 0x6b8
/* DataStoreRead: '<S27>/Data Store Read1' */
/*@>fe33*/VCU_B./*@>11224*/DataStoreRead1_g5/*@>6b9d*/ = /*@>1034e*/VCU_DW./*@>1143d*/VAR_IN_t_water_engine;
 8000934:	4b4a      	ldr	r3, [pc, #296]	; (8000a60 <FUNC_InputData+0x628>)
 8000936:	f893 2129 	ldrb.w	r2, [r3, #297]	; 0x129
 800093a:	4b47      	ldr	r3, [pc, #284]	; (8000a58 <FUNC_InputData+0x620>)
 800093c:	f883 26b9 	strb.w	r2, [r3, #1721]	; 0x6b9
/* Gain: '<S30>/Factor' */
/*@>fe39*/VCU_B./*@>11227*/Factor_ba/*@>6ba5*/ = /*@>e8d2*/(uint16_T)(/*@>fe3f*/VCU_B./*@>1122a*/DataStoreRead1_g5/*@>e6c2*/ << /*@>e6c1*/7);
 8000940:	4b45      	ldr	r3, [pc, #276]	; (8000a58 <FUNC_InputData+0x620>)
 8000942:	f893 36b9 	ldrb.w	r3, [r3, #1721]	; 0x6b9
 8000946:	b29b      	uxth	r3, r3
 8000948:	01db      	lsls	r3, r3, #7
 800094a:	b29a      	uxth	r2, r3
 800094c:	4b42      	ldr	r3, [pc, #264]	; (8000a58 <FUNC_InputData+0x620>)
 800094e:	f8a3 2666 	strh.w	r2, [r3, #1638]	; 0x666
/* Sum: '<S30>/Add1' incorporates:
 *  Constant: '<S30>/Offset'
 */
/*@>fe45*/VCU_B./*@>1122d*/Add1_iu/*@>892a*/ = /*@>e8d5*/(real_T)/*@>fe4b*/VCU_B./*@>11230*/Factor_ba/*@>e6b6*/ * /*@>e6b5*/0.0078125/*@>8927*/ + /*@>e620*/-50.0;
 8000952:	4b41      	ldr	r3, [pc, #260]	; (8000a58 <FUNC_InputData+0x620>)
 8000954:	f8b3 3666 	ldrh.w	r3, [r3, #1638]	; 0x666
 8000958:	4618      	mov	r0, r3
 800095a:	f00e f80f 	bl	800e97c <__aeabi_ui2d>
 800095e:	4602      	mov	r2, r0
 8000960:	460b      	mov	r3, r1
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	f04f 0200 	mov.w	r2, #0
 800096a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800096e:	f00e f87b 	bl	800ea68 <__aeabi_dmul>
 8000972:	4602      	mov	r2, r0
 8000974:	460b      	mov	r3, r1
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	f04f 0200 	mov.w	r2, #0
 800097e:	4b39      	ldr	r3, [pc, #228]	; (8000a64 <FUNC_InputData+0x62c>)
 8000980:	f00d febe 	bl	800e700 <__aeabi_dsub>
 8000984:	4602      	mov	r2, r0
 8000986:	460b      	mov	r3, r1
 8000988:	4933      	ldr	r1, [pc, #204]	; (8000a58 <FUNC_InputData+0x620>)
 800098a:	f501 6192 	add.w	r1, r1, #1168	; 0x490
 800098e:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S11>/Data Store Read1' */
/*@>fe51*/VCU_B./*@>11233*/TeleFansDC_h/*@>6bac*/ = /*@>10354*/VCU_DW./*@>11440*/VAR_IN_TeleFansDC;
 8000992:	4b33      	ldr	r3, [pc, #204]	; (8000a60 <FUNC_InputData+0x628>)
 8000994:	f893 212a 	ldrb.w	r2, [r3, #298]	; 0x12a
 8000998:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <FUNC_InputData+0x620>)
 800099a:	f883 26ba 	strb.w	r2, [r3, #1722]	; 0x6ba
/* DataTypeConversion: '<S11>/Data Type Conversion1' */
/*@>fe57*/VCU_B./*@>11236*/TeleFansDC/*@>6baf*/ = /*@>fe5d*/VCU_B./*@>11239*/TeleFansDC_h;
 800099e:	4b2e      	ldr	r3, [pc, #184]	; (8000a58 <FUNC_InputData+0x620>)
 80009a0:	f893 36ba 	ldrb.w	r3, [r3, #1722]	; 0x6ba
 80009a4:	4618      	mov	r0, r3
 80009a6:	f00d ffe9 	bl	800e97c <__aeabi_ui2d>
 80009aa:	4602      	mov	r2, r0
 80009ac:	460b      	mov	r3, r1
 80009ae:	492a      	ldr	r1, [pc, #168]	; (8000a58 <FUNC_InputData+0x620>)
 80009b0:	f501 6193 	add.w	r1, r1, #1176	; 0x498
 80009b4:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S31>/Factor' */
/*@>fe63*/VCU_B./*@>1123c*/Factor_kk/*@>6bb7*/ = /*@>e621*/0.01/*@>e6b0*/ * /*@>fe69*/VCU_B./*@>1123f*/TeleFansDC;
 80009b8:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <FUNC_InputData+0x620>)
 80009ba:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80009be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	a322      	add	r3, pc, #136	; (adr r3, 8000a50 <FUNC_InputData+0x618>)
 80009c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009cc:	f00e f84c 	bl	800ea68 <__aeabi_dmul>
 80009d0:	4602      	mov	r2, r0
 80009d2:	460b      	mov	r3, r1
 80009d4:	4920      	ldr	r1, [pc, #128]	; (8000a58 <FUNC_InputData+0x620>)
 80009d6:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 80009da:	e9c1 2300 	strd	r2, r3, [r1]
/* Sum: '<S31>/Add1' */
/*@>fe6f*/VCU_B./*@>11242*/Add1_ik/*@>892f*/ = /*@>fe75*/VCU_B./*@>11245*/Factor_kk;
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <FUNC_InputData+0x620>)
 80009e0:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80009e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009e8:	491b      	ldr	r1, [pc, #108]	; (8000a58 <FUNC_InputData+0x620>)
 80009ea:	f501 6195 	add.w	r1, r1, #1192	; 0x4a8
 80009ee:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S11>/Data Store Read8' */
/*@>fe7b*/VCU_B./*@>11248*/TeleActiveBit_p/*@>6bbe*/ = /*@>1035a*/VCU_DW./*@>11443*/VAR_IN_TeleActiveBit;
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <FUNC_InputData+0x628>)
 80009f4:	f893 212b 	ldrb.w	r2, [r3, #299]	; 0x12b
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <FUNC_InputData+0x620>)
 80009fa:	f883 26bb 	strb.w	r2, [r3, #1723]	; 0x6bb
/* DataTypeConversion: '<S11>/Data Type Conversion' */
/*@>fe81*/VCU_B./*@>1124b*/TeleActiveBit/*@>6bc1*/ = /*@>fe87*/VCU_B./*@>1124e*/TeleActiveBit_p;
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <FUNC_InputData+0x620>)
 8000a00:	f893 36bb 	ldrb.w	r3, [r3, #1723]	; 0x6bb
 8000a04:	4618      	mov	r0, r3
 8000a06:	f00d ffb9 	bl	800e97c <__aeabi_ui2d>
 8000a0a:	4602      	mov	r2, r0
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	4912      	ldr	r1, [pc, #72]	; (8000a58 <FUNC_InputData+0x620>)
 8000a10:	f501 6196 	add.w	r1, r1, #1200	; 0x4b0
 8000a14:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S12>/Data Store Read1' */
/*@>fe8d*/VCU_B./*@>11251*/DataStoreRead1_f/*@>6bc3*/ = /*@>10360*/VCU_DW./*@>11446*/VAR_IN_g_yaw_ABS_MSB;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <FUNC_InputData+0x628>)
 8000a1a:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <FUNC_InputData+0x620>)
 8000a20:	f883 26bc 	strb.w	r2, [r3, #1724]	; 0x6bc
/* DataStoreRead: '<S12>/Data Store Read3' */
/*@>fe93*/VCU_B./*@>11254*/DataStoreRead3_o/*@>6bc5*/ = /*@>10366*/VCU_DW./*@>11449*/VAR_IN_g_yaw_ABS_LSB;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <FUNC_InputData+0x628>)
 8000a26:	f893 212e 	ldrb.w	r2, [r3, #302]	; 0x12e
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <FUNC_InputData+0x620>)
 8000a2c:	f883 26bd 	strb.w	r2, [r3, #1725]	; 0x6bd
/* DataStoreRead: '<S12>/Data Store Read2' */
/*@>fe99*/VCU_B./*@>11257*/DataStoreRead2_h/*@>6bc7*/ = /*@>1036c*/VCU_DW./*@>1144c*/VAR_IN_g_long_ABS_MSB;
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <FUNC_InputData+0x628>)
 8000a32:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <FUNC_InputData+0x620>)
 8000a38:	f883 26be 	strb.w	r2, [r3, #1726]	; 0x6be
/* DataStoreRead: '<S12>/Data Store Read4' */
/*@>fe9f*/VCU_B./*@>1125a*/DataStoreRead4_l/*@>6bc9*/ = /*@>10372*/VCU_DW./*@>1144f*/VAR_IN_g_long_ABS_LSB;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <FUNC_InputData+0x628>)
 8000a3e:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <FUNC_InputData+0x620>)
 8000a44:	f883 26bf 	strb.w	r2, [r3, #1727]	; 0x6bf
/* DataStoreRead: '<S13>/Data Store Read9' */
/*@>fea5*/VCU_B./*@>1125d*/DataStoreRead9/*@>6bcb*/ = /*@>10378*/VCU_DW./*@>11452*/VAR_IN_x_clutch_STW;
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <FUNC_InputData+0x628>)
 8000a4a:	e00d      	b.n	8000a68 <FUNC_InputData+0x630>
 8000a4c:	f3af 8000 	nop.w
 8000a50:	47ae147b 	.word	0x47ae147b
 8000a54:	3f847ae1 	.word	0x3f847ae1
 8000a58:	200008c8 	.word	0x200008c8
 8000a5c:	3ea00000 	.word	0x3ea00000
 8000a60:	20001058 	.word	0x20001058
 8000a64:	40490000 	.word	0x40490000
 8000a68:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8000a6c:	4926      	ldr	r1, [pc, #152]	; (8000b08 <FUNC_InputData+0x6d0>)
 8000a6e:	f501 6197 	add.w	r1, r1, #1208	; 0x4b8
 8000a72:	e9c1 2300 	strd	r2, r3, [r1]
/* Saturate: '<S13>/Saturation' incorporates:
 *  Gain: '<S13>/mV//V'
 */
/*@>feab*/VCU_B./*@>11260*/mVV/*@>6bd3*/ = /*@>e622*/0.001/*@>e6ac*/ * /*@>feb1*/VCU_B./*@>11263*/DataStoreRead9;
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <FUNC_InputData+0x6d0>)
 8000a78:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8000a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a80:	4610      	mov	r0, r2
 8000a82:	4619      	mov	r1, r3
 8000a84:	a31e      	add	r3, pc, #120	; (adr r3, 8000b00 <FUNC_InputData+0x6c8>)
 8000a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a8a:	f00d ffed 	bl	800ea68 <__aeabi_dmul>
 8000a8e:	4602      	mov	r2, r0
 8000a90:	460b      	mov	r3, r1
 8000a92:	491d      	ldr	r1, [pc, #116]	; (8000b08 <FUNC_InputData+0x6d0>)
 8000a94:	f501 6198 	add.w	r1, r1, #1216	; 0x4c0
 8000a98:	e9c1 2300 	strd	r2, r3, [r1]
/*@>ea17*/if (/*@>feb7*/VCU_B./*@>11266*/mVV/*@>ea12*/ > /*@>eebb*/5.0) {
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <FUNC_InputData+0x6d0>)
 8000a9e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8000aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f04f 0200 	mov.w	r2, #0
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <FUNC_InputData+0x6d4>)
 8000ab0:	f00e fa6a 	bl	800ef88 <__aeabi_dcmpgt>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d008      	beq.n	8000acc <FUNC_InputData+0x694>
    /*@>fec3*/VCU_B./*@>1126c*/Saturation_e/*@>ea19*/ = /*@>eec1*/5.0;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <FUNC_InputData+0x6d0>)
 8000abc:	f503 6199 	add.w	r1, r3, #1224	; 0x4c8
 8000ac0:	f04f 0200 	mov.w	r2, #0
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <FUNC_InputData+0x6d4>)
 8000ac6:	e9c1 2300 	strd	r2, r3, [r1]
 8000aca:	e02b      	b.n	8000b24 <FUNC_InputData+0x6ec>
} else /*@>ea1a*/if (/*@>febd*/VCU_B./*@>11269*/mVV/*@>ea0f*/ < /*@>eebd*/0.0) {
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <FUNC_InputData+0x6d0>)
 8000ace:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8000ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f04f 0200 	mov.w	r2, #0
 8000ade:	f04f 0300 	mov.w	r3, #0
 8000ae2:	f00e fa33 	bl	800ef4c <__aeabi_dcmplt>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d011      	beq.n	8000b10 <FUNC_InputData+0x6d8>
    /*@>fed5*/VCU_B./*@>11275*/Saturation_e/*@>ea1c*/ = /*@>eebf*/0.0;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <FUNC_InputData+0x6d0>)
 8000aee:	f503 6199 	add.w	r1, r3, #1224	; 0x4c8
 8000af2:	f04f 0200 	mov.w	r2, #0
 8000af6:	f04f 0300 	mov.w	r3, #0
 8000afa:	e9c1 2300 	strd	r2, r3, [r1]
 8000afe:	e011      	b.n	8000b24 <FUNC_InputData+0x6ec>
 8000b00:	d2f1a9fc 	.word	0xd2f1a9fc
 8000b04:	3f50624d 	.word	0x3f50624d
 8000b08:	200008c8 	.word	0x200008c8
 8000b0c:	40140000 	.word	0x40140000
} else {
    /*@>fec9*/VCU_B./*@>1126f*/Saturation_e/*@>ea16*/ = /*@>fecf*/VCU_B./*@>11272*/mVV;
 8000b10:	4bb5      	ldr	r3, [pc, #724]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b12:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8000b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b1a:	49b3      	ldr	r1, [pc, #716]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b1c:	f501 6199 	add.w	r1, r1, #1224	; 0x4c8
 8000b20:	e9c1 2300 	strd	r2, r3, [r1]
}
/* End of Saturate: '<S13>/Saturation' */

/* Lookup_n-D: '<S13>/1-D Lookup Table' */
/*@>fedb*/VCU_B./*@>11278*/x_clutch_STW/*@>8ad2*/ = /*@>f58f*/look1_binlxpw(/*@>fee1*/VCU_B./*@>1127b*/Saturation_e, /*@>101cc*/VCU_ConstP./*@>113c5*/uDLookupTable_bp01Data, /*@>101d2*/VCU_ConstP./*@>113c8*/pooled5, /*@>e578*/1U);
 8000b24:	4bb0      	ldr	r3, [pc, #704]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b26:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	2101      	movs	r1, #1
 8000b30:	9100      	str	r1, [sp, #0]
 8000b32:	4610      	mov	r0, r2
 8000b34:	4619      	mov	r1, r3
 8000b36:	4aad      	ldr	r2, [pc, #692]	; (8000dec <FUNC_InputData+0x9b4>)
 8000b38:	4bad      	ldr	r3, [pc, #692]	; (8000df0 <FUNC_InputData+0x9b8>)
 8000b3a:	f005 f87d 	bl	8005c38 <look1_binlxpw>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	49a9      	ldr	r1, [pc, #676]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b44:	f501 619a 	add.w	r1, r1, #1232	; 0x4d0
 8000b48:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S13>/Data Store Read10' */
/*@>fee7*/VCU_B./*@>1127e*/DataStoreRead10_b/*@>6be2*/ = /*@>1037e*/VCU_DW./*@>11455*/VAR_IN_STW_mue_tyre;
 8000b4c:	4ba9      	ldr	r3, [pc, #676]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000b4e:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
 8000b52:	4ba5      	ldr	r3, [pc, #660]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b54:	f883 26c0 	strb.w	r2, [r3, #1728]	; 0x6c0
/* Gain: '<S36>/Factor' */
/*@>feed*/VCU_B./*@>11281*/Factor_oq/*@>6bea*/ = /*@>e8fb*/(uint16_T)(/*@>e7f0*/164U/*@>e6a7*/ * /*@>fef3*/VCU_B./*@>11284*/DataStoreRead10_b);
 8000b58:	4ba3      	ldr	r3, [pc, #652]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b5a:	f893 36c0 	ldrb.w	r3, [r3, #1728]	; 0x6c0
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	0092      	lsls	r2, r2, #2
 8000b64:	441a      	add	r2, r3
 8000b66:	00d2      	lsls	r2, r2, #3
 8000b68:	4413      	add	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b9e      	ldr	r3, [pc, #632]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b70:	f8a3 2668 	strh.w	r2, [r3, #1640]	; 0x668
/* Sum: '<S36>/Add1' */
/*@>fef9*/VCU_B./*@>11287*/Add1_f/*@>8996*/ = /*@>e8fe*/(real_T)/*@>feff*/VCU_B./*@>1128a*/Factor_oq/*@>e6a0*/ * /*@>e69f*/6.103515625E-5;
 8000b74:	4b9c      	ldr	r3, [pc, #624]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b76:	f8b3 3668 	ldrh.w	r3, [r3, #1640]	; 0x668
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f00d fefe 	bl	800e97c <__aeabi_ui2d>
 8000b80:	4602      	mov	r2, r0
 8000b82:	460b      	mov	r3, r1
 8000b84:	4610      	mov	r0, r2
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 0200 	mov.w	r2, #0
 8000b8c:	4b9a      	ldr	r3, [pc, #616]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000b8e:	f00d ff6b 	bl	800ea68 <__aeabi_dmul>
 8000b92:	4602      	mov	r2, r0
 8000b94:	460b      	mov	r3, r1
 8000b96:	4994      	ldr	r1, [pc, #592]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000b98:	f501 619b 	add.w	r1, r1, #1240	; 0x4d8
 8000b9c:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S13>/Data Store Read' */
/*@>ff05*/VCU_B./*@>1128d*/DataStoreRead_c/*@>6bf1*/ = /*@>10384*/VCU_DW./*@>11458*/VAR_IN_STW_shift_up_request;
 8000ba0:	4b94      	ldr	r3, [pc, #592]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000ba2:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8000ba6:	4b90      	ldr	r3, [pc, #576]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000ba8:	f883 26c1 	strb.w	r2, [r3, #1729]	; 0x6c1
/* DataTypeConversion: '<S13>/Data Type Conversion' */
/*@>ff0b*/VCU_B./*@>11290*/STW_shift_up_request/*@>6bf4*/ = /*@>ff11*/VCU_B./*@>11293*/DataStoreRead_c;
 8000bac:	4b8e      	ldr	r3, [pc, #568]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000bae:	f893 36c1 	ldrb.w	r3, [r3, #1729]	; 0x6c1
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f00d fee2 	bl	800e97c <__aeabi_ui2d>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	498a      	ldr	r1, [pc, #552]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000bbe:	f501 619c 	add.w	r1, r1, #1248	; 0x4e0
 8000bc2:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S13>/Data Store Read1' */
/*@>ff17*/VCU_B./*@>11296*/DataStoreRead1_j/*@>6bf6*/ = /*@>1038a*/VCU_DW./*@>1145b*/VAR_IN_STW_shift_down_request;
 8000bc6:	4b8b      	ldr	r3, [pc, #556]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000bc8:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
 8000bcc:	4b86      	ldr	r3, [pc, #536]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000bce:	f883 26c2 	strb.w	r2, [r3, #1730]	; 0x6c2
/* DataTypeConversion: '<S13>/Data Type Conversion1' */
/*@>ff1d*/VCU_B./*@>11299*/STW_shift_down_request/*@>6bf9*/ = /*@>ff23*/VCU_B./*@>1129c*/DataStoreRead1_j;
 8000bd2:	4b85      	ldr	r3, [pc, #532]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000bd4:	f893 36c2 	ldrb.w	r3, [r3, #1730]	; 0x6c2
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f00d fecf 	bl	800e97c <__aeabi_ui2d>
 8000bde:	4602      	mov	r2, r0
 8000be0:	460b      	mov	r3, r1
 8000be2:	4981      	ldr	r1, [pc, #516]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000be4:	f501 619d 	add.w	r1, r1, #1256	; 0x4e8
 8000be8:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S13>/Data Store Read2' */
/*@>ff29*/VCU_B./*@>1129f*/DataStoreRead2_i/*@>6bfb*/ = /*@>10390*/VCU_DW./*@>1145e*/VAR_IN_STW_transmission_mode;
 8000bec:	4b81      	ldr	r3, [pc, #516]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000bee:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
 8000bf2:	4b7d      	ldr	r3, [pc, #500]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000bf4:	f883 26c3 	strb.w	r2, [r3, #1731]	; 0x6c3
/* DataTypeConversion: '<S13>/Data Type Conversion6' */
/*@>ff2f*/VCU_B./*@>112a2*/STW_transmission_mode/*@>6bfe*/ = /*@>ff35*/VCU_B./*@>112a5*/DataStoreRead2_i;
 8000bf8:	4b7b      	ldr	r3, [pc, #492]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000bfa:	f893 36c3 	ldrb.w	r3, [r3, #1731]	; 0x6c3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f00d febc 	bl	800e97c <__aeabi_ui2d>
 8000c04:	4602      	mov	r2, r0
 8000c06:	460b      	mov	r3, r1
 8000c08:	4977      	ldr	r1, [pc, #476]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c0a:	f501 619e 	add.w	r1, r1, #1264	; 0x4f0
 8000c0e:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S14>/Data Store Read9' */
/*@>ff3b*/VCU_B./*@>112a8*/DataStoreRead9_m/*@>6c00*/ = /*@>10396*/VCU_DW./*@>11461*/VAR_IN_x_RH_F;
 8000c12:	4b78      	ldr	r3, [pc, #480]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000c14:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8000c18:	4973      	ldr	r1, [pc, #460]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c1a:	f501 619f 	add.w	r1, r1, #1272	; 0x4f8
 8000c1e:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V19' */
/*@>ff41*/VCU_B./*@>112ab*/mVV19/*@>6c08*/ = /*@>e625*/0.001/*@>e69a*/ * /*@>ff47*/VCU_B./*@>112ae*/DataStoreRead9_m;
 8000c22:	4b71      	ldr	r3, [pc, #452]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c24:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 8000c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2c:	4610      	mov	r0, r2
 8000c2e:	4619      	mov	r1, r3
 8000c30:	a36b      	add	r3, pc, #428	; (adr r3, 8000de0 <FUNC_InputData+0x9a8>)
 8000c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c36:	f00d ff17 	bl	800ea68 <__aeabi_dmul>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	496a      	ldr	r1, [pc, #424]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c40:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8000c44:	e9c1 2300 	strd	r2, r3, [r1]
/* Lookup_n-D: '<S14>/1-D Lookup Table4' */
/*@>ff4d*/VCU_B./*@>112b1*/x_RH_F/*@>8afb*/ = /*@>f593*/look1_binlxpw(/*@>ff53*/VCU_B./*@>112b4*/mVV19, /*@>101d8*/VCU_ConstP./*@>113cb*/pooled7, /*@>101de*/VCU_ConstP./*@>113ce*/pooled6, /*@>e57e*/1U);
 8000c48:	4b67      	ldr	r3, [pc, #412]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c52:	2101      	movs	r1, #1
 8000c54:	9100      	str	r1, [sp, #0]
 8000c56:	4610      	mov	r0, r2
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4a68      	ldr	r2, [pc, #416]	; (8000dfc <FUNC_InputData+0x9c4>)
 8000c5c:	4b68      	ldr	r3, [pc, #416]	; (8000e00 <FUNC_InputData+0x9c8>)
 8000c5e:	f004 ffeb 	bl	8005c38 <look1_binlxpw>
 8000c62:	4602      	mov	r2, r0
 8000c64:	460b      	mov	r3, r1
 8000c66:	4960      	ldr	r1, [pc, #384]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c68:	f501 61a1 	add.w	r1, r1, #1288	; 0x508
 8000c6c:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S14>/Data Store Read10' */
/*@>ff59*/VCU_B./*@>112b7*/DataStoreRead10/*@>6c11*/ = /*@>1039c*/VCU_DW./*@>11464*/VAR_IN_x_RH_RL;
 8000c70:	4b60      	ldr	r3, [pc, #384]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000c72:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000c76:	495c      	ldr	r1, [pc, #368]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c78:	f501 61a2 	add.w	r1, r1, #1296	; 0x510
 8000c7c:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V20' */
/*@>ff5f*/VCU_B./*@>112ba*/mVV20/*@>6c19*/ = /*@>e626*/0.001/*@>e696*/ * /*@>ff65*/VCU_B./*@>112bd*/DataStoreRead10;
 8000c80:	4b59      	ldr	r3, [pc, #356]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c82:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8000c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	a354      	add	r3, pc, #336	; (adr r3, 8000de0 <FUNC_InputData+0x9a8>)
 8000c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c94:	f00d fee8 	bl	800ea68 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4952      	ldr	r1, [pc, #328]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000c9e:	f501 61a3 	add.w	r1, r1, #1304	; 0x518
 8000ca2:	e9c1 2300 	strd	r2, r3, [r1]
/* Lookup_n-D: '<S14>/1-D Lookup Table5' */
/*@>ff6b*/VCU_B./*@>112c0*/x_RH_RL/*@>8b24*/ = /*@>f597*/look1_binlxpw(/*@>ff71*/VCU_B./*@>112c3*/mVV20, /*@>101e4*/VCU_ConstP./*@>113d1*/uDLookupTable5_bp01Data, /*@>101ea*/VCU_ConstP./*@>113d4*/pooled6, /*@>e584*/1U);
 8000ca6:	4b50      	ldr	r3, [pc, #320]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000ca8:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8000cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	9100      	str	r1, [sp, #0]
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4a52      	ldr	r2, [pc, #328]	; (8000e04 <FUNC_InputData+0x9cc>)
 8000cba:	4b51      	ldr	r3, [pc, #324]	; (8000e00 <FUNC_InputData+0x9c8>)
 8000cbc:	f004 ffbc 	bl	8005c38 <look1_binlxpw>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	4948      	ldr	r1, [pc, #288]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000cc6:	f501 61a4 	add.w	r1, r1, #1312	; 0x520
 8000cca:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S14>/Data Store Read11' */
/*@>ff77*/VCU_B./*@>112c6*/DataStoreRead11/*@>6c22*/ = /*@>103a2*/VCU_DW./*@>11467*/VAR_IN_x_RH_RR;
 8000cce:	4b49      	ldr	r3, [pc, #292]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000cd0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8000cd4:	4944      	ldr	r1, [pc, #272]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000cd6:	f501 61a5 	add.w	r1, r1, #1320	; 0x528
 8000cda:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V21' */
/*@>ff7d*/VCU_B./*@>112c9*/mVV21/*@>6c2a*/ = /*@>e627*/0.001/*@>e692*/ * /*@>ff83*/VCU_B./*@>112cc*/DataStoreRead11;
 8000cde:	4b42      	ldr	r3, [pc, #264]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000ce0:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8000ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce8:	4610      	mov	r0, r2
 8000cea:	4619      	mov	r1, r3
 8000cec:	a33c      	add	r3, pc, #240	; (adr r3, 8000de0 <FUNC_InputData+0x9a8>)
 8000cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf2:	f00d feb9 	bl	800ea68 <__aeabi_dmul>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	493b      	ldr	r1, [pc, #236]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000cfc:	f501 61a6 	add.w	r1, r1, #1328	; 0x530
 8000d00:	e9c1 2300 	strd	r2, r3, [r1]
/* Lookup_n-D: '<S14>/1-D Lookup Table6' */
/*@>ff89*/VCU_B./*@>112cf*/x_RH_RR/*@>8b4d*/ = /*@>f59b*/look1_binlxpw(/*@>ff8f*/VCU_B./*@>112d2*/mVV21, /*@>101f0*/VCU_ConstP./*@>113d7*/pooled7, /*@>101f6*/VCU_ConstP./*@>113da*/pooled6, /*@>e58a*/1U);
 8000d04:	4b38      	ldr	r3, [pc, #224]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d06:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8000d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0e:	2101      	movs	r1, #1
 8000d10:	9100      	str	r1, [sp, #0]
 8000d12:	4610      	mov	r0, r2
 8000d14:	4619      	mov	r1, r3
 8000d16:	4a39      	ldr	r2, [pc, #228]	; (8000dfc <FUNC_InputData+0x9c4>)
 8000d18:	4b39      	ldr	r3, [pc, #228]	; (8000e00 <FUNC_InputData+0x9c8>)
 8000d1a:	f004 ff8d 	bl	8005c38 <look1_binlxpw>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4931      	ldr	r1, [pc, #196]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d24:	f501 61a7 	add.w	r1, r1, #1336	; 0x538
 8000d28:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S14>/Data Store Read2' */
/*@>ff95*/VCU_B./*@>112d5*/DataStoreRead2_k/*@>6c33*/ = /*@>103a8*/VCU_DW./*@>1146a*/VAR_IN_p_pneum;
 8000d2c:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000d2e:	f893 2134 	ldrb.w	r2, [r3, #308]	; 0x134
 8000d32:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d34:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
/* Gain: '<S14>/CAN to bar' */
/*@>ff9b*/VCU_B./*@>112d8*/p_pneum/*@>6c3b*/ = /*@>e92b*/(uint16_T)(/*@>e7f2*/164U/*@>e68d*/ * /*@>ffa1*/VCU_B./*@>112db*/DataStoreRead2_k);
 8000d38:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d3a:	f893 36c4 	ldrb.w	r3, [r3, #1732]	; 0x6c4
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	461a      	mov	r2, r3
 8000d42:	0092      	lsls	r2, r2, #2
 8000d44:	441a      	add	r2, r3
 8000d46:	00d2      	lsls	r2, r2, #3
 8000d48:	4413      	add	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d50:	f8a3 266a 	strh.w	r2, [r3, #1642]	; 0x66a
/* DataStoreRead: '<S14>/Data Store Read3' */
/*@>ffa7*/VCU_B./*@>112de*/DataStoreRead3/*@>6c3d*/ = /*@>103ae*/VCU_DW./*@>1146d*/VAR_IN_x_clutch;
 8000d54:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <FUNC_InputData+0x9bc>)
 8000d56:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000d5a:	4923      	ldr	r1, [pc, #140]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d5c:	f501 61a8 	add.w	r1, r1, #1344	; 0x540
 8000d60:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V14' */
/*@>ffad*/VCU_B./*@>112e1*/mVV14/*@>6c45*/ = /*@>e628*/0.001/*@>e687*/ * /*@>ffb3*/VCU_B./*@>112e4*/DataStoreRead3;
 8000d64:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d66:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8000d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6e:	4610      	mov	r0, r2
 8000d70:	4619      	mov	r1, r3
 8000d72:	a31b      	add	r3, pc, #108	; (adr r3, 8000de0 <FUNC_InputData+0x9a8>)
 8000d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d78:	f00d fe76 	bl	800ea68 <__aeabi_dmul>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	4919      	ldr	r1, [pc, #100]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d82:	f501 61a9 	add.w	r1, r1, #1352	; 0x548
 8000d86:	e9c1 2300 	strd	r2, r3, [r1]
/* Saturate: '<S14>/Saturation' incorporates:
 *  Lookup_n-D: '<S14>/Clutch_Pos2'
 */
/*@>ffb9*/VCU_B./*@>112e7*/x_clutch/*@>8b76*/ = /*@>f59f*/look1_binlxpw(/*@>ffbf*/VCU_B./*@>112ea*/mVV14, /*@>101fc*/VCU_ConstP./*@>113dd*/Clutch_Pos2_bp01Data, /*@>10202*/VCU_ConstP./*@>113e0*/pooled5, /*@>e590*/1U);
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000d8c:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 8000d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d94:	2101      	movs	r1, #1
 8000d96:	9100      	str	r1, [sp, #0]
 8000d98:	4610      	mov	r0, r2
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4a1a      	ldr	r2, [pc, #104]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <FUNC_InputData+0x9b8>)
 8000da0:	f004 ff4a 	bl	8005c38 <look1_binlxpw>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	490f      	ldr	r1, [pc, #60]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000daa:	f501 61aa 	add.w	r1, r1, #1360	; 0x550
 8000dae:	e9c1 2300 	strd	r2, r3, [r1]
/*@>ea62*/if (/*@>ffc5*/VCU_B./*@>112ed*/x_clutch/*@>ea5d*/ > /*@>eec3*/25.0) {
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000db4:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8000db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbc:	4610      	mov	r0, r2
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f04f 0200 	mov.w	r2, #0
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <FUNC_InputData+0x9d4>)
 8000dc6:	f00e f8df 	bl	800ef88 <__aeabi_dcmpgt>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d023      	beq.n	8000e18 <FUNC_InputData+0x9e0>
    /*@>ffd1*/VCU_B./*@>112f3*/x_clutch_b/*@>ea64*/ = /*@>eec9*/25.0;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <FUNC_InputData+0x9b0>)
 8000dd2:	f503 61ab 	add.w	r1, r3, #1368	; 0x558
 8000dd6:	f04f 0200 	mov.w	r2, #0
 8000dda:	e019      	b.n	8000e10 <FUNC_InputData+0x9d8>
 8000ddc:	f3af 8000 	nop.w
 8000de0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000de4:	3f50624d 	.word	0x3f50624d
 8000de8:	200008c8 	.word	0x200008c8
 8000dec:	0800f1f8 	.word	0x0800f1f8
 8000df0:	0800f1e8 	.word	0x0800f1e8
 8000df4:	20001058 	.word	0x20001058
 8000df8:	3f100000 	.word	0x3f100000
 8000dfc:	0800f218 	.word	0x0800f218
 8000e00:	0800f208 	.word	0x0800f208
 8000e04:	0800f228 	.word	0x0800f228
 8000e08:	0800f238 	.word	0x0800f238
 8000e0c:	40390000 	.word	0x40390000
 8000e10:	4ba7      	ldr	r3, [pc, #668]	; (80010b0 <FUNC_InputData+0xc78>)
 8000e12:	e9c1 2300 	strd	r2, r3, [r1]
 8000e16:	e023      	b.n	8000e60 <FUNC_InputData+0xa28>
} else /*@>ea65*/if (/*@>ffcb*/VCU_B./*@>112f0*/x_clutch/*@>ea5a*/ < /*@>eec5*/0.0) {
 8000e18:	4ba6      	ldr	r3, [pc, #664]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000e1a:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	4610      	mov	r0, r2
 8000e24:	4619      	mov	r1, r3
 8000e26:	f04f 0200 	mov.w	r2, #0
 8000e2a:	f04f 0300 	mov.w	r3, #0
 8000e2e:	f00e f88d 	bl	800ef4c <__aeabi_dcmplt>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d009      	beq.n	8000e4c <FUNC_InputData+0xa14>
    /*@>ffe3*/VCU_B./*@>112fc*/x_clutch_b/*@>ea67*/ = /*@>eec7*/0.0;
 8000e38:	4b9e      	ldr	r3, [pc, #632]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000e3a:	f503 61ab 	add.w	r1, r3, #1368	; 0x558
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9c1 2300 	strd	r2, r3, [r1]
 8000e4a:	e009      	b.n	8000e60 <FUNC_InputData+0xa28>
} else {
    /*@>ffd7*/VCU_B./*@>112f6*/x_clutch_b/*@>ea61*/ = /*@>ffdd*/VCU_B./*@>112f9*/x_clutch;
 8000e4c:	4b99      	ldr	r3, [pc, #612]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000e4e:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	4997      	ldr	r1, [pc, #604]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000e58:	f501 61ab 	add.w	r1, r1, #1368	; 0x558
 8000e5c:	e9c1 2300 	strd	r2, r3, [r1]
}
/* End of Saturate: '<S14>/Saturation' */

/* DataStoreRead: '<S14>/Data Store Read' */
/*@>ffe9*/VCU_B./*@>112ff*/DataStoreRead/*@>6c54*/ = /*@>103b4*/VCU_DW./*@>11470*/VAR_IN_Fans_dash_bit;
 8000e60:	4b95      	ldr	r3, [pc, #596]	; (80010b8 <FUNC_InputData+0xc80>)
 8000e62:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8000e66:	4993      	ldr	r1, [pc, #588]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000e68:	f501 61ac 	add.w	r1, r1, #1376	; 0x560
 8000e6c:	e9c1 2300 	strd	r2, r3, [r1]
/* DataTypeConversion: '<S14>/Data Type Conversion10' */
/*@>ffef*/VCU_B./*@>11302*/Fans_dash_bit/*@>6c57*/ = (/*@>fff5*/VCU_B./*@>11305*/DataStoreRead/*@>e684*/ != /*@>e682*/0.0);
 8000e70:	4b90      	ldr	r3, [pc, #576]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000e72:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8000e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	460c      	mov	r4, r1
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	f04f 0300 	mov.w	r3, #0
 8000e8a:	f00e f855 	bl	800ef38 <__aeabi_dcmpeq>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <FUNC_InputData+0xa60>
 8000e94:	2300      	movs	r3, #0
 8000e96:	461c      	mov	r4, r3
 8000e98:	b2e3      	uxtb	r3, r4
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b85      	ldr	r3, [pc, #532]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000e9e:	f883 2782 	strb.w	r2, [r3, #1922]	; 0x782
/* DataStoreRead: '<S14>/Data Store Read1' */
/*@>fffb*/VCU_B./*@>11308*/DataStoreRead1/*@>6c59*/ = /*@>103ba*/VCU_DW./*@>11473*/VAR_IN_p_brake_R;
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <FUNC_InputData+0xc80>)
 8000ea4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000ea8:	4982      	ldr	r1, [pc, #520]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000eaa:	f501 61ad 	add.w	r1, r1, #1384	; 0x568
 8000eae:	e9c1 2300 	strd	r2, r3, [r1]
/* Saturate: '<S41>/Saturation' incorporates:
 *  Gain: '<S14>/mV//V11'
 */
/*@>10001*/VCU_B./*@>1130b*/mVV11/*@>6c61*/ = /*@>e62b*/0.001/*@>e67f*/ * /*@>10007*/VCU_B./*@>1130e*/DataStoreRead1;
 8000eb2:	4b80      	ldr	r3, [pc, #512]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000eb4:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	a373      	add	r3, pc, #460	; (adr r3, 8001090 <FUNC_InputData+0xc58>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	f00d fdcf 	bl	800ea68 <__aeabi_dmul>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4979      	ldr	r1, [pc, #484]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000ed0:	f501 61ae 	add.w	r1, r1, #1392	; 0x570
 8000ed4:	e9c1 2300 	strd	r2, r3, [r1]
/*@>eaad*/if (/*@>1000d*/VCU_B./*@>11311*/mVV11/*@>eaa8*/ > /*@>eecb*/4.8) {
 8000ed8:	4b76      	ldr	r3, [pc, #472]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000eda:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	a36c      	add	r3, pc, #432	; (adr r3, 8001098 <FUNC_InputData+0xc60>)
 8000ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eec:	f00e f84c 	bl	800ef88 <__aeabi_dcmpgt>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d008      	beq.n	8000f08 <FUNC_InputData+0xad0>
    /*@>10019*/VCU_B./*@>11317*/Saturation_i/*@>eaaf*/ = /*@>eed1*/4.8;
 8000ef6:	4b6f      	ldr	r3, [pc, #444]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000ef8:	f503 61af 	add.w	r1, r3, #1400	; 0x578
 8000efc:	a366      	add	r3, pc, #408	; (adr r3, 8001098 <FUNC_InputData+0xc60>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	e9c1 2300 	strd	r2, r3, [r1]
 8000f06:	e021      	b.n	8000f4c <FUNC_InputData+0xb14>
} else /*@>eab0*/if (/*@>10013*/VCU_B./*@>11314*/mVV11/*@>eaa5*/ < /*@>eecd*/0.5) {
 8000f08:	4b6a      	ldr	r3, [pc, #424]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000f0a:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	4b68      	ldr	r3, [pc, #416]	; (80010bc <FUNC_InputData+0xc84>)
 8000f1c:	f00e f816 	bl	800ef4c <__aeabi_dcmplt>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d008      	beq.n	8000f38 <FUNC_InputData+0xb00>
    /*@>1002b*/VCU_B./*@>11320*/Saturation_i/*@>eab2*/ = /*@>eecf*/0.5;
 8000f26:	4b63      	ldr	r3, [pc, #396]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000f28:	f503 61af 	add.w	r1, r3, #1400	; 0x578
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	4b62      	ldr	r3, [pc, #392]	; (80010bc <FUNC_InputData+0xc84>)
 8000f32:	e9c1 2300 	strd	r2, r3, [r1]
 8000f36:	e009      	b.n	8000f4c <FUNC_InputData+0xb14>
} else {
    /*@>1001f*/VCU_B./*@>1131a*/Saturation_i/*@>eaac*/ = /*@>10025*/VCU_B./*@>1131d*/mVV11;
 8000f38:	4b5e      	ldr	r3, [pc, #376]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000f3a:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8000f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f42:	495c      	ldr	r1, [pc, #368]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000f44:	f501 61af 	add.w	r1, r1, #1400	; 0x578
 8000f48:	e9c1 2300 	strd	r2, r3, [r1]
/* End of Saturate: '<S41>/Saturation' */

/* Sum: '<S41>/Add' incorporates:
 *  Constant: '<S41>/Offset'
 */
/*@>10031*/VCU_B./*@>11323*/Add_p/*@>89ef*/ = /*@>10037*/VCU_B./*@>11326*/Saturation_i/*@>89ec*/ - /*@>e62e*/0.5;
 8000f4c:	4b59      	ldr	r3, [pc, #356]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000f4e:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8000f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f56:	4610      	mov	r0, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	4b57      	ldr	r3, [pc, #348]	; (80010bc <FUNC_InputData+0xc84>)
 8000f60:	f00d fbce 	bl	800e700 <__aeabi_dsub>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4952      	ldr	r1, [pc, #328]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000f6a:	f501 61b0 	add.w	r1, r1, #1408	; 0x580
 8000f6e:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S41>/Sensitivity: 15,38 mV // bar' */
/*@>1003d*/VCU_B./*@>11329*/Sensitivity1538mVbar/*@>6c74*/ = /*@>e62f*/65.019505851755525/*@>e67b*/ * /*@>10043*/VCU_B./*@>1132c*/Add_p;
 8000f72:	4b50      	ldr	r3, [pc, #320]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000f74:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	a347      	add	r3, pc, #284	; (adr r3, 80010a0 <FUNC_InputData+0xc68>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	f00d fd6f 	bl	800ea68 <__aeabi_dmul>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4949      	ldr	r1, [pc, #292]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000f90:	f501 61b1 	add.w	r1, r1, #1416	; 0x588
 8000f94:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S14>/Data Store Read12' */
/*@>10049*/VCU_B./*@>1132f*/DataStoreRead12/*@>6c76*/ = /*@>103c0*/VCU_DW./*@>11476*/VAR_IN_U_Bat;
 8000f98:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <FUNC_InputData+0xc80>)
 8000f9a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000f9e:	4945      	ldr	r1, [pc, #276]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000fa0:	f501 61b2 	add.w	r1, r1, #1424	; 0x590
 8000fa4:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V13' */
/*@>1004f*/VCU_B./*@>11332*/U_Bat/*@>6c7e*/ = /*@>e630*/0.001/*@>e677*/ * /*@>10055*/VCU_B./*@>11335*/DataStoreRead12;
 8000fa8:	4b42      	ldr	r3, [pc, #264]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000faa:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	a336      	add	r3, pc, #216	; (adr r3, 8001090 <FUNC_InputData+0xc58>)
 8000fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbc:	f00d fd54 	bl	800ea68 <__aeabi_dmul>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	493b      	ldr	r1, [pc, #236]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000fc6:	f501 61b3 	add.w	r1, r1, #1432	; 0x598
 8000fca:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S14>/Data Store Read4' */
/*@>1005b*/VCU_B./*@>11338*/DataStoreRead4/*@>6c80*/ = /*@>103c6*/VCU_DW./*@>11479*/VAR_IN_f_FL;
 8000fce:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <FUNC_InputData+0xc80>)
 8000fd0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000fd4:	4937      	ldr	r1, [pc, #220]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000fd6:	f501 61b4 	add.w	r1, r1, #1440	; 0x5a0
 8000fda:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V15' */
/*@>10061*/VCU_B./*@>1133b*/mVV15/*@>6c88*/ = /*@>e631*/0.001/*@>e673*/ * /*@>10067*/VCU_B./*@>1133e*/DataStoreRead4;
 8000fde:	4b35      	ldr	r3, [pc, #212]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000fe0:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8000fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	a328      	add	r3, pc, #160	; (adr r3, 8001090 <FUNC_InputData+0xc58>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	f00d fd39 	bl	800ea68 <__aeabi_dmul>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	492e      	ldr	r1, [pc, #184]	; (80010b4 <FUNC_InputData+0xc7c>)
 8000ffc:	f501 61b5 	add.w	r1, r1, #1448	; 0x5a8
 8001000:	e9c1 2300 	strd	r2, r3, [r1]
/* Saturate: '<S42>/Saturation1' incorporates:
 *  Lookup_n-D: '<S42>/1-D Lookup Table1'
 */
/*@>1006d*/VCU_B./*@>11341*/uDLookupTable1/*@>8b9f*/ = /*@>f5a3*/look1_binlxpw(/*@>10073*/VCU_B./*@>11344*/mVV15, /*@>10208*/VCU_ConstP./*@>113e3*/uDLookupTable1_bp01Data, /*@>1020e*/VCU_ConstP./*@>113e6*/uDLookupTable1_tableData, /*@>e596*/1U);
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <FUNC_InputData+0xc7c>)
 8001006:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	2101      	movs	r1, #1
 8001010:	9100      	str	r1, [sp, #0]
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	4a2a      	ldr	r2, [pc, #168]	; (80010c0 <FUNC_InputData+0xc88>)
 8001018:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <FUNC_InputData+0xc8c>)
 800101a:	f004 fe0d 	bl	8005c38 <look1_binlxpw>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4924      	ldr	r1, [pc, #144]	; (80010b4 <FUNC_InputData+0xc7c>)
 8001024:	f501 61b6 	add.w	r1, r1, #1456	; 0x5b0
 8001028:	e9c1 2300 	strd	r2, r3, [r1]
/*@>eaf8*/if (/*@>10079*/VCU_B./*@>11347*/uDLookupTable1/*@>eaf3*/ > /*@>eed3*/9000.0) {
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <FUNC_InputData+0xc7c>)
 800102e:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	a31b      	add	r3, pc, #108	; (adr r3, 80010a8 <FUNC_InputData+0xc70>)
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	f00d ffa2 	bl	800ef88 <__aeabi_dcmpgt>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d008      	beq.n	800105c <FUNC_InputData+0xc24>
    /*@>10085*/VCU_B./*@>1134d*/Saturation1_e/*@>eafa*/ = /*@>eed9*/9000.0;
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <FUNC_InputData+0xc7c>)
 800104c:	f503 61b7 	add.w	r1, r3, #1464	; 0x5b8
 8001050:	a315      	add	r3, pc, #84	; (adr r3, 80010a8 <FUNC_InputData+0xc70>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	e9c1 2300 	strd	r2, r3, [r1]
 800105a:	e03f      	b.n	80010dc <FUNC_InputData+0xca4>
} else /*@>eafb*/if (/*@>1007f*/VCU_B./*@>1134a*/uDLookupTable1/*@>eaf0*/ < /*@>eed5*/0.0) {
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <FUNC_InputData+0xc7c>)
 800105e:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	f00d ff6b 	bl	800ef4c <__aeabi_dcmplt>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d025      	beq.n	80010c8 <FUNC_InputData+0xc90>
    /*@>10097*/VCU_B./*@>11356*/Saturation1_e/*@>eafd*/ = /*@>eed7*/0.0;
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <FUNC_InputData+0xc7c>)
 800107e:	f503 61b7 	add.w	r1, r3, #1464	; 0x5b8
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	e9c1 2300 	strd	r2, r3, [r1]
 800108e:	e025      	b.n	80010dc <FUNC_InputData+0xca4>
 8001090:	d2f1a9fc 	.word	0xd2f1a9fc
 8001094:	3f50624d 	.word	0x3f50624d
 8001098:	33333333 	.word	0x33333333
 800109c:	40133333 	.word	0x40133333
 80010a0:	9578d7b8 	.word	0x9578d7b8
 80010a4:	4050413f 	.word	0x4050413f
 80010a8:	00000000 	.word	0x00000000
 80010ac:	40c19400 	.word	0x40c19400
 80010b0:	40390000 	.word	0x40390000
 80010b4:	200008c8 	.word	0x200008c8
 80010b8:	20001058 	.word	0x20001058
 80010bc:	3fe00000 	.word	0x3fe00000
 80010c0:	0800f258 	.word	0x0800f258
 80010c4:	0800f248 	.word	0x0800f248
} else {
    /*@>1008b*/VCU_B./*@>11350*/Saturation1_e/*@>eaf7*/ = /*@>10091*/VCU_B./*@>11353*/uDLookupTable1;
 80010c8:	4ba5      	ldr	r3, [pc, #660]	; (8001360 <FUNC_InputData+0xf28>)
 80010ca:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	49a3      	ldr	r1, [pc, #652]	; (8001360 <FUNC_InputData+0xf28>)
 80010d4:	f501 61b7 	add.w	r1, r1, #1464	; 0x5b8
 80010d8:	e9c1 2300 	strd	r2, r3, [r1]
}
/* End of Saturate: '<S42>/Saturation1' */

/* DataStoreRead: '<S14>/Data Store Read5' */
/*@>1009d*/VCU_B./*@>11359*/DataStoreRead5/*@>6c97*/ = /*@>103cc*/VCU_DW./*@>1147c*/VAR_IN_f_FR;
 80010dc:	4ba1      	ldr	r3, [pc, #644]	; (8001364 <FUNC_InputData+0xf2c>)
 80010de:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80010e2:	499f      	ldr	r1, [pc, #636]	; (8001360 <FUNC_InputData+0xf28>)
 80010e4:	f501 61b8 	add.w	r1, r1, #1472	; 0x5c0
 80010e8:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V16' */
/*@>100a3*/VCU_B./*@>1135c*/mVV16/*@>6c9f*/ = /*@>e634*/0.001/*@>e66f*/ * /*@>100a9*/VCU_B./*@>1135f*/DataStoreRead5;
 80010ec:	4b9c      	ldr	r3, [pc, #624]	; (8001360 <FUNC_InputData+0xf28>)
 80010ee:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	a395      	add	r3, pc, #596	; (adr r3, 8001350 <FUNC_InputData+0xf18>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	f00d fcb2 	bl	800ea68 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4995      	ldr	r1, [pc, #596]	; (8001360 <FUNC_InputData+0xf28>)
 800110a:	f501 61b9 	add.w	r1, r1, #1480	; 0x5c8
 800110e:	e9c1 2300 	strd	r2, r3, [r1]
/* Saturate: '<S43>/Saturation1' incorporates:
 *  Lookup_n-D: '<S43>/1-D Lookup Table1'
 */
/*@>100af*/VCU_B./*@>11362*/uDLookupTable1_k/*@>8bc8*/ = /*@>f5a7*/look1_binlxpw(/*@>100b5*/VCU_B./*@>11365*/mVV16, /*@>10214*/VCU_ConstP./*@>113e9*/uDLookupTable1_bp01Data_d, /*@>1021a*/VCU_ConstP./*@>113ec*/uDLookupTable1_tableData_o, /*@>e59c*/1U);
 8001112:	4b93      	ldr	r3, [pc, #588]	; (8001360 <FUNC_InputData+0xf28>)
 8001114:	f503 63b9 	add.w	r3, r3, #1480	; 0x5c8
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	2101      	movs	r1, #1
 800111e:	9100      	str	r1, [sp, #0]
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	4a90      	ldr	r2, [pc, #576]	; (8001368 <FUNC_InputData+0xf30>)
 8001126:	4b91      	ldr	r3, [pc, #580]	; (800136c <FUNC_InputData+0xf34>)
 8001128:	f004 fd86 	bl	8005c38 <look1_binlxpw>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	498b      	ldr	r1, [pc, #556]	; (8001360 <FUNC_InputData+0xf28>)
 8001132:	f501 61ba 	add.w	r1, r1, #1488	; 0x5d0
 8001136:	e9c1 2300 	strd	r2, r3, [r1]
/*@>eb43*/if (/*@>100bb*/VCU_B./*@>11368*/uDLookupTable1_k/*@>eb3e*/ > /*@>eedb*/9000.0) {
 800113a:	4b89      	ldr	r3, [pc, #548]	; (8001360 <FUNC_InputData+0xf28>)
 800113c:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8001140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	a383      	add	r3, pc, #524	; (adr r3, 8001358 <FUNC_InputData+0xf20>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f00d ff1b 	bl	800ef88 <__aeabi_dcmpgt>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d008      	beq.n	800116a <FUNC_InputData+0xd32>
    /*@>100c7*/VCU_B./*@>1136e*/Saturation1_n/*@>eb45*/ = /*@>eee1*/9000.0;
 8001158:	4b81      	ldr	r3, [pc, #516]	; (8001360 <FUNC_InputData+0xf28>)
 800115a:	f503 61bb 	add.w	r1, r3, #1496	; 0x5d8
 800115e:	a37e      	add	r3, pc, #504	; (adr r3, 8001358 <FUNC_InputData+0xf20>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	e9c1 2300 	strd	r2, r3, [r1]
 8001168:	e023      	b.n	80011b2 <FUNC_InputData+0xd7a>
} else /*@>eb46*/if (/*@>100c1*/VCU_B./*@>1136b*/uDLookupTable1_k/*@>eb3b*/ < /*@>eedd*/0.0) {
 800116a:	4b7d      	ldr	r3, [pc, #500]	; (8001360 <FUNC_InputData+0xf28>)
 800116c:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	f00d fee4 	bl	800ef4c <__aeabi_dcmplt>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d009      	beq.n	800119e <FUNC_InputData+0xd66>
    /*@>100d9*/VCU_B./*@>11377*/Saturation1_n/*@>eb48*/ = /*@>eedf*/0.0;
 800118a:	4b75      	ldr	r3, [pc, #468]	; (8001360 <FUNC_InputData+0xf28>)
 800118c:	f503 61bb 	add.w	r1, r3, #1496	; 0x5d8
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	e9c1 2300 	strd	r2, r3, [r1]
 800119c:	e009      	b.n	80011b2 <FUNC_InputData+0xd7a>
} else {
    /*@>100cd*/VCU_B./*@>11371*/Saturation1_n/*@>eb42*/ = /*@>100d3*/VCU_B./*@>11374*/uDLookupTable1_k;
 800119e:	4b70      	ldr	r3, [pc, #448]	; (8001360 <FUNC_InputData+0xf28>)
 80011a0:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	496d      	ldr	r1, [pc, #436]	; (8001360 <FUNC_InputData+0xf28>)
 80011aa:	f501 61bb 	add.w	r1, r1, #1496	; 0x5d8
 80011ae:	e9c1 2300 	strd	r2, r3, [r1]
}
/* End of Saturate: '<S43>/Saturation1' */

/* DataStoreRead: '<S14>/Data Store Read6' */
/*@>100df*/VCU_B./*@>1137a*/DataStoreRead6/*@>6cae*/ = /*@>103d2*/VCU_DW./*@>1147f*/VAR_IN_f_RL;
 80011b2:	4b6c      	ldr	r3, [pc, #432]	; (8001364 <FUNC_InputData+0xf2c>)
 80011b4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80011b8:	4969      	ldr	r1, [pc, #420]	; (8001360 <FUNC_InputData+0xf28>)
 80011ba:	f501 61bc 	add.w	r1, r1, #1504	; 0x5e0
 80011be:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V17' */
/*@>100e5*/VCU_B./*@>1137d*/mVV17/*@>6cb6*/ = /*@>e637*/0.001/*@>e66b*/ * /*@>100eb*/VCU_B./*@>11380*/DataStoreRead6;
 80011c2:	4b67      	ldr	r3, [pc, #412]	; (8001360 <FUNC_InputData+0xf28>)
 80011c4:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	a35f      	add	r3, pc, #380	; (adr r3, 8001350 <FUNC_InputData+0xf18>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f00d fc47 	bl	800ea68 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4960      	ldr	r1, [pc, #384]	; (8001360 <FUNC_InputData+0xf28>)
 80011e0:	f501 61bd 	add.w	r1, r1, #1512	; 0x5e8
 80011e4:	e9c1 2300 	strd	r2, r3, [r1]
/* Saturate: '<S44>/Saturation1' incorporates:
 *  Lookup_n-D: '<S44>/1-D Lookup Table1'
 */
/*@>100f1*/VCU_B./*@>11383*/uDLookupTable1_p/*@>8bf1*/ = /*@>f5ab*/look1_binlxpw(/*@>100f7*/VCU_B./*@>11386*/mVV17, /*@>10220*/VCU_ConstP./*@>113ef*/uDLookupTable1_bp01Data_o, /*@>10226*/VCU_ConstP./*@>113f2*/uDLookupTable1_tableData_d, /*@>e5a2*/4U);
 80011e8:	4b5d      	ldr	r3, [pc, #372]	; (8001360 <FUNC_InputData+0xf28>)
 80011ea:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	2104      	movs	r1, #4
 80011f4:	9100      	str	r1, [sp, #0]
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	4a5d      	ldr	r2, [pc, #372]	; (8001370 <FUNC_InputData+0xf38>)
 80011fc:	4b5d      	ldr	r3, [pc, #372]	; (8001374 <FUNC_InputData+0xf3c>)
 80011fe:	f004 fd1b 	bl	8005c38 <look1_binlxpw>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4956      	ldr	r1, [pc, #344]	; (8001360 <FUNC_InputData+0xf28>)
 8001208:	f501 61be 	add.w	r1, r1, #1520	; 0x5f0
 800120c:	e9c1 2300 	strd	r2, r3, [r1]
/*@>eb8e*/if (/*@>100fd*/VCU_B./*@>11389*/uDLookupTable1_p/*@>eb89*/ > /*@>eee3*/9000.0) {
 8001210:	4b53      	ldr	r3, [pc, #332]	; (8001360 <FUNC_InputData+0xf28>)
 8001212:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	a34e      	add	r3, pc, #312	; (adr r3, 8001358 <FUNC_InputData+0xf20>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	f00d feb0 	bl	800ef88 <__aeabi_dcmpgt>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d008      	beq.n	8001240 <FUNC_InputData+0xe08>
    /*@>10109*/VCU_B./*@>1138f*/Saturation1_o/*@>eb90*/ = /*@>eee9*/9000.0;
 800122e:	4b4c      	ldr	r3, [pc, #304]	; (8001360 <FUNC_InputData+0xf28>)
 8001230:	f503 61bf 	add.w	r1, r3, #1528	; 0x5f8
 8001234:	a348      	add	r3, pc, #288	; (adr r3, 8001358 <FUNC_InputData+0xf20>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	e9c1 2300 	strd	r2, r3, [r1]
 800123e:	e023      	b.n	8001288 <FUNC_InputData+0xe50>
} else /*@>eb91*/if (/*@>10103*/VCU_B./*@>1138c*/uDLookupTable1_p/*@>eb86*/ < /*@>eee5*/0.0) {
 8001240:	4b47      	ldr	r3, [pc, #284]	; (8001360 <FUNC_InputData+0xf28>)
 8001242:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	f00d fe79 	bl	800ef4c <__aeabi_dcmplt>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d009      	beq.n	8001274 <FUNC_InputData+0xe3c>
    /*@>1011b*/VCU_B./*@>11398*/Saturation1_o/*@>eb93*/ = /*@>eee7*/0.0;
 8001260:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <FUNC_InputData+0xf28>)
 8001262:	f503 61bf 	add.w	r1, r3, #1528	; 0x5f8
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	e9c1 2300 	strd	r2, r3, [r1]
 8001272:	e009      	b.n	8001288 <FUNC_InputData+0xe50>
} else {
    /*@>1010f*/VCU_B./*@>11392*/Saturation1_o/*@>eb8d*/ = /*@>10115*/VCU_B./*@>11395*/uDLookupTable1_p;
 8001274:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <FUNC_InputData+0xf28>)
 8001276:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	4938      	ldr	r1, [pc, #224]	; (8001360 <FUNC_InputData+0xf28>)
 8001280:	f501 61bf 	add.w	r1, r1, #1528	; 0x5f8
 8001284:	e9c1 2300 	strd	r2, r3, [r1]
}
/* End of Saturate: '<S44>/Saturation1' */

/* DataStoreRead: '<S14>/Data Store Read7' */
/*@>10121*/VCU_B./*@>1139b*/DataStoreRead7/*@>6cc5*/ = /*@>103d8*/VCU_DW./*@>11482*/VAR_IN_f_RR;
 8001288:	4b36      	ldr	r3, [pc, #216]	; (8001364 <FUNC_InputData+0xf2c>)
 800128a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800128e:	4934      	ldr	r1, [pc, #208]	; (8001360 <FUNC_InputData+0xf28>)
 8001290:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
 8001294:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V18' */
/*@>10127*/VCU_B./*@>1139e*/mVV18/*@>6ccd*/ = /*@>e63a*/0.001/*@>e667*/ * /*@>1012d*/VCU_B./*@>113a1*/DataStoreRead7;
 8001298:	4b31      	ldr	r3, [pc, #196]	; (8001360 <FUNC_InputData+0xf28>)
 800129a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	a32a      	add	r3, pc, #168	; (adr r3, 8001350 <FUNC_InputData+0xf18>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f00d fbdc 	bl	800ea68 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	492a      	ldr	r1, [pc, #168]	; (8001360 <FUNC_InputData+0xf28>)
 80012b6:	f501 61c1 	add.w	r1, r1, #1544	; 0x608
 80012ba:	e9c1 2300 	strd	r2, r3, [r1]
/* Saturate: '<S45>/Saturation1' incorporates:
 *  Lookup_n-D: '<S45>/1-D Lookup Table1'
 */
/*@>10133*/VCU_B./*@>113a4*/uDLookupTable1_kb/*@>8c1a*/ = /*@>f5af*/look1_binlxpw(/*@>10139*/VCU_B./*@>113a7*/mVV18, /*@>1022c*/VCU_ConstP./*@>113f5*/uDLookupTable1_bp01Data_n, /*@>10232*/VCU_ConstP./*@>113f8*/uDLookupTable1_tableData_l, /*@>e5a8*/4U);
 80012be:	4b28      	ldr	r3, [pc, #160]	; (8001360 <FUNC_InputData+0xf28>)
 80012c0:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	2104      	movs	r1, #4
 80012ca:	9100      	str	r1, [sp, #0]
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	4a29      	ldr	r2, [pc, #164]	; (8001378 <FUNC_InputData+0xf40>)
 80012d2:	4b2a      	ldr	r3, [pc, #168]	; (800137c <FUNC_InputData+0xf44>)
 80012d4:	f004 fcb0 	bl	8005c38 <look1_binlxpw>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4920      	ldr	r1, [pc, #128]	; (8001360 <FUNC_InputData+0xf28>)
 80012de:	f501 61c2 	add.w	r1, r1, #1552	; 0x610
 80012e2:	e9c1 2300 	strd	r2, r3, [r1]
/*@>ebd9*/if (/*@>1013f*/VCU_B./*@>113aa*/uDLookupTable1_kb/*@>ebd4*/ > /*@>eeeb*/9000.0) {
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <FUNC_InputData+0xf28>)
 80012e8:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	a318      	add	r3, pc, #96	; (adr r3, 8001358 <FUNC_InputData+0xf20>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f00d fe45 	bl	800ef88 <__aeabi_dcmpgt>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d008      	beq.n	8001316 <FUNC_InputData+0xede>
    /*@>1014b*/VCU_B./*@>113b0*/Saturation1_h/*@>ebdb*/ = /*@>eef1*/9000.0;
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <FUNC_InputData+0xf28>)
 8001306:	f503 61c3 	add.w	r1, r3, #1560	; 0x618
 800130a:	a313      	add	r3, pc, #76	; (adr r3, 8001358 <FUNC_InputData+0xf20>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	e9c1 2300 	strd	r2, r3, [r1]
 8001314:	e03e      	b.n	8001394 <FUNC_InputData+0xf5c>
} else /*@>ebdc*/if (/*@>10145*/VCU_B./*@>113ad*/uDLookupTable1_kb/*@>ebd1*/ < /*@>eeed*/0.0) {
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <FUNC_InputData+0xf28>)
 8001318:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	f00d fe0e 	bl	800ef4c <__aeabi_dcmplt>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d024      	beq.n	8001380 <FUNC_InputData+0xf48>
    /*@>1015d*/VCU_B./*@>113b9*/Saturation1_h/*@>ebde*/ = /*@>eeef*/0.0;
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <FUNC_InputData+0xf28>)
 8001338:	f503 61c3 	add.w	r1, r3, #1560	; 0x618
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	e9c1 2300 	strd	r2, r3, [r1]
 8001348:	e024      	b.n	8001394 <FUNC_InputData+0xf5c>
 800134a:	bf00      	nop
 800134c:	f3af 8000 	nop.w
 8001350:	d2f1a9fc 	.word	0xd2f1a9fc
 8001354:	3f50624d 	.word	0x3f50624d
 8001358:	00000000 	.word	0x00000000
 800135c:	40c19400 	.word	0x40c19400
 8001360:	200008c8 	.word	0x200008c8
 8001364:	20001058 	.word	0x20001058
 8001368:	0800f278 	.word	0x0800f278
 800136c:	0800f268 	.word	0x0800f268
 8001370:	0800f2b0 	.word	0x0800f2b0
 8001374:	0800f288 	.word	0x0800f288
 8001378:	0800f300 	.word	0x0800f300
 800137c:	0800f2d8 	.word	0x0800f2d8
} else {
    /*@>10151*/VCU_B./*@>113b3*/Saturation1_h/*@>ebd8*/ = /*@>10157*/VCU_B./*@>113b6*/uDLookupTable1_kb;
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <FUNC_InputData+0xfa4>)
 8001382:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	4914      	ldr	r1, [pc, #80]	; (80013dc <FUNC_InputData+0xfa4>)
 800138c:	f501 61c3 	add.w	r1, r1, #1560	; 0x618
 8001390:	e9c1 2300 	strd	r2, r3, [r1]
}
/* End of Saturate: '<S45>/Saturation1' */

/* DataStoreRead: '<S14>/Data Store Read8' */
/*@>10163*/VCU_B./*@>113bc*/DataStoreRead8/*@>6cdc*/ = /*@>103de*/VCU_DW./*@>11485*/VAR_IN_LC_dash_bit;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <FUNC_InputData+0xfa8>)
 8001396:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800139a:	4910      	ldr	r1, [pc, #64]	; (80013dc <FUNC_InputData+0xfa4>)
 800139c:	f501 61c4 	add.w	r1, r1, #1568	; 0x620
 80013a0:	e9c1 2300 	strd	r2, r3, [r1]
/* DataTypeConversion: '<S14>/Data Type Conversion11' */
/*@>10169*/VCU_B./*@>113bf*/LC_dash_bit/*@>6cdf*/ = (/*@>1016f*/VCU_B./*@>113c2*/DataStoreRead8/*@>e664*/ != /*@>e662*/0.0);
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <FUNC_InputData+0xfa4>)
 80013a6:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	2101      	movs	r1, #1
 80013b0:	460c      	mov	r4, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	f00d fdbb 	bl	800ef38 <__aeabi_dcmpeq>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <FUNC_InputData+0xf94>
 80013c8:	2300      	movs	r3, #0
 80013ca:	461c      	mov	r4, r3
 80013cc:	b2e3      	uxtb	r3, r4
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b02      	ldr	r3, [pc, #8]	; (80013dc <FUNC_InputData+0xfa4>)
 80013d2:	f883 2783 	strb.w	r2, [r3, #1923]	; 0x783


        
    
      
          }
 80013d6:	3704      	adds	r7, #4
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd90      	pop	{r4, r7, pc}
 80013dc:	200008c8 	.word	0x200008c8
 80013e0:	20001058 	.word	0x20001058
 80013e4:	f3af 8000 	nop.w

080013e8 <FUNC_OutputData>:
          /* Output and update for atomic system: '<Root>/Output Data' */
      
              
  
        void FUNC_OutputData(void)
  {
 80013e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013ec:	b0be      	sub	sp, #248	; 0xf8
 80013ee:	af00      	add	r7, sp, #0
  



                                /* Gain: '<S63>/Gain' */
/*@>15539*/VCU_B./*@>171d9*/n_wheel_FL_kmh/*@>6ec5*/ = /*@>12e10*/3.6/*@>13863*/ * /*@>1553f*/VCU_B./*@>171dc*/Add1_k;
 80013f0:	4bb1      	ldr	r3, [pc, #708]	; (80016b8 <FUNC_OutputData+0x2d0>)
 80013f2:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	a3ac      	add	r3, pc, #688	; (adr r3, 80016b0 <FUNC_OutputData+0x2c8>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f00d fb30 	bl	800ea68 <__aeabi_dmul>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	4ba9      	ldr	r3, [pc, #676]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001412:	e9c3 019c 	strd	r0, r1, [r3, #624]	; 0x270
/* Gain: '<S70>/Factor' */
/*@>15545*/VCU_B./*@>171df*/Factor/*@>6ecd*/ = /*@>12e11*/10.0/*@>1385f*/ * /*@>1554b*/VCU_B./*@>171e2*/n_wheel_FL_kmh;
 8001416:	4ba8      	ldr	r3, [pc, #672]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001418:	e9d3 239c 	ldrd	r2, r3, [r3, #624]	; 0x270
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	4ba5      	ldr	r3, [pc, #660]	; (80016bc <FUNC_OutputData+0x2d4>)
 8001426:	f00d fb1f 	bl	800ea68 <__aeabi_dmul>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	4ba1      	ldr	r3, [pc, #644]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001434:	e9c3 019e 	strd	r0, r1, [r3, #632]	; 0x278
/* Sum: '<S70>/Add1' */
/*@>15551*/VCU_B./*@>171e5*/Add1/*@>9919*/ = /*@>15557*/VCU_B./*@>171e8*/Factor;
 8001438:	4b9f      	ldr	r3, [pc, #636]	; (80016b8 <FUNC_OutputData+0x2d0>)
 800143a:	e9d3 239e 	ldrd	r2, r3, [r3, #632]	; 0x278
 800143e:	499e      	ldr	r1, [pc, #632]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001440:	e9c1 23a0 	strd	r2, r3, [r1, #640]	; 0x280
/* DataTypeConversion: '<S70>/Data Type Conversion10' */
/*@>1381a*/tmp/*@>1381c*/ = /*@>14b19*/floor(/*@>1555d*/VCU_B./*@>171eb*/Add1);
 8001444:	4b9c      	ldr	r3, [pc, #624]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001446:	e9d3 23a0 	ldrd	r2, r3, [r3, #640]	; 0x280
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f00c ff17 	bl	800e280 <floor>
 8001452:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>1383a*/if (/*@>14b1b*/rtIsNaN(/*@>1381e*/tmp)/*@>13828*/ || /*@>14b1d*/rtIsInf(/*@>13823*/tmp)) {
 8001456:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800145a:	f005 f805 	bl	8006468 <rtIsNaN>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d106      	bne.n	8001472 <FUNC_OutputData+0x8a>
 8001464:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001468:	f004 ffda 	bl	8006420 <rtIsInf>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d006      	beq.n	8001480 <FUNC_OutputData+0x98>
    /*@>1382b*/tmp/*@>1382d*/ = /*@>1382a*/0.0;
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800147e:	e008      	b.n	8001492 <FUNC_OutputData+0xaa>
} else {
    /*@>13836*/tmp/*@>13838*/ = /*@>14b1f*/fmod(/*@>1382f*/tmp, /*@>13833*/65536.0);
 8001480:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	4b8d      	ldr	r3, [pc, #564]	; (80016c0 <FUNC_OutputData+0x2d8>)
 800148a:	f00c ff81 	bl	800e390 <fmod>
 800148e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15563*/VCU_B./*@>171ee*/DataTypeConversion10/*@>6ed5*/ = /*@>13a97*/(uint16_T)(/*@>13841*/tmp/*@>13844*/ < /*@>13840*/0.0/*@>13844*/ ? (int32_T)/*@>1384c*/(uint16_T)-/*@<13855*//*@>1384a*/(int16_T)/*@>13858*/(uint16_T)-/*@<13848*//*@>13845*/tmp : (int32_T)/*@>1385b*/(uint16_T)/*@>1384d*/tmp);
 8001492:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	f00d fd55 	bl	800ef4c <__aeabi_dcmplt>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00e      	beq.n	80014c6 <FUNC_OutputData+0xde>
 80014a8:	f8d7 40f0 	ldr.w	r4, [r7, #240]	; 0xf0
 80014ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014b0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014b4:	4620      	mov	r0, r4
 80014b6:	4629      	mov	r1, r5
 80014b8:	f00d fd70 	bl	800ef9c <__aeabi_d2uiz>
 80014bc:	4603      	mov	r3, r0
 80014be:	b29b      	uxth	r3, r3
 80014c0:	425b      	negs	r3, r3
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	e005      	b.n	80014d2 <FUNC_OutputData+0xea>
 80014c6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80014ca:	f00d fd67 	bl	800ef9c <__aeabi_d2uiz>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4a79      	ldr	r2, [pc, #484]	; (80016b8 <FUNC_OutputData+0x2d0>)
 80014d4:	f8a2 3640 	strh.w	r3, [r2, #1600]	; 0x640
/* End of DataTypeConversion: '<S70>/Data Type Conversion10' */

/* DataStoreWrite: '<S64>/Data Store Write' */
/*@>15bd4*/VCU_DW./*@>174b2*/VAR_OUT_n_wheel_FL_kmproh/*@>6ed7*/ = /*@>15569*/VCU_B./*@>171f1*/DataTypeConversion10;
 80014d8:	4b77      	ldr	r3, [pc, #476]	; (80016b8 <FUNC_OutputData+0x2d0>)
 80014da:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 80014de:	4a79      	ldr	r2, [pc, #484]	; (80016c4 <FUNC_OutputData+0x2dc>)
 80014e0:	f8a2 30a0 	strh.w	r3, [r2, #160]	; 0xa0
/* Gain: '<S63>/Gain1' */
/*@>1556f*/VCU_B./*@>171f4*/n_wheel_FR_kmh/*@>6edf*/ = /*@>12e12*/3.6/*@>13813*/ * /*@>15575*/VCU_B./*@>171f7*/Add1_de;
 80014e4:	4b74      	ldr	r3, [pc, #464]	; (80016b8 <FUNC_OutputData+0x2d0>)
 80014e6:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	a36f      	add	r3, pc, #444	; (adr r3, 80016b0 <FUNC_OutputData+0x2c8>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f00d fab6 	bl	800ea68 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	4b6c      	ldr	r3, [pc, #432]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001506:	e9c3 01a2 	strd	r0, r1, [r3, #648]	; 0x288
/* Gain: '<S71>/Factor' */
/*@>1557b*/VCU_B./*@>171fa*/Factor_c/*@>6ee7*/ = /*@>12e13*/10.0/*@>1380f*/ * /*@>15581*/VCU_B./*@>171fd*/n_wheel_FR_kmh;
 800150a:	4b6b      	ldr	r3, [pc, #428]	; (80016b8 <FUNC_OutputData+0x2d0>)
 800150c:	e9d3 23a2 	ldrd	r2, r3, [r3, #648]	; 0x288
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b68      	ldr	r3, [pc, #416]	; (80016bc <FUNC_OutputData+0x2d4>)
 800151a:	f00d faa5 	bl	800ea68 <__aeabi_dmul>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	4b64      	ldr	r3, [pc, #400]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001528:	e9c3 01a4 	strd	r0, r1, [r3, #656]	; 0x290
/* Sum: '<S71>/Add1' */
/*@>15587*/VCU_B./*@>17200*/Add1_i/*@>991e*/ = /*@>1558d*/VCU_B./*@>17203*/Factor_c;
 800152c:	4b62      	ldr	r3, [pc, #392]	; (80016b8 <FUNC_OutputData+0x2d0>)
 800152e:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	; 0x290
 8001532:	4961      	ldr	r1, [pc, #388]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001534:	e9c1 23a6 	strd	r2, r3, [r1, #664]	; 0x298
/* DataTypeConversion: '<S71>/Data Type Conversion10' */
/*@>137ca*/tmp/*@>137cc*/ = /*@>14b21*/floor(/*@>15593*/VCU_B./*@>17206*/Add1_i);
 8001538:	4b5f      	ldr	r3, [pc, #380]	; (80016b8 <FUNC_OutputData+0x2d0>)
 800153a:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	; 0x298
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f00c fe9d 	bl	800e280 <floor>
 8001546:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>137ea*/if (/*@>14b23*/rtIsNaN(/*@>137ce*/tmp)/*@>137d8*/ || /*@>14b25*/rtIsInf(/*@>137d3*/tmp)) {
 800154a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800154e:	f004 ff8b 	bl	8006468 <rtIsNaN>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d106      	bne.n	8001566 <FUNC_OutputData+0x17e>
 8001558:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800155c:	f004 ff60 	bl	8006420 <rtIsInf>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <FUNC_OutputData+0x18c>
    /*@>137db*/tmp/*@>137dd*/ = /*@>137da*/0.0;
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001572:	e008      	b.n	8001586 <FUNC_OutputData+0x19e>
} else {
    /*@>137e6*/tmp/*@>137e8*/ = /*@>14b27*/fmod(/*@>137df*/tmp, /*@>137e3*/65536.0);
 8001574:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4b50      	ldr	r3, [pc, #320]	; (80016c0 <FUNC_OutputData+0x2d8>)
 800157e:	f00c ff07 	bl	800e390 <fmod>
 8001582:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15599*/VCU_B./*@>17209*/DataTypeConversion10_b/*@>6eef*/ = /*@>13aae*/(uint16_T)(/*@>137f1*/tmp/*@>137f4*/ < /*@>137f0*/0.0/*@>137f4*/ ? (int32_T)/*@>137fc*/(uint16_T)-/*@<13805*//*@>137fa*/(int16_T)/*@>13808*/(uint16_T)-/*@<137f8*//*@>137f5*/tmp : (int32_T)/*@>1380b*/(uint16_T)/*@>137fd*/tmp);
 8001586:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	f00d fcdb 	bl	800ef4c <__aeabi_dcmplt>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00e      	beq.n	80015ba <FUNC_OutputData+0x1d2>
 800159c:	f8d7 80f0 	ldr.w	r8, [r7, #240]	; 0xf0
 80015a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015a4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80015a8:	4640      	mov	r0, r8
 80015aa:	4649      	mov	r1, r9
 80015ac:	f00d fcf6 	bl	800ef9c <__aeabi_d2uiz>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	425b      	negs	r3, r3
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	e005      	b.n	80015c6 <FUNC_OutputData+0x1de>
 80015ba:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80015be:	f00d fced 	bl	800ef9c <__aeabi_d2uiz>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	4a3c      	ldr	r2, [pc, #240]	; (80016b8 <FUNC_OutputData+0x2d0>)
 80015c8:	f8a2 3642 	strh.w	r3, [r2, #1602]	; 0x642
/* End of DataTypeConversion: '<S71>/Data Type Conversion10' */

/* DataStoreWrite: '<S64>/Data Store Write1' */
/*@>15bda*/VCU_DW./*@>174b5*/VAR_OUT_n_wheel_FR_kmproh/*@>6ef1*/ = /*@>1559f*/VCU_B./*@>1720c*/DataTypeConversion10_b;
 80015cc:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <FUNC_OutputData+0x2d0>)
 80015ce:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 80015d2:	4a3c      	ldr	r2, [pc, #240]	; (80016c4 <FUNC_OutputData+0x2dc>)
 80015d4:	f8a2 30a2 	strh.w	r3, [r2, #162]	; 0xa2
/* Gain: '<S63>/Gain2' */
/*@>155a5*/VCU_B./*@>1720f*/n_wheel_RL_kmh/*@>6ef9*/ = /*@>12e14*/3.6/*@>137c3*/ * /*@>155ab*/VCU_B./*@>17212*/Add1_ks;
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <FUNC_OutputData+0x2d0>)
 80015da:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	a332      	add	r3, pc, #200	; (adr r3, 80016b0 <FUNC_OutputData+0x2c8>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f00d fa3c 	bl	800ea68 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <FUNC_OutputData+0x2d0>)
 80015fa:	e9c3 01a8 	strd	r0, r1, [r3, #672]	; 0x2a0
/* Gain: '<S72>/Factor' */
/*@>155b1*/VCU_B./*@>17215*/Factor_j/*@>6f01*/ = /*@>12e15*/10.0/*@>137bf*/ * /*@>155b7*/VCU_B./*@>17218*/n_wheel_RL_kmh;
 80015fe:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001600:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <FUNC_OutputData+0x2d4>)
 800160e:	f00d fa2b 	bl	800ea68 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <FUNC_OutputData+0x2d0>)
 800161c:	e9c3 01aa 	strd	r0, r1, [r3, #680]	; 0x2a8
/* Sum: '<S72>/Add1' */
/*@>155bd*/VCU_B./*@>1721b*/Add1_a/*@>9923*/ = /*@>155c3*/VCU_B./*@>1721e*/Factor_j;
 8001620:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001622:	e9d3 23aa 	ldrd	r2, r3, [r3, #680]	; 0x2a8
 8001626:	4924      	ldr	r1, [pc, #144]	; (80016b8 <FUNC_OutputData+0x2d0>)
 8001628:	e9c1 23ac 	strd	r2, r3, [r1, #688]	; 0x2b0
/* DataTypeConversion: '<S72>/Data Type Conversion10' */
/*@>1377a*/tmp/*@>1377c*/ = /*@>14b29*/floor(/*@>155c9*/VCU_B./*@>17221*/Add1_a);
 800162c:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <FUNC_OutputData+0x2d0>)
 800162e:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f00c fe23 	bl	800e280 <floor>
 800163a:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>1379a*/if (/*@>14b2b*/rtIsNaN(/*@>1377e*/tmp)/*@>13788*/ || /*@>14b2d*/rtIsInf(/*@>13783*/tmp)) {
 800163e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001642:	f004 ff11 	bl	8006468 <rtIsNaN>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d106      	bne.n	800165a <FUNC_OutputData+0x272>
 800164c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001650:	f004 fee6 	bl	8006420 <rtIsInf>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d006      	beq.n	8001668 <FUNC_OutputData+0x280>
    /*@>1378b*/tmp/*@>1378d*/ = /*@>1378a*/0.0;
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001666:	e008      	b.n	800167a <FUNC_OutputData+0x292>
} else {
    /*@>13796*/tmp/*@>13798*/ = /*@>14b2f*/fmod(/*@>1378f*/tmp, /*@>13793*/65536.0);
 8001668:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <FUNC_OutputData+0x2d8>)
 8001672:	f00c fe8d 	bl	800e390 <fmod>
 8001676:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>155cf*/VCU_B./*@>17224*/DataTypeConversion10_be/*@>6f09*/ = /*@>13ac5*/(uint16_T)(/*@>137a1*/tmp/*@>137a4*/ < /*@>137a0*/0.0/*@>137a4*/ ? (int32_T)/*@>137ac*/(uint16_T)-/*@<137b5*//*@>137aa*/(int16_T)/*@>137b8*/(uint16_T)-/*@<137a8*//*@>137a5*/tmp : (int32_T)/*@>137bb*/(uint16_T)/*@>137ad*/tmp);
 800167a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	f00d fc61 	bl	800ef4c <__aeabi_dcmplt>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d01b      	beq.n	80016c8 <FUNC_OutputData+0x2e0>
 8001690:	f8d7 a0f0 	ldr.w	sl, [r7, #240]	; 0xf0
 8001694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001698:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800169c:	4650      	mov	r0, sl
 800169e:	4659      	mov	r1, fp
 80016a0:	f00d fc7c 	bl	800ef9c <__aeabi_d2uiz>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	425b      	negs	r3, r3
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	e012      	b.n	80016d4 <FUNC_OutputData+0x2ec>
 80016ae:	bf00      	nop
 80016b0:	cccccccd 	.word	0xcccccccd
 80016b4:	400ccccc 	.word	0x400ccccc
 80016b8:	200008c8 	.word	0x200008c8
 80016bc:	40240000 	.word	0x40240000
 80016c0:	40f00000 	.word	0x40f00000
 80016c4:	20001058 	.word	0x20001058
 80016c8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80016cc:	f00d fc66 	bl	800ef9c <__aeabi_d2uiz>
 80016d0:	4603      	mov	r3, r0
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4aa2      	ldr	r2, [pc, #648]	; (8001960 <FUNC_OutputData+0x578>)
 80016d6:	f8a2 3644 	strh.w	r3, [r2, #1604]	; 0x644
/* End of DataTypeConversion: '<S72>/Data Type Conversion10' */

/* DataStoreWrite: '<S64>/Data Store Write2' */
/*@>15be0*/VCU_DW./*@>174b8*/VAR_OUT_n_wheel_RL_kmproh/*@>6f0b*/ = /*@>155d5*/VCU_B./*@>17227*/DataTypeConversion10_be;
 80016da:	4ba1      	ldr	r3, [pc, #644]	; (8001960 <FUNC_OutputData+0x578>)
 80016dc:	f8b3 3644 	ldrh.w	r3, [r3, #1604]	; 0x644
 80016e0:	4aa0      	ldr	r2, [pc, #640]	; (8001964 <FUNC_OutputData+0x57c>)
 80016e2:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
/* Gain: '<S63>/Gain3' */
/*@>155db*/VCU_B./*@>1722a*/n_wheel_RR_kmh/*@>6f13*/ = /*@>12e16*/3.6/*@>13773*/ * /*@>155e1*/VCU_B./*@>1722d*/Add1_eq;
 80016e6:	4b9e      	ldr	r3, [pc, #632]	; (8001960 <FUNC_OutputData+0x578>)
 80016e8:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	a398      	add	r3, pc, #608	; (adr r3, 8001958 <FUNC_OutputData+0x570>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f00d f9b5 	bl	800ea68 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	4b96      	ldr	r3, [pc, #600]	; (8001960 <FUNC_OutputData+0x578>)
 8001708:	e9c3 01ae 	strd	r0, r1, [r3, #696]	; 0x2b8
/* Gain: '<S73>/Factor' */
/*@>155e7*/VCU_B./*@>17230*/Factor_h/*@>6f1b*/ = /*@>12e17*/10.0/*@>1376f*/ * /*@>155ed*/VCU_B./*@>17233*/n_wheel_RR_kmh;
 800170c:	4b94      	ldr	r3, [pc, #592]	; (8001960 <FUNC_OutputData+0x578>)
 800170e:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	4b93      	ldr	r3, [pc, #588]	; (8001968 <FUNC_OutputData+0x580>)
 800171c:	f00d f9a4 	bl	800ea68 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	4b8d      	ldr	r3, [pc, #564]	; (8001960 <FUNC_OutputData+0x578>)
 800172a:	e9c3 01b0 	strd	r0, r1, [r3, #704]	; 0x2c0
/* Sum: '<S73>/Add1' */
/*@>155f3*/VCU_B./*@>17236*/Add1_e/*@>9928*/ = /*@>155f9*/VCU_B./*@>17239*/Factor_h;
 800172e:	4b8c      	ldr	r3, [pc, #560]	; (8001960 <FUNC_OutputData+0x578>)
 8001730:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 8001734:	498a      	ldr	r1, [pc, #552]	; (8001960 <FUNC_OutputData+0x578>)
 8001736:	e9c1 23b2 	strd	r2, r3, [r1, #712]	; 0x2c8
/* DataTypeConversion: '<S73>/Data Type Conversion10' */
/*@>1372a*/tmp/*@>1372c*/ = /*@>14b31*/floor(/*@>155ff*/VCU_B./*@>1723c*/Add1_e);
 800173a:	4b89      	ldr	r3, [pc, #548]	; (8001960 <FUNC_OutputData+0x578>)
 800173c:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f00c fd9c 	bl	800e280 <floor>
 8001748:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>1374a*/if (/*@>14b33*/rtIsNaN(/*@>1372e*/tmp)/*@>13738*/ || /*@>14b35*/rtIsInf(/*@>13733*/tmp)) {
 800174c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001750:	f004 fe8a 	bl	8006468 <rtIsNaN>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d106      	bne.n	8001768 <FUNC_OutputData+0x380>
 800175a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800175e:	f004 fe5f 	bl	8006420 <rtIsInf>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <FUNC_OutputData+0x38e>
    /*@>1373b*/tmp/*@>1373d*/ = /*@>1373a*/0.0;
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001774:	e008      	b.n	8001788 <FUNC_OutputData+0x3a0>
} else {
    /*@>13746*/tmp/*@>13748*/ = /*@>14b37*/fmod(/*@>1373f*/tmp, /*@>13743*/65536.0);
 8001776:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b7b      	ldr	r3, [pc, #492]	; (800196c <FUNC_OutputData+0x584>)
 8001780:	f00c fe06 	bl	800e390 <fmod>
 8001784:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15605*/VCU_B./*@>1723f*/DataTypeConversion10_o/*@>6f23*/ = /*@>13adc*/(uint16_T)(/*@>13751*/tmp/*@>13754*/ < /*@>13750*/0.0/*@>13754*/ ? (int32_T)/*@>1375c*/(uint16_T)-/*@<13765*//*@>1375a*/(int16_T)/*@>13768*/(uint16_T)-/*@<13758*//*@>13755*/tmp : (int32_T)/*@>1376b*/(uint16_T)/*@>1375d*/tmp);
 8001788:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	f00d fbda 	bl	800ef4c <__aeabi_dcmplt>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d012      	beq.n	80017c4 <FUNC_OutputData+0x3dc>
 800179e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80017a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80017a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80017ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017b2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80017b6:	f00d fbf1 	bl	800ef9c <__aeabi_d2uiz>
 80017ba:	4603      	mov	r3, r0
 80017bc:	b29b      	uxth	r3, r3
 80017be:	425b      	negs	r3, r3
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	e005      	b.n	80017d0 <FUNC_OutputData+0x3e8>
 80017c4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80017c8:	f00d fbe8 	bl	800ef9c <__aeabi_d2uiz>
 80017cc:	4603      	mov	r3, r0
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4a63      	ldr	r2, [pc, #396]	; (8001960 <FUNC_OutputData+0x578>)
 80017d2:	f8a2 3646 	strh.w	r3, [r2, #1606]	; 0x646
/* End of DataTypeConversion: '<S73>/Data Type Conversion10' */

/* DataStoreWrite: '<S64>/Data Store Write3' */
/*@>15be6*/VCU_DW./*@>174bb*/VAR_OUT_n_wheel_RR_kmproh/*@>6f25*/ = /*@>1560b*/VCU_B./*@>17242*/DataTypeConversion10_o;
 80017d6:	4b62      	ldr	r3, [pc, #392]	; (8001960 <FUNC_OutputData+0x578>)
 80017d8:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 80017dc:	4a61      	ldr	r2, [pc, #388]	; (8001964 <FUNC_OutputData+0x57c>)
 80017de:	f8a2 30a6 	strh.w	r3, [r2, #166]	; 0xa6
/* Sum: '<S80>/Add1' */
/*@>15611*/VCU_B./*@>17245*/Add1_j/*@>992d*/ = /*@>15617*/VCU_B./*@>17248*/Sensitivity1538mVbar;
 80017e2:	4b5f      	ldr	r3, [pc, #380]	; (8001960 <FUNC_OutputData+0x578>)
 80017e4:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	495c      	ldr	r1, [pc, #368]	; (8001960 <FUNC_OutputData+0x578>)
 80017ee:	e9c1 23b4 	strd	r2, r3, [r1, #720]	; 0x2d0
/* DataTypeConversion: '<S80>/Data Type Conversion10' */
/*@>136e2*/tmp/*@>136e4*/ = /*@>14b39*/floor(/*@>1561d*/VCU_B./*@>1724b*/Add1_j);
 80017f2:	4b5b      	ldr	r3, [pc, #364]	; (8001960 <FUNC_OutputData+0x578>)
 80017f4:	e9d3 23b4 	ldrd	r2, r3, [r3, #720]	; 0x2d0
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f00c fd40 	bl	800e280 <floor>
 8001800:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13702*/if (/*@>14b3b*/rtIsNaN(/*@>136e6*/tmp)/*@>136f0*/ || /*@>14b3d*/rtIsInf(/*@>136eb*/tmp)) {
 8001804:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001808:	f004 fe2e 	bl	8006468 <rtIsNaN>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d106      	bne.n	8001820 <FUNC_OutputData+0x438>
 8001812:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001816:	f004 fe03 	bl	8006420 <rtIsInf>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d006      	beq.n	800182e <FUNC_OutputData+0x446>
    /*@>136f3*/tmp/*@>136f5*/ = /*@>136f2*/0.0;
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800182c:	e008      	b.n	8001840 <FUNC_OutputData+0x458>
} else {
    /*@>136fe*/tmp/*@>13700*/ = /*@>14b3f*/fmod(/*@>136f7*/tmp, /*@>136fb*/256.0);
 800182e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <FUNC_OutputData+0x588>)
 8001838:	f00c fdaa 	bl	800e390 <fmod>
 800183c:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15623*/VCU_B./*@>1724e*/DataTypeConversion10_ho/*@>6f2d*/ = /*@>13aef*/(uint8_T)(/*@>13709*/tmp/*@>1370c*/ < /*@>13708*/0.0/*@>1370c*/ ? (int32_T)/*@>13714*/(uint8_T)-/*@<1371d*//*@>13712*/(int8_T)/*@>13720*/(uint8_T)-/*@<13710*//*@>1370d*/tmp : (int32_T)/*@>13723*/(uint8_T)/*@>13715*/tmp);
 8001840:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	f00d fb7e 	bl	800ef4c <__aeabi_dcmplt>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d012      	beq.n	800187c <FUNC_OutputData+0x494>
 8001856:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800185a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800185e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001862:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800186a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800186e:	f00d fb95 	bl	800ef9c <__aeabi_d2uiz>
 8001872:	4603      	mov	r3, r0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	425b      	negs	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	e005      	b.n	8001888 <FUNC_OutputData+0x4a0>
 800187c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001880:	f00d fb8c 	bl	800ef9c <__aeabi_d2uiz>
 8001884:	4603      	mov	r3, r0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	4a35      	ldr	r2, [pc, #212]	; (8001960 <FUNC_OutputData+0x578>)
 800188a:	f882 368e 	strb.w	r3, [r2, #1678]	; 0x68e
/* End of DataTypeConversion: '<S80>/Data Type Conversion10' */

/* DataStoreWrite: '<S66>/Data Store Write' */
/*@>15bec*/VCU_DW./*@>174be*/VAR_OUT_p_brake_R/*@>6f2f*/ = /*@>15629*/VCU_B./*@>17251*/DataTypeConversion10_ho;
 800188e:	4b34      	ldr	r3, [pc, #208]	; (8001960 <FUNC_OutputData+0x578>)
 8001890:	f893 368e 	ldrb.w	r3, [r3, #1678]	; 0x68e
 8001894:	4a33      	ldr	r2, [pc, #204]	; (8001964 <FUNC_OutputData+0x57c>)
 8001896:	f882 30fe 	strb.w	r3, [r2, #254]	; 0xfe
/* Gain: '<S81>/Factor' */
/*@>1562f*/VCU_B./*@>17254*/Factor_d/*@>6f37*/ = /*@>12e18*/100.0/*@>136db*/ * /*@>15635*/VCU_B./*@>17257*/Add1_f;
 800189a:	4b31      	ldr	r3, [pc, #196]	; (8001960 <FUNC_OutputData+0x578>)
 800189c:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	4b31      	ldr	r3, [pc, #196]	; (8001974 <FUNC_OutputData+0x58c>)
 80018ae:	f00d f8db 	bl	800ea68 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	4b29      	ldr	r3, [pc, #164]	; (8001960 <FUNC_OutputData+0x578>)
 80018bc:	e9c3 01b6 	strd	r0, r1, [r3, #728]	; 0x2d8
/* Sum: '<S81>/Add1' */
/*@>1563b*/VCU_B./*@>1725a*/Add1_l/*@>9932*/ = /*@>15641*/VCU_B./*@>1725d*/Factor_d;
 80018c0:	4b27      	ldr	r3, [pc, #156]	; (8001960 <FUNC_OutputData+0x578>)
 80018c2:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 80018c6:	4926      	ldr	r1, [pc, #152]	; (8001960 <FUNC_OutputData+0x578>)
 80018c8:	e9c1 23b8 	strd	r2, r3, [r1, #736]	; 0x2e0
/* DataTypeConversion: '<S81>/Data Type Conversion10' */
/*@>13696*/tmp/*@>13698*/ = /*@>14b41*/floor(/*@>15647*/VCU_B./*@>17260*/Add1_l);
 80018cc:	4b24      	ldr	r3, [pc, #144]	; (8001960 <FUNC_OutputData+0x578>)
 80018ce:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	; 0x2e0
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f00c fcd3 	bl	800e280 <floor>
 80018da:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>136b6*/if (/*@>14b43*/rtIsNaN(/*@>1369a*/tmp)/*@>136a4*/ || /*@>14b45*/rtIsInf(/*@>1369f*/tmp)) {
 80018de:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80018e2:	f004 fdc1 	bl	8006468 <rtIsNaN>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d106      	bne.n	80018fa <FUNC_OutputData+0x512>
 80018ec:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80018f0:	f004 fd96 	bl	8006420 <rtIsInf>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <FUNC_OutputData+0x520>
    /*@>136a7*/tmp/*@>136a9*/ = /*@>136a6*/0.0;
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001906:	e008      	b.n	800191a <FUNC_OutputData+0x532>
} else {
    /*@>136b2*/tmp/*@>136b4*/ = /*@>14b47*/fmod(/*@>136ab*/tmp, /*@>136af*/256.0);
 8001908:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <FUNC_OutputData+0x588>)
 8001912:	f00c fd3d 	bl	800e390 <fmod>
 8001916:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>1564d*/VCU_B./*@>17263*/DataTypeConversion10_fx/*@>6f3f*/ = /*@>13b04*/(uint8_T)(/*@>136bd*/tmp/*@>136c0*/ < /*@>136bc*/0.0/*@>136c0*/ ? (int32_T)/*@>136c8*/(uint8_T)-/*@<136d1*//*@>136c6*/(int8_T)/*@>136d4*/(uint8_T)-/*@<136c4*//*@>136c1*/tmp : (int32_T)/*@>136d7*/(uint8_T)/*@>136c9*/tmp);
 800191a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	f00d fb11 	bl	800ef4c <__aeabi_dcmplt>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d023      	beq.n	8001978 <FUNC_OutputData+0x590>
 8001930:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001934:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800193c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001940:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001944:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001948:	f00d fb28 	bl	800ef9c <__aeabi_d2uiz>
 800194c:	4603      	mov	r3, r0
 800194e:	b2db      	uxtb	r3, r3
 8001950:	425b      	negs	r3, r3
 8001952:	b2db      	uxtb	r3, r3
 8001954:	e016      	b.n	8001984 <FUNC_OutputData+0x59c>
 8001956:	bf00      	nop
 8001958:	cccccccd 	.word	0xcccccccd
 800195c:	400ccccc 	.word	0x400ccccc
 8001960:	200008c8 	.word	0x200008c8
 8001964:	20001058 	.word	0x20001058
 8001968:	40240000 	.word	0x40240000
 800196c:	40f00000 	.word	0x40f00000
 8001970:	40700000 	.word	0x40700000
 8001974:	40590000 	.word	0x40590000
 8001978:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800197c:	f00d fb0e 	bl	800ef9c <__aeabi_d2uiz>
 8001980:	4603      	mov	r3, r0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	4aa8      	ldr	r2, [pc, #672]	; (8001c28 <FUNC_OutputData+0x840>)
 8001986:	f882 368f 	strb.w	r3, [r2, #1679]	; 0x68f
/* End of DataTypeConversion: '<S81>/Data Type Conversion10' */

/* DataStoreWrite: '<S66>/Data Store Write1' */
/*@>15bf2*/VCU_DW./*@>174c1*/VAR_OUT_STW_mue_tyre/*@>6f41*/ = /*@>15653*/VCU_B./*@>17266*/DataTypeConversion10_fx;
 800198a:	4ba7      	ldr	r3, [pc, #668]	; (8001c28 <FUNC_OutputData+0x840>)
 800198c:	f893 368f 	ldrb.w	r3, [r3, #1679]	; 0x68f
 8001990:	4aa6      	ldr	r2, [pc, #664]	; (8001c2c <FUNC_OutputData+0x844>)
 8001992:	f882 30ff 	strb.w	r3, [r2, #255]	; 0xff
/* Gain: '<S82>/Factor' */
/*@>15659*/VCU_B./*@>17269*/Factor_b/*@>6f49*/ = /*@>12e19*/10.0/*@>1368f*/ * /*@>1565f*/VCU_B./*@>1726c*/x_clutch_LC;
 8001996:	4ba4      	ldr	r3, [pc, #656]	; (8001c28 <FUNC_OutputData+0x840>)
 8001998:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	4ba2      	ldr	r3, [pc, #648]	; (8001c30 <FUNC_OutputData+0x848>)
 80019a6:	f00d f85f 	bl	800ea68 <__aeabi_dmul>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	4b9d      	ldr	r3, [pc, #628]	; (8001c28 <FUNC_OutputData+0x840>)
 80019b4:	e9c3 01ba 	strd	r0, r1, [r3, #744]	; 0x2e8
/* Sum: '<S82>/Add1' */
/*@>15665*/VCU_B./*@>1726f*/Add1_ll/*@>9937*/ = /*@>1566b*/VCU_B./*@>17272*/Factor_b;
 80019b8:	4b9b      	ldr	r3, [pc, #620]	; (8001c28 <FUNC_OutputData+0x840>)
 80019ba:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	; 0x2e8
 80019be:	499a      	ldr	r1, [pc, #616]	; (8001c28 <FUNC_OutputData+0x840>)
 80019c0:	e9c1 23bc 	strd	r2, r3, [r1, #752]	; 0x2f0
/* DataTypeConversion: '<S82>/Data Type Conversion10' */
/*@>1364a*/tmp/*@>1364c*/ = /*@>14b49*/floor(/*@>15671*/VCU_B./*@>17275*/Add1_ll);
 80019c4:	4b98      	ldr	r3, [pc, #608]	; (8001c28 <FUNC_OutputData+0x840>)
 80019c6:	e9d3 23bc 	ldrd	r2, r3, [r3, #752]	; 0x2f0
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f00c fc57 	bl	800e280 <floor>
 80019d2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>1366a*/if (/*@>14b4b*/rtIsNaN(/*@>1364e*/tmp)/*@>13658*/ || /*@>14b4d*/rtIsInf(/*@>13653*/tmp)) {
 80019d6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80019da:	f004 fd45 	bl	8006468 <rtIsNaN>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d106      	bne.n	80019f2 <FUNC_OutputData+0x60a>
 80019e4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80019e8:	f004 fd1a 	bl	8006420 <rtIsInf>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <FUNC_OutputData+0x618>
    /*@>1365b*/tmp/*@>1365d*/ = /*@>1365a*/0.0;
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80019fe:	e008      	b.n	8001a12 <FUNC_OutputData+0x62a>
} else {
    /*@>13666*/tmp/*@>13668*/ = /*@>14b4f*/fmod(/*@>1365f*/tmp, /*@>13663*/256.0);
 8001a00:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	4b8a      	ldr	r3, [pc, #552]	; (8001c34 <FUNC_OutputData+0x84c>)
 8001a0a:	f00c fcc1 	bl	800e390 <fmod>
 8001a0e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15677*/VCU_B./*@>17278*/DataTypeConversion10_ae/*@>6f51*/ = /*@>13b19*/(uint8_T)(/*@>13671*/tmp/*@>13674*/ < /*@>13670*/0.0/*@>13674*/ ? (int32_T)/*@>1367c*/(uint8_T)-/*@<13685*//*@>1367a*/(int8_T)/*@>13688*/(uint8_T)-/*@<13678*//*@>13675*/tmp : (int32_T)/*@>1368b*/(uint8_T)/*@>1367d*/tmp);
 8001a12:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	f00d fa95 	bl	800ef4c <__aeabi_dcmplt>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d012      	beq.n	8001a4e <FUNC_OutputData+0x666>
 8001a28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a3c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001a40:	f00d faac 	bl	800ef9c <__aeabi_d2uiz>
 8001a44:	4603      	mov	r3, r0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	425b      	negs	r3, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	e005      	b.n	8001a5a <FUNC_OutputData+0x672>
 8001a4e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001a52:	f00d faa3 	bl	800ef9c <__aeabi_d2uiz>
 8001a56:	4603      	mov	r3, r0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4a73      	ldr	r2, [pc, #460]	; (8001c28 <FUNC_OutputData+0x840>)
 8001a5c:	f882 3690 	strb.w	r3, [r2, #1680]	; 0x690
/* End of DataTypeConversion: '<S82>/Data Type Conversion10' */

/* DataStoreWrite: '<S66>/Data Store Write2' */
/*@>15bf8*/VCU_DW./*@>174c4*/VAR_OUT_x_clutch_LC/*@>6f53*/ = /*@>1567d*/VCU_B./*@>1727b*/DataTypeConversion10_ae;
 8001a60:	4b71      	ldr	r3, [pc, #452]	; (8001c28 <FUNC_OutputData+0x840>)
 8001a62:	f893 3690 	ldrb.w	r3, [r3, #1680]	; 0x690
 8001a66:	4a71      	ldr	r2, [pc, #452]	; (8001c2c <FUNC_OutputData+0x844>)
 8001a68:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
/* Gain: '<S83>/Factor' */
/*@>15683*/VCU_B./*@>1727e*/Factor_ii/*@>6f5b*/ = /*@>13b20*/(uint8_T)(/*@>15689*/VCU_B./*@>17281*/LC_dash_bit/*@>13643*/ << /*@>13642*/7);
 8001a6c:	4b6e      	ldr	r3, [pc, #440]	; (8001c28 <FUNC_OutputData+0x840>)
 8001a6e:	f893 3783 	ldrb.w	r3, [r3, #1923]	; 0x783
 8001a72:	01db      	lsls	r3, r3, #7
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4a6c      	ldr	r2, [pc, #432]	; (8001c28 <FUNC_OutputData+0x840>)
 8001a78:	f882 36c5 	strb.w	r3, [r2, #1733]	; 0x6c5
/* Sum: '<S83>/Add1' */
/*@>1568f*/VCU_B./*@>17284*/Add1_b/*@>993e*/ = /*@>13b23*/(real_T)/*@>15695*/VCU_B./*@>17287*/Factor_ii/*@>13634*/ * /*@>13633*/0.0078125;
 8001a7c:	4b6a      	ldr	r3, [pc, #424]	; (8001c28 <FUNC_OutputData+0x840>)
 8001a7e:	f893 36c5 	ldrb.w	r3, [r3, #1733]	; 0x6c5
 8001a82:	4618      	mov	r0, r3
 8001a84:	f00c ff7a 	bl	800e97c <__aeabi_ui2d>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a98:	f00c ffe6 	bl	800ea68 <__aeabi_dmul>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4b60      	ldr	r3, [pc, #384]	; (8001c28 <FUNC_OutputData+0x840>)
 8001aa6:	e9c3 01be 	strd	r0, r1, [r3, #760]	; 0x2f8
/* DataTypeConversion: '<S83>/Data Type Conversion10' */
/*@>135ed*/tmp/*@>135ef*/ = /*@>14b51*/floor(/*@>1569b*/VCU_B./*@>1728a*/Add1_b);
 8001aaa:	4b5f      	ldr	r3, [pc, #380]	; (8001c28 <FUNC_OutputData+0x840>)
 8001aac:	e9d3 23be 	ldrd	r2, r3, [r3, #760]	; 0x2f8
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f00c fbe4 	bl	800e280 <floor>
 8001ab8:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>1360d*/if (/*@>14b53*/rtIsNaN(/*@>135f1*/tmp)/*@>135fb*/ || /*@>14b55*/rtIsInf(/*@>135f6*/tmp)) {
 8001abc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001ac0:	f004 fcd2 	bl	8006468 <rtIsNaN>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <FUNC_OutputData+0x6f0>
 8001aca:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001ace:	f004 fca7 	bl	8006420 <rtIsInf>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <FUNC_OutputData+0x6fe>
    /*@>135fe*/tmp/*@>13600*/ = /*@>135fd*/0.0;
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001ae4:	e008      	b.n	8001af8 <FUNC_OutputData+0x710>
} else {
    /*@>13609*/tmp/*@>1360b*/ = /*@>14b57*/fmod(/*@>13602*/tmp, /*@>13606*/256.0);
 8001ae6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	4b51      	ldr	r3, [pc, #324]	; (8001c34 <FUNC_OutputData+0x84c>)
 8001af0:	f00c fc4e 	bl	800e390 <fmod>
 8001af4:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>156a1*/VCU_B./*@>1728d*/DataTypeConversion10_c/*@>6f63*/ = /*@>13b32*/(uint8_T)(/*@>13614*/tmp/*@>13617*/ < /*@>13613*/0.0/*@>13617*/ ? (int32_T)/*@>1361f*/(uint8_T)-/*@<13628*//*@>1361d*/(int8_T)/*@>1362b*/(uint8_T)-/*@<1361b*//*@>13618*/tmp : (int32_T)/*@>1362e*/(uint8_T)/*@>13620*/tmp);
 8001af8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	f00d fa22 	bl	800ef4c <__aeabi_dcmplt>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d012      	beq.n	8001b34 <FUNC_OutputData+0x74c>
 8001b0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001b12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b1a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001b26:	f00d fa39 	bl	800ef9c <__aeabi_d2uiz>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	425b      	negs	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	e005      	b.n	8001b40 <FUNC_OutputData+0x758>
 8001b34:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001b38:	f00d fa30 	bl	800ef9c <__aeabi_d2uiz>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	4a39      	ldr	r2, [pc, #228]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b42:	f882 3691 	strb.w	r3, [r2, #1681]	; 0x691
/* End of DataTypeConversion: '<S83>/Data Type Conversion10' */

/* DataStoreWrite: '<S66>/Data Store Write3' */
/*@>15bfe*/VCU_DW./*@>174c7*/VAR_OUT_LC_dash_Bit/*@>6f65*/ = /*@>156a7*/VCU_B./*@>17290*/DataTypeConversion10_c;
 8001b46:	4b38      	ldr	r3, [pc, #224]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b48:	f893 3691 	ldrb.w	r3, [r3, #1681]	; 0x691
 8001b4c:	4a37      	ldr	r2, [pc, #220]	; (8001c2c <FUNC_OutputData+0x844>)
 8001b4e:	f882 3101 	strb.w	r3, [r2, #257]	; 0x101
/* RelationalOperator: '<S108>/Compare' */
/*@>156ad*/VCU_B./*@>17293*/Compare_k5/*@>6f69*/ = /*@>156b3*/VCU_B./*@>17296*/LC_active_bit;
 8001b52:	4b35      	ldr	r3, [pc, #212]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b54:	f893 36ce 	ldrb.w	r3, [r3, #1742]	; 0x6ce
 8001b58:	4a33      	ldr	r2, [pc, #204]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b5a:	f882 377c 	strb.w	r3, [r2, #1916]	; 0x77c
/* Gain: '<S84>/Factor' */
/*@>156b9*/VCU_B./*@>17299*/Factor_c0/*@>6f71*/ = /*@>13b3b*/(uint8_T)(/*@>156bf*/VCU_B./*@>1729c*/Compare_k5/*@>135e6*/ << /*@>135e5*/7);
 8001b5e:	4b32      	ldr	r3, [pc, #200]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b60:	f893 377c 	ldrb.w	r3, [r3, #1916]	; 0x77c
 8001b64:	01db      	lsls	r3, r3, #7
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	4a2f      	ldr	r2, [pc, #188]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b6a:	f882 36c6 	strb.w	r3, [r2, #1734]	; 0x6c6
/* Sum: '<S84>/Add1' */
/*@>156c5*/VCU_B./*@>1729f*/Add1_n/*@>9945*/ = /*@>13b3e*/(real_T)/*@>156cb*/VCU_B./*@>172a2*/Factor_c0/*@>135d7*/ * /*@>135d6*/0.0078125;
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b70:	f893 36c6 	ldrb.w	r3, [r3, #1734]	; 0x6c6
 8001b74:	4618      	mov	r0, r3
 8001b76:	f00c ff01 	bl	800e97c <__aeabi_ui2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b8a:	f00c ff6d 	bl	800ea68 <__aeabi_dmul>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b98:	e9c3 01c0 	strd	r0, r1, [r3, #768]	; 0x300
/* DataTypeConversion: '<S84>/Data Type Conversion10' */
/*@>13590*/tmp/*@>13592*/ = /*@>14b59*/floor(/*@>156d1*/VCU_B./*@>172a5*/Add1_n);
 8001b9c:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <FUNC_OutputData+0x840>)
 8001b9e:	e9d3 23c0 	ldrd	r2, r3, [r3, #768]	; 0x300
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f00c fb6b 	bl	800e280 <floor>
 8001baa:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>135b0*/if (/*@>14b5b*/rtIsNaN(/*@>13594*/tmp)/*@>1359e*/ || /*@>14b5d*/rtIsInf(/*@>13599*/tmp)) {
 8001bae:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001bb2:	f004 fc59 	bl	8006468 <rtIsNaN>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d106      	bne.n	8001bca <FUNC_OutputData+0x7e2>
 8001bbc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001bc0:	f004 fc2e 	bl	8006420 <rtIsInf>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d006      	beq.n	8001bd8 <FUNC_OutputData+0x7f0>
    /*@>135a1*/tmp/*@>135a3*/ = /*@>135a0*/0.0;
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001bd6:	e008      	b.n	8001bea <FUNC_OutputData+0x802>
} else {
    /*@>135ac*/tmp/*@>135ae*/ = /*@>14b5f*/fmod(/*@>135a5*/tmp, /*@>135a9*/256.0);
 8001bd8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <FUNC_OutputData+0x84c>)
 8001be2:	f00c fbd5 	bl	800e390 <fmod>
 8001be6:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>156d7*/VCU_B./*@>172a8*/DataTypeConversion10_ou/*@>6f79*/ = /*@>13b4d*/(uint8_T)(/*@>135b7*/tmp/*@>135ba*/ < /*@>135b6*/0.0/*@>135ba*/ ? (int32_T)/*@>135c2*/(uint8_T)-/*@<135cb*//*@>135c0*/(int8_T)/*@>135ce*/(uint8_T)-/*@<135be*//*@>135bb*/tmp : (int32_T)/*@>135d1*/(uint8_T)/*@>135c3*/tmp);
 8001bea:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	f00d f9a9 	bl	800ef4c <__aeabi_dcmplt>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d01b      	beq.n	8001c38 <FUNC_OutputData+0x850>
 8001c00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001c04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c14:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001c18:	f00d f9c0 	bl	800ef9c <__aeabi_d2uiz>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	425b      	negs	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	e00e      	b.n	8001c44 <FUNC_OutputData+0x85c>
 8001c26:	bf00      	nop
 8001c28:	200008c8 	.word	0x200008c8
 8001c2c:	20001058 	.word	0x20001058
 8001c30:	40240000 	.word	0x40240000
 8001c34:	40700000 	.word	0x40700000
 8001c38:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001c3c:	f00d f9ae 	bl	800ef9c <__aeabi_d2uiz>
 8001c40:	4603      	mov	r3, r0
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	4a9a      	ldr	r2, [pc, #616]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001c46:	f882 3692 	strb.w	r3, [r2, #1682]	; 0x692
/* End of DataTypeConversion: '<S84>/Data Type Conversion10' */

/* DataStoreWrite: '<S66>/Data Store Write4' */
/*@>15c04*/VCU_DW./*@>174ca*/VAR_OUT_LC_active_bit/*@>6f7b*/ = /*@>156dd*/VCU_B./*@>172ab*/DataTypeConversion10_ou;
 8001c4a:	4b99      	ldr	r3, [pc, #612]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001c4c:	f893 3692 	ldrb.w	r3, [r3, #1682]	; 0x692
 8001c50:	4a98      	ldr	r2, [pc, #608]	; (8001eb4 <FUNC_OutputData+0xacc>)
 8001c52:	f882 3102 	strb.w	r3, [r2, #258]	; 0x102
/* Gain: '<S85>/Factor' */
/*@>156e3*/VCU_B./*@>172ae*/Factor_b4/*@>6f83*/ = /*@>13b54*/(uint8_T)(/*@>156e9*/VCU_B./*@>172b1*/LC_ready_bit/*@>13589*/ << /*@>13588*/7);
 8001c56:	4b96      	ldr	r3, [pc, #600]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001c58:	f893 36cf 	ldrb.w	r3, [r3, #1743]	; 0x6cf
 8001c5c:	01db      	lsls	r3, r3, #7
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4a93      	ldr	r2, [pc, #588]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001c62:	f882 36c7 	strb.w	r3, [r2, #1735]	; 0x6c7
/* Sum: '<S85>/Add1' */
/*@>156ef*/VCU_B./*@>172b4*/Add1_jg/*@>994c*/ = /*@>13b57*/(real_T)/*@>156f5*/VCU_B./*@>172b7*/Factor_b4/*@>1357a*/ * /*@>13579*/0.0078125;
 8001c66:	4b92      	ldr	r3, [pc, #584]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001c68:	f893 36c7 	ldrb.w	r3, [r3, #1735]	; 0x6c7
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f00c fe85 	bl	800e97c <__aeabi_ui2d>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001c82:	f00c fef1 	bl	800ea68 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4b88      	ldr	r3, [pc, #544]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001c90:	e9c3 01c2 	strd	r0, r1, [r3, #776]	; 0x308
/* DataTypeConversion: '<S85>/Data Type Conversion10' */
/*@>13533*/tmp/*@>13535*/ = /*@>14b61*/floor(/*@>156fb*/VCU_B./*@>172ba*/Add1_jg);
 8001c94:	4b86      	ldr	r3, [pc, #536]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001c96:	e9d3 23c2 	ldrd	r2, r3, [r3, #776]	; 0x308
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f00c faef 	bl	800e280 <floor>
 8001ca2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13553*/if (/*@>14b63*/rtIsNaN(/*@>13537*/tmp)/*@>13541*/ || /*@>14b65*/rtIsInf(/*@>1353c*/tmp)) {
 8001ca6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001caa:	f004 fbdd 	bl	8006468 <rtIsNaN>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d106      	bne.n	8001cc2 <FUNC_OutputData+0x8da>
 8001cb4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001cb8:	f004 fbb2 	bl	8006420 <rtIsInf>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <FUNC_OutputData+0x8e8>
    /*@>13544*/tmp/*@>13546*/ = /*@>13543*/0.0;
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001cce:	e008      	b.n	8001ce2 <FUNC_OutputData+0x8fa>
} else {
    /*@>1354f*/tmp/*@>13551*/ = /*@>14b67*/fmod(/*@>13548*/tmp, /*@>1354c*/256.0);
 8001cd0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	4b77      	ldr	r3, [pc, #476]	; (8001eb8 <FUNC_OutputData+0xad0>)
 8001cda:	f00c fb59 	bl	800e390 <fmod>
 8001cde:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15701*/VCU_B./*@>172bd*/DataTypeConversion10_p/*@>6f8b*/ = /*@>13b66*/(uint8_T)(/*@>1355a*/tmp/*@>1355d*/ < /*@>13559*/0.0/*@>1355d*/ ? (int32_T)/*@>13565*/(uint8_T)-/*@<1356e*//*@>13563*/(int8_T)/*@>13571*/(uint8_T)-/*@<13561*//*@>1355e*/tmp : (int32_T)/*@>13574*/(uint8_T)/*@>13566*/tmp);
 8001ce2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	f00d f92d 	bl	800ef4c <__aeabi_dcmplt>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d012      	beq.n	8001d1e <FUNC_OutputData+0x936>
 8001cf8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001d0c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001d10:	f00d f944 	bl	800ef9c <__aeabi_d2uiz>
 8001d14:	4603      	mov	r3, r0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	425b      	negs	r3, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	e005      	b.n	8001d2a <FUNC_OutputData+0x942>
 8001d1e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d22:	f00d f93b 	bl	800ef9c <__aeabi_d2uiz>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	4a61      	ldr	r2, [pc, #388]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001d2c:	f882 3693 	strb.w	r3, [r2, #1683]	; 0x693
/* End of DataTypeConversion: '<S85>/Data Type Conversion10' */

/* DataStoreWrite: '<S66>/Data Store Write5' */
/*@>15c0a*/VCU_DW./*@>174cd*/VAR_OUT_LC_ready_bit/*@>6f8d*/ = /*@>15707*/VCU_B./*@>172c0*/DataTypeConversion10_p;
 8001d30:	4b5f      	ldr	r3, [pc, #380]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001d32:	f893 3693 	ldrb.w	r3, [r3, #1683]	; 0x693
 8001d36:	4a5f      	ldr	r2, [pc, #380]	; (8001eb4 <FUNC_OutputData+0xacc>)
 8001d38:	f882 3103 	strb.w	r3, [r2, #259]	; 0x103
/* Sum: '<S86>/Add1' */
/*@>1570d*/VCU_B./*@>172c3*/Add1_bq/*@>9951*/ = /*@>15713*/VCU_B./*@>172c6*/LC_Mdes;
 8001d3c:	4b5c      	ldr	r3, [pc, #368]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001d3e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001d42:	495b      	ldr	r1, [pc, #364]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001d44:	e9c1 23c4 	strd	r2, r3, [r1, #784]	; 0x310
/* DataTypeConversion: '<S86>/Data Type Conversion10' */
/*@>134eb*/tmp/*@>134ed*/ = /*@>14b69*/floor(/*@>15719*/VCU_B./*@>172c9*/Add1_bq);
 8001d48:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001d4a:	e9d3 23c4 	ldrd	r2, r3, [r3, #784]	; 0x310
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	f00c fa95 	bl	800e280 <floor>
 8001d56:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>1350b*/if (/*@>14b6b*/rtIsNaN(/*@>134ef*/tmp)/*@>134f9*/ || /*@>14b6d*/rtIsInf(/*@>134f4*/tmp)) {
 8001d5a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d5e:	f004 fb83 	bl	8006468 <rtIsNaN>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d106      	bne.n	8001d76 <FUNC_OutputData+0x98e>
 8001d68:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d6c:	f004 fb58 	bl	8006420 <rtIsInf>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d006      	beq.n	8001d84 <FUNC_OutputData+0x99c>
    /*@>134fc*/tmp/*@>134fe*/ = /*@>134fb*/0.0;
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001d82:	e008      	b.n	8001d96 <FUNC_OutputData+0x9ae>
} else {
    /*@>13507*/tmp/*@>13509*/ = /*@>14b6f*/fmod(/*@>13500*/tmp, /*@>13504*/256.0);
 8001d84:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	4b4a      	ldr	r3, [pc, #296]	; (8001eb8 <FUNC_OutputData+0xad0>)
 8001d8e:	f00c faff 	bl	800e390 <fmod>
 8001d92:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>1571f*/VCU_B./*@>172cc*/DataTypeConversion10_ci/*@>6f95*/ = /*@>13b79*/(uint8_T)(/*@>13512*/tmp/*@>13515*/ < /*@>13511*/0.0/*@>13515*/ ? (int32_T)/*@>1351d*/(uint8_T)-/*@<13526*//*@>1351b*/(int8_T)/*@>13529*/(uint8_T)-/*@<13519*//*@>13516*/tmp : (int32_T)/*@>1352c*/(uint8_T)/*@>1351e*/tmp);
 8001d96:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	f00d f8d3 	bl	800ef4c <__aeabi_dcmplt>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d012      	beq.n	8001dd2 <FUNC_OutputData+0x9ea>
 8001dac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001dc0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001dc4:	f00d f8ea 	bl	800ef9c <__aeabi_d2uiz>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	425b      	negs	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	e005      	b.n	8001dde <FUNC_OutputData+0x9f6>
 8001dd2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001dd6:	f00d f8e1 	bl	800ef9c <__aeabi_d2uiz>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4a34      	ldr	r2, [pc, #208]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001de0:	f882 3694 	strb.w	r3, [r2, #1684]	; 0x694
/* End of DataTypeConversion: '<S86>/Data Type Conversion10' */

/* DataStoreWrite: '<S66>/Data Store Write6' */
/*@>15c10*/VCU_DW./*@>174d0*/VAR_OUT_LC_Mdes/*@>6f97*/ = /*@>15725*/VCU_B./*@>172cf*/DataTypeConversion10_ci;
 8001de4:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001de6:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8001dea:	4a32      	ldr	r2, [pc, #200]	; (8001eb4 <FUNC_OutputData+0xacc>)
 8001dec:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
/* Gain: '<S87>/Factor' */
/*@>1572b*/VCU_B./*@>172d2*/Factor_n/*@>6f9f*/ = /*@>12e1a*/0.1/*@>134e4*/ * /*@>15731*/VCU_B./*@>172d5*/LC_Fnr;
 8001df0:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001df2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	a32b      	add	r3, pc, #172	; (adr r3, 8001ea8 <FUNC_OutputData+0xac0>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f00c fe32 	bl	800ea68 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001e0e:	e9c3 01c6 	strd	r0, r1, [r3, #792]	; 0x318
/* Sum: '<S87>/Add1' */
/*@>15737*/VCU_B./*@>172d8*/Add1_io/*@>9956*/ = /*@>1573d*/VCU_B./*@>172db*/Factor_n;
 8001e12:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001e14:	e9d3 23c6 	ldrd	r2, r3, [r3, #792]	; 0x318
 8001e18:	4925      	ldr	r1, [pc, #148]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001e1a:	e9c1 23c8 	strd	r2, r3, [r1, #800]	; 0x320
/* DataTypeConversion: '<S87>/Data Type Conversion10' */
/*@>1349f*/tmp/*@>134a1*/ = /*@>14b71*/floor(/*@>15743*/VCU_B./*@>172de*/Add1_io);
 8001e1e:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <FUNC_OutputData+0xac8>)
 8001e20:	e9d3 23c8 	ldrd	r2, r3, [r3, #800]	; 0x320
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f00c fa2a 	bl	800e280 <floor>
 8001e2c:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>134bf*/if (/*@>14b73*/rtIsNaN(/*@>134a3*/tmp)/*@>134ad*/ || /*@>14b75*/rtIsInf(/*@>134a8*/tmp)) {
 8001e30:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e34:	f004 fb18 	bl	8006468 <rtIsNaN>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <FUNC_OutputData+0xa64>
 8001e3e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e42:	f004 faed 	bl	8006420 <rtIsInf>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <FUNC_OutputData+0xa72>
    /*@>134b0*/tmp/*@>134b2*/ = /*@>134af*/0.0;
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001e58:	e008      	b.n	8001e6c <FUNC_OutputData+0xa84>
} else {
    /*@>134bb*/tmp/*@>134bd*/ = /*@>14b77*/fmod(/*@>134b4*/tmp, /*@>134b8*/256.0);
 8001e5a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <FUNC_OutputData+0xad0>)
 8001e64:	f00c fa94 	bl	800e390 <fmod>
 8001e68:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15749*/VCU_B./*@>172e1*/DataTypeConversion10_j/*@>6fa7*/ = /*@>13b8e*/(uint8_T)(/*@>134c6*/tmp/*@>134c9*/ < /*@>134c5*/0.0/*@>134c9*/ ? (int32_T)/*@>134d1*/(uint8_T)-/*@<134da*//*@>134cf*/(int8_T)/*@>134dd*/(uint8_T)-/*@<134cd*//*@>134ca*/tmp : (int32_T)/*@>134e0*/(uint8_T)/*@>134d2*/tmp);
 8001e6c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	f00d f868 	bl	800ef4c <__aeabi_dcmplt>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d01c      	beq.n	8001ebc <FUNC_OutputData+0xad4>
 8001e82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001e86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e8e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001e96:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001e9a:	f00d f87f 	bl	800ef9c <__aeabi_d2uiz>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	425b      	negs	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	e00f      	b.n	8001ec8 <FUNC_OutputData+0xae0>
 8001ea8:	9999999a 	.word	0x9999999a
 8001eac:	3fb99999 	.word	0x3fb99999
 8001eb0:	200008c8 	.word	0x200008c8
 8001eb4:	20001058 	.word	0x20001058
 8001eb8:	40700000 	.word	0x40700000
 8001ebc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001ec0:	f00d f86c 	bl	800ef9c <__aeabi_d2uiz>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	4aa1      	ldr	r2, [pc, #644]	; (8002150 <FUNC_OutputData+0xd68>)
 8001eca:	f882 3695 	strb.w	r3, [r2, #1685]	; 0x695
/* End of DataTypeConversion: '<S87>/Data Type Conversion10' */

/* DataStoreWrite: '<S66>/Data Store Write7' */
/*@>15c16*/VCU_DW./*@>174d3*/VAR_OUT_LC_Fnr/*@>6fa9*/ = /*@>1574f*/VCU_B./*@>172e4*/DataTypeConversion10_j;
 8001ece:	4ba0      	ldr	r3, [pc, #640]	; (8002150 <FUNC_OutputData+0xd68>)
 8001ed0:	f893 3695 	ldrb.w	r3, [r3, #1685]	; 0x695
 8001ed4:	4a9f      	ldr	r2, [pc, #636]	; (8002154 <FUNC_OutputData+0xd6c>)
 8001ed6:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
/* Sum: '<S74>/Add1' */
/*@>15755*/VCU_B./*@>172e7*/Add1_p/*@>995b*/ = /*@>1575b*/VCU_B./*@>172ea*/ABS_switchstate;
 8001eda:	4b9d      	ldr	r3, [pc, #628]	; (8002150 <FUNC_OutputData+0xd68>)
 8001edc:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee4:	499a      	ldr	r1, [pc, #616]	; (8002150 <FUNC_OutputData+0xd68>)
 8001ee6:	e9c1 23ca 	strd	r2, r3, [r1, #808]	; 0x328
/* DataTypeConversion: '<S74>/Data Type Conversion10' */
/*@>13457*/tmp/*@>13459*/ = /*@>14b79*/floor(/*@>15761*/VCU_B./*@>172ed*/Add1_p);
 8001eea:	4b99      	ldr	r3, [pc, #612]	; (8002150 <FUNC_OutputData+0xd68>)
 8001eec:	e9d3 23ca 	ldrd	r2, r3, [r3, #808]	; 0x328
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f00c f9c4 	bl	800e280 <floor>
 8001ef8:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13477*/if (/*@>14b7b*/rtIsNaN(/*@>1345b*/tmp)/*@>13465*/ || /*@>14b7d*/rtIsInf(/*@>13460*/tmp)) {
 8001efc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f00:	f004 fab2 	bl	8006468 <rtIsNaN>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d106      	bne.n	8001f18 <FUNC_OutputData+0xb30>
 8001f0a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f0e:	f004 fa87 	bl	8006420 <rtIsInf>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d006      	beq.n	8001f26 <FUNC_OutputData+0xb3e>
    /*@>13468*/tmp/*@>1346a*/ = /*@>13467*/0.0;
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001f24:	e008      	b.n	8001f38 <FUNC_OutputData+0xb50>
} else {
    /*@>13473*/tmp/*@>13475*/ = /*@>14b7f*/fmod(/*@>1346c*/tmp, /*@>13470*/256.0);
 8001f26:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	4b8a      	ldr	r3, [pc, #552]	; (8002158 <FUNC_OutputData+0xd70>)
 8001f30:	f00c fa2e 	bl	800e390 <fmod>
 8001f34:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15767*/VCU_B./*@>172f0*/DataTypeConversion10_o3/*@>6fb1*/ = /*@>13ba1*/(uint8_T)(/*@>1347e*/tmp/*@>13481*/ < /*@>1347d*/0.0/*@>13481*/ ? (int32_T)/*@>13489*/(uint8_T)-/*@<13492*//*@>13487*/(int8_T)/*@>13495*/(uint8_T)-/*@<13485*//*@>13482*/tmp : (int32_T)/*@>13498*/(uint8_T)/*@>1348a*/tmp);
 8001f38:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	f00d f802 	bl	800ef4c <__aeabi_dcmplt>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d012      	beq.n	8001f74 <FUNC_OutputData+0xb8c>
 8001f4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001f52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f5a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001f62:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001f66:	f00d f819 	bl	800ef9c <__aeabi_d2uiz>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	425b      	negs	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	e005      	b.n	8001f80 <FUNC_OutputData+0xb98>
 8001f74:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f78:	f00d f810 	bl	800ef9c <__aeabi_d2uiz>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	4a73      	ldr	r2, [pc, #460]	; (8002150 <FUNC_OutputData+0xd68>)
 8001f82:	f882 3696 	strb.w	r3, [r2, #1686]	; 0x696
/* End of DataTypeConversion: '<S74>/Data Type Conversion10' */

/* DataStoreWrite: '<S65>/Data Store Write' */
/*@>15c1c*/VCU_DW./*@>174d6*/VAR_OUT_ABS_switchstate/*@>6fb3*/ = /*@>1576d*/VCU_B./*@>172f3*/DataTypeConversion10_o3;
 8001f86:	4b72      	ldr	r3, [pc, #456]	; (8002150 <FUNC_OutputData+0xd68>)
 8001f88:	f893 3696 	ldrb.w	r3, [r3, #1686]	; 0x696
 8001f8c:	4a71      	ldr	r2, [pc, #452]	; (8002154 <FUNC_OutputData+0xd6c>)
 8001f8e:	f882 3106 	strb.w	r3, [r2, #262]	; 0x106
/* Sum: '<S75>/Add1' */
/*@>15773*/VCU_B./*@>172f6*/Add1_c/*@>9960*/ = /*@>15779*/VCU_B./*@>172f9*/Add1_m;
 8001f92:	4b6f      	ldr	r3, [pc, #444]	; (8002150 <FUNC_OutputData+0xd68>)
 8001f94:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	496c      	ldr	r1, [pc, #432]	; (8002150 <FUNC_OutputData+0xd68>)
 8001f9e:	e9c1 23cc 	strd	r2, r3, [r1, #816]	; 0x330
/* DataTypeConversion: '<S75>/Data Type Conversion10' */
/*@>1340f*/tmp/*@>13411*/ = /*@>14b81*/floor(/*@>1577f*/VCU_B./*@>172fc*/Add1_c);
 8001fa2:	4b6b      	ldr	r3, [pc, #428]	; (8002150 <FUNC_OutputData+0xd68>)
 8001fa4:	e9d3 23cc 	ldrd	r2, r3, [r3, #816]	; 0x330
 8001fa8:	4610      	mov	r0, r2
 8001faa:	4619      	mov	r1, r3
 8001fac:	f00c f968 	bl	800e280 <floor>
 8001fb0:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>1342f*/if (/*@>14b83*/rtIsNaN(/*@>13413*/tmp)/*@>1341d*/ || /*@>14b85*/rtIsInf(/*@>13418*/tmp)) {
 8001fb4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001fb8:	f004 fa56 	bl	8006468 <rtIsNaN>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d106      	bne.n	8001fd0 <FUNC_OutputData+0xbe8>
 8001fc2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001fc6:	f004 fa2b 	bl	8006420 <rtIsInf>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <FUNC_OutputData+0xbf6>
    /*@>13420*/tmp/*@>13422*/ = /*@>1341f*/0.0;
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001fdc:	e008      	b.n	8001ff0 <FUNC_OutputData+0xc08>
} else {
    /*@>1342b*/tmp/*@>1342d*/ = /*@>14b87*/fmod(/*@>13424*/tmp, /*@>13428*/65536.0);
 8001fde:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	4b5d      	ldr	r3, [pc, #372]	; (800215c <FUNC_OutputData+0xd74>)
 8001fe8:	f00c f9d2 	bl	800e390 <fmod>
 8001fec:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15785*/VCU_B./*@>172ff*/DataTypeConversion10_h/*@>6fbb*/ = /*@>13bb4*/(uint16_T)(/*@>13436*/tmp/*@>13439*/ < /*@>13435*/0.0/*@>13439*/ ? (int32_T)/*@>13441*/(uint16_T)-/*@<1344a*//*@>1343f*/(int16_T)/*@>1344d*/(uint16_T)-/*@<1343d*//*@>1343a*/tmp : (int32_T)/*@>13450*/(uint16_T)/*@>13442*/tmp);
 8001ff0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	f00c ffa6 	bl	800ef4c <__aeabi_dcmplt>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d012      	beq.n	800202c <FUNC_OutputData+0xc44>
 8002006:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800200a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800200e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002012:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002016:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800201a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800201e:	f00c ffbd 	bl	800ef9c <__aeabi_d2uiz>
 8002022:	4603      	mov	r3, r0
 8002024:	b29b      	uxth	r3, r3
 8002026:	425b      	negs	r3, r3
 8002028:	b29b      	uxth	r3, r3
 800202a:	e005      	b.n	8002038 <FUNC_OutputData+0xc50>
 800202c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002030:	f00c ffb4 	bl	800ef9c <__aeabi_d2uiz>
 8002034:	4603      	mov	r3, r0
 8002036:	b29b      	uxth	r3, r3
 8002038:	4a45      	ldr	r2, [pc, #276]	; (8002150 <FUNC_OutputData+0xd68>)
 800203a:	f8a2 3648 	strh.w	r3, [r2, #1608]	; 0x648
/* End of DataTypeConversion: '<S75>/Data Type Conversion10' */

/* DataStoreWrite: '<S65>/Data Store Write1' */
/*@>15c22*/VCU_DW./*@>174d9*/VAR_OUT_p_brake_F/*@>6fbd*/ = /*@>1578b*/VCU_B./*@>17302*/DataTypeConversion10_h;
 800203e:	4b44      	ldr	r3, [pc, #272]	; (8002150 <FUNC_OutputData+0xd68>)
 8002040:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 8002044:	4a43      	ldr	r2, [pc, #268]	; (8002154 <FUNC_OutputData+0xd6c>)
 8002046:	f8a2 30a8 	strh.w	r3, [r2, #168]	; 0xa8
/* Sum: '<S76>/Add1' */
/*@>15791*/VCU_B./*@>17305*/Add1_js/*@>9965*/ = /*@>15797*/VCU_B./*@>17308*/ABS_BL_switch;
 800204a:	4b41      	ldr	r3, [pc, #260]	; (8002150 <FUNC_OutputData+0xd68>)
 800204c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	493e      	ldr	r1, [pc, #248]	; (8002150 <FUNC_OutputData+0xd68>)
 8002056:	e9c1 23ce 	strd	r2, r3, [r1, #824]	; 0x338
/* DataTypeConversion: '<S76>/Data Type Conversion10' */
/*@>133c7*/tmp/*@>133c9*/ = /*@>14b89*/floor(/*@>1579d*/VCU_B./*@>1730b*/Add1_js);
 800205a:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <FUNC_OutputData+0xd68>)
 800205c:	e9d3 23ce 	ldrd	r2, r3, [r3, #824]	; 0x338
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	f00c f90c 	bl	800e280 <floor>
 8002068:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>133e7*/if (/*@>14b8b*/rtIsNaN(/*@>133cb*/tmp)/*@>133d5*/ || /*@>14b8d*/rtIsInf(/*@>133d0*/tmp)) {
 800206c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002070:	f004 f9fa 	bl	8006468 <rtIsNaN>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <FUNC_OutputData+0xca0>
 800207a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800207e:	f004 f9cf 	bl	8006420 <rtIsInf>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <FUNC_OutputData+0xcae>
    /*@>133d8*/tmp/*@>133da*/ = /*@>133d7*/0.0;
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002094:	e008      	b.n	80020a8 <FUNC_OutputData+0xcc0>
} else {
    /*@>133e3*/tmp/*@>133e5*/ = /*@>14b8f*/fmod(/*@>133dc*/tmp, /*@>133e0*/256.0);
 8002096:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <FUNC_OutputData+0xd70>)
 80020a0:	f00c f976 	bl	800e390 <fmod>
 80020a4:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>157a3*/VCU_B./*@>1730e*/DataTypeConversion10_ok/*@>6fc5*/ = /*@>13bc7*/(uint8_T)(/*@>133ee*/tmp/*@>133f1*/ < /*@>133ed*/0.0/*@>133f1*/ ? (int32_T)/*@>133f9*/(uint8_T)-/*@<13402*//*@>133f7*/(int8_T)/*@>13405*/(uint8_T)-/*@<133f5*//*@>133f2*/tmp : (int32_T)/*@>13408*/(uint8_T)/*@>133fa*/tmp);
 80020a8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	f00c ff4a 	bl	800ef4c <__aeabi_dcmplt>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d012      	beq.n	80020e4 <FUNC_OutputData+0xcfc>
 80020be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80020c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80020ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80020d2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80020d6:	f00c ff61 	bl	800ef9c <__aeabi_d2uiz>
 80020da:	4603      	mov	r3, r0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	e005      	b.n	80020f0 <FUNC_OutputData+0xd08>
 80020e4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80020e8:	f00c ff58 	bl	800ef9c <__aeabi_d2uiz>
 80020ec:	4603      	mov	r3, r0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	4a17      	ldr	r2, [pc, #92]	; (8002150 <FUNC_OutputData+0xd68>)
 80020f2:	f882 3697 	strb.w	r3, [r2, #1687]	; 0x697
/* End of DataTypeConversion: '<S76>/Data Type Conversion10' */

/* DataStoreWrite: '<S65>/Data Store Write2' */
/*@>15c28*/VCU_DW./*@>174dc*/VAR_OUT_ABS_BL_switch/*@>6fc7*/ = /*@>157a9*/VCU_B./*@>17311*/DataTypeConversion10_ok;
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <FUNC_OutputData+0xd68>)
 80020f8:	f893 3697 	ldrb.w	r3, [r3, #1687]	; 0x697
 80020fc:	4a15      	ldr	r2, [pc, #84]	; (8002154 <FUNC_OutputData+0xd6c>)
 80020fe:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
/* Sum: '<S77>/Add1' */
/*@>157af*/VCU_B./*@>17314*/Add1_ak/*@>996a*/ = /*@>157b5*/VCU_B./*@>17317*/ABS_active;
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <FUNC_OutputData+0xd68>)
 8002104:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8002108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210c:	4910      	ldr	r1, [pc, #64]	; (8002150 <FUNC_OutputData+0xd68>)
 800210e:	e9c1 23d0 	strd	r2, r3, [r1, #832]	; 0x340
/* DataTypeConversion: '<S77>/Data Type Conversion10' */
/*@>1337f*/tmp/*@>13381*/ = /*@>14b91*/floor(/*@>157bb*/VCU_B./*@>1731a*/Add1_ak);
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <FUNC_OutputData+0xd68>)
 8002114:	e9d3 23d0 	ldrd	r2, r3, [r3, #832]	; 0x340
 8002118:	4610      	mov	r0, r2
 800211a:	4619      	mov	r1, r3
 800211c:	f00c f8b0 	bl	800e280 <floor>
 8002120:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>1339f*/if (/*@>14b93*/rtIsNaN(/*@>13383*/tmp)/*@>1338d*/ || /*@>14b95*/rtIsInf(/*@>13388*/tmp)) {
 8002124:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002128:	f004 f99e 	bl	8006468 <rtIsNaN>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <FUNC_OutputData+0xd58>
 8002132:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002136:	f004 f973 	bl	8006420 <rtIsInf>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00f      	beq.n	8002160 <FUNC_OutputData+0xd78>
    /*@>13390*/tmp/*@>13392*/ = /*@>1338f*/0.0;
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800214c:	e011      	b.n	8002172 <FUNC_OutputData+0xd8a>
 800214e:	bf00      	nop
 8002150:	200008c8 	.word	0x200008c8
 8002154:	20001058 	.word	0x20001058
 8002158:	40700000 	.word	0x40700000
 800215c:	40f00000 	.word	0x40f00000
} else {
    /*@>1339b*/tmp/*@>1339d*/ = /*@>14b97*/fmod(/*@>13394*/tmp, /*@>13398*/256.0);
 8002160:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	4ba1      	ldr	r3, [pc, #644]	; (80023f0 <FUNC_OutputData+0x1008>)
 800216a:	f00c f911 	bl	800e390 <fmod>
 800216e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>157c1*/VCU_B./*@>1731d*/DataTypeConversion10_ah/*@>6fcf*/ = /*@>13bda*/(uint8_T)(/*@>133a6*/tmp/*@>133a9*/ < /*@>133a5*/0.0/*@>133a9*/ ? (int32_T)/*@>133b1*/(uint8_T)-/*@<133ba*//*@>133af*/(int8_T)/*@>133bd*/(uint8_T)-/*@<133ad*//*@>133aa*/tmp : (int32_T)/*@>133c0*/(uint8_T)/*@>133b2*/tmp);
 8002172:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	f00c fee5 	bl	800ef4c <__aeabi_dcmplt>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d012      	beq.n	80021ae <FUNC_OutputData+0xdc6>
 8002188:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800218c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002194:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002198:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800219c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80021a0:	f00c fefc 	bl	800ef9c <__aeabi_d2uiz>
 80021a4:	4603      	mov	r3, r0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	425b      	negs	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	e005      	b.n	80021ba <FUNC_OutputData+0xdd2>
 80021ae:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80021b2:	f00c fef3 	bl	800ef9c <__aeabi_d2uiz>
 80021b6:	4603      	mov	r3, r0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	4a8e      	ldr	r2, [pc, #568]	; (80023f4 <FUNC_OutputData+0x100c>)
 80021bc:	f882 3698 	strb.w	r3, [r2, #1688]	; 0x698
/* End of DataTypeConversion: '<S77>/Data Type Conversion10' */

/* DataStoreWrite: '<S65>/Data Store Write3' */
/*@>15c2e*/VCU_DW./*@>174df*/VAR_OUT_ABS_active/*@>6fd1*/ = /*@>157c7*/VCU_B./*@>17320*/DataTypeConversion10_ah;
 80021c0:	4b8c      	ldr	r3, [pc, #560]	; (80023f4 <FUNC_OutputData+0x100c>)
 80021c2:	f893 3698 	ldrb.w	r3, [r3, #1688]	; 0x698
 80021c6:	4a8c      	ldr	r2, [pc, #560]	; (80023f8 <FUNC_OutputData+0x1010>)
 80021c8:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
/* Sum: '<S78>/Add1' */
/*@>157cd*/VCU_B./*@>17323*/Add1_n4/*@>996f*/ = /*@>157d3*/VCU_B./*@>17326*/ABS_EBD_Lamp;
 80021cc:	4b89      	ldr	r3, [pc, #548]	; (80023f4 <FUNC_OutputData+0x100c>)
 80021ce:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	4987      	ldr	r1, [pc, #540]	; (80023f4 <FUNC_OutputData+0x100c>)
 80021d8:	e9c1 23d2 	strd	r2, r3, [r1, #840]	; 0x348
/* DataTypeConversion: '<S78>/Data Type Conversion10' */
/*@>13337*/tmp/*@>13339*/ = /*@>14b99*/floor(/*@>157d9*/VCU_B./*@>17329*/Add1_n4);
 80021dc:	4b85      	ldr	r3, [pc, #532]	; (80023f4 <FUNC_OutputData+0x100c>)
 80021de:	e9d3 23d2 	ldrd	r2, r3, [r3, #840]	; 0x348
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f00c f84b 	bl	800e280 <floor>
 80021ea:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13357*/if (/*@>14b9b*/rtIsNaN(/*@>1333b*/tmp)/*@>13345*/ || /*@>14b9d*/rtIsInf(/*@>13340*/tmp)) {
 80021ee:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80021f2:	f004 f939 	bl	8006468 <rtIsNaN>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d106      	bne.n	800220a <FUNC_OutputData+0xe22>
 80021fc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002200:	f004 f90e 	bl	8006420 <rtIsInf>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d006      	beq.n	8002218 <FUNC_OutputData+0xe30>
    /*@>13348*/tmp/*@>1334a*/ = /*@>13347*/0.0;
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002216:	e008      	b.n	800222a <FUNC_OutputData+0xe42>
} else {
    /*@>13353*/tmp/*@>13355*/ = /*@>14b9f*/fmod(/*@>1334c*/tmp, /*@>13350*/256.0);
 8002218:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	4b73      	ldr	r3, [pc, #460]	; (80023f0 <FUNC_OutputData+0x1008>)
 8002222:	f00c f8b5 	bl	800e390 <fmod>
 8002226:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>157df*/VCU_B./*@>1732c*/DataTypeConversion10_d/*@>6fd9*/ = /*@>13bed*/(uint8_T)(/*@>1335e*/tmp/*@>13361*/ < /*@>1335d*/0.0/*@>13361*/ ? (int32_T)/*@>13369*/(uint8_T)-/*@<13372*//*@>13367*/(int8_T)/*@>13375*/(uint8_T)-/*@<13365*//*@>13362*/tmp : (int32_T)/*@>13378*/(uint8_T)/*@>1336a*/tmp);
 800222a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	f00c fe89 	bl	800ef4c <__aeabi_dcmplt>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d012      	beq.n	8002266 <FUNC_OutputData+0xe7e>
 8002240:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002244:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800224c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002254:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002258:	f00c fea0 	bl	800ef9c <__aeabi_d2uiz>
 800225c:	4603      	mov	r3, r0
 800225e:	b2db      	uxtb	r3, r3
 8002260:	425b      	negs	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	e005      	b.n	8002272 <FUNC_OutputData+0xe8a>
 8002266:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800226a:	f00c fe97 	bl	800ef9c <__aeabi_d2uiz>
 800226e:	4603      	mov	r3, r0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	4a60      	ldr	r2, [pc, #384]	; (80023f4 <FUNC_OutputData+0x100c>)
 8002274:	f882 3699 	strb.w	r3, [r2, #1689]	; 0x699
/* End of DataTypeConversion: '<S78>/Data Type Conversion10' */

/* DataStoreWrite: '<S65>/Data Store Write4' */
/*@>15c34*/VCU_DW./*@>174e2*/VAR_OUT_ABS_EBD_Lamp/*@>6fdb*/ = /*@>157e5*/VCU_B./*@>1732f*/DataTypeConversion10_d;
 8002278:	4b5e      	ldr	r3, [pc, #376]	; (80023f4 <FUNC_OutputData+0x100c>)
 800227a:	f893 3699 	ldrb.w	r3, [r3, #1689]	; 0x699
 800227e:	4a5e      	ldr	r2, [pc, #376]	; (80023f8 <FUNC_OutputData+0x1010>)
 8002280:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
/* Sum: '<S79>/Add1' */
/*@>157eb*/VCU_B./*@>17332*/Add1_h/*@>9974*/ = /*@>157f1*/VCU_B./*@>17335*/ABS_Lamp;
 8002284:	4b5b      	ldr	r3, [pc, #364]	; (80023f4 <FUNC_OutputData+0x100c>)
 8002286:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	4959      	ldr	r1, [pc, #356]	; (80023f4 <FUNC_OutputData+0x100c>)
 8002290:	e9c1 23d4 	strd	r2, r3, [r1, #848]	; 0x350
/* DataTypeConversion: '<S79>/Data Type Conversion10' */
/*@>132ef*/tmp/*@>132f1*/ = /*@>14ba1*/floor(/*@>157f7*/VCU_B./*@>17338*/Add1_h);
 8002294:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <FUNC_OutputData+0x100c>)
 8002296:	e9d3 23d4 	ldrd	r2, r3, [r3, #848]	; 0x350
 800229a:	4610      	mov	r0, r2
 800229c:	4619      	mov	r1, r3
 800229e:	f00b ffef 	bl	800e280 <floor>
 80022a2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>1330f*/if (/*@>14ba3*/rtIsNaN(/*@>132f3*/tmp)/*@>132fd*/ || /*@>14ba5*/rtIsInf(/*@>132f8*/tmp)) {
 80022a6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80022aa:	f004 f8dd 	bl	8006468 <rtIsNaN>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d106      	bne.n	80022c2 <FUNC_OutputData+0xeda>
 80022b4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80022b8:	f004 f8b2 	bl	8006420 <rtIsInf>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <FUNC_OutputData+0xee8>
    /*@>13300*/tmp/*@>13302*/ = /*@>132ff*/0.0;
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80022ce:	e008      	b.n	80022e2 <FUNC_OutputData+0xefa>
} else {
    /*@>1330b*/tmp/*@>1330d*/ = /*@>14ba7*/fmod(/*@>13304*/tmp, /*@>13308*/256.0);
 80022d0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	4b45      	ldr	r3, [pc, #276]	; (80023f0 <FUNC_OutputData+0x1008>)
 80022da:	f00c f859 	bl	800e390 <fmod>
 80022de:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>157fd*/VCU_B./*@>1733b*/DataTypeConversion10_bd/*@>6fe3*/ = /*@>13c00*/(uint8_T)(/*@>13316*/tmp/*@>13319*/ < /*@>13315*/0.0/*@>13319*/ ? (int32_T)/*@>13321*/(uint8_T)-/*@<1332a*//*@>1331f*/(int8_T)/*@>1332d*/(uint8_T)-/*@<1331d*//*@>1331a*/tmp : (int32_T)/*@>13330*/(uint8_T)/*@>13322*/tmp);
 80022e2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	f00c fe2d 	bl	800ef4c <__aeabi_dcmplt>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d010      	beq.n	800231a <FUNC_OutputData+0xf32>
 80022f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80022fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80022fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002302:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002306:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002308:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800230c:	f00c fe46 	bl	800ef9c <__aeabi_d2uiz>
 8002310:	4603      	mov	r3, r0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	425b      	negs	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	e005      	b.n	8002326 <FUNC_OutputData+0xf3e>
 800231a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800231e:	f00c fe3d 	bl	800ef9c <__aeabi_d2uiz>
 8002322:	4603      	mov	r3, r0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	4a33      	ldr	r2, [pc, #204]	; (80023f4 <FUNC_OutputData+0x100c>)
 8002328:	f882 369a 	strb.w	r3, [r2, #1690]	; 0x69a
/* End of DataTypeConversion: '<S79>/Data Type Conversion10' */

/* DataStoreWrite: '<S65>/Data Store Write5' */
/*@>15c3a*/VCU_DW./*@>174e5*/VAR_OUT_ABS_Lamp/*@>6fe5*/ = /*@>15803*/VCU_B./*@>1733e*/DataTypeConversion10_bd;
 800232c:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <FUNC_OutputData+0x100c>)
 800232e:	f893 369a 	ldrb.w	r3, [r3, #1690]	; 0x69a
 8002332:	4a31      	ldr	r2, [pc, #196]	; (80023f8 <FUNC_OutputData+0x1010>)
 8002334:	f882 310a 	strb.w	r3, [r2, #266]	; 0x10a
/* Gain: '<S88>/Factor' */
/*@>15809*/VCU_B./*@>17341*/Factor_a/*@>6fed*/ = /*@>12e1b*/10.0/*@>132e8*/ * /*@>1580f*/VCU_B./*@>17344*/Saturation1_e;
 8002338:	4b2e      	ldr	r3, [pc, #184]	; (80023f4 <FUNC_OutputData+0x100c>)
 800233a:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <FUNC_OutputData+0x1014>)
 800234c:	f00c fb8c 	bl	800ea68 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <FUNC_OutputData+0x100c>)
 800235a:	e9c3 01d6 	strd	r0, r1, [r3, #856]	; 0x358
/* Sum: '<S88>/Add1' */
/*@>15815*/VCU_B./*@>17347*/Add1_lh/*@>9979*/ = /*@>1581b*/VCU_B./*@>1734a*/Factor_a;
 800235e:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <FUNC_OutputData+0x100c>)
 8002360:	e9d3 23d6 	ldrd	r2, r3, [r3, #856]	; 0x358
 8002364:	4923      	ldr	r1, [pc, #140]	; (80023f4 <FUNC_OutputData+0x100c>)
 8002366:	e9c1 23d8 	strd	r2, r3, [r1, #864]	; 0x360
/* DataTypeConversion: '<S88>/Data Type Conversion10' */
/*@>132a3*/tmp/*@>132a5*/ = /*@>14ba9*/floor(/*@>15821*/VCU_B./*@>1734d*/Add1_lh);
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <FUNC_OutputData+0x100c>)
 800236c:	e9d3 23d8 	ldrd	r2, r3, [r3, #864]	; 0x360
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	f00b ff84 	bl	800e280 <floor>
 8002378:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>132c3*/if (/*@>14bab*/rtIsNaN(/*@>132a7*/tmp)/*@>132b1*/ || /*@>14bad*/rtIsInf(/*@>132ac*/tmp)) {
 800237c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002380:	f004 f872 	bl	8006468 <rtIsNaN>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <FUNC_OutputData+0xfb0>
 800238a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800238e:	f004 f847 	bl	8006420 <rtIsInf>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d006      	beq.n	80023a6 <FUNC_OutputData+0xfbe>
    /*@>132b4*/tmp/*@>132b6*/ = /*@>132b3*/0.0;
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80023a4:	e008      	b.n	80023b8 <FUNC_OutputData+0xfd0>
} else {
    /*@>132bf*/tmp/*@>132c1*/ = /*@>14baf*/fmod(/*@>132b8*/tmp, /*@>132bc*/65536.0);
 80023a6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <FUNC_OutputData+0x1018>)
 80023b0:	f00b ffee 	bl	800e390 <fmod>
 80023b4:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15827*/VCU_B./*@>17350*/DataTypeConversion10_m/*@>6ff5*/ = /*@>13c15*/(uint16_T)(/*@>132ca*/tmp/*@>132cd*/ < /*@>132c9*/0.0/*@>132cd*/ ? (int32_T)/*@>132d5*/(uint16_T)-/*@<132de*//*@>132d3*/(int16_T)/*@>132e1*/(uint16_T)-/*@<132d1*//*@>132ce*/tmp : (int32_T)/*@>132e4*/(uint16_T)/*@>132d6*/tmp);
 80023b8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	f00c fdc2 	bl	800ef4c <__aeabi_dcmplt>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01a      	beq.n	8002404 <FUNC_OutputData+0x101c>
 80023ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80023d2:	673b      	str	r3, [r7, #112]	; 0x70
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023dc:	677b      	str	r3, [r7, #116]	; 0x74
 80023de:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80023e2:	f00c fddb 	bl	800ef9c <__aeabi_d2uiz>
 80023e6:	4603      	mov	r3, r0
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	425b      	negs	r3, r3
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	e00f      	b.n	8002410 <FUNC_OutputData+0x1028>
 80023f0:	40700000 	.word	0x40700000
 80023f4:	200008c8 	.word	0x200008c8
 80023f8:	20001058 	.word	0x20001058
 80023fc:	40240000 	.word	0x40240000
 8002400:	40f00000 	.word	0x40f00000
 8002404:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002408:	f00c fdc8 	bl	800ef9c <__aeabi_d2uiz>
 800240c:	4603      	mov	r3, r0
 800240e:	b29b      	uxth	r3, r3
 8002410:	4a9d      	ldr	r2, [pc, #628]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002412:	f8a2 364a 	strh.w	r3, [r2, #1610]	; 0x64a
/* End of DataTypeConversion: '<S88>/Data Type Conversion10' */

/* DataStoreWrite: '<S67>/Data Store Write' */
/*@>15c40*/VCU_DW./*@>174e8*/VAR_OUT_f_FL/*@>6ff7*/ = /*@>1582d*/VCU_B./*@>17353*/DataTypeConversion10_m;
 8002416:	4b9c      	ldr	r3, [pc, #624]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002418:	f8b3 364a 	ldrh.w	r3, [r3, #1610]	; 0x64a
 800241c:	4a9b      	ldr	r2, [pc, #620]	; (800268c <FUNC_OutputData+0x12a4>)
 800241e:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
/* Gain: '<S89>/Factor' */
/*@>15833*/VCU_B./*@>17356*/Factor_i/*@>6fff*/ = /*@>12e1c*/10.0/*@>1329c*/ * /*@>15839*/VCU_B./*@>17359*/Saturation1_n;
 8002422:	4b99      	ldr	r3, [pc, #612]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002424:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	4b96      	ldr	r3, [pc, #600]	; (8002690 <FUNC_OutputData+0x12a8>)
 8002436:	f00c fb17 	bl	800ea68 <__aeabi_dmul>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	4b91      	ldr	r3, [pc, #580]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002444:	e9c3 01da 	strd	r0, r1, [r3, #872]	; 0x368
/* Sum: '<S89>/Add1' */
/*@>1583f*/VCU_B./*@>1735c*/Add1_bqm/*@>997e*/ = /*@>15845*/VCU_B./*@>1735f*/Factor_i;
 8002448:	4b8f      	ldr	r3, [pc, #572]	; (8002688 <FUNC_OutputData+0x12a0>)
 800244a:	e9d3 23da 	ldrd	r2, r3, [r3, #872]	; 0x368
 800244e:	498e      	ldr	r1, [pc, #568]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002450:	e9c1 23dc 	strd	r2, r3, [r1, #880]	; 0x370
/* DataTypeConversion: '<S89>/Data Type Conversion10' */
/*@>13257*/tmp/*@>13259*/ = /*@>14bb1*/floor(/*@>1584b*/VCU_B./*@>17362*/Add1_bqm);
 8002454:	4b8c      	ldr	r3, [pc, #560]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002456:	e9d3 23dc 	ldrd	r2, r3, [r3, #880]	; 0x370
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	f00b ff0f 	bl	800e280 <floor>
 8002462:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13277*/if (/*@>14bb3*/rtIsNaN(/*@>1325b*/tmp)/*@>13265*/ || /*@>14bb5*/rtIsInf(/*@>13260*/tmp)) {
 8002466:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800246a:	f003 fffd 	bl	8006468 <rtIsNaN>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d106      	bne.n	8002482 <FUNC_OutputData+0x109a>
 8002474:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002478:	f003 ffd2 	bl	8006420 <rtIsInf>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <FUNC_OutputData+0x10a8>
    /*@>13268*/tmp/*@>1326a*/ = /*@>13267*/0.0;
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800248e:	e008      	b.n	80024a2 <FUNC_OutputData+0x10ba>
} else {
    /*@>13273*/tmp/*@>13275*/ = /*@>14bb7*/fmod(/*@>1326c*/tmp, /*@>13270*/65536.0);
 8002490:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	4b7e      	ldr	r3, [pc, #504]	; (8002694 <FUNC_OutputData+0x12ac>)
 800249a:	f00b ff79 	bl	800e390 <fmod>
 800249e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15851*/VCU_B./*@>17365*/DataTypeConversion10_f/*@>7007*/ = /*@>13c2a*/(uint16_T)(/*@>1327e*/tmp/*@>13281*/ < /*@>1327d*/0.0/*@>13281*/ ? (int32_T)/*@>13289*/(uint16_T)-/*@<13292*//*@>13287*/(int16_T)/*@>13295*/(uint16_T)-/*@<13285*//*@>13282*/tmp : (int32_T)/*@>13298*/(uint16_T)/*@>1328a*/tmp);
 80024a2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	f00c fd4d 	bl	800ef4c <__aeabi_dcmplt>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d010      	beq.n	80024da <FUNC_OutputData+0x10f2>
 80024b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80024bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80024be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80024c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024cc:	f00c fd66 	bl	800ef9c <__aeabi_d2uiz>
 80024d0:	4603      	mov	r3, r0
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	425b      	negs	r3, r3
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	e005      	b.n	80024e6 <FUNC_OutputData+0x10fe>
 80024da:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80024de:	f00c fd5d 	bl	800ef9c <__aeabi_d2uiz>
 80024e2:	4603      	mov	r3, r0
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	4a68      	ldr	r2, [pc, #416]	; (8002688 <FUNC_OutputData+0x12a0>)
 80024e8:	f8a2 364c 	strh.w	r3, [r2, #1612]	; 0x64c
/* End of DataTypeConversion: '<S89>/Data Type Conversion10' */

/* DataStoreWrite: '<S67>/Data Store Write1' */
/*@>15c46*/VCU_DW./*@>174eb*/VAR_OUT_f_FR/*@>7009*/ = /*@>15857*/VCU_B./*@>17368*/DataTypeConversion10_f;
 80024ec:	4b66      	ldr	r3, [pc, #408]	; (8002688 <FUNC_OutputData+0x12a0>)
 80024ee:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 80024f2:	4a66      	ldr	r2, [pc, #408]	; (800268c <FUNC_OutputData+0x12a4>)
 80024f4:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
/* Gain: '<S90>/Factor' */
/*@>1585d*/VCU_B./*@>1736b*/Factor_jn/*@>7011*/ = /*@>12e1d*/10.0/*@>13250*/ * /*@>15863*/VCU_B./*@>1736e*/Saturation1_o;
 80024f8:	4b63      	ldr	r3, [pc, #396]	; (8002688 <FUNC_OutputData+0x12a0>)
 80024fa:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	4b61      	ldr	r3, [pc, #388]	; (8002690 <FUNC_OutputData+0x12a8>)
 800250c:	f00c faac 	bl	800ea68 <__aeabi_dmul>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	4b5b      	ldr	r3, [pc, #364]	; (8002688 <FUNC_OutputData+0x12a0>)
 800251a:	e9c3 01de 	strd	r0, r1, [r3, #888]	; 0x378
/* Sum: '<S90>/Add1' */
/*@>15869*/VCU_B./*@>17371*/Add1_iv/*@>9983*/ = /*@>1586f*/VCU_B./*@>17374*/Factor_jn;
 800251e:	4b5a      	ldr	r3, [pc, #360]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002520:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 8002524:	4958      	ldr	r1, [pc, #352]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002526:	e9c1 23e0 	strd	r2, r3, [r1, #896]	; 0x380
/* DataTypeConversion: '<S90>/Data Type Conversion10' */
/*@>1320b*/tmp/*@>1320d*/ = /*@>14bb9*/floor(/*@>15875*/VCU_B./*@>17377*/Add1_iv);
 800252a:	4b57      	ldr	r3, [pc, #348]	; (8002688 <FUNC_OutputData+0x12a0>)
 800252c:	e9d3 23e0 	ldrd	r2, r3, [r3, #896]	; 0x380
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	f00b fea4 	bl	800e280 <floor>
 8002538:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>1322b*/if (/*@>14bbb*/rtIsNaN(/*@>1320f*/tmp)/*@>13219*/ || /*@>14bbd*/rtIsInf(/*@>13214*/tmp)) {
 800253c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002540:	f003 ff92 	bl	8006468 <rtIsNaN>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <FUNC_OutputData+0x1170>
 800254a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800254e:	f003 ff67 	bl	8006420 <rtIsInf>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <FUNC_OutputData+0x117e>
    /*@>1321c*/tmp/*@>1321e*/ = /*@>1321b*/0.0;
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002564:	e008      	b.n	8002578 <FUNC_OutputData+0x1190>
} else {
    /*@>13227*/tmp/*@>13229*/ = /*@>14bbf*/fmod(/*@>13220*/tmp, /*@>13224*/65536.0);
 8002566:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	4b49      	ldr	r3, [pc, #292]	; (8002694 <FUNC_OutputData+0x12ac>)
 8002570:	f00b ff0e 	bl	800e390 <fmod>
 8002574:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>1587b*/VCU_B./*@>1737a*/DataTypeConversion10_a/*@>7019*/ = /*@>13c3f*/(uint16_T)(/*@>13232*/tmp/*@>13235*/ < /*@>13231*/0.0/*@>13235*/ ? (int32_T)/*@>1323d*/(uint16_T)-/*@<13246*//*@>1323b*/(int16_T)/*@>13249*/(uint16_T)-/*@<13239*//*@>13236*/tmp : (int32_T)/*@>1324c*/(uint16_T)/*@>1323e*/tmp);
 8002578:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	f00c fce2 	bl	800ef4c <__aeabi_dcmplt>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d010      	beq.n	80025b0 <FUNC_OutputData+0x11c8>
 800258e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002592:	663b      	str	r3, [r7, #96]	; 0x60
 8002594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002598:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800259c:	667b      	str	r3, [r7, #100]	; 0x64
 800259e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80025a2:	f00c fcfb 	bl	800ef9c <__aeabi_d2uiz>
 80025a6:	4603      	mov	r3, r0
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	425b      	negs	r3, r3
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	e005      	b.n	80025bc <FUNC_OutputData+0x11d4>
 80025b0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80025b4:	f00c fcf2 	bl	800ef9c <__aeabi_d2uiz>
 80025b8:	4603      	mov	r3, r0
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4a32      	ldr	r2, [pc, #200]	; (8002688 <FUNC_OutputData+0x12a0>)
 80025be:	f8a2 364e 	strh.w	r3, [r2, #1614]	; 0x64e
/* End of DataTypeConversion: '<S90>/Data Type Conversion10' */

/* DataStoreWrite: '<S67>/Data Store Write2' */
/*@>15c4c*/VCU_DW./*@>174ee*/VAR_OUT_f_RL/*@>701b*/ = /*@>15881*/VCU_B./*@>1737d*/DataTypeConversion10_a;
 80025c2:	4b31      	ldr	r3, [pc, #196]	; (8002688 <FUNC_OutputData+0x12a0>)
 80025c4:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 80025c8:	4a30      	ldr	r2, [pc, #192]	; (800268c <FUNC_OutputData+0x12a4>)
 80025ca:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
/* Gain: '<S91>/Factor' */
/*@>15887*/VCU_B./*@>17380*/Factor_h0/*@>7023*/ = /*@>12e1e*/10.0/*@>13204*/ * /*@>1588d*/VCU_B./*@>17383*/Saturation1_h;
 80025ce:	4b2e      	ldr	r3, [pc, #184]	; (8002688 <FUNC_OutputData+0x12a0>)
 80025d0:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <FUNC_OutputData+0x12a8>)
 80025e2:	f00c fa41 	bl	800ea68 <__aeabi_dmul>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	4b26      	ldr	r3, [pc, #152]	; (8002688 <FUNC_OutputData+0x12a0>)
 80025f0:	e9c3 01e2 	strd	r0, r1, [r3, #904]	; 0x388
/* Sum: '<S91>/Add1' */
/*@>15893*/VCU_B./*@>17386*/Add1_i1/*@>9988*/ = /*@>15899*/VCU_B./*@>17389*/Factor_h0;
 80025f4:	4b24      	ldr	r3, [pc, #144]	; (8002688 <FUNC_OutputData+0x12a0>)
 80025f6:	e9d3 23e2 	ldrd	r2, r3, [r3, #904]	; 0x388
 80025fa:	4923      	ldr	r1, [pc, #140]	; (8002688 <FUNC_OutputData+0x12a0>)
 80025fc:	e9c1 23e4 	strd	r2, r3, [r1, #912]	; 0x390
/* DataTypeConversion: '<S91>/Data Type Conversion10' */
/*@>131bf*/tmp/*@>131c1*/ = /*@>14bc1*/floor(/*@>1589f*/VCU_B./*@>1738c*/Add1_i1);
 8002600:	4b21      	ldr	r3, [pc, #132]	; (8002688 <FUNC_OutputData+0x12a0>)
 8002602:	e9d3 23e4 	ldrd	r2, r3, [r3, #912]	; 0x390
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	f00b fe39 	bl	800e280 <floor>
 800260e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>131df*/if (/*@>14bc3*/rtIsNaN(/*@>131c3*/tmp)/*@>131cd*/ || /*@>14bc5*/rtIsInf(/*@>131c8*/tmp)) {
 8002612:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002616:	f003 ff27 	bl	8006468 <rtIsNaN>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d106      	bne.n	800262e <FUNC_OutputData+0x1246>
 8002620:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002624:	f003 fefc 	bl	8006420 <rtIsInf>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <FUNC_OutputData+0x1254>
    /*@>131d0*/tmp/*@>131d2*/ = /*@>131cf*/0.0;
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800263a:	e008      	b.n	800264e <FUNC_OutputData+0x1266>
} else {
    /*@>131db*/tmp/*@>131dd*/ = /*@>14bc7*/fmod(/*@>131d4*/tmp, /*@>131d8*/65536.0);
 800263c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <FUNC_OutputData+0x12ac>)
 8002646:	f00b fea3 	bl	800e390 <fmod>
 800264a:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>158a5*/VCU_B./*@>1738f*/DataTypeConversion10_n/*@>702b*/ = /*@>13c54*/(uint16_T)(/*@>131e6*/tmp/*@>131e9*/ < /*@>131e5*/0.0/*@>131e9*/ ? (int32_T)/*@>131f1*/(uint16_T)-/*@<131fa*//*@>131ef*/(int16_T)/*@>131fd*/(uint16_T)-/*@<131ed*//*@>131ea*/tmp : (int32_T)/*@>13200*/(uint16_T)/*@>131f2*/tmp);
 800264e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	f00c fc77 	bl	800ef4c <__aeabi_dcmplt>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d019      	beq.n	8002698 <FUNC_OutputData+0x12b0>
 8002664:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002668:	65bb      	str	r3, [r7, #88]	; 0x58
 800266a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002672:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002674:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002678:	f00c fc90 	bl	800ef9c <__aeabi_d2uiz>
 800267c:	4603      	mov	r3, r0
 800267e:	b29b      	uxth	r3, r3
 8002680:	425b      	negs	r3, r3
 8002682:	b29b      	uxth	r3, r3
 8002684:	e00e      	b.n	80026a4 <FUNC_OutputData+0x12bc>
 8002686:	bf00      	nop
 8002688:	200008c8 	.word	0x200008c8
 800268c:	20001058 	.word	0x20001058
 8002690:	40240000 	.word	0x40240000
 8002694:	40f00000 	.word	0x40f00000
 8002698:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800269c:	f00c fc7e 	bl	800ef9c <__aeabi_d2uiz>
 80026a0:	4603      	mov	r3, r0
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	4aa0      	ldr	r2, [pc, #640]	; (8002928 <FUNC_OutputData+0x1540>)
 80026a6:	f8a2 3650 	strh.w	r3, [r2, #1616]	; 0x650
/* End of DataTypeConversion: '<S91>/Data Type Conversion10' */

/* DataStoreWrite: '<S67>/Data Store Write3' */
/*@>15c52*/VCU_DW./*@>174f1*/VAR_OUT_f_RR/*@>702d*/ = /*@>158ab*/VCU_B./*@>17392*/DataTypeConversion10_n;
 80026aa:	4b9f      	ldr	r3, [pc, #636]	; (8002928 <FUNC_OutputData+0x1540>)
 80026ac:	f8b3 3650 	ldrh.w	r3, [r3, #1616]	; 0x650
 80026b0:	4a9e      	ldr	r2, [pc, #632]	; (800292c <FUNC_OutputData+0x1544>)
 80026b2:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
/* Gain: '<S92>/Factor' */
/*@>158b1*/VCU_B./*@>17395*/Factor_dd/*@>7035*/ = /*@>12e1f*/1.3/*@>131b8*/ * /*@>158b7*/VCU_B./*@>17398*/x_RH_RL;
 80026b6:	4b9c      	ldr	r3, [pc, #624]	; (8002928 <FUNC_OutputData+0x1540>)
 80026b8:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	a396      	add	r3, pc, #600	; (adr r3, 8002920 <FUNC_OutputData+0x1538>)
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	f00c f9cd 	bl	800ea68 <__aeabi_dmul>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	4b94      	ldr	r3, [pc, #592]	; (8002928 <FUNC_OutputData+0x1540>)
 80026d8:	e9c3 01e6 	strd	r0, r1, [r3, #920]	; 0x398
/* Sum: '<S92>/Add1' */
/*@>158bd*/VCU_B./*@>1739b*/Add1_ai/*@>998d*/ = /*@>158c3*/VCU_B./*@>1739e*/Factor_dd;
 80026dc:	4b92      	ldr	r3, [pc, #584]	; (8002928 <FUNC_OutputData+0x1540>)
 80026de:	e9d3 23e6 	ldrd	r2, r3, [r3, #920]	; 0x398
 80026e2:	4991      	ldr	r1, [pc, #580]	; (8002928 <FUNC_OutputData+0x1540>)
 80026e4:	e9c1 23e8 	strd	r2, r3, [r1, #928]	; 0x3a0
/* DataTypeConversion: '<S92>/Data Type Conversion10' */
/*@>13173*/tmp/*@>13175*/ = /*@>14bc9*/floor(/*@>158c9*/VCU_B./*@>173a1*/Add1_ai);
 80026e8:	4b8f      	ldr	r3, [pc, #572]	; (8002928 <FUNC_OutputData+0x1540>)
 80026ea:	e9d3 23e8 	ldrd	r2, r3, [r3, #928]	; 0x3a0
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	f00b fdc5 	bl	800e280 <floor>
 80026f6:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13193*/if (/*@>14bcb*/rtIsNaN(/*@>13177*/tmp)/*@>13181*/ || /*@>14bcd*/rtIsInf(/*@>1317c*/tmp)) {
 80026fa:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80026fe:	f003 feb3 	bl	8006468 <rtIsNaN>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d106      	bne.n	8002716 <FUNC_OutputData+0x132e>
 8002708:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800270c:	f003 fe88 	bl	8006420 <rtIsInf>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d006      	beq.n	8002724 <FUNC_OutputData+0x133c>
    /*@>13184*/tmp/*@>13186*/ = /*@>13183*/0.0;
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002722:	e008      	b.n	8002736 <FUNC_OutputData+0x134e>
} else {
    /*@>1318f*/tmp/*@>13191*/ = /*@>14bcf*/fmod(/*@>13188*/tmp, /*@>1318c*/256.0);
 8002724:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	4b80      	ldr	r3, [pc, #512]	; (8002930 <FUNC_OutputData+0x1548>)
 800272e:	f00b fe2f 	bl	800e390 <fmod>
 8002732:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>158cf*/VCU_B./*@>173a4*/DataTypeConversion10_px/*@>703d*/ = /*@>13c69*/(uint8_T)(/*@>1319a*/tmp/*@>1319d*/ < /*@>13199*/0.0/*@>1319d*/ ? (int32_T)/*@>131a5*/(uint8_T)-/*@<131ae*//*@>131a3*/(int8_T)/*@>131b1*/(uint8_T)-/*@<131a1*//*@>1319e*/tmp : (int32_T)/*@>131b4*/(uint8_T)/*@>131a6*/tmp);
 8002736:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	f00c fc03 	bl	800ef4c <__aeabi_dcmplt>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d010      	beq.n	800276e <FUNC_OutputData+0x1386>
 800274c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002750:	653b      	str	r3, [r7, #80]	; 0x50
 8002752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002756:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800275a:	657b      	str	r3, [r7, #84]	; 0x54
 800275c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002760:	f00c fc1c 	bl	800ef9c <__aeabi_d2uiz>
 8002764:	4603      	mov	r3, r0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	425b      	negs	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	e005      	b.n	800277a <FUNC_OutputData+0x1392>
 800276e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002772:	f00c fc13 	bl	800ef9c <__aeabi_d2uiz>
 8002776:	4603      	mov	r3, r0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	4a6b      	ldr	r2, [pc, #428]	; (8002928 <FUNC_OutputData+0x1540>)
 800277c:	f882 369b 	strb.w	r3, [r2, #1691]	; 0x69b
/* End of DataTypeConversion: '<S92>/Data Type Conversion10' */

/* DataStoreWrite: '<S68>/Data Store Write' */
/*@>15c58*/VCU_DW./*@>174f4*/VAR_OUT_x_RH_RL/*@>703f*/ = /*@>158d5*/VCU_B./*@>173a7*/DataTypeConversion10_px;
 8002780:	4b69      	ldr	r3, [pc, #420]	; (8002928 <FUNC_OutputData+0x1540>)
 8002782:	f893 369b 	ldrb.w	r3, [r3, #1691]	; 0x69b
 8002786:	4a69      	ldr	r2, [pc, #420]	; (800292c <FUNC_OutputData+0x1544>)
 8002788:	f882 310b 	strb.w	r3, [r2, #267]	; 0x10b
/* Gain: '<S93>/Factor' */
/*@>158db*/VCU_B./*@>173aa*/Factor_bc/*@>7047*/ = /*@>12e20*/1.3/*@>1316c*/ * /*@>158e1*/VCU_B./*@>173ad*/x_RH_RR;
 800278c:	4b66      	ldr	r3, [pc, #408]	; (8002928 <FUNC_OutputData+0x1540>)
 800278e:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8002792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	a361      	add	r3, pc, #388	; (adr r3, 8002920 <FUNC_OutputData+0x1538>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f00c f962 	bl	800ea68 <__aeabi_dmul>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	4b5e      	ldr	r3, [pc, #376]	; (8002928 <FUNC_OutputData+0x1540>)
 80027ae:	e9c3 01ea 	strd	r0, r1, [r3, #936]	; 0x3a8
/* Sum: '<S93>/Add1' */
/*@>158e7*/VCU_B./*@>173b0*/Add1_o/*@>9992*/ = /*@>158ed*/VCU_B./*@>173b3*/Factor_bc;
 80027b2:	4b5d      	ldr	r3, [pc, #372]	; (8002928 <FUNC_OutputData+0x1540>)
 80027b4:	e9d3 23ea 	ldrd	r2, r3, [r3, #936]	; 0x3a8
 80027b8:	495b      	ldr	r1, [pc, #364]	; (8002928 <FUNC_OutputData+0x1540>)
 80027ba:	e9c1 23ec 	strd	r2, r3, [r1, #944]	; 0x3b0
/* DataTypeConversion: '<S93>/Data Type Conversion10' */
/*@>13127*/tmp/*@>13129*/ = /*@>14bd1*/floor(/*@>158f3*/VCU_B./*@>173b6*/Add1_o);
 80027be:	4b5a      	ldr	r3, [pc, #360]	; (8002928 <FUNC_OutputData+0x1540>)
 80027c0:	e9d3 23ec 	ldrd	r2, r3, [r3, #944]	; 0x3b0
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	f00b fd5a 	bl	800e280 <floor>
 80027cc:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13147*/if (/*@>14bd3*/rtIsNaN(/*@>1312b*/tmp)/*@>13135*/ || /*@>14bd5*/rtIsInf(/*@>13130*/tmp)) {
 80027d0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80027d4:	f003 fe48 	bl	8006468 <rtIsNaN>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <FUNC_OutputData+0x1404>
 80027de:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80027e2:	f003 fe1d 	bl	8006420 <rtIsInf>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <FUNC_OutputData+0x1412>
    /*@>13138*/tmp/*@>1313a*/ = /*@>13137*/0.0;
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80027f8:	e008      	b.n	800280c <FUNC_OutputData+0x1424>
} else {
    /*@>13143*/tmp/*@>13145*/ = /*@>14bd7*/fmod(/*@>1313c*/tmp, /*@>13140*/256.0);
 80027fa:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	4b4b      	ldr	r3, [pc, #300]	; (8002930 <FUNC_OutputData+0x1548>)
 8002804:	f00b fdc4 	bl	800e390 <fmod>
 8002808:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>158f9*/VCU_B./*@>173b9*/DataTypeConversion10_ab/*@>704f*/ = /*@>13c7e*/(uint8_T)(/*@>1314e*/tmp/*@>13151*/ < /*@>1314d*/0.0/*@>13151*/ ? (int32_T)/*@>13159*/(uint8_T)-/*@<13162*//*@>13157*/(int8_T)/*@>13165*/(uint8_T)-/*@<13155*//*@>13152*/tmp : (int32_T)/*@>13168*/(uint8_T)/*@>1315a*/tmp);
 800280c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	f00c fb98 	bl	800ef4c <__aeabi_dcmplt>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d010      	beq.n	8002844 <FUNC_OutputData+0x145c>
 8002822:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002826:	64bb      	str	r3, [r7, #72]	; 0x48
 8002828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800282c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002832:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002836:	f00c fbb1 	bl	800ef9c <__aeabi_d2uiz>
 800283a:	4603      	mov	r3, r0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	425b      	negs	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	e005      	b.n	8002850 <FUNC_OutputData+0x1468>
 8002844:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002848:	f00c fba8 	bl	800ef9c <__aeabi_d2uiz>
 800284c:	4603      	mov	r3, r0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4a35      	ldr	r2, [pc, #212]	; (8002928 <FUNC_OutputData+0x1540>)
 8002852:	f882 369c 	strb.w	r3, [r2, #1692]	; 0x69c
/* End of DataTypeConversion: '<S93>/Data Type Conversion10' */

/* DataStoreWrite: '<S68>/Data Store Write1' */
/*@>15c5e*/VCU_DW./*@>174f7*/VAR_OUT_x_RH_RR/*@>7051*/ = /*@>158ff*/VCU_B./*@>173bc*/DataTypeConversion10_ab;
 8002856:	4b34      	ldr	r3, [pc, #208]	; (8002928 <FUNC_OutputData+0x1540>)
 8002858:	f893 369c 	ldrb.w	r3, [r3, #1692]	; 0x69c
 800285c:	4a33      	ldr	r2, [pc, #204]	; (800292c <FUNC_OutputData+0x1544>)
 800285e:	f882 310c 	strb.w	r3, [r2, #268]	; 0x10c
/* Gain: '<S94>/Factor' */
/*@>15905*/VCU_B./*@>173bf*/Factor_f/*@>7059*/ = /*@>12e21*/1.3/*@>13120*/ * /*@>1590b*/VCU_B./*@>173c2*/x_RH_F;
 8002862:	4b31      	ldr	r3, [pc, #196]	; (8002928 <FUNC_OutputData+0x1540>)
 8002864:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	a32b      	add	r3, pc, #172	; (adr r3, 8002920 <FUNC_OutputData+0x1538>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	f00c f8f7 	bl	800ea68 <__aeabi_dmul>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	4b29      	ldr	r3, [pc, #164]	; (8002928 <FUNC_OutputData+0x1540>)
 8002884:	e9c3 01ee 	strd	r0, r1, [r3, #952]	; 0x3b8
/* Sum: '<S94>/Add1' */
/*@>15911*/VCU_B./*@>173c5*/Add1_g/*@>9997*/ = /*@>15917*/VCU_B./*@>173c8*/Factor_f;
 8002888:	4b27      	ldr	r3, [pc, #156]	; (8002928 <FUNC_OutputData+0x1540>)
 800288a:	e9d3 23ee 	ldrd	r2, r3, [r3, #952]	; 0x3b8
 800288e:	4926      	ldr	r1, [pc, #152]	; (8002928 <FUNC_OutputData+0x1540>)
 8002890:	e9c1 23f0 	strd	r2, r3, [r1, #960]	; 0x3c0
/* DataTypeConversion: '<S94>/Data Type Conversion10' */
/*@>130db*/tmp/*@>130dd*/ = /*@>14bd9*/floor(/*@>1591d*/VCU_B./*@>173cb*/Add1_g);
 8002894:	4b24      	ldr	r3, [pc, #144]	; (8002928 <FUNC_OutputData+0x1540>)
 8002896:	e9d3 23f0 	ldrd	r2, r3, [r3, #960]	; 0x3c0
 800289a:	4610      	mov	r0, r2
 800289c:	4619      	mov	r1, r3
 800289e:	f00b fcef 	bl	800e280 <floor>
 80028a2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>130fb*/if (/*@>14bdb*/rtIsNaN(/*@>130df*/tmp)/*@>130e9*/ || /*@>14bdd*/rtIsInf(/*@>130e4*/tmp)) {
 80028a6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80028aa:	f003 fddd 	bl	8006468 <rtIsNaN>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d106      	bne.n	80028c2 <FUNC_OutputData+0x14da>
 80028b4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80028b8:	f003 fdb2 	bl	8006420 <rtIsInf>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d006      	beq.n	80028d0 <FUNC_OutputData+0x14e8>
    /*@>130ec*/tmp/*@>130ee*/ = /*@>130eb*/0.0;
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80028ce:	e008      	b.n	80028e2 <FUNC_OutputData+0x14fa>
} else {
    /*@>130f7*/tmp/*@>130f9*/ = /*@>14bdf*/fmod(/*@>130f0*/tmp, /*@>130f4*/256.0);
 80028d0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	4b15      	ldr	r3, [pc, #84]	; (8002930 <FUNC_OutputData+0x1548>)
 80028da:	f00b fd59 	bl	800e390 <fmod>
 80028de:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15923*/VCU_B./*@>173ce*/DataTypeConversion10_e/*@>7061*/ = /*@>13c93*/(uint8_T)(/*@>13102*/tmp/*@>13105*/ < /*@>13101*/0.0/*@>13105*/ ? (int32_T)/*@>1310d*/(uint8_T)-/*@<13116*//*@>1310b*/(int8_T)/*@>13119*/(uint8_T)-/*@<13109*//*@>13106*/tmp : (int32_T)/*@>1311c*/(uint8_T)/*@>1310e*/tmp);
 80028e2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	f00c fb2d 	bl	800ef4c <__aeabi_dcmplt>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01d      	beq.n	8002934 <FUNC_OutputData+0x154c>
 80028f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80028fc:	643b      	str	r3, [r7, #64]	; 0x40
 80028fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002902:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002906:	647b      	str	r3, [r7, #68]	; 0x44
 8002908:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800290c:	f00c fb46 	bl	800ef9c <__aeabi_d2uiz>
 8002910:	4603      	mov	r3, r0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	425b      	negs	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	e012      	b.n	8002940 <FUNC_OutputData+0x1558>
 800291a:	bf00      	nop
 800291c:	f3af 8000 	nop.w
 8002920:	cccccccd 	.word	0xcccccccd
 8002924:	3ff4cccc 	.word	0x3ff4cccc
 8002928:	200008c8 	.word	0x200008c8
 800292c:	20001058 	.word	0x20001058
 8002930:	40700000 	.word	0x40700000
 8002934:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002938:	f00c fb30 	bl	800ef9c <__aeabi_d2uiz>
 800293c:	4603      	mov	r3, r0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4aa1      	ldr	r2, [pc, #644]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002942:	f882 369d 	strb.w	r3, [r2, #1693]	; 0x69d
/* End of DataTypeConversion: '<S94>/Data Type Conversion10' */

/* DataStoreWrite: '<S68>/Data Store Write2' */
/*@>15c64*/VCU_DW./*@>174fa*/VAR_OUT_x_RH_F/*@>7063*/ = /*@>15929*/VCU_B./*@>173d1*/DataTypeConversion10_e;
 8002946:	4ba0      	ldr	r3, [pc, #640]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002948:	f893 369d 	ldrb.w	r3, [r3, #1693]	; 0x69d
 800294c:	4a9f      	ldr	r2, [pc, #636]	; (8002bcc <FUNC_OutputData+0x17e4>)
 800294e:	f882 310d 	strb.w	r3, [r2, #269]	; 0x10d
/* Gain: '<S95>/Factor' */
/*@>1592f*/VCU_B./*@>173d4*/Factor_o/*@>706b*/ = /*@>12e22*/10.0/*@>130d4*/ * /*@>15935*/VCU_B./*@>173d7*/x_clutch_b;
 8002952:	4b9d      	ldr	r3, [pc, #628]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002954:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8002958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	4b9a      	ldr	r3, [pc, #616]	; (8002bd0 <FUNC_OutputData+0x17e8>)
 8002966:	f00c f87f 	bl	800ea68 <__aeabi_dmul>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	4b95      	ldr	r3, [pc, #596]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002974:	e9c3 01f2 	strd	r0, r1, [r3, #968]	; 0x3c8
/* Sum: '<S95>/Add1' */
/*@>1593b*/VCU_B./*@>173da*/Add1_id/*@>999c*/ = /*@>15941*/VCU_B./*@>173dd*/Factor_o;
 8002978:	4b93      	ldr	r3, [pc, #588]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 800297a:	e9d3 23f2 	ldrd	r2, r3, [r3, #968]	; 0x3c8
 800297e:	4992      	ldr	r1, [pc, #584]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002980:	e9c1 23f4 	strd	r2, r3, [r1, #976]	; 0x3d0
/* DataTypeConversion: '<S95>/Data Type Conversion10' */
/*@>1308f*/tmp/*@>13091*/ = /*@>14be1*/floor(/*@>15947*/VCU_B./*@>173e0*/Add1_id);
 8002984:	4b90      	ldr	r3, [pc, #576]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002986:	e9d3 23f4 	ldrd	r2, r3, [r3, #976]	; 0x3d0
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	f00b fc77 	bl	800e280 <floor>
 8002992:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>130af*/if (/*@>14be3*/rtIsNaN(/*@>13093*/tmp)/*@>1309d*/ || /*@>14be5*/rtIsInf(/*@>13098*/tmp)) {
 8002996:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800299a:	f003 fd65 	bl	8006468 <rtIsNaN>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d106      	bne.n	80029b2 <FUNC_OutputData+0x15ca>
 80029a4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80029a8:	f003 fd3a 	bl	8006420 <rtIsInf>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d006      	beq.n	80029c0 <FUNC_OutputData+0x15d8>
    /*@>130a0*/tmp/*@>130a2*/ = /*@>1309f*/0.0;
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80029be:	e008      	b.n	80029d2 <FUNC_OutputData+0x15ea>
} else {
    /*@>130ab*/tmp/*@>130ad*/ = /*@>14be7*/fmod(/*@>130a4*/tmp, /*@>130a8*/256.0);
 80029c0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	4b82      	ldr	r3, [pc, #520]	; (8002bd4 <FUNC_OutputData+0x17ec>)
 80029ca:	f00b fce1 	bl	800e390 <fmod>
 80029ce:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>1594d*/VCU_B./*@>173e3*/DataTypeConversion10_g/*@>7073*/ = /*@>13ca8*/(uint8_T)(/*@>130b6*/tmp/*@>130b9*/ < /*@>130b5*/0.0/*@>130b9*/ ? (int32_T)/*@>130c1*/(uint8_T)-/*@<130ca*//*@>130bf*/(int8_T)/*@>130cd*/(uint8_T)-/*@<130bd*//*@>130ba*/tmp : (int32_T)/*@>130d0*/(uint8_T)/*@>130c2*/tmp);
 80029d2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	f00c fab5 	bl	800ef4c <__aeabi_dcmplt>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d010      	beq.n	8002a0a <FUNC_OutputData+0x1622>
 80029e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80029ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80029f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029f8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80029fc:	f00c face 	bl	800ef9c <__aeabi_d2uiz>
 8002a00:	4603      	mov	r3, r0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	425b      	negs	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	e005      	b.n	8002a16 <FUNC_OutputData+0x162e>
 8002a0a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002a0e:	f00c fac5 	bl	800ef9c <__aeabi_d2uiz>
 8002a12:	4603      	mov	r3, r0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	4a6c      	ldr	r2, [pc, #432]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002a18:	f882 369e 	strb.w	r3, [r2, #1694]	; 0x69e
/* End of DataTypeConversion: '<S95>/Data Type Conversion10' */

/* DataStoreWrite: '<S68>/Data Store Write3' */
/*@>15c6a*/VCU_DW./*@>174fd*/VAR_OUT_x_clutch/*@>7075*/ = /*@>15953*/VCU_B./*@>173e6*/DataTypeConversion10_g;
 8002a1c:	4b6a      	ldr	r3, [pc, #424]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002a1e:	f893 369e 	ldrb.w	r3, [r3, #1694]	; 0x69e
 8002a22:	4a6a      	ldr	r2, [pc, #424]	; (8002bcc <FUNC_OutputData+0x17e4>)
 8002a24:	f882 310e 	strb.w	r3, [r2, #270]	; 0x10e
/* Gain: '<S96>/Factor' */
/*@>15959*/VCU_B./*@>173e9*/Factor_k/*@>707d*/ = /*@>12e23*/10.0/*@>13088*/ * /*@>1595f*/VCU_B./*@>173ec*/x_clutch_STW;
 8002a28:	4b67      	ldr	r3, [pc, #412]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002a2a:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8002a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	4b65      	ldr	r3, [pc, #404]	; (8002bd0 <FUNC_OutputData+0x17e8>)
 8002a3c:	f00c f814 	bl	800ea68 <__aeabi_dmul>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	4b5f      	ldr	r3, [pc, #380]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002a4a:	e9c3 01f6 	strd	r0, r1, [r3, #984]	; 0x3d8
/* Sum: '<S96>/Add1' */
/*@>15965*/VCU_B./*@>173ef*/Add1_d/*@>99a1*/ = /*@>1596b*/VCU_B./*@>173f2*/Factor_k;
 8002a4e:	4b5e      	ldr	r3, [pc, #376]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002a50:	e9d3 23f6 	ldrd	r2, r3, [r3, #984]	; 0x3d8
 8002a54:	495c      	ldr	r1, [pc, #368]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002a56:	e9c1 23f8 	strd	r2, r3, [r1, #992]	; 0x3e0
/* DataTypeConversion: '<S96>/Data Type Conversion10' */
/*@>13043*/tmp/*@>13045*/ = /*@>14be9*/floor(/*@>15971*/VCU_B./*@>173f5*/Add1_d);
 8002a5a:	4b5b      	ldr	r3, [pc, #364]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002a5c:	e9d3 23f8 	ldrd	r2, r3, [r3, #992]	; 0x3e0
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	f00b fc0c 	bl	800e280 <floor>
 8002a68:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13063*/if (/*@>14beb*/rtIsNaN(/*@>13047*/tmp)/*@>13051*/ || /*@>14bed*/rtIsInf(/*@>1304c*/tmp)) {
 8002a6c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002a70:	f003 fcfa 	bl	8006468 <rtIsNaN>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <FUNC_OutputData+0x16a0>
 8002a7a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002a7e:	f003 fccf 	bl	8006420 <rtIsInf>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d006      	beq.n	8002a96 <FUNC_OutputData+0x16ae>
    /*@>13054*/tmp/*@>13056*/ = /*@>13053*/0.0;
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002a94:	e008      	b.n	8002aa8 <FUNC_OutputData+0x16c0>
} else {
    /*@>1305f*/tmp/*@>13061*/ = /*@>14bef*/fmod(/*@>13058*/tmp, /*@>1305c*/256.0);
 8002a96:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	4b4d      	ldr	r3, [pc, #308]	; (8002bd4 <FUNC_OutputData+0x17ec>)
 8002aa0:	f00b fc76 	bl	800e390 <fmod>
 8002aa4:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15977*/VCU_B./*@>173f8*/DataTypeConversion10_k/*@>7085*/ = /*@>13cbd*/(uint8_T)(/*@>1306a*/tmp/*@>1306d*/ < /*@>13069*/0.0/*@>1306d*/ ? (int32_T)/*@>13075*/(uint8_T)-/*@<1307e*//*@>13073*/(int8_T)/*@>13081*/(uint8_T)-/*@<13071*//*@>1306e*/tmp : (int32_T)/*@>13084*/(uint8_T)/*@>13076*/tmp);
 8002aa8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	f00c fa4a 	bl	800ef4c <__aeabi_dcmplt>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d010      	beq.n	8002ae0 <FUNC_OutputData+0x16f8>
 8002abe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ac2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ace:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002ad2:	f00c fa63 	bl	800ef9c <__aeabi_d2uiz>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	425b      	negs	r3, r3
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e005      	b.n	8002aec <FUNC_OutputData+0x1704>
 8002ae0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002ae4:	f00c fa5a 	bl	800ef9c <__aeabi_d2uiz>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	4a36      	ldr	r2, [pc, #216]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002aee:	f882 369f 	strb.w	r3, [r2, #1695]	; 0x69f
/* End of DataTypeConversion: '<S96>/Data Type Conversion10' */

/* DataStoreWrite: '<S68>/Data Store Write4' */
/*@>15c70*/VCU_DW./*@>17500*/VAR_OUT_x_clutch_STW/*@>7087*/ = /*@>1597d*/VCU_B./*@>173fb*/DataTypeConversion10_k;
 8002af2:	4b35      	ldr	r3, [pc, #212]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002af4:	f893 369f 	ldrb.w	r3, [r3, #1695]	; 0x69f
 8002af8:	4a34      	ldr	r2, [pc, #208]	; (8002bcc <FUNC_OutputData+0x17e4>)
 8002afa:	f882 310f 	strb.w	r3, [r2, #271]	; 0x10f
/* Gain: '<S97>/Factor' */
/*@>15983*/VCU_B./*@>173fe*/Factor_cv/*@>708f*/ = /*@>13a7e*/40960U/*@>1303b*/ * /*@>15989*/VCU_B./*@>17401*/p_pneum;
 8002afe:	4b32      	ldr	r3, [pc, #200]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002b00:	f8b3 366a 	ldrh.w	r3, [r3, #1642]	; 0x66a
 8002b04:	461a      	mov	r2, r3
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	035b      	lsls	r3, r3, #13
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002b12:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
/* Sum: '<S97>/Add1' */
/*@>1598f*/VCU_B./*@>17404*/Add1_a5/*@>99a8*/ = /*@>13cc5*/(real_T)/*@>15995*/VCU_B./*@>17407*/Factor_cv/*@>13032*/ * /*@>13031*/5.9604644775390625E-8;
 8002b16:	4b2c      	ldr	r3, [pc, #176]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002b18:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f00b ff2d 	bl	800e97c <__aeabi_ui2d>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	4b2a      	ldr	r3, [pc, #168]	; (8002bd8 <FUNC_OutputData+0x17f0>)
 8002b30:	f00b ff9a 	bl	800ea68 <__aeabi_dmul>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002b3e:	e9c3 01fa 	strd	r0, r1, [r3, #1000]	; 0x3e8
/* DataTypeConversion: '<S97>/Data Type Conversion10' */
/*@>12feb*/tmp/*@>12fed*/ = /*@>14bf1*/floor(/*@>1599b*/VCU_B./*@>1740a*/Add1_a5);
 8002b42:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <FUNC_OutputData+0x17e0>)
 8002b44:	e9d3 23fa 	ldrd	r2, r3, [r3, #1000]	; 0x3e8
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f00b fb98 	bl	800e280 <floor>
 8002b50:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>1300b*/if (/*@>14bf3*/rtIsNaN(/*@>12fef*/tmp)/*@>12ff9*/ || /*@>14bf5*/rtIsInf(/*@>12ff4*/tmp)) {
 8002b54:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002b58:	f003 fc86 	bl	8006468 <rtIsNaN>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <FUNC_OutputData+0x1788>
 8002b62:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002b66:	f003 fc5b 	bl	8006420 <rtIsInf>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d006      	beq.n	8002b7e <FUNC_OutputData+0x1796>
    /*@>12ffc*/tmp/*@>12ffe*/ = /*@>12ffb*/0.0;
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002b7c:	e008      	b.n	8002b90 <FUNC_OutputData+0x17a8>
} else {
    /*@>13007*/tmp/*@>13009*/ = /*@>14bf7*/fmod(/*@>13000*/tmp, /*@>13004*/256.0);
 8002b7e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <FUNC_OutputData+0x17ec>)
 8002b88:	f00b fc02 	bl	800e390 <fmod>
 8002b8c:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>159a1*/VCU_B./*@>1740d*/DataTypeConversion10_p5/*@>7097*/ = /*@>13cd4*/(uint8_T)(/*@>13012*/tmp/*@>13015*/ < /*@>13011*/0.0/*@>13015*/ ? (int32_T)/*@>1301d*/(uint8_T)-/*@<13026*//*@>1301b*/(int8_T)/*@>13029*/(uint8_T)-/*@<13019*//*@>13016*/tmp : (int32_T)/*@>1302c*/(uint8_T)/*@>1301e*/tmp);
 8002b90:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	f00c f9d6 	bl	800ef4c <__aeabi_dcmplt>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d01a      	beq.n	8002bdc <FUNC_OutputData+0x17f4>
 8002ba6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bba:	f00c f9ef 	bl	800ef9c <__aeabi_d2uiz>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	425b      	negs	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e00f      	b.n	8002be8 <FUNC_OutputData+0x1800>
 8002bc8:	200008c8 	.word	0x200008c8
 8002bcc:	20001058 	.word	0x20001058
 8002bd0:	40240000 	.word	0x40240000
 8002bd4:	40700000 	.word	0x40700000
 8002bd8:	3e700000 	.word	0x3e700000
 8002bdc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002be0:	f00c f9dc 	bl	800ef9c <__aeabi_d2uiz>
 8002be4:	4603      	mov	r3, r0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	4a89      	ldr	r2, [pc, #548]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002bea:	f882 36a0 	strb.w	r3, [r2, #1696]	; 0x6a0
/* End of DataTypeConversion: '<S97>/Data Type Conversion10' */

/* DataStoreWrite: '<S68>/Data Store Write5' */
/*@>15c76*/VCU_DW./*@>17503*/VAR_OUT_p_pneum/*@>7099*/ = /*@>159a7*/VCU_B./*@>17410*/DataTypeConversion10_p5;
 8002bee:	4b88      	ldr	r3, [pc, #544]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002bf0:	f893 26a0 	ldrb.w	r2, [r3, #1696]	; 0x6a0
 8002bf4:	4b87      	ldr	r3, [pc, #540]	; (8002e14 <FUNC_OutputData+0x1a2c>)
 8002bf6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
/* Gain: '<S98>/Factor' */
/*@>159ad*/VCU_B./*@>17413*/Factor_nt/*@>70a1*/ = /*@>12e24*/10.0/*@>12fe4*/ * /*@>159b3*/VCU_B./*@>17416*/U_Bat;
 8002bfa:	4b85      	ldr	r3, [pc, #532]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002bfc:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	4610      	mov	r0, r2
 8002c06:	4619      	mov	r1, r3
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	4b82      	ldr	r3, [pc, #520]	; (8002e18 <FUNC_OutputData+0x1a30>)
 8002c0e:	f00b ff2b 	bl	800ea68 <__aeabi_dmul>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	497e      	ldr	r1, [pc, #504]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002c18:	e9c1 23fc 	strd	r2, r3, [r1, #1008]	; 0x3f0
/* Sum: '<S98>/Add1' */
/*@>159b9*/VCU_B./*@>17419*/Add1_ph/*@>99ad*/ = /*@>159bf*/VCU_B./*@>1741c*/Factor_nt;
 8002c1c:	4b7c      	ldr	r3, [pc, #496]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002c1e:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8002c22:	497b      	ldr	r1, [pc, #492]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002c24:	e9c1 23fe 	strd	r2, r3, [r1, #1016]	; 0x3f8
/* DataTypeConversion: '<S98>/Data Type Conversion10' */
/*@>12f9f*/tmp/*@>12fa1*/ = /*@>14bf9*/floor(/*@>159c5*/VCU_B./*@>1741f*/Add1_ph);
 8002c28:	4b79      	ldr	r3, [pc, #484]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002c2a:	e9d3 23fe 	ldrd	r2, r3, [r3, #1016]	; 0x3f8
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	f00b fb25 	bl	800e280 <floor>
 8002c36:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>12fbf*/if (/*@>14bfb*/rtIsNaN(/*@>12fa3*/tmp)/*@>12fad*/ || /*@>14bfd*/rtIsInf(/*@>12fa8*/tmp)) {
 8002c3a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002c3e:	f003 fc13 	bl	8006468 <rtIsNaN>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <FUNC_OutputData+0x186e>
 8002c48:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002c4c:	f003 fbe8 	bl	8006420 <rtIsInf>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <FUNC_OutputData+0x187c>
    /*@>12fb0*/tmp/*@>12fb2*/ = /*@>12faf*/0.0;
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002c62:	e008      	b.n	8002c76 <FUNC_OutputData+0x188e>
} else {
    /*@>12fbb*/tmp/*@>12fbd*/ = /*@>14bff*/fmod(/*@>12fb4*/tmp, /*@>12fb8*/256.0);
 8002c64:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	4b6b      	ldr	r3, [pc, #428]	; (8002e1c <FUNC_OutputData+0x1a34>)
 8002c6e:	f00b fb8f 	bl	800e390 <fmod>
 8002c72:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>159cb*/VCU_B./*@>17422*/DataTypeConversion10_bm/*@>70a9*/ = /*@>13ce9*/(uint8_T)(/*@>12fc6*/tmp/*@>12fc9*/ < /*@>12fc5*/0.0/*@>12fc9*/ ? (int32_T)/*@>12fd1*/(uint8_T)-/*@<12fda*//*@>12fcf*/(int8_T)/*@>12fdd*/(uint8_T)-/*@<12fcd*//*@>12fca*/tmp : (int32_T)/*@>12fe0*/(uint8_T)/*@>12fd2*/tmp);
 8002c76:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	f00c f963 	bl	800ef4c <__aeabi_dcmplt>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d010      	beq.n	8002cae <FUNC_OutputData+0x18c6>
 8002c8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002c90:	623b      	str	r3, [r7, #32]
 8002c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c96:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ca0:	f00c f97c 	bl	800ef9c <__aeabi_d2uiz>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	425b      	negs	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	e005      	b.n	8002cba <FUNC_OutputData+0x18d2>
 8002cae:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002cb2:	f00c f973 	bl	800ef9c <__aeabi_d2uiz>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	4a55      	ldr	r2, [pc, #340]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002cbc:	f882 36a1 	strb.w	r3, [r2, #1697]	; 0x6a1
/* End of DataTypeConversion: '<S98>/Data Type Conversion10' */

/* DataStoreWrite: '<S68>/Data Store Write6' */
/*@>15c7c*/VCU_DW./*@>17506*/VAR_OUT_U_Bat/*@>70ab*/ = /*@>159d1*/VCU_B./*@>17425*/DataTypeConversion10_bm;
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002cc2:	f893 26a1 	ldrb.w	r2, [r3, #1697]	; 0x6a1
 8002cc6:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <FUNC_OutputData+0x1a2c>)
 8002cc8:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
/* Sum: '<S106>/Add1' */
/*@>159d7*/VCU_B./*@>17428*/Add1_jp/*@>99b2*/ = /*@>159dd*/VCU_B./*@>1742b*/Saturation;
 8002ccc:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002cce:	e9d3 2396 	ldrd	r2, r3, [r3, #600]	; 0x258
 8002cd2:	494f      	ldr	r1, [pc, #316]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002cd4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002cd8:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreWrite: '<S69>/Data Store Write' */
/*@>15c82*/VCU_DW./*@>17509*/VAR_OUT_Fans_active/*@>70b2*/ = /*@>159e3*/VCU_B./*@>1742e*/Add1_jp;
 8002cdc:	4b4c      	ldr	r3, [pc, #304]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	494b      	ldr	r1, [pc, #300]	; (8002e14 <FUNC_OutputData+0x1a2c>)
 8002ce8:	e9c1 2308 	strd	r2, r3, [r1, #32]
/* DataStoreWrite: '<S69>/Data Store Write1' */
/*@>15c88*/VCU_DW./*@>1750c*/VAR_OUT_Waterpump_active/*@>70b4*/ = /*@>15ae6*/VCU_ConstB./*@>174ac*/Add1;
 8002cec:	4b4c      	ldr	r3, [pc, #304]	; (8002e20 <FUNC_OutputData+0x1a38>)
 8002cee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002cf2:	4948      	ldr	r1, [pc, #288]	; (8002e14 <FUNC_OutputData+0x1a2c>)
 8002cf4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
/* RelationalOperator: '<S109>/Compare' incorporates:
 *  Constant: '<S109>/Constant'
 */
/*@>159e9*/VCU_B./*@>17431*/Compare_mi/*@>70b8*/ = (/*@>159ef*/VCU_B./*@>17434*/VOVG_ShiftUp/*@>70b7*/ > /*@>12e25*/0.0);
 8002cf8:	4b45      	ldr	r3, [pc, #276]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfe:	2101      	movs	r1, #1
 8002d00:	460c      	mov	r4, r1
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	f00c f93b 	bl	800ef88 <__aeabi_dcmpgt>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <FUNC_OutputData+0x1934>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	461c      	mov	r4, r3
 8002d1c:	b2e3      	uxtb	r3, r4
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002d22:	f883 277d 	strb.w	r2, [r3, #1917]	; 0x77d
/* DataStoreWrite: '<S63>/Data Store Write' */
/*@>15c8e*/VCU_DW./*@>1750f*/VAR_OUT_VOVG_ShiftUp/*@>70ba*/ = /*@>159f5*/VCU_B./*@>17437*/Compare_mi;
 8002d26:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002d28:	f893 277d 	ldrb.w	r2, [r3, #1917]	; 0x77d
 8002d2c:	4b39      	ldr	r3, [pc, #228]	; (8002e14 <FUNC_OutputData+0x1a2c>)
 8002d2e:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
/* RelationalOperator: '<S110>/Compare' incorporates:
 *  Constant: '<S110>/Constant'
 */
/*@>159fb*/VCU_B./*@>1743a*/Compare_ek/*@>70be*/ = (/*@>15a01*/VCU_B./*@>1743d*/VOVG_ShiftDown/*@>70bd*/ > /*@>12e26*/0.0);
 8002d32:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002d34:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d38:	2101      	movs	r1, #1
 8002d3a:	460c      	mov	r4, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	f00c f91e 	bl	800ef88 <__aeabi_dcmpgt>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <FUNC_OutputData+0x196e>
 8002d52:	2300      	movs	r3, #0
 8002d54:	461c      	mov	r4, r3
 8002d56:	b2e3      	uxtb	r3, r4
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002d5c:	f883 277e 	strb.w	r2, [r3, #1918]	; 0x77e
/* DataStoreWrite: '<S63>/Data Store Write1' */
/*@>15c94*/VCU_DW./*@>17512*/VAR_OUT_VOVG_ShiftDown/*@>70c0*/ = /*@>15a07*/VCU_B./*@>17440*/Compare_ek;
 8002d60:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002d62:	f893 277e 	ldrb.w	r2, [r3, #1918]	; 0x77e
 8002d66:	4b2b      	ldr	r3, [pc, #172]	; (8002e14 <FUNC_OutputData+0x1a2c>)
 8002d68:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
/* Gain: '<S63>/Gain4' */
/*@>12f57*/tmp/*@>12f59*/ = /*@>14c01*/floor(/*@>12e27*/65535.0/*@>12f50*/ * /*@>15a0d*/VCU_B./*@>17443*/Saturation);
 8002d6c:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <FUNC_OutputData+0x1a28>)
 8002d6e:	e9d3 2396 	ldrd	r2, r3, [r3, #600]	; 0x258
 8002d72:	4610      	mov	r0, r2
 8002d74:	4619      	mov	r1, r3
 8002d76:	a324      	add	r3, pc, #144	; (adr r3, 8002e08 <FUNC_OutputData+0x1a20>)
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	f00b fe74 	bl	800ea68 <__aeabi_dmul>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	f00b fa7a 	bl	800e280 <floor>
 8002d8c:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>12f77*/if (/*@>14c03*/rtIsNaN(/*@>12f5b*/tmp)/*@>12f65*/ || /*@>14c05*/rtIsInf(/*@>12f60*/tmp)) {
 8002d90:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002d94:	f003 fb68 	bl	8006468 <rtIsNaN>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <FUNC_OutputData+0x19c4>
 8002d9e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002da2:	f003 fb3d 	bl	8006420 <rtIsInf>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d006      	beq.n	8002dba <FUNC_OutputData+0x19d2>
    /*@>12f68*/tmp/*@>12f6a*/ = /*@>12f67*/0.0;
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002db8:	e008      	b.n	8002dcc <FUNC_OutputData+0x19e4>
} else {
    /*@>12f73*/tmp/*@>12f75*/ = /*@>14c07*/fmod(/*@>12f6c*/tmp, /*@>12f70*/65536.0);
 8002dba:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <FUNC_OutputData+0x1a3c>)
 8002dc4:	f00b fae4 	bl	800e390 <fmod>
 8002dc8:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15a13*/VCU_B./*@>17446*/Gain4_f/*@>70c8*/ = /*@>13d08*/(uint16_T)(/*@>12f7e*/tmp/*@>12f81*/ < /*@>12f7d*/0.0/*@>12f81*/ ? (int32_T)/*@>12f89*/(uint16_T)-/*@<12f92*//*@>12f87*/(int16_T)/*@>12f95*/(uint16_T)-/*@<12f85*//*@>12f82*/tmp : (int32_T)/*@>12f98*/(uint16_T)/*@>12f8a*/tmp);
 8002dcc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	f00c f8b8 	bl	800ef4c <__aeabi_dcmplt>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d022      	beq.n	8002e28 <FUNC_OutputData+0x1a40>
 8002de2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002df6:	f00c f8d1 	bl	800ef9c <__aeabi_d2uiz>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	425b      	negs	r3, r3
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	e017      	b.n	8002e34 <FUNC_OutputData+0x1a4c>
 8002e04:	f3af 8000 	nop.w
 8002e08:	00000000 	.word	0x00000000
 8002e0c:	40efffe0 	.word	0x40efffe0
 8002e10:	200008c8 	.word	0x200008c8
 8002e14:	20001058 	.word	0x20001058
 8002e18:	40240000 	.word	0x40240000
 8002e1c:	40700000 	.word	0x40700000
 8002e20:	0800f1d0 	.word	0x0800f1d0
 8002e24:	40f00000 	.word	0x40f00000
 8002e28:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002e2c:	f00c f8b6 	bl	800ef9c <__aeabi_d2uiz>
 8002e30:	4603      	mov	r3, r0
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	4aaa      	ldr	r2, [pc, #680]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002e36:	f8a2 3652 	strh.w	r3, [r2, #1618]	; 0x652
/* End of Gain: '<S63>/Gain4' */

/* DataStoreWrite: '<S63>/Data Store Write10' */
/*@>15c9a*/VCU_DW./*@>17515*/VAR_OUT_Fans2_PWM_active/*@>70ca*/ = /*@>15a19*/VCU_B./*@>17449*/Gain4_f;
 8002e3a:	4ba9      	ldr	r3, [pc, #676]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002e3c:	f8b3 2652 	ldrh.w	r2, [r3, #1618]	; 0x652
 8002e40:	4ba8      	ldr	r3, [pc, #672]	; (80030e4 <FUNC_OutputData+0x1cfc>)
 8002e42:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
/* RelationalOperator: '<S113>/Compare' incorporates:
 *  Constant: '<S113>/Constant'
 */
/*@>15a1f*/VCU_B./*@>1744c*/Compare_pr/*@>70ce*/ = (/*@>15a25*/VCU_B./*@>1744f*/Ignition_Cut/*@>70cd*/ > /*@>12e28*/0.0);
 8002e46:	4ba6      	ldr	r3, [pc, #664]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002e48:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	460c      	mov	r4, r1
 8002e50:	4610      	mov	r0, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	f00c f894 	bl	800ef88 <__aeabi_dcmpgt>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <FUNC_OutputData+0x1a82>
 8002e66:	2300      	movs	r3, #0
 8002e68:	461c      	mov	r4, r3
 8002e6a:	b2e3      	uxtb	r3, r4
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b9c      	ldr	r3, [pc, #624]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002e70:	f883 277f 	strb.w	r2, [r3, #1919]	; 0x77f
/* DataStoreWrite: '<S63>/Data Store Write2' */
/*@>15ca0*/VCU_DW./*@>17518*/VAR_OUT_Ignition_Cut/*@>70d0*/ = /*@>15a2b*/VCU_B./*@>17452*/Compare_pr;
 8002e74:	4b9a      	ldr	r3, [pc, #616]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002e76:	f893 277f 	ldrb.w	r2, [r3, #1919]	; 0x77f
 8002e7a:	4b9a      	ldr	r3, [pc, #616]	; (80030e4 <FUNC_OutputData+0x1cfc>)
 8002e7c:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
/* RelationalOperator: '<S111>/Compare' incorporates:
 *  Constant: '<S111>/Constant'
 */
/*@>15a31*/VCU_B./*@>17455*/Compare_d3/*@>70d4*/ = (/*@>15a37*/VCU_B./*@>17458*/VOVG_IN/*@>70d3*/ > /*@>12e29*/0.0);
 8002e80:	4b97      	ldr	r3, [pc, #604]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002e82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e86:	2101      	movs	r1, #1
 8002e88:	460c      	mov	r4, r1
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	f00c f877 	bl	800ef88 <__aeabi_dcmpgt>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <FUNC_OutputData+0x1abc>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	461c      	mov	r4, r3
 8002ea4:	b2e3      	uxtb	r3, r4
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b8d      	ldr	r3, [pc, #564]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002eaa:	f883 2780 	strb.w	r2, [r3, #1920]	; 0x780
/* DataStoreWrite: '<S63>/Data Store Write3' */
/*@>15ca6*/VCU_DW./*@>1751b*/VAR_OUT_VOVG_IN/*@>70d6*/ = /*@>15a3d*/VCU_B./*@>1745b*/Compare_d3;
 8002eae:	4b8c      	ldr	r3, [pc, #560]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002eb0:	f893 2780 	ldrb.w	r2, [r3, #1920]	; 0x780
 8002eb4:	4b8b      	ldr	r3, [pc, #556]	; (80030e4 <FUNC_OutputData+0x1cfc>)
 8002eb6:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
/* RelationalOperator: '<S112>/Compare' incorporates:
 *  Constant: '<S112>/Constant'
 */
/*@>15a43*/VCU_B./*@>1745e*/Compare_bb/*@>70da*/ = (/*@>15a49*/VCU_B./*@>17461*/VOVG_OUT/*@>70d9*/ > /*@>12e2a*/0.0);
 8002eba:	4b89      	ldr	r3, [pc, #548]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002ebc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	460c      	mov	r4, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	f00c f85a 	bl	800ef88 <__aeabi_dcmpgt>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <FUNC_OutputData+0x1af6>
 8002eda:	2300      	movs	r3, #0
 8002edc:	461c      	mov	r4, r3
 8002ede:	b2e3      	uxtb	r3, r4
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b7f      	ldr	r3, [pc, #508]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002ee4:	f883 2781 	strb.w	r2, [r3, #1921]	; 0x781
/* DataStoreWrite: '<S63>/Data Store Write4' */
/*@>15cac*/VCU_DW./*@>1751e*/VAR_OUT_VOVG_OUT/*@>70dc*/ = /*@>15a4f*/VCU_B./*@>17464*/Compare_bb;
 8002ee8:	4b7d      	ldr	r3, [pc, #500]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002eea:	f893 2781 	ldrb.w	r2, [r3, #1921]	; 0x781
 8002eee:	4b7d      	ldr	r3, [pc, #500]	; (80030e4 <FUNC_OutputData+0x1cfc>)
 8002ef0:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
/* Saturate: '<S63>/Saturation1' */
/*@>13df7*/if (/*@>15a55*/VCU_B./*@>17467*/MHJ9_IN/*@>13df2*/ > /*@>13f30*/1.0) {
 8002ef4:	4b7a      	ldr	r3, [pc, #488]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002ef6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	4b79      	ldr	r3, [pc, #484]	; (80030e8 <FUNC_OutputData+0x1d00>)
 8002f04:	f00c f840 	bl	800ef88 <__aeabi_dcmpgt>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <FUNC_OutputData+0x1b38>
    /*@>15a61*/VCU_B./*@>1746d*/Saturation1/*@>13df9*/ = /*@>13f36*/1.0;
 8002f0e:	4b74      	ldr	r3, [pc, #464]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002f10:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	4b73      	ldr	r3, [pc, #460]	; (80030e8 <FUNC_OutputData+0x1d00>)
 8002f1a:	e9c1 2300 	strd	r2, r3, [r1]
 8002f1e:	e01f      	b.n	8002f60 <FUNC_OutputData+0x1b78>
} else /*@>13dfa*/if (/*@>15a5b*/VCU_B./*@>1746a*/MHJ9_IN/*@>13def*/ < /*@>13f32*/0.0) {
 8002f20:	4b6f      	ldr	r3, [pc, #444]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002f22:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	f00c f80b 	bl	800ef4c <__aeabi_dcmplt>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d009      	beq.n	8002f50 <FUNC_OutputData+0x1b68>
    /*@>15a73*/VCU_B./*@>17476*/Saturation1/*@>13dfc*/ = /*@>13f34*/0.0;
 8002f3c:	4b68      	ldr	r3, [pc, #416]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002f3e:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	e9c1 2300 	strd	r2, r3, [r1]
 8002f4e:	e007      	b.n	8002f60 <FUNC_OutputData+0x1b78>
} else {
    /*@>15a67*/VCU_B./*@>17470*/Saturation1/*@>13df6*/ = /*@>15a6d*/VCU_B./*@>17473*/MHJ9_IN;
 8002f50:	4b63      	ldr	r3, [pc, #396]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002f52:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002f56:	4962      	ldr	r1, [pc, #392]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002f58:	f501 6181 	add.w	r1, r1, #1032	; 0x408
 8002f5c:	e9c1 2300 	strd	r2, r3, [r1]
}
/* End of Saturate: '<S63>/Saturation1' */

/* Gain: '<S63>/uint16 ' */
/*@>12f0b*/tmp/*@>12f0d*/ = /*@>14c09*/floor(/*@>12e2d*/65535.0/*@>12f04*/ * /*@>15a79*/VCU_B./*@>17479*/Saturation1);
 8002f60:	4b5f      	ldr	r3, [pc, #380]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8002f62:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	a35a      	add	r3, pc, #360	; (adr r3, 80030d8 <FUNC_OutputData+0x1cf0>)
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	f00b fd78 	bl	800ea68 <__aeabi_dmul>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	4619      	mov	r1, r3
 8002f80:	f00b f97e 	bl	800e280 <floor>
 8002f84:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>12f2b*/if (/*@>14c0b*/rtIsNaN(/*@>12f0f*/tmp)/*@>12f19*/ || /*@>14c0d*/rtIsInf(/*@>12f14*/tmp)) {
 8002f88:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002f8c:	f003 fa6c 	bl	8006468 <rtIsNaN>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <FUNC_OutputData+0x1bbc>
 8002f96:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002f9a:	f003 fa41 	bl	8006420 <rtIsInf>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d006      	beq.n	8002fb2 <FUNC_OutputData+0x1bca>
    /*@>12f1c*/tmp/*@>12f1e*/ = /*@>12f1b*/0.0;
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002fb0:	e008      	b.n	8002fc4 <FUNC_OutputData+0x1bdc>
} else {
    /*@>12f27*/tmp/*@>12f29*/ = /*@>14c0f*/fmod(/*@>12f20*/tmp, /*@>12f24*/65536.0);
 8002fb2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	4b4c      	ldr	r3, [pc, #304]	; (80030ec <FUNC_OutputData+0x1d04>)
 8002fbc:	f00b f9e8 	bl	800e390 <fmod>
 8002fc0:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15a7f*/VCU_B./*@>1747c*/uint16/*@>70ea*/ = /*@>13d27*/(uint16_T)(/*@>12f32*/tmp/*@>12f35*/ < /*@>12f31*/0.0/*@>12f35*/ ? (int32_T)/*@>12f3d*/(uint16_T)-/*@<12f46*//*@>12f3b*/(int16_T)/*@>12f49*/(uint16_T)-/*@<12f39*//*@>12f36*/tmp : (int32_T)/*@>12f4c*/(uint16_T)/*@>12f3e*/tmp);
 8002fc4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	f00b ffbc 	bl	800ef4c <__aeabi_dcmplt>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d010      	beq.n	8002ffc <FUNC_OutputData+0x1c14>
 8002fda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fee:	f00b ffd5 	bl	800ef9c <__aeabi_d2uiz>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	425b      	negs	r3, r3
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	e005      	b.n	8003008 <FUNC_OutputData+0x1c20>
 8002ffc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003000:	f00b ffcc 	bl	800ef9c <__aeabi_d2uiz>
 8003004:	4603      	mov	r3, r0
 8003006:	b29b      	uxth	r3, r3
 8003008:	4a35      	ldr	r2, [pc, #212]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 800300a:	f8a2 3654 	strh.w	r3, [r2, #1620]	; 0x654
/* End of Gain: '<S63>/uint16 ' */

/* DataStoreWrite: '<S63>/Data Store Write5' */
/*@>15cb2*/VCU_DW./*@>17521*/VAR_OUT_MHJ9_IN/*@>70ec*/ = /*@>15a85*/VCU_B./*@>1747f*/uint16;
 800300e:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8003010:	f8b3 2654 	ldrh.w	r2, [r3, #1620]	; 0x654
 8003014:	4b33      	ldr	r3, [pc, #204]	; (80030e4 <FUNC_OutputData+0x1cfc>)
 8003016:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
/* Saturate: '<S63>/Saturation2' */
/*@>13e42*/if (/*@>15a8b*/VCU_B./*@>17482*/MHJ9_OUT/*@>13e3d*/ > /*@>13f38*/1.0) {
 800301a:	4b31      	ldr	r3, [pc, #196]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 800301c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	4b2f      	ldr	r3, [pc, #188]	; (80030e8 <FUNC_OutputData+0x1d00>)
 800302a:	f00b ffad 	bl	800ef88 <__aeabi_dcmpgt>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <FUNC_OutputData+0x1c5e>
    /*@>15a97*/VCU_B./*@>17488*/Saturation2/*@>13e44*/ = /*@>13f3e*/1.0;
 8003034:	4b2a      	ldr	r3, [pc, #168]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8003036:	f503 6182 	add.w	r1, r3, #1040	; 0x410
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <FUNC_OutputData+0x1d00>)
 8003040:	e9c1 2300 	strd	r2, r3, [r1]
 8003044:	e01f      	b.n	8003086 <FUNC_OutputData+0x1c9e>
} else /*@>13e45*/if (/*@>15a91*/VCU_B./*@>17485*/MHJ9_OUT/*@>13e3a*/ < /*@>13f3a*/0.0) {
 8003046:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8003048:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	f00b ff78 	bl	800ef4c <__aeabi_dcmplt>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <FUNC_OutputData+0x1c8e>
    /*@>15aa9*/VCU_B./*@>17491*/Saturation2/*@>13e47*/ = /*@>13f3c*/0.0;
 8003062:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8003064:	f503 6182 	add.w	r1, r3, #1040	; 0x410
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	e9c1 2300 	strd	r2, r3, [r1]
 8003074:	e007      	b.n	8003086 <FUNC_OutputData+0x1c9e>
} else {
    /*@>15a9d*/VCU_B./*@>1748b*/Saturation2/*@>13e41*/ = /*@>15aa3*/VCU_B./*@>1748e*/MHJ9_OUT;
 8003076:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8003078:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800307c:	4918      	ldr	r1, [pc, #96]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 800307e:	f501 6182 	add.w	r1, r1, #1040	; 0x410
 8003082:	e9c1 2300 	strd	r2, r3, [r1]
}
/* End of Saturate: '<S63>/Saturation2' */

/* Gain: '<S63>/uint16_1 ' */
/*@>12ebf*/tmp/*@>12ec1*/ = /*@>14c11*/floor(/*@>12e30*/65535.0/*@>12eb8*/ * /*@>15aaf*/VCU_B./*@>17494*/Saturation2);
 8003086:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <FUNC_OutputData+0x1cf8>)
 8003088:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003090:	4610      	mov	r0, r2
 8003092:	4619      	mov	r1, r3
 8003094:	a310      	add	r3, pc, #64	; (adr r3, 80030d8 <FUNC_OutputData+0x1cf0>)
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	f00b fce5 	bl	800ea68 <__aeabi_dmul>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	f00b f8eb 	bl	800e280 <floor>
 80030aa:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>12edf*/if (/*@>14c13*/rtIsNaN(/*@>12ec3*/tmp)/*@>12ecd*/ || /*@>14c15*/rtIsInf(/*@>12ec8*/tmp)) {
 80030ae:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80030b2:	f003 f9d9 	bl	8006468 <rtIsNaN>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d106      	bne.n	80030ca <FUNC_OutputData+0x1ce2>
 80030bc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80030c0:	f003 f9ae 	bl	8006420 <rtIsInf>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d012      	beq.n	80030f0 <FUNC_OutputData+0x1d08>
    /*@>12ed0*/tmp/*@>12ed2*/ = /*@>12ecf*/0.0;
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80030d6:	e014      	b.n	8003102 <FUNC_OutputData+0x1d1a>
 80030d8:	00000000 	.word	0x00000000
 80030dc:	40efffe0 	.word	0x40efffe0
 80030e0:	200008c8 	.word	0x200008c8
 80030e4:	20001058 	.word	0x20001058
 80030e8:	3ff00000 	.word	0x3ff00000
 80030ec:	40f00000 	.word	0x40f00000
} else {
    /*@>12edb*/tmp/*@>12edd*/ = /*@>14c17*/fmod(/*@>12ed4*/tmp, /*@>12ed8*/65536.0);
 80030f0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	4b51      	ldr	r3, [pc, #324]	; (8003240 <FUNC_OutputData+0x1e58>)
 80030fa:	f00b f949 	bl	800e390 <fmod>
 80030fe:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15ab5*/VCU_B./*@>17497*/uint16_1/*@>70fa*/ = /*@>13d3a*/(uint16_T)(/*@>12ee6*/tmp/*@>12ee9*/ < /*@>12ee5*/0.0/*@>12ee9*/ ? (int32_T)/*@>12ef1*/(uint16_T)-/*@<12efa*//*@>12eef*/(int16_T)/*@>12efd*/(uint16_T)-/*@<12eed*//*@>12eea*/tmp : (int32_T)/*@>12f00*/(uint16_T)/*@>12ef2*/tmp);
 8003102:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	f00b ff1d 	bl	800ef4c <__aeabi_dcmplt>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <FUNC_OutputData+0x1d52>
 8003118:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003122:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800312c:	f00b ff36 	bl	800ef9c <__aeabi_d2uiz>
 8003130:	4603      	mov	r3, r0
 8003132:	b29b      	uxth	r3, r3
 8003134:	425b      	negs	r3, r3
 8003136:	b29b      	uxth	r3, r3
 8003138:	e005      	b.n	8003146 <FUNC_OutputData+0x1d5e>
 800313a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800313e:	f00b ff2d 	bl	800ef9c <__aeabi_d2uiz>
 8003142:	4603      	mov	r3, r0
 8003144:	b29b      	uxth	r3, r3
 8003146:	4a3f      	ldr	r2, [pc, #252]	; (8003244 <FUNC_OutputData+0x1e5c>)
 8003148:	f8a2 3656 	strh.w	r3, [r2, #1622]	; 0x656
/* End of Gain: '<S63>/uint16_1 ' */

/* DataStoreWrite: '<S63>/Data Store Write6' */
/*@>15cb8*/VCU_DW./*@>17524*/VAR_OUT_MHJ9_OUT/*@>70fc*/ = /*@>15abb*/VCU_B./*@>1749a*/uint16_1;
 800314c:	4b3d      	ldr	r3, [pc, #244]	; (8003244 <FUNC_OutputData+0x1e5c>)
 800314e:	f8b3 2656 	ldrh.w	r2, [r3, #1622]	; 0x656
 8003152:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <FUNC_OutputData+0x1e60>)
 8003154:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
/* DataStoreWrite: '<S63>/Data Store Write8' */
/*@>15cbe*/VCU_DW./*@>17527*/VAR_OUT_Waterpump_PWM_active/*@>70fe*/ = /*@>15aec*/VCU_ConstB./*@>174af*/Gain6;
 8003158:	4b3c      	ldr	r3, [pc, #240]	; (800324c <FUNC_OutputData+0x1e64>)
 800315a:	8a1a      	ldrh	r2, [r3, #16]
 800315c:	4b3a      	ldr	r3, [pc, #232]	; (8003248 <FUNC_OutputData+0x1e60>)
 800315e:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
/* Gain: '<S63>/Gain5' */
/*@>12e5d*/tmp/*@>12e5f*/ = /*@>14c19*/floor(/*@>12e31*/65535.0/*@>12e4c*/ * /*@>15ac1*/VCU_B./*@>1749d*/Saturation);
 8003162:	4b38      	ldr	r3, [pc, #224]	; (8003244 <FUNC_OutputData+0x1e5c>)
 8003164:	e9d3 2396 	ldrd	r2, r3, [r3, #600]	; 0x258
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	a332      	add	r3, pc, #200	; (adr r3, 8003238 <FUNC_OutputData+0x1e50>)
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	f00b fc79 	bl	800ea68 <__aeabi_dmul>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	f00b f87f 	bl	800e280 <floor>
 8003182:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>12e93*/if (/*@>14c1b*/rtIsNaN(/*@>12e61*/tmp)/*@>12e75*/ || /*@>14c1d*/rtIsInf(/*@>12e66*/tmp)) {
 8003186:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800318a:	f003 f96d 	bl	8006468 <rtIsNaN>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d106      	bne.n	80031a2 <FUNC_OutputData+0x1dba>
 8003194:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003198:	f003 f942 	bl	8006420 <rtIsInf>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d006      	beq.n	80031b0 <FUNC_OutputData+0x1dc8>
    /*@>12e78*/tmp/*@>12e7a*/ = /*@>12e77*/0.0;
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80031ae:	e008      	b.n	80031c2 <FUNC_OutputData+0x1dda>
} else {
    /*@>12e8f*/tmp/*@>12e91*/ = /*@>14c1f*/fmod(/*@>12e7c*/tmp, /*@>12e80*/65536.0);
 80031b0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	4b21      	ldr	r3, [pc, #132]	; (8003240 <FUNC_OutputData+0x1e58>)
 80031ba:	f00b f8e9 	bl	800e390 <fmod>
 80031be:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15ac7*/VCU_B./*@>174a0*/Gain5/*@>7106*/ = /*@>13d4d*/(uint16_T)(/*@>12e9a*/tmp/*@>12e9d*/ < /*@>12e99*/0.0/*@>12e9d*/ ? (int32_T)/*@>12ea5*/(uint16_T)-/*@<12eae*//*@>12ea3*/(int16_T)/*@>12eb1*/(uint16_T)-/*@<12ea1*//*@>12e9e*/tmp : (int32_T)/*@>12eb4*/(uint16_T)/*@>12ea6*/tmp);
 80031c2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	f00b febd 	bl	800ef4c <__aeabi_dcmplt>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d010      	beq.n	80031fa <FUNC_OutputData+0x1e12>
 80031d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031ec:	f00b fed6 	bl	800ef9c <__aeabi_d2uiz>
 80031f0:	4603      	mov	r3, r0
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	425b      	negs	r3, r3
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	e005      	b.n	8003206 <FUNC_OutputData+0x1e1e>
 80031fa:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80031fe:	f00b fecd 	bl	800ef9c <__aeabi_d2uiz>
 8003202:	4603      	mov	r3, r0
 8003204:	b29b      	uxth	r3, r3
 8003206:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <FUNC_OutputData+0x1e5c>)
 8003208:	f8a2 3658 	strh.w	r3, [r2, #1624]	; 0x658
/* End of Gain: '<S63>/Gain5' */

/* DataStoreWrite: '<S63>/Data Store Write9' */
/*@>15cc4*/VCU_DW./*@>1752a*/VAR_OUT_Fans1_PWM_active/*@>7108*/ = /*@>15acd*/VCU_B./*@>174a3*/Gain5;
 800320c:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <FUNC_OutputData+0x1e5c>)
 800320e:	f8b3 2658 	ldrh.w	r2, [r3, #1624]	; 0x658
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <FUNC_OutputData+0x1e60>)
 8003214:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
/* DataStoreWrite: '<S63>/Data Store Write11' */
/*@>15cca*/VCU_DW./*@>1752d*/VAR_OUT_BSD/*@>710a*/ = /*@>15ad3*/VCU_B./*@>174a6*/LogicalOperator1_a;
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <FUNC_OutputData+0x1e5c>)
 800321a:	f893 277b 	ldrb.w	r2, [r3, #1915]	; 0x77b
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <FUNC_OutputData+0x1e60>)
 8003220:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
/* DataStoreWrite: '<S63>/Data Store Write7' */
/*@>15cd0*/VCU_DW./*@>17530*/VAR_OUT_Brakelight/*@>710c*/ = /*@>15ad9*/VCU_B./*@>174a9*/Brakelight_f;
 8003224:	4b07      	ldr	r3, [pc, #28]	; (8003244 <FUNC_OutputData+0x1e5c>)
 8003226:	f893 2786 	ldrb.w	r2, [r3, #1926]	; 0x786
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <FUNC_OutputData+0x1e60>)
 800322c:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d


        
    
      
          }
 8003230:	37f8      	adds	r7, #248	; 0xf8
 8003232:	46bd      	mov	sp, r7
 8003234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003238:	00000000 	.word	0x00000000
 800323c:	40efffe0 	.word	0x40efffe0
 8003240:	40f00000 	.word	0x40f00000
 8003244:	200008c8 	.word	0x200008c8
 8003248:	20001058 	.word	0x20001058
 800324c:	0800f1d0 	.word	0x0800f1d0

08003250 <FUNC_PumpAndFans>:
          /* Output and update for atomic system: '<Root>/Pump and Fans' */
      
              
  
        void FUNC_PumpAndFans(void)
  {
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b087      	sub	sp, #28
 8003254:	af06      	add	r7, sp, #24


                                /* Switch: '<S120>/Switch' incorporates:
 *  Switch: '<S120>/Switch1'
 */
/*@>731e*/if (/*@>17d3f*/VCU_B./*@>17fd9*/Fans_dash_bit) {
 8003256:	4b42      	ldr	r3, [pc, #264]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003258:	f893 3782 	ldrb.w	r3, [r3, #1922]	; 0x782
 800325c:	2b00      	cmp	r3, #0
 800325e:	d006      	beq.n	800326e <FUNC_PumpAndFans+0x1e>
    /* Saturate: '<S120>/Saturation' incorporates:
 *  Constant: '<S120>/Constant'
 */
    /*@>17d4b*/VCU_B./*@>17fdf*/Switch_j/*@>7316*/ = /*@>178a1*/1.0;
 8003260:	493f      	ldr	r1, [pc, #252]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	4b3f      	ldr	r3, [pc, #252]	; (8003364 <FUNC_PumpAndFans+0x114>)
 8003268:	e9c1 2394 	strd	r2, r3, [r1, #592]	; 0x250
 800326c:	e03e      	b.n	80032ec <FUNC_PumpAndFans+0x9c>
} else {
    /*@>734d*/if (/*@>17d45*/VCU_B./*@>17fdc*/TeleActiveBit/*@>733f*/ >= /*@>178a0*/1.0) {
 800326e:	4b3c      	ldr	r3, [pc, #240]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003270:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	4610      	mov	r0, r2
 800327a:	4619      	mov	r1, r3
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	4b38      	ldr	r3, [pc, #224]	; (8003364 <FUNC_PumpAndFans+0x114>)
 8003282:	f00b fe77 	bl	800ef74 <__aeabi_dcmpge>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <FUNC_PumpAndFans+0x4e>
        /* Switch: '<S120>/Switch1' */
        /*@>17d63*/VCU_B./*@>17feb*/Switch1_d/*@>7345*/ = /*@>17d69*/VCU_B./*@>17fee*/Add1_ik;
 800328c:	4b34      	ldr	r3, [pc, #208]	; (8003360 <FUNC_PumpAndFans+0x110>)
 800328e:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8003292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003296:	4932      	ldr	r1, [pc, #200]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003298:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
 800329c:	e020      	b.n	80032e0 <FUNC_PumpAndFans+0x90>
    } else {
        /* Lookup_n-D: '<S120>/2-D Lookup Table' incorporates:
 *  Switch: '<S120>/Switch1'
 */
        /*@>17d51*/VCU_B./*@>17fe2*/uDLookupTable/*@>a195*/ = /*@>17ae4*/look2_binlxpw(/*@>17d57*/VCU_B./*@>17fe5*/Add1_iu, /*@>17d5d*/VCU_B./*@>17fe8*/Gain4, /*@>17e02*/VCU_ConstP./*@>1800f*/uDLookupTable_bp01Data_h, /*@>17e08*/VCU_ConstP./*@>18012*/uDLookupTable_bp02Data, /*@>17e0e*/VCU_ConstP./*@>18015*/uDLookupTable_tableData, /*@>17e14*/VCU_ConstP./*@>18018*/uDLookupTable_maxIndex, /*@>17894*/7U);
 800329e:	4b30      	ldr	r3, [pc, #192]	; (8003360 <FUNC_PumpAndFans+0x110>)
 80032a0:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80032a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032a8:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <FUNC_PumpAndFans+0x110>)
 80032aa:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80032ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b2:	4c2d      	ldr	r4, [pc, #180]	; (8003368 <FUNC_PumpAndFans+0x118>)
 80032b4:	9400      	str	r4, [sp, #0]
 80032b6:	4c2d      	ldr	r4, [pc, #180]	; (800336c <FUNC_PumpAndFans+0x11c>)
 80032b8:	9401      	str	r4, [sp, #4]
 80032ba:	4c2d      	ldr	r4, [pc, #180]	; (8003370 <FUNC_PumpAndFans+0x120>)
 80032bc:	9402      	str	r4, [sp, #8]
 80032be:	4c2d      	ldr	r4, [pc, #180]	; (8003374 <FUNC_PumpAndFans+0x124>)
 80032c0:	9403      	str	r4, [sp, #12]
 80032c2:	2407      	movs	r4, #7
 80032c4:	9404      	str	r4, [sp, #16]
 80032c6:	f002 fda1 	bl	8005e0c <look2_binlxpw>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4924      	ldr	r1, [pc, #144]	; (8003360 <FUNC_PumpAndFans+0x110>)
 80032d0:	e9c1 239a 	strd	r2, r3, [r1, #616]	; 0x268
        /* Switch: '<S120>/Switch1' */
        /*@>17d6f*/VCU_B./*@>17ff1*/Switch1_d/*@>734b*/ = /*@>17d75*/VCU_B./*@>17ff4*/uDLookupTable;
 80032d4:	4b22      	ldr	r3, [pc, #136]	; (8003360 <FUNC_PumpAndFans+0x110>)
 80032d6:	e9d3 239a 	ldrd	r2, r3, [r3, #616]	; 0x268
 80032da:	4921      	ldr	r1, [pc, #132]	; (8003360 <FUNC_PumpAndFans+0x110>)
 80032dc:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
    }
    /* Saturate: '<S120>/Saturation' */
    /*@>17d81*/VCU_B./*@>17ffa*/Switch_j/*@>731c*/ = /*@>17d87*/VCU_B./*@>17ffd*/Switch1_d;
 80032e0:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <FUNC_PumpAndFans+0x110>)
 80032e2:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 80032e6:	491e      	ldr	r1, [pc, #120]	; (8003360 <FUNC_PumpAndFans+0x110>)
 80032e8:	e9c1 2394 	strd	r2, r3, [r1, #592]	; 0x250
}
/* End of Switch: '<S120>/Switch' */

/* Saturate: '<S120>/Saturation' */
/*@>1797a*/if (/*@>17d7b*/VCU_B./*@>17ff7*/Switch_j/*@>17975*/ > /*@>17a04*/0.9999) {
 80032ec:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <FUNC_PumpAndFans+0x110>)
 80032ee:	e9d3 2394 	ldrd	r2, r3, [r3, #592]	; 0x250
 80032f2:	4610      	mov	r0, r2
 80032f4:	4619      	mov	r1, r3
 80032f6:	a318      	add	r3, pc, #96	; (adr r3, 8003358 <FUNC_PumpAndFans+0x108>)
 80032f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fc:	f00b fe44 	bl	800ef88 <__aeabi_dcmpgt>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d006      	beq.n	8003314 <FUNC_PumpAndFans+0xc4>
    /*@>17d93*/VCU_B./*@>18003*/Saturation/*@>1797c*/ = /*@>17a0a*/0.9999;
 8003306:	4916      	ldr	r1, [pc, #88]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003308:	a313      	add	r3, pc, #76	; (adr r3, 8003358 <FUNC_PumpAndFans+0x108>)
 800330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330e:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
 8003312:	e01b      	b.n	800334c <FUNC_PumpAndFans+0xfc>
} else /*@>1797d*/if (/*@>17d8d*/VCU_B./*@>18000*/Switch_j/*@>17972*/ < /*@>17a06*/0.0) {
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003316:	e9d3 2394 	ldrd	r2, r3, [r3, #592]	; 0x250
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	f00b fe11 	bl	800ef4c <__aeabi_dcmplt>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <FUNC_PumpAndFans+0xf0>
    /*@>17da5*/VCU_B./*@>1800c*/Saturation/*@>1797f*/ = /*@>17a08*/0.0;
 8003330:	490b      	ldr	r1, [pc, #44]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
 800333e:	e005      	b.n	800334c <FUNC_PumpAndFans+0xfc>
} else {
    /*@>17d99*/VCU_B./*@>18006*/Saturation/*@>17979*/ = /*@>17d9f*/VCU_B./*@>18009*/Switch_j;
 8003340:	4b07      	ldr	r3, [pc, #28]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003342:	e9d3 2394 	ldrd	r2, r3, [r3, #592]	; 0x250
 8003346:	4906      	ldr	r1, [pc, #24]	; (8003360 <FUNC_PumpAndFans+0x110>)
 8003348:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258


        
    
      
          }
 800334c:	3704      	adds	r7, #4
 800334e:	46bd      	mov	sp, r7
 8003350:	bd90      	pop	{r4, r7, pc}
 8003352:	bf00      	nop
 8003354:	f3af 8000 	nop.w
 8003358:	48e8a71e 	.word	0x48e8a71e
 800335c:	3fefff2e 	.word	0x3fefff2e
 8003360:	200008c8 	.word	0x200008c8
 8003364:	3ff00000 	.word	0x3ff00000
 8003368:	0800f3d0 	.word	0x0800f3d0
 800336c:	0800f408 	.word	0x0800f408
 8003370:	0800f328 	.word	0x0800f328
 8003374:	0800f510 	.word	0x0800f510

08003378 <FUNC_Safety>:
          /* Output and update for atomic system: '<Root>/Safety ' */
      
              
  
        void FUNC_Safety(void)
  {
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 *  Constant: '<S5>/Constant6'
 *  Memory: '<S129>/Memory'
 *  RelationalOperator: '<S5>/Relational Operator3'
 *  RelationalOperator: '<S5>/Relational Operator4'
 */
/*@>18a1c*/VCU_B./*@>18ca7*/RelationalOperator3/*@>737b*/ = (/*@>18a22*/VCU_B./*@>18caa*/Sensitivity1538mVbar/*@>737a*/ > /*@>18660*/200.0);
 800337e:	4b3f      	ldr	r3, [pc, #252]	; (800347c <FUNC_Safety+0x104>)
 8003380:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	2101      	movs	r1, #1
 800338a:	460c      	mov	r4, r1
 800338c:	4610      	mov	r0, r2
 800338e:	4619      	mov	r1, r3
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	4b3a      	ldr	r3, [pc, #232]	; (8003480 <FUNC_Safety+0x108>)
 8003396:	f00b fdf7 	bl	800ef88 <__aeabi_dcmpgt>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <FUNC_Safety+0x2c>
 80033a0:	2300      	movs	r3, #0
 80033a2:	461c      	mov	r4, r3
 80033a4:	b2e3      	uxtb	r3, r4
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b34      	ldr	r3, [pc, #208]	; (800347c <FUNC_Safety+0x104>)
 80033aa:	f883 2775 	strb.w	r2, [r3, #1909]	; 0x775
/*@>18a28*/VCU_B./*@>18cad*/RelationalOperator4/*@>737f*/ = (/*@>18661*/30.0/*@>737e*/ > /*@>18a2e*/VCU_B./*@>18cb0*/Sensitivity1538mVbar);
 80033ae:	4b33      	ldr	r3, [pc, #204]	; (800347c <FUNC_Safety+0x104>)
 80033b0:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	2101      	movs	r1, #1
 80033ba:	460c      	mov	r4, r1
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	4b2f      	ldr	r3, [pc, #188]	; (8003484 <FUNC_Safety+0x10c>)
 80033c6:	f00b fdc1 	bl	800ef4c <__aeabi_dcmplt>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <FUNC_Safety+0x5c>
 80033d0:	2300      	movs	r3, #0
 80033d2:	461c      	mov	r4, r3
 80033d4:	b2e3      	uxtb	r3, r4
 80033d6:	461a      	mov	r2, r3
 80033d8:	4b28      	ldr	r3, [pc, #160]	; (800347c <FUNC_Safety+0x104>)
 80033da:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776
/*@>18a34*/VCU_B./*@>18cb3*/Memory_dt/*@>7381*/ = /*@>18b71*/VCU_DW./*@>18cdd*/Memory_PreviousInput_kv;
 80033de:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <FUNC_Safety+0x110>)
 80033e0:	f893 2146 	ldrb.w	r2, [r3, #326]	; 0x146
 80033e4:	4b25      	ldr	r3, [pc, #148]	; (800347c <FUNC_Safety+0x104>)
 80033e6:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
/*@>18665*/rowIdx/*@>184a4*/ = /*@>18a3a*/VCU_B./*@>18cb6*/RelationalOperator3;
 80033ea:	4b24      	ldr	r3, [pc, #144]	; (800347c <FUNC_Safety+0x104>)
 80033ec:	f893 3775 	ldrb.w	r3, [r3, #1909]	; 0x775
 80033f0:	607b      	str	r3, [r7, #4]
/*@>18669*/rowIdx/*@>184cb*/ = /*@>186c4*/(int32_T)((/*@>186c1*/(uint32_T)/*@>1866b*/rowIdx/*@>186a6*/ << /*@>1866d*/1)/*@>186a4*/ + /*@>18a40*/VCU_B./*@>18cb9*/RelationalOperator4);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4a21      	ldr	r2, [pc, #132]	; (800347c <FUNC_Safety+0x104>)
 80033f8:	f892 2776 	ldrb.w	r2, [r2, #1910]	; 0x776
 80033fc:	4413      	add	r3, r2
 80033fe:	607b      	str	r3, [r7, #4]
/*@>18670*/rowIdx/*@>184f2*/ = /*@>186cc*/(int32_T)((/*@>186c9*/(uint32_T)/*@>18672*/rowIdx/*@>1869c*/ << /*@>18674*/1)/*@>1869a*/ + /*@>18a46*/VCU_B./*@>18cbc*/Memory_dt);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4a1d      	ldr	r2, [pc, #116]	; (800347c <FUNC_Safety+0x104>)
 8003406:	f892 2777 	ldrb.w	r2, [r2, #1911]	; 0x777
 800340a:	4413      	add	r3, r2
 800340c:	607b      	str	r3, [r7, #4]
/*@>18a4c*/VCU_B./*@>18cbf*/Logic_d/*@>18508*/[/*@>18679*/0U]/*@>18507*/ = /*@>18ad3*/VCU_ConstP./*@>18cd7*/pooled37/*@>18805*/[/*@>18800*/(uint32_T)/*@>18802*/rowIdx];
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a1e      	ldr	r2, [pc, #120]	; (800348c <FUNC_Safety+0x114>)
 8003412:	4413      	add	r3, r2
 8003414:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003418:	4b18      	ldr	r3, [pc, #96]	; (800347c <FUNC_Safety+0x104>)
 800341a:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
/*@>18a52*/VCU_B./*@>18cc2*/Logic_d/*@>1851b*/[/*@>1867e*/1U]/*@>1851a*/ = /*@>18ad9*/VCU_ConstP./*@>18cda*/pooled37/*@>1880e*/[/*@>1880a*/rowIdx/*@>18807*/ + /*@>1880b*/8U];
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3308      	adds	r3, #8
 8003422:	4a1a      	ldr	r2, [pc, #104]	; (800348c <FUNC_Safety+0x114>)
 8003424:	4413      	add	r3, r2
 8003426:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <FUNC_Safety+0x104>)
 800342c:	f883 2779 	strb.w	r2, [r3, #1913]	; 0x779
/* RelationalOperator: '<S127>/Compare' incorporates:
 *  Constant: '<S127>/Constant'
 */
/*@>18a58*/VCU_B./*@>18cc5*/Compare_dm/*@>7386*/ = (/*@>18a5e*/VCU_B./*@>18cc8*/DataStoreRead3_a/*@>7385*/ == /*@>18662*/2);
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <FUNC_Safety+0x104>)
 8003432:	f893 36b7 	ldrb.w	r3, [r3, #1719]	; 0x6b7
 8003436:	2b02      	cmp	r3, #2
 8003438:	bf0c      	ite	eq
 800343a:	2301      	moveq	r3, #1
 800343c:	2300      	movne	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	4b0e      	ldr	r3, [pc, #56]	; (800347c <FUNC_Safety+0x104>)
 8003444:	f883 277a 	strb.w	r2, [r3, #1914]	; 0x77a
/* Logic: '<S5>/Logical Operator1' */
/*@>18a64*/VCU_B./*@>18ccb*/LogicalOperator1_a/*@>738c*/ = (/*@>18a6a*/VCU_B./*@>18cce*/Logic_d/*@>18813*/[/*@>18810*/0]/*@>738b*/ || /*@>18a70*/VCU_B./*@>18cd1*/Compare_dm);
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <FUNC_Safety+0x104>)
 800344a:	f893 3778 	ldrb.w	r3, [r3, #1912]	; 0x778
 800344e:	2b00      	cmp	r3, #0
 8003450:	d104      	bne.n	800345c <FUNC_Safety+0xe4>
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <FUNC_Safety+0x104>)
 8003454:	f893 377a 	ldrb.w	r3, [r3, #1914]	; 0x77a
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <FUNC_Safety+0xe8>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <FUNC_Safety+0xea>
 8003460:	2300      	movs	r3, #0
 8003462:	b2da      	uxtb	r2, r3
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <FUNC_Safety+0x104>)
 8003466:	f883 277b 	strb.w	r2, [r3, #1915]	; 0x77b
/* Update for Memory: '<S129>/Memory' */
/*@>18b77*/VCU_DW./*@>18ce0*/Memory_PreviousInput_kv/*@>73aa*/ = /*@>18a76*/VCU_B./*@>18cd4*/Logic_d/*@>18818*/[/*@>18815*/0];
 800346a:	4b04      	ldr	r3, [pc, #16]	; (800347c <FUNC_Safety+0x104>)
 800346c:	f893 2778 	ldrb.w	r2, [r3, #1912]	; 0x778
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <FUNC_Safety+0x110>)
 8003472:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146


        
    
      
          }
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bd90      	pop	{r4, r7, pc}
 800347c:	200008c8 	.word	0x200008c8
 8003480:	40690000 	.word	0x40690000
 8003484:	403e0000 	.word	0x403e0000
 8003488:	20001058 	.word	0x20001058
 800348c:	0800f1e8 	.word	0x0800f1e8

08003490 <FUNC_Transmission_Init>:
    
	      /* System initialize for atomic system: '<Root>/Transmission' */
          
  
        void FUNC_Transmission_Init(void)
  {
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0



                              /* SystemInitialize for Enabled SubSystem: '<S7>/LC_jr19' */
/* InitializeConditions for S-Function (sdspcount2): '<S146>/Counter1' */
/*@>26872*/VCU_DW./*@>28319*/Counter1_Count_k/*@>7433*/ = /*@>282ec*/0U;
 8003494:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <FUNC_Transmission_Init+0x3c>)
 8003496:	2200      	movs	r2, #0
 8003498:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
/* InitializeConditions for S-Function (sdspcount2): '<S145>/Counter' */
/*@>26878*/VCU_DW./*@>2831c*/Counter_Count_m/*@>743f*/ = /*@>282ef*/0U;
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <FUNC_Transmission_Init+0x3c>)
 800349e:	2200      	movs	r2, #0
 80034a0:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
/* InitializeConditions for S-Function (sdspcount2): '<S146>/Counter' */
/*@>2687e*/VCU_DW./*@>2831f*/Counter_Count_a/*@>744b*/ = /*@>282f2*/0U;
 80034a4:	4b09      	ldr	r3, [pc, #36]	; (80034cc <FUNC_Transmission_Init+0x3c>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
/* End of SystemInitialize for SubSystem: '<S7>/LC_jr19' */

/* SystemInitialize for Enabled SubSystem: '<S7>/semi_auto_jr18' */
/* InitializeConditions for S-Function (sdspcount2): '<S201>/Counter1' */
/*@>26884*/VCU_DW./*@>28322*/Counter1_Count/*@>7457*/ = /*@>282f5*/0U;
 80034ac:	4b07      	ldr	r3, [pc, #28]	; (80034cc <FUNC_Transmission_Init+0x3c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
/* InitializeConditions for S-Function (sdspcount2): '<S200>/Counter' */
/*@>2688a*/VCU_DW./*@>28325*/Counter_Count/*@>7463*/ = /*@>282f8*/0U;
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <FUNC_Transmission_Init+0x3c>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
/* InitializeConditions for S-Function (sdspcount2): '<S201>/Counter' */
/*@>26890*/VCU_DW./*@>28328*/Counter_Count_i/*@>746f*/ = /*@>282fb*/0U;
 80034bc:	4b03      	ldr	r3, [pc, #12]	; (80034cc <FUNC_Transmission_Init+0x3c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
    
  



          }
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	20001058 	.word	0x20001058

080034d0 <FUNC_Transmission>:
          /* Output and update for atomic system: '<Root>/Transmission' */
      
              
  
        void FUNC_Transmission(void)
  {
 80034d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034d2:	b089      	sub	sp, #36	; 0x24
 80034d4:	af02      	add	r7, sp, #8
  



                                /* DataTypeConversion: '<S7>/Data Type Conversion' */
/*@>21cf8*/tmp_0/*@>21cfa*/ = /*@>2422b*/floor(/*@>2560d*/VCU_B./*@>2939a*/STW_transmission_mode);
 80034d6:	4b8e      	ldr	r3, [pc, #568]	; (8003710 <FUNC_Transmission+0x240>)
 80034d8:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 80034dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	f00a fecc 	bl	800e280 <floor>
 80034e8:	e9c7 0102 	strd	r0, r1, [r7, #8]
/*@>21d18*/if (/*@>2422d*/rtIsNaN(/*@>21cfc*/tmp_0)/*@>21d06*/ || /*@>2422f*/rtIsInf(/*@>21d01*/tmp_0)) {
 80034ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034f0:	f002 ffba 	bl	8006468 <rtIsNaN>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <FUNC_Transmission+0x38>
 80034fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034fe:	f002 ff8f 	bl	8006420 <rtIsInf>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d006      	beq.n	8003516 <FUNC_Transmission+0x46>
    /*@>21d09*/tmp_0/*@>21d0b*/ = /*@>21d08*/0.0;
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003514:	e008      	b.n	8003528 <FUNC_Transmission+0x58>
} else {
    /*@>21d14*/tmp_0/*@>21d16*/ = /*@>24231*/fmod(/*@>21d0d*/tmp_0, /*@>21d11*/256.0);
 8003516:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	4b7d      	ldr	r3, [pc, #500]	; (8003714 <FUNC_Transmission+0x244>)
 8003520:	f00a ff36 	bl	800e390 <fmod>
 8003524:	e9c7 0102 	strd	r0, r1, [r7, #8]
}
/*@>25613*/VCU_B./*@>2939d*/DataTypeConversion_cg/*@>747c*/ = /*@>21e96*/(int8_T)(/*@>21d1f*/tmp_0/*@>21d22*/ < /*@>21d1e*/0.0/*@>21d22*/ ? (int32_T)/*@>21d34*/(int8_T)-/*@<21d33*//*@>21d28*/(int8_T)/*@>21d36*/(uint8_T)-/*@<21d26*//*@>21d23*/tmp_0 : (int32_T)/*@>21d2e*/(int8_T)/*@>21d39*/(uint8_T)/*@>21d2a*/tmp_0);
 8003528:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	f00b fd0a 	bl	800ef4c <__aeabi_dcmplt>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00d      	beq.n	800355a <FUNC_Transmission+0x8a>
 800353e:	68bc      	ldr	r4, [r7, #8]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003546:	4620      	mov	r0, r4
 8003548:	4629      	mov	r1, r5
 800354a:	f00b fd27 	bl	800ef9c <__aeabi_d2uiz>
 800354e:	4603      	mov	r3, r0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	425b      	negs	r3, r3
 8003554:	b2db      	uxtb	r3, r3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	e006      	b.n	8003568 <FUNC_Transmission+0x98>
 800355a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800355e:	f00b fd1d 	bl	800ef9c <__aeabi_d2uiz>
 8003562:	4603      	mov	r3, r0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	4a69      	ldr	r2, [pc, #420]	; (8003710 <FUNC_Transmission+0x240>)
 800356a:	f882 36c8 	strb.w	r3, [r2, #1736]	; 0x6c8
/* End of DataTypeConversion: '<S7>/Data Type Conversion' */

/* RelationalOperator: '<S136>/Compare' incorporates:
 *  Constant: '<S136>/Constant'
 */
/*@>25619*/VCU_B./*@>293a0*/Compare/*@>7480*/ = (/*@>2561f*/VCU_B./*@>293a3*/DataTypeConversion_cg/*@>747f*/ == /*@>21760*/3);
 800356e:	4b68      	ldr	r3, [pc, #416]	; (8003710 <FUNC_Transmission+0x240>)
 8003570:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8003574:	b25b      	sxtb	r3, r3
 8003576:	2b03      	cmp	r3, #3
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	4b63      	ldr	r3, [pc, #396]	; (8003710 <FUNC_Transmission+0x240>)
 8003584:	f883 26c9 	strb.w	r2, [r3, #1737]	; 0x6c9
/* Outputs for Enabled SubSystem: '<S7>/LC_jr19' incorporates:
 *  EnablePort: '<S137>/Enable'
 */
/*@>7482*/if (/*@>25625*/VCU_B./*@>293a6*/Compare) {
 8003588:	4b61      	ldr	r3, [pc, #388]	; (8003710 <FUNC_Transmission+0x240>)
 800358a:	f893 36c9 	ldrb.w	r3, [r3, #1737]	; 0x6c9
 800358e:	2b00      	cmp	r3, #0
 8003590:	f001 8027 	beq.w	80045e2 <FUNC_Transmission+0x1112>
    /* Memory: '<S148>/Memory' */
    /*@>2562b*/VCU_B./*@>293a9*/Memory_dj/*@>761d*/ = /*@>26896*/VCU_DW./*@>29c58*/Memory_PreviousInput_g;
 8003594:	4b60      	ldr	r3, [pc, #384]	; (8003718 <FUNC_Transmission+0x248>)
 8003596:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 800359a:	4b5d      	ldr	r3, [pc, #372]	; (8003710 <FUNC_Transmission+0x240>)
 800359c:	f883 2721 	strb.w	r2, [r3, #1825]	; 0x721
    /* CombinatorialLogic: '<S190>/Logic' incorporates:
 *  RelationalOperator: '<S148>/GreaterThan'
 */
    /*@>2563d*/VCU_B./*@>293b2*/GreaterThan_l/*@>7621*/ = (/*@>21ea4*/(int32_T)/*@>25643*/VCU_B./*@>293b5*/LC_dash_bit/*@>7620*/ > /*@>21ea6*/(int32_T)/*@>25649*/VCU_B./*@>293b8*/Memory_dj);
 80035a0:	4b5b      	ldr	r3, [pc, #364]	; (8003710 <FUNC_Transmission+0x240>)
 80035a2:	f893 2783 	ldrb.w	r2, [r3, #1923]	; 0x783
 80035a6:	4b5a      	ldr	r3, [pc, #360]	; (8003710 <FUNC_Transmission+0x240>)
 80035a8:	f893 3721 	ldrb.w	r3, [r3, #1825]	; 0x721
 80035ac:	429a      	cmp	r2, r3
 80035ae:	bf8c      	ite	hi
 80035b0:	2301      	movhi	r3, #1
 80035b2:	2300      	movls	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	461a      	mov	r2, r3
 80035b8:	4b55      	ldr	r3, [pc, #340]	; (8003710 <FUNC_Transmission+0x240>)
 80035ba:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722
    /* Logic: '<S148>/Logical Operator2' */
    /*@>2565b*/VCU_B./*@>293c1*/LogicalOperator2_m/*@>7625*/ = !/*@<7624*//*@>25661*/VCU_B./*@>293c4*/LC_dash_bit;
 80035be:	4b54      	ldr	r3, [pc, #336]	; (8003710 <FUNC_Transmission+0x240>)
 80035c0:	f893 3783 	ldrb.w	r3, [r3, #1923]	; 0x783
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	4b4f      	ldr	r3, [pc, #316]	; (8003710 <FUNC_Transmission+0x240>)
 80035d2:	f883 2723 	strb.w	r2, [r3, #1827]	; 0x723
    /* Memory: '<S148>/Memory1' */
    /*@>25679*/VCU_B./*@>293d0*/Memory1_a/*@>7627*/ = /*@>2689c*/VCU_DW./*@>29c5b*/Memory1_PreviousInput_p;
 80035d6:	4b50      	ldr	r3, [pc, #320]	; (8003718 <FUNC_Transmission+0x248>)
 80035d8:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 80035dc:	4b4c      	ldr	r3, [pc, #304]	; (8003710 <FUNC_Transmission+0x240>)
 80035de:	f883 2724 	strb.w	r2, [r3, #1828]	; 0x724
    /* RelationalOperator: '<S148>/Relational Operator' incorporates:
 *  Constant: '<S148>/Constant'
 */
    /*@>25685*/VCU_B./*@>293d6*/RelationalOperator_k/*@>762b*/ = (/*@>2568b*/VCU_B./*@>293d9*/Sensitivity1538mVbar/*@>762a*/ > /*@>21763*/3.0);
 80035e2:	4b4b      	ldr	r3, [pc, #300]	; (8003710 <FUNC_Transmission+0x240>)
 80035e4:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	2101      	movs	r1, #1
 80035ee:	460c      	mov	r4, r1
 80035f0:	4610      	mov	r0, r2
 80035f2:	4619      	mov	r1, r3
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	4b48      	ldr	r3, [pc, #288]	; (800371c <FUNC_Transmission+0x24c>)
 80035fa:	f00b fcc5 	bl	800ef88 <__aeabi_dcmpgt>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <FUNC_Transmission+0x138>
 8003604:	2300      	movs	r3, #0
 8003606:	461c      	mov	r4, r3
 8003608:	b2e3      	uxtb	r3, r4
 800360a:	461a      	mov	r2, r3
 800360c:	4b40      	ldr	r3, [pc, #256]	; (8003710 <FUNC_Transmission+0x240>)
 800360e:	f883 2725 	strb.w	r2, [r3, #1829]	; 0x725
    /* RelationalOperator: '<S148>/Relational Operator1' incorporates:
 *  Constant: '<S148>/Constant'
 */
    /*@>25697*/VCU_B./*@>293df*/RelationalOperator1_d/*@>762f*/ = (/*@>21764*/3.0/*@>762e*/ < /*@>2569d*/VCU_B./*@>293e2*/Add1_m);
 8003612:	4b3f      	ldr	r3, [pc, #252]	; (8003710 <FUNC_Transmission+0x240>)
 8003614:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	2101      	movs	r1, #1
 800361e:	460c      	mov	r4, r1
 8003620:	4610      	mov	r0, r2
 8003622:	4619      	mov	r1, r3
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	4b3c      	ldr	r3, [pc, #240]	; (800371c <FUNC_Transmission+0x24c>)
 800362a:	f00b fcad 	bl	800ef88 <__aeabi_dcmpgt>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <FUNC_Transmission+0x168>
 8003634:	2300      	movs	r3, #0
 8003636:	461c      	mov	r4, r3
 8003638:	b2e3      	uxtb	r3, r4
 800363a:	461a      	mov	r2, r3
 800363c:	4b34      	ldr	r3, [pc, #208]	; (8003710 <FUNC_Transmission+0x240>)
 800363e:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726
    /* Logic: '<S148>/Logical Operator' */
    /*@>256c1*/VCU_B./*@>293f4*/Brakelight_n/*@>7635*/ = (/*@>256c7*/VCU_B./*@>293f7*/RelationalOperator_k/*@>7634*/ || /*@>256cd*/VCU_B./*@>293fa*/RelationalOperator1_d);
 8003642:	4b33      	ldr	r3, [pc, #204]	; (8003710 <FUNC_Transmission+0x240>)
 8003644:	f893 3725 	ldrb.w	r3, [r3, #1829]	; 0x725
 8003648:	2b00      	cmp	r3, #0
 800364a:	d104      	bne.n	8003656 <FUNC_Transmission+0x186>
 800364c:	4b30      	ldr	r3, [pc, #192]	; (8003710 <FUNC_Transmission+0x240>)
 800364e:	f893 3726 	ldrb.w	r3, [r3, #1830]	; 0x726
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <FUNC_Transmission+0x18a>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <FUNC_Transmission+0x18c>
 800365a:	2300      	movs	r3, #0
 800365c:	b2da      	uxtb	r2, r3
 800365e:	4b2c      	ldr	r3, [pc, #176]	; (8003710 <FUNC_Transmission+0x240>)
 8003660:	f883 2727 	strb.w	r2, [r3, #1831]	; 0x727
    /* RelationalOperator: '<S148>/GreaterThan1' */
    /*@>256e5*/VCU_B./*@>29406*/GreaterThan1_d/*@>7639*/ = (/*@>21eca*/(int32_T)/*@>256eb*/VCU_B./*@>29409*/Memory1_a/*@>7638*/ > /*@>21ecc*/(int32_T)/*@>256f1*/VCU_B./*@>2940c*/Brakelight_n);
 8003664:	4b2a      	ldr	r3, [pc, #168]	; (8003710 <FUNC_Transmission+0x240>)
 8003666:	f893 2724 	ldrb.w	r2, [r3, #1828]	; 0x724
 800366a:	4b29      	ldr	r3, [pc, #164]	; (8003710 <FUNC_Transmission+0x240>)
 800366c:	f893 3727 	ldrb.w	r3, [r3, #1831]	; 0x727
 8003670:	429a      	cmp	r2, r3
 8003672:	bf8c      	ite	hi
 8003674:	2301      	movhi	r3, #1
 8003676:	2300      	movls	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	4b24      	ldr	r3, [pc, #144]	; (8003710 <FUNC_Transmission+0x240>)
 800367e:	f883 2728 	strb.w	r2, [r3, #1832]	; 0x728
    /* CombinatorialLogic: '<S190>/Logic' incorporates:
 *  Logic: '<S148>/Logical Operator1'
 *  Memory: '<S190>/Memory'
 */
    /*@>25703*/VCU_B./*@>29415*/LogicalOperator1_o/*@>763f*/ = (/*@>25709*/VCU_B./*@>29418*/LogicalOperator2_m/*@>763e*/ || /*@>2570f*/VCU_B./*@>2941b*/GreaterThan1_d);
 8003682:	4b23      	ldr	r3, [pc, #140]	; (8003710 <FUNC_Transmission+0x240>)
 8003684:	f893 3723 	ldrb.w	r3, [r3, #1827]	; 0x723
 8003688:	2b00      	cmp	r3, #0
 800368a:	d104      	bne.n	8003696 <FUNC_Transmission+0x1c6>
 800368c:	4b20      	ldr	r3, [pc, #128]	; (8003710 <FUNC_Transmission+0x240>)
 800368e:	f893 3728 	ldrb.w	r3, [r3, #1832]	; 0x728
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <FUNC_Transmission+0x1ca>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <FUNC_Transmission+0x1cc>
 800369a:	2300      	movs	r3, #0
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4b1c      	ldr	r3, [pc, #112]	; (8003710 <FUNC_Transmission+0x240>)
 80036a0:	f883 2729 	strb.w	r2, [r3, #1833]	; 0x729
    /*@>25739*/VCU_B./*@>29430*/Memory_aw/*@>7641*/ = /*@>268ae*/VCU_DW./*@>29c64*/Memory_PreviousInput_gi;
 80036a4:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <FUNC_Transmission+0x248>)
 80036a6:	f893 213f 	ldrb.w	r2, [r3, #319]	; 0x13f
 80036aa:	4b19      	ldr	r3, [pc, #100]	; (8003710 <FUNC_Transmission+0x240>)
 80036ac:	f883 272a 	strb.w	r2, [r3, #1834]	; 0x72a
    /*@>217f2*/rowIdx/*@>1ed0c*/ = /*@>2577b*/VCU_B./*@>29451*/GreaterThan_l;
 80036b0:	4b17      	ldr	r3, [pc, #92]	; (8003710 <FUNC_Transmission+0x240>)
 80036b2:	f893 3722 	ldrb.w	r3, [r3, #1826]	; 0x722
 80036b6:	617b      	str	r3, [r7, #20]
    /*@>217f6*/rowIdx/*@>1ed33*/ = /*@>21f10*/(int32_T)((/*@>21f0d*/(uint32_T)/*@>217f8*/rowIdx/*@>21cf0*/ << /*@>217fa*/1)/*@>21cee*/ + /*@>2579f*/VCU_B./*@>29463*/LogicalOperator1_o);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4a14      	ldr	r2, [pc, #80]	; (8003710 <FUNC_Transmission+0x240>)
 80036be:	f892 2729 	ldrb.w	r2, [r2, #1833]	; 0x729
 80036c2:	4413      	add	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]
    /*@>217fd*/rowIdx/*@>1ed5a*/ = /*@>21f23*/(int32_T)((/*@>21f20*/(uint32_T)/*@>217ff*/rowIdx/*@>21ce6*/ << /*@>21801*/1)/*@>21ce4*/ + /*@>257c9*/VCU_B./*@>29478*/Memory_aw);
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	4a11      	ldr	r2, [pc, #68]	; (8003710 <FUNC_Transmission+0x240>)
 80036cc:	f892 272a 	ldrb.w	r2, [r2, #1834]	; 0x72a
 80036d0:	4413      	add	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]
    /*@>25823*/VCU_B./*@>294a5*/Logic_b/*@>1ed70*/[/*@>21806*/0U]/*@>1ed6f*/ = /*@>26720*/VCU_ConstP./*@>29bf8*/pooled37/*@>24e70*/[/*@>24e6b*/(uint32_T)/*@>24e6d*/rowIdx];
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	4a12      	ldr	r2, [pc, #72]	; (8003720 <FUNC_Transmission+0x250>)
 80036d8:	4413      	add	r3, r2
 80036da:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 80036de:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <FUNC_Transmission+0x240>)
 80036e0:	f883 272b 	strb.w	r2, [r3, #1835]	; 0x72b
    /*@>2583b*/VCU_B./*@>294b1*/Logic_b/*@>1ed83*/[/*@>2180b*/1U]/*@>1ed82*/ = /*@>26726*/VCU_ConstP./*@>29bfb*/pooled37/*@>24e79*/[/*@>24e75*/rowIdx/*@>24e72*/ + /*@>24e76*/8U];
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	3308      	adds	r3, #8
 80036e8:	4a0d      	ldr	r2, [pc, #52]	; (8003720 <FUNC_Transmission+0x250>)
 80036ea:	4413      	add	r3, r2
 80036ec:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 80036f0:	4b07      	ldr	r3, [pc, #28]	; (8003710 <FUNC_Transmission+0x240>)
 80036f2:	f883 272c 	strb.w	r2, [r3, #1836]	; 0x72c
    /* Logic: '<S148>/Logical Operator3' */
    /*@>25859*/VCU_B./*@>294c0*/LogicalOperator3_f/*@>7648*/ = (/*@>2585f*/VCU_B./*@>294c3*/Logic_b/*@>24e7e*/[/*@>24e7b*/0]/*@>7647*/ && /*@>25865*/VCU_B./*@>294c6*/Brakelight_n);
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <FUNC_Transmission+0x240>)
 80036f8:	f893 372b 	ldrb.w	r3, [r3, #1835]	; 0x72b
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d011      	beq.n	8003724 <FUNC_Transmission+0x254>
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <FUNC_Transmission+0x240>)
 8003702:	f893 3727 	ldrb.w	r3, [r3, #1831]	; 0x727
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00c      	beq.n	8003724 <FUNC_Transmission+0x254>
 800370a:	2301      	movs	r3, #1
 800370c:	e00b      	b.n	8003726 <FUNC_Transmission+0x256>
 800370e:	bf00      	nop
 8003710:	200008c8 	.word	0x200008c8
 8003714:	40700000 	.word	0x40700000
 8003718:	20001058 	.word	0x20001058
 800371c:	40080000 	.word	0x40080000
 8003720:	0800f1e8 	.word	0x0800f1e8
 8003724:	2300      	movs	r3, #0
 8003726:	b2da      	uxtb	r2, r3
 8003728:	4b93      	ldr	r3, [pc, #588]	; (8003978 <FUNC_Transmission+0x4a8>)
 800372a:	f883 272d 	strb.w	r2, [r3, #1837]	; 0x72d
    /* DataTypeConversion: '<S137>/Data Type Conversion10' */
    /*@>258b3*/VCU_B./*@>294ed*/LC_active_bit_a/*@>764b*/ = /*@>258b9*/VCU_B./*@>294f0*/LogicalOperator3_f;
 800372e:	4b92      	ldr	r3, [pc, #584]	; (8003978 <FUNC_Transmission+0x4a8>)
 8003730:	f893 272d 	ldrb.w	r2, [r3, #1837]	; 0x72d
 8003734:	4b90      	ldr	r3, [pc, #576]	; (8003978 <FUNC_Transmission+0x4a8>)
 8003736:	f883 272e 	strb.w	r2, [r3, #1838]	; 0x72e
    /* CombinatorialLogic: '<S175>/Logic' incorporates:
 *  Delay: '<S145>/Delay'
 *  Memory: '<S175>/Memory'
 *  UnitDelay: '<S145>/Unit Delay1'
 */
    /*@>258d1*/VCU_B./*@>294fc*/UnitDelay1_o/*@>7d6b*/ = /*@>268ba*/VCU_DW./*@>29c6a*/UnitDelay1_DSTATE_p;
 800373a:	4b90      	ldr	r3, [pc, #576]	; (800397c <FUNC_Transmission+0x4ac>)
 800373c:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
 8003740:	4b8d      	ldr	r3, [pc, #564]	; (8003978 <FUNC_Transmission+0x4a8>)
 8003742:	f883 272f 	strb.w	r2, [r3, #1839]	; 0x72f
    /*@>258e9*/VCU_B./*@>29508*/Delay_e/*@>7d79*/ = /*@>268c0*/VCU_DW./*@>29c6d*/Delay_DSTATE_j/*@>24e8a*/[/*@>24e87*/0];
 8003746:	4b8d      	ldr	r3, [pc, #564]	; (800397c <FUNC_Transmission+0x4ac>)
 8003748:	f893 20de 	ldrb.w	r2, [r3, #222]	; 0xde
 800374c:	4b8a      	ldr	r3, [pc, #552]	; (8003978 <FUNC_Transmission+0x4a8>)
 800374e:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
    /*@>25931*/VCU_B./*@>2952c*/Memory_lj/*@>764f*/ = /*@>268c6*/VCU_DW./*@>29c70*/Memory_PreviousInput_pa;
 8003752:	4b8a      	ldr	r3, [pc, #552]	; (800397c <FUNC_Transmission+0x4ac>)
 8003754:	f893 2140 	ldrb.w	r2, [r3, #320]	; 0x140
 8003758:	4b87      	ldr	r3, [pc, #540]	; (8003978 <FUNC_Transmission+0x4a8>)
 800375a:	f883 2731 	strb.w	r2, [r3, #1841]	; 0x731
    /*@>2182a*/rowIdx/*@>1ee5a*/ = /*@>25949*/VCU_B./*@>29538*/UnitDelay1_o;
 800375e:	4b86      	ldr	r3, [pc, #536]	; (8003978 <FUNC_Transmission+0x4a8>)
 8003760:	f893 372f 	ldrb.w	r3, [r3, #1839]	; 0x72f
 8003764:	617b      	str	r3, [r7, #20]
    /*@>2182e*/rowIdx/*@>1ee81*/ = /*@>21fab*/(int32_T)((/*@>21fa8*/(uint32_T)/*@>21830*/rowIdx/*@>21cdb*/ << /*@>21832*/1)/*@>21cd9*/ + /*@>25973*/VCU_B./*@>2954d*/Delay_e);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4a83      	ldr	r2, [pc, #524]	; (8003978 <FUNC_Transmission+0x4a8>)
 800376c:	f892 2730 	ldrb.w	r2, [r2, #1840]	; 0x730
 8003770:	4413      	add	r3, r2
 8003772:	617b      	str	r3, [r7, #20]
    /*@>21835*/rowIdx/*@>1eea8*/ = /*@>21fc6*/(int32_T)((/*@>21fc3*/(uint32_T)/*@>21837*/rowIdx/*@>21cd1*/ << /*@>21839*/1)/*@>21ccf*/ + /*@>259bb*/VCU_B./*@>29571*/Memory_lj);
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4a7f      	ldr	r2, [pc, #508]	; (8003978 <FUNC_Transmission+0x4a8>)
 800377a:	f892 2731 	ldrb.w	r2, [r2, #1841]	; 0x731
 800377e:	4413      	add	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
    /*@>259d3*/VCU_B./*@>2957d*/Logic_g/*@>1eebe*/[/*@>2183e*/0U]/*@>1eebd*/ = /*@>26744*/VCU_ConstP./*@>29c0a*/pooled37/*@>24ea4*/[/*@>24e9f*/(uint32_T)/*@>24ea1*/rowIdx];
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	4a7e      	ldr	r2, [pc, #504]	; (8003980 <FUNC_Transmission+0x4b0>)
 8003786:	4413      	add	r3, r2
 8003788:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 800378c:	4b7a      	ldr	r3, [pc, #488]	; (8003978 <FUNC_Transmission+0x4a8>)
 800378e:	f883 2732 	strb.w	r2, [r3, #1842]	; 0x732
    /*@>259f7*/VCU_B./*@>2958f*/Logic_g/*@>1eed1*/[/*@>21843*/1U]/*@>1eed0*/ = /*@>2674a*/VCU_ConstP./*@>29c0d*/pooled37/*@>24ead*/[/*@>24ea9*/rowIdx/*@>24ea6*/ + /*@>24eaa*/8U];
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	3308      	adds	r3, #8
 8003796:	4a7a      	ldr	r2, [pc, #488]	; (8003980 <FUNC_Transmission+0x4b0>)
 8003798:	4413      	add	r3, r2
 800379a:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 800379e:	4b76      	ldr	r3, [pc, #472]	; (8003978 <FUNC_Transmission+0x4a8>)
 80037a0:	f883 2733 	strb.w	r2, [r3, #1843]	; 0x733
    /* DataTypeConversion: '<S137>/Data Type Conversion11' */
    /*@>25a3f*/VCU_B./*@>295b3*/VOVG_ShiftDown_a/*@>7653*/ = /*@>25a45*/VCU_B./*@>295b6*/Logic_g/*@>24eb2*/[/*@>24eaf*/0];
 80037a4:	4b74      	ldr	r3, [pc, #464]	; (8003978 <FUNC_Transmission+0x4a8>)
 80037a6:	f893 3732 	ldrb.w	r3, [r3, #1842]	; 0x732
 80037aa:	4618      	mov	r0, r3
 80037ac:	f00b f8e6 	bl	800e97c <__aeabi_ui2d>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4970      	ldr	r1, [pc, #448]	; (8003978 <FUNC_Transmission+0x4a8>)
 80037b6:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
 *
 * Block description for '<S172>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>25a5d*/VCU_B./*@>295c2*/Uk1_o/*@>7dd5*/ = /*@>268de*/VCU_DW./*@>29c7c*/DelayInput1_DSTATE_j;
 80037ba:	4b70      	ldr	r3, [pc, #448]	; (800397c <FUNC_Transmission+0x4ac>)
 80037bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80037c0:	496d      	ldr	r1, [pc, #436]	; (8003978 <FUNC_Transmission+0x4a8>)
 80037c2:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198
    /* CombinatorialLogic: '<S173>/Logic' incorporates:
 *  Delay: '<S145>/Delay1'
 *  Memory: '<S173>/Memory'
 *  RelationalOperator: '<S172>/FixPt Relational Operator'
 */
    /*@>25a7b*/VCU_B./*@>295d1*/FixPtRelationalOperator_p/*@>7658*/ = (/*@>25a81*/VCU_B./*@>295d4*/STW_shift_down_request/*@>7657*/ > /*@>25a87*/VCU_B./*@>295d7*/Uk1_o);
 80037c6:	4b6c      	ldr	r3, [pc, #432]	; (8003978 <FUNC_Transmission+0x4a8>)
 80037c8:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 80037cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037d0:	4b69      	ldr	r3, [pc, #420]	; (8003978 <FUNC_Transmission+0x4a8>)
 80037d2:	e9d3 2366 	ldrd	r2, r3, [r3, #408]	; 0x198
 80037d6:	2401      	movs	r4, #1
 80037d8:	f00b fbd6 	bl	800ef88 <__aeabi_dcmpgt>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <FUNC_Transmission+0x316>
 80037e2:	2300      	movs	r3, #0
 80037e4:	461c      	mov	r4, r3
 80037e6:	b2e3      	uxtb	r3, r4
 80037e8:	461a      	mov	r2, r3
 80037ea:	4b63      	ldr	r3, [pc, #396]	; (8003978 <FUNC_Transmission+0x4a8>)
 80037ec:	f883 2734 	strb.w	r2, [r3, #1844]	; 0x734
    /*@>25acf*/VCU_B./*@>295fb*/Delay1_p/*@>7de1*/ = /*@>268e4*/VCU_DW./*@>29c7f*/Delay1_DSTATE_p;
 80037f0:	4b62      	ldr	r3, [pc, #392]	; (800397c <FUNC_Transmission+0x4ac>)
 80037f2:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 80037f6:	4b60      	ldr	r3, [pc, #384]	; (8003978 <FUNC_Transmission+0x4a8>)
 80037f8:	f883 2735 	strb.w	r2, [r3, #1845]	; 0x735
    /*@>25aed*/VCU_B./*@>2960a*/Memory_i/*@>765b*/ = /*@>268ea*/VCU_DW./*@>29c82*/Memory_PreviousInput_c;
 80037fc:	4b5f      	ldr	r3, [pc, #380]	; (800397c <FUNC_Transmission+0x4ac>)
 80037fe:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
 8003802:	4b5d      	ldr	r3, [pc, #372]	; (8003978 <FUNC_Transmission+0x4a8>)
 8003804:	f883 2736 	strb.w	r2, [r3, #1846]	; 0x736
    /*@>21862*/rowIdx/*@>1efa8*/ = /*@>25b11*/VCU_B./*@>2961c*/FixPtRelationalOperator_p;
 8003808:	4b5b      	ldr	r3, [pc, #364]	; (8003978 <FUNC_Transmission+0x4a8>)
 800380a:	f893 3734 	ldrb.w	r3, [r3, #1844]	; 0x734
 800380e:	617b      	str	r3, [r7, #20]
    /*@>21866*/rowIdx/*@>1efcf*/ = /*@>22048*/(int32_T)((/*@>22045*/(uint32_T)/*@>21868*/rowIdx/*@>21cc6*/ << /*@>2186a*/1)/*@>21cc4*/ + /*@>25b59*/VCU_B./*@>29640*/Delay1_p);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4a58      	ldr	r2, [pc, #352]	; (8003978 <FUNC_Transmission+0x4a8>)
 8003816:	f892 2735 	ldrb.w	r2, [r2, #1845]	; 0x735
 800381a:	4413      	add	r3, r2
 800381c:	617b      	str	r3, [r7, #20]
    /*@>2186d*/rowIdx/*@>1eff6*/ = /*@>2205c*/(int32_T)((/*@>22059*/(uint32_T)/*@>2186f*/rowIdx/*@>21cbc*/ << /*@>21871*/1)/*@>21cba*/ + /*@>25b83*/VCU_B./*@>29655*/Memory_i);
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	4a55      	ldr	r2, [pc, #340]	; (8003978 <FUNC_Transmission+0x4a8>)
 8003824:	f892 2736 	ldrb.w	r2, [r2, #1846]	; 0x736
 8003828:	4413      	add	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
    /*@>25ba1*/VCU_B./*@>29664*/Logic_c/*@>1f00c*/[/*@>21876*/0U]/*@>1f00b*/ = /*@>2675c*/VCU_ConstP./*@>29c16*/pooled37/*@>24ece*/[/*@>24ec9*/(uint32_T)/*@>24ecb*/rowIdx];
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	4a54      	ldr	r2, [pc, #336]	; (8003980 <FUNC_Transmission+0x4b0>)
 8003830:	4413      	add	r3, r2
 8003832:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003836:	4b50      	ldr	r3, [pc, #320]	; (8003978 <FUNC_Transmission+0x4a8>)
 8003838:	f883 2737 	strb.w	r2, [r3, #1847]	; 0x737
    /*@>25be3*/VCU_B./*@>29685*/Logic_c/*@>1f01f*/[/*@>2187b*/1U]/*@>1f01e*/ = /*@>26762*/VCU_ConstP./*@>29c19*/pooled37/*@>24ed7*/[/*@>24ed3*/rowIdx/*@>24ed0*/ + /*@>24ed4*/8U];
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	3308      	adds	r3, #8
 8003840:	4a4f      	ldr	r2, [pc, #316]	; (8003980 <FUNC_Transmission+0x4b0>)
 8003842:	4413      	add	r3, r2
 8003844:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003848:	4b4b      	ldr	r3, [pc, #300]	; (8003978 <FUNC_Transmission+0x4a8>)
 800384a:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
    /* UnitDelay: '<S145>/Unit Delay4' */
    /*@>25bf5*/VCU_B./*@>2968e*/UnitDelay4_h/*@>7e3d*/ = /*@>26902*/VCU_DW./*@>29c8e*/UnitDelay4_DSTATE_e;
 800384e:	4b4b      	ldr	r3, [pc, #300]	; (800397c <FUNC_Transmission+0x4ac>)
 8003850:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
 8003854:	4b48      	ldr	r3, [pc, #288]	; (8003978 <FUNC_Transmission+0x4a8>)
 8003856:	f883 2739 	strb.w	r2, [r3, #1849]	; 0x739
    /* Gain: '<S176>/Gain' */
    /*@>25c0d*/VCU_B./*@>2969a*/Gain_i/*@>7665*/ = /*@>21777*/2.0/*@>21cb2*/ * /*@>25c13*/VCU_B./*@>2969d*/DataTypeConversion1;
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <FUNC_Transmission+0x4a8>)
 800385c:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	f00a ff4c 	bl	800e704 <__adddf3>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4941      	ldr	r1, [pc, #260]	; (8003978 <FUNC_Transmission+0x4a8>)
 8003872:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
    /* RelationalOperator: '<S176>/Relational Operator' incorporates:
 *  Constant: '<S176>/Constant'
 */
    /*@>25c55*/VCU_B./*@>296be*/RelationalOperator_a/*@>7669*/ = (/*@>25c5b*/VCU_B./*@>296c1*/Gain_i/*@>7668*/ > /*@>21778*/169.0);
 8003876:	4b40      	ldr	r3, [pc, #256]	; (8003978 <FUNC_Transmission+0x4a8>)
 8003878:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 800387c:	2101      	movs	r1, #1
 800387e:	460c      	mov	r4, r1
 8003880:	4610      	mov	r0, r2
 8003882:	4619      	mov	r1, r3
 8003884:	a338      	add	r3, pc, #224	; (adr r3, 8003968 <FUNC_Transmission+0x498>)
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f00b fb7d 	bl	800ef88 <__aeabi_dcmpgt>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <FUNC_Transmission+0x3c8>
 8003894:	2300      	movs	r3, #0
 8003896:	461c      	mov	r4, r3
 8003898:	b2e3      	uxtb	r3, r4
 800389a:	461a      	mov	r2, r3
 800389c:	4b36      	ldr	r3, [pc, #216]	; (8003978 <FUNC_Transmission+0x4a8>)
 800389e:	f883 273a 	strb.w	r2, [r3, #1850]	; 0x73a
    /* RelationalOperator: '<S176>/Relational Operator1' incorporates:
 *  Constant: '<S176>/Constant1'
 */
    /*@>25c67*/VCU_B./*@>296c7*/RelationalOperator1_g/*@>766d*/ = (/*@>25c6d*/VCU_B./*@>296ca*/Gain_i/*@>766c*/ > /*@>21779*/228.0);
 80038a2:	4b35      	ldr	r3, [pc, #212]	; (8003978 <FUNC_Transmission+0x4a8>)
 80038a4:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 80038a8:	2101      	movs	r1, #1
 80038aa:	460c      	mov	r4, r1
 80038ac:	4610      	mov	r0, r2
 80038ae:	4619      	mov	r1, r3
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	4b33      	ldr	r3, [pc, #204]	; (8003984 <FUNC_Transmission+0x4b4>)
 80038b6:	f00b fb67 	bl	800ef88 <__aeabi_dcmpgt>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <FUNC_Transmission+0x3f4>
 80038c0:	2300      	movs	r3, #0
 80038c2:	461c      	mov	r4, r3
 80038c4:	b2e3      	uxtb	r3, r4
 80038c6:	461a      	mov	r2, r3
 80038c8:	4b2b      	ldr	r3, [pc, #172]	; (8003978 <FUNC_Transmission+0x4a8>)
 80038ca:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
    /* RelationalOperator: '<S176>/Relational Operator2' incorporates:
 *  Constant: '<S176>/Constant2'
 */
    /*@>25c7f*/VCU_B./*@>296d3*/RelationalOperator2_e/*@>7671*/ = (/*@>25c85*/VCU_B./*@>296d6*/Gain_i/*@>7670*/ > /*@>2177a*/325.0);
 80038ce:	4b2a      	ldr	r3, [pc, #168]	; (8003978 <FUNC_Transmission+0x4a8>)
 80038d0:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 80038d4:	2101      	movs	r1, #1
 80038d6:	460c      	mov	r4, r1
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	a324      	add	r3, pc, #144	; (adr r3, 8003970 <FUNC_Transmission+0x4a0>)
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	f00b fb51 	bl	800ef88 <__aeabi_dcmpgt>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <FUNC_Transmission+0x420>
 80038ec:	2300      	movs	r3, #0
 80038ee:	461c      	mov	r4, r3
 80038f0:	b2e3      	uxtb	r3, r4
 80038f2:	461a      	mov	r2, r3
 80038f4:	4b20      	ldr	r3, [pc, #128]	; (8003978 <FUNC_Transmission+0x4a8>)
 80038f6:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c
    /* Sum: '<S176>/Add' */
    /*@>25cbb*/VCU_B./*@>296f1*/Add_fn/*@>a801*/ = /*@>220a2*/(uint8_T)((/*@>2209c*/(uint32_T)/*@>25cc1*/VCU_B./*@>296f4*/RelationalOperator_a/*@>21ca2*/ + /*@>25cc7*/VCU_B./*@>296f7*/RelationalOperator1_g)/*@>21c95*/ + /*@>25ccd*/VCU_B./*@>296fa*/RelationalOperator2_e);
 80038fa:	4b1f      	ldr	r3, [pc, #124]	; (8003978 <FUNC_Transmission+0x4a8>)
 80038fc:	f893 273a 	ldrb.w	r2, [r3, #1850]	; 0x73a
 8003900:	4b1d      	ldr	r3, [pc, #116]	; (8003978 <FUNC_Transmission+0x4a8>)
 8003902:	f893 373b 	ldrb.w	r3, [r3, #1851]	; 0x73b
 8003906:	4413      	add	r3, r2
 8003908:	b2da      	uxtb	r2, r3
 800390a:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <FUNC_Transmission+0x4a8>)
 800390c:	f893 373c 	ldrb.w	r3, [r3, #1852]	; 0x73c
 8003910:	4413      	add	r3, r2
 8003912:	b2da      	uxtb	r2, r3
 8003914:	4b18      	ldr	r3, [pc, #96]	; (8003978 <FUNC_Transmission+0x4a8>)
 8003916:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689
    /* RelationalOperator: '<S166>/Compare' incorporates:
 *  Constant: '<S166>/Constant'
 */
    /*@>25cdf*/VCU_B./*@>29703*/Compare_j1/*@>767b*/ = (/*@>25ce5*/VCU_B./*@>29706*/x_clutch_STW/*@>767a*/ >= /*@>2177c*/15.0);
 800391a:	4b17      	ldr	r3, [pc, #92]	; (8003978 <FUNC_Transmission+0x4a8>)
 800391c:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	2101      	movs	r1, #1
 8003926:	460c      	mov	r4, r1
 8003928:	4610      	mov	r0, r2
 800392a:	4619      	mov	r1, r3
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	4b15      	ldr	r3, [pc, #84]	; (8003988 <FUNC_Transmission+0x4b8>)
 8003932:	f00b fb1f 	bl	800ef74 <__aeabi_dcmpge>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <FUNC_Transmission+0x470>
 800393c:	2300      	movs	r3, #0
 800393e:	461c      	mov	r4, r3
 8003940:	b2e3      	uxtb	r3, r4
 8003942:	461a      	mov	r2, r3
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <FUNC_Transmission+0x4a8>)
 8003946:	f883 273d 	strb.w	r2, [r3, #1853]	; 0x73d
    /* Switch: '<S145>/Switch' incorporates:
 *  Constant: '<S145>/Constant'
 *  Constant: '<S145>/Constant1'
 */
    /*@>1ec77*/if (/*@>25cfd*/VCU_B./*@>29712*/Compare_j1) {
 800394a:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <FUNC_Transmission+0x4a8>)
 800394c:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01d      	beq.n	8003990 <FUNC_Transmission+0x4c0>
        /*@>25d3f*/VCU_B./*@>29733*/Switch_m/*@>1ec7a*/ = /*@>2177e*/1.0;
 8003954:	4908      	ldr	r1, [pc, #32]	; (8003978 <FUNC_Transmission+0x4a8>)
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	4b0c      	ldr	r3, [pc, #48]	; (800398c <FUNC_Transmission+0x4bc>)
 800395c:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 8003960:	e01d      	b.n	800399e <FUNC_Transmission+0x4ce>
 8003962:	bf00      	nop
 8003964:	f3af 8000 	nop.w
 8003968:	00000000 	.word	0x00000000
 800396c:	40652000 	.word	0x40652000
 8003970:	00000000 	.word	0x00000000
 8003974:	40745000 	.word	0x40745000
 8003978:	200008c8 	.word	0x200008c8
 800397c:	20001058 	.word	0x20001058
 8003980:	0800f1e8 	.word	0x0800f1e8
 8003984:	406c8000 	.word	0x406c8000
 8003988:	402e0000 	.word	0x402e0000
 800398c:	3ff00000 	.word	0x3ff00000
    } else {
        /*@>25d39*/VCU_B./*@>29730*/Switch_m/*@>7e4d*/ = /*@>2177f*/2.0;
 8003990:	495f      	ldr	r1, [pc, #380]	; (8003b10 <FUNC_Transmission+0x640>)
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800399a:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
    }
    /* End of Switch: '<S145>/Switch' */

    /* RelationalOperator: '<S145>/Relational Operator' */
    /*@>25d69*/VCU_B./*@>29748*/LessthanNeutral_j/*@>7680*/ = (/*@>25d6f*/VCU_B./*@>2974b*/Add_fn/*@>21c8b*/ < /*@>25d75*/VCU_B./*@>2974e*/Switch_m);
 800399e:	4b5c      	ldr	r3, [pc, #368]	; (8003b10 <FUNC_Transmission+0x640>)
 80039a0:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 80039a4:	4618      	mov	r0, r3
 80039a6:	f00a fff9 	bl	800e99c <__aeabi_i2d>
 80039aa:	4604      	mov	r4, r0
 80039ac:	460d      	mov	r5, r1
 80039ae:	4b58      	ldr	r3, [pc, #352]	; (8003b10 <FUNC_Transmission+0x640>)
 80039b0:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 80039b4:	2101      	movs	r1, #1
 80039b6:	460e      	mov	r6, r1
 80039b8:	4620      	mov	r0, r4
 80039ba:	4629      	mov	r1, r5
 80039bc:	f00b fac6 	bl	800ef4c <__aeabi_dcmplt>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <FUNC_Transmission+0x4fa>
 80039c6:	2300      	movs	r3, #0
 80039c8:	461e      	mov	r6, r3
 80039ca:	b2f3      	uxtb	r3, r6
 80039cc:	461a      	mov	r2, r3
 80039ce:	4b50      	ldr	r3, [pc, #320]	; (8003b10 <FUNC_Transmission+0x640>)
 80039d0:	f883 273e 	strb.w	r2, [r3, #1854]	; 0x73e
    /* UnitDelay: '<S146>/Unit Delay' */
    /*@>25d87*/VCU_B./*@>29757*/UnitDelay_b/*@>7e5e*/ = /*@>2690e*/VCU_DW./*@>29c94*/UnitDelay_DSTATE_g;
 80039d4:	4b4f      	ldr	r3, [pc, #316]	; (8003b14 <FUNC_Transmission+0x644>)
 80039d6:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
 80039da:	4b4d      	ldr	r3, [pc, #308]	; (8003b10 <FUNC_Transmission+0x640>)
 80039dc:	f883 273f 	strb.w	r2, [r3, #1855]	; 0x73f
    /* UnitDelay: '<S145>/Unit Delay2' */
    /*@>25d93*/VCU_B./*@>2975d*/Timeout_p/*@>7e6a*/ = /*@>26914*/VCU_DW./*@>29c97*/UnitDelay2_DSTATE_k;
 80039e0:	4b4c      	ldr	r3, [pc, #304]	; (8003b14 <FUNC_Transmission+0x644>)
 80039e2:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
 80039e6:	4b4a      	ldr	r3, [pc, #296]	; (8003b10 <FUNC_Transmission+0x640>)
 80039e8:	f883 2740 	strb.w	r2, [r3, #1856]	; 0x740
    /* RelationalOperator: '<S167>/Compare' incorporates:
 *  Constant: '<S167>/Constant'
 */
    /*@>25da5*/VCU_B./*@>29766*/Compare_jn/*@>7686*/ = (/*@>25dab*/VCU_B./*@>29769*/DataTypeConversion2/*@>7685*/ > /*@>21783*/5000.0);
 80039ec:	4b48      	ldr	r3, [pc, #288]	; (8003b10 <FUNC_Transmission+0x640>)
 80039ee:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	2101      	movs	r1, #1
 80039f8:	460c      	mov	r4, r1
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	a340      	add	r3, pc, #256	; (adr r3, 8003b00 <FUNC_Transmission+0x630>)
 8003a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a04:	f00b fac0 	bl	800ef88 <__aeabi_dcmpgt>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <FUNC_Transmission+0x542>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	461c      	mov	r4, r3
 8003a12:	b2e3      	uxtb	r3, r4
 8003a14:	461a      	mov	r2, r3
 8003a16:	4b3e      	ldr	r3, [pc, #248]	; (8003b10 <FUNC_Transmission+0x640>)
 8003a18:	f883 2741 	strb.w	r2, [r3, #1857]	; 0x741
    /* RelationalOperator: '<S168>/Compare' incorporates:
 *  Constant: '<S168>/Constant'
 */
    /*@>25db1*/VCU_B./*@>2976c*/Compare_lh/*@>768a*/ = (/*@>25db7*/VCU_B./*@>2976f*/Add_fn/*@>7689*/ == /*@>21786*/2);
 8003a1c:	4b3c      	ldr	r3, [pc, #240]	; (8003b10 <FUNC_Transmission+0x640>)
 8003a1e:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	bf0c      	ite	eq
 8003a26:	2301      	moveq	r3, #1
 8003a28:	2300      	movne	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4b38      	ldr	r3, [pc, #224]	; (8003b10 <FUNC_Transmission+0x640>)
 8003a30:	f883 2742 	strb.w	r2, [r3, #1858]	; 0x742
    /* Logic: '<S145>/Logical Operator1' */
    /*@>25dcf*/VCU_B./*@>2977b*/RPMcheckgear21_f/*@>7690*/ = (/*@>25dd5*/VCU_B./*@>2977e*/Compare_lh/*@>768f*/ && /*@>25ddb*/VCU_B./*@>29781*/Compare_jn);
 8003a34:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <FUNC_Transmission+0x640>)
 8003a36:	f893 3742 	ldrb.w	r3, [r3, #1858]	; 0x742
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d006      	beq.n	8003a4c <FUNC_Transmission+0x57c>
 8003a3e:	4b34      	ldr	r3, [pc, #208]	; (8003b10 <FUNC_Transmission+0x640>)
 8003a40:	f893 3741 	ldrb.w	r3, [r3, #1857]	; 0x741
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <FUNC_Transmission+0x57c>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <FUNC_Transmission+0x57e>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	4b2f      	ldr	r3, [pc, #188]	; (8003b10 <FUNC_Transmission+0x640>)
 8003a52:	f883 2743 	strb.w	r2, [r3, #1859]	; 0x743
    /* RelationalOperator: '<S169>/Compare' incorporates:
 *  Constant: '<S169>/Constant'
 */
    /*@>25de7*/VCU_B./*@>29787*/Compare_gw/*@>7694*/ = (/*@>25ded*/VCU_B./*@>2978a*/DataTypeConversion2/*@>7693*/ > /*@>21787*/5300.0);
 8003a56:	4b2e      	ldr	r3, [pc, #184]	; (8003b10 <FUNC_Transmission+0x640>)
 8003a58:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8003a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a60:	2101      	movs	r1, #1
 8003a62:	460c      	mov	r4, r1
 8003a64:	4610      	mov	r0, r2
 8003a66:	4619      	mov	r1, r3
 8003a68:	a327      	add	r3, pc, #156	; (adr r3, 8003b08 <FUNC_Transmission+0x638>)
 8003a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6e:	f00b fa8b 	bl	800ef88 <__aeabi_dcmpgt>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <FUNC_Transmission+0x5ac>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	461c      	mov	r4, r3
 8003a7c:	b2e3      	uxtb	r3, r4
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4b23      	ldr	r3, [pc, #140]	; (8003b10 <FUNC_Transmission+0x640>)
 8003a82:	f883 2744 	strb.w	r2, [r3, #1860]	; 0x744
    /* RelationalOperator: '<S170>/Compare' incorporates:
 *  Constant: '<S170>/Constant'
 */
    /*@>25df9*/VCU_B./*@>29790*/Compare_aq/*@>7698*/ = (/*@>25dff*/VCU_B./*@>29793*/Add_fn/*@>7697*/ == /*@>21788*/3);
 8003a86:	4b22      	ldr	r3, [pc, #136]	; (8003b10 <FUNC_Transmission+0x640>)
 8003a88:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	461a      	mov	r2, r3
 8003a98:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <FUNC_Transmission+0x640>)
 8003a9a:	f883 2745 	strb.w	r2, [r3, #1861]	; 0x745
    /* Logic: '<S145>/Logical Operator2' */
    /*@>25e11*/VCU_B./*@>2979c*/RPMcheckgear31_d/*@>769e*/ = (/*@>25e17*/VCU_B./*@>2979f*/Compare_gw/*@>769d*/ && /*@>25e1d*/VCU_B./*@>297a2*/Compare_aq);
 8003a9e:	4b1c      	ldr	r3, [pc, #112]	; (8003b10 <FUNC_Transmission+0x640>)
 8003aa0:	f893 3744 	ldrb.w	r3, [r3, #1860]	; 0x744
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d006      	beq.n	8003ab6 <FUNC_Transmission+0x5e6>
 8003aa8:	4b19      	ldr	r3, [pc, #100]	; (8003b10 <FUNC_Transmission+0x640>)
 8003aaa:	f893 3745 	ldrb.w	r3, [r3, #1861]	; 0x745
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <FUNC_Transmission+0x5e6>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <FUNC_Transmission+0x5e8>
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <FUNC_Transmission+0x640>)
 8003abc:	f883 2746 	strb.w	r2, [r3, #1862]	; 0x746
    /* CombinatorialLogic: '<S174>/Logic' incorporates:
 *  Logic: '<S145>/Logical Operator'
 *  Memory: '<S174>/Memory'
 */
    /*@>25e2f*/VCU_B./*@>297ab*/LogicalOperator_n/*@>76b0*/ = (/*@>25e35*/VCU_B./*@>297ae*/UnitDelay4_h/*@>76a3*/ || /*@>25e3b*/VCU_B./*@>297b1*/LessthanNeutral_j/*@>76a6*/ || /*@>25e41*/VCU_B./*@>297b4*/UnitDelay_b/*@>76a9*/ || /*@>25e47*/VCU_B./*@>297b7*/Timeout_p/*@>76ac*/ || /*@>25e4d*/VCU_B./*@>297ba*/RPMcheckgear21_f/*@>76af*/ || /*@>25e53*/VCU_B./*@>297bd*/RPMcheckgear31_d);
 8003ac0:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <FUNC_Transmission+0x640>)
 8003ac2:	f893 3739 	ldrb.w	r3, [r3, #1849]	; 0x739
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d118      	bne.n	8003afc <FUNC_Transmission+0x62c>
 8003aca:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <FUNC_Transmission+0x640>)
 8003acc:	f893 373e 	ldrb.w	r3, [r3, #1854]	; 0x73e
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d113      	bne.n	8003afc <FUNC_Transmission+0x62c>
 8003ad4:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <FUNC_Transmission+0x640>)
 8003ad6:	f893 373f 	ldrb.w	r3, [r3, #1855]	; 0x73f
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10e      	bne.n	8003afc <FUNC_Transmission+0x62c>
 8003ade:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <FUNC_Transmission+0x640>)
 8003ae0:	f893 3740 	ldrb.w	r3, [r3, #1856]	; 0x740
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d109      	bne.n	8003afc <FUNC_Transmission+0x62c>
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <FUNC_Transmission+0x640>)
 8003aea:	f893 3743 	ldrb.w	r3, [r3, #1859]	; 0x743
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d104      	bne.n	8003afc <FUNC_Transmission+0x62c>
 8003af2:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <FUNC_Transmission+0x640>)
 8003af4:	f893 3746 	ldrb.w	r3, [r3, #1862]	; 0x746
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00d      	beq.n	8003b18 <FUNC_Transmission+0x648>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e00c      	b.n	8003b1a <FUNC_Transmission+0x64a>
 8003b00:	00000000 	.word	0x00000000
 8003b04:	40b38800 	.word	0x40b38800
 8003b08:	00000000 	.word	0x00000000
 8003b0c:	40b4b400 	.word	0x40b4b400
 8003b10:	200008c8 	.word	0x200008c8
 8003b14:	20001058 	.word	0x20001058
 8003b18:	2300      	movs	r3, #0
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	4bb4      	ldr	r3, [pc, #720]	; (8003df0 <FUNC_Transmission+0x920>)
 8003b1e:	f883 2747 	strb.w	r2, [r3, #1863]	; 0x747
    /*@>25e6b*/VCU_B./*@>297c9*/Memory_c5/*@>76b2*/ = /*@>26926*/VCU_DW./*@>29ca0*/Memory_PreviousInput_jz;
 8003b22:	4bb4      	ldr	r3, [pc, #720]	; (8003df4 <FUNC_Transmission+0x924>)
 8003b24:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
 8003b28:	4bb1      	ldr	r3, [pc, #708]	; (8003df0 <FUNC_Transmission+0x920>)
 8003b2a:	f883 2748 	strb.w	r2, [r3, #1864]	; 0x748
    /*@>219b9*/tmp/*@>1f0e1*/ = /*@>25e7d*/VCU_B./*@>297d2*/Logic_c/*@>24eec*/[/*@>24ee9*/0];
 8003b2e:	4bb0      	ldr	r3, [pc, #704]	; (8003df0 <FUNC_Transmission+0x920>)
 8003b30:	f893 3737 	ldrb.w	r3, [r3, #1847]	; 0x737
 8003b34:	71fb      	strb	r3, [r7, #7]
    /*@>2189b*/rowIdx/*@>1f0f8*/ = /*@>219bb*/tmp;
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	617b      	str	r3, [r7, #20]
    /*@>2189f*/rowIdx/*@>1f121*/ = /*@>2210e*/(int32_T)((/*@>2210b*/(uint32_T)/*@>218a1*/rowIdx/*@>21c85*/ << /*@>218a3*/1)/*@>21c83*/ + /*@>25ea1*/VCU_B./*@>297e4*/LogicalOperator_n);
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	4aac      	ldr	r2, [pc, #688]	; (8003df0 <FUNC_Transmission+0x920>)
 8003b40:	f892 2747 	ldrb.w	r2, [r2, #1863]	; 0x747
 8003b44:	4413      	add	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
    /*@>218a6*/rowIdx/*@>1f14a*/ = /*@>2211a*/(int32_T)((/*@>22117*/(uint32_T)/*@>218a8*/rowIdx/*@>21c7b*/ << /*@>218aa*/1)/*@>21c79*/ + /*@>25ed1*/VCU_B./*@>297fc*/Memory_c5);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	4aa8      	ldr	r2, [pc, #672]	; (8003df0 <FUNC_Transmission+0x920>)
 8003b4e:	f892 2748 	ldrb.w	r2, [r2, #1864]	; 0x748
 8003b52:	4413      	add	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]
    /*@>25edd*/VCU_B./*@>29802*/Logic_j/*@>1f160*/[/*@>218af*/0U]/*@>1f15f*/ = /*@>26774*/VCU_ConstP./*@>29c22*/pooled37/*@>24ef3*/[/*@>24eee*/(uint32_T)/*@>24ef0*/rowIdx];
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	4aa7      	ldr	r2, [pc, #668]	; (8003df8 <FUNC_Transmission+0x928>)
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003b60:	4ba3      	ldr	r3, [pc, #652]	; (8003df0 <FUNC_Transmission+0x920>)
 8003b62:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
    /*@>25ee9*/VCU_B./*@>29808*/Logic_j/*@>1f173*/[/*@>218b4*/1U]/*@>1f172*/ = /*@>2677a*/VCU_ConstP./*@>29c25*/pooled37/*@>24f01*/[/*@>24efd*/rowIdx/*@>24efa*/ + /*@>24efe*/8U];
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	4aa3      	ldr	r2, [pc, #652]	; (8003df8 <FUNC_Transmission+0x928>)
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003b72:	4b9f      	ldr	r3, [pc, #636]	; (8003df0 <FUNC_Transmission+0x920>)
 8003b74:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
    /* Sum: '<S186>/Add' */
    /*@>25eef*/VCU_B./*@>2980b*/Add_b/*@>a806*/ = /*@>25ef5*/VCU_B./*@>2980e*/Add1_k/*@>a803*/ + /*@>25efb*/VCU_B./*@>29811*/Add1_de;
 8003b78:	4b9d      	ldr	r3, [pc, #628]	; (8003df0 <FUNC_Transmission+0x920>)
 8003b7a:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8003b7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b82:	4b9b      	ldr	r3, [pc, #620]	; (8003df0 <FUNC_Transmission+0x920>)
 8003b84:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	f00a fdba 	bl	800e704 <__adddf3>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4996      	ldr	r1, [pc, #600]	; (8003df0 <FUNC_Transmission+0x920>)
 8003b96:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
    /* Gain: '<S186>/Gain' */
    /*@>25f07*/VCU_B./*@>29817*/v_Veh/*@>76c0*/ = /*@>2178d*/0.5/*@>21c71*/ * /*@>25f0d*/VCU_B./*@>2981a*/Add_b;
 8003b9a:	4b95      	ldr	r3, [pc, #596]	; (8003df0 <FUNC_Transmission+0x920>)
 8003b9c:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	4b94      	ldr	r3, [pc, #592]	; (8003dfc <FUNC_Transmission+0x92c>)
 8003baa:	f00a ff5d 	bl	800ea68 <__aeabi_dmul>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	498f      	ldr	r1, [pc, #572]	; (8003df0 <FUNC_Transmission+0x920>)
 8003bb4:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
    /* RelationalOperator: '<S186>/Relational Operator' incorporates:
 *  Constant: '<S186>/Const_vVeh_Threshold'
 */
    /*@>25f19*/VCU_B./*@>29820*/RelationalOperator_h/*@>76c4*/ = (/*@>25f1f*/VCU_B./*@>29823*/v_Veh/*@>76c3*/ > /*@>2178e*/15.0);
 8003bb8:	4b8d      	ldr	r3, [pc, #564]	; (8003df0 <FUNC_Transmission+0x920>)
 8003bba:	e9d3 236e 	ldrd	r2, r3, [r3, #440]	; 0x1b8
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	460c      	mov	r4, r1
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	4b8d      	ldr	r3, [pc, #564]	; (8003e00 <FUNC_Transmission+0x930>)
 8003bcc:	f00b f9dc 	bl	800ef88 <__aeabi_dcmpgt>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <FUNC_Transmission+0x70a>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	461c      	mov	r4, r3
 8003bda:	b2e3      	uxtb	r3, r4
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4b84      	ldr	r3, [pc, #528]	; (8003df0 <FUNC_Transmission+0x920>)
 8003be0:	f883 274b 	strb.w	r2, [r3, #1867]	; 0x74b
    /* Gain: '<S185>/Gain' */
    /*@>25f2b*/VCU_B./*@>29829*/Gain_a/*@>76cc*/ = /*@>2178f*/2.0/*@>21c6d*/ * /*@>25f31*/VCU_B./*@>2982c*/DataTypeConversion1;
 8003be4:	4b82      	ldr	r3, [pc, #520]	; (8003df0 <FUNC_Transmission+0x920>)
 8003be6:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8003bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bee:	4610      	mov	r0, r2
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f00a fd87 	bl	800e704 <__adddf3>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	497d      	ldr	r1, [pc, #500]	; (8003df0 <FUNC_Transmission+0x920>)
 8003bfc:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
    /* RelationalOperator: '<S185>/Relational Operator' incorporates:
 *  Constant: '<S185>/Constant'
 */
    /*@>25f3d*/VCU_B./*@>29832*/RelationalOperator_p/*@>76d0*/ = (/*@>25f43*/VCU_B./*@>29835*/Gain_a/*@>76cf*/ > /*@>21790*/169.0);
 8003c00:	4b7b      	ldr	r3, [pc, #492]	; (8003df0 <FUNC_Transmission+0x920>)
 8003c02:	e9d3 2370 	ldrd	r2, r3, [r3, #448]	; 0x1c0
 8003c06:	2101      	movs	r1, #1
 8003c08:	460c      	mov	r4, r1
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	a374      	add	r3, pc, #464	; (adr r3, 8003de0 <FUNC_Transmission+0x910>)
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	f00b f9b8 	bl	800ef88 <__aeabi_dcmpgt>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <FUNC_Transmission+0x752>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	461c      	mov	r4, r3
 8003c22:	b2e3      	uxtb	r3, r4
 8003c24:	461a      	mov	r2, r3
 8003c26:	4b72      	ldr	r3, [pc, #456]	; (8003df0 <FUNC_Transmission+0x920>)
 8003c28:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
    /* RelationalOperator: '<S185>/Relational Operator1' incorporates:
 *  Constant: '<S185>/Constant1'
 */
    /*@>25f4f*/VCU_B./*@>2983b*/RelationalOperator1_l/*@>76d4*/ = (/*@>25f55*/VCU_B./*@>2983e*/Gain_a/*@>76d3*/ > /*@>21791*/269.0);
 8003c2c:	4b70      	ldr	r3, [pc, #448]	; (8003df0 <FUNC_Transmission+0x920>)
 8003c2e:	e9d3 2370 	ldrd	r2, r3, [r3, #448]	; 0x1c0
 8003c32:	2101      	movs	r1, #1
 8003c34:	460c      	mov	r4, r1
 8003c36:	4610      	mov	r0, r2
 8003c38:	4619      	mov	r1, r3
 8003c3a:	a36b      	add	r3, pc, #428	; (adr r3, 8003de8 <FUNC_Transmission+0x918>)
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f00b f9a2 	bl	800ef88 <__aeabi_dcmpgt>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <FUNC_Transmission+0x77e>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	461c      	mov	r4, r3
 8003c4e:	b2e3      	uxtb	r3, r4
 8003c50:	461a      	mov	r2, r3
 8003c52:	4b67      	ldr	r3, [pc, #412]	; (8003df0 <FUNC_Transmission+0x920>)
 8003c54:	f883 274d 	strb.w	r2, [r3, #1869]	; 0x74d
    /* RelationalOperator: '<S185>/Relational Operator2' incorporates:
 *  Constant: '<S185>/Constant2'
 */
    /*@>25f6d*/VCU_B./*@>2984a*/RelationalOperator2_l/*@>76d8*/ = (/*@>25f73*/VCU_B./*@>2984d*/Gain_a/*@>76d7*/ > /*@>21792*/360.0);
 8003c58:	4b65      	ldr	r3, [pc, #404]	; (8003df0 <FUNC_Transmission+0x920>)
 8003c5a:	e9d3 2370 	ldrd	r2, r3, [r3, #448]	; 0x1c0
 8003c5e:	2101      	movs	r1, #1
 8003c60:	460c      	mov	r4, r1
 8003c62:	4610      	mov	r0, r2
 8003c64:	4619      	mov	r1, r3
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	4b66      	ldr	r3, [pc, #408]	; (8003e04 <FUNC_Transmission+0x934>)
 8003c6c:	f00b f98c 	bl	800ef88 <__aeabi_dcmpgt>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <FUNC_Transmission+0x7aa>
 8003c76:	2300      	movs	r3, #0
 8003c78:	461c      	mov	r4, r3
 8003c7a:	b2e3      	uxtb	r3, r4
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b5c      	ldr	r3, [pc, #368]	; (8003df0 <FUNC_Transmission+0x920>)
 8003c80:	f883 274e 	strb.w	r2, [r3, #1870]	; 0x74e
    /* Sum: '<S185>/Add' */
    /*@>25f85*/VCU_B./*@>29856*/Add_ax/*@>a80f*/ = /*@>22160*/(uint8_T)((/*@>2215a*/(uint32_T)/*@>25f8b*/VCU_B./*@>29859*/RelationalOperator_p/*@>21c5d*/ + /*@>25f91*/VCU_B./*@>2985c*/RelationalOperator1_l)/*@>21c50*/ + /*@>25f97*/VCU_B./*@>2985f*/RelationalOperator2_l);
 8003c84:	4b5a      	ldr	r3, [pc, #360]	; (8003df0 <FUNC_Transmission+0x920>)
 8003c86:	f893 274c 	ldrb.w	r2, [r3, #1868]	; 0x74c
 8003c8a:	4b59      	ldr	r3, [pc, #356]	; (8003df0 <FUNC_Transmission+0x920>)
 8003c8c:	f893 374d 	ldrb.w	r3, [r3, #1869]	; 0x74d
 8003c90:	4413      	add	r3, r2
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	4b56      	ldr	r3, [pc, #344]	; (8003df0 <FUNC_Transmission+0x920>)
 8003c96:	f893 374e 	ldrb.w	r3, [r3, #1870]	; 0x74e
 8003c9a:	4413      	add	r3, r2
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	4b54      	ldr	r3, [pc, #336]	; (8003df0 <FUNC_Transmission+0x920>)
 8003ca0:	f883 268a 	strb.w	r2, [r3, #1674]	; 0x68a
    /* RelationalOperator: '<S187>/Compare' incorporates:
 *  Constant: '<S187>/Constant'
 */
    /*@>25fa9*/VCU_B./*@>29868*/Compare_k/*@>76e2*/ = (/*@>25faf*/VCU_B./*@>2986b*/Add_ax/*@>76e1*/ == /*@>21795*/2);
 8003ca4:	4b52      	ldr	r3, [pc, #328]	; (8003df0 <FUNC_Transmission+0x920>)
 8003ca6:	f893 368a 	ldrb.w	r3, [r3, #1674]	; 0x68a
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	bf0c      	ite	eq
 8003cae:	2301      	moveq	r3, #1
 8003cb0:	2300      	movne	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4b4e      	ldr	r3, [pc, #312]	; (8003df0 <FUNC_Transmission+0x920>)
 8003cb8:	f883 274f 	strb.w	r2, [r3, #1871]	; 0x74f
    /* Logic: '<S186>/Logical Operator3' */
    /*@>25fc1*/VCU_B./*@>29874*/LogicalOperator3_n/*@>76e8*/ = (/*@>25fc7*/VCU_B./*@>29877*/RelationalOperator_h/*@>76e7*/ && /*@>25fcd*/VCU_B./*@>2987a*/Compare_k);
 8003cbc:	4b4c      	ldr	r3, [pc, #304]	; (8003df0 <FUNC_Transmission+0x920>)
 8003cbe:	f893 374b 	ldrb.w	r3, [r3, #1867]	; 0x74b
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d006      	beq.n	8003cd4 <FUNC_Transmission+0x804>
 8003cc6:	4b4a      	ldr	r3, [pc, #296]	; (8003df0 <FUNC_Transmission+0x920>)
 8003cc8:	f893 374f 	ldrb.w	r3, [r3, #1871]	; 0x74f
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <FUNC_Transmission+0x804>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <FUNC_Transmission+0x806>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	4b45      	ldr	r3, [pc, #276]	; (8003df0 <FUNC_Transmission+0x920>)
 8003cda:	f883 2750 	strb.w	r2, [r3, #1872]	; 0x750
 *
 * Block description for '<S188>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>25fdf*/VCU_B./*@>29883*/Uk1_ii/*@>7ec6*/ = /*@>26938*/VCU_DW./*@>29ca9*/DelayInput1_DSTATE_m5;
 8003cde:	4b45      	ldr	r3, [pc, #276]	; (8003df4 <FUNC_Transmission+0x924>)
 8003ce0:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 8003ce4:	4b42      	ldr	r3, [pc, #264]	; (8003df0 <FUNC_Transmission+0x920>)
 8003ce6:	f883 2751 	strb.w	r2, [r3, #1873]	; 0x751
    /* CombinatorialLogic: '<S189>/Logic' incorporates:
 *  RelationalOperator: '<S188>/FixPt Relational Operator'
 */
    /*@>25ffd*/VCU_B./*@>29892*/FixPtRelationalOperator_dz/*@>76ed*/ = (/*@>2217b*/(int32_T)/*@>26003*/VCU_B./*@>29895*/LogicalOperator3_n/*@>76ec*/ > /*@>2217d*/(int32_T)/*@>26009*/VCU_B./*@>29898*/Uk1_ii);
 8003cea:	4b41      	ldr	r3, [pc, #260]	; (8003df0 <FUNC_Transmission+0x920>)
 8003cec:	f893 2750 	ldrb.w	r2, [r3, #1872]	; 0x750
 8003cf0:	4b3f      	ldr	r3, [pc, #252]	; (8003df0 <FUNC_Transmission+0x920>)
 8003cf2:	f893 3751 	ldrb.w	r3, [r3, #1873]	; 0x751
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	bf8c      	ite	hi
 8003cfa:	2301      	movhi	r3, #1
 8003cfc:	2300      	movls	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	4b3b      	ldr	r3, [pc, #236]	; (8003df0 <FUNC_Transmission+0x920>)
 8003d04:	f883 2752 	strb.w	r2, [r3, #1874]	; 0x752
    /* Logic: '<S186>/Logical Operator' */
    /*@>26015*/VCU_B./*@>2989e*/LogicalOperator_g/*@>76f1*/ = !/*@<76f0*//*@>2601b*/VCU_B./*@>298a1*/Compare_k;
 8003d08:	4b39      	ldr	r3, [pc, #228]	; (8003df0 <FUNC_Transmission+0x920>)
 8003d0a:	f893 374f 	ldrb.w	r3, [r3, #1871]	; 0x74f
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bf0c      	ite	eq
 8003d12:	2301      	moveq	r3, #1
 8003d14:	2300      	movne	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b35      	ldr	r3, [pc, #212]	; (8003df0 <FUNC_Transmission+0x920>)
 8003d1c:	f883 2753 	strb.w	r2, [r3, #1875]	; 0x753
 *
 * Block description for '<S181>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>26033*/VCU_B./*@>298ad*/Uk1_p/*@>7ed2*/ = /*@>26944*/VCU_DW./*@>29caf*/DelayInput1_DSTATE_m;
 8003d20:	4b34      	ldr	r3, [pc, #208]	; (8003df4 <FUNC_Transmission+0x924>)
 8003d22:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 8003d26:	4b32      	ldr	r3, [pc, #200]	; (8003df0 <FUNC_Transmission+0x920>)
 8003d28:	f883 268b 	strb.w	r2, [r3, #1675]	; 0x68b
    /* RelationalOperator: '<S181>/FixPt Relational Operator' */
    /*@>26045*/VCU_B./*@>298b6*/FixPtRelationalOperator_j/*@>76f6*/ = (/*@>2604b*/VCU_B./*@>298b9*/Add_ax/*@>76f5*/ > /*@>26051*/VCU_B./*@>298bc*/Uk1_p);
 8003d2c:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <FUNC_Transmission+0x920>)
 8003d2e:	f893 268a 	ldrb.w	r2, [r3, #1674]	; 0x68a
 8003d32:	4b2f      	ldr	r3, [pc, #188]	; (8003df0 <FUNC_Transmission+0x920>)
 8003d34:	f893 368b 	ldrb.w	r3, [r3, #1675]	; 0x68b
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	bf8c      	ite	hi
 8003d3c:	2301      	movhi	r3, #1
 8003d3e:	2300      	movls	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	4b2a      	ldr	r3, [pc, #168]	; (8003df0 <FUNC_Transmission+0x920>)
 8003d46:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
    /* RelationalOperator: '<S177>/Compare' incorporates:
 *  Constant: '<S177>/Constant'
 */
    /*@>2605d*/VCU_B./*@>298c2*/Compare_j0/*@>76fa*/ = (/*@>26063*/VCU_B./*@>298c5*/Add_ax/*@>76f9*/ >= /*@>21799*/3);
 8003d4a:	4b29      	ldr	r3, [pc, #164]	; (8003df0 <FUNC_Transmission+0x920>)
 8003d4c:	f893 368a 	ldrb.w	r3, [r3, #1674]	; 0x68a
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	bf8c      	ite	hi
 8003d54:	2301      	movhi	r3, #1
 8003d56:	2300      	movls	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <FUNC_Transmission+0x920>)
 8003d5e:	f883 2755 	strb.w	r2, [r3, #1877]	; 0x755
    /* UnitDelay: '<S145>/Unit Delay' */
    /*@>2606f*/VCU_B./*@>298cb*/UnitDelay_g/*@>7ede*/ = /*@>26956*/VCU_DW./*@>29cb8*/UnitDelay_DSTATE_n;
 8003d62:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <FUNC_Transmission+0x924>)
 8003d64:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
 8003d68:	4b21      	ldr	r3, [pc, #132]	; (8003df0 <FUNC_Transmission+0x920>)
 8003d6a:	f883 2756 	strb.w	r2, [r3, #1878]	; 0x756
    /* UnitDelay: '<S146>/Unit Delay1' */
    /*@>26081*/VCU_B./*@>298d4*/Timeout_px/*@>7eea*/ = /*@>2695c*/VCU_DW./*@>29cbb*/UnitDelay1_DSTATE_l;
 8003d6e:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <FUNC_Transmission+0x924>)
 8003d70:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 8003d74:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <FUNC_Transmission+0x920>)
 8003d76:	f883 2757 	strb.w	r2, [r3, #1879]	; 0x757
    /* RelationalOperator: '<S179>/Compare' incorporates:
 *  Constant: '<S179>/Constant'
 */
    /*@>26093*/VCU_B./*@>298dd*/Compare_d/*@>7700*/ = (/*@>26099*/VCU_B./*@>298e0*/Add_ax/*@>76ff*/ == /*@>2179c*/0);
 8003d7a:	4b1d      	ldr	r3, [pc, #116]	; (8003df0 <FUNC_Transmission+0x920>)
 8003d7c:	f893 368a 	ldrb.w	r3, [r3, #1674]	; 0x68a
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bf0c      	ite	eq
 8003d84:	2301      	moveq	r3, #1
 8003d86:	2300      	movne	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <FUNC_Transmission+0x920>)
 8003d8e:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
    /* RelationalOperator: '<S178>/Compare' incorporates:
 *  Constant: '<S178>/Constant'
 */
    /*@>260b1*/VCU_B./*@>298ec*/Compare_i/*@>7704*/ = (/*@>260b7*/VCU_B./*@>298ef*/x_clutch_STW/*@>7703*/ < /*@>2179d*/15.0);
 8003d92:	4b17      	ldr	r3, [pc, #92]	; (8003df0 <FUNC_Transmission+0x920>)
 8003d94:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	460c      	mov	r4, r1
 8003da0:	4610      	mov	r0, r2
 8003da2:	4619      	mov	r1, r3
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <FUNC_Transmission+0x930>)
 8003daa:	f00b f8cf 	bl	800ef4c <__aeabi_dcmplt>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <FUNC_Transmission+0x8e8>
 8003db4:	2300      	movs	r3, #0
 8003db6:	461c      	mov	r4, r3
 8003db8:	b2e3      	uxtb	r3, r4
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <FUNC_Transmission+0x920>)
 8003dbe:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
    /* Logic: '<S146>/Logical Operator1' */
    /*@>260e1*/VCU_B./*@>29904*/FailSafefirstgear_n/*@>770a*/ = (/*@>260e7*/VCU_B./*@>29907*/Compare_d/*@>7709*/ && /*@>260ed*/VCU_B./*@>2990a*/Compare_i);
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <FUNC_Transmission+0x920>)
 8003dc4:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01d      	beq.n	8003e08 <FUNC_Transmission+0x938>
 8003dcc:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <FUNC_Transmission+0x920>)
 8003dce:	f893 3759 	ldrb.w	r3, [r3, #1881]	; 0x759
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d018      	beq.n	8003e08 <FUNC_Transmission+0x938>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e017      	b.n	8003e0a <FUNC_Transmission+0x93a>
 8003dda:	bf00      	nop
 8003ddc:	f3af 8000 	nop.w
 8003de0:	00000000 	.word	0x00000000
 8003de4:	40652000 	.word	0x40652000
 8003de8:	00000000 	.word	0x00000000
 8003dec:	4070d000 	.word	0x4070d000
 8003df0:	200008c8 	.word	0x200008c8
 8003df4:	20001058 	.word	0x20001058
 8003df8:	0800f1e8 	.word	0x0800f1e8
 8003dfc:	3fe00000 	.word	0x3fe00000
 8003e00:	402e0000 	.word	0x402e0000
 8003e04:	40768000 	.word	0x40768000
 8003e08:	2300      	movs	r3, #0
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	4bb7      	ldr	r3, [pc, #732]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003e0e:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
    /* CombinatorialLogic: '<S183>/Logic' incorporates:
 *  Logic: '<S146>/Logical Operator'
 */
    /*@>260f9*/VCU_B./*@>29910*/LogicalOperator_ny/*@>7719*/ = (/*@>260ff*/VCU_B./*@>29913*/FixPtRelationalOperator_j/*@>770f*/ || /*@>26105*/VCU_B./*@>29916*/Compare_j0/*@>7712*/ || /*@>2610b*/VCU_B./*@>29919*/UnitDelay_g/*@>7715*/ || /*@>26111*/VCU_B./*@>2991c*/Timeout_px/*@>7718*/ || /*@>26117*/VCU_B./*@>2991f*/FailSafefirstgear_n);
 8003e12:	4bb6      	ldr	r3, [pc, #728]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003e14:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d113      	bne.n	8003e44 <FUNC_Transmission+0x974>
 8003e1c:	4bb3      	ldr	r3, [pc, #716]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003e1e:	f893 3755 	ldrb.w	r3, [r3, #1877]	; 0x755
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10e      	bne.n	8003e44 <FUNC_Transmission+0x974>
 8003e26:	4bb1      	ldr	r3, [pc, #708]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003e28:	f893 3756 	ldrb.w	r3, [r3, #1878]	; 0x756
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d109      	bne.n	8003e44 <FUNC_Transmission+0x974>
 8003e30:	4bae      	ldr	r3, [pc, #696]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003e32:	f893 3757 	ldrb.w	r3, [r3, #1879]	; 0x757
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d104      	bne.n	8003e44 <FUNC_Transmission+0x974>
 8003e3a:	4bac      	ldr	r3, [pc, #688]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003e3c:	f893 375a 	ldrb.w	r3, [r3, #1882]	; 0x75a
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <FUNC_Transmission+0x978>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <FUNC_Transmission+0x97a>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	4ba7      	ldr	r3, [pc, #668]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003e4e:	f883 275b 	strb.w	r2, [r3, #1883]	; 0x75b
    /* CombinatorialLogic: '<S189>/Logic' incorporates:
 *  Logic: '<S186>/Logical Operator1'
 *  Memory: '<S189>/Memory'
 */
    /*@>26123*/VCU_B./*@>29925*/LogicalOperator1_b/*@>7722*/ = (/*@>26129*/VCU_B./*@>29928*/LogicalOperator_g/*@>771e*/ || (/*@>2612f*/VCU_B./*@>2992b*/STW_shift_up_request/*@>21c49*/ != /*@>21c47*/0.0)/*@>7721*/ || /*@>26135*/VCU_B./*@>2992e*/LogicalOperator_ny);
 8003e52:	4ba6      	ldr	r3, [pc, #664]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003e54:	f893 3753 	ldrb.w	r3, [r3, #1875]	; 0x753
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d114      	bne.n	8003e86 <FUNC_Transmission+0x9b6>
 8003e5c:	4ba3      	ldr	r3, [pc, #652]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003e5e:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	f00b f861 	bl	800ef38 <__aeabi_dcmpeq>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d004      	beq.n	8003e86 <FUNC_Transmission+0x9b6>
 8003e7c:	4b9b      	ldr	r3, [pc, #620]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003e7e:	f893 375b 	ldrb.w	r3, [r3, #1883]	; 0x75b
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <FUNC_Transmission+0x9ba>
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <FUNC_Transmission+0x9bc>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	4b97      	ldr	r3, [pc, #604]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003e90:	f883 275c 	strb.w	r2, [r3, #1884]	; 0x75c
    /*@>26141*/VCU_B./*@>29934*/Memory_p/*@>7724*/ = /*@>26968*/VCU_DW./*@>29cc1*/Memory_PreviousInput_n;
 8003e94:	4b96      	ldr	r3, [pc, #600]	; (80040f0 <FUNC_Transmission+0xc20>)
 8003e96:	f893 2143 	ldrb.w	r2, [r3, #323]	; 0x143
 8003e9a:	4b94      	ldr	r3, [pc, #592]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003e9c:	f883 275d 	strb.w	r2, [r3, #1885]	; 0x75d
    /*@>218f0*/rowIdx/*@>1f2f7*/ = /*@>2614d*/VCU_B./*@>2993a*/FixPtRelationalOperator_dz;
 8003ea0:	4b92      	ldr	r3, [pc, #584]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003ea2:	f893 3752 	ldrb.w	r3, [r3, #1874]	; 0x752
 8003ea6:	617b      	str	r3, [r7, #20]
    /*@>218f4*/rowIdx/*@>1f31e*/ = /*@>221e5*/(int32_T)((/*@>221e2*/(uint32_T)/*@>218f6*/rowIdx/*@>21c43*/ << /*@>218f8*/1)/*@>21c41*/ + /*@>26159*/VCU_B./*@>29940*/LogicalOperator1_b);
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	4a8f      	ldr	r2, [pc, #572]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003eae:	f892 275c 	ldrb.w	r2, [r2, #1884]	; 0x75c
 8003eb2:	4413      	add	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]
    /*@>218fb*/rowIdx/*@>1f345*/ = /*@>221f7*/(int32_T)((/*@>221f4*/(uint32_T)/*@>218fd*/rowIdx/*@>21c39*/ << /*@>218ff*/1)/*@>21c37*/ + /*@>26165*/VCU_B./*@>29946*/Memory_p);
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	4a8c      	ldr	r2, [pc, #560]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003ebc:	f892 275d 	ldrb.w	r2, [r2, #1885]	; 0x75d
 8003ec0:	4413      	add	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]
    /*@>26171*/VCU_B./*@>2994c*/Logic_gy/*@>1f35b*/[/*@>21904*/0U]/*@>1f35a*/ = /*@>26798*/VCU_ConstP./*@>29c34*/pooled37/*@>24f28*/[/*@>24f23*/(uint32_T)/*@>24f25*/rowIdx];
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	4a8b      	ldr	r2, [pc, #556]	; (80040f4 <FUNC_Transmission+0xc24>)
 8003ec8:	4413      	add	r3, r2
 8003eca:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003ece:	4b87      	ldr	r3, [pc, #540]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003ed0:	f883 275e 	strb.w	r2, [r3, #1886]	; 0x75e
    /*@>2617d*/VCU_B./*@>29952*/Logic_gy/*@>1f36e*/[/*@>21909*/1U]/*@>1f36d*/ = /*@>2679e*/VCU_ConstP./*@>29c37*/pooled37/*@>24f31*/[/*@>24f2d*/rowIdx/*@>24f2a*/ + /*@>24f2e*/8U];
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	4a86      	ldr	r2, [pc, #536]	; (80040f4 <FUNC_Transmission+0xc24>)
 8003eda:	4413      	add	r3, r2
 8003edc:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003ee0:	4b82      	ldr	r3, [pc, #520]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003ee2:	f883 275f 	strb.w	r2, [r3, #1887]	; 0x75f
    /* Logic: '<S146>/Logical Operator3' */
    /*@>26183*/VCU_B./*@>29955*/LogicalOperator3_e/*@>772b*/ = ((/*@>26189*/VCU_B./*@>29958*/STW_shift_up_request/*@>21c30*/ != /*@>21c2e*/0.0)/*@>772a*/ || /*@>2618f*/VCU_B./*@>2995b*/Logic_gy/*@>24f36*/[/*@>24f33*/0]);
 8003ee6:	4b81      	ldr	r3, [pc, #516]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003ee8:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	f00b f81c 	bl	800ef38 <__aeabi_dcmpeq>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d004      	beq.n	8003f10 <FUNC_Transmission+0xa40>
 8003f06:	4b79      	ldr	r3, [pc, #484]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003f08:	f893 375e 	ldrb.w	r3, [r3, #1886]	; 0x75e
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <FUNC_Transmission+0xa44>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <FUNC_Transmission+0xa46>
 8003f14:	2300      	movs	r3, #0
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	4b74      	ldr	r3, [pc, #464]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003f1a:	f883 2760 	strb.w	r2, [r3, #1888]	; 0x760
 *
 * Block description for '<S180>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>2619b*/VCU_B./*@>29961*/Uk1_d/*@>7f46*/ = /*@>26974*/VCU_DW./*@>29cc7*/DelayInput1_DSTATE_e;
 8003f1e:	4b74      	ldr	r3, [pc, #464]	; (80040f0 <FUNC_Transmission+0xc20>)
 8003f20:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 8003f24:	4b71      	ldr	r3, [pc, #452]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003f26:	f883 2761 	strb.w	r2, [r3, #1889]	; 0x761
    /* CombinatorialLogic: '<S183>/Logic' incorporates:
 *  Memory: '<S183>/Memory'
 *  RelationalOperator: '<S180>/FixPt Relational Operator'
 */
    /*@>261a1*/VCU_B./*@>29964*/FixPtRelationalOperator_i/*@>7730*/ = (/*@>22214*/(int32_T)/*@>261a7*/VCU_B./*@>29967*/LogicalOperator3_e/*@>772f*/ > /*@>22216*/(int32_T)/*@>261ad*/VCU_B./*@>2996a*/Uk1_d);
 8003f2a:	4b70      	ldr	r3, [pc, #448]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003f2c:	f893 2760 	ldrb.w	r2, [r3, #1888]	; 0x760
 8003f30:	4b6e      	ldr	r3, [pc, #440]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003f32:	f893 3761 	ldrb.w	r3, [r3, #1889]	; 0x761
 8003f36:	429a      	cmp	r2, r3
 8003f38:	bf8c      	ite	hi
 8003f3a:	2301      	movhi	r3, #1
 8003f3c:	2300      	movls	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	4b6a      	ldr	r3, [pc, #424]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003f44:	f883 2762 	strb.w	r2, [r3, #1890]	; 0x762
    /*@>261b3*/VCU_B./*@>2996d*/Memory_ig/*@>7732*/ = /*@>26998*/VCU_DW./*@>29cd6*/Memory_PreviousInput_e;
 8003f48:	4b69      	ldr	r3, [pc, #420]	; (80040f0 <FUNC_Transmission+0xc20>)
 8003f4a:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
 8003f4e:	4b67      	ldr	r3, [pc, #412]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003f50:	f883 2763 	strb.w	r2, [r3, #1891]	; 0x763
    /*@>2190c*/rowIdx/*@>1f39e*/ = /*@>261bf*/VCU_B./*@>29973*/FixPtRelationalOperator_i;
 8003f54:	4b65      	ldr	r3, [pc, #404]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003f56:	f893 3762 	ldrb.w	r3, [r3, #1890]	; 0x762
 8003f5a:	617b      	str	r3, [r7, #20]
    /*@>21910*/rowIdx/*@>1f3c5*/ = /*@>22241*/(int32_T)((/*@>2223e*/(uint32_T)/*@>21912*/rowIdx/*@>21c2a*/ << /*@>21914*/1)/*@>21c28*/ + /*@>261cb*/VCU_B./*@>29979*/LogicalOperator_ny);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	4a62      	ldr	r2, [pc, #392]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003f62:	f892 275b 	ldrb.w	r2, [r2, #1883]	; 0x75b
 8003f66:	4413      	add	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]
    /*@>21917*/rowIdx/*@>1f3ec*/ = /*@>22251*/(int32_T)((/*@>2224e*/(uint32_T)/*@>21919*/rowIdx/*@>21c20*/ << /*@>2191b*/1)/*@>21c1e*/ + /*@>261e3*/VCU_B./*@>29985*/Memory_ig);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4a5f      	ldr	r2, [pc, #380]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003f70:	f892 2763 	ldrb.w	r2, [r2, #1891]	; 0x763
 8003f74:	4413      	add	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]
    /*@>261fb*/VCU_B./*@>29991*/Logic_jv/*@>1f402*/[/*@>21920*/0U]/*@>1f401*/ = /*@>267a4*/VCU_ConstP./*@>29c3a*/pooled37/*@>24f42*/[/*@>24f3d*/(uint32_T)/*@>24f3f*/rowIdx];
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	4a5e      	ldr	r2, [pc, #376]	; (80040f4 <FUNC_Transmission+0xc24>)
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003f82:	4b5a      	ldr	r3, [pc, #360]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003f84:	f883 2764 	strb.w	r2, [r3, #1892]	; 0x764
    /*@>26207*/VCU_B./*@>29997*/Logic_jv/*@>1f415*/[/*@>21925*/1U]/*@>1f414*/ = /*@>267aa*/VCU_ConstP./*@>29c3d*/pooled37/*@>24f4b*/[/*@>24f47*/rowIdx/*@>24f44*/ + /*@>24f48*/8U];
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	4a59      	ldr	r2, [pc, #356]	; (80040f4 <FUNC_Transmission+0xc24>)
 8003f8e:	4413      	add	r3, r2
 8003f90:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003f94:	4b55      	ldr	r3, [pc, #340]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003f96:	f883 2765 	strb.w	r2, [r3, #1893]	; 0x765
    /* CombinatorialLogic: '<S184>/Logic' incorporates:
 *  S-Function (sdspcount2): '<S146>/Counter1'
 */
    /*@>26213*/VCU_B./*@>2999d*/Counter1_p/*@>7fa4*/ = /*@>21552*/false;
 8003f9a:	4b54      	ldr	r3, [pc, #336]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2766 	strb.w	r2, [r3, #1894]	; 0x766
    /* S-Function (sdspcount2): '<S146>/Counter1' */
    /*@>7fa8*/if (/*@>2621f*/VCU_B./*@>299a3*/LogicalOperator_ny) {
 8003fa2:	4b52      	ldr	r3, [pc, #328]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003fa4:	f893 375b 	ldrb.w	r3, [r3, #1883]	; 0x75b
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <FUNC_Transmission+0xae4>
        /*@>269aa*/VCU_DW./*@>29cdf*/Counter1_Count_k/*@>7fac*/ = /*@>28407*/0U;
 8003fac:	4b50      	ldr	r3, [pc, #320]	; (80040f0 <FUNC_Transmission+0xc20>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    }
    /*@>7fc2*/if (/*@>26231*/VCU_B./*@>299ac*/Logic_jv/*@>24f57*/[/*@>24f54*/0]) {
 8003fb4:	4b4d      	ldr	r3, [pc, #308]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003fb6:	f893 3764 	ldrb.w	r3, [r3, #1892]	; 0x764
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d011      	beq.n	8003fe2 <FUNC_Transmission+0xb12>
        /*@>1ec86*/if (/*@>269b0*/VCU_DW./*@>29ce2*/Counter1_Count_k/*@>7fc7*/ < /*@>217a3*/60) {
 8003fbe:	4b4c      	ldr	r3, [pc, #304]	; (80040f0 <FUNC_Transmission+0xc20>)
 8003fc0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003fc4:	2b3b      	cmp	r3, #59	; 0x3b
 8003fc6:	d808      	bhi.n	8003fda <FUNC_Transmission+0xb0a>
            /*@>269c2*/VCU_DW./*@>29ceb*/Counter1_Count_k/*@>28454*/++;
 8003fc8:	4b49      	ldr	r3, [pc, #292]	; (80040f0 <FUNC_Transmission+0xc20>)
 8003fca:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003fce:	3301      	adds	r3, #1
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	4b47      	ldr	r3, [pc, #284]	; (80040f0 <FUNC_Transmission+0xc20>)
 8003fd4:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 8003fd8:	e003      	b.n	8003fe2 <FUNC_Transmission+0xb12>
        } else {
            /*@>269bc*/VCU_DW./*@>29ce8*/Counter1_Count_k/*@>7fce*/ = /*@>2840a*/0U;
 8003fda:	4b45      	ldr	r3, [pc, #276]	; (80040f0 <FUNC_Transmission+0xc20>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        }
    }
    /*@>7fe0*/if (/*@>269b6*/VCU_DW./*@>29ce5*/Counter1_Count_k/*@>7fdf*/ == /*@>217a5*/1) {
 8003fe2:	4b43      	ldr	r3, [pc, #268]	; (80040f0 <FUNC_Transmission+0xc20>)
 8003fe4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d103      	bne.n	8003ff4 <FUNC_Transmission+0xb24>
        /* CombinatorialLogic: '<S184>/Logic' */
        /*@>2624f*/VCU_B./*@>299bb*/Counter1_p/*@>7fe4*/ = /*@>21561*/true;
 8003fec:	4b3f      	ldr	r3, [pc, #252]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2766 	strb.w	r2, [r3, #1894]	; 0x766
 *
 * Block description for '<S182>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>2625b*/VCU_B./*@>299c1*/Uk1_e/*@>8027*/ = /*@>269ce*/VCU_DW./*@>29cee*/DelayInput1_DSTATE_b;
 8003ff4:	4b3e      	ldr	r3, [pc, #248]	; (80040f0 <FUNC_Transmission+0xc20>)
 8003ff6:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 8003ffa:	4b3c      	ldr	r3, [pc, #240]	; (80040ec <FUNC_Transmission+0xc1c>)
 8003ffc:	f883 268c 	strb.w	r2, [r3, #1676]	; 0x68c
    /* RelationalOperator: '<S182>/FixPt Relational Operator' */
    /*@>26261*/VCU_B./*@>299c4*/FixPtRelationalOperator_ia/*@>7739*/ = (/*@>26267*/VCU_B./*@>299c7*/Add_ax/*@>7738*/ > /*@>2626d*/VCU_B./*@>299ca*/Uk1_e);
 8004000:	4b3a      	ldr	r3, [pc, #232]	; (80040ec <FUNC_Transmission+0xc1c>)
 8004002:	f893 268a 	ldrb.w	r2, [r3, #1674]	; 0x68a
 8004006:	4b39      	ldr	r3, [pc, #228]	; (80040ec <FUNC_Transmission+0xc1c>)
 8004008:	f893 368c 	ldrb.w	r3, [r3, #1676]	; 0x68c
 800400c:	429a      	cmp	r2, r3
 800400e:	bf8c      	ite	hi
 8004010:	2301      	movhi	r3, #1
 8004012:	2300      	movls	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	4b34      	ldr	r3, [pc, #208]	; (80040ec <FUNC_Transmission+0xc1c>)
 800401a:	f883 2767 	strb.w	r2, [r3, #1895]	; 0x767
    /* CombinatorialLogic: '<S184>/Logic' incorporates:
 *  Logic: '<S146>/Logical Operator2'
 *  Memory: '<S184>/Memory'
 */
    /*@>26279*/VCU_B./*@>299d0*/LogicalOperator2_c/*@>773f*/ = (/*@>2627f*/VCU_B./*@>299d3*/LogicalOperator_ny/*@>773e*/ || /*@>26285*/VCU_B./*@>299d6*/FixPtRelationalOperator_ia);
 800401e:	4b33      	ldr	r3, [pc, #204]	; (80040ec <FUNC_Transmission+0xc1c>)
 8004020:	f893 375b 	ldrb.w	r3, [r3, #1883]	; 0x75b
 8004024:	2b00      	cmp	r3, #0
 8004026:	d104      	bne.n	8004032 <FUNC_Transmission+0xb62>
 8004028:	4b30      	ldr	r3, [pc, #192]	; (80040ec <FUNC_Transmission+0xc1c>)
 800402a:	f893 3767 	ldrb.w	r3, [r3, #1895]	; 0x767
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <FUNC_Transmission+0xb66>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <FUNC_Transmission+0xb68>
 8004036:	2300      	movs	r3, #0
 8004038:	b2da      	uxtb	r2, r3
 800403a:	4b2c      	ldr	r3, [pc, #176]	; (80040ec <FUNC_Transmission+0xc1c>)
 800403c:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
    /*@>2628b*/VCU_B./*@>299d9*/Memory_py/*@>7741*/ = /*@>269e0*/VCU_DW./*@>29cf7*/Memory_PreviousInput_ez;
 8004040:	4b2b      	ldr	r3, [pc, #172]	; (80040f0 <FUNC_Transmission+0xc20>)
 8004042:	f893 2145 	ldrb.w	r2, [r3, #325]	; 0x145
 8004046:	4b29      	ldr	r3, [pc, #164]	; (80040ec <FUNC_Transmission+0xc1c>)
 8004048:	f883 2769 	strb.w	r2, [r3, #1897]	; 0x769
    /*@>21944*/rowIdx/*@>1f4ec*/ = /*@>26291*/VCU_B./*@>299dc*/Counter1_p;
 800404c:	4b27      	ldr	r3, [pc, #156]	; (80040ec <FUNC_Transmission+0xc1c>)
 800404e:	f893 3766 	ldrb.w	r3, [r3, #1894]	; 0x766
 8004052:	617b      	str	r3, [r7, #20]
    /*@>21948*/rowIdx/*@>1f513*/ = /*@>222e4*/(int32_T)((/*@>222e1*/(uint32_T)/*@>2194a*/rowIdx/*@>21c06*/ << /*@>2194c*/1)/*@>21c04*/ + /*@>2629d*/VCU_B./*@>299e2*/LogicalOperator2_c);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	4a24      	ldr	r2, [pc, #144]	; (80040ec <FUNC_Transmission+0xc1c>)
 800405a:	f892 2768 	ldrb.w	r2, [r2, #1896]	; 0x768
 800405e:	4413      	add	r3, r2
 8004060:	617b      	str	r3, [r7, #20]
    /*@>2194f*/rowIdx/*@>1f53a*/ = /*@>222ee*/(int32_T)((/*@>222eb*/(uint32_T)/*@>21951*/rowIdx/*@>21bfc*/ << /*@>21953*/1)/*@>21bfa*/ + /*@>262a9*/VCU_B./*@>299e8*/Memory_py);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4a21      	ldr	r2, [pc, #132]	; (80040ec <FUNC_Transmission+0xc1c>)
 8004068:	f892 2769 	ldrb.w	r2, [r2, #1897]	; 0x769
 800406c:	4413      	add	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
    /*@>262b5*/VCU_B./*@>299ee*/Logic_p/*@>1f550*/[/*@>21958*/0U]/*@>1f54f*/ = /*@>267bc*/VCU_ConstP./*@>29c46*/pooled37/*@>24f71*/[/*@>24f6c*/(uint32_T)/*@>24f6e*/rowIdx];
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	4a20      	ldr	r2, [pc, #128]	; (80040f4 <FUNC_Transmission+0xc24>)
 8004074:	4413      	add	r3, r2
 8004076:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 800407a:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <FUNC_Transmission+0xc1c>)
 800407c:	f883 276a 	strb.w	r2, [r3, #1898]	; 0x76a
    /*@>262bb*/VCU_B./*@>299f1*/Logic_p/*@>1f563*/[/*@>2195d*/1U]/*@>1f562*/ = /*@>267c2*/VCU_ConstP./*@>29c49*/pooled37/*@>24f7a*/[/*@>24f76*/rowIdx/*@>24f73*/ + /*@>24f77*/8U];
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	3308      	adds	r3, #8
 8004084:	4a1b      	ldr	r2, [pc, #108]	; (80040f4 <FUNC_Transmission+0xc24>)
 8004086:	4413      	add	r3, r2
 8004088:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 800408c:	4b17      	ldr	r3, [pc, #92]	; (80040ec <FUNC_Transmission+0xc1c>)
 800408e:	f883 276b 	strb.w	r2, [r3, #1899]	; 0x76b
    /* DataTypeConversion: '<S137>/Data Type Conversion12' */
    /*@>262c7*/VCU_B./*@>299f7*/Ignition_Cut_d/*@>7745*/ = /*@>262cd*/VCU_B./*@>299fa*/Logic_p/*@>24f84*/[/*@>24f81*/0];
 8004092:	4b16      	ldr	r3, [pc, #88]	; (80040ec <FUNC_Transmission+0xc1c>)
 8004094:	f893 376a 	ldrb.w	r3, [r3, #1898]	; 0x76a
 8004098:	4618      	mov	r0, r3
 800409a:	f00a fc6f 	bl	800e97c <__aeabi_ui2d>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4912      	ldr	r1, [pc, #72]	; (80040ec <FUNC_Transmission+0xc1c>)
 80040a4:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8
    /* S-Function (sdspcount2): '<S145>/Counter' */
    /*@>262d3*/VCU_B./*@>299fd*/Counter_f/*@>8085*/ = /*@>2156a*/false;
 80040a8:	4b10      	ldr	r3, [pc, #64]	; (80040ec <FUNC_Transmission+0xc1c>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c
    /*@>8089*/if (/*@>262d9*/VCU_B./*@>29a00*/LogicalOperator_n) {
 80040b0:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <FUNC_Transmission+0xc1c>)
 80040b2:	f893 3747 	ldrb.w	r3, [r3, #1863]	; 0x747
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <FUNC_Transmission+0xbf2>
        /*@>26a22*/VCU_DW./*@>29d12*/Counter_Count_m/*@>808d*/ = /*@>28419*/0U;
 80040ba:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <FUNC_Transmission+0xc20>)
 80040bc:	2200      	movs	r2, #0
 80040be:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
    }
    /*@>80a3*/if (/*@>262f1*/VCU_B./*@>29a0c*/Logic_c/*@>24f8e*/[/*@>24f8b*/0]) {
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <FUNC_Transmission+0xc1c>)
 80040c4:	f893 3737 	ldrb.w	r3, [r3, #1847]	; 0x737
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d019      	beq.n	8004100 <FUNC_Transmission+0xc30>
        /*@>1ec90*/if (/*@>26a2e*/VCU_DW./*@>29d18*/Counter_Count_m/*@>80a8*/ < /*@>217b1*/500) {
 80040cc:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <FUNC_Transmission+0xc20>)
 80040ce:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80040d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040d6:	d20f      	bcs.n	80040f8 <FUNC_Transmission+0xc28>
            /*@>26a40*/VCU_DW./*@>29d21*/Counter_Count_m/*@>28457*/++;
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <FUNC_Transmission+0xc20>)
 80040da:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80040de:	3301      	adds	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <FUNC_Transmission+0xc20>)
 80040e4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80040e8:	e00a      	b.n	8004100 <FUNC_Transmission+0xc30>
 80040ea:	bf00      	nop
 80040ec:	200008c8 	.word	0x200008c8
 80040f0:	20001058 	.word	0x20001058
 80040f4:	0800f1e8 	.word	0x0800f1e8
        } else {
            /*@>26a3a*/VCU_DW./*@>29d1e*/Counter_Count_m/*@>80af*/ = /*@>2841c*/0U;
 80040f8:	4ba0      	ldr	r3, [pc, #640]	; (800437c <FUNC_Transmission+0xeac>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        }
    }
    /*@>80c1*/if (/*@>26a34*/VCU_DW./*@>29d1b*/Counter_Count_m/*@>80c0*/ == /*@>217b5*/500) {
 8004100:	4b9e      	ldr	r3, [pc, #632]	; (800437c <FUNC_Transmission+0xeac>)
 8004102:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8004106:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800410a:	d103      	bne.n	8004114 <FUNC_Transmission+0xc44>
        /*@>26315*/VCU_B./*@>29a1e*/Counter_f/*@>80c5*/ = /*@>21579*/true;
 800410c:	4b9c      	ldr	r3, [pc, #624]	; (8004380 <FUNC_Transmission+0xeb0>)
 800410e:	2201      	movs	r2, #1
 8004110:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c
    }
    /* End of S-Function (sdspcount2): '<S145>/Counter' */

    /* S-Function (sdspcount2): '<S146>/Counter' */
    /*@>26327*/VCU_B./*@>29a27*/Counter_g/*@>810a*/ = /*@>2157e*/false;
 8004114:	4b9a      	ldr	r3, [pc, #616]	; (8004380 <FUNC_Transmission+0xeb0>)
 8004116:	2200      	movs	r2, #0
 8004118:	f883 276d 	strb.w	r2, [r3, #1901]	; 0x76d
    /*@>810e*/if (/*@>2632d*/VCU_B./*@>29a2a*/LogicalOperator_ny) {
 800411c:	4b98      	ldr	r3, [pc, #608]	; (8004380 <FUNC_Transmission+0xeb0>)
 800411e:	f893 375b 	ldrb.w	r3, [r3, #1883]	; 0x75b
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <FUNC_Transmission+0xc5e>
        /*@>26a4c*/VCU_DW./*@>29d24*/Counter_Count_a/*@>8112*/ = /*@>2841f*/0U;
 8004126:	4b95      	ldr	r3, [pc, #596]	; (800437c <FUNC_Transmission+0xeac>)
 8004128:	2200      	movs	r2, #0
 800412a:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
    }
    /*@>8128*/if (/*@>2635d*/VCU_B./*@>29a42*/Logic_jv/*@>24f98*/[/*@>24f95*/0]) {
 800412e:	4b94      	ldr	r3, [pc, #592]	; (8004380 <FUNC_Transmission+0xeb0>)
 8004130:	f893 3764 	ldrb.w	r3, [r3, #1892]	; 0x764
 8004134:	2b00      	cmp	r3, #0
 8004136:	d011      	beq.n	800415c <FUNC_Transmission+0xc8c>
        /*@>1ec9f*/if (/*@>26a52*/VCU_DW./*@>29d27*/Counter_Count_a/*@>812d*/ < /*@>217b8*/200) {
 8004138:	4b90      	ldr	r3, [pc, #576]	; (800437c <FUNC_Transmission+0xeac>)
 800413a:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 800413e:	2bc7      	cmp	r3, #199	; 0xc7
 8004140:	d808      	bhi.n	8004154 <FUNC_Transmission+0xc84>
            /*@>26a64*/VCU_DW./*@>29d30*/Counter_Count_a/*@>28458*/++;
 8004142:	4b8e      	ldr	r3, [pc, #568]	; (800437c <FUNC_Transmission+0xeac>)
 8004144:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8004148:	3301      	adds	r3, #1
 800414a:	b2da      	uxtb	r2, r3
 800414c:	4b8b      	ldr	r3, [pc, #556]	; (800437c <FUNC_Transmission+0xeac>)
 800414e:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
 8004152:	e003      	b.n	800415c <FUNC_Transmission+0xc8c>
        } else {
            /*@>26a5e*/VCU_DW./*@>29d2d*/Counter_Count_a/*@>8134*/ = /*@>28422*/0U;
 8004154:	4b89      	ldr	r3, [pc, #548]	; (800437c <FUNC_Transmission+0xeac>)
 8004156:	2200      	movs	r2, #0
 8004158:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
        }
    }
    /*@>8146*/if (/*@>26a58*/VCU_DW./*@>29d2a*/Counter_Count_a/*@>8145*/ == /*@>217bd*/180) {
 800415c:	4b87      	ldr	r3, [pc, #540]	; (800437c <FUNC_Transmission+0xeac>)
 800415e:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8004162:	2bb4      	cmp	r3, #180	; 0xb4
 8004164:	d103      	bne.n	800416e <FUNC_Transmission+0xc9e>
        /*@>2636f*/VCU_B./*@>29a4b*/Counter_g/*@>814a*/ = /*@>2158d*/true;
 8004166:	4b86      	ldr	r3, [pc, #536]	; (8004380 <FUNC_Transmission+0xeb0>)
 8004168:	2201      	movs	r2, #1
 800416a:	f883 276d 	strb.w	r2, [r3, #1901]	; 0x76d
    }
    /* End of S-Function (sdspcount2): '<S146>/Counter' */

    /* DataTypeConversion: '<S137>/Data Type Conversion21' */
    /*@>26381*/VCU_B./*@>29a54*/VOVG_ShiftUp_oi/*@>774a*/ = /*@>26387*/VCU_B./*@>29a57*/Logic_jv/*@>24f9d*/[/*@>24f9a*/0];
 800416e:	4b84      	ldr	r3, [pc, #528]	; (8004380 <FUNC_Transmission+0xeb0>)
 8004170:	f893 3764 	ldrb.w	r3, [r3, #1892]	; 0x764
 8004174:	4618      	mov	r0, r3
 8004176:	f00a fc01 	bl	800e97c <__aeabi_ui2d>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4980      	ldr	r1, [pc, #512]	; (8004380 <FUNC_Transmission+0xeb0>)
 8004180:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
 *
 * Block description for '<S171>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>26399*/VCU_B./*@>29a60*/Uk1_m1/*@>818d*/ = /*@>26a70*/VCU_DW./*@>29d33*/DelayInput1_DSTATE_n;
 8004184:	4b7d      	ldr	r3, [pc, #500]	; (800437c <FUNC_Transmission+0xeac>)
 8004186:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
 800418a:	4b7d      	ldr	r3, [pc, #500]	; (8004380 <FUNC_Transmission+0xeb0>)
 800418c:	f883 268d 	strb.w	r2, [r3, #1677]	; 0x68d
    /* RelationalOperator: '<S171>/FixPt Relational Operator' */
    /*@>263b1*/VCU_B./*@>29a6c*/FixPtRelationalOperator_o/*@>774f*/ = (/*@>263b7*/VCU_B./*@>29a6f*/Add_fn/*@>774e*/ < /*@>263bd*/VCU_B./*@>29a72*/Uk1_m1);
 8004190:	4b7b      	ldr	r3, [pc, #492]	; (8004380 <FUNC_Transmission+0xeb0>)
 8004192:	f893 2689 	ldrb.w	r2, [r3, #1673]	; 0x689
 8004196:	4b7a      	ldr	r3, [pc, #488]	; (8004380 <FUNC_Transmission+0xeb0>)
 8004198:	f893 368d 	ldrb.w	r3, [r3, #1677]	; 0x68d
 800419c:	429a      	cmp	r2, r3
 800419e:	bf34      	ite	cc
 80041a0:	2301      	movcc	r3, #1
 80041a2:	2300      	movcs	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	461a      	mov	r2, r3
 80041a8:	4b75      	ldr	r3, [pc, #468]	; (8004380 <FUNC_Transmission+0xeb0>)
 80041aa:	f883 276e 	strb.w	r2, [r3, #1902]	; 0x76e
    /* Switch: '<S140>/Switch' */
    /*@>1eca4*/if (/*@>263cf*/VCU_B./*@>29a7b*/Logic_c/*@>24fa2*/[/*@>24f9f*/0]) {
 80041ae:	4b74      	ldr	r3, [pc, #464]	; (8004380 <FUNC_Transmission+0xeb0>)
 80041b0:	f893 3737 	ldrb.w	r3, [r3, #1847]	; 0x737
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d006      	beq.n	80041c6 <FUNC_Transmission+0xcf6>
        /* MinMax: '<S140>/MinMax' incorporates:
 *  Constant: '<S140>/Constant'
 */
        /*@>263e7*/VCU_B./*@>29a87*/Switch_h/*@>1eca7*/ = /*@>217b6*/20.0;
 80041b8:	4971      	ldr	r1, [pc, #452]	; (8004380 <FUNC_Transmission+0xeb0>)
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	4b71      	ldr	r3, [pc, #452]	; (8004384 <FUNC_Transmission+0xeb4>)
 80041c0:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
 80041c4:	e006      	b.n	80041d4 <FUNC_Transmission+0xd04>
    } else {
        /* MinMax: '<S140>/MinMax' incorporates:
 *  Constant: '<S140>/Constant1'
 */
        /*@>263e1*/VCU_B./*@>29a84*/Switch_h/*@>819d*/ = /*@>217b7*/0.0;
 80041c6:	496e      	ldr	r1, [pc, #440]	; (8004380 <FUNC_Transmission+0xeb0>)
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
    }
    /* End of Switch: '<S140>/Switch' */

    /* MinMax: '<S140>/MinMax' */
    /*@>224df*/if ((/*@>2640b*/VCU_B./*@>29a99*/x_clutch_STW/*@>224d8*/ > /*@>26411*/VCU_B./*@>29a9c*/Switch_h)/*@>224db*/ || /*@>24233*/rtIsNaN(/*@>26417*/VCU_B./*@>29a9f*/Switch_h)) {
 80041d4:	4b6a      	ldr	r3, [pc, #424]	; (8004380 <FUNC_Transmission+0xeb0>)
 80041d6:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 80041da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041de:	4b68      	ldr	r3, [pc, #416]	; (8004380 <FUNC_Transmission+0xeb0>)
 80041e0:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	; 0x1d8
 80041e4:	f00a fed0 	bl	800ef88 <__aeabi_dcmpgt>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <FUNC_Transmission+0xd32>
 80041ee:	4b64      	ldr	r3, [pc, #400]	; (8004380 <FUNC_Transmission+0xeb0>)
 80041f0:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	; 0x1d8
 80041f4:	4610      	mov	r0, r2
 80041f6:	4619      	mov	r1, r3
 80041f8:	f002 f936 	bl	8006468 <rtIsNaN>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d008      	beq.n	8004214 <FUNC_Transmission+0xd44>
        /*@>2642f*/VCU_B./*@>29aab*/MinMax_n/*@>224e1*/ = /*@>26435*/VCU_B./*@>29aae*/x_clutch_STW;
 8004202:	4b5f      	ldr	r3, [pc, #380]	; (8004380 <FUNC_Transmission+0xeb0>)
 8004204:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	495c      	ldr	r1, [pc, #368]	; (8004380 <FUNC_Transmission+0xeb0>)
 800420e:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
 8004212:	e005      	b.n	8004220 <FUNC_Transmission+0xd50>
    } else {
        /*@>26423*/VCU_B./*@>29aa5*/MinMax_n/*@>224de*/ = /*@>26429*/VCU_B./*@>29aa8*/Switch_h;
 8004214:	4b5a      	ldr	r3, [pc, #360]	; (8004380 <FUNC_Transmission+0xeb0>)
 8004216:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	; 0x1d8
 800421a:	4959      	ldr	r1, [pc, #356]	; (8004380 <FUNC_Transmission+0xeb0>)
 800421c:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
    }
    /*@>22517*/if (!/*@<2421b*/(/*@>26447*/VCU_B./*@>29ab7*/MinMax_n/*@>22510*/ > /*@>22756*/0.0)) {
 8004220:	4b57      	ldr	r3, [pc, #348]	; (8004380 <FUNC_Transmission+0xeb0>)
 8004222:	e9d3 2378 	ldrd	r2, r3, [r3, #480]	; 0x1e0
 8004226:	2101      	movs	r1, #1
 8004228:	460c      	mov	r4, r1
 800422a:	4610      	mov	r0, r2
 800422c:	4619      	mov	r1, r3
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	f00a fea7 	bl	800ef88 <__aeabi_dcmpgt>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <FUNC_Transmission+0xd74>
 8004240:	2300      	movs	r3, #0
 8004242:	461c      	mov	r4, r3
 8004244:	b2e3      	uxtb	r3, r4
 8004246:	f083 0301 	eor.w	r3, r3, #1
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d006      	beq.n	800425e <FUNC_Transmission+0xd8e>
        /*@>2645f*/VCU_B./*@>29ac3*/MinMax_n/*@>22516*/ = /*@>2275a*/0.0;
 8004250:	494b      	ldr	r1, [pc, #300]	; (8004380 <FUNC_Transmission+0xeb0>)
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
    }
    /* RelationalOperator: '<S149>/Compare' incorporates:
 *  Constant: '<S149>/Constant'
 */
    /*@>26471*/VCU_B./*@>29acc*/Compare_gr/*@>7755*/ = (/*@>26477*/VCU_B./*@>29acf*/MinMax_n/*@>7754*/ > /*@>217bc*/1.0);
 800425e:	4b48      	ldr	r3, [pc, #288]	; (8004380 <FUNC_Transmission+0xeb0>)
 8004260:	e9d3 2378 	ldrd	r2, r3, [r3, #480]	; 0x1e0
 8004264:	2101      	movs	r1, #1
 8004266:	460c      	mov	r4, r1
 8004268:	4610      	mov	r0, r2
 800426a:	4619      	mov	r1, r3
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	4b45      	ldr	r3, [pc, #276]	; (8004388 <FUNC_Transmission+0xeb8>)
 8004272:	f00a fe89 	bl	800ef88 <__aeabi_dcmpgt>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <FUNC_Transmission+0xdb0>
 800427c:	2300      	movs	r3, #0
 800427e:	461c      	mov	r4, r3
 8004280:	b2e3      	uxtb	r3, r4
 8004282:	461a      	mov	r2, r3
 8004284:	4b3e      	ldr	r3, [pc, #248]	; (8004380 <FUNC_Transmission+0xeb0>)
 8004286:	f883 276f 	strb.w	r2, [r3, #1903]	; 0x76f
    /* DataTypeConversion: '<S137>/Data Type Conversion13' */
    /*@>26489*/VCU_B./*@>29ad8*/VOVG_IN_g/*@>7758*/ = /*@>2648f*/VCU_B./*@>29adb*/Compare_gr;
 800428a:	4b3d      	ldr	r3, [pc, #244]	; (8004380 <FUNC_Transmission+0xeb0>)
 800428c:	f893 376f 	ldrb.w	r3, [r3, #1903]	; 0x76f
 8004290:	4618      	mov	r0, r3
 8004292:	f00a fb73 	bl	800e97c <__aeabi_ui2d>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4939      	ldr	r1, [pc, #228]	; (8004380 <FUNC_Transmission+0xeb0>)
 800429c:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
    /* Sum: '<S140>/Add' */
    /*@>264a7*/VCU_B./*@>29ae7*/Add_g/*@>a814*/ = /*@>264ad*/VCU_B./*@>29aea*/MinMax_n/*@>a811*/ - /*@>264b3*/VCU_B./*@>29aed*/x_clutch_b;
 80042a0:	4b37      	ldr	r3, [pc, #220]	; (8004380 <FUNC_Transmission+0xeb0>)
 80042a2:	e9d3 0178 	ldrd	r0, r1, [r3, #480]	; 0x1e0
 80042a6:	4b36      	ldr	r3, [pc, #216]	; (8004380 <FUNC_Transmission+0xeb0>)
 80042a8:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b0:	f00a fa26 	bl	800e700 <__aeabi_dsub>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4931      	ldr	r1, [pc, #196]	; (8004380 <FUNC_Transmission+0xeb0>)
 80042ba:	e9c1 237c 	strd	r2, r3, [r1, #496]	; 0x1f0
    /* RelationalOperator: '<S151>/Compare' incorporates:
 *  Constant: '<S151>/Constant'
 */
    /*@>264c5*/VCU_B./*@>29af6*/Compare_gp/*@>7761*/ = (/*@>264cb*/VCU_B./*@>29af9*/Add_g/*@>7760*/ < /*@>217bf*/-0.5);
 80042be:	4b30      	ldr	r3, [pc, #192]	; (8004380 <FUNC_Transmission+0xeb0>)
 80042c0:	e9d3 237c 	ldrd	r2, r3, [r3, #496]	; 0x1f0
 80042c4:	2101      	movs	r1, #1
 80042c6:	460c      	mov	r4, r1
 80042c8:	4610      	mov	r0, r2
 80042ca:	4619      	mov	r1, r3
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	4b2e      	ldr	r3, [pc, #184]	; (800438c <FUNC_Transmission+0xebc>)
 80042d2:	f00a fe3b 	bl	800ef4c <__aeabi_dcmplt>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <FUNC_Transmission+0xe10>
 80042dc:	2300      	movs	r3, #0
 80042de:	461c      	mov	r4, r3
 80042e0:	b2e3      	uxtb	r3, r4
 80042e2:	461a      	mov	r2, r3
 80042e4:	4b26      	ldr	r3, [pc, #152]	; (8004380 <FUNC_Transmission+0xeb0>)
 80042e6:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
    /* Lookup_n-D: '<S140>/Duty Cycle MHJ1' */
    /*@>264dd*/VCU_B./*@>29b02*/DutyCycleMHJ1_n/*@>a8de*/ = /*@>24237*/look1_binlxpw(/*@>264e3*/VCU_B./*@>29b05*/Add_g, /*@>267d4*/VCU_ConstP./*@>29c52*/pooled29, /*@>267da*/VCU_ConstP./*@>29c55*/pooled28, /*@>216be*/14U);
 80042ea:	4b25      	ldr	r3, [pc, #148]	; (8004380 <FUNC_Transmission+0xeb0>)
 80042ec:	e9d3 237c 	ldrd	r2, r3, [r3, #496]	; 0x1f0
 80042f0:	210e      	movs	r1, #14
 80042f2:	9100      	str	r1, [sp, #0]
 80042f4:	4610      	mov	r0, r2
 80042f6:	4619      	mov	r1, r3
 80042f8:	4a25      	ldr	r2, [pc, #148]	; (8004390 <FUNC_Transmission+0xec0>)
 80042fa:	4b26      	ldr	r3, [pc, #152]	; (8004394 <FUNC_Transmission+0xec4>)
 80042fc:	f001 fc9c 	bl	8005c38 <look1_binlxpw>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	491e      	ldr	r1, [pc, #120]	; (8004380 <FUNC_Transmission+0xeb0>)
 8004306:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8
    /* Product: '<S140>/Product1' */
    /*@>264f5*/VCU_B./*@>29b0e*/Product1_f/*@>776f*/ = /*@>264fb*/VCU_B./*@>29b11*/DutyCycleMHJ1_n/*@>21bd4*/ * /*@>223d8*/(real_T)/*@>26501*/VCU_B./*@>29b14*/Compare_gp;
 800430a:	4b1d      	ldr	r3, [pc, #116]	; (8004380 <FUNC_Transmission+0xeb0>)
 800430c:	e9d3 457e 	ldrd	r4, r5, [r3, #504]	; 0x1f8
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <FUNC_Transmission+0xeb0>)
 8004312:	f893 3770 	ldrb.w	r3, [r3, #1904]	; 0x770
 8004316:	4618      	mov	r0, r3
 8004318:	f00a fb30 	bl	800e97c <__aeabi_ui2d>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4620      	mov	r0, r4
 8004322:	4629      	mov	r1, r5
 8004324:	f00a fba0 	bl	800ea68 <__aeabi_dmul>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4914      	ldr	r1, [pc, #80]	; (8004380 <FUNC_Transmission+0xeb0>)
 800432e:	e9c1 2380 	strd	r2, r3, [r1, #512]	; 0x200
    /* RelationalOperator: '<S150>/Compare' incorporates:
 *  Constant: '<S150>/Constant'
 */
    /*@>2650d*/VCU_B./*@>29b1a*/Compare_kk/*@>7773*/ = (/*@>26513*/VCU_B./*@>29b1d*/x_clutch_b/*@>7772*/ > /*@>217c2*/20.0);
 8004332:	4b13      	ldr	r3, [pc, #76]	; (8004380 <FUNC_Transmission+0xeb0>)
 8004334:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	2101      	movs	r1, #1
 800433e:	460c      	mov	r4, r1
 8004340:	4610      	mov	r0, r2
 8004342:	4619      	mov	r1, r3
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <FUNC_Transmission+0xeb4>)
 800434a:	f00a fe1d 	bl	800ef88 <__aeabi_dcmpgt>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <FUNC_Transmission+0xe88>
 8004354:	2300      	movs	r3, #0
 8004356:	461c      	mov	r4, r3
 8004358:	b2e3      	uxtb	r3, r4
 800435a:	461a      	mov	r2, r3
 800435c:	4b08      	ldr	r3, [pc, #32]	; (8004380 <FUNC_Transmission+0xeb0>)
 800435e:	f883 2771 	strb.w	r2, [r3, #1905]	; 0x771
    /* Switch: '<S140>/Switch1' incorporates:
 *  Constant: '<S140>/Constant2'
 *  Constant: '<S140>/Constant3'
 */
    /*@>1ecae*/if (/*@>2651f*/VCU_B./*@>29b23*/Compare_kk) {
 8004362:	4b07      	ldr	r3, [pc, #28]	; (8004380 <FUNC_Transmission+0xeb0>)
 8004364:	f893 3771 	ldrb.w	r3, [r3, #1905]	; 0x771
 8004368:	2b00      	cmp	r3, #0
 800436a:	d015      	beq.n	8004398 <FUNC_Transmission+0xec8>
        /*@>26531*/VCU_B./*@>29b2c*/Switch1_n/*@>1ecb1*/ = /*@>217c3*/2.0;
 800436c:	4904      	ldr	r1, [pc, #16]	; (8004380 <FUNC_Transmission+0xeb0>)
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004376:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
 800437a:	e013      	b.n	80043a4 <FUNC_Transmission+0xed4>
 800437c:	20001058 	.word	0x20001058
 8004380:	200008c8 	.word	0x200008c8
 8004384:	40340000 	.word	0x40340000
 8004388:	3ff00000 	.word	0x3ff00000
 800438c:	bfe00000 	.word	0xbfe00000
 8004390:	0800f498 	.word	0x0800f498
 8004394:	0800f420 	.word	0x0800f420
    } else {
        /*@>2652b*/VCU_B./*@>29b29*/Switch1_n/*@>81d8*/ = /*@>217c4*/1.0;
 8004398:	49a5      	ldr	r1, [pc, #660]	; (8004630 <FUNC_Transmission+0x1160>)
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	4ba5      	ldr	r3, [pc, #660]	; (8004634 <FUNC_Transmission+0x1164>)
 80043a0:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
    }
    /* End of Switch: '<S140>/Switch1' */

    /* Product: '<S140>/Product2' */
    /*@>26543*/VCU_B./*@>29b35*/Product2_f/*@>777b*/ = /*@>26549*/VCU_B./*@>29b38*/Product1_f/*@>21bd0*/ * /*@>2654f*/VCU_B./*@>29b3b*/Switch1_n;
 80043a4:	4ba2      	ldr	r3, [pc, #648]	; (8004630 <FUNC_Transmission+0x1160>)
 80043a6:	e9d3 0180 	ldrd	r0, r1, [r3, #512]	; 0x200
 80043aa:	4ba1      	ldr	r3, [pc, #644]	; (8004630 <FUNC_Transmission+0x1160>)
 80043ac:	e9d3 2382 	ldrd	r2, r3, [r3, #520]	; 0x208
 80043b0:	f00a fb5a 	bl	800ea68 <__aeabi_dmul>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	499d      	ldr	r1, [pc, #628]	; (8004630 <FUNC_Transmission+0x1160>)
 80043ba:	e9c1 2384 	strd	r2, r3, [r1, #528]	; 0x210
    /* DataTypeConversion: '<S137>/Data Type Conversion16' */
    /*@>2655b*/VCU_B./*@>29b41*/MHJ9_OUT_d5/*@>777e*/ = /*@>26561*/VCU_B./*@>29b44*/Product2_f;
 80043be:	4b9c      	ldr	r3, [pc, #624]	; (8004630 <FUNC_Transmission+0x1160>)
 80043c0:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
 80043c4:	499a      	ldr	r1, [pc, #616]	; (8004630 <FUNC_Transmission+0x1160>)
 80043c6:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
    /* RelationalOperator: '<S152>/Compare' incorporates:
 *  Constant: '<S152>/Constant'
 */
    /*@>2656d*/VCU_B./*@>29b4a*/Compare_js/*@>7782*/ = (/*@>26573*/VCU_B./*@>29b4d*/Add_g/*@>7781*/ > /*@>217c5*/0.0);
 80043ca:	4b99      	ldr	r3, [pc, #612]	; (8004630 <FUNC_Transmission+0x1160>)
 80043cc:	e9d3 237c 	ldrd	r2, r3, [r3, #496]	; 0x1f0
 80043d0:	2101      	movs	r1, #1
 80043d2:	460c      	mov	r4, r1
 80043d4:	4610      	mov	r0, r2
 80043d6:	4619      	mov	r1, r3
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	f00a fdd2 	bl	800ef88 <__aeabi_dcmpgt>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <FUNC_Transmission+0xf1e>
 80043ea:	2300      	movs	r3, #0
 80043ec:	461c      	mov	r4, r3
 80043ee:	b2e3      	uxtb	r3, r4
 80043f0:	461a      	mov	r2, r3
 80043f2:	4b8f      	ldr	r3, [pc, #572]	; (8004630 <FUNC_Transmission+0x1160>)
 80043f4:	f883 2772 	strb.w	r2, [r3, #1906]	; 0x772
    /* Product: '<S140>/Product3' */
    /*@>2657f*/VCU_B./*@>29b53*/Product3_n/*@>7789*/ = /*@>26585*/VCU_B./*@>29b56*/DutyCycleMHJ1_n/*@>21bcc*/ * /*@>223fa*/(real_T)/*@>2658b*/VCU_B./*@>29b59*/Compare_js;
 80043f8:	4b8d      	ldr	r3, [pc, #564]	; (8004630 <FUNC_Transmission+0x1160>)
 80043fa:	e9d3 457e 	ldrd	r4, r5, [r3, #504]	; 0x1f8
 80043fe:	4b8c      	ldr	r3, [pc, #560]	; (8004630 <FUNC_Transmission+0x1160>)
 8004400:	f893 3772 	ldrb.w	r3, [r3, #1906]	; 0x772
 8004404:	4618      	mov	r0, r3
 8004406:	f00a fab9 	bl	800e97c <__aeabi_ui2d>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4620      	mov	r0, r4
 8004410:	4629      	mov	r1, r5
 8004412:	f00a fb29 	bl	800ea68 <__aeabi_dmul>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4985      	ldr	r1, [pc, #532]	; (8004630 <FUNC_Transmission+0x1160>)
 800441c:	e9c1 2388 	strd	r2, r3, [r1, #544]	; 0x220
    /* DataTypeConversion: '<S137>/Data Type Conversion15' */
    /*@>26591*/VCU_B./*@>29b5c*/MHJ9_IN_h/*@>778c*/ = /*@>26597*/VCU_B./*@>29b5f*/Product3_n;
 8004420:	4b83      	ldr	r3, [pc, #524]	; (8004630 <FUNC_Transmission+0x1160>)
 8004422:	e9d3 2388 	ldrd	r2, r3, [r3, #544]	; 0x220
 8004426:	4982      	ldr	r1, [pc, #520]	; (8004630 <FUNC_Transmission+0x1160>)
 8004428:	e9c1 238a 	strd	r2, r3, [r1, #552]	; 0x228
    /* RelationalOperator: '<S153>/Compare' incorporates:
 *  Constant: '<S153>/Constant'
 */
    /*@>2659d*/VCU_B./*@>29b62*/Compare_hu/*@>7790*/ = (/*@>265a3*/VCU_B./*@>29b65*/Add_g/*@>778f*/ < /*@>217c6*/-20.0);
 800442c:	4b80      	ldr	r3, [pc, #512]	; (8004630 <FUNC_Transmission+0x1160>)
 800442e:	e9d3 237c 	ldrd	r2, r3, [r3, #496]	; 0x1f0
 8004432:	2101      	movs	r1, #1
 8004434:	460c      	mov	r4, r1
 8004436:	4610      	mov	r0, r2
 8004438:	4619      	mov	r1, r3
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	4b7e      	ldr	r3, [pc, #504]	; (8004638 <FUNC_Transmission+0x1168>)
 8004440:	f00a fd84 	bl	800ef4c <__aeabi_dcmplt>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <FUNC_Transmission+0xf7e>
 800444a:	2300      	movs	r3, #0
 800444c:	461c      	mov	r4, r3
 800444e:	b2e3      	uxtb	r3, r4
 8004450:	461a      	mov	r2, r3
 8004452:	4b77      	ldr	r3, [pc, #476]	; (8004630 <FUNC_Transmission+0x1160>)
 8004454:	f883 2773 	strb.w	r2, [r3, #1907]	; 0x773
    /* DataTypeConversion: '<S137>/Data Type Conversion14' */
    /*@>265af*/VCU_B./*@>29b6b*/VOVG_OUT_b/*@>7793*/ = /*@>265b5*/VCU_B./*@>29b6e*/Compare_hu;
 8004458:	4b75      	ldr	r3, [pc, #468]	; (8004630 <FUNC_Transmission+0x1160>)
 800445a:	f893 3773 	ldrb.w	r3, [r3, #1907]	; 0x773
 800445e:	4618      	mov	r0, r3
 8004460:	f00a fa8c 	bl	800e97c <__aeabi_ui2d>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4971      	ldr	r1, [pc, #452]	; (8004630 <FUNC_Transmission+0x1160>)
 800446a:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
    /* DataTypeConversion: '<S137>/Data Type Conversion20' incorporates:
 *  Constant: '<S137>/Constant'
 */
    /*@>265c1*/VCU_B./*@>29b74*/LC_ready_bit_p/*@>7796*/ = /*@>2196e*/true;
 800446e:	4b70      	ldr	r3, [pc, #448]	; (8004630 <FUNC_Transmission+0x1160>)
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774
    /* DataTypeConversion: '<S137>/Data Type Conversion17' */
    /*@>265cd*/VCU_B./*@>29b7a*/x_clutch_LC_bg/*@>7799*/ = /*@>217c7*/0.0;
 8004476:	496e      	ldr	r1, [pc, #440]	; (8004630 <FUNC_Transmission+0x1160>)
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	e9c1 238e 	strd	r2, r3, [r1, #568]	; 0x238
    /* DataTypeConversion: '<S137>/Data Type Conversion18' */
    /*@>265d9*/VCU_B./*@>29b80*/LC_Mdes_o/*@>779c*/ = /*@>217c8*/0.0;
 8004484:	496a      	ldr	r1, [pc, #424]	; (8004630 <FUNC_Transmission+0x1160>)
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	e9c1 2390 	strd	r2, r3, [r1, #576]	; 0x240
    /* DataTypeConversion: '<S137>/Data Type Conversion19' */
    /*@>265e5*/VCU_B./*@>29b86*/LC_Fnr_lv/*@>779f*/ = /*@>217c9*/0.0;
 8004492:	4967      	ldr	r1, [pc, #412]	; (8004630 <FUNC_Transmission+0x1160>)
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e9c1 2392 	strd	r2, r3, [r1, #584]	; 0x248
    /* Update for Memory: '<S148>/Memory' */
    /*@>26abe*/VCU_DW./*@>29d5a*/Memory_PreviousInput_g/*@>790c*/ = /*@>265f1*/VCU_B./*@>29b8c*/LC_dash_bit;
 80044a0:	4b63      	ldr	r3, [pc, #396]	; (8004630 <FUNC_Transmission+0x1160>)
 80044a2:	f893 2783 	ldrb.w	r2, [r3, #1923]	; 0x783
 80044a6:	4b65      	ldr	r3, [pc, #404]	; (800463c <FUNC_Transmission+0x116c>)
 80044a8:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
    /* Update for Memory: '<S148>/Memory1' */
    /*@>26aca*/VCU_DW./*@>29d60*/Memory1_PreviousInput_p/*@>790e*/ = /*@>265fd*/VCU_B./*@>29b92*/Brakelight_n;
 80044ac:	4b60      	ldr	r3, [pc, #384]	; (8004630 <FUNC_Transmission+0x1160>)
 80044ae:	f893 2727 	ldrb.w	r2, [r3, #1831]	; 0x727
 80044b2:	4b62      	ldr	r3, [pc, #392]	; (800463c <FUNC_Transmission+0x116c>)
 80044b4:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
    /* Update for Memory: '<S190>/Memory' */
    /*@>26ad6*/VCU_DW./*@>29d66*/Memory_PreviousInput_gi/*@>7910*/ = /*@>26609*/VCU_B./*@>29b98*/Logic_b/*@>24fc8*/[/*@>24fc5*/0];
 80044b8:	4b5d      	ldr	r3, [pc, #372]	; (8004630 <FUNC_Transmission+0x1160>)
 80044ba:	f893 272b 	ldrb.w	r2, [r3, #1835]	; 0x72b
 80044be:	4b5f      	ldr	r3, [pc, #380]	; (800463c <FUNC_Transmission+0x116c>)
 80044c0:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
    /* Update for UnitDelay: '<S145>/Unit Delay1' */
    /*@>26ae2*/VCU_DW./*@>29d6c*/UnitDelay1_DSTATE_p/*@>81e9*/ = /*@>26615*/VCU_B./*@>29b9e*/Logic_c/*@>24fd2*/[/*@>24fcf*/0];
 80044c4:	4b5a      	ldr	r3, [pc, #360]	; (8004630 <FUNC_Transmission+0x1160>)
 80044c6:	f893 2737 	ldrb.w	r2, [r3, #1847]	; 0x737
 80044ca:	4b5c      	ldr	r3, [pc, #368]	; (800463c <FUNC_Transmission+0x116c>)
 80044cc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    /* Update for Delay: '<S145>/Delay' */
/*@>1e4c4*/    for (/*@>28447*/rowIdx = /*@>217cf*/0; /*@>2844f*/rowIdx < /*@>217d0*/19; /*@>2844c*/rowIdx/*@>2845a*/++) {
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e00e      	b.n	80044f4 <FUNC_Transmission+0x1024>
        /*@>26b00*/VCU_DW./*@>29d7b*/Delay_DSTATE_j/*@>1ca78*/[/*@>21755*/rowIdx]/*@>8217*/ = /*@>26b06*/VCU_DW./*@>29d7e*/Delay_DSTATE_j/*@>24fdf*/[/*@>24fdb*/rowIdx/*@>24fd9*/ + /*@>24fdc*/1];
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	3301      	adds	r3, #1
 80044da:	4a58      	ldr	r2, [pc, #352]	; (800463c <FUNC_Transmission+0x116c>)
 80044dc:	4413      	add	r3, r2
 80044de:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
 80044e2:	4a56      	ldr	r2, [pc, #344]	; (800463c <FUNC_Transmission+0x116c>)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	4413      	add	r3, r2
 80044e8:	33d8      	adds	r3, #216	; 0xd8
 80044ea:	460a      	mov	r2, r1
 80044ec:	719a      	strb	r2, [r3, #6]
    /* Update for Memory: '<S190>/Memory' */
    /*@>26ad6*/VCU_DW./*@>29d66*/Memory_PreviousInput_gi/*@>7910*/ = /*@>26609*/VCU_B./*@>29b98*/Logic_b/*@>24fc8*/[/*@>24fc5*/0];
    /* Update for UnitDelay: '<S145>/Unit Delay1' */
    /*@>26ae2*/VCU_DW./*@>29d6c*/UnitDelay1_DSTATE_p/*@>81e9*/ = /*@>26615*/VCU_B./*@>29b9e*/Logic_c/*@>24fd2*/[/*@>24fcf*/0];
    /* Update for Delay: '<S145>/Delay' */
/*@>1e4c4*/    for (/*@>28447*/rowIdx = /*@>217cf*/0; /*@>2844f*/rowIdx < /*@>217d0*/19; /*@>2844c*/rowIdx/*@>2845a*/++) {
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	3301      	adds	r3, #1
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2b12      	cmp	r3, #18
 80044f8:	dded      	ble.n	80044d6 <FUNC_Transmission+0x1006>
        /*@>26b00*/VCU_DW./*@>29d7b*/Delay_DSTATE_j/*@>1ca78*/[/*@>21755*/rowIdx]/*@>8217*/ = /*@>26b06*/VCU_DW./*@>29d7e*/Delay_DSTATE_j/*@>24fdf*/[/*@>24fdb*/rowIdx/*@>24fd9*/ + /*@>24fdc*/1];
    }
    /*@>26afa*/VCU_DW./*@>29d78*/Delay_DSTATE_j/*@>822f*/[/*@>215ae*/19]/*@>8239*/ = /*@>2662d*/VCU_B./*@>29baa*/LogicalOperator_n;
 80044fa:	4b4d      	ldr	r3, [pc, #308]	; (8004630 <FUNC_Transmission+0x1160>)
 80044fc:	f893 2747 	ldrb.w	r2, [r3, #1863]	; 0x747
 8004500:	4b4e      	ldr	r3, [pc, #312]	; (800463c <FUNC_Transmission+0x116c>)
 8004502:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
    /* End of Update for Delay: '<S145>/Delay' */

    /* Update for Memory: '<S175>/Memory' */
    /*@>26b12*/VCU_DW./*@>29d84*/Memory_PreviousInput_pa/*@>7914*/ = /*@>26639*/VCU_B./*@>29bb0*/Logic_g/*@>24fe4*/[/*@>24fe1*/0];
 8004506:	4b4a      	ldr	r3, [pc, #296]	; (8004630 <FUNC_Transmission+0x1160>)
 8004508:	f893 2732 	ldrb.w	r2, [r3, #1842]	; 0x732
 800450c:	4b4b      	ldr	r3, [pc, #300]	; (800463c <FUNC_Transmission+0x116c>)
 800450e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 *
 * Block description for '<S172>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>26b1e*/VCU_DW./*@>29d8a*/DelayInput1_DSTATE_j/*@>8245*/ = /*@>26645*/VCU_B./*@>29bb6*/STW_shift_down_request;
 8004512:	4b47      	ldr	r3, [pc, #284]	; (8004630 <FUNC_Transmission+0x1160>)
 8004514:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	4947      	ldr	r1, [pc, #284]	; (800463c <FUNC_Transmission+0x116c>)
 800451e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    /* Update for Delay: '<S145>/Delay1' */
    /*@>26b2a*/VCU_DW./*@>29d90*/Delay1_DSTATE_p/*@>8251*/ = /*@>26651*/VCU_B./*@>29bbc*/LogicalOperator_n;
 8004522:	4b43      	ldr	r3, [pc, #268]	; (8004630 <FUNC_Transmission+0x1160>)
 8004524:	f893 2747 	ldrb.w	r2, [r3, #1863]	; 0x747
 8004528:	4b44      	ldr	r3, [pc, #272]	; (800463c <FUNC_Transmission+0x116c>)
 800452a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    /* Update for Memory: '<S173>/Memory' */
    /*@>26b36*/VCU_DW./*@>29d96*/Memory_PreviousInput_c/*@>7918*/ = /*@>2665d*/VCU_B./*@>29bc2*/Logic_c/*@>24ff3*/[/*@>24ff0*/0];
 800452e:	4b40      	ldr	r3, [pc, #256]	; (8004630 <FUNC_Transmission+0x1160>)
 8004530:	f893 2737 	ldrb.w	r2, [r3, #1847]	; 0x737
 8004534:	4b41      	ldr	r3, [pc, #260]	; (800463c <FUNC_Transmission+0x116c>)
 8004536:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
    /* Update for UnitDelay: '<S145>/Unit Delay4' */
    /*@>26b42*/VCU_DW./*@>29d9c*/UnitDelay4_DSTATE_e/*@>825d*/ = /*@>26669*/VCU_B./*@>29bc8*/FixPtRelationalOperator_o;
 800453a:	4b3d      	ldr	r3, [pc, #244]	; (8004630 <FUNC_Transmission+0x1160>)
 800453c:	f893 276e 	ldrb.w	r2, [r3, #1902]	; 0x76e
 8004540:	4b3e      	ldr	r3, [pc, #248]	; (800463c <FUNC_Transmission+0x116c>)
 8004542:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
    /* Update for UnitDelay: '<S146>/Unit Delay' */
    /*@>26b48*/VCU_DW./*@>29d9f*/UnitDelay_DSTATE_g/*@>8269*/ = /*@>2666f*/VCU_B./*@>29bcb*/Logic_jv/*@>24ff8*/[/*@>24ff5*/0];
 8004546:	4b3a      	ldr	r3, [pc, #232]	; (8004630 <FUNC_Transmission+0x1160>)
 8004548:	f893 2764 	ldrb.w	r2, [r3, #1892]	; 0x764
 800454c:	4b3b      	ldr	r3, [pc, #236]	; (800463c <FUNC_Transmission+0x116c>)
 800454e:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    /* Update for UnitDelay: '<S145>/Unit Delay2' */
    /*@>26b4e*/VCU_DW./*@>29da2*/UnitDelay2_DSTATE_k/*@>8275*/ = /*@>26675*/VCU_B./*@>29bce*/Counter_f;
 8004552:	4b37      	ldr	r3, [pc, #220]	; (8004630 <FUNC_Transmission+0x1160>)
 8004554:	f893 276c 	ldrb.w	r2, [r3, #1900]	; 0x76c
 8004558:	4b38      	ldr	r3, [pc, #224]	; (800463c <FUNC_Transmission+0x116c>)
 800455a:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
    /* Update for Memory: '<S174>/Memory' */
    /*@>26b54*/VCU_DW./*@>29da5*/Memory_PreviousInput_jz/*@>791d*/ = /*@>2667b*/VCU_B./*@>29bd1*/Logic_j/*@>24ffd*/[/*@>24ffa*/0];
 800455e:	4b34      	ldr	r3, [pc, #208]	; (8004630 <FUNC_Transmission+0x1160>)
 8004560:	f893 2749 	ldrb.w	r2, [r3, #1865]	; 0x749
 8004564:	4b35      	ldr	r3, [pc, #212]	; (800463c <FUNC_Transmission+0x116c>)
 8004566:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
 *
 * Block description for '<S188>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>26b5a*/VCU_DW./*@>29da8*/DelayInput1_DSTATE_m5/*@>8281*/ = /*@>26681*/VCU_B./*@>29bd4*/LogicalOperator3_n;
 800456a:	4b31      	ldr	r3, [pc, #196]	; (8004630 <FUNC_Transmission+0x1160>)
 800456c:	f893 2750 	ldrb.w	r2, [r3, #1872]	; 0x750
 8004570:	4b32      	ldr	r3, [pc, #200]	; (800463c <FUNC_Transmission+0x116c>)
 8004572:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 *
 * Block description for '<S181>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>26b60*/VCU_DW./*@>29dab*/DelayInput1_DSTATE_m/*@>828d*/ = /*@>26687*/VCU_B./*@>29bd7*/Add_ax;
 8004576:	4b2e      	ldr	r3, [pc, #184]	; (8004630 <FUNC_Transmission+0x1160>)
 8004578:	f893 268a 	ldrb.w	r2, [r3, #1674]	; 0x68a
 800457c:	4b2f      	ldr	r3, [pc, #188]	; (800463c <FUNC_Transmission+0x116c>)
 800457e:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
    /* Update for UnitDelay: '<S145>/Unit Delay' */
    /*@>26b66*/VCU_DW./*@>29dae*/UnitDelay_DSTATE_n/*@>8299*/ = /*@>2668d*/VCU_B./*@>29bda*/Logic_j/*@>25002*/[/*@>24fff*/0];
 8004582:	4b2b      	ldr	r3, [pc, #172]	; (8004630 <FUNC_Transmission+0x1160>)
 8004584:	f893 2749 	ldrb.w	r2, [r3, #1865]	; 0x749
 8004588:	4b2c      	ldr	r3, [pc, #176]	; (800463c <FUNC_Transmission+0x116c>)
 800458a:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
    /* Update for UnitDelay: '<S146>/Unit Delay1' */
    /*@>26b6c*/VCU_DW./*@>29db1*/UnitDelay1_DSTATE_l/*@>82a5*/ = /*@>26693*/VCU_B./*@>29bdd*/Counter_g;
 800458e:	4b28      	ldr	r3, [pc, #160]	; (8004630 <FUNC_Transmission+0x1160>)
 8004590:	f893 276d 	ldrb.w	r2, [r3, #1901]	; 0x76d
 8004594:	4b29      	ldr	r3, [pc, #164]	; (800463c <FUNC_Transmission+0x116c>)
 8004596:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    /* Update for Memory: '<S189>/Memory' */
    /*@>26b72*/VCU_DW./*@>29db4*/Memory_PreviousInput_n/*@>7923*/ = /*@>26699*/VCU_B./*@>29be0*/Logic_gy/*@>25007*/[/*@>25004*/0];
 800459a:	4b25      	ldr	r3, [pc, #148]	; (8004630 <FUNC_Transmission+0x1160>)
 800459c:	f893 275e 	ldrb.w	r2, [r3, #1886]	; 0x75e
 80045a0:	4b26      	ldr	r3, [pc, #152]	; (800463c <FUNC_Transmission+0x116c>)
 80045a2:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
 *
 * Block description for '<S180>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>26b78*/VCU_DW./*@>29db7*/DelayInput1_DSTATE_e/*@>82b1*/ = /*@>2669f*/VCU_B./*@>29be3*/LogicalOperator3_e;
 80045a6:	4b22      	ldr	r3, [pc, #136]	; (8004630 <FUNC_Transmission+0x1160>)
 80045a8:	f893 2760 	ldrb.w	r2, [r3, #1888]	; 0x760
 80045ac:	4b23      	ldr	r3, [pc, #140]	; (800463c <FUNC_Transmission+0x116c>)
 80045ae:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
    /* Update for Memory: '<S183>/Memory' */
    /*@>26b7e*/VCU_DW./*@>29dba*/Memory_PreviousInput_e/*@>7926*/ = /*@>266a5*/VCU_B./*@>29be6*/Logic_jv/*@>2500c*/[/*@>25009*/0];
 80045b2:	4b1f      	ldr	r3, [pc, #124]	; (8004630 <FUNC_Transmission+0x1160>)
 80045b4:	f893 2764 	ldrb.w	r2, [r3, #1892]	; 0x764
 80045b8:	4b20      	ldr	r3, [pc, #128]	; (800463c <FUNC_Transmission+0x116c>)
 80045ba:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
 *
 * Block description for '<S182>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>26b84*/VCU_DW./*@>29dbd*/DelayInput1_DSTATE_b/*@>82bd*/ = /*@>266ab*/VCU_B./*@>29be9*/Add_ax;
 80045be:	4b1c      	ldr	r3, [pc, #112]	; (8004630 <FUNC_Transmission+0x1160>)
 80045c0:	f893 268a 	ldrb.w	r2, [r3, #1674]	; 0x68a
 80045c4:	4b1d      	ldr	r3, [pc, #116]	; (800463c <FUNC_Transmission+0x116c>)
 80045c6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    /* Update for Memory: '<S184>/Memory' */
    /*@>26b8a*/VCU_DW./*@>29dc0*/Memory_PreviousInput_ez/*@>7929*/ = /*@>266b1*/VCU_B./*@>29bec*/Logic_p/*@>25011*/[/*@>2500e*/0];
 80045ca:	4b19      	ldr	r3, [pc, #100]	; (8004630 <FUNC_Transmission+0x1160>)
 80045cc:	f893 276a 	ldrb.w	r2, [r3, #1898]	; 0x76a
 80045d0:	4b1a      	ldr	r3, [pc, #104]	; (800463c <FUNC_Transmission+0x116c>)
 80045d2:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
 *
 * Block description for '<S171>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>26b90*/VCU_DW./*@>29dc3*/DelayInput1_DSTATE_n/*@>82c9*/ = /*@>266b7*/VCU_B./*@>29bef*/Add_fn;
 80045d6:	4b16      	ldr	r3, [pc, #88]	; (8004630 <FUNC_Transmission+0x1160>)
 80045d8:	f893 2689 	ldrb.w	r2, [r3, #1673]	; 0x689
 80045dc:	4b17      	ldr	r3, [pc, #92]	; (800463c <FUNC_Transmission+0x116c>)
 80045de:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
/* End of Outputs for SubSystem: '<S7>/LC_jr19' */

/* RelationalOperator: '<S133>/Compare' incorporates:
 *  Constant: '<S133>/Constant'
 */
/*@>25631*/VCU_B./*@>293ac*/Compare_c/*@>7489*/ = (/*@>25637*/VCU_B./*@>293af*/DataTypeConversion_cg/*@>7488*/ == /*@>21761*/1);
 80045e2:	4b13      	ldr	r3, [pc, #76]	; (8004630 <FUNC_Transmission+0x1160>)
 80045e4:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 80045e8:	b25b      	sxtb	r3, r3
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	bf0c      	ite	eq
 80045ee:	2301      	moveq	r3, #1
 80045f0:	2300      	movne	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	461a      	mov	r2, r3
 80045f6:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <FUNC_Transmission+0x1160>)
 80045f8:	f883 26ca 	strb.w	r2, [r3, #1738]	; 0x6ca
/* RelationalOperator: '<S134>/Compare' incorporates:
 *  Constant: '<S134>/Constant'
 */
/*@>2564f*/VCU_B./*@>293bb*/Compare_g/*@>748d*/ = (/*@>25655*/VCU_B./*@>293be*/DataTypeConversion_cg/*@>748c*/ > /*@>21762*/3);
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <FUNC_Transmission+0x1160>)
 80045fe:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8004602:	b25b      	sxtb	r3, r3
 8004604:	2b03      	cmp	r3, #3
 8004606:	bfcc      	ite	gt
 8004608:	2301      	movgt	r3, #1
 800460a:	2300      	movle	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	4b07      	ldr	r3, [pc, #28]	; (8004630 <FUNC_Transmission+0x1160>)
 8004612:	f883 26cb 	strb.w	r2, [r3, #1739]	; 0x6cb
/* Logic: '<S7>/Logical Operator' */
/*@>25667*/VCU_B./*@>293c7*/LogicalOperator/*@>7493*/ = (/*@>2566d*/VCU_B./*@>293ca*/Compare_c/*@>7492*/ || /*@>25673*/VCU_B./*@>293cd*/Compare_g);
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <FUNC_Transmission+0x1160>)
 8004618:	f893 36ca 	ldrb.w	r3, [r3, #1738]	; 0x6ca
 800461c:	2b00      	cmp	r3, #0
 800461e:	d104      	bne.n	800462a <FUNC_Transmission+0x115a>
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <FUNC_Transmission+0x1160>)
 8004622:	f893 36cb 	ldrb.w	r3, [r3, #1739]	; 0x6cb
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <FUNC_Transmission+0x1170>
 800462a:	2301      	movs	r3, #1
 800462c:	e009      	b.n	8004642 <FUNC_Transmission+0x1172>
 800462e:	bf00      	nop
 8004630:	200008c8 	.word	0x200008c8
 8004634:	3ff00000 	.word	0x3ff00000
 8004638:	c0340000 	.word	0xc0340000
 800463c:	20001058 	.word	0x20001058
 8004640:	2300      	movs	r3, #0
 8004642:	b2da      	uxtb	r2, r3
 8004644:	4b62      	ldr	r3, [pc, #392]	; (80047d0 <FUNC_Transmission+0x1300>)
 8004646:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc
/* Outputs for Enabled SubSystem: '<S7>/semi_auto_jr18' incorporates:
 *  EnablePort: '<S139>/Enable'
 */
/*@>7495*/if (/*@>2567f*/VCU_B./*@>293d3*/LogicalOperator) {
 800464a:	4b61      	ldr	r3, [pc, #388]	; (80047d0 <FUNC_Transmission+0x1300>)
 800464c:	f893 36cc 	ldrb.w	r3, [r3, #1740]	; 0x6cc
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 8743 	beq.w	80054dc <FUNC_Transmission+0x200c>
    /* Memory: '<S202>/Memory' */
    /*@>25691*/VCU_B./*@>293dc*/Memory/*@>796a*/ = /*@>268a2*/VCU_DW./*@>29c5e*/Memory_PreviousInput;
 8004656:	4b5f      	ldr	r3, [pc, #380]	; (80047d4 <FUNC_Transmission+0x1304>)
 8004658:	f893 2135 	ldrb.w	r2, [r3, #309]	; 0x135
 800465c:	4b5c      	ldr	r3, [pc, #368]	; (80047d0 <FUNC_Transmission+0x1300>)
 800465e:	f883 26d0 	strb.w	r2, [r3, #1744]	; 0x6d0
    /* CombinatorialLogic: '<S228>/Logic' incorporates:
 *  RelationalOperator: '<S202>/GreaterThan'
 */
    /*@>256af*/VCU_B./*@>293eb*/GreaterThan/*@>796e*/ = (/*@>21ebf*/(int32_T)/*@>256b5*/VCU_B./*@>293ee*/LC_dash_bit/*@>796d*/ > /*@>21ec1*/(int32_T)/*@>256bb*/VCU_B./*@>293f1*/Memory);
 8004662:	4b5b      	ldr	r3, [pc, #364]	; (80047d0 <FUNC_Transmission+0x1300>)
 8004664:	f893 2783 	ldrb.w	r2, [r3, #1923]	; 0x783
 8004668:	4b59      	ldr	r3, [pc, #356]	; (80047d0 <FUNC_Transmission+0x1300>)
 800466a:	f893 36d0 	ldrb.w	r3, [r3, #1744]	; 0x6d0
 800466e:	429a      	cmp	r2, r3
 8004670:	bf8c      	ite	hi
 8004672:	2301      	movhi	r3, #1
 8004674:	2300      	movls	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	4b55      	ldr	r3, [pc, #340]	; (80047d0 <FUNC_Transmission+0x1300>)
 800467c:	f883 26d1 	strb.w	r2, [r3, #1745]	; 0x6d1
    /* Logic: '<S202>/Logical Operator2' */
    /*@>256d9*/VCU_B./*@>29400*/LogicalOperator2/*@>7972*/ = !/*@<7971*//*@>256df*/VCU_B./*@>29403*/LC_dash_bit;
 8004680:	4b53      	ldr	r3, [pc, #332]	; (80047d0 <FUNC_Transmission+0x1300>)
 8004682:	f893 3783 	ldrb.w	r3, [r3, #1923]	; 0x783
 8004686:	2b00      	cmp	r3, #0
 8004688:	bf0c      	ite	eq
 800468a:	2301      	moveq	r3, #1
 800468c:	2300      	movne	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	461a      	mov	r2, r3
 8004692:	4b4f      	ldr	r3, [pc, #316]	; (80047d0 <FUNC_Transmission+0x1300>)
 8004694:	f883 26d2 	strb.w	r2, [r3, #1746]	; 0x6d2
    /* Memory: '<S202>/Memory1' */
    /*@>256fd*/VCU_B./*@>29412*/Memory1/*@>7974*/ = /*@>268a8*/VCU_DW./*@>29c61*/Memory1_PreviousInput;
 8004698:	4b4e      	ldr	r3, [pc, #312]	; (80047d4 <FUNC_Transmission+0x1304>)
 800469a:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
 800469e:	4b4c      	ldr	r3, [pc, #304]	; (80047d0 <FUNC_Transmission+0x1300>)
 80046a0:	f883 26d3 	strb.w	r2, [r3, #1747]	; 0x6d3
    /* RelationalOperator: '<S202>/Relational Operator' incorporates:
 *  Constant: '<S202>/Constant'
 */
    /*@>2572d*/VCU_B./*@>2942a*/RelationalOperator/*@>7978*/ = (/*@>25733*/VCU_B./*@>2942d*/Sensitivity1538mVbar/*@>7977*/ > /*@>21768*/3.0);
 80046a4:	4b4a      	ldr	r3, [pc, #296]	; (80047d0 <FUNC_Transmission+0x1300>)
 80046a6:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80046aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ae:	2101      	movs	r1, #1
 80046b0:	460c      	mov	r4, r1
 80046b2:	4610      	mov	r0, r2
 80046b4:	4619      	mov	r1, r3
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	4b47      	ldr	r3, [pc, #284]	; (80047d8 <FUNC_Transmission+0x1308>)
 80046bc:	f00a fc64 	bl	800ef88 <__aeabi_dcmpgt>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <FUNC_Transmission+0x11fa>
 80046c6:	2300      	movs	r3, #0
 80046c8:	461c      	mov	r4, r3
 80046ca:	b2e3      	uxtb	r3, r4
 80046cc:	461a      	mov	r2, r3
 80046ce:	4b40      	ldr	r3, [pc, #256]	; (80047d0 <FUNC_Transmission+0x1300>)
 80046d0:	f883 26d4 	strb.w	r2, [r3, #1748]	; 0x6d4
    /* RelationalOperator: '<S202>/Relational Operator1' incorporates:
 *  Constant: '<S202>/Constant'
 */
    /*@>2576f*/VCU_B./*@>2944b*/RelationalOperator1/*@>797c*/ = (/*@>21769*/3.0/*@>797b*/ < /*@>25775*/VCU_B./*@>2944e*/Add1_m);
 80046d4:	4b3e      	ldr	r3, [pc, #248]	; (80047d0 <FUNC_Transmission+0x1300>)
 80046d6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	2101      	movs	r1, #1
 80046e0:	460c      	mov	r4, r1
 80046e2:	4610      	mov	r0, r2
 80046e4:	4619      	mov	r1, r3
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	4b3b      	ldr	r3, [pc, #236]	; (80047d8 <FUNC_Transmission+0x1308>)
 80046ec:	f00a fc4c 	bl	800ef88 <__aeabi_dcmpgt>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <FUNC_Transmission+0x122a>
 80046f6:	2300      	movs	r3, #0
 80046f8:	461c      	mov	r4, r3
 80046fa:	b2e3      	uxtb	r3, r4
 80046fc:	461a      	mov	r2, r3
 80046fe:	4b34      	ldr	r3, [pc, #208]	; (80047d0 <FUNC_Transmission+0x1300>)
 8004700:	f883 26d5 	strb.w	r2, [r3, #1749]	; 0x6d5
    /* Logic: '<S202>/Logical Operator' */
    /*@>2578d*/VCU_B./*@>2945a*/Brakelight/*@>7982*/ = (/*@>25793*/VCU_B./*@>2945d*/RelationalOperator/*@>7981*/ || /*@>25799*/VCU_B./*@>29460*/RelationalOperator1);
 8004704:	4b32      	ldr	r3, [pc, #200]	; (80047d0 <FUNC_Transmission+0x1300>)
 8004706:	f893 36d4 	ldrb.w	r3, [r3, #1748]	; 0x6d4
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <FUNC_Transmission+0x1248>
 800470e:	4b30      	ldr	r3, [pc, #192]	; (80047d0 <FUNC_Transmission+0x1300>)
 8004710:	f893 36d5 	ldrb.w	r3, [r3, #1749]	; 0x6d5
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <FUNC_Transmission+0x124c>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <FUNC_Transmission+0x124e>
 800471c:	2300      	movs	r3, #0
 800471e:	b2da      	uxtb	r2, r3
 8004720:	4b2b      	ldr	r3, [pc, #172]	; (80047d0 <FUNC_Transmission+0x1300>)
 8004722:	f883 26d6 	strb.w	r2, [r3, #1750]	; 0x6d6
    /* RelationalOperator: '<S202>/GreaterThan1' */
    /*@>257b7*/VCU_B./*@>2946f*/GreaterThan1/*@>7986*/ = (/*@>21ef8*/(int32_T)/*@>257bd*/VCU_B./*@>29472*/Memory1/*@>7985*/ > /*@>21efa*/(int32_T)/*@>257c3*/VCU_B./*@>29475*/Brakelight);
 8004726:	4b2a      	ldr	r3, [pc, #168]	; (80047d0 <FUNC_Transmission+0x1300>)
 8004728:	f893 26d3 	ldrb.w	r2, [r3, #1747]	; 0x6d3
 800472c:	4b28      	ldr	r3, [pc, #160]	; (80047d0 <FUNC_Transmission+0x1300>)
 800472e:	f893 36d6 	ldrb.w	r3, [r3, #1750]	; 0x6d6
 8004732:	429a      	cmp	r2, r3
 8004734:	bf8c      	ite	hi
 8004736:	2301      	movhi	r3, #1
 8004738:	2300      	movls	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <FUNC_Transmission+0x1300>)
 8004740:	f883 26d7 	strb.w	r2, [r3, #1751]	; 0x6d7
    /* CombinatorialLogic: '<S228>/Logic' incorporates:
 *  Logic: '<S202>/Logical Operator1'
 *  Memory: '<S228>/Memory'
 */
    /*@>25811*/VCU_B./*@>2949c*/LogicalOperator1/*@>798c*/ = (/*@>25817*/VCU_B./*@>2949f*/LogicalOperator2/*@>798b*/ || /*@>2581d*/VCU_B./*@>294a2*/GreaterThan1);
 8004744:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <FUNC_Transmission+0x1300>)
 8004746:	f893 36d2 	ldrb.w	r3, [r3, #1746]	; 0x6d2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <FUNC_Transmission+0x1288>
 800474e:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <FUNC_Transmission+0x1300>)
 8004750:	f893 36d7 	ldrb.w	r3, [r3, #1751]	; 0x6d7
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <FUNC_Transmission+0x128c>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <FUNC_Transmission+0x128e>
 800475c:	2300      	movs	r3, #0
 800475e:	b2da      	uxtb	r2, r3
 8004760:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <FUNC_Transmission+0x1300>)
 8004762:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
    /*@>25835*/VCU_B./*@>294ae*/Memory_c/*@>798e*/ = /*@>268b4*/VCU_DW./*@>29c67*/Memory_PreviousInput_j;
 8004766:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <FUNC_Transmission+0x1304>)
 8004768:	f893 2137 	ldrb.w	r2, [r3, #311]	; 0x137
 800476c:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <FUNC_Transmission+0x1300>)
 800476e:	f883 26d9 	strb.w	r2, [r3, #1753]	; 0x6d9
    /*@>2180e*/rowIdx/*@>1edb3*/ = /*@>25853*/VCU_B./*@>294bd*/GreaterThan;
 8004772:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <FUNC_Transmission+0x1300>)
 8004774:	f893 36d1 	ldrb.w	r3, [r3, #1745]	; 0x6d1
 8004778:	617b      	str	r3, [r7, #20]
    /*@>21812*/rowIdx/*@>1edda*/ = /*@>21f4c*/(int32_T)((/*@>21f49*/(uint32_T)/*@>21814*/rowIdx/*@>21bc7*/ << /*@>21816*/1)/*@>21bc5*/ + /*@>258ad*/VCU_B./*@>294ea*/LogicalOperator1);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	4a14      	ldr	r2, [pc, #80]	; (80047d0 <FUNC_Transmission+0x1300>)
 8004780:	f892 26d8 	ldrb.w	r2, [r2, #1752]	; 0x6d8
 8004784:	4413      	add	r3, r2
 8004786:	617b      	str	r3, [r7, #20]
    /*@>21819*/rowIdx/*@>1ee01*/ = /*@>21f64*/(int32_T)((/*@>21f61*/(uint32_T)/*@>2181b*/rowIdx/*@>21bbd*/ << /*@>2181d*/1)/*@>21bbb*/ + /*@>258cb*/VCU_B./*@>294f9*/Memory_c);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	4a10      	ldr	r2, [pc, #64]	; (80047d0 <FUNC_Transmission+0x1300>)
 800478e:	f892 26d9 	ldrb.w	r2, [r2, #1753]	; 0x6d9
 8004792:	4413      	add	r3, r2
 8004794:	617b      	str	r3, [r7, #20]
    /*@>258e3*/VCU_B./*@>29505*/Logic/*@>1ee17*/[/*@>21822*/0U]/*@>1ee16*/ = /*@>26738*/VCU_ConstP./*@>29c04*/pooled37/*@>24e85*/[/*@>24e80*/(uint32_T)/*@>24e82*/rowIdx];
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	4a10      	ldr	r2, [pc, #64]	; (80047dc <FUNC_Transmission+0x130c>)
 800479a:	4413      	add	r3, r2
 800479c:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <FUNC_Transmission+0x1300>)
 80047a2:	f883 26da 	strb.w	r2, [r3, #1754]	; 0x6da
    /*@>2592b*/VCU_B./*@>29529*/Logic/*@>1ee2a*/[/*@>21827*/1U]/*@>1ee29*/ = /*@>2673e*/VCU_ConstP./*@>29c07*/pooled37/*@>24e93*/[/*@>24e8f*/rowIdx/*@>24e8c*/ + /*@>24e90*/8U];
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	3308      	adds	r3, #8
 80047aa:	4a0c      	ldr	r2, [pc, #48]	; (80047dc <FUNC_Transmission+0x130c>)
 80047ac:	4413      	add	r3, r2
 80047ae:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 80047b2:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <FUNC_Transmission+0x1300>)
 80047b4:	f883 26db 	strb.w	r2, [r3, #1755]	; 0x6db
    /* Logic: '<S202>/Logical Operator3' */
    /*@>25937*/VCU_B./*@>2952f*/LogicalOperator3/*@>7995*/ = (/*@>2593d*/VCU_B./*@>29532*/Logic/*@>24e98*/[/*@>24e95*/0]/*@>7994*/ && /*@>25943*/VCU_B./*@>29535*/Brakelight);
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <FUNC_Transmission+0x1300>)
 80047ba:	f893 36da 	ldrb.w	r3, [r3, #1754]	; 0x6da
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00e      	beq.n	80047e0 <FUNC_Transmission+0x1310>
 80047c2:	4b03      	ldr	r3, [pc, #12]	; (80047d0 <FUNC_Transmission+0x1300>)
 80047c4:	f893 36d6 	ldrb.w	r3, [r3, #1750]	; 0x6d6
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d009      	beq.n	80047e0 <FUNC_Transmission+0x1310>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e008      	b.n	80047e2 <FUNC_Transmission+0x1312>
 80047d0:	200008c8 	.word	0x200008c8
 80047d4:	20001058 	.word	0x20001058
 80047d8:	40080000 	.word	0x40080000
 80047dc:	0800f1e8 	.word	0x0800f1e8
 80047e0:	2300      	movs	r3, #0
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	4b92      	ldr	r3, [pc, #584]	; (8004a30 <FUNC_Transmission+0x1560>)
 80047e6:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
    /* DataTypeConversion: '<S139>/Data Type Conversion1' */
    /*@>25967*/VCU_B./*@>29547*/LC_active_bit_f/*@>7998*/ = /*@>2596d*/VCU_B./*@>2954a*/LogicalOperator3;
 80047ea:	4b91      	ldr	r3, [pc, #580]	; (8004a30 <FUNC_Transmission+0x1560>)
 80047ec:	f893 26dc 	ldrb.w	r2, [r3, #1756]	; 0x6dc
 80047f0:	4b8f      	ldr	r3, [pc, #572]	; (8004a30 <FUNC_Transmission+0x1560>)
 80047f2:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
    /* CombinatorialLogic: '<S217>/Logic' incorporates:
 *  Delay: '<S200>/Delay'
 *  Memory: '<S217>/Memory'
 *  UnitDelay: '<S200>/Unit Delay1'
 */
    /*@>259b5*/VCU_B./*@>2956e*/UnitDelay1/*@>8325*/ = /*@>268cc*/VCU_DW./*@>29c73*/UnitDelay1_DSTATE;
 80047f6:	4b8f      	ldr	r3, [pc, #572]	; (8004a34 <FUNC_Transmission+0x1564>)
 80047f8:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
 80047fc:	4b8c      	ldr	r3, [pc, #560]	; (8004a30 <FUNC_Transmission+0x1560>)
 80047fe:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
    /*@>259cd*/VCU_B./*@>2957a*/Delay/*@>8333*/ = /*@>268d2*/VCU_DW./*@>29c76*/Delay_DSTATE/*@>24e9d*/[/*@>24e9a*/0];
 8004802:	4b8c      	ldr	r3, [pc, #560]	; (8004a34 <FUNC_Transmission+0x1564>)
 8004804:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
 8004808:	4b89      	ldr	r3, [pc, #548]	; (8004a30 <FUNC_Transmission+0x1560>)
 800480a:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
    /*@>259f1*/VCU_B./*@>2958c*/Memory_g/*@>799c*/ = /*@>268d8*/VCU_DW./*@>29c79*/Memory_PreviousInput_p;
 800480e:	4b89      	ldr	r3, [pc, #548]	; (8004a34 <FUNC_Transmission+0x1564>)
 8004810:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
 8004814:	4b86      	ldr	r3, [pc, #536]	; (8004a30 <FUNC_Transmission+0x1560>)
 8004816:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0
    /*@>21846*/rowIdx/*@>1ef01*/ = /*@>25a39*/VCU_B./*@>295b0*/UnitDelay1;
 800481a:	4b85      	ldr	r3, [pc, #532]	; (8004a30 <FUNC_Transmission+0x1560>)
 800481c:	f893 36de 	ldrb.w	r3, [r3, #1758]	; 0x6de
 8004820:	617b      	str	r3, [r7, #20]
    /*@>2184a*/rowIdx/*@>1ef28*/ = /*@>21fed*/(int32_T)((/*@>21fea*/(uint32_T)/*@>2184c*/rowIdx/*@>21bb2*/ << /*@>2184e*/1)/*@>21bb0*/ + /*@>25a57*/VCU_B./*@>295bf*/Delay);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	4a82      	ldr	r2, [pc, #520]	; (8004a30 <FUNC_Transmission+0x1560>)
 8004828:	f892 26df 	ldrb.w	r2, [r2, #1759]	; 0x6df
 800482c:	4413      	add	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
    /*@>21851*/rowIdx/*@>1ef4f*/ = /*@>22003*/(int32_T)((/*@>22000*/(uint32_T)/*@>21853*/rowIdx/*@>21ba8*/ << /*@>21855*/1)/*@>21ba6*/ + /*@>25a75*/VCU_B./*@>295ce*/Memory_g);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	4a7e      	ldr	r2, [pc, #504]	; (8004a30 <FUNC_Transmission+0x1560>)
 8004836:	f892 26e0 	ldrb.w	r2, [r2, #1760]	; 0x6e0
 800483a:	4413      	add	r3, r2
 800483c:	617b      	str	r3, [r7, #20]
    /*@>25ac9*/VCU_B./*@>295f8*/Logic_o/*@>1ef65*/[/*@>2185a*/0U]/*@>1ef64*/ = /*@>26750*/VCU_ConstP./*@>29c10*/pooled37/*@>24eb9*/[/*@>24eb4*/(uint32_T)/*@>24eb6*/rowIdx];
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	4a7d      	ldr	r2, [pc, #500]	; (8004a38 <FUNC_Transmission+0x1568>)
 8004842:	4413      	add	r3, r2
 8004844:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004848:	4b79      	ldr	r3, [pc, #484]	; (8004a30 <FUNC_Transmission+0x1560>)
 800484a:	f883 26e1 	strb.w	r2, [r3, #1761]	; 0x6e1
    /*@>25ae7*/VCU_B./*@>29607*/Logic_o/*@>1ef78*/[/*@>2185f*/1U]/*@>1ef77*/ = /*@>26756*/VCU_ConstP./*@>29c13*/pooled37/*@>24ec2*/[/*@>24ebe*/rowIdx/*@>24ebb*/ + /*@>24ebf*/8U];
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	3308      	adds	r3, #8
 8004852:	4a79      	ldr	r2, [pc, #484]	; (8004a38 <FUNC_Transmission+0x1568>)
 8004854:	4413      	add	r3, r2
 8004856:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 800485a:	4b75      	ldr	r3, [pc, #468]	; (8004a30 <FUNC_Transmission+0x1560>)
 800485c:	f883 26e2 	strb.w	r2, [r3, #1762]	; 0x6e2
    /* DataTypeConversion: '<S139>/Data Type Conversion10' */
    /*@>25b05*/VCU_B./*@>29616*/VOVG_ShiftDown_m/*@>79a0*/ = /*@>25b0b*/VCU_B./*@>29619*/Logic_o/*@>24ec7*/[/*@>24ec4*/0];
 8004860:	4b73      	ldr	r3, [pc, #460]	; (8004a30 <FUNC_Transmission+0x1560>)
 8004862:	f893 36e1 	ldrb.w	r3, [r3, #1761]	; 0x6e1
 8004866:	4618      	mov	r0, r3
 8004868:	f00a f888 	bl	800e97c <__aeabi_ui2d>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	496f      	ldr	r1, [pc, #444]	; (8004a30 <FUNC_Transmission+0x1560>)
 8004872:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 *
 * Block description for '<S214>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>25b53*/VCU_B./*@>2963d*/Uk1/*@>838f*/ = /*@>268f0*/VCU_DW./*@>29c85*/DelayInput1_DSTATE;
 8004876:	4b6f      	ldr	r3, [pc, #444]	; (8004a34 <FUNC_Transmission+0x1564>)
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	496c      	ldr	r1, [pc, #432]	; (8004a30 <FUNC_Transmission+0x1560>)
 800487e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    /* CombinatorialLogic: '<S215>/Logic' incorporates:
 *  Delay: '<S200>/Delay1'
 *  Memory: '<S215>/Memory'
 *  RelationalOperator: '<S214>/FixPt Relational Operator'
 */
    /*@>25b71*/VCU_B./*@>2964c*/FixPtRelationalOperator/*@>79a5*/ = (/*@>25b77*/VCU_B./*@>2964f*/STW_shift_down_request/*@>79a4*/ > /*@>25b7d*/VCU_B./*@>29652*/Uk1);
 8004882:	4b6b      	ldr	r3, [pc, #428]	; (8004a30 <FUNC_Transmission+0x1560>)
 8004884:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8004888:	e9d3 0100 	ldrd	r0, r1, [r3]
 800488c:	4b68      	ldr	r3, [pc, #416]	; (8004a30 <FUNC_Transmission+0x1560>)
 800488e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8004892:	2401      	movs	r4, #1
 8004894:	f00a fb78 	bl	800ef88 <__aeabi_dcmpgt>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <FUNC_Transmission+0x13d2>
 800489e:	2300      	movs	r3, #0
 80048a0:	461c      	mov	r4, r3
 80048a2:	b2e3      	uxtb	r3, r4
 80048a4:	461a      	mov	r2, r3
 80048a6:	4b62      	ldr	r3, [pc, #392]	; (8004a30 <FUNC_Transmission+0x1560>)
 80048a8:	f883 26e3 	strb.w	r2, [r3, #1763]	; 0x6e3
    /*@>25b9b*/VCU_B./*@>29661*/Delay1/*@>839b*/ = /*@>268f6*/VCU_DW./*@>29c88*/Delay1_DSTATE;
 80048ac:	4b61      	ldr	r3, [pc, #388]	; (8004a34 <FUNC_Transmission+0x1564>)
 80048ae:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
 80048b2:	4b5f      	ldr	r3, [pc, #380]	; (8004a30 <FUNC_Transmission+0x1560>)
 80048b4:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
    /*@>25bdd*/VCU_B./*@>29682*/Memory_d/*@>79a8*/ = /*@>268fc*/VCU_DW./*@>29c8b*/Memory_PreviousInput_l;
 80048b8:	4b5e      	ldr	r3, [pc, #376]	; (8004a34 <FUNC_Transmission+0x1564>)
 80048ba:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 80048be:	4b5c      	ldr	r3, [pc, #368]	; (8004a30 <FUNC_Transmission+0x1560>)
 80048c0:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
    /*@>2187e*/rowIdx/*@>1f04f*/ = /*@>25bef*/VCU_B./*@>2968b*/FixPtRelationalOperator;
 80048c4:	4b5a      	ldr	r3, [pc, #360]	; (8004a30 <FUNC_Transmission+0x1560>)
 80048c6:	f893 36e3 	ldrb.w	r3, [r3, #1763]	; 0x6e3
 80048ca:	617b      	str	r3, [r7, #20]
    /*@>21882*/rowIdx/*@>1f076*/ = /*@>2207b*/(int32_T)((/*@>22078*/(uint32_T)/*@>21884*/rowIdx/*@>21b9d*/ << /*@>21886*/1)/*@>21b9b*/ + /*@>25c07*/VCU_B./*@>29697*/Delay1);
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	4a57      	ldr	r2, [pc, #348]	; (8004a30 <FUNC_Transmission+0x1560>)
 80048d2:	f892 26e4 	ldrb.w	r2, [r2, #1764]	; 0x6e4
 80048d6:	4413      	add	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]
    /*@>21889*/rowIdx/*@>1f09d*/ = /*@>22087*/(int32_T)((/*@>22084*/(uint32_T)/*@>2188b*/rowIdx/*@>21b93*/ << /*@>2188d*/1)/*@>21b91*/ + /*@>25c4f*/VCU_B./*@>296bb*/Memory_d);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4a54      	ldr	r2, [pc, #336]	; (8004a30 <FUNC_Transmission+0x1560>)
 80048e0:	f892 26e5 	ldrb.w	r2, [r2, #1765]	; 0x6e5
 80048e4:	4413      	add	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
    /*@>25c61*/VCU_B./*@>296c4*/Logic_i/*@>1f0b3*/[/*@>21892*/0U]/*@>1f0b2*/ = /*@>26768*/VCU_ConstP./*@>29c1c*/pooled37/*@>24ede*/[/*@>24ed9*/(uint32_T)/*@>24edb*/rowIdx];
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	4a53      	ldr	r2, [pc, #332]	; (8004a38 <FUNC_Transmission+0x1568>)
 80048ec:	4413      	add	r3, r2
 80048ee:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 80048f2:	4b4f      	ldr	r3, [pc, #316]	; (8004a30 <FUNC_Transmission+0x1560>)
 80048f4:	f883 26e6 	strb.w	r2, [r3, #1766]	; 0x6e6
    /*@>25c79*/VCU_B./*@>296d0*/Logic_i/*@>1f0c6*/[/*@>21897*/1U]/*@>1f0c5*/ = /*@>2676e*/VCU_ConstP./*@>29c1f*/pooled37/*@>24ee7*/[/*@>24ee3*/rowIdx/*@>24ee0*/ + /*@>24ee4*/8U];
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3308      	adds	r3, #8
 80048fc:	4a4e      	ldr	r2, [pc, #312]	; (8004a38 <FUNC_Transmission+0x1568>)
 80048fe:	4413      	add	r3, r2
 8004900:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004904:	4b4a      	ldr	r3, [pc, #296]	; (8004a30 <FUNC_Transmission+0x1560>)
 8004906:	f883 26e7 	strb.w	r2, [r3, #1767]	; 0x6e7
    /* UnitDelay: '<S200>/Unit Delay4' */
    /*@>25cb5*/VCU_B./*@>296ee*/UnitDelay4/*@>83f7*/ = /*@>26908*/VCU_DW./*@>29c91*/UnitDelay4_DSTATE;
 800490a:	4b4a      	ldr	r3, [pc, #296]	; (8004a34 <FUNC_Transmission+0x1564>)
 800490c:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
 8004910:	4b47      	ldr	r3, [pc, #284]	; (8004a30 <FUNC_Transmission+0x1560>)
 8004912:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
    /* Gain: '<S218>/Gain' */
    /*@>25cd3*/VCU_B./*@>296fd*/Gain/*@>79b2*/ = /*@>2177b*/2.0/*@>21b89*/ * /*@>25cd9*/VCU_B./*@>29700*/DataTypeConversion1;
 8004916:	4b46      	ldr	r3, [pc, #280]	; (8004a30 <FUNC_Transmission+0x1560>)
 8004918:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	4610      	mov	r0, r2
 8004922:	4619      	mov	r1, r3
 8004924:	f009 feee 	bl	800e704 <__adddf3>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4940      	ldr	r1, [pc, #256]	; (8004a30 <FUNC_Transmission+0x1560>)
 800492e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    /* RelationalOperator: '<S218>/Relational Operator' incorporates:
 *  Constant: '<S218>/Constant'
 */
    /*@>25cf1*/VCU_B./*@>2970c*/RelationalOperator_m/*@>79b6*/ = (/*@>25cf7*/VCU_B./*@>2970f*/Gain/*@>79b5*/ > /*@>2177d*/169.0);
 8004932:	4b3f      	ldr	r3, [pc, #252]	; (8004a30 <FUNC_Transmission+0x1560>)
 8004934:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004938:	2101      	movs	r1, #1
 800493a:	460c      	mov	r4, r1
 800493c:	4610      	mov	r0, r2
 800493e:	4619      	mov	r1, r3
 8004940:	a337      	add	r3, pc, #220	; (adr r3, 8004a20 <FUNC_Transmission+0x1550>)
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	f00a fb1f 	bl	800ef88 <__aeabi_dcmpgt>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <FUNC_Transmission+0x1484>
 8004950:	2300      	movs	r3, #0
 8004952:	461c      	mov	r4, r3
 8004954:	b2e3      	uxtb	r3, r4
 8004956:	461a      	mov	r2, r3
 8004958:	4b35      	ldr	r3, [pc, #212]	; (8004a30 <FUNC_Transmission+0x1560>)
 800495a:	f883 26e9 	strb.w	r2, [r3, #1769]	; 0x6e9
    /* RelationalOperator: '<S218>/Relational Operator1' incorporates:
 *  Constant: '<S218>/Constant1'
 */
    /*@>25d2d*/VCU_B./*@>2972a*/RelationalOperator1_o/*@>79ba*/ = (/*@>25d33*/VCU_B./*@>2972d*/Gain/*@>79b9*/ > /*@>21780*/228.0);
 800495e:	4b34      	ldr	r3, [pc, #208]	; (8004a30 <FUNC_Transmission+0x1560>)
 8004960:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004964:	2101      	movs	r1, #1
 8004966:	460c      	mov	r4, r1
 8004968:	4610      	mov	r0, r2
 800496a:	4619      	mov	r1, r3
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	4b32      	ldr	r3, [pc, #200]	; (8004a3c <FUNC_Transmission+0x156c>)
 8004972:	f00a fb09 	bl	800ef88 <__aeabi_dcmpgt>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <FUNC_Transmission+0x14b0>
 800497c:	2300      	movs	r3, #0
 800497e:	461c      	mov	r4, r3
 8004980:	b2e3      	uxtb	r3, r4
 8004982:	461a      	mov	r2, r3
 8004984:	4b2a      	ldr	r3, [pc, #168]	; (8004a30 <FUNC_Transmission+0x1560>)
 8004986:	f883 26ea 	strb.w	r2, [r3, #1770]	; 0x6ea
    /* RelationalOperator: '<S218>/Relational Operator2' incorporates:
 *  Constant: '<S218>/Constant2'
 */
    /*@>25d45*/VCU_B./*@>29736*/RelationalOperator2/*@>79be*/ = (/*@>25d4b*/VCU_B./*@>29739*/Gain/*@>79bd*/ > /*@>21781*/325.0);
 800498a:	4b29      	ldr	r3, [pc, #164]	; (8004a30 <FUNC_Transmission+0x1560>)
 800498c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004990:	2101      	movs	r1, #1
 8004992:	460c      	mov	r4, r1
 8004994:	4610      	mov	r0, r2
 8004996:	4619      	mov	r1, r3
 8004998:	a323      	add	r3, pc, #140	; (adr r3, 8004a28 <FUNC_Transmission+0x1558>)
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	f00a faf3 	bl	800ef88 <__aeabi_dcmpgt>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <FUNC_Transmission+0x14dc>
 80049a8:	2300      	movs	r3, #0
 80049aa:	461c      	mov	r4, r3
 80049ac:	b2e3      	uxtb	r3, r4
 80049ae:	461a      	mov	r2, r3
 80049b0:	4b1f      	ldr	r3, [pc, #124]	; (8004a30 <FUNC_Transmission+0x1560>)
 80049b2:	f883 26eb 	strb.w	r2, [r3, #1771]	; 0x6eb
    /* Sum: '<S218>/Add' */
    /*@>25d51*/VCU_B./*@>2973c*/Add_c/*@>a831*/ = /*@>220b8*/(uint8_T)((/*@>220b2*/(uint32_T)/*@>25d57*/VCU_B./*@>2973f*/RelationalOperator_m/*@>21b79*/ + /*@>25d5d*/VCU_B./*@>29742*/RelationalOperator1_o)/*@>21b6c*/ + /*@>25d63*/VCU_B./*@>29745*/RelationalOperator2);
 80049b6:	4b1e      	ldr	r3, [pc, #120]	; (8004a30 <FUNC_Transmission+0x1560>)
 80049b8:	f893 26e9 	ldrb.w	r2, [r3, #1769]	; 0x6e9
 80049bc:	4b1c      	ldr	r3, [pc, #112]	; (8004a30 <FUNC_Transmission+0x1560>)
 80049be:	f893 36ea 	ldrb.w	r3, [r3, #1770]	; 0x6ea
 80049c2:	4413      	add	r3, r2
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	4b1a      	ldr	r3, [pc, #104]	; (8004a30 <FUNC_Transmission+0x1560>)
 80049c8:	f893 36eb 	ldrb.w	r3, [r3, #1771]	; 0x6eb
 80049cc:	4413      	add	r3, r2
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	4b17      	ldr	r3, [pc, #92]	; (8004a30 <FUNC_Transmission+0x1560>)
 80049d2:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
    /* RelationalOperator: '<S208>/Compare' incorporates:
 *  Constant: '<S208>/Constant'
 */
    /*@>25d7b*/VCU_B./*@>29751*/Compare_b/*@>79c8*/ = (/*@>25d81*/VCU_B./*@>29754*/x_clutch_STW/*@>79c7*/ >= /*@>21782*/15.0);
 80049d6:	4b16      	ldr	r3, [pc, #88]	; (8004a30 <FUNC_Transmission+0x1560>)
 80049d8:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 80049dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e0:	2101      	movs	r1, #1
 80049e2:	460c      	mov	r4, r1
 80049e4:	4610      	mov	r0, r2
 80049e6:	4619      	mov	r1, r3
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	4b14      	ldr	r3, [pc, #80]	; (8004a40 <FUNC_Transmission+0x1570>)
 80049ee:	f00a fac1 	bl	800ef74 <__aeabi_dcmpge>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <FUNC_Transmission+0x152c>
 80049f8:	2300      	movs	r3, #0
 80049fa:	461c      	mov	r4, r3
 80049fc:	b2e3      	uxtb	r3, r4
 80049fe:	461a      	mov	r2, r3
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <FUNC_Transmission+0x1560>)
 8004a02:	f883 26ec 	strb.w	r2, [r3, #1772]	; 0x6ec
    /* Switch: '<S200>/Switch' incorporates:
 *  Constant: '<S200>/Constant'
 *  Constant: '<S200>/Constant1'
 */
    /*@>1ec7c*/if (/*@>25d8d*/VCU_B./*@>2975a*/Compare_b) {
 8004a06:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <FUNC_Transmission+0x1560>)
 8004a08:	f893 36ec 	ldrb.w	r3, [r3, #1772]	; 0x6ec
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01b      	beq.n	8004a48 <FUNC_Transmission+0x1578>
        /*@>25d9f*/VCU_B./*@>29763*/Switch/*@>1ec7f*/ = /*@>21784*/1.0;
 8004a10:	4907      	ldr	r1, [pc, #28]	; (8004a30 <FUNC_Transmission+0x1560>)
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <FUNC_Transmission+0x1574>)
 8004a18:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004a1c:	e01b      	b.n	8004a56 <FUNC_Transmission+0x1586>
 8004a1e:	bf00      	nop
 8004a20:	00000000 	.word	0x00000000
 8004a24:	40652000 	.word	0x40652000
 8004a28:	00000000 	.word	0x00000000
 8004a2c:	40745000 	.word	0x40745000
 8004a30:	200008c8 	.word	0x200008c8
 8004a34:	20001058 	.word	0x20001058
 8004a38:	0800f1e8 	.word	0x0800f1e8
 8004a3c:	406c8000 	.word	0x406c8000
 8004a40:	402e0000 	.word	0x402e0000
 8004a44:	3ff00000 	.word	0x3ff00000
    } else {
        /*@>25d99*/VCU_B./*@>29760*/Switch/*@>8407*/ = /*@>21785*/2.0;
 8004a48:	495f      	ldr	r1, [pc, #380]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a52:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    }
    /* End of Switch: '<S200>/Switch' */

    /* RelationalOperator: '<S200>/Relational Operator' */
    /*@>25dbd*/VCU_B./*@>29772*/LessthanNeutral/*@>79cd*/ = (/*@>25dc3*/VCU_B./*@>29775*/Add_c/*@>21b62*/ < /*@>25dc9*/VCU_B./*@>29778*/Switch);
 8004a56:	4b5c      	ldr	r3, [pc, #368]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004a58:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f009 ff9d 	bl	800e99c <__aeabi_i2d>
 8004a62:	4604      	mov	r4, r0
 8004a64:	460d      	mov	r5, r1
 8004a66:	4b58      	ldr	r3, [pc, #352]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004a68:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	460e      	mov	r6, r1
 8004a70:	4620      	mov	r0, r4
 8004a72:	4629      	mov	r1, r5
 8004a74:	f00a fa6a 	bl	800ef4c <__aeabi_dcmplt>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <FUNC_Transmission+0x15b2>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	461e      	mov	r6, r3
 8004a82:	b2f3      	uxtb	r3, r6
 8004a84:	461a      	mov	r2, r3
 8004a86:	4b50      	ldr	r3, [pc, #320]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004a88:	f883 26ed 	strb.w	r2, [r3, #1773]	; 0x6ed
    /* UnitDelay: '<S201>/Unit Delay' */
    /*@>25de1*/VCU_B./*@>29784*/UnitDelay/*@>8418*/ = /*@>2691a*/VCU_DW./*@>29c9a*/UnitDelay_DSTATE;
 8004a8c:	4b4f      	ldr	r3, [pc, #316]	; (8004bcc <FUNC_Transmission+0x16fc>)
 8004a8e:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
 8004a92:	4b4d      	ldr	r3, [pc, #308]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004a94:	f883 26ee 	strb.w	r2, [r3, #1774]	; 0x6ee
    /* UnitDelay: '<S200>/Unit Delay2' */
    /*@>25df3*/VCU_B./*@>2978d*/Timeout/*@>8424*/ = /*@>26920*/VCU_DW./*@>29c9d*/UnitDelay2_DSTATE;
 8004a98:	4b4c      	ldr	r3, [pc, #304]	; (8004bcc <FUNC_Transmission+0x16fc>)
 8004a9a:	f893 20da 	ldrb.w	r2, [r3, #218]	; 0xda
 8004a9e:	4b4a      	ldr	r3, [pc, #296]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004aa0:	f883 26ef 	strb.w	r2, [r3, #1775]	; 0x6ef
    /* RelationalOperator: '<S209>/Compare' incorporates:
 *  Constant: '<S209>/Constant'
 */
    /*@>25e05*/VCU_B./*@>29796*/Compare_f/*@>79d3*/ = (/*@>25e0b*/VCU_B./*@>29799*/DataTypeConversion2/*@>79d2*/ > /*@>21789*/5000.0);
 8004aa4:	4b48      	ldr	r3, [pc, #288]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004aa6:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	2101      	movs	r1, #1
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	a340      	add	r3, pc, #256	; (adr r3, 8004bb8 <FUNC_Transmission+0x16e8>)
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	f00a fa64 	bl	800ef88 <__aeabi_dcmpgt>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <FUNC_Transmission+0x15fa>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	461c      	mov	r4, r3
 8004aca:	b2e3      	uxtb	r3, r4
 8004acc:	461a      	mov	r2, r3
 8004ace:	4b3e      	ldr	r3, [pc, #248]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004ad0:	f883 26f0 	strb.w	r2, [r3, #1776]	; 0x6f0
    /* RelationalOperator: '<S210>/Compare' incorporates:
 *  Constant: '<S210>/Constant'
 */
    /*@>25e23*/VCU_B./*@>297a5*/Compare_n/*@>79d7*/ = (/*@>25e29*/VCU_B./*@>297a8*/Add_c/*@>79d6*/ == /*@>2178a*/2);
 8004ad4:	4b3c      	ldr	r3, [pc, #240]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004ad6:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	bf0c      	ite	eq
 8004ade:	2301      	moveq	r3, #1
 8004ae0:	2300      	movne	r3, #0
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4b38      	ldr	r3, [pc, #224]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004ae8:	f883 26f1 	strb.w	r2, [r3, #1777]	; 0x6f1
    /* Logic: '<S200>/Logical Operator1' */
    /*@>25e59*/VCU_B./*@>297c0*/RPMcheckgear21/*@>79dd*/ = (/*@>25e5f*/VCU_B./*@>297c3*/Compare_n/*@>79dc*/ && /*@>25e65*/VCU_B./*@>297c6*/Compare_f);
 8004aec:	4b36      	ldr	r3, [pc, #216]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004aee:	f893 36f1 	ldrb.w	r3, [r3, #1777]	; 0x6f1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d006      	beq.n	8004b04 <FUNC_Transmission+0x1634>
 8004af6:	4b34      	ldr	r3, [pc, #208]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004af8:	f893 36f0 	ldrb.w	r3, [r3, #1776]	; 0x6f0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <FUNC_Transmission+0x1634>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <FUNC_Transmission+0x1636>
 8004b04:	2300      	movs	r3, #0
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	4b2f      	ldr	r3, [pc, #188]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004b0a:	f883 26f2 	strb.w	r2, [r3, #1778]	; 0x6f2
    /* RelationalOperator: '<S211>/Compare' incorporates:
 *  Constant: '<S211>/Constant'
 */
    /*@>25e71*/VCU_B./*@>297cc*/Compare_l/*@>79e1*/ = (/*@>25e77*/VCU_B./*@>297cf*/DataTypeConversion2/*@>79e0*/ > /*@>2178b*/5300.0);
 8004b0e:	4b2e      	ldr	r3, [pc, #184]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004b10:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8004b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b18:	2101      	movs	r1, #1
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4619      	mov	r1, r3
 8004b20:	a327      	add	r3, pc, #156	; (adr r3, 8004bc0 <FUNC_Transmission+0x16f0>)
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	f00a fa2f 	bl	800ef88 <__aeabi_dcmpgt>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <FUNC_Transmission+0x1664>
 8004b30:	2300      	movs	r3, #0
 8004b32:	461c      	mov	r4, r3
 8004b34:	b2e3      	uxtb	r3, r4
 8004b36:	461a      	mov	r2, r3
 8004b38:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004b3a:	f883 26f3 	strb.w	r2, [r3, #1779]	; 0x6f3
    /* RelationalOperator: '<S212>/Compare' incorporates:
 *  Constant: '<S212>/Constant'
 */
    /*@>25e83*/VCU_B./*@>297d5*/Compare_h/*@>79e5*/ = (/*@>25e89*/VCU_B./*@>297d8*/Add_c/*@>79e4*/ == /*@>2178c*/3);
 8004b3e:	4b22      	ldr	r3, [pc, #136]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004b40:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	bf0c      	ite	eq
 8004b48:	2301      	moveq	r3, #1
 8004b4a:	2300      	movne	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004b52:	f883 26f4 	strb.w	r2, [r3, #1780]	; 0x6f4
    /* Logic: '<S200>/Logical Operator2' */
    /*@>25e8f*/VCU_B./*@>297db*/RPMcheckgear31/*@>79eb*/ = (/*@>25e95*/VCU_B./*@>297de*/Compare_l/*@>79ea*/ && /*@>25e9b*/VCU_B./*@>297e1*/Compare_h);
 8004b56:	4b1c      	ldr	r3, [pc, #112]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004b58:	f893 36f3 	ldrb.w	r3, [r3, #1779]	; 0x6f3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d006      	beq.n	8004b6e <FUNC_Transmission+0x169e>
 8004b60:	4b19      	ldr	r3, [pc, #100]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004b62:	f893 36f4 	ldrb.w	r3, [r3, #1780]	; 0x6f4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <FUNC_Transmission+0x169e>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e000      	b.n	8004b70 <FUNC_Transmission+0x16a0>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004b74:	f883 26f5 	strb.w	r2, [r3, #1781]	; 0x6f5
    /* CombinatorialLogic: '<S216>/Logic' incorporates:
 *  Logic: '<S200>/Logical Operator'
 *  Memory: '<S216>/Memory'
 */
    /*@>25ea7*/VCU_B./*@>297e7*/LogicalOperator_d/*@>79fd*/ = (/*@>25ead*/VCU_B./*@>297ea*/UnitDelay4/*@>79f0*/ || /*@>25eb3*/VCU_B./*@>297ed*/LessthanNeutral/*@>79f3*/ || /*@>25eb9*/VCU_B./*@>297f0*/UnitDelay/*@>79f6*/ || /*@>25ebf*/VCU_B./*@>297f3*/Timeout/*@>79f9*/ || /*@>25ec5*/VCU_B./*@>297f6*/RPMcheckgear21/*@>79fc*/ || /*@>25ecb*/VCU_B./*@>297f9*/RPMcheckgear31);
 8004b78:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004b7a:	f893 36e8 	ldrb.w	r3, [r3, #1768]	; 0x6e8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d118      	bne.n	8004bb4 <FUNC_Transmission+0x16e4>
 8004b82:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004b84:	f893 36ed 	ldrb.w	r3, [r3, #1773]	; 0x6ed
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d113      	bne.n	8004bb4 <FUNC_Transmission+0x16e4>
 8004b8c:	4b0e      	ldr	r3, [pc, #56]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004b8e:	f893 36ee 	ldrb.w	r3, [r3, #1774]	; 0x6ee
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10e      	bne.n	8004bb4 <FUNC_Transmission+0x16e4>
 8004b96:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004b98:	f893 36ef 	ldrb.w	r3, [r3, #1775]	; 0x6ef
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d109      	bne.n	8004bb4 <FUNC_Transmission+0x16e4>
 8004ba0:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004ba2:	f893 36f2 	ldrb.w	r3, [r3, #1778]	; 0x6f2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d104      	bne.n	8004bb4 <FUNC_Transmission+0x16e4>
 8004baa:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <FUNC_Transmission+0x16f8>)
 8004bac:	f893 36f5 	ldrb.w	r3, [r3, #1781]	; 0x6f5
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00d      	beq.n	8004bd0 <FUNC_Transmission+0x1700>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e00c      	b.n	8004bd2 <FUNC_Transmission+0x1702>
 8004bb8:	00000000 	.word	0x00000000
 8004bbc:	40b38800 	.word	0x40b38800
 8004bc0:	00000000 	.word	0x00000000
 8004bc4:	40b4b400 	.word	0x40b4b400
 8004bc8:	200008c8 	.word	0x200008c8
 8004bcc:	20001058 	.word	0x20001058
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	4b96      	ldr	r3, [pc, #600]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004bd6:	f883 26f6 	strb.w	r2, [r3, #1782]	; 0x6f6
    /*@>25ed7*/VCU_B./*@>297ff*/Memory_l/*@>79ff*/ = /*@>2692c*/VCU_DW./*@>29ca3*/Memory_PreviousInput_a;
 8004bda:	4b96      	ldr	r3, [pc, #600]	; (8004e34 <FUNC_Transmission+0x1964>)
 8004bdc:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8004be0:	4b93      	ldr	r3, [pc, #588]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004be2:	f883 26f7 	strb.w	r2, [r3, #1783]	; 0x6f7
    /*@>219c5*/tmp/*@>1f18e*/ = /*@>25ee3*/VCU_B./*@>29805*/Logic_i/*@>24ef8*/[/*@>24ef5*/0];
 8004be6:	4b92      	ldr	r3, [pc, #584]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004be8:	f893 36e6 	ldrb.w	r3, [r3, #1766]	; 0x6e6
 8004bec:	71fb      	strb	r3, [r7, #7]
    /*@>218b8*/rowIdx/*@>1f1a5*/ = /*@>219c7*/tmp;
 8004bee:	79fb      	ldrb	r3, [r7, #7]
 8004bf0:	617b      	str	r3, [r7, #20]
    /*@>218bc*/rowIdx/*@>1f1ce*/ = /*@>2212f*/(int32_T)((/*@>2212c*/(uint32_T)/*@>218be*/rowIdx/*@>21b5c*/ << /*@>218c0*/1)/*@>21b5a*/ + /*@>25f01*/VCU_B./*@>29814*/LogicalOperator_d);
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	4a8e      	ldr	r2, [pc, #568]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004bf8:	f892 26f6 	ldrb.w	r2, [r2, #1782]	; 0x6f6
 8004bfc:	4413      	add	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
    /*@>218c3*/rowIdx/*@>1f1f7*/ = /*@>2213c*/(int32_T)((/*@>22139*/(uint32_T)/*@>218c5*/rowIdx/*@>21b52*/ << /*@>218c7*/1)/*@>21b50*/ + /*@>25f13*/VCU_B./*@>2981d*/Memory_l);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	4a8a      	ldr	r2, [pc, #552]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004c06:	f892 26f7 	ldrb.w	r2, [r2, #1783]	; 0x6f7
 8004c0a:	4413      	add	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]
    /*@>25f25*/VCU_B./*@>29826*/Logic_iy/*@>1f20d*/[/*@>218cc*/0U]/*@>1f20c*/ = /*@>26780*/VCU_ConstP./*@>29c28*/pooled37/*@>24f08*/[/*@>24f03*/(uint32_T)/*@>24f05*/rowIdx];
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	4a89      	ldr	r2, [pc, #548]	; (8004e38 <FUNC_Transmission+0x1968>)
 8004c12:	4413      	add	r3, r2
 8004c14:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004c18:	4b85      	ldr	r3, [pc, #532]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004c1a:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
    /*@>25f37*/VCU_B./*@>2982f*/Logic_iy/*@>1f220*/[/*@>218d1*/1U]/*@>1f21f*/ = /*@>26786*/VCU_ConstP./*@>29c2b*/pooled37/*@>24f11*/[/*@>24f0d*/rowIdx/*@>24f0a*/ + /*@>24f0e*/8U];
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	3308      	adds	r3, #8
 8004c22:	4a85      	ldr	r2, [pc, #532]	; (8004e38 <FUNC_Transmission+0x1968>)
 8004c24:	4413      	add	r3, r2
 8004c26:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004c2a:	4b81      	ldr	r3, [pc, #516]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004c2c:	f883 26f9 	strb.w	r2, [r3, #1785]	; 0x6f9
 *
 * Block description for '<S222>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>25f49*/VCU_B./*@>29838*/Uk1_i/*@>8480*/ = /*@>26932*/VCU_DW./*@>29ca6*/DelayInput1_DSTATE_g;
 8004c30:	4b80      	ldr	r3, [pc, #512]	; (8004e34 <FUNC_Transmission+0x1964>)
 8004c32:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004c36:	497e      	ldr	r1, [pc, #504]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004c38:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    /* CombinatorialLogic: '<S225>/Logic' incorporates:
 *  RelationalOperator: '<S222>/FixPt Relational Operator'
 */
    /*@>25f5b*/VCU_B./*@>29841*/FixPtRelationalOperator_c/*@>7a05*/ = (/*@>25f61*/VCU_B./*@>29844*/STW_shift_up_request/*@>7a04*/ > /*@>25f67*/VCU_B./*@>29847*/Uk1_i);
 8004c3c:	4b7c      	ldr	r3, [pc, #496]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004c3e:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8004c42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c46:	4b7a      	ldr	r3, [pc, #488]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004c48:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004c4c:	2401      	movs	r4, #1
 8004c4e:	f00a f99b 	bl	800ef88 <__aeabi_dcmpgt>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <FUNC_Transmission+0x178c>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	461c      	mov	r4, r3
 8004c5c:	b2e3      	uxtb	r3, r4
 8004c5e:	461a      	mov	r2, r3
 8004c60:	4b73      	ldr	r3, [pc, #460]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004c62:	f883 26fa 	strb.w	r2, [r3, #1786]	; 0x6fa
    /* Gain: '<S227>/Gain' */
    /*@>25f79*/VCU_B./*@>29850*/Gain_m/*@>7a0d*/ = /*@>21793*/2.0/*@>21b48*/ * /*@>25f7f*/VCU_B./*@>29853*/DataTypeConversion1;
 8004c66:	4b72      	ldr	r3, [pc, #456]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004c68:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	4610      	mov	r0, r2
 8004c72:	4619      	mov	r1, r3
 8004c74:	f009 fd46 	bl	800e704 <__adddf3>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	496c      	ldr	r1, [pc, #432]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004c7e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    /* RelationalOperator: '<S227>/Relational Operator' incorporates:
 *  Constant: '<S227>/Constant'
 */
    /*@>25f9d*/VCU_B./*@>29862*/RelationalOperator_d/*@>7a11*/ = (/*@>25fa3*/VCU_B./*@>29865*/Gain_m/*@>7a10*/ > /*@>21794*/169.0);
 8004c82:	4b6b      	ldr	r3, [pc, #428]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004c84:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004c88:	2101      	movs	r1, #1
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	4619      	mov	r1, r3
 8004c90:	a363      	add	r3, pc, #396	; (adr r3, 8004e20 <FUNC_Transmission+0x1950>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f00a f977 	bl	800ef88 <__aeabi_dcmpgt>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <FUNC_Transmission+0x17d4>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	461c      	mov	r4, r3
 8004ca4:	b2e3      	uxtb	r3, r4
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	4b61      	ldr	r3, [pc, #388]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004caa:	f883 26fb 	strb.w	r2, [r3, #1787]	; 0x6fb
    /* RelationalOperator: '<S227>/Relational Operator1' incorporates:
 *  Constant: '<S227>/Constant1'
 */
    /*@>25fb5*/VCU_B./*@>2986e*/RelationalOperator1_a/*@>7a15*/ = (/*@>25fbb*/VCU_B./*@>29871*/Gain_m/*@>7a14*/ > /*@>21796*/269.0);
 8004cae:	4b60      	ldr	r3, [pc, #384]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004cb0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	4610      	mov	r0, r2
 8004cba:	4619      	mov	r1, r3
 8004cbc:	a35a      	add	r3, pc, #360	; (adr r3, 8004e28 <FUNC_Transmission+0x1958>)
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	f00a f961 	bl	800ef88 <__aeabi_dcmpgt>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <FUNC_Transmission+0x1800>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	461c      	mov	r4, r3
 8004cd0:	b2e3      	uxtb	r3, r4
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	4b56      	ldr	r3, [pc, #344]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004cd6:	f883 26fc 	strb.w	r2, [r3, #1788]	; 0x6fc
    /* RelationalOperator: '<S227>/Relational Operator2' incorporates:
 *  Constant: '<S227>/Constant2'
 */
    /*@>25fd3*/VCU_B./*@>2987d*/RelationalOperator2_d/*@>7a19*/ = (/*@>25fd9*/VCU_B./*@>29880*/Gain_m/*@>7a18*/ > /*@>21797*/360.0);
 8004cda:	4b55      	ldr	r3, [pc, #340]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004cdc:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	4b53      	ldr	r3, [pc, #332]	; (8004e3c <FUNC_Transmission+0x196c>)
 8004cee:	f00a f94b 	bl	800ef88 <__aeabi_dcmpgt>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <FUNC_Transmission+0x182c>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	461c      	mov	r4, r3
 8004cfc:	b2e3      	uxtb	r3, r4
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4b4b      	ldr	r3, [pc, #300]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004d02:	f883 26fd 	strb.w	r2, [r3, #1789]	; 0x6fd
    /* Sum: '<S227>/Add' */
    /*@>25fe5*/VCU_B./*@>29886*/Add_j/*@>a83a*/ = /*@>22178*/(uint8_T)((/*@>22172*/(uint32_T)/*@>25feb*/VCU_B./*@>29889*/RelationalOperator_d/*@>21b38*/ + /*@>25ff1*/VCU_B./*@>2988c*/RelationalOperator1_a)/*@>21b2b*/ + /*@>25ff7*/VCU_B./*@>2988f*/RelationalOperator2_d);
 8004d06:	4b4a      	ldr	r3, [pc, #296]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004d08:	f893 26fb 	ldrb.w	r2, [r3, #1787]	; 0x6fb
 8004d0c:	4b48      	ldr	r3, [pc, #288]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004d0e:	f893 36fc 	ldrb.w	r3, [r3, #1788]	; 0x6fc
 8004d12:	4413      	add	r3, r2
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	4b46      	ldr	r3, [pc, #280]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004d18:	f893 36fd 	ldrb.w	r3, [r3, #1789]	; 0x6fd
 8004d1c:	4413      	add	r3, r2
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	4b43      	ldr	r3, [pc, #268]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004d22:	f883 2685 	strb.w	r2, [r3, #1669]	; 0x685
 *
 * Block description for '<S223>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>2600f*/VCU_B./*@>2989b*/Uk1_b/*@>848c*/ = /*@>2693e*/VCU_DW./*@>29cac*/DelayInput1_DSTATE_ga;
 8004d26:	4b43      	ldr	r3, [pc, #268]	; (8004e34 <FUNC_Transmission+0x1964>)
 8004d28:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
 8004d2c:	4b40      	ldr	r3, [pc, #256]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004d2e:	f883 2686 	strb.w	r2, [r3, #1670]	; 0x686
    /* RelationalOperator: '<S223>/FixPt Relational Operator' */
    /*@>26021*/VCU_B./*@>298a4*/FixPtRelationalOperator_m/*@>7a24*/ = (/*@>26027*/VCU_B./*@>298a7*/Add_j/*@>7a23*/ > /*@>2602d*/VCU_B./*@>298aa*/Uk1_b);
 8004d32:	4b3f      	ldr	r3, [pc, #252]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004d34:	f893 2685 	ldrb.w	r2, [r3, #1669]	; 0x685
 8004d38:	4b3d      	ldr	r3, [pc, #244]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004d3a:	f893 3686 	ldrb.w	r3, [r3, #1670]	; 0x686
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	bf8c      	ite	hi
 8004d42:	2301      	movhi	r3, #1
 8004d44:	2300      	movls	r3, #0
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4b39      	ldr	r3, [pc, #228]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004d4c:	f883 26fe 	strb.w	r2, [r3, #1790]	; 0x6fe
    /* RelationalOperator: '<S219>/Compare' incorporates:
 *  Constant: '<S219>/Constant'
 */
    /*@>26039*/VCU_B./*@>298b0*/Compare_ha/*@>7a28*/ = (/*@>2603f*/VCU_B./*@>298b3*/Add_j/*@>7a27*/ >= /*@>21798*/3);
 8004d50:	4b37      	ldr	r3, [pc, #220]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004d52:	f893 3685 	ldrb.w	r3, [r3, #1669]	; 0x685
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	bf8c      	ite	hi
 8004d5a:	2301      	movhi	r3, #1
 8004d5c:	2300      	movls	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	461a      	mov	r2, r3
 8004d62:	4b33      	ldr	r3, [pc, #204]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004d64:	f883 26ff 	strb.w	r2, [r3, #1791]	; 0x6ff
    /* UnitDelay: '<S200>/Unit Delay' */
    /*@>26057*/VCU_B./*@>298bf*/UnitDelay_p/*@>8498*/ = /*@>2694a*/VCU_DW./*@>29cb2*/UnitDelay_DSTATE_b;
 8004d68:	4b32      	ldr	r3, [pc, #200]	; (8004e34 <FUNC_Transmission+0x1964>)
 8004d6a:	f893 20db 	ldrb.w	r2, [r3, #219]	; 0xdb
 8004d6e:	4b30      	ldr	r3, [pc, #192]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004d70:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
    /* UnitDelay: '<S201>/Unit Delay1' */
    /*@>26069*/VCU_B./*@>298c8*/Timeout_i/*@>84a4*/ = /*@>26950*/VCU_DW./*@>29cb5*/UnitDelay1_DSTATE_k;
 8004d74:	4b2f      	ldr	r3, [pc, #188]	; (8004e34 <FUNC_Transmission+0x1964>)
 8004d76:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004d7a:	4b2d      	ldr	r3, [pc, #180]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004d7c:	f883 2701 	strb.w	r2, [r3, #1793]	; 0x701
    /* RelationalOperator: '<S221>/Compare' incorporates:
 *  Constant: '<S221>/Constant'
 */
    /*@>26075*/VCU_B./*@>298ce*/Compare_e/*@>7a2e*/ = (/*@>2607b*/VCU_B./*@>298d1*/Add_j/*@>7a2d*/ == /*@>2179a*/0);
 8004d80:	4b2b      	ldr	r3, [pc, #172]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004d82:	f893 3685 	ldrb.w	r3, [r3, #1669]	; 0x685
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	bf0c      	ite	eq
 8004d8a:	2301      	moveq	r3, #1
 8004d8c:	2300      	movne	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004d94:	f883 2702 	strb.w	r2, [r3, #1794]	; 0x702
    /* RelationalOperator: '<S220>/Compare' incorporates:
 *  Constant: '<S220>/Constant'
 */
    /*@>26087*/VCU_B./*@>298d7*/Compare_a/*@>7a32*/ = (/*@>2608d*/VCU_B./*@>298da*/x_clutch_STW/*@>7a31*/ < /*@>2179b*/15.0);
 8004d98:	4b25      	ldr	r3, [pc, #148]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004d9a:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	2101      	movs	r1, #1
 8004da4:	460c      	mov	r4, r1
 8004da6:	4610      	mov	r0, r2
 8004da8:	4619      	mov	r1, r3
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	4b24      	ldr	r3, [pc, #144]	; (8004e40 <FUNC_Transmission+0x1970>)
 8004db0:	f00a f8cc 	bl	800ef4c <__aeabi_dcmplt>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <FUNC_Transmission+0x18ee>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	461c      	mov	r4, r3
 8004dbe:	b2e3      	uxtb	r3, r4
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4b1b      	ldr	r3, [pc, #108]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004dc4:	f883 2703 	strb.w	r2, [r3, #1795]	; 0x703
    /* Logic: '<S201>/Logical Operator1' */
    /*@>2609f*/VCU_B./*@>298e3*/FailSafefirstgear/*@>7a38*/ = (/*@>260a5*/VCU_B./*@>298e6*/Compare_e/*@>7a37*/ && /*@>260ab*/VCU_B./*@>298e9*/Compare_a);
 8004dc8:	4b19      	ldr	r3, [pc, #100]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004dca:	f893 3702 	ldrb.w	r3, [r3, #1794]	; 0x702
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d006      	beq.n	8004de0 <FUNC_Transmission+0x1910>
 8004dd2:	4b17      	ldr	r3, [pc, #92]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004dd4:	f893 3703 	ldrb.w	r3, [r3, #1795]	; 0x703
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <FUNC_Transmission+0x1910>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <FUNC_Transmission+0x1912>
 8004de0:	2300      	movs	r3, #0
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004de6:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
    /* CombinatorialLogic: '<S225>/Logic' incorporates:
 *  Logic: '<S201>/Logical Operator'
 *  Memory: '<S225>/Memory'
 */
    /*@>260bd*/VCU_B./*@>298f2*/LogicalOperator_i/*@>7a47*/ = (/*@>260c3*/VCU_B./*@>298f5*/FixPtRelationalOperator_m/*@>7a3d*/ || /*@>260c9*/VCU_B./*@>298f8*/Compare_ha/*@>7a40*/ || /*@>260cf*/VCU_B./*@>298fb*/UnitDelay_p/*@>7a43*/ || /*@>260d5*/VCU_B./*@>298fe*/Timeout_i/*@>7a46*/ || /*@>260db*/VCU_B./*@>29901*/FailSafefirstgear);
 8004dea:	4b11      	ldr	r3, [pc, #68]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004dec:	f893 36fe 	ldrb.w	r3, [r3, #1790]	; 0x6fe
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d113      	bne.n	8004e1c <FUNC_Transmission+0x194c>
 8004df4:	4b0e      	ldr	r3, [pc, #56]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004df6:	f893 36ff 	ldrb.w	r3, [r3, #1791]	; 0x6ff
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10e      	bne.n	8004e1c <FUNC_Transmission+0x194c>
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004e00:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d109      	bne.n	8004e1c <FUNC_Transmission+0x194c>
 8004e08:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004e0a:	f893 3701 	ldrb.w	r3, [r3, #1793]	; 0x701
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d104      	bne.n	8004e1c <FUNC_Transmission+0x194c>
 8004e12:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <FUNC_Transmission+0x1960>)
 8004e14:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d013      	beq.n	8004e44 <FUNC_Transmission+0x1974>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e012      	b.n	8004e46 <FUNC_Transmission+0x1976>
 8004e20:	00000000 	.word	0x00000000
 8004e24:	40652000 	.word	0x40652000
 8004e28:	00000000 	.word	0x00000000
 8004e2c:	4070d000 	.word	0x4070d000
 8004e30:	200008c8 	.word	0x200008c8
 8004e34:	20001058 	.word	0x20001058
 8004e38:	0800f1e8 	.word	0x0800f1e8
 8004e3c:	40768000 	.word	0x40768000
 8004e40:	402e0000 	.word	0x402e0000
 8004e44:	2300      	movs	r3, #0
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	4bb0      	ldr	r3, [pc, #704]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004e4a:	f883 2705 	strb.w	r2, [r3, #1797]	; 0x705
    /*@>260f3*/VCU_B./*@>2990d*/Memory_a/*@>7a49*/ = /*@>26962*/VCU_DW./*@>29cbe*/Memory_PreviousInput_al;
 8004e4e:	4bb0      	ldr	r3, [pc, #704]	; (8005110 <FUNC_Transmission+0x1c40>)
 8004e50:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
 8004e54:	4bad      	ldr	r3, [pc, #692]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004e56:	f883 2706 	strb.w	r2, [r3, #1798]	; 0x706
    /*@>218d4*/rowIdx/*@>1f250*/ = /*@>2611d*/VCU_B./*@>29922*/FixPtRelationalOperator_c;
 8004e5a:	4bac      	ldr	r3, [pc, #688]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004e5c:	f893 36fa 	ldrb.w	r3, [r3, #1786]	; 0x6fa
 8004e60:	617b      	str	r3, [r7, #20]
    /*@>218d8*/rowIdx/*@>1f277*/ = /*@>221d2*/(int32_T)((/*@>221cf*/(uint32_T)/*@>218da*/rowIdx/*@>21b22*/ << /*@>218dc*/1)/*@>21b20*/ + /*@>2613b*/VCU_B./*@>29931*/LogicalOperator_i);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	4aa9      	ldr	r2, [pc, #676]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004e68:	f892 2705 	ldrb.w	r2, [r2, #1797]	; 0x705
 8004e6c:	4413      	add	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
    /*@>218df*/rowIdx/*@>1f29e*/ = /*@>221df*/(int32_T)((/*@>221dc*/(uint32_T)/*@>218e1*/rowIdx/*@>21b18*/ << /*@>218e3*/1)/*@>21b16*/ + /*@>26147*/VCU_B./*@>29937*/Memory_a);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	4aa5      	ldr	r2, [pc, #660]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004e76:	f892 2706 	ldrb.w	r2, [r2, #1798]	; 0x706
 8004e7a:	4413      	add	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]
    /*@>26153*/VCU_B./*@>2993d*/Logic_iz/*@>1f2b4*/[/*@>218e8*/0U]/*@>1f2b3*/ = /*@>2678c*/VCU_ConstP./*@>29c2e*/pooled37/*@>24f18*/[/*@>24f13*/(uint32_T)/*@>24f15*/rowIdx];
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	4aa4      	ldr	r2, [pc, #656]	; (8005114 <FUNC_Transmission+0x1c44>)
 8004e82:	4413      	add	r3, r2
 8004e84:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004e88:	4ba0      	ldr	r3, [pc, #640]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004e8a:	f883 2707 	strb.w	r2, [r3, #1799]	; 0x707
    /*@>2615f*/VCU_B./*@>29943*/Logic_iz/*@>1f2c7*/[/*@>218ed*/1U]/*@>1f2c6*/ = /*@>26792*/VCU_ConstP./*@>29c31*/pooled37/*@>24f21*/[/*@>24f1d*/rowIdx/*@>24f1a*/ + /*@>24f1e*/8U];
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	3308      	adds	r3, #8
 8004e92:	4aa0      	ldr	r2, [pc, #640]	; (8005114 <FUNC_Transmission+0x1c44>)
 8004e94:	4413      	add	r3, r2
 8004e96:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004e9a:	4b9c      	ldr	r3, [pc, #624]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004e9c:	f883 2708 	strb.w	r2, [r3, #1800]	; 0x708
    /* CombinatorialLogic: '<S226>/Logic' incorporates:
 *  S-Function (sdspcount2): '<S201>/Counter1'
 */
    /*@>2616b*/VCU_B./*@>29949*/Counter1/*@>8502*/ = /*@>2160d*/false;
 8004ea0:	4b9a      	ldr	r3, [pc, #616]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2709 	strb.w	r2, [r3, #1801]	; 0x709
    /* S-Function (sdspcount2): '<S201>/Counter1' */
    /*@>8506*/if (/*@>26177*/VCU_B./*@>2994f*/LogicalOperator_i) {
 8004ea8:	4b98      	ldr	r3, [pc, #608]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004eaa:	f893 3705 	ldrb.w	r3, [r3, #1797]	; 0x705
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <FUNC_Transmission+0x19ea>
        /*@>2696e*/VCU_DW./*@>29cc4*/Counter1_Count/*@>850a*/ = /*@>28401*/0U;
 8004eb2:	4b97      	ldr	r3, [pc, #604]	; (8005110 <FUNC_Transmission+0x1c40>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
    }
    /*@>8520*/if (/*@>26195*/VCU_B./*@>2995e*/Logic_iz/*@>24f3b*/[/*@>24f38*/0]) {
 8004eba:	4b94      	ldr	r3, [pc, #592]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004ebc:	f893 3707 	ldrb.w	r3, [r3, #1799]	; 0x707
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d011      	beq.n	8004ee8 <FUNC_Transmission+0x1a18>
        /*@>1ec81*/if (/*@>2697a*/VCU_DW./*@>29cca*/Counter1_Count/*@>8525*/ < /*@>2179f*/60) {
 8004ec4:	4b92      	ldr	r3, [pc, #584]	; (8005110 <FUNC_Transmission+0x1c40>)
 8004ec6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004eca:	2b3b      	cmp	r3, #59	; 0x3b
 8004ecc:	d808      	bhi.n	8004ee0 <FUNC_Transmission+0x1a10>
            /*@>2698c*/VCU_DW./*@>29cd3*/Counter1_Count/*@>28453*/++;
 8004ece:	4b90      	ldr	r3, [pc, #576]	; (8005110 <FUNC_Transmission+0x1c40>)
 8004ed0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	4b8d      	ldr	r3, [pc, #564]	; (8005110 <FUNC_Transmission+0x1c40>)
 8004eda:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8004ede:	e003      	b.n	8004ee8 <FUNC_Transmission+0x1a18>
        } else {
            /*@>26986*/VCU_DW./*@>29cd0*/Counter1_Count/*@>852c*/ = /*@>28404*/0U;
 8004ee0:	4b8b      	ldr	r3, [pc, #556]	; (8005110 <FUNC_Transmission+0x1c40>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
        }
    }
    /*@>853e*/if (/*@>26980*/VCU_DW./*@>29ccd*/Counter1_Count/*@>853d*/ == /*@>217a0*/1) {
 8004ee8:	4b89      	ldr	r3, [pc, #548]	; (8005110 <FUNC_Transmission+0x1c40>)
 8004eea:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d103      	bne.n	8004efa <FUNC_Transmission+0x1a2a>
        /* CombinatorialLogic: '<S226>/Logic' */
        /*@>261b9*/VCU_B./*@>29970*/Counter1/*@>8542*/ = /*@>2161c*/true;
 8004ef2:	4b86      	ldr	r3, [pc, #536]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2709 	strb.w	r2, [r3, #1801]	; 0x709
 *
 * Block description for '<S224>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>261c5*/VCU_B./*@>29976*/Uk1_m/*@>8585*/ = /*@>2699e*/VCU_DW./*@>29cd9*/DelayInput1_DSTATE_f;
 8004efa:	4b85      	ldr	r3, [pc, #532]	; (8005110 <FUNC_Transmission+0x1c40>)
 8004efc:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
 8004f00:	4b82      	ldr	r3, [pc, #520]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004f02:	f883 2687 	strb.w	r2, [r3, #1671]	; 0x687
    /* RelationalOperator: '<S224>/FixPt Relational Operator' */
    /*@>261d1*/VCU_B./*@>2997c*/FixPtRelationalOperator_b/*@>7a50*/ = (/*@>261d7*/VCU_B./*@>2997f*/Add_j/*@>7a4f*/ > /*@>261dd*/VCU_B./*@>29982*/Uk1_m);
 8004f06:	4b81      	ldr	r3, [pc, #516]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004f08:	f893 2685 	ldrb.w	r2, [r3, #1669]	; 0x685
 8004f0c:	4b7f      	ldr	r3, [pc, #508]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004f0e:	f893 3687 	ldrb.w	r3, [r3, #1671]	; 0x687
 8004f12:	429a      	cmp	r2, r3
 8004f14:	bf8c      	ite	hi
 8004f16:	2301      	movhi	r3, #1
 8004f18:	2300      	movls	r3, #0
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4b7b      	ldr	r3, [pc, #492]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004f20:	f883 270a 	strb.w	r2, [r3, #1802]	; 0x70a
    /* CombinatorialLogic: '<S226>/Logic' incorporates:
 *  Logic: '<S201>/Logical Operator2'
 *  Memory: '<S226>/Memory'
 */
    /*@>261e9*/VCU_B./*@>29988*/LogicalOperator2_h/*@>7a56*/ = (/*@>261ef*/VCU_B./*@>2998b*/LogicalOperator_i/*@>7a55*/ || /*@>261f5*/VCU_B./*@>2998e*/FixPtRelationalOperator_b);
 8004f24:	4b79      	ldr	r3, [pc, #484]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004f26:	f893 3705 	ldrb.w	r3, [r3, #1797]	; 0x705
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d104      	bne.n	8004f38 <FUNC_Transmission+0x1a68>
 8004f2e:	4b77      	ldr	r3, [pc, #476]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004f30:	f893 370a 	ldrb.w	r3, [r3, #1802]	; 0x70a
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <FUNC_Transmission+0x1a6c>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <FUNC_Transmission+0x1a6e>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	4b72      	ldr	r3, [pc, #456]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004f42:	f883 270b 	strb.w	r2, [r3, #1803]	; 0x70b
    /*@>26201*/VCU_B./*@>29994*/Memory_gt/*@>7a58*/ = /*@>269a4*/VCU_DW./*@>29cdc*/Memory_PreviousInput_k;
 8004f46:	4b72      	ldr	r3, [pc, #456]	; (8005110 <FUNC_Transmission+0x1c40>)
 8004f48:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
 8004f4c:	4b6f      	ldr	r3, [pc, #444]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004f4e:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
    /*@>21928*/rowIdx/*@>1f445*/ = /*@>2620d*/VCU_B./*@>2999a*/Counter1;
 8004f52:	4b6e      	ldr	r3, [pc, #440]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004f54:	f893 3709 	ldrb.w	r3, [r3, #1801]	; 0x709
 8004f58:	617b      	str	r3, [r7, #20]
    /*@>2192c*/rowIdx/*@>1f46c*/ = /*@>2226c*/(int32_T)((/*@>22269*/(uint32_T)/*@>2192e*/rowIdx/*@>21afe*/ << /*@>21930*/1)/*@>21afc*/ + /*@>26219*/VCU_B./*@>299a0*/LogicalOperator2_h);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	4a6b      	ldr	r2, [pc, #428]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004f60:	f892 270b 	ldrb.w	r2, [r2, #1803]	; 0x70b
 8004f64:	4413      	add	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
    /*@>21933*/rowIdx/*@>1f493*/ = /*@>2227c*/(int32_T)((/*@>22279*/(uint32_T)/*@>21935*/rowIdx/*@>21af4*/ << /*@>21937*/1)/*@>21af2*/ + /*@>26225*/VCU_B./*@>299a6*/Memory_gt);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	4a67      	ldr	r2, [pc, #412]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004f6e:	f892 270c 	ldrb.w	r2, [r2, #1804]	; 0x70c
 8004f72:	4413      	add	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]
    /*@>2622b*/VCU_B./*@>299a9*/Logic_e/*@>1f4a9*/[/*@>2193c*/0U]/*@>1f4a8*/ = /*@>267b0*/VCU_ConstP./*@>29c40*/pooled37/*@>24f52*/[/*@>24f4d*/(uint32_T)/*@>24f4f*/rowIdx];
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	4a66      	ldr	r2, [pc, #408]	; (8005114 <FUNC_Transmission+0x1c44>)
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004f80:	4b62      	ldr	r3, [pc, #392]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004f82:	f883 270d 	strb.w	r2, [r3, #1805]	; 0x70d
    /*@>26237*/VCU_B./*@>299af*/Logic_e/*@>1f4bc*/[/*@>21941*/1U]/*@>1f4bb*/ = /*@>267b6*/VCU_ConstP./*@>29c43*/pooled37/*@>24f60*/[/*@>24f5c*/rowIdx/*@>24f59*/ + /*@>24f5d*/8U];
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	3308      	adds	r3, #8
 8004f8a:	4a62      	ldr	r2, [pc, #392]	; (8005114 <FUNC_Transmission+0x1c44>)
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004f92:	4b5e      	ldr	r3, [pc, #376]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004f94:	f883 270e 	strb.w	r2, [r3, #1806]	; 0x70e
    /* DataTypeConversion: '<S139>/Data Type Conversion11' */
    /*@>2623d*/VCU_B./*@>299b2*/Ignition_Cut_o/*@>7a5c*/ = /*@>26243*/VCU_B./*@>299b5*/Logic_e/*@>24f65*/[/*@>24f62*/0];
 8004f98:	4b5c      	ldr	r3, [pc, #368]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004f9a:	f893 370d 	ldrb.w	r3, [r3, #1805]	; 0x70d
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f009 fcec 	bl	800e97c <__aeabi_ui2d>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4958      	ldr	r1, [pc, #352]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004faa:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    /* S-Function (sdspcount2): '<S200>/Counter' */
    /*@>26249*/VCU_B./*@>299b8*/Counter/*@>85e3*/ = /*@>21625*/false;
 8004fae:	4b57      	ldr	r3, [pc, #348]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 270f 	strb.w	r2, [r3, #1807]	; 0x70f
    /*@>85e7*/if (/*@>26255*/VCU_B./*@>299be*/LogicalOperator_d) {
 8004fb6:	4b55      	ldr	r3, [pc, #340]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004fb8:	f893 36f6 	ldrb.w	r3, [r3, #1782]	; 0x6f6
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <FUNC_Transmission+0x1af8>
        /*@>269d4*/VCU_DW./*@>29cf1*/Counter_Count/*@>85eb*/ = /*@>2840d*/0U;
 8004fc0:	4b53      	ldr	r3, [pc, #332]	; (8005110 <FUNC_Transmission+0x1c40>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    }
    /*@>8601*/if (/*@>26273*/VCU_B./*@>299cd*/Logic_i/*@>24f6a*/[/*@>24f67*/0]) {
 8004fc8:	4b50      	ldr	r3, [pc, #320]	; (800510c <FUNC_Transmission+0x1c3c>)
 8004fca:	f893 36e6 	ldrb.w	r3, [r3, #1766]	; 0x6e6
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d012      	beq.n	8004ff8 <FUNC_Transmission+0x1b28>
        /*@>1ec8b*/if (/*@>269da*/VCU_DW./*@>29cf4*/Counter_Count/*@>8606*/ < /*@>217a6*/500) {
 8004fd2:	4b4f      	ldr	r3, [pc, #316]	; (8005110 <FUNC_Transmission+0x1c40>)
 8004fd4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004fd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004fdc:	d208      	bcs.n	8004ff0 <FUNC_Transmission+0x1b20>
            /*@>269f2*/VCU_DW./*@>29d00*/Counter_Count/*@>28455*/++;
 8004fde:	4b4c      	ldr	r3, [pc, #304]	; (8005110 <FUNC_Transmission+0x1c40>)
 8004fe0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	4b49      	ldr	r3, [pc, #292]	; (8005110 <FUNC_Transmission+0x1c40>)
 8004fea:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8004fee:	e003      	b.n	8004ff8 <FUNC_Transmission+0x1b28>
        } else {
            /*@>269ec*/VCU_DW./*@>29cfd*/Counter_Count/*@>860d*/ = /*@>28410*/0U;
 8004ff0:	4b47      	ldr	r3, [pc, #284]	; (8005110 <FUNC_Transmission+0x1c40>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
        }
    }
    /*@>861f*/if (/*@>269e6*/VCU_DW./*@>29cfa*/Counter_Count/*@>861e*/ == /*@>217a7*/500) {
 8004ff8:	4b45      	ldr	r3, [pc, #276]	; (8005110 <FUNC_Transmission+0x1c40>)
 8004ffa:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004ffe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005002:	d103      	bne.n	800500c <FUNC_Transmission+0x1b3c>
        /*@>26297*/VCU_B./*@>299df*/Counter/*@>8623*/ = /*@>21634*/true;
 8005004:	4b41      	ldr	r3, [pc, #260]	; (800510c <FUNC_Transmission+0x1c3c>)
 8005006:	2201      	movs	r2, #1
 8005008:	f883 270f 	strb.w	r2, [r3, #1807]	; 0x70f
    }
    /* End of S-Function (sdspcount2): '<S200>/Counter' */

    /* S-Function (sdspcount2): '<S201>/Counter' */
    /*@>262a3*/VCU_B./*@>299e5*/Counter_d/*@>8668*/ = /*@>21639*/false;
 800500c:	4b3f      	ldr	r3, [pc, #252]	; (800510c <FUNC_Transmission+0x1c3c>)
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2710 	strb.w	r2, [r3, #1808]	; 0x710
    /*@>866c*/if (/*@>262af*/VCU_B./*@>299eb*/LogicalOperator_i) {
 8005014:	4b3d      	ldr	r3, [pc, #244]	; (800510c <FUNC_Transmission+0x1c3c>)
 8005016:	f893 3705 	ldrb.w	r3, [r3, #1797]	; 0x705
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <FUNC_Transmission+0x1b56>
        /*@>269fe*/VCU_DW./*@>29d03*/Counter_Count_i/*@>8670*/ = /*@>28413*/0U;
 800501e:	4b3c      	ldr	r3, [pc, #240]	; (8005110 <FUNC_Transmission+0x1c40>)
 8005020:	2200      	movs	r2, #0
 8005022:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
    }
    /*@>8686*/if (/*@>262c1*/VCU_B./*@>299f4*/Logic_iz/*@>24f7f*/[/*@>24f7c*/0]) {
 8005026:	4b39      	ldr	r3, [pc, #228]	; (800510c <FUNC_Transmission+0x1c3c>)
 8005028:	f893 3707 	ldrb.w	r3, [r3, #1799]	; 0x707
 800502c:	2b00      	cmp	r3, #0
 800502e:	d011      	beq.n	8005054 <FUNC_Transmission+0x1b84>
        /*@>1ec95*/if (/*@>26a04*/VCU_DW./*@>29d06*/Counter_Count_i/*@>868b*/ < /*@>217ab*/200) {
 8005030:	4b37      	ldr	r3, [pc, #220]	; (8005110 <FUNC_Transmission+0x1c40>)
 8005032:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005036:	2bc7      	cmp	r3, #199	; 0xc7
 8005038:	d808      	bhi.n	800504c <FUNC_Transmission+0x1b7c>
            /*@>26a16*/VCU_DW./*@>29d0f*/Counter_Count_i/*@>28456*/++;
 800503a:	4b35      	ldr	r3, [pc, #212]	; (8005110 <FUNC_Transmission+0x1c40>)
 800503c:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005040:	3301      	adds	r3, #1
 8005042:	b2da      	uxtb	r2, r3
 8005044:	4b32      	ldr	r3, [pc, #200]	; (8005110 <FUNC_Transmission+0x1c40>)
 8005046:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
 800504a:	e003      	b.n	8005054 <FUNC_Transmission+0x1b84>
        } else {
            /*@>26a10*/VCU_DW./*@>29d0c*/Counter_Count_i/*@>8692*/ = /*@>28416*/0U;
 800504c:	4b30      	ldr	r3, [pc, #192]	; (8005110 <FUNC_Transmission+0x1c40>)
 800504e:	2200      	movs	r2, #0
 8005050:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
        }
    }
    /*@>86a4*/if (/*@>26a0a*/VCU_DW./*@>29d09*/Counter_Count_i/*@>86a3*/ == /*@>217ae*/180) {
 8005054:	4b2e      	ldr	r3, [pc, #184]	; (8005110 <FUNC_Transmission+0x1c40>)
 8005056:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800505a:	2bb4      	cmp	r3, #180	; 0xb4
 800505c:	d103      	bne.n	8005066 <FUNC_Transmission+0x1b96>
        /*@>262df*/VCU_B./*@>29a03*/Counter_d/*@>86a8*/ = /*@>21648*/true;
 800505e:	4b2b      	ldr	r3, [pc, #172]	; (800510c <FUNC_Transmission+0x1c3c>)
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2710 	strb.w	r2, [r3, #1808]	; 0x710
    }
    /* End of S-Function (sdspcount2): '<S201>/Counter' */

    /* DataTypeConversion: '<S139>/Data Type Conversion8' */
    /*@>262e5*/VCU_B./*@>29a06*/VOVG_ShiftUp_k/*@>7a61*/ = /*@>262eb*/VCU_B./*@>29a09*/Logic_iz/*@>24f89*/[/*@>24f86*/0];
 8005066:	4b29      	ldr	r3, [pc, #164]	; (800510c <FUNC_Transmission+0x1c3c>)
 8005068:	f893 3707 	ldrb.w	r3, [r3, #1799]	; 0x707
 800506c:	4618      	mov	r0, r3
 800506e:	f009 fc85 	bl	800e97c <__aeabi_ui2d>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4925      	ldr	r1, [pc, #148]	; (800510c <FUNC_Transmission+0x1c3c>)
 8005078:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 *
 * Block description for '<S213>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>262f7*/VCU_B./*@>29a0f*/Uk1_f/*@>86eb*/ = /*@>26a28*/VCU_DW./*@>29d15*/DelayInput1_DSTATE_p;
 800507c:	4b24      	ldr	r3, [pc, #144]	; (8005110 <FUNC_Transmission+0x1c40>)
 800507e:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 8005082:	4b22      	ldr	r3, [pc, #136]	; (800510c <FUNC_Transmission+0x1c3c>)
 8005084:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
    /* RelationalOperator: '<S213>/FixPt Relational Operator' */
    /*@>262fd*/VCU_B./*@>29a12*/FixPtRelationalOperator_d/*@>7a66*/ = (/*@>26303*/VCU_B./*@>29a15*/Add_c/*@>7a65*/ < /*@>26309*/VCU_B./*@>29a18*/Uk1_f);
 8005088:	4b20      	ldr	r3, [pc, #128]	; (800510c <FUNC_Transmission+0x1c3c>)
 800508a:	f893 2684 	ldrb.w	r2, [r3, #1668]	; 0x684
 800508e:	4b1f      	ldr	r3, [pc, #124]	; (800510c <FUNC_Transmission+0x1c3c>)
 8005090:	f893 3688 	ldrb.w	r3, [r3, #1672]	; 0x688
 8005094:	429a      	cmp	r2, r3
 8005096:	bf34      	ite	cc
 8005098:	2301      	movcc	r3, #1
 800509a:	2300      	movcs	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	461a      	mov	r2, r3
 80050a0:	4b1a      	ldr	r3, [pc, #104]	; (800510c <FUNC_Transmission+0x1c3c>)
 80050a2:	f883 2711 	strb.w	r2, [r3, #1809]	; 0x711
    /* Switch: '<S199>/Switch' */
    /*@>1ec9a*/if (/*@>2630f*/VCU_B./*@>29a1b*/Logic_i/*@>24f93*/[/*@>24f90*/0]) {
 80050a6:	4b19      	ldr	r3, [pc, #100]	; (800510c <FUNC_Transmission+0x1c3c>)
 80050a8:	f893 36e6 	ldrb.w	r3, [r3, #1766]	; 0x6e6
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d006      	beq.n	80050be <FUNC_Transmission+0x1bee>
        /* MinMax: '<S199>/MinMax' incorporates:
 *  Constant: '<S199>/Constant'
 */
        /*@>26321*/VCU_B./*@>29a24*/Switch_g/*@>1ec9d*/ = /*@>217a8*/20.0;
 80050b0:	4916      	ldr	r1, [pc, #88]	; (800510c <FUNC_Transmission+0x1c3c>)
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	4b18      	ldr	r3, [pc, #96]	; (8005118 <FUNC_Transmission+0x1c48>)
 80050b8:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 80050bc:	e006      	b.n	80050cc <FUNC_Transmission+0x1bfc>
    } else {
        /* MinMax: '<S199>/MinMax' incorporates:
 *  Constant: '<S199>/Constant1'
 */
        /*@>2631b*/VCU_B./*@>29a21*/Switch_g/*@>86fb*/ = /*@>217a9*/0.0;
 80050be:	4913      	ldr	r1, [pc, #76]	; (800510c <FUNC_Transmission+0x1c3c>)
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    }
    /* End of Switch: '<S199>/Switch' */

    /* MinMax: '<S199>/MinMax' */
    /*@>2254f*/if ((/*@>26333*/VCU_B./*@>29a2d*/x_clutch_STW/*@>22548*/ > /*@>26339*/VCU_B./*@>29a30*/Switch_g)/*@>2254b*/ || /*@>24239*/rtIsNaN(/*@>2633f*/VCU_B./*@>29a33*/Switch_g)) {
 80050cc:	4b0f      	ldr	r3, [pc, #60]	; (800510c <FUNC_Transmission+0x1c3c>)
 80050ce:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 80050d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050d6:	4b0d      	ldr	r3, [pc, #52]	; (800510c <FUNC_Transmission+0x1c3c>)
 80050d8:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80050dc:	f009 ff54 	bl	800ef88 <__aeabi_dcmpgt>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <FUNC_Transmission+0x1c2a>
 80050e6:	4b09      	ldr	r3, [pc, #36]	; (800510c <FUNC_Transmission+0x1c3c>)
 80050e8:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80050ec:	4610      	mov	r0, r2
 80050ee:	4619      	mov	r1, r3
 80050f0:	f001 f9ba 	bl	8006468 <rtIsNaN>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d010      	beq.n	800511c <FUNC_Transmission+0x1c4c>
        /*@>26351*/VCU_B./*@>29a3c*/MinMax/*@>22551*/ = /*@>26357*/VCU_B./*@>29a3f*/x_clutch_STW;
 80050fa:	4b04      	ldr	r3, [pc, #16]	; (800510c <FUNC_Transmission+0x1c3c>)
 80050fc:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	4901      	ldr	r1, [pc, #4]	; (800510c <FUNC_Transmission+0x1c3c>)
 8005106:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 800510a:	e00d      	b.n	8005128 <FUNC_Transmission+0x1c58>
 800510c:	200008c8 	.word	0x200008c8
 8005110:	20001058 	.word	0x20001058
 8005114:	0800f1e8 	.word	0x0800f1e8
 8005118:	40340000 	.word	0x40340000
    } else {
        /*@>26345*/VCU_B./*@>29a36*/MinMax/*@>2254e*/ = /*@>2634b*/VCU_B./*@>29a39*/Switch_g;
 800511c:	4ba9      	ldr	r3, [pc, #676]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 800511e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8005122:	49a8      	ldr	r1, [pc, #672]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005124:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
    }
    /*@>22587*/if (!/*@<2421a*/(/*@>26363*/VCU_B./*@>29a45*/MinMax/*@>22580*/ > /*@>2275c*/0.0)) {
 8005128:	4ba6      	ldr	r3, [pc, #664]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 800512a:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800512e:	2101      	movs	r1, #1
 8005130:	460c      	mov	r4, r1
 8005132:	4610      	mov	r0, r2
 8005134:	4619      	mov	r1, r3
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	f009 ff23 	bl	800ef88 <__aeabi_dcmpgt>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <FUNC_Transmission+0x1c7c>
 8005148:	2300      	movs	r3, #0
 800514a:	461c      	mov	r4, r3
 800514c:	b2e3      	uxtb	r3, r4
 800514e:	f083 0301 	eor.w	r3, r3, #1
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d006      	beq.n	8005166 <FUNC_Transmission+0x1c96>
        /*@>26369*/VCU_B./*@>29a48*/MinMax/*@>22586*/ = /*@>22760*/0.0;
 8005158:	499a      	ldr	r1, [pc, #616]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
    }
    /* RelationalOperator: '<S203>/Compare' incorporates:
 *  Constant: '<S203>/Constant'
 */
    /*@>26375*/VCU_B./*@>29a4e*/Compare_ao/*@>7a6c*/ = (/*@>2637b*/VCU_B./*@>29a51*/MinMax/*@>7a6b*/ > /*@>217ad*/1.0);
 8005166:	4b97      	ldr	r3, [pc, #604]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005168:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800516c:	2101      	movs	r1, #1
 800516e:	460c      	mov	r4, r1
 8005170:	4610      	mov	r0, r2
 8005172:	4619      	mov	r1, r3
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	4b93      	ldr	r3, [pc, #588]	; (80053c8 <FUNC_Transmission+0x1ef8>)
 800517a:	f009 ff05 	bl	800ef88 <__aeabi_dcmpgt>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <FUNC_Transmission+0x1cb8>
 8005184:	2300      	movs	r3, #0
 8005186:	461c      	mov	r4, r3
 8005188:	b2e3      	uxtb	r3, r4
 800518a:	461a      	mov	r2, r3
 800518c:	4b8d      	ldr	r3, [pc, #564]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 800518e:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
    /* DataTypeConversion: '<S139>/Data Type Conversion12' */
    /*@>2638d*/VCU_B./*@>29a5a*/VOVG_IN_h/*@>7a6f*/ = /*@>26393*/VCU_B./*@>29a5d*/Compare_ao;
 8005192:	4b8c      	ldr	r3, [pc, #560]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005194:	f893 3712 	ldrb.w	r3, [r3, #1810]	; 0x712
 8005198:	4618      	mov	r0, r3
 800519a:	f009 fbef 	bl	800e97c <__aeabi_ui2d>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4988      	ldr	r1, [pc, #544]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 80051a4:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    /* Sum: '<S199>/Add' */
    /*@>2639f*/VCU_B./*@>29a63*/Add/*@>a83f*/ = /*@>263a5*/VCU_B./*@>29a66*/MinMax/*@>a83c*/ - /*@>263ab*/VCU_B./*@>29a69*/x_clutch_b;
 80051a8:	4b86      	ldr	r3, [pc, #536]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 80051aa:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 80051ae:	4b85      	ldr	r3, [pc, #532]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 80051b0:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	f009 faa2 	bl	800e700 <__aeabi_dsub>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4980      	ldr	r1, [pc, #512]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 80051c2:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    /* RelationalOperator: '<S205>/Compare' incorporates:
 *  Constant: '<S205>/Constant'
 */
    /*@>263c3*/VCU_B./*@>29a75*/Compare_gu/*@>7a78*/ = (/*@>263c9*/VCU_B./*@>29a78*/Add/*@>7a77*/ < /*@>217b0*/-0.5);
 80051c6:	4b7f      	ldr	r3, [pc, #508]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 80051c8:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 80051cc:	2101      	movs	r1, #1
 80051ce:	460c      	mov	r4, r1
 80051d0:	4610      	mov	r0, r2
 80051d2:	4619      	mov	r1, r3
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	4b7c      	ldr	r3, [pc, #496]	; (80053cc <FUNC_Transmission+0x1efc>)
 80051da:	f009 feb7 	bl	800ef4c <__aeabi_dcmplt>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <FUNC_Transmission+0x1d18>
 80051e4:	2300      	movs	r3, #0
 80051e6:	461c      	mov	r4, r3
 80051e8:	b2e3      	uxtb	r3, r4
 80051ea:	461a      	mov	r2, r3
 80051ec:	4b75      	ldr	r3, [pc, #468]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 80051ee:	f883 2713 	strb.w	r2, [r3, #1811]	; 0x713
    /* Lookup_n-D: '<S199>/Duty Cycle MHJ1' */
    /*@>263d5*/VCU_B./*@>29a7e*/DutyCycleMHJ1/*@>a907*/ = /*@>2423d*/look1_binlxpw(/*@>263db*/VCU_B./*@>29a81*/Add, /*@>267c8*/VCU_ConstP./*@>29c4c*/pooled29, /*@>267ce*/VCU_ConstP./*@>29c4f*/pooled28, /*@>216c4*/14U);
 80051f2:	4b74      	ldr	r3, [pc, #464]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 80051f4:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 80051f8:	210e      	movs	r1, #14
 80051fa:	9100      	str	r1, [sp, #0]
 80051fc:	4610      	mov	r0, r2
 80051fe:	4619      	mov	r1, r3
 8005200:	4a73      	ldr	r2, [pc, #460]	; (80053d0 <FUNC_Transmission+0x1f00>)
 8005202:	4b74      	ldr	r3, [pc, #464]	; (80053d4 <FUNC_Transmission+0x1f04>)
 8005204:	f000 fd18 	bl	8005c38 <look1_binlxpw>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	496d      	ldr	r1, [pc, #436]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 800520e:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    /* Product: '<S199>/Product1' */
    /*@>263ed*/VCU_B./*@>29a8a*/Product1/*@>7a86*/ = /*@>263f3*/VCU_B./*@>29a8d*/DutyCycleMHJ1/*@>21acc*/ * /*@>22399*/(real_T)/*@>263f9*/VCU_B./*@>29a90*/Compare_gu;
 8005212:	4b6c      	ldr	r3, [pc, #432]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005214:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8005218:	4b6a      	ldr	r3, [pc, #424]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 800521a:	f893 3713 	ldrb.w	r3, [r3, #1811]	; 0x713
 800521e:	4618      	mov	r0, r3
 8005220:	f009 fbac 	bl	800e97c <__aeabi_ui2d>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4620      	mov	r0, r4
 800522a:	4629      	mov	r1, r5
 800522c:	f009 fc1c 	bl	800ea68 <__aeabi_dmul>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4963      	ldr	r1, [pc, #396]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005236:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
    /* RelationalOperator: '<S204>/Compare' incorporates:
 *  Constant: '<S204>/Constant'
 */
    /*@>263ff*/VCU_B./*@>29a93*/Compare_eh/*@>7a8a*/ = (/*@>26405*/VCU_B./*@>29a96*/x_clutch_b/*@>7a89*/ > /*@>217b2*/20.0);
 800523a:	4b62      	ldr	r3, [pc, #392]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 800523c:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	2101      	movs	r1, #1
 8005246:	460c      	mov	r4, r1
 8005248:	4610      	mov	r0, r2
 800524a:	4619      	mov	r1, r3
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	4b61      	ldr	r3, [pc, #388]	; (80053d8 <FUNC_Transmission+0x1f08>)
 8005252:	f009 fe99 	bl	800ef88 <__aeabi_dcmpgt>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <FUNC_Transmission+0x1d90>
 800525c:	2300      	movs	r3, #0
 800525e:	461c      	mov	r4, r3
 8005260:	b2e3      	uxtb	r3, r4
 8005262:	461a      	mov	r2, r3
 8005264:	4b57      	ldr	r3, [pc, #348]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005266:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
    /* Switch: '<S199>/Switch1' incorporates:
 *  Constant: '<S199>/Constant2'
 *  Constant: '<S199>/Constant3'
 */
    /*@>1eca9*/if (/*@>2641d*/VCU_B./*@>29aa2*/Compare_eh) {
 800526a:	4b56      	ldr	r3, [pc, #344]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 800526c:	f893 3714 	ldrb.w	r3, [r3, #1812]	; 0x714
 8005270:	2b00      	cmp	r3, #0
 8005272:	d007      	beq.n	8005284 <FUNC_Transmission+0x1db4>
        /*@>26441*/VCU_B./*@>29ab4*/Switch1/*@>1ecac*/ = /*@>217b3*/2.0;
 8005274:	4953      	ldr	r1, [pc, #332]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800527e:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
 8005282:	e005      	b.n	8005290 <FUNC_Transmission+0x1dc0>
    } else {
        /*@>2643b*/VCU_B./*@>29ab1*/Switch1/*@>8736*/ = /*@>217b4*/1.0;
 8005284:	494f      	ldr	r1, [pc, #316]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	4b4f      	ldr	r3, [pc, #316]	; (80053c8 <FUNC_Transmission+0x1ef8>)
 800528c:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    }
    /* End of Switch: '<S199>/Switch1' */

    /* Product: '<S199>/Product2' */
    /*@>2644d*/VCU_B./*@>29aba*/Product2/*@>7a92*/ = /*@>26453*/VCU_B./*@>29abd*/Product1/*@>21ac8*/ * /*@>26459*/VCU_B./*@>29ac0*/Switch1;
 8005290:	4b4c      	ldr	r3, [pc, #304]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005292:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 8005296:	4b4b      	ldr	r3, [pc, #300]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005298:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 800529c:	f009 fbe4 	bl	800ea68 <__aeabi_dmul>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4947      	ldr	r1, [pc, #284]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 80052a6:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    /* DataTypeConversion: '<S139>/Data Type Conversion15' */
    /*@>26465*/VCU_B./*@>29ac6*/MHJ9_OUT_d/*@>7a95*/ = /*@>2646b*/VCU_B./*@>29ac9*/Product2;
 80052aa:	4b46      	ldr	r3, [pc, #280]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 80052ac:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80052b0:	4944      	ldr	r1, [pc, #272]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 80052b2:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    /* RelationalOperator: '<S206>/Compare' incorporates:
 *  Constant: '<S206>/Constant'
 */
    /*@>2647d*/VCU_B./*@>29ad2*/Compare_m/*@>7a99*/ = (/*@>26483*/VCU_B./*@>29ad5*/Add/*@>7a98*/ > /*@>217b9*/0.0);
 80052b6:	4b43      	ldr	r3, [pc, #268]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 80052b8:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 80052bc:	2101      	movs	r1, #1
 80052be:	460c      	mov	r4, r1
 80052c0:	4610      	mov	r0, r2
 80052c2:	4619      	mov	r1, r3
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	f009 fe5c 	bl	800ef88 <__aeabi_dcmpgt>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <FUNC_Transmission+0x1e0a>
 80052d6:	2300      	movs	r3, #0
 80052d8:	461c      	mov	r4, r3
 80052da:	b2e3      	uxtb	r3, r4
 80052dc:	461a      	mov	r2, r3
 80052de:	4b39      	ldr	r3, [pc, #228]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 80052e0:	f883 2715 	strb.w	r2, [r3, #1813]	; 0x715
    /* Product: '<S199>/Product3' */
    /*@>26495*/VCU_B./*@>29ade*/Product3/*@>7aa0*/ = /*@>2649b*/VCU_B./*@>29ae1*/DutyCycleMHJ1/*@>21ac4*/ * /*@>223ba*/(real_T)/*@>264a1*/VCU_B./*@>29ae4*/Compare_m;
 80052e4:	4b37      	ldr	r3, [pc, #220]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 80052e6:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 80052ea:	4b36      	ldr	r3, [pc, #216]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 80052ec:	f893 3715 	ldrb.w	r3, [r3, #1813]	; 0x715
 80052f0:	4618      	mov	r0, r3
 80052f2:	f009 fb43 	bl	800e97c <__aeabi_ui2d>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4620      	mov	r0, r4
 80052fc:	4629      	mov	r1, r5
 80052fe:	f009 fbb3 	bl	800ea68 <__aeabi_dmul>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	492f      	ldr	r1, [pc, #188]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005308:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
    /* DataTypeConversion: '<S139>/Data Type Conversion14' */
    /*@>264b9*/VCU_B./*@>29af0*/MHJ9_IN_e/*@>7aa3*/ = /*@>264bf*/VCU_B./*@>29af3*/Product3;
 800530c:	4b2d      	ldr	r3, [pc, #180]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 800530e:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 8005312:	492c      	ldr	r1, [pc, #176]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005314:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
    /* RelationalOperator: '<S207>/Compare' incorporates:
 *  Constant: '<S207>/Constant'
 */
    /*@>264d1*/VCU_B./*@>29afc*/Compare_md/*@>7aa7*/ = (/*@>264d7*/VCU_B./*@>29aff*/Add/*@>7aa6*/ < /*@>217bb*/-20.0);
 8005318:	4b2a      	ldr	r3, [pc, #168]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 800531a:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800531e:	2101      	movs	r1, #1
 8005320:	460c      	mov	r4, r1
 8005322:	4610      	mov	r0, r2
 8005324:	4619      	mov	r1, r3
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	4b2c      	ldr	r3, [pc, #176]	; (80053dc <FUNC_Transmission+0x1f0c>)
 800532c:	f009 fe0e 	bl	800ef4c <__aeabi_dcmplt>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <FUNC_Transmission+0x1e6a>
 8005336:	2300      	movs	r3, #0
 8005338:	461c      	mov	r4, r3
 800533a:	b2e3      	uxtb	r3, r4
 800533c:	461a      	mov	r2, r3
 800533e:	4b21      	ldr	r3, [pc, #132]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005340:	f883 2716 	strb.w	r2, [r3, #1814]	; 0x716
    /* DataTypeConversion: '<S139>/Data Type Conversion13' */
    /*@>264e9*/VCU_B./*@>29b08*/VOVG_OUT_j/*@>7aaa*/ = /*@>264ef*/VCU_B./*@>29b0b*/Compare_md;
 8005344:	4b1f      	ldr	r3, [pc, #124]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005346:	f893 3716 	ldrb.w	r3, [r3, #1814]	; 0x716
 800534a:	4618      	mov	r0, r3
 800534c:	f009 fb16 	bl	800e97c <__aeabi_ui2d>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	491b      	ldr	r1, [pc, #108]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005356:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    /* DataTypeConversion: '<S139>/Data Type Conversion2' incorporates:
 *  Constant: '<S139>/Constant'
 */
    /*@>26507*/VCU_B./*@>29b17*/LC_ready_bit_e/*@>7aad*/ = /*@>2196b*/true;
 800535a:	4b1a      	ldr	r3, [pc, #104]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2717 	strb.w	r2, [r3, #1815]	; 0x717
    /* DataTypeConversion: '<S139>/Data Type Conversion16' */
    /*@>26519*/VCU_B./*@>29b20*/x_clutch_LC_b/*@>7ab0*/ = /*@>217be*/0.0;
 8005362:	4918      	ldr	r1, [pc, #96]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    /* DataTypeConversion: '<S139>/Data Type Conversion17' */
    /*@>26525*/VCU_B./*@>29b26*/LC_Mdes_b/*@>7ab3*/ = /*@>217c0*/0.0;
 8005370:	4914      	ldr	r1, [pc, #80]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
    /* DataTypeConversion: '<S139>/Data Type Conversion18' */
    /*@>26537*/VCU_B./*@>29b2f*/LC_Fnr_l/*@>7ab6*/ = /*@>217c1*/0.0;
 800537e:	4911      	ldr	r1, [pc, #68]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    /* Update for Memory: '<S202>/Memory' */
    /*@>26a76*/VCU_DW./*@>29d36*/Memory_PreviousInput/*@>7bf8*/ = /*@>2653d*/VCU_B./*@>29b32*/LC_dash_bit;
 800538c:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 800538e:	f893 2783 	ldrb.w	r2, [r3, #1923]	; 0x783
 8005392:	4b13      	ldr	r3, [pc, #76]	; (80053e0 <FUNC_Transmission+0x1f10>)
 8005394:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
    /* Update for Memory: '<S202>/Memory1' */
    /*@>26a7c*/VCU_DW./*@>29d39*/Memory1_PreviousInput/*@>7bfa*/ = /*@>26555*/VCU_B./*@>29b3e*/Brakelight;
 8005398:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 800539a:	f893 26d6 	ldrb.w	r2, [r3, #1750]	; 0x6d6
 800539e:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <FUNC_Transmission+0x1f10>)
 80053a0:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
    /* Update for Memory: '<S228>/Memory' */
    /*@>26a82*/VCU_DW./*@>29d3c*/Memory_PreviousInput_j/*@>7bfc*/ = /*@>26567*/VCU_B./*@>29b47*/Logic/*@>24fa7*/[/*@>24fa4*/0];
 80053a4:	4b07      	ldr	r3, [pc, #28]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 80053a6:	f893 26da 	ldrb.w	r2, [r3, #1754]	; 0x6da
 80053aa:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <FUNC_Transmission+0x1f10>)
 80053ac:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
    /* Update for UnitDelay: '<S200>/Unit Delay1' */
    /*@>26a88*/VCU_DW./*@>29d3f*/UnitDelay1_DSTATE/*@>8747*/ = /*@>26579*/VCU_B./*@>29b50*/Logic_i/*@>24fac*/[/*@>24fa9*/0];
 80053b0:	4b04      	ldr	r3, [pc, #16]	; (80053c4 <FUNC_Transmission+0x1ef4>)
 80053b2:	f893 26e6 	ldrb.w	r2, [r3, #1766]	; 0x6e6
 80053b6:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <FUNC_Transmission+0x1f10>)
 80053b8:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    /* Update for Delay: '<S200>/Delay' */
/*@>1e391*/    for (/*@>28439*/rowIdx = /*@>217ca*/0; /*@>28441*/rowIdx < /*@>217cb*/19; /*@>2843e*/rowIdx/*@>28459*/++) {
 80053bc:	2300      	movs	r3, #0
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	e01f      	b.n	8005402 <FUNC_Transmission+0x1f32>
 80053c2:	bf00      	nop
 80053c4:	200008c8 	.word	0x200008c8
 80053c8:	3ff00000 	.word	0x3ff00000
 80053cc:	bfe00000 	.word	0xbfe00000
 80053d0:	0800f498 	.word	0x0800f498
 80053d4:	0800f420 	.word	0x0800f420
 80053d8:	40340000 	.word	0x40340000
 80053dc:	c0340000 	.word	0xc0340000
 80053e0:	20001058 	.word	0x20001058
        /*@>26a94*/VCU_DW./*@>29d45*/Delay_DSTATE/*@>1c48a*/[/*@>21744*/rowIdx]/*@>8775*/ = /*@>26a9a*/VCU_DW./*@>29d48*/Delay_DSTATE/*@>24fb4*/[/*@>24fb0*/rowIdx/*@>24fae*/ + /*@>24fb1*/1];
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	3301      	adds	r3, #1
 80053e8:	4a9d      	ldr	r2, [pc, #628]	; (8005660 <FUNC_Transmission+0x2190>)
 80053ea:	4413      	add	r3, r2
 80053ec:	f893 10c3 	ldrb.w	r1, [r3, #195]	; 0xc3
 80053f0:	4a9b      	ldr	r2, [pc, #620]	; (8005660 <FUNC_Transmission+0x2190>)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	4413      	add	r3, r2
 80053f6:	33c0      	adds	r3, #192	; 0xc0
 80053f8:	460a      	mov	r2, r1
 80053fa:	70da      	strb	r2, [r3, #3]
    /* Update for Memory: '<S228>/Memory' */
    /*@>26a82*/VCU_DW./*@>29d3c*/Memory_PreviousInput_j/*@>7bfc*/ = /*@>26567*/VCU_B./*@>29b47*/Logic/*@>24fa7*/[/*@>24fa4*/0];
    /* Update for UnitDelay: '<S200>/Unit Delay1' */
    /*@>26a88*/VCU_DW./*@>29d3f*/UnitDelay1_DSTATE/*@>8747*/ = /*@>26579*/VCU_B./*@>29b50*/Logic_i/*@>24fac*/[/*@>24fa9*/0];
    /* Update for Delay: '<S200>/Delay' */
/*@>1e391*/    for (/*@>28439*/rowIdx = /*@>217ca*/0; /*@>28441*/rowIdx < /*@>217cb*/19; /*@>2843e*/rowIdx/*@>28459*/++) {
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	3301      	adds	r3, #1
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b12      	cmp	r3, #18
 8005406:	dded      	ble.n	80053e4 <FUNC_Transmission+0x1f14>
        /*@>26a94*/VCU_DW./*@>29d45*/Delay_DSTATE/*@>1c48a*/[/*@>21744*/rowIdx]/*@>8775*/ = /*@>26a9a*/VCU_DW./*@>29d48*/Delay_DSTATE/*@>24fb4*/[/*@>24fb0*/rowIdx/*@>24fae*/ + /*@>24fb1*/1];
    }
    /*@>26a8e*/VCU_DW./*@>29d42*/Delay_DSTATE/*@>878d*/[/*@>21669*/19]/*@>8797*/ = /*@>265a9*/VCU_B./*@>29b68*/LogicalOperator_d;
 8005408:	4b96      	ldr	r3, [pc, #600]	; (8005664 <FUNC_Transmission+0x2194>)
 800540a:	f893 26f6 	ldrb.w	r2, [r3, #1782]	; 0x6f6
 800540e:	4b94      	ldr	r3, [pc, #592]	; (8005660 <FUNC_Transmission+0x2190>)
 8005410:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
    /* End of Update for Delay: '<S200>/Delay' */

    /* Update for Memory: '<S217>/Memory' */
    /*@>26aa0*/VCU_DW./*@>29d4b*/Memory_PreviousInput_p/*@>7c00*/ = /*@>265bb*/VCU_B./*@>29b71*/Logic_o/*@>24fb9*/[/*@>24fb6*/0];
 8005414:	4b93      	ldr	r3, [pc, #588]	; (8005664 <FUNC_Transmission+0x2194>)
 8005416:	f893 26e1 	ldrb.w	r2, [r3, #1761]	; 0x6e1
 800541a:	4b91      	ldr	r3, [pc, #580]	; (8005660 <FUNC_Transmission+0x2190>)
 800541c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 *
 * Block description for '<S214>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>26aa6*/VCU_DW./*@>29d4e*/DelayInput1_DSTATE/*@>87a3*/ = /*@>265c7*/VCU_B./*@>29b77*/STW_shift_down_request;
 8005420:	4b90      	ldr	r3, [pc, #576]	; (8005664 <FUNC_Transmission+0x2194>)
 8005422:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	498d      	ldr	r1, [pc, #564]	; (8005660 <FUNC_Transmission+0x2190>)
 800542c:	e9c1 2300 	strd	r2, r3, [r1]
    /* Update for Delay: '<S200>/Delay1' */
    /*@>26aac*/VCU_DW./*@>29d51*/Delay1_DSTATE/*@>87af*/ = /*@>265d3*/VCU_B./*@>29b7d*/LogicalOperator_d;
 8005430:	4b8c      	ldr	r3, [pc, #560]	; (8005664 <FUNC_Transmission+0x2194>)
 8005432:	f893 26f6 	ldrb.w	r2, [r3, #1782]	; 0x6f6
 8005436:	4b8a      	ldr	r3, [pc, #552]	; (8005660 <FUNC_Transmission+0x2190>)
 8005438:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
    /* Update for Memory: '<S215>/Memory' */
    /*@>26ab2*/VCU_DW./*@>29d54*/Memory_PreviousInput_l/*@>7c04*/ = /*@>265df*/VCU_B./*@>29b83*/Logic_i/*@>24fbe*/[/*@>24fbb*/0];
 800543c:	4b89      	ldr	r3, [pc, #548]	; (8005664 <FUNC_Transmission+0x2194>)
 800543e:	f893 26e6 	ldrb.w	r2, [r3, #1766]	; 0x6e6
 8005442:	4b87      	ldr	r3, [pc, #540]	; (8005660 <FUNC_Transmission+0x2190>)
 8005444:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    /* Update for UnitDelay: '<S200>/Unit Delay4' */
    /*@>26ab8*/VCU_DW./*@>29d57*/UnitDelay4_DSTATE/*@>87bb*/ = /*@>265eb*/VCU_B./*@>29b89*/FixPtRelationalOperator_d;
 8005448:	4b86      	ldr	r3, [pc, #536]	; (8005664 <FUNC_Transmission+0x2194>)
 800544a:	f893 2711 	ldrb.w	r2, [r3, #1809]	; 0x711
 800544e:	4b84      	ldr	r3, [pc, #528]	; (8005660 <FUNC_Transmission+0x2190>)
 8005450:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
    /* Update for UnitDelay: '<S201>/Unit Delay' */
    /*@>26ac4*/VCU_DW./*@>29d5d*/UnitDelay_DSTATE/*@>87c7*/ = /*@>265f7*/VCU_B./*@>29b8f*/Logic_iz/*@>24fc3*/[/*@>24fc0*/0];
 8005454:	4b83      	ldr	r3, [pc, #524]	; (8005664 <FUNC_Transmission+0x2194>)
 8005456:	f893 2707 	ldrb.w	r2, [r3, #1799]	; 0x707
 800545a:	4b81      	ldr	r3, [pc, #516]	; (8005660 <FUNC_Transmission+0x2190>)
 800545c:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
    /* Update for UnitDelay: '<S200>/Unit Delay2' */
    /*@>26ad0*/VCU_DW./*@>29d63*/UnitDelay2_DSTATE/*@>87d3*/ = /*@>26603*/VCU_B./*@>29b95*/Counter;
 8005460:	4b80      	ldr	r3, [pc, #512]	; (8005664 <FUNC_Transmission+0x2194>)
 8005462:	f893 270f 	ldrb.w	r2, [r3, #1807]	; 0x70f
 8005466:	4b7e      	ldr	r3, [pc, #504]	; (8005660 <FUNC_Transmission+0x2190>)
 8005468:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
    /* Update for Memory: '<S216>/Memory' */
    /*@>26adc*/VCU_DW./*@>29d69*/Memory_PreviousInput_a/*@>7c09*/ = /*@>2660f*/VCU_B./*@>29b9b*/Logic_iy/*@>24fcd*/[/*@>24fca*/0];
 800546c:	4b7d      	ldr	r3, [pc, #500]	; (8005664 <FUNC_Transmission+0x2194>)
 800546e:	f893 26f8 	ldrb.w	r2, [r3, #1784]	; 0x6f8
 8005472:	4b7b      	ldr	r3, [pc, #492]	; (8005660 <FUNC_Transmission+0x2190>)
 8005474:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
 *
 * Block description for '<S222>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>26ae8*/VCU_DW./*@>29d6f*/DelayInput1_DSTATE_g/*@>87df*/ = /*@>2661b*/VCU_B./*@>29ba1*/STW_shift_up_request;
 8005478:	4b7a      	ldr	r3, [pc, #488]	; (8005664 <FUNC_Transmission+0x2194>)
 800547a:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	4977      	ldr	r1, [pc, #476]	; (8005660 <FUNC_Transmission+0x2190>)
 8005484:	e9c1 2302 	strd	r2, r3, [r1, #8]
 *
 * Block description for '<S223>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>26aee*/VCU_DW./*@>29d72*/DelayInput1_DSTATE_ga/*@>87eb*/ = /*@>26621*/VCU_B./*@>29ba4*/Add_j;
 8005488:	4b76      	ldr	r3, [pc, #472]	; (8005664 <FUNC_Transmission+0x2194>)
 800548a:	f893 2685 	ldrb.w	r2, [r3, #1669]	; 0x685
 800548e:	4b74      	ldr	r3, [pc, #464]	; (8005660 <FUNC_Transmission+0x2190>)
 8005490:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    /* Update for UnitDelay: '<S200>/Unit Delay' */
    /*@>26af4*/VCU_DW./*@>29d75*/UnitDelay_DSTATE_b/*@>87f7*/ = /*@>26627*/VCU_B./*@>29ba7*/Logic_iy/*@>24fd7*/[/*@>24fd4*/0];
 8005494:	4b73      	ldr	r3, [pc, #460]	; (8005664 <FUNC_Transmission+0x2194>)
 8005496:	f893 26f8 	ldrb.w	r2, [r3, #1784]	; 0x6f8
 800549a:	4b71      	ldr	r3, [pc, #452]	; (8005660 <FUNC_Transmission+0x2190>)
 800549c:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
    /* Update for UnitDelay: '<S201>/Unit Delay1' */
    /*@>26b0c*/VCU_DW./*@>29d81*/UnitDelay1_DSTATE_k/*@>8803*/ = /*@>26633*/VCU_B./*@>29bad*/Counter_d;
 80054a0:	4b70      	ldr	r3, [pc, #448]	; (8005664 <FUNC_Transmission+0x2194>)
 80054a2:	f893 2710 	ldrb.w	r2, [r3, #1808]	; 0x710
 80054a6:	4b6e      	ldr	r3, [pc, #440]	; (8005660 <FUNC_Transmission+0x2190>)
 80054a8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    /* Update for Memory: '<S225>/Memory' */
    /*@>26b18*/VCU_DW./*@>29d87*/Memory_PreviousInput_al/*@>7c0f*/ = /*@>2663f*/VCU_B./*@>29bb3*/Logic_iz/*@>24fe9*/[/*@>24fe6*/0];
 80054ac:	4b6d      	ldr	r3, [pc, #436]	; (8005664 <FUNC_Transmission+0x2194>)
 80054ae:	f893 2707 	ldrb.w	r2, [r3, #1799]	; 0x707
 80054b2:	4b6b      	ldr	r3, [pc, #428]	; (8005660 <FUNC_Transmission+0x2190>)
 80054b4:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 *
 * Block description for '<S224>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>26b24*/VCU_DW./*@>29d8d*/DelayInput1_DSTATE_f/*@>880f*/ = /*@>2664b*/VCU_B./*@>29bb9*/Add_j;
 80054b8:	4b6a      	ldr	r3, [pc, #424]	; (8005664 <FUNC_Transmission+0x2194>)
 80054ba:	f893 2685 	ldrb.w	r2, [r3, #1669]	; 0x685
 80054be:	4b68      	ldr	r3, [pc, #416]	; (8005660 <FUNC_Transmission+0x2190>)
 80054c0:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
    /* Update for Memory: '<S226>/Memory' */
    /*@>26b30*/VCU_DW./*@>29d93*/Memory_PreviousInput_k/*@>7c12*/ = /*@>26657*/VCU_B./*@>29bbf*/Logic_e/*@>24fee*/[/*@>24feb*/0];
 80054c4:	4b67      	ldr	r3, [pc, #412]	; (8005664 <FUNC_Transmission+0x2194>)
 80054c6:	f893 270d 	ldrb.w	r2, [r3, #1805]	; 0x70d
 80054ca:	4b65      	ldr	r3, [pc, #404]	; (8005660 <FUNC_Transmission+0x2190>)
 80054cc:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
 *
 * Block description for '<S213>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>26b3c*/VCU_DW./*@>29d99*/DelayInput1_DSTATE_p/*@>881b*/ = /*@>26663*/VCU_B./*@>29bc5*/Add_c;
 80054d0:	4b64      	ldr	r3, [pc, #400]	; (8005664 <FUNC_Transmission+0x2194>)
 80054d2:	f893 2684 	ldrb.w	r2, [r3, #1668]	; 0x684
 80054d6:	4b62      	ldr	r3, [pc, #392]	; (8005660 <FUNC_Transmission+0x2190>)
 80054d8:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
/* End of Outputs for SubSystem: '<S7>/semi_auto_jr18' */

/* RelationalOperator: '<S135>/Compare' incorporates:
 *  Constant: '<S135>/Constant'
 */
/*@>256a3*/VCU_B./*@>293e5*/Compare_j/*@>749c*/ = (/*@>256a9*/VCU_B./*@>293e8*/DataTypeConversion_cg/*@>749b*/ == /*@>21765*/2);
 80054dc:	4b61      	ldr	r3, [pc, #388]	; (8005664 <FUNC_Transmission+0x2194>)
 80054de:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	bf0c      	ite	eq
 80054e8:	2301      	moveq	r3, #1
 80054ea:	2300      	movne	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	4b5c      	ldr	r3, [pc, #368]	; (8005664 <FUNC_Transmission+0x2194>)
 80054f2:	f883 26cd 	strb.w	r2, [r3, #1741]	; 0x6cd
/* Outputs for Enabled SubSystem: '<S7>/driver_jr18' incorporates:
 *  EnablePort: '<S138>/Enable'
 */
/*@>749e*/if (/*@>256d3*/VCU_B./*@>293fd*/Compare_j) {
 80054f6:	4b5b      	ldr	r3, [pc, #364]	; (8005664 <FUNC_Transmission+0x2194>)
 80054f8:	f893 36cd 	ldrb.w	r3, [r3, #1741]	; 0x6cd
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 81c3 	beq.w	8005888 <FUNC_Transmission+0x23b8>
    /* MinMax: '<S191>/MinMax' */
    /*@>225bf*/if (/*@>256f7*/VCU_B./*@>2940f*/x_clutch_STW/*@>225b8*/ > /*@>22762*/0.0) {
 8005502:	4b58      	ldr	r3, [pc, #352]	; (8005664 <FUNC_Transmission+0x2194>)
 8005504:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	4610      	mov	r0, r2
 800550e:	4619      	mov	r1, r3
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	f009 fd36 	bl	800ef88 <__aeabi_dcmpgt>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d008      	beq.n	8005534 <FUNC_Transmission+0x2064>
        /*@>25721*/VCU_B./*@>29424*/MinMax_l/*@>225c1*/ = /*@>25727*/VCU_B./*@>29427*/x_clutch_STW;
 8005522:	4b50      	ldr	r3, [pc, #320]	; (8005664 <FUNC_Transmission+0x2194>)
 8005524:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	494d      	ldr	r1, [pc, #308]	; (8005664 <FUNC_Transmission+0x2194>)
 800552e:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
 8005532:	e006      	b.n	8005542 <FUNC_Transmission+0x2072>
    } else {
        /*@>2571b*/VCU_B./*@>29421*/MinMax_l/*@>225be*/ = /*@>22766*/0.0;
 8005534:	494b      	ldr	r1, [pc, #300]	; (8005664 <FUNC_Transmission+0x2194>)
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
    /* End of MinMax: '<S191>/MinMax' */

    /* RelationalOperator: '<S194>/Compare' incorporates:
 *  Constant: '<S194>/Constant'
 */
    /*@>25781*/VCU_B./*@>29454*/Compare_bd/*@>7c51*/ = (/*@>25787*/VCU_B./*@>29457*/MinMax_l/*@>7c50*/ > /*@>2176a*/1.0);
 8005542:	4b48      	ldr	r3, [pc, #288]	; (8005664 <FUNC_Transmission+0x2194>)
 8005544:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8005548:	2101      	movs	r1, #1
 800554a:	460c      	mov	r4, r1
 800554c:	4610      	mov	r0, r2
 800554e:	4619      	mov	r1, r3
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	4b44      	ldr	r3, [pc, #272]	; (8005668 <FUNC_Transmission+0x2198>)
 8005556:	f009 fd17 	bl	800ef88 <__aeabi_dcmpgt>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <FUNC_Transmission+0x2094>
 8005560:	2300      	movs	r3, #0
 8005562:	461c      	mov	r4, r3
 8005564:	b2e3      	uxtb	r3, r4
 8005566:	461a      	mov	r2, r3
 8005568:	4b3e      	ldr	r3, [pc, #248]	; (8005664 <FUNC_Transmission+0x2194>)
 800556a:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
    /* DataTypeConversion: '<S138>/Data Type Conversion12' */
    /*@>257ab*/VCU_B./*@>29469*/VOVG_IN_c/*@>7c54*/ = /*@>257b1*/VCU_B./*@>2946c*/Compare_bd;
 800556e:	4b3d      	ldr	r3, [pc, #244]	; (8005664 <FUNC_Transmission+0x2194>)
 8005570:	f893 3718 	ldrb.w	r3, [r3, #1816]	; 0x718
 8005574:	4618      	mov	r0, r3
 8005576:	f009 fa01 	bl	800e97c <__aeabi_ui2d>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	4939      	ldr	r1, [pc, #228]	; (8005664 <FUNC_Transmission+0x2194>)
 8005580:	e9c1 2344 	strd	r2, r3, [r1, #272]	; 0x110
    /* Sum: '<S191>/Add' */
    /*@>257ff*/VCU_B./*@>29493*/Add_l/*@>a858*/ = /*@>25805*/VCU_B./*@>29496*/MinMax_l/*@>a855*/ - /*@>2580b*/VCU_B./*@>29499*/x_clutch_b;
 8005584:	4b37      	ldr	r3, [pc, #220]	; (8005664 <FUNC_Transmission+0x2194>)
 8005586:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	; 0x108
 800558a:	4b36      	ldr	r3, [pc, #216]	; (8005664 <FUNC_Transmission+0x2194>)
 800558c:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	f009 f8b4 	bl	800e700 <__aeabi_dsub>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4931      	ldr	r1, [pc, #196]	; (8005664 <FUNC_Transmission+0x2194>)
 800559e:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
    /* RelationalOperator: '<S196>/Compare' incorporates:
 *  Constant: '<S196>/Constant'
 */
    /*@>25829*/VCU_B./*@>294a8*/Compare_e5/*@>7c5d*/ = (/*@>2582f*/VCU_B./*@>294ab*/Add_l/*@>7c5c*/ < /*@>2176b*/-0.5);
 80055a2:	4b30      	ldr	r3, [pc, #192]	; (8005664 <FUNC_Transmission+0x2194>)
 80055a4:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80055a8:	2101      	movs	r1, #1
 80055aa:	460c      	mov	r4, r1
 80055ac:	4610      	mov	r0, r2
 80055ae:	4619      	mov	r1, r3
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	4b2d      	ldr	r3, [pc, #180]	; (800566c <FUNC_Transmission+0x219c>)
 80055b6:	f009 fcc9 	bl	800ef4c <__aeabi_dcmplt>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <FUNC_Transmission+0x20f4>
 80055c0:	2300      	movs	r3, #0
 80055c2:	461c      	mov	r4, r3
 80055c4:	b2e3      	uxtb	r3, r4
 80055c6:	461a      	mov	r2, r3
 80055c8:	4b26      	ldr	r3, [pc, #152]	; (8005664 <FUNC_Transmission+0x2194>)
 80055ca:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
    /* Lookup_n-D: '<S191>/Duty Cycle MHJ9' */
    /*@>25847*/VCU_B./*@>294b7*/DutyCycleMHJ9/*@>a930*/ = /*@>24241*/look1_binlxpw(/*@>2584d*/VCU_B./*@>294ba*/Add_l, /*@>2672c*/VCU_ConstP./*@>29bfe*/pooled29, /*@>26732*/VCU_ConstP./*@>29c01*/pooled28, /*@>216ca*/14U);
 80055ce:	4b25      	ldr	r3, [pc, #148]	; (8005664 <FUNC_Transmission+0x2194>)
 80055d0:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80055d4:	210e      	movs	r1, #14
 80055d6:	9100      	str	r1, [sp, #0]
 80055d8:	4610      	mov	r0, r2
 80055da:	4619      	mov	r1, r3
 80055dc:	4a24      	ldr	r2, [pc, #144]	; (8005670 <FUNC_Transmission+0x21a0>)
 80055de:	4b25      	ldr	r3, [pc, #148]	; (8005674 <FUNC_Transmission+0x21a4>)
 80055e0:	f000 fb2a 	bl	8005c38 <look1_binlxpw>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	491e      	ldr	r1, [pc, #120]	; (8005664 <FUNC_Transmission+0x2194>)
 80055ea:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
    /* Product: '<S191>/Product1' */
    /*@>2589b*/VCU_B./*@>294e1*/Product1_p/*@>7c6b*/ = /*@>258a1*/VCU_B./*@>294e4*/DutyCycleMHJ9/*@>21ac0*/ * /*@>21f3b*/(real_T)/*@>258a7*/VCU_B./*@>294e7*/Compare_e5;
 80055ee:	4b1d      	ldr	r3, [pc, #116]	; (8005664 <FUNC_Transmission+0x2194>)
 80055f0:	e9d3 4548 	ldrd	r4, r5, [r3, #288]	; 0x120
 80055f4:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <FUNC_Transmission+0x2194>)
 80055f6:	f893 3719 	ldrb.w	r3, [r3, #1817]	; 0x719
 80055fa:	4618      	mov	r0, r3
 80055fc:	f009 f9be 	bl	800e97c <__aeabi_ui2d>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4620      	mov	r0, r4
 8005606:	4629      	mov	r1, r5
 8005608:	f009 fa2e 	bl	800ea68 <__aeabi_dmul>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4914      	ldr	r1, [pc, #80]	; (8005664 <FUNC_Transmission+0x2194>)
 8005612:	e9c1 234a 	strd	r2, r3, [r1, #296]	; 0x128
    /* RelationalOperator: '<S195>/Compare' incorporates:
 *  Constant: '<S195>/Constant'
 */
    /*@>258bf*/VCU_B./*@>294f3*/Compare_p/*@>7c6f*/ = (/*@>258c5*/VCU_B./*@>294f6*/x_clutch_b/*@>7c6e*/ > /*@>2176c*/20.0);
 8005616:	4b13      	ldr	r3, [pc, #76]	; (8005664 <FUNC_Transmission+0x2194>)
 8005618:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800561c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005620:	2101      	movs	r1, #1
 8005622:	460c      	mov	r4, r1
 8005624:	4610      	mov	r0, r2
 8005626:	4619      	mov	r1, r3
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	4b12      	ldr	r3, [pc, #72]	; (8005678 <FUNC_Transmission+0x21a8>)
 800562e:	f009 fcab 	bl	800ef88 <__aeabi_dcmpgt>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <FUNC_Transmission+0x216c>
 8005638:	2300      	movs	r3, #0
 800563a:	461c      	mov	r4, r3
 800563c:	b2e3      	uxtb	r3, r4
 800563e:	461a      	mov	r2, r3
 8005640:	4b08      	ldr	r3, [pc, #32]	; (8005664 <FUNC_Transmission+0x2194>)
 8005642:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
    /* Switch: '<S191>/Switch1' incorporates:
 *  Constant: '<S191>/Constant2'
 *  Constant: '<S191>/Constant3'
 */
    /*@>1ec72*/if (/*@>258dd*/VCU_B./*@>29502*/Compare_p) {
 8005646:	4b07      	ldr	r3, [pc, #28]	; (8005664 <FUNC_Transmission+0x2194>)
 8005648:	f893 371a 	ldrb.w	r3, [r3, #1818]	; 0x71a
 800564c:	2b00      	cmp	r3, #0
 800564e:	d015      	beq.n	800567c <FUNC_Transmission+0x21ac>
        /*@>25925*/VCU_B./*@>29526*/Switch1_e/*@>1ec75*/ = /*@>2176d*/2.0;
 8005650:	4904      	ldr	r1, [pc, #16]	; (8005664 <FUNC_Transmission+0x2194>)
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800565a:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
 800565e:	e013      	b.n	8005688 <FUNC_Transmission+0x21b8>
 8005660:	20001058 	.word	0x20001058
 8005664:	200008c8 	.word	0x200008c8
 8005668:	3ff00000 	.word	0x3ff00000
 800566c:	bfe00000 	.word	0xbfe00000
 8005670:	0800f498 	.word	0x0800f498
 8005674:	0800f420 	.word	0x0800f420
 8005678:	40340000 	.word	0x40340000
    } else {
        /*@>2591f*/VCU_B./*@>29523*/Switch1_e/*@>8851*/ = /*@>2176e*/1.0;
 800567c:	49a5      	ldr	r1, [pc, #660]	; (8005914 <FUNC_Transmission+0x2444>)
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	4ba5      	ldr	r3, [pc, #660]	; (8005918 <FUNC_Transmission+0x2448>)
 8005684:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
    }
    /* End of Switch: '<S191>/Switch1' */

    /* Product: '<S191>/Product2' */
    /*@>25955*/VCU_B./*@>2953e*/Product2_p/*@>7c77*/ = /*@>2595b*/VCU_B./*@>29541*/Product1_p/*@>21abc*/ * /*@>25961*/VCU_B./*@>29544*/Switch1_e;
 8005688:	4ba2      	ldr	r3, [pc, #648]	; (8005914 <FUNC_Transmission+0x2444>)
 800568a:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	; 0x128
 800568e:	4ba1      	ldr	r3, [pc, #644]	; (8005914 <FUNC_Transmission+0x2444>)
 8005690:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8005694:	f009 f9e8 	bl	800ea68 <__aeabi_dmul>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	499d      	ldr	r1, [pc, #628]	; (8005914 <FUNC_Transmission+0x2444>)
 800569e:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
    /* DataTypeConversion: '<S138>/Data Type Conversion15' */
    /*@>259a9*/VCU_B./*@>29568*/MHJ9_OUT_k/*@>7c7a*/ = /*@>259af*/VCU_B./*@>2956b*/Product2_p;
 80056a2:	4b9c      	ldr	r3, [pc, #624]	; (8005914 <FUNC_Transmission+0x2444>)
 80056a4:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 80056a8:	499a      	ldr	r1, [pc, #616]	; (8005914 <FUNC_Transmission+0x2444>)
 80056aa:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
    /* RelationalOperator: '<S197>/Compare' incorporates:
 *  Constant: '<S197>/Constant'
 */
    /*@>259c1*/VCU_B./*@>29574*/Compare_gz/*@>7c7e*/ = (/*@>259c7*/VCU_B./*@>29577*/Add_l/*@>7c7d*/ > /*@>2176f*/0.0);
 80056ae:	4b99      	ldr	r3, [pc, #612]	; (8005914 <FUNC_Transmission+0x2444>)
 80056b0:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80056b4:	2101      	movs	r1, #1
 80056b6:	460c      	mov	r4, r1
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	f009 fc60 	bl	800ef88 <__aeabi_dcmpgt>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <FUNC_Transmission+0x2202>
 80056ce:	2300      	movs	r3, #0
 80056d0:	461c      	mov	r4, r3
 80056d2:	b2e3      	uxtb	r3, r4
 80056d4:	461a      	mov	r2, r3
 80056d6:	4b8f      	ldr	r3, [pc, #572]	; (8005914 <FUNC_Transmission+0x2444>)
 80056d8:	f883 271b 	strb.w	r2, [r3, #1819]	; 0x71b
    /* Product: '<S191>/Product3' */
    /*@>259df*/VCU_B./*@>29583*/Product3_d/*@>7c85*/ = /*@>259e5*/VCU_B./*@>29586*/DutyCycleMHJ9/*@>21ab8*/ * /*@>21f9d*/(real_T)/*@>259eb*/VCU_B./*@>29589*/Compare_gz;
 80056dc:	4b8d      	ldr	r3, [pc, #564]	; (8005914 <FUNC_Transmission+0x2444>)
 80056de:	e9d3 4548 	ldrd	r4, r5, [r3, #288]	; 0x120
 80056e2:	4b8c      	ldr	r3, [pc, #560]	; (8005914 <FUNC_Transmission+0x2444>)
 80056e4:	f893 371b 	ldrb.w	r3, [r3, #1819]	; 0x71b
 80056e8:	4618      	mov	r0, r3
 80056ea:	f009 f947 	bl	800e97c <__aeabi_ui2d>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4620      	mov	r0, r4
 80056f4:	4629      	mov	r1, r5
 80056f6:	f009 f9b7 	bl	800ea68 <__aeabi_dmul>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4985      	ldr	r1, [pc, #532]	; (8005914 <FUNC_Transmission+0x2444>)
 8005700:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
    /* DataTypeConversion: '<S138>/Data Type Conversion14' */
    /*@>25a2d*/VCU_B./*@>295aa*/MHJ9_IN_p/*@>7c88*/ = /*@>25a33*/VCU_B./*@>295ad*/Product3_d;
 8005704:	4b83      	ldr	r3, [pc, #524]	; (8005914 <FUNC_Transmission+0x2444>)
 8005706:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800570a:	4982      	ldr	r1, [pc, #520]	; (8005914 <FUNC_Transmission+0x2444>)
 800570c:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
    /* RelationalOperator: '<S198>/Compare' incorporates:
 *  Constant: '<S198>/Constant'
 */
    /*@>25a4b*/VCU_B./*@>295b9*/Compare_bh/*@>7c8c*/ = (/*@>25a51*/VCU_B./*@>295bc*/Add_l/*@>7c8b*/ < /*@>21770*/-20.0);
 8005710:	4b80      	ldr	r3, [pc, #512]	; (8005914 <FUNC_Transmission+0x2444>)
 8005712:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8005716:	2101      	movs	r1, #1
 8005718:	460c      	mov	r4, r1
 800571a:	4610      	mov	r0, r2
 800571c:	4619      	mov	r1, r3
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	4b7e      	ldr	r3, [pc, #504]	; (800591c <FUNC_Transmission+0x244c>)
 8005724:	f009 fc12 	bl	800ef4c <__aeabi_dcmplt>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <FUNC_Transmission+0x2262>
 800572e:	2300      	movs	r3, #0
 8005730:	461c      	mov	r4, r3
 8005732:	b2e3      	uxtb	r3, r4
 8005734:	461a      	mov	r2, r3
 8005736:	4b77      	ldr	r3, [pc, #476]	; (8005914 <FUNC_Transmission+0x2444>)
 8005738:	f883 271c 	strb.w	r2, [r3, #1820]	; 0x71c
    /* DataTypeConversion: '<S138>/Data Type Conversion13' */
    /*@>25a69*/VCU_B./*@>295c8*/VOVG_OUT_o/*@>7c8f*/ = /*@>25a6f*/VCU_B./*@>295cb*/Compare_bh;
 800573c:	4b75      	ldr	r3, [pc, #468]	; (8005914 <FUNC_Transmission+0x2444>)
 800573e:	f893 371c 	ldrb.w	r3, [r3, #1820]	; 0x71c
 8005742:	4618      	mov	r0, r3
 8005744:	f009 f91a 	bl	800e97c <__aeabi_ui2d>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4971      	ldr	r1, [pc, #452]	; (8005914 <FUNC_Transmission+0x2444>)
 800574e:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
    /* RelationalOperator: '<S192>/Compare' incorporates:
 *  Constant: '<S192>/Constant'
 */
    /*@>25abd*/VCU_B./*@>295f2*/Compare_g5/*@>7c93*/ = (/*@>25ac3*/VCU_B./*@>295f5*/DataTypeConversion3/*@>7c92*/ < /*@>21771*/3.0);
 8005752:	4b70      	ldr	r3, [pc, #448]	; (8005914 <FUNC_Transmission+0x2444>)
 8005754:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8005758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575c:	2101      	movs	r1, #1
 800575e:	460c      	mov	r4, r1
 8005760:	4610      	mov	r0, r2
 8005762:	4619      	mov	r1, r3
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	4b6d      	ldr	r3, [pc, #436]	; (8005920 <FUNC_Transmission+0x2450>)
 800576a:	f009 fbef 	bl	800ef4c <__aeabi_dcmplt>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <FUNC_Transmission+0x22a8>
 8005774:	2300      	movs	r3, #0
 8005776:	461c      	mov	r4, r3
 8005778:	b2e3      	uxtb	r3, r4
 800577a:	461a      	mov	r2, r3
 800577c:	4b65      	ldr	r3, [pc, #404]	; (8005914 <FUNC_Transmission+0x2444>)
 800577e:	f883 271d 	strb.w	r2, [r3, #1821]	; 0x71d
    /* Logic: '<S138>/Logical Operator1' */
    /*@>25ad5*/VCU_B./*@>295fe*/LogicalOperator1_p/*@>7c99*/ = ((/*@>25adb*/VCU_B./*@>29601*/STW_shift_up_request/*@>21ab5*/ != /*@>21ab3*/0.0)/*@>7c98*/ && /*@>25ae1*/VCU_B./*@>29604*/Compare_g5);
 8005782:	4b64      	ldr	r3, [pc, #400]	; (8005914 <FUNC_Transmission+0x2444>)
 8005784:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	4610      	mov	r0, r2
 800578e:	4619      	mov	r1, r3
 8005790:	f04f 0200 	mov.w	r2, #0
 8005794:	f04f 0300 	mov.w	r3, #0
 8005798:	f009 fbce 	bl	800ef38 <__aeabi_dcmpeq>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d106      	bne.n	80057b0 <FUNC_Transmission+0x22e0>
 80057a2:	4b5c      	ldr	r3, [pc, #368]	; (8005914 <FUNC_Transmission+0x2444>)
 80057a4:	f893 371d 	ldrb.w	r3, [r3, #1821]	; 0x71d
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <FUNC_Transmission+0x22e0>
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <FUNC_Transmission+0x22e2>
 80057b0:	2300      	movs	r3, #0
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	4b57      	ldr	r3, [pc, #348]	; (8005914 <FUNC_Transmission+0x2444>)
 80057b6:	f883 271e 	strb.w	r2, [r3, #1822]	; 0x71e
    /* DataTypeConversion: '<S138>/Data Type Conversion8' */
    /*@>25af9*/VCU_B./*@>29610*/VOVG_ShiftUp_o/*@>7c9c*/ = /*@>25aff*/VCU_B./*@>29613*/LogicalOperator1_p;
 80057ba:	4b56      	ldr	r3, [pc, #344]	; (8005914 <FUNC_Transmission+0x2444>)
 80057bc:	f893 371e 	ldrb.w	r3, [r3, #1822]	; 0x71e
 80057c0:	4618      	mov	r0, r3
 80057c2:	f009 f8db 	bl	800e97c <__aeabi_ui2d>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4952      	ldr	r1, [pc, #328]	; (8005914 <FUNC_Transmission+0x2444>)
 80057cc:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
    /* RelationalOperator: '<S193>/Compare' incorporates:
 *  Constant: '<S193>/Constant'
 */
    /*@>25b47*/VCU_B./*@>29637*/Compare_mz/*@>7ca0*/ = (/*@>25b4d*/VCU_B./*@>2963a*/DataTypeConversion3/*@>7c9f*/ >= /*@>21772*/0.0);
 80057d0:	4b50      	ldr	r3, [pc, #320]	; (8005914 <FUNC_Transmission+0x2444>)
 80057d2:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	2101      	movs	r1, #1
 80057dc:	460c      	mov	r4, r1
 80057de:	4610      	mov	r0, r2
 80057e0:	4619      	mov	r1, r3
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	f009 fbc3 	bl	800ef74 <__aeabi_dcmpge>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <FUNC_Transmission+0x2328>
 80057f4:	2300      	movs	r3, #0
 80057f6:	461c      	mov	r4, r3
 80057f8:	b2e3      	uxtb	r3, r4
 80057fa:	461a      	mov	r2, r3
 80057fc:	4b45      	ldr	r3, [pc, #276]	; (8005914 <FUNC_Transmission+0x2444>)
 80057fe:	f883 271f 	strb.w	r2, [r3, #1823]	; 0x71f
    /* Logic: '<S138>/Logical Operator' */
    /*@>25b5f*/VCU_B./*@>29643*/LogicalOperator_e/*@>7ca6*/ = (/*@>25b65*/VCU_B./*@>29646*/Compare_mz/*@>7ca5*/ && (/*@>25b6b*/VCU_B./*@>29649*/STW_shift_down_request/*@>21ab1*/ != /*@>21aaf*/0.0));
 8005802:	4b44      	ldr	r3, [pc, #272]	; (8005914 <FUNC_Transmission+0x2444>)
 8005804:	f893 371f 	ldrb.w	r3, [r3, #1823]	; 0x71f
 8005808:	2b00      	cmp	r3, #0
 800580a:	d011      	beq.n	8005830 <FUNC_Transmission+0x2360>
 800580c:	4b41      	ldr	r3, [pc, #260]	; (8005914 <FUNC_Transmission+0x2444>)
 800580e:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	4610      	mov	r0, r2
 8005818:	4619      	mov	r1, r3
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	f009 fb89 	bl	800ef38 <__aeabi_dcmpeq>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <FUNC_Transmission+0x2360>
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <FUNC_Transmission+0x2362>
 8005830:	2300      	movs	r3, #0
 8005832:	b2da      	uxtb	r2, r3
 8005834:	4b37      	ldr	r3, [pc, #220]	; (8005914 <FUNC_Transmission+0x2444>)
 8005836:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720
    /* DataTypeConversion: '<S138>/Data Type Conversion10' */
    /*@>25b8f*/VCU_B./*@>2965b*/VOVG_ShiftDown_f/*@>7ca9*/ = /*@>25b95*/VCU_B./*@>2965e*/LogicalOperator_e;
 800583a:	4b36      	ldr	r3, [pc, #216]	; (8005914 <FUNC_Transmission+0x2444>)
 800583c:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 8005840:	4618      	mov	r0, r3
 8005842:	f009 f89b 	bl	800e97c <__aeabi_ui2d>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4932      	ldr	r1, [pc, #200]	; (8005914 <FUNC_Transmission+0x2444>)
 800584c:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168
    /* DataTypeConversion: '<S138>/Data Type Conversion11' */
    /*@>25bd7*/VCU_B./*@>2967f*/Ignition_Cut_h/*@>7cac*/ = /*@>21773*/0.0;
 8005850:	4930      	ldr	r1, [pc, #192]	; (8005914 <FUNC_Transmission+0x2444>)
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	e9c1 235c 	strd	r2, r3, [r1, #368]	; 0x170
    /* DataTypeConversion: '<S138>/Data Type Conversion16' */
    /*@>25be9*/VCU_B./*@>29688*/x_clutch_LC_i/*@>7caf*/ = /*@>21774*/0.0;
 800585e:	492d      	ldr	r1, [pc, #180]	; (8005914 <FUNC_Transmission+0x2444>)
 8005860:	f04f 0200 	mov.w	r2, #0
 8005864:	f04f 0300 	mov.w	r3, #0
 8005868:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
    /* DataTypeConversion: '<S138>/Data Type Conversion17' */
    /*@>25c01*/VCU_B./*@>29694*/LC_Mdes_f/*@>7cb2*/ = /*@>21775*/0.0;
 800586c:	4929      	ldr	r1, [pc, #164]	; (8005914 <FUNC_Transmission+0x2444>)
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	e9c1 2360 	strd	r2, r3, [r1, #384]	; 0x180
    /* DataTypeConversion: '<S138>/Data Type Conversion18' */
    /*@>25c49*/VCU_B./*@>296b8*/LC_Fnr_f/*@>7cb5*/ = /*@>21776*/0.0;
 800587a:	4926      	ldr	r1, [pc, #152]	; (8005914 <FUNC_Transmission+0x2444>)
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
}
/* End of Outputs for SubSystem: '<S7>/driver_jr18' */

/* MultiPortSwitch: '<S7>/Multiport Switch' */
/*@>74a3*/switch (/*@>25715*/VCU_B./*@>2941e*/DataTypeConversion_cg) {
 8005888:	4b22      	ldr	r3, [pc, #136]	; (8005914 <FUNC_Transmission+0x2444>)
 800588a:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 800588e:	b25b      	sxtb	r3, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d00a      	beq.n	80058aa <FUNC_Transmission+0x23da>
 8005894:	2b03      	cmp	r3, #3
 8005896:	d00f      	beq.n	80058b8 <FUNC_Transmission+0x23e8>
 8005898:	2b01      	cmp	r3, #1
 800589a:	d114      	bne.n	80058c6 <FUNC_Transmission+0x23f6>
  case /*@>210fe*/1:
    /*@>2574b*/VCU_B./*@>29439*/VOVG_ShiftUp/*@>74a7*/ = /*@>25751*/VCU_B./*@>2943c*/VOVG_ShiftUp_k;
 800589c:	4b1d      	ldr	r3, [pc, #116]	; (8005914 <FUNC_Transmission+0x2444>)
 800589e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80058a2:	491c      	ldr	r1, [pc, #112]	; (8005914 <FUNC_Transmission+0x2444>)
 80058a4:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80058a8:	e014      	b.n	80058d4 <FUNC_Transmission+0x2404>
  case /*@>210ff*/2:
    /*@>25757*/VCU_B./*@>2943f*/VOVG_ShiftUp/*@>74a9*/ = /*@>2575d*/VCU_B./*@>29442*/VOVG_ShiftUp_o;
 80058aa:	4b1a      	ldr	r3, [pc, #104]	; (8005914 <FUNC_Transmission+0x2444>)
 80058ac:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 80058b0:	4918      	ldr	r1, [pc, #96]	; (8005914 <FUNC_Transmission+0x2444>)
 80058b2:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80058b6:	e00d      	b.n	80058d4 <FUNC_Transmission+0x2404>
  case /*@>21100*/3:
    /*@>25763*/VCU_B./*@>29445*/VOVG_ShiftUp/*@>74ab*/ = /*@>25769*/VCU_B./*@>29448*/VOVG_ShiftUp_oi;
 80058b8:	4b16      	ldr	r3, [pc, #88]	; (8005914 <FUNC_Transmission+0x2444>)
 80058ba:	e9d3 2374 	ldrd	r2, r3, [r3, #464]	; 0x1d0
 80058be:	4915      	ldr	r1, [pc, #84]	; (8005914 <FUNC_Transmission+0x2444>)
 80058c0:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80058c4:	e006      	b.n	80058d4 <FUNC_Transmission+0x2404>
  default:
    /*@>2573f*/VCU_B./*@>29433*/VOVG_ShiftUp/*@>74a5*/ = /*@>25745*/VCU_B./*@>29436*/VOVG_ShiftUp_k;
 80058c6:	4b13      	ldr	r3, [pc, #76]	; (8005914 <FUNC_Transmission+0x2444>)
 80058c8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80058cc:	4911      	ldr	r1, [pc, #68]	; (8005914 <FUNC_Transmission+0x2444>)
 80058ce:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80058d2:	bf00      	nop
}
/*@>74ae*/switch (/*@>257a5*/VCU_B./*@>29466*/DataTypeConversion_cg) {
 80058d4:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <FUNC_Transmission+0x2444>)
 80058d6:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 80058da:	b25b      	sxtb	r3, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d00a      	beq.n	80058f6 <FUNC_Transmission+0x2426>
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d00f      	beq.n	8005904 <FUNC_Transmission+0x2434>
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d11d      	bne.n	8005924 <FUNC_Transmission+0x2454>
  case /*@>21113*/1:
    /*@>257db*/VCU_B./*@>29481*/LC_Fnr/*@>74b2*/ = /*@>257e1*/VCU_B./*@>29484*/LC_Fnr_l;
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <FUNC_Transmission+0x2444>)
 80058ea:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 80058ee:	4909      	ldr	r1, [pc, #36]	; (8005914 <FUNC_Transmission+0x2444>)
 80058f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    break;
 80058f4:	e01d      	b.n	8005932 <FUNC_Transmission+0x2462>
  case /*@>21114*/2:
    /*@>257e7*/VCU_B./*@>29487*/LC_Fnr/*@>74b4*/ = /*@>257ed*/VCU_B./*@>2948a*/LC_Fnr_f;
 80058f6:	4b07      	ldr	r3, [pc, #28]	; (8005914 <FUNC_Transmission+0x2444>)
 80058f8:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 80058fc:	4905      	ldr	r1, [pc, #20]	; (8005914 <FUNC_Transmission+0x2444>)
 80058fe:	e9c1 2302 	strd	r2, r3, [r1, #8]
    break;
 8005902:	e016      	b.n	8005932 <FUNC_Transmission+0x2462>
  case /*@>21115*/3:
    /*@>257f3*/VCU_B./*@>2948d*/LC_Fnr/*@>74b6*/ = /*@>257f9*/VCU_B./*@>29490*/LC_Fnr_lv;
 8005904:	4b03      	ldr	r3, [pc, #12]	; (8005914 <FUNC_Transmission+0x2444>)
 8005906:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	; 0x248
 800590a:	4902      	ldr	r1, [pc, #8]	; (8005914 <FUNC_Transmission+0x2444>)
 800590c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    break;
 8005910:	e00f      	b.n	8005932 <FUNC_Transmission+0x2462>
 8005912:	bf00      	nop
 8005914:	200008c8 	.word	0x200008c8
 8005918:	3ff00000 	.word	0x3ff00000
 800591c:	c0340000 	.word	0xc0340000
 8005920:	40080000 	.word	0x40080000
  default:
    /*@>257cf*/VCU_B./*@>2947b*/LC_Fnr/*@>74b0*/ = /*@>257d5*/VCU_B./*@>2947e*/LC_Fnr_l;
 8005924:	4b84      	ldr	r3, [pc, #528]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005926:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 800592a:	4983      	ldr	r1, [pc, #524]	; (8005b38 <FUNC_Transmission+0x2668>)
 800592c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    break;
 8005930:	bf00      	nop
}
/*@>74b9*/switch (/*@>25841*/VCU_B./*@>294b4*/DataTypeConversion_cg) {
 8005932:	4b81      	ldr	r3, [pc, #516]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005934:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8005938:	b25b      	sxtb	r3, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d00a      	beq.n	8005954 <FUNC_Transmission+0x2484>
 800593e:	2b03      	cmp	r3, #3
 8005940:	d00f      	beq.n	8005962 <FUNC_Transmission+0x2492>
 8005942:	2b01      	cmp	r3, #1
 8005944:	d114      	bne.n	8005970 <FUNC_Transmission+0x24a0>
  case /*@>21128*/1:
    /*@>25877*/VCU_B./*@>294cf*/VOVG_ShiftDown/*@>74bd*/ = /*@>2587d*/VCU_B./*@>294d2*/VOVG_ShiftDown_m;
 8005946:	4b7c      	ldr	r3, [pc, #496]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005948:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800594c:	497a      	ldr	r1, [pc, #488]	; (8005b38 <FUNC_Transmission+0x2668>)
 800594e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    break;
 8005952:	e014      	b.n	800597e <FUNC_Transmission+0x24ae>
  case /*@>21129*/2:
    /*@>25883*/VCU_B./*@>294d5*/VOVG_ShiftDown/*@>74bf*/ = /*@>25889*/VCU_B./*@>294d8*/VOVG_ShiftDown_f;
 8005954:	4b78      	ldr	r3, [pc, #480]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005956:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 800595a:	4977      	ldr	r1, [pc, #476]	; (8005b38 <FUNC_Transmission+0x2668>)
 800595c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    break;
 8005960:	e00d      	b.n	800597e <FUNC_Transmission+0x24ae>
  case /*@>2112a*/3:
    /*@>2588f*/VCU_B./*@>294db*/VOVG_ShiftDown/*@>74c1*/ = /*@>25895*/VCU_B./*@>294de*/VOVG_ShiftDown_a;
 8005962:	4b75      	ldr	r3, [pc, #468]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005964:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8005968:	4973      	ldr	r1, [pc, #460]	; (8005b38 <FUNC_Transmission+0x2668>)
 800596a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    break;
 800596e:	e006      	b.n	800597e <FUNC_Transmission+0x24ae>
  default:
    /*@>2586b*/VCU_B./*@>294c9*/VOVG_ShiftDown/*@>74bb*/ = /*@>25871*/VCU_B./*@>294cc*/VOVG_ShiftDown_m;
 8005970:	4b71      	ldr	r3, [pc, #452]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005972:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005976:	4970      	ldr	r1, [pc, #448]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005978:	e9c1 2304 	strd	r2, r3, [r1, #16]
    break;
 800597c:	bf00      	nop
}
/*@>74c4*/switch (/*@>258d7*/VCU_B./*@>294ff*/DataTypeConversion_cg) {
 800597e:	4b6e      	ldr	r3, [pc, #440]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005980:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8005984:	b25b      	sxtb	r3, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d00a      	beq.n	80059a0 <FUNC_Transmission+0x24d0>
 800598a:	2b03      	cmp	r3, #3
 800598c:	d00f      	beq.n	80059ae <FUNC_Transmission+0x24de>
 800598e:	2b01      	cmp	r3, #1
 8005990:	d114      	bne.n	80059bc <FUNC_Transmission+0x24ec>
  case /*@>2113d*/1:
    /*@>258fb*/VCU_B./*@>29511*/Ignition_Cut/*@>74c8*/ = /*@>25901*/VCU_B./*@>29514*/Ignition_Cut_o;
 8005992:	4b69      	ldr	r3, [pc, #420]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005994:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005998:	4967      	ldr	r1, [pc, #412]	; (8005b38 <FUNC_Transmission+0x2668>)
 800599a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    break;
 800599e:	e014      	b.n	80059ca <FUNC_Transmission+0x24fa>
  case /*@>2113e*/2:
    /*@>25907*/VCU_B./*@>29517*/Ignition_Cut/*@>74ca*/ = /*@>2590d*/VCU_B./*@>2951a*/Ignition_Cut_h;
 80059a0:	4b65      	ldr	r3, [pc, #404]	; (8005b38 <FUNC_Transmission+0x2668>)
 80059a2:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	; 0x170
 80059a6:	4964      	ldr	r1, [pc, #400]	; (8005b38 <FUNC_Transmission+0x2668>)
 80059a8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    break;
 80059ac:	e00d      	b.n	80059ca <FUNC_Transmission+0x24fa>
  case /*@>2113f*/3:
    /*@>25913*/VCU_B./*@>2951d*/Ignition_Cut/*@>74cc*/ = /*@>25919*/VCU_B./*@>29520*/Ignition_Cut_d;
 80059ae:	4b62      	ldr	r3, [pc, #392]	; (8005b38 <FUNC_Transmission+0x2668>)
 80059b0:	e9d3 2372 	ldrd	r2, r3, [r3, #456]	; 0x1c8
 80059b4:	4960      	ldr	r1, [pc, #384]	; (8005b38 <FUNC_Transmission+0x2668>)
 80059b6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    break;
 80059ba:	e006      	b.n	80059ca <FUNC_Transmission+0x24fa>
  default:
    /*@>258ef*/VCU_B./*@>2950b*/Ignition_Cut/*@>74c6*/ = /*@>258f5*/VCU_B./*@>2950e*/Ignition_Cut_o;
 80059bc:	4b5e      	ldr	r3, [pc, #376]	; (8005b38 <FUNC_Transmission+0x2668>)
 80059be:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80059c2:	495d      	ldr	r1, [pc, #372]	; (8005b38 <FUNC_Transmission+0x2668>)
 80059c4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    break;
 80059c8:	bf00      	nop
}
/*@>74cf*/switch (/*@>2594f*/VCU_B./*@>2953b*/DataTypeConversion_cg) {
 80059ca:	4b5b      	ldr	r3, [pc, #364]	; (8005b38 <FUNC_Transmission+0x2668>)
 80059cc:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 80059d0:	b25b      	sxtb	r3, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d00a      	beq.n	80059ec <FUNC_Transmission+0x251c>
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d00f      	beq.n	80059fa <FUNC_Transmission+0x252a>
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d114      	bne.n	8005a08 <FUNC_Transmission+0x2538>
  case /*@>21152*/1:
    /*@>25985*/VCU_B./*@>29556*/VOVG_IN/*@>74d3*/ = /*@>2598b*/VCU_B./*@>29559*/VOVG_IN_h;
 80059de:	4b56      	ldr	r3, [pc, #344]	; (8005b38 <FUNC_Transmission+0x2668>)
 80059e0:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80059e4:	4954      	ldr	r1, [pc, #336]	; (8005b38 <FUNC_Transmission+0x2668>)
 80059e6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    break;
 80059ea:	e014      	b.n	8005a16 <FUNC_Transmission+0x2546>
  case /*@>21153*/2:
    /*@>25991*/VCU_B./*@>2955c*/VOVG_IN/*@>74d5*/ = /*@>25997*/VCU_B./*@>2955f*/VOVG_IN_c;
 80059ec:	4b52      	ldr	r3, [pc, #328]	; (8005b38 <FUNC_Transmission+0x2668>)
 80059ee:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	; 0x110
 80059f2:	4951      	ldr	r1, [pc, #324]	; (8005b38 <FUNC_Transmission+0x2668>)
 80059f4:	e9c1 2308 	strd	r2, r3, [r1, #32]
    break;
 80059f8:	e00d      	b.n	8005a16 <FUNC_Transmission+0x2546>
  case /*@>21154*/3:
    /*@>2599d*/VCU_B./*@>29562*/VOVG_IN/*@>74d7*/ = /*@>259a3*/VCU_B./*@>29565*/VOVG_IN_g;
 80059fa:	4b4f      	ldr	r3, [pc, #316]	; (8005b38 <FUNC_Transmission+0x2668>)
 80059fc:	e9d3 237a 	ldrd	r2, r3, [r3, #488]	; 0x1e8
 8005a00:	494d      	ldr	r1, [pc, #308]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a02:	e9c1 2308 	strd	r2, r3, [r1, #32]
    break;
 8005a06:	e006      	b.n	8005a16 <FUNC_Transmission+0x2546>
  default:
    /*@>25979*/VCU_B./*@>29550*/VOVG_IN/*@>74d1*/ = /*@>2597f*/VCU_B./*@>29553*/VOVG_IN_h;
 8005a08:	4b4b      	ldr	r3, [pc, #300]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a0a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8005a0e:	494a      	ldr	r1, [pc, #296]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a10:	e9c1 2308 	strd	r2, r3, [r1, #32]
    break;
 8005a14:	bf00      	nop
}
/*@>74da*/switch (/*@>259d9*/VCU_B./*@>29580*/DataTypeConversion_cg) {
 8005a16:	4b48      	ldr	r3, [pc, #288]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a18:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8005a1c:	b25b      	sxtb	r3, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d00a      	beq.n	8005a38 <FUNC_Transmission+0x2568>
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d00f      	beq.n	8005a46 <FUNC_Transmission+0x2576>
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d114      	bne.n	8005a54 <FUNC_Transmission+0x2584>
  case /*@>21167*/1:
    /*@>25a09*/VCU_B./*@>29598*/VOVG_OUT/*@>74de*/ = /*@>25a0f*/VCU_B./*@>2959b*/VOVG_OUT_j;
 8005a2a:	4b43      	ldr	r3, [pc, #268]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a2c:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8005a30:	4941      	ldr	r1, [pc, #260]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a32:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    break;
 8005a36:	e014      	b.n	8005a62 <FUNC_Transmission+0x2592>
  case /*@>21168*/2:
    /*@>25a15*/VCU_B./*@>2959e*/VOVG_OUT/*@>74e0*/ = /*@>25a1b*/VCU_B./*@>295a1*/VOVG_OUT_o;
 8005a38:	4b3f      	ldr	r3, [pc, #252]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a3a:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
 8005a3e:	493e      	ldr	r1, [pc, #248]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a40:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    break;
 8005a44:	e00d      	b.n	8005a62 <FUNC_Transmission+0x2592>
  case /*@>21169*/3:
    /*@>25a21*/VCU_B./*@>295a4*/VOVG_OUT/*@>74e2*/ = /*@>25a27*/VCU_B./*@>295a7*/VOVG_OUT_b;
 8005a46:	4b3c      	ldr	r3, [pc, #240]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a48:	e9d3 238c 	ldrd	r2, r3, [r3, #560]	; 0x230
 8005a4c:	493a      	ldr	r1, [pc, #232]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a4e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    break;
 8005a52:	e006      	b.n	8005a62 <FUNC_Transmission+0x2592>
  default:
    /*@>259fd*/VCU_B./*@>29592*/VOVG_OUT/*@>74dc*/ = /*@>25a03*/VCU_B./*@>29595*/VOVG_OUT_j;
 8005a54:	4b38      	ldr	r3, [pc, #224]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a56:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8005a5a:	4937      	ldr	r1, [pc, #220]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a5c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    break;
 8005a60:	bf00      	nop
}
/*@>74e5*/switch (/*@>25a63*/VCU_B./*@>295c5*/DataTypeConversion_cg) {
 8005a62:	4b35      	ldr	r3, [pc, #212]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a64:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8005a68:	b25b      	sxtb	r3, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d00a      	beq.n	8005a84 <FUNC_Transmission+0x25b4>
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d00f      	beq.n	8005a92 <FUNC_Transmission+0x25c2>
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d114      	bne.n	8005aa0 <FUNC_Transmission+0x25d0>
  case /*@>2117c*/1:
    /*@>25a99*/VCU_B./*@>295e0*/MHJ9_IN/*@>74e9*/ = /*@>25a9f*/VCU_B./*@>295e3*/MHJ9_IN_e;
 8005a76:	4b30      	ldr	r3, [pc, #192]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a78:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 8005a7c:	492e      	ldr	r1, [pc, #184]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a7e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    break;
 8005a82:	e014      	b.n	8005aae <FUNC_Transmission+0x25de>
  case /*@>2117d*/2:
    /*@>25aa5*/VCU_B./*@>295e6*/MHJ9_IN/*@>74eb*/ = /*@>25aab*/VCU_B./*@>295e9*/MHJ9_IN_p;
 8005a84:	4b2c      	ldr	r3, [pc, #176]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a86:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8005a8a:	492b      	ldr	r1, [pc, #172]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a8c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    break;
 8005a90:	e00d      	b.n	8005aae <FUNC_Transmission+0x25de>
  case /*@>2117e*/3:
    /*@>25ab1*/VCU_B./*@>295ec*/MHJ9_IN/*@>74ed*/ = /*@>25ab7*/VCU_B./*@>295ef*/MHJ9_IN_h;
 8005a92:	4b29      	ldr	r3, [pc, #164]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a94:	e9d3 238a 	ldrd	r2, r3, [r3, #552]	; 0x228
 8005a98:	4927      	ldr	r1, [pc, #156]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005a9a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    break;
 8005a9e:	e006      	b.n	8005aae <FUNC_Transmission+0x25de>
  default:
    /*@>25a8d*/VCU_B./*@>295da*/MHJ9_IN/*@>74e7*/ = /*@>25a93*/VCU_B./*@>295dd*/MHJ9_IN_e;
 8005aa0:	4b25      	ldr	r3, [pc, #148]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005aa2:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 8005aa6:	4924      	ldr	r1, [pc, #144]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005aa8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    break;
 8005aac:	bf00      	nop
}
/*@>74f0*/switch (/*@>25af3*/VCU_B./*@>2960d*/DataTypeConversion_cg) {
 8005aae:	4b22      	ldr	r3, [pc, #136]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005ab0:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8005ab4:	b25b      	sxtb	r3, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d00a      	beq.n	8005ad0 <FUNC_Transmission+0x2600>
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d00f      	beq.n	8005ade <FUNC_Transmission+0x260e>
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d114      	bne.n	8005aec <FUNC_Transmission+0x261c>
  case /*@>21191*/1:
    /*@>25b23*/VCU_B./*@>29625*/MHJ9_OUT/*@>74f4*/ = /*@>25b29*/VCU_B./*@>29628*/MHJ9_OUT_d;
 8005ac2:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005ac4:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8005ac8:	491b      	ldr	r1, [pc, #108]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005aca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    break;
 8005ace:	e014      	b.n	8005afa <FUNC_Transmission+0x262a>
  case /*@>21192*/2:
    /*@>25b2f*/VCU_B./*@>2962b*/MHJ9_OUT/*@>74f6*/ = /*@>25b35*/VCU_B./*@>2962e*/MHJ9_OUT_k;
 8005ad0:	4b19      	ldr	r3, [pc, #100]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005ad2:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 8005ad6:	4918      	ldr	r1, [pc, #96]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005ad8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    break;
 8005adc:	e00d      	b.n	8005afa <FUNC_Transmission+0x262a>
  case /*@>21193*/3:
    /*@>25b3b*/VCU_B./*@>29631*/MHJ9_OUT/*@>74f8*/ = /*@>25b41*/VCU_B./*@>29634*/MHJ9_OUT_d5;
 8005ade:	4b16      	ldr	r3, [pc, #88]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005ae0:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	; 0x218
 8005ae4:	4914      	ldr	r1, [pc, #80]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005ae6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    break;
 8005aea:	e006      	b.n	8005afa <FUNC_Transmission+0x262a>
  default:
    /*@>25b17*/VCU_B./*@>2961f*/MHJ9_OUT/*@>74f2*/ = /*@>25b1d*/VCU_B./*@>29622*/MHJ9_OUT_d;
 8005aec:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005aee:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8005af2:	4911      	ldr	r1, [pc, #68]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005af4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    break;
 8005af8:	bf00      	nop
}
/*@>74fb*/switch (/*@>25b89*/VCU_B./*@>29658*/DataTypeConversion_cg) {
 8005afa:	4b0f      	ldr	r3, [pc, #60]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005afc:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8005b00:	b25b      	sxtb	r3, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d00a      	beq.n	8005b1c <FUNC_Transmission+0x264c>
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d00f      	beq.n	8005b2a <FUNC_Transmission+0x265a>
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d116      	bne.n	8005b3c <FUNC_Transmission+0x266c>
  case /*@>211a6*/1:
    /*@>25bb3*/VCU_B./*@>2966d*/x_clutch_LC/*@>74ff*/ = /*@>25bb9*/VCU_B./*@>29670*/x_clutch_LC_b;
 8005b0e:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005b10:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 8005b14:	4908      	ldr	r1, [pc, #32]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005b16:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    break;
 8005b1a:	e016      	b.n	8005b4a <FUNC_Transmission+0x267a>
  case /*@>211a7*/2:
    /*@>25bbf*/VCU_B./*@>29673*/x_clutch_LC/*@>7501*/ = /*@>25bc5*/VCU_B./*@>29676*/x_clutch_LC_i;
 8005b1c:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005b1e:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 8005b22:	4905      	ldr	r1, [pc, #20]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005b24:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    break;
 8005b28:	e00f      	b.n	8005b4a <FUNC_Transmission+0x267a>
  case /*@>211a8*/3:
    /*@>25bcb*/VCU_B./*@>29679*/x_clutch_LC/*@>7503*/ = /*@>25bd1*/VCU_B./*@>2967c*/x_clutch_LC_bg;
 8005b2a:	4b03      	ldr	r3, [pc, #12]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005b2c:	e9d3 238e 	ldrd	r2, r3, [r3, #568]	; 0x238
 8005b30:	4901      	ldr	r1, [pc, #4]	; (8005b38 <FUNC_Transmission+0x2668>)
 8005b32:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    break;
 8005b36:	e008      	b.n	8005b4a <FUNC_Transmission+0x267a>
 8005b38:	200008c8 	.word	0x200008c8
  default:
    /*@>25ba7*/VCU_B./*@>29667*/x_clutch_LC/*@>74fd*/ = /*@>25bad*/VCU_B./*@>2966a*/x_clutch_LC_b;
 8005b3c:	4b3c      	ldr	r3, [pc, #240]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005b3e:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 8005b42:	493b      	ldr	r1, [pc, #236]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005b44:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    break;
 8005b48:	bf00      	nop
}
/*@>7506*/switch (/*@>25bfb*/VCU_B./*@>29691*/DataTypeConversion_cg) {
 8005b4a:	4b39      	ldr	r3, [pc, #228]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005b4c:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8005b50:	b25b      	sxtb	r3, r3
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d00a      	beq.n	8005b6c <FUNC_Transmission+0x269c>
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d00f      	beq.n	8005b7a <FUNC_Transmission+0x26aa>
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d114      	bne.n	8005b88 <FUNC_Transmission+0x26b8>
  case /*@>211bb*/1:
    /*@>25c25*/VCU_B./*@>296a6*/LC_Mdes/*@>750a*/ = /*@>25c2b*/VCU_B./*@>296a9*/LC_Mdes_b;
 8005b5e:	4b34      	ldr	r3, [pc, #208]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005b60:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8005b64:	4932      	ldr	r1, [pc, #200]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005b66:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    break;
 8005b6a:	e014      	b.n	8005b96 <FUNC_Transmission+0x26c6>
  case /*@>211bc*/2:
    /*@>25c31*/VCU_B./*@>296ac*/LC_Mdes/*@>750c*/ = /*@>25c37*/VCU_B./*@>296af*/LC_Mdes_f;
 8005b6c:	4b30      	ldr	r3, [pc, #192]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005b6e:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 8005b72:	492f      	ldr	r1, [pc, #188]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005b74:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    break;
 8005b78:	e00d      	b.n	8005b96 <FUNC_Transmission+0x26c6>
  case /*@>211bd*/3:
    /*@>25c3d*/VCU_B./*@>296b2*/LC_Mdes/*@>750e*/ = /*@>25c43*/VCU_B./*@>296b5*/LC_Mdes_o;
 8005b7a:	4b2d      	ldr	r3, [pc, #180]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005b7c:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	; 0x240
 8005b80:	492b      	ldr	r1, [pc, #172]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005b82:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    break;
 8005b86:	e006      	b.n	8005b96 <FUNC_Transmission+0x26c6>
  default:
    /*@>25c19*/VCU_B./*@>296a0*/LC_Mdes/*@>7508*/ = /*@>25c1f*/VCU_B./*@>296a3*/LC_Mdes_b;
 8005b88:	4b29      	ldr	r3, [pc, #164]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005b8a:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8005b8e:	4928      	ldr	r1, [pc, #160]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005b90:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    break;
 8005b94:	bf00      	nop
}
/* End of MultiPortSwitch: '<S7>/Multiport Switch' */

/* MultiPortSwitch: '<S7>/Multiport Switch1' */
/*@>7511*/switch (/*@>25c73*/VCU_B./*@>296cd*/DataTypeConversion_cg) {
 8005b96:	4b26      	ldr	r3, [pc, #152]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005b98:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8005b9c:	b25b      	sxtb	r3, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d00a      	beq.n	8005bb8 <FUNC_Transmission+0x26e8>
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d00e      	beq.n	8005bc4 <FUNC_Transmission+0x26f4>
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d113      	bne.n	8005bd2 <FUNC_Transmission+0x2702>
  case /*@>211d0*/1:
    /*@>25c97*/VCU_B./*@>296df*/LC_active_bit/*@>7515*/ = /*@>25c9d*/VCU_B./*@>296e2*/LC_active_bit_f;
 8005baa:	4b21      	ldr	r3, [pc, #132]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005bac:	f893 26dd 	ldrb.w	r2, [r3, #1757]	; 0x6dd
 8005bb0:	4b1f      	ldr	r3, [pc, #124]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005bb2:	f883 26ce 	strb.w	r2, [r3, #1742]	; 0x6ce
    break;
 8005bb6:	e013      	b.n	8005be0 <FUNC_Transmission+0x2710>
  case /*@>211d1*/2:
    /*@>25ca3*/VCU_B./*@>296e5*/LC_active_bit/*@>7517*/ = /*@>266c4*/VCU_ConstB./*@>29bf2*/LC_active_bit;
 8005bb8:	4b1e      	ldr	r3, [pc, #120]	; (8005c34 <FUNC_Transmission+0x2764>)
 8005bba:	7c9a      	ldrb	r2, [r3, #18]
 8005bbc:	4b1c      	ldr	r3, [pc, #112]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005bbe:	f883 26ce 	strb.w	r2, [r3, #1742]	; 0x6ce
    break;
 8005bc2:	e00d      	b.n	8005be0 <FUNC_Transmission+0x2710>
  case /*@>211d2*/3:
    /*@>25ca9*/VCU_B./*@>296e8*/LC_active_bit/*@>7519*/ = /*@>25caf*/VCU_B./*@>296eb*/LC_active_bit_a;
 8005bc4:	4b1a      	ldr	r3, [pc, #104]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005bc6:	f893 272e 	ldrb.w	r2, [r3, #1838]	; 0x72e
 8005bca:	4b19      	ldr	r3, [pc, #100]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005bcc:	f883 26ce 	strb.w	r2, [r3, #1742]	; 0x6ce
    break;
 8005bd0:	e006      	b.n	8005be0 <FUNC_Transmission+0x2710>
  default:
    /*@>25c8b*/VCU_B./*@>296d9*/LC_active_bit/*@>7513*/ = /*@>25c91*/VCU_B./*@>296dc*/LC_active_bit_f;
 8005bd2:	4b17      	ldr	r3, [pc, #92]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005bd4:	f893 26dd 	ldrb.w	r2, [r3, #1757]	; 0x6dd
 8005bd8:	4b15      	ldr	r3, [pc, #84]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005bda:	f883 26ce 	strb.w	r2, [r3, #1742]	; 0x6ce
    break;
 8005bde:	bf00      	nop
}
/*@>751c*/switch (/*@>25ceb*/VCU_B./*@>29709*/DataTypeConversion_cg) {
 8005be0:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005be2:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 8005be6:	b25b      	sxtb	r3, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d00a      	beq.n	8005c02 <FUNC_Transmission+0x2732>
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d00e      	beq.n	8005c0e <FUNC_Transmission+0x273e>
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d113      	bne.n	8005c1c <FUNC_Transmission+0x274c>
  case /*@>211e5*/1:
    /*@>25d0f*/VCU_B./*@>2971b*/LC_ready_bit/*@>7520*/ = /*@>25d15*/VCU_B./*@>2971e*/LC_ready_bit_e;
 8005bf4:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005bf6:	f893 2717 	ldrb.w	r2, [r3, #1815]	; 0x717
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005bfc:	f883 26cf 	strb.w	r2, [r3, #1743]	; 0x6cf
    break;
 8005c00:	e013      	b.n	8005c2a <FUNC_Transmission+0x275a>
  case /*@>211e6*/2:
    /*@>25d1b*/VCU_B./*@>29721*/LC_ready_bit/*@>7522*/ = /*@>266ca*/VCU_ConstB./*@>29bf5*/LC_ready_bit;
 8005c02:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <FUNC_Transmission+0x2764>)
 8005c04:	7cda      	ldrb	r2, [r3, #19]
 8005c06:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005c08:	f883 26cf 	strb.w	r2, [r3, #1743]	; 0x6cf
    break;
 8005c0c:	e00d      	b.n	8005c2a <FUNC_Transmission+0x275a>
  case /*@>211e7*/3:
    /*@>25d21*/VCU_B./*@>29724*/LC_ready_bit/*@>7524*/ = /*@>25d27*/VCU_B./*@>29727*/LC_ready_bit_p;
 8005c0e:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005c10:	f893 2774 	ldrb.w	r2, [r3, #1908]	; 0x774
 8005c14:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005c16:	f883 26cf 	strb.w	r2, [r3, #1743]	; 0x6cf
    break;
 8005c1a:	e006      	b.n	8005c2a <FUNC_Transmission+0x275a>
  default:
    /*@>25d03*/VCU_B./*@>29715*/LC_ready_bit/*@>751e*/ = /*@>25d09*/VCU_B./*@>29718*/LC_ready_bit_e;
 8005c1c:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005c1e:	f893 2717 	ldrb.w	r2, [r3, #1815]	; 0x717
 8005c22:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <FUNC_Transmission+0x2760>)
 8005c24:	f883 26cf 	strb.w	r2, [r3, #1743]	; 0x6cf
    break;
 8005c28:	bf00      	nop


        
    
      
          }
 8005c2a:	371c      	adds	r7, #28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c30:	200008c8 	.word	0x200008c8
 8005c34:	0800f1d0 	.word	0x0800f1d0

08005c38 <look1_binlxpw>:


    
             
real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[], uint32_T maxIndex)
{
 8005c38:	b5b0      	push	{r4, r5, r7, lr}
 8005c3a:	b08a      	sub	sp, #40	; 0x28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
   Extrapolation method: 'Linear'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    if (u0 <= bp0[0U]) {
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4619      	mov	r1, r3
 8005c50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c54:	f009 f98e 	bl	800ef74 <__aeabi_dcmpge>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d020      	beq.n	8005ca0 <look1_binlxpw+0x68>
        iLeft = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61bb      	str	r3, [r7, #24]
        frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c6c:	f008 fd48 	bl	800e700 <__aeabi_dsub>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4614      	mov	r4, r2
 8005c76:	461d      	mov	r5, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c86:	f008 fd3b 	bl	800e700 <__aeabi_dsub>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4620      	mov	r0, r4
 8005c90:	4629      	mov	r1, r5
 8005c92:	f009 f813 	bl	800ecbc <__aeabi_ddiv>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005c9e:	e08b      	b.n	8005db8 <look1_binlxpw+0x180>
    } else if (u0 < bp0[maxIndex]) {
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cac:	4610      	mov	r0, r2
 8005cae:	4619      	mov	r1, r3
 8005cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cb4:	f009 f968 	bl	800ef88 <__aeabi_dcmpgt>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d04d      	beq.n	8005d5a <look1_binlxpw+0x122>
        /* Binary Search */
        bpIdx = maxIndex >> 1U;
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	085b      	lsrs	r3, r3, #1
 8005cc2:	617b      	str	r3, [r7, #20]
        iLeft = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	61bb      	str	r3, [r7, #24]
        iRght = maxIndex;
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	61fb      	str	r3, [r7, #28]
        while (iRght - iLeft > 1U) {
 8005ccc:	e018      	b.n	8005d00 <look1_binlxpw+0xc8>
            if (u0 < bp0[bpIdx]) {
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cda:	4610      	mov	r0, r2
 8005cdc:	4619      	mov	r1, r3
 8005cde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ce2:	f009 f951 	bl	800ef88 <__aeabi_dcmpgt>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <look1_binlxpw+0xba>
                iRght = bpIdx;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	e001      	b.n	8005cf6 <look1_binlxpw+0xbe>
            } else {
                iLeft = bpIdx;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	61bb      	str	r3, [r7, #24]
            }
            bpIdx = (iRght + iLeft) >> 1U;
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	085b      	lsrs	r3, r3, #1
 8005cfe:	617b      	str	r3, [r7, #20]
    } else if (u0 < bp0[maxIndex]) {
        /* Binary Search */
        bpIdx = maxIndex >> 1U;
        iLeft = 0U;
        iRght = maxIndex;
        while (iRght - iLeft > 1U) {
 8005d00:	69fa      	ldr	r2, [r7, #28]
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d8e1      	bhi.n	8005cce <look1_binlxpw+0x96>
            } else {
                iLeft = bpIdx;
            }
            bpIdx = (iRght + iLeft) >> 1U;
        }
        frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	4413      	add	r3, r2
 8005d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d1a:	f008 fcf1 	bl	800e700 <__aeabi_dsub>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4614      	mov	r4, r2
 8005d24:	461d      	mov	r5, r3
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	4413      	add	r3, r2
 8005d30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f008 fcde 	bl	800e700 <__aeabi_dsub>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4620      	mov	r0, r4
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	f008 ffb6 	bl	800ecbc <__aeabi_ddiv>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005d58:	e02e      	b.n	8005db8 <look1_binlxpw+0x180>
    } else {
        iLeft = maxIndex - 1U;
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	61bb      	str	r3, [r7, #24]
        frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005d66:	3b01      	subs	r3, #1
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d76:	f008 fcc3 	bl	800e700 <__aeabi_dsub>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4614      	mov	r4, r2
 8005d80:	461d      	mov	r5, r3
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	4413      	add	r3, r2
 8005d8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005d94:	3b01      	subs	r3, #1
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	f008 fcae 	bl	800e700 <__aeabi_dsub>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4620      	mov	r0, r4
 8005daa:	4629      	mov	r1, r5
 8005dac:	f008 ff86 	bl	800ecbc <__aeabi_ddiv>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    /* Interpolation 1-D
   Interpolation method: 'Linear point-slope'
   Use last breakpoint for index at or above upper limit: 'off'
   Overflow mode: 'portable wrapping'
 */
    return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	4413      	add	r3, r2
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f008 fc95 	bl	800e700 <__aeabi_dsub>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4610      	mov	r0, r2
 8005ddc:	4619      	mov	r1, r3
 8005dde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005de2:	f008 fe41 	bl	800ea68 <__aeabi_dmul>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	4610      	mov	r0, r2
 8005dec:	4619      	mov	r1, r3
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	4413      	add	r3, r2
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	f008 fc83 	bl	800e704 <__adddf3>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
}
 8005e02:	4610      	mov	r0, r2
 8005e04:	4619      	mov	r1, r3
 8005e06:	3728      	adds	r7, #40	; 0x28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bdb0      	pop	{r4, r5, r7, pc}

08005e0c <look2_binlxpw>:
        
         
real_T look2_binlxpw(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[], const real_T table[], const uint32_T maxIndex[], uint32_T stride)
{
 8005e0c:	b5b0      	push	{r4, r5, r7, lr}
 8005e0e:	b092      	sub	sp, #72	; 0x48
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005e16:	e9c7 2300 	strd	r2, r3, [r7]
   Extrapolation method: 'Linear'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    if (u0 <= bp0[0U]) {
 8005e1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	4610      	mov	r0, r2
 8005e22:	4619      	mov	r1, r3
 8005e24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e28:	f009 f8a4 	bl	800ef74 <__aeabi_dcmpge>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d020      	beq.n	8005e74 <look2_binlxpw+0x68>
        iLeft = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	637b      	str	r3, [r7, #52]	; 0x34
        frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8005e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e40:	f008 fc5e 	bl	800e700 <__aeabi_dsub>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4614      	mov	r4, r2
 8005e4a:	461d      	mov	r5, r3
 8005e4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e4e:	3308      	adds	r3, #8
 8005e50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5a:	f008 fc51 	bl	800e700 <__aeabi_dsub>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4620      	mov	r0, r4
 8005e64:	4629      	mov	r1, r5
 8005e66:	f008 ff29 	bl	800ecbc <__aeabi_ddiv>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8005e72:	e092      	b.n	8005f9a <look2_binlxpw+0x18e>
    } else if (u0 < bp0[maxIndex[0U]]) {
 8005e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e7c:	4413      	add	r3, r2
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	4610      	mov	r0, r2
 8005e84:	4619      	mov	r1, r3
 8005e86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e8a:	f009 f87d 	bl	800ef88 <__aeabi_dcmpgt>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d04f      	beq.n	8005f34 <look2_binlxpw+0x128>
        /* Binary Search */
        bpIdx = maxIndex[0U] >> 1U;
 8005e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	63bb      	str	r3, [r7, #56]	; 0x38
        iLeft = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	637b      	str	r3, [r7, #52]	; 0x34
        iRght = maxIndex[0U];
 8005ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (iRght - iLeft > 1U) {
 8005ea6:	e018      	b.n	8005eda <look2_binlxpw+0xce>
            if (u0 < bp0[bpIdx]) {
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eae:	4413      	add	r3, r2
 8005eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ebc:	f009 f864 	bl	800ef88 <__aeabi_dcmpgt>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <look2_binlxpw+0xc0>
                iRght = bpIdx;
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eca:	e001      	b.n	8005ed0 <look2_binlxpw+0xc4>
            } else {
                iLeft = bpIdx;
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	637b      	str	r3, [r7, #52]	; 0x34
            }
            bpIdx = (iRght + iLeft) >> 1U;
 8005ed0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed4:	4413      	add	r3, r2
 8005ed6:	085b      	lsrs	r3, r3, #1
 8005ed8:	63bb      	str	r3, [r7, #56]	; 0x38
    } else if (u0 < bp0[maxIndex[0U]]) {
        /* Binary Search */
        bpIdx = maxIndex[0U] >> 1U;
        iLeft = 0U;
        iRght = maxIndex[0U];
        while (iRght - iLeft > 1U) {
 8005eda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d8e1      	bhi.n	8005ea8 <look2_binlxpw+0x9c>
            } else {
                iLeft = bpIdx;
            }
            bpIdx = (iRght + iLeft) >> 1U;
        }
        frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8005ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eea:	4413      	add	r3, r2
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ef4:	f008 fc04 	bl	800e700 <__aeabi_dsub>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4614      	mov	r4, r2
 8005efe:	461d      	mov	r5, r3
 8005f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f02:	3301      	adds	r3, #1
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f08:	4413      	add	r3, r2
 8005f0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f14:	4413      	add	r3, r2
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	f008 fbf1 	bl	800e700 <__aeabi_dsub>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4620      	mov	r0, r4
 8005f24:	4629      	mov	r1, r5
 8005f26:	f008 fec9 	bl	800ecbc <__aeabi_ddiv>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8005f32:	e032      	b.n	8005f9a <look2_binlxpw+0x18e>
    } else {
        iLeft = maxIndex[0U] - 1U;
 8005f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	637b      	str	r3, [r7, #52]	; 0x34
        frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U] - 1U]);
 8005f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005f44:	3b01      	subs	r3, #1
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f4a:	4413      	add	r3, r2
 8005f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f54:	f008 fbd4 	bl	800e700 <__aeabi_dsub>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4614      	mov	r4, r2
 8005f5e:	461d      	mov	r5, r3
 8005f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f68:	4413      	add	r3, r2
 8005f6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005f76:	3b01      	subs	r3, #1
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f7c:	4413      	add	r3, r2
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	f008 fbbd 	bl	800e700 <__aeabi_dsub>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	4629      	mov	r1, r5
 8005f8e:	f008 fe95 	bl	800ecbc <__aeabi_ddiv>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
    fractions[0U] = frac;
 8005f9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    bpIndices[0U] = iLeft;
 8005fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa4:	623b      	str	r3, [r7, #32]
   Extrapolation method: 'Linear'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    if (u1 <= bp1[0U]) {
 8005fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	4610      	mov	r0, r2
 8005fae:	4619      	mov	r1, r3
 8005fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fb4:	f008 ffde 	bl	800ef74 <__aeabi_dcmpge>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d020      	beq.n	8006000 <look2_binlxpw+0x1f4>
        iLeft = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
        frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 8005fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fcc:	f008 fb98 	bl	800e700 <__aeabi_dsub>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4614      	mov	r4, r2
 8005fd6:	461d      	mov	r5, r3
 8005fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fda:	3308      	adds	r3, #8
 8005fdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	f008 fb8b 	bl	800e700 <__aeabi_dsub>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4620      	mov	r0, r4
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	f008 fe63 	bl	800ecbc <__aeabi_ddiv>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8005ffe:	e098      	b.n	8006132 <look2_binlxpw+0x326>
    } else if (u1 < bp1[maxIndex[1U]]) {
 8006000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006002:	3304      	adds	r3, #4
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800600a:	4413      	add	r3, r2
 800600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006010:	4610      	mov	r0, r2
 8006012:	4619      	mov	r1, r3
 8006014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006018:	f008 ffb6 	bl	800ef88 <__aeabi_dcmpgt>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d050      	beq.n	80060c4 <look2_binlxpw+0x2b8>
        /* Binary Search */
        bpIdx = maxIndex[1U] >> 1U;
 8006022:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006024:	3304      	adds	r3, #4
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	085b      	lsrs	r3, r3, #1
 800602a:	63bb      	str	r3, [r7, #56]	; 0x38
        iLeft = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	637b      	str	r3, [r7, #52]	; 0x34
        iRght = maxIndex[1U];
 8006030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (iRght - iLeft > 1U) {
 8006036:	e018      	b.n	800606a <look2_binlxpw+0x25e>
            if (u1 < bp1[bpIdx]) {
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800603e:	4413      	add	r3, r2
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	4610      	mov	r0, r2
 8006046:	4619      	mov	r1, r3
 8006048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800604c:	f008 ff9c 	bl	800ef88 <__aeabi_dcmpgt>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <look2_binlxpw+0x250>
                iRght = bpIdx;
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800605a:	e001      	b.n	8006060 <look2_binlxpw+0x254>
            } else {
                iLeft = bpIdx;
 800605c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            bpIdx = (iRght + iLeft) >> 1U;
 8006060:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006064:	4413      	add	r3, r2
 8006066:	085b      	lsrs	r3, r3, #1
 8006068:	63bb      	str	r3, [r7, #56]	; 0x38
    } else if (u1 < bp1[maxIndex[1U]]) {
        /* Binary Search */
        bpIdx = maxIndex[1U] >> 1U;
        iLeft = 0U;
        iRght = maxIndex[1U];
        while (iRght - iLeft > 1U) {
 800606a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	d8e1      	bhi.n	8006038 <look2_binlxpw+0x22c>
            } else {
                iLeft = bpIdx;
            }
            bpIdx = (iRght + iLeft) >> 1U;
        }
        frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 8006074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800607a:	4413      	add	r3, r2
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006084:	f008 fb3c 	bl	800e700 <__aeabi_dsub>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4614      	mov	r4, r2
 800608e:	461d      	mov	r5, r3
 8006090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006092:	3301      	adds	r3, #1
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006098:	4413      	add	r3, r2
 800609a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800609e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060a4:	4413      	add	r3, r2
 80060a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060aa:	f008 fb29 	bl	800e700 <__aeabi_dsub>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4620      	mov	r0, r4
 80060b4:	4629      	mov	r1, r5
 80060b6:	f008 fe01 	bl	800ecbc <__aeabi_ddiv>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80060c2:	e036      	b.n	8006132 <look2_binlxpw+0x326>
    } else {
        iLeft = maxIndex[1U] - 1U;
 80060c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060c6:	3304      	adds	r3, #4
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	637b      	str	r3, [r7, #52]	; 0x34
        frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U] - 1U]);
 80060ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060d0:	3304      	adds	r3, #4
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80060d8:	3b01      	subs	r3, #1
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060de:	4413      	add	r3, r2
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060e8:	f008 fb0a 	bl	800e700 <__aeabi_dsub>
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	4614      	mov	r4, r2
 80060f2:	461d      	mov	r5, r3
 80060f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060f6:	3304      	adds	r3, #4
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060fe:	4413      	add	r3, r2
 8006100:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006106:	3304      	adds	r3, #4
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800610e:	3b01      	subs	r3, #1
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006114:	4413      	add	r3, r2
 8006116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611a:	f008 faf1 	bl	800e700 <__aeabi_dsub>
 800611e:	4602      	mov	r2, r0
 8006120:	460b      	mov	r3, r1
 8006122:	4620      	mov	r0, r4
 8006124:	4629      	mov	r1, r5
 8006126:	f008 fdc9 	bl	800ecbc <__aeabi_ddiv>
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    /* Interpolation 2-D
   Interpolation method: 'Linear point-slope'
   Use last breakpoint for index at or above upper limit: 'off'
   Overflow mode: 'portable wrapping'
 */
    bpIdx = iLeft * stride + bpIndices[0U];
 8006132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006134:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006136:	fb02 f203 	mul.w	r2, r2, r3
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	4413      	add	r3, r2
 800613e:	63bb      	str	r3, [r7, #56]	; 0x38
    yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
 8006140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006142:	3301      	adds	r3, #1
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006148:	4413      	add	r3, r2
 800614a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006154:	4413      	add	r3, r2
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	f008 fad1 	bl	800e700 <__aeabi_dsub>
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	4610      	mov	r0, r2
 8006164:	4619      	mov	r1, r3
 8006166:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800616a:	f008 fc7d 	bl	800ea68 <__aeabi_dmul>
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	4610      	mov	r0, r2
 8006174:	4619      	mov	r1, r3
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800617c:	4413      	add	r3, r2
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	f008 fabf 	bl	800e704 <__adddf3>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    bpIdx += stride;
 800618e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006190:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006192:	4413      	add	r3, r2
 8006194:	63bb      	str	r3, [r7, #56]	; 0x38
    return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) - yL_1d) * frac + yL_1d;
 8006196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006198:	3301      	adds	r3, #1
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800619e:	4413      	add	r3, r2
 80061a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061aa:	4413      	add	r3, r2
 80061ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b0:	f008 faa6 	bl	800e700 <__aeabi_dsub>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4610      	mov	r0, r2
 80061ba:	4619      	mov	r1, r3
 80061bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80061c0:	f008 fc52 	bl	800ea68 <__aeabi_dmul>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4610      	mov	r0, r2
 80061ca:	4619      	mov	r1, r3
 80061cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061d2:	4413      	add	r3, r2
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	f008 fa94 	bl	800e704 <__adddf3>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4610      	mov	r0, r2
 80061e2:	4619      	mov	r1, r3
 80061e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061e8:	f008 fa8a 	bl	800e700 <__aeabi_dsub>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4610      	mov	r0, r2
 80061f2:	4619      	mov	r1, r3
 80061f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061f8:	f008 fc36 	bl	800ea68 <__aeabi_dmul>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4610      	mov	r0, r2
 8006202:	4619      	mov	r1, r3
 8006204:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006208:	f008 fa7c 	bl	800e704 <__adddf3>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
}
 8006210:	4610      	mov	r0, r2
 8006212:	4619      	mov	r1, r3
 8006214:	3748      	adds	r7, #72	; 0x48
 8006216:	46bd      	mov	sp, r7
 8006218:	bdb0      	pop	{r4, r5, r7, pc}
 800621a:	bf00      	nop

0800621c <VCU_initialize>:


  /* Model initialize function */
  
    void VCU_initialize(void)
  { 
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
    
    
        /* Registration code */
          
  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 8006220:	2008      	movs	r0, #8
 8006222:	f000 f8c5 	bl	80063b0 <rt_InitInfAndNaN>
  

        
            
            /* initialize error status */
            rtmSetErrorStatus(VCU_M, (NULL));
 8006226:	4b09      	ldr	r3, [pc, #36]	; (800624c <VCU_initialize+0x30>)
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]

    /* block I/O */
    
      
        
        (void) memset(((void *) &VCU_B), 0,
 800622c:	4808      	ldr	r0, [pc, #32]	; (8006250 <VCU_initialize+0x34>)
 800622e:	2100      	movs	r1, #0
 8006230:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8006234:	f008 ff19 	bl	800f06a <memset>
    
        

    
        
                    (void) memset((void *)&VCU_DW,  0,
 8006238:	4806      	ldr	r0, [pc, #24]	; (8006254 <VCU_initialize+0x38>)
 800623a:	2100      	movs	r1, #0
 800623c:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8006240:	f008 ff13 	bl	800f06a <memset>



/* SystemInitialize for Atomic SubSystem: '<Root>/Transmission' */

/*@[2a649*/      FUNC_Transmission_Init();      
 8006244:	f7fd f924 	bl	8003490 <FUNC_Transmission_Init>

      
  


  }
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20001050 	.word	0x20001050
 8006250:	200008c8 	.word	0x200008c8
 8006254:	20001058 	.word	0x20001058

08006258 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800625e:	2340      	movs	r3, #64	; 0x40
 8006260:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 8006262:	f04f 0200 	mov.w	r2, #0
 8006266:	f04f 0300 	mov.w	r3, #0
 800626a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b20      	cmp	r3, #32
 8006272:	d10a      	bne.n	800628a <rtGetInf+0x32>
    inf = rtGetInfF();
 8006274:	f000 f81a 	bl	80062ac <rtGetInfF>
 8006278:	4603      	mov	r3, r0
 800627a:	4618      	mov	r0, r3
 800627c:	f008 fba0 	bl	800e9c0 <__aeabi_f2d>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8006288:	e007      	b.n	800629a <rtGetInf+0x42>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 800628a:	4b07      	ldr	r3, [pc, #28]	; (80062a8 <rtGetInf+0x50>)
 800628c:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800628e:	2300      	movs	r3, #0
 8006290:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 8006292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006296:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 800629a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800629e:	4610      	mov	r0, r2
 80062a0:	4619      	mov	r1, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	7ff00000 	.word	0x7ff00000

080062ac <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 80062b2:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80062b6:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 80062b8:	687b      	ldr	r3, [r7, #4]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop

080062c8 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80062ce:	2340      	movs	r3, #64	; 0x40
 80062d0:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 80062d2:	f04f 0200 	mov.w	r2, #0
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	d10a      	bne.n	80062fa <rtGetMinusInf+0x32>
    minf = rtGetMinusInfF();
 80062e4:	f000 f81a 	bl	800631c <rtGetMinusInfF>
 80062e8:	4603      	mov	r3, r0
 80062ea:	4618      	mov	r0, r3
 80062ec:	f008 fb68 	bl	800e9c0 <__aeabi_f2d>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80062f8:	e007      	b.n	800630a <rtGetMinusInf+0x42>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 80062fa:	4b07      	ldr	r3, [pc, #28]	; (8006318 <rtGetMinusInf+0x50>)
 80062fc:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 80062fe:	2300      	movs	r3, #0
 8006300:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 8006302:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006306:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 800630a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800630e:	4610      	mov	r0, r2
 8006310:	4619      	mov	r1, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	fff00000 	.word	0xfff00000

0800631c <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 8006322:	4b04      	ldr	r3, [pc, #16]	; (8006334 <rtGetMinusInfF+0x18>)
 8006324:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 8006326:	687b      	ldr	r3, [r7, #4]
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	ff800000 	.word	0xff800000

08006338 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800633e:	2340      	movs	r3, #64	; 0x40
 8006340:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	f04f 0300 	mov.w	r3, #0
 800634a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b20      	cmp	r3, #32
 8006352:	d10a      	bne.n	800636a <rtGetNaN+0x32>
    nan = rtGetNaNF();
 8006354:	f000 f81a 	bl	800638c <rtGetNaNF>
 8006358:	4603      	mov	r3, r0
 800635a:	4618      	mov	r0, r3
 800635c:	f008 fb30 	bl	800e9c0 <__aeabi_f2d>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8006368:	e007      	b.n	800637a <rtGetNaN+0x42>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 800636a:	4b07      	ldr	r3, [pc, #28]	; (8006388 <rtGetNaN+0x50>)
 800636c:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800636e:	2300      	movs	r3, #0
 8006370:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 8006372:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006376:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 800637a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800637e:	4610      	mov	r0, r2
 8006380:	4619      	mov	r1, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	fff80000 	.word	0xfff80000

0800638c <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 8006392:	f04f 0300 	mov.w	r3, #0
 8006396:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 8006398:	4b04      	ldr	r3, [pc, #16]	; (80063ac <rtGetNaNF+0x20>)
 800639a:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 800639c:	687b      	ldr	r3, [r7, #4]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	ffc00000 	.word	0xffc00000

080063b0 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 80063b8:	f7ff ffbe 	bl	8006338 <rtGetNaN>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	4911      	ldr	r1, [pc, #68]	; (8006408 <rt_InitInfAndNaN+0x58>)
 80063c2:	e9c1 2300 	strd	r2, r3, [r1]
  rtNaNF = rtGetNaNF();
 80063c6:	f7ff ffe1 	bl	800638c <rtGetNaNF>
 80063ca:	4602      	mov	r2, r0
 80063cc:	4b0f      	ldr	r3, [pc, #60]	; (800640c <rt_InitInfAndNaN+0x5c>)
 80063ce:	601a      	str	r2, [r3, #0]
  rtInf = rtGetInf();
 80063d0:	f7ff ff42 	bl	8006258 <rtGetInf>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	490d      	ldr	r1, [pc, #52]	; (8006410 <rt_InitInfAndNaN+0x60>)
 80063da:	e9c1 2300 	strd	r2, r3, [r1]
  rtInfF = rtGetInfF();
 80063de:	f7ff ff65 	bl	80062ac <rtGetInfF>
 80063e2:	4602      	mov	r2, r0
 80063e4:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <rt_InitInfAndNaN+0x64>)
 80063e6:	601a      	str	r2, [r3, #0]
  rtMinusInf = rtGetMinusInf();
 80063e8:	f7ff ff6e 	bl	80062c8 <rtGetMinusInf>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4909      	ldr	r1, [pc, #36]	; (8006418 <rt_InitInfAndNaN+0x68>)
 80063f2:	e9c1 2300 	strd	r2, r3, [r1]
  rtMinusInfF = rtGetMinusInfF();
 80063f6:	f7ff ff91 	bl	800631c <rtGetMinusInfF>
 80063fa:	4602      	mov	r2, r0
 80063fc:	4b07      	ldr	r3, [pc, #28]	; (800641c <rt_InitInfAndNaN+0x6c>)
 80063fe:	601a      	str	r2, [r3, #0]
}
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	200011b8 	.word	0x200011b8
 800640c:	200011a8 	.word	0x200011a8
 8006410:	200011b0 	.word	0x200011b0
 8006414:	200011ac 	.word	0x200011ac
 8006418:	200011c0 	.word	0x200011c0
 800641c:	200011c8 	.word	0x200011c8

08006420 <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800642a:	4b0d      	ldr	r3, [pc, #52]	; (8006460 <rtIsInf+0x40>)
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006434:	f008 fd80 	bl	800ef38 <__aeabi_dcmpeq>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d109      	bne.n	8006452 <rtIsInf+0x32>
 800643e:	4b09      	ldr	r3, [pc, #36]	; (8006464 <rtIsInf+0x44>)
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006448:	f008 fd76 	bl	800ef38 <__aeabi_dcmpeq>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <rtIsInf+0x36>
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <rtIsInf+0x38>
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	200011b0 	.word	0x200011b0
 8006464:	200011c0 	.word	0x200011c0

08006468 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value!=value) ? 1U : 0U);
 8006472:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800647a:	f008 fd5d 	bl	800ef38 <__aeabi_dcmpeq>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <rtIsNaN+0x20>
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <rtIsNaN+0x22>
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop

08006494 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a05      	ldr	r2, [pc, #20]	; (80064b4 <XMC_ERU_Enable+0x20>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d103      	bne.n	80064ac <XMC_ERU_Enable+0x18>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 80064a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80064a8:	f000 f99a 	bl	80067e0 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40044000 	.word	0x40044000

080064b8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	460b      	mov	r3, r1
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80064c6:	7afb      	ldrb	r3, [r7, #11]
 80064c8:	089b      	lsrs	r3, r3, #2
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	4618      	mov	r0, r3
 80064ce:	7afb      	ldrb	r3, [r7, #11]
 80064d0:	089b      	lsrs	r3, r3, #2
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	461a      	mov	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3204      	adds	r2, #4
 80064da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064de:	7afb      	ldrb	r3, [r7, #11]
 80064e0:	f003 0303 	and.w	r3, r3, #3
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	4619      	mov	r1, r3
 80064e8:	23f8      	movs	r3, #248	; 0xf8
 80064ea:	408b      	lsls	r3, r1
 80064ec:	43db      	mvns	r3, r3
 80064ee:	ea02 0103 	and.w	r1, r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	1d02      	adds	r2, r0, #4
 80064f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80064fe:	7afb      	ldrb	r3, [r7, #11]
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	4619      	mov	r1, r3
 8006504:	2303      	movs	r3, #3
 8006506:	408b      	lsls	r3, r1
 8006508:	43db      	mvns	r3, r3
 800650a:	401a      	ands	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4a3a      	ldr	r2, [pc, #232]	; (80065fc <XMC_GPIO_Init+0x144>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d003      	beq.n	8006520 <XMC_GPIO_Init+0x68>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4a39      	ldr	r2, [pc, #228]	; (8006600 <XMC_GPIO_Init+0x148>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d10a      	bne.n	8006536 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006524:	7afb      	ldrb	r3, [r7, #11]
 8006526:	2101      	movs	r1, #1
 8006528:	fa01 f303 	lsl.w	r3, r1, r3
 800652c:	43db      	mvns	r3, r3
 800652e:	401a      	ands	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	661a      	str	r2, [r3, #96]	; 0x60
 8006534:	e042      	b.n	80065bc <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	b25b      	sxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	da3c      	bge.n	80065bc <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	7afb      	ldrb	r3, [r7, #11]
 8006548:	409a      	lsls	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800654e:	7afb      	ldrb	r3, [r7, #11]
 8006550:	08db      	lsrs	r3, r3, #3
 8006552:	b2db      	uxtb	r3, r3
 8006554:	4618      	mov	r0, r3
 8006556:	7afb      	ldrb	r3, [r7, #11]
 8006558:	08db      	lsrs	r3, r3, #3
 800655a:	b2db      	uxtb	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3210      	adds	r2, #16
 8006562:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006566:	7afb      	ldrb	r3, [r7, #11]
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4619      	mov	r1, r3
 8006570:	2307      	movs	r3, #7
 8006572:	408b      	lsls	r3, r1
 8006574:	43db      	mvns	r3, r3
 8006576:	ea02 0103 	and.w	r1, r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f100 0210 	add.w	r2, r0, #16
 8006580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8006584:	7afb      	ldrb	r3, [r7, #11]
 8006586:	08db      	lsrs	r3, r3, #3
 8006588:	b2db      	uxtb	r3, r3
 800658a:	4618      	mov	r0, r3
 800658c:	7afb      	ldrb	r3, [r7, #11]
 800658e:	08db      	lsrs	r3, r3, #3
 8006590:	b2db      	uxtb	r3, r3
 8006592:	461a      	mov	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	3210      	adds	r2, #16
 8006598:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	7a1b      	ldrb	r3, [r3, #8]
 80065a0:	4619      	mov	r1, r3
 80065a2:	7afb      	ldrb	r3, [r7, #11]
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	fa01 f303 	lsl.w	r3, r1, r3
 80065ae:	ea42 0103 	orr.w	r1, r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f100 0210 	add.w	r2, r0, #16
 80065b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80065bc:	7afb      	ldrb	r3, [r7, #11]
 80065be:	089b      	lsrs	r3, r3, #2
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	4618      	mov	r0, r3
 80065c4:	7afb      	ldrb	r3, [r7, #11]
 80065c6:	089b      	lsrs	r3, r3, #2
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	461a      	mov	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3204      	adds	r2, #4
 80065d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	4619      	mov	r1, r3
 80065da:	7afb      	ldrb	r3, [r7, #11]
 80065dc:	f003 0303 	and.w	r3, r3, #3
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	fa01 f303 	lsl.w	r3, r1, r3
 80065e6:	ea42 0103 	orr.w	r1, r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	1d02      	adds	r2, r0, #4
 80065ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	48028e00 	.word	0x48028e00
 8006600:	48028f00 	.word	0x48028f00

08006604 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006608:	4b03      	ldr	r3, [pc, #12]	; (8006618 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 800660a:	681b      	ldr	r3, [r3, #0]
}
 800660c:	4618      	mov	r0, r3
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	2000ffc0 	.word	0x2000ffc0

0800661c <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8006620:	4b03      	ldr	r3, [pc, #12]	; (8006630 <XMC_SCU_GetMirrorStatus+0x14>)
 8006622:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8006626:	4618      	mov	r0, r3
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	50004000 	.word	0x50004000

08006634 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 800663c:	f7f9 fe4a 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8006640:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <XMC_SCU_lDelay+0x3c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a0b      	ldr	r2, [pc, #44]	; (8006674 <XMC_SCU_lDelay+0x40>)
 8006646:	fba2 2303 	umull	r2, r3, r2, r3
 800664a:	0c9a      	lsrs	r2, r3, #18
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	fb02 f303 	mul.w	r3, r2, r3
 8006652:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8006654:	2300      	movs	r3, #0
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	e003      	b.n	8006662 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800665a:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3301      	adds	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	429a      	cmp	r2, r3
 8006668:	d3f7      	bcc.n	800665a <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	2000ffc0 	.word	0x2000ffc0
 8006674:	431bde83 	.word	0x431bde83

08006678 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8006680:	4905      	ldr	r1, [pc, #20]	; (8006698 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4313      	orrs	r3, r2
 800668a:	608b      	str	r3, [r1, #8]
}
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	50004074 	.word	0x50004074

0800669c <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 80066a0:	4b03      	ldr	r3, [pc, #12]	; (80066b0 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 80066a2:	685b      	ldr	r3, [r3, #4]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	50004074 	.word	0x50004074

080066b4 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80066bc:	4a03      	ldr	r2, [pc, #12]	; (80066cc <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	60d3      	str	r3, [r2, #12]
}
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	50004074 	.word	0x50004074

080066d0 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80066d0:	b5b0      	push	{r4, r5, r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80066d8:	2000      	movs	r0, #0
 80066da:	f000 f8ad 	bl	8006838 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80066de:	f000 fa3f 	bl	8006b60 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	79db      	ldrb	r3, [r3, #7]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80066ea:	f000 fa77 	bl	8006bdc <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80066ee:	bf00      	nop
 80066f0:	f000 fa62 	bl	8006bb8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f083 0301 	eor.w	r3, r3, #1
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1f7      	bne.n	80066f0 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	7a5b      	ldrb	r3, [r3, #9]
 8006704:	4618      	mov	r0, r3
 8006706:	f000 f911 	bl	800692c <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 800670a:	bf00      	nop
 800670c:	f7ff ff86 	bl	800661c <XMC_SCU_GetMirrorStatus>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1fa      	bne.n	800670c <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	7a1b      	ldrb	r3, [r3, #8]
 800671a:	4618      	mov	r0, r3
 800671c:	f000 f9fa 	bl	8006b14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	7c1b      	ldrb	r3, [r3, #16]
 8006724:	4618      	mov	r0, r3
 8006726:	f000 f91f 	bl	8006968 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	7c5b      	ldrb	r3, [r3, #17]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 f942 	bl	80069b8 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	7c9b      	ldrb	r3, [r3, #18]
 8006738:	4618      	mov	r0, r3
 800673a:	f000 f929 	bl	8006990 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	7cdb      	ldrb	r3, [r3, #19]
 8006742:	4618      	mov	r0, r3
 8006744:	f000 f94c 	bl	80069e0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	799b      	ldrb	r3, [r3, #6]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8006750:	f000 fa7c 	bl	8006c4c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8006754:	bf00      	nop
 8006756:	f000 faa1 	bl	8006c9c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800675a:	4603      	mov	r3, r0
 800675c:	f083 0301 	eor.w	r3, r3, #1
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1f7      	bne.n	8006756 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	78db      	ldrb	r3, [r3, #3]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d102      	bne.n	8006774 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 800676e:	f000 fab9 	bl	8006ce4 <XMC_SCU_CLOCK_DisableSystemPll>
 8006772:	e014      	b.n	800679e <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8006774:	f000 faa6 	bl	8006cc4 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	8899      	ldrh	r1, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8006784:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800678a:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	4608      	mov	r0, r1
 8006794:	4611      	mov	r1, r2
 8006796:	462a      	mov	r2, r5
 8006798:	4623      	mov	r3, r4
 800679a:	f000 fab3 	bl	8006d04 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a6:	d103      	bne.n	80067b0 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 80067a8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80067ac:	f000 f844 	bl	8006838 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 80067b0:	f7f9 fd90 	bl	80002d4 <SystemCoreClockUpdate>
}
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bdb0      	pop	{r4, r5, r7, pc}
 80067ba:	bf00      	nop

080067bc <XMC_SCU_INTERRUPT_EnableNmiRequest>:
  SCU_PARITY->PETE &= (uint32_t)~memory; 
}

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 80067c4:	4905      	ldr	r1, [pc, #20]	; (80067dc <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 80067c6:	4b05      	ldr	r3, [pc, #20]	; (80067dc <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 80067c8:	695a      	ldr	r2, [r3, #20]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	614b      	str	r3, [r1, #20]
}
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	50004074 	.word	0x50004074

080067e0 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	0f1b      	lsrs	r3, r3, #28
 80067ec:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80067f4:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4613      	mov	r3, r2
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	4413      	add	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	461a      	mov	r2, r3
 8006802:	4b04      	ldr	r3, [pc, #16]	; (8006814 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8006804:	4413      	add	r3, r2
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	601a      	str	r2, [r3, #0]
}
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	50004414 	.word	0x50004414

08006818 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800681c:	f7ff fef2 	bl	8006604 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8006820:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8006822:	4b04      	ldr	r3, [pc, #16]	; (8006834 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8006824:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 800682e:	4618      	mov	r0, r3
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	50004600 	.word	0x50004600

08006838 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8006840:	4906      	ldr	r1, [pc, #24]	; (800685c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8006842:	4b06      	ldr	r3, [pc, #24]	; (800685c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4313      	orrs	r3, r2
 800684e:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	50004600 	.word	0x50004600

08006860 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8006868:	4906      	ldr	r1, [pc, #24]	; (8006884 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800686a:	4b06      	ldr	r3, [pc, #24]	; (8006884 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4313      	orrs	r3, r2
 8006876:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	50004600 	.word	0x50004600

08006888 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8006890:	4906      	ldr	r1, [pc, #24]	; (80068ac <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8006892:	4b06      	ldr	r3, [pc, #24]	; (80068ac <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4313      	orrs	r3, r2
 800689e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	50004600 	.word	0x50004600

080068b0 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80068ba:	88fb      	ldrh	r3, [r7, #6]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d108      	bne.n	80068d2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80068c0:	4a0a      	ldr	r2, [pc, #40]	; (80068ec <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80068c2:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068ca:	f023 0301 	bic.w	r3, r3, #1
 80068ce:	60d3      	str	r3, [r2, #12]
 80068d0:	e007      	b.n	80068e2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80068d2:	4a06      	ldr	r2, [pc, #24]	; (80068ec <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80068d4:	4b05      	ldr	r3, [pc, #20]	; (80068ec <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068dc:	f043 0301 	orr.w	r3, r3, #1
 80068e0:	60d3      	str	r3, [r2, #12]
  }
}
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	50004710 	.word	0x50004710

080068f0 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80068fa:	bf00      	nop
 80068fc:	4b09      	ldr	r3, [pc, #36]	; (8006924 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80068fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1f8      	bne.n	80068fc <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800690a:	4907      	ldr	r1, [pc, #28]	; (8006928 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800690c:	4b06      	ldr	r3, [pc, #24]	; (8006928 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8006914:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8006916:	4313      	orrs	r3, r2
 8006918:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	50004000 	.word	0x50004000
 8006928:	50004300 	.word	0x50004300

0800692c <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	4603      	mov	r3, r0
 8006934:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8006936:	bf00      	nop
 8006938:	4b09      	ldr	r3, [pc, #36]	; (8006960 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800693a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1f8      	bne.n	8006938 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8006946:	4907      	ldr	r1, [pc, #28]	; (8006964 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8006948:	4b06      	ldr	r3, [pc, #24]	; (8006964 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8006950:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8006952:	4313      	orrs	r3, r2
 8006954:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	50004000 	.word	0x50004000
 8006964:	50004300 	.word	0x50004300

08006968 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8006970:	4906      	ldr	r1, [pc, #24]	; (800698c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8006972:	4b06      	ldr	r3, [pc, #24]	; (800698c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800697e:	4313      	orrs	r3, r2
 8006980:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	50004600 	.word	0x50004600

08006990 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8006998:	4906      	ldr	r1, [pc, #24]	; (80069b4 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800699a:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80069a6:	4313      	orrs	r3, r2
 80069a8:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	50004600 	.word	0x50004600

080069b8 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80069c0:	4906      	ldr	r1, [pc, #24]	; (80069dc <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80069c2:	4b06      	ldr	r3, [pc, #24]	; (80069dc <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80069ce:	4313      	orrs	r3, r2
 80069d0:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	50004600 	.word	0x50004600

080069e0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80069e8:	4906      	ldr	r1, [pc, #24]	; (8006a04 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80069ea:	4b06      	ldr	r3, [pc, #24]	; (8006a04 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80069f6:	4313      	orrs	r3, r2
 80069f8:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	50004600 	.word	0x50004600

08006a08 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8006a10:	4906      	ldr	r1, [pc, #24]	; (8006a2c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8006a12:	4b06      	ldr	r3, [pc, #24]	; (8006a2c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	50004600 	.word	0x50004600

08006a30 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8006a38:	4906      	ldr	r1, [pc, #24]	; (8006a54 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8006a3a:	4b06      	ldr	r3, [pc, #24]	; (8006a54 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8006a46:	4313      	orrs	r3, r2
 8006a48:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	50004600 	.word	0x50004600

08006a58 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8006a60:	4906      	ldr	r1, [pc, #24]	; (8006a7c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8006a62:	4b06      	ldr	r3, [pc, #24]	; (8006a7c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	50004600 	.word	0x50004600

08006a80 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	4603      	mov	r3, r0
 8006a88:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8006a8a:	4a04      	ldr	r2, [pc, #16]	; (8006a9c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
 8006a8e:	6053      	str	r3, [r2, #4]
}
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	50004600 	.word	0x50004600

08006aa0 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8006aaa:	4a19      	ldr	r2, [pc, #100]	; (8006b10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006aac:	4b18      	ldr	r3, [pc, #96]	; (8006b10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8006ab6:	4a16      	ldr	r2, [pc, #88]	; (8006b10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006ab8:	4b15      	ldr	r3, [pc, #84]	; (8006b10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	f043 0310 	orr.w	r3, r3, #16
 8006ac0:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8006ac2:	4913      	ldr	r1, [pc, #76]	; (8006b10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8006ad4:	4a0e      	ldr	r2, [pc, #56]	; (8006b10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006ad6:	4b0e      	ldr	r3, [pc, #56]	; (8006b10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ade:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8006ae0:	4a0b      	ldr	r2, [pc, #44]	; (8006b10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f023 0310 	bic.w	r3, r3, #16
 8006aea:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8006aec:	4a08      	ldr	r2, [pc, #32]	; (8006b10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006aee:	4b08      	ldr	r3, [pc, #32]	; (8006b10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006af6:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8006af8:	bf00      	nop
 8006afa:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f003 0304 	and.w	r3, r3, #4
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0f9      	beq.n	8006afa <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	50004710 	.word	0x50004710

08006b14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8006b1e:	4a0f      	ldr	r2, [pc, #60]	; (8006b5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006b20:	4b0e      	ldr	r3, [pc, #56]	; (8006b5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b28:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d10e      	bne.n	8006b4e <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8006b30:	4a0a      	ldr	r2, [pc, #40]	; (8006b5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006b32:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b3a:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8006b3c:	2064      	movs	r0, #100	; 0x64
 8006b3e:	f7ff fd79 	bl	8006634 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8006b42:	4a06      	ldr	r2, [pc, #24]	; (8006b5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006b44:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b4c:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8006b4e:	2064      	movs	r0, #100	; 0x64
 8006b50:	f7ff fd70 	bl	8006634 <XMC_SCU_lDelay>
}
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	50004710 	.word	0x50004710

08006b60 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8006b60:	b480      	push	{r7}
 8006b62:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8006b64:	4b12      	ldr	r3, [pc, #72]	; (8006bb0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d109      	bne.n	8006b84 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8006b70:	4b0f      	ldr	r3, [pc, #60]	; (8006bb0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8006b72:	2201      	movs	r2, #1
 8006b74:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8006b76:	bf00      	nop
 8006b78:	4b0d      	ldr	r3, [pc, #52]	; (8006bb0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d0f9      	beq.n	8006b78 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8006b84:	4b0b      	ldr	r3, [pc, #44]	; (8006bb4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8006b90:	4b08      	ldr	r3, [pc, #32]	; (8006bb4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8006b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b96:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8006b98:	bf00      	nop
 8006b9a:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1f9      	bne.n	8006b9a <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	50004200 	.word	0x50004200
 8006bb4:	50004400 	.word	0x50004400

08006bb8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8006bbc:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	bf0c      	ite	eq
 8006bc8:	2301      	moveq	r3, #1
 8006bca:	2300      	movne	r3, #0
 8006bcc:	b2db      	uxtb	r3, r3
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	50004300 	.word	0x50004300

08006bdc <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8006be0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006be4:	f7ff fd66 	bl	80066b4 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8006be8:	4a17      	ldr	r2, [pc, #92]	; (8006c48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006bea:	4b17      	ldr	r3, [pc, #92]	; (8006c48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006bf2:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8006bf4:	bf00      	nop
 8006bf6:	f7ff fd51 	bl	800669c <XMC_SCU_INTERUPT_GetEventStatus>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0f8      	beq.n	8006bf6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8006c04:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006c08:	f7ff fd54 	bl	80066b4 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8006c0c:	4b0e      	ldr	r3, [pc, #56]	; (8006c48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006c0e:	2208      	movs	r2, #8
 8006c10:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8006c12:	bf00      	nop
 8006c14:	f7ff fd42 	bl	800669c <XMC_SCU_INTERUPT_GetEventStatus>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0f8      	beq.n	8006c14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8006c22:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006c26:	f7ff fd45 	bl	80066b4 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8006c2a:	4a07      	ldr	r2, [pc, #28]	; (8006c48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006c2c:	4b06      	ldr	r3, [pc, #24]	; (8006c48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f043 0308 	orr.w	r3, r3, #8
 8006c34:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8006c36:	bf00      	nop
 8006c38:	f7ff fd30 	bl	800669c <XMC_SCU_INTERUPT_GetEventStatus>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0f8      	beq.n	8006c38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	50004300 	.word	0x50004300

08006c4c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8006c4c:	b5b0      	push	{r4, r5, r7, lr}
 8006c4e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8006c50:	4a0f      	ldr	r2, [pc, #60]	; (8006c90 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8006c52:	4b0f      	ldr	r3, [pc, #60]	; (8006c90 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c5a:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8006c5c:	4d0d      	ldr	r5, [pc, #52]	; (8006c94 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	; (8006c94 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8006c66:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8006c6a:	f004 f9a5 	bl	800afb8 <OSCHP_GetFrequency>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	4b09      	ldr	r3, [pc, #36]	; (8006c98 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8006c72:	fba3 2302 	umull	r2, r3, r3, r2
 8006c76:	0d1b      	lsrs	r3, r3, #20
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8006c7c:	4323      	orrs	r3, r4
 8006c7e:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8006c80:	4a03      	ldr	r2, [pc, #12]	; (8006c90 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8006c82:	4b03      	ldr	r3, [pc, #12]	; (8006c90 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c8a:	6053      	str	r3, [r2, #4]
}
 8006c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	50004710 	.word	0x50004710
 8006c94:	50004700 	.word	0x50004700
 8006c98:	6b5fca6b 	.word	0x6b5fca6b

08006c9c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8006ca0:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8006ca8:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8006cac:	bf0c      	ite	eq
 8006cae:	2301      	moveq	r3, #1
 8006cb0:	2300      	movne	r3, #0
 8006cb2:	b2db      	uxtb	r3, r3
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	50004710 	.word	0x50004710

08006cc4 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8006cc8:	4a05      	ldr	r2, [pc, #20]	; (8006ce0 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8006cca:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd2:	f023 0302 	bic.w	r3, r3, #2
 8006cd6:	6053      	str	r3, [r2, #4]
}
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	50004710 	.word	0x50004710

08006ce4 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8006ce8:	4a05      	ldr	r2, [pc, #20]	; (8006d00 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8006cea:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cf2:	f043 0302 	orr.w	r3, r3, #2
 8006cf6:	6053      	str	r3, [r2, #4]
}
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	50004710 	.word	0x50004710

08006d04 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60ba      	str	r2, [r7, #8]
 8006d0c:	607b      	str	r3, [r7, #4]
 8006d0e:	4603      	mov	r3, r0
 8006d10:	81fb      	strh	r3, [r7, #14]
 8006d12:	460b      	mov	r3, r1
 8006d14:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8006d16:	89fb      	ldrh	r3, [r7, #14]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7ff fdc9 	bl	80068b0 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8006d1e:	7b7b      	ldrb	r3, [r7, #13]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	f040 8084 	bne.w	8006e2e <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8006d26:	89fb      	ldrh	r3, [r7, #14]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d109      	bne.n	8006d40 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8006d2c:	f004 f944 	bl	800afb8 <OSCHP_GetFrequency>
 8006d30:	4602      	mov	r2, r0
 8006d32:	4b4b      	ldr	r3, [pc, #300]	; (8006e60 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8006d34:	fba3 2302 	umull	r2, r3, r3, r2
 8006d38:	0c9b      	lsrs	r3, r3, #18
 8006d3a:	059b      	lsls	r3, r3, #22
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	e002      	b.n	8006d46 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8006d40:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8006d44:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	fb02 f203 	mul.w	r2, r2, r3
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d54:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	4a42      	ldr	r2, [pc, #264]	; (8006e64 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8006d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5e:	091b      	lsrs	r3, r3, #4
 8006d60:	0d9b      	lsrs	r3, r3, #22
 8006d62:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8006d64:	4a40      	ldr	r2, [pc, #256]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d66:	4b40      	ldr	r3, [pc, #256]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f043 0301 	orr.w	r3, r3, #1
 8006d6e:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8006d70:	4a3d      	ldr	r2, [pc, #244]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d72:	4b3d      	ldr	r3, [pc, #244]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f043 0310 	orr.w	r3, r3, #16
 8006d7a:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8006d7c:	493a      	ldr	r1, [pc, #232]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d7e:	4b3a      	ldr	r3, [pc, #232]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	4b3a      	ldr	r3, [pc, #232]	; (8006e6c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8006d84:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	3a01      	subs	r2, #1
 8006d8a:	0212      	lsls	r2, r2, #8
 8006d8c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	3b01      	subs	r3, #1
 8006d92:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006d94:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8006da0:	4a31      	ldr	r2, [pc, #196]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006da2:	4b31      	ldr	r3, [pc, #196]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006daa:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8006dac:	4a2e      	ldr	r2, [pc, #184]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006dae:	4b2e      	ldr	r3, [pc, #184]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f023 0310 	bic.w	r3, r3, #16
 8006db6:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8006db8:	4a2b      	ldr	r2, [pc, #172]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006dba:	4b2b      	ldr	r3, [pc, #172]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dc2:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8006dc4:	bf00      	nop
 8006dc6:	4b28      	ldr	r3, [pc, #160]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0f9      	beq.n	8006dc6 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8006dd2:	4a25      	ldr	r2, [pc, #148]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006dd4:	4b24      	ldr	r3, [pc, #144]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f023 0301 	bic.w	r3, r3, #1
 8006ddc:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8006dde:	bf00      	nop
 8006de0:	4b21      	ldr	r3, [pc, #132]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1f9      	bne.n	8006de0 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	4a20      	ldr	r2, [pc, #128]	; (8006e70 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8006df0:	fba2 2303 	umull	r2, r3, r2, r3
 8006df4:	095b      	lsrs	r3, r3, #5
 8006df6:	0d9b      	lsrs	r3, r3, #22
 8006df8:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8006dfa:	6a3a      	ldr	r2, [r7, #32]
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d202      	bcs.n	8006e08 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8006e02:	6938      	ldr	r0, [r7, #16]
 8006e04:	f000 f838 	bl	8006e78 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	085b      	lsrs	r3, r3, #1
 8006e0c:	4a19      	ldr	r2, [pc, #100]	; (8006e74 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8006e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e12:	095b      	lsrs	r3, r3, #5
 8006e14:	0d9b      	lsrs	r3, r3, #22
 8006e16:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8006e18:	6a3a      	ldr	r2, [r7, #32]
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d202      	bcs.n	8006e26 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8006e20:	6938      	ldr	r0, [r7, #16]
 8006e22:	f000 f829 	bl	8006e78 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8006e26:	6a38      	ldr	r0, [r7, #32]
 8006e28:	f000 f826 	bl	8006e78 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8006e2c:	e015      	b.n	8006e5a <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8006e2e:	490e      	ldr	r1, [pc, #56]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e30:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8006e40:	4a09      	ldr	r2, [pc, #36]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e42:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8006e4c:	bf00      	nop
 8006e4e:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0f9      	beq.n	8006e4e <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	431bde83 	.word	0x431bde83
 8006e64:	aaaaaaab 	.word	0xaaaaaaab
 8006e68:	50004710 	.word	0x50004710
 8006e6c:	f08080ff 	.word	0xf08080ff
 8006e70:	88888889 	.word	0x88888889
 8006e74:	b60b60b7 	.word	0xb60b60b7

08006e78 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8006e80:	4907      	ldr	r1, [pc, #28]	; (8006ea0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8006e82:	4b07      	ldr	r3, [pc, #28]	; (8006ea0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8006e90:	4313      	orrs	r3, r2
 8006e92:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8006e94:	2032      	movs	r0, #50	; 0x32
 8006e96:	f7ff fbcd 	bl	8006634 <XMC_SCU_lDelay>
}
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	50004710 	.word	0x50004710

08006ea4 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8006eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bf0c      	ite	eq
 8006eba:	2301      	moveq	r3, #1
 8006ebc:	2300      	movne	r3, #0
 8006ebe:	b2db      	uxtb	r3, r3
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	4608      	mov	r0, r1
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	461a      	mov	r2, r3
 8006eda:	4603      	mov	r3, r0
 8006edc:	70fb      	strb	r3, [r7, #3]
 8006ede:	460b      	mov	r3, r1
 8006ee0:	70bb      	strb	r3, [r7, #2]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8006ee6:	78fa      	ldrb	r2, [r7, #3]
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8006ee8:	78bb      	ldrb	r3, [r7, #2]
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8006ef0:	431a      	orrs	r2, r3
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8006ef2:	787b      	ldrb	r3, [r7, #1]
 8006ef4:	061b      	lsls	r3, r3, #24
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8006ef6:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	601a      	str	r2, [r3, #0]
}
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop

08006f28 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	601a      	str	r2, [r3, #0]
}
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop

08006f48 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4293      	cmp	r3, r2
 8006f58:	bf38      	it	cc
 8006f5a:	4613      	movcc	r3, r2
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4293      	cmp	r3, r2
 8006f78:	bf28      	it	cs
 8006f7a:	4613      	movcs	r3, r2
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
                                               const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	6852      	ldr	r2, [r2, #4]
 8006f9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f9e:	fb02 f201 	mul.w	r2, r2, r1
 8006fa2:	1a9b      	subs	r3, r3, r2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f040 808e 	bne.w	80070c6 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x13e>
  {
    uint32_t prescaler;
    uint32_t div8 = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fba:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 8006fbc:	2319      	movs	r3, #25
 8006fbe:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8006fc8:	e04b      	b.n	8007062 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xda>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fd2:	6979      	ldr	r1, [r7, #20]
 8006fd4:	fb01 f202 	mul.w	r2, r1, r2
 8006fd8:	1a9b      	subs	r3, r3, r2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d13e      	bne.n	800705c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
      {
    	  div8 = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fea:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d034      	beq.n	800705c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ff8:	d830      	bhi.n	800705c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
        {
          if (prescaler >= 64)
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	2b3f      	cmp	r3, #63	; 0x3f
 8006ffe:	d90a      	bls.n	8007016 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	f003 0307 	and.w	r3, r3, #7
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8a>
            {
              --ntq;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	3b01      	subs	r3, #1
 800700e:	617b      	str	r3, [r7, #20]
              continue;
 8007010:	e027      	b.n	8007062 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xda>
            }
            else
            {
              div8 = 1;
 8007012:	2301      	movs	r3, #1
 8007014:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	3b01      	subs	r3, #1
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	8912      	ldrh	r2, [r2, #8]
 800701e:	fb02 f303 	mul.w	r3, r2, r3
 8007022:	4a2b      	ldr	r2, [pc, #172]	; (80070d0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x148>)
 8007024:	fba2 2303 	umull	r2, r3, r2, r3
 8007028:	0b5b      	lsrs	r3, r3, #13
 800702a:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	2b02      	cmp	r3, #2
 800703a:	d90f      	bls.n	800705c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	2b0f      	cmp	r3, #15
 8007040:	d80c      	bhi.n	800705c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d909      	bls.n	800705c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
        		  (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b06      	cmp	r3, #6
 800704c:	d806      	bhi.n	800705c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	895b      	ldrh	r3, [r3, #10]
 8007052:	461a      	mov	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	429a      	cmp	r2, r3
 8007058:	d800      	bhi.n	800705c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
          {
            break;
 800705a:	e005      	b.n	8007068 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe0>
          }


        }
      }
      --ntq;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	3b01      	subs	r3, #1
 8007060:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b07      	cmp	r3, #7
 8007066:	d8b0      	bhi.n	8006fca <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x42>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2b07      	cmp	r3, #7
 800706c:	d92b      	bls.n	80070c6 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x13e>
    {


      XMC_CAN_NODE_EnableConfigurationChange(can_node);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff ff4a 	bl	8006f08 <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3b01      	subs	r3, #1
 8007078:	031b      	lsls	r3, r3, #12
 800707a:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	895b      	ldrh	r3, [r3, #10]
 8007082:	3b01      	subs	r3, #1
 8007084:	019b      	lsls	r3, r3, #6
 8007086:	b2db      	uxtb	r3, r3


      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8007088:	431a      	orrs	r2, r3
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	3b01      	subs	r3, #1
 800708e:	021b      	lsls	r3, r3, #8
 8007090:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8007094:	ea42 0103 	orr.w	r1, r2, r3
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	4613      	mov	r3, r2
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	4413      	add	r3, r2
 80070a0:	461a      	mov	r2, r3
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	40d3      	lsrs	r3, r2
 80070a6:	3b01      	subs	r3, #1
 80070a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 80070ac:	ea41 0203 	orr.w	r2, r1, r3
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	03db      	lsls	r3, r3, #15
 80070b4:	b29b      	uxth	r3, r3

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 80070b6:	431a      	orrs	r2, r3


      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	611a      	str	r2, [r3, #16]
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7ff ff33 	bl	8006f28 <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
 80070c2:	2300      	movs	r3, #0
 80070c4:	e000      	b.n	80070c8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x140>
    }
  }

  return XMC_CAN_STATUS_ERROR;
 80070c6:	2301      	movs	r3, #1
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3720      	adds	r7, #32
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	d1b71759 	.word	0xd1b71759

080070d4 <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	70fb      	strb	r3, [r7, #3]
 80070e0:	4613      	mov	r3, r2
 80070e2:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 80070e4:	bf00      	nop
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff fedc 	bl	8006ea4 <XMC_CAN_IsPanelControlReady>
 80070ec:	4603      	mov	r3, r0
 80070ee:	f083 0301 	eor.w	r3, r3, #1
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1f6      	bne.n	80070e6 <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	3301      	adds	r3, #1
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	78ba      	ldrb	r2, [r7, #2]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	2102      	movs	r1, #2
 8007104:	f7ff fee2 	bl	8006ecc <XMC_CAN_PanelControl>
}
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop

08007110 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8007118:	4809      	ldr	r0, [pc, #36]	; (8007140 <XMC_CAN_Enable+0x30>)
 800711a:	f7ff fb61 	bl	80067e0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f023 0201 	bic.w	r2, r3, #1
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 800712a:	bf00      	nop
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1f9      	bne.n	800712c <XMC_CAN_Enable+0x1c>
  {
    /*Do nothing*/
  };
}
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	10000010 	.word	0x10000010

08007144 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	70fb      	strb	r3, [r7, #3]
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop

0800715c <XMC_CAN_GetBaudrateClockFrequency>:
  return XMC_CAN_CANCLKSRC_FPERI;
#endif    
}

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
      frequency = 0;
      break;
  }
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8007164:	f7ff fb58 	bl	8006818 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8007168:	60f8      	str	r0, [r7, #12]
#endif  

  return frequency;
 800716a:	68fb      	ldr	r3, [r7, #12]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	460b      	mov	r3, r1
 800717e:	607a      	str	r2, [r7, #4]
 8007180:	72fb      	strb	r3, [r7, #11]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f7ff ffc4 	bl	8007110 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 8007188:	7afb      	ldrb	r3, [r7, #11]
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	4619      	mov	r1, r3
 800718e:	f7ff ffd9 	bl	8007144 <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f7ff ffe2 	bl	800715c <XMC_CAN_GetBaudrateClockFrequency>
 8007198:	61f8      	str	r0, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 800719a:	69fa      	ldr	r2, [r7, #28]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a2:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80071a6:	2000      	movs	r0, #0
 80071a8:	4619      	mov	r1, r3
 80071aa:	f7ff fecd 	bl	8006f48 <max>
 80071ae:	4603      	mov	r3, r0
 80071b0:	4618      	mov	r0, r3
 80071b2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80071b6:	f7ff fed7 	bl	8006f68 <min>
 80071ba:	61b8      	str	r0, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c8:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80071d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	60da      	str	r2, [r3, #12]

  return freq_n;
 80071ea:	697b      	ldr	r3, [r7, #20]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3720      	adds	r7, #32
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t reg;
  
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 8007204:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8007208:	095b      	lsrs	r3, r3, #5
 800720a:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	095b      	lsrs	r3, r3, #5
 8007210:	035a      	lsls	r2, r3, #13
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f003 031f 	and.w	r3, r3, #31
 8007218:	021b      	lsls	r3, r3, #8
 800721a:	4313      	orrs	r3, r2
 800721c:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	6812      	ldr	r2, [r2, #0]
 8007226:	6892      	ldr	r2, [r2, #8]
 8007228:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800722c:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	6812      	ldr	r2, [r2, #0]
 8007236:	6891      	ldr	r1, [r2, #8]
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	430a      	orrs	r2, r1
 800723c:	609a      	str	r2, [r3, #8]
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	79db      	ldrb	r3, [r3, #7]
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	d007      	beq.n	800725c <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	79db      	ldrb	r3, [r3, #7]
 8007250:	f003 0320 	and.w	r3, r3, #32
 8007254:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8007256:	2b00      	cmp	r3, #0
 8007258:	d100      	bne.n	800725c <XMC_CAN_MO_Config+0x68>
 800725a:	e060      	b.n	800731e <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8007260:	2b00      	cmp	r3, #0
 8007262:	d004      	beq.n	800726e <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8007268:	2b01      	cmp	r3, #1
 800726a:	d000      	beq.n	800726e <XMC_CAN_MO_Config+0x7a>
 800726c:	e057      	b.n	800731e <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2220      	movs	r2, #32
 8007274:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	79db      	ldrb	r3, [r3, #7]
 800727a:	f003 0320 	and.w	r3, r3, #32
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d128      	bne.n	80072d6 <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8007290:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800729a:	049b      	lsls	r3, r3, #18
 800729c:	461a      	mov	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80072b8:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80072c2:	049b      	lsls	r3, r3, #18
 80072c4:	461a      	mov	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	60da      	str	r2, [r3, #12]
 80072d4:	e009      	b.n	80072ea <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6852      	ldr	r2, [r2, #4]
 80072de:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	6892      	ldr	r2, [r2, #8]
 80072e8:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	7e1b      	ldrb	r3, [r3, #24]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d10c      	bne.n	800730c <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f81a 	bl	800732c <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007300:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a07      	ldr	r2, [pc, #28]	; (8007324 <XMC_CAN_MO_Config+0x130>)
 8007308:	61da      	str	r2, [r3, #28]
 800730a:	e008      	b.n	800731e <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007314:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a03      	ldr	r2, [pc, #12]	; (8007328 <XMC_CAN_MO_Config+0x134>)
 800731c:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	062000c0 	.word	0x062000c0
 8007328:	00a00640 	.word	0x00a00640

0800732c <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8007334:	2303      	movs	r3, #3
 8007336:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	7e1b      	ldrb	r3, [r3, #24]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d122      	bne.n	8007386 <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2220      	movs	r2, #32
 8007346:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	6812      	ldr	r2, [r2, #0]
 8007350:	6812      	ldr	r2, [r2, #0]
 8007352:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	7b12      	ldrb	r2, [r2, #12]
 800735a:	0612      	lsls	r2, r2, #24
 800735c:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8007360:	430a      	orrs	r2, r1
 8007362:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	6912      	ldr	r2, [r2, #16]
 800736c:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	6952      	ldr	r2, [r2, #20]
 8007376:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOCTR_RESRTSEL_Msk);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a06      	ldr	r2, [pc, #24]	; (8007398 <XMC_CAN_MO_UpdateData+0x6c>)
 800737e:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 8007380:	2300      	movs	r3, #0
 8007382:	73fb      	strb	r3, [r7, #15]
 8007384:	e001      	b.n	800738a <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8007386:	2303      	movs	r3, #3
 8007388:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 800738a:	7bfb      	ldrb	r3, [r7, #15]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	00280040 	.word	0x00280040

0800739c <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	f003 0320 	and.w	r3, r3, #32
 80073b2:	095b      	lsrs	r3, r3, #5
 80073b4:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c0:	0a1b      	lsrs	r3, r3, #8
 80073c2:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d102      	bne.n	80073d0 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 80073ca:	2304      	movs	r3, #4
 80073cc:	75fb      	strb	r3, [r7, #23]
 80073ce:	e00c      	b.n	80073ea <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d102      	bne.n	80073dc <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 80073d6:	2302      	movs	r3, #2
 80073d8:	75fb      	strb	r3, [r7, #23]
 80073da:	e006      	b.n	80073ea <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80073e4:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 80073e6:	2300      	movs	r3, #0
 80073e8:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	371c      	adds	r7, #28
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007416:	0adb      	lsrs	r3, r3, #11
 8007418:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	089b      	lsrs	r3, r3, #2
 8007426:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800742e:	2303      	movs	r3, #3
 8007430:	75fb      	strb	r3, [r7, #23]
 8007432:	e0a7      	b.n	8007584 <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d102      	bne.n	8007440 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 800743a:	2302      	movs	r3, #2
 800743c:	75fb      	strb	r3, [r7, #23]
 800743e:	e0a1      	b.n	8007584 <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2208      	movs	r2, #8
 8007446:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007452:	0f5b      	lsrs	r3, r3, #29
 8007454:	2b00      	cmp	r3, #0
 8007456:	d140      	bne.n	80074da <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	79d3      	ldrb	r3, [r2, #7]
 800745c:	f36f 1345 	bfc	r3, #5, #1
 8007460:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	699a      	ldr	r2, [r3, #24]
 8007468:	4b4a      	ldr	r3, [pc, #296]	; (8007594 <XMC_CAN_MO_Receive+0x19c>)
 800746a:	4013      	ands	r3, r2
 800746c:	0c9b      	lsrs	r3, r3, #18
 800746e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6853      	ldr	r3, [r2, #4]
 8007476:	f361 031c 	bfi	r3, r1, #0, #29
 800747a:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007486:	0f5b      	lsrs	r3, r3, #29
 8007488:	b2db      	uxtb	r3, r3
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	b2d9      	uxtb	r1, r3
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	7ad3      	ldrb	r3, [r2, #11]
 8007494:	f361 1345 	bfi	r3, r1, #5, #1
 8007498:	72d3      	strb	r3, [r2, #11]
        if(can_mo->can_ide_mask == 1U)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	7adb      	ldrb	r3, [r3, #11]
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00d      	beq.n	80074c4 <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	4b39      	ldr	r3, [pc, #228]	; (8007594 <XMC_CAN_MO_Receive+0x19c>)
 80074b0:	4013      	ands	r3, r2
 80074b2:	0c9b      	lsrs	r3, r3, #18
 80074b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6893      	ldr	r3, [r2, #8]
 80074bc:	f361 031c 	bfi	r3, r1, #0, #29
 80074c0:	6093      	str	r3, [r2, #8]
 80074c2:	e032      	b.n	800752a <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	6893      	ldr	r3, [r2, #8]
 80074d2:	f361 031c 	bfi	r3, r1, #0, #29
 80074d6:	6093      	str	r3, [r2, #8]
 80074d8:	e027      	b.n	800752a <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	79d3      	ldrb	r3, [r2, #7]
 80074de:	f043 0320 	orr.w	r3, r3, #32
 80074e2:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6853      	ldr	r3, [r2, #4]
 80074f2:	f361 031c 	bfi	r3, r1, #0, #29
 80074f6:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6893      	ldr	r3, [r2, #8]
 8007506:	f361 031c 	bfi	r3, r1, #0, #29
 800750a:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007516:	0f5b      	lsrs	r3, r3, #29
 8007518:	b2db      	uxtb	r3, r3
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	b2d9      	uxtb	r1, r3
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	7ad3      	ldrb	r3, [r2, #11]
 8007524:	f361 1345 	bfi	r3, r1, #5, #1
 8007528:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8007534:	0e1b      	lsrs	r3, r3, #24
 8007536:	b2da      	uxtb	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	691a      	ldr	r2, [r3, #16]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	695a      	ldr	r2, [r3, #20]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	089b      	lsrs	r3, r3, #2
 800755c:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	69db      	ldr	r3, [r3, #28]
 8007564:	f003 0308 	and.w	r3, r3, #8
 8007568:	08db      	lsrs	r3, r3, #3
 800756a:	757b      	strb	r3, [r7, #21]
    } while ((rx_pnd != 0U) && (new_data != 0U));
 800756c:	7dbb      	ldrb	r3, [r7, #22]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <XMC_CAN_MO_Receive+0x182>
 8007572:	7d7b      	ldrb	r3, [r7, #21]
 8007574:	2b00      	cmp	r3, #0
 8007576:	f47f af63 	bne.w	8007440 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 8007580:	2300      	movs	r3, #0
 8007582:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 8007584:	7dfb      	ldrb	r3, [r7, #23]
}
 8007586:	4618      	mov	r0, r3
 8007588:	371c      	adds	r7, #28
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	1ffc0000 	.word	0x1ffc0000

08007598 <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  if(event != XMC_CAN_NODE_EVENT_CFCIE)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075a8:	d006      	beq.n	80075b8 <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	431a      	orrs	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	e005      	b.n	80075c4 <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699a      	ldr	r2, [r3, #24]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	431a      	orrs	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	619a      	str	r2, [r3, #24]
  }
}
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop

080075d0 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075de:	60da      	str	r2, [r3, #12]
}
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop

080075ec <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a10      	ldr	r2, [pc, #64]	; (8007638 <XMC_CCU4_lDeassertReset+0x4c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d103      	bne.n	8007604 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80075fc:	2004      	movs	r0, #4
 80075fe:	f7ff f8ef 	bl	80067e0 <XMC_SCU_RESET_DeassertPeripheralReset>
 8007602:	e016      	b.n	8007632 <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a0d      	ldr	r2, [pc, #52]	; (800763c <XMC_CCU4_lDeassertReset+0x50>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d103      	bne.n	8007614 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 800760c:	2008      	movs	r0, #8
 800760e:	f7ff f8e7 	bl	80067e0 <XMC_SCU_RESET_DeassertPeripheralReset>
 8007612:	e00e      	b.n	8007632 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a0a      	ldr	r2, [pc, #40]	; (8007640 <XMC_CCU4_lDeassertReset+0x54>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d103      	bne.n	8007624 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 800761c:	2010      	movs	r0, #16
 800761e:	f7ff f8df 	bl	80067e0 <XMC_SCU_RESET_DeassertPeripheralReset>
 8007622:	e006      	b.n	8007632 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a07      	ldr	r2, [pc, #28]	; (8007644 <XMC_CCU4_lDeassertReset+0x58>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d102      	bne.n	8007632 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 800762c:	4806      	ldr	r0, [pc, #24]	; (8007648 <XMC_CCU4_lDeassertReset+0x5c>)
 800762e:	f7ff f8d7 	bl	80067e0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	4000c000 	.word	0x4000c000
 800763c:	40010000 	.word	0x40010000
 8007640:	40014000 	.word	0x40014000
 8007644:	48004000 	.word	0x48004000
 8007648:	10000001 	.word	0x10000001

0800764c <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8007654:	2010      	movs	r0, #16
 8007656:	f7ff fa13 	bl	8006a80 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff ffc6 	bl	80075ec <XMC_CCU4_lDeassertReset>
#endif
}
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop

08007668 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7ff ffe9 	bl	800764c <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff ffa8 	bl	80075d0 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800768c:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 800768e:	78fb      	ldrb	r3, [r7, #3]
 8007690:	039b      	lsls	r3, r3, #14
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	4313      	orrs	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	601a      	str	r2, [r3, #0]
}
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	795b      	ldrb	r3, [r3, #5]
 80076ba:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	051a      	lsls	r2, r3, #20
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	791b      	ldrb	r3, [r3, #4]
 80076ca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	795b      	ldrb	r3, [r3, #5]
 80076da:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	461a      	mov	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	795b      	ldrb	r3, [r3, #5]
 80076ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	791b      	ldrb	r3, [r3, #4]
 80076fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	461a      	mov	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
 800771c:	4613      	mov	r3, r2
 800771e:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007726:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8007728:	78fb      	ldrb	r3, [r7, #3]
 800772a:	2b09      	cmp	r3, #9
 800772c:	d82c      	bhi.n	8007788 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 800772e:	a201      	add	r2, pc, #4	; (adr r2, 8007734 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	0800775d 	.word	0x0800775d
 8007738:	0800775d 	.word	0x0800775d
 800773c:	08007767 	.word	0x08007767
 8007740:	08007767 	.word	0x08007767
 8007744:	08007789 	.word	0x08007789
 8007748:	08007789 	.word	0x08007789
 800774c:	08007789 	.word	0x08007789
 8007750:	08007789 	.word	0x08007789
 8007754:	08007771 	.word	0x08007771
 8007758:	0800777d 	.word	0x0800777d
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 800775c:	2303      	movs	r3, #3
 800775e:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8007760:	2300      	movs	r3, #0
 8007762:	617b      	str	r3, [r7, #20]
      break;
 8007764:	e016      	b.n	8007794 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8007766:	230c      	movs	r3, #12
 8007768:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 800776a:	2302      	movs	r3, #2
 800776c:	617b      	str	r3, [r7, #20]
      break;
 800776e:	e011      	b.n	8007794 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8007770:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007774:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8007776:	2308      	movs	r3, #8
 8007778:	617b      	str	r3, [r7, #20]
      break;
 800777a:	e00b      	b.n	8007794 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 800777c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007780:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8007782:	230a      	movs	r3, #10
 8007784:	617b      	str	r3, [r7, #20]
      break;
 8007786:	e005      	b.n	8007794 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8007788:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800778c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 800778e:	230c      	movs	r3, #12
 8007790:	617b      	str	r3, [r7, #20]
      break;
 8007792:	bf00      	nop
  }
  
  srs &= ~mask; 
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	43db      	mvns	r3, r3
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	4013      	ands	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 800779e:	78ba      	ldrb	r2, [r7, #2]
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	fa02 f303 	lsl.w	r3, r2, r3
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80077b4:	371c      	adds	r7, #28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop

080077c0 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	460b      	mov	r3, r1
 80077ca:	607a      	str	r2, [r7, #4]
 80077cc:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f7fe fe60 	bl	8006494 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80077d8:	7afb      	ldrb	r3, [r7, #11]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4619      	mov	r1, r3
 80077de:	230f      	movs	r3, #15
 80077e0:	408b      	lsls	r3, r1
 80077e2:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 80077e4:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	7af9      	ldrb	r1, [r7, #11]
 80077ec:	0089      	lsls	r1, r1, #2
 80077ee:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80077f0:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 80077f6:	7afa      	ldrb	r2, [r7, #11]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6859      	ldr	r1, [r3, #4]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	3204      	adds	r2, #4
 8007800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop

0800780c <XMC_ERU_OGU_Init>:

/* Initializes the selected ERU_OGUy channel with the config structure.  */
void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_OGU_CONFIG_t *const config)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	460b      	mov	r3, r1
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f7fe fe3a 	bl	8006494 <XMC_ERU_Enable>

  eru->EXOCON[channel] = config->raw;
 8007820:	7afa      	ldrb	r2, [r7, #11]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6819      	ldr	r1, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3208      	adds	r2, #8
 800782a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	70fb      	strb	r3, [r7, #3]
 8007840:	4613      	mov	r3, r2
 8007842:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007848:	78fb      	ldrb	r3, [r7, #3]
 800784a:	005b      	lsls	r3, r3, #1
 800784c:	4619      	mov	r1, r3
 800784e:	2303      	movs	r3, #3
 8007850:	408b      	lsls	r3, r1
 8007852:	43db      	mvns	r3, r3
 8007854:	401a      	ands	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800785e:	78bb      	ldrb	r3, [r7, #2]
 8007860:	78f9      	ldrb	r1, [r7, #3]
 8007862:	0049      	lsls	r1, r1, #1
 8007864:	408b      	lsls	r3, r1
 8007866:	431a      	orrs	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop

08007878 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8007882:	783b      	ldrb	r3, [r7, #0]
 8007884:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007888:	b2db      	uxtb	r3, r3
 800788a:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 800788c:	78bb      	ldrb	r3, [r7, #2]
 800788e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007892:	b2db      	uxtb	r3, r3
 8007894:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8007896:	4313      	orrs	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80078a2:	78fb      	ldrb	r3, [r7, #3]
 80078a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80078b6:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 80078b8:	78fb      	ldrb	r3, [r7, #3]
 80078ba:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80078c2:	4313      	orrs	r3, r2
 80078c4:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078f2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop

08007908 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007916:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop

0800792c <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	af00      	add	r7, sp, #0
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8007930:	2001      	movs	r0, #1
 8007932:	f7fe ff55 	bl	80067e0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8007936:	bd80      	pop	{r7, pc}

08007938 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8007942:	f7ff fff3 	bl	800792c <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	695a      	ldr	r2, [r3, #20]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	691a      	ldr	r2, [r3, #16]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop

0800798c <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	603b      	str	r3, [r7, #0]
 8007998:	4613      	mov	r3, r2
 800799a:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 800799c:	79fb      	ldrb	r3, [r7, #7]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d109      	bne.n	80079b6 <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
	XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	f240 731f 	movw	r3, #1823	; 0x71f
 80079a8:	4013      	ands	r3, r2
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	3128      	adds	r1, #40	; 0x28
 80079b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80079b4:	e007      	b.n	80079c6 <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	4b05      	ldr	r3, [pc, #20]	; (80079d0 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 80079ba:	4013      	ands	r3, r2
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	3128      	adds	r1, #40	; 0x28
 80079c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	071f0000 	.word	0x071f0000

080079d4 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80079ec:	2300      	movs	r3, #0
 80079ee:	73fb      	strb	r3, [r7, #15]
 80079f0:	e017      	b.n	8007a22 <XMC_VADC_GLOBAL_StartupCalibration+0x4e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
 80079f4:	4a0f      	ldr	r2, [pc, #60]	; (8007a34 <XMC_VADC_GLOBAL_StartupCalibration+0x60>)
 80079f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079fa:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d008      	beq.n	8007a1c <XMC_VADC_GLOBAL_StartupCalibration+0x48>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8007a0a:	e000      	b.n	8007a0e <XMC_VADC_GLOBAL_StartupCalibration+0x3a>
      {
        __NOP();
 8007a0c:	bf00      	nop
  {
    group_ptr = g_xmc_vadc_group_array[i];
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1f7      	bne.n	8007a0c <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	73fb      	strb	r3, [r7, #15]
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d9e4      	bls.n	80079f2 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	0800f528 	.word	0x0800f528

08007a38 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	70fb      	strb	r3, [r7, #3]
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8007a44:	78fb      	ldrb	r3, [r7, #3]
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d903      	bls.n	8007a52 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 8007a4a:	78fb      	ldrb	r3, [r7, #3]
 8007a4c:	3b04      	subs	r3, #4
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	e001      	b.n	8007a56 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 8007a52:	78fb      	ldrb	r3, [r7, #3]
 8007a54:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007a5c:	f023 020f 	bic.w	r2, r3, #15
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	6859      	ldr	r1, [r3, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	2300      	movs	r3, #0
 8007a94:	f000 f828 	bl	8007ae8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	6859      	ldr	r1, [r3, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f000 f821 	bl	8007ae8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	6899      	ldr	r1, [r3, #8]
 8007aac:	2200      	movs	r2, #0
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f000 f81a 	bl	8007ae8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	6899      	ldr	r1, [r3, #8]
 8007aba:	2201      	movs	r2, #1
 8007abc:	2301      	movs	r3, #1
 8007abe:	f000 f813 	bl	8007ae8 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	691a      	ldr	r2, [r3, #16]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	68da      	ldr	r2, [r3, #12]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	6819      	ldr	r1, [r3, #0]
 8007adc:	f7ff fecc 	bl	8007878 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop

08007ae8 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b08d      	sub	sp, #52	; 0x34
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	603b      	str	r3, [r7, #0]
 8007af4:	4613      	mov	r3, r2
 8007af6:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d113      	bne.n	8007b26 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8007afe:	2308      	movs	r3, #8
 8007b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8007b02:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8007b06:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8007b0c:	231f      	movs	r3, #31
 8007b0e:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8007b10:	7a3b      	ldrb	r3, [r7, #8]
 8007b12:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8007b1a:	7a7b      	ldrb	r3, [r7, #9]
 8007b1c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	76fb      	strb	r3, [r7, #27]
 8007b24:	e013      	b.n	8007b4e <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8007b26:	2318      	movs	r3, #24
 8007b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8007b2a:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8007b30:	2310      	movs	r3, #16
 8007b32:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8007b34:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8007b38:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8007b3a:	7abb      	ldrb	r3, [r7, #10]
 8007b3c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8007b44:	7afb      	ldrb	r3, [r7, #11]
 8007b46:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	3228      	adds	r2, #40	; 0x28
 8007b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b58:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	43db      	mvns	r3, r3
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	4013      	ands	r3, r2
 8007b62:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8007b64:	7efa      	ldrb	r2, [r7, #27]
 8007b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b68:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	43db      	mvns	r3, r3
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	4013      	ands	r3, r2
 8007b7a:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8007b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	fa02 f303 	lsl.w	r3, r2, r3
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	3228      	adds	r2, #40	; 0x28
 8007b90:	6979      	ldr	r1, [r7, #20]
 8007b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007b96:	3734      	adds	r7, #52	; 0x34
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bb2:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0303 	bic.w	r3, r3, #3
 8007bba:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8007bbc:	78fb      	ldrb	r3, [r7, #3]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop

08007bd8 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007be2:	2300      	movs	r3, #0
 8007be4:	75fb      	strb	r3, [r7, #23]
 8007be6:	e009      	b.n	8007bfc <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	4a39      	ldr	r2, [pc, #228]	; (8007cd0 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7ff fe89 	bl	8007908 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	75fb      	strb	r3, [r7, #23]
 8007bfc:	7dfb      	ldrb	r3, [r7, #23]
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d9f2      	bls.n	8007be8 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
 8007c02:	2300      	movs	r3, #0
 8007c04:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	f003 0303 	and.w	r3, r3, #3
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8007c14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c18:	613b      	str	r3, [r7, #16]
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	75fb      	strb	r3, [r7, #23]
 8007c1e:	e021      	b.n	8007c64 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8007c20:	7dfb      	ldrb	r3, [r7, #23]
 8007c22:	4a2b      	ldr	r2, [pc, #172]	; (8007cd0 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c2c:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c34:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	021b      	lsls	r3, r3, #8
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]
  
    /* Program the start mode */
    reg |= conv_start_mask;
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	4a1f      	ldr	r2, [pc, #124]	; (8007cd0 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007c5e:	7dfb      	ldrb	r3, [r7, #23]
 8007c60:	3301      	adds	r3, #1
 8007c62:	75fb      	strb	r3, [r7, #23]
 8007c64:	7dfb      	ldrb	r3, [r7, #23]
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d9da      	bls.n	8007c20 <XMC_VADC_GLOBAL_BackgroundInit+0x48>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f043 0201 	orr.w	r2, r3, #1
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	f003 0303 	and.w	r3, r3, #3
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d107      	bne.n	8007ca8 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007c9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007ca8:	2300      	movs	r3, #0
 8007caa:	75fb      	strb	r3, [r7, #23]
 8007cac:	e009      	b.n	8007cc2 <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
 8007cb0:	4a07      	ldr	r2, [pc, #28]	; (8007cd0 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7ff fe14 	bl	80078e4 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007cbc:	7dfb      	ldrb	r3, [r7, #23]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	75fb      	strb	r3, [r7, #23]
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
 8007cc4:	2b03      	cmp	r3, #3
 8007cc6:	d9f2      	bls.n	8007cae <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	0800f528 	.word	0x0800f528

08007cd4 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b089      	sub	sp, #36	; 0x24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	7a1b      	ldrb	r3, [r3, #8]
 8007ce4:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cec:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf6:	43db      	mvns	r3, r3
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	fa02 f303 	lsl.w	r3, r2, r3
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	7a5b      	ldrb	r3, [r3, #9]
 8007d18:	b25b      	sxtb	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	db29      	blt.n	8007d72 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d10a      	bne.n	8007d3e <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8007d28:	2308      	movs	r3, #8
 8007d2a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d32:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8007d3c:	e00c      	b.n	8007d58 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d109      	bne.n	8007d58 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8007d44:	2300      	movs	r3, #0
 8007d46:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d4e:	f023 021f 	bic.w	r2, r3, #31
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	7a52      	ldrb	r2, [r2, #9]
 8007d62:	b251      	sxtb	r1, r2
 8007d64:	69fa      	ldr	r2, [r7, #28]
 8007d66:	fa01 f202 	lsl.w	r2, r1, r2
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6819      	ldr	r1, [r3, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	3280      	adds	r2, #128	; 0x80
 8007d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8007d92:	3724      	adds	r7, #36	; 0x24
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <XMC_WDT_Enable>:
 * API IMPLEMENTATION
  ********************************************************************************************************************/

/* Enables watchdog clock and releases watchdog reset. */
void XMC_WDT_Enable(void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	af00      	add	r7, sp, #0
#if UC_FAMILY == XMC4
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_WDT);
 8007da0:	2020      	movs	r0, #32
 8007da2:	f7fe fe6d 	bl	8006a80 <XMC_SCU_CLOCK_EnableClock>

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_WDT);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_WDT);
 8007da6:	4802      	ldr	r0, [pc, #8]	; (8007db0 <XMC_WDT_Enable+0x14>)
 8007da8:	f7fe fd1a 	bl	80067e0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
}
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	20000002 	.word	0x20000002

08007db4 <XMC_WDT_Init>:
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_WDT);
#endif
}
/* Initializes and configures watchdog with configuration data pointed by \a config. */
void XMC_WDT_Init(const XMC_WDT_CONFIG_t *const config)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  XMC_WDT_Enable();
 8007dbc:	f7ff ffee 	bl	8007d9c <XMC_WDT_Enable>
  WDT->CTR = config->wdt_ctr;
 8007dc0:	4a07      	ldr	r2, [pc, #28]	; (8007de0 <XMC_WDT_Init+0x2c>)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	6053      	str	r3, [r2, #4]
  WDT->WLB = config->window_lower_bound;
 8007dc8:	4a05      	ldr	r2, [pc, #20]	; (8007de0 <XMC_WDT_Init+0x2c>)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	6113      	str	r3, [r2, #16]
  WDT->WUB = config->window_upper_bound;
 8007dd0:	4a03      	ldr	r2, [pc, #12]	; (8007de0 <XMC_WDT_Init+0x2c>)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6153      	str	r3, [r2, #20]
}
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	50008000 	.word	0x50008000

08007de4 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8007dec:	4b14      	ldr	r3, [pc, #80]	; (8007e40 <_sbrk+0x5c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d102      	bne.n	8007dfa <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8007df4:	4b12      	ldr	r3, [pc, #72]	; (8007e40 <_sbrk+0x5c>)
 8007df6:	4a13      	ldr	r2, [pc, #76]	; (8007e44 <_sbrk+0x60>)
 8007df8:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8007dfa:	4b11      	ldr	r3, [pc, #68]	; (8007e40 <_sbrk+0x5c>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3303      	adds	r3, #3
 8007e04:	f023 0303 	bic.w	r3, r3, #3
 8007e08:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8007e0a:	4b0d      	ldr	r3, [pc, #52]	; (8007e40 <_sbrk+0x5c>)
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4413      	add	r3, r2
 8007e12:	4a0d      	ldr	r2, [pc, #52]	; (8007e48 <_sbrk+0x64>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d207      	bcs.n	8007e28 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8007e18:	4b09      	ldr	r3, [pc, #36]	; (8007e40 <_sbrk+0x5c>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4413      	add	r3, r2
 8007e20:	4a07      	ldr	r2, [pc, #28]	; (8007e40 <_sbrk+0x5c>)
 8007e22:	6013      	str	r3, [r2, #0]
    return (base);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	e006      	b.n	8007e36 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8007e28:	f007 f8d8 	bl	800efdc <__errno>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	230c      	movs	r3, #12
 8007e30:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8007e32:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	200006b0 	.word	0x200006b0
 8007e44:	200014b0 	.word	0x200014b0
 8007e48:	2000ffc0 	.word	0x2000ffc0

08007e4c <_init>:

/* Init */
void _init(void)
{}
 8007e4c:	b480      	push	{r7}
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <WATCHDOG_Init>:
  return (version);
}

/* Initializes the watchdog timer with the generated configuration */
WATCHDOG_STATUS_t WATCHDOG_Init(WATCHDOG_t *handle)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;

  XMC_ASSERT("WATCHDOG_Init:handle NULL" , (handle != NULL));

  status = WATCHDOG_STATUS_SUCCESS;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73fb      	strb	r3, [r7, #15]

  /* Check for app instance is initialized or not */
  if (false == handle->initialized)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	791b      	ldrb	r3, [r3, #4]
 8007e68:	f083 0301 	eor.w	r3, r3, #1
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00f      	beq.n	8007e92 <WATCHDOG_Init+0x3a>
  {
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      /* Service Event Handling */
      status = WATCHDOG_lPrewarning_Configure(handle);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f812 	bl	8007e9c <WATCHDOG_lPrewarning_Configure>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73fb      	strb	r3, [r7, #15]
      if(WATCHDOG_STATUS_FAILURE != status)
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d007      	beq.n	8007e92 <WATCHDOG_Init+0x3a>
      {
#endif
        /* Initialize the WDT peripheral */
        XMC_WDT_Init(handle->config);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7ff ff94 	bl	8007db4 <XMC_WDT_Init>
        /* Update the initialization flag */
        handle->initialized = true;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	711a      	strb	r2, [r3, #4]
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      }
#endif
  }

  return (status);
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <WATCHDOG_lPrewarning_Configure>:
#if (WATCHDOG_PREWARNING_CHECK == 1U)
/*
 * Register the Pre-warning event with GLOBAL_SCU APP
 */
WATCHDOG_STATUS_t WATCHDOG_lPrewarning_Configure(WATCHDOG_t *handle)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;
  status = WATCHDOG_STATUS_SUCCESS;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	73fb      	strb	r3, [r7, #15]
      status = WATCHDOG_STATUS_FAILURE;
    }
#endif

#if (WATCHDOG_EVENT_VIA_NMI == 1U)
    XMC_SCU_INTERRUPT_EnableEvent((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	f7fe fbe5 	bl	8006678 <XMC_SCU_INTERRUPT_EnableEvent>
    XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8007eae:	2001      	movs	r0, #1
 8007eb0:	f7fe fc84 	bl	80067bc <XMC_SCU_INTERRUPT_EnableNmiRequest>
#endif

  return (status);
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop

08007ec0 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	409a      	lsls	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	60da      	str	r2, [r3, #12]
}
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	60da      	str	r2, [r3, #12]
}
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8007f04:	887a      	ldrh	r2, [r7, #2]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8007f20:	887a      	ldrh	r2, [r7, #2]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	611a      	str	r2, [r3, #16]
}
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop

08007f4c <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	2101      	movs	r1, #1
 8007f62:	fa01 f303 	lsl.w	r3, r1, r3
 8007f66:	431a      	orrs	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 8007f80:	2301      	movs	r3, #1
 8007f82:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL))

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d14d      	bne.n	800802a <PWM_lCCU4_Init+0xb2>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 f9ea 	bl	800836c <GLOBAL_CCU4_Init>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d13f      	bne.n	8008022 <PWM_lCCU4_Init+0xaa>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	689a      	ldr	r2, [r3, #8]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	4610      	mov	r0, r2
 8007fac:	4619      	mov	r1, r3
 8007fae:	f7ff fb79 	bl	80076a4 <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	689a      	ldr	r2, [r3, #8]
    		                             (uint16_t)handle_ptr->period_value);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	f7ff ff9a 	bl	8007ef8 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	4610      	mov	r0, r2
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	f7ff ff9f 	bl	8007f14 <XMC_CCU4_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fde:	4610      	mov	r0, r2
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	f7ff ffa5 	bl	8007f30 <XMC_CCU4_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f824 	bl	8008034 <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6919      	ldr	r1, [r3, #16]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	4608      	mov	r0, r1
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	461a      	mov	r2, r3
 8008000:	f7fe fa5a 	bl	80064b8 <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <PWM_lCCU4_Init+0xa4>
      {
        PWM_Start(handle_ptr);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f8b8 	bl	800818c <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
 800801c:	2300      	movs	r3, #0
 800801e:	73fb      	strb	r3, [r7, #15]
 8008020:	e003      	b.n	800802a <PWM_lCCU4_Init+0xb2>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2202      	movs	r2, #2
 8008026:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }

  }
  return (status);
 800802a:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_lCCU4_Init() api */
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00f      	beq.n	8008066 <PWM_lCCU4_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	4618      	mov	r0, r3
 800804c:	2100      	movs	r1, #0
 800804e:	f7ff ff7d 	bl	8007f4c <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689a      	ldr	r2, [r3, #8]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800805c:	4610      	mov	r0, r2
 800805e:	2100      	movs	r1, #0
 8008060:	461a      	mov	r2, r3
 8008062:	f7ff fb55 	bl	8007710 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00f      	beq.n	8008090 <PWM_lCCU4_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	4618      	mov	r0, r3
 8008076:	2102      	movs	r1, #2
 8008078:	f7ff ff68 	bl	8007f4c <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	689a      	ldr	r2, [r3, #8]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008086:	4610      	mov	r0, r2
 8008088:	2102      	movs	r1, #2
 800808a:	461a      	mov	r2, r3
 800808c:	f7ff fb40 	bl	8007710 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop

08008098 <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d004      	beq.n	80080b4 <PWM_lCCU4_Start+0x1c>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80080b0:	2b04      	cmp	r3, #4
 80080b2:	d111      	bne.n	80080d8 <PWM_lCCU4_Start+0x40>
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80080be:	4610      	mov	r0, r2
 80080c0:	4619      	mov	r1, r3
 80080c2:	f7ff fefd 	bl	8007ec0 <XMC_CCU4_EnableClock>
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7ff ff08 	bl	8007ee0 <XMC_CCU4_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2203      	movs	r2, #3
 80080d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU4_Start:start PWM")
  }
} /* end of PWM_lCCU4_Start() api */
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop

080080e0 <PWM_lCCU4_SetDutyCycle>:
} /* end of PWM_lCCU4_Stop() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Sets the duty cycle for CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint32_t compare;
  PWM_STATUS_t status;

  XMC_ASSERT("PWM_lCCU4_SetDutyCycle:Invalid duty_cycle " , ((duty_cycle >= 0) && (duty_cycle <= PWM_MAX_DUTY_CYCLE)))

  status = PWM_STATUS_FAILURE;
 80080ea:	2301      	movs	r3, #1
 80080ec:	75fb      	strb	r3, [r7, #23]
  if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d02c      	beq.n	8008152 <PWM_lCCU4_SetDutyCycle+0x72>
  {
    /* Duty cycle needs between 0 and 10000 */
    if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80080fe:	4293      	cmp	r3, r2
 8008100:	d827      	bhi.n	8008152 <PWM_lCCU4_SetDutyCycle+0x72>
    {
      /* period = (PR + 1) */
      period = (uint32_t)handle_ptr->period_value + 1U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	3301      	adds	r3, #1
 8008108:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8008110:	3310      	adds	r3, #16
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	fb02 f303 	mul.w	r3, r2, r3
 8008118:	4a10      	ldr	r2, [pc, #64]	; (800815c <PWM_lCCU4_SetDutyCycle+0x7c>)
 800811a:	fba2 2303 	umull	r2, r3, r2, r3
 800811e:	0b5b      	lsrs	r3, r3, #13
 8008120:	60fb      	str	r3, [r7, #12]

      handle_ptr->compare_value = compare;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	619a      	str	r2, [r3, #24]
      handle_ptr->duty_cycle = duty_cycle;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	621a      	str	r2, [r3, #32]

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689a      	ldr	r2, [r3, #8]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	b29b      	uxth	r3, r3
 8008136:	4610      	mov	r0, r2
 8008138:	4619      	mov	r1, r3
 800813a:	f7ff feeb 	bl	8007f14 <XMC_CCU4_SLICE_SetTimerCompareMatch>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	4610      	mov	r0, r2
 8008148:	4619      	mov	r1, r3
 800814a:	f7ff fef1 	bl	8007f30 <XMC_CCU4_EnableShadowTransfer>
      status = PWM_STATUS_SUCCESS;
 800814e:	2300      	movs	r3, #0
 8008150:	75fb      	strb	r3, [r7, #23]
    }
  }

  XMC_DEBUG("PWM_lCCU4_SetDutyCycle:dutycycle set")
  return (status);
 8008152:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_lCCU4_SetDutyCycle() api */
 8008154:	4618      	mov	r0, r3
 8008156:	3718      	adds	r7, #24
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	d1b71759 	.word	0xd1b71759

08008160 <PWM_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function initializes the app */
PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 8008168:	2301      	movs	r3, #1
 800816a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008172:	2b00      	cmp	r3, #0
 8008174:	d104      	bne.n	8008180 <PWM_Init+0x20>
  {
    status = PWM_lCCU4_Init(handle_ptr);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7ff fefe 	bl	8007f78 <PWM_lCCU4_Init>
 800817c:	4603      	mov	r3, r0
 800817e:	73fb      	strb	r3, [r7, #15]
  {
    status = PWM_lCCU8_Init(handle_ptr);
  }
#endif

  return (status);
 8008180:	7bfb      	ldrb	r3, [r7, #15]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop

0800818c <PWM_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function starts the PWM generation. This needs to be called even if external start is configured.*/
void PWM_Start(PWM_t *const handle_ptr)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800819a:	2b00      	cmp	r3, #0
 800819c:	d102      	bne.n	80081a4 <PWM_Start+0x18>
  {
    PWM_lCCU4_Start(handle_ptr);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7ff ff7a 	bl	8008098 <PWM_lCCU4_Start>
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    PWM_lCCU8_Start(handle_ptr);
  }
#endif
}
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop

080081ac <PWM_SetDutyCycle>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*This function is used to set the duty cycle (uint32_t) of the PWM waveform  */
PWM_STATUS_t PWM_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 80081b6:	2301      	movs	r3, #1
 80081b8:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d105      	bne.n	80081d0 <PWM_SetDutyCycle+0x24>
  {
    status = PWM_lCCU4_SetDutyCycle(handle_ptr, duty_cycle);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	f7ff ff8a 	bl	80080e0 <PWM_lCCU4_SetDutyCycle>
 80081cc:	4603      	mov	r3, r0
 80081ce:	73fb      	strb	r3, [r7, #15]
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    status = PWM_lCCU8_SetDutyCycle(handle_ptr, duty_cycle);
  }
#endif
  return (status);
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop

080081dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80081e0:	4b04      	ldr	r3, [pc, #16]	; (80081f4 <__NVIC_GetPriorityGrouping+0x18>)
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081e8:	0a1b      	lsrs	r3, r3, #8
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr
 80081f4:	e000ed00 	.word	0xe000ed00

080081f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008206:	2b00      	cmp	r3, #0
 8008208:	db0b      	blt.n	8008222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800820a:	4908      	ldr	r1, [pc, #32]	; (800822c <__NVIC_EnableIRQ+0x34>)
 800820c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008210:	095b      	lsrs	r3, r3, #5
 8008212:	79fa      	ldrb	r2, [r7, #7]
 8008214:	f002 021f 	and.w	r2, r2, #31
 8008218:	2001      	movs	r0, #1
 800821a:	fa00 f202 	lsl.w	r2, r0, r2
 800821e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	e000e100 	.word	0xe000e100

08008230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	6039      	str	r1, [r7, #0]
 800823a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800823c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008240:	2b00      	cmp	r3, #0
 8008242:	db0a      	blt.n	800825a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008244:	490d      	ldr	r1, [pc, #52]	; (800827c <__NVIC_SetPriority+0x4c>)
 8008246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	b2d2      	uxtb	r2, r2
 800824e:	0092      	lsls	r2, r2, #2
 8008250:	b2d2      	uxtb	r2, r2
 8008252:	440b      	add	r3, r1
 8008254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8008258:	e00a      	b.n	8008270 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800825a:	4909      	ldr	r1, [pc, #36]	; (8008280 <__NVIC_SetPriority+0x50>)
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	f003 030f 	and.w	r3, r3, #15
 8008262:	3b04      	subs	r3, #4
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	b2d2      	uxtb	r2, r2
 8008268:	0092      	lsls	r2, r2, #2
 800826a:	b2d2      	uxtb	r2, r2
 800826c:	440b      	add	r3, r1
 800826e:	761a      	strb	r2, [r3, #24]
  }
}
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	e000e100 	.word	0xe000e100
 8008280:	e000ed00 	.word	0xe000ed00

08008284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008284:	b480      	push	{r7}
 8008286:	b089      	sub	sp, #36	; 0x24
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f003 0307 	and.w	r3, r3, #7
 8008296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	f1c3 0307 	rsb	r3, r3, #7
 800829e:	2b06      	cmp	r3, #6
 80082a0:	bf28      	it	cs
 80082a2:	2306      	movcs	r3, #6
 80082a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	3306      	adds	r3, #6
 80082aa:	2b06      	cmp	r3, #6
 80082ac:	d902      	bls.n	80082b4 <NVIC_EncodePriority+0x30>
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	3b01      	subs	r3, #1
 80082b2:	e000      	b.n	80082b6 <NVIC_EncodePriority+0x32>
 80082b4:	2300      	movs	r3, #0
 80082b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	2201      	movs	r2, #1
 80082bc:	fa02 f303 	lsl.w	r3, r2, r3
 80082c0:	1e5a      	subs	r2, r3, #1
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	401a      	ands	r2, r3
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2101      	movs	r1, #1
 80082ce:	fa01 f303 	lsl.w	r3, r1, r3
 80082d2:	1e59      	subs	r1, r3, #1
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80082d8:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3724      	adds	r7, #36	; 0x24
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop

080082e8 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	b25b      	sxtb	r3, r3
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7ff ff7e 	bl	80081f8 <__NVIC_EnableIRQ>
}
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop

08008304 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8008304:	b590      	push	{r4, r7, lr}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	781c      	ldrb	r4, [r3, #0]
 8008310:	f7ff ff64 	bl	80081dc <__NVIC_GetPriorityGrouping>
 8008314:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800831a:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8008320:	4608      	mov	r0, r1
 8008322:	4611      	mov	r1, r2
 8008324:	461a      	mov	r2, r3
 8008326:	f7ff ffad 	bl	8008284 <NVIC_EncodePriority>
 800832a:	4602      	mov	r2, r0
 800832c:	b263      	sxtb	r3, r4
 800832e:	4618      	mov	r0, r3
 8008330:	4611      	mov	r1, r2
 8008332:	f7ff ff7d 	bl	8008230 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	78db      	ldrb	r3, [r3, #3]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7ff ffd2 	bl	80082e8 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	bd90      	pop	{r4, r7, pc}
 800834e:	bf00      	nop

08008350 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800835e:	60da      	str	r2, [r3, #12]
}
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop

0800836c <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	7b5b      	ldrb	r3, [r3, #13]
 8008378:	f083 0301 	eor.w	r3, r3, #1
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00f      	beq.n	80083a2 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	689a      	ldr	r2, [r3, #8]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	7b1b      	ldrb	r3, [r3, #12]
 800838a:	4610      	mov	r0, r2
 800838c:	4619      	mov	r1, r3
 800838e:	f7ff f96b 	bl	8007668 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	4618      	mov	r0, r3
 8008398:	f7ff ffda 	bl	8008350 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	7a5b      	ldrb	r3, [r3, #9]
 80083bc:	f083 0301 	eor.w	r3, r3, #1
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00d      	beq.n	80083e2 <GLOBAL_CAN_Init+0x36>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4610      	mov	r0, r2
 80083d0:	2101      	movs	r1, #1
 80083d2:	461a      	mov	r2, r3
 80083d4:	f7fe fece 	bl	8007174 <XMC_CAN_InitEx>
#endif
    handle->init_status = true;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 80083e2:	7bfb      	ldrb	r3, [r7, #15]

}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	3310      	adds	r3, #16
 8008400:	4619      	mov	r1, r3
 8008402:	2301      	movs	r3, #1
 8008404:	408b      	lsls	r3, r1
 8008406:	431a      	orrs	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	7e1b      	ldrb	r3, [r3, #24]
 8008424:	2b02      	cmp	r3, #2
 8008426:	d149      	bne.n	80084bc <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	695a      	ldr	r2, [r3, #20]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	4610      	mov	r0, r2
 8008432:	4619      	mov	r1, r3
 8008434:	f7ff fa80 	bl	8007938 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8008438:	2300      	movs	r3, #0
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	e02f      	b.n	800849e <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008446:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	4608      	mov	r0, r1
 8008454:	4619      	mov	r1, r3
 8008456:	f7ff fb13 	bl	8007a80 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4618      	mov	r0, r3
 8008466:	2103      	movs	r1, #3
 8008468:	f7ff fb9a 	bl	8007ba0 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008474:	7a1b      	ldrb	r3, [r3, #8]
 8008476:	f083 0301 	eor.w	r3, r3, #1
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	d005      	beq.n	800848c <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	4618      	mov	r0, r3
 8008486:	68f9      	ldr	r1, [r7, #12]
 8008488:	f7ff ffb0 	bl	80083ec <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008494:	2200      	movs	r2, #0
 8008496:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	3301      	adds	r3, #1
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d9cc      	bls.n	800843e <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	7e5b      	ldrb	r3, [r3, #25]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d004      	beq.n	80084b6 <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7ff fa8f 	bl	80079d4 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	7e1b      	ldrb	r3, [r3, #24]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3b04      	subs	r3, #4
 80084d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3b04      	subs	r3, #4
 80084e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f023 0201 	bic.w	r2, r3, #1
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	3b04      	subs	r3, #4
 80084f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084f8:	4a0c      	ldr	r2, [pc, #48]	; (800852c <pxPortInitialiseStack+0x64>)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3b14      	subs	r3, #20
 8008502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3b04      	subs	r3, #4
 800850e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f06f 0202 	mvn.w	r2, #2
 8008516:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	3b20      	subs	r3, #32
 800851c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800851e:	68fb      	ldr	r3, [r7, #12]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	08008531 	.word	0x08008531

08008530 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800853a:	4b10      	ldr	r3, [pc, #64]	; (800857c <prvTaskExitError+0x4c>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008542:	d009      	beq.n	8008558 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008544:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008548:	f383 8811 	msr	BASEPRI, r3
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	60fb      	str	r3, [r7, #12]
 8008556:	e7fe      	b.n	8008556 <prvTaskExitError+0x26>
 8008558:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800856a:	bf00      	nop
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d0fc      	beq.n	800856c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	20000190 	.word	0x20000190

08008580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008580:	4b07      	ldr	r3, [pc, #28]	; (80085a0 <pxCurrentTCBConst2>)
 8008582:	6819      	ldr	r1, [r3, #0]
 8008584:	6808      	ldr	r0, [r1, #0]
 8008586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858a:	f380 8809 	msr	PSP, r0
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f04f 0000 	mov.w	r0, #0
 8008596:	f380 8811 	msr	BASEPRI, r0
 800859a:	4770      	bx	lr
 800859c:	f3af 8000 	nop.w

080085a0 <pxCurrentTCBConst2>:
 80085a0:	200006bc 	.word	0x200006bc
 80085a4:	f3af 8000 	nop.w
 80085a8:	f3af 8000 	nop.w
 80085ac:	f3af 8000 	nop.w

080085b0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085b0:	4808      	ldr	r0, [pc, #32]	; (80085d4 <prvPortStartFirstTask+0x24>)
 80085b2:	6800      	ldr	r0, [r0, #0]
 80085b4:	6800      	ldr	r0, [r0, #0]
 80085b6:	f380 8808 	msr	MSP, r0
 80085ba:	f04f 0000 	mov.w	r0, #0
 80085be:	f380 8814 	msr	CONTROL, r0
 80085c2:	b662      	cpsie	i
 80085c4:	b661      	cpsie	f
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	df00      	svc	0
 80085d0:	bf00      	nop
 80085d2:	0000      	.short	0x0000
 80085d4:	e000ed08 	.word	0xe000ed08

080085d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085de:	4b44      	ldr	r3, [pc, #272]	; (80086f0 <xPortStartScheduler+0x118>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a44      	ldr	r2, [pc, #272]	; (80086f4 <xPortStartScheduler+0x11c>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d109      	bne.n	80085fc <xPortStartScheduler+0x24>
 80085e8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	613b      	str	r3, [r7, #16]
 80085fa:	e7fe      	b.n	80085fa <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085fc:	4b3c      	ldr	r3, [pc, #240]	; (80086f0 <xPortStartScheduler+0x118>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a3d      	ldr	r2, [pc, #244]	; (80086f8 <xPortStartScheduler+0x120>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d109      	bne.n	800861a <xPortStartScheduler+0x42>
 8008606:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	60fb      	str	r3, [r7, #12]
 8008618:	e7fe      	b.n	8008618 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800861a:	4b38      	ldr	r3, [pc, #224]	; (80086fc <xPortStartScheduler+0x124>)
 800861c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	b2db      	uxtb	r3, r3
 8008624:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	22ff      	movs	r2, #255	; 0xff
 800862a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	b2db      	uxtb	r3, r3
 8008632:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	b2db      	uxtb	r3, r3
 8008638:	f023 0303 	bic.w	r3, r3, #3
 800863c:	b2da      	uxtb	r2, r3
 800863e:	4b30      	ldr	r3, [pc, #192]	; (8008700 <xPortStartScheduler+0x128>)
 8008640:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008642:	4b30      	ldr	r3, [pc, #192]	; (8008704 <xPortStartScheduler+0x12c>)
 8008644:	2207      	movs	r2, #7
 8008646:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008648:	e009      	b.n	800865e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800864a:	4b2e      	ldr	r3, [pc, #184]	; (8008704 <xPortStartScheduler+0x12c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	3b01      	subs	r3, #1
 8008650:	4a2c      	ldr	r2, [pc, #176]	; (8008704 <xPortStartScheduler+0x12c>)
 8008652:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	b2db      	uxtb	r3, r3
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	b2db      	uxtb	r3, r3
 800865c:	70fb      	strb	r3, [r7, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800865e:	78fb      	ldrb	r3, [r7, #3]
 8008660:	b2db      	uxtb	r3, r3
 8008662:	b2db      	uxtb	r3, r3
 8008664:	b25b      	sxtb	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	dbef      	blt.n	800864a <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800866a:	4b26      	ldr	r3, [pc, #152]	; (8008704 <xPortStartScheduler+0x12c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f1c3 0307 	rsb	r3, r3, #7
 8008672:	2b06      	cmp	r3, #6
 8008674:	d009      	beq.n	800868a <xPortStartScheduler+0xb2>
 8008676:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	60bb      	str	r3, [r7, #8]
 8008688:	e7fe      	b.n	8008688 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800868a:	4b1e      	ldr	r3, [pc, #120]	; (8008704 <xPortStartScheduler+0x12c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	021b      	lsls	r3, r3, #8
 8008690:	4a1c      	ldr	r2, [pc, #112]	; (8008704 <xPortStartScheduler+0x12c>)
 8008692:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008694:	4b1b      	ldr	r3, [pc, #108]	; (8008704 <xPortStartScheduler+0x12c>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800869c:	4a19      	ldr	r2, [pc, #100]	; (8008704 <xPortStartScheduler+0x12c>)
 800869e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	b2da      	uxtb	r2, r3
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086a8:	4a17      	ldr	r2, [pc, #92]	; (8008708 <xPortStartScheduler+0x130>)
 80086aa:	4b17      	ldr	r3, [pc, #92]	; (8008708 <xPortStartScheduler+0x130>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f443 037c 	orr.w	r3, r3, #16515072	; 0xfc0000
 80086b2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086b4:	4a14      	ldr	r2, [pc, #80]	; (8008708 <xPortStartScheduler+0x130>)
 80086b6:	4b14      	ldr	r3, [pc, #80]	; (8008708 <xPortStartScheduler+0x130>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f043 437c 	orr.w	r3, r3, #4227858432	; 0xfc000000
 80086be:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086c0:	f000 f8d6 	bl	8008870 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086c4:	4b11      	ldr	r3, [pc, #68]	; (800870c <xPortStartScheduler+0x134>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086ca:	f000 f8f3 	bl	80088b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086ce:	4a10      	ldr	r2, [pc, #64]	; (8008710 <xPortStartScheduler+0x138>)
 80086d0:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <xPortStartScheduler+0x138>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086d8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086da:	f7ff ff69 	bl	80085b0 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086de:	f001 fbaf 	bl	8009e40 <vTaskSwitchContext>
	prvTaskExitError();
 80086e2:	f7ff ff25 	bl	8008530 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3718      	adds	r7, #24
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	e000ed00 	.word	0xe000ed00
 80086f4:	410fc271 	.word	0x410fc271
 80086f8:	410fc270 	.word	0x410fc270
 80086fc:	e000e400 	.word	0xe000e400
 8008700:	200006b4 	.word	0x200006b4
 8008704:	200006b8 	.word	0x200006b8
 8008708:	e000ed20 	.word	0xe000ed20
 800870c:	20000190 	.word	0x20000190
 8008710:	e000ef34 	.word	0xe000ef34

08008714 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800872c:	4b0e      	ldr	r3, [pc, #56]	; (8008768 <vPortEnterCritical+0x54>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3301      	adds	r3, #1
 8008732:	4a0d      	ldr	r2, [pc, #52]	; (8008768 <vPortEnterCritical+0x54>)
 8008734:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008736:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <vPortEnterCritical+0x54>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d10e      	bne.n	800875c <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800873e:	4b0b      	ldr	r3, [pc, #44]	; (800876c <vPortEnterCritical+0x58>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b00      	cmp	r3, #0
 8008746:	d009      	beq.n	800875c <vPortEnterCritical+0x48>
 8008748:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800874c:	f383 8811 	msr	BASEPRI, r3
 8008750:	f3bf 8f6f 	isb	sy
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	603b      	str	r3, [r7, #0]
 800875a:	e7fe      	b.n	800875a <vPortEnterCritical+0x46>
	}
}
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	20000190 	.word	0x20000190
 800876c:	e000ed04 	.word	0xe000ed04

08008770 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008776:	4b10      	ldr	r3, [pc, #64]	; (80087b8 <vPortExitCritical+0x48>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d109      	bne.n	8008792 <vPortExitCritical+0x22>
 800877e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	607b      	str	r3, [r7, #4]
 8008790:	e7fe      	b.n	8008790 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008792:	4b09      	ldr	r3, [pc, #36]	; (80087b8 <vPortExitCritical+0x48>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3b01      	subs	r3, #1
 8008798:	4a07      	ldr	r2, [pc, #28]	; (80087b8 <vPortExitCritical+0x48>)
 800879a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800879c:	4b06      	ldr	r3, [pc, #24]	; (80087b8 <vPortExitCritical+0x48>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d104      	bne.n	80087ae <vPortExitCritical+0x3e>
 80087a4:	2300      	movs	r3, #0
 80087a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	20000190 	.word	0x20000190
 80087bc:	00000000 	.word	0x00000000

080087c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087c0:	f3ef 8009 	mrs	r0, PSP
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	4b15      	ldr	r3, [pc, #84]	; (8008820 <pxCurrentTCBConst>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	f01e 0f10 	tst.w	lr, #16
 80087d0:	bf08      	it	eq
 80087d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087da:	6010      	str	r0, [r2, #0]
 80087dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087e0:	f04f 00fc 	mov.w	r0, #252	; 0xfc
 80087e4:	f380 8811 	msr	BASEPRI, r0
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f001 fb26 	bl	8009e40 <vTaskSwitchContext>
 80087f4:	f04f 0000 	mov.w	r0, #0
 80087f8:	f380 8811 	msr	BASEPRI, r0
 80087fc:	bc09      	pop	{r0, r3}
 80087fe:	6819      	ldr	r1, [r3, #0]
 8008800:	6808      	ldr	r0, [r1, #0]
 8008802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008806:	f01e 0f10 	tst.w	lr, #16
 800880a:	bf08      	it	eq
 800880c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008810:	f380 8809 	msr	PSP, r0
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	f3af 8000 	nop.w

08008820 <pxCurrentTCBConst>:
 8008820:	200006bc 	.word	0x200006bc
 8008824:	f3af 8000 	nop.w
 8008828:	f3af 8000 	nop.w
 800882c:	f3af 8000 	nop.w

08008830 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008836:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008848:	f001 fa40 	bl	8009ccc <xTaskIncrementTick>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008852:	4b06      	ldr	r3, [pc, #24]	; (800886c <SysTick_Handler+0x3c>)
 8008854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	2300      	movs	r3, #0
 800885c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	e000ed04 	.word	0xe000ed04

08008870 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008870:	b480      	push	{r7}
 8008872:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008874:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <vPortSetupTimerInterrupt+0x30>)
 8008876:	2200      	movs	r2, #0
 8008878:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800887a:	4b0a      	ldr	r3, [pc, #40]	; (80088a4 <vPortSetupTimerInterrupt+0x34>)
 800887c:	2200      	movs	r2, #0
 800887e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008880:	4a09      	ldr	r2, [pc, #36]	; (80088a8 <vPortSetupTimerInterrupt+0x38>)
 8008882:	4b0a      	ldr	r3, [pc, #40]	; (80088ac <vPortSetupTimerInterrupt+0x3c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	490a      	ldr	r1, [pc, #40]	; (80088b0 <vPortSetupTimerInterrupt+0x40>)
 8008888:	fba1 1303 	umull	r1, r3, r1, r3
 800888c:	099b      	lsrs	r3, r3, #6
 800888e:	3b01      	subs	r3, #1
 8008890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008892:	4b03      	ldr	r3, [pc, #12]	; (80088a0 <vPortSetupTimerInterrupt+0x30>)
 8008894:	2207      	movs	r2, #7
 8008896:	601a      	str	r2, [r3, #0]
}
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	e000e010 	.word	0xe000e010
 80088a4:	e000e018 	.word	0xe000e018
 80088a8:	e000e014 	.word	0xe000e014
 80088ac:	2000ffc0 	.word	0x2000ffc0
 80088b0:	10624dd3 	.word	0x10624dd3

080088b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80088c4 <vPortEnableVFP+0x10>
 80088b8:	6801      	ldr	r1, [r0, #0]
 80088ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088be:	6001      	str	r1, [r0, #0]
 80088c0:	4770      	bx	lr
 80088c2:	0000      	.short	0x0000
 80088c4:	e000ed88 	.word	0xe000ed88

080088c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088ce:	f3ef 8305 	mrs	r3, IPSR
 80088d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2b0f      	cmp	r3, #15
 80088d8:	d913      	bls.n	8008902 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088da:	4a15      	ldr	r2, [pc, #84]	; (8008930 <vPortValidateInterruptPriority+0x68>)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4413      	add	r3, r2
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088e4:	4b13      	ldr	r3, [pc, #76]	; (8008934 <vPortValidateInterruptPriority+0x6c>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	7afa      	ldrb	r2, [r7, #11]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d209      	bcs.n	8008902 <vPortValidateInterruptPriority+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80088ee:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	607b      	str	r3, [r7, #4]
 8008900:	e7fe      	b.n	8008900 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008902:	4b0d      	ldr	r3, [pc, #52]	; (8008938 <vPortValidateInterruptPriority+0x70>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800890a:	4b0c      	ldr	r3, [pc, #48]	; (800893c <vPortValidateInterruptPriority+0x74>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	429a      	cmp	r2, r3
 8008910:	d909      	bls.n	8008926 <vPortValidateInterruptPriority+0x5e>
 8008912:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	603b      	str	r3, [r7, #0]
 8008924:	e7fe      	b.n	8008924 <vPortValidateInterruptPriority+0x5c>
	}
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	e000e3f0 	.word	0xe000e3f0
 8008934:	200006b4 	.word	0x200006b4
 8008938:	e000ed0c 	.word	0xe000ed0c
 800893c:	200006b8 	.word	0x200006b8

08008940 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8008948:	f001 f904 	bl	8009b54 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f006 fb71 	bl	800f034 <malloc>
 8008952:	4603      	mov	r3, r0
 8008954:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008956:	f001 f90b 	bl	8009b70 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800895a:	68fb      	ldr	r3, [r7, #12]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
	if( pv )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d006      	beq.n	8008980 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8008972:	f001 f8ef 	bl	8009b54 <vTaskSuspendAll>
		{
			free( pv );
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f006 fb64 	bl	800f044 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800897c:	f001 f8f8 	bl	8009b70 <xTaskResumeAll>
	}
}
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop

08008988 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f103 0208 	add.w	r2, r3, #8
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f04f 32ff 	mov.w	r2, #4294967295
 80089a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f103 0208 	add.w	r2, r3, #8
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f103 0208 	add.w	r2, r3, #8
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop

080089c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	683a      	ldr	r2, [r7, #0]
 8008a04:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	1c5a      	adds	r2, r3, #1
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	601a      	str	r2, [r3, #0]
}
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop

08008a28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3e:	d103      	bne.n	8008a48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	60fb      	str	r3, [r7, #12]
 8008a46:	e00c      	b.n	8008a62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	60fb      	str	r3, [r7, #12]
 8008a4e:	e002      	b.n	8008a56 <vListInsert+0x2e>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d9f6      	bls.n	8008a50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	685a      	ldr	r2, [r3, #4]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	1c5a      	adds	r2, r3, #1
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	601a      	str	r2, [r3, #0]
}
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	6892      	ldr	r2, [r2, #8]
 8008aae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	6852      	ldr	r2, [r2, #4]
 8008ab8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	685a      	ldr	r2, [r3, #4]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d103      	bne.n	8008acc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	689a      	ldr	r2, [r3, #8]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	1e5a      	subs	r2, r3, #1
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d109      	bne.n	8008b14 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b00:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	60bb      	str	r3, [r7, #8]
 8008b12:	e7fe      	b.n	8008b12 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008b14:	f7ff fdfe 	bl	8008714 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b20:	68f9      	ldr	r1, [r7, #12]
 8008b22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b24:	fb01 f303 	mul.w	r3, r1, r3
 8008b28:	441a      	add	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b44:	3b01      	subs	r3, #1
 8008b46:	68f9      	ldr	r1, [r7, #12]
 8008b48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b4a:	fb01 f303 	mul.w	r3, r1, r3
 8008b4e:	441a      	add	r2, r3
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	22ff      	movs	r2, #255	; 0xff
 8008b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	22ff      	movs	r2, #255	; 0xff
 8008b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d114      	bne.n	8008b94 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d01a      	beq.n	8008ba8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3310      	adds	r3, #16
 8008b76:	4618      	mov	r0, r3
 8008b78:	f001 fa08 	bl	8009f8c <xTaskRemoveFromEventList>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d012      	beq.n	8008ba8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b82:	4b0d      	ldr	r3, [pc, #52]	; (8008bb8 <xQueueGenericReset+0xcc>)
 8008b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b88:	601a      	str	r2, [r3, #0]
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	e009      	b.n	8008ba8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	3310      	adds	r3, #16
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7ff fef5 	bl	8008988 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	3324      	adds	r3, #36	; 0x24
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7ff fef0 	bl	8008988 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008ba8:	f7ff fde2 	bl	8008770 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008bac:	2301      	movs	r3, #1
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	e000ed04 	.word	0xe000ed04

08008bbc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008bbc:	b590      	push	{r4, r7, lr}
 8008bbe:	b08b      	sub	sp, #44	; 0x2c
 8008bc0:	af02      	add	r7, sp, #8
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d109      	bne.n	8008be4 <xQueueGenericCreate+0x28>
 8008bd0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	613b      	str	r3, [r7, #16]
 8008be2:	e7fe      	b.n	8008be2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d102      	bne.n	8008bf0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	61fb      	str	r3, [r7, #28]
 8008bee:	e004      	b.n	8008bfa <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	fb02 f303 	mul.w	r3, r2, r3
 8008bf8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	3354      	adds	r3, #84	; 0x54
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff fe9e 	bl	8008940 <pvPortMalloc>
 8008c04:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00d      	beq.n	8008c28 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	3354      	adds	r3, #84	; 0x54
 8008c14:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c16:	79fc      	ldrb	r4, [r7, #7]
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	68b9      	ldr	r1, [r7, #8]
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	4623      	mov	r3, r4
 8008c24:	f000 f806 	bl	8008c34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c28:	69bb      	ldr	r3, [r7, #24]
	}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3724      	adds	r7, #36	; 0x24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd90      	pop	{r4, r7, pc}
 8008c32:	bf00      	nop

08008c34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
 8008c40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d103      	bne.n	8008c50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	e002      	b.n	8008c56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008c62:	69b8      	ldr	r0, [r7, #24]
 8008c64:	2101      	movs	r1, #1
 8008c66:	f7ff ff41 	bl	8008aec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	78fa      	ldrb	r2, [r7, #3]
 8008c6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	2200      	movs	r2, #0
 8008c76:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop

08008c80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08e      	sub	sp, #56	; 0x38
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
 8008c8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d109      	bne.n	8008cb0 <xQueueGenericSend+0x30>
 8008c9c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	627b      	str	r3, [r7, #36]	; 0x24
 8008cae:	e7fe      	b.n	8008cae <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d103      	bne.n	8008cbe <xQueueGenericSend+0x3e>
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d101      	bne.n	8008cc2 <xQueueGenericSend+0x42>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e000      	b.n	8008cc4 <xQueueGenericSend+0x44>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d109      	bne.n	8008cdc <xQueueGenericSend+0x5c>
 8008cc8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	623b      	str	r3, [r7, #32]
 8008cda:	e7fe      	b.n	8008cda <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d103      	bne.n	8008cea <xQueueGenericSend+0x6a>
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d101      	bne.n	8008cee <xQueueGenericSend+0x6e>
 8008cea:	2301      	movs	r3, #1
 8008cec:	e000      	b.n	8008cf0 <xQueueGenericSend+0x70>
 8008cee:	2300      	movs	r3, #0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d109      	bne.n	8008d08 <xQueueGenericSend+0x88>
 8008cf4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	61fb      	str	r3, [r7, #28]
 8008d06:	e7fe      	b.n	8008d06 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d08:	f001 fae8 	bl	800a2dc <xTaskGetSchedulerState>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d102      	bne.n	8008d18 <xQueueGenericSend+0x98>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d101      	bne.n	8008d1c <xQueueGenericSend+0x9c>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e000      	b.n	8008d1e <xQueueGenericSend+0x9e>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d109      	bne.n	8008d36 <xQueueGenericSend+0xb6>
 8008d22:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	61bb      	str	r3, [r7, #24]
 8008d34:	e7fe      	b.n	8008d34 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d36:	f7ff fced 	bl	8008714 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d302      	bcc.n	8008d4c <xQueueGenericSend+0xcc>
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d148      	bne.n	8008dde <xQueueGenericSend+0x15e>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d50:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d54:	68b9      	ldr	r1, [r7, #8]
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	f000 fa36 	bl	80091c8 <prvCopyDataToQueue>
 8008d5c:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d017      	beq.n	8008d96 <xQueueGenericSend+0x116>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d104      	bne.n	8008d76 <xQueueGenericSend+0xf6>
 8008d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <xQueueGenericSend+0xf6>
 8008d72:	bf00      	nop
 8008d74:	e02f      	b.n	8008dd6 <xQueueGenericSend+0x156>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8008d76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	f000 fba3 	bl	80094c4 <prvNotifyQueueSetContainer>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d028      	beq.n	8008dd6 <xQueueGenericSend+0x156>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d84:	4b4c      	ldr	r3, [pc, #304]	; (8008eb8 <xQueueGenericSend+0x238>)
 8008d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d8a:	601a      	str	r2, [r3, #0]
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	e01f      	b.n	8008dd6 <xQueueGenericSend+0x156>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d010      	beq.n	8008dc0 <xQueueGenericSend+0x140>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da0:	3324      	adds	r3, #36	; 0x24
 8008da2:	4618      	mov	r0, r3
 8008da4:	f001 f8f2 	bl	8009f8c <xTaskRemoveFromEventList>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d013      	beq.n	8008dd6 <xQueueGenericSend+0x156>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8008dae:	4b42      	ldr	r3, [pc, #264]	; (8008eb8 <xQueueGenericSend+0x238>)
 8008db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	e00a      	b.n	8008dd6 <xQueueGenericSend+0x156>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8008dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d007      	beq.n	8008dd6 <xQueueGenericSend+0x156>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8008dc6:	4b3c      	ldr	r3, [pc, #240]	; (8008eb8 <xQueueGenericSend+0x238>)
 8008dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008dd6:	f7ff fccb 	bl	8008770 <vPortExitCritical>
				return pdPASS;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e067      	b.n	8008eae <xQueueGenericSend+0x22e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d103      	bne.n	8008dec <xQueueGenericSend+0x16c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008de4:	f7ff fcc4 	bl	8008770 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008de8:	2300      	movs	r3, #0
 8008dea:	e060      	b.n	8008eae <xQueueGenericSend+0x22e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d106      	bne.n	8008e00 <xQueueGenericSend+0x180>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008df2:	f107 0310 	add.w	r3, r7, #16
 8008df6:	4618      	mov	r0, r3
 8008df8:	f001 f92c 	bl	800a054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e00:	f7ff fcb6 	bl	8008770 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e04:	f000 fea6 	bl	8009b54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e08:	f7ff fc84 	bl	8008714 <vPortEnterCritical>
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	b25b      	sxtb	r3, r3
 8008e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1a:	d103      	bne.n	8008e24 <xQueueGenericSend+0x1a4>
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	b25b      	sxtb	r3, r3
 8008e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e32:	d103      	bne.n	8008e3c <xQueueGenericSend+0x1bc>
 8008e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e3c:	f7ff fc98 	bl	8008770 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e40:	f107 0210 	add.w	r2, r7, #16
 8008e44:	1d3b      	adds	r3, r7, #4
 8008e46:	4610      	mov	r0, r2
 8008e48:	4619      	mov	r1, r3
 8008e4a:	f001 f919 	bl	800a080 <xTaskCheckForTimeOut>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d124      	bne.n	8008e9e <xQueueGenericSend+0x21e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e56:	f000 fabf 	bl	80093d8 <prvIsQueueFull>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d018      	beq.n	8008e92 <xQueueGenericSend+0x212>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e62:	f103 0210 	add.w	r2, r3, #16
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4610      	mov	r0, r2
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	f001 f842 	bl	8009ef4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e72:	f000 fa3b 	bl	80092ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008e76:	f000 fe7b 	bl	8009b70 <xTaskResumeAll>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d115      	bne.n	8008eac <xQueueGenericSend+0x22c>
				{
					portYIELD_WITHIN_API();
 8008e80:	4b0d      	ldr	r3, [pc, #52]	; (8008eb8 <xQueueGenericSend+0x238>)
 8008e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e86:	601a      	str	r2, [r3, #0]
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	e00c      	b.n	8008eac <xQueueGenericSend+0x22c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e94:	f000 fa2a 	bl	80092ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e98:	f000 fe6a 	bl	8009b70 <xTaskResumeAll>
 8008e9c:	e74b      	b.n	8008d36 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008e9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ea0:	f000 fa24 	bl	80092ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ea4:	f000 fe64 	bl	8009b70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	e000      	b.n	8008eae <xQueueGenericSend+0x22e>
		}
	} /*lint -restore */
 8008eac:	e743      	b.n	8008d36 <xQueueGenericSend+0xb6>
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3738      	adds	r7, #56	; 0x38
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	e000ed04 	.word	0xe000ed04

08008ebc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b08e      	sub	sp, #56	; 0x38
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
 8008ec8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d109      	bne.n	8008ee8 <xQueueGenericSendFromISR+0x2c>
 8008ed4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ee6:	e7fe      	b.n	8008ee6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d103      	bne.n	8008ef6 <xQueueGenericSendFromISR+0x3a>
 8008eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <xQueueGenericSendFromISR+0x3e>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e000      	b.n	8008efc <xQueueGenericSendFromISR+0x40>
 8008efa:	2300      	movs	r3, #0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d109      	bne.n	8008f14 <xQueueGenericSendFromISR+0x58>
 8008f00:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	623b      	str	r3, [r7, #32]
 8008f12:	e7fe      	b.n	8008f12 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d103      	bne.n	8008f22 <xQueueGenericSendFromISR+0x66>
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d101      	bne.n	8008f26 <xQueueGenericSendFromISR+0x6a>
 8008f22:	2301      	movs	r3, #1
 8008f24:	e000      	b.n	8008f28 <xQueueGenericSendFromISR+0x6c>
 8008f26:	2300      	movs	r3, #0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d109      	bne.n	8008f40 <xQueueGenericSendFromISR+0x84>
 8008f2c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	61fb      	str	r3, [r7, #28]
 8008f3e:	e7fe      	b.n	8008f3e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f40:	f7ff fcc2 	bl	80088c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008f44:	f3ef 8211 	mrs	r2, BASEPRI
 8008f48:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008f4c:	f383 8811 	msr	BASEPRI, r3
 8008f50:	f3bf 8f6f 	isb	sy
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	61ba      	str	r2, [r7, #24]
 8008f5a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008f5c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d302      	bcc.n	8008f72 <xQueueGenericSendFromISR+0xb6>
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d13e      	bne.n	8008ff0 <xQueueGenericSendFromISR+0x134>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f7e:	68b9      	ldr	r1, [r7, #8]
 8008f80:	683a      	ldr	r2, [r7, #0]
 8008f82:	f000 f921 	bl	80091c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f86:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f8e:	d124      	bne.n	8008fda <xQueueGenericSendFromISR+0x11e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8008f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00d      	beq.n	8008fb4 <xQueueGenericSendFromISR+0xf8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8008f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	f000 fa92 	bl	80094c4 <prvNotifyQueueSetContainer>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d021      	beq.n	8008fea <xQueueGenericSendFromISR+0x12e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d01e      	beq.n	8008fea <xQueueGenericSendFromISR+0x12e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	e01a      	b.n	8008fea <xQueueGenericSendFromISR+0x12e>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d016      	beq.n	8008fea <xQueueGenericSendFromISR+0x12e>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbe:	3324      	adds	r3, #36	; 0x24
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 ffe3 	bl	8009f8c <xTaskRemoveFromEventList>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00e      	beq.n	8008fea <xQueueGenericSendFromISR+0x12e>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00b      	beq.n	8008fea <xQueueGenericSendFromISR+0x12e>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	601a      	str	r2, [r3, #0]
 8008fd8:	e007      	b.n	8008fea <xQueueGenericSendFromISR+0x12e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008fda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008fde:	3301      	adds	r3, #1
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008fea:	2301      	movs	r3, #1
 8008fec:	637b      	str	r3, [r7, #52]	; 0x34
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 8008fee:	e001      	b.n	8008ff4 <xQueueGenericSendFromISR+0x138>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009000:	4618      	mov	r0, r3
 8009002:	3738      	adds	r7, #56	; 0x38
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b08c      	sub	sp, #48	; 0x30
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009014:	2300      	movs	r3, #0
 8009016:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	2b00      	cmp	r3, #0
 8009020:	d109      	bne.n	8009036 <xQueueReceive+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009022:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	623b      	str	r3, [r7, #32]
 8009034:	e7fe      	b.n	8009034 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d103      	bne.n	8009044 <xQueueReceive+0x3c>
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <xQueueReceive+0x40>
 8009044:	2301      	movs	r3, #1
 8009046:	e000      	b.n	800904a <xQueueReceive+0x42>
 8009048:	2300      	movs	r3, #0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d109      	bne.n	8009062 <xQueueReceive+0x5a>
 800904e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	61fb      	str	r3, [r7, #28]
 8009060:	e7fe      	b.n	8009060 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009062:	f001 f93b 	bl	800a2dc <xTaskGetSchedulerState>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d102      	bne.n	8009072 <xQueueReceive+0x6a>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <xQueueReceive+0x6e>
 8009072:	2301      	movs	r3, #1
 8009074:	e000      	b.n	8009078 <xQueueReceive+0x70>
 8009076:	2300      	movs	r3, #0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d109      	bne.n	8009090 <xQueueReceive+0x88>
 800907c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	61bb      	str	r3, [r7, #24]
 800908e:	e7fe      	b.n	800908e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009090:	f7ff fb40 	bl	8008714 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009098:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800909a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909c:	2b00      	cmp	r3, #0
 800909e:	d01f      	beq.n	80090e0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80090a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090a2:	68b9      	ldr	r1, [r7, #8]
 80090a4:	f000 f8fc 	bl	80092a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	1e5a      	subs	r2, r3, #1
 80090ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00f      	beq.n	80090d8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ba:	3310      	adds	r3, #16
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 ff65 	bl	8009f8c <xTaskRemoveFromEventList>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d007      	beq.n	80090d8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80090c8:	4b3e      	ldr	r3, [pc, #248]	; (80091c4 <xQueueReceive+0x1bc>)
 80090ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090d8:	f7ff fb4a 	bl	8008770 <vPortExitCritical>
				return pdPASS;
 80090dc:	2301      	movs	r3, #1
 80090de:	e06d      	b.n	80091bc <xQueueReceive+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d103      	bne.n	80090ee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090e6:	f7ff fb43 	bl	8008770 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090ea:	2300      	movs	r3, #0
 80090ec:	e066      	b.n	80091bc <xQueueReceive+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d106      	bne.n	8009102 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090f4:	f107 0310 	add.w	r3, r7, #16
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 ffab 	bl	800a054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090fe:	2301      	movs	r3, #1
 8009100:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009102:	f7ff fb35 	bl	8008770 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009106:	f000 fd25 	bl	8009b54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800910a:	f7ff fb03 	bl	8008714 <vPortEnterCritical>
 800910e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009114:	b2db      	uxtb	r3, r3
 8009116:	b25b      	sxtb	r3, r3
 8009118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911c:	d103      	bne.n	8009126 <xQueueReceive+0x11e>
 800911e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800912c:	b2db      	uxtb	r3, r3
 800912e:	b25b      	sxtb	r3, r3
 8009130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009134:	d103      	bne.n	800913e <xQueueReceive+0x136>
 8009136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800913e:	f7ff fb17 	bl	8008770 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009142:	f107 0210 	add.w	r2, r7, #16
 8009146:	1d3b      	adds	r3, r7, #4
 8009148:	4610      	mov	r0, r2
 800914a:	4619      	mov	r1, r3
 800914c:	f000 ff98 	bl	800a080 <xTaskCheckForTimeOut>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d124      	bne.n	80091a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009158:	f000 f928 	bl	80093ac <prvIsQueueEmpty>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d018      	beq.n	8009194 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009164:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4610      	mov	r0, r2
 800916c:	4619      	mov	r1, r3
 800916e:	f000 fec1 	bl	8009ef4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009174:	f000 f8ba 	bl	80092ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009178:	f000 fcfa 	bl	8009b70 <xTaskResumeAll>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d11b      	bne.n	80091ba <xQueueReceive+0x1b2>
				{
					portYIELD_WITHIN_API();
 8009182:	4b10      	ldr	r3, [pc, #64]	; (80091c4 <xQueueReceive+0x1bc>)
 8009184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	e012      	b.n	80091ba <xQueueReceive+0x1b2>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009196:	f000 f8a9 	bl	80092ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800919a:	f000 fce9 	bl	8009b70 <xTaskResumeAll>
 800919e:	e777      	b.n	8009090 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80091a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091a2:	f000 f8a3 	bl	80092ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091a6:	f000 fce3 	bl	8009b70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ac:	f000 f8fe 	bl	80093ac <prvIsQueueEmpty>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <xQueueReceive+0x1b2>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091b6:	2300      	movs	r3, #0
 80091b8:	e000      	b.n	80091bc <xQueueReceive+0x1b4>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
 80091ba:	e769      	b.n	8009090 <xQueueReceive+0x88>
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3730      	adds	r7, #48	; 0x30
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	e000ed04 	.word	0xe000ed04

080091c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b086      	sub	sp, #24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80091d4:	2300      	movs	r3, #0
 80091d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10d      	bne.n	8009202 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d14f      	bne.n	800928e <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f001 f890 	bl	800a318 <xTaskPriorityDisinherit>
 80091f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	609a      	str	r2, [r3, #8]
 8009200:	e045      	b.n	800928e <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d11a      	bne.n	800923e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009210:	4610      	mov	r0, r2
 8009212:	68b9      	ldr	r1, [r7, #8]
 8009214:	461a      	mov	r2, r3
 8009216:	f005 ff1d 	bl	800f054 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009222:	441a      	add	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	429a      	cmp	r2, r3
 8009232:	d32c      	bcc.n	800928e <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	605a      	str	r2, [r3, #4]
 800923c:	e027      	b.n	800928e <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	68da      	ldr	r2, [r3, #12]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009246:	4610      	mov	r0, r2
 8009248:	68b9      	ldr	r1, [r7, #8]
 800924a:	461a      	mov	r2, r3
 800924c:	f005 ff02 	bl	800f054 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	68da      	ldr	r2, [r3, #12]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009258:	425b      	negs	r3, r3
 800925a:	441a      	add	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	68da      	ldr	r2, [r3, #12]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	429a      	cmp	r2, r3
 800926a:	d207      	bcs.n	800927c <prvCopyDataToQueue+0xb4>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	689a      	ldr	r2, [r3, #8]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009274:	425b      	negs	r3, r3
 8009276:	441a      	add	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b02      	cmp	r3, #2
 8009280:	d105      	bne.n	800928e <prvCopyDataToQueue+0xc6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d002      	beq.n	800928e <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	3b01      	subs	r3, #1
 800928c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	1c5a      	adds	r2, r3, #1
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009296:	697b      	ldr	r3, [r7, #20]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3718      	adds	r7, #24
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d019      	beq.n	80092e6 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	68da      	ldr	r2, [r3, #12]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	441a      	add	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	68da      	ldr	r2, [r3, #12]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d303      	bcc.n	80092d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	68da      	ldr	r2, [r3, #12]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092dc:	6838      	ldr	r0, [r7, #0]
 80092de:	4611      	mov	r1, r2
 80092e0:	461a      	mov	r2, r3
 80092e2:	f005 feb7 	bl	800f054 <memcpy>
	}
}
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80092f4:	f7ff fa0e 	bl	8008714 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009300:	e021      	b.n	8009346 <prvUnlockQueue+0x5a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009306:	2b00      	cmp	r3, #0
 8009308:	d009      	beq.n	800931e <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	2100      	movs	r1, #0
 800930e:	f000 f8d9 	bl	80094c4 <prvNotifyQueueSetContainer>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d012      	beq.n	800933e <prvUnlockQueue+0x52>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8009318:	f000 ff22 	bl	800a160 <vTaskMissedYield>
 800931c:	e00f      	b.n	800933e <prvUnlockQueue+0x52>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00a      	beq.n	800933c <prvUnlockQueue+0x50>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	3324      	adds	r3, #36	; 0x24
 800932a:	4618      	mov	r0, r3
 800932c:	f000 fe2e 	bl	8009f8c <xTaskRemoveFromEventList>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d003      	beq.n	800933e <prvUnlockQueue+0x52>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8009336:	f000 ff13 	bl	800a160 <vTaskMissedYield>
 800933a:	e000      	b.n	800933e <prvUnlockQueue+0x52>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
 800933c:	e007      	b.n	800934e <prvUnlockQueue+0x62>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800933e:	7bfb      	ldrb	r3, [r7, #15]
 8009340:	3b01      	subs	r3, #1
 8009342:	b2db      	uxtb	r3, r3
 8009344:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800934a:	2b00      	cmp	r3, #0
 800934c:	dcd9      	bgt.n	8009302 <prvUnlockQueue+0x16>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	22ff      	movs	r2, #255	; 0xff
 8009352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009356:	f7ff fa0b 	bl	8008770 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800935a:	f7ff f9db 	bl	8008714 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009364:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009366:	e013      	b.n	8009390 <prvUnlockQueue+0xa4>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00e      	beq.n	800938e <prvUnlockQueue+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3310      	adds	r3, #16
 8009374:	4618      	mov	r0, r3
 8009376:	f000 fe09 	bl	8009f8c <xTaskRemoveFromEventList>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d001      	beq.n	8009384 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 8009380:	f000 feee 	bl	800a160 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009384:	7bbb      	ldrb	r3, [r7, #14]
 8009386:	3b01      	subs	r3, #1
 8009388:	b2db      	uxtb	r3, r3
 800938a:	73bb      	strb	r3, [r7, #14]
 800938c:	e000      	b.n	8009390 <prvUnlockQueue+0xa4>
			}
			else
			{
				break;
 800938e:	e003      	b.n	8009398 <prvUnlockQueue+0xac>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009394:	2b00      	cmp	r3, #0
 8009396:	dce7      	bgt.n	8009368 <prvUnlockQueue+0x7c>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	22ff      	movs	r2, #255	; 0xff
 800939c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80093a0:	f7ff f9e6 	bl	8008770 <vPortExitCritical>
}
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop

080093ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093b4:	f7ff f9ae 	bl	8008714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d102      	bne.n	80093c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80093c0:	2301      	movs	r3, #1
 80093c2:	60fb      	str	r3, [r7, #12]
 80093c4:	e001      	b.n	80093ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80093c6:	2300      	movs	r3, #0
 80093c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093ca:	f7ff f9d1 	bl	8008770 <vPortExitCritical>

	return xReturn;
 80093ce:	68fb      	ldr	r3, [r7, #12]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093e0:	f7ff f998 	bl	8008714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d102      	bne.n	80093f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80093f0:	2301      	movs	r3, #1
 80093f2:	60fb      	str	r3, [r7, #12]
 80093f4:	e001      	b.n	80093fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80093f6:	2300      	movs	r3, #0
 80093f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093fa:	f7ff f9b9 	bl	8008770 <vPortExitCritical>

	return xReturn;
 80093fe:	68fb      	ldr	r3, [r7, #12]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009412:	2300      	movs	r3, #0
 8009414:	60fb      	str	r3, [r7, #12]
 8009416:	e014      	b.n	8009442 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009418:	4a0e      	ldr	r2, [pc, #56]	; (8009454 <vQueueAddToRegistry+0x4c>)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10b      	bne.n	800943c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009424:	490b      	ldr	r1, [pc, #44]	; (8009454 <vQueueAddToRegistry+0x4c>)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	683a      	ldr	r2, [r7, #0]
 800942a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800942e:	4a09      	ldr	r2, [pc, #36]	; (8009454 <vQueueAddToRegistry+0x4c>)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	00db      	lsls	r3, r3, #3
 8009434:	4413      	add	r3, r2
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800943a:	e005      	b.n	8009448 <vQueueAddToRegistry+0x40>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	3301      	adds	r3, #1
 8009440:	60fb      	str	r3, [r7, #12]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b07      	cmp	r3, #7
 8009446:	d9e7      	bls.n	8009418 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009448:	3714      	adds	r7, #20
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	200011cc 	.word	0x200011cc

08009458 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009468:	f7ff f954 	bl	8008714 <vPortEnterCritical>
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009472:	b2db      	uxtb	r3, r3
 8009474:	b25b      	sxtb	r3, r3
 8009476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947a:	d103      	bne.n	8009484 <vQueueWaitForMessageRestricted+0x2c>
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800948a:	b2db      	uxtb	r3, r3
 800948c:	b25b      	sxtb	r3, r3
 800948e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009492:	d103      	bne.n	800949c <vQueueWaitForMessageRestricted+0x44>
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800949c:	f7ff f968 	bl	8008770 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d106      	bne.n	80094b6 <vQueueWaitForMessageRestricted+0x5e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	3324      	adds	r3, #36	; 0x24
 80094ac:	4618      	mov	r0, r3
 80094ae:	68b9      	ldr	r1, [r7, #8]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	f000 fd41 	bl	8009f38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80094b6:	6978      	ldr	r0, [r7, #20]
 80094b8:	f7ff ff18 	bl	80092ec <prvUnlockQueue>
	}
 80094bc:	3718      	adds	r7, #24
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop

080094c4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b088      	sub	sp, #32
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094d2:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 80094d4:	2300      	movs	r3, #0
 80094d6:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d109      	bne.n	80094f2 <prvNotifyQueueSetContainer+0x2e>
 80094de:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	613b      	str	r3, [r7, #16]
 80094f0:	e7fe      	b.n	80094f0 <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d309      	bcc.n	8009512 <prvNotifyQueueSetContainer+0x4e>
 80094fe:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	e7fe      	b.n	8009510 <prvNotifyQueueSetContainer+0x4c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951a:	429a      	cmp	r2, r3
 800951c:	d226      	bcs.n	800956c <prvNotifyQueueSetContainer+0xa8>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009524:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 8009526:	1d3b      	adds	r3, r7, #4
 8009528:	69b8      	ldr	r0, [r7, #24]
 800952a:	4619      	mov	r1, r3
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	f7ff fe4b 	bl	80091c8 <prvCopyDataToQueue>
 8009532:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8009534:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953c:	d10e      	bne.n	800955c <prvNotifyQueueSetContainer+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009542:	2b00      	cmp	r3, #0
 8009544:	d012      	beq.n	800956c <prvNotifyQueueSetContainer+0xa8>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	3324      	adds	r3, #36	; 0x24
 800954a:	4618      	mov	r0, r3
 800954c:	f000 fd1e 	bl	8009f8c <xTaskRemoveFromEventList>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00a      	beq.n	800956c <prvNotifyQueueSetContainer+0xa8>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8009556:	2301      	movs	r3, #1
 8009558:	61fb      	str	r3, [r7, #28]
 800955a:	e007      	b.n	800956c <prvNotifyQueueSetContainer+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800955c:	7dfb      	ldrb	r3, [r7, #23]
 800955e:	3301      	adds	r3, #1
 8009560:	b2db      	uxtb	r3, r3
 8009562:	b2da      	uxtb	r2, r3
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800956a:	e7ff      	b.n	800956c <prvNotifyQueueSetContainer+0xa8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800956c:	69fb      	ldr	r3, [r7, #28]
	}
 800956e:	4618      	mov	r0, r3
 8009570:	3720      	adds	r7, #32
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop

08009578 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009578:	b580      	push	{r7, lr}
 800957a:	b08c      	sub	sp, #48	; 0x30
 800957c:	af04      	add	r7, sp, #16
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	603b      	str	r3, [r7, #0]
 8009584:	4613      	mov	r3, r2
 8009586:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009588:	88fb      	ldrh	r3, [r7, #6]
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4618      	mov	r0, r3
 800958e:	f7ff f9d7 	bl	8008940 <pvPortMalloc>
 8009592:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00e      	beq.n	80095b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800959a:	2070      	movs	r0, #112	; 0x70
 800959c:	f7ff f9d0 	bl	8008940 <pvPortMalloc>
 80095a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d003      	beq.n	80095b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	631a      	str	r2, [r3, #48]	; 0x30
 80095ae:	e005      	b.n	80095bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80095b0:	6978      	ldr	r0, [r7, #20]
 80095b2:	f7ff f9d7 	bl	8008964 <vPortFree>
 80095b6:	e001      	b.n	80095bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80095b8:	2300      	movs	r3, #0
 80095ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d013      	beq.n	80095ea <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80095c2:	88fa      	ldrh	r2, [r7, #6]
 80095c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ca:	9301      	str	r3, [sp, #4]
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	9302      	str	r3, [sp, #8]
 80095d0:	2300      	movs	r3, #0
 80095d2:	9303      	str	r3, [sp, #12]
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	68b9      	ldr	r1, [r7, #8]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	f000 f80f 	bl	80095fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095de:	69f8      	ldr	r0, [r7, #28]
 80095e0:	f000 f8ae 	bl	8009740 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80095e4:	2301      	movs	r3, #1
 80095e6:	61bb      	str	r3, [r7, #24]
 80095e8:	e002      	b.n	80095f0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80095ea:	f04f 33ff 	mov.w	r3, #4294967295
 80095ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80095f0:	69bb      	ldr	r3, [r7, #24]
	}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3720      	adds	r7, #32
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop

080095fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b088      	sub	sp, #32
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
 8009608:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800960a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4610      	mov	r0, r2
 8009614:	21a5      	movs	r1, #165	; 0xa5
 8009616:	461a      	mov	r2, r3
 8009618:	f005 fd27 	bl	800f06a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009626:	3b01      	subs	r3, #1
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	4413      	add	r3, r2
 800962c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	f023 0307 	bic.w	r3, r3, #7
 8009634:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	f003 0307 	and.w	r3, r3, #7
 800963c:	2b00      	cmp	r3, #0
 800963e:	d009      	beq.n	8009654 <prvInitialiseNewTask+0x58>
 8009640:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	617b      	str	r3, [r7, #20]
 8009652:	e7fe      	b.n	8009652 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d01e      	beq.n	8009698 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800965a:	2300      	movs	r3, #0
 800965c:	61fb      	str	r3, [r7, #28]
 800965e:	e013      	b.n	8009688 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	4413      	add	r3, r2
 8009666:	7819      	ldrb	r1, [r3, #0]
 8009668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	4413      	add	r3, r2
 800966e:	3330      	adds	r3, #48	; 0x30
 8009670:	460a      	mov	r2, r1
 8009672:	711a      	strb	r2, [r3, #4]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	4413      	add	r3, r2
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d100      	bne.n	8009682 <prvInitialiseNewTask+0x86>
			{
				break;
 8009680:	e005      	b.n	800968e <prvInitialiseNewTask+0x92>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	3301      	adds	r3, #1
 8009686:	61fb      	str	r3, [r7, #28]
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	2b0f      	cmp	r3, #15
 800968c:	d9e8      	bls.n	8009660 <prvInitialiseNewTask+0x64>
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800968e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009696:	e003      	b.n	80096a0 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969a:	2200      	movs	r2, #0
 800969c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80096a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a2:	2b05      	cmp	r3, #5
 80096a4:	d901      	bls.n	80096aa <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096a6:	2305      	movs	r3, #5
 80096a8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096ae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096b4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80096b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b8:	2200      	movs	r2, #0
 80096ba:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	3304      	adds	r3, #4
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7ff f981 	bl	80089c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80096c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c8:	3318      	adds	r3, #24
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7ff f97c 	bl	80089c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80096d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d8:	f1c3 0206 	rsb	r2, r3, #6
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80096e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096e4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 80096e6:	2300      	movs	r3, #0
 80096e8:	61fb      	str	r3, [r7, #28]
 80096ea:	e009      	b.n	8009700 <prvInitialiseNewTask+0x104>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 80096ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	3314      	adds	r3, #20
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4413      	add	r3, r2
 80096f6:	2200      	movs	r2, #0
 80096f8:	605a      	str	r2, [r3, #4]
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	3301      	adds	r3, #1
 80096fe:	61fb      	str	r3, [r7, #28]
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	2b04      	cmp	r3, #4
 8009704:	d9f2      	bls.n	80096ec <prvInitialiseNewTask+0xf0>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	2200      	movs	r2, #0
 800970a:	669a      	str	r2, [r3, #104]	; 0x68
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800970c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970e:	2200      	movs	r2, #0
 8009710:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8009714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009716:	2200      	movs	r2, #0
 8009718:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800971c:	69b8      	ldr	r0, [r7, #24]
 800971e:	68f9      	ldr	r1, [r7, #12]
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	f7fe fed1 	bl	80084c8 <pxPortInitialiseStack>
 8009726:	4602      	mov	r2, r0
 8009728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800972c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972e:	2b00      	cmp	r3, #0
 8009730:	d002      	beq.n	8009738 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009736:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009738:	3720      	adds	r7, #32
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop

08009740 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009748:	f7fe ffe4 	bl	8008714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800974c:	4b2d      	ldr	r3, [pc, #180]	; (8009804 <prvAddNewTaskToReadyList+0xc4>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	3301      	adds	r3, #1
 8009752:	4a2c      	ldr	r2, [pc, #176]	; (8009804 <prvAddNewTaskToReadyList+0xc4>)
 8009754:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009756:	4b2c      	ldr	r3, [pc, #176]	; (8009808 <prvAddNewTaskToReadyList+0xc8>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d109      	bne.n	8009772 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800975e:	4a2a      	ldr	r2, [pc, #168]	; (8009808 <prvAddNewTaskToReadyList+0xc8>)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009764:	4b27      	ldr	r3, [pc, #156]	; (8009804 <prvAddNewTaskToReadyList+0xc4>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2b01      	cmp	r3, #1
 800976a:	d110      	bne.n	800978e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800976c:	f000 fd1c 	bl	800a1a8 <prvInitialiseTaskLists>
 8009770:	e00d      	b.n	800978e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009772:	4b26      	ldr	r3, [pc, #152]	; (800980c <prvAddNewTaskToReadyList+0xcc>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d109      	bne.n	800978e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800977a:	4b23      	ldr	r3, [pc, #140]	; (8009808 <prvAddNewTaskToReadyList+0xc8>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009784:	429a      	cmp	r2, r3
 8009786:	d802      	bhi.n	800978e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009788:	4a1f      	ldr	r2, [pc, #124]	; (8009808 <prvAddNewTaskToReadyList+0xc8>)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800978e:	4b20      	ldr	r3, [pc, #128]	; (8009810 <prvAddNewTaskToReadyList+0xd0>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	3301      	adds	r3, #1
 8009794:	4a1e      	ldr	r2, [pc, #120]	; (8009810 <prvAddNewTaskToReadyList+0xd0>)
 8009796:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009798:	4b1d      	ldr	r3, [pc, #116]	; (8009810 <prvAddNewTaskToReadyList+0xd0>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a4:	461a      	mov	r2, r3
 80097a6:	2301      	movs	r3, #1
 80097a8:	fa03 f202 	lsl.w	r2, r3, r2
 80097ac:	4b19      	ldr	r3, [pc, #100]	; (8009814 <prvAddNewTaskToReadyList+0xd4>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	4a18      	ldr	r2, [pc, #96]	; (8009814 <prvAddNewTaskToReadyList+0xd4>)
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ba:	4613      	mov	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4a15      	ldr	r2, [pc, #84]	; (8009818 <prvAddNewTaskToReadyList+0xd8>)
 80097c4:	441a      	add	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	3304      	adds	r3, #4
 80097ca:	4610      	mov	r0, r2
 80097cc:	4619      	mov	r1, r3
 80097ce:	f7ff f907 	bl	80089e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097d2:	f7fe ffcd 	bl	8008770 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80097d6:	4b0d      	ldr	r3, [pc, #52]	; (800980c <prvAddNewTaskToReadyList+0xcc>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00e      	beq.n	80097fc <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80097de:	4b0a      	ldr	r3, [pc, #40]	; (8009808 <prvAddNewTaskToReadyList+0xc8>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d207      	bcs.n	80097fc <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80097ec:	4b0b      	ldr	r3, [pc, #44]	; (800981c <prvAddNewTaskToReadyList+0xdc>)
 80097ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	200007a8 	.word	0x200007a8
 8009808:	200006bc 	.word	0x200006bc
 800980c:	200007b4 	.word	0x200007b4
 8009810:	200007c4 	.word	0x200007c4
 8009814:	200007b0 	.word	0x200007b0
 8009818:	200006c0 	.word	0x200006c0
 800981c:	e000ed04 	.word	0xe000ed04

08009820 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009828:	2300      	movs	r3, #0
 800982a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d016      	beq.n	8009860 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009832:	4b12      	ldr	r3, [pc, #72]	; (800987c <vTaskDelay+0x5c>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d009      	beq.n	800984e <vTaskDelay+0x2e>
 800983a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800983e:	f383 8811 	msr	BASEPRI, r3
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	f3bf 8f4f 	dsb	sy
 800984a:	60bb      	str	r3, [r7, #8]
 800984c:	e7fe      	b.n	800984c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800984e:	f000 f981 	bl	8009b54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	2100      	movs	r1, #0
 8009856:	f000 fde5 	bl	800a424 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800985a:	f000 f989 	bl	8009b70 <xTaskResumeAll>
 800985e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d107      	bne.n	8009876 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009866:	4b06      	ldr	r3, [pc, #24]	; (8009880 <vTaskDelay+0x60>)
 8009868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	200007d0 	.word	0x200007d0
 8009880:	e000ed04 	.word	0xe000ed04

08009884 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800988c:	f7fe ff42 	bl	8008714 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d102      	bne.n	800989c <vTaskSuspend+0x18>
 8009896:	4b3b      	ldr	r3, [pc, #236]	; (8009984 <vTaskSuspend+0x100>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	e000      	b.n	800989e <vTaskSuspend+0x1a>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	3304      	adds	r3, #4
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7ff f8f7 	bl	8008a98 <uxListRemove>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d115      	bne.n	80098dc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b4:	4934      	ldr	r1, [pc, #208]	; (8009988 <vTaskSuspend+0x104>)
 80098b6:	4613      	mov	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4413      	add	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	440b      	add	r3, r1
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10a      	bne.n	80098dc <vTaskSuspend+0x58>
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ca:	461a      	mov	r2, r3
 80098cc:	2301      	movs	r3, #1
 80098ce:	4093      	lsls	r3, r2
 80098d0:	43da      	mvns	r2, r3
 80098d2:	4b2e      	ldr	r3, [pc, #184]	; (800998c <vTaskSuspend+0x108>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4013      	ands	r3, r2
 80098d8:	4a2c      	ldr	r2, [pc, #176]	; (800998c <vTaskSuspend+0x108>)
 80098da:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d004      	beq.n	80098ee <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	3318      	adds	r3, #24
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7ff f8d5 	bl	8008a98 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3304      	adds	r3, #4
 80098f2:	4827      	ldr	r0, [pc, #156]	; (8009990 <vTaskSuspend+0x10c>)
 80098f4:	4619      	mov	r1, r3
 80098f6:	f7ff f873 	bl	80089e0 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b01      	cmp	r3, #1
 8009904:	d103      	bne.n	800990e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2200      	movs	r2, #0
 800990a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800990e:	f7fe ff2f 	bl	8008770 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009912:	4b20      	ldr	r3, [pc, #128]	; (8009994 <vTaskSuspend+0x110>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d005      	beq.n	8009926 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800991a:	f7fe fefb 	bl	8008714 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800991e:	f000 fcbd 	bl	800a29c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009922:	f7fe ff25 	bl	8008770 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009926:	4b17      	ldr	r3, [pc, #92]	; (8009984 <vTaskSuspend+0x100>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	429a      	cmp	r2, r3
 800992e:	d126      	bne.n	800997e <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8009930:	4b18      	ldr	r3, [pc, #96]	; (8009994 <vTaskSuspend+0x110>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d016      	beq.n	8009966 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009938:	4b17      	ldr	r3, [pc, #92]	; (8009998 <vTaskSuspend+0x114>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d009      	beq.n	8009954 <vTaskSuspend+0xd0>
 8009940:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	60bb      	str	r3, [r7, #8]
 8009952:	e7fe      	b.n	8009952 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8009954:	4b11      	ldr	r3, [pc, #68]	; (800999c <vTaskSuspend+0x118>)
 8009956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800995a:	601a      	str	r2, [r3, #0]
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	e00b      	b.n	800997e <vTaskSuspend+0xfa>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009966:	4b0a      	ldr	r3, [pc, #40]	; (8009990 <vTaskSuspend+0x10c>)
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	4b0d      	ldr	r3, [pc, #52]	; (80099a0 <vTaskSuspend+0x11c>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	429a      	cmp	r2, r3
 8009970:	d103      	bne.n	800997a <vTaskSuspend+0xf6>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8009972:	4b04      	ldr	r3, [pc, #16]	; (8009984 <vTaskSuspend+0x100>)
 8009974:	2200      	movs	r2, #0
 8009976:	601a      	str	r2, [r3, #0]
 8009978:	e001      	b.n	800997e <vTaskSuspend+0xfa>
				}
				else
				{
					vTaskSwitchContext();
 800997a:	f000 fa61 	bl	8009e40 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	200006bc 	.word	0x200006bc
 8009988:	200006c0 	.word	0x200006c0
 800998c:	200007b0 	.word	0x200007b0
 8009990:	20000794 	.word	0x20000794
 8009994:	200007b4 	.word	0x200007b4
 8009998:	200007d0 	.word	0x200007d0
 800999c:	e000ed04 	.word	0xe000ed04
 80099a0:	200007a8 	.word	0x200007a8

080099a4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80099a4:	b480      	push	{r7}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80099ac:	2300      	movs	r3, #0
 80099ae:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d109      	bne.n	80099ce <prvTaskIsTaskSuspended+0x2a>
 80099ba:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	60fb      	str	r3, [r7, #12]
 80099cc:	e7fe      	b.n	80099cc <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	4a0a      	ldr	r2, [pc, #40]	; (80099fc <prvTaskIsTaskSuspended+0x58>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d10a      	bne.n	80099ee <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099dc:	4a08      	ldr	r2, [pc, #32]	; (8009a00 <prvTaskIsTaskSuspended+0x5c>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d005      	beq.n	80099ee <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d101      	bne.n	80099ee <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 80099ea:	2301      	movs	r3, #1
 80099ec:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099ee:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80099f0:	4618      	mov	r0, r3
 80099f2:	371c      	adds	r7, #28
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	20000794 	.word	0x20000794
 8009a00:	20000768 	.word	0x20000768

08009a04 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d109      	bne.n	8009a2a <vTaskResume+0x26>
 8009a16:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	60bb      	str	r3, [r7, #8]
 8009a28:	e7fe      	b.n	8009a28 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8009a2a:	4b21      	ldr	r3, [pc, #132]	; (8009ab0 <vTaskResume+0xac>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d039      	beq.n	8009aa8 <vTaskResume+0xa4>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d036      	beq.n	8009aa8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8009a3a:	f7fe fe6b 	bl	8008714 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f7ff ffb0 	bl	80099a4 <prvTaskIsTaskSuspended>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d02c      	beq.n	8009aa4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7ff f822 	bl	8008a98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a58:	461a      	mov	r2, r3
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	fa03 f202 	lsl.w	r2, r3, r2
 8009a60:	4b14      	ldr	r3, [pc, #80]	; (8009ab4 <vTaskResume+0xb0>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	4a13      	ldr	r2, [pc, #76]	; (8009ab4 <vTaskResume+0xb0>)
 8009a68:	6013      	str	r3, [r2, #0]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a6e:	4613      	mov	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4a10      	ldr	r2, [pc, #64]	; (8009ab8 <vTaskResume+0xb4>)
 8009a78:	441a      	add	r2, r3
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	4610      	mov	r0, r2
 8009a80:	4619      	mov	r1, r3
 8009a82:	f7fe ffad 	bl	80089e0 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a8a:	4b09      	ldr	r3, [pc, #36]	; (8009ab0 <vTaskResume+0xac>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d307      	bcc.n	8009aa4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8009a94:	4b09      	ldr	r3, [pc, #36]	; (8009abc <vTaskResume+0xb8>)
 8009a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a9a:	601a      	str	r2, [r3, #0]
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8009aa4:	f7fe fe64 	bl	8008770 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	200006bc 	.word	0x200006bc
 8009ab4:	200007b0 	.word	0x200007b0
 8009ab8:	200006c0 	.word	0x200006c0
 8009abc:	e000ed04 	.word	0xe000ed04

08009ac0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b086      	sub	sp, #24
 8009ac4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	4b1c      	ldr	r3, [pc, #112]	; (8009b3c <vTaskStartScheduler+0x7c>)
 8009acc:	9301      	str	r3, [sp, #4]
 8009ace:	481c      	ldr	r0, [pc, #112]	; (8009b40 <vTaskStartScheduler+0x80>)
 8009ad0:	491c      	ldr	r1, [pc, #112]	; (8009b44 <vTaskStartScheduler+0x84>)
 8009ad2:	2282      	movs	r2, #130	; 0x82
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	f7ff fd4f 	bl	8009578 <xTaskCreate>
 8009ada:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d102      	bne.n	8009ae8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8009ae2:	f000 fd09 	bl	800a4f8 <xTimerCreateTimerTask>
 8009ae6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d115      	bne.n	8009b1a <vTaskStartScheduler+0x5a>
 8009aee:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b00:	4b11      	ldr	r3, [pc, #68]	; (8009b48 <vTaskStartScheduler+0x88>)
 8009b02:	f04f 32ff 	mov.w	r2, #4294967295
 8009b06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b08:	4b10      	ldr	r3, [pc, #64]	; (8009b4c <vTaskStartScheduler+0x8c>)
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009b0e:	4b10      	ldr	r3, [pc, #64]	; (8009b50 <vTaskStartScheduler+0x90>)
 8009b10:	2200      	movs	r2, #0
 8009b12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b14:	f7fe fd60 	bl	80085d8 <xPortStartScheduler>
 8009b18:	e00d      	b.n	8009b36 <vTaskStartScheduler+0x76>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b20:	d109      	bne.n	8009b36 <vTaskStartScheduler+0x76>
 8009b22:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	607b      	str	r3, [r7, #4]
 8009b34:	e7fe      	b.n	8009b34 <vTaskStartScheduler+0x74>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	200007cc 	.word	0x200007cc
 8009b40:	0800a179 	.word	0x0800a179
 8009b44:	0800f608 	.word	0x0800f608
 8009b48:	200007c8 	.word	0x200007c8
 8009b4c:	200007b4 	.word	0x200007b4
 8009b50:	200007ac 	.word	0x200007ac

08009b54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b54:	b480      	push	{r7}
 8009b56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009b58:	4b04      	ldr	r3, [pc, #16]	; (8009b6c <vTaskSuspendAll+0x18>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	4a03      	ldr	r2, [pc, #12]	; (8009b6c <vTaskSuspendAll+0x18>)
 8009b60:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	200007d0 	.word	0x200007d0

08009b70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b76:	2300      	movs	r3, #0
 8009b78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b7e:	4b42      	ldr	r3, [pc, #264]	; (8009c88 <xTaskResumeAll+0x118>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d109      	bne.n	8009b9a <xTaskResumeAll+0x2a>
 8009b86:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009b8a:	f383 8811 	msr	BASEPRI, r3
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	603b      	str	r3, [r7, #0]
 8009b98:	e7fe      	b.n	8009b98 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b9a:	f7fe fdbb 	bl	8008714 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b9e:	4b3a      	ldr	r3, [pc, #232]	; (8009c88 <xTaskResumeAll+0x118>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	4a38      	ldr	r2, [pc, #224]	; (8009c88 <xTaskResumeAll+0x118>)
 8009ba6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ba8:	4b37      	ldr	r3, [pc, #220]	; (8009c88 <xTaskResumeAll+0x118>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d163      	bne.n	8009c78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009bb0:	4b36      	ldr	r3, [pc, #216]	; (8009c8c <xTaskResumeAll+0x11c>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d05f      	beq.n	8009c78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bb8:	e030      	b.n	8009c1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bba:	4b35      	ldr	r3, [pc, #212]	; (8009c90 <xTaskResumeAll+0x120>)
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	3318      	adds	r3, #24
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fe ff66 	bl	8008a98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	3304      	adds	r3, #4
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fe ff61 	bl	8008a98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bda:	461a      	mov	r2, r3
 8009bdc:	2301      	movs	r3, #1
 8009bde:	fa03 f202 	lsl.w	r2, r3, r2
 8009be2:	4b2c      	ldr	r3, [pc, #176]	; (8009c94 <xTaskResumeAll+0x124>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	4a2a      	ldr	r2, [pc, #168]	; (8009c94 <xTaskResumeAll+0x124>)
 8009bea:	6013      	str	r3, [r2, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4413      	add	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4a27      	ldr	r2, [pc, #156]	; (8009c98 <xTaskResumeAll+0x128>)
 8009bfa:	441a      	add	r2, r3
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	3304      	adds	r3, #4
 8009c00:	4610      	mov	r0, r2
 8009c02:	4619      	mov	r1, r3
 8009c04:	f7fe feec 	bl	80089e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0c:	4b23      	ldr	r3, [pc, #140]	; (8009c9c <xTaskResumeAll+0x12c>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d302      	bcc.n	8009c1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009c16:	4b22      	ldr	r3, [pc, #136]	; (8009ca0 <xTaskResumeAll+0x130>)
 8009c18:	2201      	movs	r2, #1
 8009c1a:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c1c:	4b1c      	ldr	r3, [pc, #112]	; (8009c90 <xTaskResumeAll+0x120>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1ca      	bne.n	8009bba <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c2a:	f000 fb37 	bl	800a29c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009c2e:	4b1d      	ldr	r3, [pc, #116]	; (8009ca4 <xTaskResumeAll+0x134>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d010      	beq.n	8009c5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c3a:	f000 f847 	bl	8009ccc <xTaskIncrementTick>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d002      	beq.n	8009c4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009c44:	4b16      	ldr	r3, [pc, #88]	; (8009ca0 <xTaskResumeAll+0x130>)
 8009c46:	2201      	movs	r2, #1
 8009c48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1f1      	bne.n	8009c3a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009c56:	4b13      	ldr	r3, [pc, #76]	; (8009ca4 <xTaskResumeAll+0x134>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c5c:	4b10      	ldr	r3, [pc, #64]	; (8009ca0 <xTaskResumeAll+0x130>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d009      	beq.n	8009c78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c64:	2301      	movs	r3, #1
 8009c66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c68:	4b0f      	ldr	r3, [pc, #60]	; (8009ca8 <xTaskResumeAll+0x138>)
 8009c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c78:	f7fe fd7a 	bl	8008770 <vPortExitCritical>

	return xAlreadyYielded;
 8009c7c:	68bb      	ldr	r3, [r7, #8]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	200007d0 	.word	0x200007d0
 8009c8c:	200007a8 	.word	0x200007a8
 8009c90:	20000768 	.word	0x20000768
 8009c94:	200007b0 	.word	0x200007b0
 8009c98:	200006c0 	.word	0x200006c0
 8009c9c:	200006bc 	.word	0x200006bc
 8009ca0:	200007bc 	.word	0x200007bc
 8009ca4:	200007b8 	.word	0x200007b8
 8009ca8:	e000ed04 	.word	0xe000ed04

08009cac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009cb2:	4b05      	ldr	r3, [pc, #20]	; (8009cc8 <xTaskGetTickCount+0x1c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009cb8:	687b      	ldr	r3, [r7, #4]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	370c      	adds	r7, #12
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	200007ac 	.word	0x200007ac

08009ccc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b086      	sub	sp, #24
 8009cd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cd6:	4b4f      	ldr	r3, [pc, #316]	; (8009e14 <xTaskIncrementTick+0x148>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f040 8089 	bne.w	8009df2 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ce0:	4b4d      	ldr	r3, [pc, #308]	; (8009e18 <xTaskIncrementTick+0x14c>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009ce8:	4a4b      	ldr	r2, [pc, #300]	; (8009e18 <xTaskIncrementTick+0x14c>)
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d11f      	bne.n	8009d34 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009cf4:	4b49      	ldr	r3, [pc, #292]	; (8009e1c <xTaskIncrementTick+0x150>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d009      	beq.n	8009d12 <xTaskIncrementTick+0x46>
 8009cfe:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	603b      	str	r3, [r7, #0]
 8009d10:	e7fe      	b.n	8009d10 <xTaskIncrementTick+0x44>
 8009d12:	4b42      	ldr	r3, [pc, #264]	; (8009e1c <xTaskIncrementTick+0x150>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	60fb      	str	r3, [r7, #12]
 8009d18:	4b41      	ldr	r3, [pc, #260]	; (8009e20 <xTaskIncrementTick+0x154>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a3f      	ldr	r2, [pc, #252]	; (8009e1c <xTaskIncrementTick+0x150>)
 8009d1e:	6013      	str	r3, [r2, #0]
 8009d20:	4a3f      	ldr	r2, [pc, #252]	; (8009e20 <xTaskIncrementTick+0x154>)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6013      	str	r3, [r2, #0]
 8009d26:	4b3f      	ldr	r3, [pc, #252]	; (8009e24 <xTaskIncrementTick+0x158>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	4a3d      	ldr	r2, [pc, #244]	; (8009e24 <xTaskIncrementTick+0x158>)
 8009d2e:	6013      	str	r3, [r2, #0]
 8009d30:	f000 fab4 	bl	800a29c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d34:	4b3c      	ldr	r3, [pc, #240]	; (8009e28 <xTaskIncrementTick+0x15c>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d34a      	bcc.n	8009dd4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d3e:	4b37      	ldr	r3, [pc, #220]	; (8009e1c <xTaskIncrementTick+0x150>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d104      	bne.n	8009d52 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d48:	4b37      	ldr	r3, [pc, #220]	; (8009e28 <xTaskIncrementTick+0x15c>)
 8009d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d4e:	601a      	str	r2, [r3, #0]
					break;
 8009d50:	e040      	b.n	8009dd4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d52:	4b32      	ldr	r3, [pc, #200]	; (8009e1c <xTaskIncrementTick+0x150>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d203      	bcs.n	8009d72 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d6a:	4a2f      	ldr	r2, [pc, #188]	; (8009e28 <xTaskIncrementTick+0x15c>)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009d70:	e030      	b.n	8009dd4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	3304      	adds	r3, #4
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fe fe8e 	bl	8008a98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d004      	beq.n	8009d8e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	3318      	adds	r3, #24
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7fe fe85 	bl	8008a98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d92:	461a      	mov	r2, r3
 8009d94:	2301      	movs	r3, #1
 8009d96:	fa03 f202 	lsl.w	r2, r3, r2
 8009d9a:	4b24      	ldr	r3, [pc, #144]	; (8009e2c <xTaskIncrementTick+0x160>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	4a22      	ldr	r2, [pc, #136]	; (8009e2c <xTaskIncrementTick+0x160>)
 8009da2:	6013      	str	r3, [r2, #0]
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da8:	4613      	mov	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4a1f      	ldr	r2, [pc, #124]	; (8009e30 <xTaskIncrementTick+0x164>)
 8009db2:	441a      	add	r2, r3
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	3304      	adds	r3, #4
 8009db8:	4610      	mov	r0, r2
 8009dba:	4619      	mov	r1, r3
 8009dbc:	f7fe fe10 	bl	80089e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc4:	4b1b      	ldr	r3, [pc, #108]	; (8009e34 <xTaskIncrementTick+0x168>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d301      	bcc.n	8009dd2 <xTaskIncrementTick+0x106>
						{
							xSwitchRequired = pdTRUE;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 8009dd2:	e7b4      	b.n	8009d3e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009dd4:	4b17      	ldr	r3, [pc, #92]	; (8009e34 <xTaskIncrementTick+0x168>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dda:	4915      	ldr	r1, [pc, #84]	; (8009e30 <xTaskIncrementTick+0x164>)
 8009ddc:	4613      	mov	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	440b      	add	r3, r1
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d901      	bls.n	8009df0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009dec:	2301      	movs	r3, #1
 8009dee:	617b      	str	r3, [r7, #20]
 8009df0:	e004      	b.n	8009dfc <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009df2:	4b11      	ldr	r3, [pc, #68]	; (8009e38 <xTaskIncrementTick+0x16c>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	3301      	adds	r3, #1
 8009df8:	4a0f      	ldr	r2, [pc, #60]	; (8009e38 <xTaskIncrementTick+0x16c>)
 8009dfa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009dfc:	4b0f      	ldr	r3, [pc, #60]	; (8009e3c <xTaskIncrementTick+0x170>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8009e04:	2301      	movs	r3, #1
 8009e06:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009e08:	697b      	ldr	r3, [r7, #20]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	200007d0 	.word	0x200007d0
 8009e18:	200007ac 	.word	0x200007ac
 8009e1c:	20000760 	.word	0x20000760
 8009e20:	20000764 	.word	0x20000764
 8009e24:	200007c0 	.word	0x200007c0
 8009e28:	200007c8 	.word	0x200007c8
 8009e2c:	200007b0 	.word	0x200007b0
 8009e30:	200006c0 	.word	0x200006c0
 8009e34:	200006bc 	.word	0x200006bc
 8009e38:	200007b8 	.word	0x200007b8
 8009e3c:	200007bc 	.word	0x200007bc

08009e40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e40:	b480      	push	{r7}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e46:	4b26      	ldr	r3, [pc, #152]	; (8009ee0 <vTaskSwitchContext+0xa0>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d003      	beq.n	8009e56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e4e:	4b25      	ldr	r3, [pc, #148]	; (8009ee4 <vTaskSwitchContext+0xa4>)
 8009e50:	2201      	movs	r2, #1
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	e03e      	b.n	8009ed4 <vTaskSwitchContext+0x94>
	}
	else
	{
		xYieldPending = pdFALSE;
 8009e56:	4b23      	ldr	r3, [pc, #140]	; (8009ee4 <vTaskSwitchContext+0xa4>)
 8009e58:	2200      	movs	r2, #0
 8009e5a:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e5c:	4b22      	ldr	r3, [pc, #136]	; (8009ee8 <vTaskSwitchContext+0xa8>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	60fb      	str	r3, [r7, #12]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	fab3 f383 	clz	r3, r3
 8009e68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009e6a:	7afb      	ldrb	r3, [r7, #11]
 8009e6c:	f1c3 031f 	rsb	r3, r3, #31
 8009e70:	617b      	str	r3, [r7, #20]
 8009e72:	491e      	ldr	r1, [pc, #120]	; (8009eec <vTaskSwitchContext+0xac>)
 8009e74:	697a      	ldr	r2, [r7, #20]
 8009e76:	4613      	mov	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	440b      	add	r3, r1
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d109      	bne.n	8009e9a <vTaskSwitchContext+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e86:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	607b      	str	r3, [r7, #4]
 8009e98:	e7fe      	b.n	8009e98 <vTaskSwitchContext+0x58>
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4413      	add	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4a11      	ldr	r2, [pc, #68]	; (8009eec <vTaskSwitchContext+0xac>)
 8009ea6:	4413      	add	r3, r2
 8009ea8:	613b      	str	r3, [r7, #16]
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	685a      	ldr	r2, [r3, #4]
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	605a      	str	r2, [r3, #4]
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	685a      	ldr	r2, [r3, #4]
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	3308      	adds	r3, #8
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d104      	bne.n	8009eca <vTaskSwitchContext+0x8a>
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	605a      	str	r2, [r3, #4]
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	4a07      	ldr	r2, [pc, #28]	; (8009ef0 <vTaskSwitchContext+0xb0>)
 8009ed2:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ed4:	371c      	adds	r7, #28
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	200007d0 	.word	0x200007d0
 8009ee4:	200007bc 	.word	0x200007bc
 8009ee8:	200007b0 	.word	0x200007b0
 8009eec:	200006c0 	.word	0x200006c0
 8009ef0:	200006bc 	.word	0x200006bc

08009ef4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d109      	bne.n	8009f18 <vTaskPlaceOnEventList+0x24>
 8009f04:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009f08:	f383 8811 	msr	BASEPRI, r3
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	60fb      	str	r3, [r7, #12]
 8009f16:	e7fe      	b.n	8009f16 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f18:	4b06      	ldr	r3, [pc, #24]	; (8009f34 <vTaskPlaceOnEventList+0x40>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3318      	adds	r3, #24
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	4619      	mov	r1, r3
 8009f22:	f7fe fd81 	bl	8008a28 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f26:	6838      	ldr	r0, [r7, #0]
 8009f28:	2101      	movs	r1, #1
 8009f2a:	f000 fa7b 	bl	800a424 <prvAddCurrentTaskToDelayedList>
}
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	200006bc 	.word	0x200006bc

08009f38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d109      	bne.n	8009f5e <vTaskPlaceOnEventListRestricted+0x26>
 8009f4a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	617b      	str	r3, [r7, #20]
 8009f5c:	e7fe      	b.n	8009f5c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f5e:	4b0a      	ldr	r3, [pc, #40]	; (8009f88 <vTaskPlaceOnEventListRestricted+0x50>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	3318      	adds	r3, #24
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	4619      	mov	r1, r3
 8009f68:	f7fe fd3a 	bl	80089e0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d002      	beq.n	8009f78 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009f72:	f04f 33ff 	mov.w	r3, #4294967295
 8009f76:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009f78:	68b8      	ldr	r0, [r7, #8]
 8009f7a:	6879      	ldr	r1, [r7, #4]
 8009f7c:	f000 fa52 	bl	800a424 <prvAddCurrentTaskToDelayedList>
	}
 8009f80:	3718      	adds	r7, #24
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	200006bc 	.word	0x200006bc

08009f8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d109      	bne.n	8009fb6 <xTaskRemoveFromEventList+0x2a>
 8009fa2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	e7fe      	b.n	8009fb4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	3318      	adds	r3, #24
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fe fd6c 	bl	8008a98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fc0:	4b1e      	ldr	r3, [pc, #120]	; (800a03c <xTaskRemoveFromEventList+0xb0>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d11e      	bne.n	800a006 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	3304      	adds	r3, #4
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7fe fd63 	bl	8008a98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	2301      	movs	r3, #1
 8009fda:	fa03 f202 	lsl.w	r2, r3, r2
 8009fde:	4b18      	ldr	r3, [pc, #96]	; (800a040 <xTaskRemoveFromEventList+0xb4>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	4a16      	ldr	r2, [pc, #88]	; (800a040 <xTaskRemoveFromEventList+0xb4>)
 8009fe6:	6013      	str	r3, [r2, #0]
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fec:	4613      	mov	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	4413      	add	r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	4a13      	ldr	r2, [pc, #76]	; (800a044 <xTaskRemoveFromEventList+0xb8>)
 8009ff6:	441a      	add	r2, r3
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	4610      	mov	r0, r2
 8009ffe:	4619      	mov	r1, r3
 800a000:	f7fe fcee 	bl	80089e0 <vListInsertEnd>
 800a004:	e005      	b.n	800a012 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	3318      	adds	r3, #24
 800a00a:	480f      	ldr	r0, [pc, #60]	; (800a048 <xTaskRemoveFromEventList+0xbc>)
 800a00c:	4619      	mov	r1, r3
 800a00e:	f7fe fce7 	bl	80089e0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a016:	4b0d      	ldr	r3, [pc, #52]	; (800a04c <xTaskRemoveFromEventList+0xc0>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d905      	bls.n	800a02c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a020:	2301      	movs	r3, #1
 800a022:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a024:	4b0a      	ldr	r3, [pc, #40]	; (800a050 <xTaskRemoveFromEventList+0xc4>)
 800a026:	2201      	movs	r2, #1
 800a028:	601a      	str	r2, [r3, #0]
 800a02a:	e001      	b.n	800a030 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a02c:	2300      	movs	r3, #0
 800a02e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a030:	697b      	ldr	r3, [r7, #20]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3718      	adds	r7, #24
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	200007d0 	.word	0x200007d0
 800a040:	200007b0 	.word	0x200007b0
 800a044:	200006c0 	.word	0x200006c0
 800a048:	20000768 	.word	0x20000768
 800a04c:	200006bc 	.word	0x200006bc
 800a050:	200007bc 	.word	0x200007bc

0800a054 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a05c:	4b06      	ldr	r3, [pc, #24]	; (800a078 <vTaskInternalSetTimeOutState+0x24>)
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a064:	4b05      	ldr	r3, [pc, #20]	; (800a07c <vTaskInternalSetTimeOutState+0x28>)
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	605a      	str	r2, [r3, #4]
}
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	200007c0 	.word	0x200007c0
 800a07c:	200007ac 	.word	0x200007ac

0800a080 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b088      	sub	sp, #32
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d109      	bne.n	800a0a4 <xTaskCheckForTimeOut+0x24>
 800a090:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	613b      	str	r3, [r7, #16]
 800a0a2:	e7fe      	b.n	800a0a2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d109      	bne.n	800a0be <xTaskCheckForTimeOut+0x3e>
 800a0aa:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	60fb      	str	r3, [r7, #12]
 800a0bc:	e7fe      	b.n	800a0bc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a0be:	f7fe fb29 	bl	8008714 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a0c2:	4b24      	ldr	r3, [pc, #144]	; (800a154 <xTaskCheckForTimeOut+0xd4>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	69ba      	ldr	r2, [r7, #24]
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800a0d2:	4b21      	ldr	r3, [pc, #132]	; (800a158 <xTaskCheckForTimeOut+0xd8>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d007      	beq.n	800a0ee <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a0de:	4b1e      	ldr	r3, [pc, #120]	; (800a158 <xTaskCheckForTimeOut+0xd8>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
				xReturn = pdTRUE;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	61fb      	str	r3, [r7, #28]
 800a0ec:	e02b      	b.n	800a146 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f6:	d102      	bne.n	800a0fe <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	61fb      	str	r3, [r7, #28]
 800a0fc:	e023      	b.n	800a146 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	4b16      	ldr	r3, [pc, #88]	; (800a15c <xTaskCheckForTimeOut+0xdc>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	429a      	cmp	r2, r3
 800a108:	d007      	beq.n	800a11a <xTaskCheckForTimeOut+0x9a>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685a      	ldr	r2, [r3, #4]
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	429a      	cmp	r2, r3
 800a112:	d802      	bhi.n	800a11a <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a114:	2301      	movs	r3, #1
 800a116:	61fb      	str	r3, [r7, #28]
 800a118:	e015      	b.n	800a146 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	429a      	cmp	r2, r3
 800a122:	d90b      	bls.n	800a13c <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	1ad2      	subs	r2, r2, r3
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f7ff ff8f 	bl	800a054 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a136:	2300      	movs	r3, #0
 800a138:	61fb      	str	r3, [r7, #28]
 800a13a:	e004      	b.n	800a146 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	2200      	movs	r2, #0
 800a140:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a142:	2301      	movs	r3, #1
 800a144:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a146:	f7fe fb13 	bl	8008770 <vPortExitCritical>

	return xReturn;
 800a14a:	69fb      	ldr	r3, [r7, #28]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3720      	adds	r7, #32
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	200007ac 	.word	0x200007ac
 800a158:	200006bc 	.word	0x200006bc
 800a15c:	200007c0 	.word	0x200007c0

0800a160 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a160:	b480      	push	{r7}
 800a162:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a164:	4b03      	ldr	r3, [pc, #12]	; (800a174 <vTaskMissedYield+0x14>)
 800a166:	2201      	movs	r2, #1
 800a168:	601a      	str	r2, [r3, #0]
}
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	200007bc 	.word	0x200007bc

0800a178 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a180:	f000 f850 	bl	800a224 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a184:	4b06      	ldr	r3, [pc, #24]	; (800a1a0 <prvIdleTask+0x28>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d907      	bls.n	800a19c <prvIdleTask+0x24>
			{
				taskYIELD();
 800a18c:	4b05      	ldr	r3, [pc, #20]	; (800a1a4 <prvIdleTask+0x2c>)
 800a18e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 800a19c:	e7f0      	b.n	800a180 <prvIdleTask+0x8>
 800a19e:	bf00      	nop
 800a1a0:	200006c0 	.word	0x200006c0
 800a1a4:	e000ed04 	.word	0xe000ed04

0800a1a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	607b      	str	r3, [r7, #4]
 800a1b2:	e00c      	b.n	800a1ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4413      	add	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4a11      	ldr	r2, [pc, #68]	; (800a204 <prvInitialiseTaskLists+0x5c>)
 800a1c0:	4413      	add	r3, r2
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7fe fbe0 	bl	8008988 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	607b      	str	r3, [r7, #4]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2b05      	cmp	r3, #5
 800a1d2:	d9ef      	bls.n	800a1b4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800a1d4:	480c      	ldr	r0, [pc, #48]	; (800a208 <prvInitialiseTaskLists+0x60>)
 800a1d6:	f7fe fbd7 	bl	8008988 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a1da:	480c      	ldr	r0, [pc, #48]	; (800a20c <prvInitialiseTaskLists+0x64>)
 800a1dc:	f7fe fbd4 	bl	8008988 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a1e0:	480b      	ldr	r0, [pc, #44]	; (800a210 <prvInitialiseTaskLists+0x68>)
 800a1e2:	f7fe fbd1 	bl	8008988 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a1e6:	480b      	ldr	r0, [pc, #44]	; (800a214 <prvInitialiseTaskLists+0x6c>)
 800a1e8:	f7fe fbce 	bl	8008988 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a1ec:	480a      	ldr	r0, [pc, #40]	; (800a218 <prvInitialiseTaskLists+0x70>)
 800a1ee:	f7fe fbcb 	bl	8008988 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a1f2:	4b0a      	ldr	r3, [pc, #40]	; (800a21c <prvInitialiseTaskLists+0x74>)
 800a1f4:	4a04      	ldr	r2, [pc, #16]	; (800a208 <prvInitialiseTaskLists+0x60>)
 800a1f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a1f8:	4b09      	ldr	r3, [pc, #36]	; (800a220 <prvInitialiseTaskLists+0x78>)
 800a1fa:	4a04      	ldr	r2, [pc, #16]	; (800a20c <prvInitialiseTaskLists+0x64>)
 800a1fc:	601a      	str	r2, [r3, #0]
}
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	200006c0 	.word	0x200006c0
 800a208:	20000738 	.word	0x20000738
 800a20c:	2000074c 	.word	0x2000074c
 800a210:	20000768 	.word	0x20000768
 800a214:	2000077c 	.word	0x2000077c
 800a218:	20000794 	.word	0x20000794
 800a21c:	20000760 	.word	0x20000760
 800a220:	20000764 	.word	0x20000764

0800a224 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a22a:	e019      	b.n	800a260 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a22c:	f7fe fa72 	bl	8008714 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a230:	4b0f      	ldr	r3, [pc, #60]	; (800a270 <prvCheckTasksWaitingTermination+0x4c>)
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3304      	adds	r3, #4
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fe fc2b 	bl	8008a98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a242:	4b0c      	ldr	r3, [pc, #48]	; (800a274 <prvCheckTasksWaitingTermination+0x50>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3b01      	subs	r3, #1
 800a248:	4a0a      	ldr	r2, [pc, #40]	; (800a274 <prvCheckTasksWaitingTermination+0x50>)
 800a24a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a24c:	4b0a      	ldr	r3, [pc, #40]	; (800a278 <prvCheckTasksWaitingTermination+0x54>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	3b01      	subs	r3, #1
 800a252:	4a09      	ldr	r2, [pc, #36]	; (800a278 <prvCheckTasksWaitingTermination+0x54>)
 800a254:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a256:	f7fe fa8b 	bl	8008770 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 f80e 	bl	800a27c <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a260:	4b05      	ldr	r3, [pc, #20]	; (800a278 <prvCheckTasksWaitingTermination+0x54>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1e1      	bne.n	800a22c <prvCheckTasksWaitingTermination+0x8>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	2000077c 	.word	0x2000077c
 800a274:	200007a8 	.word	0x200007a8
 800a278:	20000790 	.word	0x20000790

0800a27c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fe fb6b 	bl	8008964 <vPortFree>
			vPortFree( pxTCB );
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f7fe fb68 	bl	8008964 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop

0800a29c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2a2:	4b0c      	ldr	r3, [pc, #48]	; (800a2d4 <prvResetNextTaskUnblockTime+0x38>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d104      	bne.n	800a2b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a2ac:	4b0a      	ldr	r3, [pc, #40]	; (800a2d8 <prvResetNextTaskUnblockTime+0x3c>)
 800a2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b2:	601a      	str	r2, [r3, #0]
 800a2b4:	e008      	b.n	800a2c8 <prvResetNextTaskUnblockTime+0x2c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2b6:	4b07      	ldr	r3, [pc, #28]	; (800a2d4 <prvResetNextTaskUnblockTime+0x38>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	4a04      	ldr	r2, [pc, #16]	; (800a2d8 <prvResetNextTaskUnblockTime+0x3c>)
 800a2c6:	6013      	str	r3, [r2, #0]
	}
}
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	20000760 	.word	0x20000760
 800a2d8:	200007c8 	.word	0x200007c8

0800a2dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a2e2:	4b0b      	ldr	r3, [pc, #44]	; (800a310 <xTaskGetSchedulerState+0x34>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d102      	bne.n	800a2f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	607b      	str	r3, [r7, #4]
 800a2ee:	e008      	b.n	800a302 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2f0:	4b08      	ldr	r3, [pc, #32]	; (800a314 <xTaskGetSchedulerState+0x38>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d102      	bne.n	800a2fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	607b      	str	r3, [r7, #4]
 800a2fc:	e001      	b.n	800a302 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a2fe:	2300      	movs	r3, #0
 800a300:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a302:	687b      	ldr	r3, [r7, #4]
	}
 800a304:	4618      	mov	r0, r3
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr
 800a310:	200007b4 	.word	0x200007b4
 800a314:	200007d0 	.word	0x200007d0

0800a318 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a324:	2300      	movs	r3, #0
 800a326:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d06e      	beq.n	800a40c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a32e:	4b3a      	ldr	r3, [pc, #232]	; (800a418 <xTaskPriorityDisinherit+0x100>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	429a      	cmp	r2, r3
 800a336:	d009      	beq.n	800a34c <xTaskPriorityDisinherit+0x34>
 800a338:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	60fb      	str	r3, [r7, #12]
 800a34a:	e7fe      	b.n	800a34a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a350:	2b00      	cmp	r3, #0
 800a352:	d109      	bne.n	800a368 <xTaskPriorityDisinherit+0x50>
 800a354:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	60bb      	str	r3, [r7, #8]
 800a366:	e7fe      	b.n	800a366 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a36c:	1e5a      	subs	r2, r3, #1
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d046      	beq.n	800a40c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a382:	2b00      	cmp	r3, #0
 800a384:	d142      	bne.n	800a40c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	3304      	adds	r3, #4
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fe fb84 	bl	8008a98 <uxListRemove>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d115      	bne.n	800a3c2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a39a:	4920      	ldr	r1, [pc, #128]	; (800a41c <xTaskPriorityDisinherit+0x104>)
 800a39c:	4613      	mov	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4413      	add	r3, r2
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	440b      	add	r3, r1
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10a      	bne.n	800a3c2 <xTaskPriorityDisinherit+0xaa>
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	4093      	lsls	r3, r2
 800a3b6:	43da      	mvns	r2, r3
 800a3b8:	4b19      	ldr	r3, [pc, #100]	; (800a420 <xTaskPriorityDisinherit+0x108>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4013      	ands	r3, r2
 800a3be:	4a18      	ldr	r2, [pc, #96]	; (800a420 <xTaskPriorityDisinherit+0x108>)
 800a3c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ce:	f1c3 0206 	rsb	r2, r3, #6
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3da:	461a      	mov	r2, r3
 800a3dc:	2301      	movs	r3, #1
 800a3de:	fa03 f202 	lsl.w	r2, r3, r2
 800a3e2:	4b0f      	ldr	r3, [pc, #60]	; (800a420 <xTaskPriorityDisinherit+0x108>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	4a0d      	ldr	r2, [pc, #52]	; (800a420 <xTaskPriorityDisinherit+0x108>)
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	4413      	add	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	4a08      	ldr	r2, [pc, #32]	; (800a41c <xTaskPriorityDisinherit+0x104>)
 800a3fa:	441a      	add	r2, r3
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	3304      	adds	r3, #4
 800a400:	4610      	mov	r0, r2
 800a402:	4619      	mov	r1, r3
 800a404:	f7fe faec 	bl	80089e0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a408:	2301      	movs	r3, #1
 800a40a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a40c:	697b      	ldr	r3, [r7, #20]
	}
 800a40e:	4618      	mov	r0, r3
 800a410:	3718      	adds	r7, #24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	200006bc 	.word	0x200006bc
 800a41c:	200006c0 	.word	0x200006c0
 800a420:	200007b0 	.word	0x200007b0

0800a424 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a42e:	4b2b      	ldr	r3, [pc, #172]	; (800a4dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a434:	4b2a      	ldr	r3, [pc, #168]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a43e:	4b28      	ldr	r3, [pc, #160]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	3304      	adds	r3, #4
 800a444:	4618      	mov	r0, r3
 800a446:	f7fe fb27 	bl	8008a98 <uxListRemove>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10b      	bne.n	800a468 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a450:	4b23      	ldr	r3, [pc, #140]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a456:	461a      	mov	r2, r3
 800a458:	2301      	movs	r3, #1
 800a45a:	4093      	lsls	r3, r2
 800a45c:	43da      	mvns	r2, r3
 800a45e:	4b21      	ldr	r3, [pc, #132]	; (800a4e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4013      	ands	r3, r2
 800a464:	4a1f      	ldr	r2, [pc, #124]	; (800a4e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a466:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a46e:	d10a      	bne.n	800a486 <prvAddCurrentTaskToDelayedList+0x62>
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d007      	beq.n	800a486 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a476:	4b1a      	ldr	r3, [pc, #104]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	3304      	adds	r3, #4
 800a47c:	481a      	ldr	r0, [pc, #104]	; (800a4e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a47e:	4619      	mov	r1, r3
 800a480:	f7fe faae 	bl	80089e0 <vListInsertEnd>
 800a484:	e026      	b.n	800a4d4 <prvAddCurrentTaskToDelayedList+0xb0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4413      	add	r3, r2
 800a48c:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a48e:	4b14      	ldr	r3, [pc, #80]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d209      	bcs.n	800a4b2 <prvAddCurrentTaskToDelayedList+0x8e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a49e:	4b13      	ldr	r3, [pc, #76]	; (800a4ec <prvAddCurrentTaskToDelayedList+0xc8>)
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	4b0f      	ldr	r3, [pc, #60]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	4610      	mov	r0, r2
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	f7fe fabc 	bl	8008a28 <vListInsert>
 800a4b0:	e010      	b.n	800a4d4 <prvAddCurrentTaskToDelayedList+0xb0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4b2:	4b0f      	ldr	r3, [pc, #60]	; (800a4f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	4b0a      	ldr	r3, [pc, #40]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	4610      	mov	r0, r2
 800a4be:	4619      	mov	r1, r3
 800a4c0:	f7fe fab2 	bl	8008a28 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800a4c4:	4b0b      	ldr	r3, [pc, #44]	; (800a4f4 <prvAddCurrentTaskToDelayedList+0xd0>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d202      	bcs.n	800a4d4 <prvAddCurrentTaskToDelayedList+0xb0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800a4ce:	4a09      	ldr	r2, [pc, #36]	; (800a4f4 <prvAddCurrentTaskToDelayedList+0xd0>)
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	200007ac 	.word	0x200007ac
 800a4e0:	200006bc 	.word	0x200006bc
 800a4e4:	200007b0 	.word	0x200007b0
 800a4e8:	20000794 	.word	0x20000794
 800a4ec:	20000764 	.word	0x20000764
 800a4f0:	20000760 	.word	0x20000760
 800a4f4:	200007c8 	.word	0x200007c8

0800a4f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800a4fe:	2300      	movs	r3, #0
 800a500:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a502:	f000 fb4f 	bl	800aba4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a506:	4b11      	ldr	r3, [pc, #68]	; (800a54c <xTimerCreateTimerTask+0x54>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00b      	beq.n	800a526 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800a50e:	2304      	movs	r3, #4
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	4b0f      	ldr	r3, [pc, #60]	; (800a550 <xTimerCreateTimerTask+0x58>)
 800a514:	9301      	str	r3, [sp, #4]
 800a516:	480f      	ldr	r0, [pc, #60]	; (800a554 <xTimerCreateTimerTask+0x5c>)
 800a518:	490f      	ldr	r1, [pc, #60]	; (800a558 <xTimerCreateTimerTask+0x60>)
 800a51a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a51e:	2300      	movs	r3, #0
 800a520:	f7ff f82a 	bl	8009578 <xTaskCreate>
 800a524:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d109      	bne.n	800a540 <xTimerCreateTimerTask+0x48>
 800a52c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a530:	f383 8811 	msr	BASEPRI, r3
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	603b      	str	r3, [r7, #0]
 800a53e:	e7fe      	b.n	800a53e <xTimerCreateTimerTask+0x46>
	return xReturn;
 800a540:	687b      	ldr	r3, [r7, #4]
}
 800a542:	4618      	mov	r0, r3
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	20000804 	.word	0x20000804
 800a550:	20000808 	.word	0x20000808
 800a554:	0800a751 	.word	0x0800a751
 800a558:	0800f620 	.word	0x0800f620

0800a55c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b088      	sub	sp, #32
 800a560:	af02      	add	r7, sp, #8
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
 800a568:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a56a:	202c      	movs	r0, #44	; 0x2c
 800a56c:	f7fe f9e8 	bl	8008940 <pvPortMalloc>
 800a570:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00d      	beq.n	800a594 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a580:	6a3b      	ldr	r3, [r7, #32]
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	9301      	str	r3, [sp, #4]
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	68b9      	ldr	r1, [r7, #8]
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	f000 f806 	bl	800a5a0 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a594:	697b      	ldr	r3, [r7, #20]
	}
 800a596:	4618      	mov	r0, r3
 800a598:	3718      	adds	r7, #24
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop

0800a5a0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
 800a5ac:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d109      	bne.n	800a5c8 <prvInitialiseNewTimer+0x28>
 800a5b4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	617b      	str	r3, [r7, #20]
 800a5c6:	e7fe      	b.n	800a5c6 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d01e      	beq.n	800a60c <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a5ce:	f000 fae9 	bl	800aba4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5da:	68ba      	ldr	r2, [r7, #8]
 800a5dc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e0:	683a      	ldr	r2, [r7, #0]
 800a5e2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	6a3a      	ldr	r2, [r7, #32]
 800a5e8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ec:	3304      	adds	r3, #4
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fe f9ea 	bl	80089c8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d008      	beq.n	800a60c <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a600:	f043 0304 	orr.w	r3, r3, #4
 800a604:	b2da      	uxtb	r2, r3
 800a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a608:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop

0800a614 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b08a      	sub	sp, #40	; 0x28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
 800a620:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a622:	2300      	movs	r3, #0
 800a624:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d109      	bne.n	800a640 <xTimerGenericCommand+0x2c>
 800a62c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	623b      	str	r3, [r7, #32]
 800a63e:	e7fe      	b.n	800a63e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a640:	4b1c      	ldr	r3, [pc, #112]	; (800a6b4 <xTimerGenericCommand+0xa0>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d030      	beq.n	800a6aa <xTimerGenericCommand+0x96>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	2b05      	cmp	r3, #5
 800a658:	dc1c      	bgt.n	800a694 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a65a:	f7ff fe3f 	bl	800a2dc <xTaskGetSchedulerState>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b02      	cmp	r3, #2
 800a662:	d10b      	bne.n	800a67c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a664:	4b13      	ldr	r3, [pc, #76]	; (800a6b4 <xTimerGenericCommand+0xa0>)
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	f107 0310 	add.w	r3, r7, #16
 800a66c:	4610      	mov	r0, r2
 800a66e:	4619      	mov	r1, r3
 800a670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a672:	2300      	movs	r3, #0
 800a674:	f7fe fb04 	bl	8008c80 <xQueueGenericSend>
 800a678:	6278      	str	r0, [r7, #36]	; 0x24
 800a67a:	e016      	b.n	800a6aa <xTimerGenericCommand+0x96>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a67c:	4b0d      	ldr	r3, [pc, #52]	; (800a6b4 <xTimerGenericCommand+0xa0>)
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	f107 0310 	add.w	r3, r7, #16
 800a684:	4610      	mov	r0, r2
 800a686:	4619      	mov	r1, r3
 800a688:	2200      	movs	r2, #0
 800a68a:	2300      	movs	r3, #0
 800a68c:	f7fe faf8 	bl	8008c80 <xQueueGenericSend>
 800a690:	6278      	str	r0, [r7, #36]	; 0x24
 800a692:	e00a      	b.n	800a6aa <xTimerGenericCommand+0x96>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a694:	4b07      	ldr	r3, [pc, #28]	; (800a6b4 <xTimerGenericCommand+0xa0>)
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	f107 0310 	add.w	r3, r7, #16
 800a69c:	4610      	mov	r0, r2
 800a69e:	4619      	mov	r1, r3
 800a6a0:	683a      	ldr	r2, [r7, #0]
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	f7fe fc0a 	bl	8008ebc <xQueueGenericSendFromISR>
 800a6a8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3728      	adds	r7, #40	; 0x28
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	20000804 	.word	0x20000804

0800a6b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b088      	sub	sp, #32
 800a6bc:	af02      	add	r7, sp, #8
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6c2:	4b22      	ldr	r3, [pc, #136]	; (800a74c <prvProcessExpiredTimer+0x94>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fe f9e1 	bl	8008a98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6dc:	f003 0304 	and.w	r3, r3, #4
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d022      	beq.n	800a72a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	699a      	ldr	r2, [r3, #24]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	6978      	ldr	r0, [r7, #20]
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f000 f8d0 	bl	800a898 <prvInsertTimerInActiveList>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d01e      	beq.n	800a73c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6fe:	2300      	movs	r3, #0
 800a700:	9300      	str	r3, [sp, #0]
 800a702:	6978      	ldr	r0, [r7, #20]
 800a704:	2100      	movs	r1, #0
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	2300      	movs	r3, #0
 800a70a:	f7ff ff83 	bl	800a614 <xTimerGenericCommand>
 800a70e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d112      	bne.n	800a73c <prvProcessExpiredTimer+0x84>
 800a716:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a71a:	f383 8811 	msr	BASEPRI, r3
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	60fb      	str	r3, [r7, #12]
 800a728:	e7fe      	b.n	800a728 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a730:	f023 0301 	bic.w	r3, r3, #1
 800a734:	b2da      	uxtb	r2, r3
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	6a1b      	ldr	r3, [r3, #32]
 800a740:	6978      	ldr	r0, [r7, #20]
 800a742:	4798      	blx	r3
}
 800a744:	3718      	adds	r7, #24
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	200007fc 	.word	0x200007fc

0800a750 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a758:	f107 0308 	add.w	r3, r7, #8
 800a75c:	4618      	mov	r0, r3
 800a75e:	f000 f857 	bl	800a810 <prvGetNextExpireTime>
 800a762:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	4619      	mov	r1, r3
 800a76a:	f000 f803 	bl	800a774 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a76e:	f000 f8d5 	bl	800a91c <prvProcessReceivedCommands>
	}
 800a772:	e7f1      	b.n	800a758 <prvTimerTask+0x8>

0800a774 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a77e:	f7ff f9e9 	bl	8009b54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a782:	f107 0308 	add.w	r3, r7, #8
 800a786:	4618      	mov	r0, r3
 800a788:	f000 f866 	bl	800a858 <prvSampleTimeNow>
 800a78c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d131      	bne.n	800a7f8 <prvProcessTimerOrBlockTask+0x84>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d10a      	bne.n	800a7b0 <prvProcessTimerOrBlockTask+0x3c>
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d806      	bhi.n	800a7b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a7a2:	f7ff f9e5 	bl	8009b70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	68f9      	ldr	r1, [r7, #12]
 800a7aa:	f7ff ff85 	bl	800a6b8 <prvProcessExpiredTimer>
 800a7ae:	e025      	b.n	800a7fc <prvProcessTimerOrBlockTask+0x88>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d008      	beq.n	800a7c8 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a7b6:	4b13      	ldr	r3, [pc, #76]	; (800a804 <prvProcessTimerOrBlockTask+0x90>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <prvProcessTimerOrBlockTask+0x50>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e000      	b.n	800a7c6 <prvProcessTimerOrBlockTask+0x52>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a7c8:	4b0f      	ldr	r3, [pc, #60]	; (800a808 <prvProcessTimerOrBlockTask+0x94>)
 800a7ca:	6819      	ldr	r1, [r3, #0]
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	4608      	mov	r0, r1
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	f7fe fe3e 	bl	8009458 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 800a7dc:	f7ff f9c8 	bl	8009b70 <xTaskResumeAll>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10a      	bne.n	800a7fc <prvProcessTimerOrBlockTask+0x88>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 800a7e6:	4b09      	ldr	r3, [pc, #36]	; (800a80c <prvProcessTimerOrBlockTask+0x98>)
 800a7e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ec:	601a      	str	r2, [r3, #0]
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	e001      	b.n	800a7fc <prvProcessTimerOrBlockTask+0x88>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 800a7f8:	f7ff f9ba 	bl	8009b70 <xTaskResumeAll>
		}
	}
}
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	20000800 	.word	0x20000800
 800a808:	20000804 	.word	0x20000804
 800a80c:	e000ed04 	.word	0xe000ed04

0800a810 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a810:	b480      	push	{r7}
 800a812:	b085      	sub	sp, #20
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a818:	4b0e      	ldr	r3, [pc, #56]	; (800a854 <prvGetNextExpireTime+0x44>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d101      	bne.n	800a826 <prvGetNextExpireTime+0x16>
 800a822:	2201      	movs	r2, #1
 800a824:	e000      	b.n	800a828 <prvGetNextExpireTime+0x18>
 800a826:	2200      	movs	r2, #0
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d105      	bne.n	800a840 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a834:	4b07      	ldr	r3, [pc, #28]	; (800a854 <prvGetNextExpireTime+0x44>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	60fb      	str	r3, [r7, #12]
 800a83e:	e001      	b.n	800a844 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a840:	2300      	movs	r3, #0
 800a842:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a844:	68fb      	ldr	r3, [r7, #12]
}
 800a846:	4618      	mov	r0, r3
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	200007fc 	.word	0x200007fc

0800a858 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a860:	f7ff fa24 	bl	8009cac <xTaskGetTickCount>
 800a864:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a866:	4b0b      	ldr	r3, [pc, #44]	; (800a894 <prvSampleTimeNow+0x3c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d205      	bcs.n	800a87c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a870:	f000 f936 	bl	800aae0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	e002      	b.n	800a882 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a882:	4a04      	ldr	r2, [pc, #16]	; (800a894 <prvSampleTimeNow+0x3c>)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a888:	68fb      	ldr	r3, [r7, #12]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	2000080c 	.word	0x2000080c

0800a898 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b086      	sub	sp, #24
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	607a      	str	r2, [r7, #4]
 800a8a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d812      	bhi.n	800a8e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	1ad2      	subs	r2, r2, r3
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d302      	bcc.n	800a8d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	617b      	str	r3, [r7, #20]
 800a8d0:	e01b      	b.n	800a90a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a8d2:	4b10      	ldr	r3, [pc, #64]	; (800a914 <prvInsertTimerInActiveList+0x7c>)
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	3304      	adds	r3, #4
 800a8da:	4610      	mov	r0, r2
 800a8dc:	4619      	mov	r1, r3
 800a8de:	f7fe f8a3 	bl	8008a28 <vListInsert>
 800a8e2:	e012      	b.n	800a90a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d206      	bcs.n	800a8fa <prvInsertTimerInActiveList+0x62>
 800a8ec:	68ba      	ldr	r2, [r7, #8]
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d302      	bcc.n	800a8fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	617b      	str	r3, [r7, #20]
 800a8f8:	e007      	b.n	800a90a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8fa:	4b07      	ldr	r3, [pc, #28]	; (800a918 <prvInsertTimerInActiveList+0x80>)
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	3304      	adds	r3, #4
 800a902:	4610      	mov	r0, r2
 800a904:	4619      	mov	r1, r3
 800a906:	f7fe f88f 	bl	8008a28 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a90a:	697b      	ldr	r3, [r7, #20]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3718      	adds	r7, #24
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	20000800 	.word	0x20000800
 800a918:	200007fc 	.word	0x200007fc

0800a91c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b08e      	sub	sp, #56	; 0x38
 800a920:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a922:	e0cb      	b.n	800aabc <prvProcessReceivedCommands+0x1a0>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	da18      	bge.n	800a95c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a92a:	1d3b      	adds	r3, r7, #4
 800a92c:	3304      	adds	r3, #4
 800a92e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a932:	2b00      	cmp	r3, #0
 800a934:	d109      	bne.n	800a94a <prvProcessReceivedCommands+0x2e>
 800a936:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a93a:	f383 8811 	msr	BASEPRI, r3
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	61fb      	str	r3, [r7, #28]
 800a948:	e7fe      	b.n	800a948 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a950:	6851      	ldr	r1, [r2, #4]
 800a952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a954:	6892      	ldr	r2, [r2, #8]
 800a956:	4608      	mov	r0, r1
 800a958:	4611      	mov	r1, r2
 800a95a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f2c0 80ac 	blt.w	800aabc <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96a:	695b      	ldr	r3, [r3, #20]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d004      	beq.n	800a97a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a972:	3304      	adds	r3, #4
 800a974:	4618      	mov	r0, r3
 800a976:	f7fe f88f 	bl	8008a98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a97a:	463b      	mov	r3, r7
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7ff ff6b 	bl	800a858 <prvSampleTimeNow>
 800a982:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b09      	cmp	r3, #9
 800a988:	f200 8097 	bhi.w	800aaba <prvProcessReceivedCommands+0x19e>
 800a98c:	a201      	add	r2, pc, #4	; (adr r2, 800a994 <prvProcessReceivedCommands+0x78>)
 800a98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a992:	bf00      	nop
 800a994:	0800a9bd 	.word	0x0800a9bd
 800a998:	0800a9bd 	.word	0x0800a9bd
 800a99c:	0800a9bd 	.word	0x0800a9bd
 800a9a0:	0800aa33 	.word	0x0800aa33
 800a9a4:	0800aa47 	.word	0x0800aa47
 800a9a8:	0800aa91 	.word	0x0800aa91
 800a9ac:	0800a9bd 	.word	0x0800a9bd
 800a9b0:	0800a9bd 	.word	0x0800a9bd
 800a9b4:	0800aa33 	.word	0x0800aa33
 800a9b8:	0800aa47 	.word	0x0800aa47
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9c2:	f043 0301 	orr.w	r3, r3, #1
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d2:	699b      	ldr	r3, [r3, #24]
 800a9d4:	441a      	add	r2, r3
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9da:	4611      	mov	r1, r2
 800a9dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9de:	f7ff ff5b 	bl	800a898 <prvInsertTimerInActiveList>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d023      	beq.n	800aa30 <prvProcessReceivedCommands+0x114>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ea:	6a1b      	ldr	r3, [r3, #32]
 800a9ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9ee:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9f6:	f003 0304 	and.w	r3, r3, #4
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d018      	beq.n	800aa30 <prvProcessReceivedCommands+0x114>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	441a      	add	r2, r3
 800aa06:	2300      	movs	r3, #0
 800aa08:	9300      	str	r3, [sp, #0]
 800aa0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	2300      	movs	r3, #0
 800aa10:	f7ff fe00 	bl	800a614 <xTimerGenericCommand>
 800aa14:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa16:	6a3b      	ldr	r3, [r7, #32]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d109      	bne.n	800aa30 <prvProcessReceivedCommands+0x114>
 800aa1c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	61bb      	str	r3, [r7, #24]
 800aa2e:	e7fe      	b.n	800aa2e <prvProcessReceivedCommands+0x112>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 800aa30:	e044      	b.n	800aabc <prvProcessReceivedCommands+0x1a0>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa38:	f023 0301 	bic.w	r3, r3, #1
 800aa3c:	b2da      	uxtb	r2, r3
 800aa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aa44:	e03a      	b.n	800aabc <prvProcessReceivedCommands+0x1a0>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa4c:	f043 0301 	orr.w	r3, r3, #1
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa60:	699b      	ldr	r3, [r3, #24]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d109      	bne.n	800aa7a <prvProcessReceivedCommands+0x15e>
 800aa66:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800aa6a:	f383 8811 	msr	BASEPRI, r3
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	617b      	str	r3, [r7, #20]
 800aa78:	e7fe      	b.n	800aa78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7c:	699a      	ldr	r2, [r3, #24]
 800aa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa80:	4413      	add	r3, r2
 800aa82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa84:	4619      	mov	r1, r3
 800aa86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8a:	f7ff ff05 	bl	800a898 <prvInsertTimerInActiveList>
					break;
 800aa8e:	e015      	b.n	800aabc <prvProcessReceivedCommands+0x1a0>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa96:	f003 0302 	and.w	r3, r3, #2
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d103      	bne.n	800aaa6 <prvProcessReceivedCommands+0x18a>
						{
							vPortFree( pxTimer );
 800aa9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaa0:	f7fd ff60 	bl	8008964 <vPortFree>
 800aaa4:	e008      	b.n	800aab8 <prvProcessReceivedCommands+0x19c>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaac:	f023 0301 	bic.w	r3, r3, #1
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aab8:	e000      	b.n	800aabc <prvProcessReceivedCommands+0x1a0>

				default	:
					/* Don't expect to get here. */
					break;
 800aaba:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aabc:	4b07      	ldr	r3, [pc, #28]	; (800aadc <prvProcessReceivedCommands+0x1c0>)
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	1d3b      	adds	r3, r7, #4
 800aac2:	4610      	mov	r0, r2
 800aac4:	4619      	mov	r1, r3
 800aac6:	2200      	movs	r2, #0
 800aac8:	f7fe fa9e 	bl	8009008 <xQueueReceive>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f47f af28 	bne.w	800a924 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 800aad4:	3730      	adds	r7, #48	; 0x30
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	20000804 	.word	0x20000804

0800aae0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b088      	sub	sp, #32
 800aae4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aae6:	e047      	b.n	800ab78 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aae8:	4b2c      	ldr	r3, [pc, #176]	; (800ab9c <prvSwitchTimerLists+0xbc>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaf2:	4b2a      	ldr	r3, [pc, #168]	; (800ab9c <prvSwitchTimerLists+0xbc>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	3304      	adds	r3, #4
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fd ffc9 	bl	8008a98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	6a1b      	ldr	r3, [r3, #32]
 800ab0a:	6938      	ldr	r0, [r7, #16]
 800ab0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab14:	f003 0304 	and.w	r3, r3, #4
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d02d      	beq.n	800ab78 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	699a      	ldr	r2, [r3, #24]
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	4413      	add	r3, r2
 800ab24:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d90e      	bls.n	800ab4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab3a:	4b18      	ldr	r3, [pc, #96]	; (800ab9c <prvSwitchTimerLists+0xbc>)
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	3304      	adds	r3, #4
 800ab42:	4610      	mov	r0, r2
 800ab44:	4619      	mov	r1, r3
 800ab46:	f7fd ff6f 	bl	8008a28 <vListInsert>
 800ab4a:	e015      	b.n	800ab78 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	6938      	ldr	r0, [r7, #16]
 800ab52:	2100      	movs	r1, #0
 800ab54:	697a      	ldr	r2, [r7, #20]
 800ab56:	2300      	movs	r3, #0
 800ab58:	f7ff fd5c 	bl	800a614 <xTimerGenericCommand>
 800ab5c:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d109      	bne.n	800ab78 <prvSwitchTimerLists+0x98>
 800ab64:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	603b      	str	r3, [r7, #0]
 800ab76:	e7fe      	b.n	800ab76 <prvSwitchTimerLists+0x96>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab78:	4b08      	ldr	r3, [pc, #32]	; (800ab9c <prvSwitchTimerLists+0xbc>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1b2      	bne.n	800aae8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab82:	4b06      	ldr	r3, [pc, #24]	; (800ab9c <prvSwitchTimerLists+0xbc>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab88:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <prvSwitchTimerLists+0xc0>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a03      	ldr	r2, [pc, #12]	; (800ab9c <prvSwitchTimerLists+0xbc>)
 800ab8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ab90:	4a03      	ldr	r2, [pc, #12]	; (800aba0 <prvSwitchTimerLists+0xc0>)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6013      	str	r3, [r2, #0]
}
 800ab96:	3718      	adds	r7, #24
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	200007fc 	.word	0x200007fc
 800aba0:	20000800 	.word	0x20000800

0800aba4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aba8:	f7fd fdb4 	bl	8008714 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800abac:	4b12      	ldr	r3, [pc, #72]	; (800abf8 <prvCheckForValidListAndQueue+0x54>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d11d      	bne.n	800abf0 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800abb4:	4811      	ldr	r0, [pc, #68]	; (800abfc <prvCheckForValidListAndQueue+0x58>)
 800abb6:	f7fd fee7 	bl	8008988 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800abba:	4811      	ldr	r0, [pc, #68]	; (800ac00 <prvCheckForValidListAndQueue+0x5c>)
 800abbc:	f7fd fee4 	bl	8008988 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800abc0:	4b10      	ldr	r3, [pc, #64]	; (800ac04 <prvCheckForValidListAndQueue+0x60>)
 800abc2:	4a0e      	ldr	r2, [pc, #56]	; (800abfc <prvCheckForValidListAndQueue+0x58>)
 800abc4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800abc6:	4b10      	ldr	r3, [pc, #64]	; (800ac08 <prvCheckForValidListAndQueue+0x64>)
 800abc8:	4a0d      	ldr	r2, [pc, #52]	; (800ac00 <prvCheckForValidListAndQueue+0x5c>)
 800abca:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800abcc:	2005      	movs	r0, #5
 800abce:	2110      	movs	r1, #16
 800abd0:	2200      	movs	r2, #0
 800abd2:	f7fd fff3 	bl	8008bbc <xQueueGenericCreate>
 800abd6:	4602      	mov	r2, r0
 800abd8:	4b07      	ldr	r3, [pc, #28]	; (800abf8 <prvCheckForValidListAndQueue+0x54>)
 800abda:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800abdc:	4b06      	ldr	r3, [pc, #24]	; (800abf8 <prvCheckForValidListAndQueue+0x54>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d005      	beq.n	800abf0 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800abe4:	4b04      	ldr	r3, [pc, #16]	; (800abf8 <prvCheckForValidListAndQueue+0x54>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4618      	mov	r0, r3
 800abea:	4908      	ldr	r1, [pc, #32]	; (800ac0c <prvCheckForValidListAndQueue+0x68>)
 800abec:	f7fe fc0c 	bl	8009408 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abf0:	f7fd fdbe 	bl	8008770 <vPortExitCritical>
}
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	20000804 	.word	0x20000804
 800abfc:	200007d4 	.word	0x200007d4
 800ac00:	200007e8 	.word	0x200007e8
 800ac04:	200007fc 	.word	0x200007fc
 800ac08:	20000800 	.word	0x20000800
 800ac0c:	0800f628 	.word	0x0800f628

0800ac10 <EVENT_GENERATOR_Init>:

/*
 * This function Initializes a EVENT_GENERATOR APP instances based on user configuration.
 */
EVENT_GENERATOR_STATUS_t EVENT_GENERATOR_Init(EVENT_GENERATOR_t *const handle)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_GENERATOR_Init:handle NULL" , (handle != NULL));
  
  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	7b5b      	ldrb	r3, [r3, #13]
 800ac1c:	f083 0301 	eor.w	r3, r3, #1
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d012      	beq.n	800ac4c <EVENT_GENERATOR_Init+0x3c>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_OGU_Init(handle->eru, handle->channel, handle->config);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6819      	ldr	r1, [r3, #0]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	7b1a      	ldrb	r2, [r3, #12]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	4608      	mov	r0, r1
 800ac34:	4611      	mov	r1, r2
 800ac36:	461a      	mov	r2, r3
 800ac38:	f7fc fde8 	bl	800780c <XMC_ERU_OGU_Init>
    #if (EVENT_GENERATOR_NMI_SUPPORTED == 1U)
    /* Promote the eru event as NMI, Applicable only for XMC4000 devices */
    XMC_SCU_INTERRUPT_EnableNmiRequest(handle->nmi_eru_msk);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fb fdbb 	bl	80067bc <XMC_SCU_INTERRUPT_EnableNmiRequest>
    #endif
    /* Update the init status of the instance */
    handle->init_status = true;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	735a      	strb	r2, [r3, #13]
  }
  
  return EVENT_GENERATOR_STATUS_SUCCESS;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop

0800ac58 <EVENT_DETECTOR_Init>:

/*
 * This function Initializes a EVENT_DETECTOR APP instances (ERSx+ETLx) based on user configuration.
 */
EVENT_DETECTOR_STATUS_t EVENT_DETECTOR_Init(EVENT_DETECTOR_t *const handle)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_DETECTOR_Init:handle NULL" , (handle != NULL));

  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	7b1b      	ldrb	r3, [r3, #12]
 800ac64:	f083 0301 	eor.w	r3, r3, #1
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00d      	beq.n	800ac8a <EVENT_DETECTOR_Init+0x32>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_ETL_Init(handle->eru, handle->channel, handle->config);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6819      	ldr	r1, [r3, #0]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	791a      	ldrb	r2, [r3, #4]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	4608      	mov	r0, r1
 800ac7c:	4611      	mov	r1, r2
 800ac7e:	461a      	mov	r2, r3
 800ac80:	f7fc fd9e 	bl	80077c0 <XMC_ERU_ETL_Init>
    /* Update the init status of the instance */
    handle->init_status = true;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2201      	movs	r2, #1
 800ac88:	731a      	strb	r2, [r3, #12]
  }
  
  return EVENT_DETECTOR_STATUS_SUCCESS;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6819      	ldr	r1, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	7c1a      	ldrb	r2, [r3, #16]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	3304      	adds	r3, #4
 800aca8:	4608      	mov	r0, r1
 800acaa:	4611      	mov	r1, r2
 800acac:	461a      	mov	r2, r3
 800acae:	f7fb fc03 	bl	80064b8 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6819      	ldr	r1, [r3, #0]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	7c1a      	ldrb	r2, [r3, #16]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	7c5b      	ldrb	r3, [r3, #17]
 800acbe:	4608      	mov	r0, r1
 800acc0:	4611      	mov	r1, r2
 800acc2:	461a      	mov	r2, r3
 800acc4:	f7fc fdb6 	bl	8007834 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop

0800acd4 <__HardFault_Handler>:
 */
#if defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#endif
__attribute__((naked)) void __HardFault_Handler(uint32_t args[])
{
 800acd4:	4603      	mov	r3, r0

  // Configurable Fault Status Register
  // Consists of MMSR, BFSR and UFSR
  _CFSR = SCB->CFSR;
 800acd6:	4a18      	ldr	r2, [pc, #96]	; (800ad38 <__HardFault_Handler+0x64>)
 800acd8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800acda:	4918      	ldr	r1, [pc, #96]	; (800ad3c <__HardFault_Handler+0x68>)
 800acdc:	600a      	str	r2, [r1, #0]

  // Hard Fault Status Register
  _HFSR = SCB->HFSR;
 800acde:	4a16      	ldr	r2, [pc, #88]	; (800ad38 <__HardFault_Handler+0x64>)
 800ace0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ace2:	4917      	ldr	r1, [pc, #92]	; (800ad40 <__HardFault_Handler+0x6c>)
 800ace4:	600a      	str	r2, [r1, #0]

  // Debug Fault Status Register
  _DFSR = SCB->DFSR;
 800ace6:	4a14      	ldr	r2, [pc, #80]	; (800ad38 <__HardFault_Handler+0x64>)
 800ace8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800acea:	4916      	ldr	r1, [pc, #88]	; (800ad44 <__HardFault_Handler+0x70>)
 800acec:	600a      	str	r2, [r1, #0]

  // Auxiliary Fault Status Register
  _AFSR = SCB->AFSR;
 800acee:	4a12      	ldr	r2, [pc, #72]	; (800ad38 <__HardFault_Handler+0x64>)
 800acf0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800acf2:	4915      	ldr	r1, [pc, #84]	; (800ad48 <__HardFault_Handler+0x74>)
 800acf4:	600a      	str	r2, [r1, #0]

  // Read the Fault Address Registers. These may not contain valid values.
  // Check BFARVALID/MMARVALID to see if they are valid values
  // MemManage Fault Address Register
  _MMAR = SCB->MMFAR;
 800acf6:	4a10      	ldr	r2, [pc, #64]	; (800ad38 <__HardFault_Handler+0x64>)
 800acf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800acfa:	4914      	ldr	r1, [pc, #80]	; (800ad4c <__HardFault_Handler+0x78>)
 800acfc:	600a      	str	r2, [r1, #0]

  // Bus Fault Address Register
  _BFAR = SCB->BFAR;
 800acfe:	4a0e      	ldr	r2, [pc, #56]	; (800ad38 <__HardFault_Handler+0x64>)
 800ad00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ad02:	4913      	ldr	r1, [pc, #76]	; (800ad50 <__HardFault_Handler+0x7c>)
 800ad04:	600a      	str	r2, [r1, #0]

  stacked_r0 = ((uint32_t)args[0]);
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	4912      	ldr	r1, [pc, #72]	; (800ad54 <__HardFault_Handler+0x80>)
 800ad0a:	600a      	str	r2, [r1, #0]
  stacked_r1 = ((uint32_t)args[1]);
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	4912      	ldr	r1, [pc, #72]	; (800ad58 <__HardFault_Handler+0x84>)
 800ad10:	600a      	str	r2, [r1, #0]
  stacked_r2 = ((uint32_t)args[2]);
 800ad12:	689a      	ldr	r2, [r3, #8]
 800ad14:	4911      	ldr	r1, [pc, #68]	; (800ad5c <__HardFault_Handler+0x88>)
 800ad16:	600a      	str	r2, [r1, #0]
  stacked_r3 = ((uint32_t)args[3]);
 800ad18:	68da      	ldr	r2, [r3, #12]
 800ad1a:	4911      	ldr	r1, [pc, #68]	; (800ad60 <__HardFault_Handler+0x8c>)
 800ad1c:	600a      	str	r2, [r1, #0]
  stacked_r12 = ((uint32_t)args[4]);
 800ad1e:	691a      	ldr	r2, [r3, #16]
 800ad20:	4910      	ldr	r1, [pc, #64]	; (800ad64 <__HardFault_Handler+0x90>)
 800ad22:	600a      	str	r2, [r1, #0]
  stacked_lr = ((uint32_t)args[5]);
 800ad24:	695a      	ldr	r2, [r3, #20]
 800ad26:	4910      	ldr	r1, [pc, #64]	; (800ad68 <__HardFault_Handler+0x94>)
 800ad28:	600a      	str	r2, [r1, #0]
  stacked_pc = ((uint32_t)args[6]);
 800ad2a:	699a      	ldr	r2, [r3, #24]
 800ad2c:	490f      	ldr	r1, [pc, #60]	; (800ad6c <__HardFault_Handler+0x98>)
 800ad2e:	600a      	str	r2, [r1, #0]
  stacked_psr = ((uint32_t)args[7]);
 800ad30:	69db      	ldr	r3, [r3, #28]
 800ad32:	4a0f      	ldr	r2, [pc, #60]	; (800ad70 <__HardFault_Handler+0x9c>)
 800ad34:	6013      	str	r3, [r2, #0]

  __asm("BKPT 0\n") ; // Break into the debugger
 800ad36:	be00      	bkpt	0x0000
 800ad38:	e000ed00 	.word	0xe000ed00
 800ad3c:	20001214 	.word	0x20001214
 800ad40:	20001238 	.word	0x20001238
 800ad44:	20001240 	.word	0x20001240
 800ad48:	2000123c 	.word	0x2000123c
 800ad4c:	2000122c 	.word	0x2000122c
 800ad50:	2000120c 	.word	0x2000120c
 800ad54:	20001224 	.word	0x20001224
 800ad58:	20001210 	.word	0x20001210
 800ad5c:	20001234 	.word	0x20001234
 800ad60:	20001218 	.word	0x20001218
 800ad64:	20001228 	.word	0x20001228
 800ad68:	2000121c 	.word	0x2000121c
 800ad6c:	20001220 	.word	0x20001220
 800ad70:	20001230 	.word	0x20001230

0800ad74 <HardFault_Handler>:

/*GCC*/
#if defined(__GNUC__)
__attribute__((naked)) void HardFault_Handler(void)
{
__asm("  TST    LR, #4  \n"
 800ad74:	f01e 0f04 	tst.w	lr, #4
 800ad78:	bf0c      	ite	eq
 800ad7a:	f3ef 8008 	mrseq	r0, MSP
 800ad7e:	f3ef 8009 	mrsne	r0, PSP
 800ad82:	f7ff bfa7 	b.w	800acd4 <__HardFault_Handler>
 800ad86:	bf00      	nop

0800ad88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f003 0307 	and.w	r3, r3, #7
 800ad96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ad98:	4b0c      	ldr	r3, [pc, #48]	; (800adcc <__NVIC_SetPriorityGrouping+0x44>)
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ada4:	4013      	ands	r3, r2
 800ada6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800adb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800adb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adb8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800adba:	4a04      	ldr	r2, [pc, #16]	; (800adcc <__NVIC_SetPriorityGrouping+0x44>)
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	60d3      	str	r3, [r2, #12]
}
 800adc0:	3714      	adds	r7, #20
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop
 800adcc:	e000ed00 	.word	0xe000ed00

0800add0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800add0:	b480      	push	{r7}
 800add2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800add4:	4b04      	ldr	r3, [pc, #16]	; (800ade8 <__NVIC_GetPriorityGrouping+0x18>)
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800addc:	0a1b      	lsrs	r3, r3, #8
}
 800adde:	4618      	mov	r0, r3
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr
 800ade8:	e000ed00 	.word	0xe000ed00

0800adec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	4603      	mov	r3, r0
 800adf4:	6039      	str	r1, [r7, #0]
 800adf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800adf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	db0a      	blt.n	800ae16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae00:	490d      	ldr	r1, [pc, #52]	; (800ae38 <__NVIC_SetPriority+0x4c>)
 800ae02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae06:	683a      	ldr	r2, [r7, #0]
 800ae08:	b2d2      	uxtb	r2, r2
 800ae0a:	0092      	lsls	r2, r2, #2
 800ae0c:	b2d2      	uxtb	r2, r2
 800ae0e:	440b      	add	r3, r1
 800ae10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800ae14:	e00a      	b.n	800ae2c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae16:	4909      	ldr	r1, [pc, #36]	; (800ae3c <__NVIC_SetPriority+0x50>)
 800ae18:	79fb      	ldrb	r3, [r7, #7]
 800ae1a:	f003 030f 	and.w	r3, r3, #15
 800ae1e:	3b04      	subs	r3, #4
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	b2d2      	uxtb	r2, r2
 800ae24:	0092      	lsls	r2, r2, #2
 800ae26:	b2d2      	uxtb	r2, r2
 800ae28:	440b      	add	r3, r1
 800ae2a:	761a      	strb	r2, [r3, #24]
  }
}
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	e000e100 	.word	0xe000e100
 800ae3c:	e000ed00 	.word	0xe000ed00

0800ae40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b089      	sub	sp, #36	; 0x24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f003 0307 	and.w	r3, r3, #7
 800ae52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	f1c3 0307 	rsb	r3, r3, #7
 800ae5a:	2b06      	cmp	r3, #6
 800ae5c:	bf28      	it	cs
 800ae5e:	2306      	movcs	r3, #6
 800ae60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	3306      	adds	r3, #6
 800ae66:	2b06      	cmp	r3, #6
 800ae68:	d902      	bls.n	800ae70 <NVIC_EncodePriority+0x30>
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	e000      	b.n	800ae72 <NVIC_EncodePriority+0x32>
 800ae70:	2300      	movs	r3, #0
 800ae72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	2201      	movs	r2, #1
 800ae78:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7c:	1e5a      	subs	r2, r3, #1
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	401a      	ands	r2, r3
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	2101      	movs	r1, #1
 800ae8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae8e:	1e59      	subs	r1, r3, #1
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800ae94:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3724      	adds	r7, #36	; 0x24
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop

0800aea4 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800aeaa:	2001      	movs	r0, #1
 800aeac:	f7ff ff6c 	bl	800ad88 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800aeb0:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 800aeb2:	4b36      	ldr	r3, [pc, #216]	; (800af8c <SystemCoreSetup+0xe8>)
 800aeb4:	4a36      	ldr	r2, [pc, #216]	; (800af90 <SystemCoreSetup+0xec>)
 800aeb6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800aeb8:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800aebc:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800aebe:	4a33      	ldr	r2, [pc, #204]	; (800af8c <SystemCoreSetup+0xe8>)
 800aec0:	4b32      	ldr	r3, [pc, #200]	; (800af8c <SystemCoreSetup+0xe8>)
 800aec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aec6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aeca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800aece:	4b31      	ldr	r3, [pc, #196]	; (800af94 <SystemCoreSetup+0xf0>)
 800aed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aed4:	3314      	adds	r3, #20
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f023 030f 	bic.w	r3, r3, #15
 800aee0:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f043 0303 	orr.w	r3, r3, #3
 800aee8:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800aeea:	4b2a      	ldr	r3, [pc, #168]	; (800af94 <SystemCoreSetup+0xf0>)
 800aeec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aef0:	3314      	adds	r3, #20
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	601a      	str	r2, [r3, #0]


  /* Enable divide by zero trap */
  SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk; 
 800aef6:	4a25      	ldr	r2, [pc, #148]	; (800af8c <SystemCoreSetup+0xe8>)
 800aef8:	4b24      	ldr	r3, [pc, #144]	; (800af8c <SystemCoreSetup+0xe8>)
 800aefa:	695b      	ldr	r3, [r3, #20]
 800aefc:	f043 0310 	orr.w	r3, r3, #16
 800af00:	6153      	str	r3, [r2, #20]

  /* Enable unaligned memory access trap */
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk; 
 800af02:	4a22      	ldr	r2, [pc, #136]	; (800af8c <SystemCoreSetup+0xe8>)
 800af04:	4b21      	ldr	r3, [pc, #132]	; (800af8c <SystemCoreSetup+0xe8>)
 800af06:	695b      	ldr	r3, [r3, #20]
 800af08:	f043 0308 	orr.w	r3, r3, #8
 800af0c:	6153      	str	r3, [r2, #20]

  /* Set priority of memory managment fault */
  NVIC_SetPriority((IRQn_Type)MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0,0));
 800af0e:	f7ff ff5f 	bl	800add0 <__NVIC_GetPriorityGrouping>
 800af12:	4603      	mov	r3, r0
 800af14:	4618      	mov	r0, r3
 800af16:	2100      	movs	r1, #0
 800af18:	2200      	movs	r2, #0
 800af1a:	f7ff ff91 	bl	800ae40 <NVIC_EncodePriority>
 800af1e:	4603      	mov	r3, r0
 800af20:	f06f 000b 	mvn.w	r0, #11
 800af24:	4619      	mov	r1, r3
 800af26:	f7ff ff61 	bl	800adec <__NVIC_SetPriority>
  /* Enable memory management fault */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800af2a:	4a18      	ldr	r2, [pc, #96]	; (800af8c <SystemCoreSetup+0xe8>)
 800af2c:	4b17      	ldr	r3, [pc, #92]	; (800af8c <SystemCoreSetup+0xe8>)
 800af2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af34:	6253      	str	r3, [r2, #36]	; 0x24


  /* Set priority of bus fault */
  NVIC_SetPriority((IRQn_Type)BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0,0));
 800af36:	f7ff ff4b 	bl	800add0 <__NVIC_GetPriorityGrouping>
 800af3a:	4603      	mov	r3, r0
 800af3c:	4618      	mov	r0, r3
 800af3e:	2100      	movs	r1, #0
 800af40:	2200      	movs	r2, #0
 800af42:	f7ff ff7d 	bl	800ae40 <NVIC_EncodePriority>
 800af46:	4603      	mov	r3, r0
 800af48:	f06f 000a 	mvn.w	r0, #10
 800af4c:	4619      	mov	r1, r3
 800af4e:	f7ff ff4d 	bl	800adec <__NVIC_SetPriority>
  /* Enable bus fault */
  SCB->SHCSR |= SCB_SHCSR_BUSFAULTENA_Msk;
 800af52:	4a0e      	ldr	r2, [pc, #56]	; (800af8c <SystemCoreSetup+0xe8>)
 800af54:	4b0d      	ldr	r3, [pc, #52]	; (800af8c <SystemCoreSetup+0xe8>)
 800af56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af5c:	6253      	str	r3, [r2, #36]	; 0x24
 

  /* Set priority of usage fault */
  NVIC_SetPriority((IRQn_Type)UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0,0));
 800af5e:	f7ff ff37 	bl	800add0 <__NVIC_GetPriorityGrouping>
 800af62:	4603      	mov	r3, r0
 800af64:	4618      	mov	r0, r3
 800af66:	2100      	movs	r1, #0
 800af68:	2200      	movs	r2, #0
 800af6a:	f7ff ff69 	bl	800ae40 <NVIC_EncodePriority>
 800af6e:	4603      	mov	r3, r0
 800af70:	f06f 0009 	mvn.w	r0, #9
 800af74:	4619      	mov	r1, r3
 800af76:	f7ff ff39 	bl	800adec <__NVIC_SetPriority>
  /* Enable usage fault */
  SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk;
 800af7a:	4a04      	ldr	r2, [pc, #16]	; (800af8c <SystemCoreSetup+0xe8>)
 800af7c:	4b03      	ldr	r3, [pc, #12]	; (800af8c <SystemCoreSetup+0xe8>)
 800af7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af84:	6253      	str	r3, [r2, #36]	; 0x24
  
}
 800af86:	3708      	adds	r7, #8
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	e000ed00 	.word	0xe000ed00
 800af90:	08000000 	.word	0x08000000
 800af94:	58001000 	.word	0x58001000

0800af98 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 800afa0:	2300      	movs	r3, #0
 800afa2:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	701a      	strb	r2, [r3, #0]

  return (status);
 800afaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800afac:	4618      	mov	r0, r3
 800afae:	3714      	adds	r7, #20
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 800afb8:	b480      	push	{r7}
 800afba:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 800afbc:	4b02      	ldr	r3, [pc, #8]	; (800afc8 <OSCHP_GetFrequency+0x10>)
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr
 800afc8:	00b71b00 	.word	0x00b71b00

0800afcc <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 800afcc:	b5b0      	push	{r4, r5, r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 800afd2:	4b12      	ldr	r3, [pc, #72]	; (800b01c <SystemCoreClockSetup+0x50>)
 800afd4:	1d3c      	adds	r4, r7, #4
 800afd6:	461d      	mov	r5, r3
 800afd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800afda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800afdc:	682b      	ldr	r3, [r5, #0]
 800afde:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 800afe0:	1d3b      	adds	r3, r7, #4
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fb fb74 	bl	80066d0 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 800afe8:	2000      	movs	r0, #0
 800afea:	f7fb fc81 	bl	80068f0 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800afee:	2000      	movs	r0, #0
 800aff0:	f7fb fc36 	bl	8006860 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 800aff4:	2004      	movs	r0, #4
 800aff6:	f7fb fd07 	bl	8006a08 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800affa:	2001      	movs	r0, #1
 800affc:	2120      	movs	r1, #32
 800affe:	f7fb fd4f 	bl	8006aa0 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 800b002:	2000      	movs	r0, #0
 800b004:	f7fb fc40 	bl	8006888 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 800b008:	2001      	movs	r0, #1
 800b00a:	f7fb fd25 	bl	8006a58 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800b00e:	2001      	movs	r0, #1
 800b010:	f7fb fd0e 	bl	8006a30 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 800b014:	3718      	adds	r7, #24
 800b016:	46bd      	mov	sp, r7
 800b018:	bdb0      	pop	{r4, r5, r7, pc}
 800b01a:	bf00      	nop
 800b01c:	0800f6a0 	.word	0x0800f6a0

0800b020 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
                                          const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
                                          const uint32_t service_request)
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	460b      	mov	r3, r1
 800b02a:	607a      	str	r2, [r7, #4]
 800b02c:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	689a      	ldr	r2, [r3, #8]
 800b032:	7afb      	ldrb	r3, [r7, #11]
 800b034:	2107      	movs	r1, #7
 800b036:	fa01 f303 	lsl.w	r3, r1, r3
 800b03a:	43db      	mvns	r3, r3
 800b03c:	401a      	ands	r2, r3
 800b03e:	7afb      	ldrb	r3, [r7, #11]
 800b040:	6879      	ldr	r1, [r7, #4]
 800b042:	fa01 f303 	lsl.w	r3, r1, r3
 800b046:	431a      	orrs	r2, r3
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	609a      	str	r2, [r3, #8]
}
 800b04c:	3714      	adds	r7, #20
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop

0800b058 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	460b      	mov	r3, r1
 800b062:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 800b06c:	78fb      	ldrb	r3, [r7, #3]
 800b06e:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 800b072:	431a      	orrs	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 800b078:	370c      	adds	r7, #12
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop

0800b084 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	60da      	str	r2, [r3, #12]
}
 800b098:	370c      	adds	r7, #12
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop

0800b0a4 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	601a      	str	r2, [r3, #0]
}
 800b0b8:	370c      	adds	r7, #12
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop

0800b0c4 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	601a      	str	r2, [r3, #0]
}
 800b0d8:	370c      	adds	r7, #12
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop

0800b0e4 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f043 0201 	orr.w	r2, r3, #1
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	601a      	str	r2, [r3, #0]
}
 800b0f8:	370c      	adds	r7, #12
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop

0800b104 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f023 0201 	bic.w	r2, r3, #1
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	601a      	str	r2, [r3, #0]
}
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop

0800b124 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	460b      	mov	r3, r1
 800b12e:	607a      	str	r2, [r7, #4]
 800b130:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	6812      	ldr	r2, [r2, #0]
 800b13a:	6891      	ldr	r1, [r2, #8]
 800b13c:	7afa      	ldrb	r2, [r7, #11]
 800b13e:	2007      	movs	r0, #7
 800b140:	fa00 f202 	lsl.w	r2, r0, r2
 800b144:	43d2      	mvns	r2, r2
 800b146:	4011      	ands	r1, r2
                          (service_request << (uint32_t)can_mo_ptr_int);
 800b148:	7afa      	ldrb	r2, [r7, #11]
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 800b150:	430a      	orrs	r2, r1
 800b152:	609a      	str	r2, [r3, #8]
                          (service_request << (uint32_t)can_mo_ptr_int);
}
 800b154:	3714      	adds	r7, #20
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop

0800b160 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
                                        const uint32_t event)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	6812      	ldr	r2, [r2, #0]
 800b172:	6811      	ldr	r1, [r2, #0]
 800b174:	683a      	ldr	r2, [r7, #0]
 800b176:	430a      	orrs	r2, r1
 800b178:	601a      	str	r2, [r3, #0]
}
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <CAN_NODE_MO_EnableTxEvent>:
 *     return (1);
 *  }
 *  @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4618      	mov	r0, r3
 800b192:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800b196:	f7ff ffe3 	bl	800b160 <XMC_CAN_MO_EnableEvent>
}
 800b19a:	3708      	adds	r7, #8
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <CAN_NODE_MO_EnableRxEvent>:
 *  }
 *  @endcode
 */

__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b1b2:	f7ff ffd5 	bl	800b160 <XMC_CAN_MO_EnableEvent>
}
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f831 	bl	800b230 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d003      	beq.n	800b1e0 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f043 0302 	orr.w	r3, r3, #2
 800b1de:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d003      	beq.n	800b1f2 <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f043 0304 	orr.w	r3, r3, #4
 800b1f0:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d003      	beq.n	800b204 <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f043 0308 	orr.w	r3, r3, #8
 800b202:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	4618      	mov	r0, r3
 800b20a:	68f9      	ldr	r1, [r7, #12]
 800b20c:	f7fc f9c4 	bl	8007598 <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800b216:	2b00      	cmp	r3, #0
 800b218:	d006      	beq.n	800b228 <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	4618      	mov	r0, r3
 800b220:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b224:	f7fc f9b8 	bl	8007598 <XMC_CAN_NODE_EnableEvent>
  }

}
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop

0800b230 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b242:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 800b244:	4610      	mov	r0, r2
 800b246:	2100      	movs	r1, #0
 800b248:	461a      	mov	r2, r3
 800b24a:	f7ff fee9 	bl	800b020 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b258:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 800b25a:	4610      	mov	r0, r2
 800b25c:	2104      	movs	r1, #4
 800b25e:	461a      	mov	r2, r3
 800b260:	f7ff fede 	bl	800b020 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b26e:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 800b270:	4610      	mov	r0, r2
 800b272:	2108      	movs	r1, #8
 800b274:	461a      	mov	r2, r3
 800b276:	f7ff fed3 	bl	800b020 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b284:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 800b286:	4610      	mov	r0, r2
 800b288:	210c      	movs	r1, #12
 800b28a:	461a      	mov	r2, r3
 800b28c:	f7ff fec8 	bl	800b020 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 800b290:	3708      	adds	r7, #8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop

0800b298 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7fb ffa5 	bl	80071f4 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	79db      	ldrb	r3, [r3, #7]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00b      	beq.n	800b2ca <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681a      	ldr	r2, [r3, #0]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	795b      	ldrb	r3, [r3, #5]
 800b2ba:	4610      	mov	r0, r2
 800b2bc:	2104      	movs	r1, #4
 800b2be:	461a      	mov	r2, r3
 800b2c0:	f7ff ff30 	bl	800b124 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7ff ff5d 	bl	800b184 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	7a1b      	ldrb	r3, [r3, #8]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d00b      	beq.n	800b2ea <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	799b      	ldrb	r3, [r3, #6]
 800b2da:	4610      	mov	r0, r2
 800b2dc:	2100      	movs	r1, #0
 800b2de:	461a      	mov	r2, r3
 800b2e0:	f7ff ff20 	bl	800b124 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f7ff ff5b 	bl	800b1a0 <CAN_NODE_MO_EnableRxEvent>
  }

}
 800b2ea:	3708      	adds	r7, #8
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4618      	mov	r0, r3
 800b302:	f7fc f84b 	bl	800739c <XMC_CAN_MO_Transmit>
 800b306:	4603      	mov	r3, r0
 800b308:	73fb      	strb	r3, [r7, #15]
  return (status);
 800b30a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800b31c:	2300      	movs	r3, #0
 800b31e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4618      	mov	r0, r3
 800b326:	f7fc f867 	bl	80073f8 <XMC_CAN_MO_Receive>
 800b32a:	4603      	mov	r3, r0
 800b32c:	73fb      	strb	r3, [r7, #15]
  return (status);
 800b32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800b342:	2300      	movs	r3, #0
 800b344:	73fb      	strb	r3, [r7, #15]
  uint32_t *data_pointer = (uint32_t*) array_data;
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68ba      	ldr	r2, [r7, #8]
 800b350:	6812      	ldr	r2, [r2, #0]
 800b352:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	6852      	ldr	r2, [r2, #4]
 800b35c:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4618      	mov	r0, r3
 800b364:	f7fb ffe2 	bl	800732c <XMC_CAN_MO_UpdateData>
 800b368:	4603      	mov	r3, r0
 800b36a:	73fb      	strb	r3, [r7, #15]
  return (status);
 800b36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop

0800b378 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b086      	sub	sp, #24
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800b380:	2300      	movs	r3, #0
 800b382:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b38a:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4618      	mov	r0, r3
 800b392:	f7fd f80b 	bl	80083ac <GLOBAL_CAN_Init>
 800b396:	4603      	mov	r3, r0
 800b398:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 800b39a:	7dfb      	ldrb	r3, [r7, #23]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	f040 8082 	bne.w	800b4a6 <CAN_NODE_Init+0x12e>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	685a      	ldr	r2, [r3, #4]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	f7fb fdeb 	bl	8006f88 <XMC_CAN_NODE_NominalBitTimeConfigureEx>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d173      	bne.n	800b4a0 <CAN_NODE_Init+0x128>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7ff fe71 	bl	800b0a4 <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7ff fe8c 	bl	800b0e4 <XMC_CAN_NODE_SetInitBit>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d005      	beq.n	800b3e2 <CAN_NODE_Init+0x6a>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7ff fe52 	bl	800b084 <XMC_CAN_NODE_EnableLoopBack>
 800b3e0:	e018      	b.n	800b414 <CAN_NODE_Init+0x9c>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3e8:	6819      	ldr	r1, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3f0:	791a      	ldrb	r2, [r3, #4]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3f8:	4608      	mov	r0, r1
 800b3fa:	4611      	mov	r1, r2
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	f7fb f85b 	bl	80064b8 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	685a      	ldr	r2, [r3, #4]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b40c:	4610      	mov	r0, r2
 800b40e:	4619      	mov	r1, r3
 800b410:	f7ff fe22 	bl	800b058 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7ff fed1 	bl	800b1bc <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 800b41a:	2300      	movs	r3, #0
 800b41c:	613b      	str	r3, [r7, #16]
 800b41e:	e019      	b.n	800b454 <CAN_NODE_Init+0xdc>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	3302      	adds	r3, #2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	4413      	add	r3, r2
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	6859      	ldr	r1, [r3, #4]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	791b      	ldrb	r3, [r3, #4]
 800b43e:	4608      	mov	r0, r1
 800b440:	4611      	mov	r1, r2
 800b442:	461a      	mov	r2, r3
 800b444:	f7fb fe46 	bl	80070d4 <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
 800b448:	68b8      	ldr	r0, [r7, #8]
 800b44a:	f7ff ff25 	bl	800b298 <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	3301      	adds	r3, #1
 800b452:	613b      	str	r3, [r7, #16]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800b45a:	461a      	mov	r2, r3
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d8de      	bhi.n	800b420 <CAN_NODE_Init+0xa8>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	4618      	mov	r0, r3
 800b468:	f7ff fe2c 	bl	800b0c4 <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	4618      	mov	r0, r3
 800b472:	f7ff fe47 	bl	800b104 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800b47c:	f083 0301 	eor.w	r3, r3, #1
 800b480:	b2db      	uxtb	r3, r3
 800b482:	2b00      	cmp	r3, #0
 800b484:	d011      	beq.n	800b4aa <CAN_NODE_Init+0x132>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6819      	ldr	r1, [r3, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	791a      	ldrb	r2, [r3, #4]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b494:	4608      	mov	r0, r1
 800b496:	4611      	mov	r1, r2
 800b498:	461a      	mov	r2, r3
 800b49a:	f7fb f80d 	bl	80064b8 <XMC_GPIO_Init>
 800b49e:	e004      	b.n	800b4aa <CAN_NODE_Init+0x132>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	75fb      	strb	r3, [r7, #23]
 800b4a4:	e001      	b.n	800b4aa <CAN_NODE_Init+0x132>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 800b4aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3718      	adds	r7, #24
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	607a      	str	r2, [r7, #4]
 800b4c0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
 800b4c2:	7afb      	ldrb	r3, [r7, #11]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	409a      	lsls	r2, r3
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	605a      	str	r2, [r3, #4]
}
 800b4cc:	3714      	adds	r7, #20
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop

0800b4d8 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4e8:	78fb      	ldrb	r3, [r7, #3]
 800b4ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b4ee:	f003 0301 	and.w	r3, r3, #1
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	370c      	adds	r7, #12
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop

0800b500 <BUS_IO_Init>:
* @param handle_ptr Pointer pointing to APP data structure.
* @return BUS_IO_STATUS_t BUS_IO APP status.
*/

BUS_IO_STATUS_t BUS_IO_Init(BUS_IO_t *const handle_ptr)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  uint8_t i;

  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	7c5b      	ldrb	r3, [r3, #17]
 800b50c:	f083 0301 	eor.w	r3, r3, #1
 800b510:	b2db      	uxtb	r3, r3
 800b512:	2b00      	cmp	r3, #0
 800b514:	d020      	beq.n	800b558 <BUS_IO_Init+0x58>
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b516:	2300      	movs	r3, #0
 800b518:	73fb      	strb	r3, [r7, #15]
 800b51a:	e015      	b.n	800b548 <BUS_IO_Init+0x48>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	7bfb      	ldrb	r3, [r7, #15]
 800b522:	00db      	lsls	r3, r3, #3
 800b524:	4413      	add	r3, r2
 800b526:	6819      	ldr	r1, [r3, #0]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
 800b52e:	00db      	lsls	r3, r3, #3
 800b530:	4413      	add	r3, r2
 800b532:	791a      	ldrb	r2, [r3, #4]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3304      	adds	r3, #4
 800b538:	4608      	mov	r0, r1
 800b53a:	4611      	mov	r1, r2
 800b53c:	461a      	mov	r2, r3
 800b53e:	f7fa ffbb 	bl	80064b8 <XMC_GPIO_Init>
  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b542:	7bfb      	ldrb	r3, [r7, #15]
 800b544:	3301      	adds	r3, #1
 800b546:	73fb      	strb	r3, [r7, #15]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	7c1b      	ldrb	r3, [r3, #16]
 800b54c:	7bfa      	ldrb	r2, [r7, #15]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d3e4      	bcc.n	800b51c <BUS_IO_Init+0x1c>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
    }
    handle_ptr->initialized = (bool)true;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2201      	movs	r2, #1
 800b556:	745a      	strb	r2, [r3, #17]
  }
  return (BUS_IO_STATUS_OK);
 800b558:	2300      	movs	r3, #0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop

0800b564 <BUS_IO_Read>:
  }
}

/* Function to read the bus pins state */
uint16_t BUS_IO_Read(BUS_IO_t *const handle_ptr)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint16_t count = 0U;
 800b56c:	2300      	movs	r3, #0
 800b56e:	81bb      	strh	r3, [r7, #12]

  XMC_ASSERT("BUS_IO_Read: handle_ptr null pointer", handle_ptr != NULL);

  /* Iterate the list of pins reading the pin state and packing the result according the pin position in the list, from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b570:	2300      	movs	r3, #0
 800b572:	73fb      	strb	r3, [r7, #15]
 800b574:	e01a      	b.n	800b5ac <BUS_IO_Read+0x48>
  {
    /* Reading a bus pin's state */
    count |= (uint16_t)(XMC_GPIO_GetInput(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin) << i);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	7bfb      	ldrb	r3, [r7, #15]
 800b57c:	00db      	lsls	r3, r3, #3
 800b57e:	4413      	add	r3, r2
 800b580:	6819      	ldr	r1, [r3, #0]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	7bfb      	ldrb	r3, [r7, #15]
 800b588:	00db      	lsls	r3, r3, #3
 800b58a:	4413      	add	r3, r2
 800b58c:	791b      	ldrb	r3, [r3, #4]
 800b58e:	4608      	mov	r0, r1
 800b590:	4619      	mov	r1, r3
 800b592:	f7ff ffa1 	bl	800b4d8 <XMC_GPIO_GetInput>
 800b596:	4602      	mov	r2, r0
 800b598:	7bfb      	ldrb	r3, [r7, #15]
 800b59a:	fa02 f303 	lsl.w	r3, r2, r3
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	89bb      	ldrh	r3, [r7, #12]
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	81bb      	strh	r3, [r7, #12]
  uint16_t count = 0U;

  XMC_ASSERT("BUS_IO_Read: handle_ptr null pointer", handle_ptr != NULL);

  /* Iterate the list of pins reading the pin state and packing the result according the pin position in the list, from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b5a6:	7bfb      	ldrb	r3, [r7, #15]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	73fb      	strb	r3, [r7, #15]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	7c1b      	ldrb	r3, [r3, #16]
 800b5b0:	7bfa      	ldrb	r2, [r7, #15]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d3df      	bcc.n	800b576 <BUS_IO_Read+0x12>
  {
    /* Reading a bus pin's state */
    count |= (uint16_t)(XMC_GPIO_GetInput(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin) << i);
  }
  return(count);
 800b5b6:	89bb      	ldrh	r3, [r7, #12]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <BUS_IO_Write>:

/* Function to set the pins bus state */
void BUS_IO_Write(BUS_IO_t *const handle_ptr, const uint16_t data)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  const BUS_IO_PORT_PIN_t *bus_io_port_pin;

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	60bb      	str	r3, [r7, #8]
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	73fb      	strb	r3, [r7, #15]
 800b5d6:	e023      	b.n	800b620 <BUS_IO_Write+0x60>
  {
    if (data & (uint16_t)((uint16_t)1 << i))
 800b5d8:	7bfb      	ldrb	r3, [r7, #15]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	887b      	ldrh	r3, [r7, #2]
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d009      	beq.n	800b600 <BUS_IO_Write+0x40>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_HIGH);
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	791b      	ldrb	r3, [r3, #4]
 800b5f4:	4610      	mov	r0, r2
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	f7ff ff5b 	bl	800b4b4 <XMC_GPIO_SetOutputLevel>
 800b5fe:	e009      	b.n	800b614 <BUS_IO_Write+0x54>
    }
    else
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	791b      	ldrb	r3, [r3, #4]
 800b608:	4610      	mov	r0, r2
 800b60a:	4619      	mov	r1, r3
 800b60c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b610:	f7ff ff50 	bl	800b4b4 <XMC_GPIO_SetOutputLevel>
    }
   bus_io_port_pin++;
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	3308      	adds	r3, #8
 800b618:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b61a:	7bfb      	ldrb	r3, [r7, #15]
 800b61c:	3301      	adds	r3, #1
 800b61e:	73fb      	strb	r3, [r7, #15]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	7c1b      	ldrb	r3, [r3, #16]
 800b624:	7bfa      	ldrb	r2, [r7, #15]
 800b626:	429a      	cmp	r2, r3
 800b628:	d3d6      	bcc.n	800b5d8 <BUS_IO_Write+0x18>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
    }
   bus_io_port_pin++;
  }
}
 800b62a:	3710      	adds	r7, #16
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <ANALOG_IO_Init>:
 * Input Parameter  : Handler Pointer pointing to APP data structure.
 * Output Parameter : ANALOG_IO_STATUS_t (ANALOG_IO APP initialization status).
 */

ANALOG_IO_STATUS_t ANALOG_IO_Init(const ANALOG_IO_t *const handle)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ANALOG_IO_Init: Passed handler is a null pointer", handler != NULL);
  if (*(handle->state) == ANALOG_IO_STATE_NOT_INITIALIZED)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d10a      	bne.n	800b658 <ANALOG_IO_Init+0x28>
  {
    if (handle->config_ptr != NULL)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d002      	beq.n	800b650 <ANALOG_IO_Init+0x20>
    {
      /* Instance specific initialization function call*/
      handle->config_ptr();
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4798      	blx	r3
    }
    /* Set the state variable to initialized state*/
    *(handle->state) = ANALOG_IO_STATE_INITIALIZED;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	701a      	strb	r2, [r3, #0]
  }
  return (ANALOG_IO_STATUS_OK);
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop

0800b664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b664:	b480      	push	{r7}
 800b666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b668:	4b04      	ldr	r3, [pc, #16]	; (800b67c <__NVIC_GetPriorityGrouping+0x18>)
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b670:	0a1b      	lsrs	r3, r3, #8
}
 800b672:	4618      	mov	r0, r3
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr
 800b67c:	e000ed00 	.word	0xe000ed00

0800b680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	4603      	mov	r3, r0
 800b688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b68a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	db0b      	blt.n	800b6aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b692:	4908      	ldr	r1, [pc, #32]	; (800b6b4 <__NVIC_EnableIRQ+0x34>)
 800b694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b698:	095b      	lsrs	r3, r3, #5
 800b69a:	79fa      	ldrb	r2, [r7, #7]
 800b69c:	f002 021f 	and.w	r2, r2, #31
 800b6a0:	2001      	movs	r0, #1
 800b6a2:	fa00 f202 	lsl.w	r2, r0, r2
 800b6a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr
 800b6b4:	e000e100 	.word	0xe000e100

0800b6b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	4603      	mov	r3, r0
 800b6c0:	6039      	str	r1, [r7, #0]
 800b6c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b6c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	db0a      	blt.n	800b6e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6cc:	490d      	ldr	r1, [pc, #52]	; (800b704 <__NVIC_SetPriority+0x4c>)
 800b6ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	b2d2      	uxtb	r2, r2
 800b6d6:	0092      	lsls	r2, r2, #2
 800b6d8:	b2d2      	uxtb	r2, r2
 800b6da:	440b      	add	r3, r1
 800b6dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800b6e0:	e00a      	b.n	800b6f8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6e2:	4909      	ldr	r1, [pc, #36]	; (800b708 <__NVIC_SetPriority+0x50>)
 800b6e4:	79fb      	ldrb	r3, [r7, #7]
 800b6e6:	f003 030f 	and.w	r3, r3, #15
 800b6ea:	3b04      	subs	r3, #4
 800b6ec:	683a      	ldr	r2, [r7, #0]
 800b6ee:	b2d2      	uxtb	r2, r2
 800b6f0:	0092      	lsls	r2, r2, #2
 800b6f2:	b2d2      	uxtb	r2, r2
 800b6f4:	440b      	add	r3, r1
 800b6f6:	761a      	strb	r2, [r3, #24]
  }
}
 800b6f8:	370c      	adds	r7, #12
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	e000e100 	.word	0xe000e100
 800b708:	e000ed00 	.word	0xe000ed00

0800b70c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b089      	sub	sp, #36	; 0x24
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f003 0307 	and.w	r3, r3, #7
 800b71e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	f1c3 0307 	rsb	r3, r3, #7
 800b726:	2b06      	cmp	r3, #6
 800b728:	bf28      	it	cs
 800b72a:	2306      	movcs	r3, #6
 800b72c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	3306      	adds	r3, #6
 800b732:	2b06      	cmp	r3, #6
 800b734:	d902      	bls.n	800b73c <NVIC_EncodePriority+0x30>
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	3b01      	subs	r3, #1
 800b73a:	e000      	b.n	800b73e <NVIC_EncodePriority+0x32>
 800b73c:	2300      	movs	r3, #0
 800b73e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	2201      	movs	r2, #1
 800b744:	fa02 f303 	lsl.w	r3, r2, r3
 800b748:	1e5a      	subs	r2, r3, #1
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	401a      	ands	r2, r3
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	2101      	movs	r1, #1
 800b756:	fa01 f303 	lsl.w	r3, r1, r3
 800b75a:	1e59      	subs	r1, r3, #1
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800b760:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800b762:	4618      	mov	r0, r3
 800b764:	3724      	adds	r7, #36	; 0x24
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop

0800b770 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b77e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop

0800b794 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
                                                                    const uint32_t grp_num,
                                                                    const uint32_t ch_num)
{
 800b794:	b480      	push	{r7}
 800b796:	b085      	sub	sp, #20
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	3260      	adds	r2, #96	; 0x60
 800b7a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2101      	movs	r1, #1
 800b7ae:	fa01 f303 	lsl.w	r3, r1, r3
 800b7b2:	ea42 0103 	orr.w	r1, r2, r3
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	3260      	adds	r2, #96	; 0x60
 800b7bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800b7c0:	3714      	adds	r7, #20
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop

0800b7cc <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6819      	ldr	r1, [r3, #0]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	32a0      	adds	r2, #160	; 0xa0
 800b7e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800b7e6:	3714      	adds	r7, #20
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	683a      	ldr	r2, [r7, #0]
 800b7fe:	32c0      	adds	r2, #192	; 0xc0
 800b800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b804:	b29b      	uxth	r3, r3
}
 800b806:	4618      	mov	r0, r3
 800b808:	370c      	adds	r7, #12
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop

0800b814 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 800b814:	b590      	push	{r4, r7, lr}
 800b816:	b085      	sub	sp, #20
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	7e1b      	ldrb	r3, [r3, #24]
 800b820:	2b02      	cmp	r3, #2
 800b822:	f040 80a7 	bne.w	800b974 <ADC_MEASUREMENT_Init+0x160>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fc fdf4 	bl	8008418 <GLOBAL_ADC_Init>
 800b830:	4603      	mov	r3, r0
 800b832:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	695a      	ldr	r2, [r3, #20]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	4610      	mov	r0, r2
 800b840:	6819      	ldr	r1, [r3, #0]
 800b842:	2200      	movs	r2, #0
 800b844:	2300      	movs	r3, #0
 800b846:	f7fc f8a1 	bl	800798c <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	695a      	ldr	r2, [r3, #20]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	4610      	mov	r0, r2
 800b856:	4619      	mov	r1, r3
 800b858:	f7fc f9be 	bl	8007bd8 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800b85c:	2300      	movs	r3, #0
 800b85e:	73fb      	strb	r3, [r7, #15]
 800b860:	e03c      	b.n	800b8dc <ADC_MEASUREMENT_Init+0xc8>
    {
      indexed = handle_ptr->array->channel_array[j];
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	7bfa      	ldrb	r2, [r7, #15]
 800b868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86c:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	689a      	ldr	r2, [r3, #8]
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	7c5b      	ldrb	r3, [r3, #17]
 800b876:	4619      	mov	r1, r3
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4610      	mov	r0, r2
 800b87e:	461a      	mov	r2, r3
 800b880:	f7fc fa28 	bl	8007cd4 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	689a      	ldr	r2, [r3, #8]
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	789b      	ldrb	r3, [r3, #2]
 800b88e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b892:	b2db      	uxtb	r3, r3
 800b894:	4619      	mov	r1, r3
                                indexed->res_handle);
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 800b89a:	4610      	mov	r0, r2
 800b89c:	461a      	mov	r2, r3
 800b89e:	f7ff ff95 	bl	800b7cc <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	7c1b      	ldrb	r3, [r3, #16]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800b8ac:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	7c5b      	ldrb	r3, [r3, #17]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800b8b2:	4610      	mov	r0, r2
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	f7ff ff6d 	bl	800b794 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);

#ifdef ADC_MEASUREMENT_ANALOG_IO_USED
      /* ANALOG_IO initialization for the channel*/
      if(indexed->analog_io_config != NULL)
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d009      	beq.n	800b8d6 <ADC_MEASUREMENT_Init+0xc2>
      {
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7ff feb2 	bl	800b630 <ANALOG_IO_Init>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	7bbb      	ldrb	r3, [r7, #14]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	73bb      	strb	r3, [r7, #14]
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800b8d6:	7bfb      	ldrb	r3, [r7, #15]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	73fb      	strb	r3, [r7, #15]
 800b8dc:	7bfb      	ldrb	r3, [r7, #15]
 800b8de:	2b0a      	cmp	r3, #10
 800b8e0:	d9bf      	bls.n	800b862 <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	7a1b      	ldrb	r3, [r3, #8]
 800b8e8:	f003 0308 	and.w	r3, r3, #8
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d02c      	beq.n	800b94c <ADC_MEASUREMENT_Init+0x138>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	691b      	ldr	r3, [r3, #16]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d028      	beq.n	800b94c <ADC_MEASUREMENT_Init+0x138>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	691b      	ldr	r3, [r3, #16]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	b2dc      	uxtb	r4, r3
 800b902:	f7ff feaf 	bl	800b664 <__NVIC_GetPriorityGrouping>
 800b906:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800b90c:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	4608      	mov	r0, r1
 800b916:	4611      	mov	r1, r2
 800b918:	461a      	mov	r2, r3
 800b91a:	f7ff fef7 	bl	800b70c <NVIC_EncodePriority>
 800b91e:	4602      	mov	r2, r0
 800b920:	b263      	sxtb	r3, r4
 800b922:	4618      	mov	r0, r3
 800b924:	4611      	mov	r1, r2
 800b926:	f7ff fec7 	bl	800b6b8 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	695a      	ldr	r2, [r3, #20]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	7e5b      	ldrb	r3, [r3, #25]
 800b934:	4610      	mov	r0, r2
 800b936:	4619      	mov	r1, r3
 800b938:	f7fc f87e 	bl	8007a38 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	691b      	ldr	r3, [r3, #16]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	b2db      	uxtb	r3, r3
 800b944:	b25b      	sxtb	r3, r3
 800b946:	4618      	mov	r0, r3
 800b948:	f7ff fe9a 	bl	800b680 <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	695b      	ldr	r3, [r3, #20]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d002      	beq.n	800b95a <ADC_MEASUREMENT_Init+0x146>
    {
    	(handle_ptr->mux_config)();
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	695b      	ldr	r3, [r3, #20]
 800b958:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	7e9b      	ldrb	r3, [r3, #26]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d005      	beq.n	800b96e <ADC_MEASUREMENT_Init+0x15a>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	695b      	ldr	r3, [r3, #20]
 800b968:	4618      	mov	r0, r3
 800b96a:	f7ff ff01 	bl	800b770 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	7bba      	ldrb	r2, [r7, #14]
 800b972:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	7e1b      	ldrb	r3, [r3, #24]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3714      	adds	r7, #20
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd90      	pop	{r4, r7, pc}

0800b980 <ADC_MEASUREMENT_GetResult>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	689a      	ldr	r2, [r3, #8]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	789b      	ldrb	r3, [r3, #2]
 800b992:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b996:	b2db      	uxtb	r3, r3
 800b998:	4610      	mov	r0, r2
 800b99a:	4619      	mov	r1, r3
 800b99c:	f7ff ff28 	bl	800b7f0 <XMC_VADC_GROUP_GetResult>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	81fb      	strh	r3, [r7, #14]

  return (result);
 800b9a4:	89fb      	ldrh	r3, [r7, #14]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop

0800b9b0 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 800b9ba:	4851      	ldr	r0, [pc, #324]	; (800bb00 <DAVE_Init+0x150>)
 800b9bc:	f7ff faec 	bl	800af98 <CLOCK_XMC4_Init>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 800b9c4:	79fb      	ldrb	r3, [r7, #7]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d104      	bne.n	800b9d4 <DAVE_Init+0x24>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_1 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_1); 
 800b9ca:	484e      	ldr	r0, [pc, #312]	; (800bb04 <DAVE_Init+0x154>)
 800b9cc:	f7ff fcd4 	bl	800b378 <CAN_NODE_Init>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800b9d4:	79fb      	ldrb	r3, [r7, #7]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d104      	bne.n	800b9e4 <DAVE_Init+0x34>
  {
	 /**  Initialization of BUS_IO APP instance BUS_IO */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&BUS_IO); 
 800b9da:	484b      	ldr	r0, [pc, #300]	; (800bb08 <DAVE_Init+0x158>)
 800b9dc:	f7ff fd90 	bl	800b500 <BUS_IO_Init>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800b9e4:	79fb      	ldrb	r3, [r7, #7]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d104      	bne.n	800b9f4 <DAVE_Init+0x44>
  {
	 /**  Initialization of WATCHDOG APP instance WATCHDOG */
	 init_status = (DAVE_STATUS_t)WATCHDOG_Init(&WATCHDOG); 
 800b9ea:	4848      	ldr	r0, [pc, #288]	; (800bb0c <DAVE_Init+0x15c>)
 800b9ec:	f7fc fa34 	bl	8007e58 <WATCHDOG_Init>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800b9f4:	79fb      	ldrb	r3, [r7, #7]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d104      	bne.n	800ba04 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_Debug_LED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_Debug_LED); 
 800b9fa:	4845      	ldr	r0, [pc, #276]	; (800bb10 <DAVE_Init+0x160>)
 800b9fc:	f7ff f94a 	bl	800ac94 <DIGITAL_IO_Init>
 800ba00:	4603      	mov	r3, r0
 800ba02:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800ba04:	79fb      	ldrb	r3, [r7, #7]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d104      	bne.n	800ba14 <DAVE_Init+0x64>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_2 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_2); 
 800ba0a:	4842      	ldr	r0, [pc, #264]	; (800bb14 <DAVE_Init+0x164>)
 800ba0c:	f7ff fcb4 	bl	800b378 <CAN_NODE_Init>
 800ba10:	4603      	mov	r3, r0
 800ba12:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800ba14:	79fb      	ldrb	r3, [r7, #7]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d104      	bne.n	800ba24 <DAVE_Init+0x74>
  {
	 /**  Initialization of PWM APP instance PWM_MHJ9_IN */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MHJ9_IN); 
 800ba1a:	483f      	ldr	r0, [pc, #252]	; (800bb18 <DAVE_Init+0x168>)
 800ba1c:	f7fc fba0 	bl	8008160 <PWM_Init>
 800ba20:	4603      	mov	r3, r0
 800ba22:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800ba24:	79fb      	ldrb	r3, [r7, #7]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d104      	bne.n	800ba34 <DAVE_Init+0x84>
  {
	 /**  Initialization of PWM APP instance PWM_MHJ9_OUT */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MHJ9_OUT); 
 800ba2a:	483c      	ldr	r0, [pc, #240]	; (800bb1c <DAVE_Init+0x16c>)
 800ba2c:	f7fc fb98 	bl	8008160 <PWM_Init>
 800ba30:	4603      	mov	r3, r0
 800ba32:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800ba34:	79fb      	ldrb	r3, [r7, #7]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d104      	bne.n	800ba44 <DAVE_Init+0x94>
  {
	 /**  Initialization of PWM APP instance PWM_Waterpump */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_Waterpump); 
 800ba3a:	4839      	ldr	r0, [pc, #228]	; (800bb20 <DAVE_Init+0x170>)
 800ba3c:	f7fc fb90 	bl	8008160 <PWM_Init>
 800ba40:	4603      	mov	r3, r0
 800ba42:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800ba44:	79fb      	ldrb	r3, [r7, #7]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d104      	bne.n	800ba54 <DAVE_Init+0xa4>
  {
	 /**  Initialization of PWM APP instance PWM_Fans1 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_Fans1); 
 800ba4a:	4836      	ldr	r0, [pc, #216]	; (800bb24 <DAVE_Init+0x174>)
 800ba4c:	f7fc fb88 	bl	8008160 <PWM_Init>
 800ba50:	4603      	mov	r3, r0
 800ba52:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800ba54:	79fb      	ldrb	r3, [r7, #7]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d104      	bne.n	800ba64 <DAVE_Init+0xb4>
  {
	 /**  Initialization of PWM APP instance PWM_Fans2 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_Fans2); 
 800ba5a:	4833      	ldr	r0, [pc, #204]	; (800bb28 <DAVE_Init+0x178>)
 800ba5c:	f7fc fb80 	bl	8008160 <PWM_Init>
 800ba60:	4603      	mov	r3, r0
 800ba62:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800ba64:	79fb      	ldrb	r3, [r7, #7]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d104      	bne.n	800ba74 <DAVE_Init+0xc4>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT); 
 800ba6a:	4830      	ldr	r0, [pc, #192]	; (800bb2c <DAVE_Init+0x17c>)
 800ba6c:	f7ff fed2 	bl	800b814 <ADC_MEASUREMENT_Init>
 800ba70:	4603      	mov	r3, r0
 800ba72:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800ba74:	79fb      	ldrb	r3, [r7, #7]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d104      	bne.n	800ba84 <DAVE_Init+0xd4>
  {
	 /**  Initialization of DIGITAL_IO APP instance CAN1_Res */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CAN1_Res); 
 800ba7a:	482d      	ldr	r0, [pc, #180]	; (800bb30 <DAVE_Init+0x180>)
 800ba7c:	f7ff f90a 	bl	800ac94 <DIGITAL_IO_Init>
 800ba80:	4603      	mov	r3, r0
 800ba82:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800ba84:	79fb      	ldrb	r3, [r7, #7]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d104      	bne.n	800ba94 <DAVE_Init+0xe4>
  {
	 /**  Initialization of DIGITAL_IO APP instance CAN2_Res */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CAN2_Res); 
 800ba8a:	482a      	ldr	r0, [pc, #168]	; (800bb34 <DAVE_Init+0x184>)
 800ba8c:	f7ff f902 	bl	800ac94 <DIGITAL_IO_Init>
 800ba90:	4603      	mov	r3, r0
 800ba92:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800ba94:	79fb      	ldrb	r3, [r7, #7]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d104      	bne.n	800baa4 <DAVE_Init+0xf4>
  {
	 /**  Initialization of EVENT_DETECTOR APP instance EVENT_DETECTOR_Shifting */
	 init_status = (DAVE_STATUS_t)EVENT_DETECTOR_Init(&EVENT_DETECTOR_Shifting); 
 800ba9a:	4827      	ldr	r0, [pc, #156]	; (800bb38 <DAVE_Init+0x188>)
 800ba9c:	f7ff f8dc 	bl	800ac58 <EVENT_DETECTOR_Init>
 800baa0:	4603      	mov	r3, r0
 800baa2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800baa4:	79fb      	ldrb	r3, [r7, #7]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d104      	bne.n	800bab4 <DAVE_Init+0x104>
  {
	 /**  Initialization of EVENT_GENERATOR APP instance EVENT_GENERATOR_Shifting */
	 init_status = (DAVE_STATUS_t)EVENT_GENERATOR_Init(&EVENT_GENERATOR_Shifting); 
 800baaa:	4824      	ldr	r0, [pc, #144]	; (800bb3c <DAVE_Init+0x18c>)
 800baac:	f7ff f8b0 	bl	800ac10 <EVENT_GENERATOR_Init>
 800bab0:	4603      	mov	r3, r0
 800bab2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bab4:	79fb      	ldrb	r3, [r7, #7]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d104      	bne.n	800bac4 <DAVE_Init+0x114>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_Shifting */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_Shifting); 
 800baba:	4821      	ldr	r0, [pc, #132]	; (800bb40 <DAVE_Init+0x190>)
 800babc:	f7fc fc22 	bl	8008304 <INTERRUPT_Init>
 800bac0:	4603      	mov	r3, r0
 800bac2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bac4:	79fb      	ldrb	r3, [r7, #7]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d104      	bne.n	800bad4 <DAVE_Init+0x124>
  {
	 /**  Initialization of DIGITAL_IO APP instance Signal_DownShift */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Signal_DownShift); 
 800baca:	481e      	ldr	r0, [pc, #120]	; (800bb44 <DAVE_Init+0x194>)
 800bacc:	f7ff f8e2 	bl	800ac94 <DIGITAL_IO_Init>
 800bad0:	4603      	mov	r3, r0
 800bad2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bad4:	79fb      	ldrb	r3, [r7, #7]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d104      	bne.n	800bae4 <DAVE_Init+0x134>
  {
	 /**  Initialization of DIGITAL_IO APP instance Signal_UpShift */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Signal_UpShift); 
 800bada:	481b      	ldr	r0, [pc, #108]	; (800bb48 <DAVE_Init+0x198>)
 800badc:	f7ff f8da 	bl	800ac94 <DIGITAL_IO_Init>
 800bae0:	4603      	mov	r3, r0
 800bae2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bae4:	79fb      	ldrb	r3, [r7, #7]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d104      	bne.n	800baf4 <DAVE_Init+0x144>
  {
	 /**  Initialization of BUS_IO APP instance BUS_IO_Input */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&BUS_IO_Input); 
 800baea:	4818      	ldr	r0, [pc, #96]	; (800bb4c <DAVE_Init+0x19c>)
 800baec:	f7ff fd08 	bl	800b500 <BUS_IO_Init>
 800baf0:	4603      	mov	r3, r0
 800baf2:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 800baf4:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800baf6:	4618      	mov	r0, r3
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	20000810 	.word	0x20000810
 800bb04:	0800f740 	.word	0x0800f740
 800bb08:	20000470 	.word	0x20000470
 800bb0c:	2000000c 	.word	0x2000000c
 800bb10:	0800f63c 	.word	0x0800f63c
 800bb14:	0800f8b0 	.word	0x0800f8b0
 800bb18:	20000014 	.word	0x20000014
 800bb1c:	20000048 	.word	0x20000048
 800bb20:	2000007c 	.word	0x2000007c
 800bb24:	200000b0 	.word	0x200000b0
 800bb28:	200000e4 	.word	0x200000e4
 800bb2c:	20000624 	.word	0x20000624
 800bb30:	0800f650 	.word	0x0800f650
 800bb34:	0800f664 	.word	0x0800f664
 800bb38:	200001a4 	.word	0x200001a4
 800bb3c:	20000194 	.word	0x20000194
 800bb40:	0800f59c 	.word	0x0800f59c
 800bb44:	0800f678 	.word	0x0800f678
 800bb48:	0800f68c 	.word	0x0800f68c
 800bb4c:	20000484 	.word	0x20000484

0800bb50 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	460b      	mov	r3, r1
 800bb5a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800bb5c:	78fb      	ldrb	r3, [r7, #3]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	409a      	lsls	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	605a      	str	r2, [r3, #4]
}
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	460b      	mov	r3, r1
 800bb7a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800bb7c:	78fb      	ldrb	r3, [r7, #3]
 800bb7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bb82:	409a      	lsls	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	605a      	str	r2, [r3, #4]
}
 800bb88:	370c      	adds	r7, #12
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop

0800bb94 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	7c1b      	ldrb	r3, [r3, #16]
 800bba4:	4610      	mov	r0, r2
 800bba6:	4619      	mov	r1, r3
 800bba8:	f7ff ffd2 	bl	800bb50 <XMC_GPIO_SetOutputHigh>
}
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop

0800bbb4 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	7c1b      	ldrb	r3, [r3, #16]
 800bbc4:	4610      	mov	r0, r2
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	f7ff ffd2 	bl	800bb70 <XMC_GPIO_SetOutputLow>
}
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop

0800bbd4 <CAN_1_ini>:
boolean_T CAN_1_RES = true;

uint8_t clutch_mode_ini = 0;

void CAN_1_ini()
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	af00      	add	r7, sp, #0
	//Termination Resistor on CAN 1
	if (CAN_1_RES)
 800bbd8:	4b41      	ldr	r3, [pc, #260]	; (800bce0 <CAN_1_ini+0x10c>)
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d003      	beq.n	800bbe8 <CAN_1_ini+0x14>
		DIGITAL_IO_SetOutputHigh (&CAN1_Res);
 800bbe0:	4840      	ldr	r0, [pc, #256]	; (800bce4 <CAN_1_ini+0x110>)
 800bbe2:	f7ff ffd7 	bl	800bb94 <DIGITAL_IO_SetOutputHigh>
 800bbe6:	e002      	b.n	800bbee <CAN_1_ini+0x1a>
	else
		DIGITAL_IO_SetOutputLow (&CAN1_Res);
 800bbe8:	483e      	ldr	r0, [pc, #248]	; (800bce4 <CAN_1_ini+0x110>)
 800bbea:	f7ff ffe3 	bl	800bbb4 <DIGITAL_IO_SetOutputLow>

	//------LINK4_1_boost_gear_rev_map 0x10 LMO1------ todo
	canData.p_air_22 				= &VCU_DW.VAR_IN_p_air_22;
 800bbee:	4b3e      	ldr	r3, [pc, #248]	; (800bce8 <CAN_1_ini+0x114>)
 800bbf0:	4a3e      	ldr	r2, [pc, #248]	; (800bcec <CAN_1_ini+0x118>)
 800bbf2:	601a      	str	r2, [r3, #0]
	canData.AN5GearPos	 			= &VCU_DW.VAR_IN_p_air_22_des;
 800bbf4:	4b3c      	ldr	r3, [pc, #240]	; (800bce8 <CAN_1_ini+0x114>)
 800bbf6:	4a3e      	ldr	r2, [pc, #248]	; (800bcf0 <CAN_1_ini+0x11c>)
 800bbf8:	605a      	str	r2, [r3, #4]
	canData.n_engine 				= &n_engine;
 800bbfa:	4b3b      	ldr	r3, [pc, #236]	; (800bce8 <CAN_1_ini+0x114>)
 800bbfc:	4a3d      	ldr	r2, [pc, #244]	; (800bcf4 <CAN_1_ini+0x120>)
 800bbfe:	609a      	str	r2, [r3, #8]
	n_engine_LSB					= &VCU_DW.VAR_IN_n_engine_LSB;
 800bc00:	4b3d      	ldr	r3, [pc, #244]	; (800bcf8 <CAN_1_ini+0x124>)
 800bc02:	4a3e      	ldr	r2, [pc, #248]	; (800bcfc <CAN_1_ini+0x128>)
 800bc04:	601a      	str	r2, [r3, #0]
	n_engine_MSB					= &VCU_DW.VAR_IN_n_engine_MSB;
 800bc06:	4b3e      	ldr	r3, [pc, #248]	; (800bd00 <CAN_1_ini+0x12c>)
 800bc08:	4a3e      	ldr	r2, [pc, #248]	; (800bd04 <CAN_1_ini+0x130>)
 800bc0a:	601a      	str	r2, [r3, #0]
	//canData.ign_angle 				= (uint8_t*)&VCU_DW.
	canData.gear 					= &VCU_DW.VAR_IN_gear;
 800bc0c:	4b36      	ldr	r3, [pc, #216]	; (800bce8 <CAN_1_ini+0x114>)
 800bc0e:	4a3e      	ldr	r2, [pc, #248]	; (800bd08 <CAN_1_ini+0x134>)
 800bc10:	60da      	str	r2, [r3, #12]
	//canData.gear_shift_status 		= (uint8_t*)&VCU_DW.VAR_IN_gear_shift_status;
	//canData.fuel_table_1_status 	= (uint8_t*)&VCU_DW.VAR_IN_
	//canData.fuel_table_2_status 	= (uint8_t*)&VCU_DW.VAR_IN_
	//canData.ign_table_1_status 	= (uint8_t*)&VCU_DW.VAR_IN_
	//canData.ign_table_2_status 	= (uint8_t*)&VCU_DW.VAR_IN_
	canData.TPS						= &VCU_DW.VAR_IN_TPS_Plausi;
 800bc12:	4b35      	ldr	r3, [pc, #212]	; (800bce8 <CAN_1_ini+0x114>)
 800bc14:	4a3d      	ldr	r2, [pc, #244]	; (800bd0c <CAN_1_ini+0x138>)
 800bc16:	629a      	str	r2, [r3, #40]	; 0x28

	//------LINK4_2_press_temp_Wg 0x771 LMO2------ todo
	//canData.p_oil 				= (uint8_t*)&VCU_DW.VAR_IN_p_Oil;
	//canData.p_fuel_rail 		= (uint8_t*)&VCU_DW.VAR_IN_p_fuel_rail;
	//canData.x_throttle_valve 	= (uint8_t*)&VCU_DW.VAR_IN_x_ath;
	canData.t_water_engine 		= &VCU_DW.VAR_IN_t_water_engine;
 800bc18:	4b33      	ldr	r3, [pc, #204]	; (800bce8 <CAN_1_ini+0x114>)
 800bc1a:	4a3d      	ldr	r2, [pc, #244]	; (800bd10 <CAN_1_ini+0x13c>)
 800bc1c:	639a      	str	r2, [r3, #56]	; 0x38
	//canData.lambda_status = (uint8_t*)&VCU_DW.VAR_IN_
	//canData.error_trigger = (uint8_t*)&VCU_DW.VAR_IN_
	//canData.boost_table = (uint8_t*)&VCU_DW.VAR_IN_

	//------STW 0x8 LM04------
	canData.STW_shift_up_request 	= &VCU_DW.VAR_IN_STW_shift_up_request;
 800bc1e:	4b32      	ldr	r3, [pc, #200]	; (800bce8 <CAN_1_ini+0x114>)
 800bc20:	4a3c      	ldr	r2, [pc, #240]	; (800bd14 <CAN_1_ini+0x140>)
 800bc22:	665a      	str	r2, [r3, #100]	; 0x64
	canData.STW_shift_down_request 	= &VCU_DW.VAR_IN_STW_shift_down_request;
 800bc24:	4b30      	ldr	r3, [pc, #192]	; (800bce8 <CAN_1_ini+0x114>)
 800bc26:	4a3c      	ldr	r2, [pc, #240]	; (800bd18 <CAN_1_ini+0x144>)
 800bc28:	669a      	str	r2, [r3, #104]	; 0x68
	canData.STW_transmission_mode 	= &VCU_DW.VAR_IN_STW_transmission_mode;
 800bc2a:	4b2f      	ldr	r3, [pc, #188]	; (800bce8 <CAN_1_ini+0x114>)
 800bc2c:	4a3b      	ldr	r2, [pc, #236]	; (800bd1c <CAN_1_ini+0x148>)
 800bc2e:	67da      	str	r2, [r3, #124]	; 0x7c
	//canData.STW_trigger_point		= (uint8_t*)&VCU_DW.VAR_IN_STW_map_max;
	//canData.STW_engine_map 			= (uint8_t*)&VCU_DW.VAR_IN_STW_map_min;
	//canData.STW_rev_limiter 		= (uint8_t*)&VCU_DW.VAR_IN_STW_map_3;
	canData.STW_clutch_mode 		= &clutch_mode_ini;//(uint8_t*)&VCU_DW.VAR_IN_STW_clutch_mode;
 800bc30:	4b2d      	ldr	r3, [pc, #180]	; (800bce8 <CAN_1_ini+0x114>)
 800bc32:	4a3b      	ldr	r2, [pc, #236]	; (800bd20 <CAN_1_ini+0x14c>)
 800bc34:	679a      	str	r2, [r3, #120]	; 0x78
	canData.STW_mue_tyre 			= &VCU_DW.VAR_IN_STW_mue_tyre;
 800bc36:	4b2c      	ldr	r3, [pc, #176]	; (800bce8 <CAN_1_ini+0x114>)
 800bc38:	4a3a      	ldr	r2, [pc, #232]	; (800bd24 <CAN_1_ini+0x150>)
 800bc3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	//canData.STW_brake_balance 		= (uint8_t*)&VCU_DW.VAR_IN_brake_ratio_R;

	//------TTC_ABS 0x5C0 LM05------
	canData.ABS_switchstate	= &VCU_DW.VAR_OUT_ABS_switchstate;
 800bc3e:	4b2a      	ldr	r3, [pc, #168]	; (800bce8 <CAN_1_ini+0x114>)
 800bc40:	4a39      	ldr	r2, [pc, #228]	; (800bd28 <CAN_1_ini+0x154>)
 800bc42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	canData.p_brake_F		= &VCU_DW.VAR_OUT_p_brake_F;
 800bc46:	4b28      	ldr	r3, [pc, #160]	; (800bce8 <CAN_1_ini+0x114>)
 800bc48:	4a38      	ldr	r2, [pc, #224]	; (800bd2c <CAN_1_ini+0x158>)
 800bc4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	canData.ABS_BL_switch	= &VCU_DW.VAR_OUT_ABS_BL_switch;
 800bc4e:	4b26      	ldr	r3, [pc, #152]	; (800bce8 <CAN_1_ini+0x114>)
 800bc50:	4a37      	ldr	r2, [pc, #220]	; (800bd30 <CAN_1_ini+0x15c>)
 800bc52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	canData.ABS_active		= &VCU_DW.VAR_OUT_ABS_active;
 800bc56:	4b24      	ldr	r3, [pc, #144]	; (800bce8 <CAN_1_ini+0x114>)
 800bc58:	4a36      	ldr	r2, [pc, #216]	; (800bd34 <CAN_1_ini+0x160>)
 800bc5a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	canData.ABS_EBD_lamp	= &VCU_DW.VAR_OUT_ABS_EBD_Lamp;
 800bc5e:	4b22      	ldr	r3, [pc, #136]	; (800bce8 <CAN_1_ini+0x114>)
 800bc60:	4a35      	ldr	r2, [pc, #212]	; (800bd38 <CAN_1_ini+0x164>)
 800bc62:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	canData.ABS_lamp		= &VCU_DW.VAR_OUT_ABS_Lamp;
 800bc66:	4b20      	ldr	r3, [pc, #128]	; (800bce8 <CAN_1_ini+0x114>)
 800bc68:	4a34      	ldr	r2, [pc, #208]	; (800bd3c <CAN_1_ini+0x168>)
 800bc6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	canData.Brakelight_CAN1	= &VCU_DW.VAR_OUT_Brakelight;
 800bc6e:	4b1e      	ldr	r3, [pc, #120]	; (800bce8 <CAN_1_ini+0x114>)
 800bc70:	4a33      	ldr	r2, [pc, #204]	; (800bd40 <CAN_1_ini+0x16c>)
 800bc72:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	//------TTC_LaunchControl 0x7F0 LM06------
	canData.p_brake_R			= &VCU_DW.VAR_OUT_p_brake_R;
 800bc76:	4b1c      	ldr	r3, [pc, #112]	; (800bce8 <CAN_1_ini+0x114>)
 800bc78:	4a32      	ldr	r2, [pc, #200]	; (800bd44 <CAN_1_ini+0x170>)
 800bc7a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	canData.LC_mue_tyre			= &VCU_DW.VAR_OUT_STW_mue_tyre;
 800bc7e:	4b1a      	ldr	r3, [pc, #104]	; (800bce8 <CAN_1_ini+0x114>)
 800bc80:	4a31      	ldr	r2, [pc, #196]	; (800bd48 <CAN_1_ini+0x174>)
 800bc82:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	canData.LC_clutch_pos_des	= &VCU_DW.VAR_OUT_x_clutch_LC;
 800bc86:	4b18      	ldr	r3, [pc, #96]	; (800bce8 <CAN_1_ini+0x114>)
 800bc88:	4a30      	ldr	r2, [pc, #192]	; (800bd4c <CAN_1_ini+0x178>)
 800bc8a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	canData.LC_dash_bit			= &VCU_DW.VAR_OUT_LC_dash_Bit;
 800bc8e:	4b16      	ldr	r3, [pc, #88]	; (800bce8 <CAN_1_ini+0x114>)
 800bc90:	4a2f      	ldr	r2, [pc, #188]	; (800bd50 <CAN_1_ini+0x17c>)
 800bc92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	canData.LC_active_bit		= &VCU_DW.VAR_OUT_LC_active_bit;
 800bc96:	4b14      	ldr	r3, [pc, #80]	; (800bce8 <CAN_1_ini+0x114>)
 800bc98:	4a2e      	ldr	r2, [pc, #184]	; (800bd54 <CAN_1_ini+0x180>)
 800bc9a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	canData.LC_ready_bit		= &VCU_DW.VAR_OUT_LC_ready_bit;
 800bc9e:	4b12      	ldr	r3, [pc, #72]	; (800bce8 <CAN_1_ini+0x114>)
 800bca0:	4a2d      	ldr	r2, [pc, #180]	; (800bd58 <CAN_1_ini+0x184>)
 800bca2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	canData.LC_Mdes				= &VCU_DW.VAR_OUT_LC_Mdes;
 800bca6:	4b10      	ldr	r3, [pc, #64]	; (800bce8 <CAN_1_ini+0x114>)
 800bca8:	4a2c      	ldr	r2, [pc, #176]	; (800bd5c <CAN_1_ini+0x188>)
 800bcaa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	canData.LC_Fnr				= &VCU_DW.VAR_OUT_LC_Fnr;
 800bcae:	4b0e      	ldr	r3, [pc, #56]	; (800bce8 <CAN_1_ini+0x114>)
 800bcb0:	4a2b      	ldr	r2, [pc, #172]	; (800bd60 <CAN_1_ini+0x18c>)
 800bcb2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//------TTC_WheelSpeed 0x340 LM07------
	canData.n_wheel_FL			= &VCU_DW.VAR_OUT_n_wheel_FL_kmproh;
 800bcb6:	4b0c      	ldr	r3, [pc, #48]	; (800bce8 <CAN_1_ini+0x114>)
 800bcb8:	4a2a      	ldr	r2, [pc, #168]	; (800bd64 <CAN_1_ini+0x190>)
 800bcba:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	canData.n_wheel_FR			= &VCU_DW.VAR_OUT_n_wheel_FR_kmproh;
 800bcbe:	4b0a      	ldr	r3, [pc, #40]	; (800bce8 <CAN_1_ini+0x114>)
 800bcc0:	4a29      	ldr	r2, [pc, #164]	; (800bd68 <CAN_1_ini+0x194>)
 800bcc2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	canData.n_wheel_RL			= &VCU_DW.VAR_OUT_n_wheel_RL_kmproh;
 800bcc6:	4b08      	ldr	r3, [pc, #32]	; (800bce8 <CAN_1_ini+0x114>)
 800bcc8:	4a28      	ldr	r2, [pc, #160]	; (800bd6c <CAN_1_ini+0x198>)
 800bcca:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	canData.n_wheel_RR			= &VCU_DW.VAR_OUT_n_wheel_FL_kmproh;
 800bcce:	4b06      	ldr	r3, [pc, #24]	; (800bce8 <CAN_1_ini+0x114>)
 800bcd0:	4a24      	ldr	r2, [pc, #144]	; (800bd64 <CAN_1_ini+0x190>)
 800bcd2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	//----CAN-Modeul Measurement 0x7E1 LM08------
	canData.p_pneu_VCU_IN		= &VCU_DW.VAR_IN_p_pneum;
 800bcd6:	4b04      	ldr	r3, [pc, #16]	; (800bce8 <CAN_1_ini+0x114>)
 800bcd8:	4a25      	ldr	r2, [pc, #148]	; (800bd70 <CAN_1_ini+0x19c>)
 800bcda:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
}
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	20000640 	.word	0x20000640
 800bce4:	0800f650 	.word	0x0800f650
 800bce8:	20001338 	.word	0x20001338
 800bcec:	20001180 	.word	0x20001180
 800bcf0:	2000117f 	.word	0x2000117f
 800bcf4:	20000864 	.word	0x20000864
 800bcf8:	20001254 	.word	0x20001254
 800bcfc:	2000117d 	.word	0x2000117d
 800bd00:	20001260 	.word	0x20001260
 800bd04:	2000117c 	.word	0x2000117c
 800bd08:	2000117b 	.word	0x2000117b
 800bd0c:	2000117e 	.word	0x2000117e
 800bd10:	20001181 	.word	0x20001181
 800bd14:	20001188 	.word	0x20001188
 800bd18:	20001189 	.word	0x20001189
 800bd1c:	2000118b 	.word	0x2000118b
 800bd20:	20000866 	.word	0x20000866
 800bd24:	2000118a 	.word	0x2000118a
 800bd28:	2000115e 	.word	0x2000115e
 800bd2c:	20001100 	.word	0x20001100
 800bd30:	2000115f 	.word	0x2000115f
 800bd34:	20001160 	.word	0x20001160
 800bd38:	20001161 	.word	0x20001161
 800bd3c:	20001162 	.word	0x20001162
 800bd40:	200011a5 	.word	0x200011a5
 800bd44:	20001156 	.word	0x20001156
 800bd48:	20001157 	.word	0x20001157
 800bd4c:	20001158 	.word	0x20001158
 800bd50:	20001159 	.word	0x20001159
 800bd54:	2000115a 	.word	0x2000115a
 800bd58:	2000115b 	.word	0x2000115b
 800bd5c:	2000115c 	.word	0x2000115c
 800bd60:	2000115d 	.word	0x2000115d
 800bd64:	200010f8 	.word	0x200010f8
 800bd68:	200010fa 	.word	0x200010fa
 800bd6c:	200010fc 	.word	0x200010fc
 800bd70:	2000118c 	.word	0x2000118c

0800bd74 <CAN_1_Receive>:

void CAN_1_Receive()
{
 800bd74:	b598      	push	{r3, r4, r7, lr}
 800bd76:	af00      	add	r7, sp, #0
	//------LINK4_1_boost_gear_rev_map 0x10 LMO1------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_01_Config);
 800bd78:	4857      	ldr	r0, [pc, #348]	; (800bed8 <CAN_1_Receive+0x164>)
 800bd7a:	f7ff facb 	bl	800b314 <CAN_NODE_MO_Receive>

	*canData.p_air_22 = checkRangePlausi(CAN_1_LMO_01_Config.mo_ptr->can_data_byte[0], ERR_P_AIR_22); // ACHTUNG MOTOROLA und Offset --> Umwandlung in Simulink
 800bd7e:	4b57      	ldr	r3, [pc, #348]	; (800bedc <CAN_1_Receive+0x168>)
 800bd80:	681c      	ldr	r4, [r3, #0]
 800bd82:	4b55      	ldr	r3, [pc, #340]	; (800bed8 <CAN_1_Receive+0x164>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	7c1b      	ldrb	r3, [r3, #16]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	210b      	movs	r1, #11
 800bd8c:	f000 ffb8 	bl	800cd00 <checkRangePlausi>
 800bd90:	4603      	mov	r3, r0
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	7023      	strb	r3, [r4, #0]
	*canData.AN5GearPos = checkRangePlausi(CAN_1_LMO_01_Config.mo_ptr->can_data_byte[1], ERR_P_AIR_22_DES); //p_air_22_des
 800bd96:	4b51      	ldr	r3, [pc, #324]	; (800bedc <CAN_1_Receive+0x168>)
 800bd98:	685c      	ldr	r4, [r3, #4]
 800bd9a:	4b4f      	ldr	r3, [pc, #316]	; (800bed8 <CAN_1_Receive+0x164>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	7c5b      	ldrb	r3, [r3, #17]
 800bda0:	4618      	mov	r0, r3
 800bda2:	210c      	movs	r1, #12
 800bda4:	f000 ffac 	bl	800cd00 <checkRangePlausi>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	7023      	strb	r3, [r4, #0]
	*canData.n_engine = checkRangePlausi(CAN_1_LMO_01_Config.mo_ptr->can_data_word[1], ERR_N_ENGINE);
 800bdae:	4b4b      	ldr	r3, [pc, #300]	; (800bedc <CAN_1_Receive+0x168>)
 800bdb0:	689c      	ldr	r4, [r3, #8]
 800bdb2:	4b49      	ldr	r3, [pc, #292]	; (800bed8 <CAN_1_Receive+0x164>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	8a5b      	ldrh	r3, [r3, #18]
 800bdb8:	4618      	mov	r0, r3
 800bdba:	2106      	movs	r1, #6
 800bdbc:	f000 ffa0 	bl	800cd00 <checkRangePlausi>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	8023      	strh	r3, [r4, #0]
	*n_engine_LSB	= getbits(*canData.n_engine, 7, 8);
 800bdc6:	4b46      	ldr	r3, [pc, #280]	; (800bee0 <CAN_1_Receive+0x16c>)
 800bdc8:	681c      	ldr	r4, [r3, #0]
 800bdca:	4b44      	ldr	r3, [pc, #272]	; (800bedc <CAN_1_Receive+0x168>)
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	881b      	ldrh	r3, [r3, #0]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	2107      	movs	r1, #7
 800bdd4:	2208      	movs	r2, #8
 800bdd6:	f002 f995 	bl	800e104 <getbits>
 800bdda:	4603      	mov	r3, r0
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	7023      	strb	r3, [r4, #0]
	*n_engine_MSB	= getbits(*canData.n_engine, 15, 8);
 800bde0:	4b40      	ldr	r3, [pc, #256]	; (800bee4 <CAN_1_Receive+0x170>)
 800bde2:	681c      	ldr	r4, [r3, #0]
 800bde4:	4b3d      	ldr	r3, [pc, #244]	; (800bedc <CAN_1_Receive+0x168>)
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	881b      	ldrh	r3, [r3, #0]
 800bdea:	4618      	mov	r0, r3
 800bdec:	210f      	movs	r1, #15
 800bdee:	2208      	movs	r2, #8
 800bdf0:	f002 f988 	bl	800e104 <getbits>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	7023      	strb	r3, [r4, #0]
	*canData.gear =  checkRangePlausi(CAN_1_LMO_01_Config.mo_ptr->can_data_byte[4],ERR_GEAR); // ACHTUNG MOTOROLA und nur 5 bit NEU --> Umwandlung in Simulink
 800bdfa:	4b38      	ldr	r3, [pc, #224]	; (800bedc <CAN_1_Receive+0x168>)
 800bdfc:	68dc      	ldr	r4, [r3, #12]
 800bdfe:	4b36      	ldr	r3, [pc, #216]	; (800bed8 <CAN_1_Receive+0x164>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	7d1b      	ldrb	r3, [r3, #20]
 800be04:	4618      	mov	r0, r3
 800be06:	2104      	movs	r1, #4
 800be08:	f000 ff7a 	bl	800cd00 <checkRangePlausi>
 800be0c:	4603      	mov	r3, r0
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	7023      	strb	r3, [r4, #0]
	//*canData.gear_shift_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],28,4);
	//*canData.fuel_table_1_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],29,1);
	//*canData.fuel_table_2_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],30,1);
	//*canData.ign_table_1_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],31,1);
	//*canData.ign_table_2_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],32,1);
	*canData.TPS = CAN_1_LMO_01_Config.mo_ptr->can_data_byte[4] & 0x07;
 800be12:	4b32      	ldr	r3, [pc, #200]	; (800bedc <CAN_1_Receive+0x168>)
 800be14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be16:	4a30      	ldr	r2, [pc, #192]	; (800bed8 <CAN_1_Receive+0x164>)
 800be18:	6812      	ldr	r2, [r2, #0]
 800be1a:	7d12      	ldrb	r2, [r2, #20]
 800be1c:	f002 0207 	and.w	r2, r2, #7
 800be20:	b2d2      	uxtb	r2, r2
 800be22:	701a      	strb	r2, [r3, #0]

	//------LINK4_2_press_temp_Wg 0x771 LMO2------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_02_Config);
 800be24:	4830      	ldr	r0, [pc, #192]	; (800bee8 <CAN_1_Receive+0x174>)
 800be26:	f7ff fa75 	bl	800b314 <CAN_NODE_MO_Receive>

	//*canData.p_oil = CAN_1_LMO_02_Config.mo_ptr->can_data_byte[0];
	//*canData.p_fuel_rail =  CAN_1_LMO_02_Config.mo_ptr->can_data_byte[1];
	//*canData.x_throttle_valve = CAN_1_LMO_02_Config.mo_ptr->can_data_byte[2]; //x_throttleValve
	*canData.t_water_engine = CAN_1_LMO_02_Config.mo_ptr->can_data_byte[3];
 800be2a:	4b2c      	ldr	r3, [pc, #176]	; (800bedc <CAN_1_Receive+0x168>)
 800be2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be2e:	4a2e      	ldr	r2, [pc, #184]	; (800bee8 <CAN_1_Receive+0x174>)
 800be30:	6812      	ldr	r2, [r2, #0]
 800be32:	7cd2      	ldrb	r2, [r2, #19]
 800be34:	701a      	strb	r2, [r3, #0]
	*canData.error_trigger = (CAN_1_LMO_03_Config.mo_ptr->can_data_byte[6]);
	*canData.boost_table = CAN_1_LMO_03_Config.mo_ptr->can_data_byte[7];
	*/

	//------STW 0x8 LM04------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_04_Config);
 800be36:	482d      	ldr	r0, [pc, #180]	; (800beec <CAN_1_Receive+0x178>)
 800be38:	f7ff fa6c 	bl	800b314 <CAN_NODE_MO_Receive>

	*canData.STW_shift_up_request = checkRangePlausi(getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],0,1),ERR_STW_SHIFT_UP_REQUEST);
 800be3c:	4b27      	ldr	r3, [pc, #156]	; (800bedc <CAN_1_Receive+0x168>)
 800be3e:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800be40:	4b2a      	ldr	r3, [pc, #168]	; (800beec <CAN_1_Receive+0x178>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	7c1b      	ldrb	r3, [r3, #16]
 800be46:	4618      	mov	r0, r3
 800be48:	2100      	movs	r1, #0
 800be4a:	2201      	movs	r2, #1
 800be4c:	f002 f95a 	bl	800e104 <getbits>
 800be50:	4603      	mov	r3, r0
 800be52:	4618      	mov	r0, r3
 800be54:	2112      	movs	r1, #18
 800be56:	f000 ff53 	bl	800cd00 <checkRangePlausi>
 800be5a:	4603      	mov	r3, r0
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	7023      	strb	r3, [r4, #0]
	*canData.STW_shift_down_request = checkRangePlausi(getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],1,1),ERR_STW_SHIFT_DOWN_REQUEST);
 800be60:	4b1e      	ldr	r3, [pc, #120]	; (800bedc <CAN_1_Receive+0x168>)
 800be62:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800be64:	4b21      	ldr	r3, [pc, #132]	; (800beec <CAN_1_Receive+0x178>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	7c1b      	ldrb	r3, [r3, #16]
 800be6a:	4618      	mov	r0, r3
 800be6c:	2101      	movs	r1, #1
 800be6e:	2201      	movs	r2, #1
 800be70:	f002 f948 	bl	800e104 <getbits>
 800be74:	4603      	mov	r3, r0
 800be76:	4618      	mov	r0, r3
 800be78:	2111      	movs	r1, #17
 800be7a:	f000 ff41 	bl	800cd00 <checkRangePlausi>
 800be7e:	4603      	mov	r3, r0
 800be80:	b2db      	uxtb	r3, r3
 800be82:	7023      	strb	r3, [r4, #0]
	//*canData.STW_trigger_point = getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],2,1);
	//*canData.STW_engine_map = getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],3,1);
	//*canData.STW_rev_limiter = getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],4,1);
	*canData.STW_clutch_mode = CAN_1_LMO_04_Config.mo_ptr->can_data_byte[1];
 800be84:	4b15      	ldr	r3, [pc, #84]	; (800bedc <CAN_1_Receive+0x168>)
 800be86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be88:	4a18      	ldr	r2, [pc, #96]	; (800beec <CAN_1_Receive+0x178>)
 800be8a:	6812      	ldr	r2, [r2, #0]
 800be8c:	7c52      	ldrb	r2, [r2, #17]
 800be8e:	701a      	strb	r2, [r3, #0]
	*canData.STW_transmission_mode = checkRangePlausi(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[2],ERR_TRANSMISSION_MODE);
 800be90:	4b12      	ldr	r3, [pc, #72]	; (800bedc <CAN_1_Receive+0x168>)
 800be92:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800be94:	4b15      	ldr	r3, [pc, #84]	; (800beec <CAN_1_Receive+0x178>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	7c9b      	ldrb	r3, [r3, #18]
 800be9a:	4618      	mov	r0, r3
 800be9c:	2114      	movs	r1, #20
 800be9e:	f000 ff2f 	bl	800cd00 <checkRangePlausi>
 800bea2:	4603      	mov	r3, r0
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	7023      	strb	r3, [r4, #0]
	*canData.STW_mue_tyre = checkRangePlausi(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[3],ERR_MUE_TYRE);
 800bea8:	4b0c      	ldr	r3, [pc, #48]	; (800bedc <CAN_1_Receive+0x168>)
 800beaa:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800beae:	4b0f      	ldr	r3, [pc, #60]	; (800beec <CAN_1_Receive+0x178>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	7cdb      	ldrb	r3, [r3, #19]
 800beb4:	4618      	mov	r0, r3
 800beb6:	2110      	movs	r1, #16
 800beb8:	f000 ff22 	bl	800cd00 <checkRangePlausi>
 800bebc:	4603      	mov	r3, r0
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	7023      	strb	r3, [r4, #0]
	//*canData.STW_brake_balance = CAN_1_LMO_04_Config.mo_ptr->can_data_byte[4];

	//-----CAN-Modul LM08-----
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_08_Config);
 800bec2:	480b      	ldr	r0, [pc, #44]	; (800bef0 <CAN_1_Receive+0x17c>)
 800bec4:	f7ff fa26 	bl	800b314 <CAN_NODE_MO_Receive>

	*canData.p_pneu_VCU_IN = CAN_1_LMO_08_Config.mo_ptr->can_data_byte[0];
 800bec8:	4b04      	ldr	r3, [pc, #16]	; (800bedc <CAN_1_Receive+0x168>)
 800beca:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800bece:	4a08      	ldr	r2, [pc, #32]	; (800bef0 <CAN_1_Receive+0x17c>)
 800bed0:	6812      	ldr	r2, [r2, #0]
 800bed2:	7c12      	ldrb	r2, [r2, #16]
 800bed4:	701a      	strb	r2, [r3, #0]
}
 800bed6:	bd98      	pop	{r3, r4, r7, pc}
 800bed8:	0800f6e0 	.word	0x0800f6e0
 800bedc:	20001338 	.word	0x20001338
 800bee0:	20001254 	.word	0x20001254
 800bee4:	20001260 	.word	0x20001260
 800bee8:	0800f6ec 	.word	0x0800f6ec
 800beec:	0800f704 	.word	0x0800f704
 800bef0:	0800f734 	.word	0x0800f734

0800bef4 <CAN_1_Transmit>:

void CAN_1_Transmit()
{
 800bef4:	b598      	push	{r3, r4, r7, lr}
 800bef6:	af00      	add	r7, sp, #0
	//------TTC_ABS 0x5C0 LM05------
	CAN1_data_Tx_LM05[0] = *canData.ABS_switchstate;
 800bef8:	4b97      	ldr	r3, [pc, #604]	; (800c158 <CAN_1_Transmit+0x264>)
 800befa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800befe:	781a      	ldrb	r2, [r3, #0]
 800bf00:	4b96      	ldr	r3, [pc, #600]	; (800c15c <CAN_1_Transmit+0x268>)
 800bf02:	701a      	strb	r2, [r3, #0]
	CAN1_data_Tx_LM05[1] = getbits(*canData.p_brake_F, 7,8);
 800bf04:	4b94      	ldr	r3, [pc, #592]	; (800c158 <CAN_1_Transmit+0x264>)
 800bf06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf0a:	881b      	ldrh	r3, [r3, #0]
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	2107      	movs	r1, #7
 800bf10:	2208      	movs	r2, #8
 800bf12:	f002 f8f7 	bl	800e104 <getbits>
 800bf16:	4603      	mov	r3, r0
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	4b90      	ldr	r3, [pc, #576]	; (800c15c <CAN_1_Transmit+0x268>)
 800bf1c:	705a      	strb	r2, [r3, #1]
	CAN1_data_Tx_LM05[2] = getbits(*canData.p_brake_F, 15,8);
 800bf1e:	4b8e      	ldr	r3, [pc, #568]	; (800c158 <CAN_1_Transmit+0x264>)
 800bf20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf24:	881b      	ldrh	r3, [r3, #0]
 800bf26:	4618      	mov	r0, r3
 800bf28:	210f      	movs	r1, #15
 800bf2a:	2208      	movs	r2, #8
 800bf2c:	f002 f8ea 	bl	800e104 <getbits>
 800bf30:	4603      	mov	r3, r0
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	4b89      	ldr	r3, [pc, #548]	; (800c15c <CAN_1_Transmit+0x268>)
 800bf36:	709a      	strb	r2, [r3, #2]
	CAN1_data_Tx_LM05[3] = getbits(*canData.ABS_BL_switch,0,1) | getbits(*canData.ABS_active,0,1) << 5 | getbits(*canData.ABS_EBD_lamp,0,1) << 6 | getbits(*canData.ABS_lamp,0,1) << 7 | getbits(*canData.Brakelight_CAN1,0,1) << 1;
 800bf38:	4b87      	ldr	r3, [pc, #540]	; (800c158 <CAN_1_Transmit+0x264>)
 800bf3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	4618      	mov	r0, r3
 800bf42:	2100      	movs	r1, #0
 800bf44:	2201      	movs	r2, #1
 800bf46:	f002 f8dd 	bl	800e104 <getbits>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	b2dc      	uxtb	r4, r3
 800bf4e:	4b82      	ldr	r3, [pc, #520]	; (800c158 <CAN_1_Transmit+0x264>)
 800bf50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	4618      	mov	r0, r3
 800bf58:	2100      	movs	r1, #0
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f002 f8d2 	bl	800e104 <getbits>
 800bf60:	4603      	mov	r3, r0
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	015b      	lsls	r3, r3, #5
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	4323      	orrs	r3, r4
 800bf6a:	b2dc      	uxtb	r4, r3
 800bf6c:	4b7a      	ldr	r3, [pc, #488]	; (800c158 <CAN_1_Transmit+0x264>)
 800bf6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	4618      	mov	r0, r3
 800bf76:	2100      	movs	r1, #0
 800bf78:	2201      	movs	r2, #1
 800bf7a:	f002 f8c3 	bl	800e104 <getbits>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	019b      	lsls	r3, r3, #6
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	4323      	orrs	r3, r4
 800bf88:	b2dc      	uxtb	r4, r3
 800bf8a:	4b73      	ldr	r3, [pc, #460]	; (800c158 <CAN_1_Transmit+0x264>)
 800bf8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	4618      	mov	r0, r3
 800bf94:	2100      	movs	r1, #0
 800bf96:	2201      	movs	r2, #1
 800bf98:	f002 f8b4 	bl	800e104 <getbits>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	01db      	lsls	r3, r3, #7
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	4323      	orrs	r3, r4
 800bfa6:	b2dc      	uxtb	r4, r3
 800bfa8:	4b6b      	ldr	r3, [pc, #428]	; (800c158 <CAN_1_Transmit+0x264>)
 800bfaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	f002 f8a5 	bl	800e104 <getbits>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	005b      	lsls	r3, r3, #1
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	4323      	orrs	r3, r4
 800bfc4:	b2da      	uxtb	r2, r3
 800bfc6:	4b65      	ldr	r3, [pc, #404]	; (800c15c <CAN_1_Transmit+0x268>)
 800bfc8:	70da      	strb	r2, [r3, #3]

	CAN_NODE_MO_UpdateData(&CAN_1_LMO_05_Config, CAN1_data_Tx_LM05);
 800bfca:	4865      	ldr	r0, [pc, #404]	; (800c160 <CAN_1_Transmit+0x26c>)
 800bfcc:	4963      	ldr	r1, [pc, #396]	; (800c15c <CAN_1_Transmit+0x268>)
 800bfce:	f7ff f9b3 	bl	800b338 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_1_LMO_05_Config);
 800bfd2:	4863      	ldr	r0, [pc, #396]	; (800c160 <CAN_1_Transmit+0x26c>)
 800bfd4:	f7ff f98c 	bl	800b2f0 <CAN_NODE_MO_Transmit>

	//------TTC_LaunchControl 0x7F0 LM06------
	CAN1_data_Tx_LM06[0] = *canData.p_brake_R;
 800bfd8:	4b5f      	ldr	r3, [pc, #380]	; (800c158 <CAN_1_Transmit+0x264>)
 800bfda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bfde:	781a      	ldrb	r2, [r3, #0]
 800bfe0:	4b60      	ldr	r3, [pc, #384]	; (800c164 <CAN_1_Transmit+0x270>)
 800bfe2:	701a      	strb	r2, [r3, #0]
	CAN1_data_Tx_LM06[1] = *canData.LC_mue_tyre;
 800bfe4:	4b5c      	ldr	r3, [pc, #368]	; (800c158 <CAN_1_Transmit+0x264>)
 800bfe6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bfea:	781a      	ldrb	r2, [r3, #0]
 800bfec:	4b5d      	ldr	r3, [pc, #372]	; (800c164 <CAN_1_Transmit+0x270>)
 800bfee:	705a      	strb	r2, [r3, #1]
	CAN1_data_Tx_LM06[2] = *canData.LC_clutch_pos_des;
 800bff0:	4b59      	ldr	r3, [pc, #356]	; (800c158 <CAN_1_Transmit+0x264>)
 800bff2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bff6:	781a      	ldrb	r2, [r3, #0]
 800bff8:	4b5a      	ldr	r3, [pc, #360]	; (800c164 <CAN_1_Transmit+0x270>)
 800bffa:	709a      	strb	r2, [r3, #2]
	CAN1_data_Tx_LM06[3] = getbits(*canData.LC_dash_bit,0,1) | getbits(*canData.LC_active_bit,0,1) << 1 |  getbits(*canData.LC_ready_bit,0,1) << 2;
 800bffc:	4b56      	ldr	r3, [pc, #344]	; (800c158 <CAN_1_Transmit+0x264>)
 800bffe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	4618      	mov	r0, r3
 800c006:	2100      	movs	r1, #0
 800c008:	2201      	movs	r2, #1
 800c00a:	f002 f87b 	bl	800e104 <getbits>
 800c00e:	4603      	mov	r3, r0
 800c010:	b2dc      	uxtb	r4, r3
 800c012:	4b51      	ldr	r3, [pc, #324]	; (800c158 <CAN_1_Transmit+0x264>)
 800c014:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	4618      	mov	r0, r3
 800c01c:	2100      	movs	r1, #0
 800c01e:	2201      	movs	r2, #1
 800c020:	f002 f870 	bl	800e104 <getbits>
 800c024:	4603      	mov	r3, r0
 800c026:	b2db      	uxtb	r3, r3
 800c028:	005b      	lsls	r3, r3, #1
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	4323      	orrs	r3, r4
 800c02e:	b2dc      	uxtb	r4, r3
 800c030:	4b49      	ldr	r3, [pc, #292]	; (800c158 <CAN_1_Transmit+0x264>)
 800c032:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	4618      	mov	r0, r3
 800c03a:	2100      	movs	r1, #0
 800c03c:	2201      	movs	r2, #1
 800c03e:	f002 f861 	bl	800e104 <getbits>
 800c042:	4603      	mov	r3, r0
 800c044:	b2db      	uxtb	r3, r3
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	4323      	orrs	r3, r4
 800c04c:	b2da      	uxtb	r2, r3
 800c04e:	4b45      	ldr	r3, [pc, #276]	; (800c164 <CAN_1_Transmit+0x270>)
 800c050:	70da      	strb	r2, [r3, #3]
	CAN1_data_Tx_LM06[4] = *canData.LC_Mdes;
 800c052:	4b41      	ldr	r3, [pc, #260]	; (800c158 <CAN_1_Transmit+0x264>)
 800c054:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c058:	781a      	ldrb	r2, [r3, #0]
 800c05a:	4b42      	ldr	r3, [pc, #264]	; (800c164 <CAN_1_Transmit+0x270>)
 800c05c:	711a      	strb	r2, [r3, #4]
	CAN1_data_Tx_LM06[5] = *canData.LC_Fnr;
 800c05e:	4b3e      	ldr	r3, [pc, #248]	; (800c158 <CAN_1_Transmit+0x264>)
 800c060:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c064:	781a      	ldrb	r2, [r3, #0]
 800c066:	4b3f      	ldr	r3, [pc, #252]	; (800c164 <CAN_1_Transmit+0x270>)
 800c068:	715a      	strb	r2, [r3, #5]

	CAN_NODE_MO_UpdateData(&CAN_1_LMO_06_Config, CAN1_data_Tx_LM06);
 800c06a:	483f      	ldr	r0, [pc, #252]	; (800c168 <CAN_1_Transmit+0x274>)
 800c06c:	493d      	ldr	r1, [pc, #244]	; (800c164 <CAN_1_Transmit+0x270>)
 800c06e:	f7ff f963 	bl	800b338 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_1_LMO_06_Config);
 800c072:	483d      	ldr	r0, [pc, #244]	; (800c168 <CAN_1_Transmit+0x274>)
 800c074:	f7ff f93c 	bl	800b2f0 <CAN_NODE_MO_Transmit>

	//------TTC_WheelSpeed 0x340 LM07------
	CAN1_data_Tx_LM07[0] = getbits(*canData.n_wheel_FL,7,8);
 800c078:	4b37      	ldr	r3, [pc, #220]	; (800c158 <CAN_1_Transmit+0x264>)
 800c07a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c07e:	881b      	ldrh	r3, [r3, #0]
 800c080:	4618      	mov	r0, r3
 800c082:	2107      	movs	r1, #7
 800c084:	2208      	movs	r2, #8
 800c086:	f002 f83d 	bl	800e104 <getbits>
 800c08a:	4603      	mov	r3, r0
 800c08c:	b2da      	uxtb	r2, r3
 800c08e:	4b37      	ldr	r3, [pc, #220]	; (800c16c <CAN_1_Transmit+0x278>)
 800c090:	701a      	strb	r2, [r3, #0]
	CAN1_data_Tx_LM07[1] = getbits(*canData.n_wheel_FL,15,8);
 800c092:	4b31      	ldr	r3, [pc, #196]	; (800c158 <CAN_1_Transmit+0x264>)
 800c094:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c098:	881b      	ldrh	r3, [r3, #0]
 800c09a:	4618      	mov	r0, r3
 800c09c:	210f      	movs	r1, #15
 800c09e:	2208      	movs	r2, #8
 800c0a0:	f002 f830 	bl	800e104 <getbits>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	b2da      	uxtb	r2, r3
 800c0a8:	4b30      	ldr	r3, [pc, #192]	; (800c16c <CAN_1_Transmit+0x278>)
 800c0aa:	705a      	strb	r2, [r3, #1]
	CAN1_data_Tx_LM07[2] = getbits(*canData.n_wheel_FR,7,8);
 800c0ac:	4b2a      	ldr	r3, [pc, #168]	; (800c158 <CAN_1_Transmit+0x264>)
 800c0ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c0b2:	881b      	ldrh	r3, [r3, #0]
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	2107      	movs	r1, #7
 800c0b8:	2208      	movs	r2, #8
 800c0ba:	f002 f823 	bl	800e104 <getbits>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	b2da      	uxtb	r2, r3
 800c0c2:	4b2a      	ldr	r3, [pc, #168]	; (800c16c <CAN_1_Transmit+0x278>)
 800c0c4:	709a      	strb	r2, [r3, #2]
	CAN1_data_Tx_LM07[3] = getbits(*canData.n_wheel_FR,15,8);
 800c0c6:	4b24      	ldr	r3, [pc, #144]	; (800c158 <CAN_1_Transmit+0x264>)
 800c0c8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c0cc:	881b      	ldrh	r3, [r3, #0]
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	210f      	movs	r1, #15
 800c0d2:	2208      	movs	r2, #8
 800c0d4:	f002 f816 	bl	800e104 <getbits>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	b2da      	uxtb	r2, r3
 800c0dc:	4b23      	ldr	r3, [pc, #140]	; (800c16c <CAN_1_Transmit+0x278>)
 800c0de:	70da      	strb	r2, [r3, #3]
	CAN1_data_Tx_LM07[4] = getbits(*canData.n_wheel_RL,7,8);
 800c0e0:	4b1d      	ldr	r3, [pc, #116]	; (800c158 <CAN_1_Transmit+0x264>)
 800c0e2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c0e6:	881b      	ldrh	r3, [r3, #0]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	2107      	movs	r1, #7
 800c0ec:	2208      	movs	r2, #8
 800c0ee:	f002 f809 	bl	800e104 <getbits>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	b2da      	uxtb	r2, r3
 800c0f6:	4b1d      	ldr	r3, [pc, #116]	; (800c16c <CAN_1_Transmit+0x278>)
 800c0f8:	711a      	strb	r2, [r3, #4]
	CAN1_data_Tx_LM07[5] = getbits(*canData.n_wheel_RL,15,8);
 800c0fa:	4b17      	ldr	r3, [pc, #92]	; (800c158 <CAN_1_Transmit+0x264>)
 800c0fc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c100:	881b      	ldrh	r3, [r3, #0]
 800c102:	4618      	mov	r0, r3
 800c104:	210f      	movs	r1, #15
 800c106:	2208      	movs	r2, #8
 800c108:	f001 fffc 	bl	800e104 <getbits>
 800c10c:	4603      	mov	r3, r0
 800c10e:	b2da      	uxtb	r2, r3
 800c110:	4b16      	ldr	r3, [pc, #88]	; (800c16c <CAN_1_Transmit+0x278>)
 800c112:	715a      	strb	r2, [r3, #5]
	CAN1_data_Tx_LM07[6] = getbits(*canData.n_wheel_RR,7,8);
 800c114:	4b10      	ldr	r3, [pc, #64]	; (800c158 <CAN_1_Transmit+0x264>)
 800c116:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c11a:	881b      	ldrh	r3, [r3, #0]
 800c11c:	4618      	mov	r0, r3
 800c11e:	2107      	movs	r1, #7
 800c120:	2208      	movs	r2, #8
 800c122:	f001 ffef 	bl	800e104 <getbits>
 800c126:	4603      	mov	r3, r0
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	4b10      	ldr	r3, [pc, #64]	; (800c16c <CAN_1_Transmit+0x278>)
 800c12c:	719a      	strb	r2, [r3, #6]
	CAN1_data_Tx_LM07[7] = getbits(*canData.n_wheel_RR,15,8);
 800c12e:	4b0a      	ldr	r3, [pc, #40]	; (800c158 <CAN_1_Transmit+0x264>)
 800c130:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c134:	881b      	ldrh	r3, [r3, #0]
 800c136:	4618      	mov	r0, r3
 800c138:	210f      	movs	r1, #15
 800c13a:	2208      	movs	r2, #8
 800c13c:	f001 ffe2 	bl	800e104 <getbits>
 800c140:	4603      	mov	r3, r0
 800c142:	b2da      	uxtb	r2, r3
 800c144:	4b09      	ldr	r3, [pc, #36]	; (800c16c <CAN_1_Transmit+0x278>)
 800c146:	71da      	strb	r2, [r3, #7]

	CAN_NODE_MO_UpdateData(&CAN_1_LMO_07_Config, CAN1_data_Tx_LM07);
 800c148:	4809      	ldr	r0, [pc, #36]	; (800c170 <CAN_1_Transmit+0x27c>)
 800c14a:	4908      	ldr	r1, [pc, #32]	; (800c16c <CAN_1_Transmit+0x278>)
 800c14c:	f7ff f8f4 	bl	800b338 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_1_LMO_07_Config);
 800c150:	4807      	ldr	r0, [pc, #28]	; (800c170 <CAN_1_Transmit+0x27c>)
 800c152:	f7ff f8cd 	bl	800b2f0 <CAN_NODE_MO_Transmit>
}
 800c156:	bd98      	pop	{r3, r4, r7, pc}
 800c158:	20001338 	.word	0x20001338
 800c15c:	2000084c 	.word	0x2000084c
 800c160:	0800f710 	.word	0x0800f710
 800c164:	20000854 	.word	0x20000854
 800c168:	0800f71c 	.word	0x0800f71c
 800c16c:	2000085c 	.word	0x2000085c
 800c170:	0800f728 	.word	0x0800f728

0800c174 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	460b      	mov	r3, r1
 800c17e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800c180:	78fb      	ldrb	r3, [r7, #3]
 800c182:	2201      	movs	r2, #1
 800c184:	409a      	lsls	r2, r3
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	605a      	str	r2, [r3, #4]
}
 800c18a:	370c      	adds	r7, #12
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr

0800c194 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	460b      	mov	r3, r1
 800c19e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800c1a0:	78fb      	ldrb	r3, [r7, #3]
 800c1a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c1a6:	409a      	lsls	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	605a      	str	r2, [r3, #4]
}
 800c1ac:	370c      	adds	r7, #12
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop

0800c1b8 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	7c1b      	ldrb	r3, [r3, #16]
 800c1c8:	4610      	mov	r0, r2
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	f7ff ffd2 	bl	800c174 <XMC_GPIO_SetOutputHigh>
}
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop

0800c1d8 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	7c1b      	ldrb	r3, [r3, #16]
 800c1e8:	4610      	mov	r0, r2
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	f7ff ffd2 	bl	800c194 <XMC_GPIO_SetOutputLow>
}
 800c1f0:	3708      	adds	r7, #8
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop

0800c1f8 <CAN_2_ini>:
uint8_t *n_wheel_RR_mpros_LSB, *n_wheel_RR_mpros_MSB;

boolean_T CAN_2_RES = true;

void CAN_2_ini()
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	af00      	add	r7, sp, #0
	//Termination Resistor on CAN 2
	if (CAN_2_RES)
 800c1fc:	4b79      	ldr	r3, [pc, #484]	; (800c3e4 <CAN_2_ini+0x1ec>)
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d003      	beq.n	800c20c <CAN_2_ini+0x14>
		DIGITAL_IO_SetOutputHigh (&CAN2_Res);
 800c204:	4878      	ldr	r0, [pc, #480]	; (800c3e8 <CAN_2_ini+0x1f0>)
 800c206:	f7ff ffd7 	bl	800c1b8 <DIGITAL_IO_SetOutputHigh>
 800c20a:	e002      	b.n	800c212 <CAN_2_ini+0x1a>
	else
		DIGITAL_IO_SetOutputLow (&CAN2_Res);
 800c20c:	4876      	ldr	r0, [pc, #472]	; (800c3e8 <CAN_2_ini+0x1f0>)
 800c20e:	f7ff ffe3 	bl	800c1d8 <DIGITAL_IO_SetOutputLow>

	//------ABS 0x80 LM01------
	canData.g_yaw_ABS 			= &g_yaw_ABS;
 800c212:	4b76      	ldr	r3, [pc, #472]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c214:	4a76      	ldr	r2, [pc, #472]	; (800c3f0 <CAN_2_ini+0x1f8>)
 800c216:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	g_yaw_ABS_LSB				= &VCU_DW.VAR_IN_g_yaw_ABS_LSB;
 800c21a:	4b76      	ldr	r3, [pc, #472]	; (800c3f4 <CAN_2_ini+0x1fc>)
 800c21c:	4a76      	ldr	r2, [pc, #472]	; (800c3f8 <CAN_2_ini+0x200>)
 800c21e:	601a      	str	r2, [r3, #0]
	g_yaw_ABS_MSB				= &VCU_DW.VAR_IN_g_long_ABS_MSB;
 800c220:	4b76      	ldr	r3, [pc, #472]	; (800c3fc <CAN_2_ini+0x204>)
 800c222:	4a77      	ldr	r2, [pc, #476]	; (800c400 <CAN_2_ini+0x208>)
 800c224:	601a      	str	r2, [r3, #0]
	canData.g_long_ABS			= &g_long_ABS;
 800c226:	4b71      	ldr	r3, [pc, #452]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c228:	4a76      	ldr	r2, [pc, #472]	; (800c404 <CAN_2_ini+0x20c>)
 800c22a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	g_long_ABS_LSB				= &VCU_DW.VAR_IN_g_long_ABS_LSB;
 800c22e:	4b76      	ldr	r3, [pc, #472]	; (800c408 <CAN_2_ini+0x210>)
 800c230:	4a76      	ldr	r2, [pc, #472]	; (800c40c <CAN_2_ini+0x214>)
 800c232:	601a      	str	r2, [r3, #0]
	g_long_ABS_MSB				= &VCU_DW.VAR_IN_g_long_ABS_MSB;
 800c234:	4b76      	ldr	r3, [pc, #472]	; (800c410 <CAN_2_ini+0x218>)
 800c236:	4a72      	ldr	r2, [pc, #456]	; (800c400 <CAN_2_ini+0x208>)
 800c238:	601a      	str	r2, [r3, #0]

	//------ABS 0x5C0 LM02------
	canData.ABS_switchstate_CAN2	= &VCU_DW.VAR_IN_ABS_switchstate;
 800c23a:	4b6c      	ldr	r3, [pc, #432]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c23c:	4a75      	ldr	r2, [pc, #468]	; (800c414 <CAN_2_ini+0x21c>)
 800c23e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	canData.p_brake_F_CAN2			= &p_brake_F;
 800c242:	4b6a      	ldr	r3, [pc, #424]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c244:	4a74      	ldr	r2, [pc, #464]	; (800c418 <CAN_2_ini+0x220>)
 800c246:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	p_brake_F_LSB					= &VCU_DW.VAR_IN_p_brake_F_LSB;
 800c24a:	4b74      	ldr	r3, [pc, #464]	; (800c41c <CAN_2_ini+0x224>)
 800c24c:	4a74      	ldr	r2, [pc, #464]	; (800c420 <CAN_2_ini+0x228>)
 800c24e:	601a      	str	r2, [r3, #0]
	p_brake_F_MSB					= &VCU_DW.VAR_IN_p_brake_F_MSB;
 800c250:	4b74      	ldr	r3, [pc, #464]	; (800c424 <CAN_2_ini+0x22c>)
 800c252:	4a75      	ldr	r2, [pc, #468]	; (800c428 <CAN_2_ini+0x230>)
 800c254:	601a      	str	r2, [r3, #0]
	canData.ABS_BL_swtich_CAN2		= &VCU_DW.VAR_IN_ABS_BL_switch;
 800c256:	4b65      	ldr	r3, [pc, #404]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c258:	4a74      	ldr	r2, [pc, #464]	; (800c42c <CAN_2_ini+0x234>)
 800c25a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	canData.ABS_active_CAN2			= &VCU_DW.VAR_IN_ABS_active;
 800c25e:	4b63      	ldr	r3, [pc, #396]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c260:	4a73      	ldr	r2, [pc, #460]	; (800c430 <CAN_2_ini+0x238>)
 800c262:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	canData.ABS_EBD_lamp_CAN2		= &VCU_DW.VAR_IN_ABS_EBD_Lamp;
 800c266:	4b61      	ldr	r3, [pc, #388]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c268:	4a72      	ldr	r2, [pc, #456]	; (800c434 <CAN_2_ini+0x23c>)
 800c26a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	//------Wheel n 0x140 LM03------
	canData.n_wheel_FL_mpros	= &n_wheel_FL_mpros;
 800c26e:	4b5f      	ldr	r3, [pc, #380]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c270:	4a71      	ldr	r2, [pc, #452]	; (800c438 <CAN_2_ini+0x240>)
 800c272:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	n_wheel_FL_mpros_LSB 		= &VCU_DW.VAR_IN_n_wheel_FL_mpros_LSB;
 800c276:	4b71      	ldr	r3, [pc, #452]	; (800c43c <CAN_2_ini+0x244>)
 800c278:	4a71      	ldr	r2, [pc, #452]	; (800c440 <CAN_2_ini+0x248>)
 800c27a:	601a      	str	r2, [r3, #0]
	n_wheel_FL_mpros_MSB 		= &VCU_DW.VAR_IN_n_wheel_FL_mpros_MSB;
 800c27c:	4b71      	ldr	r3, [pc, #452]	; (800c444 <CAN_2_ini+0x24c>)
 800c27e:	4a72      	ldr	r2, [pc, #456]	; (800c448 <CAN_2_ini+0x250>)
 800c280:	601a      	str	r2, [r3, #0]

	//------Wheel n 0x142 LM04------
	canData.n_wheel_FR_mpros	= &n_wheel_FR_mpros;
 800c282:	4b5a      	ldr	r3, [pc, #360]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c284:	4a71      	ldr	r2, [pc, #452]	; (800c44c <CAN_2_ini+0x254>)
 800c286:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	n_wheel_FR_mpros_LSB 		= &VCU_DW.VAR_IN_n_wheel_FR_mpros_LSB;
 800c28a:	4b71      	ldr	r3, [pc, #452]	; (800c450 <CAN_2_ini+0x258>)
 800c28c:	4a71      	ldr	r2, [pc, #452]	; (800c454 <CAN_2_ini+0x25c>)
 800c28e:	601a      	str	r2, [r3, #0]
	n_wheel_FR_mpros_MSB 		= &VCU_DW.VAR_IN_n_wheel_FR_mpros_MSB;
 800c290:	4b71      	ldr	r3, [pc, #452]	; (800c458 <CAN_2_ini+0x260>)
 800c292:	4a72      	ldr	r2, [pc, #456]	; (800c45c <CAN_2_ini+0x264>)
 800c294:	601a      	str	r2, [r3, #0]

	//------Wheel n 0x340 LM05------
	canData.n_wheel_RL_mpros	= &n_wheel_RL_mpros;
 800c296:	4b55      	ldr	r3, [pc, #340]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c298:	4a71      	ldr	r2, [pc, #452]	; (800c460 <CAN_2_ini+0x268>)
 800c29a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	n_wheel_RL_mpros_LSB 		= &VCU_DW.VAR_IN_n_wheel_RL_mpros_LSB;
 800c29e:	4b71      	ldr	r3, [pc, #452]	; (800c464 <CAN_2_ini+0x26c>)
 800c2a0:	4a71      	ldr	r2, [pc, #452]	; (800c468 <CAN_2_ini+0x270>)
 800c2a2:	601a      	str	r2, [r3, #0]
	n_wheel_RL_mpros_MSB 		= &VCU_DW.VAR_IN_n_wheel_RL_mpros_MSB;
 800c2a4:	4b71      	ldr	r3, [pc, #452]	; (800c46c <CAN_2_ini+0x274>)
 800c2a6:	4a72      	ldr	r2, [pc, #456]	; (800c470 <CAN_2_ini+0x278>)
 800c2a8:	601a      	str	r2, [r3, #0]

	//------Wheel n 0x342 LM06------
	canData.n_wheel_RR_mpros	= &n_wheel_RR_mpros;
 800c2aa:	4b50      	ldr	r3, [pc, #320]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c2ac:	4a71      	ldr	r2, [pc, #452]	; (800c474 <CAN_2_ini+0x27c>)
 800c2ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	n_wheel_RR_mpros_LSB 		= &VCU_DW.VAR_IN_n_wheel_RR_mpros_LSB;
 800c2b2:	4b71      	ldr	r3, [pc, #452]	; (800c478 <CAN_2_ini+0x280>)
 800c2b4:	4a71      	ldr	r2, [pc, #452]	; (800c47c <CAN_2_ini+0x284>)
 800c2b6:	601a      	str	r2, [r3, #0]
	n_wheel_RR_mpros_MSB 		= &VCU_DW.VAR_IN_n_wheel_RR_mpros_MSB;
 800c2b8:	4b71      	ldr	r3, [pc, #452]	; (800c480 <CAN_2_ini+0x288>)
 800c2ba:	4a72      	ldr	r2, [pc, #456]	; (800c484 <CAN_2_ini+0x28c>)
 800c2bc:	601a      	str	r2, [r3, #0]
	//BSPD 0x200 LM07

	//BSPD 0x201 LM08

	//Wheelforce 0x7E0 LM09
	canData.f_FL			= &VCU_DW.VAR_OUT_f_FL;
 800c2be:	4b4b      	ldr	r3, [pc, #300]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c2c0:	4a71      	ldr	r2, [pc, #452]	; (800c488 <CAN_2_ini+0x290>)
 800c2c2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	canData.f_FR			= &VCU_DW.VAR_OUT_f_FR;
 800c2c6:	4b49      	ldr	r3, [pc, #292]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c2c8:	4a70      	ldr	r2, [pc, #448]	; (800c48c <CAN_2_ini+0x294>)
 800c2ca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	//canData.f_RL			= (uint16_t*)&VCU_DW.VAR_OUT_f_RL;
	//canData.f_RR			= (uint16_t*)&VCU_DW.VAR_OUT_f_RR;
	canData.TR1_VSense_WP	= &VAR_TR1_VSense_WP;
 800c2ce:	4b47      	ldr	r3, [pc, #284]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c2d0:	4a6f      	ldr	r2, [pc, #444]	; (800c490 <CAN_2_ini+0x298>)
 800c2d2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	canData.TR2_VSense_FAN1	= &VAR_TR2_VSense_FAN1;
 800c2d6:	4b45      	ldr	r3, [pc, #276]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c2d8:	4a6e      	ldr	r2, [pc, #440]	; (800c494 <CAN_2_ini+0x29c>)
 800c2da:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	canData.TR3_VSense_FAN2	= &VAR_TR3_VSense_FAN2;
 800c2de:	4b43      	ldr	r3, [pc, #268]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c2e0:	4a6d      	ldr	r2, [pc, #436]	; (800c498 <CAN_2_ini+0x2a0>)
 800c2e2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	//Measurement 0x7E2 LM10
	//canData.x_RH_RL			= (uint8_t*)&VCU_DW.VAR_OUT_x_RH_RL;
	//canData.x_RH_RR			= (uint8_t*)&VCU_DW.VAR_OUT_x_RH_RR;
	canData.Brakelight		= &VCU_DW.VAR_OUT_Brakelight;
 800c2e6:	4b41      	ldr	r3, [pc, #260]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c2e8:	4a6c      	ldr	r2, [pc, #432]	; (800c49c <CAN_2_ini+0x2a4>)
 800c2ea:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	canData.x_RH_F			= &VCU_DW.VAR_OUT_x_RH_F;
 800c2ee:	4b3f      	ldr	r3, [pc, #252]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c2f0:	4a6b      	ldr	r2, [pc, #428]	; (800c4a0 <CAN_2_ini+0x2a8>)
 800c2f2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	canData.x_clutch		= &VCU_DW.VAR_OUT_x_clutch;
 800c2f6:	4b3d      	ldr	r3, [pc, #244]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c2f8:	4a6a      	ldr	r2, [pc, #424]	; (800c4a4 <CAN_2_ini+0x2ac>)
 800c2fa:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	canData.x_clutch_STW	= &VCU_DW.VAR_OUT_x_clutch_STW;
 800c2fe:	4b3b      	ldr	r3, [pc, #236]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c300:	4a69      	ldr	r2, [pc, #420]	; (800c4a8 <CAN_2_ini+0x2b0>)
 800c302:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	canData.p_pneu			= &VCU_DW.VAR_OUT_p_pneum;
 800c306:	4b39      	ldr	r3, [pc, #228]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c308:	4a68      	ldr	r2, [pc, #416]	; (800c4ac <CAN_2_ini+0x2b4>)
 800c30a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	canData.U_bat			= &VCU_DW.VAR_OUT_U_Bat;
 800c30e:	4b37      	ldr	r3, [pc, #220]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c310:	4a67      	ldr	r2, [pc, #412]	; (800c4b0 <CAN_2_ini+0x2b8>)
 800c312:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	canData.t_board_VCU		= &VAR_boardTemp;
 800c316:	4b35      	ldr	r3, [pc, #212]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c318:	4a66      	ldr	r2, [pc, #408]	; (800c4b4 <CAN_2_ini+0x2bc>)
 800c31a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	canData.BSD				= &VCU_DW.VAR_OUT_BSD;
 800c31e:	4b33      	ldr	r3, [pc, #204]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c320:	4a65      	ldr	r2, [pc, #404]	; (800c4b8 <CAN_2_ini+0x2c0>)
 800c322:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

	//Error 0x7E3 LM11
	canData.plausi_error 	= 0;
 800c326:	4b31      	ldr	r3, [pc, #196]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c328:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 800c32c:	f04f 0200 	mov.w	r2, #0
 800c330:	f04f 0300 	mov.w	r3, #0
 800c334:	e9c1 2300 	strd	r2, r3, [r1]

	//Manual Control 0x7FF LM12
	canData.ManualControl_Active = 0;
 800c338:	4b2c      	ldr	r3, [pc, #176]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c33a:	2200      	movs	r2, #0
 800c33c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	canData.ManConOn_MHJ9_IN = 0;
 800c340:	4b2a      	ldr	r3, [pc, #168]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c342:	2200      	movs	r2, #0
 800c344:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	canData.ManConOn_MHJ9_OUT = 0;
 800c348:	4b28      	ldr	r3, [pc, #160]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c34a:	2200      	movs	r2, #0
 800c34c:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
	canData.ManConOn_Waterpump = 0;
 800c350:	4b26      	ldr	r3, [pc, #152]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c352:	2200      	movs	r2, #0
 800c354:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	canData.ManConOn_Fans1 = 0;
 800c358:	4b24      	ldr	r3, [pc, #144]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c35a:	2200      	movs	r2, #0
 800c35c:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	canData.ManConOn_Fans2 = 0;
 800c360:	4b22      	ldr	r3, [pc, #136]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c362:	2200      	movs	r2, #0
 800c364:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
	canData.ManConOn_VOVGShiftDown = 0;
 800c368:	4b20      	ldr	r3, [pc, #128]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c36a:	2200      	movs	r2, #0
 800c36c:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	canData.ManConOn_VOVGShiftUp = 0;
 800c370:	4b1e      	ldr	r3, [pc, #120]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c372:	2200      	movs	r2, #0
 800c374:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
	canData.ManConOn_IgnCut = 0;
 800c378:	4b1c      	ldr	r3, [pc, #112]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	canData.ManConOn_VOVG_IN = 0;
 800c380:	4b1a      	ldr	r3, [pc, #104]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c382:	2200      	movs	r2, #0
 800c384:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
	canData.ManConOn_VOVG_OUT = 0;
 800c388:	4b18      	ldr	r3, [pc, #96]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c38a:	2200      	movs	r2, #0
 800c38c:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
	canData.ManConVar_MHJ9_IN = 0;
 800c390:	4b16      	ldr	r3, [pc, #88]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c392:	2200      	movs	r2, #0
 800c394:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	canData.ManConVar_MHJ9_OUT = 0;
 800c398:	4b14      	ldr	r3, [pc, #80]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
	canData.ManConVar_Waterpump = 0;
 800c3a0:	4b12      	ldr	r3, [pc, #72]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
	canData.ManConVar_Fans1 = 0;
 800c3a8:	4b10      	ldr	r3, [pc, #64]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	canData.ManConVar_Fans2 = 0;
 800c3b0:	4b0e      	ldr	r3, [pc, #56]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
	canData.ManConVar_VOVGShiftDown = 0;
 800c3b8:	4b0c      	ldr	r3, [pc, #48]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
	canData.ManConVar_VOVGShiftUp = 0;
 800c3c0:	4b0a      	ldr	r3, [pc, #40]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
	canData.ManConVar_IgnCut = 0;
 800c3c8:	4b08      	ldr	r3, [pc, #32]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
	canData.ManConVar_VOVG_IN = 0;
 800c3d0:	4b06      	ldr	r3, [pc, #24]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
	canData.ManConVar_VOVG_OUT = 0;
 800c3d8:	4b04      	ldr	r3, [pc, #16]	; (800c3ec <CAN_2_ini+0x1f4>)
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
}
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	20000641 	.word	0x20000641
 800c3e8:	0800f664 	.word	0x0800f664
 800c3ec:	20001338 	.word	0x20001338
 800c3f0:	20000880 	.word	0x20000880
 800c3f4:	200012b0 	.word	0x200012b0
 800c3f8:	20001186 	.word	0x20001186
 800c3fc:	200012ac 	.word	0x200012ac
 800c400:	20001185 	.word	0x20001185
 800c404:	20000882 	.word	0x20000882
 800c408:	20001284 	.word	0x20001284
 800c40c:	20001187 	.word	0x20001187
 800c410:	20001298 	.word	0x20001298
 800c414:	2000116d 	.word	0x2000116d
 800c418:	20000884 	.word	0x20000884
 800c41c:	20001290 	.word	0x20001290
 800c420:	2000116b 	.word	0x2000116b
 800c424:	2000129c 	.word	0x2000129c
 800c428:	2000116e 	.word	0x2000116e
 800c42c:	2000116c 	.word	0x2000116c
 800c430:	20001170 	.word	0x20001170
 800c434:	2000116f 	.word	0x2000116f
 800c438:	20000886 	.word	0x20000886
 800c43c:	20001294 	.word	0x20001294
 800c440:	20001176 	.word	0x20001176
 800c444:	200012a0 	.word	0x200012a0
 800c448:	20001172 	.word	0x20001172
 800c44c:	20000888 	.word	0x20000888
 800c450:	200012b4 	.word	0x200012b4
 800c454:	20001173 	.word	0x20001173
 800c458:	20001280 	.word	0x20001280
 800c45c:	20001174 	.word	0x20001174
 800c460:	2000088a 	.word	0x2000088a
 800c464:	200012a8 	.word	0x200012a8
 800c468:	20001175 	.word	0x20001175
 800c46c:	20001288 	.word	0x20001288
 800c470:	20001177 	.word	0x20001177
 800c474:	2000088c 	.word	0x2000088c
 800c478:	200012a4 	.word	0x200012a4
 800c47c:	20001178 	.word	0x20001178
 800c480:	2000128c 	.word	0x2000128c
 800c484:	20001179 	.word	0x20001179
 800c488:	20001102 	.word	0x20001102
 800c48c:	20001104 	.word	0x20001104
 800c490:	20001258 	.word	0x20001258
 800c494:	20001278 	.word	0x20001278
 800c498:	20001248 	.word	0x20001248
 800c49c:	200011a5 	.word	0x200011a5
 800c4a0:	20001165 	.word	0x20001165
 800c4a4:	20001166 	.word	0x20001166
 800c4a8:	20001167 	.word	0x20001167
 800c4ac:	20001168 	.word	0x20001168
 800c4b0:	20001169 	.word	0x20001169
 800c4b4:	20001268 	.word	0x20001268
 800c4b8:	200011a1 	.word	0x200011a1

0800c4bc <CAN_2_Receive>:

void CAN_2_Receive()
{
 800c4bc:	b598      	push	{r3, r4, r7, lr}
 800c4be:	af00      	add	r7, sp, #0
	//------ABS 0x80 LM01------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_01_Config);
 800c4c0:	48b5      	ldr	r0, [pc, #724]	; (800c798 <CAN_2_Receive+0x2dc>)
 800c4c2:	f7fe ff27 	bl	800b314 <CAN_NODE_MO_Receive>

	*canData.g_yaw_ABS 			= checkRangePlausi(CAN_2_LMO_01_Config.mo_ptr->can_data_word[0],ERR_G_YAW_ABS);
 800c4c6:	4bb5      	ldr	r3, [pc, #724]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c4c8:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 800c4cc:	4bb2      	ldr	r3, [pc, #712]	; (800c798 <CAN_2_Receive+0x2dc>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	8a1b      	ldrh	r3, [r3, #16]
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	2103      	movs	r1, #3
 800c4d6:	f000 fc13 	bl	800cd00 <checkRangePlausi>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	8023      	strh	r3, [r4, #0]
	*g_yaw_ABS_LSB				= getbits(*canData.g_yaw_ABS, 7, 8);
 800c4e0:	4baf      	ldr	r3, [pc, #700]	; (800c7a0 <CAN_2_Receive+0x2e4>)
 800c4e2:	681c      	ldr	r4, [r3, #0]
 800c4e4:	4bad      	ldr	r3, [pc, #692]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c4e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c4ea:	881b      	ldrh	r3, [r3, #0]
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	2107      	movs	r1, #7
 800c4f0:	2208      	movs	r2, #8
 800c4f2:	f001 fe07 	bl	800e104 <getbits>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	7023      	strb	r3, [r4, #0]
	*g_yaw_ABS_MSB				= getbits(*canData.g_yaw_ABS, 15, 8);
 800c4fc:	4ba9      	ldr	r3, [pc, #676]	; (800c7a4 <CAN_2_Receive+0x2e8>)
 800c4fe:	681c      	ldr	r4, [r3, #0]
 800c500:	4ba6      	ldr	r3, [pc, #664]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c502:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c506:	881b      	ldrh	r3, [r3, #0]
 800c508:	4618      	mov	r0, r3
 800c50a:	210f      	movs	r1, #15
 800c50c:	2208      	movs	r2, #8
 800c50e:	f001 fdf9 	bl	800e104 <getbits>
 800c512:	4603      	mov	r3, r0
 800c514:	b2db      	uxtb	r3, r3
 800c516:	7023      	strb	r3, [r4, #0]
	*canData.g_long_ABS			= checkRangePlausi(CAN_2_LMO_01_Config.mo_ptr->can_data_word[1],ERR_G_LONG_ABS);
 800c518:	4ba0      	ldr	r3, [pc, #640]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c51a:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 800c51e:	4b9e      	ldr	r3, [pc, #632]	; (800c798 <CAN_2_Receive+0x2dc>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	8a5b      	ldrh	r3, [r3, #18]
 800c524:	4618      	mov	r0, r3
 800c526:	2102      	movs	r1, #2
 800c528:	f000 fbea 	bl	800cd00 <checkRangePlausi>
 800c52c:	4603      	mov	r3, r0
 800c52e:	b29b      	uxth	r3, r3
 800c530:	8023      	strh	r3, [r4, #0]
	*g_long_ABS_LSB				= getbits(*canData.g_long_ABS, 7, 8);
 800c532:	4b9d      	ldr	r3, [pc, #628]	; (800c7a8 <CAN_2_Receive+0x2ec>)
 800c534:	681c      	ldr	r4, [r3, #0]
 800c536:	4b99      	ldr	r3, [pc, #612]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c538:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c53c:	881b      	ldrh	r3, [r3, #0]
 800c53e:	4618      	mov	r0, r3
 800c540:	2107      	movs	r1, #7
 800c542:	2208      	movs	r2, #8
 800c544:	f001 fdde 	bl	800e104 <getbits>
 800c548:	4603      	mov	r3, r0
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	7023      	strb	r3, [r4, #0]
	*g_long_ABS_MSB				= getbits(*canData.g_long_ABS, 15, 8);
 800c54e:	4b97      	ldr	r3, [pc, #604]	; (800c7ac <CAN_2_Receive+0x2f0>)
 800c550:	681c      	ldr	r4, [r3, #0]
 800c552:	4b92      	ldr	r3, [pc, #584]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c554:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c558:	881b      	ldrh	r3, [r3, #0]
 800c55a:	4618      	mov	r0, r3
 800c55c:	210f      	movs	r1, #15
 800c55e:	2208      	movs	r2, #8
 800c560:	f001 fdd0 	bl	800e104 <getbits>
 800c564:	4603      	mov	r3, r0
 800c566:	b2db      	uxtb	r3, r3
 800c568:	7023      	strb	r3, [r4, #0]

	//------ABS 0x5C0 LM02------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_02_Config);
 800c56a:	4891      	ldr	r0, [pc, #580]	; (800c7b0 <CAN_2_Receive+0x2f4>)
 800c56c:	f7fe fed2 	bl	800b314 <CAN_NODE_MO_Receive>

	*canData.ABS_switchstate_CAN2	= CAN_2_LMO_02_Config.mo_ptr->can_data_byte[0];
 800c570:	4b8a      	ldr	r3, [pc, #552]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c572:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c576:	4a8e      	ldr	r2, [pc, #568]	; (800c7b0 <CAN_2_Receive+0x2f4>)
 800c578:	6812      	ldr	r2, [r2, #0]
 800c57a:	7c12      	ldrb	r2, [r2, #16]
 800c57c:	701a      	strb	r2, [r3, #0]
	*canData.p_brake_F_CAN2			= checkRangePlausi(getbits(CAN_2_LMO_02_Config.mo_ptr->can_data_long,23,16),ERR_P_BRAKE_F);
 800c57e:	4b87      	ldr	r3, [pc, #540]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c580:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
 800c584:	4b8a      	ldr	r3, [pc, #552]	; (800c7b0 <CAN_2_Receive+0x2f4>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c58c:	4613      	mov	r3, r2
 800c58e:	4618      	mov	r0, r3
 800c590:	2117      	movs	r1, #23
 800c592:	2210      	movs	r2, #16
 800c594:	f001 fdb6 	bl	800e104 <getbits>
 800c598:	4603      	mov	r3, r0
 800c59a:	4618      	mov	r0, r3
 800c59c:	210d      	movs	r1, #13
 800c59e:	f000 fbaf 	bl	800cd00 <checkRangePlausi>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	8023      	strh	r3, [r4, #0]
	*p_brake_F_LSB					= getbits(*canData.p_brake_F_CAN2, 7, 8);
 800c5a8:	4b82      	ldr	r3, [pc, #520]	; (800c7b4 <CAN_2_Receive+0x2f8>)
 800c5aa:	681c      	ldr	r4, [r3, #0]
 800c5ac:	4b7b      	ldr	r3, [pc, #492]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c5ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c5b2:	881b      	ldrh	r3, [r3, #0]
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	2107      	movs	r1, #7
 800c5b8:	2208      	movs	r2, #8
 800c5ba:	f001 fda3 	bl	800e104 <getbits>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	7023      	strb	r3, [r4, #0]
	*p_brake_F_MSB					= getbits(*canData.p_brake_F_CAN2, 15, 8);
 800c5c4:	4b7c      	ldr	r3, [pc, #496]	; (800c7b8 <CAN_2_Receive+0x2fc>)
 800c5c6:	681c      	ldr	r4, [r3, #0]
 800c5c8:	4b74      	ldr	r3, [pc, #464]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c5ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c5ce:	881b      	ldrh	r3, [r3, #0]
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	210f      	movs	r1, #15
 800c5d4:	2208      	movs	r2, #8
 800c5d6:	f001 fd95 	bl	800e104 <getbits>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	7023      	strb	r3, [r4, #0]
	*canData.ABS_BL_swtich_CAN2		= CAN_2_LMO_02_Config.mo_ptr->can_data_byte[3];
 800c5e0:	4b6e      	ldr	r3, [pc, #440]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c5e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c5e6:	4a72      	ldr	r2, [pc, #456]	; (800c7b0 <CAN_2_Receive+0x2f4>)
 800c5e8:	6812      	ldr	r2, [r2, #0]
 800c5ea:	7cd2      	ldrb	r2, [r2, #19]
 800c5ec:	701a      	strb	r2, [r3, #0]
	*canData.ABS_active_CAN2		= CAN_2_LMO_02_Config.mo_ptr->can_data_byte[4];
 800c5ee:	4b6b      	ldr	r3, [pc, #428]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c5f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c5f4:	4a6e      	ldr	r2, [pc, #440]	; (800c7b0 <CAN_2_Receive+0x2f4>)
 800c5f6:	6812      	ldr	r2, [r2, #0]
 800c5f8:	7d12      	ldrb	r2, [r2, #20]
 800c5fa:	701a      	strb	r2, [r3, #0]
	*canData.ABS_EBD_lamp_CAN2		= CAN_2_LMO_02_Config.mo_ptr->can_data_byte[5];
 800c5fc:	4b67      	ldr	r3, [pc, #412]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c5fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800c602:	4a6b      	ldr	r2, [pc, #428]	; (800c7b0 <CAN_2_Receive+0x2f4>)
 800c604:	6812      	ldr	r2, [r2, #0]
 800c606:	7d52      	ldrb	r2, [r2, #21]
 800c608:	701a      	strb	r2, [r3, #0]
	//*canData.n_wheel_RR_mpros	= checkRangePlausi(CAN_2_LMO_06_Config.mo_ptr->can_data_word[0],ERR_N_WHEEL_RR);
	//*n_wheel_RR_mpros_LSB		= getbits(*canData.n_wheel_RR_mpros, 7, 8);
	//*n_wheel_RR_mpros_MSB		= getbits(*canData.n_wheel_RR_mpros, 15, 8);

	//------Manual Control 0x7FF LM12------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_12_Config);
 800c60a:	486c      	ldr	r0, [pc, #432]	; (800c7bc <CAN_2_Receive+0x300>)
 800c60c:	f7fe fe82 	bl	800b314 <CAN_NODE_MO_Receive>
	canData.ManualControl_Active = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[7],7,1);
 800c610:	4b6a      	ldr	r3, [pc, #424]	; (800c7bc <CAN_2_Receive+0x300>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	7ddb      	ldrb	r3, [r3, #23]
 800c616:	4618      	mov	r0, r3
 800c618:	2107      	movs	r1, #7
 800c61a:	2201      	movs	r2, #1
 800c61c:	f001 fd72 	bl	800e104 <getbits>
 800c620:	4603      	mov	r3, r0
 800c622:	b2da      	uxtb	r2, r3
 800c624:	4b5d      	ldr	r3, [pc, #372]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c626:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	canData.ManConOn_MHJ9_IN = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[0],0,1);
 800c62a:	4b64      	ldr	r3, [pc, #400]	; (800c7bc <CAN_2_Receive+0x300>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	7c1b      	ldrb	r3, [r3, #16]
 800c630:	4618      	mov	r0, r3
 800c632:	2100      	movs	r1, #0
 800c634:	2201      	movs	r2, #1
 800c636:	f001 fd65 	bl	800e104 <getbits>
 800c63a:	4603      	mov	r3, r0
 800c63c:	b2da      	uxtb	r2, r3
 800c63e:	4b57      	ldr	r3, [pc, #348]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c640:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	canData.ManConOn_MHJ9_OUT = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[1],0,1);
 800c644:	4b5d      	ldr	r3, [pc, #372]	; (800c7bc <CAN_2_Receive+0x300>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	7c5b      	ldrb	r3, [r3, #17]
 800c64a:	4618      	mov	r0, r3
 800c64c:	2100      	movs	r1, #0
 800c64e:	2201      	movs	r2, #1
 800c650:	f001 fd58 	bl	800e104 <getbits>
 800c654:	4603      	mov	r3, r0
 800c656:	b2da      	uxtb	r2, r3
 800c658:	4b50      	ldr	r3, [pc, #320]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c65a:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
	canData.ManConOn_Waterpump = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[2],0,1);
 800c65e:	4b57      	ldr	r3, [pc, #348]	; (800c7bc <CAN_2_Receive+0x300>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	7c9b      	ldrb	r3, [r3, #18]
 800c664:	4618      	mov	r0, r3
 800c666:	2100      	movs	r1, #0
 800c668:	2201      	movs	r2, #1
 800c66a:	f001 fd4b 	bl	800e104 <getbits>
 800c66e:	4603      	mov	r3, r0
 800c670:	b2da      	uxtb	r2, r3
 800c672:	4b4a      	ldr	r3, [pc, #296]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c674:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	canData.ManConOn_Fans1 = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[3],0,1);
 800c678:	4b50      	ldr	r3, [pc, #320]	; (800c7bc <CAN_2_Receive+0x300>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	7cdb      	ldrb	r3, [r3, #19]
 800c67e:	4618      	mov	r0, r3
 800c680:	2100      	movs	r1, #0
 800c682:	2201      	movs	r2, #1
 800c684:	f001 fd3e 	bl	800e104 <getbits>
 800c688:	4603      	mov	r3, r0
 800c68a:	b2da      	uxtb	r2, r3
 800c68c:	4b43      	ldr	r3, [pc, #268]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c68e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	canData.ManConOn_Fans2 = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[4],0,1);
 800c692:	4b4a      	ldr	r3, [pc, #296]	; (800c7bc <CAN_2_Receive+0x300>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	7d1b      	ldrb	r3, [r3, #20]
 800c698:	4618      	mov	r0, r3
 800c69a:	2100      	movs	r1, #0
 800c69c:	2201      	movs	r2, #1
 800c69e:	f001 fd31 	bl	800e104 <getbits>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	4b3d      	ldr	r3, [pc, #244]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c6a8:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
	canData.ManConOn_VOVGShiftUp = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],0,1);
 800c6ac:	4b43      	ldr	r3, [pc, #268]	; (800c7bc <CAN_2_Receive+0x300>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	7d5b      	ldrb	r3, [r3, #21]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f001 fd24 	bl	800e104 <getbits>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	4b36      	ldr	r3, [pc, #216]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c6c2:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
	canData.ManConOn_VOVGShiftDown = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],2,1);
 800c6c6:	4b3d      	ldr	r3, [pc, #244]	; (800c7bc <CAN_2_Receive+0x300>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	7d5b      	ldrb	r3, [r3, #21]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	2102      	movs	r1, #2
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	f001 fd17 	bl	800e104 <getbits>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	4b30      	ldr	r3, [pc, #192]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c6dc:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	canData.ManConOn_IgnCut = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],4,1);
 800c6e0:	4b36      	ldr	r3, [pc, #216]	; (800c7bc <CAN_2_Receive+0x300>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	7d5b      	ldrb	r3, [r3, #21]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	2104      	movs	r1, #4
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	f001 fd0a 	bl	800e104 <getbits>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	b2da      	uxtb	r2, r3
 800c6f4:	4b29      	ldr	r3, [pc, #164]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c6f6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	canData.ManConOn_VOVG_IN = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],6,1);
 800c6fa:	4b30      	ldr	r3, [pc, #192]	; (800c7bc <CAN_2_Receive+0x300>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	7d5b      	ldrb	r3, [r3, #21]
 800c700:	4618      	mov	r0, r3
 800c702:	2106      	movs	r1, #6
 800c704:	2201      	movs	r2, #1
 800c706:	f001 fcfd 	bl	800e104 <getbits>
 800c70a:	4603      	mov	r3, r0
 800c70c:	b2da      	uxtb	r2, r3
 800c70e:	4b23      	ldr	r3, [pc, #140]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c710:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
	canData.ManConOn_VOVG_OUT = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[6],0,1);
 800c714:	4b29      	ldr	r3, [pc, #164]	; (800c7bc <CAN_2_Receive+0x300>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	7d9b      	ldrb	r3, [r3, #22]
 800c71a:	4618      	mov	r0, r3
 800c71c:	2100      	movs	r1, #0
 800c71e:	2201      	movs	r2, #1
 800c720:	f001 fcf0 	bl	800e104 <getbits>
 800c724:	4603      	mov	r3, r0
 800c726:	b2da      	uxtb	r2, r3
 800c728:	4b1c      	ldr	r3, [pc, #112]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c72a:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
	canData.ManConVar_MHJ9_IN = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[0],7,7);
 800c72e:	4b23      	ldr	r3, [pc, #140]	; (800c7bc <CAN_2_Receive+0x300>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	7c1b      	ldrb	r3, [r3, #16]
 800c734:	4618      	mov	r0, r3
 800c736:	2107      	movs	r1, #7
 800c738:	2207      	movs	r2, #7
 800c73a:	f001 fce3 	bl	800e104 <getbits>
 800c73e:	4603      	mov	r3, r0
 800c740:	b2da      	uxtb	r2, r3
 800c742:	4b16      	ldr	r3, [pc, #88]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c744:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	canData.ManConVar_MHJ9_OUT = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[1],7,7);
 800c748:	4b1c      	ldr	r3, [pc, #112]	; (800c7bc <CAN_2_Receive+0x300>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	7c5b      	ldrb	r3, [r3, #17]
 800c74e:	4618      	mov	r0, r3
 800c750:	2107      	movs	r1, #7
 800c752:	2207      	movs	r2, #7
 800c754:	f001 fcd6 	bl	800e104 <getbits>
 800c758:	4603      	mov	r3, r0
 800c75a:	b2da      	uxtb	r2, r3
 800c75c:	4b0f      	ldr	r3, [pc, #60]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c75e:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
	canData.ManConVar_Waterpump = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[2],7,7);
 800c762:	4b16      	ldr	r3, [pc, #88]	; (800c7bc <CAN_2_Receive+0x300>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	7c9b      	ldrb	r3, [r3, #18]
 800c768:	4618      	mov	r0, r3
 800c76a:	2107      	movs	r1, #7
 800c76c:	2207      	movs	r2, #7
 800c76e:	f001 fcc9 	bl	800e104 <getbits>
 800c772:	4603      	mov	r3, r0
 800c774:	b2da      	uxtb	r2, r3
 800c776:	4b09      	ldr	r3, [pc, #36]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c778:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
	canData.ManConVar_Fans1 = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[3],7,7);
 800c77c:	4b0f      	ldr	r3, [pc, #60]	; (800c7bc <CAN_2_Receive+0x300>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	7cdb      	ldrb	r3, [r3, #19]
 800c782:	4618      	mov	r0, r3
 800c784:	2107      	movs	r1, #7
 800c786:	2207      	movs	r2, #7
 800c788:	f001 fcbc 	bl	800e104 <getbits>
 800c78c:	4603      	mov	r3, r0
 800c78e:	b2da      	uxtb	r2, r3
 800c790:	4b02      	ldr	r3, [pc, #8]	; (800c79c <CAN_2_Receive+0x2e0>)
 800c792:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
 800c796:	e013      	b.n	800c7c0 <CAN_2_Receive+0x304>
 800c798:	0800f814 	.word	0x0800f814
 800c79c:	20001338 	.word	0x20001338
 800c7a0:	200012b0 	.word	0x200012b0
 800c7a4:	200012ac 	.word	0x200012ac
 800c7a8:	20001284 	.word	0x20001284
 800c7ac:	20001298 	.word	0x20001298
 800c7b0:	0800f820 	.word	0x0800f820
 800c7b4:	20001290 	.word	0x20001290
 800c7b8:	2000129c 	.word	0x2000129c
 800c7bc:	0800f898 	.word	0x0800f898
	canData.ManConVar_Fans2 = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[4],7,7);
 800c7c0:	4b7a      	ldr	r3, [pc, #488]	; (800c9ac <CAN_2_Receive+0x4f0>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	7d1b      	ldrb	r3, [r3, #20]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	2107      	movs	r1, #7
 800c7ca:	2207      	movs	r2, #7
 800c7cc:	f001 fc9a 	bl	800e104 <getbits>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	b2da      	uxtb	r2, r3
 800c7d4:	4b76      	ldr	r3, [pc, #472]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c7d6:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
	canData.ManConVar_VOVGShiftUp = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],1,1);
 800c7da:	4b74      	ldr	r3, [pc, #464]	; (800c9ac <CAN_2_Receive+0x4f0>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	7d5b      	ldrb	r3, [r3, #21]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	2101      	movs	r1, #1
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	f001 fc8d 	bl	800e104 <getbits>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	b2da      	uxtb	r2, r3
 800c7ee:	4b70      	ldr	r3, [pc, #448]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c7f0:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
	canData.ManConVar_VOVGShiftDown = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],3,1);
 800c7f4:	4b6d      	ldr	r3, [pc, #436]	; (800c9ac <CAN_2_Receive+0x4f0>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	7d5b      	ldrb	r3, [r3, #21]
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	2103      	movs	r1, #3
 800c7fe:	2201      	movs	r2, #1
 800c800:	f001 fc80 	bl	800e104 <getbits>
 800c804:	4603      	mov	r3, r0
 800c806:	b2da      	uxtb	r2, r3
 800c808:	4b69      	ldr	r3, [pc, #420]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c80a:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
	canData.ManConVar_IgnCut = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],5,1);
 800c80e:	4b67      	ldr	r3, [pc, #412]	; (800c9ac <CAN_2_Receive+0x4f0>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	7d5b      	ldrb	r3, [r3, #21]
 800c814:	4618      	mov	r0, r3
 800c816:	2105      	movs	r1, #5
 800c818:	2201      	movs	r2, #1
 800c81a:	f001 fc73 	bl	800e104 <getbits>
 800c81e:	4603      	mov	r3, r0
 800c820:	b2da      	uxtb	r2, r3
 800c822:	4b63      	ldr	r3, [pc, #396]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c824:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
	canData.ManConVar_VOVG_IN = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],7,1);
 800c828:	4b60      	ldr	r3, [pc, #384]	; (800c9ac <CAN_2_Receive+0x4f0>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	7d5b      	ldrb	r3, [r3, #21]
 800c82e:	4618      	mov	r0, r3
 800c830:	2107      	movs	r1, #7
 800c832:	2201      	movs	r2, #1
 800c834:	f001 fc66 	bl	800e104 <getbits>
 800c838:	4603      	mov	r3, r0
 800c83a:	b2da      	uxtb	r2, r3
 800c83c:	4b5c      	ldr	r3, [pc, #368]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c83e:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
	canData.ManConVar_VOVG_OUT = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],9,1);
 800c842:	4b5a      	ldr	r3, [pc, #360]	; (800c9ac <CAN_2_Receive+0x4f0>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	7d5b      	ldrb	r3, [r3, #21]
 800c848:	4618      	mov	r0, r3
 800c84a:	2109      	movs	r1, #9
 800c84c:	2201      	movs	r2, #1
 800c84e:	f001 fc59 	bl	800e104 <getbits>
 800c852:	4603      	mov	r3, r0
 800c854:	b2da      	uxtb	r2, r3
 800c856:	4b56      	ldr	r3, [pc, #344]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c858:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c

	//------Bremse_2 0x24A LM13------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_13_Config);
 800c85c:	4855      	ldr	r0, [pc, #340]	; (800c9b4 <CAN_2_Receive+0x4f8>)
 800c85e:	f7fe fd59 	bl	800b314 <CAN_NODE_MO_Receive>

	*canData.n_wheel_FL_mpros	= checkRangePlausi(CAN_2_LMO_13_Config.mo_ptr->can_data_word[0],ERR_N_WHEEL_FL);
 800c862:	4b53      	ldr	r3, [pc, #332]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c864:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
 800c868:	4b52      	ldr	r3, [pc, #328]	; (800c9b4 <CAN_2_Receive+0x4f8>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	8a1b      	ldrh	r3, [r3, #16]
 800c86e:	4618      	mov	r0, r3
 800c870:	2107      	movs	r1, #7
 800c872:	f000 fa45 	bl	800cd00 <checkRangePlausi>
 800c876:	4603      	mov	r3, r0
 800c878:	b29b      	uxth	r3, r3
 800c87a:	8023      	strh	r3, [r4, #0]
	*n_wheel_FL_mpros_LSB		= getbits(*canData.n_wheel_FL_mpros, 7, 8);
 800c87c:	4b4e      	ldr	r3, [pc, #312]	; (800c9b8 <CAN_2_Receive+0x4fc>)
 800c87e:	681c      	ldr	r4, [r3, #0]
 800c880:	4b4b      	ldr	r3, [pc, #300]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c882:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c886:	881b      	ldrh	r3, [r3, #0]
 800c888:	4618      	mov	r0, r3
 800c88a:	2107      	movs	r1, #7
 800c88c:	2208      	movs	r2, #8
 800c88e:	f001 fc39 	bl	800e104 <getbits>
 800c892:	4603      	mov	r3, r0
 800c894:	b2db      	uxtb	r3, r3
 800c896:	7023      	strb	r3, [r4, #0]
	*n_wheel_FL_mpros_MSB		= getbits(*canData.n_wheel_FL_mpros, 15, 8);
 800c898:	4b48      	ldr	r3, [pc, #288]	; (800c9bc <CAN_2_Receive+0x500>)
 800c89a:	681c      	ldr	r4, [r3, #0]
 800c89c:	4b44      	ldr	r3, [pc, #272]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c89e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c8a2:	881b      	ldrh	r3, [r3, #0]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	210f      	movs	r1, #15
 800c8a8:	2208      	movs	r2, #8
 800c8aa:	f001 fc2b 	bl	800e104 <getbits>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	7023      	strb	r3, [r4, #0]

	*canData.n_wheel_FR_mpros	= checkRangePlausi(CAN_2_LMO_13_Config.mo_ptr->can_data_word[1],ERR_N_WHEEL_FR);
 800c8b4:	4b3e      	ldr	r3, [pc, #248]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c8b6:	f8d3 40f8 	ldr.w	r4, [r3, #248]	; 0xf8
 800c8ba:	4b3e      	ldr	r3, [pc, #248]	; (800c9b4 <CAN_2_Receive+0x4f8>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	8a5b      	ldrh	r3, [r3, #18]
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	2108      	movs	r1, #8
 800c8c4:	f000 fa1c 	bl	800cd00 <checkRangePlausi>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	8023      	strh	r3, [r4, #0]
	*n_wheel_FR_mpros_LSB		= getbits(*canData.n_wheel_FR_mpros, 7, 8);
 800c8ce:	4b3c      	ldr	r3, [pc, #240]	; (800c9c0 <CAN_2_Receive+0x504>)
 800c8d0:	681c      	ldr	r4, [r3, #0]
 800c8d2:	4b37      	ldr	r3, [pc, #220]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c8d4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c8d8:	881b      	ldrh	r3, [r3, #0]
 800c8da:	4618      	mov	r0, r3
 800c8dc:	2107      	movs	r1, #7
 800c8de:	2208      	movs	r2, #8
 800c8e0:	f001 fc10 	bl	800e104 <getbits>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	7023      	strb	r3, [r4, #0]
	*n_wheel_FR_mpros_MSB		= getbits(*canData.n_wheel_FR_mpros, 15, 8);
 800c8ea:	4b36      	ldr	r3, [pc, #216]	; (800c9c4 <CAN_2_Receive+0x508>)
 800c8ec:	681c      	ldr	r4, [r3, #0]
 800c8ee:	4b30      	ldr	r3, [pc, #192]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c8f0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c8f4:	881b      	ldrh	r3, [r3, #0]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	210f      	movs	r1, #15
 800c8fa:	2208      	movs	r2, #8
 800c8fc:	f001 fc02 	bl	800e104 <getbits>
 800c900:	4603      	mov	r3, r0
 800c902:	b2db      	uxtb	r3, r3
 800c904:	7023      	strb	r3, [r4, #0]

	*canData.n_wheel_RL_mpros	= checkRangePlausi(CAN_2_LMO_13_Config.mo_ptr->can_data_word[2],ERR_N_WHEEL_RL);
 800c906:	4b2a      	ldr	r3, [pc, #168]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c908:	f8d3 40fc 	ldr.w	r4, [r3, #252]	; 0xfc
 800c90c:	4b29      	ldr	r3, [pc, #164]	; (800c9b4 <CAN_2_Receive+0x4f8>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	8a9b      	ldrh	r3, [r3, #20]
 800c912:	4618      	mov	r0, r3
 800c914:	2109      	movs	r1, #9
 800c916:	f000 f9f3 	bl	800cd00 <checkRangePlausi>
 800c91a:	4603      	mov	r3, r0
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	8023      	strh	r3, [r4, #0]
	*n_wheel_RL_mpros_LSB		= getbits(*canData.n_wheel_RL_mpros, 7, 8);
 800c920:	4b29      	ldr	r3, [pc, #164]	; (800c9c8 <CAN_2_Receive+0x50c>)
 800c922:	681c      	ldr	r4, [r3, #0]
 800c924:	4b22      	ldr	r3, [pc, #136]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c926:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c92a:	881b      	ldrh	r3, [r3, #0]
 800c92c:	4618      	mov	r0, r3
 800c92e:	2107      	movs	r1, #7
 800c930:	2208      	movs	r2, #8
 800c932:	f001 fbe7 	bl	800e104 <getbits>
 800c936:	4603      	mov	r3, r0
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	7023      	strb	r3, [r4, #0]
	*n_wheel_RL_mpros_MSB		= getbits(*canData.n_wheel_RL_mpros, 15, 8);
 800c93c:	4b23      	ldr	r3, [pc, #140]	; (800c9cc <CAN_2_Receive+0x510>)
 800c93e:	681c      	ldr	r4, [r3, #0]
 800c940:	4b1b      	ldr	r3, [pc, #108]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c942:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c946:	881b      	ldrh	r3, [r3, #0]
 800c948:	4618      	mov	r0, r3
 800c94a:	210f      	movs	r1, #15
 800c94c:	2208      	movs	r2, #8
 800c94e:	f001 fbd9 	bl	800e104 <getbits>
 800c952:	4603      	mov	r3, r0
 800c954:	b2db      	uxtb	r3, r3
 800c956:	7023      	strb	r3, [r4, #0]

	*canData.n_wheel_RR_mpros	= checkRangePlausi(CAN_2_LMO_13_Config.mo_ptr->can_data_word[3],ERR_N_WHEEL_RR);
 800c958:	4b15      	ldr	r3, [pc, #84]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c95a:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 800c95e:	4b15      	ldr	r3, [pc, #84]	; (800c9b4 <CAN_2_Receive+0x4f8>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	8adb      	ldrh	r3, [r3, #22]
 800c964:	4618      	mov	r0, r3
 800c966:	210a      	movs	r1, #10
 800c968:	f000 f9ca 	bl	800cd00 <checkRangePlausi>
 800c96c:	4603      	mov	r3, r0
 800c96e:	b29b      	uxth	r3, r3
 800c970:	8023      	strh	r3, [r4, #0]
	*n_wheel_RR_mpros_LSB		= getbits(*canData.n_wheel_RR_mpros, 7, 8);
 800c972:	4b17      	ldr	r3, [pc, #92]	; (800c9d0 <CAN_2_Receive+0x514>)
 800c974:	681c      	ldr	r4, [r3, #0]
 800c976:	4b0e      	ldr	r3, [pc, #56]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c978:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c97c:	881b      	ldrh	r3, [r3, #0]
 800c97e:	4618      	mov	r0, r3
 800c980:	2107      	movs	r1, #7
 800c982:	2208      	movs	r2, #8
 800c984:	f001 fbbe 	bl	800e104 <getbits>
 800c988:	4603      	mov	r3, r0
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	7023      	strb	r3, [r4, #0]
	*n_wheel_RR_mpros_MSB		= getbits(*canData.n_wheel_RR_mpros, 15, 8);
 800c98e:	4b11      	ldr	r3, [pc, #68]	; (800c9d4 <CAN_2_Receive+0x518>)
 800c990:	681c      	ldr	r4, [r3, #0]
 800c992:	4b07      	ldr	r3, [pc, #28]	; (800c9b0 <CAN_2_Receive+0x4f4>)
 800c994:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c998:	881b      	ldrh	r3, [r3, #0]
 800c99a:	4618      	mov	r0, r3
 800c99c:	210f      	movs	r1, #15
 800c99e:	2208      	movs	r2, #8
 800c9a0:	f001 fbb0 	bl	800e104 <getbits>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	7023      	strb	r3, [r4, #0]

}
 800c9aa:	bd98      	pop	{r3, r4, r7, pc}
 800c9ac:	0800f898 	.word	0x0800f898
 800c9b0:	20001338 	.word	0x20001338
 800c9b4:	0800f8a4 	.word	0x0800f8a4
 800c9b8:	20001294 	.word	0x20001294
 800c9bc:	200012a0 	.word	0x200012a0
 800c9c0:	200012b4 	.word	0x200012b4
 800c9c4:	20001280 	.word	0x20001280
 800c9c8:	200012a8 	.word	0x200012a8
 800c9cc:	20001288 	.word	0x20001288
 800c9d0:	200012a4 	.word	0x200012a4
 800c9d4:	2000128c 	.word	0x2000128c

0800c9d8 <CAN_2_Transmit>:

void CAN_2_Transmit()
{
 800c9d8:	b590      	push	{r4, r7, lr}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
	//Wheelforce 0x7E0 LM09
	CAN2_data_Tx_LM09[0] = getbits(*canData.f_FL,7,8);
 800c9de:	4b6c      	ldr	r3, [pc, #432]	; (800cb90 <CAN_2_Transmit+0x1b8>)
 800c9e0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c9e4:	881b      	ldrh	r3, [r3, #0]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	2107      	movs	r1, #7
 800c9ea:	2208      	movs	r2, #8
 800c9ec:	f001 fb8a 	bl	800e104 <getbits>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	b2da      	uxtb	r2, r3
 800c9f4:	4b67      	ldr	r3, [pc, #412]	; (800cb94 <CAN_2_Transmit+0x1bc>)
 800c9f6:	701a      	strb	r2, [r3, #0]
	CAN2_data_Tx_LM09[1] = getbits(*canData.f_FL,15,8);
 800c9f8:	4b65      	ldr	r3, [pc, #404]	; (800cb90 <CAN_2_Transmit+0x1b8>)
 800c9fa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c9fe:	881b      	ldrh	r3, [r3, #0]
 800ca00:	4618      	mov	r0, r3
 800ca02:	210f      	movs	r1, #15
 800ca04:	2208      	movs	r2, #8
 800ca06:	f001 fb7d 	bl	800e104 <getbits>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	b2da      	uxtb	r2, r3
 800ca0e:	4b61      	ldr	r3, [pc, #388]	; (800cb94 <CAN_2_Transmit+0x1bc>)
 800ca10:	705a      	strb	r2, [r3, #1]
	CAN2_data_Tx_LM09[2] = getbits(*canData.f_FR,7,8);
 800ca12:	4b5f      	ldr	r3, [pc, #380]	; (800cb90 <CAN_2_Transmit+0x1b8>)
 800ca14:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	2107      	movs	r1, #7
 800ca1e:	2208      	movs	r2, #8
 800ca20:	f001 fb70 	bl	800e104 <getbits>
 800ca24:	4603      	mov	r3, r0
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	4b5a      	ldr	r3, [pc, #360]	; (800cb94 <CAN_2_Transmit+0x1bc>)
 800ca2a:	709a      	strb	r2, [r3, #2]
	CAN2_data_Tx_LM09[3] = getbits(*canData.f_FR,15,8);
 800ca2c:	4b58      	ldr	r3, [pc, #352]	; (800cb90 <CAN_2_Transmit+0x1b8>)
 800ca2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ca32:	881b      	ldrh	r3, [r3, #0]
 800ca34:	4618      	mov	r0, r3
 800ca36:	210f      	movs	r1, #15
 800ca38:	2208      	movs	r2, #8
 800ca3a:	f001 fb63 	bl	800e104 <getbits>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	b2da      	uxtb	r2, r3
 800ca42:	4b54      	ldr	r3, [pc, #336]	; (800cb94 <CAN_2_Transmit+0x1bc>)
 800ca44:	70da      	strb	r2, [r3, #3]
	CAN2_data_Tx_LM09[4] = (uint8_t)(*canData.TR1_VSense_WP);
 800ca46:	4b52      	ldr	r3, [pc, #328]	; (800cb90 <CAN_2_Transmit+0x1b8>)
 800ca48:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca50:	4610      	mov	r0, r2
 800ca52:	4619      	mov	r1, r3
 800ca54:	f002 faa2 	bl	800ef9c <__aeabi_d2uiz>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	b2da      	uxtb	r2, r3
 800ca5c:	4b4d      	ldr	r3, [pc, #308]	; (800cb94 <CAN_2_Transmit+0x1bc>)
 800ca5e:	711a      	strb	r2, [r3, #4]
	CAN2_data_Tx_LM09[5] = (uint8_t)(*canData.TR2_VSense_FAN1);
 800ca60:	4b4b      	ldr	r3, [pc, #300]	; (800cb90 <CAN_2_Transmit+0x1b8>)
 800ca62:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ca66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6a:	4610      	mov	r0, r2
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	f002 fa95 	bl	800ef9c <__aeabi_d2uiz>
 800ca72:	4603      	mov	r3, r0
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	4b47      	ldr	r3, [pc, #284]	; (800cb94 <CAN_2_Transmit+0x1bc>)
 800ca78:	715a      	strb	r2, [r3, #5]
	CAN2_data_Tx_LM09[6] = (uint8_t)(*canData.TR3_VSense_FAN2);
 800ca7a:	4b45      	ldr	r3, [pc, #276]	; (800cb90 <CAN_2_Transmit+0x1b8>)
 800ca7c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ca80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca84:	4610      	mov	r0, r2
 800ca86:	4619      	mov	r1, r3
 800ca88:	f002 fa88 	bl	800ef9c <__aeabi_d2uiz>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	b2da      	uxtb	r2, r3
 800ca90:	4b40      	ldr	r3, [pc, #256]	; (800cb94 <CAN_2_Transmit+0x1bc>)
 800ca92:	719a      	strb	r2, [r3, #6]
	//CAN2_data_Tx_LM09[4] = getbits(*canData.f_RL,7,8);
	//CAN2_data_Tx_LM09[5] = getbits(*canData.f_RL,15,8);
	//CAN2_data_Tx_LM09[6] = getbits(*canData.f_RR,7,8);
	//CAN2_data_Tx_LM09[7] = getbits(*canData.f_RR,15,8);

	CAN_NODE_MO_UpdateData(&CAN_2_LMO_09_Config, CAN2_data_Tx_LM09);
 800ca94:	4840      	ldr	r0, [pc, #256]	; (800cb98 <CAN_2_Transmit+0x1c0>)
 800ca96:	493f      	ldr	r1, [pc, #252]	; (800cb94 <CAN_2_Transmit+0x1bc>)
 800ca98:	f7fe fc4e 	bl	800b338 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_2_LMO_09_Config);
 800ca9c:	483e      	ldr	r0, [pc, #248]	; (800cb98 <CAN_2_Transmit+0x1c0>)
 800ca9e:	f7fe fc27 	bl	800b2f0 <CAN_NODE_MO_Transmit>

	//Measurement 0x7E2 LM10
	//CAN2_data_Tx_LM10[0] = *canData.x_RH_RL;
	//CAN2_data_Tx_LM10[1] = *canData.x_RH_RR;
	CAN2_data_Tx_LM10[0] = *canData.Brakelight << 7;
 800caa2:	4b3b      	ldr	r3, [pc, #236]	; (800cb90 <CAN_2_Transmit+0x1b8>)
 800caa4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	01db      	lsls	r3, r3, #7
 800caac:	b2da      	uxtb	r2, r3
 800caae:	4b3b      	ldr	r3, [pc, #236]	; (800cb9c <CAN_2_Transmit+0x1c4>)
 800cab0:	701a      	strb	r2, [r3, #0]
	CAN2_data_Tx_LM10[1] = (uint8_t)(*canData.t_board_VCU / 0.6);
 800cab2:	4b37      	ldr	r3, [pc, #220]	; (800cb90 <CAN_2_Transmit+0x1b8>)
 800cab4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800cab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabc:	4610      	mov	r0, r2
 800cabe:	4619      	mov	r1, r3
 800cac0:	a331      	add	r3, pc, #196	; (adr r3, 800cb88 <CAN_2_Transmit+0x1b0>)
 800cac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac6:	f002 f8f9 	bl	800ecbc <__aeabi_ddiv>
 800caca:	4602      	mov	r2, r0
 800cacc:	460b      	mov	r3, r1
 800cace:	4610      	mov	r0, r2
 800cad0:	4619      	mov	r1, r3
 800cad2:	f002 fa63 	bl	800ef9c <__aeabi_d2uiz>
 800cad6:	4603      	mov	r3, r0
 800cad8:	b2da      	uxtb	r2, r3
 800cada:	4b30      	ldr	r3, [pc, #192]	; (800cb9c <CAN_2_Transmit+0x1c4>)
 800cadc:	705a      	strb	r2, [r3, #1]
	CAN2_data_Tx_LM10[2] = *canData.x_RH_F;
 800cade:	4b2c      	ldr	r3, [pc, #176]	; (800cb90 <CAN_2_Transmit+0x1b8>)
 800cae0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800cae4:	781a      	ldrb	r2, [r3, #0]
 800cae6:	4b2d      	ldr	r3, [pc, #180]	; (800cb9c <CAN_2_Transmit+0x1c4>)
 800cae8:	709a      	strb	r2, [r3, #2]
	CAN2_data_Tx_LM10[3] = *canData.x_clutch;
 800caea:	4b29      	ldr	r3, [pc, #164]	; (800cb90 <CAN_2_Transmit+0x1b8>)
 800caec:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800caf0:	781a      	ldrb	r2, [r3, #0]
 800caf2:	4b2a      	ldr	r3, [pc, #168]	; (800cb9c <CAN_2_Transmit+0x1c4>)
 800caf4:	70da      	strb	r2, [r3, #3]
	CAN2_data_Tx_LM10[4] = *canData.x_clutch_STW;
 800caf6:	4b26      	ldr	r3, [pc, #152]	; (800cb90 <CAN_2_Transmit+0x1b8>)
 800caf8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800cafc:	781a      	ldrb	r2, [r3, #0]
 800cafe:	4b27      	ldr	r3, [pc, #156]	; (800cb9c <CAN_2_Transmit+0x1c4>)
 800cb00:	711a      	strb	r2, [r3, #4]
	CAN2_data_Tx_LM10[5] = *canData.p_pneu;
 800cb02:	4b23      	ldr	r3, [pc, #140]	; (800cb90 <CAN_2_Transmit+0x1b8>)
 800cb04:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800cb08:	781a      	ldrb	r2, [r3, #0]
 800cb0a:	4b24      	ldr	r3, [pc, #144]	; (800cb9c <CAN_2_Transmit+0x1c4>)
 800cb0c:	715a      	strb	r2, [r3, #5]
	CAN2_data_Tx_LM10[6] = *canData.U_bat;
 800cb0e:	4b20      	ldr	r3, [pc, #128]	; (800cb90 <CAN_2_Transmit+0x1b8>)
 800cb10:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800cb14:	781a      	ldrb	r2, [r3, #0]
 800cb16:	4b21      	ldr	r3, [pc, #132]	; (800cb9c <CAN_2_Transmit+0x1c4>)
 800cb18:	719a      	strb	r2, [r3, #6]
	CAN2_data_Tx_LM10[7] = *canData.BSD;
 800cb1a:	4b1d      	ldr	r3, [pc, #116]	; (800cb90 <CAN_2_Transmit+0x1b8>)
 800cb1c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800cb20:	781a      	ldrb	r2, [r3, #0]
 800cb22:	4b1e      	ldr	r3, [pc, #120]	; (800cb9c <CAN_2_Transmit+0x1c4>)
 800cb24:	71da      	strb	r2, [r3, #7]

	CAN_NODE_MO_UpdateData(&CAN_2_LMO_10_Config, CAN2_data_Tx_LM10);
 800cb26:	481e      	ldr	r0, [pc, #120]	; (800cba0 <CAN_2_Transmit+0x1c8>)
 800cb28:	491c      	ldr	r1, [pc, #112]	; (800cb9c <CAN_2_Transmit+0x1c4>)
 800cb2a:	f7fe fc05 	bl	800b338 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_2_LMO_10_Config);
 800cb2e:	481c      	ldr	r0, [pc, #112]	; (800cba0 <CAN_2_Transmit+0x1c8>)
 800cb30:	f7fe fbde 	bl	800b2f0 <CAN_NODE_MO_Transmit>

	//VCU_Failure 0x7E3 LM11
	for (int i = 0; i < 8; i++) {
 800cb34:	2300      	movs	r3, #0
 800cb36:	607b      	str	r3, [r7, #4]
 800cb38:	e018      	b.n	800cb6c <CAN_2_Transmit+0x194>
		CAN2_data_Tx_LM11[i] = getbits64(canData.plausi_error, 8*(i+1)-1, 8);
 800cb3a:	4b15      	ldr	r3, [pc, #84]	; (800cb90 <CAN_2_Transmit+0x1b8>)
 800cb3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb44:	6879      	ldr	r1, [r7, #4]
 800cb46:	3101      	adds	r1, #1
 800cb48:	00c9      	lsls	r1, r1, #3
 800cb4a:	1e4c      	subs	r4, r1, #1
 800cb4c:	4610      	mov	r0, r2
 800cb4e:	4619      	mov	r1, r3
 800cb50:	4622      	mov	r2, r4
 800cb52:	2308      	movs	r3, #8
 800cb54:	f001 faf0 	bl	800e138 <getbits64>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	b2d9      	uxtb	r1, r3
 800cb5c:	4a11      	ldr	r2, [pc, #68]	; (800cba4 <CAN_2_Transmit+0x1cc>)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4413      	add	r3, r2
 800cb62:	460a      	mov	r2, r1
 800cb64:	701a      	strb	r2, [r3, #0]

	CAN_NODE_MO_UpdateData(&CAN_2_LMO_10_Config, CAN2_data_Tx_LM10);
	CAN_NODE_MO_Transmit(&CAN_2_LMO_10_Config);

	//VCU_Failure 0x7E3 LM11
	for (int i = 0; i < 8; i++) {
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	607b      	str	r3, [r7, #4]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b07      	cmp	r3, #7
 800cb70:	dde3      	ble.n	800cb3a <CAN_2_Transmit+0x162>
		CAN2_data_Tx_LM11[i] = getbits64(canData.plausi_error, 8*(i+1)-1, 8);
	}
	CAN_NODE_MO_UpdateData(&CAN_2_LMO_11_Config, CAN2_data_Tx_LM11);
 800cb72:	480d      	ldr	r0, [pc, #52]	; (800cba8 <CAN_2_Transmit+0x1d0>)
 800cb74:	490b      	ldr	r1, [pc, #44]	; (800cba4 <CAN_2_Transmit+0x1cc>)
 800cb76:	f7fe fbdf 	bl	800b338 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_2_LMO_11_Config);
 800cb7a:	480b      	ldr	r0, [pc, #44]	; (800cba8 <CAN_2_Transmit+0x1d0>)
 800cb7c:	f7fe fbb8 	bl	800b2f0 <CAN_NODE_MO_Transmit>
}
 800cb80:	370c      	adds	r7, #12
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd90      	pop	{r4, r7, pc}
 800cb86:	bf00      	nop
 800cb88:	33333333 	.word	0x33333333
 800cb8c:	3fe33333 	.word	0x3fe33333
 800cb90:	20001338 	.word	0x20001338
 800cb94:	20000868 	.word	0x20000868
 800cb98:	0800f874 	.word	0x0800f874
 800cb9c:	20000870 	.word	0x20000870
 800cba0:	0800f880 	.word	0x0800f880
 800cba4:	20000878 	.word	0x20000878
 800cba8:	0800f88c 	.word	0x0800f88c
 800cbac:	f3af 8000 	nop.w

0800cbb0 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	460b      	mov	r3, r1
 800cbba:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800cbbc:	78fb      	ldrb	r3, [r7, #3]
 800cbbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cbc2:	409a      	lsls	r2, r3
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	605a      	str	r2, [r3, #4]
}
 800cbc8:	370c      	adds	r7, #12
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop

0800cbd4 <XMC_WDT_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Init(), XMC_WDT_Stop()
 */
__STATIC_INLINE void XMC_WDT_Start(void)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	af00      	add	r7, sp, #0
  WDT->CTR |= (uint32_t)WDT_CTR_ENB_Msk;
 800cbd8:	4a04      	ldr	r2, [pc, #16]	; (800cbec <XMC_WDT_Start+0x18>)
 800cbda:	4b04      	ldr	r3, [pc, #16]	; (800cbec <XMC_WDT_Start+0x18>)
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	f043 0301 	orr.w	r3, r3, #1
 800cbe2:	6053      	str	r3, [r2, #4]
}
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr
 800cbec:	50008000 	.word	0x50008000

0800cbf0 <XMC_WDT_Service>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_GetCounter(), XMC_WDT_SetWindowBounds(), XMC_WDT_SetServicePulseWidth()
 */
__STATIC_INLINE void XMC_WDT_Service(void)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	af00      	add	r7, sp, #0
  WDT->SRV = XMC_WDT_MAGIC_WORD;
 800cbf4:	4b03      	ldr	r3, [pc, #12]	; (800cc04 <XMC_WDT_Service+0x14>)
 800cbf6:	4a04      	ldr	r2, [pc, #16]	; (800cc08 <XMC_WDT_Service+0x18>)
 800cbf8:	609a      	str	r2, [r3, #8]
}
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	50008000 	.word	0x50008000
 800cc08:	abadcafe 	.word	0xabadcafe

0800cc0c <XMC_WDT_ClearAlarm>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Service(), XMC_WDT_SetMode()
 */
__STATIC_INLINE void XMC_WDT_ClearAlarm(void)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	af00      	add	r7, sp, #0
  WDT->WDTCLR = WDT_WDTCLR_ALMC_Msk;
 800cc10:	4b03      	ldr	r3, [pc, #12]	; (800cc20 <XMC_WDT_ClearAlarm+0x14>)
 800cc12:	2201      	movs	r2, #1
 800cc14:	61da      	str	r2, [r3, #28]
}
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	50008000 	.word	0x50008000

0800cc24 <WATCHDOG_Start>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Start(void)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	af00      	add	r7, sp, #0
  XMC_WDT_Start();
 800cc28:	f7ff ffd4 	bl	800cbd4 <XMC_WDT_Start>
}
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop

0800cc30 <WATCHDOG_Service>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Service(void)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	af00      	add	r7, sp, #0
  XMC_WDT_Service();
 800cc34:	f7ff ffdc 	bl	800cbf0 <XMC_WDT_Service>
}
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop

0800cc3c <WATCHDOG_ClearAlarm>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_ClearAlarm(void)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	af00      	add	r7, sp, #0
  XMC_WDT_ClearAlarm();
 800cc40:	f7ff ffe4 	bl	800cc0c <XMC_WDT_ClearAlarm>
}
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop

0800cc48 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	7c1b      	ldrb	r3, [r3, #16]
 800cc58:	4610      	mov	r0, r2
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	f7ff ffa8 	bl	800cbb0 <XMC_GPIO_SetOutputLow>
}
 800cc60:	3708      	adds	r7, #8
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop

0800cc68 <Watchdog_Start>:


//######## Watchdog ########

void Watchdog_Start()
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	af00      	add	r7, sp, #0
	  WATCHDOG_Start();
 800cc6c:	f7ff ffda 	bl	800cc24 <WATCHDOG_Start>
}
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop

0800cc74 <Watchdog_Reset>:

void Watchdog_Reset()
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	af00      	add	r7, sp, #0
	  WATCHDOG_ClearAlarm();
 800cc78:	f7ff ffe0 	bl	800cc3c <WATCHDOG_ClearAlarm>
	  WATCHDOG_Service();
 800cc7c:	f7ff ffd8 	bl	800cc30 <WATCHDOG_Service>
}
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop

0800cc84 <NMI_Handler>:

void NMI_Handler(void) //Watchdog Prewarning Handler
{
 800cc84:	b590      	push	{r4, r7, lr}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_Debug_LED);
 800cc8a:	4818      	ldr	r0, [pc, #96]	; (800ccec <NMI_Handler+0x68>)
 800cc8c:	f7ff ffdc 	bl	800cc48 <DIGITAL_IO_SetOutputLow>

	setbitTrue((unsigned*)&canData.plausi_error, 63);
 800cc90:	4817      	ldr	r0, [pc, #92]	; (800ccf0 <NMI_Handler+0x6c>)
 800cc92:	213f      	movs	r1, #63	; 0x3f
 800cc94:	f001 fa8c 	bl	800e1b0 <setbitTrue>
	for (int i = 0; i < 8; i++) {
 800cc98:	2300      	movs	r3, #0
 800cc9a:	607b      	str	r3, [r7, #4]
 800cc9c:	e018      	b.n	800ccd0 <NMI_Handler+0x4c>
		plausi_error_array[i] = getbits64(canData.plausi_error, 8*(i+1)-1, 8);
 800cc9e:	4b15      	ldr	r3, [pc, #84]	; (800ccf4 <NMI_Handler+0x70>)
 800cca0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca8:	6879      	ldr	r1, [r7, #4]
 800ccaa:	3101      	adds	r1, #1
 800ccac:	00c9      	lsls	r1, r1, #3
 800ccae:	1e4c      	subs	r4, r1, #1
 800ccb0:	4610      	mov	r0, r2
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	4622      	mov	r2, r4
 800ccb6:	2308      	movs	r3, #8
 800ccb8:	f001 fa3e 	bl	800e138 <getbits64>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	b2d9      	uxtb	r1, r3
 800ccc0:	4a0d      	ldr	r2, [pc, #52]	; (800ccf8 <NMI_Handler+0x74>)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	460a      	mov	r2, r1
 800ccc8:	701a      	strb	r2, [r3, #0]
void NMI_Handler(void) //Watchdog Prewarning Handler
{
	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_Debug_LED);

	setbitTrue((unsigned*)&canData.plausi_error, 63);
	for (int i = 0; i < 8; i++) {
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	3301      	adds	r3, #1
 800ccce:	607b      	str	r3, [r7, #4]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2b07      	cmp	r3, #7
 800ccd4:	dde3      	ble.n	800cc9e <NMI_Handler+0x1a>
		plausi_error_array[i] = getbits64(canData.plausi_error, 8*(i+1)-1, 8);
	}
	CAN_NODE_MO_UpdateData(&CAN_2_LMO_11_Config, plausi_error_array);
 800ccd6:	4809      	ldr	r0, [pc, #36]	; (800ccfc <NMI_Handler+0x78>)
 800ccd8:	4907      	ldr	r1, [pc, #28]	; (800ccf8 <NMI_Handler+0x74>)
 800ccda:	f7fe fb2d 	bl	800b338 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_2_LMO_11_Config);
 800ccde:	4807      	ldr	r0, [pc, #28]	; (800ccfc <NMI_Handler+0x78>)
 800cce0:	f7fe fb06 	bl	800b2f0 <CAN_NODE_MO_Transmit>
}
 800cce4:	370c      	adds	r7, #12
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd90      	pop	{r4, r7, pc}
 800ccea:	bf00      	nop
 800ccec:	0800f63c 	.word	0x0800f63c
 800ccf0:	20001488 	.word	0x20001488
 800ccf4:	20001338 	.word	0x20001338
 800ccf8:	20000890 	.word	0x20000890
 800ccfc:	0800f88c 	.word	0x0800f88c

0800cd00 <checkRangePlausi>:

//######## Plausi Check ########

unsigned checkRangePlausi(unsigned value, VCU_Failure error_code)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b086      	sub	sp, #24
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	460b      	mov	r3, r1
 800cd0a:	70fb      	strb	r3, [r7, #3]
	if(checkRangePlausi_active)
 800cd0c:	4b94      	ldr	r3, [pc, #592]	; (800cf60 <checkRangePlausi+0x260>)
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	f000 816a 	beq.w	800cfea <checkRangePlausi+0x2ea>
	{
		int upperLimit, lowerLimit;
		unsigned prevValue;

		switch(error_code){
 800cd16:	78fb      	ldrb	r3, [r7, #3]
 800cd18:	3b01      	subs	r3, #1
 800cd1a:	2b16      	cmp	r3, #22
 800cd1c:	f200 8136 	bhi.w	800cf8c <checkRangePlausi+0x28c>
 800cd20:	a201      	add	r2, pc, #4	; (adr r2, 800cd28 <checkRangePlausi+0x28>)
 800cd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd26:	bf00      	nop
 800cd28:	0800cd85 	.word	0x0800cd85
 800cd2c:	0800cd97 	.word	0x0800cd97
 800cd30:	0800cdad 	.word	0x0800cdad
 800cd34:	0800cdc3 	.word	0x0800cdc3
 800cd38:	0800cdd5 	.word	0x0800cdd5
 800cd3c:	0800cde7 	.word	0x0800cde7
 800cd40:	0800cdfb 	.word	0x0800cdfb
 800cd44:	0800ce11 	.word	0x0800ce11
 800cd48:	0800ce27 	.word	0x0800ce27
 800cd4c:	0800ce3d 	.word	0x0800ce3d
 800cd50:	0800ce53 	.word	0x0800ce53
 800cd54:	0800ce67 	.word	0x0800ce67
 800cd58:	0800ce7b 	.word	0x0800ce7b
 800cd5c:	0800ce91 	.word	0x0800ce91
 800cd60:	0800ceb1 	.word	0x0800ceb1
 800cd64:	0800cec5 	.word	0x0800cec5
 800cd68:	0800ced9 	.word	0x0800ced9
 800cd6c:	0800ceeb 	.word	0x0800ceeb
 800cd70:	0800cefd 	.word	0x0800cefd
 800cd74:	0800cf0f 	.word	0x0800cf0f
 800cd78:	0800cf21 	.word	0x0800cf21
 800cd7c:	0800cf41 	.word	0x0800cf41
 800cd80:	0800cf6d 	.word	0x0800cf6d
		case ERR_FANS_DASH_BIT: prevValue = (unsigned)*IOportData.Fans_dash_bit;
 800cd84:	4b77      	ldr	r3, [pc, #476]	; (800cf64 <checkRangePlausi+0x264>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	60fb      	str	r3, [r7, #12]
								upperLimit=1;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cd90:	2300      	movs	r3, #0
 800cd92:	613b      	str	r3, [r7, #16]
								break;
 800cd94:	e0fa      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_G_LONG_ABS: 	prevValue = (unsigned)*canData.g_long_ABS; //todo
 800cd96:	4b74      	ldr	r3, [pc, #464]	; (800cf68 <checkRangePlausi+0x268>)
 800cd98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cd9c:	881b      	ldrh	r3, [r3, #0]
 800cd9e:	60fb      	str	r3, [r7, #12]
								upperLimit=32e3;
 800cda0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cda4:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cda6:	2300      	movs	r3, #0
 800cda8:	613b      	str	r3, [r7, #16]
								break;
 800cdaa:	e0ef      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_G_YAW_ABS: 	prevValue = (unsigned)*canData.g_yaw_ABS; //todo
 800cdac:	4b6e      	ldr	r3, [pc, #440]	; (800cf68 <checkRangePlausi+0x268>)
 800cdae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cdb2:	881b      	ldrh	r3, [r3, #0]
 800cdb4:	60fb      	str	r3, [r7, #12]
								upperLimit=32e3;
 800cdb6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cdba:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	613b      	str	r3, [r7, #16]
								break;
 800cdc0:	e0e4      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_GEAR:		 	prevValue = (unsigned)*canData.gear;
 800cdc2:	4b69      	ldr	r3, [pc, #420]	; (800cf68 <checkRangePlausi+0x268>)
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	60fb      	str	r3, [r7, #12]
								upperLimit =3<<3; //Motorola
 800cdca:	2318      	movs	r3, #24
 800cdcc:	617b      	str	r3, [r7, #20]
								lowerLimit =0<<3; //Motorola
 800cdce:	2300      	movs	r3, #0
 800cdd0:	613b      	str	r3, [r7, #16]
								break;
 800cdd2:	e0db      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_LC_DASH_BIT: 	prevValue = (unsigned)*IOportData.LC_dash_bit;
 800cdd4:	4b63      	ldr	r3, [pc, #396]	; (800cf64 <checkRangePlausi+0x264>)
 800cdd6:	6a1b      	ldr	r3, [r3, #32]
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	60fb      	str	r3, [r7, #12]
								upperLimit=1;
 800cddc:	2301      	movs	r3, #1
 800cdde:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cde0:	2300      	movs	r3, #0
 800cde2:	613b      	str	r3, [r7, #16]
								break;
 800cde4:	e0d2      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_N_ENGINE:	 	prevValue = (unsigned)*canData.n_engine;
 800cde6:	4b60      	ldr	r3, [pc, #384]	; (800cf68 <checkRangePlausi+0x268>)
 800cde8:	689b      	ldr	r3, [r3, #8]
 800cdea:	881b      	ldrh	r3, [r3, #0]
 800cdec:	60fb      	str	r3, [r7, #12]
								upperLimit=10000;
 800cdee:	f242 7310 	movw	r3, #10000	; 0x2710
 800cdf2:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	613b      	str	r3, [r7, #16]
								break;
 800cdf8:	e0c8      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_N_WHEEL_FL: 	prevValue = (unsigned)*canData.n_wheel_FL;
 800cdfa:	4b5b      	ldr	r3, [pc, #364]	; (800cf68 <checkRangePlausi+0x268>)
 800cdfc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ce00:	881b      	ldrh	r3, [r3, #0]
 800ce02:	60fb      	str	r3, [r7, #12]
								upperLimit=3840;
 800ce04:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800ce08:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	613b      	str	r3, [r7, #16]
								break;
 800ce0e:	e0bd      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_N_WHEEL_FR: 	prevValue = (unsigned)*canData.n_wheel_FR;
 800ce10:	4b55      	ldr	r3, [pc, #340]	; (800cf68 <checkRangePlausi+0x268>)
 800ce12:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ce16:	881b      	ldrh	r3, [r3, #0]
 800ce18:	60fb      	str	r3, [r7, #12]
								upperLimit=3840;
 800ce1a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800ce1e:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800ce20:	2300      	movs	r3, #0
 800ce22:	613b      	str	r3, [r7, #16]
								break;
 800ce24:	e0b2      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_N_WHEEL_RL: 	prevValue = (unsigned)*canData.n_wheel_RL;
 800ce26:	4b50      	ldr	r3, [pc, #320]	; (800cf68 <checkRangePlausi+0x268>)
 800ce28:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ce2c:	881b      	ldrh	r3, [r3, #0]
 800ce2e:	60fb      	str	r3, [r7, #12]
								upperLimit=3840;
 800ce30:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800ce34:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800ce36:	2300      	movs	r3, #0
 800ce38:	613b      	str	r3, [r7, #16]
								break;
 800ce3a:	e0a7      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_N_WHEEL_RR: 	prevValue = (unsigned)*canData.n_wheel_RR;
 800ce3c:	4b4a      	ldr	r3, [pc, #296]	; (800cf68 <checkRangePlausi+0x268>)
 800ce3e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800ce42:	881b      	ldrh	r3, [r3, #0]
 800ce44:	60fb      	str	r3, [r7, #12]
								upperLimit=3840;
 800ce46:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800ce4a:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	613b      	str	r3, [r7, #16]
								break;
 800ce50:	e09c      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_P_AIR_22:	 	prevValue = (unsigned)*canData.p_air_22;
 800ce52:	4b45      	ldr	r3, [pc, #276]	; (800cf68 <checkRangePlausi+0x268>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	60fb      	str	r3, [r7, #12]
								upperLimit=1000;
 800ce5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ce5e:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800ce60:	2300      	movs	r3, #0
 800ce62:	613b      	str	r3, [r7, #16]
								break;
 800ce64:	e092      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_P_AIR_22_DES: 	prevValue = (unsigned)*canData.AN5GearPos;
 800ce66:	4b40      	ldr	r3, [pc, #256]	; (800cf68 <checkRangePlausi+0x268>)
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	60fb      	str	r3, [r7, #12]
								upperLimit=1000;
 800ce6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ce72:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800ce74:	2300      	movs	r3, #0
 800ce76:	613b      	str	r3, [r7, #16]
								break;
 800ce78:	e088      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_P_BRAKE_F: 	prevValue = (unsigned)*canData.p_brake_F; //todo
 800ce7a:	4b3b      	ldr	r3, [pc, #236]	; (800cf68 <checkRangePlausi+0x268>)
 800ce7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce80:	881b      	ldrh	r3, [r3, #0]
 800ce82:	60fb      	str	r3, [r7, #12]
								upperLimit=32e3;
 800ce84:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ce88:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	613b      	str	r3, [r7, #16]
								break;
 800ce8e:	e07d      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_P_BRAKE_R: 	prevValue = (unsigned)*IOportData.p_brake_R;
 800ce90:	4b34      	ldr	r3, [pc, #208]	; (800cf64 <checkRangePlausi+0x264>)
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce98:	4610      	mov	r0, r2
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	f002 f87e 	bl	800ef9c <__aeabi_d2uiz>
 800cea0:	4603      	mov	r3, r0
 800cea2:	60fb      	str	r3, [r7, #12]
								upperLimit = 6000;
 800cea4:	f241 7370 	movw	r3, #6000	; 0x1770
 800cea8:	617b      	str	r3, [r7, #20]
								lowerLimit = 0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	613b      	str	r3, [r7, #16]
								break;
 800ceae:	e06d      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_STW_CLTUCH_MODE: 	prevValue = (unsigned)*canData.STW_clutch_mode; //todo
 800ceb0:	4b2d      	ldr	r3, [pc, #180]	; (800cf68 <checkRangePlausi+0x268>)
 800ceb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	60fb      	str	r3, [r7, #12]
									upperLimit = 32e3;
 800ceb8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cebc:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800cebe:	2300      	movs	r3, #0
 800cec0:	613b      	str	r3, [r7, #16]
									break;
 800cec2:	e063      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_MUE_TYRE:		 	prevValue = (unsigned)*canData.STW_mue_tyre;
 800cec4:	4b28      	ldr	r3, [pc, #160]	; (800cf68 <checkRangePlausi+0x268>)
 800cec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	60fb      	str	r3, [r7, #12]
									upperLimit = 100;
 800cece:	2364      	movs	r3, #100	; 0x64
 800ced0:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	613b      	str	r3, [r7, #16]
									break;
 800ced6:	e059      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_STW_SHIFT_DOWN_REQUEST: 	prevValue = (unsigned)*canData.STW_shift_down_request;
 800ced8:	4b23      	ldr	r3, [pc, #140]	; (800cf68 <checkRangePlausi+0x268>)
 800ceda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	60fb      	str	r3, [r7, #12]
											upperLimit = 1;
 800cee0:	2301      	movs	r3, #1
 800cee2:	617b      	str	r3, [r7, #20]
											lowerLimit = 0;
 800cee4:	2300      	movs	r3, #0
 800cee6:	613b      	str	r3, [r7, #16]
											break;
 800cee8:	e050      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_STW_SHIFT_UP_REQUEST: 	prevValue = (unsigned)*canData.STW_shift_up_request;
 800ceea:	4b1f      	ldr	r3, [pc, #124]	; (800cf68 <checkRangePlausi+0x268>)
 800ceec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	60fb      	str	r3, [r7, #12]
											upperLimit = 1;
 800cef2:	2301      	movs	r3, #1
 800cef4:	617b      	str	r3, [r7, #20]
											lowerLimit = 0;
 800cef6:	2300      	movs	r3, #0
 800cef8:	613b      	str	r3, [r7, #16]
											break;
 800cefa:	e047      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_T_WATER_ENGINE: 	prevValue = (unsigned)*canData.t_water_engine;
 800cefc:	4b1a      	ldr	r3, [pc, #104]	; (800cf68 <checkRangePlausi+0x268>)
 800cefe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	60fb      	str	r3, [r7, #12]
									upperLimit = 250;
 800cf04:	23fa      	movs	r3, #250	; 0xfa
 800cf06:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	613b      	str	r3, [r7, #16]
									break;
 800cf0c:	e03e      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_TRANSMISSION_MODE:	prevValue = (unsigned)*canData.t_water_engine;
 800cf0e:	4b16      	ldr	r3, [pc, #88]	; (800cf68 <checkRangePlausi+0x268>)
 800cf10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	60fb      	str	r3, [r7, #12]
									upperLimit = 250;
 800cf16:	23fa      	movs	r3, #250	; 0xfa
 800cf18:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	613b      	str	r3, [r7, #16]
									break;
 800cf1e:	e035      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_U_BAT:				prevValue = (unsigned)*IOportData.U_Bat;
 800cf20:	4b10      	ldr	r3, [pc, #64]	; (800cf64 <checkRangePlausi+0x264>)
 800cf22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf28:	4610      	mov	r0, r2
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	f002 f836 	bl	800ef9c <__aeabi_d2uiz>
 800cf30:	4603      	mov	r3, r0
 800cf32:	60fb      	str	r3, [r7, #12]
									upperLimit = 20000;
 800cf34:	f644 6320 	movw	r3, #20000	; 0x4e20
 800cf38:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	613b      	str	r3, [r7, #16]
									break;
 800cf3e:	e025      	b.n	800cf8c <checkRangePlausi+0x28c>
		case ERR_X_CLUTCH:			prevValue = (unsigned)*IOportData.x_clutch;
 800cf40:	4b08      	ldr	r3, [pc, #32]	; (800cf64 <checkRangePlausi+0x264>)
 800cf42:	68db      	ldr	r3, [r3, #12]
 800cf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf48:	4610      	mov	r0, r2
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	f002 f826 	bl	800ef9c <__aeabi_d2uiz>
 800cf50:	4603      	mov	r3, r0
 800cf52:	60fb      	str	r3, [r7, #12]
									upperLimit = 5000;
 800cf54:	f241 3388 	movw	r3, #5000	; 0x1388
 800cf58:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	613b      	str	r3, [r7, #16]
									break;
 800cf5e:	e015      	b.n	800cf8c <checkRangePlausi+0x28c>
 800cf60:	20000642 	.word	0x20000642
 800cf64:	200012c0 	.word	0x200012c0
 800cf68:	20001338 	.word	0x20001338
		case ERR_X_CLUTCH_STW:			prevValue = (unsigned)*IOportData.x_clutch_STW;
 800cf6c:	4b21      	ldr	r3, [pc, #132]	; (800cff4 <checkRangePlausi+0x2f4>)
 800cf6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf74:	4610      	mov	r0, r2
 800cf76:	4619      	mov	r1, r3
 800cf78:	f002 f810 	bl	800ef9c <__aeabi_d2uiz>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	60fb      	str	r3, [r7, #12]
										upperLimit = 5000;
 800cf80:	f241 3388 	movw	r3, #5000	; 0x1388
 800cf84:	617b      	str	r3, [r7, #20]
										lowerLimit = 0;
 800cf86:	2300      	movs	r3, #0
 800cf88:	613b      	str	r3, [r7, #16]
										break;
 800cf8a:	bf00      	nop
		}

		if(value >= lowerLimit && value <= upperLimit)
 800cf8c:	693a      	ldr	r2, [r7, #16]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d814      	bhi.n	800cfbe <checkRangePlausi+0x2be>
 800cf94:	697a      	ldr	r2, [r7, #20]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d310      	bcc.n	800cfbe <checkRangePlausi+0x2be>
		{
			setbitFalse((unsigned*)&canData.plausi_error, 2*(error_code-1));
 800cf9c:	78fb      	ldrb	r3, [r7, #3]
 800cf9e:	3b01      	subs	r3, #1
 800cfa0:	005b      	lsls	r3, r3, #1
 800cfa2:	4815      	ldr	r0, [pc, #84]	; (800cff8 <checkRangePlausi+0x2f8>)
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	f001 f92b 	bl	800e200 <setbitFalse>
			setbitFalse((unsigned*)&canData.plausi_error, 2*(error_code-1)+1);
 800cfaa:	78fb      	ldrb	r3, [r7, #3]
 800cfac:	3b01      	subs	r3, #1
 800cfae:	005b      	lsls	r3, r3, #1
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	4811      	ldr	r0, [pc, #68]	; (800cff8 <checkRangePlausi+0x2f8>)
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	f001 f923 	bl	800e200 <setbitFalse>
			return value;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	e016      	b.n	800cfec <checkRangePlausi+0x2ec>
		}
		else
		{
			if(value <= lowerLimit)
 800cfbe:	693a      	ldr	r2, [r7, #16]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d307      	bcc.n	800cfd6 <checkRangePlausi+0x2d6>
			{
				setbitTrue((unsigned*)&canData.plausi_error, 2*(error_code-1));
 800cfc6:	78fb      	ldrb	r3, [r7, #3]
 800cfc8:	3b01      	subs	r3, #1
 800cfca:	005b      	lsls	r3, r3, #1
 800cfcc:	480a      	ldr	r0, [pc, #40]	; (800cff8 <checkRangePlausi+0x2f8>)
 800cfce:	4619      	mov	r1, r3
 800cfd0:	f001 f8ee 	bl	800e1b0 <setbitTrue>
 800cfd4:	e007      	b.n	800cfe6 <checkRangePlausi+0x2e6>
			}
			else
			{
				setbitTrue((unsigned*)&canData.plausi_error, 2*(error_code-1)+1);
 800cfd6:	78fb      	ldrb	r3, [r7, #3]
 800cfd8:	3b01      	subs	r3, #1
 800cfda:	005b      	lsls	r3, r3, #1
 800cfdc:	3301      	adds	r3, #1
 800cfde:	4806      	ldr	r0, [pc, #24]	; (800cff8 <checkRangePlausi+0x2f8>)
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	f001 f8e5 	bl	800e1b0 <setbitTrue>
			}
			return prevValue;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	e000      	b.n	800cfec <checkRangePlausi+0x2ec>
		}
	}
	else
	{
		return value; //No Plausi Check
 800cfea:	687b      	ldr	r3, [r7, #4]
	}
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3718      	adds	r7, #24
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	200012c0 	.word	0x200012c0
 800cff8:	20001488 	.word	0x20001488

0800cffc <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	460b      	mov	r3, r1
 800d006:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d00c:	78fb      	ldrb	r3, [r7, #3]
 800d00e:	fa22 f303 	lsr.w	r3, r2, r3
 800d012:	f003 0301 	and.w	r3, r3, #1
}
 800d016:	4618      	mov	r0, r3
 800d018:	370c      	adds	r7, #12
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop

0800d024 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681a      	ldr	r2, [r3, #0]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	7c1b      	ldrb	r3, [r3, #16]
 800d034:	4610      	mov	r0, r2
 800d036:	4619      	mov	r1, r3
 800d038:	f7ff ffe0 	bl	800cffc <XMC_GPIO_GetInput>
 800d03c:	4603      	mov	r3, r0
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3708      	adds	r7, #8
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop

0800d048 <IOPort_ini>:
uint16_t busio_read;
extern boolean_T shiftDownInterrupt;
extern boolean_T shiftUpInterrupt;

void IOPort_ini()
{
 800d048:	b480      	push	{r7}
 800d04a:	af00      	add	r7, sp, #0
	//Inputs
	IOportData.Fans_dash_bit = (boolean_T*)&VCU_DW.VAR_IN_Fans_dash_bit;
 800d04c:	4b3c      	ldr	r3, [pc, #240]	; (800d140 <IOPort_ini+0xf8>)
 800d04e:	4a3d      	ldr	r2, [pc, #244]	; (800d144 <IOPort_ini+0xfc>)
 800d050:	601a      	str	r2, [r3, #0]
	IOportData.p_brake_R = &VCU_DW.VAR_IN_p_brake_R;
 800d052:	4b3b      	ldr	r3, [pc, #236]	; (800d140 <IOPort_ini+0xf8>)
 800d054:	4a3c      	ldr	r2, [pc, #240]	; (800d148 <IOPort_ini+0x100>)
 800d056:	605a      	str	r2, [r3, #4]
	//IOportData.p_pneum = &VCU_DW.VAR_IN_p_pneum;
	IOportData.x_clutch = &VCU_DW.VAR_IN_x_clutch;
 800d058:	4b39      	ldr	r3, [pc, #228]	; (800d140 <IOPort_ini+0xf8>)
 800d05a:	4a3c      	ldr	r2, [pc, #240]	; (800d14c <IOPort_ini+0x104>)
 800d05c:	60da      	str	r2, [r3, #12]
	IOportData.f_FL = &VCU_DW.VAR_IN_f_FL;
 800d05e:	4b38      	ldr	r3, [pc, #224]	; (800d140 <IOPort_ini+0xf8>)
 800d060:	4a3b      	ldr	r2, [pc, #236]	; (800d150 <IOPort_ini+0x108>)
 800d062:	611a      	str	r2, [r3, #16]
	IOportData.f_FR = &VCU_DW.VAR_IN_f_FR;
 800d064:	4b36      	ldr	r3, [pc, #216]	; (800d140 <IOPort_ini+0xf8>)
 800d066:	4a3b      	ldr	r2, [pc, #236]	; (800d154 <IOPort_ini+0x10c>)
 800d068:	615a      	str	r2, [r3, #20]
	IOportData.f_RL = &VCU_DW.VAR_IN_f_RL;
 800d06a:	4b35      	ldr	r3, [pc, #212]	; (800d140 <IOPort_ini+0xf8>)
 800d06c:	4a3a      	ldr	r2, [pc, #232]	; (800d158 <IOPort_ini+0x110>)
 800d06e:	619a      	str	r2, [r3, #24]
	IOportData.f_RR = &VCU_DW.VAR_IN_f_RR;
 800d070:	4b33      	ldr	r3, [pc, #204]	; (800d140 <IOPort_ini+0xf8>)
 800d072:	4a3a      	ldr	r2, [pc, #232]	; (800d15c <IOPort_ini+0x114>)
 800d074:	61da      	str	r2, [r3, #28]
	IOportData.LC_dash_bit = (boolean_T*)&VCU_DW.VAR_IN_LC_dash_bit;
 800d076:	4b32      	ldr	r3, [pc, #200]	; (800d140 <IOPort_ini+0xf8>)
 800d078:	4a39      	ldr	r2, [pc, #228]	; (800d160 <IOPort_ini+0x118>)
 800d07a:	621a      	str	r2, [r3, #32]
	IOportData.x_RH_F = &VCU_DW.VAR_IN_x_RH_F;
 800d07c:	4b30      	ldr	r3, [pc, #192]	; (800d140 <IOPort_ini+0xf8>)
 800d07e:	4a39      	ldr	r2, [pc, #228]	; (800d164 <IOPort_ini+0x11c>)
 800d080:	625a      	str	r2, [r3, #36]	; 0x24
	IOportData.x_RH_RL = &VCU_DW.VAR_IN_x_RH_RL;
 800d082:	4b2f      	ldr	r3, [pc, #188]	; (800d140 <IOPort_ini+0xf8>)
 800d084:	4a38      	ldr	r2, [pc, #224]	; (800d168 <IOPort_ini+0x120>)
 800d086:	629a      	str	r2, [r3, #40]	; 0x28
	IOportData.x_RH_RR = &VCU_DW.VAR_IN_x_RH_RR;
 800d088:	4b2d      	ldr	r3, [pc, #180]	; (800d140 <IOPort_ini+0xf8>)
 800d08a:	4a38      	ldr	r2, [pc, #224]	; (800d16c <IOPort_ini+0x124>)
 800d08c:	62da      	str	r2, [r3, #44]	; 0x2c
	IOportData.U_Bat = &VCU_DW.VAR_IN_U_Bat;
 800d08e:	4b2c      	ldr	r3, [pc, #176]	; (800d140 <IOPort_ini+0xf8>)
 800d090:	4a37      	ldr	r2, [pc, #220]	; (800d170 <IOPort_ini+0x128>)
 800d092:	631a      	str	r2, [r3, #48]	; 0x30
	IOportData.x_clutch_STW = &VCU_DW.VAR_IN_x_clutch_STW;
 800d094:	4b2a      	ldr	r3, [pc, #168]	; (800d140 <IOPort_ini+0xf8>)
 800d096:	4a37      	ldr	r2, [pc, #220]	; (800d174 <IOPort_ini+0x12c>)
 800d098:	635a      	str	r2, [r3, #52]	; 0x34
	VAR_boardTemp = 0; IOportData.boardTemp = &VAR_boardTemp;
 800d09a:	4937      	ldr	r1, [pc, #220]	; (800d178 <IOPort_ini+0x130>)
 800d09c:	f04f 0200 	mov.w	r2, #0
 800d0a0:	f04f 0300 	mov.w	r3, #0
 800d0a4:	e9c1 2300 	strd	r2, r3, [r1]
 800d0a8:	4b25      	ldr	r3, [pc, #148]	; (800d140 <IOPort_ini+0xf8>)
 800d0aa:	4a33      	ldr	r2, [pc, #204]	; (800d178 <IOPort_ini+0x130>)
 800d0ac:	639a      	str	r2, [r3, #56]	; 0x38
	VAR_TR1_VSense_WP = 0; IOportData.TR1_VSense_WP = &VAR_TR1_VSense_WP;
 800d0ae:	4933      	ldr	r1, [pc, #204]	; (800d17c <IOPort_ini+0x134>)
 800d0b0:	f04f 0200 	mov.w	r2, #0
 800d0b4:	f04f 0300 	mov.w	r3, #0
 800d0b8:	e9c1 2300 	strd	r2, r3, [r1]
 800d0bc:	4b20      	ldr	r3, [pc, #128]	; (800d140 <IOPort_ini+0xf8>)
 800d0be:	4a2f      	ldr	r2, [pc, #188]	; (800d17c <IOPort_ini+0x134>)
 800d0c0:	63da      	str	r2, [r3, #60]	; 0x3c
	VAR_TR2_VSense_FAN1 = 0; IOportData.TR2_VSense_FAN1 = &VAR_TR2_VSense_FAN1;
 800d0c2:	492f      	ldr	r1, [pc, #188]	; (800d180 <IOPort_ini+0x138>)
 800d0c4:	f04f 0200 	mov.w	r2, #0
 800d0c8:	f04f 0300 	mov.w	r3, #0
 800d0cc:	e9c1 2300 	strd	r2, r3, [r1]
 800d0d0:	4b1b      	ldr	r3, [pc, #108]	; (800d140 <IOPort_ini+0xf8>)
 800d0d2:	4a2b      	ldr	r2, [pc, #172]	; (800d180 <IOPort_ini+0x138>)
 800d0d4:	641a      	str	r2, [r3, #64]	; 0x40
	VAR_TR3_VSense_FAN2 = 0; IOportData.TR3_VSense_FAN2 = &VAR_TR3_VSense_FAN2;
 800d0d6:	492b      	ldr	r1, [pc, #172]	; (800d184 <IOPort_ini+0x13c>)
 800d0d8:	f04f 0200 	mov.w	r2, #0
 800d0dc:	f04f 0300 	mov.w	r3, #0
 800d0e0:	e9c1 2300 	strd	r2, r3, [r1]
 800d0e4:	4b16      	ldr	r3, [pc, #88]	; (800d140 <IOPort_ini+0xf8>)
 800d0e6:	4a27      	ldr	r2, [pc, #156]	; (800d184 <IOPort_ini+0x13c>)
 800d0e8:	645a      	str	r2, [r3, #68]	; 0x44

	//Outputs
	IOportData.VOVG_ShiftUp = &VCU_DW.VAR_OUT_VOVG_ShiftUp;
 800d0ea:	4b15      	ldr	r3, [pc, #84]	; (800d140 <IOPort_ini+0xf8>)
 800d0ec:	4a26      	ldr	r2, [pc, #152]	; (800d188 <IOPort_ini+0x140>)
 800d0ee:	649a      	str	r2, [r3, #72]	; 0x48
	IOportData.VOVG_ShiftDown = &VCU_DW.VAR_OUT_VOVG_ShiftDown;
 800d0f0:	4b13      	ldr	r3, [pc, #76]	; (800d140 <IOPort_ini+0xf8>)
 800d0f2:	4a26      	ldr	r2, [pc, #152]	; (800d18c <IOPort_ini+0x144>)
 800d0f4:	64da      	str	r2, [r3, #76]	; 0x4c
	IOportData.Ignition_Cut = &VCU_DW.VAR_OUT_Ignition_Cut;
 800d0f6:	4b12      	ldr	r3, [pc, #72]	; (800d140 <IOPort_ini+0xf8>)
 800d0f8:	4a25      	ldr	r2, [pc, #148]	; (800d190 <IOPort_ini+0x148>)
 800d0fa:	651a      	str	r2, [r3, #80]	; 0x50
	IOportData.VOVG_IN = &VCU_DW.VAR_OUT_VOVG_IN;
 800d0fc:	4b10      	ldr	r3, [pc, #64]	; (800d140 <IOPort_ini+0xf8>)
 800d0fe:	4a25      	ldr	r2, [pc, #148]	; (800d194 <IOPort_ini+0x14c>)
 800d100:	655a      	str	r2, [r3, #84]	; 0x54
	IOportData.VOVG_OUT = &VCU_DW.VAR_OUT_VOVG_OUT;
 800d102:	4b0f      	ldr	r3, [pc, #60]	; (800d140 <IOPort_ini+0xf8>)
 800d104:	4a24      	ldr	r2, [pc, #144]	; (800d198 <IOPort_ini+0x150>)
 800d106:	659a      	str	r2, [r3, #88]	; 0x58
	IOportData.MHJ9_IN = (uint16_t*)&VCU_DW.VAR_OUT_MHJ9_IN; //PWM
 800d108:	4b0d      	ldr	r3, [pc, #52]	; (800d140 <IOPort_ini+0xf8>)
 800d10a:	4a24      	ldr	r2, [pc, #144]	; (800d19c <IOPort_ini+0x154>)
 800d10c:	65da      	str	r2, [r3, #92]	; 0x5c
	IOportData.MHJ9_OUT = (uint16_t*)&VCU_DW.VAR_OUT_MHJ9_OUT; //PWM
 800d10e:	4b0c      	ldr	r3, [pc, #48]	; (800d140 <IOPort_ini+0xf8>)
 800d110:	4a23      	ldr	r2, [pc, #140]	; (800d1a0 <IOPort_ini+0x158>)
 800d112:	661a      	str	r2, [r3, #96]	; 0x60
	IOportData.Brakelight = &VCU_DW.VAR_OUT_Brakelight;
 800d114:	4b0a      	ldr	r3, [pc, #40]	; (800d140 <IOPort_ini+0xf8>)
 800d116:	4a23      	ldr	r2, [pc, #140]	; (800d1a4 <IOPort_ini+0x15c>)
 800d118:	665a      	str	r2, [r3, #100]	; 0x64
	IOportData.Waterpump_PWM_active = &VCU_DW.VAR_OUT_Waterpump_PWM_active;
 800d11a:	4b09      	ldr	r3, [pc, #36]	; (800d140 <IOPort_ini+0xf8>)
 800d11c:	4a22      	ldr	r2, [pc, #136]	; (800d1a8 <IOPort_ini+0x160>)
 800d11e:	669a      	str	r2, [r3, #104]	; 0x68
	IOportData.Fans1_PWM_active = &VCU_DW.VAR_OUT_Fans1_PWM_active;
 800d120:	4b07      	ldr	r3, [pc, #28]	; (800d140 <IOPort_ini+0xf8>)
 800d122:	4a22      	ldr	r2, [pc, #136]	; (800d1ac <IOPort_ini+0x164>)
 800d124:	66da      	str	r2, [r3, #108]	; 0x6c
	IOportData.Fans2_PWM_active = &VCU_DW.VAR_OUT_Fans2_PWM_active;
 800d126:	4b06      	ldr	r3, [pc, #24]	; (800d140 <IOPort_ini+0xf8>)
 800d128:	4a21      	ldr	r2, [pc, #132]	; (800d1b0 <IOPort_ini+0x168>)
 800d12a:	671a      	str	r2, [r3, #112]	; 0x70

	output_pins = 0;
 800d12c:	4b21      	ldr	r3, [pc, #132]	; (800d1b4 <IOPort_ini+0x16c>)
 800d12e:	2200      	movs	r2, #0
 800d130:	601a      	str	r2, [r3, #0]
	busio_read = 0;
 800d132:	4b21      	ldr	r3, [pc, #132]	; (800d1b8 <IOPort_ini+0x170>)
 800d134:	2200      	movs	r2, #0
 800d136:	801a      	strh	r2, [r3, #0]
}
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr
 800d140:	200012c0 	.word	0x200012c0
 800d144:	20001090 	.word	0x20001090
 800d148:	20001098 	.word	0x20001098
 800d14c:	200010b8 	.word	0x200010b8
 800d150:	200010c0 	.word	0x200010c0
 800d154:	200010c8 	.word	0x200010c8
 800d158:	200010d0 	.word	0x200010d0
 800d15c:	200010d8 	.word	0x200010d8
 800d160:	200010e0 	.word	0x200010e0
 800d164:	200010e8 	.word	0x200010e8
 800d168:	200010a0 	.word	0x200010a0
 800d16c:	200010a8 	.word	0x200010a8
 800d170:	200010b0 	.word	0x200010b0
 800d174:	20001088 	.word	0x20001088
 800d178:	20001268 	.word	0x20001268
 800d17c:	20001258 	.word	0x20001258
 800d180:	20001278 	.word	0x20001278
 800d184:	20001248 	.word	0x20001248
 800d188:	2000119f 	.word	0x2000119f
 800d18c:	200011a0 	.word	0x200011a0
 800d190:	200011a2 	.word	0x200011a2
 800d194:	200011a3 	.word	0x200011a3
 800d198:	200011a4 	.word	0x200011a4
 800d19c:	2000110c 	.word	0x2000110c
 800d1a0:	2000110e 	.word	0x2000110e
 800d1a4:	200011a5 	.word	0x200011a5
 800d1a8:	20001110 	.word	0x20001110
 800d1ac:	20001112 	.word	0x20001112
 800d1b0:	2000110a 	.word	0x2000110a
 800d1b4:	200012b8 	.word	0x200012b8
 800d1b8:	200012bc 	.word	0x200012bc

0800d1bc <IOPort_setDOUTS>:

void IOPort_setDOUTS()
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	af00      	add	r7, sp, #0
	if(canData.ManualControl_Active) //set manual values if controlled by CANoe
 800d1c0:	4b14      	ldr	r3, [pc, #80]	; (800d214 <IOPort_setDOUTS+0x58>)
 800d1c2:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d001      	beq.n	800d1ce <IOPort_setDOUTS+0x12>
	{
		ManualControl_setDOUTS();
 800d1ca:	f000 fad7 	bl	800d77c <ManualControl_setDOUTS>
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
 800d1ce:	4b12      	ldr	r3, [pc, #72]	; (800d218 <IOPort_setDOUTS+0x5c>)
 800d1d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	461a      	mov	r2, r3
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
 800d1d6:	4b10      	ldr	r3, [pc, #64]	; (800d218 <IOPort_setDOUTS+0x5c>)
 800d1d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	005b      	lsls	r3, r3, #1
	if(canData.ManualControl_Active) //set manual values if controlled by CANoe
	{
		ManualControl_setDOUTS();
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
 800d1de:	431a      	orrs	r2, r3
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
					(*IOportData.Ignition_Cut << 2) |
 800d1e0:	4b0d      	ldr	r3, [pc, #52]	; (800d218 <IOPort_setDOUTS+0x5c>)
 800d1e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	009b      	lsls	r3, r3, #2
	{
		ManualControl_setDOUTS();
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
 800d1e8:	431a      	orrs	r2, r3
					(*IOportData.Ignition_Cut << 2) |
					(*IOportData.VOVG_IN << 3) |
 800d1ea:	4b0b      	ldr	r3, [pc, #44]	; (800d218 <IOPort_setDOUTS+0x5c>)
 800d1ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	00db      	lsls	r3, r3, #3
		ManualControl_setDOUTS();
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
					(*IOportData.Ignition_Cut << 2) |
 800d1f2:	431a      	orrs	r2, r3
					(*IOportData.VOVG_IN << 3) |
					(*IOportData.VOVG_OUT << 4);
 800d1f4:	4b08      	ldr	r3, [pc, #32]	; (800d218 <IOPort_setDOUTS+0x5c>)
 800d1f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	011b      	lsls	r3, r3, #4
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
					(*IOportData.Ignition_Cut << 2) |
					(*IOportData.VOVG_IN << 3) |
 800d1fc:	4313      	orrs	r3, r2
	if(canData.ManualControl_Active) //set manual values if controlled by CANoe
	{
		ManualControl_setDOUTS();
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
 800d1fe:	4a07      	ldr	r2, [pc, #28]	; (800d21c <IOPort_setDOUTS+0x60>)
 800d200:	6013      	str	r3, [r2, #0]
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
					(*IOportData.Ignition_Cut << 2) |
					(*IOportData.VOVG_IN << 3) |
					(*IOportData.VOVG_OUT << 4);

	  BUS_IO_Write(&BUS_IO, (uint8_t) output_pins);
 800d202:	4b06      	ldr	r3, [pc, #24]	; (800d21c <IOPort_setDOUTS+0x60>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	b2db      	uxtb	r3, r3
 800d208:	b29b      	uxth	r3, r3
 800d20a:	4805      	ldr	r0, [pc, #20]	; (800d220 <IOPort_setDOUTS+0x64>)
 800d20c:	4619      	mov	r1, r3
 800d20e:	f7fe f9d7 	bl	800b5c0 <BUS_IO_Write>
}
 800d212:	bd80      	pop	{r7, pc}
 800d214:	20001338 	.word	0x20001338
 800d218:	200012c0 	.word	0x200012c0
 800d21c:	200012b8 	.word	0x200012b8
 800d220:	20000470 	.word	0x20000470

0800d224 <IOPort_readDINS>:

void IOPort_readDINS()
{
 800d224:	b598      	push	{r3, r4, r7, lr}
 800d226:	af00      	add	r7, sp, #0
	busio_read = BUS_IO_Read(&BUS_IO_Input);
 800d228:	4814      	ldr	r0, [pc, #80]	; (800d27c <IOPort_readDINS+0x58>)
 800d22a:	f7fe f99b 	bl	800b564 <BUS_IO_Read>
 800d22e:	4603      	mov	r3, r0
 800d230:	461a      	mov	r2, r3
 800d232:	4b13      	ldr	r3, [pc, #76]	; (800d280 <IOPort_readDINS+0x5c>)
 800d234:	801a      	strh	r2, [r3, #0]
	*IOportData.Fans_dash_bit = checkRangePlausi(getbits(busio_read, 1, 1),ERR_FANS_DASH_BIT);
 800d236:	4b13      	ldr	r3, [pc, #76]	; (800d284 <IOPort_readDINS+0x60>)
 800d238:	681c      	ldr	r4, [r3, #0]
 800d23a:	4b11      	ldr	r3, [pc, #68]	; (800d280 <IOPort_readDINS+0x5c>)
 800d23c:	881b      	ldrh	r3, [r3, #0]
 800d23e:	4618      	mov	r0, r3
 800d240:	2101      	movs	r1, #1
 800d242:	2201      	movs	r2, #1
 800d244:	f000 ff5e 	bl	800e104 <getbits>
 800d248:	4603      	mov	r3, r0
 800d24a:	4618      	mov	r0, r3
 800d24c:	2101      	movs	r1, #1
 800d24e:	f7ff fd57 	bl	800cd00 <checkRangePlausi>
 800d252:	4603      	mov	r3, r0
 800d254:	b2db      	uxtb	r3, r3
 800d256:	7023      	strb	r3, [r4, #0]
	*IOportData.LC_dash_bit = checkRangePlausi(getbits(busio_read, 0, 1),ERR_LC_DASH_BIT);
 800d258:	4b0a      	ldr	r3, [pc, #40]	; (800d284 <IOPort_readDINS+0x60>)
 800d25a:	6a1c      	ldr	r4, [r3, #32]
 800d25c:	4b08      	ldr	r3, [pc, #32]	; (800d280 <IOPort_readDINS+0x5c>)
 800d25e:	881b      	ldrh	r3, [r3, #0]
 800d260:	4618      	mov	r0, r3
 800d262:	2100      	movs	r1, #0
 800d264:	2201      	movs	r2, #1
 800d266:	f000 ff4d 	bl	800e104 <getbits>
 800d26a:	4603      	mov	r3, r0
 800d26c:	4618      	mov	r0, r3
 800d26e:	2105      	movs	r1, #5
 800d270:	f7ff fd46 	bl	800cd00 <checkRangePlausi>
 800d274:	4603      	mov	r3, r0
 800d276:	b2db      	uxtb	r3, r3
 800d278:	7023      	strb	r3, [r4, #0]
}
 800d27a:	bd98      	pop	{r3, r4, r7, pc}
 800d27c:	20000484 	.word	0x20000484
 800d280:	200012bc 	.word	0x200012bc
 800d284:	200012c0 	.word	0x200012c0

0800d288 <IOPort_setPWMOUTS>:

void IOPort_setPWMOUTS()
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	af00      	add	r7, sp, #0
	if(canData.ManualControl_Active) //set manual values if controlled by CANoe
 800d28c:	4b3a      	ldr	r3, [pc, #232]	; (800d378 <IOPort_setPWMOUTS+0xf0>)
 800d28e:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800d292:	2b00      	cmp	r3, #0
 800d294:	d001      	beq.n	800d29a <IOPort_setPWMOUTS+0x12>
	{
		ManualControl_setPWMOUTS();
 800d296:	f000 fab3 	bl	800d800 <ManualControl_setPWMOUTS>
	}
	//set calculated values if controlled by VCU
	//setMHJ9Freq();
	PWM_SetDutyCycle(&PWM_MHJ9_IN, (float)*IOportData.MHJ9_IN/65536*10000);//100% = 10000, var_max = 65536
 800d29a:	4b38      	ldr	r3, [pc, #224]	; (800d37c <IOPort_setPWMOUTS+0xf4>)
 800d29c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d29e:	881b      	ldrh	r3, [r3, #0]
 800d2a0:	ee07 3a90 	vmov	s15, r3
 800d2a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2a8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800d380 <IOPort_setPWMOUTS+0xf8>
 800d2ac:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d2b0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d384 <IOPort_setPWMOUTS+0xfc>
 800d2b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d2b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2bc:	4832      	ldr	r0, [pc, #200]	; (800d388 <IOPort_setPWMOUTS+0x100>)
 800d2be:	ee17 1a90 	vmov	r1, s15
 800d2c2:	f7fa ff73 	bl	80081ac <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_MHJ9_OUT, (float)*IOportData.MHJ9_OUT/65536*10000);
 800d2c6:	4b2d      	ldr	r3, [pc, #180]	; (800d37c <IOPort_setPWMOUTS+0xf4>)
 800d2c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2ca:	881b      	ldrh	r3, [r3, #0]
 800d2cc:	ee07 3a90 	vmov	s15, r3
 800d2d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2d4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d380 <IOPort_setPWMOUTS+0xf8>
 800d2d8:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d2dc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800d384 <IOPort_setPWMOUTS+0xfc>
 800d2e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d2e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2e8:	4828      	ldr	r0, [pc, #160]	; (800d38c <IOPort_setPWMOUTS+0x104>)
 800d2ea:	ee17 1a90 	vmov	r1, s15
 800d2ee:	f7fa ff5d 	bl	80081ac <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_Waterpump, (float)*IOportData.Waterpump_PWM_active/65536*10000);
 800d2f2:	4b22      	ldr	r3, [pc, #136]	; (800d37c <IOPort_setPWMOUTS+0xf4>)
 800d2f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2f6:	881b      	ldrh	r3, [r3, #0]
 800d2f8:	ee07 3a90 	vmov	s15, r3
 800d2fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d300:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d380 <IOPort_setPWMOUTS+0xf8>
 800d304:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d308:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800d384 <IOPort_setPWMOUTS+0xfc>
 800d30c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d314:	481e      	ldr	r0, [pc, #120]	; (800d390 <IOPort_setPWMOUTS+0x108>)
 800d316:	ee17 1a90 	vmov	r1, s15
 800d31a:	f7fa ff47 	bl	80081ac <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_Fans1, (float)*IOportData.Fans1_PWM_active/65536*10000);
 800d31e:	4b17      	ldr	r3, [pc, #92]	; (800d37c <IOPort_setPWMOUTS+0xf4>)
 800d320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d322:	881b      	ldrh	r3, [r3, #0]
 800d324:	ee07 3a90 	vmov	s15, r3
 800d328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d32c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800d380 <IOPort_setPWMOUTS+0xf8>
 800d330:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d334:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800d384 <IOPort_setPWMOUTS+0xfc>
 800d338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d33c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d340:	4814      	ldr	r0, [pc, #80]	; (800d394 <IOPort_setPWMOUTS+0x10c>)
 800d342:	ee17 1a90 	vmov	r1, s15
 800d346:	f7fa ff31 	bl	80081ac <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_Fans2, (float)*IOportData.Fans2_PWM_active/65536*10000);
 800d34a:	4b0c      	ldr	r3, [pc, #48]	; (800d37c <IOPort_setPWMOUTS+0xf4>)
 800d34c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d34e:	881b      	ldrh	r3, [r3, #0]
 800d350:	ee07 3a90 	vmov	s15, r3
 800d354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d358:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800d380 <IOPort_setPWMOUTS+0xf8>
 800d35c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d360:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800d384 <IOPort_setPWMOUTS+0xfc>
 800d364:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d36c:	480a      	ldr	r0, [pc, #40]	; (800d398 <IOPort_setPWMOUTS+0x110>)
 800d36e:	ee17 1a90 	vmov	r1, s15
 800d372:	f7fa ff1b 	bl	80081ac <PWM_SetDutyCycle>
	//PWM_SetFreq(&PWM_Fans1, 1000);//TEST
	//PWM_SetDutyCycle(&PWM_Fans1, 5000);//TEST
}
 800d376:	bd80      	pop	{r7, pc}
 800d378:	20001338 	.word	0x20001338
 800d37c:	200012c0 	.word	0x200012c0
 800d380:	47800000 	.word	0x47800000
 800d384:	461c4000 	.word	0x461c4000
 800d388:	20000014 	.word	0x20000014
 800d38c:	20000048 	.word	0x20000048
 800d390:	2000007c 	.word	0x2000007c
 800d394:	200000b0 	.word	0x200000b0
 800d398:	200000e4 	.word	0x200000e4
 800d39c:	00000000 	.word	0x00000000

0800d3a0 <IOPort_readAINS>:

void IOPort_readAINS()
{
 800d3a0:	b598      	push	{r3, r4, r7, lr}
 800d3a2:	af00      	add	r7, sp, #0
	*IOportData.x_clutch_STW = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A)/4095.0*5*1000; //5V = 4095
 800d3a4:	4bd4      	ldr	r3, [pc, #848]	; (800d6f8 <IOPort_readAINS+0x358>)
 800d3a6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800d3a8:	48d4      	ldr	r0, [pc, #848]	; (800d6fc <IOPort_readAINS+0x35c>)
 800d3aa:	f7fe fae9 	bl	800b980 <ADC_MEASUREMENT_GetResult>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f001 faf3 	bl	800e99c <__aeabi_i2d>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	4610      	mov	r0, r2
 800d3bc:	4619      	mov	r1, r3
 800d3be:	a3c8      	add	r3, pc, #800	; (adr r3, 800d6e0 <IOPort_readAINS+0x340>)
 800d3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c4:	f001 fc7a 	bl	800ecbc <__aeabi_ddiv>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	4610      	mov	r0, r2
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	f04f 0200 	mov.w	r2, #0
 800d3d4:	4bca      	ldr	r3, [pc, #808]	; (800d700 <IOPort_readAINS+0x360>)
 800d3d6:	f001 fb47 	bl	800ea68 <__aeabi_dmul>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	460b      	mov	r3, r1
 800d3de:	4610      	mov	r0, r2
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	f04f 0200 	mov.w	r2, #0
 800d3e6:	4bc7      	ldr	r3, [pc, #796]	; (800d704 <IOPort_readAINS+0x364>)
 800d3e8:	f001 fb3e 	bl	800ea68 <__aeabi_dmul>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.U_Bat = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_B)/4095.0*14.8*1000;
 800d3f4:	4bc0      	ldr	r3, [pc, #768]	; (800d6f8 <IOPort_readAINS+0x358>)
 800d3f6:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800d3f8:	48c3      	ldr	r0, [pc, #780]	; (800d708 <IOPort_readAINS+0x368>)
 800d3fa:	f7fe fac1 	bl	800b980 <ADC_MEASUREMENT_GetResult>
 800d3fe:	4603      	mov	r3, r0
 800d400:	4618      	mov	r0, r3
 800d402:	f001 facb 	bl	800e99c <__aeabi_i2d>
 800d406:	4602      	mov	r2, r0
 800d408:	460b      	mov	r3, r1
 800d40a:	4610      	mov	r0, r2
 800d40c:	4619      	mov	r1, r3
 800d40e:	a3b4      	add	r3, pc, #720	; (adr r3, 800d6e0 <IOPort_readAINS+0x340>)
 800d410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d414:	f001 fc52 	bl	800ecbc <__aeabi_ddiv>
 800d418:	4602      	mov	r2, r0
 800d41a:	460b      	mov	r3, r1
 800d41c:	4610      	mov	r0, r2
 800d41e:	4619      	mov	r1, r3
 800d420:	a3b1      	add	r3, pc, #708	; (adr r3, 800d6e8 <IOPort_readAINS+0x348>)
 800d422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d426:	f001 fb1f 	bl	800ea68 <__aeabi_dmul>
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	4610      	mov	r0, r2
 800d430:	4619      	mov	r1, r3
 800d432:	f04f 0200 	mov.w	r2, #0
 800d436:	4bb3      	ldr	r3, [pc, #716]	; (800d704 <IOPort_readAINS+0x364>)
 800d438:	f001 fb16 	bl	800ea68 <__aeabi_dmul>
 800d43c:	4602      	mov	r2, r0
 800d43e:	460b      	mov	r3, r1
 800d440:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.x_RH_F = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_C)/4095.0*12*1000;
 800d444:	4bac      	ldr	r3, [pc, #688]	; (800d6f8 <IOPort_readAINS+0x358>)
 800d446:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d448:	48b0      	ldr	r0, [pc, #704]	; (800d70c <IOPort_readAINS+0x36c>)
 800d44a:	f7fe fa99 	bl	800b980 <ADC_MEASUREMENT_GetResult>
 800d44e:	4603      	mov	r3, r0
 800d450:	4618      	mov	r0, r3
 800d452:	f001 faa3 	bl	800e99c <__aeabi_i2d>
 800d456:	4602      	mov	r2, r0
 800d458:	460b      	mov	r3, r1
 800d45a:	4610      	mov	r0, r2
 800d45c:	4619      	mov	r1, r3
 800d45e:	a3a0      	add	r3, pc, #640	; (adr r3, 800d6e0 <IOPort_readAINS+0x340>)
 800d460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d464:	f001 fc2a 	bl	800ecbc <__aeabi_ddiv>
 800d468:	4602      	mov	r2, r0
 800d46a:	460b      	mov	r3, r1
 800d46c:	4610      	mov	r0, r2
 800d46e:	4619      	mov	r1, r3
 800d470:	f04f 0200 	mov.w	r2, #0
 800d474:	4ba6      	ldr	r3, [pc, #664]	; (800d710 <IOPort_readAINS+0x370>)
 800d476:	f001 faf7 	bl	800ea68 <__aeabi_dmul>
 800d47a:	4602      	mov	r2, r0
 800d47c:	460b      	mov	r3, r1
 800d47e:	4610      	mov	r0, r2
 800d480:	4619      	mov	r1, r3
 800d482:	f04f 0200 	mov.w	r2, #0
 800d486:	4b9f      	ldr	r3, [pc, #636]	; (800d704 <IOPort_readAINS+0x364>)
 800d488:	f001 faee 	bl	800ea68 <__aeabi_dmul>
 800d48c:	4602      	mov	r2, r0
 800d48e:	460b      	mov	r3, r1
 800d490:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.f_FR = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_D)/4095.0*5*1000;
 800d494:	4b98      	ldr	r3, [pc, #608]	; (800d6f8 <IOPort_readAINS+0x358>)
 800d496:	695c      	ldr	r4, [r3, #20]
 800d498:	489e      	ldr	r0, [pc, #632]	; (800d714 <IOPort_readAINS+0x374>)
 800d49a:	f7fe fa71 	bl	800b980 <ADC_MEASUREMENT_GetResult>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f001 fa7b 	bl	800e99c <__aeabi_i2d>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	4610      	mov	r0, r2
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	a38c      	add	r3, pc, #560	; (adr r3, 800d6e0 <IOPort_readAINS+0x340>)
 800d4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b4:	f001 fc02 	bl	800ecbc <__aeabi_ddiv>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	4610      	mov	r0, r2
 800d4be:	4619      	mov	r1, r3
 800d4c0:	f04f 0200 	mov.w	r2, #0
 800d4c4:	4b8e      	ldr	r3, [pc, #568]	; (800d700 <IOPort_readAINS+0x360>)
 800d4c6:	f001 facf 	bl	800ea68 <__aeabi_dmul>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	4610      	mov	r0, r2
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	f04f 0200 	mov.w	r2, #0
 800d4d6:	4b8b      	ldr	r3, [pc, #556]	; (800d704 <IOPort_readAINS+0x364>)
 800d4d8:	f001 fac6 	bl	800ea68 <__aeabi_dmul>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	460b      	mov	r3, r1
 800d4e0:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.f_FL = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_E)/4095.0*5*1000;
 800d4e4:	4b84      	ldr	r3, [pc, #528]	; (800d6f8 <IOPort_readAINS+0x358>)
 800d4e6:	691c      	ldr	r4, [r3, #16]
 800d4e8:	488b      	ldr	r0, [pc, #556]	; (800d718 <IOPort_readAINS+0x378>)
 800d4ea:	f7fe fa49 	bl	800b980 <ADC_MEASUREMENT_GetResult>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f001 fa53 	bl	800e99c <__aeabi_i2d>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	4610      	mov	r0, r2
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	a378      	add	r3, pc, #480	; (adr r3, 800d6e0 <IOPort_readAINS+0x340>)
 800d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d504:	f001 fbda 	bl	800ecbc <__aeabi_ddiv>
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	4610      	mov	r0, r2
 800d50e:	4619      	mov	r1, r3
 800d510:	f04f 0200 	mov.w	r2, #0
 800d514:	4b7a      	ldr	r3, [pc, #488]	; (800d700 <IOPort_readAINS+0x360>)
 800d516:	f001 faa7 	bl	800ea68 <__aeabi_dmul>
 800d51a:	4602      	mov	r2, r0
 800d51c:	460b      	mov	r3, r1
 800d51e:	4610      	mov	r0, r2
 800d520:	4619      	mov	r1, r3
 800d522:	f04f 0200 	mov.w	r2, #0
 800d526:	4b77      	ldr	r3, [pc, #476]	; (800d704 <IOPort_readAINS+0x364>)
 800d528:	f001 fa9e 	bl	800ea68 <__aeabi_dmul>
 800d52c:	4602      	mov	r2, r0
 800d52e:	460b      	mov	r3, r1
 800d530:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.x_clutch = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_F)/4095.0*5*1000;
 800d534:	4b70      	ldr	r3, [pc, #448]	; (800d6f8 <IOPort_readAINS+0x358>)
 800d536:	68dc      	ldr	r4, [r3, #12]
 800d538:	4878      	ldr	r0, [pc, #480]	; (800d71c <IOPort_readAINS+0x37c>)
 800d53a:	f7fe fa21 	bl	800b980 <ADC_MEASUREMENT_GetResult>
 800d53e:	4603      	mov	r3, r0
 800d540:	4618      	mov	r0, r3
 800d542:	f001 fa2b 	bl	800e99c <__aeabi_i2d>
 800d546:	4602      	mov	r2, r0
 800d548:	460b      	mov	r3, r1
 800d54a:	4610      	mov	r0, r2
 800d54c:	4619      	mov	r1, r3
 800d54e:	a364      	add	r3, pc, #400	; (adr r3, 800d6e0 <IOPort_readAINS+0x340>)
 800d550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d554:	f001 fbb2 	bl	800ecbc <__aeabi_ddiv>
 800d558:	4602      	mov	r2, r0
 800d55a:	460b      	mov	r3, r1
 800d55c:	4610      	mov	r0, r2
 800d55e:	4619      	mov	r1, r3
 800d560:	f04f 0200 	mov.w	r2, #0
 800d564:	4b66      	ldr	r3, [pc, #408]	; (800d700 <IOPort_readAINS+0x360>)
 800d566:	f001 fa7f 	bl	800ea68 <__aeabi_dmul>
 800d56a:	4602      	mov	r2, r0
 800d56c:	460b      	mov	r3, r1
 800d56e:	4610      	mov	r0, r2
 800d570:	4619      	mov	r1, r3
 800d572:	f04f 0200 	mov.w	r2, #0
 800d576:	4b63      	ldr	r3, [pc, #396]	; (800d704 <IOPort_readAINS+0x364>)
 800d578:	f001 fa76 	bl	800ea68 <__aeabi_dmul>
 800d57c:	4602      	mov	r2, r0
 800d57e:	460b      	mov	r3, r1
 800d580:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.p_brake_R = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_G)/4095.0*5*1000;
 800d584:	4b5c      	ldr	r3, [pc, #368]	; (800d6f8 <IOPort_readAINS+0x358>)
 800d586:	685c      	ldr	r4, [r3, #4]
 800d588:	4865      	ldr	r0, [pc, #404]	; (800d720 <IOPort_readAINS+0x380>)
 800d58a:	f7fe f9f9 	bl	800b980 <ADC_MEASUREMENT_GetResult>
 800d58e:	4603      	mov	r3, r0
 800d590:	4618      	mov	r0, r3
 800d592:	f001 fa03 	bl	800e99c <__aeabi_i2d>
 800d596:	4602      	mov	r2, r0
 800d598:	460b      	mov	r3, r1
 800d59a:	4610      	mov	r0, r2
 800d59c:	4619      	mov	r1, r3
 800d59e:	a350      	add	r3, pc, #320	; (adr r3, 800d6e0 <IOPort_readAINS+0x340>)
 800d5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a4:	f001 fb8a 	bl	800ecbc <__aeabi_ddiv>
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	4610      	mov	r0, r2
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	f04f 0200 	mov.w	r2, #0
 800d5b4:	4b52      	ldr	r3, [pc, #328]	; (800d700 <IOPort_readAINS+0x360>)
 800d5b6:	f001 fa57 	bl	800ea68 <__aeabi_dmul>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	460b      	mov	r3, r1
 800d5be:	4610      	mov	r0, r2
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	f04f 0200 	mov.w	r2, #0
 800d5c6:	4b4f      	ldr	r3, [pc, #316]	; (800d704 <IOPort_readAINS+0x364>)
 800d5c8:	f001 fa4e 	bl	800ea68 <__aeabi_dmul>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	460b      	mov	r3, r1
 800d5d0:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.boardTemp = NTC_Calc(ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_H));
 800d5d4:	4b48      	ldr	r3, [pc, #288]	; (800d6f8 <IOPort_readAINS+0x358>)
 800d5d6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800d5d8:	4852      	ldr	r0, [pc, #328]	; (800d724 <IOPort_readAINS+0x384>)
 800d5da:	f7fe f9d1 	bl	800b980 <ADC_MEASUREMENT_GetResult>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f001 f9cb 	bl	800e97c <__aeabi_ui2d>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	4610      	mov	r0, r2
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	f000 f9ab 	bl	800d948 <NTC_Calc>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.TR1_VSense_WP = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_I)/4095.0*3.3*1000;
 800d5fa:	4b3f      	ldr	r3, [pc, #252]	; (800d6f8 <IOPort_readAINS+0x358>)
 800d5fc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800d5fe:	484a      	ldr	r0, [pc, #296]	; (800d728 <IOPort_readAINS+0x388>)
 800d600:	f7fe f9be 	bl	800b980 <ADC_MEASUREMENT_GetResult>
 800d604:	4603      	mov	r3, r0
 800d606:	4618      	mov	r0, r3
 800d608:	f001 f9c8 	bl	800e99c <__aeabi_i2d>
 800d60c:	4602      	mov	r2, r0
 800d60e:	460b      	mov	r3, r1
 800d610:	4610      	mov	r0, r2
 800d612:	4619      	mov	r1, r3
 800d614:	a332      	add	r3, pc, #200	; (adr r3, 800d6e0 <IOPort_readAINS+0x340>)
 800d616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d61a:	f001 fb4f 	bl	800ecbc <__aeabi_ddiv>
 800d61e:	4602      	mov	r2, r0
 800d620:	460b      	mov	r3, r1
 800d622:	4610      	mov	r0, r2
 800d624:	4619      	mov	r1, r3
 800d626:	a332      	add	r3, pc, #200	; (adr r3, 800d6f0 <IOPort_readAINS+0x350>)
 800d628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62c:	f001 fa1c 	bl	800ea68 <__aeabi_dmul>
 800d630:	4602      	mov	r2, r0
 800d632:	460b      	mov	r3, r1
 800d634:	4610      	mov	r0, r2
 800d636:	4619      	mov	r1, r3
 800d638:	f04f 0200 	mov.w	r2, #0
 800d63c:	4b31      	ldr	r3, [pc, #196]	; (800d704 <IOPort_readAINS+0x364>)
 800d63e:	f001 fa13 	bl	800ea68 <__aeabi_dmul>
 800d642:	4602      	mov	r2, r0
 800d644:	460b      	mov	r3, r1
 800d646:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.TR2_VSense_FAN1 = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_J)/4095.0*3.3*1000;
 800d64a:	4b2b      	ldr	r3, [pc, #172]	; (800d6f8 <IOPort_readAINS+0x358>)
 800d64c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800d64e:	4837      	ldr	r0, [pc, #220]	; (800d72c <IOPort_readAINS+0x38c>)
 800d650:	f7fe f996 	bl	800b980 <ADC_MEASUREMENT_GetResult>
 800d654:	4603      	mov	r3, r0
 800d656:	4618      	mov	r0, r3
 800d658:	f001 f9a0 	bl	800e99c <__aeabi_i2d>
 800d65c:	4602      	mov	r2, r0
 800d65e:	460b      	mov	r3, r1
 800d660:	4610      	mov	r0, r2
 800d662:	4619      	mov	r1, r3
 800d664:	a31e      	add	r3, pc, #120	; (adr r3, 800d6e0 <IOPort_readAINS+0x340>)
 800d666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66a:	f001 fb27 	bl	800ecbc <__aeabi_ddiv>
 800d66e:	4602      	mov	r2, r0
 800d670:	460b      	mov	r3, r1
 800d672:	4610      	mov	r0, r2
 800d674:	4619      	mov	r1, r3
 800d676:	a31e      	add	r3, pc, #120	; (adr r3, 800d6f0 <IOPort_readAINS+0x350>)
 800d678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67c:	f001 f9f4 	bl	800ea68 <__aeabi_dmul>
 800d680:	4602      	mov	r2, r0
 800d682:	460b      	mov	r3, r1
 800d684:	4610      	mov	r0, r2
 800d686:	4619      	mov	r1, r3
 800d688:	f04f 0200 	mov.w	r2, #0
 800d68c:	4b1d      	ldr	r3, [pc, #116]	; (800d704 <IOPort_readAINS+0x364>)
 800d68e:	f001 f9eb 	bl	800ea68 <__aeabi_dmul>
 800d692:	4602      	mov	r2, r0
 800d694:	460b      	mov	r3, r1
 800d696:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.TR3_VSense_FAN2 = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_K)/4095.0*3.3*1000;
 800d69a:	4b17      	ldr	r3, [pc, #92]	; (800d6f8 <IOPort_readAINS+0x358>)
 800d69c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800d69e:	4824      	ldr	r0, [pc, #144]	; (800d730 <IOPort_readAINS+0x390>)
 800d6a0:	f7fe f96e 	bl	800b980 <ADC_MEASUREMENT_GetResult>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f001 f978 	bl	800e99c <__aeabi_i2d>
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	4610      	mov	r0, r2
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	a30a      	add	r3, pc, #40	; (adr r3, 800d6e0 <IOPort_readAINS+0x340>)
 800d6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ba:	f001 faff 	bl	800ecbc <__aeabi_ddiv>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	4610      	mov	r0, r2
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	a30a      	add	r3, pc, #40	; (adr r3, 800d6f0 <IOPort_readAINS+0x350>)
 800d6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6cc:	f001 f9cc 	bl	800ea68 <__aeabi_dmul>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	460b      	mov	r3, r1
 800d6d4:	4610      	mov	r0, r2
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	f04f 0200 	mov.w	r2, #0
 800d6dc:	e02a      	b.n	800d734 <IOPort_readAINS+0x394>
 800d6de:	bf00      	nop
 800d6e0:	00000000 	.word	0x00000000
 800d6e4:	40affe00 	.word	0x40affe00
 800d6e8:	9999999a 	.word	0x9999999a
 800d6ec:	402d9999 	.word	0x402d9999
 800d6f0:	66666666 	.word	0x66666666
 800d6f4:	400a6666 	.word	0x400a6666
 800d6f8:	200012c0 	.word	0x200012c0
 800d6fc:	200004a4 	.word	0x200004a4
 800d700:	40140000 	.word	0x40140000
 800d704:	408f4000 	.word	0x408f4000
 800d708:	200004c4 	.word	0x200004c4
 800d70c:	200004e4 	.word	0x200004e4
 800d710:	40280000 	.word	0x40280000
 800d714:	20000504 	.word	0x20000504
 800d718:	20000524 	.word	0x20000524
 800d71c:	20000544 	.word	0x20000544
 800d720:	20000564 	.word	0x20000564
 800d724:	20000584 	.word	0x20000584
 800d728:	200005a4 	.word	0x200005a4
 800d72c:	200005c4 	.word	0x200005c4
 800d730:	200005e4 	.word	0x200005e4
 800d734:	4b03      	ldr	r3, [pc, #12]	; (800d744 <IOPort_readAINS+0x3a4>)
 800d736:	f001 f997 	bl	800ea68 <__aeabi_dmul>
 800d73a:	4602      	mov	r2, r0
 800d73c:	460b      	mov	r3, r1
 800d73e:	e9c4 2300 	strd	r2, r3, [r4]
	//int test2 = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_H);
  }
 800d742:	bd98      	pop	{r3, r4, r7, pc}
 800d744:	408f4000 	.word	0x408f4000

0800d748 <ERU0_3_IRQHandler>:

void Interrupt_Shifting(void)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	af00      	add	r7, sp, #0
	shiftUpInterrupt = DIGITAL_IO_GetInput(&Signal_UpShift);
 800d74c:	4807      	ldr	r0, [pc, #28]	; (800d76c <ERU0_3_IRQHandler+0x24>)
 800d74e:	f7ff fc69 	bl	800d024 <DIGITAL_IO_GetInput>
 800d752:	4603      	mov	r3, r0
 800d754:	b2da      	uxtb	r2, r3
 800d756:	4b06      	ldr	r3, [pc, #24]	; (800d770 <ERU0_3_IRQHandler+0x28>)
 800d758:	701a      	strb	r2, [r3, #0]
	shiftDownInterrupt = DIGITAL_IO_GetInput(&Signal_DownShift);
 800d75a:	4806      	ldr	r0, [pc, #24]	; (800d774 <ERU0_3_IRQHandler+0x2c>)
 800d75c:	f7ff fc62 	bl	800d024 <DIGITAL_IO_GetInput>
 800d760:	4603      	mov	r3, r0
 800d762:	b2da      	uxtb	r2, r3
 800d764:	4b04      	ldr	r3, [pc, #16]	; (800d778 <ERU0_3_IRQHandler+0x30>)
 800d766:	701a      	strb	r2, [r3, #0]
}
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	0800f68c 	.word	0x0800f68c
 800d770:	20001270 	.word	0x20001270
 800d774:	0800f678 	.word	0x0800f678
 800d778:	20001250 	.word	0x20001250

0800d77c <ManualControl_setDOUTS>:

void ManualControl_setDOUTS()
{
 800d77c:	b480      	push	{r7}
 800d77e:	af00      	add	r7, sp, #0
	if(canData.ManConOn_VOVGShiftUp)
 800d780:	4b1d      	ldr	r3, [pc, #116]	; (800d7f8 <ManualControl_setDOUTS+0x7c>)
 800d782:	f893 315f 	ldrb.w	r3, [r3, #351]	; 0x15f
 800d786:	2b00      	cmp	r3, #0
 800d788:	d005      	beq.n	800d796 <ManualControl_setDOUTS+0x1a>
	  *IOportData.VOVG_ShiftUp = canData.ManConVar_VOVGShiftUp;
 800d78a:	4b1c      	ldr	r3, [pc, #112]	; (800d7fc <ManualControl_setDOUTS+0x80>)
 800d78c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d78e:	4a1a      	ldr	r2, [pc, #104]	; (800d7f8 <ManualControl_setDOUTS+0x7c>)
 800d790:	f892 2169 	ldrb.w	r2, [r2, #361]	; 0x169
 800d794:	701a      	strb	r2, [r3, #0]

	if(canData.ManConOn_VOVGShiftDown)
 800d796:	4b18      	ldr	r3, [pc, #96]	; (800d7f8 <ManualControl_setDOUTS+0x7c>)
 800d798:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d005      	beq.n	800d7ac <ManualControl_setDOUTS+0x30>
	  *IOportData.VOVG_ShiftDown = canData.ManConVar_VOVGShiftDown;
 800d7a0:	4b16      	ldr	r3, [pc, #88]	; (800d7fc <ManualControl_setDOUTS+0x80>)
 800d7a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7a4:	4a14      	ldr	r2, [pc, #80]	; (800d7f8 <ManualControl_setDOUTS+0x7c>)
 800d7a6:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 800d7aa:	701a      	strb	r2, [r3, #0]

	if(canData.ManConOn_IgnCut)
 800d7ac:	4b12      	ldr	r3, [pc, #72]	; (800d7f8 <ManualControl_setDOUTS+0x7c>)
 800d7ae:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d005      	beq.n	800d7c2 <ManualControl_setDOUTS+0x46>
	  *IOportData.Ignition_Cut = canData.ManConVar_IgnCut;
 800d7b6:	4b11      	ldr	r3, [pc, #68]	; (800d7fc <ManualControl_setDOUTS+0x80>)
 800d7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7ba:	4a0f      	ldr	r2, [pc, #60]	; (800d7f8 <ManualControl_setDOUTS+0x7c>)
 800d7bc:	f892 216a 	ldrb.w	r2, [r2, #362]	; 0x16a
 800d7c0:	701a      	strb	r2, [r3, #0]

	if(canData.ManConOn_VOVG_IN)
 800d7c2:	4b0d      	ldr	r3, [pc, #52]	; (800d7f8 <ManualControl_setDOUTS+0x7c>)
 800d7c4:	f893 3161 	ldrb.w	r3, [r3, #353]	; 0x161
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d005      	beq.n	800d7d8 <ManualControl_setDOUTS+0x5c>
	  *IOportData.VOVG_IN = canData.ManConVar_VOVG_IN;
 800d7cc:	4b0b      	ldr	r3, [pc, #44]	; (800d7fc <ManualControl_setDOUTS+0x80>)
 800d7ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7d0:	4a09      	ldr	r2, [pc, #36]	; (800d7f8 <ManualControl_setDOUTS+0x7c>)
 800d7d2:	f892 216b 	ldrb.w	r2, [r2, #363]	; 0x16b
 800d7d6:	701a      	strb	r2, [r3, #0]

	if(canData.ManConOn_VOVG_OUT)
 800d7d8:	4b07      	ldr	r3, [pc, #28]	; (800d7f8 <ManualControl_setDOUTS+0x7c>)
 800d7da:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d005      	beq.n	800d7ee <ManualControl_setDOUTS+0x72>
	  *IOportData.VOVG_OUT = canData.ManConVar_VOVG_OUT;
 800d7e2:	4b06      	ldr	r3, [pc, #24]	; (800d7fc <ManualControl_setDOUTS+0x80>)
 800d7e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7e6:	4a04      	ldr	r2, [pc, #16]	; (800d7f8 <ManualControl_setDOUTS+0x7c>)
 800d7e8:	f892 216c 	ldrb.w	r2, [r2, #364]	; 0x16c
 800d7ec:	701a      	strb	r2, [r3, #0]
}
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr
 800d7f6:	bf00      	nop
 800d7f8:	20001338 	.word	0x20001338
 800d7fc:	200012c0 	.word	0x200012c0

0800d800 <ManualControl_setPWMOUTS>:

void ManualControl_setPWMOUTS()
{
 800d800:	b480      	push	{r7}
 800d802:	b083      	sub	sp, #12
 800d804:	af00      	add	r7, sp, #0
	if(canData.ManConOn_MHJ9_IN)
 800d806:	4b4b      	ldr	r3, [pc, #300]	; (800d934 <ManualControl_setPWMOUTS+0x134>)
 800d808:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d017      	beq.n	800d840 <ManualControl_setPWMOUTS+0x40>
	  *IOportData.MHJ9_IN = (float)canData.ManConVar_MHJ9_IN/100*65536;
 800d810:	4b49      	ldr	r3, [pc, #292]	; (800d938 <ManualControl_setPWMOUTS+0x138>)
 800d812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d814:	4a47      	ldr	r2, [pc, #284]	; (800d934 <ManualControl_setPWMOUTS+0x134>)
 800d816:	f892 2163 	ldrb.w	r2, [r2, #355]	; 0x163
 800d81a:	ee07 2a90 	vmov	s15, r2
 800d81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d822:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800d93c <ManualControl_setPWMOUTS+0x13c>
 800d826:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d82a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800d940 <ManualControl_setPWMOUTS+0x140>
 800d82e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d836:	edc7 7a01 	vstr	s15, [r7, #4]
 800d83a:	88ba      	ldrh	r2, [r7, #4]
 800d83c:	b292      	uxth	r2, r2
 800d83e:	801a      	strh	r2, [r3, #0]

	if(canData.ManConOn_MHJ9_OUT)
 800d840:	4b3c      	ldr	r3, [pc, #240]	; (800d934 <ManualControl_setPWMOUTS+0x134>)
 800d842:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 800d846:	2b00      	cmp	r3, #0
 800d848:	d017      	beq.n	800d87a <ManualControl_setPWMOUTS+0x7a>
	  *IOportData.MHJ9_OUT = (float)canData.ManConVar_MHJ9_OUT/100*65536;
 800d84a:	4b3b      	ldr	r3, [pc, #236]	; (800d938 <ManualControl_setPWMOUTS+0x138>)
 800d84c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d84e:	4a39      	ldr	r2, [pc, #228]	; (800d934 <ManualControl_setPWMOUTS+0x134>)
 800d850:	f892 2164 	ldrb.w	r2, [r2, #356]	; 0x164
 800d854:	ee07 2a90 	vmov	s15, r2
 800d858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d85c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800d93c <ManualControl_setPWMOUTS+0x13c>
 800d860:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d864:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d940 <ManualControl_setPWMOUTS+0x140>
 800d868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d86c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d870:	edc7 7a01 	vstr	s15, [r7, #4]
 800d874:	88ba      	ldrh	r2, [r7, #4]
 800d876:	b292      	uxth	r2, r2
 800d878:	801a      	strh	r2, [r3, #0]

	if(canData.ManConOn_Waterpump)
 800d87a:	4b2e      	ldr	r3, [pc, #184]	; (800d934 <ManualControl_setPWMOUTS+0x134>)
 800d87c:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
 800d880:	2b00      	cmp	r3, #0
 800d882:	d017      	beq.n	800d8b4 <ManualControl_setPWMOUTS+0xb4>
	  *IOportData.Waterpump_PWM_active = (float)canData.ManConVar_Waterpump/100*65536;
 800d884:	4b2c      	ldr	r3, [pc, #176]	; (800d938 <ManualControl_setPWMOUTS+0x138>)
 800d886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d888:	4a2a      	ldr	r2, [pc, #168]	; (800d934 <ManualControl_setPWMOUTS+0x134>)
 800d88a:	f892 2165 	ldrb.w	r2, [r2, #357]	; 0x165
 800d88e:	ee07 2a90 	vmov	s15, r2
 800d892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d896:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800d93c <ManualControl_setPWMOUTS+0x13c>
 800d89a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d89e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800d940 <ManualControl_setPWMOUTS+0x140>
 800d8a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d8a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8aa:	edc7 7a01 	vstr	s15, [r7, #4]
 800d8ae:	88ba      	ldrh	r2, [r7, #4]
 800d8b0:	b292      	uxth	r2, r2
 800d8b2:	801a      	strh	r2, [r3, #0]

	if(canData.ManConOn_Fans1)
 800d8b4:	4b1f      	ldr	r3, [pc, #124]	; (800d934 <ManualControl_setPWMOUTS+0x134>)
 800d8b6:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d017      	beq.n	800d8ee <ManualControl_setPWMOUTS+0xee>
	  *IOportData.Fans1_PWM_active = (float)canData.ManConVar_Fans1/100*65536;
 800d8be:	4b1e      	ldr	r3, [pc, #120]	; (800d938 <ManualControl_setPWMOUTS+0x138>)
 800d8c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8c2:	4a1c      	ldr	r2, [pc, #112]	; (800d934 <ManualControl_setPWMOUTS+0x134>)
 800d8c4:	f892 2166 	ldrb.w	r2, [r2, #358]	; 0x166
 800d8c8:	ee07 2a90 	vmov	s15, r2
 800d8cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8d0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800d93c <ManualControl_setPWMOUTS+0x13c>
 800d8d4:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d8d8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800d940 <ManualControl_setPWMOUTS+0x140>
 800d8dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d8e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8e4:	edc7 7a01 	vstr	s15, [r7, #4]
 800d8e8:	88ba      	ldrh	r2, [r7, #4]
 800d8ea:	b292      	uxth	r2, r2
 800d8ec:	801a      	strh	r2, [r3, #0]

	if(canData.ManConOn_Fans2)
 800d8ee:	4b11      	ldr	r3, [pc, #68]	; (800d934 <ManualControl_setPWMOUTS+0x134>)
 800d8f0:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d017      	beq.n	800d928 <ManualControl_setPWMOUTS+0x128>
	  *IOportData.Fans2_PWM_active = (float)canData.ManConVar_Fans2/100*65536;
 800d8f8:	4b0f      	ldr	r3, [pc, #60]	; (800d938 <ManualControl_setPWMOUTS+0x138>)
 800d8fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8fc:	4a0d      	ldr	r2, [pc, #52]	; (800d934 <ManualControl_setPWMOUTS+0x134>)
 800d8fe:	f892 2167 	ldrb.w	r2, [r2, #359]	; 0x167
 800d902:	ee07 2a90 	vmov	s15, r2
 800d906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d90a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d93c <ManualControl_setPWMOUTS+0x13c>
 800d90e:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d912:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800d940 <ManualControl_setPWMOUTS+0x140>
 800d916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d91a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d91e:	edc7 7a01 	vstr	s15, [r7, #4]
 800d922:	88ba      	ldrh	r2, [r7, #4]
 800d924:	b292      	uxth	r2, r2
 800d926:	801a      	strh	r2, [r3, #0]
}
 800d928:	370c      	adds	r7, #12
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop
 800d934:	20001338 	.word	0x20001338
 800d938:	200012c0 	.word	0x200012c0
 800d93c:	42c80000 	.word	0x42c80000
 800d940:	47800000 	.word	0x47800000
 800d944:	00000000 	.word	0x00000000

0800d948 <NTC_Calc>:

double NTC_Calc(double Temp)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b098      	sub	sp, #96	; 0x60
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	e9c7 0100 	strd	r0, r1, [r7]
			int NTC_LUT_NB_POINT = 6;
 800d952:	2306      	movs	r3, #6
 800d954:	64bb      	str	r3, [r7, #72]	; 0x48
			int i;
			uint16_t Temp_Val;
			float x0,y0,x1,y1,a,b;
			uint32_t LUT_NTC_V[6]={0};
 800d956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d95a:	2200      	movs	r2, #0
 800d95c:	601a      	str	r2, [r3, #0]
 800d95e:	3304      	adds	r3, #4
 800d960:	2200      	movs	r2, #0
 800d962:	601a      	str	r2, [r3, #0]
 800d964:	3304      	adds	r3, #4
 800d966:	2200      	movs	r2, #0
 800d968:	601a      	str	r2, [r3, #0]
 800d96a:	3304      	adds	r3, #4
 800d96c:	2200      	movs	r2, #0
 800d96e:	601a      	str	r2, [r3, #0]
 800d970:	3304      	adds	r3, #4
 800d972:	2200      	movs	r2, #0
 800d974:	601a      	str	r2, [r3, #0]
 800d976:	3304      	adds	r3, #4
 800d978:	2200      	movs	r2, #0
 800d97a:	601a      	str	r2, [r3, #0]
 800d97c:	3304      	adds	r3, #4
			float LUT_NTC[6]={0};
 800d97e:	f107 030c 	add.w	r3, r7, #12
 800d982:	2200      	movs	r2, #0
 800d984:	601a      	str	r2, [r3, #0]
 800d986:	3304      	adds	r3, #4
 800d988:	2200      	movs	r2, #0
 800d98a:	601a      	str	r2, [r3, #0]
 800d98c:	3304      	adds	r3, #4
 800d98e:	2200      	movs	r2, #0
 800d990:	601a      	str	r2, [r3, #0]
 800d992:	3304      	adds	r3, #4
 800d994:	2200      	movs	r2, #0
 800d996:	601a      	str	r2, [r3, #0]
 800d998:	3304      	adds	r3, #4
 800d99a:	2200      	movs	r2, #0
 800d99c:	601a      	str	r2, [r3, #0]
 800d99e:	3304      	adds	r3, #4
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	601a      	str	r2, [r3, #0]
 800d9a4:	3304      	adds	r3, #4

			LUT_NTC_V[0] = 140;
 800d9a6:	238c      	movs	r3, #140	; 0x8c
 800d9a8:	627b      	str	r3, [r7, #36]	; 0x24
			LUT_NTC_V[1] = 283;
 800d9aa:	f240 131b 	movw	r3, #283	; 0x11b
 800d9ae:	62bb      	str	r3, [r7, #40]	; 0x28
			LUT_NTC_V[2] = 602;
 800d9b0:	f240 235a 	movw	r3, #602	; 0x25a
 800d9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
			LUT_NTC_V[3] = 1288;
 800d9b6:	f44f 63a1 	mov.w	r3, #1288	; 0x508
 800d9ba:	633b      	str	r3, [r7, #48]	; 0x30
			LUT_NTC_V[4] = 2500;
 800d9bc:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800d9c0:	637b      	str	r3, [r7, #52]	; 0x34
			LUT_NTC_V[5] = 3850;
 800d9c2:	f640 730a 	movw	r3, #3850	; 0xf0a
 800d9c6:	63bb      	str	r3, [r7, #56]	; 0x38

		    LUT_NTC[0] = 125;
 800d9c8:	4b77      	ldr	r3, [pc, #476]	; (800dba8 <NTC_Calc+0x260>)
 800d9ca:	60fb      	str	r3, [r7, #12]
			LUT_NTC[1] = 100;
 800d9cc:	4b77      	ldr	r3, [pc, #476]	; (800dbac <NTC_Calc+0x264>)
 800d9ce:	613b      	str	r3, [r7, #16]
			LUT_NTC[2] = 75;
 800d9d0:	4b77      	ldr	r3, [pc, #476]	; (800dbb0 <NTC_Calc+0x268>)
 800d9d2:	617b      	str	r3, [r7, #20]
			LUT_NTC[3] = 50;
 800d9d4:	4b77      	ldr	r3, [pc, #476]	; (800dbb4 <NTC_Calc+0x26c>)
 800d9d6:	61bb      	str	r3, [r7, #24]
			LUT_NTC[4] = 25;
 800d9d8:	4b77      	ldr	r3, [pc, #476]	; (800dbb8 <NTC_Calc+0x270>)
 800d9da:	61fb      	str	r3, [r7, #28]
			LUT_NTC[5] = 0;
 800d9dc:	f04f 0300 	mov.w	r3, #0
 800d9e0:	623b      	str	r3, [r7, #32]

			i=0;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	65fb      	str	r3, [r7, #92]	; 0x5c
			Temp_Val = ((Temp)*5000/4095);
 800d9e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d9ea:	a36b      	add	r3, pc, #428	; (adr r3, 800db98 <NTC_Calc+0x250>)
 800d9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f0:	f001 f83a 	bl	800ea68 <__aeabi_dmul>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	4610      	mov	r0, r2
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	a368      	add	r3, pc, #416	; (adr r3, 800dba0 <NTC_Calc+0x258>)
 800d9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da02:	f001 f95b 	bl	800ecbc <__aeabi_ddiv>
 800da06:	4602      	mov	r2, r0
 800da08:	460b      	mov	r3, r1
 800da0a:	4610      	mov	r0, r2
 800da0c:	4619      	mov	r1, r3
 800da0e:	f001 fac5 	bl	800ef9c <__aeabi_d2uiz>
 800da12:	4603      	mov	r3, r0
 800da14:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			while(i<NTC_LUT_NB_POINT && LUT_NTC_V[i]<=Temp_Val) i++;
 800da18:	e002      	b.n	800da20 <NTC_Calc+0xd8>
 800da1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da1c:	3301      	adds	r3, #1
 800da1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800da22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da24:	429a      	cmp	r2, r3
 800da26:	da0a      	bge.n	800da3e <NTC_Calc+0xf6>
 800da28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da2a:	009b      	lsls	r3, r3, #2
 800da2c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800da30:	4413      	add	r3, r2
 800da32:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800da36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d9ed      	bls.n	800da1a <NTC_Calc+0xd2>
			if(i==0){
 800da3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da40:	2b00      	cmp	r3, #0
 800da42:	d112      	bne.n	800da6a <NTC_Calc+0x122>
				x0 = LUT_NTC_V[0];
 800da44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da46:	ee07 3a90 	vmov	s15, r3
 800da4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da4e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				y0 = LUT_NTC[0];
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	657b      	str	r3, [r7, #84]	; 0x54
				x1 = LUT_NTC_V[1];
 800da56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da58:	ee07 3a90 	vmov	s15, r3
 800da5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da60:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				y1 = LUT_NTC[1];
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da68:	e05e      	b.n	800db28 <NTC_Calc+0x1e0>
			}
			else if(i==NTC_LUT_NB_POINT){
 800da6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800da6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da6e:	429a      	cmp	r2, r3
 800da70:	d12e      	bne.n	800dad0 <NTC_Calc+0x188>
				x0 = LUT_NTC_V[NTC_LUT_NB_POINT-2];
 800da72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da74:	3b02      	subs	r3, #2
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800da7c:	4413      	add	r3, r2
 800da7e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800da82:	ee07 3a90 	vmov	s15, r3
 800da86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da8a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				y0 = LUT_NTC[NTC_LUT_NB_POINT-2];
 800da8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da90:	3b02      	subs	r3, #2
 800da92:	009b      	lsls	r3, r3, #2
 800da94:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800da98:	4413      	add	r3, r2
 800da9a:	3b54      	subs	r3, #84	; 0x54
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	657b      	str	r3, [r7, #84]	; 0x54
				x1 = LUT_NTC_V[NTC_LUT_NB_POINT-1];
 800daa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daa2:	3b01      	subs	r3, #1
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800daaa:	4413      	add	r3, r2
 800daac:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800dab0:	ee07 3a90 	vmov	s15, r3
 800dab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dab8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				y1 = LUT_NTC[NTC_LUT_NB_POINT-1];
 800dabc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dabe:	3b01      	subs	r3, #1
 800dac0:	009b      	lsls	r3, r3, #2
 800dac2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dac6:	4413      	add	r3, r2
 800dac8:	3b54      	subs	r3, #84	; 0x54
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dace:	e02b      	b.n	800db28 <NTC_Calc+0x1e0>
			}
			else{
				x0 = LUT_NTC_V[i-1];
 800dad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dad2:	3b01      	subs	r3, #1
 800dad4:	009b      	lsls	r3, r3, #2
 800dad6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dada:	4413      	add	r3, r2
 800dadc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800dae0:	ee07 3a90 	vmov	s15, r3
 800dae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dae8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				y0 = LUT_NTC[i-1];
 800daec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800daee:	3b01      	subs	r3, #1
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800daf6:	4413      	add	r3, r2
 800daf8:	3b54      	subs	r3, #84	; 0x54
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	657b      	str	r3, [r7, #84]	; 0x54
				x1 = LUT_NTC_V[i];
 800dafe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800db06:	4413      	add	r3, r2
 800db08:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800db0c:	ee07 3a90 	vmov	s15, r3
 800db10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db14:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				y1 = LUT_NTC[i];
 800db18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db1a:	009b      	lsls	r3, r3, #2
 800db1c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800db20:	4413      	add	r3, r2
 800db22:	3b54      	subs	r3, #84	; 0x54
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	64fb      	str	r3, [r7, #76]	; 0x4c
			}

			a = (y1-y0)/(x1-x0);
 800db28:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800db2c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800db30:	ee37 7a67 	vsub.f32	s14, s14, s15
 800db34:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800db38:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800db3c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800db40:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800db44:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			b = y0 - a*x0;
 800db48:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800db4c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800db50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db54:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800db58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db5c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			return a*(Temp_Val) + b;
 800db60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800db64:	ee07 3a90 	vmov	s15, r3
 800db68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800db6c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800db70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db74:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800db78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db7c:	ee17 0a90 	vmov	r0, s15
 800db80:	f000 ff1e 	bl	800e9c0 <__aeabi_f2d>
 800db84:	4602      	mov	r2, r0
 800db86:	460b      	mov	r3, r1

}
 800db88:	4610      	mov	r0, r2
 800db8a:	4619      	mov	r1, r3
 800db8c:	3760      	adds	r7, #96	; 0x60
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
 800db92:	bf00      	nop
 800db94:	f3af 8000 	nop.w
 800db98:	00000000 	.word	0x00000000
 800db9c:	40b38800 	.word	0x40b38800
 800dba0:	00000000 	.word	0x00000000
 800dba4:	40affe00 	.word	0x40affe00
 800dba8:	42fa0000 	.word	0x42fa0000
 800dbac:	42c80000 	.word	0x42c80000
 800dbb0:	42960000 	.word	0x42960000
 800dbb4:	42480000 	.word	0x42480000
 800dbb8:	41c80000 	.word	0x41c80000
 800dbbc:	f3af 8000 	nop.w

0800dbc0 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	460b      	mov	r3, r1
 800dbca:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbd0:	78fb      	ldrb	r3, [r7, #3]
 800dbd2:	fa22 f303 	lsr.w	r3, r2, r3
 800dbd6:	f003 0301 	and.w	r3, r3, #1
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	370c      	adds	r7, #12
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr
 800dbe6:	bf00      	nop

0800dbe8 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	7c1b      	ldrb	r3, [r3, #16]
 800dbf8:	4610      	mov	r0, r2
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	f7ff ffe0 	bl	800dbc0 <XMC_GPIO_GetInput>
 800dc00:	4603      	mov	r3, r0
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop

0800dc0c <Task_Transmission>:

uint8_t test1 =0,test2 =0;
boolean_T transActive = 0;

void Task_Transmission (void *p)
{
 800dc0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc10:	b084      	sub	sp, #16
 800dc12:	af02      	add	r7, sp, #8
 800dc14:	6078      	str	r0, [r7, #4]
	while(1)
	{
		transActive=1;
 800dc16:	4b47      	ldr	r3, [pc, #284]	; (800dd34 <Task_Transmission+0x128>)
 800dc18:	2201      	movs	r2, #1
 800dc1a:	701a      	strb	r2, [r3, #0]

	      //Run Brakelight Task (if braking during shifting)
		  FUNC_Brakelight();
 800dc1c:	f7f2 fbc4 	bl	80003a8 <FUNC_Brakelight>

		  //Safety
		  FUNC_Safety();
 800dc20:	f7f5 fbaa 	bl	8003378 <FUNC_Safety>

		  //Start Transmission Calculation and send Data
		  FUNC_Transmission();
 800dc24:	f7f5 fc54 	bl	80034d0 <FUNC_Transmission>

		  //Set Outputs from Transmission Calculation
		  FUNC_OutputData();
 800dc28:	f7f3 fbde 	bl	80013e8 <FUNC_OutputData>
		  CAN_1_Transmit(); //Vllt unnötig
 800dc2c:	f7fe f962 	bl	800bef4 <CAN_1_Transmit>
		  CAN_2_Transmit();
 800dc30:	f7fe fed2 	bl	800c9d8 <CAN_2_Transmit>
		  IOPort_setDOUTS();
 800dc34:	f7ff fac2 	bl	800d1bc <IOPort_setDOUTS>
		  IOPort_setPWMOUTS();
 800dc38:	f7ff fb26 	bl	800d288 <IOPort_setPWMOUTS>

		  //Read Inputs for next Calculation
		  CAN_1_Receive();
 800dc3c:	f7fe f89a 	bl	800bd74 <CAN_1_Receive>
		  CAN_2_Receive();
 800dc40:	f7fe fc3c 	bl	800c4bc <CAN_2_Receive>
		  IOPort_readAINS();
 800dc44:	f7ff fbac 	bl	800d3a0 <IOPort_readAINS>
		  IOPort_readDINS();
 800dc48:	f7ff faec 	bl	800d224 <IOPort_readDINS>

		  if(shiftDownInterrupt | shiftUpInterrupt)
 800dc4c:	4b3a      	ldr	r3, [pc, #232]	; (800dd38 <Task_Transmission+0x12c>)
 800dc4e:	781a      	ldrb	r2, [r3, #0]
 800dc50:	4b3a      	ldr	r3, [pc, #232]	; (800dd3c <Task_Transmission+0x130>)
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	4313      	orrs	r3, r2
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d00f      	beq.n	800dc7c <Task_Transmission+0x70>
		  {
			  VCU_DW.VAR_IN_STW_shift_up_request = DIGITAL_IO_GetInput(&Signal_UpShift);
 800dc5c:	4838      	ldr	r0, [pc, #224]	; (800dd40 <Task_Transmission+0x134>)
 800dc5e:	f7ff ffc3 	bl	800dbe8 <DIGITAL_IO_GetInput>
 800dc62:	4603      	mov	r3, r0
 800dc64:	b2da      	uxtb	r2, r3
 800dc66:	4b37      	ldr	r3, [pc, #220]	; (800dd44 <Task_Transmission+0x138>)
 800dc68:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
			  VCU_DW.VAR_IN_STW_shift_down_request = DIGITAL_IO_GetInput(&Signal_DownShift);
 800dc6c:	4836      	ldr	r0, [pc, #216]	; (800dd48 <Task_Transmission+0x13c>)
 800dc6e:	f7ff ffbb 	bl	800dbe8 <DIGITAL_IO_GetInput>
 800dc72:	4603      	mov	r3, r0
 800dc74:	b2da      	uxtb	r2, r3
 800dc76:	4b33      	ldr	r3, [pc, #204]	; (800dd44 <Task_Transmission+0x138>)
 800dc78:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
		  }
		  FUNC_InputData();
 800dc7c:	f7f2 fbdc 	bl	8000438 <FUNC_InputData>

		  //Reset if clutch is pressed
		  if((*canData.STW_shift_up_request == 1) | (*canData.STW_shift_down_request == 1) | (*IOportData.x_clutch_STW < clutch_STW_threshold) | shiftDownInterrupt | shiftUpInterrupt | *canData.LC_dash_bit)
 800dc80:	4b32      	ldr	r3, [pc, #200]	; (800dd4c <Task_Transmission+0x140>)
 800dc82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	bf0c      	ite	eq
 800dc8a:	2301      	moveq	r3, #1
 800dc8c:	2300      	movne	r3, #0
 800dc8e:	b2da      	uxtb	r2, r3
 800dc90:	4b2e      	ldr	r3, [pc, #184]	; (800dd4c <Task_Transmission+0x140>)
 800dc92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	bf0c      	ite	eq
 800dc9a:	2301      	moveq	r3, #1
 800dc9c:	2300      	movne	r3, #0
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	4313      	orrs	r3, r2
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	461e      	mov	r6, r3
 800dca6:	4b2a      	ldr	r3, [pc, #168]	; (800dd50 <Task_Transmission+0x144>)
 800dca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcaa:	e9d3 4500 	ldrd	r4, r5, [r3]
 800dcae:	4b29      	ldr	r3, [pc, #164]	; (800dd54 <Task_Transmission+0x148>)
 800dcb0:	881b      	ldrh	r3, [r3, #0]
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f000 fe72 	bl	800e99c <__aeabi_i2d>
 800dcb8:	4680      	mov	r8, r0
 800dcba:	4689      	mov	r9, r1
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	469a      	mov	sl, r3
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	4629      	mov	r1, r5
 800dcc4:	4642      	mov	r2, r8
 800dcc6:	464b      	mov	r3, r9
 800dcc8:	f001 f940 	bl	800ef4c <__aeabi_dcmplt>
 800dccc:	4603      	mov	r3, r0
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d101      	bne.n	800dcd6 <Task_Transmission+0xca>
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	469a      	mov	sl, r3
 800dcd6:	fa5f f38a 	uxtb.w	r3, sl
 800dcda:	4333      	orrs	r3, r6
 800dcdc:	4a16      	ldr	r2, [pc, #88]	; (800dd38 <Task_Transmission+0x12c>)
 800dcde:	7812      	ldrb	r2, [r2, #0]
 800dce0:	4313      	orrs	r3, r2
 800dce2:	4a16      	ldr	r2, [pc, #88]	; (800dd3c <Task_Transmission+0x130>)
 800dce4:	7812      	ldrb	r2, [r2, #0]
 800dce6:	4313      	orrs	r3, r2
 800dce8:	4a18      	ldr	r2, [pc, #96]	; (800dd4c <Task_Transmission+0x140>)
 800dcea:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800dcee:	7812      	ldrb	r2, [r2, #0]
 800dcf0:	4313      	orrs	r3, r2
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d00d      	beq.n	800dd12 <Task_Transmission+0x106>
		  {
			  Watchdog_Reset();
 800dcf6:	f7fe ffbd 	bl	800cc74 <Watchdog_Reset>
			  xTimerReset(TimerHandle_Transmission,0);
 800dcfa:	4b17      	ldr	r3, [pc, #92]	; (800dd58 <Task_Transmission+0x14c>)
 800dcfc:	681c      	ldr	r4, [r3, #0]
 800dcfe:	f7fb ffd5 	bl	8009cac <xTaskGetTickCount>
 800dd02:	4602      	mov	r2, r0
 800dd04:	2300      	movs	r3, #0
 800dd06:	9300      	str	r3, [sp, #0]
 800dd08:	4620      	mov	r0, r4
 800dd0a:	2102      	movs	r1, #2
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	f7fc fc81 	bl	800a614 <xTimerGenericCommand>
		  }
		  if(TransmissionTask_Stop)
 800dd12:	4b12      	ldr	r3, [pc, #72]	; (800dd5c <Task_Transmission+0x150>)
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00a      	beq.n	800dd30 <Task_Transmission+0x124>
		  {
			  transActive = 0;
 800dd1a:	4b06      	ldr	r3, [pc, #24]	; (800dd34 <Task_Transmission+0x128>)
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	701a      	strb	r2, [r3, #0]
			  TransmissionTask_Stop = 0;
 800dd20:	4b0e      	ldr	r3, [pc, #56]	; (800dd5c <Task_Transmission+0x150>)
 800dd22:	2200      	movs	r2, #0
 800dd24:	701a      	strb	r2, [r3, #0]
			  vTaskSuspend(TaskHandle_Transmission);
 800dd26:	4b0e      	ldr	r3, [pc, #56]	; (800dd60 <Task_Transmission+0x154>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7fb fdaa 	bl	8009884 <vTaskSuspend>
		  }
	}
 800dd30:	e771      	b.n	800dc16 <Task_Transmission+0xa>
 800dd32:	bf00      	nop
 800dd34:	200008b8 	.word	0x200008b8
 800dd38:	20001250 	.word	0x20001250
 800dd3c:	20001270 	.word	0x20001270
 800dd40:	0800f68c 	.word	0x0800f68c
 800dd44:	20001058 	.word	0x20001058
 800dd48:	0800f678 	.word	0x0800f678
 800dd4c:	20001338 	.word	0x20001338
 800dd50:	200012c0 	.word	0x200012c0
 800dd54:	20000648 	.word	0x20000648
 800dd58:	200008ac 	.word	0x200008ac
 800dd5c:	200008b4 	.word	0x200008b4
 800dd60:	200008a0 	.word	0x200008a0

0800dd64 <Task_Transmit>:
}

void Task_Transmit (void *p)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		  //Simulink
		  FUNC_OutputData();
 800dd6c:	f7f3 fb3c 	bl	80013e8 <FUNC_OutputData>

		  //CAN
		  CAN_1_Transmit();
 800dd70:	f7fe f8c0 	bl	800bef4 <CAN_1_Transmit>
		  CAN_2_Transmit();
 800dd74:	f7fe fe30 	bl	800c9d8 <CAN_2_Transmit>

		  //IOPort
		  IOPort_setDOUTS();
 800dd78:	f7ff fa20 	bl	800d1bc <IOPort_setDOUTS>
		  IOPort_setPWMOUTS();
 800dd7c:	f7ff fa84 	bl	800d288 <IOPort_setPWMOUTS>

		  //Watchdog
		  wachdog_reset[1] = 1;
 800dd80:	4b08      	ldr	r3, [pc, #32]	; (800dda4 <Task_Transmit+0x40>)
 800dd82:	2201      	movs	r2, #1
 800dd84:	705a      	strb	r2, [r3, #1]

		  //TaskHandler Delay
		  vTaskDelay(pdMS_TO_TICKS(delay_for_transmitting));
 800dd86:	4b08      	ldr	r3, [pc, #32]	; (800dda8 <Task_Transmit+0x44>)
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dd90:	fb03 f302 	mul.w	r3, r3, r2
 800dd94:	4a05      	ldr	r2, [pc, #20]	; (800ddac <Task_Transmit+0x48>)
 800dd96:	fba2 2303 	umull	r2, r3, r2, r3
 800dd9a:	099b      	lsrs	r3, r3, #6
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7fb fd3f 	bl	8009820 <vTaskDelay>
	}
 800dda2:	e7e3      	b.n	800dd6c <Task_Transmit+0x8>
 800dda4:	200008b0 	.word	0x200008b0
 800dda8:	20000643 	.word	0x20000643
 800ddac:	10624dd3 	.word	0x10624dd3

0800ddb0 <Task_Reveive>:
}

void Task_Reveive (void *p)
{
 800ddb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddb4:	b084      	sub	sp, #16
 800ddb6:	af02      	add	r7, sp, #8
 800ddb8:	6078      	str	r0, [r7, #4]
	while(1)
	{
		 test1 = DIGITAL_IO_GetInput(&Signal_UpShift);
 800ddba:	4843      	ldr	r0, [pc, #268]	; (800dec8 <Task_Reveive+0x118>)
 800ddbc:	f7ff ff14 	bl	800dbe8 <DIGITAL_IO_GetInput>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	b2da      	uxtb	r2, r3
 800ddc4:	4b41      	ldr	r3, [pc, #260]	; (800decc <Task_Reveive+0x11c>)
 800ddc6:	701a      	strb	r2, [r3, #0]
		 test2 =  DIGITAL_IO_GetInput(&Signal_DownShift);
 800ddc8:	4841      	ldr	r0, [pc, #260]	; (800ded0 <Task_Reveive+0x120>)
 800ddca:	f7ff ff0d 	bl	800dbe8 <DIGITAL_IO_GetInput>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	b2da      	uxtb	r2, r3
 800ddd2:	4b40      	ldr	r3, [pc, #256]	; (800ded4 <Task_Reveive+0x124>)
 800ddd4:	701a      	strb	r2, [r3, #0]

		  //CAN
		  CAN_1_Receive();
 800ddd6:	f7fd ffcd 	bl	800bd74 <CAN_1_Receive>
		  CAN_2_Receive();
 800ddda:	f7fe fb6f 	bl	800c4bc <CAN_2_Receive>

		  //IOPort
		  IOPort_readDINS();
 800ddde:	f7ff fa21 	bl	800d224 <IOPort_readDINS>
		  IOPort_readAINS();
 800dde2:	f7ff fadd 	bl	800d3a0 <IOPort_readAINS>

		  //Simulink
		  FUNC_InputData();
 800dde6:	f7f2 fb27 	bl	8000438 <FUNC_InputData>

		  //Reset Watchdog
		  if(wachdog_reset[0] & wachdog_reset[1])
 800ddea:	4b3b      	ldr	r3, [pc, #236]	; (800ded8 <Task_Reveive+0x128>)
 800ddec:	781a      	ldrb	r2, [r3, #0]
 800ddee:	4b3a      	ldr	r3, [pc, #232]	; (800ded8 <Task_Reveive+0x128>)
 800ddf0:	785b      	ldrb	r3, [r3, #1]
 800ddf2:	4013      	ands	r3, r2
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d007      	beq.n	800de0a <Task_Reveive+0x5a>
		  {
			  Watchdog_Reset();
 800ddfa:	f7fe ff3b 	bl	800cc74 <Watchdog_Reset>

			  wachdog_reset[0]=0;
 800ddfe:	4b36      	ldr	r3, [pc, #216]	; (800ded8 <Task_Reveive+0x128>)
 800de00:	2200      	movs	r2, #0
 800de02:	701a      	strb	r2, [r3, #0]
			  wachdog_reset[1]=0;
 800de04:	4b34      	ldr	r3, [pc, #208]	; (800ded8 <Task_Reveive+0x128>)
 800de06:	2200      	movs	r2, #0
 800de08:	705a      	strb	r2, [r3, #1]
		  }

		  //Start Transmission-Task if shift up or down request occurs
		  if((*canData.STW_shift_up_request == 1) | (*canData.STW_shift_down_request == 1) | (*IOportData.x_clutch_STW < clutch_STW_threshold) | shiftDownInterrupt | shiftUpInterrupt | *canData.LC_dash_bit)
 800de0a:	4b34      	ldr	r3, [pc, #208]	; (800dedc <Task_Reveive+0x12c>)
 800de0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	2b01      	cmp	r3, #1
 800de12:	bf0c      	ite	eq
 800de14:	2301      	moveq	r3, #1
 800de16:	2300      	movne	r3, #0
 800de18:	b2da      	uxtb	r2, r3
 800de1a:	4b30      	ldr	r3, [pc, #192]	; (800dedc <Task_Reveive+0x12c>)
 800de1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	2b01      	cmp	r3, #1
 800de22:	bf0c      	ite	eq
 800de24:	2301      	moveq	r3, #1
 800de26:	2300      	movne	r3, #0
 800de28:	b2db      	uxtb	r3, r3
 800de2a:	4313      	orrs	r3, r2
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	461e      	mov	r6, r3
 800de30:	4b2b      	ldr	r3, [pc, #172]	; (800dee0 <Task_Reveive+0x130>)
 800de32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de34:	e9d3 4500 	ldrd	r4, r5, [r3]
 800de38:	4b2a      	ldr	r3, [pc, #168]	; (800dee4 <Task_Reveive+0x134>)
 800de3a:	881b      	ldrh	r3, [r3, #0]
 800de3c:	4618      	mov	r0, r3
 800de3e:	f000 fdad 	bl	800e99c <__aeabi_i2d>
 800de42:	4680      	mov	r8, r0
 800de44:	4689      	mov	r9, r1
 800de46:	2301      	movs	r3, #1
 800de48:	469a      	mov	sl, r3
 800de4a:	4620      	mov	r0, r4
 800de4c:	4629      	mov	r1, r5
 800de4e:	4642      	mov	r2, r8
 800de50:	464b      	mov	r3, r9
 800de52:	f001 f87b 	bl	800ef4c <__aeabi_dcmplt>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d101      	bne.n	800de60 <Task_Reveive+0xb0>
 800de5c:	2300      	movs	r3, #0
 800de5e:	469a      	mov	sl, r3
 800de60:	fa5f f38a 	uxtb.w	r3, sl
 800de64:	4333      	orrs	r3, r6
 800de66:	4a20      	ldr	r2, [pc, #128]	; (800dee8 <Task_Reveive+0x138>)
 800de68:	7812      	ldrb	r2, [r2, #0]
 800de6a:	4313      	orrs	r3, r2
 800de6c:	4a1f      	ldr	r2, [pc, #124]	; (800deec <Task_Reveive+0x13c>)
 800de6e:	7812      	ldrb	r2, [r2, #0]
 800de70:	4313      	orrs	r3, r2
 800de72:	4a1a      	ldr	r2, [pc, #104]	; (800dedc <Task_Reveive+0x12c>)
 800de74:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800de78:	7812      	ldrb	r2, [r2, #0]
 800de7a:	4313      	orrs	r3, r2
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d021      	beq.n	800dec4 <Task_Reveive+0x114>
		  {
			  if(shiftDownInterrupt)
 800de80:	4b19      	ldr	r3, [pc, #100]	; (800dee8 <Task_Reveive+0x138>)
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d004      	beq.n	800de92 <Task_Reveive+0xe2>
			  {
				  VCU_DW.VAR_IN_STW_shift_down_request = 1;
 800de88:	4b19      	ldr	r3, [pc, #100]	; (800def0 <Task_Reveive+0x140>)
 800de8a:	2201      	movs	r2, #1
 800de8c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
 800de90:	e007      	b.n	800dea2 <Task_Reveive+0xf2>
			  }
			  else if(shiftUpInterrupt)
 800de92:	4b16      	ldr	r3, [pc, #88]	; (800deec <Task_Reveive+0x13c>)
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d003      	beq.n	800dea2 <Task_Reveive+0xf2>
			  {
				  VCU_DW.VAR_IN_STW_shift_up_request = 1;
 800de9a:	4b15      	ldr	r3, [pc, #84]	; (800def0 <Task_Reveive+0x140>)
 800de9c:	2201      	movs	r2, #1
 800de9e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
			  }
			  xTimerReset(TimerHandle_Transmission,0);
 800dea2:	4b14      	ldr	r3, [pc, #80]	; (800def4 <Task_Reveive+0x144>)
 800dea4:	681c      	ldr	r4, [r3, #0]
 800dea6:	f7fb ff01 	bl	8009cac <xTaskGetTickCount>
 800deaa:	4602      	mov	r2, r0
 800deac:	2300      	movs	r3, #0
 800deae:	9300      	str	r3, [sp, #0]
 800deb0:	4620      	mov	r0, r4
 800deb2:	2102      	movs	r1, #2
 800deb4:	2300      	movs	r3, #0
 800deb6:	f7fc fbad 	bl	800a614 <xTimerGenericCommand>
			  vTaskResume(TaskHandle_Transmission);
 800deba:	4b0f      	ldr	r3, [pc, #60]	; (800def8 <Task_Reveive+0x148>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	4618      	mov	r0, r3
 800dec0:	f7fb fda0 	bl	8009a04 <vTaskResume>
		  }
	}
 800dec4:	e779      	b.n	800ddba <Task_Reveive+0xa>
 800dec6:	bf00      	nop
 800dec8:	0800f68c 	.word	0x0800f68c
 800decc:	200008b6 	.word	0x200008b6
 800ded0:	0800f678 	.word	0x0800f678
 800ded4:	200008b7 	.word	0x200008b7
 800ded8:	200008b0 	.word	0x200008b0
 800dedc:	20001338 	.word	0x20001338
 800dee0:	200012c0 	.word	0x200012c0
 800dee4:	20000648 	.word	0x20000648
 800dee8:	20001250 	.word	0x20001250
 800deec:	20001270 	.word	0x20001270
 800def0:	20001058 	.word	0x20001058
 800def4:	200008ac 	.word	0x200008ac
 800def8:	200008a0 	.word	0x200008a0

0800defc <Task_LowPrioTask>:
}

void Task_LowPrioTask (void *p)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//Simulink
		FUNC_PumpAndFans();
 800df04:	f7f5 f9a4 	bl	8003250 <FUNC_PumpAndFans>
		FUNC_Brakelight();
 800df08:	f7f2 fa4e 	bl	80003a8 <FUNC_Brakelight>
		FUNC_Safety();
 800df0c:	f7f5 fa34 	bl	8003378 <FUNC_Safety>

		//Watchdog
		wachdog_reset[0] = 1;
 800df10:	4b08      	ldr	r3, [pc, #32]	; (800df34 <Task_LowPrioTask+0x38>)
 800df12:	2201      	movs	r2, #1
 800df14:	701a      	strb	r2, [r3, #0]

		//TaskHandler Delay
		vTaskDelay(pdMS_TO_TICKS(delay_for_lowPrioTasks));
 800df16:	4b08      	ldr	r3, [pc, #32]	; (800df38 <Task_LowPrioTask+0x3c>)
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	461a      	mov	r2, r3
 800df1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df20:	fb03 f302 	mul.w	r3, r3, r2
 800df24:	4a05      	ldr	r2, [pc, #20]	; (800df3c <Task_LowPrioTask+0x40>)
 800df26:	fba2 2303 	umull	r2, r3, r2, r3
 800df2a:	099b      	lsrs	r3, r3, #6
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7fb fc77 	bl	8009820 <vTaskDelay>
	}
 800df32:	e7e7      	b.n	800df04 <Task_LowPrioTask+0x8>
 800df34:	200008b0 	.word	0x200008b0
 800df38:	20000644 	.word	0x20000644
 800df3c:	10624dd3 	.word	0x10624dd3

0800df40 <Task_OneLoop>:
}

void Task_OneLoop(void *p)
//Backup-Task which runs everything in one loop
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
	while(1)
	{
		  //CAN
		  CAN_1_Receive();
 800df48:	f7fd ff14 	bl	800bd74 <CAN_1_Receive>
		  CAN_2_Receive();
 800df4c:	f7fe fab6 	bl	800c4bc <CAN_2_Receive>

		  //IOPort
		  IOPort_readDINS();
 800df50:	f7ff f968 	bl	800d224 <IOPort_readDINS>
		  IOPort_readAINS();
 800df54:	f7ff fa24 	bl	800d3a0 <IOPort_readAINS>

		  //Simulink
		  FUNC_InputData();
 800df58:	f7f2 fa6e 	bl	8000438 <FUNC_InputData>
		  FUNC_Transmission();
 800df5c:	f7f5 fab8 	bl	80034d0 <FUNC_Transmission>
		  FUNC_PumpAndFans();
 800df60:	f7f5 f976 	bl	8003250 <FUNC_PumpAndFans>
		  FUNC_Brakelight();
 800df64:	f7f2 fa20 	bl	80003a8 <FUNC_Brakelight>
		  FUNC_OutputData();
 800df68:	f7f3 fa3e 	bl	80013e8 <FUNC_OutputData>
		  FUNC_Safety();
 800df6c:	f7f5 fa04 	bl	8003378 <FUNC_Safety>

		   //CAN
		   CAN_1_Transmit();
 800df70:	f7fd ffc0 	bl	800bef4 <CAN_1_Transmit>
		   CAN_2_Transmit();
 800df74:	f7fe fd30 	bl	800c9d8 <CAN_2_Transmit>

		   //IOPort
		   IOPort_setDOUTS();
 800df78:	f7ff f920 	bl	800d1bc <IOPort_setDOUTS>
		   IOPort_setPWMOUTS();
 800df7c:	f7ff f984 	bl	800d288 <IOPort_setPWMOUTS>

		  //Reset Watchdog
		  Watchdog_Reset();
 800df80:	f7fe fe78 	bl	800cc74 <Watchdog_Reset>
	}
 800df84:	e7e0      	b.n	800df48 <Task_OneLoop+0x8>
 800df86:	bf00      	nop

0800df88 <vCallback_SuspendTransmission>:
}

static void vCallback_SuspendTransmission(xTimerHandle pxTimer)
{
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
	  shiftDownInterrupt = 0;
 800df90:	4b06      	ldr	r3, [pc, #24]	; (800dfac <vCallback_SuspendTransmission+0x24>)
 800df92:	2200      	movs	r2, #0
 800df94:	701a      	strb	r2, [r3, #0]
	  shiftUpInterrupt = 0;
 800df96:	4b06      	ldr	r3, [pc, #24]	; (800dfb0 <vCallback_SuspendTransmission+0x28>)
 800df98:	2200      	movs	r2, #0
 800df9a:	701a      	strb	r2, [r3, #0]
	  TransmissionTask_Stop = 1;
 800df9c:	4b05      	ldr	r3, [pc, #20]	; (800dfb4 <vCallback_SuspendTransmission+0x2c>)
 800df9e:	2201      	movs	r2, #1
 800dfa0:	701a      	strb	r2, [r3, #0]
	 //vTaskSuspend(TaskHandle_Transmission);
	 //xTimerStop(TimerHandle_Transmission, 0);
}
 800dfa2:	370c      	adds	r7, #12
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr
 800dfac:	20001250 	.word	0x20001250
 800dfb0:	20001270 	.word	0x20001270
 800dfb4:	200008b4 	.word	0x200008b4

0800dfb8 <RTOS_Handling_ini>:

void RTOS_Handling_ini()
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af02      	add	r7, sp, #8
	shiftDownInterrupt = 0;
 800dfbe:	4b3a      	ldr	r3, [pc, #232]	; (800e0a8 <RTOS_Handling_ini+0xf0>)
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	701a      	strb	r2, [r3, #0]
	shiftUpInterrupt = 0;
 800dfc4:	4b39      	ldr	r3, [pc, #228]	; (800e0ac <RTOS_Handling_ini+0xf4>)
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	701a      	strb	r2, [r3, #0]

	  xTaskCreate(Task_Reveive, "Task_Reveive", 200, (void*) 0, tskIDLE_PRIORITY + 0, &TaskHandle_Receive);
 800dfca:	2300      	movs	r3, #0
 800dfcc:	9300      	str	r3, [sp, #0]
 800dfce:	4b38      	ldr	r3, [pc, #224]	; (800e0b0 <RTOS_Handling_ini+0xf8>)
 800dfd0:	9301      	str	r3, [sp, #4]
 800dfd2:	4838      	ldr	r0, [pc, #224]	; (800e0b4 <RTOS_Handling_ini+0xfc>)
 800dfd4:	4938      	ldr	r1, [pc, #224]	; (800e0b8 <RTOS_Handling_ini+0x100>)
 800dfd6:	22c8      	movs	r2, #200	; 0xc8
 800dfd8:	2300      	movs	r3, #0
 800dfda:	f7fb facd 	bl	8009578 <xTaskCreate>
	  xTaskCreate(Task_LowPrioTask, "Task_LowPrioTask", 200, (void*) 0, tskIDLE_PRIORITY + 1, &TaskHandle_LowPrioTasks);
 800dfde:	2301      	movs	r3, #1
 800dfe0:	9300      	str	r3, [sp, #0]
 800dfe2:	4b36      	ldr	r3, [pc, #216]	; (800e0bc <RTOS_Handling_ini+0x104>)
 800dfe4:	9301      	str	r3, [sp, #4]
 800dfe6:	4836      	ldr	r0, [pc, #216]	; (800e0c0 <RTOS_Handling_ini+0x108>)
 800dfe8:	4936      	ldr	r1, [pc, #216]	; (800e0c4 <RTOS_Handling_ini+0x10c>)
 800dfea:	22c8      	movs	r2, #200	; 0xc8
 800dfec:	2300      	movs	r3, #0
 800dfee:	f7fb fac3 	bl	8009578 <xTaskCreate>
	  xTaskCreate(Task_Transmit, "Task_Transmit", 200, (void*) 0, tskIDLE_PRIORITY + 2, &TaskHandle_Transmit);
 800dff2:	2302      	movs	r3, #2
 800dff4:	9300      	str	r3, [sp, #0]
 800dff6:	4b34      	ldr	r3, [pc, #208]	; (800e0c8 <RTOS_Handling_ini+0x110>)
 800dff8:	9301      	str	r3, [sp, #4]
 800dffa:	4834      	ldr	r0, [pc, #208]	; (800e0cc <RTOS_Handling_ini+0x114>)
 800dffc:	4934      	ldr	r1, [pc, #208]	; (800e0d0 <RTOS_Handling_ini+0x118>)
 800dffe:	22c8      	movs	r2, #200	; 0xc8
 800e000:	2300      	movs	r3, #0
 800e002:	f7fb fab9 	bl	8009578 <xTaskCreate>
	  xTaskCreate(Task_Transmission, "Task_Transmission", 200, (void*) 0, tskIDLE_PRIORITY + 3, &TaskHandle_Transmission);
 800e006:	2303      	movs	r3, #3
 800e008:	9300      	str	r3, [sp, #0]
 800e00a:	4b32      	ldr	r3, [pc, #200]	; (800e0d4 <RTOS_Handling_ini+0x11c>)
 800e00c:	9301      	str	r3, [sp, #4]
 800e00e:	4832      	ldr	r0, [pc, #200]	; (800e0d8 <RTOS_Handling_ini+0x120>)
 800e010:	4932      	ldr	r1, [pc, #200]	; (800e0dc <RTOS_Handling_ini+0x124>)
 800e012:	22c8      	movs	r2, #200	; 0xc8
 800e014:	2300      	movs	r3, #0
 800e016:	f7fb faaf 	bl	8009578 <xTaskCreate>
	  xTaskCreate(Task_OneLoop, "Task_OneLoopTask", 200, (void*) 0, tskIDLE_PRIORITY + 4, &TaskHandle_OneLoopTask);
 800e01a:	2304      	movs	r3, #4
 800e01c:	9300      	str	r3, [sp, #0]
 800e01e:	4b30      	ldr	r3, [pc, #192]	; (800e0e0 <RTOS_Handling_ini+0x128>)
 800e020:	9301      	str	r3, [sp, #4]
 800e022:	4830      	ldr	r0, [pc, #192]	; (800e0e4 <RTOS_Handling_ini+0x12c>)
 800e024:	4930      	ldr	r1, [pc, #192]	; (800e0e8 <RTOS_Handling_ini+0x130>)
 800e026:	22c8      	movs	r2, #200	; 0xc8
 800e028:	2300      	movs	r3, #0
 800e02a:	f7fb faa5 	bl	8009578 <xTaskCreate>

	  TimerHandle_Transmission = xTimerCreate("Timer_Transmission", pdMS_TO_TICKS(runtime_for_transmission), pdFALSE, (void*) 0, vCallback_SuspendTransmission);
 800e02e:	4b2f      	ldr	r3, [pc, #188]	; (800e0ec <RTOS_Handling_ini+0x134>)
 800e030:	881b      	ldrh	r3, [r3, #0]
 800e032:	461a      	mov	r2, r3
 800e034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e038:	fb03 f302 	mul.w	r3, r3, r2
 800e03c:	4a2c      	ldr	r2, [pc, #176]	; (800e0f0 <RTOS_Handling_ini+0x138>)
 800e03e:	fba2 2303 	umull	r2, r3, r2, r3
 800e042:	099a      	lsrs	r2, r3, #6
 800e044:	4b2b      	ldr	r3, [pc, #172]	; (800e0f4 <RTOS_Handling_ini+0x13c>)
 800e046:	9300      	str	r3, [sp, #0]
 800e048:	482b      	ldr	r0, [pc, #172]	; (800e0f8 <RTOS_Handling_ini+0x140>)
 800e04a:	4611      	mov	r1, r2
 800e04c:	2200      	movs	r2, #0
 800e04e:	2300      	movs	r3, #0
 800e050:	f7fc fa84 	bl	800a55c <xTimerCreate>
 800e054:	4602      	mov	r2, r0
 800e056:	4b29      	ldr	r3, [pc, #164]	; (800e0fc <RTOS_Handling_ini+0x144>)
 800e058:	601a      	str	r2, [r3, #0]

	  vTaskSuspend(TaskHandle_OneLoopTask);
 800e05a:	4b21      	ldr	r3, [pc, #132]	; (800e0e0 <RTOS_Handling_ini+0x128>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4618      	mov	r0, r3
 800e060:	f7fb fc10 	bl	8009884 <vTaskSuspend>
	  vTaskSuspend(TaskHandle_Transmission);
 800e064:	4b1b      	ldr	r3, [pc, #108]	; (800e0d4 <RTOS_Handling_ini+0x11c>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4618      	mov	r0, r3
 800e06a:	f7fb fc0b 	bl	8009884 <vTaskSuspend>

	  //run one loop task if one-loop-mode is active
	  if(oneloopmode)
 800e06e:	4b24      	ldr	r3, [pc, #144]	; (800e100 <RTOS_Handling_ini+0x148>)
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d013      	beq.n	800e09e <RTOS_Handling_ini+0xe6>
	  {
		  vTaskSuspend(TaskHandle_Transmit);
 800e076:	4b14      	ldr	r3, [pc, #80]	; (800e0c8 <RTOS_Handling_ini+0x110>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fb fc02 	bl	8009884 <vTaskSuspend>
		  vTaskSuspend(TaskHandle_LowPrioTasks);
 800e080:	4b0e      	ldr	r3, [pc, #56]	; (800e0bc <RTOS_Handling_ini+0x104>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4618      	mov	r0, r3
 800e086:	f7fb fbfd 	bl	8009884 <vTaskSuspend>
		  vTaskSuspend(TaskHandle_Receive);
 800e08a:	4b09      	ldr	r3, [pc, #36]	; (800e0b0 <RTOS_Handling_ini+0xf8>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4618      	mov	r0, r3
 800e090:	f7fb fbf8 	bl	8009884 <vTaskSuspend>

		  vTaskResume(TaskHandle_OneLoopTask);
 800e094:	4b12      	ldr	r3, [pc, #72]	; (800e0e0 <RTOS_Handling_ini+0x128>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4618      	mov	r0, r3
 800e09a:	f7fb fcb3 	bl	8009a04 <vTaskResume>
	  }

	  vTaskStartScheduler();
 800e09e:	f7fb fd0f 	bl	8009ac0 <vTaskStartScheduler>
}
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	20001250 	.word	0x20001250
 800e0ac:	20001270 	.word	0x20001270
 800e0b0:	20000898 	.word	0x20000898
 800e0b4:	0800ddb1 	.word	0x0800ddb1
 800e0b8:	0800fa60 	.word	0x0800fa60
 800e0bc:	200008a4 	.word	0x200008a4
 800e0c0:	0800defd 	.word	0x0800defd
 800e0c4:	0800fa70 	.word	0x0800fa70
 800e0c8:	2000089c 	.word	0x2000089c
 800e0cc:	0800dd65 	.word	0x0800dd65
 800e0d0:	0800fa84 	.word	0x0800fa84
 800e0d4:	200008a0 	.word	0x200008a0
 800e0d8:	0800dc0d 	.word	0x0800dc0d
 800e0dc:	0800fa94 	.word	0x0800fa94
 800e0e0:	200008a8 	.word	0x200008a8
 800e0e4:	0800df41 	.word	0x0800df41
 800e0e8:	0800faa8 	.word	0x0800faa8
 800e0ec:	20000646 	.word	0x20000646
 800e0f0:	10624dd3 	.word	0x10624dd3
 800e0f4:	0800df89 	.word	0x0800df89
 800e0f8:	0800fabc 	.word	0x0800fabc
 800e0fc:	200008ac 	.word	0x200008ac
 800e100:	200008b5 	.word	0x200008b5

0800e104 <getbits>:
in the right most n bits; complementing that with ~ makes a mask with ones in the rightmost n bits.
vgl. "THE C PROGRAMMING LANGUGE" Brian W. KERNIGHAN PAGE 49
ACHTUNG!!! das ganz rechte bit des Wortes is bit 0. BSP getbis(x,4,3) gibt bit 4,3,2 bit von rechts gezählt zurück.
*/
unsigned getbits(unsigned x,int p, int n)
{
 800e104:	b480      	push	{r7}
 800e106:	b085      	sub	sp, #20
 800e108:	af00      	add	r7, sp, #0
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	607a      	str	r2, [r7, #4]
	return(x >> (p+1-n)) & ~(~0 << n);
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	1c5a      	adds	r2, r3, #1
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	1ad3      	subs	r3, r2, r3
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	fa22 f303 	lsr.w	r3, r2, r3
 800e11e:	f04f 31ff 	mov.w	r1, #4294967295
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	fa01 f202 	lsl.w	r2, r1, r2
 800e128:	43d2      	mvns	r2, r2
 800e12a:	4013      	ands	r3, r2
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3714      	adds	r7, #20
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <getbits64>:

unsigned getbits64(unsigned long long int x,int p, int n)
{
 800e138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e13c:	b085      	sub	sp, #20
 800e13e:	af00      	add	r7, sp, #0
 800e140:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800e144:	607a      	str	r2, [r7, #4]
 800e146:	603b      	str	r3, [r7, #0]
	return(unsigned)((x >> (p+1-n)) & ~(~0ULL << n));
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	1c5a      	adds	r2, r3, #1
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	1ad1      	subs	r1, r2, r3
 800e150:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e154:	f1c1 0620 	rsb	r6, r1, #32
 800e158:	f1a1 0020 	sub.w	r0, r1, #32
 800e15c:	fa22 f801 	lsr.w	r8, r2, r1
 800e160:	fa03 f606 	lsl.w	r6, r3, r6
 800e164:	ea48 0806 	orr.w	r8, r8, r6
 800e168:	fa23 f000 	lsr.w	r0, r3, r0
 800e16c:	ea48 0800 	orr.w	r8, r8, r0
 800e170:	fa23 f901 	lsr.w	r9, r3, r1
 800e174:	46c6      	mov	lr, r8
 800e176:	f04f 32ff 	mov.w	r2, #4294967295
 800e17a:	f04f 33ff 	mov.w	r3, #4294967295
 800e17e:	6839      	ldr	r1, [r7, #0]
 800e180:	f1a1 0620 	sub.w	r6, r1, #32
 800e184:	f1c1 0020 	rsb	r0, r1, #32
 800e188:	fa03 f501 	lsl.w	r5, r3, r1
 800e18c:	fa02 f606 	lsl.w	r6, r2, r6
 800e190:	4335      	orrs	r5, r6
 800e192:	fa22 f000 	lsr.w	r0, r2, r0
 800e196:	4305      	orrs	r5, r0
 800e198:	fa02 f401 	lsl.w	r4, r2, r1
 800e19c:	4623      	mov	r3, r4
 800e19e:	43db      	mvns	r3, r3
 800e1a0:	ea0e 0303 	and.w	r3, lr, r3
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3714      	adds	r7, #20
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1ae:	bf00      	nop

0800e1b0 <setbitTrue>:
{
	return (MSB<<8)|LSB;
}

void setbitTrue(unsigned long long *x, int n)
{
 800e1b0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800e1b4:	b082      	sub	sp, #8
 800e1b6:	af00      	add	r7, sp, #0
 800e1b8:	6078      	str	r0, [r7, #4]
 800e1ba:	6039      	str	r1, [r7, #0]
	*x |= (1ULL<<n);
 800e1bc:	6879      	ldr	r1, [r7, #4]
 800e1be:	e9d1 8900 	ldrd	r8, r9, [r1]
 800e1c2:	f04f 0001 	mov.w	r0, #1
 800e1c6:	f04f 0100 	mov.w	r1, #0
 800e1ca:	683c      	ldr	r4, [r7, #0]
 800e1cc:	f1a4 0620 	sub.w	r6, r4, #32
 800e1d0:	f1c4 0520 	rsb	r5, r4, #32
 800e1d4:	fa01 f304 	lsl.w	r3, r1, r4
 800e1d8:	fa00 f606 	lsl.w	r6, r0, r6
 800e1dc:	4333      	orrs	r3, r6
 800e1de:	fa20 f505 	lsr.w	r5, r0, r5
 800e1e2:	432b      	orrs	r3, r5
 800e1e4:	fa00 f204 	lsl.w	r2, r0, r4
 800e1e8:	ea42 0208 	orr.w	r2, r2, r8
 800e1ec:	ea43 0309 	orr.w	r3, r3, r9
 800e1f0:	6879      	ldr	r1, [r7, #4]
 800e1f2:	e9c1 2300 	strd	r2, r3, [r1]
}
 800e1f6:	3708      	adds	r7, #8
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e1fe:	4770      	bx	lr

0800e200 <setbitFalse>:

void setbitFalse(unsigned long long *x, int n)
{
 800e200:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800e204:	b082      	sub	sp, #8
 800e206:	af00      	add	r7, sp, #0
 800e208:	6078      	str	r0, [r7, #4]
 800e20a:	6039      	str	r1, [r7, #0]
	*x &= ~(1ULL<<n);
 800e20c:	6879      	ldr	r1, [r7, #4]
 800e20e:	e9d1 8900 	ldrd	r8, r9, [r1]
 800e212:	f04f 0001 	mov.w	r0, #1
 800e216:	f04f 0100 	mov.w	r1, #0
 800e21a:	683c      	ldr	r4, [r7, #0]
 800e21c:	f1a4 0620 	sub.w	r6, r4, #32
 800e220:	f1c4 0520 	rsb	r5, r4, #32
 800e224:	fa01 f304 	lsl.w	r3, r1, r4
 800e228:	fa00 f606 	lsl.w	r6, r0, r6
 800e22c:	4333      	orrs	r3, r6
 800e22e:	fa20 f505 	lsr.w	r5, r0, r5
 800e232:	432b      	orrs	r3, r5
 800e234:	fa00 f204 	lsl.w	r2, r0, r4
 800e238:	ea6f 0202 	mvn.w	r2, r2
 800e23c:	ea6f 0303 	mvn.w	r3, r3
 800e240:	ea02 0208 	and.w	r2, r2, r8
 800e244:	ea03 0309 	and.w	r3, r3, r9
 800e248:	6879      	ldr	r1, [r7, #4]
 800e24a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800e24e:	3708      	adds	r7, #8
 800e250:	46bd      	mov	sp, r7
 800e252:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e256:	4770      	bx	lr

0800e258 <main>:

/****************************************************
   Main Function
 *****************************************************/
int main (void)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	af00      	add	r7, sp, #0
  DAVE_Init();
 800e25c:	f7fd fba8 	bl	800b9b0 <DAVE_Init>
  Watchdog_Start();
 800e260:	f7fe fd02 	bl	800cc68 <Watchdog_Start>
  VCU_initialize();
 800e264:	f7f7 ffda 	bl	800621c <VCU_initialize>
  CAN_1_ini();
 800e268:	f7fd fcb4 	bl	800bbd4 <CAN_1_ini>
  CAN_2_ini();
 800e26c:	f7fd ffc4 	bl	800c1f8 <CAN_2_ini>
  IOPort_ini();
 800e270:	f7fe feea 	bl	800d048 <IOPort_ini>
  RTOS_Handling_ini();  //Kupplung, Detect increase Block ???
 800e274:	f7ff fea0 	bl	800dfb8 <RTOS_Handling_ini>
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop

0800e280 <floor>:
 800e280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e284:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800e288:	f2a8 35ff 	subw	r5, r8, #1023	; 0x3ff
 800e28c:	2d13      	cmp	r5, #19
 800e28e:	4602      	mov	r2, r0
 800e290:	460b      	mov	r3, r1
 800e292:	460c      	mov	r4, r1
 800e294:	4607      	mov	r7, r0
 800e296:	4689      	mov	r9, r1
 800e298:	4606      	mov	r6, r0
 800e29a:	dc1d      	bgt.n	800e2d8 <floor+0x58>
 800e29c:	2d00      	cmp	r5, #0
 800e29e:	db40      	blt.n	800e322 <floor+0xa2>
 800e2a0:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800e38c <floor+0x10c>
 800e2a4:	fa48 f805 	asr.w	r8, r8, r5
 800e2a8:	ea08 0e01 	and.w	lr, r8, r1
 800e2ac:	ea5e 0707 	orrs.w	r7, lr, r7
 800e2b0:	d017      	beq.n	800e2e2 <floor+0x62>
 800e2b2:	a334      	add	r3, pc, #208	; (adr r3, 800e384 <floor+0x104>)
 800e2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b8:	f000 fa24 	bl	800e704 <__adddf3>
 800e2bc:	2200      	movs	r2, #0
 800e2be:	2300      	movs	r3, #0
 800e2c0:	f000 fe62 	bl	800ef88 <__aeabi_dcmpgt>
 800e2c4:	b120      	cbz	r0, 800e2d0 <floor+0x50>
 800e2c6:	2c00      	cmp	r4, #0
 800e2c8:	db3f      	blt.n	800e34a <floor+0xca>
 800e2ca:	ea29 0408 	bic.w	r4, r9, r8
 800e2ce:	2600      	movs	r6, #0
 800e2d0:	4621      	mov	r1, r4
 800e2d2:	4630      	mov	r0, r6
 800e2d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2d8:	2d33      	cmp	r5, #51	; 0x33
 800e2da:	dd06      	ble.n	800e2ea <floor+0x6a>
 800e2dc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800e2e0:	d02f      	beq.n	800e342 <floor+0xc2>
 800e2e2:	4610      	mov	r0, r2
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2ea:	f2a8 4e13 	subw	lr, r8, #1043	; 0x413
 800e2ee:	f04f 37ff 	mov.w	r7, #4294967295
 800e2f2:	fa27 f70e 	lsr.w	r7, r7, lr
 800e2f6:	4207      	tst	r7, r0
 800e2f8:	d0f3      	beq.n	800e2e2 <floor+0x62>
 800e2fa:	a322      	add	r3, pc, #136	; (adr r3, 800e384 <floor+0x104>)
 800e2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e300:	f000 fa00 	bl	800e704 <__adddf3>
 800e304:	2200      	movs	r2, #0
 800e306:	2300      	movs	r3, #0
 800e308:	f000 fe3e 	bl	800ef88 <__aeabi_dcmpgt>
 800e30c:	2800      	cmp	r0, #0
 800e30e:	d0df      	beq.n	800e2d0 <floor+0x50>
 800e310:	2c00      	cmp	r4, #0
 800e312:	db1f      	blt.n	800e354 <floor+0xd4>
 800e314:	464c      	mov	r4, r9
 800e316:	ea26 0607 	bic.w	r6, r6, r7
 800e31a:	4621      	mov	r1, r4
 800e31c:	4630      	mov	r0, r6
 800e31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e322:	a318      	add	r3, pc, #96	; (adr r3, 800e384 <floor+0x104>)
 800e324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e328:	f000 f9ec 	bl	800e704 <__adddf3>
 800e32c:	2200      	movs	r2, #0
 800e32e:	2300      	movs	r3, #0
 800e330:	f000 fe2a 	bl	800ef88 <__aeabi_dcmpgt>
 800e334:	2800      	cmp	r0, #0
 800e336:	d0cb      	beq.n	800e2d0 <floor+0x50>
 800e338:	2c00      	cmp	r4, #0
 800e33a:	db19      	blt.n	800e370 <floor+0xf0>
 800e33c:	2600      	movs	r6, #0
 800e33e:	4634      	mov	r4, r6
 800e340:	e7c6      	b.n	800e2d0 <floor+0x50>
 800e342:	f000 f9df 	bl	800e704 <__adddf3>
 800e346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e34a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e34e:	412b      	asrs	r3, r5
 800e350:	4499      	add	r9, r3
 800e352:	e7ba      	b.n	800e2ca <floor+0x4a>
 800e354:	2d14      	cmp	r5, #20
 800e356:	d008      	beq.n	800e36a <floor+0xea>
 800e358:	f5c8 6886 	rsb	r8, r8, #1072	; 0x430
 800e35c:	f108 0803 	add.w	r8, r8, #3
 800e360:	2301      	movs	r3, #1
 800e362:	fa03 f308 	lsl.w	r3, r3, r8
 800e366:	199e      	adds	r6, r3, r6
 800e368:	d3d4      	bcc.n	800e314 <floor+0x94>
 800e36a:	f109 0901 	add.w	r9, r9, #1
 800e36e:	e7d1      	b.n	800e314 <floor+0x94>
 800e370:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
 800e374:	4b02      	ldr	r3, [pc, #8]	; (800e380 <floor+0x100>)
 800e376:	433a      	orrs	r2, r7
 800e378:	bf18      	it	ne
 800e37a:	461c      	movne	r4, r3
 800e37c:	2600      	movs	r6, #0
 800e37e:	e7a7      	b.n	800e2d0 <floor+0x50>
 800e380:	bff00000 	.word	0xbff00000
 800e384:	8800759c 	.word	0x8800759c
 800e388:	7e37e43c 	.word	0x7e37e43c
 800e38c:	000fffff 	.word	0x000fffff

0800e390 <fmod>:
 800e390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e394:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800e440 <fmod+0xb0>
 800e398:	b08a      	sub	sp, #40	; 0x28
 800e39a:	461f      	mov	r7, r3
 800e39c:	4680      	mov	r8, r0
 800e39e:	4689      	mov	r9, r1
 800e3a0:	4616      	mov	r6, r2
 800e3a2:	f000 f84f 	bl	800e444 <__ieee754_fmod>
 800e3a6:	f99a 3000 	ldrsb.w	r3, [sl]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	4604      	mov	r4, r0
 800e3ae:	460d      	mov	r5, r1
 800e3b0:	d004      	beq.n	800e3bc <fmod+0x2c>
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	4639      	mov	r1, r7
 800e3b6:	f000 f971 	bl	800e69c <__fpclassifyd>
 800e3ba:	b920      	cbnz	r0, 800e3c6 <fmod+0x36>
 800e3bc:	4620      	mov	r0, r4
 800e3be:	4629      	mov	r1, r5
 800e3c0:	b00a      	add	sp, #40	; 0x28
 800e3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3c6:	4640      	mov	r0, r8
 800e3c8:	4649      	mov	r1, r9
 800e3ca:	f000 f967 	bl	800e69c <__fpclassifyd>
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	d0f4      	beq.n	800e3bc <fmod+0x2c>
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	4639      	mov	r1, r7
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	2300      	movs	r3, #0
 800e3da:	f000 fdad 	bl	800ef38 <__aeabi_dcmpeq>
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	d0ec      	beq.n	800e3bc <fmod+0x2c>
 800e3e2:	4b16      	ldr	r3, [pc, #88]	; (800e43c <fmod+0xac>)
 800e3e4:	f89a 4000 	ldrb.w	r4, [sl]
 800e3e8:	9301      	str	r3, [sp, #4]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e3f2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e3f6:	9200      	str	r2, [sp, #0]
 800e3f8:	9308      	str	r3, [sp, #32]
 800e3fa:	b194      	cbz	r4, 800e422 <fmod+0x92>
 800e3fc:	2000      	movs	r0, #0
 800e3fe:	2100      	movs	r1, #0
 800e400:	4602      	mov	r2, r0
 800e402:	460b      	mov	r3, r1
 800e404:	f000 fc5a 	bl	800ecbc <__aeabi_ddiv>
 800e408:	2c02      	cmp	r4, #2
 800e40a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e40e:	d10a      	bne.n	800e426 <fmod+0x96>
 800e410:	f000 fde4 	bl	800efdc <__errno>
 800e414:	2321      	movs	r3, #33	; 0x21
 800e416:	6003      	str	r3, [r0, #0]
 800e418:	9b08      	ldr	r3, [sp, #32]
 800e41a:	b953      	cbnz	r3, 800e432 <fmod+0xa2>
 800e41c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e420:	e7ce      	b.n	800e3c0 <fmod+0x30>
 800e422:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800e426:	4668      	mov	r0, sp
 800e428:	f000 f964 	bl	800e6f4 <matherr>
 800e42c:	2800      	cmp	r0, #0
 800e42e:	d1f3      	bne.n	800e418 <fmod+0x88>
 800e430:	e7ee      	b.n	800e410 <fmod+0x80>
 800e432:	f000 fdd3 	bl	800efdc <__errno>
 800e436:	9b08      	ldr	r3, [sp, #32]
 800e438:	6003      	str	r3, [r0, #0]
 800e43a:	e7ef      	b.n	800e41c <fmod+0x8c>
 800e43c:	0800fad0 	.word	0x0800fad0
 800e440:	2000064a 	.word	0x2000064a

0800e444 <__ieee754_fmod>:
 800e444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e448:	4690      	mov	r8, r2
 800e44a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e44e:	ea52 0408 	orrs.w	r4, r2, r8
 800e452:	4682      	mov	sl, r0
 800e454:	468b      	mov	fp, r1
 800e456:	4699      	mov	r9, r3
 800e458:	4618      	mov	r0, r3
 800e45a:	4641      	mov	r1, r8
 800e45c:	d01f      	beq.n	800e49e <__ieee754_fmod+0x5a>
 800e45e:	465d      	mov	r5, fp
 800e460:	f00b 4600 	and.w	r6, fp, #2147483648	; 0x80000000
 800e464:	4c86      	ldr	r4, [pc, #536]	; (800e680 <__ieee754_fmod+0x23c>)
 800e466:	4075      	eors	r5, r6
 800e468:	42a5      	cmp	r5, r4
 800e46a:	dc18      	bgt.n	800e49e <__ieee754_fmod+0x5a>
 800e46c:	424c      	negs	r4, r1
 800e46e:	430c      	orrs	r4, r1
 800e470:	f8df e220 	ldr.w	lr, [pc, #544]	; 800e694 <__ieee754_fmod+0x250>
 800e474:	ea42 74d4 	orr.w	r4, r2, r4, lsr #31
 800e478:	4574      	cmp	r4, lr
 800e47a:	d810      	bhi.n	800e49e <__ieee754_fmod+0x5a>
 800e47c:	4295      	cmp	r5, r2
 800e47e:	46d4      	mov	ip, sl
 800e480:	4653      	mov	r3, sl
 800e482:	4647      	mov	r7, r8
 800e484:	dc17      	bgt.n	800e4b6 <__ieee754_fmod+0x72>
 800e486:	db28      	blt.n	800e4da <__ieee754_fmod+0x96>
 800e488:	45c2      	cmp	sl, r8
 800e48a:	d326      	bcc.n	800e4da <__ieee754_fmod+0x96>
 800e48c:	d113      	bne.n	800e4b6 <__ieee754_fmod+0x72>
 800e48e:	4b7d      	ldr	r3, [pc, #500]	; (800e684 <__ieee754_fmod+0x240>)
 800e490:	0ff6      	lsrs	r6, r6, #31
 800e492:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e496:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e49a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e49e:	4642      	mov	r2, r8
 800e4a0:	464b      	mov	r3, r9
 800e4a2:	4650      	mov	r0, sl
 800e4a4:	4659      	mov	r1, fp
 800e4a6:	f000 fadf 	bl	800ea68 <__aeabi_dmul>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	460b      	mov	r3, r1
 800e4ae:	f000 fc05 	bl	800ecbc <__aeabi_ddiv>
 800e4b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4b6:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800e4ba:	da12      	bge.n	800e4e2 <__ieee754_fmod+0x9e>
 800e4bc:	2d00      	cmp	r5, #0
 800e4be:	f040 80a2 	bne.w	800e606 <__ieee754_fmod+0x1c2>
 800e4c2:	f1bc 0f00 	cmp.w	ip, #0
 800e4c6:	4664      	mov	r4, ip
 800e4c8:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 800e698 <__ieee754_fmod+0x254>
 800e4cc:	dd0d      	ble.n	800e4ea <__ieee754_fmod+0xa6>
 800e4ce:	0064      	lsls	r4, r4, #1
 800e4d0:	2c00      	cmp	r4, #0
 800e4d2:	f108 38ff 	add.w	r8, r8, #4294967295
 800e4d6:	dcfa      	bgt.n	800e4ce <__ieee754_fmod+0x8a>
 800e4d8:	e007      	b.n	800e4ea <__ieee754_fmod+0xa6>
 800e4da:	4650      	mov	r0, sl
 800e4dc:	4659      	mov	r1, fp
 800e4de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4e2:	ea4f 5825 	mov.w	r8, r5, asr #20
 800e4e6:	f2a8 38ff 	subw	r8, r8, #1023	; 0x3ff
 800e4ea:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800e4ee:	da0d      	bge.n	800e50c <__ieee754_fmod+0xc8>
 800e4f0:	2a00      	cmp	r2, #0
 800e4f2:	f040 80a1 	bne.w	800e638 <__ieee754_fmod+0x1f4>
 800e4f6:	2900      	cmp	r1, #0
 800e4f8:	460c      	mov	r4, r1
 800e4fa:	f8df e19c 	ldr.w	lr, [pc, #412]	; 800e698 <__ieee754_fmod+0x254>
 800e4fe:	dd09      	ble.n	800e514 <__ieee754_fmod+0xd0>
 800e500:	0064      	lsls	r4, r4, #1
 800e502:	2c00      	cmp	r4, #0
 800e504:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e508:	dcfa      	bgt.n	800e500 <__ieee754_fmod+0xbc>
 800e50a:	e003      	b.n	800e514 <__ieee754_fmod+0xd0>
 800e50c:	ea4f 5e22 	mov.w	lr, r2, asr #20
 800e510:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 800e514:	4c5c      	ldr	r4, [pc, #368]	; (800e688 <__ieee754_fmod+0x244>)
 800e516:	45a0      	cmp	r8, r4
 800e518:	db58      	blt.n	800e5cc <__ieee754_fmod+0x188>
 800e51a:	f3c5 0413 	ubfx	r4, r5, #0, #20
 800e51e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800e522:	4d59      	ldr	r5, [pc, #356]	; (800e688 <__ieee754_fmod+0x244>)
 800e524:	45ae      	cmp	lr, r5
 800e526:	db5f      	blt.n	800e5e8 <__ieee754_fmod+0x1a4>
 800e528:	f3c0 0113 	ubfx	r1, r0, #0, #20
 800e52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e530:	ebce 0008 	rsb	r0, lr, r8
 800e534:	e007      	b.n	800e546 <__ieee754_fmod+0x102>
 800e536:	ea52 0305 	orrs.w	r3, r2, r5
 800e53a:	d012      	beq.n	800e562 <__ieee754_fmod+0x11e>
 800e53c:	0fec      	lsrs	r4, r5, #31
 800e53e:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800e542:	006b      	lsls	r3, r5, #1
 800e544:	3801      	subs	r0, #1
 800e546:	1bdd      	subs	r5, r3, r7
 800e548:	1a62      	subs	r2, r4, r1
 800e54a:	b190      	cbz	r0, 800e572 <__ieee754_fmod+0x12e>
 800e54c:	42bb      	cmp	r3, r7
 800e54e:	bf38      	it	cc
 800e550:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800e554:	2a00      	cmp	r2, #0
 800e556:	daee      	bge.n	800e536 <__ieee754_fmod+0xf2>
 800e558:	0fda      	lsrs	r2, r3, #31
 800e55a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800e55e:	005b      	lsls	r3, r3, #1
 800e560:	e7f0      	b.n	800e544 <__ieee754_fmod+0x100>
 800e562:	4b48      	ldr	r3, [pc, #288]	; (800e684 <__ieee754_fmod+0x240>)
 800e564:	0ff6      	lsrs	r6, r6, #31
 800e566:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e56a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e56e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e572:	429f      	cmp	r7, r3
 800e574:	4611      	mov	r1, r2
 800e576:	bf88      	it	hi
 800e578:	f102 31ff 	addhi.w	r1, r2, #4294967295
 800e57c:	2900      	cmp	r1, #0
 800e57e:	bfac      	ite	ge
 800e580:	1bdb      	subge	r3, r3, r7
 800e582:	4621      	movlt	r1, r4
 800e584:	ea51 0203 	orrs.w	r2, r1, r3
 800e588:	d0eb      	beq.n	800e562 <__ieee754_fmod+0x11e>
 800e58a:	4840      	ldr	r0, [pc, #256]	; (800e68c <__ieee754_fmod+0x248>)
 800e58c:	4281      	cmp	r1, r0
 800e58e:	dc08      	bgt.n	800e5a2 <__ieee754_fmod+0x15e>
 800e590:	0fda      	lsrs	r2, r3, #31
 800e592:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e596:	4281      	cmp	r1, r0
 800e598:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e59c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e5a0:	ddf6      	ble.n	800e590 <__ieee754_fmod+0x14c>
 800e5a2:	4a39      	ldr	r2, [pc, #228]	; (800e688 <__ieee754_fmod+0x244>)
 800e5a4:	4596      	cmp	lr, r2
 800e5a6:	da50      	bge.n	800e64a <__ieee754_fmod+0x206>
 800e5a8:	4a37      	ldr	r2, [pc, #220]	; (800e688 <__ieee754_fmod+0x244>)
 800e5aa:	ebce 0202 	rsb	r2, lr, r2
 800e5ae:	2a14      	cmp	r2, #20
 800e5b0:	dc55      	bgt.n	800e65e <__ieee754_fmod+0x21a>
 800e5b2:	f20e 4e1e 	addw	lr, lr, #1054	; 0x41e
 800e5b6:	40d3      	lsrs	r3, r2
 800e5b8:	fa01 f00e 	lsl.w	r0, r1, lr
 800e5bc:	4303      	orrs	r3, r0
 800e5be:	fa41 f202 	asr.w	r2, r1, r2
 800e5c2:	ea42 0106 	orr.w	r1, r2, r6
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5cc:	4b2e      	ldr	r3, [pc, #184]	; (800e688 <__ieee754_fmod+0x244>)
 800e5ce:	ebc8 0303 	rsb	r3, r8, r3
 800e5d2:	2b1f      	cmp	r3, #31
 800e5d4:	dc29      	bgt.n	800e62a <__ieee754_fmod+0x1e6>
 800e5d6:	f208 441e 	addw	r4, r8, #1054	; 0x41e
 800e5da:	409d      	lsls	r5, r3
 800e5dc:	fa2c f404 	lsr.w	r4, ip, r4
 800e5e0:	fa0c f303 	lsl.w	r3, ip, r3
 800e5e4:	432c      	orrs	r4, r5
 800e5e6:	e79c      	b.n	800e522 <__ieee754_fmod+0xde>
 800e5e8:	4827      	ldr	r0, [pc, #156]	; (800e688 <__ieee754_fmod+0x244>)
 800e5ea:	ebce 0000 	rsb	r0, lr, r0
 800e5ee:	281f      	cmp	r0, #31
 800e5f0:	dc15      	bgt.n	800e61e <__ieee754_fmod+0x1da>
 800e5f2:	f20e 451e 	addw	r5, lr, #1054	; 0x41e
 800e5f6:	4082      	lsls	r2, r0
 800e5f8:	fa21 f505 	lsr.w	r5, r1, r5
 800e5fc:	fa01 f700 	lsl.w	r7, r1, r0
 800e600:	ea42 0105 	orr.w	r1, r2, r5
 800e604:	e794      	b.n	800e530 <__ieee754_fmod+0xec>
 800e606:	02ec      	lsls	r4, r5, #11
 800e608:	2c00      	cmp	r4, #0
 800e60a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800e688 <__ieee754_fmod+0x244>
 800e60e:	f77f af6c 	ble.w	800e4ea <__ieee754_fmod+0xa6>
 800e612:	0064      	lsls	r4, r4, #1
 800e614:	2c00      	cmp	r4, #0
 800e616:	f108 38ff 	add.w	r8, r8, #4294967295
 800e61a:	dcfa      	bgt.n	800e612 <__ieee754_fmod+0x1ce>
 800e61c:	e765      	b.n	800e4ea <__ieee754_fmod+0xa6>
 800e61e:	4a1c      	ldr	r2, [pc, #112]	; (800e690 <__ieee754_fmod+0x24c>)
 800e620:	ebce 0202 	rsb	r2, lr, r2
 800e624:	4091      	lsls	r1, r2
 800e626:	2700      	movs	r7, #0
 800e628:	e782      	b.n	800e530 <__ieee754_fmod+0xec>
 800e62a:	4b19      	ldr	r3, [pc, #100]	; (800e690 <__ieee754_fmod+0x24c>)
 800e62c:	ebc8 0303 	rsb	r3, r8, r3
 800e630:	fa0c f403 	lsl.w	r4, ip, r3
 800e634:	2300      	movs	r3, #0
 800e636:	e774      	b.n	800e522 <__ieee754_fmod+0xde>
 800e638:	f8df e04c 	ldr.w	lr, [pc, #76]	; 800e688 <__ieee754_fmod+0x244>
 800e63c:	02d4      	lsls	r4, r2, #11
 800e63e:	0064      	lsls	r4, r4, #1
 800e640:	2c00      	cmp	r4, #0
 800e642:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e646:	dcfa      	bgt.n	800e63e <__ieee754_fmod+0x1fa>
 800e648:	e764      	b.n	800e514 <__ieee754_fmod+0xd0>
 800e64a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e64e:	430e      	orrs	r6, r1
 800e650:	f20e 3eff 	addw	lr, lr, #1023	; 0x3ff
 800e654:	ea46 510e 	orr.w	r1, r6, lr, lsl #20
 800e658:	4618      	mov	r0, r3
 800e65a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e65e:	2a1f      	cmp	r2, #31
 800e660:	dc07      	bgt.n	800e672 <__ieee754_fmod+0x22e>
 800e662:	f20e 4e1e 	addw	lr, lr, #1054	; 0x41e
 800e666:	40d3      	lsrs	r3, r2
 800e668:	fa01 f10e 	lsl.w	r1, r1, lr
 800e66c:	430b      	orrs	r3, r1
 800e66e:	4632      	mov	r2, r6
 800e670:	e7a7      	b.n	800e5c2 <__ieee754_fmod+0x17e>
 800e672:	4b07      	ldr	r3, [pc, #28]	; (800e690 <__ieee754_fmod+0x24c>)
 800e674:	ebce 0303 	rsb	r3, lr, r3
 800e678:	fa41 f303 	asr.w	r3, r1, r3
 800e67c:	4632      	mov	r2, r6
 800e67e:	e7a0      	b.n	800e5c2 <__ieee754_fmod+0x17e>
 800e680:	7fefffff 	.word	0x7fefffff
 800e684:	0800fad8 	.word	0x0800fad8
 800e688:	fffffc02 	.word	0xfffffc02
 800e68c:	000fffff 	.word	0x000fffff
 800e690:	fffffbe2 	.word	0xfffffbe2
 800e694:	7ff00000 	.word	0x7ff00000
 800e698:	fffffbed 	.word	0xfffffbed

0800e69c <__fpclassifyd>:
 800e69c:	b410      	push	{r4}
 800e69e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800e6a2:	460b      	mov	r3, r1
 800e6a4:	d008      	beq.n	800e6b8 <__fpclassifyd+0x1c>
 800e6a6:	4a11      	ldr	r2, [pc, #68]	; (800e6ec <__fpclassifyd+0x50>)
 800e6a8:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e6ac:	4291      	cmp	r1, r2
 800e6ae:	d808      	bhi.n	800e6c2 <__fpclassifyd+0x26>
 800e6b0:	2004      	movs	r0, #4
 800e6b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6b6:	4770      	bx	lr
 800e6b8:	b918      	cbnz	r0, 800e6c2 <__fpclassifyd+0x26>
 800e6ba:	2002      	movs	r0, #2
 800e6bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6c0:	4770      	bx	lr
 800e6c2:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800e6c6:	4a09      	ldr	r2, [pc, #36]	; (800e6ec <__fpclassifyd+0x50>)
 800e6c8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d9ef      	bls.n	800e6b0 <__fpclassifyd+0x14>
 800e6d0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e6d4:	d201      	bcs.n	800e6da <__fpclassifyd+0x3e>
 800e6d6:	2003      	movs	r0, #3
 800e6d8:	e7eb      	b.n	800e6b2 <__fpclassifyd+0x16>
 800e6da:	4b05      	ldr	r3, [pc, #20]	; (800e6f0 <__fpclassifyd+0x54>)
 800e6dc:	429c      	cmp	r4, r3
 800e6de:	d001      	beq.n	800e6e4 <__fpclassifyd+0x48>
 800e6e0:	2000      	movs	r0, #0
 800e6e2:	e7e6      	b.n	800e6b2 <__fpclassifyd+0x16>
 800e6e4:	fab0 f080 	clz	r0, r0
 800e6e8:	0940      	lsrs	r0, r0, #5
 800e6ea:	e7e2      	b.n	800e6b2 <__fpclassifyd+0x16>
 800e6ec:	7fdfffff 	.word	0x7fdfffff
 800e6f0:	7ff00000 	.word	0x7ff00000

0800e6f4 <matherr>:
 800e6f4:	2000      	movs	r0, #0
 800e6f6:	4770      	bx	lr

0800e6f8 <__aeabi_drsub>:
 800e6f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800e6fc:	e002      	b.n	800e704 <__adddf3>
 800e6fe:	bf00      	nop

0800e700 <__aeabi_dsub>:
 800e700:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800e704 <__adddf3>:
 800e704:	b530      	push	{r4, r5, lr}
 800e706:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800e70a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800e70e:	ea94 0f05 	teq	r4, r5
 800e712:	bf08      	it	eq
 800e714:	ea90 0f02 	teqeq	r0, r2
 800e718:	bf1f      	itttt	ne
 800e71a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800e71e:	ea55 0c02 	orrsne.w	ip, r5, r2
 800e722:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800e726:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800e72a:	f000 80e2 	beq.w	800e8f2 <__adddf3+0x1ee>
 800e72e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800e732:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800e736:	bfb8      	it	lt
 800e738:	426d      	neglt	r5, r5
 800e73a:	dd0c      	ble.n	800e756 <__adddf3+0x52>
 800e73c:	442c      	add	r4, r5
 800e73e:	ea80 0202 	eor.w	r2, r0, r2
 800e742:	ea81 0303 	eor.w	r3, r1, r3
 800e746:	ea82 0000 	eor.w	r0, r2, r0
 800e74a:	ea83 0101 	eor.w	r1, r3, r1
 800e74e:	ea80 0202 	eor.w	r2, r0, r2
 800e752:	ea81 0303 	eor.w	r3, r1, r3
 800e756:	2d36      	cmp	r5, #54	; 0x36
 800e758:	bf88      	it	hi
 800e75a:	bd30      	pophi	{r4, r5, pc}
 800e75c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800e760:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800e764:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800e768:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800e76c:	d002      	beq.n	800e774 <__adddf3+0x70>
 800e76e:	4240      	negs	r0, r0
 800e770:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e774:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800e778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e77c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800e780:	d002      	beq.n	800e788 <__adddf3+0x84>
 800e782:	4252      	negs	r2, r2
 800e784:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800e788:	ea94 0f05 	teq	r4, r5
 800e78c:	f000 80a7 	beq.w	800e8de <__adddf3+0x1da>
 800e790:	f1a4 0401 	sub.w	r4, r4, #1
 800e794:	f1d5 0e20 	rsbs	lr, r5, #32
 800e798:	db0d      	blt.n	800e7b6 <__adddf3+0xb2>
 800e79a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800e79e:	fa22 f205 	lsr.w	r2, r2, r5
 800e7a2:	1880      	adds	r0, r0, r2
 800e7a4:	f141 0100 	adc.w	r1, r1, #0
 800e7a8:	fa03 f20e 	lsl.w	r2, r3, lr
 800e7ac:	1880      	adds	r0, r0, r2
 800e7ae:	fa43 f305 	asr.w	r3, r3, r5
 800e7b2:	4159      	adcs	r1, r3
 800e7b4:	e00e      	b.n	800e7d4 <__adddf3+0xd0>
 800e7b6:	f1a5 0520 	sub.w	r5, r5, #32
 800e7ba:	f10e 0e20 	add.w	lr, lr, #32
 800e7be:	2a01      	cmp	r2, #1
 800e7c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 800e7c4:	bf28      	it	cs
 800e7c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 800e7ca:	fa43 f305 	asr.w	r3, r3, r5
 800e7ce:	18c0      	adds	r0, r0, r3
 800e7d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800e7d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e7d8:	d507      	bpl.n	800e7ea <__adddf3+0xe6>
 800e7da:	f04f 0e00 	mov.w	lr, #0
 800e7de:	f1dc 0c00 	rsbs	ip, ip, #0
 800e7e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 800e7e6:	eb6e 0101 	sbc.w	r1, lr, r1
 800e7ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e7ee:	d31b      	bcc.n	800e828 <__adddf3+0x124>
 800e7f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800e7f4:	d30c      	bcc.n	800e810 <__adddf3+0x10c>
 800e7f6:	0849      	lsrs	r1, r1, #1
 800e7f8:	ea5f 0030 	movs.w	r0, r0, rrx
 800e7fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800e800:	f104 0401 	add.w	r4, r4, #1
 800e804:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800e808:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800e80c:	f080 809a 	bcs.w	800e944 <__adddf3+0x240>
 800e810:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800e814:	bf08      	it	eq
 800e816:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800e81a:	f150 0000 	adcs.w	r0, r0, #0
 800e81e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800e822:	ea41 0105 	orr.w	r1, r1, r5
 800e826:	bd30      	pop	{r4, r5, pc}
 800e828:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800e82c:	4140      	adcs	r0, r0
 800e82e:	eb41 0101 	adc.w	r1, r1, r1
 800e832:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e836:	f1a4 0401 	sub.w	r4, r4, #1
 800e83a:	d1e9      	bne.n	800e810 <__adddf3+0x10c>
 800e83c:	f091 0f00 	teq	r1, #0
 800e840:	bf04      	itt	eq
 800e842:	4601      	moveq	r1, r0
 800e844:	2000      	moveq	r0, #0
 800e846:	fab1 f381 	clz	r3, r1
 800e84a:	bf08      	it	eq
 800e84c:	3320      	addeq	r3, #32
 800e84e:	f1a3 030b 	sub.w	r3, r3, #11
 800e852:	f1b3 0220 	subs.w	r2, r3, #32
 800e856:	da0c      	bge.n	800e872 <__adddf3+0x16e>
 800e858:	320c      	adds	r2, #12
 800e85a:	dd08      	ble.n	800e86e <__adddf3+0x16a>
 800e85c:	f102 0c14 	add.w	ip, r2, #20
 800e860:	f1c2 020c 	rsb	r2, r2, #12
 800e864:	fa01 f00c 	lsl.w	r0, r1, ip
 800e868:	fa21 f102 	lsr.w	r1, r1, r2
 800e86c:	e00c      	b.n	800e888 <__adddf3+0x184>
 800e86e:	f102 0214 	add.w	r2, r2, #20
 800e872:	bfd8      	it	le
 800e874:	f1c2 0c20 	rsble	ip, r2, #32
 800e878:	fa01 f102 	lsl.w	r1, r1, r2
 800e87c:	fa20 fc0c 	lsr.w	ip, r0, ip
 800e880:	bfdc      	itt	le
 800e882:	ea41 010c 	orrle.w	r1, r1, ip
 800e886:	4090      	lslle	r0, r2
 800e888:	1ae4      	subs	r4, r4, r3
 800e88a:	bfa2      	ittt	ge
 800e88c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800e890:	4329      	orrge	r1, r5
 800e892:	bd30      	popge	{r4, r5, pc}
 800e894:	ea6f 0404 	mvn.w	r4, r4
 800e898:	3c1f      	subs	r4, #31
 800e89a:	da1c      	bge.n	800e8d6 <__adddf3+0x1d2>
 800e89c:	340c      	adds	r4, #12
 800e89e:	dc0e      	bgt.n	800e8be <__adddf3+0x1ba>
 800e8a0:	f104 0414 	add.w	r4, r4, #20
 800e8a4:	f1c4 0220 	rsb	r2, r4, #32
 800e8a8:	fa20 f004 	lsr.w	r0, r0, r4
 800e8ac:	fa01 f302 	lsl.w	r3, r1, r2
 800e8b0:	ea40 0003 	orr.w	r0, r0, r3
 800e8b4:	fa21 f304 	lsr.w	r3, r1, r4
 800e8b8:	ea45 0103 	orr.w	r1, r5, r3
 800e8bc:	bd30      	pop	{r4, r5, pc}
 800e8be:	f1c4 040c 	rsb	r4, r4, #12
 800e8c2:	f1c4 0220 	rsb	r2, r4, #32
 800e8c6:	fa20 f002 	lsr.w	r0, r0, r2
 800e8ca:	fa01 f304 	lsl.w	r3, r1, r4
 800e8ce:	ea40 0003 	orr.w	r0, r0, r3
 800e8d2:	4629      	mov	r1, r5
 800e8d4:	bd30      	pop	{r4, r5, pc}
 800e8d6:	fa21 f004 	lsr.w	r0, r1, r4
 800e8da:	4629      	mov	r1, r5
 800e8dc:	bd30      	pop	{r4, r5, pc}
 800e8de:	f094 0f00 	teq	r4, #0
 800e8e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800e8e6:	bf06      	itte	eq
 800e8e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800e8ec:	3401      	addeq	r4, #1
 800e8ee:	3d01      	subne	r5, #1
 800e8f0:	e74e      	b.n	800e790 <__adddf3+0x8c>
 800e8f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800e8f6:	bf18      	it	ne
 800e8f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800e8fc:	d029      	beq.n	800e952 <__adddf3+0x24e>
 800e8fe:	ea94 0f05 	teq	r4, r5
 800e902:	bf08      	it	eq
 800e904:	ea90 0f02 	teqeq	r0, r2
 800e908:	d005      	beq.n	800e916 <__adddf3+0x212>
 800e90a:	ea54 0c00 	orrs.w	ip, r4, r0
 800e90e:	bf04      	itt	eq
 800e910:	4619      	moveq	r1, r3
 800e912:	4610      	moveq	r0, r2
 800e914:	bd30      	pop	{r4, r5, pc}
 800e916:	ea91 0f03 	teq	r1, r3
 800e91a:	bf1e      	ittt	ne
 800e91c:	2100      	movne	r1, #0
 800e91e:	2000      	movne	r0, #0
 800e920:	bd30      	popne	{r4, r5, pc}
 800e922:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800e926:	d105      	bne.n	800e934 <__adddf3+0x230>
 800e928:	0040      	lsls	r0, r0, #1
 800e92a:	4149      	adcs	r1, r1
 800e92c:	bf28      	it	cs
 800e92e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800e932:	bd30      	pop	{r4, r5, pc}
 800e934:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800e938:	bf3c      	itt	cc
 800e93a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800e93e:	bd30      	popcc	{r4, r5, pc}
 800e940:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e944:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800e948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e94c:	f04f 0000 	mov.w	r0, #0
 800e950:	bd30      	pop	{r4, r5, pc}
 800e952:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800e956:	bf1a      	itte	ne
 800e958:	4619      	movne	r1, r3
 800e95a:	4610      	movne	r0, r2
 800e95c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800e960:	bf1c      	itt	ne
 800e962:	460b      	movne	r3, r1
 800e964:	4602      	movne	r2, r0
 800e966:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800e96a:	bf06      	itte	eq
 800e96c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800e970:	ea91 0f03 	teqeq	r1, r3
 800e974:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800e978:	bd30      	pop	{r4, r5, pc}
 800e97a:	bf00      	nop

0800e97c <__aeabi_ui2d>:
 800e97c:	f090 0f00 	teq	r0, #0
 800e980:	bf04      	itt	eq
 800e982:	2100      	moveq	r1, #0
 800e984:	4770      	bxeq	lr
 800e986:	b530      	push	{r4, r5, lr}
 800e988:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e98c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e990:	f04f 0500 	mov.w	r5, #0
 800e994:	f04f 0100 	mov.w	r1, #0
 800e998:	e750      	b.n	800e83c <__adddf3+0x138>
 800e99a:	bf00      	nop

0800e99c <__aeabi_i2d>:
 800e99c:	f090 0f00 	teq	r0, #0
 800e9a0:	bf04      	itt	eq
 800e9a2:	2100      	moveq	r1, #0
 800e9a4:	4770      	bxeq	lr
 800e9a6:	b530      	push	{r4, r5, lr}
 800e9a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e9ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e9b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800e9b4:	bf48      	it	mi
 800e9b6:	4240      	negmi	r0, r0
 800e9b8:	f04f 0100 	mov.w	r1, #0
 800e9bc:	e73e      	b.n	800e83c <__adddf3+0x138>
 800e9be:	bf00      	nop

0800e9c0 <__aeabi_f2d>:
 800e9c0:	0042      	lsls	r2, r0, #1
 800e9c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800e9c6:	ea4f 0131 	mov.w	r1, r1, rrx
 800e9ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800e9ce:	bf1f      	itttt	ne
 800e9d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800e9d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800e9d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800e9dc:	4770      	bxne	lr
 800e9de:	f092 0f00 	teq	r2, #0
 800e9e2:	bf14      	ite	ne
 800e9e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800e9e8:	4770      	bxeq	lr
 800e9ea:	b530      	push	{r4, r5, lr}
 800e9ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 800e9f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e9f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e9f8:	e720      	b.n	800e83c <__adddf3+0x138>
 800e9fa:	bf00      	nop

0800e9fc <__aeabi_ul2d>:
 800e9fc:	ea50 0201 	orrs.w	r2, r0, r1
 800ea00:	bf08      	it	eq
 800ea02:	4770      	bxeq	lr
 800ea04:	b530      	push	{r4, r5, lr}
 800ea06:	f04f 0500 	mov.w	r5, #0
 800ea0a:	e00a      	b.n	800ea22 <__aeabi_l2d+0x16>

0800ea0c <__aeabi_l2d>:
 800ea0c:	ea50 0201 	orrs.w	r2, r0, r1
 800ea10:	bf08      	it	eq
 800ea12:	4770      	bxeq	lr
 800ea14:	b530      	push	{r4, r5, lr}
 800ea16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800ea1a:	d502      	bpl.n	800ea22 <__aeabi_l2d+0x16>
 800ea1c:	4240      	negs	r0, r0
 800ea1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800ea22:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800ea26:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800ea2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800ea2e:	f43f aedc 	beq.w	800e7ea <__adddf3+0xe6>
 800ea32:	f04f 0203 	mov.w	r2, #3
 800ea36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ea3a:	bf18      	it	ne
 800ea3c:	3203      	addne	r2, #3
 800ea3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ea42:	bf18      	it	ne
 800ea44:	3203      	addne	r2, #3
 800ea46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800ea4a:	f1c2 0320 	rsb	r3, r2, #32
 800ea4e:	fa00 fc03 	lsl.w	ip, r0, r3
 800ea52:	fa20 f002 	lsr.w	r0, r0, r2
 800ea56:	fa01 fe03 	lsl.w	lr, r1, r3
 800ea5a:	ea40 000e 	orr.w	r0, r0, lr
 800ea5e:	fa21 f102 	lsr.w	r1, r1, r2
 800ea62:	4414      	add	r4, r2
 800ea64:	e6c1      	b.n	800e7ea <__adddf3+0xe6>
 800ea66:	bf00      	nop

0800ea68 <__aeabi_dmul>:
 800ea68:	b570      	push	{r4, r5, r6, lr}
 800ea6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800ea6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800ea72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800ea76:	bf1d      	ittte	ne
 800ea78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800ea7c:	ea94 0f0c 	teqne	r4, ip
 800ea80:	ea95 0f0c 	teqne	r5, ip
 800ea84:	f000 f8de 	bleq	800ec44 <__aeabi_dmul+0x1dc>
 800ea88:	442c      	add	r4, r5
 800ea8a:	ea81 0603 	eor.w	r6, r1, r3
 800ea8e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800ea92:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800ea96:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800ea9a:	bf18      	it	ne
 800ea9c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800eaa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800eaa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eaa8:	d038      	beq.n	800eb1c <__aeabi_dmul+0xb4>
 800eaaa:	fba0 ce02 	umull	ip, lr, r0, r2
 800eaae:	f04f 0500 	mov.w	r5, #0
 800eab2:	fbe1 e502 	umlal	lr, r5, r1, r2
 800eab6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800eaba:	fbe0 e503 	umlal	lr, r5, r0, r3
 800eabe:	f04f 0600 	mov.w	r6, #0
 800eac2:	fbe1 5603 	umlal	r5, r6, r1, r3
 800eac6:	f09c 0f00 	teq	ip, #0
 800eaca:	bf18      	it	ne
 800eacc:	f04e 0e01 	orrne.w	lr, lr, #1
 800ead0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800ead4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800ead8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800eadc:	d204      	bcs.n	800eae8 <__aeabi_dmul+0x80>
 800eade:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800eae2:	416d      	adcs	r5, r5
 800eae4:	eb46 0606 	adc.w	r6, r6, r6
 800eae8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800eaec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800eaf0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800eaf4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800eaf8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800eafc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800eb00:	bf88      	it	hi
 800eb02:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800eb06:	d81e      	bhi.n	800eb46 <__aeabi_dmul+0xde>
 800eb08:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800eb0c:	bf08      	it	eq
 800eb0e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800eb12:	f150 0000 	adcs.w	r0, r0, #0
 800eb16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800eb1a:	bd70      	pop	{r4, r5, r6, pc}
 800eb1c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800eb20:	ea46 0101 	orr.w	r1, r6, r1
 800eb24:	ea40 0002 	orr.w	r0, r0, r2
 800eb28:	ea81 0103 	eor.w	r1, r1, r3
 800eb2c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800eb30:	bfc2      	ittt	gt
 800eb32:	ebd4 050c 	rsbsgt	r5, r4, ip
 800eb36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800eb3a:	bd70      	popgt	{r4, r5, r6, pc}
 800eb3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800eb40:	f04f 0e00 	mov.w	lr, #0
 800eb44:	3c01      	subs	r4, #1
 800eb46:	f300 80ab 	bgt.w	800eca0 <__aeabi_dmul+0x238>
 800eb4a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800eb4e:	bfde      	ittt	le
 800eb50:	2000      	movle	r0, #0
 800eb52:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800eb56:	bd70      	pople	{r4, r5, r6, pc}
 800eb58:	f1c4 0400 	rsb	r4, r4, #0
 800eb5c:	3c20      	subs	r4, #32
 800eb5e:	da35      	bge.n	800ebcc <__aeabi_dmul+0x164>
 800eb60:	340c      	adds	r4, #12
 800eb62:	dc1b      	bgt.n	800eb9c <__aeabi_dmul+0x134>
 800eb64:	f104 0414 	add.w	r4, r4, #20
 800eb68:	f1c4 0520 	rsb	r5, r4, #32
 800eb6c:	fa00 f305 	lsl.w	r3, r0, r5
 800eb70:	fa20 f004 	lsr.w	r0, r0, r4
 800eb74:	fa01 f205 	lsl.w	r2, r1, r5
 800eb78:	ea40 0002 	orr.w	r0, r0, r2
 800eb7c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800eb80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800eb84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800eb88:	fa21 f604 	lsr.w	r6, r1, r4
 800eb8c:	eb42 0106 	adc.w	r1, r2, r6
 800eb90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800eb94:	bf08      	it	eq
 800eb96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800eb9a:	bd70      	pop	{r4, r5, r6, pc}
 800eb9c:	f1c4 040c 	rsb	r4, r4, #12
 800eba0:	f1c4 0520 	rsb	r5, r4, #32
 800eba4:	fa00 f304 	lsl.w	r3, r0, r4
 800eba8:	fa20 f005 	lsr.w	r0, r0, r5
 800ebac:	fa01 f204 	lsl.w	r2, r1, r4
 800ebb0:	ea40 0002 	orr.w	r0, r0, r2
 800ebb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ebb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800ebbc:	f141 0100 	adc.w	r1, r1, #0
 800ebc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ebc4:	bf08      	it	eq
 800ebc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800ebca:	bd70      	pop	{r4, r5, r6, pc}
 800ebcc:	f1c4 0520 	rsb	r5, r4, #32
 800ebd0:	fa00 f205 	lsl.w	r2, r0, r5
 800ebd4:	ea4e 0e02 	orr.w	lr, lr, r2
 800ebd8:	fa20 f304 	lsr.w	r3, r0, r4
 800ebdc:	fa01 f205 	lsl.w	r2, r1, r5
 800ebe0:	ea43 0302 	orr.w	r3, r3, r2
 800ebe4:	fa21 f004 	lsr.w	r0, r1, r4
 800ebe8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ebec:	fa21 f204 	lsr.w	r2, r1, r4
 800ebf0:	ea20 0002 	bic.w	r0, r0, r2
 800ebf4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800ebf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ebfc:	bf08      	it	eq
 800ebfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800ec02:	bd70      	pop	{r4, r5, r6, pc}
 800ec04:	f094 0f00 	teq	r4, #0
 800ec08:	d10f      	bne.n	800ec2a <__aeabi_dmul+0x1c2>
 800ec0a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800ec0e:	0040      	lsls	r0, r0, #1
 800ec10:	eb41 0101 	adc.w	r1, r1, r1
 800ec14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800ec18:	bf08      	it	eq
 800ec1a:	3c01      	subeq	r4, #1
 800ec1c:	d0f7      	beq.n	800ec0e <__aeabi_dmul+0x1a6>
 800ec1e:	ea41 0106 	orr.w	r1, r1, r6
 800ec22:	f095 0f00 	teq	r5, #0
 800ec26:	bf18      	it	ne
 800ec28:	4770      	bxne	lr
 800ec2a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800ec2e:	0052      	lsls	r2, r2, #1
 800ec30:	eb43 0303 	adc.w	r3, r3, r3
 800ec34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800ec38:	bf08      	it	eq
 800ec3a:	3d01      	subeq	r5, #1
 800ec3c:	d0f7      	beq.n	800ec2e <__aeabi_dmul+0x1c6>
 800ec3e:	ea43 0306 	orr.w	r3, r3, r6
 800ec42:	4770      	bx	lr
 800ec44:	ea94 0f0c 	teq	r4, ip
 800ec48:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800ec4c:	bf18      	it	ne
 800ec4e:	ea95 0f0c 	teqne	r5, ip
 800ec52:	d00c      	beq.n	800ec6e <__aeabi_dmul+0x206>
 800ec54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800ec58:	bf18      	it	ne
 800ec5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800ec5e:	d1d1      	bne.n	800ec04 <__aeabi_dmul+0x19c>
 800ec60:	ea81 0103 	eor.w	r1, r1, r3
 800ec64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ec68:	f04f 0000 	mov.w	r0, #0
 800ec6c:	bd70      	pop	{r4, r5, r6, pc}
 800ec6e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800ec72:	bf06      	itte	eq
 800ec74:	4610      	moveq	r0, r2
 800ec76:	4619      	moveq	r1, r3
 800ec78:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800ec7c:	d019      	beq.n	800ecb2 <__aeabi_dmul+0x24a>
 800ec7e:	ea94 0f0c 	teq	r4, ip
 800ec82:	d102      	bne.n	800ec8a <__aeabi_dmul+0x222>
 800ec84:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800ec88:	d113      	bne.n	800ecb2 <__aeabi_dmul+0x24a>
 800ec8a:	ea95 0f0c 	teq	r5, ip
 800ec8e:	d105      	bne.n	800ec9c <__aeabi_dmul+0x234>
 800ec90:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800ec94:	bf1c      	itt	ne
 800ec96:	4610      	movne	r0, r2
 800ec98:	4619      	movne	r1, r3
 800ec9a:	d10a      	bne.n	800ecb2 <__aeabi_dmul+0x24a>
 800ec9c:	ea81 0103 	eor.w	r1, r1, r3
 800eca0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800eca4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800eca8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ecac:	f04f 0000 	mov.w	r0, #0
 800ecb0:	bd70      	pop	{r4, r5, r6, pc}
 800ecb2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800ecb6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800ecba:	bd70      	pop	{r4, r5, r6, pc}

0800ecbc <__aeabi_ddiv>:
 800ecbc:	b570      	push	{r4, r5, r6, lr}
 800ecbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800ecc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800ecc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800ecca:	bf1d      	ittte	ne
 800eccc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800ecd0:	ea94 0f0c 	teqne	r4, ip
 800ecd4:	ea95 0f0c 	teqne	r5, ip
 800ecd8:	f000 f8a7 	bleq	800ee2a <__aeabi_ddiv+0x16e>
 800ecdc:	eba4 0405 	sub.w	r4, r4, r5
 800ece0:	ea81 0e03 	eor.w	lr, r1, r3
 800ece4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800ece8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800ecec:	f000 8088 	beq.w	800ee00 <__aeabi_ddiv+0x144>
 800ecf0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800ecf4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800ecf8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800ecfc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800ed00:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800ed04:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800ed08:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800ed0c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800ed10:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800ed14:	429d      	cmp	r5, r3
 800ed16:	bf08      	it	eq
 800ed18:	4296      	cmpeq	r6, r2
 800ed1a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800ed1e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800ed22:	d202      	bcs.n	800ed2a <__aeabi_ddiv+0x6e>
 800ed24:	085b      	lsrs	r3, r3, #1
 800ed26:	ea4f 0232 	mov.w	r2, r2, rrx
 800ed2a:	1ab6      	subs	r6, r6, r2
 800ed2c:	eb65 0503 	sbc.w	r5, r5, r3
 800ed30:	085b      	lsrs	r3, r3, #1
 800ed32:	ea4f 0232 	mov.w	r2, r2, rrx
 800ed36:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ed3a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800ed3e:	ebb6 0e02 	subs.w	lr, r6, r2
 800ed42:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ed46:	bf22      	ittt	cs
 800ed48:	1ab6      	subcs	r6, r6, r2
 800ed4a:	4675      	movcs	r5, lr
 800ed4c:	ea40 000c 	orrcs.w	r0, r0, ip
 800ed50:	085b      	lsrs	r3, r3, #1
 800ed52:	ea4f 0232 	mov.w	r2, r2, rrx
 800ed56:	ebb6 0e02 	subs.w	lr, r6, r2
 800ed5a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ed5e:	bf22      	ittt	cs
 800ed60:	1ab6      	subcs	r6, r6, r2
 800ed62:	4675      	movcs	r5, lr
 800ed64:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800ed68:	085b      	lsrs	r3, r3, #1
 800ed6a:	ea4f 0232 	mov.w	r2, r2, rrx
 800ed6e:	ebb6 0e02 	subs.w	lr, r6, r2
 800ed72:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ed76:	bf22      	ittt	cs
 800ed78:	1ab6      	subcs	r6, r6, r2
 800ed7a:	4675      	movcs	r5, lr
 800ed7c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800ed80:	085b      	lsrs	r3, r3, #1
 800ed82:	ea4f 0232 	mov.w	r2, r2, rrx
 800ed86:	ebb6 0e02 	subs.w	lr, r6, r2
 800ed8a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ed8e:	bf22      	ittt	cs
 800ed90:	1ab6      	subcs	r6, r6, r2
 800ed92:	4675      	movcs	r5, lr
 800ed94:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800ed98:	ea55 0e06 	orrs.w	lr, r5, r6
 800ed9c:	d018      	beq.n	800edd0 <__aeabi_ddiv+0x114>
 800ed9e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800eda2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800eda6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800edaa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800edae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800edb2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800edb6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800edba:	d1c0      	bne.n	800ed3e <__aeabi_ddiv+0x82>
 800edbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800edc0:	d10b      	bne.n	800edda <__aeabi_ddiv+0x11e>
 800edc2:	ea41 0100 	orr.w	r1, r1, r0
 800edc6:	f04f 0000 	mov.w	r0, #0
 800edca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800edce:	e7b6      	b.n	800ed3e <__aeabi_ddiv+0x82>
 800edd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800edd4:	bf04      	itt	eq
 800edd6:	4301      	orreq	r1, r0
 800edd8:	2000      	moveq	r0, #0
 800edda:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800edde:	bf88      	it	hi
 800ede0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800ede4:	f63f aeaf 	bhi.w	800eb46 <__aeabi_dmul+0xde>
 800ede8:	ebb5 0c03 	subs.w	ip, r5, r3
 800edec:	bf04      	itt	eq
 800edee:	ebb6 0c02 	subseq.w	ip, r6, r2
 800edf2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800edf6:	f150 0000 	adcs.w	r0, r0, #0
 800edfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800edfe:	bd70      	pop	{r4, r5, r6, pc}
 800ee00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800ee04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800ee08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800ee0c:	bfc2      	ittt	gt
 800ee0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 800ee12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800ee16:	bd70      	popgt	{r4, r5, r6, pc}
 800ee18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ee1c:	f04f 0e00 	mov.w	lr, #0
 800ee20:	3c01      	subs	r4, #1
 800ee22:	e690      	b.n	800eb46 <__aeabi_dmul+0xde>
 800ee24:	ea45 0e06 	orr.w	lr, r5, r6
 800ee28:	e68d      	b.n	800eb46 <__aeabi_dmul+0xde>
 800ee2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800ee2e:	ea94 0f0c 	teq	r4, ip
 800ee32:	bf08      	it	eq
 800ee34:	ea95 0f0c 	teqeq	r5, ip
 800ee38:	f43f af3b 	beq.w	800ecb2 <__aeabi_dmul+0x24a>
 800ee3c:	ea94 0f0c 	teq	r4, ip
 800ee40:	d10a      	bne.n	800ee58 <__aeabi_ddiv+0x19c>
 800ee42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800ee46:	f47f af34 	bne.w	800ecb2 <__aeabi_dmul+0x24a>
 800ee4a:	ea95 0f0c 	teq	r5, ip
 800ee4e:	f47f af25 	bne.w	800ec9c <__aeabi_dmul+0x234>
 800ee52:	4610      	mov	r0, r2
 800ee54:	4619      	mov	r1, r3
 800ee56:	e72c      	b.n	800ecb2 <__aeabi_dmul+0x24a>
 800ee58:	ea95 0f0c 	teq	r5, ip
 800ee5c:	d106      	bne.n	800ee6c <__aeabi_ddiv+0x1b0>
 800ee5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800ee62:	f43f aefd 	beq.w	800ec60 <__aeabi_dmul+0x1f8>
 800ee66:	4610      	mov	r0, r2
 800ee68:	4619      	mov	r1, r3
 800ee6a:	e722      	b.n	800ecb2 <__aeabi_dmul+0x24a>
 800ee6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800ee70:	bf18      	it	ne
 800ee72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800ee76:	f47f aec5 	bne.w	800ec04 <__aeabi_dmul+0x19c>
 800ee7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800ee7e:	f47f af0d 	bne.w	800ec9c <__aeabi_dmul+0x234>
 800ee82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800ee86:	f47f aeeb 	bne.w	800ec60 <__aeabi_dmul+0x1f8>
 800ee8a:	e712      	b.n	800ecb2 <__aeabi_dmul+0x24a>

0800ee8c <__gedf2>:
 800ee8c:	f04f 3cff 	mov.w	ip, #4294967295
 800ee90:	e006      	b.n	800eea0 <__cmpdf2+0x4>
 800ee92:	bf00      	nop

0800ee94 <__ledf2>:
 800ee94:	f04f 0c01 	mov.w	ip, #1
 800ee98:	e002      	b.n	800eea0 <__cmpdf2+0x4>
 800ee9a:	bf00      	nop

0800ee9c <__cmpdf2>:
 800ee9c:	f04f 0c01 	mov.w	ip, #1
 800eea0:	f84d cd04 	str.w	ip, [sp, #-4]!
 800eea4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800eea8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800eeac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800eeb0:	bf18      	it	ne
 800eeb2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800eeb6:	d01b      	beq.n	800eef0 <__cmpdf2+0x54>
 800eeb8:	b001      	add	sp, #4
 800eeba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800eebe:	bf0c      	ite	eq
 800eec0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800eec4:	ea91 0f03 	teqne	r1, r3
 800eec8:	bf02      	ittt	eq
 800eeca:	ea90 0f02 	teqeq	r0, r2
 800eece:	2000      	moveq	r0, #0
 800eed0:	4770      	bxeq	lr
 800eed2:	f110 0f00 	cmn.w	r0, #0
 800eed6:	ea91 0f03 	teq	r1, r3
 800eeda:	bf58      	it	pl
 800eedc:	4299      	cmppl	r1, r3
 800eede:	bf08      	it	eq
 800eee0:	4290      	cmpeq	r0, r2
 800eee2:	bf2c      	ite	cs
 800eee4:	17d8      	asrcs	r0, r3, #31
 800eee6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800eeea:	f040 0001 	orr.w	r0, r0, #1
 800eeee:	4770      	bx	lr
 800eef0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800eef4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800eef8:	d102      	bne.n	800ef00 <__cmpdf2+0x64>
 800eefa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800eefe:	d107      	bne.n	800ef10 <__cmpdf2+0x74>
 800ef00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800ef04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800ef08:	d1d6      	bne.n	800eeb8 <__cmpdf2+0x1c>
 800ef0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800ef0e:	d0d3      	beq.n	800eeb8 <__cmpdf2+0x1c>
 800ef10:	f85d 0b04 	ldr.w	r0, [sp], #4
 800ef14:	4770      	bx	lr
 800ef16:	bf00      	nop

0800ef18 <__aeabi_cdrcmple>:
 800ef18:	4684      	mov	ip, r0
 800ef1a:	4610      	mov	r0, r2
 800ef1c:	4662      	mov	r2, ip
 800ef1e:	468c      	mov	ip, r1
 800ef20:	4619      	mov	r1, r3
 800ef22:	4663      	mov	r3, ip
 800ef24:	e000      	b.n	800ef28 <__aeabi_cdcmpeq>
 800ef26:	bf00      	nop

0800ef28 <__aeabi_cdcmpeq>:
 800ef28:	b501      	push	{r0, lr}
 800ef2a:	f7ff ffb7 	bl	800ee9c <__cmpdf2>
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	bf48      	it	mi
 800ef32:	f110 0f00 	cmnmi.w	r0, #0
 800ef36:	bd01      	pop	{r0, pc}

0800ef38 <__aeabi_dcmpeq>:
 800ef38:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ef3c:	f7ff fff4 	bl	800ef28 <__aeabi_cdcmpeq>
 800ef40:	bf0c      	ite	eq
 800ef42:	2001      	moveq	r0, #1
 800ef44:	2000      	movne	r0, #0
 800ef46:	f85d fb08 	ldr.w	pc, [sp], #8
 800ef4a:	bf00      	nop

0800ef4c <__aeabi_dcmplt>:
 800ef4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ef50:	f7ff ffea 	bl	800ef28 <__aeabi_cdcmpeq>
 800ef54:	bf34      	ite	cc
 800ef56:	2001      	movcc	r0, #1
 800ef58:	2000      	movcs	r0, #0
 800ef5a:	f85d fb08 	ldr.w	pc, [sp], #8
 800ef5e:	bf00      	nop

0800ef60 <__aeabi_dcmple>:
 800ef60:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ef64:	f7ff ffe0 	bl	800ef28 <__aeabi_cdcmpeq>
 800ef68:	bf94      	ite	ls
 800ef6a:	2001      	movls	r0, #1
 800ef6c:	2000      	movhi	r0, #0
 800ef6e:	f85d fb08 	ldr.w	pc, [sp], #8
 800ef72:	bf00      	nop

0800ef74 <__aeabi_dcmpge>:
 800ef74:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ef78:	f7ff ffce 	bl	800ef18 <__aeabi_cdrcmple>
 800ef7c:	bf94      	ite	ls
 800ef7e:	2001      	movls	r0, #1
 800ef80:	2000      	movhi	r0, #0
 800ef82:	f85d fb08 	ldr.w	pc, [sp], #8
 800ef86:	bf00      	nop

0800ef88 <__aeabi_dcmpgt>:
 800ef88:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ef8c:	f7ff ffc4 	bl	800ef18 <__aeabi_cdrcmple>
 800ef90:	bf34      	ite	cc
 800ef92:	2001      	movcc	r0, #1
 800ef94:	2000      	movcs	r0, #0
 800ef96:	f85d fb08 	ldr.w	pc, [sp], #8
 800ef9a:	bf00      	nop

0800ef9c <__aeabi_d2uiz>:
 800ef9c:	004a      	lsls	r2, r1, #1
 800ef9e:	d211      	bcs.n	800efc4 <__aeabi_d2uiz+0x28>
 800efa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800efa4:	d211      	bcs.n	800efca <__aeabi_d2uiz+0x2e>
 800efa6:	d50d      	bpl.n	800efc4 <__aeabi_d2uiz+0x28>
 800efa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800efac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800efb0:	d40e      	bmi.n	800efd0 <__aeabi_d2uiz+0x34>
 800efb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800efb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800efba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800efbe:	fa23 f002 	lsr.w	r0, r3, r2
 800efc2:	4770      	bx	lr
 800efc4:	f04f 0000 	mov.w	r0, #0
 800efc8:	4770      	bx	lr
 800efca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800efce:	d102      	bne.n	800efd6 <__aeabi_d2uiz+0x3a>
 800efd0:	f04f 30ff 	mov.w	r0, #4294967295
 800efd4:	4770      	bx	lr
 800efd6:	f04f 0000 	mov.w	r0, #0
 800efda:	4770      	bx	lr

0800efdc <__errno>:
 800efdc:	4b01      	ldr	r3, [pc, #4]	; (800efe4 <__errno+0x8>)
 800efde:	6818      	ldr	r0, [r3, #0]
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop
 800efe4:	200006ac 	.word	0x200006ac

0800efe8 <__libc_init_array>:
 800efe8:	b570      	push	{r4, r5, r6, lr}
 800efea:	4b0e      	ldr	r3, [pc, #56]	; (800f024 <__libc_init_array+0x3c>)
 800efec:	4c0e      	ldr	r4, [pc, #56]	; (800f028 <__libc_init_array+0x40>)
 800efee:	1ae4      	subs	r4, r4, r3
 800eff0:	10a4      	asrs	r4, r4, #2
 800eff2:	2500      	movs	r5, #0
 800eff4:	461e      	mov	r6, r3
 800eff6:	42a5      	cmp	r5, r4
 800eff8:	d004      	beq.n	800f004 <__libc_init_array+0x1c>
 800effa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800effe:	4798      	blx	r3
 800f000:	3501      	adds	r5, #1
 800f002:	e7f8      	b.n	800eff6 <__libc_init_array+0xe>
 800f004:	f7f8 ff22 	bl	8007e4c <_init>
 800f008:	4c08      	ldr	r4, [pc, #32]	; (800f02c <__libc_init_array+0x44>)
 800f00a:	4b09      	ldr	r3, [pc, #36]	; (800f030 <__libc_init_array+0x48>)
 800f00c:	1ae4      	subs	r4, r4, r3
 800f00e:	10a4      	asrs	r4, r4, #2
 800f010:	2500      	movs	r5, #0
 800f012:	461e      	mov	r6, r3
 800f014:	42a5      	cmp	r5, r4
 800f016:	d004      	beq.n	800f022 <__libc_init_array+0x3a>
 800f018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f01c:	4798      	blx	r3
 800f01e:	3501      	adds	r5, #1
 800f020:	e7f8      	b.n	800f014 <__libc_init_array+0x2c>
 800f022:	bd70      	pop	{r4, r5, r6, pc}
 800f024:	200006b0 	.word	0x200006b0
 800f028:	200006b0 	.word	0x200006b0
 800f02c:	200006b0 	.word	0x200006b0
 800f030:	200006b0 	.word	0x200006b0

0800f034 <malloc>:
 800f034:	4b02      	ldr	r3, [pc, #8]	; (800f040 <malloc+0xc>)
 800f036:	4601      	mov	r1, r0
 800f038:	6818      	ldr	r0, [r3, #0]
 800f03a:	f000 b863 	b.w	800f104 <_malloc_r>
 800f03e:	bf00      	nop
 800f040:	200006ac 	.word	0x200006ac

0800f044 <free>:
 800f044:	4b02      	ldr	r3, [pc, #8]	; (800f050 <free+0xc>)
 800f046:	4601      	mov	r1, r0
 800f048:	6818      	ldr	r0, [r3, #0]
 800f04a:	f000 b817 	b.w	800f07c <_free_r>
 800f04e:	bf00      	nop
 800f050:	200006ac 	.word	0x200006ac

0800f054 <memcpy>:
 800f054:	b510      	push	{r4, lr}
 800f056:	1e43      	subs	r3, r0, #1
 800f058:	440a      	add	r2, r1
 800f05a:	4291      	cmp	r1, r2
 800f05c:	d004      	beq.n	800f068 <memcpy+0x14>
 800f05e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f062:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f066:	e7f8      	b.n	800f05a <memcpy+0x6>
 800f068:	bd10      	pop	{r4, pc}

0800f06a <memset>:
 800f06a:	4402      	add	r2, r0
 800f06c:	4603      	mov	r3, r0
 800f06e:	4293      	cmp	r3, r2
 800f070:	d002      	beq.n	800f078 <memset+0xe>
 800f072:	f803 1b01 	strb.w	r1, [r3], #1
 800f076:	e7fa      	b.n	800f06e <memset+0x4>
 800f078:	4770      	bx	lr
	...

0800f07c <_free_r>:
 800f07c:	b530      	push	{r4, r5, lr}
 800f07e:	2900      	cmp	r1, #0
 800f080:	d03d      	beq.n	800f0fe <_free_r+0x82>
 800f082:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800f086:	1f0b      	subs	r3, r1, #4
 800f088:	491d      	ldr	r1, [pc, #116]	; (800f100 <_free_r+0x84>)
 800f08a:	2a00      	cmp	r2, #0
 800f08c:	bfb8      	it	lt
 800f08e:	189b      	addlt	r3, r3, r2
 800f090:	680a      	ldr	r2, [r1, #0]
 800f092:	460c      	mov	r4, r1
 800f094:	b912      	cbnz	r2, 800f09c <_free_r+0x20>
 800f096:	605a      	str	r2, [r3, #4]
 800f098:	600b      	str	r3, [r1, #0]
 800f09a:	bd30      	pop	{r4, r5, pc}
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d20d      	bcs.n	800f0bc <_free_r+0x40>
 800f0a0:	6819      	ldr	r1, [r3, #0]
 800f0a2:	1858      	adds	r0, r3, r1
 800f0a4:	4290      	cmp	r0, r2
 800f0a6:	bf01      	itttt	eq
 800f0a8:	585a      	ldreq	r2, [r3, r1]
 800f0aa:	1852      	addeq	r2, r2, r1
 800f0ac:	601a      	streq	r2, [r3, #0]
 800f0ae:	6842      	ldreq	r2, [r0, #4]
 800f0b0:	605a      	str	r2, [r3, #4]
 800f0b2:	6023      	str	r3, [r4, #0]
 800f0b4:	bd30      	pop	{r4, r5, pc}
 800f0b6:	4299      	cmp	r1, r3
 800f0b8:	d803      	bhi.n	800f0c2 <_free_r+0x46>
 800f0ba:	460a      	mov	r2, r1
 800f0bc:	6851      	ldr	r1, [r2, #4]
 800f0be:	2900      	cmp	r1, #0
 800f0c0:	d1f9      	bne.n	800f0b6 <_free_r+0x3a>
 800f0c2:	6814      	ldr	r4, [r2, #0]
 800f0c4:	1915      	adds	r5, r2, r4
 800f0c6:	429d      	cmp	r5, r3
 800f0c8:	d10a      	bne.n	800f0e0 <_free_r+0x64>
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4423      	add	r3, r4
 800f0ce:	18d0      	adds	r0, r2, r3
 800f0d0:	4288      	cmp	r0, r1
 800f0d2:	6013      	str	r3, [r2, #0]
 800f0d4:	d113      	bne.n	800f0fe <_free_r+0x82>
 800f0d6:	6808      	ldr	r0, [r1, #0]
 800f0d8:	4403      	add	r3, r0
 800f0da:	6013      	str	r3, [r2, #0]
 800f0dc:	684b      	ldr	r3, [r1, #4]
 800f0de:	e00d      	b.n	800f0fc <_free_r+0x80>
 800f0e0:	d902      	bls.n	800f0e8 <_free_r+0x6c>
 800f0e2:	230c      	movs	r3, #12
 800f0e4:	6003      	str	r3, [r0, #0]
 800f0e6:	bd30      	pop	{r4, r5, pc}
 800f0e8:	681c      	ldr	r4, [r3, #0]
 800f0ea:	1918      	adds	r0, r3, r4
 800f0ec:	4288      	cmp	r0, r1
 800f0ee:	bf04      	itt	eq
 800f0f0:	6808      	ldreq	r0, [r1, #0]
 800f0f2:	6849      	ldreq	r1, [r1, #4]
 800f0f4:	6059      	str	r1, [r3, #4]
 800f0f6:	bf04      	itt	eq
 800f0f8:	1900      	addeq	r0, r0, r4
 800f0fa:	6018      	streq	r0, [r3, #0]
 800f0fc:	6053      	str	r3, [r2, #4]
 800f0fe:	bd30      	pop	{r4, r5, pc}
 800f100:	200008c0 	.word	0x200008c0

0800f104 <_malloc_r>:
 800f104:	b570      	push	{r4, r5, r6, lr}
 800f106:	1ccc      	adds	r4, r1, #3
 800f108:	f024 0403 	bic.w	r4, r4, #3
 800f10c:	3408      	adds	r4, #8
 800f10e:	2c0c      	cmp	r4, #12
 800f110:	bf38      	it	cc
 800f112:	240c      	movcc	r4, #12
 800f114:	2c00      	cmp	r4, #0
 800f116:	4606      	mov	r6, r0
 800f118:	da03      	bge.n	800f122 <_malloc_r+0x1e>
 800f11a:	230c      	movs	r3, #12
 800f11c:	6033      	str	r3, [r6, #0]
 800f11e:	2000      	movs	r0, #0
 800f120:	bd70      	pop	{r4, r5, r6, pc}
 800f122:	428c      	cmp	r4, r1
 800f124:	d3f9      	bcc.n	800f11a <_malloc_r+0x16>
 800f126:	4a20      	ldr	r2, [pc, #128]	; (800f1a8 <_malloc_r+0xa4>)
 800f128:	6813      	ldr	r3, [r2, #0]
 800f12a:	4610      	mov	r0, r2
 800f12c:	4619      	mov	r1, r3
 800f12e:	b1a1      	cbz	r1, 800f15a <_malloc_r+0x56>
 800f130:	680a      	ldr	r2, [r1, #0]
 800f132:	1b12      	subs	r2, r2, r4
 800f134:	d40e      	bmi.n	800f154 <_malloc_r+0x50>
 800f136:	2a0b      	cmp	r2, #11
 800f138:	d903      	bls.n	800f142 <_malloc_r+0x3e>
 800f13a:	600a      	str	r2, [r1, #0]
 800f13c:	188b      	adds	r3, r1, r2
 800f13e:	508c      	str	r4, [r1, r2]
 800f140:	e01f      	b.n	800f182 <_malloc_r+0x7e>
 800f142:	428b      	cmp	r3, r1
 800f144:	bf0d      	iteet	eq
 800f146:	685a      	ldreq	r2, [r3, #4]
 800f148:	684a      	ldrne	r2, [r1, #4]
 800f14a:	605a      	strne	r2, [r3, #4]
 800f14c:	6002      	streq	r2, [r0, #0]
 800f14e:	bf18      	it	ne
 800f150:	460b      	movne	r3, r1
 800f152:	e016      	b.n	800f182 <_malloc_r+0x7e>
 800f154:	460b      	mov	r3, r1
 800f156:	6849      	ldr	r1, [r1, #4]
 800f158:	e7e9      	b.n	800f12e <_malloc_r+0x2a>
 800f15a:	4d14      	ldr	r5, [pc, #80]	; (800f1ac <_malloc_r+0xa8>)
 800f15c:	682b      	ldr	r3, [r5, #0]
 800f15e:	b91b      	cbnz	r3, 800f168 <_malloc_r+0x64>
 800f160:	4630      	mov	r0, r6
 800f162:	f000 f825 	bl	800f1b0 <_sbrk_r>
 800f166:	6028      	str	r0, [r5, #0]
 800f168:	4630      	mov	r0, r6
 800f16a:	4621      	mov	r1, r4
 800f16c:	f000 f820 	bl	800f1b0 <_sbrk_r>
 800f170:	1c42      	adds	r2, r0, #1
 800f172:	4603      	mov	r3, r0
 800f174:	d0d1      	beq.n	800f11a <_malloc_r+0x16>
 800f176:	1cc5      	adds	r5, r0, #3
 800f178:	f025 0503 	bic.w	r5, r5, #3
 800f17c:	4285      	cmp	r5, r0
 800f17e:	d10a      	bne.n	800f196 <_malloc_r+0x92>
 800f180:	601c      	str	r4, [r3, #0]
 800f182:	f103 000b 	add.w	r0, r3, #11
 800f186:	1d1a      	adds	r2, r3, #4
 800f188:	f020 0007 	bic.w	r0, r0, #7
 800f18c:	1a82      	subs	r2, r0, r2
 800f18e:	d00a      	beq.n	800f1a6 <_malloc_r+0xa2>
 800f190:	4251      	negs	r1, r2
 800f192:	5099      	str	r1, [r3, r2]
 800f194:	bd70      	pop	{r4, r5, r6, pc}
 800f196:	4630      	mov	r0, r6
 800f198:	1ae9      	subs	r1, r5, r3
 800f19a:	f000 f809 	bl	800f1b0 <_sbrk_r>
 800f19e:	3001      	adds	r0, #1
 800f1a0:	d0bb      	beq.n	800f11a <_malloc_r+0x16>
 800f1a2:	462b      	mov	r3, r5
 800f1a4:	e7ec      	b.n	800f180 <_malloc_r+0x7c>
 800f1a6:	bd70      	pop	{r4, r5, r6, pc}
 800f1a8:	200008c0 	.word	0x200008c0
 800f1ac:	200008bc 	.word	0x200008bc

0800f1b0 <_sbrk_r>:
 800f1b0:	b538      	push	{r3, r4, r5, lr}
 800f1b2:	4c06      	ldr	r4, [pc, #24]	; (800f1cc <_sbrk_r+0x1c>)
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	4608      	mov	r0, r1
 800f1ba:	6023      	str	r3, [r4, #0]
 800f1bc:	f7f8 fe12 	bl	8007de4 <_sbrk>
 800f1c0:	1c43      	adds	r3, r0, #1
 800f1c2:	d102      	bne.n	800f1ca <_sbrk_r+0x1a>
 800f1c4:	6823      	ldr	r3, [r4, #0]
 800f1c6:	b103      	cbz	r3, 800f1ca <_sbrk_r+0x1a>
 800f1c8:	602b      	str	r3, [r5, #0]
 800f1ca:	bd38      	pop	{r3, r4, r5, pc}
 800f1cc:	200014a8 	.word	0x200014a8

0800f1d0 <VCU_ConstB>:
 800f1d0:	48e8a71e 3fefff2e 48e8a71e 3fefff2e     ...H...?...H...?
 800f1e0:	0000fff8 00000000                       ........

0800f1e8 <VCU_ConstP>:
 800f1e8:	00000000 40390000 00000000 00000000     ......9@........
	...
 800f204:	40140000 00000000 404b8000 00000000     ...@......K@....
 800f214:	40640000 47ae147b 3fb47ae1 8f5c28f6     ..d@{..G.z.?.(\.
 800f224:	4008f5c2 47ae147b 3fb47ae1 851eb852     ...@{..G.z.?R...
 800f234:	400851eb 00000000 40060000 c28f5c29     .Q.@.......@)\..
 800f244:	401028f5 00000000 c0440000 00000000     .(.@......D.....
 800f254:	4072c000 2b020c4a 3fb91687 c083126f     ..r@J..+...?o...
 800f264:	3fc5a1ca 00000000 c0440000 00000000     ...?......D.....
 800f274:	4077a000 72b020c5 3fdd9168 e353f7cf     ..w@. .rh..?..S.
 800f284:	3fe09ba5 00000000 40901800 00000000     ...?.......@....
 800f294:	409f5400 00000000 40af0400 00000000     .T.@.......@....
 800f2a4:	40b73400 00000000 40bee600 a5e353f8     .4.@.......@.S..
 800f2b4:	3fe8c49b b645a1cb 3ff4fdf3 33333333     ...?..E....?3333
 800f2c4:	40033333 1eb851ec 400beb85 f1a9fbe7     33.@.Q.....@....
 800f2d4:	40124dd2 00000000 408fd000 00000000     .M.@.......@....
 800f2e4:	409f1800 00000000 40aebe00 00000000     ...@.......@....
 800f2f4:	40b6f300 00000000 40be9600 5a1cac08     ...@.......@...Z
 800f304:	3feb3b64 374bc6a8 3ff64189 a1cac083     d;.?..K7.A.?....
 800f314:	4003b645 851eb852 400c51eb 47ae147b     E..@R....Q.@{..G
 800f324:	40127ae1 00000000 00000000 00000000     .z.@............
	...
 800f34c:	3fe00000 66666666 3fe66666 00000000     ...?ffffff.?....
 800f35c:	3ff00000 00000000 00000000 00000000     ...?............
	...
 800f384:	3fe00000 66666666 3fe66666 00000000     ...?ffffff.?....
 800f394:	3ff00000 00000000 00000000 00000000     ...?............
	...
 800f3bc:	3fe00000 66666666 3fe66666 00000000     ...?ffffff.?....
 800f3cc:	3ff00000 00000000 00000000 00000000     ...?............
 800f3dc:	404e0000 00000000 40518000 00000000     ..N@......Q@....
 800f3ec:	40528000 00000000 4052c000 00000000     ..R@......R@....
 800f3fc:	40540000 00000000 40554000 00000000     ..T@.....@U@....
	...
 800f414:	40240000 00000000 40568000 00000000     ..$@......V@....
 800f424:	3ff00000 00000000 3fe00000 9999999a     ...?.......?....
 800f434:	3fb99999 9999999a 3fa99999 9999999a     ...?.......?....
 800f444:	3fa99999 9999999a 3fa99999 eb851eb8     ...?.......?....
 800f454:	3f9eb851 00000000 00000000 00000000     Q..?............
 800f464:	00000000 eb851eb8 3f9eb851 eb851eb8     ........Q..?....
 800f474:	3f9eb851 9999999a 3fa99999 9999999a     Q..?.......?....
 800f484:	3fd99999 9999999a 3fe99999 00000000     ...?.......?....
 800f494:	3ff00000 00000000 c0390000 00000000     ...?......9.....
 800f4a4:	c0140000 00000000 c0080000 00000000     ................
 800f4b4:	c0000000 00000000 bff00000 00000000     ................
 800f4c4:	bfe00000 9999999a bfb99999 00000000     ................
 800f4d4:	00000000 9999999a 3fb99999 00000000     ...........?....
 800f4e4:	3fe00000 00000000 3ff00000 00000000     ...?.......?....
 800f4f4:	40000000 00000000 40140000 00000000     ...@.......@....
 800f504:	401c0000 00000000 40390000 00000006     ...@......9@....
 800f514:	00000002 00000100 00000101 01010001     ................
 800f524:	00000000                                ....

0800f528 <g_xmc_vadc_group_array>:
 800f528:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

0800f538 <PWM_MHJ9_IN_compare_config>:
 800f538:	00000000 00000005                       ........

0800f540 <PWM_MHJ9_IN_gpio_out_config>:
 800f540:	00000098 00010000 00000004              ............

0800f54c <PWM_MHJ9_OUT_compare_config>:
 800f54c:	00000000 00000005                       ........

0800f554 <PWM_MHJ9_OUT_gpio_out_config>:
 800f554:	00000098 00010000 00000004              ............

0800f560 <PWM_Waterpump_compare_config>:
 800f560:	00000000 00000004                       ........

0800f568 <PWM_Waterpump_gpio_out_config>:
 800f568:	00000098 00010000 00000004              ............

0800f574 <PWM_Fans1_compare_config>:
 800f574:	00000000 00000004                       ........

0800f57c <PWM_Fans1_gpio_out_config>:
 800f57c:	00000098 00010000 00000004              ............

0800f588 <PWM_Fans2_compare_config>:
 800f588:	00000000 00000004                       ........

0800f590 <PWM_Fans2_gpio_out_config>:
 800f590:	00000098 00010000 00000004              ............

0800f59c <INTERRUPT_Shifting>:
 800f59c:	01003f04                                .?..

0800f5a0 <group_init_handle0>:
	...

0800f5b4 <group_init_handle1>:
	...

0800f5c8 <group_init_handle2>:
	...

0800f5dc <group_init_handle3>:
	...

0800f5f0 <global_config>:
 800f5f0:	00000000 00000003 00000000 00000000     ................
	...
 800f608:	454c4449 00000000 09632509 25097525     IDLE.....%c.%u.%
 800f618:	75250975 00000a0d 20726d54 00637653     u.%u....Tmr Svc.
 800f628:	51726d54 00000000                       TmrQ....

0800f630 <EVENT_GENERATOR_Shifting_OGU_Config>:
 800f630:	00000010                                ....

0800f634 <EVENT_DETECTOR_Shifting_ETL_Config>:
 800f634:	00000005 00000237                       ....7...

0800f63c <DIGITAL_IO_Debug_LED>:
 800f63c:	48028000 00000080 00000001 00000000     ...H............
 800f64c:	00000002                                ....

0800f650 <CAN1_Res>:
 800f650:	48028100 00000080 00000001 00000000     ...H............
 800f660:	00000006                                ....

0800f664 <CAN2_Res>:
 800f664:	48028100 00000080 00000001 00000000     ...H............
 800f674:	0000000e                                ....

0800f678 <Signal_DownShift>:
 800f678:	48028300 00000008 00000000 00000000     ...H............
 800f688:	00000002                                ....

0800f68c <Signal_UpShift>:
 800f68c:	48028300 00000008 00000000 00000000     ...H............
 800f69c:	00000001 01040250 00010000 00000000     ....P...........
 800f6ac:	00010000 01010101                       ........

0800f6b4 <CAN_1_gpio_out>:
 800f6b4:	48028100 0000000c                       ...H....

0800f6bc <CAN_1_gpio_out_config>:
 800f6bc:	00000090 00000001 00000002              ............

0800f6c8 <CAN_1_gpio_in>:
 800f6c8:	48028100 0000000d                       ...H....

0800f6d0 <CAN_1_gpio_in_config>:
	...

0800f6dc <CAN_1_sr>:
 800f6dc:	00000000                                ....

0800f6e0 <CAN_1_LMO_01_Config>:
 800f6e0:	200001c0 00000026 00000000              ... &.......

0800f6ec <CAN_1_LMO_02_Config>:
 800f6ec:	200001e0 00000027 00000000              ... '.......

0800f6f8 <CAN_1_LMO_03_Config>:
 800f6f8:	20000200 0000001e 00000000              ... ........

0800f704 <CAN_1_LMO_04_Config>:
 800f704:	20000220 0000001f 00000000               .. ........

0800f710 <CAN_1_LMO_05_Config>:
 800f710:	20000240 00000020 00000000              @..  .......

0800f71c <CAN_1_LMO_06_Config>:
 800f71c:	20000260 00000021 00000000              `.. !.......

0800f728 <CAN_1_LMO_07_Config>:
 800f728:	20000280 00000022 00000000              ... ".......

0800f734 <CAN_1_LMO_08_Config>:
 800f734:	200002a0 00000023 00000000              ... #.......

0800f740 <CAN_1>:
 800f740:	20000138 48014300 200001b4 0800f6e0     8.. .C.H... ....
 800f750:	0800f6ec 0800f6f8 0800f704 0800f710     ................
 800f760:	0800f71c 0800f728 0800f734 00000000     ....(...4.......
	...
 800f7cc:	0800f6dc 0800f6b4 0800f6bc 0800f6c8     ................
 800f7dc:	0800f6d0 00080102 00000000              ............

0800f7e8 <CAN_2_gpio_out>:
 800f7e8:	48028100 00000004                       ...H....

0800f7f0 <CAN_2_gpio_out_config>:
 800f7f0:	00000090 00000001 00000002              ............

0800f7fc <CAN_2_gpio_in>:
 800f7fc:	48028100 00000005                       ...H....

0800f804 <CAN_2_gpio_in_config>:
	...

0800f810 <CAN_2_sr>:
 800f810:	00000000                                ....

0800f814 <CAN_2_LMO_01_Config>:
 800f814:	200002d0 00000007 00000000              ... ........

0800f820 <CAN_2_LMO_02_Config>:
 800f820:	200002f0 00000008 00000000              ... ........

0800f82c <CAN_2_LMO_03_Config>:
 800f82c:	20000310 00000005 00000000              ... ........

0800f838 <CAN_2_LMO_04_Config>:
 800f838:	20000330 00000006 00000000              0.. ........

0800f844 <CAN_2_LMO_05_Config>:
 800f844:	20000350 00000016 00000000              P.. ........

0800f850 <CAN_2_LMO_06_Config>:
 800f850:	20000370 00000015 00000000              p.. ........

0800f85c <CAN_2_LMO_07_Config>:
 800f85c:	20000390 00000018 00000000              ... ........

0800f868 <CAN_2_LMO_08_Config>:
 800f868:	200003b0 00000017 00000000              ... ........

0800f874 <CAN_2_LMO_09_Config>:
 800f874:	200003d0 00000014 00000000              ... ........

0800f880 <CAN_2_LMO_10_Config>:
 800f880:	200003f0 00000025 00000000              ... %.......

0800f88c <CAN_2_LMO_11_Config>:
 800f88c:	20000410 00000024 00000000              ... $.......

0800f898 <CAN_2_LMO_12_Config>:
 800f898:	20000430 00000009 00000000              0.. ........

0800f8a4 <CAN_2_LMO_13_Config>:
 800f8a4:	20000450 0000003c 00000000              P.. <.......

0800f8b0 <CAN_2>:
 800f8b0:	20000138 48014200 200002c0 0800f814     8.. .B.H... ....
 800f8c0:	0800f820 0800f82c 0800f838 0800f844      ...,...8...D...
 800f8d0:	0800f850 0800f85c 0800f868 0800f874     P...\...h...t...
 800f8e0:	0800f880 0800f88c 0800f898 0800f8a4     ................
	...
 800f93c:	0800f810 0800f7e8 0800f7f0 0800f7fc     ................
 800f94c:	0800f804 000d0000 00000000              ............

0800f958 <BUS_IO_pin_list>:
 800f958:	48028000 00000009 48028000 0000000a     ...H.......H....
 800f968:	48028000 00000004 48028000 00000005     ...H.......H....
 800f978:	48028000 00000006 48028500 00000002     ...H.......H....
 800f988:	48028500 00000007                       ...H....

0800f990 <BUS_IO_Input_pin_list>:
 800f990:	48028000 00000007 48028000 00000008     ...H.......H....

0800f9a0 <ANALOG_IO_boardTemp>:
 800f9a0:	00000000 20000814 48028e00 0000000e     ....... ...H....

0800f9b0 <ANALOG_IO_pbrakeR>:
 800f9b0:	00000000 20000815 48028e00 00000006     ....... ...H....

0800f9c0 <ANALOG_IO_xClutch>:
 800f9c0:	00000000 20000816 48028e00 00000005     ....... ...H....

0800f9d0 <ANALOG_IO_fFL>:
 800f9d0:	00000000 20000817 48028e00 00000002     ....... ...H....

0800f9e0 <ANALOG_IO_fFR>:
 800f9e0:	00000000 20000818 48028e00 00000003     ....... ...H....

0800f9f0 <ANALOG_IO_xRHF>:
 800f9f0:	00000000 20000819 48028e00 00000004     ....... ...H....

0800fa00 <ANALOG_IO_UBat>:
 800fa00:	00000000 2000081a 48028e00 00000008     ....... ...H....

0800fa10 <ANALOG_IO_xClutchSTW>:
 800fa10:	00000000 2000081b 48028e00 00000000     ....... ...H....

0800fa20 <ANALOG_IO_TR1_I_WP>:
 800fa20:	00000000 2000081c 48028f00 00000002     ....... ...H....

0800fa30 <ANALOG_IO_TR2_I_FAN1>:
 800fa30:	00000000 2000081d 48028f00 00000003     ....... ...H....

0800fa40 <ANALOG_IO_TR3_I_FAN2>:
 800fa40:	00000000 2000081e 48028f00 00000008     ....... ...H....

0800fa50 <global_iclass_config>:
 800fa50:	00000000                                ....

0800fa54 <backgnd_config>:
 800fa54:	00000005 00000000 00000010 6b736154     ............Task
 800fa64:	7665525f 65766965 00000000 6b736154     _Reveive....Task
 800fa74:	776f4c5f 6f697250 6b736154 00000000     _LowPrioTask....
 800fa84:	6b736154 6172545f 696d736e 00000074     Task_Transmit...
 800fa94:	6b736154 6172545f 696d736e 6f697373     Task_Transmissio
 800faa4:	0000006e 6b736154 656e4f5f 706f6f4c     n...Task_OneLoop
 800fab4:	6b736154 00000000 656d6954 72545f72     Task....Timer_Tr
 800fac4:	6d736e61 69737369 00006e6f 646f6d66     ansmission..fmod
 800fad4:	00000000                                ....

0800fad8 <Zero>:
	...
 800fae4:	80000000 00000043                       ....C...
