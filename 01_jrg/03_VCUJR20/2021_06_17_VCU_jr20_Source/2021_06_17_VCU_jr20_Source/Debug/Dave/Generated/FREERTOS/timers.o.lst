   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "timers.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .bss.xActiveTimerList1,"aw",%nobits
  20              	 .align 2
  23              	xActiveTimerList1:
  24 0000 00000000 	 .space 20
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              	 .section .bss.xActiveTimerList2,"aw",%nobits
  26              	 .align 2
  29              	xActiveTimerList2:
  30 0000 00000000 	 .space 20
  30      00000000 
  30      00000000 
  30      00000000 
  30      00000000 
  31              	 .section .bss.pxCurrentTimerList,"aw",%nobits
  32              	 .align 2
  35              	pxCurrentTimerList:
  36 0000 00000000 	 .space 4
  37              	 .section .bss.pxOverflowTimerList,"aw",%nobits
  38              	 .align 2
  41              	pxOverflowTimerList:
  42 0000 00000000 	 .space 4
  43              	 .section .bss.xTimerQueue,"aw",%nobits
  44              	 .align 2
  47              	xTimerQueue:
  48 0000 00000000 	 .space 4
  49              	 .section .bss.xTimerTaskHandle,"aw",%nobits
  50              	 .align 2
  53              	xTimerTaskHandle:
  54 0000 00000000 	 .space 4
  55              	 .section .rodata
  56              	 .align 2
  57              	.LC0:
  58 0000 546D7220 	 .ascii "Tmr Svc\000"
  58      53766300 
  59              	 .section .text.xTimerCreateTimerTask,"ax",%progbits
  60              	 .align 2
  61              	 .global xTimerCreateTimerTask
  62              	 .thumb
  63              	 .thumb_func
  65              	xTimerCreateTimerTask:
  66              	.LFB137:
  67              	 .file 1 "../Dave/Generated/FREERTOS/timers.c"
   1:../Dave/Generated/FREERTOS/timers.c **** /*
   2:../Dave/Generated/FREERTOS/timers.c ****  * FreeRTOS Kernel V10.2.1
   3:../Dave/Generated/FREERTOS/timers.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/timers.c ****  *
   5:../Dave/Generated/FREERTOS/timers.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/timers.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/timers.c ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/timers.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/timers.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/timers.c ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/timers.c ****  *
  12:../Dave/Generated/FREERTOS/timers.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/timers.c ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/timers.c ****  *
  15:../Dave/Generated/FREERTOS/timers.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/timers.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/timers.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/timers.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/timers.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/timers.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/timers.c ****  *
  22:../Dave/Generated/FREERTOS/timers.c ****  * http://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/timers.c ****  * http://aws.amazon.com/freertos
  24:../Dave/Generated/FREERTOS/timers.c ****  *
  25:../Dave/Generated/FREERTOS/timers.c ****  * 1 tab == 4 spaces!
  26:../Dave/Generated/FREERTOS/timers.c ****  */
  27:../Dave/Generated/FREERTOS/timers.c **** 
  28:../Dave/Generated/FREERTOS/timers.c **** /* Standard includes. */
  29:../Dave/Generated/FREERTOS/timers.c **** #include <stdlib.h>
  30:../Dave/Generated/FREERTOS/timers.c **** 
  31:../Dave/Generated/FREERTOS/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:../Dave/Generated/FREERTOS/timers.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:../Dave/Generated/FREERTOS/timers.c **** task.h is included from an application file. */
  34:../Dave/Generated/FREERTOS/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:../Dave/Generated/FREERTOS/timers.c **** 
  36:../Dave/Generated/FREERTOS/timers.c **** #include "FreeRTOS.h"
  37:../Dave/Generated/FREERTOS/timers.c **** #include "task.h"
  38:../Dave/Generated/FREERTOS/timers.c **** #include "queue.h"
  39:../Dave/Generated/FREERTOS/timers.c **** #include "timers.h"
  40:../Dave/Generated/FREERTOS/timers.c **** 
  41:../Dave/Generated/FREERTOS/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  42:../Dave/Generated/FREERTOS/timers.c **** 	#error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function available.
  43:../Dave/Generated/FREERTOS/timers.c **** #endif
  44:../Dave/Generated/FREERTOS/timers.c **** 
  45:../Dave/Generated/FREERTOS/timers.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  46:../Dave/Generated/FREERTOS/timers.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  47:../Dave/Generated/FREERTOS/timers.c **** for the header files above, but not in this file, in order to generate the
  48:../Dave/Generated/FREERTOS/timers.c **** correct privileged Vs unprivileged linkage and placement. */
  49:../Dave/Generated/FREERTOS/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e9021 !e961 !e750. */
  50:../Dave/Generated/FREERTOS/timers.c **** 
  51:../Dave/Generated/FREERTOS/timers.c **** 
  52:../Dave/Generated/FREERTOS/timers.c **** /* This entire source file will be skipped if the application is not configured
  53:../Dave/Generated/FREERTOS/timers.c **** to include software timer functionality.  This #if is closed at the very bottom
  54:../Dave/Generated/FREERTOS/timers.c **** of this file.  If you want to include software timer functionality then ensure
  55:../Dave/Generated/FREERTOS/timers.c **** configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  56:../Dave/Generated/FREERTOS/timers.c **** #if ( configUSE_TIMERS == 1 )
  57:../Dave/Generated/FREERTOS/timers.c **** 
  58:../Dave/Generated/FREERTOS/timers.c **** /* Misc definitions. */
  59:../Dave/Generated/FREERTOS/timers.c **** #define tmrNO_DELAY		( TickType_t ) 0U
  60:../Dave/Generated/FREERTOS/timers.c **** 
  61:../Dave/Generated/FREERTOS/timers.c **** /* The name assigned to the timer service task.  This can be overridden by
  62:../Dave/Generated/FREERTOS/timers.c **** defining trmTIMER_SERVICE_TASK_NAME in FreeRTOSConfig.h. */
  63:../Dave/Generated/FREERTOS/timers.c **** #ifndef configTIMER_SERVICE_TASK_NAME
  64:../Dave/Generated/FREERTOS/timers.c **** 	#define configTIMER_SERVICE_TASK_NAME "Tmr Svc"
  65:../Dave/Generated/FREERTOS/timers.c **** #endif
  66:../Dave/Generated/FREERTOS/timers.c **** 
  67:../Dave/Generated/FREERTOS/timers.c **** /* Bit definitions used in the ucStatus member of a timer structure. */
  68:../Dave/Generated/FREERTOS/timers.c **** #define tmrSTATUS_IS_ACTIVE					( ( uint8_t ) 0x01 )
  69:../Dave/Generated/FREERTOS/timers.c **** #define tmrSTATUS_IS_STATICALLY_ALLOCATED	( ( uint8_t ) 0x02 )
  70:../Dave/Generated/FREERTOS/timers.c **** #define tmrSTATUS_IS_AUTORELOAD				( ( uint8_t ) 0x04 )
  71:../Dave/Generated/FREERTOS/timers.c **** 
  72:../Dave/Generated/FREERTOS/timers.c **** /* The definition of the timers themselves. */
  73:../Dave/Generated/FREERTOS/timers.c **** typedef struct tmrTimerControl /* The old naming convention is used to prevent breaking kernel awar
  74:../Dave/Generated/FREERTOS/timers.c **** {
  75:../Dave/Generated/FREERTOS/timers.c **** 	const char				*pcTimerName;		/*<< Text name.  This is not used by the kernel, it is included simpl
  76:../Dave/Generated/FREERTOS/timers.c **** 	ListItem_t				xTimerListItem;		/*<< Standard linked list item as used by all kernel features for e
  77:../Dave/Generated/FREERTOS/timers.c **** 	TickType_t				xTimerPeriodInTicks;/*<< How quickly and often the timer expires. */
  78:../Dave/Generated/FREERTOS/timers.c **** 	void 					*pvTimerID;			/*<< An ID to identify the timer.  This allows the timer to be identified 
  79:../Dave/Generated/FREERTOS/timers.c **** 	TimerCallbackFunction_t	pxCallbackFunction;	/*<< The function that will be called when the timer e
  80:../Dave/Generated/FREERTOS/timers.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  81:../Dave/Generated/FREERTOS/timers.c **** 		UBaseType_t			uxTimerNumber;		/*<< An ID assigned by trace tools such as FreeRTOS+Trace */
  82:../Dave/Generated/FREERTOS/timers.c **** 	#endif
  83:../Dave/Generated/FREERTOS/timers.c **** 	uint8_t 				ucStatus;			/*<< Holds bits to say if the timer was statically allocated or not, and i
  84:../Dave/Generated/FREERTOS/timers.c **** } xTIMER;
  85:../Dave/Generated/FREERTOS/timers.c **** 
  86:../Dave/Generated/FREERTOS/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
  87:../Dave/Generated/FREERTOS/timers.c **** name below to enable the use of older kernel aware debuggers. */
  88:../Dave/Generated/FREERTOS/timers.c **** typedef xTIMER Timer_t;
  89:../Dave/Generated/FREERTOS/timers.c **** 
  90:../Dave/Generated/FREERTOS/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
  91:../Dave/Generated/FREERTOS/timers.c **** Two types of message can be queued - messages that manipulate a software timer,
  92:../Dave/Generated/FREERTOS/timers.c **** and messages that request the execution of a non-timer related callback.  The
  93:../Dave/Generated/FREERTOS/timers.c **** two message types are defined in two separate structures, xTimerParametersType
  94:../Dave/Generated/FREERTOS/timers.c **** and xCallbackParametersType respectively. */
  95:../Dave/Generated/FREERTOS/timers.c **** typedef struct tmrTimerParameters
  96:../Dave/Generated/FREERTOS/timers.c **** {
  97:../Dave/Generated/FREERTOS/timers.c **** 	TickType_t			xMessageValue;		/*<< An optional value used by a subset of commands, for example, whe
  98:../Dave/Generated/FREERTOS/timers.c **** 	Timer_t *			pxTimer;			/*<< The timer to which the command will be applied. */
  99:../Dave/Generated/FREERTOS/timers.c **** } TimerParameter_t;
 100:../Dave/Generated/FREERTOS/timers.c **** 
 101:../Dave/Generated/FREERTOS/timers.c **** 
 102:../Dave/Generated/FREERTOS/timers.c **** typedef struct tmrCallbackParameters
 103:../Dave/Generated/FREERTOS/timers.c **** {
 104:../Dave/Generated/FREERTOS/timers.c **** 	PendedFunction_t	pxCallbackFunction;	/* << The callback function to execute. */
 105:../Dave/Generated/FREERTOS/timers.c **** 	void *pvParameter1;						/* << The value that will be used as the callback functions first paramet
 106:../Dave/Generated/FREERTOS/timers.c **** 	uint32_t ulParameter2;					/* << The value that will be used as the callback functions second para
 107:../Dave/Generated/FREERTOS/timers.c **** } CallbackParameters_t;
 108:../Dave/Generated/FREERTOS/timers.c **** 
 109:../Dave/Generated/FREERTOS/timers.c **** /* The structure that contains the two message types, along with an identifier
 110:../Dave/Generated/FREERTOS/timers.c **** that is used to determine which message type is valid. */
 111:../Dave/Generated/FREERTOS/timers.c **** typedef struct tmrTimerQueueMessage
 112:../Dave/Generated/FREERTOS/timers.c **** {
 113:../Dave/Generated/FREERTOS/timers.c **** 	BaseType_t			xMessageID;			/*<< The command being sent to the timer service task. */
 114:../Dave/Generated/FREERTOS/timers.c **** 	union
 115:../Dave/Generated/FREERTOS/timers.c **** 	{
 116:../Dave/Generated/FREERTOS/timers.c **** 		TimerParameter_t xTimerParameters;
 117:../Dave/Generated/FREERTOS/timers.c **** 
 118:../Dave/Generated/FREERTOS/timers.c **** 		/* Don't include xCallbackParameters if it is not going to be used as
 119:../Dave/Generated/FREERTOS/timers.c **** 		it makes the structure (and therefore the timer queue) larger. */
 120:../Dave/Generated/FREERTOS/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 121:../Dave/Generated/FREERTOS/timers.c **** 			CallbackParameters_t xCallbackParameters;
 122:../Dave/Generated/FREERTOS/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 123:../Dave/Generated/FREERTOS/timers.c **** 	} u;
 124:../Dave/Generated/FREERTOS/timers.c **** } DaemonTaskMessage_t;
 125:../Dave/Generated/FREERTOS/timers.c **** 
 126:../Dave/Generated/FREERTOS/timers.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 127:../Dave/Generated/FREERTOS/timers.c **** which static variables must be declared volatile. */
 128:../Dave/Generated/FREERTOS/timers.c **** 
 129:../Dave/Generated/FREERTOS/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 130:../Dave/Generated/FREERTOS/timers.c **** time order, with the nearest expiry time at the front of the list.  Only the
 131:../Dave/Generated/FREERTOS/timers.c **** timer service task is allowed to access these lists.
 132:../Dave/Generated/FREERTOS/timers.c **** xActiveTimerList1 and xActiveTimerList2 could be at function scope but that
 133:../Dave/Generated/FREERTOS/timers.c **** breaks some kernel aware debuggers, and debuggers that reply on removing the
 134:../Dave/Generated/FREERTOS/timers.c **** static qualifier. */
 135:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList1;
 136:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList2;
 137:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static List_t *pxCurrentTimerList;
 138:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static List_t *pxOverflowTimerList;
 139:../Dave/Generated/FREERTOS/timers.c **** 
 140:../Dave/Generated/FREERTOS/timers.c **** /* A queue that is used to send commands to the timer service task. */
 141:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 142:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 143:../Dave/Generated/FREERTOS/timers.c **** 
 144:../Dave/Generated/FREERTOS/timers.c **** /*lint -restore */
 145:../Dave/Generated/FREERTOS/timers.c **** 
 146:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 147:../Dave/Generated/FREERTOS/timers.c **** 
 148:../Dave/Generated/FREERTOS/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 149:../Dave/Generated/FREERTOS/timers.c **** 
 150:../Dave/Generated/FREERTOS/timers.c **** 	/* If static allocation is supported then the application must provide the
 151:../Dave/Generated/FREERTOS/timers.c **** 	following callback function - which enables the application to optionally
 152:../Dave/Generated/FREERTOS/timers.c **** 	provide the memory that will be used by the timer task as the task's stack
 153:../Dave/Generated/FREERTOS/timers.c **** 	and TCB. */
 154:../Dave/Generated/FREERTOS/timers.c **** 	extern void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **pp
 155:../Dave/Generated/FREERTOS/timers.c **** 
 156:../Dave/Generated/FREERTOS/timers.c **** #endif
 157:../Dave/Generated/FREERTOS/timers.c **** 
 158:../Dave/Generated/FREERTOS/timers.c **** /*
 159:../Dave/Generated/FREERTOS/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 160:../Dave/Generated/FREERTOS/timers.c ****  * been initialised already.
 161:../Dave/Generated/FREERTOS/timers.c ****  */
 162:../Dave/Generated/FREERTOS/timers.c **** static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 163:../Dave/Generated/FREERTOS/timers.c **** 
 164:../Dave/Generated/FREERTOS/timers.c **** /*
 165:../Dave/Generated/FREERTOS/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 166:../Dave/Generated/FREERTOS/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 167:../Dave/Generated/FREERTOS/timers.c ****  * xTimerQueue queue.
 168:../Dave/Generated/FREERTOS/timers.c ****  */
 169:../Dave/Generated/FREERTOS/timers.c **** static portTASK_FUNCTION_PROTO( prvTimerTask, pvParameters ) PRIVILEGED_FUNCTION;
 170:../Dave/Generated/FREERTOS/timers.c **** 
 171:../Dave/Generated/FREERTOS/timers.c **** /*
 172:../Dave/Generated/FREERTOS/timers.c ****  * Called by the timer service task to interpret and process a command it
 173:../Dave/Generated/FREERTOS/timers.c ****  * received on the timer queue.
 174:../Dave/Generated/FREERTOS/timers.c ****  */
 175:../Dave/Generated/FREERTOS/timers.c **** static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 176:../Dave/Generated/FREERTOS/timers.c **** 
 177:../Dave/Generated/FREERTOS/timers.c **** /*
 178:../Dave/Generated/FREERTOS/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 179:../Dave/Generated/FREERTOS/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 180:../Dave/Generated/FREERTOS/timers.c ****  */
 181:../Dave/Generated/FREERTOS/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 182:../Dave/Generated/FREERTOS/timers.c **** 
 183:../Dave/Generated/FREERTOS/timers.c **** /*
 184:../Dave/Generated/FREERTOS/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 185:../Dave/Generated/FREERTOS/timers.c ****  * auto reload timer, then call its callback.
 186:../Dave/Generated/FREERTOS/timers.c ****  */
 187:../Dave/Generated/FREERTOS/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow ) P
 188:../Dave/Generated/FREERTOS/timers.c **** 
 189:../Dave/Generated/FREERTOS/timers.c **** /*
 190:../Dave/Generated/FREERTOS/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 191:../Dave/Generated/FREERTOS/timers.c ****  * current timer list does not still reference some timers.
 192:../Dave/Generated/FREERTOS/timers.c ****  */
 193:../Dave/Generated/FREERTOS/timers.c **** static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 194:../Dave/Generated/FREERTOS/timers.c **** 
 195:../Dave/Generated/FREERTOS/timers.c **** /*
 196:../Dave/Generated/FREERTOS/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 197:../Dave/Generated/FREERTOS/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 198:../Dave/Generated/FREERTOS/timers.c ****  */
 199:../Dave/Generated/FREERTOS/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FUNCTI
 200:../Dave/Generated/FREERTOS/timers.c **** 
 201:../Dave/Generated/FREERTOS/timers.c **** /*
 202:../Dave/Generated/FREERTOS/timers.c ****  * If the timer list contains any active timers then return the expire time of
 203:../Dave/Generated/FREERTOS/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 204:../Dave/Generated/FREERTOS/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 205:../Dave/Generated/FREERTOS/timers.c ****  * to pdTRUE.
 206:../Dave/Generated/FREERTOS/timers.c ****  */
 207:../Dave/Generated/FREERTOS/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION;
 208:../Dave/Generated/FREERTOS/timers.c **** 
 209:../Dave/Generated/FREERTOS/timers.c **** /*
 210:../Dave/Generated/FREERTOS/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 211:../Dave/Generated/FREERTOS/timers.c ****  * until either a timer does expire or a command is received.
 212:../Dave/Generated/FREERTOS/timers.c ****  */
 213:../Dave/Generated/FREERTOS/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 214:../Dave/Generated/FREERTOS/timers.c **** 
 215:../Dave/Generated/FREERTOS/timers.c **** /*
 216:../Dave/Generated/FREERTOS/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 217:../Dave/Generated/FREERTOS/timers.c ****  * dynamically to fill in the structure's members.
 218:../Dave/Generated/FREERTOS/timers.c ****  */
 219:../Dave/Generated/FREERTOS/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,			/*lint !e971 Unqualified char 
 220:../Dave/Generated/FREERTOS/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 221:../Dave/Generated/FREERTOS/timers.c **** 									const UBaseType_t uxAutoReload,
 222:../Dave/Generated/FREERTOS/timers.c **** 									void * const pvTimerID,
 223:../Dave/Generated/FREERTOS/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 224:../Dave/Generated/FREERTOS/timers.c **** 									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
 225:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 226:../Dave/Generated/FREERTOS/timers.c **** 
 227:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerCreateTimerTask( void )
 228:../Dave/Generated/FREERTOS/timers.c **** {
  68              	 .loc 1 228 0
  69              	 .cfi_startproc
  70              	 
  71              	 
  72 0000 80B5     	 push {r7,lr}
  73              	.LCFI0:
  74              	 .cfi_def_cfa_offset 8
  75              	 .cfi_offset 7,-8
  76              	 .cfi_offset 14,-4
  77 0002 84B0     	 sub sp,sp,#16
  78              	.LCFI1:
  79              	 .cfi_def_cfa_offset 24
  80 0004 02AF     	 add r7,sp,#8
  81              	.LCFI2:
  82              	 .cfi_def_cfa 7,16
 229:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xReturn = pdFAIL;
  83              	 .loc 1 229 0
  84 0006 0023     	 movs r3,#0
  85 0008 7B60     	 str r3,[r7,#4]
 230:../Dave/Generated/FREERTOS/timers.c **** 
 231:../Dave/Generated/FREERTOS/timers.c **** 	/* This function is called when the scheduler is started if
 232:../Dave/Generated/FREERTOS/timers.c **** 	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 233:../Dave/Generated/FREERTOS/timers.c **** 	timer service task has been created/initialised.  If timers have already
 234:../Dave/Generated/FREERTOS/timers.c **** 	been created then the initialisation will already have been performed. */
 235:../Dave/Generated/FREERTOS/timers.c **** 	prvCheckForValidListAndQueue();
  86              	 .loc 1 235 0
  87 000a FFF7FEFF 	 bl prvCheckForValidListAndQueue
 236:../Dave/Generated/FREERTOS/timers.c **** 
 237:../Dave/Generated/FREERTOS/timers.c **** 	if( xTimerQueue != NULL )
  88              	 .loc 1 237 0
  89 000e 114B     	 ldr r3,.L6
  90 0010 1B68     	 ldr r3,[r3]
  91 0012 002B     	 cmp r3,#0
  92 0014 0BD0     	 beq .L2
 238:../Dave/Generated/FREERTOS/timers.c **** 	{
 239:../Dave/Generated/FREERTOS/timers.c **** 		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 240:../Dave/Generated/FREERTOS/timers.c **** 		{
 241:../Dave/Generated/FREERTOS/timers.c **** 			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 242:../Dave/Generated/FREERTOS/timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
 243:../Dave/Generated/FREERTOS/timers.c **** 			uint32_t ulTimerTaskStackSize;
 244:../Dave/Generated/FREERTOS/timers.c **** 
 245:../Dave/Generated/FREERTOS/timers.c **** 			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStac
 246:../Dave/Generated/FREERTOS/timers.c **** 			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 247:../Dave/Generated/FREERTOS/timers.c **** 													configTIMER_SERVICE_TASK_NAME,
 248:../Dave/Generated/FREERTOS/timers.c **** 													ulTimerTaskStackSize,
 249:../Dave/Generated/FREERTOS/timers.c **** 													NULL,
 250:../Dave/Generated/FREERTOS/timers.c **** 													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 251:../Dave/Generated/FREERTOS/timers.c **** 													pxTimerTaskStackBuffer,
 252:../Dave/Generated/FREERTOS/timers.c **** 													pxTimerTaskTCBBuffer );
 253:../Dave/Generated/FREERTOS/timers.c **** 
 254:../Dave/Generated/FREERTOS/timers.c **** 			if( xTimerTaskHandle != NULL )
 255:../Dave/Generated/FREERTOS/timers.c **** 			{
 256:../Dave/Generated/FREERTOS/timers.c **** 				xReturn = pdPASS;
 257:../Dave/Generated/FREERTOS/timers.c **** 			}
 258:../Dave/Generated/FREERTOS/timers.c **** 		}
 259:../Dave/Generated/FREERTOS/timers.c **** 		#else
 260:../Dave/Generated/FREERTOS/timers.c **** 		{
 261:../Dave/Generated/FREERTOS/timers.c **** 			xReturn = xTaskCreate(	prvTimerTask,
  93              	 .loc 1 261 0
  94 0016 0423     	 movs r3,#4
  95 0018 0093     	 str r3,[sp]
  96 001a 0F4B     	 ldr r3,.L6+4
  97 001c 0193     	 str r3,[sp,#4]
  98 001e 0F48     	 ldr r0,.L6+8
  99 0020 0F49     	 ldr r1,.L6+12
 100 0022 4FF48272 	 mov r2,#260
 101 0026 0023     	 movs r3,#0
 102 0028 FFF7FEFF 	 bl xTaskCreate
 103 002c 7860     	 str r0,[r7,#4]
 104              	.L2:
 262:../Dave/Generated/FREERTOS/timers.c **** 									configTIMER_SERVICE_TASK_NAME,
 263:../Dave/Generated/FREERTOS/timers.c **** 									configTIMER_TASK_STACK_DEPTH,
 264:../Dave/Generated/FREERTOS/timers.c **** 									NULL,
 265:../Dave/Generated/FREERTOS/timers.c **** 									( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 266:../Dave/Generated/FREERTOS/timers.c **** 									&xTimerTaskHandle );
 267:../Dave/Generated/FREERTOS/timers.c **** 		}
 268:../Dave/Generated/FREERTOS/timers.c **** 		#endif /* configSUPPORT_STATIC_ALLOCATION */
 269:../Dave/Generated/FREERTOS/timers.c **** 	}
 270:../Dave/Generated/FREERTOS/timers.c **** 	else
 271:../Dave/Generated/FREERTOS/timers.c **** 	{
 272:../Dave/Generated/FREERTOS/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 273:../Dave/Generated/FREERTOS/timers.c **** 	}
 274:../Dave/Generated/FREERTOS/timers.c **** 
 275:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xReturn );
 105              	 .loc 1 275 0
 106 002e 7B68     	 ldr r3,[r7,#4]
 107 0030 002B     	 cmp r3,#0
 108 0032 09D1     	 bne .L3
 109              	.LBB37:
 110              	.LBB38:
 111              	 .file 2 "../Dave/Generated/FREERTOS/portable/GCC/portmacro.h"
   1:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*
   2:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
   5:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  12:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  15:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  22:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * http://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * http://aws.amazon.com/freertos
  24:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  25:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * 1 tab == 4 spaces!
  26:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  */
  27:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  28:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  29:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef PORTMACRO_H
  30:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define PORTMACRO_H
  31:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  32:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifdef __cplusplus
  33:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** extern "C" {
  34:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
  35:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  36:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------
  37:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * Port specific definitions.
  38:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  39:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * given hardware and compiler.
  41:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  42:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * These settings should not be altered.
  43:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *-----------------------------------------------------------
  44:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  */
  45:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  46:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Type definitions. */
  47:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portCHAR		char
  48:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portFLOAT		float
  49:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portDOUBLE		double
  50:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portLONG		long
  51:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSHORT		short
  52:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portBASE_TYPE	long
  54:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  55:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** typedef long BaseType_t;
  57:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** typedef unsigned long UBaseType_t;
  58:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  59:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	typedef uint16_t TickType_t;
  61:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #else
  63:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	typedef uint32_t TickType_t;
  64:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  66:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	not need to be guarded with a critical section. */
  68:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
  70:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
  71:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  72:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Architecture specifics. */
  73:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
  77:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  78:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Scheduler utilities. */
  79:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portYIELD() 															\
  80:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {																				\
  81:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 																				\
  84:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile( "isb" );													\
  88:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
  89:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  90:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
  95:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  96:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Critical section management. */
  97:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** extern void vPortEnterCritical( void );
  98:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** extern void vPortExitCritical( void );
  99:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 106:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 107:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 108:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** (which build with all the ports) will build. */
 111:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 114:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 115:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Tickless idle/low power functionality. */
 116:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 120:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 121:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 122:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Architecture specific optimisations. */
 123:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 126:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 127:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 129:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Generic helper function. */
 130:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	{
 132:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	uint8_t ucReturn;
 133:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 134:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		return ucReturn;
 136:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 137:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 138:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Check the configuration. */
 139:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#endif
 142:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 143:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 147:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 149:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 151:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 153:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 154:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 155:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifdef configASSERT
 156:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 159:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 160:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* portNOP() is not required by this port. */
 161:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portNOP()
 162:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 163:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portINLINE	__inline
 164:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 165:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef portFORCE_INLINE
 166:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 168:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 169:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {
 171:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** BaseType_t xReturn;
 173:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 174:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 177:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	{
 179:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		xReturn = pdFALSE;
 180:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 181:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	else
 182:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	{
 183:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		xReturn = pdTRUE;
 184:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 185:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 186:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	return xReturn;
 187:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 188:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 189:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 190:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 191:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {
 193:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** uint32_t ulNewBASEPRI;
 194:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile
 112              	 .loc 2 195 0 discriminator 1
 113              	
 114 0034 4FF0FC03 	 mov r3,#252
 115 0038 83F31188 	 msr basepri,r3
 116 003c BFF36F8F 	 isb 
 117 0040 BFF34F8F 	 dsb 
 118              	
 119              	
 120              	 .thumb
 121 0044 3B60     	 str r3,[r7]
 122              	.L4:
 123              	.LBE38:
 124              	.LBE37:
 125              	 .loc 1 275 0 discriminator 1
 126 0046 FEE7     	 b .L4
 127              	.L3:
 276:../Dave/Generated/FREERTOS/timers.c **** 	return xReturn;
 128              	 .loc 1 276 0
 129 0048 7B68     	 ldr r3,[r7,#4]
 277:../Dave/Generated/FREERTOS/timers.c **** }
 130              	 .loc 1 277 0
 131 004a 1846     	 mov r0,r3
 132 004c 0837     	 adds r7,r7,#8
 133              	.LCFI3:
 134              	 .cfi_def_cfa_offset 8
 135 004e BD46     	 mov sp,r7
 136              	.LCFI4:
 137              	 .cfi_def_cfa_register 13
 138              	 
 139 0050 80BD     	 pop {r7,pc}
 140              	.L7:
 141 0052 00BF     	 .align 2
 142              	.L6:
 143 0054 00000000 	 .word xTimerQueue
 144 0058 00000000 	 .word xTimerTaskHandle
 145 005c 00000000 	 .word prvTimerTask
 146 0060 00000000 	 .word .LC0
 147              	 .cfi_endproc
 148              	.LFE137:
 150              	 .section .text.xTimerCreate,"ax",%progbits
 151              	 .align 2
 152              	 .global xTimerCreate
 153              	 .thumb
 154              	 .thumb_func
 156              	xTimerCreate:
 157              	.LFB138:
 278:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 279:../Dave/Generated/FREERTOS/timers.c **** 
 280:../Dave/Generated/FREERTOS/timers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 281:../Dave/Generated/FREERTOS/timers.c **** 
 282:../Dave/Generated/FREERTOS/timers.c **** 	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types 
 283:../Dave/Generated/FREERTOS/timers.c **** 								const TickType_t xTimerPeriodInTicks,
 284:../Dave/Generated/FREERTOS/timers.c **** 								const UBaseType_t uxAutoReload,
 285:../Dave/Generated/FREERTOS/timers.c **** 								void * const pvTimerID,
 286:../Dave/Generated/FREERTOS/timers.c **** 								TimerCallbackFunction_t pxCallbackFunction )
 287:../Dave/Generated/FREERTOS/timers.c **** 	{
 158              	 .loc 1 287 0
 159              	 .cfi_startproc
 160              	 
 161              	 
 162 0000 80B5     	 push {r7,lr}
 163              	.LCFI5:
 164              	 .cfi_def_cfa_offset 8
 165              	 .cfi_offset 7,-8
 166              	 .cfi_offset 14,-4
 167 0002 88B0     	 sub sp,sp,#32
 168              	.LCFI6:
 169              	 .cfi_def_cfa_offset 40
 170 0004 02AF     	 add r7,sp,#8
 171              	.LCFI7:
 172              	 .cfi_def_cfa 7,32
 173 0006 F860     	 str r0,[r7,#12]
 174 0008 B960     	 str r1,[r7,#8]
 175 000a 7A60     	 str r2,[r7,#4]
 176 000c 3B60     	 str r3,[r7]
 288:../Dave/Generated/FREERTOS/timers.c **** 	Timer_t *pxNewTimer;
 289:../Dave/Generated/FREERTOS/timers.c **** 
 290:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values ret
 177              	 .loc 1 290 0
 178 000e 2C20     	 movs r0,#44
 179 0010 FFF7FEFF 	 bl pvPortMalloc
 180 0014 7861     	 str r0,[r7,#20]
 291:../Dave/Generated/FREERTOS/timers.c **** 
 292:../Dave/Generated/FREERTOS/timers.c **** 		if( pxNewTimer != NULL )
 181              	 .loc 1 292 0
 182 0016 7B69     	 ldr r3,[r7,#20]
 183 0018 002B     	 cmp r3,#0
 184 001a 0DD0     	 beq .L9
 293:../Dave/Generated/FREERTOS/timers.c **** 		{
 294:../Dave/Generated/FREERTOS/timers.c **** 			/* Status is thus far zero as the timer is not created statically
 295:../Dave/Generated/FREERTOS/timers.c **** 			and has not been started.  The autoreload bit may get set in
 296:../Dave/Generated/FREERTOS/timers.c **** 			prvInitialiseNewTimer. */
 297:../Dave/Generated/FREERTOS/timers.c **** 			pxNewTimer->ucStatus = 0x00;
 185              	 .loc 1 297 0
 186 001c 7B69     	 ldr r3,[r7,#20]
 187 001e 0022     	 movs r2,#0
 188 0020 83F82820 	 strb r2,[r3,#40]
 298:../Dave/Generated/FREERTOS/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 189              	 .loc 1 298 0
 190 0024 3B6A     	 ldr r3,[r7,#32]
 191 0026 0093     	 str r3,[sp]
 192 0028 7B69     	 ldr r3,[r7,#20]
 193 002a 0193     	 str r3,[sp,#4]
 194 002c F868     	 ldr r0,[r7,#12]
 195 002e B968     	 ldr r1,[r7,#8]
 196 0030 7A68     	 ldr r2,[r7,#4]
 197 0032 3B68     	 ldr r3,[r7]
 198 0034 FFF7FEFF 	 bl prvInitialiseNewTimer
 199              	.L9:
 299:../Dave/Generated/FREERTOS/timers.c **** 		}
 300:../Dave/Generated/FREERTOS/timers.c **** 
 301:../Dave/Generated/FREERTOS/timers.c **** 		return pxNewTimer;
 200              	 .loc 1 301 0
 201 0038 7B69     	 ldr r3,[r7,#20]
 302:../Dave/Generated/FREERTOS/timers.c **** 	}
 202              	 .loc 1 302 0
 203 003a 1846     	 mov r0,r3
 204 003c 1837     	 adds r7,r7,#24
 205              	.LCFI8:
 206              	 .cfi_def_cfa_offset 8
 207 003e BD46     	 mov sp,r7
 208              	.LCFI9:
 209              	 .cfi_def_cfa_register 13
 210              	 
 211 0040 80BD     	 pop {r7,pc}
 212              	 .cfi_endproc
 213              	.LFE138:
 215 0042 00BF     	 .section .text.prvInitialiseNewTimer,"ax",%progbits
 216              	 .align 2
 217              	 .thumb
 218              	 .thumb_func
 220              	prvInitialiseNewTimer:
 221              	.LFB139:
 303:../Dave/Generated/FREERTOS/timers.c **** 
 304:../Dave/Generated/FREERTOS/timers.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 305:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 306:../Dave/Generated/FREERTOS/timers.c **** 
 307:../Dave/Generated/FREERTOS/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 308:../Dave/Generated/FREERTOS/timers.c **** 
 309:../Dave/Generated/FREERTOS/timers.c **** 	TimerHandle_t xTimerCreateStatic(	const char * const pcTimerName,		/*lint !e971 Unqualified char t
 310:../Dave/Generated/FREERTOS/timers.c **** 										const TickType_t xTimerPeriodInTicks,
 311:../Dave/Generated/FREERTOS/timers.c **** 										const UBaseType_t uxAutoReload,
 312:../Dave/Generated/FREERTOS/timers.c **** 										void * const pvTimerID,
 313:../Dave/Generated/FREERTOS/timers.c **** 										TimerCallbackFunction_t pxCallbackFunction,
 314:../Dave/Generated/FREERTOS/timers.c **** 										StaticTimer_t *pxTimerBuffer )
 315:../Dave/Generated/FREERTOS/timers.c **** 	{
 316:../Dave/Generated/FREERTOS/timers.c **** 	Timer_t *pxNewTimer;
 317:../Dave/Generated/FREERTOS/timers.c **** 
 318:../Dave/Generated/FREERTOS/timers.c **** 		#if( configASSERT_DEFINED == 1 )
 319:../Dave/Generated/FREERTOS/timers.c **** 		{
 320:../Dave/Generated/FREERTOS/timers.c **** 			/* Sanity check that the size of the structure used to declare a
 321:../Dave/Generated/FREERTOS/timers.c **** 			variable of type StaticTimer_t equals the size of the real timer
 322:../Dave/Generated/FREERTOS/timers.c **** 			structure. */
 323:../Dave/Generated/FREERTOS/timers.c **** 			volatile size_t xSize = sizeof( StaticTimer_t );
 324:../Dave/Generated/FREERTOS/timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 325:../Dave/Generated/FREERTOS/timers.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 326:../Dave/Generated/FREERTOS/timers.c **** 		}
 327:../Dave/Generated/FREERTOS/timers.c **** 		#endif /* configASSERT_DEFINED */
 328:../Dave/Generated/FREERTOS/timers.c **** 
 329:../Dave/Generated/FREERTOS/timers.c **** 		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 330:../Dave/Generated/FREERTOS/timers.c **** 		configASSERT( pxTimerBuffer );
 331:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Tim
 332:../Dave/Generated/FREERTOS/timers.c **** 
 333:../Dave/Generated/FREERTOS/timers.c **** 		if( pxNewTimer != NULL )
 334:../Dave/Generated/FREERTOS/timers.c **** 		{
 335:../Dave/Generated/FREERTOS/timers.c **** 			/* Timers can be created statically or dynamically so note this
 336:../Dave/Generated/FREERTOS/timers.c **** 			timer was created statically in case it is later deleted.  The
 337:../Dave/Generated/FREERTOS/timers.c **** 			autoreload bit may get set in prvInitialiseNewTimer(). */
 338:../Dave/Generated/FREERTOS/timers.c **** 			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 339:../Dave/Generated/FREERTOS/timers.c **** 
 340:../Dave/Generated/FREERTOS/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 341:../Dave/Generated/FREERTOS/timers.c **** 		}
 342:../Dave/Generated/FREERTOS/timers.c **** 
 343:../Dave/Generated/FREERTOS/timers.c **** 		return pxNewTimer;
 344:../Dave/Generated/FREERTOS/timers.c **** 	}
 345:../Dave/Generated/FREERTOS/timers.c **** 
 346:../Dave/Generated/FREERTOS/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 347:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 348:../Dave/Generated/FREERTOS/timers.c **** 
 349:../Dave/Generated/FREERTOS/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,			/*lint !e971 Unqualified char 
 350:../Dave/Generated/FREERTOS/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 351:../Dave/Generated/FREERTOS/timers.c **** 									const UBaseType_t uxAutoReload,
 352:../Dave/Generated/FREERTOS/timers.c **** 									void * const pvTimerID,
 353:../Dave/Generated/FREERTOS/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 354:../Dave/Generated/FREERTOS/timers.c **** 									Timer_t *pxNewTimer )
 355:../Dave/Generated/FREERTOS/timers.c **** {
 222              	 .loc 1 355 0
 223              	 .cfi_startproc
 224              	 
 225              	 
 226 0000 80B5     	 push {r7,lr}
 227              	.LCFI10:
 228              	 .cfi_def_cfa_offset 8
 229              	 .cfi_offset 7,-8
 230              	 .cfi_offset 14,-4
 231 0002 86B0     	 sub sp,sp,#24
 232              	.LCFI11:
 233              	 .cfi_def_cfa_offset 32
 234 0004 00AF     	 add r7,sp,#0
 235              	.LCFI12:
 236              	 .cfi_def_cfa_register 7
 237 0006 F860     	 str r0,[r7,#12]
 238 0008 B960     	 str r1,[r7,#8]
 239 000a 7A60     	 str r2,[r7,#4]
 240 000c 3B60     	 str r3,[r7]
 356:../Dave/Generated/FREERTOS/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 357:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 241              	 .loc 1 357 0
 242 000e BB68     	 ldr r3,[r7,#8]
 243 0010 002B     	 cmp r3,#0
 244 0012 09D1     	 bne .L12
 245              	.LBB39:
 246              	.LBB40:
 247              	 .loc 2 195 0 discriminator 1
 248              	
 249 0014 4FF0FC03 	 mov r3,#252
 250 0018 83F31188 	 msr basepri,r3
 251 001c BFF36F8F 	 isb 
 252 0020 BFF34F8F 	 dsb 
 253              	
 254              	
 255              	 .thumb
 256 0024 7B61     	 str r3,[r7,#20]
 257              	.L13:
 258              	.LBE40:
 259              	.LBE39:
 260              	 .loc 1 357 0 discriminator 1
 261 0026 FEE7     	 b .L13
 262              	.L12:
 358:../Dave/Generated/FREERTOS/timers.c **** 
 359:../Dave/Generated/FREERTOS/timers.c **** 	if( pxNewTimer != NULL )
 263              	 .loc 1 359 0
 264 0028 7B6A     	 ldr r3,[r7,#36]
 265 002a 002B     	 cmp r3,#0
 266 002c 1ED0     	 beq .L11
 360:../Dave/Generated/FREERTOS/timers.c **** 	{
 361:../Dave/Generated/FREERTOS/timers.c **** 		/* Ensure the infrastructure used by the timer service task has been
 362:../Dave/Generated/FREERTOS/timers.c **** 		created/initialised. */
 363:../Dave/Generated/FREERTOS/timers.c **** 		prvCheckForValidListAndQueue();
 267              	 .loc 1 363 0
 268 002e FFF7FEFF 	 bl prvCheckForValidListAndQueue
 364:../Dave/Generated/FREERTOS/timers.c **** 
 365:../Dave/Generated/FREERTOS/timers.c **** 		/* Initialise the timer structure members using the function
 366:../Dave/Generated/FREERTOS/timers.c **** 		parameters. */
 367:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->pcTimerName = pcTimerName;
 269              	 .loc 1 367 0
 270 0032 7B6A     	 ldr r3,[r7,#36]
 271 0034 FA68     	 ldr r2,[r7,#12]
 272 0036 1A60     	 str r2,[r3]
 368:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 273              	 .loc 1 368 0
 274 0038 7B6A     	 ldr r3,[r7,#36]
 275 003a BA68     	 ldr r2,[r7,#8]
 276 003c 9A61     	 str r2,[r3,#24]
 369:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 277              	 .loc 1 369 0
 278 003e 7B6A     	 ldr r3,[r7,#36]
 279 0040 3A68     	 ldr r2,[r7]
 280 0042 DA61     	 str r2,[r3,#28]
 370:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 281              	 .loc 1 370 0
 282 0044 7B6A     	 ldr r3,[r7,#36]
 283 0046 3A6A     	 ldr r2,[r7,#32]
 284 0048 1A62     	 str r2,[r3,#32]
 371:../Dave/Generated/FREERTOS/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 285              	 .loc 1 371 0
 286 004a 7B6A     	 ldr r3,[r7,#36]
 287 004c 0433     	 adds r3,r3,#4
 288 004e 1846     	 mov r0,r3
 289 0050 FFF7FEFF 	 bl vListInitialiseItem
 372:../Dave/Generated/FREERTOS/timers.c **** 		if( uxAutoReload != pdFALSE )
 290              	 .loc 1 372 0
 291 0054 7B68     	 ldr r3,[r7,#4]
 292 0056 002B     	 cmp r3,#0
 293 0058 08D0     	 beq .L11
 373:../Dave/Generated/FREERTOS/timers.c **** 		{
 374:../Dave/Generated/FREERTOS/timers.c **** 			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 294              	 .loc 1 374 0
 295 005a 7B6A     	 ldr r3,[r7,#36]
 296 005c 93F82830 	 ldrb r3,[r3,#40]
 297 0060 43F00403 	 orr r3,r3,#4
 298 0064 DAB2     	 uxtb r2,r3
 299 0066 7B6A     	 ldr r3,[r7,#36]
 300 0068 83F82820 	 strb r2,[r3,#40]
 301              	.L11:
 375:../Dave/Generated/FREERTOS/timers.c **** 		}
 376:../Dave/Generated/FREERTOS/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 377:../Dave/Generated/FREERTOS/timers.c **** 	}
 378:../Dave/Generated/FREERTOS/timers.c **** }
 302              	 .loc 1 378 0
 303 006c 1837     	 adds r7,r7,#24
 304              	.LCFI13:
 305              	 .cfi_def_cfa_offset 8
 306 006e BD46     	 mov sp,r7
 307              	.LCFI14:
 308              	 .cfi_def_cfa_register 13
 309              	 
 310 0070 80BD     	 pop {r7,pc}
 311              	 .cfi_endproc
 312              	.LFE139:
 314 0072 00BF     	 .section .text.xTimerGenericCommand,"ax",%progbits
 315              	 .align 2
 316              	 .global xTimerGenericCommand
 317              	 .thumb
 318              	 .thumb_func
 320              	xTimerGenericCommand:
 321              	.LFB140:
 379:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 380:../Dave/Generated/FREERTOS/timers.c **** 
 381:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_
 382:../Dave/Generated/FREERTOS/timers.c **** {
 322              	 .loc 1 382 0
 323              	 .cfi_startproc
 324              	 
 325              	 
 326 0000 80B5     	 push {r7,lr}
 327              	.LCFI15:
 328              	 .cfi_def_cfa_offset 8
 329              	 .cfi_offset 7,-8
 330              	 .cfi_offset 14,-4
 331 0002 8AB0     	 sub sp,sp,#40
 332              	.LCFI16:
 333              	 .cfi_def_cfa_offset 48
 334 0004 00AF     	 add r7,sp,#0
 335              	.LCFI17:
 336              	 .cfi_def_cfa_register 7
 337 0006 F860     	 str r0,[r7,#12]
 338 0008 B960     	 str r1,[r7,#8]
 339 000a 7A60     	 str r2,[r7,#4]
 340 000c 3B60     	 str r3,[r7]
 383:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xReturn = pdFAIL;
 341              	 .loc 1 383 0
 342 000e 0023     	 movs r3,#0
 343 0010 7B62     	 str r3,[r7,#36]
 384:../Dave/Generated/FREERTOS/timers.c **** DaemonTaskMessage_t xMessage;
 385:../Dave/Generated/FREERTOS/timers.c **** 
 386:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 344              	 .loc 1 386 0
 345 0012 FB68     	 ldr r3,[r7,#12]
 346 0014 002B     	 cmp r3,#0
 347 0016 09D1     	 bne .L16
 348              	.LBB41:
 349              	.LBB42:
 350              	 .loc 2 195 0 discriminator 1
 351              	
 352 0018 4FF0FC03 	 mov r3,#252
 353 001c 83F31188 	 msr basepri,r3
 354 0020 BFF36F8F 	 isb 
 355 0024 BFF34F8F 	 dsb 
 356              	
 357              	
 358              	 .thumb
 359 0028 3B62     	 str r3,[r7,#32]
 360              	.L17:
 361              	.LBE42:
 362              	.LBE41:
 363              	 .loc 1 386 0 discriminator 1
 364 002a FEE7     	 b .L17
 365              	.L16:
 387:../Dave/Generated/FREERTOS/timers.c **** 
 388:../Dave/Generated/FREERTOS/timers.c **** 	/* Send a message to the timer service task to perform a particular action
 389:../Dave/Generated/FREERTOS/timers.c **** 	on a particular timer definition. */
 390:../Dave/Generated/FREERTOS/timers.c **** 	if( xTimerQueue != NULL )
 366              	 .loc 1 390 0
 367 002c 1C4B     	 ldr r3,.L24
 368 002e 1B68     	 ldr r3,[r3]
 369 0030 002B     	 cmp r3,#0
 370 0032 30D0     	 beq .L18
 391:../Dave/Generated/FREERTOS/timers.c **** 	{
 392:../Dave/Generated/FREERTOS/timers.c **** 		/* Send a command to the timer service task to start the xTimer timer. */
 393:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.xMessageID = xCommandID;
 371              	 .loc 1 393 0
 372 0034 BB68     	 ldr r3,[r7,#8]
 373 0036 3B61     	 str r3,[r7,#16]
 394:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 374              	 .loc 1 394 0
 375 0038 7B68     	 ldr r3,[r7,#4]
 376 003a 7B61     	 str r3,[r7,#20]
 395:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = xTimer;
 377              	 .loc 1 395 0
 378 003c FB68     	 ldr r3,[r7,#12]
 379 003e BB61     	 str r3,[r7,#24]
 396:../Dave/Generated/FREERTOS/timers.c **** 
 397:../Dave/Generated/FREERTOS/timers.c **** 		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 380              	 .loc 1 397 0
 381 0040 BB68     	 ldr r3,[r7,#8]
 382 0042 052B     	 cmp r3,#5
 383 0044 1CDC     	 bgt .L19
 398:../Dave/Generated/FREERTOS/timers.c **** 		{
 399:../Dave/Generated/FREERTOS/timers.c **** 			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 384              	 .loc 1 399 0
 385 0046 FFF7FEFF 	 bl xTaskGetSchedulerState
 386 004a 0346     	 mov r3,r0
 387 004c 022B     	 cmp r3,#2
 388 004e 0BD1     	 bne .L20
 400:../Dave/Generated/FREERTOS/timers.c **** 			{
 401:../Dave/Generated/FREERTOS/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 389              	 .loc 1 401 0
 390 0050 134B     	 ldr r3,.L24
 391 0052 1A68     	 ldr r2,[r3]
 392 0054 07F11003 	 add r3,r7,#16
 393 0058 1046     	 mov r0,r2
 394 005a 1946     	 mov r1,r3
 395 005c 3A6B     	 ldr r2,[r7,#48]
 396 005e 0023     	 movs r3,#0
 397 0060 FFF7FEFF 	 bl xQueueGenericSend
 398 0064 7862     	 str r0,[r7,#36]
 399 0066 16E0     	 b .L18
 400              	.L20:
 402:../Dave/Generated/FREERTOS/timers.c **** 			}
 403:../Dave/Generated/FREERTOS/timers.c **** 			else
 404:../Dave/Generated/FREERTOS/timers.c **** 			{
 405:../Dave/Generated/FREERTOS/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 401              	 .loc 1 405 0
 402 0068 0D4B     	 ldr r3,.L24
 403 006a 1A68     	 ldr r2,[r3]
 404 006c 07F11003 	 add r3,r7,#16
 405 0070 1046     	 mov r0,r2
 406 0072 1946     	 mov r1,r3
 407 0074 0022     	 movs r2,#0
 408 0076 0023     	 movs r3,#0
 409 0078 FFF7FEFF 	 bl xQueueGenericSend
 410 007c 7862     	 str r0,[r7,#36]
 411 007e 0AE0     	 b .L18
 412              	.L19:
 406:../Dave/Generated/FREERTOS/timers.c **** 			}
 407:../Dave/Generated/FREERTOS/timers.c **** 		}
 408:../Dave/Generated/FREERTOS/timers.c **** 		else
 409:../Dave/Generated/FREERTOS/timers.c **** 		{
 410:../Dave/Generated/FREERTOS/timers.c **** 			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 413              	 .loc 1 410 0
 414 0080 074B     	 ldr r3,.L24
 415 0082 1A68     	 ldr r2,[r3]
 416 0084 07F11003 	 add r3,r7,#16
 417 0088 1046     	 mov r0,r2
 418 008a 1946     	 mov r1,r3
 419 008c 3A68     	 ldr r2,[r7]
 420 008e 0023     	 movs r3,#0
 421 0090 FFF7FEFF 	 bl xQueueGenericSendFromISR
 422 0094 7862     	 str r0,[r7,#36]
 423              	.L18:
 411:../Dave/Generated/FREERTOS/timers.c **** 		}
 412:../Dave/Generated/FREERTOS/timers.c **** 
 413:../Dave/Generated/FREERTOS/timers.c **** 		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 414:../Dave/Generated/FREERTOS/timers.c **** 	}
 415:../Dave/Generated/FREERTOS/timers.c **** 	else
 416:../Dave/Generated/FREERTOS/timers.c **** 	{
 417:../Dave/Generated/FREERTOS/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 418:../Dave/Generated/FREERTOS/timers.c **** 	}
 419:../Dave/Generated/FREERTOS/timers.c **** 
 420:../Dave/Generated/FREERTOS/timers.c **** 	return xReturn;
 424              	 .loc 1 420 0
 425 0096 7B6A     	 ldr r3,[r7,#36]
 421:../Dave/Generated/FREERTOS/timers.c **** }
 426              	 .loc 1 421 0
 427 0098 1846     	 mov r0,r3
 428 009a 2837     	 adds r7,r7,#40
 429              	.LCFI18:
 430              	 .cfi_def_cfa_offset 8
 431 009c BD46     	 mov sp,r7
 432              	.LCFI19:
 433              	 .cfi_def_cfa_register 13
 434              	 
 435 009e 80BD     	 pop {r7,pc}
 436              	.L25:
 437              	 .align 2
 438              	.L24:
 439 00a0 00000000 	 .word xTimerQueue
 440              	 .cfi_endproc
 441              	.LFE140:
 443              	 .section .text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 444              	 .align 2
 445              	 .global xTimerGetTimerDaemonTaskHandle
 446              	 .thumb
 447              	 .thumb_func
 449              	xTimerGetTimerDaemonTaskHandle:
 450              	.LFB141:
 422:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 423:../Dave/Generated/FREERTOS/timers.c **** 
 424:../Dave/Generated/FREERTOS/timers.c **** TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 425:../Dave/Generated/FREERTOS/timers.c **** {
 451              	 .loc 1 425 0
 452              	 .cfi_startproc
 453              	 
 454              	 
 455              	 
 456 0000 80B4     	 push {r7}
 457              	.LCFI20:
 458              	 .cfi_def_cfa_offset 4
 459              	 .cfi_offset 7,-4
 460 0002 83B0     	 sub sp,sp,#12
 461              	.LCFI21:
 462              	 .cfi_def_cfa_offset 16
 463 0004 00AF     	 add r7,sp,#0
 464              	.LCFI22:
 465              	 .cfi_def_cfa_register 7
 426:../Dave/Generated/FREERTOS/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 427:../Dave/Generated/FREERTOS/timers.c **** 	started, then xTimerTaskHandle will be NULL. */
 428:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( ( xTimerTaskHandle != NULL ) );
 466              	 .loc 1 428 0
 467 0006 0B4B     	 ldr r3,.L30
 468 0008 1B68     	 ldr r3,[r3]
 469 000a 002B     	 cmp r3,#0
 470 000c 09D1     	 bne .L27
 471              	.LBB43:
 472              	.LBB44:
 473              	 .loc 2 195 0 discriminator 1
 474              	
 475 000e 4FF0FC03 	 mov r3,#252
 476 0012 83F31188 	 msr basepri,r3
 477 0016 BFF36F8F 	 isb 
 478 001a BFF34F8F 	 dsb 
 479              	
 480              	
 481              	 .thumb
 482 001e 7B60     	 str r3,[r7,#4]
 483              	.L28:
 484              	.LBE44:
 485              	.LBE43:
 486              	 .loc 1 428 0 discriminator 1
 487 0020 FEE7     	 b .L28
 488              	.L27:
 429:../Dave/Generated/FREERTOS/timers.c **** 	return xTimerTaskHandle;
 489              	 .loc 1 429 0
 490 0022 044B     	 ldr r3,.L30
 491 0024 1B68     	 ldr r3,[r3]
 430:../Dave/Generated/FREERTOS/timers.c **** }
 492              	 .loc 1 430 0
 493 0026 1846     	 mov r0,r3
 494 0028 0C37     	 adds r7,r7,#12
 495              	.LCFI23:
 496              	 .cfi_def_cfa_offset 4
 497 002a BD46     	 mov sp,r7
 498              	.LCFI24:
 499              	 .cfi_def_cfa_register 13
 500              	 
 501 002c 5DF8047B 	 ldr r7,[sp],#4
 502              	.LCFI25:
 503              	 .cfi_restore 7
 504              	 .cfi_def_cfa_offset 0
 505 0030 7047     	 bx lr
 506              	.L31:
 507 0032 00BF     	 .align 2
 508              	.L30:
 509 0034 00000000 	 .word xTimerTaskHandle
 510              	 .cfi_endproc
 511              	.LFE141:
 513              	 .section .text.xTimerGetPeriod,"ax",%progbits
 514              	 .align 2
 515              	 .global xTimerGetPeriod
 516              	 .thumb
 517              	 .thumb_func
 519              	xTimerGetPeriod:
 520              	.LFB142:
 431:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 432:../Dave/Generated/FREERTOS/timers.c **** 
 433:../Dave/Generated/FREERTOS/timers.c **** TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 434:../Dave/Generated/FREERTOS/timers.c **** {
 521              	 .loc 1 434 0
 522              	 .cfi_startproc
 523              	 
 524              	 
 525              	 
 526 0000 80B4     	 push {r7}
 527              	.LCFI26:
 528              	 .cfi_def_cfa_offset 4
 529              	 .cfi_offset 7,-4
 530 0002 85B0     	 sub sp,sp,#20
 531              	.LCFI27:
 532              	 .cfi_def_cfa_offset 24
 533 0004 00AF     	 add r7,sp,#0
 534              	.LCFI28:
 535              	 .cfi_def_cfa_register 7
 536 0006 7860     	 str r0,[r7,#4]
 435:../Dave/Generated/FREERTOS/timers.c **** Timer_t *pxTimer = xTimer;
 537              	 .loc 1 435 0
 538 0008 7B68     	 ldr r3,[r7,#4]
 539 000a FB60     	 str r3,[r7,#12]
 436:../Dave/Generated/FREERTOS/timers.c **** 
 437:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 540              	 .loc 1 437 0
 541 000c 7B68     	 ldr r3,[r7,#4]
 542 000e 002B     	 cmp r3,#0
 543 0010 09D1     	 bne .L33
 544              	.LBB45:
 545              	.LBB46:
 546              	 .loc 2 195 0 discriminator 1
 547              	
 548 0012 4FF0FC03 	 mov r3,#252
 549 0016 83F31188 	 msr basepri,r3
 550 001a BFF36F8F 	 isb 
 551 001e BFF34F8F 	 dsb 
 552              	
 553              	
 554              	 .thumb
 555 0022 BB60     	 str r3,[r7,#8]
 556              	.L34:
 557              	.LBE46:
 558              	.LBE45:
 559              	 .loc 1 437 0 discriminator 1
 560 0024 FEE7     	 b .L34
 561              	.L33:
 438:../Dave/Generated/FREERTOS/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 562              	 .loc 1 438 0
 563 0026 FB68     	 ldr r3,[r7,#12]
 564 0028 9B69     	 ldr r3,[r3,#24]
 439:../Dave/Generated/FREERTOS/timers.c **** }
 565              	 .loc 1 439 0
 566 002a 1846     	 mov r0,r3
 567 002c 1437     	 adds r7,r7,#20
 568              	.LCFI29:
 569              	 .cfi_def_cfa_offset 4
 570 002e BD46     	 mov sp,r7
 571              	.LCFI30:
 572              	 .cfi_def_cfa_register 13
 573              	 
 574 0030 5DF8047B 	 ldr r7,[sp],#4
 575              	.LCFI31:
 576              	 .cfi_restore 7
 577              	 .cfi_def_cfa_offset 0
 578 0034 7047     	 bx lr
 579              	 .cfi_endproc
 580              	.LFE142:
 582 0036 00BF     	 .section .text.vTimerSetReloadMode,"ax",%progbits
 583              	 .align 2
 584              	 .global vTimerSetReloadMode
 585              	 .thumb
 586              	 .thumb_func
 588              	vTimerSetReloadMode:
 589              	.LFB143:
 440:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 441:../Dave/Generated/FREERTOS/timers.c **** 
 442:../Dave/Generated/FREERTOS/timers.c **** void vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload )
 443:../Dave/Generated/FREERTOS/timers.c **** {
 590              	 .loc 1 443 0
 591              	 .cfi_startproc
 592              	 
 593              	 
 594 0000 80B5     	 push {r7,lr}
 595              	.LCFI32:
 596              	 .cfi_def_cfa_offset 8
 597              	 .cfi_offset 7,-8
 598              	 .cfi_offset 14,-4
 599 0002 84B0     	 sub sp,sp,#16
 600              	.LCFI33:
 601              	 .cfi_def_cfa_offset 24
 602 0004 00AF     	 add r7,sp,#0
 603              	.LCFI34:
 604              	 .cfi_def_cfa_register 7
 605 0006 7860     	 str r0,[r7,#4]
 606 0008 3960     	 str r1,[r7]
 444:../Dave/Generated/FREERTOS/timers.c **** Timer_t * pxTimer =  xTimer;
 607              	 .loc 1 444 0
 608 000a 7B68     	 ldr r3,[r7,#4]
 609 000c FB60     	 str r3,[r7,#12]
 445:../Dave/Generated/FREERTOS/timers.c **** 
 446:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 610              	 .loc 1 446 0
 611 000e 7B68     	 ldr r3,[r7,#4]
 612 0010 002B     	 cmp r3,#0
 613 0012 09D1     	 bne .L37
 614              	.LBB47:
 615              	.LBB48:
 616              	 .loc 2 195 0 discriminator 1
 617              	
 618 0014 4FF0FC03 	 mov r3,#252
 619 0018 83F31188 	 msr basepri,r3
 620 001c BFF36F8F 	 isb 
 621 0020 BFF34F8F 	 dsb 
 622              	
 623              	
 624              	 .thumb
 625 0024 BB60     	 str r3,[r7,#8]
 626              	.L38:
 627              	.LBE48:
 628              	.LBE47:
 629              	 .loc 1 446 0 discriminator 1
 630 0026 FEE7     	 b .L38
 631              	.L37:
 447:../Dave/Generated/FREERTOS/timers.c **** 	taskENTER_CRITICAL();
 632              	 .loc 1 447 0
 633 0028 FFF7FEFF 	 bl vPortEnterCritical
 448:../Dave/Generated/FREERTOS/timers.c **** 	{
 449:../Dave/Generated/FREERTOS/timers.c **** 		if( uxAutoReload != pdFALSE )
 634              	 .loc 1 449 0
 635 002c 3B68     	 ldr r3,[r7]
 636 002e 002B     	 cmp r3,#0
 637 0030 09D0     	 beq .L39
 450:../Dave/Generated/FREERTOS/timers.c **** 		{
 451:../Dave/Generated/FREERTOS/timers.c **** 			pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 638              	 .loc 1 451 0
 639 0032 FB68     	 ldr r3,[r7,#12]
 640 0034 93F82830 	 ldrb r3,[r3,#40]
 641 0038 43F00403 	 orr r3,r3,#4
 642 003c DAB2     	 uxtb r2,r3
 643 003e FB68     	 ldr r3,[r7,#12]
 644 0040 83F82820 	 strb r2,[r3,#40]
 645 0044 08E0     	 b .L40
 646              	.L39:
 452:../Dave/Generated/FREERTOS/timers.c **** 		}
 453:../Dave/Generated/FREERTOS/timers.c **** 		else
 454:../Dave/Generated/FREERTOS/timers.c **** 		{
 455:../Dave/Generated/FREERTOS/timers.c **** 			pxTimer->ucStatus &= ~tmrSTATUS_IS_AUTORELOAD;
 647              	 .loc 1 455 0
 648 0046 FB68     	 ldr r3,[r7,#12]
 649 0048 93F82830 	 ldrb r3,[r3,#40]
 650 004c 23F00403 	 bic r3,r3,#4
 651 0050 DAB2     	 uxtb r2,r3
 652 0052 FB68     	 ldr r3,[r7,#12]
 653 0054 83F82820 	 strb r2,[r3,#40]
 654              	.L40:
 456:../Dave/Generated/FREERTOS/timers.c **** 		}
 457:../Dave/Generated/FREERTOS/timers.c **** 	}
 458:../Dave/Generated/FREERTOS/timers.c **** 	taskEXIT_CRITICAL();
 655              	 .loc 1 458 0
 656 0058 FFF7FEFF 	 bl vPortExitCritical
 459:../Dave/Generated/FREERTOS/timers.c **** }
 657              	 .loc 1 459 0
 658 005c 1037     	 adds r7,r7,#16
 659              	.LCFI35:
 660              	 .cfi_def_cfa_offset 8
 661 005e BD46     	 mov sp,r7
 662              	.LCFI36:
 663              	 .cfi_def_cfa_register 13
 664              	 
 665 0060 80BD     	 pop {r7,pc}
 666              	 .cfi_endproc
 667              	.LFE143:
 669 0062 00BF     	 .section .text.xTimerGetExpiryTime,"ax",%progbits
 670              	 .align 2
 671              	 .global xTimerGetExpiryTime
 672              	 .thumb
 673              	 .thumb_func
 675              	xTimerGetExpiryTime:
 676              	.LFB144:
 460:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 461:../Dave/Generated/FREERTOS/timers.c **** 
 462:../Dave/Generated/FREERTOS/timers.c **** TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 463:../Dave/Generated/FREERTOS/timers.c **** {
 677              	 .loc 1 463 0
 678              	 .cfi_startproc
 679              	 
 680              	 
 681              	 
 682 0000 80B4     	 push {r7}
 683              	.LCFI37:
 684              	 .cfi_def_cfa_offset 4
 685              	 .cfi_offset 7,-4
 686 0002 87B0     	 sub sp,sp,#28
 687              	.LCFI38:
 688              	 .cfi_def_cfa_offset 32
 689 0004 00AF     	 add r7,sp,#0
 690              	.LCFI39:
 691              	 .cfi_def_cfa_register 7
 692 0006 7860     	 str r0,[r7,#4]
 464:../Dave/Generated/FREERTOS/timers.c **** Timer_t * pxTimer =  xTimer;
 693              	 .loc 1 464 0
 694 0008 7B68     	 ldr r3,[r7,#4]
 695 000a 7B61     	 str r3,[r7,#20]
 465:../Dave/Generated/FREERTOS/timers.c **** TickType_t xReturn;
 466:../Dave/Generated/FREERTOS/timers.c **** 
 467:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 696              	 .loc 1 467 0
 697 000c 7B68     	 ldr r3,[r7,#4]
 698 000e 002B     	 cmp r3,#0
 699 0010 09D1     	 bne .L42
 700              	.LBB49:
 701              	.LBB50:
 702              	 .loc 2 195 0 discriminator 1
 703              	
 704 0012 4FF0FC03 	 mov r3,#252
 705 0016 83F31188 	 msr basepri,r3
 706 001a BFF36F8F 	 isb 
 707 001e BFF34F8F 	 dsb 
 708              	
 709              	
 710              	 .thumb
 711 0022 FB60     	 str r3,[r7,#12]
 712              	.L43:
 713              	.LBE50:
 714              	.LBE49:
 715              	 .loc 1 467 0 discriminator 1
 716 0024 FEE7     	 b .L43
 717              	.L42:
 468:../Dave/Generated/FREERTOS/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 718              	 .loc 1 468 0
 719 0026 7B69     	 ldr r3,[r7,#20]
 720 0028 5B68     	 ldr r3,[r3,#4]
 721 002a 3B61     	 str r3,[r7,#16]
 469:../Dave/Generated/FREERTOS/timers.c **** 	return xReturn;
 722              	 .loc 1 469 0
 723 002c 3B69     	 ldr r3,[r7,#16]
 470:../Dave/Generated/FREERTOS/timers.c **** }
 724              	 .loc 1 470 0
 725 002e 1846     	 mov r0,r3
 726 0030 1C37     	 adds r7,r7,#28
 727              	.LCFI40:
 728              	 .cfi_def_cfa_offset 4
 729 0032 BD46     	 mov sp,r7
 730              	.LCFI41:
 731              	 .cfi_def_cfa_register 13
 732              	 
 733 0034 5DF8047B 	 ldr r7,[sp],#4
 734              	.LCFI42:
 735              	 .cfi_restore 7
 736              	 .cfi_def_cfa_offset 0
 737 0038 7047     	 bx lr
 738              	 .cfi_endproc
 739              	.LFE144:
 741 003a 00BF     	 .section .text.pcTimerGetName,"ax",%progbits
 742              	 .align 2
 743              	 .global pcTimerGetName
 744              	 .thumb
 745              	 .thumb_func
 747              	pcTimerGetName:
 748              	.LFB145:
 471:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 472:../Dave/Generated/FREERTOS/timers.c **** 
 473:../Dave/Generated/FREERTOS/timers.c **** const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed
 474:../Dave/Generated/FREERTOS/timers.c **** {
 749              	 .loc 1 474 0
 750              	 .cfi_startproc
 751              	 
 752              	 
 753              	 
 754 0000 80B4     	 push {r7}
 755              	.LCFI43:
 756              	 .cfi_def_cfa_offset 4
 757              	 .cfi_offset 7,-4
 758 0002 85B0     	 sub sp,sp,#20
 759              	.LCFI44:
 760              	 .cfi_def_cfa_offset 24
 761 0004 00AF     	 add r7,sp,#0
 762              	.LCFI45:
 763              	 .cfi_def_cfa_register 7
 764 0006 7860     	 str r0,[r7,#4]
 475:../Dave/Generated/FREERTOS/timers.c **** Timer_t *pxTimer = xTimer;
 765              	 .loc 1 475 0
 766 0008 7B68     	 ldr r3,[r7,#4]
 767 000a FB60     	 str r3,[r7,#12]
 476:../Dave/Generated/FREERTOS/timers.c **** 
 477:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 768              	 .loc 1 477 0
 769 000c 7B68     	 ldr r3,[r7,#4]
 770 000e 002B     	 cmp r3,#0
 771 0010 09D1     	 bne .L46
 772              	.LBB51:
 773              	.LBB52:
 774              	 .loc 2 195 0 discriminator 1
 775              	
 776 0012 4FF0FC03 	 mov r3,#252
 777 0016 83F31188 	 msr basepri,r3
 778 001a BFF36F8F 	 isb 
 779 001e BFF34F8F 	 dsb 
 780              	
 781              	
 782              	 .thumb
 783 0022 BB60     	 str r3,[r7,#8]
 784              	.L47:
 785              	.LBE52:
 786              	.LBE51:
 787              	 .loc 1 477 0 discriminator 1
 788 0024 FEE7     	 b .L47
 789              	.L46:
 478:../Dave/Generated/FREERTOS/timers.c **** 	return pxTimer->pcTimerName;
 790              	 .loc 1 478 0
 791 0026 FB68     	 ldr r3,[r7,#12]
 792 0028 1B68     	 ldr r3,[r3]
 479:../Dave/Generated/FREERTOS/timers.c **** }
 793              	 .loc 1 479 0
 794 002a 1846     	 mov r0,r3
 795 002c 1437     	 adds r7,r7,#20
 796              	.LCFI46:
 797              	 .cfi_def_cfa_offset 4
 798 002e BD46     	 mov sp,r7
 799              	.LCFI47:
 800              	 .cfi_def_cfa_register 13
 801              	 
 802 0030 5DF8047B 	 ldr r7,[sp],#4
 803              	.LCFI48:
 804              	 .cfi_restore 7
 805              	 .cfi_def_cfa_offset 0
 806 0034 7047     	 bx lr
 807              	 .cfi_endproc
 808              	.LFE145:
 810 0036 00BF     	 .section .text.prvProcessExpiredTimer,"ax",%progbits
 811              	 .align 2
 812              	 .thumb
 813              	 .thumb_func
 815              	prvProcessExpiredTimer:
 816              	.LFB146:
 480:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 481:../Dave/Generated/FREERTOS/timers.c **** 
 482:../Dave/Generated/FREERTOS/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
 483:../Dave/Generated/FREERTOS/timers.c **** {
 817              	 .loc 1 483 0
 818              	 .cfi_startproc
 819              	 
 820              	 
 821 0000 80B5     	 push {r7,lr}
 822              	.LCFI49:
 823              	 .cfi_def_cfa_offset 8
 824              	 .cfi_offset 7,-8
 825              	 .cfi_offset 14,-4
 826 0002 88B0     	 sub sp,sp,#32
 827              	.LCFI50:
 828              	 .cfi_def_cfa_offset 40
 829 0004 02AF     	 add r7,sp,#8
 830              	.LCFI51:
 831              	 .cfi_def_cfa 7,32
 832 0006 7860     	 str r0,[r7,#4]
 833 0008 3960     	 str r1,[r7]
 484:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xResult;
 485:../Dave/Generated/FREERTOS/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !
 834              	 .loc 1 485 0
 835 000a 224B     	 ldr r3,.L53
 836 000c 1B68     	 ldr r3,[r3]
 837 000e DB68     	 ldr r3,[r3,#12]
 838 0010 DB68     	 ldr r3,[r3,#12]
 839 0012 7B61     	 str r3,[r7,#20]
 486:../Dave/Generated/FREERTOS/timers.c **** 
 487:../Dave/Generated/FREERTOS/timers.c **** 	/* Remove the timer from the list of active timers.  A check has already
 488:../Dave/Generated/FREERTOS/timers.c **** 	been performed to ensure the list is not empty. */
 489:../Dave/Generated/FREERTOS/timers.c **** 	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 840              	 .loc 1 489 0
 841 0014 7B69     	 ldr r3,[r7,#20]
 842 0016 0433     	 adds r3,r3,#4
 843 0018 1846     	 mov r0,r3
 844 001a FFF7FEFF 	 bl uxListRemove
 490:../Dave/Generated/FREERTOS/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 491:../Dave/Generated/FREERTOS/timers.c **** 
 492:../Dave/Generated/FREERTOS/timers.c **** 	/* If the timer is an auto reload timer then calculate the next
 493:../Dave/Generated/FREERTOS/timers.c **** 	expiry time and re-insert the timer in the list of active timers. */
 494:../Dave/Generated/FREERTOS/timers.c **** 	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 845              	 .loc 1 494 0
 846 001e 7B69     	 ldr r3,[r7,#20]
 847 0020 93F82830 	 ldrb r3,[r3,#40]
 848 0024 03F00403 	 and r3,r3,#4
 849 0028 002B     	 cmp r3,#0
 850 002a 22D0     	 beq .L50
 495:../Dave/Generated/FREERTOS/timers.c **** 	{
 496:../Dave/Generated/FREERTOS/timers.c **** 		/* The timer is inserted into a list using a time relative to anything
 497:../Dave/Generated/FREERTOS/timers.c **** 		other than the current time.  It will therefore be inserted into the
 498:../Dave/Generated/FREERTOS/timers.c **** 		correct list relative to the time this task thinks it is now. */
 499:../Dave/Generated/FREERTOS/timers.c **** 		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTim
 851              	 .loc 1 499 0
 852 002c 7B69     	 ldr r3,[r7,#20]
 853 002e 9A69     	 ldr r2,[r3,#24]
 854 0030 7B68     	 ldr r3,[r7,#4]
 855 0032 1344     	 add r3,r3,r2
 856 0034 7869     	 ldr r0,[r7,#20]
 857 0036 1946     	 mov r1,r3
 858 0038 3A68     	 ldr r2,[r7]
 859 003a 7B68     	 ldr r3,[r7,#4]
 860 003c FFF7FEFF 	 bl prvInsertTimerInActiveList
 861 0040 0346     	 mov r3,r0
 862 0042 002B     	 cmp r3,#0
 863 0044 1ED0     	 beq .L51
 500:../Dave/Generated/FREERTOS/timers.c **** 		{
 501:../Dave/Generated/FREERTOS/timers.c **** 			/* The timer expired before it was added to the active timer
 502:../Dave/Generated/FREERTOS/timers.c **** 			list.  Reload it now.  */
 503:../Dave/Generated/FREERTOS/timers.c **** 			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmr
 864              	 .loc 1 503 0
 865 0046 0023     	 movs r3,#0
 866 0048 0093     	 str r3,[sp]
 867 004a 7869     	 ldr r0,[r7,#20]
 868 004c 0021     	 movs r1,#0
 869 004e 7A68     	 ldr r2,[r7,#4]
 870 0050 0023     	 movs r3,#0
 871 0052 FFF7FEFF 	 bl xTimerGenericCommand
 872 0056 3861     	 str r0,[r7,#16]
 504:../Dave/Generated/FREERTOS/timers.c **** 			configASSERT( xResult );
 873              	 .loc 1 504 0
 874 0058 3B69     	 ldr r3,[r7,#16]
 875 005a 002B     	 cmp r3,#0
 876 005c 12D1     	 bne .L51
 877              	.LBB53:
 878              	.LBB54:
 879              	 .loc 2 195 0 discriminator 1
 880              	
 881 005e 4FF0FC03 	 mov r3,#252
 882 0062 83F31188 	 msr basepri,r3
 883 0066 BFF36F8F 	 isb 
 884 006a BFF34F8F 	 dsb 
 885              	
 886              	
 887              	 .thumb
 888 006e FB60     	 str r3,[r7,#12]
 889              	.L52:
 890              	.LBE54:
 891              	.LBE53:
 892              	 .loc 1 504 0 discriminator 1
 893 0070 FEE7     	 b .L52
 894              	.L50:
 505:../Dave/Generated/FREERTOS/timers.c **** 			( void ) xResult;
 506:../Dave/Generated/FREERTOS/timers.c **** 		}
 507:../Dave/Generated/FREERTOS/timers.c **** 		else
 508:../Dave/Generated/FREERTOS/timers.c **** 		{
 509:../Dave/Generated/FREERTOS/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 510:../Dave/Generated/FREERTOS/timers.c **** 		}
 511:../Dave/Generated/FREERTOS/timers.c **** 	}
 512:../Dave/Generated/FREERTOS/timers.c **** 	else
 513:../Dave/Generated/FREERTOS/timers.c **** 	{
 514:../Dave/Generated/FREERTOS/timers.c **** 		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 895              	 .loc 1 514 0
 896 0072 7B69     	 ldr r3,[r7,#20]
 897 0074 93F82830 	 ldrb r3,[r3,#40]
 898 0078 23F00103 	 bic r3,r3,#1
 899 007c DAB2     	 uxtb r2,r3
 900 007e 7B69     	 ldr r3,[r7,#20]
 901 0080 83F82820 	 strb r2,[r3,#40]
 902              	.L51:
 515:../Dave/Generated/FREERTOS/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 516:../Dave/Generated/FREERTOS/timers.c **** 	}
 517:../Dave/Generated/FREERTOS/timers.c **** 
 518:../Dave/Generated/FREERTOS/timers.c **** 	/* Call the timer callback. */
 519:../Dave/Generated/FREERTOS/timers.c **** 	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 903              	 .loc 1 519 0
 904 0084 7B69     	 ldr r3,[r7,#20]
 905 0086 1B6A     	 ldr r3,[r3,#32]
 906 0088 7869     	 ldr r0,[r7,#20]
 907 008a 9847     	 blx r3
 520:../Dave/Generated/FREERTOS/timers.c **** }
 908              	 .loc 1 520 0
 909 008c 1837     	 adds r7,r7,#24
 910              	.LCFI52:
 911              	 .cfi_def_cfa_offset 8
 912 008e BD46     	 mov sp,r7
 913              	.LCFI53:
 914              	 .cfi_def_cfa_register 13
 915              	 
 916 0090 80BD     	 pop {r7,pc}
 917              	.L54:
 918 0092 00BF     	 .align 2
 919              	.L53:
 920 0094 00000000 	 .word pxCurrentTimerList
 921              	 .cfi_endproc
 922              	.LFE146:
 924              	 .section .text.prvTimerTask,"ax",%progbits
 925              	 .align 2
 926              	 .thumb
 927              	 .thumb_func
 929              	prvTimerTask:
 930              	.LFB147:
 521:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 522:../Dave/Generated/FREERTOS/timers.c **** 
 523:../Dave/Generated/FREERTOS/timers.c **** static portTASK_FUNCTION( prvTimerTask, pvParameters )
 524:../Dave/Generated/FREERTOS/timers.c **** {
 931              	 .loc 1 524 0
 932              	 .cfi_startproc
 933              	 
 934              	 
 935 0000 80B5     	 push {r7,lr}
 936              	.LCFI54:
 937              	 .cfi_def_cfa_offset 8
 938              	 .cfi_offset 7,-8
 939              	 .cfi_offset 14,-4
 940 0002 84B0     	 sub sp,sp,#16
 941              	.LCFI55:
 942              	 .cfi_def_cfa_offset 24
 943 0004 00AF     	 add r7,sp,#0
 944              	.LCFI56:
 945              	 .cfi_def_cfa_register 7
 946 0006 7860     	 str r0,[r7,#4]
 947              	.L56:
 525:../Dave/Generated/FREERTOS/timers.c **** TickType_t xNextExpireTime;
 526:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xListWasEmpty;
 527:../Dave/Generated/FREERTOS/timers.c **** 
 528:../Dave/Generated/FREERTOS/timers.c **** 	/* Just to avoid compiler warnings. */
 529:../Dave/Generated/FREERTOS/timers.c **** 	( void ) pvParameters;
 530:../Dave/Generated/FREERTOS/timers.c **** 
 531:../Dave/Generated/FREERTOS/timers.c **** 	#if( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 532:../Dave/Generated/FREERTOS/timers.c **** 	{
 533:../Dave/Generated/FREERTOS/timers.c **** 		extern void vApplicationDaemonTaskStartupHook( void );
 534:../Dave/Generated/FREERTOS/timers.c **** 
 535:../Dave/Generated/FREERTOS/timers.c **** 		/* Allow the application writer to execute some code in the context of
 536:../Dave/Generated/FREERTOS/timers.c **** 		this task at the point the task starts executing.  This is useful if the
 537:../Dave/Generated/FREERTOS/timers.c **** 		application includes initialisation code that would benefit from
 538:../Dave/Generated/FREERTOS/timers.c **** 		executing after the scheduler has been started. */
 539:../Dave/Generated/FREERTOS/timers.c **** 		vApplicationDaemonTaskStartupHook();
 540:../Dave/Generated/FREERTOS/timers.c **** 	}
 541:../Dave/Generated/FREERTOS/timers.c **** 	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 542:../Dave/Generated/FREERTOS/timers.c **** 
 543:../Dave/Generated/FREERTOS/timers.c **** 	for( ;; )
 544:../Dave/Generated/FREERTOS/timers.c **** 	{
 545:../Dave/Generated/FREERTOS/timers.c **** 		/* Query the timers list to see if it contains any timers, and if so,
 546:../Dave/Generated/FREERTOS/timers.c **** 		obtain the time at which the next timer will expire. */
 547:../Dave/Generated/FREERTOS/timers.c **** 		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 948              	 .loc 1 547 0 discriminator 1
 949 0008 07F10803 	 add r3,r7,#8
 950 000c 1846     	 mov r0,r3
 951 000e FFF7FEFF 	 bl prvGetNextExpireTime
 952 0012 F860     	 str r0,[r7,#12]
 548:../Dave/Generated/FREERTOS/timers.c **** 
 549:../Dave/Generated/FREERTOS/timers.c **** 		/* If a timer has expired, process it.  Otherwise, block this task
 550:../Dave/Generated/FREERTOS/timers.c **** 		until either a timer does expire, or a command is received. */
 551:../Dave/Generated/FREERTOS/timers.c **** 		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 953              	 .loc 1 551 0 discriminator 1
 954 0014 BB68     	 ldr r3,[r7,#8]
 955 0016 F868     	 ldr r0,[r7,#12]
 956 0018 1946     	 mov r1,r3
 957 001a FFF7FEFF 	 bl prvProcessTimerOrBlockTask
 552:../Dave/Generated/FREERTOS/timers.c **** 
 553:../Dave/Generated/FREERTOS/timers.c **** 		/* Empty the command queue. */
 554:../Dave/Generated/FREERTOS/timers.c **** 		prvProcessReceivedCommands();
 958              	 .loc 1 554 0 discriminator 1
 959 001e FFF7FEFF 	 bl prvProcessReceivedCommands
 555:../Dave/Generated/FREERTOS/timers.c **** 	}
 960              	 .loc 1 555 0 discriminator 1
 961 0022 F1E7     	 b .L56
 962              	 .cfi_endproc
 963              	.LFE147:
 965              	 .section .text.prvProcessTimerOrBlockTask,"ax",%progbits
 966              	 .align 2
 967              	 .thumb
 968              	 .thumb_func
 970              	prvProcessTimerOrBlockTask:
 971              	.LFB148:
 556:../Dave/Generated/FREERTOS/timers.c **** }
 557:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 558:../Dave/Generated/FREERTOS/timers.c **** 
 559:../Dave/Generated/FREERTOS/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 560:../Dave/Generated/FREERTOS/timers.c **** {
 972              	 .loc 1 560 0
 973              	 .cfi_startproc
 974              	 
 975              	 
 976 0000 80B5     	 push {r7,lr}
 977              	.LCFI57:
 978              	 .cfi_def_cfa_offset 8
 979              	 .cfi_offset 7,-8
 980              	 .cfi_offset 14,-4
 981 0002 84B0     	 sub sp,sp,#16
 982              	.LCFI58:
 983              	 .cfi_def_cfa_offset 24
 984 0004 00AF     	 add r7,sp,#0
 985              	.LCFI59:
 986              	 .cfi_def_cfa_register 7
 987 0006 7860     	 str r0,[r7,#4]
 988 0008 3960     	 str r1,[r7]
 561:../Dave/Generated/FREERTOS/timers.c **** TickType_t xTimeNow;
 562:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerListsWereSwitched;
 563:../Dave/Generated/FREERTOS/timers.c **** 
 564:../Dave/Generated/FREERTOS/timers.c **** 	vTaskSuspendAll();
 989              	 .loc 1 564 0
 990 000a FFF7FEFF 	 bl vTaskSuspendAll
 565:../Dave/Generated/FREERTOS/timers.c **** 	{
 566:../Dave/Generated/FREERTOS/timers.c **** 		/* Obtain the time now to make an assessment as to whether the timer
 567:../Dave/Generated/FREERTOS/timers.c **** 		has expired or not.  If obtaining the time causes the lists to switch
 568:../Dave/Generated/FREERTOS/timers.c **** 		then don't process this timer as any timers that remained in the list
 569:../Dave/Generated/FREERTOS/timers.c **** 		when the lists were switched will have been processed within the
 570:../Dave/Generated/FREERTOS/timers.c **** 		prvSampleTimeNow() function. */
 571:../Dave/Generated/FREERTOS/timers.c **** 		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 991              	 .loc 1 571 0
 992 000e 07F10803 	 add r3,r7,#8
 993 0012 1846     	 mov r0,r3
 994 0014 FFF7FEFF 	 bl prvSampleTimeNow
 995 0018 F860     	 str r0,[r7,#12]
 572:../Dave/Generated/FREERTOS/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 996              	 .loc 1 572 0
 997 001a BB68     	 ldr r3,[r7,#8]
 998 001c 002B     	 cmp r3,#0
 999 001e 31D1     	 bne .L58
 573:../Dave/Generated/FREERTOS/timers.c **** 		{
 574:../Dave/Generated/FREERTOS/timers.c **** 			/* The tick count has not overflowed, has the timer expired? */
 575:../Dave/Generated/FREERTOS/timers.c **** 			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 1000              	 .loc 1 575 0
 1001 0020 3B68     	 ldr r3,[r7]
 1002 0022 002B     	 cmp r3,#0
 1003 0024 0AD1     	 bne .L59
 1004              	 .loc 1 575 0 is_stmt 0 discriminator 1
 1005 0026 7A68     	 ldr r2,[r7,#4]
 1006 0028 FB68     	 ldr r3,[r7,#12]
 1007 002a 9A42     	 cmp r2,r3
 1008 002c 06D8     	 bhi .L59
 576:../Dave/Generated/FREERTOS/timers.c **** 			{
 577:../Dave/Generated/FREERTOS/timers.c **** 				( void ) xTaskResumeAll();
 1009              	 .loc 1 577 0 is_stmt 1
 1010 002e FFF7FEFF 	 bl xTaskResumeAll
 578:../Dave/Generated/FREERTOS/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 1011              	 .loc 1 578 0
 1012 0032 7868     	 ldr r0,[r7,#4]
 1013 0034 F968     	 ldr r1,[r7,#12]
 1014 0036 FFF7FEFF 	 bl prvProcessExpiredTimer
 1015 003a 25E0     	 b .L57
 1016              	.L59:
 579:../Dave/Generated/FREERTOS/timers.c **** 			}
 580:../Dave/Generated/FREERTOS/timers.c **** 			else
 581:../Dave/Generated/FREERTOS/timers.c **** 			{
 582:../Dave/Generated/FREERTOS/timers.c **** 				/* The tick count has not overflowed, and the next expire
 583:../Dave/Generated/FREERTOS/timers.c **** 				time has not been reached yet.  This task should therefore
 584:../Dave/Generated/FREERTOS/timers.c **** 				block to wait for the next expire time or a command to be
 585:../Dave/Generated/FREERTOS/timers.c **** 				received - whichever comes first.  The following line cannot
 586:../Dave/Generated/FREERTOS/timers.c **** 				be reached unless xNextExpireTime > xTimeNow, except in the
 587:../Dave/Generated/FREERTOS/timers.c **** 				case when the current timer list is empty. */
 588:../Dave/Generated/FREERTOS/timers.c **** 				if( xListWasEmpty != pdFALSE )
 1017              	 .loc 1 588 0
 1018 003c 3B68     	 ldr r3,[r7]
 1019 003e 002B     	 cmp r3,#0
 1020 0040 08D0     	 beq .L61
 589:../Dave/Generated/FREERTOS/timers.c **** 				{
 590:../Dave/Generated/FREERTOS/timers.c **** 					/* The current timer list is empty - is the overflow list
 591:../Dave/Generated/FREERTOS/timers.c **** 					also empty? */
 592:../Dave/Generated/FREERTOS/timers.c **** 					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 1021              	 .loc 1 592 0
 1022 0042 134B     	 ldr r3,.L65
 1023 0044 1B68     	 ldr r3,[r3]
 1024 0046 1B68     	 ldr r3,[r3]
 1025 0048 002B     	 cmp r3,#0
 1026 004a 01D1     	 bne .L62
 1027              	 .loc 1 592 0 is_stmt 0 discriminator 1
 1028 004c 0123     	 movs r3,#1
 1029 004e 00E0     	 b .L63
 1030              	.L62:
 1031              	 .loc 1 592 0 discriminator 2
 1032 0050 0023     	 movs r3,#0
 1033              	.L63:
 1034              	 .loc 1 592 0 discriminator 4
 1035 0052 3B60     	 str r3,[r7]
 1036              	.L61:
 593:../Dave/Generated/FREERTOS/timers.c **** 				}
 594:../Dave/Generated/FREERTOS/timers.c **** 
 595:../Dave/Generated/FREERTOS/timers.c **** 				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 1037              	 .loc 1 595 0 is_stmt 1
 1038 0054 0F4B     	 ldr r3,.L65+4
 1039 0056 1968     	 ldr r1,[r3]
 1040 0058 7A68     	 ldr r2,[r7,#4]
 1041 005a FB68     	 ldr r3,[r7,#12]
 1042 005c D31A     	 subs r3,r2,r3
 1043 005e 0846     	 mov r0,r1
 1044 0060 1946     	 mov r1,r3
 1045 0062 3A68     	 ldr r2,[r7]
 1046 0064 FFF7FEFF 	 bl vQueueWaitForMessageRestricted
 596:../Dave/Generated/FREERTOS/timers.c **** 
 597:../Dave/Generated/FREERTOS/timers.c **** 				if( xTaskResumeAll() == pdFALSE )
 1047              	 .loc 1 597 0
 1048 0068 FFF7FEFF 	 bl xTaskResumeAll
 1049 006c 0346     	 mov r3,r0
 1050 006e 002B     	 cmp r3,#0
 1051 0070 0AD1     	 bne .L57
 598:../Dave/Generated/FREERTOS/timers.c **** 				{
 599:../Dave/Generated/FREERTOS/timers.c **** 					/* Yield to wait for either a command to arrive, or the
 600:../Dave/Generated/FREERTOS/timers.c **** 					block time to expire.  If a command arrived between the
 601:../Dave/Generated/FREERTOS/timers.c **** 					critical section being exited and this yield then the yield
 602:../Dave/Generated/FREERTOS/timers.c **** 					will not cause the task to block. */
 603:../Dave/Generated/FREERTOS/timers.c **** 					portYIELD_WITHIN_API();
 1052              	 .loc 1 603 0
 1053 0072 094B     	 ldr r3,.L65+8
 1054 0074 4FF08052 	 mov r2,#268435456
 1055 0078 1A60     	 str r2,[r3]
 1056              	
 1057 007a BFF34F8F 	 dsb
 1058              	
 1059              	
 1060 007e BFF36F8F 	 isb
 1061              	
 1062              	 .thumb
 1063 0082 01E0     	 b .L57
 1064              	.L58:
 604:../Dave/Generated/FREERTOS/timers.c **** 				}
 605:../Dave/Generated/FREERTOS/timers.c **** 				else
 606:../Dave/Generated/FREERTOS/timers.c **** 				{
 607:../Dave/Generated/FREERTOS/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 608:../Dave/Generated/FREERTOS/timers.c **** 				}
 609:../Dave/Generated/FREERTOS/timers.c **** 			}
 610:../Dave/Generated/FREERTOS/timers.c **** 		}
 611:../Dave/Generated/FREERTOS/timers.c **** 		else
 612:../Dave/Generated/FREERTOS/timers.c **** 		{
 613:../Dave/Generated/FREERTOS/timers.c **** 			( void ) xTaskResumeAll();
 1065              	 .loc 1 613 0
 1066 0084 FFF7FEFF 	 bl xTaskResumeAll
 1067              	.L57:
 614:../Dave/Generated/FREERTOS/timers.c **** 		}
 615:../Dave/Generated/FREERTOS/timers.c **** 	}
 616:../Dave/Generated/FREERTOS/timers.c **** }
 1068              	 .loc 1 616 0
 1069 0088 1037     	 adds r7,r7,#16
 1070              	.LCFI60:
 1071              	 .cfi_def_cfa_offset 8
 1072 008a BD46     	 mov sp,r7
 1073              	.LCFI61:
 1074              	 .cfi_def_cfa_register 13
 1075              	 
 1076 008c 80BD     	 pop {r7,pc}
 1077              	.L66:
 1078 008e 00BF     	 .align 2
 1079              	.L65:
 1080 0090 00000000 	 .word pxOverflowTimerList
 1081 0094 00000000 	 .word xTimerQueue
 1082 0098 04ED00E0 	 .word -536810236
 1083              	 .cfi_endproc
 1084              	.LFE148:
 1086              	 .section .text.prvGetNextExpireTime,"ax",%progbits
 1087              	 .align 2
 1088              	 .thumb
 1089              	 .thumb_func
 1091              	prvGetNextExpireTime:
 1092              	.LFB149:
 617:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 618:../Dave/Generated/FREERTOS/timers.c **** 
 619:../Dave/Generated/FREERTOS/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 620:../Dave/Generated/FREERTOS/timers.c **** {
 1093              	 .loc 1 620 0
 1094              	 .cfi_startproc
 1095              	 
 1096              	 
 1097              	 
 1098 0000 80B4     	 push {r7}
 1099              	.LCFI62:
 1100              	 .cfi_def_cfa_offset 4
 1101              	 .cfi_offset 7,-4
 1102 0002 85B0     	 sub sp,sp,#20
 1103              	.LCFI63:
 1104              	 .cfi_def_cfa_offset 24
 1105 0004 00AF     	 add r7,sp,#0
 1106              	.LCFI64:
 1107              	 .cfi_def_cfa_register 7
 1108 0006 7860     	 str r0,[r7,#4]
 621:../Dave/Generated/FREERTOS/timers.c **** TickType_t xNextExpireTime;
 622:../Dave/Generated/FREERTOS/timers.c **** 
 623:../Dave/Generated/FREERTOS/timers.c **** 	/* Timers are listed in expiry time order, with the head of the list
 624:../Dave/Generated/FREERTOS/timers.c **** 	referencing the task that will expire first.  Obtain the time at which
 625:../Dave/Generated/FREERTOS/timers.c **** 	the timer with the nearest expiry time will expire.  If there are no
 626:../Dave/Generated/FREERTOS/timers.c **** 	active timers then just set the next expire time to 0.  That will cause
 627:../Dave/Generated/FREERTOS/timers.c **** 	this task to unblock when the tick count overflows, at which point the
 628:../Dave/Generated/FREERTOS/timers.c **** 	timer lists will be switched and the next expiry time can be
 629:../Dave/Generated/FREERTOS/timers.c **** 	re-assessed.  */
 630:../Dave/Generated/FREERTOS/timers.c **** 	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 1109              	 .loc 1 630 0
 1110 0008 0E4B     	 ldr r3,.L73
 1111 000a 1B68     	 ldr r3,[r3]
 1112 000c 1B68     	 ldr r3,[r3]
 1113 000e 002B     	 cmp r3,#0
 1114 0010 01D1     	 bne .L68
 1115              	 .loc 1 630 0 is_stmt 0 discriminator 1
 1116 0012 0122     	 movs r2,#1
 1117 0014 00E0     	 b .L69
 1118              	.L68:
 1119              	 .loc 1 630 0 discriminator 2
 1120 0016 0022     	 movs r2,#0
 1121              	.L69:
 1122              	 .loc 1 630 0 discriminator 4
 1123 0018 7B68     	 ldr r3,[r7,#4]
 1124 001a 1A60     	 str r2,[r3]
 631:../Dave/Generated/FREERTOS/timers.c **** 	if( *pxListWasEmpty == pdFALSE )
 1125              	 .loc 1 631 0 is_stmt 1 discriminator 4
 1126 001c 7B68     	 ldr r3,[r7,#4]
 1127 001e 1B68     	 ldr r3,[r3]
 1128 0020 002B     	 cmp r3,#0
 1129 0022 05D1     	 bne .L70
 632:../Dave/Generated/FREERTOS/timers.c **** 	{
 633:../Dave/Generated/FREERTOS/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 1130              	 .loc 1 633 0
 1131 0024 074B     	 ldr r3,.L73
 1132 0026 1B68     	 ldr r3,[r3]
 1133 0028 DB68     	 ldr r3,[r3,#12]
 1134 002a 1B68     	 ldr r3,[r3]
 1135 002c FB60     	 str r3,[r7,#12]
 1136 002e 01E0     	 b .L71
 1137              	.L70:
 634:../Dave/Generated/FREERTOS/timers.c **** 	}
 635:../Dave/Generated/FREERTOS/timers.c **** 	else
 636:../Dave/Generated/FREERTOS/timers.c **** 	{
 637:../Dave/Generated/FREERTOS/timers.c **** 		/* Ensure the task unblocks when the tick count rolls over. */
 638:../Dave/Generated/FREERTOS/timers.c **** 		xNextExpireTime = ( TickType_t ) 0U;
 1138              	 .loc 1 638 0
 1139 0030 0023     	 movs r3,#0
 1140 0032 FB60     	 str r3,[r7,#12]
 1141              	.L71:
 639:../Dave/Generated/FREERTOS/timers.c **** 	}
 640:../Dave/Generated/FREERTOS/timers.c **** 
 641:../Dave/Generated/FREERTOS/timers.c **** 	return xNextExpireTime;
 1142              	 .loc 1 641 0
 1143 0034 FB68     	 ldr r3,[r7,#12]
 642:../Dave/Generated/FREERTOS/timers.c **** }
 1144              	 .loc 1 642 0
 1145 0036 1846     	 mov r0,r3
 1146 0038 1437     	 adds r7,r7,#20
 1147              	.LCFI65:
 1148              	 .cfi_def_cfa_offset 4
 1149 003a BD46     	 mov sp,r7
 1150              	.LCFI66:
 1151              	 .cfi_def_cfa_register 13
 1152              	 
 1153 003c 5DF8047B 	 ldr r7,[sp],#4
 1154              	.LCFI67:
 1155              	 .cfi_restore 7
 1156              	 .cfi_def_cfa_offset 0
 1157 0040 7047     	 bx lr
 1158              	.L74:
 1159 0042 00BF     	 .align 2
 1160              	.L73:
 1161 0044 00000000 	 .word pxCurrentTimerList
 1162              	 .cfi_endproc
 1163              	.LFE149:
 1165              	 .section .text.prvSampleTimeNow,"ax",%progbits
 1166              	 .align 2
 1167              	 .thumb
 1168              	 .thumb_func
 1170              	prvSampleTimeNow:
 1171              	.LFB150:
 643:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 644:../Dave/Generated/FREERTOS/timers.c **** 
 645:../Dave/Generated/FREERTOS/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 646:../Dave/Generated/FREERTOS/timers.c **** {
 1172              	 .loc 1 646 0
 1173              	 .cfi_startproc
 1174              	 
 1175              	 
 1176 0000 80B5     	 push {r7,lr}
 1177              	.LCFI68:
 1178              	 .cfi_def_cfa_offset 8
 1179              	 .cfi_offset 7,-8
 1180              	 .cfi_offset 14,-4
 1181 0002 84B0     	 sub sp,sp,#16
 1182              	.LCFI69:
 1183              	 .cfi_def_cfa_offset 24
 1184 0004 00AF     	 add r7,sp,#0
 1185              	.LCFI70:
 1186              	 .cfi_def_cfa_register 7
 1187 0006 7860     	 str r0,[r7,#4]
 647:../Dave/Generated/FREERTOS/timers.c **** TickType_t xTimeNow;
 648:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only acce
 649:../Dave/Generated/FREERTOS/timers.c **** 
 650:../Dave/Generated/FREERTOS/timers.c **** 	xTimeNow = xTaskGetTickCount();
 1188              	 .loc 1 650 0
 1189 0008 FFF7FEFF 	 bl xTaskGetTickCount
 1190 000c F860     	 str r0,[r7,#12]
 651:../Dave/Generated/FREERTOS/timers.c **** 
 652:../Dave/Generated/FREERTOS/timers.c **** 	if( xTimeNow < xLastTime )
 1191              	 .loc 1 652 0
 1192 000e 0B4B     	 ldr r3,.L79
 1193 0010 1B68     	 ldr r3,[r3]
 1194 0012 FA68     	 ldr r2,[r7,#12]
 1195 0014 9A42     	 cmp r2,r3
 1196 0016 05D2     	 bcs .L76
 653:../Dave/Generated/FREERTOS/timers.c **** 	{
 654:../Dave/Generated/FREERTOS/timers.c **** 		prvSwitchTimerLists();
 1197              	 .loc 1 654 0
 1198 0018 FFF7FEFF 	 bl prvSwitchTimerLists
 655:../Dave/Generated/FREERTOS/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 1199              	 .loc 1 655 0
 1200 001c 7B68     	 ldr r3,[r7,#4]
 1201 001e 0122     	 movs r2,#1
 1202 0020 1A60     	 str r2,[r3]
 1203 0022 02E0     	 b .L77
 1204              	.L76:
 656:../Dave/Generated/FREERTOS/timers.c **** 	}
 657:../Dave/Generated/FREERTOS/timers.c **** 	else
 658:../Dave/Generated/FREERTOS/timers.c **** 	{
 659:../Dave/Generated/FREERTOS/timers.c **** 		*pxTimerListsWereSwitched = pdFALSE;
 1205              	 .loc 1 659 0
 1206 0024 7B68     	 ldr r3,[r7,#4]
 1207 0026 0022     	 movs r2,#0
 1208 0028 1A60     	 str r2,[r3]
 1209              	.L77:
 660:../Dave/Generated/FREERTOS/timers.c **** 	}
 661:../Dave/Generated/FREERTOS/timers.c **** 
 662:../Dave/Generated/FREERTOS/timers.c **** 	xLastTime = xTimeNow;
 1210              	 .loc 1 662 0
 1211 002a 044A     	 ldr r2,.L79
 1212 002c FB68     	 ldr r3,[r7,#12]
 1213 002e 1360     	 str r3,[r2]
 663:../Dave/Generated/FREERTOS/timers.c **** 
 664:../Dave/Generated/FREERTOS/timers.c **** 	return xTimeNow;
 1214              	 .loc 1 664 0
 1215 0030 FB68     	 ldr r3,[r7,#12]
 665:../Dave/Generated/FREERTOS/timers.c **** }
 1216              	 .loc 1 665 0
 1217 0032 1846     	 mov r0,r3
 1218 0034 1037     	 adds r7,r7,#16
 1219              	.LCFI71:
 1220              	 .cfi_def_cfa_offset 8
 1221 0036 BD46     	 mov sp,r7
 1222              	.LCFI72:
 1223              	 .cfi_def_cfa_register 13
 1224              	 
 1225 0038 80BD     	 pop {r7,pc}
 1226              	.L80:
 1227 003a 00BF     	 .align 2
 1228              	.L79:
 1229 003c 00000000 	 .word xLastTime.7763
 1230              	 .cfi_endproc
 1231              	.LFE150:
 1233              	 .section .text.prvInsertTimerInActiveList,"ax",%progbits
 1234              	 .align 2
 1235              	 .thumb
 1236              	 .thumb_func
 1238              	prvInsertTimerInActiveList:
 1239              	.LFB151:
 666:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 667:../Dave/Generated/FREERTOS/timers.c **** 
 668:../Dave/Generated/FREERTOS/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 669:../Dave/Generated/FREERTOS/timers.c **** {
 1240              	 .loc 1 669 0
 1241              	 .cfi_startproc
 1242              	 
 1243              	 
 1244 0000 80B5     	 push {r7,lr}
 1245              	.LCFI73:
 1246              	 .cfi_def_cfa_offset 8
 1247              	 .cfi_offset 7,-8
 1248              	 .cfi_offset 14,-4
 1249 0002 86B0     	 sub sp,sp,#24
 1250              	.LCFI74:
 1251              	 .cfi_def_cfa_offset 32
 1252 0004 00AF     	 add r7,sp,#0
 1253              	.LCFI75:
 1254              	 .cfi_def_cfa_register 7
 1255 0006 F860     	 str r0,[r7,#12]
 1256 0008 B960     	 str r1,[r7,#8]
 1257 000a 7A60     	 str r2,[r7,#4]
 1258 000c 3B60     	 str r3,[r7]
 670:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xProcessTimerNow = pdFALSE;
 1259              	 .loc 1 670 0
 1260 000e 0023     	 movs r3,#0
 1261 0010 7B61     	 str r3,[r7,#20]
 671:../Dave/Generated/FREERTOS/timers.c **** 
 672:../Dave/Generated/FREERTOS/timers.c **** 	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 1262              	 .loc 1 672 0
 1263 0012 FB68     	 ldr r3,[r7,#12]
 1264 0014 BA68     	 ldr r2,[r7,#8]
 1265 0016 5A60     	 str r2,[r3,#4]
 673:../Dave/Generated/FREERTOS/timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 1266              	 .loc 1 673 0
 1267 0018 FB68     	 ldr r3,[r7,#12]
 1268 001a FA68     	 ldr r2,[r7,#12]
 1269 001c 1A61     	 str r2,[r3,#16]
 674:../Dave/Generated/FREERTOS/timers.c **** 
 675:../Dave/Generated/FREERTOS/timers.c **** 	if( xNextExpiryTime <= xTimeNow )
 1270              	 .loc 1 675 0
 1271 001e BA68     	 ldr r2,[r7,#8]
 1272 0020 7B68     	 ldr r3,[r7,#4]
 1273 0022 9A42     	 cmp r2,r3
 1274 0024 12D8     	 bhi .L82
 676:../Dave/Generated/FREERTOS/timers.c **** 	{
 677:../Dave/Generated/FREERTOS/timers.c **** 		/* Has the expiry time elapsed between the command to start/reset a
 678:../Dave/Generated/FREERTOS/timers.c **** 		timer was issued, and the time the command was processed? */
 679:../Dave/Generated/FREERTOS/timers.c **** 		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961
 1275              	 .loc 1 679 0
 1276 0026 7A68     	 ldr r2,[r7,#4]
 1277 0028 3B68     	 ldr r3,[r7]
 1278 002a D21A     	 subs r2,r2,r3
 1279 002c FB68     	 ldr r3,[r7,#12]
 1280 002e 9B69     	 ldr r3,[r3,#24]
 1281 0030 9A42     	 cmp r2,r3
 1282 0032 02D3     	 bcc .L83
 680:../Dave/Generated/FREERTOS/timers.c **** 		{
 681:../Dave/Generated/FREERTOS/timers.c **** 			/* The time between a command being issued and the command being
 682:../Dave/Generated/FREERTOS/timers.c **** 			processed actually exceeds the timers period.  */
 683:../Dave/Generated/FREERTOS/timers.c **** 			xProcessTimerNow = pdTRUE;
 1283              	 .loc 1 683 0
 1284 0034 0123     	 movs r3,#1
 1285 0036 7B61     	 str r3,[r7,#20]
 1286 0038 1BE0     	 b .L85
 1287              	.L83:
 684:../Dave/Generated/FREERTOS/timers.c **** 		}
 685:../Dave/Generated/FREERTOS/timers.c **** 		else
 686:../Dave/Generated/FREERTOS/timers.c **** 		{
 687:../Dave/Generated/FREERTOS/timers.c **** 			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 1288              	 .loc 1 687 0
 1289 003a 104B     	 ldr r3,.L88
 1290 003c 1A68     	 ldr r2,[r3]
 1291 003e FB68     	 ldr r3,[r7,#12]
 1292 0040 0433     	 adds r3,r3,#4
 1293 0042 1046     	 mov r0,r2
 1294 0044 1946     	 mov r1,r3
 1295 0046 FFF7FEFF 	 bl vListInsert
 1296 004a 12E0     	 b .L85
 1297              	.L82:
 688:../Dave/Generated/FREERTOS/timers.c **** 		}
 689:../Dave/Generated/FREERTOS/timers.c **** 	}
 690:../Dave/Generated/FREERTOS/timers.c **** 	else
 691:../Dave/Generated/FREERTOS/timers.c **** 	{
 692:../Dave/Generated/FREERTOS/timers.c **** 		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 1298              	 .loc 1 692 0
 1299 004c 7A68     	 ldr r2,[r7,#4]
 1300 004e 3B68     	 ldr r3,[r7]
 1301 0050 9A42     	 cmp r2,r3
 1302 0052 06D2     	 bcs .L86
 1303              	 .loc 1 692 0 is_stmt 0 discriminator 1
 1304 0054 BA68     	 ldr r2,[r7,#8]
 1305 0056 3B68     	 ldr r3,[r7]
 1306 0058 9A42     	 cmp r2,r3
 1307 005a 02D3     	 bcc .L86
 693:../Dave/Generated/FREERTOS/timers.c **** 		{
 694:../Dave/Generated/FREERTOS/timers.c **** 			/* If, since the command was issued, the tick count has overflowed
 695:../Dave/Generated/FREERTOS/timers.c **** 			but the expiry time has not, then the timer must have already passed
 696:../Dave/Generated/FREERTOS/timers.c **** 			its expiry time and should be processed immediately. */
 697:../Dave/Generated/FREERTOS/timers.c **** 			xProcessTimerNow = pdTRUE;
 1308              	 .loc 1 697 0 is_stmt 1
 1309 005c 0123     	 movs r3,#1
 1310 005e 7B61     	 str r3,[r7,#20]
 1311 0060 07E0     	 b .L85
 1312              	.L86:
 698:../Dave/Generated/FREERTOS/timers.c **** 		}
 699:../Dave/Generated/FREERTOS/timers.c **** 		else
 700:../Dave/Generated/FREERTOS/timers.c **** 		{
 701:../Dave/Generated/FREERTOS/timers.c **** 			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 1313              	 .loc 1 701 0
 1314 0062 074B     	 ldr r3,.L88+4
 1315 0064 1A68     	 ldr r2,[r3]
 1316 0066 FB68     	 ldr r3,[r7,#12]
 1317 0068 0433     	 adds r3,r3,#4
 1318 006a 1046     	 mov r0,r2
 1319 006c 1946     	 mov r1,r3
 1320 006e FFF7FEFF 	 bl vListInsert
 1321              	.L85:
 702:../Dave/Generated/FREERTOS/timers.c **** 		}
 703:../Dave/Generated/FREERTOS/timers.c **** 	}
 704:../Dave/Generated/FREERTOS/timers.c **** 
 705:../Dave/Generated/FREERTOS/timers.c **** 	return xProcessTimerNow;
 1322              	 .loc 1 705 0
 1323 0072 7B69     	 ldr r3,[r7,#20]
 706:../Dave/Generated/FREERTOS/timers.c **** }
 1324              	 .loc 1 706 0
 1325 0074 1846     	 mov r0,r3
 1326 0076 1837     	 adds r7,r7,#24
 1327              	.LCFI76:
 1328              	 .cfi_def_cfa_offset 8
 1329 0078 BD46     	 mov sp,r7
 1330              	.LCFI77:
 1331              	 .cfi_def_cfa_register 13
 1332              	 
 1333 007a 80BD     	 pop {r7,pc}
 1334              	.L89:
 1335              	 .align 2
 1336              	.L88:
 1337 007c 00000000 	 .word pxOverflowTimerList
 1338 0080 00000000 	 .word pxCurrentTimerList
 1339              	 .cfi_endproc
 1340              	.LFE151:
 1342              	 .section .text.prvProcessReceivedCommands,"ax",%progbits
 1343              	 .align 2
 1344              	 .thumb
 1345              	 .thumb_func
 1347              	prvProcessReceivedCommands:
 1348              	.LFB152:
 707:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 708:../Dave/Generated/FREERTOS/timers.c **** 
 709:../Dave/Generated/FREERTOS/timers.c **** static void	prvProcessReceivedCommands( void )
 710:../Dave/Generated/FREERTOS/timers.c **** {
 1349              	 .loc 1 710 0
 1350              	 .cfi_startproc
 1351              	 
 1352              	 
 1353 0000 80B5     	 push {r7,lr}
 1354              	.LCFI78:
 1355              	 .cfi_def_cfa_offset 8
 1356              	 .cfi_offset 7,-8
 1357              	 .cfi_offset 14,-4
 1358 0002 8EB0     	 sub sp,sp,#56
 1359              	.LCFI79:
 1360              	 .cfi_def_cfa_offset 64
 1361 0004 02AF     	 add r7,sp,#8
 1362              	.LCFI80:
 1363              	 .cfi_def_cfa 7,56
 711:../Dave/Generated/FREERTOS/timers.c **** DaemonTaskMessage_t xMessage;
 712:../Dave/Generated/FREERTOS/timers.c **** Timer_t *pxTimer;
 713:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerListsWereSwitched, xResult;
 714:../Dave/Generated/FREERTOS/timers.c **** TickType_t xTimeNow;
 715:../Dave/Generated/FREERTOS/timers.c **** 
 716:../Dave/Generated/FREERTOS/timers.c **** 	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does
 1364              	 .loc 1 716 0
 1365 0006 CBE0     	 b .L91
 1366              	.L108:
 717:../Dave/Generated/FREERTOS/timers.c **** 	{
 718:../Dave/Generated/FREERTOS/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 719:../Dave/Generated/FREERTOS/timers.c **** 		{
 720:../Dave/Generated/FREERTOS/timers.c **** 			/* Negative commands are pended function calls rather than timer
 721:../Dave/Generated/FREERTOS/timers.c **** 			commands. */
 722:../Dave/Generated/FREERTOS/timers.c **** 			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 1367              	 .loc 1 722 0
 1368 0008 7B68     	 ldr r3,[r7,#4]
 1369 000a 002B     	 cmp r3,#0
 1370 000c 18DA     	 bge .L92
 1371              	.LBB55:
 723:../Dave/Generated/FREERTOS/timers.c **** 			{
 724:../Dave/Generated/FREERTOS/timers.c **** 				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 1372              	 .loc 1 724 0
 1373 000e 3B1D     	 adds r3,r7,#4
 1374 0010 0433     	 adds r3,r3,#4
 1375 0012 FB62     	 str r3,[r7,#44]
 725:../Dave/Generated/FREERTOS/timers.c **** 
 726:../Dave/Generated/FREERTOS/timers.c **** 				/* The timer uses the xCallbackParameters member to request a
 727:../Dave/Generated/FREERTOS/timers.c **** 				callback be executed.  Check the callback is not NULL. */
 728:../Dave/Generated/FREERTOS/timers.c **** 				configASSERT( pxCallback );
 1376              	 .loc 1 728 0
 1377 0014 FB6A     	 ldr r3,[r7,#44]
 1378 0016 002B     	 cmp r3,#0
 1379 0018 09D1     	 bne .L93
 1380              	.LBB56:
 1381              	.LBB57:
 1382              	 .loc 2 195 0 discriminator 1
 1383              	
 1384 001a 4FF0FC03 	 mov r3,#252
 1385 001e 83F31188 	 msr basepri,r3
 1386 0022 BFF36F8F 	 isb 
 1387 0026 BFF34F8F 	 dsb 
 1388              	
 1389              	
 1390              	 .thumb
 1391 002a FB61     	 str r3,[r7,#28]
 1392              	.L94:
 1393              	.LBE57:
 1394              	.LBE56:
 1395              	 .loc 1 728 0 discriminator 1
 1396 002c FEE7     	 b .L94
 1397              	.L93:
 729:../Dave/Generated/FREERTOS/timers.c **** 
 730:../Dave/Generated/FREERTOS/timers.c **** 				/* Call the function. */
 731:../Dave/Generated/FREERTOS/timers.c **** 				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 1398              	 .loc 1 731 0
 1399 002e FB6A     	 ldr r3,[r7,#44]
 1400 0030 1B68     	 ldr r3,[r3]
 1401 0032 FA6A     	 ldr r2,[r7,#44]
 1402 0034 5168     	 ldr r1,[r2,#4]
 1403 0036 FA6A     	 ldr r2,[r7,#44]
 1404 0038 9268     	 ldr r2,[r2,#8]
 1405 003a 0846     	 mov r0,r1
 1406 003c 1146     	 mov r1,r2
 1407 003e 9847     	 blx r3
 1408              	.L92:
 1409              	.LBE55:
 732:../Dave/Generated/FREERTOS/timers.c **** 			}
 733:../Dave/Generated/FREERTOS/timers.c **** 			else
 734:../Dave/Generated/FREERTOS/timers.c **** 			{
 735:../Dave/Generated/FREERTOS/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 736:../Dave/Generated/FREERTOS/timers.c **** 			}
 737:../Dave/Generated/FREERTOS/timers.c **** 		}
 738:../Dave/Generated/FREERTOS/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 739:../Dave/Generated/FREERTOS/timers.c **** 
 740:../Dave/Generated/FREERTOS/timers.c **** 		/* Commands that are positive are timer commands rather than pended
 741:../Dave/Generated/FREERTOS/timers.c **** 		function calls. */
 742:../Dave/Generated/FREERTOS/timers.c **** 		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 1410              	 .loc 1 742 0
 1411 0040 7B68     	 ldr r3,[r7,#4]
 1412 0042 002B     	 cmp r3,#0
 1413 0044 C0F2AC80 	 blt .L91
 743:../Dave/Generated/FREERTOS/timers.c **** 		{
 744:../Dave/Generated/FREERTOS/timers.c **** 			/* The messages uses the xTimerParameters member to work on a
 745:../Dave/Generated/FREERTOS/timers.c **** 			software timer. */
 746:../Dave/Generated/FREERTOS/timers.c **** 			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 1414              	 .loc 1 746 0
 1415 0048 FB68     	 ldr r3,[r7,#12]
 1416 004a BB62     	 str r3,[r7,#40]
 747:../Dave/Generated/FREERTOS/timers.c **** 
 748:../Dave/Generated/FREERTOS/timers.c **** 			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The
 1417              	 .loc 1 748 0
 1418 004c BB6A     	 ldr r3,[r7,#40]
 1419 004e 5B69     	 ldr r3,[r3,#20]
 1420 0050 002B     	 cmp r3,#0
 1421 0052 04D0     	 beq .L95
 749:../Dave/Generated/FREERTOS/timers.c **** 			{
 750:../Dave/Generated/FREERTOS/timers.c **** 				/* The timer is in a list, remove it. */
 751:../Dave/Generated/FREERTOS/timers.c **** 				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 1422              	 .loc 1 751 0
 1423 0054 BB6A     	 ldr r3,[r7,#40]
 1424 0056 0433     	 adds r3,r3,#4
 1425 0058 1846     	 mov r0,r3
 1426 005a FFF7FEFF 	 bl uxListRemove
 1427              	.L95:
 752:../Dave/Generated/FREERTOS/timers.c **** 			}
 753:../Dave/Generated/FREERTOS/timers.c **** 			else
 754:../Dave/Generated/FREERTOS/timers.c **** 			{
 755:../Dave/Generated/FREERTOS/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 756:../Dave/Generated/FREERTOS/timers.c **** 			}
 757:../Dave/Generated/FREERTOS/timers.c **** 
 758:../Dave/Generated/FREERTOS/timers.c **** 			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageV
 759:../Dave/Generated/FREERTOS/timers.c **** 
 760:../Dave/Generated/FREERTOS/timers.c **** 			/* In this case the xTimerListsWereSwitched parameter is not used, but
 761:../Dave/Generated/FREERTOS/timers.c **** 			it must be present in the function call.  prvSampleTimeNow() must be
 762:../Dave/Generated/FREERTOS/timers.c **** 			called after the message is received from xTimerQueue so there is no
 763:../Dave/Generated/FREERTOS/timers.c **** 			possibility of a higher priority task adding a message to the message
 764:../Dave/Generated/FREERTOS/timers.c **** 			queue with a time that is ahead of the timer daemon task (because it
 765:../Dave/Generated/FREERTOS/timers.c **** 			pre-empted the timer daemon task after the xTimeNow value was set). */
 766:../Dave/Generated/FREERTOS/timers.c **** 			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 1428              	 .loc 1 766 0
 1429 005e 3B46     	 mov r3,r7
 1430 0060 1846     	 mov r0,r3
 1431 0062 FFF7FEFF 	 bl prvSampleTimeNow
 1432 0066 7862     	 str r0,[r7,#36]
 767:../Dave/Generated/FREERTOS/timers.c **** 
 768:../Dave/Generated/FREERTOS/timers.c **** 			switch( xMessage.xMessageID )
 1433              	 .loc 1 768 0
 1434 0068 7B68     	 ldr r3,[r7,#4]
 1435 006a 092B     	 cmp r3,#9
 1436 006c 00F29780 	 bhi .L109
 1437 0070 01A2     	 adr r2,.L98
 1438 0072 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1439 0076 00BF     	 .p2align 2
 1440              	.L98:
 1441 0078 A1000000 	 .word .L97+1
 1442 007c A1000000 	 .word .L97+1
 1443 0080 A1000000 	 .word .L97+1
 1444 0084 17010000 	 .word .L99+1
 1445 0088 2B010000 	 .word .L100+1
 1446 008c 75010000 	 .word .L101+1
 1447 0090 A1000000 	 .word .L97+1
 1448 0094 A1000000 	 .word .L97+1
 1449 0098 17010000 	 .word .L99+1
 1450 009c 2B010000 	 .word .L100+1
 1451              	 .p2align 1
 1452              	.L97:
 769:../Dave/Generated/FREERTOS/timers.c **** 			{
 770:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_START :
 771:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_START_FROM_ISR :
 772:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_RESET :
 773:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_RESET_FROM_ISR :
 774:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_START_DONT_TRACE :
 775:../Dave/Generated/FREERTOS/timers.c **** 					/* Start or restart a timer. */
 776:../Dave/Generated/FREERTOS/timers.c **** 					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 1453              	 .loc 1 776 0
 1454 00a0 BB6A     	 ldr r3,[r7,#40]
 1455 00a2 93F82830 	 ldrb r3,[r3,#40]
 1456 00a6 43F00103 	 orr r3,r3,#1
 1457 00aa DAB2     	 uxtb r2,r3
 1458 00ac BB6A     	 ldr r3,[r7,#40]
 1459 00ae 83F82820 	 strb r2,[r3,#40]
 777:../Dave/Generated/FREERTOS/timers.c **** 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer-
 1460              	 .loc 1 777 0
 1461 00b2 BA68     	 ldr r2,[r7,#8]
 1462 00b4 BB6A     	 ldr r3,[r7,#40]
 1463 00b6 9B69     	 ldr r3,[r3,#24]
 1464 00b8 1A44     	 add r2,r2,r3
 1465 00ba BB68     	 ldr r3,[r7,#8]
 1466 00bc B86A     	 ldr r0,[r7,#40]
 1467 00be 1146     	 mov r1,r2
 1468 00c0 7A6A     	 ldr r2,[r7,#36]
 1469 00c2 FFF7FEFF 	 bl prvInsertTimerInActiveList
 1470 00c6 0346     	 mov r3,r0
 1471 00c8 002B     	 cmp r3,#0
 1472 00ca 23D0     	 beq .L102
 778:../Dave/Generated/FREERTOS/timers.c **** 					{
 779:../Dave/Generated/FREERTOS/timers.c **** 						/* The timer expired before it was added to the active
 780:../Dave/Generated/FREERTOS/timers.c **** 						timer list.  Process it now. */
 781:../Dave/Generated/FREERTOS/timers.c **** 						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1473              	 .loc 1 781 0
 1474 00cc BB6A     	 ldr r3,[r7,#40]
 1475 00ce 1B6A     	 ldr r3,[r3,#32]
 1476 00d0 B86A     	 ldr r0,[r7,#40]
 1477 00d2 9847     	 blx r3
 782:../Dave/Generated/FREERTOS/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 783:../Dave/Generated/FREERTOS/timers.c **** 
 784:../Dave/Generated/FREERTOS/timers.c **** 						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 1478              	 .loc 1 784 0
 1479 00d4 BB6A     	 ldr r3,[r7,#40]
 1480 00d6 93F82830 	 ldrb r3,[r3,#40]
 1481 00da 03F00403 	 and r3,r3,#4
 1482 00de 002B     	 cmp r3,#0
 1483 00e0 18D0     	 beq .L102
 785:../Dave/Generated/FREERTOS/timers.c **** 						{
 786:../Dave/Generated/FREERTOS/timers.c **** 							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParam
 1484              	 .loc 1 786 0
 1485 00e2 BA68     	 ldr r2,[r7,#8]
 1486 00e4 BB6A     	 ldr r3,[r7,#40]
 1487 00e6 9B69     	 ldr r3,[r3,#24]
 1488 00e8 1A44     	 add r2,r2,r3
 1489 00ea 0023     	 movs r3,#0
 1490 00ec 0093     	 str r3,[sp]
 1491 00ee B86A     	 ldr r0,[r7,#40]
 1492 00f0 0021     	 movs r1,#0
 1493 00f2 0023     	 movs r3,#0
 1494 00f4 FFF7FEFF 	 bl xTimerGenericCommand
 1495 00f8 3862     	 str r0,[r7,#32]
 787:../Dave/Generated/FREERTOS/timers.c **** 							configASSERT( xResult );
 1496              	 .loc 1 787 0
 1497 00fa 3B6A     	 ldr r3,[r7,#32]
 1498 00fc 002B     	 cmp r3,#0
 1499 00fe 09D1     	 bne .L102
 1500              	.LBB58:
 1501              	.LBB59:
 1502              	 .loc 2 195 0 discriminator 1
 1503              	
 1504 0100 4FF0FC03 	 mov r3,#252
 1505 0104 83F31188 	 msr basepri,r3
 1506 0108 BFF36F8F 	 isb 
 1507 010c BFF34F8F 	 dsb 
 1508              	
 1509              	
 1510              	 .thumb
 1511 0110 BB61     	 str r3,[r7,#24]
 1512              	.L103:
 1513              	.LBE59:
 1514              	.LBE58:
 1515              	 .loc 1 787 0 discriminator 2
 1516 0112 FEE7     	 b .L103
 1517              	.L102:
 788:../Dave/Generated/FREERTOS/timers.c **** 							( void ) xResult;
 789:../Dave/Generated/FREERTOS/timers.c **** 						}
 790:../Dave/Generated/FREERTOS/timers.c **** 						else
 791:../Dave/Generated/FREERTOS/timers.c **** 						{
 792:../Dave/Generated/FREERTOS/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 793:../Dave/Generated/FREERTOS/timers.c **** 						}
 794:../Dave/Generated/FREERTOS/timers.c **** 					}
 795:../Dave/Generated/FREERTOS/timers.c **** 					else
 796:../Dave/Generated/FREERTOS/timers.c **** 					{
 797:../Dave/Generated/FREERTOS/timers.c **** 						mtCOVERAGE_TEST_MARKER();
 798:../Dave/Generated/FREERTOS/timers.c **** 					}
 799:../Dave/Generated/FREERTOS/timers.c **** 					break;
 1518              	 .loc 1 799 0 discriminator 4
 1519 0114 44E0     	 b .L91
 1520              	.L99:
 800:../Dave/Generated/FREERTOS/timers.c **** 
 801:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_STOP :
 802:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_STOP_FROM_ISR :
 803:../Dave/Generated/FREERTOS/timers.c **** 					/* The timer has already been removed from the active list. */
 804:../Dave/Generated/FREERTOS/timers.c **** 					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 1521              	 .loc 1 804 0
 1522 0116 BB6A     	 ldr r3,[r7,#40]
 1523 0118 93F82830 	 ldrb r3,[r3,#40]
 1524 011c 23F00103 	 bic r3,r3,#1
 1525 0120 DAB2     	 uxtb r2,r3
 1526 0122 BB6A     	 ldr r3,[r7,#40]
 1527 0124 83F82820 	 strb r2,[r3,#40]
 805:../Dave/Generated/FREERTOS/timers.c **** 					break;
 1528              	 .loc 1 805 0
 1529 0128 3AE0     	 b .L91
 1530              	.L100:
 806:../Dave/Generated/FREERTOS/timers.c **** 
 807:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD :
 808:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
 809:../Dave/Generated/FREERTOS/timers.c **** 					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 1531              	 .loc 1 809 0
 1532 012a BB6A     	 ldr r3,[r7,#40]
 1533 012c 93F82830 	 ldrb r3,[r3,#40]
 1534 0130 43F00103 	 orr r3,r3,#1
 1535 0134 DAB2     	 uxtb r2,r3
 1536 0136 BB6A     	 ldr r3,[r7,#40]
 1537 0138 83F82820 	 strb r2,[r3,#40]
 810:../Dave/Generated/FREERTOS/timers.c **** 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 1538              	 .loc 1 810 0
 1539 013c BA68     	 ldr r2,[r7,#8]
 1540 013e BB6A     	 ldr r3,[r7,#40]
 1541 0140 9A61     	 str r2,[r3,#24]
 811:../Dave/Generated/FREERTOS/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1542              	 .loc 1 811 0
 1543 0142 BB6A     	 ldr r3,[r7,#40]
 1544 0144 9B69     	 ldr r3,[r3,#24]
 1545 0146 002B     	 cmp r3,#0
 1546 0148 09D1     	 bne .L104
 1547              	.LBB60:
 1548              	.LBB61:
 1549              	 .loc 2 195 0 discriminator 1
 1550              	
 1551 014a 4FF0FC03 	 mov r3,#252
 1552 014e 83F31188 	 msr basepri,r3
 1553 0152 BFF36F8F 	 isb 
 1554 0156 BFF34F8F 	 dsb 
 1555              	
 1556              	
 1557              	 .thumb
 1558 015a 7B61     	 str r3,[r7,#20]
 1559              	.L105:
 1560              	.LBE61:
 1561              	.LBE60:
 1562              	 .loc 1 811 0 discriminator 5
 1563 015c FEE7     	 b .L105
 1564              	.L104:
 812:../Dave/Generated/FREERTOS/timers.c **** 
 813:../Dave/Generated/FREERTOS/timers.c **** 					/* The new period does not really have a reference, and can
 814:../Dave/Generated/FREERTOS/timers.c **** 					be longer or shorter than the old one.  The command time is
 815:../Dave/Generated/FREERTOS/timers.c **** 					therefore set to the current time, and as the period cannot
 816:../Dave/Generated/FREERTOS/timers.c **** 					be zero the next expiry time can only be in the future,
 817:../Dave/Generated/FREERTOS/timers.c **** 					meaning (unlike for the xTimerStart() case above) there is
 818:../Dave/Generated/FREERTOS/timers.c **** 					no fail case that needs to be handled here. */
 819:../Dave/Generated/FREERTOS/timers.c **** 					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTi
 1565              	 .loc 1 819 0
 1566 015e BB6A     	 ldr r3,[r7,#40]
 1567 0160 9A69     	 ldr r2,[r3,#24]
 1568 0162 7B6A     	 ldr r3,[r7,#36]
 1569 0164 1344     	 add r3,r3,r2
 1570 0166 B86A     	 ldr r0,[r7,#40]
 1571 0168 1946     	 mov r1,r3
 1572 016a 7A6A     	 ldr r2,[r7,#36]
 1573 016c 7B6A     	 ldr r3,[r7,#36]
 1574 016e FFF7FEFF 	 bl prvInsertTimerInActiveList
 820:../Dave/Generated/FREERTOS/timers.c **** 					break;
 1575              	 .loc 1 820 0
 1576 0172 15E0     	 b .L91
 1577              	.L101:
 821:../Dave/Generated/FREERTOS/timers.c **** 
 822:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_DELETE :
 823:../Dave/Generated/FREERTOS/timers.c **** 					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 824:../Dave/Generated/FREERTOS/timers.c **** 					{
 825:../Dave/Generated/FREERTOS/timers.c **** 						/* The timer has already been removed from the active list,
 826:../Dave/Generated/FREERTOS/timers.c **** 						just free up the memory if the memory was dynamically
 827:../Dave/Generated/FREERTOS/timers.c **** 						allocated. */
 828:../Dave/Generated/FREERTOS/timers.c **** 						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 1578              	 .loc 1 828 0
 1579 0174 BB6A     	 ldr r3,[r7,#40]
 1580 0176 93F82830 	 ldrb r3,[r3,#40]
 1581 017a 03F00203 	 and r3,r3,#2
 1582 017e 002B     	 cmp r3,#0
 1583 0180 03D1     	 bne .L106
 829:../Dave/Generated/FREERTOS/timers.c **** 						{
 830:../Dave/Generated/FREERTOS/timers.c **** 							vPortFree( pxTimer );
 1584              	 .loc 1 830 0
 1585 0182 B86A     	 ldr r0,[r7,#40]
 1586 0184 FFF7FEFF 	 bl vPortFree
 1587 0188 08E0     	 b .L107
 1588              	.L106:
 831:../Dave/Generated/FREERTOS/timers.c **** 						}
 832:../Dave/Generated/FREERTOS/timers.c **** 						else
 833:../Dave/Generated/FREERTOS/timers.c **** 						{
 834:../Dave/Generated/FREERTOS/timers.c **** 							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 1589              	 .loc 1 834 0
 1590 018a BB6A     	 ldr r3,[r7,#40]
 1591 018c 93F82830 	 ldrb r3,[r3,#40]
 1592 0190 23F00103 	 bic r3,r3,#1
 1593 0194 DAB2     	 uxtb r2,r3
 1594 0196 BB6A     	 ldr r3,[r7,#40]
 1595 0198 83F82820 	 strb r2,[r3,#40]
 1596              	.L107:
 835:../Dave/Generated/FREERTOS/timers.c **** 						}
 836:../Dave/Generated/FREERTOS/timers.c **** 					}
 837:../Dave/Generated/FREERTOS/timers.c **** 					#else
 838:../Dave/Generated/FREERTOS/timers.c **** 					{
 839:../Dave/Generated/FREERTOS/timers.c **** 						/* If dynamic allocation is not enabled, the memory
 840:../Dave/Generated/FREERTOS/timers.c **** 						could not have been dynamically allocated. So there is
 841:../Dave/Generated/FREERTOS/timers.c **** 						no need to free the memory - just mark the timer as
 842:../Dave/Generated/FREERTOS/timers.c **** 						"not active". */
 843:../Dave/Generated/FREERTOS/timers.c **** 						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 844:../Dave/Generated/FREERTOS/timers.c **** 					}
 845:../Dave/Generated/FREERTOS/timers.c **** 					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 846:../Dave/Generated/FREERTOS/timers.c **** 					break;
 1597              	 .loc 1 846 0
 1598 019c 00E0     	 b .L91
 1599              	.L109:
 847:../Dave/Generated/FREERTOS/timers.c **** 
 848:../Dave/Generated/FREERTOS/timers.c **** 				default	:
 849:../Dave/Generated/FREERTOS/timers.c **** 					/* Don't expect to get here. */
 850:../Dave/Generated/FREERTOS/timers.c **** 					break;
 1600              	 .loc 1 850 0
 1601 019e 00BF     	 nop
 1602              	.L91:
 716:../Dave/Generated/FREERTOS/timers.c **** 	{
 1603              	 .loc 1 716 0
 1604 01a0 074B     	 ldr r3,.L110
 1605 01a2 1A68     	 ldr r2,[r3]
 1606 01a4 3B1D     	 adds r3,r7,#4
 1607 01a6 1046     	 mov r0,r2
 1608 01a8 1946     	 mov r1,r3
 1609 01aa 0022     	 movs r2,#0
 1610 01ac FFF7FEFF 	 bl xQueueReceive
 1611 01b0 0346     	 mov r3,r0
 1612 01b2 002B     	 cmp r3,#0
 1613 01b4 7FF428AF 	 bne .L108
 851:../Dave/Generated/FREERTOS/timers.c **** 			}
 852:../Dave/Generated/FREERTOS/timers.c **** 		}
 853:../Dave/Generated/FREERTOS/timers.c **** 	}
 854:../Dave/Generated/FREERTOS/timers.c **** }
 1614              	 .loc 1 854 0
 1615 01b8 3037     	 adds r7,r7,#48
 1616              	.LCFI81:
 1617              	 .cfi_def_cfa_offset 8
 1618 01ba BD46     	 mov sp,r7
 1619              	.LCFI82:
 1620              	 .cfi_def_cfa_register 13
 1621              	 
 1622 01bc 80BD     	 pop {r7,pc}
 1623              	.L111:
 1624 01be 00BF     	 .align 2
 1625              	.L110:
 1626 01c0 00000000 	 .word xTimerQueue
 1627              	 .cfi_endproc
 1628              	.LFE152:
 1630              	 .section .text.prvSwitchTimerLists,"ax",%progbits
 1631              	 .align 2
 1632              	 .thumb
 1633              	 .thumb_func
 1635              	prvSwitchTimerLists:
 1636              	.LFB153:
 855:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 856:../Dave/Generated/FREERTOS/timers.c **** 
 857:../Dave/Generated/FREERTOS/timers.c **** static void prvSwitchTimerLists( void )
 858:../Dave/Generated/FREERTOS/timers.c **** {
 1637              	 .loc 1 858 0
 1638              	 .cfi_startproc
 1639              	 
 1640              	 
 1641 0000 80B5     	 push {r7,lr}
 1642              	.LCFI83:
 1643              	 .cfi_def_cfa_offset 8
 1644              	 .cfi_offset 7,-8
 1645              	 .cfi_offset 14,-4
 1646 0002 88B0     	 sub sp,sp,#32
 1647              	.LCFI84:
 1648              	 .cfi_def_cfa_offset 40
 1649 0004 02AF     	 add r7,sp,#8
 1650              	.LCFI85:
 1651              	 .cfi_def_cfa 7,32
 859:../Dave/Generated/FREERTOS/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 860:../Dave/Generated/FREERTOS/timers.c **** List_t *pxTemp;
 861:../Dave/Generated/FREERTOS/timers.c **** Timer_t *pxTimer;
 862:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xResult;
 863:../Dave/Generated/FREERTOS/timers.c **** 
 864:../Dave/Generated/FREERTOS/timers.c **** 	/* The tick count has overflowed.  The timer lists must be switched.
 865:../Dave/Generated/FREERTOS/timers.c **** 	If there are any timers still referenced from the current timer list
 866:../Dave/Generated/FREERTOS/timers.c **** 	then they must have expired and should be processed before the lists
 867:../Dave/Generated/FREERTOS/timers.c **** 	are switched. */
 868:../Dave/Generated/FREERTOS/timers.c **** 	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 1652              	 .loc 1 868 0
 1653 0006 47E0     	 b .L113
 1654              	.L116:
 869:../Dave/Generated/FREERTOS/timers.c **** 	{
 870:../Dave/Generated/FREERTOS/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 1655              	 .loc 1 870 0
 1656 0008 2C4B     	 ldr r3,.L117
 1657 000a 1B68     	 ldr r3,[r3]
 1658 000c DB68     	 ldr r3,[r3,#12]
 1659 000e 1B68     	 ldr r3,[r3]
 1660 0010 7B61     	 str r3,[r7,#20]
 871:../Dave/Generated/FREERTOS/timers.c **** 
 872:../Dave/Generated/FREERTOS/timers.c **** 		/* Remove the timer from the list. */
 873:../Dave/Generated/FREERTOS/timers.c **** 		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 v
 1661              	 .loc 1 873 0
 1662 0012 2A4B     	 ldr r3,.L117
 1663 0014 1B68     	 ldr r3,[r3]
 1664 0016 DB68     	 ldr r3,[r3,#12]
 1665 0018 DB68     	 ldr r3,[r3,#12]
 1666 001a 3B61     	 str r3,[r7,#16]
 874:../Dave/Generated/FREERTOS/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 1667              	 .loc 1 874 0
 1668 001c 3B69     	 ldr r3,[r7,#16]
 1669 001e 0433     	 adds r3,r3,#4
 1670 0020 1846     	 mov r0,r3
 1671 0022 FFF7FEFF 	 bl uxListRemove
 875:../Dave/Generated/FREERTOS/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 876:../Dave/Generated/FREERTOS/timers.c **** 
 877:../Dave/Generated/FREERTOS/timers.c **** 		/* Execute its callback, then send a command to restart the timer if
 878:../Dave/Generated/FREERTOS/timers.c **** 		it is an auto-reload timer.  It cannot be restarted here as the lists
 879:../Dave/Generated/FREERTOS/timers.c **** 		have not yet been switched. */
 880:../Dave/Generated/FREERTOS/timers.c **** 		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1672              	 .loc 1 880 0
 1673 0026 3B69     	 ldr r3,[r7,#16]
 1674 0028 1B6A     	 ldr r3,[r3,#32]
 1675 002a 3869     	 ldr r0,[r7,#16]
 1676 002c 9847     	 blx r3
 881:../Dave/Generated/FREERTOS/timers.c **** 
 882:../Dave/Generated/FREERTOS/timers.c **** 		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 1677              	 .loc 1 882 0
 1678 002e 3B69     	 ldr r3,[r7,#16]
 1679 0030 93F82830 	 ldrb r3,[r3,#40]
 1680 0034 03F00403 	 and r3,r3,#4
 1681 0038 002B     	 cmp r3,#0
 1682 003a 2DD0     	 beq .L113
 883:../Dave/Generated/FREERTOS/timers.c **** 		{
 884:../Dave/Generated/FREERTOS/timers.c **** 			/* Calculate the reload value, and if the reload value results in
 885:../Dave/Generated/FREERTOS/timers.c **** 			the timer going into the same timer list then it has already expired
 886:../Dave/Generated/FREERTOS/timers.c **** 			and the timer should be re-inserted into the current list so it is
 887:../Dave/Generated/FREERTOS/timers.c **** 			processed again within this loop.  Otherwise a command should be sent
 888:../Dave/Generated/FREERTOS/timers.c **** 			to restart the timer to ensure it is only inserted into a list after
 889:../Dave/Generated/FREERTOS/timers.c **** 			the lists have been swapped. */
 890:../Dave/Generated/FREERTOS/timers.c **** 			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 1683              	 .loc 1 890 0
 1684 003c 3B69     	 ldr r3,[r7,#16]
 1685 003e 9A69     	 ldr r2,[r3,#24]
 1686 0040 7B69     	 ldr r3,[r7,#20]
 1687 0042 1344     	 add r3,r3,r2
 1688 0044 FB60     	 str r3,[r7,#12]
 891:../Dave/Generated/FREERTOS/timers.c **** 			if( xReloadTime > xNextExpireTime )
 1689              	 .loc 1 891 0
 1690 0046 FA68     	 ldr r2,[r7,#12]
 1691 0048 7B69     	 ldr r3,[r7,#20]
 1692 004a 9A42     	 cmp r2,r3
 1693 004c 0ED9     	 bls .L114
 892:../Dave/Generated/FREERTOS/timers.c **** 			{
 893:../Dave/Generated/FREERTOS/timers.c **** 				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 1694              	 .loc 1 893 0
 1695 004e 3B69     	 ldr r3,[r7,#16]
 1696 0050 FA68     	 ldr r2,[r7,#12]
 1697 0052 5A60     	 str r2,[r3,#4]
 894:../Dave/Generated/FREERTOS/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 1698              	 .loc 1 894 0
 1699 0054 3B69     	 ldr r3,[r7,#16]
 1700 0056 3A69     	 ldr r2,[r7,#16]
 1701 0058 1A61     	 str r2,[r3,#16]
 895:../Dave/Generated/FREERTOS/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 1702              	 .loc 1 895 0
 1703 005a 184B     	 ldr r3,.L117
 1704 005c 1A68     	 ldr r2,[r3]
 1705 005e 3B69     	 ldr r3,[r7,#16]
 1706 0060 0433     	 adds r3,r3,#4
 1707 0062 1046     	 mov r0,r2
 1708 0064 1946     	 mov r1,r3
 1709 0066 FFF7FEFF 	 bl vListInsert
 1710 006a 15E0     	 b .L113
 1711              	.L114:
 896:../Dave/Generated/FREERTOS/timers.c **** 			}
 897:../Dave/Generated/FREERTOS/timers.c **** 			else
 898:../Dave/Generated/FREERTOS/timers.c **** 			{
 899:../Dave/Generated/FREERTOS/timers.c **** 				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tm
 1712              	 .loc 1 899 0
 1713 006c 0023     	 movs r3,#0
 1714 006e 0093     	 str r3,[sp]
 1715 0070 3869     	 ldr r0,[r7,#16]
 1716 0072 0021     	 movs r1,#0
 1717 0074 7A69     	 ldr r2,[r7,#20]
 1718 0076 0023     	 movs r3,#0
 1719 0078 FFF7FEFF 	 bl xTimerGenericCommand
 1720 007c B860     	 str r0,[r7,#8]
 900:../Dave/Generated/FREERTOS/timers.c **** 				configASSERT( xResult );
 1721              	 .loc 1 900 0
 1722 007e BB68     	 ldr r3,[r7,#8]
 1723 0080 002B     	 cmp r3,#0
 1724 0082 09D1     	 bne .L113
 1725              	.LBB62:
 1726              	.LBB63:
 1727              	 .loc 2 195 0 discriminator 1
 1728              	
 1729 0084 4FF0FC03 	 mov r3,#252
 1730 0088 83F31188 	 msr basepri,r3
 1731 008c BFF36F8F 	 isb 
 1732 0090 BFF34F8F 	 dsb 
 1733              	
 1734              	
 1735              	 .thumb
 1736 0094 3B60     	 str r3,[r7]
 1737              	.L115:
 1738              	.LBE63:
 1739              	.LBE62:
 1740              	 .loc 1 900 0 discriminator 1
 1741 0096 FEE7     	 b .L115
 1742              	.L113:
 868:../Dave/Generated/FREERTOS/timers.c **** 	{
 1743              	 .loc 1 868 0
 1744 0098 084B     	 ldr r3,.L117
 1745 009a 1B68     	 ldr r3,[r3]
 1746 009c 1B68     	 ldr r3,[r3]
 1747 009e 002B     	 cmp r3,#0
 1748 00a0 B2D1     	 bne .L116
 901:../Dave/Generated/FREERTOS/timers.c **** 				( void ) xResult;
 902:../Dave/Generated/FREERTOS/timers.c **** 			}
 903:../Dave/Generated/FREERTOS/timers.c **** 		}
 904:../Dave/Generated/FREERTOS/timers.c **** 		else
 905:../Dave/Generated/FREERTOS/timers.c **** 		{
 906:../Dave/Generated/FREERTOS/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 907:../Dave/Generated/FREERTOS/timers.c **** 		}
 908:../Dave/Generated/FREERTOS/timers.c **** 	}
 909:../Dave/Generated/FREERTOS/timers.c **** 
 910:../Dave/Generated/FREERTOS/timers.c **** 	pxTemp = pxCurrentTimerList;
 1749              	 .loc 1 910 0
 1750 00a2 064B     	 ldr r3,.L117
 1751 00a4 1B68     	 ldr r3,[r3]
 1752 00a6 7B60     	 str r3,[r7,#4]
 911:../Dave/Generated/FREERTOS/timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
 1753              	 .loc 1 911 0
 1754 00a8 054B     	 ldr r3,.L117+4
 1755 00aa 1B68     	 ldr r3,[r3]
 1756 00ac 034A     	 ldr r2,.L117
 1757 00ae 1360     	 str r3,[r2]
 912:../Dave/Generated/FREERTOS/timers.c **** 	pxOverflowTimerList = pxTemp;
 1758              	 .loc 1 912 0
 1759 00b0 034A     	 ldr r2,.L117+4
 1760 00b2 7B68     	 ldr r3,[r7,#4]
 1761 00b4 1360     	 str r3,[r2]
 913:../Dave/Generated/FREERTOS/timers.c **** }
 1762              	 .loc 1 913 0
 1763 00b6 1837     	 adds r7,r7,#24
 1764              	.LCFI86:
 1765              	 .cfi_def_cfa_offset 8
 1766 00b8 BD46     	 mov sp,r7
 1767              	.LCFI87:
 1768              	 .cfi_def_cfa_register 13
 1769              	 
 1770 00ba 80BD     	 pop {r7,pc}
 1771              	.L118:
 1772              	 .align 2
 1773              	.L117:
 1774 00bc 00000000 	 .word pxCurrentTimerList
 1775 00c0 00000000 	 .word pxOverflowTimerList
 1776              	 .cfi_endproc
 1777              	.LFE153:
 1779              	 .section .rodata
 1780              	 .align 2
 1781              	.LC1:
 1782 0008 546D7251 	 .ascii "TmrQ\000"
 1782      00
 1783 000d 000000   	 .section .text.prvCheckForValidListAndQueue,"ax",%progbits
 1784              	 .align 2
 1785              	 .thumb
 1786              	 .thumb_func
 1788              	prvCheckForValidListAndQueue:
 1789              	.LFB154:
 914:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 915:../Dave/Generated/FREERTOS/timers.c **** 
 916:../Dave/Generated/FREERTOS/timers.c **** static void prvCheckForValidListAndQueue( void )
 917:../Dave/Generated/FREERTOS/timers.c **** {
 1790              	 .loc 1 917 0
 1791              	 .cfi_startproc
 1792              	 
 1793              	 
 1794 0000 80B5     	 push {r7,lr}
 1795              	.LCFI88:
 1796              	 .cfi_def_cfa_offset 8
 1797              	 .cfi_offset 7,-8
 1798              	 .cfi_offset 14,-4
 1799 0002 00AF     	 add r7,sp,#0
 1800              	.LCFI89:
 1801              	 .cfi_def_cfa_register 7
 918:../Dave/Generated/FREERTOS/timers.c **** 	/* Check that the list from which active timers are referenced, and the
 919:../Dave/Generated/FREERTOS/timers.c **** 	queue used to communicate with the timer service, have been
 920:../Dave/Generated/FREERTOS/timers.c **** 	initialised. */
 921:../Dave/Generated/FREERTOS/timers.c **** 	taskENTER_CRITICAL();
 1802              	 .loc 1 921 0
 1803 0004 FFF7FEFF 	 bl vPortEnterCritical
 922:../Dave/Generated/FREERTOS/timers.c **** 	{
 923:../Dave/Generated/FREERTOS/timers.c **** 		if( xTimerQueue == NULL )
 1804              	 .loc 1 923 0
 1805 0008 124B     	 ldr r3,.L121
 1806 000a 1B68     	 ldr r3,[r3]
 1807 000c 002B     	 cmp r3,#0
 1808 000e 1DD1     	 bne .L120
 924:../Dave/Generated/FREERTOS/timers.c **** 		{
 925:../Dave/Generated/FREERTOS/timers.c **** 			vListInitialise( &xActiveTimerList1 );
 1809              	 .loc 1 925 0
 1810 0010 1148     	 ldr r0,.L121+4
 1811 0012 FFF7FEFF 	 bl vListInitialise
 926:../Dave/Generated/FREERTOS/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 1812              	 .loc 1 926 0
 1813 0016 1148     	 ldr r0,.L121+8
 1814 0018 FFF7FEFF 	 bl vListInitialise
 927:../Dave/Generated/FREERTOS/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 1815              	 .loc 1 927 0
 1816 001c 104B     	 ldr r3,.L121+12
 1817 001e 0E4A     	 ldr r2,.L121+4
 1818 0020 1A60     	 str r2,[r3]
 928:../Dave/Generated/FREERTOS/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 1819              	 .loc 1 928 0
 1820 0022 104B     	 ldr r3,.L121+16
 1821 0024 0D4A     	 ldr r2,.L121+8
 1822 0026 1A60     	 str r2,[r3]
 929:../Dave/Generated/FREERTOS/timers.c **** 
 930:../Dave/Generated/FREERTOS/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 931:../Dave/Generated/FREERTOS/timers.c **** 			{
 932:../Dave/Generated/FREERTOS/timers.c **** 				/* The timer queue is allocated statically in case
 933:../Dave/Generated/FREERTOS/timers.c **** 				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 934:../Dave/Generated/FREERTOS/timers.c **** 				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent ad
 935:../Dave/Generated/FREERTOS/timers.c **** 				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonT
 936:../Dave/Generated/FREERTOS/timers.c **** 
 937:../Dave/Generated/FREERTOS/timers.c **** 				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) siz
 938:../Dave/Generated/FREERTOS/timers.c **** 			}
 939:../Dave/Generated/FREERTOS/timers.c **** 			#else
 940:../Dave/Generated/FREERTOS/timers.c **** 			{
 941:../Dave/Generated/FREERTOS/timers.c **** 				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage
 1823              	 .loc 1 941 0
 1824 0028 0520     	 movs r0,#5
 1825 002a 1021     	 movs r1,#16
 1826 002c 0022     	 movs r2,#0
 1827 002e FFF7FEFF 	 bl xQueueGenericCreate
 1828 0032 0246     	 mov r2,r0
 1829 0034 074B     	 ldr r3,.L121
 1830 0036 1A60     	 str r2,[r3]
 942:../Dave/Generated/FREERTOS/timers.c **** 			}
 943:../Dave/Generated/FREERTOS/timers.c **** 			#endif
 944:../Dave/Generated/FREERTOS/timers.c **** 
 945:../Dave/Generated/FREERTOS/timers.c **** 			#if ( configQUEUE_REGISTRY_SIZE > 0 )
 946:../Dave/Generated/FREERTOS/timers.c **** 			{
 947:../Dave/Generated/FREERTOS/timers.c **** 				if( xTimerQueue != NULL )
 1831              	 .loc 1 947 0
 1832 0038 064B     	 ldr r3,.L121
 1833 003a 1B68     	 ldr r3,[r3]
 1834 003c 002B     	 cmp r3,#0
 1835 003e 05D0     	 beq .L120
 948:../Dave/Generated/FREERTOS/timers.c **** 				{
 949:../Dave/Generated/FREERTOS/timers.c **** 					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 1836              	 .loc 1 949 0
 1837 0040 044B     	 ldr r3,.L121
 1838 0042 1B68     	 ldr r3,[r3]
 1839 0044 1846     	 mov r0,r3
 1840 0046 0849     	 ldr r1,.L121+20
 1841 0048 FFF7FEFF 	 bl vQueueAddToRegistry
 1842              	.L120:
 950:../Dave/Generated/FREERTOS/timers.c **** 				}
 951:../Dave/Generated/FREERTOS/timers.c **** 				else
 952:../Dave/Generated/FREERTOS/timers.c **** 				{
 953:../Dave/Generated/FREERTOS/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 954:../Dave/Generated/FREERTOS/timers.c **** 				}
 955:../Dave/Generated/FREERTOS/timers.c **** 			}
 956:../Dave/Generated/FREERTOS/timers.c **** 			#endif /* configQUEUE_REGISTRY_SIZE */
 957:../Dave/Generated/FREERTOS/timers.c **** 		}
 958:../Dave/Generated/FREERTOS/timers.c **** 		else
 959:../Dave/Generated/FREERTOS/timers.c **** 		{
 960:../Dave/Generated/FREERTOS/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 961:../Dave/Generated/FREERTOS/timers.c **** 		}
 962:../Dave/Generated/FREERTOS/timers.c **** 	}
 963:../Dave/Generated/FREERTOS/timers.c **** 	taskEXIT_CRITICAL();
 1843              	 .loc 1 963 0
 1844 004c FFF7FEFF 	 bl vPortExitCritical
 964:../Dave/Generated/FREERTOS/timers.c **** }
 1845              	 .loc 1 964 0
 1846 0050 80BD     	 pop {r7,pc}
 1847              	.L122:
 1848 0052 00BF     	 .align 2
 1849              	.L121:
 1850 0054 00000000 	 .word xTimerQueue
 1851 0058 00000000 	 .word xActiveTimerList1
 1852 005c 00000000 	 .word xActiveTimerList2
 1853 0060 00000000 	 .word pxCurrentTimerList
 1854 0064 00000000 	 .word pxOverflowTimerList
 1855 0068 08000000 	 .word .LC1
 1856              	 .cfi_endproc
 1857              	.LFE154:
 1859              	 .section .text.xTimerIsTimerActive,"ax",%progbits
 1860              	 .align 2
 1861              	 .global xTimerIsTimerActive
 1862              	 .thumb
 1863              	 .thumb_func
 1865              	xTimerIsTimerActive:
 1866              	.LFB155:
 965:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 966:../Dave/Generated/FREERTOS/timers.c **** 
 967:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
 968:../Dave/Generated/FREERTOS/timers.c **** {
 1867              	 .loc 1 968 0
 1868              	 .cfi_startproc
 1869              	 
 1870              	 
 1871 0000 80B5     	 push {r7,lr}
 1872              	.LCFI90:
 1873              	 .cfi_def_cfa_offset 8
 1874              	 .cfi_offset 7,-8
 1875              	 .cfi_offset 14,-4
 1876 0002 86B0     	 sub sp,sp,#24
 1877              	.LCFI91:
 1878              	 .cfi_def_cfa_offset 32
 1879 0004 00AF     	 add r7,sp,#0
 1880              	.LCFI92:
 1881              	 .cfi_def_cfa_register 7
 1882 0006 7860     	 str r0,[r7,#4]
 969:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xReturn;
 970:../Dave/Generated/FREERTOS/timers.c **** Timer_t *pxTimer = xTimer;
 1883              	 .loc 1 970 0
 1884 0008 7B68     	 ldr r3,[r7,#4]
 1885 000a 3B61     	 str r3,[r7,#16]
 971:../Dave/Generated/FREERTOS/timers.c **** 
 972:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 1886              	 .loc 1 972 0
 1887 000c 7B68     	 ldr r3,[r7,#4]
 1888 000e 002B     	 cmp r3,#0
 1889 0010 09D1     	 bne .L124
 1890              	.LBB64:
 1891              	.LBB65:
 1892              	 .loc 2 195 0 discriminator 1
 1893              	
 1894 0012 4FF0FC03 	 mov r3,#252
 1895 0016 83F31188 	 msr basepri,r3
 1896 001a BFF36F8F 	 isb 
 1897 001e BFF34F8F 	 dsb 
 1898              	
 1899              	
 1900              	 .thumb
 1901 0022 FB60     	 str r3,[r7,#12]
 1902              	.L125:
 1903              	.LBE65:
 1904              	.LBE64:
 1905              	 .loc 1 972 0 discriminator 1
 1906 0024 FEE7     	 b .L125
 1907              	.L124:
 973:../Dave/Generated/FREERTOS/timers.c **** 
 974:../Dave/Generated/FREERTOS/timers.c **** 	/* Is the timer in the list of active timers? */
 975:../Dave/Generated/FREERTOS/timers.c **** 	taskENTER_CRITICAL();
 1908              	 .loc 1 975 0
 1909 0026 FFF7FEFF 	 bl vPortEnterCritical
 976:../Dave/Generated/FREERTOS/timers.c **** 	{
 977:../Dave/Generated/FREERTOS/timers.c **** 		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 1910              	 .loc 1 977 0
 1911 002a 3B69     	 ldr r3,[r7,#16]
 1912 002c 93F82830 	 ldrb r3,[r3,#40]
 1913 0030 03F00103 	 and r3,r3,#1
 1914 0034 002B     	 cmp r3,#0
 1915 0036 02D1     	 bne .L126
 978:../Dave/Generated/FREERTOS/timers.c **** 		{
 979:../Dave/Generated/FREERTOS/timers.c **** 			xReturn = pdFALSE;
 1916              	 .loc 1 979 0
 1917 0038 0023     	 movs r3,#0
 1918 003a 7B61     	 str r3,[r7,#20]
 1919 003c 01E0     	 b .L127
 1920              	.L126:
 980:../Dave/Generated/FREERTOS/timers.c **** 		}
 981:../Dave/Generated/FREERTOS/timers.c **** 		else
 982:../Dave/Generated/FREERTOS/timers.c **** 		{
 983:../Dave/Generated/FREERTOS/timers.c **** 			xReturn = pdTRUE;
 1921              	 .loc 1 983 0
 1922 003e 0123     	 movs r3,#1
 1923 0040 7B61     	 str r3,[r7,#20]
 1924              	.L127:
 984:../Dave/Generated/FREERTOS/timers.c **** 		}
 985:../Dave/Generated/FREERTOS/timers.c **** 	}
 986:../Dave/Generated/FREERTOS/timers.c **** 	taskEXIT_CRITICAL();
 1925              	 .loc 1 986 0
 1926 0042 FFF7FEFF 	 bl vPortExitCritical
 987:../Dave/Generated/FREERTOS/timers.c **** 
 988:../Dave/Generated/FREERTOS/timers.c **** 	return xReturn;
 1927              	 .loc 1 988 0
 1928 0046 7B69     	 ldr r3,[r7,#20]
 989:../Dave/Generated/FREERTOS/timers.c **** } /*lint !e818 Can't be pointer to const due to the typedef. */
 1929              	 .loc 1 989 0
 1930 0048 1846     	 mov r0,r3
 1931 004a 1837     	 adds r7,r7,#24
 1932              	.LCFI93:
 1933              	 .cfi_def_cfa_offset 8
 1934 004c BD46     	 mov sp,r7
 1935              	.LCFI94:
 1936              	 .cfi_def_cfa_register 13
 1937              	 
 1938 004e 80BD     	 pop {r7,pc}
 1939              	 .cfi_endproc
 1940              	.LFE155:
 1942              	 .section .text.pvTimerGetTimerID,"ax",%progbits
 1943              	 .align 2
 1944              	 .global pvTimerGetTimerID
 1945              	 .thumb
 1946              	 .thumb_func
 1948              	pvTimerGetTimerID:
 1949              	.LFB156:
 990:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 991:../Dave/Generated/FREERTOS/timers.c **** 
 992:../Dave/Generated/FREERTOS/timers.c **** void *pvTimerGetTimerID( const TimerHandle_t xTimer )
 993:../Dave/Generated/FREERTOS/timers.c **** {
 1950              	 .loc 1 993 0
 1951              	 .cfi_startproc
 1952              	 
 1953              	 
 1954 0000 80B5     	 push {r7,lr}
 1955              	.LCFI95:
 1956              	 .cfi_def_cfa_offset 8
 1957              	 .cfi_offset 7,-8
 1958              	 .cfi_offset 14,-4
 1959 0002 86B0     	 sub sp,sp,#24
 1960              	.LCFI96:
 1961              	 .cfi_def_cfa_offset 32
 1962 0004 00AF     	 add r7,sp,#0
 1963              	.LCFI97:
 1964              	 .cfi_def_cfa_register 7
 1965 0006 7860     	 str r0,[r7,#4]
 994:../Dave/Generated/FREERTOS/timers.c **** Timer_t * const pxTimer = xTimer;
 1966              	 .loc 1 994 0
 1967 0008 7B68     	 ldr r3,[r7,#4]
 1968 000a 7B61     	 str r3,[r7,#20]
 995:../Dave/Generated/FREERTOS/timers.c **** void *pvReturn;
 996:../Dave/Generated/FREERTOS/timers.c **** 
 997:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 1969              	 .loc 1 997 0
 1970 000c 7B68     	 ldr r3,[r7,#4]
 1971 000e 002B     	 cmp r3,#0
 1972 0010 09D1     	 bne .L130
 1973              	.LBB66:
 1974              	.LBB67:
 1975              	 .loc 2 195 0 discriminator 1
 1976              	
 1977 0012 4FF0FC03 	 mov r3,#252
 1978 0016 83F31188 	 msr basepri,r3
 1979 001a BFF36F8F 	 isb 
 1980 001e BFF34F8F 	 dsb 
 1981              	
 1982              	
 1983              	 .thumb
 1984 0022 FB60     	 str r3,[r7,#12]
 1985              	.L131:
 1986              	.LBE67:
 1987              	.LBE66:
 1988              	 .loc 1 997 0 discriminator 1
 1989 0024 FEE7     	 b .L131
 1990              	.L130:
 998:../Dave/Generated/FREERTOS/timers.c **** 
 999:../Dave/Generated/FREERTOS/timers.c **** 	taskENTER_CRITICAL();
 1991              	 .loc 1 999 0
 1992 0026 FFF7FEFF 	 bl vPortEnterCritical
1000:../Dave/Generated/FREERTOS/timers.c **** 	{
1001:../Dave/Generated/FREERTOS/timers.c **** 		pvReturn = pxTimer->pvTimerID;
 1993              	 .loc 1 1001 0
 1994 002a 7B69     	 ldr r3,[r7,#20]
 1995 002c DB69     	 ldr r3,[r3,#28]
 1996 002e 3B61     	 str r3,[r7,#16]
1002:../Dave/Generated/FREERTOS/timers.c **** 	}
1003:../Dave/Generated/FREERTOS/timers.c **** 	taskEXIT_CRITICAL();
 1997              	 .loc 1 1003 0
 1998 0030 FFF7FEFF 	 bl vPortExitCritical
1004:../Dave/Generated/FREERTOS/timers.c **** 
1005:../Dave/Generated/FREERTOS/timers.c **** 	return pvReturn;
 1999              	 .loc 1 1005 0
 2000 0034 3B69     	 ldr r3,[r7,#16]
1006:../Dave/Generated/FREERTOS/timers.c **** }
 2001              	 .loc 1 1006 0
 2002 0036 1846     	 mov r0,r3
 2003 0038 1837     	 adds r7,r7,#24
 2004              	.LCFI98:
 2005              	 .cfi_def_cfa_offset 8
 2006 003a BD46     	 mov sp,r7
 2007              	.LCFI99:
 2008              	 .cfi_def_cfa_register 13
 2009              	 
 2010 003c 80BD     	 pop {r7,pc}
 2011              	 .cfi_endproc
 2012              	.LFE156:
 2014 003e 00BF     	 .section .text.vTimerSetTimerID,"ax",%progbits
 2015              	 .align 2
 2016              	 .global vTimerSetTimerID
 2017              	 .thumb
 2018              	 .thumb_func
 2020              	vTimerSetTimerID:
 2021              	.LFB157:
1007:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1008:../Dave/Generated/FREERTOS/timers.c **** 
1009:../Dave/Generated/FREERTOS/timers.c **** void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
1010:../Dave/Generated/FREERTOS/timers.c **** {
 2022              	 .loc 1 1010 0
 2023              	 .cfi_startproc
 2024              	 
 2025              	 
 2026 0000 80B5     	 push {r7,lr}
 2027              	.LCFI100:
 2028              	 .cfi_def_cfa_offset 8
 2029              	 .cfi_offset 7,-8
 2030              	 .cfi_offset 14,-4
 2031 0002 84B0     	 sub sp,sp,#16
 2032              	.LCFI101:
 2033              	 .cfi_def_cfa_offset 24
 2034 0004 00AF     	 add r7,sp,#0
 2035              	.LCFI102:
 2036              	 .cfi_def_cfa_register 7
 2037 0006 7860     	 str r0,[r7,#4]
 2038 0008 3960     	 str r1,[r7]
1011:../Dave/Generated/FREERTOS/timers.c **** Timer_t * const pxTimer = xTimer;
 2039              	 .loc 1 1011 0
 2040 000a 7B68     	 ldr r3,[r7,#4]
 2041 000c FB60     	 str r3,[r7,#12]
1012:../Dave/Generated/FREERTOS/timers.c **** 
1013:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 2042              	 .loc 1 1013 0
 2043 000e 7B68     	 ldr r3,[r7,#4]
 2044 0010 002B     	 cmp r3,#0
 2045 0012 09D1     	 bne .L134
 2046              	.LBB68:
 2047              	.LBB69:
 2048              	 .loc 2 195 0 discriminator 1
 2049              	
 2050 0014 4FF0FC03 	 mov r3,#252
 2051 0018 83F31188 	 msr basepri,r3
 2052 001c BFF36F8F 	 isb 
 2053 0020 BFF34F8F 	 dsb 
 2054              	
 2055              	
 2056              	 .thumb
 2057 0024 BB60     	 str r3,[r7,#8]
 2058              	.L135:
 2059              	.LBE69:
 2060              	.LBE68:
 2061              	 .loc 1 1013 0 discriminator 1
 2062 0026 FEE7     	 b .L135
 2063              	.L134:
1014:../Dave/Generated/FREERTOS/timers.c **** 
1015:../Dave/Generated/FREERTOS/timers.c **** 	taskENTER_CRITICAL();
 2064              	 .loc 1 1015 0
 2065 0028 FFF7FEFF 	 bl vPortEnterCritical
1016:../Dave/Generated/FREERTOS/timers.c **** 	{
1017:../Dave/Generated/FREERTOS/timers.c **** 		pxTimer->pvTimerID = pvNewID;
 2066              	 .loc 1 1017 0
 2067 002c FB68     	 ldr r3,[r7,#12]
 2068 002e 3A68     	 ldr r2,[r7]
 2069 0030 DA61     	 str r2,[r3,#28]
1018:../Dave/Generated/FREERTOS/timers.c **** 	}
1019:../Dave/Generated/FREERTOS/timers.c **** 	taskEXIT_CRITICAL();
 2070              	 .loc 1 1019 0
 2071 0032 FFF7FEFF 	 bl vPortExitCritical
1020:../Dave/Generated/FREERTOS/timers.c **** }
 2072              	 .loc 1 1020 0
 2073 0036 1037     	 adds r7,r7,#16
 2074              	.LCFI103:
 2075              	 .cfi_def_cfa_offset 8
 2076 0038 BD46     	 mov sp,r7
 2077              	.LCFI104:
 2078              	 .cfi_def_cfa_register 13
 2079              	 
 2080 003a 80BD     	 pop {r7,pc}
 2081              	 .cfi_endproc
 2082              	.LFE157:
 2084              	 .section .text.xTimerPendFunctionCallFromISR,"ax",%progbits
 2085              	 .align 2
 2086              	 .global xTimerPendFunctionCallFromISR
 2087              	 .thumb
 2088              	 .thumb_func
 2090              	xTimerPendFunctionCallFromISR:
 2091              	.LFB158:
1021:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1022:../Dave/Generated/FREERTOS/timers.c **** 
1023:../Dave/Generated/FREERTOS/timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
1024:../Dave/Generated/FREERTOS/timers.c **** 
1025:../Dave/Generated/FREERTOS/timers.c **** 	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, ui
1026:../Dave/Generated/FREERTOS/timers.c **** 	{
 2092              	 .loc 1 1026 0
 2093              	 .cfi_startproc
 2094              	 
 2095              	 
 2096 0000 80B5     	 push {r7,lr}
 2097              	.LCFI105:
 2098              	 .cfi_def_cfa_offset 8
 2099              	 .cfi_offset 7,-8
 2100              	 .cfi_offset 14,-4
 2101 0002 8AB0     	 sub sp,sp,#40
 2102              	.LCFI106:
 2103              	 .cfi_def_cfa_offset 48
 2104 0004 00AF     	 add r7,sp,#0
 2105              	.LCFI107:
 2106              	 .cfi_def_cfa_register 7
 2107 0006 F860     	 str r0,[r7,#12]
 2108 0008 B960     	 str r1,[r7,#8]
 2109 000a 7A60     	 str r2,[r7,#4]
 2110 000c 3B60     	 str r3,[r7]
1027:../Dave/Generated/FREERTOS/timers.c **** 	DaemonTaskMessage_t xMessage;
1028:../Dave/Generated/FREERTOS/timers.c **** 	BaseType_t xReturn;
1029:../Dave/Generated/FREERTOS/timers.c **** 
1030:../Dave/Generated/FREERTOS/timers.c **** 		/* Complete the message with the function parameters and post it to the
1031:../Dave/Generated/FREERTOS/timers.c **** 		daemon task. */
1032:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 2111              	 .loc 1 1032 0
 2112 000e 6FF00103 	 mvn r3,#1
 2113 0012 7B61     	 str r3,[r7,#20]
1033:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 2114              	 .loc 1 1033 0
 2115 0014 FB68     	 ldr r3,[r7,#12]
 2116 0016 BB61     	 str r3,[r7,#24]
1034:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 2117              	 .loc 1 1034 0
 2118 0018 BB68     	 ldr r3,[r7,#8]
 2119 001a FB61     	 str r3,[r7,#28]
1035:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 2120              	 .loc 1 1035 0
 2121 001c 7B68     	 ldr r3,[r7,#4]
 2122 001e 3B62     	 str r3,[r7,#32]
1036:../Dave/Generated/FREERTOS/timers.c **** 
1037:../Dave/Generated/FREERTOS/timers.c **** 		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 2123              	 .loc 1 1037 0
 2124 0020 074B     	 ldr r3,.L138
 2125 0022 1A68     	 ldr r2,[r3]
 2126 0024 07F11403 	 add r3,r7,#20
 2127 0028 1046     	 mov r0,r2
 2128 002a 1946     	 mov r1,r3
 2129 002c 3A68     	 ldr r2,[r7]
 2130 002e 0023     	 movs r3,#0
 2131 0030 FFF7FEFF 	 bl xQueueGenericSendFromISR
 2132 0034 7862     	 str r0,[r7,#36]
1038:../Dave/Generated/FREERTOS/timers.c **** 
1039:../Dave/Generated/FREERTOS/timers.c **** 		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1040:../Dave/Generated/FREERTOS/timers.c **** 
1041:../Dave/Generated/FREERTOS/timers.c **** 		return xReturn;
 2133              	 .loc 1 1041 0
 2134 0036 7B6A     	 ldr r3,[r7,#36]
1042:../Dave/Generated/FREERTOS/timers.c **** 	}
 2135              	 .loc 1 1042 0
 2136 0038 1846     	 mov r0,r3
 2137 003a 2837     	 adds r7,r7,#40
 2138              	.LCFI108:
 2139              	 .cfi_def_cfa_offset 8
 2140 003c BD46     	 mov sp,r7
 2141              	.LCFI109:
 2142              	 .cfi_def_cfa_register 13
 2143              	 
 2144 003e 80BD     	 pop {r7,pc}
 2145              	.L139:
 2146              	 .align 2
 2147              	.L138:
 2148 0040 00000000 	 .word xTimerQueue
 2149              	 .cfi_endproc
 2150              	.LFE158:
 2152              	 .section .text.xTimerPendFunctionCall,"ax",%progbits
 2153              	 .align 2
 2154              	 .global xTimerPendFunctionCall
 2155              	 .thumb
 2156              	 .thumb_func
 2158              	xTimerPendFunctionCall:
 2159              	.LFB159:
1043:../Dave/Generated/FREERTOS/timers.c **** 
1044:../Dave/Generated/FREERTOS/timers.c **** #endif /* INCLUDE_xTimerPendFunctionCall */
1045:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1046:../Dave/Generated/FREERTOS/timers.c **** 
1047:../Dave/Generated/FREERTOS/timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
1048:../Dave/Generated/FREERTOS/timers.c **** 
1049:../Dave/Generated/FREERTOS/timers.c **** 	BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t 
1050:../Dave/Generated/FREERTOS/timers.c **** 	{
 2160              	 .loc 1 1050 0
 2161              	 .cfi_startproc
 2162              	 
 2163              	 
 2164 0000 80B5     	 push {r7,lr}
 2165              	.LCFI110:
 2166              	 .cfi_def_cfa_offset 8
 2167              	 .cfi_offset 7,-8
 2168              	 .cfi_offset 14,-4
 2169 0002 8AB0     	 sub sp,sp,#40
 2170              	.LCFI111:
 2171              	 .cfi_def_cfa_offset 48
 2172 0004 00AF     	 add r7,sp,#0
 2173              	.LCFI112:
 2174              	 .cfi_def_cfa_register 7
 2175 0006 F860     	 str r0,[r7,#12]
 2176 0008 B960     	 str r1,[r7,#8]
 2177 000a 7A60     	 str r2,[r7,#4]
 2178 000c 3B60     	 str r3,[r7]
1051:../Dave/Generated/FREERTOS/timers.c **** 	DaemonTaskMessage_t xMessage;
1052:../Dave/Generated/FREERTOS/timers.c **** 	BaseType_t xReturn;
1053:../Dave/Generated/FREERTOS/timers.c **** 
1054:../Dave/Generated/FREERTOS/timers.c **** 		/* This function can only be called after a timer has been created or
1055:../Dave/Generated/FREERTOS/timers.c **** 		after the scheduler has been started because, until then, the timer
1056:../Dave/Generated/FREERTOS/timers.c **** 		queue does not exist. */
1057:../Dave/Generated/FREERTOS/timers.c **** 		configASSERT( xTimerQueue );
 2179              	 .loc 1 1057 0
 2180 000e 134B     	 ldr r3,.L144
 2181 0010 1B68     	 ldr r3,[r3]
 2182 0012 002B     	 cmp r3,#0
 2183 0014 09D1     	 bne .L141
 2184              	.LBB70:
 2185              	.LBB71:
 2186              	 .loc 2 195 0 discriminator 1
 2187              	
 2188 0016 4FF0FC03 	 mov r3,#252
 2189 001a 83F31188 	 msr basepri,r3
 2190 001e BFF36F8F 	 isb 
 2191 0022 BFF34F8F 	 dsb 
 2192              	
 2193              	
 2194              	 .thumb
 2195 0026 3B62     	 str r3,[r7,#32]
 2196              	.L142:
 2197              	.LBE71:
 2198              	.LBE70:
 2199              	 .loc 1 1057 0 discriminator 1
 2200 0028 FEE7     	 b .L142
 2201              	.L141:
1058:../Dave/Generated/FREERTOS/timers.c **** 
1059:../Dave/Generated/FREERTOS/timers.c **** 		/* Complete the message with the function parameters and post it to the
1060:../Dave/Generated/FREERTOS/timers.c **** 		daemon task. */
1061:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 2202              	 .loc 1 1061 0
 2203 002a 4FF0FF33 	 mov r3,#-1
 2204 002e 3B61     	 str r3,[r7,#16]
1062:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 2205              	 .loc 1 1062 0
 2206 0030 FB68     	 ldr r3,[r7,#12]
 2207 0032 7B61     	 str r3,[r7,#20]
1063:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 2208              	 .loc 1 1063 0
 2209 0034 BB68     	 ldr r3,[r7,#8]
 2210 0036 BB61     	 str r3,[r7,#24]
1064:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 2211              	 .loc 1 1064 0
 2212 0038 7B68     	 ldr r3,[r7,#4]
 2213 003a FB61     	 str r3,[r7,#28]
1065:../Dave/Generated/FREERTOS/timers.c **** 
1066:../Dave/Generated/FREERTOS/timers.c **** 		xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 2214              	 .loc 1 1066 0
 2215 003c 074B     	 ldr r3,.L144
 2216 003e 1A68     	 ldr r2,[r3]
 2217 0040 07F11003 	 add r3,r7,#16
 2218 0044 1046     	 mov r0,r2
 2219 0046 1946     	 mov r1,r3
 2220 0048 3A68     	 ldr r2,[r7]
 2221 004a 0023     	 movs r3,#0
 2222 004c FFF7FEFF 	 bl xQueueGenericSend
 2223 0050 7862     	 str r0,[r7,#36]
1067:../Dave/Generated/FREERTOS/timers.c **** 
1068:../Dave/Generated/FREERTOS/timers.c **** 		tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1069:../Dave/Generated/FREERTOS/timers.c **** 
1070:../Dave/Generated/FREERTOS/timers.c **** 		return xReturn;
 2224              	 .loc 1 1070 0
 2225 0052 7B6A     	 ldr r3,[r7,#36]
1071:../Dave/Generated/FREERTOS/timers.c **** 	}
 2226              	 .loc 1 1071 0
 2227 0054 1846     	 mov r0,r3
 2228 0056 2837     	 adds r7,r7,#40
 2229              	.LCFI113:
 2230              	 .cfi_def_cfa_offset 8
 2231 0058 BD46     	 mov sp,r7
 2232              	.LCFI114:
 2233              	 .cfi_def_cfa_register 13
 2234              	 
 2235 005a 80BD     	 pop {r7,pc}
 2236              	.L145:
 2237              	 .align 2
 2238              	.L144:
 2239 005c 00000000 	 .word xTimerQueue
 2240              	 .cfi_endproc
 2241              	.LFE159:
 2243              	 .section .text.uxTimerGetTimerNumber,"ax",%progbits
 2244              	 .align 2
 2245              	 .global uxTimerGetTimerNumber
 2246              	 .thumb
 2247              	 .thumb_func
 2249              	uxTimerGetTimerNumber:
 2250              	.LFB160:
1072:../Dave/Generated/FREERTOS/timers.c **** 
1073:../Dave/Generated/FREERTOS/timers.c **** #endif /* INCLUDE_xTimerPendFunctionCall */
1074:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1075:../Dave/Generated/FREERTOS/timers.c **** 
1076:../Dave/Generated/FREERTOS/timers.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1077:../Dave/Generated/FREERTOS/timers.c **** 
1078:../Dave/Generated/FREERTOS/timers.c **** 	UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
1079:../Dave/Generated/FREERTOS/timers.c **** 	{
 2251              	 .loc 1 1079 0
 2252              	 .cfi_startproc
 2253              	 
 2254              	 
 2255              	 
 2256 0000 80B4     	 push {r7}
 2257              	.LCFI115:
 2258              	 .cfi_def_cfa_offset 4
 2259              	 .cfi_offset 7,-4
 2260 0002 83B0     	 sub sp,sp,#12
 2261              	.LCFI116:
 2262              	 .cfi_def_cfa_offset 16
 2263 0004 00AF     	 add r7,sp,#0
 2264              	.LCFI117:
 2265              	 .cfi_def_cfa_register 7
 2266 0006 7860     	 str r0,[r7,#4]
1080:../Dave/Generated/FREERTOS/timers.c **** 		return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 2267              	 .loc 1 1080 0
 2268 0008 7B68     	 ldr r3,[r7,#4]
 2269 000a 5B6A     	 ldr r3,[r3,#36]
1081:../Dave/Generated/FREERTOS/timers.c **** 	}
 2270              	 .loc 1 1081 0
 2271 000c 1846     	 mov r0,r3
 2272 000e 0C37     	 adds r7,r7,#12
 2273              	.LCFI118:
 2274              	 .cfi_def_cfa_offset 4
 2275 0010 BD46     	 mov sp,r7
 2276              	.LCFI119:
 2277              	 .cfi_def_cfa_register 13
 2278              	 
 2279 0012 5DF8047B 	 ldr r7,[sp],#4
 2280              	.LCFI120:
 2281              	 .cfi_restore 7
 2282              	 .cfi_def_cfa_offset 0
 2283 0016 7047     	 bx lr
 2284              	 .cfi_endproc
 2285              	.LFE160:
 2287              	 .section .text.vTimerSetTimerNumber,"ax",%progbits
 2288              	 .align 2
 2289              	 .global vTimerSetTimerNumber
 2290              	 .thumb
 2291              	 .thumb_func
 2293              	vTimerSetTimerNumber:
 2294              	.LFB161:
1082:../Dave/Generated/FREERTOS/timers.c **** 
1083:../Dave/Generated/FREERTOS/timers.c **** #endif /* configUSE_TRACE_FACILITY */
1084:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1085:../Dave/Generated/FREERTOS/timers.c **** 
1086:../Dave/Generated/FREERTOS/timers.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1087:../Dave/Generated/FREERTOS/timers.c **** 
1088:../Dave/Generated/FREERTOS/timers.c **** 	void vTimerSetTimerNumber( TimerHandle_t xTimer, UBaseType_t uxTimerNumber )
1089:../Dave/Generated/FREERTOS/timers.c **** 	{
 2295              	 .loc 1 1089 0
 2296              	 .cfi_startproc
 2297              	 
 2298              	 
 2299              	 
 2300 0000 80B4     	 push {r7}
 2301              	.LCFI121:
 2302              	 .cfi_def_cfa_offset 4
 2303              	 .cfi_offset 7,-4
 2304 0002 83B0     	 sub sp,sp,#12
 2305              	.LCFI122:
 2306              	 .cfi_def_cfa_offset 16
 2307 0004 00AF     	 add r7,sp,#0
 2308              	.LCFI123:
 2309              	 .cfi_def_cfa_register 7
 2310 0006 7860     	 str r0,[r7,#4]
 2311 0008 3960     	 str r1,[r7]
1090:../Dave/Generated/FREERTOS/timers.c **** 		( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 2312              	 .loc 1 1090 0
 2313 000a 7B68     	 ldr r3,[r7,#4]
 2314 000c 3A68     	 ldr r2,[r7]
 2315 000e 5A62     	 str r2,[r3,#36]
1091:../Dave/Generated/FREERTOS/timers.c **** 	}
 2316              	 .loc 1 1091 0
 2317 0010 0C37     	 adds r7,r7,#12
 2318              	.LCFI124:
 2319              	 .cfi_def_cfa_offset 4
 2320 0012 BD46     	 mov sp,r7
 2321              	.LCFI125:
 2322              	 .cfi_def_cfa_register 13
 2323              	 
 2324 0014 5DF8047B 	 ldr r7,[sp],#4
 2325              	.LCFI126:
 2326              	 .cfi_restore 7
 2327              	 .cfi_def_cfa_offset 0
 2328 0018 7047     	 bx lr
 2329              	 .cfi_endproc
 2330              	.LFE161:
 2332 001a 00BF     	 .section .bss.xLastTime.7763,"aw",%nobits
 2333              	 .align 2
 2336              	xLastTime.7763:
 2337 0000 00000000 	 .space 4
 2338              	 .text
 2339              	.Letext0:
 2340              	 .file 3 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2341              	 .file 4 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2342              	 .file 5 "../Dave/Generated/FREERTOS/list.h"
 2343              	 .file 6 "../Dave/Generated/FREERTOS/task.h"
 2344              	 .file 7 "../Dave/Generated/FREERTOS/queue.h"
 2345              	 .file 8 "../Dave/Generated/FREERTOS/timers.h"
 2346              	 .file 9 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/03_VCUJR20/2021_06_17_VCU_jr20_Source/2021_06_17_VCU_jr20_Source/Libraries/CMSIS/Include/cmsis_gcc.h"
 2347              	 .file 10 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/03_VCUJR20/2021_06_17_VCU_jr20_Source/2021_06_17_VCU_jr20_Source/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 timers.c
    {standard input}:20     .bss.xActiveTimerList1:00000000 $d
    {standard input}:23     .bss.xActiveTimerList1:00000000 xActiveTimerList1
    {standard input}:26     .bss.xActiveTimerList2:00000000 $d
    {standard input}:29     .bss.xActiveTimerList2:00000000 xActiveTimerList2
    {standard input}:32     .bss.pxCurrentTimerList:00000000 $d
    {standard input}:35     .bss.pxCurrentTimerList:00000000 pxCurrentTimerList
    {standard input}:38     .bss.pxOverflowTimerList:00000000 $d
    {standard input}:41     .bss.pxOverflowTimerList:00000000 pxOverflowTimerList
    {standard input}:44     .bss.xTimerQueue:00000000 $d
    {standard input}:47     .bss.xTimerQueue:00000000 xTimerQueue
    {standard input}:50     .bss.xTimerTaskHandle:00000000 $d
    {standard input}:53     .bss.xTimerTaskHandle:00000000 xTimerTaskHandle
    {standard input}:56     .rodata:00000000 $d
    {standard input}:60     .text.xTimerCreateTimerTask:00000000 $t
    {standard input}:65     .text.xTimerCreateTimerTask:00000000 xTimerCreateTimerTask
    {standard input}:1788   .text.prvCheckForValidListAndQueue:00000000 prvCheckForValidListAndQueue
    {standard input}:143    .text.xTimerCreateTimerTask:00000054 $d
    {standard input}:929    .text.prvTimerTask:00000000 prvTimerTask
    {standard input}:151    .text.xTimerCreate:00000000 $t
    {standard input}:156    .text.xTimerCreate:00000000 xTimerCreate
    {standard input}:220    .text.prvInitialiseNewTimer:00000000 prvInitialiseNewTimer
    {standard input}:216    .text.prvInitialiseNewTimer:00000000 $t
    {standard input}:315    .text.xTimerGenericCommand:00000000 $t
    {standard input}:320    .text.xTimerGenericCommand:00000000 xTimerGenericCommand
    {standard input}:439    .text.xTimerGenericCommand:000000a0 $d
    {standard input}:444    .text.xTimerGetTimerDaemonTaskHandle:00000000 $t
    {standard input}:449    .text.xTimerGetTimerDaemonTaskHandle:00000000 xTimerGetTimerDaemonTaskHandle
    {standard input}:509    .text.xTimerGetTimerDaemonTaskHandle:00000034 $d
    {standard input}:514    .text.xTimerGetPeriod:00000000 $t
    {standard input}:519    .text.xTimerGetPeriod:00000000 xTimerGetPeriod
    {standard input}:583    .text.vTimerSetReloadMode:00000000 $t
    {standard input}:588    .text.vTimerSetReloadMode:00000000 vTimerSetReloadMode
    {standard input}:670    .text.xTimerGetExpiryTime:00000000 $t
    {standard input}:675    .text.xTimerGetExpiryTime:00000000 xTimerGetExpiryTime
    {standard input}:742    .text.pcTimerGetName:00000000 $t
    {standard input}:747    .text.pcTimerGetName:00000000 pcTimerGetName
    {standard input}:811    .text.prvProcessExpiredTimer:00000000 $t
    {standard input}:815    .text.prvProcessExpiredTimer:00000000 prvProcessExpiredTimer
    {standard input}:1238   .text.prvInsertTimerInActiveList:00000000 prvInsertTimerInActiveList
    {standard input}:920    .text.prvProcessExpiredTimer:00000094 $d
    {standard input}:925    .text.prvTimerTask:00000000 $t
    {standard input}:1091   .text.prvGetNextExpireTime:00000000 prvGetNextExpireTime
    {standard input}:970    .text.prvProcessTimerOrBlockTask:00000000 prvProcessTimerOrBlockTask
    {standard input}:1347   .text.prvProcessReceivedCommands:00000000 prvProcessReceivedCommands
    {standard input}:966    .text.prvProcessTimerOrBlockTask:00000000 $t
    {standard input}:1170   .text.prvSampleTimeNow:00000000 prvSampleTimeNow
    {standard input}:1080   .text.prvProcessTimerOrBlockTask:00000090 $d
    {standard input}:1087   .text.prvGetNextExpireTime:00000000 $t
    {standard input}:1161   .text.prvGetNextExpireTime:00000044 $d
    {standard input}:1166   .text.prvSampleTimeNow:00000000 $t
    {standard input}:1635   .text.prvSwitchTimerLists:00000000 prvSwitchTimerLists
    {standard input}:1229   .text.prvSampleTimeNow:0000003c $d
    {standard input}:2336   .bss.xLastTime.7763:00000000 xLastTime.7763
    {standard input}:1234   .text.prvInsertTimerInActiveList:00000000 $t
    {standard input}:1337   .text.prvInsertTimerInActiveList:0000007c $d
    {standard input}:1343   .text.prvProcessReceivedCommands:00000000 $t
    {standard input}:1441   .text.prvProcessReceivedCommands:00000078 $d
    {standard input}:1451   .text.prvProcessReceivedCommands:000000a0 $t
    {standard input}:1626   .text.prvProcessReceivedCommands:000001c0 $d
    {standard input}:1631   .text.prvSwitchTimerLists:00000000 $t
    {standard input}:1774   .text.prvSwitchTimerLists:000000bc $d
    {standard input}:1784   .text.prvCheckForValidListAndQueue:00000000 $t
    {standard input}:1850   .text.prvCheckForValidListAndQueue:00000054 $d
    {standard input}:1860   .text.xTimerIsTimerActive:00000000 $t
    {standard input}:1865   .text.xTimerIsTimerActive:00000000 xTimerIsTimerActive
    {standard input}:1943   .text.pvTimerGetTimerID:00000000 $t
    {standard input}:1948   .text.pvTimerGetTimerID:00000000 pvTimerGetTimerID
    {standard input}:2015   .text.vTimerSetTimerID:00000000 $t
    {standard input}:2020   .text.vTimerSetTimerID:00000000 vTimerSetTimerID
    {standard input}:2085   .text.xTimerPendFunctionCallFromISR:00000000 $t
    {standard input}:2090   .text.xTimerPendFunctionCallFromISR:00000000 xTimerPendFunctionCallFromISR
    {standard input}:2148   .text.xTimerPendFunctionCallFromISR:00000040 $d
    {standard input}:2153   .text.xTimerPendFunctionCall:00000000 $t
    {standard input}:2158   .text.xTimerPendFunctionCall:00000000 xTimerPendFunctionCall
    {standard input}:2239   .text.xTimerPendFunctionCall:0000005c $d
    {standard input}:2244   .text.uxTimerGetTimerNumber:00000000 $t
    {standard input}:2249   .text.uxTimerGetTimerNumber:00000000 uxTimerGetTimerNumber
    {standard input}:2288   .text.vTimerSetTimerNumber:00000000 $t
    {standard input}:2293   .text.vTimerSetTimerNumber:00000000 vTimerSetTimerNumber
    {standard input}:2333   .bss.xLastTime.7763:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xTaskCreate
pvPortMalloc
vListInitialiseItem
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
vPortEnterCritical
vPortExitCritical
uxListRemove
vTaskSuspendAll
xTaskResumeAll
vQueueWaitForMessageRestricted
xTaskGetTickCount
vListInsert
vPortFree
xQueueReceive
vListInitialise
xQueueGenericCreate
vQueueAddToRegistry
