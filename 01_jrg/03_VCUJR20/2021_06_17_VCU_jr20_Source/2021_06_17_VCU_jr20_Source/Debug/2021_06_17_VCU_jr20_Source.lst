
2021_06_17_VCU_jr20_Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fd54  08000000  0c000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00020000  2**0
                  ALLOC
  2 .data         00000690  20000000  0c00fd54  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000ea0  20000690  0c0103e4  00018690  2**3
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  0001ffc0  2**2
                  ALLOC
  5 .debug_aranges 00001a80  00000000  00000000  00018690  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0003dc69  00000000  00000000  0001a110  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006c3d  00000000  00000000  00057d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001259d  00000000  00000000  0005e9b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000690c  00000000  00000000  00070f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001057d  00000000  00000000  00077860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d00f  00000000  00000000  00087ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000015e0  00000000  00000000  00094dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 000011c4  00000000  00000000  000963cc  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b5 ce 00 08 a5 af 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 87 00 08 b1 02 00 08 00 00 00 00 f1 89 00 08     ................
 800003c:	61 8a 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     a...............
 800004c:	b1 02 00 08 79 d9 00 08 b1 02 00 08 b1 02 00 08     ....y...........
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00fd54 	.word	0x0c00fd54
 800024c:	20000000 	.word	0x20000000
 8000250:	00000690 	.word	0x00000690
 8000254:	0c0103e4 	.word	0x0c0103e4
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00fd54 	.word	0x0c00fd54
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00fd54 	.word	0x0c00fd54
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000690 	.word	0x20000690
 800027c:	00000e9c 	.word	0x00000e9c
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	0800f259 	.word	0x0800f259
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	0800e4c9 	.word	0x0800e4c9

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f00a ff05 	bl	800b0d4 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f00a ff97 	bl	800b1fc <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f00a ff76 	bl	800b1e8 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <FUNC_Brakelight>:
#include "VCU.h"
#include "VCU_private.h"

/* Output and update for atomic system: '<Root>/Brakelight' */
void FUNC_Brakelight(void)
{
 80003a8:	b598      	push	{r3, r4, r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* RelationalOperator: '<S1>/Relational Operator' incorporates:
   *  Constant: '<S1>/Constant'
   */
  VCU_B.RelationalOperator_c = (VCU_B.Add1_m > 5.0);
 80003ac:	4b20      	ldr	r3, [pc, #128]	; (8000430 <FUNC_Brakelight+0x88>)
 80003ae:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80003b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003b6:	2101      	movs	r1, #1
 80003b8:	460c      	mov	r4, r1
 80003ba:	4610      	mov	r0, r2
 80003bc:	4619      	mov	r1, r3
 80003be:	f04f 0200 	mov.w	r2, #0
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <FUNC_Brakelight+0x8c>)
 80003c4:	f00e ff18 	bl	800f1f8 <__aeabi_dcmpgt>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d101      	bne.n	80003d2 <FUNC_Brakelight+0x2a>
 80003ce:	2300      	movs	r3, #0
 80003d0:	461c      	mov	r4, r3
 80003d2:	b2e3      	uxtb	r3, r4
 80003d4:	461a      	mov	r2, r3
 80003d6:	4b16      	ldr	r3, [pc, #88]	; (8000430 <FUNC_Brakelight+0x88>)
 80003d8:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814

  /* RelationalOperator: '<S1>/Relational Operator1' incorporates:
   *  Constant: '<S1>/Constant'
   */
  VCU_B.RelationalOperator1_b = (5.0 < VCU_B.Sensitivity1538mVbar);
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <FUNC_Brakelight+0x88>)
 80003de:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 80003e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003e6:	2101      	movs	r1, #1
 80003e8:	460c      	mov	r4, r1
 80003ea:	4610      	mov	r0, r2
 80003ec:	4619      	mov	r1, r3
 80003ee:	f04f 0200 	mov.w	r2, #0
 80003f2:	4b10      	ldr	r3, [pc, #64]	; (8000434 <FUNC_Brakelight+0x8c>)
 80003f4:	f00e ff00 	bl	800f1f8 <__aeabi_dcmpgt>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d101      	bne.n	8000402 <FUNC_Brakelight+0x5a>
 80003fe:	2300      	movs	r3, #0
 8000400:	461c      	mov	r4, r3
 8000402:	b2e3      	uxtb	r3, r4
 8000404:	461a      	mov	r2, r3
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <FUNC_Brakelight+0x88>)
 8000408:	f883 2815 	strb.w	r2, [r3, #2069]	; 0x815

  /* Logic: '<S1>/Logical Operator' */
  VCU_B.Brakelight = (VCU_B.RelationalOperator_c || VCU_B.RelationalOperator1_b);
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <FUNC_Brakelight+0x88>)
 800040e:	f893 3814 	ldrb.w	r3, [r3, #2068]	; 0x814
 8000412:	2b00      	cmp	r3, #0
 8000414:	d104      	bne.n	8000420 <FUNC_Brakelight+0x78>
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <FUNC_Brakelight+0x88>)
 8000418:	f893 3815 	ldrb.w	r3, [r3, #2069]	; 0x815
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <FUNC_Brakelight+0x7c>
 8000420:	2301      	movs	r3, #1
 8000422:	e000      	b.n	8000426 <FUNC_Brakelight+0x7e>
 8000424:	2300      	movs	r3, #0
 8000426:	b2da      	uxtb	r2, r3
 8000428:	4b01      	ldr	r3, [pc, #4]	; (8000430 <FUNC_Brakelight+0x88>)
 800042a:	f883 2816 	strb.w	r2, [r3, #2070]	; 0x816
}
 800042e:	bd98      	pop	{r3, r4, r7, pc}
 8000430:	200008a8 	.word	0x200008a8
 8000434:	40140000 	.word	0x40140000

08000438 <FUNC_InputData>:
#include "VCU.h"
#include "VCU_private.h"

/* Output and update for atomic system: '<Root>/Input Data' */
void FUNC_InputData(void)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b083      	sub	sp, #12
 800043c:	af02      	add	r7, sp, #8
  /* DataStoreRead: '<S8>/Data Store Read1' */
  VCU_B.DataStoreRead1_d = VCU_DW.VAR_IN_p_brake_F_LSB;
 800043e:	4bc0      	ldr	r3, [pc, #768]	; (8000740 <FUNC_InputData+0x308>)
 8000440:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8000444:	4bbf      	ldr	r3, [pc, #764]	; (8000744 <FUNC_InputData+0x30c>)
 8000446:	f883 2757 	strb.w	r2, [r3, #1879]	; 0x757

  /* DataStoreRead: '<S8>/Data Store Read4' */
  VCU_B.DataStoreRead4_p = VCU_DW.VAR_IN_p_brake_F_MSB;
 800044a:	4bbd      	ldr	r3, [pc, #756]	; (8000740 <FUNC_InputData+0x308>)
 800044c:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
 8000450:	4bbc      	ldr	r3, [pc, #752]	; (8000744 <FUNC_InputData+0x30c>)
 8000452:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758

  /* Gain: '<S16>/Gain' */
  VCU_B.Gain_d = (uint16_T)(VCU_B.DataStoreRead4_p << 7);
 8000456:	4bbb      	ldr	r3, [pc, #748]	; (8000744 <FUNC_InputData+0x30c>)
 8000458:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 800045c:	b29b      	uxth	r3, r3
 800045e:	01db      	lsls	r3, r3, #7
 8000460:	b29a      	uxth	r2, r3
 8000462:	4bb8      	ldr	r3, [pc, #736]	; (8000744 <FUNC_InputData+0x30c>)
 8000464:	f8a3 2726 	strh.w	r2, [r3, #1830]	; 0x726

  /* Sum: '<S16>/Add' */
  VCU_B.Add_a = (uint16_T)((((uint32_T)VCU_B.Gain_d << 1) +
 8000468:	4bb6      	ldr	r3, [pc, #728]	; (8000744 <FUNC_InputData+0x30c>)
 800046a:	f8b3 3726 	ldrh.w	r3, [r3, #1830]	; 0x726
 800046e:	005b      	lsls	r3, r3, #1
    VCU_B.DataStoreRead1_d) >> 1);
 8000470:	4ab4      	ldr	r2, [pc, #720]	; (8000744 <FUNC_InputData+0x30c>)
 8000472:	f892 2757 	ldrb.w	r2, [r2, #1879]	; 0x757

  /* Gain: '<S16>/Gain' */
  VCU_B.Gain_d = (uint16_T)(VCU_B.DataStoreRead4_p << 7);

  /* Sum: '<S16>/Add' */
  VCU_B.Add_a = (uint16_T)((((uint32_T)VCU_B.Gain_d << 1) +
 8000476:	4413      	add	r3, r2
    VCU_B.DataStoreRead1_d) >> 1);
 8000478:	085b      	lsrs	r3, r3, #1

  /* Gain: '<S16>/Gain' */
  VCU_B.Gain_d = (uint16_T)(VCU_B.DataStoreRead4_p << 7);

  /* Sum: '<S16>/Add' */
  VCU_B.Add_a = (uint16_T)((((uint32_T)VCU_B.Gain_d << 1) +
 800047a:	b29a      	uxth	r2, r3
 800047c:	4bb1      	ldr	r3, [pc, #708]	; (8000744 <FUNC_InputData+0x30c>)
 800047e:	f8a3 2728 	strh.w	r2, [r3, #1832]	; 0x728
    VCU_B.DataStoreRead1_d) >> 1);

  /* DataTypeConversion: '<S16>/Data Type Conversion' */
  VCU_B.DataTypeConversion_h = (uint16_T)(VCU_B.Add_a << 1);
 8000482:	4bb0      	ldr	r3, [pc, #704]	; (8000744 <FUNC_InputData+0x30c>)
 8000484:	f8b3 3728 	ldrh.w	r3, [r3, #1832]	; 0x728
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	b29a      	uxth	r2, r3
 800048c:	4bad      	ldr	r3, [pc, #692]	; (8000744 <FUNC_InputData+0x30c>)
 800048e:	f8a3 2714 	strh.w	r2, [r3, #1812]	; 0x714

  /* Gain: '<S15>/Factor' */
  VCU_B.Factor_g = 64173U * VCU_B.DataTypeConversion_h;
 8000492:	4bac      	ldr	r3, [pc, #688]	; (8000744 <FUNC_InputData+0x30c>)
 8000494:	f8b3 3714 	ldrh.w	r3, [r3, #1812]	; 0x714
 8000498:	461a      	mov	r2, r3
 800049a:	f64f 23ad 	movw	r3, #64173	; 0xfaad
 800049e:	fb03 f302 	mul.w	r3, r3, r2
 80004a2:	4aa8      	ldr	r2, [pc, #672]	; (8000744 <FUNC_InputData+0x30c>)
 80004a4:	f8c2 36dc 	str.w	r3, [r2, #1756]	; 0x6dc

  /* Sum: '<S15>/Add1' incorporates:
   *  Constant: '<S15>/Offset'
   */
  VCU_B.Add1_m = (real_T)VCU_B.Factor_g * 2.384185791015625E-7 + -20.0;
 80004a8:	4ba6      	ldr	r3, [pc, #664]	; (8000744 <FUNC_InputData+0x30c>)
 80004aa:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 80004ae:	4618      	mov	r0, r3
 80004b0:	f00e fb9c 	bl	800ebec <__aeabi_ui2d>
 80004b4:	4602      	mov	r2, r0
 80004b6:	460b      	mov	r3, r1
 80004b8:	4610      	mov	r0, r2
 80004ba:	4619      	mov	r1, r3
 80004bc:	f04f 0200 	mov.w	r2, #0
 80004c0:	4ba1      	ldr	r3, [pc, #644]	; (8000748 <FUNC_InputData+0x310>)
 80004c2:	f00e fc09 	bl	800ecd8 <__aeabi_dmul>
 80004c6:	4602      	mov	r2, r0
 80004c8:	460b      	mov	r3, r1
 80004ca:	4610      	mov	r0, r2
 80004cc:	4619      	mov	r1, r3
 80004ce:	f04f 0200 	mov.w	r2, #0
 80004d2:	4b9e      	ldr	r3, [pc, #632]	; (800074c <FUNC_InputData+0x314>)
 80004d4:	f00e fa4c 	bl	800e970 <__aeabi_dsub>
 80004d8:	4602      	mov	r2, r0
 80004da:	460b      	mov	r3, r1
 80004dc:	4999      	ldr	r1, [pc, #612]	; (8000744 <FUNC_InputData+0x30c>)
 80004de:	f501 6198 	add.w	r1, r1, #1216	; 0x4c0
 80004e2:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S8>/Data Store Read2' */
  VCU_B.DataStoreRead2 = VCU_DW.VAR_IN_ABS_BL_switch;
 80004e6:	4b96      	ldr	r3, [pc, #600]	; (8000740 <FUNC_InputData+0x308>)
 80004e8:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
 80004ec:	4b95      	ldr	r3, [pc, #596]	; (8000744 <FUNC_InputData+0x30c>)
 80004ee:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759

  /* DataTypeConversion: '<S8>/Data Type Conversion2' */
  VCU_B.ABS_BL_switch = VCU_B.DataStoreRead2;
 80004f2:	4b94      	ldr	r3, [pc, #592]	; (8000744 <FUNC_InputData+0x30c>)
 80004f4:	f893 3759 	ldrb.w	r3, [r3, #1881]	; 0x759
 80004f8:	4618      	mov	r0, r3
 80004fa:	f00e fb77 	bl	800ebec <__aeabi_ui2d>
 80004fe:	4602      	mov	r2, r0
 8000500:	460b      	mov	r3, r1
 8000502:	4990      	ldr	r1, [pc, #576]	; (8000744 <FUNC_InputData+0x30c>)
 8000504:	f501 6199 	add.w	r1, r1, #1224	; 0x4c8
 8000508:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S8>/Data Store Read3' */
  VCU_B.DataStoreRead3_l = VCU_DW.VAR_IN_ABS_switchstate;
 800050c:	4b8c      	ldr	r3, [pc, #560]	; (8000740 <FUNC_InputData+0x308>)
 800050e:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
 8000512:	4b8c      	ldr	r3, [pc, #560]	; (8000744 <FUNC_InputData+0x30c>)
 8000514:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a

  /* DataTypeConversion: '<S8>/Data Type Conversion' */
  VCU_B.ABS_switchstate = VCU_B.DataStoreRead3_l;
 8000518:	4b8a      	ldr	r3, [pc, #552]	; (8000744 <FUNC_InputData+0x30c>)
 800051a:	f893 375a 	ldrb.w	r3, [r3, #1882]	; 0x75a
 800051e:	4618      	mov	r0, r3
 8000520:	f00e fb64 	bl	800ebec <__aeabi_ui2d>
 8000524:	4602      	mov	r2, r0
 8000526:	460b      	mov	r3, r1
 8000528:	4986      	ldr	r1, [pc, #536]	; (8000744 <FUNC_InputData+0x30c>)
 800052a:	f501 619a 	add.w	r1, r1, #1232	; 0x4d0
 800052e:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S8>/Data Store Read5' */
  VCU_B.DataStoreRead5_d = VCU_DW.VAR_IN_ABS_EBD_Lamp;
 8000532:	4b83      	ldr	r3, [pc, #524]	; (8000740 <FUNC_InputData+0x308>)
 8000534:	f893 2134 	ldrb.w	r2, [r3, #308]	; 0x134
 8000538:	4b82      	ldr	r3, [pc, #520]	; (8000744 <FUNC_InputData+0x30c>)
 800053a:	f883 275b 	strb.w	r2, [r3, #1883]	; 0x75b

  /* DataTypeConversion: '<S8>/Data Type Conversion4' */
  VCU_B.ABS_EBD_Lamp = VCU_B.DataStoreRead5_d;
 800053e:	4b81      	ldr	r3, [pc, #516]	; (8000744 <FUNC_InputData+0x30c>)
 8000540:	f893 375b 	ldrb.w	r3, [r3, #1883]	; 0x75b
 8000544:	4618      	mov	r0, r3
 8000546:	f00e fb51 	bl	800ebec <__aeabi_ui2d>
 800054a:	4602      	mov	r2, r0
 800054c:	460b      	mov	r3, r1
 800054e:	497d      	ldr	r1, [pc, #500]	; (8000744 <FUNC_InputData+0x30c>)
 8000550:	f501 619b 	add.w	r1, r1, #1240	; 0x4d8
 8000554:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S8>/Data Store Read6' */
  VCU_B.DataStoreRead6_j = VCU_DW.VAR_IN_ABS_active;
 8000558:	4b79      	ldr	r3, [pc, #484]	; (8000740 <FUNC_InputData+0x308>)
 800055a:	f893 2135 	ldrb.w	r2, [r3, #309]	; 0x135
 800055e:	4b79      	ldr	r3, [pc, #484]	; (8000744 <FUNC_InputData+0x30c>)
 8000560:	f883 275c 	strb.w	r2, [r3, #1884]	; 0x75c

  /* DataTypeConversion: '<S8>/Data Type Conversion3' */
  VCU_B.ABS_active = VCU_B.DataStoreRead6_j;
 8000564:	4b77      	ldr	r3, [pc, #476]	; (8000744 <FUNC_InputData+0x30c>)
 8000566:	f893 375c 	ldrb.w	r3, [r3, #1884]	; 0x75c
 800056a:	4618      	mov	r0, r3
 800056c:	f00e fb3e 	bl	800ebec <__aeabi_ui2d>
 8000570:	4602      	mov	r2, r0
 8000572:	460b      	mov	r3, r1
 8000574:	4973      	ldr	r1, [pc, #460]	; (8000744 <FUNC_InputData+0x30c>)
 8000576:	f501 619c 	add.w	r1, r1, #1248	; 0x4e0
 800057a:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S8>/Data Store Read7' */
  VCU_B.DataStoreRead7_l = VCU_DW.VAR_IN_ABS_Lamp;
 800057e:	4b70      	ldr	r3, [pc, #448]	; (8000740 <FUNC_InputData+0x308>)
 8000580:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
 8000584:	4b6f      	ldr	r3, [pc, #444]	; (8000744 <FUNC_InputData+0x30c>)
 8000586:	f883 275d 	strb.w	r2, [r3, #1885]	; 0x75d

  /* DataTypeConversion: '<S8>/Data Type Conversion5' */
  VCU_B.ABS_Lamp = VCU_B.DataStoreRead7_l;
 800058a:	4b6e      	ldr	r3, [pc, #440]	; (8000744 <FUNC_InputData+0x30c>)
 800058c:	f893 375d 	ldrb.w	r3, [r3, #1885]	; 0x75d
 8000590:	4618      	mov	r0, r3
 8000592:	f00e fb2b 	bl	800ebec <__aeabi_ui2d>
 8000596:	4602      	mov	r2, r0
 8000598:	460b      	mov	r3, r1
 800059a:	496a      	ldr	r1, [pc, #424]	; (8000744 <FUNC_InputData+0x30c>)
 800059c:	f501 619d 	add.w	r1, r1, #1256	; 0x4e8
 80005a0:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S9>/Data Store Read5' */
  VCU_B.DataStoreRead5_n = VCU_DW.VAR_IN_n_wheel_FL_mpros_LSB;
 80005a4:	4b66      	ldr	r3, [pc, #408]	; (8000740 <FUNC_InputData+0x308>)
 80005a6:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
 80005aa:	4b66      	ldr	r3, [pc, #408]	; (8000744 <FUNC_InputData+0x30c>)
 80005ac:	f883 275e 	strb.w	r2, [r3, #1886]	; 0x75e

  /* DataStoreRead: '<S9>/Data Store Read1' */
  VCU_B.DataStoreRead1_k = VCU_DW.VAR_IN_n_wheel_FL_mpros_MSB;
 80005b0:	4b63      	ldr	r3, [pc, #396]	; (8000740 <FUNC_InputData+0x308>)
 80005b2:	f893 2137 	ldrb.w	r2, [r3, #311]	; 0x137
 80005b6:	4b63      	ldr	r3, [pc, #396]	; (8000744 <FUNC_InputData+0x30c>)
 80005b8:	f883 275f 	strb.w	r2, [r3, #1887]	; 0x75f

  /* Gain: '<S21>/Gain' */
  VCU_B.Gain_i = (uint16_T)(VCU_B.DataStoreRead1_k << 7);
 80005bc:	4b61      	ldr	r3, [pc, #388]	; (8000744 <FUNC_InputData+0x30c>)
 80005be:	f893 375f 	ldrb.w	r3, [r3, #1887]	; 0x75f
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	01db      	lsls	r3, r3, #7
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	4b5e      	ldr	r3, [pc, #376]	; (8000744 <FUNC_InputData+0x30c>)
 80005ca:	f8a3 272a 	strh.w	r2, [r3, #1834]	; 0x72a

  /* Sum: '<S21>/Add' */
  VCU_B.Add_li = (uint16_T)((((uint32_T)VCU_B.Gain_i << 1) +
 80005ce:	4b5d      	ldr	r3, [pc, #372]	; (8000744 <FUNC_InputData+0x30c>)
 80005d0:	f8b3 372a 	ldrh.w	r3, [r3, #1834]	; 0x72a
 80005d4:	005b      	lsls	r3, r3, #1
    VCU_B.DataStoreRead5_n) >> 1);
 80005d6:	4a5b      	ldr	r2, [pc, #364]	; (8000744 <FUNC_InputData+0x30c>)
 80005d8:	f892 275e 	ldrb.w	r2, [r2, #1886]	; 0x75e

  /* Gain: '<S21>/Gain' */
  VCU_B.Gain_i = (uint16_T)(VCU_B.DataStoreRead1_k << 7);

  /* Sum: '<S21>/Add' */
  VCU_B.Add_li = (uint16_T)((((uint32_T)VCU_B.Gain_i << 1) +
 80005dc:	4413      	add	r3, r2
    VCU_B.DataStoreRead5_n) >> 1);
 80005de:	085b      	lsrs	r3, r3, #1

  /* Gain: '<S21>/Gain' */
  VCU_B.Gain_i = (uint16_T)(VCU_B.DataStoreRead1_k << 7);

  /* Sum: '<S21>/Add' */
  VCU_B.Add_li = (uint16_T)((((uint32_T)VCU_B.Gain_i << 1) +
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	4b58      	ldr	r3, [pc, #352]	; (8000744 <FUNC_InputData+0x30c>)
 80005e4:	f8a3 272c 	strh.w	r2, [r3, #1836]	; 0x72c
    VCU_B.DataStoreRead5_n) >> 1);

  /* DataTypeConversion: '<S21>/Data Type Conversion' */
  VCU_B.DataTypeConversion_a = (uint16_T)(VCU_B.Add_li << 1);
 80005e8:	4b56      	ldr	r3, [pc, #344]	; (8000744 <FUNC_InputData+0x30c>)
 80005ea:	f8b3 372c 	ldrh.w	r3, [r3, #1836]	; 0x72c
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	4b54      	ldr	r3, [pc, #336]	; (8000744 <FUNC_InputData+0x30c>)
 80005f4:	f8a3 2716 	strh.w	r2, [r3, #1814]	; 0x716

  /* Gain: '<S17>/Factor' */
  VCU_B.Factor_br = (uint32_T)VCU_B.DataTypeConversion_a << 15;
 80005f8:	4b52      	ldr	r3, [pc, #328]	; (8000744 <FUNC_InputData+0x30c>)
 80005fa:	f8b3 3716 	ldrh.w	r3, [r3, #1814]	; 0x716
 80005fe:	03db      	lsls	r3, r3, #15
 8000600:	4a50      	ldr	r2, [pc, #320]	; (8000744 <FUNC_InputData+0x30c>)
 8000602:	f8c2 36e0 	str.w	r3, [r2, #1760]	; 0x6e0

  /* Sum: '<S17>/Add1' */
  VCU_B.Add1_k = (real_T)VCU_B.Factor_br * 4.76837158203125E-7;
 8000606:	4b4f      	ldr	r3, [pc, #316]	; (8000744 <FUNC_InputData+0x30c>)
 8000608:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 800060c:	4618      	mov	r0, r3
 800060e:	f00e faed 	bl	800ebec <__aeabi_ui2d>
 8000612:	4602      	mov	r2, r0
 8000614:	460b      	mov	r3, r1
 8000616:	4610      	mov	r0, r2
 8000618:	4619      	mov	r1, r3
 800061a:	f04f 0200 	mov.w	r2, #0
 800061e:	4b4c      	ldr	r3, [pc, #304]	; (8000750 <FUNC_InputData+0x318>)
 8000620:	f00e fb5a 	bl	800ecd8 <__aeabi_dmul>
 8000624:	4602      	mov	r2, r0
 8000626:	460b      	mov	r3, r1
 8000628:	4946      	ldr	r1, [pc, #280]	; (8000744 <FUNC_InputData+0x30c>)
 800062a:	f501 619e 	add.w	r1, r1, #1264	; 0x4f0
 800062e:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S9>/Data Store Read2' */
  VCU_B.DataStoreRead2_n = VCU_DW.VAR_IN_n_wheel_FR_mpros_LSB;
 8000632:	4b43      	ldr	r3, [pc, #268]	; (8000740 <FUNC_InputData+0x308>)
 8000634:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
 8000638:	4b42      	ldr	r3, [pc, #264]	; (8000744 <FUNC_InputData+0x30c>)
 800063a:	f883 2760 	strb.w	r2, [r3, #1888]	; 0x760

  /* DataStoreRead: '<S9>/Data Store Read3' */
  VCU_B.DataStoreRead3_k = VCU_DW.VAR_IN_n_wheel_FR_mpros_MSB;
 800063e:	4b40      	ldr	r3, [pc, #256]	; (8000740 <FUNC_InputData+0x308>)
 8000640:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 8000644:	4b3f      	ldr	r3, [pc, #252]	; (8000744 <FUNC_InputData+0x30c>)
 8000646:	f883 2761 	strb.w	r2, [r3, #1889]	; 0x761

  /* Gain: '<S22>/Gain' */
  VCU_B.Gain_e = (uint16_T)(VCU_B.DataStoreRead3_k << 7);
 800064a:	4b3e      	ldr	r3, [pc, #248]	; (8000744 <FUNC_InputData+0x30c>)
 800064c:	f893 3761 	ldrb.w	r3, [r3, #1889]	; 0x761
 8000650:	b29b      	uxth	r3, r3
 8000652:	01db      	lsls	r3, r3, #7
 8000654:	b29a      	uxth	r2, r3
 8000656:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <FUNC_InputData+0x30c>)
 8000658:	f8a3 272e 	strh.w	r2, [r3, #1838]	; 0x72e

  /* Sum: '<S22>/Add' */
  VCU_B.Add_f = (uint16_T)((((uint32_T)VCU_B.Gain_e << 1) +
 800065c:	4b39      	ldr	r3, [pc, #228]	; (8000744 <FUNC_InputData+0x30c>)
 800065e:	f8b3 372e 	ldrh.w	r3, [r3, #1838]	; 0x72e
 8000662:	005b      	lsls	r3, r3, #1
    VCU_B.DataStoreRead2_n) >> 1);
 8000664:	4a37      	ldr	r2, [pc, #220]	; (8000744 <FUNC_InputData+0x30c>)
 8000666:	f892 2760 	ldrb.w	r2, [r2, #1888]	; 0x760

  /* Gain: '<S22>/Gain' */
  VCU_B.Gain_e = (uint16_T)(VCU_B.DataStoreRead3_k << 7);

  /* Sum: '<S22>/Add' */
  VCU_B.Add_f = (uint16_T)((((uint32_T)VCU_B.Gain_e << 1) +
 800066a:	4413      	add	r3, r2
    VCU_B.DataStoreRead2_n) >> 1);
 800066c:	085b      	lsrs	r3, r3, #1

  /* Gain: '<S22>/Gain' */
  VCU_B.Gain_e = (uint16_T)(VCU_B.DataStoreRead3_k << 7);

  /* Sum: '<S22>/Add' */
  VCU_B.Add_f = (uint16_T)((((uint32_T)VCU_B.Gain_e << 1) +
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b34      	ldr	r3, [pc, #208]	; (8000744 <FUNC_InputData+0x30c>)
 8000672:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
    VCU_B.DataStoreRead2_n) >> 1);

  /* DataTypeConversion: '<S22>/Data Type Conversion' */
  VCU_B.DataTypeConversion_l = (uint16_T)(VCU_B.Add_f << 1);
 8000676:	4b33      	ldr	r3, [pc, #204]	; (8000744 <FUNC_InputData+0x30c>)
 8000678:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b30      	ldr	r3, [pc, #192]	; (8000744 <FUNC_InputData+0x30c>)
 8000682:	f8a3 2718 	strh.w	r2, [r3, #1816]	; 0x718

  /* Gain: '<S18>/Factor' */
  VCU_B.Factor_gm = (uint32_T)VCU_B.DataTypeConversion_l << 15;
 8000686:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <FUNC_InputData+0x30c>)
 8000688:	f8b3 3718 	ldrh.w	r3, [r3, #1816]	; 0x718
 800068c:	03db      	lsls	r3, r3, #15
 800068e:	4a2d      	ldr	r2, [pc, #180]	; (8000744 <FUNC_InputData+0x30c>)
 8000690:	f8c2 36e4 	str.w	r3, [r2, #1764]	; 0x6e4

  /* Sum: '<S18>/Add1' */
  VCU_B.Add1_de = (real_T)VCU_B.Factor_gm * 4.76837158203125E-7;
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <FUNC_InputData+0x30c>)
 8000696:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 800069a:	4618      	mov	r0, r3
 800069c:	f00e faa6 	bl	800ebec <__aeabi_ui2d>
 80006a0:	4602      	mov	r2, r0
 80006a2:	460b      	mov	r3, r1
 80006a4:	4610      	mov	r0, r2
 80006a6:	4619      	mov	r1, r3
 80006a8:	f04f 0200 	mov.w	r2, #0
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <FUNC_InputData+0x318>)
 80006ae:	f00e fb13 	bl	800ecd8 <__aeabi_dmul>
 80006b2:	4602      	mov	r2, r0
 80006b4:	460b      	mov	r3, r1
 80006b6:	4923      	ldr	r1, [pc, #140]	; (8000744 <FUNC_InputData+0x30c>)
 80006b8:	f501 619f 	add.w	r1, r1, #1272	; 0x4f8
 80006bc:	e9c1 2300 	strd	r2, r3, [r1]

  /* Sum: '<S9>/Add' */
  VCU_B.Add_l1 = VCU_B.Add1_k + VCU_B.Add1_de;
 80006c0:	4b20      	ldr	r3, [pc, #128]	; (8000744 <FUNC_InputData+0x30c>)
 80006c2:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 80006c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <FUNC_InputData+0x30c>)
 80006cc:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 80006d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006d4:	f00e f94e 	bl	800e974 <__adddf3>
 80006d8:	4602      	mov	r2, r0
 80006da:	460b      	mov	r3, r1
 80006dc:	4919      	ldr	r1, [pc, #100]	; (8000744 <FUNC_InputData+0x30c>)
 80006de:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S9>/Gain4' */
  VCU_B.Gain4 = 0.9 * VCU_B.Add_l1;
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <FUNC_InputData+0x30c>)
 80006e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80006ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006f0:	4610      	mov	r0, r2
 80006f2:	4619      	mov	r1, r3
 80006f4:	a310      	add	r3, pc, #64	; (adr r3, 8000738 <FUNC_InputData+0x300>)
 80006f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006fa:	f00e faed 	bl	800ecd8 <__aeabi_dmul>
 80006fe:	4602      	mov	r2, r0
 8000700:	460b      	mov	r3, r1
 8000702:	4910      	ldr	r1, [pc, #64]	; (8000744 <FUNC_InputData+0x30c>)
 8000704:	f501 61a1 	add.w	r1, r1, #1288	; 0x508
 8000708:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S9>/Data Store Read4' */
  VCU_B.DataStoreRead4_o = VCU_DW.VAR_IN_n_wheel_RL_mpros_LSB;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <FUNC_InputData+0x308>)
 800070e:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <FUNC_InputData+0x30c>)
 8000714:	f883 2762 	strb.w	r2, [r3, #1890]	; 0x762

  /* DataStoreRead: '<S9>/Data Store Read6' */
  VCU_B.DataStoreRead6_f = VCU_DW.VAR_IN_n_wheel_RL_mpros_MSB;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <FUNC_InputData+0x308>)
 800071a:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <FUNC_InputData+0x30c>)
 8000720:	f883 2763 	strb.w	r2, [r3, #1891]	; 0x763

  /* Gain: '<S23>/Gain' */
  VCU_B.Gain_me = (uint16_T)(VCU_B.DataStoreRead6_f << 7);
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <FUNC_InputData+0x30c>)
 8000726:	f893 3763 	ldrb.w	r3, [r3, #1891]	; 0x763
 800072a:	b29b      	uxth	r3, r3
 800072c:	01db      	lsls	r3, r3, #7
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <FUNC_InputData+0x30c>)
 8000732:	f8a3 2732 	strh.w	r2, [r3, #1842]	; 0x732
 8000736:	e00d      	b.n	8000754 <FUNC_InputData+0x31c>
 8000738:	cccccccd 	.word	0xcccccccd
 800073c:	3feccccc 	.word	0x3feccccc
 8000740:	200010c8 	.word	0x200010c8
 8000744:	200008a8 	.word	0x200008a8
 8000748:	3e900000 	.word	0x3e900000
 800074c:	40340000 	.word	0x40340000
 8000750:	3ea00000 	.word	0x3ea00000

  /* Sum: '<S23>/Add' */
  VCU_B.Add_o4 = (uint16_T)((((uint32_T)VCU_B.Gain_me << 1) +
 8000754:	4bc0      	ldr	r3, [pc, #768]	; (8000a58 <FUNC_InputData+0x620>)
 8000756:	f8b3 3732 	ldrh.w	r3, [r3, #1842]	; 0x732
 800075a:	005b      	lsls	r3, r3, #1
    VCU_B.DataStoreRead4_o) >> 1);
 800075c:	4abe      	ldr	r2, [pc, #760]	; (8000a58 <FUNC_InputData+0x620>)
 800075e:	f892 2762 	ldrb.w	r2, [r2, #1890]	; 0x762

  /* Gain: '<S23>/Gain' */
  VCU_B.Gain_me = (uint16_T)(VCU_B.DataStoreRead6_f << 7);

  /* Sum: '<S23>/Add' */
  VCU_B.Add_o4 = (uint16_T)((((uint32_T)VCU_B.Gain_me << 1) +
 8000762:	4413      	add	r3, r2
    VCU_B.DataStoreRead4_o) >> 1);
 8000764:	085b      	lsrs	r3, r3, #1

  /* Gain: '<S23>/Gain' */
  VCU_B.Gain_me = (uint16_T)(VCU_B.DataStoreRead6_f << 7);

  /* Sum: '<S23>/Add' */
  VCU_B.Add_o4 = (uint16_T)((((uint32_T)VCU_B.Gain_me << 1) +
 8000766:	b29a      	uxth	r2, r3
 8000768:	4bbb      	ldr	r3, [pc, #748]	; (8000a58 <FUNC_InputData+0x620>)
 800076a:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734
    VCU_B.DataStoreRead4_o) >> 1);

  /* DataTypeConversion: '<S23>/Data Type Conversion' */
  VCU_B.DataTypeConversion_j = (uint16_T)(VCU_B.Add_o4 << 1);
 800076e:	4bba      	ldr	r3, [pc, #744]	; (8000a58 <FUNC_InputData+0x620>)
 8000770:	f8b3 3734 	ldrh.w	r3, [r3, #1844]	; 0x734
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	b29a      	uxth	r2, r3
 8000778:	4bb7      	ldr	r3, [pc, #732]	; (8000a58 <FUNC_InputData+0x620>)
 800077a:	f8a3 271a 	strh.w	r2, [r3, #1818]	; 0x71a

  /* Gain: '<S19>/Factor' */
  VCU_B.Factor_d5 = (uint32_T)VCU_B.DataTypeConversion_j << 15;
 800077e:	4bb6      	ldr	r3, [pc, #728]	; (8000a58 <FUNC_InputData+0x620>)
 8000780:	f8b3 371a 	ldrh.w	r3, [r3, #1818]	; 0x71a
 8000784:	03db      	lsls	r3, r3, #15
 8000786:	4ab4      	ldr	r2, [pc, #720]	; (8000a58 <FUNC_InputData+0x620>)
 8000788:	f8c2 36e8 	str.w	r3, [r2, #1768]	; 0x6e8

  /* Sum: '<S19>/Add1' */
  VCU_B.Add1_ks = (real_T)VCU_B.Factor_d5 * 4.76837158203125E-7;
 800078c:	4bb2      	ldr	r3, [pc, #712]	; (8000a58 <FUNC_InputData+0x620>)
 800078e:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 8000792:	4618      	mov	r0, r3
 8000794:	f00e fa2a 	bl	800ebec <__aeabi_ui2d>
 8000798:	4602      	mov	r2, r0
 800079a:	460b      	mov	r3, r1
 800079c:	4610      	mov	r0, r2
 800079e:	4619      	mov	r1, r3
 80007a0:	f04f 0200 	mov.w	r2, #0
 80007a4:	4bad      	ldr	r3, [pc, #692]	; (8000a5c <FUNC_InputData+0x624>)
 80007a6:	f00e fa97 	bl	800ecd8 <__aeabi_dmul>
 80007aa:	4602      	mov	r2, r0
 80007ac:	460b      	mov	r3, r1
 80007ae:	49aa      	ldr	r1, [pc, #680]	; (8000a58 <FUNC_InputData+0x620>)
 80007b0:	f501 61a2 	add.w	r1, r1, #1296	; 0x510
 80007b4:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S9>/Data Store Read7' */
  VCU_B.DataStoreRead7_h = VCU_DW.VAR_IN_n_wheel_RR_mpros_LSB;
 80007b8:	4ba9      	ldr	r3, [pc, #676]	; (8000a60 <FUNC_InputData+0x628>)
 80007ba:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 80007be:	4ba6      	ldr	r3, [pc, #664]	; (8000a58 <FUNC_InputData+0x620>)
 80007c0:	f883 2764 	strb.w	r2, [r3, #1892]	; 0x764

  /* DataStoreRead: '<S9>/Data Store Read8' */
  VCU_B.DataStoreRead8_e = VCU_DW.VAR_IN_n_wheel_RR_mpros_MSB;
 80007c4:	4ba6      	ldr	r3, [pc, #664]	; (8000a60 <FUNC_InputData+0x628>)
 80007c6:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 80007ca:	4ba3      	ldr	r3, [pc, #652]	; (8000a58 <FUNC_InputData+0x620>)
 80007cc:	f883 2765 	strb.w	r2, [r3, #1893]	; 0x765

  /* Gain: '<S24>/Gain' */
  VCU_B.Gain_c = (uint16_T)(VCU_B.DataStoreRead8_e << 7);
 80007d0:	4ba1      	ldr	r3, [pc, #644]	; (8000a58 <FUNC_InputData+0x620>)
 80007d2:	f893 3765 	ldrb.w	r3, [r3, #1893]	; 0x765
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	01db      	lsls	r3, r3, #7
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b9e      	ldr	r3, [pc, #632]	; (8000a58 <FUNC_InputData+0x620>)
 80007de:	f8a3 2736 	strh.w	r2, [r3, #1846]	; 0x736

  /* Sum: '<S24>/Add' */
  VCU_B.Add_fb = (uint16_T)((((uint32_T)VCU_B.Gain_c << 1) +
 80007e2:	4b9d      	ldr	r3, [pc, #628]	; (8000a58 <FUNC_InputData+0x620>)
 80007e4:	f8b3 3736 	ldrh.w	r3, [r3, #1846]	; 0x736
 80007e8:	005b      	lsls	r3, r3, #1
    VCU_B.DataStoreRead7_h) >> 1);
 80007ea:	4a9b      	ldr	r2, [pc, #620]	; (8000a58 <FUNC_InputData+0x620>)
 80007ec:	f892 2764 	ldrb.w	r2, [r2, #1892]	; 0x764

  /* Gain: '<S24>/Gain' */
  VCU_B.Gain_c = (uint16_T)(VCU_B.DataStoreRead8_e << 7);

  /* Sum: '<S24>/Add' */
  VCU_B.Add_fb = (uint16_T)((((uint32_T)VCU_B.Gain_c << 1) +
 80007f0:	4413      	add	r3, r2
    VCU_B.DataStoreRead7_h) >> 1);
 80007f2:	085b      	lsrs	r3, r3, #1

  /* Gain: '<S24>/Gain' */
  VCU_B.Gain_c = (uint16_T)(VCU_B.DataStoreRead8_e << 7);

  /* Sum: '<S24>/Add' */
  VCU_B.Add_fb = (uint16_T)((((uint32_T)VCU_B.Gain_c << 1) +
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b98      	ldr	r3, [pc, #608]	; (8000a58 <FUNC_InputData+0x620>)
 80007f8:	f8a3 2738 	strh.w	r2, [r3, #1848]	; 0x738
    VCU_B.DataStoreRead7_h) >> 1);

  /* DataTypeConversion: '<S24>/Data Type Conversion' */
  VCU_B.DataTypeConversion_c = (uint16_T)(VCU_B.Add_fb << 1);
 80007fc:	4b96      	ldr	r3, [pc, #600]	; (8000a58 <FUNC_InputData+0x620>)
 80007fe:	f8b3 3738 	ldrh.w	r3, [r3, #1848]	; 0x738
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	b29a      	uxth	r2, r3
 8000806:	4b94      	ldr	r3, [pc, #592]	; (8000a58 <FUNC_InputData+0x620>)
 8000808:	f8a3 271c 	strh.w	r2, [r3, #1820]	; 0x71c

  /* Gain: '<S20>/Factor' */
  VCU_B.Factor_jp = (uint32_T)VCU_B.DataTypeConversion_c << 15;
 800080c:	4b92      	ldr	r3, [pc, #584]	; (8000a58 <FUNC_InputData+0x620>)
 800080e:	f8b3 371c 	ldrh.w	r3, [r3, #1820]	; 0x71c
 8000812:	03db      	lsls	r3, r3, #15
 8000814:	4a90      	ldr	r2, [pc, #576]	; (8000a58 <FUNC_InputData+0x620>)
 8000816:	f8c2 36ec 	str.w	r3, [r2, #1772]	; 0x6ec

  /* Sum: '<S20>/Add1' */
  VCU_B.Add1_eq = (real_T)VCU_B.Factor_jp * 4.76837158203125E-7;
 800081a:	4b8f      	ldr	r3, [pc, #572]	; (8000a58 <FUNC_InputData+0x620>)
 800081c:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8000820:	4618      	mov	r0, r3
 8000822:	f00e f9e3 	bl	800ebec <__aeabi_ui2d>
 8000826:	4602      	mov	r2, r0
 8000828:	460b      	mov	r3, r1
 800082a:	4610      	mov	r0, r2
 800082c:	4619      	mov	r1, r3
 800082e:	f04f 0200 	mov.w	r2, #0
 8000832:	4b8a      	ldr	r3, [pc, #552]	; (8000a5c <FUNC_InputData+0x624>)
 8000834:	f00e fa50 	bl	800ecd8 <__aeabi_dmul>
 8000838:	4602      	mov	r2, r0
 800083a:	460b      	mov	r3, r1
 800083c:	4986      	ldr	r1, [pc, #536]	; (8000a58 <FUNC_InputData+0x620>)
 800083e:	f501 61a3 	add.w	r1, r1, #1304	; 0x518
 8000842:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S25>/Data Store Read1' */
  VCU_B.DataStoreRead1_g = VCU_DW.VAR_IN_u_TPS;
 8000846:	4b86      	ldr	r3, [pc, #536]	; (8000a60 <FUNC_InputData+0x628>)
 8000848:	f893 213f 	ldrb.w	r2, [r3, #319]	; 0x13f
 800084c:	4b82      	ldr	r3, [pc, #520]	; (8000a58 <FUNC_InputData+0x620>)
 800084e:	f883 2766 	strb.w	r2, [r3, #1894]	; 0x766

  /* DataStoreRead: '<S26>/Data Store Read5' */
  VCU_B.DataStoreRead5_i = VCU_DW.VAR_IN_p_air_22;
 8000852:	4b83      	ldr	r3, [pc, #524]	; (8000a60 <FUNC_InputData+0x628>)
 8000854:	f893 2145 	ldrb.w	r2, [r3, #325]	; 0x145
 8000858:	4b7f      	ldr	r3, [pc, #508]	; (8000a58 <FUNC_InputData+0x620>)
 800085a:	f883 2767 	strb.w	r2, [r3, #1895]	; 0x767

  /* DataTypeConversion: '<S26>/Data Type Conversion' */
  VCU_B.DataTypeConversion = VCU_B.DataStoreRead5_i;
 800085e:	4b7e      	ldr	r3, [pc, #504]	; (8000a58 <FUNC_InputData+0x620>)
 8000860:	f893 3767 	ldrb.w	r3, [r3, #1895]	; 0x767
 8000864:	4618      	mov	r0, r3
 8000866:	f00e f9c1 	bl	800ebec <__aeabi_ui2d>
 800086a:	4602      	mov	r2, r0
 800086c:	460b      	mov	r3, r1
 800086e:	497a      	ldr	r1, [pc, #488]	; (8000a58 <FUNC_InputData+0x620>)
 8000870:	f501 61a4 	add.w	r1, r1, #1312	; 0x520
 8000874:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S26>/Data Store Read4' */
  VCU_B.DataStoreRead4_k = VCU_DW.VAR_IN_p_air_22_des;
 8000878:	4b79      	ldr	r3, [pc, #484]	; (8000a60 <FUNC_InputData+0x628>)
 800087a:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
 800087e:	4b76      	ldr	r3, [pc, #472]	; (8000a58 <FUNC_InputData+0x620>)
 8000880:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768

  /* DataTypeConversion: '<S26>/Data Type Conversion1' */
  VCU_B.DataTypeConversion1 = VCU_B.DataStoreRead4_k;
 8000884:	4b74      	ldr	r3, [pc, #464]	; (8000a58 <FUNC_InputData+0x620>)
 8000886:	f893 3768 	ldrb.w	r3, [r3, #1896]	; 0x768
 800088a:	4618      	mov	r0, r3
 800088c:	f00e f9ae 	bl	800ebec <__aeabi_ui2d>
 8000890:	4602      	mov	r2, r0
 8000892:	460b      	mov	r3, r1
 8000894:	4970      	ldr	r1, [pc, #448]	; (8000a58 <FUNC_InputData+0x620>)
 8000896:	f501 61a5 	add.w	r1, r1, #1320	; 0x528
 800089a:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S26>/Data Store Read1' */
  VCU_B.DataStoreRead1_m = VCU_DW.VAR_IN_n_engine_MSB;
 800089e:	4b70      	ldr	r3, [pc, #448]	; (8000a60 <FUNC_InputData+0x628>)
 80008a0:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
 80008a4:	4b6c      	ldr	r3, [pc, #432]	; (8000a58 <FUNC_InputData+0x620>)
 80008a6:	f883 2769 	strb.w	r2, [r3, #1897]	; 0x769

  /* Gain: '<S29>/Gain' */
  VCU_B.Gain_cv = (uint16_T)(VCU_B.DataStoreRead1_m << 7);
 80008aa:	4b6b      	ldr	r3, [pc, #428]	; (8000a58 <FUNC_InputData+0x620>)
 80008ac:	f893 3769 	ldrb.w	r3, [r3, #1897]	; 0x769
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	01db      	lsls	r3, r3, #7
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b68      	ldr	r3, [pc, #416]	; (8000a58 <FUNC_InputData+0x620>)
 80008b8:	f8a3 273a 	strh.w	r2, [r3, #1850]	; 0x73a

  /* DataStoreRead: '<S26>/Data Store Read2' */
  VCU_B.DataStoreRead2_o = VCU_DW.VAR_IN_n_engine_LSB;
 80008bc:	4b68      	ldr	r3, [pc, #416]	; (8000a60 <FUNC_InputData+0x628>)
 80008be:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
 80008c2:	4b65      	ldr	r3, [pc, #404]	; (8000a58 <FUNC_InputData+0x620>)
 80008c4:	f883 276a 	strb.w	r2, [r3, #1898]	; 0x76a

  /* Sum: '<S29>/Add' */
  VCU_B.Add_d = (uint16_T)((((uint32_T)VCU_B.Gain_cv << 1) +
 80008c8:	4b63      	ldr	r3, [pc, #396]	; (8000a58 <FUNC_InputData+0x620>)
 80008ca:	f8b3 373a 	ldrh.w	r3, [r3, #1850]	; 0x73a
 80008ce:	005b      	lsls	r3, r3, #1
    VCU_B.DataStoreRead2_o) >> 1);
 80008d0:	4a61      	ldr	r2, [pc, #388]	; (8000a58 <FUNC_InputData+0x620>)
 80008d2:	f892 276a 	ldrb.w	r2, [r2, #1898]	; 0x76a

  /* DataStoreRead: '<S26>/Data Store Read2' */
  VCU_B.DataStoreRead2_o = VCU_DW.VAR_IN_n_engine_LSB;

  /* Sum: '<S29>/Add' */
  VCU_B.Add_d = (uint16_T)((((uint32_T)VCU_B.Gain_cv << 1) +
 80008d6:	4413      	add	r3, r2
    VCU_B.DataStoreRead2_o) >> 1);
 80008d8:	085b      	lsrs	r3, r3, #1

  /* DataStoreRead: '<S26>/Data Store Read2' */
  VCU_B.DataStoreRead2_o = VCU_DW.VAR_IN_n_engine_LSB;

  /* Sum: '<S29>/Add' */
  VCU_B.Add_d = (uint16_T)((((uint32_T)VCU_B.Gain_cv << 1) +
 80008da:	b29a      	uxth	r2, r3
 80008dc:	4b5e      	ldr	r3, [pc, #376]	; (8000a58 <FUNC_InputData+0x620>)
 80008de:	f8a3 273c 	strh.w	r2, [r3, #1852]	; 0x73c
    VCU_B.DataStoreRead2_o) >> 1);

  /* DataTypeConversion: '<S29>/Data Type Conversion' */
  VCU_B.DataTypeConversion_o = (uint16_T)(VCU_B.Add_d << 1);
 80008e2:	4b5d      	ldr	r3, [pc, #372]	; (8000a58 <FUNC_InputData+0x620>)
 80008e4:	f8b3 373c 	ldrh.w	r3, [r3, #1852]	; 0x73c
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	4b5a      	ldr	r3, [pc, #360]	; (8000a58 <FUNC_InputData+0x620>)
 80008ee:	f8a3 271e 	strh.w	r2, [r3, #1822]	; 0x71e

  /* DataTypeConversion: '<S26>/Data Type Conversion2' */
  VCU_B.DataTypeConversion2 = VCU_B.DataTypeConversion_o;
 80008f2:	4b59      	ldr	r3, [pc, #356]	; (8000a58 <FUNC_InputData+0x620>)
 80008f4:	f8b3 371e 	ldrh.w	r3, [r3, #1822]	; 0x71e
 80008f8:	4618      	mov	r0, r3
 80008fa:	f00e f977 	bl	800ebec <__aeabi_ui2d>
 80008fe:	4602      	mov	r2, r0
 8000900:	460b      	mov	r3, r1
 8000902:	4955      	ldr	r1, [pc, #340]	; (8000a58 <FUNC_InputData+0x620>)
 8000904:	f501 61a6 	add.w	r1, r1, #1328	; 0x530
 8000908:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S26>/Data Store Read' */
  VCU_B.DataStoreRead_h = VCU_DW.VAR_IN_gear;
 800090c:	4b54      	ldr	r3, [pc, #336]	; (8000a60 <FUNC_InputData+0x628>)
 800090e:	f893 2140 	ldrb.w	r2, [r3, #320]	; 0x140
 8000912:	4b51      	ldr	r3, [pc, #324]	; (8000a58 <FUNC_InputData+0x620>)
 8000914:	f883 276b 	strb.w	r2, [r3, #1899]	; 0x76b

  /* ArithShift: '<S26>/Shift Arithmetic' */
  VCU_B.ShiftArithmetic = (uint8_T)((uint32_T)VCU_B.DataStoreRead_h >> 3);
 8000918:	4b4f      	ldr	r3, [pc, #316]	; (8000a58 <FUNC_InputData+0x620>)
 800091a:	f893 376b 	ldrb.w	r3, [r3, #1899]	; 0x76b
 800091e:	08db      	lsrs	r3, r3, #3
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b4d      	ldr	r3, [pc, #308]	; (8000a58 <FUNC_InputData+0x620>)
 8000924:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c

  /* DataTypeConversion: '<S26>/Data Type Conversion3' */
  VCU_B.DataTypeConversion3 = VCU_B.ShiftArithmetic;
 8000928:	4b4b      	ldr	r3, [pc, #300]	; (8000a58 <FUNC_InputData+0x620>)
 800092a:	f893 376c 	ldrb.w	r3, [r3, #1900]	; 0x76c
 800092e:	4618      	mov	r0, r3
 8000930:	f00e f95c 	bl	800ebec <__aeabi_ui2d>
 8000934:	4602      	mov	r2, r0
 8000936:	460b      	mov	r3, r1
 8000938:	4947      	ldr	r1, [pc, #284]	; (8000a58 <FUNC_InputData+0x620>)
 800093a:	f501 61a7 	add.w	r1, r1, #1336	; 0x538
 800093e:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S26>/Data Store Read3' */
  VCU_B.DataStoreRead3_a = VCU_DW.VAR_IN_TPS_Plausi;
 8000942:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <FUNC_InputData+0x628>)
 8000944:	f893 2143 	ldrb.w	r2, [r3, #323]	; 0x143
 8000948:	4b43      	ldr	r3, [pc, #268]	; (8000a58 <FUNC_InputData+0x620>)
 800094a:	f883 276d 	strb.w	r2, [r3, #1901]	; 0x76d

  /* DataStoreRead: '<S27>/Data Store Read1' */
  VCU_B.DataStoreRead1_g5 = VCU_DW.VAR_IN_t_water_engine;
 800094e:	4b44      	ldr	r3, [pc, #272]	; (8000a60 <FUNC_InputData+0x628>)
 8000950:	f893 2146 	ldrb.w	r2, [r3, #326]	; 0x146
 8000954:	4b40      	ldr	r3, [pc, #256]	; (8000a58 <FUNC_InputData+0x620>)
 8000956:	f883 276e 	strb.w	r2, [r3, #1902]	; 0x76e

  /* Gain: '<S30>/Factor' */
  VCU_B.Factor_ba = (uint16_T)(VCU_B.DataStoreRead1_g5 << 7);
 800095a:	4b3f      	ldr	r3, [pc, #252]	; (8000a58 <FUNC_InputData+0x620>)
 800095c:	f893 376e 	ldrb.w	r3, [r3, #1902]	; 0x76e
 8000960:	b29b      	uxth	r3, r3
 8000962:	01db      	lsls	r3, r3, #7
 8000964:	b29a      	uxth	r2, r3
 8000966:	4b3c      	ldr	r3, [pc, #240]	; (8000a58 <FUNC_InputData+0x620>)
 8000968:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720

  /* Sum: '<S30>/Add1' incorporates:
   *  Constant: '<S30>/Offset'
   */
  VCU_B.Add1_iu = (real_T)VCU_B.Factor_ba * 0.0078125 + -50.0;
 800096c:	4b3a      	ldr	r3, [pc, #232]	; (8000a58 <FUNC_InputData+0x620>)
 800096e:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8000972:	4618      	mov	r0, r3
 8000974:	f00e f93a 	bl	800ebec <__aeabi_ui2d>
 8000978:	4602      	mov	r2, r0
 800097a:	460b      	mov	r3, r1
 800097c:	4610      	mov	r0, r2
 800097e:	4619      	mov	r1, r3
 8000980:	f04f 0200 	mov.w	r2, #0
 8000984:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000988:	f00e f9a6 	bl	800ecd8 <__aeabi_dmul>
 800098c:	4602      	mov	r2, r0
 800098e:	460b      	mov	r3, r1
 8000990:	4610      	mov	r0, r2
 8000992:	4619      	mov	r1, r3
 8000994:	f04f 0200 	mov.w	r2, #0
 8000998:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <FUNC_InputData+0x62c>)
 800099a:	f00d ffe9 	bl	800e970 <__aeabi_dsub>
 800099e:	4602      	mov	r2, r0
 80009a0:	460b      	mov	r3, r1
 80009a2:	492d      	ldr	r1, [pc, #180]	; (8000a58 <FUNC_InputData+0x620>)
 80009a4:	f501 61a8 	add.w	r1, r1, #1344	; 0x540
 80009a8:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S11>/Data Store Read1' */
  VCU_B.TeleFansDC_h = VCU_DW.VAR_IN_TeleFansDC;
 80009ac:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <FUNC_InputData+0x628>)
 80009ae:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <FUNC_InputData+0x620>)
 80009b4:	f883 276f 	strb.w	r2, [r3, #1903]	; 0x76f

  /* DataTypeConversion: '<S11>/Data Type Conversion1' */
  VCU_B.TeleFansDC = VCU_B.TeleFansDC_h;
 80009b8:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <FUNC_InputData+0x620>)
 80009ba:	f893 376f 	ldrb.w	r3, [r3, #1903]	; 0x76f
 80009be:	4618      	mov	r0, r3
 80009c0:	f00e f914 	bl	800ebec <__aeabi_ui2d>
 80009c4:	4602      	mov	r2, r0
 80009c6:	460b      	mov	r3, r1
 80009c8:	4923      	ldr	r1, [pc, #140]	; (8000a58 <FUNC_InputData+0x620>)
 80009ca:	f501 61a9 	add.w	r1, r1, #1352	; 0x548
 80009ce:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S31>/Factor' */
  VCU_B.Factor_kk = 0.01 * VCU_B.TeleFansDC;
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <FUNC_InputData+0x620>)
 80009d4:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 80009d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009dc:	4610      	mov	r0, r2
 80009de:	4619      	mov	r1, r3
 80009e0:	a31b      	add	r3, pc, #108	; (adr r3, 8000a50 <FUNC_InputData+0x618>)
 80009e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009e6:	f00e f977 	bl	800ecd8 <__aeabi_dmul>
 80009ea:	4602      	mov	r2, r0
 80009ec:	460b      	mov	r3, r1
 80009ee:	491a      	ldr	r1, [pc, #104]	; (8000a58 <FUNC_InputData+0x620>)
 80009f0:	f501 61aa 	add.w	r1, r1, #1360	; 0x550
 80009f4:	e9c1 2300 	strd	r2, r3, [r1]

  /* Sum: '<S31>/Add1' */
  VCU_B.Add1_ik = VCU_B.Factor_kk;
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <FUNC_InputData+0x620>)
 80009fa:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 80009fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a02:	4915      	ldr	r1, [pc, #84]	; (8000a58 <FUNC_InputData+0x620>)
 8000a04:	f501 61ab 	add.w	r1, r1, #1368	; 0x558
 8000a08:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S11>/Data Store Read8' */
  VCU_B.TeleActiveBit_p = VCU_DW.VAR_IN_TeleActiveBit;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <FUNC_InputData+0x628>)
 8000a0e:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <FUNC_InputData+0x620>)
 8000a14:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770

  /* DataTypeConversion: '<S11>/Data Type Conversion' */
  VCU_B.TeleActiveBit = VCU_B.TeleActiveBit_p;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <FUNC_InputData+0x620>)
 8000a1a:	f893 3770 	ldrb.w	r3, [r3, #1904]	; 0x770
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f00e f8e4 	bl	800ebec <__aeabi_ui2d>
 8000a24:	4602      	mov	r2, r0
 8000a26:	460b      	mov	r3, r1
 8000a28:	490b      	ldr	r1, [pc, #44]	; (8000a58 <FUNC_InputData+0x620>)
 8000a2a:	f501 61ac 	add.w	r1, r1, #1376	; 0x560
 8000a2e:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S12>/Data Store Read1' */
  VCU_B.DataStoreRead1_f = VCU_DW.VAR_IN_g_yaw_ABS_MSB;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <FUNC_InputData+0x628>)
 8000a34:	f893 2149 	ldrb.w	r2, [r3, #329]	; 0x149
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <FUNC_InputData+0x620>)
 8000a3a:	f883 2771 	strb.w	r2, [r3, #1905]	; 0x771

  /* DataStoreRead: '<S12>/Data Store Read3' */
  VCU_B.DataStoreRead3_o = VCU_DW.VAR_IN_g_yaw_ABS_LSB;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <FUNC_InputData+0x628>)
 8000a40:	f893 214b 	ldrb.w	r2, [r3, #331]	; 0x14b
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <FUNC_InputData+0x620>)
 8000a46:	f883 2772 	strb.w	r2, [r3, #1906]	; 0x772
 8000a4a:	e00d      	b.n	8000a68 <FUNC_InputData+0x630>
 8000a4c:	f3af 8000 	nop.w
 8000a50:	47ae147b 	.word	0x47ae147b
 8000a54:	3f847ae1 	.word	0x3f847ae1
 8000a58:	200008a8 	.word	0x200008a8
 8000a5c:	3ea00000 	.word	0x3ea00000
 8000a60:	200010c8 	.word	0x200010c8
 8000a64:	40490000 	.word	0x40490000

  /* DataStoreRead: '<S12>/Data Store Read2' */
  VCU_B.DataStoreRead2_h = VCU_DW.VAR_IN_g_long_ABS_MSB;
 8000a68:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <FUNC_InputData+0x6f0>)
 8000a6a:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
 8000a6e:	4b2f      	ldr	r3, [pc, #188]	; (8000b2c <FUNC_InputData+0x6f4>)
 8000a70:	f883 2773 	strb.w	r2, [r3, #1907]	; 0x773

  /* DataStoreRead: '<S12>/Data Store Read4' */
  VCU_B.DataStoreRead4_l = VCU_DW.VAR_IN_g_long_ABS_LSB;
 8000a74:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <FUNC_InputData+0x6f0>)
 8000a76:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 8000a7a:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <FUNC_InputData+0x6f4>)
 8000a7c:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774

  /* DataStoreRead: '<S13>/Data Store Read9' */
  VCU_B.DataStoreRead9 = VCU_DW.VAR_IN_x_clutch_STW;
 8000a80:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <FUNC_InputData+0x6f0>)
 8000a82:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8000a86:	4929      	ldr	r1, [pc, #164]	; (8000b2c <FUNC_InputData+0x6f4>)
 8000a88:	f501 61ad 	add.w	r1, r1, #1384	; 0x568
 8000a8c:	e9c1 2300 	strd	r2, r3, [r1]

  /* Saturate: '<S13>/Saturation' incorporates:
   *  Gain: '<S13>/mV//V'
   */
  VCU_B.mVV = 0.001 * VCU_B.DataStoreRead9;
 8000a90:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <FUNC_InputData+0x6f4>)
 8000a92:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8000a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	a320      	add	r3, pc, #128	; (adr r3, 8000b20 <FUNC_InputData+0x6e8>)
 8000aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aa4:	f00e f918 	bl	800ecd8 <__aeabi_dmul>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	460b      	mov	r3, r1
 8000aac:	491f      	ldr	r1, [pc, #124]	; (8000b2c <FUNC_InputData+0x6f4>)
 8000aae:	f501 61ae 	add.w	r1, r1, #1392	; 0x570
 8000ab2:	e9c1 2300 	strd	r2, r3, [r1]
  if (VCU_B.mVV > 5.0) {
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <FUNC_InputData+0x6f4>)
 8000ab8:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8000abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ac0:	4610      	mov	r0, r2
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f04f 0200 	mov.w	r2, #0
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <FUNC_InputData+0x6f8>)
 8000aca:	f00e fb95 	bl	800f1f8 <__aeabi_dcmpgt>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d008      	beq.n	8000ae6 <FUNC_InputData+0x6ae>
    VCU_B.Saturation_e = 5.0;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <FUNC_InputData+0x6f4>)
 8000ad6:	f503 61af 	add.w	r1, r3, #1400	; 0x578
 8000ada:	f04f 0200 	mov.w	r2, #0
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <FUNC_InputData+0x6f8>)
 8000ae0:	e9c1 2300 	strd	r2, r3, [r1]
 8000ae4:	e030      	b.n	8000b48 <FUNC_InputData+0x710>
  } else if (VCU_B.mVV < 0.0) {
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <FUNC_InputData+0x6f4>)
 8000ae8:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8000aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000af0:	4610      	mov	r0, r2
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 0200 	mov.w	r2, #0
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	f00e fb5e 	bl	800f1bc <__aeabi_dcmplt>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d016      	beq.n	8000b34 <FUNC_InputData+0x6fc>
    VCU_B.Saturation_e = 0.0;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <FUNC_InputData+0x6f4>)
 8000b08:	f503 61af 	add.w	r1, r3, #1400	; 0x578
 8000b0c:	f04f 0200 	mov.w	r2, #0
 8000b10:	f04f 0300 	mov.w	r3, #0
 8000b14:	e9c1 2300 	strd	r2, r3, [r1]
 8000b18:	e016      	b.n	8000b48 <FUNC_InputData+0x710>
 8000b1a:	bf00      	nop
 8000b1c:	f3af 8000 	nop.w
 8000b20:	d2f1a9fc 	.word	0xd2f1a9fc
 8000b24:	3f50624d 	.word	0x3f50624d
 8000b28:	200010c8 	.word	0x200010c8
 8000b2c:	200008a8 	.word	0x200008a8
 8000b30:	40140000 	.word	0x40140000
  } else {
    VCU_B.Saturation_e = VCU_B.mVV;
 8000b34:	4bb4      	ldr	r3, [pc, #720]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000b36:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8000b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b3e:	49b2      	ldr	r1, [pc, #712]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000b40:	f501 61af 	add.w	r1, r1, #1400	; 0x578
 8000b44:	e9c1 2300 	strd	r2, r3, [r1]
  }

  /* End of Saturate: '<S13>/Saturation' */

  /* Lookup_n-D: '<S13>/1-D Lookup Table' */
  VCU_B.x_clutch_STW = look1_binlxpw(VCU_B.Saturation_e,
 8000b48:	4baf      	ldr	r3, [pc, #700]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000b4a:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8000b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b52:	2101      	movs	r1, #1
 8000b54:	9100      	str	r1, [sp, #0]
 8000b56:	4610      	mov	r0, r2
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4aac      	ldr	r2, [pc, #688]	; (8000e0c <FUNC_InputData+0x9d4>)
 8000b5c:	4bac      	ldr	r3, [pc, #688]	; (8000e10 <FUNC_InputData+0x9d8>)
 8000b5e:	f005 f8d7 	bl	8005d10 <look1_binlxpw>
 8000b62:	4602      	mov	r2, r0
 8000b64:	460b      	mov	r3, r1
 8000b66:	49a8      	ldr	r1, [pc, #672]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000b68:	f501 61b0 	add.w	r1, r1, #1408	; 0x580
 8000b6c:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.uDLookupTable_bp01Data, VCU_ConstP.pooled6, 1U);

  /* DataStoreRead: '<S13>/Data Store Read10' */
  VCU_B.DataStoreRead10_b = VCU_DW.VAR_IN_STW_mue_tyre;
 8000b70:	4ba8      	ldr	r3, [pc, #672]	; (8000e14 <FUNC_InputData+0x9dc>)
 8000b72:	f893 214f 	ldrb.w	r2, [r3, #335]	; 0x14f
 8000b76:	4ba4      	ldr	r3, [pc, #656]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000b78:	f883 2775 	strb.w	r2, [r3, #1909]	; 0x775

  /* Gain: '<S36>/Factor' */
  VCU_B.Factor_oq = (uint16_T)(164U * VCU_B.DataStoreRead10_b);
 8000b7c:	4ba2      	ldr	r3, [pc, #648]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000b7e:	f893 3775 	ldrb.w	r3, [r3, #1909]	; 0x775
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	461a      	mov	r2, r3
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	441a      	add	r2, r3
 8000b8a:	00d2      	lsls	r2, r2, #3
 8000b8c:	4413      	add	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	4b9d      	ldr	r3, [pc, #628]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000b94:	f8a3 2722 	strh.w	r2, [r3, #1826]	; 0x722

  /* Sum: '<S36>/Add1' */
  VCU_B.Add1_f1 = (real_T)VCU_B.Factor_oq * 6.103515625E-5;
 8000b98:	4b9b      	ldr	r3, [pc, #620]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000b9a:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f00e f824 	bl	800ebec <__aeabi_ui2d>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	4610      	mov	r0, r2
 8000baa:	4619      	mov	r1, r3
 8000bac:	f04f 0200 	mov.w	r2, #0
 8000bb0:	4b99      	ldr	r3, [pc, #612]	; (8000e18 <FUNC_InputData+0x9e0>)
 8000bb2:	f00e f891 	bl	800ecd8 <__aeabi_dmul>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	460b      	mov	r3, r1
 8000bba:	4993      	ldr	r1, [pc, #588]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000bbc:	f501 61b1 	add.w	r1, r1, #1416	; 0x588
 8000bc0:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S13>/Data Store Read' */
  VCU_B.DataStoreRead_c = VCU_DW.VAR_IN_STW_shift_up_request;
 8000bc4:	4b93      	ldr	r3, [pc, #588]	; (8000e14 <FUNC_InputData+0x9dc>)
 8000bc6:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
 8000bca:	4b8f      	ldr	r3, [pc, #572]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000bcc:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776

  /* DataTypeConversion: '<S13>/Data Type Conversion' */
  VCU_B.STW_shift_up_request = VCU_B.DataStoreRead_c;
 8000bd0:	4b8d      	ldr	r3, [pc, #564]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000bd2:	f893 3776 	ldrb.w	r3, [r3, #1910]	; 0x776
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f00e f808 	bl	800ebec <__aeabi_ui2d>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	460b      	mov	r3, r1
 8000be0:	4989      	ldr	r1, [pc, #548]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000be2:	f501 61b2 	add.w	r1, r1, #1424	; 0x590
 8000be6:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S13>/Data Store Read1' */
  VCU_B.DataStoreRead1_j = VCU_DW.VAR_IN_STW_shift_down_request;
 8000bea:	4b8a      	ldr	r3, [pc, #552]	; (8000e14 <FUNC_InputData+0x9dc>)
 8000bec:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
 8000bf0:	4b85      	ldr	r3, [pc, #532]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000bf2:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777

  /* DataTypeConversion: '<S13>/Data Type Conversion1' */
  VCU_B.STW_shift_down_request = VCU_B.DataStoreRead1_j;
 8000bf6:	4b84      	ldr	r3, [pc, #528]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000bf8:	f893 3777 	ldrb.w	r3, [r3, #1911]	; 0x777
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f00d fff5 	bl	800ebec <__aeabi_ui2d>
 8000c02:	4602      	mov	r2, r0
 8000c04:	460b      	mov	r3, r1
 8000c06:	4980      	ldr	r1, [pc, #512]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000c08:	f501 61b3 	add.w	r1, r1, #1432	; 0x598
 8000c0c:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S13>/Data Store Read2' */
  VCU_B.DataStoreRead2_i = VCU_DW.VAR_IN_STW_transmission_mode;
 8000c10:	4b80      	ldr	r3, [pc, #512]	; (8000e14 <FUNC_InputData+0x9dc>)
 8000c12:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
 8000c16:	4b7c      	ldr	r3, [pc, #496]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000c18:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778

  /* DataTypeConversion: '<S13>/Data Type Conversion6' */
  VCU_B.STW_transmission_mode = VCU_B.DataStoreRead2_i;
 8000c1c:	4b7a      	ldr	r3, [pc, #488]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000c1e:	f893 3778 	ldrb.w	r3, [r3, #1912]	; 0x778
 8000c22:	4618      	mov	r0, r3
 8000c24:	f00d ffe2 	bl	800ebec <__aeabi_ui2d>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	4976      	ldr	r1, [pc, #472]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000c2e:	f501 61b4 	add.w	r1, r1, #1440	; 0x5a0
 8000c32:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S14>/Data Store Read9' */
  VCU_B.DataStoreRead9_m = VCU_DW.VAR_IN_x_RH_F;
 8000c36:	4b77      	ldr	r3, [pc, #476]	; (8000e14 <FUNC_InputData+0x9dc>)
 8000c38:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8000c3c:	4972      	ldr	r1, [pc, #456]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000c3e:	f501 61b5 	add.w	r1, r1, #1448	; 0x5a8
 8000c42:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V19' */
  VCU_B.mVV19 = 0.001 * VCU_B.DataStoreRead9_m;
 8000c46:	4b70      	ldr	r3, [pc, #448]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000c48:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 8000c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c50:	4610      	mov	r0, r2
 8000c52:	4619      	mov	r1, r3
 8000c54:	a36a      	add	r3, pc, #424	; (adr r3, 8000e00 <FUNC_InputData+0x9c8>)
 8000c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c5a:	f00e f83d 	bl	800ecd8 <__aeabi_dmul>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	460b      	mov	r3, r1
 8000c62:	4969      	ldr	r1, [pc, #420]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000c64:	f501 61b6 	add.w	r1, r1, #1456	; 0x5b0
 8000c68:	e9c1 2300 	strd	r2, r3, [r1]

  /* Lookup_n-D: '<S14>/1-D Lookup Table4' */
  VCU_B.x_RH_F = look1_binlxpw(VCU_B.mVV19, VCU_ConstP.pooled8,
 8000c6c:	4b66      	ldr	r3, [pc, #408]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000c6e:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8000c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c76:	2101      	movs	r1, #1
 8000c78:	9100      	str	r1, [sp, #0]
 8000c7a:	4610      	mov	r0, r2
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4a67      	ldr	r2, [pc, #412]	; (8000e1c <FUNC_InputData+0x9e4>)
 8000c80:	4b67      	ldr	r3, [pc, #412]	; (8000e20 <FUNC_InputData+0x9e8>)
 8000c82:	f005 f845 	bl	8005d10 <look1_binlxpw>
 8000c86:	4602      	mov	r2, r0
 8000c88:	460b      	mov	r3, r1
 8000c8a:	495f      	ldr	r1, [pc, #380]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000c8c:	f501 61b7 	add.w	r1, r1, #1464	; 0x5b8
 8000c90:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.pooled7, 1U);

  /* DataStoreRead: '<S14>/Data Store Read10' */
  VCU_B.DataStoreRead10 = VCU_DW.VAR_IN_x_RH_RL;
 8000c94:	4b5f      	ldr	r3, [pc, #380]	; (8000e14 <FUNC_InputData+0x9dc>)
 8000c96:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000c9a:	495b      	ldr	r1, [pc, #364]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000c9c:	f501 61b8 	add.w	r1, r1, #1472	; 0x5c0
 8000ca0:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V20' */
  VCU_B.mVV20 = 0.001 * VCU_B.DataStoreRead10;
 8000ca4:	4b58      	ldr	r3, [pc, #352]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000ca6:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8000caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cae:	4610      	mov	r0, r2
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	a353      	add	r3, pc, #332	; (adr r3, 8000e00 <FUNC_InputData+0x9c8>)
 8000cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb8:	f00e f80e 	bl	800ecd8 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4951      	ldr	r1, [pc, #324]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000cc2:	f501 61b9 	add.w	r1, r1, #1480	; 0x5c8
 8000cc6:	e9c1 2300 	strd	r2, r3, [r1]

  /* Lookup_n-D: '<S14>/1-D Lookup Table5' */
  VCU_B.x_RH_RL = look1_binlxpw(VCU_B.mVV20, VCU_ConstP.uDLookupTable5_bp01Data,
 8000cca:	4b4f      	ldr	r3, [pc, #316]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000ccc:	f503 63b9 	add.w	r3, r3, #1480	; 0x5c8
 8000cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	9100      	str	r1, [sp, #0]
 8000cd8:	4610      	mov	r0, r2
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4a51      	ldr	r2, [pc, #324]	; (8000e24 <FUNC_InputData+0x9ec>)
 8000cde:	4b50      	ldr	r3, [pc, #320]	; (8000e20 <FUNC_InputData+0x9e8>)
 8000ce0:	f005 f816 	bl	8005d10 <look1_binlxpw>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4947      	ldr	r1, [pc, #284]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000cea:	f501 61ba 	add.w	r1, r1, #1488	; 0x5d0
 8000cee:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.pooled7, 1U);

  /* DataStoreRead: '<S14>/Data Store Read11' */
  VCU_B.DataStoreRead11 = VCU_DW.VAR_IN_x_RH_RR;
 8000cf2:	4b48      	ldr	r3, [pc, #288]	; (8000e14 <FUNC_InputData+0x9dc>)
 8000cf4:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8000cf8:	4943      	ldr	r1, [pc, #268]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000cfa:	f501 61bb 	add.w	r1, r1, #1496	; 0x5d8
 8000cfe:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V21' */
  VCU_B.mVV21 = 0.001 * VCU_B.DataStoreRead11;
 8000d02:	4b41      	ldr	r3, [pc, #260]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000d04:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8000d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	4619      	mov	r1, r3
 8000d10:	a33b      	add	r3, pc, #236	; (adr r3, 8000e00 <FUNC_InputData+0x9c8>)
 8000d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d16:	f00d ffdf 	bl	800ecd8 <__aeabi_dmul>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	493a      	ldr	r1, [pc, #232]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000d20:	f501 61bc 	add.w	r1, r1, #1504	; 0x5e0
 8000d24:	e9c1 2300 	strd	r2, r3, [r1]

  /* Lookup_n-D: '<S14>/1-D Lookup Table6' */
  VCU_B.x_RH_RR = look1_binlxpw(VCU_B.mVV21, VCU_ConstP.pooled8,
 8000d28:	4b37      	ldr	r3, [pc, #220]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000d2a:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
 8000d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d32:	2101      	movs	r1, #1
 8000d34:	9100      	str	r1, [sp, #0]
 8000d36:	4610      	mov	r0, r2
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4a38      	ldr	r2, [pc, #224]	; (8000e1c <FUNC_InputData+0x9e4>)
 8000d3c:	4b38      	ldr	r3, [pc, #224]	; (8000e20 <FUNC_InputData+0x9e8>)
 8000d3e:	f004 ffe7 	bl	8005d10 <look1_binlxpw>
 8000d42:	4602      	mov	r2, r0
 8000d44:	460b      	mov	r3, r1
 8000d46:	4930      	ldr	r1, [pc, #192]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000d48:	f501 61bd 	add.w	r1, r1, #1512	; 0x5e8
 8000d4c:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.pooled7, 1U);

  /* DataStoreRead: '<S14>/Data Store Read2' */
  VCU_B.DataStoreRead2_k = VCU_DW.VAR_IN_p_pneum;
 8000d50:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <FUNC_InputData+0x9dc>)
 8000d52:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
 8000d56:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000d58:	f883 2779 	strb.w	r2, [r3, #1913]	; 0x779

  /* Gain: '<S14>/CAN to bar' */
  VCU_B.p_pneum = (uint16_T)(164U * VCU_B.DataStoreRead2_k);
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000d5e:	f893 3779 	ldrb.w	r3, [r3, #1913]	; 0x779
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	461a      	mov	r2, r3
 8000d66:	0092      	lsls	r2, r2, #2
 8000d68:	441a      	add	r2, r3
 8000d6a:	00d2      	lsls	r2, r2, #3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000d74:	f8a3 2724 	strh.w	r2, [r3, #1828]	; 0x724

  /* DataStoreRead: '<S14>/Data Store Read3' */
  VCU_B.DataStoreRead3 = VCU_DW.VAR_IN_x_clutch;
 8000d78:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <FUNC_InputData+0x9dc>)
 8000d7a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8000d7e:	4922      	ldr	r1, [pc, #136]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000d80:	f501 61be 	add.w	r1, r1, #1520	; 0x5f0
 8000d84:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V14' */
  VCU_B.mVV14 = 0.001 * VCU_B.DataStoreRead3;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000d8a:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8000d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d92:	4610      	mov	r0, r2
 8000d94:	4619      	mov	r1, r3
 8000d96:	a31a      	add	r3, pc, #104	; (adr r3, 8000e00 <FUNC_InputData+0x9c8>)
 8000d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9c:	f00d ff9c 	bl	800ecd8 <__aeabi_dmul>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4918      	ldr	r1, [pc, #96]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000da6:	f501 61bf 	add.w	r1, r1, #1528	; 0x5f8
 8000daa:	e9c1 2300 	strd	r2, r3, [r1]

  /* Saturate: '<S14>/Saturation' incorporates:
   *  Lookup_n-D: '<S14>/Clutch_Pos2'
   */
  VCU_B.x_clutch = look1_binlxpw(VCU_B.mVV14, VCU_ConstP.Clutch_Pos2_bp01Data,
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000db0:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 8000db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db8:	2101      	movs	r1, #1
 8000dba:	9100      	str	r1, [sp, #0]
 8000dbc:	4610      	mov	r0, r2
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <FUNC_InputData+0x9f0>)
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <FUNC_InputData+0x9d8>)
 8000dc4:	f004 ffa4 	bl	8005d10 <look1_binlxpw>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	490e      	ldr	r1, [pc, #56]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000dce:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
 8000dd2:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.pooled6, 1U);
  if (VCU_B.x_clutch > 25.0) {
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000dd8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	f04f 0200 	mov.w	r2, #0
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <FUNC_InputData+0x9f4>)
 8000dea:	f00e fa05 	bl	800f1f8 <__aeabi_dcmpgt>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d021      	beq.n	8000e38 <FUNC_InputData+0xa00>
    VCU_B.x_clutch_b = 25.0;
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000df6:	f503 61c1 	add.w	r1, r3, #1544	; 0x608
 8000dfa:	f04f 0200 	mov.w	r2, #0
 8000dfe:	e017      	b.n	8000e30 <FUNC_InputData+0x9f8>
 8000e00:	d2f1a9fc 	.word	0xd2f1a9fc
 8000e04:	3f50624d 	.word	0x3f50624d
 8000e08:	200008a8 	.word	0x200008a8
 8000e0c:	0800f468 	.word	0x0800f468
 8000e10:	0800f458 	.word	0x0800f458
 8000e14:	200010c8 	.word	0x200010c8
 8000e18:	3f100000 	.word	0x3f100000
 8000e1c:	0800f488 	.word	0x0800f488
 8000e20:	0800f478 	.word	0x0800f478
 8000e24:	0800f498 	.word	0x0800f498
 8000e28:	0800f4a8 	.word	0x0800f4a8
 8000e2c:	40390000 	.word	0x40390000
 8000e30:	4ba7      	ldr	r3, [pc, #668]	; (80010d0 <FUNC_InputData+0xc98>)
 8000e32:	e9c1 2300 	strd	r2, r3, [r1]
 8000e36:	e023      	b.n	8000e80 <FUNC_InputData+0xa48>
  } else if (VCU_B.x_clutch < 0.0) {
 8000e38:	4ba6      	ldr	r3, [pc, #664]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000e3a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e42:	4610      	mov	r0, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	f00e f9b5 	bl	800f1bc <__aeabi_dcmplt>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d009      	beq.n	8000e6c <FUNC_InputData+0xa34>
    VCU_B.x_clutch_b = 0.0;
 8000e58:	4b9e      	ldr	r3, [pc, #632]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000e5a:	f503 61c1 	add.w	r1, r3, #1544	; 0x608
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	e9c1 2300 	strd	r2, r3, [r1]
 8000e6a:	e009      	b.n	8000e80 <FUNC_InputData+0xa48>
  } else {
    VCU_B.x_clutch_b = VCU_B.x_clutch;
 8000e6c:	4b99      	ldr	r3, [pc, #612]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000e6e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	4997      	ldr	r1, [pc, #604]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000e78:	f501 61c1 	add.w	r1, r1, #1544	; 0x608
 8000e7c:	e9c1 2300 	strd	r2, r3, [r1]
  }

  /* End of Saturate: '<S14>/Saturation' */

  /* DataStoreRead: '<S14>/Data Store Read' */
  VCU_B.DataStoreRead = VCU_DW.VAR_IN_Fans_dash_bit;
 8000e80:	4b95      	ldr	r3, [pc, #596]	; (80010d8 <FUNC_InputData+0xca0>)
 8000e82:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000e86:	4993      	ldr	r1, [pc, #588]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000e88:	f501 61c2 	add.w	r1, r1, #1552	; 0x610
 8000e8c:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataTypeConversion: '<S14>/Data Type Conversion10' */
  VCU_B.Fans_dash_bit = (VCU_B.DataStoreRead != 0.0);
 8000e90:	4b90      	ldr	r3, [pc, #576]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000e92:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8000e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	460c      	mov	r4, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	f00e f97d 	bl	800f1a8 <__aeabi_dcmpeq>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <FUNC_InputData+0xa80>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	461c      	mov	r4, r3
 8000eb8:	b2e3      	uxtb	r3, r4
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b85      	ldr	r3, [pc, #532]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000ebe:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812

  /* DataStoreRead: '<S14>/Data Store Read1' */
  VCU_B.DataStoreRead1 = VCU_DW.VAR_IN_p_brake_R;
 8000ec2:	4b85      	ldr	r3, [pc, #532]	; (80010d8 <FUNC_InputData+0xca0>)
 8000ec4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000ec8:	4982      	ldr	r1, [pc, #520]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000eca:	f501 61c3 	add.w	r1, r1, #1560	; 0x618
 8000ece:	e9c1 2300 	strd	r2, r3, [r1]

  /* Saturate: '<S41>/Saturation' incorporates:
   *  Gain: '<S14>/mV//V11'
   */
  VCU_B.mVV11 = 0.001 * VCU_B.DataStoreRead1;
 8000ed2:	4b80      	ldr	r3, [pc, #512]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000ed4:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	4610      	mov	r0, r2
 8000ede:	4619      	mov	r1, r3
 8000ee0:	a373      	add	r3, pc, #460	; (adr r3, 80010b0 <FUNC_InputData+0xc78>)
 8000ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee6:	f00d fef7 	bl	800ecd8 <__aeabi_dmul>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4979      	ldr	r1, [pc, #484]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000ef0:	f501 61c4 	add.w	r1, r1, #1568	; 0x620
 8000ef4:	e9c1 2300 	strd	r2, r3, [r1]
  if (VCU_B.mVV11 > 4.8) {
 8000ef8:	4b76      	ldr	r3, [pc, #472]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000efa:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	4610      	mov	r0, r2
 8000f04:	4619      	mov	r1, r3
 8000f06:	a36c      	add	r3, pc, #432	; (adr r3, 80010b8 <FUNC_InputData+0xc80>)
 8000f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0c:	f00e f974 	bl	800f1f8 <__aeabi_dcmpgt>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d008      	beq.n	8000f28 <FUNC_InputData+0xaf0>
    VCU_B.Saturation_i = 4.8;
 8000f16:	4b6f      	ldr	r3, [pc, #444]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000f18:	f503 61c5 	add.w	r1, r3, #1576	; 0x628
 8000f1c:	a366      	add	r3, pc, #408	; (adr r3, 80010b8 <FUNC_InputData+0xc80>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	e9c1 2300 	strd	r2, r3, [r1]
 8000f26:	e021      	b.n	8000f6c <FUNC_InputData+0xb34>
  } else if (VCU_B.mVV11 < 0.5) {
 8000f28:	4b6a      	ldr	r3, [pc, #424]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000f2a:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8000f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f32:	4610      	mov	r0, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	4b68      	ldr	r3, [pc, #416]	; (80010dc <FUNC_InputData+0xca4>)
 8000f3c:	f00e f93e 	bl	800f1bc <__aeabi_dcmplt>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d008      	beq.n	8000f58 <FUNC_InputData+0xb20>
    VCU_B.Saturation_i = 0.5;
 8000f46:	4b63      	ldr	r3, [pc, #396]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000f48:	f503 61c5 	add.w	r1, r3, #1576	; 0x628
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	4b62      	ldr	r3, [pc, #392]	; (80010dc <FUNC_InputData+0xca4>)
 8000f52:	e9c1 2300 	strd	r2, r3, [r1]
 8000f56:	e009      	b.n	8000f6c <FUNC_InputData+0xb34>
  } else {
    VCU_B.Saturation_i = VCU_B.mVV11;
 8000f58:	4b5e      	ldr	r3, [pc, #376]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000f5a:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	495c      	ldr	r1, [pc, #368]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000f64:	f501 61c5 	add.w	r1, r1, #1576	; 0x628
 8000f68:	e9c1 2300 	strd	r2, r3, [r1]
  /* End of Saturate: '<S41>/Saturation' */

  /* Sum: '<S41>/Add' incorporates:
   *  Constant: '<S41>/Offset'
   */
  VCU_B.Add_ps = VCU_B.Saturation_i - 0.5;
 8000f6c:	4b59      	ldr	r3, [pc, #356]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000f6e:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 8000f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b57      	ldr	r3, [pc, #348]	; (80010dc <FUNC_InputData+0xca4>)
 8000f80:	f00d fcf6 	bl	800e970 <__aeabi_dsub>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4952      	ldr	r1, [pc, #328]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000f8a:	f501 61c6 	add.w	r1, r1, #1584	; 0x630
 8000f8e:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S41>/Sensitivity: 15,38 mV // bar' */
  VCU_B.Sensitivity1538mVbar = 65.019505851755525 * VCU_B.Add_ps;
 8000f92:	4b50      	ldr	r3, [pc, #320]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000f94:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	a347      	add	r3, pc, #284	; (adr r3, 80010c0 <FUNC_InputData+0xc88>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	f00d fe97 	bl	800ecd8 <__aeabi_dmul>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4949      	ldr	r1, [pc, #292]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000fb0:	f501 61c7 	add.w	r1, r1, #1592	; 0x638
 8000fb4:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S14>/Data Store Read12' */
  VCU_B.DataStoreRead12 = VCU_DW.VAR_IN_U_Bat;
 8000fb8:	4b47      	ldr	r3, [pc, #284]	; (80010d8 <FUNC_InputData+0xca0>)
 8000fba:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8000fbe:	4945      	ldr	r1, [pc, #276]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000fc0:	f501 61c8 	add.w	r1, r1, #1600	; 0x640
 8000fc4:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V13' */
  VCU_B.U_Bat = 0.001 * VCU_B.DataStoreRead12;
 8000fc8:	4b42      	ldr	r3, [pc, #264]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000fca:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	a336      	add	r3, pc, #216	; (adr r3, 80010b0 <FUNC_InputData+0xc78>)
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	f00d fe7c 	bl	800ecd8 <__aeabi_dmul>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	493b      	ldr	r1, [pc, #236]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000fe6:	f501 61c9 	add.w	r1, r1, #1608	; 0x648
 8000fea:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreRead: '<S14>/Data Store Read4' */
  VCU_B.DataStoreRead4 = VCU_DW.VAR_IN_f_FL;
 8000fee:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <FUNC_InputData+0xca0>)
 8000ff0:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8000ff4:	4937      	ldr	r1, [pc, #220]	; (80010d4 <FUNC_InputData+0xc9c>)
 8000ff6:	f501 61ca 	add.w	r1, r1, #1616	; 0x650
 8000ffa:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V15' */
  VCU_B.mVV15 = 0.001 * VCU_B.DataStoreRead4;
 8000ffe:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <FUNC_InputData+0xc9c>)
 8001000:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	a328      	add	r3, pc, #160	; (adr r3, 80010b0 <FUNC_InputData+0xc78>)
 800100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001012:	f00d fe61 	bl	800ecd8 <__aeabi_dmul>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	492e      	ldr	r1, [pc, #184]	; (80010d4 <FUNC_InputData+0xc9c>)
 800101c:	f501 61cb 	add.w	r1, r1, #1624	; 0x658
 8001020:	e9c1 2300 	strd	r2, r3, [r1]

  /* Saturate: '<S42>/Saturation1' incorporates:
   *  Lookup_n-D: '<S42>/1-D Lookup Table1'
   */
  VCU_B.uDLookupTable1 = look1_binlxpw(VCU_B.mVV15,
 8001024:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <FUNC_InputData+0xc9c>)
 8001026:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	2101      	movs	r1, #1
 8001030:	9100      	str	r1, [sp, #0]
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	4a2a      	ldr	r2, [pc, #168]	; (80010e0 <FUNC_InputData+0xca8>)
 8001038:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <FUNC_InputData+0xcac>)
 800103a:	f004 fe69 	bl	8005d10 <look1_binlxpw>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4924      	ldr	r1, [pc, #144]	; (80010d4 <FUNC_InputData+0xc9c>)
 8001044:	f501 61cc 	add.w	r1, r1, #1632	; 0x660
 8001048:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.uDLookupTable1_bp01Data, VCU_ConstP.uDLookupTable1_tableData, 1U);
  if (VCU_B.uDLookupTable1 > 9000.0) {
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <FUNC_InputData+0xc9c>)
 800104e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	a31b      	add	r3, pc, #108	; (adr r3, 80010c8 <FUNC_InputData+0xc90>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f00e f8ca 	bl	800f1f8 <__aeabi_dcmpgt>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d008      	beq.n	800107c <FUNC_InputData+0xc44>
    VCU_B.Saturation1_e = 9000.0;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <FUNC_InputData+0xc9c>)
 800106c:	f503 61cd 	add.w	r1, r3, #1640	; 0x668
 8001070:	a315      	add	r3, pc, #84	; (adr r3, 80010c8 <FUNC_InputData+0xc90>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	e9c1 2300 	strd	r2, r3, [r1]
 800107a:	e03f      	b.n	80010fc <FUNC_InputData+0xcc4>
  } else if (VCU_B.uDLookupTable1 < 0.0) {
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <FUNC_InputData+0xc9c>)
 800107e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8001082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	f00e f893 	bl	800f1bc <__aeabi_dcmplt>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d025      	beq.n	80010e8 <FUNC_InputData+0xcb0>
    VCU_B.Saturation1_e = 0.0;
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <FUNC_InputData+0xc9c>)
 800109e:	f503 61cd 	add.w	r1, r3, #1640	; 0x668
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	e9c1 2300 	strd	r2, r3, [r1]
 80010ae:	e025      	b.n	80010fc <FUNC_InputData+0xcc4>
 80010b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80010b4:	3f50624d 	.word	0x3f50624d
 80010b8:	33333333 	.word	0x33333333
 80010bc:	40133333 	.word	0x40133333
 80010c0:	9578d7b8 	.word	0x9578d7b8
 80010c4:	4050413f 	.word	0x4050413f
 80010c8:	00000000 	.word	0x00000000
 80010cc:	40c19400 	.word	0x40c19400
 80010d0:	40390000 	.word	0x40390000
 80010d4:	200008a8 	.word	0x200008a8
 80010d8:	200010c8 	.word	0x200010c8
 80010dc:	3fe00000 	.word	0x3fe00000
 80010e0:	0800f4c8 	.word	0x0800f4c8
 80010e4:	0800f4b8 	.word	0x0800f4b8
  } else {
    VCU_B.Saturation1_e = VCU_B.uDLookupTable1;
 80010e8:	4ba5      	ldr	r3, [pc, #660]	; (8001380 <FUNC_InputData+0xf48>)
 80010ea:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	49a3      	ldr	r1, [pc, #652]	; (8001380 <FUNC_InputData+0xf48>)
 80010f4:	f501 61cd 	add.w	r1, r1, #1640	; 0x668
 80010f8:	e9c1 2300 	strd	r2, r3, [r1]
  }

  /* End of Saturate: '<S42>/Saturation1' */

  /* DataStoreRead: '<S14>/Data Store Read5' */
  VCU_B.DataStoreRead5 = VCU_DW.VAR_IN_f_FR;
 80010fc:	4ba1      	ldr	r3, [pc, #644]	; (8001384 <FUNC_InputData+0xf4c>)
 80010fe:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001102:	499f      	ldr	r1, [pc, #636]	; (8001380 <FUNC_InputData+0xf48>)
 8001104:	f501 61ce 	add.w	r1, r1, #1648	; 0x670
 8001108:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V16' */
  VCU_B.mVV16 = 0.001 * VCU_B.DataStoreRead5;
 800110c:	4b9c      	ldr	r3, [pc, #624]	; (8001380 <FUNC_InputData+0xf48>)
 800110e:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 8001112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	a395      	add	r3, pc, #596	; (adr r3, 8001370 <FUNC_InputData+0xf38>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f00d fdda 	bl	800ecd8 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4995      	ldr	r1, [pc, #596]	; (8001380 <FUNC_InputData+0xf48>)
 800112a:	f501 61cf 	add.w	r1, r1, #1656	; 0x678
 800112e:	e9c1 2300 	strd	r2, r3, [r1]

  /* Saturate: '<S43>/Saturation1' incorporates:
   *  Lookup_n-D: '<S43>/1-D Lookup Table1'
   */
  VCU_B.uDLookupTable1_k = look1_binlxpw(VCU_B.mVV16,
 8001132:	4b93      	ldr	r3, [pc, #588]	; (8001380 <FUNC_InputData+0xf48>)
 8001134:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	2101      	movs	r1, #1
 800113e:	9100      	str	r1, [sp, #0]
 8001140:	4610      	mov	r0, r2
 8001142:	4619      	mov	r1, r3
 8001144:	4a90      	ldr	r2, [pc, #576]	; (8001388 <FUNC_InputData+0xf50>)
 8001146:	4b91      	ldr	r3, [pc, #580]	; (800138c <FUNC_InputData+0xf54>)
 8001148:	f004 fde2 	bl	8005d10 <look1_binlxpw>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	498b      	ldr	r1, [pc, #556]	; (8001380 <FUNC_InputData+0xf48>)
 8001152:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
 8001156:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.uDLookupTable1_bp01Data_d, VCU_ConstP.uDLookupTable1_tableData_o,
    1U);
  if (VCU_B.uDLookupTable1_k > 9000.0) {
 800115a:	4b89      	ldr	r3, [pc, #548]	; (8001380 <FUNC_InputData+0xf48>)
 800115c:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	a383      	add	r3, pc, #524	; (adr r3, 8001378 <FUNC_InputData+0xf40>)
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f00e f843 	bl	800f1f8 <__aeabi_dcmpgt>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d008      	beq.n	800118a <FUNC_InputData+0xd52>
    VCU_B.Saturation1_n = 9000.0;
 8001178:	4b81      	ldr	r3, [pc, #516]	; (8001380 <FUNC_InputData+0xf48>)
 800117a:	f503 61d1 	add.w	r1, r3, #1672	; 0x688
 800117e:	a37e      	add	r3, pc, #504	; (adr r3, 8001378 <FUNC_InputData+0xf40>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	e9c1 2300 	strd	r2, r3, [r1]
 8001188:	e023      	b.n	80011d2 <FUNC_InputData+0xd9a>
  } else if (VCU_B.uDLookupTable1_k < 0.0) {
 800118a:	4b7d      	ldr	r3, [pc, #500]	; (8001380 <FUNC_InputData+0xf48>)
 800118c:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	f04f 0300 	mov.w	r3, #0
 80011a0:	f00e f80c 	bl	800f1bc <__aeabi_dcmplt>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d009      	beq.n	80011be <FUNC_InputData+0xd86>
    VCU_B.Saturation1_n = 0.0;
 80011aa:	4b75      	ldr	r3, [pc, #468]	; (8001380 <FUNC_InputData+0xf48>)
 80011ac:	f503 61d1 	add.w	r1, r3, #1672	; 0x688
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	f04f 0300 	mov.w	r3, #0
 80011b8:	e9c1 2300 	strd	r2, r3, [r1]
 80011bc:	e009      	b.n	80011d2 <FUNC_InputData+0xd9a>
  } else {
    VCU_B.Saturation1_n = VCU_B.uDLookupTable1_k;
 80011be:	4b70      	ldr	r3, [pc, #448]	; (8001380 <FUNC_InputData+0xf48>)
 80011c0:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	496d      	ldr	r1, [pc, #436]	; (8001380 <FUNC_InputData+0xf48>)
 80011ca:	f501 61d1 	add.w	r1, r1, #1672	; 0x688
 80011ce:	e9c1 2300 	strd	r2, r3, [r1]
  }

  /* End of Saturate: '<S43>/Saturation1' */

  /* DataStoreRead: '<S14>/Data Store Read6' */
  VCU_B.DataStoreRead6 = VCU_DW.VAR_IN_f_RL;
 80011d2:	4b6c      	ldr	r3, [pc, #432]	; (8001384 <FUNC_InputData+0xf4c>)
 80011d4:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80011d8:	4969      	ldr	r1, [pc, #420]	; (8001380 <FUNC_InputData+0xf48>)
 80011da:	f501 61d2 	add.w	r1, r1, #1680	; 0x690
 80011de:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V17' */
  VCU_B.mVV17 = 0.001 * VCU_B.DataStoreRead6;
 80011e2:	4b67      	ldr	r3, [pc, #412]	; (8001380 <FUNC_InputData+0xf48>)
 80011e4:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	a35f      	add	r3, pc, #380	; (adr r3, 8001370 <FUNC_InputData+0xf38>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	f00d fd6f 	bl	800ecd8 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4960      	ldr	r1, [pc, #384]	; (8001380 <FUNC_InputData+0xf48>)
 8001200:	f501 61d3 	add.w	r1, r1, #1688	; 0x698
 8001204:	e9c1 2300 	strd	r2, r3, [r1]

  /* Saturate: '<S44>/Saturation1' incorporates:
   *  Lookup_n-D: '<S44>/1-D Lookup Table1'
   */
  VCU_B.uDLookupTable1_p = look1_binlxpw(VCU_B.mVV17,
 8001208:	4b5d      	ldr	r3, [pc, #372]	; (8001380 <FUNC_InputData+0xf48>)
 800120a:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001212:	2104      	movs	r1, #4
 8001214:	9100      	str	r1, [sp, #0]
 8001216:	4610      	mov	r0, r2
 8001218:	4619      	mov	r1, r3
 800121a:	4a5d      	ldr	r2, [pc, #372]	; (8001390 <FUNC_InputData+0xf58>)
 800121c:	4b5d      	ldr	r3, [pc, #372]	; (8001394 <FUNC_InputData+0xf5c>)
 800121e:	f004 fd77 	bl	8005d10 <look1_binlxpw>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4956      	ldr	r1, [pc, #344]	; (8001380 <FUNC_InputData+0xf48>)
 8001228:	f501 61d4 	add.w	r1, r1, #1696	; 0x6a0
 800122c:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.uDLookupTable1_bp01Data_o, VCU_ConstP.uDLookupTable1_tableData_d,
    4U);
  if (VCU_B.uDLookupTable1_p > 9000.0) {
 8001230:	4b53      	ldr	r3, [pc, #332]	; (8001380 <FUNC_InputData+0xf48>)
 8001232:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	a34e      	add	r3, pc, #312	; (adr r3, 8001378 <FUNC_InputData+0xf40>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f00d ffd8 	bl	800f1f8 <__aeabi_dcmpgt>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d008      	beq.n	8001260 <FUNC_InputData+0xe28>
    VCU_B.Saturation1_o = 9000.0;
 800124e:	4b4c      	ldr	r3, [pc, #304]	; (8001380 <FUNC_InputData+0xf48>)
 8001250:	f503 61d5 	add.w	r1, r3, #1704	; 0x6a8
 8001254:	a348      	add	r3, pc, #288	; (adr r3, 8001378 <FUNC_InputData+0xf40>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	e9c1 2300 	strd	r2, r3, [r1]
 800125e:	e023      	b.n	80012a8 <FUNC_InputData+0xe70>
  } else if (VCU_B.uDLookupTable1_p < 0.0) {
 8001260:	4b47      	ldr	r3, [pc, #284]	; (8001380 <FUNC_InputData+0xf48>)
 8001262:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	f04f 0300 	mov.w	r3, #0
 8001276:	f00d ffa1 	bl	800f1bc <__aeabi_dcmplt>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d009      	beq.n	8001294 <FUNC_InputData+0xe5c>
    VCU_B.Saturation1_o = 0.0;
 8001280:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <FUNC_InputData+0xf48>)
 8001282:	f503 61d5 	add.w	r1, r3, #1704	; 0x6a8
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	f04f 0300 	mov.w	r3, #0
 800128e:	e9c1 2300 	strd	r2, r3, [r1]
 8001292:	e009      	b.n	80012a8 <FUNC_InputData+0xe70>
  } else {
    VCU_B.Saturation1_o = VCU_B.uDLookupTable1_p;
 8001294:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <FUNC_InputData+0xf48>)
 8001296:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	4938      	ldr	r1, [pc, #224]	; (8001380 <FUNC_InputData+0xf48>)
 80012a0:	f501 61d5 	add.w	r1, r1, #1704	; 0x6a8
 80012a4:	e9c1 2300 	strd	r2, r3, [r1]
  }

  /* End of Saturate: '<S44>/Saturation1' */

  /* DataStoreRead: '<S14>/Data Store Read7' */
  VCU_B.DataStoreRead7 = VCU_DW.VAR_IN_f_RR;
 80012a8:	4b36      	ldr	r3, [pc, #216]	; (8001384 <FUNC_InputData+0xf4c>)
 80012aa:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80012ae:	4934      	ldr	r1, [pc, #208]	; (8001380 <FUNC_InputData+0xf48>)
 80012b0:	f501 61d6 	add.w	r1, r1, #1712	; 0x6b0
 80012b4:	e9c1 2300 	strd	r2, r3, [r1]

  /* Gain: '<S14>/mV//V18' */
  VCU_B.mVV18 = 0.001 * VCU_B.DataStoreRead7;
 80012b8:	4b31      	ldr	r3, [pc, #196]	; (8001380 <FUNC_InputData+0xf48>)
 80012ba:	f503 63d6 	add.w	r3, r3, #1712	; 0x6b0
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	a32a      	add	r3, pc, #168	; (adr r3, 8001370 <FUNC_InputData+0xf38>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f00d fd04 	bl	800ecd8 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	492a      	ldr	r1, [pc, #168]	; (8001380 <FUNC_InputData+0xf48>)
 80012d6:	f501 61d7 	add.w	r1, r1, #1720	; 0x6b8
 80012da:	e9c1 2300 	strd	r2, r3, [r1]

  /* Saturate: '<S45>/Saturation1' incorporates:
   *  Lookup_n-D: '<S45>/1-D Lookup Table1'
   */
  VCU_B.uDLookupTable1_kb = look1_binlxpw(VCU_B.mVV18,
 80012de:	4b28      	ldr	r3, [pc, #160]	; (8001380 <FUNC_InputData+0xf48>)
 80012e0:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	2104      	movs	r1, #4
 80012ea:	9100      	str	r1, [sp, #0]
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	4a29      	ldr	r2, [pc, #164]	; (8001398 <FUNC_InputData+0xf60>)
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <FUNC_InputData+0xf64>)
 80012f4:	f004 fd0c 	bl	8005d10 <look1_binlxpw>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4920      	ldr	r1, [pc, #128]	; (8001380 <FUNC_InputData+0xf48>)
 80012fe:	f501 61d8 	add.w	r1, r1, #1728	; 0x6c0
 8001302:	e9c1 2300 	strd	r2, r3, [r1]
    VCU_ConstP.uDLookupTable1_bp01Data_n, VCU_ConstP.uDLookupTable1_tableData_l,
    4U);
  if (VCU_B.uDLookupTable1_kb > 9000.0) {
 8001306:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <FUNC_InputData+0xf48>)
 8001308:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	a318      	add	r3, pc, #96	; (adr r3, 8001378 <FUNC_InputData+0xf40>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f00d ff6d 	bl	800f1f8 <__aeabi_dcmpgt>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <FUNC_InputData+0xefe>
    VCU_B.Saturation1_h = 9000.0;
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <FUNC_InputData+0xf48>)
 8001326:	f503 61d9 	add.w	r1, r3, #1736	; 0x6c8
 800132a:	a313      	add	r3, pc, #76	; (adr r3, 8001378 <FUNC_InputData+0xf40>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	e9c1 2300 	strd	r2, r3, [r1]
 8001334:	e03e      	b.n	80013b4 <FUNC_InputData+0xf7c>
  } else if (VCU_B.uDLookupTable1_kb < 0.0) {
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <FUNC_InputData+0xf48>)
 8001338:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	f00d ff36 	bl	800f1bc <__aeabi_dcmplt>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d024      	beq.n	80013a0 <FUNC_InputData+0xf68>
    VCU_B.Saturation1_h = 0.0;
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <FUNC_InputData+0xf48>)
 8001358:	f503 61d9 	add.w	r1, r3, #1736	; 0x6c8
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	e9c1 2300 	strd	r2, r3, [r1]
 8001368:	e024      	b.n	80013b4 <FUNC_InputData+0xf7c>
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w
 8001370:	d2f1a9fc 	.word	0xd2f1a9fc
 8001374:	3f50624d 	.word	0x3f50624d
 8001378:	00000000 	.word	0x00000000
 800137c:	40c19400 	.word	0x40c19400
 8001380:	200008a8 	.word	0x200008a8
 8001384:	200010c8 	.word	0x200010c8
 8001388:	0800f4e8 	.word	0x0800f4e8
 800138c:	0800f4d8 	.word	0x0800f4d8
 8001390:	0800f520 	.word	0x0800f520
 8001394:	0800f4f8 	.word	0x0800f4f8
 8001398:	0800f570 	.word	0x0800f570
 800139c:	0800f548 	.word	0x0800f548
  } else {
    VCU_B.Saturation1_h = VCU_B.uDLookupTable1_kb;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <FUNC_InputData+0xfc4>)
 80013a2:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	4914      	ldr	r1, [pc, #80]	; (80013fc <FUNC_InputData+0xfc4>)
 80013ac:	f501 61d9 	add.w	r1, r1, #1736	; 0x6c8
 80013b0:	e9c1 2300 	strd	r2, r3, [r1]
  }

  /* End of Saturate: '<S45>/Saturation1' */

  /* DataStoreRead: '<S14>/Data Store Read8' */
  VCU_B.DataStoreRead8 = VCU_DW.VAR_IN_LC_dash_bit;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <FUNC_InputData+0xfc8>)
 80013b6:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 80013ba:	4910      	ldr	r1, [pc, #64]	; (80013fc <FUNC_InputData+0xfc4>)
 80013bc:	f501 61da 	add.w	r1, r1, #1744	; 0x6d0
 80013c0:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataTypeConversion: '<S14>/Data Type Conversion11' */
  VCU_B.LC_dash_bit = (VCU_B.DataStoreRead8 != 0.0);
 80013c4:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <FUNC_InputData+0xfc4>)
 80013c6:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	2101      	movs	r1, #1
 80013d0:	460c      	mov	r4, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	f00d fee3 	bl	800f1a8 <__aeabi_dcmpeq>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <FUNC_InputData+0xfb4>
 80013e8:	2300      	movs	r3, #0
 80013ea:	461c      	mov	r4, r3
 80013ec:	b2e3      	uxtb	r3, r4
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b02      	ldr	r3, [pc, #8]	; (80013fc <FUNC_InputData+0xfc4>)
 80013f2:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
}
 80013f6:	3704      	adds	r7, #4
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd90      	pop	{r4, r7, pc}
 80013fc:	200008a8 	.word	0x200008a8
 8001400:	200010c8 	.word	0x200010c8
 8001404:	f3af 8000 	nop.w

08001408 <FUNC_OutputData>:
#include "VCU.h"
#include "VCU_private.h"

/* Output and update for atomic system: '<Root>/Output Data' */
void FUNC_OutputData(void)
{
 8001408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800140c:	b0be      	sub	sp, #248	; 0xf8
 800140e:	af00      	add	r7, sp, #0
  real_T tmp;

  /* Gain: '<S63>/Gain' */
  VCU_B.n_wheel_FL_kmh = 3.6 * VCU_B.Add1_k;
 8001410:	4bb1      	ldr	r3, [pc, #708]	; (80016d8 <FUNC_OutputData+0x2d0>)
 8001412:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	a3ac      	add	r3, pc, #688	; (adr r3, 80016d0 <FUNC_OutputData+0x2c8>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f00d fc58 	bl	800ecd8 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	4ba9      	ldr	r3, [pc, #676]	; (80016d8 <FUNC_OutputData+0x2d0>)
 8001432:	e9c3 01c2 	strd	r0, r1, [r3, #776]	; 0x308

  /* Gain: '<S70>/Factor' */
  VCU_B.Factor = 10.0 * VCU_B.n_wheel_FL_kmh;
 8001436:	4ba8      	ldr	r3, [pc, #672]	; (80016d8 <FUNC_OutputData+0x2d0>)
 8001438:	e9d3 23c2 	ldrd	r2, r3, [r3, #776]	; 0x308
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	4ba5      	ldr	r3, [pc, #660]	; (80016dc <FUNC_OutputData+0x2d4>)
 8001446:	f00d fc47 	bl	800ecd8 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	4ba1      	ldr	r3, [pc, #644]	; (80016d8 <FUNC_OutputData+0x2d0>)
 8001454:	e9c3 01c4 	strd	r0, r1, [r3, #784]	; 0x310

  /* Sum: '<S70>/Add1' */
  VCU_B.Add1_g = VCU_B.Factor;
 8001458:	4b9f      	ldr	r3, [pc, #636]	; (80016d8 <FUNC_OutputData+0x2d0>)
 800145a:	e9d3 23c4 	ldrd	r2, r3, [r3, #784]	; 0x310
 800145e:	499e      	ldr	r1, [pc, #632]	; (80016d8 <FUNC_OutputData+0x2d0>)
 8001460:	e9c1 23c6 	strd	r2, r3, [r1, #792]	; 0x318

  /* DataTypeConversion: '<S70>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_g);
 8001464:	4b9c      	ldr	r3, [pc, #624]	; (80016d8 <FUNC_OutputData+0x2d0>)
 8001466:	e9d3 23c6 	ldrd	r2, r3, [r3, #792]	; 0x318
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f00d f83f 	bl	800e4f0 <floor>
 8001472:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8001476:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800147a:	f005 f861 	bl	8006540 <rtIsNaN>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d106      	bne.n	8001492 <FUNC_OutputData+0x8a>
 8001484:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001488:	f005 f836 	bl	80064f8 <rtIsInf>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <FUNC_OutputData+0x98>
    tmp = 0.0;
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800149e:	e008      	b.n	80014b2 <FUNC_OutputData+0xaa>
  } else {
    tmp = fmod(tmp, 65536.0);
 80014a0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	4b8d      	ldr	r3, [pc, #564]	; (80016e0 <FUNC_OutputData+0x2d8>)
 80014aa:	f00d f8a9 	bl	800e600 <fmod>
 80014ae:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10 = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80014b2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	f00d fe7d 	bl	800f1bc <__aeabi_dcmplt>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00e      	beq.n	80014e6 <FUNC_OutputData+0xde>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 80014c8:	f8d7 40f0 	ldr.w	r4, [r7, #240]	; 0xf0
 80014cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014d0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014d4:	4620      	mov	r0, r4
 80014d6:	4629      	mov	r1, r5
 80014d8:	f00d fe98 	bl	800f20c <__aeabi_d2uiz>
 80014dc:	4603      	mov	r3, r0
 80014de:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10 = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80014e0:	425b      	negs	r3, r3
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	e005      	b.n	80014f2 <FUNC_OutputData+0xea>
 80014e6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80014ea:	f00d fe8f 	bl	800f20c <__aeabi_d2uiz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	4a79      	ldr	r2, [pc, #484]	; (80016d8 <FUNC_OutputData+0x2d0>)
 80014f4:	f8a2 36f8 	strh.w	r3, [r2, #1784]	; 0x6f8
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S70>/Data Type Conversion10' */

  /* DataStoreWrite: '<S64>/Data Store Write' */
  VCU_DW.VAR_OUT_n_wheel_FL_kmproh = VCU_B.DataTypeConversion10;
 80014f8:	4b77      	ldr	r3, [pc, #476]	; (80016d8 <FUNC_OutputData+0x2d0>)
 80014fa:	f8b3 36f8 	ldrh.w	r3, [r3, #1784]	; 0x6f8
 80014fe:	4a79      	ldr	r2, [pc, #484]	; (80016e4 <FUNC_OutputData+0x2dc>)
 8001500:	f8a2 30c2 	strh.w	r3, [r2, #194]	; 0xc2

  /* Gain: '<S63>/Gain1' */
  VCU_B.n_wheel_FR_kmh = 3.6 * VCU_B.Add1_de;
 8001504:	4b74      	ldr	r3, [pc, #464]	; (80016d8 <FUNC_OutputData+0x2d0>)
 8001506:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	a36f      	add	r3, pc, #444	; (adr r3, 80016d0 <FUNC_OutputData+0x2c8>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f00d fbde 	bl	800ecd8 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	4b6c      	ldr	r3, [pc, #432]	; (80016d8 <FUNC_OutputData+0x2d0>)
 8001526:	e9c3 01c8 	strd	r0, r1, [r3, #800]	; 0x320

  /* Gain: '<S71>/Factor' */
  VCU_B.Factor_c = 10.0 * VCU_B.n_wheel_FR_kmh;
 800152a:	4b6b      	ldr	r3, [pc, #428]	; (80016d8 <FUNC_OutputData+0x2d0>)
 800152c:	e9d3 23c8 	ldrd	r2, r3, [r3, #800]	; 0x320
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	4b68      	ldr	r3, [pc, #416]	; (80016dc <FUNC_OutputData+0x2d4>)
 800153a:	f00d fbcd 	bl	800ecd8 <__aeabi_dmul>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	4b64      	ldr	r3, [pc, #400]	; (80016d8 <FUNC_OutputData+0x2d0>)
 8001548:	e9c3 01ca 	strd	r0, r1, [r3, #808]	; 0x328

  /* Sum: '<S71>/Add1' */
  VCU_B.Add1_i = VCU_B.Factor_c;
 800154c:	4b62      	ldr	r3, [pc, #392]	; (80016d8 <FUNC_OutputData+0x2d0>)
 800154e:	e9d3 23ca 	ldrd	r2, r3, [r3, #808]	; 0x328
 8001552:	4961      	ldr	r1, [pc, #388]	; (80016d8 <FUNC_OutputData+0x2d0>)
 8001554:	e9c1 23cc 	strd	r2, r3, [r1, #816]	; 0x330

  /* DataTypeConversion: '<S71>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_i);
 8001558:	4b5f      	ldr	r3, [pc, #380]	; (80016d8 <FUNC_OutputData+0x2d0>)
 800155a:	e9d3 23cc 	ldrd	r2, r3, [r3, #816]	; 0x330
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f00c ffc5 	bl	800e4f0 <floor>
 8001566:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 800156a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800156e:	f004 ffe7 	bl	8006540 <rtIsNaN>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d106      	bne.n	8001586 <FUNC_OutputData+0x17e>
 8001578:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800157c:	f004 ffbc 	bl	80064f8 <rtIsInf>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d006      	beq.n	8001594 <FUNC_OutputData+0x18c>
    tmp = 0.0;
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001592:	e008      	b.n	80015a6 <FUNC_OutputData+0x19e>
  } else {
    tmp = fmod(tmp, 65536.0);
 8001594:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	4b50      	ldr	r3, [pc, #320]	; (80016e0 <FUNC_OutputData+0x2d8>)
 800159e:	f00d f82f 	bl	800e600 <fmod>
 80015a2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_b = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80015a6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	f00d fe03 	bl	800f1bc <__aeabi_dcmplt>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00e      	beq.n	80015da <FUNC_OutputData+0x1d2>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 80015bc:	f8d7 80f0 	ldr.w	r8, [r7, #240]	; 0xf0
 80015c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015c4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80015c8:	4640      	mov	r0, r8
 80015ca:	4649      	mov	r1, r9
 80015cc:	f00d fe1e 	bl	800f20c <__aeabi_d2uiz>
 80015d0:	4603      	mov	r3, r0
 80015d2:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10_b = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80015d4:	425b      	negs	r3, r3
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	e005      	b.n	80015e6 <FUNC_OutputData+0x1de>
 80015da:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80015de:	f00d fe15 	bl	800f20c <__aeabi_d2uiz>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4a3c      	ldr	r2, [pc, #240]	; (80016d8 <FUNC_OutputData+0x2d0>)
 80015e8:	f8a2 36fa 	strh.w	r3, [r2, #1786]	; 0x6fa
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S71>/Data Type Conversion10' */

  /* DataStoreWrite: '<S64>/Data Store Write1' */
  VCU_DW.VAR_OUT_n_wheel_FR_kmproh = VCU_B.DataTypeConversion10_b;
 80015ec:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <FUNC_OutputData+0x2d0>)
 80015ee:	f8b3 36fa 	ldrh.w	r3, [r3, #1786]	; 0x6fa
 80015f2:	4a3c      	ldr	r2, [pc, #240]	; (80016e4 <FUNC_OutputData+0x2dc>)
 80015f4:	f8a2 30c4 	strh.w	r3, [r2, #196]	; 0xc4

  /* Gain: '<S63>/Gain2' */
  VCU_B.n_wheel_RL_kmh = 3.6 * VCU_B.Add1_ks;
 80015f8:	4b37      	ldr	r3, [pc, #220]	; (80016d8 <FUNC_OutputData+0x2d0>)
 80015fa:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	a332      	add	r3, pc, #200	; (adr r3, 80016d0 <FUNC_OutputData+0x2c8>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f00d fb64 	bl	800ecd8 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <FUNC_OutputData+0x2d0>)
 800161a:	e9c3 01ce 	strd	r0, r1, [r3, #824]	; 0x338

  /* Gain: '<S72>/Factor' */
  VCU_B.Factor_j = 10.0 * VCU_B.n_wheel_RL_kmh;
 800161e:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <FUNC_OutputData+0x2d0>)
 8001620:	e9d3 23ce 	ldrd	r2, r3, [r3, #824]	; 0x338
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <FUNC_OutputData+0x2d4>)
 800162e:	f00d fb53 	bl	800ecd8 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <FUNC_OutputData+0x2d0>)
 800163c:	e9c3 01d0 	strd	r0, r1, [r3, #832]	; 0x340

  /* Sum: '<S72>/Add1' */
  VCU_B.Add1_a = VCU_B.Factor_j;
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <FUNC_OutputData+0x2d0>)
 8001642:	e9d3 23d0 	ldrd	r2, r3, [r3, #832]	; 0x340
 8001646:	4924      	ldr	r1, [pc, #144]	; (80016d8 <FUNC_OutputData+0x2d0>)
 8001648:	e9c1 23d2 	strd	r2, r3, [r1, #840]	; 0x348

  /* DataTypeConversion: '<S72>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_a);
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <FUNC_OutputData+0x2d0>)
 800164e:	e9d3 23d2 	ldrd	r2, r3, [r3, #840]	; 0x348
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	f00c ff4b 	bl	800e4f0 <floor>
 800165a:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 800165e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001662:	f004 ff6d 	bl	8006540 <rtIsNaN>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d106      	bne.n	800167a <FUNC_OutputData+0x272>
 800166c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001670:	f004 ff42 	bl	80064f8 <rtIsInf>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d006      	beq.n	8001688 <FUNC_OutputData+0x280>
    tmp = 0.0;
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001686:	e008      	b.n	800169a <FUNC_OutputData+0x292>
  } else {
    tmp = fmod(tmp, 65536.0);
 8001688:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <FUNC_OutputData+0x2d8>)
 8001692:	f00c ffb5 	bl	800e600 <fmod>
 8001696:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_be = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 800169a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	f00d fd89 	bl	800f1bc <__aeabi_dcmplt>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d01b      	beq.n	80016e8 <FUNC_OutputData+0x2e0>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 80016b0:	f8d7 a0f0 	ldr.w	sl, [r7, #240]	; 0xf0
 80016b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016b8:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80016bc:	4650      	mov	r0, sl
 80016be:	4659      	mov	r1, fp
 80016c0:	f00d fda4 	bl	800f20c <__aeabi_d2uiz>
 80016c4:	4603      	mov	r3, r0
 80016c6:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10_be = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80016c8:	425b      	negs	r3, r3
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	e012      	b.n	80016f4 <FUNC_OutputData+0x2ec>
 80016ce:	bf00      	nop
 80016d0:	cccccccd 	.word	0xcccccccd
 80016d4:	400ccccc 	.word	0x400ccccc
 80016d8:	200008a8 	.word	0x200008a8
 80016dc:	40240000 	.word	0x40240000
 80016e0:	40f00000 	.word	0x40f00000
 80016e4:	200010c8 	.word	0x200010c8
 80016e8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80016ec:	f00d fd8e 	bl	800f20c <__aeabi_d2uiz>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4aa2      	ldr	r2, [pc, #648]	; (8001980 <FUNC_OutputData+0x578>)
 80016f6:	f8a2 36fc 	strh.w	r3, [r2, #1788]	; 0x6fc
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S72>/Data Type Conversion10' */

  /* DataStoreWrite: '<S64>/Data Store Write2' */
  VCU_DW.VAR_OUT_n_wheel_RL_kmproh = VCU_B.DataTypeConversion10_be;
 80016fa:	4ba1      	ldr	r3, [pc, #644]	; (8001980 <FUNC_OutputData+0x578>)
 80016fc:	f8b3 36fc 	ldrh.w	r3, [r3, #1788]	; 0x6fc
 8001700:	4aa0      	ldr	r2, [pc, #640]	; (8001984 <FUNC_OutputData+0x57c>)
 8001702:	f8a2 30c6 	strh.w	r3, [r2, #198]	; 0xc6

  /* Gain: '<S63>/Gain3' */
  VCU_B.n_wheel_RR_kmh = 3.6 * VCU_B.Add1_eq;
 8001706:	4b9e      	ldr	r3, [pc, #632]	; (8001980 <FUNC_OutputData+0x578>)
 8001708:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	a398      	add	r3, pc, #608	; (adr r3, 8001978 <FUNC_OutputData+0x570>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f00d fadd 	bl	800ecd8 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	4b96      	ldr	r3, [pc, #600]	; (8001980 <FUNC_OutputData+0x578>)
 8001728:	e9c3 01d4 	strd	r0, r1, [r3, #848]	; 0x350

  /* Gain: '<S73>/Factor' */
  VCU_B.Factor_h = 10.0 * VCU_B.n_wheel_RR_kmh;
 800172c:	4b94      	ldr	r3, [pc, #592]	; (8001980 <FUNC_OutputData+0x578>)
 800172e:	e9d3 23d4 	ldrd	r2, r3, [r3, #848]	; 0x350
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	4b93      	ldr	r3, [pc, #588]	; (8001988 <FUNC_OutputData+0x580>)
 800173c:	f00d facc 	bl	800ecd8 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	4b8d      	ldr	r3, [pc, #564]	; (8001980 <FUNC_OutputData+0x578>)
 800174a:	e9c3 01d6 	strd	r0, r1, [r3, #856]	; 0x358

  /* Sum: '<S73>/Add1' */
  VCU_B.Add1_e = VCU_B.Factor_h;
 800174e:	4b8c      	ldr	r3, [pc, #560]	; (8001980 <FUNC_OutputData+0x578>)
 8001750:	e9d3 23d6 	ldrd	r2, r3, [r3, #856]	; 0x358
 8001754:	498a      	ldr	r1, [pc, #552]	; (8001980 <FUNC_OutputData+0x578>)
 8001756:	e9c1 23d8 	strd	r2, r3, [r1, #864]	; 0x360

  /* DataTypeConversion: '<S73>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_e);
 800175a:	4b89      	ldr	r3, [pc, #548]	; (8001980 <FUNC_OutputData+0x578>)
 800175c:	e9d3 23d8 	ldrd	r2, r3, [r3, #864]	; 0x360
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	f00c fec4 	bl	800e4f0 <floor>
 8001768:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 800176c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001770:	f004 fee6 	bl	8006540 <rtIsNaN>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d106      	bne.n	8001788 <FUNC_OutputData+0x380>
 800177a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800177e:	f004 febb 	bl	80064f8 <rtIsInf>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d006      	beq.n	8001796 <FUNC_OutputData+0x38e>
    tmp = 0.0;
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001794:	e008      	b.n	80017a8 <FUNC_OutputData+0x3a0>
  } else {
    tmp = fmod(tmp, 65536.0);
 8001796:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	4b7b      	ldr	r3, [pc, #492]	; (800198c <FUNC_OutputData+0x584>)
 80017a0:	f00c ff2e 	bl	800e600 <fmod>
 80017a4:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_o = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80017a8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	f00d fd02 	bl	800f1bc <__aeabi_dcmplt>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d012      	beq.n	80017e4 <FUNC_OutputData+0x3dc>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 80017be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80017c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80017c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80017ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017d2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80017d6:	f00d fd19 	bl	800f20c <__aeabi_d2uiz>
 80017da:	4603      	mov	r3, r0
 80017dc:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10_o = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80017de:	425b      	negs	r3, r3
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	e005      	b.n	80017f0 <FUNC_OutputData+0x3e8>
 80017e4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80017e8:	f00d fd10 	bl	800f20c <__aeabi_d2uiz>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4a63      	ldr	r2, [pc, #396]	; (8001980 <FUNC_OutputData+0x578>)
 80017f2:	f8a2 36fe 	strh.w	r3, [r2, #1790]	; 0x6fe
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S73>/Data Type Conversion10' */

  /* DataStoreWrite: '<S64>/Data Store Write3' */
  VCU_DW.VAR_OUT_n_wheel_RR_kmproh = VCU_B.DataTypeConversion10_o;
 80017f6:	4b62      	ldr	r3, [pc, #392]	; (8001980 <FUNC_OutputData+0x578>)
 80017f8:	f8b3 36fe 	ldrh.w	r3, [r3, #1790]	; 0x6fe
 80017fc:	4a61      	ldr	r2, [pc, #388]	; (8001984 <FUNC_OutputData+0x57c>)
 80017fe:	f8a2 30c8 	strh.w	r3, [r2, #200]	; 0xc8

  /* Sum: '<S80>/Add1' */
  VCU_B.Add1_j = VCU_B.Sensitivity1538mVbar;
 8001802:	4b5f      	ldr	r3, [pc, #380]	; (8001980 <FUNC_OutputData+0x578>)
 8001804:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	495c      	ldr	r1, [pc, #368]	; (8001980 <FUNC_OutputData+0x578>)
 800180e:	e9c1 23da 	strd	r2, r3, [r1, #872]	; 0x368

  /* DataTypeConversion: '<S80>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_j);
 8001812:	4b5b      	ldr	r3, [pc, #364]	; (8001980 <FUNC_OutputData+0x578>)
 8001814:	e9d3 23da 	ldrd	r2, r3, [r3, #872]	; 0x368
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f00c fe68 	bl	800e4f0 <floor>
 8001820:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8001824:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001828:	f004 fe8a 	bl	8006540 <rtIsNaN>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d106      	bne.n	8001840 <FUNC_OutputData+0x438>
 8001832:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001836:	f004 fe5f 	bl	80064f8 <rtIsInf>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d006      	beq.n	800184e <FUNC_OutputData+0x446>
    tmp = 0.0;
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800184c:	e008      	b.n	8001860 <FUNC_OutputData+0x458>
  } else {
    tmp = fmod(tmp, 256.0);
 800184e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b4e      	ldr	r3, [pc, #312]	; (8001990 <FUNC_OutputData+0x588>)
 8001858:	f00c fed2 	bl	800e600 <fmod>
 800185c:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_ho = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001860:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	f00d fca6 	bl	800f1bc <__aeabi_dcmplt>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d012      	beq.n	800189c <FUNC_OutputData+0x494>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001876:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800187a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800187e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001882:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800188a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800188e:	f00d fcbd 	bl	800f20c <__aeabi_d2uiz>
 8001892:	4603      	mov	r3, r0
 8001894:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_ho = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001896:	425b      	negs	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	e005      	b.n	80018a8 <FUNC_OutputData+0x4a0>
 800189c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80018a0:	f00d fcb4 	bl	800f20c <__aeabi_d2uiz>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	4a35      	ldr	r2, [pc, #212]	; (8001980 <FUNC_OutputData+0x578>)
 80018aa:	f882 3743 	strb.w	r3, [r2, #1859]	; 0x743
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S80>/Data Type Conversion10' */

  /* DataStoreWrite: '<S66>/Data Store Write' */
  VCU_DW.VAR_OUT_p_brake_R = VCU_B.DataTypeConversion10_ho;
 80018ae:	4b34      	ldr	r3, [pc, #208]	; (8001980 <FUNC_OutputData+0x578>)
 80018b0:	f893 3743 	ldrb.w	r3, [r3, #1859]	; 0x743
 80018b4:	4a33      	ldr	r2, [pc, #204]	; (8001984 <FUNC_OutputData+0x57c>)
 80018b6:	f882 311b 	strb.w	r3, [r2, #283]	; 0x11b

  /* Gain: '<S81>/Factor' */
  VCU_B.Factor_d = 100.0 * VCU_B.Add1_f1;
 80018ba:	4b31      	ldr	r3, [pc, #196]	; (8001980 <FUNC_OutputData+0x578>)
 80018bc:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	4b31      	ldr	r3, [pc, #196]	; (8001994 <FUNC_OutputData+0x58c>)
 80018ce:	f00d fa03 	bl	800ecd8 <__aeabi_dmul>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <FUNC_OutputData+0x578>)
 80018dc:	e9c3 01dc 	strd	r0, r1, [r3, #880]	; 0x370

  /* Sum: '<S81>/Add1' */
  VCU_B.Add1_l = VCU_B.Factor_d;
 80018e0:	4b27      	ldr	r3, [pc, #156]	; (8001980 <FUNC_OutputData+0x578>)
 80018e2:	e9d3 23dc 	ldrd	r2, r3, [r3, #880]	; 0x370
 80018e6:	4926      	ldr	r1, [pc, #152]	; (8001980 <FUNC_OutputData+0x578>)
 80018e8:	e9c1 23de 	strd	r2, r3, [r1, #888]	; 0x378

  /* DataTypeConversion: '<S81>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_l);
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <FUNC_OutputData+0x578>)
 80018ee:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f00c fdfb 	bl	800e4f0 <floor>
 80018fa:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 80018fe:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001902:	f004 fe1d 	bl	8006540 <rtIsNaN>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d106      	bne.n	800191a <FUNC_OutputData+0x512>
 800190c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001910:	f004 fdf2 	bl	80064f8 <rtIsInf>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <FUNC_OutputData+0x520>
    tmp = 0.0;
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001926:	e008      	b.n	800193a <FUNC_OutputData+0x532>
  } else {
    tmp = fmod(tmp, 256.0);
 8001928:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <FUNC_OutputData+0x588>)
 8001932:	f00c fe65 	bl	800e600 <fmod>
 8001936:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_fx = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 800193a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	f00d fc39 	bl	800f1bc <__aeabi_dcmplt>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d023      	beq.n	8001998 <FUNC_OutputData+0x590>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001950:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001954:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800195c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001960:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001964:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001968:	f00d fc50 	bl	800f20c <__aeabi_d2uiz>
 800196c:	4603      	mov	r3, r0
 800196e:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_fx = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001970:	425b      	negs	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	e016      	b.n	80019a4 <FUNC_OutputData+0x59c>
 8001976:	bf00      	nop
 8001978:	cccccccd 	.word	0xcccccccd
 800197c:	400ccccc 	.word	0x400ccccc
 8001980:	200008a8 	.word	0x200008a8
 8001984:	200010c8 	.word	0x200010c8
 8001988:	40240000 	.word	0x40240000
 800198c:	40f00000 	.word	0x40f00000
 8001990:	40700000 	.word	0x40700000
 8001994:	40590000 	.word	0x40590000
 8001998:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800199c:	f00d fc36 	bl	800f20c <__aeabi_d2uiz>
 80019a0:	4603      	mov	r3, r0
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	4a8e      	ldr	r2, [pc, #568]	; (8001be0 <FUNC_OutputData+0x7d8>)
 80019a6:	f882 3744 	strb.w	r3, [r2, #1860]	; 0x744
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S81>/Data Type Conversion10' */

  /* DataStoreWrite: '<S66>/Data Store Write1' */
  VCU_DW.VAR_OUT_STW_mue_tyre = VCU_B.DataTypeConversion10_fx;
 80019aa:	4b8d      	ldr	r3, [pc, #564]	; (8001be0 <FUNC_OutputData+0x7d8>)
 80019ac:	f893 3744 	ldrb.w	r3, [r3, #1860]	; 0x744
 80019b0:	4a8c      	ldr	r2, [pc, #560]	; (8001be4 <FUNC_OutputData+0x7dc>)
 80019b2:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c

  /* Gain: '<S82>/Factor' */
  VCU_B.Factor_b = 10.0 * VCU_B.x_clutch_LC;
 80019b6:	4b8a      	ldr	r3, [pc, #552]	; (8001be0 <FUNC_OutputData+0x7d8>)
 80019b8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	4b88      	ldr	r3, [pc, #544]	; (8001be8 <FUNC_OutputData+0x7e0>)
 80019c6:	f00d f987 	bl	800ecd8 <__aeabi_dmul>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	4b83      	ldr	r3, [pc, #524]	; (8001be0 <FUNC_OutputData+0x7d8>)
 80019d4:	e9c3 01e0 	strd	r0, r1, [r3, #896]	; 0x380

  /* Sum: '<S82>/Add1' */
  VCU_B.Add1_ll = VCU_B.Factor_b;
 80019d8:	4b81      	ldr	r3, [pc, #516]	; (8001be0 <FUNC_OutputData+0x7d8>)
 80019da:	e9d3 23e0 	ldrd	r2, r3, [r3, #896]	; 0x380
 80019de:	4980      	ldr	r1, [pc, #512]	; (8001be0 <FUNC_OutputData+0x7d8>)
 80019e0:	e9c1 23e2 	strd	r2, r3, [r1, #904]	; 0x388

  /* DataTypeConversion: '<S82>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_ll);
 80019e4:	4b7e      	ldr	r3, [pc, #504]	; (8001be0 <FUNC_OutputData+0x7d8>)
 80019e6:	e9d3 23e2 	ldrd	r2, r3, [r3, #904]	; 0x388
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f00c fd7f 	bl	800e4f0 <floor>
 80019f2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 80019f6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80019fa:	f004 fda1 	bl	8006540 <rtIsNaN>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d106      	bne.n	8001a12 <FUNC_OutputData+0x60a>
 8001a04:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001a08:	f004 fd76 	bl	80064f8 <rtIsInf>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <FUNC_OutputData+0x618>
    tmp = 0.0;
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001a1e:	e008      	b.n	8001a32 <FUNC_OutputData+0x62a>
  } else {
    tmp = fmod(tmp, 256.0);
 8001a20:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	4b70      	ldr	r3, [pc, #448]	; (8001bec <FUNC_OutputData+0x7e4>)
 8001a2a:	f00c fde9 	bl	800e600 <fmod>
 8001a2e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_ae = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001a32:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	f00d fbbd 	bl	800f1bc <__aeabi_dcmplt>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d012      	beq.n	8001a6e <FUNC_OutputData+0x666>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001a48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a5c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001a60:	f00d fbd4 	bl	800f20c <__aeabi_d2uiz>
 8001a64:	4603      	mov	r3, r0
 8001a66:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_ae = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001a68:	425b      	negs	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	e005      	b.n	8001a7a <FUNC_OutputData+0x672>
 8001a6e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001a72:	f00d fbcb 	bl	800f20c <__aeabi_d2uiz>
 8001a76:	4603      	mov	r3, r0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	4a59      	ldr	r2, [pc, #356]	; (8001be0 <FUNC_OutputData+0x7d8>)
 8001a7c:	f882 3745 	strb.w	r3, [r2, #1861]	; 0x745
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S82>/Data Type Conversion10' */

  /* DataStoreWrite: '<S66>/Data Store Write2' */
  VCU_DW.VAR_OUT_x_clutch_LC = VCU_B.DataTypeConversion10_ae;
 8001a80:	4b57      	ldr	r3, [pc, #348]	; (8001be0 <FUNC_OutputData+0x7d8>)
 8001a82:	f893 3745 	ldrb.w	r3, [r3, #1861]	; 0x745
 8001a86:	4a57      	ldr	r2, [pc, #348]	; (8001be4 <FUNC_OutputData+0x7dc>)
 8001a88:	f882 311d 	strb.w	r3, [r2, #285]	; 0x11d

  /* Sum: '<S115>/Add' */
  VCU_B.Add_p = VCU_B.Add1_k + VCU_B.Add1_de;
 8001a8c:	4b54      	ldr	r3, [pc, #336]	; (8001be0 <FUNC_OutputData+0x7d8>)
 8001a8e:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8001a92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a96:	4b52      	ldr	r3, [pc, #328]	; (8001be0 <FUNC_OutputData+0x7d8>)
 8001a98:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f00c ff68 	bl	800e974 <__adddf3>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4b4c      	ldr	r3, [pc, #304]	; (8001be0 <FUNC_OutputData+0x7d8>)
 8001aae:	e9c3 01e4 	strd	r0, r1, [r3, #912]	; 0x390

  /* Gain: '<S115>/Gain' */
  VCU_B.Gain_g2 = 0.5 * VCU_B.Add_p;
 8001ab2:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <FUNC_OutputData+0x7d8>)
 8001ab4:	e9d3 23e4 	ldrd	r2, r3, [r3, #912]	; 0x390
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <FUNC_OutputData+0x7e8>)
 8001ac2:	f00d f909 	bl	800ecd8 <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	4b44      	ldr	r3, [pc, #272]	; (8001be0 <FUNC_OutputData+0x7d8>)
 8001ad0:	e9c3 01e6 	strd	r0, r1, [r3, #920]	; 0x398

  /* RelationalOperator: '<S120>/Compare' incorporates:
   *  Constant: '<S120>/Constant'
   */
  VCU_B.Compare_in = (VCU_B.Gain_g2 <= 1.0);
 8001ad4:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <FUNC_OutputData+0x7d8>)
 8001ad6:	e9d3 23e6 	ldrd	r2, r3, [r3, #920]	; 0x398
 8001ada:	2101      	movs	r1, #1
 8001adc:	460c      	mov	r4, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	4b43      	ldr	r3, [pc, #268]	; (8001bf4 <FUNC_OutputData+0x7ec>)
 8001ae8:	f00d fb72 	bl	800f1d0 <__aeabi_dcmple>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <FUNC_OutputData+0x6ee>
 8001af2:	2300      	movs	r3, #0
 8001af4:	461c      	mov	r4, r3
 8001af6:	b2e3      	uxtb	r3, r4
 8001af8:	4a39      	ldr	r2, [pc, #228]	; (8001be0 <FUNC_OutputData+0x7d8>)
 8001afa:	f882 380b 	strb.w	r3, [r2, #2059]	; 0x80b

  /* Product: '<S115>/Product' */
  VCU_B.Product_o = (uint16_T)(VCU_B.LC_dash_bit ? (int32_T)VCU_B.Compare_in : 0);
 8001afe:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <FUNC_OutputData+0x7d8>)
 8001b00:	f893 3813 	ldrb.w	r3, [r3, #2067]	; 0x813
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <FUNC_OutputData+0x70a>
 8001b08:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <FUNC_OutputData+0x7d8>)
 8001b0a:	f893 380b 	ldrb.w	r3, [r3, #2059]	; 0x80b
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	e000      	b.n	8001b14 <FUNC_OutputData+0x70c>
 8001b12:	2300      	movs	r3, #0
 8001b14:	4a32      	ldr	r2, [pc, #200]	; (8001be0 <FUNC_OutputData+0x7d8>)
 8001b16:	f8a2 3700 	strh.w	r3, [r2, #1792]	; 0x700

  /* Gain: '<S83>/Factor' */
  VCU_B.Factor_ii = (uint32_T)VCU_B.Product_o << 15;
 8001b1a:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <FUNC_OutputData+0x7d8>)
 8001b1c:	f8b3 3700 	ldrh.w	r3, [r3, #1792]	; 0x700
 8001b20:	03da      	lsls	r2, r3, #15
 8001b22:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <FUNC_OutputData+0x7d8>)
 8001b24:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0

  /* Sum: '<S83>/Add1' */
  VCU_B.Add1_b = (real_T)VCU_B.Factor_ii * 3.0517578125E-5;
 8001b28:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <FUNC_OutputData+0x7d8>)
 8001b2a:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f00d f85c 	bl	800ebec <__aeabi_ui2d>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001b44:	f00d f8c8 	bl	800ecd8 <__aeabi_dmul>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <FUNC_OutputData+0x7d8>)
 8001b52:	e9c3 01e8 	strd	r0, r1, [r3, #928]	; 0x3a0

  /* DataTypeConversion: '<S83>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_b);
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <FUNC_OutputData+0x7d8>)
 8001b58:	e9d3 23e8 	ldrd	r2, r3, [r3, #928]	; 0x3a0
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f00c fcc6 	bl	800e4f0 <floor>
 8001b64:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8001b68:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001b6c:	f004 fce8 	bl	8006540 <rtIsNaN>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d106      	bne.n	8001b84 <FUNC_OutputData+0x77c>
 8001b76:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001b7a:	f004 fcbd 	bl	80064f8 <rtIsInf>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <FUNC_OutputData+0x78a>
    tmp = 0.0;
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001b90:	e008      	b.n	8001ba4 <FUNC_OutputData+0x79c>
  } else {
    tmp = fmod(tmp, 256.0);
 8001b92:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <FUNC_OutputData+0x7e4>)
 8001b9c:	f00c fd30 	bl	800e600 <fmod>
 8001ba0:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_c = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001ba4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	f00d fb04 	bl	800f1bc <__aeabi_dcmplt>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d01e      	beq.n	8001bf8 <FUNC_OutputData+0x7f0>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001bba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001bbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bc6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001bce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001bd2:	f00d fb1b 	bl	800f20c <__aeabi_d2uiz>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_c = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001bda:	425b      	negs	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	e011      	b.n	8001c04 <FUNC_OutputData+0x7fc>
 8001be0:	200008a8 	.word	0x200008a8
 8001be4:	200010c8 	.word	0x200010c8
 8001be8:	40240000 	.word	0x40240000
 8001bec:	40700000 	.word	0x40700000
 8001bf0:	3fe00000 	.word	0x3fe00000
 8001bf4:	3ff00000 	.word	0x3ff00000
 8001bf8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001bfc:	f00d fb06 	bl	800f20c <__aeabi_d2uiz>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	4a9f      	ldr	r2, [pc, #636]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001c06:	f882 3746 	strb.w	r3, [r2, #1862]	; 0x746
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S83>/Data Type Conversion10' */

  /* DataStoreWrite: '<S66>/Data Store Write3' */
  VCU_DW.VAR_OUT_LC_dash_Bit = VCU_B.DataTypeConversion10_c;
 8001c0a:	4b9e      	ldr	r3, [pc, #632]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001c0c:	f893 3746 	ldrb.w	r3, [r3, #1862]	; 0x746
 8001c10:	4a9d      	ldr	r2, [pc, #628]	; (8001e88 <FUNC_OutputData+0xa80>)
 8001c12:	f882 311e 	strb.w	r3, [r2, #286]	; 0x11e

  /* RelationalOperator: '<S108>/Compare' */
  VCU_B.Compare_k5 = VCU_B.LC_active_bit;
 8001c16:	4b9b      	ldr	r3, [pc, #620]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001c18:	f893 3782 	ldrb.w	r3, [r3, #1922]	; 0x782
 8001c1c:	4a99      	ldr	r2, [pc, #612]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001c1e:	f882 380c 	strb.w	r3, [r2, #2060]	; 0x80c

  /* Gain: '<S84>/Factor' */
  VCU_B.Factor_c0 = (uint8_T)(VCU_B.Compare_k5 << 7);
 8001c22:	4b98      	ldr	r3, [pc, #608]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001c24:	f893 380c 	ldrb.w	r3, [r3, #2060]	; 0x80c
 8001c28:	01db      	lsls	r3, r3, #7
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	4a95      	ldr	r2, [pc, #596]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001c2e:	f882 377a 	strb.w	r3, [r2, #1914]	; 0x77a

  /* Sum: '<S84>/Add1' */
  VCU_B.Add1_n = (real_T)VCU_B.Factor_c0 * 0.0078125;
 8001c32:	4b94      	ldr	r3, [pc, #592]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001c34:	f893 377a 	ldrb.w	r3, [r3, #1914]	; 0x77a
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f00c ffd7 	bl	800ebec <__aeabi_ui2d>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001c4e:	f00d f843 	bl	800ecd8 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4b8a      	ldr	r3, [pc, #552]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001c5c:	e9c3 01ea 	strd	r0, r1, [r3, #936]	; 0x3a8

  /* DataTypeConversion: '<S84>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_n);
 8001c60:	4b88      	ldr	r3, [pc, #544]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001c62:	e9d3 23ea 	ldrd	r2, r3, [r3, #936]	; 0x3a8
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f00c fc41 	bl	800e4f0 <floor>
 8001c6e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8001c72:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001c76:	f004 fc63 	bl	8006540 <rtIsNaN>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d106      	bne.n	8001c8e <FUNC_OutputData+0x886>
 8001c80:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001c84:	f004 fc38 	bl	80064f8 <rtIsInf>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d006      	beq.n	8001c9c <FUNC_OutputData+0x894>
    tmp = 0.0;
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001c9a:	e008      	b.n	8001cae <FUNC_OutputData+0x8a6>
  } else {
    tmp = fmod(tmp, 256.0);
 8001c9c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	4b79      	ldr	r3, [pc, #484]	; (8001e8c <FUNC_OutputData+0xa84>)
 8001ca6:	f00c fcab 	bl	800e600 <fmod>
 8001caa:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_ou = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001cae:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	f00d fa7f 	bl	800f1bc <__aeabi_dcmplt>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d012      	beq.n	8001cea <FUNC_OutputData+0x8e2>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001cc4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cd0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001cd8:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001cdc:	f00d fa96 	bl	800f20c <__aeabi_d2uiz>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_ou = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001ce4:	425b      	negs	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	e005      	b.n	8001cf6 <FUNC_OutputData+0x8ee>
 8001cea:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001cee:	f00d fa8d 	bl	800f20c <__aeabi_d2uiz>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	4a63      	ldr	r2, [pc, #396]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001cf8:	f882 3747 	strb.w	r3, [r2, #1863]	; 0x747
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S84>/Data Type Conversion10' */

  /* DataStoreWrite: '<S66>/Data Store Write4' */
  VCU_DW.VAR_OUT_LC_active_bit = VCU_B.DataTypeConversion10_ou;
 8001cfc:	4b61      	ldr	r3, [pc, #388]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001cfe:	f893 3747 	ldrb.w	r3, [r3, #1863]	; 0x747
 8001d02:	4a61      	ldr	r2, [pc, #388]	; (8001e88 <FUNC_OutputData+0xa80>)
 8001d04:	f882 311f 	strb.w	r3, [r2, #287]	; 0x11f

  /* Gain: '<S85>/Factor' */
  VCU_B.Factor_b4 = (uint8_T)(VCU_B.LC_ready_bit << 7);
 8001d08:	4b5e      	ldr	r3, [pc, #376]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001d0a:	f893 3783 	ldrb.w	r3, [r3, #1923]	; 0x783
 8001d0e:	01db      	lsls	r3, r3, #7
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	4a5c      	ldr	r2, [pc, #368]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001d14:	f882 377b 	strb.w	r3, [r2, #1915]	; 0x77b

  /* Sum: '<S85>/Add1' */
  VCU_B.Add1_jg = (real_T)VCU_B.Factor_b4 * 0.0078125;
 8001d18:	4b5a      	ldr	r3, [pc, #360]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001d1a:	f893 377b 	ldrb.w	r3, [r3, #1915]	; 0x77b
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f00c ff64 	bl	800ebec <__aeabi_ui2d>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d34:	f00c ffd0 	bl	800ecd8 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4b50      	ldr	r3, [pc, #320]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001d42:	e9c3 01ec 	strd	r0, r1, [r3, #944]	; 0x3b0

  /* DataTypeConversion: '<S85>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_jg);
 8001d46:	4b4f      	ldr	r3, [pc, #316]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001d48:	e9d3 23ec 	ldrd	r2, r3, [r3, #944]	; 0x3b0
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f00c fbce 	bl	800e4f0 <floor>
 8001d54:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8001d58:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d5c:	f004 fbf0 	bl	8006540 <rtIsNaN>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <FUNC_OutputData+0x96c>
 8001d66:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d6a:	f004 fbc5 	bl	80064f8 <rtIsInf>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d006      	beq.n	8001d82 <FUNC_OutputData+0x97a>
    tmp = 0.0;
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001d80:	e008      	b.n	8001d94 <FUNC_OutputData+0x98c>
  } else {
    tmp = fmod(tmp, 256.0);
 8001d82:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	4b40      	ldr	r3, [pc, #256]	; (8001e8c <FUNC_OutputData+0xa84>)
 8001d8c:	f00c fc38 	bl	800e600 <fmod>
 8001d90:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_p = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001d94:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	f00d fa0c 	bl	800f1bc <__aeabi_dcmplt>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d012      	beq.n	8001dd0 <FUNC_OutputData+0x9c8>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001daa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001dae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001dba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001dbe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001dc2:	f00d fa23 	bl	800f20c <__aeabi_d2uiz>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_p = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001dca:	425b      	negs	r3, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	e005      	b.n	8001ddc <FUNC_OutputData+0x9d4>
 8001dd0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001dd4:	f00d fa1a 	bl	800f20c <__aeabi_d2uiz>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4a29      	ldr	r2, [pc, #164]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001dde:	f882 3748 	strb.w	r3, [r2, #1864]	; 0x748
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S85>/Data Type Conversion10' */

  /* DataStoreWrite: '<S66>/Data Store Write5' */
  VCU_DW.VAR_OUT_LC_ready_bit = VCU_B.DataTypeConversion10_p;
 8001de2:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001de4:	f893 3748 	ldrb.w	r3, [r3, #1864]	; 0x748
 8001de8:	4a27      	ldr	r2, [pc, #156]	; (8001e88 <FUNC_OutputData+0xa80>)
 8001dea:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120

  /* Sum: '<S86>/Add1' */
  VCU_B.Add1_bq = VCU_B.LC_Mdes;
 8001dee:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001df0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001df4:	4923      	ldr	r1, [pc, #140]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001df6:	e9c1 23ee 	strd	r2, r3, [r1, #952]	; 0x3b8

  /* DataTypeConversion: '<S86>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_bq);
 8001dfa:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <FUNC_OutputData+0xa7c>)
 8001dfc:	e9d3 23ee 	ldrd	r2, r3, [r3, #952]	; 0x3b8
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f00c fb74 	bl	800e4f0 <floor>
 8001e08:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8001e0c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e10:	f004 fb96 	bl	8006540 <rtIsNaN>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <FUNC_OutputData+0xa20>
 8001e1a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e1e:	f004 fb6b 	bl	80064f8 <rtIsInf>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <FUNC_OutputData+0xa2e>
    tmp = 0.0;
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001e34:	e008      	b.n	8001e48 <FUNC_OutputData+0xa40>
  } else {
    tmp = fmod(tmp, 256.0);
 8001e36:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <FUNC_OutputData+0xa84>)
 8001e40:	f00c fbde 	bl	800e600 <fmod>
 8001e44:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_ci = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001e48:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	f00d f9b2 	bl	800f1bc <__aeabi_dcmplt>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d018      	beq.n	8001e90 <FUNC_OutputData+0xa88>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001e5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001e62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e6a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001e76:	f00d f9c9 	bl	800f20c <__aeabi_d2uiz>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_ci = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001e7e:	425b      	negs	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	e00b      	b.n	8001e9c <FUNC_OutputData+0xa94>
 8001e84:	200008a8 	.word	0x200008a8
 8001e88:	200010c8 	.word	0x200010c8
 8001e8c:	40700000 	.word	0x40700000
 8001e90:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e94:	f00d f9ba 	bl	800f20c <__aeabi_d2uiz>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	4aaa      	ldr	r2, [pc, #680]	; (8002148 <FUNC_OutputData+0xd40>)
 8001e9e:	f882 3749 	strb.w	r3, [r2, #1865]	; 0x749
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S86>/Data Type Conversion10' */

  /* DataStoreWrite: '<S66>/Data Store Write6' */
  VCU_DW.VAR_OUT_LC_Mdes = VCU_B.DataTypeConversion10_ci;
 8001ea2:	4ba9      	ldr	r3, [pc, #676]	; (8002148 <FUNC_OutputData+0xd40>)
 8001ea4:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8001ea8:	4aa8      	ldr	r2, [pc, #672]	; (800214c <FUNC_OutputData+0xd44>)
 8001eaa:	f882 3121 	strb.w	r3, [r2, #289]	; 0x121

  /* Gain: '<S87>/Factor' */
  VCU_B.Factor_n = 0.1 * VCU_B.LC_Fnr;
 8001eae:	4ba6      	ldr	r3, [pc, #664]	; (8002148 <FUNC_OutputData+0xd40>)
 8001eb0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	a3a1      	add	r3, pc, #644	; (adr r3, 8002140 <FUNC_OutputData+0xd38>)
 8001eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebe:	f00c ff0b 	bl	800ecd8 <__aeabi_dmul>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4b9f      	ldr	r3, [pc, #636]	; (8002148 <FUNC_OutputData+0xd40>)
 8001ecc:	e9c3 01f0 	strd	r0, r1, [r3, #960]	; 0x3c0

  /* Sum: '<S87>/Add1' */
  VCU_B.Add1_io = VCU_B.Factor_n;
 8001ed0:	4b9d      	ldr	r3, [pc, #628]	; (8002148 <FUNC_OutputData+0xd40>)
 8001ed2:	e9d3 23f0 	ldrd	r2, r3, [r3, #960]	; 0x3c0
 8001ed6:	499c      	ldr	r1, [pc, #624]	; (8002148 <FUNC_OutputData+0xd40>)
 8001ed8:	e9c1 23f2 	strd	r2, r3, [r1, #968]	; 0x3c8

  /* DataTypeConversion: '<S87>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_io);
 8001edc:	4b9a      	ldr	r3, [pc, #616]	; (8002148 <FUNC_OutputData+0xd40>)
 8001ede:	e9d3 23f2 	ldrd	r2, r3, [r3, #968]	; 0x3c8
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f00c fb03 	bl	800e4f0 <floor>
 8001eea:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8001eee:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001ef2:	f004 fb25 	bl	8006540 <rtIsNaN>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d106      	bne.n	8001f0a <FUNC_OutputData+0xb02>
 8001efc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f00:	f004 fafa 	bl	80064f8 <rtIsInf>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d006      	beq.n	8001f18 <FUNC_OutputData+0xb10>
    tmp = 0.0;
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001f16:	e008      	b.n	8001f2a <FUNC_OutputData+0xb22>
  } else {
    tmp = fmod(tmp, 256.0);
 8001f18:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	4b8b      	ldr	r3, [pc, #556]	; (8002150 <FUNC_OutputData+0xd48>)
 8001f22:	f00c fb6d 	bl	800e600 <fmod>
 8001f26:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_j = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001f2a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	f00d f941 	bl	800f1bc <__aeabi_dcmplt>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d012      	beq.n	8001f66 <FUNC_OutputData+0xb5e>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001f40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001f44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f54:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001f58:	f00d f958 	bl	800f20c <__aeabi_d2uiz>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_j = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001f60:	425b      	negs	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	e005      	b.n	8001f72 <FUNC_OutputData+0xb6a>
 8001f66:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f6a:	f00d f94f 	bl	800f20c <__aeabi_d2uiz>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	4a75      	ldr	r2, [pc, #468]	; (8002148 <FUNC_OutputData+0xd40>)
 8001f74:	f882 374a 	strb.w	r3, [r2, #1866]	; 0x74a
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S87>/Data Type Conversion10' */

  /* DataStoreWrite: '<S66>/Data Store Write7' */
  VCU_DW.VAR_OUT_LC_Fnr = VCU_B.DataTypeConversion10_j;
 8001f78:	4b73      	ldr	r3, [pc, #460]	; (8002148 <FUNC_OutputData+0xd40>)
 8001f7a:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8001f7e:	4a73      	ldr	r2, [pc, #460]	; (800214c <FUNC_OutputData+0xd44>)
 8001f80:	f882 3122 	strb.w	r3, [r2, #290]	; 0x122

  /* Sum: '<S74>/Add1' */
  VCU_B.Add1_p = VCU_B.ABS_switchstate;
 8001f84:	4b70      	ldr	r3, [pc, #448]	; (8002148 <FUNC_OutputData+0xd40>)
 8001f86:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	496e      	ldr	r1, [pc, #440]	; (8002148 <FUNC_OutputData+0xd40>)
 8001f90:	e9c1 23f4 	strd	r2, r3, [r1, #976]	; 0x3d0

  /* DataTypeConversion: '<S74>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_p);
 8001f94:	4b6c      	ldr	r3, [pc, #432]	; (8002148 <FUNC_OutputData+0xd40>)
 8001f96:	e9d3 23f4 	ldrd	r2, r3, [r3, #976]	; 0x3d0
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f00c faa7 	bl	800e4f0 <floor>
 8001fa2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8001fa6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001faa:	f004 fac9 	bl	8006540 <rtIsNaN>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d106      	bne.n	8001fc2 <FUNC_OutputData+0xbba>
 8001fb4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001fb8:	f004 fa9e 	bl	80064f8 <rtIsInf>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d006      	beq.n	8001fd0 <FUNC_OutputData+0xbc8>
    tmp = 0.0;
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001fce:	e008      	b.n	8001fe2 <FUNC_OutputData+0xbda>
  } else {
    tmp = fmod(tmp, 256.0);
 8001fd0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	4b5d      	ldr	r3, [pc, #372]	; (8002150 <FUNC_OutputData+0xd48>)
 8001fda:	f00c fb11 	bl	800e600 <fmod>
 8001fde:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_o3 = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8001fe2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	f00d f8e5 	bl	800f1bc <__aeabi_dcmplt>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d012      	beq.n	800201e <FUNC_OutputData+0xc16>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8001ff8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001ffc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002004:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800200c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002010:	f00d f8fc 	bl	800f20c <__aeabi_d2uiz>
 8002014:	4603      	mov	r3, r0
 8002016:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_o3 = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002018:	425b      	negs	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	e005      	b.n	800202a <FUNC_OutputData+0xc22>
 800201e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002022:	f00d f8f3 	bl	800f20c <__aeabi_d2uiz>
 8002026:	4603      	mov	r3, r0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	4a47      	ldr	r2, [pc, #284]	; (8002148 <FUNC_OutputData+0xd40>)
 800202c:	f882 374b 	strb.w	r3, [r2, #1867]	; 0x74b
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S74>/Data Type Conversion10' */

  /* DataStoreWrite: '<S65>/Data Store Write' */
  VCU_DW.VAR_OUT_ABS_switchstate = VCU_B.DataTypeConversion10_o3;
 8002030:	4b45      	ldr	r3, [pc, #276]	; (8002148 <FUNC_OutputData+0xd40>)
 8002032:	f893 374b 	ldrb.w	r3, [r3, #1867]	; 0x74b
 8002036:	4a45      	ldr	r2, [pc, #276]	; (800214c <FUNC_OutputData+0xd44>)
 8002038:	f882 3123 	strb.w	r3, [r2, #291]	; 0x123

  /* Sum: '<S75>/Add1' */
  VCU_B.Add1_c = VCU_B.Add1_m;
 800203c:	4b42      	ldr	r3, [pc, #264]	; (8002148 <FUNC_OutputData+0xd40>)
 800203e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	4940      	ldr	r1, [pc, #256]	; (8002148 <FUNC_OutputData+0xd40>)
 8002048:	e9c1 23f6 	strd	r2, r3, [r1, #984]	; 0x3d8

  /* DataTypeConversion: '<S75>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_c);
 800204c:	4b3e      	ldr	r3, [pc, #248]	; (8002148 <FUNC_OutputData+0xd40>)
 800204e:	e9d3 23f6 	ldrd	r2, r3, [r3, #984]	; 0x3d8
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	f00c fa4b 	bl	800e4f0 <floor>
 800205a:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 800205e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002062:	f004 fa6d 	bl	8006540 <rtIsNaN>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d106      	bne.n	800207a <FUNC_OutputData+0xc72>
 800206c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002070:	f004 fa42 	bl	80064f8 <rtIsInf>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d006      	beq.n	8002088 <FUNC_OutputData+0xc80>
    tmp = 0.0;
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002086:	e008      	b.n	800209a <FUNC_OutputData+0xc92>
  } else {
    tmp = fmod(tmp, 65536.0);
 8002088:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	4b30      	ldr	r3, [pc, #192]	; (8002154 <FUNC_OutputData+0xd4c>)
 8002092:	f00c fab5 	bl	800e600 <fmod>
 8002096:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_h = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 800209a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	f00d f889 	bl	800f1bc <__aeabi_dcmplt>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d012      	beq.n	80020d6 <FUNC_OutputData+0xcce>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 80020b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80020b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80020b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80020c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80020c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80020c8:	f00d f8a0 	bl	800f20c <__aeabi_d2uiz>
 80020cc:	4603      	mov	r3, r0
 80020ce:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10_h = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80020d0:	425b      	negs	r3, r3
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	e005      	b.n	80020e2 <FUNC_OutputData+0xcda>
 80020d6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80020da:	f00d f897 	bl	800f20c <__aeabi_d2uiz>
 80020de:	4603      	mov	r3, r0
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	4a19      	ldr	r2, [pc, #100]	; (8002148 <FUNC_OutputData+0xd40>)
 80020e4:	f8a2 3702 	strh.w	r3, [r2, #1794]	; 0x702
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S75>/Data Type Conversion10' */

  /* DataStoreWrite: '<S65>/Data Store Write1' */
  VCU_DW.VAR_OUT_p_brake_F = VCU_B.DataTypeConversion10_h;
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <FUNC_OutputData+0xd40>)
 80020ea:	f8b3 3702 	ldrh.w	r3, [r3, #1794]	; 0x702
 80020ee:	4a17      	ldr	r2, [pc, #92]	; (800214c <FUNC_OutputData+0xd44>)
 80020f0:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca

  /* Sum: '<S76>/Add1' */
  VCU_B.Add1_js = VCU_B.ABS_BL_switch;
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <FUNC_OutputData+0xd40>)
 80020f6:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	4912      	ldr	r1, [pc, #72]	; (8002148 <FUNC_OutputData+0xd40>)
 8002100:	e9c1 23f8 	strd	r2, r3, [r1, #992]	; 0x3e0

  /* DataTypeConversion: '<S76>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_js);
 8002104:	4b10      	ldr	r3, [pc, #64]	; (8002148 <FUNC_OutputData+0xd40>)
 8002106:	e9d3 23f8 	ldrd	r2, r3, [r3, #992]	; 0x3e0
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	f00c f9ef 	bl	800e4f0 <floor>
 8002112:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002116:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800211a:	f004 fa11 	bl	8006540 <rtIsNaN>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d106      	bne.n	8002132 <FUNC_OutputData+0xd2a>
 8002124:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002128:	f004 f9e6 	bl	80064f8 <rtIsInf>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d012      	beq.n	8002158 <FUNC_OutputData+0xd50>
    tmp = 0.0;
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800213e:	e014      	b.n	800216a <FUNC_OutputData+0xd62>
 8002140:	9999999a 	.word	0x9999999a
 8002144:	3fb99999 	.word	0x3fb99999
 8002148:	200008a8 	.word	0x200008a8
 800214c:	200010c8 	.word	0x200010c8
 8002150:	40700000 	.word	0x40700000
 8002154:	40f00000 	.word	0x40f00000
  } else {
    tmp = fmod(tmp, 256.0);
 8002158:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	4b9a      	ldr	r3, [pc, #616]	; (80023cc <FUNC_OutputData+0xfc4>)
 8002162:	f00c fa4d 	bl	800e600 <fmod>
 8002166:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_ok = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 800216a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	f00d f821 	bl	800f1bc <__aeabi_dcmplt>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d012      	beq.n	80021a6 <FUNC_OutputData+0xd9e>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8002180:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002184:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002190:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002194:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002198:	f00d f838 	bl	800f20c <__aeabi_d2uiz>
 800219c:	4603      	mov	r3, r0
 800219e:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_ok = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 80021a0:	425b      	negs	r3, r3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	e005      	b.n	80021b2 <FUNC_OutputData+0xdaa>
 80021a6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80021aa:	f00d f82f 	bl	800f20c <__aeabi_d2uiz>
 80021ae:	4603      	mov	r3, r0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4a87      	ldr	r2, [pc, #540]	; (80023d0 <FUNC_OutputData+0xfc8>)
 80021b4:	f882 374c 	strb.w	r3, [r2, #1868]	; 0x74c
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S76>/Data Type Conversion10' */

  /* DataStoreWrite: '<S65>/Data Store Write2' */
  VCU_DW.VAR_OUT_ABS_BL_switch = VCU_B.DataTypeConversion10_ok;
 80021b8:	4b85      	ldr	r3, [pc, #532]	; (80023d0 <FUNC_OutputData+0xfc8>)
 80021ba:	f893 374c 	ldrb.w	r3, [r3, #1868]	; 0x74c
 80021be:	4a85      	ldr	r2, [pc, #532]	; (80023d4 <FUNC_OutputData+0xfcc>)
 80021c0:	f882 3124 	strb.w	r3, [r2, #292]	; 0x124

  /* Sum: '<S77>/Add1' */
  VCU_B.Add1_ak = VCU_B.ABS_active;
 80021c4:	4b82      	ldr	r3, [pc, #520]	; (80023d0 <FUNC_OutputData+0xfc8>)
 80021c6:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	4980      	ldr	r1, [pc, #512]	; (80023d0 <FUNC_OutputData+0xfc8>)
 80021d0:	e9c1 23fa 	strd	r2, r3, [r1, #1000]	; 0x3e8

  /* DataTypeConversion: '<S77>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_ak);
 80021d4:	4b7e      	ldr	r3, [pc, #504]	; (80023d0 <FUNC_OutputData+0xfc8>)
 80021d6:	e9d3 23fa 	ldrd	r2, r3, [r3, #1000]	; 0x3e8
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	f00c f987 	bl	800e4f0 <floor>
 80021e2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 80021e6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80021ea:	f004 f9a9 	bl	8006540 <rtIsNaN>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d106      	bne.n	8002202 <FUNC_OutputData+0xdfa>
 80021f4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80021f8:	f004 f97e 	bl	80064f8 <rtIsInf>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d006      	beq.n	8002210 <FUNC_OutputData+0xe08>
    tmp = 0.0;
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800220e:	e008      	b.n	8002222 <FUNC_OutputData+0xe1a>
  } else {
    tmp = fmod(tmp, 256.0);
 8002210:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	4b6c      	ldr	r3, [pc, #432]	; (80023cc <FUNC_OutputData+0xfc4>)
 800221a:	f00c f9f1 	bl	800e600 <fmod>
 800221e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_ah = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002222:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	f00c ffc5 	bl	800f1bc <__aeabi_dcmplt>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d012      	beq.n	800225e <FUNC_OutputData+0xe56>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8002238:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800223c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002244:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002248:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800224c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002250:	f00c ffdc 	bl	800f20c <__aeabi_d2uiz>
 8002254:	4603      	mov	r3, r0
 8002256:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_ah = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002258:	425b      	negs	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	e005      	b.n	800226a <FUNC_OutputData+0xe62>
 800225e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002262:	f00c ffd3 	bl	800f20c <__aeabi_d2uiz>
 8002266:	4603      	mov	r3, r0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	4a59      	ldr	r2, [pc, #356]	; (80023d0 <FUNC_OutputData+0xfc8>)
 800226c:	f882 374d 	strb.w	r3, [r2, #1869]	; 0x74d
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S77>/Data Type Conversion10' */

  /* DataStoreWrite: '<S65>/Data Store Write3' */
  VCU_DW.VAR_OUT_ABS_active = VCU_B.DataTypeConversion10_ah;
 8002270:	4b57      	ldr	r3, [pc, #348]	; (80023d0 <FUNC_OutputData+0xfc8>)
 8002272:	f893 374d 	ldrb.w	r3, [r3, #1869]	; 0x74d
 8002276:	4a57      	ldr	r2, [pc, #348]	; (80023d4 <FUNC_OutputData+0xfcc>)
 8002278:	f882 3125 	strb.w	r3, [r2, #293]	; 0x125

  /* Sum: '<S78>/Add1' */
  VCU_B.Add1_n4 = VCU_B.ABS_EBD_Lamp;
 800227c:	4b54      	ldr	r3, [pc, #336]	; (80023d0 <FUNC_OutputData+0xfc8>)
 800227e:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	4952      	ldr	r1, [pc, #328]	; (80023d0 <FUNC_OutputData+0xfc8>)
 8002288:	e9c1 23fc 	strd	r2, r3, [r1, #1008]	; 0x3f0

  /* DataTypeConversion: '<S78>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_n4);
 800228c:	4b50      	ldr	r3, [pc, #320]	; (80023d0 <FUNC_OutputData+0xfc8>)
 800228e:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8002292:	4610      	mov	r0, r2
 8002294:	4619      	mov	r1, r3
 8002296:	f00c f92b 	bl	800e4f0 <floor>
 800229a:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 800229e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80022a2:	f004 f94d 	bl	8006540 <rtIsNaN>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d106      	bne.n	80022ba <FUNC_OutputData+0xeb2>
 80022ac:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80022b0:	f004 f922 	bl	80064f8 <rtIsInf>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d006      	beq.n	80022c8 <FUNC_OutputData+0xec0>
    tmp = 0.0;
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80022c6:	e008      	b.n	80022da <FUNC_OutputData+0xed2>
  } else {
    tmp = fmod(tmp, 256.0);
 80022c8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	4b3e      	ldr	r3, [pc, #248]	; (80023cc <FUNC_OutputData+0xfc4>)
 80022d2:	f00c f995 	bl	800e600 <fmod>
 80022d6:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_d = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 80022da:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	f00c ff69 	bl	800f1bc <__aeabi_dcmplt>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d012      	beq.n	8002316 <FUNC_OutputData+0xf0e>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 80022f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80022f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002304:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002308:	f00c ff80 	bl	800f20c <__aeabi_d2uiz>
 800230c:	4603      	mov	r3, r0
 800230e:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_d = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002310:	425b      	negs	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	e005      	b.n	8002322 <FUNC_OutputData+0xf1a>
 8002316:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800231a:	f00c ff77 	bl	800f20c <__aeabi_d2uiz>
 800231e:	4603      	mov	r3, r0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	4a2b      	ldr	r2, [pc, #172]	; (80023d0 <FUNC_OutputData+0xfc8>)
 8002324:	f882 374e 	strb.w	r3, [r2, #1870]	; 0x74e
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S78>/Data Type Conversion10' */

  /* DataStoreWrite: '<S65>/Data Store Write4' */
  VCU_DW.VAR_OUT_ABS_EBD_Lamp = VCU_B.DataTypeConversion10_d;
 8002328:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <FUNC_OutputData+0xfc8>)
 800232a:	f893 374e 	ldrb.w	r3, [r3, #1870]	; 0x74e
 800232e:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <FUNC_OutputData+0xfcc>)
 8002330:	f882 3126 	strb.w	r3, [r2, #294]	; 0x126

  /* Sum: '<S79>/Add1' */
  VCU_B.Add1_h = VCU_B.ABS_Lamp;
 8002334:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <FUNC_OutputData+0xfc8>)
 8002336:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 800233a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233e:	4924      	ldr	r1, [pc, #144]	; (80023d0 <FUNC_OutputData+0xfc8>)
 8002340:	e9c1 23fe 	strd	r2, r3, [r1, #1016]	; 0x3f8

  /* DataTypeConversion: '<S79>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_h);
 8002344:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <FUNC_OutputData+0xfc8>)
 8002346:	e9d3 23fe 	ldrd	r2, r3, [r3, #1016]	; 0x3f8
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	f00c f8cf 	bl	800e4f0 <floor>
 8002352:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002356:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800235a:	f004 f8f1 	bl	8006540 <rtIsNaN>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d106      	bne.n	8002372 <FUNC_OutputData+0xf6a>
 8002364:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002368:	f004 f8c6 	bl	80064f8 <rtIsInf>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <FUNC_OutputData+0xf78>
    tmp = 0.0;
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800237e:	e008      	b.n	8002392 <FUNC_OutputData+0xf8a>
  } else {
    tmp = fmod(tmp, 256.0);
 8002380:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	4b10      	ldr	r3, [pc, #64]	; (80023cc <FUNC_OutputData+0xfc4>)
 800238a:	f00c f939 	bl	800e600 <fmod>
 800238e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_bd = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002392:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	f00c ff0d 	bl	800f1bc <__aeabi_dcmplt>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d017      	beq.n	80023d8 <FUNC_OutputData+0xfd0>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 80023a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80023ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80023ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023b8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80023bc:	f00c ff26 	bl	800f20c <__aeabi_d2uiz>
 80023c0:	4603      	mov	r3, r0
 80023c2:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_bd = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 80023c4:	425b      	negs	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	e00c      	b.n	80023e4 <FUNC_OutputData+0xfdc>
 80023ca:	bf00      	nop
 80023cc:	40700000 	.word	0x40700000
 80023d0:	200008a8 	.word	0x200008a8
 80023d4:	200010c8 	.word	0x200010c8
 80023d8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80023dc:	f00c ff16 	bl	800f20c <__aeabi_d2uiz>
 80023e0:	4603      	mov	r3, r0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	4aa9      	ldr	r2, [pc, #676]	; (800268c <FUNC_OutputData+0x1284>)
 80023e6:	f882 374f 	strb.w	r3, [r2, #1871]	; 0x74f
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S79>/Data Type Conversion10' */

  /* DataStoreWrite: '<S65>/Data Store Write5' */
  VCU_DW.VAR_OUT_ABS_Lamp = VCU_B.DataTypeConversion10_bd;
 80023ea:	4ba8      	ldr	r3, [pc, #672]	; (800268c <FUNC_OutputData+0x1284>)
 80023ec:	f893 374f 	ldrb.w	r3, [r3, #1871]	; 0x74f
 80023f0:	4aa7      	ldr	r2, [pc, #668]	; (8002690 <FUNC_OutputData+0x1288>)
 80023f2:	f882 3127 	strb.w	r3, [r2, #295]	; 0x127

  /* Gain: '<S88>/Factor' */
  VCU_B.Factor_a = 10.0 * VCU_B.Saturation1_e;
 80023f6:	4ba5      	ldr	r3, [pc, #660]	; (800268c <FUNC_OutputData+0x1284>)
 80023f8:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	4ba2      	ldr	r3, [pc, #648]	; (8002694 <FUNC_OutputData+0x128c>)
 800240a:	f00c fc65 	bl	800ecd8 <__aeabi_dmul>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4610      	mov	r0, r2
 8002414:	4619      	mov	r1, r3
 8002416:	4b9d      	ldr	r3, [pc, #628]	; (800268c <FUNC_OutputData+0x1284>)
 8002418:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800241c:	e9c3 0100 	strd	r0, r1, [r3]

  /* Sum: '<S88>/Add1' */
  VCU_B.Add1_lh = VCU_B.Factor_a;
 8002420:	4b9a      	ldr	r3, [pc, #616]	; (800268c <FUNC_OutputData+0x1284>)
 8002422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002426:	e9d3 0100 	ldrd	r0, r1, [r3]
 800242a:	4b98      	ldr	r3, [pc, #608]	; (800268c <FUNC_OutputData+0x1284>)
 800242c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002430:	e9c3 0100 	strd	r0, r1, [r3]

  /* DataTypeConversion: '<S88>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_lh);
 8002434:	4b95      	ldr	r3, [pc, #596]	; (800268c <FUNC_OutputData+0x1284>)
 8002436:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800243a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	f00c f855 	bl	800e4f0 <floor>
 8002446:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 800244a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800244e:	f004 f877 	bl	8006540 <rtIsNaN>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d106      	bne.n	8002466 <FUNC_OutputData+0x105e>
 8002458:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800245c:	f004 f84c 	bl	80064f8 <rtIsInf>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <FUNC_OutputData+0x106c>
    tmp = 0.0;
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002472:	e008      	b.n	8002486 <FUNC_OutputData+0x107e>
  } else {
    tmp = fmod(tmp, 65536.0);
 8002474:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	4b86      	ldr	r3, [pc, #536]	; (8002698 <FUNC_OutputData+0x1290>)
 800247e:	f00c f8bf 	bl	800e600 <fmod>
 8002482:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_m = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 8002486:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	f00c fe93 	bl	800f1bc <__aeabi_dcmplt>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d010      	beq.n	80024be <FUNC_OutputData+0x10b6>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 800249c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80024a0:	673b      	str	r3, [r7, #112]	; 0x70
 80024a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80024aa:	677b      	str	r3, [r7, #116]	; 0x74
 80024ac:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80024b0:	f00c feac 	bl	800f20c <__aeabi_d2uiz>
 80024b4:	4603      	mov	r3, r0
 80024b6:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10_m = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 80024b8:	425b      	negs	r3, r3
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	e005      	b.n	80024ca <FUNC_OutputData+0x10c2>
 80024be:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80024c2:	f00c fea3 	bl	800f20c <__aeabi_d2uiz>
 80024c6:	4603      	mov	r3, r0
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	4a70      	ldr	r2, [pc, #448]	; (800268c <FUNC_OutputData+0x1284>)
 80024cc:	f8a2 3704 	strh.w	r3, [r2, #1796]	; 0x704
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S88>/Data Type Conversion10' */

  /* DataStoreWrite: '<S67>/Data Store Write' */
  VCU_DW.VAR_OUT_f_FL = VCU_B.DataTypeConversion10_m;
 80024d0:	4b6e      	ldr	r3, [pc, #440]	; (800268c <FUNC_OutputData+0x1284>)
 80024d2:	f8b3 3704 	ldrh.w	r3, [r3, #1796]	; 0x704
 80024d6:	4a6e      	ldr	r2, [pc, #440]	; (8002690 <FUNC_OutputData+0x1288>)
 80024d8:	f8a2 30cc 	strh.w	r3, [r2, #204]	; 0xcc

  /* Gain: '<S89>/Factor' */
  VCU_B.Factor_i = 10.0 * VCU_B.Saturation1_n;
 80024dc:	4b6b      	ldr	r3, [pc, #428]	; (800268c <FUNC_OutputData+0x1284>)
 80024de:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	4b69      	ldr	r3, [pc, #420]	; (8002694 <FUNC_OutputData+0x128c>)
 80024f0:	f00c fbf2 	bl	800ecd8 <__aeabi_dmul>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	4b63      	ldr	r3, [pc, #396]	; (800268c <FUNC_OutputData+0x1284>)
 80024fe:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8002502:	e9c3 0100 	strd	r0, r1, [r3]

  /* Sum: '<S89>/Add1' */
  VCU_B.Add1_bqm = VCU_B.Factor_i;
 8002506:	4b61      	ldr	r3, [pc, #388]	; (800268c <FUNC_OutputData+0x1284>)
 8002508:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800250c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002510:	4b5e      	ldr	r3, [pc, #376]	; (800268c <FUNC_OutputData+0x1284>)
 8002512:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8002516:	e9c3 0100 	strd	r0, r1, [r3]

  /* DataTypeConversion: '<S89>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_bqm);
 800251a:	4b5c      	ldr	r3, [pc, #368]	; (800268c <FUNC_OutputData+0x1284>)
 800251c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	f00b ffe2 	bl	800e4f0 <floor>
 800252c:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002530:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002534:	f004 f804 	bl	8006540 <rtIsNaN>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <FUNC_OutputData+0x1144>
 800253e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002542:	f003 ffd9 	bl	80064f8 <rtIsInf>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d006      	beq.n	800255a <FUNC_OutputData+0x1152>
    tmp = 0.0;
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002558:	e008      	b.n	800256c <FUNC_OutputData+0x1164>
  } else {
    tmp = fmod(tmp, 65536.0);
 800255a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	4b4d      	ldr	r3, [pc, #308]	; (8002698 <FUNC_OutputData+0x1290>)
 8002564:	f00c f84c 	bl	800e600 <fmod>
 8002568:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_f = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 800256c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	f00c fe20 	bl	800f1bc <__aeabi_dcmplt>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d010      	beq.n	80025a4 <FUNC_OutputData+0x119c>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 8002582:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002586:	66bb      	str	r3, [r7, #104]	; 0x68
 8002588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002590:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002592:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002596:	f00c fe39 	bl	800f20c <__aeabi_d2uiz>
 800259a:	4603      	mov	r3, r0
 800259c:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10_f = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 800259e:	425b      	negs	r3, r3
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	e005      	b.n	80025b0 <FUNC_OutputData+0x11a8>
 80025a4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80025a8:	f00c fe30 	bl	800f20c <__aeabi_d2uiz>
 80025ac:	4603      	mov	r3, r0
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	4a36      	ldr	r2, [pc, #216]	; (800268c <FUNC_OutputData+0x1284>)
 80025b2:	f8a2 3706 	strh.w	r3, [r2, #1798]	; 0x706
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S89>/Data Type Conversion10' */

  /* DataStoreWrite: '<S67>/Data Store Write1' */
  VCU_DW.VAR_OUT_f_FR = VCU_B.DataTypeConversion10_f;
 80025b6:	4b35      	ldr	r3, [pc, #212]	; (800268c <FUNC_OutputData+0x1284>)
 80025b8:	f8b3 3706 	ldrh.w	r3, [r3, #1798]	; 0x706
 80025bc:	4a34      	ldr	r2, [pc, #208]	; (8002690 <FUNC_OutputData+0x1288>)
 80025be:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce

  /* Gain: '<S90>/Factor' */
  VCU_B.Factor_jn = 10.0 * VCU_B.Saturation1_o;
 80025c2:	4b32      	ldr	r3, [pc, #200]	; (800268c <FUNC_OutputData+0x1284>)
 80025c4:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <FUNC_OutputData+0x128c>)
 80025d6:	f00c fb7f 	bl	800ecd8 <__aeabi_dmul>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	4b2a      	ldr	r3, [pc, #168]	; (800268c <FUNC_OutputData+0x1284>)
 80025e4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80025e8:	e9c3 0100 	strd	r0, r1, [r3]

  /* Sum: '<S90>/Add1' */
  VCU_B.Add1_iv = VCU_B.Factor_jn;
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <FUNC_OutputData+0x1284>)
 80025ee:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80025f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025f6:	4b25      	ldr	r3, [pc, #148]	; (800268c <FUNC_OutputData+0x1284>)
 80025f8:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80025fc:	e9c3 0100 	strd	r0, r1, [r3]

  /* DataTypeConversion: '<S90>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_iv);
 8002600:	4b22      	ldr	r3, [pc, #136]	; (800268c <FUNC_OutputData+0x1284>)
 8002602:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f00b ff6f 	bl	800e4f0 <floor>
 8002612:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002616:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800261a:	f003 ff91 	bl	8006540 <rtIsNaN>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d106      	bne.n	8002632 <FUNC_OutputData+0x122a>
 8002624:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002628:	f003 ff66 	bl	80064f8 <rtIsInf>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <FUNC_OutputData+0x1238>
    tmp = 0.0;
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800263e:	e008      	b.n	8002652 <FUNC_OutputData+0x124a>
  } else {
    tmp = fmod(tmp, 65536.0);
 8002640:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <FUNC_OutputData+0x1290>)
 800264a:	f00b ffd9 	bl	800e600 <fmod>
 800264e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_a = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 8002652:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	f00c fdad 	bl	800f1bc <__aeabi_dcmplt>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d019      	beq.n	800269c <FUNC_OutputData+0x1294>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 8002668:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800266c:	663b      	str	r3, [r7, #96]	; 0x60
 800266e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002672:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002676:	667b      	str	r3, [r7, #100]	; 0x64
 8002678:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800267c:	f00c fdc6 	bl	800f20c <__aeabi_d2uiz>
 8002680:	4603      	mov	r3, r0
 8002682:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10_a = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 8002684:	425b      	negs	r3, r3
 8002686:	b29b      	uxth	r3, r3
 8002688:	e00e      	b.n	80026a8 <FUNC_OutputData+0x12a0>
 800268a:	bf00      	nop
 800268c:	200008a8 	.word	0x200008a8
 8002690:	200010c8 	.word	0x200010c8
 8002694:	40240000 	.word	0x40240000
 8002698:	40f00000 	.word	0x40f00000
 800269c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80026a0:	f00c fdb4 	bl	800f20c <__aeabi_d2uiz>
 80026a4:	4603      	mov	r3, r0
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	4aab      	ldr	r2, [pc, #684]	; (8002958 <FUNC_OutputData+0x1550>)
 80026aa:	f8a2 3708 	strh.w	r3, [r2, #1800]	; 0x708
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S90>/Data Type Conversion10' */

  /* DataStoreWrite: '<S67>/Data Store Write2' */
  VCU_DW.VAR_OUT_f_RL = VCU_B.DataTypeConversion10_a;
 80026ae:	4baa      	ldr	r3, [pc, #680]	; (8002958 <FUNC_OutputData+0x1550>)
 80026b0:	f8b3 3708 	ldrh.w	r3, [r3, #1800]	; 0x708
 80026b4:	4aa9      	ldr	r2, [pc, #676]	; (800295c <FUNC_OutputData+0x1554>)
 80026b6:	f8a2 30d0 	strh.w	r3, [r2, #208]	; 0xd0

  /* Gain: '<S91>/Factor' */
  VCU_B.Factor_h0 = 10.0 * VCU_B.Saturation1_h;
 80026ba:	4ba7      	ldr	r3, [pc, #668]	; (8002958 <FUNC_OutputData+0x1550>)
 80026bc:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	4ba4      	ldr	r3, [pc, #656]	; (8002960 <FUNC_OutputData+0x1558>)
 80026ce:	f00c fb03 	bl	800ecd8 <__aeabi_dmul>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	4b9f      	ldr	r3, [pc, #636]	; (8002958 <FUNC_OutputData+0x1550>)
 80026dc:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80026e0:	e9c3 0100 	strd	r0, r1, [r3]

  /* Sum: '<S91>/Add1' */
  VCU_B.Add1_i1 = VCU_B.Factor_h0;
 80026e4:	4b9c      	ldr	r3, [pc, #624]	; (8002958 <FUNC_OutputData+0x1550>)
 80026e6:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80026ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ee:	4b9a      	ldr	r3, [pc, #616]	; (8002958 <FUNC_OutputData+0x1550>)
 80026f0:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80026f4:	e9c3 0100 	strd	r0, r1, [r3]

  /* DataTypeConversion: '<S91>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_i1);
 80026f8:	4b97      	ldr	r3, [pc, #604]	; (8002958 <FUNC_OutputData+0x1550>)
 80026fa:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f00b fef3 	bl	800e4f0 <floor>
 800270a:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 800270e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002712:	f003 ff15 	bl	8006540 <rtIsNaN>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d106      	bne.n	800272a <FUNC_OutputData+0x1322>
 800271c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002720:	f003 feea 	bl	80064f8 <rtIsInf>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d006      	beq.n	8002738 <FUNC_OutputData+0x1330>
    tmp = 0.0;
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002736:	e008      	b.n	800274a <FUNC_OutputData+0x1342>
  } else {
    tmp = fmod(tmp, 65536.0);
 8002738:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	4b88      	ldr	r3, [pc, #544]	; (8002964 <FUNC_OutputData+0x155c>)
 8002742:	f00b ff5d 	bl	800e600 <fmod>
 8002746:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_n = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 800274a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	f00c fd31 	bl	800f1bc <__aeabi_dcmplt>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d010      	beq.n	8002782 <FUNC_OutputData+0x137a>
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);
 8002760:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002764:	65bb      	str	r3, [r7, #88]	; 0x58
 8002766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800276e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002770:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002774:	f00c fd4a 	bl	800f20c <__aeabi_d2uiz>
 8002778:	4603      	mov	r3, r0
 800277a:	b29b      	uxth	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.DataTypeConversion10_n = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)
 800277c:	425b      	negs	r3, r3
 800277e:	b29b      	uxth	r3, r3
 8002780:	e005      	b.n	800278e <FUNC_OutputData+0x1386>
 8002782:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002786:	f00c fd41 	bl	800f20c <__aeabi_d2uiz>
 800278a:	4603      	mov	r3, r0
 800278c:	b29b      	uxth	r3, r3
 800278e:	4a72      	ldr	r2, [pc, #456]	; (8002958 <FUNC_OutputData+0x1550>)
 8002790:	f8a2 370a 	strh.w	r3, [r2, #1802]	; 0x70a
    -(int16_T)(uint16_T)-tmp : (int32_T)(uint16_T)tmp);

  /* End of DataTypeConversion: '<S91>/Data Type Conversion10' */

  /* DataStoreWrite: '<S67>/Data Store Write3' */
  VCU_DW.VAR_OUT_f_RR = VCU_B.DataTypeConversion10_n;
 8002794:	4b70      	ldr	r3, [pc, #448]	; (8002958 <FUNC_OutputData+0x1550>)
 8002796:	f8b3 370a 	ldrh.w	r3, [r3, #1802]	; 0x70a
 800279a:	4a70      	ldr	r2, [pc, #448]	; (800295c <FUNC_OutputData+0x1554>)
 800279c:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2

  /* Gain: '<S92>/Factor' */
  VCU_B.Factor_dd = 1.3 * VCU_B.x_RH_RL;
 80027a0:	4b6d      	ldr	r3, [pc, #436]	; (8002958 <FUNC_OutputData+0x1550>)
 80027a2:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 80027a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	a368      	add	r3, pc, #416	; (adr r3, 8002950 <FUNC_OutputData+0x1548>)
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	f00c fa90 	bl	800ecd8 <__aeabi_dmul>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	4b65      	ldr	r3, [pc, #404]	; (8002958 <FUNC_OutputData+0x1550>)
 80027c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027c6:	e9c3 0100 	strd	r0, r1, [r3]

  /* Sum: '<S92>/Add1' */
  VCU_B.Add1_ai = VCU_B.Factor_dd;
 80027ca:	4b63      	ldr	r3, [pc, #396]	; (8002958 <FUNC_OutputData+0x1550>)
 80027cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027d4:	4b60      	ldr	r3, [pc, #384]	; (8002958 <FUNC_OutputData+0x1550>)
 80027d6:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80027da:	e9c3 0100 	strd	r0, r1, [r3]

  /* DataTypeConversion: '<S92>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_ai);
 80027de:	4b5e      	ldr	r3, [pc, #376]	; (8002958 <FUNC_OutputData+0x1550>)
 80027e0:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80027e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	f00b fe80 	bl	800e4f0 <floor>
 80027f0:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 80027f4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80027f8:	f003 fea2 	bl	8006540 <rtIsNaN>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <FUNC_OutputData+0x1408>
 8002802:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002806:	f003 fe77 	bl	80064f8 <rtIsInf>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d006      	beq.n	800281e <FUNC_OutputData+0x1416>
    tmp = 0.0;
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800281c:	e008      	b.n	8002830 <FUNC_OutputData+0x1428>
  } else {
    tmp = fmod(tmp, 256.0);
 800281e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	4b50      	ldr	r3, [pc, #320]	; (8002968 <FUNC_OutputData+0x1560>)
 8002828:	f00b feea 	bl	800e600 <fmod>
 800282c:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_px = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002830:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	f00c fcbe 	bl	800f1bc <__aeabi_dcmplt>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d010      	beq.n	8002868 <FUNC_OutputData+0x1460>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8002846:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800284a:	653b      	str	r3, [r7, #80]	; 0x50
 800284c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002850:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002854:	657b      	str	r3, [r7, #84]	; 0x54
 8002856:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800285a:	f00c fcd7 	bl	800f20c <__aeabi_d2uiz>
 800285e:	4603      	mov	r3, r0
 8002860:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_px = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002862:	425b      	negs	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	e005      	b.n	8002874 <FUNC_OutputData+0x146c>
 8002868:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800286c:	f00c fcce 	bl	800f20c <__aeabi_d2uiz>
 8002870:	4603      	mov	r3, r0
 8002872:	b2db      	uxtb	r3, r3
 8002874:	4a38      	ldr	r2, [pc, #224]	; (8002958 <FUNC_OutputData+0x1550>)
 8002876:	f882 3750 	strb.w	r3, [r2, #1872]	; 0x750
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S92>/Data Type Conversion10' */

  /* DataStoreWrite: '<S68>/Data Store Write' */
  VCU_DW.VAR_OUT_x_RH_RL = VCU_B.DataTypeConversion10_px;
 800287a:	4b37      	ldr	r3, [pc, #220]	; (8002958 <FUNC_OutputData+0x1550>)
 800287c:	f893 3750 	ldrb.w	r3, [r3, #1872]	; 0x750
 8002880:	4a36      	ldr	r2, [pc, #216]	; (800295c <FUNC_OutputData+0x1554>)
 8002882:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128

  /* Gain: '<S93>/Factor' */
  VCU_B.Factor_bc = 1.3 * VCU_B.x_RH_RR;
 8002886:	4b34      	ldr	r3, [pc, #208]	; (8002958 <FUNC_OutputData+0x1550>)
 8002888:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 800288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	a32e      	add	r3, pc, #184	; (adr r3, 8002950 <FUNC_OutputData+0x1548>)
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	f00c fa1d 	bl	800ecd8 <__aeabi_dmul>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	4b2c      	ldr	r3, [pc, #176]	; (8002958 <FUNC_OutputData+0x1550>)
 80028a8:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80028ac:	e9c3 0100 	strd	r0, r1, [r3]

  /* Sum: '<S93>/Add1' */
  VCU_B.Add1_o = VCU_B.Factor_bc;
 80028b0:	4b29      	ldr	r3, [pc, #164]	; (8002958 <FUNC_OutputData+0x1550>)
 80028b2:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80028b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028ba:	4b27      	ldr	r3, [pc, #156]	; (8002958 <FUNC_OutputData+0x1550>)
 80028bc:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80028c0:	e9c3 0100 	strd	r0, r1, [r3]

  /* DataTypeConversion: '<S93>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_o);
 80028c4:	4b24      	ldr	r3, [pc, #144]	; (8002958 <FUNC_OutputData+0x1550>)
 80028c6:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80028ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ce:	4610      	mov	r0, r2
 80028d0:	4619      	mov	r1, r3
 80028d2:	f00b fe0d 	bl	800e4f0 <floor>
 80028d6:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 80028da:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80028de:	f003 fe2f 	bl	8006540 <rtIsNaN>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d106      	bne.n	80028f6 <FUNC_OutputData+0x14ee>
 80028e8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80028ec:	f003 fe04 	bl	80064f8 <rtIsInf>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d006      	beq.n	8002904 <FUNC_OutputData+0x14fc>
    tmp = 0.0;
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002902:	e008      	b.n	8002916 <FUNC_OutputData+0x150e>
  } else {
    tmp = fmod(tmp, 256.0);
 8002904:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <FUNC_OutputData+0x1560>)
 800290e:	f00b fe77 	bl	800e600 <fmod>
 8002912:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_ab = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002916:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	f00c fc4b 	bl	800f1bc <__aeabi_dcmplt>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01f      	beq.n	800296c <FUNC_OutputData+0x1564>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 800292c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002930:	64bb      	str	r3, [r7, #72]	; 0x48
 8002932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002936:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800293a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800293c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002940:	f00c fc64 	bl	800f20c <__aeabi_d2uiz>
 8002944:	4603      	mov	r3, r0
 8002946:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_ab = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002948:	425b      	negs	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	e014      	b.n	8002978 <FUNC_OutputData+0x1570>
 800294e:	bf00      	nop
 8002950:	cccccccd 	.word	0xcccccccd
 8002954:	3ff4cccc 	.word	0x3ff4cccc
 8002958:	200008a8 	.word	0x200008a8
 800295c:	200010c8 	.word	0x200010c8
 8002960:	40240000 	.word	0x40240000
 8002964:	40f00000 	.word	0x40f00000
 8002968:	40700000 	.word	0x40700000
 800296c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002970:	f00c fc4c 	bl	800f20c <__aeabi_d2uiz>
 8002974:	4603      	mov	r3, r0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	4aab      	ldr	r2, [pc, #684]	; (8002c28 <FUNC_OutputData+0x1820>)
 800297a:	f882 3751 	strb.w	r3, [r2, #1873]	; 0x751
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S93>/Data Type Conversion10' */

  /* DataStoreWrite: '<S68>/Data Store Write1' */
  VCU_DW.VAR_OUT_x_RH_RR = VCU_B.DataTypeConversion10_ab;
 800297e:	4baa      	ldr	r3, [pc, #680]	; (8002c28 <FUNC_OutputData+0x1820>)
 8002980:	f893 3751 	ldrb.w	r3, [r3, #1873]	; 0x751
 8002984:	4aa9      	ldr	r2, [pc, #676]	; (8002c2c <FUNC_OutputData+0x1824>)
 8002986:	f882 3129 	strb.w	r3, [r2, #297]	; 0x129

  /* Gain: '<S94>/Factor' */
  VCU_B.Factor_f = 1.3 * VCU_B.x_RH_F;
 800298a:	4ba7      	ldr	r3, [pc, #668]	; (8002c28 <FUNC_OutputData+0x1820>)
 800298c:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8002990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002994:	4610      	mov	r0, r2
 8002996:	4619      	mov	r1, r3
 8002998:	a3a1      	add	r3, pc, #644	; (adr r3, 8002c20 <FUNC_OutputData+0x1818>)
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	f00c f99b 	bl	800ecd8 <__aeabi_dmul>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4610      	mov	r0, r2
 80029a8:	4619      	mov	r1, r3
 80029aa:	4b9f      	ldr	r3, [pc, #636]	; (8002c28 <FUNC_OutputData+0x1820>)
 80029ac:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80029b0:	e9c3 0100 	strd	r0, r1, [r3]

  /* Sum: '<S94>/Add1' */
  VCU_B.Add1_ge = VCU_B.Factor_f;
 80029b4:	4b9c      	ldr	r3, [pc, #624]	; (8002c28 <FUNC_OutputData+0x1820>)
 80029b6:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80029ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029be:	4b9a      	ldr	r3, [pc, #616]	; (8002c28 <FUNC_OutputData+0x1820>)
 80029c0:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80029c4:	e9c3 0100 	strd	r0, r1, [r3]

  /* DataTypeConversion: '<S94>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_ge);
 80029c8:	4b97      	ldr	r3, [pc, #604]	; (8002c28 <FUNC_OutputData+0x1820>)
 80029ca:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	f00b fd8b 	bl	800e4f0 <floor>
 80029da:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 80029de:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80029e2:	f003 fdad 	bl	8006540 <rtIsNaN>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d106      	bne.n	80029fa <FUNC_OutputData+0x15f2>
 80029ec:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80029f0:	f003 fd82 	bl	80064f8 <rtIsInf>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d006      	beq.n	8002a08 <FUNC_OutputData+0x1600>
    tmp = 0.0;
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002a06:	e008      	b.n	8002a1a <FUNC_OutputData+0x1612>
  } else {
    tmp = fmod(tmp, 256.0);
 8002a08:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	4b87      	ldr	r3, [pc, #540]	; (8002c30 <FUNC_OutputData+0x1828>)
 8002a12:	f00b fdf5 	bl	800e600 <fmod>
 8002a16:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_e = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002a1a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	f00c fbc9 	bl	800f1bc <__aeabi_dcmplt>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d010      	beq.n	8002a52 <FUNC_OutputData+0x164a>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8002a30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002a34:	643b      	str	r3, [r7, #64]	; 0x40
 8002a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a40:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002a44:	f00c fbe2 	bl	800f20c <__aeabi_d2uiz>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_e = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002a4c:	425b      	negs	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	e005      	b.n	8002a5e <FUNC_OutputData+0x1656>
 8002a52:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002a56:	f00c fbd9 	bl	800f20c <__aeabi_d2uiz>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	4a72      	ldr	r2, [pc, #456]	; (8002c28 <FUNC_OutputData+0x1820>)
 8002a60:	f882 3752 	strb.w	r3, [r2, #1874]	; 0x752
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S94>/Data Type Conversion10' */

  /* DataStoreWrite: '<S68>/Data Store Write2' */
  VCU_DW.VAR_OUT_x_RH_F = VCU_B.DataTypeConversion10_e;
 8002a64:	4b70      	ldr	r3, [pc, #448]	; (8002c28 <FUNC_OutputData+0x1820>)
 8002a66:	f893 3752 	ldrb.w	r3, [r3, #1874]	; 0x752
 8002a6a:	4a70      	ldr	r2, [pc, #448]	; (8002c2c <FUNC_OutputData+0x1824>)
 8002a6c:	f882 312a 	strb.w	r3, [r2, #298]	; 0x12a

  /* Gain: '<S95>/Factor' */
  VCU_B.Factor_o = 10.0 * VCU_B.x_clutch_b;
 8002a70:	4b6d      	ldr	r3, [pc, #436]	; (8002c28 <FUNC_OutputData+0x1820>)
 8002a72:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8002a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	4b6c      	ldr	r3, [pc, #432]	; (8002c34 <FUNC_OutputData+0x182c>)
 8002a84:	f00c f928 	bl	800ecd8 <__aeabi_dmul>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4b65      	ldr	r3, [pc, #404]	; (8002c28 <FUNC_OutputData+0x1820>)
 8002a92:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8002a96:	e9c3 0100 	strd	r0, r1, [r3]

  /* Sum: '<S95>/Add1' */
  VCU_B.Add1_id = VCU_B.Factor_o;
 8002a9a:	4b63      	ldr	r3, [pc, #396]	; (8002c28 <FUNC_OutputData+0x1820>)
 8002a9c:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8002aa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aa4:	4b60      	ldr	r3, [pc, #384]	; (8002c28 <FUNC_OutputData+0x1820>)
 8002aa6:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8002aaa:	e9c3 0100 	strd	r0, r1, [r3]

  /* DataTypeConversion: '<S95>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_id);
 8002aae:	4b5e      	ldr	r3, [pc, #376]	; (8002c28 <FUNC_OutputData+0x1820>)
 8002ab0:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8002ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	f00b fd18 	bl	800e4f0 <floor>
 8002ac0:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002ac4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002ac8:	f003 fd3a 	bl	8006540 <rtIsNaN>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <FUNC_OutputData+0x16d8>
 8002ad2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002ad6:	f003 fd0f 	bl	80064f8 <rtIsInf>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d006      	beq.n	8002aee <FUNC_OutputData+0x16e6>
    tmp = 0.0;
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002aec:	e008      	b.n	8002b00 <FUNC_OutputData+0x16f8>
  } else {
    tmp = fmod(tmp, 256.0);
 8002aee:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	4b4e      	ldr	r3, [pc, #312]	; (8002c30 <FUNC_OutputData+0x1828>)
 8002af8:	f00b fd82 	bl	800e600 <fmod>
 8002afc:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_g = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002b00:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	f00c fb56 	bl	800f1bc <__aeabi_dcmplt>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d010      	beq.n	8002b38 <FUNC_OutputData+0x1730>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8002b16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002b1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b26:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b2a:	f00c fb6f 	bl	800f20c <__aeabi_d2uiz>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_g = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002b32:	425b      	negs	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	e005      	b.n	8002b44 <FUNC_OutputData+0x173c>
 8002b38:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002b3c:	f00c fb66 	bl	800f20c <__aeabi_d2uiz>
 8002b40:	4603      	mov	r3, r0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	4a38      	ldr	r2, [pc, #224]	; (8002c28 <FUNC_OutputData+0x1820>)
 8002b46:	f882 3753 	strb.w	r3, [r2, #1875]	; 0x753
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S95>/Data Type Conversion10' */

  /* DataStoreWrite: '<S68>/Data Store Write3' */
  VCU_DW.VAR_OUT_x_clutch = VCU_B.DataTypeConversion10_g;
 8002b4a:	4b37      	ldr	r3, [pc, #220]	; (8002c28 <FUNC_OutputData+0x1820>)
 8002b4c:	f893 3753 	ldrb.w	r3, [r3, #1875]	; 0x753
 8002b50:	4a36      	ldr	r2, [pc, #216]	; (8002c2c <FUNC_OutputData+0x1824>)
 8002b52:	f882 312b 	strb.w	r3, [r2, #299]	; 0x12b

  /* Gain: '<S96>/Factor' */
  VCU_B.Factor_k = 10.0 * VCU_B.x_clutch_STW;
 8002b56:	4b34      	ldr	r3, [pc, #208]	; (8002c28 <FUNC_OutputData+0x1820>)
 8002b58:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	4b32      	ldr	r3, [pc, #200]	; (8002c34 <FUNC_OutputData+0x182c>)
 8002b6a:	f00c f8b5 	bl	800ecd8 <__aeabi_dmul>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	4b2c      	ldr	r3, [pc, #176]	; (8002c28 <FUNC_OutputData+0x1820>)
 8002b78:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8002b7c:	e9c3 0100 	strd	r0, r1, [r3]

  /* Sum: '<S96>/Add1' */
  VCU_B.Add1_d = VCU_B.Factor_k;
 8002b80:	4b29      	ldr	r3, [pc, #164]	; (8002c28 <FUNC_OutputData+0x1820>)
 8002b82:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8002b86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b8a:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <FUNC_OutputData+0x1820>)
 8002b8c:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8002b90:	e9c3 0100 	strd	r0, r1, [r3]

  /* DataTypeConversion: '<S96>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_d);
 8002b94:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <FUNC_OutputData+0x1820>)
 8002b96:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8002b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f00b fca5 	bl	800e4f0 <floor>
 8002ba6:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002baa:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002bae:	f003 fcc7 	bl	8006540 <rtIsNaN>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d106      	bne.n	8002bc6 <FUNC_OutputData+0x17be>
 8002bb8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002bbc:	f003 fc9c 	bl	80064f8 <rtIsInf>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <FUNC_OutputData+0x17cc>
    tmp = 0.0;
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002bd2:	e008      	b.n	8002be6 <FUNC_OutputData+0x17de>
  } else {
    tmp = fmod(tmp, 256.0);
 8002bd4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <FUNC_OutputData+0x1828>)
 8002bde:	f00b fd0f 	bl	800e600 <fmod>
 8002be2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_k = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002be6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	f00c fae3 	bl	800f1bc <__aeabi_dcmplt>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d01d      	beq.n	8002c38 <FUNC_OutputData+0x1830>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8002bfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002c00:	633b      	str	r3, [r7, #48]	; 0x30
 8002c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c06:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c0c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002c10:	f00c fafc 	bl	800f20c <__aeabi_d2uiz>
 8002c14:	4603      	mov	r3, r0
 8002c16:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_k = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002c18:	425b      	negs	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	e012      	b.n	8002c44 <FUNC_OutputData+0x183c>
 8002c1e:	bf00      	nop
 8002c20:	cccccccd 	.word	0xcccccccd
 8002c24:	3ff4cccc 	.word	0x3ff4cccc
 8002c28:	200008a8 	.word	0x200008a8
 8002c2c:	200010c8 	.word	0x200010c8
 8002c30:	40700000 	.word	0x40700000
 8002c34:	40240000 	.word	0x40240000
 8002c38:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002c3c:	f00c fae6 	bl	800f20c <__aeabi_d2uiz>
 8002c40:	4603      	mov	r3, r0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4a71      	ldr	r2, [pc, #452]	; (8002e0c <FUNC_OutputData+0x1a04>)
 8002c46:	f882 3754 	strb.w	r3, [r2, #1876]	; 0x754
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S96>/Data Type Conversion10' */

  /* DataStoreWrite: '<S68>/Data Store Write4' */
  VCU_DW.VAR_OUT_x_clutch_STW = VCU_B.DataTypeConversion10_k;
 8002c4a:	4b70      	ldr	r3, [pc, #448]	; (8002e0c <FUNC_OutputData+0x1a04>)
 8002c4c:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 8002c50:	4a6f      	ldr	r2, [pc, #444]	; (8002e10 <FUNC_OutputData+0x1a08>)
 8002c52:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c

  /* Gain: '<S97>/Factor' */
  VCU_B.Factor_cv = 40960U * VCU_B.p_pneum;
 8002c56:	4b6d      	ldr	r3, [pc, #436]	; (8002e0c <FUNC_OutputData+0x1a04>)
 8002c58:	f8b3 3724 	ldrh.w	r3, [r3, #1828]	; 0x724
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	035b      	lsls	r3, r3, #13
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b68      	ldr	r3, [pc, #416]	; (8002e0c <FUNC_OutputData+0x1a04>)
 8002c6a:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8

  /* Sum: '<S97>/Add1' */
  VCU_B.Add1_a5 = (real_T)VCU_B.Factor_cv * 5.9604644775390625E-8;
 8002c6e:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <FUNC_OutputData+0x1a04>)
 8002c70:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8002c74:	4618      	mov	r0, r3
 8002c76:	f00b ffb9 	bl	800ebec <__aeabi_ui2d>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	4b63      	ldr	r3, [pc, #396]	; (8002e14 <FUNC_OutputData+0x1a0c>)
 8002c88:	f00c f826 	bl	800ecd8 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	4b5d      	ldr	r3, [pc, #372]	; (8002e0c <FUNC_OutputData+0x1a04>)
 8002c96:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8002c9a:	e9c3 0100 	strd	r0, r1, [r3]

  /* DataTypeConversion: '<S97>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_a5);
 8002c9e:	4b5b      	ldr	r3, [pc, #364]	; (8002e0c <FUNC_OutputData+0x1a04>)
 8002ca0:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8002ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	f00b fc20 	bl	800e4f0 <floor>
 8002cb0:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002cb4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002cb8:	f003 fc42 	bl	8006540 <rtIsNaN>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <FUNC_OutputData+0x18c8>
 8002cc2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002cc6:	f003 fc17 	bl	80064f8 <rtIsInf>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d006      	beq.n	8002cde <FUNC_OutputData+0x18d6>
    tmp = 0.0;
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002cdc:	e008      	b.n	8002cf0 <FUNC_OutputData+0x18e8>
  } else {
    tmp = fmod(tmp, 256.0);
 8002cde:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	4b4c      	ldr	r3, [pc, #304]	; (8002e18 <FUNC_OutputData+0x1a10>)
 8002ce8:	f00b fc8a 	bl	800e600 <fmod>
 8002cec:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_p5 = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002cf0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	f00c fa5e 	bl	800f1bc <__aeabi_dcmplt>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d010      	beq.n	8002d28 <FUNC_OutputData+0x1920>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8002d06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d1a:	f00c fa77 	bl	800f20c <__aeabi_d2uiz>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_p5 = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002d22:	425b      	negs	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	e005      	b.n	8002d34 <FUNC_OutputData+0x192c>
 8002d28:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002d2c:	f00c fa6e 	bl	800f20c <__aeabi_d2uiz>
 8002d30:	4603      	mov	r3, r0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	4a35      	ldr	r2, [pc, #212]	; (8002e0c <FUNC_OutputData+0x1a04>)
 8002d36:	f882 3755 	strb.w	r3, [r2, #1877]	; 0x755
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S97>/Data Type Conversion10' */

  /* DataStoreWrite: '<S68>/Data Store Write5' */
  VCU_DW.VAR_OUT_p_pneum = VCU_B.DataTypeConversion10_p5;
 8002d3a:	4b34      	ldr	r3, [pc, #208]	; (8002e0c <FUNC_OutputData+0x1a04>)
 8002d3c:	f893 2755 	ldrb.w	r2, [r3, #1877]	; 0x755
 8002d40:	4b33      	ldr	r3, [pc, #204]	; (8002e10 <FUNC_OutputData+0x1a08>)
 8002d42:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d

  /* Gain: '<S98>/Factor' */
  VCU_B.Factor_nt = 10.0 * VCU_B.U_Bat;
 8002d46:	4b31      	ldr	r3, [pc, #196]	; (8002e0c <FUNC_OutputData+0x1a04>)
 8002d48:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d50:	4610      	mov	r0, r2
 8002d52:	4619      	mov	r1, r3
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	4b30      	ldr	r3, [pc, #192]	; (8002e1c <FUNC_OutputData+0x1a14>)
 8002d5a:	f00b ffbd 	bl	800ecd8 <__aeabi_dmul>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	492a      	ldr	r1, [pc, #168]	; (8002e0c <FUNC_OutputData+0x1a04>)
 8002d64:	f501 6193 	add.w	r1, r1, #1176	; 0x498
 8002d68:	e9c1 2300 	strd	r2, r3, [r1]

  /* Sum: '<S98>/Add1' */
  VCU_B.Add1_ph = VCU_B.Factor_nt;
 8002d6c:	4b27      	ldr	r3, [pc, #156]	; (8002e0c <FUNC_OutputData+0x1a04>)
 8002d6e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8002d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d76:	4925      	ldr	r1, [pc, #148]	; (8002e0c <FUNC_OutputData+0x1a04>)
 8002d78:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 8002d7c:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataTypeConversion: '<S98>/Data Type Conversion10' */
  tmp = floor(VCU_B.Add1_ph);
 8002d80:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <FUNC_OutputData+0x1a04>)
 8002d82:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f00b fbaf 	bl	800e4f0 <floor>
 8002d92:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002d96:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002d9a:	f003 fbd1 	bl	8006540 <rtIsNaN>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d106      	bne.n	8002db2 <FUNC_OutputData+0x19aa>
 8002da4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002da8:	f003 fba6 	bl	80064f8 <rtIsInf>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d006      	beq.n	8002dc0 <FUNC_OutputData+0x19b8>
    tmp = 0.0;
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002dbe:	e008      	b.n	8002dd2 <FUNC_OutputData+0x19ca>
  } else {
    tmp = fmod(tmp, 256.0);
 8002dc0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <FUNC_OutputData+0x1a10>)
 8002dca:	f00b fc19 	bl	800e600 <fmod>
 8002dce:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.DataTypeConversion10_bm = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002dd2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	f00c f9ed 	bl	800f1bc <__aeabi_dcmplt>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01b      	beq.n	8002e20 <FUNC_OutputData+0x1a18>
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);
 8002de8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002dec:	623b      	str	r3, [r7, #32]
 8002dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
 8002df8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002dfc:	f00c fa06 	bl	800f20c <__aeabi_d2uiz>
 8002e00:	4603      	mov	r3, r0
 8002e02:	b2db      	uxtb	r3, r3
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 256.0);
  }

  VCU_B.DataTypeConversion10_bm = (uint8_T)(tmp < 0.0 ? (int32_T)(uint8_T)
 8002e04:	425b      	negs	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	e010      	b.n	8002e2c <FUNC_OutputData+0x1a24>
 8002e0a:	bf00      	nop
 8002e0c:	200008a8 	.word	0x200008a8
 8002e10:	200010c8 	.word	0x200010c8
 8002e14:	3e700000 	.word	0x3e700000
 8002e18:	40700000 	.word	0x40700000
 8002e1c:	40240000 	.word	0x40240000
 8002e20:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002e24:	f00c f9f2 	bl	800f20c <__aeabi_d2uiz>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	4ab6      	ldr	r2, [pc, #728]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002e2e:	f882 3756 	strb.w	r3, [r2, #1878]	; 0x756
    -(int8_T)(uint8_T)-tmp : (int32_T)(uint8_T)tmp);

  /* End of DataTypeConversion: '<S98>/Data Type Conversion10' */

  /* DataStoreWrite: '<S68>/Data Store Write6' */
  VCU_DW.VAR_OUT_U_Bat = VCU_B.DataTypeConversion10_bm;
 8002e32:	4bb5      	ldr	r3, [pc, #724]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002e34:	f893 2756 	ldrb.w	r2, [r3, #1878]	; 0x756
 8002e38:	4bb4      	ldr	r3, [pc, #720]	; (800310c <FUNC_OutputData+0x1d04>)
 8002e3a:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e

  /* Sum: '<S106>/Add1' */
  VCU_B.Add1_jp = VCU_B.Saturation_b;
 8002e3e:	4bb2      	ldr	r3, [pc, #712]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002e40:	e9d3 23bc 	ldrd	r2, r3, [r3, #752]	; 0x2f0
 8002e44:	49b0      	ldr	r1, [pc, #704]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002e46:	f501 6195 	add.w	r1, r1, #1192	; 0x4a8
 8002e4a:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataStoreWrite: '<S69>/Data Store Write' */
  VCU_DW.VAR_OUT_Fans_active = VCU_B.Add1_jp;
 8002e4e:	4bae      	ldr	r3, [pc, #696]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002e50:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8002e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e58:	49ac      	ldr	r1, [pc, #688]	; (800310c <FUNC_OutputData+0x1d04>)
 8002e5a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

  /* DataStoreWrite: '<S69>/Data Store Write1' */
  VCU_DW.VAR_OUT_Waterpump_active = VCU_ConstB.Add1;
 8002e5e:	4bac      	ldr	r3, [pc, #688]	; (8003110 <FUNC_OutputData+0x1d08>)
 8002e60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e64:	49a9      	ldr	r1, [pc, #676]	; (800310c <FUNC_OutputData+0x1d04>)
 8002e66:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

  /* RelationalOperator: '<S109>/Compare' incorporates:
   *  Constant: '<S109>/Constant'
   */
  VCU_B.Compare_mi = (VCU_B.VOVG_ShiftUp > 0.0);
 8002e6a:	4ba7      	ldr	r3, [pc, #668]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e70:	2101      	movs	r1, #1
 8002e72:	460c      	mov	r4, r1
 8002e74:	4610      	mov	r0, r2
 8002e76:	4619      	mov	r1, r3
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	f00c f9ba 	bl	800f1f8 <__aeabi_dcmpgt>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <FUNC_OutputData+0x1a86>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	461c      	mov	r4, r3
 8002e8e:	b2e3      	uxtb	r3, r4
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b9d      	ldr	r3, [pc, #628]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002e94:	f883 280d 	strb.w	r2, [r3, #2061]	; 0x80d

  /* DataStoreWrite: '<S63>/Data Store Write' */
  VCU_DW.VAR_OUT_VOVG_ShiftUp = VCU_B.Compare_mi;
 8002e98:	4b9b      	ldr	r3, [pc, #620]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002e9a:	f893 280d 	ldrb.w	r2, [r3, #2061]	; 0x80d
 8002e9e:	4b9b      	ldr	r3, [pc, #620]	; (800310c <FUNC_OutputData+0x1d04>)
 8002ea0:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d

  /* RelationalOperator: '<S110>/Compare' incorporates:
   *  Constant: '<S110>/Constant'
   */
  VCU_B.Compare_ek = (VCU_B.VOVG_ShiftDown > 0.0);
 8002ea4:	4b98      	ldr	r3, [pc, #608]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002ea6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002eaa:	2101      	movs	r1, #1
 8002eac:	460c      	mov	r4, r1
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	f00c f99d 	bl	800f1f8 <__aeabi_dcmpgt>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <FUNC_OutputData+0x1ac0>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	461c      	mov	r4, r3
 8002ec8:	b2e3      	uxtb	r3, r4
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b8e      	ldr	r3, [pc, #568]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002ece:	f883 280e 	strb.w	r2, [r3, #2062]	; 0x80e

  /* DataStoreWrite: '<S63>/Data Store Write1' */
  VCU_DW.VAR_OUT_VOVG_ShiftDown = VCU_B.Compare_ek;
 8002ed2:	4b8d      	ldr	r3, [pc, #564]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002ed4:	f893 280e 	ldrb.w	r2, [r3, #2062]	; 0x80e
 8002ed8:	4b8c      	ldr	r3, [pc, #560]	; (800310c <FUNC_OutputData+0x1d04>)
 8002eda:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e

  /* Gain: '<S63>/Gain4' */
  tmp = floor(65535.0 * VCU_B.Saturation_b);
 8002ede:	4b8a      	ldr	r3, [pc, #552]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002ee0:	e9d3 23bc 	ldrd	r2, r3, [r3, #752]	; 0x2f0
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	a385      	add	r3, pc, #532	; (adr r3, 8003100 <FUNC_OutputData+0x1cf8>)
 8002eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eee:	f00b fef3 	bl	800ecd8 <__aeabi_dmul>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f00b faf9 	bl	800e4f0 <floor>
 8002efe:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8002f02:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002f06:	f003 fb1b 	bl	8006540 <rtIsNaN>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d106      	bne.n	8002f1e <FUNC_OutputData+0x1b16>
 8002f10:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002f14:	f003 faf0 	bl	80064f8 <rtIsInf>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d006      	beq.n	8002f2c <FUNC_OutputData+0x1b24>
    tmp = 0.0;
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002f2a:	e008      	b.n	8002f3e <FUNC_OutputData+0x1b36>
  } else {
    tmp = fmod(tmp, 65536.0);
 8002f2c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	4b77      	ldr	r3, [pc, #476]	; (8003114 <FUNC_OutputData+0x1d0c>)
 8002f36:	f00b fb63 	bl	800e600 <fmod>
 8002f3a:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.Gain4_f = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)
 8002f3e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	f00c f937 	bl	800f1bc <__aeabi_dcmplt>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d010      	beq.n	8002f76 <FUNC_OutputData+0x1b6e>
    -tmp : (int32_T)(uint16_T)tmp);
 8002f54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002f62:	61fb      	str	r3, [r7, #28]
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.Gain4_f = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)
 8002f64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f68:	f00c f950 	bl	800f20c <__aeabi_d2uiz>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	425b      	negs	r3, r3
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	e005      	b.n	8002f82 <FUNC_OutputData+0x1b7a>
 8002f76:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002f7a:	f00c f947 	bl	800f20c <__aeabi_d2uiz>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	4a61      	ldr	r2, [pc, #388]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002f84:	f8a2 370c 	strh.w	r3, [r2, #1804]	; 0x70c
    -tmp : (int32_T)(uint16_T)tmp);

  /* End of Gain: '<S63>/Gain4' */

  /* DataStoreWrite: '<S63>/Data Store Write10' */
  VCU_DW.VAR_OUT_Fans2_PWM_active = VCU_B.Gain4_f;
 8002f88:	4b5f      	ldr	r3, [pc, #380]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002f8a:	f8b3 270c 	ldrh.w	r2, [r3, #1804]	; 0x70c
 8002f8e:	4b5f      	ldr	r3, [pc, #380]	; (800310c <FUNC_OutputData+0x1d04>)
 8002f90:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4

  /* RelationalOperator: '<S113>/Compare' incorporates:
   *  Constant: '<S113>/Constant'
   */
  VCU_B.Compare_pr = (VCU_B.Ignition_Cut > 0.0);
 8002f94:	4b5c      	ldr	r3, [pc, #368]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002f96:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	460c      	mov	r4, r1
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	f00c f925 	bl	800f1f8 <__aeabi_dcmpgt>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <FUNC_OutputData+0x1bb0>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	461c      	mov	r4, r3
 8002fb8:	b2e3      	uxtb	r3, r4
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4b52      	ldr	r3, [pc, #328]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002fbe:	f883 280f 	strb.w	r2, [r3, #2063]	; 0x80f

  /* DataStoreWrite: '<S63>/Data Store Write2' */
  VCU_DW.VAR_OUT_Ignition_Cut = VCU_B.Compare_pr;
 8002fc2:	4b51      	ldr	r3, [pc, #324]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002fc4:	f893 280f 	ldrb.w	r2, [r3, #2063]	; 0x80f
 8002fc8:	4b50      	ldr	r3, [pc, #320]	; (800310c <FUNC_OutputData+0x1d04>)
 8002fca:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  /* RelationalOperator: '<S111>/Compare' incorporates:
   *  Constant: '<S111>/Constant'
   */
  VCU_B.Compare_d3 = (VCU_B.VOVG_IN > 0.0);
 8002fce:	4b4e      	ldr	r3, [pc, #312]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002fd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	460c      	mov	r4, r1
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	f00c f908 	bl	800f1f8 <__aeabi_dcmpgt>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <FUNC_OutputData+0x1bea>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	461c      	mov	r4, r3
 8002ff2:	b2e3      	uxtb	r3, r4
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b44      	ldr	r3, [pc, #272]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002ff8:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810

  /* DataStoreWrite: '<S63>/Data Store Write3' */
  VCU_DW.VAR_OUT_VOVG_IN = VCU_B.Compare_d3;
 8002ffc:	4b42      	ldr	r3, [pc, #264]	; (8003108 <FUNC_OutputData+0x1d00>)
 8002ffe:	f893 2810 	ldrb.w	r2, [r3, #2064]	; 0x810
 8003002:	4b42      	ldr	r3, [pc, #264]	; (800310c <FUNC_OutputData+0x1d04>)
 8003004:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161

  /* RelationalOperator: '<S112>/Compare' incorporates:
   *  Constant: '<S112>/Constant'
   */
  VCU_B.Compare_bb = (VCU_B.VOVG_OUT > 0.0);
 8003008:	4b3f      	ldr	r3, [pc, #252]	; (8003108 <FUNC_OutputData+0x1d00>)
 800300a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800300e:	2101      	movs	r1, #1
 8003010:	460c      	mov	r4, r1
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	f00c f8eb 	bl	800f1f8 <__aeabi_dcmpgt>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <FUNC_OutputData+0x1c24>
 8003028:	2300      	movs	r3, #0
 800302a:	461c      	mov	r4, r3
 800302c:	b2e3      	uxtb	r3, r4
 800302e:	461a      	mov	r2, r3
 8003030:	4b35      	ldr	r3, [pc, #212]	; (8003108 <FUNC_OutputData+0x1d00>)
 8003032:	f883 2811 	strb.w	r2, [r3, #2065]	; 0x811

  /* DataStoreWrite: '<S63>/Data Store Write4' */
  VCU_DW.VAR_OUT_VOVG_OUT = VCU_B.Compare_bb;
 8003036:	4b34      	ldr	r3, [pc, #208]	; (8003108 <FUNC_OutputData+0x1d00>)
 8003038:	f893 2811 	ldrb.w	r2, [r3, #2065]	; 0x811
 800303c:	4b33      	ldr	r3, [pc, #204]	; (800310c <FUNC_OutputData+0x1d04>)
 800303e:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162

  /* Saturate: '<S63>/Saturation1' */
  if (VCU_B.MHJ9_IN > 1.0) {
 8003042:	4b31      	ldr	r3, [pc, #196]	; (8003108 <FUNC_OutputData+0x1d00>)
 8003044:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	4b31      	ldr	r3, [pc, #196]	; (8003118 <FUNC_OutputData+0x1d10>)
 8003052:	f00c f8d1 	bl	800f1f8 <__aeabi_dcmpgt>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <FUNC_OutputData+0x1c66>
    VCU_B.Saturation1 = 1.0;
 800305c:	4b2a      	ldr	r3, [pc, #168]	; (8003108 <FUNC_OutputData+0x1d00>)
 800305e:	f503 6196 	add.w	r1, r3, #1200	; 0x4b0
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	4b2c      	ldr	r3, [pc, #176]	; (8003118 <FUNC_OutputData+0x1d10>)
 8003068:	e9c1 2300 	strd	r2, r3, [r1]
 800306c:	e01f      	b.n	80030ae <FUNC_OutputData+0x1ca6>
  } else if (VCU_B.MHJ9_IN < 0.0) {
 800306e:	4b26      	ldr	r3, [pc, #152]	; (8003108 <FUNC_OutputData+0x1d00>)
 8003070:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003074:	4610      	mov	r0, r2
 8003076:	4619      	mov	r1, r3
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	f00c f89c 	bl	800f1bc <__aeabi_dcmplt>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <FUNC_OutputData+0x1c96>
    VCU_B.Saturation1 = 0.0;
 800308a:	4b1f      	ldr	r3, [pc, #124]	; (8003108 <FUNC_OutputData+0x1d00>)
 800308c:	f503 6196 	add.w	r1, r3, #1200	; 0x4b0
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	e9c1 2300 	strd	r2, r3, [r1]
 800309c:	e007      	b.n	80030ae <FUNC_OutputData+0x1ca6>
  } else {
    VCU_B.Saturation1 = VCU_B.MHJ9_IN;
 800309e:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <FUNC_OutputData+0x1d00>)
 80030a0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80030a4:	4918      	ldr	r1, [pc, #96]	; (8003108 <FUNC_OutputData+0x1d00>)
 80030a6:	f501 6196 	add.w	r1, r1, #1200	; 0x4b0
 80030aa:	e9c1 2300 	strd	r2, r3, [r1]
  }

  /* End of Saturate: '<S63>/Saturation1' */

  /* Gain: '<S63>/uint16 ' */
  tmp = floor(65535.0 * VCU_B.Saturation1);
 80030ae:	4b16      	ldr	r3, [pc, #88]	; (8003108 <FUNC_OutputData+0x1d00>)
 80030b0:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80030b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	a310      	add	r3, pc, #64	; (adr r3, 8003100 <FUNC_OutputData+0x1cf8>)
 80030be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c2:	f00b fe09 	bl	800ecd8 <__aeabi_dmul>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	f00b fa0f 	bl	800e4f0 <floor>
 80030d2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 80030d6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80030da:	f003 fa31 	bl	8006540 <rtIsNaN>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d106      	bne.n	80030f2 <FUNC_OutputData+0x1cea>
 80030e4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80030e8:	f003 fa06 	bl	80064f8 <rtIsInf>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d014      	beq.n	800311c <FUNC_OutputData+0x1d14>
    tmp = 0.0;
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80030fe:	e016      	b.n	800312e <FUNC_OutputData+0x1d26>
 8003100:	00000000 	.word	0x00000000
 8003104:	40efffe0 	.word	0x40efffe0
 8003108:	200008a8 	.word	0x200008a8
 800310c:	200010c8 	.word	0x200010c8
 8003110:	0800f440 	.word	0x0800f440
 8003114:	40f00000 	.word	0x40f00000
 8003118:	3ff00000 	.word	0x3ff00000
  } else {
    tmp = fmod(tmp, 65536.0);
 800311c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	4b9c      	ldr	r3, [pc, #624]	; (8003398 <FUNC_OutputData+0x1f90>)
 8003126:	f00b fa6b 	bl	800e600 <fmod>
 800312a:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.uint16 = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)
 800312e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	f00c f83f 	bl	800f1bc <__aeabi_dcmplt>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d010      	beq.n	8003166 <FUNC_OutputData+0x1d5e>
    -tmp : (int32_T)(uint16_T)tmp);
 8003144:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003152:	617b      	str	r3, [r7, #20]
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.uint16 = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)
 8003154:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003158:	f00c f858 	bl	800f20c <__aeabi_d2uiz>
 800315c:	4603      	mov	r3, r0
 800315e:	b29b      	uxth	r3, r3
 8003160:	425b      	negs	r3, r3
 8003162:	b29b      	uxth	r3, r3
 8003164:	e005      	b.n	8003172 <FUNC_OutputData+0x1d6a>
 8003166:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800316a:	f00c f84f 	bl	800f20c <__aeabi_d2uiz>
 800316e:	4603      	mov	r3, r0
 8003170:	b29b      	uxth	r3, r3
 8003172:	4a8a      	ldr	r2, [pc, #552]	; (800339c <FUNC_OutputData+0x1f94>)
 8003174:	f8a2 370e 	strh.w	r3, [r2, #1806]	; 0x70e
    -tmp : (int32_T)(uint16_T)tmp);

  /* End of Gain: '<S63>/uint16 ' */

  /* DataStoreWrite: '<S63>/Data Store Write5' */
  VCU_DW.VAR_OUT_MHJ9_IN = VCU_B.uint16;
 8003178:	4b88      	ldr	r3, [pc, #544]	; (800339c <FUNC_OutputData+0x1f94>)
 800317a:	f8b3 270e 	ldrh.w	r2, [r3, #1806]	; 0x70e
 800317e:	4b88      	ldr	r3, [pc, #544]	; (80033a0 <FUNC_OutputData+0x1f98>)
 8003180:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6

  /* Saturate: '<S63>/Saturation2' */
  if (VCU_B.MHJ9_OUT > 1.0) {
 8003184:	4b85      	ldr	r3, [pc, #532]	; (800339c <FUNC_OutputData+0x1f94>)
 8003186:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800318a:	4610      	mov	r0, r2
 800318c:	4619      	mov	r1, r3
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	4b84      	ldr	r3, [pc, #528]	; (80033a4 <FUNC_OutputData+0x1f9c>)
 8003194:	f00c f830 	bl	800f1f8 <__aeabi_dcmpgt>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d008      	beq.n	80031b0 <FUNC_OutputData+0x1da8>
    VCU_B.Saturation2 = 1.0;
 800319e:	4b7f      	ldr	r3, [pc, #508]	; (800339c <FUNC_OutputData+0x1f94>)
 80031a0:	f503 6197 	add.w	r1, r3, #1208	; 0x4b8
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	4b7e      	ldr	r3, [pc, #504]	; (80033a4 <FUNC_OutputData+0x1f9c>)
 80031aa:	e9c1 2300 	strd	r2, r3, [r1]
 80031ae:	e01f      	b.n	80031f0 <FUNC_OutputData+0x1de8>
  } else if (VCU_B.MHJ9_OUT < 0.0) {
 80031b0:	4b7a      	ldr	r3, [pc, #488]	; (800339c <FUNC_OutputData+0x1f94>)
 80031b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80031b6:	4610      	mov	r0, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	f00b fffb 	bl	800f1bc <__aeabi_dcmplt>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d009      	beq.n	80031e0 <FUNC_OutputData+0x1dd8>
    VCU_B.Saturation2 = 0.0;
 80031cc:	4b73      	ldr	r3, [pc, #460]	; (800339c <FUNC_OutputData+0x1f94>)
 80031ce:	f503 6197 	add.w	r1, r3, #1208	; 0x4b8
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	e9c1 2300 	strd	r2, r3, [r1]
 80031de:	e007      	b.n	80031f0 <FUNC_OutputData+0x1de8>
  } else {
    VCU_B.Saturation2 = VCU_B.MHJ9_OUT;
 80031e0:	4b6e      	ldr	r3, [pc, #440]	; (800339c <FUNC_OutputData+0x1f94>)
 80031e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80031e6:	496d      	ldr	r1, [pc, #436]	; (800339c <FUNC_OutputData+0x1f94>)
 80031e8:	f501 6197 	add.w	r1, r1, #1208	; 0x4b8
 80031ec:	e9c1 2300 	strd	r2, r3, [r1]
  }

  /* End of Saturate: '<S63>/Saturation2' */

  /* Gain: '<S63>/uint16_1 ' */
  tmp = floor(65535.0 * VCU_B.Saturation2);
 80031f0:	4b6a      	ldr	r3, [pc, #424]	; (800339c <FUNC_OutputData+0x1f94>)
 80031f2:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 80031f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	a364      	add	r3, pc, #400	; (adr r3, 8003390 <FUNC_OutputData+0x1f88>)
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	f00b fd68 	bl	800ecd8 <__aeabi_dmul>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	f00b f96e 	bl	800e4f0 <floor>
 8003214:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 8003218:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800321c:	f003 f990 	bl	8006540 <rtIsNaN>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <FUNC_OutputData+0x1e2c>
 8003226:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800322a:	f003 f965 	bl	80064f8 <rtIsInf>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d006      	beq.n	8003242 <FUNC_OutputData+0x1e3a>
    tmp = 0.0;
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8003240:	e008      	b.n	8003254 <FUNC_OutputData+0x1e4c>
  } else {
    tmp = fmod(tmp, 65536.0);
 8003242:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	4b53      	ldr	r3, [pc, #332]	; (8003398 <FUNC_OutputData+0x1f90>)
 800324c:	f00b f9d8 	bl	800e600 <fmod>
 8003250:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.uint16_1 = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)
 8003254:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	f00b ffac 	bl	800f1bc <__aeabi_dcmplt>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d010      	beq.n	800328c <FUNC_OutputData+0x1e84>
    -tmp : (int32_T)(uint16_T)tmp);
 800326a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003274:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003278:	60fb      	str	r3, [r7, #12]
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.uint16_1 = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)
 800327a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800327e:	f00b ffc5 	bl	800f20c <__aeabi_d2uiz>
 8003282:	4603      	mov	r3, r0
 8003284:	b29b      	uxth	r3, r3
 8003286:	425b      	negs	r3, r3
 8003288:	b29b      	uxth	r3, r3
 800328a:	e005      	b.n	8003298 <FUNC_OutputData+0x1e90>
 800328c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003290:	f00b ffbc 	bl	800f20c <__aeabi_d2uiz>
 8003294:	4603      	mov	r3, r0
 8003296:	b29b      	uxth	r3, r3
 8003298:	4a40      	ldr	r2, [pc, #256]	; (800339c <FUNC_OutputData+0x1f94>)
 800329a:	f8a2 3710 	strh.w	r3, [r2, #1808]	; 0x710
    -tmp : (int32_T)(uint16_T)tmp);

  /* End of Gain: '<S63>/uint16_1 ' */

  /* DataStoreWrite: '<S63>/Data Store Write6' */
  VCU_DW.VAR_OUT_MHJ9_OUT = VCU_B.uint16_1;
 800329e:	4b3f      	ldr	r3, [pc, #252]	; (800339c <FUNC_OutputData+0x1f94>)
 80032a0:	f8b3 2710 	ldrh.w	r2, [r3, #1808]	; 0x710
 80032a4:	4b3e      	ldr	r3, [pc, #248]	; (80033a0 <FUNC_OutputData+0x1f98>)
 80032a6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8

  /* DataStoreWrite: '<S63>/Data Store Write8' */
  VCU_DW.VAR_OUT_Waterpump_PWM_active = VCU_ConstB.Gain6;
 80032aa:	4b3f      	ldr	r3, [pc, #252]	; (80033a8 <FUNC_OutputData+0x1fa0>)
 80032ac:	8a1a      	ldrh	r2, [r3, #16]
 80032ae:	4b3c      	ldr	r3, [pc, #240]	; (80033a0 <FUNC_OutputData+0x1f98>)
 80032b0:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda

  /* Gain: '<S63>/Gain5' */
  tmp = floor(65535.0 * VCU_B.Saturation_b);
 80032b4:	4b39      	ldr	r3, [pc, #228]	; (800339c <FUNC_OutputData+0x1f94>)
 80032b6:	e9d3 23bc 	ldrd	r2, r3, [r3, #752]	; 0x2f0
 80032ba:	4610      	mov	r0, r2
 80032bc:	4619      	mov	r1, r3
 80032be:	a334      	add	r3, pc, #208	; (adr r3, 8003390 <FUNC_OutputData+0x1f88>)
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f00b fd08 	bl	800ecd8 <__aeabi_dmul>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4610      	mov	r0, r2
 80032ce:	4619      	mov	r1, r3
 80032d0:	f00b f90e 	bl	800e4f0 <floor>
 80032d4:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  if (rtIsNaN(tmp) || rtIsInf(tmp)) {
 80032d8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80032dc:	f003 f930 	bl	8006540 <rtIsNaN>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <FUNC_OutputData+0x1eec>
 80032e6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80032ea:	f003 f905 	bl	80064f8 <rtIsInf>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d006      	beq.n	8003302 <FUNC_OutputData+0x1efa>
    tmp = 0.0;
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8003300:	e008      	b.n	8003314 <FUNC_OutputData+0x1f0c>
  } else {
    tmp = fmod(tmp, 65536.0);
 8003302:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	4b23      	ldr	r3, [pc, #140]	; (8003398 <FUNC_OutputData+0x1f90>)
 800330c:	f00b f978 	bl	800e600 <fmod>
 8003310:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
  }

  VCU_B.Gain5 = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)
 8003314:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	f00b ff4c 	bl	800f1bc <__aeabi_dcmplt>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d010      	beq.n	800334c <FUNC_OutputData+0x1f44>
    -tmp : (int32_T)(uint16_T)tmp);
 800332a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003334:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003338:	607b      	str	r3, [r7, #4]
    tmp = 0.0;
  } else {
    tmp = fmod(tmp, 65536.0);
  }

  VCU_B.Gain5 = (uint16_T)(tmp < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)
 800333a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800333e:	f00b ff65 	bl	800f20c <__aeabi_d2uiz>
 8003342:	4603      	mov	r3, r0
 8003344:	b29b      	uxth	r3, r3
 8003346:	425b      	negs	r3, r3
 8003348:	b29b      	uxth	r3, r3
 800334a:	e005      	b.n	8003358 <FUNC_OutputData+0x1f50>
 800334c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003350:	f00b ff5c 	bl	800f20c <__aeabi_d2uiz>
 8003354:	4603      	mov	r3, r0
 8003356:	b29b      	uxth	r3, r3
 8003358:	4a10      	ldr	r2, [pc, #64]	; (800339c <FUNC_OutputData+0x1f94>)
 800335a:	f8a2 3712 	strh.w	r3, [r2, #1810]	; 0x712
    -tmp : (int32_T)(uint16_T)tmp);

  /* End of Gain: '<S63>/Gain5' */

  /* DataStoreWrite: '<S63>/Data Store Write9' */
  VCU_DW.VAR_OUT_Fans1_PWM_active = VCU_B.Gain5;
 800335e:	4b0f      	ldr	r3, [pc, #60]	; (800339c <FUNC_OutputData+0x1f94>)
 8003360:	f8b3 2712 	ldrh.w	r2, [r3, #1810]	; 0x712
 8003364:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <FUNC_OutputData+0x1f98>)
 8003366:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc

  /* DataStoreWrite: '<S63>/Data Store Write11' */
  VCU_DW.VAR_OUT_BSD = VCU_B.LogicalOperator1_a;
 800336a:	4b0c      	ldr	r3, [pc, #48]	; (800339c <FUNC_OutputData+0x1f94>)
 800336c:	f893 280a 	ldrb.w	r2, [r3, #2058]	; 0x80a
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <FUNC_OutputData+0x1f98>)
 8003372:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f

  /* DataStoreWrite: '<S63>/Data Store Write7' */
  VCU_DW.VAR_OUT_Brakelight = VCU_B.Brakelight;
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <FUNC_OutputData+0x1f94>)
 8003378:	f893 2816 	ldrb.w	r2, [r3, #2070]	; 0x816
 800337c:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <FUNC_OutputData+0x1f98>)
 800337e:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
}
 8003382:	37f8      	adds	r7, #248	; 0xf8
 8003384:	46bd      	mov	sp, r7
 8003386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800338a:	bf00      	nop
 800338c:	f3af 8000 	nop.w
 8003390:	00000000 	.word	0x00000000
 8003394:	40efffe0 	.word	0x40efffe0
 8003398:	40f00000 	.word	0x40f00000
 800339c:	200008a8 	.word	0x200008a8
 80033a0:	200010c8 	.word	0x200010c8
 80033a4:	3ff00000 	.word	0x3ff00000
 80033a8:	0800f440 	.word	0x0800f440
 80033ac:	f3af 8000 	nop.w

080033b0 <FUNC_PumpAndFans>:
#include "VCU.h"
#include "VCU_private.h"

/* Output and update for atomic system: '<Root>/Pump and Fans' */
void FUNC_PumpAndFans(void)
{
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af06      	add	r7, sp, #24
  /* Switch: '<S122>/Switch' incorporates:
   *  Switch: '<S122>/Switch1'
   */
  if (VCU_B.Fans_dash_bit) {
 80033b6:	4b42      	ldr	r3, [pc, #264]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 80033b8:	f893 3812 	ldrb.w	r3, [r3, #2066]	; 0x812
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d006      	beq.n	80033ce <FUNC_PumpAndFans+0x1e>
    /* Saturate: '<S122>/Saturation' incorporates:
     *  Constant: '<S122>/Constant'
     */
    VCU_B.Switch_j = 1.0;
 80033c0:	493f      	ldr	r1, [pc, #252]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	4b3f      	ldr	r3, [pc, #252]	; (80034c4 <FUNC_PumpAndFans+0x114>)
 80033c8:	e9c1 23ba 	strd	r2, r3, [r1, #744]	; 0x2e8
 80033cc:	e03e      	b.n	800344c <FUNC_PumpAndFans+0x9c>
  } else {
    if (VCU_B.TeleActiveBit >= 1.0) {
 80033ce:	4b3c      	ldr	r3, [pc, #240]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 80033d0:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	4b38      	ldr	r3, [pc, #224]	; (80034c4 <FUNC_PumpAndFans+0x114>)
 80033e2:	f00b feff 	bl	800f1e4 <__aeabi_dcmpge>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <FUNC_PumpAndFans+0x4e>
      /* Switch: '<S122>/Switch1' */
      VCU_B.Switch1_d = VCU_B.Add1_ik;
 80033ec:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 80033ee:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80033f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f6:	4932      	ldr	r1, [pc, #200]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 80033f8:	e9c1 23be 	strd	r2, r3, [r1, #760]	; 0x2f8
 80033fc:	e020      	b.n	8003440 <FUNC_PumpAndFans+0x90>
    } else {
      /* Lookup_n-D: '<S122>/2-D Lookup Table' incorporates:
       *  Switch: '<S122>/Switch1'
       */
      VCU_B.uDLookupTable = look2_binlxpw(VCU_B.Add1_iu, VCU_B.Gain4,
 80033fe:	4b30      	ldr	r3, [pc, #192]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 8003400:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8003404:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003408:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 800340a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003412:	4c2d      	ldr	r4, [pc, #180]	; (80034c8 <FUNC_PumpAndFans+0x118>)
 8003414:	9400      	str	r4, [sp, #0]
 8003416:	4c2d      	ldr	r4, [pc, #180]	; (80034cc <FUNC_PumpAndFans+0x11c>)
 8003418:	9401      	str	r4, [sp, #4]
 800341a:	4c2d      	ldr	r4, [pc, #180]	; (80034d0 <FUNC_PumpAndFans+0x120>)
 800341c:	9402      	str	r4, [sp, #8]
 800341e:	4c2d      	ldr	r4, [pc, #180]	; (80034d4 <FUNC_PumpAndFans+0x124>)
 8003420:	9403      	str	r4, [sp, #12]
 8003422:	2407      	movs	r4, #7
 8003424:	9404      	str	r4, [sp, #16]
 8003426:	f002 fd5d 	bl	8005ee4 <look2_binlxpw>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4924      	ldr	r1, [pc, #144]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 8003430:	e9c1 23c0 	strd	r2, r3, [r1, #768]	; 0x300
        VCU_ConstP.uDLookupTable_bp01Data_h, VCU_ConstP.uDLookupTable_bp02Data,
        VCU_ConstP.uDLookupTable_tableData, VCU_ConstP.uDLookupTable_maxIndex,
        7U);

      /* Switch: '<S122>/Switch1' */
      VCU_B.Switch1_d = VCU_B.uDLookupTable;
 8003434:	4b22      	ldr	r3, [pc, #136]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 8003436:	e9d3 23c0 	ldrd	r2, r3, [r3, #768]	; 0x300
 800343a:	4921      	ldr	r1, [pc, #132]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 800343c:	e9c1 23be 	strd	r2, r3, [r1, #760]	; 0x2f8
    }

    /* Saturate: '<S122>/Saturation' */
    VCU_B.Switch_j = VCU_B.Switch1_d;
 8003440:	4b1f      	ldr	r3, [pc, #124]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 8003442:	e9d3 23be 	ldrd	r2, r3, [r3, #760]	; 0x2f8
 8003446:	491e      	ldr	r1, [pc, #120]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 8003448:	e9c1 23ba 	strd	r2, r3, [r1, #744]	; 0x2e8
  }

  /* End of Switch: '<S122>/Switch' */

  /* Saturate: '<S122>/Saturation' */
  if (VCU_B.Switch_j > 0.9999) {
 800344c:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 800344e:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	; 0x2e8
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	a318      	add	r3, pc, #96	; (adr r3, 80034b8 <FUNC_PumpAndFans+0x108>)
 8003458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345c:	f00b fecc 	bl	800f1f8 <__aeabi_dcmpgt>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d006      	beq.n	8003474 <FUNC_PumpAndFans+0xc4>
    VCU_B.Saturation_b = 0.9999;
 8003466:	4916      	ldr	r1, [pc, #88]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 8003468:	a313      	add	r3, pc, #76	; (adr r3, 80034b8 <FUNC_PumpAndFans+0x108>)
 800346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346e:	e9c1 23bc 	strd	r2, r3, [r1, #752]	; 0x2f0
 8003472:	e01b      	b.n	80034ac <FUNC_PumpAndFans+0xfc>
  } else if (VCU_B.Switch_j < 0.0) {
 8003474:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 8003476:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	; 0x2e8
 800347a:	4610      	mov	r0, r2
 800347c:	4619      	mov	r1, r3
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	f00b fe99 	bl	800f1bc <__aeabi_dcmplt>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d007      	beq.n	80034a0 <FUNC_PumpAndFans+0xf0>
    VCU_B.Saturation_b = 0.0;
 8003490:	490b      	ldr	r1, [pc, #44]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	e9c1 23bc 	strd	r2, r3, [r1, #752]	; 0x2f0
 800349e:	e005      	b.n	80034ac <FUNC_PumpAndFans+0xfc>
  } else {
    VCU_B.Saturation_b = VCU_B.Switch_j;
 80034a0:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 80034a2:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	; 0x2e8
 80034a6:	4906      	ldr	r1, [pc, #24]	; (80034c0 <FUNC_PumpAndFans+0x110>)
 80034a8:	e9c1 23bc 	strd	r2, r3, [r1, #752]	; 0x2f0
  }
}
 80034ac:	3704      	adds	r7, #4
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd90      	pop	{r4, r7, pc}
 80034b2:	bf00      	nop
 80034b4:	f3af 8000 	nop.w
 80034b8:	48e8a71e 	.word	0x48e8a71e
 80034bc:	3fefff2e 	.word	0x3fefff2e
 80034c0:	200008a8 	.word	0x200008a8
 80034c4:	3ff00000 	.word	0x3ff00000
 80034c8:	0800f640 	.word	0x0800f640
 80034cc:	0800f678 	.word	0x0800f678
 80034d0:	0800f598 	.word	0x0800f598
 80034d4:	0800f780 	.word	0x0800f780

080034d8 <FUNC_Transmission_Init>:
#include "VCU.h"
#include "VCU_private.h"

/* System initialize for atomic system: '<Root>/Transmission' */
void FUNC_Transmission_Init(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* SystemInitialize for Enabled SubSystem: '<S7>/LC_jr19' */
  /* InitializeConditions for S-Function (sdspcount2): '<S145>/Counter1' */
  VCU_DW.Counter1_Count_m = 0U;
 80034dc:	4b10      	ldr	r3, [pc, #64]	; (8003520 <FUNC_Transmission_Init+0x48>)
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

  /* InitializeConditions for S-Function (sdspcount2): '<S144>/Counter' */
  VCU_DW.Counter_Count_b = 0U;
 80034e4:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <FUNC_Transmission_Init+0x48>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0

  /* InitializeConditions for S-Function (sdspcount2): '<S145>/Counter' */
  VCU_DW.Counter_Count_n = 0U;
 80034ec:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <FUNC_Transmission_Init+0x48>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a

  /* SystemInitialize for Enabled SubSystem: '<S143>/Clutch Pos calc' */
  /* SystemInitialize for MinMax: '<S141>/MinMax' incorporates:
   *  Outport: '<S151>/x_clutch_LC'
   */
  VCU_B.Memory1 = 12.5;
 80034f4:	490b      	ldr	r1, [pc, #44]	; (8003524 <FUNC_Transmission_Init+0x4c>)
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <FUNC_Transmission_Init+0x50>)
 80034fc:	e9c1 23a8 	strd	r2, r3, [r1, #672]	; 0x2a0
  /* End of SystemInitialize for SubSystem: '<S143>/Clutch Pos calc' */
  /* End of SystemInitialize for SubSystem: '<S7>/LC_jr19' */

  /* SystemInitialize for Enabled SubSystem: '<S7>/semi_auto_jr18' */
  /* InitializeConditions for S-Function (sdspcount2): '<S194>/Counter1' */
  VCU_DW.Counter1_Count = 0U;
 8003500:	4b07      	ldr	r3, [pc, #28]	; (8003520 <FUNC_Transmission_Init+0x48>)
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

  /* InitializeConditions for S-Function (sdspcount2): '<S193>/Counter' */
  VCU_DW.Counter_Count = 0U;
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <FUNC_Transmission_Init+0x48>)
 800350a:	2200      	movs	r2, #0
 800350c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe

  /* InitializeConditions for S-Function (sdspcount2): '<S194>/Counter' */
  VCU_DW.Counter_Count_i = 0U;
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <FUNC_Transmission_Init+0x48>)
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

  /* End of SystemInitialize for SubSystem: '<S7>/semi_auto_jr18' */
}
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	200010c8 	.word	0x200010c8
 8003524:	200008a8 	.word	0x200008a8
 8003528:	40290000 	.word	0x40290000
 800352c:	00000000 	.word	0x00000000

08003530 <FUNC_Transmission>:

/* Output and update for atomic system: '<Root>/Transmission' */
void FUNC_Transmission(void)
{
 8003530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003532:	b089      	sub	sp, #36	; 0x24
 8003534:	af02      	add	r7, sp, #8
  int32_T rowIdx;
  boolean_T tmp;
  real_T tmp_0;

  /* DataTypeConversion: '<S7>/Data Type Conversion' */
  tmp_0 = floor(VCU_B.STW_transmission_mode);
 8003536:	4bac      	ldr	r3, [pc, #688]	; (80037e8 <FUNC_Transmission+0x2b8>)
 8003538:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	4610      	mov	r0, r2
 8003542:	4619      	mov	r1, r3
 8003544:	f00a ffd4 	bl	800e4f0 <floor>
 8003548:	e9c7 0102 	strd	r0, r1, [r7, #8]
  if (rtIsNaN(tmp_0) || rtIsInf(tmp_0)) {
 800354c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003550:	f002 fff6 	bl	8006540 <rtIsNaN>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <FUNC_Transmission+0x38>
 800355a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800355e:	f002 ffcb 	bl	80064f8 <rtIsInf>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d006      	beq.n	8003576 <FUNC_Transmission+0x46>
    tmp_0 = 0.0;
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003574:	e008      	b.n	8003588 <FUNC_Transmission+0x58>
  } else {
    tmp_0 = fmod(tmp_0, 256.0);
 8003576:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	4b9b      	ldr	r3, [pc, #620]	; (80037ec <FUNC_Transmission+0x2bc>)
 8003580:	f00b f83e 	bl	800e600 <fmod>
 8003584:	e9c7 0102 	strd	r0, r1, [r7, #8]
  }

  VCU_B.DataTypeConversion_cg = (int8_T)(tmp_0 < 0.0 ? (int32_T)(int8_T)-(int8_T)
 8003588:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	f00b fe12 	bl	800f1bc <__aeabi_dcmplt>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00d      	beq.n	80035ba <FUNC_Transmission+0x8a>
    (uint8_T)-tmp_0 : (int32_T)(int8_T)(uint8_T)tmp_0);
 800359e:	68bc      	ldr	r4, [r7, #8]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80035a6:	4620      	mov	r0, r4
 80035a8:	4629      	mov	r1, r5
 80035aa:	f00b fe2f 	bl	800f20c <__aeabi_d2uiz>
 80035ae:	4603      	mov	r3, r0
 80035b0:	b2db      	uxtb	r3, r3
    tmp_0 = 0.0;
  } else {
    tmp_0 = fmod(tmp_0, 256.0);
  }

  VCU_B.DataTypeConversion_cg = (int8_T)(tmp_0 < 0.0 ? (int32_T)(int8_T)-(int8_T)
 80035b2:	425b      	negs	r3, r3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	e006      	b.n	80035c8 <FUNC_Transmission+0x98>
    (uint8_T)-tmp_0 : (int32_T)(int8_T)(uint8_T)tmp_0);
 80035ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035be:	f00b fe25 	bl	800f20c <__aeabi_d2uiz>
 80035c2:	4603      	mov	r3, r0
 80035c4:	b2db      	uxtb	r3, r3
    tmp_0 = 0.0;
  } else {
    tmp_0 = fmod(tmp_0, 256.0);
  }

  VCU_B.DataTypeConversion_cg = (int8_T)(tmp_0 < 0.0 ? (int32_T)(int8_T)-(int8_T)
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	4a87      	ldr	r2, [pc, #540]	; (80037e8 <FUNC_Transmission+0x2b8>)
 80035ca:	f882 377c 	strb.w	r3, [r2, #1916]	; 0x77c
  /* End of DataTypeConversion: '<S7>/Data Type Conversion' */

  /* RelationalOperator: '<S137>/Compare' incorporates:
   *  Constant: '<S137>/Constant'
   */
  VCU_B.Compare = (VCU_B.DataTypeConversion_cg == 3);
 80035ce:	4b86      	ldr	r3, [pc, #536]	; (80037e8 <FUNC_Transmission+0x2b8>)
 80035d0:	f893 377c 	ldrb.w	r3, [r3, #1916]	; 0x77c
 80035d4:	b25b      	sxtb	r3, r3
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	bf0c      	ite	eq
 80035da:	2301      	moveq	r3, #1
 80035dc:	2300      	movne	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	461a      	mov	r2, r3
 80035e2:	4b81      	ldr	r3, [pc, #516]	; (80037e8 <FUNC_Transmission+0x2b8>)
 80035e4:	f883 277d 	strb.w	r2, [r3, #1917]	; 0x77d

  /* Outputs for Enabled SubSystem: '<S7>/LC_jr19' incorporates:
   *  EnablePort: '<S138>/Enable'
   */
  if (VCU_B.Compare) {
 80035e8:	4b7f      	ldr	r3, [pc, #508]	; (80037e8 <FUNC_Transmission+0x2b8>)
 80035ea:	f893 377d 	ldrb.w	r3, [r3, #1917]	; 0x77d
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f001 815d 	beq.w	80048ae <FUNC_Transmission+0x137e>
    if (!VCU_DW.LC_jr19_MODE) {
 80035f4:	4b7e      	ldr	r3, [pc, #504]	; (80037f0 <FUNC_Transmission+0x2c0>)
 80035f6:	f893 3164 	ldrb.w	r3, [r3, #356]	; 0x164
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d103      	bne.n	8003606 <FUNC_Transmission+0xd6>
      VCU_DW.LC_jr19_MODE = true;
 80035fe:	4b7c      	ldr	r3, [pc, #496]	; (80037f0 <FUNC_Transmission+0x2c0>)
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
    /* CombinatorialLogic: '<S175>/Logic' incorporates:
     *  Delay: '<S144>/Delay'
     *  Memory: '<S175>/Memory'
     *  UnitDelay: '<S144>/Unit Delay1'
     */
    VCU_B.UnitDelay1_h = VCU_DW.UnitDelay1_DSTATE_d;
 8003606:	4b7a      	ldr	r3, [pc, #488]	; (80037f0 <FUNC_Transmission+0x2c0>)
 8003608:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 800360c:	4b76      	ldr	r3, [pc, #472]	; (80037e8 <FUNC_Transmission+0x2b8>)
 800360e:	f883 27c6 	strb.w	r2, [r3, #1990]	; 0x7c6
    VCU_B.Delay_f = VCU_DW.Delay_DSTATE_i[0];
 8003612:	4b77      	ldr	r3, [pc, #476]	; (80037f0 <FUNC_Transmission+0x2c0>)
 8003614:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 8003618:	4b73      	ldr	r3, [pc, #460]	; (80037e8 <FUNC_Transmission+0x2b8>)
 800361a:	f883 27c7 	strb.w	r2, [r3, #1991]	; 0x7c7
    VCU_B.Memory_k = VCU_DW.Memory_PreviousInput_c;
 800361e:	4b74      	ldr	r3, [pc, #464]	; (80037f0 <FUNC_Transmission+0x2c0>)
 8003620:	f893 2157 	ldrb.w	r2, [r3, #343]	; 0x157
 8003624:	4b70      	ldr	r3, [pc, #448]	; (80037e8 <FUNC_Transmission+0x2b8>)
 8003626:	f883 27c8 	strb.w	r2, [r3, #1992]	; 0x7c8
    rowIdx = VCU_B.UnitDelay1_h;
 800362a:	4b6f      	ldr	r3, [pc, #444]	; (80037e8 <FUNC_Transmission+0x2b8>)
 800362c:	f893 37c6 	ldrb.w	r3, [r3, #1990]	; 0x7c6
 8003630:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Delay_f);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	4a6c      	ldr	r2, [pc, #432]	; (80037e8 <FUNC_Transmission+0x2b8>)
 8003638:	f892 27c7 	ldrb.w	r2, [r2, #1991]	; 0x7c7
 800363c:	4413      	add	r3, r2
 800363e:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_k);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4a68      	ldr	r2, [pc, #416]	; (80037e8 <FUNC_Transmission+0x2b8>)
 8003646:	f892 27c8 	ldrb.w	r2, [r2, #1992]	; 0x7c8
 800364a:	4413      	add	r3, r2
 800364c:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_a[0U] = VCU_ConstP.pooled33[(uint32_T)rowIdx];
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	4a68      	ldr	r2, [pc, #416]	; (80037f4 <FUNC_Transmission+0x2c4>)
 8003652:	4413      	add	r3, r2
 8003654:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003658:	4b63      	ldr	r3, [pc, #396]	; (80037e8 <FUNC_Transmission+0x2b8>)
 800365a:	f883 27c9 	strb.w	r2, [r3, #1993]	; 0x7c9
    VCU_B.Logic_a[1U] = VCU_ConstP.pooled33[rowIdx + 8U];
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	3308      	adds	r3, #8
 8003662:	4a64      	ldr	r2, [pc, #400]	; (80037f4 <FUNC_Transmission+0x2c4>)
 8003664:	4413      	add	r3, r2
 8003666:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 800366a:	4b5f      	ldr	r3, [pc, #380]	; (80037e8 <FUNC_Transmission+0x2b8>)
 800366c:	f883 27ca 	strb.w	r2, [r3, #1994]	; 0x7ca

    /* DataTypeConversion: '<S138>/Data Type Conversion1' */
    VCU_B.VOVG_ShiftDown_i = VCU_B.Logic_a[0];
 8003670:	4b5d      	ldr	r3, [pc, #372]	; (80037e8 <FUNC_Transmission+0x2b8>)
 8003672:	f893 37c9 	ldrb.w	r3, [r3, #1993]	; 0x7c9
 8003676:	4618      	mov	r0, r3
 8003678:	f00b fab8 	bl	800ebec <__aeabi_ui2d>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4959      	ldr	r1, [pc, #356]	; (80037e8 <FUNC_Transmission+0x2b8>)
 8003682:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
     *
     * Block description for '<S172>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_o = VCU_DW.DelayInput1_DSTATE_a;
 8003686:	4b5a      	ldr	r3, [pc, #360]	; (80037f0 <FUNC_Transmission+0x2c0>)
 8003688:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800368c:	4956      	ldr	r1, [pc, #344]	; (80037e8 <FUNC_Transmission+0x2b8>)
 800368e:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198

    /* CombinatorialLogic: '<S173>/Logic' incorporates:
     *  RelationalOperator: '<S172>/FixPt Relational Operator'
     */
    VCU_B.FixPtRelationalOperator_l = (VCU_B.STW_shift_down_request >
 8003692:	4b55      	ldr	r3, [pc, #340]	; (80037e8 <FUNC_Transmission+0x2b8>)
 8003694:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8003698:	e9d3 0100 	ldrd	r0, r1, [r3]
      VCU_B.Uk1_o);
 800369c:	4b52      	ldr	r3, [pc, #328]	; (80037e8 <FUNC_Transmission+0x2b8>)
 800369e:	e9d3 2366 	ldrd	r2, r3, [r3, #408]	; 0x198
    VCU_B.Uk1_o = VCU_DW.DelayInput1_DSTATE_a;

    /* CombinatorialLogic: '<S173>/Logic' incorporates:
     *  RelationalOperator: '<S172>/FixPt Relational Operator'
     */
    VCU_B.FixPtRelationalOperator_l = (VCU_B.STW_shift_down_request >
 80036a2:	2401      	movs	r4, #1
 80036a4:	f00b fda8 	bl	800f1f8 <__aeabi_dcmpgt>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <FUNC_Transmission+0x182>
 80036ae:	2300      	movs	r3, #0
 80036b0:	461c      	mov	r4, r3
 80036b2:	b2e3      	uxtb	r3, r4
 80036b4:	461a      	mov	r2, r3
 80036b6:	4b4c      	ldr	r3, [pc, #304]	; (80037e8 <FUNC_Transmission+0x2b8>)
 80036b8:	f883 27cb 	strb.w	r2, [r3, #1995]	; 0x7cb
      VCU_B.Uk1_o);

    /* UnitDelay: '<S144>/Unit Delay4' */
    VCU_B.UnitDelay4_b = VCU_DW.UnitDelay4_DSTATE_k;
 80036bc:	4b4c      	ldr	r3, [pc, #304]	; (80037f0 <FUNC_Transmission+0x2c0>)
 80036be:	f893 2111 	ldrb.w	r2, [r3, #273]	; 0x111
 80036c2:	4b49      	ldr	r3, [pc, #292]	; (80037e8 <FUNC_Transmission+0x2b8>)
 80036c4:	f883 27cc 	strb.w	r2, [r3, #1996]	; 0x7cc

    /* RelationalOperator: '<S166>/Compare' incorporates:
     *  Constant: '<S166>/Constant'
     */
    VCU_B.Compare_em = (VCU_B.x_clutch_STW >= 15.0);
 80036c8:	4b47      	ldr	r3, [pc, #284]	; (80037e8 <FUNC_Transmission+0x2b8>)
 80036ca:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	2101      	movs	r1, #1
 80036d4:	460c      	mov	r4, r1
 80036d6:	4610      	mov	r0, r2
 80036d8:	4619      	mov	r1, r3
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	4b46      	ldr	r3, [pc, #280]	; (80037f8 <FUNC_Transmission+0x2c8>)
 80036e0:	f00b fd80 	bl	800f1e4 <__aeabi_dcmpge>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <FUNC_Transmission+0x1be>
 80036ea:	2300      	movs	r3, #0
 80036ec:	461c      	mov	r4, r3
 80036ee:	b2e3      	uxtb	r3, r4
 80036f0:	461a      	mov	r2, r3
 80036f2:	4b3d      	ldr	r3, [pc, #244]	; (80037e8 <FUNC_Transmission+0x2b8>)
 80036f4:	f883 27cd 	strb.w	r2, [r3, #1997]	; 0x7cd

    /* Switch: '<S144>/Switch' incorporates:
     *  Constant: '<S144>/Constant'
     *  Constant: '<S144>/Constant1'
     */
    if (VCU_B.Compare_em) {
 80036f8:	4b3b      	ldr	r3, [pc, #236]	; (80037e8 <FUNC_Transmission+0x2b8>)
 80036fa:	f893 37cd 	ldrb.w	r3, [r3, #1997]	; 0x7cd
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d006      	beq.n	8003710 <FUNC_Transmission+0x1e0>
      VCU_B.Switch_e = 1.0;
 8003702:	4939      	ldr	r1, [pc, #228]	; (80037e8 <FUNC_Transmission+0x2b8>)
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	4b3c      	ldr	r3, [pc, #240]	; (80037fc <FUNC_Transmission+0x2cc>)
 800370a:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
 800370e:	e006      	b.n	800371e <FUNC_Transmission+0x1ee>
    } else {
      VCU_B.Switch_e = 2.0;
 8003710:	4935      	ldr	r1, [pc, #212]	; (80037e8 <FUNC_Transmission+0x2b8>)
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800371a:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
    }

    /* End of Switch: '<S144>/Switch' */

    /* RelationalOperator: '<S144>/Relational Operator' */
    VCU_B.LessthanNeutral_m = (VCU_B.DataTypeConversion3 < VCU_B.Switch_e);
 800371e:	4b32      	ldr	r3, [pc, #200]	; (80037e8 <FUNC_Transmission+0x2b8>)
 8003720:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003724:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003728:	4b2f      	ldr	r3, [pc, #188]	; (80037e8 <FUNC_Transmission+0x2b8>)
 800372a:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 800372e:	2401      	movs	r4, #1
 8003730:	f00b fd44 	bl	800f1bc <__aeabi_dcmplt>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <FUNC_Transmission+0x20e>
 800373a:	2300      	movs	r3, #0
 800373c:	461c      	mov	r4, r3
 800373e:	b2e3      	uxtb	r3, r4
 8003740:	461a      	mov	r2, r3
 8003742:	4b29      	ldr	r3, [pc, #164]	; (80037e8 <FUNC_Transmission+0x2b8>)
 8003744:	f883 27ce 	strb.w	r2, [r3, #1998]	; 0x7ce

    /* UnitDelay: '<S145>/Unit Delay' */
    VCU_B.UnitDelay_j = VCU_DW.UnitDelay_DSTATE_m;
 8003748:	4b29      	ldr	r3, [pc, #164]	; (80037f0 <FUNC_Transmission+0x2c0>)
 800374a:	f893 2112 	ldrb.w	r2, [r3, #274]	; 0x112
 800374e:	4b26      	ldr	r3, [pc, #152]	; (80037e8 <FUNC_Transmission+0x2b8>)
 8003750:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf

    /* UnitDelay: '<S144>/Unit Delay2' */
    VCU_B.Timeout_n = VCU_DW.UnitDelay2_DSTATE_n;
 8003754:	4b26      	ldr	r3, [pc, #152]	; (80037f0 <FUNC_Transmission+0x2c0>)
 8003756:	f893 2113 	ldrb.w	r2, [r3, #275]	; 0x113
 800375a:	4b23      	ldr	r3, [pc, #140]	; (80037e8 <FUNC_Transmission+0x2b8>)
 800375c:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0

    /* RelationalOperator: '<S168>/Compare' incorporates:
     *  Constant: '<S168>/Constant'
     */
    VCU_B.Compare_nv = (VCU_B.DataTypeConversion3 == 2.0);
 8003760:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <FUNC_Transmission+0x2b8>)
 8003762:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376a:	2101      	movs	r1, #1
 800376c:	460c      	mov	r4, r1
 800376e:	4610      	mov	r0, r2
 8003770:	4619      	mov	r1, r3
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800377a:	f00b fd15 	bl	800f1a8 <__aeabi_dcmpeq>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <FUNC_Transmission+0x258>
 8003784:	2300      	movs	r3, #0
 8003786:	461c      	mov	r4, r3
 8003788:	b2e3      	uxtb	r3, r4
 800378a:	461a      	mov	r2, r3
 800378c:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <FUNC_Transmission+0x2b8>)
 800378e:	f883 27d1 	strb.w	r2, [r3, #2001]	; 0x7d1

    /* RelationalOperator: '<S167>/Compare' incorporates:
     *  Constant: '<S167>/Constant'
     */
    VCU_B.Compare_ad = (VCU_B.DataTypeConversion2 > 5550.0);
 8003792:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <FUNC_Transmission+0x2b8>)
 8003794:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8003798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379c:	2101      	movs	r1, #1
 800379e:	460c      	mov	r4, r1
 80037a0:	4610      	mov	r0, r2
 80037a2:	4619      	mov	r1, r3
 80037a4:	a30e      	add	r3, pc, #56	; (adr r3, 80037e0 <FUNC_Transmission+0x2b0>)
 80037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037aa:	f00b fd25 	bl	800f1f8 <__aeabi_dcmpgt>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <FUNC_Transmission+0x288>
 80037b4:	2300      	movs	r3, #0
 80037b6:	461c      	mov	r4, r3
 80037b8:	b2e3      	uxtb	r3, r4
 80037ba:	461a      	mov	r2, r3
 80037bc:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <FUNC_Transmission+0x2b8>)
 80037be:	f883 27d2 	strb.w	r2, [r3, #2002]	; 0x7d2

    /* Logic: '<S144>/Logical Operator1' */
    VCU_B.RPMcheckgear21_n = (VCU_B.Compare_nv && VCU_B.Compare_ad);
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <FUNC_Transmission+0x2b8>)
 80037c4:	f893 37d1 	ldrb.w	r3, [r3, #2001]	; 0x7d1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d019      	beq.n	8003800 <FUNC_Transmission+0x2d0>
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <FUNC_Transmission+0x2b8>)
 80037ce:	f893 37d2 	ldrb.w	r3, [r3, #2002]	; 0x7d2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d014      	beq.n	8003800 <FUNC_Transmission+0x2d0>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e013      	b.n	8003802 <FUNC_Transmission+0x2d2>
 80037da:	bf00      	nop
 80037dc:	f3af 8000 	nop.w
 80037e0:	00000000 	.word	0x00000000
 80037e4:	40b5ae00 	.word	0x40b5ae00
 80037e8:	200008a8 	.word	0x200008a8
 80037ec:	40700000 	.word	0x40700000
 80037f0:	200010c8 	.word	0x200010c8
 80037f4:	0800f458 	.word	0x0800f458
 80037f8:	402e0000 	.word	0x402e0000
 80037fc:	3ff00000 	.word	0x3ff00000
 8003800:	2300      	movs	r3, #0
 8003802:	b2da      	uxtb	r2, r3
 8003804:	4bb4      	ldr	r3, [pc, #720]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003806:	f883 27d3 	strb.w	r2, [r3, #2003]	; 0x7d3

    /* RelationalOperator: '<S169>/Compare' incorporates:
     *  Constant: '<S169>/Constant'
     */
    VCU_B.Compare_ex = (VCU_B.DataTypeConversion2 > 6200.0);
 800380a:	4bb3      	ldr	r3, [pc, #716]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 800380c:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	2101      	movs	r1, #1
 8003816:	460c      	mov	r4, r1
 8003818:	4610      	mov	r0, r2
 800381a:	4619      	mov	r1, r3
 800381c:	a3ac      	add	r3, pc, #688	; (adr r3, 8003ad0 <FUNC_Transmission+0x5a0>)
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	f00b fce9 	bl	800f1f8 <__aeabi_dcmpgt>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <FUNC_Transmission+0x300>
 800382c:	2300      	movs	r3, #0
 800382e:	461c      	mov	r4, r3
 8003830:	b2e3      	uxtb	r3, r4
 8003832:	461a      	mov	r2, r3
 8003834:	4ba8      	ldr	r3, [pc, #672]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003836:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4

    /* RelationalOperator: '<S170>/Compare' incorporates:
     *  Constant: '<S170>/Constant'
     */
    VCU_B.Compare_gl = (VCU_B.DataTypeConversion3 == 3.0);
 800383a:	4ba7      	ldr	r3, [pc, #668]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 800383c:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	2101      	movs	r1, #1
 8003846:	460c      	mov	r4, r1
 8003848:	4610      	mov	r0, r2
 800384a:	4619      	mov	r1, r3
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	4ba2      	ldr	r3, [pc, #648]	; (8003adc <FUNC_Transmission+0x5ac>)
 8003852:	f00b fca9 	bl	800f1a8 <__aeabi_dcmpeq>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <FUNC_Transmission+0x330>
 800385c:	2300      	movs	r3, #0
 800385e:	461c      	mov	r4, r3
 8003860:	b2e3      	uxtb	r3, r4
 8003862:	461a      	mov	r2, r3
 8003864:	4b9c      	ldr	r3, [pc, #624]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003866:	f883 27d5 	strb.w	r2, [r3, #2005]	; 0x7d5

    /* Logic: '<S144>/Logical Operator2' */
    VCU_B.RPMcheckgear31_g = (VCU_B.Compare_ex && VCU_B.Compare_gl);
 800386a:	4b9b      	ldr	r3, [pc, #620]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 800386c:	f893 37d4 	ldrb.w	r3, [r3, #2004]	; 0x7d4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d006      	beq.n	8003882 <FUNC_Transmission+0x352>
 8003874:	4b98      	ldr	r3, [pc, #608]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003876:	f893 37d5 	ldrb.w	r3, [r3, #2005]	; 0x7d5
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <FUNC_Transmission+0x352>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <FUNC_Transmission+0x354>
 8003882:	2300      	movs	r3, #0
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4b94      	ldr	r3, [pc, #592]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003888:	f883 27d6 	strb.w	r2, [r3, #2006]	; 0x7d6

    /* CombinatorialLogic: '<S173>/Logic' incorporates:
     *  Logic: '<S144>/Logical Operator'
     *  Memory: '<S173>/Memory'
     */
    VCU_B.LogicalOperator_c = (VCU_B.UnitDelay4_b || VCU_B.LessthanNeutral_m ||
 800388c:	4b92      	ldr	r3, [pc, #584]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 800388e:	f893 37cc 	ldrb.w	r3, [r3, #1996]	; 0x7cc
      VCU_B.UnitDelay_j || VCU_B.Timeout_n || VCU_B.RPMcheckgear21_n ||
 8003892:	2b00      	cmp	r3, #0
 8003894:	d118      	bne.n	80038c8 <FUNC_Transmission+0x398>

    /* CombinatorialLogic: '<S173>/Logic' incorporates:
     *  Logic: '<S144>/Logical Operator'
     *  Memory: '<S173>/Memory'
     */
    VCU_B.LogicalOperator_c = (VCU_B.UnitDelay4_b || VCU_B.LessthanNeutral_m ||
 8003896:	4b90      	ldr	r3, [pc, #576]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003898:	f893 37ce 	ldrb.w	r3, [r3, #1998]	; 0x7ce
 800389c:	2b00      	cmp	r3, #0
 800389e:	d113      	bne.n	80038c8 <FUNC_Transmission+0x398>
      VCU_B.UnitDelay_j || VCU_B.Timeout_n || VCU_B.RPMcheckgear21_n ||
 80038a0:	4b8d      	ldr	r3, [pc, #564]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 80038a2:	f893 37cf 	ldrb.w	r3, [r3, #1999]	; 0x7cf

    /* CombinatorialLogic: '<S173>/Logic' incorporates:
     *  Logic: '<S144>/Logical Operator'
     *  Memory: '<S173>/Memory'
     */
    VCU_B.LogicalOperator_c = (VCU_B.UnitDelay4_b || VCU_B.LessthanNeutral_m ||
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10e      	bne.n	80038c8 <FUNC_Transmission+0x398>
      VCU_B.UnitDelay_j || VCU_B.Timeout_n || VCU_B.RPMcheckgear21_n ||
 80038aa:	4b8b      	ldr	r3, [pc, #556]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 80038ac:	f893 37d0 	ldrb.w	r3, [r3, #2000]	; 0x7d0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <FUNC_Transmission+0x398>
 80038b4:	4b88      	ldr	r3, [pc, #544]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 80038b6:	f893 37d3 	ldrb.w	r3, [r3, #2003]	; 0x7d3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d104      	bne.n	80038c8 <FUNC_Transmission+0x398>
      VCU_B.RPMcheckgear31_g);
 80038be:	4b86      	ldr	r3, [pc, #536]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 80038c0:	f893 37d6 	ldrb.w	r3, [r3, #2006]	; 0x7d6
    /* CombinatorialLogic: '<S173>/Logic' incorporates:
     *  Logic: '<S144>/Logical Operator'
     *  Memory: '<S173>/Memory'
     */
    VCU_B.LogicalOperator_c = (VCU_B.UnitDelay4_b || VCU_B.LessthanNeutral_m ||
      VCU_B.UnitDelay_j || VCU_B.Timeout_n || VCU_B.RPMcheckgear21_n ||
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <FUNC_Transmission+0x39c>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <FUNC_Transmission+0x39e>
 80038cc:	2300      	movs	r3, #0

    /* CombinatorialLogic: '<S173>/Logic' incorporates:
     *  Logic: '<S144>/Logical Operator'
     *  Memory: '<S173>/Memory'
     */
    VCU_B.LogicalOperator_c = (VCU_B.UnitDelay4_b || VCU_B.LessthanNeutral_m ||
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	4b81      	ldr	r3, [pc, #516]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 80038d2:	f883 27d7 	strb.w	r2, [r3, #2007]	; 0x7d7
      VCU_B.UnitDelay_j || VCU_B.Timeout_n || VCU_B.RPMcheckgear21_n ||
      VCU_B.RPMcheckgear31_g);
    VCU_B.Memory_kz = VCU_DW.Memory_PreviousInput_ao;
 80038d6:	4b82      	ldr	r3, [pc, #520]	; (8003ae0 <FUNC_Transmission+0x5b0>)
 80038d8:	f893 2158 	ldrb.w	r2, [r3, #344]	; 0x158
 80038dc:	4b7e      	ldr	r3, [pc, #504]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 80038de:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
    rowIdx = VCU_B.FixPtRelationalOperator_l;
 80038e2:	4b7d      	ldr	r3, [pc, #500]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 80038e4:	f893 37cb 	ldrb.w	r3, [r3, #1995]	; 0x7cb
 80038e8:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.LogicalOperator_c);
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	4a7a      	ldr	r2, [pc, #488]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 80038f0:	f892 27d7 	ldrb.w	r2, [r2, #2007]	; 0x7d7
 80038f4:	4413      	add	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_kz);
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4a76      	ldr	r2, [pc, #472]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 80038fe:	f892 27d8 	ldrb.w	r2, [r2, #2008]	; 0x7d8
 8003902:	4413      	add	r3, r2
 8003904:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_il[0U] = VCU_ConstP.pooled33[(uint32_T)rowIdx];
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	4a76      	ldr	r2, [pc, #472]	; (8003ae4 <FUNC_Transmission+0x5b4>)
 800390a:	4413      	add	r3, r2
 800390c:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003910:	4b71      	ldr	r3, [pc, #452]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003912:	f883 27d9 	strb.w	r2, [r3, #2009]	; 0x7d9
    VCU_B.Logic_il[1U] = VCU_ConstP.pooled33[rowIdx + 8U];
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	3308      	adds	r3, #8
 800391a:	4a72      	ldr	r2, [pc, #456]	; (8003ae4 <FUNC_Transmission+0x5b4>)
 800391c:	4413      	add	r3, r2
 800391e:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003922:	4b6d      	ldr	r3, [pc, #436]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003924:	f883 27da 	strb.w	r2, [r3, #2010]	; 0x7da

    /* CombinatorialLogic: '<S174>/Logic' incorporates:
     *  Memory: '<S174>/Memory'
     */
    VCU_B.Memory_ac = VCU_DW.Memory_PreviousInput_m;
 8003928:	4b6d      	ldr	r3, [pc, #436]	; (8003ae0 <FUNC_Transmission+0x5b0>)
 800392a:	f893 2159 	ldrb.w	r2, [r3, #345]	; 0x159
 800392e:	4b6a      	ldr	r3, [pc, #424]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003930:	f883 27db 	strb.w	r2, [r3, #2011]	; 0x7db
    tmp = VCU_B.Logic_il[0];
 8003934:	4b68      	ldr	r3, [pc, #416]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003936:	f893 37d9 	ldrb.w	r3, [r3, #2009]	; 0x7d9
 800393a:	71fb      	strb	r3, [r7, #7]
    rowIdx = tmp;
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.LogicalOperator_c);
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4a64      	ldr	r2, [pc, #400]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003946:	f892 27d7 	ldrb.w	r2, [r2, #2007]	; 0x7d7
 800394a:	4413      	add	r3, r2
 800394c:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_ac);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	4a61      	ldr	r2, [pc, #388]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003954:	f892 27db 	ldrb.w	r2, [r2, #2011]	; 0x7db
 8003958:	4413      	add	r3, r2
 800395a:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_l[0U] = VCU_ConstP.pooled33[(uint32_T)rowIdx];
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	4a61      	ldr	r2, [pc, #388]	; (8003ae4 <FUNC_Transmission+0x5b4>)
 8003960:	4413      	add	r3, r2
 8003962:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003966:	4b5c      	ldr	r3, [pc, #368]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003968:	f883 27dc 	strb.w	r2, [r3, #2012]	; 0x7dc
    VCU_B.Logic_l[1U] = VCU_ConstP.pooled33[rowIdx + 8U];
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3308      	adds	r3, #8
 8003970:	4a5c      	ldr	r2, [pc, #368]	; (8003ae4 <FUNC_Transmission+0x5b4>)
 8003972:	4413      	add	r3, r2
 8003974:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003978:	4b57      	ldr	r3, [pc, #348]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 800397a:	f883 27dd 	strb.w	r2, [r3, #2013]	; 0x7dd

    /* Sum: '<S153>/Add1' incorporates:
     *  Constant: '<S153>/Constant13'
     */
    VCU_B.Add1 = 2.0 - VCU_B.DataTypeConversion3;
 800397e:	4b56      	ldr	r3, [pc, #344]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003980:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f04f 0000 	mov.w	r0, #0
 800398c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003990:	f00a ffee 	bl	800e970 <__aeabi_dsub>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	494f      	ldr	r1, [pc, #316]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 800399a:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8

    /* Switch: '<S153>/Switch3' */
    VCU_B.Switch3 = (VCU_B.Add1 >= 0.0);
 800399e:	4b4e      	ldr	r3, [pc, #312]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 80039a0:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 80039a4:	4610      	mov	r0, r2
 80039a6:	4619      	mov	r1, r3
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	f00b fc18 	bl	800f1e4 <__aeabi_dcmpge>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <FUNC_Transmission+0x492>
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	4b4a      	ldr	r3, [pc, #296]	; (8003ae8 <FUNC_Transmission+0x5b8>)
 80039c0:	e003      	b.n	80039ca <FUNC_Transmission+0x49a>
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	4943      	ldr	r1, [pc, #268]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 80039cc:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0

    /* Switch: '<S153>/Switch4' */
    VCU_B.Switch4 = (VCU_B.Gain4 > 65.0);
 80039d0:	4b41      	ldr	r3, [pc, #260]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 80039d2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80039d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039da:	4610      	mov	r0, r2
 80039dc:	4619      	mov	r1, r3
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	4b42      	ldr	r3, [pc, #264]	; (8003aec <FUNC_Transmission+0x5bc>)
 80039e4:	f00b fc08 	bl	800f1f8 <__aeabi_dcmpgt>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <FUNC_Transmission+0x4c6>
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	4b3d      	ldr	r3, [pc, #244]	; (8003ae8 <FUNC_Transmission+0x5b8>)
 80039f4:	e003      	b.n	80039fe <FUNC_Transmission+0x4ce>
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	4936      	ldr	r1, [pc, #216]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003a00:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8

    /* Logic: '<S153>/Logical Operator3' */
    VCU_B.LogicalOperator3 = ((VCU_B.Switch3 != 0.0) && (VCU_B.Switch4 != 0.0));
 8003a04:	4b34      	ldr	r3, [pc, #208]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003a06:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	f00b fbc7 	bl	800f1a8 <__aeabi_dcmpeq>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10f      	bne.n	8003a40 <FUNC_Transmission+0x510>
 8003a20:	4b2d      	ldr	r3, [pc, #180]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003a22:	e9d3 236e 	ldrd	r2, r3, [r3, #440]	; 0x1b8
 8003a26:	4610      	mov	r0, r2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	f04f 0300 	mov.w	r3, #0
 8003a32:	f00b fbb9 	bl	800f1a8 <__aeabi_dcmpeq>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <FUNC_Transmission+0x510>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <FUNC_Transmission+0x512>
 8003a40:	2300      	movs	r3, #0
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003a46:	f883 27de 	strb.w	r2, [r3, #2014]	; 0x7de

    /* Logic: '<S153>/Logical Operator' */
    VCU_B.LogicalOperator_dn = VCU_B.LogicalOperator3;
 8003a4a:	4b23      	ldr	r3, [pc, #140]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003a4c:	f893 27de 	ldrb.w	r2, [r3, #2014]	; 0x7de
 8003a50:	4b21      	ldr	r3, [pc, #132]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003a52:	f883 27df 	strb.w	r2, [r3, #2015]	; 0x7df

    /* Product: '<S143>/Product' */
    VCU_B.Product = (uint16_T)(VCU_B.LogicalOperator_dn ? (int32_T)
 8003a56:	4b20      	ldr	r3, [pc, #128]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003a58:	f893 37df 	ldrb.w	r3, [r3, #2015]	; 0x7df
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d004      	beq.n	8003a6a <FUNC_Transmission+0x53a>
      VCU_B.LC_dash_bit : 0);
 8003a60:	4b1d      	ldr	r3, [pc, #116]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003a62:	f893 3813 	ldrb.w	r3, [r3, #2067]	; 0x813

    /* Logic: '<S153>/Logical Operator' */
    VCU_B.LogicalOperator_dn = VCU_B.LogicalOperator3;

    /* Product: '<S143>/Product' */
    VCU_B.Product = (uint16_T)(VCU_B.LogicalOperator_dn ? (int32_T)
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	e000      	b.n	8003a6c <FUNC_Transmission+0x53c>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	4a1a      	ldr	r2, [pc, #104]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003a6e:	f8a2 36f4 	strh.w	r3, [r2, #1780]	; 0x6f4
     *
     * Block description for '<S142>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_ix = VCU_DW.DelayInput1_DSTATE_d;
 8003a72:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <FUNC_Transmission+0x5b0>)
 8003a74:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 8003a78:	4b17      	ldr	r3, [pc, #92]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003a7a:	f8a3 26f6 	strh.w	r2, [r3, #1782]	; 0x6f6

    /* RelationalOperator: '<S142>/FixPt Relational Operator' */
    VCU_B.FixPtRelationalOperator_k = (VCU_B.Product > VCU_B.Uk1_ix);
 8003a7e:	4b16      	ldr	r3, [pc, #88]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003a80:	f8b3 26f4 	ldrh.w	r2, [r3, #1780]	; 0x6f4
 8003a84:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003a86:	f8b3 36f6 	ldrh.w	r3, [r3, #1782]	; 0x6f6
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	bf8c      	ite	hi
 8003a8e:	2301      	movhi	r3, #1
 8003a90:	2300      	movls	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003a98:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0

    /* Logic: '<S138>/Logical Operator' */
    VCU_B.LogicalOperator_k = (VCU_B.FixPtRelationalOperator_k ||
 8003a9c:	4b0e      	ldr	r3, [pc, #56]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003a9e:	f893 37e0 	ldrb.w	r3, [r3, #2016]	; 0x7e0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10f      	bne.n	8003ac6 <FUNC_Transmission+0x596>
      (VCU_B.STW_shift_up_request != 0.0));
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <FUNC_Transmission+0x5a8>)
 8003aa8:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]

    /* RelationalOperator: '<S142>/FixPt Relational Operator' */
    VCU_B.FixPtRelationalOperator_k = (VCU_B.Product > VCU_B.Uk1_ix);

    /* Logic: '<S138>/Logical Operator' */
    VCU_B.LogicalOperator_k = (VCU_B.FixPtRelationalOperator_k ||
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	f00b fb74 	bl	800f1a8 <__aeabi_dcmpeq>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d114      	bne.n	8003af0 <FUNC_Transmission+0x5c0>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e013      	b.n	8003af2 <FUNC_Transmission+0x5c2>
 8003aca:	bf00      	nop
 8003acc:	f3af 8000 	nop.w
 8003ad0:	00000000 	.word	0x00000000
 8003ad4:	40b83800 	.word	0x40b83800
 8003ad8:	200008a8 	.word	0x200008a8
 8003adc:	40080000 	.word	0x40080000
 8003ae0:	200010c8 	.word	0x200010c8
 8003ae4:	0800f458 	.word	0x0800f458
 8003ae8:	3ff00000 	.word	0x3ff00000
 8003aec:	40504000 	.word	0x40504000
 8003af0:	2300      	movs	r3, #0
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	4b9a      	ldr	r3, [pc, #616]	; (8003d60 <FUNC_Transmission+0x830>)
 8003af6:	f883 27e1 	strb.w	r2, [r3, #2017]	; 0x7e1
     *
     * Block description for '<S179>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_fm = VCU_DW.DelayInput1_DSTATE_fa;
 8003afa:	4b9a      	ldr	r3, [pc, #616]	; (8003d64 <FUNC_Transmission+0x834>)
 8003afc:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
 8003b00:	4b97      	ldr	r3, [pc, #604]	; (8003d60 <FUNC_Transmission+0x830>)
 8003b02:	f883 27e2 	strb.w	r2, [r3, #2018]	; 0x7e2

    /* CombinatorialLogic: '<S182>/Logic' incorporates:
     *  RelationalOperator: '<S179>/FixPt Relational Operator'
     */
    VCU_B.FixPtRelationalOperator_o = ((int32_T)VCU_B.LogicalOperator_k >
 8003b06:	4b96      	ldr	r3, [pc, #600]	; (8003d60 <FUNC_Transmission+0x830>)
 8003b08:	f893 27e1 	ldrb.w	r2, [r3, #2017]	; 0x7e1
      (int32_T)VCU_B.Uk1_fm);
 8003b0c:	4b94      	ldr	r3, [pc, #592]	; (8003d60 <FUNC_Transmission+0x830>)
 8003b0e:	f893 37e2 	ldrb.w	r3, [r3, #2018]	; 0x7e2
    VCU_B.Uk1_fm = VCU_DW.DelayInput1_DSTATE_fa;

    /* CombinatorialLogic: '<S182>/Logic' incorporates:
     *  RelationalOperator: '<S179>/FixPt Relational Operator'
     */
    VCU_B.FixPtRelationalOperator_o = ((int32_T)VCU_B.LogicalOperator_k >
 8003b12:	429a      	cmp	r2, r3
 8003b14:	bf8c      	ite	hi
 8003b16:	2301      	movhi	r3, #1
 8003b18:	2300      	movls	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b90      	ldr	r3, [pc, #576]	; (8003d60 <FUNC_Transmission+0x830>)
 8003b20:	f883 27e3 	strb.w	r2, [r3, #2019]	; 0x7e3
     *
     * Block description for '<S180>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_d = VCU_DW.DelayInput1_DSTATE_l;
 8003b24:	4b8f      	ldr	r3, [pc, #572]	; (8003d64 <FUNC_Transmission+0x834>)
 8003b26:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003b2a:	498d      	ldr	r1, [pc, #564]	; (8003d60 <FUNC_Transmission+0x830>)
 8003b2c:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0

    /* RelationalOperator: '<S180>/FixPt Relational Operator' */
    VCU_B.FixPtRelationalOperator_cf = (VCU_B.DataTypeConversion3 > VCU_B.Uk1_d);
 8003b30:	4b8b      	ldr	r3, [pc, #556]	; (8003d60 <FUNC_Transmission+0x830>)
 8003b32:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003b36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b3a:	4b89      	ldr	r3, [pc, #548]	; (8003d60 <FUNC_Transmission+0x830>)
 8003b3c:	e9d3 2370 	ldrd	r2, r3, [r3, #448]	; 0x1c0
 8003b40:	2401      	movs	r4, #1
 8003b42:	f00b fb59 	bl	800f1f8 <__aeabi_dcmpgt>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <FUNC_Transmission+0x620>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	461c      	mov	r4, r3
 8003b50:	b2e3      	uxtb	r3, r4
 8003b52:	461a      	mov	r2, r3
 8003b54:	4b82      	ldr	r3, [pc, #520]	; (8003d60 <FUNC_Transmission+0x830>)
 8003b56:	f883 27e4 	strb.w	r2, [r3, #2020]	; 0x7e4

    /* RelationalOperator: '<S176>/Compare' incorporates:
     *  Constant: '<S176>/Constant'
     */
    VCU_B.Compare_np = (VCU_B.DataTypeConversion3 >= 3.0);
 8003b5a:	4b81      	ldr	r3, [pc, #516]	; (8003d60 <FUNC_Transmission+0x830>)
 8003b5c:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	2101      	movs	r1, #1
 8003b66:	460c      	mov	r4, r1
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	4b7d      	ldr	r3, [pc, #500]	; (8003d68 <FUNC_Transmission+0x838>)
 8003b72:	f00b fb37 	bl	800f1e4 <__aeabi_dcmpge>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <FUNC_Transmission+0x650>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	461c      	mov	r4, r3
 8003b80:	b2e3      	uxtb	r3, r4
 8003b82:	461a      	mov	r2, r3
 8003b84:	4b76      	ldr	r3, [pc, #472]	; (8003d60 <FUNC_Transmission+0x830>)
 8003b86:	f883 27e5 	strb.w	r2, [r3, #2021]	; 0x7e5

    /* UnitDelay: '<S144>/Unit Delay' */
    VCU_B.UnitDelay_m = VCU_DW.UnitDelay_DSTATE_f;
 8003b8a:	4b76      	ldr	r3, [pc, #472]	; (8003d64 <FUNC_Transmission+0x834>)
 8003b8c:	f893 2115 	ldrb.w	r2, [r3, #277]	; 0x115
 8003b90:	4b73      	ldr	r3, [pc, #460]	; (8003d60 <FUNC_Transmission+0x830>)
 8003b92:	f883 27e6 	strb.w	r2, [r3, #2022]	; 0x7e6

    /* UnitDelay: '<S145>/Unit Delay1' */
    VCU_B.Timeout_c = VCU_DW.UnitDelay1_DSTATE_i;
 8003b96:	4b73      	ldr	r3, [pc, #460]	; (8003d64 <FUNC_Transmission+0x834>)
 8003b98:	f893 2116 	ldrb.w	r2, [r3, #278]	; 0x116
 8003b9c:	4b70      	ldr	r3, [pc, #448]	; (8003d60 <FUNC_Transmission+0x830>)
 8003b9e:	f883 27e7 	strb.w	r2, [r3, #2023]	; 0x7e7

    /* RelationalOperator: '<S178>/Compare' incorporates:
     *  Constant: '<S178>/Constant'
     */
    VCU_B.Compare_lz = (VCU_B.DataTypeConversion3 == 0.0);
 8003ba2:	4b6f      	ldr	r3, [pc, #444]	; (8003d60 <FUNC_Transmission+0x830>)
 8003ba4:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	2101      	movs	r1, #1
 8003bae:	460c      	mov	r4, r1
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	f00b faf4 	bl	800f1a8 <__aeabi_dcmpeq>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <FUNC_Transmission+0x69a>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	461c      	mov	r4, r3
 8003bca:	b2e3      	uxtb	r3, r4
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4b64      	ldr	r3, [pc, #400]	; (8003d60 <FUNC_Transmission+0x830>)
 8003bd0:	f883 27e8 	strb.w	r2, [r3, #2024]	; 0x7e8

    /* RelationalOperator: '<S177>/Compare' incorporates:
     *  Constant: '<S177>/Constant'
     */
    VCU_B.Compare_ph = (VCU_B.x_clutch_STW < 15.0);
 8003bd4:	4b62      	ldr	r3, [pc, #392]	; (8003d60 <FUNC_Transmission+0x830>)
 8003bd6:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	2101      	movs	r1, #1
 8003be0:	460c      	mov	r4, r1
 8003be2:	4610      	mov	r0, r2
 8003be4:	4619      	mov	r1, r3
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	4b60      	ldr	r3, [pc, #384]	; (8003d6c <FUNC_Transmission+0x83c>)
 8003bec:	f00b fae6 	bl	800f1bc <__aeabi_dcmplt>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <FUNC_Transmission+0x6ca>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	461c      	mov	r4, r3
 8003bfa:	b2e3      	uxtb	r3, r4
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4b58      	ldr	r3, [pc, #352]	; (8003d60 <FUNC_Transmission+0x830>)
 8003c00:	f883 27e9 	strb.w	r2, [r3, #2025]	; 0x7e9

    /* Logic: '<S145>/Logical Operator1' */
    VCU_B.FailSafefirstgear_l = (VCU_B.Compare_lz && VCU_B.Compare_ph);
 8003c04:	4b56      	ldr	r3, [pc, #344]	; (8003d60 <FUNC_Transmission+0x830>)
 8003c06:	f893 37e8 	ldrb.w	r3, [r3, #2024]	; 0x7e8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d006      	beq.n	8003c1c <FUNC_Transmission+0x6ec>
 8003c0e:	4b54      	ldr	r3, [pc, #336]	; (8003d60 <FUNC_Transmission+0x830>)
 8003c10:	f893 37e9 	ldrb.w	r3, [r3, #2025]	; 0x7e9
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <FUNC_Transmission+0x6ec>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <FUNC_Transmission+0x6ee>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	4b4f      	ldr	r3, [pc, #316]	; (8003d60 <FUNC_Transmission+0x830>)
 8003c22:	f883 27ea 	strb.w	r2, [r3, #2026]	; 0x7ea

    /* CombinatorialLogic: '<S182>/Logic' incorporates:
     *  Logic: '<S145>/Logical Operator'
     *  Memory: '<S182>/Memory'
     */
    VCU_B.LogicalOperator_d0 = (VCU_B.FixPtRelationalOperator_cf ||
 8003c26:	4b4e      	ldr	r3, [pc, #312]	; (8003d60 <FUNC_Transmission+0x830>)
 8003c28:	f893 37e4 	ldrb.w	r3, [r3, #2020]	; 0x7e4
      VCU_B.Compare_np || VCU_B.UnitDelay_m || VCU_B.Timeout_c ||
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d113      	bne.n	8003c58 <FUNC_Transmission+0x728>
 8003c30:	4b4b      	ldr	r3, [pc, #300]	; (8003d60 <FUNC_Transmission+0x830>)
 8003c32:	f893 37e5 	ldrb.w	r3, [r3, #2021]	; 0x7e5

    /* CombinatorialLogic: '<S182>/Logic' incorporates:
     *  Logic: '<S145>/Logical Operator'
     *  Memory: '<S182>/Memory'
     */
    VCU_B.LogicalOperator_d0 = (VCU_B.FixPtRelationalOperator_cf ||
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10e      	bne.n	8003c58 <FUNC_Transmission+0x728>
      VCU_B.Compare_np || VCU_B.UnitDelay_m || VCU_B.Timeout_c ||
 8003c3a:	4b49      	ldr	r3, [pc, #292]	; (8003d60 <FUNC_Transmission+0x830>)
 8003c3c:	f893 37e6 	ldrb.w	r3, [r3, #2022]	; 0x7e6
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <FUNC_Transmission+0x728>
 8003c44:	4b46      	ldr	r3, [pc, #280]	; (8003d60 <FUNC_Transmission+0x830>)
 8003c46:	f893 37e7 	ldrb.w	r3, [r3, #2023]	; 0x7e7
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d104      	bne.n	8003c58 <FUNC_Transmission+0x728>
      VCU_B.FailSafefirstgear_l);
 8003c4e:	4b44      	ldr	r3, [pc, #272]	; (8003d60 <FUNC_Transmission+0x830>)
 8003c50:	f893 37ea 	ldrb.w	r3, [r3, #2026]	; 0x7ea
    /* CombinatorialLogic: '<S182>/Logic' incorporates:
     *  Logic: '<S145>/Logical Operator'
     *  Memory: '<S182>/Memory'
     */
    VCU_B.LogicalOperator_d0 = (VCU_B.FixPtRelationalOperator_cf ||
      VCU_B.Compare_np || VCU_B.UnitDelay_m || VCU_B.Timeout_c ||
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <FUNC_Transmission+0x72c>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <FUNC_Transmission+0x72e>
 8003c5c:	2300      	movs	r3, #0

    /* CombinatorialLogic: '<S182>/Logic' incorporates:
     *  Logic: '<S145>/Logical Operator'
     *  Memory: '<S182>/Memory'
     */
    VCU_B.LogicalOperator_d0 = (VCU_B.FixPtRelationalOperator_cf ||
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	4b3f      	ldr	r3, [pc, #252]	; (8003d60 <FUNC_Transmission+0x830>)
 8003c62:	f883 27eb 	strb.w	r2, [r3, #2027]	; 0x7eb
      VCU_B.Compare_np || VCU_B.UnitDelay_m || VCU_B.Timeout_c ||
      VCU_B.FailSafefirstgear_l);
    VCU_B.Memory_o = VCU_DW.Memory_PreviousInput_e;
 8003c66:	4b3f      	ldr	r3, [pc, #252]	; (8003d64 <FUNC_Transmission+0x834>)
 8003c68:	f893 215a 	ldrb.w	r2, [r3, #346]	; 0x15a
 8003c6c:	4b3c      	ldr	r3, [pc, #240]	; (8003d60 <FUNC_Transmission+0x830>)
 8003c6e:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
    rowIdx = VCU_B.FixPtRelationalOperator_o;
 8003c72:	4b3b      	ldr	r3, [pc, #236]	; (8003d60 <FUNC_Transmission+0x830>)
 8003c74:	f893 37e3 	ldrb.w	r3, [r3, #2019]	; 0x7e3
 8003c78:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.LogicalOperator_d0);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	4a38      	ldr	r2, [pc, #224]	; (8003d60 <FUNC_Transmission+0x830>)
 8003c80:	f892 27eb 	ldrb.w	r2, [r2, #2027]	; 0x7eb
 8003c84:	4413      	add	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_o);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	4a34      	ldr	r2, [pc, #208]	; (8003d60 <FUNC_Transmission+0x830>)
 8003c8e:	f892 27ec 	ldrb.w	r2, [r2, #2028]	; 0x7ec
 8003c92:	4413      	add	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_p[0U] = VCU_ConstP.pooled33[(uint32_T)rowIdx];
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4a35      	ldr	r2, [pc, #212]	; (8003d70 <FUNC_Transmission+0x840>)
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003ca0:	4b2f      	ldr	r3, [pc, #188]	; (8003d60 <FUNC_Transmission+0x830>)
 8003ca2:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
    VCU_B.Logic_p[1U] = VCU_ConstP.pooled33[rowIdx + 8U];
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	3308      	adds	r3, #8
 8003caa:	4a31      	ldr	r2, [pc, #196]	; (8003d70 <FUNC_Transmission+0x840>)
 8003cac:	4413      	add	r3, r2
 8003cae:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003cb2:	4b2b      	ldr	r3, [pc, #172]	; (8003d60 <FUNC_Transmission+0x830>)
 8003cb4:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee

    /* CombinatorialLogic: '<S183>/Logic' incorporates:
     *  S-Function (sdspcount2): '<S145>/Counter1'
     */
    VCU_B.Counter1_a = false;
 8003cb8:	4b29      	ldr	r3, [pc, #164]	; (8003d60 <FUNC_Transmission+0x830>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 27ef 	strb.w	r2, [r3, #2031]	; 0x7ef

    /* S-Function (sdspcount2): '<S145>/Counter1' */
    if (VCU_B.LogicalOperator_d0) {
 8003cc0:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <FUNC_Transmission+0x830>)
 8003cc2:	f893 37eb 	ldrb.w	r3, [r3, #2027]	; 0x7eb
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <FUNC_Transmission+0x7a2>
      VCU_DW.Counter1_Count_m = 0U;
 8003cca:	4b26      	ldr	r3, [pc, #152]	; (8003d64 <FUNC_Transmission+0x834>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    }

    if (VCU_B.Logic_p[0]) {
 8003cd2:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <FUNC_Transmission+0x830>)
 8003cd4:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d011      	beq.n	8003d00 <FUNC_Transmission+0x7d0>
      if (VCU_DW.Counter1_Count_m < 60) {
 8003cdc:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <FUNC_Transmission+0x834>)
 8003cde:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8003ce2:	2b3b      	cmp	r3, #59	; 0x3b
 8003ce4:	d808      	bhi.n	8003cf8 <FUNC_Transmission+0x7c8>
        VCU_DW.Counter1_Count_m++;
 8003ce6:	4b1f      	ldr	r3, [pc, #124]	; (8003d64 <FUNC_Transmission+0x834>)
 8003ce8:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8003cec:	3301      	adds	r3, #1
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <FUNC_Transmission+0x834>)
 8003cf2:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8003cf6:	e003      	b.n	8003d00 <FUNC_Transmission+0x7d0>
      } else {
        VCU_DW.Counter1_Count_m = 0U;
 8003cf8:	4b1a      	ldr	r3, [pc, #104]	; (8003d64 <FUNC_Transmission+0x834>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
      }
    }

    if (VCU_DW.Counter1_Count_m == 1) {
 8003d00:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <FUNC_Transmission+0x834>)
 8003d02:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d103      	bne.n	8003d12 <FUNC_Transmission+0x7e2>
      /* CombinatorialLogic: '<S183>/Logic' */
      VCU_B.Counter1_a = true;
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <FUNC_Transmission+0x830>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 27ef 	strb.w	r2, [r3, #2031]	; 0x7ef
     *
     * Block description for '<S181>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_og = VCU_DW.DelayInput1_DSTATE_b;
 8003d12:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <FUNC_Transmission+0x834>)
 8003d14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d18:	4911      	ldr	r1, [pc, #68]	; (8003d60 <FUNC_Transmission+0x830>)
 8003d1a:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8

    /* RelationalOperator: '<S181>/FixPt Relational Operator' */
    VCU_B.FixPtRelationalOperator_p = (VCU_B.DataTypeConversion3 > VCU_B.Uk1_og);
 8003d1e:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <FUNC_Transmission+0x830>)
 8003d20:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003d24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d28:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <FUNC_Transmission+0x830>)
 8003d2a:	e9d3 2372 	ldrd	r2, r3, [r3, #456]	; 0x1c8
 8003d2e:	2401      	movs	r4, #1
 8003d30:	f00b fa62 	bl	800f1f8 <__aeabi_dcmpgt>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <FUNC_Transmission+0x80e>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	461c      	mov	r4, r3
 8003d3e:	b2e3      	uxtb	r3, r4
 8003d40:	461a      	mov	r2, r3
 8003d42:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <FUNC_Transmission+0x830>)
 8003d44:	f883 27f0 	strb.w	r2, [r3, #2032]	; 0x7f0

    /* CombinatorialLogic: '<S183>/Logic' incorporates:
     *  Logic: '<S145>/Logical Operator2'
     *  Memory: '<S183>/Memory'
     */
    VCU_B.LogicalOperator2_b = (VCU_B.LogicalOperator_d0 ||
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <FUNC_Transmission+0x830>)
 8003d4a:	f893 37eb 	ldrb.w	r3, [r3, #2027]	; 0x7eb
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d104      	bne.n	8003d5c <FUNC_Transmission+0x82c>
      VCU_B.FixPtRelationalOperator_p);
 8003d52:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <FUNC_Transmission+0x830>)
 8003d54:	f893 37f0 	ldrb.w	r3, [r3, #2032]	; 0x7f0

    /* CombinatorialLogic: '<S183>/Logic' incorporates:
     *  Logic: '<S145>/Logical Operator2'
     *  Memory: '<S183>/Memory'
     */
    VCU_B.LogicalOperator2_b = (VCU_B.LogicalOperator_d0 ||
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00b      	beq.n	8003d74 <FUNC_Transmission+0x844>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e00a      	b.n	8003d76 <FUNC_Transmission+0x846>
 8003d60:	200008a8 	.word	0x200008a8
 8003d64:	200010c8 	.word	0x200010c8
 8003d68:	40080000 	.word	0x40080000
 8003d6c:	402e0000 	.word	0x402e0000
 8003d70:	0800f458 	.word	0x0800f458
 8003d74:	2300      	movs	r3, #0
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	4bab      	ldr	r3, [pc, #684]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003d7a:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
      VCU_B.FixPtRelationalOperator_p);
    VCU_B.Memory_db = VCU_DW.Memory_PreviousInput_n;
 8003d7e:	4bab      	ldr	r3, [pc, #684]	; (800402c <FUNC_Transmission+0xafc>)
 8003d80:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
 8003d84:	4ba8      	ldr	r3, [pc, #672]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003d86:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
    rowIdx = VCU_B.Counter1_a;
 8003d8a:	4ba7      	ldr	r3, [pc, #668]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003d8c:	f893 37ef 	ldrb.w	r3, [r3, #2031]	; 0x7ef
 8003d90:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.LogicalOperator2_b);
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	4aa4      	ldr	r2, [pc, #656]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003d98:	f892 27f1 	ldrb.w	r2, [r2, #2033]	; 0x7f1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_db);
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4aa0      	ldr	r2, [pc, #640]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003da6:	f892 27f2 	ldrb.w	r2, [r2, #2034]	; 0x7f2
 8003daa:	4413      	add	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_k[0U] = VCU_ConstP.pooled33[(uint32_T)rowIdx];
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	4a9f      	ldr	r2, [pc, #636]	; (8004030 <FUNC_Transmission+0xb00>)
 8003db2:	4413      	add	r3, r2
 8003db4:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003db8:	4b9b      	ldr	r3, [pc, #620]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003dba:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
    VCU_B.Logic_k[1U] = VCU_ConstP.pooled33[rowIdx + 8U];
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	4a9b      	ldr	r2, [pc, #620]	; (8004030 <FUNC_Transmission+0xb00>)
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003dca:	4b97      	ldr	r3, [pc, #604]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003dcc:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4

    /* DataTypeConversion: '<S138>/Data Type Conversion2' */
    VCU_B.Ignition_Cut_g = VCU_B.Logic_k[0];
 8003dd0:	4b95      	ldr	r3, [pc, #596]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003dd2:	f893 37f3 	ldrb.w	r3, [r3, #2035]	; 0x7f3
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f00a ff08 	bl	800ebec <__aeabi_ui2d>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4991      	ldr	r1, [pc, #580]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003de2:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0

    /* DataTypeConversion: '<S138>/Data Type Conversion8' */
    VCU_B.LC_Mdes_bl = VCU_B.Logic_k[0];
 8003de6:	4b90      	ldr	r3, [pc, #576]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003de8:	f893 37f3 	ldrb.w	r3, [r3, #2035]	; 0x7f3
 8003dec:	4618      	mov	r0, r3
 8003dee:	f00a fefd 	bl	800ebec <__aeabi_ui2d>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	498c      	ldr	r1, [pc, #560]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003df8:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8

    /* S-Function (sdspcount2): '<S144>/Counter' */
    VCU_B.Counter_j = false;
 8003dfc:	4b8a      	ldr	r3, [pc, #552]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 27f5 	strb.w	r2, [r3, #2037]	; 0x7f5
    if (VCU_B.LogicalOperator_c) {
 8003e04:	4b88      	ldr	r3, [pc, #544]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003e06:	f893 37d7 	ldrb.w	r3, [r3, #2007]	; 0x7d7
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <FUNC_Transmission+0x8e6>
      VCU_DW.Counter_Count_b = 0U;
 8003e0e:	4b87      	ldr	r3, [pc, #540]	; (800402c <FUNC_Transmission+0xafc>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    if (VCU_B.Logic_il[0]) {
 8003e16:	4b84      	ldr	r3, [pc, #528]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003e18:	f893 37d9 	ldrb.w	r3, [r3, #2009]	; 0x7d9
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d012      	beq.n	8003e46 <FUNC_Transmission+0x916>
      if (VCU_DW.Counter_Count_b < 500) {
 8003e20:	4b82      	ldr	r3, [pc, #520]	; (800402c <FUNC_Transmission+0xafc>)
 8003e22:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8003e26:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e2a:	d208      	bcs.n	8003e3e <FUNC_Transmission+0x90e>
        VCU_DW.Counter_Count_b++;
 8003e2c:	4b7f      	ldr	r3, [pc, #508]	; (800402c <FUNC_Transmission+0xafc>)
 8003e2e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8003e32:	3301      	adds	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	4b7d      	ldr	r3, [pc, #500]	; (800402c <FUNC_Transmission+0xafc>)
 8003e38:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8003e3c:	e003      	b.n	8003e46 <FUNC_Transmission+0x916>
      } else {
        VCU_DW.Counter_Count_b = 0U;
 8003e3e:	4b7b      	ldr	r3, [pc, #492]	; (800402c <FUNC_Transmission+0xafc>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
      }
    }

    if (VCU_DW.Counter_Count_b == 500) {
 8003e46:	4b79      	ldr	r3, [pc, #484]	; (800402c <FUNC_Transmission+0xafc>)
 8003e48:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8003e4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e50:	d103      	bne.n	8003e5a <FUNC_Transmission+0x92a>
      VCU_B.Counter_j = true;
 8003e52:	4b75      	ldr	r3, [pc, #468]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 27f5 	strb.w	r2, [r3, #2037]	; 0x7f5
    }

    /* End of S-Function (sdspcount2): '<S144>/Counter' */

    /* S-Function (sdspcount2): '<S145>/Counter' */
    VCU_B.Counter_a = false;
 8003e5a:	4b73      	ldr	r3, [pc, #460]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 27f6 	strb.w	r2, [r3, #2038]	; 0x7f6
    if (VCU_B.LogicalOperator_d0) {
 8003e62:	4b71      	ldr	r3, [pc, #452]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003e64:	f893 37eb 	ldrb.w	r3, [r3, #2027]	; 0x7eb
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <FUNC_Transmission+0x944>
      VCU_DW.Counter_Count_n = 0U;
 8003e6c:	4b6f      	ldr	r3, [pc, #444]	; (800402c <FUNC_Transmission+0xafc>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    }

    if (VCU_B.Logic_p[0]) {
 8003e74:	4b6c      	ldr	r3, [pc, #432]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003e76:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d011      	beq.n	8003ea2 <FUNC_Transmission+0x972>
      if (VCU_DW.Counter_Count_n < 200) {
 8003e7e:	4b6b      	ldr	r3, [pc, #428]	; (800402c <FUNC_Transmission+0xafc>)
 8003e80:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8003e84:	2bc7      	cmp	r3, #199	; 0xc7
 8003e86:	d808      	bhi.n	8003e9a <FUNC_Transmission+0x96a>
        VCU_DW.Counter_Count_n++;
 8003e88:	4b68      	ldr	r3, [pc, #416]	; (800402c <FUNC_Transmission+0xafc>)
 8003e8a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8003e8e:	3301      	adds	r3, #1
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4b66      	ldr	r3, [pc, #408]	; (800402c <FUNC_Transmission+0xafc>)
 8003e94:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 8003e98:	e003      	b.n	8003ea2 <FUNC_Transmission+0x972>
      } else {
        VCU_DW.Counter_Count_n = 0U;
 8003e9a:	4b64      	ldr	r3, [pc, #400]	; (800402c <FUNC_Transmission+0xafc>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      }
    }

    if (VCU_DW.Counter_Count_n == 100) {
 8003ea2:	4b62      	ldr	r3, [pc, #392]	; (800402c <FUNC_Transmission+0xafc>)
 8003ea4:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8003ea8:	2b64      	cmp	r3, #100	; 0x64
 8003eaa:	d103      	bne.n	8003eb4 <FUNC_Transmission+0x984>
      VCU_B.Counter_a = true;
 8003eac:	4b5e      	ldr	r3, [pc, #376]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 27f6 	strb.w	r2, [r3, #2038]	; 0x7f6
    }

    /* End of S-Function (sdspcount2): '<S145>/Counter' */

    /* DataTypeConversion: '<S138>/Data Type Conversion' */
    VCU_B.VOVG_ShiftUp_d = VCU_B.Logic_p[0];
 8003eb4:	4b5c      	ldr	r3, [pc, #368]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003eb6:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f00a fe96 	bl	800ebec <__aeabi_ui2d>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4958      	ldr	r1, [pc, #352]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003ec6:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0

    /* Switch: '<S141>/Switch' */
    if (VCU_B.Logic_il[0]) {
 8003eca:	4b57      	ldr	r3, [pc, #348]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003ecc:	f893 37d9 	ldrb.w	r3, [r3, #2009]	; 0x7d9
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d006      	beq.n	8003ee2 <FUNC_Transmission+0x9b2>
      /* MinMax: '<S141>/MinMax' incorporates:
       *  Constant: '<S141>/Constant'
       */
      VCU_B.Switch_h = 20.0;
 8003ed4:	4954      	ldr	r1, [pc, #336]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	4b56      	ldr	r3, [pc, #344]	; (8004034 <FUNC_Transmission+0xb04>)
 8003edc:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
 8003ee0:	e006      	b.n	8003ef0 <FUNC_Transmission+0x9c0>
    } else {
      /* MinMax: '<S141>/MinMax' incorporates:
       *  Constant: '<S141>/Constant1'
       */
      VCU_B.Switch_h = 0.0;
 8003ee2:	4951      	ldr	r1, [pc, #324]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
    }

    /* End of Switch: '<S141>/Switch' */

    /* Memory: '<S143>/Memory' */
    VCU_B.Memory_od = VCU_DW.Memory_PreviousInput_i;
 8003ef0:	4b4e      	ldr	r3, [pc, #312]	; (800402c <FUNC_Transmission+0xafc>)
 8003ef2:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
 8003ef6:	4b4c      	ldr	r3, [pc, #304]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003ef8:	f883 27f7 	strb.w	r2, [r3, #2039]	; 0x7f7

    /* Sum: '<S154>/Add' */
    VCU_B.Add_o = VCU_B.Add1_k + VCU_B.Add1_de;
 8003efc:	4b4a      	ldr	r3, [pc, #296]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003efe:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8003f02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f06:	4b48      	ldr	r3, [pc, #288]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003f08:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 8003f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f10:	f00a fd30 	bl	800e974 <__adddf3>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4943      	ldr	r1, [pc, #268]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003f1a:	e9c1 237c 	strd	r2, r3, [r1, #496]	; 0x1f0

    /* Gain: '<S154>/Gain' */
    VCU_B.Gain_g = 0.5 * VCU_B.Add_o;
 8003f1e:	4b42      	ldr	r3, [pc, #264]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003f20:	e9d3 237c 	ldrd	r2, r3, [r3, #496]	; 0x1f0
 8003f24:	4610      	mov	r0, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	4b42      	ldr	r3, [pc, #264]	; (8004038 <FUNC_Transmission+0xb08>)
 8003f2e:	f00a fed3 	bl	800ecd8 <__aeabi_dmul>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	493c      	ldr	r1, [pc, #240]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003f38:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8

    /* Sum: '<S154>/Add1' */
    VCU_B.Add1_f = VCU_B.Add1_ks + VCU_B.Add1_eq;
 8003f3c:	4b3a      	ldr	r3, [pc, #232]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003f3e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003f42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f46:	4b38      	ldr	r3, [pc, #224]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003f48:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8003f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f50:	f00a fd10 	bl	800e974 <__adddf3>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4933      	ldr	r1, [pc, #204]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003f5a:	e9c1 2380 	strd	r2, r3, [r1, #512]	; 0x200

    /* MinMax: '<S154>/MinMax' incorporates:
     *  Gain: '<S154>/Gain1'
     */
    VCU_B.Gain1 = 0.5 * VCU_B.Add1_f;
 8003f5e:	4b32      	ldr	r3, [pc, #200]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003f60:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8003f64:	4610      	mov	r0, r2
 8003f66:	4619      	mov	r1, r3
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	4b32      	ldr	r3, [pc, #200]	; (8004038 <FUNC_Transmission+0xb08>)
 8003f6e:	f00a feb3 	bl	800ecd8 <__aeabi_dmul>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	492c      	ldr	r1, [pc, #176]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003f78:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208

    /* Sum: '<S154>/Add2' */
    VCU_B.Add2 = VCU_B.Gain1 - VCU_B.Gain_g;
 8003f7c:	4b2a      	ldr	r3, [pc, #168]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003f7e:	e9d3 0182 	ldrd	r0, r1, [r3, #520]	; 0x208
 8003f82:	4b29      	ldr	r3, [pc, #164]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003f84:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8003f88:	f00a fcf2 	bl	800e970 <__aeabi_dsub>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4925      	ldr	r1, [pc, #148]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003f92:	e9c1 2384 	strd	r2, r3, [r1, #528]	; 0x210

    /* MinMax: '<S154>/MinMax' */
    if ((0.001 > VCU_B.Gain1) || rtIsNaN(VCU_B.Gain1)) {
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003f98:	e9d3 2382 	ldrd	r2, r3, [r3, #520]	; 0x208
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	a31f      	add	r3, pc, #124	; (adr r3, 8004020 <FUNC_Transmission+0xaf0>)
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f00b f909 	bl	800f1bc <__aeabi_dcmplt>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d109      	bne.n	8003fc4 <FUNC_Transmission+0xa94>
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003fb2:	e9d3 2382 	ldrd	r2, r3, [r3, #520]	; 0x208
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f002 fac1 	bl	8006540 <rtIsNaN>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <FUNC_Transmission+0xaa2>
      VCU_B.MinMax_o = 0.001;
 8003fc4:	4918      	ldr	r1, [pc, #96]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003fc6:	a316      	add	r3, pc, #88	; (adr r3, 8004020 <FUNC_Transmission+0xaf0>)
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
 8003fd0:	e005      	b.n	8003fde <FUNC_Transmission+0xaae>
    } else {
      VCU_B.MinMax_o = VCU_B.Gain1;
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003fd4:	e9d3 2382 	ldrd	r2, r3, [r3, #520]	; 0x208
 8003fd8:	4913      	ldr	r1, [pc, #76]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003fda:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
    }

    /* Saturate: '<S154>/Saturation' incorporates:
     *  Product: '<S154>/Divide'
     */
    VCU_B.Divide = VCU_B.Add2 / VCU_B.MinMax_o;
 8003fde:	4b12      	ldr	r3, [pc, #72]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003fe0:	e9d3 0184 	ldrd	r0, r1, [r3, #528]	; 0x210
 8003fe4:	4b10      	ldr	r3, [pc, #64]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003fe6:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	; 0x218
 8003fea:	f00a ff9f 	bl	800ef2c <__aeabi_ddiv>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	490d      	ldr	r1, [pc, #52]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003ff4:	e9c1 2388 	strd	r2, r3, [r1, #544]	; 0x220
    if (VCU_B.Divide > 0.5) {
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <FUNC_Transmission+0xaf8>)
 8003ffa:	e9d3 2388 	ldrd	r2, r3, [r3, #544]	; 0x220
 8003ffe:	4610      	mov	r0, r2
 8004000:	4619      	mov	r1, r3
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <FUNC_Transmission+0xb08>)
 8004008:	f00b f8f6 	bl	800f1f8 <__aeabi_dcmpgt>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d014      	beq.n	800403c <FUNC_Transmission+0xb0c>
      VCU_B.Saturation = 0.5;
 8004012:	4905      	ldr	r1, [pc, #20]	; (8004028 <FUNC_Transmission+0xaf8>)
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	4b07      	ldr	r3, [pc, #28]	; (8004038 <FUNC_Transmission+0xb08>)
 800401a:	e9c1 238a 	strd	r2, r3, [r1, #552]	; 0x228
 800401e:	e027      	b.n	8004070 <FUNC_Transmission+0xb40>
 8004020:	d2f1a9fc 	.word	0xd2f1a9fc
 8004024:	3f50624d 	.word	0x3f50624d
 8004028:	200008a8 	.word	0x200008a8
 800402c:	200010c8 	.word	0x200010c8
 8004030:	0800f458 	.word	0x0800f458
 8004034:	40340000 	.word	0x40340000
 8004038:	3fe00000 	.word	0x3fe00000
    } else if (VCU_B.Divide < -0.5) {
 800403c:	4baa      	ldr	r3, [pc, #680]	; (80042e8 <FUNC_Transmission+0xdb8>)
 800403e:	e9d3 2388 	ldrd	r2, r3, [r3, #544]	; 0x220
 8004042:	4610      	mov	r0, r2
 8004044:	4619      	mov	r1, r3
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	4ba8      	ldr	r3, [pc, #672]	; (80042ec <FUNC_Transmission+0xdbc>)
 800404c:	f00b f8b6 	bl	800f1bc <__aeabi_dcmplt>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d006      	beq.n	8004064 <FUNC_Transmission+0xb34>
      VCU_B.Saturation = -0.5;
 8004056:	49a4      	ldr	r1, [pc, #656]	; (80042e8 <FUNC_Transmission+0xdb8>)
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	4ba3      	ldr	r3, [pc, #652]	; (80042ec <FUNC_Transmission+0xdbc>)
 800405e:	e9c1 238a 	strd	r2, r3, [r1, #552]	; 0x228
 8004062:	e005      	b.n	8004070 <FUNC_Transmission+0xb40>
    } else {
      VCU_B.Saturation = VCU_B.Divide;
 8004064:	4ba0      	ldr	r3, [pc, #640]	; (80042e8 <FUNC_Transmission+0xdb8>)
 8004066:	e9d3 2388 	ldrd	r2, r3, [r3, #544]	; 0x220
 800406a:	499f      	ldr	r1, [pc, #636]	; (80042e8 <FUNC_Transmission+0xdb8>)
 800406c:	e9c1 238a 	strd	r2, r3, [r1, #552]	; 0x228
    /* End of Saturate: '<S154>/Saturation' */

    /* RelationalOperator: '<S143>/Relational Operator1' incorporates:
     *  Constant: '<S143>/Constant'
     */
    VCU_B.RelationalOperator1_d = (VCU_B.x_clutch_STW <= 15.0);
 8004070:	4b9d      	ldr	r3, [pc, #628]	; (80042e8 <FUNC_Transmission+0xdb8>)
 8004072:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8004076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407a:	2101      	movs	r1, #1
 800407c:	460c      	mov	r4, r1
 800407e:	4610      	mov	r0, r2
 8004080:	4619      	mov	r1, r3
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	4b9a      	ldr	r3, [pc, #616]	; (80042f0 <FUNC_Transmission+0xdc0>)
 8004088:	f00b f8a2 	bl	800f1d0 <__aeabi_dcmple>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <FUNC_Transmission+0xb66>
 8004092:	2300      	movs	r3, #0
 8004094:	461c      	mov	r4, r3
 8004096:	b2e3      	uxtb	r3, r4
 8004098:	461a      	mov	r2, r3
 800409a:	4b93      	ldr	r3, [pc, #588]	; (80042e8 <FUNC_Transmission+0xdb8>)
 800409c:	f883 27f8 	strb.w	r2, [r3, #2040]	; 0x7f8

    /* Outputs for Enabled SubSystem: '<S143>/Clutch Pos calc' incorporates:
     *  EnablePort: '<S151>/Enable'
     */
    if (VCU_B.RelationalOperator1_d) {
 80040a0:	4b91      	ldr	r3, [pc, #580]	; (80042e8 <FUNC_Transmission+0xdb8>)
 80040a2:	f893 37f8 	ldrb.w	r3, [r3, #2040]	; 0x7f8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8182 	beq.w	80043b0 <FUNC_Transmission+0xe80>
      if (!VCU_DW.ClutchPoscalc_MODE) {
 80040ac:	4b91      	ldr	r3, [pc, #580]	; (80042f4 <FUNC_Transmission+0xdc4>)
 80040ae:	f893 3165 	ldrb.w	r3, [r3, #357]	; 0x165
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d103      	bne.n	80040be <FUNC_Transmission+0xb8e>
        VCU_DW.ClutchPoscalc_MODE = true;
 80040b6:	4b8f      	ldr	r3, [pc, #572]	; (80042f4 <FUNC_Transmission+0xdc4>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
      }

      /* MinMax: '<S141>/MinMax' incorporates:
       *  Memory: '<S151>/Memory1'
       */
      VCU_B.Memory1 = VCU_DW.Memory1_PreviousInput;
 80040be:	4b8d      	ldr	r3, [pc, #564]	; (80042f4 <FUNC_Transmission+0xdc4>)
 80040c0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80040c4:	4988      	ldr	r1, [pc, #544]	; (80042e8 <FUNC_Transmission+0xdb8>)
 80040c6:	e9c1 23a8 	strd	r2, r3, [r1, #672]	; 0x2a0

      /* If: '<S151>/If' incorporates:
       *  Constant: '<S151>/slip_R_Max'
       *  Constant: '<S151>/slip_R_Min'
       */
      if (VCU_B.Saturation < 0.06) {
 80040ca:	4b87      	ldr	r3, [pc, #540]	; (80042e8 <FUNC_Transmission+0xdb8>)
 80040cc:	e9d3 238a 	ldrd	r2, r3, [r3, #552]	; 0x228
 80040d0:	4610      	mov	r0, r2
 80040d2:	4619      	mov	r1, r3
 80040d4:	a37e      	add	r3, pc, #504	; (adr r3, 80042d0 <FUNC_Transmission+0xda0>)
 80040d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040da:	f00b f86f 	bl	800f1bc <__aeabi_dcmplt>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00f      	beq.n	8004104 <FUNC_Transmission+0xbd4>
         *  ActionPort: '<S157>/Action Port'
         */
        /* MinMax: '<S151>/MinMax' incorporates:
         *  Sum: '<S157>/Add'
         */
        VCU_B.Merge = VCU_B.Memory1 - VCU_B.Add1_f1;
 80040e4:	4b80      	ldr	r3, [pc, #512]	; (80042e8 <FUNC_Transmission+0xdb8>)
 80040e6:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	; 0x2a0
 80040ea:	4b7f      	ldr	r3, [pc, #508]	; (80042e8 <FUNC_Transmission+0xdb8>)
 80040ec:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f00a fc3c 	bl	800e970 <__aeabi_dsub>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	497a      	ldr	r1, [pc, #488]	; (80042e8 <FUNC_Transmission+0xdb8>)
 80040fe:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
 8004102:	e022      	b.n	800414a <FUNC_Transmission+0xc1a>

        /* End of Outputs for SubSystem: '<S151>/If Action Subsystem' */
      } else if (VCU_B.Saturation > 0.15) {
 8004104:	4b78      	ldr	r3, [pc, #480]	; (80042e8 <FUNC_Transmission+0xdb8>)
 8004106:	e9d3 238a 	ldrd	r2, r3, [r3, #552]	; 0x228
 800410a:	4610      	mov	r0, r2
 800410c:	4619      	mov	r1, r3
 800410e:	a372      	add	r3, pc, #456	; (adr r3, 80042d8 <FUNC_Transmission+0xda8>)
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f00b f870 	bl	800f1f8 <__aeabi_dcmpgt>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00f      	beq.n	800413e <FUNC_Transmission+0xc0e>
         *  ActionPort: '<S158>/Action Port'
         */
        /* MinMax: '<S151>/MinMax' incorporates:
         *  Sum: '<S158>/Add'
         */
        VCU_B.Merge = VCU_B.Add1_f1 + VCU_B.Memory1;
 800411e:	4b72      	ldr	r3, [pc, #456]	; (80042e8 <FUNC_Transmission+0xdb8>)
 8004120:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8004124:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004128:	4b6f      	ldr	r3, [pc, #444]	; (80042e8 <FUNC_Transmission+0xdb8>)
 800412a:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 800412e:	f00a fc21 	bl	800e974 <__adddf3>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	496c      	ldr	r1, [pc, #432]	; (80042e8 <FUNC_Transmission+0xdb8>)
 8004138:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
 800413c:	e005      	b.n	800414a <FUNC_Transmission+0xc1a>
         *  ActionPort: '<S159>/Action Port'
         */
        /* MinMax: '<S151>/MinMax' incorporates:
         *  Inport: '<S159>/x_clutch_in'
         */
        VCU_B.Merge = VCU_B.Memory1;
 800413e:	4b6a      	ldr	r3, [pc, #424]	; (80042e8 <FUNC_Transmission+0xdb8>)
 8004140:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 8004144:	4968      	ldr	r1, [pc, #416]	; (80042e8 <FUNC_Transmission+0xdb8>)
 8004146:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
      /* End of If: '<S151>/If' */

      /* RelationalOperator: '<S151>/Relational Operator3' incorporates:
       *  Constant: '<S151>/Clutch_Close_Speedlimit1'
       */
      VCU_B.RelationalOperator3 = (VCU_B.Add1_f1 <= 0.01);
 800414a:	4b67      	ldr	r3, [pc, #412]	; (80042e8 <FUNC_Transmission+0xdb8>)
 800414c:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	2101      	movs	r1, #1
 8004156:	460c      	mov	r4, r1
 8004158:	4610      	mov	r0, r2
 800415a:	4619      	mov	r1, r3
 800415c:	a360      	add	r3, pc, #384	; (adr r3, 80042e0 <FUNC_Transmission+0xdb0>)
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f00b f835 	bl	800f1d0 <__aeabi_dcmple>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <FUNC_Transmission+0xc40>
 800416c:	2300      	movs	r3, #0
 800416e:	461c      	mov	r4, r3
 8004170:	b2e3      	uxtb	r3, r4
 8004172:	461a      	mov	r2, r3
 8004174:	4b5c      	ldr	r3, [pc, #368]	; (80042e8 <FUNC_Transmission+0xdb8>)
 8004176:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804

      /* Switch: '<S151>/Switch3' incorporates:
       *  Constant: '<S151>/Clutch_Close1'
       */
      if (VCU_B.RelationalOperator3) {
 800417a:	4b5b      	ldr	r3, [pc, #364]	; (80042e8 <FUNC_Transmission+0xdb8>)
 800417c:	f893 3804 	ldrb.w	r3, [r3, #2052]	; 0x804
 8004180:	2b00      	cmp	r3, #0
 8004182:	d007      	beq.n	8004194 <FUNC_Transmission+0xc64>
        VCU_B.Switch3_p = 0.0;
 8004184:	4958      	ldr	r1, [pc, #352]	; (80042e8 <FUNC_Transmission+0xdb8>)
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	e9c1 23ac 	strd	r2, r3, [r1, #688]	; 0x2b0
 8004192:	e106      	b.n	80043a2 <FUNC_Transmission+0xe72>
      } else {
        /* RelationalOperator: '<S151>/Relational Operator2' incorporates:
         *  Constant: '<S151>/Clutch_Close_Speedlimit'
         */
        VCU_B.RelationalOperator2_c = (VCU_B.Gain4 >= 50.0);
 8004194:	4b54      	ldr	r3, [pc, #336]	; (80042e8 <FUNC_Transmission+0xdb8>)
 8004196:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	2101      	movs	r1, #1
 80041a0:	460c      	mov	r4, r1
 80041a2:	4610      	mov	r0, r2
 80041a4:	4619      	mov	r1, r3
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	4b53      	ldr	r3, [pc, #332]	; (80042f8 <FUNC_Transmission+0xdc8>)
 80041ac:	f00b f81a 	bl	800f1e4 <__aeabi_dcmpge>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <FUNC_Transmission+0xc8a>
 80041b6:	2300      	movs	r3, #0
 80041b8:	461c      	mov	r4, r3
 80041ba:	b2e3      	uxtb	r3, r4
 80041bc:	461a      	mov	r2, r3
 80041be:	4b4a      	ldr	r3, [pc, #296]	; (80042e8 <FUNC_Transmission+0xdb8>)
 80041c0:	f883 2805 	strb.w	r2, [r3, #2053]	; 0x805

        /* Switch: '<S151>/Switch2' incorporates:
         *  Constant: '<S151>/Clutch_Close'
         */
        if (VCU_B.RelationalOperator2_c) {
 80041c4:	4b48      	ldr	r3, [pc, #288]	; (80042e8 <FUNC_Transmission+0xdb8>)
 80041c6:	f893 3805 	ldrb.w	r3, [r3, #2053]	; 0x805
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d007      	beq.n	80041de <FUNC_Transmission+0xcae>
          VCU_B.Switch2 = 0.0;
 80041ce:	4946      	ldr	r1, [pc, #280]	; (80042e8 <FUNC_Transmission+0xdb8>)
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	e9c1 23ae 	strd	r2, r3, [r1, #696]	; 0x2b8
 80041dc:	e0db      	b.n	8004396 <FUNC_Transmission+0xe66>
        } else {
          /* RelationalOperator: '<S151>/Relational Operator1' incorporates:
           *  Constant: '<S151>/Clutch_Hold_Speedlimit'
           */
          VCU_B.RelationalOperator1_c = (VCU_B.Gain4 >= 1.0);
 80041de:	4b42      	ldr	r3, [pc, #264]	; (80042e8 <FUNC_Transmission+0xdb8>)
 80041e0:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	2101      	movs	r1, #1
 80041ea:	460c      	mov	r4, r1
 80041ec:	4610      	mov	r0, r2
 80041ee:	4619      	mov	r1, r3
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	4b41      	ldr	r3, [pc, #260]	; (80042fc <FUNC_Transmission+0xdcc>)
 80041f6:	f00a fff5 	bl	800f1e4 <__aeabi_dcmpge>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <FUNC_Transmission+0xcd4>
 8004200:	2300      	movs	r3, #0
 8004202:	461c      	mov	r4, r3
 8004204:	b2e3      	uxtb	r3, r4
 8004206:	461a      	mov	r2, r3
 8004208:	4b37      	ldr	r3, [pc, #220]	; (80042e8 <FUNC_Transmission+0xdb8>)
 800420a:	f883 2806 	strb.w	r2, [r3, #2054]	; 0x806

          /* Logic: '<S151>/Logical Operator' */
          VCU_B.LogicalOperator_ej = (VCU_B.Memory_od &&
 800420e:	4b36      	ldr	r3, [pc, #216]	; (80042e8 <FUNC_Transmission+0xdb8>)
 8004210:	f893 37f7 	ldrb.w	r3, [r3, #2039]	; 0x7f7
 8004214:	2b00      	cmp	r3, #0
 8004216:	d006      	beq.n	8004226 <FUNC_Transmission+0xcf6>
            VCU_B.RelationalOperator1_c);
 8004218:	4b33      	ldr	r3, [pc, #204]	; (80042e8 <FUNC_Transmission+0xdb8>)
 800421a:	f893 3806 	ldrb.w	r3, [r3, #2054]	; 0x806
           *  Constant: '<S151>/Clutch_Hold_Speedlimit'
           */
          VCU_B.RelationalOperator1_c = (VCU_B.Gain4 >= 1.0);

          /* Logic: '<S151>/Logical Operator' */
          VCU_B.LogicalOperator_ej = (VCU_B.Memory_od &&
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <FUNC_Transmission+0xcf6>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <FUNC_Transmission+0xcf8>
 8004226:	2300      	movs	r3, #0
 8004228:	b2da      	uxtb	r2, r3
 800422a:	4b2f      	ldr	r3, [pc, #188]	; (80042e8 <FUNC_Transmission+0xdb8>)
 800422c:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
            VCU_B.RelationalOperator1_c);

          /* Switch: '<S151>/Switch1' incorporates:
           *  Constant: '<S151>/Init_pos_clutch'
           */
          if (VCU_B.LogicalOperator_ej) {
 8004230:	4b2d      	ldr	r3, [pc, #180]	; (80042e8 <FUNC_Transmission+0xdb8>)
 8004232:	f893 3807 	ldrb.w	r3, [r3, #2055]	; 0x807
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 80a1 	beq.w	800437e <FUNC_Transmission+0xe4e>
            /* Switch: '<S151>/Switch' */
            if (VCU_B.DataTypeConversion2 >= 4000.0) {
 800423c:	4b2a      	ldr	r3, [pc, #168]	; (80042e8 <FUNC_Transmission+0xdb8>)
 800423e:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	4610      	mov	r0, r2
 8004248:	4619      	mov	r1, r3
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	4b2c      	ldr	r3, [pc, #176]	; (8004300 <FUNC_Transmission+0xdd0>)
 8004250:	f00a ffc8 	bl	800f1e4 <__aeabi_dcmpge>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <FUNC_Transmission+0xd3a>
              /* MinMax: '<S151>/MinMax' incorporates:
               *  Constant: '<S151>/Constant Gradient'
               */
              VCU_B.Switch_i = 0.0;
 800425a:	4923      	ldr	r1, [pc, #140]	; (80042e8 <FUNC_Transmission+0xdb8>)
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	e9c1 23b2 	strd	r2, r3, [r1, #712]	; 0x2c8
 8004268:	e014      	b.n	8004294 <FUNC_Transmission+0xd64>
            } else {
              /* Sum: '<S151>/Add' */
              VCU_B.Add_e = VCU_B.Add1_f1 + VCU_B.Memory1;
 800426a:	4b1f      	ldr	r3, [pc, #124]	; (80042e8 <FUNC_Transmission+0xdb8>)
 800426c:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8004270:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004274:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <FUNC_Transmission+0xdb8>)
 8004276:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 800427a:	f00a fb7b 	bl	800e974 <__adddf3>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4919      	ldr	r1, [pc, #100]	; (80042e8 <FUNC_Transmission+0xdb8>)
 8004284:	e9c1 23b8 	strd	r2, r3, [r1, #736]	; 0x2e0

              /* MinMax: '<S151>/MinMax' */
              VCU_B.Switch_i = VCU_B.Add_e;
 8004288:	4b17      	ldr	r3, [pc, #92]	; (80042e8 <FUNC_Transmission+0xdb8>)
 800428a:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	; 0x2e0
 800428e:	4916      	ldr	r1, [pc, #88]	; (80042e8 <FUNC_Transmission+0xdb8>)
 8004290:	e9c1 23b2 	strd	r2, r3, [r1, #712]	; 0x2c8
            }

            /* End of Switch: '<S151>/Switch' */

            /* MinMax: '<S151>/MinMax' */
            if ((VCU_B.Merge > VCU_B.Switch_i) || rtIsNaN(VCU_B.Switch_i)) {
 8004294:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <FUNC_Transmission+0xdb8>)
 8004296:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	; 0x2a8
 800429a:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <FUNC_Transmission+0xdb8>)
 800429c:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 80042a0:	f00a ffaa 	bl	800f1f8 <__aeabi_dcmpgt>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <FUNC_Transmission+0xd8e>
 80042aa:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <FUNC_Transmission+0xdb8>)
 80042ac:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 80042b0:	4610      	mov	r0, r2
 80042b2:	4619      	mov	r1, r3
 80042b4:	f002 f944 	bl	8006540 <rtIsNaN>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d022      	beq.n	8004304 <FUNC_Transmission+0xdd4>
              VCU_B.MinMax_c = VCU_B.Merge;
 80042be:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <FUNC_Transmission+0xdb8>)
 80042c0:	e9d3 23aa 	ldrd	r2, r3, [r3, #680]	; 0x2a8
 80042c4:	4908      	ldr	r1, [pc, #32]	; (80042e8 <FUNC_Transmission+0xdb8>)
 80042c6:	e9c1 23b4 	strd	r2, r3, [r1, #720]	; 0x2d0
 80042ca:	e021      	b.n	8004310 <FUNC_Transmission+0xde0>
 80042cc:	f3af 8000 	nop.w
 80042d0:	eb851eb8 	.word	0xeb851eb8
 80042d4:	3faeb851 	.word	0x3faeb851
 80042d8:	33333333 	.word	0x33333333
 80042dc:	3fc33333 	.word	0x3fc33333
 80042e0:	47ae147b 	.word	0x47ae147b
 80042e4:	3f847ae1 	.word	0x3f847ae1
 80042e8:	200008a8 	.word	0x200008a8
 80042ec:	bfe00000 	.word	0xbfe00000
 80042f0:	402e0000 	.word	0x402e0000
 80042f4:	200010c8 	.word	0x200010c8
 80042f8:	40490000 	.word	0x40490000
 80042fc:	3ff00000 	.word	0x3ff00000
 8004300:	40af4000 	.word	0x40af4000
            } else {
              VCU_B.MinMax_c = VCU_B.Switch_i;
 8004304:	4b9e      	ldr	r3, [pc, #632]	; (8004580 <FUNC_Transmission+0x1050>)
 8004306:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 800430a:	499d      	ldr	r1, [pc, #628]	; (8004580 <FUNC_Transmission+0x1050>)
 800430c:	e9c1 23b4 	strd	r2, r3, [r1, #720]	; 0x2d0
            }

            /* Saturate: '<S151>/Saturation' */
            if (VCU_B.MinMax_c > 25.0) {
 8004310:	4b9b      	ldr	r3, [pc, #620]	; (8004580 <FUNC_Transmission+0x1050>)
 8004312:	e9d3 23b4 	ldrd	r2, r3, [r3, #720]	; 0x2d0
 8004316:	4610      	mov	r0, r2
 8004318:	4619      	mov	r1, r3
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	4b99      	ldr	r3, [pc, #612]	; (8004584 <FUNC_Transmission+0x1054>)
 8004320:	f00a ff6a 	bl	800f1f8 <__aeabi_dcmpgt>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d006      	beq.n	8004338 <FUNC_Transmission+0xe08>
              VCU_B.Saturation_f = 25.0;
 800432a:	4995      	ldr	r1, [pc, #596]	; (8004580 <FUNC_Transmission+0x1050>)
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	4b94      	ldr	r3, [pc, #592]	; (8004584 <FUNC_Transmission+0x1054>)
 8004332:	e9c1 23b6 	strd	r2, r3, [r1, #728]	; 0x2d8
 8004336:	e01b      	b.n	8004370 <FUNC_Transmission+0xe40>
            } else if (VCU_B.MinMax_c < 0.0) {
 8004338:	4b91      	ldr	r3, [pc, #580]	; (8004580 <FUNC_Transmission+0x1050>)
 800433a:	e9d3 23b4 	ldrd	r2, r3, [r3, #720]	; 0x2d0
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	f00a ff37 	bl	800f1bc <__aeabi_dcmplt>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <FUNC_Transmission+0xe34>
              VCU_B.Saturation_f = 0.0;
 8004354:	498a      	ldr	r1, [pc, #552]	; (8004580 <FUNC_Transmission+0x1050>)
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	e9c1 23b6 	strd	r2, r3, [r1, #728]	; 0x2d8
 8004362:	e005      	b.n	8004370 <FUNC_Transmission+0xe40>
            } else {
              VCU_B.Saturation_f = VCU_B.MinMax_c;
 8004364:	4b86      	ldr	r3, [pc, #536]	; (8004580 <FUNC_Transmission+0x1050>)
 8004366:	e9d3 23b4 	ldrd	r2, r3, [r3, #720]	; 0x2d0
 800436a:	4985      	ldr	r1, [pc, #532]	; (8004580 <FUNC_Transmission+0x1050>)
 800436c:	e9c1 23b6 	strd	r2, r3, [r1, #728]	; 0x2d8
            }

            /* End of Saturate: '<S151>/Saturation' */
            VCU_B.Switch1_j = VCU_B.Saturation_f;
 8004370:	4b83      	ldr	r3, [pc, #524]	; (8004580 <FUNC_Transmission+0x1050>)
 8004372:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 8004376:	4982      	ldr	r1, [pc, #520]	; (8004580 <FUNC_Transmission+0x1050>)
 8004378:	e9c1 23b0 	strd	r2, r3, [r1, #704]	; 0x2c0
 800437c:	e005      	b.n	800438a <FUNC_Transmission+0xe5a>
          } else {
            VCU_B.Switch1_j = 15.0;
 800437e:	4980      	ldr	r1, [pc, #512]	; (8004580 <FUNC_Transmission+0x1050>)
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	4b80      	ldr	r3, [pc, #512]	; (8004588 <FUNC_Transmission+0x1058>)
 8004386:	e9c1 23b0 	strd	r2, r3, [r1, #704]	; 0x2c0
          }

          /* End of Switch: '<S151>/Switch1' */
          VCU_B.Switch2 = VCU_B.Switch1_j;
 800438a:	4b7d      	ldr	r3, [pc, #500]	; (8004580 <FUNC_Transmission+0x1050>)
 800438c:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 8004390:	497b      	ldr	r1, [pc, #492]	; (8004580 <FUNC_Transmission+0x1050>)
 8004392:	e9c1 23ae 	strd	r2, r3, [r1, #696]	; 0x2b8
        }

        /* End of Switch: '<S151>/Switch2' */
        VCU_B.Switch3_p = VCU_B.Switch2;
 8004396:	4b7a      	ldr	r3, [pc, #488]	; (8004580 <FUNC_Transmission+0x1050>)
 8004398:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 800439c:	4978      	ldr	r1, [pc, #480]	; (8004580 <FUNC_Transmission+0x1050>)
 800439e:	e9c1 23ac 	strd	r2, r3, [r1, #688]	; 0x2b0
      }

      /* End of Switch: '<S151>/Switch3' */

      /* Update for Memory: '<S151>/Memory1' */
      VCU_DW.Memory1_PreviousInput = VCU_B.Switch3_p;
 80043a2:	4b77      	ldr	r3, [pc, #476]	; (8004580 <FUNC_Transmission+0x1050>)
 80043a4:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 80043a8:	4978      	ldr	r1, [pc, #480]	; (800458c <FUNC_Transmission+0x105c>)
 80043aa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 80043ae:	e00e      	b.n	80043ce <FUNC_Transmission+0xe9e>
    } else {
      if (VCU_DW.ClutchPoscalc_MODE) {
 80043b0:	4b76      	ldr	r3, [pc, #472]	; (800458c <FUNC_Transmission+0x105c>)
 80043b2:	f893 3165 	ldrb.w	r3, [r3, #357]	; 0x165
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <FUNC_Transmission+0xe9e>
        /* Disable for MinMax: '<S141>/MinMax' incorporates:
         *  Outport: '<S151>/x_clutch_LC'
         */
        VCU_B.Memory1 = 12.5;
 80043ba:	4971      	ldr	r1, [pc, #452]	; (8004580 <FUNC_Transmission+0x1050>)
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	4b73      	ldr	r3, [pc, #460]	; (8004590 <FUNC_Transmission+0x1060>)
 80043c2:	e9c1 23a8 	strd	r2, r3, [r1, #672]	; 0x2a0
        VCU_DW.ClutchPoscalc_MODE = false;
 80043c6:	4b71      	ldr	r3, [pc, #452]	; (800458c <FUNC_Transmission+0x105c>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
    }

    /* End of Outputs for SubSystem: '<S143>/Clutch Pos calc' */

    /* MinMax: '<S141>/MinMax' */
    if ((VCU_B.x_clutch_STW > VCU_B.Switch_h) || rtIsNaN(VCU_B.Switch_h)) {
 80043ce:	4b6c      	ldr	r3, [pc, #432]	; (8004580 <FUNC_Transmission+0x1050>)
 80043d0:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80043d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043d8:	4b69      	ldr	r3, [pc, #420]	; (8004580 <FUNC_Transmission+0x1050>)
 80043da:	e9d3 237a 	ldrd	r2, r3, [r3, #488]	; 0x1e8
 80043de:	f00a ff0b 	bl	800f1f8 <__aeabi_dcmpgt>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d109      	bne.n	80043fc <FUNC_Transmission+0xecc>
 80043e8:	4b65      	ldr	r3, [pc, #404]	; (8004580 <FUNC_Transmission+0x1050>)
 80043ea:	e9d3 237a 	ldrd	r2, r3, [r3, #488]	; 0x1e8
 80043ee:	4610      	mov	r0, r2
 80043f0:	4619      	mov	r1, r3
 80043f2:	f002 f8a5 	bl	8006540 <rtIsNaN>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <FUNC_Transmission+0xede>
      VCU_B.MinMax_oo = VCU_B.x_clutch_STW;
 80043fc:	4b60      	ldr	r3, [pc, #384]	; (8004580 <FUNC_Transmission+0x1050>)
 80043fe:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8004402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004406:	495e      	ldr	r1, [pc, #376]	; (8004580 <FUNC_Transmission+0x1050>)
 8004408:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
 800440c:	e005      	b.n	800441a <FUNC_Transmission+0xeea>
    } else {
      VCU_B.MinMax_oo = VCU_B.Switch_h;
 800440e:	4b5c      	ldr	r3, [pc, #368]	; (8004580 <FUNC_Transmission+0x1050>)
 8004410:	e9d3 237a 	ldrd	r2, r3, [r3, #488]	; 0x1e8
 8004414:	495a      	ldr	r1, [pc, #360]	; (8004580 <FUNC_Transmission+0x1050>)
 8004416:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
    }

    if (!((VCU_B.MinMax_oo > VCU_B.Memory1) || rtIsNaN(VCU_B.Memory1))) {
 800441a:	4b59      	ldr	r3, [pc, #356]	; (8004580 <FUNC_Transmission+0x1050>)
 800441c:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	; 0x230
 8004420:	4b57      	ldr	r3, [pc, #348]	; (8004580 <FUNC_Transmission+0x1050>)
 8004422:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 8004426:	2401      	movs	r4, #1
 8004428:	f00a fee6 	bl	800f1f8 <__aeabi_dcmpgt>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <FUNC_Transmission+0xf06>
 8004432:	2300      	movs	r3, #0
 8004434:	461c      	mov	r4, r3
 8004436:	b2e3      	uxtb	r3, r4
 8004438:	f083 0301 	eor.w	r3, r3, #1
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00f      	beq.n	8004462 <FUNC_Transmission+0xf32>
 8004442:	4b4f      	ldr	r3, [pc, #316]	; (8004580 <FUNC_Transmission+0x1050>)
 8004444:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	f002 f878 	bl	8006540 <rtIsNaN>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d105      	bne.n	8004462 <FUNC_Transmission+0xf32>
      VCU_B.MinMax_oo = VCU_B.Memory1;
 8004456:	4b4a      	ldr	r3, [pc, #296]	; (8004580 <FUNC_Transmission+0x1050>)
 8004458:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 800445c:	4948      	ldr	r1, [pc, #288]	; (8004580 <FUNC_Transmission+0x1050>)
 800445e:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
    }

    /* RelationalOperator: '<S146>/Compare' incorporates:
     *  Constant: '<S146>/Constant'
     */
    VCU_B.Compare_k = (VCU_B.MinMax_oo > 1.0);
 8004462:	4b47      	ldr	r3, [pc, #284]	; (8004580 <FUNC_Transmission+0x1050>)
 8004464:	e9d3 238c 	ldrd	r2, r3, [r3, #560]	; 0x230
 8004468:	2101      	movs	r1, #1
 800446a:	460c      	mov	r4, r1
 800446c:	4610      	mov	r0, r2
 800446e:	4619      	mov	r1, r3
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	4b47      	ldr	r3, [pc, #284]	; (8004594 <FUNC_Transmission+0x1064>)
 8004476:	f00a febf 	bl	800f1f8 <__aeabi_dcmpgt>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <FUNC_Transmission+0xf54>
 8004480:	2300      	movs	r3, #0
 8004482:	461c      	mov	r4, r3
 8004484:	b2e3      	uxtb	r3, r4
 8004486:	461a      	mov	r2, r3
 8004488:	4b3d      	ldr	r3, [pc, #244]	; (8004580 <FUNC_Transmission+0x1050>)
 800448a:	f883 27f9 	strb.w	r2, [r3, #2041]	; 0x7f9

    /* DataTypeConversion: '<S138>/Data Type Conversion3' */
    VCU_B.VOVG_IN_b = VCU_B.Compare_k;
 800448e:	4b3c      	ldr	r3, [pc, #240]	; (8004580 <FUNC_Transmission+0x1050>)
 8004490:	f893 37f9 	ldrb.w	r3, [r3, #2041]	; 0x7f9
 8004494:	4618      	mov	r0, r3
 8004496:	f00a fba9 	bl	800ebec <__aeabi_ui2d>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4938      	ldr	r1, [pc, #224]	; (8004580 <FUNC_Transmission+0x1050>)
 80044a0:	e9c1 238e 	strd	r2, r3, [r1, #568]	; 0x238

    /* Sum: '<S141>/Add' */
    VCU_B.Add_od = VCU_B.MinMax_oo - VCU_B.x_clutch_b;
 80044a4:	4b36      	ldr	r3, [pc, #216]	; (8004580 <FUNC_Transmission+0x1050>)
 80044a6:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	; 0x230
 80044aa:	4b35      	ldr	r3, [pc, #212]	; (8004580 <FUNC_Transmission+0x1050>)
 80044ac:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	f00a fa5c 	bl	800e970 <__aeabi_dsub>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4930      	ldr	r1, [pc, #192]	; (8004580 <FUNC_Transmission+0x1050>)
 80044be:	e9c1 2390 	strd	r2, r3, [r1, #576]	; 0x240

    /* RelationalOperator: '<S148>/Compare' incorporates:
     *  Constant: '<S148>/Constant'
     */
    VCU_B.Compare_fm = (VCU_B.Add_od < -0.5);
 80044c2:	4b2f      	ldr	r3, [pc, #188]	; (8004580 <FUNC_Transmission+0x1050>)
 80044c4:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	; 0x240
 80044c8:	2101      	movs	r1, #1
 80044ca:	460c      	mov	r4, r1
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	4b30      	ldr	r3, [pc, #192]	; (8004598 <FUNC_Transmission+0x1068>)
 80044d6:	f00a fe71 	bl	800f1bc <__aeabi_dcmplt>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <FUNC_Transmission+0xfb4>
 80044e0:	2300      	movs	r3, #0
 80044e2:	461c      	mov	r4, r3
 80044e4:	b2e3      	uxtb	r3, r4
 80044e6:	461a      	mov	r2, r3
 80044e8:	4b25      	ldr	r3, [pc, #148]	; (8004580 <FUNC_Transmission+0x1050>)
 80044ea:	f883 27fa 	strb.w	r2, [r3, #2042]	; 0x7fa

    /* Lookup_n-D: '<S141>/Duty Cycle MHJ9' */
    VCU_B.DutyCycleMHJ9_l = look1_binlxpw(VCU_B.Add_od, VCU_ConstP.pooled24,
 80044ee:	4b24      	ldr	r3, [pc, #144]	; (8004580 <FUNC_Transmission+0x1050>)
 80044f0:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	; 0x240
 80044f4:	210e      	movs	r1, #14
 80044f6:	9100      	str	r1, [sp, #0]
 80044f8:	4610      	mov	r0, r2
 80044fa:	4619      	mov	r1, r3
 80044fc:	4a27      	ldr	r2, [pc, #156]	; (800459c <FUNC_Transmission+0x106c>)
 80044fe:	4b28      	ldr	r3, [pc, #160]	; (80045a0 <FUNC_Transmission+0x1070>)
 8004500:	f001 fc06 	bl	8005d10 <look1_binlxpw>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	491d      	ldr	r1, [pc, #116]	; (8004580 <FUNC_Transmission+0x1050>)
 800450a:	e9c1 2392 	strd	r2, r3, [r1, #584]	; 0x248
      VCU_ConstP.pooled23, 14U);

    /* Product: '<S141>/Product1' */
    VCU_B.Product1_l = VCU_B.DutyCycleMHJ9_l * (real_T)VCU_B.Compare_fm;
 800450e:	4b1c      	ldr	r3, [pc, #112]	; (8004580 <FUNC_Transmission+0x1050>)
 8004510:	e9d3 4592 	ldrd	r4, r5, [r3, #584]	; 0x248
 8004514:	4b1a      	ldr	r3, [pc, #104]	; (8004580 <FUNC_Transmission+0x1050>)
 8004516:	f893 37fa 	ldrb.w	r3, [r3, #2042]	; 0x7fa
 800451a:	4618      	mov	r0, r3
 800451c:	f00a fb66 	bl	800ebec <__aeabi_ui2d>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4620      	mov	r0, r4
 8004526:	4629      	mov	r1, r5
 8004528:	f00a fbd6 	bl	800ecd8 <__aeabi_dmul>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4913      	ldr	r1, [pc, #76]	; (8004580 <FUNC_Transmission+0x1050>)
 8004532:	e9c1 2394 	strd	r2, r3, [r1, #592]	; 0x250

    /* RelationalOperator: '<S147>/Compare' incorporates:
     *  Constant: '<S147>/Constant'
     */
    VCU_B.Compare_i = (VCU_B.x_clutch_b > 20.0);
 8004536:	4b12      	ldr	r3, [pc, #72]	; (8004580 <FUNC_Transmission+0x1050>)
 8004538:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	2101      	movs	r1, #1
 8004542:	460c      	mov	r4, r1
 8004544:	4610      	mov	r0, r2
 8004546:	4619      	mov	r1, r3
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <FUNC_Transmission+0x1074>)
 800454e:	f00a fe53 	bl	800f1f8 <__aeabi_dcmpgt>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <FUNC_Transmission+0x102c>
 8004558:	2300      	movs	r3, #0
 800455a:	461c      	mov	r4, r3
 800455c:	b2e3      	uxtb	r3, r4
 800455e:	461a      	mov	r2, r3
 8004560:	4b07      	ldr	r3, [pc, #28]	; (8004580 <FUNC_Transmission+0x1050>)
 8004562:	f883 27fb 	strb.w	r2, [r3, #2043]	; 0x7fb

    /* Switch: '<S141>/Switch1' incorporates:
     *  Constant: '<S141>/Constant2'
     *  Constant: '<S141>/Constant3'
     */
    if (VCU_B.Compare_i) {
 8004566:	4b06      	ldr	r3, [pc, #24]	; (8004580 <FUNC_Transmission+0x1050>)
 8004568:	f893 37fb 	ldrb.w	r3, [r3, #2043]	; 0x7fb
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01b      	beq.n	80045a8 <FUNC_Transmission+0x1078>
      VCU_B.Switch1_k = 2.0;
 8004570:	4903      	ldr	r1, [pc, #12]	; (8004580 <FUNC_Transmission+0x1050>)
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800457a:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
 800457e:	e019      	b.n	80045b4 <FUNC_Transmission+0x1084>
 8004580:	200008a8 	.word	0x200008a8
 8004584:	40390000 	.word	0x40390000
 8004588:	402e0000 	.word	0x402e0000
 800458c:	200010c8 	.word	0x200010c8
 8004590:	40290000 	.word	0x40290000
 8004594:	3ff00000 	.word	0x3ff00000
 8004598:	bfe00000 	.word	0xbfe00000
 800459c:	0800f708 	.word	0x0800f708
 80045a0:	0800f690 	.word	0x0800f690
 80045a4:	40340000 	.word	0x40340000
    } else {
      VCU_B.Switch1_k = 1.0;
 80045a8:	4979      	ldr	r1, [pc, #484]	; (8004790 <FUNC_Transmission+0x1260>)
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	4b79      	ldr	r3, [pc, #484]	; (8004794 <FUNC_Transmission+0x1264>)
 80045b0:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
    }

    /* End of Switch: '<S141>/Switch1' */

    /* Product: '<S141>/Product2' */
    VCU_B.Product2_a = VCU_B.Product1_l * VCU_B.Switch1_k;
 80045b4:	4b76      	ldr	r3, [pc, #472]	; (8004790 <FUNC_Transmission+0x1260>)
 80045b6:	e9d3 0194 	ldrd	r0, r1, [r3, #592]	; 0x250
 80045ba:	4b75      	ldr	r3, [pc, #468]	; (8004790 <FUNC_Transmission+0x1260>)
 80045bc:	e9d3 2396 	ldrd	r2, r3, [r3, #600]	; 0x258
 80045c0:	f00a fb8a 	bl	800ecd8 <__aeabi_dmul>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4971      	ldr	r1, [pc, #452]	; (8004790 <FUNC_Transmission+0x1260>)
 80045ca:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260

    /* DataTypeConversion: '<S138>/Data Type Conversion6' */
    VCU_B.MHJ9_OUT_p = VCU_B.Product2_a;
 80045ce:	4b70      	ldr	r3, [pc, #448]	; (8004790 <FUNC_Transmission+0x1260>)
 80045d0:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 80045d4:	496e      	ldr	r1, [pc, #440]	; (8004790 <FUNC_Transmission+0x1260>)
 80045d6:	e9c1 239a 	strd	r2, r3, [r1, #616]	; 0x268

    /* RelationalOperator: '<S149>/Compare' incorporates:
     *  Constant: '<S149>/Constant'
     */
    VCU_B.Compare_n3 = (VCU_B.Add_od > 0.0);
 80045da:	4b6d      	ldr	r3, [pc, #436]	; (8004790 <FUNC_Transmission+0x1260>)
 80045dc:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	; 0x240
 80045e0:	2101      	movs	r1, #1
 80045e2:	460c      	mov	r4, r1
 80045e4:	4610      	mov	r0, r2
 80045e6:	4619      	mov	r1, r3
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	f00a fe02 	bl	800f1f8 <__aeabi_dcmpgt>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <FUNC_Transmission+0x10ce>
 80045fa:	2300      	movs	r3, #0
 80045fc:	461c      	mov	r4, r3
 80045fe:	b2e3      	uxtb	r3, r4
 8004600:	461a      	mov	r2, r3
 8004602:	4b63      	ldr	r3, [pc, #396]	; (8004790 <FUNC_Transmission+0x1260>)
 8004604:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc

    /* Product: '<S141>/Product3' */
    VCU_B.Product3_n = VCU_B.DutyCycleMHJ9_l * (real_T)VCU_B.Compare_n3;
 8004608:	4b61      	ldr	r3, [pc, #388]	; (8004790 <FUNC_Transmission+0x1260>)
 800460a:	e9d3 4592 	ldrd	r4, r5, [r3, #584]	; 0x248
 800460e:	4b60      	ldr	r3, [pc, #384]	; (8004790 <FUNC_Transmission+0x1260>)
 8004610:	f893 37fc 	ldrb.w	r3, [r3, #2044]	; 0x7fc
 8004614:	4618      	mov	r0, r3
 8004616:	f00a fae9 	bl	800ebec <__aeabi_ui2d>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4620      	mov	r0, r4
 8004620:	4629      	mov	r1, r5
 8004622:	f00a fb59 	bl	800ecd8 <__aeabi_dmul>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4959      	ldr	r1, [pc, #356]	; (8004790 <FUNC_Transmission+0x1260>)
 800462c:	e9c1 239c 	strd	r2, r3, [r1, #624]	; 0x270

    /* DataTypeConversion: '<S138>/Data Type Conversion5' */
    VCU_B.MHJ9_IN_m = VCU_B.Product3_n;
 8004630:	4b57      	ldr	r3, [pc, #348]	; (8004790 <FUNC_Transmission+0x1260>)
 8004632:	e9d3 239c 	ldrd	r2, r3, [r3, #624]	; 0x270
 8004636:	4956      	ldr	r1, [pc, #344]	; (8004790 <FUNC_Transmission+0x1260>)
 8004638:	e9c1 239e 	strd	r2, r3, [r1, #632]	; 0x278

    /* RelationalOperator: '<S150>/Compare' incorporates:
     *  Constant: '<S150>/Constant'
     */
    VCU_B.Compare_hz = (VCU_B.Add_od < -20.0);
 800463c:	4b54      	ldr	r3, [pc, #336]	; (8004790 <FUNC_Transmission+0x1260>)
 800463e:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	; 0x240
 8004642:	2101      	movs	r1, #1
 8004644:	460c      	mov	r4, r1
 8004646:	4610      	mov	r0, r2
 8004648:	4619      	mov	r1, r3
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	4b52      	ldr	r3, [pc, #328]	; (8004798 <FUNC_Transmission+0x1268>)
 8004650:	f00a fdb4 	bl	800f1bc <__aeabi_dcmplt>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <FUNC_Transmission+0x112e>
 800465a:	2300      	movs	r3, #0
 800465c:	461c      	mov	r4, r3
 800465e:	b2e3      	uxtb	r3, r4
 8004660:	461a      	mov	r2, r3
 8004662:	4b4b      	ldr	r3, [pc, #300]	; (8004790 <FUNC_Transmission+0x1260>)
 8004664:	f883 27fd 	strb.w	r2, [r3, #2045]	; 0x7fd

    /* DataTypeConversion: '<S138>/Data Type Conversion4' */
    VCU_B.VOVG_OUT_i = VCU_B.Compare_hz;
 8004668:	4b49      	ldr	r3, [pc, #292]	; (8004790 <FUNC_Transmission+0x1260>)
 800466a:	f893 37fd 	ldrb.w	r3, [r3, #2045]	; 0x7fd
 800466e:	4618      	mov	r0, r3
 8004670:	f00a fabc 	bl	800ebec <__aeabi_ui2d>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4945      	ldr	r1, [pc, #276]	; (8004790 <FUNC_Transmission+0x1260>)
 800467a:	e9c1 23a0 	strd	r2, r3, [r1, #640]	; 0x280

    /* DataTypeConversion: '<S138>/Data Type Conversion7' */
    VCU_B.x_clutch_LC_n = VCU_B.Memory1;
 800467e:	4b44      	ldr	r3, [pc, #272]	; (8004790 <FUNC_Transmission+0x1260>)
 8004680:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 8004684:	4942      	ldr	r1, [pc, #264]	; (8004790 <FUNC_Transmission+0x1260>)
 8004686:	e9c1 23a2 	strd	r2, r3, [r1, #648]	; 0x288

    /* RelationalOperator: '<S164>/Compare' */
    VCU_B.Compare_mq = VCU_B.LC_dash_bit;
 800468a:	4b41      	ldr	r3, [pc, #260]	; (8004790 <FUNC_Transmission+0x1260>)
 800468c:	f893 2813 	ldrb.w	r2, [r3, #2067]	; 0x813
 8004690:	4b3f      	ldr	r3, [pc, #252]	; (8004790 <FUNC_Transmission+0x1260>)
 8004692:	f883 27fe 	strb.w	r2, [r3, #2046]	; 0x7fe

    /* RelationalOperator: '<S165>/Compare' incorporates:
     *  Constant: '<S165>/Constant'
     */
    VCU_B.Compare_d = (VCU_B.DataTypeConversion3 <= 2.0);
 8004696:	4b3e      	ldr	r3, [pc, #248]	; (8004790 <FUNC_Transmission+0x1260>)
 8004698:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	2101      	movs	r1, #1
 80046a2:	460c      	mov	r4, r1
 80046a4:	4610      	mov	r0, r2
 80046a6:	4619      	mov	r1, r3
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046b0:	f00a fd8e 	bl	800f1d0 <__aeabi_dcmple>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <FUNC_Transmission+0x118e>
 80046ba:	2300      	movs	r3, #0
 80046bc:	461c      	mov	r4, r3
 80046be:	b2e3      	uxtb	r3, r4
 80046c0:	461a      	mov	r2, r3
 80046c2:	4b33      	ldr	r3, [pc, #204]	; (8004790 <FUNC_Transmission+0x1260>)
 80046c4:	f883 27ff 	strb.w	r2, [r3, #2047]	; 0x7ff

    /* Logic: '<S152>/LC Initialization' */
    VCU_B.LCInitialization = (VCU_B.Compare_mq && VCU_B.Compare_d);
 80046c8:	4b31      	ldr	r3, [pc, #196]	; (8004790 <FUNC_Transmission+0x1260>)
 80046ca:	f893 37fe 	ldrb.w	r3, [r3, #2046]	; 0x7fe
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d006      	beq.n	80046e0 <FUNC_Transmission+0x11b0>
 80046d2:	4b2f      	ldr	r3, [pc, #188]	; (8004790 <FUNC_Transmission+0x1260>)
 80046d4:	f893 37ff 	ldrb.w	r3, [r3, #2047]	; 0x7ff
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <FUNC_Transmission+0x11b0>
 80046dc:	2301      	movs	r3, #1
 80046de:	e000      	b.n	80046e2 <FUNC_Transmission+0x11b2>
 80046e0:	2300      	movs	r3, #0
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	4b2a      	ldr	r3, [pc, #168]	; (8004790 <FUNC_Transmission+0x1260>)
 80046e6:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800

    /* Logic: '<S143>/Logical Operator' */
    VCU_B.LogicalOperator_a = (VCU_B.LCInitialization &&
 80046ea:	4b29      	ldr	r3, [pc, #164]	; (8004790 <FUNC_Transmission+0x1260>)
 80046ec:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d006      	beq.n	8004702 <FUNC_Transmission+0x11d2>
      VCU_B.RelationalOperator1_d);
 80046f4:	4b26      	ldr	r3, [pc, #152]	; (8004790 <FUNC_Transmission+0x1260>)
 80046f6:	f893 37f8 	ldrb.w	r3, [r3, #2040]	; 0x7f8

    /* Logic: '<S152>/LC Initialization' */
    VCU_B.LCInitialization = (VCU_B.Compare_mq && VCU_B.Compare_d);

    /* Logic: '<S143>/Logical Operator' */
    VCU_B.LogicalOperator_a = (VCU_B.LCInitialization &&
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <FUNC_Transmission+0x11d2>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <FUNC_Transmission+0x11d4>
 8004702:	2300      	movs	r3, #0
 8004704:	b2da      	uxtb	r2, r3
 8004706:	4b22      	ldr	r3, [pc, #136]	; (8004790 <FUNC_Transmission+0x1260>)
 8004708:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
      VCU_B.RelationalOperator1_d);

    /* DataTypeConversion: '<S138>/Data Type Conversion9' incorporates:
     *  Constant: '<S143>/Constant1'
     */
    VCU_B.LC_Fnr_e = 0.0;
 800470c:	4920      	ldr	r1, [pc, #128]	; (8004790 <FUNC_Transmission+0x1260>)
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	e9c1 23a4 	strd	r2, r3, [r1, #656]	; 0x290

    /* RelationalOperator: '<S143>/Relational Operator' */
    VCU_B.RelationalOperator_l = (VCU_B.DataTypeConversion >=
 800471a:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <FUNC_Transmission+0x1260>)
 800471c:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8004720:	e9d3 0100 	ldrd	r0, r1, [r3]
      VCU_B.DataTypeConversion1);
 8004724:	4b1a      	ldr	r3, [pc, #104]	; (8004790 <FUNC_Transmission+0x1260>)
 8004726:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
     *  Constant: '<S143>/Constant1'
     */
    VCU_B.LC_Fnr_e = 0.0;

    /* RelationalOperator: '<S143>/Relational Operator' */
    VCU_B.RelationalOperator_l = (VCU_B.DataTypeConversion >=
 800472e:	2401      	movs	r4, #1
 8004730:	f00a fd58 	bl	800f1e4 <__aeabi_dcmpge>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <FUNC_Transmission+0x120e>
 800473a:	2300      	movs	r3, #0
 800473c:	461c      	mov	r4, r3
 800473e:	b2e3      	uxtb	r3, r4
 8004740:	461a      	mov	r2, r3
 8004742:	4b13      	ldr	r3, [pc, #76]	; (8004790 <FUNC_Transmission+0x1260>)
 8004744:	f883 2802 	strb.w	r2, [r3, #2050]	; 0x802
     *
     * Block description for '<S171>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_h = VCU_DW.DelayInput1_DSTATE_n;
 8004748:	4b14      	ldr	r3, [pc, #80]	; (800479c <FUNC_Transmission+0x126c>)
 800474a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800474e:	4910      	ldr	r1, [pc, #64]	; (8004790 <FUNC_Transmission+0x1260>)
 8004750:	e9c1 23a6 	strd	r2, r3, [r1, #664]	; 0x298

    /* RelationalOperator: '<S171>/FixPt Relational Operator' */
    VCU_B.FixPtRelationalOperator_df = (VCU_B.DataTypeConversion3 < VCU_B.Uk1_h);
 8004754:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <FUNC_Transmission+0x1260>)
 8004756:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800475a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800475e:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <FUNC_Transmission+0x1260>)
 8004760:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	; 0x298
 8004764:	2401      	movs	r4, #1
 8004766:	f00a fd29 	bl	800f1bc <__aeabi_dcmplt>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <FUNC_Transmission+0x1244>
 8004770:	2300      	movs	r3, #0
 8004772:	461c      	mov	r4, r3
 8004774:	b2e3      	uxtb	r3, r4
 8004776:	461a      	mov	r2, r3
 8004778:	4b05      	ldr	r3, [pc, #20]	; (8004790 <FUNC_Transmission+0x1260>)
 800477a:	f883 2803 	strb.w	r2, [r3, #2051]	; 0x803

    /* Update for UnitDelay: '<S144>/Unit Delay1' */
    VCU_DW.UnitDelay1_DSTATE_d = VCU_B.Logic_il[0];
 800477e:	4b04      	ldr	r3, [pc, #16]	; (8004790 <FUNC_Transmission+0x1260>)
 8004780:	f893 27d9 	ldrb.w	r2, [r3, #2009]	; 0x7d9
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <FUNC_Transmission+0x126c>)
 8004786:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc

    /* Update for Delay: '<S144>/Delay' */
    for (rowIdx = 0; rowIdx < 19; rowIdx++) {
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	e016      	b.n	80047be <FUNC_Transmission+0x128e>
 8004790:	200008a8 	.word	0x200008a8
 8004794:	3ff00000 	.word	0x3ff00000
 8004798:	c0340000 	.word	0xc0340000
 800479c:	200010c8 	.word	0x200010c8
      VCU_DW.Delay_DSTATE_i[rowIdx] = VCU_DW.Delay_DSTATE_i[rowIdx + 1];
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	3301      	adds	r3, #1
 80047a4:	4a61      	ldr	r2, [pc, #388]	; (800492c <FUNC_Transmission+0x13fc>)
 80047a6:	4413      	add	r3, r2
 80047a8:	f893 10fd 	ldrb.w	r1, [r3, #253]	; 0xfd
 80047ac:	4a5f      	ldr	r2, [pc, #380]	; (800492c <FUNC_Transmission+0x13fc>)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	4413      	add	r3, r2
 80047b2:	33f8      	adds	r3, #248	; 0xf8
 80047b4:	460a      	mov	r2, r1
 80047b6:	715a      	strb	r2, [r3, #5]

    /* Update for UnitDelay: '<S144>/Unit Delay1' */
    VCU_DW.UnitDelay1_DSTATE_d = VCU_B.Logic_il[0];

    /* Update for Delay: '<S144>/Delay' */
    for (rowIdx = 0; rowIdx < 19; rowIdx++) {
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	3301      	adds	r3, #1
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b12      	cmp	r3, #18
 80047c2:	dded      	ble.n	80047a0 <FUNC_Transmission+0x1270>
      VCU_DW.Delay_DSTATE_i[rowIdx] = VCU_DW.Delay_DSTATE_i[rowIdx + 1];
    }

    VCU_DW.Delay_DSTATE_i[19] = VCU_B.LogicalOperator_c;
 80047c4:	4b5a      	ldr	r3, [pc, #360]	; (8004930 <FUNC_Transmission+0x1400>)
 80047c6:	f893 27d7 	ldrb.w	r2, [r3, #2007]	; 0x7d7
 80047ca:	4b58      	ldr	r3, [pc, #352]	; (800492c <FUNC_Transmission+0x13fc>)
 80047cc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    /* End of Update for Delay: '<S144>/Delay' */

    /* Update for Memory: '<S175>/Memory' */
    VCU_DW.Memory_PreviousInput_c = VCU_B.Logic_a[0];
 80047d0:	4b57      	ldr	r3, [pc, #348]	; (8004930 <FUNC_Transmission+0x1400>)
 80047d2:	f893 27c9 	ldrb.w	r2, [r3, #1993]	; 0x7c9
 80047d6:	4b55      	ldr	r3, [pc, #340]	; (800492c <FUNC_Transmission+0x13fc>)
 80047d8:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
     *
     * Block description for '<S172>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_a = VCU_B.STW_shift_down_request;
 80047dc:	4b54      	ldr	r3, [pc, #336]	; (8004930 <FUNC_Transmission+0x1400>)
 80047de:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	4951      	ldr	r1, [pc, #324]	; (800492c <FUNC_Transmission+0x13fc>)
 80047e8:	e9c1 2304 	strd	r2, r3, [r1, #16]

    /* Update for UnitDelay: '<S144>/Unit Delay4' */
    VCU_DW.UnitDelay4_DSTATE_k = VCU_B.FixPtRelationalOperator_df;
 80047ec:	4b50      	ldr	r3, [pc, #320]	; (8004930 <FUNC_Transmission+0x1400>)
 80047ee:	f893 2803 	ldrb.w	r2, [r3, #2051]	; 0x803
 80047f2:	4b4e      	ldr	r3, [pc, #312]	; (800492c <FUNC_Transmission+0x13fc>)
 80047f4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111

    /* Update for UnitDelay: '<S145>/Unit Delay' */
    VCU_DW.UnitDelay_DSTATE_m = VCU_B.Logic_p[0];
 80047f8:	4b4d      	ldr	r3, [pc, #308]	; (8004930 <FUNC_Transmission+0x1400>)
 80047fa:	f893 27ed 	ldrb.w	r2, [r3, #2029]	; 0x7ed
 80047fe:	4b4b      	ldr	r3, [pc, #300]	; (800492c <FUNC_Transmission+0x13fc>)
 8004800:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112

    /* Update for UnitDelay: '<S144>/Unit Delay2' */
    VCU_DW.UnitDelay2_DSTATE_n = VCU_B.Counter_j;
 8004804:	4b4a      	ldr	r3, [pc, #296]	; (8004930 <FUNC_Transmission+0x1400>)
 8004806:	f893 27f5 	ldrb.w	r2, [r3, #2037]	; 0x7f5
 800480a:	4b48      	ldr	r3, [pc, #288]	; (800492c <FUNC_Transmission+0x13fc>)
 800480c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113

    /* Update for Memory: '<S173>/Memory' */
    VCU_DW.Memory_PreviousInput_ao = VCU_B.Logic_il[0];
 8004810:	4b47      	ldr	r3, [pc, #284]	; (8004930 <FUNC_Transmission+0x1400>)
 8004812:	f893 27d9 	ldrb.w	r2, [r3, #2009]	; 0x7d9
 8004816:	4b45      	ldr	r3, [pc, #276]	; (800492c <FUNC_Transmission+0x13fc>)
 8004818:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158

    /* Update for Memory: '<S174>/Memory' */
    VCU_DW.Memory_PreviousInput_m = VCU_B.Logic_l[0];
 800481c:	4b44      	ldr	r3, [pc, #272]	; (8004930 <FUNC_Transmission+0x1400>)
 800481e:	f893 27dc 	ldrb.w	r2, [r3, #2012]	; 0x7dc
 8004822:	4b42      	ldr	r3, [pc, #264]	; (800492c <FUNC_Transmission+0x13fc>)
 8004824:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
     *
     * Block description for '<S142>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_d = VCU_B.Product;
 8004828:	4b41      	ldr	r3, [pc, #260]	; (8004930 <FUNC_Transmission+0x1400>)
 800482a:	f8b3 26f4 	ldrh.w	r2, [r3, #1780]	; 0x6f4
 800482e:	4b3f      	ldr	r3, [pc, #252]	; (800492c <FUNC_Transmission+0x13fc>)
 8004830:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
     *
     * Block description for '<S179>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_fa = VCU_B.LogicalOperator_k;
 8004834:	4b3e      	ldr	r3, [pc, #248]	; (8004930 <FUNC_Transmission+0x1400>)
 8004836:	f893 27e1 	ldrb.w	r2, [r3, #2017]	; 0x7e1
 800483a:	4b3c      	ldr	r3, [pc, #240]	; (800492c <FUNC_Transmission+0x13fc>)
 800483c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
     *
     * Block description for '<S180>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_l = VCU_B.DataTypeConversion3;
 8004840:	4b3b      	ldr	r3, [pc, #236]	; (8004930 <FUNC_Transmission+0x1400>)
 8004842:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8004846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484a:	4938      	ldr	r1, [pc, #224]	; (800492c <FUNC_Transmission+0x13fc>)
 800484c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* Update for UnitDelay: '<S144>/Unit Delay' */
    VCU_DW.UnitDelay_DSTATE_f = VCU_B.Logic_l[0];
 8004850:	4b37      	ldr	r3, [pc, #220]	; (8004930 <FUNC_Transmission+0x1400>)
 8004852:	f893 27dc 	ldrb.w	r2, [r3, #2012]	; 0x7dc
 8004856:	4b35      	ldr	r3, [pc, #212]	; (800492c <FUNC_Transmission+0x13fc>)
 8004858:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

    /* Update for UnitDelay: '<S145>/Unit Delay1' */
    VCU_DW.UnitDelay1_DSTATE_i = VCU_B.Counter_a;
 800485c:	4b34      	ldr	r3, [pc, #208]	; (8004930 <FUNC_Transmission+0x1400>)
 800485e:	f893 27f6 	ldrb.w	r2, [r3, #2038]	; 0x7f6
 8004862:	4b32      	ldr	r3, [pc, #200]	; (800492c <FUNC_Transmission+0x13fc>)
 8004864:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

    /* Update for Memory: '<S182>/Memory' */
    VCU_DW.Memory_PreviousInput_e = VCU_B.Logic_p[0];
 8004868:	4b31      	ldr	r3, [pc, #196]	; (8004930 <FUNC_Transmission+0x1400>)
 800486a:	f893 27ed 	ldrb.w	r2, [r3, #2029]	; 0x7ed
 800486e:	4b2f      	ldr	r3, [pc, #188]	; (800492c <FUNC_Transmission+0x13fc>)
 8004870:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
     *
     * Block description for '<S181>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_b = VCU_B.DataTypeConversion3;
 8004874:	4b2e      	ldr	r3, [pc, #184]	; (8004930 <FUNC_Transmission+0x1400>)
 8004876:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	492b      	ldr	r1, [pc, #172]	; (800492c <FUNC_Transmission+0x13fc>)
 8004880:	e9c1 2308 	strd	r2, r3, [r1, #32]

    /* Update for Memory: '<S183>/Memory' */
    VCU_DW.Memory_PreviousInput_n = VCU_B.Logic_k[0];
 8004884:	4b2a      	ldr	r3, [pc, #168]	; (8004930 <FUNC_Transmission+0x1400>)
 8004886:	f893 27f3 	ldrb.w	r2, [r3, #2035]	; 0x7f3
 800488a:	4b28      	ldr	r3, [pc, #160]	; (800492c <FUNC_Transmission+0x13fc>)
 800488c:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b

    /* Update for Memory: '<S143>/Memory' */
    VCU_DW.Memory_PreviousInput_i = VCU_B.RelationalOperator1_d;
 8004890:	4b27      	ldr	r3, [pc, #156]	; (8004930 <FUNC_Transmission+0x1400>)
 8004892:	f893 27f8 	ldrb.w	r2, [r3, #2040]	; 0x7f8
 8004896:	4b25      	ldr	r3, [pc, #148]	; (800492c <FUNC_Transmission+0x13fc>)
 8004898:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
     *
     * Block description for '<S171>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_n = VCU_B.DataTypeConversion3;
 800489c:	4b24      	ldr	r3, [pc, #144]	; (8004930 <FUNC_Transmission+0x1400>)
 800489e:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 80048a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a6:	4921      	ldr	r1, [pc, #132]	; (800492c <FUNC_Transmission+0x13fc>)
 80048a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80048ac:	e017      	b.n	80048de <FUNC_Transmission+0x13ae>
  } else {
    if (VCU_DW.LC_jr19_MODE) {
 80048ae:	4b1f      	ldr	r3, [pc, #124]	; (800492c <FUNC_Transmission+0x13fc>)
 80048b0:	f893 3164 	ldrb.w	r3, [r3, #356]	; 0x164
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d012      	beq.n	80048de <FUNC_Transmission+0x13ae>
      /* Disable for Enabled SubSystem: '<S143>/Clutch Pos calc' */
      if (VCU_DW.ClutchPoscalc_MODE) {
 80048b8:	4b1c      	ldr	r3, [pc, #112]	; (800492c <FUNC_Transmission+0x13fc>)
 80048ba:	f893 3165 	ldrb.w	r3, [r3, #357]	; 0x165
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <FUNC_Transmission+0x13a6>
        /* Disable for MinMax: '<S141>/MinMax' incorporates:
         *  Outport: '<S151>/x_clutch_LC'
         */
        VCU_B.Memory1 = 12.5;
 80048c2:	491b      	ldr	r1, [pc, #108]	; (8004930 <FUNC_Transmission+0x1400>)
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	4b1a      	ldr	r3, [pc, #104]	; (8004934 <FUNC_Transmission+0x1404>)
 80048ca:	e9c1 23a8 	strd	r2, r3, [r1, #672]	; 0x2a0
        VCU_DW.ClutchPoscalc_MODE = false;
 80048ce:	4b17      	ldr	r3, [pc, #92]	; (800492c <FUNC_Transmission+0x13fc>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
      }

      /* End of Disable for SubSystem: '<S143>/Clutch Pos calc' */
      VCU_DW.LC_jr19_MODE = false;
 80048d6:	4b15      	ldr	r3, [pc, #84]	; (800492c <FUNC_Transmission+0x13fc>)
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
  /* End of Outputs for SubSystem: '<S7>/LC_jr19' */

  /* RelationalOperator: '<S134>/Compare' incorporates:
   *  Constant: '<S134>/Constant'
   */
  VCU_B.Compare_c = (VCU_B.DataTypeConversion_cg == 1);
 80048de:	4b14      	ldr	r3, [pc, #80]	; (8004930 <FUNC_Transmission+0x1400>)
 80048e0:	f893 377c 	ldrb.w	r3, [r3, #1916]	; 0x77c
 80048e4:	b25b      	sxtb	r3, r3
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	bf0c      	ite	eq
 80048ea:	2301      	moveq	r3, #1
 80048ec:	2300      	movne	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	461a      	mov	r2, r3
 80048f2:	4b0f      	ldr	r3, [pc, #60]	; (8004930 <FUNC_Transmission+0x1400>)
 80048f4:	f883 277e 	strb.w	r2, [r3, #1918]	; 0x77e

  /* RelationalOperator: '<S135>/Compare' incorporates:
   *  Constant: '<S135>/Constant'
   */
  VCU_B.Compare_g = (VCU_B.DataTypeConversion_cg > 3);
 80048f8:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <FUNC_Transmission+0x1400>)
 80048fa:	f893 377c 	ldrb.w	r3, [r3, #1916]	; 0x77c
 80048fe:	b25b      	sxtb	r3, r3
 8004900:	2b03      	cmp	r3, #3
 8004902:	bfcc      	ite	gt
 8004904:	2301      	movgt	r3, #1
 8004906:	2300      	movle	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	4b08      	ldr	r3, [pc, #32]	; (8004930 <FUNC_Transmission+0x1400>)
 800490e:	f883 277f 	strb.w	r2, [r3, #1919]	; 0x77f

  /* Logic: '<S7>/Logical Operator' */
  VCU_B.LogicalOperator = (VCU_B.Compare_c || VCU_B.Compare_g);
 8004912:	4b07      	ldr	r3, [pc, #28]	; (8004930 <FUNC_Transmission+0x1400>)
 8004914:	f893 377e 	ldrb.w	r3, [r3, #1918]	; 0x77e
 8004918:	2b00      	cmp	r3, #0
 800491a:	d104      	bne.n	8004926 <FUNC_Transmission+0x13f6>
 800491c:	4b04      	ldr	r3, [pc, #16]	; (8004930 <FUNC_Transmission+0x1400>)
 800491e:	f893 377f 	ldrb.w	r3, [r3, #1919]	; 0x77f
 8004922:	2b00      	cmp	r3, #0
 8004924:	d008      	beq.n	8004938 <FUNC_Transmission+0x1408>
 8004926:	2301      	movs	r3, #1
 8004928:	e007      	b.n	800493a <FUNC_Transmission+0x140a>
 800492a:	bf00      	nop
 800492c:	200010c8 	.word	0x200010c8
 8004930:	200008a8 	.word	0x200008a8
 8004934:	40290000 	.word	0x40290000
 8004938:	2300      	movs	r3, #0
 800493a:	b2da      	uxtb	r2, r3
 800493c:	4b92      	ldr	r3, [pc, #584]	; (8004b88 <FUNC_Transmission+0x1658>)
 800493e:	f883 2780 	strb.w	r2, [r3, #1920]	; 0x780

  /* Outputs for Enabled SubSystem: '<S7>/semi_auto_jr18' incorporates:
   *  EnablePort: '<S140>/Enable'
   */
  if (VCU_B.LogicalOperator) {
 8004942:	4b91      	ldr	r3, [pc, #580]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004944:	f893 3780 	ldrb.w	r3, [r3, #1920]	; 0x780
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 865d 	beq.w	8005608 <FUNC_Transmission+0x20d8>
    /* CombinatorialLogic: '<S209>/Logic' incorporates:
     *  Delay: '<S193>/Delay'
     *  Memory: '<S209>/Memory'
     *  UnitDelay: '<S193>/Unit Delay1'
     */
    VCU_B.UnitDelay1 = VCU_DW.UnitDelay1_DSTATE;
 800494e:	4b8f      	ldr	r3, [pc, #572]	; (8004b8c <FUNC_Transmission+0x165c>)
 8004950:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 8004954:	4b8c      	ldr	r3, [pc, #560]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004956:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
    VCU_B.Delay = VCU_DW.Delay_DSTATE[0];
 800495a:	4b8c      	ldr	r3, [pc, #560]	; (8004b8c <FUNC_Transmission+0x165c>)
 800495c:	f893 20e2 	ldrb.w	r2, [r3, #226]	; 0xe2
 8004960:	4b89      	ldr	r3, [pc, #548]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004962:	f883 2785 	strb.w	r2, [r3, #1925]	; 0x785
    VCU_B.Memory = VCU_DW.Memory_PreviousInput;
 8004966:	4b89      	ldr	r3, [pc, #548]	; (8004b8c <FUNC_Transmission+0x165c>)
 8004968:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
 800496c:	4b86      	ldr	r3, [pc, #536]	; (8004b88 <FUNC_Transmission+0x1658>)
 800496e:	f883 2786 	strb.w	r2, [r3, #1926]	; 0x786
    rowIdx = VCU_B.UnitDelay1;
 8004972:	4b85      	ldr	r3, [pc, #532]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004974:	f893 3784 	ldrb.w	r3, [r3, #1924]	; 0x784
 8004978:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Delay);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	4a82      	ldr	r2, [pc, #520]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004980:	f892 2785 	ldrb.w	r2, [r2, #1925]	; 0x785
 8004984:	4413      	add	r3, r2
 8004986:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	4a7e      	ldr	r2, [pc, #504]	; (8004b88 <FUNC_Transmission+0x1658>)
 800498e:	f892 2786 	ldrb.w	r2, [r2, #1926]	; 0x786
 8004992:	4413      	add	r3, r2
 8004994:	617b      	str	r3, [r7, #20]
    VCU_B.Logic[0U] = VCU_ConstP.pooled33[(uint32_T)rowIdx];
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	4a7d      	ldr	r2, [pc, #500]	; (8004b90 <FUNC_Transmission+0x1660>)
 800499a:	4413      	add	r3, r2
 800499c:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 80049a0:	4b79      	ldr	r3, [pc, #484]	; (8004b88 <FUNC_Transmission+0x1658>)
 80049a2:	f883 2787 	strb.w	r2, [r3, #1927]	; 0x787
    VCU_B.Logic[1U] = VCU_ConstP.pooled33[rowIdx + 8U];
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	3308      	adds	r3, #8
 80049aa:	4a79      	ldr	r2, [pc, #484]	; (8004b90 <FUNC_Transmission+0x1660>)
 80049ac:	4413      	add	r3, r2
 80049ae:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 80049b2:	4b75      	ldr	r3, [pc, #468]	; (8004b88 <FUNC_Transmission+0x1658>)
 80049b4:	f883 2788 	strb.w	r2, [r3, #1928]	; 0x788

    /* DataTypeConversion: '<S140>/Data Type Conversion10' */
    VCU_B.VOVG_ShiftDown_m = VCU_B.Logic[0];
 80049b8:	4b73      	ldr	r3, [pc, #460]	; (8004b88 <FUNC_Transmission+0x1658>)
 80049ba:	f893 3787 	ldrb.w	r3, [r3, #1927]	; 0x787
 80049be:	4618      	mov	r0, r3
 80049c0:	f00a f914 	bl	800ebec <__aeabi_ui2d>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	496f      	ldr	r1, [pc, #444]	; (8004b88 <FUNC_Transmission+0x1658>)
 80049ca:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
     *
     * Block description for '<S206>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1 = VCU_DW.DelayInput1_DSTATE;
 80049ce:	4b6f      	ldr	r3, [pc, #444]	; (8004b8c <FUNC_Transmission+0x165c>)
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	496c      	ldr	r1, [pc, #432]	; (8004b88 <FUNC_Transmission+0x1658>)
 80049d6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    /* CombinatorialLogic: '<S207>/Logic' incorporates:
     *  Delay: '<S193>/Delay1'
     *  Memory: '<S207>/Memory'
     *  RelationalOperator: '<S206>/FixPt Relational Operator'
     */
    VCU_B.FixPtRelationalOperator = (VCU_B.STW_shift_down_request > VCU_B.Uk1);
 80049da:	4b6b      	ldr	r3, [pc, #428]	; (8004b88 <FUNC_Transmission+0x1658>)
 80049dc:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 80049e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049e4:	4b68      	ldr	r3, [pc, #416]	; (8004b88 <FUNC_Transmission+0x1658>)
 80049e6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80049ea:	2401      	movs	r4, #1
 80049ec:	f00a fc04 	bl	800f1f8 <__aeabi_dcmpgt>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <FUNC_Transmission+0x14ca>
 80049f6:	2300      	movs	r3, #0
 80049f8:	461c      	mov	r4, r3
 80049fa:	b2e3      	uxtb	r3, r4
 80049fc:	461a      	mov	r2, r3
 80049fe:	4b62      	ldr	r3, [pc, #392]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004a00:	f883 2789 	strb.w	r2, [r3, #1929]	; 0x789
    VCU_B.Delay1 = VCU_DW.Delay1_DSTATE;
 8004a04:	4b61      	ldr	r3, [pc, #388]	; (8004b8c <FUNC_Transmission+0x165c>)
 8004a06:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 8004a0a:	4b5f      	ldr	r3, [pc, #380]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004a0c:	f883 278a 	strb.w	r2, [r3, #1930]	; 0x78a
    VCU_B.Memory_d = VCU_DW.Memory_PreviousInput_l;
 8004a10:	4b5e      	ldr	r3, [pc, #376]	; (8004b8c <FUNC_Transmission+0x165c>)
 8004a12:	f893 2153 	ldrb.w	r2, [r3, #339]	; 0x153
 8004a16:	4b5c      	ldr	r3, [pc, #368]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004a18:	f883 278b 	strb.w	r2, [r3, #1931]	; 0x78b
    rowIdx = VCU_B.FixPtRelationalOperator;
 8004a1c:	4b5a      	ldr	r3, [pc, #360]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004a1e:	f893 3789 	ldrb.w	r3, [r3, #1929]	; 0x789
 8004a22:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Delay1);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	4a57      	ldr	r2, [pc, #348]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004a2a:	f892 278a 	ldrb.w	r2, [r2, #1930]	; 0x78a
 8004a2e:	4413      	add	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_d);
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	4a54      	ldr	r2, [pc, #336]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004a38:	f892 278b 	ldrb.w	r2, [r2, #1931]	; 0x78b
 8004a3c:	4413      	add	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_i[0U] = VCU_ConstP.pooled33[(uint32_T)rowIdx];
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	4a53      	ldr	r2, [pc, #332]	; (8004b90 <FUNC_Transmission+0x1660>)
 8004a44:	4413      	add	r3, r2
 8004a46:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004a4a:	4b4f      	ldr	r3, [pc, #316]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004a4c:	f883 278c 	strb.w	r2, [r3, #1932]	; 0x78c
    VCU_B.Logic_i[1U] = VCU_ConstP.pooled33[rowIdx + 8U];
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	3308      	adds	r3, #8
 8004a54:	4a4e      	ldr	r2, [pc, #312]	; (8004b90 <FUNC_Transmission+0x1660>)
 8004a56:	4413      	add	r3, r2
 8004a58:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004a5c:	4b4a      	ldr	r3, [pc, #296]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004a5e:	f883 278d 	strb.w	r2, [r3, #1933]	; 0x78d

    /* UnitDelay: '<S193>/Unit Delay4' */
    VCU_B.UnitDelay4 = VCU_DW.UnitDelay4_DSTATE;
 8004a62:	4b4a      	ldr	r3, [pc, #296]	; (8004b8c <FUNC_Transmission+0x165c>)
 8004a64:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
 8004a68:	4b47      	ldr	r3, [pc, #284]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004a6a:	f883 278e 	strb.w	r2, [r3, #1934]	; 0x78e

    /* Gain: '<S210>/Gain' */
    VCU_B.Gain = 2.0 * VCU_B.DataTypeConversion1;
 8004a6e:	4b46      	ldr	r3, [pc, #280]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004a70:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	f009 ff7a 	bl	800e974 <__adddf3>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4940      	ldr	r1, [pc, #256]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004a86:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

    /* RelationalOperator: '<S210>/Relational Operator' incorporates:
     *  Constant: '<S210>/Constant'
     */
    VCU_B.RelationalOperator = (VCU_B.Gain > 169.0);
 8004a8a:	4b3f      	ldr	r3, [pc, #252]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004a8c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004a90:	2101      	movs	r1, #1
 8004a92:	460c      	mov	r4, r1
 8004a94:	4610      	mov	r0, r2
 8004a96:	4619      	mov	r1, r3
 8004a98:	a337      	add	r3, pc, #220	; (adr r3, 8004b78 <FUNC_Transmission+0x1648>)
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	f00a fbab 	bl	800f1f8 <__aeabi_dcmpgt>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <FUNC_Transmission+0x157c>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	461c      	mov	r4, r3
 8004aac:	b2e3      	uxtb	r3, r4
 8004aae:	461a      	mov	r2, r3
 8004ab0:	4b35      	ldr	r3, [pc, #212]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004ab2:	f883 278f 	strb.w	r2, [r3, #1935]	; 0x78f

    /* RelationalOperator: '<S210>/Relational Operator1' incorporates:
     *  Constant: '<S210>/Constant1'
     */
    VCU_B.RelationalOperator1 = (VCU_B.Gain > 228.0);
 8004ab6:	4b34      	ldr	r3, [pc, #208]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004ab8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004abc:	2101      	movs	r1, #1
 8004abe:	460c      	mov	r4, r1
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	4b32      	ldr	r3, [pc, #200]	; (8004b94 <FUNC_Transmission+0x1664>)
 8004aca:	f00a fb95 	bl	800f1f8 <__aeabi_dcmpgt>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <FUNC_Transmission+0x15a8>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	461c      	mov	r4, r3
 8004ad8:	b2e3      	uxtb	r3, r4
 8004ada:	461a      	mov	r2, r3
 8004adc:	4b2a      	ldr	r3, [pc, #168]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004ade:	f883 2790 	strb.w	r2, [r3, #1936]	; 0x790

    /* RelationalOperator: '<S210>/Relational Operator2' incorporates:
     *  Constant: '<S210>/Constant2'
     */
    VCU_B.RelationalOperator2 = (VCU_B.Gain > 325.0);
 8004ae2:	4b29      	ldr	r3, [pc, #164]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004ae4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004ae8:	2101      	movs	r1, #1
 8004aea:	460c      	mov	r4, r1
 8004aec:	4610      	mov	r0, r2
 8004aee:	4619      	mov	r1, r3
 8004af0:	a323      	add	r3, pc, #140	; (adr r3, 8004b80 <FUNC_Transmission+0x1650>)
 8004af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af6:	f00a fb7f 	bl	800f1f8 <__aeabi_dcmpgt>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <FUNC_Transmission+0x15d4>
 8004b00:	2300      	movs	r3, #0
 8004b02:	461c      	mov	r4, r3
 8004b04:	b2e3      	uxtb	r3, r4
 8004b06:	461a      	mov	r2, r3
 8004b08:	4b1f      	ldr	r3, [pc, #124]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004b0a:	f883 2791 	strb.w	r2, [r3, #1937]	; 0x791

    /* Sum: '<S210>/Add' */
    VCU_B.Add_c = (uint8_T)(((uint32_T)VCU_B.RelationalOperator +
 8004b0e:	4b1e      	ldr	r3, [pc, #120]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004b10:	f893 278f 	ldrb.w	r2, [r3, #1935]	; 0x78f
      VCU_B.RelationalOperator1) + VCU_B.RelationalOperator2);
 8004b14:	4b1c      	ldr	r3, [pc, #112]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004b16:	f893 3790 	ldrb.w	r3, [r3, #1936]	; 0x790
     *  Constant: '<S210>/Constant2'
     */
    VCU_B.RelationalOperator2 = (VCU_B.Gain > 325.0);

    /* Sum: '<S210>/Add' */
    VCU_B.Add_c = (uint8_T)(((uint32_T)VCU_B.RelationalOperator +
 8004b1a:	4413      	add	r3, r2
 8004b1c:	b2da      	uxtb	r2, r3
      VCU_B.RelationalOperator1) + VCU_B.RelationalOperator2);
 8004b1e:	4b1a      	ldr	r3, [pc, #104]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004b20:	f893 3791 	ldrb.w	r3, [r3, #1937]	; 0x791
     *  Constant: '<S210>/Constant2'
     */
    VCU_B.RelationalOperator2 = (VCU_B.Gain > 325.0);

    /* Sum: '<S210>/Add' */
    VCU_B.Add_c = (uint8_T)(((uint32_T)VCU_B.RelationalOperator +
 8004b24:	4413      	add	r3, r2
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004b2a:	f883 273e 	strb.w	r2, [r3, #1854]	; 0x73e
      VCU_B.RelationalOperator1) + VCU_B.RelationalOperator2);

    /* RelationalOperator: '<S200>/Compare' incorporates:
     *  Constant: '<S200>/Constant'
     */
    VCU_B.Compare_b = (VCU_B.x_clutch_STW >= 15.0);
 8004b2e:	4b16      	ldr	r3, [pc, #88]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004b30:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8004b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b38:	2101      	movs	r1, #1
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	4619      	mov	r1, r3
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <FUNC_Transmission+0x1668>)
 8004b46:	f00a fb4d 	bl	800f1e4 <__aeabi_dcmpge>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <FUNC_Transmission+0x1624>
 8004b50:	2300      	movs	r3, #0
 8004b52:	461c      	mov	r4, r3
 8004b54:	b2e3      	uxtb	r3, r4
 8004b56:	461a      	mov	r2, r3
 8004b58:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004b5a:	f883 2792 	strb.w	r2, [r3, #1938]	; 0x792

    /* Switch: '<S193>/Switch' incorporates:
     *  Constant: '<S193>/Constant'
     *  Constant: '<S193>/Constant1'
     */
    if (VCU_B.Compare_b) {
 8004b5e:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004b60:	f893 3792 	ldrb.w	r3, [r3, #1938]	; 0x792
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01b      	beq.n	8004ba0 <FUNC_Transmission+0x1670>
      VCU_B.Switch = 1.0;
 8004b68:	4907      	ldr	r1, [pc, #28]	; (8004b88 <FUNC_Transmission+0x1658>)
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <FUNC_Transmission+0x166c>)
 8004b70:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004b74:	e01b      	b.n	8004bae <FUNC_Transmission+0x167e>
 8004b76:	bf00      	nop
 8004b78:	00000000 	.word	0x00000000
 8004b7c:	40652000 	.word	0x40652000
 8004b80:	00000000 	.word	0x00000000
 8004b84:	40745000 	.word	0x40745000
 8004b88:	200008a8 	.word	0x200008a8
 8004b8c:	200010c8 	.word	0x200010c8
 8004b90:	0800f458 	.word	0x0800f458
 8004b94:	406c8000 	.word	0x406c8000
 8004b98:	402e0000 	.word	0x402e0000
 8004b9c:	3ff00000 	.word	0x3ff00000
    } else {
      VCU_B.Switch = 2.0;
 8004ba0:	495f      	ldr	r1, [pc, #380]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004baa:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    }

    /* End of Switch: '<S193>/Switch' */

    /* RelationalOperator: '<S193>/Relational Operator' */
    VCU_B.LessthanNeutral = (VCU_B.Add_c < VCU_B.Switch);
 8004bae:	4b5c      	ldr	r3, [pc, #368]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004bb0:	f893 373e 	ldrb.w	r3, [r3, #1854]	; 0x73e
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f00a f829 	bl	800ec0c <__aeabi_i2d>
 8004bba:	4604      	mov	r4, r0
 8004bbc:	460d      	mov	r5, r1
 8004bbe:	4b58      	ldr	r3, [pc, #352]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004bc0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	460e      	mov	r6, r1
 8004bc8:	4620      	mov	r0, r4
 8004bca:	4629      	mov	r1, r5
 8004bcc:	f00a faf6 	bl	800f1bc <__aeabi_dcmplt>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <FUNC_Transmission+0x16aa>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	461e      	mov	r6, r3
 8004bda:	b2f3      	uxtb	r3, r6
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4b50      	ldr	r3, [pc, #320]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004be0:	f883 2793 	strb.w	r2, [r3, #1939]	; 0x793

    /* UnitDelay: '<S194>/Unit Delay' */
    VCU_B.UnitDelay = VCU_DW.UnitDelay_DSTATE;
 8004be4:	4b4f      	ldr	r3, [pc, #316]	; (8004d24 <FUNC_Transmission+0x17f4>)
 8004be6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 8004bea:	4b4d      	ldr	r3, [pc, #308]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004bec:	f883 2794 	strb.w	r2, [r3, #1940]	; 0x794

    /* UnitDelay: '<S193>/Unit Delay2' */
    VCU_B.Timeout = VCU_DW.UnitDelay2_DSTATE;
 8004bf0:	4b4c      	ldr	r3, [pc, #304]	; (8004d24 <FUNC_Transmission+0x17f4>)
 8004bf2:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 8004bf6:	4b4a      	ldr	r3, [pc, #296]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004bf8:	f883 2795 	strb.w	r2, [r3, #1941]	; 0x795

    /* RelationalOperator: '<S201>/Compare' incorporates:
     *  Constant: '<S201>/Constant'
     */
    VCU_B.Compare_f = (VCU_B.DataTypeConversion2 > 5000.0);
 8004bfc:	4b48      	ldr	r3, [pc, #288]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004bfe:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	2101      	movs	r1, #1
 8004c08:	460c      	mov	r4, r1
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	a340      	add	r3, pc, #256	; (adr r3, 8004d10 <FUNC_Transmission+0x17e0>)
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	f00a faf0 	bl	800f1f8 <__aeabi_dcmpgt>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <FUNC_Transmission+0x16f2>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	461c      	mov	r4, r3
 8004c22:	b2e3      	uxtb	r3, r4
 8004c24:	461a      	mov	r2, r3
 8004c26:	4b3e      	ldr	r3, [pc, #248]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004c28:	f883 2796 	strb.w	r2, [r3, #1942]	; 0x796

    /* RelationalOperator: '<S202>/Compare' incorporates:
     *  Constant: '<S202>/Constant'
     */
    VCU_B.Compare_n = (VCU_B.Add_c == 2);
 8004c2c:	4b3c      	ldr	r3, [pc, #240]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004c2e:	f893 373e 	ldrb.w	r3, [r3, #1854]	; 0x73e
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	bf0c      	ite	eq
 8004c36:	2301      	moveq	r3, #1
 8004c38:	2300      	movne	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4b38      	ldr	r3, [pc, #224]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004c40:	f883 2797 	strb.w	r2, [r3, #1943]	; 0x797

    /* Logic: '<S193>/Logical Operator1' */
    VCU_B.RPMcheckgear21 = (VCU_B.Compare_n && VCU_B.Compare_f);
 8004c44:	4b36      	ldr	r3, [pc, #216]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004c46:	f893 3797 	ldrb.w	r3, [r3, #1943]	; 0x797
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d006      	beq.n	8004c5c <FUNC_Transmission+0x172c>
 8004c4e:	4b34      	ldr	r3, [pc, #208]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004c50:	f893 3796 	ldrb.w	r3, [r3, #1942]	; 0x796
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <FUNC_Transmission+0x172c>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <FUNC_Transmission+0x172e>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	4b2f      	ldr	r3, [pc, #188]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004c62:	f883 2798 	strb.w	r2, [r3, #1944]	; 0x798

    /* RelationalOperator: '<S203>/Compare' incorporates:
     *  Constant: '<S203>/Constant'
     */
    VCU_B.Compare_l = (VCU_B.DataTypeConversion2 > 5300.0);
 8004c66:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004c68:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	2101      	movs	r1, #1
 8004c72:	460c      	mov	r4, r1
 8004c74:	4610      	mov	r0, r2
 8004c76:	4619      	mov	r1, r3
 8004c78:	a327      	add	r3, pc, #156	; (adr r3, 8004d18 <FUNC_Transmission+0x17e8>)
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	f00a fabb 	bl	800f1f8 <__aeabi_dcmpgt>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <FUNC_Transmission+0x175c>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	461c      	mov	r4, r3
 8004c8c:	b2e3      	uxtb	r3, r4
 8004c8e:	461a      	mov	r2, r3
 8004c90:	4b23      	ldr	r3, [pc, #140]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004c92:	f883 2799 	strb.w	r2, [r3, #1945]	; 0x799

    /* RelationalOperator: '<S204>/Compare' incorporates:
     *  Constant: '<S204>/Constant'
     */
    VCU_B.Compare_h = (VCU_B.Add_c == 3);
 8004c96:	4b22      	ldr	r3, [pc, #136]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004c98:	f893 373e 	ldrb.w	r3, [r3, #1854]	; 0x73e
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	bf0c      	ite	eq
 8004ca0:	2301      	moveq	r3, #1
 8004ca2:	2300      	movne	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004caa:	f883 279a 	strb.w	r2, [r3, #1946]	; 0x79a

    /* Logic: '<S193>/Logical Operator2' */
    VCU_B.RPMcheckgear31 = (VCU_B.Compare_l && VCU_B.Compare_h);
 8004cae:	4b1c      	ldr	r3, [pc, #112]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004cb0:	f893 3799 	ldrb.w	r3, [r3, #1945]	; 0x799
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d006      	beq.n	8004cc6 <FUNC_Transmission+0x1796>
 8004cb8:	4b19      	ldr	r3, [pc, #100]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004cba:	f893 379a 	ldrb.w	r3, [r3, #1946]	; 0x79a
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <FUNC_Transmission+0x1796>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <FUNC_Transmission+0x1798>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	4b15      	ldr	r3, [pc, #84]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004ccc:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b

    /* CombinatorialLogic: '<S208>/Logic' incorporates:
     *  Logic: '<S193>/Logical Operator'
     *  Memory: '<S208>/Memory'
     */
    VCU_B.LogicalOperator_d = (VCU_B.UnitDelay4 || VCU_B.LessthanNeutral ||
 8004cd0:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004cd2:	f893 378e 	ldrb.w	r3, [r3, #1934]	; 0x78e
      VCU_B.UnitDelay || VCU_B.Timeout || VCU_B.RPMcheckgear21 ||
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d118      	bne.n	8004d0c <FUNC_Transmission+0x17dc>

    /* CombinatorialLogic: '<S208>/Logic' incorporates:
     *  Logic: '<S193>/Logical Operator'
     *  Memory: '<S208>/Memory'
     */
    VCU_B.LogicalOperator_d = (VCU_B.UnitDelay4 || VCU_B.LessthanNeutral ||
 8004cda:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004cdc:	f893 3793 	ldrb.w	r3, [r3, #1939]	; 0x793
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d113      	bne.n	8004d0c <FUNC_Transmission+0x17dc>
      VCU_B.UnitDelay || VCU_B.Timeout || VCU_B.RPMcheckgear21 ||
 8004ce4:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004ce6:	f893 3794 	ldrb.w	r3, [r3, #1940]	; 0x794

    /* CombinatorialLogic: '<S208>/Logic' incorporates:
     *  Logic: '<S193>/Logical Operator'
     *  Memory: '<S208>/Memory'
     */
    VCU_B.LogicalOperator_d = (VCU_B.UnitDelay4 || VCU_B.LessthanNeutral ||
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10e      	bne.n	8004d0c <FUNC_Transmission+0x17dc>
      VCU_B.UnitDelay || VCU_B.Timeout || VCU_B.RPMcheckgear21 ||
 8004cee:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004cf0:	f893 3795 	ldrb.w	r3, [r3, #1941]	; 0x795
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d109      	bne.n	8004d0c <FUNC_Transmission+0x17dc>
 8004cf8:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004cfa:	f893 3798 	ldrb.w	r3, [r3, #1944]	; 0x798
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d104      	bne.n	8004d0c <FUNC_Transmission+0x17dc>
      VCU_B.RPMcheckgear31);
 8004d02:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <FUNC_Transmission+0x17f0>)
 8004d04:	f893 379b 	ldrb.w	r3, [r3, #1947]	; 0x79b
    /* CombinatorialLogic: '<S208>/Logic' incorporates:
     *  Logic: '<S193>/Logical Operator'
     *  Memory: '<S208>/Memory'
     */
    VCU_B.LogicalOperator_d = (VCU_B.UnitDelay4 || VCU_B.LessthanNeutral ||
      VCU_B.UnitDelay || VCU_B.Timeout || VCU_B.RPMcheckgear21 ||
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00d      	beq.n	8004d28 <FUNC_Transmission+0x17f8>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e00c      	b.n	8004d2a <FUNC_Transmission+0x17fa>
 8004d10:	00000000 	.word	0x00000000
 8004d14:	40b38800 	.word	0x40b38800
 8004d18:	00000000 	.word	0x00000000
 8004d1c:	40b4b400 	.word	0x40b4b400
 8004d20:	200008a8 	.word	0x200008a8
 8004d24:	200010c8 	.word	0x200010c8
 8004d28:	2300      	movs	r3, #0

    /* CombinatorialLogic: '<S208>/Logic' incorporates:
     *  Logic: '<S193>/Logical Operator'
     *  Memory: '<S208>/Memory'
     */
    VCU_B.LogicalOperator_d = (VCU_B.UnitDelay4 || VCU_B.LessthanNeutral ||
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	4b96      	ldr	r3, [pc, #600]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004d2e:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
      VCU_B.UnitDelay || VCU_B.Timeout || VCU_B.RPMcheckgear21 ||
      VCU_B.RPMcheckgear31);
    VCU_B.Memory_l = VCU_DW.Memory_PreviousInput_a;
 8004d32:	4b96      	ldr	r3, [pc, #600]	; (8004f8c <FUNC_Transmission+0x1a5c>)
 8004d34:	f893 2154 	ldrb.w	r2, [r3, #340]	; 0x154
 8004d38:	4b93      	ldr	r3, [pc, #588]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004d3a:	f883 279d 	strb.w	r2, [r3, #1949]	; 0x79d
    tmp = VCU_B.Logic_i[0];
 8004d3e:	4b92      	ldr	r3, [pc, #584]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004d40:	f893 378c 	ldrb.w	r3, [r3, #1932]	; 0x78c
 8004d44:	71fb      	strb	r3, [r7, #7]
    rowIdx = tmp;
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.LogicalOperator_d);
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	4a8e      	ldr	r2, [pc, #568]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004d50:	f892 279c 	ldrb.w	r2, [r2, #1948]	; 0x79c
 8004d54:	4413      	add	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_l);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	4a8a      	ldr	r2, [pc, #552]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004d5e:	f892 279d 	ldrb.w	r2, [r2, #1949]	; 0x79d
 8004d62:	4413      	add	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_iy[0U] = VCU_ConstP.pooled33[(uint32_T)rowIdx];
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	4a89      	ldr	r2, [pc, #548]	; (8004f90 <FUNC_Transmission+0x1a60>)
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004d70:	4b85      	ldr	r3, [pc, #532]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004d72:	f883 279e 	strb.w	r2, [r3, #1950]	; 0x79e
    VCU_B.Logic_iy[1U] = VCU_ConstP.pooled33[rowIdx + 8U];
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	3308      	adds	r3, #8
 8004d7a:	4a85      	ldr	r2, [pc, #532]	; (8004f90 <FUNC_Transmission+0x1a60>)
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004d82:	4b81      	ldr	r3, [pc, #516]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004d84:	f883 279f 	strb.w	r2, [r3, #1951]	; 0x79f
     *
     * Block description for '<S214>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_i = VCU_DW.DelayInput1_DSTATE_g;
 8004d88:	4b80      	ldr	r3, [pc, #512]	; (8004f8c <FUNC_Transmission+0x1a5c>)
 8004d8a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004d8e:	497e      	ldr	r1, [pc, #504]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004d90:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* CombinatorialLogic: '<S217>/Logic' incorporates:
     *  RelationalOperator: '<S214>/FixPt Relational Operator'
     */
    VCU_B.FixPtRelationalOperator_c = (VCU_B.STW_shift_up_request > VCU_B.Uk1_i);
 8004d94:	4b7c      	ldr	r3, [pc, #496]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004d96:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8004d9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d9e:	4b7a      	ldr	r3, [pc, #488]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004da0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004da4:	2401      	movs	r4, #1
 8004da6:	f00a fa27 	bl	800f1f8 <__aeabi_dcmpgt>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <FUNC_Transmission+0x1884>
 8004db0:	2300      	movs	r3, #0
 8004db2:	461c      	mov	r4, r3
 8004db4:	b2e3      	uxtb	r3, r4
 8004db6:	461a      	mov	r2, r3
 8004db8:	4b73      	ldr	r3, [pc, #460]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004dba:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0

    /* Gain: '<S219>/Gain' */
    VCU_B.Gain_m = 2.0 * VCU_B.DataTypeConversion1;
 8004dbe:	4b72      	ldr	r3, [pc, #456]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004dc0:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f009 fdd2 	bl	800e974 <__adddf3>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	496c      	ldr	r1, [pc, #432]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004dd6:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

    /* RelationalOperator: '<S219>/Relational Operator' incorporates:
     *  Constant: '<S219>/Constant'
     */
    VCU_B.RelationalOperator_d = (VCU_B.Gain_m > 169.0);
 8004dda:	4b6b      	ldr	r3, [pc, #428]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004ddc:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004de0:	2101      	movs	r1, #1
 8004de2:	460c      	mov	r4, r1
 8004de4:	4610      	mov	r0, r2
 8004de6:	4619      	mov	r1, r3
 8004de8:	a363      	add	r3, pc, #396	; (adr r3, 8004f78 <FUNC_Transmission+0x1a48>)
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	f00a fa03 	bl	800f1f8 <__aeabi_dcmpgt>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <FUNC_Transmission+0x18cc>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	461c      	mov	r4, r3
 8004dfc:	b2e3      	uxtb	r3, r4
 8004dfe:	461a      	mov	r2, r3
 8004e00:	4b61      	ldr	r3, [pc, #388]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004e02:	f883 27a1 	strb.w	r2, [r3, #1953]	; 0x7a1

    /* RelationalOperator: '<S219>/Relational Operator1' incorporates:
     *  Constant: '<S219>/Constant1'
     */
    VCU_B.RelationalOperator1_a = (VCU_B.Gain_m > 269.0);
 8004e06:	4b60      	ldr	r3, [pc, #384]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004e08:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	460c      	mov	r4, r1
 8004e10:	4610      	mov	r0, r2
 8004e12:	4619      	mov	r1, r3
 8004e14:	a35a      	add	r3, pc, #360	; (adr r3, 8004f80 <FUNC_Transmission+0x1a50>)
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	f00a f9ed 	bl	800f1f8 <__aeabi_dcmpgt>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <FUNC_Transmission+0x18f8>
 8004e24:	2300      	movs	r3, #0
 8004e26:	461c      	mov	r4, r3
 8004e28:	b2e3      	uxtb	r3, r4
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	4b56      	ldr	r3, [pc, #344]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004e2e:	f883 27a2 	strb.w	r2, [r3, #1954]	; 0x7a2

    /* RelationalOperator: '<S219>/Relational Operator2' incorporates:
     *  Constant: '<S219>/Constant2'
     */
    VCU_B.RelationalOperator2_d = (VCU_B.Gain_m > 360.0);
 8004e32:	4b55      	ldr	r3, [pc, #340]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004e34:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004e38:	2101      	movs	r1, #1
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	4619      	mov	r1, r3
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	4b53      	ldr	r3, [pc, #332]	; (8004f94 <FUNC_Transmission+0x1a64>)
 8004e46:	f00a f9d7 	bl	800f1f8 <__aeabi_dcmpgt>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <FUNC_Transmission+0x1924>
 8004e50:	2300      	movs	r3, #0
 8004e52:	461c      	mov	r4, r3
 8004e54:	b2e3      	uxtb	r3, r4
 8004e56:	461a      	mov	r2, r3
 8004e58:	4b4b      	ldr	r3, [pc, #300]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004e5a:	f883 27a3 	strb.w	r2, [r3, #1955]	; 0x7a3

    /* Sum: '<S219>/Add' */
    VCU_B.Add_j = (uint8_T)(((uint32_T)VCU_B.RelationalOperator_d +
 8004e5e:	4b4a      	ldr	r3, [pc, #296]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004e60:	f893 27a1 	ldrb.w	r2, [r3, #1953]	; 0x7a1
      VCU_B.RelationalOperator1_a) + VCU_B.RelationalOperator2_d);
 8004e64:	4b48      	ldr	r3, [pc, #288]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004e66:	f893 37a2 	ldrb.w	r3, [r3, #1954]	; 0x7a2
     *  Constant: '<S219>/Constant2'
     */
    VCU_B.RelationalOperator2_d = (VCU_B.Gain_m > 360.0);

    /* Sum: '<S219>/Add' */
    VCU_B.Add_j = (uint8_T)(((uint32_T)VCU_B.RelationalOperator_d +
 8004e6a:	4413      	add	r3, r2
 8004e6c:	b2da      	uxtb	r2, r3
      VCU_B.RelationalOperator1_a) + VCU_B.RelationalOperator2_d);
 8004e6e:	4b46      	ldr	r3, [pc, #280]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004e70:	f893 37a3 	ldrb.w	r3, [r3, #1955]	; 0x7a3
     *  Constant: '<S219>/Constant2'
     */
    VCU_B.RelationalOperator2_d = (VCU_B.Gain_m > 360.0);

    /* Sum: '<S219>/Add' */
    VCU_B.Add_j = (uint8_T)(((uint32_T)VCU_B.RelationalOperator_d +
 8004e74:	4413      	add	r3, r2
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	4b43      	ldr	r3, [pc, #268]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004e7a:	f883 273f 	strb.w	r2, [r3, #1855]	; 0x73f
     *
     * Block description for '<S215>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_b = VCU_DW.DelayInput1_DSTATE_ga;
 8004e7e:	4b43      	ldr	r3, [pc, #268]	; (8004f8c <FUNC_Transmission+0x1a5c>)
 8004e80:	f893 20de 	ldrb.w	r2, [r3, #222]	; 0xde
 8004e84:	4b40      	ldr	r3, [pc, #256]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004e86:	f883 2740 	strb.w	r2, [r3, #1856]	; 0x740

    /* RelationalOperator: '<S215>/FixPt Relational Operator' */
    VCU_B.FixPtRelationalOperator_m = (VCU_B.Add_j > VCU_B.Uk1_b);
 8004e8a:	4b3f      	ldr	r3, [pc, #252]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004e8c:	f893 273f 	ldrb.w	r2, [r3, #1855]	; 0x73f
 8004e90:	4b3d      	ldr	r3, [pc, #244]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004e92:	f893 3740 	ldrb.w	r3, [r3, #1856]	; 0x740
 8004e96:	429a      	cmp	r2, r3
 8004e98:	bf8c      	ite	hi
 8004e9a:	2301      	movhi	r3, #1
 8004e9c:	2300      	movls	r3, #0
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	4b39      	ldr	r3, [pc, #228]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004ea4:	f883 27a4 	strb.w	r2, [r3, #1956]	; 0x7a4

    /* RelationalOperator: '<S211>/Compare' incorporates:
     *  Constant: '<S211>/Constant'
     */
    VCU_B.Compare_ha = (VCU_B.Add_j >= 3);
 8004ea8:	4b37      	ldr	r3, [pc, #220]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004eaa:	f893 373f 	ldrb.w	r3, [r3, #1855]	; 0x73f
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	bf8c      	ite	hi
 8004eb2:	2301      	movhi	r3, #1
 8004eb4:	2300      	movls	r3, #0
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4b33      	ldr	r3, [pc, #204]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004ebc:	f883 27a5 	strb.w	r2, [r3, #1957]	; 0x7a5

    /* UnitDelay: '<S193>/Unit Delay' */
    VCU_B.UnitDelay_p = VCU_DW.UnitDelay_DSTATE_b;
 8004ec0:	4b32      	ldr	r3, [pc, #200]	; (8004f8c <FUNC_Transmission+0x1a5c>)
 8004ec2:	f893 20fa 	ldrb.w	r2, [r3, #250]	; 0xfa
 8004ec6:	4b30      	ldr	r3, [pc, #192]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004ec8:	f883 27a6 	strb.w	r2, [r3, #1958]	; 0x7a6

    /* UnitDelay: '<S194>/Unit Delay1' */
    VCU_B.Timeout_i = VCU_DW.UnitDelay1_DSTATE_k;
 8004ecc:	4b2f      	ldr	r3, [pc, #188]	; (8004f8c <FUNC_Transmission+0x1a5c>)
 8004ece:	f893 20fb 	ldrb.w	r2, [r3, #251]	; 0xfb
 8004ed2:	4b2d      	ldr	r3, [pc, #180]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004ed4:	f883 27a7 	strb.w	r2, [r3, #1959]	; 0x7a7

    /* RelationalOperator: '<S213>/Compare' incorporates:
     *  Constant: '<S213>/Constant'
     */
    VCU_B.Compare_e = (VCU_B.Add_j == 0);
 8004ed8:	4b2b      	ldr	r3, [pc, #172]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004eda:	f893 373f 	ldrb.w	r3, [r3, #1855]	; 0x73f
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	bf0c      	ite	eq
 8004ee2:	2301      	moveq	r3, #1
 8004ee4:	2300      	movne	r3, #0
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	4b27      	ldr	r3, [pc, #156]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004eec:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8

    /* RelationalOperator: '<S212>/Compare' incorporates:
     *  Constant: '<S212>/Constant'
     */
    VCU_B.Compare_a = (VCU_B.x_clutch_STW < 15.0);
 8004ef0:	4b25      	ldr	r3, [pc, #148]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004ef2:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	2101      	movs	r1, #1
 8004efc:	460c      	mov	r4, r1
 8004efe:	4610      	mov	r0, r2
 8004f00:	4619      	mov	r1, r3
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	4b24      	ldr	r3, [pc, #144]	; (8004f98 <FUNC_Transmission+0x1a68>)
 8004f08:	f00a f958 	bl	800f1bc <__aeabi_dcmplt>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <FUNC_Transmission+0x19e6>
 8004f12:	2300      	movs	r3, #0
 8004f14:	461c      	mov	r4, r3
 8004f16:	b2e3      	uxtb	r3, r4
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4b1b      	ldr	r3, [pc, #108]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004f1c:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9

    /* Logic: '<S194>/Logical Operator1' */
    VCU_B.FailSafefirstgear = (VCU_B.Compare_e && VCU_B.Compare_a);
 8004f20:	4b19      	ldr	r3, [pc, #100]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004f22:	f893 37a8 	ldrb.w	r3, [r3, #1960]	; 0x7a8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d006      	beq.n	8004f38 <FUNC_Transmission+0x1a08>
 8004f2a:	4b17      	ldr	r3, [pc, #92]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004f2c:	f893 37a9 	ldrb.w	r3, [r3, #1961]	; 0x7a9
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <FUNC_Transmission+0x1a08>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <FUNC_Transmission+0x1a0a>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004f3e:	f883 27aa 	strb.w	r2, [r3, #1962]	; 0x7aa

    /* CombinatorialLogic: '<S217>/Logic' incorporates:
     *  Logic: '<S194>/Logical Operator'
     *  Memory: '<S217>/Memory'
     */
    VCU_B.LogicalOperator_i = (VCU_B.FixPtRelationalOperator_m ||
 8004f42:	4b11      	ldr	r3, [pc, #68]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004f44:	f893 37a4 	ldrb.w	r3, [r3, #1956]	; 0x7a4
      VCU_B.Compare_ha || VCU_B.UnitDelay_p || VCU_B.Timeout_i ||
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d113      	bne.n	8004f74 <FUNC_Transmission+0x1a44>
 8004f4c:	4b0e      	ldr	r3, [pc, #56]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004f4e:	f893 37a5 	ldrb.w	r3, [r3, #1957]	; 0x7a5

    /* CombinatorialLogic: '<S217>/Logic' incorporates:
     *  Logic: '<S194>/Logical Operator'
     *  Memory: '<S217>/Memory'
     */
    VCU_B.LogicalOperator_i = (VCU_B.FixPtRelationalOperator_m ||
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10e      	bne.n	8004f74 <FUNC_Transmission+0x1a44>
      VCU_B.Compare_ha || VCU_B.UnitDelay_p || VCU_B.Timeout_i ||
 8004f56:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004f58:	f893 37a6 	ldrb.w	r3, [r3, #1958]	; 0x7a6
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d109      	bne.n	8004f74 <FUNC_Transmission+0x1a44>
 8004f60:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004f62:	f893 37a7 	ldrb.w	r3, [r3, #1959]	; 0x7a7
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d104      	bne.n	8004f74 <FUNC_Transmission+0x1a44>
      VCU_B.FailSafefirstgear);
 8004f6a:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <FUNC_Transmission+0x1a58>)
 8004f6c:	f893 37aa 	ldrb.w	r3, [r3, #1962]	; 0x7aa
    /* CombinatorialLogic: '<S217>/Logic' incorporates:
     *  Logic: '<S194>/Logical Operator'
     *  Memory: '<S217>/Memory'
     */
    VCU_B.LogicalOperator_i = (VCU_B.FixPtRelationalOperator_m ||
      VCU_B.Compare_ha || VCU_B.UnitDelay_p || VCU_B.Timeout_i ||
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d013      	beq.n	8004f9c <FUNC_Transmission+0x1a6c>
 8004f74:	2301      	movs	r3, #1
 8004f76:	e012      	b.n	8004f9e <FUNC_Transmission+0x1a6e>
 8004f78:	00000000 	.word	0x00000000
 8004f7c:	40652000 	.word	0x40652000
 8004f80:	00000000 	.word	0x00000000
 8004f84:	4070d000 	.word	0x4070d000
 8004f88:	200008a8 	.word	0x200008a8
 8004f8c:	200010c8 	.word	0x200010c8
 8004f90:	0800f458 	.word	0x0800f458
 8004f94:	40768000 	.word	0x40768000
 8004f98:	402e0000 	.word	0x402e0000
 8004f9c:	2300      	movs	r3, #0

    /* CombinatorialLogic: '<S217>/Logic' incorporates:
     *  Logic: '<S194>/Logical Operator'
     *  Memory: '<S217>/Memory'
     */
    VCU_B.LogicalOperator_i = (VCU_B.FixPtRelationalOperator_m ||
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	4bb0      	ldr	r3, [pc, #704]	; (8005264 <FUNC_Transmission+0x1d34>)
 8004fa2:	f883 27ab 	strb.w	r2, [r3, #1963]	; 0x7ab
      VCU_B.Compare_ha || VCU_B.UnitDelay_p || VCU_B.Timeout_i ||
      VCU_B.FailSafefirstgear);
    VCU_B.Memory_a = VCU_DW.Memory_PreviousInput_al;
 8004fa6:	4bb0      	ldr	r3, [pc, #704]	; (8005268 <FUNC_Transmission+0x1d38>)
 8004fa8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
 8004fac:	4bad      	ldr	r3, [pc, #692]	; (8005264 <FUNC_Transmission+0x1d34>)
 8004fae:	f883 27ac 	strb.w	r2, [r3, #1964]	; 0x7ac
    rowIdx = VCU_B.FixPtRelationalOperator_c;
 8004fb2:	4bac      	ldr	r3, [pc, #688]	; (8005264 <FUNC_Transmission+0x1d34>)
 8004fb4:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 8004fb8:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.LogicalOperator_i);
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	4aa9      	ldr	r2, [pc, #676]	; (8005264 <FUNC_Transmission+0x1d34>)
 8004fc0:	f892 27ab 	ldrb.w	r2, [r2, #1963]	; 0x7ab
 8004fc4:	4413      	add	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_a);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	4aa5      	ldr	r2, [pc, #660]	; (8005264 <FUNC_Transmission+0x1d34>)
 8004fce:	f892 27ac 	ldrb.w	r2, [r2, #1964]	; 0x7ac
 8004fd2:	4413      	add	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_iz[0U] = VCU_ConstP.pooled33[(uint32_T)rowIdx];
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	4aa4      	ldr	r2, [pc, #656]	; (800526c <FUNC_Transmission+0x1d3c>)
 8004fda:	4413      	add	r3, r2
 8004fdc:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004fe0:	4ba0      	ldr	r3, [pc, #640]	; (8005264 <FUNC_Transmission+0x1d34>)
 8004fe2:	f883 27ad 	strb.w	r2, [r3, #1965]	; 0x7ad
    VCU_B.Logic_iz[1U] = VCU_ConstP.pooled33[rowIdx + 8U];
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	3308      	adds	r3, #8
 8004fea:	4aa0      	ldr	r2, [pc, #640]	; (800526c <FUNC_Transmission+0x1d3c>)
 8004fec:	4413      	add	r3, r2
 8004fee:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004ff2:	4b9c      	ldr	r3, [pc, #624]	; (8005264 <FUNC_Transmission+0x1d34>)
 8004ff4:	f883 27ae 	strb.w	r2, [r3, #1966]	; 0x7ae

    /* CombinatorialLogic: '<S218>/Logic' incorporates:
     *  S-Function (sdspcount2): '<S194>/Counter1'
     */
    VCU_B.Counter1 = false;
 8004ff8:	4b9a      	ldr	r3, [pc, #616]	; (8005264 <FUNC_Transmission+0x1d34>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 27af 	strb.w	r2, [r3, #1967]	; 0x7af

    /* S-Function (sdspcount2): '<S194>/Counter1' */
    if (VCU_B.LogicalOperator_i) {
 8005000:	4b98      	ldr	r3, [pc, #608]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005002:	f893 37ab 	ldrb.w	r3, [r3, #1963]	; 0x7ab
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <FUNC_Transmission+0x1ae2>
      VCU_DW.Counter1_Count = 0U;
 800500a:	4b97      	ldr	r3, [pc, #604]	; (8005268 <FUNC_Transmission+0x1d38>)
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
    }

    if (VCU_B.Logic_iz[0]) {
 8005012:	4b94      	ldr	r3, [pc, #592]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005014:	f893 37ad 	ldrb.w	r3, [r3, #1965]	; 0x7ad
 8005018:	2b00      	cmp	r3, #0
 800501a:	d011      	beq.n	8005040 <FUNC_Transmission+0x1b10>
      if (VCU_DW.Counter1_Count < 60) {
 800501c:	4b92      	ldr	r3, [pc, #584]	; (8005268 <FUNC_Transmission+0x1d38>)
 800501e:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8005022:	2b3b      	cmp	r3, #59	; 0x3b
 8005024:	d808      	bhi.n	8005038 <FUNC_Transmission+0x1b08>
        VCU_DW.Counter1_Count++;
 8005026:	4b90      	ldr	r3, [pc, #576]	; (8005268 <FUNC_Transmission+0x1d38>)
 8005028:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800502c:	3301      	adds	r3, #1
 800502e:	b2da      	uxtb	r2, r3
 8005030:	4b8d      	ldr	r3, [pc, #564]	; (8005268 <FUNC_Transmission+0x1d38>)
 8005032:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
 8005036:	e003      	b.n	8005040 <FUNC_Transmission+0x1b10>
      } else {
        VCU_DW.Counter1_Count = 0U;
 8005038:	4b8b      	ldr	r3, [pc, #556]	; (8005268 <FUNC_Transmission+0x1d38>)
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
      }
    }

    if (VCU_DW.Counter1_Count == 1) {
 8005040:	4b89      	ldr	r3, [pc, #548]	; (8005268 <FUNC_Transmission+0x1d38>)
 8005042:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8005046:	2b01      	cmp	r3, #1
 8005048:	d103      	bne.n	8005052 <FUNC_Transmission+0x1b22>
      /* CombinatorialLogic: '<S218>/Logic' */
      VCU_B.Counter1 = true;
 800504a:	4b86      	ldr	r3, [pc, #536]	; (8005264 <FUNC_Transmission+0x1d34>)
 800504c:	2201      	movs	r2, #1
 800504e:	f883 27af 	strb.w	r2, [r3, #1967]	; 0x7af
     *
     * Block description for '<S216>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_m = VCU_DW.DelayInput1_DSTATE_f;
 8005052:	4b85      	ldr	r3, [pc, #532]	; (8005268 <FUNC_Transmission+0x1d38>)
 8005054:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
 8005058:	4b82      	ldr	r3, [pc, #520]	; (8005264 <FUNC_Transmission+0x1d34>)
 800505a:	f883 2741 	strb.w	r2, [r3, #1857]	; 0x741

    /* RelationalOperator: '<S216>/FixPt Relational Operator' */
    VCU_B.FixPtRelationalOperator_b = (VCU_B.Add_j > VCU_B.Uk1_m);
 800505e:	4b81      	ldr	r3, [pc, #516]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005060:	f893 273f 	ldrb.w	r2, [r3, #1855]	; 0x73f
 8005064:	4b7f      	ldr	r3, [pc, #508]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005066:	f893 3741 	ldrb.w	r3, [r3, #1857]	; 0x741
 800506a:	429a      	cmp	r2, r3
 800506c:	bf8c      	ite	hi
 800506e:	2301      	movhi	r3, #1
 8005070:	2300      	movls	r3, #0
 8005072:	b2db      	uxtb	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	4b7b      	ldr	r3, [pc, #492]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005078:	f883 27b0 	strb.w	r2, [r3, #1968]	; 0x7b0

    /* CombinatorialLogic: '<S218>/Logic' incorporates:
     *  Logic: '<S194>/Logical Operator2'
     *  Memory: '<S218>/Memory'
     */
    VCU_B.LogicalOperator2 = (VCU_B.LogicalOperator_i ||
 800507c:	4b79      	ldr	r3, [pc, #484]	; (8005264 <FUNC_Transmission+0x1d34>)
 800507e:	f893 37ab 	ldrb.w	r3, [r3, #1963]	; 0x7ab
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <FUNC_Transmission+0x1b60>
      VCU_B.FixPtRelationalOperator_b);
 8005086:	4b77      	ldr	r3, [pc, #476]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005088:	f893 37b0 	ldrb.w	r3, [r3, #1968]	; 0x7b0

    /* CombinatorialLogic: '<S218>/Logic' incorporates:
     *  Logic: '<S194>/Logical Operator2'
     *  Memory: '<S218>/Memory'
     */
    VCU_B.LogicalOperator2 = (VCU_B.LogicalOperator_i ||
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <FUNC_Transmission+0x1b64>
 8005090:	2301      	movs	r3, #1
 8005092:	e000      	b.n	8005096 <FUNC_Transmission+0x1b66>
 8005094:	2300      	movs	r3, #0
 8005096:	b2da      	uxtb	r2, r3
 8005098:	4b72      	ldr	r3, [pc, #456]	; (8005264 <FUNC_Transmission+0x1d34>)
 800509a:	f883 27b1 	strb.w	r2, [r3, #1969]	; 0x7b1
      VCU_B.FixPtRelationalOperator_b);
    VCU_B.Memory_g = VCU_DW.Memory_PreviousInput_k;
 800509e:	4b72      	ldr	r3, [pc, #456]	; (8005268 <FUNC_Transmission+0x1d38>)
 80050a0:	f893 2156 	ldrb.w	r2, [r3, #342]	; 0x156
 80050a4:	4b6f      	ldr	r3, [pc, #444]	; (8005264 <FUNC_Transmission+0x1d34>)
 80050a6:	f883 27b2 	strb.w	r2, [r3, #1970]	; 0x7b2
    rowIdx = VCU_B.Counter1;
 80050aa:	4b6e      	ldr	r3, [pc, #440]	; (8005264 <FUNC_Transmission+0x1d34>)
 80050ac:	f893 37af 	ldrb.w	r3, [r3, #1967]	; 0x7af
 80050b0:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.LogicalOperator2);
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	4a6b      	ldr	r2, [pc, #428]	; (8005264 <FUNC_Transmission+0x1d34>)
 80050b8:	f892 27b1 	ldrb.w	r2, [r2, #1969]	; 0x7b1
 80050bc:	4413      	add	r3, r2
 80050be:	617b      	str	r3, [r7, #20]
    rowIdx = (int32_T)(((uint32_T)rowIdx << 1) + VCU_B.Memory_g);
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	4a67      	ldr	r2, [pc, #412]	; (8005264 <FUNC_Transmission+0x1d34>)
 80050c6:	f892 27b2 	ldrb.w	r2, [r2, #1970]	; 0x7b2
 80050ca:	4413      	add	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
    VCU_B.Logic_e[0U] = VCU_ConstP.pooled33[(uint32_T)rowIdx];
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	4a66      	ldr	r2, [pc, #408]	; (800526c <FUNC_Transmission+0x1d3c>)
 80050d2:	4413      	add	r3, r2
 80050d4:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 80050d8:	4b62      	ldr	r3, [pc, #392]	; (8005264 <FUNC_Transmission+0x1d34>)
 80050da:	f883 27b3 	strb.w	r2, [r3, #1971]	; 0x7b3
    VCU_B.Logic_e[1U] = VCU_ConstP.pooled33[rowIdx + 8U];
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	3308      	adds	r3, #8
 80050e2:	4a62      	ldr	r2, [pc, #392]	; (800526c <FUNC_Transmission+0x1d3c>)
 80050e4:	4413      	add	r3, r2
 80050e6:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 80050ea:	4b5e      	ldr	r3, [pc, #376]	; (8005264 <FUNC_Transmission+0x1d34>)
 80050ec:	f883 27b4 	strb.w	r2, [r3, #1972]	; 0x7b4

    /* DataTypeConversion: '<S140>/Data Type Conversion11' */
    VCU_B.Ignition_Cut_o = VCU_B.Logic_e[0];
 80050f0:	4b5c      	ldr	r3, [pc, #368]	; (8005264 <FUNC_Transmission+0x1d34>)
 80050f2:	f893 37b3 	ldrb.w	r3, [r3, #1971]	; 0x7b3
 80050f6:	4618      	mov	r0, r3
 80050f8:	f009 fd78 	bl	800ebec <__aeabi_ui2d>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4958      	ldr	r1, [pc, #352]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005102:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

    /* S-Function (sdspcount2): '<S193>/Counter' */
    VCU_B.Counter = false;
 8005106:	4b57      	ldr	r3, [pc, #348]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005108:	2200      	movs	r2, #0
 800510a:	f883 27b5 	strb.w	r2, [r3, #1973]	; 0x7b5
    if (VCU_B.LogicalOperator_d) {
 800510e:	4b55      	ldr	r3, [pc, #340]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005110:	f893 379c 	ldrb.w	r3, [r3, #1948]	; 0x79c
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <FUNC_Transmission+0x1bf0>
      VCU_DW.Counter_Count = 0U;
 8005118:	4b53      	ldr	r3, [pc, #332]	; (8005268 <FUNC_Transmission+0x1d38>)
 800511a:	2200      	movs	r2, #0
 800511c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
    }

    if (VCU_B.Logic_i[0]) {
 8005120:	4b50      	ldr	r3, [pc, #320]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005122:	f893 378c 	ldrb.w	r3, [r3, #1932]	; 0x78c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d012      	beq.n	8005150 <FUNC_Transmission+0x1c20>
      if (VCU_DW.Counter_Count < 500) {
 800512a:	4b4f      	ldr	r3, [pc, #316]	; (8005268 <FUNC_Transmission+0x1d38>)
 800512c:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8005130:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005134:	d208      	bcs.n	8005148 <FUNC_Transmission+0x1c18>
        VCU_DW.Counter_Count++;
 8005136:	4b4c      	ldr	r3, [pc, #304]	; (8005268 <FUNC_Transmission+0x1d38>)
 8005138:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800513c:	3301      	adds	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	4b49      	ldr	r3, [pc, #292]	; (8005268 <FUNC_Transmission+0x1d38>)
 8005142:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005146:	e003      	b.n	8005150 <FUNC_Transmission+0x1c20>
      } else {
        VCU_DW.Counter_Count = 0U;
 8005148:	4b47      	ldr	r3, [pc, #284]	; (8005268 <FUNC_Transmission+0x1d38>)
 800514a:	2200      	movs	r2, #0
 800514c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
      }
    }

    if (VCU_DW.Counter_Count == 500) {
 8005150:	4b45      	ldr	r3, [pc, #276]	; (8005268 <FUNC_Transmission+0x1d38>)
 8005152:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8005156:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800515a:	d103      	bne.n	8005164 <FUNC_Transmission+0x1c34>
      VCU_B.Counter = true;
 800515c:	4b41      	ldr	r3, [pc, #260]	; (8005264 <FUNC_Transmission+0x1d34>)
 800515e:	2201      	movs	r2, #1
 8005160:	f883 27b5 	strb.w	r2, [r3, #1973]	; 0x7b5
    }

    /* End of S-Function (sdspcount2): '<S193>/Counter' */

    /* S-Function (sdspcount2): '<S194>/Counter' */
    VCU_B.Counter_d = false;
 8005164:	4b3f      	ldr	r3, [pc, #252]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005166:	2200      	movs	r2, #0
 8005168:	f883 27b6 	strb.w	r2, [r3, #1974]	; 0x7b6
    if (VCU_B.LogicalOperator_i) {
 800516c:	4b3d      	ldr	r3, [pc, #244]	; (8005264 <FUNC_Transmission+0x1d34>)
 800516e:	f893 37ab 	ldrb.w	r3, [r3, #1963]	; 0x7ab
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <FUNC_Transmission+0x1c4e>
      VCU_DW.Counter_Count_i = 0U;
 8005176:	4b3c      	ldr	r3, [pc, #240]	; (8005268 <FUNC_Transmission+0x1d38>)
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    }

    if (VCU_B.Logic_iz[0]) {
 800517e:	4b39      	ldr	r3, [pc, #228]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005180:	f893 37ad 	ldrb.w	r3, [r3, #1965]	; 0x7ad
 8005184:	2b00      	cmp	r3, #0
 8005186:	d011      	beq.n	80051ac <FUNC_Transmission+0x1c7c>
      if (VCU_DW.Counter_Count_i < 200) {
 8005188:	4b37      	ldr	r3, [pc, #220]	; (8005268 <FUNC_Transmission+0x1d38>)
 800518a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800518e:	2bc7      	cmp	r3, #199	; 0xc7
 8005190:	d808      	bhi.n	80051a4 <FUNC_Transmission+0x1c74>
        VCU_DW.Counter_Count_i++;
 8005192:	4b35      	ldr	r3, [pc, #212]	; (8005268 <FUNC_Transmission+0x1d38>)
 8005194:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8005198:	3301      	adds	r3, #1
 800519a:	b2da      	uxtb	r2, r3
 800519c:	4b32      	ldr	r3, [pc, #200]	; (8005268 <FUNC_Transmission+0x1d38>)
 800519e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 80051a2:	e003      	b.n	80051ac <FUNC_Transmission+0x1c7c>
      } else {
        VCU_DW.Counter_Count_i = 0U;
 80051a4:	4b30      	ldr	r3, [pc, #192]	; (8005268 <FUNC_Transmission+0x1d38>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
      }
    }

    if (VCU_DW.Counter_Count_i == 180) {
 80051ac:	4b2e      	ldr	r3, [pc, #184]	; (8005268 <FUNC_Transmission+0x1d38>)
 80051ae:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80051b2:	2bb4      	cmp	r3, #180	; 0xb4
 80051b4:	d103      	bne.n	80051be <FUNC_Transmission+0x1c8e>
      VCU_B.Counter_d = true;
 80051b6:	4b2b      	ldr	r3, [pc, #172]	; (8005264 <FUNC_Transmission+0x1d34>)
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 27b6 	strb.w	r2, [r3, #1974]	; 0x7b6
    }

    /* End of S-Function (sdspcount2): '<S194>/Counter' */

    /* DataTypeConversion: '<S140>/Data Type Conversion8' */
    VCU_B.VOVG_ShiftUp_k = VCU_B.Logic_iz[0];
 80051be:	4b29      	ldr	r3, [pc, #164]	; (8005264 <FUNC_Transmission+0x1d34>)
 80051c0:	f893 37ad 	ldrb.w	r3, [r3, #1965]	; 0x7ad
 80051c4:	4618      	mov	r0, r3
 80051c6:	f009 fd11 	bl	800ebec <__aeabi_ui2d>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4925      	ldr	r1, [pc, #148]	; (8005264 <FUNC_Transmission+0x1d34>)
 80051d0:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
     *
     * Block description for '<S205>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_B.Uk1_f = VCU_DW.DelayInput1_DSTATE_p;
 80051d4:	4b24      	ldr	r3, [pc, #144]	; (8005268 <FUNC_Transmission+0x1d38>)
 80051d6:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
 80051da:	4b22      	ldr	r3, [pc, #136]	; (8005264 <FUNC_Transmission+0x1d34>)
 80051dc:	f883 2742 	strb.w	r2, [r3, #1858]	; 0x742

    /* RelationalOperator: '<S205>/FixPt Relational Operator' */
    VCU_B.FixPtRelationalOperator_d = (VCU_B.Add_c < VCU_B.Uk1_f);
 80051e0:	4b20      	ldr	r3, [pc, #128]	; (8005264 <FUNC_Transmission+0x1d34>)
 80051e2:	f893 273e 	ldrb.w	r2, [r3, #1854]	; 0x73e
 80051e6:	4b1f      	ldr	r3, [pc, #124]	; (8005264 <FUNC_Transmission+0x1d34>)
 80051e8:	f893 3742 	ldrb.w	r3, [r3, #1858]	; 0x742
 80051ec:	429a      	cmp	r2, r3
 80051ee:	bf34      	ite	cc
 80051f0:	2301      	movcc	r3, #1
 80051f2:	2300      	movcs	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	4b1a      	ldr	r3, [pc, #104]	; (8005264 <FUNC_Transmission+0x1d34>)
 80051fa:	f883 27b7 	strb.w	r2, [r3, #1975]	; 0x7b7

    /* Switch: '<S192>/Switch' */
    if (VCU_B.Logic_i[0]) {
 80051fe:	4b19      	ldr	r3, [pc, #100]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005200:	f893 378c 	ldrb.w	r3, [r3, #1932]	; 0x78c
 8005204:	2b00      	cmp	r3, #0
 8005206:	d006      	beq.n	8005216 <FUNC_Transmission+0x1ce6>
      /* MinMax: '<S192>/MinMax' incorporates:
       *  Constant: '<S192>/Constant'
       */
      VCU_B.Switch_g = 20.0;
 8005208:	4916      	ldr	r1, [pc, #88]	; (8005264 <FUNC_Transmission+0x1d34>)
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	4b18      	ldr	r3, [pc, #96]	; (8005270 <FUNC_Transmission+0x1d40>)
 8005210:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8005214:	e006      	b.n	8005224 <FUNC_Transmission+0x1cf4>
    } else {
      /* MinMax: '<S192>/MinMax' incorporates:
       *  Constant: '<S192>/Constant1'
       */
      VCU_B.Switch_g = 0.0;
 8005216:	4913      	ldr	r1, [pc, #76]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    }

    /* End of Switch: '<S192>/Switch' */

    /* MinMax: '<S192>/MinMax' */
    if ((VCU_B.x_clutch_STW > VCU_B.Switch_g) || rtIsNaN(VCU_B.Switch_g)) {
 8005224:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005226:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800522a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800522e:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005230:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8005234:	f009 ffe0 	bl	800f1f8 <__aeabi_dcmpgt>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <FUNC_Transmission+0x1d22>
 800523e:	4b09      	ldr	r3, [pc, #36]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005240:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8005244:	4610      	mov	r0, r2
 8005246:	4619      	mov	r1, r3
 8005248:	f001 f97a 	bl	8006540 <rtIsNaN>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d010      	beq.n	8005274 <FUNC_Transmission+0x1d44>
      VCU_B.MinMax = VCU_B.x_clutch_STW;
 8005252:	4b04      	ldr	r3, [pc, #16]	; (8005264 <FUNC_Transmission+0x1d34>)
 8005254:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	4901      	ldr	r1, [pc, #4]	; (8005264 <FUNC_Transmission+0x1d34>)
 800525e:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8005262:	e00d      	b.n	8005280 <FUNC_Transmission+0x1d50>
 8005264:	200008a8 	.word	0x200008a8
 8005268:	200010c8 	.word	0x200010c8
 800526c:	0800f458 	.word	0x0800f458
 8005270:	40340000 	.word	0x40340000
    } else {
      VCU_B.MinMax = VCU_B.Switch_g;
 8005274:	4b9e      	ldr	r3, [pc, #632]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 8005276:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800527a:	499d      	ldr	r1, [pc, #628]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 800527c:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
    }

    if (!(VCU_B.MinMax > 0.0)) {
 8005280:	4b9b      	ldr	r3, [pc, #620]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 8005282:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8005286:	2101      	movs	r1, #1
 8005288:	460c      	mov	r4, r1
 800528a:	4610      	mov	r0, r2
 800528c:	4619      	mov	r1, r3
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	f04f 0300 	mov.w	r3, #0
 8005296:	f009 ffaf 	bl	800f1f8 <__aeabi_dcmpgt>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <FUNC_Transmission+0x1d74>
 80052a0:	2300      	movs	r3, #0
 80052a2:	461c      	mov	r4, r3
 80052a4:	b2e3      	uxtb	r3, r4
 80052a6:	f083 0301 	eor.w	r3, r3, #1
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d006      	beq.n	80052be <FUNC_Transmission+0x1d8e>
      VCU_B.MinMax = 0.0;
 80052b0:	498f      	ldr	r1, [pc, #572]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
    }

    /* RelationalOperator: '<S195>/Compare' incorporates:
     *  Constant: '<S195>/Constant'
     */
    VCU_B.Compare_ao = (VCU_B.MinMax > 1.0);
 80052be:	4b8c      	ldr	r3, [pc, #560]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 80052c0:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80052c4:	2101      	movs	r1, #1
 80052c6:	460c      	mov	r4, r1
 80052c8:	4610      	mov	r0, r2
 80052ca:	4619      	mov	r1, r3
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	4b88      	ldr	r3, [pc, #544]	; (80054f4 <FUNC_Transmission+0x1fc4>)
 80052d2:	f009 ff91 	bl	800f1f8 <__aeabi_dcmpgt>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <FUNC_Transmission+0x1db0>
 80052dc:	2300      	movs	r3, #0
 80052de:	461c      	mov	r4, r3
 80052e0:	b2e3      	uxtb	r3, r4
 80052e2:	461a      	mov	r2, r3
 80052e4:	4b82      	ldr	r3, [pc, #520]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 80052e6:	f883 27b8 	strb.w	r2, [r3, #1976]	; 0x7b8

    /* DataTypeConversion: '<S140>/Data Type Conversion12' */
    VCU_B.VOVG_IN_h = VCU_B.Compare_ao;
 80052ea:	4b81      	ldr	r3, [pc, #516]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 80052ec:	f893 37b8 	ldrb.w	r3, [r3, #1976]	; 0x7b8
 80052f0:	4618      	mov	r0, r3
 80052f2:	f009 fc7b 	bl	800ebec <__aeabi_ui2d>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	497d      	ldr	r1, [pc, #500]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 80052fc:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

    /* Sum: '<S192>/Add' */
    VCU_B.Add = VCU_B.MinMax - VCU_B.x_clutch_b;
 8005300:	4b7b      	ldr	r3, [pc, #492]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 8005302:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8005306:	4b7a      	ldr	r3, [pc, #488]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 8005308:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f009 fb2e 	bl	800e970 <__aeabi_dsub>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	4975      	ldr	r1, [pc, #468]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 800531a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8

    /* RelationalOperator: '<S197>/Compare' incorporates:
     *  Constant: '<S197>/Constant'
     */
    VCU_B.Compare_gu = (VCU_B.Add < -0.5);
 800531e:	4b74      	ldr	r3, [pc, #464]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 8005320:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8005324:	2101      	movs	r1, #1
 8005326:	460c      	mov	r4, r1
 8005328:	4610      	mov	r0, r2
 800532a:	4619      	mov	r1, r3
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	4b71      	ldr	r3, [pc, #452]	; (80054f8 <FUNC_Transmission+0x1fc8>)
 8005332:	f009 ff43 	bl	800f1bc <__aeabi_dcmplt>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <FUNC_Transmission+0x1e10>
 800533c:	2300      	movs	r3, #0
 800533e:	461c      	mov	r4, r3
 8005340:	b2e3      	uxtb	r3, r4
 8005342:	461a      	mov	r2, r3
 8005344:	4b6a      	ldr	r3, [pc, #424]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 8005346:	f883 27b9 	strb.w	r2, [r3, #1977]	; 0x7b9

    /* Lookup_n-D: '<S192>/Duty Cycle MHJ9' */
    VCU_B.DutyCycleMHJ9 = look1_binlxpw(VCU_B.Add, VCU_ConstP.pooled24,
 800534a:	4b69      	ldr	r3, [pc, #420]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 800534c:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8005350:	210e      	movs	r1, #14
 8005352:	9100      	str	r1, [sp, #0]
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	4a68      	ldr	r2, [pc, #416]	; (80054fc <FUNC_Transmission+0x1fcc>)
 800535a:	4b69      	ldr	r3, [pc, #420]	; (8005500 <FUNC_Transmission+0x1fd0>)
 800535c:	f000 fcd8 	bl	8005d10 <look1_binlxpw>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4962      	ldr	r1, [pc, #392]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 8005366:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
      VCU_ConstP.pooled23, 14U);

    /* Product: '<S192>/Product1' */
    VCU_B.Product1 = VCU_B.DutyCycleMHJ9 * (real_T)VCU_B.Compare_gu;
 800536a:	4b61      	ldr	r3, [pc, #388]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 800536c:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8005370:	4b5f      	ldr	r3, [pc, #380]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 8005372:	f893 37b9 	ldrb.w	r3, [r3, #1977]	; 0x7b9
 8005376:	4618      	mov	r0, r3
 8005378:	f009 fc38 	bl	800ebec <__aeabi_ui2d>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4620      	mov	r0, r4
 8005382:	4629      	mov	r1, r5
 8005384:	f009 fca8 	bl	800ecd8 <__aeabi_dmul>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4958      	ldr	r1, [pc, #352]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 800538e:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8

    /* RelationalOperator: '<S196>/Compare' incorporates:
     *  Constant: '<S196>/Constant'
     */
    VCU_B.Compare_eh = (VCU_B.x_clutch_b > 20.0);
 8005392:	4b57      	ldr	r3, [pc, #348]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 8005394:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8005398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539c:	2101      	movs	r1, #1
 800539e:	460c      	mov	r4, r1
 80053a0:	4610      	mov	r0, r2
 80053a2:	4619      	mov	r1, r3
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	4b56      	ldr	r3, [pc, #344]	; (8005504 <FUNC_Transmission+0x1fd4>)
 80053aa:	f009 ff25 	bl	800f1f8 <__aeabi_dcmpgt>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <FUNC_Transmission+0x1e88>
 80053b4:	2300      	movs	r3, #0
 80053b6:	461c      	mov	r4, r3
 80053b8:	b2e3      	uxtb	r3, r4
 80053ba:	461a      	mov	r2, r3
 80053bc:	4b4c      	ldr	r3, [pc, #304]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 80053be:	f883 27ba 	strb.w	r2, [r3, #1978]	; 0x7ba

    /* Switch: '<S192>/Switch1' incorporates:
     *  Constant: '<S192>/Constant2'
     *  Constant: '<S192>/Constant3'
     */
    if (VCU_B.Compare_eh) {
 80053c2:	4b4b      	ldr	r3, [pc, #300]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 80053c4:	f893 37ba 	ldrb.w	r3, [r3, #1978]	; 0x7ba
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d007      	beq.n	80053dc <FUNC_Transmission+0x1eac>
      VCU_B.Switch1 = 2.0;
 80053cc:	4948      	ldr	r1, [pc, #288]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053d6:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
 80053da:	e005      	b.n	80053e8 <FUNC_Transmission+0x1eb8>
    } else {
      VCU_B.Switch1 = 1.0;
 80053dc:	4944      	ldr	r1, [pc, #272]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	4b44      	ldr	r3, [pc, #272]	; (80054f4 <FUNC_Transmission+0x1fc4>)
 80053e4:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    }

    /* End of Switch: '<S192>/Switch1' */

    /* Product: '<S192>/Product2' */
    VCU_B.Product2 = VCU_B.Product1 * VCU_B.Switch1;
 80053e8:	4b41      	ldr	r3, [pc, #260]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 80053ea:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 80053ee:	4b40      	ldr	r3, [pc, #256]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 80053f0:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 80053f4:	f009 fc70 	bl	800ecd8 <__aeabi_dmul>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	493c      	ldr	r1, [pc, #240]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 80053fe:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8

    /* DataTypeConversion: '<S140>/Data Type Conversion15' */
    VCU_B.MHJ9_OUT_d = VCU_B.Product2;
 8005402:	4b3b      	ldr	r3, [pc, #236]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 8005404:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8005408:	4939      	ldr	r1, [pc, #228]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 800540a:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0

    /* RelationalOperator: '<S198>/Compare' incorporates:
     *  Constant: '<S198>/Constant'
     */
    VCU_B.Compare_m = (VCU_B.Add > 0.0);
 800540e:	4b38      	ldr	r3, [pc, #224]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 8005410:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8005414:	2101      	movs	r1, #1
 8005416:	460c      	mov	r4, r1
 8005418:	4610      	mov	r0, r2
 800541a:	4619      	mov	r1, r3
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	f009 fee8 	bl	800f1f8 <__aeabi_dcmpgt>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <FUNC_Transmission+0x1f02>
 800542e:	2300      	movs	r3, #0
 8005430:	461c      	mov	r4, r3
 8005432:	b2e3      	uxtb	r3, r4
 8005434:	461a      	mov	r2, r3
 8005436:	4b2e      	ldr	r3, [pc, #184]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 8005438:	f883 27bb 	strb.w	r2, [r3, #1979]	; 0x7bb

    /* Product: '<S192>/Product3' */
    VCU_B.Product3 = VCU_B.DutyCycleMHJ9 * (real_T)VCU_B.Compare_m;
 800543c:	4b2c      	ldr	r3, [pc, #176]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 800543e:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8005442:	4b2b      	ldr	r3, [pc, #172]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 8005444:	f893 37bb 	ldrb.w	r3, [r3, #1979]	; 0x7bb
 8005448:	4618      	mov	r0, r3
 800544a:	f009 fbcf 	bl	800ebec <__aeabi_ui2d>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	4620      	mov	r0, r4
 8005454:	4629      	mov	r1, r5
 8005456:	f009 fc3f 	bl	800ecd8 <__aeabi_dmul>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4924      	ldr	r1, [pc, #144]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 8005460:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8

    /* DataTypeConversion: '<S140>/Data Type Conversion14' */
    VCU_B.MHJ9_IN_e = VCU_B.Product3;
 8005464:	4b22      	ldr	r3, [pc, #136]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 8005466:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800546a:	4921      	ldr	r1, [pc, #132]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 800546c:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0

    /* RelationalOperator: '<S199>/Compare' incorporates:
     *  Constant: '<S199>/Constant'
     */
    VCU_B.Compare_md = (VCU_B.Add < -20.0);
 8005470:	4b1f      	ldr	r3, [pc, #124]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 8005472:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8005476:	2101      	movs	r1, #1
 8005478:	460c      	mov	r4, r1
 800547a:	4610      	mov	r0, r2
 800547c:	4619      	mov	r1, r3
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	4b21      	ldr	r3, [pc, #132]	; (8005508 <FUNC_Transmission+0x1fd8>)
 8005484:	f009 fe9a 	bl	800f1bc <__aeabi_dcmplt>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <FUNC_Transmission+0x1f62>
 800548e:	2300      	movs	r3, #0
 8005490:	461c      	mov	r4, r3
 8005492:	b2e3      	uxtb	r3, r4
 8005494:	461a      	mov	r2, r3
 8005496:	4b16      	ldr	r3, [pc, #88]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 8005498:	f883 27bc 	strb.w	r2, [r3, #1980]	; 0x7bc

    /* DataTypeConversion: '<S140>/Data Type Conversion13' */
    VCU_B.VOVG_OUT_j = VCU_B.Compare_md;
 800549c:	4b14      	ldr	r3, [pc, #80]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 800549e:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 80054a2:	4618      	mov	r0, r3
 80054a4:	f009 fba2 	bl	800ebec <__aeabi_ui2d>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4910      	ldr	r1, [pc, #64]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 80054ae:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8

    /* DataTypeConversion: '<S140>/Data Type Conversion16' */
    VCU_B.x_clutch_LC_b = 0.0;
 80054b2:	490f      	ldr	r1, [pc, #60]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	f04f 0300 	mov.w	r3, #0
 80054bc:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    /* DataTypeConversion: '<S140>/Data Type Conversion17' */
    VCU_B.LC_Mdes_b = 0.0;
 80054c0:	490b      	ldr	r1, [pc, #44]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 80054c2:	f04f 0200 	mov.w	r2, #0
 80054c6:	f04f 0300 	mov.w	r3, #0
 80054ca:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8

    /* DataTypeConversion: '<S140>/Data Type Conversion18' */
    VCU_B.LC_Fnr_l = 0.0;
 80054ce:	4908      	ldr	r1, [pc, #32]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100

    /* Update for UnitDelay: '<S193>/Unit Delay1' */
    VCU_DW.UnitDelay1_DSTATE = VCU_B.Logic_i[0];
 80054dc:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <FUNC_Transmission+0x1fc0>)
 80054de:	f893 278c 	ldrb.w	r2, [r3, #1932]	; 0x78c
 80054e2:	4b0a      	ldr	r3, [pc, #40]	; (800550c <FUNC_Transmission+0x1fdc>)
 80054e4:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1

    /* Update for Delay: '<S193>/Delay' */
    for (rowIdx = 0; rowIdx < 19; rowIdx++) {
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	e01f      	b.n	800552e <FUNC_Transmission+0x1ffe>
 80054ee:	bf00      	nop
 80054f0:	200008a8 	.word	0x200008a8
 80054f4:	3ff00000 	.word	0x3ff00000
 80054f8:	bfe00000 	.word	0xbfe00000
 80054fc:	0800f708 	.word	0x0800f708
 8005500:	0800f690 	.word	0x0800f690
 8005504:	40340000 	.word	0x40340000
 8005508:	c0340000 	.word	0xc0340000
 800550c:	200010c8 	.word	0x200010c8
      VCU_DW.Delay_DSTATE[rowIdx] = VCU_DW.Delay_DSTATE[rowIdx + 1];
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	3301      	adds	r3, #1
 8005514:	4a9d      	ldr	r2, [pc, #628]	; (800578c <FUNC_Transmission+0x225c>)
 8005516:	4413      	add	r3, r2
 8005518:	f893 10e2 	ldrb.w	r1, [r3, #226]	; 0xe2
 800551c:	4a9b      	ldr	r2, [pc, #620]	; (800578c <FUNC_Transmission+0x225c>)
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	4413      	add	r3, r2
 8005522:	33e0      	adds	r3, #224	; 0xe0
 8005524:	460a      	mov	r2, r1
 8005526:	709a      	strb	r2, [r3, #2]

    /* Update for UnitDelay: '<S193>/Unit Delay1' */
    VCU_DW.UnitDelay1_DSTATE = VCU_B.Logic_i[0];

    /* Update for Delay: '<S193>/Delay' */
    for (rowIdx = 0; rowIdx < 19; rowIdx++) {
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	3301      	adds	r3, #1
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2b12      	cmp	r3, #18
 8005532:	dded      	ble.n	8005510 <FUNC_Transmission+0x1fe0>
      VCU_DW.Delay_DSTATE[rowIdx] = VCU_DW.Delay_DSTATE[rowIdx + 1];
    }

    VCU_DW.Delay_DSTATE[19] = VCU_B.LogicalOperator_d;
 8005534:	4b96      	ldr	r3, [pc, #600]	; (8005790 <FUNC_Transmission+0x2260>)
 8005536:	f893 279c 	ldrb.w	r2, [r3, #1948]	; 0x79c
 800553a:	4b94      	ldr	r3, [pc, #592]	; (800578c <FUNC_Transmission+0x225c>)
 800553c:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5

    /* End of Update for Delay: '<S193>/Delay' */

    /* Update for Memory: '<S209>/Memory' */
    VCU_DW.Memory_PreviousInput = VCU_B.Logic[0];
 8005540:	4b93      	ldr	r3, [pc, #588]	; (8005790 <FUNC_Transmission+0x2260>)
 8005542:	f893 2787 	ldrb.w	r2, [r3, #1927]	; 0x787
 8005546:	4b91      	ldr	r3, [pc, #580]	; (800578c <FUNC_Transmission+0x225c>)
 8005548:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
     *
     * Block description for '<S206>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE = VCU_B.STW_shift_down_request;
 800554c:	4b90      	ldr	r3, [pc, #576]	; (8005790 <FUNC_Transmission+0x2260>)
 800554e:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8005552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005556:	498d      	ldr	r1, [pc, #564]	; (800578c <FUNC_Transmission+0x225c>)
 8005558:	e9c1 2300 	strd	r2, r3, [r1]

    /* Update for Delay: '<S193>/Delay1' */
    VCU_DW.Delay1_DSTATE = VCU_B.LogicalOperator_d;
 800555c:	4b8c      	ldr	r3, [pc, #560]	; (8005790 <FUNC_Transmission+0x2260>)
 800555e:	f893 279c 	ldrb.w	r2, [r3, #1948]	; 0x79c
 8005562:	4b8a      	ldr	r3, [pc, #552]	; (800578c <FUNC_Transmission+0x225c>)
 8005564:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6

    /* Update for Memory: '<S207>/Memory' */
    VCU_DW.Memory_PreviousInput_l = VCU_B.Logic_i[0];
 8005568:	4b89      	ldr	r3, [pc, #548]	; (8005790 <FUNC_Transmission+0x2260>)
 800556a:	f893 278c 	ldrb.w	r2, [r3, #1932]	; 0x78c
 800556e:	4b87      	ldr	r3, [pc, #540]	; (800578c <FUNC_Transmission+0x225c>)
 8005570:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

    /* Update for UnitDelay: '<S193>/Unit Delay4' */
    VCU_DW.UnitDelay4_DSTATE = VCU_B.FixPtRelationalOperator_d;
 8005574:	4b86      	ldr	r3, [pc, #536]	; (8005790 <FUNC_Transmission+0x2260>)
 8005576:	f893 27b7 	ldrb.w	r2, [r3, #1975]	; 0x7b7
 800557a:	4b84      	ldr	r3, [pc, #528]	; (800578c <FUNC_Transmission+0x225c>)
 800557c:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7

    /* Update for UnitDelay: '<S194>/Unit Delay' */
    VCU_DW.UnitDelay_DSTATE = VCU_B.Logic_iz[0];
 8005580:	4b83      	ldr	r3, [pc, #524]	; (8005790 <FUNC_Transmission+0x2260>)
 8005582:	f893 27ad 	ldrb.w	r2, [r3, #1965]	; 0x7ad
 8005586:	4b81      	ldr	r3, [pc, #516]	; (800578c <FUNC_Transmission+0x225c>)
 8005588:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8

    /* Update for UnitDelay: '<S193>/Unit Delay2' */
    VCU_DW.UnitDelay2_DSTATE = VCU_B.Counter;
 800558c:	4b80      	ldr	r3, [pc, #512]	; (8005790 <FUNC_Transmission+0x2260>)
 800558e:	f893 27b5 	ldrb.w	r2, [r3, #1973]	; 0x7b5
 8005592:	4b7e      	ldr	r3, [pc, #504]	; (800578c <FUNC_Transmission+0x225c>)
 8005594:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9

    /* Update for Memory: '<S208>/Memory' */
    VCU_DW.Memory_PreviousInput_a = VCU_B.Logic_iy[0];
 8005598:	4b7d      	ldr	r3, [pc, #500]	; (8005790 <FUNC_Transmission+0x2260>)
 800559a:	f893 279e 	ldrb.w	r2, [r3, #1950]	; 0x79e
 800559e:	4b7b      	ldr	r3, [pc, #492]	; (800578c <FUNC_Transmission+0x225c>)
 80055a0:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
     *
     * Block description for '<S214>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_g = VCU_B.STW_shift_up_request;
 80055a4:	4b7a      	ldr	r3, [pc, #488]	; (8005790 <FUNC_Transmission+0x2260>)
 80055a6:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	4977      	ldr	r1, [pc, #476]	; (800578c <FUNC_Transmission+0x225c>)
 80055b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
     *
     * Block description for '<S215>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_ga = VCU_B.Add_j;
 80055b4:	4b76      	ldr	r3, [pc, #472]	; (8005790 <FUNC_Transmission+0x2260>)
 80055b6:	f893 273f 	ldrb.w	r2, [r3, #1855]	; 0x73f
 80055ba:	4b74      	ldr	r3, [pc, #464]	; (800578c <FUNC_Transmission+0x225c>)
 80055bc:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde

    /* Update for UnitDelay: '<S193>/Unit Delay' */
    VCU_DW.UnitDelay_DSTATE_b = VCU_B.Logic_iy[0];
 80055c0:	4b73      	ldr	r3, [pc, #460]	; (8005790 <FUNC_Transmission+0x2260>)
 80055c2:	f893 279e 	ldrb.w	r2, [r3, #1950]	; 0x79e
 80055c6:	4b71      	ldr	r3, [pc, #452]	; (800578c <FUNC_Transmission+0x225c>)
 80055c8:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa

    /* Update for UnitDelay: '<S194>/Unit Delay1' */
    VCU_DW.UnitDelay1_DSTATE_k = VCU_B.Counter_d;
 80055cc:	4b70      	ldr	r3, [pc, #448]	; (8005790 <FUNC_Transmission+0x2260>)
 80055ce:	f893 27b6 	ldrb.w	r2, [r3, #1974]	; 0x7b6
 80055d2:	4b6e      	ldr	r3, [pc, #440]	; (800578c <FUNC_Transmission+0x225c>)
 80055d4:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

    /* Update for Memory: '<S217>/Memory' */
    VCU_DW.Memory_PreviousInput_al = VCU_B.Logic_iz[0];
 80055d8:	4b6d      	ldr	r3, [pc, #436]	; (8005790 <FUNC_Transmission+0x2260>)
 80055da:	f893 27ad 	ldrb.w	r2, [r3, #1965]	; 0x7ad
 80055de:	4b6b      	ldr	r3, [pc, #428]	; (800578c <FUNC_Transmission+0x225c>)
 80055e0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
     *
     * Block description for '<S216>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_f = VCU_B.Add_j;
 80055e4:	4b6a      	ldr	r3, [pc, #424]	; (8005790 <FUNC_Transmission+0x2260>)
 80055e6:	f893 273f 	ldrb.w	r2, [r3, #1855]	; 0x73f
 80055ea:	4b68      	ldr	r3, [pc, #416]	; (800578c <FUNC_Transmission+0x225c>)
 80055ec:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf

    /* Update for Memory: '<S218>/Memory' */
    VCU_DW.Memory_PreviousInput_k = VCU_B.Logic_e[0];
 80055f0:	4b67      	ldr	r3, [pc, #412]	; (8005790 <FUNC_Transmission+0x2260>)
 80055f2:	f893 27b3 	ldrb.w	r2, [r3, #1971]	; 0x7b3
 80055f6:	4b65      	ldr	r3, [pc, #404]	; (800578c <FUNC_Transmission+0x225c>)
 80055f8:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
     *
     * Block description for '<S205>/Delay Input1':
     *
     *  Store in Global RAM
     */
    VCU_DW.DelayInput1_DSTATE_p = VCU_B.Add_c;
 80055fc:	4b64      	ldr	r3, [pc, #400]	; (8005790 <FUNC_Transmission+0x2260>)
 80055fe:	f893 273e 	ldrb.w	r2, [r3, #1854]	; 0x73e
 8005602:	4b62      	ldr	r3, [pc, #392]	; (800578c <FUNC_Transmission+0x225c>)
 8005604:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  /* End of Outputs for SubSystem: '<S7>/semi_auto_jr18' */

  /* RelationalOperator: '<S136>/Compare' incorporates:
   *  Constant: '<S136>/Constant'
   */
  VCU_B.Compare_j = (VCU_B.DataTypeConversion_cg == 2);
 8005608:	4b61      	ldr	r3, [pc, #388]	; (8005790 <FUNC_Transmission+0x2260>)
 800560a:	f893 377c 	ldrb.w	r3, [r3, #1916]	; 0x77c
 800560e:	b25b      	sxtb	r3, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	bf0c      	ite	eq
 8005614:	2301      	moveq	r3, #1
 8005616:	2300      	movne	r3, #0
 8005618:	b2db      	uxtb	r3, r3
 800561a:	461a      	mov	r2, r3
 800561c:	4b5c      	ldr	r3, [pc, #368]	; (8005790 <FUNC_Transmission+0x2260>)
 800561e:	f883 2781 	strb.w	r2, [r3, #1921]	; 0x781

  /* Outputs for Enabled SubSystem: '<S7>/driver_jr18' incorporates:
   *  EnablePort: '<S139>/Enable'
   */
  if (VCU_B.Compare_j) {
 8005622:	4b5b      	ldr	r3, [pc, #364]	; (8005790 <FUNC_Transmission+0x2260>)
 8005624:	f893 3781 	ldrb.w	r3, [r3, #1921]	; 0x781
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 81c3 	beq.w	80059b4 <FUNC_Transmission+0x2484>
    /* MinMax: '<S184>/MinMax' */
    if (VCU_B.x_clutch_STW > 0.0) {
 800562e:	4b58      	ldr	r3, [pc, #352]	; (8005790 <FUNC_Transmission+0x2260>)
 8005630:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	4610      	mov	r0, r2
 800563a:	4619      	mov	r1, r3
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	f009 fdd8 	bl	800f1f8 <__aeabi_dcmpgt>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d008      	beq.n	8005660 <FUNC_Transmission+0x2130>
      VCU_B.MinMax_l = VCU_B.x_clutch_STW;
 800564e:	4b50      	ldr	r3, [pc, #320]	; (8005790 <FUNC_Transmission+0x2260>)
 8005650:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	494d      	ldr	r1, [pc, #308]	; (8005790 <FUNC_Transmission+0x2260>)
 800565a:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
 800565e:	e006      	b.n	800566e <FUNC_Transmission+0x213e>
    } else {
      VCU_B.MinMax_l = 0.0;
 8005660:	494b      	ldr	r1, [pc, #300]	; (8005790 <FUNC_Transmission+0x2260>)
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
    /* End of MinMax: '<S184>/MinMax' */

    /* RelationalOperator: '<S187>/Compare' incorporates:
     *  Constant: '<S187>/Constant'
     */
    VCU_B.Compare_bd = (VCU_B.MinMax_l > 1.0);
 800566e:	4b48      	ldr	r3, [pc, #288]	; (8005790 <FUNC_Transmission+0x2260>)
 8005670:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8005674:	2101      	movs	r1, #1
 8005676:	460c      	mov	r4, r1
 8005678:	4610      	mov	r0, r2
 800567a:	4619      	mov	r1, r3
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	4b44      	ldr	r3, [pc, #272]	; (8005794 <FUNC_Transmission+0x2264>)
 8005682:	f009 fdb9 	bl	800f1f8 <__aeabi_dcmpgt>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <FUNC_Transmission+0x2160>
 800568c:	2300      	movs	r3, #0
 800568e:	461c      	mov	r4, r3
 8005690:	b2e3      	uxtb	r3, r4
 8005692:	461a      	mov	r2, r3
 8005694:	4b3e      	ldr	r3, [pc, #248]	; (8005790 <FUNC_Transmission+0x2260>)
 8005696:	f883 27bd 	strb.w	r2, [r3, #1981]	; 0x7bd

    /* DataTypeConversion: '<S139>/Data Type Conversion12' */
    VCU_B.VOVG_IN_c = VCU_B.Compare_bd;
 800569a:	4b3d      	ldr	r3, [pc, #244]	; (8005790 <FUNC_Transmission+0x2260>)
 800569c:	f893 37bd 	ldrb.w	r3, [r3, #1981]	; 0x7bd
 80056a0:	4618      	mov	r0, r3
 80056a2:	f009 faa3 	bl	800ebec <__aeabi_ui2d>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4939      	ldr	r1, [pc, #228]	; (8005790 <FUNC_Transmission+0x2260>)
 80056ac:	e9c1 2344 	strd	r2, r3, [r1, #272]	; 0x110

    /* Sum: '<S184>/Add' */
    VCU_B.Add_l = VCU_B.MinMax_l - VCU_B.x_clutch_b;
 80056b0:	4b37      	ldr	r3, [pc, #220]	; (8005790 <FUNC_Transmission+0x2260>)
 80056b2:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	; 0x108
 80056b6:	4b36      	ldr	r3, [pc, #216]	; (8005790 <FUNC_Transmission+0x2260>)
 80056b8:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	f009 f956 	bl	800e970 <__aeabi_dsub>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4931      	ldr	r1, [pc, #196]	; (8005790 <FUNC_Transmission+0x2260>)
 80056ca:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118

    /* RelationalOperator: '<S189>/Compare' incorporates:
     *  Constant: '<S189>/Constant'
     */
    VCU_B.Compare_e5 = (VCU_B.Add_l < -0.5);
 80056ce:	4b30      	ldr	r3, [pc, #192]	; (8005790 <FUNC_Transmission+0x2260>)
 80056d0:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80056d4:	2101      	movs	r1, #1
 80056d6:	460c      	mov	r4, r1
 80056d8:	4610      	mov	r0, r2
 80056da:	4619      	mov	r1, r3
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	4b2d      	ldr	r3, [pc, #180]	; (8005798 <FUNC_Transmission+0x2268>)
 80056e2:	f009 fd6b 	bl	800f1bc <__aeabi_dcmplt>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <FUNC_Transmission+0x21c0>
 80056ec:	2300      	movs	r3, #0
 80056ee:	461c      	mov	r4, r3
 80056f0:	b2e3      	uxtb	r3, r4
 80056f2:	461a      	mov	r2, r3
 80056f4:	4b26      	ldr	r3, [pc, #152]	; (8005790 <FUNC_Transmission+0x2260>)
 80056f6:	f883 27be 	strb.w	r2, [r3, #1982]	; 0x7be

    /* Lookup_n-D: '<S184>/Duty Cycle MHJ9' */
    VCU_B.DutyCycleMHJ9_d = look1_binlxpw(VCU_B.Add_l, VCU_ConstP.pooled24,
 80056fa:	4b25      	ldr	r3, [pc, #148]	; (8005790 <FUNC_Transmission+0x2260>)
 80056fc:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8005700:	210e      	movs	r1, #14
 8005702:	9100      	str	r1, [sp, #0]
 8005704:	4610      	mov	r0, r2
 8005706:	4619      	mov	r1, r3
 8005708:	4a24      	ldr	r2, [pc, #144]	; (800579c <FUNC_Transmission+0x226c>)
 800570a:	4b25      	ldr	r3, [pc, #148]	; (80057a0 <FUNC_Transmission+0x2270>)
 800570c:	f000 fb00 	bl	8005d10 <look1_binlxpw>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	491e      	ldr	r1, [pc, #120]	; (8005790 <FUNC_Transmission+0x2260>)
 8005716:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
      VCU_ConstP.pooled23, 14U);

    /* Product: '<S184>/Product1' */
    VCU_B.Product1_p = VCU_B.DutyCycleMHJ9_d * (real_T)VCU_B.Compare_e5;
 800571a:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <FUNC_Transmission+0x2260>)
 800571c:	e9d3 4548 	ldrd	r4, r5, [r3, #288]	; 0x120
 8005720:	4b1b      	ldr	r3, [pc, #108]	; (8005790 <FUNC_Transmission+0x2260>)
 8005722:	f893 37be 	ldrb.w	r3, [r3, #1982]	; 0x7be
 8005726:	4618      	mov	r0, r3
 8005728:	f009 fa60 	bl	800ebec <__aeabi_ui2d>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4620      	mov	r0, r4
 8005732:	4629      	mov	r1, r5
 8005734:	f009 fad0 	bl	800ecd8 <__aeabi_dmul>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	4914      	ldr	r1, [pc, #80]	; (8005790 <FUNC_Transmission+0x2260>)
 800573e:	e9c1 234a 	strd	r2, r3, [r1, #296]	; 0x128

    /* RelationalOperator: '<S188>/Compare' incorporates:
     *  Constant: '<S188>/Constant'
     */
    VCU_B.Compare_p = (VCU_B.x_clutch_b > 20.0);
 8005742:	4b13      	ldr	r3, [pc, #76]	; (8005790 <FUNC_Transmission+0x2260>)
 8005744:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	2101      	movs	r1, #1
 800574e:	460c      	mov	r4, r1
 8005750:	4610      	mov	r0, r2
 8005752:	4619      	mov	r1, r3
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	4b12      	ldr	r3, [pc, #72]	; (80057a4 <FUNC_Transmission+0x2274>)
 800575a:	f009 fd4d 	bl	800f1f8 <__aeabi_dcmpgt>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <FUNC_Transmission+0x2238>
 8005764:	2300      	movs	r3, #0
 8005766:	461c      	mov	r4, r3
 8005768:	b2e3      	uxtb	r3, r4
 800576a:	461a      	mov	r2, r3
 800576c:	4b08      	ldr	r3, [pc, #32]	; (8005790 <FUNC_Transmission+0x2260>)
 800576e:	f883 27bf 	strb.w	r2, [r3, #1983]	; 0x7bf

    /* Switch: '<S184>/Switch1' incorporates:
     *  Constant: '<S184>/Constant2'
     *  Constant: '<S184>/Constant3'
     */
    if (VCU_B.Compare_p) {
 8005772:	4b07      	ldr	r3, [pc, #28]	; (8005790 <FUNC_Transmission+0x2260>)
 8005774:	f893 37bf 	ldrb.w	r3, [r3, #1983]	; 0x7bf
 8005778:	2b00      	cmp	r3, #0
 800577a:	d015      	beq.n	80057a8 <FUNC_Transmission+0x2278>
      VCU_B.Switch1_e = 2.0;
 800577c:	4904      	ldr	r1, [pc, #16]	; (8005790 <FUNC_Transmission+0x2260>)
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005786:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
 800578a:	e013      	b.n	80057b4 <FUNC_Transmission+0x2284>
 800578c:	200010c8 	.word	0x200010c8
 8005790:	200008a8 	.word	0x200008a8
 8005794:	3ff00000 	.word	0x3ff00000
 8005798:	bfe00000 	.word	0xbfe00000
 800579c:	0800f708 	.word	0x0800f708
 80057a0:	0800f690 	.word	0x0800f690
 80057a4:	40340000 	.word	0x40340000
    } else {
      VCU_B.Switch1_e = 1.0;
 80057a8:	49a5      	ldr	r1, [pc, #660]	; (8005a40 <FUNC_Transmission+0x2510>)
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	4ba5      	ldr	r3, [pc, #660]	; (8005a44 <FUNC_Transmission+0x2514>)
 80057b0:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
    }

    /* End of Switch: '<S184>/Switch1' */

    /* Product: '<S184>/Product2' */
    VCU_B.Product2_p = VCU_B.Product1_p * VCU_B.Switch1_e;
 80057b4:	4ba2      	ldr	r3, [pc, #648]	; (8005a40 <FUNC_Transmission+0x2510>)
 80057b6:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	; 0x128
 80057ba:	4ba1      	ldr	r3, [pc, #644]	; (8005a40 <FUNC_Transmission+0x2510>)
 80057bc:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80057c0:	f009 fa8a 	bl	800ecd8 <__aeabi_dmul>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	499d      	ldr	r1, [pc, #628]	; (8005a40 <FUNC_Transmission+0x2510>)
 80057ca:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138

    /* DataTypeConversion: '<S139>/Data Type Conversion15' */
    VCU_B.MHJ9_OUT_k = VCU_B.Product2_p;
 80057ce:	4b9c      	ldr	r3, [pc, #624]	; (8005a40 <FUNC_Transmission+0x2510>)
 80057d0:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 80057d4:	499a      	ldr	r1, [pc, #616]	; (8005a40 <FUNC_Transmission+0x2510>)
 80057d6:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140

    /* RelationalOperator: '<S190>/Compare' incorporates:
     *  Constant: '<S190>/Constant'
     */
    VCU_B.Compare_gz = (VCU_B.Add_l > 0.0);
 80057da:	4b99      	ldr	r3, [pc, #612]	; (8005a40 <FUNC_Transmission+0x2510>)
 80057dc:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80057e0:	2101      	movs	r1, #1
 80057e2:	460c      	mov	r4, r1
 80057e4:	4610      	mov	r0, r2
 80057e6:	4619      	mov	r1, r3
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	f009 fd02 	bl	800f1f8 <__aeabi_dcmpgt>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <FUNC_Transmission+0x22ce>
 80057fa:	2300      	movs	r3, #0
 80057fc:	461c      	mov	r4, r3
 80057fe:	b2e3      	uxtb	r3, r4
 8005800:	461a      	mov	r2, r3
 8005802:	4b8f      	ldr	r3, [pc, #572]	; (8005a40 <FUNC_Transmission+0x2510>)
 8005804:	f883 27c0 	strb.w	r2, [r3, #1984]	; 0x7c0

    /* Product: '<S184>/Product3' */
    VCU_B.Product3_d = VCU_B.DutyCycleMHJ9_d * (real_T)VCU_B.Compare_gz;
 8005808:	4b8d      	ldr	r3, [pc, #564]	; (8005a40 <FUNC_Transmission+0x2510>)
 800580a:	e9d3 4548 	ldrd	r4, r5, [r3, #288]	; 0x120
 800580e:	4b8c      	ldr	r3, [pc, #560]	; (8005a40 <FUNC_Transmission+0x2510>)
 8005810:	f893 37c0 	ldrb.w	r3, [r3, #1984]	; 0x7c0
 8005814:	4618      	mov	r0, r3
 8005816:	f009 f9e9 	bl	800ebec <__aeabi_ui2d>
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	4620      	mov	r0, r4
 8005820:	4629      	mov	r1, r5
 8005822:	f009 fa59 	bl	800ecd8 <__aeabi_dmul>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4985      	ldr	r1, [pc, #532]	; (8005a40 <FUNC_Transmission+0x2510>)
 800582c:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148

    /* DataTypeConversion: '<S139>/Data Type Conversion14' */
    VCU_B.MHJ9_IN_p = VCU_B.Product3_d;
 8005830:	4b83      	ldr	r3, [pc, #524]	; (8005a40 <FUNC_Transmission+0x2510>)
 8005832:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8005836:	4982      	ldr	r1, [pc, #520]	; (8005a40 <FUNC_Transmission+0x2510>)
 8005838:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150

    /* RelationalOperator: '<S191>/Compare' incorporates:
     *  Constant: '<S191>/Constant'
     */
    VCU_B.Compare_bh = (VCU_B.Add_l < -20.0);
 800583c:	4b80      	ldr	r3, [pc, #512]	; (8005a40 <FUNC_Transmission+0x2510>)
 800583e:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8005842:	2101      	movs	r1, #1
 8005844:	460c      	mov	r4, r1
 8005846:	4610      	mov	r0, r2
 8005848:	4619      	mov	r1, r3
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	4b7e      	ldr	r3, [pc, #504]	; (8005a48 <FUNC_Transmission+0x2518>)
 8005850:	f009 fcb4 	bl	800f1bc <__aeabi_dcmplt>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <FUNC_Transmission+0x232e>
 800585a:	2300      	movs	r3, #0
 800585c:	461c      	mov	r4, r3
 800585e:	b2e3      	uxtb	r3, r4
 8005860:	461a      	mov	r2, r3
 8005862:	4b77      	ldr	r3, [pc, #476]	; (8005a40 <FUNC_Transmission+0x2510>)
 8005864:	f883 27c1 	strb.w	r2, [r3, #1985]	; 0x7c1

    /* DataTypeConversion: '<S139>/Data Type Conversion13' */
    VCU_B.VOVG_OUT_o = VCU_B.Compare_bh;
 8005868:	4b75      	ldr	r3, [pc, #468]	; (8005a40 <FUNC_Transmission+0x2510>)
 800586a:	f893 37c1 	ldrb.w	r3, [r3, #1985]	; 0x7c1
 800586e:	4618      	mov	r0, r3
 8005870:	f009 f9bc 	bl	800ebec <__aeabi_ui2d>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4971      	ldr	r1, [pc, #452]	; (8005a40 <FUNC_Transmission+0x2510>)
 800587a:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158

    /* RelationalOperator: '<S185>/Compare' incorporates:
     *  Constant: '<S185>/Constant'
     */
    VCU_B.Compare_g5 = (VCU_B.DataTypeConversion3 < 3.0);
 800587e:	4b70      	ldr	r3, [pc, #448]	; (8005a40 <FUNC_Transmission+0x2510>)
 8005880:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8005884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005888:	2101      	movs	r1, #1
 800588a:	460c      	mov	r4, r1
 800588c:	4610      	mov	r0, r2
 800588e:	4619      	mov	r1, r3
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	4b6d      	ldr	r3, [pc, #436]	; (8005a4c <FUNC_Transmission+0x251c>)
 8005896:	f009 fc91 	bl	800f1bc <__aeabi_dcmplt>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <FUNC_Transmission+0x2374>
 80058a0:	2300      	movs	r3, #0
 80058a2:	461c      	mov	r4, r3
 80058a4:	b2e3      	uxtb	r3, r4
 80058a6:	461a      	mov	r2, r3
 80058a8:	4b65      	ldr	r3, [pc, #404]	; (8005a40 <FUNC_Transmission+0x2510>)
 80058aa:	f883 27c2 	strb.w	r2, [r3, #1986]	; 0x7c2

    /* Logic: '<S139>/Logical Operator1' */
    VCU_B.LogicalOperator1 = ((VCU_B.STW_shift_up_request != 0.0) &&
 80058ae:	4b64      	ldr	r3, [pc, #400]	; (8005a40 <FUNC_Transmission+0x2510>)
 80058b0:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	4610      	mov	r0, r2
 80058ba:	4619      	mov	r1, r3
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	f009 fc70 	bl	800f1a8 <__aeabi_dcmpeq>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <FUNC_Transmission+0x23ac>
      VCU_B.Compare_g5);
 80058ce:	4b5c      	ldr	r3, [pc, #368]	; (8005a40 <FUNC_Transmission+0x2510>)
 80058d0:	f893 37c2 	ldrb.w	r3, [r3, #1986]	; 0x7c2
     *  Constant: '<S185>/Constant'
     */
    VCU_B.Compare_g5 = (VCU_B.DataTypeConversion3 < 3.0);

    /* Logic: '<S139>/Logical Operator1' */
    VCU_B.LogicalOperator1 = ((VCU_B.STW_shift_up_request != 0.0) &&
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <FUNC_Transmission+0x23ac>
 80058d8:	2301      	movs	r3, #1
 80058da:	e000      	b.n	80058de <FUNC_Transmission+0x23ae>
 80058dc:	2300      	movs	r3, #0
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	4b57      	ldr	r3, [pc, #348]	; (8005a40 <FUNC_Transmission+0x2510>)
 80058e2:	f883 27c3 	strb.w	r2, [r3, #1987]	; 0x7c3
      VCU_B.Compare_g5);

    /* DataTypeConversion: '<S139>/Data Type Conversion8' */
    VCU_B.VOVG_ShiftUp_o = VCU_B.LogicalOperator1;
 80058e6:	4b56      	ldr	r3, [pc, #344]	; (8005a40 <FUNC_Transmission+0x2510>)
 80058e8:	f893 37c3 	ldrb.w	r3, [r3, #1987]	; 0x7c3
 80058ec:	4618      	mov	r0, r3
 80058ee:	f009 f97d 	bl	800ebec <__aeabi_ui2d>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4952      	ldr	r1, [pc, #328]	; (8005a40 <FUNC_Transmission+0x2510>)
 80058f8:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160

    /* RelationalOperator: '<S186>/Compare' incorporates:
     *  Constant: '<S186>/Constant'
     */
    VCU_B.Compare_mz = (VCU_B.DataTypeConversion3 >= 0.0);
 80058fc:	4b50      	ldr	r3, [pc, #320]	; (8005a40 <FUNC_Transmission+0x2510>)
 80058fe:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8005902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005906:	2101      	movs	r1, #1
 8005908:	460c      	mov	r4, r1
 800590a:	4610      	mov	r0, r2
 800590c:	4619      	mov	r1, r3
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	f04f 0300 	mov.w	r3, #0
 8005916:	f009 fc65 	bl	800f1e4 <__aeabi_dcmpge>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <FUNC_Transmission+0x23f4>
 8005920:	2300      	movs	r3, #0
 8005922:	461c      	mov	r4, r3
 8005924:	b2e3      	uxtb	r3, r4
 8005926:	461a      	mov	r2, r3
 8005928:	4b45      	ldr	r3, [pc, #276]	; (8005a40 <FUNC_Transmission+0x2510>)
 800592a:	f883 27c4 	strb.w	r2, [r3, #1988]	; 0x7c4

    /* Logic: '<S139>/Logical Operator' */
    VCU_B.LogicalOperator_e = (VCU_B.Compare_mz && (VCU_B.STW_shift_down_request
 800592e:	4b44      	ldr	r3, [pc, #272]	; (8005a40 <FUNC_Transmission+0x2510>)
 8005930:	f893 37c4 	ldrb.w	r3, [r3, #1988]	; 0x7c4
 8005934:	2b00      	cmp	r3, #0
 8005936:	d011      	beq.n	800595c <FUNC_Transmission+0x242c>
 8005938:	4b41      	ldr	r3, [pc, #260]	; (8005a40 <FUNC_Transmission+0x2510>)
 800593a:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	4610      	mov	r0, r2
 8005944:	4619      	mov	r1, r3
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	f009 fc2b 	bl	800f1a8 <__aeabi_dcmpeq>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <FUNC_Transmission+0x242c>
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <FUNC_Transmission+0x242e>
 800595c:	2300      	movs	r3, #0
 800595e:	b2da      	uxtb	r2, r3
 8005960:	4b37      	ldr	r3, [pc, #220]	; (8005a40 <FUNC_Transmission+0x2510>)
 8005962:	f883 27c5 	strb.w	r2, [r3, #1989]	; 0x7c5
      != 0.0));

    /* DataTypeConversion: '<S139>/Data Type Conversion10' */
    VCU_B.VOVG_ShiftDown_f = VCU_B.LogicalOperator_e;
 8005966:	4b36      	ldr	r3, [pc, #216]	; (8005a40 <FUNC_Transmission+0x2510>)
 8005968:	f893 37c5 	ldrb.w	r3, [r3, #1989]	; 0x7c5
 800596c:	4618      	mov	r0, r3
 800596e:	f009 f93d 	bl	800ebec <__aeabi_ui2d>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	4932      	ldr	r1, [pc, #200]	; (8005a40 <FUNC_Transmission+0x2510>)
 8005978:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168

    /* DataTypeConversion: '<S139>/Data Type Conversion11' */
    VCU_B.Ignition_Cut_h = 0.0;
 800597c:	4930      	ldr	r1, [pc, #192]	; (8005a40 <FUNC_Transmission+0x2510>)
 800597e:	f04f 0200 	mov.w	r2, #0
 8005982:	f04f 0300 	mov.w	r3, #0
 8005986:	e9c1 235c 	strd	r2, r3, [r1, #368]	; 0x170

    /* DataTypeConversion: '<S139>/Data Type Conversion16' */
    VCU_B.x_clutch_LC_i = 0.0;
 800598a:	492d      	ldr	r1, [pc, #180]	; (8005a40 <FUNC_Transmission+0x2510>)
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	f04f 0300 	mov.w	r3, #0
 8005994:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178

    /* DataTypeConversion: '<S139>/Data Type Conversion17' */
    VCU_B.LC_Mdes_f = 0.0;
 8005998:	4929      	ldr	r1, [pc, #164]	; (8005a40 <FUNC_Transmission+0x2510>)
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	e9c1 2360 	strd	r2, r3, [r1, #384]	; 0x180

    /* DataTypeConversion: '<S139>/Data Type Conversion18' */
    VCU_B.LC_Fnr_f = 0.0;
 80059a6:	4926      	ldr	r1, [pc, #152]	; (8005a40 <FUNC_Transmission+0x2510>)
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
  }

  /* End of Outputs for SubSystem: '<S7>/driver_jr18' */

  /* MultiPortSwitch: '<S7>/Multiport Switch' */
  switch (VCU_B.DataTypeConversion_cg) {
 80059b4:	4b22      	ldr	r3, [pc, #136]	; (8005a40 <FUNC_Transmission+0x2510>)
 80059b6:	f893 377c 	ldrb.w	r3, [r3, #1916]	; 0x77c
 80059ba:	b25b      	sxtb	r3, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d00a      	beq.n	80059d6 <FUNC_Transmission+0x24a6>
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	d00f      	beq.n	80059e4 <FUNC_Transmission+0x24b4>
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d114      	bne.n	80059f2 <FUNC_Transmission+0x24c2>
   case 1:
    VCU_B.VOVG_ShiftUp = VCU_B.VOVG_ShiftUp_k;
 80059c8:	4b1d      	ldr	r3, [pc, #116]	; (8005a40 <FUNC_Transmission+0x2510>)
 80059ca:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80059ce:	491c      	ldr	r1, [pc, #112]	; (8005a40 <FUNC_Transmission+0x2510>)
 80059d0:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80059d4:	e014      	b.n	8005a00 <FUNC_Transmission+0x24d0>

   case 2:
    VCU_B.VOVG_ShiftUp = VCU_B.VOVG_ShiftUp_o;
 80059d6:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <FUNC_Transmission+0x2510>)
 80059d8:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 80059dc:	4918      	ldr	r1, [pc, #96]	; (8005a40 <FUNC_Transmission+0x2510>)
 80059de:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80059e2:	e00d      	b.n	8005a00 <FUNC_Transmission+0x24d0>

   case 3:
    VCU_B.VOVG_ShiftUp = VCU_B.VOVG_ShiftUp_d;
 80059e4:	4b16      	ldr	r3, [pc, #88]	; (8005a40 <FUNC_Transmission+0x2510>)
 80059e6:	e9d3 2378 	ldrd	r2, r3, [r3, #480]	; 0x1e0
 80059ea:	4915      	ldr	r1, [pc, #84]	; (8005a40 <FUNC_Transmission+0x2510>)
 80059ec:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80059f0:	e006      	b.n	8005a00 <FUNC_Transmission+0x24d0>

   default:
    VCU_B.VOVG_ShiftUp = VCU_B.VOVG_ShiftUp_k;
 80059f2:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <FUNC_Transmission+0x2510>)
 80059f4:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80059f8:	4911      	ldr	r1, [pc, #68]	; (8005a40 <FUNC_Transmission+0x2510>)
 80059fa:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80059fe:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 8005a00:	4b0f      	ldr	r3, [pc, #60]	; (8005a40 <FUNC_Transmission+0x2510>)
 8005a02:	f893 377c 	ldrb.w	r3, [r3, #1916]	; 0x77c
 8005a06:	b25b      	sxtb	r3, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d00a      	beq.n	8005a22 <FUNC_Transmission+0x24f2>
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d00f      	beq.n	8005a30 <FUNC_Transmission+0x2500>
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d11d      	bne.n	8005a50 <FUNC_Transmission+0x2520>
   case 1:
    VCU_B.LC_Fnr = VCU_B.LC_Fnr_l;
 8005a14:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <FUNC_Transmission+0x2510>)
 8005a16:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 8005a1a:	4909      	ldr	r1, [pc, #36]	; (8005a40 <FUNC_Transmission+0x2510>)
 8005a1c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    break;
 8005a20:	e01d      	b.n	8005a5e <FUNC_Transmission+0x252e>

   case 2:
    VCU_B.LC_Fnr = VCU_B.LC_Fnr_f;
 8005a22:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <FUNC_Transmission+0x2510>)
 8005a24:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 8005a28:	4905      	ldr	r1, [pc, #20]	; (8005a40 <FUNC_Transmission+0x2510>)
 8005a2a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    break;
 8005a2e:	e016      	b.n	8005a5e <FUNC_Transmission+0x252e>

   case 3:
    VCU_B.LC_Fnr = VCU_B.LC_Fnr_e;
 8005a30:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <FUNC_Transmission+0x2510>)
 8005a32:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	; 0x290
 8005a36:	4902      	ldr	r1, [pc, #8]	; (8005a40 <FUNC_Transmission+0x2510>)
 8005a38:	e9c1 2302 	strd	r2, r3, [r1, #8]
    break;
 8005a3c:	e00f      	b.n	8005a5e <FUNC_Transmission+0x252e>
 8005a3e:	bf00      	nop
 8005a40:	200008a8 	.word	0x200008a8
 8005a44:	3ff00000 	.word	0x3ff00000
 8005a48:	c0340000 	.word	0xc0340000
 8005a4c:	40080000 	.word	0x40080000

   default:
    VCU_B.LC_Fnr = VCU_B.LC_Fnr_l;
 8005a50:	4b84      	ldr	r3, [pc, #528]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005a52:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 8005a56:	4983      	ldr	r1, [pc, #524]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005a58:	e9c1 2302 	strd	r2, r3, [r1, #8]
    break;
 8005a5c:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 8005a5e:	4b81      	ldr	r3, [pc, #516]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005a60:	f893 377c 	ldrb.w	r3, [r3, #1916]	; 0x77c
 8005a64:	b25b      	sxtb	r3, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d00a      	beq.n	8005a80 <FUNC_Transmission+0x2550>
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d00f      	beq.n	8005a8e <FUNC_Transmission+0x255e>
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d114      	bne.n	8005a9c <FUNC_Transmission+0x256c>
   case 1:
    VCU_B.VOVG_ShiftDown = VCU_B.VOVG_ShiftDown_m;
 8005a72:	4b7c      	ldr	r3, [pc, #496]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005a74:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005a78:	497a      	ldr	r1, [pc, #488]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005a7a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    break;
 8005a7e:	e014      	b.n	8005aaa <FUNC_Transmission+0x257a>

   case 2:
    VCU_B.VOVG_ShiftDown = VCU_B.VOVG_ShiftDown_f;
 8005a80:	4b78      	ldr	r3, [pc, #480]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005a82:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8005a86:	4977      	ldr	r1, [pc, #476]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005a88:	e9c1 2304 	strd	r2, r3, [r1, #16]
    break;
 8005a8c:	e00d      	b.n	8005aaa <FUNC_Transmission+0x257a>

   case 3:
    VCU_B.VOVG_ShiftDown = VCU_B.VOVG_ShiftDown_i;
 8005a8e:	4b75      	ldr	r3, [pc, #468]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005a90:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8005a94:	4973      	ldr	r1, [pc, #460]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005a96:	e9c1 2304 	strd	r2, r3, [r1, #16]
    break;
 8005a9a:	e006      	b.n	8005aaa <FUNC_Transmission+0x257a>

   default:
    VCU_B.VOVG_ShiftDown = VCU_B.VOVG_ShiftDown_m;
 8005a9c:	4b71      	ldr	r3, [pc, #452]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005a9e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005aa2:	4970      	ldr	r1, [pc, #448]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005aa4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    break;
 8005aa8:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 8005aaa:	4b6e      	ldr	r3, [pc, #440]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005aac:	f893 377c 	ldrb.w	r3, [r3, #1916]	; 0x77c
 8005ab0:	b25b      	sxtb	r3, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d00a      	beq.n	8005acc <FUNC_Transmission+0x259c>
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d00f      	beq.n	8005ada <FUNC_Transmission+0x25aa>
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d114      	bne.n	8005ae8 <FUNC_Transmission+0x25b8>
   case 1:
    VCU_B.Ignition_Cut = VCU_B.Ignition_Cut_o;
 8005abe:	4b69      	ldr	r3, [pc, #420]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005ac0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005ac4:	4967      	ldr	r1, [pc, #412]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005ac6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    break;
 8005aca:	e014      	b.n	8005af6 <FUNC_Transmission+0x25c6>

   case 2:
    VCU_B.Ignition_Cut = VCU_B.Ignition_Cut_h;
 8005acc:	4b65      	ldr	r3, [pc, #404]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005ace:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	; 0x170
 8005ad2:	4964      	ldr	r1, [pc, #400]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005ad4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    break;
 8005ad8:	e00d      	b.n	8005af6 <FUNC_Transmission+0x25c6>

   case 3:
    VCU_B.Ignition_Cut = VCU_B.Ignition_Cut_g;
 8005ada:	4b62      	ldr	r3, [pc, #392]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005adc:	e9d3 2374 	ldrd	r2, r3, [r3, #464]	; 0x1d0
 8005ae0:	4960      	ldr	r1, [pc, #384]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005ae2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    break;
 8005ae6:	e006      	b.n	8005af6 <FUNC_Transmission+0x25c6>

   default:
    VCU_B.Ignition_Cut = VCU_B.Ignition_Cut_o;
 8005ae8:	4b5e      	ldr	r3, [pc, #376]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005aea:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005aee:	495d      	ldr	r1, [pc, #372]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005af0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    break;
 8005af4:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 8005af6:	4b5b      	ldr	r3, [pc, #364]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005af8:	f893 377c 	ldrb.w	r3, [r3, #1916]	; 0x77c
 8005afc:	b25b      	sxtb	r3, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d00a      	beq.n	8005b18 <FUNC_Transmission+0x25e8>
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d00f      	beq.n	8005b26 <FUNC_Transmission+0x25f6>
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d114      	bne.n	8005b34 <FUNC_Transmission+0x2604>
   case 1:
    VCU_B.VOVG_IN = VCU_B.VOVG_IN_h;
 8005b0a:	4b56      	ldr	r3, [pc, #344]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b0c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8005b10:	4954      	ldr	r1, [pc, #336]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b12:	e9c1 2308 	strd	r2, r3, [r1, #32]
    break;
 8005b16:	e014      	b.n	8005b42 <FUNC_Transmission+0x2612>

   case 2:
    VCU_B.VOVG_IN = VCU_B.VOVG_IN_c;
 8005b18:	4b52      	ldr	r3, [pc, #328]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b1a:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	; 0x110
 8005b1e:	4951      	ldr	r1, [pc, #324]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b20:	e9c1 2308 	strd	r2, r3, [r1, #32]
    break;
 8005b24:	e00d      	b.n	8005b42 <FUNC_Transmission+0x2612>

   case 3:
    VCU_B.VOVG_IN = VCU_B.VOVG_IN_b;
 8005b26:	4b4f      	ldr	r3, [pc, #316]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b28:	e9d3 238e 	ldrd	r2, r3, [r3, #568]	; 0x238
 8005b2c:	494d      	ldr	r1, [pc, #308]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b2e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    break;
 8005b32:	e006      	b.n	8005b42 <FUNC_Transmission+0x2612>

   default:
    VCU_B.VOVG_IN = VCU_B.VOVG_IN_h;
 8005b34:	4b4b      	ldr	r3, [pc, #300]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b36:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8005b3a:	494a      	ldr	r1, [pc, #296]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b3c:	e9c1 2308 	strd	r2, r3, [r1, #32]
    break;
 8005b40:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 8005b42:	4b48      	ldr	r3, [pc, #288]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b44:	f893 377c 	ldrb.w	r3, [r3, #1916]	; 0x77c
 8005b48:	b25b      	sxtb	r3, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d00a      	beq.n	8005b64 <FUNC_Transmission+0x2634>
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d00f      	beq.n	8005b72 <FUNC_Transmission+0x2642>
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d114      	bne.n	8005b80 <FUNC_Transmission+0x2650>
   case 1:
    VCU_B.VOVG_OUT = VCU_B.VOVG_OUT_j;
 8005b56:	4b43      	ldr	r3, [pc, #268]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b58:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8005b5c:	4941      	ldr	r1, [pc, #260]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b5e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    break;
 8005b62:	e014      	b.n	8005b8e <FUNC_Transmission+0x265e>

   case 2:
    VCU_B.VOVG_OUT = VCU_B.VOVG_OUT_o;
 8005b64:	4b3f      	ldr	r3, [pc, #252]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b66:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
 8005b6a:	493e      	ldr	r1, [pc, #248]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b6c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    break;
 8005b70:	e00d      	b.n	8005b8e <FUNC_Transmission+0x265e>

   case 3:
    VCU_B.VOVG_OUT = VCU_B.VOVG_OUT_i;
 8005b72:	4b3c      	ldr	r3, [pc, #240]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b74:	e9d3 23a0 	ldrd	r2, r3, [r3, #640]	; 0x280
 8005b78:	493a      	ldr	r1, [pc, #232]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b7a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    break;
 8005b7e:	e006      	b.n	8005b8e <FUNC_Transmission+0x265e>

   default:
    VCU_B.VOVG_OUT = VCU_B.VOVG_OUT_j;
 8005b80:	4b38      	ldr	r3, [pc, #224]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b82:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8005b86:	4937      	ldr	r1, [pc, #220]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b88:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    break;
 8005b8c:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 8005b8e:	4b35      	ldr	r3, [pc, #212]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005b90:	f893 377c 	ldrb.w	r3, [r3, #1916]	; 0x77c
 8005b94:	b25b      	sxtb	r3, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d00a      	beq.n	8005bb0 <FUNC_Transmission+0x2680>
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d00f      	beq.n	8005bbe <FUNC_Transmission+0x268e>
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d114      	bne.n	8005bcc <FUNC_Transmission+0x269c>
   case 1:
    VCU_B.MHJ9_IN = VCU_B.MHJ9_IN_e;
 8005ba2:	4b30      	ldr	r3, [pc, #192]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005ba4:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 8005ba8:	492e      	ldr	r1, [pc, #184]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005baa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    break;
 8005bae:	e014      	b.n	8005bda <FUNC_Transmission+0x26aa>

   case 2:
    VCU_B.MHJ9_IN = VCU_B.MHJ9_IN_p;
 8005bb0:	4b2c      	ldr	r3, [pc, #176]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005bb2:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8005bb6:	492b      	ldr	r1, [pc, #172]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005bb8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    break;
 8005bbc:	e00d      	b.n	8005bda <FUNC_Transmission+0x26aa>

   case 3:
    VCU_B.MHJ9_IN = VCU_B.MHJ9_IN_m;
 8005bbe:	4b29      	ldr	r3, [pc, #164]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005bc0:	e9d3 239e 	ldrd	r2, r3, [r3, #632]	; 0x278
 8005bc4:	4927      	ldr	r1, [pc, #156]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005bc6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    break;
 8005bca:	e006      	b.n	8005bda <FUNC_Transmission+0x26aa>

   default:
    VCU_B.MHJ9_IN = VCU_B.MHJ9_IN_e;
 8005bcc:	4b25      	ldr	r3, [pc, #148]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005bce:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 8005bd2:	4924      	ldr	r1, [pc, #144]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005bd4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    break;
 8005bd8:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 8005bda:	4b22      	ldr	r3, [pc, #136]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005bdc:	f893 377c 	ldrb.w	r3, [r3, #1916]	; 0x77c
 8005be0:	b25b      	sxtb	r3, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d00a      	beq.n	8005bfc <FUNC_Transmission+0x26cc>
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d00f      	beq.n	8005c0a <FUNC_Transmission+0x26da>
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d114      	bne.n	8005c18 <FUNC_Transmission+0x26e8>
   case 1:
    VCU_B.MHJ9_OUT = VCU_B.MHJ9_OUT_d;
 8005bee:	4b1d      	ldr	r3, [pc, #116]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005bf0:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8005bf4:	491b      	ldr	r1, [pc, #108]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005bf6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    break;
 8005bfa:	e014      	b.n	8005c26 <FUNC_Transmission+0x26f6>

   case 2:
    VCU_B.MHJ9_OUT = VCU_B.MHJ9_OUT_k;
 8005bfc:	4b19      	ldr	r3, [pc, #100]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005bfe:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 8005c02:	4918      	ldr	r1, [pc, #96]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005c04:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    break;
 8005c08:	e00d      	b.n	8005c26 <FUNC_Transmission+0x26f6>

   case 3:
    VCU_B.MHJ9_OUT = VCU_B.MHJ9_OUT_p;
 8005c0a:	4b16      	ldr	r3, [pc, #88]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005c0c:	e9d3 239a 	ldrd	r2, r3, [r3, #616]	; 0x268
 8005c10:	4914      	ldr	r1, [pc, #80]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005c12:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    break;
 8005c16:	e006      	b.n	8005c26 <FUNC_Transmission+0x26f6>

   default:
    VCU_B.MHJ9_OUT = VCU_B.MHJ9_OUT_d;
 8005c18:	4b12      	ldr	r3, [pc, #72]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005c1a:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8005c1e:	4911      	ldr	r1, [pc, #68]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005c20:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    break;
 8005c24:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 8005c26:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005c28:	f893 377c 	ldrb.w	r3, [r3, #1916]	; 0x77c
 8005c2c:	b25b      	sxtb	r3, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d00a      	beq.n	8005c48 <FUNC_Transmission+0x2718>
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	d00f      	beq.n	8005c56 <FUNC_Transmission+0x2726>
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d116      	bne.n	8005c68 <FUNC_Transmission+0x2738>
   case 1:
    VCU_B.x_clutch_LC = VCU_B.x_clutch_LC_b;
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005c3c:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 8005c40:	4908      	ldr	r1, [pc, #32]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005c42:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    break;
 8005c46:	e016      	b.n	8005c76 <FUNC_Transmission+0x2746>

   case 2:
    VCU_B.x_clutch_LC = VCU_B.x_clutch_LC_i;
 8005c48:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005c4a:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 8005c4e:	4905      	ldr	r1, [pc, #20]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005c50:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    break;
 8005c54:	e00f      	b.n	8005c76 <FUNC_Transmission+0x2746>

   case 3:
    VCU_B.x_clutch_LC = VCU_B.x_clutch_LC_n;
 8005c56:	4b03      	ldr	r3, [pc, #12]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005c58:	e9d3 23a2 	ldrd	r2, r3, [r3, #648]	; 0x288
 8005c5c:	4901      	ldr	r1, [pc, #4]	; (8005c64 <FUNC_Transmission+0x2734>)
 8005c5e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    break;
 8005c62:	e008      	b.n	8005c76 <FUNC_Transmission+0x2746>
 8005c64:	200008a8 	.word	0x200008a8

   default:
    VCU_B.x_clutch_LC = VCU_B.x_clutch_LC_b;
 8005c68:	4b26      	ldr	r3, [pc, #152]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005c6a:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 8005c6e:	4925      	ldr	r1, [pc, #148]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005c70:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    break;
 8005c74:	bf00      	nop
  }

  switch (VCU_B.DataTypeConversion_cg) {
 8005c76:	4b23      	ldr	r3, [pc, #140]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005c78:	f893 377c 	ldrb.w	r3, [r3, #1916]	; 0x77c
 8005c7c:	b25b      	sxtb	r3, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d00a      	beq.n	8005c98 <FUNC_Transmission+0x2768>
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d00f      	beq.n	8005ca6 <FUNC_Transmission+0x2776>
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d114      	bne.n	8005cb4 <FUNC_Transmission+0x2784>
   case 1:
    VCU_B.LC_Mdes = VCU_B.LC_Mdes_b;
 8005c8a:	4b1e      	ldr	r3, [pc, #120]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005c8c:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8005c90:	491c      	ldr	r1, [pc, #112]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005c92:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    break;
 8005c96:	e014      	b.n	8005cc2 <FUNC_Transmission+0x2792>

   case 2:
    VCU_B.LC_Mdes = VCU_B.LC_Mdes_f;
 8005c98:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005c9a:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 8005c9e:	4919      	ldr	r1, [pc, #100]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005ca0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    break;
 8005ca4:	e00d      	b.n	8005cc2 <FUNC_Transmission+0x2792>

   case 3:
    VCU_B.LC_Mdes = VCU_B.LC_Mdes_bl;
 8005ca6:	4b17      	ldr	r3, [pc, #92]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005ca8:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	; 0x1d8
 8005cac:	4915      	ldr	r1, [pc, #84]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005cae:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    break;
 8005cb2:	e006      	b.n	8005cc2 <FUNC_Transmission+0x2792>

   default:
    VCU_B.LC_Mdes = VCU_B.LC_Mdes_b;
 8005cb4:	4b13      	ldr	r3, [pc, #76]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005cb6:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8005cba:	4912      	ldr	r1, [pc, #72]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005cbc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    break;
 8005cc0:	bf00      	nop
  }

  /* End of MultiPortSwitch: '<S7>/Multiport Switch' */

  /* MultiPortSwitch: '<S7>/Multiport Switch1' */
  if (VCU_B.DataTypeConversion_cg == 1) {
 8005cc2:	4b10      	ldr	r3, [pc, #64]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005cc4:	f893 377c 	ldrb.w	r3, [r3, #1916]	; 0x77c
 8005cc8:	b25b      	sxtb	r3, r3
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d10c      	bne.n	8005ce8 <FUNC_Transmission+0x27b8>
    VCU_B.LC_active_bit = VCU_B.LogicalOperator_a;
 8005cce:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005cd0:	f893 2801 	ldrb.w	r2, [r3, #2049]	; 0x801
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005cd6:	f883 2782 	strb.w	r2, [r3, #1922]	; 0x782
    VCU_B.LC_ready_bit = VCU_B.RelationalOperator_l;
 8005cda:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005cdc:	f893 2802 	ldrb.w	r2, [r3, #2050]	; 0x802
 8005ce0:	4b08      	ldr	r3, [pc, #32]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005ce2:	f883 2783 	strb.w	r2, [r3, #1923]	; 0x783
 8005ce6:	e009      	b.n	8005cfc <FUNC_Transmission+0x27cc>
  } else {
    VCU_B.LC_active_bit = VCU_ConstB.LC_active_bit;
 8005ce8:	4b07      	ldr	r3, [pc, #28]	; (8005d08 <FUNC_Transmission+0x27d8>)
 8005cea:	7c9a      	ldrb	r2, [r3, #18]
 8005cec:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005cee:	f883 2782 	strb.w	r2, [r3, #1922]	; 0x782
    VCU_B.LC_ready_bit = VCU_ConstB.LC_ready_bit;
 8005cf2:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <FUNC_Transmission+0x27d8>)
 8005cf4:	7cda      	ldrb	r2, [r3, #19]
 8005cf6:	4b03      	ldr	r3, [pc, #12]	; (8005d04 <FUNC_Transmission+0x27d4>)
 8005cf8:	f883 2783 	strb.w	r2, [r3, #1923]	; 0x783
  }

  /* End of MultiPortSwitch: '<S7>/Multiport Switch1' */
}
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d02:	bf00      	nop
 8005d04:	200008a8 	.word	0x200008a8
 8005d08:	0800f440 	.word	0x0800f440
 8005d0c:	f3af 8000 	nop.w

08005d10 <look1_binlxpw>:
/* Real-time model */
RT_MODEL_VCU_T VCU_M_;
RT_MODEL_VCU_T *const VCU_M = &VCU_M_;
real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 8005d10:	b5b0      	push	{r4, r5, r7, lr}
 8005d12:	b08a      	sub	sp, #40	; 0x28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	4610      	mov	r0, r2
 8005d26:	4619      	mov	r1, r3
 8005d28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d2c:	f009 fa5a 	bl	800f1e4 <__aeabi_dcmpge>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d020      	beq.n	8005d78 <look1_binlxpw+0x68>
    iLeft = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d44:	f008 fe14 	bl	800e970 <__aeabi_dsub>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4614      	mov	r4, r2
 8005d4e:	461d      	mov	r5, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3308      	adds	r3, #8
 8005d54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	f008 fe07 	bl	800e970 <__aeabi_dsub>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4620      	mov	r0, r4
 8005d68:	4629      	mov	r1, r5
 8005d6a:	f009 f8df 	bl	800ef2c <__aeabi_ddiv>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005d76:	e08b      	b.n	8005e90 <look1_binlxpw+0x180>
  } else if (u0 < bp0[maxIndex]) {
 8005d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	4413      	add	r3, r2
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	4610      	mov	r0, r2
 8005d86:	4619      	mov	r1, r3
 8005d88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d8c:	f009 fa34 	bl	800f1f8 <__aeabi_dcmpgt>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d04d      	beq.n	8005e32 <look1_binlxpw+0x122>
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	085b      	lsrs	r3, r3, #1
 8005d9a:	617b      	str	r3, [r7, #20]
    iLeft = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
    iRght = maxIndex;
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 8005da4:	e018      	b.n	8005dd8 <look1_binlxpw+0xc8>
      if (u0 < bp0[bpIdx]) {
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	4413      	add	r3, r2
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	4610      	mov	r0, r2
 8005db4:	4619      	mov	r1, r3
 8005db6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dba:	f009 fa1d 	bl	800f1f8 <__aeabi_dcmpgt>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <look1_binlxpw+0xba>
        iRght = bpIdx;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	e001      	b.n	8005dce <look1_binlxpw+0xbe>
      } else {
        iLeft = bpIdx;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	61bb      	str	r3, [r7, #24]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	085b      	lsrs	r3, r3, #1
 8005dd6:	617b      	str	r3, [r7, #20]
  } else if (u0 < bp0[maxIndex]) {
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
    iLeft = 0U;
    iRght = maxIndex;
    while (iRght - iLeft > 1U) {
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d8e1      	bhi.n	8005da6 <look1_binlxpw+0x96>
      }

      bpIdx = (iRght + iLeft) >> 1U;
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	4413      	add	r3, r2
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005df2:	f008 fdbd 	bl	800e970 <__aeabi_dsub>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4614      	mov	r4, r2
 8005dfc:	461d      	mov	r5, r3
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	3301      	adds	r3, #1
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	4413      	add	r3, r2
 8005e08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	4413      	add	r3, r2
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	f008 fdaa 	bl	800e970 <__aeabi_dsub>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4620      	mov	r0, r4
 8005e22:	4629      	mov	r1, r5
 8005e24:	f009 f882 	bl	800ef2c <__aeabi_ddiv>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005e30:	e02e      	b.n	8005e90 <look1_binlxpw+0x180>
  } else {
    iLeft = maxIndex - 1U;
 8005e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e34:	3b01      	subs	r3, #1
 8005e36:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8005e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	4413      	add	r3, r2
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e4e:	f008 fd8f 	bl	800e970 <__aeabi_dsub>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4614      	mov	r4, r2
 8005e58:	461d      	mov	r5, r3
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	4413      	add	r3, r2
 8005e62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e68:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	4413      	add	r3, r2
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	f008 fd7a 	bl	800e970 <__aeabi_dsub>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4620      	mov	r0, r4
 8005e82:	4629      	mov	r1, r5
 8005e84:	f009 f852 	bl	800ef2c <__aeabi_ddiv>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	3301      	adds	r3, #1
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	4413      	add	r3, r2
 8005e9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eaa:	f008 fd61 	bl	800e970 <__aeabi_dsub>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005eba:	f008 ff0d 	bl	800ecd8 <__aeabi_dmul>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	4413      	add	r3, r2
 8005ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed2:	f008 fd4f 	bl	800e974 <__adddf3>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
}
 8005eda:	4610      	mov	r0, r2
 8005edc:	4619      	mov	r1, r3
 8005ede:	3728      	adds	r7, #40	; 0x28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bdb0      	pop	{r4, r5, r7, pc}

08005ee4 <look2_binlxpw>:

real_T look2_binlxpw(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[],
                     const real_T table[], const uint32_T maxIndex[], uint32_T
                     stride)
{
 8005ee4:	b5b0      	push	{r4, r5, r7, lr}
 8005ee6:	b092      	sub	sp, #72	; 0x48
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005eee:	e9c7 2300 	strd	r2, r3, [r7]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8005ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	4610      	mov	r0, r2
 8005efa:	4619      	mov	r1, r3
 8005efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f00:	f009 f970 	bl	800f1e4 <__aeabi_dcmpge>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d020      	beq.n	8005f4c <look2_binlxpw+0x68>
    iLeft = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8005f0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f18:	f008 fd2a 	bl	800e970 <__aeabi_dsub>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4614      	mov	r4, r2
 8005f22:	461d      	mov	r5, r3
 8005f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f26:	3308      	adds	r3, #8
 8005f28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f32:	f008 fd1d 	bl	800e970 <__aeabi_dsub>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	f008 fff5 	bl	800ef2c <__aeabi_ddiv>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8005f4a:	e092      	b.n	8006072 <look2_binlxpw+0x18e>
  } else if (u0 < bp0[maxIndex[0U]]) {
 8005f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f54:	4413      	add	r3, r2
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f62:	f009 f949 	bl	800f1f8 <__aeabi_dcmpgt>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d04f      	beq.n	800600c <look2_binlxpw+0x128>
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
 8005f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	085b      	lsrs	r3, r3, #1
 8005f72:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[0U];
 8005f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 8005f7e:	e018      	b.n	8005fb2 <look2_binlxpw+0xce>
      if (u0 < bp0[bpIdx]) {
 8005f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f86:	4413      	add	r3, r2
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	4619      	mov	r1, r3
 8005f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f94:	f009 f930 	bl	800f1f8 <__aeabi_dcmpgt>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <look2_binlxpw+0xc0>
        iRght = bpIdx;
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa2:	e001      	b.n	8005fa8 <look2_binlxpw+0xc4>
      } else {
        iLeft = bpIdx;
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8005fa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fac:	4413      	add	r3, r2
 8005fae:	085b      	lsrs	r3, r3, #1
 8005fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  } else if (u0 < bp0[maxIndex[0U]]) {
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
    iLeft = 0U;
    iRght = maxIndex[0U];
    while (iRght - iLeft > 1U) {
 8005fb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d8e1      	bhi.n	8005f80 <look2_binlxpw+0x9c>
      }

      bpIdx = (iRght + iLeft) >> 1U;
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8005fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fc2:	4413      	add	r3, r2
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005fcc:	f008 fcd0 	bl	800e970 <__aeabi_dsub>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4614      	mov	r4, r2
 8005fd6:	461d      	mov	r5, r3
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fda:	3301      	adds	r3, #1
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fe0:	4413      	add	r3, r2
 8005fe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fec:	4413      	add	r3, r2
 8005fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff2:	f008 fcbd 	bl	800e970 <__aeabi_dsub>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	f008 ff95 	bl	800ef2c <__aeabi_ddiv>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800600a:	e032      	b.n	8006072 <look2_binlxpw+0x18e>
  } else {
    iLeft = maxIndex[0U] - 1U;
 800600c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3b01      	subs	r3, #1
 8006012:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U]
 8006014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800601c:	3b01      	subs	r3, #1
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006022:	4413      	add	r3, r2
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800602c:	f008 fca0 	bl	800e970 <__aeabi_dsub>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4614      	mov	r4, r2
 8006036:	461d      	mov	r5, r3
 8006038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006040:	4413      	add	r3, r2
 8006042:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800604e:	3b01      	subs	r3, #1
 8006050:	00db      	lsls	r3, r3, #3
 8006052:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006054:	4413      	add	r3, r2
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f008 fc89 	bl	800e970 <__aeabi_dsub>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4620      	mov	r0, r4
 8006064:	4629      	mov	r1, r5
 8006066:	f008 ff61 	bl	800ef2c <__aeabi_ddiv>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      - 1U]);
  }

  fractions[0U] = frac;
 8006072:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006076:	e9c7 2304 	strd	r2, r3, [r7, #16]
  bpIndices[0U] = iLeft;
 800607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607c:	623b      	str	r3, [r7, #32]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u1 <= bp1[0U]) {
 800607e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	4610      	mov	r0, r2
 8006086:	4619      	mov	r1, r3
 8006088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800608c:	f009 f8aa 	bl	800f1e4 <__aeabi_dcmpge>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d020      	beq.n	80060d8 <look2_binlxpw+0x1f4>
    iLeft = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 800609a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060a4:	f008 fc64 	bl	800e970 <__aeabi_dsub>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4614      	mov	r4, r2
 80060ae:	461d      	mov	r5, r3
 80060b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060b2:	3308      	adds	r3, #8
 80060b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060be:	f008 fc57 	bl	800e970 <__aeabi_dsub>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	4620      	mov	r0, r4
 80060c8:	4629      	mov	r1, r5
 80060ca:	f008 ff2f 	bl	800ef2c <__aeabi_ddiv>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80060d6:	e098      	b.n	800620a <look2_binlxpw+0x326>
  } else if (u1 < bp1[maxIndex[1U]]) {
 80060d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060da:	3304      	adds	r3, #4
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060e2:	4413      	add	r3, r2
 80060e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e8:	4610      	mov	r0, r2
 80060ea:	4619      	mov	r1, r3
 80060ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060f0:	f009 f882 	bl	800f1f8 <__aeabi_dcmpgt>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d050      	beq.n	800619c <look2_binlxpw+0x2b8>
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
 80060fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060fc:	3304      	adds	r3, #4
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	085b      	lsrs	r3, r3, #1
 8006102:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[1U];
 8006108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 800610e:	e018      	b.n	8006142 <look2_binlxpw+0x25e>
      if (u1 < bp1[bpIdx]) {
 8006110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006116:	4413      	add	r3, r2
 8006118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611c:	4610      	mov	r0, r2
 800611e:	4619      	mov	r1, r3
 8006120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006124:	f009 f868 	bl	800f1f8 <__aeabi_dcmpgt>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <look2_binlxpw+0x250>
        iRght = bpIdx;
 800612e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006132:	e001      	b.n	8006138 <look2_binlxpw+0x254>
      } else {
        iLeft = bpIdx;
 8006134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006136:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8006138:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800613a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613c:	4413      	add	r3, r2
 800613e:	085b      	lsrs	r3, r3, #1
 8006140:	63bb      	str	r3, [r7, #56]	; 0x38
  } else if (u1 < bp1[maxIndex[1U]]) {
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
    iLeft = 0U;
    iRght = maxIndex[1U];
    while (iRght - iLeft > 1U) {
 8006142:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b01      	cmp	r3, #1
 800614a:	d8e1      	bhi.n	8006110 <look2_binlxpw+0x22c>
      }

      bpIdx = (iRght + iLeft) >> 1U;
    }

    frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 800614c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006152:	4413      	add	r3, r2
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	e9d7 0100 	ldrd	r0, r1, [r7]
 800615c:	f008 fc08 	bl	800e970 <__aeabi_dsub>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4614      	mov	r4, r2
 8006166:	461d      	mov	r5, r3
 8006168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616a:	3301      	adds	r3, #1
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006170:	4413      	add	r3, r2
 8006172:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800617c:	4413      	add	r3, r2
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	f008 fbf5 	bl	800e970 <__aeabi_dsub>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	4620      	mov	r0, r4
 800618c:	4629      	mov	r1, r5
 800618e:	f008 fecd 	bl	800ef2c <__aeabi_ddiv>
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800619a:	e036      	b.n	800620a <look2_binlxpw+0x326>
  } else {
    iLeft = maxIndex[1U] - 1U;
 800619c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800619e:	3304      	adds	r3, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U]
 80061a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a8:	3304      	adds	r3, #4
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80061b0:	3b01      	subs	r3, #1
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061b6:	4413      	add	r3, r2
 80061b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061c0:	f008 fbd6 	bl	800e970 <__aeabi_dsub>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4614      	mov	r4, r2
 80061ca:	461d      	mov	r5, r3
 80061cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ce:	3304      	adds	r3, #4
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061d6:	4413      	add	r3, r2
 80061d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061de:	3304      	adds	r3, #4
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80061e6:	3b01      	subs	r3, #1
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061ec:	4413      	add	r3, r2
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	f008 fbbd 	bl	800e970 <__aeabi_dsub>
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	4620      	mov	r0, r4
 80061fc:	4629      	mov	r1, r5
 80061fe:	f008 fe95 	bl	800ef2c <__aeabi_ddiv>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  /* Interpolation 2-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
 800620a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800620e:	fb02 f203 	mul.w	r2, r2, r3
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	4413      	add	r3, r2
 8006216:	63bb      	str	r3, [r7, #56]	; 0x38
  yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
 8006218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621a:	3301      	adds	r3, #1
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006220:	4413      	add	r3, r2
 8006222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800622c:	4413      	add	r3, r2
 800622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006232:	f008 fb9d 	bl	800e970 <__aeabi_dsub>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	4610      	mov	r0, r2
 800623c:	4619      	mov	r1, r3
 800623e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006242:	f008 fd49 	bl	800ecd8 <__aeabi_dmul>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4610      	mov	r0, r2
 800624c:	4619      	mov	r1, r3
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006254:	4413      	add	r3, r2
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	f008 fb8b 	bl	800e974 <__adddf3>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  bpIdx += stride;
 8006266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800626a:	4413      	add	r3, r2
 800626c:	63bb      	str	r3, [r7, #56]	; 0x38
  return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) -
 800626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006270:	3301      	adds	r3, #1
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006276:	4413      	add	r3, r2
 8006278:	e9d3 0100 	ldrd	r0, r1, [r3]
 800627c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006282:	4413      	add	r3, r2
 8006284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006288:	f008 fb72 	bl	800e970 <__aeabi_dsub>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4610      	mov	r0, r2
 8006292:	4619      	mov	r1, r3
 8006294:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006298:	f008 fd1e 	bl	800ecd8 <__aeabi_dmul>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4610      	mov	r0, r2
 80062a2:	4619      	mov	r1, r3
 80062a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062aa:	4413      	add	r3, r2
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f008 fb60 	bl	800e974 <__adddf3>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4610      	mov	r0, r2
 80062ba:	4619      	mov	r1, r3
 80062bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062c0:	f008 fb56 	bl	800e970 <__aeabi_dsub>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
          yL_1d) * frac + yL_1d;
 80062c8:	4610      	mov	r0, r2
 80062ca:	4619      	mov	r1, r3
 80062cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062d0:	f008 fd02 	bl	800ecd8 <__aeabi_dmul>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
     Overflow mode: 'portable wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
  yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
  bpIdx += stride;
  return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) -
 80062d8:	4610      	mov	r0, r2
 80062da:	4619      	mov	r1, r3
 80062dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062e0:	f008 fb48 	bl	800e974 <__adddf3>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
          yL_1d) * frac + yL_1d;
}
 80062e8:	4610      	mov	r0, r2
 80062ea:	4619      	mov	r1, r3
 80062ec:	3748      	adds	r7, #72	; 0x48
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bdb0      	pop	{r4, r5, r7, pc}
 80062f2:	bf00      	nop

080062f4 <VCU_initialize>:
  /* End of Outputs for SubSystem: '<Root>/Output Data' */
}

/* Model initialize function */
void VCU_initialize(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 80062f8:	2008      	movs	r0, #8
 80062fa:	f000 f8c5 	bl	8006488 <rt_InitInfAndNaN>

  /* initialize error status */
  rtmSetErrorStatus(VCU_M, (NULL));
 80062fe:	4b09      	ldr	r3, [pc, #36]	; (8006324 <VCU_initialize+0x30>)
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]

  /* block I/O */
  (void) memset(((void *) &VCU_B), 0,
 8006304:	4808      	ldr	r0, [pc, #32]	; (8006328 <VCU_initialize+0x34>)
 8006306:	2100      	movs	r1, #0
 8006308:	f640 0218 	movw	r2, #2072	; 0x818
 800630c:	f008 ffe5 	bl	800f2da <memset>
                sizeof(B_VCU_T));

  /* states (dwork) */
  (void) memset((void *)&VCU_DW, 0,
 8006310:	4806      	ldr	r0, [pc, #24]	; (800632c <VCU_initialize+0x38>)
 8006312:	2100      	movs	r1, #0
 8006314:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8006318:	f008 ffdf 	bl	800f2da <memset>
                sizeof(DW_VCU_T));

  /* SystemInitialize for Atomic SubSystem: '<Root>/Transmission' */
  FUNC_Transmission_Init();
 800631c:	f7fd f8dc 	bl	80034d8 <FUNC_Transmission_Init>

  /* End of SystemInitialize for SubSystem: '<Root>/Transmission' */
}
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	200010c0 	.word	0x200010c0
 8006328:	200008a8 	.word	0x200008a8
 800632c:	200010c8 	.word	0x200010c8

08006330 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8006336:	2340      	movs	r3, #64	; 0x40
 8006338:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 800633a:	f04f 0200 	mov.w	r2, #0
 800633e:	f04f 0300 	mov.w	r3, #0
 8006342:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b20      	cmp	r3, #32
 800634a:	d10a      	bne.n	8006362 <rtGetInf+0x32>
    inf = rtGetInfF();
 800634c:	f000 f81a 	bl	8006384 <rtGetInfF>
 8006350:	4603      	mov	r3, r0
 8006352:	4618      	mov	r0, r3
 8006354:	f008 fc6c 	bl	800ec30 <__aeabi_f2d>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8006360:	e007      	b.n	8006372 <rtGetInf+0x42>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8006362:	4b07      	ldr	r3, [pc, #28]	; (8006380 <rtGetInf+0x50>)
 8006364:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8006366:	2300      	movs	r3, #0
 8006368:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 800636a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800636e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 8006372:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8006376:	4610      	mov	r0, r2
 8006378:	4619      	mov	r1, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	7ff00000 	.word	0x7ff00000

08006384 <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800638a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800638e:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8006390:	687b      	ldr	r3, [r7, #4]
}
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop

080063a0 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80063a6:	2340      	movs	r3, #64	; 0x40
 80063a8:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 80063aa:	f04f 0200 	mov.w	r2, #0
 80063ae:	f04f 0300 	mov.w	r3, #0
 80063b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d10a      	bne.n	80063d2 <rtGetMinusInf+0x32>
    minf = rtGetMinusInfF();
 80063bc:	f000 f81a 	bl	80063f4 <rtGetMinusInfF>
 80063c0:	4603      	mov	r3, r0
 80063c2:	4618      	mov	r0, r3
 80063c4:	f008 fc34 	bl	800ec30 <__aeabi_f2d>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80063d0:	e007      	b.n	80063e2 <rtGetMinusInf+0x42>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 80063d2:	4b07      	ldr	r3, [pc, #28]	; (80063f0 <rtGetMinusInf+0x50>)
 80063d4:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 80063da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063de:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 80063e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80063e6:	4610      	mov	r0, r2
 80063e8:	4619      	mov	r1, r3
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	fff00000 	.word	0xfff00000

080063f4 <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 80063fa:	4b04      	ldr	r3, [pc, #16]	; (800640c <rtGetMinusInfF+0x18>)
 80063fc:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 80063fe:	687b      	ldr	r3, [r7, #4]
}
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	ff800000 	.word	0xff800000

08006410 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8006416:	2340      	movs	r3, #64	; 0x40
 8006418:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 800641a:	f04f 0200 	mov.w	r2, #0
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b20      	cmp	r3, #32
 800642a:	d10a      	bne.n	8006442 <rtGetNaN+0x32>
    nan = rtGetNaNF();
 800642c:	f000 f81a 	bl	8006464 <rtGetNaNF>
 8006430:	4603      	mov	r3, r0
 8006432:	4618      	mov	r0, r3
 8006434:	f008 fbfc 	bl	800ec30 <__aeabi_f2d>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8006440:	e007      	b.n	8006452 <rtGetNaN+0x42>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 8006442:	4b07      	ldr	r3, [pc, #28]	; (8006460 <rtGetNaN+0x50>)
 8006444:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8006446:	2300      	movs	r3, #0
 8006448:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 800644a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800644e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 8006452:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8006456:	4610      	mov	r0, r2
 8006458:	4619      	mov	r1, r3
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	fff80000 	.word	0xfff80000

08006464 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 800646a:	f04f 0300 	mov.w	r3, #0
 800646e:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 8006470:	4b04      	ldr	r3, [pc, #16]	; (8006484 <rtGetNaNF+0x20>)
 8006472:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 8006474:	687b      	ldr	r3, [r7, #4]
}
 8006476:	4618      	mov	r0, r3
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	ffc00000 	.word	0xffc00000

08006488 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8006490:	f7ff ffbe 	bl	8006410 <rtGetNaN>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4911      	ldr	r1, [pc, #68]	; (80064e0 <rt_InitInfAndNaN+0x58>)
 800649a:	e9c1 2300 	strd	r2, r3, [r1]
  rtNaNF = rtGetNaNF();
 800649e:	f7ff ffe1 	bl	8006464 <rtGetNaNF>
 80064a2:	4602      	mov	r2, r0
 80064a4:	4b0f      	ldr	r3, [pc, #60]	; (80064e4 <rt_InitInfAndNaN+0x5c>)
 80064a6:	601a      	str	r2, [r3, #0]
  rtInf = rtGetInf();
 80064a8:	f7ff ff42 	bl	8006330 <rtGetInf>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	490d      	ldr	r1, [pc, #52]	; (80064e8 <rt_InitInfAndNaN+0x60>)
 80064b2:	e9c1 2300 	strd	r2, r3, [r1]
  rtInfF = rtGetInfF();
 80064b6:	f7ff ff65 	bl	8006384 <rtGetInfF>
 80064ba:	4602      	mov	r2, r0
 80064bc:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <rt_InitInfAndNaN+0x64>)
 80064be:	601a      	str	r2, [r3, #0]
  rtMinusInf = rtGetMinusInf();
 80064c0:	f7ff ff6e 	bl	80063a0 <rtGetMinusInf>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4909      	ldr	r1, [pc, #36]	; (80064f0 <rt_InitInfAndNaN+0x68>)
 80064ca:	e9c1 2300 	strd	r2, r3, [r1]
  rtMinusInfF = rtGetMinusInfF();
 80064ce:	f7ff ff91 	bl	80063f4 <rtGetMinusInfF>
 80064d2:	4602      	mov	r2, r0
 80064d4:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <rt_InitInfAndNaN+0x6c>)
 80064d6:	601a      	str	r2, [r3, #0]
}
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20001240 	.word	0x20001240
 80064e4:	20001230 	.word	0x20001230
 80064e8:	20001238 	.word	0x20001238
 80064ec:	20001234 	.word	0x20001234
 80064f0:	20001248 	.word	0x20001248
 80064f4:	20001250 	.word	0x20001250

080064f8 <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 8006502:	4b0d      	ldr	r3, [pc, #52]	; (8006538 <rtIsInf+0x40>)
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800650c:	f008 fe4c 	bl	800f1a8 <__aeabi_dcmpeq>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <rtIsInf+0x32>
 8006516:	4b09      	ldr	r3, [pc, #36]	; (800653c <rtIsInf+0x44>)
 8006518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006520:	f008 fe42 	bl	800f1a8 <__aeabi_dcmpeq>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <rtIsInf+0x36>
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <rtIsInf+0x38>
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	20001238 	.word	0x20001238
 800653c:	20001248 	.word	0x20001248

08006540 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value!=value) ? 1U : 0U);
 800654a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800654e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006552:	f008 fe29 	bl	800f1a8 <__aeabi_dcmpeq>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <rtIsNaN+0x20>
 800655c:	2301      	movs	r3, #1
 800655e:	e000      	b.n	8006562 <rtIsNaN+0x22>
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop

0800656c <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a05      	ldr	r2, [pc, #20]	; (800658c <XMC_ERU_Enable+0x20>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d103      	bne.n	8006584 <XMC_ERU_Enable+0x18>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 800657c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006580:	f000 f99a 	bl	80068b8 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	40044000 	.word	0x40044000

08006590 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	460b      	mov	r3, r1
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800659e:	7afb      	ldrb	r3, [r7, #11]
 80065a0:	089b      	lsrs	r3, r3, #2
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	4618      	mov	r0, r3
 80065a6:	7afb      	ldrb	r3, [r7, #11]
 80065a8:	089b      	lsrs	r3, r3, #2
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	461a      	mov	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3204      	adds	r2, #4
 80065b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065b6:	7afb      	ldrb	r3, [r7, #11]
 80065b8:	f003 0303 	and.w	r3, r3, #3
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	4619      	mov	r1, r3
 80065c0:	23f8      	movs	r3, #248	; 0xf8
 80065c2:	408b      	lsls	r3, r1
 80065c4:	43db      	mvns	r3, r3
 80065c6:	ea02 0103 	and.w	r1, r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	1d02      	adds	r2, r0, #4
 80065ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80065d6:	7afb      	ldrb	r3, [r7, #11]
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	4619      	mov	r1, r3
 80065dc:	2303      	movs	r3, #3
 80065de:	408b      	lsls	r3, r1
 80065e0:	43db      	mvns	r3, r3
 80065e2:	401a      	ands	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4a3a      	ldr	r2, [pc, #232]	; (80066d4 <XMC_GPIO_Init+0x144>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d003      	beq.n	80065f8 <XMC_GPIO_Init+0x68>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4a39      	ldr	r2, [pc, #228]	; (80066d8 <XMC_GPIO_Init+0x148>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d10a      	bne.n	800660e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80065fc:	7afb      	ldrb	r3, [r7, #11]
 80065fe:	2101      	movs	r1, #1
 8006600:	fa01 f303 	lsl.w	r3, r1, r3
 8006604:	43db      	mvns	r3, r3
 8006606:	401a      	ands	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	661a      	str	r2, [r3, #96]	; 0x60
 800660c:	e042      	b.n	8006694 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	b25b      	sxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	da3c      	bge.n	8006694 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	7afb      	ldrb	r3, [r7, #11]
 8006620:	409a      	lsls	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8006626:	7afb      	ldrb	r3, [r7, #11]
 8006628:	08db      	lsrs	r3, r3, #3
 800662a:	b2db      	uxtb	r3, r3
 800662c:	4618      	mov	r0, r3
 800662e:	7afb      	ldrb	r3, [r7, #11]
 8006630:	08db      	lsrs	r3, r3, #3
 8006632:	b2db      	uxtb	r3, r3
 8006634:	461a      	mov	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3210      	adds	r2, #16
 800663a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800663e:	7afb      	ldrb	r3, [r7, #11]
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4619      	mov	r1, r3
 8006648:	2307      	movs	r3, #7
 800664a:	408b      	lsls	r3, r1
 800664c:	43db      	mvns	r3, r3
 800664e:	ea02 0103 	and.w	r1, r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f100 0210 	add.w	r2, r0, #16
 8006658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800665c:	7afb      	ldrb	r3, [r7, #11]
 800665e:	08db      	lsrs	r3, r3, #3
 8006660:	b2db      	uxtb	r3, r3
 8006662:	4618      	mov	r0, r3
 8006664:	7afb      	ldrb	r3, [r7, #11]
 8006666:	08db      	lsrs	r3, r3, #3
 8006668:	b2db      	uxtb	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3210      	adds	r2, #16
 8006670:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	7a1b      	ldrb	r3, [r3, #8]
 8006678:	4619      	mov	r1, r3
 800667a:	7afb      	ldrb	r3, [r7, #11]
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	fa01 f303 	lsl.w	r3, r1, r3
 8006686:	ea42 0103 	orr.w	r1, r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f100 0210 	add.w	r2, r0, #16
 8006690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8006694:	7afb      	ldrb	r3, [r7, #11]
 8006696:	089b      	lsrs	r3, r3, #2
 8006698:	b2db      	uxtb	r3, r3
 800669a:	4618      	mov	r0, r3
 800669c:	7afb      	ldrb	r3, [r7, #11]
 800669e:	089b      	lsrs	r3, r3, #2
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3204      	adds	r2, #4
 80066a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	4619      	mov	r1, r3
 80066b2:	7afb      	ldrb	r3, [r7, #11]
 80066b4:	f003 0303 	and.w	r3, r3, #3
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	fa01 f303 	lsl.w	r3, r1, r3
 80066be:	ea42 0103 	orr.w	r1, r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	1d02      	adds	r2, r0, #4
 80066c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	48028e00 	.word	0x48028e00
 80066d8:	48028f00 	.word	0x48028f00

080066dc <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066e0:	4b03      	ldr	r3, [pc, #12]	; (80066f0 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80066e2:	681b      	ldr	r3, [r3, #0]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	2000ffc0 	.word	0x2000ffc0

080066f4 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80066f4:	b480      	push	{r7}
 80066f6:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 80066f8:	4b03      	ldr	r3, [pc, #12]	; (8006708 <XMC_SCU_GetMirrorStatus+0x14>)
 80066fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80066fe:	4618      	mov	r0, r3
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	50004000 	.word	0x50004000

0800670c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8006714:	f7f9 fdde 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8006718:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <XMC_SCU_lDelay+0x3c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a0b      	ldr	r2, [pc, #44]	; (800674c <XMC_SCU_lDelay+0x40>)
 800671e:	fba2 2303 	umull	r2, r3, r2, r3
 8006722:	0c9a      	lsrs	r2, r3, #18
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	fb02 f303 	mul.w	r3, r2, r3
 800672a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	e003      	b.n	800673a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8006732:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	3301      	adds	r3, #1
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	429a      	cmp	r2, r3
 8006740:	d3f7      	bcc.n	8006732 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	2000ffc0 	.word	0x2000ffc0
 800674c:	431bde83 	.word	0x431bde83

08006750 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8006758:	4905      	ldr	r1, [pc, #20]	; (8006770 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 800675a:	4b05      	ldr	r3, [pc, #20]	; (8006770 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4313      	orrs	r3, r2
 8006762:	608b      	str	r3, [r1, #8]
}
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	50004074 	.word	0x50004074

08006774 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8006778:	4b03      	ldr	r3, [pc, #12]	; (8006788 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800677a:	685b      	ldr	r3, [r3, #4]
}
 800677c:	4618      	mov	r0, r3
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	50004074 	.word	0x50004074

0800678c <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8006794:	4a03      	ldr	r2, [pc, #12]	; (80067a4 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	60d3      	str	r3, [r2, #12]
}
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	50004074 	.word	0x50004074

080067a8 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80067a8:	b5b0      	push	{r4, r5, r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80067b0:	2000      	movs	r0, #0
 80067b2:	f000 f8ad 	bl	8006910 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80067b6:	f000 fa3f 	bl	8006c38 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	79db      	ldrb	r3, [r3, #7]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80067c2:	f000 fa77 	bl	8006cb4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80067c6:	bf00      	nop
 80067c8:	f000 fa62 	bl	8006c90 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f083 0301 	eor.w	r3, r3, #1
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1f7      	bne.n	80067c8 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	7a5b      	ldrb	r3, [r3, #9]
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 f911 	bl	8006a04 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80067e2:	bf00      	nop
 80067e4:	f7ff ff86 	bl	80066f4 <XMC_SCU_GetMirrorStatus>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1fa      	bne.n	80067e4 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	7a1b      	ldrb	r3, [r3, #8]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 f9fa 	bl	8006bec <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	7c1b      	ldrb	r3, [r3, #16]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 f91f 	bl	8006a40 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	7c5b      	ldrb	r3, [r3, #17]
 8006806:	4618      	mov	r0, r3
 8006808:	f000 f942 	bl	8006a90 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	7c9b      	ldrb	r3, [r3, #18]
 8006810:	4618      	mov	r0, r3
 8006812:	f000 f929 	bl	8006a68 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	7cdb      	ldrb	r3, [r3, #19]
 800681a:	4618      	mov	r0, r3
 800681c:	f000 f94c 	bl	8006ab8 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	799b      	ldrb	r3, [r3, #6]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8006828:	f000 fa7c 	bl	8006d24 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 800682c:	bf00      	nop
 800682e:	f000 faa1 	bl	8006d74 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8006832:	4603      	mov	r3, r0
 8006834:	f083 0301 	eor.w	r3, r3, #1
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1f7      	bne.n	800682e <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	78db      	ldrb	r3, [r3, #3]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d102      	bne.n	800684c <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8006846:	f000 fab9 	bl	8006dbc <XMC_SCU_CLOCK_DisableSystemPll>
 800684a:	e014      	b.n	8006876 <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800684c:	f000 faa6 	bl	8006d9c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	8899      	ldrh	r1, [r3, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800685c:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8006862:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	4608      	mov	r0, r1
 800686c:	4611      	mov	r1, r2
 800686e:	462a      	mov	r2, r5
 8006870:	4623      	mov	r3, r4
 8006872:	f000 fab3 	bl	8006ddc <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800687e:	d103      	bne.n	8006888 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8006880:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006884:	f000 f844 	bl	8006910 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8006888:	f7f9 fd24 	bl	80002d4 <SystemCoreClockUpdate>
}
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bdb0      	pop	{r4, r5, r7, pc}
 8006892:	bf00      	nop

08006894 <XMC_SCU_INTERRUPT_EnableNmiRequest>:
  SCU_PARITY->PETE &= (uint32_t)~memory; 
}

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 800689c:	4905      	ldr	r1, [pc, #20]	; (80068b4 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 800689e:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 80068a0:	695a      	ldr	r2, [r3, #20]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	614b      	str	r3, [r1, #20]
}
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	50004074 	.word	0x50004074

080068b8 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	0f1b      	lsrs	r3, r3, #28
 80068c4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068cc:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4613      	mov	r3, r2
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	461a      	mov	r2, r3
 80068da:	4b04      	ldr	r3, [pc, #16]	; (80068ec <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80068dc:	4413      	add	r3, r2
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	601a      	str	r2, [r3, #0]
}
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	50004414 	.word	0x50004414

080068f0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80068f4:	f7ff fef2 	bl	80066dc <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80068f8:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80068fa:	4b04      	ldr	r3, [pc, #16]	; (800690c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80068fc:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8006906:	4618      	mov	r0, r3
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	50004600 	.word	0x50004600

08006910 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8006918:	4906      	ldr	r1, [pc, #24]	; (8006934 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800691a:	4b06      	ldr	r3, [pc, #24]	; (8006934 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4313      	orrs	r3, r2
 8006926:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	50004600 	.word	0x50004600

08006938 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8006940:	4906      	ldr	r1, [pc, #24]	; (800695c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8006942:	4b06      	ldr	r3, [pc, #24]	; (800695c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4313      	orrs	r3, r2
 800694e:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	50004600 	.word	0x50004600

08006960 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8006968:	4906      	ldr	r1, [pc, #24]	; (8006984 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800696a:	4b06      	ldr	r3, [pc, #24]	; (8006984 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4313      	orrs	r3, r2
 8006976:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	50004600 	.word	0x50004600

08006988 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	4603      	mov	r3, r0
 8006990:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8006992:	88fb      	ldrh	r3, [r7, #6]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d108      	bne.n	80069aa <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8006998:	4a0a      	ldr	r2, [pc, #40]	; (80069c4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800699a:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069a2:	f023 0301 	bic.w	r3, r3, #1
 80069a6:	60d3      	str	r3, [r2, #12]
 80069a8:	e007      	b.n	80069ba <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80069aa:	4a06      	ldr	r2, [pc, #24]	; (80069c4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80069ac:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b4:	f043 0301 	orr.w	r3, r3, #1
 80069b8:	60d3      	str	r3, [r2, #12]
  }
}
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	50004710 	.word	0x50004710

080069c8 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	4603      	mov	r3, r0
 80069d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80069d2:	bf00      	nop
 80069d4:	4b09      	ldr	r3, [pc, #36]	; (80069fc <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80069d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1f8      	bne.n	80069d4 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80069e2:	4907      	ldr	r1, [pc, #28]	; (8006a00 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80069e4:	4b06      	ldr	r3, [pc, #24]	; (8006a00 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80069ec:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	50004000 	.word	0x50004000
 8006a00:	50004300 	.word	0x50004300

08006a04 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8006a0e:	bf00      	nop
 8006a10:	4b09      	ldr	r3, [pc, #36]	; (8006a38 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8006a12:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1f8      	bne.n	8006a10 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8006a1e:	4907      	ldr	r1, [pc, #28]	; (8006a3c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8006a20:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8006a28:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	50004000 	.word	0x50004000
 8006a3c:	50004300 	.word	0x50004300

08006a40 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8006a48:	4906      	ldr	r1, [pc, #24]	; (8006a64 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8006a4a:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	50004600 	.word	0x50004600

08006a68 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8006a70:	4906      	ldr	r1, [pc, #24]	; (8006a8c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8006a72:	4b06      	ldr	r3, [pc, #24]	; (8006a8c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	50004600 	.word	0x50004600

08006a90 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8006a98:	4906      	ldr	r1, [pc, #24]	; (8006ab4 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8006a9a:	4b06      	ldr	r3, [pc, #24]	; (8006ab4 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	50004600 	.word	0x50004600

08006ab8 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8006ac0:	4906      	ldr	r1, [pc, #24]	; (8006adc <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8006ac2:	4b06      	ldr	r3, [pc, #24]	; (8006adc <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	50004600 	.word	0x50004600

08006ae0 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8006ae8:	4906      	ldr	r1, [pc, #24]	; (8006b04 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8006aea:	4b06      	ldr	r3, [pc, #24]	; (8006b04 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8006af6:	4313      	orrs	r3, r2
 8006af8:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	50004600 	.word	0x50004600

08006b08 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8006b10:	4906      	ldr	r1, [pc, #24]	; (8006b2c <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8006b12:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	50004600 	.word	0x50004600

08006b30 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8006b38:	4906      	ldr	r1, [pc, #24]	; (8006b54 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8006b3a:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8006b46:	4313      	orrs	r3, r2
 8006b48:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	50004600 	.word	0x50004600

08006b58 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	4603      	mov	r3, r0
 8006b60:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8006b62:	4a04      	ldr	r2, [pc, #16]	; (8006b74 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8006b64:	79fb      	ldrb	r3, [r7, #7]
 8006b66:	6053      	str	r3, [r2, #4]
}
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	50004600 	.word	0x50004600

08006b78 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8006b82:	4a19      	ldr	r2, [pc, #100]	; (8006be8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006b84:	4b18      	ldr	r3, [pc, #96]	; (8006be8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	f043 0301 	orr.w	r3, r3, #1
 8006b8c:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8006b8e:	4a16      	ldr	r2, [pc, #88]	; (8006be8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006b90:	4b15      	ldr	r3, [pc, #84]	; (8006be8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	f043 0310 	orr.w	r3, r3, #16
 8006b98:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8006b9a:	4913      	ldr	r1, [pc, #76]	; (8006be8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8006bac:	4a0e      	ldr	r2, [pc, #56]	; (8006be8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006bae:	4b0e      	ldr	r3, [pc, #56]	; (8006be8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bb6:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8006bb8:	4a0b      	ldr	r2, [pc, #44]	; (8006be8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006bba:	4b0b      	ldr	r3, [pc, #44]	; (8006be8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	f023 0310 	bic.w	r3, r3, #16
 8006bc2:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8006bc4:	4a08      	ldr	r2, [pc, #32]	; (8006be8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006bc6:	4b08      	ldr	r3, [pc, #32]	; (8006be8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bce:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8006bd0:	bf00      	nop
 8006bd2:	4b05      	ldr	r3, [pc, #20]	; (8006be8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f003 0304 	and.w	r3, r3, #4
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0f9      	beq.n	8006bd2 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	50004710 	.word	0x50004710

08006bec <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8006bf6:	4a0f      	ldr	r2, [pc, #60]	; (8006c34 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006bf8:	4b0e      	ldr	r3, [pc, #56]	; (8006c34 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c00:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8006c02:	79fb      	ldrb	r3, [r7, #7]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d10e      	bne.n	8006c26 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8006c08:	4a0a      	ldr	r2, [pc, #40]	; (8006c34 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006c0a:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c12:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8006c14:	2064      	movs	r0, #100	; 0x64
 8006c16:	f7ff fd79 	bl	800670c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8006c1a:	4a06      	ldr	r2, [pc, #24]	; (8006c34 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006c1c:	4b05      	ldr	r3, [pc, #20]	; (8006c34 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c24:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8006c26:	2064      	movs	r0, #100	; 0x64
 8006c28:	f7ff fd70 	bl	800670c <XMC_SCU_lDelay>
}
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	50004710 	.word	0x50004710

08006c38 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8006c3c:	4b12      	ldr	r3, [pc, #72]	; (8006c88 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d109      	bne.n	8006c5c <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8006c48:	4b0f      	ldr	r3, [pc, #60]	; (8006c88 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8006c4e:	bf00      	nop
 8006c50:	4b0d      	ldr	r3, [pc, #52]	; (8006c88 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0f9      	beq.n	8006c50 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8006c5c:	4b0b      	ldr	r3, [pc, #44]	; (8006c8c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8006c68:	4b08      	ldr	r3, [pc, #32]	; (8006c8c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8006c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c6e:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8006c70:	bf00      	nop
 8006c72:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1f9      	bne.n	8006c72 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	50004200 	.word	0x50004200
 8006c8c:	50004400 	.word	0x50004400

08006c90 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8006c94:	4b06      	ldr	r3, [pc, #24]	; (8006cb0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0308 	and.w	r3, r3, #8
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	bf0c      	ite	eq
 8006ca0:	2301      	moveq	r3, #1
 8006ca2:	2300      	movne	r3, #0
 8006ca4:	b2db      	uxtb	r3, r3
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	50004300 	.word	0x50004300

08006cb4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8006cb8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006cbc:	f7ff fd66 	bl	800678c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8006cc0:	4a17      	ldr	r2, [pc, #92]	; (8006d20 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006cc2:	4b17      	ldr	r3, [pc, #92]	; (8006d20 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006cca:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8006ccc:	bf00      	nop
 8006cce:	f7ff fd51 	bl	8006774 <XMC_SCU_INTERUPT_GetEventStatus>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0f8      	beq.n	8006cce <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8006cdc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006ce0:	f7ff fd54 	bl	800678c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8006ce4:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006ce6:	2208      	movs	r2, #8
 8006ce8:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8006cea:	bf00      	nop
 8006cec:	f7ff fd42 	bl	8006774 <XMC_SCU_INTERUPT_GetEventStatus>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0f8      	beq.n	8006cec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8006cfa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006cfe:	f7ff fd45 	bl	800678c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8006d02:	4a07      	ldr	r2, [pc, #28]	; (8006d20 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006d04:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f043 0308 	orr.w	r3, r3, #8
 8006d0c:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8006d0e:	bf00      	nop
 8006d10:	f7ff fd30 	bl	8006774 <XMC_SCU_INTERUPT_GetEventStatus>
 8006d14:	4603      	mov	r3, r0
 8006d16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0f8      	beq.n	8006d10 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	50004300 	.word	0x50004300

08006d24 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8006d24:	b5b0      	push	{r4, r5, r7, lr}
 8006d26:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8006d28:	4a0f      	ldr	r2, [pc, #60]	; (8006d68 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8006d2a:	4b0f      	ldr	r3, [pc, #60]	; (8006d68 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d32:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8006d34:	4d0d      	ldr	r5, [pc, #52]	; (8006d6c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8006d36:	4b0d      	ldr	r3, [pc, #52]	; (8006d6c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8006d3e:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8006d42:	f004 fa51 	bl	800b1e8 <OSCHP_GetFrequency>
 8006d46:	4602      	mov	r2, r0
 8006d48:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8006d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d4e:	0d1b      	lsrs	r3, r3, #20
 8006d50:	3b01      	subs	r3, #1
 8006d52:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8006d54:	4323      	orrs	r3, r4
 8006d56:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8006d58:	4a03      	ldr	r2, [pc, #12]	; (8006d68 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8006d5a:	4b03      	ldr	r3, [pc, #12]	; (8006d68 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d62:	6053      	str	r3, [r2, #4]
}
 8006d64:	bdb0      	pop	{r4, r5, r7, pc}
 8006d66:	bf00      	nop
 8006d68:	50004710 	.word	0x50004710
 8006d6c:	50004700 	.word	0x50004700
 8006d70:	6b5fca6b 	.word	0x6b5fca6b

08006d74 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8006d74:	b480      	push	{r7}
 8006d76:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8006d78:	4b07      	ldr	r3, [pc, #28]	; (8006d98 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8006d80:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8006d84:	bf0c      	ite	eq
 8006d86:	2301      	moveq	r3, #1
 8006d88:	2300      	movne	r3, #0
 8006d8a:	b2db      	uxtb	r3, r3
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	50004710 	.word	0x50004710

08006d9c <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8006da0:	4a05      	ldr	r2, [pc, #20]	; (8006db8 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8006da2:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006daa:	f023 0302 	bic.w	r3, r3, #2
 8006dae:	6053      	str	r3, [r2, #4]
}
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	50004710 	.word	0x50004710

08006dbc <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8006dc0:	4a05      	ldr	r2, [pc, #20]	; (8006dd8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8006dc2:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dca:	f043 0302 	orr.w	r3, r3, #2
 8006dce:	6053      	str	r3, [r2, #4]
}
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	50004710 	.word	0x50004710

08006ddc <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60ba      	str	r2, [r7, #8]
 8006de4:	607b      	str	r3, [r7, #4]
 8006de6:	4603      	mov	r3, r0
 8006de8:	81fb      	strh	r3, [r7, #14]
 8006dea:	460b      	mov	r3, r1
 8006dec:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8006dee:	89fb      	ldrh	r3, [r7, #14]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff fdc9 	bl	8006988 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8006df6:	7b7b      	ldrb	r3, [r7, #13]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	f040 8084 	bne.w	8006f06 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8006dfe:	89fb      	ldrh	r3, [r7, #14]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d109      	bne.n	8006e18 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8006e04:	f004 f9f0 	bl	800b1e8 <OSCHP_GetFrequency>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	4b4b      	ldr	r3, [pc, #300]	; (8006f38 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8006e0c:	fba3 2302 	umull	r2, r3, r3, r2
 8006e10:	0c9b      	lsrs	r3, r3, #18
 8006e12:	059b      	lsls	r3, r3, #22
 8006e14:	617b      	str	r3, [r7, #20]
 8006e16:	e002      	b.n	8006e1e <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8006e18:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8006e1c:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	fb02 f203 	mul.w	r2, r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2c:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	4a42      	ldr	r2, [pc, #264]	; (8006f3c <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8006e32:	fba2 2303 	umull	r2, r3, r2, r3
 8006e36:	091b      	lsrs	r3, r3, #4
 8006e38:	0d9b      	lsrs	r3, r3, #22
 8006e3a:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8006e3c:	4a40      	ldr	r2, [pc, #256]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e3e:	4b40      	ldr	r3, [pc, #256]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f043 0301 	orr.w	r3, r3, #1
 8006e46:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8006e48:	4a3d      	ldr	r2, [pc, #244]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e4a:	4b3d      	ldr	r3, [pc, #244]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f043 0310 	orr.w	r3, r3, #16
 8006e52:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8006e54:	493a      	ldr	r1, [pc, #232]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e56:	4b3a      	ldr	r3, [pc, #232]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e58:	689a      	ldr	r2, [r3, #8]
 8006e5a:	4b3a      	ldr	r3, [pc, #232]	; (8006f44 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8006e5c:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	3a01      	subs	r2, #1
 8006e62:	0212      	lsls	r2, r2, #8
 8006e64:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006e6c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8006e74:	4313      	orrs	r3, r2
 8006e76:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8006e78:	4a31      	ldr	r2, [pc, #196]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e7a:	4b31      	ldr	r3, [pc, #196]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e82:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8006e84:	4a2e      	ldr	r2, [pc, #184]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e86:	4b2e      	ldr	r3, [pc, #184]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f023 0310 	bic.w	r3, r3, #16
 8006e8e:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8006e90:	4a2b      	ldr	r2, [pc, #172]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e92:	4b2b      	ldr	r3, [pc, #172]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e9a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8006e9c:	bf00      	nop
 8006e9e:	4b28      	ldr	r3, [pc, #160]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0304 	and.w	r3, r3, #4
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0f9      	beq.n	8006e9e <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8006eaa:	4a25      	ldr	r2, [pc, #148]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006eac:	4b24      	ldr	r3, [pc, #144]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f023 0301 	bic.w	r3, r3, #1
 8006eb4:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8006eb6:	bf00      	nop
 8006eb8:	4b21      	ldr	r3, [pc, #132]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1f9      	bne.n	8006eb8 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	4a20      	ldr	r2, [pc, #128]	; (8006f48 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8006ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ecc:	095b      	lsrs	r3, r3, #5
 8006ece:	0d9b      	lsrs	r3, r3, #22
 8006ed0:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8006ed2:	6a3a      	ldr	r2, [r7, #32]
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d202      	bcs.n	8006ee0 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8006eda:	6938      	ldr	r0, [r7, #16]
 8006edc:	f000 f838 	bl	8006f50 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	085b      	lsrs	r3, r3, #1
 8006ee4:	4a19      	ldr	r2, [pc, #100]	; (8006f4c <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8006ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eea:	095b      	lsrs	r3, r3, #5
 8006eec:	0d9b      	lsrs	r3, r3, #22
 8006eee:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8006ef0:	6a3a      	ldr	r2, [r7, #32]
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d202      	bcs.n	8006efe <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8006ef8:	6938      	ldr	r0, [r7, #16]
 8006efa:	f000 f829 	bl	8006f50 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8006efe:	6a38      	ldr	r0, [r7, #32]
 8006f00:	f000 f826 	bl	8006f50 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8006f04:	e015      	b.n	8006f32 <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8006f06:	490e      	ldr	r1, [pc, #56]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006f08:	4b0d      	ldr	r3, [pc, #52]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8006f14:	4313      	orrs	r3, r2
 8006f16:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8006f18:	4a09      	ldr	r2, [pc, #36]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006f1a:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f043 0301 	orr.w	r3, r3, #1
 8006f22:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8006f24:	bf00      	nop
 8006f26:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0f9      	beq.n	8006f26 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8006f32:	3718      	adds	r7, #24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	431bde83 	.word	0x431bde83
 8006f3c:	aaaaaaab 	.word	0xaaaaaaab
 8006f40:	50004710 	.word	0x50004710
 8006f44:	f08080ff 	.word	0xf08080ff
 8006f48:	88888889 	.word	0x88888889
 8006f4c:	b60b60b7 	.word	0xb60b60b7

08006f50 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8006f58:	4907      	ldr	r1, [pc, #28]	; (8006f78 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8006f5a:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8006f6c:	2032      	movs	r0, #50	; 0x32
 8006f6e:	f7ff fbcd 	bl	800670c <XMC_SCU_lDelay>
}
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	50004710 	.word	0x50004710

08006f7c <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8006f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	bf0c      	ite	eq
 8006f92:	2301      	moveq	r3, #1
 8006f94:	2300      	movne	r3, #0
 8006f96:	b2db      	uxtb	r3, r3
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	4608      	mov	r0, r1
 8006fae:	4611      	mov	r1, r2
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	70fb      	strb	r3, [r7, #3]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	70bb      	strb	r3, [r7, #2]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8006fbe:	78fa      	ldrb	r2, [r7, #3]
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8006fc0:	78bb      	ldrb	r3, [r7, #2]
 8006fc2:	041b      	lsls	r3, r3, #16
 8006fc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8006fc8:	431a      	orrs	r2, r3
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8006fca:	787b      	ldrb	r3, [r7, #1]
 8006fcc:	061b      	lsls	r3, r3, #24
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8006fce:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	601a      	str	r2, [r3, #0]
}
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop

08007000 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	601a      	str	r2, [r3, #0]
}
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop

08007020 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4293      	cmp	r3, r2
 8007030:	bf38      	it	cc
 8007032:	4613      	movcc	r3, r2
}
 8007034:	4618      	mov	r0, r3
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4293      	cmp	r3, r2
 8007050:	bf28      	it	cs
 8007052:	4613      	movcs	r3, r2
}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
                                               const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	6852      	ldr	r2, [r2, #4]
 8007072:	fbb3 f1f2 	udiv	r1, r3, r2
 8007076:	fb02 f201 	mul.w	r2, r2, r1
 800707a:	1a9b      	subs	r3, r3, r2
 800707c:	2b00      	cmp	r3, #0
 800707e:	f040 808e 	bne.w	800719e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x13e>
  {
    uint32_t prescaler;
    uint32_t div8 = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007092:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 8007094:	2319      	movs	r3, #25
 8007096:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
 8007098:	2300      	movs	r3, #0
 800709a:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 80070a0:	e04b      	b.n	800713a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xda>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80070aa:	6979      	ldr	r1, [r7, #20]
 80070ac:	fb01 f202 	mul.w	r2, r1, r2
 80070b0:	1a9b      	subs	r3, r3, r2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d13e      	bne.n	8007134 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
      {
    	  div8 = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c2:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d034      	beq.n	8007134 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070d0:	d830      	bhi.n	8007134 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
        {
          if (prescaler >= 64)
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	2b3f      	cmp	r3, #63	; 0x3f
 80070d6:	d90a      	bls.n	80070ee <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	f003 0307 	and.w	r3, r3, #7
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8a>
            {
              --ntq;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	617b      	str	r3, [r7, #20]
              continue;
 80070e8:	e027      	b.n	800713a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xda>
            }
            else
            {
              div8 = 1;
 80070ea:	2301      	movs	r3, #1
 80070ec:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	8912      	ldrh	r2, [r2, #8]
 80070f6:	fb02 f303 	mul.w	r3, r2, r3
 80070fa:	4a2b      	ldr	r2, [pc, #172]	; (80071a8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x148>)
 80070fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007100:	0b5b      	lsrs	r3, r3, #13
 8007102:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	3b01      	subs	r3, #1
 800710c:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d90f      	bls.n	8007134 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	2b0f      	cmp	r3, #15
 8007118:	d80c      	bhi.n	8007134 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d909      	bls.n	8007134 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
        		  (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2b06      	cmp	r3, #6
 8007124:	d806      	bhi.n	8007134 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	895b      	ldrh	r3, [r3, #10]
 800712a:	461a      	mov	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	429a      	cmp	r2, r3
 8007130:	d800      	bhi.n	8007134 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
          {
            break;
 8007132:	e005      	b.n	8007140 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe0>
          }


        }
      }
      --ntq;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	3b01      	subs	r3, #1
 8007138:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2b07      	cmp	r3, #7
 800713e:	d8b0      	bhi.n	80070a2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x42>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	2b07      	cmp	r3, #7
 8007144:	d92b      	bls.n	800719e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x13e>
    {


      XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff ff4a 	bl	8006fe0 <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3b01      	subs	r3, #1
 8007150:	031b      	lsls	r3, r3, #12
 8007152:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	895b      	ldrh	r3, [r3, #10]
 800715a:	3b01      	subs	r3, #1
 800715c:	019b      	lsls	r3, r3, #6
 800715e:	b2db      	uxtb	r3, r3


      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8007160:	431a      	orrs	r2, r3
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	3b01      	subs	r3, #1
 8007166:	021b      	lsls	r3, r3, #8
 8007168:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 800716c:	ea42 0103 	orr.w	r1, r2, r3
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	4613      	mov	r3, r2
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	4413      	add	r3, r2
 8007178:	461a      	mov	r2, r3
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	40d3      	lsrs	r3, r2
 800717e:	3b01      	subs	r3, #1
 8007180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8007184:	ea41 0203 	orr.w	r2, r1, r3
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	03db      	lsls	r3, r3, #15
 800718c:	b29b      	uxth	r3, r3

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 800718e:	431a      	orrs	r2, r3


      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	611a      	str	r2, [r3, #16]
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff ff33 	bl	8007000 <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
 800719a:	2300      	movs	r3, #0
 800719c:	e000      	b.n	80071a0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x140>
    }
  }

  return XMC_CAN_STATUS_ERROR;
 800719e:	2301      	movs	r3, #1
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3720      	adds	r7, #32
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	d1b71759 	.word	0xd1b71759

080071ac <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	70fb      	strb	r3, [r7, #3]
 80071b8:	4613      	mov	r3, r2
 80071ba:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 80071bc:	bf00      	nop
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7ff fedc 	bl	8006f7c <XMC_CAN_IsPanelControlReady>
 80071c4:	4603      	mov	r3, r0
 80071c6:	f083 0301 	eor.w	r3, r3, #1
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1f6      	bne.n	80071be <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	3301      	adds	r3, #1
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	78ba      	ldrb	r2, [r7, #2]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	2102      	movs	r1, #2
 80071dc:	f7ff fee2 	bl	8006fa4 <XMC_CAN_PanelControl>
}
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop

080071e8 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 80071f0:	4809      	ldr	r0, [pc, #36]	; (8007218 <XMC_CAN_Enable+0x30>)
 80071f2:	f7ff fb61 	bl	80068b8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f023 0201 	bic.w	r2, r3, #1
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 8007202:	bf00      	nop
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1f9      	bne.n	8007204 <XMC_CAN_Enable+0x1c>
  {
    /*Do nothing*/
  };
}
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	10000010 	.word	0x10000010

0800721c <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	70fb      	strb	r3, [r7, #3]
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop

08007234 <XMC_CAN_GetBaudrateClockFrequency>:
  return XMC_CAN_CANCLKSRC_FPERI;
#endif    
}

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
      frequency = 0;
      break;
  }
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 800723c:	f7ff fb58 	bl	80068f0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8007240:	60f8      	str	r0, [r7, #12]
#endif  

  return frequency;
 8007242:	68fb      	ldr	r3, [r7, #12]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b088      	sub	sp, #32
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	460b      	mov	r3, r1
 8007256:	607a      	str	r2, [r7, #4]
 8007258:	72fb      	strb	r3, [r7, #11]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f7ff ffc4 	bl	80071e8 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 8007260:	7afb      	ldrb	r3, [r7, #11]
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	4619      	mov	r1, r3
 8007266:	f7ff ffd9 	bl	800721c <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f7ff ffe2 	bl	8007234 <XMC_CAN_GetBaudrateClockFrequency>
 8007270:	61f8      	str	r0, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 8007272:	69fa      	ldr	r2, [r7, #28]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	fbb2 f3f3 	udiv	r3, r2, r3
 800727a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800727e:	2000      	movs	r0, #0
 8007280:	4619      	mov	r1, r3
 8007282:	f7ff fecd 	bl	8007020 <max>
 8007286:	4603      	mov	r3, r0
 8007288:	4618      	mov	r0, r3
 800728a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800728e:	f7ff fed7 	bl	8007040 <min>
 8007292:	61b8      	str	r0, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800729a:	69fa      	ldr	r2, [r7, #28]
 800729c:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a0:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80072aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	60da      	str	r2, [r3, #12]

  return freq_n;
 80072c2:	697b      	ldr	r3, [r7, #20]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3720      	adds	r7, #32
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t reg;
  
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 80072dc:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 80072e0:	095b      	lsrs	r3, r3, #5
 80072e2:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	095b      	lsrs	r3, r3, #5
 80072e8:	035a      	lsls	r2, r3, #13
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f003 031f 	and.w	r3, r3, #31
 80072f0:	021b      	lsls	r3, r3, #8
 80072f2:	4313      	orrs	r3, r2
 80072f4:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	6812      	ldr	r2, [r2, #0]
 80072fe:	6892      	ldr	r2, [r2, #8]
 8007300:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007304:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	6891      	ldr	r1, [r2, #8]
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	430a      	orrs	r2, r1
 8007314:	609a      	str	r2, [r3, #8]
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	79db      	ldrb	r3, [r3, #7]
 800731a:	f003 0320 	and.w	r3, r3, #32
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d007      	beq.n	8007334 <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	79db      	ldrb	r3, [r3, #7]
 8007328:	f003 0320 	and.w	r3, r3, #32
 800732c:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 800732e:	2b00      	cmp	r3, #0
 8007330:	d100      	bne.n	8007334 <XMC_CAN_MO_Config+0x68>
 8007332:	e060      	b.n	80073f6 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8007338:	2b00      	cmp	r3, #0
 800733a:	d004      	beq.n	8007346 <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8007340:	2b01      	cmp	r3, #1
 8007342:	d000      	beq.n	8007346 <XMC_CAN_MO_Config+0x7a>
 8007344:	e057      	b.n	80073f6 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2220      	movs	r2, #32
 800734c:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	79db      	ldrb	r3, [r3, #7]
 8007352:	f003 0320 	and.w	r3, r3, #32
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d128      	bne.n	80073ae <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8007368:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8007372:	049b      	lsls	r3, r3, #18
 8007374:	461a      	mov	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4313      	orrs	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8007390:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800739a:	049b      	lsls	r3, r3, #18
 800739c:	461a      	mov	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	60da      	str	r2, [r3, #12]
 80073ac:	e009      	b.n	80073c2 <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6852      	ldr	r2, [r2, #4]
 80073b6:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6892      	ldr	r2, [r2, #8]
 80073c0:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	7e1b      	ldrb	r3, [r3, #24]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d10c      	bne.n	80073e4 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f81a 	bl	8007404 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80073d8:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a07      	ldr	r2, [pc, #28]	; (80073fc <XMC_CAN_MO_Config+0x130>)
 80073e0:	61da      	str	r2, [r3, #28]
 80073e2:	e008      	b.n	80073f6 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073ec:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a03      	ldr	r2, [pc, #12]	; (8007400 <XMC_CAN_MO_Config+0x134>)
 80073f4:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	062000c0 	.word	0x062000c0
 8007400:	00a00640 	.word	0x00a00640

08007404 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800740c:	2303      	movs	r3, #3
 800740e:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	7e1b      	ldrb	r3, [r3, #24]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d122      	bne.n	800745e <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2220      	movs	r2, #32
 800741e:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	6812      	ldr	r2, [r2, #0]
 8007428:	6812      	ldr	r2, [r2, #0]
 800742a:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	7b12      	ldrb	r2, [r2, #12]
 8007432:	0612      	lsls	r2, r2, #24
 8007434:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8007438:	430a      	orrs	r2, r1
 800743a:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6912      	ldr	r2, [r2, #16]
 8007444:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	6952      	ldr	r2, [r2, #20]
 800744e:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOCTR_RESRTSEL_Msk);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a06      	ldr	r2, [pc, #24]	; (8007470 <XMC_CAN_MO_UpdateData+0x6c>)
 8007456:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 8007458:	2300      	movs	r3, #0
 800745a:	73fb      	strb	r3, [r7, #15]
 800745c:	e001      	b.n	8007462 <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800745e:	2303      	movs	r3, #3
 8007460:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 8007462:	7bfb      	ldrb	r3, [r7, #15]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	00280040 	.word	0x00280040

08007474 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	095b      	lsrs	r3, r3, #5
 800748c:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007498:	0a1b      	lsrs	r3, r3, #8
 800749a:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d102      	bne.n	80074a8 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 80074a2:	2304      	movs	r3, #4
 80074a4:	75fb      	strb	r3, [r7, #23]
 80074a6:	e00c      	b.n	80074c2 <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d102      	bne.n	80074b4 <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 80074ae:	2302      	movs	r3, #2
 80074b0:	75fb      	strb	r3, [r7, #23]
 80074b2:	e006      	b.n	80074c2 <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80074bc:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 80074be:	2300      	movs	r3, #0
 80074c0:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	371c      	adds	r7, #28
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ee:	0adb      	lsrs	r3, r3, #11
 80074f0:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	089b      	lsrs	r3, r3, #2
 80074fe:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8007506:	2303      	movs	r3, #3
 8007508:	75fb      	strb	r3, [r7, #23]
 800750a:	e0a7      	b.n	800765c <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d102      	bne.n	8007518 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 8007512:	2302      	movs	r3, #2
 8007514:	75fb      	strb	r3, [r7, #23]
 8007516:	e0a1      	b.n	800765c <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2208      	movs	r2, #8
 800751e:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800752a:	0f5b      	lsrs	r3, r3, #29
 800752c:	2b00      	cmp	r3, #0
 800752e:	d140      	bne.n	80075b2 <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	79d3      	ldrb	r3, [r2, #7]
 8007534:	f36f 1345 	bfc	r3, #5, #1
 8007538:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	699a      	ldr	r2, [r3, #24]
 8007540:	4b4a      	ldr	r3, [pc, #296]	; (800766c <XMC_CAN_MO_Receive+0x19c>)
 8007542:	4013      	ands	r3, r2
 8007544:	0c9b      	lsrs	r3, r3, #18
 8007546:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	6853      	ldr	r3, [r2, #4]
 800754e:	f361 031c 	bfi	r3, r1, #0, #29
 8007552:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800755e:	0f5b      	lsrs	r3, r3, #29
 8007560:	b2db      	uxtb	r3, r3
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	b2d9      	uxtb	r1, r3
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	7ad3      	ldrb	r3, [r2, #11]
 800756c:	f361 1345 	bfi	r3, r1, #5, #1
 8007570:	72d3      	strb	r3, [r2, #11]
        if(can_mo->can_ide_mask == 1U)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	7adb      	ldrb	r3, [r3, #11]
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00d      	beq.n	800759c <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68da      	ldr	r2, [r3, #12]
 8007586:	4b39      	ldr	r3, [pc, #228]	; (800766c <XMC_CAN_MO_Receive+0x19c>)
 8007588:	4013      	ands	r3, r2
 800758a:	0c9b      	lsrs	r3, r3, #18
 800758c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6893      	ldr	r3, [r2, #8]
 8007594:	f361 031c 	bfi	r3, r1, #0, #29
 8007598:	6093      	str	r3, [r2, #8]
 800759a:	e032      	b.n	8007602 <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	6893      	ldr	r3, [r2, #8]
 80075aa:	f361 031c 	bfi	r3, r1, #0, #29
 80075ae:	6093      	str	r3, [r2, #8]
 80075b0:	e027      	b.n	8007602 <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	79d3      	ldrb	r3, [r2, #7]
 80075b6:	f043 0320 	orr.w	r3, r3, #32
 80075ba:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	6853      	ldr	r3, [r2, #4]
 80075ca:	f361 031c 	bfi	r3, r1, #0, #29
 80075ce:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	6893      	ldr	r3, [r2, #8]
 80075de:	f361 031c 	bfi	r3, r1, #0, #29
 80075e2:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075ee:	0f5b      	lsrs	r3, r3, #29
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	b2d9      	uxtb	r1, r3
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	7ad3      	ldrb	r3, [r2, #11]
 80075fc:	f361 1345 	bfi	r3, r1, #5, #1
 8007600:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800760c:	0e1b      	lsrs	r3, r3, #24
 800760e:	b2da      	uxtb	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	691a      	ldr	r2, [r3, #16]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	695a      	ldr	r2, [r3, #20]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	f003 0304 	and.w	r3, r3, #4
 8007632:	089b      	lsrs	r3, r3, #2
 8007634:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	f003 0308 	and.w	r3, r3, #8
 8007640:	08db      	lsrs	r3, r3, #3
 8007642:	757b      	strb	r3, [r7, #21]
    } while ((rx_pnd != 0U) && (new_data != 0U));
 8007644:	7dbb      	ldrb	r3, [r7, #22]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <XMC_CAN_MO_Receive+0x182>
 800764a:	7d7b      	ldrb	r3, [r7, #21]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f47f af63 	bne.w	8007518 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 8007658:	2300      	movs	r3, #0
 800765a:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 800765c:	7dfb      	ldrb	r3, [r7, #23]
}
 800765e:	4618      	mov	r0, r3
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	1ffc0000 	.word	0x1ffc0000

08007670 <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  if(event != XMC_CAN_NODE_EVENT_CFCIE)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007680:	d006      	beq.n	8007690 <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	431a      	orrs	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	e005      	b.n	800769c <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	699a      	ldr	r2, [r3, #24]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	619a      	str	r2, [r3, #24]
  }
}
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop

080076a8 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076b6:	60da      	str	r2, [r3, #12]
}
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop

080076c4 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a10      	ldr	r2, [pc, #64]	; (8007710 <XMC_CCU4_lDeassertReset+0x4c>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d103      	bne.n	80076dc <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80076d4:	2004      	movs	r0, #4
 80076d6:	f7ff f8ef 	bl	80068b8 <XMC_SCU_RESET_DeassertPeripheralReset>
 80076da:	e016      	b.n	800770a <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a0d      	ldr	r2, [pc, #52]	; (8007714 <XMC_CCU4_lDeassertReset+0x50>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d103      	bne.n	80076ec <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 80076e4:	2008      	movs	r0, #8
 80076e6:	f7ff f8e7 	bl	80068b8 <XMC_SCU_RESET_DeassertPeripheralReset>
 80076ea:	e00e      	b.n	800770a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a0a      	ldr	r2, [pc, #40]	; (8007718 <XMC_CCU4_lDeassertReset+0x54>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d103      	bne.n	80076fc <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 80076f4:	2010      	movs	r0, #16
 80076f6:	f7ff f8df 	bl	80068b8 <XMC_SCU_RESET_DeassertPeripheralReset>
 80076fa:	e006      	b.n	800770a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a07      	ldr	r2, [pc, #28]	; (800771c <XMC_CCU4_lDeassertReset+0x58>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d102      	bne.n	800770a <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8007704:	4806      	ldr	r0, [pc, #24]	; (8007720 <XMC_CCU4_lDeassertReset+0x5c>)
 8007706:	f7ff f8d7 	bl	80068b8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	4000c000 	.word	0x4000c000
 8007714:	40010000 	.word	0x40010000
 8007718:	40014000 	.word	0x40014000
 800771c:	48004000 	.word	0x48004000
 8007720:	10000001 	.word	0x10000001

08007724 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 800772c:	2010      	movs	r0, #16
 800772e:	f7ff fa13 	bl	8006b58 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff ffc6 	bl	80076c4 <XMC_CCU4_lDeassertReset>
#endif
}
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop

08007740 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7ff ffe9 	bl	8007724 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff ffa8 	bl	80076a8 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007764:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8007766:	78fb      	ldrb	r3, [r7, #3]
 8007768:	039b      	lsls	r3, r3, #14
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	4313      	orrs	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	601a      	str	r2, [r3, #0]
}
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	795b      	ldrb	r3, [r3, #5]
 8007792:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007796:	b2db      	uxtb	r3, r3
 8007798:	051a      	lsls	r2, r3, #20
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	791b      	ldrb	r3, [r3, #4]
 80077a2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	795b      	ldrb	r3, [r3, #5]
 80077b2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	461a      	mov	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	795b      	ldrb	r3, [r3, #5]
 80077c2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	461a      	mov	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	791b      	ldrb	r3, [r3, #4]
 80077d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <XMC_CCU4_SLICE_SetPrescaler>:
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007800:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 8007802:	78fb      	ldrb	r3, [r7, #3]
 8007804:	021b      	lsls	r3, r3, #8
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	4313      	orrs	r3, r2
 800780a:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	629a      	str	r2, [r3, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8007812:	78fa      	ldrb	r2, [r7, #3]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop

08007824 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	70fb      	strb	r3, [r7, #3]
 8007830:	4613      	mov	r3, r2
 8007832:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800783a:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 800783c:	78fb      	ldrb	r3, [r7, #3]
 800783e:	2b09      	cmp	r3, #9
 8007840:	d82c      	bhi.n	800789c <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8007842:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	08007871 	.word	0x08007871
 800784c:	08007871 	.word	0x08007871
 8007850:	0800787b 	.word	0x0800787b
 8007854:	0800787b 	.word	0x0800787b
 8007858:	0800789d 	.word	0x0800789d
 800785c:	0800789d 	.word	0x0800789d
 8007860:	0800789d 	.word	0x0800789d
 8007864:	0800789d 	.word	0x0800789d
 8007868:	08007885 	.word	0x08007885
 800786c:	08007891 	.word	0x08007891
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8007870:	2303      	movs	r3, #3
 8007872:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8007874:	2300      	movs	r3, #0
 8007876:	617b      	str	r3, [r7, #20]
      break;
 8007878:	e016      	b.n	80078a8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 800787a:	230c      	movs	r3, #12
 800787c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 800787e:	2302      	movs	r3, #2
 8007880:	617b      	str	r3, [r7, #20]
      break;
 8007882:	e011      	b.n	80078a8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8007884:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007888:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 800788a:	2308      	movs	r3, #8
 800788c:	617b      	str	r3, [r7, #20]
      break;
 800788e:	e00b      	b.n	80078a8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8007890:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007894:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8007896:	230a      	movs	r3, #10
 8007898:	617b      	str	r3, [r7, #20]
      break;
 800789a:	e005      	b.n	80078a8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 800789c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80078a0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 80078a2:	230c      	movs	r3, #12
 80078a4:	617b      	str	r3, [r7, #20]
      break;
 80078a6:	bf00      	nop
  }
  
  srs &= ~mask; 
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	43db      	mvns	r3, r3
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	4013      	ands	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 80078b2:	78ba      	ldrb	r2, [r7, #2]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	4313      	orrs	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80078c8:	371c      	adds	r7, #28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop

080078d4 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	460b      	mov	r3, r1
 80078de:	607a      	str	r2, [r7, #4]
 80078e0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f7fe fe42 	bl	800656c <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80078ec:	7afb      	ldrb	r3, [r7, #11]
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4619      	mov	r1, r3
 80078f2:	230f      	movs	r3, #15
 80078f4:	408b      	lsls	r3, r1
 80078f6:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 80078f8:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	7af9      	ldrb	r1, [r7, #11]
 8007900:	0089      	lsls	r1, r1, #2
 8007902:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8007904:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 800790a:	7afa      	ldrb	r2, [r7, #11]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6859      	ldr	r1, [r3, #4]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	3204      	adds	r2, #4
 8007914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop

08007920 <XMC_ERU_OGU_Init>:

/* Initializes the selected ERU_OGUy channel with the config structure.  */
void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_OGU_CONFIG_t *const config)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	460b      	mov	r3, r1
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f7fe fe1c 	bl	800656c <XMC_ERU_Enable>

  eru->EXOCON[channel] = config->raw;
 8007934:	7afa      	ldrb	r2, [r7, #11]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6819      	ldr	r1, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3208      	adds	r2, #8
 800793e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	460b      	mov	r3, r1
 8007952:	70fb      	strb	r3, [r7, #3]
 8007954:	4613      	mov	r3, r2
 8007956:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800795c:	78fb      	ldrb	r3, [r7, #3]
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	4619      	mov	r1, r3
 8007962:	2303      	movs	r3, #3
 8007964:	408b      	lsls	r3, r1
 8007966:	43db      	mvns	r3, r3
 8007968:	401a      	ands	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007972:	78bb      	ldrb	r3, [r7, #2]
 8007974:	78f9      	ldrb	r1, [r7, #3]
 8007976:	0049      	lsls	r1, r1, #1
 8007978:	408b      	lsls	r3, r1
 800797a:	431a      	orrs	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop

0800798c <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8007996:	783b      	ldrb	r3, [r7, #0]
 8007998:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800799c:	b2db      	uxtb	r3, r3
 800799e:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 80079a0:	78bb      	ldrb	r3, [r7, #2]
 80079a2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80079b6:	78fb      	ldrb	r3, [r7, #3]
 80079b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80079ca:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 80079ee:	3714      	adds	r7, #20
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a06:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop

08007a1c <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop

08007a40 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8007a44:	2001      	movs	r0, #1
 8007a46:	f7fe ff37 	bl	80068b8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8007a56:	f7ff fff3 	bl	8007a40 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	695a      	ldr	r2, [r3, #20]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	691a      	ldr	r2, [r3, #16]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop

08007aa0 <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	4613      	mov	r3, r2
 8007aae:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 8007ab0:	79fb      	ldrb	r3, [r7, #7]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d109      	bne.n	8007aca <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
	XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	f240 731f 	movw	r3, #1823	; 0x71f
 8007abc:	4013      	ands	r3, r2
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	3128      	adds	r1, #40	; 0x28
 8007ac4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007ac8:	e007      	b.n	8007ada <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	4b05      	ldr	r3, [pc, #20]	; (8007ae4 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 8007ace:	4013      	ands	r3, r2
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	3128      	adds	r1, #40	; 0x28
 8007ad6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	071f0000 	.word	0x071f0000

08007ae8 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007af6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007b00:	2300      	movs	r3, #0
 8007b02:	73fb      	strb	r3, [r7, #15]
 8007b04:	e017      	b.n	8007b36 <XMC_VADC_GLOBAL_StartupCalibration+0x4e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
 8007b08:	4a0f      	ldr	r2, [pc, #60]	; (8007b48 <XMC_VADC_GLOBAL_StartupCalibration+0x60>)
 8007b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b0e:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d008      	beq.n	8007b30 <XMC_VADC_GLOBAL_StartupCalibration+0x48>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8007b1e:	e000      	b.n	8007b22 <XMC_VADC_GLOBAL_StartupCalibration+0x3a>
      {
        __NOP();
 8007b20:	bf00      	nop
  {
    group_ptr = g_xmc_vadc_group_array[i];
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1f7      	bne.n	8007b20 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	3301      	adds	r3, #1
 8007b34:	73fb      	strb	r3, [r7, #15]
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d9e4      	bls.n	8007b06 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	0800f798 	.word	0x0800f798

08007b4c <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	70fb      	strb	r3, [r7, #3]
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8007b58:	78fb      	ldrb	r3, [r7, #3]
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d903      	bls.n	8007b66 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 8007b5e:	78fb      	ldrb	r3, [r7, #3]
 8007b60:	3b04      	subs	r3, #4
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	e001      	b.n	8007b6a <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 8007b66:	78fb      	ldrb	r3, [r7, #3]
 8007b68:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007b70:	f023 020f 	bic.w	r2, r3, #15
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	6859      	ldr	r1, [r3, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f000 f828 	bl	8007bfc <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	6859      	ldr	r1, [r3, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f000 f821 	bl	8007bfc <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	6899      	ldr	r1, [r3, #8]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	f000 f81a 	bl	8007bfc <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	6899      	ldr	r1, [r3, #8]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f000 f813 	bl	8007bfc <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	691a      	ldr	r2, [r3, #16]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	68da      	ldr	r2, [r3, #12]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	6819      	ldr	r1, [r3, #0]
 8007bf0:	f7ff fecc 	bl	800798c <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop

08007bfc <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b08d      	sub	sp, #52	; 0x34
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8007c0c:	79fb      	ldrb	r3, [r7, #7]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d113      	bne.n	8007c3a <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8007c12:	2308      	movs	r3, #8
 8007c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8007c16:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8007c1a:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8007c20:	231f      	movs	r3, #31
 8007c22:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8007c24:	7a3b      	ldrb	r3, [r7, #8]
 8007c26:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8007c2e:	7a7b      	ldrb	r3, [r7, #9]
 8007c30:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	76fb      	strb	r3, [r7, #27]
 8007c38:	e013      	b.n	8007c62 <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8007c3a:	2318      	movs	r3, #24
 8007c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8007c3e:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8007c42:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8007c44:	2310      	movs	r3, #16
 8007c46:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8007c48:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8007c4c:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8007c4e:	7abb      	ldrb	r3, [r7, #10]
 8007c50:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	3228      	adds	r2, #40	; 0x28
 8007c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6c:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	43db      	mvns	r3, r3
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	4013      	ands	r3, r2
 8007c76:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8007c78:	7efa      	ldrb	r2, [r7, #27]
 8007c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	43db      	mvns	r3, r3
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	69fa      	ldr	r2, [r7, #28]
 8007c94:	fa02 f303 	lsl.w	r3, r2, r3
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	3228      	adds	r2, #40	; 0x28
 8007ca4:	6979      	ldr	r1, [r7, #20]
 8007ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007caa:	3734      	adds	r7, #52	; 0x34
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cc6:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 0303 	bic.w	r3, r3, #3
 8007cce:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8007cd0:	78fb      	ldrb	r3, [r7, #3]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop

08007cec <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	75fb      	strb	r3, [r7, #23]
 8007cfa:	e009      	b.n	8007d10 <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
 8007cfe:	4a39      	ldr	r2, [pc, #228]	; (8007de4 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7ff fe89 	bl	8007a1c <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	75fb      	strb	r3, [r7, #23]
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d9f2      	bls.n	8007cfc <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
 8007d16:	2300      	movs	r3, #0
 8007d18:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	f003 0303 	and.w	r3, r3, #3
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8007d28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d2c:	613b      	str	r3, [r7, #16]
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75fb      	strb	r3, [r7, #23]
 8007d32:	e021      	b.n	8007d78 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
 8007d36:	4a2b      	ldr	r2, [pc, #172]	; (8007de4 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d40:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d48:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	021b      	lsls	r3, r3, #8
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]
  
    /* Program the start mode */
    reg |= conv_start_mask;
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	4a1f      	ldr	r2, [pc, #124]	; (8007de4 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
 8007d74:	3301      	adds	r3, #1
 8007d76:	75fb      	strb	r3, [r7, #23]
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d9da      	bls.n	8007d34 <XMC_VADC_GLOBAL_BackgroundInit+0x48>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f043 0201 	orr.w	r2, r3, #1
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	f003 0303 	and.w	r3, r3, #3
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d107      	bne.n	8007dbc <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007db2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	75fb      	strb	r3, [r7, #23]
 8007dc0:	e009      	b.n	8007dd6 <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
 8007dc4:	4a07      	ldr	r2, [pc, #28]	; (8007de4 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff fe14 	bl	80079f8 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007dd0:	7dfb      	ldrb	r3, [r7, #23]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	75fb      	strb	r3, [r7, #23]
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d9f2      	bls.n	8007dc2 <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	0800f798 	.word	0x0800f798

08007de8 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b089      	sub	sp, #36	; 0x24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	7a1b      	ldrb	r3, [r3, #8]
 8007df8:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e00:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2201      	movs	r2, #1
 8007e06:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0a:	43db      	mvns	r3, r3
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	4013      	ands	r3, r2
 8007e10:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	7a5b      	ldrb	r3, [r3, #9]
 8007e2c:	b25b      	sxtb	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	db29      	blt.n	8007e86 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d10a      	bne.n	8007e52 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8007e3c:	2308      	movs	r3, #8
 8007e3e:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8007e50:	e00c      	b.n	8007e6c <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d109      	bne.n	8007e6c <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e62:	f023 021f 	bic.w	r2, r3, #31
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	7a52      	ldrb	r2, [r2, #9]
 8007e76:	b251      	sxtb	r1, r2
 8007e78:	69fa      	ldr	r2, [r7, #28]
 8007e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	431a      	orrs	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6819      	ldr	r1, [r3, #0]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	3280      	adds	r2, #128	; 0x80
 8007ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8007ea6:	3724      	adds	r7, #36	; 0x24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <XMC_WDT_Enable>:
 * API IMPLEMENTATION
  ********************************************************************************************************************/

/* Enables watchdog clock and releases watchdog reset. */
void XMC_WDT_Enable(void)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0
#if UC_FAMILY == XMC4
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_WDT);
 8007eb4:	2020      	movs	r0, #32
 8007eb6:	f7fe fe4f 	bl	8006b58 <XMC_SCU_CLOCK_EnableClock>

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_WDT);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_WDT);
 8007eba:	4802      	ldr	r0, [pc, #8]	; (8007ec4 <XMC_WDT_Enable+0x14>)
 8007ebc:	f7fe fcfc 	bl	80068b8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
}
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20000002 	.word	0x20000002

08007ec8 <XMC_WDT_Init>:
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_WDT);
#endif
}
/* Initializes and configures watchdog with configuration data pointed by \a config. */
void XMC_WDT_Init(const XMC_WDT_CONFIG_t *const config)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  XMC_WDT_Enable();
 8007ed0:	f7ff ffee 	bl	8007eb0 <XMC_WDT_Enable>
  WDT->CTR = config->wdt_ctr;
 8007ed4:	4a07      	ldr	r2, [pc, #28]	; (8007ef4 <XMC_WDT_Init+0x2c>)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	6053      	str	r3, [r2, #4]
  WDT->WLB = config->window_lower_bound;
 8007edc:	4a05      	ldr	r2, [pc, #20]	; (8007ef4 <XMC_WDT_Init+0x2c>)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	6113      	str	r3, [r2, #16]
  WDT->WUB = config->window_upper_bound;
 8007ee4:	4a03      	ldr	r2, [pc, #12]	; (8007ef4 <XMC_WDT_Init+0x2c>)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	6153      	str	r3, [r2, #20]
}
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	50008000 	.word	0x50008000

08007ef8 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8007f00:	4b14      	ldr	r3, [pc, #80]	; (8007f54 <_sbrk+0x5c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d102      	bne.n	8007f0e <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8007f08:	4b12      	ldr	r3, [pc, #72]	; (8007f54 <_sbrk+0x5c>)
 8007f0a:	4a13      	ldr	r2, [pc, #76]	; (8007f58 <_sbrk+0x60>)
 8007f0c:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8007f0e:	4b11      	ldr	r3, [pc, #68]	; (8007f54 <_sbrk+0x5c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3303      	adds	r3, #3
 8007f18:	f023 0303 	bic.w	r3, r3, #3
 8007f1c:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8007f1e:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <_sbrk+0x5c>)
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4413      	add	r3, r2
 8007f26:	4a0d      	ldr	r2, [pc, #52]	; (8007f5c <_sbrk+0x64>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d207      	bcs.n	8007f3c <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8007f2c:	4b09      	ldr	r3, [pc, #36]	; (8007f54 <_sbrk+0x5c>)
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4413      	add	r3, r2
 8007f34:	4a07      	ldr	r2, [pc, #28]	; (8007f54 <_sbrk+0x5c>)
 8007f36:	6013      	str	r3, [r2, #0]
    return (base);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	e006      	b.n	8007f4a <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8007f3c:	f007 f986 	bl	800f24c <__errno>
 8007f40:	4602      	mov	r2, r0
 8007f42:	230c      	movs	r3, #12
 8007f44:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8007f46:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20000690 	.word	0x20000690
 8007f58:	20001530 	.word	0x20001530
 8007f5c:	2000ffc0 	.word	0x2000ffc0

08007f60 <_init>:

/* Init */
void _init(void)
{}
 8007f60:	b480      	push	{r7}
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <WATCHDOG_Init>:
  return (version);
}

/* Initializes the watchdog timer with the generated configuration */
WATCHDOG_STATUS_t WATCHDOG_Init(WATCHDOG_t *handle)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;

  XMC_ASSERT("WATCHDOG_Init:handle NULL" , (handle != NULL));

  status = WATCHDOG_STATUS_SUCCESS;
 8007f74:	2300      	movs	r3, #0
 8007f76:	73fb      	strb	r3, [r7, #15]

  /* Check for app instance is initialized or not */
  if (false == handle->initialized)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	791b      	ldrb	r3, [r3, #4]
 8007f7c:	f083 0301 	eor.w	r3, r3, #1
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00f      	beq.n	8007fa6 <WATCHDOG_Init+0x3a>
  {
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      /* Service Event Handling */
      status = WATCHDOG_lPrewarning_Configure(handle);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f812 	bl	8007fb0 <WATCHDOG_lPrewarning_Configure>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73fb      	strb	r3, [r7, #15]
      if(WATCHDOG_STATUS_FAILURE != status)
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d007      	beq.n	8007fa6 <WATCHDOG_Init+0x3a>
      {
#endif
        /* Initialize the WDT peripheral */
        XMC_WDT_Init(handle->config);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff ff94 	bl	8007ec8 <XMC_WDT_Init>
        /* Update the initialization flag */
        handle->initialized = true;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	711a      	strb	r2, [r3, #4]
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      }
#endif
  }

  return (status);
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <WATCHDOG_lPrewarning_Configure>:
#if (WATCHDOG_PREWARNING_CHECK == 1U)
/*
 * Register the Pre-warning event with GLOBAL_SCU APP
 */
WATCHDOG_STATUS_t WATCHDOG_lPrewarning_Configure(WATCHDOG_t *handle)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;
  status = WATCHDOG_STATUS_SUCCESS;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	73fb      	strb	r3, [r7, #15]
      status = WATCHDOG_STATUS_FAILURE;
    }
#endif

#if (WATCHDOG_EVENT_VIA_NMI == 1U)
    XMC_SCU_INTERRUPT_EnableEvent((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8007fbc:	2001      	movs	r0, #1
 8007fbe:	f7fe fbc7 	bl	8006750 <XMC_SCU_INTERRUPT_EnableEvent>
    XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8007fc2:	2001      	movs	r0, #1
 8007fc4:	f7fe fc66 	bl	8006894 <XMC_SCU_INTERRUPT_EnableNmiRequest>
#endif

  return (status);
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop

08007fd4 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	409a      	lsls	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	60da      	str	r2, [r3, #12]
}
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	60da      	str	r2, [r3, #12]
}
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8008018:	887a      	ldrh	r2, [r7, #2]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8008034:	887a      	ldrh	r2, [r7, #2]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	611a      	str	r2, [r3, #16]
}
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop

08008060 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008072:	78fb      	ldrb	r3, [r7, #3]
 8008074:	2101      	movs	r1, #1
 8008076:	fa01 f303 	lsl.w	r3, r1, r3
 800807a:	431a      	orrs	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 8008094:	2301      	movs	r3, #1
 8008096:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL))

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d14d      	bne.n	800813e <PWM_lCCU4_Init+0xb2>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 fa78 	bl	800859c <GLOBAL_CCU4_Init>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73fb      	strb	r3, [r7, #15]

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d13f      	bne.n	8008136 <PWM_lCCU4_Init+0xaa>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	689a      	ldr	r2, [r3, #8]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	4610      	mov	r0, r2
 80080c0:	4619      	mov	r1, r3
 80080c2:	f7ff fb5b 	bl	800777c <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	689a      	ldr	r2, [r3, #8]
    		                             (uint16_t)handle_ptr->period_value);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	4610      	mov	r0, r2
 80080d2:	4619      	mov	r1, r3
 80080d4:	f7ff ff9a 	bl	800800c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	4610      	mov	r0, r2
 80080e4:	4619      	mov	r1, r3
 80080e6:	f7ff ff9f 	bl	8008028 <XMC_CCU4_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f2:	4610      	mov	r0, r2
 80080f4:	4619      	mov	r1, r3
 80080f6:	f7ff ffa5 	bl	8008044 <XMC_CCU4_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f824 	bl	8008148 <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6919      	ldr	r1, [r3, #16]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	4608      	mov	r0, r1
 8008110:	4611      	mov	r1, r2
 8008112:	461a      	mov	r2, r3
 8008114:	f7fe fa3c 	bl	8006590 <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008126:	2b00      	cmp	r3, #0
 8008128:	d002      	beq.n	8008130 <PWM_lCCU4_Init+0xa4>
      {
        PWM_Start(handle_ptr);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f92e 	bl	800838c <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
 8008130:	2300      	movs	r3, #0
 8008132:	73fb      	strb	r3, [r7, #15]
 8008134:	e003      	b.n	800813e <PWM_lCCU4_Init+0xb2>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2202      	movs	r2, #2
 800813a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }

  }
  return (status);
 800813e:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_lCCU4_Init() api */
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00f      	beq.n	800817a <PWM_lCCU4_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	4618      	mov	r0, r3
 8008160:	2100      	movs	r1, #0
 8008162:	f7ff ff7d 	bl	8008060 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	689a      	ldr	r2, [r3, #8]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8008170:	4610      	mov	r0, r2
 8008172:	2100      	movs	r1, #0
 8008174:	461a      	mov	r2, r3
 8008176:	f7ff fb55 	bl	8007824 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00f      	beq.n	80081a4 <PWM_lCCU4_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	4618      	mov	r0, r3
 800818a:	2102      	movs	r1, #2
 800818c:	f7ff ff68 	bl	8008060 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	689a      	ldr	r2, [r3, #8]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800819a:	4610      	mov	r0, r2
 800819c:	2102      	movs	r1, #2
 800819e:	461a      	mov	r2, r3
 80081a0:	f7ff fb40 	bl	8007824 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop

080081ac <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d004      	beq.n	80081c8 <PWM_lCCU4_Start+0x1c>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80081c4:	2b04      	cmp	r3, #4
 80081c6:	d111      	bne.n	80081ec <PWM_lCCU4_Start+0x40>
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80081d2:	4610      	mov	r0, r2
 80081d4:	4619      	mov	r1, r3
 80081d6:	f7ff fefd 	bl	8007fd4 <XMC_CCU4_EnableClock>
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	4618      	mov	r0, r3
 80081e0:	f7ff ff08 	bl	8007ff4 <XMC_CCU4_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2203      	movs	r2, #3
 80081e8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU4_Start:start PWM")
  }
} /* end of PWM_lCCU4_Start() api */
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop

080081f4 <PWM_lCCU4_SetDutyCycle>:
} /* end of PWM_lCCU4_Stop() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Sets the duty cycle for CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint32_t compare;
  PWM_STATUS_t status;

  XMC_ASSERT("PWM_lCCU4_SetDutyCycle:Invalid duty_cycle " , ((duty_cycle >= 0) && (duty_cycle <= PWM_MAX_DUTY_CYCLE)))

  status = PWM_STATUS_FAILURE;
 80081fe:	2301      	movs	r3, #1
 8008200:	75fb      	strb	r3, [r7, #23]
  if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008208:	2b02      	cmp	r3, #2
 800820a:	d02c      	beq.n	8008266 <PWM_lCCU4_SetDutyCycle+0x72>
  {
    /* Duty cycle needs between 0 and 10000 */
    if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008212:	4293      	cmp	r3, r2
 8008214:	d827      	bhi.n	8008266 <PWM_lCCU4_SetDutyCycle+0x72>
    {
      /* period = (PR + 1) */
      period = (uint32_t)handle_ptr->period_value + 1U;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	3301      	adds	r3, #1
 800821c:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8008224:	3310      	adds	r3, #16
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	fb02 f303 	mul.w	r3, r2, r3
 800822c:	4a10      	ldr	r2, [pc, #64]	; (8008270 <PWM_lCCU4_SetDutyCycle+0x7c>)
 800822e:	fba2 2303 	umull	r2, r3, r2, r3
 8008232:	0b5b      	lsrs	r3, r3, #13
 8008234:	60fb      	str	r3, [r7, #12]

      handle_ptr->compare_value = compare;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	619a      	str	r2, [r3, #24]
      handle_ptr->duty_cycle = duty_cycle;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	621a      	str	r2, [r3, #32]

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689a      	ldr	r2, [r3, #8]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	b29b      	uxth	r3, r3
 800824a:	4610      	mov	r0, r2
 800824c:	4619      	mov	r1, r3
 800824e:	f7ff feeb 	bl	8008028 <XMC_CCU4_SLICE_SetTimerCompareMatch>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	4610      	mov	r0, r2
 800825c:	4619      	mov	r1, r3
 800825e:	f7ff fef1 	bl	8008044 <XMC_CCU4_EnableShadowTransfer>
      status = PWM_STATUS_SUCCESS;
 8008262:	2300      	movs	r3, #0
 8008264:	75fb      	strb	r3, [r7, #23]
    }
  }

  XMC_DEBUG("PWM_lCCU4_SetDutyCycle:dutycycle set")
  return (status);
 8008266:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_lCCU4_SetDutyCycle() api */
 8008268:	4618      	mov	r0, r3
 800826a:	3718      	adds	r7, #24
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	d1b71759 	.word	0xd1b71759

08008274 <PWM_lCCU4_SetFreq>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Sets the frequency for CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_SetFreq(PWM_t *const handle_ptr, uint32_t pwm_freq_hz)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  uint32_t period_value;
  uint32_t compare;

  XMC_ASSERT("PWM_lCCU4_SetFreq:Invalid pwm_freq_hz " , (pwm_freq_hz != 0U))

  status = handle_ptr->state;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008284:	75fb      	strb	r3, [r7, #23]
  prescaler = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	75bb      	strb	r3, [r7, #22]
  period_value = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	613b      	str	r3, [r7, #16]

  /* Can't set the frequency when the PWM is not yet initialized or when required frequency is 0*/
  if ((status != PWM_STATUS_UNINITIALIZED) && ((uint32_t)0 != pwm_freq_hz))
 800828e:	7dfb      	ldrb	r3, [r7, #23]
 8008290:	2b02      	cmp	r3, #2
 8008292:	d05b      	beq.n	800834c <PWM_lCCU4_SetFreq+0xd8>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d058      	beq.n	800834c <PWM_lCCU4_SetFreq+0xd8>
  {
    status = PWM_STATUS_SUCCESS;
 800829a:	2300      	movs	r3, #0
 800829c:	75fb      	strb	r3, [r7, #23]
    /*Get the Module frequency*/
    module_freq = handle_ptr->global_ccu4_handle->module_frequency;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	60fb      	str	r3, [r7, #12]

    /*Calculate the prescaler and the period register values.*/
    while (prescaler <= PWM_MAX_PRESCALER)
 80082a6:	e00f      	b.n	80082c8 <PWM_lCCU4_SetFreq+0x54>
    {
      period_value = (uint32_t)((uint32_t)module_freq / (uint32_t)pwm_freq_hz) >> (uint32_t)prescaler;
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80082b0:	7dbb      	ldrb	r3, [r7, #22]
 80082b2:	fa22 f303 	lsr.w	r3, r2, r3
 80082b6:	613b      	str	r3, [r7, #16]
      /*If the prescaler selected is not big enough goto the next prescaler value else come out.*/
      if (period_value <= PWM_MAX_TIMER_COUNT )
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082be:	d200      	bcs.n	80082c2 <PWM_lCCU4_SetFreq+0x4e>
      {
        break;
 80082c0:	e005      	b.n	80082ce <PWM_lCCU4_SetFreq+0x5a>
      }
      prescaler++;
 80082c2:	7dbb      	ldrb	r3, [r7, #22]
 80082c4:	3301      	adds	r3, #1
 80082c6:	75bb      	strb	r3, [r7, #22]
    status = PWM_STATUS_SUCCESS;
    /*Get the Module frequency*/
    module_freq = handle_ptr->global_ccu4_handle->module_frequency;

    /*Calculate the prescaler and the period register values.*/
    while (prescaler <= PWM_MAX_PRESCALER)
 80082c8:	7dbb      	ldrb	r3, [r7, #22]
 80082ca:	2b0f      	cmp	r3, #15
 80082cc:	d9ec      	bls.n	80082a8 <PWM_lCCU4_SetFreq+0x34>
      }
      prescaler++;
    }

    /*Can't set the frequency if the required value is too small or when the required frequency is too large.*/
    if ((prescaler > PWM_MAX_PRESCALER) || ((uint32_t)0 == period_value))
 80082ce:	7dbb      	ldrb	r3, [r7, #22]
 80082d0:	2b0f      	cmp	r3, #15
 80082d2:	d802      	bhi.n	80082da <PWM_lCCU4_SetFreq+0x66>
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d102      	bne.n	80082e0 <PWM_lCCU4_SetFreq+0x6c>
    {
      XMC_DEBUG("PWM_lCCU4_SetFreq:Frequency could not be set")
      status = PWM_STATUS_FAILURE;
 80082da:	2301      	movs	r3, #1
 80082dc:	75fb      	strb	r3, [r7, #23]
      }
      prescaler++;
    }

    /*Can't set the frequency if the required value is too small or when the required frequency is too large.*/
    if ((prescaler > PWM_MAX_PRESCALER) || ((uint32_t)0 == period_value))
 80082de:	e037      	b.n	8008350 <PWM_lCCU4_SetFreq+0xdc>
      status = PWM_STATUS_FAILURE;
    }
    else
    {
      /*Calculate the new compare values using new period values */
      compare = (period_value * (PWM_MAX_DUTY_CYCLE - handle_ptr->duty_cycle))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 80082e8:	3310      	adds	r3, #16
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	fb02 f303 	mul.w	r3, r2, r3
 80082f0:	4a1a      	ldr	r2, [pc, #104]	; (800835c <PWM_lCCU4_SetFreq+0xe8>)
 80082f2:	fba2 2303 	umull	r2, r3, r2, r3
 80082f6:	0b5b      	lsrs	r3, r3, #13
 80082f8:	60bb      	str	r3, [r7, #8]
    		     / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE);

      XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, prescaler);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	689a      	ldr	r2, [r3, #8]
 80082fe:	7dbb      	ldrb	r3, [r7, #22]
 8008300:	4610      	mov	r0, r2
 8008302:	4619      	mov	r1, r3
 8008304:	f7ff fa70 	bl	80077e8 <XMC_CCU4_SLICE_SetPrescaler>

      /* The period register is always one count less than calculated.*/
      period_value = period_value - (uint32_t)1;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	3b01      	subs	r3, #1
 800830c:	613b      	str	r3, [r7, #16]
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)(period_value));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	689a      	ldr	r2, [r3, #8]
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	b29b      	uxth	r3, r3
 8008316:	4610      	mov	r0, r2
 8008318:	4619      	mov	r1, r3
 800831a:	f7ff fe77 	bl	800800c <XMC_CCU4_SLICE_SetTimerPeriodMatch>

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	689a      	ldr	r2, [r3, #8]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	b29b      	uxth	r3, r3
 8008326:	4610      	mov	r0, r2
 8008328:	4619      	mov	r1, r3
 800832a:	f7ff fe7d 	bl	8008028 <XMC_CCU4_SLICE_SetTimerCompareMatch>

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	4610      	mov	r0, r2
 8008338:	4619      	mov	r1, r3
 800833a:	f7ff fe83 	bl	8008044 <XMC_CCU4_EnableShadowTransfer>

      handle_ptr->compare_value = compare;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	619a      	str	r2, [r3, #24]
      handle_ptr->period_value = period_value;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	61da      	str	r2, [r3, #28]
      }
      prescaler++;
    }

    /*Can't set the frequency if the required value is too small or when the required frequency is too large.*/
    if ((prescaler > PWM_MAX_PRESCALER) || ((uint32_t)0 == period_value))
 800834a:	e001      	b.n	8008350 <PWM_lCCU4_SetFreq+0xdc>
      XMC_DEBUG("PWM_lCCU4_SetFreq:frequency set")
    }
  }
  else
  {
    status = PWM_STATUS_FAILURE;
 800834c:	2301      	movs	r3, #1
 800834e:	75fb      	strb	r3, [r7, #23]
    XMC_DEBUG("PWM_lCCU4_SetFreq:Frequency could not be set")
  }


  return status;
 8008350:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_lCCU4_SetFreq() api */
 8008352:	4618      	mov	r0, r3
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	d1b71759 	.word	0xd1b71759

08008360 <PWM_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function initializes the app */
PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 8008368:	2301      	movs	r3, #1
 800836a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008372:	2b00      	cmp	r3, #0
 8008374:	d104      	bne.n	8008380 <PWM_Init+0x20>
  {
    status = PWM_lCCU4_Init(handle_ptr);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7ff fe88 	bl	800808c <PWM_lCCU4_Init>
 800837c:	4603      	mov	r3, r0
 800837e:	73fb      	strb	r3, [r7, #15]
  {
    status = PWM_lCCU8_Init(handle_ptr);
  }
#endif

  return (status);
 8008380:	7bfb      	ldrb	r3, [r7, #15]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop

0800838c <PWM_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function starts the PWM generation. This needs to be called even if external start is configured.*/
void PWM_Start(PWM_t *const handle_ptr)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800839a:	2b00      	cmp	r3, #0
 800839c:	d102      	bne.n	80083a4 <PWM_Start+0x18>
  {
    PWM_lCCU4_Start(handle_ptr);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f7ff ff04 	bl	80081ac <PWM_lCCU4_Start>
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    PWM_lCCU8_Start(handle_ptr);
  }
#endif
}
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop

080083ac <PWM_SetDutyCycle>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*This function is used to set the duty cycle (uint32_t) of the PWM waveform  */
PWM_STATUS_t PWM_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 80083b6:	2301      	movs	r3, #1
 80083b8:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d105      	bne.n	80083d0 <PWM_SetDutyCycle+0x24>
  {
    status = PWM_lCCU4_SetDutyCycle(handle_ptr, duty_cycle);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	f7ff ff14 	bl	80081f4 <PWM_lCCU4_SetDutyCycle>
 80083cc:	4603      	mov	r3, r0
 80083ce:	73fb      	strb	r3, [r7, #15]
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    status = PWM_lCCU8_SetDutyCycle(handle_ptr, duty_cycle);
  }
#endif
  return (status);
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop

080083dc <PWM_SetFreq>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*This function changes the PWM frequency. Input parameter is the frequency value in Hz */
PWM_STATUS_t PWM_SetFreq(PWM_t *const handle_ptr, uint32_t pwm_freq_hz)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 80083e6:	2301      	movs	r3, #1
 80083e8:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_SetFreq:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d105      	bne.n	8008400 <PWM_SetFreq+0x24>
  {
    status = PWM_lCCU4_SetFreq(handle_ptr, pwm_freq_hz);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	f7ff ff3c 	bl	8008274 <PWM_lCCU4_SetFreq>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73fb      	strb	r3, [r7, #15]
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    status = PWM_lCCU8_SetFreq(handle_ptr, pwm_freq_hz);
  }
#endif
  return status;
 8008400:	7bfb      	ldrb	r3, [r7, #15]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop

0800840c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008410:	4b04      	ldr	r3, [pc, #16]	; (8008424 <__NVIC_GetPriorityGrouping+0x18>)
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008418:	0a1b      	lsrs	r3, r3, #8
}
 800841a:	4618      	mov	r0, r3
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	e000ed00 	.word	0xe000ed00

08008428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008436:	2b00      	cmp	r3, #0
 8008438:	db0b      	blt.n	8008452 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800843a:	4908      	ldr	r1, [pc, #32]	; (800845c <__NVIC_EnableIRQ+0x34>)
 800843c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008440:	095b      	lsrs	r3, r3, #5
 8008442:	79fa      	ldrb	r2, [r7, #7]
 8008444:	f002 021f 	and.w	r2, r2, #31
 8008448:	2001      	movs	r0, #1
 800844a:	fa00 f202 	lsl.w	r2, r0, r2
 800844e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	e000e100 	.word	0xe000e100

08008460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	6039      	str	r1, [r7, #0]
 800846a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800846c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008470:	2b00      	cmp	r3, #0
 8008472:	db0a      	blt.n	800848a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008474:	490d      	ldr	r1, [pc, #52]	; (80084ac <__NVIC_SetPriority+0x4c>)
 8008476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	b2d2      	uxtb	r2, r2
 800847e:	0092      	lsls	r2, r2, #2
 8008480:	b2d2      	uxtb	r2, r2
 8008482:	440b      	add	r3, r1
 8008484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8008488:	e00a      	b.n	80084a0 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800848a:	4909      	ldr	r1, [pc, #36]	; (80084b0 <__NVIC_SetPriority+0x50>)
 800848c:	79fb      	ldrb	r3, [r7, #7]
 800848e:	f003 030f 	and.w	r3, r3, #15
 8008492:	3b04      	subs	r3, #4
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	b2d2      	uxtb	r2, r2
 8008498:	0092      	lsls	r2, r2, #2
 800849a:	b2d2      	uxtb	r2, r2
 800849c:	440b      	add	r3, r1
 800849e:	761a      	strb	r2, [r3, #24]
  }
}
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	e000e100 	.word	0xe000e100
 80084b0:	e000ed00 	.word	0xe000ed00

080084b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b089      	sub	sp, #36	; 0x24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f003 0307 	and.w	r3, r3, #7
 80084c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	f1c3 0307 	rsb	r3, r3, #7
 80084ce:	2b06      	cmp	r3, #6
 80084d0:	bf28      	it	cs
 80084d2:	2306      	movcs	r3, #6
 80084d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	3306      	adds	r3, #6
 80084da:	2b06      	cmp	r3, #6
 80084dc:	d902      	bls.n	80084e4 <NVIC_EncodePriority+0x30>
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	e000      	b.n	80084e6 <NVIC_EncodePriority+0x32>
 80084e4:	2300      	movs	r3, #0
 80084e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	2201      	movs	r2, #1
 80084ec:	fa02 f303 	lsl.w	r3, r2, r3
 80084f0:	1e5a      	subs	r2, r3, #1
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	401a      	ands	r2, r3
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	2101      	movs	r1, #1
 80084fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008502:	1e59      	subs	r1, r3, #1
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8008508:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800850a:	4618      	mov	r0, r3
 800850c:	3724      	adds	r7, #36	; 0x24
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop

08008518 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	b25b      	sxtb	r3, r3
 8008526:	4618      	mov	r0, r3
 8008528:	f7ff ff7e 	bl	8008428 <__NVIC_EnableIRQ>
}
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop

08008534 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8008534:	b590      	push	{r4, r7, lr}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	781c      	ldrb	r4, [r3, #0]
 8008540:	f7ff ff64 	bl	800840c <__NVIC_GetPriorityGrouping>
 8008544:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800854a:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8008550:	4608      	mov	r0, r1
 8008552:	4611      	mov	r1, r2
 8008554:	461a      	mov	r2, r3
 8008556:	f7ff ffad 	bl	80084b4 <NVIC_EncodePriority>
 800855a:	4602      	mov	r2, r0
 800855c:	b263      	sxtb	r3, r4
 800855e:	4618      	mov	r0, r3
 8008560:	4611      	mov	r1, r2
 8008562:	f7ff ff7d 	bl	8008460 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	78db      	ldrb	r3, [r3, #3]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d002      	beq.n	8008574 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7ff ffd2 	bl	8008518 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	bd90      	pop	{r4, r7, pc}
 800857e:	bf00      	nop

08008580 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800858e:	60da      	str	r2, [r3, #12]
}
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop

0800859c <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	7b5b      	ldrb	r3, [r3, #13]
 80085a8:	f083 0301 	eor.w	r3, r3, #1
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00f      	beq.n	80085d2 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	689a      	ldr	r2, [r3, #8]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	7b1b      	ldrb	r3, [r3, #12]
 80085ba:	4610      	mov	r0, r2
 80085bc:	4619      	mov	r1, r3
 80085be:	f7ff f8bf 	bl	8007740 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7ff ffda 	bl	8008580 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 80085e4:	2300      	movs	r3, #0
 80085e6:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	7a5b      	ldrb	r3, [r3, #9]
 80085ec:	f083 0301 	eor.w	r3, r3, #1
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00d      	beq.n	8008612 <GLOBAL_CAN_Init+0x36>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4610      	mov	r0, r2
 8008600:	2101      	movs	r1, #1
 8008602:	461a      	mov	r2, r3
 8008604:	f7fe fe22 	bl	800724c <XMC_CAN_InitEx>
#endif
    handle->init_status = true;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 800860e:	2300      	movs	r3, #0
 8008610:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8008612:	7bfb      	ldrb	r3, [r7, #15]

}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	3310      	adds	r3, #16
 8008630:	4619      	mov	r1, r3
 8008632:	2301      	movs	r3, #1
 8008634:	408b      	lsls	r3, r1
 8008636:	431a      	orrs	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	7e1b      	ldrb	r3, [r3, #24]
 8008654:	2b02      	cmp	r3, #2
 8008656:	d149      	bne.n	80086ec <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	695a      	ldr	r2, [r3, #20]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	4610      	mov	r0, r2
 8008662:	4619      	mov	r1, r3
 8008664:	f7ff f9f2 	bl	8007a4c <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8008668:	2300      	movs	r3, #0
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	e02f      	b.n	80086ce <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008676:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	4608      	mov	r0, r1
 8008684:	4619      	mov	r1, r3
 8008686:	f7ff fa85 	bl	8007b94 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4618      	mov	r0, r3
 8008696:	2103      	movs	r1, #3
 8008698:	f7ff fb0c 	bl	8007cb4 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a4:	7a1b      	ldrb	r3, [r3, #8]
 80086a6:	f083 0301 	eor.w	r3, r3, #1
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d005      	beq.n	80086bc <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	4618      	mov	r0, r3
 80086b6:	68f9      	ldr	r1, [r7, #12]
 80086b8:	f7ff ffb0 	bl	800861c <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c4:	2200      	movs	r2, #0
 80086c6:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	3301      	adds	r3, #1
 80086cc:	60fb      	str	r3, [r7, #12]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b03      	cmp	r3, #3
 80086d2:	d9cc      	bls.n	800866e <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	7e5b      	ldrb	r3, [r3, #25]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d004      	beq.n	80086e6 <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff fa01 	bl	8007ae8 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	7e1b      	ldrb	r3, [r3, #24]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	3b04      	subs	r3, #4
 8008708:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3b04      	subs	r3, #4
 8008716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	f023 0201 	bic.w	r2, r3, #1
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	3b04      	subs	r3, #4
 8008726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008728:	4a0c      	ldr	r2, [pc, #48]	; (800875c <pxPortInitialiseStack+0x64>)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	3b14      	subs	r3, #20
 8008732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	3b04      	subs	r3, #4
 800873e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f06f 0202 	mvn.w	r2, #2
 8008746:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	3b20      	subs	r3, #32
 800874c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800874e:	68fb      	ldr	r3, [r7, #12]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	08008761 	.word	0x08008761

08008760 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008766:	2300      	movs	r3, #0
 8008768:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800876a:	4b10      	ldr	r3, [pc, #64]	; (80087ac <prvTaskExitError+0x4c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008772:	d009      	beq.n	8008788 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008774:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	60fb      	str	r3, [r7, #12]
 8008786:	e7fe      	b.n	8008786 <prvTaskExitError+0x26>
 8008788:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800879a:	bf00      	nop
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d0fc      	beq.n	800879c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	20000190 	.word	0x20000190

080087b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80087b0:	4b07      	ldr	r3, [pc, #28]	; (80087d0 <pxCurrentTCBConst2>)
 80087b2:	6819      	ldr	r1, [r3, #0]
 80087b4:	6808      	ldr	r0, [r1, #0]
 80087b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ba:	f380 8809 	msr	PSP, r0
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f04f 0000 	mov.w	r0, #0
 80087c6:	f380 8811 	msr	BASEPRI, r0
 80087ca:	4770      	bx	lr
 80087cc:	f3af 8000 	nop.w

080087d0 <pxCurrentTCBConst2>:
 80087d0:	2000069c 	.word	0x2000069c
 80087d4:	f3af 8000 	nop.w
 80087d8:	f3af 8000 	nop.w
 80087dc:	f3af 8000 	nop.w

080087e0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80087e0:	4808      	ldr	r0, [pc, #32]	; (8008804 <prvPortStartFirstTask+0x24>)
 80087e2:	6800      	ldr	r0, [r0, #0]
 80087e4:	6800      	ldr	r0, [r0, #0]
 80087e6:	f380 8808 	msr	MSP, r0
 80087ea:	f04f 0000 	mov.w	r0, #0
 80087ee:	f380 8814 	msr	CONTROL, r0
 80087f2:	b662      	cpsie	i
 80087f4:	b661      	cpsie	f
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	df00      	svc	0
 8008800:	bf00      	nop
 8008802:	0000      	.short	0x0000
 8008804:	e000ed08 	.word	0xe000ed08

08008808 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800880e:	4b44      	ldr	r3, [pc, #272]	; (8008920 <xPortStartScheduler+0x118>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a44      	ldr	r2, [pc, #272]	; (8008924 <xPortStartScheduler+0x11c>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d109      	bne.n	800882c <xPortStartScheduler+0x24>
 8008818:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	613b      	str	r3, [r7, #16]
 800882a:	e7fe      	b.n	800882a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800882c:	4b3c      	ldr	r3, [pc, #240]	; (8008920 <xPortStartScheduler+0x118>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a3d      	ldr	r2, [pc, #244]	; (8008928 <xPortStartScheduler+0x120>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d109      	bne.n	800884a <xPortStartScheduler+0x42>
 8008836:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	e7fe      	b.n	8008848 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800884a:	4b38      	ldr	r3, [pc, #224]	; (800892c <xPortStartScheduler+0x124>)
 800884c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	b2db      	uxtb	r3, r3
 8008854:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	22ff      	movs	r2, #255	; 0xff
 800885a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	b2db      	uxtb	r3, r3
 8008862:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008864:	78fb      	ldrb	r3, [r7, #3]
 8008866:	b2db      	uxtb	r3, r3
 8008868:	f023 0303 	bic.w	r3, r3, #3
 800886c:	b2da      	uxtb	r2, r3
 800886e:	4b30      	ldr	r3, [pc, #192]	; (8008930 <xPortStartScheduler+0x128>)
 8008870:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008872:	4b30      	ldr	r3, [pc, #192]	; (8008934 <xPortStartScheduler+0x12c>)
 8008874:	2207      	movs	r2, #7
 8008876:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008878:	e009      	b.n	800888e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800887a:	4b2e      	ldr	r3, [pc, #184]	; (8008934 <xPortStartScheduler+0x12c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	3b01      	subs	r3, #1
 8008880:	4a2c      	ldr	r2, [pc, #176]	; (8008934 <xPortStartScheduler+0x12c>)
 8008882:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008884:	78fb      	ldrb	r3, [r7, #3]
 8008886:	b2db      	uxtb	r3, r3
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	b2db      	uxtb	r3, r3
 800888c:	70fb      	strb	r3, [r7, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800888e:	78fb      	ldrb	r3, [r7, #3]
 8008890:	b2db      	uxtb	r3, r3
 8008892:	b2db      	uxtb	r3, r3
 8008894:	b25b      	sxtb	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	dbef      	blt.n	800887a <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800889a:	4b26      	ldr	r3, [pc, #152]	; (8008934 <xPortStartScheduler+0x12c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f1c3 0307 	rsb	r3, r3, #7
 80088a2:	2b06      	cmp	r3, #6
 80088a4:	d009      	beq.n	80088ba <xPortStartScheduler+0xb2>
 80088a6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	60bb      	str	r3, [r7, #8]
 80088b8:	e7fe      	b.n	80088b8 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088ba:	4b1e      	ldr	r3, [pc, #120]	; (8008934 <xPortStartScheduler+0x12c>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	021b      	lsls	r3, r3, #8
 80088c0:	4a1c      	ldr	r2, [pc, #112]	; (8008934 <xPortStartScheduler+0x12c>)
 80088c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80088c4:	4b1b      	ldr	r3, [pc, #108]	; (8008934 <xPortStartScheduler+0x12c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088cc:	4a19      	ldr	r2, [pc, #100]	; (8008934 <xPortStartScheduler+0x12c>)
 80088ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	b2da      	uxtb	r2, r3
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80088d8:	4a17      	ldr	r2, [pc, #92]	; (8008938 <xPortStartScheduler+0x130>)
 80088da:	4b17      	ldr	r3, [pc, #92]	; (8008938 <xPortStartScheduler+0x130>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f443 037c 	orr.w	r3, r3, #16515072	; 0xfc0000
 80088e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80088e4:	4a14      	ldr	r2, [pc, #80]	; (8008938 <xPortStartScheduler+0x130>)
 80088e6:	4b14      	ldr	r3, [pc, #80]	; (8008938 <xPortStartScheduler+0x130>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f043 437c 	orr.w	r3, r3, #4227858432	; 0xfc000000
 80088ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088f0:	f000 f8d6 	bl	8008aa0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80088f4:	4b11      	ldr	r3, [pc, #68]	; (800893c <xPortStartScheduler+0x134>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80088fa:	f000 f8f3 	bl	8008ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80088fe:	4a10      	ldr	r2, [pc, #64]	; (8008940 <xPortStartScheduler+0x138>)
 8008900:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <xPortStartScheduler+0x138>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008908:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800890a:	f7ff ff69 	bl	80087e0 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800890e:	f001 fbaf 	bl	800a070 <vTaskSwitchContext>
	prvTaskExitError();
 8008912:	f7ff ff25 	bl	8008760 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3718      	adds	r7, #24
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	e000ed00 	.word	0xe000ed00
 8008924:	410fc271 	.word	0x410fc271
 8008928:	410fc270 	.word	0x410fc270
 800892c:	e000e400 	.word	0xe000e400
 8008930:	20000694 	.word	0x20000694
 8008934:	20000698 	.word	0x20000698
 8008938:	e000ed20 	.word	0xe000ed20
 800893c:	20000190 	.word	0x20000190
 8008940:	e000ef34 	.word	0xe000ef34

08008944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800895c:	4b0e      	ldr	r3, [pc, #56]	; (8008998 <vPortEnterCritical+0x54>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3301      	adds	r3, #1
 8008962:	4a0d      	ldr	r2, [pc, #52]	; (8008998 <vPortEnterCritical+0x54>)
 8008964:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008966:	4b0c      	ldr	r3, [pc, #48]	; (8008998 <vPortEnterCritical+0x54>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d10e      	bne.n	800898c <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800896e:	4b0b      	ldr	r3, [pc, #44]	; (800899c <vPortEnterCritical+0x58>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b00      	cmp	r3, #0
 8008976:	d009      	beq.n	800898c <vPortEnterCritical+0x48>
 8008978:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	603b      	str	r3, [r7, #0]
 800898a:	e7fe      	b.n	800898a <vPortEnterCritical+0x46>
	}
}
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	20000190 	.word	0x20000190
 800899c:	e000ed04 	.word	0xe000ed04

080089a0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80089a6:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <vPortExitCritical+0x48>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d109      	bne.n	80089c2 <vPortExitCritical+0x22>
 80089ae:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	607b      	str	r3, [r7, #4]
 80089c0:	e7fe      	b.n	80089c0 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80089c2:	4b09      	ldr	r3, [pc, #36]	; (80089e8 <vPortExitCritical+0x48>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	3b01      	subs	r3, #1
 80089c8:	4a07      	ldr	r2, [pc, #28]	; (80089e8 <vPortExitCritical+0x48>)
 80089ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80089cc:	4b06      	ldr	r3, [pc, #24]	; (80089e8 <vPortExitCritical+0x48>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d104      	bne.n	80089de <vPortExitCritical+0x3e>
 80089d4:	2300      	movs	r3, #0
 80089d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	20000190 	.word	0x20000190
 80089ec:	00000000 	.word	0x00000000

080089f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089f0:	f3ef 8009 	mrs	r0, PSP
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	4b15      	ldr	r3, [pc, #84]	; (8008a50 <pxCurrentTCBConst>)
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	f01e 0f10 	tst.w	lr, #16
 8008a00:	bf08      	it	eq
 8008a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0a:	6010      	str	r0, [r2, #0]
 8008a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008a10:	f04f 00fc 	mov.w	r0, #252	; 0xfc
 8008a14:	f380 8811 	msr	BASEPRI, r0
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f001 fb26 	bl	800a070 <vTaskSwitchContext>
 8008a24:	f04f 0000 	mov.w	r0, #0
 8008a28:	f380 8811 	msr	BASEPRI, r0
 8008a2c:	bc09      	pop	{r0, r3}
 8008a2e:	6819      	ldr	r1, [r3, #0]
 8008a30:	6808      	ldr	r0, [r1, #0]
 8008a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a36:	f01e 0f10 	tst.w	lr, #16
 8008a3a:	bf08      	it	eq
 8008a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a40:	f380 8809 	msr	PSP, r0
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	f3af 8000 	nop.w

08008a50 <pxCurrentTCBConst>:
 8008a50:	2000069c 	.word	0x2000069c
 8008a54:	f3af 8000 	nop.w
 8008a58:	f3af 8000 	nop.w
 8008a5c:	f3af 8000 	nop.w

08008a60 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a66:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a78:	f001 fa40 	bl	8009efc <xTaskIncrementTick>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a82:	4b06      	ldr	r3, [pc, #24]	; (8008a9c <SysTick_Handler+0x3c>)
 8008a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	e000ed04 	.word	0xe000ed04

08008aa0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008aa4:	4b0a      	ldr	r3, [pc, #40]	; (8008ad0 <vPortSetupTimerInterrupt+0x30>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008aaa:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <vPortSetupTimerInterrupt+0x34>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ab0:	4a09      	ldr	r2, [pc, #36]	; (8008ad8 <vPortSetupTimerInterrupt+0x38>)
 8008ab2:	4b0a      	ldr	r3, [pc, #40]	; (8008adc <vPortSetupTimerInterrupt+0x3c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	490a      	ldr	r1, [pc, #40]	; (8008ae0 <vPortSetupTimerInterrupt+0x40>)
 8008ab8:	fba1 1303 	umull	r1, r3, r1, r3
 8008abc:	099b      	lsrs	r3, r3, #6
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ac2:	4b03      	ldr	r3, [pc, #12]	; (8008ad0 <vPortSetupTimerInterrupt+0x30>)
 8008ac4:	2207      	movs	r2, #7
 8008ac6:	601a      	str	r2, [r3, #0]
}
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	e000e010 	.word	0xe000e010
 8008ad4:	e000e018 	.word	0xe000e018
 8008ad8:	e000e014 	.word	0xe000e014
 8008adc:	2000ffc0 	.word	0x2000ffc0
 8008ae0:	10624dd3 	.word	0x10624dd3

08008ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008af4 <vPortEnableVFP+0x10>
 8008ae8:	6801      	ldr	r1, [r0, #0]
 8008aea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008aee:	6001      	str	r1, [r0, #0]
 8008af0:	4770      	bx	lr
 8008af2:	0000      	.short	0x0000
 8008af4:	e000ed88 	.word	0xe000ed88

08008af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008afe:	f3ef 8305 	mrs	r3, IPSR
 8008b02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2b0f      	cmp	r3, #15
 8008b08:	d913      	bls.n	8008b32 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b0a:	4a15      	ldr	r2, [pc, #84]	; (8008b60 <vPortValidateInterruptPriority+0x68>)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4413      	add	r3, r2
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b14:	4b13      	ldr	r3, [pc, #76]	; (8008b64 <vPortValidateInterruptPriority+0x6c>)
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	7afa      	ldrb	r2, [r7, #11]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d209      	bcs.n	8008b32 <vPortValidateInterruptPriority+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b1e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	607b      	str	r3, [r7, #4]
 8008b30:	e7fe      	b.n	8008b30 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b32:	4b0d      	ldr	r3, [pc, #52]	; (8008b68 <vPortValidateInterruptPriority+0x70>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008b3a:	4b0c      	ldr	r3, [pc, #48]	; (8008b6c <vPortValidateInterruptPriority+0x74>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d909      	bls.n	8008b56 <vPortValidateInterruptPriority+0x5e>
 8008b42:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	603b      	str	r3, [r7, #0]
 8008b54:	e7fe      	b.n	8008b54 <vPortValidateInterruptPriority+0x5c>
	}
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	e000e3f0 	.word	0xe000e3f0
 8008b64:	20000694 	.word	0x20000694
 8008b68:	e000ed0c 	.word	0xe000ed0c
 8008b6c:	20000698 	.word	0x20000698

08008b70 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8008b78:	f001 f904 	bl	8009d84 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f006 fb91 	bl	800f2a4 <malloc>
 8008b82:	4603      	mov	r3, r0
 8008b84:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b86:	f001 f90b 	bl	8009da0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	if( pv )
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d006      	beq.n	8008bb0 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8008ba2:	f001 f8ef 	bl	8009d84 <vTaskSuspendAll>
		{
			free( pv );
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f006 fb84 	bl	800f2b4 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8008bac:	f001 f8f8 	bl	8009da0 <xTaskResumeAll>
	}
}
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop

08008bb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f103 0208 	add.w	r2, r3, #8
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f103 0208 	add.w	r2, r3, #8
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f103 0208 	add.w	r2, r3, #8
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop

08008bf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	689a      	ldr	r2, [r3, #8]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	683a      	ldr	r2, [r7, #0]
 8008c3a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	1c5a      	adds	r2, r3, #1
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	601a      	str	r2, [r3, #0]
}
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop

08008c58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6e:	d103      	bne.n	8008c78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	60fb      	str	r3, [r7, #12]
 8008c76:	e00c      	b.n	8008c92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3308      	adds	r3, #8
 8008c7c:	60fb      	str	r3, [r7, #12]
 8008c7e:	e002      	b.n	8008c86 <vListInsert+0x2e>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	60fb      	str	r3, [r7, #12]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d9f6      	bls.n	8008c80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	1c5a      	adds	r2, r3, #1
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	601a      	str	r2, [r3, #0]
}
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	6892      	ldr	r2, [r2, #8]
 8008cde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	6852      	ldr	r2, [r2, #4]
 8008ce8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d103      	bne.n	8008cfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	689a      	ldr	r2, [r3, #8]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	1e5a      	subs	r2, r3, #1
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3714      	adds	r7, #20
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d109      	bne.n	8008d44 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d30:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	60bb      	str	r3, [r7, #8]
 8008d42:	e7fe      	b.n	8008d42 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008d44:	f7ff fdfe 	bl	8008944 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d50:	68f9      	ldr	r1, [r7, #12]
 8008d52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d54:	fb01 f303 	mul.w	r3, r1, r3
 8008d58:	441a      	add	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d74:	3b01      	subs	r3, #1
 8008d76:	68f9      	ldr	r1, [r7, #12]
 8008d78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d7a:	fb01 f303 	mul.w	r3, r1, r3
 8008d7e:	441a      	add	r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	22ff      	movs	r2, #255	; 0xff
 8008d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	22ff      	movs	r2, #255	; 0xff
 8008d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d114      	bne.n	8008dc4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d01a      	beq.n	8008dd8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	3310      	adds	r3, #16
 8008da6:	4618      	mov	r0, r3
 8008da8:	f001 fa08 	bl	800a1bc <xTaskRemoveFromEventList>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d012      	beq.n	8008dd8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008db2:	4b0d      	ldr	r3, [pc, #52]	; (8008de8 <xQueueGenericReset+0xcc>)
 8008db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	e009      	b.n	8008dd8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3310      	adds	r3, #16
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7ff fef5 	bl	8008bb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	3324      	adds	r3, #36	; 0x24
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7ff fef0 	bl	8008bb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008dd8:	f7ff fde2 	bl	80089a0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ddc:	2301      	movs	r3, #1
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	e000ed04 	.word	0xe000ed04

08008dec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008dec:	b590      	push	{r4, r7, lr}
 8008dee:	b08b      	sub	sp, #44	; 0x2c
 8008df0:	af02      	add	r7, sp, #8
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	4613      	mov	r3, r2
 8008df8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d109      	bne.n	8008e14 <xQueueGenericCreate+0x28>
 8008e00:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	613b      	str	r3, [r7, #16]
 8008e12:	e7fe      	b.n	8008e12 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d102      	bne.n	8008e20 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	61fb      	str	r3, [r7, #28]
 8008e1e:	e004      	b.n	8008e2a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	fb02 f303 	mul.w	r3, r2, r3
 8008e28:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	3354      	adds	r3, #84	; 0x54
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7ff fe9e 	bl	8008b70 <pvPortMalloc>
 8008e34:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00d      	beq.n	8008e58 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	3354      	adds	r3, #84	; 0x54
 8008e44:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e46:	79fc      	ldrb	r4, [r7, #7]
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	68b9      	ldr	r1, [r7, #8]
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	4623      	mov	r3, r4
 8008e54:	f000 f806 	bl	8008e64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e58:	69bb      	ldr	r3, [r7, #24]
	}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3724      	adds	r7, #36	; 0x24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd90      	pop	{r4, r7, pc}
 8008e62:	bf00      	nop

08008e64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d103      	bne.n	8008e80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	e002      	b.n	8008e86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	68ba      	ldr	r2, [r7, #8]
 8008e90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e92:	69b8      	ldr	r0, [r7, #24]
 8008e94:	2101      	movs	r1, #1
 8008e96:	f7ff ff41 	bl	8008d1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	78fa      	ldrb	r2, [r7, #3]
 8008e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop

08008eb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b08e      	sub	sp, #56	; 0x38
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
 8008ebc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d109      	bne.n	8008ee0 <xQueueGenericSend+0x30>
 8008ecc:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008ed0:	f383 8811 	msr	BASEPRI, r3
 8008ed4:	f3bf 8f6f 	isb	sy
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	627b      	str	r3, [r7, #36]	; 0x24
 8008ede:	e7fe      	b.n	8008ede <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d103      	bne.n	8008eee <xQueueGenericSend+0x3e>
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <xQueueGenericSend+0x42>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e000      	b.n	8008ef4 <xQueueGenericSend+0x44>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d109      	bne.n	8008f0c <xQueueGenericSend+0x5c>
 8008ef8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008efc:	f383 8811 	msr	BASEPRI, r3
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	623b      	str	r3, [r7, #32]
 8008f0a:	e7fe      	b.n	8008f0a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d103      	bne.n	8008f1a <xQueueGenericSend+0x6a>
 8008f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d101      	bne.n	8008f1e <xQueueGenericSend+0x6e>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e000      	b.n	8008f20 <xQueueGenericSend+0x70>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d109      	bne.n	8008f38 <xQueueGenericSend+0x88>
 8008f24:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	61fb      	str	r3, [r7, #28]
 8008f36:	e7fe      	b.n	8008f36 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f38:	f001 fae8 	bl	800a50c <xTaskGetSchedulerState>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d102      	bne.n	8008f48 <xQueueGenericSend+0x98>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d101      	bne.n	8008f4c <xQueueGenericSend+0x9c>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e000      	b.n	8008f4e <xQueueGenericSend+0x9e>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d109      	bne.n	8008f66 <xQueueGenericSend+0xb6>
 8008f52:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	61bb      	str	r3, [r7, #24]
 8008f64:	e7fe      	b.n	8008f64 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f66:	f7ff fced 	bl	8008944 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d302      	bcc.n	8008f7c <xQueueGenericSend+0xcc>
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d148      	bne.n	800900e <xQueueGenericSend+0x15e>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f80:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f84:	68b9      	ldr	r1, [r7, #8]
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	f000 fa36 	bl	80093f8 <prvCopyDataToQueue>
 8008f8c:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d017      	beq.n	8008fc6 <xQueueGenericSend+0x116>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d104      	bne.n	8008fa6 <xQueueGenericSend+0xf6>
 8008f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <xQueueGenericSend+0xf6>
 8008fa2:	bf00      	nop
 8008fa4:	e02f      	b.n	8009006 <xQueueGenericSend+0x156>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8008fa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	f000 fba3 	bl	80096f4 <prvNotifyQueueSetContainer>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d028      	beq.n	8009006 <xQueueGenericSend+0x156>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8008fb4:	4b4c      	ldr	r3, [pc, #304]	; (80090e8 <xQueueGenericSend+0x238>)
 8008fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fba:	601a      	str	r2, [r3, #0]
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	e01f      	b.n	8009006 <xQueueGenericSend+0x156>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d010      	beq.n	8008ff0 <xQueueGenericSend+0x140>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	3324      	adds	r3, #36	; 0x24
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f001 f8f2 	bl	800a1bc <xTaskRemoveFromEventList>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d013      	beq.n	8009006 <xQueueGenericSend+0x156>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8008fde:	4b42      	ldr	r3, [pc, #264]	; (80090e8 <xQueueGenericSend+0x238>)
 8008fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	e00a      	b.n	8009006 <xQueueGenericSend+0x156>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8008ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d007      	beq.n	8009006 <xQueueGenericSend+0x156>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ff6:	4b3c      	ldr	r3, [pc, #240]	; (80090e8 <xQueueGenericSend+0x238>)
 8008ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ffc:	601a      	str	r2, [r3, #0]
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009006:	f7ff fccb 	bl	80089a0 <vPortExitCritical>
				return pdPASS;
 800900a:	2301      	movs	r3, #1
 800900c:	e067      	b.n	80090de <xQueueGenericSend+0x22e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d103      	bne.n	800901c <xQueueGenericSend+0x16c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009014:	f7ff fcc4 	bl	80089a0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009018:	2300      	movs	r3, #0
 800901a:	e060      	b.n	80090de <xQueueGenericSend+0x22e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800901c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800901e:	2b00      	cmp	r3, #0
 8009020:	d106      	bne.n	8009030 <xQueueGenericSend+0x180>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009022:	f107 0310 	add.w	r3, r7, #16
 8009026:	4618      	mov	r0, r3
 8009028:	f001 f92c 	bl	800a284 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800902c:	2301      	movs	r3, #1
 800902e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009030:	f7ff fcb6 	bl	80089a0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009034:	f000 fea6 	bl	8009d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009038:	f7ff fc84 	bl	8008944 <vPortEnterCritical>
 800903c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009042:	b2db      	uxtb	r3, r3
 8009044:	b25b      	sxtb	r3, r3
 8009046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904a:	d103      	bne.n	8009054 <xQueueGenericSend+0x1a4>
 800904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904e:	2200      	movs	r2, #0
 8009050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800905a:	b2db      	uxtb	r3, r3
 800905c:	b25b      	sxtb	r3, r3
 800905e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009062:	d103      	bne.n	800906c <xQueueGenericSend+0x1bc>
 8009064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800906c:	f7ff fc98 	bl	80089a0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009070:	f107 0210 	add.w	r2, r7, #16
 8009074:	1d3b      	adds	r3, r7, #4
 8009076:	4610      	mov	r0, r2
 8009078:	4619      	mov	r1, r3
 800907a:	f001 f919 	bl	800a2b0 <xTaskCheckForTimeOut>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d124      	bne.n	80090ce <xQueueGenericSend+0x21e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009086:	f000 fabf 	bl	8009608 <prvIsQueueFull>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d018      	beq.n	80090c2 <xQueueGenericSend+0x212>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	f103 0210 	add.w	r2, r3, #16
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4610      	mov	r0, r2
 800909a:	4619      	mov	r1, r3
 800909c:	f001 f842 	bl	800a124 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80090a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090a2:	f000 fa3b 	bl	800951c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80090a6:	f000 fe7b 	bl	8009da0 <xTaskResumeAll>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d115      	bne.n	80090dc <xQueueGenericSend+0x22c>
				{
					portYIELD_WITHIN_API();
 80090b0:	4b0d      	ldr	r3, [pc, #52]	; (80090e8 <xQueueGenericSend+0x238>)
 80090b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090b6:	601a      	str	r2, [r3, #0]
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	e00c      	b.n	80090dc <xQueueGenericSend+0x22c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80090c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090c4:	f000 fa2a 	bl	800951c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090c8:	f000 fe6a 	bl	8009da0 <xTaskResumeAll>
 80090cc:	e74b      	b.n	8008f66 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80090ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090d0:	f000 fa24 	bl	800951c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090d4:	f000 fe64 	bl	8009da0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80090d8:	2300      	movs	r3, #0
 80090da:	e000      	b.n	80090de <xQueueGenericSend+0x22e>
		}
	} /*lint -restore */
 80090dc:	e743      	b.n	8008f66 <xQueueGenericSend+0xb6>
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3738      	adds	r7, #56	; 0x38
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	e000ed04 	.word	0xe000ed04

080090ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08e      	sub	sp, #56	; 0x38
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
 80090f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	2b00      	cmp	r3, #0
 8009102:	d109      	bne.n	8009118 <xQueueGenericSendFromISR+0x2c>
 8009104:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	627b      	str	r3, [r7, #36]	; 0x24
 8009116:	e7fe      	b.n	8009116 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d103      	bne.n	8009126 <xQueueGenericSendFromISR+0x3a>
 800911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <xQueueGenericSendFromISR+0x3e>
 8009126:	2301      	movs	r3, #1
 8009128:	e000      	b.n	800912c <xQueueGenericSendFromISR+0x40>
 800912a:	2300      	movs	r3, #0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d109      	bne.n	8009144 <xQueueGenericSendFromISR+0x58>
 8009130:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	623b      	str	r3, [r7, #32]
 8009142:	e7fe      	b.n	8009142 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	2b02      	cmp	r3, #2
 8009148:	d103      	bne.n	8009152 <xQueueGenericSendFromISR+0x66>
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914e:	2b01      	cmp	r3, #1
 8009150:	d101      	bne.n	8009156 <xQueueGenericSendFromISR+0x6a>
 8009152:	2301      	movs	r3, #1
 8009154:	e000      	b.n	8009158 <xQueueGenericSendFromISR+0x6c>
 8009156:	2300      	movs	r3, #0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d109      	bne.n	8009170 <xQueueGenericSendFromISR+0x84>
 800915c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	61fb      	str	r3, [r7, #28]
 800916e:	e7fe      	b.n	800916e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009170:	f7ff fcc2 	bl	8008af8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009174:	f3ef 8211 	mrs	r2, BASEPRI
 8009178:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	61ba      	str	r2, [r7, #24]
 800918a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800918c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800918e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009198:	429a      	cmp	r2, r3
 800919a:	d302      	bcc.n	80091a2 <xQueueGenericSendFromISR+0xb6>
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d13e      	bne.n	8009220 <xQueueGenericSendFromISR+0x134>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80091a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ae:	68b9      	ldr	r1, [r7, #8]
 80091b0:	683a      	ldr	r2, [r7, #0]
 80091b2:	f000 f921 	bl	80093f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091b6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80091ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091be:	d124      	bne.n	800920a <xQueueGenericSendFromISR+0x11e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 80091c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00d      	beq.n	80091e4 <xQueueGenericSendFromISR+0xf8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 80091c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	f000 fa92 	bl	80096f4 <prvNotifyQueueSetContainer>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d021      	beq.n	800921a <xQueueGenericSendFromISR+0x12e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d01e      	beq.n	800921a <xQueueGenericSendFromISR+0x12e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	e01a      	b.n	800921a <xQueueGenericSendFromISR+0x12e>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d016      	beq.n	800921a <xQueueGenericSendFromISR+0x12e>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	3324      	adds	r3, #36	; 0x24
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 ffe3 	bl	800a1bc <xTaskRemoveFromEventList>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00e      	beq.n	800921a <xQueueGenericSendFromISR+0x12e>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00b      	beq.n	800921a <xQueueGenericSendFromISR+0x12e>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2201      	movs	r2, #1
 8009206:	601a      	str	r2, [r3, #0]
 8009208:	e007      	b.n	800921a <xQueueGenericSendFromISR+0x12e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800920a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800920e:	3301      	adds	r3, #1
 8009210:	b2db      	uxtb	r3, r3
 8009212:	b2da      	uxtb	r2, r3
 8009214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800921a:	2301      	movs	r3, #1
 800921c:	637b      	str	r3, [r7, #52]	; 0x34
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 800921e:	e001      	b.n	8009224 <xQueueGenericSendFromISR+0x138>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009220:	2300      	movs	r3, #0
 8009222:	637b      	str	r3, [r7, #52]	; 0x34
 8009224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009226:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800922e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009230:	4618      	mov	r0, r3
 8009232:	3738      	adds	r7, #56	; 0x38
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08c      	sub	sp, #48	; 0x30
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009244:	2300      	movs	r3, #0
 8009246:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800924c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924e:	2b00      	cmp	r3, #0
 8009250:	d109      	bne.n	8009266 <xQueueReceive+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009252:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	623b      	str	r3, [r7, #32]
 8009264:	e7fe      	b.n	8009264 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d103      	bne.n	8009274 <xQueueReceive+0x3c>
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009270:	2b00      	cmp	r3, #0
 8009272:	d101      	bne.n	8009278 <xQueueReceive+0x40>
 8009274:	2301      	movs	r3, #1
 8009276:	e000      	b.n	800927a <xQueueReceive+0x42>
 8009278:	2300      	movs	r3, #0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d109      	bne.n	8009292 <xQueueReceive+0x5a>
 800927e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	61fb      	str	r3, [r7, #28]
 8009290:	e7fe      	b.n	8009290 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009292:	f001 f93b 	bl	800a50c <xTaskGetSchedulerState>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d102      	bne.n	80092a2 <xQueueReceive+0x6a>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <xQueueReceive+0x6e>
 80092a2:	2301      	movs	r3, #1
 80092a4:	e000      	b.n	80092a8 <xQueueReceive+0x70>
 80092a6:	2300      	movs	r3, #0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d109      	bne.n	80092c0 <xQueueReceive+0x88>
 80092ac:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80092b0:	f383 8811 	msr	BASEPRI, r3
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	61bb      	str	r3, [r7, #24]
 80092be:	e7fe      	b.n	80092be <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092c0:	f7ff fb40 	bl	8008944 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d01f      	beq.n	8009310 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092d2:	68b9      	ldr	r1, [r7, #8]
 80092d4:	f000 f8fc 	bl	80094d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	1e5a      	subs	r2, r3, #1
 80092dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092de:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00f      	beq.n	8009308 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ea:	3310      	adds	r3, #16
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 ff65 	bl	800a1bc <xTaskRemoveFromEventList>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d007      	beq.n	8009308 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80092f8:	4b3e      	ldr	r3, [pc, #248]	; (80093f4 <xQueueReceive+0x1bc>)
 80092fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009308:	f7ff fb4a 	bl	80089a0 <vPortExitCritical>
				return pdPASS;
 800930c:	2301      	movs	r3, #1
 800930e:	e06d      	b.n	80093ec <xQueueReceive+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d103      	bne.n	800931e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009316:	f7ff fb43 	bl	80089a0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800931a:	2300      	movs	r3, #0
 800931c:	e066      	b.n	80093ec <xQueueReceive+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800931e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009320:	2b00      	cmp	r3, #0
 8009322:	d106      	bne.n	8009332 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009324:	f107 0310 	add.w	r3, r7, #16
 8009328:	4618      	mov	r0, r3
 800932a:	f000 ffab 	bl	800a284 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800932e:	2301      	movs	r3, #1
 8009330:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009332:	f7ff fb35 	bl	80089a0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009336:	f000 fd25 	bl	8009d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800933a:	f7ff fb03 	bl	8008944 <vPortEnterCritical>
 800933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009344:	b2db      	uxtb	r3, r3
 8009346:	b25b      	sxtb	r3, r3
 8009348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934c:	d103      	bne.n	8009356 <xQueueReceive+0x11e>
 800934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800935c:	b2db      	uxtb	r3, r3
 800935e:	b25b      	sxtb	r3, r3
 8009360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009364:	d103      	bne.n	800936e <xQueueReceive+0x136>
 8009366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800936e:	f7ff fb17 	bl	80089a0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009372:	f107 0210 	add.w	r2, r7, #16
 8009376:	1d3b      	adds	r3, r7, #4
 8009378:	4610      	mov	r0, r2
 800937a:	4619      	mov	r1, r3
 800937c:	f000 ff98 	bl	800a2b0 <xTaskCheckForTimeOut>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d124      	bne.n	80093d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009388:	f000 f928 	bl	80095dc <prvIsQueueEmpty>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d018      	beq.n	80093c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009394:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4610      	mov	r0, r2
 800939c:	4619      	mov	r1, r3
 800939e:	f000 fec1 	bl	800a124 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093a4:	f000 f8ba 	bl	800951c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093a8:	f000 fcfa 	bl	8009da0 <xTaskResumeAll>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d11b      	bne.n	80093ea <xQueueReceive+0x1b2>
				{
					portYIELD_WITHIN_API();
 80093b2:	4b10      	ldr	r3, [pc, #64]	; (80093f4 <xQueueReceive+0x1bc>)
 80093b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093b8:	601a      	str	r2, [r3, #0]
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	e012      	b.n	80093ea <xQueueReceive+0x1b2>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80093c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093c6:	f000 f8a9 	bl	800951c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093ca:	f000 fce9 	bl	8009da0 <xTaskResumeAll>
 80093ce:	e777      	b.n	80092c0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80093d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093d2:	f000 f8a3 	bl	800951c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093d6:	f000 fce3 	bl	8009da0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093dc:	f000 f8fe 	bl	80095dc <prvIsQueueEmpty>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d001      	beq.n	80093ea <xQueueReceive+0x1b2>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80093e6:	2300      	movs	r3, #0
 80093e8:	e000      	b.n	80093ec <xQueueReceive+0x1b4>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
 80093ea:	e769      	b.n	80092c0 <xQueueReceive+0x88>
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3730      	adds	r7, #48	; 0x30
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	e000ed04 	.word	0xe000ed04

080093f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009404:	2300      	movs	r3, #0
 8009406:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10d      	bne.n	8009432 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d14f      	bne.n	80094be <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	4618      	mov	r0, r3
 8009424:	f001 f890 	bl	800a548 <xTaskPriorityDisinherit>
 8009428:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	609a      	str	r2, [r3, #8]
 8009430:	e045      	b.n	80094be <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d11a      	bne.n	800946e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009440:	4610      	mov	r0, r2
 8009442:	68b9      	ldr	r1, [r7, #8]
 8009444:	461a      	mov	r2, r3
 8009446:	f005 ff3d 	bl	800f2c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	685a      	ldr	r2, [r3, #4]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009452:	441a      	add	r2, r3
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	429a      	cmp	r2, r3
 8009462:	d32c      	bcc.n	80094be <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	605a      	str	r2, [r3, #4]
 800946c:	e027      	b.n	80094be <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009476:	4610      	mov	r0, r2
 8009478:	68b9      	ldr	r1, [r7, #8]
 800947a:	461a      	mov	r2, r3
 800947c:	f005 ff22 	bl	800f2c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	68da      	ldr	r2, [r3, #12]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009488:	425b      	negs	r3, r3
 800948a:	441a      	add	r2, r3
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	68da      	ldr	r2, [r3, #12]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	429a      	cmp	r2, r3
 800949a:	d207      	bcs.n	80094ac <prvCopyDataToQueue+0xb4>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	689a      	ldr	r2, [r3, #8]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a4:	425b      	negs	r3, r3
 80094a6:	441a      	add	r2, r3
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d105      	bne.n	80094be <prvCopyDataToQueue+0xc6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	3b01      	subs	r3, #1
 80094bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	1c5a      	adds	r2, r3, #1
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80094c6:	697b      	ldr	r3, [r7, #20]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3718      	adds	r7, #24
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d019      	beq.n	8009516 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68da      	ldr	r2, [r3, #12]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ea:	441a      	add	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	68da      	ldr	r2, [r3, #12]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d303      	bcc.n	8009504 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	68da      	ldr	r2, [r3, #12]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950c:	6838      	ldr	r0, [r7, #0]
 800950e:	4611      	mov	r1, r2
 8009510:	461a      	mov	r2, r3
 8009512:	f005 fed7 	bl	800f2c4 <memcpy>
	}
}
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009524:	f7ff fa0e 	bl	8008944 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800952e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009530:	e021      	b.n	8009576 <prvUnlockQueue+0x5a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009536:	2b00      	cmp	r3, #0
 8009538:	d009      	beq.n	800954e <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	2100      	movs	r1, #0
 800953e:	f000 f8d9 	bl	80096f4 <prvNotifyQueueSetContainer>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d012      	beq.n	800956e <prvUnlockQueue+0x52>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8009548:	f000 ff22 	bl	800a390 <vTaskMissedYield>
 800954c:	e00f      	b.n	800956e <prvUnlockQueue+0x52>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00a      	beq.n	800956c <prvUnlockQueue+0x50>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	3324      	adds	r3, #36	; 0x24
 800955a:	4618      	mov	r0, r3
 800955c:	f000 fe2e 	bl	800a1bc <xTaskRemoveFromEventList>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d003      	beq.n	800956e <prvUnlockQueue+0x52>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8009566:	f000 ff13 	bl	800a390 <vTaskMissedYield>
 800956a:	e000      	b.n	800956e <prvUnlockQueue+0x52>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
 800956c:	e007      	b.n	800957e <prvUnlockQueue+0x62>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800956e:	7bfb      	ldrb	r3, [r7, #15]
 8009570:	3b01      	subs	r3, #1
 8009572:	b2db      	uxtb	r3, r3
 8009574:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800957a:	2b00      	cmp	r3, #0
 800957c:	dcd9      	bgt.n	8009532 <prvUnlockQueue+0x16>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	22ff      	movs	r2, #255	; 0xff
 8009582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009586:	f7ff fa0b 	bl	80089a0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800958a:	f7ff f9db 	bl	8008944 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009594:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009596:	e013      	b.n	80095c0 <prvUnlockQueue+0xa4>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00e      	beq.n	80095be <prvUnlockQueue+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	3310      	adds	r3, #16
 80095a4:	4618      	mov	r0, r3
 80095a6:	f000 fe09 	bl	800a1bc <xTaskRemoveFromEventList>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 80095b0:	f000 feee 	bl	800a390 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	3b01      	subs	r3, #1
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	73bb      	strb	r3, [r7, #14]
 80095bc:	e000      	b.n	80095c0 <prvUnlockQueue+0xa4>
			}
			else
			{
				break;
 80095be:	e003      	b.n	80095c8 <prvUnlockQueue+0xac>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	dce7      	bgt.n	8009598 <prvUnlockQueue+0x7c>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	22ff      	movs	r2, #255	; 0xff
 80095cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80095d0:	f7ff f9e6 	bl	80089a0 <vPortExitCritical>
}
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop

080095dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095e4:	f7ff f9ae 	bl	8008944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d102      	bne.n	80095f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80095f0:	2301      	movs	r3, #1
 80095f2:	60fb      	str	r3, [r7, #12]
 80095f4:	e001      	b.n	80095fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80095f6:	2300      	movs	r3, #0
 80095f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095fa:	f7ff f9d1 	bl	80089a0 <vPortExitCritical>

	return xReturn;
 80095fe:	68fb      	ldr	r3, [r7, #12]
}
 8009600:	4618      	mov	r0, r3
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009610:	f7ff f998 	bl	8008944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800961c:	429a      	cmp	r2, r3
 800961e:	d102      	bne.n	8009626 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009620:	2301      	movs	r3, #1
 8009622:	60fb      	str	r3, [r7, #12]
 8009624:	e001      	b.n	800962a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009626:	2300      	movs	r3, #0
 8009628:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800962a:	f7ff f9b9 	bl	80089a0 <vPortExitCritical>

	return xReturn;
 800962e:	68fb      	ldr	r3, [r7, #12]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009642:	2300      	movs	r3, #0
 8009644:	60fb      	str	r3, [r7, #12]
 8009646:	e014      	b.n	8009672 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009648:	4a0e      	ldr	r2, [pc, #56]	; (8009684 <vQueueAddToRegistry+0x4c>)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10b      	bne.n	800966c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009654:	490b      	ldr	r1, [pc, #44]	; (8009684 <vQueueAddToRegistry+0x4c>)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800965e:	4a09      	ldr	r2, [pc, #36]	; (8009684 <vQueueAddToRegistry+0x4c>)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	00db      	lsls	r3, r3, #3
 8009664:	4413      	add	r3, r2
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800966a:	e005      	b.n	8009678 <vQueueAddToRegistry+0x40>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	3301      	adds	r3, #1
 8009670:	60fb      	str	r3, [r7, #12]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2b07      	cmp	r3, #7
 8009676:	d9e7      	bls.n	8009648 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009678:	3714      	adds	r7, #20
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	20001254 	.word	0x20001254

08009688 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009698:	f7ff f954 	bl	8008944 <vPortEnterCritical>
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	b25b      	sxtb	r3, r3
 80096a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096aa:	d103      	bne.n	80096b4 <vQueueWaitForMessageRestricted+0x2c>
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	b25b      	sxtb	r3, r3
 80096be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c2:	d103      	bne.n	80096cc <vQueueWaitForMessageRestricted+0x44>
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096cc:	f7ff f968 	bl	80089a0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d106      	bne.n	80096e6 <vQueueWaitForMessageRestricted+0x5e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	3324      	adds	r3, #36	; 0x24
 80096dc:	4618      	mov	r0, r3
 80096de:	68b9      	ldr	r1, [r7, #8]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	f000 fd41 	bl	800a168 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80096e6:	6978      	ldr	r0, [r7, #20]
 80096e8:	f7ff ff18 	bl	800951c <prvUnlockQueue>
	}
 80096ec:	3718      	adds	r7, #24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop

080096f4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b088      	sub	sp, #32
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009702:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8009704:	2300      	movs	r3, #0
 8009706:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d109      	bne.n	8009722 <prvNotifyQueueSetContainer+0x2e>
 800970e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	613b      	str	r3, [r7, #16]
 8009720:	e7fe      	b.n	8009720 <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800972a:	429a      	cmp	r2, r3
 800972c:	d309      	bcc.n	8009742 <prvNotifyQueueSetContainer+0x4e>
 800972e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	60fb      	str	r3, [r7, #12]
 8009740:	e7fe      	b.n	8009740 <prvNotifyQueueSetContainer+0x4c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800974a:	429a      	cmp	r2, r3
 800974c:	d226      	bcs.n	800979c <prvNotifyQueueSetContainer+0xa8>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009754:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 8009756:	1d3b      	adds	r3, r7, #4
 8009758:	69b8      	ldr	r0, [r7, #24]
 800975a:	4619      	mov	r1, r3
 800975c:	683a      	ldr	r2, [r7, #0]
 800975e:	f7ff fe4b 	bl	80093f8 <prvCopyDataToQueue>
 8009762:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8009764:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976c:	d10e      	bne.n	800978c <prvNotifyQueueSetContainer+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009772:	2b00      	cmp	r3, #0
 8009774:	d012      	beq.n	800979c <prvNotifyQueueSetContainer+0xa8>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	3324      	adds	r3, #36	; 0x24
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fd1e 	bl	800a1bc <xTaskRemoveFromEventList>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <prvNotifyQueueSetContainer+0xa8>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8009786:	2301      	movs	r3, #1
 8009788:	61fb      	str	r3, [r7, #28]
 800978a:	e007      	b.n	800979c <prvNotifyQueueSetContainer+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800978c:	7dfb      	ldrb	r3, [r7, #23]
 800978e:	3301      	adds	r3, #1
 8009790:	b2db      	uxtb	r3, r3
 8009792:	b2da      	uxtb	r2, r3
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800979a:	e7ff      	b.n	800979c <prvNotifyQueueSetContainer+0xa8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800979c:	69fb      	ldr	r3, [r7, #28]
	}
 800979e:	4618      	mov	r0, r3
 80097a0:	3720      	adds	r7, #32
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop

080097a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b08c      	sub	sp, #48	; 0x30
 80097ac:	af04      	add	r7, sp, #16
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	603b      	str	r3, [r7, #0]
 80097b4:	4613      	mov	r3, r2
 80097b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80097b8:	88fb      	ldrh	r3, [r7, #6]
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4618      	mov	r0, r3
 80097be:	f7ff f9d7 	bl	8008b70 <pvPortMalloc>
 80097c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00e      	beq.n	80097e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80097ca:	2070      	movs	r0, #112	; 0x70
 80097cc:	f7ff f9d0 	bl	8008b70 <pvPortMalloc>
 80097d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	631a      	str	r2, [r3, #48]	; 0x30
 80097de:	e005      	b.n	80097ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80097e0:	6978      	ldr	r0, [r7, #20]
 80097e2:	f7ff f9d7 	bl	8008b94 <vPortFree>
 80097e6:	e001      	b.n	80097ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80097e8:	2300      	movs	r3, #0
 80097ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d013      	beq.n	800981a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80097f2:	88fa      	ldrh	r2, [r7, #6]
 80097f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097fa:	9301      	str	r3, [sp, #4]
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	9302      	str	r3, [sp, #8]
 8009800:	2300      	movs	r3, #0
 8009802:	9303      	str	r3, [sp, #12]
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	68b9      	ldr	r1, [r7, #8]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	f000 f80f 	bl	800982c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800980e:	69f8      	ldr	r0, [r7, #28]
 8009810:	f000 f8ae 	bl	8009970 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009814:	2301      	movs	r3, #1
 8009816:	61bb      	str	r3, [r7, #24]
 8009818:	e002      	b.n	8009820 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800981a:	f04f 33ff 	mov.w	r3, #4294967295
 800981e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009820:	69bb      	ldr	r3, [r7, #24]
	}
 8009822:	4618      	mov	r0, r3
 8009824:	3720      	adds	r7, #32
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop

0800982c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b088      	sub	sp, #32
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
 8009838:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4610      	mov	r0, r2
 8009844:	21a5      	movs	r1, #165	; 0xa5
 8009846:	461a      	mov	r2, r3
 8009848:	f005 fd47 	bl	800f2da <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800984c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009856:	3b01      	subs	r3, #1
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4413      	add	r3, r2
 800985c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	f023 0307 	bic.w	r3, r3, #7
 8009864:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	f003 0307 	and.w	r3, r3, #7
 800986c:	2b00      	cmp	r3, #0
 800986e:	d009      	beq.n	8009884 <prvInitialiseNewTask+0x58>
 8009870:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	617b      	str	r3, [r7, #20]
 8009882:	e7fe      	b.n	8009882 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d01e      	beq.n	80098c8 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800988a:	2300      	movs	r3, #0
 800988c:	61fb      	str	r3, [r7, #28]
 800988e:	e013      	b.n	80098b8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	4413      	add	r3, r2
 8009896:	7819      	ldrb	r1, [r3, #0]
 8009898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	4413      	add	r3, r2
 800989e:	3330      	adds	r3, #48	; 0x30
 80098a0:	460a      	mov	r2, r1
 80098a2:	711a      	strb	r2, [r3, #4]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	4413      	add	r3, r2
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d100      	bne.n	80098b2 <prvInitialiseNewTask+0x86>
			{
				break;
 80098b0:	e005      	b.n	80098be <prvInitialiseNewTask+0x92>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	3301      	adds	r3, #1
 80098b6:	61fb      	str	r3, [r7, #28]
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	2b0f      	cmp	r3, #15
 80098bc:	d9e8      	bls.n	8009890 <prvInitialiseNewTask+0x64>
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098c6:	e003      	b.n	80098d0 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80098c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	2b05      	cmp	r3, #5
 80098d4:	d901      	bls.n	80098da <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80098d6:	2305      	movs	r3, #5
 80098d8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80098da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80098e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098e4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80098e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e8:	2200      	movs	r2, #0
 80098ea:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80098ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ee:	3304      	adds	r3, #4
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7ff f981 	bl	8008bf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80098f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f8:	3318      	adds	r3, #24
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7ff f97c 	bl	8008bf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009904:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009908:	f1c3 0206 	rsb	r2, r3, #6
 800990c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009914:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8009916:	2300      	movs	r3, #0
 8009918:	61fb      	str	r3, [r7, #28]
 800991a:	e009      	b.n	8009930 <prvInitialiseNewTask+0x104>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 800991c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	3314      	adds	r3, #20
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	2200      	movs	r2, #0
 8009928:	605a      	str	r2, [r3, #4]
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	3301      	adds	r3, #1
 800992e:	61fb      	str	r3, [r7, #28]
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	2b04      	cmp	r3, #4
 8009934:	d9f2      	bls.n	800991c <prvInitialiseNewTask+0xf0>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	2200      	movs	r2, #0
 800993a:	669a      	str	r2, [r3, #104]	; 0x68
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800993c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993e:	2200      	movs	r2, #0
 8009940:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8009944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009946:	2200      	movs	r2, #0
 8009948:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800994c:	69b8      	ldr	r0, [r7, #24]
 800994e:	68f9      	ldr	r1, [r7, #12]
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	f7fe fed1 	bl	80086f8 <pxPortInitialiseStack>
 8009956:	4602      	mov	r2, r0
 8009958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800995c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995e:	2b00      	cmp	r3, #0
 8009960:	d002      	beq.n	8009968 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009966:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009968:	3720      	adds	r7, #32
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop

08009970 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009978:	f7fe ffe4 	bl	8008944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800997c:	4b2d      	ldr	r3, [pc, #180]	; (8009a34 <prvAddNewTaskToReadyList+0xc4>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3301      	adds	r3, #1
 8009982:	4a2c      	ldr	r2, [pc, #176]	; (8009a34 <prvAddNewTaskToReadyList+0xc4>)
 8009984:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009986:	4b2c      	ldr	r3, [pc, #176]	; (8009a38 <prvAddNewTaskToReadyList+0xc8>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d109      	bne.n	80099a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800998e:	4a2a      	ldr	r2, [pc, #168]	; (8009a38 <prvAddNewTaskToReadyList+0xc8>)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009994:	4b27      	ldr	r3, [pc, #156]	; (8009a34 <prvAddNewTaskToReadyList+0xc4>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d110      	bne.n	80099be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800999c:	f000 fd1c 	bl	800a3d8 <prvInitialiseTaskLists>
 80099a0:	e00d      	b.n	80099be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80099a2:	4b26      	ldr	r3, [pc, #152]	; (8009a3c <prvAddNewTaskToReadyList+0xcc>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d109      	bne.n	80099be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80099aa:	4b23      	ldr	r3, [pc, #140]	; (8009a38 <prvAddNewTaskToReadyList+0xc8>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d802      	bhi.n	80099be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80099b8:	4a1f      	ldr	r2, [pc, #124]	; (8009a38 <prvAddNewTaskToReadyList+0xc8>)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80099be:	4b20      	ldr	r3, [pc, #128]	; (8009a40 <prvAddNewTaskToReadyList+0xd0>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3301      	adds	r3, #1
 80099c4:	4a1e      	ldr	r2, [pc, #120]	; (8009a40 <prvAddNewTaskToReadyList+0xd0>)
 80099c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80099c8:	4b1d      	ldr	r3, [pc, #116]	; (8009a40 <prvAddNewTaskToReadyList+0xd0>)
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d4:	461a      	mov	r2, r3
 80099d6:	2301      	movs	r3, #1
 80099d8:	fa03 f202 	lsl.w	r2, r3, r2
 80099dc:	4b19      	ldr	r3, [pc, #100]	; (8009a44 <prvAddNewTaskToReadyList+0xd4>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	4a18      	ldr	r2, [pc, #96]	; (8009a44 <prvAddNewTaskToReadyList+0xd4>)
 80099e4:	6013      	str	r3, [r2, #0]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ea:	4613      	mov	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4a15      	ldr	r2, [pc, #84]	; (8009a48 <prvAddNewTaskToReadyList+0xd8>)
 80099f4:	441a      	add	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	3304      	adds	r3, #4
 80099fa:	4610      	mov	r0, r2
 80099fc:	4619      	mov	r1, r3
 80099fe:	f7ff f907 	bl	8008c10 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a02:	f7fe ffcd 	bl	80089a0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a06:	4b0d      	ldr	r3, [pc, #52]	; (8009a3c <prvAddNewTaskToReadyList+0xcc>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00e      	beq.n	8009a2c <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a0e:	4b0a      	ldr	r3, [pc, #40]	; (8009a38 <prvAddNewTaskToReadyList+0xc8>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d207      	bcs.n	8009a2c <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a1c:	4b0b      	ldr	r3, [pc, #44]	; (8009a4c <prvAddNewTaskToReadyList+0xdc>)
 8009a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a22:	601a      	str	r2, [r3, #0]
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20000788 	.word	0x20000788
 8009a38:	2000069c 	.word	0x2000069c
 8009a3c:	20000794 	.word	0x20000794
 8009a40:	200007a4 	.word	0x200007a4
 8009a44:	20000790 	.word	0x20000790
 8009a48:	200006a0 	.word	0x200006a0
 8009a4c:	e000ed04 	.word	0xe000ed04

08009a50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d016      	beq.n	8009a90 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a62:	4b12      	ldr	r3, [pc, #72]	; (8009aac <vTaskDelay+0x5c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d009      	beq.n	8009a7e <vTaskDelay+0x2e>
 8009a6a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009a6e:	f383 8811 	msr	BASEPRI, r3
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	60bb      	str	r3, [r7, #8]
 8009a7c:	e7fe      	b.n	8009a7c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009a7e:	f000 f981 	bl	8009d84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	2100      	movs	r1, #0
 8009a86:	f000 fde5 	bl	800a654 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009a8a:	f000 f989 	bl	8009da0 <xTaskResumeAll>
 8009a8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d107      	bne.n	8009aa6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009a96:	4b06      	ldr	r3, [pc, #24]	; (8009ab0 <vTaskDelay+0x60>)
 8009a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	200007b0 	.word	0x200007b0
 8009ab0:	e000ed04 	.word	0xe000ed04

08009ab4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009abc:	f7fe ff42 	bl	8008944 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d102      	bne.n	8009acc <vTaskSuspend+0x18>
 8009ac6:	4b3b      	ldr	r3, [pc, #236]	; (8009bb4 <vTaskSuspend+0x100>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	e000      	b.n	8009ace <vTaskSuspend+0x1a>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7ff f8f7 	bl	8008cc8 <uxListRemove>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d115      	bne.n	8009b0c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae4:	4934      	ldr	r1, [pc, #208]	; (8009bb8 <vTaskSuspend+0x104>)
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	440b      	add	r3, r1
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10a      	bne.n	8009b0c <vTaskSuspend+0x58>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afa:	461a      	mov	r2, r3
 8009afc:	2301      	movs	r3, #1
 8009afe:	4093      	lsls	r3, r2
 8009b00:	43da      	mvns	r2, r3
 8009b02:	4b2e      	ldr	r3, [pc, #184]	; (8009bbc <vTaskSuspend+0x108>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4013      	ands	r3, r2
 8009b08:	4a2c      	ldr	r2, [pc, #176]	; (8009bbc <vTaskSuspend+0x108>)
 8009b0a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d004      	beq.n	8009b1e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	3318      	adds	r3, #24
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7ff f8d5 	bl	8008cc8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3304      	adds	r3, #4
 8009b22:	4827      	ldr	r0, [pc, #156]	; (8009bc0 <vTaskSuspend+0x10c>)
 8009b24:	4619      	mov	r1, r3
 8009b26:	f7ff f873 	bl	8008c10 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d103      	bne.n	8009b3e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009b3e:	f7fe ff2f 	bl	80089a0 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009b42:	4b20      	ldr	r3, [pc, #128]	; (8009bc4 <vTaskSuspend+0x110>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d005      	beq.n	8009b56 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009b4a:	f7fe fefb 	bl	8008944 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009b4e:	f000 fcbd 	bl	800a4cc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009b52:	f7fe ff25 	bl	80089a0 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009b56:	4b17      	ldr	r3, [pc, #92]	; (8009bb4 <vTaskSuspend+0x100>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d126      	bne.n	8009bae <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8009b60:	4b18      	ldr	r3, [pc, #96]	; (8009bc4 <vTaskSuspend+0x110>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d016      	beq.n	8009b96 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009b68:	4b17      	ldr	r3, [pc, #92]	; (8009bc8 <vTaskSuspend+0x114>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d009      	beq.n	8009b84 <vTaskSuspend+0xd0>
 8009b70:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	60bb      	str	r3, [r7, #8]
 8009b82:	e7fe      	b.n	8009b82 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8009b84:	4b11      	ldr	r3, [pc, #68]	; (8009bcc <vTaskSuspend+0x118>)
 8009b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	e00b      	b.n	8009bae <vTaskSuspend+0xfa>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009b96:	4b0a      	ldr	r3, [pc, #40]	; (8009bc0 <vTaskSuspend+0x10c>)
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	4b0d      	ldr	r3, [pc, #52]	; (8009bd0 <vTaskSuspend+0x11c>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d103      	bne.n	8009baa <vTaskSuspend+0xf6>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8009ba2:	4b04      	ldr	r3, [pc, #16]	; (8009bb4 <vTaskSuspend+0x100>)
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	601a      	str	r2, [r3, #0]
 8009ba8:	e001      	b.n	8009bae <vTaskSuspend+0xfa>
				}
				else
				{
					vTaskSwitchContext();
 8009baa:	f000 fa61 	bl	800a070 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	2000069c 	.word	0x2000069c
 8009bb8:	200006a0 	.word	0x200006a0
 8009bbc:	20000790 	.word	0x20000790
 8009bc0:	20000774 	.word	0x20000774
 8009bc4:	20000794 	.word	0x20000794
 8009bc8:	200007b0 	.word	0x200007b0
 8009bcc:	e000ed04 	.word	0xe000ed04
 8009bd0:	20000788 	.word	0x20000788

08009bd4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d109      	bne.n	8009bfe <prvTaskIsTaskSuspended+0x2a>
 8009bea:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009bee:	f383 8811 	msr	BASEPRI, r3
 8009bf2:	f3bf 8f6f 	isb	sy
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	60fb      	str	r3, [r7, #12]
 8009bfc:	e7fe      	b.n	8009bfc <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	4a0a      	ldr	r2, [pc, #40]	; (8009c2c <prvTaskIsTaskSuspended+0x58>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d10a      	bne.n	8009c1e <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0c:	4a08      	ldr	r2, [pc, #32]	; (8009c30 <prvTaskIsTaskSuspended+0x5c>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d005      	beq.n	8009c1e <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d101      	bne.n	8009c1e <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c1e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009c20:	4618      	mov	r0, r3
 8009c22:	371c      	adds	r7, #28
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	20000774 	.word	0x20000774
 8009c30:	20000748 	.word	0x20000748

08009c34 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d109      	bne.n	8009c5a <vTaskResume+0x26>
 8009c46:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009c4a:	f383 8811 	msr	BASEPRI, r3
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	f3bf 8f4f 	dsb	sy
 8009c56:	60bb      	str	r3, [r7, #8]
 8009c58:	e7fe      	b.n	8009c58 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8009c5a:	4b21      	ldr	r3, [pc, #132]	; (8009ce0 <vTaskResume+0xac>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68fa      	ldr	r2, [r7, #12]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d039      	beq.n	8009cd8 <vTaskResume+0xa4>
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d036      	beq.n	8009cd8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8009c6a:	f7fe fe6b 	bl	8008944 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f7ff ffb0 	bl	8009bd4 <prvTaskIsTaskSuspended>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d02c      	beq.n	8009cd4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	3304      	adds	r3, #4
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7ff f822 	bl	8008cc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c88:	461a      	mov	r2, r3
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	fa03 f202 	lsl.w	r2, r3, r2
 8009c90:	4b14      	ldr	r3, [pc, #80]	; (8009ce4 <vTaskResume+0xb0>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	4a13      	ldr	r2, [pc, #76]	; (8009ce4 <vTaskResume+0xb0>)
 8009c98:	6013      	str	r3, [r2, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4413      	add	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	4a10      	ldr	r2, [pc, #64]	; (8009ce8 <vTaskResume+0xb4>)
 8009ca8:	441a      	add	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3304      	adds	r3, #4
 8009cae:	4610      	mov	r0, r2
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	f7fe ffad 	bl	8008c10 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cba:	4b09      	ldr	r3, [pc, #36]	; (8009ce0 <vTaskResume+0xac>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d307      	bcc.n	8009cd4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8009cc4:	4b09      	ldr	r3, [pc, #36]	; (8009cec <vTaskResume+0xb8>)
 8009cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8009cd4:	f7fe fe64 	bl	80089a0 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	2000069c 	.word	0x2000069c
 8009ce4:	20000790 	.word	0x20000790
 8009ce8:	200006a0 	.word	0x200006a0
 8009cec:	e000ed04 	.word	0xe000ed04

08009cf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	4b1c      	ldr	r3, [pc, #112]	; (8009d6c <vTaskStartScheduler+0x7c>)
 8009cfc:	9301      	str	r3, [sp, #4]
 8009cfe:	481c      	ldr	r0, [pc, #112]	; (8009d70 <vTaskStartScheduler+0x80>)
 8009d00:	491c      	ldr	r1, [pc, #112]	; (8009d74 <vTaskStartScheduler+0x84>)
 8009d02:	2282      	movs	r2, #130	; 0x82
 8009d04:	2300      	movs	r3, #0
 8009d06:	f7ff fd4f 	bl	80097a8 <xTaskCreate>
 8009d0a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d102      	bne.n	8009d18 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8009d12:	f000 fd09 	bl	800a728 <xTimerCreateTimerTask>
 8009d16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d115      	bne.n	8009d4a <vTaskStartScheduler+0x5a>
 8009d1e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009d30:	4b11      	ldr	r3, [pc, #68]	; (8009d78 <vTaskStartScheduler+0x88>)
 8009d32:	f04f 32ff 	mov.w	r2, #4294967295
 8009d36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009d38:	4b10      	ldr	r3, [pc, #64]	; (8009d7c <vTaskStartScheduler+0x8c>)
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009d3e:	4b10      	ldr	r3, [pc, #64]	; (8009d80 <vTaskStartScheduler+0x90>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009d44:	f7fe fd60 	bl	8008808 <xPortStartScheduler>
 8009d48:	e00d      	b.n	8009d66 <vTaskStartScheduler+0x76>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d50:	d109      	bne.n	8009d66 <vTaskStartScheduler+0x76>
 8009d52:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009d56:	f383 8811 	msr	BASEPRI, r3
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	607b      	str	r3, [r7, #4]
 8009d64:	e7fe      	b.n	8009d64 <vTaskStartScheduler+0x74>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	200007ac 	.word	0x200007ac
 8009d70:	0800a3a9 	.word	0x0800a3a9
 8009d74:	0800f878 	.word	0x0800f878
 8009d78:	200007a8 	.word	0x200007a8
 8009d7c:	20000794 	.word	0x20000794
 8009d80:	2000078c 	.word	0x2000078c

08009d84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d84:	b480      	push	{r7}
 8009d86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009d88:	4b04      	ldr	r3, [pc, #16]	; (8009d9c <vTaskSuspendAll+0x18>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	4a03      	ldr	r2, [pc, #12]	; (8009d9c <vTaskSuspendAll+0x18>)
 8009d90:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	200007b0 	.word	0x200007b0

08009da0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009daa:	2300      	movs	r3, #0
 8009dac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009dae:	4b42      	ldr	r3, [pc, #264]	; (8009eb8 <xTaskResumeAll+0x118>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d109      	bne.n	8009dca <xTaskResumeAll+0x2a>
 8009db6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009dba:	f383 8811 	msr	BASEPRI, r3
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	603b      	str	r3, [r7, #0]
 8009dc8:	e7fe      	b.n	8009dc8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009dca:	f7fe fdbb 	bl	8008944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009dce:	4b3a      	ldr	r3, [pc, #232]	; (8009eb8 <xTaskResumeAll+0x118>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	4a38      	ldr	r2, [pc, #224]	; (8009eb8 <xTaskResumeAll+0x118>)
 8009dd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dd8:	4b37      	ldr	r3, [pc, #220]	; (8009eb8 <xTaskResumeAll+0x118>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d163      	bne.n	8009ea8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009de0:	4b36      	ldr	r3, [pc, #216]	; (8009ebc <xTaskResumeAll+0x11c>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d05f      	beq.n	8009ea8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009de8:	e030      	b.n	8009e4c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dea:	4b35      	ldr	r3, [pc, #212]	; (8009ec0 <xTaskResumeAll+0x120>)
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	3318      	adds	r3, #24
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fe ff66 	bl	8008cc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	3304      	adds	r3, #4
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fe ff61 	bl	8008cc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	fa03 f202 	lsl.w	r2, r3, r2
 8009e12:	4b2c      	ldr	r3, [pc, #176]	; (8009ec4 <xTaskResumeAll+0x124>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	4a2a      	ldr	r2, [pc, #168]	; (8009ec4 <xTaskResumeAll+0x124>)
 8009e1a:	6013      	str	r3, [r2, #0]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e20:	4613      	mov	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4a27      	ldr	r2, [pc, #156]	; (8009ec8 <xTaskResumeAll+0x128>)
 8009e2a:	441a      	add	r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3304      	adds	r3, #4
 8009e30:	4610      	mov	r0, r2
 8009e32:	4619      	mov	r1, r3
 8009e34:	f7fe feec 	bl	8008c10 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3c:	4b23      	ldr	r3, [pc, #140]	; (8009ecc <xTaskResumeAll+0x12c>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d302      	bcc.n	8009e4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009e46:	4b22      	ldr	r3, [pc, #136]	; (8009ed0 <xTaskResumeAll+0x130>)
 8009e48:	2201      	movs	r2, #1
 8009e4a:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e4c:	4b1c      	ldr	r3, [pc, #112]	; (8009ec0 <xTaskResumeAll+0x120>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1ca      	bne.n	8009dea <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009e5a:	f000 fb37 	bl	800a4cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009e5e:	4b1d      	ldr	r3, [pc, #116]	; (8009ed4 <xTaskResumeAll+0x134>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d010      	beq.n	8009e8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009e6a:	f000 f847 	bl	8009efc <xTaskIncrementTick>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009e74:	4b16      	ldr	r3, [pc, #88]	; (8009ed0 <xTaskResumeAll+0x130>)
 8009e76:	2201      	movs	r2, #1
 8009e78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1f1      	bne.n	8009e6a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009e86:	4b13      	ldr	r3, [pc, #76]	; (8009ed4 <xTaskResumeAll+0x134>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009e8c:	4b10      	ldr	r3, [pc, #64]	; (8009ed0 <xTaskResumeAll+0x130>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d009      	beq.n	8009ea8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e94:	2301      	movs	r3, #1
 8009e96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e98:	4b0f      	ldr	r3, [pc, #60]	; (8009ed8 <xTaskResumeAll+0x138>)
 8009e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e9e:	601a      	str	r2, [r3, #0]
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ea8:	f7fe fd7a 	bl	80089a0 <vPortExitCritical>

	return xAlreadyYielded;
 8009eac:	68bb      	ldr	r3, [r7, #8]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	200007b0 	.word	0x200007b0
 8009ebc:	20000788 	.word	0x20000788
 8009ec0:	20000748 	.word	0x20000748
 8009ec4:	20000790 	.word	0x20000790
 8009ec8:	200006a0 	.word	0x200006a0
 8009ecc:	2000069c 	.word	0x2000069c
 8009ed0:	2000079c 	.word	0x2000079c
 8009ed4:	20000798 	.word	0x20000798
 8009ed8:	e000ed04 	.word	0xe000ed04

08009edc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009ee2:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <xTaskGetTickCount+0x1c>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ee8:	687b      	ldr	r3, [r7, #4]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	370c      	adds	r7, #12
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	2000078c 	.word	0x2000078c

08009efc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f02:	2300      	movs	r3, #0
 8009f04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f06:	4b4f      	ldr	r3, [pc, #316]	; (800a044 <xTaskIncrementTick+0x148>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f040 8089 	bne.w	800a022 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f10:	4b4d      	ldr	r3, [pc, #308]	; (800a048 <xTaskIncrementTick+0x14c>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3301      	adds	r3, #1
 8009f16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f18:	4a4b      	ldr	r2, [pc, #300]	; (800a048 <xTaskIncrementTick+0x14c>)
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d11f      	bne.n	8009f64 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009f24:	4b49      	ldr	r3, [pc, #292]	; (800a04c <xTaskIncrementTick+0x150>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d009      	beq.n	8009f42 <xTaskIncrementTick+0x46>
 8009f2e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	603b      	str	r3, [r7, #0]
 8009f40:	e7fe      	b.n	8009f40 <xTaskIncrementTick+0x44>
 8009f42:	4b42      	ldr	r3, [pc, #264]	; (800a04c <xTaskIncrementTick+0x150>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	60fb      	str	r3, [r7, #12]
 8009f48:	4b41      	ldr	r3, [pc, #260]	; (800a050 <xTaskIncrementTick+0x154>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a3f      	ldr	r2, [pc, #252]	; (800a04c <xTaskIncrementTick+0x150>)
 8009f4e:	6013      	str	r3, [r2, #0]
 8009f50:	4a3f      	ldr	r2, [pc, #252]	; (800a050 <xTaskIncrementTick+0x154>)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6013      	str	r3, [r2, #0]
 8009f56:	4b3f      	ldr	r3, [pc, #252]	; (800a054 <xTaskIncrementTick+0x158>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	4a3d      	ldr	r2, [pc, #244]	; (800a054 <xTaskIncrementTick+0x158>)
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	f000 fab4 	bl	800a4cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009f64:	4b3c      	ldr	r3, [pc, #240]	; (800a058 <xTaskIncrementTick+0x15c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d34a      	bcc.n	800a004 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f6e:	4b37      	ldr	r3, [pc, #220]	; (800a04c <xTaskIncrementTick+0x150>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d104      	bne.n	8009f82 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f78:	4b37      	ldr	r3, [pc, #220]	; (800a058 <xTaskIncrementTick+0x15c>)
 8009f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7e:	601a      	str	r2, [r3, #0]
					break;
 8009f80:	e040      	b.n	800a004 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f82:	4b32      	ldr	r3, [pc, #200]	; (800a04c <xTaskIncrementTick+0x150>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009f92:	693a      	ldr	r2, [r7, #16]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d203      	bcs.n	8009fa2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f9a:	4a2f      	ldr	r2, [pc, #188]	; (800a058 <xTaskIncrementTick+0x15c>)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009fa0:	e030      	b.n	800a004 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fe fe8e 	bl	8008cc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d004      	beq.n	8009fbe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	3318      	adds	r3, #24
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fe fe85 	bl	8008cc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	fa03 f202 	lsl.w	r2, r3, r2
 8009fca:	4b24      	ldr	r3, [pc, #144]	; (800a05c <xTaskIncrementTick+0x160>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	4a22      	ldr	r2, [pc, #136]	; (800a05c <xTaskIncrementTick+0x160>)
 8009fd2:	6013      	str	r3, [r2, #0]
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd8:	4613      	mov	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	4a1f      	ldr	r2, [pc, #124]	; (800a060 <xTaskIncrementTick+0x164>)
 8009fe2:	441a      	add	r2, r3
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	4610      	mov	r0, r2
 8009fea:	4619      	mov	r1, r3
 8009fec:	f7fe fe10 	bl	8008c10 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff4:	4b1b      	ldr	r3, [pc, #108]	; (800a064 <xTaskIncrementTick+0x168>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d301      	bcc.n	800a002 <xTaskIncrementTick+0x106>
						{
							xSwitchRequired = pdTRUE;
 8009ffe:	2301      	movs	r3, #1
 800a000:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 800a002:	e7b4      	b.n	8009f6e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a004:	4b17      	ldr	r3, [pc, #92]	; (800a064 <xTaskIncrementTick+0x168>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a00a:	4915      	ldr	r1, [pc, #84]	; (800a060 <xTaskIncrementTick+0x164>)
 800a00c:	4613      	mov	r3, r2
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4413      	add	r3, r2
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	440b      	add	r3, r1
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d901      	bls.n	800a020 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a01c:	2301      	movs	r3, #1
 800a01e:	617b      	str	r3, [r7, #20]
 800a020:	e004      	b.n	800a02c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a022:	4b11      	ldr	r3, [pc, #68]	; (800a068 <xTaskIncrementTick+0x16c>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3301      	adds	r3, #1
 800a028:	4a0f      	ldr	r2, [pc, #60]	; (800a068 <xTaskIncrementTick+0x16c>)
 800a02a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a02c:	4b0f      	ldr	r3, [pc, #60]	; (800a06c <xTaskIncrementTick+0x170>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800a034:	2301      	movs	r3, #1
 800a036:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a038:	697b      	ldr	r3, [r7, #20]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3718      	adds	r7, #24
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	200007b0 	.word	0x200007b0
 800a048:	2000078c 	.word	0x2000078c
 800a04c:	20000740 	.word	0x20000740
 800a050:	20000744 	.word	0x20000744
 800a054:	200007a0 	.word	0x200007a0
 800a058:	200007a8 	.word	0x200007a8
 800a05c:	20000790 	.word	0x20000790
 800a060:	200006a0 	.word	0x200006a0
 800a064:	2000069c 	.word	0x2000069c
 800a068:	20000798 	.word	0x20000798
 800a06c:	2000079c 	.word	0x2000079c

0800a070 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a070:	b480      	push	{r7}
 800a072:	b087      	sub	sp, #28
 800a074:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a076:	4b26      	ldr	r3, [pc, #152]	; (800a110 <vTaskSwitchContext+0xa0>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d003      	beq.n	800a086 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a07e:	4b25      	ldr	r3, [pc, #148]	; (800a114 <vTaskSwitchContext+0xa4>)
 800a080:	2201      	movs	r2, #1
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	e03e      	b.n	800a104 <vTaskSwitchContext+0x94>
	}
	else
	{
		xYieldPending = pdFALSE;
 800a086:	4b23      	ldr	r3, [pc, #140]	; (800a114 <vTaskSwitchContext+0xa4>)
 800a088:	2200      	movs	r2, #0
 800a08a:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a08c:	4b22      	ldr	r3, [pc, #136]	; (800a118 <vTaskSwitchContext+0xa8>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	60fb      	str	r3, [r7, #12]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	fab3 f383 	clz	r3, r3
 800a098:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a09a:	7afb      	ldrb	r3, [r7, #11]
 800a09c:	f1c3 031f 	rsb	r3, r3, #31
 800a0a0:	617b      	str	r3, [r7, #20]
 800a0a2:	491e      	ldr	r1, [pc, #120]	; (800a11c <vTaskSwitchContext+0xac>)
 800a0a4:	697a      	ldr	r2, [r7, #20]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	440b      	add	r3, r1
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d109      	bne.n	800a0ca <vTaskSwitchContext+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0b6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	607b      	str	r3, [r7, #4]
 800a0c8:	e7fe      	b.n	800a0c8 <vTaskSwitchContext+0x58>
 800a0ca:	697a      	ldr	r2, [r7, #20]
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	4413      	add	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4a11      	ldr	r2, [pc, #68]	; (800a11c <vTaskSwitchContext+0xac>)
 800a0d6:	4413      	add	r3, r2
 800a0d8:	613b      	str	r3, [r7, #16]
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	605a      	str	r2, [r3, #4]
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	685a      	ldr	r2, [r3, #4]
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	3308      	adds	r3, #8
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d104      	bne.n	800a0fa <vTaskSwitchContext+0x8a>
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	685a      	ldr	r2, [r3, #4]
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	605a      	str	r2, [r3, #4]
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	4a07      	ldr	r2, [pc, #28]	; (800a120 <vTaskSwitchContext+0xb0>)
 800a102:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a104:	371c      	adds	r7, #28
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	200007b0 	.word	0x200007b0
 800a114:	2000079c 	.word	0x2000079c
 800a118:	20000790 	.word	0x20000790
 800a11c:	200006a0 	.word	0x200006a0
 800a120:	2000069c 	.word	0x2000069c

0800a124 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d109      	bne.n	800a148 <vTaskPlaceOnEventList+0x24>
 800a134:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	60fb      	str	r3, [r7, #12]
 800a146:	e7fe      	b.n	800a146 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a148:	4b06      	ldr	r3, [pc, #24]	; (800a164 <vTaskPlaceOnEventList+0x40>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	3318      	adds	r3, #24
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	4619      	mov	r1, r3
 800a152:	f7fe fd81 	bl	8008c58 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a156:	6838      	ldr	r0, [r7, #0]
 800a158:	2101      	movs	r1, #1
 800a15a:	f000 fa7b 	bl	800a654 <prvAddCurrentTaskToDelayedList>
}
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	2000069c 	.word	0x2000069c

0800a168 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d109      	bne.n	800a18e <vTaskPlaceOnEventListRestricted+0x26>
 800a17a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	617b      	str	r3, [r7, #20]
 800a18c:	e7fe      	b.n	800a18c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a18e:	4b0a      	ldr	r3, [pc, #40]	; (800a1b8 <vTaskPlaceOnEventListRestricted+0x50>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3318      	adds	r3, #24
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	4619      	mov	r1, r3
 800a198:	f7fe fd3a 	bl	8008c10 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d002      	beq.n	800a1a8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a1a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a1a8:	68b8      	ldr	r0, [r7, #8]
 800a1aa:	6879      	ldr	r1, [r7, #4]
 800a1ac:	f000 fa52 	bl	800a654 <prvAddCurrentTaskToDelayedList>
	}
 800a1b0:	3718      	adds	r7, #24
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	2000069c 	.word	0x2000069c

0800a1bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d109      	bne.n	800a1e6 <xTaskRemoveFromEventList+0x2a>
 800a1d2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a1d6:	f383 8811 	msr	BASEPRI, r3
 800a1da:	f3bf 8f6f 	isb	sy
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	60fb      	str	r3, [r7, #12]
 800a1e4:	e7fe      	b.n	800a1e4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	3318      	adds	r3, #24
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fe fd6c 	bl	8008cc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1f0:	4b1e      	ldr	r3, [pc, #120]	; (800a26c <xTaskRemoveFromEventList+0xb0>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d11e      	bne.n	800a236 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	3304      	adds	r3, #4
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7fe fd63 	bl	8008cc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a206:	461a      	mov	r2, r3
 800a208:	2301      	movs	r3, #1
 800a20a:	fa03 f202 	lsl.w	r2, r3, r2
 800a20e:	4b18      	ldr	r3, [pc, #96]	; (800a270 <xTaskRemoveFromEventList+0xb4>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4313      	orrs	r3, r2
 800a214:	4a16      	ldr	r2, [pc, #88]	; (800a270 <xTaskRemoveFromEventList+0xb4>)
 800a216:	6013      	str	r3, [r2, #0]
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a21c:	4613      	mov	r3, r2
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	4413      	add	r3, r2
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	4a13      	ldr	r2, [pc, #76]	; (800a274 <xTaskRemoveFromEventList+0xb8>)
 800a226:	441a      	add	r2, r3
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	3304      	adds	r3, #4
 800a22c:	4610      	mov	r0, r2
 800a22e:	4619      	mov	r1, r3
 800a230:	f7fe fcee 	bl	8008c10 <vListInsertEnd>
 800a234:	e005      	b.n	800a242 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	3318      	adds	r3, #24
 800a23a:	480f      	ldr	r0, [pc, #60]	; (800a278 <xTaskRemoveFromEventList+0xbc>)
 800a23c:	4619      	mov	r1, r3
 800a23e:	f7fe fce7 	bl	8008c10 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a246:	4b0d      	ldr	r3, [pc, #52]	; (800a27c <xTaskRemoveFromEventList+0xc0>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d905      	bls.n	800a25c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a250:	2301      	movs	r3, #1
 800a252:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a254:	4b0a      	ldr	r3, [pc, #40]	; (800a280 <xTaskRemoveFromEventList+0xc4>)
 800a256:	2201      	movs	r2, #1
 800a258:	601a      	str	r2, [r3, #0]
 800a25a:	e001      	b.n	800a260 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a25c:	2300      	movs	r3, #0
 800a25e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a260:	697b      	ldr	r3, [r7, #20]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3718      	adds	r7, #24
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	200007b0 	.word	0x200007b0
 800a270:	20000790 	.word	0x20000790
 800a274:	200006a0 	.word	0x200006a0
 800a278:	20000748 	.word	0x20000748
 800a27c:	2000069c 	.word	0x2000069c
 800a280:	2000079c 	.word	0x2000079c

0800a284 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a28c:	4b06      	ldr	r3, [pc, #24]	; (800a2a8 <vTaskInternalSetTimeOutState+0x24>)
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a294:	4b05      	ldr	r3, [pc, #20]	; (800a2ac <vTaskInternalSetTimeOutState+0x28>)
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	605a      	str	r2, [r3, #4]
}
 800a29c:	370c      	adds	r7, #12
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	200007a0 	.word	0x200007a0
 800a2ac:	2000078c 	.word	0x2000078c

0800a2b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b088      	sub	sp, #32
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d109      	bne.n	800a2d4 <xTaskCheckForTimeOut+0x24>
 800a2c0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	613b      	str	r3, [r7, #16]
 800a2d2:	e7fe      	b.n	800a2d2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d109      	bne.n	800a2ee <xTaskCheckForTimeOut+0x3e>
 800a2da:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a2de:	f383 8811 	msr	BASEPRI, r3
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	f3bf 8f4f 	dsb	sy
 800a2ea:	60fb      	str	r3, [r7, #12]
 800a2ec:	e7fe      	b.n	800a2ec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a2ee:	f7fe fb29 	bl	8008944 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a2f2:	4b24      	ldr	r3, [pc, #144]	; (800a384 <xTaskCheckForTimeOut+0xd4>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	69ba      	ldr	r2, [r7, #24]
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800a302:	4b21      	ldr	r3, [pc, #132]	; (800a388 <xTaskCheckForTimeOut+0xd8>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d007      	beq.n	800a31e <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a30e:	4b1e      	ldr	r3, [pc, #120]	; (800a388 <xTaskCheckForTimeOut+0xd8>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
				xReturn = pdTRUE;
 800a318:	2301      	movs	r3, #1
 800a31a:	61fb      	str	r3, [r7, #28]
 800a31c:	e02b      	b.n	800a376 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a326:	d102      	bne.n	800a32e <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a328:	2300      	movs	r3, #0
 800a32a:	61fb      	str	r3, [r7, #28]
 800a32c:	e023      	b.n	800a376 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	4b16      	ldr	r3, [pc, #88]	; (800a38c <xTaskCheckForTimeOut+0xdc>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	429a      	cmp	r2, r3
 800a338:	d007      	beq.n	800a34a <xTaskCheckForTimeOut+0x9a>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685a      	ldr	r2, [r3, #4]
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	429a      	cmp	r2, r3
 800a342:	d802      	bhi.n	800a34a <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a344:	2301      	movs	r3, #1
 800a346:	61fb      	str	r3, [r7, #28]
 800a348:	e015      	b.n	800a376 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	429a      	cmp	r2, r3
 800a352:	d90b      	bls.n	800a36c <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	1ad2      	subs	r2, r2, r3
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7ff ff8f 	bl	800a284 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a366:	2300      	movs	r3, #0
 800a368:	61fb      	str	r3, [r7, #28]
 800a36a:	e004      	b.n	800a376 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	2200      	movs	r2, #0
 800a370:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a372:	2301      	movs	r3, #1
 800a374:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a376:	f7fe fb13 	bl	80089a0 <vPortExitCritical>

	return xReturn;
 800a37a:	69fb      	ldr	r3, [r7, #28]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3720      	adds	r7, #32
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	2000078c 	.word	0x2000078c
 800a388:	2000069c 	.word	0x2000069c
 800a38c:	200007a0 	.word	0x200007a0

0800a390 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a390:	b480      	push	{r7}
 800a392:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a394:	4b03      	ldr	r3, [pc, #12]	; (800a3a4 <vTaskMissedYield+0x14>)
 800a396:	2201      	movs	r2, #1
 800a398:	601a      	str	r2, [r3, #0]
}
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	2000079c 	.word	0x2000079c

0800a3a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a3b0:	f000 f850 	bl	800a454 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a3b4:	4b06      	ldr	r3, [pc, #24]	; (800a3d0 <prvIdleTask+0x28>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d907      	bls.n	800a3cc <prvIdleTask+0x24>
			{
				taskYIELD();
 800a3bc:	4b05      	ldr	r3, [pc, #20]	; (800a3d4 <prvIdleTask+0x2c>)
 800a3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 800a3cc:	e7f0      	b.n	800a3b0 <prvIdleTask+0x8>
 800a3ce:	bf00      	nop
 800a3d0:	200006a0 	.word	0x200006a0
 800a3d4:	e000ed04 	.word	0xe000ed04

0800a3d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3de:	2300      	movs	r3, #0
 800a3e0:	607b      	str	r3, [r7, #4]
 800a3e2:	e00c      	b.n	800a3fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	4413      	add	r3, r2
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	4a11      	ldr	r2, [pc, #68]	; (800a434 <prvInitialiseTaskLists+0x5c>)
 800a3f0:	4413      	add	r3, r2
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe fbe0 	bl	8008bb8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	607b      	str	r3, [r7, #4]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2b05      	cmp	r3, #5
 800a402:	d9ef      	bls.n	800a3e4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800a404:	480c      	ldr	r0, [pc, #48]	; (800a438 <prvInitialiseTaskLists+0x60>)
 800a406:	f7fe fbd7 	bl	8008bb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a40a:	480c      	ldr	r0, [pc, #48]	; (800a43c <prvInitialiseTaskLists+0x64>)
 800a40c:	f7fe fbd4 	bl	8008bb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a410:	480b      	ldr	r0, [pc, #44]	; (800a440 <prvInitialiseTaskLists+0x68>)
 800a412:	f7fe fbd1 	bl	8008bb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a416:	480b      	ldr	r0, [pc, #44]	; (800a444 <prvInitialiseTaskLists+0x6c>)
 800a418:	f7fe fbce 	bl	8008bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a41c:	480a      	ldr	r0, [pc, #40]	; (800a448 <prvInitialiseTaskLists+0x70>)
 800a41e:	f7fe fbcb 	bl	8008bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a422:	4b0a      	ldr	r3, [pc, #40]	; (800a44c <prvInitialiseTaskLists+0x74>)
 800a424:	4a04      	ldr	r2, [pc, #16]	; (800a438 <prvInitialiseTaskLists+0x60>)
 800a426:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a428:	4b09      	ldr	r3, [pc, #36]	; (800a450 <prvInitialiseTaskLists+0x78>)
 800a42a:	4a04      	ldr	r2, [pc, #16]	; (800a43c <prvInitialiseTaskLists+0x64>)
 800a42c:	601a      	str	r2, [r3, #0]
}
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	200006a0 	.word	0x200006a0
 800a438:	20000718 	.word	0x20000718
 800a43c:	2000072c 	.word	0x2000072c
 800a440:	20000748 	.word	0x20000748
 800a444:	2000075c 	.word	0x2000075c
 800a448:	20000774 	.word	0x20000774
 800a44c:	20000740 	.word	0x20000740
 800a450:	20000744 	.word	0x20000744

0800a454 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a45a:	e019      	b.n	800a490 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a45c:	f7fe fa72 	bl	8008944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a460:	4b0f      	ldr	r3, [pc, #60]	; (800a4a0 <prvCheckTasksWaitingTermination+0x4c>)
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	3304      	adds	r3, #4
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fe fc2b 	bl	8008cc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a472:	4b0c      	ldr	r3, [pc, #48]	; (800a4a4 <prvCheckTasksWaitingTermination+0x50>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	3b01      	subs	r3, #1
 800a478:	4a0a      	ldr	r2, [pc, #40]	; (800a4a4 <prvCheckTasksWaitingTermination+0x50>)
 800a47a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a47c:	4b0a      	ldr	r3, [pc, #40]	; (800a4a8 <prvCheckTasksWaitingTermination+0x54>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	3b01      	subs	r3, #1
 800a482:	4a09      	ldr	r2, [pc, #36]	; (800a4a8 <prvCheckTasksWaitingTermination+0x54>)
 800a484:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a486:	f7fe fa8b 	bl	80089a0 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f80e 	bl	800a4ac <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a490:	4b05      	ldr	r3, [pc, #20]	; (800a4a8 <prvCheckTasksWaitingTermination+0x54>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1e1      	bne.n	800a45c <prvCheckTasksWaitingTermination+0x8>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a498:	3708      	adds	r7, #8
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	2000075c 	.word	0x2000075c
 800a4a4:	20000788 	.word	0x20000788
 800a4a8:	20000770 	.word	0x20000770

0800a4ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fe fb6b 	bl	8008b94 <vPortFree>
			vPortFree( pxTCB );
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7fe fb68 	bl	8008b94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop

0800a4cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4d2:	4b0c      	ldr	r3, [pc, #48]	; (800a504 <prvResetNextTaskUnblockTime+0x38>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d104      	bne.n	800a4e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4dc:	4b0a      	ldr	r3, [pc, #40]	; (800a508 <prvResetNextTaskUnblockTime+0x3c>)
 800a4de:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e2:	601a      	str	r2, [r3, #0]
 800a4e4:	e008      	b.n	800a4f8 <prvResetNextTaskUnblockTime+0x2c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4e6:	4b07      	ldr	r3, [pc, #28]	; (800a504 <prvResetNextTaskUnblockTime+0x38>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	4a04      	ldr	r2, [pc, #16]	; (800a508 <prvResetNextTaskUnblockTime+0x3c>)
 800a4f6:	6013      	str	r3, [r2, #0]
	}
}
 800a4f8:	370c      	adds	r7, #12
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	20000740 	.word	0x20000740
 800a508:	200007a8 	.word	0x200007a8

0800a50c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a512:	4b0b      	ldr	r3, [pc, #44]	; (800a540 <xTaskGetSchedulerState+0x34>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d102      	bne.n	800a520 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a51a:	2301      	movs	r3, #1
 800a51c:	607b      	str	r3, [r7, #4]
 800a51e:	e008      	b.n	800a532 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a520:	4b08      	ldr	r3, [pc, #32]	; (800a544 <xTaskGetSchedulerState+0x38>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d102      	bne.n	800a52e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a528:	2302      	movs	r3, #2
 800a52a:	607b      	str	r3, [r7, #4]
 800a52c:	e001      	b.n	800a532 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a52e:	2300      	movs	r3, #0
 800a530:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a532:	687b      	ldr	r3, [r7, #4]
	}
 800a534:	4618      	mov	r0, r3
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	20000794 	.word	0x20000794
 800a544:	200007b0 	.word	0x200007b0

0800a548 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a554:	2300      	movs	r3, #0
 800a556:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d06e      	beq.n	800a63c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a55e:	4b3a      	ldr	r3, [pc, #232]	; (800a648 <xTaskPriorityDisinherit+0x100>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	693a      	ldr	r2, [r7, #16]
 800a564:	429a      	cmp	r2, r3
 800a566:	d009      	beq.n	800a57c <xTaskPriorityDisinherit+0x34>
 800a568:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	60fb      	str	r3, [r7, #12]
 800a57a:	e7fe      	b.n	800a57a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a580:	2b00      	cmp	r3, #0
 800a582:	d109      	bne.n	800a598 <xTaskPriorityDisinherit+0x50>
 800a584:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	60bb      	str	r3, [r7, #8]
 800a596:	e7fe      	b.n	800a596 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a59c:	1e5a      	subs	r2, r3, #1
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d046      	beq.n	800a63c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d142      	bne.n	800a63c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fe fb84 	bl	8008cc8 <uxListRemove>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d115      	bne.n	800a5f2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ca:	4920      	ldr	r1, [pc, #128]	; (800a64c <xTaskPriorityDisinherit+0x104>)
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4413      	add	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	440b      	add	r3, r1
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10a      	bne.n	800a5f2 <xTaskPriorityDisinherit+0xaa>
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	4093      	lsls	r3, r2
 800a5e6:	43da      	mvns	r2, r3
 800a5e8:	4b19      	ldr	r3, [pc, #100]	; (800a650 <xTaskPriorityDisinherit+0x108>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4013      	ands	r3, r2
 800a5ee:	4a18      	ldr	r2, [pc, #96]	; (800a650 <xTaskPriorityDisinherit+0x108>)
 800a5f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fe:	f1c3 0206 	rsb	r2, r3, #6
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60a:	461a      	mov	r2, r3
 800a60c:	2301      	movs	r3, #1
 800a60e:	fa03 f202 	lsl.w	r2, r3, r2
 800a612:	4b0f      	ldr	r3, [pc, #60]	; (800a650 <xTaskPriorityDisinherit+0x108>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4313      	orrs	r3, r2
 800a618:	4a0d      	ldr	r2, [pc, #52]	; (800a650 <xTaskPriorityDisinherit+0x108>)
 800a61a:	6013      	str	r3, [r2, #0]
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a620:	4613      	mov	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	4413      	add	r3, r2
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	4a08      	ldr	r2, [pc, #32]	; (800a64c <xTaskPriorityDisinherit+0x104>)
 800a62a:	441a      	add	r2, r3
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	3304      	adds	r3, #4
 800a630:	4610      	mov	r0, r2
 800a632:	4619      	mov	r1, r3
 800a634:	f7fe faec 	bl	8008c10 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a638:	2301      	movs	r3, #1
 800a63a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a63c:	697b      	ldr	r3, [r7, #20]
	}
 800a63e:	4618      	mov	r0, r3
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	2000069c 	.word	0x2000069c
 800a64c:	200006a0 	.word	0x200006a0
 800a650:	20000790 	.word	0x20000790

0800a654 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a65e:	4b2b      	ldr	r3, [pc, #172]	; (800a70c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a664:	4b2a      	ldr	r3, [pc, #168]	; (800a710 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a66e:	4b28      	ldr	r3, [pc, #160]	; (800a710 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	3304      	adds	r3, #4
 800a674:	4618      	mov	r0, r3
 800a676:	f7fe fb27 	bl	8008cc8 <uxListRemove>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10b      	bne.n	800a698 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a680:	4b23      	ldr	r3, [pc, #140]	; (800a710 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a686:	461a      	mov	r2, r3
 800a688:	2301      	movs	r3, #1
 800a68a:	4093      	lsls	r3, r2
 800a68c:	43da      	mvns	r2, r3
 800a68e:	4b21      	ldr	r3, [pc, #132]	; (800a714 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4013      	ands	r3, r2
 800a694:	4a1f      	ldr	r2, [pc, #124]	; (800a714 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a696:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a69e:	d10a      	bne.n	800a6b6 <prvAddCurrentTaskToDelayedList+0x62>
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d007      	beq.n	800a6b6 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6a6:	4b1a      	ldr	r3, [pc, #104]	; (800a710 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3304      	adds	r3, #4
 800a6ac:	481a      	ldr	r0, [pc, #104]	; (800a718 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	f7fe faae 	bl	8008c10 <vListInsertEnd>
 800a6b4:	e026      	b.n	800a704 <prvAddCurrentTaskToDelayedList+0xb0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a6be:	4b14      	ldr	r3, [pc, #80]	; (800a710 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d209      	bcs.n	800a6e2 <prvAddCurrentTaskToDelayedList+0x8e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6ce:	4b13      	ldr	r3, [pc, #76]	; (800a71c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	4b0f      	ldr	r3, [pc, #60]	; (800a710 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3304      	adds	r3, #4
 800a6d8:	4610      	mov	r0, r2
 800a6da:	4619      	mov	r1, r3
 800a6dc:	f7fe fabc 	bl	8008c58 <vListInsert>
 800a6e0:	e010      	b.n	800a704 <prvAddCurrentTaskToDelayedList+0xb0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6e2:	4b0f      	ldr	r3, [pc, #60]	; (800a720 <prvAddCurrentTaskToDelayedList+0xcc>)
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	4b0a      	ldr	r3, [pc, #40]	; (800a710 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	3304      	adds	r3, #4
 800a6ec:	4610      	mov	r0, r2
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	f7fe fab2 	bl	8008c58 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800a6f4:	4b0b      	ldr	r3, [pc, #44]	; (800a724 <prvAddCurrentTaskToDelayedList+0xd0>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d202      	bcs.n	800a704 <prvAddCurrentTaskToDelayedList+0xb0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800a6fe:	4a09      	ldr	r2, [pc, #36]	; (800a724 <prvAddCurrentTaskToDelayedList+0xd0>)
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	2000078c 	.word	0x2000078c
 800a710:	2000069c 	.word	0x2000069c
 800a714:	20000790 	.word	0x20000790
 800a718:	20000774 	.word	0x20000774
 800a71c:	20000744 	.word	0x20000744
 800a720:	20000740 	.word	0x20000740
 800a724:	200007a8 	.word	0x200007a8

0800a728 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800a72e:	2300      	movs	r3, #0
 800a730:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a732:	f000 fb4f 	bl	800add4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a736:	4b11      	ldr	r3, [pc, #68]	; (800a77c <xTimerCreateTimerTask+0x54>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00b      	beq.n	800a756 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800a73e:	2304      	movs	r3, #4
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	4b0f      	ldr	r3, [pc, #60]	; (800a780 <xTimerCreateTimerTask+0x58>)
 800a744:	9301      	str	r3, [sp, #4]
 800a746:	480f      	ldr	r0, [pc, #60]	; (800a784 <xTimerCreateTimerTask+0x5c>)
 800a748:	490f      	ldr	r1, [pc, #60]	; (800a788 <xTimerCreateTimerTask+0x60>)
 800a74a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a74e:	2300      	movs	r3, #0
 800a750:	f7ff f82a 	bl	80097a8 <xTaskCreate>
 800a754:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d109      	bne.n	800a770 <xTimerCreateTimerTask+0x48>
 800a75c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a760:	f383 8811 	msr	BASEPRI, r3
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	603b      	str	r3, [r7, #0]
 800a76e:	e7fe      	b.n	800a76e <xTimerCreateTimerTask+0x46>
	return xReturn;
 800a770:	687b      	ldr	r3, [r7, #4]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	200007e4 	.word	0x200007e4
 800a780:	200007e8 	.word	0x200007e8
 800a784:	0800a981 	.word	0x0800a981
 800a788:	0800f890 	.word	0x0800f890

0800a78c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b088      	sub	sp, #32
 800a790:	af02      	add	r7, sp, #8
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	607a      	str	r2, [r7, #4]
 800a798:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a79a:	202c      	movs	r0, #44	; 0x2c
 800a79c:	f7fe f9e8 	bl	8008b70 <pvPortMalloc>
 800a7a0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00d      	beq.n	800a7c4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	9301      	str	r3, [sp, #4]
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	68b9      	ldr	r1, [r7, #8]
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	f000 f806 	bl	800a7d0 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a7c4:	697b      	ldr	r3, [r7, #20]
	}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3718      	adds	r7, #24
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop

0800a7d0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	607a      	str	r2, [r7, #4]
 800a7dc:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d109      	bne.n	800a7f8 <prvInitialiseNewTimer+0x28>
 800a7e4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	617b      	str	r3, [r7, #20]
 800a7f6:	e7fe      	b.n	800a7f6 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800a7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d01e      	beq.n	800a83c <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a7fe:	f000 fae9 	bl	800add4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	683a      	ldr	r2, [r7, #0]
 800a812:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a816:	6a3a      	ldr	r2, [r7, #32]
 800a818:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81c:	3304      	adds	r3, #4
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fe f9ea 	bl	8008bf8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d008      	beq.n	800a83c <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a830:	f043 0304 	orr.w	r3, r3, #4
 800a834:	b2da      	uxtb	r2, r3
 800a836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a838:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a83c:	3718      	adds	r7, #24
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop

0800a844 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b08a      	sub	sp, #40	; 0x28
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
 800a850:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a852:	2300      	movs	r3, #0
 800a854:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d109      	bne.n	800a870 <xTimerGenericCommand+0x2c>
 800a85c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a860:	f383 8811 	msr	BASEPRI, r3
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	623b      	str	r3, [r7, #32]
 800a86e:	e7fe      	b.n	800a86e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a870:	4b1c      	ldr	r3, [pc, #112]	; (800a8e4 <xTimerGenericCommand+0xa0>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d030      	beq.n	800a8da <xTimerGenericCommand+0x96>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	2b05      	cmp	r3, #5
 800a888:	dc1c      	bgt.n	800a8c4 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a88a:	f7ff fe3f 	bl	800a50c <xTaskGetSchedulerState>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b02      	cmp	r3, #2
 800a892:	d10b      	bne.n	800a8ac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a894:	4b13      	ldr	r3, [pc, #76]	; (800a8e4 <xTimerGenericCommand+0xa0>)
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	f107 0310 	add.w	r3, r7, #16
 800a89c:	4610      	mov	r0, r2
 800a89e:	4619      	mov	r1, r3
 800a8a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f7fe fb04 	bl	8008eb0 <xQueueGenericSend>
 800a8a8:	6278      	str	r0, [r7, #36]	; 0x24
 800a8aa:	e016      	b.n	800a8da <xTimerGenericCommand+0x96>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a8ac:	4b0d      	ldr	r3, [pc, #52]	; (800a8e4 <xTimerGenericCommand+0xa0>)
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	f107 0310 	add.w	r3, r7, #16
 800a8b4:	4610      	mov	r0, r2
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	f7fe faf8 	bl	8008eb0 <xQueueGenericSend>
 800a8c0:	6278      	str	r0, [r7, #36]	; 0x24
 800a8c2:	e00a      	b.n	800a8da <xTimerGenericCommand+0x96>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a8c4:	4b07      	ldr	r3, [pc, #28]	; (800a8e4 <xTimerGenericCommand+0xa0>)
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	f107 0310 	add.w	r3, r7, #16
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	683a      	ldr	r2, [r7, #0]
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f7fe fc0a 	bl	80090ec <xQueueGenericSendFromISR>
 800a8d8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3728      	adds	r7, #40	; 0x28
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	200007e4 	.word	0x200007e4

0800a8e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af02      	add	r7, sp, #8
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8f2:	4b22      	ldr	r3, [pc, #136]	; (800a97c <prvProcessExpiredTimer+0x94>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	3304      	adds	r3, #4
 800a900:	4618      	mov	r0, r3
 800a902:	f7fe f9e1 	bl	8008cc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a90c:	f003 0304 	and.w	r3, r3, #4
 800a910:	2b00      	cmp	r3, #0
 800a912:	d022      	beq.n	800a95a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	699a      	ldr	r2, [r3, #24]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4413      	add	r3, r2
 800a91c:	6978      	ldr	r0, [r7, #20]
 800a91e:	4619      	mov	r1, r3
 800a920:	683a      	ldr	r2, [r7, #0]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f000 f8d0 	bl	800aac8 <prvInsertTimerInActiveList>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d01e      	beq.n	800a96c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a92e:	2300      	movs	r3, #0
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	6978      	ldr	r0, [r7, #20]
 800a934:	2100      	movs	r1, #0
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	2300      	movs	r3, #0
 800a93a:	f7ff ff83 	bl	800a844 <xTimerGenericCommand>
 800a93e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d112      	bne.n	800a96c <prvProcessExpiredTimer+0x84>
 800a946:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a94a:	f383 8811 	msr	BASEPRI, r3
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	60fb      	str	r3, [r7, #12]
 800a958:	e7fe      	b.n	800a958 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a960:	f023 0301 	bic.w	r3, r3, #1
 800a964:	b2da      	uxtb	r2, r3
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	6a1b      	ldr	r3, [r3, #32]
 800a970:	6978      	ldr	r0, [r7, #20]
 800a972:	4798      	blx	r3
}
 800a974:	3718      	adds	r7, #24
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	200007dc 	.word	0x200007dc

0800a980 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a988:	f107 0308 	add.w	r3, r7, #8
 800a98c:	4618      	mov	r0, r3
 800a98e:	f000 f857 	bl	800aa40 <prvGetNextExpireTime>
 800a992:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	4619      	mov	r1, r3
 800a99a:	f000 f803 	bl	800a9a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a99e:	f000 f8d5 	bl	800ab4c <prvProcessReceivedCommands>
	}
 800a9a2:	e7f1      	b.n	800a988 <prvTimerTask+0x8>

0800a9a4 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a9ae:	f7ff f9e9 	bl	8009d84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9b2:	f107 0308 	add.w	r3, r7, #8
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 f866 	bl	800aa88 <prvSampleTimeNow>
 800a9bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d131      	bne.n	800aa28 <prvProcessTimerOrBlockTask+0x84>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d10a      	bne.n	800a9e0 <prvProcessTimerOrBlockTask+0x3c>
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d806      	bhi.n	800a9e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a9d2:	f7ff f9e5 	bl	8009da0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	68f9      	ldr	r1, [r7, #12]
 800a9da:	f7ff ff85 	bl	800a8e8 <prvProcessExpiredTimer>
 800a9de:	e025      	b.n	800aa2c <prvProcessTimerOrBlockTask+0x88>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d008      	beq.n	800a9f8 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a9e6:	4b13      	ldr	r3, [pc, #76]	; (800aa34 <prvProcessTimerOrBlockTask+0x90>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d101      	bne.n	800a9f4 <prvProcessTimerOrBlockTask+0x50>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e000      	b.n	800a9f6 <prvProcessTimerOrBlockTask+0x52>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a9f8:	4b0f      	ldr	r3, [pc, #60]	; (800aa38 <prvProcessTimerOrBlockTask+0x94>)
 800a9fa:	6819      	ldr	r1, [r3, #0]
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	1ad3      	subs	r3, r2, r3
 800aa02:	4608      	mov	r0, r1
 800aa04:	4619      	mov	r1, r3
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	f7fe fe3e 	bl	8009688 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 800aa0c:	f7ff f9c8 	bl	8009da0 <xTaskResumeAll>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10a      	bne.n	800aa2c <prvProcessTimerOrBlockTask+0x88>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 800aa16:	4b09      	ldr	r3, [pc, #36]	; (800aa3c <prvProcessTimerOrBlockTask+0x98>)
 800aa18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	e001      	b.n	800aa2c <prvProcessTimerOrBlockTask+0x88>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 800aa28:	f7ff f9ba 	bl	8009da0 <xTaskResumeAll>
		}
	}
}
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	200007e0 	.word	0x200007e0
 800aa38:	200007e4 	.word	0x200007e4
 800aa3c:	e000ed04 	.word	0xe000ed04

0800aa40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa48:	4b0e      	ldr	r3, [pc, #56]	; (800aa84 <prvGetNextExpireTime+0x44>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <prvGetNextExpireTime+0x16>
 800aa52:	2201      	movs	r2, #1
 800aa54:	e000      	b.n	800aa58 <prvGetNextExpireTime+0x18>
 800aa56:	2200      	movs	r2, #0
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d105      	bne.n	800aa70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa64:	4b07      	ldr	r3, [pc, #28]	; (800aa84 <prvGetNextExpireTime+0x44>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	60fb      	str	r3, [r7, #12]
 800aa6e:	e001      	b.n	800aa74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aa70:	2300      	movs	r3, #0
 800aa72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aa74:	68fb      	ldr	r3, [r7, #12]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3714      	adds	r7, #20
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	200007dc 	.word	0x200007dc

0800aa88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aa90:	f7ff fa24 	bl	8009edc <xTaskGetTickCount>
 800aa94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aa96:	4b0b      	ldr	r3, [pc, #44]	; (800aac4 <prvSampleTimeNow+0x3c>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d205      	bcs.n	800aaac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aaa0:	f000 f936 	bl	800ad10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	601a      	str	r2, [r3, #0]
 800aaaa:	e002      	b.n	800aab2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aab2:	4a04      	ldr	r2, [pc, #16]	; (800aac4 <prvSampleTimeNow+0x3c>)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aab8:	68fb      	ldr	r3, [r7, #12]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	200007ec 	.word	0x200007ec

0800aac8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
 800aad4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aad6:	2300      	movs	r3, #0
 800aad8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d812      	bhi.n	800ab14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	1ad2      	subs	r2, r2, r3
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	699b      	ldr	r3, [r3, #24]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d302      	bcc.n	800ab02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aafc:	2301      	movs	r3, #1
 800aafe:	617b      	str	r3, [r7, #20]
 800ab00:	e01b      	b.n	800ab3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab02:	4b10      	ldr	r3, [pc, #64]	; (800ab44 <prvInsertTimerInActiveList+0x7c>)
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	3304      	adds	r3, #4
 800ab0a:	4610      	mov	r0, r2
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	f7fe f8a3 	bl	8008c58 <vListInsert>
 800ab12:	e012      	b.n	800ab3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d206      	bcs.n	800ab2a <prvInsertTimerInActiveList+0x62>
 800ab1c:	68ba      	ldr	r2, [r7, #8]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d302      	bcc.n	800ab2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ab24:	2301      	movs	r3, #1
 800ab26:	617b      	str	r3, [r7, #20]
 800ab28:	e007      	b.n	800ab3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab2a:	4b07      	ldr	r3, [pc, #28]	; (800ab48 <prvInsertTimerInActiveList+0x80>)
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	3304      	adds	r3, #4
 800ab32:	4610      	mov	r0, r2
 800ab34:	4619      	mov	r1, r3
 800ab36:	f7fe f88f 	bl	8008c58 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab3a:	697b      	ldr	r3, [r7, #20]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3718      	adds	r7, #24
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	200007e0 	.word	0x200007e0
 800ab48:	200007dc 	.word	0x200007dc

0800ab4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b08e      	sub	sp, #56	; 0x38
 800ab50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab52:	e0cb      	b.n	800acec <prvProcessReceivedCommands+0x1a0>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	da18      	bge.n	800ab8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab5a:	1d3b      	adds	r3, r7, #4
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ab60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d109      	bne.n	800ab7a <prvProcessReceivedCommands+0x2e>
 800ab66:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800ab6a:	f383 8811 	msr	BASEPRI, r3
 800ab6e:	f3bf 8f6f 	isb	sy
 800ab72:	f3bf 8f4f 	dsb	sy
 800ab76:	61fb      	str	r3, [r7, #28]
 800ab78:	e7fe      	b.n	800ab78 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ab7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab80:	6851      	ldr	r1, [r2, #4]
 800ab82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab84:	6892      	ldr	r2, [r2, #8]
 800ab86:	4608      	mov	r0, r1
 800ab88:	4611      	mov	r1, r2
 800ab8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f2c0 80ac 	blt.w	800acec <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ab98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9a:	695b      	ldr	r3, [r3, #20]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d004      	beq.n	800abaa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba2:	3304      	adds	r3, #4
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7fe f88f 	bl	8008cc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abaa:	463b      	mov	r3, r7
 800abac:	4618      	mov	r0, r3
 800abae:	f7ff ff6b 	bl	800aa88 <prvSampleTimeNow>
 800abb2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b09      	cmp	r3, #9
 800abb8:	f200 8097 	bhi.w	800acea <prvProcessReceivedCommands+0x19e>
 800abbc:	a201      	add	r2, pc, #4	; (adr r2, 800abc4 <prvProcessReceivedCommands+0x78>)
 800abbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc2:	bf00      	nop
 800abc4:	0800abed 	.word	0x0800abed
 800abc8:	0800abed 	.word	0x0800abed
 800abcc:	0800abed 	.word	0x0800abed
 800abd0:	0800ac63 	.word	0x0800ac63
 800abd4:	0800ac77 	.word	0x0800ac77
 800abd8:	0800acc1 	.word	0x0800acc1
 800abdc:	0800abed 	.word	0x0800abed
 800abe0:	0800abed 	.word	0x0800abed
 800abe4:	0800ac63 	.word	0x0800ac63
 800abe8:	0800ac77 	.word	0x0800ac77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800abec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abf2:	f043 0301 	orr.w	r3, r3, #1
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	441a      	add	r2, r3
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac0e:	f7ff ff5b 	bl	800aac8 <prvInsertTimerInActiveList>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d023      	beq.n	800ac60 <prvProcessReceivedCommands+0x114>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1a:	6a1b      	ldr	r3, [r3, #32]
 800ac1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac1e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac26:	f003 0304 	and.w	r3, r3, #4
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d018      	beq.n	800ac60 <prvProcessReceivedCommands+0x114>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	441a      	add	r2, r3
 800ac36:	2300      	movs	r3, #0
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	2300      	movs	r3, #0
 800ac40:	f7ff fe00 	bl	800a844 <xTimerGenericCommand>
 800ac44:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac46:	6a3b      	ldr	r3, [r7, #32]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d109      	bne.n	800ac60 <prvProcessReceivedCommands+0x114>
 800ac4c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800ac50:	f383 8811 	msr	BASEPRI, r3
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	61bb      	str	r3, [r7, #24]
 800ac5e:	e7fe      	b.n	800ac5e <prvProcessReceivedCommands+0x112>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 800ac60:	e044      	b.n	800acec <prvProcessReceivedCommands+0x1a0>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac68:	f023 0301 	bic.w	r3, r3, #1
 800ac6c:	b2da      	uxtb	r2, r3
 800ac6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ac74:	e03a      	b.n	800acec <prvProcessReceivedCommands+0x1a0>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac7c:	f043 0301 	orr.w	r3, r3, #1
 800ac80:	b2da      	uxtb	r2, r3
 800ac82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d109      	bne.n	800acaa <prvProcessReceivedCommands+0x15e>
 800ac96:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	617b      	str	r3, [r7, #20]
 800aca8:	e7fe      	b.n	800aca8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800acaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acac:	699a      	ldr	r2, [r3, #24]
 800acae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb0:	4413      	add	r3, r2
 800acb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acb4:	4619      	mov	r1, r3
 800acb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	f7ff ff05 	bl	800aac8 <prvInsertTimerInActiveList>
					break;
 800acbe:	e015      	b.n	800acec <prvProcessReceivedCommands+0x1a0>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800acc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acc6:	f003 0302 	and.w	r3, r3, #2
 800acca:	2b00      	cmp	r3, #0
 800accc:	d103      	bne.n	800acd6 <prvProcessReceivedCommands+0x18a>
						{
							vPortFree( pxTimer );
 800acce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acd0:	f7fd ff60 	bl	8008b94 <vPortFree>
 800acd4:	e008      	b.n	800ace8 <prvProcessReceivedCommands+0x19c>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acdc:	f023 0301 	bic.w	r3, r3, #1
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ace8:	e000      	b.n	800acec <prvProcessReceivedCommands+0x1a0>

				default	:
					/* Don't expect to get here. */
					break;
 800acea:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800acec:	4b07      	ldr	r3, [pc, #28]	; (800ad0c <prvProcessReceivedCommands+0x1c0>)
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	1d3b      	adds	r3, r7, #4
 800acf2:	4610      	mov	r0, r2
 800acf4:	4619      	mov	r1, r3
 800acf6:	2200      	movs	r2, #0
 800acf8:	f7fe fa9e 	bl	8009238 <xQueueReceive>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	f47f af28 	bne.w	800ab54 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 800ad04:	3730      	adds	r7, #48	; 0x30
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	200007e4 	.word	0x200007e4

0800ad10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b088      	sub	sp, #32
 800ad14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad16:	e047      	b.n	800ada8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad18:	4b2c      	ldr	r3, [pc, #176]	; (800adcc <prvSwitchTimerLists+0xbc>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad22:	4b2a      	ldr	r3, [pc, #168]	; (800adcc <prvSwitchTimerLists+0xbc>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	3304      	adds	r3, #4
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fd ffc9 	bl	8008cc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	6938      	ldr	r0, [r7, #16]
 800ad3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad44:	f003 0304 	and.w	r3, r3, #4
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d02d      	beq.n	800ada8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	699a      	ldr	r2, [r3, #24]
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	4413      	add	r3, r2
 800ad54:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800ad56:	68fa      	ldr	r2, [r7, #12]
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d90e      	bls.n	800ad7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad6a:	4b18      	ldr	r3, [pc, #96]	; (800adcc <prvSwitchTimerLists+0xbc>)
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	3304      	adds	r3, #4
 800ad72:	4610      	mov	r0, r2
 800ad74:	4619      	mov	r1, r3
 800ad76:	f7fd ff6f 	bl	8008c58 <vListInsert>
 800ad7a:	e015      	b.n	800ada8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	6938      	ldr	r0, [r7, #16]
 800ad82:	2100      	movs	r1, #0
 800ad84:	697a      	ldr	r2, [r7, #20]
 800ad86:	2300      	movs	r3, #0
 800ad88:	f7ff fd5c 	bl	800a844 <xTimerGenericCommand>
 800ad8c:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d109      	bne.n	800ada8 <prvSwitchTimerLists+0x98>
 800ad94:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800ad98:	f383 8811 	msr	BASEPRI, r3
 800ad9c:	f3bf 8f6f 	isb	sy
 800ada0:	f3bf 8f4f 	dsb	sy
 800ada4:	603b      	str	r3, [r7, #0]
 800ada6:	e7fe      	b.n	800ada6 <prvSwitchTimerLists+0x96>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ada8:	4b08      	ldr	r3, [pc, #32]	; (800adcc <prvSwitchTimerLists+0xbc>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1b2      	bne.n	800ad18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800adb2:	4b06      	ldr	r3, [pc, #24]	; (800adcc <prvSwitchTimerLists+0xbc>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800adb8:	4b05      	ldr	r3, [pc, #20]	; (800add0 <prvSwitchTimerLists+0xc0>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a03      	ldr	r2, [pc, #12]	; (800adcc <prvSwitchTimerLists+0xbc>)
 800adbe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800adc0:	4a03      	ldr	r2, [pc, #12]	; (800add0 <prvSwitchTimerLists+0xc0>)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6013      	str	r3, [r2, #0]
}
 800adc6:	3718      	adds	r7, #24
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	200007dc 	.word	0x200007dc
 800add0:	200007e0 	.word	0x200007e0

0800add4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800add4:	b580      	push	{r7, lr}
 800add6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800add8:	f7fd fdb4 	bl	8008944 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800addc:	4b12      	ldr	r3, [pc, #72]	; (800ae28 <prvCheckForValidListAndQueue+0x54>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d11d      	bne.n	800ae20 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800ade4:	4811      	ldr	r0, [pc, #68]	; (800ae2c <prvCheckForValidListAndQueue+0x58>)
 800ade6:	f7fd fee7 	bl	8008bb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800adea:	4811      	ldr	r0, [pc, #68]	; (800ae30 <prvCheckForValidListAndQueue+0x5c>)
 800adec:	f7fd fee4 	bl	8008bb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800adf0:	4b10      	ldr	r3, [pc, #64]	; (800ae34 <prvCheckForValidListAndQueue+0x60>)
 800adf2:	4a0e      	ldr	r2, [pc, #56]	; (800ae2c <prvCheckForValidListAndQueue+0x58>)
 800adf4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800adf6:	4b10      	ldr	r3, [pc, #64]	; (800ae38 <prvCheckForValidListAndQueue+0x64>)
 800adf8:	4a0d      	ldr	r2, [pc, #52]	; (800ae30 <prvCheckForValidListAndQueue+0x5c>)
 800adfa:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800adfc:	2005      	movs	r0, #5
 800adfe:	2110      	movs	r1, #16
 800ae00:	2200      	movs	r2, #0
 800ae02:	f7fd fff3 	bl	8008dec <xQueueGenericCreate>
 800ae06:	4602      	mov	r2, r0
 800ae08:	4b07      	ldr	r3, [pc, #28]	; (800ae28 <prvCheckForValidListAndQueue+0x54>)
 800ae0a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ae0c:	4b06      	ldr	r3, [pc, #24]	; (800ae28 <prvCheckForValidListAndQueue+0x54>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d005      	beq.n	800ae20 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ae14:	4b04      	ldr	r3, [pc, #16]	; (800ae28 <prvCheckForValidListAndQueue+0x54>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	4908      	ldr	r1, [pc, #32]	; (800ae3c <prvCheckForValidListAndQueue+0x68>)
 800ae1c:	f7fe fc0c 	bl	8009638 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae20:	f7fd fdbe 	bl	80089a0 <vPortExitCritical>
}
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	200007e4 	.word	0x200007e4
 800ae2c:	200007b4 	.word	0x200007b4
 800ae30:	200007c8 	.word	0x200007c8
 800ae34:	200007dc 	.word	0x200007dc
 800ae38:	200007e0 	.word	0x200007e0
 800ae3c:	0800f898 	.word	0x0800f898

0800ae40 <EVENT_GENERATOR_Init>:

/*
 * This function Initializes a EVENT_GENERATOR APP instances based on user configuration.
 */
EVENT_GENERATOR_STATUS_t EVENT_GENERATOR_Init(EVENT_GENERATOR_t *const handle)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_GENERATOR_Init:handle NULL" , (handle != NULL));
  
  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	7b5b      	ldrb	r3, [r3, #13]
 800ae4c:	f083 0301 	eor.w	r3, r3, #1
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d012      	beq.n	800ae7c <EVENT_GENERATOR_Init+0x3c>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_OGU_Init(handle->eru, handle->channel, handle->config);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6819      	ldr	r1, [r3, #0]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	7b1a      	ldrb	r2, [r3, #12]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	4608      	mov	r0, r1
 800ae64:	4611      	mov	r1, r2
 800ae66:	461a      	mov	r2, r3
 800ae68:	f7fc fd5a 	bl	8007920 <XMC_ERU_OGU_Init>
    #if (EVENT_GENERATOR_NMI_SUPPORTED == 1U)
    /* Promote the eru event as NMI, Applicable only for XMC4000 devices */
    XMC_SCU_INTERRUPT_EnableNmiRequest(handle->nmi_eru_msk);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7fb fd0f 	bl	8006894 <XMC_SCU_INTERRUPT_EnableNmiRequest>
    #endif
    /* Update the init status of the instance */
    handle->init_status = true;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	735a      	strb	r2, [r3, #13]
  }
  
  return EVENT_GENERATOR_STATUS_SUCCESS;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop

0800ae88 <EVENT_DETECTOR_Init>:

/*
 * This function Initializes a EVENT_DETECTOR APP instances (ERSx+ETLx) based on user configuration.
 */
EVENT_DETECTOR_STATUS_t EVENT_DETECTOR_Init(EVENT_DETECTOR_t *const handle)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_DETECTOR_Init:handle NULL" , (handle != NULL));

  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	7b1b      	ldrb	r3, [r3, #12]
 800ae94:	f083 0301 	eor.w	r3, r3, #1
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00d      	beq.n	800aeba <EVENT_DETECTOR_Init+0x32>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_ETL_Init(handle->eru, handle->channel, handle->config);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6819      	ldr	r1, [r3, #0]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	791a      	ldrb	r2, [r3, #4]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	4608      	mov	r0, r1
 800aeac:	4611      	mov	r1, r2
 800aeae:	461a      	mov	r2, r3
 800aeb0:	f7fc fd10 	bl	80078d4 <XMC_ERU_ETL_Init>
    /* Update the init status of the instance */
    handle->init_status = true;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	731a      	strb	r2, [r3, #12]
  }
  
  return EVENT_DETECTOR_STATUS_SUCCESS;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6819      	ldr	r1, [r3, #0]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	7c1a      	ldrb	r2, [r3, #16]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	3304      	adds	r3, #4
 800aed8:	4608      	mov	r0, r1
 800aeda:	4611      	mov	r1, r2
 800aedc:	461a      	mov	r2, r3
 800aede:	f7fb fb57 	bl	8006590 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6819      	ldr	r1, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	7c1a      	ldrb	r2, [r3, #16]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	7c5b      	ldrb	r3, [r3, #17]
 800aeee:	4608      	mov	r0, r1
 800aef0:	4611      	mov	r1, r2
 800aef2:	461a      	mov	r2, r3
 800aef4:	f7fc fd28 	bl	8007948 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop

0800af04 <__HardFault_Handler>:
 */
#if defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#endif
__attribute__((naked)) void __HardFault_Handler(uint32_t args[])
{
 800af04:	4603      	mov	r3, r0

  // Configurable Fault Status Register
  // Consists of MMSR, BFSR and UFSR
  _CFSR = SCB->CFSR;
 800af06:	4a18      	ldr	r2, [pc, #96]	; (800af68 <__HardFault_Handler+0x64>)
 800af08:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800af0a:	4918      	ldr	r1, [pc, #96]	; (800af6c <__HardFault_Handler+0x68>)
 800af0c:	600a      	str	r2, [r1, #0]

  // Hard Fault Status Register
  _HFSR = SCB->HFSR;
 800af0e:	4a16      	ldr	r2, [pc, #88]	; (800af68 <__HardFault_Handler+0x64>)
 800af10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800af12:	4917      	ldr	r1, [pc, #92]	; (800af70 <__HardFault_Handler+0x6c>)
 800af14:	600a      	str	r2, [r1, #0]

  // Debug Fault Status Register
  _DFSR = SCB->DFSR;
 800af16:	4a14      	ldr	r2, [pc, #80]	; (800af68 <__HardFault_Handler+0x64>)
 800af18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800af1a:	4916      	ldr	r1, [pc, #88]	; (800af74 <__HardFault_Handler+0x70>)
 800af1c:	600a      	str	r2, [r1, #0]

  // Auxiliary Fault Status Register
  _AFSR = SCB->AFSR;
 800af1e:	4a12      	ldr	r2, [pc, #72]	; (800af68 <__HardFault_Handler+0x64>)
 800af20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800af22:	4915      	ldr	r1, [pc, #84]	; (800af78 <__HardFault_Handler+0x74>)
 800af24:	600a      	str	r2, [r1, #0]

  // Read the Fault Address Registers. These may not contain valid values.
  // Check BFARVALID/MMARVALID to see if they are valid values
  // MemManage Fault Address Register
  _MMAR = SCB->MMFAR;
 800af26:	4a10      	ldr	r2, [pc, #64]	; (800af68 <__HardFault_Handler+0x64>)
 800af28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800af2a:	4914      	ldr	r1, [pc, #80]	; (800af7c <__HardFault_Handler+0x78>)
 800af2c:	600a      	str	r2, [r1, #0]

  // Bus Fault Address Register
  _BFAR = SCB->BFAR;
 800af2e:	4a0e      	ldr	r2, [pc, #56]	; (800af68 <__HardFault_Handler+0x64>)
 800af30:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800af32:	4913      	ldr	r1, [pc, #76]	; (800af80 <__HardFault_Handler+0x7c>)
 800af34:	600a      	str	r2, [r1, #0]

  stacked_r0 = ((uint32_t)args[0]);
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	4912      	ldr	r1, [pc, #72]	; (800af84 <__HardFault_Handler+0x80>)
 800af3a:	600a      	str	r2, [r1, #0]
  stacked_r1 = ((uint32_t)args[1]);
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	4912      	ldr	r1, [pc, #72]	; (800af88 <__HardFault_Handler+0x84>)
 800af40:	600a      	str	r2, [r1, #0]
  stacked_r2 = ((uint32_t)args[2]);
 800af42:	689a      	ldr	r2, [r3, #8]
 800af44:	4911      	ldr	r1, [pc, #68]	; (800af8c <__HardFault_Handler+0x88>)
 800af46:	600a      	str	r2, [r1, #0]
  stacked_r3 = ((uint32_t)args[3]);
 800af48:	68da      	ldr	r2, [r3, #12]
 800af4a:	4911      	ldr	r1, [pc, #68]	; (800af90 <__HardFault_Handler+0x8c>)
 800af4c:	600a      	str	r2, [r1, #0]
  stacked_r12 = ((uint32_t)args[4]);
 800af4e:	691a      	ldr	r2, [r3, #16]
 800af50:	4910      	ldr	r1, [pc, #64]	; (800af94 <__HardFault_Handler+0x90>)
 800af52:	600a      	str	r2, [r1, #0]
  stacked_lr = ((uint32_t)args[5]);
 800af54:	695a      	ldr	r2, [r3, #20]
 800af56:	4910      	ldr	r1, [pc, #64]	; (800af98 <__HardFault_Handler+0x94>)
 800af58:	600a      	str	r2, [r1, #0]
  stacked_pc = ((uint32_t)args[6]);
 800af5a:	699a      	ldr	r2, [r3, #24]
 800af5c:	490f      	ldr	r1, [pc, #60]	; (800af9c <__HardFault_Handler+0x98>)
 800af5e:	600a      	str	r2, [r1, #0]
  stacked_psr = ((uint32_t)args[7]);
 800af60:	69db      	ldr	r3, [r3, #28]
 800af62:	4a0f      	ldr	r2, [pc, #60]	; (800afa0 <__HardFault_Handler+0x9c>)
 800af64:	6013      	str	r3, [r2, #0]

  __asm("BKPT 0\n") ; // Break into the debugger
 800af66:	be00      	bkpt	0x0000
 800af68:	e000ed00 	.word	0xe000ed00
 800af6c:	2000129c 	.word	0x2000129c
 800af70:	200012c0 	.word	0x200012c0
 800af74:	200012c8 	.word	0x200012c8
 800af78:	200012c4 	.word	0x200012c4
 800af7c:	200012b4 	.word	0x200012b4
 800af80:	20001294 	.word	0x20001294
 800af84:	200012ac 	.word	0x200012ac
 800af88:	20001298 	.word	0x20001298
 800af8c:	200012bc 	.word	0x200012bc
 800af90:	200012a0 	.word	0x200012a0
 800af94:	200012b0 	.word	0x200012b0
 800af98:	200012a4 	.word	0x200012a4
 800af9c:	200012a8 	.word	0x200012a8
 800afa0:	200012b8 	.word	0x200012b8

0800afa4 <HardFault_Handler>:

/*GCC*/
#if defined(__GNUC__)
__attribute__((naked)) void HardFault_Handler(void)
{
__asm("  TST    LR, #4  \n"
 800afa4:	f01e 0f04 	tst.w	lr, #4
 800afa8:	bf0c      	ite	eq
 800afaa:	f3ef 8008 	mrseq	r0, MSP
 800afae:	f3ef 8009 	mrsne	r0, PSP
 800afb2:	f7ff bfa7 	b.w	800af04 <__HardFault_Handler>
 800afb6:	bf00      	nop

0800afb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f003 0307 	and.w	r3, r3, #7
 800afc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800afc8:	4b0c      	ldr	r3, [pc, #48]	; (800affc <__NVIC_SetPriorityGrouping+0x44>)
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800afce:	68ba      	ldr	r2, [r7, #8]
 800afd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800afd4:	4013      	ands	r3, r2
 800afd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800afe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800afe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afe8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800afea:	4a04      	ldr	r2, [pc, #16]	; (800affc <__NVIC_SetPriorityGrouping+0x44>)
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	60d3      	str	r3, [r2, #12]
}
 800aff0:	3714      	adds	r7, #20
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	e000ed00 	.word	0xe000ed00

0800b000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b000:	b480      	push	{r7}
 800b002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b004:	4b04      	ldr	r3, [pc, #16]	; (800b018 <__NVIC_GetPriorityGrouping+0x18>)
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b00c:	0a1b      	lsrs	r3, r3, #8
}
 800b00e:	4618      	mov	r0, r3
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr
 800b018:	e000ed00 	.word	0xe000ed00

0800b01c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	4603      	mov	r3, r0
 800b024:	6039      	str	r1, [r7, #0]
 800b026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	db0a      	blt.n	800b046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b030:	490d      	ldr	r1, [pc, #52]	; (800b068 <__NVIC_SetPriority+0x4c>)
 800b032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b036:	683a      	ldr	r2, [r7, #0]
 800b038:	b2d2      	uxtb	r2, r2
 800b03a:	0092      	lsls	r2, r2, #2
 800b03c:	b2d2      	uxtb	r2, r2
 800b03e:	440b      	add	r3, r1
 800b040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800b044:	e00a      	b.n	800b05c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b046:	4909      	ldr	r1, [pc, #36]	; (800b06c <__NVIC_SetPriority+0x50>)
 800b048:	79fb      	ldrb	r3, [r7, #7]
 800b04a:	f003 030f 	and.w	r3, r3, #15
 800b04e:	3b04      	subs	r3, #4
 800b050:	683a      	ldr	r2, [r7, #0]
 800b052:	b2d2      	uxtb	r2, r2
 800b054:	0092      	lsls	r2, r2, #2
 800b056:	b2d2      	uxtb	r2, r2
 800b058:	440b      	add	r3, r1
 800b05a:	761a      	strb	r2, [r3, #24]
  }
}
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	e000e100 	.word	0xe000e100
 800b06c:	e000ed00 	.word	0xe000ed00

0800b070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b070:	b480      	push	{r7}
 800b072:	b089      	sub	sp, #36	; 0x24
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f003 0307 	and.w	r3, r3, #7
 800b082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	f1c3 0307 	rsb	r3, r3, #7
 800b08a:	2b06      	cmp	r3, #6
 800b08c:	bf28      	it	cs
 800b08e:	2306      	movcs	r3, #6
 800b090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	3306      	adds	r3, #6
 800b096:	2b06      	cmp	r3, #6
 800b098:	d902      	bls.n	800b0a0 <NVIC_EncodePriority+0x30>
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	3b01      	subs	r3, #1
 800b09e:	e000      	b.n	800b0a2 <NVIC_EncodePriority+0x32>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b0a4:	69bb      	ldr	r3, [r7, #24]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ac:	1e5a      	subs	r2, r3, #1
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	401a      	ands	r2, r3
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	2101      	movs	r1, #1
 800b0ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b0be:	1e59      	subs	r1, r3, #1
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800b0c4:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3724      	adds	r7, #36	; 0x24
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop

0800b0d4 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800b0da:	2001      	movs	r0, #1
 800b0dc:	f7ff ff6c 	bl	800afb8 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b0e0:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 800b0e2:	4b36      	ldr	r3, [pc, #216]	; (800b1bc <SystemCoreSetup+0xe8>)
 800b0e4:	4a36      	ldr	r2, [pc, #216]	; (800b1c0 <SystemCoreSetup+0xec>)
 800b0e6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b0e8:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800b0ec:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800b0ee:	4a33      	ldr	r2, [pc, #204]	; (800b1bc <SystemCoreSetup+0xe8>)
 800b0f0:	4b32      	ldr	r3, [pc, #200]	; (800b1bc <SystemCoreSetup+0xe8>)
 800b0f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b0fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800b0fe:	4b31      	ldr	r3, [pc, #196]	; (800b1c4 <SystemCoreSetup+0xf0>)
 800b100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b104:	3314      	adds	r3, #20
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f023 030f 	bic.w	r3, r3, #15
 800b110:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f043 0303 	orr.w	r3, r3, #3
 800b118:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800b11a:	4b2a      	ldr	r3, [pc, #168]	; (800b1c4 <SystemCoreSetup+0xf0>)
 800b11c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b120:	3314      	adds	r3, #20
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	601a      	str	r2, [r3, #0]


  /* Enable divide by zero trap */
  SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk; 
 800b126:	4a25      	ldr	r2, [pc, #148]	; (800b1bc <SystemCoreSetup+0xe8>)
 800b128:	4b24      	ldr	r3, [pc, #144]	; (800b1bc <SystemCoreSetup+0xe8>)
 800b12a:	695b      	ldr	r3, [r3, #20]
 800b12c:	f043 0310 	orr.w	r3, r3, #16
 800b130:	6153      	str	r3, [r2, #20]

  /* Enable unaligned memory access trap */
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk; 
 800b132:	4a22      	ldr	r2, [pc, #136]	; (800b1bc <SystemCoreSetup+0xe8>)
 800b134:	4b21      	ldr	r3, [pc, #132]	; (800b1bc <SystemCoreSetup+0xe8>)
 800b136:	695b      	ldr	r3, [r3, #20]
 800b138:	f043 0308 	orr.w	r3, r3, #8
 800b13c:	6153      	str	r3, [r2, #20]

  /* Set priority of memory managment fault */
  NVIC_SetPriority((IRQn_Type)MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0,0));
 800b13e:	f7ff ff5f 	bl	800b000 <__NVIC_GetPriorityGrouping>
 800b142:	4603      	mov	r3, r0
 800b144:	4618      	mov	r0, r3
 800b146:	2100      	movs	r1, #0
 800b148:	2200      	movs	r2, #0
 800b14a:	f7ff ff91 	bl	800b070 <NVIC_EncodePriority>
 800b14e:	4603      	mov	r3, r0
 800b150:	f06f 000b 	mvn.w	r0, #11
 800b154:	4619      	mov	r1, r3
 800b156:	f7ff ff61 	bl	800b01c <__NVIC_SetPriority>
  /* Enable memory management fault */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b15a:	4a18      	ldr	r2, [pc, #96]	; (800b1bc <SystemCoreSetup+0xe8>)
 800b15c:	4b17      	ldr	r3, [pc, #92]	; (800b1bc <SystemCoreSetup+0xe8>)
 800b15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b164:	6253      	str	r3, [r2, #36]	; 0x24


  /* Set priority of bus fault */
  NVIC_SetPriority((IRQn_Type)BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0,0));
 800b166:	f7ff ff4b 	bl	800b000 <__NVIC_GetPriorityGrouping>
 800b16a:	4603      	mov	r3, r0
 800b16c:	4618      	mov	r0, r3
 800b16e:	2100      	movs	r1, #0
 800b170:	2200      	movs	r2, #0
 800b172:	f7ff ff7d 	bl	800b070 <NVIC_EncodePriority>
 800b176:	4603      	mov	r3, r0
 800b178:	f06f 000a 	mvn.w	r0, #10
 800b17c:	4619      	mov	r1, r3
 800b17e:	f7ff ff4d 	bl	800b01c <__NVIC_SetPriority>
  /* Enable bus fault */
  SCB->SHCSR |= SCB_SHCSR_BUSFAULTENA_Msk;
 800b182:	4a0e      	ldr	r2, [pc, #56]	; (800b1bc <SystemCoreSetup+0xe8>)
 800b184:	4b0d      	ldr	r3, [pc, #52]	; (800b1bc <SystemCoreSetup+0xe8>)
 800b186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b18c:	6253      	str	r3, [r2, #36]	; 0x24
 

  /* Set priority of usage fault */
  NVIC_SetPriority((IRQn_Type)UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0,0));
 800b18e:	f7ff ff37 	bl	800b000 <__NVIC_GetPriorityGrouping>
 800b192:	4603      	mov	r3, r0
 800b194:	4618      	mov	r0, r3
 800b196:	2100      	movs	r1, #0
 800b198:	2200      	movs	r2, #0
 800b19a:	f7ff ff69 	bl	800b070 <NVIC_EncodePriority>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	f06f 0009 	mvn.w	r0, #9
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	f7ff ff39 	bl	800b01c <__NVIC_SetPriority>
  /* Enable usage fault */
  SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk;
 800b1aa:	4a04      	ldr	r2, [pc, #16]	; (800b1bc <SystemCoreSetup+0xe8>)
 800b1ac:	4b03      	ldr	r3, [pc, #12]	; (800b1bc <SystemCoreSetup+0xe8>)
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b1b4:	6253      	str	r3, [r2, #36]	; 0x24
  
}
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	e000ed00 	.word	0xe000ed00
 800b1c0:	08000000 	.word	0x08000000
 800b1c4:	58001000 	.word	0x58001000

0800b1c8 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	701a      	strb	r2, [r3, #0]

  return (status);
 800b1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3714      	adds	r7, #20
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 800b1ec:	4b02      	ldr	r3, [pc, #8]	; (800b1f8 <OSCHP_GetFrequency+0x10>)
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr
 800b1f8:	00b71b00 	.word	0x00b71b00

0800b1fc <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 800b1fc:	b5b0      	push	{r4, r5, r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 800b202:	4b12      	ldr	r3, [pc, #72]	; (800b24c <SystemCoreClockSetup+0x50>)
 800b204:	1d3c      	adds	r4, r7, #4
 800b206:	461d      	mov	r5, r3
 800b208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b20a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b20c:	682b      	ldr	r3, [r5, #0]
 800b20e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 800b210:	1d3b      	adds	r3, r7, #4
 800b212:	4618      	mov	r0, r3
 800b214:	f7fb fac8 	bl	80067a8 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 800b218:	2000      	movs	r0, #0
 800b21a:	f7fb fbd5 	bl	80069c8 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800b21e:	2000      	movs	r0, #0
 800b220:	f7fb fb8a 	bl	8006938 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 800b224:	2004      	movs	r0, #4
 800b226:	f7fb fc5b 	bl	8006ae0 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800b22a:	2001      	movs	r0, #1
 800b22c:	2120      	movs	r1, #32
 800b22e:	f7fb fca3 	bl	8006b78 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 800b232:	2000      	movs	r0, #0
 800b234:	f7fb fb94 	bl	8006960 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 800b238:	2001      	movs	r0, #1
 800b23a:	f7fb fc79 	bl	8006b30 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800b23e:	2001      	movs	r0, #1
 800b240:	f7fb fc62 	bl	8006b08 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 800b244:	3718      	adds	r7, #24
 800b246:	46bd      	mov	sp, r7
 800b248:	bdb0      	pop	{r4, r5, r7, pc}
 800b24a:	bf00      	nop
 800b24c:	0800f910 	.word	0x0800f910

0800b250 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
                                          const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
                                          const uint32_t service_request)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	460b      	mov	r3, r1
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	689a      	ldr	r2, [r3, #8]
 800b262:	7afb      	ldrb	r3, [r7, #11]
 800b264:	2107      	movs	r1, #7
 800b266:	fa01 f303 	lsl.w	r3, r1, r3
 800b26a:	43db      	mvns	r3, r3
 800b26c:	401a      	ands	r2, r3
 800b26e:	7afb      	ldrb	r3, [r7, #11]
 800b270:	6879      	ldr	r1, [r7, #4]
 800b272:	fa01 f303 	lsl.w	r3, r1, r3
 800b276:	431a      	orrs	r2, r3
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	609a      	str	r2, [r3, #8]
}
 800b27c:	3714      	adds	r7, #20
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop

0800b288 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	460b      	mov	r3, r1
 800b292:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 800b29c:	78fb      	ldrb	r3, [r7, #3]
 800b29e:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 800b2a2:	431a      	orrs	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 800b2a8:	370c      	adds	r7, #12
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop

0800b2b4 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	60da      	str	r2, [r3, #12]
}
 800b2c8:	370c      	adds	r7, #12
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop

0800b2d4 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	601a      	str	r2, [r3, #0]
}
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop

0800b2f4 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	601a      	str	r2, [r3, #0]
}
 800b308:	370c      	adds	r7, #12
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop

0800b314 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f043 0201 	orr.w	r2, r3, #1
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	601a      	str	r2, [r3, #0]
}
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop

0800b334 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f023 0201 	bic.w	r2, r3, #1
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	601a      	str	r2, [r3, #0]
}
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
 800b352:	bf00      	nop

0800b354 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	460b      	mov	r3, r1
 800b35e:	607a      	str	r2, [r7, #4]
 800b360:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	6812      	ldr	r2, [r2, #0]
 800b36a:	6891      	ldr	r1, [r2, #8]
 800b36c:	7afa      	ldrb	r2, [r7, #11]
 800b36e:	2007      	movs	r0, #7
 800b370:	fa00 f202 	lsl.w	r2, r0, r2
 800b374:	43d2      	mvns	r2, r2
 800b376:	4011      	ands	r1, r2
                          (service_request << (uint32_t)can_mo_ptr_int);
 800b378:	7afa      	ldrb	r2, [r7, #11]
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 800b380:	430a      	orrs	r2, r1
 800b382:	609a      	str	r2, [r3, #8]
                          (service_request << (uint32_t)can_mo_ptr_int);
}
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop

0800b390 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
                                        const uint32_t event)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	6812      	ldr	r2, [r2, #0]
 800b3a2:	6811      	ldr	r1, [r2, #0]
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	430a      	orrs	r2, r1
 800b3a8:	601a      	str	r2, [r3, #0]
}
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <CAN_NODE_MO_EnableTxEvent>:
 *     return (1);
 *  }
 *  @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800b3c6:	f7ff ffe3 	bl	800b390 <XMC_CAN_MO_EnableEvent>
}
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <CAN_NODE_MO_EnableRxEvent>:
 *  }
 *  @endcode
 */

__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b3e2:	f7ff ffd5 	bl	800b390 <XMC_CAN_MO_EnableEvent>
}
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 f831 	bl	800b460 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800b404:	2b00      	cmp	r3, #0
 800b406:	d003      	beq.n	800b410 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f043 0302 	orr.w	r3, r3, #2
 800b40e:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800b416:	2b00      	cmp	r3, #0
 800b418:	d003      	beq.n	800b422 <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f043 0304 	orr.w	r3, r3, #4
 800b420:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d003      	beq.n	800b434 <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f043 0308 	orr.w	r3, r3, #8
 800b432:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	4618      	mov	r0, r3
 800b43a:	68f9      	ldr	r1, [r7, #12]
 800b43c:	f7fc f918 	bl	8007670 <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800b446:	2b00      	cmp	r3, #0
 800b448:	d006      	beq.n	800b458 <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	4618      	mov	r0, r3
 800b450:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b454:	f7fc f90c 	bl	8007670 <XMC_CAN_NODE_EnableEvent>
  }

}
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop

0800b460 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b472:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 800b474:	4610      	mov	r0, r2
 800b476:	2100      	movs	r1, #0
 800b478:	461a      	mov	r2, r3
 800b47a:	f7ff fee9 	bl	800b250 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b488:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 800b48a:	4610      	mov	r0, r2
 800b48c:	2104      	movs	r1, #4
 800b48e:	461a      	mov	r2, r3
 800b490:	f7ff fede 	bl	800b250 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b49e:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	2108      	movs	r1, #8
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	f7ff fed3 	bl	800b250 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4b4:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	210c      	movs	r1, #12
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	f7ff fec8 	bl	800b250 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop

0800b4c8 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7fb fef9 	bl	80072cc <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	79db      	ldrb	r3, [r3, #7]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00b      	beq.n	800b4fa <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	795b      	ldrb	r3, [r3, #5]
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	2104      	movs	r1, #4
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	f7ff ff30 	bl	800b354 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7ff ff5d 	bl	800b3b4 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	7a1b      	ldrb	r3, [r3, #8]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00b      	beq.n	800b51a <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	799b      	ldrb	r3, [r3, #6]
 800b50a:	4610      	mov	r0, r2
 800b50c:	2100      	movs	r1, #0
 800b50e:	461a      	mov	r2, r3
 800b510:	f7ff ff20 	bl	800b354 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7ff ff5b 	bl	800b3d0 <CAN_NODE_MO_EnableRxEvent>
  }

}
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800b528:	2300      	movs	r3, #0
 800b52a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4618      	mov	r0, r3
 800b532:	f7fb ff9f 	bl	8007474 <XMC_CAN_MO_Transmit>
 800b536:	4603      	mov	r3, r0
 800b538:	73fb      	strb	r3, [r7, #15]
  return (status);
 800b53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800b54c:	2300      	movs	r3, #0
 800b54e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4618      	mov	r0, r3
 800b556:	f7fb ffbb 	bl	80074d0 <XMC_CAN_MO_Receive>
 800b55a:	4603      	mov	r3, r0
 800b55c:	73fb      	strb	r3, [r7, #15]
  return (status);
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800b572:	2300      	movs	r3, #0
 800b574:	73fb      	strb	r3, [r7, #15]
  uint32_t *data_pointer = (uint32_t*) array_data;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	6812      	ldr	r2, [r2, #0]
 800b582:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68ba      	ldr	r2, [r7, #8]
 800b58a:	6852      	ldr	r2, [r2, #4]
 800b58c:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4618      	mov	r0, r3
 800b594:	f7fb ff36 	bl	8007404 <XMC_CAN_MO_UpdateData>
 800b598:	4603      	mov	r3, r0
 800b59a:	73fb      	strb	r3, [r7, #15]
  return (status);
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop

0800b5a8 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b086      	sub	sp, #24
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5ba:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7fd f80b 	bl	80085dc <GLOBAL_CAN_Init>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 800b5ca:	7dfb      	ldrb	r3, [r7, #23]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f040 8082 	bne.w	800b6d6 <CAN_NODE_Init+0x12e>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	685a      	ldr	r2, [r3, #4]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	4610      	mov	r0, r2
 800b5dc:	4619      	mov	r1, r3
 800b5de:	f7fb fd3f 	bl	8007060 <XMC_CAN_NODE_NominalBitTimeConfigureEx>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d173      	bne.n	800b6d0 <CAN_NODE_Init+0x128>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7ff fe71 	bl	800b2d4 <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7ff fe8c 	bl	800b314 <XMC_CAN_NODE_SetInitBit>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800b602:	2b00      	cmp	r3, #0
 800b604:	d005      	beq.n	800b612 <CAN_NODE_Init+0x6a>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7ff fe52 	bl	800b2b4 <XMC_CAN_NODE_EnableLoopBack>
 800b610:	e018      	b.n	800b644 <CAN_NODE_Init+0x9c>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b618:	6819      	ldr	r1, [r3, #0]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b620:	791a      	ldrb	r2, [r3, #4]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b628:	4608      	mov	r0, r1
 800b62a:	4611      	mov	r1, r2
 800b62c:	461a      	mov	r2, r3
 800b62e:	f7fa ffaf 	bl	8006590 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	685a      	ldr	r2, [r3, #4]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b63c:	4610      	mov	r0, r2
 800b63e:	4619      	mov	r1, r3
 800b640:	f7ff fe22 	bl	800b288 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7ff fed1 	bl	800b3ec <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 800b64a:	2300      	movs	r3, #0
 800b64c:	613b      	str	r3, [r7, #16]
 800b64e:	e019      	b.n	800b684 <CAN_NODE_Init+0xdc>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	3302      	adds	r3, #2
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	4413      	add	r3, r2
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	6859      	ldr	r1, [r3, #4]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	791b      	ldrb	r3, [r3, #4]
 800b66e:	4608      	mov	r0, r1
 800b670:	4611      	mov	r1, r2
 800b672:	461a      	mov	r2, r3
 800b674:	f7fb fd9a 	bl	80071ac <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
 800b678:	68b8      	ldr	r0, [r7, #8]
 800b67a:	f7ff ff25 	bl	800b4c8 <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	3301      	adds	r3, #1
 800b682:	613b      	str	r3, [r7, #16]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800b68a:	461a      	mov	r2, r3
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d8de      	bhi.n	800b650 <CAN_NODE_Init+0xa8>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	4618      	mov	r0, r3
 800b698:	f7ff fe2c 	bl	800b2f4 <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7ff fe47 	bl	800b334 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800b6ac:	f083 0301 	eor.w	r3, r3, #1
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d011      	beq.n	800b6da <CAN_NODE_Init+0x132>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	6819      	ldr	r1, [r3, #0]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	791a      	ldrb	r2, [r3, #4]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6c4:	4608      	mov	r0, r1
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	f7fa ff61 	bl	8006590 <XMC_GPIO_Init>
 800b6ce:	e004      	b.n	800b6da <CAN_NODE_Init+0x132>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	75fb      	strb	r3, [r7, #23]
 800b6d4:	e001      	b.n	800b6da <CAN_NODE_Init+0x132>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 800b6da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3718      	adds	r7, #24
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	607a      	str	r2, [r7, #4]
 800b6f0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
 800b6f2:	7afb      	ldrb	r3, [r7, #11]
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	409a      	lsls	r2, r3
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	605a      	str	r2, [r3, #4]
}
 800b6fc:	3714      	adds	r7, #20
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop

0800b708 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	460b      	mov	r3, r1
 800b712:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b718:	78fb      	ldrb	r3, [r7, #3]
 800b71a:	fa22 f303 	lsr.w	r3, r2, r3
 800b71e:	f003 0301 	and.w	r3, r3, #1
}
 800b722:	4618      	mov	r0, r3
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop

0800b730 <BUS_IO_Init>:
* @param handle_ptr Pointer pointing to APP data structure.
* @return BUS_IO_STATUS_t BUS_IO APP status.
*/

BUS_IO_STATUS_t BUS_IO_Init(BUS_IO_t *const handle_ptr)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  uint8_t i;

  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	7c5b      	ldrb	r3, [r3, #17]
 800b73c:	f083 0301 	eor.w	r3, r3, #1
 800b740:	b2db      	uxtb	r3, r3
 800b742:	2b00      	cmp	r3, #0
 800b744:	d020      	beq.n	800b788 <BUS_IO_Init+0x58>
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b746:	2300      	movs	r3, #0
 800b748:	73fb      	strb	r3, [r7, #15]
 800b74a:	e015      	b.n	800b778 <BUS_IO_Init+0x48>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	7bfb      	ldrb	r3, [r7, #15]
 800b752:	00db      	lsls	r3, r3, #3
 800b754:	4413      	add	r3, r2
 800b756:	6819      	ldr	r1, [r3, #0]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	7bfb      	ldrb	r3, [r7, #15]
 800b75e:	00db      	lsls	r3, r3, #3
 800b760:	4413      	add	r3, r2
 800b762:	791a      	ldrb	r2, [r3, #4]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	3304      	adds	r3, #4
 800b768:	4608      	mov	r0, r1
 800b76a:	4611      	mov	r1, r2
 800b76c:	461a      	mov	r2, r3
 800b76e:	f7fa ff0f 	bl	8006590 <XMC_GPIO_Init>
  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b772:	7bfb      	ldrb	r3, [r7, #15]
 800b774:	3301      	adds	r3, #1
 800b776:	73fb      	strb	r3, [r7, #15]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	7c1b      	ldrb	r3, [r3, #16]
 800b77c:	7bfa      	ldrb	r2, [r7, #15]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d3e4      	bcc.n	800b74c <BUS_IO_Init+0x1c>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
    }
    handle_ptr->initialized = (bool)true;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2201      	movs	r2, #1
 800b786:	745a      	strb	r2, [r3, #17]
  }
  return (BUS_IO_STATUS_OK);
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop

0800b794 <BUS_IO_Read>:
  }
}

/* Function to read the bus pins state */
uint16_t BUS_IO_Read(BUS_IO_t *const handle_ptr)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint16_t count = 0U;
 800b79c:	2300      	movs	r3, #0
 800b79e:	81bb      	strh	r3, [r7, #12]

  XMC_ASSERT("BUS_IO_Read: handle_ptr null pointer", handle_ptr != NULL);

  /* Iterate the list of pins reading the pin state and packing the result according the pin position in the list, from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	73fb      	strb	r3, [r7, #15]
 800b7a4:	e01a      	b.n	800b7dc <BUS_IO_Read+0x48>
  {
    /* Reading a bus pin's state */
    count |= (uint16_t)(XMC_GPIO_GetInput(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin) << i);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	7bfb      	ldrb	r3, [r7, #15]
 800b7ac:	00db      	lsls	r3, r3, #3
 800b7ae:	4413      	add	r3, r2
 800b7b0:	6819      	ldr	r1, [r3, #0]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	7bfb      	ldrb	r3, [r7, #15]
 800b7b8:	00db      	lsls	r3, r3, #3
 800b7ba:	4413      	add	r3, r2
 800b7bc:	791b      	ldrb	r3, [r3, #4]
 800b7be:	4608      	mov	r0, r1
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	f7ff ffa1 	bl	800b708 <XMC_GPIO_GetInput>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	89bb      	ldrh	r3, [r7, #12]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	81bb      	strh	r3, [r7, #12]
  uint16_t count = 0U;

  XMC_ASSERT("BUS_IO_Read: handle_ptr null pointer", handle_ptr != NULL);

  /* Iterate the list of pins reading the pin state and packing the result according the pin position in the list, from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b7d6:	7bfb      	ldrb	r3, [r7, #15]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	73fb      	strb	r3, [r7, #15]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	7c1b      	ldrb	r3, [r3, #16]
 800b7e0:	7bfa      	ldrb	r2, [r7, #15]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d3df      	bcc.n	800b7a6 <BUS_IO_Read+0x12>
  {
    /* Reading a bus pin's state */
    count |= (uint16_t)(XMC_GPIO_GetInput(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin) << i);
  }
  return(count);
 800b7e6:	89bb      	ldrh	r3, [r7, #12]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <BUS_IO_Write>:

/* Function to set the pins bus state */
void BUS_IO_Write(BUS_IO_t *const handle_ptr, const uint16_t data)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  const BUS_IO_PORT_PIN_t *bus_io_port_pin;

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	60bb      	str	r3, [r7, #8]
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b802:	2300      	movs	r3, #0
 800b804:	73fb      	strb	r3, [r7, #15]
 800b806:	e023      	b.n	800b850 <BUS_IO_Write+0x60>
  {
    if (data & (uint16_t)((uint16_t)1 << i))
 800b808:	7bfb      	ldrb	r3, [r7, #15]
 800b80a:	2201      	movs	r2, #1
 800b80c:	fa02 f303 	lsl.w	r3, r2, r3
 800b810:	b29a      	uxth	r2, r3
 800b812:	887b      	ldrh	r3, [r7, #2]
 800b814:	4013      	ands	r3, r2
 800b816:	b29b      	uxth	r3, r3
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d009      	beq.n	800b830 <BUS_IO_Write+0x40>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_HIGH);
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	791b      	ldrb	r3, [r3, #4]
 800b824:	4610      	mov	r0, r2
 800b826:	4619      	mov	r1, r3
 800b828:	2201      	movs	r2, #1
 800b82a:	f7ff ff5b 	bl	800b6e4 <XMC_GPIO_SetOutputLevel>
 800b82e:	e009      	b.n	800b844 <BUS_IO_Write+0x54>
    }
    else
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	791b      	ldrb	r3, [r3, #4]
 800b838:	4610      	mov	r0, r2
 800b83a:	4619      	mov	r1, r3
 800b83c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b840:	f7ff ff50 	bl	800b6e4 <XMC_GPIO_SetOutputLevel>
    }
   bus_io_port_pin++;
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	3308      	adds	r3, #8
 800b848:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b84a:	7bfb      	ldrb	r3, [r7, #15]
 800b84c:	3301      	adds	r3, #1
 800b84e:	73fb      	strb	r3, [r7, #15]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	7c1b      	ldrb	r3, [r3, #16]
 800b854:	7bfa      	ldrb	r2, [r7, #15]
 800b856:	429a      	cmp	r2, r3
 800b858:	d3d6      	bcc.n	800b808 <BUS_IO_Write+0x18>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
    }
   bus_io_port_pin++;
  }
}
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <ANALOG_IO_Init>:
 * Input Parameter  : Handler Pointer pointing to APP data structure.
 * Output Parameter : ANALOG_IO_STATUS_t (ANALOG_IO APP initialization status).
 */

ANALOG_IO_STATUS_t ANALOG_IO_Init(const ANALOG_IO_t *const handle)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ANALOG_IO_Init: Passed handler is a null pointer", handler != NULL);
  if (*(handle->state) == ANALOG_IO_STATE_NOT_INITIALIZED)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10a      	bne.n	800b888 <ANALOG_IO_Init+0x28>
  {
    if (handle->config_ptr != NULL)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d002      	beq.n	800b880 <ANALOG_IO_Init+0x20>
    {
      /* Instance specific initialization function call*/
      handle->config_ptr();
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4798      	blx	r3
    }
    /* Set the state variable to initialized state*/
    *(handle->state) = ANALOG_IO_STATE_INITIALIZED;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	2201      	movs	r2, #1
 800b886:	701a      	strb	r2, [r3, #0]
  }
  return (ANALOG_IO_STATUS_OK);
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop

0800b894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b894:	b480      	push	{r7}
 800b896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b898:	4b04      	ldr	r3, [pc, #16]	; (800b8ac <__NVIC_GetPriorityGrouping+0x18>)
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b8a0:	0a1b      	lsrs	r3, r3, #8
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr
 800b8ac:	e000ed00 	.word	0xe000ed00

0800b8b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b8ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	db0b      	blt.n	800b8da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b8c2:	4908      	ldr	r1, [pc, #32]	; (800b8e4 <__NVIC_EnableIRQ+0x34>)
 800b8c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8c8:	095b      	lsrs	r3, r3, #5
 800b8ca:	79fa      	ldrb	r2, [r7, #7]
 800b8cc:	f002 021f 	and.w	r2, r2, #31
 800b8d0:	2001      	movs	r0, #1
 800b8d2:	fa00 f202 	lsl.w	r2, r0, r2
 800b8d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	e000e100 	.word	0xe000e100

0800b8e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	6039      	str	r1, [r7, #0]
 800b8f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b8f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	db0a      	blt.n	800b912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b8fc:	490d      	ldr	r1, [pc, #52]	; (800b934 <__NVIC_SetPriority+0x4c>)
 800b8fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	b2d2      	uxtb	r2, r2
 800b906:	0092      	lsls	r2, r2, #2
 800b908:	b2d2      	uxtb	r2, r2
 800b90a:	440b      	add	r3, r1
 800b90c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800b910:	e00a      	b.n	800b928 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b912:	4909      	ldr	r1, [pc, #36]	; (800b938 <__NVIC_SetPriority+0x50>)
 800b914:	79fb      	ldrb	r3, [r7, #7]
 800b916:	f003 030f 	and.w	r3, r3, #15
 800b91a:	3b04      	subs	r3, #4
 800b91c:	683a      	ldr	r2, [r7, #0]
 800b91e:	b2d2      	uxtb	r2, r2
 800b920:	0092      	lsls	r2, r2, #2
 800b922:	b2d2      	uxtb	r2, r2
 800b924:	440b      	add	r3, r1
 800b926:	761a      	strb	r2, [r3, #24]
  }
}
 800b928:	370c      	adds	r7, #12
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	e000e100 	.word	0xe000e100
 800b938:	e000ed00 	.word	0xe000ed00

0800b93c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b089      	sub	sp, #36	; 0x24
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f003 0307 	and.w	r3, r3, #7
 800b94e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	f1c3 0307 	rsb	r3, r3, #7
 800b956:	2b06      	cmp	r3, #6
 800b958:	bf28      	it	cs
 800b95a:	2306      	movcs	r3, #6
 800b95c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	3306      	adds	r3, #6
 800b962:	2b06      	cmp	r3, #6
 800b964:	d902      	bls.n	800b96c <NVIC_EncodePriority+0x30>
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	3b01      	subs	r3, #1
 800b96a:	e000      	b.n	800b96e <NVIC_EncodePriority+0x32>
 800b96c:	2300      	movs	r3, #0
 800b96e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	2201      	movs	r2, #1
 800b974:	fa02 f303 	lsl.w	r3, r2, r3
 800b978:	1e5a      	subs	r2, r3, #1
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	401a      	ands	r2, r3
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	2101      	movs	r1, #1
 800b986:	fa01 f303 	lsl.w	r3, r1, r3
 800b98a:	1e59      	subs	r1, r3, #1
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800b990:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800b992:	4618      	mov	r0, r3
 800b994:	3724      	adds	r7, #36	; 0x24
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop

0800b9a0 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b9ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 800b9b8:	370c      	adds	r7, #12
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop

0800b9c4 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
                                                                    const uint32_t grp_num,
                                                                    const uint32_t ch_num)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	3260      	adds	r2, #96	; 0x60
 800b9d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2101      	movs	r1, #1
 800b9de:	fa01 f303 	lsl.w	r3, r1, r3
 800b9e2:	ea42 0103 	orr.w	r1, r2, r3
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	68ba      	ldr	r2, [r7, #8]
 800b9ea:	3260      	adds	r2, #96	; 0x60
 800b9ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800b9f0:	3714      	adds	r7, #20
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr
 800b9fa:	bf00      	nop

0800b9fc <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6819      	ldr	r1, [r3, #0]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	32a0      	adds	r2, #160	; 0xa0
 800ba12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800ba16:	3714      	adds	r7, #20
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	32c0      	adds	r2, #192	; 0xc0
 800ba30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba34:	b29b      	uxth	r3, r3
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	370c      	adds	r7, #12
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop

0800ba44 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 800ba44:	b590      	push	{r4, r7, lr}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	7e1b      	ldrb	r3, [r3, #24]
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	f040 80a7 	bne.w	800bba4 <ADC_MEASUREMENT_Init+0x160>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	68db      	ldr	r3, [r3, #12]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fc fdf4 	bl	8008648 <GLOBAL_ADC_Init>
 800ba60:	4603      	mov	r3, r0
 800ba62:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	695a      	ldr	r2, [r3, #20]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	689b      	ldr	r3, [r3, #8]
 800ba6e:	4610      	mov	r0, r2
 800ba70:	6819      	ldr	r1, [r3, #0]
 800ba72:	2200      	movs	r2, #0
 800ba74:	2300      	movs	r3, #0
 800ba76:	f7fc f813 	bl	8007aa0 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	695a      	ldr	r2, [r3, #20]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	4610      	mov	r0, r2
 800ba86:	4619      	mov	r1, r3
 800ba88:	f7fc f930 	bl	8007cec <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	73fb      	strb	r3, [r7, #15]
 800ba90:	e03c      	b.n	800bb0c <ADC_MEASUREMENT_Init+0xc8>
    {
      indexed = handle_ptr->array->channel_array[j];
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	7bfa      	ldrb	r2, [r7, #15]
 800ba98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9c:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	689a      	ldr	r2, [r3, #8]
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	7c5b      	ldrb	r3, [r3, #17]
 800baa6:	4619      	mov	r1, r3
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4610      	mov	r0, r2
 800baae:	461a      	mov	r2, r3
 800bab0:	f7fc f99a 	bl	8007de8 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	689a      	ldr	r2, [r3, #8]
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	789b      	ldrb	r3, [r3, #2]
 800babe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	4619      	mov	r1, r3
                                indexed->res_handle);
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 800baca:	4610      	mov	r0, r2
 800bacc:	461a      	mov	r2, r3
 800bace:	f7ff ff95 	bl	800b9fc <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	7c1b      	ldrb	r3, [r3, #16]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800badc:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	7c5b      	ldrb	r3, [r3, #17]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800bae2:	4610      	mov	r0, r2
 800bae4:	461a      	mov	r2, r3
 800bae6:	f7ff ff6d 	bl	800b9c4 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);

#ifdef ADC_MEASUREMENT_ANALOG_IO_USED
      /* ANALOG_IO initialization for the channel*/
      if(indexed->analog_io_config != NULL)
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d009      	beq.n	800bb06 <ADC_MEASUREMENT_Init+0xc2>
      {
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7ff feb2 	bl	800b860 <ANALOG_IO_Init>
 800bafc:	4603      	mov	r3, r0
 800bafe:	461a      	mov	r2, r3
 800bb00:	7bbb      	ldrb	r3, [r7, #14]
 800bb02:	4313      	orrs	r3, r2
 800bb04:	73bb      	strb	r3, [r7, #14]
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800bb06:	7bfb      	ldrb	r3, [r7, #15]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	73fb      	strb	r3, [r7, #15]
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
 800bb0e:	2b0a      	cmp	r3, #10
 800bb10:	d9bf      	bls.n	800ba92 <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	7a1b      	ldrb	r3, [r3, #8]
 800bb18:	f003 0308 	and.w	r3, r3, #8
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d02c      	beq.n	800bb7c <ADC_MEASUREMENT_Init+0x138>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d028      	beq.n	800bb7c <ADC_MEASUREMENT_Init+0x138>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	691b      	ldr	r3, [r3, #16]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	b2dc      	uxtb	r4, r3
 800bb32:	f7ff feaf 	bl	800b894 <__NVIC_GetPriorityGrouping>
 800bb36:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800bb3c:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	4608      	mov	r0, r1
 800bb46:	4611      	mov	r1, r2
 800bb48:	461a      	mov	r2, r3
 800bb4a:	f7ff fef7 	bl	800b93c <NVIC_EncodePriority>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	b263      	sxtb	r3, r4
 800bb52:	4618      	mov	r0, r3
 800bb54:	4611      	mov	r1, r2
 800bb56:	f7ff fec7 	bl	800b8e8 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	695a      	ldr	r2, [r3, #20]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	7e5b      	ldrb	r3, [r3, #25]
 800bb64:	4610      	mov	r0, r2
 800bb66:	4619      	mov	r1, r3
 800bb68:	f7fb fff0 	bl	8007b4c <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	691b      	ldr	r3, [r3, #16]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	b25b      	sxtb	r3, r3
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7ff fe9a 	bl	800b8b0 <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	695b      	ldr	r3, [r3, #20]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d002      	beq.n	800bb8a <ADC_MEASUREMENT_Init+0x146>
    {
    	(handle_ptr->mux_config)();
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	695b      	ldr	r3, [r3, #20]
 800bb88:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	7e9b      	ldrb	r3, [r3, #26]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d005      	beq.n	800bb9e <ADC_MEASUREMENT_Init+0x15a>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	695b      	ldr	r3, [r3, #20]
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7ff ff01 	bl	800b9a0 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	7bba      	ldrb	r2, [r7, #14]
 800bba2:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	7e1b      	ldrb	r3, [r3, #24]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3714      	adds	r7, #20
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd90      	pop	{r4, r7, pc}

0800bbb0 <ADC_MEASUREMENT_GetResult>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	689a      	ldr	r2, [r3, #8]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	789b      	ldrb	r3, [r3, #2]
 800bbc2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	4610      	mov	r0, r2
 800bbca:	4619      	mov	r1, r3
 800bbcc:	f7ff ff28 	bl	800ba20 <XMC_VADC_GROUP_GetResult>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	81fb      	strh	r3, [r7, #14]

  return (result);
 800bbd4:	89fb      	ldrh	r3, [r7, #14]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop

0800bbe0 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 800bbea:	4851      	ldr	r0, [pc, #324]	; (800bd30 <DAVE_Init+0x150>)
 800bbec:	f7ff faec 	bl	800b1c8 <CLOCK_XMC4_Init>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 800bbf4:	79fb      	ldrb	r3, [r7, #7]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d104      	bne.n	800bc04 <DAVE_Init+0x24>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_1 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_1); 
 800bbfa:	484e      	ldr	r0, [pc, #312]	; (800bd34 <DAVE_Init+0x154>)
 800bbfc:	f7ff fcd4 	bl	800b5a8 <CAN_NODE_Init>
 800bc00:	4603      	mov	r3, r0
 800bc02:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bc04:	79fb      	ldrb	r3, [r7, #7]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d104      	bne.n	800bc14 <DAVE_Init+0x34>
  {
	 /**  Initialization of BUS_IO APP instance BUS_IO */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&BUS_IO); 
 800bc0a:	484b      	ldr	r0, [pc, #300]	; (800bd38 <DAVE_Init+0x158>)
 800bc0c:	f7ff fd90 	bl	800b730 <BUS_IO_Init>
 800bc10:	4603      	mov	r3, r0
 800bc12:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bc14:	79fb      	ldrb	r3, [r7, #7]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d104      	bne.n	800bc24 <DAVE_Init+0x44>
  {
	 /**  Initialization of WATCHDOG APP instance WATCHDOG */
	 init_status = (DAVE_STATUS_t)WATCHDOG_Init(&WATCHDOG); 
 800bc1a:	4848      	ldr	r0, [pc, #288]	; (800bd3c <DAVE_Init+0x15c>)
 800bc1c:	f7fc f9a6 	bl	8007f6c <WATCHDOG_Init>
 800bc20:	4603      	mov	r3, r0
 800bc22:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bc24:	79fb      	ldrb	r3, [r7, #7]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d104      	bne.n	800bc34 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_Debug_LED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_Debug_LED); 
 800bc2a:	4845      	ldr	r0, [pc, #276]	; (800bd40 <DAVE_Init+0x160>)
 800bc2c:	f7ff f94a 	bl	800aec4 <DIGITAL_IO_Init>
 800bc30:	4603      	mov	r3, r0
 800bc32:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bc34:	79fb      	ldrb	r3, [r7, #7]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d104      	bne.n	800bc44 <DAVE_Init+0x64>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_2 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_2); 
 800bc3a:	4842      	ldr	r0, [pc, #264]	; (800bd44 <DAVE_Init+0x164>)
 800bc3c:	f7ff fcb4 	bl	800b5a8 <CAN_NODE_Init>
 800bc40:	4603      	mov	r3, r0
 800bc42:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bc44:	79fb      	ldrb	r3, [r7, #7]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d104      	bne.n	800bc54 <DAVE_Init+0x74>
  {
	 /**  Initialization of PWM APP instance PWM_MHJ9_IN */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MHJ9_IN); 
 800bc4a:	483f      	ldr	r0, [pc, #252]	; (800bd48 <DAVE_Init+0x168>)
 800bc4c:	f7fc fb88 	bl	8008360 <PWM_Init>
 800bc50:	4603      	mov	r3, r0
 800bc52:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bc54:	79fb      	ldrb	r3, [r7, #7]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d104      	bne.n	800bc64 <DAVE_Init+0x84>
  {
	 /**  Initialization of PWM APP instance PWM_MHJ9_OUT */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MHJ9_OUT); 
 800bc5a:	483c      	ldr	r0, [pc, #240]	; (800bd4c <DAVE_Init+0x16c>)
 800bc5c:	f7fc fb80 	bl	8008360 <PWM_Init>
 800bc60:	4603      	mov	r3, r0
 800bc62:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bc64:	79fb      	ldrb	r3, [r7, #7]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d104      	bne.n	800bc74 <DAVE_Init+0x94>
  {
	 /**  Initialization of PWM APP instance PWM_Waterpump */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_Waterpump); 
 800bc6a:	4839      	ldr	r0, [pc, #228]	; (800bd50 <DAVE_Init+0x170>)
 800bc6c:	f7fc fb78 	bl	8008360 <PWM_Init>
 800bc70:	4603      	mov	r3, r0
 800bc72:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bc74:	79fb      	ldrb	r3, [r7, #7]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d104      	bne.n	800bc84 <DAVE_Init+0xa4>
  {
	 /**  Initialization of PWM APP instance PWM_Fans1 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_Fans1); 
 800bc7a:	4836      	ldr	r0, [pc, #216]	; (800bd54 <DAVE_Init+0x174>)
 800bc7c:	f7fc fb70 	bl	8008360 <PWM_Init>
 800bc80:	4603      	mov	r3, r0
 800bc82:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bc84:	79fb      	ldrb	r3, [r7, #7]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d104      	bne.n	800bc94 <DAVE_Init+0xb4>
  {
	 /**  Initialization of PWM APP instance PWM_Fans2 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_Fans2); 
 800bc8a:	4833      	ldr	r0, [pc, #204]	; (800bd58 <DAVE_Init+0x178>)
 800bc8c:	f7fc fb68 	bl	8008360 <PWM_Init>
 800bc90:	4603      	mov	r3, r0
 800bc92:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bc94:	79fb      	ldrb	r3, [r7, #7]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d104      	bne.n	800bca4 <DAVE_Init+0xc4>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT); 
 800bc9a:	4830      	ldr	r0, [pc, #192]	; (800bd5c <DAVE_Init+0x17c>)
 800bc9c:	f7ff fed2 	bl	800ba44 <ADC_MEASUREMENT_Init>
 800bca0:	4603      	mov	r3, r0
 800bca2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bca4:	79fb      	ldrb	r3, [r7, #7]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d104      	bne.n	800bcb4 <DAVE_Init+0xd4>
  {
	 /**  Initialization of DIGITAL_IO APP instance CAN1_Res */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CAN1_Res); 
 800bcaa:	482d      	ldr	r0, [pc, #180]	; (800bd60 <DAVE_Init+0x180>)
 800bcac:	f7ff f90a 	bl	800aec4 <DIGITAL_IO_Init>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bcb4:	79fb      	ldrb	r3, [r7, #7]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d104      	bne.n	800bcc4 <DAVE_Init+0xe4>
  {
	 /**  Initialization of DIGITAL_IO APP instance CAN2_Res */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CAN2_Res); 
 800bcba:	482a      	ldr	r0, [pc, #168]	; (800bd64 <DAVE_Init+0x184>)
 800bcbc:	f7ff f902 	bl	800aec4 <DIGITAL_IO_Init>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bcc4:	79fb      	ldrb	r3, [r7, #7]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d104      	bne.n	800bcd4 <DAVE_Init+0xf4>
  {
	 /**  Initialization of EVENT_DETECTOR APP instance EVENT_DETECTOR_Shifting */
	 init_status = (DAVE_STATUS_t)EVENT_DETECTOR_Init(&EVENT_DETECTOR_Shifting); 
 800bcca:	4827      	ldr	r0, [pc, #156]	; (800bd68 <DAVE_Init+0x188>)
 800bccc:	f7ff f8dc 	bl	800ae88 <EVENT_DETECTOR_Init>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bcd4:	79fb      	ldrb	r3, [r7, #7]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d104      	bne.n	800bce4 <DAVE_Init+0x104>
  {
	 /**  Initialization of EVENT_GENERATOR APP instance EVENT_GENERATOR_Shifting */
	 init_status = (DAVE_STATUS_t)EVENT_GENERATOR_Init(&EVENT_GENERATOR_Shifting); 
 800bcda:	4824      	ldr	r0, [pc, #144]	; (800bd6c <DAVE_Init+0x18c>)
 800bcdc:	f7ff f8b0 	bl	800ae40 <EVENT_GENERATOR_Init>
 800bce0:	4603      	mov	r3, r0
 800bce2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bce4:	79fb      	ldrb	r3, [r7, #7]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d104      	bne.n	800bcf4 <DAVE_Init+0x114>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_Shifting */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_Shifting); 
 800bcea:	4821      	ldr	r0, [pc, #132]	; (800bd70 <DAVE_Init+0x190>)
 800bcec:	f7fc fc22 	bl	8008534 <INTERRUPT_Init>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bcf4:	79fb      	ldrb	r3, [r7, #7]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d104      	bne.n	800bd04 <DAVE_Init+0x124>
  {
	 /**  Initialization of DIGITAL_IO APP instance Signal_DownShift */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Signal_DownShift); 
 800bcfa:	481e      	ldr	r0, [pc, #120]	; (800bd74 <DAVE_Init+0x194>)
 800bcfc:	f7ff f8e2 	bl	800aec4 <DIGITAL_IO_Init>
 800bd00:	4603      	mov	r3, r0
 800bd02:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bd04:	79fb      	ldrb	r3, [r7, #7]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d104      	bne.n	800bd14 <DAVE_Init+0x134>
  {
	 /**  Initialization of DIGITAL_IO APP instance Signal_UpShift */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Signal_UpShift); 
 800bd0a:	481b      	ldr	r0, [pc, #108]	; (800bd78 <DAVE_Init+0x198>)
 800bd0c:	f7ff f8da 	bl	800aec4 <DIGITAL_IO_Init>
 800bd10:	4603      	mov	r3, r0
 800bd12:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bd14:	79fb      	ldrb	r3, [r7, #7]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d104      	bne.n	800bd24 <DAVE_Init+0x144>
  {
	 /**  Initialization of BUS_IO APP instance BUS_IO_Input */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&BUS_IO_Input); 
 800bd1a:	4818      	ldr	r0, [pc, #96]	; (800bd7c <DAVE_Init+0x19c>)
 800bd1c:	f7ff fd08 	bl	800b730 <BUS_IO_Init>
 800bd20:	4603      	mov	r3, r0
 800bd22:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 800bd24:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800bd26:	4618      	mov	r0, r3
 800bd28:	3708      	adds	r7, #8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	200007f0 	.word	0x200007f0
 800bd34:	0800f9b0 	.word	0x0800f9b0
 800bd38:	20000450 	.word	0x20000450
 800bd3c:	2000000c 	.word	0x2000000c
 800bd40:	0800f8ac 	.word	0x0800f8ac
 800bd44:	0800fb14 	.word	0x0800fb14
 800bd48:	20000014 	.word	0x20000014
 800bd4c:	20000048 	.word	0x20000048
 800bd50:	2000007c 	.word	0x2000007c
 800bd54:	200000b0 	.word	0x200000b0
 800bd58:	200000e4 	.word	0x200000e4
 800bd5c:	20000604 	.word	0x20000604
 800bd60:	0800f8c0 	.word	0x0800f8c0
 800bd64:	0800f8d4 	.word	0x0800f8d4
 800bd68:	200001a4 	.word	0x200001a4
 800bd6c:	20000194 	.word	0x20000194
 800bd70:	0800f80c 	.word	0x0800f80c
 800bd74:	0800f8e8 	.word	0x0800f8e8
 800bd78:	0800f8fc 	.word	0x0800f8fc
 800bd7c:	20000464 	.word	0x20000464

0800bd80 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	460b      	mov	r3, r1
 800bd8a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800bd8c:	78fb      	ldrb	r3, [r7, #3]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	409a      	lsls	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	605a      	str	r2, [r3, #4]
}
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800bdac:	78fb      	ldrb	r3, [r7, #3]
 800bdae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bdb2:	409a      	lsls	r2, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	605a      	str	r2, [r3, #4]
}
 800bdb8:	370c      	adds	r7, #12
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop

0800bdc4 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	7c1b      	ldrb	r3, [r3, #16]
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	f7ff ffd2 	bl	800bd80 <XMC_GPIO_SetOutputHigh>
}
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop

0800bde4 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	7c1b      	ldrb	r3, [r3, #16]
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	f7ff ffd2 	bl	800bda0 <XMC_GPIO_SetOutputLow>
}
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop

0800be04 <CAN_1_ini>:
boolean_T CAN_1_RES = true;

uint8_t clutch_mode_ini = 0;

void CAN_1_ini()
{
 800be04:	b580      	push	{r7, lr}
 800be06:	af00      	add	r7, sp, #0
	//Termination Resistor on CAN 1
	if (CAN_1_RES)
 800be08:	4b3f      	ldr	r3, [pc, #252]	; (800bf08 <CAN_1_ini+0x104>)
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d003      	beq.n	800be18 <CAN_1_ini+0x14>
		DIGITAL_IO_SetOutputHigh (&CAN1_Res);
 800be10:	483e      	ldr	r0, [pc, #248]	; (800bf0c <CAN_1_ini+0x108>)
 800be12:	f7ff ffd7 	bl	800bdc4 <DIGITAL_IO_SetOutputHigh>
 800be16:	e002      	b.n	800be1e <CAN_1_ini+0x1a>
	else
		DIGITAL_IO_SetOutputLow (&CAN1_Res);
 800be18:	483c      	ldr	r0, [pc, #240]	; (800bf0c <CAN_1_ini+0x108>)
 800be1a:	f7ff ffe3 	bl	800bde4 <DIGITAL_IO_SetOutputLow>

	//------LINK4_1_boost_gear_rev_map 0x10 LMO1------ todo
	canData.p_air_22 				= &VCU_DW.VAR_IN_p_air_22;
 800be1e:	4b3c      	ldr	r3, [pc, #240]	; (800bf10 <CAN_1_ini+0x10c>)
 800be20:	4a3c      	ldr	r2, [pc, #240]	; (800bf14 <CAN_1_ini+0x110>)
 800be22:	601a      	str	r2, [r3, #0]
	canData.AN5GearPos	 			= &VCU_DW.VAR_IN_p_air_22_des;
 800be24:	4b3a      	ldr	r3, [pc, #232]	; (800bf10 <CAN_1_ini+0x10c>)
 800be26:	4a3c      	ldr	r2, [pc, #240]	; (800bf18 <CAN_1_ini+0x114>)
 800be28:	605a      	str	r2, [r3, #4]
	canData.n_engine 				= &n_engine;
 800be2a:	4b39      	ldr	r3, [pc, #228]	; (800bf10 <CAN_1_ini+0x10c>)
 800be2c:	4a3b      	ldr	r2, [pc, #236]	; (800bf1c <CAN_1_ini+0x118>)
 800be2e:	609a      	str	r2, [r3, #8]
	n_engine_LSB					= &VCU_DW.VAR_IN_n_engine_LSB;
 800be30:	4b3b      	ldr	r3, [pc, #236]	; (800bf20 <CAN_1_ini+0x11c>)
 800be32:	4a3c      	ldr	r2, [pc, #240]	; (800bf24 <CAN_1_ini+0x120>)
 800be34:	601a      	str	r2, [r3, #0]
	n_engine_MSB					= &VCU_DW.VAR_IN_n_engine_MSB;
 800be36:	4b3c      	ldr	r3, [pc, #240]	; (800bf28 <CAN_1_ini+0x124>)
 800be38:	4a3c      	ldr	r2, [pc, #240]	; (800bf2c <CAN_1_ini+0x128>)
 800be3a:	601a      	str	r2, [r3, #0]
	//canData.ign_angle 				= (uint8_t*)&VCU_DW.
	canData.gear 					= &VCU_DW.VAR_IN_gear;
 800be3c:	4b34      	ldr	r3, [pc, #208]	; (800bf10 <CAN_1_ini+0x10c>)
 800be3e:	4a3c      	ldr	r2, [pc, #240]	; (800bf30 <CAN_1_ini+0x12c>)
 800be40:	60da      	str	r2, [r3, #12]
	//canData.gear_shift_status 		= (uint8_t*)&VCU_DW.VAR_IN_gear_shift_status;
	//canData.fuel_table_1_status 	= (uint8_t*)&VCU_DW.VAR_IN_
	//canData.fuel_table_2_status 	= (uint8_t*)&VCU_DW.VAR_IN_
	//canData.ign_table_1_status 	= (uint8_t*)&VCU_DW.VAR_IN_
	//canData.ign_table_2_status 	= (uint8_t*)&VCU_DW.VAR_IN_
	canData.TPS						= &VCU_DW.VAR_IN_TPS_Plausi;
 800be42:	4b33      	ldr	r3, [pc, #204]	; (800bf10 <CAN_1_ini+0x10c>)
 800be44:	4a3b      	ldr	r2, [pc, #236]	; (800bf34 <CAN_1_ini+0x130>)
 800be46:	629a      	str	r2, [r3, #40]	; 0x28

	//------LINK4_2_press_temp_Wg 0x771 LMO2------ todo
	//canData.p_oil 				= (uint8_t*)&VCU_DW.VAR_IN_p_Oil;
	//canData.p_fuel_rail 		= (uint8_t*)&VCU_DW.VAR_IN_p_fuel_rail;
	//canData.x_throttle_valve 	= (uint8_t*)&VCU_DW.VAR_IN_x_ath;
	canData.t_water_engine 		= &VCU_DW.VAR_IN_t_water_engine;
 800be48:	4b31      	ldr	r3, [pc, #196]	; (800bf10 <CAN_1_ini+0x10c>)
 800be4a:	4a3b      	ldr	r2, [pc, #236]	; (800bf38 <CAN_1_ini+0x134>)
 800be4c:	639a      	str	r2, [r3, #56]	; 0x38
	//canData.lambda_status = (uint8_t*)&VCU_DW.VAR_IN_
	//canData.error_trigger = (uint8_t*)&VCU_DW.VAR_IN_
	//canData.boost_table = (uint8_t*)&VCU_DW.VAR_IN_

	//------STW 0x8 LM04------
	canData.STW_shift_up_request 	= &VCU_DW.VAR_IN_STW_shift_up_request;
 800be4e:	4b30      	ldr	r3, [pc, #192]	; (800bf10 <CAN_1_ini+0x10c>)
 800be50:	4a3a      	ldr	r2, [pc, #232]	; (800bf3c <CAN_1_ini+0x138>)
 800be52:	665a      	str	r2, [r3, #100]	; 0x64
	canData.STW_shift_down_request 	= &VCU_DW.VAR_IN_STW_shift_down_request;
 800be54:	4b2e      	ldr	r3, [pc, #184]	; (800bf10 <CAN_1_ini+0x10c>)
 800be56:	4a3a      	ldr	r2, [pc, #232]	; (800bf40 <CAN_1_ini+0x13c>)
 800be58:	669a      	str	r2, [r3, #104]	; 0x68
	canData.STW_transmission_mode 	= &VCU_DW.VAR_IN_STW_transmission_mode;
 800be5a:	4b2d      	ldr	r3, [pc, #180]	; (800bf10 <CAN_1_ini+0x10c>)
 800be5c:	4a39      	ldr	r2, [pc, #228]	; (800bf44 <CAN_1_ini+0x140>)
 800be5e:	67da      	str	r2, [r3, #124]	; 0x7c
	//canData.STW_trigger_point		= (uint8_t*)&VCU_DW.VAR_IN_STW_map_max;
	//canData.STW_engine_map 			= (uint8_t*)&VCU_DW.VAR_IN_STW_map_min;
	//canData.STW_rev_limiter 		= (uint8_t*)&VCU_DW.VAR_IN_STW_map_3;
	canData.STW_clutch_mode 		= &clutch_mode_ini;//(uint8_t*)&VCU_DW.VAR_IN_STW_clutch_mode;
 800be60:	4b2b      	ldr	r3, [pc, #172]	; (800bf10 <CAN_1_ini+0x10c>)
 800be62:	4a39      	ldr	r2, [pc, #228]	; (800bf48 <CAN_1_ini+0x144>)
 800be64:	679a      	str	r2, [r3, #120]	; 0x78
	canData.STW_mue_tyre 			= &VCU_DW.VAR_IN_STW_mue_tyre;
 800be66:	4b2a      	ldr	r3, [pc, #168]	; (800bf10 <CAN_1_ini+0x10c>)
 800be68:	4a38      	ldr	r2, [pc, #224]	; (800bf4c <CAN_1_ini+0x148>)
 800be6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	//canData.STW_brake_balance 		= (uint8_t*)&VCU_DW.VAR_IN_brake_ratio_R;

	//------TTC_ABS 0x5C0 LM05------
	canData.ABS_switchstate	= &VCU_DW.VAR_OUT_ABS_switchstate;
 800be6e:	4b28      	ldr	r3, [pc, #160]	; (800bf10 <CAN_1_ini+0x10c>)
 800be70:	4a37      	ldr	r2, [pc, #220]	; (800bf50 <CAN_1_ini+0x14c>)
 800be72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	canData.p_brake_F		= &VCU_DW.VAR_OUT_p_brake_F;
 800be76:	4b26      	ldr	r3, [pc, #152]	; (800bf10 <CAN_1_ini+0x10c>)
 800be78:	4a36      	ldr	r2, [pc, #216]	; (800bf54 <CAN_1_ini+0x150>)
 800be7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	canData.ABS_BL_switch	= &VCU_DW.VAR_OUT_ABS_BL_switch;
 800be7e:	4b24      	ldr	r3, [pc, #144]	; (800bf10 <CAN_1_ini+0x10c>)
 800be80:	4a35      	ldr	r2, [pc, #212]	; (800bf58 <CAN_1_ini+0x154>)
 800be82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	canData.ABS_active		= &VCU_DW.VAR_OUT_ABS_active;
 800be86:	4b22      	ldr	r3, [pc, #136]	; (800bf10 <CAN_1_ini+0x10c>)
 800be88:	4a34      	ldr	r2, [pc, #208]	; (800bf5c <CAN_1_ini+0x158>)
 800be8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	canData.ABS_EBD_lamp	= &VCU_DW.VAR_OUT_ABS_EBD_Lamp;
 800be8e:	4b20      	ldr	r3, [pc, #128]	; (800bf10 <CAN_1_ini+0x10c>)
 800be90:	4a33      	ldr	r2, [pc, #204]	; (800bf60 <CAN_1_ini+0x15c>)
 800be92:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	canData.ABS_lamp		= &VCU_DW.VAR_OUT_ABS_Lamp;
 800be96:	4b1e      	ldr	r3, [pc, #120]	; (800bf10 <CAN_1_ini+0x10c>)
 800be98:	4a32      	ldr	r2, [pc, #200]	; (800bf64 <CAN_1_ini+0x160>)
 800be9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	//------TTC_LaunchControl 0x7F0 LM06------
	canData.p_brake_R			= &VCU_DW.VAR_OUT_p_brake_R;
 800be9e:	4b1c      	ldr	r3, [pc, #112]	; (800bf10 <CAN_1_ini+0x10c>)
 800bea0:	4a31      	ldr	r2, [pc, #196]	; (800bf68 <CAN_1_ini+0x164>)
 800bea2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	canData.LC_mue_tyre			= &VCU_DW.VAR_OUT_STW_mue_tyre;
 800bea6:	4b1a      	ldr	r3, [pc, #104]	; (800bf10 <CAN_1_ini+0x10c>)
 800bea8:	4a30      	ldr	r2, [pc, #192]	; (800bf6c <CAN_1_ini+0x168>)
 800beaa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	canData.LC_clutch_pos_des	= &VCU_DW.VAR_OUT_x_clutch_LC;
 800beae:	4b18      	ldr	r3, [pc, #96]	; (800bf10 <CAN_1_ini+0x10c>)
 800beb0:	4a2f      	ldr	r2, [pc, #188]	; (800bf70 <CAN_1_ini+0x16c>)
 800beb2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	canData.LC_dash_bit			= &VCU_DW.VAR_OUT_LC_dash_Bit;
 800beb6:	4b16      	ldr	r3, [pc, #88]	; (800bf10 <CAN_1_ini+0x10c>)
 800beb8:	4a2e      	ldr	r2, [pc, #184]	; (800bf74 <CAN_1_ini+0x170>)
 800beba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	canData.LC_active_bit		= &VCU_DW.VAR_OUT_LC_active_bit;
 800bebe:	4b14      	ldr	r3, [pc, #80]	; (800bf10 <CAN_1_ini+0x10c>)
 800bec0:	4a2d      	ldr	r2, [pc, #180]	; (800bf78 <CAN_1_ini+0x174>)
 800bec2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	canData.LC_ready_bit		= &VCU_DW.VAR_OUT_LC_ready_bit;
 800bec6:	4b12      	ldr	r3, [pc, #72]	; (800bf10 <CAN_1_ini+0x10c>)
 800bec8:	4a2c      	ldr	r2, [pc, #176]	; (800bf7c <CAN_1_ini+0x178>)
 800beca:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	canData.LC_Mdes				= &VCU_DW.VAR_OUT_LC_Mdes;
 800bece:	4b10      	ldr	r3, [pc, #64]	; (800bf10 <CAN_1_ini+0x10c>)
 800bed0:	4a2b      	ldr	r2, [pc, #172]	; (800bf80 <CAN_1_ini+0x17c>)
 800bed2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	canData.LC_Fnr				= &VCU_DW.VAR_OUT_LC_Fnr;
 800bed6:	4b0e      	ldr	r3, [pc, #56]	; (800bf10 <CAN_1_ini+0x10c>)
 800bed8:	4a2a      	ldr	r2, [pc, #168]	; (800bf84 <CAN_1_ini+0x180>)
 800beda:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	//------TTC_WheelSpeed 0x340 LM07------
	canData.n_wheel_FL			= &VCU_DW.VAR_OUT_n_wheel_FL_kmproh;
 800bede:	4b0c      	ldr	r3, [pc, #48]	; (800bf10 <CAN_1_ini+0x10c>)
 800bee0:	4a29      	ldr	r2, [pc, #164]	; (800bf88 <CAN_1_ini+0x184>)
 800bee2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	canData.n_wheel_FR			= &VCU_DW.VAR_OUT_n_wheel_FR_kmproh;
 800bee6:	4b0a      	ldr	r3, [pc, #40]	; (800bf10 <CAN_1_ini+0x10c>)
 800bee8:	4a28      	ldr	r2, [pc, #160]	; (800bf8c <CAN_1_ini+0x188>)
 800beea:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	canData.n_wheel_RL			= &VCU_DW.VAR_OUT_n_wheel_RL_kmproh;
 800beee:	4b08      	ldr	r3, [pc, #32]	; (800bf10 <CAN_1_ini+0x10c>)
 800bef0:	4a27      	ldr	r2, [pc, #156]	; (800bf90 <CAN_1_ini+0x18c>)
 800bef2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	canData.n_wheel_RR			= &VCU_DW.VAR_OUT_n_wheel_FL_kmproh;
 800bef6:	4b06      	ldr	r3, [pc, #24]	; (800bf10 <CAN_1_ini+0x10c>)
 800bef8:	4a23      	ldr	r2, [pc, #140]	; (800bf88 <CAN_1_ini+0x184>)
 800befa:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	//----CAN-Modeul Measurement 0x7E1 LM08------
	canData.p_pneu_VCU_IN		= &VCU_DW.VAR_IN_p_pneum;
 800befe:	4b04      	ldr	r3, [pc, #16]	; (800bf10 <CAN_1_ini+0x10c>)
 800bf00:	4a24      	ldr	r2, [pc, #144]	; (800bf94 <CAN_1_ini+0x190>)
 800bf02:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	20000620 	.word	0x20000620
 800bf0c:	0800f8c0 	.word	0x0800f8c0
 800bf10:	200013c0 	.word	0x200013c0
 800bf14:	2000120d 	.word	0x2000120d
 800bf18:	2000120c 	.word	0x2000120c
 800bf1c:	20000844 	.word	0x20000844
 800bf20:	200012dc 	.word	0x200012dc
 800bf24:	2000120a 	.word	0x2000120a
 800bf28:	200012e8 	.word	0x200012e8
 800bf2c:	20001209 	.word	0x20001209
 800bf30:	20001208 	.word	0x20001208
 800bf34:	2000120b 	.word	0x2000120b
 800bf38:	2000120e 	.word	0x2000120e
 800bf3c:	20001215 	.word	0x20001215
 800bf40:	20001216 	.word	0x20001216
 800bf44:	20001218 	.word	0x20001218
 800bf48:	20000846 	.word	0x20000846
 800bf4c:	20001217 	.word	0x20001217
 800bf50:	200011eb 	.word	0x200011eb
 800bf54:	20001192 	.word	0x20001192
 800bf58:	200011ec 	.word	0x200011ec
 800bf5c:	200011ed 	.word	0x200011ed
 800bf60:	200011ee 	.word	0x200011ee
 800bf64:	200011ef 	.word	0x200011ef
 800bf68:	200011e3 	.word	0x200011e3
 800bf6c:	200011e4 	.word	0x200011e4
 800bf70:	200011e5 	.word	0x200011e5
 800bf74:	200011e6 	.word	0x200011e6
 800bf78:	200011e7 	.word	0x200011e7
 800bf7c:	200011e8 	.word	0x200011e8
 800bf80:	200011e9 	.word	0x200011e9
 800bf84:	200011ea 	.word	0x200011ea
 800bf88:	2000118a 	.word	0x2000118a
 800bf8c:	2000118c 	.word	0x2000118c
 800bf90:	2000118e 	.word	0x2000118e
 800bf94:	20001219 	.word	0x20001219

0800bf98 <CAN_1_Receive>:

void CAN_1_Receive()
{
 800bf98:	b598      	push	{r3, r4, r7, lr}
 800bf9a:	af00      	add	r7, sp, #0
	//------LINK4_1_boost_gear_rev_map 0x10 LMO1------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_01_Config);
 800bf9c:	4859      	ldr	r0, [pc, #356]	; (800c104 <CAN_1_Receive+0x16c>)
 800bf9e:	f7ff fad1 	bl	800b544 <CAN_NODE_MO_Receive>

	*canData.p_air_22 = checkRangePlausi(CAN_1_LMO_01_Config.mo_ptr->can_data_byte[0], ERR_P_AIR_22); // ACHTUNG MOTOROLA und Offset --> Umwandlung in Simulink
 800bfa2:	4b59      	ldr	r3, [pc, #356]	; (800c108 <CAN_1_Receive+0x170>)
 800bfa4:	681c      	ldr	r4, [r3, #0]
 800bfa6:	4b57      	ldr	r3, [pc, #348]	; (800c104 <CAN_1_Receive+0x16c>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	7c1b      	ldrb	r3, [r3, #16]
 800bfac:	4618      	mov	r0, r3
 800bfae:	210b      	movs	r1, #11
 800bfb0:	f000 ffbe 	bl	800cf30 <checkRangePlausi>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	7023      	strb	r3, [r4, #0]
	*canData.AN5GearPos = checkRangePlausi(CAN_1_LMO_01_Config.mo_ptr->can_data_byte[1], ERR_P_AIR_22_DES); //p_air_22_des
 800bfba:	4b53      	ldr	r3, [pc, #332]	; (800c108 <CAN_1_Receive+0x170>)
 800bfbc:	685c      	ldr	r4, [r3, #4]
 800bfbe:	4b51      	ldr	r3, [pc, #324]	; (800c104 <CAN_1_Receive+0x16c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	7c5b      	ldrb	r3, [r3, #17]
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	210c      	movs	r1, #12
 800bfc8:	f000 ffb2 	bl	800cf30 <checkRangePlausi>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	7023      	strb	r3, [r4, #0]
	*canData.n_engine = checkRangePlausi(CAN_1_LMO_01_Config.mo_ptr->can_data_word[1], ERR_N_ENGINE);
 800bfd2:	4b4d      	ldr	r3, [pc, #308]	; (800c108 <CAN_1_Receive+0x170>)
 800bfd4:	689c      	ldr	r4, [r3, #8]
 800bfd6:	4b4b      	ldr	r3, [pc, #300]	; (800c104 <CAN_1_Receive+0x16c>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	8a5b      	ldrh	r3, [r3, #18]
 800bfdc:	4618      	mov	r0, r3
 800bfde:	2106      	movs	r1, #6
 800bfe0:	f000 ffa6 	bl	800cf30 <checkRangePlausi>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	8023      	strh	r3, [r4, #0]
	*n_engine_LSB	= getbits(*canData.n_engine, 7, 8);
 800bfea:	4b48      	ldr	r3, [pc, #288]	; (800c10c <CAN_1_Receive+0x174>)
 800bfec:	681c      	ldr	r4, [r3, #0]
 800bfee:	4b46      	ldr	r3, [pc, #280]	; (800c108 <CAN_1_Receive+0x170>)
 800bff0:	689b      	ldr	r3, [r3, #8]
 800bff2:	881b      	ldrh	r3, [r3, #0]
 800bff4:	4618      	mov	r0, r3
 800bff6:	2107      	movs	r1, #7
 800bff8:	2208      	movs	r2, #8
 800bffa:	f002 f9bb 	bl	800e374 <getbits>
 800bffe:	4603      	mov	r3, r0
 800c000:	b2db      	uxtb	r3, r3
 800c002:	7023      	strb	r3, [r4, #0]
	*n_engine_MSB	= getbits(*canData.n_engine, 15, 8);
 800c004:	4b42      	ldr	r3, [pc, #264]	; (800c110 <CAN_1_Receive+0x178>)
 800c006:	681c      	ldr	r4, [r3, #0]
 800c008:	4b3f      	ldr	r3, [pc, #252]	; (800c108 <CAN_1_Receive+0x170>)
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	881b      	ldrh	r3, [r3, #0]
 800c00e:	4618      	mov	r0, r3
 800c010:	210f      	movs	r1, #15
 800c012:	2208      	movs	r2, #8
 800c014:	f002 f9ae 	bl	800e374 <getbits>
 800c018:	4603      	mov	r3, r0
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	7023      	strb	r3, [r4, #0]
	*canData.gear =  checkRangePlausi(CAN_1_LMO_01_Config.mo_ptr->can_data_byte[4],ERR_GEAR); // ACHTUNG MOTOROLA und nur 5 bit NEU --> Umwandlung in Simulink
 800c01e:	4b3a      	ldr	r3, [pc, #232]	; (800c108 <CAN_1_Receive+0x170>)
 800c020:	68dc      	ldr	r4, [r3, #12]
 800c022:	4b38      	ldr	r3, [pc, #224]	; (800c104 <CAN_1_Receive+0x16c>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	7d1b      	ldrb	r3, [r3, #20]
 800c028:	4618      	mov	r0, r3
 800c02a:	2104      	movs	r1, #4
 800c02c:	f000 ff80 	bl	800cf30 <checkRangePlausi>
 800c030:	4603      	mov	r3, r0
 800c032:	b2db      	uxtb	r3, r3
 800c034:	7023      	strb	r3, [r4, #0]
	//*canData.gear_shift_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],28,4);
	//*canData.fuel_table_1_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],29,1);
	//*canData.fuel_table_2_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],30,1);
	//*canData.ign_table_1_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],31,1);
	//*canData.ign_table_2_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],32,1);
	*canData.TPS = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data_byte[4],0,3);
 800c036:	4b34      	ldr	r3, [pc, #208]	; (800c108 <CAN_1_Receive+0x170>)
 800c038:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800c03a:	4b32      	ldr	r3, [pc, #200]	; (800c104 <CAN_1_Receive+0x16c>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	7d1b      	ldrb	r3, [r3, #20]
 800c040:	4618      	mov	r0, r3
 800c042:	2100      	movs	r1, #0
 800c044:	2203      	movs	r2, #3
 800c046:	f002 f995 	bl	800e374 <getbits>
 800c04a:	4603      	mov	r3, r0
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	7023      	strb	r3, [r4, #0]

	//------LINK4_2_press_temp_Wg 0x771 LMO2------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_02_Config);
 800c050:	4830      	ldr	r0, [pc, #192]	; (800c114 <CAN_1_Receive+0x17c>)
 800c052:	f7ff fa77 	bl	800b544 <CAN_NODE_MO_Receive>

	//*canData.p_oil = CAN_1_LMO_02_Config.mo_ptr->can_data_byte[0];
	//*canData.p_fuel_rail =  CAN_1_LMO_02_Config.mo_ptr->can_data_byte[1];
	//*canData.x_throttle_valve = CAN_1_LMO_02_Config.mo_ptr->can_data_byte[2]; //x_throttleValve
	*canData.t_water_engine = CAN_1_LMO_02_Config.mo_ptr->can_data_byte[3];
 800c056:	4b2c      	ldr	r3, [pc, #176]	; (800c108 <CAN_1_Receive+0x170>)
 800c058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c05a:	4a2e      	ldr	r2, [pc, #184]	; (800c114 <CAN_1_Receive+0x17c>)
 800c05c:	6812      	ldr	r2, [r2, #0]
 800c05e:	7cd2      	ldrb	r2, [r2, #19]
 800c060:	701a      	strb	r2, [r3, #0]
	*canData.error_trigger = (CAN_1_LMO_03_Config.mo_ptr->can_data_byte[6]);
	*canData.boost_table = CAN_1_LMO_03_Config.mo_ptr->can_data_byte[7];
	*/

	//------STW 0x8 LM04------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_04_Config);
 800c062:	482d      	ldr	r0, [pc, #180]	; (800c118 <CAN_1_Receive+0x180>)
 800c064:	f7ff fa6e 	bl	800b544 <CAN_NODE_MO_Receive>

	*canData.STW_shift_up_request = checkRangePlausi(getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],0,1),ERR_STW_SHIFT_UP_REQUEST);
 800c068:	4b27      	ldr	r3, [pc, #156]	; (800c108 <CAN_1_Receive+0x170>)
 800c06a:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800c06c:	4b2a      	ldr	r3, [pc, #168]	; (800c118 <CAN_1_Receive+0x180>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	7c1b      	ldrb	r3, [r3, #16]
 800c072:	4618      	mov	r0, r3
 800c074:	2100      	movs	r1, #0
 800c076:	2201      	movs	r2, #1
 800c078:	f002 f97c 	bl	800e374 <getbits>
 800c07c:	4603      	mov	r3, r0
 800c07e:	4618      	mov	r0, r3
 800c080:	2112      	movs	r1, #18
 800c082:	f000 ff55 	bl	800cf30 <checkRangePlausi>
 800c086:	4603      	mov	r3, r0
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	7023      	strb	r3, [r4, #0]
	*canData.STW_shift_down_request = checkRangePlausi(getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],1,1),ERR_STW_SHIFT_DOWN_REQUEST);
 800c08c:	4b1e      	ldr	r3, [pc, #120]	; (800c108 <CAN_1_Receive+0x170>)
 800c08e:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800c090:	4b21      	ldr	r3, [pc, #132]	; (800c118 <CAN_1_Receive+0x180>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	7c1b      	ldrb	r3, [r3, #16]
 800c096:	4618      	mov	r0, r3
 800c098:	2101      	movs	r1, #1
 800c09a:	2201      	movs	r2, #1
 800c09c:	f002 f96a 	bl	800e374 <getbits>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	2111      	movs	r1, #17
 800c0a6:	f000 ff43 	bl	800cf30 <checkRangePlausi>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	7023      	strb	r3, [r4, #0]
	//*canData.STW_trigger_point = getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],2,1);
	//*canData.STW_engine_map = getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],3,1);
	//*canData.STW_rev_limiter = getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],4,1);
	*canData.STW_clutch_mode = CAN_1_LMO_04_Config.mo_ptr->can_data_byte[1];
 800c0b0:	4b15      	ldr	r3, [pc, #84]	; (800c108 <CAN_1_Receive+0x170>)
 800c0b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0b4:	4a18      	ldr	r2, [pc, #96]	; (800c118 <CAN_1_Receive+0x180>)
 800c0b6:	6812      	ldr	r2, [r2, #0]
 800c0b8:	7c52      	ldrb	r2, [r2, #17]
 800c0ba:	701a      	strb	r2, [r3, #0]
	*canData.STW_transmission_mode = checkRangePlausi(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[2],ERR_TRANSMISSION_MODE);
 800c0bc:	4b12      	ldr	r3, [pc, #72]	; (800c108 <CAN_1_Receive+0x170>)
 800c0be:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800c0c0:	4b15      	ldr	r3, [pc, #84]	; (800c118 <CAN_1_Receive+0x180>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	7c9b      	ldrb	r3, [r3, #18]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	2114      	movs	r1, #20
 800c0ca:	f000 ff31 	bl	800cf30 <checkRangePlausi>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	7023      	strb	r3, [r4, #0]
	*canData.STW_mue_tyre = checkRangePlausi(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[3],ERR_MUE_TYRE);
 800c0d4:	4b0c      	ldr	r3, [pc, #48]	; (800c108 <CAN_1_Receive+0x170>)
 800c0d6:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800c0da:	4b0f      	ldr	r3, [pc, #60]	; (800c118 <CAN_1_Receive+0x180>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	7cdb      	ldrb	r3, [r3, #19]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	2110      	movs	r1, #16
 800c0e4:	f000 ff24 	bl	800cf30 <checkRangePlausi>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	7023      	strb	r3, [r4, #0]
	//*canData.STW_brake_balance = CAN_1_LMO_04_Config.mo_ptr->can_data_byte[4];

	//-----CAN-Modul LM08-----
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_08_Config);
 800c0ee:	480b      	ldr	r0, [pc, #44]	; (800c11c <CAN_1_Receive+0x184>)
 800c0f0:	f7ff fa28 	bl	800b544 <CAN_NODE_MO_Receive>

	*canData.p_pneu_VCU_IN = CAN_1_LMO_08_Config.mo_ptr->can_data_byte[0];
 800c0f4:	4b04      	ldr	r3, [pc, #16]	; (800c108 <CAN_1_Receive+0x170>)
 800c0f6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c0fa:	4a08      	ldr	r2, [pc, #32]	; (800c11c <CAN_1_Receive+0x184>)
 800c0fc:	6812      	ldr	r2, [r2, #0]
 800c0fe:	7c12      	ldrb	r2, [r2, #16]
 800c100:	701a      	strb	r2, [r3, #0]
}
 800c102:	bd98      	pop	{r3, r4, r7, pc}
 800c104:	0800f950 	.word	0x0800f950
 800c108:	200013c0 	.word	0x200013c0
 800c10c:	200012dc 	.word	0x200012dc
 800c110:	200012e8 	.word	0x200012e8
 800c114:	0800f95c 	.word	0x0800f95c
 800c118:	0800f974 	.word	0x0800f974
 800c11c:	0800f9a4 	.word	0x0800f9a4

0800c120 <CAN_1_Transmit>:

void CAN_1_Transmit()
{
 800c120:	b580      	push	{r7, lr}
 800c122:	af00      	add	r7, sp, #0
	//------TTC_ABS 0x5C0 LM05------
	CAN1_data_Tx_LM05[0] = *canData.ABS_switchstate;
 800c124:	4b90      	ldr	r3, [pc, #576]	; (800c368 <CAN_1_Transmit+0x248>)
 800c126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c12a:	781a      	ldrb	r2, [r3, #0]
 800c12c:	4b8f      	ldr	r3, [pc, #572]	; (800c36c <CAN_1_Transmit+0x24c>)
 800c12e:	701a      	strb	r2, [r3, #0]
	CAN1_data_Tx_LM05[1] = getbits(*canData.p_brake_F, 7,8);
 800c130:	4b8d      	ldr	r3, [pc, #564]	; (800c368 <CAN_1_Transmit+0x248>)
 800c132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c136:	881b      	ldrh	r3, [r3, #0]
 800c138:	4618      	mov	r0, r3
 800c13a:	2107      	movs	r1, #7
 800c13c:	2208      	movs	r2, #8
 800c13e:	f002 f919 	bl	800e374 <getbits>
 800c142:	4603      	mov	r3, r0
 800c144:	b2da      	uxtb	r2, r3
 800c146:	4b89      	ldr	r3, [pc, #548]	; (800c36c <CAN_1_Transmit+0x24c>)
 800c148:	705a      	strb	r2, [r3, #1]
	CAN1_data_Tx_LM05[2] = getbits(*canData.p_brake_F, 15,8);
 800c14a:	4b87      	ldr	r3, [pc, #540]	; (800c368 <CAN_1_Transmit+0x248>)
 800c14c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c150:	881b      	ldrh	r3, [r3, #0]
 800c152:	4618      	mov	r0, r3
 800c154:	210f      	movs	r1, #15
 800c156:	2208      	movs	r2, #8
 800c158:	f002 f90c 	bl	800e374 <getbits>
 800c15c:	4603      	mov	r3, r0
 800c15e:	b2da      	uxtb	r2, r3
 800c160:	4b82      	ldr	r3, [pc, #520]	; (800c36c <CAN_1_Transmit+0x24c>)
 800c162:	709a      	strb	r2, [r3, #2]
	CAN1_data_Tx_LM05[3] = getbits(*canData.ABS_BL_switch,0,1) || getbits(*canData.ABS_active,0,1) << 1 || getbits(*canData.ABS_EBD_lamp,0,1) << 2 || getbits(*canData.ABS_lamp,0,1) << 3;
 800c164:	4b80      	ldr	r3, [pc, #512]	; (800c368 <CAN_1_Transmit+0x248>)
 800c166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	4618      	mov	r0, r3
 800c16e:	2100      	movs	r1, #0
 800c170:	2201      	movs	r2, #1
 800c172:	f002 f8ff 	bl	800e374 <getbits>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d126      	bne.n	800c1ca <CAN_1_Transmit+0xaa>
 800c17c:	4b7a      	ldr	r3, [pc, #488]	; (800c368 <CAN_1_Transmit+0x248>)
 800c17e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	4618      	mov	r0, r3
 800c186:	2100      	movs	r1, #0
 800c188:	2201      	movs	r2, #1
 800c18a:	f002 f8f3 	bl	800e374 <getbits>
 800c18e:	4603      	mov	r3, r0
 800c190:	005b      	lsls	r3, r3, #1
 800c192:	2b00      	cmp	r3, #0
 800c194:	d119      	bne.n	800c1ca <CAN_1_Transmit+0xaa>
 800c196:	4b74      	ldr	r3, [pc, #464]	; (800c368 <CAN_1_Transmit+0x248>)
 800c198:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	f002 f8e6 	bl	800e374 <getbits>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d10c      	bne.n	800c1ca <CAN_1_Transmit+0xaa>
 800c1b0:	4b6d      	ldr	r3, [pc, #436]	; (800c368 <CAN_1_Transmit+0x248>)
 800c1b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	2201      	movs	r2, #1
 800c1be:	f002 f8d9 	bl	800e374 <getbits>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	00db      	lsls	r3, r3, #3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d001      	beq.n	800c1ce <CAN_1_Transmit+0xae>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e000      	b.n	800c1d0 <CAN_1_Transmit+0xb0>
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	b2da      	uxtb	r2, r3
 800c1d2:	4b66      	ldr	r3, [pc, #408]	; (800c36c <CAN_1_Transmit+0x24c>)
 800c1d4:	70da      	strb	r2, [r3, #3]

	CAN_NODE_MO_UpdateData(&CAN_1_LMO_05_Config, CAN1_data_Tx_LM05);
 800c1d6:	4866      	ldr	r0, [pc, #408]	; (800c370 <CAN_1_Transmit+0x250>)
 800c1d8:	4964      	ldr	r1, [pc, #400]	; (800c36c <CAN_1_Transmit+0x24c>)
 800c1da:	f7ff f9c5 	bl	800b568 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_1_LMO_05_Config);
 800c1de:	4864      	ldr	r0, [pc, #400]	; (800c370 <CAN_1_Transmit+0x250>)
 800c1e0:	f7ff f99e 	bl	800b520 <CAN_NODE_MO_Transmit>

	//------TTC_LaunchControl 0x7F0 LM06------
	CAN1_data_Tx_LM06[0] = *canData.p_brake_R;
 800c1e4:	4b60      	ldr	r3, [pc, #384]	; (800c368 <CAN_1_Transmit+0x248>)
 800c1e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1ea:	781a      	ldrb	r2, [r3, #0]
 800c1ec:	4b61      	ldr	r3, [pc, #388]	; (800c374 <CAN_1_Transmit+0x254>)
 800c1ee:	701a      	strb	r2, [r3, #0]
	CAN1_data_Tx_LM06[1] = *canData.LC_mue_tyre;
 800c1f0:	4b5d      	ldr	r3, [pc, #372]	; (800c368 <CAN_1_Transmit+0x248>)
 800c1f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c1f6:	781a      	ldrb	r2, [r3, #0]
 800c1f8:	4b5e      	ldr	r3, [pc, #376]	; (800c374 <CAN_1_Transmit+0x254>)
 800c1fa:	705a      	strb	r2, [r3, #1]
	CAN1_data_Tx_LM06[2] = *canData.LC_clutch_pos_des;
 800c1fc:	4b5a      	ldr	r3, [pc, #360]	; (800c368 <CAN_1_Transmit+0x248>)
 800c1fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c202:	781a      	ldrb	r2, [r3, #0]
 800c204:	4b5b      	ldr	r3, [pc, #364]	; (800c374 <CAN_1_Transmit+0x254>)
 800c206:	709a      	strb	r2, [r3, #2]
	CAN1_data_Tx_LM06[3] = getbits(*canData.LC_dash_bit,0,1) || getbits(*canData.LC_active_bit,0,1) << 1 || getbits(*canData.LC_ready_bit,0,1) << 2;
 800c208:	4b57      	ldr	r3, [pc, #348]	; (800c368 <CAN_1_Transmit+0x248>)
 800c20a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	4618      	mov	r0, r3
 800c212:	2100      	movs	r1, #0
 800c214:	2201      	movs	r2, #1
 800c216:	f002 f8ad 	bl	800e374 <getbits>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d119      	bne.n	800c254 <CAN_1_Transmit+0x134>
 800c220:	4b51      	ldr	r3, [pc, #324]	; (800c368 <CAN_1_Transmit+0x248>)
 800c222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	4618      	mov	r0, r3
 800c22a:	2100      	movs	r1, #0
 800c22c:	2201      	movs	r2, #1
 800c22e:	f002 f8a1 	bl	800e374 <getbits>
 800c232:	4603      	mov	r3, r0
 800c234:	005b      	lsls	r3, r3, #1
 800c236:	2b00      	cmp	r3, #0
 800c238:	d10c      	bne.n	800c254 <CAN_1_Transmit+0x134>
 800c23a:	4b4b      	ldr	r3, [pc, #300]	; (800c368 <CAN_1_Transmit+0x248>)
 800c23c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	4618      	mov	r0, r3
 800c244:	2100      	movs	r1, #0
 800c246:	2201      	movs	r2, #1
 800c248:	f002 f894 	bl	800e374 <getbits>
 800c24c:	4603      	mov	r3, r0
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	2b00      	cmp	r3, #0
 800c252:	d001      	beq.n	800c258 <CAN_1_Transmit+0x138>
 800c254:	2301      	movs	r3, #1
 800c256:	e000      	b.n	800c25a <CAN_1_Transmit+0x13a>
 800c258:	2300      	movs	r3, #0
 800c25a:	b2da      	uxtb	r2, r3
 800c25c:	4b45      	ldr	r3, [pc, #276]	; (800c374 <CAN_1_Transmit+0x254>)
 800c25e:	70da      	strb	r2, [r3, #3]
	CAN1_data_Tx_LM06[4] = *canData.LC_Mdes;
 800c260:	4b41      	ldr	r3, [pc, #260]	; (800c368 <CAN_1_Transmit+0x248>)
 800c262:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c266:	781a      	ldrb	r2, [r3, #0]
 800c268:	4b42      	ldr	r3, [pc, #264]	; (800c374 <CAN_1_Transmit+0x254>)
 800c26a:	711a      	strb	r2, [r3, #4]
	CAN1_data_Tx_LM06[5] = *canData.LC_Fnr;
 800c26c:	4b3e      	ldr	r3, [pc, #248]	; (800c368 <CAN_1_Transmit+0x248>)
 800c26e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c272:	781a      	ldrb	r2, [r3, #0]
 800c274:	4b3f      	ldr	r3, [pc, #252]	; (800c374 <CAN_1_Transmit+0x254>)
 800c276:	715a      	strb	r2, [r3, #5]

	CAN_NODE_MO_UpdateData(&CAN_1_LMO_06_Config, CAN1_data_Tx_LM06);
 800c278:	483f      	ldr	r0, [pc, #252]	; (800c378 <CAN_1_Transmit+0x258>)
 800c27a:	493e      	ldr	r1, [pc, #248]	; (800c374 <CAN_1_Transmit+0x254>)
 800c27c:	f7ff f974 	bl	800b568 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_1_LMO_06_Config);
 800c280:	483d      	ldr	r0, [pc, #244]	; (800c378 <CAN_1_Transmit+0x258>)
 800c282:	f7ff f94d 	bl	800b520 <CAN_NODE_MO_Transmit>

	//------TTC_WheelSpeed 0x340 LM07------
	CAN1_data_Tx_LM07[0] = getbits(*canData.n_wheel_FL,7,8);
 800c286:	4b38      	ldr	r3, [pc, #224]	; (800c368 <CAN_1_Transmit+0x248>)
 800c288:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c28c:	881b      	ldrh	r3, [r3, #0]
 800c28e:	4618      	mov	r0, r3
 800c290:	2107      	movs	r1, #7
 800c292:	2208      	movs	r2, #8
 800c294:	f002 f86e 	bl	800e374 <getbits>
 800c298:	4603      	mov	r3, r0
 800c29a:	b2da      	uxtb	r2, r3
 800c29c:	4b37      	ldr	r3, [pc, #220]	; (800c37c <CAN_1_Transmit+0x25c>)
 800c29e:	701a      	strb	r2, [r3, #0]
	CAN1_data_Tx_LM07[1] = getbits(*canData.n_wheel_FL,15,8);
 800c2a0:	4b31      	ldr	r3, [pc, #196]	; (800c368 <CAN_1_Transmit+0x248>)
 800c2a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c2a6:	881b      	ldrh	r3, [r3, #0]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	210f      	movs	r1, #15
 800c2ac:	2208      	movs	r2, #8
 800c2ae:	f002 f861 	bl	800e374 <getbits>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	b2da      	uxtb	r2, r3
 800c2b6:	4b31      	ldr	r3, [pc, #196]	; (800c37c <CAN_1_Transmit+0x25c>)
 800c2b8:	705a      	strb	r2, [r3, #1]
	CAN1_data_Tx_LM07[2] = getbits(*canData.n_wheel_FR,7,8);
 800c2ba:	4b2b      	ldr	r3, [pc, #172]	; (800c368 <CAN_1_Transmit+0x248>)
 800c2bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c2c0:	881b      	ldrh	r3, [r3, #0]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	2107      	movs	r1, #7
 800c2c6:	2208      	movs	r2, #8
 800c2c8:	f002 f854 	bl	800e374 <getbits>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	b2da      	uxtb	r2, r3
 800c2d0:	4b2a      	ldr	r3, [pc, #168]	; (800c37c <CAN_1_Transmit+0x25c>)
 800c2d2:	709a      	strb	r2, [r3, #2]
	CAN1_data_Tx_LM07[3] = getbits(*canData.n_wheel_FR,15,8);
 800c2d4:	4b24      	ldr	r3, [pc, #144]	; (800c368 <CAN_1_Transmit+0x248>)
 800c2d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c2da:	881b      	ldrh	r3, [r3, #0]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	210f      	movs	r1, #15
 800c2e0:	2208      	movs	r2, #8
 800c2e2:	f002 f847 	bl	800e374 <getbits>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	b2da      	uxtb	r2, r3
 800c2ea:	4b24      	ldr	r3, [pc, #144]	; (800c37c <CAN_1_Transmit+0x25c>)
 800c2ec:	70da      	strb	r2, [r3, #3]
	CAN1_data_Tx_LM07[4] = getbits(*canData.n_wheel_RL,7,8);
 800c2ee:	4b1e      	ldr	r3, [pc, #120]	; (800c368 <CAN_1_Transmit+0x248>)
 800c2f0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c2f4:	881b      	ldrh	r3, [r3, #0]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	2107      	movs	r1, #7
 800c2fa:	2208      	movs	r2, #8
 800c2fc:	f002 f83a 	bl	800e374 <getbits>
 800c300:	4603      	mov	r3, r0
 800c302:	b2da      	uxtb	r2, r3
 800c304:	4b1d      	ldr	r3, [pc, #116]	; (800c37c <CAN_1_Transmit+0x25c>)
 800c306:	711a      	strb	r2, [r3, #4]
	CAN1_data_Tx_LM07[5] = getbits(*canData.n_wheel_RL,15,8);
 800c308:	4b17      	ldr	r3, [pc, #92]	; (800c368 <CAN_1_Transmit+0x248>)
 800c30a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c30e:	881b      	ldrh	r3, [r3, #0]
 800c310:	4618      	mov	r0, r3
 800c312:	210f      	movs	r1, #15
 800c314:	2208      	movs	r2, #8
 800c316:	f002 f82d 	bl	800e374 <getbits>
 800c31a:	4603      	mov	r3, r0
 800c31c:	b2da      	uxtb	r2, r3
 800c31e:	4b17      	ldr	r3, [pc, #92]	; (800c37c <CAN_1_Transmit+0x25c>)
 800c320:	715a      	strb	r2, [r3, #5]
	CAN1_data_Tx_LM07[6] = getbits(*canData.n_wheel_RR,7,8);
 800c322:	4b11      	ldr	r3, [pc, #68]	; (800c368 <CAN_1_Transmit+0x248>)
 800c324:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c328:	881b      	ldrh	r3, [r3, #0]
 800c32a:	4618      	mov	r0, r3
 800c32c:	2107      	movs	r1, #7
 800c32e:	2208      	movs	r2, #8
 800c330:	f002 f820 	bl	800e374 <getbits>
 800c334:	4603      	mov	r3, r0
 800c336:	b2da      	uxtb	r2, r3
 800c338:	4b10      	ldr	r3, [pc, #64]	; (800c37c <CAN_1_Transmit+0x25c>)
 800c33a:	719a      	strb	r2, [r3, #6]
	CAN1_data_Tx_LM07[7] = getbits(*canData.n_wheel_RR,15,8);
 800c33c:	4b0a      	ldr	r3, [pc, #40]	; (800c368 <CAN_1_Transmit+0x248>)
 800c33e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c342:	881b      	ldrh	r3, [r3, #0]
 800c344:	4618      	mov	r0, r3
 800c346:	210f      	movs	r1, #15
 800c348:	2208      	movs	r2, #8
 800c34a:	f002 f813 	bl	800e374 <getbits>
 800c34e:	4603      	mov	r3, r0
 800c350:	b2da      	uxtb	r2, r3
 800c352:	4b0a      	ldr	r3, [pc, #40]	; (800c37c <CAN_1_Transmit+0x25c>)
 800c354:	71da      	strb	r2, [r3, #7]

	CAN_NODE_MO_UpdateData(&CAN_1_LMO_07_Config, CAN1_data_Tx_LM07);
 800c356:	480a      	ldr	r0, [pc, #40]	; (800c380 <CAN_1_Transmit+0x260>)
 800c358:	4908      	ldr	r1, [pc, #32]	; (800c37c <CAN_1_Transmit+0x25c>)
 800c35a:	f7ff f905 	bl	800b568 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_1_LMO_07_Config);
 800c35e:	4808      	ldr	r0, [pc, #32]	; (800c380 <CAN_1_Transmit+0x260>)
 800c360:	f7ff f8de 	bl	800b520 <CAN_NODE_MO_Transmit>
}
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	200013c0 	.word	0x200013c0
 800c36c:	2000082c 	.word	0x2000082c
 800c370:	0800f980 	.word	0x0800f980
 800c374:	20000834 	.word	0x20000834
 800c378:	0800f98c 	.word	0x0800f98c
 800c37c:	2000083c 	.word	0x2000083c
 800c380:	0800f998 	.word	0x0800f998

0800c384 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	460b      	mov	r3, r1
 800c38e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800c390:	78fb      	ldrb	r3, [r7, #3]
 800c392:	2201      	movs	r2, #1
 800c394:	409a      	lsls	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	605a      	str	r2, [r3, #4]
}
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800c3b0:	78fb      	ldrb	r3, [r7, #3]
 800c3b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c3b6:	409a      	lsls	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	605a      	str	r2, [r3, #4]
}
 800c3bc:	370c      	adds	r7, #12
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop

0800c3c8 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	7c1b      	ldrb	r3, [r3, #16]
 800c3d8:	4610      	mov	r0, r2
 800c3da:	4619      	mov	r1, r3
 800c3dc:	f7ff ffd2 	bl	800c384 <XMC_GPIO_SetOutputHigh>
}
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop

0800c3e8 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	7c1b      	ldrb	r3, [r3, #16]
 800c3f8:	4610      	mov	r0, r2
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	f7ff ffd2 	bl	800c3a4 <XMC_GPIO_SetOutputLow>
}
 800c400:	3708      	adds	r7, #8
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop

0800c408 <CAN_2_ini>:
uint8_t *n_wheel_RR_mpros_LSB, *n_wheel_RR_mpros_MSB;

boolean_T CAN_2_RES = true;

void CAN_2_ini()
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	af00      	add	r7, sp, #0
	//Termination Resistor on CAN 2
	if (CAN_2_RES)
 800c40c:	4b79      	ldr	r3, [pc, #484]	; (800c5f4 <CAN_2_ini+0x1ec>)
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d003      	beq.n	800c41c <CAN_2_ini+0x14>
		DIGITAL_IO_SetOutputHigh (&CAN2_Res);
 800c414:	4878      	ldr	r0, [pc, #480]	; (800c5f8 <CAN_2_ini+0x1f0>)
 800c416:	f7ff ffd7 	bl	800c3c8 <DIGITAL_IO_SetOutputHigh>
 800c41a:	e002      	b.n	800c422 <CAN_2_ini+0x1a>
	else
		DIGITAL_IO_SetOutputLow (&CAN2_Res);
 800c41c:	4876      	ldr	r0, [pc, #472]	; (800c5f8 <CAN_2_ini+0x1f0>)
 800c41e:	f7ff ffe3 	bl	800c3e8 <DIGITAL_IO_SetOutputLow>

	//------ABS 0x80 LM01------
	canData.g_yaw_ABS 			= &g_yaw_ABS;
 800c422:	4b76      	ldr	r3, [pc, #472]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c424:	4a76      	ldr	r2, [pc, #472]	; (800c600 <CAN_2_ini+0x1f8>)
 800c426:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	g_yaw_ABS_LSB				= &VCU_DW.VAR_IN_g_yaw_ABS_LSB;
 800c42a:	4b76      	ldr	r3, [pc, #472]	; (800c604 <CAN_2_ini+0x1fc>)
 800c42c:	4a76      	ldr	r2, [pc, #472]	; (800c608 <CAN_2_ini+0x200>)
 800c42e:	601a      	str	r2, [r3, #0]
	g_yaw_ABS_MSB				= &VCU_DW.VAR_IN_g_long_ABS_MSB;
 800c430:	4b76      	ldr	r3, [pc, #472]	; (800c60c <CAN_2_ini+0x204>)
 800c432:	4a77      	ldr	r2, [pc, #476]	; (800c610 <CAN_2_ini+0x208>)
 800c434:	601a      	str	r2, [r3, #0]
	canData.g_long_ABS			= &g_long_ABS;
 800c436:	4b71      	ldr	r3, [pc, #452]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c438:	4a76      	ldr	r2, [pc, #472]	; (800c614 <CAN_2_ini+0x20c>)
 800c43a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	g_long_ABS_LSB				= &VCU_DW.VAR_IN_g_long_ABS_LSB;
 800c43e:	4b76      	ldr	r3, [pc, #472]	; (800c618 <CAN_2_ini+0x210>)
 800c440:	4a76      	ldr	r2, [pc, #472]	; (800c61c <CAN_2_ini+0x214>)
 800c442:	601a      	str	r2, [r3, #0]
	g_long_ABS_MSB				= &VCU_DW.VAR_IN_g_long_ABS_MSB;
 800c444:	4b76      	ldr	r3, [pc, #472]	; (800c620 <CAN_2_ini+0x218>)
 800c446:	4a72      	ldr	r2, [pc, #456]	; (800c610 <CAN_2_ini+0x208>)
 800c448:	601a      	str	r2, [r3, #0]

	//------ABS 0x5C0 LM02------
	canData.ABS_switchstate_CAN2	= &VCU_DW.VAR_IN_ABS_switchstate;
 800c44a:	4b6c      	ldr	r3, [pc, #432]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c44c:	4a75      	ldr	r2, [pc, #468]	; (800c624 <CAN_2_ini+0x21c>)
 800c44e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	canData.p_brake_F_CAN2			= &p_brake_F;
 800c452:	4b6a      	ldr	r3, [pc, #424]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c454:	4a74      	ldr	r2, [pc, #464]	; (800c628 <CAN_2_ini+0x220>)
 800c456:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	p_brake_F_LSB					= &VCU_DW.VAR_IN_p_brake_F_LSB;
 800c45a:	4b74      	ldr	r3, [pc, #464]	; (800c62c <CAN_2_ini+0x224>)
 800c45c:	4a74      	ldr	r2, [pc, #464]	; (800c630 <CAN_2_ini+0x228>)
 800c45e:	601a      	str	r2, [r3, #0]
	p_brake_F_MSB					= &VCU_DW.VAR_IN_p_brake_F_MSB;
 800c460:	4b74      	ldr	r3, [pc, #464]	; (800c634 <CAN_2_ini+0x22c>)
 800c462:	4a75      	ldr	r2, [pc, #468]	; (800c638 <CAN_2_ini+0x230>)
 800c464:	601a      	str	r2, [r3, #0]
	canData.ABS_BL_swtich_CAN2		= &VCU_DW.VAR_IN_ABS_BL_switch;
 800c466:	4b65      	ldr	r3, [pc, #404]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c468:	4a74      	ldr	r2, [pc, #464]	; (800c63c <CAN_2_ini+0x234>)
 800c46a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	canData.ABS_active_CAN2			= &VCU_DW.VAR_IN_ABS_active;
 800c46e:	4b63      	ldr	r3, [pc, #396]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c470:	4a73      	ldr	r2, [pc, #460]	; (800c640 <CAN_2_ini+0x238>)
 800c472:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	canData.ABS_EBD_lamp_CAN2		= &VCU_DW.VAR_IN_ABS_EBD_Lamp;
 800c476:	4b61      	ldr	r3, [pc, #388]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c478:	4a72      	ldr	r2, [pc, #456]	; (800c644 <CAN_2_ini+0x23c>)
 800c47a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	//------Wheel n 0x140 LM03------
	canData.n_wheel_FL_mpros	= &n_wheel_FL_mpros;
 800c47e:	4b5f      	ldr	r3, [pc, #380]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c480:	4a71      	ldr	r2, [pc, #452]	; (800c648 <CAN_2_ini+0x240>)
 800c482:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	n_wheel_FL_mpros_LSB 		= &VCU_DW.VAR_IN_n_wheel_FL_mpros_LSB;
 800c486:	4b71      	ldr	r3, [pc, #452]	; (800c64c <CAN_2_ini+0x244>)
 800c488:	4a71      	ldr	r2, [pc, #452]	; (800c650 <CAN_2_ini+0x248>)
 800c48a:	601a      	str	r2, [r3, #0]
	n_wheel_FL_mpros_MSB 		= &VCU_DW.VAR_IN_n_wheel_FL_mpros_MSB;
 800c48c:	4b71      	ldr	r3, [pc, #452]	; (800c654 <CAN_2_ini+0x24c>)
 800c48e:	4a72      	ldr	r2, [pc, #456]	; (800c658 <CAN_2_ini+0x250>)
 800c490:	601a      	str	r2, [r3, #0]

	//------Wheel n 0x142 LM04------
	canData.n_wheel_FR_mpros	= &n_wheel_FR_mpros;
 800c492:	4b5a      	ldr	r3, [pc, #360]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c494:	4a71      	ldr	r2, [pc, #452]	; (800c65c <CAN_2_ini+0x254>)
 800c496:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	n_wheel_FR_mpros_LSB 		= &VCU_DW.VAR_IN_n_wheel_FR_mpros_LSB;
 800c49a:	4b71      	ldr	r3, [pc, #452]	; (800c660 <CAN_2_ini+0x258>)
 800c49c:	4a71      	ldr	r2, [pc, #452]	; (800c664 <CAN_2_ini+0x25c>)
 800c49e:	601a      	str	r2, [r3, #0]
	n_wheel_FR_mpros_MSB 		= &VCU_DW.VAR_IN_n_wheel_FR_mpros_MSB;
 800c4a0:	4b71      	ldr	r3, [pc, #452]	; (800c668 <CAN_2_ini+0x260>)
 800c4a2:	4a72      	ldr	r2, [pc, #456]	; (800c66c <CAN_2_ini+0x264>)
 800c4a4:	601a      	str	r2, [r3, #0]

	//------Wheel n 0x340 LM05------
	canData.n_wheel_RL_mpros	= &n_wheel_RL_mpros;
 800c4a6:	4b55      	ldr	r3, [pc, #340]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c4a8:	4a71      	ldr	r2, [pc, #452]	; (800c670 <CAN_2_ini+0x268>)
 800c4aa:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	n_wheel_RL_mpros_LSB 		= &VCU_DW.VAR_IN_n_wheel_RL_mpros_LSB;
 800c4ae:	4b71      	ldr	r3, [pc, #452]	; (800c674 <CAN_2_ini+0x26c>)
 800c4b0:	4a71      	ldr	r2, [pc, #452]	; (800c678 <CAN_2_ini+0x270>)
 800c4b2:	601a      	str	r2, [r3, #0]
	n_wheel_RL_mpros_MSB 		= &VCU_DW.VAR_IN_n_wheel_RL_mpros_MSB;
 800c4b4:	4b71      	ldr	r3, [pc, #452]	; (800c67c <CAN_2_ini+0x274>)
 800c4b6:	4a72      	ldr	r2, [pc, #456]	; (800c680 <CAN_2_ini+0x278>)
 800c4b8:	601a      	str	r2, [r3, #0]

	//------Wheel n 0x342 LM06------
	canData.n_wheel_RR_mpros	= &n_wheel_RR_mpros;
 800c4ba:	4b50      	ldr	r3, [pc, #320]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c4bc:	4a71      	ldr	r2, [pc, #452]	; (800c684 <CAN_2_ini+0x27c>)
 800c4be:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	n_wheel_RR_mpros_LSB 		= &VCU_DW.VAR_IN_n_wheel_RR_mpros_LSB;
 800c4c2:	4b71      	ldr	r3, [pc, #452]	; (800c688 <CAN_2_ini+0x280>)
 800c4c4:	4a71      	ldr	r2, [pc, #452]	; (800c68c <CAN_2_ini+0x284>)
 800c4c6:	601a      	str	r2, [r3, #0]
	n_wheel_RR_mpros_MSB 		= &VCU_DW.VAR_IN_n_wheel_RR_mpros_MSB;
 800c4c8:	4b71      	ldr	r3, [pc, #452]	; (800c690 <CAN_2_ini+0x288>)
 800c4ca:	4a72      	ldr	r2, [pc, #456]	; (800c694 <CAN_2_ini+0x28c>)
 800c4cc:	601a      	str	r2, [r3, #0]
	//BSPD 0x200 LM07

	//BSPD 0x201 LM08

	//Wheelforce 0x7E0 LM09
	canData.f_FL			= &VCU_DW.VAR_OUT_f_FL;
 800c4ce:	4b4b      	ldr	r3, [pc, #300]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c4d0:	4a71      	ldr	r2, [pc, #452]	; (800c698 <CAN_2_ini+0x290>)
 800c4d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	canData.f_FR			= &VCU_DW.VAR_OUT_f_FR;
 800c4d6:	4b49      	ldr	r3, [pc, #292]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c4d8:	4a70      	ldr	r2, [pc, #448]	; (800c69c <CAN_2_ini+0x294>)
 800c4da:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	//canData.f_RL			= (uint16_t*)&VCU_DW.VAR_OUT_f_RL;
	//canData.f_RR			= (uint16_t*)&VCU_DW.VAR_OUT_f_RR;
	canData.TR1_VSense_WP	= &VAR_TR1_VSense_WP;
 800c4de:	4b47      	ldr	r3, [pc, #284]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c4e0:	4a6f      	ldr	r2, [pc, #444]	; (800c6a0 <CAN_2_ini+0x298>)
 800c4e2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	canData.TR2_VSense_FAN1	= &VAR_TR2_VSense_FAN1;
 800c4e6:	4b45      	ldr	r3, [pc, #276]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c4e8:	4a6e      	ldr	r2, [pc, #440]	; (800c6a4 <CAN_2_ini+0x29c>)
 800c4ea:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	canData.TR3_VSense_FAN2	= &VAR_TR3_VSense_FAN2;
 800c4ee:	4b43      	ldr	r3, [pc, #268]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c4f0:	4a6d      	ldr	r2, [pc, #436]	; (800c6a8 <CAN_2_ini+0x2a0>)
 800c4f2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	//Measurement 0x7E2 LM10
	//canData.x_RH_RL			= (uint8_t*)&VCU_DW.VAR_OUT_x_RH_RL;
	//canData.x_RH_RR			= (uint8_t*)&VCU_DW.VAR_OUT_x_RH_RR;
	canData.Brakelight		= &VCU_DW.VAR_OUT_Brakelight;
 800c4f6:	4b41      	ldr	r3, [pc, #260]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c4f8:	4a6c      	ldr	r2, [pc, #432]	; (800c6ac <CAN_2_ini+0x2a4>)
 800c4fa:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	canData.x_RH_F			= &VCU_DW.VAR_OUT_x_RH_F;
 800c4fe:	4b3f      	ldr	r3, [pc, #252]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c500:	4a6b      	ldr	r2, [pc, #428]	; (800c6b0 <CAN_2_ini+0x2a8>)
 800c502:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	canData.x_clutch		= &VCU_DW.VAR_OUT_x_clutch;
 800c506:	4b3d      	ldr	r3, [pc, #244]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c508:	4a6a      	ldr	r2, [pc, #424]	; (800c6b4 <CAN_2_ini+0x2ac>)
 800c50a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	canData.x_clutch_STW	= &VCU_DW.VAR_OUT_x_clutch_STW;
 800c50e:	4b3b      	ldr	r3, [pc, #236]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c510:	4a69      	ldr	r2, [pc, #420]	; (800c6b8 <CAN_2_ini+0x2b0>)
 800c512:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	canData.p_pneu			= &VCU_DW.VAR_OUT_p_pneum;
 800c516:	4b39      	ldr	r3, [pc, #228]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c518:	4a68      	ldr	r2, [pc, #416]	; (800c6bc <CAN_2_ini+0x2b4>)
 800c51a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	canData.U_bat			= &VCU_DW.VAR_OUT_U_Bat;
 800c51e:	4b37      	ldr	r3, [pc, #220]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c520:	4a67      	ldr	r2, [pc, #412]	; (800c6c0 <CAN_2_ini+0x2b8>)
 800c522:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	canData.t_board_VCU		= &VAR_boardTemp;
 800c526:	4b35      	ldr	r3, [pc, #212]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c528:	4a66      	ldr	r2, [pc, #408]	; (800c6c4 <CAN_2_ini+0x2bc>)
 800c52a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	canData.BSD				= &VCU_DW.VAR_OUT_BSD;
 800c52e:	4b33      	ldr	r3, [pc, #204]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c530:	4a65      	ldr	r2, [pc, #404]	; (800c6c8 <CAN_2_ini+0x2c0>)
 800c532:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	//Error 0x7E3 LM11
	canData.plausi_error 	= 0;
 800c536:	4b31      	ldr	r3, [pc, #196]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c538:	f503 71a4 	add.w	r1, r3, #328	; 0x148
 800c53c:	f04f 0200 	mov.w	r2, #0
 800c540:	f04f 0300 	mov.w	r3, #0
 800c544:	e9c1 2300 	strd	r2, r3, [r1]

	//Manual Control 0x7FF LM12
	canData.ManualControl_Active = 0;
 800c548:	4b2c      	ldr	r3, [pc, #176]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c54a:	2200      	movs	r2, #0
 800c54c:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	canData.ManConOn_MHJ9_IN = 0;
 800c550:	4b2a      	ldr	r3, [pc, #168]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c552:	2200      	movs	r2, #0
 800c554:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	canData.ManConOn_MHJ9_OUT = 0;
 800c558:	4b28      	ldr	r3, [pc, #160]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	canData.ManConOn_Waterpump = 0;
 800c560:	4b26      	ldr	r3, [pc, #152]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c562:	2200      	movs	r2, #0
 800c564:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
	canData.ManConOn_Fans1 = 0;
 800c568:	4b24      	ldr	r3, [pc, #144]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c56a:	2200      	movs	r2, #0
 800c56c:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	canData.ManConOn_Fans2 = 0;
 800c570:	4b22      	ldr	r3, [pc, #136]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c572:	2200      	movs	r2, #0
 800c574:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	canData.ManConOn_VOVGShiftDown = 0;
 800c578:	4b20      	ldr	r3, [pc, #128]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c57a:	2200      	movs	r2, #0
 800c57c:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
	canData.ManConOn_VOVGShiftUp = 0;
 800c580:	4b1e      	ldr	r3, [pc, #120]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c582:	2200      	movs	r2, #0
 800c584:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
	canData.ManConOn_IgnCut = 0;
 800c588:	4b1c      	ldr	r3, [pc, #112]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c58a:	2200      	movs	r2, #0
 800c58c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	canData.ManConOn_VOVG_IN = 0;
 800c590:	4b1a      	ldr	r3, [pc, #104]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c592:	2200      	movs	r2, #0
 800c594:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	canData.ManConOn_VOVG_OUT = 0;
 800c598:	4b18      	ldr	r3, [pc, #96]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c59a:	2200      	movs	r2, #0
 800c59c:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
	canData.ManConVar_MHJ9_IN = 0;
 800c5a0:	4b16      	ldr	r3, [pc, #88]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	canData.ManConVar_MHJ9_OUT = 0;
 800c5a8:	4b14      	ldr	r3, [pc, #80]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	canData.ManConVar_Waterpump = 0;
 800c5b0:	4b12      	ldr	r3, [pc, #72]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
	canData.ManConVar_Fans1 = 0;
 800c5b8:	4b10      	ldr	r3, [pc, #64]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	canData.ManConVar_Fans2 = 0;
 800c5c0:	4b0e      	ldr	r3, [pc, #56]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
	canData.ManConVar_VOVGShiftDown = 0;
 800c5c8:	4b0c      	ldr	r3, [pc, #48]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	canData.ManConVar_VOVGShiftUp = 0;
 800c5d0:	4b0a      	ldr	r3, [pc, #40]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
	canData.ManConVar_IgnCut = 0;
 800c5d8:	4b08      	ldr	r3, [pc, #32]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
	canData.ManConVar_VOVG_IN = 0;
 800c5e0:	4b06      	ldr	r3, [pc, #24]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	canData.ManConVar_VOVG_OUT = 0;
 800c5e8:	4b04      	ldr	r3, [pc, #16]	; (800c5fc <CAN_2_ini+0x1f4>)
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
}
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	20000621 	.word	0x20000621
 800c5f8:	0800f8d4 	.word	0x0800f8d4
 800c5fc:	200013c0 	.word	0x200013c0
 800c600:	20000860 	.word	0x20000860
 800c604:	20001338 	.word	0x20001338
 800c608:	20001213 	.word	0x20001213
 800c60c:	20001334 	.word	0x20001334
 800c610:	20001212 	.word	0x20001212
 800c614:	20000862 	.word	0x20000862
 800c618:	2000130c 	.word	0x2000130c
 800c61c:	20001214 	.word	0x20001214
 800c620:	20001320 	.word	0x20001320
 800c624:	200011fa 	.word	0x200011fa
 800c628:	20000864 	.word	0x20000864
 800c62c:	20001318 	.word	0x20001318
 800c630:	200011f8 	.word	0x200011f8
 800c634:	20001324 	.word	0x20001324
 800c638:	200011fb 	.word	0x200011fb
 800c63c:	200011f9 	.word	0x200011f9
 800c640:	200011fd 	.word	0x200011fd
 800c644:	200011fc 	.word	0x200011fc
 800c648:	20000866 	.word	0x20000866
 800c64c:	2000131c 	.word	0x2000131c
 800c650:	20001203 	.word	0x20001203
 800c654:	20001328 	.word	0x20001328
 800c658:	200011ff 	.word	0x200011ff
 800c65c:	20000868 	.word	0x20000868
 800c660:	2000133c 	.word	0x2000133c
 800c664:	20001200 	.word	0x20001200
 800c668:	20001308 	.word	0x20001308
 800c66c:	20001201 	.word	0x20001201
 800c670:	2000086a 	.word	0x2000086a
 800c674:	20001330 	.word	0x20001330
 800c678:	20001202 	.word	0x20001202
 800c67c:	20001310 	.word	0x20001310
 800c680:	20001204 	.word	0x20001204
 800c684:	2000086c 	.word	0x2000086c
 800c688:	2000132c 	.word	0x2000132c
 800c68c:	20001205 	.word	0x20001205
 800c690:	20001314 	.word	0x20001314
 800c694:	20001206 	.word	0x20001206
 800c698:	20001194 	.word	0x20001194
 800c69c:	20001196 	.word	0x20001196
 800c6a0:	200012e0 	.word	0x200012e0
 800c6a4:	20001300 	.word	0x20001300
 800c6a8:	200012d0 	.word	0x200012d0
 800c6ac:	2000122b 	.word	0x2000122b
 800c6b0:	200011f2 	.word	0x200011f2
 800c6b4:	200011f3 	.word	0x200011f3
 800c6b8:	200011f4 	.word	0x200011f4
 800c6bc:	200011f5 	.word	0x200011f5
 800c6c0:	200011f6 	.word	0x200011f6
 800c6c4:	200012f0 	.word	0x200012f0
 800c6c8:	20001227 	.word	0x20001227

0800c6cc <CAN_2_Receive>:

void CAN_2_Receive()
{
 800c6cc:	b598      	push	{r3, r4, r7, lr}
 800c6ce:	af00      	add	r7, sp, #0
	//------ABS 0x80 LM01------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_01_Config);
 800c6d0:	48b5      	ldr	r0, [pc, #724]	; (800c9a8 <CAN_2_Receive+0x2dc>)
 800c6d2:	f7fe ff37 	bl	800b544 <CAN_NODE_MO_Receive>

	*canData.g_yaw_ABS 			= checkRangePlausi(CAN_2_LMO_01_Config.mo_ptr->can_data_word[0],ERR_G_YAW_ABS);
 800c6d6:	4bb5      	ldr	r3, [pc, #724]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c6d8:	f8d3 40d0 	ldr.w	r4, [r3, #208]	; 0xd0
 800c6dc:	4bb2      	ldr	r3, [pc, #712]	; (800c9a8 <CAN_2_Receive+0x2dc>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	8a1b      	ldrh	r3, [r3, #16]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	2103      	movs	r1, #3
 800c6e6:	f000 fc23 	bl	800cf30 <checkRangePlausi>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	8023      	strh	r3, [r4, #0]
	*g_yaw_ABS_LSB				= getbits(*canData.g_yaw_ABS, 7, 8);
 800c6f0:	4baf      	ldr	r3, [pc, #700]	; (800c9b0 <CAN_2_Receive+0x2e4>)
 800c6f2:	681c      	ldr	r4, [r3, #0]
 800c6f4:	4bad      	ldr	r3, [pc, #692]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c6f6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c6fa:	881b      	ldrh	r3, [r3, #0]
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	2107      	movs	r1, #7
 800c700:	2208      	movs	r2, #8
 800c702:	f001 fe37 	bl	800e374 <getbits>
 800c706:	4603      	mov	r3, r0
 800c708:	b2db      	uxtb	r3, r3
 800c70a:	7023      	strb	r3, [r4, #0]
	*g_yaw_ABS_MSB				= getbits(*canData.g_yaw_ABS, 15, 8);
 800c70c:	4ba9      	ldr	r3, [pc, #676]	; (800c9b4 <CAN_2_Receive+0x2e8>)
 800c70e:	681c      	ldr	r4, [r3, #0]
 800c710:	4ba6      	ldr	r3, [pc, #664]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c712:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c716:	881b      	ldrh	r3, [r3, #0]
 800c718:	4618      	mov	r0, r3
 800c71a:	210f      	movs	r1, #15
 800c71c:	2208      	movs	r2, #8
 800c71e:	f001 fe29 	bl	800e374 <getbits>
 800c722:	4603      	mov	r3, r0
 800c724:	b2db      	uxtb	r3, r3
 800c726:	7023      	strb	r3, [r4, #0]
	*canData.g_long_ABS			= checkRangePlausi(CAN_2_LMO_01_Config.mo_ptr->can_data_word[1],ERR_G_LONG_ABS);
 800c728:	4ba0      	ldr	r3, [pc, #640]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c72a:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 800c72e:	4b9e      	ldr	r3, [pc, #632]	; (800c9a8 <CAN_2_Receive+0x2dc>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	8a5b      	ldrh	r3, [r3, #18]
 800c734:	4618      	mov	r0, r3
 800c736:	2102      	movs	r1, #2
 800c738:	f000 fbfa 	bl	800cf30 <checkRangePlausi>
 800c73c:	4603      	mov	r3, r0
 800c73e:	b29b      	uxth	r3, r3
 800c740:	8023      	strh	r3, [r4, #0]
	*g_long_ABS_LSB				= getbits(*canData.g_long_ABS, 7, 8);
 800c742:	4b9d      	ldr	r3, [pc, #628]	; (800c9b8 <CAN_2_Receive+0x2ec>)
 800c744:	681c      	ldr	r4, [r3, #0]
 800c746:	4b99      	ldr	r3, [pc, #612]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c748:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c74c:	881b      	ldrh	r3, [r3, #0]
 800c74e:	4618      	mov	r0, r3
 800c750:	2107      	movs	r1, #7
 800c752:	2208      	movs	r2, #8
 800c754:	f001 fe0e 	bl	800e374 <getbits>
 800c758:	4603      	mov	r3, r0
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	7023      	strb	r3, [r4, #0]
	*g_long_ABS_MSB				= getbits(*canData.g_long_ABS, 15, 8);
 800c75e:	4b97      	ldr	r3, [pc, #604]	; (800c9bc <CAN_2_Receive+0x2f0>)
 800c760:	681c      	ldr	r4, [r3, #0]
 800c762:	4b92      	ldr	r3, [pc, #584]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c764:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c768:	881b      	ldrh	r3, [r3, #0]
 800c76a:	4618      	mov	r0, r3
 800c76c:	210f      	movs	r1, #15
 800c76e:	2208      	movs	r2, #8
 800c770:	f001 fe00 	bl	800e374 <getbits>
 800c774:	4603      	mov	r3, r0
 800c776:	b2db      	uxtb	r3, r3
 800c778:	7023      	strb	r3, [r4, #0]

	//------ABS 0x5C0 LM02------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_02_Config);
 800c77a:	4891      	ldr	r0, [pc, #580]	; (800c9c0 <CAN_2_Receive+0x2f4>)
 800c77c:	f7fe fee2 	bl	800b544 <CAN_NODE_MO_Receive>

	*canData.ABS_switchstate_CAN2	= CAN_2_LMO_02_Config.mo_ptr->can_data_byte[0];
 800c780:	4b8a      	ldr	r3, [pc, #552]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c782:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c786:	4a8e      	ldr	r2, [pc, #568]	; (800c9c0 <CAN_2_Receive+0x2f4>)
 800c788:	6812      	ldr	r2, [r2, #0]
 800c78a:	7c12      	ldrb	r2, [r2, #16]
 800c78c:	701a      	strb	r2, [r3, #0]
	*canData.p_brake_F_CAN2			= checkRangePlausi(getbits(CAN_2_LMO_02_Config.mo_ptr->can_data_long,23,16),ERR_P_BRAKE_F);
 800c78e:	4b87      	ldr	r3, [pc, #540]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c790:	f8d3 40dc 	ldr.w	r4, [r3, #220]	; 0xdc
 800c794:	4b8a      	ldr	r3, [pc, #552]	; (800c9c0 <CAN_2_Receive+0x2f4>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c79c:	4613      	mov	r3, r2
 800c79e:	4618      	mov	r0, r3
 800c7a0:	2117      	movs	r1, #23
 800c7a2:	2210      	movs	r2, #16
 800c7a4:	f001 fde6 	bl	800e374 <getbits>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	210d      	movs	r1, #13
 800c7ae:	f000 fbbf 	bl	800cf30 <checkRangePlausi>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	b29b      	uxth	r3, r3
 800c7b6:	8023      	strh	r3, [r4, #0]
	*p_brake_F_LSB					= getbits(*canData.p_brake_F_CAN2, 7, 8);
 800c7b8:	4b82      	ldr	r3, [pc, #520]	; (800c9c4 <CAN_2_Receive+0x2f8>)
 800c7ba:	681c      	ldr	r4, [r3, #0]
 800c7bc:	4b7b      	ldr	r3, [pc, #492]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c7be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c7c2:	881b      	ldrh	r3, [r3, #0]
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	2107      	movs	r1, #7
 800c7c8:	2208      	movs	r2, #8
 800c7ca:	f001 fdd3 	bl	800e374 <getbits>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	7023      	strb	r3, [r4, #0]
	*p_brake_F_MSB					= getbits(*canData.p_brake_F_CAN2, 15, 8);
 800c7d4:	4b7c      	ldr	r3, [pc, #496]	; (800c9c8 <CAN_2_Receive+0x2fc>)
 800c7d6:	681c      	ldr	r4, [r3, #0]
 800c7d8:	4b74      	ldr	r3, [pc, #464]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c7da:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c7de:	881b      	ldrh	r3, [r3, #0]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	210f      	movs	r1, #15
 800c7e4:	2208      	movs	r2, #8
 800c7e6:	f001 fdc5 	bl	800e374 <getbits>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	7023      	strb	r3, [r4, #0]
	*canData.ABS_BL_swtich_CAN2		= CAN_2_LMO_02_Config.mo_ptr->can_data_byte[3];
 800c7f0:	4b6e      	ldr	r3, [pc, #440]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c7f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c7f6:	4a72      	ldr	r2, [pc, #456]	; (800c9c0 <CAN_2_Receive+0x2f4>)
 800c7f8:	6812      	ldr	r2, [r2, #0]
 800c7fa:	7cd2      	ldrb	r2, [r2, #19]
 800c7fc:	701a      	strb	r2, [r3, #0]
	*canData.ABS_active_CAN2		= CAN_2_LMO_02_Config.mo_ptr->can_data_byte[4];
 800c7fe:	4b6b      	ldr	r3, [pc, #428]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c800:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c804:	4a6e      	ldr	r2, [pc, #440]	; (800c9c0 <CAN_2_Receive+0x2f4>)
 800c806:	6812      	ldr	r2, [r2, #0]
 800c808:	7d12      	ldrb	r2, [r2, #20]
 800c80a:	701a      	strb	r2, [r3, #0]
	*canData.ABS_EBD_lamp_CAN2		= CAN_2_LMO_02_Config.mo_ptr->can_data_byte[5];
 800c80c:	4b67      	ldr	r3, [pc, #412]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c80e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c812:	4a6b      	ldr	r2, [pc, #428]	; (800c9c0 <CAN_2_Receive+0x2f4>)
 800c814:	6812      	ldr	r2, [r2, #0]
 800c816:	7d52      	ldrb	r2, [r2, #21]
 800c818:	701a      	strb	r2, [r3, #0]

	//------Wheel n 0x140 LM03------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_03_Config);
 800c81a:	486c      	ldr	r0, [pc, #432]	; (800c9cc <CAN_2_Receive+0x300>)
 800c81c:	f7fe fe92 	bl	800b544 <CAN_NODE_MO_Receive>

	*canData.n_wheel_FL_mpros	= checkRangePlausi(CAN_2_LMO_03_Config.mo_ptr->can_data_word[0],ERR_N_WHEEL_FL);
 800c820:	4b62      	ldr	r3, [pc, #392]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c822:	f8d3 40f0 	ldr.w	r4, [r3, #240]	; 0xf0
 800c826:	4b69      	ldr	r3, [pc, #420]	; (800c9cc <CAN_2_Receive+0x300>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	8a1b      	ldrh	r3, [r3, #16]
 800c82c:	4618      	mov	r0, r3
 800c82e:	2107      	movs	r1, #7
 800c830:	f000 fb7e 	bl	800cf30 <checkRangePlausi>
 800c834:	4603      	mov	r3, r0
 800c836:	b29b      	uxth	r3, r3
 800c838:	8023      	strh	r3, [r4, #0]
	*n_wheel_FL_mpros_LSB		= getbits(*canData.n_wheel_FL_mpros, 7, 8);
 800c83a:	4b65      	ldr	r3, [pc, #404]	; (800c9d0 <CAN_2_Receive+0x304>)
 800c83c:	681c      	ldr	r4, [r3, #0]
 800c83e:	4b5b      	ldr	r3, [pc, #364]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c844:	881b      	ldrh	r3, [r3, #0]
 800c846:	4618      	mov	r0, r3
 800c848:	2107      	movs	r1, #7
 800c84a:	2208      	movs	r2, #8
 800c84c:	f001 fd92 	bl	800e374 <getbits>
 800c850:	4603      	mov	r3, r0
 800c852:	b2db      	uxtb	r3, r3
 800c854:	7023      	strb	r3, [r4, #0]
	*n_wheel_FL_mpros_MSB		= getbits(*canData.n_wheel_FL_mpros, 15, 8);
 800c856:	4b5f      	ldr	r3, [pc, #380]	; (800c9d4 <CAN_2_Receive+0x308>)
 800c858:	681c      	ldr	r4, [r3, #0]
 800c85a:	4b54      	ldr	r3, [pc, #336]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c85c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c860:	881b      	ldrh	r3, [r3, #0]
 800c862:	4618      	mov	r0, r3
 800c864:	210f      	movs	r1, #15
 800c866:	2208      	movs	r2, #8
 800c868:	f001 fd84 	bl	800e374 <getbits>
 800c86c:	4603      	mov	r3, r0
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	7023      	strb	r3, [r4, #0]

	//------Wheel n 0x142 LM04------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_04_Config);
 800c872:	4859      	ldr	r0, [pc, #356]	; (800c9d8 <CAN_2_Receive+0x30c>)
 800c874:	f7fe fe66 	bl	800b544 <CAN_NODE_MO_Receive>

	*canData.n_wheel_FR_mpros	= checkRangePlausi(CAN_2_LMO_04_Config.mo_ptr->can_data_word[0],ERR_N_WHEEL_FR);
 800c878:	4b4c      	ldr	r3, [pc, #304]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c87a:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
 800c87e:	4b56      	ldr	r3, [pc, #344]	; (800c9d8 <CAN_2_Receive+0x30c>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	8a1b      	ldrh	r3, [r3, #16]
 800c884:	4618      	mov	r0, r3
 800c886:	2108      	movs	r1, #8
 800c888:	f000 fb52 	bl	800cf30 <checkRangePlausi>
 800c88c:	4603      	mov	r3, r0
 800c88e:	b29b      	uxth	r3, r3
 800c890:	8023      	strh	r3, [r4, #0]
	*n_wheel_FR_mpros_LSB		= getbits(*canData.n_wheel_FR_mpros, 7, 8);
 800c892:	4b52      	ldr	r3, [pc, #328]	; (800c9dc <CAN_2_Receive+0x310>)
 800c894:	681c      	ldr	r4, [r3, #0]
 800c896:	4b45      	ldr	r3, [pc, #276]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c89c:	881b      	ldrh	r3, [r3, #0]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	2107      	movs	r1, #7
 800c8a2:	2208      	movs	r2, #8
 800c8a4:	f001 fd66 	bl	800e374 <getbits>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	7023      	strb	r3, [r4, #0]
	*n_wheel_FR_mpros_MSB		= getbits(*canData.n_wheel_FR_mpros, 15, 8);
 800c8ae:	4b4c      	ldr	r3, [pc, #304]	; (800c9e0 <CAN_2_Receive+0x314>)
 800c8b0:	681c      	ldr	r4, [r3, #0]
 800c8b2:	4b3e      	ldr	r3, [pc, #248]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c8b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c8b8:	881b      	ldrh	r3, [r3, #0]
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	210f      	movs	r1, #15
 800c8be:	2208      	movs	r2, #8
 800c8c0:	f001 fd58 	bl	800e374 <getbits>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	7023      	strb	r3, [r4, #0]

	//------Wheel n 0x340 LM05------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_05_Config);
 800c8ca:	4846      	ldr	r0, [pc, #280]	; (800c9e4 <CAN_2_Receive+0x318>)
 800c8cc:	f7fe fe3a 	bl	800b544 <CAN_NODE_MO_Receive>

	*canData.n_wheel_RL_mpros	= checkRangePlausi(CAN_2_LMO_05_Config.mo_ptr->can_data_word[0],ERR_N_WHEEL_RL);
 800c8d0:	4b36      	ldr	r3, [pc, #216]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c8d2:	f8d3 40f8 	ldr.w	r4, [r3, #248]	; 0xf8
 800c8d6:	4b43      	ldr	r3, [pc, #268]	; (800c9e4 <CAN_2_Receive+0x318>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	8a1b      	ldrh	r3, [r3, #16]
 800c8dc:	4618      	mov	r0, r3
 800c8de:	2109      	movs	r1, #9
 800c8e0:	f000 fb26 	bl	800cf30 <checkRangePlausi>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	8023      	strh	r3, [r4, #0]
	*n_wheel_RL_mpros_LSB		= getbits(*canData.n_wheel_RL_mpros, 7, 8);
 800c8ea:	4b3f      	ldr	r3, [pc, #252]	; (800c9e8 <CAN_2_Receive+0x31c>)
 800c8ec:	681c      	ldr	r4, [r3, #0]
 800c8ee:	4b2f      	ldr	r3, [pc, #188]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c8f0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c8f4:	881b      	ldrh	r3, [r3, #0]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	2107      	movs	r1, #7
 800c8fa:	2208      	movs	r2, #8
 800c8fc:	f001 fd3a 	bl	800e374 <getbits>
 800c900:	4603      	mov	r3, r0
 800c902:	b2db      	uxtb	r3, r3
 800c904:	7023      	strb	r3, [r4, #0]
	*n_wheel_RL_mpros_MSB		= getbits(*canData.n_wheel_RL_mpros, 15, 8);
 800c906:	4b39      	ldr	r3, [pc, #228]	; (800c9ec <CAN_2_Receive+0x320>)
 800c908:	681c      	ldr	r4, [r3, #0]
 800c90a:	4b28      	ldr	r3, [pc, #160]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c90c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c910:	881b      	ldrh	r3, [r3, #0]
 800c912:	4618      	mov	r0, r3
 800c914:	210f      	movs	r1, #15
 800c916:	2208      	movs	r2, #8
 800c918:	f001 fd2c 	bl	800e374 <getbits>
 800c91c:	4603      	mov	r3, r0
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	7023      	strb	r3, [r4, #0]

	//------Wheel n 0x342 LM06------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_06_Config);
 800c922:	4833      	ldr	r0, [pc, #204]	; (800c9f0 <CAN_2_Receive+0x324>)
 800c924:	f7fe fe0e 	bl	800b544 <CAN_NODE_MO_Receive>

	*canData.n_wheel_RR_mpros	= checkRangePlausi(CAN_2_LMO_06_Config.mo_ptr->can_data_word[0],ERR_N_WHEEL_RR);
 800c928:	4b20      	ldr	r3, [pc, #128]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c92a:	f8d3 40fc 	ldr.w	r4, [r3, #252]	; 0xfc
 800c92e:	4b30      	ldr	r3, [pc, #192]	; (800c9f0 <CAN_2_Receive+0x324>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	8a1b      	ldrh	r3, [r3, #16]
 800c934:	4618      	mov	r0, r3
 800c936:	210a      	movs	r1, #10
 800c938:	f000 fafa 	bl	800cf30 <checkRangePlausi>
 800c93c:	4603      	mov	r3, r0
 800c93e:	b29b      	uxth	r3, r3
 800c940:	8023      	strh	r3, [r4, #0]
	*n_wheel_RR_mpros_LSB		= getbits(*canData.n_wheel_RR_mpros, 7, 8);
 800c942:	4b2c      	ldr	r3, [pc, #176]	; (800c9f4 <CAN_2_Receive+0x328>)
 800c944:	681c      	ldr	r4, [r3, #0]
 800c946:	4b19      	ldr	r3, [pc, #100]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c948:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c94c:	881b      	ldrh	r3, [r3, #0]
 800c94e:	4618      	mov	r0, r3
 800c950:	2107      	movs	r1, #7
 800c952:	2208      	movs	r2, #8
 800c954:	f001 fd0e 	bl	800e374 <getbits>
 800c958:	4603      	mov	r3, r0
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	7023      	strb	r3, [r4, #0]
	*n_wheel_RR_mpros_MSB		= getbits(*canData.n_wheel_RR_mpros, 15, 8);
 800c95e:	4b26      	ldr	r3, [pc, #152]	; (800c9f8 <CAN_2_Receive+0x32c>)
 800c960:	681c      	ldr	r4, [r3, #0]
 800c962:	4b12      	ldr	r3, [pc, #72]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c964:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c968:	881b      	ldrh	r3, [r3, #0]
 800c96a:	4618      	mov	r0, r3
 800c96c:	210f      	movs	r1, #15
 800c96e:	2208      	movs	r2, #8
 800c970:	f001 fd00 	bl	800e374 <getbits>
 800c974:	4603      	mov	r3, r0
 800c976:	b2db      	uxtb	r3, r3
 800c978:	7023      	strb	r3, [r4, #0]

	//------Manual Control 0x7FF LM12------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_12_Config);
 800c97a:	4820      	ldr	r0, [pc, #128]	; (800c9fc <CAN_2_Receive+0x330>)
 800c97c:	f7fe fde2 	bl	800b544 <CAN_NODE_MO_Receive>
	canData.ManualControl_Active = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[7],7,1);
 800c980:	4b1e      	ldr	r3, [pc, #120]	; (800c9fc <CAN_2_Receive+0x330>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	7ddb      	ldrb	r3, [r3, #23]
 800c986:	4618      	mov	r0, r3
 800c988:	2107      	movs	r1, #7
 800c98a:	2201      	movs	r2, #1
 800c98c:	f001 fcf2 	bl	800e374 <getbits>
 800c990:	4603      	mov	r3, r0
 800c992:	b2da      	uxtb	r2, r3
 800c994:	4b05      	ldr	r3, [pc, #20]	; (800c9ac <CAN_2_Receive+0x2e0>)
 800c996:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	canData.ManConOn_MHJ9_IN = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[0],0,1);
 800c99a:	4b18      	ldr	r3, [pc, #96]	; (800c9fc <CAN_2_Receive+0x330>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	7c1b      	ldrb	r3, [r3, #16]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	e02b      	b.n	800ca00 <CAN_2_Receive+0x334>
 800c9a8:	0800fa84 	.word	0x0800fa84
 800c9ac:	200013c0 	.word	0x200013c0
 800c9b0:	20001338 	.word	0x20001338
 800c9b4:	20001334 	.word	0x20001334
 800c9b8:	2000130c 	.word	0x2000130c
 800c9bc:	20001320 	.word	0x20001320
 800c9c0:	0800fa90 	.word	0x0800fa90
 800c9c4:	20001318 	.word	0x20001318
 800c9c8:	20001324 	.word	0x20001324
 800c9cc:	0800fa9c 	.word	0x0800fa9c
 800c9d0:	2000131c 	.word	0x2000131c
 800c9d4:	20001328 	.word	0x20001328
 800c9d8:	0800faa8 	.word	0x0800faa8
 800c9dc:	2000133c 	.word	0x2000133c
 800c9e0:	20001308 	.word	0x20001308
 800c9e4:	0800fab4 	.word	0x0800fab4
 800c9e8:	20001330 	.word	0x20001330
 800c9ec:	20001310 	.word	0x20001310
 800c9f0:	0800fac0 	.word	0x0800fac0
 800c9f4:	2000132c 	.word	0x2000132c
 800c9f8:	20001314 	.word	0x20001314
 800c9fc:	0800fb08 	.word	0x0800fb08
 800ca00:	f001 fcb8 	bl	800e374 <getbits>
 800ca04:	4603      	mov	r3, r0
 800ca06:	b2da      	uxtb	r2, r3
 800ca08:	4b7d      	ldr	r3, [pc, #500]	; (800cc00 <CAN_2_Receive+0x534>)
 800ca0a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	canData.ManConOn_MHJ9_OUT = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[1],0,1);
 800ca0e:	4b7d      	ldr	r3, [pc, #500]	; (800cc04 <CAN_2_Receive+0x538>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	7c5b      	ldrb	r3, [r3, #17]
 800ca14:	4618      	mov	r0, r3
 800ca16:	2100      	movs	r1, #0
 800ca18:	2201      	movs	r2, #1
 800ca1a:	f001 fcab 	bl	800e374 <getbits>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	b2da      	uxtb	r2, r3
 800ca22:	4b77      	ldr	r3, [pc, #476]	; (800cc00 <CAN_2_Receive+0x534>)
 800ca24:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	canData.ManConOn_Waterpump = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[2],0,1);
 800ca28:	4b76      	ldr	r3, [pc, #472]	; (800cc04 <CAN_2_Receive+0x538>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	7c9b      	ldrb	r3, [r3, #18]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	2100      	movs	r1, #0
 800ca32:	2201      	movs	r2, #1
 800ca34:	f001 fc9e 	bl	800e374 <getbits>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	4b70      	ldr	r3, [pc, #448]	; (800cc00 <CAN_2_Receive+0x534>)
 800ca3e:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
	canData.ManConOn_Fans1 = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[3],0,1);
 800ca42:	4b70      	ldr	r3, [pc, #448]	; (800cc04 <CAN_2_Receive+0x538>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	7cdb      	ldrb	r3, [r3, #19]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	f001 fc91 	bl	800e374 <getbits>
 800ca52:	4603      	mov	r3, r0
 800ca54:	b2da      	uxtb	r2, r3
 800ca56:	4b6a      	ldr	r3, [pc, #424]	; (800cc00 <CAN_2_Receive+0x534>)
 800ca58:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	canData.ManConOn_Fans2 = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[4],0,1);
 800ca5c:	4b69      	ldr	r3, [pc, #420]	; (800cc04 <CAN_2_Receive+0x538>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	7d1b      	ldrb	r3, [r3, #20]
 800ca62:	4618      	mov	r0, r3
 800ca64:	2100      	movs	r1, #0
 800ca66:	2201      	movs	r2, #1
 800ca68:	f001 fc84 	bl	800e374 <getbits>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	b2da      	uxtb	r2, r3
 800ca70:	4b63      	ldr	r3, [pc, #396]	; (800cc00 <CAN_2_Receive+0x534>)
 800ca72:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	canData.ManConOn_VOVGShiftUp = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],0,1);
 800ca76:	4b63      	ldr	r3, [pc, #396]	; (800cc04 <CAN_2_Receive+0x538>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	7d5b      	ldrb	r3, [r3, #21]
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	2100      	movs	r1, #0
 800ca80:	2201      	movs	r2, #1
 800ca82:	f001 fc77 	bl	800e374 <getbits>
 800ca86:	4603      	mov	r3, r0
 800ca88:	b2da      	uxtb	r2, r3
 800ca8a:	4b5d      	ldr	r3, [pc, #372]	; (800cc00 <CAN_2_Receive+0x534>)
 800ca8c:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
	canData.ManConOn_VOVGShiftDown = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],2,1);
 800ca90:	4b5c      	ldr	r3, [pc, #368]	; (800cc04 <CAN_2_Receive+0x538>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	7d5b      	ldrb	r3, [r3, #21]
 800ca96:	4618      	mov	r0, r3
 800ca98:	2102      	movs	r1, #2
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f001 fc6a 	bl	800e374 <getbits>
 800caa0:	4603      	mov	r3, r0
 800caa2:	b2da      	uxtb	r2, r3
 800caa4:	4b56      	ldr	r3, [pc, #344]	; (800cc00 <CAN_2_Receive+0x534>)
 800caa6:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
	canData.ManConOn_IgnCut = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],4,1);
 800caaa:	4b56      	ldr	r3, [pc, #344]	; (800cc04 <CAN_2_Receive+0x538>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	7d5b      	ldrb	r3, [r3, #21]
 800cab0:	4618      	mov	r0, r3
 800cab2:	2104      	movs	r1, #4
 800cab4:	2201      	movs	r2, #1
 800cab6:	f001 fc5d 	bl	800e374 <getbits>
 800caba:	4603      	mov	r3, r0
 800cabc:	b2da      	uxtb	r2, r3
 800cabe:	4b50      	ldr	r3, [pc, #320]	; (800cc00 <CAN_2_Receive+0x534>)
 800cac0:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	canData.ManConOn_VOVG_IN = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],6,1);
 800cac4:	4b4f      	ldr	r3, [pc, #316]	; (800cc04 <CAN_2_Receive+0x538>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	7d5b      	ldrb	r3, [r3, #21]
 800caca:	4618      	mov	r0, r3
 800cacc:	2106      	movs	r1, #6
 800cace:	2201      	movs	r2, #1
 800cad0:	f001 fc50 	bl	800e374 <getbits>
 800cad4:	4603      	mov	r3, r0
 800cad6:	b2da      	uxtb	r2, r3
 800cad8:	4b49      	ldr	r3, [pc, #292]	; (800cc00 <CAN_2_Receive+0x534>)
 800cada:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	canData.ManConOn_VOVG_OUT = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[6],0,1);
 800cade:	4b49      	ldr	r3, [pc, #292]	; (800cc04 <CAN_2_Receive+0x538>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	7d9b      	ldrb	r3, [r3, #22]
 800cae4:	4618      	mov	r0, r3
 800cae6:	2100      	movs	r1, #0
 800cae8:	2201      	movs	r2, #1
 800caea:	f001 fc43 	bl	800e374 <getbits>
 800caee:	4603      	mov	r3, r0
 800caf0:	b2da      	uxtb	r2, r3
 800caf2:	4b43      	ldr	r3, [pc, #268]	; (800cc00 <CAN_2_Receive+0x534>)
 800caf4:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
	canData.ManConVar_MHJ9_IN = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[0],7,7);
 800caf8:	4b42      	ldr	r3, [pc, #264]	; (800cc04 <CAN_2_Receive+0x538>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	7c1b      	ldrb	r3, [r3, #16]
 800cafe:	4618      	mov	r0, r3
 800cb00:	2107      	movs	r1, #7
 800cb02:	2207      	movs	r2, #7
 800cb04:	f001 fc36 	bl	800e374 <getbits>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	b2da      	uxtb	r2, r3
 800cb0c:	4b3c      	ldr	r3, [pc, #240]	; (800cc00 <CAN_2_Receive+0x534>)
 800cb0e:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	canData.ManConVar_MHJ9_OUT = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[1],7,7);
 800cb12:	4b3c      	ldr	r3, [pc, #240]	; (800cc04 <CAN_2_Receive+0x538>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	7c5b      	ldrb	r3, [r3, #17]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	2107      	movs	r1, #7
 800cb1c:	2207      	movs	r2, #7
 800cb1e:	f001 fc29 	bl	800e374 <getbits>
 800cb22:	4603      	mov	r3, r0
 800cb24:	b2da      	uxtb	r2, r3
 800cb26:	4b36      	ldr	r3, [pc, #216]	; (800cc00 <CAN_2_Receive+0x534>)
 800cb28:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	canData.ManConVar_Waterpump = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[2],7,7);
 800cb2c:	4b35      	ldr	r3, [pc, #212]	; (800cc04 <CAN_2_Receive+0x538>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	7c9b      	ldrb	r3, [r3, #18]
 800cb32:	4618      	mov	r0, r3
 800cb34:	2107      	movs	r1, #7
 800cb36:	2207      	movs	r2, #7
 800cb38:	f001 fc1c 	bl	800e374 <getbits>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	4b2f      	ldr	r3, [pc, #188]	; (800cc00 <CAN_2_Receive+0x534>)
 800cb42:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
	canData.ManConVar_Fans1 = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[3],7,7);
 800cb46:	4b2f      	ldr	r3, [pc, #188]	; (800cc04 <CAN_2_Receive+0x538>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	7cdb      	ldrb	r3, [r3, #19]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	2107      	movs	r1, #7
 800cb50:	2207      	movs	r2, #7
 800cb52:	f001 fc0f 	bl	800e374 <getbits>
 800cb56:	4603      	mov	r3, r0
 800cb58:	b2da      	uxtb	r2, r3
 800cb5a:	4b29      	ldr	r3, [pc, #164]	; (800cc00 <CAN_2_Receive+0x534>)
 800cb5c:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	canData.ManConVar_Fans2 = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[4],7,7);
 800cb60:	4b28      	ldr	r3, [pc, #160]	; (800cc04 <CAN_2_Receive+0x538>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	7d1b      	ldrb	r3, [r3, #20]
 800cb66:	4618      	mov	r0, r3
 800cb68:	2107      	movs	r1, #7
 800cb6a:	2207      	movs	r2, #7
 800cb6c:	f001 fc02 	bl	800e374 <getbits>
 800cb70:	4603      	mov	r3, r0
 800cb72:	b2da      	uxtb	r2, r3
 800cb74:	4b22      	ldr	r3, [pc, #136]	; (800cc00 <CAN_2_Receive+0x534>)
 800cb76:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
	canData.ManConVar_VOVGShiftUp = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],1,1);
 800cb7a:	4b22      	ldr	r3, [pc, #136]	; (800cc04 <CAN_2_Receive+0x538>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	7d5b      	ldrb	r3, [r3, #21]
 800cb80:	4618      	mov	r0, r3
 800cb82:	2101      	movs	r1, #1
 800cb84:	2201      	movs	r2, #1
 800cb86:	f001 fbf5 	bl	800e374 <getbits>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	b2da      	uxtb	r2, r3
 800cb8e:	4b1c      	ldr	r3, [pc, #112]	; (800cc00 <CAN_2_Receive+0x534>)
 800cb90:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
	canData.ManConVar_VOVGShiftDown = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],3,1);
 800cb94:	4b1b      	ldr	r3, [pc, #108]	; (800cc04 <CAN_2_Receive+0x538>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	7d5b      	ldrb	r3, [r3, #21]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	2103      	movs	r1, #3
 800cb9e:	2201      	movs	r2, #1
 800cba0:	f001 fbe8 	bl	800e374 <getbits>
 800cba4:	4603      	mov	r3, r0
 800cba6:	b2da      	uxtb	r2, r3
 800cba8:	4b15      	ldr	r3, [pc, #84]	; (800cc00 <CAN_2_Receive+0x534>)
 800cbaa:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	canData.ManConVar_IgnCut = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],5,1);
 800cbae:	4b15      	ldr	r3, [pc, #84]	; (800cc04 <CAN_2_Receive+0x538>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	7d5b      	ldrb	r3, [r3, #21]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	2105      	movs	r1, #5
 800cbb8:	2201      	movs	r2, #1
 800cbba:	f001 fbdb 	bl	800e374 <getbits>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	b2da      	uxtb	r2, r3
 800cbc2:	4b0f      	ldr	r3, [pc, #60]	; (800cc00 <CAN_2_Receive+0x534>)
 800cbc4:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
	canData.ManConVar_VOVG_IN = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],7,1);
 800cbc8:	4b0e      	ldr	r3, [pc, #56]	; (800cc04 <CAN_2_Receive+0x538>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	7d5b      	ldrb	r3, [r3, #21]
 800cbce:	4618      	mov	r0, r3
 800cbd0:	2107      	movs	r1, #7
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	f001 fbce 	bl	800e374 <getbits>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	b2da      	uxtb	r2, r3
 800cbdc:	4b08      	ldr	r3, [pc, #32]	; (800cc00 <CAN_2_Receive+0x534>)
 800cbde:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	canData.ManConVar_VOVG_OUT = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],9,1);
 800cbe2:	4b08      	ldr	r3, [pc, #32]	; (800cc04 <CAN_2_Receive+0x538>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	7d5b      	ldrb	r3, [r3, #21]
 800cbe8:	4618      	mov	r0, r3
 800cbea:	2109      	movs	r1, #9
 800cbec:	2201      	movs	r2, #1
 800cbee:	f001 fbc1 	bl	800e374 <getbits>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	b2da      	uxtb	r2, r3
 800cbf6:	4b02      	ldr	r3, [pc, #8]	; (800cc00 <CAN_2_Receive+0x534>)
 800cbf8:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
}
 800cbfc:	bd98      	pop	{r3, r4, r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	200013c0 	.word	0x200013c0
 800cc04:	0800fb08 	.word	0x0800fb08

0800cc08 <CAN_2_Transmit>:

void CAN_2_Transmit()
{
 800cc08:	b590      	push	{r4, r7, lr}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
	//Wheelforce 0x7E0 LM09
	CAN2_data_Tx_LM09[0] = getbits(*canData.f_FL,7,8);
 800cc0e:	4b6c      	ldr	r3, [pc, #432]	; (800cdc0 <CAN_2_Transmit+0x1b8>)
 800cc10:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800cc14:	881b      	ldrh	r3, [r3, #0]
 800cc16:	4618      	mov	r0, r3
 800cc18:	2107      	movs	r1, #7
 800cc1a:	2208      	movs	r2, #8
 800cc1c:	f001 fbaa 	bl	800e374 <getbits>
 800cc20:	4603      	mov	r3, r0
 800cc22:	b2da      	uxtb	r2, r3
 800cc24:	4b67      	ldr	r3, [pc, #412]	; (800cdc4 <CAN_2_Transmit+0x1bc>)
 800cc26:	701a      	strb	r2, [r3, #0]
	CAN2_data_Tx_LM09[1] = getbits(*canData.f_FL,15,8);
 800cc28:	4b65      	ldr	r3, [pc, #404]	; (800cdc0 <CAN_2_Transmit+0x1b8>)
 800cc2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800cc2e:	881b      	ldrh	r3, [r3, #0]
 800cc30:	4618      	mov	r0, r3
 800cc32:	210f      	movs	r1, #15
 800cc34:	2208      	movs	r2, #8
 800cc36:	f001 fb9d 	bl	800e374 <getbits>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	b2da      	uxtb	r2, r3
 800cc3e:	4b61      	ldr	r3, [pc, #388]	; (800cdc4 <CAN_2_Transmit+0x1bc>)
 800cc40:	705a      	strb	r2, [r3, #1]
	CAN2_data_Tx_LM09[2] = getbits(*canData.f_FR,7,8);
 800cc42:	4b5f      	ldr	r3, [pc, #380]	; (800cdc0 <CAN_2_Transmit+0x1b8>)
 800cc44:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800cc48:	881b      	ldrh	r3, [r3, #0]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	2107      	movs	r1, #7
 800cc4e:	2208      	movs	r2, #8
 800cc50:	f001 fb90 	bl	800e374 <getbits>
 800cc54:	4603      	mov	r3, r0
 800cc56:	b2da      	uxtb	r2, r3
 800cc58:	4b5a      	ldr	r3, [pc, #360]	; (800cdc4 <CAN_2_Transmit+0x1bc>)
 800cc5a:	709a      	strb	r2, [r3, #2]
	CAN2_data_Tx_LM09[3] = getbits(*canData.f_FR,15,8);
 800cc5c:	4b58      	ldr	r3, [pc, #352]	; (800cdc0 <CAN_2_Transmit+0x1b8>)
 800cc5e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800cc62:	881b      	ldrh	r3, [r3, #0]
 800cc64:	4618      	mov	r0, r3
 800cc66:	210f      	movs	r1, #15
 800cc68:	2208      	movs	r2, #8
 800cc6a:	f001 fb83 	bl	800e374 <getbits>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	b2da      	uxtb	r2, r3
 800cc72:	4b54      	ldr	r3, [pc, #336]	; (800cdc4 <CAN_2_Transmit+0x1bc>)
 800cc74:	70da      	strb	r2, [r3, #3]
	CAN2_data_Tx_LM09[4] = (uint8_t)(*canData.TR1_VSense_WP);
 800cc76:	4b52      	ldr	r3, [pc, #328]	; (800cdc0 <CAN_2_Transmit+0x1b8>)
 800cc78:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800cc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc80:	4610      	mov	r0, r2
 800cc82:	4619      	mov	r1, r3
 800cc84:	f002 fac2 	bl	800f20c <__aeabi_d2uiz>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	b2da      	uxtb	r2, r3
 800cc8c:	4b4d      	ldr	r3, [pc, #308]	; (800cdc4 <CAN_2_Transmit+0x1bc>)
 800cc8e:	711a      	strb	r2, [r3, #4]
	CAN2_data_Tx_LM09[5] = (uint8_t)(*canData.TR2_VSense_FAN1);
 800cc90:	4b4b      	ldr	r3, [pc, #300]	; (800cdc0 <CAN_2_Transmit+0x1b8>)
 800cc92:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9a:	4610      	mov	r0, r2
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	f002 fab5 	bl	800f20c <__aeabi_d2uiz>
 800cca2:	4603      	mov	r3, r0
 800cca4:	b2da      	uxtb	r2, r3
 800cca6:	4b47      	ldr	r3, [pc, #284]	; (800cdc4 <CAN_2_Transmit+0x1bc>)
 800cca8:	715a      	strb	r2, [r3, #5]
	CAN2_data_Tx_LM09[6] = (uint8_t)(*canData.TR3_VSense_FAN2);
 800ccaa:	4b45      	ldr	r3, [pc, #276]	; (800cdc0 <CAN_2_Transmit+0x1b8>)
 800ccac:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb4:	4610      	mov	r0, r2
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	f002 faa8 	bl	800f20c <__aeabi_d2uiz>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	b2da      	uxtb	r2, r3
 800ccc0:	4b40      	ldr	r3, [pc, #256]	; (800cdc4 <CAN_2_Transmit+0x1bc>)
 800ccc2:	719a      	strb	r2, [r3, #6]
	//CAN2_data_Tx_LM09[4] = getbits(*canData.f_RL,7,8);
	//CAN2_data_Tx_LM09[5] = getbits(*canData.f_RL,15,8);
	//CAN2_data_Tx_LM09[6] = getbits(*canData.f_RR,7,8);
	//CAN2_data_Tx_LM09[7] = getbits(*canData.f_RR,15,8);

	CAN_NODE_MO_UpdateData(&CAN_2_LMO_09_Config, CAN2_data_Tx_LM09);
 800ccc4:	4840      	ldr	r0, [pc, #256]	; (800cdc8 <CAN_2_Transmit+0x1c0>)
 800ccc6:	493f      	ldr	r1, [pc, #252]	; (800cdc4 <CAN_2_Transmit+0x1bc>)
 800ccc8:	f7fe fc4e 	bl	800b568 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_2_LMO_09_Config);
 800cccc:	483e      	ldr	r0, [pc, #248]	; (800cdc8 <CAN_2_Transmit+0x1c0>)
 800ccce:	f7fe fc27 	bl	800b520 <CAN_NODE_MO_Transmit>

	//Measurement 0x7E2 LM10
	//CAN2_data_Tx_LM10[0] = *canData.x_RH_RL;
	//CAN2_data_Tx_LM10[1] = *canData.x_RH_RR;
	CAN2_data_Tx_LM10[0] = *canData.Brakelight << 7;
 800ccd2:	4b3b      	ldr	r3, [pc, #236]	; (800cdc0 <CAN_2_Transmit+0x1b8>)
 800ccd4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	01db      	lsls	r3, r3, #7
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	4b3b      	ldr	r3, [pc, #236]	; (800cdcc <CAN_2_Transmit+0x1c4>)
 800cce0:	701a      	strb	r2, [r3, #0]
	CAN2_data_Tx_LM10[1] = (uint8_t)(*canData.t_board_VCU / 0.6);
 800cce2:	4b37      	ldr	r3, [pc, #220]	; (800cdc0 <CAN_2_Transmit+0x1b8>)
 800cce4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800cce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccec:	4610      	mov	r0, r2
 800ccee:	4619      	mov	r1, r3
 800ccf0:	a331      	add	r3, pc, #196	; (adr r3, 800cdb8 <CAN_2_Transmit+0x1b0>)
 800ccf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf6:	f002 f919 	bl	800ef2c <__aeabi_ddiv>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	4610      	mov	r0, r2
 800cd00:	4619      	mov	r1, r3
 800cd02:	f002 fa83 	bl	800f20c <__aeabi_d2uiz>
 800cd06:	4603      	mov	r3, r0
 800cd08:	b2da      	uxtb	r2, r3
 800cd0a:	4b30      	ldr	r3, [pc, #192]	; (800cdcc <CAN_2_Transmit+0x1c4>)
 800cd0c:	705a      	strb	r2, [r3, #1]
	CAN2_data_Tx_LM10[2] = *canData.x_RH_F;
 800cd0e:	4b2c      	ldr	r3, [pc, #176]	; (800cdc0 <CAN_2_Transmit+0x1b8>)
 800cd10:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800cd14:	781a      	ldrb	r2, [r3, #0]
 800cd16:	4b2d      	ldr	r3, [pc, #180]	; (800cdcc <CAN_2_Transmit+0x1c4>)
 800cd18:	709a      	strb	r2, [r3, #2]
	CAN2_data_Tx_LM10[3] = *canData.x_clutch;
 800cd1a:	4b29      	ldr	r3, [pc, #164]	; (800cdc0 <CAN_2_Transmit+0x1b8>)
 800cd1c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800cd20:	781a      	ldrb	r2, [r3, #0]
 800cd22:	4b2a      	ldr	r3, [pc, #168]	; (800cdcc <CAN_2_Transmit+0x1c4>)
 800cd24:	70da      	strb	r2, [r3, #3]
	CAN2_data_Tx_LM10[4] = *canData.x_clutch_STW;
 800cd26:	4b26      	ldr	r3, [pc, #152]	; (800cdc0 <CAN_2_Transmit+0x1b8>)
 800cd28:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800cd2c:	781a      	ldrb	r2, [r3, #0]
 800cd2e:	4b27      	ldr	r3, [pc, #156]	; (800cdcc <CAN_2_Transmit+0x1c4>)
 800cd30:	711a      	strb	r2, [r3, #4]
	CAN2_data_Tx_LM10[5] = *canData.p_pneu;
 800cd32:	4b23      	ldr	r3, [pc, #140]	; (800cdc0 <CAN_2_Transmit+0x1b8>)
 800cd34:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800cd38:	781a      	ldrb	r2, [r3, #0]
 800cd3a:	4b24      	ldr	r3, [pc, #144]	; (800cdcc <CAN_2_Transmit+0x1c4>)
 800cd3c:	715a      	strb	r2, [r3, #5]
	CAN2_data_Tx_LM10[6] = *canData.U_bat;
 800cd3e:	4b20      	ldr	r3, [pc, #128]	; (800cdc0 <CAN_2_Transmit+0x1b8>)
 800cd40:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800cd44:	781a      	ldrb	r2, [r3, #0]
 800cd46:	4b21      	ldr	r3, [pc, #132]	; (800cdcc <CAN_2_Transmit+0x1c4>)
 800cd48:	719a      	strb	r2, [r3, #6]
	CAN2_data_Tx_LM10[7] = *canData.BSD;
 800cd4a:	4b1d      	ldr	r3, [pc, #116]	; (800cdc0 <CAN_2_Transmit+0x1b8>)
 800cd4c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800cd50:	781a      	ldrb	r2, [r3, #0]
 800cd52:	4b1e      	ldr	r3, [pc, #120]	; (800cdcc <CAN_2_Transmit+0x1c4>)
 800cd54:	71da      	strb	r2, [r3, #7]

	CAN_NODE_MO_UpdateData(&CAN_2_LMO_10_Config, CAN2_data_Tx_LM10);
 800cd56:	481e      	ldr	r0, [pc, #120]	; (800cdd0 <CAN_2_Transmit+0x1c8>)
 800cd58:	491c      	ldr	r1, [pc, #112]	; (800cdcc <CAN_2_Transmit+0x1c4>)
 800cd5a:	f7fe fc05 	bl	800b568 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_2_LMO_10_Config);
 800cd5e:	481c      	ldr	r0, [pc, #112]	; (800cdd0 <CAN_2_Transmit+0x1c8>)
 800cd60:	f7fe fbde 	bl	800b520 <CAN_NODE_MO_Transmit>

	//VCU_Failure 0x7E3 LM11
	for (int i = 0; i < 8; i++) {
 800cd64:	2300      	movs	r3, #0
 800cd66:	607b      	str	r3, [r7, #4]
 800cd68:	e018      	b.n	800cd9c <CAN_2_Transmit+0x194>
		CAN2_data_Tx_LM11[i] = getbits64(canData.plausi_error, 8*(i+1)-1, 8);
 800cd6a:	4b15      	ldr	r3, [pc, #84]	; (800cdc0 <CAN_2_Transmit+0x1b8>)
 800cd6c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800cd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd74:	6879      	ldr	r1, [r7, #4]
 800cd76:	3101      	adds	r1, #1
 800cd78:	00c9      	lsls	r1, r1, #3
 800cd7a:	1e4c      	subs	r4, r1, #1
 800cd7c:	4610      	mov	r0, r2
 800cd7e:	4619      	mov	r1, r3
 800cd80:	4622      	mov	r2, r4
 800cd82:	2308      	movs	r3, #8
 800cd84:	f001 fb10 	bl	800e3a8 <getbits64>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	b2d9      	uxtb	r1, r3
 800cd8c:	4a11      	ldr	r2, [pc, #68]	; (800cdd4 <CAN_2_Transmit+0x1cc>)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4413      	add	r3, r2
 800cd92:	460a      	mov	r2, r1
 800cd94:	701a      	strb	r2, [r3, #0]

	CAN_NODE_MO_UpdateData(&CAN_2_LMO_10_Config, CAN2_data_Tx_LM10);
	CAN_NODE_MO_Transmit(&CAN_2_LMO_10_Config);

	//VCU_Failure 0x7E3 LM11
	for (int i = 0; i < 8; i++) {
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	607b      	str	r3, [r7, #4]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2b07      	cmp	r3, #7
 800cda0:	dde3      	ble.n	800cd6a <CAN_2_Transmit+0x162>
		CAN2_data_Tx_LM11[i] = getbits64(canData.plausi_error, 8*(i+1)-1, 8);
	}
	CAN_NODE_MO_UpdateData(&CAN_2_LMO_11_Config, CAN2_data_Tx_LM11);
 800cda2:	480d      	ldr	r0, [pc, #52]	; (800cdd8 <CAN_2_Transmit+0x1d0>)
 800cda4:	490b      	ldr	r1, [pc, #44]	; (800cdd4 <CAN_2_Transmit+0x1cc>)
 800cda6:	f7fe fbdf 	bl	800b568 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_2_LMO_11_Config);
 800cdaa:	480b      	ldr	r0, [pc, #44]	; (800cdd8 <CAN_2_Transmit+0x1d0>)
 800cdac:	f7fe fbb8 	bl	800b520 <CAN_NODE_MO_Transmit>
}
 800cdb0:	370c      	adds	r7, #12
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd90      	pop	{r4, r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	33333333 	.word	0x33333333
 800cdbc:	3fe33333 	.word	0x3fe33333
 800cdc0:	200013c0 	.word	0x200013c0
 800cdc4:	20000848 	.word	0x20000848
 800cdc8:	0800fae4 	.word	0x0800fae4
 800cdcc:	20000850 	.word	0x20000850
 800cdd0:	0800faf0 	.word	0x0800faf0
 800cdd4:	20000858 	.word	0x20000858
 800cdd8:	0800fafc 	.word	0x0800fafc
 800cddc:	f3af 8000 	nop.w

0800cde0 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b083      	sub	sp, #12
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	460b      	mov	r3, r1
 800cdea:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800cdec:	78fb      	ldrb	r3, [r7, #3]
 800cdee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cdf2:	409a      	lsls	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	605a      	str	r2, [r3, #4]
}
 800cdf8:	370c      	adds	r7, #12
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop

0800ce04 <XMC_WDT_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Init(), XMC_WDT_Stop()
 */
__STATIC_INLINE void XMC_WDT_Start(void)
{
 800ce04:	b480      	push	{r7}
 800ce06:	af00      	add	r7, sp, #0
  WDT->CTR |= (uint32_t)WDT_CTR_ENB_Msk;
 800ce08:	4a04      	ldr	r2, [pc, #16]	; (800ce1c <XMC_WDT_Start+0x18>)
 800ce0a:	4b04      	ldr	r3, [pc, #16]	; (800ce1c <XMC_WDT_Start+0x18>)
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	f043 0301 	orr.w	r3, r3, #1
 800ce12:	6053      	str	r3, [r2, #4]
}
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr
 800ce1c:	50008000 	.word	0x50008000

0800ce20 <XMC_WDT_Service>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_GetCounter(), XMC_WDT_SetWindowBounds(), XMC_WDT_SetServicePulseWidth()
 */
__STATIC_INLINE void XMC_WDT_Service(void)
{
 800ce20:	b480      	push	{r7}
 800ce22:	af00      	add	r7, sp, #0
  WDT->SRV = XMC_WDT_MAGIC_WORD;
 800ce24:	4b03      	ldr	r3, [pc, #12]	; (800ce34 <XMC_WDT_Service+0x14>)
 800ce26:	4a04      	ldr	r2, [pc, #16]	; (800ce38 <XMC_WDT_Service+0x18>)
 800ce28:	609a      	str	r2, [r3, #8]
}
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	50008000 	.word	0x50008000
 800ce38:	abadcafe 	.word	0xabadcafe

0800ce3c <XMC_WDT_ClearAlarm>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Service(), XMC_WDT_SetMode()
 */
__STATIC_INLINE void XMC_WDT_ClearAlarm(void)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	af00      	add	r7, sp, #0
  WDT->WDTCLR = WDT_WDTCLR_ALMC_Msk;
 800ce40:	4b03      	ldr	r3, [pc, #12]	; (800ce50 <XMC_WDT_ClearAlarm+0x14>)
 800ce42:	2201      	movs	r2, #1
 800ce44:	61da      	str	r2, [r3, #28]
}
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	50008000 	.word	0x50008000

0800ce54 <WATCHDOG_Start>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Start(void)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	af00      	add	r7, sp, #0
  XMC_WDT_Start();
 800ce58:	f7ff ffd4 	bl	800ce04 <XMC_WDT_Start>
}
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop

0800ce60 <WATCHDOG_Service>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Service(void)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	af00      	add	r7, sp, #0
  XMC_WDT_Service();
 800ce64:	f7ff ffdc 	bl	800ce20 <XMC_WDT_Service>
}
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop

0800ce6c <WATCHDOG_ClearAlarm>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_ClearAlarm(void)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	af00      	add	r7, sp, #0
  XMC_WDT_ClearAlarm();
 800ce70:	f7ff ffe4 	bl	800ce3c <XMC_WDT_ClearAlarm>
}
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop

0800ce78 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	7c1b      	ldrb	r3, [r3, #16]
 800ce88:	4610      	mov	r0, r2
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	f7ff ffa8 	bl	800cde0 <XMC_GPIO_SetOutputLow>
}
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop

0800ce98 <Watchdog_Start>:


//######## Watchdog ########

void Watchdog_Start()
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	af00      	add	r7, sp, #0
	  WATCHDOG_Start();
 800ce9c:	f7ff ffda 	bl	800ce54 <WATCHDOG_Start>
}
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop

0800cea4 <Watchdog_Reset>:

void Watchdog_Reset()
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	af00      	add	r7, sp, #0
	  WATCHDOG_ClearAlarm();
 800cea8:	f7ff ffe0 	bl	800ce6c <WATCHDOG_ClearAlarm>
	  WATCHDOG_Service();
 800ceac:	f7ff ffd8 	bl	800ce60 <WATCHDOG_Service>
}
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop

0800ceb4 <NMI_Handler>:

void NMI_Handler(void) //Watchdog Prewarning Handler
{
 800ceb4:	b590      	push	{r4, r7, lr}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_Debug_LED);
 800ceba:	4818      	ldr	r0, [pc, #96]	; (800cf1c <NMI_Handler+0x68>)
 800cebc:	f7ff ffdc 	bl	800ce78 <DIGITAL_IO_SetOutputLow>

	setbitTrue((unsigned*)&canData.plausi_error, 63);
 800cec0:	4817      	ldr	r0, [pc, #92]	; (800cf20 <NMI_Handler+0x6c>)
 800cec2:	213f      	movs	r1, #63	; 0x3f
 800cec4:	f001 faac 	bl	800e420 <setbitTrue>
	for (int i = 0; i < 8; i++) {
 800cec8:	2300      	movs	r3, #0
 800ceca:	607b      	str	r3, [r7, #4]
 800cecc:	e018      	b.n	800cf00 <NMI_Handler+0x4c>
		plausi_error_array[i] = getbits64(canData.plausi_error, 8*(i+1)-1, 8);
 800cece:	4b15      	ldr	r3, [pc, #84]	; (800cf24 <NMI_Handler+0x70>)
 800ced0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800ced4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced8:	6879      	ldr	r1, [r7, #4]
 800ceda:	3101      	adds	r1, #1
 800cedc:	00c9      	lsls	r1, r1, #3
 800cede:	1e4c      	subs	r4, r1, #1
 800cee0:	4610      	mov	r0, r2
 800cee2:	4619      	mov	r1, r3
 800cee4:	4622      	mov	r2, r4
 800cee6:	2308      	movs	r3, #8
 800cee8:	f001 fa5e 	bl	800e3a8 <getbits64>
 800ceec:	4603      	mov	r3, r0
 800ceee:	b2d9      	uxtb	r1, r3
 800cef0:	4a0d      	ldr	r2, [pc, #52]	; (800cf28 <NMI_Handler+0x74>)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	4413      	add	r3, r2
 800cef6:	460a      	mov	r2, r1
 800cef8:	701a      	strb	r2, [r3, #0]
void NMI_Handler(void) //Watchdog Prewarning Handler
{
	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_Debug_LED);

	setbitTrue((unsigned*)&canData.plausi_error, 63);
	for (int i = 0; i < 8; i++) {
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	3301      	adds	r3, #1
 800cefe:	607b      	str	r3, [r7, #4]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2b07      	cmp	r3, #7
 800cf04:	dde3      	ble.n	800cece <NMI_Handler+0x1a>
		plausi_error_array[i] = getbits64(canData.plausi_error, 8*(i+1)-1, 8);
	}
	CAN_NODE_MO_UpdateData(&CAN_2_LMO_11_Config, plausi_error_array);
 800cf06:	4809      	ldr	r0, [pc, #36]	; (800cf2c <NMI_Handler+0x78>)
 800cf08:	4907      	ldr	r1, [pc, #28]	; (800cf28 <NMI_Handler+0x74>)
 800cf0a:	f7fe fb2d 	bl	800b568 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_2_LMO_11_Config);
 800cf0e:	4807      	ldr	r0, [pc, #28]	; (800cf2c <NMI_Handler+0x78>)
 800cf10:	f7fe fb06 	bl	800b520 <CAN_NODE_MO_Transmit>
}
 800cf14:	370c      	adds	r7, #12
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd90      	pop	{r4, r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	0800f8ac 	.word	0x0800f8ac
 800cf20:	20001508 	.word	0x20001508
 800cf24:	200013c0 	.word	0x200013c0
 800cf28:	20000870 	.word	0x20000870
 800cf2c:	0800fafc 	.word	0x0800fafc

0800cf30 <checkRangePlausi>:

//######## Plausi Check ########

unsigned checkRangePlausi(unsigned value, VCU_Failure error_code)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b086      	sub	sp, #24
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	460b      	mov	r3, r1
 800cf3a:	70fb      	strb	r3, [r7, #3]
	if(checkRangePlausi_active)
 800cf3c:	4b94      	ldr	r3, [pc, #592]	; (800d190 <checkRangePlausi+0x260>)
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	f000 816a 	beq.w	800d21a <checkRangePlausi+0x2ea>
	{
		int upperLimit, lowerLimit;
		unsigned prevValue;

		switch(error_code){
 800cf46:	78fb      	ldrb	r3, [r7, #3]
 800cf48:	3b01      	subs	r3, #1
 800cf4a:	2b16      	cmp	r3, #22
 800cf4c:	f200 8136 	bhi.w	800d1bc <checkRangePlausi+0x28c>
 800cf50:	a201      	add	r2, pc, #4	; (adr r2, 800cf58 <checkRangePlausi+0x28>)
 800cf52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf56:	bf00      	nop
 800cf58:	0800cfb5 	.word	0x0800cfb5
 800cf5c:	0800cfc7 	.word	0x0800cfc7
 800cf60:	0800cfdd 	.word	0x0800cfdd
 800cf64:	0800cff3 	.word	0x0800cff3
 800cf68:	0800d005 	.word	0x0800d005
 800cf6c:	0800d017 	.word	0x0800d017
 800cf70:	0800d02b 	.word	0x0800d02b
 800cf74:	0800d041 	.word	0x0800d041
 800cf78:	0800d057 	.word	0x0800d057
 800cf7c:	0800d06d 	.word	0x0800d06d
 800cf80:	0800d083 	.word	0x0800d083
 800cf84:	0800d097 	.word	0x0800d097
 800cf88:	0800d0ab 	.word	0x0800d0ab
 800cf8c:	0800d0c1 	.word	0x0800d0c1
 800cf90:	0800d0e1 	.word	0x0800d0e1
 800cf94:	0800d0f5 	.word	0x0800d0f5
 800cf98:	0800d109 	.word	0x0800d109
 800cf9c:	0800d11b 	.word	0x0800d11b
 800cfa0:	0800d12d 	.word	0x0800d12d
 800cfa4:	0800d13f 	.word	0x0800d13f
 800cfa8:	0800d151 	.word	0x0800d151
 800cfac:	0800d171 	.word	0x0800d171
 800cfb0:	0800d19d 	.word	0x0800d19d
		case ERR_FANS_DASH_BIT: prevValue = (unsigned)*IOportData.Fans_dash_bit;
 800cfb4:	4b77      	ldr	r3, [pc, #476]	; (800d194 <checkRangePlausi+0x264>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	60fb      	str	r3, [r7, #12]
								upperLimit=1;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	613b      	str	r3, [r7, #16]
								break;
 800cfc4:	e0fa      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_G_LONG_ABS: 	prevValue = (unsigned)*canData.g_long_ABS; //todo
 800cfc6:	4b74      	ldr	r3, [pc, #464]	; (800d198 <checkRangePlausi+0x268>)
 800cfc8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cfcc:	881b      	ldrh	r3, [r3, #0]
 800cfce:	60fb      	str	r3, [r7, #12]
								upperLimit=32e3;
 800cfd0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cfd4:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	613b      	str	r3, [r7, #16]
								break;
 800cfda:	e0ef      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_G_YAW_ABS: 	prevValue = (unsigned)*canData.g_yaw_ABS; //todo
 800cfdc:	4b6e      	ldr	r3, [pc, #440]	; (800d198 <checkRangePlausi+0x268>)
 800cfde:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800cfe2:	881b      	ldrh	r3, [r3, #0]
 800cfe4:	60fb      	str	r3, [r7, #12]
								upperLimit=32e3;
 800cfe6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cfea:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cfec:	2300      	movs	r3, #0
 800cfee:	613b      	str	r3, [r7, #16]
								break;
 800cff0:	e0e4      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_GEAR:		 	prevValue = (unsigned)*canData.gear;
 800cff2:	4b69      	ldr	r3, [pc, #420]	; (800d198 <checkRangePlausi+0x268>)
 800cff4:	68db      	ldr	r3, [r3, #12]
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	60fb      	str	r3, [r7, #12]
								upperLimit =3<<3; //Motorola
 800cffa:	2318      	movs	r3, #24
 800cffc:	617b      	str	r3, [r7, #20]
								lowerLimit =0<<3; //Motorola
 800cffe:	2300      	movs	r3, #0
 800d000:	613b      	str	r3, [r7, #16]
								break;
 800d002:	e0db      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_LC_DASH_BIT: 	prevValue = (unsigned)*IOportData.LC_dash_bit;
 800d004:	4b63      	ldr	r3, [pc, #396]	; (800d194 <checkRangePlausi+0x264>)
 800d006:	6a1b      	ldr	r3, [r3, #32]
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	60fb      	str	r3, [r7, #12]
								upperLimit=1;
 800d00c:	2301      	movs	r3, #1
 800d00e:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800d010:	2300      	movs	r3, #0
 800d012:	613b      	str	r3, [r7, #16]
								break;
 800d014:	e0d2      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_N_ENGINE:	 	prevValue = (unsigned)*canData.n_engine;
 800d016:	4b60      	ldr	r3, [pc, #384]	; (800d198 <checkRangePlausi+0x268>)
 800d018:	689b      	ldr	r3, [r3, #8]
 800d01a:	881b      	ldrh	r3, [r3, #0]
 800d01c:	60fb      	str	r3, [r7, #12]
								upperLimit=10000;
 800d01e:	f242 7310 	movw	r3, #10000	; 0x2710
 800d022:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800d024:	2300      	movs	r3, #0
 800d026:	613b      	str	r3, [r7, #16]
								break;
 800d028:	e0c8      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_N_WHEEL_FL: 	prevValue = (unsigned)*canData.n_wheel_FL;
 800d02a:	4b5b      	ldr	r3, [pc, #364]	; (800d198 <checkRangePlausi+0x268>)
 800d02c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d030:	881b      	ldrh	r3, [r3, #0]
 800d032:	60fb      	str	r3, [r7, #12]
								upperLimit=3840;
 800d034:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800d038:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800d03a:	2300      	movs	r3, #0
 800d03c:	613b      	str	r3, [r7, #16]
								break;
 800d03e:	e0bd      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_N_WHEEL_FR: 	prevValue = (unsigned)*canData.n_wheel_FR;
 800d040:	4b55      	ldr	r3, [pc, #340]	; (800d198 <checkRangePlausi+0x268>)
 800d042:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d046:	881b      	ldrh	r3, [r3, #0]
 800d048:	60fb      	str	r3, [r7, #12]
								upperLimit=3840;
 800d04a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800d04e:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800d050:	2300      	movs	r3, #0
 800d052:	613b      	str	r3, [r7, #16]
								break;
 800d054:	e0b2      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_N_WHEEL_RL: 	prevValue = (unsigned)*canData.n_wheel_RL;
 800d056:	4b50      	ldr	r3, [pc, #320]	; (800d198 <checkRangePlausi+0x268>)
 800d058:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d05c:	881b      	ldrh	r3, [r3, #0]
 800d05e:	60fb      	str	r3, [r7, #12]
								upperLimit=3840;
 800d060:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800d064:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800d066:	2300      	movs	r3, #0
 800d068:	613b      	str	r3, [r7, #16]
								break;
 800d06a:	e0a7      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_N_WHEEL_RR: 	prevValue = (unsigned)*canData.n_wheel_RR;
 800d06c:	4b4a      	ldr	r3, [pc, #296]	; (800d198 <checkRangePlausi+0x268>)
 800d06e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d072:	881b      	ldrh	r3, [r3, #0]
 800d074:	60fb      	str	r3, [r7, #12]
								upperLimit=3840;
 800d076:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800d07a:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800d07c:	2300      	movs	r3, #0
 800d07e:	613b      	str	r3, [r7, #16]
								break;
 800d080:	e09c      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_P_AIR_22:	 	prevValue = (unsigned)*canData.p_air_22;
 800d082:	4b45      	ldr	r3, [pc, #276]	; (800d198 <checkRangePlausi+0x268>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	60fb      	str	r3, [r7, #12]
								upperLimit=1000;
 800d08a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d08e:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800d090:	2300      	movs	r3, #0
 800d092:	613b      	str	r3, [r7, #16]
								break;
 800d094:	e092      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_P_AIR_22_DES: 	prevValue = (unsigned)*canData.AN5GearPos;
 800d096:	4b40      	ldr	r3, [pc, #256]	; (800d198 <checkRangePlausi+0x268>)
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	60fb      	str	r3, [r7, #12]
								upperLimit=1000;
 800d09e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d0a2:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	613b      	str	r3, [r7, #16]
								break;
 800d0a8:	e088      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_P_BRAKE_F: 	prevValue = (unsigned)*canData.p_brake_F; //todo
 800d0aa:	4b3b      	ldr	r3, [pc, #236]	; (800d198 <checkRangePlausi+0x268>)
 800d0ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0b0:	881b      	ldrh	r3, [r3, #0]
 800d0b2:	60fb      	str	r3, [r7, #12]
								upperLimit=32e3;
 800d0b4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d0b8:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	613b      	str	r3, [r7, #16]
								break;
 800d0be:	e07d      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_P_BRAKE_R: 	prevValue = (unsigned)*IOportData.p_brake_R;
 800d0c0:	4b34      	ldr	r3, [pc, #208]	; (800d194 <checkRangePlausi+0x264>)
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c8:	4610      	mov	r0, r2
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	f002 f89e 	bl	800f20c <__aeabi_d2uiz>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	60fb      	str	r3, [r7, #12]
								upperLimit = 6000;
 800d0d4:	f241 7370 	movw	r3, #6000	; 0x1770
 800d0d8:	617b      	str	r3, [r7, #20]
								lowerLimit = 0;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	613b      	str	r3, [r7, #16]
								break;
 800d0de:	e06d      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_STW_CLTUCH_MODE: 	prevValue = (unsigned)*canData.STW_clutch_mode; //todo
 800d0e0:	4b2d      	ldr	r3, [pc, #180]	; (800d198 <checkRangePlausi+0x268>)
 800d0e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	60fb      	str	r3, [r7, #12]
									upperLimit = 32e3;
 800d0e8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d0ec:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	613b      	str	r3, [r7, #16]
									break;
 800d0f2:	e063      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_MUE_TYRE:		 	prevValue = (unsigned)*canData.STW_mue_tyre;
 800d0f4:	4b28      	ldr	r3, [pc, #160]	; (800d198 <checkRangePlausi+0x268>)
 800d0f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	60fb      	str	r3, [r7, #12]
									upperLimit = 100;
 800d0fe:	2364      	movs	r3, #100	; 0x64
 800d100:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800d102:	2300      	movs	r3, #0
 800d104:	613b      	str	r3, [r7, #16]
									break;
 800d106:	e059      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_STW_SHIFT_DOWN_REQUEST: 	prevValue = (unsigned)*canData.STW_shift_down_request;
 800d108:	4b23      	ldr	r3, [pc, #140]	; (800d198 <checkRangePlausi+0x268>)
 800d10a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	60fb      	str	r3, [r7, #12]
											upperLimit = 1;
 800d110:	2301      	movs	r3, #1
 800d112:	617b      	str	r3, [r7, #20]
											lowerLimit = 0;
 800d114:	2300      	movs	r3, #0
 800d116:	613b      	str	r3, [r7, #16]
											break;
 800d118:	e050      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_STW_SHIFT_UP_REQUEST: 	prevValue = (unsigned)*canData.STW_shift_up_request;
 800d11a:	4b1f      	ldr	r3, [pc, #124]	; (800d198 <checkRangePlausi+0x268>)
 800d11c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	60fb      	str	r3, [r7, #12]
											upperLimit = 1;
 800d122:	2301      	movs	r3, #1
 800d124:	617b      	str	r3, [r7, #20]
											lowerLimit = 0;
 800d126:	2300      	movs	r3, #0
 800d128:	613b      	str	r3, [r7, #16]
											break;
 800d12a:	e047      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_T_WATER_ENGINE: 	prevValue = (unsigned)*canData.t_water_engine;
 800d12c:	4b1a      	ldr	r3, [pc, #104]	; (800d198 <checkRangePlausi+0x268>)
 800d12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	60fb      	str	r3, [r7, #12]
									upperLimit = 250;
 800d134:	23fa      	movs	r3, #250	; 0xfa
 800d136:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800d138:	2300      	movs	r3, #0
 800d13a:	613b      	str	r3, [r7, #16]
									break;
 800d13c:	e03e      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_TRANSMISSION_MODE:	prevValue = (unsigned)*canData.t_water_engine;
 800d13e:	4b16      	ldr	r3, [pc, #88]	; (800d198 <checkRangePlausi+0x268>)
 800d140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	60fb      	str	r3, [r7, #12]
									upperLimit = 250;
 800d146:	23fa      	movs	r3, #250	; 0xfa
 800d148:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800d14a:	2300      	movs	r3, #0
 800d14c:	613b      	str	r3, [r7, #16]
									break;
 800d14e:	e035      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_U_BAT:				prevValue = (unsigned)*IOportData.U_Bat;
 800d150:	4b10      	ldr	r3, [pc, #64]	; (800d194 <checkRangePlausi+0x264>)
 800d152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d158:	4610      	mov	r0, r2
 800d15a:	4619      	mov	r1, r3
 800d15c:	f002 f856 	bl	800f20c <__aeabi_d2uiz>
 800d160:	4603      	mov	r3, r0
 800d162:	60fb      	str	r3, [r7, #12]
									upperLimit = 20000;
 800d164:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d168:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800d16a:	2300      	movs	r3, #0
 800d16c:	613b      	str	r3, [r7, #16]
									break;
 800d16e:	e025      	b.n	800d1bc <checkRangePlausi+0x28c>
		case ERR_X_CLUTCH:			prevValue = (unsigned)*IOportData.x_clutch;
 800d170:	4b08      	ldr	r3, [pc, #32]	; (800d194 <checkRangePlausi+0x264>)
 800d172:	68db      	ldr	r3, [r3, #12]
 800d174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d178:	4610      	mov	r0, r2
 800d17a:	4619      	mov	r1, r3
 800d17c:	f002 f846 	bl	800f20c <__aeabi_d2uiz>
 800d180:	4603      	mov	r3, r0
 800d182:	60fb      	str	r3, [r7, #12]
									upperLimit = 5000;
 800d184:	f241 3388 	movw	r3, #5000	; 0x1388
 800d188:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800d18a:	2300      	movs	r3, #0
 800d18c:	613b      	str	r3, [r7, #16]
									break;
 800d18e:	e015      	b.n	800d1bc <checkRangePlausi+0x28c>
 800d190:	20000622 	.word	0x20000622
 800d194:	20001348 	.word	0x20001348
 800d198:	200013c0 	.word	0x200013c0
		case ERR_X_CLUTCH_STW:			prevValue = (unsigned)*IOportData.x_clutch_STW;
 800d19c:	4b21      	ldr	r3, [pc, #132]	; (800d224 <checkRangePlausi+0x2f4>)
 800d19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a4:	4610      	mov	r0, r2
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	f002 f830 	bl	800f20c <__aeabi_d2uiz>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	60fb      	str	r3, [r7, #12]
										upperLimit = 5000;
 800d1b0:	f241 3388 	movw	r3, #5000	; 0x1388
 800d1b4:	617b      	str	r3, [r7, #20]
										lowerLimit = 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	613b      	str	r3, [r7, #16]
										break;
 800d1ba:	bf00      	nop
		}

		if(value >= lowerLimit && value <= upperLimit)
 800d1bc:	693a      	ldr	r2, [r7, #16]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d814      	bhi.n	800d1ee <checkRangePlausi+0x2be>
 800d1c4:	697a      	ldr	r2, [r7, #20]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d310      	bcc.n	800d1ee <checkRangePlausi+0x2be>
		{
			setbitFalse((unsigned*)&canData.plausi_error, 2*(error_code-1));
 800d1cc:	78fb      	ldrb	r3, [r7, #3]
 800d1ce:	3b01      	subs	r3, #1
 800d1d0:	005b      	lsls	r3, r3, #1
 800d1d2:	4815      	ldr	r0, [pc, #84]	; (800d228 <checkRangePlausi+0x2f8>)
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	f001 f94b 	bl	800e470 <setbitFalse>
			setbitFalse((unsigned*)&canData.plausi_error, 2*(error_code-1)+1);
 800d1da:	78fb      	ldrb	r3, [r7, #3]
 800d1dc:	3b01      	subs	r3, #1
 800d1de:	005b      	lsls	r3, r3, #1
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	4811      	ldr	r0, [pc, #68]	; (800d228 <checkRangePlausi+0x2f8>)
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	f001 f943 	bl	800e470 <setbitFalse>
			return value;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	e016      	b.n	800d21c <checkRangePlausi+0x2ec>
		}
		else
		{
			if(value <= lowerLimit)
 800d1ee:	693a      	ldr	r2, [r7, #16]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d307      	bcc.n	800d206 <checkRangePlausi+0x2d6>
			{
				setbitTrue((unsigned*)&canData.plausi_error, 2*(error_code-1));
 800d1f6:	78fb      	ldrb	r3, [r7, #3]
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	005b      	lsls	r3, r3, #1
 800d1fc:	480a      	ldr	r0, [pc, #40]	; (800d228 <checkRangePlausi+0x2f8>)
 800d1fe:	4619      	mov	r1, r3
 800d200:	f001 f90e 	bl	800e420 <setbitTrue>
 800d204:	e007      	b.n	800d216 <checkRangePlausi+0x2e6>
			}
			else
			{
				setbitTrue((unsigned*)&canData.plausi_error, 2*(error_code-1)+1);
 800d206:	78fb      	ldrb	r3, [r7, #3]
 800d208:	3b01      	subs	r3, #1
 800d20a:	005b      	lsls	r3, r3, #1
 800d20c:	3301      	adds	r3, #1
 800d20e:	4806      	ldr	r0, [pc, #24]	; (800d228 <checkRangePlausi+0x2f8>)
 800d210:	4619      	mov	r1, r3
 800d212:	f001 f905 	bl	800e420 <setbitTrue>
			}
			return prevValue;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	e000      	b.n	800d21c <checkRangePlausi+0x2ec>
		}
	}
	else
	{
		return value; //No Plausi Check
 800d21a:	687b      	ldr	r3, [r7, #4]
	}
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3718      	adds	r7, #24
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	20001348 	.word	0x20001348
 800d228:	20001508 	.word	0x20001508

0800d22c <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	460b      	mov	r3, r1
 800d236:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d23c:	78fb      	ldrb	r3, [r7, #3]
 800d23e:	fa22 f303 	lsr.w	r3, r2, r3
 800d242:	f003 0301 	and.w	r3, r3, #1
}
 800d246:	4618      	mov	r0, r3
 800d248:	370c      	adds	r7, #12
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop

0800d254 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	7c1b      	ldrb	r3, [r3, #16]
 800d264:	4610      	mov	r0, r2
 800d266:	4619      	mov	r1, r3
 800d268:	f7ff ffe0 	bl	800d22c <XMC_GPIO_GetInput>
 800d26c:	4603      	mov	r3, r0
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3708      	adds	r7, #8
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop

0800d278 <IOPort_ini>:
uint16_t busio_read;
extern boolean_T shiftDownInterrupt;
extern boolean_T shiftUpInterrupt;

void IOPort_ini()
{
 800d278:	b480      	push	{r7}
 800d27a:	af00      	add	r7, sp, #0
	//Inputs
	IOportData.Fans_dash_bit = (boolean_T*)&VCU_DW.VAR_IN_Fans_dash_bit;
 800d27c:	4b3c      	ldr	r3, [pc, #240]	; (800d370 <IOPort_ini+0xf8>)
 800d27e:	4a3d      	ldr	r2, [pc, #244]	; (800d374 <IOPort_ini+0xfc>)
 800d280:	601a      	str	r2, [r3, #0]
	IOportData.p_brake_R = &VCU_DW.VAR_IN_p_brake_R;
 800d282:	4b3b      	ldr	r3, [pc, #236]	; (800d370 <IOPort_ini+0xf8>)
 800d284:	4a3c      	ldr	r2, [pc, #240]	; (800d378 <IOPort_ini+0x100>)
 800d286:	605a      	str	r2, [r3, #4]
	//IOportData.p_pneum = &VCU_DW.VAR_IN_p_pneum;
	IOportData.x_clutch = &VCU_DW.VAR_IN_x_clutch;
 800d288:	4b39      	ldr	r3, [pc, #228]	; (800d370 <IOPort_ini+0xf8>)
 800d28a:	4a3c      	ldr	r2, [pc, #240]	; (800d37c <IOPort_ini+0x104>)
 800d28c:	60da      	str	r2, [r3, #12]
	IOportData.f_FL = &VCU_DW.VAR_IN_f_FL;
 800d28e:	4b38      	ldr	r3, [pc, #224]	; (800d370 <IOPort_ini+0xf8>)
 800d290:	4a3b      	ldr	r2, [pc, #236]	; (800d380 <IOPort_ini+0x108>)
 800d292:	611a      	str	r2, [r3, #16]
	IOportData.f_FR = &VCU_DW.VAR_IN_f_FR;
 800d294:	4b36      	ldr	r3, [pc, #216]	; (800d370 <IOPort_ini+0xf8>)
 800d296:	4a3b      	ldr	r2, [pc, #236]	; (800d384 <IOPort_ini+0x10c>)
 800d298:	615a      	str	r2, [r3, #20]
	IOportData.f_RL = &VCU_DW.VAR_IN_f_RL;
 800d29a:	4b35      	ldr	r3, [pc, #212]	; (800d370 <IOPort_ini+0xf8>)
 800d29c:	4a3a      	ldr	r2, [pc, #232]	; (800d388 <IOPort_ini+0x110>)
 800d29e:	619a      	str	r2, [r3, #24]
	IOportData.f_RR = &VCU_DW.VAR_IN_f_RR;
 800d2a0:	4b33      	ldr	r3, [pc, #204]	; (800d370 <IOPort_ini+0xf8>)
 800d2a2:	4a3a      	ldr	r2, [pc, #232]	; (800d38c <IOPort_ini+0x114>)
 800d2a4:	61da      	str	r2, [r3, #28]
	IOportData.LC_dash_bit = (boolean_T*)&VCU_DW.VAR_IN_LC_dash_bit;
 800d2a6:	4b32      	ldr	r3, [pc, #200]	; (800d370 <IOPort_ini+0xf8>)
 800d2a8:	4a39      	ldr	r2, [pc, #228]	; (800d390 <IOPort_ini+0x118>)
 800d2aa:	621a      	str	r2, [r3, #32]
	IOportData.x_RH_F = &VCU_DW.VAR_IN_x_RH_F;
 800d2ac:	4b30      	ldr	r3, [pc, #192]	; (800d370 <IOPort_ini+0xf8>)
 800d2ae:	4a39      	ldr	r2, [pc, #228]	; (800d394 <IOPort_ini+0x11c>)
 800d2b0:	625a      	str	r2, [r3, #36]	; 0x24
	IOportData.x_RH_RL = &VCU_DW.VAR_IN_x_RH_RL;
 800d2b2:	4b2f      	ldr	r3, [pc, #188]	; (800d370 <IOPort_ini+0xf8>)
 800d2b4:	4a38      	ldr	r2, [pc, #224]	; (800d398 <IOPort_ini+0x120>)
 800d2b6:	629a      	str	r2, [r3, #40]	; 0x28
	IOportData.x_RH_RR = &VCU_DW.VAR_IN_x_RH_RR;
 800d2b8:	4b2d      	ldr	r3, [pc, #180]	; (800d370 <IOPort_ini+0xf8>)
 800d2ba:	4a38      	ldr	r2, [pc, #224]	; (800d39c <IOPort_ini+0x124>)
 800d2bc:	62da      	str	r2, [r3, #44]	; 0x2c
	IOportData.U_Bat = &VCU_DW.VAR_IN_U_Bat;
 800d2be:	4b2c      	ldr	r3, [pc, #176]	; (800d370 <IOPort_ini+0xf8>)
 800d2c0:	4a37      	ldr	r2, [pc, #220]	; (800d3a0 <IOPort_ini+0x128>)
 800d2c2:	631a      	str	r2, [r3, #48]	; 0x30
	IOportData.x_clutch_STW = &VCU_DW.VAR_IN_x_clutch_STW;
 800d2c4:	4b2a      	ldr	r3, [pc, #168]	; (800d370 <IOPort_ini+0xf8>)
 800d2c6:	4a37      	ldr	r2, [pc, #220]	; (800d3a4 <IOPort_ini+0x12c>)
 800d2c8:	635a      	str	r2, [r3, #52]	; 0x34
	VAR_boardTemp = 0; IOportData.boardTemp = &VAR_boardTemp;
 800d2ca:	4937      	ldr	r1, [pc, #220]	; (800d3a8 <IOPort_ini+0x130>)
 800d2cc:	f04f 0200 	mov.w	r2, #0
 800d2d0:	f04f 0300 	mov.w	r3, #0
 800d2d4:	e9c1 2300 	strd	r2, r3, [r1]
 800d2d8:	4b25      	ldr	r3, [pc, #148]	; (800d370 <IOPort_ini+0xf8>)
 800d2da:	4a33      	ldr	r2, [pc, #204]	; (800d3a8 <IOPort_ini+0x130>)
 800d2dc:	639a      	str	r2, [r3, #56]	; 0x38
	VAR_TR1_VSense_WP = 0; IOportData.TR1_VSense_WP = &VAR_TR1_VSense_WP;
 800d2de:	4933      	ldr	r1, [pc, #204]	; (800d3ac <IOPort_ini+0x134>)
 800d2e0:	f04f 0200 	mov.w	r2, #0
 800d2e4:	f04f 0300 	mov.w	r3, #0
 800d2e8:	e9c1 2300 	strd	r2, r3, [r1]
 800d2ec:	4b20      	ldr	r3, [pc, #128]	; (800d370 <IOPort_ini+0xf8>)
 800d2ee:	4a2f      	ldr	r2, [pc, #188]	; (800d3ac <IOPort_ini+0x134>)
 800d2f0:	63da      	str	r2, [r3, #60]	; 0x3c
	VAR_TR2_VSense_FAN1 = 0; IOportData.TR2_VSense_FAN1 = &VAR_TR2_VSense_FAN1;
 800d2f2:	492f      	ldr	r1, [pc, #188]	; (800d3b0 <IOPort_ini+0x138>)
 800d2f4:	f04f 0200 	mov.w	r2, #0
 800d2f8:	f04f 0300 	mov.w	r3, #0
 800d2fc:	e9c1 2300 	strd	r2, r3, [r1]
 800d300:	4b1b      	ldr	r3, [pc, #108]	; (800d370 <IOPort_ini+0xf8>)
 800d302:	4a2b      	ldr	r2, [pc, #172]	; (800d3b0 <IOPort_ini+0x138>)
 800d304:	641a      	str	r2, [r3, #64]	; 0x40
	VAR_TR3_VSense_FAN2 = 0; IOportData.TR3_VSense_FAN2 = &VAR_TR3_VSense_FAN2;
 800d306:	492b      	ldr	r1, [pc, #172]	; (800d3b4 <IOPort_ini+0x13c>)
 800d308:	f04f 0200 	mov.w	r2, #0
 800d30c:	f04f 0300 	mov.w	r3, #0
 800d310:	e9c1 2300 	strd	r2, r3, [r1]
 800d314:	4b16      	ldr	r3, [pc, #88]	; (800d370 <IOPort_ini+0xf8>)
 800d316:	4a27      	ldr	r2, [pc, #156]	; (800d3b4 <IOPort_ini+0x13c>)
 800d318:	645a      	str	r2, [r3, #68]	; 0x44

	//Outputs
	IOportData.VOVG_ShiftUp = &VCU_DW.VAR_OUT_VOVG_ShiftUp;
 800d31a:	4b15      	ldr	r3, [pc, #84]	; (800d370 <IOPort_ini+0xf8>)
 800d31c:	4a26      	ldr	r2, [pc, #152]	; (800d3b8 <IOPort_ini+0x140>)
 800d31e:	649a      	str	r2, [r3, #72]	; 0x48
	IOportData.VOVG_ShiftDown = &VCU_DW.VAR_OUT_VOVG_ShiftDown;
 800d320:	4b13      	ldr	r3, [pc, #76]	; (800d370 <IOPort_ini+0xf8>)
 800d322:	4a26      	ldr	r2, [pc, #152]	; (800d3bc <IOPort_ini+0x144>)
 800d324:	64da      	str	r2, [r3, #76]	; 0x4c
	IOportData.Ignition_Cut = &VCU_DW.VAR_OUT_Ignition_Cut;
 800d326:	4b12      	ldr	r3, [pc, #72]	; (800d370 <IOPort_ini+0xf8>)
 800d328:	4a25      	ldr	r2, [pc, #148]	; (800d3c0 <IOPort_ini+0x148>)
 800d32a:	651a      	str	r2, [r3, #80]	; 0x50
	IOportData.VOVG_IN = &VCU_DW.VAR_OUT_VOVG_IN;
 800d32c:	4b10      	ldr	r3, [pc, #64]	; (800d370 <IOPort_ini+0xf8>)
 800d32e:	4a25      	ldr	r2, [pc, #148]	; (800d3c4 <IOPort_ini+0x14c>)
 800d330:	655a      	str	r2, [r3, #84]	; 0x54
	IOportData.VOVG_OUT = &VCU_DW.VAR_OUT_VOVG_OUT;
 800d332:	4b0f      	ldr	r3, [pc, #60]	; (800d370 <IOPort_ini+0xf8>)
 800d334:	4a24      	ldr	r2, [pc, #144]	; (800d3c8 <IOPort_ini+0x150>)
 800d336:	659a      	str	r2, [r3, #88]	; 0x58
	IOportData.MHJ9_IN = (uint16_t*)&VCU_DW.VAR_OUT_MHJ9_IN; //PWM
 800d338:	4b0d      	ldr	r3, [pc, #52]	; (800d370 <IOPort_ini+0xf8>)
 800d33a:	4a24      	ldr	r2, [pc, #144]	; (800d3cc <IOPort_ini+0x154>)
 800d33c:	65da      	str	r2, [r3, #92]	; 0x5c
	IOportData.MHJ9_OUT = (uint16_t*)&VCU_DW.VAR_OUT_MHJ9_OUT; //PWM
 800d33e:	4b0c      	ldr	r3, [pc, #48]	; (800d370 <IOPort_ini+0xf8>)
 800d340:	4a23      	ldr	r2, [pc, #140]	; (800d3d0 <IOPort_ini+0x158>)
 800d342:	661a      	str	r2, [r3, #96]	; 0x60
	IOportData.Brakelight = &VCU_DW.VAR_OUT_Brakelight;
 800d344:	4b0a      	ldr	r3, [pc, #40]	; (800d370 <IOPort_ini+0xf8>)
 800d346:	4a23      	ldr	r2, [pc, #140]	; (800d3d4 <IOPort_ini+0x15c>)
 800d348:	665a      	str	r2, [r3, #100]	; 0x64
	IOportData.Waterpump_PWM_active = &VCU_DW.VAR_OUT_Waterpump_PWM_active;
 800d34a:	4b09      	ldr	r3, [pc, #36]	; (800d370 <IOPort_ini+0xf8>)
 800d34c:	4a22      	ldr	r2, [pc, #136]	; (800d3d8 <IOPort_ini+0x160>)
 800d34e:	669a      	str	r2, [r3, #104]	; 0x68
	IOportData.Fans1_PWM_active = &VCU_DW.VAR_OUT_Fans1_PWM_active;
 800d350:	4b07      	ldr	r3, [pc, #28]	; (800d370 <IOPort_ini+0xf8>)
 800d352:	4a22      	ldr	r2, [pc, #136]	; (800d3dc <IOPort_ini+0x164>)
 800d354:	66da      	str	r2, [r3, #108]	; 0x6c
	IOportData.Fans2_PWM_active = &VCU_DW.VAR_OUT_Fans2_PWM_active;
 800d356:	4b06      	ldr	r3, [pc, #24]	; (800d370 <IOPort_ini+0xf8>)
 800d358:	4a21      	ldr	r2, [pc, #132]	; (800d3e0 <IOPort_ini+0x168>)
 800d35a:	671a      	str	r2, [r3, #112]	; 0x70

	output_pins = 0;
 800d35c:	4b21      	ldr	r3, [pc, #132]	; (800d3e4 <IOPort_ini+0x16c>)
 800d35e:	2200      	movs	r2, #0
 800d360:	601a      	str	r2, [r3, #0]
	busio_read = 0;
 800d362:	4b21      	ldr	r3, [pc, #132]	; (800d3e8 <IOPort_ini+0x170>)
 800d364:	2200      	movs	r2, #0
 800d366:	801a      	strh	r2, [r3, #0]
}
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr
 800d370:	20001348 	.word	0x20001348
 800d374:	20001120 	.word	0x20001120
 800d378:	20001128 	.word	0x20001128
 800d37c:	20001148 	.word	0x20001148
 800d380:	20001150 	.word	0x20001150
 800d384:	20001158 	.word	0x20001158
 800d388:	20001160 	.word	0x20001160
 800d38c:	20001168 	.word	0x20001168
 800d390:	20001170 	.word	0x20001170
 800d394:	20001178 	.word	0x20001178
 800d398:	20001130 	.word	0x20001130
 800d39c:	20001138 	.word	0x20001138
 800d3a0:	20001140 	.word	0x20001140
 800d3a4:	20001118 	.word	0x20001118
 800d3a8:	200012f0 	.word	0x200012f0
 800d3ac:	200012e0 	.word	0x200012e0
 800d3b0:	20001300 	.word	0x20001300
 800d3b4:	200012d0 	.word	0x200012d0
 800d3b8:	20001225 	.word	0x20001225
 800d3bc:	20001226 	.word	0x20001226
 800d3c0:	20001228 	.word	0x20001228
 800d3c4:	20001229 	.word	0x20001229
 800d3c8:	2000122a 	.word	0x2000122a
 800d3cc:	2000119e 	.word	0x2000119e
 800d3d0:	200011a0 	.word	0x200011a0
 800d3d4:	2000122b 	.word	0x2000122b
 800d3d8:	200011a2 	.word	0x200011a2
 800d3dc:	200011a4 	.word	0x200011a4
 800d3e0:	2000119c 	.word	0x2000119c
 800d3e4:	20001340 	.word	0x20001340
 800d3e8:	20001344 	.word	0x20001344

0800d3ec <IOPort_setDOUTS>:

void IOPort_setDOUTS()
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	af00      	add	r7, sp, #0
	if(canData.ManualControl_Active) //set manual values if controlled by CANoe
 800d3f0:	4b14      	ldr	r3, [pc, #80]	; (800d444 <IOPort_setDOUTS+0x58>)
 800d3f2:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d001      	beq.n	800d3fe <IOPort_setDOUTS+0x12>
	{
		ManualControl_setDOUTS();
 800d3fa:	f000 fad7 	bl	800d9ac <ManualControl_setDOUTS>
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
 800d3fe:	4b12      	ldr	r3, [pc, #72]	; (800d448 <IOPort_setDOUTS+0x5c>)
 800d400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	461a      	mov	r2, r3
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
 800d406:	4b10      	ldr	r3, [pc, #64]	; (800d448 <IOPort_setDOUTS+0x5c>)
 800d408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	005b      	lsls	r3, r3, #1
	if(canData.ManualControl_Active) //set manual values if controlled by CANoe
	{
		ManualControl_setDOUTS();
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
 800d40e:	431a      	orrs	r2, r3
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
					(*IOportData.Ignition_Cut << 2) |
 800d410:	4b0d      	ldr	r3, [pc, #52]	; (800d448 <IOPort_setDOUTS+0x5c>)
 800d412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	009b      	lsls	r3, r3, #2
	{
		ManualControl_setDOUTS();
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
 800d418:	431a      	orrs	r2, r3
					(*IOportData.Ignition_Cut << 2) |
					(*IOportData.VOVG_IN << 3) |
 800d41a:	4b0b      	ldr	r3, [pc, #44]	; (800d448 <IOPort_setDOUTS+0x5c>)
 800d41c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	00db      	lsls	r3, r3, #3
		ManualControl_setDOUTS();
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
					(*IOportData.Ignition_Cut << 2) |
 800d422:	431a      	orrs	r2, r3
					(*IOportData.VOVG_IN << 3) |
					(*IOportData.VOVG_OUT << 4);
 800d424:	4b08      	ldr	r3, [pc, #32]	; (800d448 <IOPort_setDOUTS+0x5c>)
 800d426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	011b      	lsls	r3, r3, #4
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
					(*IOportData.Ignition_Cut << 2) |
					(*IOportData.VOVG_IN << 3) |
 800d42c:	4313      	orrs	r3, r2
	if(canData.ManualControl_Active) //set manual values if controlled by CANoe
	{
		ManualControl_setDOUTS();
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
 800d42e:	4a07      	ldr	r2, [pc, #28]	; (800d44c <IOPort_setDOUTS+0x60>)
 800d430:	6013      	str	r3, [r2, #0]
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
					(*IOportData.Ignition_Cut << 2) |
					(*IOportData.VOVG_IN << 3) |
					(*IOportData.VOVG_OUT << 4);

	  BUS_IO_Write(&BUS_IO, (uint8_t) output_pins);
 800d432:	4b06      	ldr	r3, [pc, #24]	; (800d44c <IOPort_setDOUTS+0x60>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	b2db      	uxtb	r3, r3
 800d438:	b29b      	uxth	r3, r3
 800d43a:	4805      	ldr	r0, [pc, #20]	; (800d450 <IOPort_setDOUTS+0x64>)
 800d43c:	4619      	mov	r1, r3
 800d43e:	f7fe f9d7 	bl	800b7f0 <BUS_IO_Write>
}
 800d442:	bd80      	pop	{r7, pc}
 800d444:	200013c0 	.word	0x200013c0
 800d448:	20001348 	.word	0x20001348
 800d44c:	20001340 	.word	0x20001340
 800d450:	20000450 	.word	0x20000450

0800d454 <IOPort_readDINS>:

void IOPort_readDINS()
{
 800d454:	b598      	push	{r3, r4, r7, lr}
 800d456:	af00      	add	r7, sp, #0
	busio_read = BUS_IO_Read(&BUS_IO_Input);
 800d458:	4814      	ldr	r0, [pc, #80]	; (800d4ac <IOPort_readDINS+0x58>)
 800d45a:	f7fe f99b 	bl	800b794 <BUS_IO_Read>
 800d45e:	4603      	mov	r3, r0
 800d460:	461a      	mov	r2, r3
 800d462:	4b13      	ldr	r3, [pc, #76]	; (800d4b0 <IOPort_readDINS+0x5c>)
 800d464:	801a      	strh	r2, [r3, #0]
	*IOportData.Fans_dash_bit = checkRangePlausi(getbits(busio_read, 1, 1),ERR_FANS_DASH_BIT);
 800d466:	4b13      	ldr	r3, [pc, #76]	; (800d4b4 <IOPort_readDINS+0x60>)
 800d468:	681c      	ldr	r4, [r3, #0]
 800d46a:	4b11      	ldr	r3, [pc, #68]	; (800d4b0 <IOPort_readDINS+0x5c>)
 800d46c:	881b      	ldrh	r3, [r3, #0]
 800d46e:	4618      	mov	r0, r3
 800d470:	2101      	movs	r1, #1
 800d472:	2201      	movs	r2, #1
 800d474:	f000 ff7e 	bl	800e374 <getbits>
 800d478:	4603      	mov	r3, r0
 800d47a:	4618      	mov	r0, r3
 800d47c:	2101      	movs	r1, #1
 800d47e:	f7ff fd57 	bl	800cf30 <checkRangePlausi>
 800d482:	4603      	mov	r3, r0
 800d484:	b2db      	uxtb	r3, r3
 800d486:	7023      	strb	r3, [r4, #0]
	*IOportData.LC_dash_bit = checkRangePlausi(getbits(busio_read, 0, 1),ERR_LC_DASH_BIT);
 800d488:	4b0a      	ldr	r3, [pc, #40]	; (800d4b4 <IOPort_readDINS+0x60>)
 800d48a:	6a1c      	ldr	r4, [r3, #32]
 800d48c:	4b08      	ldr	r3, [pc, #32]	; (800d4b0 <IOPort_readDINS+0x5c>)
 800d48e:	881b      	ldrh	r3, [r3, #0]
 800d490:	4618      	mov	r0, r3
 800d492:	2100      	movs	r1, #0
 800d494:	2201      	movs	r2, #1
 800d496:	f000 ff6d 	bl	800e374 <getbits>
 800d49a:	4603      	mov	r3, r0
 800d49c:	4618      	mov	r0, r3
 800d49e:	2105      	movs	r1, #5
 800d4a0:	f7ff fd46 	bl	800cf30 <checkRangePlausi>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	7023      	strb	r3, [r4, #0]
}
 800d4aa:	bd98      	pop	{r3, r4, r7, pc}
 800d4ac:	20000464 	.word	0x20000464
 800d4b0:	20001344 	.word	0x20001344
 800d4b4:	20001348 	.word	0x20001348

0800d4b8 <IOPort_setPWMOUTS>:

void IOPort_setPWMOUTS()
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	af00      	add	r7, sp, #0
	if(canData.ManualControl_Active) //set manual values if controlled by CANoe
 800d4bc:	4b3a      	ldr	r3, [pc, #232]	; (800d5a8 <IOPort_setPWMOUTS+0xf0>)
 800d4be:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d001      	beq.n	800d4ca <IOPort_setPWMOUTS+0x12>
	{
		ManualControl_setPWMOUTS();
 800d4c6:	f000 fab3 	bl	800da30 <ManualControl_setPWMOUTS>
	}
	//set calculated values if controlled by VCU
	PWM_SetDutyCycle(&PWM_MHJ9_IN, (float)*IOportData.MHJ9_IN/65536*10000);//100% = 10000, var_max = 65536
 800d4ca:	4b38      	ldr	r3, [pc, #224]	; (800d5ac <IOPort_setPWMOUTS+0xf4>)
 800d4cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4ce:	881b      	ldrh	r3, [r3, #0]
 800d4d0:	ee07 3a90 	vmov	s15, r3
 800d4d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4d8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800d5b0 <IOPort_setPWMOUTS+0xf8>
 800d4dc:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d4e0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d5b4 <IOPort_setPWMOUTS+0xfc>
 800d4e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d4e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4ec:	4832      	ldr	r0, [pc, #200]	; (800d5b8 <IOPort_setPWMOUTS+0x100>)
 800d4ee:	ee17 1a90 	vmov	r1, s15
 800d4f2:	f7fa ff5b 	bl	80083ac <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_MHJ9_OUT, (float)*IOportData.MHJ9_OUT/65536*10000);
 800d4f6:	4b2d      	ldr	r3, [pc, #180]	; (800d5ac <IOPort_setPWMOUTS+0xf4>)
 800d4f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4fa:	881b      	ldrh	r3, [r3, #0]
 800d4fc:	ee07 3a90 	vmov	s15, r3
 800d500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d504:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d5b0 <IOPort_setPWMOUTS+0xf8>
 800d508:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d50c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800d5b4 <IOPort_setPWMOUTS+0xfc>
 800d510:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d518:	4828      	ldr	r0, [pc, #160]	; (800d5bc <IOPort_setPWMOUTS+0x104>)
 800d51a:	ee17 1a90 	vmov	r1, s15
 800d51e:	f7fa ff45 	bl	80083ac <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_Waterpump, (float)*IOportData.Waterpump_PWM_active/65536*10000);
 800d522:	4b22      	ldr	r3, [pc, #136]	; (800d5ac <IOPort_setPWMOUTS+0xf4>)
 800d524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d526:	881b      	ldrh	r3, [r3, #0]
 800d528:	ee07 3a90 	vmov	s15, r3
 800d52c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d530:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d5b0 <IOPort_setPWMOUTS+0xf8>
 800d534:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d538:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800d5b4 <IOPort_setPWMOUTS+0xfc>
 800d53c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d544:	481e      	ldr	r0, [pc, #120]	; (800d5c0 <IOPort_setPWMOUTS+0x108>)
 800d546:	ee17 1a90 	vmov	r1, s15
 800d54a:	f7fa ff2f 	bl	80083ac <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_Fans1, (float)*IOportData.Fans1_PWM_active/65536*10000);
 800d54e:	4b17      	ldr	r3, [pc, #92]	; (800d5ac <IOPort_setPWMOUTS+0xf4>)
 800d550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d552:	881b      	ldrh	r3, [r3, #0]
 800d554:	ee07 3a90 	vmov	s15, r3
 800d558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d55c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800d5b0 <IOPort_setPWMOUTS+0xf8>
 800d560:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d564:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800d5b4 <IOPort_setPWMOUTS+0xfc>
 800d568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d56c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d570:	4814      	ldr	r0, [pc, #80]	; (800d5c4 <IOPort_setPWMOUTS+0x10c>)
 800d572:	ee17 1a90 	vmov	r1, s15
 800d576:	f7fa ff19 	bl	80083ac <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_Fans2, (float)*IOportData.Fans2_PWM_active/65536*10000);
 800d57a:	4b0c      	ldr	r3, [pc, #48]	; (800d5ac <IOPort_setPWMOUTS+0xf4>)
 800d57c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d57e:	881b      	ldrh	r3, [r3, #0]
 800d580:	ee07 3a90 	vmov	s15, r3
 800d584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d588:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800d5b0 <IOPort_setPWMOUTS+0xf8>
 800d58c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d590:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800d5b4 <IOPort_setPWMOUTS+0xfc>
 800d594:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d59c:	480a      	ldr	r0, [pc, #40]	; (800d5c8 <IOPort_setPWMOUTS+0x110>)
 800d59e:	ee17 1a90 	vmov	r1, s15
 800d5a2:	f7fa ff03 	bl	80083ac <PWM_SetDutyCycle>
	//PWM_SetFreq(&PWM_Fans1, 1000);//TEST
	//PWM_SetDutyCycle(&PWM_Fans1, 5000);//TEST
}
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	200013c0 	.word	0x200013c0
 800d5ac:	20001348 	.word	0x20001348
 800d5b0:	47800000 	.word	0x47800000
 800d5b4:	461c4000 	.word	0x461c4000
 800d5b8:	20000014 	.word	0x20000014
 800d5bc:	20000048 	.word	0x20000048
 800d5c0:	2000007c 	.word	0x2000007c
 800d5c4:	200000b0 	.word	0x200000b0
 800d5c8:	200000e4 	.word	0x200000e4
 800d5cc:	00000000 	.word	0x00000000

0800d5d0 <IOPort_readAINS>:

void IOPort_readAINS()
{
 800d5d0:	b598      	push	{r3, r4, r7, lr}
 800d5d2:	af00      	add	r7, sp, #0
	*IOportData.x_clutch_STW = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A)/4095.0*5*1000; //5V = 4095
 800d5d4:	4bd4      	ldr	r3, [pc, #848]	; (800d928 <IOPort_readAINS+0x358>)
 800d5d6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800d5d8:	48d4      	ldr	r0, [pc, #848]	; (800d92c <IOPort_readAINS+0x35c>)
 800d5da:	f7fe fae9 	bl	800bbb0 <ADC_MEASUREMENT_GetResult>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f001 fb13 	bl	800ec0c <__aeabi_i2d>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	4610      	mov	r0, r2
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	a3c8      	add	r3, pc, #800	; (adr r3, 800d910 <IOPort_readAINS+0x340>)
 800d5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f4:	f001 fc9a 	bl	800ef2c <__aeabi_ddiv>
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	460b      	mov	r3, r1
 800d5fc:	4610      	mov	r0, r2
 800d5fe:	4619      	mov	r1, r3
 800d600:	f04f 0200 	mov.w	r2, #0
 800d604:	4bca      	ldr	r3, [pc, #808]	; (800d930 <IOPort_readAINS+0x360>)
 800d606:	f001 fb67 	bl	800ecd8 <__aeabi_dmul>
 800d60a:	4602      	mov	r2, r0
 800d60c:	460b      	mov	r3, r1
 800d60e:	4610      	mov	r0, r2
 800d610:	4619      	mov	r1, r3
 800d612:	f04f 0200 	mov.w	r2, #0
 800d616:	4bc7      	ldr	r3, [pc, #796]	; (800d934 <IOPort_readAINS+0x364>)
 800d618:	f001 fb5e 	bl	800ecd8 <__aeabi_dmul>
 800d61c:	4602      	mov	r2, r0
 800d61e:	460b      	mov	r3, r1
 800d620:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.U_Bat = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_B)/4095.0*14.8*1000;
 800d624:	4bc0      	ldr	r3, [pc, #768]	; (800d928 <IOPort_readAINS+0x358>)
 800d626:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800d628:	48c3      	ldr	r0, [pc, #780]	; (800d938 <IOPort_readAINS+0x368>)
 800d62a:	f7fe fac1 	bl	800bbb0 <ADC_MEASUREMENT_GetResult>
 800d62e:	4603      	mov	r3, r0
 800d630:	4618      	mov	r0, r3
 800d632:	f001 faeb 	bl	800ec0c <__aeabi_i2d>
 800d636:	4602      	mov	r2, r0
 800d638:	460b      	mov	r3, r1
 800d63a:	4610      	mov	r0, r2
 800d63c:	4619      	mov	r1, r3
 800d63e:	a3b4      	add	r3, pc, #720	; (adr r3, 800d910 <IOPort_readAINS+0x340>)
 800d640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d644:	f001 fc72 	bl	800ef2c <__aeabi_ddiv>
 800d648:	4602      	mov	r2, r0
 800d64a:	460b      	mov	r3, r1
 800d64c:	4610      	mov	r0, r2
 800d64e:	4619      	mov	r1, r3
 800d650:	a3b1      	add	r3, pc, #708	; (adr r3, 800d918 <IOPort_readAINS+0x348>)
 800d652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d656:	f001 fb3f 	bl	800ecd8 <__aeabi_dmul>
 800d65a:	4602      	mov	r2, r0
 800d65c:	460b      	mov	r3, r1
 800d65e:	4610      	mov	r0, r2
 800d660:	4619      	mov	r1, r3
 800d662:	f04f 0200 	mov.w	r2, #0
 800d666:	4bb3      	ldr	r3, [pc, #716]	; (800d934 <IOPort_readAINS+0x364>)
 800d668:	f001 fb36 	bl	800ecd8 <__aeabi_dmul>
 800d66c:	4602      	mov	r2, r0
 800d66e:	460b      	mov	r3, r1
 800d670:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.x_RH_F = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_C)/4095.0*12*1000;
 800d674:	4bac      	ldr	r3, [pc, #688]	; (800d928 <IOPort_readAINS+0x358>)
 800d676:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d678:	48b0      	ldr	r0, [pc, #704]	; (800d93c <IOPort_readAINS+0x36c>)
 800d67a:	f7fe fa99 	bl	800bbb0 <ADC_MEASUREMENT_GetResult>
 800d67e:	4603      	mov	r3, r0
 800d680:	4618      	mov	r0, r3
 800d682:	f001 fac3 	bl	800ec0c <__aeabi_i2d>
 800d686:	4602      	mov	r2, r0
 800d688:	460b      	mov	r3, r1
 800d68a:	4610      	mov	r0, r2
 800d68c:	4619      	mov	r1, r3
 800d68e:	a3a0      	add	r3, pc, #640	; (adr r3, 800d910 <IOPort_readAINS+0x340>)
 800d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d694:	f001 fc4a 	bl	800ef2c <__aeabi_ddiv>
 800d698:	4602      	mov	r2, r0
 800d69a:	460b      	mov	r3, r1
 800d69c:	4610      	mov	r0, r2
 800d69e:	4619      	mov	r1, r3
 800d6a0:	f04f 0200 	mov.w	r2, #0
 800d6a4:	4ba6      	ldr	r3, [pc, #664]	; (800d940 <IOPort_readAINS+0x370>)
 800d6a6:	f001 fb17 	bl	800ecd8 <__aeabi_dmul>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	4610      	mov	r0, r2
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	f04f 0200 	mov.w	r2, #0
 800d6b6:	4b9f      	ldr	r3, [pc, #636]	; (800d934 <IOPort_readAINS+0x364>)
 800d6b8:	f001 fb0e 	bl	800ecd8 <__aeabi_dmul>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	460b      	mov	r3, r1
 800d6c0:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.f_FR = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_D)/4095.0*5*1000;
 800d6c4:	4b98      	ldr	r3, [pc, #608]	; (800d928 <IOPort_readAINS+0x358>)
 800d6c6:	695c      	ldr	r4, [r3, #20]
 800d6c8:	489e      	ldr	r0, [pc, #632]	; (800d944 <IOPort_readAINS+0x374>)
 800d6ca:	f7fe fa71 	bl	800bbb0 <ADC_MEASUREMENT_GetResult>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f001 fa9b 	bl	800ec0c <__aeabi_i2d>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	460b      	mov	r3, r1
 800d6da:	4610      	mov	r0, r2
 800d6dc:	4619      	mov	r1, r3
 800d6de:	a38c      	add	r3, pc, #560	; (adr r3, 800d910 <IOPort_readAINS+0x340>)
 800d6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e4:	f001 fc22 	bl	800ef2c <__aeabi_ddiv>
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	460b      	mov	r3, r1
 800d6ec:	4610      	mov	r0, r2
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	f04f 0200 	mov.w	r2, #0
 800d6f4:	4b8e      	ldr	r3, [pc, #568]	; (800d930 <IOPort_readAINS+0x360>)
 800d6f6:	f001 faef 	bl	800ecd8 <__aeabi_dmul>
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	4610      	mov	r0, r2
 800d700:	4619      	mov	r1, r3
 800d702:	f04f 0200 	mov.w	r2, #0
 800d706:	4b8b      	ldr	r3, [pc, #556]	; (800d934 <IOPort_readAINS+0x364>)
 800d708:	f001 fae6 	bl	800ecd8 <__aeabi_dmul>
 800d70c:	4602      	mov	r2, r0
 800d70e:	460b      	mov	r3, r1
 800d710:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.f_FL = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_E)/4095.0*5*1000;
 800d714:	4b84      	ldr	r3, [pc, #528]	; (800d928 <IOPort_readAINS+0x358>)
 800d716:	691c      	ldr	r4, [r3, #16]
 800d718:	488b      	ldr	r0, [pc, #556]	; (800d948 <IOPort_readAINS+0x378>)
 800d71a:	f7fe fa49 	bl	800bbb0 <ADC_MEASUREMENT_GetResult>
 800d71e:	4603      	mov	r3, r0
 800d720:	4618      	mov	r0, r3
 800d722:	f001 fa73 	bl	800ec0c <__aeabi_i2d>
 800d726:	4602      	mov	r2, r0
 800d728:	460b      	mov	r3, r1
 800d72a:	4610      	mov	r0, r2
 800d72c:	4619      	mov	r1, r3
 800d72e:	a378      	add	r3, pc, #480	; (adr r3, 800d910 <IOPort_readAINS+0x340>)
 800d730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d734:	f001 fbfa 	bl	800ef2c <__aeabi_ddiv>
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	4610      	mov	r0, r2
 800d73e:	4619      	mov	r1, r3
 800d740:	f04f 0200 	mov.w	r2, #0
 800d744:	4b7a      	ldr	r3, [pc, #488]	; (800d930 <IOPort_readAINS+0x360>)
 800d746:	f001 fac7 	bl	800ecd8 <__aeabi_dmul>
 800d74a:	4602      	mov	r2, r0
 800d74c:	460b      	mov	r3, r1
 800d74e:	4610      	mov	r0, r2
 800d750:	4619      	mov	r1, r3
 800d752:	f04f 0200 	mov.w	r2, #0
 800d756:	4b77      	ldr	r3, [pc, #476]	; (800d934 <IOPort_readAINS+0x364>)
 800d758:	f001 fabe 	bl	800ecd8 <__aeabi_dmul>
 800d75c:	4602      	mov	r2, r0
 800d75e:	460b      	mov	r3, r1
 800d760:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.x_clutch = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_F)/4095.0*5*1000;
 800d764:	4b70      	ldr	r3, [pc, #448]	; (800d928 <IOPort_readAINS+0x358>)
 800d766:	68dc      	ldr	r4, [r3, #12]
 800d768:	4878      	ldr	r0, [pc, #480]	; (800d94c <IOPort_readAINS+0x37c>)
 800d76a:	f7fe fa21 	bl	800bbb0 <ADC_MEASUREMENT_GetResult>
 800d76e:	4603      	mov	r3, r0
 800d770:	4618      	mov	r0, r3
 800d772:	f001 fa4b 	bl	800ec0c <__aeabi_i2d>
 800d776:	4602      	mov	r2, r0
 800d778:	460b      	mov	r3, r1
 800d77a:	4610      	mov	r0, r2
 800d77c:	4619      	mov	r1, r3
 800d77e:	a364      	add	r3, pc, #400	; (adr r3, 800d910 <IOPort_readAINS+0x340>)
 800d780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d784:	f001 fbd2 	bl	800ef2c <__aeabi_ddiv>
 800d788:	4602      	mov	r2, r0
 800d78a:	460b      	mov	r3, r1
 800d78c:	4610      	mov	r0, r2
 800d78e:	4619      	mov	r1, r3
 800d790:	f04f 0200 	mov.w	r2, #0
 800d794:	4b66      	ldr	r3, [pc, #408]	; (800d930 <IOPort_readAINS+0x360>)
 800d796:	f001 fa9f 	bl	800ecd8 <__aeabi_dmul>
 800d79a:	4602      	mov	r2, r0
 800d79c:	460b      	mov	r3, r1
 800d79e:	4610      	mov	r0, r2
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	f04f 0200 	mov.w	r2, #0
 800d7a6:	4b63      	ldr	r3, [pc, #396]	; (800d934 <IOPort_readAINS+0x364>)
 800d7a8:	f001 fa96 	bl	800ecd8 <__aeabi_dmul>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.p_brake_R = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_G)/4095.0*5*1000;
 800d7b4:	4b5c      	ldr	r3, [pc, #368]	; (800d928 <IOPort_readAINS+0x358>)
 800d7b6:	685c      	ldr	r4, [r3, #4]
 800d7b8:	4865      	ldr	r0, [pc, #404]	; (800d950 <IOPort_readAINS+0x380>)
 800d7ba:	f7fe f9f9 	bl	800bbb0 <ADC_MEASUREMENT_GetResult>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f001 fa23 	bl	800ec0c <__aeabi_i2d>
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	4610      	mov	r0, r2
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	a350      	add	r3, pc, #320	; (adr r3, 800d910 <IOPort_readAINS+0x340>)
 800d7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d4:	f001 fbaa 	bl	800ef2c <__aeabi_ddiv>
 800d7d8:	4602      	mov	r2, r0
 800d7da:	460b      	mov	r3, r1
 800d7dc:	4610      	mov	r0, r2
 800d7de:	4619      	mov	r1, r3
 800d7e0:	f04f 0200 	mov.w	r2, #0
 800d7e4:	4b52      	ldr	r3, [pc, #328]	; (800d930 <IOPort_readAINS+0x360>)
 800d7e6:	f001 fa77 	bl	800ecd8 <__aeabi_dmul>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	4610      	mov	r0, r2
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	f04f 0200 	mov.w	r2, #0
 800d7f6:	4b4f      	ldr	r3, [pc, #316]	; (800d934 <IOPort_readAINS+0x364>)
 800d7f8:	f001 fa6e 	bl	800ecd8 <__aeabi_dmul>
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	460b      	mov	r3, r1
 800d800:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.boardTemp = NTC_Calc(ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_H));
 800d804:	4b48      	ldr	r3, [pc, #288]	; (800d928 <IOPort_readAINS+0x358>)
 800d806:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800d808:	4852      	ldr	r0, [pc, #328]	; (800d954 <IOPort_readAINS+0x384>)
 800d80a:	f7fe f9d1 	bl	800bbb0 <ADC_MEASUREMENT_GetResult>
 800d80e:	4603      	mov	r3, r0
 800d810:	4618      	mov	r0, r3
 800d812:	f001 f9eb 	bl	800ebec <__aeabi_ui2d>
 800d816:	4602      	mov	r2, r0
 800d818:	460b      	mov	r3, r1
 800d81a:	4610      	mov	r0, r2
 800d81c:	4619      	mov	r1, r3
 800d81e:	f000 f9ab 	bl	800db78 <NTC_Calc>
 800d822:	4602      	mov	r2, r0
 800d824:	460b      	mov	r3, r1
 800d826:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.TR1_VSense_WP = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_I)/4095.0*3.3*1000;
 800d82a:	4b3f      	ldr	r3, [pc, #252]	; (800d928 <IOPort_readAINS+0x358>)
 800d82c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800d82e:	484a      	ldr	r0, [pc, #296]	; (800d958 <IOPort_readAINS+0x388>)
 800d830:	f7fe f9be 	bl	800bbb0 <ADC_MEASUREMENT_GetResult>
 800d834:	4603      	mov	r3, r0
 800d836:	4618      	mov	r0, r3
 800d838:	f001 f9e8 	bl	800ec0c <__aeabi_i2d>
 800d83c:	4602      	mov	r2, r0
 800d83e:	460b      	mov	r3, r1
 800d840:	4610      	mov	r0, r2
 800d842:	4619      	mov	r1, r3
 800d844:	a332      	add	r3, pc, #200	; (adr r3, 800d910 <IOPort_readAINS+0x340>)
 800d846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84a:	f001 fb6f 	bl	800ef2c <__aeabi_ddiv>
 800d84e:	4602      	mov	r2, r0
 800d850:	460b      	mov	r3, r1
 800d852:	4610      	mov	r0, r2
 800d854:	4619      	mov	r1, r3
 800d856:	a332      	add	r3, pc, #200	; (adr r3, 800d920 <IOPort_readAINS+0x350>)
 800d858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85c:	f001 fa3c 	bl	800ecd8 <__aeabi_dmul>
 800d860:	4602      	mov	r2, r0
 800d862:	460b      	mov	r3, r1
 800d864:	4610      	mov	r0, r2
 800d866:	4619      	mov	r1, r3
 800d868:	f04f 0200 	mov.w	r2, #0
 800d86c:	4b31      	ldr	r3, [pc, #196]	; (800d934 <IOPort_readAINS+0x364>)
 800d86e:	f001 fa33 	bl	800ecd8 <__aeabi_dmul>
 800d872:	4602      	mov	r2, r0
 800d874:	460b      	mov	r3, r1
 800d876:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.TR2_VSense_FAN1 = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_J)/4095.0*3.3*1000;
 800d87a:	4b2b      	ldr	r3, [pc, #172]	; (800d928 <IOPort_readAINS+0x358>)
 800d87c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800d87e:	4837      	ldr	r0, [pc, #220]	; (800d95c <IOPort_readAINS+0x38c>)
 800d880:	f7fe f996 	bl	800bbb0 <ADC_MEASUREMENT_GetResult>
 800d884:	4603      	mov	r3, r0
 800d886:	4618      	mov	r0, r3
 800d888:	f001 f9c0 	bl	800ec0c <__aeabi_i2d>
 800d88c:	4602      	mov	r2, r0
 800d88e:	460b      	mov	r3, r1
 800d890:	4610      	mov	r0, r2
 800d892:	4619      	mov	r1, r3
 800d894:	a31e      	add	r3, pc, #120	; (adr r3, 800d910 <IOPort_readAINS+0x340>)
 800d896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89a:	f001 fb47 	bl	800ef2c <__aeabi_ddiv>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	4610      	mov	r0, r2
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	a31e      	add	r3, pc, #120	; (adr r3, 800d920 <IOPort_readAINS+0x350>)
 800d8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ac:	f001 fa14 	bl	800ecd8 <__aeabi_dmul>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	4610      	mov	r0, r2
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	f04f 0200 	mov.w	r2, #0
 800d8bc:	4b1d      	ldr	r3, [pc, #116]	; (800d934 <IOPort_readAINS+0x364>)
 800d8be:	f001 fa0b 	bl	800ecd8 <__aeabi_dmul>
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.TR3_VSense_FAN2 = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_K)/4095.0*3.3*1000;
 800d8ca:	4b17      	ldr	r3, [pc, #92]	; (800d928 <IOPort_readAINS+0x358>)
 800d8cc:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800d8ce:	4824      	ldr	r0, [pc, #144]	; (800d960 <IOPort_readAINS+0x390>)
 800d8d0:	f7fe f96e 	bl	800bbb0 <ADC_MEASUREMENT_GetResult>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f001 f998 	bl	800ec0c <__aeabi_i2d>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	460b      	mov	r3, r1
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	a30a      	add	r3, pc, #40	; (adr r3, 800d910 <IOPort_readAINS+0x340>)
 800d8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ea:	f001 fb1f 	bl	800ef2c <__aeabi_ddiv>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	4610      	mov	r0, r2
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	a30a      	add	r3, pc, #40	; (adr r3, 800d920 <IOPort_readAINS+0x350>)
 800d8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fc:	f001 f9ec 	bl	800ecd8 <__aeabi_dmul>
 800d900:	4602      	mov	r2, r0
 800d902:	460b      	mov	r3, r1
 800d904:	4610      	mov	r0, r2
 800d906:	4619      	mov	r1, r3
 800d908:	f04f 0200 	mov.w	r2, #0
 800d90c:	e02a      	b.n	800d964 <IOPort_readAINS+0x394>
 800d90e:	bf00      	nop
 800d910:	00000000 	.word	0x00000000
 800d914:	40affe00 	.word	0x40affe00
 800d918:	9999999a 	.word	0x9999999a
 800d91c:	402d9999 	.word	0x402d9999
 800d920:	66666666 	.word	0x66666666
 800d924:	400a6666 	.word	0x400a6666
 800d928:	20001348 	.word	0x20001348
 800d92c:	20000484 	.word	0x20000484
 800d930:	40140000 	.word	0x40140000
 800d934:	408f4000 	.word	0x408f4000
 800d938:	200004a4 	.word	0x200004a4
 800d93c:	200004c4 	.word	0x200004c4
 800d940:	40280000 	.word	0x40280000
 800d944:	200004e4 	.word	0x200004e4
 800d948:	20000504 	.word	0x20000504
 800d94c:	20000524 	.word	0x20000524
 800d950:	20000544 	.word	0x20000544
 800d954:	20000564 	.word	0x20000564
 800d958:	20000584 	.word	0x20000584
 800d95c:	200005a4 	.word	0x200005a4
 800d960:	200005c4 	.word	0x200005c4
 800d964:	4b03      	ldr	r3, [pc, #12]	; (800d974 <IOPort_readAINS+0x3a4>)
 800d966:	f001 f9b7 	bl	800ecd8 <__aeabi_dmul>
 800d96a:	4602      	mov	r2, r0
 800d96c:	460b      	mov	r3, r1
 800d96e:	e9c4 2300 	strd	r2, r3, [r4]
	//int test2 = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_H);
  }
 800d972:	bd98      	pop	{r3, r4, r7, pc}
 800d974:	408f4000 	.word	0x408f4000

0800d978 <ERU0_3_IRQHandler>:

void Interrupt_Shifting(void)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	af00      	add	r7, sp, #0
	shiftUpInterrupt = DIGITAL_IO_GetInput(&Signal_UpShift);
 800d97c:	4807      	ldr	r0, [pc, #28]	; (800d99c <ERU0_3_IRQHandler+0x24>)
 800d97e:	f7ff fc69 	bl	800d254 <DIGITAL_IO_GetInput>
 800d982:	4603      	mov	r3, r0
 800d984:	b2da      	uxtb	r2, r3
 800d986:	4b06      	ldr	r3, [pc, #24]	; (800d9a0 <ERU0_3_IRQHandler+0x28>)
 800d988:	701a      	strb	r2, [r3, #0]
	shiftDownInterrupt = DIGITAL_IO_GetInput(&Signal_DownShift);
 800d98a:	4806      	ldr	r0, [pc, #24]	; (800d9a4 <ERU0_3_IRQHandler+0x2c>)
 800d98c:	f7ff fc62 	bl	800d254 <DIGITAL_IO_GetInput>
 800d990:	4603      	mov	r3, r0
 800d992:	b2da      	uxtb	r2, r3
 800d994:	4b04      	ldr	r3, [pc, #16]	; (800d9a8 <ERU0_3_IRQHandler+0x30>)
 800d996:	701a      	strb	r2, [r3, #0]
}
 800d998:	bd80      	pop	{r7, pc}
 800d99a:	bf00      	nop
 800d99c:	0800f8fc 	.word	0x0800f8fc
 800d9a0:	200012f8 	.word	0x200012f8
 800d9a4:	0800f8e8 	.word	0x0800f8e8
 800d9a8:	200012d8 	.word	0x200012d8

0800d9ac <ManualControl_setDOUTS>:

void ManualControl_setDOUTS()
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	af00      	add	r7, sp, #0
	if(canData.ManConOn_VOVGShiftUp)
 800d9b0:	4b1d      	ldr	r3, [pc, #116]	; (800da28 <ManualControl_setDOUTS+0x7c>)
 800d9b2:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d005      	beq.n	800d9c6 <ManualControl_setDOUTS+0x1a>
	  *IOportData.VOVG_ShiftUp = canData.ManConVar_VOVGShiftUp;
 800d9ba:	4b1c      	ldr	r3, [pc, #112]	; (800da2c <ManualControl_setDOUTS+0x80>)
 800d9bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9be:	4a1a      	ldr	r2, [pc, #104]	; (800da28 <ManualControl_setDOUTS+0x7c>)
 800d9c0:	f892 2161 	ldrb.w	r2, [r2, #353]	; 0x161
 800d9c4:	701a      	strb	r2, [r3, #0]

	if(canData.ManConOn_VOVGShiftDown)
 800d9c6:	4b18      	ldr	r3, [pc, #96]	; (800da28 <ManualControl_setDOUTS+0x7c>)
 800d9c8:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d005      	beq.n	800d9dc <ManualControl_setDOUTS+0x30>
	  *IOportData.VOVG_ShiftDown = canData.ManConVar_VOVGShiftDown;
 800d9d0:	4b16      	ldr	r3, [pc, #88]	; (800da2c <ManualControl_setDOUTS+0x80>)
 800d9d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9d4:	4a14      	ldr	r2, [pc, #80]	; (800da28 <ManualControl_setDOUTS+0x7c>)
 800d9d6:	f892 2160 	ldrb.w	r2, [r2, #352]	; 0x160
 800d9da:	701a      	strb	r2, [r3, #0]

	if(canData.ManConOn_IgnCut)
 800d9dc:	4b12      	ldr	r3, [pc, #72]	; (800da28 <ManualControl_setDOUTS+0x7c>)
 800d9de:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d005      	beq.n	800d9f2 <ManualControl_setDOUTS+0x46>
	  *IOportData.Ignition_Cut = canData.ManConVar_IgnCut;
 800d9e6:	4b11      	ldr	r3, [pc, #68]	; (800da2c <ManualControl_setDOUTS+0x80>)
 800d9e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9ea:	4a0f      	ldr	r2, [pc, #60]	; (800da28 <ManualControl_setDOUTS+0x7c>)
 800d9ec:	f892 2162 	ldrb.w	r2, [r2, #354]	; 0x162
 800d9f0:	701a      	strb	r2, [r3, #0]

	if(canData.ManConOn_VOVG_IN)
 800d9f2:	4b0d      	ldr	r3, [pc, #52]	; (800da28 <ManualControl_setDOUTS+0x7c>)
 800d9f4:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d005      	beq.n	800da08 <ManualControl_setDOUTS+0x5c>
	  *IOportData.VOVG_IN = canData.ManConVar_VOVG_IN;
 800d9fc:	4b0b      	ldr	r3, [pc, #44]	; (800da2c <ManualControl_setDOUTS+0x80>)
 800d9fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da00:	4a09      	ldr	r2, [pc, #36]	; (800da28 <ManualControl_setDOUTS+0x7c>)
 800da02:	f892 2163 	ldrb.w	r2, [r2, #355]	; 0x163
 800da06:	701a      	strb	r2, [r3, #0]

	if(canData.ManConOn_VOVG_OUT)
 800da08:	4b07      	ldr	r3, [pc, #28]	; (800da28 <ManualControl_setDOUTS+0x7c>)
 800da0a:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d005      	beq.n	800da1e <ManualControl_setDOUTS+0x72>
	  *IOportData.VOVG_OUT = canData.ManConVar_VOVG_OUT;
 800da12:	4b06      	ldr	r3, [pc, #24]	; (800da2c <ManualControl_setDOUTS+0x80>)
 800da14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da16:	4a04      	ldr	r2, [pc, #16]	; (800da28 <ManualControl_setDOUTS+0x7c>)
 800da18:	f892 2164 	ldrb.w	r2, [r2, #356]	; 0x164
 800da1c:	701a      	strb	r2, [r3, #0]
}
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	200013c0 	.word	0x200013c0
 800da2c:	20001348 	.word	0x20001348

0800da30 <ManualControl_setPWMOUTS>:

void ManualControl_setPWMOUTS()
{
 800da30:	b480      	push	{r7}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
	if(canData.ManConOn_MHJ9_IN)
 800da36:	4b4b      	ldr	r3, [pc, #300]	; (800db64 <ManualControl_setPWMOUTS+0x134>)
 800da38:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d017      	beq.n	800da70 <ManualControl_setPWMOUTS+0x40>
	  *IOportData.MHJ9_IN = (float)canData.ManConVar_MHJ9_IN/100*65536;
 800da40:	4b49      	ldr	r3, [pc, #292]	; (800db68 <ManualControl_setPWMOUTS+0x138>)
 800da42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da44:	4a47      	ldr	r2, [pc, #284]	; (800db64 <ManualControl_setPWMOUTS+0x134>)
 800da46:	f892 215b 	ldrb.w	r2, [r2, #347]	; 0x15b
 800da4a:	ee07 2a90 	vmov	s15, r2
 800da4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da52:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800db6c <ManualControl_setPWMOUTS+0x13c>
 800da56:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800da5a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800db70 <ManualControl_setPWMOUTS+0x140>
 800da5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da66:	edc7 7a01 	vstr	s15, [r7, #4]
 800da6a:	88ba      	ldrh	r2, [r7, #4]
 800da6c:	b292      	uxth	r2, r2
 800da6e:	801a      	strh	r2, [r3, #0]

	if(canData.ManConOn_MHJ9_OUT)
 800da70:	4b3c      	ldr	r3, [pc, #240]	; (800db64 <ManualControl_setPWMOUTS+0x134>)
 800da72:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 800da76:	2b00      	cmp	r3, #0
 800da78:	d017      	beq.n	800daaa <ManualControl_setPWMOUTS+0x7a>
	  *IOportData.MHJ9_OUT = (float)canData.ManConVar_MHJ9_OUT/100*65536;
 800da7a:	4b3b      	ldr	r3, [pc, #236]	; (800db68 <ManualControl_setPWMOUTS+0x138>)
 800da7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da7e:	4a39      	ldr	r2, [pc, #228]	; (800db64 <ManualControl_setPWMOUTS+0x134>)
 800da80:	f892 215c 	ldrb.w	r2, [r2, #348]	; 0x15c
 800da84:	ee07 2a90 	vmov	s15, r2
 800da88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da8c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800db6c <ManualControl_setPWMOUTS+0x13c>
 800da90:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800da94:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800db70 <ManualControl_setPWMOUTS+0x140>
 800da98:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daa0:	edc7 7a01 	vstr	s15, [r7, #4]
 800daa4:	88ba      	ldrh	r2, [r7, #4]
 800daa6:	b292      	uxth	r2, r2
 800daa8:	801a      	strh	r2, [r3, #0]

	if(canData.ManConOn_Waterpump)
 800daaa:	4b2e      	ldr	r3, [pc, #184]	; (800db64 <ManualControl_setPWMOUTS+0x134>)
 800daac:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d017      	beq.n	800dae4 <ManualControl_setPWMOUTS+0xb4>
	  *IOportData.Waterpump_PWM_active = (float)canData.ManConVar_Waterpump/100*65536;
 800dab4:	4b2c      	ldr	r3, [pc, #176]	; (800db68 <ManualControl_setPWMOUTS+0x138>)
 800dab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dab8:	4a2a      	ldr	r2, [pc, #168]	; (800db64 <ManualControl_setPWMOUTS+0x134>)
 800daba:	f892 215d 	ldrb.w	r2, [r2, #349]	; 0x15d
 800dabe:	ee07 2a90 	vmov	s15, r2
 800dac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dac6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800db6c <ManualControl_setPWMOUTS+0x13c>
 800daca:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800dace:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800db70 <ManualControl_setPWMOUTS+0x140>
 800dad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dada:	edc7 7a01 	vstr	s15, [r7, #4]
 800dade:	88ba      	ldrh	r2, [r7, #4]
 800dae0:	b292      	uxth	r2, r2
 800dae2:	801a      	strh	r2, [r3, #0]

	if(canData.ManConOn_Fans1)
 800dae4:	4b1f      	ldr	r3, [pc, #124]	; (800db64 <ManualControl_setPWMOUTS+0x134>)
 800dae6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800daea:	2b00      	cmp	r3, #0
 800daec:	d017      	beq.n	800db1e <ManualControl_setPWMOUTS+0xee>
	  *IOportData.Fans1_PWM_active = (float)canData.ManConVar_Fans1/100*65536;
 800daee:	4b1e      	ldr	r3, [pc, #120]	; (800db68 <ManualControl_setPWMOUTS+0x138>)
 800daf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daf2:	4a1c      	ldr	r2, [pc, #112]	; (800db64 <ManualControl_setPWMOUTS+0x134>)
 800daf4:	f892 215e 	ldrb.w	r2, [r2, #350]	; 0x15e
 800daf8:	ee07 2a90 	vmov	s15, r2
 800dafc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db00:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800db6c <ManualControl_setPWMOUTS+0x13c>
 800db04:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800db08:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800db70 <ManualControl_setPWMOUTS+0x140>
 800db0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db14:	edc7 7a01 	vstr	s15, [r7, #4]
 800db18:	88ba      	ldrh	r2, [r7, #4]
 800db1a:	b292      	uxth	r2, r2
 800db1c:	801a      	strh	r2, [r3, #0]

	if(canData.ManConOn_Fans2)
 800db1e:	4b11      	ldr	r3, [pc, #68]	; (800db64 <ManualControl_setPWMOUTS+0x134>)
 800db20:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800db24:	2b00      	cmp	r3, #0
 800db26:	d017      	beq.n	800db58 <ManualControl_setPWMOUTS+0x128>
	  *IOportData.Fans2_PWM_active = (float)canData.ManConVar_Fans2/100*65536;
 800db28:	4b0f      	ldr	r3, [pc, #60]	; (800db68 <ManualControl_setPWMOUTS+0x138>)
 800db2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db2c:	4a0d      	ldr	r2, [pc, #52]	; (800db64 <ManualControl_setPWMOUTS+0x134>)
 800db2e:	f892 215f 	ldrb.w	r2, [r2, #351]	; 0x15f
 800db32:	ee07 2a90 	vmov	s15, r2
 800db36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db3a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800db6c <ManualControl_setPWMOUTS+0x13c>
 800db3e:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800db42:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800db70 <ManualControl_setPWMOUTS+0x140>
 800db46:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db4e:	edc7 7a01 	vstr	s15, [r7, #4]
 800db52:	88ba      	ldrh	r2, [r7, #4]
 800db54:	b292      	uxth	r2, r2
 800db56:	801a      	strh	r2, [r3, #0]
}
 800db58:	370c      	adds	r7, #12
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop
 800db64:	200013c0 	.word	0x200013c0
 800db68:	20001348 	.word	0x20001348
 800db6c:	42c80000 	.word	0x42c80000
 800db70:	47800000 	.word	0x47800000
 800db74:	00000000 	.word	0x00000000

0800db78 <NTC_Calc>:

double NTC_Calc(double Temp)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b098      	sub	sp, #96	; 0x60
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	e9c7 0100 	strd	r0, r1, [r7]
			int NTC_LUT_NB_POINT = 6;
 800db82:	2306      	movs	r3, #6
 800db84:	64bb      	str	r3, [r7, #72]	; 0x48
			int i;
			uint16_t Temp_Val;
			float x0,y0,x1,y1,a,b;
			uint32_t LUT_NTC_V[6]={0};
 800db86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db8a:	2200      	movs	r2, #0
 800db8c:	601a      	str	r2, [r3, #0]
 800db8e:	3304      	adds	r3, #4
 800db90:	2200      	movs	r2, #0
 800db92:	601a      	str	r2, [r3, #0]
 800db94:	3304      	adds	r3, #4
 800db96:	2200      	movs	r2, #0
 800db98:	601a      	str	r2, [r3, #0]
 800db9a:	3304      	adds	r3, #4
 800db9c:	2200      	movs	r2, #0
 800db9e:	601a      	str	r2, [r3, #0]
 800dba0:	3304      	adds	r3, #4
 800dba2:	2200      	movs	r2, #0
 800dba4:	601a      	str	r2, [r3, #0]
 800dba6:	3304      	adds	r3, #4
 800dba8:	2200      	movs	r2, #0
 800dbaa:	601a      	str	r2, [r3, #0]
 800dbac:	3304      	adds	r3, #4
			float LUT_NTC[6]={0};
 800dbae:	f107 030c 	add.w	r3, r7, #12
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	601a      	str	r2, [r3, #0]
 800dbb6:	3304      	adds	r3, #4
 800dbb8:	2200      	movs	r2, #0
 800dbba:	601a      	str	r2, [r3, #0]
 800dbbc:	3304      	adds	r3, #4
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	601a      	str	r2, [r3, #0]
 800dbc2:	3304      	adds	r3, #4
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	601a      	str	r2, [r3, #0]
 800dbc8:	3304      	adds	r3, #4
 800dbca:	2200      	movs	r2, #0
 800dbcc:	601a      	str	r2, [r3, #0]
 800dbce:	3304      	adds	r3, #4
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	601a      	str	r2, [r3, #0]
 800dbd4:	3304      	adds	r3, #4

			LUT_NTC_V[0] = 140;
 800dbd6:	238c      	movs	r3, #140	; 0x8c
 800dbd8:	627b      	str	r3, [r7, #36]	; 0x24
			LUT_NTC_V[1] = 283;
 800dbda:	f240 131b 	movw	r3, #283	; 0x11b
 800dbde:	62bb      	str	r3, [r7, #40]	; 0x28
			LUT_NTC_V[2] = 602;
 800dbe0:	f240 235a 	movw	r3, #602	; 0x25a
 800dbe4:	62fb      	str	r3, [r7, #44]	; 0x2c
			LUT_NTC_V[3] = 1288;
 800dbe6:	f44f 63a1 	mov.w	r3, #1288	; 0x508
 800dbea:	633b      	str	r3, [r7, #48]	; 0x30
			LUT_NTC_V[4] = 2500;
 800dbec:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800dbf0:	637b      	str	r3, [r7, #52]	; 0x34
			LUT_NTC_V[5] = 3850;
 800dbf2:	f640 730a 	movw	r3, #3850	; 0xf0a
 800dbf6:	63bb      	str	r3, [r7, #56]	; 0x38

		    LUT_NTC[0] = 125;
 800dbf8:	4b77      	ldr	r3, [pc, #476]	; (800ddd8 <NTC_Calc+0x260>)
 800dbfa:	60fb      	str	r3, [r7, #12]
			LUT_NTC[1] = 100;
 800dbfc:	4b77      	ldr	r3, [pc, #476]	; (800dddc <NTC_Calc+0x264>)
 800dbfe:	613b      	str	r3, [r7, #16]
			LUT_NTC[2] = 75;
 800dc00:	4b77      	ldr	r3, [pc, #476]	; (800dde0 <NTC_Calc+0x268>)
 800dc02:	617b      	str	r3, [r7, #20]
			LUT_NTC[3] = 50;
 800dc04:	4b77      	ldr	r3, [pc, #476]	; (800dde4 <NTC_Calc+0x26c>)
 800dc06:	61bb      	str	r3, [r7, #24]
			LUT_NTC[4] = 25;
 800dc08:	4b77      	ldr	r3, [pc, #476]	; (800dde8 <NTC_Calc+0x270>)
 800dc0a:	61fb      	str	r3, [r7, #28]
			LUT_NTC[5] = 0;
 800dc0c:	f04f 0300 	mov.w	r3, #0
 800dc10:	623b      	str	r3, [r7, #32]

			i=0;
 800dc12:	2300      	movs	r3, #0
 800dc14:	65fb      	str	r3, [r7, #92]	; 0x5c
			Temp_Val = ((Temp)*5000/4095);
 800dc16:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dc1a:	a36b      	add	r3, pc, #428	; (adr r3, 800ddc8 <NTC_Calc+0x250>)
 800dc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc20:	f001 f85a 	bl	800ecd8 <__aeabi_dmul>
 800dc24:	4602      	mov	r2, r0
 800dc26:	460b      	mov	r3, r1
 800dc28:	4610      	mov	r0, r2
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	a368      	add	r3, pc, #416	; (adr r3, 800ddd0 <NTC_Calc+0x258>)
 800dc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc32:	f001 f97b 	bl	800ef2c <__aeabi_ddiv>
 800dc36:	4602      	mov	r2, r0
 800dc38:	460b      	mov	r3, r1
 800dc3a:	4610      	mov	r0, r2
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	f001 fae5 	bl	800f20c <__aeabi_d2uiz>
 800dc42:	4603      	mov	r3, r0
 800dc44:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			while(i<NTC_LUT_NB_POINT && LUT_NTC_V[i]<=Temp_Val) i++;
 800dc48:	e002      	b.n	800dc50 <NTC_Calc+0xd8>
 800dc4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc4c:	3301      	adds	r3, #1
 800dc4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc54:	429a      	cmp	r2, r3
 800dc56:	da0a      	bge.n	800dc6e <NTC_Calc+0xf6>
 800dc58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dc60:	4413      	add	r3, r2
 800dc62:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800dc66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d9ed      	bls.n	800dc4a <NTC_Calc+0xd2>
			if(i==0){
 800dc6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d112      	bne.n	800dc9a <NTC_Calc+0x122>
				x0 = LUT_NTC_V[0];
 800dc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc76:	ee07 3a90 	vmov	s15, r3
 800dc7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc7e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				y0 = LUT_NTC[0];
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	657b      	str	r3, [r7, #84]	; 0x54
				x1 = LUT_NTC_V[1];
 800dc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc88:	ee07 3a90 	vmov	s15, r3
 800dc8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc90:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				y1 = LUT_NTC[1];
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc98:	e05e      	b.n	800dd58 <NTC_Calc+0x1e0>
			}
			else if(i==NTC_LUT_NB_POINT){
 800dc9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d12e      	bne.n	800dd00 <NTC_Calc+0x188>
				x0 = LUT_NTC_V[NTC_LUT_NB_POINT-2];
 800dca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dca4:	3b02      	subs	r3, #2
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dcac:	4413      	add	r3, r2
 800dcae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800dcb2:	ee07 3a90 	vmov	s15, r3
 800dcb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcba:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				y0 = LUT_NTC[NTC_LUT_NB_POINT-2];
 800dcbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcc0:	3b02      	subs	r3, #2
 800dcc2:	009b      	lsls	r3, r3, #2
 800dcc4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dcc8:	4413      	add	r3, r2
 800dcca:	3b54      	subs	r3, #84	; 0x54
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	657b      	str	r3, [r7, #84]	; 0x54
				x1 = LUT_NTC_V[NTC_LUT_NB_POINT-1];
 800dcd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcd2:	3b01      	subs	r3, #1
 800dcd4:	009b      	lsls	r3, r3, #2
 800dcd6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dcda:	4413      	add	r3, r2
 800dcdc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800dce0:	ee07 3a90 	vmov	s15, r3
 800dce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dce8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				y1 = LUT_NTC[NTC_LUT_NB_POINT-1];
 800dcec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcee:	3b01      	subs	r3, #1
 800dcf0:	009b      	lsls	r3, r3, #2
 800dcf2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dcf6:	4413      	add	r3, r2
 800dcf8:	3b54      	subs	r3, #84	; 0x54
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dcfe:	e02b      	b.n	800dd58 <NTC_Calc+0x1e0>
			}
			else{
				x0 = LUT_NTC_V[i-1];
 800dd00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd02:	3b01      	subs	r3, #1
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dd0a:	4413      	add	r3, r2
 800dd0c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800dd10:	ee07 3a90 	vmov	s15, r3
 800dd14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd18:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				y0 = LUT_NTC[i-1];
 800dd1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd1e:	3b01      	subs	r3, #1
 800dd20:	009b      	lsls	r3, r3, #2
 800dd22:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dd26:	4413      	add	r3, r2
 800dd28:	3b54      	subs	r3, #84	; 0x54
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	657b      	str	r3, [r7, #84]	; 0x54
				x1 = LUT_NTC_V[i];
 800dd2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd30:	009b      	lsls	r3, r3, #2
 800dd32:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dd36:	4413      	add	r3, r2
 800dd38:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800dd3c:	ee07 3a90 	vmov	s15, r3
 800dd40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd44:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				y1 = LUT_NTC[i];
 800dd48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dd50:	4413      	add	r3, r2
 800dd52:	3b54      	subs	r3, #84	; 0x54
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	64fb      	str	r3, [r7, #76]	; 0x4c
			}

			a = (y1-y0)/(x1-x0);
 800dd58:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800dd5c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800dd60:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dd64:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800dd68:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800dd6c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800dd70:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800dd74:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			b = y0 - a*x0;
 800dd78:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800dd7c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800dd80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd84:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800dd88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd8c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			return a*(Temp_Val) + b;
 800dd90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dd94:	ee07 3a90 	vmov	s15, r3
 800dd98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dd9c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800dda0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dda4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800dda8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ddac:	ee17 0a90 	vmov	r0, s15
 800ddb0:	f000 ff3e 	bl	800ec30 <__aeabi_f2d>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	460b      	mov	r3, r1

}
 800ddb8:	4610      	mov	r0, r2
 800ddba:	4619      	mov	r1, r3
 800ddbc:	3760      	adds	r7, #96	; 0x60
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	f3af 8000 	nop.w
 800ddc8:	00000000 	.word	0x00000000
 800ddcc:	40b38800 	.word	0x40b38800
 800ddd0:	00000000 	.word	0x00000000
 800ddd4:	40affe00 	.word	0x40affe00
 800ddd8:	42fa0000 	.word	0x42fa0000
 800dddc:	42c80000 	.word	0x42c80000
 800dde0:	42960000 	.word	0x42960000
 800dde4:	42480000 	.word	0x42480000
 800dde8:	41c80000 	.word	0x41c80000
 800ddec:	f3af 8000 	nop.w

0800ddf0 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b083      	sub	sp, #12
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de00:	78fb      	ldrb	r3, [r7, #3]
 800de02:	fa22 f303 	lsr.w	r3, r2, r3
 800de06:	f003 0301 	and.w	r3, r3, #1
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	370c      	adds	r7, #12
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr
 800de16:	bf00      	nop

0800de18 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	7c1b      	ldrb	r3, [r3, #16]
 800de28:	4610      	mov	r0, r2
 800de2a:	4619      	mov	r1, r3
 800de2c:	f7ff ffe0 	bl	800ddf0 <XMC_GPIO_GetInput>
 800de30:	4603      	mov	r3, r0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3708      	adds	r7, #8
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop

0800de3c <Task_Transmission>:

uint8_t test1 =0,test2 =0;
boolean_T transActive = 0;

void Task_Transmission (void *p)
{
 800de3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de40:	b084      	sub	sp, #16
 800de42:	af02      	add	r7, sp, #8
 800de44:	6078      	str	r0, [r7, #4]
	while(1)
	{
		transActive=1;
 800de46:	4b5a      	ldr	r3, [pc, #360]	; (800dfb0 <Task_Transmission+0x174>)
 800de48:	2201      	movs	r2, #1
 800de4a:	701a      	strb	r2, [r3, #0]

		//set clutch mode freq.
		if(*canData.STW_clutch_mode == 5)
 800de4c:	4b59      	ldr	r3, [pc, #356]	; (800dfb4 <Task_Transmission+0x178>)
 800de4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	2b05      	cmp	r3, #5
 800de54:	d108      	bne.n	800de68 <Task_Transmission+0x2c>
		{
			PWM_SetFreq(&PWM_MHJ9_IN, 80);
 800de56:	4858      	ldr	r0, [pc, #352]	; (800dfb8 <Task_Transmission+0x17c>)
 800de58:	2150      	movs	r1, #80	; 0x50
 800de5a:	f7fa fabf 	bl	80083dc <PWM_SetFreq>
			PWM_SetFreq(&PWM_MHJ9_OUT, 80);
 800de5e:	4857      	ldr	r0, [pc, #348]	; (800dfbc <Task_Transmission+0x180>)
 800de60:	2150      	movs	r1, #80	; 0x50
 800de62:	f7fa fabb 	bl	80083dc <PWM_SetFreq>
 800de66:	e023      	b.n	800deb0 <Task_Transmission+0x74>
		}
		else {
			if(*canData.STW_clutch_mode == 6)
 800de68:	4b52      	ldr	r3, [pc, #328]	; (800dfb4 <Task_Transmission+0x178>)
 800de6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	2b06      	cmp	r3, #6
 800de70:	d108      	bne.n	800de84 <Task_Transmission+0x48>
			{
			PWM_SetFreq(&PWM_MHJ9_IN, 50);
 800de72:	4851      	ldr	r0, [pc, #324]	; (800dfb8 <Task_Transmission+0x17c>)
 800de74:	2132      	movs	r1, #50	; 0x32
 800de76:	f7fa fab1 	bl	80083dc <PWM_SetFreq>
			PWM_SetFreq(&PWM_MHJ9_OUT, 50);
 800de7a:	4850      	ldr	r0, [pc, #320]	; (800dfbc <Task_Transmission+0x180>)
 800de7c:	2132      	movs	r1, #50	; 0x32
 800de7e:	f7fa faad 	bl	80083dc <PWM_SetFreq>
 800de82:	e015      	b.n	800deb0 <Task_Transmission+0x74>
			}
			else
			{
				if(*canData.STW_clutch_mode == 7)
 800de84:	4b4b      	ldr	r3, [pc, #300]	; (800dfb4 <Task_Transmission+0x178>)
 800de86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	2b07      	cmp	r3, #7
 800de8c:	d108      	bne.n	800dea0 <Task_Transmission+0x64>
				{
				PWM_SetFreq(&PWM_MHJ9_IN, 30);
 800de8e:	484a      	ldr	r0, [pc, #296]	; (800dfb8 <Task_Transmission+0x17c>)
 800de90:	211e      	movs	r1, #30
 800de92:	f7fa faa3 	bl	80083dc <PWM_SetFreq>
				PWM_SetFreq(&PWM_MHJ9_OUT, 30);
 800de96:	4849      	ldr	r0, [pc, #292]	; (800dfbc <Task_Transmission+0x180>)
 800de98:	211e      	movs	r1, #30
 800de9a:	f7fa fa9f 	bl	80083dc <PWM_SetFreq>
 800de9e:	e007      	b.n	800deb0 <Task_Transmission+0x74>
				}
				else
				{
					PWM_SetFreq(&PWM_MHJ9_IN, 100);
 800dea0:	4845      	ldr	r0, [pc, #276]	; (800dfb8 <Task_Transmission+0x17c>)
 800dea2:	2164      	movs	r1, #100	; 0x64
 800dea4:	f7fa fa9a 	bl	80083dc <PWM_SetFreq>
					PWM_SetFreq(&PWM_MHJ9_OUT, 100);
 800dea8:	4844      	ldr	r0, [pc, #272]	; (800dfbc <Task_Transmission+0x180>)
 800deaa:	2164      	movs	r1, #100	; 0x64
 800deac:	f7fa fa96 	bl	80083dc <PWM_SetFreq>
				}
			}
		}
	      //Run Brakelight Task (if braking during shifting)
		  FUNC_Brakelight();
 800deb0:	f7f2 fa7a 	bl	80003a8 <FUNC_Brakelight>

		  //Start Transmission Calculation and send Data
		  FUNC_Transmission();
 800deb4:	f7f5 fb3c 	bl	8003530 <FUNC_Transmission>

		  //Set Outputs from Transmission Calculation
		  FUNC_OutputData();
 800deb8:	f7f3 faa6 	bl	8001408 <FUNC_OutputData>
		  CAN_1_Transmit(); //Vllt unnötig
 800debc:	f7fe f930 	bl	800c120 <CAN_1_Transmit>
		  CAN_2_Transmit();
 800dec0:	f7fe fea2 	bl	800cc08 <CAN_2_Transmit>
		  IOPort_setDOUTS();
 800dec4:	f7ff fa92 	bl	800d3ec <IOPort_setDOUTS>
		  IOPort_setPWMOUTS();
 800dec8:	f7ff faf6 	bl	800d4b8 <IOPort_setPWMOUTS>

		  //Read Inputs for next Calculation
		  CAN_1_Receive();
 800decc:	f7fe f864 	bl	800bf98 <CAN_1_Receive>
		  IOPort_readAINS();
 800ded0:	f7ff fb7e 	bl	800d5d0 <IOPort_readAINS>

		  if(shiftDownInterrupt | shiftUpInterrupt)
 800ded4:	4b3a      	ldr	r3, [pc, #232]	; (800dfc0 <Task_Transmission+0x184>)
 800ded6:	781a      	ldrb	r2, [r3, #0]
 800ded8:	4b3a      	ldr	r3, [pc, #232]	; (800dfc4 <Task_Transmission+0x188>)
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	4313      	orrs	r3, r2
 800dede:	b2db      	uxtb	r3, r3
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d00f      	beq.n	800df04 <Task_Transmission+0xc8>
		  {
			  VCU_DW.VAR_IN_STW_shift_up_request = DIGITAL_IO_GetInput(&Signal_UpShift);
 800dee4:	4838      	ldr	r0, [pc, #224]	; (800dfc8 <Task_Transmission+0x18c>)
 800dee6:	f7ff ff97 	bl	800de18 <DIGITAL_IO_GetInput>
 800deea:	4603      	mov	r3, r0
 800deec:	b2da      	uxtb	r2, r3
 800deee:	4b37      	ldr	r3, [pc, #220]	; (800dfcc <Task_Transmission+0x190>)
 800def0:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
			  VCU_DW.VAR_IN_STW_shift_down_request = DIGITAL_IO_GetInput(&Signal_DownShift);
 800def4:	4836      	ldr	r0, [pc, #216]	; (800dfd0 <Task_Transmission+0x194>)
 800def6:	f7ff ff8f 	bl	800de18 <DIGITAL_IO_GetInput>
 800defa:	4603      	mov	r3, r0
 800defc:	b2da      	uxtb	r2, r3
 800defe:	4b33      	ldr	r3, [pc, #204]	; (800dfcc <Task_Transmission+0x190>)
 800df00:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
		  }
		  FUNC_InputData();
 800df04:	f7f2 fa98 	bl	8000438 <FUNC_InputData>

		  //Reset if clutch is pressed
		  if((*canData.STW_shift_up_request == 1) | (*canData.STW_shift_down_request == 1) | (*IOportData.x_clutch_STW < clutch_STW_threshold) | shiftDownInterrupt | shiftUpInterrupt)
 800df08:	4b2a      	ldr	r3, [pc, #168]	; (800dfb4 <Task_Transmission+0x178>)
 800df0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	2b01      	cmp	r3, #1
 800df10:	bf0c      	ite	eq
 800df12:	2301      	moveq	r3, #1
 800df14:	2300      	movne	r3, #0
 800df16:	b2da      	uxtb	r2, r3
 800df18:	4b26      	ldr	r3, [pc, #152]	; (800dfb4 <Task_Transmission+0x178>)
 800df1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	2b01      	cmp	r3, #1
 800df20:	bf0c      	ite	eq
 800df22:	2301      	moveq	r3, #1
 800df24:	2300      	movne	r3, #0
 800df26:	b2db      	uxtb	r3, r3
 800df28:	4313      	orrs	r3, r2
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	461e      	mov	r6, r3
 800df2e:	4b29      	ldr	r3, [pc, #164]	; (800dfd4 <Task_Transmission+0x198>)
 800df30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df32:	e9d3 4500 	ldrd	r4, r5, [r3]
 800df36:	4b28      	ldr	r3, [pc, #160]	; (800dfd8 <Task_Transmission+0x19c>)
 800df38:	881b      	ldrh	r3, [r3, #0]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f000 fe66 	bl	800ec0c <__aeabi_i2d>
 800df40:	4680      	mov	r8, r0
 800df42:	4689      	mov	r9, r1
 800df44:	2301      	movs	r3, #1
 800df46:	469a      	mov	sl, r3
 800df48:	4620      	mov	r0, r4
 800df4a:	4629      	mov	r1, r5
 800df4c:	4642      	mov	r2, r8
 800df4e:	464b      	mov	r3, r9
 800df50:	f001 f934 	bl	800f1bc <__aeabi_dcmplt>
 800df54:	4603      	mov	r3, r0
 800df56:	2b00      	cmp	r3, #0
 800df58:	d101      	bne.n	800df5e <Task_Transmission+0x122>
 800df5a:	2300      	movs	r3, #0
 800df5c:	469a      	mov	sl, r3
 800df5e:	fa5f f38a 	uxtb.w	r3, sl
 800df62:	4333      	orrs	r3, r6
 800df64:	4a16      	ldr	r2, [pc, #88]	; (800dfc0 <Task_Transmission+0x184>)
 800df66:	7812      	ldrb	r2, [r2, #0]
 800df68:	4313      	orrs	r3, r2
 800df6a:	4a16      	ldr	r2, [pc, #88]	; (800dfc4 <Task_Transmission+0x188>)
 800df6c:	7812      	ldrb	r2, [r2, #0]
 800df6e:	4313      	orrs	r3, r2
 800df70:	2b00      	cmp	r3, #0
 800df72:	d00d      	beq.n	800df90 <Task_Transmission+0x154>
		  {
			  Watchdog_Reset();
 800df74:	f7fe ff96 	bl	800cea4 <Watchdog_Reset>
			  xTimerReset(TimerHandle_Transmission,0);
 800df78:	4b18      	ldr	r3, [pc, #96]	; (800dfdc <Task_Transmission+0x1a0>)
 800df7a:	681c      	ldr	r4, [r3, #0]
 800df7c:	f7fb ffae 	bl	8009edc <xTaskGetTickCount>
 800df80:	4602      	mov	r2, r0
 800df82:	2300      	movs	r3, #0
 800df84:	9300      	str	r3, [sp, #0]
 800df86:	4620      	mov	r0, r4
 800df88:	2102      	movs	r1, #2
 800df8a:	2300      	movs	r3, #0
 800df8c:	f7fc fc5a 	bl	800a844 <xTimerGenericCommand>
		  }
		  if(TransmissionTask_Stop)
 800df90:	4b13      	ldr	r3, [pc, #76]	; (800dfe0 <Task_Transmission+0x1a4>)
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d00a      	beq.n	800dfae <Task_Transmission+0x172>
		  {
			  transActive = 0;
 800df98:	4b05      	ldr	r3, [pc, #20]	; (800dfb0 <Task_Transmission+0x174>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	701a      	strb	r2, [r3, #0]
			  TransmissionTask_Stop = 0;
 800df9e:	4b10      	ldr	r3, [pc, #64]	; (800dfe0 <Task_Transmission+0x1a4>)
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	701a      	strb	r2, [r3, #0]
			  vTaskSuspend(TaskHandle_Transmission);
 800dfa4:	4b0f      	ldr	r3, [pc, #60]	; (800dfe4 <Task_Transmission+0x1a8>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fb fd83 	bl	8009ab4 <vTaskSuspend>
		  }
	}
 800dfae:	e74a      	b.n	800de46 <Task_Transmission+0xa>
 800dfb0:	20000898 	.word	0x20000898
 800dfb4:	200013c0 	.word	0x200013c0
 800dfb8:	20000014 	.word	0x20000014
 800dfbc:	20000048 	.word	0x20000048
 800dfc0:	200012d8 	.word	0x200012d8
 800dfc4:	200012f8 	.word	0x200012f8
 800dfc8:	0800f8fc 	.word	0x0800f8fc
 800dfcc:	200010c8 	.word	0x200010c8
 800dfd0:	0800f8e8 	.word	0x0800f8e8
 800dfd4:	20001348 	.word	0x20001348
 800dfd8:	20000628 	.word	0x20000628
 800dfdc:	2000088c 	.word	0x2000088c
 800dfe0:	20000894 	.word	0x20000894
 800dfe4:	20000880 	.word	0x20000880

0800dfe8 <Task_Transmit>:
}

void Task_Transmit (void *p)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
	while(1)
	{
		  //Simulink
		  FUNC_OutputData();
 800dff0:	f7f3 fa0a 	bl	8001408 <FUNC_OutputData>

		  //CAN
		  CAN_1_Transmit();
 800dff4:	f7fe f894 	bl	800c120 <CAN_1_Transmit>
		  CAN_2_Transmit();
 800dff8:	f7fe fe06 	bl	800cc08 <CAN_2_Transmit>

		  //IOPort
		  IOPort_setDOUTS();
 800dffc:	f7ff f9f6 	bl	800d3ec <IOPort_setDOUTS>
		  IOPort_setPWMOUTS();
 800e000:	f7ff fa5a 	bl	800d4b8 <IOPort_setPWMOUTS>

		  //Watchdog
		  wachdog_reset[1] = 1;
 800e004:	4b08      	ldr	r3, [pc, #32]	; (800e028 <Task_Transmit+0x40>)
 800e006:	2201      	movs	r2, #1
 800e008:	705a      	strb	r2, [r3, #1]

		  //TaskHandler Delay
		  vTaskDelay(pdMS_TO_TICKS(delay_for_transmitting));
 800e00a:	4b08      	ldr	r3, [pc, #32]	; (800e02c <Task_Transmit+0x44>)
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	461a      	mov	r2, r3
 800e010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e014:	fb03 f302 	mul.w	r3, r3, r2
 800e018:	4a05      	ldr	r2, [pc, #20]	; (800e030 <Task_Transmit+0x48>)
 800e01a:	fba2 2303 	umull	r2, r3, r2, r3
 800e01e:	099b      	lsrs	r3, r3, #6
 800e020:	4618      	mov	r0, r3
 800e022:	f7fb fd15 	bl	8009a50 <vTaskDelay>
	}
 800e026:	e7e3      	b.n	800dff0 <Task_Transmit+0x8>
 800e028:	20000890 	.word	0x20000890
 800e02c:	20000623 	.word	0x20000623
 800e030:	10624dd3 	.word	0x10624dd3

0800e034 <Task_Reveive>:
}

void Task_Reveive (void *p)
{
 800e034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e038:	b084      	sub	sp, #16
 800e03a:	af02      	add	r7, sp, #8
 800e03c:	6078      	str	r0, [r7, #4]
	while(1)
	{
		 test1 = DIGITAL_IO_GetInput(&Signal_UpShift);
 800e03e:	4840      	ldr	r0, [pc, #256]	; (800e140 <Task_Reveive+0x10c>)
 800e040:	f7ff feea 	bl	800de18 <DIGITAL_IO_GetInput>
 800e044:	4603      	mov	r3, r0
 800e046:	b2da      	uxtb	r2, r3
 800e048:	4b3e      	ldr	r3, [pc, #248]	; (800e144 <Task_Reveive+0x110>)
 800e04a:	701a      	strb	r2, [r3, #0]
		 test2 =  DIGITAL_IO_GetInput(&Signal_DownShift);
 800e04c:	483e      	ldr	r0, [pc, #248]	; (800e148 <Task_Reveive+0x114>)
 800e04e:	f7ff fee3 	bl	800de18 <DIGITAL_IO_GetInput>
 800e052:	4603      	mov	r3, r0
 800e054:	b2da      	uxtb	r2, r3
 800e056:	4b3d      	ldr	r3, [pc, #244]	; (800e14c <Task_Reveive+0x118>)
 800e058:	701a      	strb	r2, [r3, #0]

		  //CAN
		  CAN_1_Receive();
 800e05a:	f7fd ff9d 	bl	800bf98 <CAN_1_Receive>
		  CAN_2_Receive();
 800e05e:	f7fe fb35 	bl	800c6cc <CAN_2_Receive>

		  //IOPort
		  IOPort_readDINS();
 800e062:	f7ff f9f7 	bl	800d454 <IOPort_readDINS>
		  IOPort_readAINS();
 800e066:	f7ff fab3 	bl	800d5d0 <IOPort_readAINS>

		  //Simulink
		  FUNC_InputData();
 800e06a:	f7f2 f9e5 	bl	8000438 <FUNC_InputData>

		  //Reset Watchdog
		  if(wachdog_reset[0] & wachdog_reset[1])
 800e06e:	4b38      	ldr	r3, [pc, #224]	; (800e150 <Task_Reveive+0x11c>)
 800e070:	781a      	ldrb	r2, [r3, #0]
 800e072:	4b37      	ldr	r3, [pc, #220]	; (800e150 <Task_Reveive+0x11c>)
 800e074:	785b      	ldrb	r3, [r3, #1]
 800e076:	4013      	ands	r3, r2
 800e078:	b2db      	uxtb	r3, r3
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d007      	beq.n	800e08e <Task_Reveive+0x5a>
		  {
			  Watchdog_Reset();
 800e07e:	f7fe ff11 	bl	800cea4 <Watchdog_Reset>

			  wachdog_reset[0]=0;
 800e082:	4b33      	ldr	r3, [pc, #204]	; (800e150 <Task_Reveive+0x11c>)
 800e084:	2200      	movs	r2, #0
 800e086:	701a      	strb	r2, [r3, #0]
			  wachdog_reset[1]=0;
 800e088:	4b31      	ldr	r3, [pc, #196]	; (800e150 <Task_Reveive+0x11c>)
 800e08a:	2200      	movs	r2, #0
 800e08c:	705a      	strb	r2, [r3, #1]
		  }

		  //Start Transmission-Task if shift up or down request occurs
		  if((*canData.STW_shift_up_request == 1) | (*canData.STW_shift_down_request == 1) | (*IOportData.x_clutch_STW < clutch_STW_threshold) | shiftDownInterrupt | shiftUpInterrupt)
 800e08e:	4b31      	ldr	r3, [pc, #196]	; (800e154 <Task_Reveive+0x120>)
 800e090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	2b01      	cmp	r3, #1
 800e096:	bf0c      	ite	eq
 800e098:	2301      	moveq	r3, #1
 800e09a:	2300      	movne	r3, #0
 800e09c:	b2da      	uxtb	r2, r3
 800e09e:	4b2d      	ldr	r3, [pc, #180]	; (800e154 <Task_Reveive+0x120>)
 800e0a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	bf0c      	ite	eq
 800e0a8:	2301      	moveq	r3, #1
 800e0aa:	2300      	movne	r3, #0
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	4313      	orrs	r3, r2
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	461e      	mov	r6, r3
 800e0b4:	4b28      	ldr	r3, [pc, #160]	; (800e158 <Task_Reveive+0x124>)
 800e0b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e0bc:	4b27      	ldr	r3, [pc, #156]	; (800e15c <Task_Reveive+0x128>)
 800e0be:	881b      	ldrh	r3, [r3, #0]
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f000 fda3 	bl	800ec0c <__aeabi_i2d>
 800e0c6:	4680      	mov	r8, r0
 800e0c8:	4689      	mov	r9, r1
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	469a      	mov	sl, r3
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	4629      	mov	r1, r5
 800e0d2:	4642      	mov	r2, r8
 800e0d4:	464b      	mov	r3, r9
 800e0d6:	f001 f871 	bl	800f1bc <__aeabi_dcmplt>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d101      	bne.n	800e0e4 <Task_Reveive+0xb0>
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	469a      	mov	sl, r3
 800e0e4:	fa5f f38a 	uxtb.w	r3, sl
 800e0e8:	4333      	orrs	r3, r6
 800e0ea:	4a1d      	ldr	r2, [pc, #116]	; (800e160 <Task_Reveive+0x12c>)
 800e0ec:	7812      	ldrb	r2, [r2, #0]
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	4a1c      	ldr	r2, [pc, #112]	; (800e164 <Task_Reveive+0x130>)
 800e0f2:	7812      	ldrb	r2, [r2, #0]
 800e0f4:	4313      	orrs	r3, r2
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d021      	beq.n	800e13e <Task_Reveive+0x10a>
		  {
			  if(shiftDownInterrupt)
 800e0fa:	4b19      	ldr	r3, [pc, #100]	; (800e160 <Task_Reveive+0x12c>)
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d004      	beq.n	800e10c <Task_Reveive+0xd8>
			  {
				  VCU_DW.VAR_IN_STW_shift_down_request = 1;
 800e102:	4b19      	ldr	r3, [pc, #100]	; (800e168 <Task_Reveive+0x134>)
 800e104:	2201      	movs	r2, #1
 800e106:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
 800e10a:	e007      	b.n	800e11c <Task_Reveive+0xe8>
			  }
			  else if(shiftUpInterrupt)
 800e10c:	4b15      	ldr	r3, [pc, #84]	; (800e164 <Task_Reveive+0x130>)
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d003      	beq.n	800e11c <Task_Reveive+0xe8>
			  {
				  VCU_DW.VAR_IN_STW_shift_up_request = 1;
 800e114:	4b14      	ldr	r3, [pc, #80]	; (800e168 <Task_Reveive+0x134>)
 800e116:	2201      	movs	r2, #1
 800e118:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
			  }
			  xTimerReset(TimerHandle_Transmission,0);
 800e11c:	4b13      	ldr	r3, [pc, #76]	; (800e16c <Task_Reveive+0x138>)
 800e11e:	681c      	ldr	r4, [r3, #0]
 800e120:	f7fb fedc 	bl	8009edc <xTaskGetTickCount>
 800e124:	4602      	mov	r2, r0
 800e126:	2300      	movs	r3, #0
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	4620      	mov	r0, r4
 800e12c:	2102      	movs	r1, #2
 800e12e:	2300      	movs	r3, #0
 800e130:	f7fc fb88 	bl	800a844 <xTimerGenericCommand>
			  vTaskResume(TaskHandle_Transmission);
 800e134:	4b0e      	ldr	r3, [pc, #56]	; (800e170 <Task_Reveive+0x13c>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4618      	mov	r0, r3
 800e13a:	f7fb fd7b 	bl	8009c34 <vTaskResume>
		  }
	}
 800e13e:	e77e      	b.n	800e03e <Task_Reveive+0xa>
 800e140:	0800f8fc 	.word	0x0800f8fc
 800e144:	20000896 	.word	0x20000896
 800e148:	0800f8e8 	.word	0x0800f8e8
 800e14c:	20000897 	.word	0x20000897
 800e150:	20000890 	.word	0x20000890
 800e154:	200013c0 	.word	0x200013c0
 800e158:	20001348 	.word	0x20001348
 800e15c:	20000628 	.word	0x20000628
 800e160:	200012d8 	.word	0x200012d8
 800e164:	200012f8 	.word	0x200012f8
 800e168:	200010c8 	.word	0x200010c8
 800e16c:	2000088c 	.word	0x2000088c
 800e170:	20000880 	.word	0x20000880

0800e174 <Task_LowPrioTask>:
}

void Task_LowPrioTask (void *p)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//Simulink
		FUNC_PumpAndFans();
 800e17c:	f7f5 f918 	bl	80033b0 <FUNC_PumpAndFans>
		FUNC_Brakelight();
 800e180:	f7f2 f912 	bl	80003a8 <FUNC_Brakelight>

		//Watchdog
		wachdog_reset[0] = 1;
 800e184:	4b08      	ldr	r3, [pc, #32]	; (800e1a8 <Task_LowPrioTask+0x34>)
 800e186:	2201      	movs	r2, #1
 800e188:	701a      	strb	r2, [r3, #0]

		//TaskHandler Delay
		vTaskDelay(pdMS_TO_TICKS(delay_for_lowPrioTasks));
 800e18a:	4b08      	ldr	r3, [pc, #32]	; (800e1ac <Task_LowPrioTask+0x38>)
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	461a      	mov	r2, r3
 800e190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e194:	fb03 f302 	mul.w	r3, r3, r2
 800e198:	4a05      	ldr	r2, [pc, #20]	; (800e1b0 <Task_LowPrioTask+0x3c>)
 800e19a:	fba2 2303 	umull	r2, r3, r2, r3
 800e19e:	099b      	lsrs	r3, r3, #6
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7fb fc55 	bl	8009a50 <vTaskDelay>
	}
 800e1a6:	e7e9      	b.n	800e17c <Task_LowPrioTask+0x8>
 800e1a8:	20000890 	.word	0x20000890
 800e1ac:	20000624 	.word	0x20000624
 800e1b0:	10624dd3 	.word	0x10624dd3

0800e1b4 <Task_OneLoop>:
}

void Task_OneLoop(void *p)
//Backup-Task which runs everything in one loop
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
	while(1)
	{
		  //CAN
		  CAN_1_Receive();
 800e1bc:	f7fd feec 	bl	800bf98 <CAN_1_Receive>
		  CAN_2_Receive();
 800e1c0:	f7fe fa84 	bl	800c6cc <CAN_2_Receive>

		  //IOPort
		  IOPort_readDINS();
 800e1c4:	f7ff f946 	bl	800d454 <IOPort_readDINS>
		  IOPort_readAINS();
 800e1c8:	f7ff fa02 	bl	800d5d0 <IOPort_readAINS>

		  //Simulink
		  FUNC_InputData();
 800e1cc:	f7f2 f934 	bl	8000438 <FUNC_InputData>
		  FUNC_Transmission();
 800e1d0:	f7f5 f9ae 	bl	8003530 <FUNC_Transmission>
		  FUNC_PumpAndFans();
 800e1d4:	f7f5 f8ec 	bl	80033b0 <FUNC_PumpAndFans>
		  FUNC_Brakelight();
 800e1d8:	f7f2 f8e6 	bl	80003a8 <FUNC_Brakelight>
		  FUNC_OutputData();
 800e1dc:	f7f3 f914 	bl	8001408 <FUNC_OutputData>

		   //CAN
		   CAN_1_Transmit();
 800e1e0:	f7fd ff9e 	bl	800c120 <CAN_1_Transmit>
		   CAN_2_Transmit();
 800e1e4:	f7fe fd10 	bl	800cc08 <CAN_2_Transmit>

		   //IOPort
		   IOPort_setDOUTS();
 800e1e8:	f7ff f900 	bl	800d3ec <IOPort_setDOUTS>
		   IOPort_setPWMOUTS();
 800e1ec:	f7ff f964 	bl	800d4b8 <IOPort_setPWMOUTS>

		  //Reset Watchdog
		  Watchdog_Reset();
 800e1f0:	f7fe fe58 	bl	800cea4 <Watchdog_Reset>
	}
 800e1f4:	e7e2      	b.n	800e1bc <Task_OneLoop+0x8>
 800e1f6:	bf00      	nop

0800e1f8 <vCallback_SuspendTransmission>:
}

static void vCallback_SuspendTransmission(xTimerHandle pxTimer)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b083      	sub	sp, #12
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
	  shiftDownInterrupt = 0;
 800e200:	4b06      	ldr	r3, [pc, #24]	; (800e21c <vCallback_SuspendTransmission+0x24>)
 800e202:	2200      	movs	r2, #0
 800e204:	701a      	strb	r2, [r3, #0]
	  shiftUpInterrupt = 0;
 800e206:	4b06      	ldr	r3, [pc, #24]	; (800e220 <vCallback_SuspendTransmission+0x28>)
 800e208:	2200      	movs	r2, #0
 800e20a:	701a      	strb	r2, [r3, #0]
	  TransmissionTask_Stop = 1;
 800e20c:	4b05      	ldr	r3, [pc, #20]	; (800e224 <vCallback_SuspendTransmission+0x2c>)
 800e20e:	2201      	movs	r2, #1
 800e210:	701a      	strb	r2, [r3, #0]
	 //vTaskSuspend(TaskHandle_Transmission);
	 //xTimerStop(TimerHandle_Transmission, 0);
}
 800e212:	370c      	adds	r7, #12
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr
 800e21c:	200012d8 	.word	0x200012d8
 800e220:	200012f8 	.word	0x200012f8
 800e224:	20000894 	.word	0x20000894

0800e228 <RTOS_Handling_ini>:

void RTOS_Handling_ini()
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af02      	add	r7, sp, #8
	shiftDownInterrupt = 0;
 800e22e:	4b3a      	ldr	r3, [pc, #232]	; (800e318 <RTOS_Handling_ini+0xf0>)
 800e230:	2200      	movs	r2, #0
 800e232:	701a      	strb	r2, [r3, #0]
	shiftUpInterrupt = 0;
 800e234:	4b39      	ldr	r3, [pc, #228]	; (800e31c <RTOS_Handling_ini+0xf4>)
 800e236:	2200      	movs	r2, #0
 800e238:	701a      	strb	r2, [r3, #0]

	  xTaskCreate(Task_Reveive, "Task_Reveive", 200, (void*) 0, tskIDLE_PRIORITY + 0, &TaskHandle_Receive);
 800e23a:	2300      	movs	r3, #0
 800e23c:	9300      	str	r3, [sp, #0]
 800e23e:	4b38      	ldr	r3, [pc, #224]	; (800e320 <RTOS_Handling_ini+0xf8>)
 800e240:	9301      	str	r3, [sp, #4]
 800e242:	4838      	ldr	r0, [pc, #224]	; (800e324 <RTOS_Handling_ini+0xfc>)
 800e244:	4938      	ldr	r1, [pc, #224]	; (800e328 <RTOS_Handling_ini+0x100>)
 800e246:	22c8      	movs	r2, #200	; 0xc8
 800e248:	2300      	movs	r3, #0
 800e24a:	f7fb faad 	bl	80097a8 <xTaskCreate>
	  xTaskCreate(Task_LowPrioTask, "Task_LowPrioTask", 200, (void*) 0, tskIDLE_PRIORITY + 1, &TaskHandle_LowPrioTasks);
 800e24e:	2301      	movs	r3, #1
 800e250:	9300      	str	r3, [sp, #0]
 800e252:	4b36      	ldr	r3, [pc, #216]	; (800e32c <RTOS_Handling_ini+0x104>)
 800e254:	9301      	str	r3, [sp, #4]
 800e256:	4836      	ldr	r0, [pc, #216]	; (800e330 <RTOS_Handling_ini+0x108>)
 800e258:	4936      	ldr	r1, [pc, #216]	; (800e334 <RTOS_Handling_ini+0x10c>)
 800e25a:	22c8      	movs	r2, #200	; 0xc8
 800e25c:	2300      	movs	r3, #0
 800e25e:	f7fb faa3 	bl	80097a8 <xTaskCreate>
	  xTaskCreate(Task_Transmit, "Task_Transmit", 200, (void*) 0, tskIDLE_PRIORITY + 2, &TaskHandle_Transmit);
 800e262:	2302      	movs	r3, #2
 800e264:	9300      	str	r3, [sp, #0]
 800e266:	4b34      	ldr	r3, [pc, #208]	; (800e338 <RTOS_Handling_ini+0x110>)
 800e268:	9301      	str	r3, [sp, #4]
 800e26a:	4834      	ldr	r0, [pc, #208]	; (800e33c <RTOS_Handling_ini+0x114>)
 800e26c:	4934      	ldr	r1, [pc, #208]	; (800e340 <RTOS_Handling_ini+0x118>)
 800e26e:	22c8      	movs	r2, #200	; 0xc8
 800e270:	2300      	movs	r3, #0
 800e272:	f7fb fa99 	bl	80097a8 <xTaskCreate>
	  xTaskCreate(Task_Transmission, "Task_Transmission", 200, (void*) 0, tskIDLE_PRIORITY + 3, &TaskHandle_Transmission);
 800e276:	2303      	movs	r3, #3
 800e278:	9300      	str	r3, [sp, #0]
 800e27a:	4b32      	ldr	r3, [pc, #200]	; (800e344 <RTOS_Handling_ini+0x11c>)
 800e27c:	9301      	str	r3, [sp, #4]
 800e27e:	4832      	ldr	r0, [pc, #200]	; (800e348 <RTOS_Handling_ini+0x120>)
 800e280:	4932      	ldr	r1, [pc, #200]	; (800e34c <RTOS_Handling_ini+0x124>)
 800e282:	22c8      	movs	r2, #200	; 0xc8
 800e284:	2300      	movs	r3, #0
 800e286:	f7fb fa8f 	bl	80097a8 <xTaskCreate>
	  xTaskCreate(Task_OneLoop, "Task_OneLoopTask", 200, (void*) 0, tskIDLE_PRIORITY + 4, &TaskHandle_OneLoopTask);
 800e28a:	2304      	movs	r3, #4
 800e28c:	9300      	str	r3, [sp, #0]
 800e28e:	4b30      	ldr	r3, [pc, #192]	; (800e350 <RTOS_Handling_ini+0x128>)
 800e290:	9301      	str	r3, [sp, #4]
 800e292:	4830      	ldr	r0, [pc, #192]	; (800e354 <RTOS_Handling_ini+0x12c>)
 800e294:	4930      	ldr	r1, [pc, #192]	; (800e358 <RTOS_Handling_ini+0x130>)
 800e296:	22c8      	movs	r2, #200	; 0xc8
 800e298:	2300      	movs	r3, #0
 800e29a:	f7fb fa85 	bl	80097a8 <xTaskCreate>

	  TimerHandle_Transmission = xTimerCreate("Timer_Transmission", pdMS_TO_TICKS(runtime_for_transmission), pdFALSE, (void*) 0, vCallback_SuspendTransmission);
 800e29e:	4b2f      	ldr	r3, [pc, #188]	; (800e35c <RTOS_Handling_ini+0x134>)
 800e2a0:	881b      	ldrh	r3, [r3, #0]
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e2a8:	fb03 f302 	mul.w	r3, r3, r2
 800e2ac:	4a2c      	ldr	r2, [pc, #176]	; (800e360 <RTOS_Handling_ini+0x138>)
 800e2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e2b2:	099a      	lsrs	r2, r3, #6
 800e2b4:	4b2b      	ldr	r3, [pc, #172]	; (800e364 <RTOS_Handling_ini+0x13c>)
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	482b      	ldr	r0, [pc, #172]	; (800e368 <RTOS_Handling_ini+0x140>)
 800e2ba:	4611      	mov	r1, r2
 800e2bc:	2200      	movs	r2, #0
 800e2be:	2300      	movs	r3, #0
 800e2c0:	f7fc fa64 	bl	800a78c <xTimerCreate>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	4b29      	ldr	r3, [pc, #164]	; (800e36c <RTOS_Handling_ini+0x144>)
 800e2c8:	601a      	str	r2, [r3, #0]

	  vTaskSuspend(TaskHandle_OneLoopTask);
 800e2ca:	4b21      	ldr	r3, [pc, #132]	; (800e350 <RTOS_Handling_ini+0x128>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7fb fbf0 	bl	8009ab4 <vTaskSuspend>
	  vTaskSuspend(TaskHandle_Transmission);
 800e2d4:	4b1b      	ldr	r3, [pc, #108]	; (800e344 <RTOS_Handling_ini+0x11c>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7fb fbeb 	bl	8009ab4 <vTaskSuspend>

	  //run one loop task if one-loop-mode is active
	  if(oneloopmode)
 800e2de:	4b24      	ldr	r3, [pc, #144]	; (800e370 <RTOS_Handling_ini+0x148>)
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d013      	beq.n	800e30e <RTOS_Handling_ini+0xe6>
	  {
		  vTaskSuspend(TaskHandle_Transmit);
 800e2e6:	4b14      	ldr	r3, [pc, #80]	; (800e338 <RTOS_Handling_ini+0x110>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7fb fbe2 	bl	8009ab4 <vTaskSuspend>
		  vTaskSuspend(TaskHandle_LowPrioTasks);
 800e2f0:	4b0e      	ldr	r3, [pc, #56]	; (800e32c <RTOS_Handling_ini+0x104>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7fb fbdd 	bl	8009ab4 <vTaskSuspend>
		  vTaskSuspend(TaskHandle_Receive);
 800e2fa:	4b09      	ldr	r3, [pc, #36]	; (800e320 <RTOS_Handling_ini+0xf8>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7fb fbd8 	bl	8009ab4 <vTaskSuspend>

		  vTaskResume(TaskHandle_OneLoopTask);
 800e304:	4b12      	ldr	r3, [pc, #72]	; (800e350 <RTOS_Handling_ini+0x128>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4618      	mov	r0, r3
 800e30a:	f7fb fc93 	bl	8009c34 <vTaskResume>
	  }

	  vTaskStartScheduler();
 800e30e:	f7fb fcef 	bl	8009cf0 <vTaskStartScheduler>
}
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop
 800e318:	200012d8 	.word	0x200012d8
 800e31c:	200012f8 	.word	0x200012f8
 800e320:	20000878 	.word	0x20000878
 800e324:	0800e035 	.word	0x0800e035
 800e328:	0800fcc4 	.word	0x0800fcc4
 800e32c:	20000884 	.word	0x20000884
 800e330:	0800e175 	.word	0x0800e175
 800e334:	0800fcd4 	.word	0x0800fcd4
 800e338:	2000087c 	.word	0x2000087c
 800e33c:	0800dfe9 	.word	0x0800dfe9
 800e340:	0800fce8 	.word	0x0800fce8
 800e344:	20000880 	.word	0x20000880
 800e348:	0800de3d 	.word	0x0800de3d
 800e34c:	0800fcf8 	.word	0x0800fcf8
 800e350:	20000888 	.word	0x20000888
 800e354:	0800e1b5 	.word	0x0800e1b5
 800e358:	0800fd0c 	.word	0x0800fd0c
 800e35c:	20000626 	.word	0x20000626
 800e360:	10624dd3 	.word	0x10624dd3
 800e364:	0800e1f9 	.word	0x0800e1f9
 800e368:	0800fd20 	.word	0x0800fd20
 800e36c:	2000088c 	.word	0x2000088c
 800e370:	20000895 	.word	0x20000895

0800e374 <getbits>:
in the right most n bits; complementing that with ~ makes a mask with ones in the rightmost n bits.
vgl. "THE C PROGRAMMING LANGUGE" Brian W. KERNIGHAN PAGE 49
ACHTUNG!!! das ganz rechte bit des Wortes is bit 0. BSP getbis(x,4,3) gibt bit 4,3,2 bit von rechts gezählt zurück.
*/
unsigned getbits(unsigned x,int p, int n)
{
 800e374:	b480      	push	{r7}
 800e376:	b085      	sub	sp, #20
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	60b9      	str	r1, [r7, #8]
 800e37e:	607a      	str	r2, [r7, #4]
	return(x >> (p+1-n)) & ~(~0 << n);
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	1c5a      	adds	r2, r3, #1
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	1ad3      	subs	r3, r2, r3
 800e388:	68fa      	ldr	r2, [r7, #12]
 800e38a:	fa22 f303 	lsr.w	r3, r2, r3
 800e38e:	f04f 31ff 	mov.w	r1, #4294967295
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	fa01 f202 	lsl.w	r2, r1, r2
 800e398:	43d2      	mvns	r2, r2
 800e39a:	4013      	ands	r3, r2
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3714      	adds	r7, #20
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr

0800e3a8 <getbits64>:

unsigned getbits64(unsigned long long int x,int p, int n)
{
 800e3a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3ac:	b085      	sub	sp, #20
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800e3b4:	607a      	str	r2, [r7, #4]
 800e3b6:	603b      	str	r3, [r7, #0]
	return(unsigned)((x >> (p+1-n)) & ~(~0ULL << n));
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	1c5a      	adds	r2, r3, #1
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	1ad1      	subs	r1, r2, r3
 800e3c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e3c4:	f1c1 0620 	rsb	r6, r1, #32
 800e3c8:	f1a1 0020 	sub.w	r0, r1, #32
 800e3cc:	fa22 f801 	lsr.w	r8, r2, r1
 800e3d0:	fa03 f606 	lsl.w	r6, r3, r6
 800e3d4:	ea48 0806 	orr.w	r8, r8, r6
 800e3d8:	fa23 f000 	lsr.w	r0, r3, r0
 800e3dc:	ea48 0800 	orr.w	r8, r8, r0
 800e3e0:	fa23 f901 	lsr.w	r9, r3, r1
 800e3e4:	46c6      	mov	lr, r8
 800e3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e3ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ee:	6839      	ldr	r1, [r7, #0]
 800e3f0:	f1a1 0620 	sub.w	r6, r1, #32
 800e3f4:	f1c1 0020 	rsb	r0, r1, #32
 800e3f8:	fa03 f501 	lsl.w	r5, r3, r1
 800e3fc:	fa02 f606 	lsl.w	r6, r2, r6
 800e400:	4335      	orrs	r5, r6
 800e402:	fa22 f000 	lsr.w	r0, r2, r0
 800e406:	4305      	orrs	r5, r0
 800e408:	fa02 f401 	lsl.w	r4, r2, r1
 800e40c:	4623      	mov	r3, r4
 800e40e:	43db      	mvns	r3, r3
 800e410:	ea0e 0303 	and.w	r3, lr, r3
}
 800e414:	4618      	mov	r0, r3
 800e416:	3714      	adds	r7, #20
 800e418:	46bd      	mov	sp, r7
 800e41a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e41e:	bf00      	nop

0800e420 <setbitTrue>:
{
	return (MSB<<8)|LSB;
}

void setbitTrue(unsigned long long *x, int n)
{
 800e420:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800e424:	b082      	sub	sp, #8
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
 800e42a:	6039      	str	r1, [r7, #0]
	*x |= (1ULL<<n);
 800e42c:	6879      	ldr	r1, [r7, #4]
 800e42e:	e9d1 8900 	ldrd	r8, r9, [r1]
 800e432:	f04f 0001 	mov.w	r0, #1
 800e436:	f04f 0100 	mov.w	r1, #0
 800e43a:	683c      	ldr	r4, [r7, #0]
 800e43c:	f1a4 0620 	sub.w	r6, r4, #32
 800e440:	f1c4 0520 	rsb	r5, r4, #32
 800e444:	fa01 f304 	lsl.w	r3, r1, r4
 800e448:	fa00 f606 	lsl.w	r6, r0, r6
 800e44c:	4333      	orrs	r3, r6
 800e44e:	fa20 f505 	lsr.w	r5, r0, r5
 800e452:	432b      	orrs	r3, r5
 800e454:	fa00 f204 	lsl.w	r2, r0, r4
 800e458:	ea42 0208 	orr.w	r2, r2, r8
 800e45c:	ea43 0309 	orr.w	r3, r3, r9
 800e460:	6879      	ldr	r1, [r7, #4]
 800e462:	e9c1 2300 	strd	r2, r3, [r1]
}
 800e466:	3708      	adds	r7, #8
 800e468:	46bd      	mov	sp, r7
 800e46a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e46e:	4770      	bx	lr

0800e470 <setbitFalse>:

void setbitFalse(unsigned long long *x, int n)
{
 800e470:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800e474:	b082      	sub	sp, #8
 800e476:	af00      	add	r7, sp, #0
 800e478:	6078      	str	r0, [r7, #4]
 800e47a:	6039      	str	r1, [r7, #0]
	*x &= ~(1ULL<<n);
 800e47c:	6879      	ldr	r1, [r7, #4]
 800e47e:	e9d1 8900 	ldrd	r8, r9, [r1]
 800e482:	f04f 0001 	mov.w	r0, #1
 800e486:	f04f 0100 	mov.w	r1, #0
 800e48a:	683c      	ldr	r4, [r7, #0]
 800e48c:	f1a4 0620 	sub.w	r6, r4, #32
 800e490:	f1c4 0520 	rsb	r5, r4, #32
 800e494:	fa01 f304 	lsl.w	r3, r1, r4
 800e498:	fa00 f606 	lsl.w	r6, r0, r6
 800e49c:	4333      	orrs	r3, r6
 800e49e:	fa20 f505 	lsr.w	r5, r0, r5
 800e4a2:	432b      	orrs	r3, r5
 800e4a4:	fa00 f204 	lsl.w	r2, r0, r4
 800e4a8:	ea6f 0202 	mvn.w	r2, r2
 800e4ac:	ea6f 0303 	mvn.w	r3, r3
 800e4b0:	ea02 0208 	and.w	r2, r2, r8
 800e4b4:	ea03 0309 	and.w	r3, r3, r9
 800e4b8:	6879      	ldr	r1, [r7, #4]
 800e4ba:	e9c1 2300 	strd	r2, r3, [r1]
}
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e4c6:	4770      	bx	lr

0800e4c8 <main>:

/****************************************************
   Main Function
 *****************************************************/
int main (void)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	af00      	add	r7, sp, #0
  DAVE_Init();
 800e4cc:	f7fd fb88 	bl	800bbe0 <DAVE_Init>
  Watchdog_Start();
 800e4d0:	f7fe fce2 	bl	800ce98 <Watchdog_Start>
  VCU_initialize();
 800e4d4:	f7f7 ff0e 	bl	80062f4 <VCU_initialize>
  CAN_1_ini();
 800e4d8:	f7fd fc94 	bl	800be04 <CAN_1_ini>
  CAN_2_ini();
 800e4dc:	f7fd ff94 	bl	800c408 <CAN_2_ini>
  IOPort_ini();
 800e4e0:	f7fe feca 	bl	800d278 <IOPort_ini>
  RTOS_Handling_ini();  //Kupplung, Detect increase Block ???
 800e4e4:	f7ff fea0 	bl	800e228 <RTOS_Handling_ini>
 800e4e8:	2300      	movs	r3, #0
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop

0800e4f0 <floor>:
 800e4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4f4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800e4f8:	f2a8 35ff 	subw	r5, r8, #1023	; 0x3ff
 800e4fc:	2d13      	cmp	r5, #19
 800e4fe:	4602      	mov	r2, r0
 800e500:	460b      	mov	r3, r1
 800e502:	460c      	mov	r4, r1
 800e504:	4607      	mov	r7, r0
 800e506:	4689      	mov	r9, r1
 800e508:	4606      	mov	r6, r0
 800e50a:	dc1d      	bgt.n	800e548 <floor+0x58>
 800e50c:	2d00      	cmp	r5, #0
 800e50e:	db40      	blt.n	800e592 <floor+0xa2>
 800e510:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800e5fc <floor+0x10c>
 800e514:	fa48 f805 	asr.w	r8, r8, r5
 800e518:	ea08 0e01 	and.w	lr, r8, r1
 800e51c:	ea5e 0707 	orrs.w	r7, lr, r7
 800e520:	d017      	beq.n	800e552 <floor+0x62>
 800e522:	a334      	add	r3, pc, #208	; (adr r3, 800e5f4 <floor+0x104>)
 800e524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e528:	f000 fa24 	bl	800e974 <__adddf3>
 800e52c:	2200      	movs	r2, #0
 800e52e:	2300      	movs	r3, #0
 800e530:	f000 fe62 	bl	800f1f8 <__aeabi_dcmpgt>
 800e534:	b120      	cbz	r0, 800e540 <floor+0x50>
 800e536:	2c00      	cmp	r4, #0
 800e538:	db3f      	blt.n	800e5ba <floor+0xca>
 800e53a:	ea29 0408 	bic.w	r4, r9, r8
 800e53e:	2600      	movs	r6, #0
 800e540:	4621      	mov	r1, r4
 800e542:	4630      	mov	r0, r6
 800e544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e548:	2d33      	cmp	r5, #51	; 0x33
 800e54a:	dd06      	ble.n	800e55a <floor+0x6a>
 800e54c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800e550:	d02f      	beq.n	800e5b2 <floor+0xc2>
 800e552:	4610      	mov	r0, r2
 800e554:	4619      	mov	r1, r3
 800e556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e55a:	f2a8 4e13 	subw	lr, r8, #1043	; 0x413
 800e55e:	f04f 37ff 	mov.w	r7, #4294967295
 800e562:	fa27 f70e 	lsr.w	r7, r7, lr
 800e566:	4207      	tst	r7, r0
 800e568:	d0f3      	beq.n	800e552 <floor+0x62>
 800e56a:	a322      	add	r3, pc, #136	; (adr r3, 800e5f4 <floor+0x104>)
 800e56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e570:	f000 fa00 	bl	800e974 <__adddf3>
 800e574:	2200      	movs	r2, #0
 800e576:	2300      	movs	r3, #0
 800e578:	f000 fe3e 	bl	800f1f8 <__aeabi_dcmpgt>
 800e57c:	2800      	cmp	r0, #0
 800e57e:	d0df      	beq.n	800e540 <floor+0x50>
 800e580:	2c00      	cmp	r4, #0
 800e582:	db1f      	blt.n	800e5c4 <floor+0xd4>
 800e584:	464c      	mov	r4, r9
 800e586:	ea26 0607 	bic.w	r6, r6, r7
 800e58a:	4621      	mov	r1, r4
 800e58c:	4630      	mov	r0, r6
 800e58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e592:	a318      	add	r3, pc, #96	; (adr r3, 800e5f4 <floor+0x104>)
 800e594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e598:	f000 f9ec 	bl	800e974 <__adddf3>
 800e59c:	2200      	movs	r2, #0
 800e59e:	2300      	movs	r3, #0
 800e5a0:	f000 fe2a 	bl	800f1f8 <__aeabi_dcmpgt>
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	d0cb      	beq.n	800e540 <floor+0x50>
 800e5a8:	2c00      	cmp	r4, #0
 800e5aa:	db19      	blt.n	800e5e0 <floor+0xf0>
 800e5ac:	2600      	movs	r6, #0
 800e5ae:	4634      	mov	r4, r6
 800e5b0:	e7c6      	b.n	800e540 <floor+0x50>
 800e5b2:	f000 f9df 	bl	800e974 <__adddf3>
 800e5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e5be:	412b      	asrs	r3, r5
 800e5c0:	4499      	add	r9, r3
 800e5c2:	e7ba      	b.n	800e53a <floor+0x4a>
 800e5c4:	2d14      	cmp	r5, #20
 800e5c6:	d008      	beq.n	800e5da <floor+0xea>
 800e5c8:	f5c8 6886 	rsb	r8, r8, #1072	; 0x430
 800e5cc:	f108 0803 	add.w	r8, r8, #3
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	fa03 f308 	lsl.w	r3, r3, r8
 800e5d6:	199e      	adds	r6, r3, r6
 800e5d8:	d3d4      	bcc.n	800e584 <floor+0x94>
 800e5da:	f109 0901 	add.w	r9, r9, #1
 800e5de:	e7d1      	b.n	800e584 <floor+0x94>
 800e5e0:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
 800e5e4:	4b02      	ldr	r3, [pc, #8]	; (800e5f0 <floor+0x100>)
 800e5e6:	433a      	orrs	r2, r7
 800e5e8:	bf18      	it	ne
 800e5ea:	461c      	movne	r4, r3
 800e5ec:	2600      	movs	r6, #0
 800e5ee:	e7a7      	b.n	800e540 <floor+0x50>
 800e5f0:	bff00000 	.word	0xbff00000
 800e5f4:	8800759c 	.word	0x8800759c
 800e5f8:	7e37e43c 	.word	0x7e37e43c
 800e5fc:	000fffff 	.word	0x000fffff

0800e600 <fmod>:
 800e600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e604:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800e6b0 <fmod+0xb0>
 800e608:	b08a      	sub	sp, #40	; 0x28
 800e60a:	461f      	mov	r7, r3
 800e60c:	4680      	mov	r8, r0
 800e60e:	4689      	mov	r9, r1
 800e610:	4616      	mov	r6, r2
 800e612:	f000 f84f 	bl	800e6b4 <__ieee754_fmod>
 800e616:	f99a 3000 	ldrsb.w	r3, [sl]
 800e61a:	3301      	adds	r3, #1
 800e61c:	4604      	mov	r4, r0
 800e61e:	460d      	mov	r5, r1
 800e620:	d004      	beq.n	800e62c <fmod+0x2c>
 800e622:	4630      	mov	r0, r6
 800e624:	4639      	mov	r1, r7
 800e626:	f000 f971 	bl	800e90c <__fpclassifyd>
 800e62a:	b920      	cbnz	r0, 800e636 <fmod+0x36>
 800e62c:	4620      	mov	r0, r4
 800e62e:	4629      	mov	r1, r5
 800e630:	b00a      	add	sp, #40	; 0x28
 800e632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e636:	4640      	mov	r0, r8
 800e638:	4649      	mov	r1, r9
 800e63a:	f000 f967 	bl	800e90c <__fpclassifyd>
 800e63e:	2800      	cmp	r0, #0
 800e640:	d0f4      	beq.n	800e62c <fmod+0x2c>
 800e642:	4630      	mov	r0, r6
 800e644:	4639      	mov	r1, r7
 800e646:	2200      	movs	r2, #0
 800e648:	2300      	movs	r3, #0
 800e64a:	f000 fdad 	bl	800f1a8 <__aeabi_dcmpeq>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d0ec      	beq.n	800e62c <fmod+0x2c>
 800e652:	4b16      	ldr	r3, [pc, #88]	; (800e6ac <fmod+0xac>)
 800e654:	f89a 4000 	ldrb.w	r4, [sl]
 800e658:	9301      	str	r3, [sp, #4]
 800e65a:	2201      	movs	r2, #1
 800e65c:	2300      	movs	r3, #0
 800e65e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e662:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e666:	9200      	str	r2, [sp, #0]
 800e668:	9308      	str	r3, [sp, #32]
 800e66a:	b194      	cbz	r4, 800e692 <fmod+0x92>
 800e66c:	2000      	movs	r0, #0
 800e66e:	2100      	movs	r1, #0
 800e670:	4602      	mov	r2, r0
 800e672:	460b      	mov	r3, r1
 800e674:	f000 fc5a 	bl	800ef2c <__aeabi_ddiv>
 800e678:	2c02      	cmp	r4, #2
 800e67a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e67e:	d10a      	bne.n	800e696 <fmod+0x96>
 800e680:	f000 fde4 	bl	800f24c <__errno>
 800e684:	2321      	movs	r3, #33	; 0x21
 800e686:	6003      	str	r3, [r0, #0]
 800e688:	9b08      	ldr	r3, [sp, #32]
 800e68a:	b953      	cbnz	r3, 800e6a2 <fmod+0xa2>
 800e68c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e690:	e7ce      	b.n	800e630 <fmod+0x30>
 800e692:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800e696:	4668      	mov	r0, sp
 800e698:	f000 f964 	bl	800e964 <matherr>
 800e69c:	2800      	cmp	r0, #0
 800e69e:	d1f3      	bne.n	800e688 <fmod+0x88>
 800e6a0:	e7ee      	b.n	800e680 <fmod+0x80>
 800e6a2:	f000 fdd3 	bl	800f24c <__errno>
 800e6a6:	9b08      	ldr	r3, [sp, #32]
 800e6a8:	6003      	str	r3, [r0, #0]
 800e6aa:	e7ef      	b.n	800e68c <fmod+0x8c>
 800e6ac:	0800fd34 	.word	0x0800fd34
 800e6b0:	2000062a 	.word	0x2000062a

0800e6b4 <__ieee754_fmod>:
 800e6b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b8:	4690      	mov	r8, r2
 800e6ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e6be:	ea52 0408 	orrs.w	r4, r2, r8
 800e6c2:	4682      	mov	sl, r0
 800e6c4:	468b      	mov	fp, r1
 800e6c6:	4699      	mov	r9, r3
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	4641      	mov	r1, r8
 800e6cc:	d01f      	beq.n	800e70e <__ieee754_fmod+0x5a>
 800e6ce:	465d      	mov	r5, fp
 800e6d0:	f00b 4600 	and.w	r6, fp, #2147483648	; 0x80000000
 800e6d4:	4c86      	ldr	r4, [pc, #536]	; (800e8f0 <__ieee754_fmod+0x23c>)
 800e6d6:	4075      	eors	r5, r6
 800e6d8:	42a5      	cmp	r5, r4
 800e6da:	dc18      	bgt.n	800e70e <__ieee754_fmod+0x5a>
 800e6dc:	424c      	negs	r4, r1
 800e6de:	430c      	orrs	r4, r1
 800e6e0:	f8df e220 	ldr.w	lr, [pc, #544]	; 800e904 <__ieee754_fmod+0x250>
 800e6e4:	ea42 74d4 	orr.w	r4, r2, r4, lsr #31
 800e6e8:	4574      	cmp	r4, lr
 800e6ea:	d810      	bhi.n	800e70e <__ieee754_fmod+0x5a>
 800e6ec:	4295      	cmp	r5, r2
 800e6ee:	46d4      	mov	ip, sl
 800e6f0:	4653      	mov	r3, sl
 800e6f2:	4647      	mov	r7, r8
 800e6f4:	dc17      	bgt.n	800e726 <__ieee754_fmod+0x72>
 800e6f6:	db28      	blt.n	800e74a <__ieee754_fmod+0x96>
 800e6f8:	45c2      	cmp	sl, r8
 800e6fa:	d326      	bcc.n	800e74a <__ieee754_fmod+0x96>
 800e6fc:	d113      	bne.n	800e726 <__ieee754_fmod+0x72>
 800e6fe:	4b7d      	ldr	r3, [pc, #500]	; (800e8f4 <__ieee754_fmod+0x240>)
 800e700:	0ff6      	lsrs	r6, r6, #31
 800e702:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e70a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e70e:	4642      	mov	r2, r8
 800e710:	464b      	mov	r3, r9
 800e712:	4650      	mov	r0, sl
 800e714:	4659      	mov	r1, fp
 800e716:	f000 fadf 	bl	800ecd8 <__aeabi_dmul>
 800e71a:	4602      	mov	r2, r0
 800e71c:	460b      	mov	r3, r1
 800e71e:	f000 fc05 	bl	800ef2c <__aeabi_ddiv>
 800e722:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e726:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800e72a:	da12      	bge.n	800e752 <__ieee754_fmod+0x9e>
 800e72c:	2d00      	cmp	r5, #0
 800e72e:	f040 80a2 	bne.w	800e876 <__ieee754_fmod+0x1c2>
 800e732:	f1bc 0f00 	cmp.w	ip, #0
 800e736:	4664      	mov	r4, ip
 800e738:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 800e908 <__ieee754_fmod+0x254>
 800e73c:	dd0d      	ble.n	800e75a <__ieee754_fmod+0xa6>
 800e73e:	0064      	lsls	r4, r4, #1
 800e740:	2c00      	cmp	r4, #0
 800e742:	f108 38ff 	add.w	r8, r8, #4294967295
 800e746:	dcfa      	bgt.n	800e73e <__ieee754_fmod+0x8a>
 800e748:	e007      	b.n	800e75a <__ieee754_fmod+0xa6>
 800e74a:	4650      	mov	r0, sl
 800e74c:	4659      	mov	r1, fp
 800e74e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e752:	ea4f 5825 	mov.w	r8, r5, asr #20
 800e756:	f2a8 38ff 	subw	r8, r8, #1023	; 0x3ff
 800e75a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800e75e:	da0d      	bge.n	800e77c <__ieee754_fmod+0xc8>
 800e760:	2a00      	cmp	r2, #0
 800e762:	f040 80a1 	bne.w	800e8a8 <__ieee754_fmod+0x1f4>
 800e766:	2900      	cmp	r1, #0
 800e768:	460c      	mov	r4, r1
 800e76a:	f8df e19c 	ldr.w	lr, [pc, #412]	; 800e908 <__ieee754_fmod+0x254>
 800e76e:	dd09      	ble.n	800e784 <__ieee754_fmod+0xd0>
 800e770:	0064      	lsls	r4, r4, #1
 800e772:	2c00      	cmp	r4, #0
 800e774:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e778:	dcfa      	bgt.n	800e770 <__ieee754_fmod+0xbc>
 800e77a:	e003      	b.n	800e784 <__ieee754_fmod+0xd0>
 800e77c:	ea4f 5e22 	mov.w	lr, r2, asr #20
 800e780:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 800e784:	4c5c      	ldr	r4, [pc, #368]	; (800e8f8 <__ieee754_fmod+0x244>)
 800e786:	45a0      	cmp	r8, r4
 800e788:	db58      	blt.n	800e83c <__ieee754_fmod+0x188>
 800e78a:	f3c5 0413 	ubfx	r4, r5, #0, #20
 800e78e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800e792:	4d59      	ldr	r5, [pc, #356]	; (800e8f8 <__ieee754_fmod+0x244>)
 800e794:	45ae      	cmp	lr, r5
 800e796:	db5f      	blt.n	800e858 <__ieee754_fmod+0x1a4>
 800e798:	f3c0 0113 	ubfx	r1, r0, #0, #20
 800e79c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e7a0:	ebce 0008 	rsb	r0, lr, r8
 800e7a4:	e007      	b.n	800e7b6 <__ieee754_fmod+0x102>
 800e7a6:	ea52 0305 	orrs.w	r3, r2, r5
 800e7aa:	d012      	beq.n	800e7d2 <__ieee754_fmod+0x11e>
 800e7ac:	0fec      	lsrs	r4, r5, #31
 800e7ae:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800e7b2:	006b      	lsls	r3, r5, #1
 800e7b4:	3801      	subs	r0, #1
 800e7b6:	1bdd      	subs	r5, r3, r7
 800e7b8:	1a62      	subs	r2, r4, r1
 800e7ba:	b190      	cbz	r0, 800e7e2 <__ieee754_fmod+0x12e>
 800e7bc:	42bb      	cmp	r3, r7
 800e7be:	bf38      	it	cc
 800e7c0:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800e7c4:	2a00      	cmp	r2, #0
 800e7c6:	daee      	bge.n	800e7a6 <__ieee754_fmod+0xf2>
 800e7c8:	0fda      	lsrs	r2, r3, #31
 800e7ca:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800e7ce:	005b      	lsls	r3, r3, #1
 800e7d0:	e7f0      	b.n	800e7b4 <__ieee754_fmod+0x100>
 800e7d2:	4b48      	ldr	r3, [pc, #288]	; (800e8f4 <__ieee754_fmod+0x240>)
 800e7d4:	0ff6      	lsrs	r6, r6, #31
 800e7d6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e7da:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e7de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e2:	429f      	cmp	r7, r3
 800e7e4:	4611      	mov	r1, r2
 800e7e6:	bf88      	it	hi
 800e7e8:	f102 31ff 	addhi.w	r1, r2, #4294967295
 800e7ec:	2900      	cmp	r1, #0
 800e7ee:	bfac      	ite	ge
 800e7f0:	1bdb      	subge	r3, r3, r7
 800e7f2:	4621      	movlt	r1, r4
 800e7f4:	ea51 0203 	orrs.w	r2, r1, r3
 800e7f8:	d0eb      	beq.n	800e7d2 <__ieee754_fmod+0x11e>
 800e7fa:	4840      	ldr	r0, [pc, #256]	; (800e8fc <__ieee754_fmod+0x248>)
 800e7fc:	4281      	cmp	r1, r0
 800e7fe:	dc08      	bgt.n	800e812 <__ieee754_fmod+0x15e>
 800e800:	0fda      	lsrs	r2, r3, #31
 800e802:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e806:	4281      	cmp	r1, r0
 800e808:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e80c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e810:	ddf6      	ble.n	800e800 <__ieee754_fmod+0x14c>
 800e812:	4a39      	ldr	r2, [pc, #228]	; (800e8f8 <__ieee754_fmod+0x244>)
 800e814:	4596      	cmp	lr, r2
 800e816:	da50      	bge.n	800e8ba <__ieee754_fmod+0x206>
 800e818:	4a37      	ldr	r2, [pc, #220]	; (800e8f8 <__ieee754_fmod+0x244>)
 800e81a:	ebce 0202 	rsb	r2, lr, r2
 800e81e:	2a14      	cmp	r2, #20
 800e820:	dc55      	bgt.n	800e8ce <__ieee754_fmod+0x21a>
 800e822:	f20e 4e1e 	addw	lr, lr, #1054	; 0x41e
 800e826:	40d3      	lsrs	r3, r2
 800e828:	fa01 f00e 	lsl.w	r0, r1, lr
 800e82c:	4303      	orrs	r3, r0
 800e82e:	fa41 f202 	asr.w	r2, r1, r2
 800e832:	ea42 0106 	orr.w	r1, r2, r6
 800e836:	4618      	mov	r0, r3
 800e838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e83c:	4b2e      	ldr	r3, [pc, #184]	; (800e8f8 <__ieee754_fmod+0x244>)
 800e83e:	ebc8 0303 	rsb	r3, r8, r3
 800e842:	2b1f      	cmp	r3, #31
 800e844:	dc29      	bgt.n	800e89a <__ieee754_fmod+0x1e6>
 800e846:	f208 441e 	addw	r4, r8, #1054	; 0x41e
 800e84a:	409d      	lsls	r5, r3
 800e84c:	fa2c f404 	lsr.w	r4, ip, r4
 800e850:	fa0c f303 	lsl.w	r3, ip, r3
 800e854:	432c      	orrs	r4, r5
 800e856:	e79c      	b.n	800e792 <__ieee754_fmod+0xde>
 800e858:	4827      	ldr	r0, [pc, #156]	; (800e8f8 <__ieee754_fmod+0x244>)
 800e85a:	ebce 0000 	rsb	r0, lr, r0
 800e85e:	281f      	cmp	r0, #31
 800e860:	dc15      	bgt.n	800e88e <__ieee754_fmod+0x1da>
 800e862:	f20e 451e 	addw	r5, lr, #1054	; 0x41e
 800e866:	4082      	lsls	r2, r0
 800e868:	fa21 f505 	lsr.w	r5, r1, r5
 800e86c:	fa01 f700 	lsl.w	r7, r1, r0
 800e870:	ea42 0105 	orr.w	r1, r2, r5
 800e874:	e794      	b.n	800e7a0 <__ieee754_fmod+0xec>
 800e876:	02ec      	lsls	r4, r5, #11
 800e878:	2c00      	cmp	r4, #0
 800e87a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800e8f8 <__ieee754_fmod+0x244>
 800e87e:	f77f af6c 	ble.w	800e75a <__ieee754_fmod+0xa6>
 800e882:	0064      	lsls	r4, r4, #1
 800e884:	2c00      	cmp	r4, #0
 800e886:	f108 38ff 	add.w	r8, r8, #4294967295
 800e88a:	dcfa      	bgt.n	800e882 <__ieee754_fmod+0x1ce>
 800e88c:	e765      	b.n	800e75a <__ieee754_fmod+0xa6>
 800e88e:	4a1c      	ldr	r2, [pc, #112]	; (800e900 <__ieee754_fmod+0x24c>)
 800e890:	ebce 0202 	rsb	r2, lr, r2
 800e894:	4091      	lsls	r1, r2
 800e896:	2700      	movs	r7, #0
 800e898:	e782      	b.n	800e7a0 <__ieee754_fmod+0xec>
 800e89a:	4b19      	ldr	r3, [pc, #100]	; (800e900 <__ieee754_fmod+0x24c>)
 800e89c:	ebc8 0303 	rsb	r3, r8, r3
 800e8a0:	fa0c f403 	lsl.w	r4, ip, r3
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	e774      	b.n	800e792 <__ieee754_fmod+0xde>
 800e8a8:	f8df e04c 	ldr.w	lr, [pc, #76]	; 800e8f8 <__ieee754_fmod+0x244>
 800e8ac:	02d4      	lsls	r4, r2, #11
 800e8ae:	0064      	lsls	r4, r4, #1
 800e8b0:	2c00      	cmp	r4, #0
 800e8b2:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e8b6:	dcfa      	bgt.n	800e8ae <__ieee754_fmod+0x1fa>
 800e8b8:	e764      	b.n	800e784 <__ieee754_fmod+0xd0>
 800e8ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e8be:	430e      	orrs	r6, r1
 800e8c0:	f20e 3eff 	addw	lr, lr, #1023	; 0x3ff
 800e8c4:	ea46 510e 	orr.w	r1, r6, lr, lsl #20
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ce:	2a1f      	cmp	r2, #31
 800e8d0:	dc07      	bgt.n	800e8e2 <__ieee754_fmod+0x22e>
 800e8d2:	f20e 4e1e 	addw	lr, lr, #1054	; 0x41e
 800e8d6:	40d3      	lsrs	r3, r2
 800e8d8:	fa01 f10e 	lsl.w	r1, r1, lr
 800e8dc:	430b      	orrs	r3, r1
 800e8de:	4632      	mov	r2, r6
 800e8e0:	e7a7      	b.n	800e832 <__ieee754_fmod+0x17e>
 800e8e2:	4b07      	ldr	r3, [pc, #28]	; (800e900 <__ieee754_fmod+0x24c>)
 800e8e4:	ebce 0303 	rsb	r3, lr, r3
 800e8e8:	fa41 f303 	asr.w	r3, r1, r3
 800e8ec:	4632      	mov	r2, r6
 800e8ee:	e7a0      	b.n	800e832 <__ieee754_fmod+0x17e>
 800e8f0:	7fefffff 	.word	0x7fefffff
 800e8f4:	0800fd40 	.word	0x0800fd40
 800e8f8:	fffffc02 	.word	0xfffffc02
 800e8fc:	000fffff 	.word	0x000fffff
 800e900:	fffffbe2 	.word	0xfffffbe2
 800e904:	7ff00000 	.word	0x7ff00000
 800e908:	fffffbed 	.word	0xfffffbed

0800e90c <__fpclassifyd>:
 800e90c:	b410      	push	{r4}
 800e90e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800e912:	460b      	mov	r3, r1
 800e914:	d008      	beq.n	800e928 <__fpclassifyd+0x1c>
 800e916:	4a11      	ldr	r2, [pc, #68]	; (800e95c <__fpclassifyd+0x50>)
 800e918:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e91c:	4291      	cmp	r1, r2
 800e91e:	d808      	bhi.n	800e932 <__fpclassifyd+0x26>
 800e920:	2004      	movs	r0, #4
 800e922:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e926:	4770      	bx	lr
 800e928:	b918      	cbnz	r0, 800e932 <__fpclassifyd+0x26>
 800e92a:	2002      	movs	r0, #2
 800e92c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e930:	4770      	bx	lr
 800e932:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800e936:	4a09      	ldr	r2, [pc, #36]	; (800e95c <__fpclassifyd+0x50>)
 800e938:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d9ef      	bls.n	800e920 <__fpclassifyd+0x14>
 800e940:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e944:	d201      	bcs.n	800e94a <__fpclassifyd+0x3e>
 800e946:	2003      	movs	r0, #3
 800e948:	e7eb      	b.n	800e922 <__fpclassifyd+0x16>
 800e94a:	4b05      	ldr	r3, [pc, #20]	; (800e960 <__fpclassifyd+0x54>)
 800e94c:	429c      	cmp	r4, r3
 800e94e:	d001      	beq.n	800e954 <__fpclassifyd+0x48>
 800e950:	2000      	movs	r0, #0
 800e952:	e7e6      	b.n	800e922 <__fpclassifyd+0x16>
 800e954:	fab0 f080 	clz	r0, r0
 800e958:	0940      	lsrs	r0, r0, #5
 800e95a:	e7e2      	b.n	800e922 <__fpclassifyd+0x16>
 800e95c:	7fdfffff 	.word	0x7fdfffff
 800e960:	7ff00000 	.word	0x7ff00000

0800e964 <matherr>:
 800e964:	2000      	movs	r0, #0
 800e966:	4770      	bx	lr

0800e968 <__aeabi_drsub>:
 800e968:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800e96c:	e002      	b.n	800e974 <__adddf3>
 800e96e:	bf00      	nop

0800e970 <__aeabi_dsub>:
 800e970:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800e974 <__adddf3>:
 800e974:	b530      	push	{r4, r5, lr}
 800e976:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800e97a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800e97e:	ea94 0f05 	teq	r4, r5
 800e982:	bf08      	it	eq
 800e984:	ea90 0f02 	teqeq	r0, r2
 800e988:	bf1f      	itttt	ne
 800e98a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800e98e:	ea55 0c02 	orrsne.w	ip, r5, r2
 800e992:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800e996:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800e99a:	f000 80e2 	beq.w	800eb62 <__adddf3+0x1ee>
 800e99e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800e9a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800e9a6:	bfb8      	it	lt
 800e9a8:	426d      	neglt	r5, r5
 800e9aa:	dd0c      	ble.n	800e9c6 <__adddf3+0x52>
 800e9ac:	442c      	add	r4, r5
 800e9ae:	ea80 0202 	eor.w	r2, r0, r2
 800e9b2:	ea81 0303 	eor.w	r3, r1, r3
 800e9b6:	ea82 0000 	eor.w	r0, r2, r0
 800e9ba:	ea83 0101 	eor.w	r1, r3, r1
 800e9be:	ea80 0202 	eor.w	r2, r0, r2
 800e9c2:	ea81 0303 	eor.w	r3, r1, r3
 800e9c6:	2d36      	cmp	r5, #54	; 0x36
 800e9c8:	bf88      	it	hi
 800e9ca:	bd30      	pophi	{r4, r5, pc}
 800e9cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800e9d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800e9d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800e9d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800e9dc:	d002      	beq.n	800e9e4 <__adddf3+0x70>
 800e9de:	4240      	negs	r0, r0
 800e9e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e9e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800e9e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e9ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800e9f0:	d002      	beq.n	800e9f8 <__adddf3+0x84>
 800e9f2:	4252      	negs	r2, r2
 800e9f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800e9f8:	ea94 0f05 	teq	r4, r5
 800e9fc:	f000 80a7 	beq.w	800eb4e <__adddf3+0x1da>
 800ea00:	f1a4 0401 	sub.w	r4, r4, #1
 800ea04:	f1d5 0e20 	rsbs	lr, r5, #32
 800ea08:	db0d      	blt.n	800ea26 <__adddf3+0xb2>
 800ea0a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800ea0e:	fa22 f205 	lsr.w	r2, r2, r5
 800ea12:	1880      	adds	r0, r0, r2
 800ea14:	f141 0100 	adc.w	r1, r1, #0
 800ea18:	fa03 f20e 	lsl.w	r2, r3, lr
 800ea1c:	1880      	adds	r0, r0, r2
 800ea1e:	fa43 f305 	asr.w	r3, r3, r5
 800ea22:	4159      	adcs	r1, r3
 800ea24:	e00e      	b.n	800ea44 <__adddf3+0xd0>
 800ea26:	f1a5 0520 	sub.w	r5, r5, #32
 800ea2a:	f10e 0e20 	add.w	lr, lr, #32
 800ea2e:	2a01      	cmp	r2, #1
 800ea30:	fa03 fc0e 	lsl.w	ip, r3, lr
 800ea34:	bf28      	it	cs
 800ea36:	f04c 0c02 	orrcs.w	ip, ip, #2
 800ea3a:	fa43 f305 	asr.w	r3, r3, r5
 800ea3e:	18c0      	adds	r0, r0, r3
 800ea40:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800ea44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800ea48:	d507      	bpl.n	800ea5a <__adddf3+0xe6>
 800ea4a:	f04f 0e00 	mov.w	lr, #0
 800ea4e:	f1dc 0c00 	rsbs	ip, ip, #0
 800ea52:	eb7e 0000 	sbcs.w	r0, lr, r0
 800ea56:	eb6e 0101 	sbc.w	r1, lr, r1
 800ea5a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ea5e:	d31b      	bcc.n	800ea98 <__adddf3+0x124>
 800ea60:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800ea64:	d30c      	bcc.n	800ea80 <__adddf3+0x10c>
 800ea66:	0849      	lsrs	r1, r1, #1
 800ea68:	ea5f 0030 	movs.w	r0, r0, rrx
 800ea6c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800ea70:	f104 0401 	add.w	r4, r4, #1
 800ea74:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800ea78:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800ea7c:	f080 809a 	bcs.w	800ebb4 <__adddf3+0x240>
 800ea80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800ea84:	bf08      	it	eq
 800ea86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800ea8a:	f150 0000 	adcs.w	r0, r0, #0
 800ea8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800ea92:	ea41 0105 	orr.w	r1, r1, r5
 800ea96:	bd30      	pop	{r4, r5, pc}
 800ea98:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800ea9c:	4140      	adcs	r0, r0
 800ea9e:	eb41 0101 	adc.w	r1, r1, r1
 800eaa2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800eaa6:	f1a4 0401 	sub.w	r4, r4, #1
 800eaaa:	d1e9      	bne.n	800ea80 <__adddf3+0x10c>
 800eaac:	f091 0f00 	teq	r1, #0
 800eab0:	bf04      	itt	eq
 800eab2:	4601      	moveq	r1, r0
 800eab4:	2000      	moveq	r0, #0
 800eab6:	fab1 f381 	clz	r3, r1
 800eaba:	bf08      	it	eq
 800eabc:	3320      	addeq	r3, #32
 800eabe:	f1a3 030b 	sub.w	r3, r3, #11
 800eac2:	f1b3 0220 	subs.w	r2, r3, #32
 800eac6:	da0c      	bge.n	800eae2 <__adddf3+0x16e>
 800eac8:	320c      	adds	r2, #12
 800eaca:	dd08      	ble.n	800eade <__adddf3+0x16a>
 800eacc:	f102 0c14 	add.w	ip, r2, #20
 800ead0:	f1c2 020c 	rsb	r2, r2, #12
 800ead4:	fa01 f00c 	lsl.w	r0, r1, ip
 800ead8:	fa21 f102 	lsr.w	r1, r1, r2
 800eadc:	e00c      	b.n	800eaf8 <__adddf3+0x184>
 800eade:	f102 0214 	add.w	r2, r2, #20
 800eae2:	bfd8      	it	le
 800eae4:	f1c2 0c20 	rsble	ip, r2, #32
 800eae8:	fa01 f102 	lsl.w	r1, r1, r2
 800eaec:	fa20 fc0c 	lsr.w	ip, r0, ip
 800eaf0:	bfdc      	itt	le
 800eaf2:	ea41 010c 	orrle.w	r1, r1, ip
 800eaf6:	4090      	lslle	r0, r2
 800eaf8:	1ae4      	subs	r4, r4, r3
 800eafa:	bfa2      	ittt	ge
 800eafc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800eb00:	4329      	orrge	r1, r5
 800eb02:	bd30      	popge	{r4, r5, pc}
 800eb04:	ea6f 0404 	mvn.w	r4, r4
 800eb08:	3c1f      	subs	r4, #31
 800eb0a:	da1c      	bge.n	800eb46 <__adddf3+0x1d2>
 800eb0c:	340c      	adds	r4, #12
 800eb0e:	dc0e      	bgt.n	800eb2e <__adddf3+0x1ba>
 800eb10:	f104 0414 	add.w	r4, r4, #20
 800eb14:	f1c4 0220 	rsb	r2, r4, #32
 800eb18:	fa20 f004 	lsr.w	r0, r0, r4
 800eb1c:	fa01 f302 	lsl.w	r3, r1, r2
 800eb20:	ea40 0003 	orr.w	r0, r0, r3
 800eb24:	fa21 f304 	lsr.w	r3, r1, r4
 800eb28:	ea45 0103 	orr.w	r1, r5, r3
 800eb2c:	bd30      	pop	{r4, r5, pc}
 800eb2e:	f1c4 040c 	rsb	r4, r4, #12
 800eb32:	f1c4 0220 	rsb	r2, r4, #32
 800eb36:	fa20 f002 	lsr.w	r0, r0, r2
 800eb3a:	fa01 f304 	lsl.w	r3, r1, r4
 800eb3e:	ea40 0003 	orr.w	r0, r0, r3
 800eb42:	4629      	mov	r1, r5
 800eb44:	bd30      	pop	{r4, r5, pc}
 800eb46:	fa21 f004 	lsr.w	r0, r1, r4
 800eb4a:	4629      	mov	r1, r5
 800eb4c:	bd30      	pop	{r4, r5, pc}
 800eb4e:	f094 0f00 	teq	r4, #0
 800eb52:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800eb56:	bf06      	itte	eq
 800eb58:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800eb5c:	3401      	addeq	r4, #1
 800eb5e:	3d01      	subne	r5, #1
 800eb60:	e74e      	b.n	800ea00 <__adddf3+0x8c>
 800eb62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800eb66:	bf18      	it	ne
 800eb68:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800eb6c:	d029      	beq.n	800ebc2 <__adddf3+0x24e>
 800eb6e:	ea94 0f05 	teq	r4, r5
 800eb72:	bf08      	it	eq
 800eb74:	ea90 0f02 	teqeq	r0, r2
 800eb78:	d005      	beq.n	800eb86 <__adddf3+0x212>
 800eb7a:	ea54 0c00 	orrs.w	ip, r4, r0
 800eb7e:	bf04      	itt	eq
 800eb80:	4619      	moveq	r1, r3
 800eb82:	4610      	moveq	r0, r2
 800eb84:	bd30      	pop	{r4, r5, pc}
 800eb86:	ea91 0f03 	teq	r1, r3
 800eb8a:	bf1e      	ittt	ne
 800eb8c:	2100      	movne	r1, #0
 800eb8e:	2000      	movne	r0, #0
 800eb90:	bd30      	popne	{r4, r5, pc}
 800eb92:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800eb96:	d105      	bne.n	800eba4 <__adddf3+0x230>
 800eb98:	0040      	lsls	r0, r0, #1
 800eb9a:	4149      	adcs	r1, r1
 800eb9c:	bf28      	it	cs
 800eb9e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800eba2:	bd30      	pop	{r4, r5, pc}
 800eba4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800eba8:	bf3c      	itt	cc
 800ebaa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800ebae:	bd30      	popcc	{r4, r5, pc}
 800ebb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800ebb4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800ebb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ebbc:	f04f 0000 	mov.w	r0, #0
 800ebc0:	bd30      	pop	{r4, r5, pc}
 800ebc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800ebc6:	bf1a      	itte	ne
 800ebc8:	4619      	movne	r1, r3
 800ebca:	4610      	movne	r0, r2
 800ebcc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800ebd0:	bf1c      	itt	ne
 800ebd2:	460b      	movne	r3, r1
 800ebd4:	4602      	movne	r2, r0
 800ebd6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800ebda:	bf06      	itte	eq
 800ebdc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800ebe0:	ea91 0f03 	teqeq	r1, r3
 800ebe4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800ebe8:	bd30      	pop	{r4, r5, pc}
 800ebea:	bf00      	nop

0800ebec <__aeabi_ui2d>:
 800ebec:	f090 0f00 	teq	r0, #0
 800ebf0:	bf04      	itt	eq
 800ebf2:	2100      	moveq	r1, #0
 800ebf4:	4770      	bxeq	lr
 800ebf6:	b530      	push	{r4, r5, lr}
 800ebf8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800ebfc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800ec00:	f04f 0500 	mov.w	r5, #0
 800ec04:	f04f 0100 	mov.w	r1, #0
 800ec08:	e750      	b.n	800eaac <__adddf3+0x138>
 800ec0a:	bf00      	nop

0800ec0c <__aeabi_i2d>:
 800ec0c:	f090 0f00 	teq	r0, #0
 800ec10:	bf04      	itt	eq
 800ec12:	2100      	moveq	r1, #0
 800ec14:	4770      	bxeq	lr
 800ec16:	b530      	push	{r4, r5, lr}
 800ec18:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800ec1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800ec20:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800ec24:	bf48      	it	mi
 800ec26:	4240      	negmi	r0, r0
 800ec28:	f04f 0100 	mov.w	r1, #0
 800ec2c:	e73e      	b.n	800eaac <__adddf3+0x138>
 800ec2e:	bf00      	nop

0800ec30 <__aeabi_f2d>:
 800ec30:	0042      	lsls	r2, r0, #1
 800ec32:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800ec36:	ea4f 0131 	mov.w	r1, r1, rrx
 800ec3a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800ec3e:	bf1f      	itttt	ne
 800ec40:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800ec44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800ec48:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800ec4c:	4770      	bxne	lr
 800ec4e:	f092 0f00 	teq	r2, #0
 800ec52:	bf14      	ite	ne
 800ec54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800ec58:	4770      	bxeq	lr
 800ec5a:	b530      	push	{r4, r5, lr}
 800ec5c:	f44f 7460 	mov.w	r4, #896	; 0x380
 800ec60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800ec64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ec68:	e720      	b.n	800eaac <__adddf3+0x138>
 800ec6a:	bf00      	nop

0800ec6c <__aeabi_ul2d>:
 800ec6c:	ea50 0201 	orrs.w	r2, r0, r1
 800ec70:	bf08      	it	eq
 800ec72:	4770      	bxeq	lr
 800ec74:	b530      	push	{r4, r5, lr}
 800ec76:	f04f 0500 	mov.w	r5, #0
 800ec7a:	e00a      	b.n	800ec92 <__aeabi_l2d+0x16>

0800ec7c <__aeabi_l2d>:
 800ec7c:	ea50 0201 	orrs.w	r2, r0, r1
 800ec80:	bf08      	it	eq
 800ec82:	4770      	bxeq	lr
 800ec84:	b530      	push	{r4, r5, lr}
 800ec86:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800ec8a:	d502      	bpl.n	800ec92 <__aeabi_l2d+0x16>
 800ec8c:	4240      	negs	r0, r0
 800ec8e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800ec92:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800ec96:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800ec9a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800ec9e:	f43f aedc 	beq.w	800ea5a <__adddf3+0xe6>
 800eca2:	f04f 0203 	mov.w	r2, #3
 800eca6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ecaa:	bf18      	it	ne
 800ecac:	3203      	addne	r2, #3
 800ecae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ecb2:	bf18      	it	ne
 800ecb4:	3203      	addne	r2, #3
 800ecb6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800ecba:	f1c2 0320 	rsb	r3, r2, #32
 800ecbe:	fa00 fc03 	lsl.w	ip, r0, r3
 800ecc2:	fa20 f002 	lsr.w	r0, r0, r2
 800ecc6:	fa01 fe03 	lsl.w	lr, r1, r3
 800ecca:	ea40 000e 	orr.w	r0, r0, lr
 800ecce:	fa21 f102 	lsr.w	r1, r1, r2
 800ecd2:	4414      	add	r4, r2
 800ecd4:	e6c1      	b.n	800ea5a <__adddf3+0xe6>
 800ecd6:	bf00      	nop

0800ecd8 <__aeabi_dmul>:
 800ecd8:	b570      	push	{r4, r5, r6, lr}
 800ecda:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800ecde:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800ece2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800ece6:	bf1d      	ittte	ne
 800ece8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800ecec:	ea94 0f0c 	teqne	r4, ip
 800ecf0:	ea95 0f0c 	teqne	r5, ip
 800ecf4:	f000 f8de 	bleq	800eeb4 <__aeabi_dmul+0x1dc>
 800ecf8:	442c      	add	r4, r5
 800ecfa:	ea81 0603 	eor.w	r6, r1, r3
 800ecfe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800ed02:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800ed06:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800ed0a:	bf18      	it	ne
 800ed0c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800ed10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ed14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed18:	d038      	beq.n	800ed8c <__aeabi_dmul+0xb4>
 800ed1a:	fba0 ce02 	umull	ip, lr, r0, r2
 800ed1e:	f04f 0500 	mov.w	r5, #0
 800ed22:	fbe1 e502 	umlal	lr, r5, r1, r2
 800ed26:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800ed2a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800ed2e:	f04f 0600 	mov.w	r6, #0
 800ed32:	fbe1 5603 	umlal	r5, r6, r1, r3
 800ed36:	f09c 0f00 	teq	ip, #0
 800ed3a:	bf18      	it	ne
 800ed3c:	f04e 0e01 	orrne.w	lr, lr, #1
 800ed40:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800ed44:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800ed48:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800ed4c:	d204      	bcs.n	800ed58 <__aeabi_dmul+0x80>
 800ed4e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800ed52:	416d      	adcs	r5, r5
 800ed54:	eb46 0606 	adc.w	r6, r6, r6
 800ed58:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800ed5c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800ed60:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800ed64:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800ed68:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800ed6c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800ed70:	bf88      	it	hi
 800ed72:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800ed76:	d81e      	bhi.n	800edb6 <__aeabi_dmul+0xde>
 800ed78:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800ed7c:	bf08      	it	eq
 800ed7e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800ed82:	f150 0000 	adcs.w	r0, r0, #0
 800ed86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800ed8a:	bd70      	pop	{r4, r5, r6, pc}
 800ed8c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800ed90:	ea46 0101 	orr.w	r1, r6, r1
 800ed94:	ea40 0002 	orr.w	r0, r0, r2
 800ed98:	ea81 0103 	eor.w	r1, r1, r3
 800ed9c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800eda0:	bfc2      	ittt	gt
 800eda2:	ebd4 050c 	rsbsgt	r5, r4, ip
 800eda6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800edaa:	bd70      	popgt	{r4, r5, r6, pc}
 800edac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800edb0:	f04f 0e00 	mov.w	lr, #0
 800edb4:	3c01      	subs	r4, #1
 800edb6:	f300 80ab 	bgt.w	800ef10 <__aeabi_dmul+0x238>
 800edba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800edbe:	bfde      	ittt	le
 800edc0:	2000      	movle	r0, #0
 800edc2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800edc6:	bd70      	pople	{r4, r5, r6, pc}
 800edc8:	f1c4 0400 	rsb	r4, r4, #0
 800edcc:	3c20      	subs	r4, #32
 800edce:	da35      	bge.n	800ee3c <__aeabi_dmul+0x164>
 800edd0:	340c      	adds	r4, #12
 800edd2:	dc1b      	bgt.n	800ee0c <__aeabi_dmul+0x134>
 800edd4:	f104 0414 	add.w	r4, r4, #20
 800edd8:	f1c4 0520 	rsb	r5, r4, #32
 800eddc:	fa00 f305 	lsl.w	r3, r0, r5
 800ede0:	fa20 f004 	lsr.w	r0, r0, r4
 800ede4:	fa01 f205 	lsl.w	r2, r1, r5
 800ede8:	ea40 0002 	orr.w	r0, r0, r2
 800edec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800edf0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800edf4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800edf8:	fa21 f604 	lsr.w	r6, r1, r4
 800edfc:	eb42 0106 	adc.w	r1, r2, r6
 800ee00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ee04:	bf08      	it	eq
 800ee06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800ee0a:	bd70      	pop	{r4, r5, r6, pc}
 800ee0c:	f1c4 040c 	rsb	r4, r4, #12
 800ee10:	f1c4 0520 	rsb	r5, r4, #32
 800ee14:	fa00 f304 	lsl.w	r3, r0, r4
 800ee18:	fa20 f005 	lsr.w	r0, r0, r5
 800ee1c:	fa01 f204 	lsl.w	r2, r1, r4
 800ee20:	ea40 0002 	orr.w	r0, r0, r2
 800ee24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ee28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800ee2c:	f141 0100 	adc.w	r1, r1, #0
 800ee30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ee34:	bf08      	it	eq
 800ee36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800ee3a:	bd70      	pop	{r4, r5, r6, pc}
 800ee3c:	f1c4 0520 	rsb	r5, r4, #32
 800ee40:	fa00 f205 	lsl.w	r2, r0, r5
 800ee44:	ea4e 0e02 	orr.w	lr, lr, r2
 800ee48:	fa20 f304 	lsr.w	r3, r0, r4
 800ee4c:	fa01 f205 	lsl.w	r2, r1, r5
 800ee50:	ea43 0302 	orr.w	r3, r3, r2
 800ee54:	fa21 f004 	lsr.w	r0, r1, r4
 800ee58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ee5c:	fa21 f204 	lsr.w	r2, r1, r4
 800ee60:	ea20 0002 	bic.w	r0, r0, r2
 800ee64:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800ee68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ee6c:	bf08      	it	eq
 800ee6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800ee72:	bd70      	pop	{r4, r5, r6, pc}
 800ee74:	f094 0f00 	teq	r4, #0
 800ee78:	d10f      	bne.n	800ee9a <__aeabi_dmul+0x1c2>
 800ee7a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800ee7e:	0040      	lsls	r0, r0, #1
 800ee80:	eb41 0101 	adc.w	r1, r1, r1
 800ee84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800ee88:	bf08      	it	eq
 800ee8a:	3c01      	subeq	r4, #1
 800ee8c:	d0f7      	beq.n	800ee7e <__aeabi_dmul+0x1a6>
 800ee8e:	ea41 0106 	orr.w	r1, r1, r6
 800ee92:	f095 0f00 	teq	r5, #0
 800ee96:	bf18      	it	ne
 800ee98:	4770      	bxne	lr
 800ee9a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800ee9e:	0052      	lsls	r2, r2, #1
 800eea0:	eb43 0303 	adc.w	r3, r3, r3
 800eea4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800eea8:	bf08      	it	eq
 800eeaa:	3d01      	subeq	r5, #1
 800eeac:	d0f7      	beq.n	800ee9e <__aeabi_dmul+0x1c6>
 800eeae:	ea43 0306 	orr.w	r3, r3, r6
 800eeb2:	4770      	bx	lr
 800eeb4:	ea94 0f0c 	teq	r4, ip
 800eeb8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800eebc:	bf18      	it	ne
 800eebe:	ea95 0f0c 	teqne	r5, ip
 800eec2:	d00c      	beq.n	800eede <__aeabi_dmul+0x206>
 800eec4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800eec8:	bf18      	it	ne
 800eeca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800eece:	d1d1      	bne.n	800ee74 <__aeabi_dmul+0x19c>
 800eed0:	ea81 0103 	eor.w	r1, r1, r3
 800eed4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800eed8:	f04f 0000 	mov.w	r0, #0
 800eedc:	bd70      	pop	{r4, r5, r6, pc}
 800eede:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800eee2:	bf06      	itte	eq
 800eee4:	4610      	moveq	r0, r2
 800eee6:	4619      	moveq	r1, r3
 800eee8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800eeec:	d019      	beq.n	800ef22 <__aeabi_dmul+0x24a>
 800eeee:	ea94 0f0c 	teq	r4, ip
 800eef2:	d102      	bne.n	800eefa <__aeabi_dmul+0x222>
 800eef4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800eef8:	d113      	bne.n	800ef22 <__aeabi_dmul+0x24a>
 800eefa:	ea95 0f0c 	teq	r5, ip
 800eefe:	d105      	bne.n	800ef0c <__aeabi_dmul+0x234>
 800ef00:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800ef04:	bf1c      	itt	ne
 800ef06:	4610      	movne	r0, r2
 800ef08:	4619      	movne	r1, r3
 800ef0a:	d10a      	bne.n	800ef22 <__aeabi_dmul+0x24a>
 800ef0c:	ea81 0103 	eor.w	r1, r1, r3
 800ef10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ef14:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800ef18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ef1c:	f04f 0000 	mov.w	r0, #0
 800ef20:	bd70      	pop	{r4, r5, r6, pc}
 800ef22:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800ef26:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800ef2a:	bd70      	pop	{r4, r5, r6, pc}

0800ef2c <__aeabi_ddiv>:
 800ef2c:	b570      	push	{r4, r5, r6, lr}
 800ef2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800ef32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800ef36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800ef3a:	bf1d      	ittte	ne
 800ef3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800ef40:	ea94 0f0c 	teqne	r4, ip
 800ef44:	ea95 0f0c 	teqne	r5, ip
 800ef48:	f000 f8a7 	bleq	800f09a <__aeabi_ddiv+0x16e>
 800ef4c:	eba4 0405 	sub.w	r4, r4, r5
 800ef50:	ea81 0e03 	eor.w	lr, r1, r3
 800ef54:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800ef58:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800ef5c:	f000 8088 	beq.w	800f070 <__aeabi_ddiv+0x144>
 800ef60:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800ef64:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800ef68:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800ef6c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800ef70:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800ef74:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800ef78:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800ef7c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800ef80:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800ef84:	429d      	cmp	r5, r3
 800ef86:	bf08      	it	eq
 800ef88:	4296      	cmpeq	r6, r2
 800ef8a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800ef8e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800ef92:	d202      	bcs.n	800ef9a <__aeabi_ddiv+0x6e>
 800ef94:	085b      	lsrs	r3, r3, #1
 800ef96:	ea4f 0232 	mov.w	r2, r2, rrx
 800ef9a:	1ab6      	subs	r6, r6, r2
 800ef9c:	eb65 0503 	sbc.w	r5, r5, r3
 800efa0:	085b      	lsrs	r3, r3, #1
 800efa2:	ea4f 0232 	mov.w	r2, r2, rrx
 800efa6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800efaa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800efae:	ebb6 0e02 	subs.w	lr, r6, r2
 800efb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800efb6:	bf22      	ittt	cs
 800efb8:	1ab6      	subcs	r6, r6, r2
 800efba:	4675      	movcs	r5, lr
 800efbc:	ea40 000c 	orrcs.w	r0, r0, ip
 800efc0:	085b      	lsrs	r3, r3, #1
 800efc2:	ea4f 0232 	mov.w	r2, r2, rrx
 800efc6:	ebb6 0e02 	subs.w	lr, r6, r2
 800efca:	eb75 0e03 	sbcs.w	lr, r5, r3
 800efce:	bf22      	ittt	cs
 800efd0:	1ab6      	subcs	r6, r6, r2
 800efd2:	4675      	movcs	r5, lr
 800efd4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800efd8:	085b      	lsrs	r3, r3, #1
 800efda:	ea4f 0232 	mov.w	r2, r2, rrx
 800efde:	ebb6 0e02 	subs.w	lr, r6, r2
 800efe2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800efe6:	bf22      	ittt	cs
 800efe8:	1ab6      	subcs	r6, r6, r2
 800efea:	4675      	movcs	r5, lr
 800efec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800eff0:	085b      	lsrs	r3, r3, #1
 800eff2:	ea4f 0232 	mov.w	r2, r2, rrx
 800eff6:	ebb6 0e02 	subs.w	lr, r6, r2
 800effa:	eb75 0e03 	sbcs.w	lr, r5, r3
 800effe:	bf22      	ittt	cs
 800f000:	1ab6      	subcs	r6, r6, r2
 800f002:	4675      	movcs	r5, lr
 800f004:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800f008:	ea55 0e06 	orrs.w	lr, r5, r6
 800f00c:	d018      	beq.n	800f040 <__aeabi_ddiv+0x114>
 800f00e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800f012:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800f016:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800f01a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800f01e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800f022:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800f026:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800f02a:	d1c0      	bne.n	800efae <__aeabi_ddiv+0x82>
 800f02c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800f030:	d10b      	bne.n	800f04a <__aeabi_ddiv+0x11e>
 800f032:	ea41 0100 	orr.w	r1, r1, r0
 800f036:	f04f 0000 	mov.w	r0, #0
 800f03a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800f03e:	e7b6      	b.n	800efae <__aeabi_ddiv+0x82>
 800f040:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800f044:	bf04      	itt	eq
 800f046:	4301      	orreq	r1, r0
 800f048:	2000      	moveq	r0, #0
 800f04a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800f04e:	bf88      	it	hi
 800f050:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800f054:	f63f aeaf 	bhi.w	800edb6 <__aeabi_dmul+0xde>
 800f058:	ebb5 0c03 	subs.w	ip, r5, r3
 800f05c:	bf04      	itt	eq
 800f05e:	ebb6 0c02 	subseq.w	ip, r6, r2
 800f062:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800f066:	f150 0000 	adcs.w	r0, r0, #0
 800f06a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800f06e:	bd70      	pop	{r4, r5, r6, pc}
 800f070:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800f074:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800f078:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800f07c:	bfc2      	ittt	gt
 800f07e:	ebd4 050c 	rsbsgt	r5, r4, ip
 800f082:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800f086:	bd70      	popgt	{r4, r5, r6, pc}
 800f088:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f08c:	f04f 0e00 	mov.w	lr, #0
 800f090:	3c01      	subs	r4, #1
 800f092:	e690      	b.n	800edb6 <__aeabi_dmul+0xde>
 800f094:	ea45 0e06 	orr.w	lr, r5, r6
 800f098:	e68d      	b.n	800edb6 <__aeabi_dmul+0xde>
 800f09a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800f09e:	ea94 0f0c 	teq	r4, ip
 800f0a2:	bf08      	it	eq
 800f0a4:	ea95 0f0c 	teqeq	r5, ip
 800f0a8:	f43f af3b 	beq.w	800ef22 <__aeabi_dmul+0x24a>
 800f0ac:	ea94 0f0c 	teq	r4, ip
 800f0b0:	d10a      	bne.n	800f0c8 <__aeabi_ddiv+0x19c>
 800f0b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800f0b6:	f47f af34 	bne.w	800ef22 <__aeabi_dmul+0x24a>
 800f0ba:	ea95 0f0c 	teq	r5, ip
 800f0be:	f47f af25 	bne.w	800ef0c <__aeabi_dmul+0x234>
 800f0c2:	4610      	mov	r0, r2
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	e72c      	b.n	800ef22 <__aeabi_dmul+0x24a>
 800f0c8:	ea95 0f0c 	teq	r5, ip
 800f0cc:	d106      	bne.n	800f0dc <__aeabi_ddiv+0x1b0>
 800f0ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800f0d2:	f43f aefd 	beq.w	800eed0 <__aeabi_dmul+0x1f8>
 800f0d6:	4610      	mov	r0, r2
 800f0d8:	4619      	mov	r1, r3
 800f0da:	e722      	b.n	800ef22 <__aeabi_dmul+0x24a>
 800f0dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800f0e0:	bf18      	it	ne
 800f0e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800f0e6:	f47f aec5 	bne.w	800ee74 <__aeabi_dmul+0x19c>
 800f0ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800f0ee:	f47f af0d 	bne.w	800ef0c <__aeabi_dmul+0x234>
 800f0f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800f0f6:	f47f aeeb 	bne.w	800eed0 <__aeabi_dmul+0x1f8>
 800f0fa:	e712      	b.n	800ef22 <__aeabi_dmul+0x24a>

0800f0fc <__gedf2>:
 800f0fc:	f04f 3cff 	mov.w	ip, #4294967295
 800f100:	e006      	b.n	800f110 <__cmpdf2+0x4>
 800f102:	bf00      	nop

0800f104 <__ledf2>:
 800f104:	f04f 0c01 	mov.w	ip, #1
 800f108:	e002      	b.n	800f110 <__cmpdf2+0x4>
 800f10a:	bf00      	nop

0800f10c <__cmpdf2>:
 800f10c:	f04f 0c01 	mov.w	ip, #1
 800f110:	f84d cd04 	str.w	ip, [sp, #-4]!
 800f114:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800f118:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800f11c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800f120:	bf18      	it	ne
 800f122:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800f126:	d01b      	beq.n	800f160 <__cmpdf2+0x54>
 800f128:	b001      	add	sp, #4
 800f12a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800f12e:	bf0c      	ite	eq
 800f130:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800f134:	ea91 0f03 	teqne	r1, r3
 800f138:	bf02      	ittt	eq
 800f13a:	ea90 0f02 	teqeq	r0, r2
 800f13e:	2000      	moveq	r0, #0
 800f140:	4770      	bxeq	lr
 800f142:	f110 0f00 	cmn.w	r0, #0
 800f146:	ea91 0f03 	teq	r1, r3
 800f14a:	bf58      	it	pl
 800f14c:	4299      	cmppl	r1, r3
 800f14e:	bf08      	it	eq
 800f150:	4290      	cmpeq	r0, r2
 800f152:	bf2c      	ite	cs
 800f154:	17d8      	asrcs	r0, r3, #31
 800f156:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800f15a:	f040 0001 	orr.w	r0, r0, #1
 800f15e:	4770      	bx	lr
 800f160:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800f164:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800f168:	d102      	bne.n	800f170 <__cmpdf2+0x64>
 800f16a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800f16e:	d107      	bne.n	800f180 <__cmpdf2+0x74>
 800f170:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800f174:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800f178:	d1d6      	bne.n	800f128 <__cmpdf2+0x1c>
 800f17a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800f17e:	d0d3      	beq.n	800f128 <__cmpdf2+0x1c>
 800f180:	f85d 0b04 	ldr.w	r0, [sp], #4
 800f184:	4770      	bx	lr
 800f186:	bf00      	nop

0800f188 <__aeabi_cdrcmple>:
 800f188:	4684      	mov	ip, r0
 800f18a:	4610      	mov	r0, r2
 800f18c:	4662      	mov	r2, ip
 800f18e:	468c      	mov	ip, r1
 800f190:	4619      	mov	r1, r3
 800f192:	4663      	mov	r3, ip
 800f194:	e000      	b.n	800f198 <__aeabi_cdcmpeq>
 800f196:	bf00      	nop

0800f198 <__aeabi_cdcmpeq>:
 800f198:	b501      	push	{r0, lr}
 800f19a:	f7ff ffb7 	bl	800f10c <__cmpdf2>
 800f19e:	2800      	cmp	r0, #0
 800f1a0:	bf48      	it	mi
 800f1a2:	f110 0f00 	cmnmi.w	r0, #0
 800f1a6:	bd01      	pop	{r0, pc}

0800f1a8 <__aeabi_dcmpeq>:
 800f1a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f1ac:	f7ff fff4 	bl	800f198 <__aeabi_cdcmpeq>
 800f1b0:	bf0c      	ite	eq
 800f1b2:	2001      	moveq	r0, #1
 800f1b4:	2000      	movne	r0, #0
 800f1b6:	f85d fb08 	ldr.w	pc, [sp], #8
 800f1ba:	bf00      	nop

0800f1bc <__aeabi_dcmplt>:
 800f1bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f1c0:	f7ff ffea 	bl	800f198 <__aeabi_cdcmpeq>
 800f1c4:	bf34      	ite	cc
 800f1c6:	2001      	movcc	r0, #1
 800f1c8:	2000      	movcs	r0, #0
 800f1ca:	f85d fb08 	ldr.w	pc, [sp], #8
 800f1ce:	bf00      	nop

0800f1d0 <__aeabi_dcmple>:
 800f1d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f1d4:	f7ff ffe0 	bl	800f198 <__aeabi_cdcmpeq>
 800f1d8:	bf94      	ite	ls
 800f1da:	2001      	movls	r0, #1
 800f1dc:	2000      	movhi	r0, #0
 800f1de:	f85d fb08 	ldr.w	pc, [sp], #8
 800f1e2:	bf00      	nop

0800f1e4 <__aeabi_dcmpge>:
 800f1e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f1e8:	f7ff ffce 	bl	800f188 <__aeabi_cdrcmple>
 800f1ec:	bf94      	ite	ls
 800f1ee:	2001      	movls	r0, #1
 800f1f0:	2000      	movhi	r0, #0
 800f1f2:	f85d fb08 	ldr.w	pc, [sp], #8
 800f1f6:	bf00      	nop

0800f1f8 <__aeabi_dcmpgt>:
 800f1f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f1fc:	f7ff ffc4 	bl	800f188 <__aeabi_cdrcmple>
 800f200:	bf34      	ite	cc
 800f202:	2001      	movcc	r0, #1
 800f204:	2000      	movcs	r0, #0
 800f206:	f85d fb08 	ldr.w	pc, [sp], #8
 800f20a:	bf00      	nop

0800f20c <__aeabi_d2uiz>:
 800f20c:	004a      	lsls	r2, r1, #1
 800f20e:	d211      	bcs.n	800f234 <__aeabi_d2uiz+0x28>
 800f210:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800f214:	d211      	bcs.n	800f23a <__aeabi_d2uiz+0x2e>
 800f216:	d50d      	bpl.n	800f234 <__aeabi_d2uiz+0x28>
 800f218:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800f21c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800f220:	d40e      	bmi.n	800f240 <__aeabi_d2uiz+0x34>
 800f222:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800f226:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f22a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800f22e:	fa23 f002 	lsr.w	r0, r3, r2
 800f232:	4770      	bx	lr
 800f234:	f04f 0000 	mov.w	r0, #0
 800f238:	4770      	bx	lr
 800f23a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800f23e:	d102      	bne.n	800f246 <__aeabi_d2uiz+0x3a>
 800f240:	f04f 30ff 	mov.w	r0, #4294967295
 800f244:	4770      	bx	lr
 800f246:	f04f 0000 	mov.w	r0, #0
 800f24a:	4770      	bx	lr

0800f24c <__errno>:
 800f24c:	4b01      	ldr	r3, [pc, #4]	; (800f254 <__errno+0x8>)
 800f24e:	6818      	ldr	r0, [r3, #0]
 800f250:	4770      	bx	lr
 800f252:	bf00      	nop
 800f254:	2000068c 	.word	0x2000068c

0800f258 <__libc_init_array>:
 800f258:	b570      	push	{r4, r5, r6, lr}
 800f25a:	4b0e      	ldr	r3, [pc, #56]	; (800f294 <__libc_init_array+0x3c>)
 800f25c:	4c0e      	ldr	r4, [pc, #56]	; (800f298 <__libc_init_array+0x40>)
 800f25e:	1ae4      	subs	r4, r4, r3
 800f260:	10a4      	asrs	r4, r4, #2
 800f262:	2500      	movs	r5, #0
 800f264:	461e      	mov	r6, r3
 800f266:	42a5      	cmp	r5, r4
 800f268:	d004      	beq.n	800f274 <__libc_init_array+0x1c>
 800f26a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f26e:	4798      	blx	r3
 800f270:	3501      	adds	r5, #1
 800f272:	e7f8      	b.n	800f266 <__libc_init_array+0xe>
 800f274:	f7f8 fe74 	bl	8007f60 <_init>
 800f278:	4c08      	ldr	r4, [pc, #32]	; (800f29c <__libc_init_array+0x44>)
 800f27a:	4b09      	ldr	r3, [pc, #36]	; (800f2a0 <__libc_init_array+0x48>)
 800f27c:	1ae4      	subs	r4, r4, r3
 800f27e:	10a4      	asrs	r4, r4, #2
 800f280:	2500      	movs	r5, #0
 800f282:	461e      	mov	r6, r3
 800f284:	42a5      	cmp	r5, r4
 800f286:	d004      	beq.n	800f292 <__libc_init_array+0x3a>
 800f288:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f28c:	4798      	blx	r3
 800f28e:	3501      	adds	r5, #1
 800f290:	e7f8      	b.n	800f284 <__libc_init_array+0x2c>
 800f292:	bd70      	pop	{r4, r5, r6, pc}
 800f294:	20000690 	.word	0x20000690
 800f298:	20000690 	.word	0x20000690
 800f29c:	20000690 	.word	0x20000690
 800f2a0:	20000690 	.word	0x20000690

0800f2a4 <malloc>:
 800f2a4:	4b02      	ldr	r3, [pc, #8]	; (800f2b0 <malloc+0xc>)
 800f2a6:	4601      	mov	r1, r0
 800f2a8:	6818      	ldr	r0, [r3, #0]
 800f2aa:	f000 b863 	b.w	800f374 <_malloc_r>
 800f2ae:	bf00      	nop
 800f2b0:	2000068c 	.word	0x2000068c

0800f2b4 <free>:
 800f2b4:	4b02      	ldr	r3, [pc, #8]	; (800f2c0 <free+0xc>)
 800f2b6:	4601      	mov	r1, r0
 800f2b8:	6818      	ldr	r0, [r3, #0]
 800f2ba:	f000 b817 	b.w	800f2ec <_free_r>
 800f2be:	bf00      	nop
 800f2c0:	2000068c 	.word	0x2000068c

0800f2c4 <memcpy>:
 800f2c4:	b510      	push	{r4, lr}
 800f2c6:	1e43      	subs	r3, r0, #1
 800f2c8:	440a      	add	r2, r1
 800f2ca:	4291      	cmp	r1, r2
 800f2cc:	d004      	beq.n	800f2d8 <memcpy+0x14>
 800f2ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f2d6:	e7f8      	b.n	800f2ca <memcpy+0x6>
 800f2d8:	bd10      	pop	{r4, pc}

0800f2da <memset>:
 800f2da:	4402      	add	r2, r0
 800f2dc:	4603      	mov	r3, r0
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d002      	beq.n	800f2e8 <memset+0xe>
 800f2e2:	f803 1b01 	strb.w	r1, [r3], #1
 800f2e6:	e7fa      	b.n	800f2de <memset+0x4>
 800f2e8:	4770      	bx	lr
	...

0800f2ec <_free_r>:
 800f2ec:	b530      	push	{r4, r5, lr}
 800f2ee:	2900      	cmp	r1, #0
 800f2f0:	d03d      	beq.n	800f36e <_free_r+0x82>
 800f2f2:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800f2f6:	1f0b      	subs	r3, r1, #4
 800f2f8:	491d      	ldr	r1, [pc, #116]	; (800f370 <_free_r+0x84>)
 800f2fa:	2a00      	cmp	r2, #0
 800f2fc:	bfb8      	it	lt
 800f2fe:	189b      	addlt	r3, r3, r2
 800f300:	680a      	ldr	r2, [r1, #0]
 800f302:	460c      	mov	r4, r1
 800f304:	b912      	cbnz	r2, 800f30c <_free_r+0x20>
 800f306:	605a      	str	r2, [r3, #4]
 800f308:	600b      	str	r3, [r1, #0]
 800f30a:	bd30      	pop	{r4, r5, pc}
 800f30c:	4293      	cmp	r3, r2
 800f30e:	d20d      	bcs.n	800f32c <_free_r+0x40>
 800f310:	6819      	ldr	r1, [r3, #0]
 800f312:	1858      	adds	r0, r3, r1
 800f314:	4290      	cmp	r0, r2
 800f316:	bf01      	itttt	eq
 800f318:	585a      	ldreq	r2, [r3, r1]
 800f31a:	1852      	addeq	r2, r2, r1
 800f31c:	601a      	streq	r2, [r3, #0]
 800f31e:	6842      	ldreq	r2, [r0, #4]
 800f320:	605a      	str	r2, [r3, #4]
 800f322:	6023      	str	r3, [r4, #0]
 800f324:	bd30      	pop	{r4, r5, pc}
 800f326:	4299      	cmp	r1, r3
 800f328:	d803      	bhi.n	800f332 <_free_r+0x46>
 800f32a:	460a      	mov	r2, r1
 800f32c:	6851      	ldr	r1, [r2, #4]
 800f32e:	2900      	cmp	r1, #0
 800f330:	d1f9      	bne.n	800f326 <_free_r+0x3a>
 800f332:	6814      	ldr	r4, [r2, #0]
 800f334:	1915      	adds	r5, r2, r4
 800f336:	429d      	cmp	r5, r3
 800f338:	d10a      	bne.n	800f350 <_free_r+0x64>
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	4423      	add	r3, r4
 800f33e:	18d0      	adds	r0, r2, r3
 800f340:	4288      	cmp	r0, r1
 800f342:	6013      	str	r3, [r2, #0]
 800f344:	d113      	bne.n	800f36e <_free_r+0x82>
 800f346:	6808      	ldr	r0, [r1, #0]
 800f348:	4403      	add	r3, r0
 800f34a:	6013      	str	r3, [r2, #0]
 800f34c:	684b      	ldr	r3, [r1, #4]
 800f34e:	e00d      	b.n	800f36c <_free_r+0x80>
 800f350:	d902      	bls.n	800f358 <_free_r+0x6c>
 800f352:	230c      	movs	r3, #12
 800f354:	6003      	str	r3, [r0, #0]
 800f356:	bd30      	pop	{r4, r5, pc}
 800f358:	681c      	ldr	r4, [r3, #0]
 800f35a:	1918      	adds	r0, r3, r4
 800f35c:	4288      	cmp	r0, r1
 800f35e:	bf04      	itt	eq
 800f360:	6808      	ldreq	r0, [r1, #0]
 800f362:	6849      	ldreq	r1, [r1, #4]
 800f364:	6059      	str	r1, [r3, #4]
 800f366:	bf04      	itt	eq
 800f368:	1900      	addeq	r0, r0, r4
 800f36a:	6018      	streq	r0, [r3, #0]
 800f36c:	6053      	str	r3, [r2, #4]
 800f36e:	bd30      	pop	{r4, r5, pc}
 800f370:	200008a0 	.word	0x200008a0

0800f374 <_malloc_r>:
 800f374:	b570      	push	{r4, r5, r6, lr}
 800f376:	1ccc      	adds	r4, r1, #3
 800f378:	f024 0403 	bic.w	r4, r4, #3
 800f37c:	3408      	adds	r4, #8
 800f37e:	2c0c      	cmp	r4, #12
 800f380:	bf38      	it	cc
 800f382:	240c      	movcc	r4, #12
 800f384:	2c00      	cmp	r4, #0
 800f386:	4606      	mov	r6, r0
 800f388:	da03      	bge.n	800f392 <_malloc_r+0x1e>
 800f38a:	230c      	movs	r3, #12
 800f38c:	6033      	str	r3, [r6, #0]
 800f38e:	2000      	movs	r0, #0
 800f390:	bd70      	pop	{r4, r5, r6, pc}
 800f392:	428c      	cmp	r4, r1
 800f394:	d3f9      	bcc.n	800f38a <_malloc_r+0x16>
 800f396:	4a20      	ldr	r2, [pc, #128]	; (800f418 <_malloc_r+0xa4>)
 800f398:	6813      	ldr	r3, [r2, #0]
 800f39a:	4610      	mov	r0, r2
 800f39c:	4619      	mov	r1, r3
 800f39e:	b1a1      	cbz	r1, 800f3ca <_malloc_r+0x56>
 800f3a0:	680a      	ldr	r2, [r1, #0]
 800f3a2:	1b12      	subs	r2, r2, r4
 800f3a4:	d40e      	bmi.n	800f3c4 <_malloc_r+0x50>
 800f3a6:	2a0b      	cmp	r2, #11
 800f3a8:	d903      	bls.n	800f3b2 <_malloc_r+0x3e>
 800f3aa:	600a      	str	r2, [r1, #0]
 800f3ac:	188b      	adds	r3, r1, r2
 800f3ae:	508c      	str	r4, [r1, r2]
 800f3b0:	e01f      	b.n	800f3f2 <_malloc_r+0x7e>
 800f3b2:	428b      	cmp	r3, r1
 800f3b4:	bf0d      	iteet	eq
 800f3b6:	685a      	ldreq	r2, [r3, #4]
 800f3b8:	684a      	ldrne	r2, [r1, #4]
 800f3ba:	605a      	strne	r2, [r3, #4]
 800f3bc:	6002      	streq	r2, [r0, #0]
 800f3be:	bf18      	it	ne
 800f3c0:	460b      	movne	r3, r1
 800f3c2:	e016      	b.n	800f3f2 <_malloc_r+0x7e>
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	6849      	ldr	r1, [r1, #4]
 800f3c8:	e7e9      	b.n	800f39e <_malloc_r+0x2a>
 800f3ca:	4d14      	ldr	r5, [pc, #80]	; (800f41c <_malloc_r+0xa8>)
 800f3cc:	682b      	ldr	r3, [r5, #0]
 800f3ce:	b91b      	cbnz	r3, 800f3d8 <_malloc_r+0x64>
 800f3d0:	4630      	mov	r0, r6
 800f3d2:	f000 f825 	bl	800f420 <_sbrk_r>
 800f3d6:	6028      	str	r0, [r5, #0]
 800f3d8:	4630      	mov	r0, r6
 800f3da:	4621      	mov	r1, r4
 800f3dc:	f000 f820 	bl	800f420 <_sbrk_r>
 800f3e0:	1c42      	adds	r2, r0, #1
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	d0d1      	beq.n	800f38a <_malloc_r+0x16>
 800f3e6:	1cc5      	adds	r5, r0, #3
 800f3e8:	f025 0503 	bic.w	r5, r5, #3
 800f3ec:	4285      	cmp	r5, r0
 800f3ee:	d10a      	bne.n	800f406 <_malloc_r+0x92>
 800f3f0:	601c      	str	r4, [r3, #0]
 800f3f2:	f103 000b 	add.w	r0, r3, #11
 800f3f6:	1d1a      	adds	r2, r3, #4
 800f3f8:	f020 0007 	bic.w	r0, r0, #7
 800f3fc:	1a82      	subs	r2, r0, r2
 800f3fe:	d00a      	beq.n	800f416 <_malloc_r+0xa2>
 800f400:	4251      	negs	r1, r2
 800f402:	5099      	str	r1, [r3, r2]
 800f404:	bd70      	pop	{r4, r5, r6, pc}
 800f406:	4630      	mov	r0, r6
 800f408:	1ae9      	subs	r1, r5, r3
 800f40a:	f000 f809 	bl	800f420 <_sbrk_r>
 800f40e:	3001      	adds	r0, #1
 800f410:	d0bb      	beq.n	800f38a <_malloc_r+0x16>
 800f412:	462b      	mov	r3, r5
 800f414:	e7ec      	b.n	800f3f0 <_malloc_r+0x7c>
 800f416:	bd70      	pop	{r4, r5, r6, pc}
 800f418:	200008a0 	.word	0x200008a0
 800f41c:	2000089c 	.word	0x2000089c

0800f420 <_sbrk_r>:
 800f420:	b538      	push	{r3, r4, r5, lr}
 800f422:	4c06      	ldr	r4, [pc, #24]	; (800f43c <_sbrk_r+0x1c>)
 800f424:	2300      	movs	r3, #0
 800f426:	4605      	mov	r5, r0
 800f428:	4608      	mov	r0, r1
 800f42a:	6023      	str	r3, [r4, #0]
 800f42c:	f7f8 fd64 	bl	8007ef8 <_sbrk>
 800f430:	1c43      	adds	r3, r0, #1
 800f432:	d102      	bne.n	800f43a <_sbrk_r+0x1a>
 800f434:	6823      	ldr	r3, [r4, #0]
 800f436:	b103      	cbz	r3, 800f43a <_sbrk_r+0x1a>
 800f438:	602b      	str	r3, [r5, #0]
 800f43a:	bd38      	pop	{r3, r4, r5, pc}
 800f43c:	20001528 	.word	0x20001528

0800f440 <VCU_ConstB>:
 800f440:	48e8a71e 3fefff2e 48e8a71e 3fefff2e     ...H...?...H...?
 800f450:	0000fff8 00000000                       ........

0800f458 <VCU_ConstP>:
 800f458:	00000000 40390000 00000000 00000000     ......9@........
	...
 800f474:	40140000 00000000 404b8000 00000000     ...@......K@....
 800f484:	40640000 47ae147b 3fb47ae1 8f5c28f6     ..d@{..G.z.?.(\.
 800f494:	4008f5c2 47ae147b 3fb47ae1 851eb852     ...@{..G.z.?R...
 800f4a4:	400851eb c28f5c29 400428f5 a3d70a3d     .Q.@)\...(.@=...
 800f4b4:	40103d70 00000000 c0440000 00000000     p=.@......D.....
 800f4c4:	4072c000 2b020c4a 3fb91687 c083126f     ..r@J..+...?o...
 800f4d4:	3fc5a1ca 00000000 c0440000 00000000     ...?......D.....
 800f4e4:	4077a000 72b020c5 3fdd9168 e353f7cf     ..w@. .rh..?..S.
 800f4f4:	3fe09ba5 00000000 40901800 00000000     ...?.......@....
 800f504:	409f5400 00000000 40af0400 00000000     .T.@.......@....
 800f514:	40b73400 00000000 40bee600 a5e353f8     .4.@.......@.S..
 800f524:	3fe8c49b b645a1cb 3ff4fdf3 33333333     ...?..E....?3333
 800f534:	40033333 1eb851ec 400beb85 f1a9fbe7     33.@.Q.....@....
 800f544:	40124dd2 00000000 408fd000 00000000     .M.@.......@....
 800f554:	409f1800 00000000 40aebe00 00000000     ...@.......@....
 800f564:	40b6f300 00000000 40be9600 5a1cac08     ...@.......@...Z
 800f574:	3feb3b64 374bc6a8 3ff64189 a1cac083     d;.?..K7.A.?....
 800f584:	4003b645 851eb852 400c51eb 47ae147b     E..@R....Q.@{..G
 800f594:	40127ae1 00000000 00000000 00000000     .z.@............
	...
 800f5bc:	3fe00000 66666666 3fe66666 00000000     ...?ffffff.?....
 800f5cc:	3ff00000 00000000 00000000 00000000     ...?............
	...
 800f5f4:	3fe00000 66666666 3fe66666 00000000     ...?ffffff.?....
 800f604:	3ff00000 00000000 00000000 00000000     ...?............
	...
 800f62c:	3fe00000 66666666 3fe66666 00000000     ...?ffffff.?....
 800f63c:	3ff00000 00000000 00000000 00000000     ...?............
 800f64c:	404e0000 00000000 40518000 00000000     ..N@......Q@....
 800f65c:	40528000 00000000 4052c000 00000000     ..R@......R@....
 800f66c:	40540000 00000000 40554000 00000000     ..T@.....@U@....
	...
 800f684:	40240000 00000000 40568000 00000000     ..$@......V@....
 800f694:	3ff00000 00000000 3fe00000 9999999a     ...?.......?....
 800f6a4:	3fb99999 9999999a 3fa99999 9999999a     ...?.......?....
 800f6b4:	3fa99999 9999999a 3fa99999 eb851eb8     ...?.......?....
 800f6c4:	3f9eb851 00000000 00000000 00000000     Q..?............
 800f6d4:	00000000 eb851eb8 3f9eb851 eb851eb8     ........Q..?....
 800f6e4:	3f9eb851 9999999a 3fa99999 9999999a     Q..?.......?....
 800f6f4:	3fd99999 9999999a 3fe99999 00000000     ...?.......?....
 800f704:	3ff00000 00000000 c0390000 00000000     ...?......9.....
 800f714:	c0140000 00000000 c0080000 00000000     ................
 800f724:	c0000000 00000000 bff00000 00000000     ................
 800f734:	bfe00000 9999999a bfb99999 00000000     ................
 800f744:	00000000 9999999a 3fb99999 00000000     ...........?....
 800f754:	3fe00000 00000000 3ff00000 00000000     ...?.......?....
 800f764:	40000000 00000000 40140000 00000000     ...@.......@....
 800f774:	401c0000 00000000 40390000 00000006     ...@......9@....
 800f784:	00000002 00000100 00000101 01010001     ................
 800f794:	00000000                                ....

0800f798 <g_xmc_vadc_group_array>:
 800f798:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

0800f7a8 <PWM_MHJ9_IN_compare_config>:
 800f7a8:	00000000 00000005                       ........

0800f7b0 <PWM_MHJ9_IN_gpio_out_config>:
 800f7b0:	00000098 00010000 00000004              ............

0800f7bc <PWM_MHJ9_OUT_compare_config>:
 800f7bc:	00000000 00000005                       ........

0800f7c4 <PWM_MHJ9_OUT_gpio_out_config>:
 800f7c4:	00000098 00010000 00000004              ............

0800f7d0 <PWM_Waterpump_compare_config>:
 800f7d0:	00000000 00000004                       ........

0800f7d8 <PWM_Waterpump_gpio_out_config>:
 800f7d8:	00000098 00010000 00000004              ............

0800f7e4 <PWM_Fans1_compare_config>:
 800f7e4:	00000000 00000004                       ........

0800f7ec <PWM_Fans1_gpio_out_config>:
 800f7ec:	00000098 00010000 00000004              ............

0800f7f8 <PWM_Fans2_compare_config>:
 800f7f8:	00000000 00000004                       ........

0800f800 <PWM_Fans2_gpio_out_config>:
 800f800:	00000098 00010000 00000004              ............

0800f80c <INTERRUPT_Shifting>:
 800f80c:	01003f04                                .?..

0800f810 <group_init_handle0>:
	...

0800f824 <group_init_handle1>:
	...

0800f838 <group_init_handle2>:
	...

0800f84c <group_init_handle3>:
	...

0800f860 <global_config>:
 800f860:	00000000 00000003 00000000 00000000     ................
	...
 800f878:	454c4449 00000000 09632509 25097525     IDLE.....%c.%u.%
 800f888:	75250975 00000a0d 20726d54 00637653     u.%u....Tmr Svc.
 800f898:	51726d54 00000000                       TmrQ....

0800f8a0 <EVENT_GENERATOR_Shifting_OGU_Config>:
 800f8a0:	00000010                                ....

0800f8a4 <EVENT_DETECTOR_Shifting_ETL_Config>:
 800f8a4:	00000005 00000237                       ....7...

0800f8ac <DIGITAL_IO_Debug_LED>:
 800f8ac:	48028000 00000080 00000001 00000000     ...H............
 800f8bc:	00000002                                ....

0800f8c0 <CAN1_Res>:
 800f8c0:	48028100 00000080 00000001 00000000     ...H............
 800f8d0:	00000006                                ....

0800f8d4 <CAN2_Res>:
 800f8d4:	48028100 00000080 00000001 00000000     ...H............
 800f8e4:	0000000e                                ....

0800f8e8 <Signal_DownShift>:
 800f8e8:	48028300 00000008 00000000 00000000     ...H............
 800f8f8:	00000002                                ....

0800f8fc <Signal_UpShift>:
 800f8fc:	48028300 00000008 00000000 00000000     ...H............
 800f90c:	00000001 01040250 00010000 00000000     ....P...........
 800f91c:	00010000 01010101                       ........

0800f924 <CAN_1_gpio_out>:
 800f924:	48028100 0000000c                       ...H....

0800f92c <CAN_1_gpio_out_config>:
 800f92c:	00000090 00000001 00000002              ............

0800f938 <CAN_1_gpio_in>:
 800f938:	48028100 0000000d                       ...H....

0800f940 <CAN_1_gpio_in_config>:
	...

0800f94c <CAN_1_sr>:
 800f94c:	00000000                                ....

0800f950 <CAN_1_LMO_01_Config>:
 800f950:	200001c0 00000026 00000000              ... &.......

0800f95c <CAN_1_LMO_02_Config>:
 800f95c:	200001e0 00000027 00000000              ... '.......

0800f968 <CAN_1_LMO_03_Config>:
 800f968:	20000200 0000001e 00000000              ... ........

0800f974 <CAN_1_LMO_04_Config>:
 800f974:	20000220 0000001f 00000000               .. ........

0800f980 <CAN_1_LMO_05_Config>:
 800f980:	20000240 00000020 00000000              @..  .......

0800f98c <CAN_1_LMO_06_Config>:
 800f98c:	20000260 00000021 00000000              `.. !.......

0800f998 <CAN_1_LMO_07_Config>:
 800f998:	20000280 00000022 00000000              ... ".......

0800f9a4 <CAN_1_LMO_08_Config>:
 800f9a4:	200002a0 00000023 00000000              ... #.......

0800f9b0 <CAN_1>:
 800f9b0:	20000138 48014300 200001b4 0800f950     8.. .C.H... P...
 800f9c0:	0800f95c 0800f968 0800f974 0800f980     \...h...t.......
 800f9d0:	0800f98c 0800f998 0800f9a4 00000000     ................
	...
 800fa3c:	0800f94c 0800f924 0800f92c 0800f938     L...$...,...8...
 800fa4c:	0800f940 00080102 00000000              @...........

0800fa58 <CAN_2_gpio_out>:
 800fa58:	48028100 00000004                       ...H....

0800fa60 <CAN_2_gpio_out_config>:
 800fa60:	00000090 00000001 00000002              ............

0800fa6c <CAN_2_gpio_in>:
 800fa6c:	48028100 00000005                       ...H....

0800fa74 <CAN_2_gpio_in_config>:
	...

0800fa80 <CAN_2_sr>:
 800fa80:	00000000                                ....

0800fa84 <CAN_2_LMO_01_Config>:
 800fa84:	200002d0 0000003c 00000000              ... <.......

0800fa90 <CAN_2_LMO_02_Config>:
 800fa90:	200002f0 00000007 00000000              ... ........

0800fa9c <CAN_2_LMO_03_Config>:
 800fa9c:	20000310 00000008 00000000              ... ........

0800faa8 <CAN_2_LMO_04_Config>:
 800faa8:	20000330 00000005 00000000              0.. ........

0800fab4 <CAN_2_LMO_05_Config>:
 800fab4:	20000350 00000006 00000000              P.. ........

0800fac0 <CAN_2_LMO_06_Config>:
 800fac0:	20000370 00000016 00000000              p.. ........

0800facc <CAN_2_LMO_07_Config>:
 800facc:	20000390 00000015 00000000              ... ........

0800fad8 <CAN_2_LMO_08_Config>:
 800fad8:	200003b0 00000018 00000000              ... ........

0800fae4 <CAN_2_LMO_09_Config>:
 800fae4:	200003d0 00000017 00000000              ... ........

0800faf0 <CAN_2_LMO_10_Config>:
 800faf0:	200003f0 00000025 00000000              ... %.......

0800fafc <CAN_2_LMO_11_Config>:
 800fafc:	20000410 00000024 00000000              ... $.......

0800fb08 <CAN_2_LMO_12_Config>:
 800fb08:	20000430 00000009 00000000              0.. ........

0800fb14 <CAN_2>:
 800fb14:	20000138 48014200 200002c0 0800fa84     8.. .B.H... ....
 800fb24:	0800fa90 0800fa9c 0800faa8 0800fab4     ................
 800fb34:	0800fac0 0800facc 0800fad8 0800fae4     ................
 800fb44:	0800faf0 0800fafc 0800fb08 00000000     ................
	...
 800fba0:	0800fa80 0800fa58 0800fa60 0800fa6c     ....X...`...l...
 800fbb0:	0800fa74 000c0000 00000000              t...........

0800fbbc <BUS_IO_pin_list>:
 800fbbc:	48028000 00000009 48028000 0000000a     ...H.......H....
 800fbcc:	48028000 00000004 48028000 00000005     ...H.......H....
 800fbdc:	48028000 00000006 48028500 00000002     ...H.......H....
 800fbec:	48028500 00000007                       ...H....

0800fbf4 <BUS_IO_Input_pin_list>:
 800fbf4:	48028000 00000007 48028000 00000008     ...H.......H....

0800fc04 <ANALOG_IO_boardTemp>:
 800fc04:	00000000 200007f4 48028e00 0000000e     ....... ...H....

0800fc14 <ANALOG_IO_pbrakeR>:
 800fc14:	00000000 200007f5 48028e00 00000006     ....... ...H....

0800fc24 <ANALOG_IO_xClutch>:
 800fc24:	00000000 200007f6 48028e00 00000005     ....... ...H....

0800fc34 <ANALOG_IO_fFL>:
 800fc34:	00000000 200007f7 48028e00 00000002     ....... ...H....

0800fc44 <ANALOG_IO_fFR>:
 800fc44:	00000000 200007f8 48028e00 00000003     ....... ...H....

0800fc54 <ANALOG_IO_xRHF>:
 800fc54:	00000000 200007f9 48028e00 00000004     ....... ...H....

0800fc64 <ANALOG_IO_UBat>:
 800fc64:	00000000 200007fa 48028e00 00000008     ....... ...H....

0800fc74 <ANALOG_IO_xClutchSTW>:
 800fc74:	00000000 200007fb 48028e00 00000000     ....... ...H....

0800fc84 <ANALOG_IO_TR1_I_WP>:
 800fc84:	00000000 200007fc 48028f00 00000002     ....... ...H....

0800fc94 <ANALOG_IO_TR2_I_FAN1>:
 800fc94:	00000000 200007fd 48028f00 00000003     ....... ...H....

0800fca4 <ANALOG_IO_TR3_I_FAN2>:
 800fca4:	00000000 200007fe 48028f00 00000008     ....... ...H....

0800fcb4 <global_iclass_config>:
 800fcb4:	00000000                                ....

0800fcb8 <backgnd_config>:
 800fcb8:	00000005 00000000 00000010 6b736154     ............Task
 800fcc8:	7665525f 65766965 00000000 6b736154     _Reveive....Task
 800fcd8:	776f4c5f 6f697250 6b736154 00000000     _LowPrioTask....
 800fce8:	6b736154 6172545f 696d736e 00000074     Task_Transmit...
 800fcf8:	6b736154 6172545f 696d736e 6f697373     Task_Transmissio
 800fd08:	0000006e 6b736154 656e4f5f 706f6f4c     n...Task_OneLoop
 800fd18:	6b736154 00000000 656d6954 72545f72     Task....Timer_Tr
 800fd28:	6d736e61 69737369 00006e6f 646f6d66     ansmission..fmod
	...

0800fd40 <Zero>:
	...
 800fd4c:	80000000 00000043                       ....C...
