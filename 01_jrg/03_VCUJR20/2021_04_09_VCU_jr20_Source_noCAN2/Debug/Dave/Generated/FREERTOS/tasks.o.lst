   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "tasks.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .global pxCurrentTCB
  20              	 .section .bss.pxCurrentTCB,"aw",%nobits
  21              	 .align 2
  24              	pxCurrentTCB:
  25 0000 00000000 	 .space 4
  26              	 .section .bss.pxReadyTasksLists,"aw",%nobits
  27              	 .align 2
  30              	pxReadyTasksLists:
  31 0000 00000000 	 .space 120
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              	 .section .bss.xDelayedTaskList1,"aw",%nobits
  33              	 .align 2
  36              	xDelayedTaskList1:
  37 0000 00000000 	 .space 20
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              	 .section .bss.xDelayedTaskList2,"aw",%nobits
  39              	 .align 2
  42              	xDelayedTaskList2:
  43 0000 00000000 	 .space 20
  43      00000000 
  43      00000000 
  43      00000000 
  43      00000000 
  44              	 .section .bss.pxDelayedTaskList,"aw",%nobits
  45              	 .align 2
  48              	pxDelayedTaskList:
  49 0000 00000000 	 .space 4
  50              	 .section .bss.pxOverflowDelayedTaskList,"aw",%nobits
  51              	 .align 2
  54              	pxOverflowDelayedTaskList:
  55 0000 00000000 	 .space 4
  56              	 .section .bss.xPendingReadyList,"aw",%nobits
  57              	 .align 2
  60              	xPendingReadyList:
  61 0000 00000000 	 .space 20
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
  62              	 .section .bss.xTasksWaitingTermination,"aw",%nobits
  63              	 .align 2
  66              	xTasksWaitingTermination:
  67 0000 00000000 	 .space 20
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              	 .section .bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  69              	 .align 2
  72              	uxDeletedTasksWaitingCleanUp:
  73 0000 00000000 	 .space 4
  74              	 .section .bss.xSuspendedTaskList,"aw",%nobits
  75              	 .align 2
  78              	xSuspendedTaskList:
  79 0000 00000000 	 .space 20
  79      00000000 
  79      00000000 
  79      00000000 
  79      00000000 
  80              	 .section .bss.uxCurrentNumberOfTasks,"aw",%nobits
  81              	 .align 2
  84              	uxCurrentNumberOfTasks:
  85 0000 00000000 	 .space 4
  86              	 .section .bss.xTickCount,"aw",%nobits
  87              	 .align 2
  90              	xTickCount:
  91 0000 00000000 	 .space 4
  92              	 .section .bss.uxTopReadyPriority,"aw",%nobits
  93              	 .align 2
  96              	uxTopReadyPriority:
  97 0000 00000000 	 .space 4
  98              	 .section .bss.xSchedulerRunning,"aw",%nobits
  99              	 .align 2
 102              	xSchedulerRunning:
 103 0000 00000000 	 .space 4
 104              	 .section .bss.uxPendedTicks,"aw",%nobits
 105              	 .align 2
 108              	uxPendedTicks:
 109 0000 00000000 	 .space 4
 110              	 .section .bss.xYieldPending,"aw",%nobits
 111              	 .align 2
 114              	xYieldPending:
 115 0000 00000000 	 .space 4
 116              	 .section .bss.xNumOfOverflows,"aw",%nobits
 117              	 .align 2
 120              	xNumOfOverflows:
 121 0000 00000000 	 .space 4
 122              	 .section .bss.uxTaskNumber,"aw",%nobits
 123              	 .align 2
 126              	uxTaskNumber:
 127 0000 00000000 	 .space 4
 128              	 .section .bss.xNextTaskUnblockTime,"aw",%nobits
 129              	 .align 2
 132              	xNextTaskUnblockTime:
 133 0000 00000000 	 .space 4
 134              	 .section .bss.xIdleTaskHandle,"aw",%nobits
 135              	 .align 2
 138              	xIdleTaskHandle:
 139 0000 00000000 	 .space 4
 140              	 .section .bss.uxSchedulerSuspended,"aw",%nobits
 141              	 .align 2
 144              	uxSchedulerSuspended:
 145 0000 00000000 	 .space 4
 146              	 .section .text.xTaskCreate,"ax",%progbits
 147              	 .align 2
 148              	 .global xTaskCreate
 149              	 .thumb
 150              	 .thumb_func
 152              	xTaskCreate:
 153              	.LFB137:
 154              	 .file 1 "../Dave/Generated/FREERTOS/tasks.c"
   1:../Dave/Generated/FREERTOS/tasks.c **** /*
   2:../Dave/Generated/FREERTOS/tasks.c ****  * FreeRTOS Kernel V10.2.1
   3:../Dave/Generated/FREERTOS/tasks.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/tasks.c ****  *
   5:../Dave/Generated/FREERTOS/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/tasks.c ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/tasks.c ****  *
  12:../Dave/Generated/FREERTOS/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/tasks.c ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/tasks.c ****  *
  15:../Dave/Generated/FREERTOS/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/tasks.c ****  *
  22:../Dave/Generated/FREERTOS/tasks.c ****  * http://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/tasks.c ****  * http://aws.amazon.com/freertos
  24:../Dave/Generated/FREERTOS/tasks.c ****  *
  25:../Dave/Generated/FREERTOS/tasks.c ****  * 1 tab == 4 spaces!
  26:../Dave/Generated/FREERTOS/tasks.c ****  */
  27:../Dave/Generated/FREERTOS/tasks.c **** 
  28:../Dave/Generated/FREERTOS/tasks.c **** /* Standard includes. */
  29:../Dave/Generated/FREERTOS/tasks.c **** #include <stdlib.h>
  30:../Dave/Generated/FREERTOS/tasks.c **** #include <string.h>
  31:../Dave/Generated/FREERTOS/tasks.c **** 
  32:../Dave/Generated/FREERTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:../Dave/Generated/FREERTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:../Dave/Generated/FREERTOS/tasks.c **** task.h is included from an application file. */
  35:../Dave/Generated/FREERTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:../Dave/Generated/FREERTOS/tasks.c **** 
  37:../Dave/Generated/FREERTOS/tasks.c **** /* FreeRTOS includes. */
  38:../Dave/Generated/FREERTOS/tasks.c **** #include "FreeRTOS.h"
  39:../Dave/Generated/FREERTOS/tasks.c **** #include "task.h"
  40:../Dave/Generated/FREERTOS/tasks.c **** #include "timers.h"
  41:../Dave/Generated/FREERTOS/tasks.c **** #include "stack_macros.h"
  42:../Dave/Generated/FREERTOS/tasks.c **** 
  43:../Dave/Generated/FREERTOS/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:../Dave/Generated/FREERTOS/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:../Dave/Generated/FREERTOS/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:../Dave/Generated/FREERTOS/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:../Dave/Generated/FREERTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:../Dave/Generated/FREERTOS/tasks.c **** 
  49:../Dave/Generated/FREERTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:../Dave/Generated/FREERTOS/tasks.c **** functions but without including stdio.h here. */
  51:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:../Dave/Generated/FREERTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:../Dave/Generated/FREERTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:../Dave/Generated/FREERTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:../Dave/Generated/FREERTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:../Dave/Generated/FREERTOS/tasks.c **** 	#include <stdio.h>
  57:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:../Dave/Generated/FREERTOS/tasks.c **** 
  59:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:../Dave/Generated/FREERTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:../Dave/Generated/FREERTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:../Dave/Generated/FREERTOS/tasks.c **** #else
  64:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:../Dave/Generated/FREERTOS/tasks.c **** #endif
  66:../Dave/Generated/FREERTOS/tasks.c **** 
  67:../Dave/Generated/FREERTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:../Dave/Generated/FREERTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:../Dave/Generated/FREERTOS/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:../Dave/Generated/FREERTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:../Dave/Generated/FREERTOS/tasks.c **** 
  72:../Dave/Generated/FREERTOS/tasks.c **** /*
  73:../Dave/Generated/FREERTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:../Dave/Generated/FREERTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:../Dave/Generated/FREERTOS/tasks.c ****  */
  76:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:../Dave/Generated/FREERTOS/tasks.c **** 
  78:../Dave/Generated/FREERTOS/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:../Dave/Generated/FREERTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:../Dave/Generated/FREERTOS/tasks.c **** 
  83:../Dave/Generated/FREERTOS/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:../Dave/Generated/FREERTOS/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:../Dave/Generated/FREERTOS/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:../Dave/Generated/FREERTOS/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:../Dave/Generated/FREERTOS/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:../Dave/Generated/FREERTOS/tasks.c **** #else
  89:../Dave/Generated/FREERTOS/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:../Dave/Generated/FREERTOS/tasks.c **** #endif
  91:../Dave/Generated/FREERTOS/tasks.c **** 
  92:../Dave/Generated/FREERTOS/tasks.c **** /*
  93:../Dave/Generated/FREERTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:../Dave/Generated/FREERTOS/tasks.c ****  */
  95:../Dave/Generated/FREERTOS/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:../Dave/Generated/FREERTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:../Dave/Generated/FREERTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:../Dave/Generated/FREERTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:../Dave/Generated/FREERTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:../Dave/Generated/FREERTOS/tasks.c **** 
 101:../Dave/Generated/FREERTOS/tasks.c **** /*
 102:../Dave/Generated/FREERTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:../Dave/Generated/FREERTOS/tasks.c ****  * global, rather than file scope.
 104:../Dave/Generated/FREERTOS/tasks.c ****  */
 105:../Dave/Generated/FREERTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:../Dave/Generated/FREERTOS/tasks.c **** 	#define static
 107:../Dave/Generated/FREERTOS/tasks.c **** #endif
 108:../Dave/Generated/FREERTOS/tasks.c **** 
 109:../Dave/Generated/FREERTOS/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:../Dave/Generated/FREERTOS/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:../Dave/Generated/FREERTOS/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:../Dave/Generated/FREERTOS/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:../Dave/Generated/FREERTOS/tasks.c **** #endif
 114:../Dave/Generated/FREERTOS/tasks.c **** 
 115:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:../Dave/Generated/FREERTOS/tasks.c **** 
 117:../Dave/Generated/FREERTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:../Dave/Generated/FREERTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:../Dave/Generated/FREERTOS/tasks.c **** 	microcontroller architecture. */
 120:../Dave/Generated/FREERTOS/tasks.c **** 
 121:../Dave/Generated/FREERTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:../Dave/Generated/FREERTOS/tasks.c **** 	state task. */
 123:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:../Dave/Generated/FREERTOS/tasks.c **** 	{																									\
 125:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:../Dave/Generated/FREERTOS/tasks.c **** 		{																								\
 127:../Dave/Generated/FREERTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:../Dave/Generated/FREERTOS/tasks.c **** 		}																								\
 129:../Dave/Generated/FREERTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:../Dave/Generated/FREERTOS/tasks.c **** 
 131:../Dave/Generated/FREERTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 132:../Dave/Generated/FREERTOS/tasks.c **** 
 133:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:../Dave/Generated/FREERTOS/tasks.c **** 	{																									\
 135:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:../Dave/Generated/FREERTOS/tasks.c **** 																										\
 137:../Dave/Generated/FREERTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:../Dave/Generated/FREERTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:../Dave/Generated/FREERTOS/tasks.c **** 		{																								\
 140:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:../Dave/Generated/FREERTOS/tasks.c **** 			--uxTopPriority;																			\
 142:../Dave/Generated/FREERTOS/tasks.c **** 		}																								\
 143:../Dave/Generated/FREERTOS/tasks.c **** 																										\
 144:../Dave/Generated/FREERTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:../Dave/Generated/FREERTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:../Dave/Generated/FREERTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:../Dave/Generated/FREERTOS/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:../Dave/Generated/FREERTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:../Dave/Generated/FREERTOS/tasks.c **** 
 150:../Dave/Generated/FREERTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 151:../Dave/Generated/FREERTOS/tasks.c **** 
 152:../Dave/Generated/FREERTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:../Dave/Generated/FREERTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:../Dave/Generated/FREERTOS/tasks.c **** 	being used. */
 155:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:../Dave/Generated/FREERTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:../Dave/Generated/FREERTOS/tasks.c **** 
 158:../Dave/Generated/FREERTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:../Dave/Generated/FREERTOS/tasks.c **** 
 160:../Dave/Generated/FREERTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:../Dave/Generated/FREERTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:../Dave/Generated/FREERTOS/tasks.c **** 	architecture being used. */
 163:../Dave/Generated/FREERTOS/tasks.c **** 
 164:../Dave/Generated/FREERTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:../Dave/Generated/FREERTOS/tasks.c **** 
 167:../Dave/Generated/FREERTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 168:../Dave/Generated/FREERTOS/tasks.c **** 
 169:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:../Dave/Generated/FREERTOS/tasks.c **** 	{																								\
 171:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:../Dave/Generated/FREERTOS/tasks.c **** 																									\
 173:../Dave/Generated/FREERTOS/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:../Dave/Generated/FREERTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:../Dave/Generated/FREERTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:../Dave/Generated/FREERTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:../Dave/Generated/FREERTOS/tasks.c **** 
 179:../Dave/Generated/FREERTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 180:../Dave/Generated/FREERTOS/tasks.c **** 
 181:../Dave/Generated/FREERTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:../Dave/Generated/FREERTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:../Dave/Generated/FREERTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:../Dave/Generated/FREERTOS/tasks.c **** 	{																									\
 186:../Dave/Generated/FREERTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:../Dave/Generated/FREERTOS/tasks.c **** 		{																								\
 188:../Dave/Generated/FREERTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:../Dave/Generated/FREERTOS/tasks.c **** 		}																								\
 190:../Dave/Generated/FREERTOS/tasks.c **** 	}
 191:../Dave/Generated/FREERTOS/tasks.c **** 
 192:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:../Dave/Generated/FREERTOS/tasks.c **** 
 194:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 195:../Dave/Generated/FREERTOS/tasks.c **** 
 196:../Dave/Generated/FREERTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:../Dave/Generated/FREERTOS/tasks.c **** count overflows. */
 198:../Dave/Generated/FREERTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:../Dave/Generated/FREERTOS/tasks.c **** {																									\
 200:../Dave/Generated/FREERTOS/tasks.c **** 	List_t *pxTemp;																					\
 201:../Dave/Generated/FREERTOS/tasks.c **** 																									\
 202:../Dave/Generated/FREERTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:../Dave/Generated/FREERTOS/tasks.c **** 																									\
 205:../Dave/Generated/FREERTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:../Dave/Generated/FREERTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:../Dave/Generated/FREERTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:../Dave/Generated/FREERTOS/tasks.c **** 	xNumOfOverflows++;																				\
 209:../Dave/Generated/FREERTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:../Dave/Generated/FREERTOS/tasks.c **** }
 211:../Dave/Generated/FREERTOS/tasks.c **** 
 212:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 213:../Dave/Generated/FREERTOS/tasks.c **** 
 214:../Dave/Generated/FREERTOS/tasks.c **** /*
 215:../Dave/Generated/FREERTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:../Dave/Generated/FREERTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:../Dave/Generated/FREERTOS/tasks.c ****  */
 218:../Dave/Generated/FREERTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:../Dave/Generated/FREERTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:../Dave/Generated/FREERTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:../Dave/Generated/FREERTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:../Dave/Generated/FREERTOS/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 224:../Dave/Generated/FREERTOS/tasks.c **** 
 225:../Dave/Generated/FREERTOS/tasks.c **** /*
 226:../Dave/Generated/FREERTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:../Dave/Generated/FREERTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:../Dave/Generated/FREERTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:../Dave/Generated/FREERTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:../Dave/Generated/FREERTOS/tasks.c ****  */
 231:../Dave/Generated/FREERTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:../Dave/Generated/FREERTOS/tasks.c **** 
 233:../Dave/Generated/FREERTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:../Dave/Generated/FREERTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:../Dave/Generated/FREERTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:../Dave/Generated/FREERTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:../Dave/Generated/FREERTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:../Dave/Generated/FREERTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:../Dave/Generated/FREERTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:../Dave/Generated/FREERTOS/tasks.c **** to its original value when it is released. */
 241:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:../Dave/Generated/FREERTOS/tasks.c **** #else
 244:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:../Dave/Generated/FREERTOS/tasks.c **** #endif
 246:../Dave/Generated/FREERTOS/tasks.c **** 
 247:../Dave/Generated/FREERTOS/tasks.c **** /*
 248:../Dave/Generated/FREERTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:../Dave/Generated/FREERTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:../Dave/Generated/FREERTOS/tasks.c ****  * (the task's run time environment, including register values)
 251:../Dave/Generated/FREERTOS/tasks.c ****  */
 252:../Dave/Generated/FREERTOS/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:../Dave/Generated/FREERTOS/tasks.c **** {
 254:../Dave/Generated/FREERTOS/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:../Dave/Generated/FREERTOS/tasks.c **** 
 256:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:../Dave/Generated/FREERTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 259:../Dave/Generated/FREERTOS/tasks.c **** 
 260:../Dave/Generated/FREERTOS/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:../Dave/Generated/FREERTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:../Dave/Generated/FREERTOS/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:../Dave/Generated/FREERTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:../Dave/Generated/FREERTOS/tasks.c **** 
 266:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:../Dave/Generated/FREERTOS/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 269:../Dave/Generated/FREERTOS/tasks.c **** 
 270:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 273:../Dave/Generated/FREERTOS/tasks.c **** 
 274:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 278:../Dave/Generated/FREERTOS/tasks.c **** 
 279:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 283:../Dave/Generated/FREERTOS/tasks.c **** 
 284:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:../Dave/Generated/FREERTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 287:../Dave/Generated/FREERTOS/tasks.c **** 
 288:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:../Dave/Generated/FREERTOS/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 291:../Dave/Generated/FREERTOS/tasks.c **** 
 292:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:../Dave/Generated/FREERTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 295:../Dave/Generated/FREERTOS/tasks.c **** 
 296:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:../Dave/Generated/FREERTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:../Dave/Generated/FREERTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:../Dave/Generated/FREERTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:../Dave/Generated/FREERTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:../Dave/Generated/FREERTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:../Dave/Generated/FREERTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:../Dave/Generated/FREERTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 304:../Dave/Generated/FREERTOS/tasks.c **** 		struct	_reent xNewLib_reent;
 305:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 306:../Dave/Generated/FREERTOS/tasks.c **** 
 307:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 308:../Dave/Generated/FREERTOS/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 309:../Dave/Generated/FREERTOS/tasks.c **** 		volatile uint8_t ucNotifyState;
 310:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 311:../Dave/Generated/FREERTOS/tasks.c **** 
 312:../Dave/Generated/FREERTOS/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 313:../Dave/Generated/FREERTOS/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 314:../Dave/Generated/FREERTOS/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 315:../Dave/Generated/FREERTOS/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 316:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 317:../Dave/Generated/FREERTOS/tasks.c **** 
 318:../Dave/Generated/FREERTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 319:../Dave/Generated/FREERTOS/tasks.c **** 		uint8_t ucDelayAborted;
 320:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 321:../Dave/Generated/FREERTOS/tasks.c **** 
 322:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 323:../Dave/Generated/FREERTOS/tasks.c **** 		int iTaskErrno;
 324:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 325:../Dave/Generated/FREERTOS/tasks.c **** 
 326:../Dave/Generated/FREERTOS/tasks.c **** } tskTCB;
 327:../Dave/Generated/FREERTOS/tasks.c **** 
 328:../Dave/Generated/FREERTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 329:../Dave/Generated/FREERTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 330:../Dave/Generated/FREERTOS/tasks.c **** typedef tskTCB TCB_t;
 331:../Dave/Generated/FREERTOS/tasks.c **** 
 332:../Dave/Generated/FREERTOS/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 333:../Dave/Generated/FREERTOS/tasks.c **** which static variables must be declared volatile. */
 334:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 335:../Dave/Generated/FREERTOS/tasks.c **** 
 336:../Dave/Generated/FREERTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 337:../Dave/Generated/FREERTOS/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 338:../Dave/Generated/FREERTOS/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 339:../Dave/Generated/FREERTOS/tasks.c **** the static qualifier. */
 340:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 341:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 342:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 343:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 344:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 345:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 346:../Dave/Generated/FREERTOS/tasks.c **** 
 347:../Dave/Generated/FREERTOS/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 348:../Dave/Generated/FREERTOS/tasks.c **** 
 349:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 350:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 351:../Dave/Generated/FREERTOS/tasks.c **** 
 352:../Dave/Generated/FREERTOS/tasks.c **** #endif
 353:../Dave/Generated/FREERTOS/tasks.c **** 
 354:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 355:../Dave/Generated/FREERTOS/tasks.c **** 
 356:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 357:../Dave/Generated/FREERTOS/tasks.c **** 
 358:../Dave/Generated/FREERTOS/tasks.c **** #endif
 359:../Dave/Generated/FREERTOS/tasks.c **** 
 360:../Dave/Generated/FREERTOS/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 361:../Dave/Generated/FREERTOS/tasks.c **** the errno of the currently running task. */
 362:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 363:../Dave/Generated/FREERTOS/tasks.c **** 	int FreeRTOS_errno = 0;
 364:../Dave/Generated/FREERTOS/tasks.c **** #endif
 365:../Dave/Generated/FREERTOS/tasks.c **** 
 366:../Dave/Generated/FREERTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 367:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 368:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 369:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 370:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 371:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 372:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 373:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 374:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 375:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 376:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 377:../Dave/Generated/FREERTOS/tasks.c **** 
 378:../Dave/Generated/FREERTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:../Dave/Generated/FREERTOS/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:../Dave/Generated/FREERTOS/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:../Dave/Generated/FREERTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:../Dave/Generated/FREERTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 383:../Dave/Generated/FREERTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 384:../Dave/Generated/FREERTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 385:../Dave/Generated/FREERTOS/tasks.c **** accessed from a critical section. */
 386:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 387:../Dave/Generated/FREERTOS/tasks.c **** 
 388:../Dave/Generated/FREERTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:../Dave/Generated/FREERTOS/tasks.c **** 
 390:../Dave/Generated/FREERTOS/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 391:../Dave/Generated/FREERTOS/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 392:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 393:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 394:../Dave/Generated/FREERTOS/tasks.c **** 
 395:../Dave/Generated/FREERTOS/tasks.c **** #endif
 396:../Dave/Generated/FREERTOS/tasks.c **** 
 397:../Dave/Generated/FREERTOS/tasks.c **** /*lint -restore */
 398:../Dave/Generated/FREERTOS/tasks.c **** 
 399:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 400:../Dave/Generated/FREERTOS/tasks.c **** 
 401:../Dave/Generated/FREERTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 402:../Dave/Generated/FREERTOS/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 403:../Dave/Generated/FREERTOS/tasks.c **** 
 404:../Dave/Generated/FREERTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 405:../Dave/Generated/FREERTOS/tasks.c **** 
 406:../Dave/Generated/FREERTOS/tasks.c **** #endif
 407:../Dave/Generated/FREERTOS/tasks.c **** 
 408:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 409:../Dave/Generated/FREERTOS/tasks.c **** 
 410:../Dave/Generated/FREERTOS/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 411:../Dave/Generated/FREERTOS/tasks.c **** 
 412:../Dave/Generated/FREERTOS/tasks.c **** #endif
 413:../Dave/Generated/FREERTOS/tasks.c **** 
 414:../Dave/Generated/FREERTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:../Dave/Generated/FREERTOS/tasks.c **** 
 416:../Dave/Generated/FREERTOS/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 417:../Dave/Generated/FREERTOS/tasks.c **** 
 418:../Dave/Generated/FREERTOS/tasks.c **** #endif
 419:../Dave/Generated/FREERTOS/tasks.c **** 
 420:../Dave/Generated/FREERTOS/tasks.c **** /* File private functions. --------------------------------*/
 421:../Dave/Generated/FREERTOS/tasks.c **** 
 422:../Dave/Generated/FREERTOS/tasks.c **** /**
 423:../Dave/Generated/FREERTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 424:../Dave/Generated/FREERTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 425:../Dave/Generated/FREERTOS/tasks.c ****  * is in any other state.
 426:../Dave/Generated/FREERTOS/tasks.c ****  */
 427:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 428:../Dave/Generated/FREERTOS/tasks.c **** 
 429:../Dave/Generated/FREERTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 430:../Dave/Generated/FREERTOS/tasks.c **** 
 431:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 432:../Dave/Generated/FREERTOS/tasks.c **** 
 433:../Dave/Generated/FREERTOS/tasks.c **** /*
 434:../Dave/Generated/FREERTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 435:../Dave/Generated/FREERTOS/tasks.c ****  * automatically upon the creation of the first task.
 436:../Dave/Generated/FREERTOS/tasks.c ****  */
 437:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 438:../Dave/Generated/FREERTOS/tasks.c **** 
 439:../Dave/Generated/FREERTOS/tasks.c **** /*
 440:../Dave/Generated/FREERTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 441:../Dave/Generated/FREERTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 442:../Dave/Generated/FREERTOS/tasks.c ****  * creation of the first user task.
 443:../Dave/Generated/FREERTOS/tasks.c ****  *
 444:../Dave/Generated/FREERTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 445:../Dave/Generated/FREERTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 446:../Dave/Generated/FREERTOS/tasks.c ****  *
 447:../Dave/Generated/FREERTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 448:../Dave/Generated/FREERTOS/tasks.c ****  *
 449:../Dave/Generated/FREERTOS/tasks.c ****  */
 450:../Dave/Generated/FREERTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 451:../Dave/Generated/FREERTOS/tasks.c **** 
 452:../Dave/Generated/FREERTOS/tasks.c **** /*
 453:../Dave/Generated/FREERTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 454:../Dave/Generated/FREERTOS/tasks.c ****  * including the stack pointed to by the TCB.
 455:../Dave/Generated/FREERTOS/tasks.c ****  *
 456:../Dave/Generated/FREERTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 457:../Dave/Generated/FREERTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 458:../Dave/Generated/FREERTOS/tasks.c ****  */
 459:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 460:../Dave/Generated/FREERTOS/tasks.c **** 
 461:../Dave/Generated/FREERTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 462:../Dave/Generated/FREERTOS/tasks.c **** 
 463:../Dave/Generated/FREERTOS/tasks.c **** #endif
 464:../Dave/Generated/FREERTOS/tasks.c **** 
 465:../Dave/Generated/FREERTOS/tasks.c **** /*
 466:../Dave/Generated/FREERTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 467:../Dave/Generated/FREERTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 468:../Dave/Generated/FREERTOS/tasks.c ****  * and its TCB deleted.
 469:../Dave/Generated/FREERTOS/tasks.c ****  */
 470:../Dave/Generated/FREERTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 471:../Dave/Generated/FREERTOS/tasks.c **** 
 472:../Dave/Generated/FREERTOS/tasks.c **** /*
 473:../Dave/Generated/FREERTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 474:../Dave/Generated/FREERTOS/tasks.c ****  * either the current or the overflow delayed task list.
 475:../Dave/Generated/FREERTOS/tasks.c ****  */
 476:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 477:../Dave/Generated/FREERTOS/tasks.c **** 
 478:../Dave/Generated/FREERTOS/tasks.c **** /*
 479:../Dave/Generated/FREERTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 480:../Dave/Generated/FREERTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 481:../Dave/Generated/FREERTOS/tasks.c ****  * a suspended list, etc.).
 482:../Dave/Generated/FREERTOS/tasks.c ****  *
 483:../Dave/Generated/FREERTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 484:../Dave/Generated/FREERTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 485:../Dave/Generated/FREERTOS/tasks.c ****  */
 486:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 487:../Dave/Generated/FREERTOS/tasks.c **** 
 488:../Dave/Generated/FREERTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 489:../Dave/Generated/FREERTOS/tasks.c **** 
 490:../Dave/Generated/FREERTOS/tasks.c **** #endif
 491:../Dave/Generated/FREERTOS/tasks.c **** 
 492:../Dave/Generated/FREERTOS/tasks.c **** /*
 493:../Dave/Generated/FREERTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 494:../Dave/Generated/FREERTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 495:../Dave/Generated/FREERTOS/tasks.c ****  */
 496:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 497:../Dave/Generated/FREERTOS/tasks.c **** 
 498:../Dave/Generated/FREERTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 499:../Dave/Generated/FREERTOS/tasks.c **** 
 500:../Dave/Generated/FREERTOS/tasks.c **** #endif
 501:../Dave/Generated/FREERTOS/tasks.c **** 
 502:../Dave/Generated/FREERTOS/tasks.c **** /*
 503:../Dave/Generated/FREERTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 504:../Dave/Generated/FREERTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 505:../Dave/Generated/FREERTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 506:../Dave/Generated/FREERTOS/tasks.c ****  */
 507:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 508:../Dave/Generated/FREERTOS/tasks.c **** 
 509:../Dave/Generated/FREERTOS/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 510:../Dave/Generated/FREERTOS/tasks.c **** 
 511:../Dave/Generated/FREERTOS/tasks.c **** #endif
 512:../Dave/Generated/FREERTOS/tasks.c **** 
 513:../Dave/Generated/FREERTOS/tasks.c **** /*
 514:../Dave/Generated/FREERTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 515:../Dave/Generated/FREERTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 516:../Dave/Generated/FREERTOS/tasks.c ****  *
 517:../Dave/Generated/FREERTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 518:../Dave/Generated/FREERTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 519:../Dave/Generated/FREERTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 520:../Dave/Generated/FREERTOS/tasks.c ****  * set to a value other than 1.
 521:../Dave/Generated/FREERTOS/tasks.c ****  */
 522:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 523:../Dave/Generated/FREERTOS/tasks.c **** 
 524:../Dave/Generated/FREERTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 525:../Dave/Generated/FREERTOS/tasks.c **** 
 526:../Dave/Generated/FREERTOS/tasks.c **** #endif
 527:../Dave/Generated/FREERTOS/tasks.c **** 
 528:../Dave/Generated/FREERTOS/tasks.c **** /*
 529:../Dave/Generated/FREERTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 530:../Dave/Generated/FREERTOS/tasks.c ****  * will exit the Blocked state.
 531:../Dave/Generated/FREERTOS/tasks.c ****  */
 532:../Dave/Generated/FREERTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 533:../Dave/Generated/FREERTOS/tasks.c **** 
 534:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 535:../Dave/Generated/FREERTOS/tasks.c **** 
 536:../Dave/Generated/FREERTOS/tasks.c **** 	/*
 537:../Dave/Generated/FREERTOS/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 538:../Dave/Generated/FREERTOS/tasks.c **** 	 * human readable tables of task information.
 539:../Dave/Generated/FREERTOS/tasks.c **** 	 */
 540:../Dave/Generated/FREERTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 541:../Dave/Generated/FREERTOS/tasks.c **** 
 542:../Dave/Generated/FREERTOS/tasks.c **** #endif
 543:../Dave/Generated/FREERTOS/tasks.c **** 
 544:../Dave/Generated/FREERTOS/tasks.c **** /*
 545:../Dave/Generated/FREERTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 546:../Dave/Generated/FREERTOS/tasks.c ****  * dynamically to fill in the structure's members.
 547:../Dave/Generated/FREERTOS/tasks.c ****  */
 548:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 549:../Dave/Generated/FREERTOS/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 550:../Dave/Generated/FREERTOS/tasks.c **** 									const uint32_t ulStackDepth,
 551:../Dave/Generated/FREERTOS/tasks.c **** 									void * const pvParameters,
 552:../Dave/Generated/FREERTOS/tasks.c **** 									UBaseType_t uxPriority,
 553:../Dave/Generated/FREERTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 554:../Dave/Generated/FREERTOS/tasks.c **** 									TCB_t *pxNewTCB,
 555:../Dave/Generated/FREERTOS/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 556:../Dave/Generated/FREERTOS/tasks.c **** 
 557:../Dave/Generated/FREERTOS/tasks.c **** /*
 558:../Dave/Generated/FREERTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 559:../Dave/Generated/FREERTOS/tasks.c ****  * under the control of the scheduler.
 560:../Dave/Generated/FREERTOS/tasks.c ****  */
 561:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 562:../Dave/Generated/FREERTOS/tasks.c **** 
 563:../Dave/Generated/FREERTOS/tasks.c **** /*
 564:../Dave/Generated/FREERTOS/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 565:../Dave/Generated/FREERTOS/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 566:../Dave/Generated/FREERTOS/tasks.c ****  * called by the function.
 567:../Dave/Generated/FREERTOS/tasks.c ****  */
 568:../Dave/Generated/FREERTOS/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 569:../Dave/Generated/FREERTOS/tasks.c **** 
 570:../Dave/Generated/FREERTOS/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 571:../Dave/Generated/FREERTOS/tasks.c **** 
 572:../Dave/Generated/FREERTOS/tasks.c **** #endif
 573:../Dave/Generated/FREERTOS/tasks.c **** 
 574:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 575:../Dave/Generated/FREERTOS/tasks.c **** 
 576:../Dave/Generated/FREERTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 577:../Dave/Generated/FREERTOS/tasks.c **** 
 578:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 579:../Dave/Generated/FREERTOS/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 580:../Dave/Generated/FREERTOS/tasks.c **** 									const uint32_t ulStackDepth,
 581:../Dave/Generated/FREERTOS/tasks.c **** 									void * const pvParameters,
 582:../Dave/Generated/FREERTOS/tasks.c **** 									UBaseType_t uxPriority,
 583:../Dave/Generated/FREERTOS/tasks.c **** 									StackType_t * const puxStackBuffer,
 584:../Dave/Generated/FREERTOS/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 585:../Dave/Generated/FREERTOS/tasks.c **** 	{
 586:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 587:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xReturn;
 588:../Dave/Generated/FREERTOS/tasks.c **** 
 589:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 590:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 591:../Dave/Generated/FREERTOS/tasks.c **** 
 592:../Dave/Generated/FREERTOS/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 593:../Dave/Generated/FREERTOS/tasks.c **** 		{
 594:../Dave/Generated/FREERTOS/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 595:../Dave/Generated/FREERTOS/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 596:../Dave/Generated/FREERTOS/tasks.c **** 			structure. */
 597:../Dave/Generated/FREERTOS/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 598:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 599:../Dave/Generated/FREERTOS/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 600:../Dave/Generated/FREERTOS/tasks.c **** 		}
 601:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configASSERT_DEFINED */
 602:../Dave/Generated/FREERTOS/tasks.c **** 
 603:../Dave/Generated/FREERTOS/tasks.c **** 
 604:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 605:../Dave/Generated/FREERTOS/tasks.c **** 		{
 606:../Dave/Generated/FREERTOS/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 607:../Dave/Generated/FREERTOS/tasks.c **** 			function - use them. */
 608:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 609:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 610:../Dave/Generated/FREERTOS/tasks.c **** 
 611:../Dave/Generated/FREERTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 612:../Dave/Generated/FREERTOS/tasks.c **** 			{
 613:../Dave/Generated/FREERTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 614:../Dave/Generated/FREERTOS/tasks.c **** 				task was created statically in case the task is later deleted. */
 615:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 616:../Dave/Generated/FREERTOS/tasks.c **** 			}
 617:../Dave/Generated/FREERTOS/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 618:../Dave/Generated/FREERTOS/tasks.c **** 
 619:../Dave/Generated/FREERTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 620:../Dave/Generated/FREERTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 621:../Dave/Generated/FREERTOS/tasks.c **** 		}
 622:../Dave/Generated/FREERTOS/tasks.c **** 		else
 623:../Dave/Generated/FREERTOS/tasks.c **** 		{
 624:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = NULL;
 625:../Dave/Generated/FREERTOS/tasks.c **** 		}
 626:../Dave/Generated/FREERTOS/tasks.c **** 
 627:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 628:../Dave/Generated/FREERTOS/tasks.c **** 	}
 629:../Dave/Generated/FREERTOS/tasks.c **** 
 630:../Dave/Generated/FREERTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 631:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 632:../Dave/Generated/FREERTOS/tasks.c **** 
 633:../Dave/Generated/FREERTOS/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 634:../Dave/Generated/FREERTOS/tasks.c **** 
 635:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 636:../Dave/Generated/FREERTOS/tasks.c **** 	{
 637:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 638:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 639:../Dave/Generated/FREERTOS/tasks.c **** 
 640:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 641:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 642:../Dave/Generated/FREERTOS/tasks.c **** 
 643:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 644:../Dave/Generated/FREERTOS/tasks.c **** 		{
 645:../Dave/Generated/FREERTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 646:../Dave/Generated/FREERTOS/tasks.c **** 			on the implementation of the port malloc function and whether or
 647:../Dave/Generated/FREERTOS/tasks.c **** 			not static allocation is being used. */
 648:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 649:../Dave/Generated/FREERTOS/tasks.c **** 
 650:../Dave/Generated/FREERTOS/tasks.c **** 			/* Store the stack location in the TCB. */
 651:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 652:../Dave/Generated/FREERTOS/tasks.c **** 
 653:../Dave/Generated/FREERTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 654:../Dave/Generated/FREERTOS/tasks.c **** 			{
 655:../Dave/Generated/FREERTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 656:../Dave/Generated/FREERTOS/tasks.c **** 				task was created statically in case the task is later deleted. */
 657:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 658:../Dave/Generated/FREERTOS/tasks.c **** 			}
 659:../Dave/Generated/FREERTOS/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 660:../Dave/Generated/FREERTOS/tasks.c **** 
 661:../Dave/Generated/FREERTOS/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 662:../Dave/Generated/FREERTOS/tasks.c **** 									pxTaskDefinition->pcName,
 663:../Dave/Generated/FREERTOS/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 664:../Dave/Generated/FREERTOS/tasks.c **** 									pxTaskDefinition->pvParameters,
 665:../Dave/Generated/FREERTOS/tasks.c **** 									pxTaskDefinition->uxPriority,
 666:../Dave/Generated/FREERTOS/tasks.c **** 									pxCreatedTask, pxNewTCB,
 667:../Dave/Generated/FREERTOS/tasks.c **** 									pxTaskDefinition->xRegions );
 668:../Dave/Generated/FREERTOS/tasks.c **** 
 669:../Dave/Generated/FREERTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 670:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdPASS;
 671:../Dave/Generated/FREERTOS/tasks.c **** 		}
 672:../Dave/Generated/FREERTOS/tasks.c **** 
 673:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 674:../Dave/Generated/FREERTOS/tasks.c **** 	}
 675:../Dave/Generated/FREERTOS/tasks.c **** 
 676:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 677:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 678:../Dave/Generated/FREERTOS/tasks.c **** 
 679:../Dave/Generated/FREERTOS/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 680:../Dave/Generated/FREERTOS/tasks.c **** 
 681:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 682:../Dave/Generated/FREERTOS/tasks.c **** 	{
 683:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 684:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 685:../Dave/Generated/FREERTOS/tasks.c **** 
 686:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 687:../Dave/Generated/FREERTOS/tasks.c **** 
 688:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 689:../Dave/Generated/FREERTOS/tasks.c **** 		{
 690:../Dave/Generated/FREERTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 691:../Dave/Generated/FREERTOS/tasks.c **** 			on the implementation of the port malloc function and whether or
 692:../Dave/Generated/FREERTOS/tasks.c **** 			not static allocation is being used. */
 693:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 694:../Dave/Generated/FREERTOS/tasks.c **** 
 695:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxNewTCB != NULL )
 696:../Dave/Generated/FREERTOS/tasks.c **** 			{
 697:../Dave/Generated/FREERTOS/tasks.c **** 				/* Store the stack location in the TCB. */
 698:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 699:../Dave/Generated/FREERTOS/tasks.c **** 
 700:../Dave/Generated/FREERTOS/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 701:../Dave/Generated/FREERTOS/tasks.c **** 				{
 702:../Dave/Generated/FREERTOS/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 703:../Dave/Generated/FREERTOS/tasks.c **** 					this task had a statically allocated stack in case it is
 704:../Dave/Generated/FREERTOS/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 705:../Dave/Generated/FREERTOS/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 706:../Dave/Generated/FREERTOS/tasks.c **** 				}
 707:../Dave/Generated/FREERTOS/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 708:../Dave/Generated/FREERTOS/tasks.c **** 
 709:../Dave/Generated/FREERTOS/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 710:../Dave/Generated/FREERTOS/tasks.c **** 										pxTaskDefinition->pcName,
 711:../Dave/Generated/FREERTOS/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 712:../Dave/Generated/FREERTOS/tasks.c **** 										pxTaskDefinition->pvParameters,
 713:../Dave/Generated/FREERTOS/tasks.c **** 										pxTaskDefinition->uxPriority,
 714:../Dave/Generated/FREERTOS/tasks.c **** 										pxCreatedTask, pxNewTCB,
 715:../Dave/Generated/FREERTOS/tasks.c **** 										pxTaskDefinition->xRegions );
 716:../Dave/Generated/FREERTOS/tasks.c **** 
 717:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 718:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdPASS;
 719:../Dave/Generated/FREERTOS/tasks.c **** 			}
 720:../Dave/Generated/FREERTOS/tasks.c **** 		}
 721:../Dave/Generated/FREERTOS/tasks.c **** 
 722:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 723:../Dave/Generated/FREERTOS/tasks.c **** 	}
 724:../Dave/Generated/FREERTOS/tasks.c **** 
 725:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 726:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 727:../Dave/Generated/FREERTOS/tasks.c **** 
 728:../Dave/Generated/FREERTOS/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 729:../Dave/Generated/FREERTOS/tasks.c **** 
 730:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 731:../Dave/Generated/FREERTOS/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 732:../Dave/Generated/FREERTOS/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 733:../Dave/Generated/FREERTOS/tasks.c **** 							void * const pvParameters,
 734:../Dave/Generated/FREERTOS/tasks.c **** 							UBaseType_t uxPriority,
 735:../Dave/Generated/FREERTOS/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 736:../Dave/Generated/FREERTOS/tasks.c **** 	{
 155              	 .loc 1 736 0
 156              	 .cfi_startproc
 157              	 
 158              	 
 159 0000 80B5     	 push {r7,lr}
 160              	.LCFI0:
 161              	 .cfi_def_cfa_offset 8
 162              	 .cfi_offset 7,-8
 163              	 .cfi_offset 14,-4
 164 0002 8CB0     	 sub sp,sp,#48
 165              	.LCFI1:
 166              	 .cfi_def_cfa_offset 56
 167 0004 04AF     	 add r7,sp,#16
 168              	.LCFI2:
 169              	 .cfi_def_cfa 7,40
 170 0006 F860     	 str r0,[r7,#12]
 171 0008 B960     	 str r1,[r7,#8]
 172 000a 3B60     	 str r3,[r7]
 173 000c 1346     	 mov r3,r2
 174 000e FB80     	 strh r3,[r7,#6]
 175              	.LBB115:
 737:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 738:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
 739:../Dave/Generated/FREERTOS/tasks.c **** 
 740:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 741:../Dave/Generated/FREERTOS/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 742:../Dave/Generated/FREERTOS/tasks.c **** 		the TCB then the stack. */
 743:../Dave/Generated/FREERTOS/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 744:../Dave/Generated/FREERTOS/tasks.c **** 		{
 745:../Dave/Generated/FREERTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 746:../Dave/Generated/FREERTOS/tasks.c **** 			the implementation of the port malloc function and whether or not static
 747:../Dave/Generated/FREERTOS/tasks.c **** 			allocation is being used. */
 748:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 749:../Dave/Generated/FREERTOS/tasks.c **** 
 750:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxNewTCB != NULL )
 751:../Dave/Generated/FREERTOS/tasks.c **** 			{
 752:../Dave/Generated/FREERTOS/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 753:../Dave/Generated/FREERTOS/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 754:../Dave/Generated/FREERTOS/tasks.c **** 				be deleted later if required. */
 755:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 756:../Dave/Generated/FREERTOS/tasks.c **** 
 757:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 758:../Dave/Generated/FREERTOS/tasks.c **** 				{
 759:../Dave/Generated/FREERTOS/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 760:../Dave/Generated/FREERTOS/tasks.c **** 					vPortFree( pxNewTCB );
 761:../Dave/Generated/FREERTOS/tasks.c **** 					pxNewTCB = NULL;
 762:../Dave/Generated/FREERTOS/tasks.c **** 				}
 763:../Dave/Generated/FREERTOS/tasks.c **** 			}
 764:../Dave/Generated/FREERTOS/tasks.c **** 		}
 765:../Dave/Generated/FREERTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 766:../Dave/Generated/FREERTOS/tasks.c **** 		{
 767:../Dave/Generated/FREERTOS/tasks.c **** 		StackType_t *pxStack;
 768:../Dave/Generated/FREERTOS/tasks.c **** 
 769:../Dave/Generated/FREERTOS/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 770:../Dave/Generated/FREERTOS/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 176              	 .loc 1 770 0
 177 0010 FB88     	 ldrh r3,[r7,#6]
 178 0012 9B00     	 lsls r3,r3,#2
 179 0014 1846     	 mov r0,r3
 180 0016 FFF7FEFF 	 bl pvPortMalloc
 181 001a 7861     	 str r0,[r7,#20]
 771:../Dave/Generated/FREERTOS/tasks.c **** 
 772:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxStack != NULL )
 182              	 .loc 1 772 0
 183 001c 7B69     	 ldr r3,[r7,#20]
 184 001e 002B     	 cmp r3,#0
 185 0020 0ED0     	 beq .L2
 773:../Dave/Generated/FREERTOS/tasks.c **** 			{
 774:../Dave/Generated/FREERTOS/tasks.c **** 				/* Allocate space for the TCB. */
 775:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 186              	 .loc 1 775 0
 187 0022 7020     	 movs r0,#112
 188 0024 FFF7FEFF 	 bl pvPortMalloc
 189 0028 F861     	 str r0,[r7,#28]
 776:../Dave/Generated/FREERTOS/tasks.c **** 
 777:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxNewTCB != NULL )
 190              	 .loc 1 777 0
 191 002a FB69     	 ldr r3,[r7,#28]
 192 002c 002B     	 cmp r3,#0
 193 002e 03D0     	 beq .L3
 778:../Dave/Generated/FREERTOS/tasks.c **** 				{
 779:../Dave/Generated/FREERTOS/tasks.c **** 					/* Store the stack location in the TCB. */
 780:../Dave/Generated/FREERTOS/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 194              	 .loc 1 780 0
 195 0030 FB69     	 ldr r3,[r7,#28]
 196 0032 7A69     	 ldr r2,[r7,#20]
 197 0034 1A63     	 str r2,[r3,#48]
 198 0036 05E0     	 b .L5
 199              	.L3:
 781:../Dave/Generated/FREERTOS/tasks.c **** 				}
 782:../Dave/Generated/FREERTOS/tasks.c **** 				else
 783:../Dave/Generated/FREERTOS/tasks.c **** 				{
 784:../Dave/Generated/FREERTOS/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 785:../Dave/Generated/FREERTOS/tasks.c **** 					it again. */
 786:../Dave/Generated/FREERTOS/tasks.c **** 					vPortFree( pxStack );
 200              	 .loc 1 786 0
 201 0038 7869     	 ldr r0,[r7,#20]
 202 003a FFF7FEFF 	 bl vPortFree
 203 003e 01E0     	 b .L5
 204              	.L2:
 787:../Dave/Generated/FREERTOS/tasks.c **** 				}
 788:../Dave/Generated/FREERTOS/tasks.c **** 			}
 789:../Dave/Generated/FREERTOS/tasks.c **** 			else
 790:../Dave/Generated/FREERTOS/tasks.c **** 			{
 791:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB = NULL;
 205              	 .loc 1 791 0
 206 0040 0023     	 movs r3,#0
 207 0042 FB61     	 str r3,[r7,#28]
 208              	.L5:
 209              	.LBE115:
 792:../Dave/Generated/FREERTOS/tasks.c **** 			}
 793:../Dave/Generated/FREERTOS/tasks.c **** 		}
 794:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 795:../Dave/Generated/FREERTOS/tasks.c **** 
 796:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxNewTCB != NULL )
 210              	 .loc 1 796 0
 211 0044 FB69     	 ldr r3,[r7,#28]
 212 0046 002B     	 cmp r3,#0
 213 0048 13D0     	 beq .L6
 797:../Dave/Generated/FREERTOS/tasks.c **** 		{
 798:../Dave/Generated/FREERTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 799:../Dave/Generated/FREERTOS/tasks.c **** 			{
 800:../Dave/Generated/FREERTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 801:../Dave/Generated/FREERTOS/tasks.c **** 				task was created dynamically in case it is later deleted. */
 802:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 803:../Dave/Generated/FREERTOS/tasks.c **** 			}
 804:../Dave/Generated/FREERTOS/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 805:../Dave/Generated/FREERTOS/tasks.c **** 
 806:../Dave/Generated/FREERTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 214              	 .loc 1 806 0
 215 004a FA88     	 ldrh r2,[r7,#6]
 216 004c BB6A     	 ldr r3,[r7,#40]
 217 004e 0093     	 str r3,[sp]
 218 0050 FB6A     	 ldr r3,[r7,#44]
 219 0052 0193     	 str r3,[sp,#4]
 220 0054 FB69     	 ldr r3,[r7,#28]
 221 0056 0293     	 str r3,[sp,#8]
 222 0058 0023     	 movs r3,#0
 223 005a 0393     	 str r3,[sp,#12]
 224 005c F868     	 ldr r0,[r7,#12]
 225 005e B968     	 ldr r1,[r7,#8]
 226 0060 3B68     	 ldr r3,[r7]
 227 0062 FFF7FEFF 	 bl prvInitialiseNewTask
 807:../Dave/Generated/FREERTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 228              	 .loc 1 807 0
 229 0066 F869     	 ldr r0,[r7,#28]
 230 0068 FFF7FEFF 	 bl prvAddNewTaskToReadyList
 808:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdPASS;
 231              	 .loc 1 808 0
 232 006c 0123     	 movs r3,#1
 233 006e BB61     	 str r3,[r7,#24]
 234 0070 02E0     	 b .L7
 235              	.L6:
 809:../Dave/Generated/FREERTOS/tasks.c **** 		}
 810:../Dave/Generated/FREERTOS/tasks.c **** 		else
 811:../Dave/Generated/FREERTOS/tasks.c **** 		{
 812:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 236              	 .loc 1 812 0
 237 0072 4FF0FF33 	 mov r3,#-1
 238 0076 BB61     	 str r3,[r7,#24]
 239              	.L7:
 813:../Dave/Generated/FREERTOS/tasks.c **** 		}
 814:../Dave/Generated/FREERTOS/tasks.c **** 
 815:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 240              	 .loc 1 815 0
 241 0078 BB69     	 ldr r3,[r7,#24]
 816:../Dave/Generated/FREERTOS/tasks.c **** 	}
 242              	 .loc 1 816 0
 243 007a 1846     	 mov r0,r3
 244 007c 2037     	 adds r7,r7,#32
 245              	.LCFI3:
 246              	 .cfi_def_cfa_offset 8
 247 007e BD46     	 mov sp,r7
 248              	.LCFI4:
 249              	 .cfi_def_cfa_register 13
 250              	 
 251 0080 80BD     	 pop {r7,pc}
 252              	 .cfi_endproc
 253              	.LFE137:
 255 0082 00BF     	 .section .text.prvInitialiseNewTask,"ax",%progbits
 256              	 .align 2
 257              	 .thumb
 258              	 .thumb_func
 260              	prvInitialiseNewTask:
 261              	.LFB138:
 817:../Dave/Generated/FREERTOS/tasks.c **** 
 818:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 819:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 820:../Dave/Generated/FREERTOS/tasks.c **** 
 821:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 822:../Dave/Generated/FREERTOS/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 823:../Dave/Generated/FREERTOS/tasks.c **** 									const uint32_t ulStackDepth,
 824:../Dave/Generated/FREERTOS/tasks.c **** 									void * const pvParameters,
 825:../Dave/Generated/FREERTOS/tasks.c **** 									UBaseType_t uxPriority,
 826:../Dave/Generated/FREERTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 827:../Dave/Generated/FREERTOS/tasks.c **** 									TCB_t *pxNewTCB,
 828:../Dave/Generated/FREERTOS/tasks.c **** 									const MemoryRegion_t * const xRegions )
 829:../Dave/Generated/FREERTOS/tasks.c **** {
 262              	 .loc 1 829 0
 263              	 .cfi_startproc
 264              	 
 265              	 
 266 0000 80B5     	 push {r7,lr}
 267              	.LCFI5:
 268              	 .cfi_def_cfa_offset 8
 269              	 .cfi_offset 7,-8
 270              	 .cfi_offset 14,-4
 271 0002 88B0     	 sub sp,sp,#32
 272              	.LCFI6:
 273              	 .cfi_def_cfa_offset 40
 274 0004 00AF     	 add r7,sp,#0
 275              	.LCFI7:
 276              	 .cfi_def_cfa_register 7
 277 0006 F860     	 str r0,[r7,#12]
 278 0008 B960     	 str r1,[r7,#8]
 279 000a 7A60     	 str r2,[r7,#4]
 280 000c 3B60     	 str r3,[r7]
 830:../Dave/Generated/FREERTOS/tasks.c **** StackType_t *pxTopOfStack;
 831:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t x;
 832:../Dave/Generated/FREERTOS/tasks.c **** 
 833:../Dave/Generated/FREERTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 834:../Dave/Generated/FREERTOS/tasks.c **** 		/* Should the task be created in privileged mode? */
 835:../Dave/Generated/FREERTOS/tasks.c **** 		BaseType_t xRunPrivileged;
 836:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 837:../Dave/Generated/FREERTOS/tasks.c **** 		{
 838:../Dave/Generated/FREERTOS/tasks.c **** 			xRunPrivileged = pdTRUE;
 839:../Dave/Generated/FREERTOS/tasks.c **** 		}
 840:../Dave/Generated/FREERTOS/tasks.c **** 		else
 841:../Dave/Generated/FREERTOS/tasks.c **** 		{
 842:../Dave/Generated/FREERTOS/tasks.c **** 			xRunPrivileged = pdFALSE;
 843:../Dave/Generated/FREERTOS/tasks.c **** 		}
 844:../Dave/Generated/FREERTOS/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 845:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 846:../Dave/Generated/FREERTOS/tasks.c **** 
 847:../Dave/Generated/FREERTOS/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 848:../Dave/Generated/FREERTOS/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 849:../Dave/Generated/FREERTOS/tasks.c **** 	{
 850:../Dave/Generated/FREERTOS/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 851:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 281              	 .loc 1 851 0
 282 000e 3B6B     	 ldr r3,[r7,#48]
 283 0010 1A6B     	 ldr r2,[r3,#48]
 284 0012 7B68     	 ldr r3,[r7,#4]
 285 0014 9B00     	 lsls r3,r3,#2
 286 0016 1046     	 mov r0,r2
 287 0018 A521     	 movs r1,#165
 288 001a 1A46     	 mov r2,r3
 289 001c FFF7FEFF 	 bl memset
 852:../Dave/Generated/FREERTOS/tasks.c **** 	}
 853:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 854:../Dave/Generated/FREERTOS/tasks.c **** 
 855:../Dave/Generated/FREERTOS/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 856:../Dave/Generated/FREERTOS/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 857:../Dave/Generated/FREERTOS/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 858:../Dave/Generated/FREERTOS/tasks.c **** 	by the port. */
 859:../Dave/Generated/FREERTOS/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 860:../Dave/Generated/FREERTOS/tasks.c **** 	{
 861:../Dave/Generated/FREERTOS/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 290              	 .loc 1 861 0
 291 0020 3B6B     	 ldr r3,[r7,#48]
 292 0022 1A6B     	 ldr r2,[r3,#48]
 293 0024 7B68     	 ldr r3,[r7,#4]
 294 0026 03F18043 	 add r3,r3,#1073741824
 295 002a 013B     	 subs r3,r3,#1
 296 002c 9B00     	 lsls r3,r3,#2
 297 002e 1344     	 add r3,r3,r2
 298 0030 BB61     	 str r3,[r7,#24]
 862:../Dave/Generated/FREERTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 299              	 .loc 1 862 0
 300 0032 BB69     	 ldr r3,[r7,#24]
 301 0034 23F00703 	 bic r3,r3,#7
 302 0038 BB61     	 str r3,[r7,#24]
 863:../Dave/Generated/FREERTOS/tasks.c **** 
 864:../Dave/Generated/FREERTOS/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 865:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 303              	 .loc 1 865 0
 304 003a BB69     	 ldr r3,[r7,#24]
 305 003c 03F00703 	 and r3,r3,#7
 306 0040 002B     	 cmp r3,#0
 307 0042 09D0     	 beq .L10
 308              	.LBB116:
 309              	.LBB117:
 310              	 .file 2 "../Dave/Generated/FREERTOS/portable/GCC/portmacro.h"
   1:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*
   2:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
   5:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  12:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  15:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  22:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * http://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * http://aws.amazon.com/freertos
  24:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  25:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * 1 tab == 4 spaces!
  26:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  */
  27:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  28:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  29:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef PORTMACRO_H
  30:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define PORTMACRO_H
  31:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  32:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifdef __cplusplus
  33:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** extern "C" {
  34:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
  35:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  36:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------
  37:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * Port specific definitions.
  38:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  39:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * given hardware and compiler.
  41:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  42:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * These settings should not be altered.
  43:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *-----------------------------------------------------------
  44:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  */
  45:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  46:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Type definitions. */
  47:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portCHAR		char
  48:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portFLOAT		float
  49:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portDOUBLE		double
  50:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portLONG		long
  51:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSHORT		short
  52:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portBASE_TYPE	long
  54:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  55:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** typedef long BaseType_t;
  57:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** typedef unsigned long UBaseType_t;
  58:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  59:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	typedef uint16_t TickType_t;
  61:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #else
  63:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	typedef uint32_t TickType_t;
  64:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  66:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	not need to be guarded with a critical section. */
  68:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
  70:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
  71:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  72:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Architecture specifics. */
  73:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
  77:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  78:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Scheduler utilities. */
  79:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portYIELD() 															\
  80:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {																				\
  81:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 																				\
  84:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile( "isb" );													\
  88:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
  89:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  90:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
  95:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  96:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Critical section management. */
  97:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** extern void vPortEnterCritical( void );
  98:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** extern void vPortExitCritical( void );
  99:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 106:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 107:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 108:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** (which build with all the ports) will build. */
 111:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 114:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 115:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Tickless idle/low power functionality. */
 116:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 120:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 121:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 122:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Architecture specific optimisations. */
 123:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 126:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 127:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 129:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Generic helper function. */
 130:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	{
 132:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	uint8_t ucReturn;
 133:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 134:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		return ucReturn;
 136:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 137:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 138:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Check the configuration. */
 139:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#endif
 142:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 143:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 147:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 149:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 151:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 153:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 154:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 155:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifdef configASSERT
 156:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 159:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 160:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* portNOP() is not required by this port. */
 161:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portNOP()
 162:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 163:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portINLINE	__inline
 164:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 165:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef portFORCE_INLINE
 166:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 168:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 169:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {
 171:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** BaseType_t xReturn;
 173:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 174:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 177:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	{
 179:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		xReturn = pdFALSE;
 180:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 181:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	else
 182:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	{
 183:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		xReturn = pdTRUE;
 184:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 185:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 186:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	return xReturn;
 187:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 188:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 189:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 190:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 191:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {
 193:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** uint32_t ulNewBASEPRI;
 194:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile
 311              	 .loc 2 195 0 discriminator 1
 312              	
 313 0044 4FF0FC03 	 mov r3,#252
 314 0048 83F31188 	 msr basepri,r3
 315 004c BFF36F8F 	 isb 
 316 0050 BFF34F8F 	 dsb 
 317              	
 318              	
 319              	 .thumb
 320 0054 7B61     	 str r3,[r7,#20]
 321              	.L11:
 322              	.LBE117:
 323              	.LBE116:
 324              	 .loc 1 865 0 discriminator 1
 325 0056 FEE7     	 b .L11
 326              	.L10:
 866:../Dave/Generated/FREERTOS/tasks.c **** 
 867:../Dave/Generated/FREERTOS/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 868:../Dave/Generated/FREERTOS/tasks.c **** 		{
 869:../Dave/Generated/FREERTOS/tasks.c **** 			/* Also record the stack's high address, which may assist
 870:../Dave/Generated/FREERTOS/tasks.c **** 			debugging. */
 871:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 872:../Dave/Generated/FREERTOS/tasks.c **** 		}
 873:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 874:../Dave/Generated/FREERTOS/tasks.c **** 	}
 875:../Dave/Generated/FREERTOS/tasks.c **** 	#else /* portSTACK_GROWTH */
 876:../Dave/Generated/FREERTOS/tasks.c **** 	{
 877:../Dave/Generated/FREERTOS/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 878:../Dave/Generated/FREERTOS/tasks.c **** 
 879:../Dave/Generated/FREERTOS/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 880:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 881:../Dave/Generated/FREERTOS/tasks.c **** 
 882:../Dave/Generated/FREERTOS/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 883:../Dave/Generated/FREERTOS/tasks.c **** 		performed. */
 884:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 885:../Dave/Generated/FREERTOS/tasks.c **** 	}
 886:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* portSTACK_GROWTH */
 887:../Dave/Generated/FREERTOS/tasks.c **** 
 888:../Dave/Generated/FREERTOS/tasks.c **** 	/* Store the task name in the TCB. */
 889:../Dave/Generated/FREERTOS/tasks.c **** 	if( pcName != NULL )
 327              	 .loc 1 889 0
 328 0058 BB68     	 ldr r3,[r7,#8]
 329 005a 002B     	 cmp r3,#0
 330 005c 1ED0     	 beq .L12
 890:../Dave/Generated/FREERTOS/tasks.c **** 	{
 891:../Dave/Generated/FREERTOS/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 331              	 .loc 1 891 0
 332 005e 0023     	 movs r3,#0
 333 0060 FB61     	 str r3,[r7,#28]
 334 0062 13E0     	 b .L13
 335              	.L16:
 892:../Dave/Generated/FREERTOS/tasks.c **** 		{
 893:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 336              	 .loc 1 893 0
 337 0064 BA68     	 ldr r2,[r7,#8]
 338 0066 FB69     	 ldr r3,[r7,#28]
 339 0068 1344     	 add r3,r3,r2
 340 006a 1978     	 ldrb r1,[r3]
 341 006c 3A6B     	 ldr r2,[r7,#48]
 342 006e FB69     	 ldr r3,[r7,#28]
 343 0070 1344     	 add r3,r3,r2
 344 0072 3033     	 adds r3,r3,#48
 345 0074 0A46     	 mov r2,r1
 346 0076 1A71     	 strb r2,[r3,#4]
 894:../Dave/Generated/FREERTOS/tasks.c **** 
 895:../Dave/Generated/FREERTOS/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:../Dave/Generated/FREERTOS/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:../Dave/Generated/FREERTOS/tasks.c **** 			string is not accessible (extremely unlikely). */
 898:../Dave/Generated/FREERTOS/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 347              	 .loc 1 898 0
 348 0078 BA68     	 ldr r2,[r7,#8]
 349 007a FB69     	 ldr r3,[r7,#28]
 350 007c 1344     	 add r3,r3,r2
 351 007e 1B78     	 ldrb r3,[r3]
 352 0080 002B     	 cmp r3,#0
 353 0082 00D1     	 bne .L14
 899:../Dave/Generated/FREERTOS/tasks.c **** 			{
 900:../Dave/Generated/FREERTOS/tasks.c **** 				break;
 354              	 .loc 1 900 0
 355 0084 05E0     	 b .L15
 356              	.L14:
 891:../Dave/Generated/FREERTOS/tasks.c **** 		{
 357              	 .loc 1 891 0 discriminator 2
 358 0086 FB69     	 ldr r3,[r7,#28]
 359 0088 0133     	 adds r3,r3,#1
 360 008a FB61     	 str r3,[r7,#28]
 361              	.L13:
 891:../Dave/Generated/FREERTOS/tasks.c **** 		{
 362              	 .loc 1 891 0 is_stmt 0 discriminator 1
 363 008c FB69     	 ldr r3,[r7,#28]
 364 008e 0F2B     	 cmp r3,#15
 365 0090 E8D9     	 bls .L16
 366              	.L15:
 901:../Dave/Generated/FREERTOS/tasks.c **** 			}
 902:../Dave/Generated/FREERTOS/tasks.c **** 			else
 903:../Dave/Generated/FREERTOS/tasks.c **** 			{
 904:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 905:../Dave/Generated/FREERTOS/tasks.c **** 			}
 906:../Dave/Generated/FREERTOS/tasks.c **** 		}
 907:../Dave/Generated/FREERTOS/tasks.c **** 
 908:../Dave/Generated/FREERTOS/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 909:../Dave/Generated/FREERTOS/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 910:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 367              	 .loc 1 910 0 is_stmt 1
 368 0092 3B6B     	 ldr r3,[r7,#48]
 369 0094 0022     	 movs r2,#0
 370 0096 83F84320 	 strb r2,[r3,#67]
 371 009a 03E0     	 b .L17
 372              	.L12:
 911:../Dave/Generated/FREERTOS/tasks.c **** 	}
 912:../Dave/Generated/FREERTOS/tasks.c **** 	else
 913:../Dave/Generated/FREERTOS/tasks.c **** 	{
 914:../Dave/Generated/FREERTOS/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 915:../Dave/Generated/FREERTOS/tasks.c **** 		terminator when it is read out. */
 916:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 373              	 .loc 1 916 0
 374 009c 3B6B     	 ldr r3,[r7,#48]
 375 009e 0022     	 movs r2,#0
 376 00a0 83F83420 	 strb r2,[r3,#52]
 377              	.L17:
 917:../Dave/Generated/FREERTOS/tasks.c **** 	}
 918:../Dave/Generated/FREERTOS/tasks.c **** 
 919:../Dave/Generated/FREERTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 920:../Dave/Generated/FREERTOS/tasks.c **** 	remove the privilege bit if one is present. */
 921:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 378              	 .loc 1 921 0
 379 00a4 BB6A     	 ldr r3,[r7,#40]
 380 00a6 052B     	 cmp r3,#5
 381 00a8 01D9     	 bls .L18
 922:../Dave/Generated/FREERTOS/tasks.c **** 	{
 923:../Dave/Generated/FREERTOS/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 382              	 .loc 1 923 0
 383 00aa 0523     	 movs r3,#5
 384 00ac BB62     	 str r3,[r7,#40]
 385              	.L18:
 924:../Dave/Generated/FREERTOS/tasks.c **** 	}
 925:../Dave/Generated/FREERTOS/tasks.c **** 	else
 926:../Dave/Generated/FREERTOS/tasks.c **** 	{
 927:../Dave/Generated/FREERTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 928:../Dave/Generated/FREERTOS/tasks.c **** 	}
 929:../Dave/Generated/FREERTOS/tasks.c **** 
 930:../Dave/Generated/FREERTOS/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 386              	 .loc 1 930 0
 387 00ae 3B6B     	 ldr r3,[r7,#48]
 388 00b0 BA6A     	 ldr r2,[r7,#40]
 389 00b2 DA62     	 str r2,[r3,#44]
 931:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 932:../Dave/Generated/FREERTOS/tasks.c **** 	{
 933:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 390              	 .loc 1 933 0
 391 00b4 3B6B     	 ldr r3,[r7,#48]
 392 00b6 BA6A     	 ldr r2,[r7,#40]
 393 00b8 DA64     	 str r2,[r3,#76]
 934:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 394              	 .loc 1 934 0
 395 00ba 3B6B     	 ldr r3,[r7,#48]
 396 00bc 0022     	 movs r2,#0
 397 00be 1A65     	 str r2,[r3,#80]
 935:../Dave/Generated/FREERTOS/tasks.c **** 	}
 936:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
 937:../Dave/Generated/FREERTOS/tasks.c **** 
 938:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 398              	 .loc 1 938 0
 399 00c0 3B6B     	 ldr r3,[r7,#48]
 400 00c2 0433     	 adds r3,r3,#4
 401 00c4 1846     	 mov r0,r3
 402 00c6 FFF7FEFF 	 bl vListInitialiseItem
 939:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 403              	 .loc 1 939 0
 404 00ca 3B6B     	 ldr r3,[r7,#48]
 405 00cc 1833     	 adds r3,r3,#24
 406 00ce 1846     	 mov r0,r3
 407 00d0 FFF7FEFF 	 bl vListInitialiseItem
 940:../Dave/Generated/FREERTOS/tasks.c **** 
 941:../Dave/Generated/FREERTOS/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 942:../Dave/Generated/FREERTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 943:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 408              	 .loc 1 943 0
 409 00d4 3B6B     	 ldr r3,[r7,#48]
 410 00d6 3A6B     	 ldr r2,[r7,#48]
 411 00d8 1A61     	 str r2,[r3,#16]
 944:../Dave/Generated/FREERTOS/tasks.c **** 
 945:../Dave/Generated/FREERTOS/tasks.c **** 	/* Event lists are always in priority order. */
 946:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 412              	 .loc 1 946 0
 413 00da BB6A     	 ldr r3,[r7,#40]
 414 00dc C3F10602 	 rsb r2,r3,#6
 415 00e0 3B6B     	 ldr r3,[r7,#48]
 416 00e2 9A61     	 str r2,[r3,#24]
 947:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 417              	 .loc 1 947 0
 418 00e4 3B6B     	 ldr r3,[r7,#48]
 419 00e6 3A6B     	 ldr r2,[r7,#48]
 420 00e8 5A62     	 str r2,[r3,#36]
 948:../Dave/Generated/FREERTOS/tasks.c **** 
 949:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:../Dave/Generated/FREERTOS/tasks.c **** 	{
 951:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:../Dave/Generated/FREERTOS/tasks.c **** 	}
 953:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 954:../Dave/Generated/FREERTOS/tasks.c **** 
 955:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:../Dave/Generated/FREERTOS/tasks.c **** 	{
 957:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 958:../Dave/Generated/FREERTOS/tasks.c **** 	}
 959:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 960:../Dave/Generated/FREERTOS/tasks.c **** 
 961:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:../Dave/Generated/FREERTOS/tasks.c **** 	{
 963:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 964:../Dave/Generated/FREERTOS/tasks.c **** 	}
 965:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 966:../Dave/Generated/FREERTOS/tasks.c **** 
 967:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 968:../Dave/Generated/FREERTOS/tasks.c **** 	{
 969:../Dave/Generated/FREERTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 970:../Dave/Generated/FREERTOS/tasks.c **** 	}
 971:../Dave/Generated/FREERTOS/tasks.c **** 	#else
 972:../Dave/Generated/FREERTOS/tasks.c **** 	{
 973:../Dave/Generated/FREERTOS/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 974:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xRegions;
 975:../Dave/Generated/FREERTOS/tasks.c **** 	}
 976:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 977:../Dave/Generated/FREERTOS/tasks.c **** 
 978:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:../Dave/Generated/FREERTOS/tasks.c **** 	{
 980:../Dave/Generated/FREERTOS/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 421              	 .loc 1 980 0
 422 00ea 0023     	 movs r3,#0
 423 00ec FB61     	 str r3,[r7,#28]
 424 00ee 09E0     	 b .L19
 425              	.L20:
 981:../Dave/Generated/FREERTOS/tasks.c **** 		{
 982:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 426              	 .loc 1 982 0 discriminator 3
 427 00f0 3A6B     	 ldr r2,[r7,#48]
 428 00f2 FB69     	 ldr r3,[r7,#28]
 429 00f4 1433     	 adds r3,r3,#20
 430 00f6 9B00     	 lsls r3,r3,#2
 431 00f8 1344     	 add r3,r3,r2
 432 00fa 0022     	 movs r2,#0
 433 00fc 5A60     	 str r2,[r3,#4]
 980:../Dave/Generated/FREERTOS/tasks.c **** 		{
 434              	 .loc 1 980 0 discriminator 3
 435 00fe FB69     	 ldr r3,[r7,#28]
 436 0100 0133     	 adds r3,r3,#1
 437 0102 FB61     	 str r3,[r7,#28]
 438              	.L19:
 980:../Dave/Generated/FREERTOS/tasks.c **** 		{
 439              	 .loc 1 980 0 is_stmt 0 discriminator 1
 440 0104 FB69     	 ldr r3,[r7,#28]
 441 0106 042B     	 cmp r3,#4
 442 0108 F2D9     	 bls .L20
 983:../Dave/Generated/FREERTOS/tasks.c **** 		}
 984:../Dave/Generated/FREERTOS/tasks.c **** 	}
 985:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 986:../Dave/Generated/FREERTOS/tasks.c **** 
 987:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 988:../Dave/Generated/FREERTOS/tasks.c **** 	{
 989:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 443              	 .loc 1 989 0 is_stmt 1
 444 010a 3B6B     	 ldr r3,[r7,#48]
 445 010c 0022     	 movs r2,#0
 446 010e 9A66     	 str r2,[r3,#104]
 990:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 447              	 .loc 1 990 0
 448 0110 3B6B     	 ldr r3,[r7,#48]
 449 0112 0022     	 movs r2,#0
 450 0114 83F86C20 	 strb r2,[r3,#108]
 991:../Dave/Generated/FREERTOS/tasks.c **** 	}
 992:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 993:../Dave/Generated/FREERTOS/tasks.c **** 
 994:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 995:../Dave/Generated/FREERTOS/tasks.c **** 	{
 996:../Dave/Generated/FREERTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 997:../Dave/Generated/FREERTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 998:../Dave/Generated/FREERTOS/tasks.c **** 	}
 999:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
1000:../Dave/Generated/FREERTOS/tasks.c **** 
1001:../Dave/Generated/FREERTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1002:../Dave/Generated/FREERTOS/tasks.c **** 	{
1003:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 451              	 .loc 1 1003 0
 452 0118 3B6B     	 ldr r3,[r7,#48]
 453 011a 0022     	 movs r2,#0
 454 011c 83F86D20 	 strb r2,[r3,#109]
1004:../Dave/Generated/FREERTOS/tasks.c **** 	}
1005:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
1006:../Dave/Generated/FREERTOS/tasks.c **** 
1007:../Dave/Generated/FREERTOS/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1008:../Dave/Generated/FREERTOS/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1009:../Dave/Generated/FREERTOS/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1010:../Dave/Generated/FREERTOS/tasks.c **** 	the top of stack variable is updated. */
1011:../Dave/Generated/FREERTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1012:../Dave/Generated/FREERTOS/tasks.c **** 	{
1013:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the port has capability to detect stack overflow,
1014:../Dave/Generated/FREERTOS/tasks.c **** 		pass the stack end address to the stack initialization
1015:../Dave/Generated/FREERTOS/tasks.c **** 		function as well. */
1016:../Dave/Generated/FREERTOS/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1017:../Dave/Generated/FREERTOS/tasks.c **** 		{
1018:../Dave/Generated/FREERTOS/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1019:../Dave/Generated/FREERTOS/tasks.c **** 			{
1020:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1021:../Dave/Generated/FREERTOS/tasks.c **** 			}
1022:../Dave/Generated/FREERTOS/tasks.c **** 			#else /* portSTACK_GROWTH */
1023:../Dave/Generated/FREERTOS/tasks.c **** 			{
1024:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1025:../Dave/Generated/FREERTOS/tasks.c **** 			}
1026:../Dave/Generated/FREERTOS/tasks.c **** 			#endif /* portSTACK_GROWTH */
1027:../Dave/Generated/FREERTOS/tasks.c **** 		}
1028:../Dave/Generated/FREERTOS/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1029:../Dave/Generated/FREERTOS/tasks.c **** 		{
1030:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1031:../Dave/Generated/FREERTOS/tasks.c **** 		}
1032:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1033:../Dave/Generated/FREERTOS/tasks.c **** 	}
1034:../Dave/Generated/FREERTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1035:../Dave/Generated/FREERTOS/tasks.c **** 	{
1036:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the port has capability to detect stack overflow,
1037:../Dave/Generated/FREERTOS/tasks.c **** 		pass the stack end address to the stack initialization
1038:../Dave/Generated/FREERTOS/tasks.c **** 		function as well. */
1039:../Dave/Generated/FREERTOS/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1040:../Dave/Generated/FREERTOS/tasks.c **** 		{
1041:../Dave/Generated/FREERTOS/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1042:../Dave/Generated/FREERTOS/tasks.c **** 			{
1043:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1044:../Dave/Generated/FREERTOS/tasks.c **** 			}
1045:../Dave/Generated/FREERTOS/tasks.c **** 			#else /* portSTACK_GROWTH */
1046:../Dave/Generated/FREERTOS/tasks.c **** 			{
1047:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1048:../Dave/Generated/FREERTOS/tasks.c **** 			}
1049:../Dave/Generated/FREERTOS/tasks.c **** 			#endif /* portSTACK_GROWTH */
1050:../Dave/Generated/FREERTOS/tasks.c **** 		}
1051:../Dave/Generated/FREERTOS/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1052:../Dave/Generated/FREERTOS/tasks.c **** 		{
1053:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 455              	 .loc 1 1053 0
 456 0120 B869     	 ldr r0,[r7,#24]
 457 0122 F968     	 ldr r1,[r7,#12]
 458 0124 3A68     	 ldr r2,[r7]
 459 0126 FFF7FEFF 	 bl pxPortInitialiseStack
 460 012a 0246     	 mov r2,r0
 461 012c 3B6B     	 ldr r3,[r7,#48]
 462 012e 1A60     	 str r2,[r3]
1054:../Dave/Generated/FREERTOS/tasks.c **** 		}
1055:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1056:../Dave/Generated/FREERTOS/tasks.c **** 	}
1057:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1058:../Dave/Generated/FREERTOS/tasks.c **** 
1059:../Dave/Generated/FREERTOS/tasks.c **** 	if( pxCreatedTask != NULL )
 463              	 .loc 1 1059 0
 464 0130 FB6A     	 ldr r3,[r7,#44]
 465 0132 002B     	 cmp r3,#0
 466 0134 02D0     	 beq .L9
1060:../Dave/Generated/FREERTOS/tasks.c **** 	{
1061:../Dave/Generated/FREERTOS/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1062:../Dave/Generated/FREERTOS/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1063:../Dave/Generated/FREERTOS/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 467              	 .loc 1 1063 0
 468 0136 FB6A     	 ldr r3,[r7,#44]
 469 0138 3A6B     	 ldr r2,[r7,#48]
 470 013a 1A60     	 str r2,[r3]
 471              	.L9:
1064:../Dave/Generated/FREERTOS/tasks.c **** 	}
1065:../Dave/Generated/FREERTOS/tasks.c **** 	else
1066:../Dave/Generated/FREERTOS/tasks.c **** 	{
1067:../Dave/Generated/FREERTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1068:../Dave/Generated/FREERTOS/tasks.c **** 	}
1069:../Dave/Generated/FREERTOS/tasks.c **** }
 472              	 .loc 1 1069 0
 473 013c 2037     	 adds r7,r7,#32
 474              	.LCFI8:
 475              	 .cfi_def_cfa_offset 8
 476 013e BD46     	 mov sp,r7
 477              	.LCFI9:
 478              	 .cfi_def_cfa_register 13
 479              	 
 480 0140 80BD     	 pop {r7,pc}
 481              	 .cfi_endproc
 482              	.LFE138:
 484 0142 00BF     	 .section .text.prvAddNewTaskToReadyList,"ax",%progbits
 485              	 .align 2
 486              	 .thumb
 487              	 .thumb_func
 489              	prvAddNewTaskToReadyList:
 490              	.LFB139:
1070:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1071:../Dave/Generated/FREERTOS/tasks.c **** 
1072:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1073:../Dave/Generated/FREERTOS/tasks.c **** {
 491              	 .loc 1 1073 0
 492              	 .cfi_startproc
 493              	 
 494              	 
 495 0000 80B5     	 push {r7,lr}
 496              	.LCFI10:
 497              	 .cfi_def_cfa_offset 8
 498              	 .cfi_offset 7,-8
 499              	 .cfi_offset 14,-4
 500 0002 82B0     	 sub sp,sp,#8
 501              	.LCFI11:
 502              	 .cfi_def_cfa_offset 16
 503 0004 00AF     	 add r7,sp,#0
 504              	.LCFI12:
 505              	 .cfi_def_cfa_register 7
 506 0006 7860     	 str r0,[r7,#4]
1074:../Dave/Generated/FREERTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1075:../Dave/Generated/FREERTOS/tasks.c **** 	updated. */
1076:../Dave/Generated/FREERTOS/tasks.c **** 	taskENTER_CRITICAL();
 507              	 .loc 1 1076 0
 508 0008 FFF7FEFF 	 bl vPortEnterCritical
1077:../Dave/Generated/FREERTOS/tasks.c **** 	{
1078:../Dave/Generated/FREERTOS/tasks.c **** 		uxCurrentNumberOfTasks++;
 509              	 .loc 1 1078 0
 510 000c 2D4B     	 ldr r3,.L26
 511 000e 1B68     	 ldr r3,[r3]
 512 0010 0133     	 adds r3,r3,#1
 513 0012 2C4A     	 ldr r2,.L26
 514 0014 1360     	 str r3,[r2]
1079:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
 515              	 .loc 1 1079 0
 516 0016 2C4B     	 ldr r3,.L26+4
 517 0018 1B68     	 ldr r3,[r3]
 518 001a 002B     	 cmp r3,#0
 519 001c 09D1     	 bne .L23
1080:../Dave/Generated/FREERTOS/tasks.c **** 		{
1081:../Dave/Generated/FREERTOS/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1082:../Dave/Generated/FREERTOS/tasks.c **** 			the suspended state - make this the current task. */
1083:../Dave/Generated/FREERTOS/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 520              	 .loc 1 1083 0
 521 001e 2A4A     	 ldr r2,.L26+4
 522 0020 7B68     	 ldr r3,[r7,#4]
 523 0022 1360     	 str r3,[r2]
1084:../Dave/Generated/FREERTOS/tasks.c **** 
1085:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 524              	 .loc 1 1085 0
 525 0024 274B     	 ldr r3,.L26
 526 0026 1B68     	 ldr r3,[r3]
 527 0028 012B     	 cmp r3,#1
 528 002a 10D1     	 bne .L24
1086:../Dave/Generated/FREERTOS/tasks.c **** 			{
1087:../Dave/Generated/FREERTOS/tasks.c **** 				/* This is the first task to be created so do the preliminary
1088:../Dave/Generated/FREERTOS/tasks.c **** 				initialisation required.  We will not recover if this call
1089:../Dave/Generated/FREERTOS/tasks.c **** 				fails, but we will report the failure. */
1090:../Dave/Generated/FREERTOS/tasks.c **** 				prvInitialiseTaskLists();
 529              	 .loc 1 1090 0
 530 002c FFF7FEFF 	 bl prvInitialiseTaskLists
 531 0030 0DE0     	 b .L24
 532              	.L23:
1091:../Dave/Generated/FREERTOS/tasks.c **** 			}
1092:../Dave/Generated/FREERTOS/tasks.c **** 			else
1093:../Dave/Generated/FREERTOS/tasks.c **** 			{
1094:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1095:../Dave/Generated/FREERTOS/tasks.c **** 			}
1096:../Dave/Generated/FREERTOS/tasks.c **** 		}
1097:../Dave/Generated/FREERTOS/tasks.c **** 		else
1098:../Dave/Generated/FREERTOS/tasks.c **** 		{
1099:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the scheduler is not already running, make this task the
1100:../Dave/Generated/FREERTOS/tasks.c **** 			current task if it is the highest priority task to be created
1101:../Dave/Generated/FREERTOS/tasks.c **** 			so far. */
1102:../Dave/Generated/FREERTOS/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 533              	 .loc 1 1102 0
 534 0032 264B     	 ldr r3,.L26+8
 535 0034 1B68     	 ldr r3,[r3]
 536 0036 002B     	 cmp r3,#0
 537 0038 09D1     	 bne .L24
1103:../Dave/Generated/FREERTOS/tasks.c **** 			{
1104:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 538              	 .loc 1 1104 0
 539 003a 234B     	 ldr r3,.L26+4
 540 003c 1B68     	 ldr r3,[r3]
 541 003e DA6A     	 ldr r2,[r3,#44]
 542 0040 7B68     	 ldr r3,[r7,#4]
 543 0042 DB6A     	 ldr r3,[r3,#44]
 544 0044 9A42     	 cmp r2,r3
 545 0046 02D8     	 bhi .L24
1105:../Dave/Generated/FREERTOS/tasks.c **** 				{
1106:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 546              	 .loc 1 1106 0
 547 0048 1F4A     	 ldr r2,.L26+4
 548 004a 7B68     	 ldr r3,[r7,#4]
 549 004c 1360     	 str r3,[r2]
 550              	.L24:
1107:../Dave/Generated/FREERTOS/tasks.c **** 				}
1108:../Dave/Generated/FREERTOS/tasks.c **** 				else
1109:../Dave/Generated/FREERTOS/tasks.c **** 				{
1110:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1111:../Dave/Generated/FREERTOS/tasks.c **** 				}
1112:../Dave/Generated/FREERTOS/tasks.c **** 			}
1113:../Dave/Generated/FREERTOS/tasks.c **** 			else
1114:../Dave/Generated/FREERTOS/tasks.c **** 			{
1115:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1116:../Dave/Generated/FREERTOS/tasks.c **** 			}
1117:../Dave/Generated/FREERTOS/tasks.c **** 		}
1118:../Dave/Generated/FREERTOS/tasks.c **** 
1119:../Dave/Generated/FREERTOS/tasks.c **** 		uxTaskNumber++;
 551              	 .loc 1 1119 0
 552 004e 204B     	 ldr r3,.L26+12
 553 0050 1B68     	 ldr r3,[r3]
 554 0052 0133     	 adds r3,r3,#1
 555 0054 1E4A     	 ldr r2,.L26+12
 556 0056 1360     	 str r3,[r2]
1120:../Dave/Generated/FREERTOS/tasks.c **** 
1121:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1122:../Dave/Generated/FREERTOS/tasks.c **** 		{
1123:../Dave/Generated/FREERTOS/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1124:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 557              	 .loc 1 1124 0
 558 0058 1D4B     	 ldr r3,.L26+12
 559 005a 1A68     	 ldr r2,[r3]
 560 005c 7B68     	 ldr r3,[r7,#4]
 561 005e 5A64     	 str r2,[r3,#68]
1125:../Dave/Generated/FREERTOS/tasks.c **** 		}
1126:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1127:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1128:../Dave/Generated/FREERTOS/tasks.c **** 
1129:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 562              	 .loc 1 1129 0
 563 0060 7B68     	 ldr r3,[r7,#4]
 564 0062 DB6A     	 ldr r3,[r3,#44]
 565 0064 1A46     	 mov r2,r3
 566 0066 0123     	 movs r3,#1
 567 0068 03FA02F2 	 lsl r2,r3,r2
 568 006c 194B     	 ldr r3,.L26+16
 569 006e 1B68     	 ldr r3,[r3]
 570 0070 1343     	 orrs r3,r3,r2
 571 0072 184A     	 ldr r2,.L26+16
 572 0074 1360     	 str r3,[r2]
 573 0076 7B68     	 ldr r3,[r7,#4]
 574 0078 DA6A     	 ldr r2,[r3,#44]
 575 007a 1346     	 mov r3,r2
 576 007c 9B00     	 lsls r3,r3,#2
 577 007e 1344     	 add r3,r3,r2
 578 0080 9B00     	 lsls r3,r3,#2
 579 0082 154A     	 ldr r2,.L26+20
 580 0084 1A44     	 add r2,r2,r3
 581 0086 7B68     	 ldr r3,[r7,#4]
 582 0088 0433     	 adds r3,r3,#4
 583 008a 1046     	 mov r0,r2
 584 008c 1946     	 mov r1,r3
 585 008e FFF7FEFF 	 bl vListInsertEnd
1130:../Dave/Generated/FREERTOS/tasks.c **** 
1131:../Dave/Generated/FREERTOS/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1132:../Dave/Generated/FREERTOS/tasks.c **** 	}
1133:../Dave/Generated/FREERTOS/tasks.c **** 	taskEXIT_CRITICAL();
 586              	 .loc 1 1133 0
 587 0092 FFF7FEFF 	 bl vPortExitCritical
1134:../Dave/Generated/FREERTOS/tasks.c **** 
1135:../Dave/Generated/FREERTOS/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 588              	 .loc 1 1135 0
 589 0096 0D4B     	 ldr r3,.L26+8
 590 0098 1B68     	 ldr r3,[r3]
 591 009a 002B     	 cmp r3,#0
 592 009c 0ED0     	 beq .L22
1136:../Dave/Generated/FREERTOS/tasks.c **** 	{
1137:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the created task is of a higher priority than the current task
1138:../Dave/Generated/FREERTOS/tasks.c **** 		then it should run now. */
1139:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 593              	 .loc 1 1139 0
 594 009e 0A4B     	 ldr r3,.L26+4
 595 00a0 1B68     	 ldr r3,[r3]
 596 00a2 DA6A     	 ldr r2,[r3,#44]
 597 00a4 7B68     	 ldr r3,[r7,#4]
 598 00a6 DB6A     	 ldr r3,[r3,#44]
 599 00a8 9A42     	 cmp r2,r3
 600 00aa 07D2     	 bcs .L22
1140:../Dave/Generated/FREERTOS/tasks.c **** 		{
1141:../Dave/Generated/FREERTOS/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 601              	 .loc 1 1141 0
 602 00ac 0B4B     	 ldr r3,.L26+24
 603 00ae 4FF08052 	 mov r2,#268435456
 604 00b2 1A60     	 str r2,[r3]
 605              	
 606 00b4 BFF34F8F 	 dsb
 607              	
 608              	
 609 00b8 BFF36F8F 	 isb
 610              	
 611              	 .thumb
 612              	.L22:
1142:../Dave/Generated/FREERTOS/tasks.c **** 		}
1143:../Dave/Generated/FREERTOS/tasks.c **** 		else
1144:../Dave/Generated/FREERTOS/tasks.c **** 		{
1145:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1146:../Dave/Generated/FREERTOS/tasks.c **** 		}
1147:../Dave/Generated/FREERTOS/tasks.c **** 	}
1148:../Dave/Generated/FREERTOS/tasks.c **** 	else
1149:../Dave/Generated/FREERTOS/tasks.c **** 	{
1150:../Dave/Generated/FREERTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1151:../Dave/Generated/FREERTOS/tasks.c **** 	}
1152:../Dave/Generated/FREERTOS/tasks.c **** }
 613              	 .loc 1 1152 0
 614 00bc 0837     	 adds r7,r7,#8
 615              	.LCFI13:
 616              	 .cfi_def_cfa_offset 8
 617 00be BD46     	 mov sp,r7
 618              	.LCFI14:
 619              	 .cfi_def_cfa_register 13
 620              	 
 621 00c0 80BD     	 pop {r7,pc}
 622              	.L27:
 623 00c2 00BF     	 .align 2
 624              	.L26:
 625 00c4 00000000 	 .word uxCurrentNumberOfTasks
 626 00c8 00000000 	 .word pxCurrentTCB
 627 00cc 00000000 	 .word xSchedulerRunning
 628 00d0 00000000 	 .word uxTaskNumber
 629 00d4 00000000 	 .word uxTopReadyPriority
 630 00d8 00000000 	 .word pxReadyTasksLists
 631 00dc 04ED00E0 	 .word -536810236
 632              	 .cfi_endproc
 633              	.LFE139:
 635              	 .section .text.vTaskDelete,"ax",%progbits
 636              	 .align 2
 637              	 .global vTaskDelete
 638              	 .thumb
 639              	 .thumb_func
 641              	vTaskDelete:
 642              	.LFB140:
1153:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1154:../Dave/Generated/FREERTOS/tasks.c **** 
1155:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1156:../Dave/Generated/FREERTOS/tasks.c **** 
1157:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:../Dave/Generated/FREERTOS/tasks.c **** 	{
 643              	 .loc 1 1158 0
 644              	 .cfi_startproc
 645              	 
 646              	 
 647 0000 80B5     	 push {r7,lr}
 648              	.LCFI15:
 649              	 .cfi_def_cfa_offset 8
 650              	 .cfi_offset 7,-8
 651              	 .cfi_offset 14,-4
 652 0002 84B0     	 sub sp,sp,#16
 653              	.LCFI16:
 654              	 .cfi_def_cfa_offset 24
 655 0004 00AF     	 add r7,sp,#0
 656              	.LCFI17:
 657              	 .cfi_def_cfa_register 7
 658 0006 7860     	 str r0,[r7,#4]
1159:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1160:../Dave/Generated/FREERTOS/tasks.c **** 
1161:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 659              	 .loc 1 1161 0
 660 0008 FFF7FEFF 	 bl vPortEnterCritical
1162:../Dave/Generated/FREERTOS/tasks.c **** 		{
1163:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1164:../Dave/Generated/FREERTOS/tasks.c **** 			being deleted. */
1165:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 661              	 .loc 1 1165 0
 662 000c 7B68     	 ldr r3,[r7,#4]
 663 000e 002B     	 cmp r3,#0
 664 0010 02D1     	 bne .L29
 665              	 .loc 1 1165 0 is_stmt 0 discriminator 1
 666 0012 384B     	 ldr r3,.L39
 667 0014 1B68     	 ldr r3,[r3]
 668 0016 00E0     	 b .L30
 669              	.L29:
 670              	 .loc 1 1165 0 discriminator 2
 671 0018 7B68     	 ldr r3,[r7,#4]
 672              	.L30:
 673              	 .loc 1 1165 0 discriminator 4
 674 001a FB60     	 str r3,[r7,#12]
1166:../Dave/Generated/FREERTOS/tasks.c **** 
1167:../Dave/Generated/FREERTOS/tasks.c **** 			/* Remove task from the ready list. */
1168:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 675              	 .loc 1 1168 0 is_stmt 1 discriminator 4
 676 001c FB68     	 ldr r3,[r7,#12]
 677 001e 0433     	 adds r3,r3,#4
 678 0020 1846     	 mov r0,r3
 679 0022 FFF7FEFF 	 bl uxListRemove
 680 0026 0346     	 mov r3,r0
 681 0028 002B     	 cmp r3,#0
 682 002a 15D1     	 bne .L31
1169:../Dave/Generated/FREERTOS/tasks.c **** 			{
1170:../Dave/Generated/FREERTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 683              	 .loc 1 1170 0
 684 002c FB68     	 ldr r3,[r7,#12]
 685 002e DA6A     	 ldr r2,[r3,#44]
 686 0030 3149     	 ldr r1,.L39+4
 687 0032 1346     	 mov r3,r2
 688 0034 9B00     	 lsls r3,r3,#2
 689 0036 1344     	 add r3,r3,r2
 690 0038 9B00     	 lsls r3,r3,#2
 691 003a 0B44     	 add r3,r3,r1
 692 003c 1B68     	 ldr r3,[r3]
 693 003e 002B     	 cmp r3,#0
 694 0040 0AD1     	 bne .L31
 695              	 .loc 1 1170 0 is_stmt 0 discriminator 1
 696 0042 FB68     	 ldr r3,[r7,#12]
 697 0044 DB6A     	 ldr r3,[r3,#44]
 698 0046 1A46     	 mov r2,r3
 699 0048 0123     	 movs r3,#1
 700 004a 9340     	 lsls r3,r3,r2
 701 004c DA43     	 mvns r2,r3
 702 004e 2B4B     	 ldr r3,.L39+8
 703 0050 1B68     	 ldr r3,[r3]
 704 0052 1340     	 ands r3,r3,r2
 705 0054 294A     	 ldr r2,.L39+8
 706 0056 1360     	 str r3,[r2]
 707              	.L31:
1171:../Dave/Generated/FREERTOS/tasks.c **** 			}
1172:../Dave/Generated/FREERTOS/tasks.c **** 			else
1173:../Dave/Generated/FREERTOS/tasks.c **** 			{
1174:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1175:../Dave/Generated/FREERTOS/tasks.c **** 			}
1176:../Dave/Generated/FREERTOS/tasks.c **** 
1177:../Dave/Generated/FREERTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1178:../Dave/Generated/FREERTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 708              	 .loc 1 1178 0 is_stmt 1
 709 0058 FB68     	 ldr r3,[r7,#12]
 710 005a 9B6A     	 ldr r3,[r3,#40]
 711 005c 002B     	 cmp r3,#0
 712 005e 04D0     	 beq .L33
1179:../Dave/Generated/FREERTOS/tasks.c **** 			{
1180:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 713              	 .loc 1 1180 0
 714 0060 FB68     	 ldr r3,[r7,#12]
 715 0062 1833     	 adds r3,r3,#24
 716 0064 1846     	 mov r0,r3
 717 0066 FFF7FEFF 	 bl uxListRemove
 718              	.L33:
1181:../Dave/Generated/FREERTOS/tasks.c **** 			}
1182:../Dave/Generated/FREERTOS/tasks.c **** 			else
1183:../Dave/Generated/FREERTOS/tasks.c **** 			{
1184:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1185:../Dave/Generated/FREERTOS/tasks.c **** 			}
1186:../Dave/Generated/FREERTOS/tasks.c **** 
1187:../Dave/Generated/FREERTOS/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1188:../Dave/Generated/FREERTOS/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1189:../Dave/Generated/FREERTOS/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:../Dave/Generated/FREERTOS/tasks.c **** 			not return. */
1191:../Dave/Generated/FREERTOS/tasks.c **** 			uxTaskNumber++;
 719              	 .loc 1 1191 0
 720 006a 254B     	 ldr r3,.L39+12
 721 006c 1B68     	 ldr r3,[r3]
 722 006e 0133     	 adds r3,r3,#1
 723 0070 234A     	 ldr r2,.L39+12
 724 0072 1360     	 str r3,[r2]
1192:../Dave/Generated/FREERTOS/tasks.c **** 
1193:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 725              	 .loc 1 1193 0
 726 0074 1F4B     	 ldr r3,.L39
 727 0076 1B68     	 ldr r3,[r3]
 728 0078 FA68     	 ldr r2,[r7,#12]
 729 007a 9A42     	 cmp r2,r3
 730 007c 0BD1     	 bne .L34
1194:../Dave/Generated/FREERTOS/tasks.c **** 			{
1195:../Dave/Generated/FREERTOS/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1196:../Dave/Generated/FREERTOS/tasks.c **** 				task itself, as a context switch to another task is required.
1197:../Dave/Generated/FREERTOS/tasks.c **** 				Place the task in the termination list.  The idle task will
1198:../Dave/Generated/FREERTOS/tasks.c **** 				check the termination list and free up any memory allocated by
1199:../Dave/Generated/FREERTOS/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1200:../Dave/Generated/FREERTOS/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 731              	 .loc 1 1200 0
 732 007e FB68     	 ldr r3,[r7,#12]
 733 0080 0433     	 adds r3,r3,#4
 734 0082 2048     	 ldr r0,.L39+16
 735 0084 1946     	 mov r1,r3
 736 0086 FFF7FEFF 	 bl vListInsertEnd
1201:../Dave/Generated/FREERTOS/tasks.c **** 
1202:../Dave/Generated/FREERTOS/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1203:../Dave/Generated/FREERTOS/tasks.c **** 				there is a task that has been deleted and that it should therefore
1204:../Dave/Generated/FREERTOS/tasks.c **** 				check the xTasksWaitingTermination list. */
1205:../Dave/Generated/FREERTOS/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 737              	 .loc 1 1205 0
 738 008a 1F4B     	 ldr r3,.L39+20
 739 008c 1B68     	 ldr r3,[r3]
 740 008e 0133     	 adds r3,r3,#1
 741 0090 1D4A     	 ldr r2,.L39+20
 742 0092 1360     	 str r3,[r2]
 743 0094 09E0     	 b .L35
 744              	.L34:
1206:../Dave/Generated/FREERTOS/tasks.c **** 
1207:../Dave/Generated/FREERTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1208:../Dave/Generated/FREERTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
1209:../Dave/Generated/FREERTOS/tasks.c **** 				after which it is not possible to yield away from this task -
1210:../Dave/Generated/FREERTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1211:../Dave/Generated/FREERTOS/tasks.c **** 				required. */
1212:../Dave/Generated/FREERTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1213:../Dave/Generated/FREERTOS/tasks.c **** 			}
1214:../Dave/Generated/FREERTOS/tasks.c **** 			else
1215:../Dave/Generated/FREERTOS/tasks.c **** 			{
1216:../Dave/Generated/FREERTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
 745              	 .loc 1 1216 0
 746 0096 1D4B     	 ldr r3,.L39+24
 747 0098 1B68     	 ldr r3,[r3]
 748 009a 013B     	 subs r3,r3,#1
 749 009c 1B4A     	 ldr r2,.L39+24
 750 009e 1360     	 str r3,[r2]
1217:../Dave/Generated/FREERTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
 751              	 .loc 1 1217 0
 752 00a0 F868     	 ldr r0,[r7,#12]
 753 00a2 FFF7FEFF 	 bl prvDeleteTCB
1218:../Dave/Generated/FREERTOS/tasks.c **** 
1219:../Dave/Generated/FREERTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1220:../Dave/Generated/FREERTOS/tasks.c **** 				the task that has just been deleted. */
1221:../Dave/Generated/FREERTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
 754              	 .loc 1 1221 0
 755 00a6 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 756              	.L35:
1222:../Dave/Generated/FREERTOS/tasks.c **** 			}
1223:../Dave/Generated/FREERTOS/tasks.c **** 
1224:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
1225:../Dave/Generated/FREERTOS/tasks.c **** 		}
1226:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 757              	 .loc 1 1226 0
 758 00aa FFF7FEFF 	 bl vPortExitCritical
1227:../Dave/Generated/FREERTOS/tasks.c **** 
1228:../Dave/Generated/FREERTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1229:../Dave/Generated/FREERTOS/tasks.c **** 		been deleted. */
1230:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 759              	 .loc 1 1230 0
 760 00ae 184B     	 ldr r3,.L39+28
 761 00b0 1B68     	 ldr r3,[r3]
 762 00b2 002B     	 cmp r3,#0
 763 00b4 1AD0     	 beq .L28
1231:../Dave/Generated/FREERTOS/tasks.c **** 		{
1232:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 764              	 .loc 1 1232 0
 765 00b6 0F4B     	 ldr r3,.L39
 766 00b8 1B68     	 ldr r3,[r3]
 767 00ba FA68     	 ldr r2,[r7,#12]
 768 00bc 9A42     	 cmp r2,r3
 769 00be 15D1     	 bne .L28
1233:../Dave/Generated/FREERTOS/tasks.c **** 			{
1234:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 770              	 .loc 1 1234 0
 771 00c0 144B     	 ldr r3,.L39+32
 772 00c2 1B68     	 ldr r3,[r3]
 773 00c4 002B     	 cmp r3,#0
 774 00c6 09D0     	 beq .L37
 775              	.LBB118:
 776              	.LBB119:
 777              	 .loc 2 195 0 discriminator 1
 778              	
 779 00c8 4FF0FC03 	 mov r3,#252
 780 00cc 83F31188 	 msr basepri,r3
 781 00d0 BFF36F8F 	 isb 
 782 00d4 BFF34F8F 	 dsb 
 783              	
 784              	
 785              	 .thumb
 786 00d8 BB60     	 str r3,[r7,#8]
 787              	.L38:
 788              	.LBE119:
 789              	.LBE118:
 790              	 .loc 1 1234 0 discriminator 1
 791 00da FEE7     	 b .L38
 792              	.L37:
1235:../Dave/Generated/FREERTOS/tasks.c **** 				portYIELD_WITHIN_API();
 793              	 .loc 1 1235 0
 794 00dc 0E4B     	 ldr r3,.L39+36
 795 00de 4FF08052 	 mov r2,#268435456
 796 00e2 1A60     	 str r2,[r3]
 797              	
 798 00e4 BFF34F8F 	 dsb
 799              	
 800              	
 801 00e8 BFF36F8F 	 isb
 802              	
 803              	 .thumb
 804              	.L28:
1236:../Dave/Generated/FREERTOS/tasks.c **** 			}
1237:../Dave/Generated/FREERTOS/tasks.c **** 			else
1238:../Dave/Generated/FREERTOS/tasks.c **** 			{
1239:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1240:../Dave/Generated/FREERTOS/tasks.c **** 			}
1241:../Dave/Generated/FREERTOS/tasks.c **** 		}
1242:../Dave/Generated/FREERTOS/tasks.c **** 	}
 805              	 .loc 1 1242 0
 806 00ec 1037     	 adds r7,r7,#16
 807              	.LCFI18:
 808              	 .cfi_def_cfa_offset 8
 809 00ee BD46     	 mov sp,r7
 810              	.LCFI19:
 811              	 .cfi_def_cfa_register 13
 812              	 
 813 00f0 80BD     	 pop {r7,pc}
 814              	.L40:
 815 00f2 00BF     	 .align 2
 816              	.L39:
 817 00f4 00000000 	 .word pxCurrentTCB
 818 00f8 00000000 	 .word pxReadyTasksLists
 819 00fc 00000000 	 .word uxTopReadyPriority
 820 0100 00000000 	 .word uxTaskNumber
 821 0104 00000000 	 .word xTasksWaitingTermination
 822 0108 00000000 	 .word uxDeletedTasksWaitingCleanUp
 823 010c 00000000 	 .word uxCurrentNumberOfTasks
 824 0110 00000000 	 .word xSchedulerRunning
 825 0114 00000000 	 .word uxSchedulerSuspended
 826 0118 04ED00E0 	 .word -536810236
 827              	 .cfi_endproc
 828              	.LFE140:
 830              	 .section .text.vTaskDelayUntil,"ax",%progbits
 831              	 .align 2
 832              	 .global vTaskDelayUntil
 833              	 .thumb
 834              	 .thumb_func
 836              	vTaskDelayUntil:
 837              	.LFB141:
1243:../Dave/Generated/FREERTOS/tasks.c **** 
1244:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1246:../Dave/Generated/FREERTOS/tasks.c **** 
1247:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1248:../Dave/Generated/FREERTOS/tasks.c **** 
1249:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1250:../Dave/Generated/FREERTOS/tasks.c **** 	{
 838              	 .loc 1 1250 0
 839              	 .cfi_startproc
 840              	 
 841              	 
 842 0000 80B5     	 push {r7,lr}
 843              	.LCFI20:
 844              	 .cfi_def_cfa_offset 8
 845              	 .cfi_offset 7,-8
 846              	 .cfi_offset 14,-4
 847 0002 8AB0     	 sub sp,sp,#40
 848              	.LCFI21:
 849              	 .cfi_def_cfa_offset 48
 850 0004 00AF     	 add r7,sp,#0
 851              	.LCFI22:
 852              	 .cfi_def_cfa_register 7
 853 0006 7860     	 str r0,[r7,#4]
 854 0008 3960     	 str r1,[r7]
1251:../Dave/Generated/FREERTOS/tasks.c **** 	TickType_t xTimeToWake;
1252:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 855              	 .loc 1 1252 0
 856 000a 0023     	 movs r3,#0
 857 000c 7B62     	 str r3,[r7,#36]
1253:../Dave/Generated/FREERTOS/tasks.c **** 
1254:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 858              	 .loc 1 1254 0
 859 000e 7B68     	 ldr r3,[r7,#4]
 860 0010 002B     	 cmp r3,#0
 861 0012 09D1     	 bne .L42
 862              	.LBB120:
 863              	.LBB121:
 864              	 .loc 2 195 0 discriminator 1
 865              	
 866 0014 4FF0FC03 	 mov r3,#252
 867 0018 83F31188 	 msr basepri,r3
 868 001c BFF36F8F 	 isb 
 869 0020 BFF34F8F 	 dsb 
 870              	
 871              	
 872              	 .thumb
 873 0024 7B61     	 str r3,[r7,#20]
 874              	.L43:
 875              	.LBE121:
 876              	.LBE120:
 877              	 .loc 1 1254 0 discriminator 1
 878 0026 FEE7     	 b .L43
 879              	.L42:
1255:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 880              	 .loc 1 1255 0
 881 0028 3B68     	 ldr r3,[r7]
 882 002a 002B     	 cmp r3,#0
 883 002c 09D1     	 bne .L44
 884              	.LBB122:
 885              	.LBB123:
 886              	 .loc 2 195 0 discriminator 1
 887              	
 888 002e 4FF0FC03 	 mov r3,#252
 889 0032 83F31188 	 msr basepri,r3
 890 0036 BFF36F8F 	 isb 
 891 003a BFF34F8F 	 dsb 
 892              	
 893              	
 894              	 .thumb
 895 003e 3B61     	 str r3,[r7,#16]
 896              	.L45:
 897              	.LBE123:
 898              	.LBE122:
 899              	 .loc 1 1255 0 discriminator 2
 900 0040 FEE7     	 b .L45
 901              	.L44:
1256:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 902              	 .loc 1 1256 0
 903 0042 294B     	 ldr r3,.L53
 904 0044 1B68     	 ldr r3,[r3]
 905 0046 002B     	 cmp r3,#0
 906 0048 09D0     	 beq .L46
 907              	.LBB124:
 908              	.LBB125:
 909              	 .loc 2 195 0 discriminator 1
 910              	
 911 004a 4FF0FC03 	 mov r3,#252
 912 004e 83F31188 	 msr basepri,r3
 913 0052 BFF36F8F 	 isb 
 914 0056 BFF34F8F 	 dsb 
 915              	
 916              	
 917              	 .thumb
 918 005a FB60     	 str r3,[r7,#12]
 919              	.L47:
 920              	.LBE125:
 921              	.LBE124:
 922              	 .loc 1 1256 0 discriminator 3
 923 005c FEE7     	 b .L47
 924              	.L46:
1257:../Dave/Generated/FREERTOS/tasks.c **** 
1258:../Dave/Generated/FREERTOS/tasks.c **** 		vTaskSuspendAll();
 925              	 .loc 1 1258 0
 926 005e FFF7FEFF 	 bl vTaskSuspendAll
 927              	.LBB126:
1259:../Dave/Generated/FREERTOS/tasks.c **** 		{
1260:../Dave/Generated/FREERTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1261:../Dave/Generated/FREERTOS/tasks.c **** 			block. */
1262:../Dave/Generated/FREERTOS/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 928              	 .loc 1 1262 0
 929 0062 224B     	 ldr r3,.L53+4
 930 0064 1B68     	 ldr r3,[r3]
 931 0066 3B62     	 str r3,[r7,#32]
1263:../Dave/Generated/FREERTOS/tasks.c **** 
1264:../Dave/Generated/FREERTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1265:../Dave/Generated/FREERTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 932              	 .loc 1 1265 0
 933 0068 7B68     	 ldr r3,[r7,#4]
 934 006a 1A68     	 ldr r2,[r3]
 935 006c 3B68     	 ldr r3,[r7]
 936 006e 1344     	 add r3,r3,r2
 937 0070 FB61     	 str r3,[r7,#28]
1266:../Dave/Generated/FREERTOS/tasks.c **** 
1267:../Dave/Generated/FREERTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 938              	 .loc 1 1267 0
 939 0072 7B68     	 ldr r3,[r7,#4]
 940 0074 1A68     	 ldr r2,[r3]
 941 0076 3B6A     	 ldr r3,[r7,#32]
 942 0078 9A42     	 cmp r2,r3
 943 007a 0BD9     	 bls .L48
1268:../Dave/Generated/FREERTOS/tasks.c **** 			{
1269:../Dave/Generated/FREERTOS/tasks.c **** 				/* The tick count has overflowed since this function was
1270:../Dave/Generated/FREERTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
1271:../Dave/Generated/FREERTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1272:../Dave/Generated/FREERTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
1273:../Dave/Generated/FREERTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
1274:../Dave/Generated/FREERTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 944              	 .loc 1 1274 0
 945 007c 7B68     	 ldr r3,[r7,#4]
 946 007e 1A68     	 ldr r2,[r3]
 947 0080 FB69     	 ldr r3,[r7,#28]
 948 0082 9A42     	 cmp r2,r3
 949 0084 11D9     	 bls .L49
 950              	 .loc 1 1274 0 is_stmt 0 discriminator 1
 951 0086 FA69     	 ldr r2,[r7,#28]
 952 0088 3B6A     	 ldr r3,[r7,#32]
 953 008a 9A42     	 cmp r2,r3
 954 008c 0DD9     	 bls .L49
1275:../Dave/Generated/FREERTOS/tasks.c **** 				{
1276:../Dave/Generated/FREERTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 955              	 .loc 1 1276 0 is_stmt 1
 956 008e 0123     	 movs r3,#1
 957 0090 7B62     	 str r3,[r7,#36]
 958 0092 0AE0     	 b .L49
 959              	.L48:
1277:../Dave/Generated/FREERTOS/tasks.c **** 				}
1278:../Dave/Generated/FREERTOS/tasks.c **** 				else
1279:../Dave/Generated/FREERTOS/tasks.c **** 				{
1280:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1281:../Dave/Generated/FREERTOS/tasks.c **** 				}
1282:../Dave/Generated/FREERTOS/tasks.c **** 			}
1283:../Dave/Generated/FREERTOS/tasks.c **** 			else
1284:../Dave/Generated/FREERTOS/tasks.c **** 			{
1285:../Dave/Generated/FREERTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1286:../Dave/Generated/FREERTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1287:../Dave/Generated/FREERTOS/tasks.c **** 				tick time is less than the wake time. */
1288:../Dave/Generated/FREERTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 960              	 .loc 1 1288 0
 961 0094 7B68     	 ldr r3,[r7,#4]
 962 0096 1A68     	 ldr r2,[r3]
 963 0098 FB69     	 ldr r3,[r7,#28]
 964 009a 9A42     	 cmp r2,r3
 965 009c 03D8     	 bhi .L50
 966              	 .loc 1 1288 0 is_stmt 0 discriminator 1
 967 009e FA69     	 ldr r2,[r7,#28]
 968 00a0 3B6A     	 ldr r3,[r7,#32]
 969 00a2 9A42     	 cmp r2,r3
 970 00a4 01D9     	 bls .L49
 971              	.L50:
1289:../Dave/Generated/FREERTOS/tasks.c **** 				{
1290:../Dave/Generated/FREERTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 972              	 .loc 1 1290 0 is_stmt 1
 973 00a6 0123     	 movs r3,#1
 974 00a8 7B62     	 str r3,[r7,#36]
 975              	.L49:
1291:../Dave/Generated/FREERTOS/tasks.c **** 				}
1292:../Dave/Generated/FREERTOS/tasks.c **** 				else
1293:../Dave/Generated/FREERTOS/tasks.c **** 				{
1294:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1295:../Dave/Generated/FREERTOS/tasks.c **** 				}
1296:../Dave/Generated/FREERTOS/tasks.c **** 			}
1297:../Dave/Generated/FREERTOS/tasks.c **** 
1298:../Dave/Generated/FREERTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
1299:../Dave/Generated/FREERTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 976              	 .loc 1 1299 0
 977 00aa 7B68     	 ldr r3,[r7,#4]
 978 00ac FA69     	 ldr r2,[r7,#28]
 979 00ae 1A60     	 str r2,[r3]
1300:../Dave/Generated/FREERTOS/tasks.c **** 
1301:../Dave/Generated/FREERTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
 980              	 .loc 1 1301 0
 981 00b0 7B6A     	 ldr r3,[r7,#36]
 982 00b2 002B     	 cmp r3,#0
 983 00b4 06D0     	 beq .L51
1302:../Dave/Generated/FREERTOS/tasks.c **** 			{
1303:../Dave/Generated/FREERTOS/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1304:../Dave/Generated/FREERTOS/tasks.c **** 
1305:../Dave/Generated/FREERTOS/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1306:../Dave/Generated/FREERTOS/tasks.c **** 				the time to wake, so subtract the current tick count. */
1307:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 984              	 .loc 1 1307 0
 985 00b6 FA69     	 ldr r2,[r7,#28]
 986 00b8 3B6A     	 ldr r3,[r7,#32]
 987 00ba D31A     	 subs r3,r2,r3
 988 00bc 1846     	 mov r0,r3
 989 00be 0021     	 movs r1,#0
 990 00c0 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
 991              	.L51:
 992              	.LBE126:
1308:../Dave/Generated/FREERTOS/tasks.c **** 			}
1309:../Dave/Generated/FREERTOS/tasks.c **** 			else
1310:../Dave/Generated/FREERTOS/tasks.c **** 			{
1311:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1312:../Dave/Generated/FREERTOS/tasks.c **** 			}
1313:../Dave/Generated/FREERTOS/tasks.c **** 		}
1314:../Dave/Generated/FREERTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 993              	 .loc 1 1314 0
 994 00c4 FFF7FEFF 	 bl xTaskResumeAll
 995 00c8 B861     	 str r0,[r7,#24]
1315:../Dave/Generated/FREERTOS/tasks.c **** 
1316:../Dave/Generated/FREERTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:../Dave/Generated/FREERTOS/tasks.c **** 		have put ourselves to sleep. */
1318:../Dave/Generated/FREERTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 996              	 .loc 1 1318 0
 997 00ca BB69     	 ldr r3,[r7,#24]
 998 00cc 002B     	 cmp r3,#0
 999 00ce 07D1     	 bne .L41
1319:../Dave/Generated/FREERTOS/tasks.c **** 		{
1320:../Dave/Generated/FREERTOS/tasks.c **** 			portYIELD_WITHIN_API();
 1000              	 .loc 1 1320 0
 1001 00d0 074B     	 ldr r3,.L53+8
 1002 00d2 4FF08052 	 mov r2,#268435456
 1003 00d6 1A60     	 str r2,[r3]
 1004              	
 1005 00d8 BFF34F8F 	 dsb
 1006              	
 1007              	
 1008 00dc BFF36F8F 	 isb
 1009              	
 1010              	 .thumb
 1011              	.L41:
1321:../Dave/Generated/FREERTOS/tasks.c **** 		}
1322:../Dave/Generated/FREERTOS/tasks.c **** 		else
1323:../Dave/Generated/FREERTOS/tasks.c **** 		{
1324:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:../Dave/Generated/FREERTOS/tasks.c **** 		}
1326:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1012              	 .loc 1 1326 0
 1013 00e0 2837     	 adds r7,r7,#40
 1014              	.LCFI23:
 1015              	 .cfi_def_cfa_offset 8
 1016 00e2 BD46     	 mov sp,r7
 1017              	.LCFI24:
 1018              	 .cfi_def_cfa_register 13
 1019              	 
 1020 00e4 80BD     	 pop {r7,pc}
 1021              	.L54:
 1022 00e6 00BF     	 .align 2
 1023              	.L53:
 1024 00e8 00000000 	 .word uxSchedulerSuspended
 1025 00ec 00000000 	 .word xTickCount
 1026 00f0 04ED00E0 	 .word -536810236
 1027              	 .cfi_endproc
 1028              	.LFE141:
 1030              	 .section .text.vTaskDelay,"ax",%progbits
 1031              	 .align 2
 1032              	 .global vTaskDelay
 1033              	 .thumb
 1034              	 .thumb_func
 1036              	vTaskDelay:
 1037              	.LFB142:
1327:../Dave/Generated/FREERTOS/tasks.c **** 
1328:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1329:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1330:../Dave/Generated/FREERTOS/tasks.c **** 
1331:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1332:../Dave/Generated/FREERTOS/tasks.c **** 
1333:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1334:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1038              	 .loc 1 1334 0
 1039              	 .cfi_startproc
 1040              	 
 1041              	 
 1042 0000 80B5     	 push {r7,lr}
 1043              	.LCFI25:
 1044              	 .cfi_def_cfa_offset 8
 1045              	 .cfi_offset 7,-8
 1046              	 .cfi_offset 14,-4
 1047 0002 84B0     	 sub sp,sp,#16
 1048              	.LCFI26:
 1049              	 .cfi_def_cfa_offset 24
 1050 0004 00AF     	 add r7,sp,#0
 1051              	.LCFI27:
 1052              	 .cfi_def_cfa_register 7
 1053 0006 7860     	 str r0,[r7,#4]
1335:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1054              	 .loc 1 1335 0
 1055 0008 0023     	 movs r3,#0
 1056 000a FB60     	 str r3,[r7,#12]
1336:../Dave/Generated/FREERTOS/tasks.c **** 
1337:../Dave/Generated/FREERTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1338:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1057              	 .loc 1 1338 0
 1058 000c 7B68     	 ldr r3,[r7,#4]
 1059 000e 002B     	 cmp r3,#0
 1060 0010 16D0     	 beq .L56
1339:../Dave/Generated/FREERTOS/tasks.c **** 		{
1340:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1061              	 .loc 1 1340 0
 1062 0012 124B     	 ldr r3,.L60
 1063 0014 1B68     	 ldr r3,[r3]
 1064 0016 002B     	 cmp r3,#0
 1065 0018 09D0     	 beq .L57
 1066              	.LBB127:
 1067              	.LBB128:
 1068              	 .loc 2 195 0 discriminator 1
 1069              	
 1070 001a 4FF0FC03 	 mov r3,#252
 1071 001e 83F31188 	 msr basepri,r3
 1072 0022 BFF36F8F 	 isb 
 1073 0026 BFF34F8F 	 dsb 
 1074              	
 1075              	
 1076              	 .thumb
 1077 002a BB60     	 str r3,[r7,#8]
 1078              	.L58:
 1079              	.LBE128:
 1080              	.LBE127:
 1081              	 .loc 1 1340 0 discriminator 1
 1082 002c FEE7     	 b .L58
 1083              	.L57:
1341:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSuspendAll();
 1084              	 .loc 1 1341 0
 1085 002e FFF7FEFF 	 bl vTaskSuspendAll
1342:../Dave/Generated/FREERTOS/tasks.c **** 			{
1343:../Dave/Generated/FREERTOS/tasks.c **** 				traceTASK_DELAY();
1344:../Dave/Generated/FREERTOS/tasks.c **** 
1345:../Dave/Generated/FREERTOS/tasks.c **** 				/* A task that is removed from the event list while the
1346:../Dave/Generated/FREERTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
1347:../Dave/Generated/FREERTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
1348:../Dave/Generated/FREERTOS/tasks.c **** 				is resumed.
1349:../Dave/Generated/FREERTOS/tasks.c **** 
1350:../Dave/Generated/FREERTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
1351:../Dave/Generated/FREERTOS/tasks.c **** 				executing task. */
1352:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1086              	 .loc 1 1352 0
 1087 0032 7868     	 ldr r0,[r7,#4]
 1088 0034 0021     	 movs r1,#0
 1089 0036 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
1353:../Dave/Generated/FREERTOS/tasks.c **** 			}
1354:../Dave/Generated/FREERTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1090              	 .loc 1 1354 0
 1091 003a FFF7FEFF 	 bl xTaskResumeAll
 1092 003e F860     	 str r0,[r7,#12]
 1093              	.L56:
1355:../Dave/Generated/FREERTOS/tasks.c **** 		}
1356:../Dave/Generated/FREERTOS/tasks.c **** 		else
1357:../Dave/Generated/FREERTOS/tasks.c **** 		{
1358:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1359:../Dave/Generated/FREERTOS/tasks.c **** 		}
1360:../Dave/Generated/FREERTOS/tasks.c **** 
1361:../Dave/Generated/FREERTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1362:../Dave/Generated/FREERTOS/tasks.c **** 		have put ourselves to sleep. */
1363:../Dave/Generated/FREERTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1094              	 .loc 1 1363 0
 1095 0040 FB68     	 ldr r3,[r7,#12]
 1096 0042 002B     	 cmp r3,#0
 1097 0044 07D1     	 bne .L55
1364:../Dave/Generated/FREERTOS/tasks.c **** 		{
1365:../Dave/Generated/FREERTOS/tasks.c **** 			portYIELD_WITHIN_API();
 1098              	 .loc 1 1365 0
 1099 0046 064B     	 ldr r3,.L60+4
 1100 0048 4FF08052 	 mov r2,#268435456
 1101 004c 1A60     	 str r2,[r3]
 1102              	
 1103 004e BFF34F8F 	 dsb
 1104              	
 1105              	
 1106 0052 BFF36F8F 	 isb
 1107              	
 1108              	 .thumb
 1109              	.L55:
1366:../Dave/Generated/FREERTOS/tasks.c **** 		}
1367:../Dave/Generated/FREERTOS/tasks.c **** 		else
1368:../Dave/Generated/FREERTOS/tasks.c **** 		{
1369:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1370:../Dave/Generated/FREERTOS/tasks.c **** 		}
1371:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1110              	 .loc 1 1371 0
 1111 0056 1037     	 adds r7,r7,#16
 1112              	.LCFI28:
 1113              	 .cfi_def_cfa_offset 8
 1114 0058 BD46     	 mov sp,r7
 1115              	.LCFI29:
 1116              	 .cfi_def_cfa_register 13
 1117              	 
 1118 005a 80BD     	 pop {r7,pc}
 1119              	.L61:
 1120              	 .align 2
 1121              	.L60:
 1122 005c 00000000 	 .word uxSchedulerSuspended
 1123 0060 04ED00E0 	 .word -536810236
 1124              	 .cfi_endproc
 1125              	.LFE142:
 1127              	 .section .text.eTaskGetState,"ax",%progbits
 1128              	 .align 2
 1129              	 .global eTaskGetState
 1130              	 .thumb
 1131              	 .thumb_func
 1133              	eTaskGetState:
 1134              	.LFB143:
1372:../Dave/Generated/FREERTOS/tasks.c **** 
1373:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1374:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1375:../Dave/Generated/FREERTOS/tasks.c **** 
1376:../Dave/Generated/FREERTOS/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1377:../Dave/Generated/FREERTOS/tasks.c **** 
1378:../Dave/Generated/FREERTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1379:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1135              	 .loc 1 1379 0
 1136              	 .cfi_startproc
 1137              	 
 1138              	 
 1139 0000 80B5     	 push {r7,lr}
 1140              	.LCFI30:
 1141              	 .cfi_def_cfa_offset 8
 1142              	 .cfi_offset 7,-8
 1143              	 .cfi_offset 14,-4
 1144 0002 88B0     	 sub sp,sp,#32
 1145              	.LCFI31:
 1146              	 .cfi_def_cfa_offset 40
 1147 0004 00AF     	 add r7,sp,#0
 1148              	.LCFI32:
 1149              	 .cfi_def_cfa_register 7
 1150 0006 7860     	 str r0,[r7,#4]
1380:../Dave/Generated/FREERTOS/tasks.c **** 	eTaskState eReturn;
1381:../Dave/Generated/FREERTOS/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1382:../Dave/Generated/FREERTOS/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1151              	 .loc 1 1382 0
 1152 0008 7B68     	 ldr r3,[r7,#4]
 1153 000a BB61     	 str r3,[r7,#24]
1383:../Dave/Generated/FREERTOS/tasks.c **** 
1384:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTCB );
 1154              	 .loc 1 1384 0
 1155 000c BB69     	 ldr r3,[r7,#24]
 1156 000e 002B     	 cmp r3,#0
 1157 0010 09D1     	 bne .L63
 1158              	.LBB129:
 1159              	.LBB130:
 1160              	 .loc 2 195 0 discriminator 1
 1161              	
 1162 0012 4FF0FC03 	 mov r3,#252
 1163 0016 83F31188 	 msr basepri,r3
 1164 001a BFF36F8F 	 isb 
 1165 001e BFF34F8F 	 dsb 
 1166              	
 1167              	
 1168              	 .thumb
 1169 0022 BB60     	 str r3,[r7,#8]
 1170              	.L64:
 1171              	.LBE130:
 1172              	.LBE129:
 1173              	 .loc 1 1384 0 discriminator 1
 1174 0024 FEE7     	 b .L64
 1175              	.L63:
1385:../Dave/Generated/FREERTOS/tasks.c **** 
1386:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1176              	 .loc 1 1386 0
 1177 0026 244B     	 ldr r3,.L77
 1178 0028 1B68     	 ldr r3,[r3]
 1179 002a BA69     	 ldr r2,[r7,#24]
 1180 002c 9A42     	 cmp r2,r3
 1181 002e 02D1     	 bne .L65
1387:../Dave/Generated/FREERTOS/tasks.c **** 		{
1388:../Dave/Generated/FREERTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
1389:../Dave/Generated/FREERTOS/tasks.c **** 			eReturn = eRunning;
 1182              	 .loc 1 1389 0
 1183 0030 0023     	 movs r3,#0
 1184 0032 FB77     	 strb r3,[r7,#31]
 1185 0034 3AE0     	 b .L66
 1186              	.L65:
1390:../Dave/Generated/FREERTOS/tasks.c **** 		}
1391:../Dave/Generated/FREERTOS/tasks.c **** 		else
1392:../Dave/Generated/FREERTOS/tasks.c **** 		{
1393:../Dave/Generated/FREERTOS/tasks.c **** 			taskENTER_CRITICAL();
 1187              	 .loc 1 1393 0
 1188 0036 FFF7FEFF 	 bl vPortEnterCritical
1394:../Dave/Generated/FREERTOS/tasks.c **** 			{
1395:../Dave/Generated/FREERTOS/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1189              	 .loc 1 1395 0
 1190 003a BB69     	 ldr r3,[r7,#24]
 1191 003c 5B69     	 ldr r3,[r3,#20]
 1192 003e 7B61     	 str r3,[r7,#20]
1396:../Dave/Generated/FREERTOS/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1193              	 .loc 1 1396 0
 1194 0040 1E4B     	 ldr r3,.L77+4
 1195 0042 1B68     	 ldr r3,[r3]
 1196 0044 3B61     	 str r3,[r7,#16]
1397:../Dave/Generated/FREERTOS/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1197              	 .loc 1 1397 0
 1198 0046 1E4B     	 ldr r3,.L77+8
 1199 0048 1B68     	 ldr r3,[r3]
 1200 004a FB60     	 str r3,[r7,#12]
1398:../Dave/Generated/FREERTOS/tasks.c **** 			}
1399:../Dave/Generated/FREERTOS/tasks.c **** 			taskEXIT_CRITICAL();
 1201              	 .loc 1 1399 0
 1202 004c FFF7FEFF 	 bl vPortExitCritical
1400:../Dave/Generated/FREERTOS/tasks.c **** 
1401:../Dave/Generated/FREERTOS/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1203              	 .loc 1 1401 0
 1204 0050 7A69     	 ldr r2,[r7,#20]
 1205 0052 3B69     	 ldr r3,[r7,#16]
 1206 0054 9A42     	 cmp r2,r3
 1207 0056 03D0     	 beq .L67
 1208              	 .loc 1 1401 0 is_stmt 0 discriminator 1
 1209 0058 7A69     	 ldr r2,[r7,#20]
 1210 005a FB68     	 ldr r3,[r7,#12]
 1211 005c 9A42     	 cmp r2,r3
 1212 005e 02D1     	 bne .L68
 1213              	.L67:
1402:../Dave/Generated/FREERTOS/tasks.c **** 			{
1403:../Dave/Generated/FREERTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1404:../Dave/Generated/FREERTOS/tasks.c **** 				lists. */
1405:../Dave/Generated/FREERTOS/tasks.c **** 				eReturn = eBlocked;
 1214              	 .loc 1 1405 0 is_stmt 1
 1215 0060 0223     	 movs r3,#2
 1216 0062 FB77     	 strb r3,[r7,#31]
 1217 0064 22E0     	 b .L66
 1218              	.L68:
1406:../Dave/Generated/FREERTOS/tasks.c **** 			}
1407:../Dave/Generated/FREERTOS/tasks.c **** 
1408:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1409:../Dave/Generated/FREERTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1219              	 .loc 1 1409 0
 1220 0066 7B69     	 ldr r3,[r7,#20]
 1221 0068 164A     	 ldr r2,.L77+12
 1222 006a 9342     	 cmp r3,r2
 1223 006c 12D1     	 bne .L69
1410:../Dave/Generated/FREERTOS/tasks.c **** 				{
1411:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
1412:../Dave/Generated/FREERTOS/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1413:../Dave/Generated/FREERTOS/tasks.c **** 					indefinitely? */
1414:../Dave/Generated/FREERTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1224              	 .loc 1 1414 0
 1225 006e BB69     	 ldr r3,[r7,#24]
 1226 0070 9B6A     	 ldr r3,[r3,#40]
 1227 0072 002B     	 cmp r3,#0
 1228 0074 0BD1     	 bne .L70
1415:../Dave/Generated/FREERTOS/tasks.c **** 					{
1416:../Dave/Generated/FREERTOS/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1417:../Dave/Generated/FREERTOS/tasks.c **** 						{
1418:../Dave/Generated/FREERTOS/tasks.c **** 							/* The task does not appear on the event list item of
1419:../Dave/Generated/FREERTOS/tasks.c **** 							and of the RTOS objects, but could still be in the
1420:../Dave/Generated/FREERTOS/tasks.c **** 							blocked state if it is waiting on its notification
1421:../Dave/Generated/FREERTOS/tasks.c **** 							rather than waiting on an object. */
1422:../Dave/Generated/FREERTOS/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1229              	 .loc 1 1422 0
 1230 0076 BB69     	 ldr r3,[r7,#24]
 1231 0078 93F86C30 	 ldrb r3,[r3,#108]
 1232 007c DBB2     	 uxtb r3,r3
 1233 007e 012B     	 cmp r3,#1
 1234 0080 02D1     	 bne .L71
1423:../Dave/Generated/FREERTOS/tasks.c **** 							{
1424:../Dave/Generated/FREERTOS/tasks.c **** 								eReturn = eBlocked;
 1235              	 .loc 1 1424 0
 1236 0082 0223     	 movs r3,#2
 1237 0084 FB77     	 strb r3,[r7,#31]
 1238 0086 11E0     	 b .L66
 1239              	.L71:
1425:../Dave/Generated/FREERTOS/tasks.c **** 							}
1426:../Dave/Generated/FREERTOS/tasks.c **** 							else
1427:../Dave/Generated/FREERTOS/tasks.c **** 							{
1428:../Dave/Generated/FREERTOS/tasks.c **** 								eReturn = eSuspended;
 1240              	 .loc 1 1428 0
 1241 0088 0323     	 movs r3,#3
 1242 008a FB77     	 strb r3,[r7,#31]
 1243 008c 0EE0     	 b .L66
 1244              	.L70:
1429:../Dave/Generated/FREERTOS/tasks.c **** 							}
1430:../Dave/Generated/FREERTOS/tasks.c **** 						}
1431:../Dave/Generated/FREERTOS/tasks.c **** 						#else
1432:../Dave/Generated/FREERTOS/tasks.c **** 						{
1433:../Dave/Generated/FREERTOS/tasks.c **** 							eReturn = eSuspended;
1434:../Dave/Generated/FREERTOS/tasks.c **** 						}
1435:../Dave/Generated/FREERTOS/tasks.c **** 						#endif
1436:../Dave/Generated/FREERTOS/tasks.c **** 					}
1437:../Dave/Generated/FREERTOS/tasks.c **** 					else
1438:../Dave/Generated/FREERTOS/tasks.c **** 					{
1439:../Dave/Generated/FREERTOS/tasks.c **** 						eReturn = eBlocked;
 1245              	 .loc 1 1439 0
 1246 008e 0223     	 movs r3,#2
 1247 0090 FB77     	 strb r3,[r7,#31]
 1248 0092 0BE0     	 b .L66
 1249              	.L69:
1440:../Dave/Generated/FREERTOS/tasks.c **** 					}
1441:../Dave/Generated/FREERTOS/tasks.c **** 				}
1442:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
1443:../Dave/Generated/FREERTOS/tasks.c **** 
1444:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1445:../Dave/Generated/FREERTOS/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1250              	 .loc 1 1445 0
 1251 0094 7B69     	 ldr r3,[r7,#20]
 1252 0096 0C4A     	 ldr r2,.L77+16
 1253 0098 9342     	 cmp r3,r2
 1254 009a 02D0     	 beq .L74
 1255              	 .loc 1 1445 0 is_stmt 0 discriminator 1
 1256 009c 7B69     	 ldr r3,[r7,#20]
 1257 009e 002B     	 cmp r3,#0
 1258 00a0 02D1     	 bne .L75
 1259              	.L74:
1446:../Dave/Generated/FREERTOS/tasks.c **** 				{
1447:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
1448:../Dave/Generated/FREERTOS/tasks.c **** 					tasks list, or it is not referenced from any lists at
1449:../Dave/Generated/FREERTOS/tasks.c **** 					all. */
1450:../Dave/Generated/FREERTOS/tasks.c **** 					eReturn = eDeleted;
 1260              	 .loc 1 1450 0 is_stmt 1
 1261 00a2 0423     	 movs r3,#4
 1262 00a4 FB77     	 strb r3,[r7,#31]
 1263 00a6 01E0     	 b .L66
 1264              	.L75:
1451:../Dave/Generated/FREERTOS/tasks.c **** 				}
1452:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
1453:../Dave/Generated/FREERTOS/tasks.c **** 
1454:../Dave/Generated/FREERTOS/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1455:../Dave/Generated/FREERTOS/tasks.c **** 			{
1456:../Dave/Generated/FREERTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
1457:../Dave/Generated/FREERTOS/tasks.c **** 				Ready (including pending ready) state. */
1458:../Dave/Generated/FREERTOS/tasks.c **** 				eReturn = eReady;
 1265              	 .loc 1 1458 0
 1266 00a8 0123     	 movs r3,#1
 1267 00aa FB77     	 strb r3,[r7,#31]
 1268              	.L66:
1459:../Dave/Generated/FREERTOS/tasks.c **** 			}
1460:../Dave/Generated/FREERTOS/tasks.c **** 		}
1461:../Dave/Generated/FREERTOS/tasks.c **** 
1462:../Dave/Generated/FREERTOS/tasks.c **** 		return eReturn;
 1269              	 .loc 1 1462 0
 1270 00ac FB7F     	 ldrb r3,[r7,#31]
1463:../Dave/Generated/FREERTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1271              	 .loc 1 1463 0
 1272 00ae 1846     	 mov r0,r3
 1273 00b0 2037     	 adds r7,r7,#32
 1274              	.LCFI33:
 1275              	 .cfi_def_cfa_offset 8
 1276 00b2 BD46     	 mov sp,r7
 1277              	.LCFI34:
 1278              	 .cfi_def_cfa_register 13
 1279              	 
 1280 00b4 80BD     	 pop {r7,pc}
 1281              	.L78:
 1282 00b6 00BF     	 .align 2
 1283              	.L77:
 1284 00b8 00000000 	 .word pxCurrentTCB
 1285 00bc 00000000 	 .word pxDelayedTaskList
 1286 00c0 00000000 	 .word pxOverflowDelayedTaskList
 1287 00c4 00000000 	 .word xSuspendedTaskList
 1288 00c8 00000000 	 .word xTasksWaitingTermination
 1289              	 .cfi_endproc
 1290              	.LFE143:
 1292              	 .section .text.uxTaskPriorityGet,"ax",%progbits
 1293              	 .align 2
 1294              	 .global uxTaskPriorityGet
 1295              	 .thumb
 1296              	 .thumb_func
 1298              	uxTaskPriorityGet:
 1299              	.LFB144:
1464:../Dave/Generated/FREERTOS/tasks.c **** 
1465:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1466:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1467:../Dave/Generated/FREERTOS/tasks.c **** 
1468:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1469:../Dave/Generated/FREERTOS/tasks.c **** 
1470:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1471:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1300              	 .loc 1 1471 0
 1301              	 .cfi_startproc
 1302              	 
 1303              	 
 1304 0000 80B5     	 push {r7,lr}
 1305              	.LCFI35:
 1306              	 .cfi_def_cfa_offset 8
 1307              	 .cfi_offset 7,-8
 1308              	 .cfi_offset 14,-4
 1309 0002 84B0     	 sub sp,sp,#16
 1310              	.LCFI36:
 1311              	 .cfi_def_cfa_offset 24
 1312 0004 00AF     	 add r7,sp,#0
 1313              	.LCFI37:
 1314              	 .cfi_def_cfa_register 7
 1315 0006 7860     	 str r0,[r7,#4]
1472:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t const *pxTCB;
1473:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxReturn;
1474:../Dave/Generated/FREERTOS/tasks.c **** 
1475:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 1316              	 .loc 1 1475 0
 1317 0008 FFF7FEFF 	 bl vPortEnterCritical
1476:../Dave/Generated/FREERTOS/tasks.c **** 		{
1477:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1478:../Dave/Generated/FREERTOS/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1479:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1318              	 .loc 1 1479 0
 1319 000c 7B68     	 ldr r3,[r7,#4]
 1320 000e 002B     	 cmp r3,#0
 1321 0010 02D1     	 bne .L80
 1322              	 .loc 1 1479 0 is_stmt 0 discriminator 1
 1323 0012 074B     	 ldr r3,.L83
 1324 0014 1B68     	 ldr r3,[r3]
 1325 0016 00E0     	 b .L81
 1326              	.L80:
 1327              	 .loc 1 1479 0 discriminator 2
 1328 0018 7B68     	 ldr r3,[r7,#4]
 1329              	.L81:
 1330              	 .loc 1 1479 0 discriminator 4
 1331 001a FB60     	 str r3,[r7,#12]
1480:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1332              	 .loc 1 1480 0 is_stmt 1 discriminator 4
 1333 001c FB68     	 ldr r3,[r7,#12]
 1334 001e DB6A     	 ldr r3,[r3,#44]
 1335 0020 BB60     	 str r3,[r7,#8]
1481:../Dave/Generated/FREERTOS/tasks.c **** 		}
1482:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1336              	 .loc 1 1482 0 discriminator 4
 1337 0022 FFF7FEFF 	 bl vPortExitCritical
1483:../Dave/Generated/FREERTOS/tasks.c **** 
1484:../Dave/Generated/FREERTOS/tasks.c **** 		return uxReturn;
 1338              	 .loc 1 1484 0 discriminator 4
 1339 0026 BB68     	 ldr r3,[r7,#8]
1485:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1340              	 .loc 1 1485 0 discriminator 4
 1341 0028 1846     	 mov r0,r3
 1342 002a 1037     	 adds r7,r7,#16
 1343              	.LCFI38:
 1344              	 .cfi_def_cfa_offset 8
 1345 002c BD46     	 mov sp,r7
 1346              	.LCFI39:
 1347              	 .cfi_def_cfa_register 13
 1348              	 
 1349 002e 80BD     	 pop {r7,pc}
 1350              	.L84:
 1351              	 .align 2
 1352              	.L83:
 1353 0030 00000000 	 .word pxCurrentTCB
 1354              	 .cfi_endproc
 1355              	.LFE144:
 1357              	 .section .text.uxTaskPriorityGetFromISR,"ax",%progbits
 1358              	 .align 2
 1359              	 .global uxTaskPriorityGetFromISR
 1360              	 .thumb
 1361              	 .thumb_func
 1363              	uxTaskPriorityGetFromISR:
 1364              	.LFB145:
1486:../Dave/Generated/FREERTOS/tasks.c **** 
1487:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1488:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1489:../Dave/Generated/FREERTOS/tasks.c **** 
1490:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1491:../Dave/Generated/FREERTOS/tasks.c **** 
1492:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1493:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1365              	 .loc 1 1493 0
 1366              	 .cfi_startproc
 1367              	 
 1368              	 
 1369 0000 80B5     	 push {r7,lr}
 1370              	.LCFI40:
 1371              	 .cfi_def_cfa_offset 8
 1372              	 .cfi_offset 7,-8
 1373              	 .cfi_offset 14,-4
 1374 0002 88B0     	 sub sp,sp,#32
 1375              	.LCFI41:
 1376              	 .cfi_def_cfa_offset 40
 1377 0004 00AF     	 add r7,sp,#0
 1378              	.LCFI42:
 1379              	 .cfi_def_cfa_register 7
 1380 0006 7860     	 str r0,[r7,#4]
1494:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t const *pxTCB;
1495:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1496:../Dave/Generated/FREERTOS/tasks.c **** 
1497:../Dave/Generated/FREERTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1498:../Dave/Generated/FREERTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1499:../Dave/Generated/FREERTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1500:../Dave/Generated/FREERTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1501:../Dave/Generated/FREERTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1502:../Dave/Generated/FREERTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1503:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1504:../Dave/Generated/FREERTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1505:../Dave/Generated/FREERTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1506:../Dave/Generated/FREERTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1507:../Dave/Generated/FREERTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1508:../Dave/Generated/FREERTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1509:../Dave/Generated/FREERTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1510:../Dave/Generated/FREERTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1511:../Dave/Generated/FREERTOS/tasks.c **** 		provided on the following link:
1512:../Dave/Generated/FREERTOS/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1513:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1381              	 .loc 1 1513 0
 1382 0008 FFF7FEFF 	 bl vPortValidateInterruptPriority
 1383              	.LBB131:
 1384              	.LBB132:
 196:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 197:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	isb														\n" \
 200:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	dsb														\n" \
 201:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	);
 203:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 204:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 205:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 206:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 207:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {
 209:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 211:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile
 1385              	 .loc 2 211 0
 1386              	
 1387 000c EFF31182 	 mrs r2,basepri
 1388 0010 4FF0FC03 	 mov r3,#252
 1389 0014 83F31188 	 msr basepri,r3
 1390 0018 BFF36F8F 	 isb 
 1391 001c BFF34F8F 	 dsb 
 1392              	
 1393              	
 1394              	 .thumb
 1395 0020 3A61     	 str r2,[r7,#16]
 1396 0022 FB60     	 str r3,[r7,#12]
 212:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 213:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	isb														\n" \
 217:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	dsb														\n" \
 218:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	);
 220:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 221:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	warnings. */
 223:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	return ulOriginalBASEPRI;
 1397              	 .loc 2 223 0
 1398 0024 3B69     	 ldr r3,[r7,#16]
 1399              	.LBE132:
 1400              	.LBE131:
1514:../Dave/Generated/FREERTOS/tasks.c **** 
1515:../Dave/Generated/FREERTOS/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1401              	 .loc 1 1515 0
 1402 0026 FB61     	 str r3,[r7,#28]
1516:../Dave/Generated/FREERTOS/tasks.c **** 		{
1517:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1518:../Dave/Generated/FREERTOS/tasks.c **** 			task that is being queried. */
1519:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1403              	 .loc 1 1519 0
 1404 0028 7B68     	 ldr r3,[r7,#4]
 1405 002a 002B     	 cmp r3,#0
 1406 002c 02D1     	 bne .L87
 1407              	 .loc 1 1519 0 is_stmt 0 discriminator 1
 1408 002e 094B     	 ldr r3,.L90
 1409 0030 1B68     	 ldr r3,[r3]
 1410 0032 00E0     	 b .L88
 1411              	.L87:
 1412              	 .loc 1 1519 0 discriminator 2
 1413 0034 7B68     	 ldr r3,[r7,#4]
 1414              	.L88:
 1415              	 .loc 1 1519 0 discriminator 4
 1416 0036 BB61     	 str r3,[r7,#24]
1520:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1417              	 .loc 1 1520 0 is_stmt 1 discriminator 4
 1418 0038 BB69     	 ldr r3,[r7,#24]
 1419 003a DB6A     	 ldr r3,[r3,#44]
 1420 003c 7B61     	 str r3,[r7,#20]
 1421 003e FB69     	 ldr r3,[r7,#28]
 1422 0040 BB60     	 str r3,[r7,#8]
 1423              	.LBB133:
 1424              	.LBB134:
 224:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 225:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 226:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 227:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {
 229:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile
 1425              	 .loc 2 229 0 discriminator 4
 1426 0042 BB68     	 ldr r3,[r7,#8]
 1427              	
 1428 0044 83F31188 	 msr basepri,r3
 1429              	
 1430              	 .thumb
 1431              	.LBE134:
 1432              	.LBE133:
1521:../Dave/Generated/FREERTOS/tasks.c **** 		}
1522:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1523:../Dave/Generated/FREERTOS/tasks.c **** 
1524:../Dave/Generated/FREERTOS/tasks.c **** 		return uxReturn;
 1433              	 .loc 1 1524 0 discriminator 4
 1434 0048 7B69     	 ldr r3,[r7,#20]
1525:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1435              	 .loc 1 1525 0 discriminator 4
 1436 004a 1846     	 mov r0,r3
 1437 004c 2037     	 adds r7,r7,#32
 1438              	.LCFI43:
 1439              	 .cfi_def_cfa_offset 8
 1440 004e BD46     	 mov sp,r7
 1441              	.LCFI44:
 1442              	 .cfi_def_cfa_register 13
 1443              	 
 1444 0050 80BD     	 pop {r7,pc}
 1445              	.L91:
 1446 0052 00BF     	 .align 2
 1447              	.L90:
 1448 0054 00000000 	 .word pxCurrentTCB
 1449              	 .cfi_endproc
 1450              	.LFE145:
 1452              	 .section .text.vTaskPrioritySet,"ax",%progbits
 1453              	 .align 2
 1454              	 .global vTaskPrioritySet
 1455              	 .thumb
 1456              	 .thumb_func
 1458              	vTaskPrioritySet:
 1459              	.LFB146:
1526:../Dave/Generated/FREERTOS/tasks.c **** 
1527:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1528:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1529:../Dave/Generated/FREERTOS/tasks.c **** 
1530:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1531:../Dave/Generated/FREERTOS/tasks.c **** 
1532:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1533:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1460              	 .loc 1 1533 0
 1461              	 .cfi_startproc
 1462              	 
 1463              	 
 1464 0000 80B5     	 push {r7,lr}
 1465              	.LCFI45:
 1466              	 .cfi_def_cfa_offset 8
 1467              	 .cfi_offset 7,-8
 1468              	 .cfi_offset 14,-4
 1469 0002 88B0     	 sub sp,sp,#32
 1470              	.LCFI46:
 1471              	 .cfi_def_cfa_offset 40
 1472 0004 00AF     	 add r7,sp,#0
 1473              	.LCFI47:
 1474              	 .cfi_def_cfa_register 7
 1475 0006 7860     	 str r0,[r7,#4]
 1476 0008 3960     	 str r1,[r7]
1534:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1535:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1536:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1477              	 .loc 1 1536 0
 1478 000a 0023     	 movs r3,#0
 1479 000c FB61     	 str r3,[r7,#28]
1537:../Dave/Generated/FREERTOS/tasks.c **** 
1538:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1480              	 .loc 1 1538 0
 1481 000e 3B68     	 ldr r3,[r7]
 1482 0010 052B     	 cmp r3,#5
 1483 0012 09D9     	 bls .L93
 1484              	.LBB135:
 1485              	.LBB136:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 1486              	 .loc 2 195 0 discriminator 1
 1487              	
 1488 0014 4FF0FC03 	 mov r3,#252
 1489 0018 83F31188 	 msr basepri,r3
 1490 001c BFF36F8F 	 isb 
 1491 0020 BFF34F8F 	 dsb 
 1492              	
 1493              	
 1494              	 .thumb
 1495 0024 FB60     	 str r3,[r7,#12]
 1496              	.L94:
 1497              	.LBE136:
 1498              	.LBE135:
 1499              	 .loc 1 1538 0 discriminator 1
 1500 0026 FEE7     	 b .L94
 1501              	.L93:
1539:../Dave/Generated/FREERTOS/tasks.c **** 
1540:../Dave/Generated/FREERTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1541:../Dave/Generated/FREERTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1502              	 .loc 1 1541 0
 1503 0028 3B68     	 ldr r3,[r7]
 1504 002a 052B     	 cmp r3,#5
 1505 002c 01D9     	 bls .L95
1542:../Dave/Generated/FREERTOS/tasks.c **** 		{
1543:../Dave/Generated/FREERTOS/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1506              	 .loc 1 1543 0
 1507 002e 0523     	 movs r3,#5
 1508 0030 3B60     	 str r3,[r7]
 1509              	.L95:
1544:../Dave/Generated/FREERTOS/tasks.c **** 		}
1545:../Dave/Generated/FREERTOS/tasks.c **** 		else
1546:../Dave/Generated/FREERTOS/tasks.c **** 		{
1547:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1548:../Dave/Generated/FREERTOS/tasks.c **** 		}
1549:../Dave/Generated/FREERTOS/tasks.c **** 
1550:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 1510              	 .loc 1 1550 0
 1511 0032 FFF7FEFF 	 bl vPortEnterCritical
1551:../Dave/Generated/FREERTOS/tasks.c **** 		{
1552:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1553:../Dave/Generated/FREERTOS/tasks.c **** 			task that is being changed. */
1554:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1512              	 .loc 1 1554 0
 1513 0036 7B68     	 ldr r3,[r7,#4]
 1514 0038 002B     	 cmp r3,#0
 1515 003a 02D1     	 bne .L96
 1516              	 .loc 1 1554 0 is_stmt 0 discriminator 1
 1517 003c 414B     	 ldr r3,.L105
 1518 003e 1B68     	 ldr r3,[r3]
 1519 0040 00E0     	 b .L97
 1520              	.L96:
 1521              	 .loc 1 1554 0 discriminator 2
 1522 0042 7B68     	 ldr r3,[r7,#4]
 1523              	.L97:
 1524              	 .loc 1 1554 0 discriminator 4
 1525 0044 BB61     	 str r3,[r7,#24]
1555:../Dave/Generated/FREERTOS/tasks.c **** 
1556:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1557:../Dave/Generated/FREERTOS/tasks.c **** 
1558:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1559:../Dave/Generated/FREERTOS/tasks.c **** 			{
1560:../Dave/Generated/FREERTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1526              	 .loc 1 1560 0 is_stmt 1 discriminator 4
 1527 0046 BB69     	 ldr r3,[r7,#24]
 1528 0048 DB6C     	 ldr r3,[r3,#76]
 1529 004a 7B61     	 str r3,[r7,#20]
1561:../Dave/Generated/FREERTOS/tasks.c **** 			}
1562:../Dave/Generated/FREERTOS/tasks.c **** 			#else
1563:../Dave/Generated/FREERTOS/tasks.c **** 			{
1564:../Dave/Generated/FREERTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1565:../Dave/Generated/FREERTOS/tasks.c **** 			}
1566:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
1567:../Dave/Generated/FREERTOS/tasks.c **** 
1568:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1530              	 .loc 1 1568 0 discriminator 4
 1531 004c 7A69     	 ldr r2,[r7,#20]
 1532 004e 3B68     	 ldr r3,[r7]
 1533 0050 9A42     	 cmp r2,r3
 1534 0052 71D0     	 beq .L98
1569:../Dave/Generated/FREERTOS/tasks.c **** 			{
1570:../Dave/Generated/FREERTOS/tasks.c **** 				/* The priority change may have readied a task of higher
1571:../Dave/Generated/FREERTOS/tasks.c **** 				priority than the calling task. */
1572:../Dave/Generated/FREERTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1535              	 .loc 1 1572 0
 1536 0054 3A68     	 ldr r2,[r7]
 1537 0056 7B69     	 ldr r3,[r7,#20]
 1538 0058 9A42     	 cmp r2,r3
 1539 005a 0DD9     	 bls .L99
1573:../Dave/Generated/FREERTOS/tasks.c **** 				{
1574:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1540              	 .loc 1 1574 0
 1541 005c 394B     	 ldr r3,.L105
 1542 005e 1B68     	 ldr r3,[r3]
 1543 0060 BA69     	 ldr r2,[r7,#24]
 1544 0062 9A42     	 cmp r2,r3
 1545 0064 0FD0     	 beq .L100
1575:../Dave/Generated/FREERTOS/tasks.c **** 					{
1576:../Dave/Generated/FREERTOS/tasks.c **** 						/* The priority of a task other than the currently
1577:../Dave/Generated/FREERTOS/tasks.c **** 						running task is being raised.  Is the priority being
1578:../Dave/Generated/FREERTOS/tasks.c **** 						raised above that of the running task? */
1579:../Dave/Generated/FREERTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1546              	 .loc 1 1579 0
 1547 0066 374B     	 ldr r3,.L105
 1548 0068 1B68     	 ldr r3,[r3]
 1549 006a DA6A     	 ldr r2,[r3,#44]
 1550 006c 3B68     	 ldr r3,[r7]
 1551 006e 9A42     	 cmp r2,r3
 1552 0070 09D8     	 bhi .L100
1580:../Dave/Generated/FREERTOS/tasks.c **** 						{
1581:../Dave/Generated/FREERTOS/tasks.c **** 							xYieldRequired = pdTRUE;
 1553              	 .loc 1 1581 0
 1554 0072 0123     	 movs r3,#1
 1555 0074 FB61     	 str r3,[r7,#28]
 1556 0076 06E0     	 b .L100
 1557              	.L99:
1582:../Dave/Generated/FREERTOS/tasks.c **** 						}
1583:../Dave/Generated/FREERTOS/tasks.c **** 						else
1584:../Dave/Generated/FREERTOS/tasks.c **** 						{
1585:../Dave/Generated/FREERTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1586:../Dave/Generated/FREERTOS/tasks.c **** 						}
1587:../Dave/Generated/FREERTOS/tasks.c **** 					}
1588:../Dave/Generated/FREERTOS/tasks.c **** 					else
1589:../Dave/Generated/FREERTOS/tasks.c **** 					{
1590:../Dave/Generated/FREERTOS/tasks.c **** 						/* The priority of the running task is being raised,
1591:../Dave/Generated/FREERTOS/tasks.c **** 						but the running task must already be the highest
1592:../Dave/Generated/FREERTOS/tasks.c **** 						priority task able to run so no yield is required. */
1593:../Dave/Generated/FREERTOS/tasks.c **** 					}
1594:../Dave/Generated/FREERTOS/tasks.c **** 				}
1595:../Dave/Generated/FREERTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1558              	 .loc 1 1595 0
 1559 0078 324B     	 ldr r3,.L105
 1560 007a 1B68     	 ldr r3,[r3]
 1561 007c BA69     	 ldr r2,[r7,#24]
 1562 007e 9A42     	 cmp r2,r3
 1563 0080 01D1     	 bne .L100
1596:../Dave/Generated/FREERTOS/tasks.c **** 				{
1597:../Dave/Generated/FREERTOS/tasks.c **** 					/* Setting the priority of the running task down means
1598:../Dave/Generated/FREERTOS/tasks.c **** 					there may now be another task of higher priority that
1599:../Dave/Generated/FREERTOS/tasks.c **** 					is ready to execute. */
1600:../Dave/Generated/FREERTOS/tasks.c **** 					xYieldRequired = pdTRUE;
 1564              	 .loc 1 1600 0
 1565 0082 0123     	 movs r3,#1
 1566 0084 FB61     	 str r3,[r7,#28]
 1567              	.L100:
1601:../Dave/Generated/FREERTOS/tasks.c **** 				}
1602:../Dave/Generated/FREERTOS/tasks.c **** 				else
1603:../Dave/Generated/FREERTOS/tasks.c **** 				{
1604:../Dave/Generated/FREERTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1605:../Dave/Generated/FREERTOS/tasks.c **** 					require a yield as the running task must be above the
1606:../Dave/Generated/FREERTOS/tasks.c **** 					new priority of the task being modified. */
1607:../Dave/Generated/FREERTOS/tasks.c **** 				}
1608:../Dave/Generated/FREERTOS/tasks.c **** 
1609:../Dave/Generated/FREERTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1610:../Dave/Generated/FREERTOS/tasks.c **** 				before its uxPriority member is changed so the
1611:../Dave/Generated/FREERTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1612:../Dave/Generated/FREERTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1568              	 .loc 1 1612 0
 1569 0086 BB69     	 ldr r3,[r7,#24]
 1570 0088 DB6A     	 ldr r3,[r3,#44]
 1571 008a 3B61     	 str r3,[r7,#16]
1613:../Dave/Generated/FREERTOS/tasks.c **** 
1614:../Dave/Generated/FREERTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1615:../Dave/Generated/FREERTOS/tasks.c **** 				{
1616:../Dave/Generated/FREERTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1617:../Dave/Generated/FREERTOS/tasks.c **** 					currently using an inherited priority. */
1618:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1572              	 .loc 1 1618 0
 1573 008c BB69     	 ldr r3,[r7,#24]
 1574 008e DA6C     	 ldr r2,[r3,#76]
 1575 0090 BB69     	 ldr r3,[r7,#24]
 1576 0092 DB6A     	 ldr r3,[r3,#44]
 1577 0094 9A42     	 cmp r2,r3
 1578 0096 02D1     	 bne .L101
1619:../Dave/Generated/FREERTOS/tasks.c **** 					{
1620:../Dave/Generated/FREERTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1579              	 .loc 1 1620 0
 1580 0098 BB69     	 ldr r3,[r7,#24]
 1581 009a 3A68     	 ldr r2,[r7]
 1582 009c DA62     	 str r2,[r3,#44]
 1583              	.L101:
1621:../Dave/Generated/FREERTOS/tasks.c **** 					}
1622:../Dave/Generated/FREERTOS/tasks.c **** 					else
1623:../Dave/Generated/FREERTOS/tasks.c **** 					{
1624:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1625:../Dave/Generated/FREERTOS/tasks.c **** 					}
1626:../Dave/Generated/FREERTOS/tasks.c **** 
1627:../Dave/Generated/FREERTOS/tasks.c **** 					/* The base priority gets set whatever. */
1628:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1584              	 .loc 1 1628 0
 1585 009e BB69     	 ldr r3,[r7,#24]
 1586 00a0 3A68     	 ldr r2,[r7]
 1587 00a2 DA64     	 str r2,[r3,#76]
1629:../Dave/Generated/FREERTOS/tasks.c **** 				}
1630:../Dave/Generated/FREERTOS/tasks.c **** 				#else
1631:../Dave/Generated/FREERTOS/tasks.c **** 				{
1632:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1633:../Dave/Generated/FREERTOS/tasks.c **** 				}
1634:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
1635:../Dave/Generated/FREERTOS/tasks.c **** 
1636:../Dave/Generated/FREERTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
1637:../Dave/Generated/FREERTOS/tasks.c **** 				being used for anything else. */
1638:../Dave/Generated/FREERTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1588              	 .loc 1 1638 0
 1589 00a4 BB69     	 ldr r3,[r7,#24]
 1590 00a6 9B69     	 ldr r3,[r3,#24]
 1591 00a8 002B     	 cmp r3,#0
 1592 00aa 04DB     	 blt .L102
1639:../Dave/Generated/FREERTOS/tasks.c **** 				{
1640:../Dave/Generated/FREERTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1593              	 .loc 1 1640 0
 1594 00ac 3B68     	 ldr r3,[r7]
 1595 00ae C3F10602 	 rsb r2,r3,#6
 1596 00b2 BB69     	 ldr r3,[r7,#24]
 1597 00b4 9A61     	 str r2,[r3,#24]
 1598              	.L102:
1641:../Dave/Generated/FREERTOS/tasks.c **** 				}
1642:../Dave/Generated/FREERTOS/tasks.c **** 				else
1643:../Dave/Generated/FREERTOS/tasks.c **** 				{
1644:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1645:../Dave/Generated/FREERTOS/tasks.c **** 				}
1646:../Dave/Generated/FREERTOS/tasks.c **** 
1647:../Dave/Generated/FREERTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1648:../Dave/Generated/FREERTOS/tasks.c **** 				nothing more than change its priority variable. However, if
1649:../Dave/Generated/FREERTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1650:../Dave/Generated/FREERTOS/tasks.c **** 				in the list appropriate to its new priority. */
1651:../Dave/Generated/FREERTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1599              	 .loc 1 1651 0
 1600 00b6 BB69     	 ldr r3,[r7,#24]
 1601 00b8 5969     	 ldr r1,[r3,#20]
 1602 00ba 3A69     	 ldr r2,[r7,#16]
 1603 00bc 1346     	 mov r3,r2
 1604 00be 9B00     	 lsls r3,r3,#2
 1605 00c0 1344     	 add r3,r3,r2
 1606 00c2 9B00     	 lsls r3,r3,#2
 1607 00c4 204A     	 ldr r2,.L105+4
 1608 00c6 1344     	 add r3,r3,r2
 1609 00c8 9942     	 cmp r1,r3
 1610 00ca 2AD1     	 bne .L103
1652:../Dave/Generated/FREERTOS/tasks.c **** 				{
1653:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task is currently in its ready list - remove before
1654:../Dave/Generated/FREERTOS/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1655:../Dave/Generated/FREERTOS/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1656:../Dave/Generated/FREERTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1611              	 .loc 1 1656 0
 1612 00cc BB69     	 ldr r3,[r7,#24]
 1613 00ce 0433     	 adds r3,r3,#4
 1614 00d0 1846     	 mov r0,r3
 1615 00d2 FFF7FEFF 	 bl uxListRemove
 1616 00d6 0346     	 mov r3,r0
 1617 00d8 002B     	 cmp r3,#0
 1618 00da 09D1     	 bne .L104
1657:../Dave/Generated/FREERTOS/tasks.c **** 					{
1658:../Dave/Generated/FREERTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1659:../Dave/Generated/FREERTOS/tasks.c **** 						there is no need to check again and the port level
1660:../Dave/Generated/FREERTOS/tasks.c **** 						reset macro can be called directly. */
1661:../Dave/Generated/FREERTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1619              	 .loc 1 1661 0
 1620 00dc 3B69     	 ldr r3,[r7,#16]
 1621 00de 0122     	 movs r2,#1
 1622 00e0 02FA03F3 	 lsl r3,r2,r3
 1623 00e4 DA43     	 mvns r2,r3
 1624 00e6 194B     	 ldr r3,.L105+8
 1625 00e8 1B68     	 ldr r3,[r3]
 1626 00ea 1340     	 ands r3,r3,r2
 1627 00ec 174A     	 ldr r2,.L105+8
 1628 00ee 1360     	 str r3,[r2]
 1629              	.L104:
1662:../Dave/Generated/FREERTOS/tasks.c **** 					}
1663:../Dave/Generated/FREERTOS/tasks.c **** 					else
1664:../Dave/Generated/FREERTOS/tasks.c **** 					{
1665:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1666:../Dave/Generated/FREERTOS/tasks.c **** 					}
1667:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1630              	 .loc 1 1667 0
 1631 00f0 BB69     	 ldr r3,[r7,#24]
 1632 00f2 DB6A     	 ldr r3,[r3,#44]
 1633 00f4 1A46     	 mov r2,r3
 1634 00f6 0123     	 movs r3,#1
 1635 00f8 03FA02F2 	 lsl r2,r3,r2
 1636 00fc 134B     	 ldr r3,.L105+8
 1637 00fe 1B68     	 ldr r3,[r3]
 1638 0100 1343     	 orrs r3,r3,r2
 1639 0102 124A     	 ldr r2,.L105+8
 1640 0104 1360     	 str r3,[r2]
 1641 0106 BB69     	 ldr r3,[r7,#24]
 1642 0108 DA6A     	 ldr r2,[r3,#44]
 1643 010a 1346     	 mov r3,r2
 1644 010c 9B00     	 lsls r3,r3,#2
 1645 010e 1344     	 add r3,r3,r2
 1646 0110 9B00     	 lsls r3,r3,#2
 1647 0112 0D4A     	 ldr r2,.L105+4
 1648 0114 1A44     	 add r2,r2,r3
 1649 0116 BB69     	 ldr r3,[r7,#24]
 1650 0118 0433     	 adds r3,r3,#4
 1651 011a 1046     	 mov r0,r2
 1652 011c 1946     	 mov r1,r3
 1653 011e FFF7FEFF 	 bl vListInsertEnd
 1654              	.L103:
1668:../Dave/Generated/FREERTOS/tasks.c **** 				}
1669:../Dave/Generated/FREERTOS/tasks.c **** 				else
1670:../Dave/Generated/FREERTOS/tasks.c **** 				{
1671:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1672:../Dave/Generated/FREERTOS/tasks.c **** 				}
1673:../Dave/Generated/FREERTOS/tasks.c **** 
1674:../Dave/Generated/FREERTOS/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1655              	 .loc 1 1674 0
 1656 0122 FB69     	 ldr r3,[r7,#28]
 1657 0124 002B     	 cmp r3,#0
 1658 0126 07D0     	 beq .L98
1675:../Dave/Generated/FREERTOS/tasks.c **** 				{
1676:../Dave/Generated/FREERTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1659              	 .loc 1 1676 0
 1660 0128 094B     	 ldr r3,.L105+12
 1661 012a 4FF08052 	 mov r2,#268435456
 1662 012e 1A60     	 str r2,[r3]
 1663              	
 1664 0130 BFF34F8F 	 dsb
 1665              	
 1666              	
 1667 0134 BFF36F8F 	 isb
 1668              	
 1669              	 .thumb
 1670              	.L98:
1677:../Dave/Generated/FREERTOS/tasks.c **** 				}
1678:../Dave/Generated/FREERTOS/tasks.c **** 				else
1679:../Dave/Generated/FREERTOS/tasks.c **** 				{
1680:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1681:../Dave/Generated/FREERTOS/tasks.c **** 				}
1682:../Dave/Generated/FREERTOS/tasks.c **** 
1683:../Dave/Generated/FREERTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1684:../Dave/Generated/FREERTOS/tasks.c **** 				optimised task selection is not being used. */
1685:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1686:../Dave/Generated/FREERTOS/tasks.c **** 			}
1687:../Dave/Generated/FREERTOS/tasks.c **** 		}
1688:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1671              	 .loc 1 1688 0
 1672 0138 FFF7FEFF 	 bl vPortExitCritical
1689:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1673              	 .loc 1 1689 0
 1674 013c 2037     	 adds r7,r7,#32
 1675              	.LCFI48:
 1676              	 .cfi_def_cfa_offset 8
 1677 013e BD46     	 mov sp,r7
 1678              	.LCFI49:
 1679              	 .cfi_def_cfa_register 13
 1680              	 
 1681 0140 80BD     	 pop {r7,pc}
 1682              	.L106:
 1683 0142 00BF     	 .align 2
 1684              	.L105:
 1685 0144 00000000 	 .word pxCurrentTCB
 1686 0148 00000000 	 .word pxReadyTasksLists
 1687 014c 00000000 	 .word uxTopReadyPriority
 1688 0150 04ED00E0 	 .word -536810236
 1689              	 .cfi_endproc
 1690              	.LFE146:
 1692              	 .section .text.vTaskSuspend,"ax",%progbits
 1693              	 .align 2
 1694              	 .global vTaskSuspend
 1695              	 .thumb
 1696              	 .thumb_func
 1698              	vTaskSuspend:
 1699              	.LFB147:
1690:../Dave/Generated/FREERTOS/tasks.c **** 
1691:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1692:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1693:../Dave/Generated/FREERTOS/tasks.c **** 
1694:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1695:../Dave/Generated/FREERTOS/tasks.c **** 
1696:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1697:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1700              	 .loc 1 1697 0
 1701              	 .cfi_startproc
 1702              	 
 1703              	 
 1704 0000 80B5     	 push {r7,lr}
 1705              	.LCFI50:
 1706              	 .cfi_def_cfa_offset 8
 1707              	 .cfi_offset 7,-8
 1708              	 .cfi_offset 14,-4
 1709 0002 84B0     	 sub sp,sp,#16
 1710              	.LCFI51:
 1711              	 .cfi_def_cfa_offset 24
 1712 0004 00AF     	 add r7,sp,#0
 1713              	.LCFI52:
 1714              	 .cfi_def_cfa_register 7
 1715 0006 7860     	 str r0,[r7,#4]
1698:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1699:../Dave/Generated/FREERTOS/tasks.c **** 
1700:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 1716              	 .loc 1 1700 0
 1717 0008 FFF7FEFF 	 bl vPortEnterCritical
1701:../Dave/Generated/FREERTOS/tasks.c **** 		{
1702:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1703:../Dave/Generated/FREERTOS/tasks.c **** 			being suspended. */
1704:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1718              	 .loc 1 1704 0
 1719 000c 7B68     	 ldr r3,[r7,#4]
 1720 000e 002B     	 cmp r3,#0
 1721 0010 02D1     	 bne .L108
 1722              	 .loc 1 1704 0 is_stmt 0 discriminator 1
 1723 0012 3B4B     	 ldr r3,.L121
 1724 0014 1B68     	 ldr r3,[r3]
 1725 0016 00E0     	 b .L109
 1726              	.L108:
 1727              	 .loc 1 1704 0 discriminator 2
 1728 0018 7B68     	 ldr r3,[r7,#4]
 1729              	.L109:
 1730              	 .loc 1 1704 0 discriminator 4
 1731 001a FB60     	 str r3,[r7,#12]
1705:../Dave/Generated/FREERTOS/tasks.c **** 
1706:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1707:../Dave/Generated/FREERTOS/tasks.c **** 
1708:../Dave/Generated/FREERTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1709:../Dave/Generated/FREERTOS/tasks.c **** 			suspended list. */
1710:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1732              	 .loc 1 1710 0 is_stmt 1 discriminator 4
 1733 001c FB68     	 ldr r3,[r7,#12]
 1734 001e 0433     	 adds r3,r3,#4
 1735 0020 1846     	 mov r0,r3
 1736 0022 FFF7FEFF 	 bl uxListRemove
 1737 0026 0346     	 mov r3,r0
 1738 0028 002B     	 cmp r3,#0
 1739 002a 15D1     	 bne .L110
1711:../Dave/Generated/FREERTOS/tasks.c **** 			{
1712:../Dave/Generated/FREERTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1740              	 .loc 1 1712 0
 1741 002c FB68     	 ldr r3,[r7,#12]
 1742 002e DA6A     	 ldr r2,[r3,#44]
 1743 0030 3449     	 ldr r1,.L121+4
 1744 0032 1346     	 mov r3,r2
 1745 0034 9B00     	 lsls r3,r3,#2
 1746 0036 1344     	 add r3,r3,r2
 1747 0038 9B00     	 lsls r3,r3,#2
 1748 003a 0B44     	 add r3,r3,r1
 1749 003c 1B68     	 ldr r3,[r3]
 1750 003e 002B     	 cmp r3,#0
 1751 0040 0AD1     	 bne .L110
 1752              	 .loc 1 1712 0 is_stmt 0 discriminator 1
 1753 0042 FB68     	 ldr r3,[r7,#12]
 1754 0044 DB6A     	 ldr r3,[r3,#44]
 1755 0046 1A46     	 mov r2,r3
 1756 0048 0123     	 movs r3,#1
 1757 004a 9340     	 lsls r3,r3,r2
 1758 004c DA43     	 mvns r2,r3
 1759 004e 2E4B     	 ldr r3,.L121+8
 1760 0050 1B68     	 ldr r3,[r3]
 1761 0052 1340     	 ands r3,r3,r2
 1762 0054 2C4A     	 ldr r2,.L121+8
 1763 0056 1360     	 str r3,[r2]
 1764              	.L110:
1713:../Dave/Generated/FREERTOS/tasks.c **** 			}
1714:../Dave/Generated/FREERTOS/tasks.c **** 			else
1715:../Dave/Generated/FREERTOS/tasks.c **** 			{
1716:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1717:../Dave/Generated/FREERTOS/tasks.c **** 			}
1718:../Dave/Generated/FREERTOS/tasks.c **** 
1719:../Dave/Generated/FREERTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1720:../Dave/Generated/FREERTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1765              	 .loc 1 1720 0 is_stmt 1
 1766 0058 FB68     	 ldr r3,[r7,#12]
 1767 005a 9B6A     	 ldr r3,[r3,#40]
 1768 005c 002B     	 cmp r3,#0
 1769 005e 04D0     	 beq .L112
1721:../Dave/Generated/FREERTOS/tasks.c **** 			{
1722:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1770              	 .loc 1 1722 0
 1771 0060 FB68     	 ldr r3,[r7,#12]
 1772 0062 1833     	 adds r3,r3,#24
 1773 0064 1846     	 mov r0,r3
 1774 0066 FFF7FEFF 	 bl uxListRemove
 1775              	.L112:
1723:../Dave/Generated/FREERTOS/tasks.c **** 			}
1724:../Dave/Generated/FREERTOS/tasks.c **** 			else
1725:../Dave/Generated/FREERTOS/tasks.c **** 			{
1726:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1727:../Dave/Generated/FREERTOS/tasks.c **** 			}
1728:../Dave/Generated/FREERTOS/tasks.c **** 
1729:../Dave/Generated/FREERTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1776              	 .loc 1 1729 0
 1777 006a FB68     	 ldr r3,[r7,#12]
 1778 006c 0433     	 adds r3,r3,#4
 1779 006e 2748     	 ldr r0,.L121+12
 1780 0070 1946     	 mov r1,r3
 1781 0072 FFF7FEFF 	 bl vListInsertEnd
1730:../Dave/Generated/FREERTOS/tasks.c **** 
1731:../Dave/Generated/FREERTOS/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1732:../Dave/Generated/FREERTOS/tasks.c **** 			{
1733:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1782              	 .loc 1 1733 0
 1783 0076 FB68     	 ldr r3,[r7,#12]
 1784 0078 93F86C30 	 ldrb r3,[r3,#108]
 1785 007c DBB2     	 uxtb r3,r3
 1786 007e 012B     	 cmp r3,#1
 1787 0080 03D1     	 bne .L113
1734:../Dave/Generated/FREERTOS/tasks.c **** 				{
1735:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1736:../Dave/Generated/FREERTOS/tasks.c **** 					now suspended, so no notification was received. */
1737:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1788              	 .loc 1 1737 0
 1789 0082 FB68     	 ldr r3,[r7,#12]
 1790 0084 0022     	 movs r2,#0
 1791 0086 83F86C20 	 strb r2,[r3,#108]
 1792              	.L113:
1738:../Dave/Generated/FREERTOS/tasks.c **** 				}
1739:../Dave/Generated/FREERTOS/tasks.c **** 			}
1740:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
1741:../Dave/Generated/FREERTOS/tasks.c **** 		}
1742:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1793              	 .loc 1 1742 0
 1794 008a FFF7FEFF 	 bl vPortExitCritical
1743:../Dave/Generated/FREERTOS/tasks.c **** 
1744:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1795              	 .loc 1 1744 0
 1796 008e 204B     	 ldr r3,.L121+16
 1797 0090 1B68     	 ldr r3,[r3]
 1798 0092 002B     	 cmp r3,#0
 1799 0094 05D0     	 beq .L114
1745:../Dave/Generated/FREERTOS/tasks.c **** 		{
1746:../Dave/Generated/FREERTOS/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1747:../Dave/Generated/FREERTOS/tasks.c **** 			task that is now in the Suspended state. */
1748:../Dave/Generated/FREERTOS/tasks.c **** 			taskENTER_CRITICAL();
 1800              	 .loc 1 1748 0
 1801 0096 FFF7FEFF 	 bl vPortEnterCritical
1749:../Dave/Generated/FREERTOS/tasks.c **** 			{
1750:../Dave/Generated/FREERTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
 1802              	 .loc 1 1750 0
 1803 009a FFF7FEFF 	 bl prvResetNextTaskUnblockTime
1751:../Dave/Generated/FREERTOS/tasks.c **** 			}
1752:../Dave/Generated/FREERTOS/tasks.c **** 			taskEXIT_CRITICAL();
 1804              	 .loc 1 1752 0
 1805 009e FFF7FEFF 	 bl vPortExitCritical
 1806              	.L114:
1753:../Dave/Generated/FREERTOS/tasks.c **** 		}
1754:../Dave/Generated/FREERTOS/tasks.c **** 		else
1755:../Dave/Generated/FREERTOS/tasks.c **** 		{
1756:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1757:../Dave/Generated/FREERTOS/tasks.c **** 		}
1758:../Dave/Generated/FREERTOS/tasks.c **** 
1759:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1807              	 .loc 1 1759 0
 1808 00a2 174B     	 ldr r3,.L121
 1809 00a4 1B68     	 ldr r3,[r3]
 1810 00a6 FA68     	 ldr r2,[r7,#12]
 1811 00a8 9A42     	 cmp r2,r3
 1812 00aa 26D1     	 bne .L107
1760:../Dave/Generated/FREERTOS/tasks.c **** 		{
1761:../Dave/Generated/FREERTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1813              	 .loc 1 1761 0
 1814 00ac 184B     	 ldr r3,.L121+16
 1815 00ae 1B68     	 ldr r3,[r3]
 1816 00b0 002B     	 cmp r3,#0
 1817 00b2 16D0     	 beq .L116
1762:../Dave/Generated/FREERTOS/tasks.c **** 			{
1763:../Dave/Generated/FREERTOS/tasks.c **** 				/* The current task has just been suspended. */
1764:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1818              	 .loc 1 1764 0
 1819 00b4 174B     	 ldr r3,.L121+20
 1820 00b6 1B68     	 ldr r3,[r3]
 1821 00b8 002B     	 cmp r3,#0
 1822 00ba 09D0     	 beq .L117
 1823              	.LBB137:
 1824              	.LBB138:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 1825              	 .loc 2 195 0 discriminator 1
 1826              	
 1827 00bc 4FF0FC03 	 mov r3,#252
 1828 00c0 83F31188 	 msr basepri,r3
 1829 00c4 BFF36F8F 	 isb 
 1830 00c8 BFF34F8F 	 dsb 
 1831              	
 1832              	
 1833              	 .thumb
 1834 00cc BB60     	 str r3,[r7,#8]
 1835              	.L118:
 1836              	.LBE138:
 1837              	.LBE137:
 1838              	 .loc 1 1764 0 discriminator 1
 1839 00ce FEE7     	 b .L118
 1840              	.L117:
1765:../Dave/Generated/FREERTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1841              	 .loc 1 1765 0
 1842 00d0 114B     	 ldr r3,.L121+24
 1843 00d2 4FF08052 	 mov r2,#268435456
 1844 00d6 1A60     	 str r2,[r3]
 1845              	
 1846 00d8 BFF34F8F 	 dsb
 1847              	
 1848              	
 1849 00dc BFF36F8F 	 isb
 1850              	
 1851              	 .thumb
 1852 00e0 0BE0     	 b .L107
 1853              	.L116:
1766:../Dave/Generated/FREERTOS/tasks.c **** 			}
1767:../Dave/Generated/FREERTOS/tasks.c **** 			else
1768:../Dave/Generated/FREERTOS/tasks.c **** 			{
1769:../Dave/Generated/FREERTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1770:../Dave/Generated/FREERTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1771:../Dave/Generated/FREERTOS/tasks.c **** 				must be adjusted to point to a different task. */
1772:../Dave/Generated/FREERTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
 1854              	 .loc 1 1772 0
 1855 00e2 0A4B     	 ldr r3,.L121+12
 1856 00e4 1A68     	 ldr r2,[r3]
 1857 00e6 0D4B     	 ldr r3,.L121+28
 1858 00e8 1B68     	 ldr r3,[r3]
 1859 00ea 9A42     	 cmp r2,r3
 1860 00ec 03D1     	 bne .L120
1773:../Dave/Generated/FREERTOS/tasks.c **** 				{
1774:../Dave/Generated/FREERTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1775:../Dave/Generated/FREERTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1776:../Dave/Generated/FREERTOS/tasks.c **** 					be set to point to it no matter what its relative priority
1777:../Dave/Generated/FREERTOS/tasks.c **** 					is. */
1778:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB = NULL;
 1861              	 .loc 1 1778 0
 1862 00ee 044B     	 ldr r3,.L121
 1863 00f0 0022     	 movs r2,#0
 1864 00f2 1A60     	 str r2,[r3]
 1865 00f4 01E0     	 b .L107
 1866              	.L120:
1779:../Dave/Generated/FREERTOS/tasks.c **** 				}
1780:../Dave/Generated/FREERTOS/tasks.c **** 				else
1781:../Dave/Generated/FREERTOS/tasks.c **** 				{
1782:../Dave/Generated/FREERTOS/tasks.c **** 					vTaskSwitchContext();
 1867              	 .loc 1 1782 0
 1868 00f6 FFF7FEFF 	 bl vTaskSwitchContext
 1869              	.L107:
1783:../Dave/Generated/FREERTOS/tasks.c **** 				}
1784:../Dave/Generated/FREERTOS/tasks.c **** 			}
1785:../Dave/Generated/FREERTOS/tasks.c **** 		}
1786:../Dave/Generated/FREERTOS/tasks.c **** 		else
1787:../Dave/Generated/FREERTOS/tasks.c **** 		{
1788:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1789:../Dave/Generated/FREERTOS/tasks.c **** 		}
1790:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1870              	 .loc 1 1790 0
 1871 00fa 1037     	 adds r7,r7,#16
 1872              	.LCFI53:
 1873              	 .cfi_def_cfa_offset 8
 1874 00fc BD46     	 mov sp,r7
 1875              	.LCFI54:
 1876              	 .cfi_def_cfa_register 13
 1877              	 
 1878 00fe 80BD     	 pop {r7,pc}
 1879              	.L122:
 1880              	 .align 2
 1881              	.L121:
 1882 0100 00000000 	 .word pxCurrentTCB
 1883 0104 00000000 	 .word pxReadyTasksLists
 1884 0108 00000000 	 .word uxTopReadyPriority
 1885 010c 00000000 	 .word xSuspendedTaskList
 1886 0110 00000000 	 .word xSchedulerRunning
 1887 0114 00000000 	 .word uxSchedulerSuspended
 1888 0118 04ED00E0 	 .word -536810236
 1889 011c 00000000 	 .word uxCurrentNumberOfTasks
 1890              	 .cfi_endproc
 1891              	.LFE147:
 1893              	 .section .text.prvTaskIsTaskSuspended,"ax",%progbits
 1894              	 .align 2
 1895              	 .thumb
 1896              	 .thumb_func
 1898              	prvTaskIsTaskSuspended:
 1899              	.LFB148:
1791:../Dave/Generated/FREERTOS/tasks.c **** 
1792:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1793:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1794:../Dave/Generated/FREERTOS/tasks.c **** 
1795:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1796:../Dave/Generated/FREERTOS/tasks.c **** 
1797:../Dave/Generated/FREERTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1798:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1900              	 .loc 1 1798 0
 1901              	 .cfi_startproc
 1902              	 
 1903              	 
 1904              	 
 1905 0000 80B4     	 push {r7}
 1906              	.LCFI55:
 1907              	 .cfi_def_cfa_offset 4
 1908              	 .cfi_offset 7,-4
 1909 0002 87B0     	 sub sp,sp,#28
 1910              	.LCFI56:
 1911              	 .cfi_def_cfa_offset 32
 1912 0004 00AF     	 add r7,sp,#0
 1913              	.LCFI57:
 1914              	 .cfi_def_cfa_register 7
 1915 0006 7860     	 str r0,[r7,#4]
1799:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1916              	 .loc 1 1799 0
 1917 0008 0023     	 movs r3,#0
 1918 000a 7B61     	 str r3,[r7,#20]
1800:../Dave/Generated/FREERTOS/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1919              	 .loc 1 1800 0
 1920 000c 7B68     	 ldr r3,[r7,#4]
 1921 000e 3B61     	 str r3,[r7,#16]
1801:../Dave/Generated/FREERTOS/tasks.c **** 
1802:../Dave/Generated/FREERTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1803:../Dave/Generated/FREERTOS/tasks.c **** 		section. */
1804:../Dave/Generated/FREERTOS/tasks.c **** 
1805:../Dave/Generated/FREERTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1806:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTask );
 1922              	 .loc 1 1806 0
 1923 0010 7B68     	 ldr r3,[r7,#4]
 1924 0012 002B     	 cmp r3,#0
 1925 0014 09D1     	 bne .L124
 1926              	.LBB139:
 1927              	.LBB140:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 1928              	 .loc 2 195 0 discriminator 1
 1929              	
 1930 0016 4FF0FC03 	 mov r3,#252
 1931 001a 83F31188 	 msr basepri,r3
 1932 001e BFF36F8F 	 isb 
 1933 0022 BFF34F8F 	 dsb 
 1934              	
 1935              	
 1936              	 .thumb
 1937 0026 FB60     	 str r3,[r7,#12]
 1938              	.L125:
 1939              	.LBE140:
 1940              	.LBE139:
 1941              	 .loc 1 1806 0 discriminator 1
 1942 0028 FEE7     	 b .L125
 1943              	.L124:
1807:../Dave/Generated/FREERTOS/tasks.c **** 
1808:../Dave/Generated/FREERTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1809:../Dave/Generated/FREERTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1944              	 .loc 1 1809 0
 1945 002a 3B69     	 ldr r3,[r7,#16]
 1946 002c 5B69     	 ldr r3,[r3,#20]
 1947 002e 0A4A     	 ldr r2,.L128
 1948 0030 9342     	 cmp r3,r2
 1949 0032 0AD1     	 bne .L126
1810:../Dave/Generated/FREERTOS/tasks.c **** 		{
1811:../Dave/Generated/FREERTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1812:../Dave/Generated/FREERTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1950              	 .loc 1 1812 0
 1951 0034 3B69     	 ldr r3,[r7,#16]
 1952 0036 9B6A     	 ldr r3,[r3,#40]
 1953 0038 084A     	 ldr r2,.L128+4
 1954 003a 9342     	 cmp r3,r2
 1955 003c 05D0     	 beq .L126
1813:../Dave/Generated/FREERTOS/tasks.c **** 			{
1814:../Dave/Generated/FREERTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1815:../Dave/Generated/FREERTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
1816:../Dave/Generated/FREERTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 1956              	 .loc 1 1816 0
 1957 003e 3B69     	 ldr r3,[r7,#16]
 1958 0040 9B6A     	 ldr r3,[r3,#40]
 1959 0042 002B     	 cmp r3,#0
 1960 0044 01D1     	 bne .L126
1817:../Dave/Generated/FREERTOS/tasks.c **** 				{
1818:../Dave/Generated/FREERTOS/tasks.c **** 					xReturn = pdTRUE;
 1961              	 .loc 1 1818 0
 1962 0046 0123     	 movs r3,#1
 1963 0048 7B61     	 str r3,[r7,#20]
 1964              	.L126:
1819:../Dave/Generated/FREERTOS/tasks.c **** 				}
1820:../Dave/Generated/FREERTOS/tasks.c **** 				else
1821:../Dave/Generated/FREERTOS/tasks.c **** 				{
1822:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1823:../Dave/Generated/FREERTOS/tasks.c **** 				}
1824:../Dave/Generated/FREERTOS/tasks.c **** 			}
1825:../Dave/Generated/FREERTOS/tasks.c **** 			else
1826:../Dave/Generated/FREERTOS/tasks.c **** 			{
1827:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1828:../Dave/Generated/FREERTOS/tasks.c **** 			}
1829:../Dave/Generated/FREERTOS/tasks.c **** 		}
1830:../Dave/Generated/FREERTOS/tasks.c **** 		else
1831:../Dave/Generated/FREERTOS/tasks.c **** 		{
1832:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1833:../Dave/Generated/FREERTOS/tasks.c **** 		}
1834:../Dave/Generated/FREERTOS/tasks.c **** 
1835:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 1965              	 .loc 1 1835 0
 1966 004a 7B69     	 ldr r3,[r7,#20]
1836:../Dave/Generated/FREERTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1967              	 .loc 1 1836 0
 1968 004c 1846     	 mov r0,r3
 1969 004e 1C37     	 adds r7,r7,#28
 1970              	.LCFI58:
 1971              	 .cfi_def_cfa_offset 4
 1972 0050 BD46     	 mov sp,r7
 1973              	.LCFI59:
 1974              	 .cfi_def_cfa_register 13
 1975              	 
 1976 0052 5DF8047B 	 ldr r7,[sp],#4
 1977              	.LCFI60:
 1978              	 .cfi_restore 7
 1979              	 .cfi_def_cfa_offset 0
 1980 0056 7047     	 bx lr
 1981              	.L129:
 1982              	 .align 2
 1983              	.L128:
 1984 0058 00000000 	 .word xSuspendedTaskList
 1985 005c 00000000 	 .word xPendingReadyList
 1986              	 .cfi_endproc
 1987              	.LFE148:
 1989              	 .section .text.vTaskResume,"ax",%progbits
 1990              	 .align 2
 1991              	 .global vTaskResume
 1992              	 .thumb
 1993              	 .thumb_func
 1995              	vTaskResume:
 1996              	.LFB149:
1837:../Dave/Generated/FREERTOS/tasks.c **** 
1838:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1839:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1840:../Dave/Generated/FREERTOS/tasks.c **** 
1841:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1842:../Dave/Generated/FREERTOS/tasks.c **** 
1843:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1844:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1997              	 .loc 1 1844 0
 1998              	 .cfi_startproc
 1999              	 
 2000              	 
 2001 0000 80B5     	 push {r7,lr}
 2002              	.LCFI61:
 2003              	 .cfi_def_cfa_offset 8
 2004              	 .cfi_offset 7,-8
 2005              	 .cfi_offset 14,-4
 2006 0002 84B0     	 sub sp,sp,#16
 2007              	.LCFI62:
 2008              	 .cfi_def_cfa_offset 24
 2009 0004 00AF     	 add r7,sp,#0
 2010              	.LCFI63:
 2011              	 .cfi_def_cfa_register 7
 2012 0006 7860     	 str r0,[r7,#4]
1845:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2013              	 .loc 1 1845 0
 2014 0008 7B68     	 ldr r3,[r7,#4]
 2015 000a FB60     	 str r3,[r7,#12]
1846:../Dave/Generated/FREERTOS/tasks.c **** 
1847:../Dave/Generated/FREERTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1848:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToResume );
 2016              	 .loc 1 1848 0
 2017 000c 7B68     	 ldr r3,[r7,#4]
 2018 000e 002B     	 cmp r3,#0
 2019 0010 09D1     	 bne .L131
 2020              	.LBB141:
 2021              	.LBB142:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2022              	 .loc 2 195 0 discriminator 1
 2023              	
 2024 0012 4FF0FC03 	 mov r3,#252
 2025 0016 83F31188 	 msr basepri,r3
 2026 001a BFF36F8F 	 isb 
 2027 001e BFF34F8F 	 dsb 
 2028              	
 2029              	
 2030              	 .thumb
 2031 0022 BB60     	 str r3,[r7,#8]
 2032              	.L132:
 2033              	.LBE142:
 2034              	.LBE141:
 2035              	 .loc 1 1848 0 discriminator 1
 2036 0024 FEE7     	 b .L132
 2037              	.L131:
1849:../Dave/Generated/FREERTOS/tasks.c **** 
1850:../Dave/Generated/FREERTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1851:../Dave/Generated/FREERTOS/tasks.c **** 		currently executing task. */
1852:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 2038              	 .loc 1 1852 0
 2039 0026 214B     	 ldr r3,.L135
 2040 0028 1B68     	 ldr r3,[r3]
 2041 002a FA68     	 ldr r2,[r7,#12]
 2042 002c 9A42     	 cmp r2,r3
 2043 002e 39D0     	 beq .L130
 2044              	 .loc 1 1852 0 is_stmt 0 discriminator 1
 2045 0030 FB68     	 ldr r3,[r7,#12]
 2046 0032 002B     	 cmp r3,#0
 2047 0034 36D0     	 beq .L130
1853:../Dave/Generated/FREERTOS/tasks.c **** 		{
1854:../Dave/Generated/FREERTOS/tasks.c **** 			taskENTER_CRITICAL();
 2048              	 .loc 1 1854 0 is_stmt 1
 2049 0036 FFF7FEFF 	 bl vPortEnterCritical
1855:../Dave/Generated/FREERTOS/tasks.c **** 			{
1856:../Dave/Generated/FREERTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2050              	 .loc 1 1856 0
 2051 003a F868     	 ldr r0,[r7,#12]
 2052 003c FFF7FEFF 	 bl prvTaskIsTaskSuspended
 2053 0040 0346     	 mov r3,r0
 2054 0042 002B     	 cmp r3,#0
 2055 0044 2CD0     	 beq .L134
1857:../Dave/Generated/FREERTOS/tasks.c **** 				{
1858:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1859:../Dave/Generated/FREERTOS/tasks.c **** 
1860:../Dave/Generated/FREERTOS/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1861:../Dave/Generated/FREERTOS/tasks.c **** 					suspended because this is inside a critical section. */
1862:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 2056              	 .loc 1 1862 0
 2057 0046 FB68     	 ldr r3,[r7,#12]
 2058 0048 0433     	 adds r3,r3,#4
 2059 004a 1846     	 mov r0,r3
 2060 004c FFF7FEFF 	 bl uxListRemove
1863:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2061              	 .loc 1 1863 0
 2062 0050 FB68     	 ldr r3,[r7,#12]
 2063 0052 DB6A     	 ldr r3,[r3,#44]
 2064 0054 1A46     	 mov r2,r3
 2065 0056 0123     	 movs r3,#1
 2066 0058 03FA02F2 	 lsl r2,r3,r2
 2067 005c 144B     	 ldr r3,.L135+4
 2068 005e 1B68     	 ldr r3,[r3]
 2069 0060 1343     	 orrs r3,r3,r2
 2070 0062 134A     	 ldr r2,.L135+4
 2071 0064 1360     	 str r3,[r2]
 2072 0066 FB68     	 ldr r3,[r7,#12]
 2073 0068 DA6A     	 ldr r2,[r3,#44]
 2074 006a 1346     	 mov r3,r2
 2075 006c 9B00     	 lsls r3,r3,#2
 2076 006e 1344     	 add r3,r3,r2
 2077 0070 9B00     	 lsls r3,r3,#2
 2078 0072 104A     	 ldr r2,.L135+8
 2079 0074 1A44     	 add r2,r2,r3
 2080 0076 FB68     	 ldr r3,[r7,#12]
 2081 0078 0433     	 adds r3,r3,#4
 2082 007a 1046     	 mov r0,r2
 2083 007c 1946     	 mov r1,r3
 2084 007e FFF7FEFF 	 bl vListInsertEnd
1864:../Dave/Generated/FREERTOS/tasks.c **** 
1865:../Dave/Generated/FREERTOS/tasks.c **** 					/* A higher priority task may have just been resumed. */
1866:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2085              	 .loc 1 1866 0
 2086 0082 FB68     	 ldr r3,[r7,#12]
 2087 0084 DA6A     	 ldr r2,[r3,#44]
 2088 0086 094B     	 ldr r3,.L135
 2089 0088 1B68     	 ldr r3,[r3]
 2090 008a DB6A     	 ldr r3,[r3,#44]
 2091 008c 9A42     	 cmp r2,r3
 2092 008e 07D3     	 bcc .L134
1867:../Dave/Generated/FREERTOS/tasks.c **** 					{
1868:../Dave/Generated/FREERTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1869:../Dave/Generated/FREERTOS/tasks.c **** 						but will leave the lists in the correct state for the
1870:../Dave/Generated/FREERTOS/tasks.c **** 						next yield. */
1871:../Dave/Generated/FREERTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 2093              	 .loc 1 1871 0
 2094 0090 094B     	 ldr r3,.L135+12
 2095 0092 4FF08052 	 mov r2,#268435456
 2096 0096 1A60     	 str r2,[r3]
 2097              	
 2098 0098 BFF34F8F 	 dsb
 2099              	
 2100              	
 2101 009c BFF36F8F 	 isb
 2102              	
 2103              	 .thumb
 2104              	.L134:
1872:../Dave/Generated/FREERTOS/tasks.c **** 					}
1873:../Dave/Generated/FREERTOS/tasks.c **** 					else
1874:../Dave/Generated/FREERTOS/tasks.c **** 					{
1875:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1876:../Dave/Generated/FREERTOS/tasks.c **** 					}
1877:../Dave/Generated/FREERTOS/tasks.c **** 				}
1878:../Dave/Generated/FREERTOS/tasks.c **** 				else
1879:../Dave/Generated/FREERTOS/tasks.c **** 				{
1880:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1881:../Dave/Generated/FREERTOS/tasks.c **** 				}
1882:../Dave/Generated/FREERTOS/tasks.c **** 			}
1883:../Dave/Generated/FREERTOS/tasks.c **** 			taskEXIT_CRITICAL();
 2105              	 .loc 1 1883 0
 2106 00a0 FFF7FEFF 	 bl vPortExitCritical
 2107              	.L130:
1884:../Dave/Generated/FREERTOS/tasks.c **** 		}
1885:../Dave/Generated/FREERTOS/tasks.c **** 		else
1886:../Dave/Generated/FREERTOS/tasks.c **** 		{
1887:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1888:../Dave/Generated/FREERTOS/tasks.c **** 		}
1889:../Dave/Generated/FREERTOS/tasks.c **** 	}
 2108              	 .loc 1 1889 0
 2109 00a4 1037     	 adds r7,r7,#16
 2110              	.LCFI64:
 2111              	 .cfi_def_cfa_offset 8
 2112 00a6 BD46     	 mov sp,r7
 2113              	.LCFI65:
 2114              	 .cfi_def_cfa_register 13
 2115              	 
 2116 00a8 80BD     	 pop {r7,pc}
 2117              	.L136:
 2118 00aa 00BF     	 .align 2
 2119              	.L135:
 2120 00ac 00000000 	 .word pxCurrentTCB
 2121 00b0 00000000 	 .word uxTopReadyPriority
 2122 00b4 00000000 	 .word pxReadyTasksLists
 2123 00b8 04ED00E0 	 .word -536810236
 2124              	 .cfi_endproc
 2125              	.LFE149:
 2127              	 .section .text.xTaskResumeFromISR,"ax",%progbits
 2128              	 .align 2
 2129              	 .global xTaskResumeFromISR
 2130              	 .thumb
 2131              	 .thumb_func
 2133              	xTaskResumeFromISR:
 2134              	.LFB150:
1890:../Dave/Generated/FREERTOS/tasks.c **** 
1891:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1892:../Dave/Generated/FREERTOS/tasks.c **** 
1893:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1894:../Dave/Generated/FREERTOS/tasks.c **** 
1895:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1896:../Dave/Generated/FREERTOS/tasks.c **** 
1897:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1898:../Dave/Generated/FREERTOS/tasks.c **** 	{
 2135              	 .loc 1 1898 0
 2136              	 .cfi_startproc
 2137              	 
 2138              	 
 2139 0000 80B5     	 push {r7,lr}
 2140              	.LCFI66:
 2141              	 .cfi_def_cfa_offset 8
 2142              	 .cfi_offset 7,-8
 2143              	 .cfi_offset 14,-4
 2144 0002 8AB0     	 sub sp,sp,#40
 2145              	.LCFI67:
 2146              	 .cfi_def_cfa_offset 48
 2147 0004 00AF     	 add r7,sp,#0
 2148              	.LCFI68:
 2149              	 .cfi_def_cfa_register 7
 2150 0006 7860     	 str r0,[r7,#4]
1899:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2151              	 .loc 1 1899 0
 2152 0008 0023     	 movs r3,#0
 2153 000a 7B62     	 str r3,[r7,#36]
1900:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2154              	 .loc 1 1900 0
 2155 000c 7B68     	 ldr r3,[r7,#4]
 2156 000e 3B62     	 str r3,[r7,#32]
1901:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1902:../Dave/Generated/FREERTOS/tasks.c **** 
1903:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToResume );
 2157              	 .loc 1 1903 0
 2158 0010 7B68     	 ldr r3,[r7,#4]
 2159 0012 002B     	 cmp r3,#0
 2160 0014 09D1     	 bne .L138
 2161              	.LBB143:
 2162              	.LBB144:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2163              	 .loc 2 195 0 discriminator 1
 2164              	
 2165 0016 4FF0FC03 	 mov r3,#252
 2166 001a 83F31188 	 msr basepri,r3
 2167 001e BFF36F8F 	 isb 
 2168 0022 BFF34F8F 	 dsb 
 2169              	
 2170              	
 2171              	 .thumb
 2172 0026 BB61     	 str r3,[r7,#24]
 2173              	.L139:
 2174              	.LBE144:
 2175              	.LBE143:
 2176              	 .loc 1 1903 0 discriminator 1
 2177 0028 FEE7     	 b .L139
 2178              	.L138:
1904:../Dave/Generated/FREERTOS/tasks.c **** 
1905:../Dave/Generated/FREERTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1906:../Dave/Generated/FREERTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1907:../Dave/Generated/FREERTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1908:../Dave/Generated/FREERTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1909:../Dave/Generated/FREERTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1910:../Dave/Generated/FREERTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1911:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1912:../Dave/Generated/FREERTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1913:../Dave/Generated/FREERTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1914:../Dave/Generated/FREERTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1915:../Dave/Generated/FREERTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1916:../Dave/Generated/FREERTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1917:../Dave/Generated/FREERTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1918:../Dave/Generated/FREERTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1919:../Dave/Generated/FREERTOS/tasks.c **** 		provided on the following link:
1920:../Dave/Generated/FREERTOS/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1921:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2179              	 .loc 1 1921 0
 2180 002a FFF7FEFF 	 bl vPortValidateInterruptPriority
 2181              	.LBB145:
 2182              	.LBB146:
 211:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2183              	 .loc 2 211 0
 2184              	
 2185 002e EFF31182 	 mrs r2,basepri
 2186 0032 4FF0FC03 	 mov r3,#252
 2187 0036 83F31188 	 msr basepri,r3
 2188 003a BFF36F8F 	 isb 
 2189 003e BFF34F8F 	 dsb 
 2190              	
 2191              	
 2192              	 .thumb
 2193 0042 7A61     	 str r2,[r7,#20]
 2194 0044 3B61     	 str r3,[r7,#16]
 223:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 2195              	 .loc 2 223 0
 2196 0046 7B69     	 ldr r3,[r7,#20]
 2197              	.LBE146:
 2198              	.LBE145:
1922:../Dave/Generated/FREERTOS/tasks.c **** 
1923:../Dave/Generated/FREERTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2199              	 .loc 1 1923 0
 2200 0048 FB61     	 str r3,[r7,#28]
1924:../Dave/Generated/FREERTOS/tasks.c **** 		{
1925:../Dave/Generated/FREERTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2201              	 .loc 1 1925 0
 2202 004a 386A     	 ldr r0,[r7,#32]
 2203 004c FFF7FEFF 	 bl prvTaskIsTaskSuspended
 2204 0050 0346     	 mov r3,r0
 2205 0052 002B     	 cmp r3,#0
 2206 0054 31D0     	 beq .L141
1926:../Dave/Generated/FREERTOS/tasks.c **** 			{
1927:../Dave/Generated/FREERTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1928:../Dave/Generated/FREERTOS/tasks.c **** 
1929:../Dave/Generated/FREERTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
1930:../Dave/Generated/FREERTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2207              	 .loc 1 1930 0
 2208 0056 1E4B     	 ldr r3,.L146
 2209 0058 1B68     	 ldr r3,[r3]
 2210 005a 002B     	 cmp r3,#0
 2211 005c 27D1     	 bne .L142
1931:../Dave/Generated/FREERTOS/tasks.c **** 				{
1932:../Dave/Generated/FREERTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1933:../Dave/Generated/FREERTOS/tasks.c **** 					suspended list to the ready list directly. */
1934:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2212              	 .loc 1 1934 0
 2213 005e 3B6A     	 ldr r3,[r7,#32]
 2214 0060 DA6A     	 ldr r2,[r3,#44]
 2215 0062 1C4B     	 ldr r3,.L146+4
 2216 0064 1B68     	 ldr r3,[r3]
 2217 0066 DB6A     	 ldr r3,[r3,#44]
 2218 0068 9A42     	 cmp r2,r3
 2219 006a 01D3     	 bcc .L143
1935:../Dave/Generated/FREERTOS/tasks.c **** 					{
1936:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldRequired = pdTRUE;
 2220              	 .loc 1 1936 0
 2221 006c 0123     	 movs r3,#1
 2222 006e 7B62     	 str r3,[r7,#36]
 2223              	.L143:
1937:../Dave/Generated/FREERTOS/tasks.c **** 					}
1938:../Dave/Generated/FREERTOS/tasks.c **** 					else
1939:../Dave/Generated/FREERTOS/tasks.c **** 					{
1940:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1941:../Dave/Generated/FREERTOS/tasks.c **** 					}
1942:../Dave/Generated/FREERTOS/tasks.c **** 
1943:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2224              	 .loc 1 1943 0
 2225 0070 3B6A     	 ldr r3,[r7,#32]
 2226 0072 0433     	 adds r3,r3,#4
 2227 0074 1846     	 mov r0,r3
 2228 0076 FFF7FEFF 	 bl uxListRemove
1944:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2229              	 .loc 1 1944 0
 2230 007a 3B6A     	 ldr r3,[r7,#32]
 2231 007c DB6A     	 ldr r3,[r3,#44]
 2232 007e 1A46     	 mov r2,r3
 2233 0080 0123     	 movs r3,#1
 2234 0082 03FA02F2 	 lsl r2,r3,r2
 2235 0086 144B     	 ldr r3,.L146+8
 2236 0088 1B68     	 ldr r3,[r3]
 2237 008a 1343     	 orrs r3,r3,r2
 2238 008c 124A     	 ldr r2,.L146+8
 2239 008e 1360     	 str r3,[r2]
 2240 0090 3B6A     	 ldr r3,[r7,#32]
 2241 0092 DA6A     	 ldr r2,[r3,#44]
 2242 0094 1346     	 mov r3,r2
 2243 0096 9B00     	 lsls r3,r3,#2
 2244 0098 1344     	 add r3,r3,r2
 2245 009a 9B00     	 lsls r3,r3,#2
 2246 009c 0F4A     	 ldr r2,.L146+12
 2247 009e 1A44     	 add r2,r2,r3
 2248 00a0 3B6A     	 ldr r3,[r7,#32]
 2249 00a2 0433     	 adds r3,r3,#4
 2250 00a4 1046     	 mov r0,r2
 2251 00a6 1946     	 mov r1,r3
 2252 00a8 FFF7FEFF 	 bl vListInsertEnd
 2253 00ac 05E0     	 b .L141
 2254              	.L142:
1945:../Dave/Generated/FREERTOS/tasks.c **** 				}
1946:../Dave/Generated/FREERTOS/tasks.c **** 				else
1947:../Dave/Generated/FREERTOS/tasks.c **** 				{
1948:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1949:../Dave/Generated/FREERTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1950:../Dave/Generated/FREERTOS/tasks.c **** 					unsuspended. */
1951:../Dave/Generated/FREERTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2255              	 .loc 1 1951 0
 2256 00ae 3B6A     	 ldr r3,[r7,#32]
 2257 00b0 1833     	 adds r3,r3,#24
 2258 00b2 0B48     	 ldr r0,.L146+16
 2259 00b4 1946     	 mov r1,r3
 2260 00b6 FFF7FEFF 	 bl vListInsertEnd
 2261              	.L141:
 2262 00ba FB69     	 ldr r3,[r7,#28]
 2263 00bc FB60     	 str r3,[r7,#12]
 2264              	.LBB147:
 2265              	.LBB148:
 2266              	 .loc 2 229 0
 2267 00be FB68     	 ldr r3,[r7,#12]
 2268              	
 2269 00c0 83F31188 	 msr basepri,r3
 2270              	
 2271              	 .thumb
 2272              	.LBE148:
 2273              	.LBE147:
1952:../Dave/Generated/FREERTOS/tasks.c **** 				}
1953:../Dave/Generated/FREERTOS/tasks.c **** 			}
1954:../Dave/Generated/FREERTOS/tasks.c **** 			else
1955:../Dave/Generated/FREERTOS/tasks.c **** 			{
1956:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1957:../Dave/Generated/FREERTOS/tasks.c **** 			}
1958:../Dave/Generated/FREERTOS/tasks.c **** 		}
1959:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1960:../Dave/Generated/FREERTOS/tasks.c **** 
1961:../Dave/Generated/FREERTOS/tasks.c **** 		return xYieldRequired;
 2274              	 .loc 1 1961 0
 2275 00c4 7B6A     	 ldr r3,[r7,#36]
1962:../Dave/Generated/FREERTOS/tasks.c **** 	}
 2276              	 .loc 1 1962 0
 2277 00c6 1846     	 mov r0,r3
 2278 00c8 2837     	 adds r7,r7,#40
 2279              	.LCFI69:
 2280              	 .cfi_def_cfa_offset 8
 2281 00ca BD46     	 mov sp,r7
 2282              	.LCFI70:
 2283              	 .cfi_def_cfa_register 13
 2284              	 
 2285 00cc 80BD     	 pop {r7,pc}
 2286              	.L147:
 2287 00ce 00BF     	 .align 2
 2288              	.L146:
 2289 00d0 00000000 	 .word uxSchedulerSuspended
 2290 00d4 00000000 	 .word pxCurrentTCB
 2291 00d8 00000000 	 .word uxTopReadyPriority
 2292 00dc 00000000 	 .word pxReadyTasksLists
 2293 00e0 00000000 	 .word xPendingReadyList
 2294              	 .cfi_endproc
 2295              	.LFE150:
 2297              	 .section .rodata
 2298              	 .align 2
 2299              	.LC0:
 2300 0000 49444C45 	 .ascii "IDLE\000"
 2300      00
 2301              	 .section .text.vTaskStartScheduler,"ax",%progbits
 2302              	 .align 2
 2303              	 .global vTaskStartScheduler
 2304              	 .thumb
 2305              	 .thumb_func
 2307              	vTaskStartScheduler:
 2308              	.LFB151:
1963:../Dave/Generated/FREERTOS/tasks.c **** 
1964:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1965:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1966:../Dave/Generated/FREERTOS/tasks.c **** 
1967:../Dave/Generated/FREERTOS/tasks.c **** void vTaskStartScheduler( void )
1968:../Dave/Generated/FREERTOS/tasks.c **** {
 2309              	 .loc 1 1968 0
 2310              	 .cfi_startproc
 2311              	 
 2312              	 
 2313 0000 80B5     	 push {r7,lr}
 2314              	.LCFI71:
 2315              	 .cfi_def_cfa_offset 8
 2316              	 .cfi_offset 7,-8
 2317              	 .cfi_offset 14,-4
 2318 0002 86B0     	 sub sp,sp,#24
 2319              	.LCFI72:
 2320              	 .cfi_def_cfa_offset 32
 2321 0004 02AF     	 add r7,sp,#8
 2322              	.LCFI73:
 2323              	 .cfi_def_cfa 7,24
1969:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xReturn;
1970:../Dave/Generated/FREERTOS/tasks.c **** 
1971:../Dave/Generated/FREERTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1972:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1973:../Dave/Generated/FREERTOS/tasks.c **** 	{
1974:../Dave/Generated/FREERTOS/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1975:../Dave/Generated/FREERTOS/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1976:../Dave/Generated/FREERTOS/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1977:../Dave/Generated/FREERTOS/tasks.c **** 
1978:../Dave/Generated/FREERTOS/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1979:../Dave/Generated/FREERTOS/tasks.c **** 		address of the RAM then create the idle task. */
1980:../Dave/Generated/FREERTOS/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1981:../Dave/Generated/FREERTOS/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1982:../Dave/Generated/FREERTOS/tasks.c **** 												configIDLE_TASK_NAME,
1983:../Dave/Generated/FREERTOS/tasks.c **** 												ulIdleTaskStackSize,
1984:../Dave/Generated/FREERTOS/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1985:../Dave/Generated/FREERTOS/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1986:../Dave/Generated/FREERTOS/tasks.c **** 												pxIdleTaskStackBuffer,
1987:../Dave/Generated/FREERTOS/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1988:../Dave/Generated/FREERTOS/tasks.c **** 
1989:../Dave/Generated/FREERTOS/tasks.c **** 		if( xIdleTaskHandle != NULL )
1990:../Dave/Generated/FREERTOS/tasks.c **** 		{
1991:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdPASS;
1992:../Dave/Generated/FREERTOS/tasks.c **** 		}
1993:../Dave/Generated/FREERTOS/tasks.c **** 		else
1994:../Dave/Generated/FREERTOS/tasks.c **** 		{
1995:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdFAIL;
1996:../Dave/Generated/FREERTOS/tasks.c **** 		}
1997:../Dave/Generated/FREERTOS/tasks.c **** 	}
1998:../Dave/Generated/FREERTOS/tasks.c **** 	#else
1999:../Dave/Generated/FREERTOS/tasks.c **** 	{
2000:../Dave/Generated/FREERTOS/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2001:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 2324              	 .loc 1 2001 0
 2325 0006 0023     	 movs r3,#0
 2326 0008 0093     	 str r3,[sp]
 2327 000a 1C4B     	 ldr r3,.L153
 2328 000c 0193     	 str r3,[sp,#4]
 2329 000e 1C48     	 ldr r0,.L153+4
 2330 0010 1C49     	 ldr r1,.L153+8
 2331 0012 8222     	 movs r2,#130
 2332 0014 0023     	 movs r3,#0
 2333 0016 FFF7FEFF 	 bl xTaskCreate
 2334 001a F860     	 str r0,[r7,#12]
2002:../Dave/Generated/FREERTOS/tasks.c **** 								configIDLE_TASK_NAME,
2003:../Dave/Generated/FREERTOS/tasks.c **** 								configMINIMAL_STACK_SIZE,
2004:../Dave/Generated/FREERTOS/tasks.c **** 								( void * ) NULL,
2005:../Dave/Generated/FREERTOS/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2006:../Dave/Generated/FREERTOS/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2007:../Dave/Generated/FREERTOS/tasks.c **** 	}
2008:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2009:../Dave/Generated/FREERTOS/tasks.c **** 
2010:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2011:../Dave/Generated/FREERTOS/tasks.c **** 	{
2012:../Dave/Generated/FREERTOS/tasks.c **** 		if( xReturn == pdPASS )
 2335              	 .loc 1 2012 0
 2336 001c FB68     	 ldr r3,[r7,#12]
 2337 001e 012B     	 cmp r3,#1
 2338 0020 02D1     	 bne .L149
2013:../Dave/Generated/FREERTOS/tasks.c **** 		{
2014:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 2339              	 .loc 1 2014 0
 2340 0022 FFF7FEFF 	 bl xTimerCreateTimerTask
 2341 0026 F860     	 str r0,[r7,#12]
 2342              	.L149:
2015:../Dave/Generated/FREERTOS/tasks.c **** 		}
2016:../Dave/Generated/FREERTOS/tasks.c **** 		else
2017:../Dave/Generated/FREERTOS/tasks.c **** 		{
2018:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2019:../Dave/Generated/FREERTOS/tasks.c **** 		}
2020:../Dave/Generated/FREERTOS/tasks.c **** 	}
2021:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
2022:../Dave/Generated/FREERTOS/tasks.c **** 
2023:../Dave/Generated/FREERTOS/tasks.c **** 	if( xReturn == pdPASS )
 2343              	 .loc 1 2023 0
 2344 0028 FB68     	 ldr r3,[r7,#12]
 2345 002a 012B     	 cmp r3,#1
 2346 002c 15D1     	 bne .L150
 2347              	.LBB149:
 2348              	.LBB150:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2349              	 .loc 2 195 0
 2350              	
 2351 002e 4FF0FC03 	 mov r3,#252
 2352 0032 83F31188 	 msr basepri,r3
 2353 0036 BFF36F8F 	 isb 
 2354 003a BFF34F8F 	 dsb 
 2355              	
 2356              	
 2357              	 .thumb
 2358 003e BB60     	 str r3,[r7,#8]
 2359              	.LBE150:
 2360              	.LBE149:
2024:../Dave/Generated/FREERTOS/tasks.c **** 	{
2025:../Dave/Generated/FREERTOS/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2026:../Dave/Generated/FREERTOS/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2027:../Dave/Generated/FREERTOS/tasks.c **** 		the only macro called by the function. */
2028:../Dave/Generated/FREERTOS/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2029:../Dave/Generated/FREERTOS/tasks.c **** 		{
2030:../Dave/Generated/FREERTOS/tasks.c **** 			freertos_tasks_c_additions_init();
2031:../Dave/Generated/FREERTOS/tasks.c **** 		}
2032:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
2033:../Dave/Generated/FREERTOS/tasks.c **** 
2034:../Dave/Generated/FREERTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2035:../Dave/Generated/FREERTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2036:../Dave/Generated/FREERTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2037:../Dave/Generated/FREERTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2038:../Dave/Generated/FREERTOS/tasks.c **** 		starts to run. */
2039:../Dave/Generated/FREERTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
2040:../Dave/Generated/FREERTOS/tasks.c **** 
2041:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2042:../Dave/Generated/FREERTOS/tasks.c **** 		{
2043:../Dave/Generated/FREERTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2044:../Dave/Generated/FREERTOS/tasks.c **** 			structure specific to the task that will run first. */
2045:../Dave/Generated/FREERTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2046:../Dave/Generated/FREERTOS/tasks.c **** 		}
2047:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2048:../Dave/Generated/FREERTOS/tasks.c **** 
2049:../Dave/Generated/FREERTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2361              	 .loc 1 2049 0
 2362 0040 114B     	 ldr r3,.L153+12
 2363 0042 4FF0FF32 	 mov r2,#-1
 2364 0046 1A60     	 str r2,[r3]
2050:../Dave/Generated/FREERTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2365              	 .loc 1 2050 0
 2366 0048 104B     	 ldr r3,.L153+16
 2367 004a 0122     	 movs r2,#1
 2368 004c 1A60     	 str r2,[r3]
2051:../Dave/Generated/FREERTOS/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2369              	 .loc 1 2051 0
 2370 004e 104B     	 ldr r3,.L153+20
 2371 0050 0022     	 movs r2,#0
 2372 0052 1A60     	 str r2,[r3]
2052:../Dave/Generated/FREERTOS/tasks.c **** 
2053:../Dave/Generated/FREERTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2054:../Dave/Generated/FREERTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2055:../Dave/Generated/FREERTOS/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2056:../Dave/Generated/FREERTOS/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2057:../Dave/Generated/FREERTOS/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2058:../Dave/Generated/FREERTOS/tasks.c **** 		FreeRTOSConfig.h file. */
2059:../Dave/Generated/FREERTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2060:../Dave/Generated/FREERTOS/tasks.c **** 
2061:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2062:../Dave/Generated/FREERTOS/tasks.c **** 
2063:../Dave/Generated/FREERTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2064:../Dave/Generated/FREERTOS/tasks.c **** 		portable interface. */
2065:../Dave/Generated/FREERTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2373              	 .loc 1 2065 0
 2374 0054 FFF7FEFF 	 bl xPortStartScheduler
 2375 0058 0DE0     	 b .L148
 2376              	.L150:
2066:../Dave/Generated/FREERTOS/tasks.c **** 		{
2067:../Dave/Generated/FREERTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2068:../Dave/Generated/FREERTOS/tasks.c **** 			function will not return. */
2069:../Dave/Generated/FREERTOS/tasks.c **** 		}
2070:../Dave/Generated/FREERTOS/tasks.c **** 		else
2071:../Dave/Generated/FREERTOS/tasks.c **** 		{
2072:../Dave/Generated/FREERTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2073:../Dave/Generated/FREERTOS/tasks.c **** 		}
2074:../Dave/Generated/FREERTOS/tasks.c **** 	}
2075:../Dave/Generated/FREERTOS/tasks.c **** 	else
2076:../Dave/Generated/FREERTOS/tasks.c **** 	{
2077:../Dave/Generated/FREERTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2078:../Dave/Generated/FREERTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2079:../Dave/Generated/FREERTOS/tasks.c **** 		or the timer task. */
2080:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 2377              	 .loc 1 2080 0
 2378 005a FB68     	 ldr r3,[r7,#12]
 2379 005c B3F1FF3F 	 cmp r3,#-1
 2380 0060 09D1     	 bne .L148
 2381              	.LBB151:
 2382              	.LBB152:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2383              	 .loc 2 195 0 discriminator 1
 2384              	
 2385 0062 4FF0FC03 	 mov r3,#252
 2386 0066 83F31188 	 msr basepri,r3
 2387 006a BFF36F8F 	 isb 
 2388 006e BFF34F8F 	 dsb 
 2389              	
 2390              	
 2391              	 .thumb
 2392 0072 7B60     	 str r3,[r7,#4]
 2393              	.L152:
 2394              	.LBE152:
 2395              	.LBE151:
 2396              	 .loc 1 2080 0 discriminator 2
 2397 0074 FEE7     	 b .L152
 2398              	.L148:
2081:../Dave/Generated/FREERTOS/tasks.c **** 	}
2082:../Dave/Generated/FREERTOS/tasks.c **** 
2083:../Dave/Generated/FREERTOS/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2084:../Dave/Generated/FREERTOS/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2085:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) xIdleTaskHandle;
2086:../Dave/Generated/FREERTOS/tasks.c **** }
 2399              	 .loc 1 2086 0
 2400 0076 1037     	 adds r7,r7,#16
 2401              	.LCFI74:
 2402              	 .cfi_def_cfa_offset 8
 2403 0078 BD46     	 mov sp,r7
 2404              	.LCFI75:
 2405              	 .cfi_def_cfa_register 13
 2406              	 
 2407 007a 80BD     	 pop {r7,pc}
 2408              	.L154:
 2409              	 .align 2
 2410              	.L153:
 2411 007c 00000000 	 .word xIdleTaskHandle
 2412 0080 00000000 	 .word prvIdleTask
 2413 0084 00000000 	 .word .LC0
 2414 0088 00000000 	 .word xNextTaskUnblockTime
 2415 008c 00000000 	 .word xSchedulerRunning
 2416 0090 00000000 	 .word xTickCount
 2417              	 .cfi_endproc
 2418              	.LFE151:
 2420              	 .section .text.vTaskEndScheduler,"ax",%progbits
 2421              	 .align 2
 2422              	 .global vTaskEndScheduler
 2423              	 .thumb
 2424              	 .thumb_func
 2426              	vTaskEndScheduler:
 2427              	.LFB152:
2087:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2088:../Dave/Generated/FREERTOS/tasks.c **** 
2089:../Dave/Generated/FREERTOS/tasks.c **** void vTaskEndScheduler( void )
2090:../Dave/Generated/FREERTOS/tasks.c **** {
 2428              	 .loc 1 2090 0
 2429              	 .cfi_startproc
 2430              	 
 2431              	 
 2432 0000 80B5     	 push {r7,lr}
 2433              	.LCFI76:
 2434              	 .cfi_def_cfa_offset 8
 2435              	 .cfi_offset 7,-8
 2436              	 .cfi_offset 14,-4
 2437 0002 82B0     	 sub sp,sp,#8
 2438              	.LCFI77:
 2439              	 .cfi_def_cfa_offset 16
 2440 0004 00AF     	 add r7,sp,#0
 2441              	.LCFI78:
 2442              	 .cfi_def_cfa_register 7
 2443              	.LBB153:
 2444              	.LBB154:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2445              	 .loc 2 195 0
 2446              	
 2447 0006 4FF0FC03 	 mov r3,#252
 2448 000a 83F31188 	 msr basepri,r3
 2449 000e BFF36F8F 	 isb 
 2450 0012 BFF34F8F 	 dsb 
 2451              	
 2452              	
 2453              	 .thumb
 2454 0016 7B60     	 str r3,[r7,#4]
 2455              	.LBE154:
 2456              	.LBE153:
2091:../Dave/Generated/FREERTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2092:../Dave/Generated/FREERTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2093:../Dave/Generated/FREERTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2094:../Dave/Generated/FREERTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
2095:../Dave/Generated/FREERTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2457              	 .loc 1 2095 0
 2458 0018 034B     	 ldr r3,.L156
 2459 001a 0022     	 movs r2,#0
 2460 001c 1A60     	 str r2,[r3]
2096:../Dave/Generated/FREERTOS/tasks.c **** 	vPortEndScheduler();
 2461              	 .loc 1 2096 0
 2462 001e FFF7FEFF 	 bl vPortEndScheduler
2097:../Dave/Generated/FREERTOS/tasks.c **** }
 2463              	 .loc 1 2097 0
 2464 0022 0837     	 adds r7,r7,#8
 2465              	.LCFI79:
 2466              	 .cfi_def_cfa_offset 8
 2467 0024 BD46     	 mov sp,r7
 2468              	.LCFI80:
 2469              	 .cfi_def_cfa_register 13
 2470              	 
 2471 0026 80BD     	 pop {r7,pc}
 2472              	.L157:
 2473              	 .align 2
 2474              	.L156:
 2475 0028 00000000 	 .word xSchedulerRunning
 2476              	 .cfi_endproc
 2477              	.LFE152:
 2479              	 .section .text.vTaskSuspendAll,"ax",%progbits
 2480              	 .align 2
 2481              	 .global vTaskSuspendAll
 2482              	 .thumb
 2483              	 .thumb_func
 2485              	vTaskSuspendAll:
 2486              	.LFB153:
2098:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2099:../Dave/Generated/FREERTOS/tasks.c **** 
2100:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSuspendAll( void )
2101:../Dave/Generated/FREERTOS/tasks.c **** {
 2487              	 .loc 1 2101 0
 2488              	 .cfi_startproc
 2489              	 
 2490              	 
 2491              	 
 2492 0000 80B4     	 push {r7}
 2493              	.LCFI81:
 2494              	 .cfi_def_cfa_offset 4
 2495              	 .cfi_offset 7,-4
 2496 0002 00AF     	 add r7,sp,#0
 2497              	.LCFI82:
 2498              	 .cfi_def_cfa_register 7
2102:../Dave/Generated/FREERTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
2103:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2104:../Dave/Generated/FREERTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2105:../Dave/Generated/FREERTOS/tasks.c **** 	http://goo.gl/wu4acr */
2106:../Dave/Generated/FREERTOS/tasks.c **** 	++uxSchedulerSuspended;
 2499              	 .loc 1 2106 0
 2500 0004 044B     	 ldr r3,.L159
 2501 0006 1B68     	 ldr r3,[r3]
 2502 0008 0133     	 adds r3,r3,#1
 2503 000a 034A     	 ldr r2,.L159
 2504 000c 1360     	 str r3,[r2]
2107:../Dave/Generated/FREERTOS/tasks.c **** 	portMEMORY_BARRIER();
 2505              	 .loc 1 2107 0
2108:../Dave/Generated/FREERTOS/tasks.c **** }
 2506              	 .loc 1 2108 0
 2507 000e BD46     	 mov sp,r7
 2508              	.LCFI83:
 2509              	 .cfi_def_cfa_register 13
 2510              	 
 2511 0010 5DF8047B 	 ldr r7,[sp],#4
 2512              	.LCFI84:
 2513              	 .cfi_restore 7
 2514              	 .cfi_def_cfa_offset 0
 2515 0014 7047     	 bx lr
 2516              	.L160:
 2517 0016 00BF     	 .align 2
 2518              	.L159:
 2519 0018 00000000 	 .word uxSchedulerSuspended
 2520              	 .cfi_endproc
 2521              	.LFE153:
 2523              	 .section .text.xTaskResumeAll,"ax",%progbits
 2524              	 .align 2
 2525              	 .global xTaskResumeAll
 2526              	 .thumb
 2527              	 .thumb_func
 2529              	xTaskResumeAll:
 2530              	.LFB154:
2109:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2110:../Dave/Generated/FREERTOS/tasks.c **** 
2111:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:../Dave/Generated/FREERTOS/tasks.c **** 
2113:../Dave/Generated/FREERTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2114:../Dave/Generated/FREERTOS/tasks.c **** 	{
2115:../Dave/Generated/FREERTOS/tasks.c **** 	TickType_t xReturn;
2116:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:../Dave/Generated/FREERTOS/tasks.c **** 
2118:../Dave/Generated/FREERTOS/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2119:../Dave/Generated/FREERTOS/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:../Dave/Generated/FREERTOS/tasks.c **** 		task that are in the Ready state, even though the idle task is
2121:../Dave/Generated/FREERTOS/tasks.c **** 		running. */
2122:../Dave/Generated/FREERTOS/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:../Dave/Generated/FREERTOS/tasks.c **** 		{
2124:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:../Dave/Generated/FREERTOS/tasks.c **** 			{
2126:../Dave/Generated/FREERTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2127:../Dave/Generated/FREERTOS/tasks.c **** 			}
2128:../Dave/Generated/FREERTOS/tasks.c **** 		}
2129:../Dave/Generated/FREERTOS/tasks.c **** 		#else
2130:../Dave/Generated/FREERTOS/tasks.c **** 		{
2131:../Dave/Generated/FREERTOS/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:../Dave/Generated/FREERTOS/tasks.c **** 
2133:../Dave/Generated/FREERTOS/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2134:../Dave/Generated/FREERTOS/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2135:../Dave/Generated/FREERTOS/tasks.c **** 			significant bit are set then there are tasks that have a priority
2136:../Dave/Generated/FREERTOS/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2137:../Dave/Generated/FREERTOS/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2138:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2139:../Dave/Generated/FREERTOS/tasks.c **** 			{
2140:../Dave/Generated/FREERTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2141:../Dave/Generated/FREERTOS/tasks.c **** 			}
2142:../Dave/Generated/FREERTOS/tasks.c **** 		}
2143:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
2144:../Dave/Generated/FREERTOS/tasks.c **** 
2145:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:../Dave/Generated/FREERTOS/tasks.c **** 		{
2147:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = 0;
2148:../Dave/Generated/FREERTOS/tasks.c **** 		}
2149:../Dave/Generated/FREERTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:../Dave/Generated/FREERTOS/tasks.c **** 		{
2151:../Dave/Generated/FREERTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2152:../Dave/Generated/FREERTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2153:../Dave/Generated/FREERTOS/tasks.c **** 			processed. */
2154:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = 0;
2155:../Dave/Generated/FREERTOS/tasks.c **** 		}
2156:../Dave/Generated/FREERTOS/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:../Dave/Generated/FREERTOS/tasks.c **** 		{
2158:../Dave/Generated/FREERTOS/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2159:../Dave/Generated/FREERTOS/tasks.c **** 			idle priority.  This path can only be reached if
2160:../Dave/Generated/FREERTOS/tasks.c **** 			configUSE_PREEMPTION is 0. */
2161:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = 0;
2162:../Dave/Generated/FREERTOS/tasks.c **** 		}
2163:../Dave/Generated/FREERTOS/tasks.c **** 		else
2164:../Dave/Generated/FREERTOS/tasks.c **** 		{
2165:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2166:../Dave/Generated/FREERTOS/tasks.c **** 		}
2167:../Dave/Generated/FREERTOS/tasks.c **** 
2168:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
2169:../Dave/Generated/FREERTOS/tasks.c **** 	}
2170:../Dave/Generated/FREERTOS/tasks.c **** 
2171:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2173:../Dave/Generated/FREERTOS/tasks.c **** 
2174:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:../Dave/Generated/FREERTOS/tasks.c **** {
 2531              	 .loc 1 2175 0
 2532              	 .cfi_startproc
 2533              	 
 2534              	 
 2535 0000 80B5     	 push {r7,lr}
 2536              	.LCFI85:
 2537              	 .cfi_def_cfa_offset 8
 2538              	 .cfi_offset 7,-8
 2539              	 .cfi_offset 14,-4
 2540 0002 84B0     	 sub sp,sp,#16
 2541              	.LCFI86:
 2542              	 .cfi_def_cfa_offset 24
 2543 0004 00AF     	 add r7,sp,#0
 2544              	.LCFI87:
 2545              	 .cfi_def_cfa_register 7
2176:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxTCB = NULL;
 2546              	 .loc 1 2176 0
 2547 0006 0023     	 movs r3,#0
 2548 0008 FB60     	 str r3,[r7,#12]
2177:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2549              	 .loc 1 2177 0
 2550 000a 0023     	 movs r3,#0
 2551 000c BB60     	 str r3,[r7,#8]
2178:../Dave/Generated/FREERTOS/tasks.c **** 
2179:../Dave/Generated/FREERTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2180:../Dave/Generated/FREERTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
2181:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2552              	 .loc 1 2181 0
 2553 000e 424B     	 ldr r3,.L172
 2554 0010 1B68     	 ldr r3,[r3]
 2555 0012 002B     	 cmp r3,#0
 2556 0014 09D1     	 bne .L162
 2557              	.LBB155:
 2558              	.LBB156:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2559              	 .loc 2 195 0 discriminator 1
 2560              	
 2561 0016 4FF0FC03 	 mov r3,#252
 2562 001a 83F31188 	 msr basepri,r3
 2563 001e BFF36F8F 	 isb 
 2564 0022 BFF34F8F 	 dsb 
 2565              	
 2566              	
 2567              	 .thumb
 2568 0026 3B60     	 str r3,[r7]
 2569              	.L163:
 2570              	.LBE156:
 2571              	.LBE155:
 2572              	 .loc 1 2181 0 discriminator 1
 2573 0028 FEE7     	 b .L163
 2574              	.L162:
2182:../Dave/Generated/FREERTOS/tasks.c **** 
2183:../Dave/Generated/FREERTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2184:../Dave/Generated/FREERTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2185:../Dave/Generated/FREERTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2186:../Dave/Generated/FREERTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2187:../Dave/Generated/FREERTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
2188:../Dave/Generated/FREERTOS/tasks.c **** 	taskENTER_CRITICAL();
 2575              	 .loc 1 2188 0
 2576 002a FFF7FEFF 	 bl vPortEnterCritical
2189:../Dave/Generated/FREERTOS/tasks.c **** 	{
2190:../Dave/Generated/FREERTOS/tasks.c **** 		--uxSchedulerSuspended;
 2577              	 .loc 1 2190 0
 2578 002e 3A4B     	 ldr r3,.L172
 2579 0030 1B68     	 ldr r3,[r3]
 2580 0032 013B     	 subs r3,r3,#1
 2581 0034 384A     	 ldr r2,.L172
 2582 0036 1360     	 str r3,[r2]
2191:../Dave/Generated/FREERTOS/tasks.c **** 
2192:../Dave/Generated/FREERTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2583              	 .loc 1 2192 0
 2584 0038 374B     	 ldr r3,.L172
 2585 003a 1B68     	 ldr r3,[r3]
 2586 003c 002B     	 cmp r3,#0
 2587 003e 63D1     	 bne .L164
2193:../Dave/Generated/FREERTOS/tasks.c **** 		{
2194:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2588              	 .loc 1 2194 0
 2589 0040 364B     	 ldr r3,.L172+4
 2590 0042 1B68     	 ldr r3,[r3]
 2591 0044 002B     	 cmp r3,#0
 2592 0046 5FD0     	 beq .L164
2195:../Dave/Generated/FREERTOS/tasks.c **** 			{
2196:../Dave/Generated/FREERTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
2197:../Dave/Generated/FREERTOS/tasks.c **** 				appropriate ready list. */
2198:../Dave/Generated/FREERTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2593              	 .loc 1 2198 0
 2594 0048 30E0     	 b .L165
 2595              	.L166:
2199:../Dave/Generated/FREERTOS/tasks.c **** 				{
2200:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2596              	 .loc 1 2200 0
 2597 004a 354B     	 ldr r3,.L172+8
 2598 004c DB68     	 ldr r3,[r3,#12]
 2599 004e DB68     	 ldr r3,[r3,#12]
 2600 0050 FB60     	 str r3,[r7,#12]
2201:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2601              	 .loc 1 2201 0
 2602 0052 FB68     	 ldr r3,[r7,#12]
 2603 0054 1833     	 adds r3,r3,#24
 2604 0056 1846     	 mov r0,r3
 2605 0058 FFF7FEFF 	 bl uxListRemove
2202:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2606              	 .loc 1 2202 0
 2607 005c FB68     	 ldr r3,[r7,#12]
 2608 005e 0433     	 adds r3,r3,#4
 2609 0060 1846     	 mov r0,r3
 2610 0062 FFF7FEFF 	 bl uxListRemove
2203:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2611              	 .loc 1 2203 0
 2612 0066 FB68     	 ldr r3,[r7,#12]
 2613 0068 DB6A     	 ldr r3,[r3,#44]
 2614 006a 1A46     	 mov r2,r3
 2615 006c 0123     	 movs r3,#1
 2616 006e 03FA02F2 	 lsl r2,r3,r2
 2617 0072 2C4B     	 ldr r3,.L172+12
 2618 0074 1B68     	 ldr r3,[r3]
 2619 0076 1343     	 orrs r3,r3,r2
 2620 0078 2A4A     	 ldr r2,.L172+12
 2621 007a 1360     	 str r3,[r2]
 2622 007c FB68     	 ldr r3,[r7,#12]
 2623 007e DA6A     	 ldr r2,[r3,#44]
 2624 0080 1346     	 mov r3,r2
 2625 0082 9B00     	 lsls r3,r3,#2
 2626 0084 1344     	 add r3,r3,r2
 2627 0086 9B00     	 lsls r3,r3,#2
 2628 0088 274A     	 ldr r2,.L172+16
 2629 008a 1A44     	 add r2,r2,r3
 2630 008c FB68     	 ldr r3,[r7,#12]
 2631 008e 0433     	 adds r3,r3,#4
 2632 0090 1046     	 mov r0,r2
 2633 0092 1946     	 mov r1,r3
 2634 0094 FFF7FEFF 	 bl vListInsertEnd
2204:../Dave/Generated/FREERTOS/tasks.c **** 
2205:../Dave/Generated/FREERTOS/tasks.c **** 					/* If the moved task has a priority higher than the current
2206:../Dave/Generated/FREERTOS/tasks.c **** 					task then a yield must be performed. */
2207:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2635              	 .loc 1 2207 0
 2636 0098 FB68     	 ldr r3,[r7,#12]
 2637 009a DA6A     	 ldr r2,[r3,#44]
 2638 009c 234B     	 ldr r3,.L172+20
 2639 009e 1B68     	 ldr r3,[r3]
 2640 00a0 DB6A     	 ldr r3,[r3,#44]
 2641 00a2 9A42     	 cmp r2,r3
 2642 00a4 02D3     	 bcc .L165
2208:../Dave/Generated/FREERTOS/tasks.c **** 					{
2209:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldPending = pdTRUE;
 2643              	 .loc 1 2209 0
 2644 00a6 224B     	 ldr r3,.L172+24
 2645 00a8 0122     	 movs r2,#1
 2646 00aa 1A60     	 str r2,[r3]
 2647              	.L165:
2198:../Dave/Generated/FREERTOS/tasks.c **** 				{
 2648              	 .loc 1 2198 0
 2649 00ac 1C4B     	 ldr r3,.L172+8
 2650 00ae 1B68     	 ldr r3,[r3]
 2651 00b0 002B     	 cmp r3,#0
 2652 00b2 CAD1     	 bne .L166
2210:../Dave/Generated/FREERTOS/tasks.c **** 					}
2211:../Dave/Generated/FREERTOS/tasks.c **** 					else
2212:../Dave/Generated/FREERTOS/tasks.c **** 					{
2213:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2214:../Dave/Generated/FREERTOS/tasks.c **** 					}
2215:../Dave/Generated/FREERTOS/tasks.c **** 				}
2216:../Dave/Generated/FREERTOS/tasks.c **** 
2217:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB != NULL )
 2653              	 .loc 1 2217 0
 2654 00b4 FB68     	 ldr r3,[r7,#12]
 2655 00b6 002B     	 cmp r3,#0
 2656 00b8 01D0     	 beq .L167
2218:../Dave/Generated/FREERTOS/tasks.c **** 				{
2219:../Dave/Generated/FREERTOS/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2220:../Dave/Generated/FREERTOS/tasks.c **** 					which may have prevented the next unblock time from being
2221:../Dave/Generated/FREERTOS/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2222:../Dave/Generated/FREERTOS/tasks.c **** 					important for low power tickless implementations, where
2223:../Dave/Generated/FREERTOS/tasks.c **** 					this can prevent an unnecessary exit from low power
2224:../Dave/Generated/FREERTOS/tasks.c **** 					state. */
2225:../Dave/Generated/FREERTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
 2657              	 .loc 1 2225 0
 2658 00ba FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 2659              	.L167:
 2660              	.LBB157:
2226:../Dave/Generated/FREERTOS/tasks.c **** 				}
2227:../Dave/Generated/FREERTOS/tasks.c **** 
2228:../Dave/Generated/FREERTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2229:../Dave/Generated/FREERTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
2230:../Dave/Generated/FREERTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2231:../Dave/Generated/FREERTOS/tasks.c **** 				time. */
2232:../Dave/Generated/FREERTOS/tasks.c **** 				{
2233:../Dave/Generated/FREERTOS/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2661              	 .loc 1 2233 0
 2662 00be 1D4B     	 ldr r3,.L172+28
 2663 00c0 1B68     	 ldr r3,[r3]
 2664 00c2 7B60     	 str r3,[r7,#4]
2234:../Dave/Generated/FREERTOS/tasks.c **** 
2235:../Dave/Generated/FREERTOS/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2665              	 .loc 1 2235 0
 2666 00c4 7B68     	 ldr r3,[r7,#4]
 2667 00c6 002B     	 cmp r3,#0
 2668 00c8 10D0     	 beq .L168
 2669              	.L170:
2236:../Dave/Generated/FREERTOS/tasks.c **** 					{
2237:../Dave/Generated/FREERTOS/tasks.c **** 						do
2238:../Dave/Generated/FREERTOS/tasks.c **** 						{
2239:../Dave/Generated/FREERTOS/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2670              	 .loc 1 2239 0
 2671 00ca FFF7FEFF 	 bl xTaskIncrementTick
 2672 00ce 0346     	 mov r3,r0
 2673 00d0 002B     	 cmp r3,#0
 2674 00d2 02D0     	 beq .L169
2240:../Dave/Generated/FREERTOS/tasks.c **** 							{
2241:../Dave/Generated/FREERTOS/tasks.c **** 								xYieldPending = pdTRUE;
 2675              	 .loc 1 2241 0
 2676 00d4 164B     	 ldr r3,.L172+24
 2677 00d6 0122     	 movs r2,#1
 2678 00d8 1A60     	 str r2,[r3]
 2679              	.L169:
2242:../Dave/Generated/FREERTOS/tasks.c **** 							}
2243:../Dave/Generated/FREERTOS/tasks.c **** 							else
2244:../Dave/Generated/FREERTOS/tasks.c **** 							{
2245:../Dave/Generated/FREERTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2246:../Dave/Generated/FREERTOS/tasks.c **** 							}
2247:../Dave/Generated/FREERTOS/tasks.c **** 							--uxPendedCounts;
 2680              	 .loc 1 2247 0
 2681 00da 7B68     	 ldr r3,[r7,#4]
 2682 00dc 013B     	 subs r3,r3,#1
 2683 00de 7B60     	 str r3,[r7,#4]
2248:../Dave/Generated/FREERTOS/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2684              	 .loc 1 2248 0
 2685 00e0 7B68     	 ldr r3,[r7,#4]
 2686 00e2 002B     	 cmp r3,#0
 2687 00e4 F1D1     	 bne .L170
2249:../Dave/Generated/FREERTOS/tasks.c **** 
2250:../Dave/Generated/FREERTOS/tasks.c **** 						uxPendedTicks = 0;
 2688              	 .loc 1 2250 0
 2689 00e6 134B     	 ldr r3,.L172+28
 2690 00e8 0022     	 movs r2,#0
 2691 00ea 1A60     	 str r2,[r3]
 2692              	.L168:
 2693              	.LBE157:
2251:../Dave/Generated/FREERTOS/tasks.c **** 					}
2252:../Dave/Generated/FREERTOS/tasks.c **** 					else
2253:../Dave/Generated/FREERTOS/tasks.c **** 					{
2254:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2255:../Dave/Generated/FREERTOS/tasks.c **** 					}
2256:../Dave/Generated/FREERTOS/tasks.c **** 				}
2257:../Dave/Generated/FREERTOS/tasks.c **** 
2258:../Dave/Generated/FREERTOS/tasks.c **** 				if( xYieldPending != pdFALSE )
 2694              	 .loc 1 2258 0
 2695 00ec 104B     	 ldr r3,.L172+24
 2696 00ee 1B68     	 ldr r3,[r3]
 2697 00f0 002B     	 cmp r3,#0
 2698 00f2 09D0     	 beq .L164
2259:../Dave/Generated/FREERTOS/tasks.c **** 				{
2260:../Dave/Generated/FREERTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2261:../Dave/Generated/FREERTOS/tasks.c **** 					{
2262:../Dave/Generated/FREERTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2699              	 .loc 1 2262 0
 2700 00f4 0123     	 movs r3,#1
 2701 00f6 BB60     	 str r3,[r7,#8]
2263:../Dave/Generated/FREERTOS/tasks.c **** 					}
2264:../Dave/Generated/FREERTOS/tasks.c **** 					#endif
2265:../Dave/Generated/FREERTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2702              	 .loc 1 2265 0
 2703 00f8 0F4B     	 ldr r3,.L172+32
 2704 00fa 4FF08052 	 mov r2,#268435456
 2705 00fe 1A60     	 str r2,[r3]
 2706              	
 2707 0100 BFF34F8F 	 dsb
 2708              	
 2709              	
 2710 0104 BFF36F8F 	 isb
 2711              	
 2712              	 .thumb
 2713              	.L164:
2266:../Dave/Generated/FREERTOS/tasks.c **** 				}
2267:../Dave/Generated/FREERTOS/tasks.c **** 				else
2268:../Dave/Generated/FREERTOS/tasks.c **** 				{
2269:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2270:../Dave/Generated/FREERTOS/tasks.c **** 				}
2271:../Dave/Generated/FREERTOS/tasks.c **** 			}
2272:../Dave/Generated/FREERTOS/tasks.c **** 		}
2273:../Dave/Generated/FREERTOS/tasks.c **** 		else
2274:../Dave/Generated/FREERTOS/tasks.c **** 		{
2275:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2276:../Dave/Generated/FREERTOS/tasks.c **** 		}
2277:../Dave/Generated/FREERTOS/tasks.c **** 	}
2278:../Dave/Generated/FREERTOS/tasks.c **** 	taskEXIT_CRITICAL();
 2714              	 .loc 1 2278 0
 2715 0108 FFF7FEFF 	 bl vPortExitCritical
2279:../Dave/Generated/FREERTOS/tasks.c **** 
2280:../Dave/Generated/FREERTOS/tasks.c **** 	return xAlreadyYielded;
 2716              	 .loc 1 2280 0
 2717 010c BB68     	 ldr r3,[r7,#8]
2281:../Dave/Generated/FREERTOS/tasks.c **** }
 2718              	 .loc 1 2281 0
 2719 010e 1846     	 mov r0,r3
 2720 0110 1037     	 adds r7,r7,#16
 2721              	.LCFI88:
 2722              	 .cfi_def_cfa_offset 8
 2723 0112 BD46     	 mov sp,r7
 2724              	.LCFI89:
 2725              	 .cfi_def_cfa_register 13
 2726              	 
 2727 0114 80BD     	 pop {r7,pc}
 2728              	.L173:
 2729 0116 00BF     	 .align 2
 2730              	.L172:
 2731 0118 00000000 	 .word uxSchedulerSuspended
 2732 011c 00000000 	 .word uxCurrentNumberOfTasks
 2733 0120 00000000 	 .word xPendingReadyList
 2734 0124 00000000 	 .word uxTopReadyPriority
 2735 0128 00000000 	 .word pxReadyTasksLists
 2736 012c 00000000 	 .word pxCurrentTCB
 2737 0130 00000000 	 .word xYieldPending
 2738 0134 00000000 	 .word uxPendedTicks
 2739 0138 04ED00E0 	 .word -536810236
 2740              	 .cfi_endproc
 2741              	.LFE154:
 2743              	 .section .text.xTaskGetTickCount,"ax",%progbits
 2744              	 .align 2
 2745              	 .global xTaskGetTickCount
 2746              	 .thumb
 2747              	 .thumb_func
 2749              	xTaskGetTickCount:
 2750              	.LFB155:
2282:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2283:../Dave/Generated/FREERTOS/tasks.c **** 
2284:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2285:../Dave/Generated/FREERTOS/tasks.c **** {
 2751              	 .loc 1 2285 0
 2752              	 .cfi_startproc
 2753              	 
 2754              	 
 2755              	 
 2756 0000 80B4     	 push {r7}
 2757              	.LCFI90:
 2758              	 .cfi_def_cfa_offset 4
 2759              	 .cfi_offset 7,-4
 2760 0002 83B0     	 sub sp,sp,#12
 2761              	.LCFI91:
 2762              	 .cfi_def_cfa_offset 16
 2763 0004 00AF     	 add r7,sp,#0
 2764              	.LCFI92:
 2765              	 .cfi_def_cfa_register 7
2286:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTicks;
2287:../Dave/Generated/FREERTOS/tasks.c **** 
2288:../Dave/Generated/FREERTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2289:../Dave/Generated/FREERTOS/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2290:../Dave/Generated/FREERTOS/tasks.c **** 	{
2291:../Dave/Generated/FREERTOS/tasks.c **** 		xTicks = xTickCount;
 2766              	 .loc 1 2291 0
 2767 0006 054B     	 ldr r3,.L176
 2768 0008 1B68     	 ldr r3,[r3]
 2769 000a 7B60     	 str r3,[r7,#4]
2292:../Dave/Generated/FREERTOS/tasks.c **** 	}
2293:../Dave/Generated/FREERTOS/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2294:../Dave/Generated/FREERTOS/tasks.c **** 
2295:../Dave/Generated/FREERTOS/tasks.c **** 	return xTicks;
 2770              	 .loc 1 2295 0
 2771 000c 7B68     	 ldr r3,[r7,#4]
2296:../Dave/Generated/FREERTOS/tasks.c **** }
 2772              	 .loc 1 2296 0
 2773 000e 1846     	 mov r0,r3
 2774 0010 0C37     	 adds r7,r7,#12
 2775              	.LCFI93:
 2776              	 .cfi_def_cfa_offset 4
 2777 0012 BD46     	 mov sp,r7
 2778              	.LCFI94:
 2779              	 .cfi_def_cfa_register 13
 2780              	 
 2781 0014 5DF8047B 	 ldr r7,[sp],#4
 2782              	.LCFI95:
 2783              	 .cfi_restore 7
 2784              	 .cfi_def_cfa_offset 0
 2785 0018 7047     	 bx lr
 2786              	.L177:
 2787 001a 00BF     	 .align 2
 2788              	.L176:
 2789 001c 00000000 	 .word xTickCount
 2790              	 .cfi_endproc
 2791              	.LFE155:
 2793              	 .section .text.xTaskGetTickCountFromISR,"ax",%progbits
 2794              	 .align 2
 2795              	 .global xTaskGetTickCountFromISR
 2796              	 .thumb
 2797              	 .thumb_func
 2799              	xTaskGetTickCountFromISR:
 2800              	.LFB156:
2297:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2298:../Dave/Generated/FREERTOS/tasks.c **** 
2299:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2300:../Dave/Generated/FREERTOS/tasks.c **** {
 2801              	 .loc 1 2300 0
 2802              	 .cfi_startproc
 2803              	 
 2804              	 
 2805 0000 80B5     	 push {r7,lr}
 2806              	.LCFI96:
 2807              	 .cfi_def_cfa_offset 8
 2808              	 .cfi_offset 7,-8
 2809              	 .cfi_offset 14,-4
 2810 0002 82B0     	 sub sp,sp,#8
 2811              	.LCFI97:
 2812              	 .cfi_def_cfa_offset 16
 2813 0004 00AF     	 add r7,sp,#0
 2814              	.LCFI98:
 2815              	 .cfi_def_cfa_register 7
2301:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xReturn;
2302:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2303:../Dave/Generated/FREERTOS/tasks.c **** 
2304:../Dave/Generated/FREERTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2305:../Dave/Generated/FREERTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2306:../Dave/Generated/FREERTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2307:../Dave/Generated/FREERTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2308:../Dave/Generated/FREERTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2309:../Dave/Generated/FREERTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2310:../Dave/Generated/FREERTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2311:../Dave/Generated/FREERTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2312:../Dave/Generated/FREERTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2313:../Dave/Generated/FREERTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2314:../Dave/Generated/FREERTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2315:../Dave/Generated/FREERTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2316:../Dave/Generated/FREERTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2317:../Dave/Generated/FREERTOS/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2318:../Dave/Generated/FREERTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2816              	 .loc 1 2318 0
 2817 0006 FFF7FEFF 	 bl vPortValidateInterruptPriority
2319:../Dave/Generated/FREERTOS/tasks.c **** 
2320:../Dave/Generated/FREERTOS/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2818              	 .loc 1 2320 0
 2819 000a 0023     	 movs r3,#0
 2820 000c 7B60     	 str r3,[r7,#4]
2321:../Dave/Generated/FREERTOS/tasks.c **** 	{
2322:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = xTickCount;
 2821              	 .loc 1 2322 0
 2822 000e 044B     	 ldr r3,.L180
 2823 0010 1B68     	 ldr r3,[r3]
 2824 0012 3B60     	 str r3,[r7]
2323:../Dave/Generated/FREERTOS/tasks.c **** 	}
2324:../Dave/Generated/FREERTOS/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2325:../Dave/Generated/FREERTOS/tasks.c **** 
2326:../Dave/Generated/FREERTOS/tasks.c **** 	return xReturn;
 2825              	 .loc 1 2326 0
 2826 0014 3B68     	 ldr r3,[r7]
2327:../Dave/Generated/FREERTOS/tasks.c **** }
 2827              	 .loc 1 2327 0
 2828 0016 1846     	 mov r0,r3
 2829 0018 0837     	 adds r7,r7,#8
 2830              	.LCFI99:
 2831              	 .cfi_def_cfa_offset 8
 2832 001a BD46     	 mov sp,r7
 2833              	.LCFI100:
 2834              	 .cfi_def_cfa_register 13
 2835              	 
 2836 001c 80BD     	 pop {r7,pc}
 2837              	.L181:
 2838 001e 00BF     	 .align 2
 2839              	.L180:
 2840 0020 00000000 	 .word xTickCount
 2841              	 .cfi_endproc
 2842              	.LFE156:
 2844              	 .section .text.uxTaskGetNumberOfTasks,"ax",%progbits
 2845              	 .align 2
 2846              	 .global uxTaskGetNumberOfTasks
 2847              	 .thumb
 2848              	 .thumb_func
 2850              	uxTaskGetNumberOfTasks:
 2851              	.LFB157:
2328:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2329:../Dave/Generated/FREERTOS/tasks.c **** 
2330:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2331:../Dave/Generated/FREERTOS/tasks.c **** {
 2852              	 .loc 1 2331 0
 2853              	 .cfi_startproc
 2854              	 
 2855              	 
 2856              	 
 2857 0000 80B4     	 push {r7}
 2858              	.LCFI101:
 2859              	 .cfi_def_cfa_offset 4
 2860              	 .cfi_offset 7,-4
 2861 0002 00AF     	 add r7,sp,#0
 2862              	.LCFI102:
 2863              	 .cfi_def_cfa_register 7
2332:../Dave/Generated/FREERTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
2333:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t. */
2334:../Dave/Generated/FREERTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
 2864              	 .loc 1 2334 0
 2865 0004 034B     	 ldr r3,.L184
 2866 0006 1B68     	 ldr r3,[r3]
2335:../Dave/Generated/FREERTOS/tasks.c **** }
 2867              	 .loc 1 2335 0
 2868 0008 1846     	 mov r0,r3
 2869 000a BD46     	 mov sp,r7
 2870              	.LCFI103:
 2871              	 .cfi_def_cfa_register 13
 2872              	 
 2873 000c 5DF8047B 	 ldr r7,[sp],#4
 2874              	.LCFI104:
 2875              	 .cfi_restore 7
 2876              	 .cfi_def_cfa_offset 0
 2877 0010 7047     	 bx lr
 2878              	.L185:
 2879 0012 00BF     	 .align 2
 2880              	.L184:
 2881 0014 00000000 	 .word uxCurrentNumberOfTasks
 2882              	 .cfi_endproc
 2883              	.LFE157:
 2885              	 .section .text.pcTaskGetName,"ax",%progbits
 2886              	 .align 2
 2887              	 .global pcTaskGetName
 2888              	 .thumb
 2889              	 .thumb_func
 2891              	pcTaskGetName:
 2892              	.LFB158:
2336:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2337:../Dave/Generated/FREERTOS/tasks.c **** 
2338:../Dave/Generated/FREERTOS/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2339:../Dave/Generated/FREERTOS/tasks.c **** {
 2893              	 .loc 1 2339 0
 2894              	 .cfi_startproc
 2895              	 
 2896              	 
 2897              	 
 2898 0000 80B4     	 push {r7}
 2899              	.LCFI105:
 2900              	 .cfi_def_cfa_offset 4
 2901              	 .cfi_offset 7,-4
 2902 0002 85B0     	 sub sp,sp,#20
 2903              	.LCFI106:
 2904              	 .cfi_def_cfa_offset 24
 2905 0004 00AF     	 add r7,sp,#0
 2906              	.LCFI107:
 2907              	 .cfi_def_cfa_register 7
 2908 0006 7860     	 str r0,[r7,#4]
2340:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxTCB;
2341:../Dave/Generated/FREERTOS/tasks.c **** 
2342:../Dave/Generated/FREERTOS/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2343:../Dave/Generated/FREERTOS/tasks.c **** 	queried. */
2344:../Dave/Generated/FREERTOS/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2909              	 .loc 1 2344 0
 2910 0008 7B68     	 ldr r3,[r7,#4]
 2911 000a 002B     	 cmp r3,#0
 2912 000c 02D1     	 bne .L187
 2913              	 .loc 1 2344 0 is_stmt 0 discriminator 1
 2914 000e 0D4B     	 ldr r3,.L192
 2915 0010 1B68     	 ldr r3,[r3]
 2916 0012 00E0     	 b .L188
 2917              	.L187:
 2918              	 .loc 1 2344 0 discriminator 2
 2919 0014 7B68     	 ldr r3,[r7,#4]
 2920              	.L188:
 2921              	 .loc 1 2344 0 discriminator 4
 2922 0016 FB60     	 str r3,[r7,#12]
2345:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTCB );
 2923              	 .loc 1 2345 0 is_stmt 1 discriminator 4
 2924 0018 FB68     	 ldr r3,[r7,#12]
 2925 001a 002B     	 cmp r3,#0
 2926 001c 09D1     	 bne .L189
 2927              	.LBB158:
 2928              	.LBB159:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2929              	 .loc 2 195 0 discriminator 1
 2930              	
 2931 001e 4FF0FC03 	 mov r3,#252
 2932 0022 83F31188 	 msr basepri,r3
 2933 0026 BFF36F8F 	 isb 
 2934 002a BFF34F8F 	 dsb 
 2935              	
 2936              	
 2937              	 .thumb
 2938 002e BB60     	 str r3,[r7,#8]
 2939              	.L190:
 2940              	.LBE159:
 2941              	.LBE158:
 2942              	 .loc 1 2345 0 discriminator 1
 2943 0030 FEE7     	 b .L190
 2944              	.L189:
2346:../Dave/Generated/FREERTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2945              	 .loc 1 2346 0
 2946 0032 FB68     	 ldr r3,[r7,#12]
 2947 0034 3433     	 adds r3,r3,#52
2347:../Dave/Generated/FREERTOS/tasks.c **** }
 2948              	 .loc 1 2347 0
 2949 0036 1846     	 mov r0,r3
 2950 0038 1437     	 adds r7,r7,#20
 2951              	.LCFI108:
 2952              	 .cfi_def_cfa_offset 4
 2953 003a BD46     	 mov sp,r7
 2954              	.LCFI109:
 2955              	 .cfi_def_cfa_register 13
 2956              	 
 2957 003c 5DF8047B 	 ldr r7,[sp],#4
 2958              	.LCFI110:
 2959              	 .cfi_restore 7
 2960              	 .cfi_def_cfa_offset 0
 2961 0040 7047     	 bx lr
 2962              	.L193:
 2963 0042 00BF     	 .align 2
 2964              	.L192:
 2965 0044 00000000 	 .word pxCurrentTCB
 2966              	 .cfi_endproc
 2967              	.LFE158:
 2969              	 .section .text.prvSearchForNameWithinSingleList,"ax",%progbits
 2970              	 .align 2
 2971              	 .thumb
 2972              	 .thumb_func
 2974              	prvSearchForNameWithinSingleList:
 2975              	.LFB159:
2348:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2349:../Dave/Generated/FREERTOS/tasks.c **** 
2350:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2351:../Dave/Generated/FREERTOS/tasks.c **** 
2352:../Dave/Generated/FREERTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2353:../Dave/Generated/FREERTOS/tasks.c **** 	{
 2976              	 .loc 1 2353 0
 2977              	 .cfi_startproc
 2978              	 
 2979              	 
 2980              	 
 2981 0000 80B4     	 push {r7}
 2982              	.LCFI111:
 2983              	 .cfi_def_cfa_offset 4
 2984              	 .cfi_offset 7,-4
 2985 0002 8BB0     	 sub sp,sp,#44
 2986              	.LCFI112:
 2987              	 .cfi_def_cfa_offset 48
 2988 0004 00AF     	 add r7,sp,#0
 2989              	.LCFI113:
 2990              	 .cfi_def_cfa_register 7
 2991 0006 7860     	 str r0,[r7,#4]
 2992 0008 3960     	 str r1,[r7]
2354:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 2993              	 .loc 1 2354 0
 2994 000a 0023     	 movs r3,#0
 2995 000c 7B62     	 str r3,[r7,#36]
2355:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t x;
2356:../Dave/Generated/FREERTOS/tasks.c **** 	char cNextChar;
2357:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xBreakLoop;
2358:../Dave/Generated/FREERTOS/tasks.c **** 
2359:../Dave/Generated/FREERTOS/tasks.c **** 		/* This function is called with the scheduler suspended. */
2360:../Dave/Generated/FREERTOS/tasks.c **** 
2361:../Dave/Generated/FREERTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 2996              	 .loc 1 2361 0
 2997 000e 7B68     	 ldr r3,[r7,#4]
 2998 0010 1B68     	 ldr r3,[r3]
 2999 0012 002B     	 cmp r3,#0
 3000 0014 5AD0     	 beq .L195
 3001              	.LBB160:
2362:../Dave/Generated/FREERTOS/tasks.c **** 		{
2363:../Dave/Generated/FREERTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
 3002              	 .loc 1 2363 0
 3003 0016 7B68     	 ldr r3,[r7,#4]
 3004 0018 BB61     	 str r3,[r7,#24]
 3005 001a BB69     	 ldr r3,[r7,#24]
 3006 001c 5B68     	 ldr r3,[r3,#4]
 3007 001e 5A68     	 ldr r2,[r3,#4]
 3008 0020 BB69     	 ldr r3,[r7,#24]
 3009 0022 5A60     	 str r2,[r3,#4]
 3010 0024 BB69     	 ldr r3,[r7,#24]
 3011 0026 5A68     	 ldr r2,[r3,#4]
 3012 0028 BB69     	 ldr r3,[r7,#24]
 3013 002a 0833     	 adds r3,r3,#8
 3014 002c 9A42     	 cmp r2,r3
 3015 002e 04D1     	 bne .L196
 3016              	 .loc 1 2363 0 is_stmt 0 discriminator 1
 3017 0030 BB69     	 ldr r3,[r7,#24]
 3018 0032 5B68     	 ldr r3,[r3,#4]
 3019 0034 5A68     	 ldr r2,[r3,#4]
 3020 0036 BB69     	 ldr r3,[r7,#24]
 3021 0038 5A60     	 str r2,[r3,#4]
 3022              	.L196:
 3023              	 .loc 1 2363 0 discriminator 3
 3024 003a BB69     	 ldr r3,[r7,#24]
 3025 003c 5B68     	 ldr r3,[r3,#4]
 3026 003e DB68     	 ldr r3,[r3,#12]
 3027 0040 7B61     	 str r3,[r7,#20]
 3028              	.L206:
 3029              	.LBE160:
 3030              	.LBB161:
2364:../Dave/Generated/FREERTOS/tasks.c **** 
2365:../Dave/Generated/FREERTOS/tasks.c **** 			do
2366:../Dave/Generated/FREERTOS/tasks.c **** 			{
2367:../Dave/Generated/FREERTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 3031              	 .loc 1 2367 0 is_stmt 1
 3032 0042 7B68     	 ldr r3,[r7,#4]
 3033 0044 3B61     	 str r3,[r7,#16]
 3034 0046 3B69     	 ldr r3,[r7,#16]
 3035 0048 5B68     	 ldr r3,[r3,#4]
 3036 004a 5A68     	 ldr r2,[r3,#4]
 3037 004c 3B69     	 ldr r3,[r7,#16]
 3038 004e 5A60     	 str r2,[r3,#4]
 3039 0050 3B69     	 ldr r3,[r7,#16]
 3040 0052 5A68     	 ldr r2,[r3,#4]
 3041 0054 3B69     	 ldr r3,[r7,#16]
 3042 0056 0833     	 adds r3,r3,#8
 3043 0058 9A42     	 cmp r2,r3
 3044 005a 04D1     	 bne .L197
 3045              	 .loc 1 2367 0 is_stmt 0 discriminator 1
 3046 005c 3B69     	 ldr r3,[r7,#16]
 3047 005e 5B68     	 ldr r3,[r3,#4]
 3048 0060 5A68     	 ldr r2,[r3,#4]
 3049 0062 3B69     	 ldr r3,[r7,#16]
 3050 0064 5A60     	 str r2,[r3,#4]
 3051              	.L197:
 3052              	 .loc 1 2367 0 discriminator 3
 3053 0066 3B69     	 ldr r3,[r7,#16]
 3054 0068 5B68     	 ldr r3,[r3,#4]
 3055 006a DB68     	 ldr r3,[r3,#12]
 3056 006c FB60     	 str r3,[r7,#12]
 3057              	.LBE161:
2368:../Dave/Generated/FREERTOS/tasks.c **** 
2369:../Dave/Generated/FREERTOS/tasks.c **** 				/* Check each character in the name looking for a match or
2370:../Dave/Generated/FREERTOS/tasks.c **** 				mismatch. */
2371:../Dave/Generated/FREERTOS/tasks.c **** 				xBreakLoop = pdFALSE;
 3058              	 .loc 1 2371 0 is_stmt 1 discriminator 3
 3059 006e 0023     	 movs r3,#0
 3060 0070 FB61     	 str r3,[r7,#28]
2372:../Dave/Generated/FREERTOS/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 3061              	 .loc 1 2372 0 discriminator 3
 3062 0072 0023     	 movs r3,#0
 3063 0074 3B62     	 str r3,[r7,#32]
 3064 0076 1DE0     	 b .L198
 3065              	.L203:
2373:../Dave/Generated/FREERTOS/tasks.c **** 				{
2374:../Dave/Generated/FREERTOS/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
 3066              	 .loc 1 2374 0
 3067 0078 FA68     	 ldr r2,[r7,#12]
 3068 007a 3B6A     	 ldr r3,[r7,#32]
 3069 007c 1344     	 add r3,r3,r2
 3070 007e 3033     	 adds r3,r3,#48
 3071 0080 1B79     	 ldrb r3,[r3,#4]
 3072 0082 FB72     	 strb r3,[r7,#11]
2375:../Dave/Generated/FREERTOS/tasks.c **** 
2376:../Dave/Generated/FREERTOS/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
 3073              	 .loc 1 2376 0
 3074 0084 3A68     	 ldr r2,[r7]
 3075 0086 3B6A     	 ldr r3,[r7,#32]
 3076 0088 1344     	 add r3,r3,r2
 3077 008a 1B78     	 ldrb r3,[r3]
 3078 008c FA7A     	 ldrb r2,[r7,#11]
 3079 008e 9A42     	 cmp r2,r3
 3080 0090 02D0     	 beq .L199
2377:../Dave/Generated/FREERTOS/tasks.c **** 					{
2378:../Dave/Generated/FREERTOS/tasks.c **** 						/* Characters didn't match. */
2379:../Dave/Generated/FREERTOS/tasks.c **** 						xBreakLoop = pdTRUE;
 3081              	 .loc 1 2379 0
 3082 0092 0123     	 movs r3,#1
 3083 0094 FB61     	 str r3,[r7,#28]
 3084 0096 06E0     	 b .L200
 3085              	.L199:
2380:../Dave/Generated/FREERTOS/tasks.c **** 					}
2381:../Dave/Generated/FREERTOS/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
 3086              	 .loc 1 2381 0
 3087 0098 FB7A     	 ldrb r3,[r7,#11]
 3088 009a 002B     	 cmp r3,#0
 3089 009c 03D1     	 bne .L200
2382:../Dave/Generated/FREERTOS/tasks.c **** 					{
2383:../Dave/Generated/FREERTOS/tasks.c **** 						/* Both strings terminated, a match must have been
2384:../Dave/Generated/FREERTOS/tasks.c **** 						found. */
2385:../Dave/Generated/FREERTOS/tasks.c **** 						pxReturn = pxNextTCB;
 3090              	 .loc 1 2385 0
 3091 009e FB68     	 ldr r3,[r7,#12]
 3092 00a0 7B62     	 str r3,[r7,#36]
2386:../Dave/Generated/FREERTOS/tasks.c **** 						xBreakLoop = pdTRUE;
 3093              	 .loc 1 2386 0
 3094 00a2 0123     	 movs r3,#1
 3095 00a4 FB61     	 str r3,[r7,#28]
 3096              	.L200:
2387:../Dave/Generated/FREERTOS/tasks.c **** 					}
2388:../Dave/Generated/FREERTOS/tasks.c **** 					else
2389:../Dave/Generated/FREERTOS/tasks.c **** 					{
2390:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2391:../Dave/Generated/FREERTOS/tasks.c **** 					}
2392:../Dave/Generated/FREERTOS/tasks.c **** 
2393:../Dave/Generated/FREERTOS/tasks.c **** 					if( xBreakLoop != pdFALSE )
 3097              	 .loc 1 2393 0
 3098 00a6 FB69     	 ldr r3,[r7,#28]
 3099 00a8 002B     	 cmp r3,#0
 3100 00aa 00D0     	 beq .L201
2394:../Dave/Generated/FREERTOS/tasks.c **** 					{
2395:../Dave/Generated/FREERTOS/tasks.c **** 						break;
 3101              	 .loc 1 2395 0
 3102 00ac 05E0     	 b .L202
 3103              	.L201:
2372:../Dave/Generated/FREERTOS/tasks.c **** 				{
 3104              	 .loc 1 2372 0 discriminator 2
 3105 00ae 3B6A     	 ldr r3,[r7,#32]
 3106 00b0 0133     	 adds r3,r3,#1
 3107 00b2 3B62     	 str r3,[r7,#32]
 3108              	.L198:
2372:../Dave/Generated/FREERTOS/tasks.c **** 				{
 3109              	 .loc 1 2372 0 is_stmt 0 discriminator 1
 3110 00b4 3B6A     	 ldr r3,[r7,#32]
 3111 00b6 0F2B     	 cmp r3,#15
 3112 00b8 DED9     	 bls .L203
 3113              	.L202:
2396:../Dave/Generated/FREERTOS/tasks.c **** 					}
2397:../Dave/Generated/FREERTOS/tasks.c **** 				}
2398:../Dave/Generated/FREERTOS/tasks.c **** 
2399:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxReturn != NULL )
 3114              	 .loc 1 2399 0 is_stmt 1
 3115 00ba 7B6A     	 ldr r3,[r7,#36]
 3116 00bc 002B     	 cmp r3,#0
 3117 00be 01D0     	 beq .L204
2400:../Dave/Generated/FREERTOS/tasks.c **** 				{
2401:../Dave/Generated/FREERTOS/tasks.c **** 					/* The handle has been found. */
2402:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 3118              	 .loc 1 2402 0
 3119 00c0 00BF     	 nop
 3120 00c2 03E0     	 b .L195
 3121              	.L204:
2403:../Dave/Generated/FREERTOS/tasks.c **** 				}
2404:../Dave/Generated/FREERTOS/tasks.c **** 
2405:../Dave/Generated/FREERTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 3122              	 .loc 1 2405 0
 3123 00c4 FA68     	 ldr r2,[r7,#12]
 3124 00c6 7B69     	 ldr r3,[r7,#20]
 3125 00c8 9A42     	 cmp r2,r3
 3126 00ca BAD1     	 bne .L206
 3127              	.L195:
2406:../Dave/Generated/FREERTOS/tasks.c **** 		}
2407:../Dave/Generated/FREERTOS/tasks.c **** 		else
2408:../Dave/Generated/FREERTOS/tasks.c **** 		{
2409:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2410:../Dave/Generated/FREERTOS/tasks.c **** 		}
2411:../Dave/Generated/FREERTOS/tasks.c **** 
2412:../Dave/Generated/FREERTOS/tasks.c **** 		return pxReturn;
 3128              	 .loc 1 2412 0
 3129 00cc 7B6A     	 ldr r3,[r7,#36]
2413:../Dave/Generated/FREERTOS/tasks.c **** 	}
 3130              	 .loc 1 2413 0
 3131 00ce 1846     	 mov r0,r3
 3132 00d0 2C37     	 adds r7,r7,#44
 3133              	.LCFI114:
 3134              	 .cfi_def_cfa_offset 4
 3135 00d2 BD46     	 mov sp,r7
 3136              	.LCFI115:
 3137              	 .cfi_def_cfa_register 13
 3138              	 
 3139 00d4 5DF8047B 	 ldr r7,[sp],#4
 3140              	.LCFI116:
 3141              	 .cfi_restore 7
 3142              	 .cfi_def_cfa_offset 0
 3143 00d8 7047     	 bx lr
 3144              	 .cfi_endproc
 3145              	.LFE159:
 3147 00da 00BF     	 .section .text.xTaskGetHandle,"ax",%progbits
 3148              	 .align 2
 3149              	 .global xTaskGetHandle
 3150              	 .thumb
 3151              	 .thumb_func
 3153              	xTaskGetHandle:
 3154              	.LFB160:
2414:../Dave/Generated/FREERTOS/tasks.c **** 
2415:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2416:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2417:../Dave/Generated/FREERTOS/tasks.c **** 
2418:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2419:../Dave/Generated/FREERTOS/tasks.c **** 
2420:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2421:../Dave/Generated/FREERTOS/tasks.c **** 	{
 3155              	 .loc 1 2421 0
 3156              	 .cfi_startproc
 3157              	 
 3158              	 
 3159 0000 80B5     	 push {r7,lr}
 3160              	.LCFI117:
 3161              	 .cfi_def_cfa_offset 8
 3162              	 .cfi_offset 7,-8
 3163              	 .cfi_offset 14,-4
 3164 0002 86B0     	 sub sp,sp,#24
 3165              	.LCFI118:
 3166              	 .cfi_def_cfa_offset 32
 3167 0004 00AF     	 add r7,sp,#0
 3168              	.LCFI119:
 3169              	 .cfi_def_cfa_register 7
 3170 0006 7860     	 str r0,[r7,#4]
2422:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
 3171              	 .loc 1 2422 0
 3172 0008 0623     	 movs r3,#6
 3173 000a 7B61     	 str r3,[r7,#20]
2423:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t* pxTCB;
2424:../Dave/Generated/FREERTOS/tasks.c **** 
2425:../Dave/Generated/FREERTOS/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2426:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 3174              	 .loc 1 2426 0
 3175 000c 7868     	 ldr r0,[r7,#4]
 3176 000e FFF7FEFF 	 bl strlen
 3177 0012 0346     	 mov r3,r0
 3178 0014 0F2B     	 cmp r3,#15
 3179 0016 09D9     	 bls .L209
 3180              	.LBB162:
 3181              	.LBB163:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 3182              	 .loc 2 195 0 discriminator 1
 3183              	
 3184 0018 4FF0FC03 	 mov r3,#252
 3185 001c 83F31188 	 msr basepri,r3
 3186 0020 BFF36F8F 	 isb 
 3187 0024 BFF34F8F 	 dsb 
 3188              	
 3189              	
 3190              	 .thumb
 3191 0028 FB60     	 str r3,[r7,#12]
 3192              	.L210:
 3193              	.LBE163:
 3194              	.LBE162:
 3195              	 .loc 1 2426 0 discriminator 1
 3196 002a FEE7     	 b .L210
 3197              	.L209:
2427:../Dave/Generated/FREERTOS/tasks.c **** 
2428:../Dave/Generated/FREERTOS/tasks.c **** 		vTaskSuspendAll();
 3198              	 .loc 1 2428 0
 3199 002c FFF7FEFF 	 bl vTaskSuspendAll
 3200              	.L213:
2429:../Dave/Generated/FREERTOS/tasks.c **** 		{
2430:../Dave/Generated/FREERTOS/tasks.c **** 			/* Search the ready lists. */
2431:../Dave/Generated/FREERTOS/tasks.c **** 			do
2432:../Dave/Generated/FREERTOS/tasks.c **** 			{
2433:../Dave/Generated/FREERTOS/tasks.c **** 				uxQueue--;
 3201              	 .loc 1 2433 0
 3202 0030 7B69     	 ldr r3,[r7,#20]
 3203 0032 013B     	 subs r3,r3,#1
 3204 0034 7B61     	 str r3,[r7,#20]
2434:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
 3205              	 .loc 1 2434 0
 3206 0036 7A69     	 ldr r2,[r7,#20]
 3207 0038 1346     	 mov r3,r2
 3208 003a 9B00     	 lsls r3,r3,#2
 3209 003c 1344     	 add r3,r3,r2
 3210 003e 9B00     	 lsls r3,r3,#2
 3211 0040 1C4A     	 ldr r2,.L219
 3212 0042 1344     	 add r3,r3,r2
 3213 0044 1846     	 mov r0,r3
 3214 0046 7968     	 ldr r1,[r7,#4]
 3215 0048 FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3216 004c 3861     	 str r0,[r7,#16]
2435:../Dave/Generated/FREERTOS/tasks.c **** 
2436:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB != NULL )
 3217              	 .loc 1 2436 0
 3218 004e 3B69     	 ldr r3,[r7,#16]
 3219 0050 002B     	 cmp r3,#0
 3220 0052 00D0     	 beq .L211
2437:../Dave/Generated/FREERTOS/tasks.c **** 				{
2438:../Dave/Generated/FREERTOS/tasks.c **** 					/* Found the handle. */
2439:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 3221              	 .loc 1 2439 0
 3222 0054 02E0     	 b .L212
 3223              	.L211:
2440:../Dave/Generated/FREERTOS/tasks.c **** 				}
2441:../Dave/Generated/FREERTOS/tasks.c **** 
2442:../Dave/Generated/FREERTOS/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
 3224              	 .loc 1 2442 0
 3225 0056 7B69     	 ldr r3,[r7,#20]
 3226 0058 002B     	 cmp r3,#0
 3227 005a E9D1     	 bne .L213
 3228              	.L212:
2443:../Dave/Generated/FREERTOS/tasks.c **** 
2444:../Dave/Generated/FREERTOS/tasks.c **** 			/* Search the delayed lists. */
2445:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == NULL )
 3229              	 .loc 1 2445 0
 3230 005c 3B69     	 ldr r3,[r7,#16]
 3231 005e 002B     	 cmp r3,#0
 3232 0060 06D1     	 bne .L214
2446:../Dave/Generated/FREERTOS/tasks.c **** 			{
2447:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 3233              	 .loc 1 2447 0
 3234 0062 154B     	 ldr r3,.L219+4
 3235 0064 1B68     	 ldr r3,[r3]
 3236 0066 1846     	 mov r0,r3
 3237 0068 7968     	 ldr r1,[r7,#4]
 3238 006a FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3239 006e 3861     	 str r0,[r7,#16]
 3240              	.L214:
2448:../Dave/Generated/FREERTOS/tasks.c **** 			}
2449:../Dave/Generated/FREERTOS/tasks.c **** 
2450:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == NULL )
 3241              	 .loc 1 2450 0
 3242 0070 3B69     	 ldr r3,[r7,#16]
 3243 0072 002B     	 cmp r3,#0
 3244 0074 06D1     	 bne .L215
2451:../Dave/Generated/FREERTOS/tasks.c **** 			{
2452:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
 3245              	 .loc 1 2452 0
 3246 0076 114B     	 ldr r3,.L219+8
 3247 0078 1B68     	 ldr r3,[r3]
 3248 007a 1846     	 mov r0,r3
 3249 007c 7968     	 ldr r1,[r7,#4]
 3250 007e FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3251 0082 3861     	 str r0,[r7,#16]
 3252              	.L215:
2453:../Dave/Generated/FREERTOS/tasks.c **** 			}
2454:../Dave/Generated/FREERTOS/tasks.c **** 
2455:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2456:../Dave/Generated/FREERTOS/tasks.c **** 			{
2457:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB == NULL )
 3253              	 .loc 1 2457 0
 3254 0084 3B69     	 ldr r3,[r7,#16]
 3255 0086 002B     	 cmp r3,#0
 3256 0088 04D1     	 bne .L216
2458:../Dave/Generated/FREERTOS/tasks.c **** 				{
2459:../Dave/Generated/FREERTOS/tasks.c **** 					/* Search the suspended list. */
2460:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 3257              	 .loc 1 2460 0
 3258 008a 0D48     	 ldr r0,.L219+12
 3259 008c 7968     	 ldr r1,[r7,#4]
 3260 008e FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3261 0092 3861     	 str r0,[r7,#16]
 3262              	.L216:
2461:../Dave/Generated/FREERTOS/tasks.c **** 				}
2462:../Dave/Generated/FREERTOS/tasks.c **** 			}
2463:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
2464:../Dave/Generated/FREERTOS/tasks.c **** 
2465:../Dave/Generated/FREERTOS/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2466:../Dave/Generated/FREERTOS/tasks.c **** 			{
2467:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB == NULL )
 3263              	 .loc 1 2467 0
 3264 0094 3B69     	 ldr r3,[r7,#16]
 3265 0096 002B     	 cmp r3,#0
 3266 0098 04D1     	 bne .L217
2468:../Dave/Generated/FREERTOS/tasks.c **** 				{
2469:../Dave/Generated/FREERTOS/tasks.c **** 					/* Search the deleted list. */
2470:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 3267              	 .loc 1 2470 0
 3268 009a 0A48     	 ldr r0,.L219+16
 3269 009c 7968     	 ldr r1,[r7,#4]
 3270 009e FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3271 00a2 3861     	 str r0,[r7,#16]
 3272              	.L217:
2471:../Dave/Generated/FREERTOS/tasks.c **** 				}
2472:../Dave/Generated/FREERTOS/tasks.c **** 			}
2473:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
2474:../Dave/Generated/FREERTOS/tasks.c **** 		}
2475:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xTaskResumeAll();
 3273              	 .loc 1 2475 0
 3274 00a4 FFF7FEFF 	 bl xTaskResumeAll
2476:../Dave/Generated/FREERTOS/tasks.c **** 
2477:../Dave/Generated/FREERTOS/tasks.c **** 		return pxTCB;
 3275              	 .loc 1 2477 0
 3276 00a8 3B69     	 ldr r3,[r7,#16]
2478:../Dave/Generated/FREERTOS/tasks.c **** 	}
 3277              	 .loc 1 2478 0
 3278 00aa 1846     	 mov r0,r3
 3279 00ac 1837     	 adds r7,r7,#24
 3280              	.LCFI120:
 3281              	 .cfi_def_cfa_offset 8
 3282 00ae BD46     	 mov sp,r7
 3283              	.LCFI121:
 3284              	 .cfi_def_cfa_register 13
 3285              	 
 3286 00b0 80BD     	 pop {r7,pc}
 3287              	.L220:
 3288 00b2 00BF     	 .align 2
 3289              	.L219:
 3290 00b4 00000000 	 .word pxReadyTasksLists
 3291 00b8 00000000 	 .word pxDelayedTaskList
 3292 00bc 00000000 	 .word pxOverflowDelayedTaskList
 3293 00c0 00000000 	 .word xSuspendedTaskList
 3294 00c4 00000000 	 .word xTasksWaitingTermination
 3295              	 .cfi_endproc
 3296              	.LFE160:
 3298              	 .section .text.uxTaskGetSystemState,"ax",%progbits
 3299              	 .align 2
 3300              	 .global uxTaskGetSystemState
 3301              	 .thumb
 3302              	 .thumb_func
 3304              	uxTaskGetSystemState:
 3305              	.LFB161:
2479:../Dave/Generated/FREERTOS/tasks.c **** 
2480:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2481:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2482:../Dave/Generated/FREERTOS/tasks.c **** 
2483:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2484:../Dave/Generated/FREERTOS/tasks.c **** 
2485:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2486:../Dave/Generated/FREERTOS/tasks.c **** 	{
 3306              	 .loc 1 2486 0
 3307              	 .cfi_startproc
 3308              	 
 3309              	 
 3310 0000 80B5     	 push {r7,lr}
 3311              	.LCFI122:
 3312              	 .cfi_def_cfa_offset 8
 3313              	 .cfi_offset 7,-8
 3314              	 .cfi_offset 14,-4
 3315 0002 86B0     	 sub sp,sp,#24
 3316              	.LCFI123:
 3317              	 .cfi_def_cfa_offset 32
 3318 0004 00AF     	 add r7,sp,#0
 3319              	.LCFI124:
 3320              	 .cfi_def_cfa_register 7
 3321 0006 F860     	 str r0,[r7,#12]
 3322 0008 B960     	 str r1,[r7,#8]
 3323 000a 7A60     	 str r2,[r7,#4]
2487:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3324              	 .loc 1 2487 0
 3325 000c 0023     	 movs r3,#0
 3326 000e 7B61     	 str r3,[r7,#20]
 3327 0010 0623     	 movs r3,#6
 3328 0012 3B61     	 str r3,[r7,#16]
2488:../Dave/Generated/FREERTOS/tasks.c **** 
2489:../Dave/Generated/FREERTOS/tasks.c **** 		vTaskSuspendAll();
 3329              	 .loc 1 2489 0
 3330 0014 FFF7FEFF 	 bl vTaskSuspendAll
2490:../Dave/Generated/FREERTOS/tasks.c **** 		{
2491:../Dave/Generated/FREERTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2492:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 3331              	 .loc 1 2492 0
 3332 0018 3B4B     	 ldr r3,.L226
 3333 001a 1B68     	 ldr r3,[r3]
 3334 001c BA68     	 ldr r2,[r7,#8]
 3335 001e 9A42     	 cmp r2,r3
 3336 0020 6BD3     	 bcc .L222
 3337              	.L223:
2493:../Dave/Generated/FREERTOS/tasks.c **** 			{
2494:../Dave/Generated/FREERTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2495:../Dave/Generated/FREERTOS/tasks.c **** 				task in the Ready state. */
2496:../Dave/Generated/FREERTOS/tasks.c **** 				do
2497:../Dave/Generated/FREERTOS/tasks.c **** 				{
2498:../Dave/Generated/FREERTOS/tasks.c **** 					uxQueue--;
 3338              	 .loc 1 2498 0 discriminator 1
 3339 0022 3B69     	 ldr r3,[r7,#16]
 3340 0024 013B     	 subs r3,r3,#1
 3341 0026 3B61     	 str r3,[r7,#16]
2499:../Dave/Generated/FREERTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 3342              	 .loc 1 2499 0 discriminator 1
 3343 0028 7A69     	 ldr r2,[r7,#20]
 3344 002a 1346     	 mov r3,r2
 3345 002c DB00     	 lsls r3,r3,#3
 3346 002e 1344     	 add r3,r3,r2
 3347 0030 9B00     	 lsls r3,r3,#2
 3348 0032 1A46     	 mov r2,r3
 3349 0034 FB68     	 ldr r3,[r7,#12]
 3350 0036 9918     	 adds r1,r3,r2
 3351 0038 3A69     	 ldr r2,[r7,#16]
 3352 003a 1346     	 mov r3,r2
 3353 003c 9B00     	 lsls r3,r3,#2
 3354 003e 1344     	 add r3,r3,r2
 3355 0040 9B00     	 lsls r3,r3,#2
 3356 0042 324A     	 ldr r2,.L226+4
 3357 0044 1344     	 add r3,r3,r2
 3358 0046 0846     	 mov r0,r1
 3359 0048 1946     	 mov r1,r3
 3360 004a 0122     	 movs r2,#1
 3361 004c FFF7FEFF 	 bl prvListTasksWithinSingleList
 3362 0050 0246     	 mov r2,r0
 3363 0052 7B69     	 ldr r3,[r7,#20]
 3364 0054 1344     	 add r3,r3,r2
 3365 0056 7B61     	 str r3,[r7,#20]
2500:../Dave/Generated/FREERTOS/tasks.c **** 
2501:../Dave/Generated/FREERTOS/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 3366              	 .loc 1 2501 0 discriminator 1
 3367 0058 3B69     	 ldr r3,[r7,#16]
 3368 005a 002B     	 cmp r3,#0
 3369 005c E1D1     	 bne .L223
2502:../Dave/Generated/FREERTOS/tasks.c **** 
2503:../Dave/Generated/FREERTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2504:../Dave/Generated/FREERTOS/tasks.c **** 				task in the Blocked state. */
2505:../Dave/Generated/FREERTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 3370              	 .loc 1 2505 0
 3371 005e 7A69     	 ldr r2,[r7,#20]
 3372 0060 1346     	 mov r3,r2
 3373 0062 DB00     	 lsls r3,r3,#3
 3374 0064 1344     	 add r3,r3,r2
 3375 0066 9B00     	 lsls r3,r3,#2
 3376 0068 1A46     	 mov r2,r3
 3377 006a FB68     	 ldr r3,[r7,#12]
 3378 006c 1A44     	 add r2,r2,r3
 3379 006e 284B     	 ldr r3,.L226+8
 3380 0070 1B68     	 ldr r3,[r3]
 3381 0072 1046     	 mov r0,r2
 3382 0074 1946     	 mov r1,r3
 3383 0076 0222     	 movs r2,#2
 3384 0078 FFF7FEFF 	 bl prvListTasksWithinSingleList
 3385 007c 0246     	 mov r2,r0
 3386 007e 7B69     	 ldr r3,[r7,#20]
 3387 0080 1344     	 add r3,r3,r2
 3388 0082 7B61     	 str r3,[r7,#20]
2506:../Dave/Generated/FREERTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3389              	 .loc 1 2506 0
 3390 0084 7A69     	 ldr r2,[r7,#20]
 3391 0086 1346     	 mov r3,r2
 3392 0088 DB00     	 lsls r3,r3,#3
 3393 008a 1344     	 add r3,r3,r2
 3394 008c 9B00     	 lsls r3,r3,#2
 3395 008e 1A46     	 mov r2,r3
 3396 0090 FB68     	 ldr r3,[r7,#12]
 3397 0092 1A44     	 add r2,r2,r3
 3398 0094 1F4B     	 ldr r3,.L226+12
 3399 0096 1B68     	 ldr r3,[r3]
 3400 0098 1046     	 mov r0,r2
 3401 009a 1946     	 mov r1,r3
 3402 009c 0222     	 movs r2,#2
 3403 009e FFF7FEFF 	 bl prvListTasksWithinSingleList
 3404 00a2 0246     	 mov r2,r0
 3405 00a4 7B69     	 ldr r3,[r7,#20]
 3406 00a6 1344     	 add r3,r3,r2
 3407 00a8 7B61     	 str r3,[r7,#20]
2507:../Dave/Generated/FREERTOS/tasks.c **** 
2508:../Dave/Generated/FREERTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2509:../Dave/Generated/FREERTOS/tasks.c **** 				{
2510:../Dave/Generated/FREERTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2511:../Dave/Generated/FREERTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2512:../Dave/Generated/FREERTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 3408              	 .loc 1 2512 0
 3409 00aa 7A69     	 ldr r2,[r7,#20]
 3410 00ac 1346     	 mov r3,r2
 3411 00ae DB00     	 lsls r3,r3,#3
 3412 00b0 1344     	 add r3,r3,r2
 3413 00b2 9B00     	 lsls r3,r3,#2
 3414 00b4 1A46     	 mov r2,r3
 3415 00b6 FB68     	 ldr r3,[r7,#12]
 3416 00b8 1344     	 add r3,r3,r2
 3417 00ba 1846     	 mov r0,r3
 3418 00bc 1649     	 ldr r1,.L226+16
 3419 00be 0422     	 movs r2,#4
 3420 00c0 FFF7FEFF 	 bl prvListTasksWithinSingleList
 3421 00c4 0246     	 mov r2,r0
 3422 00c6 7B69     	 ldr r3,[r7,#20]
 3423 00c8 1344     	 add r3,r3,r2
 3424 00ca 7B61     	 str r3,[r7,#20]
2513:../Dave/Generated/FREERTOS/tasks.c **** 				}
2514:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
2515:../Dave/Generated/FREERTOS/tasks.c **** 
2516:../Dave/Generated/FREERTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2517:../Dave/Generated/FREERTOS/tasks.c **** 				{
2518:../Dave/Generated/FREERTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2519:../Dave/Generated/FREERTOS/tasks.c **** 					each task in the Suspended state. */
2520:../Dave/Generated/FREERTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 3425              	 .loc 1 2520 0
 3426 00cc 7A69     	 ldr r2,[r7,#20]
 3427 00ce 1346     	 mov r3,r2
 3428 00d0 DB00     	 lsls r3,r3,#3
 3429 00d2 1344     	 add r3,r3,r2
 3430 00d4 9B00     	 lsls r3,r3,#2
 3431 00d6 1A46     	 mov r2,r3
 3432 00d8 FB68     	 ldr r3,[r7,#12]
 3433 00da 1344     	 add r3,r3,r2
 3434 00dc 1846     	 mov r0,r3
 3435 00de 0F49     	 ldr r1,.L226+20
 3436 00e0 0322     	 movs r2,#3
 3437 00e2 FFF7FEFF 	 bl prvListTasksWithinSingleList
 3438 00e6 0246     	 mov r2,r0
 3439 00e8 7B69     	 ldr r3,[r7,#20]
 3440 00ea 1344     	 add r3,r3,r2
 3441 00ec 7B61     	 str r3,[r7,#20]
2521:../Dave/Generated/FREERTOS/tasks.c **** 				}
2522:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
2523:../Dave/Generated/FREERTOS/tasks.c **** 
2524:../Dave/Generated/FREERTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2525:../Dave/Generated/FREERTOS/tasks.c **** 				{
2526:../Dave/Generated/FREERTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
2527:../Dave/Generated/FREERTOS/tasks.c **** 					{
2528:../Dave/Generated/FREERTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2529:../Dave/Generated/FREERTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2530:../Dave/Generated/FREERTOS/tasks.c **** 						#else
2531:../Dave/Generated/FREERTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2532:../Dave/Generated/FREERTOS/tasks.c **** 						#endif
2533:../Dave/Generated/FREERTOS/tasks.c **** 					}
2534:../Dave/Generated/FREERTOS/tasks.c **** 				}
2535:../Dave/Generated/FREERTOS/tasks.c **** 				#else
2536:../Dave/Generated/FREERTOS/tasks.c **** 				{
2537:../Dave/Generated/FREERTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
 3442              	 .loc 1 2537 0
 3443 00ee 7B68     	 ldr r3,[r7,#4]
 3444 00f0 002B     	 cmp r3,#0
 3445 00f2 02D0     	 beq .L222
2538:../Dave/Generated/FREERTOS/tasks.c **** 					{
2539:../Dave/Generated/FREERTOS/tasks.c **** 						*pulTotalRunTime = 0;
 3446              	 .loc 1 2539 0
 3447 00f4 7B68     	 ldr r3,[r7,#4]
 3448 00f6 0022     	 movs r2,#0
 3449 00f8 1A60     	 str r2,[r3]
 3450              	.L222:
2540:../Dave/Generated/FREERTOS/tasks.c **** 					}
2541:../Dave/Generated/FREERTOS/tasks.c **** 				}
2542:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
2543:../Dave/Generated/FREERTOS/tasks.c **** 			}
2544:../Dave/Generated/FREERTOS/tasks.c **** 			else
2545:../Dave/Generated/FREERTOS/tasks.c **** 			{
2546:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2547:../Dave/Generated/FREERTOS/tasks.c **** 			}
2548:../Dave/Generated/FREERTOS/tasks.c **** 		}
2549:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xTaskResumeAll();
 3451              	 .loc 1 2549 0
 3452 00fa FFF7FEFF 	 bl xTaskResumeAll
2550:../Dave/Generated/FREERTOS/tasks.c **** 
2551:../Dave/Generated/FREERTOS/tasks.c **** 		return uxTask;
 3453              	 .loc 1 2551 0
 3454 00fe 7B69     	 ldr r3,[r7,#20]
2552:../Dave/Generated/FREERTOS/tasks.c **** 	}
 3455              	 .loc 1 2552 0
 3456 0100 1846     	 mov r0,r3
 3457 0102 1837     	 adds r7,r7,#24
 3458              	.LCFI125:
 3459              	 .cfi_def_cfa_offset 8
 3460 0104 BD46     	 mov sp,r7
 3461              	.LCFI126:
 3462              	 .cfi_def_cfa_register 13
 3463              	 
 3464 0106 80BD     	 pop {r7,pc}
 3465              	.L227:
 3466              	 .align 2
 3467              	.L226:
 3468 0108 00000000 	 .word uxCurrentNumberOfTasks
 3469 010c 00000000 	 .word pxReadyTasksLists
 3470 0110 00000000 	 .word pxDelayedTaskList
 3471 0114 00000000 	 .word pxOverflowDelayedTaskList
 3472 0118 00000000 	 .word xTasksWaitingTermination
 3473 011c 00000000 	 .word xSuspendedTaskList
 3474              	 .cfi_endproc
 3475              	.LFE161:
 3477              	 .section .text.xTaskGetIdleTaskHandle,"ax",%progbits
 3478              	 .align 2
 3479              	 .global xTaskGetIdleTaskHandle
 3480              	 .thumb
 3481              	 .thumb_func
 3483              	xTaskGetIdleTaskHandle:
 3484              	.LFB162:
2553:../Dave/Generated/FREERTOS/tasks.c **** 
2554:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2555:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2556:../Dave/Generated/FREERTOS/tasks.c **** 
2557:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2558:../Dave/Generated/FREERTOS/tasks.c **** 
2559:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2560:../Dave/Generated/FREERTOS/tasks.c **** 	{
 3485              	 .loc 1 2560 0
 3486              	 .cfi_startproc
 3487              	 
 3488              	 
 3489              	 
 3490 0000 80B4     	 push {r7}
 3491              	.LCFI127:
 3492              	 .cfi_def_cfa_offset 4
 3493              	 .cfi_offset 7,-4
 3494 0002 83B0     	 sub sp,sp,#12
 3495              	.LCFI128:
 3496              	 .cfi_def_cfa_offset 16
 3497 0004 00AF     	 add r7,sp,#0
 3498              	.LCFI129:
 3499              	 .cfi_def_cfa_register 7
2561:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2562:../Dave/Generated/FREERTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2563:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
 3500              	 .loc 1 2563 0
 3501 0006 0B4B     	 ldr r3,.L232
 3502 0008 1B68     	 ldr r3,[r3]
 3503 000a 002B     	 cmp r3,#0
 3504 000c 09D1     	 bne .L229
 3505              	.LBB164:
 3506              	.LBB165:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 3507              	 .loc 2 195 0 discriminator 1
 3508              	
 3509 000e 4FF0FC03 	 mov r3,#252
 3510 0012 83F31188 	 msr basepri,r3
 3511 0016 BFF36F8F 	 isb 
 3512 001a BFF34F8F 	 dsb 
 3513              	
 3514              	
 3515              	 .thumb
 3516 001e 7B60     	 str r3,[r7,#4]
 3517              	.L230:
 3518              	.LBE165:
 3519              	.LBE164:
 3520              	 .loc 1 2563 0 discriminator 1
 3521 0020 FEE7     	 b .L230
 3522              	.L229:
2564:../Dave/Generated/FREERTOS/tasks.c **** 		return xIdleTaskHandle;
 3523              	 .loc 1 2564 0
 3524 0022 044B     	 ldr r3,.L232
 3525 0024 1B68     	 ldr r3,[r3]
2565:../Dave/Generated/FREERTOS/tasks.c **** 	}
 3526              	 .loc 1 2565 0
 3527 0026 1846     	 mov r0,r3
 3528 0028 0C37     	 adds r7,r7,#12
 3529              	.LCFI130:
 3530              	 .cfi_def_cfa_offset 4
 3531 002a BD46     	 mov sp,r7
 3532              	.LCFI131:
 3533              	 .cfi_def_cfa_register 13
 3534              	 
 3535 002c 5DF8047B 	 ldr r7,[sp],#4
 3536              	.LCFI132:
 3537              	 .cfi_restore 7
 3538              	 .cfi_def_cfa_offset 0
 3539 0030 7047     	 bx lr
 3540              	.L233:
 3541 0032 00BF     	 .align 2
 3542              	.L232:
 3543 0034 00000000 	 .word xIdleTaskHandle
 3544              	 .cfi_endproc
 3545              	.LFE162:
 3547              	 .section .text.xTaskAbortDelay,"ax",%progbits
 3548              	 .align 2
 3549              	 .global xTaskAbortDelay
 3550              	 .thumb
 3551              	 .thumb_func
 3553              	xTaskAbortDelay:
 3554              	.LFB163:
2566:../Dave/Generated/FREERTOS/tasks.c **** 
2567:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2568:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2569:../Dave/Generated/FREERTOS/tasks.c **** 
2570:../Dave/Generated/FREERTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2571:../Dave/Generated/FREERTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2572:../Dave/Generated/FREERTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2573:../Dave/Generated/FREERTOS/tasks.c **** 1. */
2574:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2575:../Dave/Generated/FREERTOS/tasks.c **** 
2576:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2577:../Dave/Generated/FREERTOS/tasks.c **** 	{
2578:../Dave/Generated/FREERTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2579:../Dave/Generated/FREERTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2580:../Dave/Generated/FREERTOS/tasks.c **** 		each stepped tick. */
2581:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2582:../Dave/Generated/FREERTOS/tasks.c **** 		xTickCount += xTicksToJump;
2583:../Dave/Generated/FREERTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2584:../Dave/Generated/FREERTOS/tasks.c **** 	}
2585:../Dave/Generated/FREERTOS/tasks.c **** 
2586:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2587:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2588:../Dave/Generated/FREERTOS/tasks.c **** 
2589:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2590:../Dave/Generated/FREERTOS/tasks.c **** 
2591:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2592:../Dave/Generated/FREERTOS/tasks.c **** 	{
 3555              	 .loc 1 2592 0
 3556              	 .cfi_startproc
 3557              	 
 3558              	 
 3559 0000 80B5     	 push {r7,lr}
 3560              	.LCFI133:
 3561              	 .cfi_def_cfa_offset 8
 3562              	 .cfi_offset 7,-8
 3563              	 .cfi_offset 14,-4
 3564 0002 86B0     	 sub sp,sp,#24
 3565              	.LCFI134:
 3566              	 .cfi_def_cfa_offset 32
 3567 0004 00AF     	 add r7,sp,#0
 3568              	.LCFI135:
 3569              	 .cfi_def_cfa_register 7
 3570 0006 7860     	 str r0,[r7,#4]
2593:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB = xTask;
 3571              	 .loc 1 2593 0
 3572 0008 7B68     	 ldr r3,[r7,#4]
 3573 000a 3B61     	 str r3,[r7,#16]
2594:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
2595:../Dave/Generated/FREERTOS/tasks.c **** 
2596:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTCB );
 3574              	 .loc 1 2596 0
 3575 000c 3B69     	 ldr r3,[r7,#16]
 3576 000e 002B     	 cmp r3,#0
 3577 0010 09D1     	 bne .L235
 3578              	.LBB166:
 3579              	.LBB167:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 3580              	 .loc 2 195 0 discriminator 1
 3581              	
 3582 0012 4FF0FC03 	 mov r3,#252
 3583 0016 83F31188 	 msr basepri,r3
 3584 001a BFF36F8F 	 isb 
 3585 001e BFF34F8F 	 dsb 
 3586              	
 3587              	
 3588              	 .thumb
 3589 0022 FB60     	 str r3,[r7,#12]
 3590              	.L236:
 3591              	.LBE167:
 3592              	.LBE166:
 3593              	 .loc 1 2596 0 discriminator 1
 3594 0024 FEE7     	 b .L236
 3595              	.L235:
2597:../Dave/Generated/FREERTOS/tasks.c **** 
2598:../Dave/Generated/FREERTOS/tasks.c **** 		vTaskSuspendAll();
 3596              	 .loc 1 2598 0
 3597 0026 FFF7FEFF 	 bl vTaskSuspendAll
2599:../Dave/Generated/FREERTOS/tasks.c **** 		{
2600:../Dave/Generated/FREERTOS/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2601:../Dave/Generated/FREERTOS/tasks.c **** 			it is actually in the Blocked state. */
2602:../Dave/Generated/FREERTOS/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
 3598              	 .loc 1 2602 0
 3599 002a 7868     	 ldr r0,[r7,#4]
 3600 002c FFF7FEFF 	 bl eTaskGetState
 3601 0030 0346     	 mov r3,r0
 3602 0032 022B     	 cmp r3,#2
 3603 0034 3BD1     	 bne .L237
2603:../Dave/Generated/FREERTOS/tasks.c **** 			{
2604:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdPASS;
 3604              	 .loc 1 2604 0
 3605 0036 0123     	 movs r3,#1
 3606 0038 7B61     	 str r3,[r7,#20]
2605:../Dave/Generated/FREERTOS/tasks.c **** 
2606:../Dave/Generated/FREERTOS/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2607:../Dave/Generated/FREERTOS/tasks.c **** 				interrupt won't touch the xStateListItem because the
2608:../Dave/Generated/FREERTOS/tasks.c **** 				scheduler is suspended. */
2609:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3607              	 .loc 1 2609 0
 3608 003a 3B69     	 ldr r3,[r7,#16]
 3609 003c 0433     	 adds r3,r3,#4
 3610 003e 1846     	 mov r0,r3
 3611 0040 FFF7FEFF 	 bl uxListRemove
2610:../Dave/Generated/FREERTOS/tasks.c **** 
2611:../Dave/Generated/FREERTOS/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2612:../Dave/Generated/FREERTOS/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2613:../Dave/Generated/FREERTOS/tasks.c **** 				even though the scheduler is suspended, so a critical section
2614:../Dave/Generated/FREERTOS/tasks.c **** 				is used. */
2615:../Dave/Generated/FREERTOS/tasks.c **** 				taskENTER_CRITICAL();
 3612              	 .loc 1 2615 0
 3613 0044 FFF7FEFF 	 bl vPortEnterCritical
2616:../Dave/Generated/FREERTOS/tasks.c **** 				{
2617:../Dave/Generated/FREERTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3614              	 .loc 1 2617 0
 3615 0048 3B69     	 ldr r3,[r7,#16]
 3616 004a 9B6A     	 ldr r3,[r3,#40]
 3617 004c 002B     	 cmp r3,#0
 3618 004e 08D0     	 beq .L238
2618:../Dave/Generated/FREERTOS/tasks.c **** 					{
2619:../Dave/Generated/FREERTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3619              	 .loc 1 2619 0
 3620 0050 3B69     	 ldr r3,[r7,#16]
 3621 0052 1833     	 adds r3,r3,#24
 3622 0054 1846     	 mov r0,r3
 3623 0056 FFF7FEFF 	 bl uxListRemove
2620:../Dave/Generated/FREERTOS/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
 3624              	 .loc 1 2620 0
 3625 005a 3B69     	 ldr r3,[r7,#16]
 3626 005c 0122     	 movs r2,#1
 3627 005e 83F86D20 	 strb r2,[r3,#109]
 3628              	.L238:
2621:../Dave/Generated/FREERTOS/tasks.c **** 					}
2622:../Dave/Generated/FREERTOS/tasks.c **** 					else
2623:../Dave/Generated/FREERTOS/tasks.c **** 					{
2624:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2625:../Dave/Generated/FREERTOS/tasks.c **** 					}
2626:../Dave/Generated/FREERTOS/tasks.c **** 				}
2627:../Dave/Generated/FREERTOS/tasks.c **** 				taskEXIT_CRITICAL();
 3629              	 .loc 1 2627 0
 3630 0062 FFF7FEFF 	 bl vPortExitCritical
2628:../Dave/Generated/FREERTOS/tasks.c **** 
2629:../Dave/Generated/FREERTOS/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2630:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 3631              	 .loc 1 2630 0
 3632 0066 3B69     	 ldr r3,[r7,#16]
 3633 0068 DB6A     	 ldr r3,[r3,#44]
 3634 006a 1A46     	 mov r2,r3
 3635 006c 0123     	 movs r3,#1
 3636 006e 03FA02F2 	 lsl r2,r3,r2
 3637 0072 134B     	 ldr r3,.L241
 3638 0074 1B68     	 ldr r3,[r3]
 3639 0076 1343     	 orrs r3,r3,r2
 3640 0078 114A     	 ldr r2,.L241
 3641 007a 1360     	 str r3,[r2]
 3642 007c 3B69     	 ldr r3,[r7,#16]
 3643 007e DA6A     	 ldr r2,[r3,#44]
 3644 0080 1346     	 mov r3,r2
 3645 0082 9B00     	 lsls r3,r3,#2
 3646 0084 1344     	 add r3,r3,r2
 3647 0086 9B00     	 lsls r3,r3,#2
 3648 0088 0E4A     	 ldr r2,.L241+4
 3649 008a 1A44     	 add r2,r2,r3
 3650 008c 3B69     	 ldr r3,[r7,#16]
 3651 008e 0433     	 adds r3,r3,#4
 3652 0090 1046     	 mov r0,r2
 3653 0092 1946     	 mov r1,r3
 3654 0094 FFF7FEFF 	 bl vListInsertEnd
2631:../Dave/Generated/FREERTOS/tasks.c **** 
2632:../Dave/Generated/FREERTOS/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2633:../Dave/Generated/FREERTOS/tasks.c **** 				switch if preemption is turned off. */
2634:../Dave/Generated/FREERTOS/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2635:../Dave/Generated/FREERTOS/tasks.c **** 				{
2636:../Dave/Generated/FREERTOS/tasks.c **** 					/* Preemption is on, but a context switch should only be
2637:../Dave/Generated/FREERTOS/tasks.c **** 					performed if the unblocked task has a priority that is
2638:../Dave/Generated/FREERTOS/tasks.c **** 					equal to or higher than the currently executing task. */
2639:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 3655              	 .loc 1 2639 0
 3656 0098 3B69     	 ldr r3,[r7,#16]
 3657 009a DA6A     	 ldr r2,[r3,#44]
 3658 009c 0A4B     	 ldr r3,.L241+8
 3659 009e 1B68     	 ldr r3,[r3]
 3660 00a0 DB6A     	 ldr r3,[r3,#44]
 3661 00a2 9A42     	 cmp r2,r3
 3662 00a4 05D9     	 bls .L239
2640:../Dave/Generated/FREERTOS/tasks.c **** 					{
2641:../Dave/Generated/FREERTOS/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2642:../Dave/Generated/FREERTOS/tasks.c **** 						is unsuspended. */
2643:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldPending = pdTRUE;
 3663              	 .loc 1 2643 0
 3664 00a6 094B     	 ldr r3,.L241+12
 3665 00a8 0122     	 movs r2,#1
 3666 00aa 1A60     	 str r2,[r3]
 3667 00ac 01E0     	 b .L239
 3668              	.L237:
2644:../Dave/Generated/FREERTOS/tasks.c **** 					}
2645:../Dave/Generated/FREERTOS/tasks.c **** 					else
2646:../Dave/Generated/FREERTOS/tasks.c **** 					{
2647:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2648:../Dave/Generated/FREERTOS/tasks.c **** 					}
2649:../Dave/Generated/FREERTOS/tasks.c **** 				}
2650:../Dave/Generated/FREERTOS/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2651:../Dave/Generated/FREERTOS/tasks.c **** 			}
2652:../Dave/Generated/FREERTOS/tasks.c **** 			else
2653:../Dave/Generated/FREERTOS/tasks.c **** 			{
2654:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdFAIL;
 3669              	 .loc 1 2654 0
 3670 00ae 0023     	 movs r3,#0
 3671 00b0 7B61     	 str r3,[r7,#20]
 3672              	.L239:
2655:../Dave/Generated/FREERTOS/tasks.c **** 			}
2656:../Dave/Generated/FREERTOS/tasks.c **** 		}
2657:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xTaskResumeAll();
 3673              	 .loc 1 2657 0
 3674 00b2 FFF7FEFF 	 bl xTaskResumeAll
2658:../Dave/Generated/FREERTOS/tasks.c **** 
2659:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 3675              	 .loc 1 2659 0
 3676 00b6 7B69     	 ldr r3,[r7,#20]
2660:../Dave/Generated/FREERTOS/tasks.c **** 	}
 3677              	 .loc 1 2660 0
 3678 00b8 1846     	 mov r0,r3
 3679 00ba 1837     	 adds r7,r7,#24
 3680              	.LCFI136:
 3681              	 .cfi_def_cfa_offset 8
 3682 00bc BD46     	 mov sp,r7
 3683              	.LCFI137:
 3684              	 .cfi_def_cfa_register 13
 3685              	 
 3686 00be 80BD     	 pop {r7,pc}
 3687              	.L242:
 3688              	 .align 2
 3689              	.L241:
 3690 00c0 00000000 	 .word uxTopReadyPriority
 3691 00c4 00000000 	 .word pxReadyTasksLists
 3692 00c8 00000000 	 .word pxCurrentTCB
 3693 00cc 00000000 	 .word xYieldPending
 3694              	 .cfi_endproc
 3695              	.LFE163:
 3697              	 .section .text.xTaskIncrementTick,"ax",%progbits
 3698              	 .align 2
 3699              	 .global xTaskIncrementTick
 3700              	 .thumb
 3701              	 .thumb_func
 3703              	xTaskIncrementTick:
 3704              	.LFB164:
2661:../Dave/Generated/FREERTOS/tasks.c **** 
2662:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2663:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2664:../Dave/Generated/FREERTOS/tasks.c **** 
2665:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2666:../Dave/Generated/FREERTOS/tasks.c **** {
 3705              	 .loc 1 2666 0
 3706              	 .cfi_startproc
 3707              	 
 3708              	 
 3709 0000 80B5     	 push {r7,lr}
 3710              	.LCFI138:
 3711              	 .cfi_def_cfa_offset 8
 3712              	 .cfi_offset 7,-8
 3713              	 .cfi_offset 14,-4
 3714 0002 86B0     	 sub sp,sp,#24
 3715              	.LCFI139:
 3716              	 .cfi_def_cfa_offset 32
 3717 0004 00AF     	 add r7,sp,#0
 3718              	.LCFI140:
 3719              	 .cfi_def_cfa_register 7
2667:../Dave/Generated/FREERTOS/tasks.c **** TCB_t * pxTCB;
2668:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xItemValue;
2669:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3720              	 .loc 1 2669 0
 3721 0006 0023     	 movs r3,#0
 3722 0008 7B61     	 str r3,[r7,#20]
2670:../Dave/Generated/FREERTOS/tasks.c **** 
2671:../Dave/Generated/FREERTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2672:../Dave/Generated/FREERTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2673:../Dave/Generated/FREERTOS/tasks.c **** 	tasks to be unblocked. */
2674:../Dave/Generated/FREERTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2675:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3723              	 .loc 1 2675 0
 3724 000a 4F4B     	 ldr r3,.L258
 3725 000c 1B68     	 ldr r3,[r3]
 3726 000e 002B     	 cmp r3,#0
 3727 0010 40F08980 	 bne .L244
 3728              	.LBB168:
2676:../Dave/Generated/FREERTOS/tasks.c **** 	{
2677:../Dave/Generated/FREERTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2678:../Dave/Generated/FREERTOS/tasks.c **** 		block. */
2679:../Dave/Generated/FREERTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3729              	 .loc 1 2679 0
 3730 0014 4D4B     	 ldr r3,.L258+4
 3731 0016 1B68     	 ldr r3,[r3]
 3732 0018 0133     	 adds r3,r3,#1
 3733 001a 3B61     	 str r3,[r7,#16]
2680:../Dave/Generated/FREERTOS/tasks.c **** 
2681:../Dave/Generated/FREERTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2682:../Dave/Generated/FREERTOS/tasks.c **** 		delayed lists if it wraps to 0. */
2683:../Dave/Generated/FREERTOS/tasks.c **** 		xTickCount = xConstTickCount;
 3734              	 .loc 1 2683 0
 3735 001c 4B4A     	 ldr r2,.L258+4
 3736 001e 3B69     	 ldr r3,[r7,#16]
 3737 0020 1360     	 str r3,[r2]
2684:../Dave/Generated/FREERTOS/tasks.c **** 
2685:../Dave/Generated/FREERTOS/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3738              	 .loc 1 2685 0
 3739 0022 3B69     	 ldr r3,[r7,#16]
 3740 0024 002B     	 cmp r3,#0
 3741 0026 1FD1     	 bne .L245
 3742              	.LBB169:
2686:../Dave/Generated/FREERTOS/tasks.c **** 		{
2687:../Dave/Generated/FREERTOS/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3743              	 .loc 1 2687 0
 3744 0028 494B     	 ldr r3,.L258+8
 3745 002a 1B68     	 ldr r3,[r3]
 3746 002c 1B68     	 ldr r3,[r3]
 3747 002e 002B     	 cmp r3,#0
 3748 0030 09D0     	 beq .L246
 3749              	.LBB170:
 3750              	.LBB171:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 3751              	 .loc 2 195 0 discriminator 1
 3752              	
 3753 0032 4FF0FC03 	 mov r3,#252
 3754 0036 83F31188 	 msr basepri,r3
 3755 003a BFF36F8F 	 isb 
 3756 003e BFF34F8F 	 dsb 
 3757              	
 3758              	
 3759              	 .thumb
 3760 0042 3B60     	 str r3,[r7]
 3761              	.L247:
 3762              	.LBE171:
 3763              	.LBE170:
 3764              	 .loc 1 2687 0 discriminator 1
 3765 0044 FEE7     	 b .L247
 3766              	.L246:
 3767              	 .loc 1 2687 0 is_stmt 0 discriminator 2
 3768 0046 424B     	 ldr r3,.L258+8
 3769 0048 1B68     	 ldr r3,[r3]
 3770 004a FB60     	 str r3,[r7,#12]
 3771 004c 414B     	 ldr r3,.L258+12
 3772 004e 1B68     	 ldr r3,[r3]
 3773 0050 3F4A     	 ldr r2,.L258+8
 3774 0052 1360     	 str r3,[r2]
 3775 0054 3F4A     	 ldr r2,.L258+12
 3776 0056 FB68     	 ldr r3,[r7,#12]
 3777 0058 1360     	 str r3,[r2]
 3778 005a 3F4B     	 ldr r3,.L258+16
 3779 005c 1B68     	 ldr r3,[r3]
 3780 005e 0133     	 adds r3,r3,#1
 3781 0060 3D4A     	 ldr r2,.L258+16
 3782 0062 1360     	 str r3,[r2]
 3783 0064 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 3784              	.L245:
 3785              	.LBE169:
2688:../Dave/Generated/FREERTOS/tasks.c **** 		}
2689:../Dave/Generated/FREERTOS/tasks.c **** 		else
2690:../Dave/Generated/FREERTOS/tasks.c **** 		{
2691:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2692:../Dave/Generated/FREERTOS/tasks.c **** 		}
2693:../Dave/Generated/FREERTOS/tasks.c **** 
2694:../Dave/Generated/FREERTOS/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2695:../Dave/Generated/FREERTOS/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2696:../Dave/Generated/FREERTOS/tasks.c **** 		has been found whose block time has not expired there is no need to
2697:../Dave/Generated/FREERTOS/tasks.c **** 		look any further down the list. */
2698:../Dave/Generated/FREERTOS/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3786              	 .loc 1 2698 0 is_stmt 1
 3787 0068 3C4B     	 ldr r3,.L258+20
 3788 006a 1B68     	 ldr r3,[r3]
 3789 006c 3A69     	 ldr r2,[r7,#16]
 3790 006e 9A42     	 cmp r2,r3
 3791 0070 4AD3     	 bcc .L248
 3792              	.L253:
2699:../Dave/Generated/FREERTOS/tasks.c **** 		{
2700:../Dave/Generated/FREERTOS/tasks.c **** 			for( ;; )
2701:../Dave/Generated/FREERTOS/tasks.c **** 			{
2702:../Dave/Generated/FREERTOS/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3793              	 .loc 1 2702 0
 3794 0072 374B     	 ldr r3,.L258+8
 3795 0074 1B68     	 ldr r3,[r3]
 3796 0076 1B68     	 ldr r3,[r3]
 3797 0078 002B     	 cmp r3,#0
 3798 007a 04D1     	 bne .L249
2703:../Dave/Generated/FREERTOS/tasks.c **** 				{
2704:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2705:../Dave/Generated/FREERTOS/tasks.c **** 					to the maximum possible value so it is extremely
2706:../Dave/Generated/FREERTOS/tasks.c **** 					unlikely that the
2707:../Dave/Generated/FREERTOS/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2708:../Dave/Generated/FREERTOS/tasks.c **** 					next time through. */
2709:../Dave/Generated/FREERTOS/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3799              	 .loc 1 2709 0
 3800 007c 374B     	 ldr r3,.L258+20
 3801 007e 4FF0FF32 	 mov r2,#-1
 3802 0082 1A60     	 str r2,[r3]
2710:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 3803              	 .loc 1 2710 0
 3804 0084 40E0     	 b .L248
 3805              	.L249:
2711:../Dave/Generated/FREERTOS/tasks.c **** 				}
2712:../Dave/Generated/FREERTOS/tasks.c **** 				else
2713:../Dave/Generated/FREERTOS/tasks.c **** 				{
2714:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed list is not empty, get the value of the
2715:../Dave/Generated/FREERTOS/tasks.c **** 					item at the head of the delayed list.  This is the time
2716:../Dave/Generated/FREERTOS/tasks.c **** 					at which the task at the head of the delayed list must
2717:../Dave/Generated/FREERTOS/tasks.c **** 					be removed from the Blocked state. */
2718:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 3806              	 .loc 1 2718 0
 3807 0086 324B     	 ldr r3,.L258+8
 3808 0088 1B68     	 ldr r3,[r3]
 3809 008a DB68     	 ldr r3,[r3,#12]
 3810 008c DB68     	 ldr r3,[r3,#12]
 3811 008e BB60     	 str r3,[r7,#8]
2719:../Dave/Generated/FREERTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3812              	 .loc 1 2719 0
 3813 0090 BB68     	 ldr r3,[r7,#8]
 3814 0092 5B68     	 ldr r3,[r3,#4]
 3815 0094 7B60     	 str r3,[r7,#4]
2720:../Dave/Generated/FREERTOS/tasks.c **** 
2721:../Dave/Generated/FREERTOS/tasks.c **** 					if( xConstTickCount < xItemValue )
 3816              	 .loc 1 2721 0
 3817 0096 3A69     	 ldr r2,[r7,#16]
 3818 0098 7B68     	 ldr r3,[r7,#4]
 3819 009a 9A42     	 cmp r2,r3
 3820 009c 03D2     	 bcs .L250
2722:../Dave/Generated/FREERTOS/tasks.c **** 					{
2723:../Dave/Generated/FREERTOS/tasks.c **** 						/* It is not time to unblock this item yet, but the
2724:../Dave/Generated/FREERTOS/tasks.c **** 						item value is the time at which the task at the head
2725:../Dave/Generated/FREERTOS/tasks.c **** 						of the blocked list must be removed from the Blocked
2726:../Dave/Generated/FREERTOS/tasks.c **** 						state -	so record the item value in
2727:../Dave/Generated/FREERTOS/tasks.c **** 						xNextTaskUnblockTime. */
2728:../Dave/Generated/FREERTOS/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3821              	 .loc 1 2728 0
 3822 009e 2F4A     	 ldr r2,.L258+20
 3823 00a0 7B68     	 ldr r3,[r7,#4]
 3824 00a2 1360     	 str r3,[r2]
2729:../Dave/Generated/FREERTOS/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3825              	 .loc 1 2729 0
 3826 00a4 30E0     	 b .L248
 3827              	.L250:
2730:../Dave/Generated/FREERTOS/tasks.c **** 					}
2731:../Dave/Generated/FREERTOS/tasks.c **** 					else
2732:../Dave/Generated/FREERTOS/tasks.c **** 					{
2733:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2734:../Dave/Generated/FREERTOS/tasks.c **** 					}
2735:../Dave/Generated/FREERTOS/tasks.c **** 
2736:../Dave/Generated/FREERTOS/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2737:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3828              	 .loc 1 2737 0
 3829 00a6 BB68     	 ldr r3,[r7,#8]
 3830 00a8 0433     	 adds r3,r3,#4
 3831 00aa 1846     	 mov r0,r3
 3832 00ac FFF7FEFF 	 bl uxListRemove
2738:../Dave/Generated/FREERTOS/tasks.c **** 
2739:../Dave/Generated/FREERTOS/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2740:../Dave/Generated/FREERTOS/tasks.c **** 					it from the event list. */
2741:../Dave/Generated/FREERTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3833              	 .loc 1 2741 0
 3834 00b0 BB68     	 ldr r3,[r7,#8]
 3835 00b2 9B6A     	 ldr r3,[r3,#40]
 3836 00b4 002B     	 cmp r3,#0
 3837 00b6 04D0     	 beq .L251
2742:../Dave/Generated/FREERTOS/tasks.c **** 					{
2743:../Dave/Generated/FREERTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3838              	 .loc 1 2743 0
 3839 00b8 BB68     	 ldr r3,[r7,#8]
 3840 00ba 1833     	 adds r3,r3,#24
 3841 00bc 1846     	 mov r0,r3
 3842 00be FFF7FEFF 	 bl uxListRemove
 3843              	.L251:
2744:../Dave/Generated/FREERTOS/tasks.c **** 					}
2745:../Dave/Generated/FREERTOS/tasks.c **** 					else
2746:../Dave/Generated/FREERTOS/tasks.c **** 					{
2747:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2748:../Dave/Generated/FREERTOS/tasks.c **** 					}
2749:../Dave/Generated/FREERTOS/tasks.c **** 
2750:../Dave/Generated/FREERTOS/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2751:../Dave/Generated/FREERTOS/tasks.c **** 					list. */
2752:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3844              	 .loc 1 2752 0
 3845 00c2 BB68     	 ldr r3,[r7,#8]
 3846 00c4 DB6A     	 ldr r3,[r3,#44]
 3847 00c6 1A46     	 mov r2,r3
 3848 00c8 0123     	 movs r3,#1
 3849 00ca 03FA02F2 	 lsl r2,r3,r2
 3850 00ce 244B     	 ldr r3,.L258+24
 3851 00d0 1B68     	 ldr r3,[r3]
 3852 00d2 1343     	 orrs r3,r3,r2
 3853 00d4 224A     	 ldr r2,.L258+24
 3854 00d6 1360     	 str r3,[r2]
 3855 00d8 BB68     	 ldr r3,[r7,#8]
 3856 00da DA6A     	 ldr r2,[r3,#44]
 3857 00dc 1346     	 mov r3,r2
 3858 00de 9B00     	 lsls r3,r3,#2
 3859 00e0 1344     	 add r3,r3,r2
 3860 00e2 9B00     	 lsls r3,r3,#2
 3861 00e4 1F4A     	 ldr r2,.L258+28
 3862 00e6 1A44     	 add r2,r2,r3
 3863 00e8 BB68     	 ldr r3,[r7,#8]
 3864 00ea 0433     	 adds r3,r3,#4
 3865 00ec 1046     	 mov r0,r2
 3866 00ee 1946     	 mov r1,r3
 3867 00f0 FFF7FEFF 	 bl vListInsertEnd
2753:../Dave/Generated/FREERTOS/tasks.c **** 
2754:../Dave/Generated/FREERTOS/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2755:../Dave/Generated/FREERTOS/tasks.c **** 					context switch if preemption is turned off. */
2756:../Dave/Generated/FREERTOS/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2757:../Dave/Generated/FREERTOS/tasks.c **** 					{
2758:../Dave/Generated/FREERTOS/tasks.c **** 						/* Preemption is on, but a context switch should
2759:../Dave/Generated/FREERTOS/tasks.c **** 						only be performed if the unblocked task has a
2760:../Dave/Generated/FREERTOS/tasks.c **** 						priority that is equal to or higher than the
2761:../Dave/Generated/FREERTOS/tasks.c **** 						currently executing task. */
2762:../Dave/Generated/FREERTOS/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3868              	 .loc 1 2762 0
 3869 00f4 BB68     	 ldr r3,[r7,#8]
 3870 00f6 DA6A     	 ldr r2,[r3,#44]
 3871 00f8 1B4B     	 ldr r3,.L258+32
 3872 00fa 1B68     	 ldr r3,[r3]
 3873 00fc DB6A     	 ldr r3,[r3,#44]
 3874 00fe 9A42     	 cmp r2,r3
 3875 0100 01D3     	 bcc .L252
2763:../Dave/Generated/FREERTOS/tasks.c **** 						{
2764:../Dave/Generated/FREERTOS/tasks.c **** 							xSwitchRequired = pdTRUE;
 3876              	 .loc 1 2764 0
 3877 0102 0123     	 movs r3,#1
 3878 0104 7B61     	 str r3,[r7,#20]
 3879              	.L252:
2765:../Dave/Generated/FREERTOS/tasks.c **** 						}
2766:../Dave/Generated/FREERTOS/tasks.c **** 						else
2767:../Dave/Generated/FREERTOS/tasks.c **** 						{
2768:../Dave/Generated/FREERTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2769:../Dave/Generated/FREERTOS/tasks.c **** 						}
2770:../Dave/Generated/FREERTOS/tasks.c **** 					}
2771:../Dave/Generated/FREERTOS/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2772:../Dave/Generated/FREERTOS/tasks.c **** 				}
2773:../Dave/Generated/FREERTOS/tasks.c **** 			}
 3880              	 .loc 1 2773 0
 3881 0106 B4E7     	 b .L253
 3882              	.L248:
2774:../Dave/Generated/FREERTOS/tasks.c **** 		}
2775:../Dave/Generated/FREERTOS/tasks.c **** 
2776:../Dave/Generated/FREERTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2777:../Dave/Generated/FREERTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2778:../Dave/Generated/FREERTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
2779:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2780:../Dave/Generated/FREERTOS/tasks.c **** 		{
2781:../Dave/Generated/FREERTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3883              	 .loc 1 2781 0
 3884 0108 174B     	 ldr r3,.L258+32
 3885 010a 1B68     	 ldr r3,[r3]
 3886 010c DA6A     	 ldr r2,[r3,#44]
 3887 010e 1549     	 ldr r1,.L258+28
 3888 0110 1346     	 mov r3,r2
 3889 0112 9B00     	 lsls r3,r3,#2
 3890 0114 1344     	 add r3,r3,r2
 3891 0116 9B00     	 lsls r3,r3,#2
 3892 0118 0B44     	 add r3,r3,r1
 3893 011a 1B68     	 ldr r3,[r3]
 3894 011c 012B     	 cmp r3,#1
 3895 011e 01D9     	 bls .L254
2782:../Dave/Generated/FREERTOS/tasks.c **** 			{
2783:../Dave/Generated/FREERTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
 3896              	 .loc 1 2783 0
 3897 0120 0123     	 movs r3,#1
 3898 0122 7B61     	 str r3,[r7,#20]
 3899              	.L254:
 3900              	.LBE168:
 3901 0124 04E0     	 b .L255
 3902              	.L244:
2784:../Dave/Generated/FREERTOS/tasks.c **** 			}
2785:../Dave/Generated/FREERTOS/tasks.c **** 			else
2786:../Dave/Generated/FREERTOS/tasks.c **** 			{
2787:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2788:../Dave/Generated/FREERTOS/tasks.c **** 			}
2789:../Dave/Generated/FREERTOS/tasks.c **** 		}
2790:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2791:../Dave/Generated/FREERTOS/tasks.c **** 
2792:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2793:../Dave/Generated/FREERTOS/tasks.c **** 		{
2794:../Dave/Generated/FREERTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2795:../Dave/Generated/FREERTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2796:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2797:../Dave/Generated/FREERTOS/tasks.c **** 			{
2798:../Dave/Generated/FREERTOS/tasks.c **** 				vApplicationTickHook();
2799:../Dave/Generated/FREERTOS/tasks.c **** 			}
2800:../Dave/Generated/FREERTOS/tasks.c **** 			else
2801:../Dave/Generated/FREERTOS/tasks.c **** 			{
2802:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2803:../Dave/Generated/FREERTOS/tasks.c **** 			}
2804:../Dave/Generated/FREERTOS/tasks.c **** 		}
2805:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2806:../Dave/Generated/FREERTOS/tasks.c **** 	}
2807:../Dave/Generated/FREERTOS/tasks.c **** 	else
2808:../Dave/Generated/FREERTOS/tasks.c **** 	{
2809:../Dave/Generated/FREERTOS/tasks.c **** 		++uxPendedTicks;
 3903              	 .loc 1 2809 0
 3904 0126 114B     	 ldr r3,.L258+36
 3905 0128 1B68     	 ldr r3,[r3]
 3906 012a 0133     	 adds r3,r3,#1
 3907 012c 0F4A     	 ldr r2,.L258+36
 3908 012e 1360     	 str r3,[r2]
 3909              	.L255:
2810:../Dave/Generated/FREERTOS/tasks.c **** 
2811:../Dave/Generated/FREERTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2812:../Dave/Generated/FREERTOS/tasks.c **** 		scheduler is locked. */
2813:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2814:../Dave/Generated/FREERTOS/tasks.c **** 		{
2815:../Dave/Generated/FREERTOS/tasks.c **** 			vApplicationTickHook();
2816:../Dave/Generated/FREERTOS/tasks.c **** 		}
2817:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
2818:../Dave/Generated/FREERTOS/tasks.c **** 	}
2819:../Dave/Generated/FREERTOS/tasks.c **** 
2820:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2821:../Dave/Generated/FREERTOS/tasks.c **** 	{
2822:../Dave/Generated/FREERTOS/tasks.c **** 		if( xYieldPending != pdFALSE )
 3910              	 .loc 1 2822 0
 3911 0130 0F4B     	 ldr r3,.L258+40
 3912 0132 1B68     	 ldr r3,[r3]
 3913 0134 002B     	 cmp r3,#0
 3914 0136 01D0     	 beq .L256
2823:../Dave/Generated/FREERTOS/tasks.c **** 		{
2824:../Dave/Generated/FREERTOS/tasks.c **** 			xSwitchRequired = pdTRUE;
 3915              	 .loc 1 2824 0
 3916 0138 0123     	 movs r3,#1
 3917 013a 7B61     	 str r3,[r7,#20]
 3918              	.L256:
2825:../Dave/Generated/FREERTOS/tasks.c **** 		}
2826:../Dave/Generated/FREERTOS/tasks.c **** 		else
2827:../Dave/Generated/FREERTOS/tasks.c **** 		{
2828:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2829:../Dave/Generated/FREERTOS/tasks.c **** 		}
2830:../Dave/Generated/FREERTOS/tasks.c **** 	}
2831:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2832:../Dave/Generated/FREERTOS/tasks.c **** 
2833:../Dave/Generated/FREERTOS/tasks.c **** 	return xSwitchRequired;
 3919              	 .loc 1 2833 0
 3920 013c 7B69     	 ldr r3,[r7,#20]
2834:../Dave/Generated/FREERTOS/tasks.c **** }
 3921              	 .loc 1 2834 0
 3922 013e 1846     	 mov r0,r3
 3923 0140 1837     	 adds r7,r7,#24
 3924              	.LCFI141:
 3925              	 .cfi_def_cfa_offset 8
 3926 0142 BD46     	 mov sp,r7
 3927              	.LCFI142:
 3928              	 .cfi_def_cfa_register 13
 3929              	 
 3930 0144 80BD     	 pop {r7,pc}
 3931              	.L259:
 3932 0146 00BF     	 .align 2
 3933              	.L258:
 3934 0148 00000000 	 .word uxSchedulerSuspended
 3935 014c 00000000 	 .word xTickCount
 3936 0150 00000000 	 .word pxDelayedTaskList
 3937 0154 00000000 	 .word pxOverflowDelayedTaskList
 3938 0158 00000000 	 .word xNumOfOverflows
 3939 015c 00000000 	 .word xNextTaskUnblockTime
 3940 0160 00000000 	 .word uxTopReadyPriority
 3941 0164 00000000 	 .word pxReadyTasksLists
 3942 0168 00000000 	 .word pxCurrentTCB
 3943 016c 00000000 	 .word uxPendedTicks
 3944 0170 00000000 	 .word xYieldPending
 3945              	 .cfi_endproc
 3946              	.LFE164:
 3948              	 .section .text.vTaskSwitchContext,"ax",%progbits
 3949              	 .align 2
 3950              	 .global vTaskSwitchContext
 3951              	 .thumb
 3952              	 .thumb_func
 3954              	vTaskSwitchContext:
 3955              	.LFB165:
2835:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2836:../Dave/Generated/FREERTOS/tasks.c **** 
2837:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2838:../Dave/Generated/FREERTOS/tasks.c **** 
2839:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2840:../Dave/Generated/FREERTOS/tasks.c **** 	{
2841:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *xTCB;
2842:../Dave/Generated/FREERTOS/tasks.c **** 
2843:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2844:../Dave/Generated/FREERTOS/tasks.c **** 		getting set. */
2845:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask == NULL )
2846:../Dave/Generated/FREERTOS/tasks.c **** 		{
2847:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2848:../Dave/Generated/FREERTOS/tasks.c **** 		}
2849:../Dave/Generated/FREERTOS/tasks.c **** 		else
2850:../Dave/Generated/FREERTOS/tasks.c **** 		{
2851:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = xTask;
2852:../Dave/Generated/FREERTOS/tasks.c **** 		}
2853:../Dave/Generated/FREERTOS/tasks.c **** 
2854:../Dave/Generated/FREERTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2855:../Dave/Generated/FREERTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2856:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
2857:../Dave/Generated/FREERTOS/tasks.c **** 		{
2858:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2859:../Dave/Generated/FREERTOS/tasks.c **** 		}
2860:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
2861:../Dave/Generated/FREERTOS/tasks.c **** 	}
2862:../Dave/Generated/FREERTOS/tasks.c **** 
2863:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2864:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2865:../Dave/Generated/FREERTOS/tasks.c **** 
2866:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2867:../Dave/Generated/FREERTOS/tasks.c **** 
2868:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2869:../Dave/Generated/FREERTOS/tasks.c **** 	{
2870:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
2871:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2872:../Dave/Generated/FREERTOS/tasks.c **** 
2873:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2874:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2875:../Dave/Generated/FREERTOS/tasks.c **** 
2876:../Dave/Generated/FREERTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2877:../Dave/Generated/FREERTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2878:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
2879:../Dave/Generated/FREERTOS/tasks.c **** 		{
2880:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2881:../Dave/Generated/FREERTOS/tasks.c **** 		}
2882:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
2883:../Dave/Generated/FREERTOS/tasks.c **** 
2884:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
2885:../Dave/Generated/FREERTOS/tasks.c **** 	}
2886:../Dave/Generated/FREERTOS/tasks.c **** 
2887:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2888:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2889:../Dave/Generated/FREERTOS/tasks.c **** 
2890:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2891:../Dave/Generated/FREERTOS/tasks.c **** 
2892:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2893:../Dave/Generated/FREERTOS/tasks.c **** 	{
2894:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
2895:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2896:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2897:../Dave/Generated/FREERTOS/tasks.c **** 
2898:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2899:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2900:../Dave/Generated/FREERTOS/tasks.c **** 
2901:../Dave/Generated/FREERTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2902:../Dave/Generated/FREERTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2903:../Dave/Generated/FREERTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2904:../Dave/Generated/FREERTOS/tasks.c **** 		{
2905:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2906:../Dave/Generated/FREERTOS/tasks.c **** 		}
2907:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2908:../Dave/Generated/FREERTOS/tasks.c **** 
2909:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
2910:../Dave/Generated/FREERTOS/tasks.c **** 	}
2911:../Dave/Generated/FREERTOS/tasks.c **** 
2912:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2913:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2914:../Dave/Generated/FREERTOS/tasks.c **** 
2915:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2916:../Dave/Generated/FREERTOS/tasks.c **** 
2917:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2918:../Dave/Generated/FREERTOS/tasks.c **** 	{
2919:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *xTCB;
2920:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
2921:../Dave/Generated/FREERTOS/tasks.c **** 
2922:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2923:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask == NULL )
2924:../Dave/Generated/FREERTOS/tasks.c **** 		{
2925:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = pxCurrentTCB;
2926:../Dave/Generated/FREERTOS/tasks.c **** 		}
2927:../Dave/Generated/FREERTOS/tasks.c **** 		else
2928:../Dave/Generated/FREERTOS/tasks.c **** 		{
2929:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = xTask;
2930:../Dave/Generated/FREERTOS/tasks.c **** 		}
2931:../Dave/Generated/FREERTOS/tasks.c **** 
2932:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2933:../Dave/Generated/FREERTOS/tasks.c **** 		{
2934:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2935:../Dave/Generated/FREERTOS/tasks.c **** 		}
2936:../Dave/Generated/FREERTOS/tasks.c **** 		else
2937:../Dave/Generated/FREERTOS/tasks.c **** 		{
2938:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdFAIL;
2939:../Dave/Generated/FREERTOS/tasks.c **** 		}
2940:../Dave/Generated/FREERTOS/tasks.c **** 
2941:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
2942:../Dave/Generated/FREERTOS/tasks.c **** 	}
2943:../Dave/Generated/FREERTOS/tasks.c **** 
2944:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2945:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2946:../Dave/Generated/FREERTOS/tasks.c **** 
2947:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSwitchContext( void )
2948:../Dave/Generated/FREERTOS/tasks.c **** {
 3956              	 .loc 1 2948 0
 3957              	 .cfi_startproc
 3958              	 
 3959              	 
 3960              	 
 3961 0000 80B4     	 push {r7}
 3962              	.LCFI143:
 3963              	 .cfi_def_cfa_offset 4
 3964              	 .cfi_offset 7,-4
 3965 0002 87B0     	 sub sp,sp,#28
 3966              	.LCFI144:
 3967              	 .cfi_def_cfa_offset 32
 3968 0004 00AF     	 add r7,sp,#0
 3969              	.LCFI145:
 3970              	 .cfi_def_cfa_register 7
2949:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3971              	 .loc 1 2949 0
 3972 0006 264B     	 ldr r3,.L267
 3973 0008 1B68     	 ldr r3,[r3]
 3974 000a 002B     	 cmp r3,#0
 3975 000c 03D0     	 beq .L261
2950:../Dave/Generated/FREERTOS/tasks.c **** 	{
2951:../Dave/Generated/FREERTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2952:../Dave/Generated/FREERTOS/tasks.c **** 		switch. */
2953:../Dave/Generated/FREERTOS/tasks.c **** 		xYieldPending = pdTRUE;
 3976              	 .loc 1 2953 0
 3977 000e 254B     	 ldr r3,.L267+4
 3978 0010 0122     	 movs r2,#1
 3979 0012 1A60     	 str r2,[r3]
 3980 0014 3EE0     	 b .L260
 3981              	.L261:
2954:../Dave/Generated/FREERTOS/tasks.c **** 	}
2955:../Dave/Generated/FREERTOS/tasks.c **** 	else
2956:../Dave/Generated/FREERTOS/tasks.c **** 	{
2957:../Dave/Generated/FREERTOS/tasks.c **** 		xYieldPending = pdFALSE;
 3982              	 .loc 1 2957 0
 3983 0016 234B     	 ldr r3,.L267+4
 3984 0018 0022     	 movs r2,#0
 3985 001a 1A60     	 str r2,[r3]
 3986              	.LBB172:
2958:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
2959:../Dave/Generated/FREERTOS/tasks.c **** 
2960:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2961:../Dave/Generated/FREERTOS/tasks.c **** 		{
2962:../Dave/Generated/FREERTOS/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2963:../Dave/Generated/FREERTOS/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2964:../Dave/Generated/FREERTOS/tasks.c **** 			#else
2965:../Dave/Generated/FREERTOS/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2966:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
2967:../Dave/Generated/FREERTOS/tasks.c **** 
2968:../Dave/Generated/FREERTOS/tasks.c **** 			/* Add the amount of time the task has been running to the
2969:../Dave/Generated/FREERTOS/tasks.c **** 			accumulated time so far.  The time the task started running was
2970:../Dave/Generated/FREERTOS/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
2971:../Dave/Generated/FREERTOS/tasks.c **** 			protection here so count values are only valid until the timer
2972:../Dave/Generated/FREERTOS/tasks.c **** 			overflows.  The guard against negative values is to protect
2973:../Dave/Generated/FREERTOS/tasks.c **** 			against suspect run time stat counter implementations - which
2974:../Dave/Generated/FREERTOS/tasks.c **** 			are provided by the application, not the kernel. */
2975:../Dave/Generated/FREERTOS/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
2976:../Dave/Generated/FREERTOS/tasks.c **** 			{
2977:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2978:../Dave/Generated/FREERTOS/tasks.c **** 			}
2979:../Dave/Generated/FREERTOS/tasks.c **** 			else
2980:../Dave/Generated/FREERTOS/tasks.c **** 			{
2981:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2982:../Dave/Generated/FREERTOS/tasks.c **** 			}
2983:../Dave/Generated/FREERTOS/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
2984:../Dave/Generated/FREERTOS/tasks.c **** 		}
2985:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2986:../Dave/Generated/FREERTOS/tasks.c **** 
2987:../Dave/Generated/FREERTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
2988:../Dave/Generated/FREERTOS/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2989:../Dave/Generated/FREERTOS/tasks.c **** 
2990:../Dave/Generated/FREERTOS/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2991:../Dave/Generated/FREERTOS/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2992:../Dave/Generated/FREERTOS/tasks.c **** 		{
2993:../Dave/Generated/FREERTOS/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2994:../Dave/Generated/FREERTOS/tasks.c **** 		}
2995:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
2996:../Dave/Generated/FREERTOS/tasks.c **** 
2997:../Dave/Generated/FREERTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
2998:../Dave/Generated/FREERTOS/tasks.c **** 		optimised asm code. */
2999:../Dave/Generated/FREERTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
 3987              	 .loc 1 2999 0
 3988 001c 224B     	 ldr r3,.L267+8
 3989 001e 1B68     	 ldr r3,[r3]
 3990 0020 FB60     	 str r3,[r7,#12]
 3991              	.LBB173:
 3992              	.LBB174:
 134:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		return ucReturn;
 3993              	 .loc 2 134 0
 3994 0022 FB68     	 ldr r3,[r7,#12]
 3995              	
 3996 0024 B3FA83F3 	 clz r3,r3
 3997              	
 3998              	 .thumb
 3999 0028 FB72     	 strb r3,[r7,#11]
 135:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 4000              	 .loc 2 135 0
 4001 002a FB7A     	 ldrb r3,[r7,#11]
 4002              	.LBE174:
 4003              	.LBE173:
 4004              	 .loc 1 2999 0
 4005 002c C3F11F03 	 rsb r3,r3,#31
 4006 0030 7B61     	 str r3,[r7,#20]
 4007 0032 1E49     	 ldr r1,.L267+12
 4008 0034 7A69     	 ldr r2,[r7,#20]
 4009 0036 1346     	 mov r3,r2
 4010 0038 9B00     	 lsls r3,r3,#2
 4011 003a 1344     	 add r3,r3,r2
 4012 003c 9B00     	 lsls r3,r3,#2
 4013 003e 0B44     	 add r3,r3,r1
 4014 0040 1B68     	 ldr r3,[r3]
 4015 0042 002B     	 cmp r3,#0
 4016 0044 09D1     	 bne .L264
 4017              	.LBB175:
 4018              	.LBB176:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4019              	 .loc 2 195 0 discriminator 1
 4020              	
 4021 0046 4FF0FC03 	 mov r3,#252
 4022 004a 83F31188 	 msr basepri,r3
 4023 004e BFF36F8F 	 isb 
 4024 0052 BFF34F8F 	 dsb 
 4025              	
 4026              	
 4027              	 .thumb
 4028 0056 7B60     	 str r3,[r7,#4]
 4029              	.L265:
 4030              	.LBE176:
 4031              	.LBE175:
 4032              	 .loc 1 2999 0 discriminator 1
 4033 0058 FEE7     	 b .L265
 4034              	.L264:
 4035              	.LBB177:
 4036              	 .loc 1 2999 0 is_stmt 0 discriminator 2
 4037 005a 7A69     	 ldr r2,[r7,#20]
 4038 005c 1346     	 mov r3,r2
 4039 005e 9B00     	 lsls r3,r3,#2
 4040 0060 1344     	 add r3,r3,r2
 4041 0062 9B00     	 lsls r3,r3,#2
 4042 0064 114A     	 ldr r2,.L267+12
 4043 0066 1344     	 add r3,r3,r2
 4044 0068 3B61     	 str r3,[r7,#16]
 4045 006a 3B69     	 ldr r3,[r7,#16]
 4046 006c 5B68     	 ldr r3,[r3,#4]
 4047 006e 5A68     	 ldr r2,[r3,#4]
 4048 0070 3B69     	 ldr r3,[r7,#16]
 4049 0072 5A60     	 str r2,[r3,#4]
 4050 0074 3B69     	 ldr r3,[r7,#16]
 4051 0076 5A68     	 ldr r2,[r3,#4]
 4052 0078 3B69     	 ldr r3,[r7,#16]
 4053 007a 0833     	 adds r3,r3,#8
 4054 007c 9A42     	 cmp r2,r3
 4055 007e 04D1     	 bne .L266
 4056              	 .loc 1 2999 0 discriminator 3
 4057 0080 3B69     	 ldr r3,[r7,#16]
 4058 0082 5B68     	 ldr r3,[r3,#4]
 4059 0084 5A68     	 ldr r2,[r3,#4]
 4060 0086 3B69     	 ldr r3,[r7,#16]
 4061 0088 5A60     	 str r2,[r3,#4]
 4062              	.L266:
 4063              	 .loc 1 2999 0 discriminator 5
 4064 008a 3B69     	 ldr r3,[r7,#16]
 4065 008c 5B68     	 ldr r3,[r3,#4]
 4066 008e DB68     	 ldr r3,[r3,#12]
 4067 0090 074A     	 ldr r2,.L267+16
 4068 0092 1360     	 str r3,[r2]
 4069              	.L260:
 4070              	.LBE177:
 4071              	.LBE172:
3000:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
3001:../Dave/Generated/FREERTOS/tasks.c **** 
3002:../Dave/Generated/FREERTOS/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3003:../Dave/Generated/FREERTOS/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3004:../Dave/Generated/FREERTOS/tasks.c **** 		{
3005:../Dave/Generated/FREERTOS/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3006:../Dave/Generated/FREERTOS/tasks.c **** 		}
3007:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3008:../Dave/Generated/FREERTOS/tasks.c **** 
3009:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3010:../Dave/Generated/FREERTOS/tasks.c **** 		{
3011:../Dave/Generated/FREERTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3012:../Dave/Generated/FREERTOS/tasks.c **** 			structure specific to this task. */
3013:../Dave/Generated/FREERTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3014:../Dave/Generated/FREERTOS/tasks.c **** 		}
3015:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3016:../Dave/Generated/FREERTOS/tasks.c **** 	}
3017:../Dave/Generated/FREERTOS/tasks.c **** }
 4072              	 .loc 1 3017 0 is_stmt 1
 4073 0094 1C37     	 adds r7,r7,#28
 4074              	.LCFI146:
 4075              	 .cfi_def_cfa_offset 4
 4076 0096 BD46     	 mov sp,r7
 4077              	.LCFI147:
 4078              	 .cfi_def_cfa_register 13
 4079              	 
 4080 0098 5DF8047B 	 ldr r7,[sp],#4
 4081              	.LCFI148:
 4082              	 .cfi_restore 7
 4083              	 .cfi_def_cfa_offset 0
 4084 009c 7047     	 bx lr
 4085              	.L268:
 4086 009e 00BF     	 .align 2
 4087              	.L267:
 4088 00a0 00000000 	 .word uxSchedulerSuspended
 4089 00a4 00000000 	 .word xYieldPending
 4090 00a8 00000000 	 .word uxTopReadyPriority
 4091 00ac 00000000 	 .word pxReadyTasksLists
 4092 00b0 00000000 	 .word pxCurrentTCB
 4093              	 .cfi_endproc
 4094              	.LFE165:
 4096              	 .section .text.vTaskPlaceOnEventList,"ax",%progbits
 4097              	 .align 2
 4098              	 .global vTaskPlaceOnEventList
 4099              	 .thumb
 4100              	 .thumb_func
 4102              	vTaskPlaceOnEventList:
 4103              	.LFB166:
3018:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3019:../Dave/Generated/FREERTOS/tasks.c **** 
3020:../Dave/Generated/FREERTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3021:../Dave/Generated/FREERTOS/tasks.c **** {
 4104              	 .loc 1 3021 0
 4105              	 .cfi_startproc
 4106              	 
 4107              	 
 4108 0000 80B5     	 push {r7,lr}
 4109              	.LCFI149:
 4110              	 .cfi_def_cfa_offset 8
 4111              	 .cfi_offset 7,-8
 4112              	 .cfi_offset 14,-4
 4113 0002 84B0     	 sub sp,sp,#16
 4114              	.LCFI150:
 4115              	 .cfi_def_cfa_offset 24
 4116 0004 00AF     	 add r7,sp,#0
 4117              	.LCFI151:
 4118              	 .cfi_def_cfa_register 7
 4119 0006 7860     	 str r0,[r7,#4]
 4120 0008 3960     	 str r1,[r7]
3022:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxEventList );
 4121              	 .loc 1 3022 0
 4122 000a 7B68     	 ldr r3,[r7,#4]
 4123 000c 002B     	 cmp r3,#0
 4124 000e 09D1     	 bne .L270
 4125              	.LBB178:
 4126              	.LBB179:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4127              	 .loc 2 195 0 discriminator 1
 4128              	
 4129 0010 4FF0FC03 	 mov r3,#252
 4130 0014 83F31188 	 msr basepri,r3
 4131 0018 BFF36F8F 	 isb 
 4132 001c BFF34F8F 	 dsb 
 4133              	
 4134              	
 4135              	 .thumb
 4136 0020 FB60     	 str r3,[r7,#12]
 4137              	.L271:
 4138              	.LBE179:
 4139              	.LBE178:
 4140              	 .loc 1 3022 0 discriminator 1
 4141 0022 FEE7     	 b .L271
 4142              	.L270:
3023:../Dave/Generated/FREERTOS/tasks.c **** 
3024:../Dave/Generated/FREERTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3025:../Dave/Generated/FREERTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3026:../Dave/Generated/FREERTOS/tasks.c **** 
3027:../Dave/Generated/FREERTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3028:../Dave/Generated/FREERTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3029:../Dave/Generated/FREERTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3030:../Dave/Generated/FREERTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3031:../Dave/Generated/FREERTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4143              	 .loc 1 3031 0
 4144 0024 064B     	 ldr r3,.L272
 4145 0026 1B68     	 ldr r3,[r3]
 4146 0028 1833     	 adds r3,r3,#24
 4147 002a 7868     	 ldr r0,[r7,#4]
 4148 002c 1946     	 mov r1,r3
 4149 002e FFF7FEFF 	 bl vListInsert
3032:../Dave/Generated/FREERTOS/tasks.c **** 
3033:../Dave/Generated/FREERTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4150              	 .loc 1 3033 0
 4151 0032 3868     	 ldr r0,[r7]
 4152 0034 0121     	 movs r1,#1
 4153 0036 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
3034:../Dave/Generated/FREERTOS/tasks.c **** }
 4154              	 .loc 1 3034 0
 4155 003a 1037     	 adds r7,r7,#16
 4156              	.LCFI152:
 4157              	 .cfi_def_cfa_offset 8
 4158 003c BD46     	 mov sp,r7
 4159              	.LCFI153:
 4160              	 .cfi_def_cfa_register 13
 4161              	 
 4162 003e 80BD     	 pop {r7,pc}
 4163              	.L273:
 4164              	 .align 2
 4165              	.L272:
 4166 0040 00000000 	 .word pxCurrentTCB
 4167              	 .cfi_endproc
 4168              	.LFE166:
 4170              	 .section .text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4171              	 .align 2
 4172              	 .global vTaskPlaceOnUnorderedEventList
 4173              	 .thumb
 4174              	 .thumb_func
 4176              	vTaskPlaceOnUnorderedEventList:
 4177              	.LFB167:
3035:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3036:../Dave/Generated/FREERTOS/tasks.c **** 
3037:../Dave/Generated/FREERTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3038:../Dave/Generated/FREERTOS/tasks.c **** {
 4178              	 .loc 1 3038 0
 4179              	 .cfi_startproc
 4180              	 
 4181              	 
 4182 0000 80B5     	 push {r7,lr}
 4183              	.LCFI154:
 4184              	 .cfi_def_cfa_offset 8
 4185              	 .cfi_offset 7,-8
 4186              	 .cfi_offset 14,-4
 4187 0002 86B0     	 sub sp,sp,#24
 4188              	.LCFI155:
 4189              	 .cfi_def_cfa_offset 32
 4190 0004 00AF     	 add r7,sp,#0
 4191              	.LCFI156:
 4192              	 .cfi_def_cfa_register 7
 4193 0006 F860     	 str r0,[r7,#12]
 4194 0008 B960     	 str r1,[r7,#8]
 4195 000a 7A60     	 str r2,[r7,#4]
3039:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxEventList );
 4196              	 .loc 1 3039 0
 4197 000c FB68     	 ldr r3,[r7,#12]
 4198 000e 002B     	 cmp r3,#0
 4199 0010 09D1     	 bne .L275
 4200              	.LBB180:
 4201              	.LBB181:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4202              	 .loc 2 195 0 discriminator 1
 4203              	
 4204 0012 4FF0FC03 	 mov r3,#252
 4205 0016 83F31188 	 msr basepri,r3
 4206 001a BFF36F8F 	 isb 
 4207 001e BFF34F8F 	 dsb 
 4208              	
 4209              	
 4210              	 .thumb
 4211 0022 7B61     	 str r3,[r7,#20]
 4212              	.L276:
 4213              	.LBE181:
 4214              	.LBE180:
 4215              	 .loc 1 3039 0 discriminator 1
 4216 0024 FEE7     	 b .L276
 4217              	.L275:
3040:../Dave/Generated/FREERTOS/tasks.c **** 
3041:../Dave/Generated/FREERTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3042:../Dave/Generated/FREERTOS/tasks.c **** 	the event groups implementation. */
3043:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 4218              	 .loc 1 3043 0
 4219 0026 114B     	 ldr r3,.L279
 4220 0028 1B68     	 ldr r3,[r3]
 4221 002a 002B     	 cmp r3,#0
 4222 002c 09D1     	 bne .L277
 4223              	.LBB182:
 4224              	.LBB183:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4225              	 .loc 2 195 0 discriminator 1
 4226              	
 4227 002e 4FF0FC03 	 mov r3,#252
 4228 0032 83F31188 	 msr basepri,r3
 4229 0036 BFF36F8F 	 isb 
 4230 003a BFF34F8F 	 dsb 
 4231              	
 4232              	
 4233              	 .thumb
 4234 003e 3B61     	 str r3,[r7,#16]
 4235              	.L278:
 4236              	.LBE183:
 4237              	.LBE182:
 4238              	 .loc 1 3043 0 discriminator 2
 4239 0040 FEE7     	 b .L278
 4240              	.L277:
3044:../Dave/Generated/FREERTOS/tasks.c **** 
3045:../Dave/Generated/FREERTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3046:../Dave/Generated/FREERTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3047:../Dave/Generated/FREERTOS/tasks.c **** 	task that is not in the Blocked state. */
3048:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 4241              	 .loc 1 3048 0
 4242 0042 0B4B     	 ldr r3,.L279+4
 4243 0044 1B68     	 ldr r3,[r3]
 4244 0046 BA68     	 ldr r2,[r7,#8]
 4245 0048 42F00042 	 orr r2,r2,#-2147483648
 4246 004c 9A61     	 str r2,[r3,#24]
3049:../Dave/Generated/FREERTOS/tasks.c **** 
3050:../Dave/Generated/FREERTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3051:../Dave/Generated/FREERTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3052:../Dave/Generated/FREERTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
3053:../Dave/Generated/FREERTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3054:../Dave/Generated/FREERTOS/tasks.c **** 	the task level). */
3055:../Dave/Generated/FREERTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4247              	 .loc 1 3055 0
 4248 004e 084B     	 ldr r3,.L279+4
 4249 0050 1B68     	 ldr r3,[r3]
 4250 0052 1833     	 adds r3,r3,#24
 4251 0054 F868     	 ldr r0,[r7,#12]
 4252 0056 1946     	 mov r1,r3
 4253 0058 FFF7FEFF 	 bl vListInsertEnd
3056:../Dave/Generated/FREERTOS/tasks.c **** 
3057:../Dave/Generated/FREERTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4254              	 .loc 1 3057 0
 4255 005c 7868     	 ldr r0,[r7,#4]
 4256 005e 0121     	 movs r1,#1
 4257 0060 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
3058:../Dave/Generated/FREERTOS/tasks.c **** }
 4258              	 .loc 1 3058 0
 4259 0064 1837     	 adds r7,r7,#24
 4260              	.LCFI157:
 4261              	 .cfi_def_cfa_offset 8
 4262 0066 BD46     	 mov sp,r7
 4263              	.LCFI158:
 4264              	 .cfi_def_cfa_register 13
 4265              	 
 4266 0068 80BD     	 pop {r7,pc}
 4267              	.L280:
 4268 006a 00BF     	 .align 2
 4269              	.L279:
 4270 006c 00000000 	 .word uxSchedulerSuspended
 4271 0070 00000000 	 .word pxCurrentTCB
 4272              	 .cfi_endproc
 4273              	.LFE167:
 4275              	 .section .text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4276              	 .align 2
 4277              	 .global vTaskPlaceOnEventListRestricted
 4278              	 .thumb
 4279              	 .thumb_func
 4281              	vTaskPlaceOnEventListRestricted:
 4282              	.LFB168:
3059:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3060:../Dave/Generated/FREERTOS/tasks.c **** 
3061:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TIMERS == 1 )
3062:../Dave/Generated/FREERTOS/tasks.c **** 
3063:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3064:../Dave/Generated/FREERTOS/tasks.c **** 	{
 4283              	 .loc 1 3064 0
 4284              	 .cfi_startproc
 4285              	 
 4286              	 
 4287 0000 80B5     	 push {r7,lr}
 4288              	.LCFI159:
 4289              	 .cfi_def_cfa_offset 8
 4290              	 .cfi_offset 7,-8
 4291              	 .cfi_offset 14,-4
 4292 0002 86B0     	 sub sp,sp,#24
 4293              	.LCFI160:
 4294              	 .cfi_def_cfa_offset 32
 4295 0004 00AF     	 add r7,sp,#0
 4296              	.LCFI161:
 4297              	 .cfi_def_cfa_register 7
 4298 0006 F860     	 str r0,[r7,#12]
 4299 0008 B960     	 str r1,[r7,#8]
 4300 000a 7A60     	 str r2,[r7,#4]
3065:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxEventList );
 4301              	 .loc 1 3065 0
 4302 000c FB68     	 ldr r3,[r7,#12]
 4303 000e 002B     	 cmp r3,#0
 4304 0010 09D1     	 bne .L282
 4305              	.LBB184:
 4306              	.LBB185:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4307              	 .loc 2 195 0 discriminator 1
 4308              	
 4309 0012 4FF0FC03 	 mov r3,#252
 4310 0016 83F31188 	 msr basepri,r3
 4311 001a BFF36F8F 	 isb 
 4312 001e BFF34F8F 	 dsb 
 4313              	
 4314              	
 4315              	 .thumb
 4316 0022 7B61     	 str r3,[r7,#20]
 4317              	.L283:
 4318              	.LBE185:
 4319              	.LBE184:
 4320              	 .loc 1 3065 0 discriminator 1
 4321 0024 FEE7     	 b .L283
 4322              	.L282:
3066:../Dave/Generated/FREERTOS/tasks.c **** 
3067:../Dave/Generated/FREERTOS/tasks.c **** 		/* This function should not be called by application code hence the
3068:../Dave/Generated/FREERTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3069:../Dave/Generated/FREERTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3070:../Dave/Generated/FREERTOS/tasks.c **** 		it should be called with the scheduler suspended. */
3071:../Dave/Generated/FREERTOS/tasks.c **** 
3072:../Dave/Generated/FREERTOS/tasks.c **** 
3073:../Dave/Generated/FREERTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3074:../Dave/Generated/FREERTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
3075:../Dave/Generated/FREERTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3076:../Dave/Generated/FREERTOS/tasks.c **** 		can be used in place of vListInsert. */
3077:../Dave/Generated/FREERTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4323              	 .loc 1 3077 0
 4324 0026 0A4B     	 ldr r3,.L285
 4325 0028 1B68     	 ldr r3,[r3]
 4326 002a 1833     	 adds r3,r3,#24
 4327 002c F868     	 ldr r0,[r7,#12]
 4328 002e 1946     	 mov r1,r3
 4329 0030 FFF7FEFF 	 bl vListInsertEnd
3078:../Dave/Generated/FREERTOS/tasks.c **** 
3079:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3080:../Dave/Generated/FREERTOS/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3081:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3082:../Dave/Generated/FREERTOS/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 4330              	 .loc 1 3082 0
 4331 0034 7B68     	 ldr r3,[r7,#4]
 4332 0036 002B     	 cmp r3,#0
 4333 0038 02D0     	 beq .L284
3083:../Dave/Generated/FREERTOS/tasks.c **** 		{
3084:../Dave/Generated/FREERTOS/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 4334              	 .loc 1 3084 0
 4335 003a 4FF0FF33 	 mov r3,#-1
 4336 003e BB60     	 str r3,[r7,#8]
 4337              	.L284:
3085:../Dave/Generated/FREERTOS/tasks.c **** 		}
3086:../Dave/Generated/FREERTOS/tasks.c **** 
3087:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3088:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4338              	 .loc 1 3088 0
 4339 0040 B868     	 ldr r0,[r7,#8]
 4340 0042 7968     	 ldr r1,[r7,#4]
 4341 0044 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
3089:../Dave/Generated/FREERTOS/tasks.c **** 	}
 4342              	 .loc 1 3089 0
 4343 0048 1837     	 adds r7,r7,#24
 4344              	.LCFI162:
 4345              	 .cfi_def_cfa_offset 8
 4346 004a BD46     	 mov sp,r7
 4347              	.LCFI163:
 4348              	 .cfi_def_cfa_register 13
 4349              	 
 4350 004c 80BD     	 pop {r7,pc}
 4351              	.L286:
 4352 004e 00BF     	 .align 2
 4353              	.L285:
 4354 0050 00000000 	 .word pxCurrentTCB
 4355              	 .cfi_endproc
 4356              	.LFE168:
 4358              	 .section .text.xTaskRemoveFromEventList,"ax",%progbits
 4359              	 .align 2
 4360              	 .global xTaskRemoveFromEventList
 4361              	 .thumb
 4362              	 .thumb_func
 4364              	xTaskRemoveFromEventList:
 4365              	.LFB169:
3090:../Dave/Generated/FREERTOS/tasks.c **** 
3091:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TIMERS */
3092:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3093:../Dave/Generated/FREERTOS/tasks.c **** 
3094:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3095:../Dave/Generated/FREERTOS/tasks.c **** {
 4366              	 .loc 1 3095 0
 4367              	 .cfi_startproc
 4368              	 
 4369              	 
 4370 0000 80B5     	 push {r7,lr}
 4371              	.LCFI164:
 4372              	 .cfi_def_cfa_offset 8
 4373              	 .cfi_offset 7,-8
 4374              	 .cfi_offset 14,-4
 4375 0002 86B0     	 sub sp,sp,#24
 4376              	.LCFI165:
 4377              	 .cfi_def_cfa_offset 32
 4378 0004 00AF     	 add r7,sp,#0
 4379              	.LCFI166:
 4380              	 .cfi_def_cfa_register 7
 4381 0006 7860     	 str r0,[r7,#4]
3096:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxUnblockedTCB;
3097:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xReturn;
3098:../Dave/Generated/FREERTOS/tasks.c **** 
3099:../Dave/Generated/FREERTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3100:../Dave/Generated/FREERTOS/tasks.c **** 	called from a critical section within an ISR. */
3101:../Dave/Generated/FREERTOS/tasks.c **** 
3102:../Dave/Generated/FREERTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3103:../Dave/Generated/FREERTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3104:../Dave/Generated/FREERTOS/tasks.c **** 	the delayed list, and add it to the ready list.
3105:../Dave/Generated/FREERTOS/tasks.c **** 
3106:../Dave/Generated/FREERTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
3107:../Dave/Generated/FREERTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3108:../Dave/Generated/FREERTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3109:../Dave/Generated/FREERTOS/tasks.c **** 
3110:../Dave/Generated/FREERTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
3111:../Dave/Generated/FREERTOS/tasks.c **** 	pxEventList is not empty. */
3112:../Dave/Generated/FREERTOS/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 4382              	 .loc 1 3112 0
 4383 0008 7B68     	 ldr r3,[r7,#4]
 4384 000a DB68     	 ldr r3,[r3,#12]
 4385 000c DB68     	 ldr r3,[r3,#12]
 4386 000e 3B61     	 str r3,[r7,#16]
3113:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4387              	 .loc 1 3113 0
 4388 0010 3B69     	 ldr r3,[r7,#16]
 4389 0012 002B     	 cmp r3,#0
 4390 0014 09D1     	 bne .L288
 4391              	.LBB186:
 4392              	.LBB187:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4393              	 .loc 2 195 0 discriminator 1
 4394              	
 4395 0016 4FF0FC03 	 mov r3,#252
 4396 001a 83F31188 	 msr basepri,r3
 4397 001e BFF36F8F 	 isb 
 4398 0022 BFF34F8F 	 dsb 
 4399              	
 4400              	
 4401              	 .thumb
 4402 0026 FB60     	 str r3,[r7,#12]
 4403              	.L289:
 4404              	.LBE187:
 4405              	.LBE186:
 4406              	 .loc 1 3113 0 discriminator 1
 4407 0028 FEE7     	 b .L289
 4408              	.L288:
3114:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4409              	 .loc 1 3114 0
 4410 002a 3B69     	 ldr r3,[r7,#16]
 4411 002c 1833     	 adds r3,r3,#24
 4412 002e 1846     	 mov r0,r3
 4413 0030 FFF7FEFF 	 bl uxListRemove
3115:../Dave/Generated/FREERTOS/tasks.c **** 
3116:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4414              	 .loc 1 3116 0
 4415 0034 1E4B     	 ldr r3,.L295
 4416 0036 1B68     	 ldr r3,[r3]
 4417 0038 002B     	 cmp r3,#0
 4418 003a 1ED1     	 bne .L290
3117:../Dave/Generated/FREERTOS/tasks.c **** 	{
3118:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4419              	 .loc 1 3118 0
 4420 003c 3B69     	 ldr r3,[r7,#16]
 4421 003e 0433     	 adds r3,r3,#4
 4422 0040 1846     	 mov r0,r3
 4423 0042 FFF7FEFF 	 bl uxListRemove
3119:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4424              	 .loc 1 3119 0
 4425 0046 3B69     	 ldr r3,[r7,#16]
 4426 0048 DB6A     	 ldr r3,[r3,#44]
 4427 004a 1A46     	 mov r2,r3
 4428 004c 0123     	 movs r3,#1
 4429 004e 03FA02F2 	 lsl r2,r3,r2
 4430 0052 184B     	 ldr r3,.L295+4
 4431 0054 1B68     	 ldr r3,[r3]
 4432 0056 1343     	 orrs r3,r3,r2
 4433 0058 164A     	 ldr r2,.L295+4
 4434 005a 1360     	 str r3,[r2]
 4435 005c 3B69     	 ldr r3,[r7,#16]
 4436 005e DA6A     	 ldr r2,[r3,#44]
 4437 0060 1346     	 mov r3,r2
 4438 0062 9B00     	 lsls r3,r3,#2
 4439 0064 1344     	 add r3,r3,r2
 4440 0066 9B00     	 lsls r3,r3,#2
 4441 0068 134A     	 ldr r2,.L295+8
 4442 006a 1A44     	 add r2,r2,r3
 4443 006c 3B69     	 ldr r3,[r7,#16]
 4444 006e 0433     	 adds r3,r3,#4
 4445 0070 1046     	 mov r0,r2
 4446 0072 1946     	 mov r1,r3
 4447 0074 FFF7FEFF 	 bl vListInsertEnd
 4448 0078 05E0     	 b .L291
 4449              	.L290:
3120:../Dave/Generated/FREERTOS/tasks.c **** 
3121:../Dave/Generated/FREERTOS/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3122:../Dave/Generated/FREERTOS/tasks.c **** 		{
3123:../Dave/Generated/FREERTOS/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3124:../Dave/Generated/FREERTOS/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3125:../Dave/Generated/FREERTOS/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3126:../Dave/Generated/FREERTOS/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3127:../Dave/Generated/FREERTOS/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3128:../Dave/Generated/FREERTOS/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3129:../Dave/Generated/FREERTOS/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3130:../Dave/Generated/FREERTOS/tasks.c **** 			ensure it is updated at the earliest possible time. */
3131:../Dave/Generated/FREERTOS/tasks.c **** 			prvResetNextTaskUnblockTime();
3132:../Dave/Generated/FREERTOS/tasks.c **** 		}
3133:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3134:../Dave/Generated/FREERTOS/tasks.c **** 	}
3135:../Dave/Generated/FREERTOS/tasks.c **** 	else
3136:../Dave/Generated/FREERTOS/tasks.c **** 	{
3137:../Dave/Generated/FREERTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3138:../Dave/Generated/FREERTOS/tasks.c **** 		pending until the scheduler is resumed. */
3139:../Dave/Generated/FREERTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4450              	 .loc 1 3139 0
 4451 007a 3B69     	 ldr r3,[r7,#16]
 4452 007c 1833     	 adds r3,r3,#24
 4453 007e 0F48     	 ldr r0,.L295+12
 4454 0080 1946     	 mov r1,r3
 4455 0082 FFF7FEFF 	 bl vListInsertEnd
 4456              	.L291:
3140:../Dave/Generated/FREERTOS/tasks.c **** 	}
3141:../Dave/Generated/FREERTOS/tasks.c **** 
3142:../Dave/Generated/FREERTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4457              	 .loc 1 3142 0
 4458 0086 3B69     	 ldr r3,[r7,#16]
 4459 0088 DA6A     	 ldr r2,[r3,#44]
 4460 008a 0D4B     	 ldr r3,.L295+16
 4461 008c 1B68     	 ldr r3,[r3]
 4462 008e DB6A     	 ldr r3,[r3,#44]
 4463 0090 9A42     	 cmp r2,r3
 4464 0092 05D9     	 bls .L292
3143:../Dave/Generated/FREERTOS/tasks.c **** 	{
3144:../Dave/Generated/FREERTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3145:../Dave/Generated/FREERTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3146:../Dave/Generated/FREERTOS/tasks.c **** 		it should force a context switch now. */
3147:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = pdTRUE;
 4465              	 .loc 1 3147 0
 4466 0094 0123     	 movs r3,#1
 4467 0096 7B61     	 str r3,[r7,#20]
3148:../Dave/Generated/FREERTOS/tasks.c **** 
3149:../Dave/Generated/FREERTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3150:../Dave/Generated/FREERTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3151:../Dave/Generated/FREERTOS/tasks.c **** 		xYieldPending = pdTRUE;
 4468              	 .loc 1 3151 0
 4469 0098 0A4B     	 ldr r3,.L295+20
 4470 009a 0122     	 movs r2,#1
 4471 009c 1A60     	 str r2,[r3]
 4472 009e 01E0     	 b .L293
 4473              	.L292:
3152:../Dave/Generated/FREERTOS/tasks.c **** 	}
3153:../Dave/Generated/FREERTOS/tasks.c **** 	else
3154:../Dave/Generated/FREERTOS/tasks.c **** 	{
3155:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = pdFALSE;
 4474              	 .loc 1 3155 0
 4475 00a0 0023     	 movs r3,#0
 4476 00a2 7B61     	 str r3,[r7,#20]
 4477              	.L293:
3156:../Dave/Generated/FREERTOS/tasks.c **** 	}
3157:../Dave/Generated/FREERTOS/tasks.c **** 
3158:../Dave/Generated/FREERTOS/tasks.c **** 	return xReturn;
 4478              	 .loc 1 3158 0
 4479 00a4 7B69     	 ldr r3,[r7,#20]
3159:../Dave/Generated/FREERTOS/tasks.c **** }
 4480              	 .loc 1 3159 0
 4481 00a6 1846     	 mov r0,r3
 4482 00a8 1837     	 adds r7,r7,#24
 4483              	.LCFI167:
 4484              	 .cfi_def_cfa_offset 8
 4485 00aa BD46     	 mov sp,r7
 4486              	.LCFI168:
 4487              	 .cfi_def_cfa_register 13
 4488              	 
 4489 00ac 80BD     	 pop {r7,pc}
 4490              	.L296:
 4491 00ae 00BF     	 .align 2
 4492              	.L295:
 4493 00b0 00000000 	 .word uxSchedulerSuspended
 4494 00b4 00000000 	 .word uxTopReadyPriority
 4495 00b8 00000000 	 .word pxReadyTasksLists
 4496 00bc 00000000 	 .word xPendingReadyList
 4497 00c0 00000000 	 .word pxCurrentTCB
 4498 00c4 00000000 	 .word xYieldPending
 4499              	 .cfi_endproc
 4500              	.LFE169:
 4502              	 .section .text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4503              	 .align 2
 4504              	 .global vTaskRemoveFromUnorderedEventList
 4505              	 .thumb
 4506              	 .thumb_func
 4508              	vTaskRemoveFromUnorderedEventList:
 4509              	.LFB170:
3160:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3161:../Dave/Generated/FREERTOS/tasks.c **** 
3162:../Dave/Generated/FREERTOS/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3163:../Dave/Generated/FREERTOS/tasks.c **** {
 4510              	 .loc 1 3163 0
 4511              	 .cfi_startproc
 4512              	 
 4513              	 
 4514 0000 80B5     	 push {r7,lr}
 4515              	.LCFI169:
 4516              	 .cfi_def_cfa_offset 8
 4517              	 .cfi_offset 7,-8
 4518              	 .cfi_offset 14,-4
 4519 0002 86B0     	 sub sp,sp,#24
 4520              	.LCFI170:
 4521              	 .cfi_def_cfa_offset 32
 4522 0004 00AF     	 add r7,sp,#0
 4523              	.LCFI171:
 4524              	 .cfi_def_cfa_register 7
 4525 0006 7860     	 str r0,[r7,#4]
 4526 0008 3960     	 str r1,[r7]
3164:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxUnblockedTCB;
3165:../Dave/Generated/FREERTOS/tasks.c **** 
3166:../Dave/Generated/FREERTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3167:../Dave/Generated/FREERTOS/tasks.c **** 	the event flags implementation. */
3168:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 4527              	 .loc 1 3168 0
 4528 000a 284B     	 ldr r3,.L303
 4529 000c 1B68     	 ldr r3,[r3]
 4530 000e 002B     	 cmp r3,#0
 4531 0010 09D1     	 bne .L298
 4532              	.LBB188:
 4533              	.LBB189:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4534              	 .loc 2 195 0 discriminator 1
 4535              	
 4536 0012 4FF0FC03 	 mov r3,#252
 4537 0016 83F31188 	 msr basepri,r3
 4538 001a BFF36F8F 	 isb 
 4539 001e BFF34F8F 	 dsb 
 4540              	
 4541              	
 4542              	 .thumb
 4543 0022 3B61     	 str r3,[r7,#16]
 4544              	.L299:
 4545              	.LBE189:
 4546              	.LBE188:
 4547              	 .loc 1 3168 0 discriminator 1
 4548 0024 FEE7     	 b .L299
 4549              	.L298:
3169:../Dave/Generated/FREERTOS/tasks.c **** 
3170:../Dave/Generated/FREERTOS/tasks.c **** 	/* Store the new item value in the event list. */
3171:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4550              	 .loc 1 3171 0
 4551 0026 3B68     	 ldr r3,[r7]
 4552 0028 43F00042 	 orr r2,r3,#-2147483648
 4553 002c 7B68     	 ldr r3,[r7,#4]
 4554 002e 1A60     	 str r2,[r3]
3172:../Dave/Generated/FREERTOS/tasks.c **** 
3173:../Dave/Generated/FREERTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3174:../Dave/Generated/FREERTOS/tasks.c **** 	event flags. */
3175:../Dave/Generated/FREERTOS/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 4555              	 .loc 1 3175 0
 4556 0030 7B68     	 ldr r3,[r7,#4]
 4557 0032 DB68     	 ldr r3,[r3,#12]
 4558 0034 7B61     	 str r3,[r7,#20]
3176:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4559              	 .loc 1 3176 0
 4560 0036 7B69     	 ldr r3,[r7,#20]
 4561 0038 002B     	 cmp r3,#0
 4562 003a 09D1     	 bne .L300
 4563              	.LBB190:
 4564              	.LBB191:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4565              	 .loc 2 195 0 discriminator 1
 4566              	
 4567 003c 4FF0FC03 	 mov r3,#252
 4568 0040 83F31188 	 msr basepri,r3
 4569 0044 BFF36F8F 	 isb 
 4570 0048 BFF34F8F 	 dsb 
 4571              	
 4572              	
 4573              	 .thumb
 4574 004c FB60     	 str r3,[r7,#12]
 4575              	.L301:
 4576              	.LBE191:
 4577              	.LBE190:
 4578              	 .loc 1 3176 0 discriminator 2
 4579 004e FEE7     	 b .L301
 4580              	.L300:
3177:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4581              	 .loc 1 3177 0
 4582 0050 7868     	 ldr r0,[r7,#4]
 4583 0052 FFF7FEFF 	 bl uxListRemove
3178:../Dave/Generated/FREERTOS/tasks.c **** 
3179:../Dave/Generated/FREERTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3180:../Dave/Generated/FREERTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3181:../Dave/Generated/FREERTOS/tasks.c **** 	lists. */
3182:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4584              	 .loc 1 3182 0
 4585 0056 7B69     	 ldr r3,[r7,#20]
 4586 0058 0433     	 adds r3,r3,#4
 4587 005a 1846     	 mov r0,r3
 4588 005c FFF7FEFF 	 bl uxListRemove
3183:../Dave/Generated/FREERTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4589              	 .loc 1 3183 0
 4590 0060 7B69     	 ldr r3,[r7,#20]
 4591 0062 DB6A     	 ldr r3,[r3,#44]
 4592 0064 1A46     	 mov r2,r3
 4593 0066 0123     	 movs r3,#1
 4594 0068 03FA02F2 	 lsl r2,r3,r2
 4595 006c 104B     	 ldr r3,.L303+4
 4596 006e 1B68     	 ldr r3,[r3]
 4597 0070 1343     	 orrs r3,r3,r2
 4598 0072 0F4A     	 ldr r2,.L303+4
 4599 0074 1360     	 str r3,[r2]
 4600 0076 7B69     	 ldr r3,[r7,#20]
 4601 0078 DA6A     	 ldr r2,[r3,#44]
 4602 007a 1346     	 mov r3,r2
 4603 007c 9B00     	 lsls r3,r3,#2
 4604 007e 1344     	 add r3,r3,r2
 4605 0080 9B00     	 lsls r3,r3,#2
 4606 0082 0C4A     	 ldr r2,.L303+8
 4607 0084 1A44     	 add r2,r2,r3
 4608 0086 7B69     	 ldr r3,[r7,#20]
 4609 0088 0433     	 adds r3,r3,#4
 4610 008a 1046     	 mov r0,r2
 4611 008c 1946     	 mov r1,r3
 4612 008e FFF7FEFF 	 bl vListInsertEnd
3184:../Dave/Generated/FREERTOS/tasks.c **** 
3185:../Dave/Generated/FREERTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4613              	 .loc 1 3185 0
 4614 0092 7B69     	 ldr r3,[r7,#20]
 4615 0094 DA6A     	 ldr r2,[r3,#44]
 4616 0096 084B     	 ldr r3,.L303+12
 4617 0098 1B68     	 ldr r3,[r3]
 4618 009a DB6A     	 ldr r3,[r3,#44]
 4619 009c 9A42     	 cmp r2,r3
 4620 009e 02D9     	 bls .L297
3186:../Dave/Generated/FREERTOS/tasks.c **** 	{
3187:../Dave/Generated/FREERTOS/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3188:../Dave/Generated/FREERTOS/tasks.c **** 		a context switch is required.  This function is called with the
3189:../Dave/Generated/FREERTOS/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3190:../Dave/Generated/FREERTOS/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3191:../Dave/Generated/FREERTOS/tasks.c **** 		xYieldPending = pdTRUE;
 4621              	 .loc 1 3191 0
 4622 00a0 064B     	 ldr r3,.L303+16
 4623 00a2 0122     	 movs r2,#1
 4624 00a4 1A60     	 str r2,[r3]
 4625              	.L297:
3192:../Dave/Generated/FREERTOS/tasks.c **** 	}
3193:../Dave/Generated/FREERTOS/tasks.c **** }
 4626              	 .loc 1 3193 0
 4627 00a6 1837     	 adds r7,r7,#24
 4628              	.LCFI172:
 4629              	 .cfi_def_cfa_offset 8
 4630 00a8 BD46     	 mov sp,r7
 4631              	.LCFI173:
 4632              	 .cfi_def_cfa_register 13
 4633              	 
 4634 00aa 80BD     	 pop {r7,pc}
 4635              	.L304:
 4636              	 .align 2
 4637              	.L303:
 4638 00ac 00000000 	 .word uxSchedulerSuspended
 4639 00b0 00000000 	 .word uxTopReadyPriority
 4640 00b4 00000000 	 .word pxReadyTasksLists
 4641 00b8 00000000 	 .word pxCurrentTCB
 4642 00bc 00000000 	 .word xYieldPending
 4643              	 .cfi_endproc
 4644              	.LFE170:
 4646              	 .section .text.vTaskSetTimeOutState,"ax",%progbits
 4647              	 .align 2
 4648              	 .global vTaskSetTimeOutState
 4649              	 .thumb
 4650              	 .thumb_func
 4652              	vTaskSetTimeOutState:
 4653              	.LFB171:
3194:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3195:../Dave/Generated/FREERTOS/tasks.c **** 
3196:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3197:../Dave/Generated/FREERTOS/tasks.c **** {
 4654              	 .loc 1 3197 0
 4655              	 .cfi_startproc
 4656              	 
 4657              	 
 4658 0000 80B5     	 push {r7,lr}
 4659              	.LCFI174:
 4660              	 .cfi_def_cfa_offset 8
 4661              	 .cfi_offset 7,-8
 4662              	 .cfi_offset 14,-4
 4663 0002 84B0     	 sub sp,sp,#16
 4664              	.LCFI175:
 4665              	 .cfi_def_cfa_offset 24
 4666 0004 00AF     	 add r7,sp,#0
 4667              	.LCFI176:
 4668              	 .cfi_def_cfa_register 7
 4669 0006 7860     	 str r0,[r7,#4]
3198:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTimeOut );
 4670              	 .loc 1 3198 0
 4671 0008 7B68     	 ldr r3,[r7,#4]
 4672 000a 002B     	 cmp r3,#0
 4673 000c 09D1     	 bne .L306
 4674              	.LBB192:
 4675              	.LBB193:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4676              	 .loc 2 195 0 discriminator 1
 4677              	
 4678 000e 4FF0FC03 	 mov r3,#252
 4679 0012 83F31188 	 msr basepri,r3
 4680 0016 BFF36F8F 	 isb 
 4681 001a BFF34F8F 	 dsb 
 4682              	
 4683              	
 4684              	 .thumb
 4685 001e FB60     	 str r3,[r7,#12]
 4686              	.L307:
 4687              	.LBE193:
 4688              	.LBE192:
 4689              	 .loc 1 3198 0 discriminator 1
 4690 0020 FEE7     	 b .L307
 4691              	.L306:
3199:../Dave/Generated/FREERTOS/tasks.c **** 	taskENTER_CRITICAL();
 4692              	 .loc 1 3199 0
 4693 0022 FFF7FEFF 	 bl vPortEnterCritical
3200:../Dave/Generated/FREERTOS/tasks.c **** 	{
3201:../Dave/Generated/FREERTOS/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 4694              	 .loc 1 3201 0
 4695 0026 064B     	 ldr r3,.L308
 4696 0028 1A68     	 ldr r2,[r3]
 4697 002a 7B68     	 ldr r3,[r7,#4]
 4698 002c 1A60     	 str r2,[r3]
3202:../Dave/Generated/FREERTOS/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4699              	 .loc 1 3202 0
 4700 002e 054B     	 ldr r3,.L308+4
 4701 0030 1A68     	 ldr r2,[r3]
 4702 0032 7B68     	 ldr r3,[r7,#4]
 4703 0034 5A60     	 str r2,[r3,#4]
3203:../Dave/Generated/FREERTOS/tasks.c **** 	}
3204:../Dave/Generated/FREERTOS/tasks.c **** 	taskEXIT_CRITICAL();
 4704              	 .loc 1 3204 0
 4705 0036 FFF7FEFF 	 bl vPortExitCritical
3205:../Dave/Generated/FREERTOS/tasks.c **** }
 4706              	 .loc 1 3205 0
 4707 003a 1037     	 adds r7,r7,#16
 4708              	.LCFI177:
 4709              	 .cfi_def_cfa_offset 8
 4710 003c BD46     	 mov sp,r7
 4711              	.LCFI178:
 4712              	 .cfi_def_cfa_register 13
 4713              	 
 4714 003e 80BD     	 pop {r7,pc}
 4715              	.L309:
 4716              	 .align 2
 4717              	.L308:
 4718 0040 00000000 	 .word xNumOfOverflows
 4719 0044 00000000 	 .word xTickCount
 4720              	 .cfi_endproc
 4721              	.LFE171:
 4723              	 .section .text.vTaskInternalSetTimeOutState,"ax",%progbits
 4724              	 .align 2
 4725              	 .global vTaskInternalSetTimeOutState
 4726              	 .thumb
 4727              	 .thumb_func
 4729              	vTaskInternalSetTimeOutState:
 4730              	.LFB172:
3206:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3207:../Dave/Generated/FREERTOS/tasks.c **** 
3208:../Dave/Generated/FREERTOS/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3209:../Dave/Generated/FREERTOS/tasks.c **** {
 4731              	 .loc 1 3209 0
 4732              	 .cfi_startproc
 4733              	 
 4734              	 
 4735              	 
 4736 0000 80B4     	 push {r7}
 4737              	.LCFI179:
 4738              	 .cfi_def_cfa_offset 4
 4739              	 .cfi_offset 7,-4
 4740 0002 83B0     	 sub sp,sp,#12
 4741              	.LCFI180:
 4742              	 .cfi_def_cfa_offset 16
 4743 0004 00AF     	 add r7,sp,#0
 4744              	.LCFI181:
 4745              	 .cfi_def_cfa_register 7
 4746 0006 7860     	 str r0,[r7,#4]
3210:../Dave/Generated/FREERTOS/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3211:../Dave/Generated/FREERTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4747              	 .loc 1 3211 0
 4748 0008 064B     	 ldr r3,.L311
 4749 000a 1A68     	 ldr r2,[r3]
 4750 000c 7B68     	 ldr r3,[r7,#4]
 4751 000e 1A60     	 str r2,[r3]
3212:../Dave/Generated/FREERTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4752              	 .loc 1 3212 0
 4753 0010 054B     	 ldr r3,.L311+4
 4754 0012 1A68     	 ldr r2,[r3]
 4755 0014 7B68     	 ldr r3,[r7,#4]
 4756 0016 5A60     	 str r2,[r3,#4]
3213:../Dave/Generated/FREERTOS/tasks.c **** }
 4757              	 .loc 1 3213 0
 4758 0018 0C37     	 adds r7,r7,#12
 4759              	.LCFI182:
 4760              	 .cfi_def_cfa_offset 4
 4761 001a BD46     	 mov sp,r7
 4762              	.LCFI183:
 4763              	 .cfi_def_cfa_register 13
 4764              	 
 4765 001c 5DF8047B 	 ldr r7,[sp],#4
 4766              	.LCFI184:
 4767              	 .cfi_restore 7
 4768              	 .cfi_def_cfa_offset 0
 4769 0020 7047     	 bx lr
 4770              	.L312:
 4771 0022 00BF     	 .align 2
 4772              	.L311:
 4773 0024 00000000 	 .word xNumOfOverflows
 4774 0028 00000000 	 .word xTickCount
 4775              	 .cfi_endproc
 4776              	.LFE172:
 4778              	 .section .text.xTaskCheckForTimeOut,"ax",%progbits
 4779              	 .align 2
 4780              	 .global xTaskCheckForTimeOut
 4781              	 .thumb
 4782              	 .thumb_func
 4784              	xTaskCheckForTimeOut:
 4785              	.LFB173:
3214:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3215:../Dave/Generated/FREERTOS/tasks.c **** 
3216:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3217:../Dave/Generated/FREERTOS/tasks.c **** {
 4786              	 .loc 1 3217 0
 4787              	 .cfi_startproc
 4788              	 
 4789              	 
 4790 0000 80B5     	 push {r7,lr}
 4791              	.LCFI185:
 4792              	 .cfi_def_cfa_offset 8
 4793              	 .cfi_offset 7,-8
 4794              	 .cfi_offset 14,-4
 4795 0002 88B0     	 sub sp,sp,#32
 4796              	.LCFI186:
 4797              	 .cfi_def_cfa_offset 40
 4798 0004 00AF     	 add r7,sp,#0
 4799              	.LCFI187:
 4800              	 .cfi_def_cfa_register 7
 4801 0006 7860     	 str r0,[r7,#4]
 4802 0008 3960     	 str r1,[r7]
3218:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xReturn;
3219:../Dave/Generated/FREERTOS/tasks.c **** 
3220:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTimeOut );
 4803              	 .loc 1 3220 0
 4804 000a 7B68     	 ldr r3,[r7,#4]
 4805 000c 002B     	 cmp r3,#0
 4806 000e 09D1     	 bne .L314
 4807              	.LBB194:
 4808              	.LBB195:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4809              	 .loc 2 195 0 discriminator 1
 4810              	
 4811 0010 4FF0FC03 	 mov r3,#252
 4812 0014 83F31188 	 msr basepri,r3
 4813 0018 BFF36F8F 	 isb 
 4814 001c BFF34F8F 	 dsb 
 4815              	
 4816              	
 4817              	 .thumb
 4818 0020 3B61     	 str r3,[r7,#16]
 4819              	.L315:
 4820              	.LBE195:
 4821              	.LBE194:
 4822              	 .loc 1 3220 0 discriminator 1
 4823 0022 FEE7     	 b .L315
 4824              	.L314:
3221:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTicksToWait );
 4825              	 .loc 1 3221 0
 4826 0024 3B68     	 ldr r3,[r7]
 4827 0026 002B     	 cmp r3,#0
 4828 0028 09D1     	 bne .L316
 4829              	.LBB196:
 4830              	.LBB197:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4831              	 .loc 2 195 0 discriminator 1
 4832              	
 4833 002a 4FF0FC03 	 mov r3,#252
 4834 002e 83F31188 	 msr basepri,r3
 4835 0032 BFF36F8F 	 isb 
 4836 0036 BFF34F8F 	 dsb 
 4837              	
 4838              	
 4839              	 .thumb
 4840 003a FB60     	 str r3,[r7,#12]
 4841              	.L317:
 4842              	.LBE197:
 4843              	.LBE196:
 4844              	 .loc 1 3221 0 discriminator 2
 4845 003c FEE7     	 b .L317
 4846              	.L316:
3222:../Dave/Generated/FREERTOS/tasks.c **** 
3223:../Dave/Generated/FREERTOS/tasks.c **** 	taskENTER_CRITICAL();
 4847              	 .loc 1 3223 0
 4848 003e FFF7FEFF 	 bl vPortEnterCritical
 4849              	.LBB198:
3224:../Dave/Generated/FREERTOS/tasks.c **** 	{
3225:../Dave/Generated/FREERTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3226:../Dave/Generated/FREERTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 4850              	 .loc 1 3226 0
 4851 0042 244B     	 ldr r3,.L324
 4852 0044 1B68     	 ldr r3,[r3]
 4853 0046 BB61     	 str r3,[r7,#24]
3227:../Dave/Generated/FREERTOS/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4854              	 .loc 1 3227 0
 4855 0048 7B68     	 ldr r3,[r7,#4]
 4856 004a 5B68     	 ldr r3,[r3,#4]
 4857 004c BA69     	 ldr r2,[r7,#24]
 4858 004e D31A     	 subs r3,r2,r3
 4859 0050 7B61     	 str r3,[r7,#20]
3228:../Dave/Generated/FREERTOS/tasks.c **** 
3229:../Dave/Generated/FREERTOS/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3230:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 4860              	 .loc 1 3230 0
 4861 0052 214B     	 ldr r3,.L324+4
 4862 0054 1B68     	 ldr r3,[r3]
 4863 0056 93F86D30 	 ldrb r3,[r3,#109]
 4864 005a 002B     	 cmp r3,#0
 4865 005c 07D0     	 beq .L318
3231:../Dave/Generated/FREERTOS/tasks.c **** 			{
3232:../Dave/Generated/FREERTOS/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3233:../Dave/Generated/FREERTOS/tasks.c **** 				but has the same result. */
3234:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
 4866              	 .loc 1 3234 0
 4867 005e 1E4B     	 ldr r3,.L324+4
 4868 0060 1B68     	 ldr r3,[r3]
 4869 0062 0022     	 movs r2,#0
 4870 0064 83F86D20 	 strb r2,[r3,#109]
3235:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdTRUE;
 4871              	 .loc 1 3235 0
 4872 0068 0123     	 movs r3,#1
 4873 006a FB61     	 str r3,[r7,#28]
 4874 006c 2BE0     	 b .L319
 4875              	.L318:
3236:../Dave/Generated/FREERTOS/tasks.c **** 			}
3237:../Dave/Generated/FREERTOS/tasks.c **** 			else
3238:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3239:../Dave/Generated/FREERTOS/tasks.c **** 
3240:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3241:../Dave/Generated/FREERTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 4876              	 .loc 1 3241 0
 4877 006e 3B68     	 ldr r3,[r7]
 4878 0070 1B68     	 ldr r3,[r3]
 4879 0072 B3F1FF3F 	 cmp r3,#-1
 4880 0076 02D1     	 bne .L320
3242:../Dave/Generated/FREERTOS/tasks.c **** 			{
3243:../Dave/Generated/FREERTOS/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3244:../Dave/Generated/FREERTOS/tasks.c **** 				specified is the maximum block time then the task should block
3245:../Dave/Generated/FREERTOS/tasks.c **** 				indefinitely, and therefore never time out. */
3246:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdFALSE;
 4881              	 .loc 1 3246 0
 4882 0078 0023     	 movs r3,#0
 4883 007a FB61     	 str r3,[r7,#28]
 4884 007c 23E0     	 b .L319
 4885              	.L320:
3247:../Dave/Generated/FREERTOS/tasks.c **** 			}
3248:../Dave/Generated/FREERTOS/tasks.c **** 			else
3249:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3250:../Dave/Generated/FREERTOS/tasks.c **** 
3251:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4886              	 .loc 1 3251 0
 4887 007e 7B68     	 ldr r3,[r7,#4]
 4888 0080 1A68     	 ldr r2,[r3]
 4889 0082 164B     	 ldr r3,.L324+8
 4890 0084 1B68     	 ldr r3,[r3]
 4891 0086 9A42     	 cmp r2,r3
 4892 0088 07D0     	 beq .L321
 4893              	 .loc 1 3251 0 is_stmt 0 discriminator 1
 4894 008a 7B68     	 ldr r3,[r7,#4]
 4895 008c 5A68     	 ldr r2,[r3,#4]
 4896 008e BB69     	 ldr r3,[r7,#24]
 4897 0090 9A42     	 cmp r2,r3
 4898 0092 02D8     	 bhi .L321
3252:../Dave/Generated/FREERTOS/tasks.c **** 		{
3253:../Dave/Generated/FREERTOS/tasks.c **** 			/* The tick count is greater than the time at which
3254:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3255:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3256:../Dave/Generated/FREERTOS/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3257:../Dave/Generated/FREERTOS/tasks.c **** 			was called. */
3258:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdTRUE;
 4899              	 .loc 1 3258 0 is_stmt 1
 4900 0094 0123     	 movs r3,#1
 4901 0096 FB61     	 str r3,[r7,#28]
 4902 0098 15E0     	 b .L319
 4903              	.L321:
3259:../Dave/Generated/FREERTOS/tasks.c **** 		}
3260:../Dave/Generated/FREERTOS/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 4904              	 .loc 1 3260 0
 4905 009a 3B68     	 ldr r3,[r7]
 4906 009c 1A68     	 ldr r2,[r3]
 4907 009e 7B69     	 ldr r3,[r7,#20]
 4908 00a0 9A42     	 cmp r2,r3
 4909 00a2 0BD9     	 bls .L322
3261:../Dave/Generated/FREERTOS/tasks.c **** 		{
3262:../Dave/Generated/FREERTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3263:../Dave/Generated/FREERTOS/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 4910              	 .loc 1 3263 0
 4911 00a4 3B68     	 ldr r3,[r7]
 4912 00a6 1A68     	 ldr r2,[r3]
 4913 00a8 7B69     	 ldr r3,[r7,#20]
 4914 00aa D21A     	 subs r2,r2,r3
 4915 00ac 3B68     	 ldr r3,[r7]
 4916 00ae 1A60     	 str r2,[r3]
3264:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4917              	 .loc 1 3264 0
 4918 00b0 7868     	 ldr r0,[r7,#4]
 4919 00b2 FFF7FEFF 	 bl vTaskInternalSetTimeOutState
3265:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdFALSE;
 4920              	 .loc 1 3265 0
 4921 00b6 0023     	 movs r3,#0
 4922 00b8 FB61     	 str r3,[r7,#28]
 4923 00ba 04E0     	 b .L319
 4924              	.L322:
3266:../Dave/Generated/FREERTOS/tasks.c **** 		}
3267:../Dave/Generated/FREERTOS/tasks.c **** 		else
3268:../Dave/Generated/FREERTOS/tasks.c **** 		{
3269:../Dave/Generated/FREERTOS/tasks.c **** 			*pxTicksToWait = 0;
 4925              	 .loc 1 3269 0
 4926 00bc 3B68     	 ldr r3,[r7]
 4927 00be 0022     	 movs r2,#0
 4928 00c0 1A60     	 str r2,[r3]
3270:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdTRUE;
 4929              	 .loc 1 3270 0
 4930 00c2 0123     	 movs r3,#1
 4931 00c4 FB61     	 str r3,[r7,#28]
 4932              	.L319:
 4933              	.LBE198:
3271:../Dave/Generated/FREERTOS/tasks.c **** 		}
3272:../Dave/Generated/FREERTOS/tasks.c **** 	}
3273:../Dave/Generated/FREERTOS/tasks.c **** 	taskEXIT_CRITICAL();
 4934              	 .loc 1 3273 0
 4935 00c6 FFF7FEFF 	 bl vPortExitCritical
3274:../Dave/Generated/FREERTOS/tasks.c **** 
3275:../Dave/Generated/FREERTOS/tasks.c **** 	return xReturn;
 4936              	 .loc 1 3275 0
 4937 00ca FB69     	 ldr r3,[r7,#28]
3276:../Dave/Generated/FREERTOS/tasks.c **** }
 4938              	 .loc 1 3276 0
 4939 00cc 1846     	 mov r0,r3
 4940 00ce 2037     	 adds r7,r7,#32
 4941              	.LCFI188:
 4942              	 .cfi_def_cfa_offset 8
 4943 00d0 BD46     	 mov sp,r7
 4944              	.LCFI189:
 4945              	 .cfi_def_cfa_register 13
 4946              	 
 4947 00d2 80BD     	 pop {r7,pc}
 4948              	.L325:
 4949              	 .align 2
 4950              	.L324:
 4951 00d4 00000000 	 .word xTickCount
 4952 00d8 00000000 	 .word pxCurrentTCB
 4953 00dc 00000000 	 .word xNumOfOverflows
 4954              	 .cfi_endproc
 4955              	.LFE173:
 4957              	 .section .text.vTaskMissedYield,"ax",%progbits
 4958              	 .align 2
 4959              	 .global vTaskMissedYield
 4960              	 .thumb
 4961              	 .thumb_func
 4963              	vTaskMissedYield:
 4964              	.LFB174:
3277:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3278:../Dave/Generated/FREERTOS/tasks.c **** 
3279:../Dave/Generated/FREERTOS/tasks.c **** void vTaskMissedYield( void )
3280:../Dave/Generated/FREERTOS/tasks.c **** {
 4965              	 .loc 1 3280 0
 4966              	 .cfi_startproc
 4967              	 
 4968              	 
 4969              	 
 4970 0000 80B4     	 push {r7}
 4971              	.LCFI190:
 4972              	 .cfi_def_cfa_offset 4
 4973              	 .cfi_offset 7,-4
 4974 0002 00AF     	 add r7,sp,#0
 4975              	.LCFI191:
 4976              	 .cfi_def_cfa_register 7
3281:../Dave/Generated/FREERTOS/tasks.c **** 	xYieldPending = pdTRUE;
 4977              	 .loc 1 3281 0
 4978 0004 034B     	 ldr r3,.L327
 4979 0006 0122     	 movs r2,#1
 4980 0008 1A60     	 str r2,[r3]
3282:../Dave/Generated/FREERTOS/tasks.c **** }
 4981              	 .loc 1 3282 0
 4982 000a BD46     	 mov sp,r7
 4983              	.LCFI192:
 4984              	 .cfi_def_cfa_register 13
 4985              	 
 4986 000c 5DF8047B 	 ldr r7,[sp],#4
 4987              	.LCFI193:
 4988              	 .cfi_restore 7
 4989              	 .cfi_def_cfa_offset 0
 4990 0010 7047     	 bx lr
 4991              	.L328:
 4992 0012 00BF     	 .align 2
 4993              	.L327:
 4994 0014 00000000 	 .word xYieldPending
 4995              	 .cfi_endproc
 4996              	.LFE174:
 4998              	 .section .text.uxTaskGetTaskNumber,"ax",%progbits
 4999              	 .align 2
 5000              	 .global uxTaskGetTaskNumber
 5001              	 .thumb
 5002              	 .thumb_func
 5004              	uxTaskGetTaskNumber:
 5005              	.LFB175:
3283:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3284:../Dave/Generated/FREERTOS/tasks.c **** 
3285:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3286:../Dave/Generated/FREERTOS/tasks.c **** 
3287:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3288:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5006              	 .loc 1 3288 0
 5007              	 .cfi_startproc
 5008              	 
 5009              	 
 5010              	 
 5011 0000 80B4     	 push {r7}
 5012              	.LCFI194:
 5013              	 .cfi_def_cfa_offset 4
 5014              	 .cfi_offset 7,-4
 5015 0002 85B0     	 sub sp,sp,#20
 5016              	.LCFI195:
 5017              	 .cfi_def_cfa_offset 24
 5018 0004 00AF     	 add r7,sp,#0
 5019              	.LCFI196:
 5020              	 .cfi_def_cfa_register 7
 5021 0006 7860     	 str r0,[r7,#4]
3289:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxReturn;
3290:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t const *pxTCB;
3291:../Dave/Generated/FREERTOS/tasks.c **** 
3292:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask != NULL )
 5022              	 .loc 1 3292 0
 5023 0008 7B68     	 ldr r3,[r7,#4]
 5024 000a 002B     	 cmp r3,#0
 5025 000c 05D0     	 beq .L330
3293:../Dave/Generated/FREERTOS/tasks.c **** 		{
3294:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = xTask;
 5026              	 .loc 1 3294 0
 5027 000e 7B68     	 ldr r3,[r7,#4]
 5028 0010 BB60     	 str r3,[r7,#8]
3295:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 5029              	 .loc 1 3295 0
 5030 0012 BB68     	 ldr r3,[r7,#8]
 5031 0014 9B6C     	 ldr r3,[r3,#72]
 5032 0016 FB60     	 str r3,[r7,#12]
 5033 0018 01E0     	 b .L331
 5034              	.L330:
3296:../Dave/Generated/FREERTOS/tasks.c **** 		}
3297:../Dave/Generated/FREERTOS/tasks.c **** 		else
3298:../Dave/Generated/FREERTOS/tasks.c **** 		{
3299:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = 0U;
 5035              	 .loc 1 3299 0
 5036 001a 0023     	 movs r3,#0
 5037 001c FB60     	 str r3,[r7,#12]
 5038              	.L331:
3300:../Dave/Generated/FREERTOS/tasks.c **** 		}
3301:../Dave/Generated/FREERTOS/tasks.c **** 
3302:../Dave/Generated/FREERTOS/tasks.c **** 		return uxReturn;
 5039              	 .loc 1 3302 0
 5040 001e FB68     	 ldr r3,[r7,#12]
3303:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5041              	 .loc 1 3303 0
 5042 0020 1846     	 mov r0,r3
 5043 0022 1437     	 adds r7,r7,#20
 5044              	.LCFI197:
 5045              	 .cfi_def_cfa_offset 4
 5046 0024 BD46     	 mov sp,r7
 5047              	.LCFI198:
 5048              	 .cfi_def_cfa_register 13
 5049              	 
 5050 0026 5DF8047B 	 ldr r7,[sp],#4
 5051              	.LCFI199:
 5052              	 .cfi_restore 7
 5053              	 .cfi_def_cfa_offset 0
 5054 002a 7047     	 bx lr
 5055              	 .cfi_endproc
 5056              	.LFE175:
 5058              	 .section .text.vTaskSetTaskNumber,"ax",%progbits
 5059              	 .align 2
 5060              	 .global vTaskSetTaskNumber
 5061              	 .thumb
 5062              	 .thumb_func
 5064              	vTaskSetTaskNumber:
 5065              	.LFB176:
3304:../Dave/Generated/FREERTOS/tasks.c **** 
3305:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3306:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3307:../Dave/Generated/FREERTOS/tasks.c **** 
3308:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3309:../Dave/Generated/FREERTOS/tasks.c **** 
3310:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3311:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5066              	 .loc 1 3311 0
 5067              	 .cfi_startproc
 5068              	 
 5069              	 
 5070              	 
 5071 0000 80B4     	 push {r7}
 5072              	.LCFI200:
 5073              	 .cfi_def_cfa_offset 4
 5074              	 .cfi_offset 7,-4
 5075 0002 85B0     	 sub sp,sp,#20
 5076              	.LCFI201:
 5077              	 .cfi_def_cfa_offset 24
 5078 0004 00AF     	 add r7,sp,#0
 5079              	.LCFI202:
 5080              	 .cfi_def_cfa_register 7
 5081 0006 7860     	 str r0,[r7,#4]
 5082 0008 3960     	 str r1,[r7]
3312:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
3313:../Dave/Generated/FREERTOS/tasks.c **** 
3314:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask != NULL )
 5083              	 .loc 1 3314 0
 5084 000a 7B68     	 ldr r3,[r7,#4]
 5085 000c 002B     	 cmp r3,#0
 5086 000e 04D0     	 beq .L333
3315:../Dave/Generated/FREERTOS/tasks.c **** 		{
3316:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = xTask;
 5087              	 .loc 1 3316 0
 5088 0010 7B68     	 ldr r3,[r7,#4]
 5089 0012 FB60     	 str r3,[r7,#12]
3317:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 5090              	 .loc 1 3317 0
 5091 0014 FB68     	 ldr r3,[r7,#12]
 5092 0016 3A68     	 ldr r2,[r7]
 5093 0018 9A64     	 str r2,[r3,#72]
 5094              	.L333:
3318:../Dave/Generated/FREERTOS/tasks.c **** 		}
3319:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5095              	 .loc 1 3319 0
 5096 001a 1437     	 adds r7,r7,#20
 5097              	.LCFI203:
 5098              	 .cfi_def_cfa_offset 4
 5099 001c BD46     	 mov sp,r7
 5100              	.LCFI204:
 5101              	 .cfi_def_cfa_register 13
 5102              	 
 5103 001e 5DF8047B 	 ldr r7,[sp],#4
 5104              	.LCFI205:
 5105              	 .cfi_restore 7
 5106              	 .cfi_def_cfa_offset 0
 5107 0022 7047     	 bx lr
 5108              	 .cfi_endproc
 5109              	.LFE176:
 5111              	 .section .text.prvIdleTask,"ax",%progbits
 5112              	 .align 2
 5113              	 .thumb
 5114              	 .thumb_func
 5116              	prvIdleTask:
 5117              	.LFB177:
3320:../Dave/Generated/FREERTOS/tasks.c **** 
3321:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3322:../Dave/Generated/FREERTOS/tasks.c **** 
3323:../Dave/Generated/FREERTOS/tasks.c **** /*
3324:../Dave/Generated/FREERTOS/tasks.c ****  * -----------------------------------------------------------
3325:../Dave/Generated/FREERTOS/tasks.c ****  * The Idle task.
3326:../Dave/Generated/FREERTOS/tasks.c ****  * ----------------------------------------------------------
3327:../Dave/Generated/FREERTOS/tasks.c ****  *
3328:../Dave/Generated/FREERTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3329:../Dave/Generated/FREERTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3330:../Dave/Generated/FREERTOS/tasks.c ****  *
3331:../Dave/Generated/FREERTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3332:../Dave/Generated/FREERTOS/tasks.c ****  *
3333:../Dave/Generated/FREERTOS/tasks.c ****  */
3334:../Dave/Generated/FREERTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3335:../Dave/Generated/FREERTOS/tasks.c **** {
 5118              	 .loc 1 3335 0
 5119              	 .cfi_startproc
 5120              	 
 5121              	 
 5122 0000 80B5     	 push {r7,lr}
 5123              	.LCFI206:
 5124              	 .cfi_def_cfa_offset 8
 5125              	 .cfi_offset 7,-8
 5126              	 .cfi_offset 14,-4
 5127 0002 82B0     	 sub sp,sp,#8
 5128              	.LCFI207:
 5129              	 .cfi_def_cfa_offset 16
 5130 0004 00AF     	 add r7,sp,#0
 5131              	.LCFI208:
 5132              	 .cfi_def_cfa_register 7
 5133 0006 7860     	 str r0,[r7,#4]
 5134              	.L337:
3336:../Dave/Generated/FREERTOS/tasks.c **** 	/* Stop warnings. */
3337:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) pvParameters;
3338:../Dave/Generated/FREERTOS/tasks.c **** 
3339:../Dave/Generated/FREERTOS/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3340:../Dave/Generated/FREERTOS/tasks.c **** 	SCHEDULER IS STARTED. **/
3341:../Dave/Generated/FREERTOS/tasks.c **** 
3342:../Dave/Generated/FREERTOS/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3343:../Dave/Generated/FREERTOS/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3344:../Dave/Generated/FREERTOS/tasks.c **** 	any. */
3345:../Dave/Generated/FREERTOS/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3346:../Dave/Generated/FREERTOS/tasks.c **** 
3347:../Dave/Generated/FREERTOS/tasks.c **** 	for( ;; )
3348:../Dave/Generated/FREERTOS/tasks.c **** 	{
3349:../Dave/Generated/FREERTOS/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3350:../Dave/Generated/FREERTOS/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3351:../Dave/Generated/FREERTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
 5135              	 .loc 1 3351 0
 5136 0008 FFF7FEFF 	 bl prvCheckTasksWaitingTermination
3352:../Dave/Generated/FREERTOS/tasks.c **** 
3353:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3354:../Dave/Generated/FREERTOS/tasks.c **** 		{
3355:../Dave/Generated/FREERTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3356:../Dave/Generated/FREERTOS/tasks.c **** 			see if any other task has become available.  If we are using
3357:../Dave/Generated/FREERTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
3358:../Dave/Generated/FREERTOS/tasks.c **** 			will automatically get the processor anyway. */
3359:../Dave/Generated/FREERTOS/tasks.c **** 			taskYIELD();
3360:../Dave/Generated/FREERTOS/tasks.c **** 		}
3361:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3362:../Dave/Generated/FREERTOS/tasks.c **** 
3363:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3364:../Dave/Generated/FREERTOS/tasks.c **** 		{
3365:../Dave/Generated/FREERTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
3366:../Dave/Generated/FREERTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3367:../Dave/Generated/FREERTOS/tasks.c **** 			to run then the idle task should yield before the end of the
3368:../Dave/Generated/FREERTOS/tasks.c **** 			timeslice.
3369:../Dave/Generated/FREERTOS/tasks.c **** 
3370:../Dave/Generated/FREERTOS/tasks.c **** 			A critical region is not required here as we are just reading from
3371:../Dave/Generated/FREERTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3372:../Dave/Generated/FREERTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
3373:../Dave/Generated/FREERTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
3374:../Dave/Generated/FREERTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 5137              	 .loc 1 3374 0
 5138 000c 064B     	 ldr r3,.L338
 5139 000e 1B68     	 ldr r3,[r3]
 5140 0010 012B     	 cmp r3,#1
 5141 0012 07D9     	 bls .L336
3375:../Dave/Generated/FREERTOS/tasks.c **** 			{
3376:../Dave/Generated/FREERTOS/tasks.c **** 				taskYIELD();
 5142              	 .loc 1 3376 0
 5143 0014 054B     	 ldr r3,.L338+4
 5144 0016 4FF08052 	 mov r2,#268435456
 5145 001a 1A60     	 str r2,[r3]
 5146              	
 5147 001c BFF34F8F 	 dsb
 5148              	
 5149              	
 5150 0020 BFF36F8F 	 isb
 5151              	
 5152              	 .thumb
 5153              	.L336:
3377:../Dave/Generated/FREERTOS/tasks.c **** 			}
3378:../Dave/Generated/FREERTOS/tasks.c **** 			else
3379:../Dave/Generated/FREERTOS/tasks.c **** 			{
3380:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3381:../Dave/Generated/FREERTOS/tasks.c **** 			}
3382:../Dave/Generated/FREERTOS/tasks.c **** 		}
3383:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3384:../Dave/Generated/FREERTOS/tasks.c **** 
3385:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3386:../Dave/Generated/FREERTOS/tasks.c **** 		{
3387:../Dave/Generated/FREERTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
3388:../Dave/Generated/FREERTOS/tasks.c **** 
3389:../Dave/Generated/FREERTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3390:../Dave/Generated/FREERTOS/tasks.c **** 			allows the application designer to add background functionality
3391:../Dave/Generated/FREERTOS/tasks.c **** 			without the overhead of a separate task.
3392:../Dave/Generated/FREERTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3393:../Dave/Generated/FREERTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3394:../Dave/Generated/FREERTOS/tasks.c **** 			vApplicationIdleHook();
3395:../Dave/Generated/FREERTOS/tasks.c **** 		}
3396:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3397:../Dave/Generated/FREERTOS/tasks.c **** 
3398:../Dave/Generated/FREERTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3399:../Dave/Generated/FREERTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3400:../Dave/Generated/FREERTOS/tasks.c **** 		user defined low power mode	implementations require
3401:../Dave/Generated/FREERTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3402:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3403:../Dave/Generated/FREERTOS/tasks.c **** 		{
3404:../Dave/Generated/FREERTOS/tasks.c **** 		TickType_t xExpectedIdleTime;
3405:../Dave/Generated/FREERTOS/tasks.c **** 
3406:../Dave/Generated/FREERTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3407:../Dave/Generated/FREERTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3408:../Dave/Generated/FREERTOS/tasks.c **** 			test of the expected idle time is performed without the
3409:../Dave/Generated/FREERTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3410:../Dave/Generated/FREERTOS/tasks.c **** 			valid. */
3411:../Dave/Generated/FREERTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3412:../Dave/Generated/FREERTOS/tasks.c **** 
3413:../Dave/Generated/FREERTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3414:../Dave/Generated/FREERTOS/tasks.c **** 			{
3415:../Dave/Generated/FREERTOS/tasks.c **** 				vTaskSuspendAll();
3416:../Dave/Generated/FREERTOS/tasks.c **** 				{
3417:../Dave/Generated/FREERTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3418:../Dave/Generated/FREERTOS/tasks.c **** 					time can be sampled again, and this time its value can
3419:../Dave/Generated/FREERTOS/tasks.c **** 					be used. */
3420:../Dave/Generated/FREERTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3421:../Dave/Generated/FREERTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3422:../Dave/Generated/FREERTOS/tasks.c **** 
3423:../Dave/Generated/FREERTOS/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3424:../Dave/Generated/FREERTOS/tasks.c **** 					if the application does not want
3425:../Dave/Generated/FREERTOS/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3426:../Dave/Generated/FREERTOS/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3427:../Dave/Generated/FREERTOS/tasks.c **** 
3428:../Dave/Generated/FREERTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3429:../Dave/Generated/FREERTOS/tasks.c **** 					{
3430:../Dave/Generated/FREERTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3431:../Dave/Generated/FREERTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3432:../Dave/Generated/FREERTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
3433:../Dave/Generated/FREERTOS/tasks.c **** 					}
3434:../Dave/Generated/FREERTOS/tasks.c **** 					else
3435:../Dave/Generated/FREERTOS/tasks.c **** 					{
3436:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3437:../Dave/Generated/FREERTOS/tasks.c **** 					}
3438:../Dave/Generated/FREERTOS/tasks.c **** 				}
3439:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) xTaskResumeAll();
3440:../Dave/Generated/FREERTOS/tasks.c **** 			}
3441:../Dave/Generated/FREERTOS/tasks.c **** 			else
3442:../Dave/Generated/FREERTOS/tasks.c **** 			{
3443:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3444:../Dave/Generated/FREERTOS/tasks.c **** 			}
3445:../Dave/Generated/FREERTOS/tasks.c **** 		}
3446:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3447:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5154              	 .loc 1 3447 0
 5155 0024 F0E7     	 b .L337
 5156              	.L339:
 5157 0026 00BF     	 .align 2
 5158              	.L338:
 5159 0028 00000000 	 .word pxReadyTasksLists
 5160 002c 04ED00E0 	 .word -536810236
 5161              	 .cfi_endproc
 5162              	.LFE177:
 5164              	 .section .text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 5165              	 .align 2
 5166              	 .global vTaskSetThreadLocalStoragePointer
 5167              	 .thumb
 5168              	 .thumb_func
 5170              	vTaskSetThreadLocalStoragePointer:
 5171              	.LFB178:
3448:../Dave/Generated/FREERTOS/tasks.c **** }
3449:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3450:../Dave/Generated/FREERTOS/tasks.c **** 
3451:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3452:../Dave/Generated/FREERTOS/tasks.c **** 
3453:../Dave/Generated/FREERTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3454:../Dave/Generated/FREERTOS/tasks.c **** 	{
3455:../Dave/Generated/FREERTOS/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3456:../Dave/Generated/FREERTOS/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3457:../Dave/Generated/FREERTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3458:../Dave/Generated/FREERTOS/tasks.c **** 
3459:../Dave/Generated/FREERTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3460:../Dave/Generated/FREERTOS/tasks.c **** 		{
3461:../Dave/Generated/FREERTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3462:../Dave/Generated/FREERTOS/tasks.c **** 			eReturn = eAbortSleep;
3463:../Dave/Generated/FREERTOS/tasks.c **** 		}
3464:../Dave/Generated/FREERTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
3465:../Dave/Generated/FREERTOS/tasks.c **** 		{
3466:../Dave/Generated/FREERTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3467:../Dave/Generated/FREERTOS/tasks.c **** 			eReturn = eAbortSleep;
3468:../Dave/Generated/FREERTOS/tasks.c **** 		}
3469:../Dave/Generated/FREERTOS/tasks.c **** 		else
3470:../Dave/Generated/FREERTOS/tasks.c **** 		{
3471:../Dave/Generated/FREERTOS/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3472:../Dave/Generated/FREERTOS/tasks.c **** 			have an infinite block time rather than actually being suspended)
3473:../Dave/Generated/FREERTOS/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3474:../Dave/Generated/FREERTOS/tasks.c **** 			interrupts. */
3475:../Dave/Generated/FREERTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3476:../Dave/Generated/FREERTOS/tasks.c **** 			{
3477:../Dave/Generated/FREERTOS/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3478:../Dave/Generated/FREERTOS/tasks.c **** 			}
3479:../Dave/Generated/FREERTOS/tasks.c **** 			else
3480:../Dave/Generated/FREERTOS/tasks.c **** 			{
3481:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3482:../Dave/Generated/FREERTOS/tasks.c **** 			}
3483:../Dave/Generated/FREERTOS/tasks.c **** 		}
3484:../Dave/Generated/FREERTOS/tasks.c **** 
3485:../Dave/Generated/FREERTOS/tasks.c **** 		return eReturn;
3486:../Dave/Generated/FREERTOS/tasks.c **** 	}
3487:../Dave/Generated/FREERTOS/tasks.c **** 
3488:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3489:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3490:../Dave/Generated/FREERTOS/tasks.c **** 
3491:../Dave/Generated/FREERTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3492:../Dave/Generated/FREERTOS/tasks.c **** 
3493:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3494:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5172              	 .loc 1 3494 0
 5173              	 .cfi_startproc
 5174              	 
 5175              	 
 5176              	 
 5177 0000 80B4     	 push {r7}
 5178              	.LCFI209:
 5179              	 .cfi_def_cfa_offset 4
 5180              	 .cfi_offset 7,-4
 5181 0002 87B0     	 sub sp,sp,#28
 5182              	.LCFI210:
 5183              	 .cfi_def_cfa_offset 32
 5184 0004 00AF     	 add r7,sp,#0
 5185              	.LCFI211:
 5186              	 .cfi_def_cfa_register 7
 5187 0006 F860     	 str r0,[r7,#12]
 5188 0008 B960     	 str r1,[r7,#8]
 5189 000a 7A60     	 str r2,[r7,#4]
3495:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3496:../Dave/Generated/FREERTOS/tasks.c **** 
3497:../Dave/Generated/FREERTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 5190              	 .loc 1 3497 0
 5191 000c BB68     	 ldr r3,[r7,#8]
 5192 000e 042B     	 cmp r3,#4
 5193 0010 0EDC     	 bgt .L340
3498:../Dave/Generated/FREERTOS/tasks.c **** 		{
3499:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 5194              	 .loc 1 3499 0
 5195 0012 FB68     	 ldr r3,[r7,#12]
 5196 0014 002B     	 cmp r3,#0
 5197 0016 02D1     	 bne .L342
 5198              	 .loc 1 3499 0 is_stmt 0 discriminator 1
 5199 0018 084B     	 ldr r3,.L344
 5200 001a 1B68     	 ldr r3,[r3]
 5201 001c 00E0     	 b .L343
 5202              	.L342:
 5203              	 .loc 1 3499 0 discriminator 2
 5204 001e FB68     	 ldr r3,[r7,#12]
 5205              	.L343:
 5206              	 .loc 1 3499 0 discriminator 4
 5207 0020 7B61     	 str r3,[r7,#20]
3500:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 5208              	 .loc 1 3500 0 is_stmt 1 discriminator 4
 5209 0022 7A69     	 ldr r2,[r7,#20]
 5210 0024 BB68     	 ldr r3,[r7,#8]
 5211 0026 1433     	 adds r3,r3,#20
 5212 0028 9B00     	 lsls r3,r3,#2
 5213 002a 1344     	 add r3,r3,r2
 5214 002c 7A68     	 ldr r2,[r7,#4]
 5215 002e 5A60     	 str r2,[r3,#4]
 5216              	.L340:
3501:../Dave/Generated/FREERTOS/tasks.c **** 		}
3502:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5217              	 .loc 1 3502 0
 5218 0030 1C37     	 adds r7,r7,#28
 5219              	.LCFI212:
 5220              	 .cfi_def_cfa_offset 4
 5221 0032 BD46     	 mov sp,r7
 5222              	.LCFI213:
 5223              	 .cfi_def_cfa_register 13
 5224              	 
 5225 0034 5DF8047B 	 ldr r7,[sp],#4
 5226              	.LCFI214:
 5227              	 .cfi_restore 7
 5228              	 .cfi_def_cfa_offset 0
 5229 0038 7047     	 bx lr
 5230              	.L345:
 5231 003a 00BF     	 .align 2
 5232              	.L344:
 5233 003c 00000000 	 .word pxCurrentTCB
 5234              	 .cfi_endproc
 5235              	.LFE178:
 5237              	 .section .text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 5238              	 .align 2
 5239              	 .global pvTaskGetThreadLocalStoragePointer
 5240              	 .thumb
 5241              	 .thumb_func
 5243              	pvTaskGetThreadLocalStoragePointer:
 5244              	.LFB179:
3503:../Dave/Generated/FREERTOS/tasks.c **** 
3504:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3505:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3506:../Dave/Generated/FREERTOS/tasks.c **** 
3507:../Dave/Generated/FREERTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3508:../Dave/Generated/FREERTOS/tasks.c **** 
3509:../Dave/Generated/FREERTOS/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3510:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5245              	 .loc 1 3510 0
 5246              	 .cfi_startproc
 5247              	 
 5248              	 
 5249              	 
 5250 0000 80B4     	 push {r7}
 5251              	.LCFI215:
 5252              	 .cfi_def_cfa_offset 4
 5253              	 .cfi_offset 7,-4
 5254 0002 85B0     	 sub sp,sp,#20
 5255              	.LCFI216:
 5256              	 .cfi_def_cfa_offset 24
 5257 0004 00AF     	 add r7,sp,#0
 5258              	.LCFI217:
 5259              	 .cfi_def_cfa_register 7
 5260 0006 7860     	 str r0,[r7,#4]
 5261 0008 3960     	 str r1,[r7]
3511:../Dave/Generated/FREERTOS/tasks.c **** 	void *pvReturn = NULL;
 5262              	 .loc 1 3511 0
 5263 000a 0023     	 movs r3,#0
 5264 000c FB60     	 str r3,[r7,#12]
3512:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3513:../Dave/Generated/FREERTOS/tasks.c **** 
3514:../Dave/Generated/FREERTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 5265              	 .loc 1 3514 0
 5266 000e 3B68     	 ldr r3,[r7]
 5267 0010 042B     	 cmp r3,#4
 5268 0012 0FDC     	 bgt .L347
3515:../Dave/Generated/FREERTOS/tasks.c **** 		{
3516:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 5269              	 .loc 1 3516 0
 5270 0014 7B68     	 ldr r3,[r7,#4]
 5271 0016 002B     	 cmp r3,#0
 5272 0018 02D1     	 bne .L348
 5273              	 .loc 1 3516 0 is_stmt 0 discriminator 1
 5274 001a 0B4B     	 ldr r3,.L352
 5275 001c 1B68     	 ldr r3,[r3]
 5276 001e 00E0     	 b .L349
 5277              	.L348:
 5278              	 .loc 1 3516 0 discriminator 2
 5279 0020 7B68     	 ldr r3,[r7,#4]
 5280              	.L349:
 5281              	 .loc 1 3516 0 discriminator 4
 5282 0022 BB60     	 str r3,[r7,#8]
3517:../Dave/Generated/FREERTOS/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 5283              	 .loc 1 3517 0 is_stmt 1 discriminator 4
 5284 0024 BA68     	 ldr r2,[r7,#8]
 5285 0026 3B68     	 ldr r3,[r7]
 5286 0028 1433     	 adds r3,r3,#20
 5287 002a 9B00     	 lsls r3,r3,#2
 5288 002c 1344     	 add r3,r3,r2
 5289 002e 5B68     	 ldr r3,[r3,#4]
 5290 0030 FB60     	 str r3,[r7,#12]
 5291 0032 01E0     	 b .L350
 5292              	.L347:
3518:../Dave/Generated/FREERTOS/tasks.c **** 		}
3519:../Dave/Generated/FREERTOS/tasks.c **** 		else
3520:../Dave/Generated/FREERTOS/tasks.c **** 		{
3521:../Dave/Generated/FREERTOS/tasks.c **** 			pvReturn = NULL;
 5293              	 .loc 1 3521 0
 5294 0034 0023     	 movs r3,#0
 5295 0036 FB60     	 str r3,[r7,#12]
 5296              	.L350:
3522:../Dave/Generated/FREERTOS/tasks.c **** 		}
3523:../Dave/Generated/FREERTOS/tasks.c **** 
3524:../Dave/Generated/FREERTOS/tasks.c **** 		return pvReturn;
 5297              	 .loc 1 3524 0
 5298 0038 FB68     	 ldr r3,[r7,#12]
3525:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5299              	 .loc 1 3525 0
 5300 003a 1846     	 mov r0,r3
 5301 003c 1437     	 adds r7,r7,#20
 5302              	.LCFI218:
 5303              	 .cfi_def_cfa_offset 4
 5304 003e BD46     	 mov sp,r7
 5305              	.LCFI219:
 5306              	 .cfi_def_cfa_register 13
 5307              	 
 5308 0040 5DF8047B 	 ldr r7,[sp],#4
 5309              	.LCFI220:
 5310              	 .cfi_restore 7
 5311              	 .cfi_def_cfa_offset 0
 5312 0044 7047     	 bx lr
 5313              	.L353:
 5314 0046 00BF     	 .align 2
 5315              	.L352:
 5316 0048 00000000 	 .word pxCurrentTCB
 5317              	 .cfi_endproc
 5318              	.LFE179:
 5320              	 .section .text.prvInitialiseTaskLists,"ax",%progbits
 5321              	 .align 2
 5322              	 .thumb
 5323              	 .thumb_func
 5325              	prvInitialiseTaskLists:
 5326              	.LFB180:
3526:../Dave/Generated/FREERTOS/tasks.c **** 
3527:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3528:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3529:../Dave/Generated/FREERTOS/tasks.c **** 
3530:../Dave/Generated/FREERTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3531:../Dave/Generated/FREERTOS/tasks.c **** 
3532:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3533:../Dave/Generated/FREERTOS/tasks.c **** 	{
3534:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3535:../Dave/Generated/FREERTOS/tasks.c **** 
3536:../Dave/Generated/FREERTOS/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3537:../Dave/Generated/FREERTOS/tasks.c **** 		the calling task. */
3538:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3539:../Dave/Generated/FREERTOS/tasks.c **** 
3540:../Dave/Generated/FREERTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3541:../Dave/Generated/FREERTOS/tasks.c **** 	}
3542:../Dave/Generated/FREERTOS/tasks.c **** 
3543:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3544:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3545:../Dave/Generated/FREERTOS/tasks.c **** 
3546:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3547:../Dave/Generated/FREERTOS/tasks.c **** {
 5327              	 .loc 1 3547 0
 5328              	 .cfi_startproc
 5329              	 
 5330              	 
 5331 0000 80B5     	 push {r7,lr}
 5332              	.LCFI221:
 5333              	 .cfi_def_cfa_offset 8
 5334              	 .cfi_offset 7,-8
 5335              	 .cfi_offset 14,-4
 5336 0002 82B0     	 sub sp,sp,#8
 5337              	.LCFI222:
 5338              	 .cfi_def_cfa_offset 16
 5339 0004 00AF     	 add r7,sp,#0
 5340              	.LCFI223:
 5341              	 .cfi_def_cfa_register 7
3548:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t uxPriority;
3549:../Dave/Generated/FREERTOS/tasks.c **** 
3550:../Dave/Generated/FREERTOS/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 5342              	 .loc 1 3550 0
 5343 0006 0023     	 movs r3,#0
 5344 0008 7B60     	 str r3,[r7,#4]
 5345 000a 0CE0     	 b .L355
 5346              	.L356:
3551:../Dave/Generated/FREERTOS/tasks.c **** 	{
3552:../Dave/Generated/FREERTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5347              	 .loc 1 3552 0 discriminator 3
 5348 000c 7A68     	 ldr r2,[r7,#4]
 5349 000e 1346     	 mov r3,r2
 5350 0010 9B00     	 lsls r3,r3,#2
 5351 0012 1344     	 add r3,r3,r2
 5352 0014 9B00     	 lsls r3,r3,#2
 5353 0016 114A     	 ldr r2,.L357
 5354 0018 1344     	 add r3,r3,r2
 5355 001a 1846     	 mov r0,r3
 5356 001c FFF7FEFF 	 bl vListInitialise
3550:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5357              	 .loc 1 3550 0 discriminator 3
 5358 0020 7B68     	 ldr r3,[r7,#4]
 5359 0022 0133     	 adds r3,r3,#1
 5360 0024 7B60     	 str r3,[r7,#4]
 5361              	.L355:
3550:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5362              	 .loc 1 3550 0 is_stmt 0 discriminator 1
 5363 0026 7B68     	 ldr r3,[r7,#4]
 5364 0028 052B     	 cmp r3,#5
 5365 002a EFD9     	 bls .L356
3553:../Dave/Generated/FREERTOS/tasks.c **** 	}
3554:../Dave/Generated/FREERTOS/tasks.c **** 
3555:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 5366              	 .loc 1 3555 0 is_stmt 1
 5367 002c 0C48     	 ldr r0,.L357+4
 5368 002e FFF7FEFF 	 bl vListInitialise
3556:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 5369              	 .loc 1 3556 0
 5370 0032 0C48     	 ldr r0,.L357+8
 5371 0034 FFF7FEFF 	 bl vListInitialise
3557:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 5372              	 .loc 1 3557 0
 5373 0038 0B48     	 ldr r0,.L357+12
 5374 003a FFF7FEFF 	 bl vListInitialise
3558:../Dave/Generated/FREERTOS/tasks.c **** 
3559:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3560:../Dave/Generated/FREERTOS/tasks.c **** 	{
3561:../Dave/Generated/FREERTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 5375              	 .loc 1 3561 0
 5376 003e 0B48     	 ldr r0,.L357+16
 5377 0040 FFF7FEFF 	 bl vListInitialise
3562:../Dave/Generated/FREERTOS/tasks.c **** 	}
3563:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3564:../Dave/Generated/FREERTOS/tasks.c **** 
3565:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3566:../Dave/Generated/FREERTOS/tasks.c **** 	{
3567:../Dave/Generated/FREERTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 5378              	 .loc 1 3567 0
 5379 0044 0A48     	 ldr r0,.L357+20
 5380 0046 FFF7FEFF 	 bl vListInitialise
3568:../Dave/Generated/FREERTOS/tasks.c **** 	}
3569:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3570:../Dave/Generated/FREERTOS/tasks.c **** 
3571:../Dave/Generated/FREERTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3572:../Dave/Generated/FREERTOS/tasks.c **** 	using list2. */
3573:../Dave/Generated/FREERTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 5381              	 .loc 1 3573 0
 5382 004a 0A4B     	 ldr r3,.L357+24
 5383 004c 044A     	 ldr r2,.L357+4
 5384 004e 1A60     	 str r2,[r3]
3574:../Dave/Generated/FREERTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5385              	 .loc 1 3574 0
 5386 0050 094B     	 ldr r3,.L357+28
 5387 0052 044A     	 ldr r2,.L357+8
 5388 0054 1A60     	 str r2,[r3]
3575:../Dave/Generated/FREERTOS/tasks.c **** }
 5389              	 .loc 1 3575 0
 5390 0056 0837     	 adds r7,r7,#8
 5391              	.LCFI224:
 5392              	 .cfi_def_cfa_offset 8
 5393 0058 BD46     	 mov sp,r7
 5394              	.LCFI225:
 5395              	 .cfi_def_cfa_register 13
 5396              	 
 5397 005a 80BD     	 pop {r7,pc}
 5398              	.L358:
 5399              	 .align 2
 5400              	.L357:
 5401 005c 00000000 	 .word pxReadyTasksLists
 5402 0060 00000000 	 .word xDelayedTaskList1
 5403 0064 00000000 	 .word xDelayedTaskList2
 5404 0068 00000000 	 .word xPendingReadyList
 5405 006c 00000000 	 .word xTasksWaitingTermination
 5406 0070 00000000 	 .word xSuspendedTaskList
 5407 0074 00000000 	 .word pxDelayedTaskList
 5408 0078 00000000 	 .word pxOverflowDelayedTaskList
 5409              	 .cfi_endproc
 5410              	.LFE180:
 5412              	 .section .text.prvCheckTasksWaitingTermination,"ax",%progbits
 5413              	 .align 2
 5414              	 .thumb
 5415              	 .thumb_func
 5417              	prvCheckTasksWaitingTermination:
 5418              	.LFB181:
3576:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3577:../Dave/Generated/FREERTOS/tasks.c **** 
3578:../Dave/Generated/FREERTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3579:../Dave/Generated/FREERTOS/tasks.c **** {
 5419              	 .loc 1 3579 0
 5420              	 .cfi_startproc
 5421              	 
 5422              	 
 5423 0000 80B5     	 push {r7,lr}
 5424              	.LCFI226:
 5425              	 .cfi_def_cfa_offset 8
 5426              	 .cfi_offset 7,-8
 5427              	 .cfi_offset 14,-4
 5428 0002 82B0     	 sub sp,sp,#8
 5429              	.LCFI227:
 5430              	 .cfi_def_cfa_offset 16
 5431 0004 00AF     	 add r7,sp,#0
 5432              	.LCFI228:
 5433              	 .cfi_def_cfa_register 7
 5434              	.LBB199:
3580:../Dave/Generated/FREERTOS/tasks.c **** 
3581:../Dave/Generated/FREERTOS/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3582:../Dave/Generated/FREERTOS/tasks.c **** 
3583:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3584:../Dave/Generated/FREERTOS/tasks.c **** 	{
3585:../Dave/Generated/FREERTOS/tasks.c **** 		TCB_t *pxTCB;
3586:../Dave/Generated/FREERTOS/tasks.c **** 
3587:../Dave/Generated/FREERTOS/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3588:../Dave/Generated/FREERTOS/tasks.c **** 		being called too often in the idle task. */
3589:../Dave/Generated/FREERTOS/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5435              	 .loc 1 3589 0
 5436 0006 19E0     	 b .L360
 5437              	.L361:
3590:../Dave/Generated/FREERTOS/tasks.c **** 		{
3591:../Dave/Generated/FREERTOS/tasks.c **** 			taskENTER_CRITICAL();
 5438              	 .loc 1 3591 0
 5439 0008 FFF7FEFF 	 bl vPortEnterCritical
3592:../Dave/Generated/FREERTOS/tasks.c **** 			{
3593:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 5440              	 .loc 1 3593 0
 5441 000c 0F4B     	 ldr r3,.L362
 5442 000e DB68     	 ldr r3,[r3,#12]
 5443 0010 DB68     	 ldr r3,[r3,#12]
 5444 0012 7B60     	 str r3,[r7,#4]
3594:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5445              	 .loc 1 3594 0
 5446 0014 7B68     	 ldr r3,[r7,#4]
 5447 0016 0433     	 adds r3,r3,#4
 5448 0018 1846     	 mov r0,r3
 5449 001a FFF7FEFF 	 bl uxListRemove
3595:../Dave/Generated/FREERTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
 5450              	 .loc 1 3595 0
 5451 001e 0C4B     	 ldr r3,.L362+4
 5452 0020 1B68     	 ldr r3,[r3]
 5453 0022 013B     	 subs r3,r3,#1
 5454 0024 0A4A     	 ldr r2,.L362+4
 5455 0026 1360     	 str r3,[r2]
3596:../Dave/Generated/FREERTOS/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 5456              	 .loc 1 3596 0
 5457 0028 0A4B     	 ldr r3,.L362+8
 5458 002a 1B68     	 ldr r3,[r3]
 5459 002c 013B     	 subs r3,r3,#1
 5460 002e 094A     	 ldr r2,.L362+8
 5461 0030 1360     	 str r3,[r2]
3597:../Dave/Generated/FREERTOS/tasks.c **** 			}
3598:../Dave/Generated/FREERTOS/tasks.c **** 			taskEXIT_CRITICAL();
 5462              	 .loc 1 3598 0
 5463 0032 FFF7FEFF 	 bl vPortExitCritical
3599:../Dave/Generated/FREERTOS/tasks.c **** 
3600:../Dave/Generated/FREERTOS/tasks.c **** 			prvDeleteTCB( pxTCB );
 5464              	 .loc 1 3600 0
 5465 0036 7868     	 ldr r0,[r7,#4]
 5466 0038 FFF7FEFF 	 bl prvDeleteTCB
 5467              	.L360:
3589:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5468              	 .loc 1 3589 0
 5469 003c 054B     	 ldr r3,.L362+8
 5470 003e 1B68     	 ldr r3,[r3]
 5471 0040 002B     	 cmp r3,#0
 5472 0042 E1D1     	 bne .L361
 5473              	.LBE199:
3601:../Dave/Generated/FREERTOS/tasks.c **** 		}
3602:../Dave/Generated/FREERTOS/tasks.c **** 	}
3603:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3604:../Dave/Generated/FREERTOS/tasks.c **** }
 5474              	 .loc 1 3604 0
 5475 0044 0837     	 adds r7,r7,#8
 5476              	.LCFI229:
 5477              	 .cfi_def_cfa_offset 8
 5478 0046 BD46     	 mov sp,r7
 5479              	.LCFI230:
 5480              	 .cfi_def_cfa_register 13
 5481              	 
 5482 0048 80BD     	 pop {r7,pc}
 5483              	.L363:
 5484 004a 00BF     	 .align 2
 5485              	.L362:
 5486 004c 00000000 	 .word xTasksWaitingTermination
 5487 0050 00000000 	 .word uxCurrentNumberOfTasks
 5488 0054 00000000 	 .word uxDeletedTasksWaitingCleanUp
 5489              	 .cfi_endproc
 5490              	.LFE181:
 5492              	 .section .text.vTaskGetInfo,"ax",%progbits
 5493              	 .align 2
 5494              	 .global vTaskGetInfo
 5495              	 .thumb
 5496              	 .thumb_func
 5498              	vTaskGetInfo:
 5499              	.LFB182:
3605:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3606:../Dave/Generated/FREERTOS/tasks.c **** 
3607:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3608:../Dave/Generated/FREERTOS/tasks.c **** 
3609:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3610:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5500              	 .loc 1 3610 0
 5501              	 .cfi_startproc
 5502              	 
 5503              	 
 5504 0000 80B5     	 push {r7,lr}
 5505              	.LCFI231:
 5506              	 .cfi_def_cfa_offset 8
 5507              	 .cfi_offset 7,-8
 5508              	 .cfi_offset 14,-4
 5509 0002 86B0     	 sub sp,sp,#24
 5510              	.LCFI232:
 5511              	 .cfi_def_cfa_offset 32
 5512 0004 00AF     	 add r7,sp,#0
 5513              	.LCFI233:
 5514              	 .cfi_def_cfa_register 7
 5515 0006 F860     	 str r0,[r7,#12]
 5516 0008 B960     	 str r1,[r7,#8]
 5517 000a 7A60     	 str r2,[r7,#4]
 5518 000c FB70     	 strb r3,[r7,#3]
3611:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3612:../Dave/Generated/FREERTOS/tasks.c **** 
3613:../Dave/Generated/FREERTOS/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3614:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5519              	 .loc 1 3614 0
 5520 000e FB68     	 ldr r3,[r7,#12]
 5521 0010 002B     	 cmp r3,#0
 5522 0012 02D1     	 bne .L365
 5523              	 .loc 1 3614 0 is_stmt 0 discriminator 1
 5524 0014 2B4B     	 ldr r3,.L374
 5525 0016 1B68     	 ldr r3,[r3]
 5526 0018 00E0     	 b .L366
 5527              	.L365:
 5528              	 .loc 1 3614 0 discriminator 2
 5529 001a FB68     	 ldr r3,[r7,#12]
 5530              	.L366:
 5531              	 .loc 1 3614 0 discriminator 4
 5532 001c 7B61     	 str r3,[r7,#20]
3615:../Dave/Generated/FREERTOS/tasks.c **** 
3616:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 5533              	 .loc 1 3616 0 is_stmt 1 discriminator 4
 5534 001e BB68     	 ldr r3,[r7,#8]
 5535 0020 7A69     	 ldr r2,[r7,#20]
 5536 0022 1A60     	 str r2,[r3]
3617:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5537              	 .loc 1 3617 0 discriminator 4
 5538 0024 7B69     	 ldr r3,[r7,#20]
 5539 0026 03F13402 	 add r2,r3,#52
 5540 002a BB68     	 ldr r3,[r7,#8]
 5541 002c 5A60     	 str r2,[r3,#4]
3618:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5542              	 .loc 1 3618 0 discriminator 4
 5543 002e 7B69     	 ldr r3,[r7,#20]
 5544 0030 DA6A     	 ldr r2,[r3,#44]
 5545 0032 BB68     	 ldr r3,[r7,#8]
 5546 0034 1A61     	 str r2,[r3,#16]
3619:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5547              	 .loc 1 3619 0 discriminator 4
 5548 0036 7B69     	 ldr r3,[r7,#20]
 5549 0038 1A6B     	 ldr r2,[r3,#48]
 5550 003a BB68     	 ldr r3,[r7,#8]
 5551 003c DA61     	 str r2,[r3,#28]
3620:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5552              	 .loc 1 3620 0 discriminator 4
 5553 003e 7B69     	 ldr r3,[r7,#20]
 5554 0040 5A6C     	 ldr r2,[r3,#68]
 5555 0042 BB68     	 ldr r3,[r7,#8]
 5556 0044 9A60     	 str r2,[r3,#8]
3621:../Dave/Generated/FREERTOS/tasks.c **** 
3622:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3623:../Dave/Generated/FREERTOS/tasks.c **** 		{
3624:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5557              	 .loc 1 3624 0 discriminator 4
 5558 0046 7B69     	 ldr r3,[r7,#20]
 5559 0048 DA6C     	 ldr r2,[r3,#76]
 5560 004a BB68     	 ldr r3,[r7,#8]
 5561 004c 5A61     	 str r2,[r3,#20]
3625:../Dave/Generated/FREERTOS/tasks.c **** 		}
3626:../Dave/Generated/FREERTOS/tasks.c **** 		#else
3627:../Dave/Generated/FREERTOS/tasks.c **** 		{
3628:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3629:../Dave/Generated/FREERTOS/tasks.c **** 		}
3630:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3631:../Dave/Generated/FREERTOS/tasks.c **** 
3632:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3633:../Dave/Generated/FREERTOS/tasks.c **** 		{
3634:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3635:../Dave/Generated/FREERTOS/tasks.c **** 		}
3636:../Dave/Generated/FREERTOS/tasks.c **** 		#else
3637:../Dave/Generated/FREERTOS/tasks.c **** 		{
3638:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 5562              	 .loc 1 3638 0 discriminator 4
 5563 004e BB68     	 ldr r3,[r7,#8]
 5564 0050 0022     	 movs r2,#0
 5565 0052 9A61     	 str r2,[r3,#24]
3639:../Dave/Generated/FREERTOS/tasks.c **** 		}
3640:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3641:../Dave/Generated/FREERTOS/tasks.c **** 
3642:../Dave/Generated/FREERTOS/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3643:../Dave/Generated/FREERTOS/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3644:../Dave/Generated/FREERTOS/tasks.c **** 		state is just set to whatever is passed in. */
3645:../Dave/Generated/FREERTOS/tasks.c **** 		if( eState != eInvalid )
 5566              	 .loc 1 3645 0 discriminator 4
 5567 0054 FB78     	 ldrb r3,[r7,#3]
 5568 0056 052B     	 cmp r3,#5
 5569 0058 1AD0     	 beq .L367
3646:../Dave/Generated/FREERTOS/tasks.c **** 		{
3647:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 5570              	 .loc 1 3647 0
 5571 005a 1A4B     	 ldr r3,.L374
 5572 005c 1B68     	 ldr r3,[r3]
 5573 005e 7A69     	 ldr r2,[r7,#20]
 5574 0060 9A42     	 cmp r2,r3
 5575 0062 03D1     	 bne .L368
3648:../Dave/Generated/FREERTOS/tasks.c **** 			{
3649:../Dave/Generated/FREERTOS/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
 5576              	 .loc 1 3649 0
 5577 0064 BB68     	 ldr r3,[r7,#8]
 5578 0066 0022     	 movs r2,#0
 5579 0068 1A73     	 strb r2,[r3,#12]
 5580 006a 18E0     	 b .L371
 5581              	.L368:
3650:../Dave/Generated/FREERTOS/tasks.c **** 			}
3651:../Dave/Generated/FREERTOS/tasks.c **** 			else
3652:../Dave/Generated/FREERTOS/tasks.c **** 			{
3653:../Dave/Generated/FREERTOS/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
 5582              	 .loc 1 3653 0
 5583 006c BB68     	 ldr r3,[r7,#8]
 5584 006e FA78     	 ldrb r2,[r7,#3]
 5585 0070 1A73     	 strb r2,[r3,#12]
3654:../Dave/Generated/FREERTOS/tasks.c **** 
3655:../Dave/Generated/FREERTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3656:../Dave/Generated/FREERTOS/tasks.c **** 				{
3657:../Dave/Generated/FREERTOS/tasks.c **** 					/* If the task is in the suspended list then there is a
3658:../Dave/Generated/FREERTOS/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3659:../Dave/Generated/FREERTOS/tasks.c **** 					it should be reported as being in the Blocked state. */
3660:../Dave/Generated/FREERTOS/tasks.c **** 					if( eState == eSuspended )
 5586              	 .loc 1 3660 0
 5587 0072 FB78     	 ldrb r3,[r7,#3]
 5588 0074 032B     	 cmp r3,#3
 5589 0076 12D1     	 bne .L371
3661:../Dave/Generated/FREERTOS/tasks.c **** 					{
3662:../Dave/Generated/FREERTOS/tasks.c **** 						vTaskSuspendAll();
 5590              	 .loc 1 3662 0
 5591 0078 FFF7FEFF 	 bl vTaskSuspendAll
3663:../Dave/Generated/FREERTOS/tasks.c **** 						{
3664:../Dave/Generated/FREERTOS/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5592              	 .loc 1 3664 0
 5593 007c 7B69     	 ldr r3,[r7,#20]
 5594 007e 9B6A     	 ldr r3,[r3,#40]
 5595 0080 002B     	 cmp r3,#0
 5596 0082 02D0     	 beq .L370
3665:../Dave/Generated/FREERTOS/tasks.c **** 							{
3666:../Dave/Generated/FREERTOS/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
 5597              	 .loc 1 3666 0
 5598 0084 BB68     	 ldr r3,[r7,#8]
 5599 0086 0222     	 movs r2,#2
 5600 0088 1A73     	 strb r2,[r3,#12]
 5601              	.L370:
3667:../Dave/Generated/FREERTOS/tasks.c **** 							}
3668:../Dave/Generated/FREERTOS/tasks.c **** 						}
3669:../Dave/Generated/FREERTOS/tasks.c **** 						( void ) xTaskResumeAll();
 5602              	 .loc 1 3669 0
 5603 008a FFF7FEFF 	 bl xTaskResumeAll
 5604 008e 06E0     	 b .L371
 5605              	.L367:
3670:../Dave/Generated/FREERTOS/tasks.c **** 					}
3671:../Dave/Generated/FREERTOS/tasks.c **** 				}
3672:../Dave/Generated/FREERTOS/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3673:../Dave/Generated/FREERTOS/tasks.c **** 			}
3674:../Dave/Generated/FREERTOS/tasks.c **** 		}
3675:../Dave/Generated/FREERTOS/tasks.c **** 		else
3676:../Dave/Generated/FREERTOS/tasks.c **** 		{
3677:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5606              	 .loc 1 3677 0
 5607 0090 7869     	 ldr r0,[r7,#20]
 5608 0092 FFF7FEFF 	 bl eTaskGetState
 5609 0096 0346     	 mov r3,r0
 5610 0098 1A46     	 mov r2,r3
 5611 009a BB68     	 ldr r3,[r7,#8]
 5612 009c 1A73     	 strb r2,[r3,#12]
 5613              	.L371:
3678:../Dave/Generated/FREERTOS/tasks.c **** 		}
3679:../Dave/Generated/FREERTOS/tasks.c **** 
3680:../Dave/Generated/FREERTOS/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3681:../Dave/Generated/FREERTOS/tasks.c **** 		parameter is provided to allow it to be skipped. */
3682:../Dave/Generated/FREERTOS/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 5614              	 .loc 1 3682 0
 5615 009e 7B68     	 ldr r3,[r7,#4]
 5616 00a0 002B     	 cmp r3,#0
 5617 00a2 09D0     	 beq .L372
3683:../Dave/Generated/FREERTOS/tasks.c **** 		{
3684:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3685:../Dave/Generated/FREERTOS/tasks.c **** 			{
3686:../Dave/Generated/FREERTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3687:../Dave/Generated/FREERTOS/tasks.c **** 			}
3688:../Dave/Generated/FREERTOS/tasks.c **** 			#else
3689:../Dave/Generated/FREERTOS/tasks.c **** 			{
3690:../Dave/Generated/FREERTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 5618              	 .loc 1 3690 0
 5619 00a4 7B69     	 ldr r3,[r7,#20]
 5620 00a6 1B6B     	 ldr r3,[r3,#48]
 5621 00a8 1846     	 mov r0,r3
 5622 00aa FFF7FEFF 	 bl prvTaskCheckFreeStackSpace
 5623 00ae 0346     	 mov r3,r0
 5624 00b0 1A46     	 mov r2,r3
 5625 00b2 BB68     	 ldr r3,[r7,#8]
 5626 00b4 1A84     	 strh r2,[r3,#32]
 5627 00b6 02E0     	 b .L364
 5628              	.L372:
3691:../Dave/Generated/FREERTOS/tasks.c **** 			}
3692:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
3693:../Dave/Generated/FREERTOS/tasks.c **** 		}
3694:../Dave/Generated/FREERTOS/tasks.c **** 		else
3695:../Dave/Generated/FREERTOS/tasks.c **** 		{
3696:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
 5629              	 .loc 1 3696 0
 5630 00b8 BB68     	 ldr r3,[r7,#8]
 5631 00ba 0022     	 movs r2,#0
 5632 00bc 1A84     	 strh r2,[r3,#32]
 5633              	.L364:
3697:../Dave/Generated/FREERTOS/tasks.c **** 		}
3698:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5634              	 .loc 1 3698 0
 5635 00be 1837     	 adds r7,r7,#24
 5636              	.LCFI234:
 5637              	 .cfi_def_cfa_offset 8
 5638 00c0 BD46     	 mov sp,r7
 5639              	.LCFI235:
 5640              	 .cfi_def_cfa_register 13
 5641              	 
 5642 00c2 80BD     	 pop {r7,pc}
 5643              	.L375:
 5644              	 .align 2
 5645              	.L374:
 5646 00c4 00000000 	 .word pxCurrentTCB
 5647              	 .cfi_endproc
 5648              	.LFE182:
 5650              	 .section .text.prvListTasksWithinSingleList,"ax",%progbits
 5651              	 .align 2
 5652              	 .thumb
 5653              	 .thumb_func
 5655              	prvListTasksWithinSingleList:
 5656              	.LFB183:
3699:../Dave/Generated/FREERTOS/tasks.c **** 
3700:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3701:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3702:../Dave/Generated/FREERTOS/tasks.c **** 
3703:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3704:../Dave/Generated/FREERTOS/tasks.c **** 
3705:../Dave/Generated/FREERTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3706:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5657              	 .loc 1 3706 0
 5658              	 .cfi_startproc
 5659              	 
 5660              	 
 5661 0000 80B5     	 push {r7,lr}
 5662              	.LCFI236:
 5663              	 .cfi_def_cfa_offset 8
 5664              	 .cfi_offset 7,-8
 5665              	 .cfi_offset 14,-4
 5666 0002 8AB0     	 sub sp,sp,#40
 5667              	.LCFI237:
 5668              	 .cfi_def_cfa_offset 48
 5669 0004 00AF     	 add r7,sp,#0
 5670              	.LCFI238:
 5671              	 .cfi_def_cfa_register 7
 5672 0006 F860     	 str r0,[r7,#12]
 5673 0008 B960     	 str r1,[r7,#8]
 5674 000a 1346     	 mov r3,r2
 5675 000c FB71     	 strb r3,[r7,#7]
3707:../Dave/Generated/FREERTOS/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3708:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTask = 0;
 5676              	 .loc 1 3708 0
 5677 000e 0023     	 movs r3,#0
 5678 0010 7B62     	 str r3,[r7,#36]
3709:../Dave/Generated/FREERTOS/tasks.c **** 
3710:../Dave/Generated/FREERTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5679              	 .loc 1 3710 0
 5680 0012 BB68     	 ldr r3,[r7,#8]
 5681 0014 1B68     	 ldr r3,[r3]
 5682 0016 002B     	 cmp r3,#0
 5683 0018 40D0     	 beq .L377
 5684              	.LBB200:
3711:../Dave/Generated/FREERTOS/tasks.c **** 		{
3712:../Dave/Generated/FREERTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5685              	 .loc 1 3712 0
 5686 001a BB68     	 ldr r3,[r7,#8]
 5687 001c 3B62     	 str r3,[r7,#32]
 5688 001e 3B6A     	 ldr r3,[r7,#32]
 5689 0020 5B68     	 ldr r3,[r3,#4]
 5690 0022 5A68     	 ldr r2,[r3,#4]
 5691 0024 3B6A     	 ldr r3,[r7,#32]
 5692 0026 5A60     	 str r2,[r3,#4]
 5693 0028 3B6A     	 ldr r3,[r7,#32]
 5694 002a 5A68     	 ldr r2,[r3,#4]
 5695 002c 3B6A     	 ldr r3,[r7,#32]
 5696 002e 0833     	 adds r3,r3,#8
 5697 0030 9A42     	 cmp r2,r3
 5698 0032 04D1     	 bne .L378
 5699              	 .loc 1 3712 0 is_stmt 0 discriminator 1
 5700 0034 3B6A     	 ldr r3,[r7,#32]
 5701 0036 5B68     	 ldr r3,[r3,#4]
 5702 0038 5A68     	 ldr r2,[r3,#4]
 5703 003a 3B6A     	 ldr r3,[r7,#32]
 5704 003c 5A60     	 str r2,[r3,#4]
 5705              	.L378:
 5706              	 .loc 1 3712 0 discriminator 3
 5707 003e 3B6A     	 ldr r3,[r7,#32]
 5708 0040 5B68     	 ldr r3,[r3,#4]
 5709 0042 DB68     	 ldr r3,[r3,#12]
 5710 0044 FB61     	 str r3,[r7,#28]
 5711              	.L380:
 5712              	.LBE200:
 5713              	.LBB201:
3713:../Dave/Generated/FREERTOS/tasks.c **** 
3714:../Dave/Generated/FREERTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3715:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3716:../Dave/Generated/FREERTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3717:../Dave/Generated/FREERTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3718:../Dave/Generated/FREERTOS/tasks.c **** 			do
3719:../Dave/Generated/FREERTOS/tasks.c **** 			{
3720:../Dave/Generated/FREERTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5714              	 .loc 1 3720 0 is_stmt 1
 5715 0046 BB68     	 ldr r3,[r7,#8]
 5716 0048 BB61     	 str r3,[r7,#24]
 5717 004a BB69     	 ldr r3,[r7,#24]
 5718 004c 5B68     	 ldr r3,[r3,#4]
 5719 004e 5A68     	 ldr r2,[r3,#4]
 5720 0050 BB69     	 ldr r3,[r7,#24]
 5721 0052 5A60     	 str r2,[r3,#4]
 5722 0054 BB69     	 ldr r3,[r7,#24]
 5723 0056 5A68     	 ldr r2,[r3,#4]
 5724 0058 BB69     	 ldr r3,[r7,#24]
 5725 005a 0833     	 adds r3,r3,#8
 5726 005c 9A42     	 cmp r2,r3
 5727 005e 04D1     	 bne .L379
 5728              	 .loc 1 3720 0 is_stmt 0 discriminator 1
 5729 0060 BB69     	 ldr r3,[r7,#24]
 5730 0062 5B68     	 ldr r3,[r3,#4]
 5731 0064 5A68     	 ldr r2,[r3,#4]
 5732 0066 BB69     	 ldr r3,[r7,#24]
 5733 0068 5A60     	 str r2,[r3,#4]
 5734              	.L379:
 5735              	 .loc 1 3720 0 discriminator 3
 5736 006a BB69     	 ldr r3,[r7,#24]
 5737 006c 5B68     	 ldr r3,[r3,#4]
 5738 006e DB68     	 ldr r3,[r3,#12]
 5739 0070 7B61     	 str r3,[r7,#20]
 5740              	.LBE201:
3721:../Dave/Generated/FREERTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5741              	 .loc 1 3721 0 is_stmt 1 discriminator 3
 5742 0072 7A6A     	 ldr r2,[r7,#36]
 5743 0074 1346     	 mov r3,r2
 5744 0076 DB00     	 lsls r3,r3,#3
 5745 0078 1344     	 add r3,r3,r2
 5746 007a 9B00     	 lsls r3,r3,#2
 5747 007c 1A46     	 mov r2,r3
 5748 007e FB68     	 ldr r3,[r7,#12]
 5749 0080 1A44     	 add r2,r2,r3
 5750 0082 FB79     	 ldrb r3,[r7,#7]
 5751 0084 7869     	 ldr r0,[r7,#20]
 5752 0086 1146     	 mov r1,r2
 5753 0088 0122     	 movs r2,#1
 5754 008a FFF7FEFF 	 bl vTaskGetInfo
3722:../Dave/Generated/FREERTOS/tasks.c **** 				uxTask++;
 5755              	 .loc 1 3722 0 discriminator 3
 5756 008e 7B6A     	 ldr r3,[r7,#36]
 5757 0090 0133     	 adds r3,r3,#1
 5758 0092 7B62     	 str r3,[r7,#36]
3723:../Dave/Generated/FREERTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5759              	 .loc 1 3723 0 discriminator 3
 5760 0094 7A69     	 ldr r2,[r7,#20]
 5761 0096 FB69     	 ldr r3,[r7,#28]
 5762 0098 9A42     	 cmp r2,r3
 5763 009a D4D1     	 bne .L380
 5764              	.L377:
3724:../Dave/Generated/FREERTOS/tasks.c **** 		}
3725:../Dave/Generated/FREERTOS/tasks.c **** 		else
3726:../Dave/Generated/FREERTOS/tasks.c **** 		{
3727:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3728:../Dave/Generated/FREERTOS/tasks.c **** 		}
3729:../Dave/Generated/FREERTOS/tasks.c **** 
3730:../Dave/Generated/FREERTOS/tasks.c **** 		return uxTask;
 5765              	 .loc 1 3730 0
 5766 009c 7B6A     	 ldr r3,[r7,#36]
3731:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5767              	 .loc 1 3731 0
 5768 009e 1846     	 mov r0,r3
 5769 00a0 2837     	 adds r7,r7,#40
 5770              	.LCFI239:
 5771              	 .cfi_def_cfa_offset 8
 5772 00a2 BD46     	 mov sp,r7
 5773              	.LCFI240:
 5774              	 .cfi_def_cfa_register 13
 5775              	 
 5776 00a4 80BD     	 pop {r7,pc}
 5777              	 .cfi_endproc
 5778              	.LFE183:
 5780 00a6 00BF     	 .section .text.prvTaskCheckFreeStackSpace,"ax",%progbits
 5781              	 .align 2
 5782              	 .thumb
 5783              	 .thumb_func
 5785              	prvTaskCheckFreeStackSpace:
 5786              	.LFB184:
3732:../Dave/Generated/FREERTOS/tasks.c **** 
3733:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3734:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3735:../Dave/Generated/FREERTOS/tasks.c **** 
3736:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3737:../Dave/Generated/FREERTOS/tasks.c **** 
3738:../Dave/Generated/FREERTOS/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3739:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5787              	 .loc 1 3739 0
 5788              	 .cfi_startproc
 5789              	 
 5790              	 
 5791              	 
 5792 0000 80B4     	 push {r7}
 5793              	.LCFI241:
 5794              	 .cfi_def_cfa_offset 4
 5795              	 .cfi_offset 7,-4
 5796 0002 85B0     	 sub sp,sp,#20
 5797              	.LCFI242:
 5798              	 .cfi_def_cfa_offset 24
 5799 0004 00AF     	 add r7,sp,#0
 5800              	.LCFI243:
 5801              	 .cfi_def_cfa_register 7
 5802 0006 7860     	 str r0,[r7,#4]
3740:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulCount = 0U;
 5803              	 .loc 1 3740 0
 5804 0008 0023     	 movs r3,#0
 5805 000a FB60     	 str r3,[r7,#12]
3741:../Dave/Generated/FREERTOS/tasks.c **** 
3742:../Dave/Generated/FREERTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 5806              	 .loc 1 3742 0
 5807 000c 05E0     	 b .L383
 5808              	.L384:
3743:../Dave/Generated/FREERTOS/tasks.c **** 		{
3744:../Dave/Generated/FREERTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 5809              	 .loc 1 3744 0
 5810 000e 7B68     	 ldr r3,[r7,#4]
 5811 0010 0133     	 adds r3,r3,#1
 5812 0012 7B60     	 str r3,[r7,#4]
3745:../Dave/Generated/FREERTOS/tasks.c **** 			ulCount++;
 5813              	 .loc 1 3745 0
 5814 0014 FB68     	 ldr r3,[r7,#12]
 5815 0016 0133     	 adds r3,r3,#1
 5816 0018 FB60     	 str r3,[r7,#12]
 5817              	.L383:
3742:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5818              	 .loc 1 3742 0
 5819 001a 7B68     	 ldr r3,[r7,#4]
 5820 001c 1B78     	 ldrb r3,[r3]
 5821 001e A52B     	 cmp r3,#165
 5822 0020 F5D0     	 beq .L384
3746:../Dave/Generated/FREERTOS/tasks.c **** 		}
3747:../Dave/Generated/FREERTOS/tasks.c **** 
3748:../Dave/Generated/FREERTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 5823              	 .loc 1 3748 0
 5824 0022 FB68     	 ldr r3,[r7,#12]
 5825 0024 9B08     	 lsrs r3,r3,#2
 5826 0026 FB60     	 str r3,[r7,#12]
3749:../Dave/Generated/FREERTOS/tasks.c **** 
3750:../Dave/Generated/FREERTOS/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 5827              	 .loc 1 3750 0
 5828 0028 FB68     	 ldr r3,[r7,#12]
 5829 002a 9BB2     	 uxth r3,r3
3751:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5830              	 .loc 1 3751 0
 5831 002c 1846     	 mov r0,r3
 5832 002e 1437     	 adds r7,r7,#20
 5833              	.LCFI244:
 5834              	 .cfi_def_cfa_offset 4
 5835 0030 BD46     	 mov sp,r7
 5836              	.LCFI245:
 5837              	 .cfi_def_cfa_register 13
 5838              	 
 5839 0032 5DF8047B 	 ldr r7,[sp],#4
 5840              	.LCFI246:
 5841              	 .cfi_restore 7
 5842              	 .cfi_def_cfa_offset 0
 5843 0036 7047     	 bx lr
 5844              	 .cfi_endproc
 5845              	.LFE184:
 5847              	 .section .text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5848              	 .align 2
 5849              	 .global uxTaskGetStackHighWaterMark
 5850              	 .thumb
 5851              	 .thumb_func
 5853              	uxTaskGetStackHighWaterMark:
 5854              	.LFB185:
3752:../Dave/Generated/FREERTOS/tasks.c **** 
3753:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3754:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3755:../Dave/Generated/FREERTOS/tasks.c **** 
3756:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3757:../Dave/Generated/FREERTOS/tasks.c **** 
3758:../Dave/Generated/FREERTOS/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3759:../Dave/Generated/FREERTOS/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3760:../Dave/Generated/FREERTOS/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3761:../Dave/Generated/FREERTOS/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3762:../Dave/Generated/FREERTOS/tasks.c **** 	applications that expect an 8-bit return type. */
3763:../Dave/Generated/FREERTOS/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3764:../Dave/Generated/FREERTOS/tasks.c **** 	{
3765:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3766:../Dave/Generated/FREERTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3767:../Dave/Generated/FREERTOS/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3768:../Dave/Generated/FREERTOS/tasks.c **** 
3769:../Dave/Generated/FREERTOS/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3770:../Dave/Generated/FREERTOS/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3771:../Dave/Generated/FREERTOS/tasks.c **** 		allows the user to determine the return type.  It gets around the
3772:../Dave/Generated/FREERTOS/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3773:../Dave/Generated/FREERTOS/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3774:../Dave/Generated/FREERTOS/tasks.c **** 		type. */
3775:../Dave/Generated/FREERTOS/tasks.c **** 
3776:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3777:../Dave/Generated/FREERTOS/tasks.c **** 
3778:../Dave/Generated/FREERTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3779:../Dave/Generated/FREERTOS/tasks.c **** 		{
3780:../Dave/Generated/FREERTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3781:../Dave/Generated/FREERTOS/tasks.c **** 		}
3782:../Dave/Generated/FREERTOS/tasks.c **** 		#else
3783:../Dave/Generated/FREERTOS/tasks.c **** 		{
3784:../Dave/Generated/FREERTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3785:../Dave/Generated/FREERTOS/tasks.c **** 		}
3786:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3787:../Dave/Generated/FREERTOS/tasks.c **** 
3788:../Dave/Generated/FREERTOS/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3789:../Dave/Generated/FREERTOS/tasks.c **** 
3790:../Dave/Generated/FREERTOS/tasks.c **** 		return uxReturn;
3791:../Dave/Generated/FREERTOS/tasks.c **** 	}
3792:../Dave/Generated/FREERTOS/tasks.c **** 
3793:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3794:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3795:../Dave/Generated/FREERTOS/tasks.c **** 
3796:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3797:../Dave/Generated/FREERTOS/tasks.c **** 
3798:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3799:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5855              	 .loc 1 3799 0
 5856              	 .cfi_startproc
 5857              	 
 5858              	 
 5859 0000 80B5     	 push {r7,lr}
 5860              	.LCFI247:
 5861              	 .cfi_def_cfa_offset 8
 5862              	 .cfi_offset 7,-8
 5863              	 .cfi_offset 14,-4
 5864 0002 86B0     	 sub sp,sp,#24
 5865              	.LCFI248:
 5866              	 .cfi_def_cfa_offset 32
 5867 0004 00AF     	 add r7,sp,#0
 5868              	.LCFI249:
 5869              	 .cfi_def_cfa_register 7
 5870 0006 7860     	 str r0,[r7,#4]
3800:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3801:../Dave/Generated/FREERTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3802:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxReturn;
3803:../Dave/Generated/FREERTOS/tasks.c **** 
3804:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5871              	 .loc 1 3804 0
 5872 0008 7B68     	 ldr r3,[r7,#4]
 5873 000a 002B     	 cmp r3,#0
 5874 000c 02D1     	 bne .L387
 5875              	 .loc 1 3804 0 is_stmt 0 discriminator 1
 5876 000e 094B     	 ldr r3,.L390
 5877 0010 1B68     	 ldr r3,[r3]
 5878 0012 00E0     	 b .L388
 5879              	.L387:
 5880              	 .loc 1 3804 0 discriminator 2
 5881 0014 7B68     	 ldr r3,[r7,#4]
 5882              	.L388:
 5883              	 .loc 1 3804 0 discriminator 4
 5884 0016 7B61     	 str r3,[r7,#20]
3805:../Dave/Generated/FREERTOS/tasks.c **** 
3806:../Dave/Generated/FREERTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3807:../Dave/Generated/FREERTOS/tasks.c **** 		{
3808:../Dave/Generated/FREERTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 5885              	 .loc 1 3808 0 is_stmt 1 discriminator 4
 5886 0018 7B69     	 ldr r3,[r7,#20]
 5887 001a 1B6B     	 ldr r3,[r3,#48]
 5888 001c 3B61     	 str r3,[r7,#16]
3809:../Dave/Generated/FREERTOS/tasks.c **** 		}
3810:../Dave/Generated/FREERTOS/tasks.c **** 		#else
3811:../Dave/Generated/FREERTOS/tasks.c **** 		{
3812:../Dave/Generated/FREERTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3813:../Dave/Generated/FREERTOS/tasks.c **** 		}
3814:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3815:../Dave/Generated/FREERTOS/tasks.c **** 
3816:../Dave/Generated/FREERTOS/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 5889              	 .loc 1 3816 0 discriminator 4
 5890 001e 3869     	 ldr r0,[r7,#16]
 5891 0020 FFF7FEFF 	 bl prvTaskCheckFreeStackSpace
 5892 0024 0346     	 mov r3,r0
 5893 0026 FB60     	 str r3,[r7,#12]
3817:../Dave/Generated/FREERTOS/tasks.c **** 
3818:../Dave/Generated/FREERTOS/tasks.c **** 		return uxReturn;
 5894              	 .loc 1 3818 0 discriminator 4
 5895 0028 FB68     	 ldr r3,[r7,#12]
3819:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5896              	 .loc 1 3819 0 discriminator 4
 5897 002a 1846     	 mov r0,r3
 5898 002c 1837     	 adds r7,r7,#24
 5899              	.LCFI250:
 5900              	 .cfi_def_cfa_offset 8
 5901 002e BD46     	 mov sp,r7
 5902              	.LCFI251:
 5903              	 .cfi_def_cfa_register 13
 5904              	 
 5905 0030 80BD     	 pop {r7,pc}
 5906              	.L391:
 5907 0032 00BF     	 .align 2
 5908              	.L390:
 5909 0034 00000000 	 .word pxCurrentTCB
 5910              	 .cfi_endproc
 5911              	.LFE185:
 5913              	 .section .text.prvDeleteTCB,"ax",%progbits
 5914              	 .align 2
 5915              	 .thumb
 5916              	 .thumb_func
 5918              	prvDeleteTCB:
 5919              	.LFB186:
3820:../Dave/Generated/FREERTOS/tasks.c **** 
3821:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3822:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3823:../Dave/Generated/FREERTOS/tasks.c **** 
3824:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3825:../Dave/Generated/FREERTOS/tasks.c **** 
3826:../Dave/Generated/FREERTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3827:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5920              	 .loc 1 3827 0
 5921              	 .cfi_startproc
 5922              	 
 5923              	 
 5924 0000 80B5     	 push {r7,lr}
 5925              	.LCFI252:
 5926              	 .cfi_def_cfa_offset 8
 5927              	 .cfi_offset 7,-8
 5928              	 .cfi_offset 14,-4
 5929 0002 82B0     	 sub sp,sp,#8
 5930              	.LCFI253:
 5931              	 .cfi_def_cfa_offset 16
 5932 0004 00AF     	 add r7,sp,#0
 5933              	.LCFI254:
 5934              	 .cfi_def_cfa_register 7
 5935 0006 7860     	 str r0,[r7,#4]
3828:../Dave/Generated/FREERTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3829:../Dave/Generated/FREERTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3830:../Dave/Generated/FREERTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3831:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3832:../Dave/Generated/FREERTOS/tasks.c **** 
3833:../Dave/Generated/FREERTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3834:../Dave/Generated/FREERTOS/tasks.c **** 		to the task to free any memory allocated at the application level. */
3835:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3836:../Dave/Generated/FREERTOS/tasks.c **** 		{
3837:../Dave/Generated/FREERTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3838:../Dave/Generated/FREERTOS/tasks.c **** 		}
3839:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3840:../Dave/Generated/FREERTOS/tasks.c **** 
3841:../Dave/Generated/FREERTOS/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3842:../Dave/Generated/FREERTOS/tasks.c **** 		{
3843:../Dave/Generated/FREERTOS/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3844:../Dave/Generated/FREERTOS/tasks.c **** 			the stack and TCB. */
3845:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTCB->pxStack );
 5936              	 .loc 1 3845 0
 5937 0008 7B68     	 ldr r3,[r7,#4]
 5938 000a 1B6B     	 ldr r3,[r3,#48]
 5939 000c 1846     	 mov r0,r3
 5940 000e FFF7FEFF 	 bl vPortFree
3846:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTCB );
 5941              	 .loc 1 3846 0
 5942 0012 7868     	 ldr r0,[r7,#4]
 5943 0014 FFF7FEFF 	 bl vPortFree
3847:../Dave/Generated/FREERTOS/tasks.c **** 		}
3848:../Dave/Generated/FREERTOS/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3849:../Dave/Generated/FREERTOS/tasks.c **** 		{
3850:../Dave/Generated/FREERTOS/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3851:../Dave/Generated/FREERTOS/tasks.c **** 			check what was statically allocated before trying to free the
3852:../Dave/Generated/FREERTOS/tasks.c **** 			memory. */
3853:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3854:../Dave/Generated/FREERTOS/tasks.c **** 			{
3855:../Dave/Generated/FREERTOS/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3856:../Dave/Generated/FREERTOS/tasks.c **** 				must be freed. */
3857:../Dave/Generated/FREERTOS/tasks.c **** 				vPortFree( pxTCB->pxStack );
3858:../Dave/Generated/FREERTOS/tasks.c **** 				vPortFree( pxTCB );
3859:../Dave/Generated/FREERTOS/tasks.c **** 			}
3860:../Dave/Generated/FREERTOS/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3861:../Dave/Generated/FREERTOS/tasks.c **** 			{
3862:../Dave/Generated/FREERTOS/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3863:../Dave/Generated/FREERTOS/tasks.c **** 				only memory that must be freed. */
3864:../Dave/Generated/FREERTOS/tasks.c **** 				vPortFree( pxTCB );
3865:../Dave/Generated/FREERTOS/tasks.c **** 			}
3866:../Dave/Generated/FREERTOS/tasks.c **** 			else
3867:../Dave/Generated/FREERTOS/tasks.c **** 			{
3868:../Dave/Generated/FREERTOS/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3869:../Dave/Generated/FREERTOS/tasks.c **** 				nothing needs to be freed. */
3870:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3871:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3872:../Dave/Generated/FREERTOS/tasks.c **** 			}
3873:../Dave/Generated/FREERTOS/tasks.c **** 		}
3874:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3875:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5944              	 .loc 1 3875 0
 5945 0018 0837     	 adds r7,r7,#8
 5946              	.LCFI255:
 5947              	 .cfi_def_cfa_offset 8
 5948 001a BD46     	 mov sp,r7
 5949              	.LCFI256:
 5950              	 .cfi_def_cfa_register 13
 5951              	 
 5952 001c 80BD     	 pop {r7,pc}
 5953              	 .cfi_endproc
 5954              	.LFE186:
 5956 001e 00BF     	 .section .text.prvResetNextTaskUnblockTime,"ax",%progbits
 5957              	 .align 2
 5958              	 .thumb
 5959              	 .thumb_func
 5961              	prvResetNextTaskUnblockTime:
 5962              	.LFB187:
3876:../Dave/Generated/FREERTOS/tasks.c **** 
3877:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3878:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3879:../Dave/Generated/FREERTOS/tasks.c **** 
3880:../Dave/Generated/FREERTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3881:../Dave/Generated/FREERTOS/tasks.c **** {
 5963              	 .loc 1 3881 0
 5964              	 .cfi_startproc
 5965              	 
 5966              	 
 5967              	 
 5968 0000 80B4     	 push {r7}
 5969              	.LCFI257:
 5970              	 .cfi_def_cfa_offset 4
 5971              	 .cfi_offset 7,-4
 5972 0002 83B0     	 sub sp,sp,#12
 5973              	.LCFI258:
 5974              	 .cfi_def_cfa_offset 16
 5975 0004 00AF     	 add r7,sp,#0
 5976              	.LCFI259:
 5977              	 .cfi_def_cfa_register 7
3882:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxTCB;
3883:../Dave/Generated/FREERTOS/tasks.c **** 
3884:../Dave/Generated/FREERTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 5978              	 .loc 1 3884 0
 5979 0006 0C4B     	 ldr r3,.L396
 5980 0008 1B68     	 ldr r3,[r3]
 5981 000a 1B68     	 ldr r3,[r3]
 5982 000c 002B     	 cmp r3,#0
 5983 000e 04D1     	 bne .L394
3885:../Dave/Generated/FREERTOS/tasks.c **** 	{
3886:../Dave/Generated/FREERTOS/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3887:../Dave/Generated/FREERTOS/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3888:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3889:../Dave/Generated/FREERTOS/tasks.c **** 		there is an item in the delayed list. */
3890:../Dave/Generated/FREERTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 5984              	 .loc 1 3890 0
 5985 0010 0A4B     	 ldr r3,.L396+4
 5986 0012 4FF0FF32 	 mov r2,#-1
 5987 0016 1A60     	 str r2,[r3]
 5988 0018 08E0     	 b .L393
 5989              	.L394:
3891:../Dave/Generated/FREERTOS/tasks.c **** 	}
3892:../Dave/Generated/FREERTOS/tasks.c **** 	else
3893:../Dave/Generated/FREERTOS/tasks.c **** 	{
3894:../Dave/Generated/FREERTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3895:../Dave/Generated/FREERTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3896:../Dave/Generated/FREERTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3897:../Dave/Generated/FREERTOS/tasks.c **** 		from the Blocked state. */
3898:../Dave/Generated/FREERTOS/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 5990              	 .loc 1 3898 0
 5991 001a 074B     	 ldr r3,.L396
 5992 001c 1B68     	 ldr r3,[r3]
 5993 001e DB68     	 ldr r3,[r3,#12]
 5994 0020 DB68     	 ldr r3,[r3,#12]
 5995 0022 7B60     	 str r3,[r7,#4]
3899:../Dave/Generated/FREERTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5996              	 .loc 1 3899 0
 5997 0024 7B68     	 ldr r3,[r7,#4]
 5998 0026 5B68     	 ldr r3,[r3,#4]
 5999 0028 044A     	 ldr r2,.L396+4
 6000 002a 1360     	 str r3,[r2]
 6001              	.L393:
3900:../Dave/Generated/FREERTOS/tasks.c **** 	}
3901:../Dave/Generated/FREERTOS/tasks.c **** }
 6002              	 .loc 1 3901 0
 6003 002c 0C37     	 adds r7,r7,#12
 6004              	.LCFI260:
 6005              	 .cfi_def_cfa_offset 4
 6006 002e BD46     	 mov sp,r7
 6007              	.LCFI261:
 6008              	 .cfi_def_cfa_register 13
 6009              	 
 6010 0030 5DF8047B 	 ldr r7,[sp],#4
 6011              	.LCFI262:
 6012              	 .cfi_restore 7
 6013              	 .cfi_def_cfa_offset 0
 6014 0034 7047     	 bx lr
 6015              	.L397:
 6016 0036 00BF     	 .align 2
 6017              	.L396:
 6018 0038 00000000 	 .word pxDelayedTaskList
 6019 003c 00000000 	 .word xNextTaskUnblockTime
 6020              	 .cfi_endproc
 6021              	.LFE187:
 6023              	 .section .text.xTaskGetCurrentTaskHandle,"ax",%progbits
 6024              	 .align 2
 6025              	 .global xTaskGetCurrentTaskHandle
 6026              	 .thumb
 6027              	 .thumb_func
 6029              	xTaskGetCurrentTaskHandle:
 6030              	.LFB188:
3902:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3903:../Dave/Generated/FREERTOS/tasks.c **** 
3904:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3905:../Dave/Generated/FREERTOS/tasks.c **** 
3906:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3907:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6031              	 .loc 1 3907 0
 6032              	 .cfi_startproc
 6033              	 
 6034              	 
 6035              	 
 6036 0000 80B4     	 push {r7}
 6037              	.LCFI263:
 6038              	 .cfi_def_cfa_offset 4
 6039              	 .cfi_offset 7,-4
 6040 0002 83B0     	 sub sp,sp,#12
 6041              	.LCFI264:
 6042              	 .cfi_def_cfa_offset 16
 6043 0004 00AF     	 add r7,sp,#0
 6044              	.LCFI265:
 6045              	 .cfi_def_cfa_register 7
3908:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xReturn;
3909:../Dave/Generated/FREERTOS/tasks.c **** 
3910:../Dave/Generated/FREERTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3911:../Dave/Generated/FREERTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3912:../Dave/Generated/FREERTOS/tasks.c **** 		individual execution thread. */
3913:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = pxCurrentTCB;
 6046              	 .loc 1 3913 0
 6047 0006 054B     	 ldr r3,.L400
 6048 0008 1B68     	 ldr r3,[r3]
 6049 000a 7B60     	 str r3,[r7,#4]
3914:../Dave/Generated/FREERTOS/tasks.c **** 
3915:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 6050              	 .loc 1 3915 0
 6051 000c 7B68     	 ldr r3,[r7,#4]
3916:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6052              	 .loc 1 3916 0
 6053 000e 1846     	 mov r0,r3
 6054 0010 0C37     	 adds r7,r7,#12
 6055              	.LCFI266:
 6056              	 .cfi_def_cfa_offset 4
 6057 0012 BD46     	 mov sp,r7
 6058              	.LCFI267:
 6059              	 .cfi_def_cfa_register 13
 6060              	 
 6061 0014 5DF8047B 	 ldr r7,[sp],#4
 6062              	.LCFI268:
 6063              	 .cfi_restore 7
 6064              	 .cfi_def_cfa_offset 0
 6065 0018 7047     	 bx lr
 6066              	.L401:
 6067 001a 00BF     	 .align 2
 6068              	.L400:
 6069 001c 00000000 	 .word pxCurrentTCB
 6070              	 .cfi_endproc
 6071              	.LFE188:
 6073              	 .section .text.xTaskGetSchedulerState,"ax",%progbits
 6074              	 .align 2
 6075              	 .global xTaskGetSchedulerState
 6076              	 .thumb
 6077              	 .thumb_func
 6079              	xTaskGetSchedulerState:
 6080              	.LFB189:
3917:../Dave/Generated/FREERTOS/tasks.c **** 
3918:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3919:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3920:../Dave/Generated/FREERTOS/tasks.c **** 
3921:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3922:../Dave/Generated/FREERTOS/tasks.c **** 
3923:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3924:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6081              	 .loc 1 3924 0
 6082              	 .cfi_startproc
 6083              	 
 6084              	 
 6085              	 
 6086 0000 80B4     	 push {r7}
 6087              	.LCFI269:
 6088              	 .cfi_def_cfa_offset 4
 6089              	 .cfi_offset 7,-4
 6090 0002 83B0     	 sub sp,sp,#12
 6091              	.LCFI270:
 6092              	 .cfi_def_cfa_offset 16
 6093 0004 00AF     	 add r7,sp,#0
 6094              	.LCFI271:
 6095              	 .cfi_def_cfa_register 7
3925:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
3926:../Dave/Generated/FREERTOS/tasks.c **** 
3927:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 6096              	 .loc 1 3927 0
 6097 0006 0B4B     	 ldr r3,.L407
 6098 0008 1B68     	 ldr r3,[r3]
 6099 000a 002B     	 cmp r3,#0
 6100 000c 02D1     	 bne .L403
3928:../Dave/Generated/FREERTOS/tasks.c **** 		{
3929:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 6101              	 .loc 1 3929 0
 6102 000e 0123     	 movs r3,#1
 6103 0010 7B60     	 str r3,[r7,#4]
 6104 0012 08E0     	 b .L404
 6105              	.L403:
3930:../Dave/Generated/FREERTOS/tasks.c **** 		}
3931:../Dave/Generated/FREERTOS/tasks.c **** 		else
3932:../Dave/Generated/FREERTOS/tasks.c **** 		{
3933:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6106              	 .loc 1 3933 0
 6107 0014 084B     	 ldr r3,.L407+4
 6108 0016 1B68     	 ldr r3,[r3]
 6109 0018 002B     	 cmp r3,#0
 6110 001a 02D1     	 bne .L405
3934:../Dave/Generated/FREERTOS/tasks.c **** 			{
3935:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 6111              	 .loc 1 3935 0
 6112 001c 0223     	 movs r3,#2
 6113 001e 7B60     	 str r3,[r7,#4]
 6114 0020 01E0     	 b .L404
 6115              	.L405:
3936:../Dave/Generated/FREERTOS/tasks.c **** 			}
3937:../Dave/Generated/FREERTOS/tasks.c **** 			else
3938:../Dave/Generated/FREERTOS/tasks.c **** 			{
3939:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 6116              	 .loc 1 3939 0
 6117 0022 0023     	 movs r3,#0
 6118 0024 7B60     	 str r3,[r7,#4]
 6119              	.L404:
3940:../Dave/Generated/FREERTOS/tasks.c **** 			}
3941:../Dave/Generated/FREERTOS/tasks.c **** 		}
3942:../Dave/Generated/FREERTOS/tasks.c **** 
3943:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 6120              	 .loc 1 3943 0
 6121 0026 7B68     	 ldr r3,[r7,#4]
3944:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6122              	 .loc 1 3944 0
 6123 0028 1846     	 mov r0,r3
 6124 002a 0C37     	 adds r7,r7,#12
 6125              	.LCFI272:
 6126              	 .cfi_def_cfa_offset 4
 6127 002c BD46     	 mov sp,r7
 6128              	.LCFI273:
 6129              	 .cfi_def_cfa_register 13
 6130              	 
 6131 002e 5DF8047B 	 ldr r7,[sp],#4
 6132              	.LCFI274:
 6133              	 .cfi_restore 7
 6134              	 .cfi_def_cfa_offset 0
 6135 0032 7047     	 bx lr
 6136              	.L408:
 6137              	 .align 2
 6138              	.L407:
 6139 0034 00000000 	 .word xSchedulerRunning
 6140 0038 00000000 	 .word uxSchedulerSuspended
 6141              	 .cfi_endproc
 6142              	.LFE189:
 6144              	 .section .text.xTaskPriorityInherit,"ax",%progbits
 6145              	 .align 2
 6146              	 .global xTaskPriorityInherit
 6147              	 .thumb
 6148              	 .thumb_func
 6150              	xTaskPriorityInherit:
 6151              	.LFB190:
3945:../Dave/Generated/FREERTOS/tasks.c **** 
3946:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3947:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3948:../Dave/Generated/FREERTOS/tasks.c **** 
3949:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3950:../Dave/Generated/FREERTOS/tasks.c **** 
3951:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3952:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6152              	 .loc 1 3952 0
 6153              	 .cfi_startproc
 6154              	 
 6155              	 
 6156 0000 80B5     	 push {r7,lr}
 6157              	.LCFI275:
 6158              	 .cfi_def_cfa_offset 8
 6159              	 .cfi_offset 7,-8
 6160              	 .cfi_offset 14,-4
 6161 0002 84B0     	 sub sp,sp,#16
 6162              	.LCFI276:
 6163              	 .cfi_def_cfa_offset 24
 6164 0004 00AF     	 add r7,sp,#0
 6165              	.LCFI277:
 6166              	 .cfi_def_cfa_register 7
 6167 0006 7860     	 str r0,[r7,#4]
3953:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6168              	 .loc 1 3953 0
 6169 0008 7B68     	 ldr r3,[r7,#4]
 6170 000a BB60     	 str r3,[r7,#8]
3954:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6171              	 .loc 1 3954 0
 6172 000c 0023     	 movs r3,#0
 6173 000e FB60     	 str r3,[r7,#12]
3955:../Dave/Generated/FREERTOS/tasks.c **** 
3956:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3957:../Dave/Generated/FREERTOS/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3958:../Dave/Generated/FREERTOS/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3959:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 6174              	 .loc 1 3959 0
 6175 0010 7B68     	 ldr r3,[r7,#4]
 6176 0012 002B     	 cmp r3,#0
 6177 0014 6BD0     	 beq .L410
3960:../Dave/Generated/FREERTOS/tasks.c **** 		{
3961:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3962:../Dave/Generated/FREERTOS/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3963:../Dave/Generated/FREERTOS/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3964:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 6178              	 .loc 1 3964 0
 6179 0016 BB68     	 ldr r3,[r7,#8]
 6180 0018 DA6A     	 ldr r2,[r3,#44]
 6181 001a 374B     	 ldr r3,.L418
 6182 001c 1B68     	 ldr r3,[r3]
 6183 001e DB6A     	 ldr r3,[r3,#44]
 6184 0020 9A42     	 cmp r2,r3
 6185 0022 5BD2     	 bcs .L411
3965:../Dave/Generated/FREERTOS/tasks.c **** 			{
3966:../Dave/Generated/FREERTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3967:../Dave/Generated/FREERTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
3968:../Dave/Generated/FREERTOS/tasks.c **** 				not being used for anything else. */
3969:../Dave/Generated/FREERTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 6186              	 .loc 1 3969 0
 6187 0024 BB68     	 ldr r3,[r7,#8]
 6188 0026 9B69     	 ldr r3,[r3,#24]
 6189 0028 002B     	 cmp r3,#0
 6190 002a 06DB     	 blt .L412
3970:../Dave/Generated/FREERTOS/tasks.c **** 				{
3971:../Dave/Generated/FREERTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 6191              	 .loc 1 3971 0
 6192 002c 324B     	 ldr r3,.L418
 6193 002e 1B68     	 ldr r3,[r3]
 6194 0030 DB6A     	 ldr r3,[r3,#44]
 6195 0032 C3F10602 	 rsb r2,r3,#6
 6196 0036 BB68     	 ldr r3,[r7,#8]
 6197 0038 9A61     	 str r2,[r3,#24]
 6198              	.L412:
3972:../Dave/Generated/FREERTOS/tasks.c **** 				}
3973:../Dave/Generated/FREERTOS/tasks.c **** 				else
3974:../Dave/Generated/FREERTOS/tasks.c **** 				{
3975:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3976:../Dave/Generated/FREERTOS/tasks.c **** 				}
3977:../Dave/Generated/FREERTOS/tasks.c **** 
3978:../Dave/Generated/FREERTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need
3979:../Dave/Generated/FREERTOS/tasks.c **** 				to be moved into a new list. */
3980:../Dave/Generated/FREERTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 6199              	 .loc 1 3980 0
 6200 003a BB68     	 ldr r3,[r7,#8]
 6201 003c 5969     	 ldr r1,[r3,#20]
 6202 003e BB68     	 ldr r3,[r7,#8]
 6203 0040 DA6A     	 ldr r2,[r3,#44]
 6204 0042 1346     	 mov r3,r2
 6205 0044 9B00     	 lsls r3,r3,#2
 6206 0046 1344     	 add r3,r3,r2
 6207 0048 9B00     	 lsls r3,r3,#2
 6208 004a 2C4A     	 ldr r2,.L418+4
 6209 004c 1344     	 add r3,r3,r2
 6210 004e 9942     	 cmp r1,r3
 6211 0050 3CD1     	 bne .L413
3981:../Dave/Generated/FREERTOS/tasks.c **** 				{
3982:../Dave/Generated/FREERTOS/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6212              	 .loc 1 3982 0
 6213 0052 BB68     	 ldr r3,[r7,#8]
 6214 0054 0433     	 adds r3,r3,#4
 6215 0056 1846     	 mov r0,r3
 6216 0058 FFF7FEFF 	 bl uxListRemove
 6217 005c 0346     	 mov r3,r0
 6218 005e 002B     	 cmp r3,#0
 6219 0060 15D1     	 bne .L414
3983:../Dave/Generated/FREERTOS/tasks.c **** 					{
3984:../Dave/Generated/FREERTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 6220              	 .loc 1 3984 0
 6221 0062 BB68     	 ldr r3,[r7,#8]
 6222 0064 DA6A     	 ldr r2,[r3,#44]
 6223 0066 2549     	 ldr r1,.L418+4
 6224 0068 1346     	 mov r3,r2
 6225 006a 9B00     	 lsls r3,r3,#2
 6226 006c 1344     	 add r3,r3,r2
 6227 006e 9B00     	 lsls r3,r3,#2
 6228 0070 0B44     	 add r3,r3,r1
 6229 0072 1B68     	 ldr r3,[r3]
 6230 0074 002B     	 cmp r3,#0
 6231 0076 0AD1     	 bne .L414
 6232              	 .loc 1 3984 0 is_stmt 0 discriminator 1
 6233 0078 BB68     	 ldr r3,[r7,#8]
 6234 007a DB6A     	 ldr r3,[r3,#44]
 6235 007c 1A46     	 mov r2,r3
 6236 007e 0123     	 movs r3,#1
 6237 0080 9340     	 lsls r3,r3,r2
 6238 0082 DA43     	 mvns r2,r3
 6239 0084 1E4B     	 ldr r3,.L418+8
 6240 0086 1B68     	 ldr r3,[r3]
 6241 0088 1340     	 ands r3,r3,r2
 6242 008a 1D4A     	 ldr r2,.L418+8
 6243 008c 1360     	 str r3,[r2]
 6244              	.L414:
3985:../Dave/Generated/FREERTOS/tasks.c **** 					}
3986:../Dave/Generated/FREERTOS/tasks.c **** 					else
3987:../Dave/Generated/FREERTOS/tasks.c **** 					{
3988:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3989:../Dave/Generated/FREERTOS/tasks.c **** 					}
3990:../Dave/Generated/FREERTOS/tasks.c **** 
3991:../Dave/Generated/FREERTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3992:../Dave/Generated/FREERTOS/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6245              	 .loc 1 3992 0 is_stmt 1
 6246 008e 1A4B     	 ldr r3,.L418
 6247 0090 1B68     	 ldr r3,[r3]
 6248 0092 DA6A     	 ldr r2,[r3,#44]
 6249 0094 BB68     	 ldr r3,[r7,#8]
 6250 0096 DA62     	 str r2,[r3,#44]
3993:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6251              	 .loc 1 3993 0
 6252 0098 BB68     	 ldr r3,[r7,#8]
 6253 009a DB6A     	 ldr r3,[r3,#44]
 6254 009c 1A46     	 mov r2,r3
 6255 009e 0123     	 movs r3,#1
 6256 00a0 03FA02F2 	 lsl r2,r3,r2
 6257 00a4 164B     	 ldr r3,.L418+8
 6258 00a6 1B68     	 ldr r3,[r3]
 6259 00a8 1343     	 orrs r3,r3,r2
 6260 00aa 154A     	 ldr r2,.L418+8
 6261 00ac 1360     	 str r3,[r2]
 6262 00ae BB68     	 ldr r3,[r7,#8]
 6263 00b0 DA6A     	 ldr r2,[r3,#44]
 6264 00b2 1346     	 mov r3,r2
 6265 00b4 9B00     	 lsls r3,r3,#2
 6266 00b6 1344     	 add r3,r3,r2
 6267 00b8 9B00     	 lsls r3,r3,#2
 6268 00ba 104A     	 ldr r2,.L418+4
 6269 00bc 1A44     	 add r2,r2,r3
 6270 00be BB68     	 ldr r3,[r7,#8]
 6271 00c0 0433     	 adds r3,r3,#4
 6272 00c2 1046     	 mov r0,r2
 6273 00c4 1946     	 mov r1,r3
 6274 00c6 FFF7FEFF 	 bl vListInsertEnd
 6275 00ca 04E0     	 b .L416
 6276              	.L413:
3994:../Dave/Generated/FREERTOS/tasks.c **** 				}
3995:../Dave/Generated/FREERTOS/tasks.c **** 				else
3996:../Dave/Generated/FREERTOS/tasks.c **** 				{
3997:../Dave/Generated/FREERTOS/tasks.c **** 					/* Just inherit the priority. */
3998:../Dave/Generated/FREERTOS/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6277              	 .loc 1 3998 0
 6278 00cc 0A4B     	 ldr r3,.L418
 6279 00ce 1B68     	 ldr r3,[r3]
 6280 00d0 DA6A     	 ldr r2,[r3,#44]
 6281 00d2 BB68     	 ldr r3,[r7,#8]
 6282 00d4 DA62     	 str r2,[r3,#44]
 6283              	.L416:
3999:../Dave/Generated/FREERTOS/tasks.c **** 				}
4000:../Dave/Generated/FREERTOS/tasks.c **** 
4001:../Dave/Generated/FREERTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4002:../Dave/Generated/FREERTOS/tasks.c **** 
4003:../Dave/Generated/FREERTOS/tasks.c **** 				/* Inheritance occurred. */
4004:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdTRUE;
 6284              	 .loc 1 4004 0
 6285 00d6 0123     	 movs r3,#1
 6286 00d8 FB60     	 str r3,[r7,#12]
 6287 00da 08E0     	 b .L410
 6288              	.L411:
4005:../Dave/Generated/FREERTOS/tasks.c **** 			}
4006:../Dave/Generated/FREERTOS/tasks.c **** 			else
4007:../Dave/Generated/FREERTOS/tasks.c **** 			{
4008:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6289              	 .loc 1 4008 0
 6290 00dc BB68     	 ldr r3,[r7,#8]
 6291 00de DA6C     	 ldr r2,[r3,#76]
 6292 00e0 054B     	 ldr r3,.L418
 6293 00e2 1B68     	 ldr r3,[r3]
 6294 00e4 DB6A     	 ldr r3,[r3,#44]
 6295 00e6 9A42     	 cmp r2,r3
 6296 00e8 01D2     	 bcs .L410
4009:../Dave/Generated/FREERTOS/tasks.c **** 				{
4010:../Dave/Generated/FREERTOS/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4011:../Dave/Generated/FREERTOS/tasks.c **** 					priority of the task attempting to take the mutex, but the
4012:../Dave/Generated/FREERTOS/tasks.c **** 					current priority of the mutex holder is not lower than the
4013:../Dave/Generated/FREERTOS/tasks.c **** 					priority of the task attempting to take the mutex.
4014:../Dave/Generated/FREERTOS/tasks.c **** 					Therefore the mutex holder must have already inherited a
4015:../Dave/Generated/FREERTOS/tasks.c **** 					priority, but inheritance would have occurred if that had
4016:../Dave/Generated/FREERTOS/tasks.c **** 					not been the case. */
4017:../Dave/Generated/FREERTOS/tasks.c **** 					xReturn = pdTRUE;
 6297              	 .loc 1 4017 0
 6298 00ea 0123     	 movs r3,#1
 6299 00ec FB60     	 str r3,[r7,#12]
 6300              	.L410:
4018:../Dave/Generated/FREERTOS/tasks.c **** 				}
4019:../Dave/Generated/FREERTOS/tasks.c **** 				else
4020:../Dave/Generated/FREERTOS/tasks.c **** 				{
4021:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4022:../Dave/Generated/FREERTOS/tasks.c **** 				}
4023:../Dave/Generated/FREERTOS/tasks.c **** 			}
4024:../Dave/Generated/FREERTOS/tasks.c **** 		}
4025:../Dave/Generated/FREERTOS/tasks.c **** 		else
4026:../Dave/Generated/FREERTOS/tasks.c **** 		{
4027:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4028:../Dave/Generated/FREERTOS/tasks.c **** 		}
4029:../Dave/Generated/FREERTOS/tasks.c **** 
4030:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 6301              	 .loc 1 4030 0
 6302 00ee FB68     	 ldr r3,[r7,#12]
4031:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6303              	 .loc 1 4031 0
 6304 00f0 1846     	 mov r0,r3
 6305 00f2 1037     	 adds r7,r7,#16
 6306              	.LCFI278:
 6307              	 .cfi_def_cfa_offset 8
 6308 00f4 BD46     	 mov sp,r7
 6309              	.LCFI279:
 6310              	 .cfi_def_cfa_register 13
 6311              	 
 6312 00f6 80BD     	 pop {r7,pc}
 6313              	.L419:
 6314              	 .align 2
 6315              	.L418:
 6316 00f8 00000000 	 .word pxCurrentTCB
 6317 00fc 00000000 	 .word pxReadyTasksLists
 6318 0100 00000000 	 .word uxTopReadyPriority
 6319              	 .cfi_endproc
 6320              	.LFE190:
 6322              	 .section .text.xTaskPriorityDisinherit,"ax",%progbits
 6323              	 .align 2
 6324              	 .global xTaskPriorityDisinherit
 6325              	 .thumb
 6326              	 .thumb_func
 6328              	xTaskPriorityDisinherit:
 6329              	.LFB191:
4032:../Dave/Generated/FREERTOS/tasks.c **** 
4033:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4034:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4035:../Dave/Generated/FREERTOS/tasks.c **** 
4036:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4037:../Dave/Generated/FREERTOS/tasks.c **** 
4038:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4039:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6330              	 .loc 1 4039 0
 6331              	 .cfi_startproc
 6332              	 
 6333              	 
 6334 0000 80B5     	 push {r7,lr}
 6335              	.LCFI280:
 6336              	 .cfi_def_cfa_offset 8
 6337              	 .cfi_offset 7,-8
 6338              	 .cfi_offset 14,-4
 6339 0002 86B0     	 sub sp,sp,#24
 6340              	.LCFI281:
 6341              	 .cfi_def_cfa_offset 32
 6342 0004 00AF     	 add r7,sp,#0
 6343              	.LCFI282:
 6344              	 .cfi_def_cfa_register 7
 6345 0006 7860     	 str r0,[r7,#4]
4040:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6346              	 .loc 1 4040 0
 6347 0008 7B68     	 ldr r3,[r7,#4]
 6348 000a 3B61     	 str r3,[r7,#16]
4041:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6349              	 .loc 1 4041 0
 6350 000c 0023     	 movs r3,#0
 6351 000e 7B61     	 str r3,[r7,#20]
4042:../Dave/Generated/FREERTOS/tasks.c **** 
4043:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 6352              	 .loc 1 4043 0
 6353 0010 7B68     	 ldr r3,[r7,#4]
 6354 0012 002B     	 cmp r3,#0
 6355 0014 6ED0     	 beq .L421
4044:../Dave/Generated/FREERTOS/tasks.c **** 		{
4045:../Dave/Generated/FREERTOS/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4046:../Dave/Generated/FREERTOS/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4047:../Dave/Generated/FREERTOS/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4048:../Dave/Generated/FREERTOS/tasks.c **** 			be the running state task. */
4049:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 6356              	 .loc 1 4049 0
 6357 0016 3A4B     	 ldr r3,.L429
 6358 0018 1B68     	 ldr r3,[r3]
 6359 001a 3A69     	 ldr r2,[r7,#16]
 6360 001c 9A42     	 cmp r2,r3
 6361 001e 09D0     	 beq .L422
 6362              	.LBB202:
 6363              	.LBB203:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 6364              	 .loc 2 195 0 discriminator 1
 6365              	
 6366 0020 4FF0FC03 	 mov r3,#252
 6367 0024 83F31188 	 msr basepri,r3
 6368 0028 BFF36F8F 	 isb 
 6369 002c BFF34F8F 	 dsb 
 6370              	
 6371              	
 6372              	 .thumb
 6373 0030 FB60     	 str r3,[r7,#12]
 6374              	.L423:
 6375              	.LBE203:
 6376              	.LBE202:
 6377              	 .loc 1 4049 0 discriminator 1
 6378 0032 FEE7     	 b .L423
 6379              	.L422:
4050:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6380              	 .loc 1 4050 0
 6381 0034 3B69     	 ldr r3,[r7,#16]
 6382 0036 1B6D     	 ldr r3,[r3,#80]
 6383 0038 002B     	 cmp r3,#0
 6384 003a 09D1     	 bne .L424
 6385              	.LBB204:
 6386              	.LBB205:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 6387              	 .loc 2 195 0 discriminator 1
 6388              	
 6389 003c 4FF0FC03 	 mov r3,#252
 6390 0040 83F31188 	 msr basepri,r3
 6391 0044 BFF36F8F 	 isb 
 6392 0048 BFF34F8F 	 dsb 
 6393              	
 6394              	
 6395              	 .thumb
 6396 004c BB60     	 str r3,[r7,#8]
 6397              	.L425:
 6398              	.LBE205:
 6399              	.LBE204:
 6400              	 .loc 1 4050 0 discriminator 2
 6401 004e FEE7     	 b .L425
 6402              	.L424:
4051:../Dave/Generated/FREERTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6403              	 .loc 1 4051 0
 6404 0050 3B69     	 ldr r3,[r7,#16]
 6405 0052 1B6D     	 ldr r3,[r3,#80]
 6406 0054 5A1E     	 subs r2,r3,#1
 6407 0056 3B69     	 ldr r3,[r7,#16]
 6408 0058 1A65     	 str r2,[r3,#80]
4052:../Dave/Generated/FREERTOS/tasks.c **** 
4053:../Dave/Generated/FREERTOS/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4054:../Dave/Generated/FREERTOS/tasks.c **** 			task? */
4055:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6409              	 .loc 1 4055 0
 6410 005a 3B69     	 ldr r3,[r7,#16]
 6411 005c DA6A     	 ldr r2,[r3,#44]
 6412 005e 3B69     	 ldr r3,[r7,#16]
 6413 0060 DB6C     	 ldr r3,[r3,#76]
 6414 0062 9A42     	 cmp r2,r3
 6415 0064 46D0     	 beq .L421
4056:../Dave/Generated/FREERTOS/tasks.c **** 			{
4057:../Dave/Generated/FREERTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4058:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6416              	 .loc 1 4058 0
 6417 0066 3B69     	 ldr r3,[r7,#16]
 6418 0068 1B6D     	 ldr r3,[r3,#80]
 6419 006a 002B     	 cmp r3,#0
 6420 006c 42D1     	 bne .L421
4059:../Dave/Generated/FREERTOS/tasks.c **** 				{
4060:../Dave/Generated/FREERTOS/tasks.c **** 					/* A task can only have an inherited priority if it holds
4061:../Dave/Generated/FREERTOS/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4062:../Dave/Generated/FREERTOS/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4063:../Dave/Generated/FREERTOS/tasks.c **** 					holding task then it must be the running state task.  Remove
4064:../Dave/Generated/FREERTOS/tasks.c **** 					the holding task from the ready list. */
4065:../Dave/Generated/FREERTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6421              	 .loc 1 4065 0
 6422 006e 3B69     	 ldr r3,[r7,#16]
 6423 0070 0433     	 adds r3,r3,#4
 6424 0072 1846     	 mov r0,r3
 6425 0074 FFF7FEFF 	 bl uxListRemove
 6426 0078 0346     	 mov r3,r0
 6427 007a 002B     	 cmp r3,#0
 6428 007c 15D1     	 bne .L426
4066:../Dave/Generated/FREERTOS/tasks.c **** 					{
4067:../Dave/Generated/FREERTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 6429              	 .loc 1 4067 0
 6430 007e 3B69     	 ldr r3,[r7,#16]
 6431 0080 DA6A     	 ldr r2,[r3,#44]
 6432 0082 2049     	 ldr r1,.L429+4
 6433 0084 1346     	 mov r3,r2
 6434 0086 9B00     	 lsls r3,r3,#2
 6435 0088 1344     	 add r3,r3,r2
 6436 008a 9B00     	 lsls r3,r3,#2
 6437 008c 0B44     	 add r3,r3,r1
 6438 008e 1B68     	 ldr r3,[r3]
 6439 0090 002B     	 cmp r3,#0
 6440 0092 0AD1     	 bne .L426
 6441              	 .loc 1 4067 0 is_stmt 0 discriminator 1
 6442 0094 3B69     	 ldr r3,[r7,#16]
 6443 0096 DB6A     	 ldr r3,[r3,#44]
 6444 0098 1A46     	 mov r2,r3
 6445 009a 0123     	 movs r3,#1
 6446 009c 9340     	 lsls r3,r3,r2
 6447 009e DA43     	 mvns r2,r3
 6448 00a0 194B     	 ldr r3,.L429+8
 6449 00a2 1B68     	 ldr r3,[r3]
 6450 00a4 1340     	 ands r3,r3,r2
 6451 00a6 184A     	 ldr r2,.L429+8
 6452 00a8 1360     	 str r3,[r2]
 6453              	.L426:
4068:../Dave/Generated/FREERTOS/tasks.c **** 					}
4069:../Dave/Generated/FREERTOS/tasks.c **** 					else
4070:../Dave/Generated/FREERTOS/tasks.c **** 					{
4071:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4072:../Dave/Generated/FREERTOS/tasks.c **** 					}
4073:../Dave/Generated/FREERTOS/tasks.c **** 
4074:../Dave/Generated/FREERTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the
4075:../Dave/Generated/FREERTOS/tasks.c **** 					new	ready list. */
4076:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4077:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 6454              	 .loc 1 4077 0 is_stmt 1
 6455 00aa 3B69     	 ldr r3,[r7,#16]
 6456 00ac DA6C     	 ldr r2,[r3,#76]
 6457 00ae 3B69     	 ldr r3,[r7,#16]
 6458 00b0 DA62     	 str r2,[r3,#44]
4078:../Dave/Generated/FREERTOS/tasks.c **** 
4079:../Dave/Generated/FREERTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4080:../Dave/Generated/FREERTOS/tasks.c **** 					any other purpose if this task is running, and it must be
4081:../Dave/Generated/FREERTOS/tasks.c **** 					running to give back the mutex. */
4082:../Dave/Generated/FREERTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 6459              	 .loc 1 4082 0
 6460 00b2 3B69     	 ldr r3,[r7,#16]
 6461 00b4 DB6A     	 ldr r3,[r3,#44]
 6462 00b6 C3F10602 	 rsb r2,r3,#6
 6463 00ba 3B69     	 ldr r3,[r7,#16]
 6464 00bc 9A61     	 str r2,[r3,#24]
4083:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6465              	 .loc 1 4083 0
 6466 00be 3B69     	 ldr r3,[r7,#16]
 6467 00c0 DB6A     	 ldr r3,[r3,#44]
 6468 00c2 1A46     	 mov r2,r3
 6469 00c4 0123     	 movs r3,#1
 6470 00c6 03FA02F2 	 lsl r2,r3,r2
 6471 00ca 0F4B     	 ldr r3,.L429+8
 6472 00cc 1B68     	 ldr r3,[r3]
 6473 00ce 1343     	 orrs r3,r3,r2
 6474 00d0 0D4A     	 ldr r2,.L429+8
 6475 00d2 1360     	 str r3,[r2]
 6476 00d4 3B69     	 ldr r3,[r7,#16]
 6477 00d6 DA6A     	 ldr r2,[r3,#44]
 6478 00d8 1346     	 mov r3,r2
 6479 00da 9B00     	 lsls r3,r3,#2
 6480 00dc 1344     	 add r3,r3,r2
 6481 00de 9B00     	 lsls r3,r3,#2
 6482 00e0 084A     	 ldr r2,.L429+4
 6483 00e2 1A44     	 add r2,r2,r3
 6484 00e4 3B69     	 ldr r3,[r7,#16]
 6485 00e6 0433     	 adds r3,r3,#4
 6486 00e8 1046     	 mov r0,r2
 6487 00ea 1946     	 mov r1,r3
 6488 00ec FFF7FEFF 	 bl vListInsertEnd
4084:../Dave/Generated/FREERTOS/tasks.c **** 
4085:../Dave/Generated/FREERTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
4086:../Dave/Generated/FREERTOS/tasks.c **** 					This is only actually required in the corner case whereby
4087:../Dave/Generated/FREERTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4088:../Dave/Generated/FREERTOS/tasks.c **** 					in an order different to that in which they were taken.
4089:../Dave/Generated/FREERTOS/tasks.c **** 					If a context switch did not occur when the first mutex was
4090:../Dave/Generated/FREERTOS/tasks.c **** 					returned, even if a task was waiting on it, then a context
4091:../Dave/Generated/FREERTOS/tasks.c **** 					switch should occur when the last mutex is returned whether
4092:../Dave/Generated/FREERTOS/tasks.c **** 					a task is waiting on it or not. */
4093:../Dave/Generated/FREERTOS/tasks.c **** 					xReturn = pdTRUE;
 6489              	 .loc 1 4093 0
 6490 00f0 0123     	 movs r3,#1
 6491 00f2 7B61     	 str r3,[r7,#20]
 6492              	.L421:
4094:../Dave/Generated/FREERTOS/tasks.c **** 				}
4095:../Dave/Generated/FREERTOS/tasks.c **** 				else
4096:../Dave/Generated/FREERTOS/tasks.c **** 				{
4097:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4098:../Dave/Generated/FREERTOS/tasks.c **** 				}
4099:../Dave/Generated/FREERTOS/tasks.c **** 			}
4100:../Dave/Generated/FREERTOS/tasks.c **** 			else
4101:../Dave/Generated/FREERTOS/tasks.c **** 			{
4102:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4103:../Dave/Generated/FREERTOS/tasks.c **** 			}
4104:../Dave/Generated/FREERTOS/tasks.c **** 		}
4105:../Dave/Generated/FREERTOS/tasks.c **** 		else
4106:../Dave/Generated/FREERTOS/tasks.c **** 		{
4107:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4108:../Dave/Generated/FREERTOS/tasks.c **** 		}
4109:../Dave/Generated/FREERTOS/tasks.c **** 
4110:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 6493              	 .loc 1 4110 0
 6494 00f4 7B69     	 ldr r3,[r7,#20]
4111:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6495              	 .loc 1 4111 0
 6496 00f6 1846     	 mov r0,r3
 6497 00f8 1837     	 adds r7,r7,#24
 6498              	.LCFI283:
 6499              	 .cfi_def_cfa_offset 8
 6500 00fa BD46     	 mov sp,r7
 6501              	.LCFI284:
 6502              	 .cfi_def_cfa_register 13
 6503              	 
 6504 00fc 80BD     	 pop {r7,pc}
 6505              	.L430:
 6506 00fe 00BF     	 .align 2
 6507              	.L429:
 6508 0100 00000000 	 .word pxCurrentTCB
 6509 0104 00000000 	 .word pxReadyTasksLists
 6510 0108 00000000 	 .word uxTopReadyPriority
 6511              	 .cfi_endproc
 6512              	.LFE191:
 6514              	 .section .text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6515              	 .align 2
 6516              	 .global vTaskPriorityDisinheritAfterTimeout
 6517              	 .thumb
 6518              	 .thumb_func
 6520              	vTaskPriorityDisinheritAfterTimeout:
 6521              	.LFB192:
4112:../Dave/Generated/FREERTOS/tasks.c **** 
4113:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4114:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4115:../Dave/Generated/FREERTOS/tasks.c **** 
4116:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4117:../Dave/Generated/FREERTOS/tasks.c **** 
4118:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4119:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6522              	 .loc 1 4119 0
 6523              	 .cfi_startproc
 6524              	 
 6525              	 
 6526 0000 80B5     	 push {r7,lr}
 6527              	.LCFI285:
 6528              	 .cfi_def_cfa_offset 8
 6529              	 .cfi_offset 7,-8
 6530              	 .cfi_offset 14,-4
 6531 0002 88B0     	 sub sp,sp,#32
 6532              	.LCFI286:
 6533              	 .cfi_def_cfa_offset 40
 6534 0004 00AF     	 add r7,sp,#0
 6535              	.LCFI287:
 6536              	 .cfi_def_cfa_register 7
 6537 0006 7860     	 str r0,[r7,#4]
 6538 0008 3960     	 str r1,[r7]
4120:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6539              	 .loc 1 4120 0
 6540 000a 7B68     	 ldr r3,[r7,#4]
 6541 000c BB61     	 str r3,[r7,#24]
4121:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4122:../Dave/Generated/FREERTOS/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6542              	 .loc 1 4122 0
 6543 000e 0123     	 movs r3,#1
 6544 0010 7B61     	 str r3,[r7,#20]
4123:../Dave/Generated/FREERTOS/tasks.c **** 
4124:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 6545              	 .loc 1 4124 0
 6546 0012 7B68     	 ldr r3,[r7,#4]
 6547 0014 002B     	 cmp r3,#0
 6548 0016 00F08380 	 beq .L431
4125:../Dave/Generated/FREERTOS/tasks.c **** 		{
4126:../Dave/Generated/FREERTOS/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4127:../Dave/Generated/FREERTOS/tasks.c **** 			one mutex. */
4128:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6549              	 .loc 1 4128 0
 6550 001a BB69     	 ldr r3,[r7,#24]
 6551 001c 1B6D     	 ldr r3,[r3,#80]
 6552 001e 002B     	 cmp r3,#0
 6553 0020 09D1     	 bne .L433
 6554              	.LBB206:
 6555              	.LBB207:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 6556              	 .loc 2 195 0 discriminator 1
 6557              	
 6558 0022 4FF0FC03 	 mov r3,#252
 6559 0026 83F31188 	 msr basepri,r3
 6560 002a BFF36F8F 	 isb 
 6561 002e BFF34F8F 	 dsb 
 6562              	
 6563              	
 6564              	 .thumb
 6565 0032 FB60     	 str r3,[r7,#12]
 6566              	.L434:
 6567              	.LBE207:
 6568              	.LBE206:
 6569              	 .loc 1 4128 0 discriminator 1
 6570 0034 FEE7     	 b .L434
 6571              	.L433:
4129:../Dave/Generated/FREERTOS/tasks.c **** 
4130:../Dave/Generated/FREERTOS/tasks.c **** 			/* Determine the priority to which the priority of the task that
4131:../Dave/Generated/FREERTOS/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4132:../Dave/Generated/FREERTOS/tasks.c **** 			holding task's base priority and the priority of the highest
4133:../Dave/Generated/FREERTOS/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4134:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6572              	 .loc 1 4134 0
 6573 0036 BB69     	 ldr r3,[r7,#24]
 6574 0038 DA6C     	 ldr r2,[r3,#76]
 6575 003a 3B68     	 ldr r3,[r7]
 6576 003c 9A42     	 cmp r2,r3
 6577 003e 02D2     	 bcs .L435
4135:../Dave/Generated/FREERTOS/tasks.c **** 			{
4136:../Dave/Generated/FREERTOS/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 6578              	 .loc 1 4136 0
 6579 0040 3B68     	 ldr r3,[r7]
 6580 0042 FB61     	 str r3,[r7,#28]
 6581 0044 02E0     	 b .L436
 6582              	.L435:
4137:../Dave/Generated/FREERTOS/tasks.c **** 			}
4138:../Dave/Generated/FREERTOS/tasks.c **** 			else
4139:../Dave/Generated/FREERTOS/tasks.c **** 			{
4140:../Dave/Generated/FREERTOS/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 6583              	 .loc 1 4140 0
 6584 0046 BB69     	 ldr r3,[r7,#24]
 6585 0048 DB6C     	 ldr r3,[r3,#76]
 6586 004a FB61     	 str r3,[r7,#28]
 6587              	.L436:
4141:../Dave/Generated/FREERTOS/tasks.c **** 			}
4142:../Dave/Generated/FREERTOS/tasks.c **** 
4143:../Dave/Generated/FREERTOS/tasks.c **** 			/* Does the priority need to change? */
4144:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 6588              	 .loc 1 4144 0
 6589 004c BB69     	 ldr r3,[r7,#24]
 6590 004e DA6A     	 ldr r2,[r3,#44]
 6591 0050 FB69     	 ldr r3,[r7,#28]
 6592 0052 9A42     	 cmp r2,r3
 6593 0054 64D0     	 beq .L431
4145:../Dave/Generated/FREERTOS/tasks.c **** 			{
4146:../Dave/Generated/FREERTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4147:../Dave/Generated/FREERTOS/tasks.c **** 				simplification in the priority inheritance implementation.  If
4148:../Dave/Generated/FREERTOS/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4149:../Dave/Generated/FREERTOS/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4150:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6594              	 .loc 1 4150 0
 6595 0056 BB69     	 ldr r3,[r7,#24]
 6596 0058 1A6D     	 ldr r2,[r3,#80]
 6597 005a 7B69     	 ldr r3,[r7,#20]
 6598 005c 9A42     	 cmp r2,r3
 6599 005e 5FD1     	 bne .L431
4151:../Dave/Generated/FREERTOS/tasks.c **** 				{
4152:../Dave/Generated/FREERTOS/tasks.c **** 					/* If a task has timed out because it already holds the
4153:../Dave/Generated/FREERTOS/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4154:../Dave/Generated/FREERTOS/tasks.c **** 					its own priority. */
4155:../Dave/Generated/FREERTOS/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 6600              	 .loc 1 4155 0
 6601 0060 314B     	 ldr r3,.L442
 6602 0062 1B68     	 ldr r3,[r3]
 6603 0064 BA69     	 ldr r2,[r7,#24]
 6604 0066 9A42     	 cmp r2,r3
 6605 0068 09D1     	 bne .L437
 6606              	.LBB208:
 6607              	.LBB209:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 6608              	 .loc 2 195 0 discriminator 1
 6609              	
 6610 006a 4FF0FC03 	 mov r3,#252
 6611 006e 83F31188 	 msr basepri,r3
 6612 0072 BFF36F8F 	 isb 
 6613 0076 BFF34F8F 	 dsb 
 6614              	
 6615              	
 6616              	 .thumb
 6617 007a BB60     	 str r3,[r7,#8]
 6618              	.L438:
 6619              	.LBE209:
 6620              	.LBE208:
 6621              	 .loc 1 4155 0 discriminator 2
 6622 007c FEE7     	 b .L438
 6623              	.L437:
4156:../Dave/Generated/FREERTOS/tasks.c **** 
4157:../Dave/Generated/FREERTOS/tasks.c **** 					/* Disinherit the priority, remembering the previous
4158:../Dave/Generated/FREERTOS/tasks.c **** 					priority to facilitate determining the subject task's
4159:../Dave/Generated/FREERTOS/tasks.c **** 					state. */
4160:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4161:../Dave/Generated/FREERTOS/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6624              	 .loc 1 4161 0
 6625 007e BB69     	 ldr r3,[r7,#24]
 6626 0080 DB6A     	 ldr r3,[r3,#44]
 6627 0082 3B61     	 str r3,[r7,#16]
4162:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 6628              	 .loc 1 4162 0
 6629 0084 BB69     	 ldr r3,[r7,#24]
 6630 0086 FA69     	 ldr r2,[r7,#28]
 6631 0088 DA62     	 str r2,[r3,#44]
4163:../Dave/Generated/FREERTOS/tasks.c **** 
4164:../Dave/Generated/FREERTOS/tasks.c **** 					/* Only reset the event list item value if the value is not
4165:../Dave/Generated/FREERTOS/tasks.c **** 					being used for anything else. */
4166:../Dave/Generated/FREERTOS/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 6632              	 .loc 1 4166 0
 6633 008a BB69     	 ldr r3,[r7,#24]
 6634 008c 9B69     	 ldr r3,[r3,#24]
 6635 008e 002B     	 cmp r3,#0
 6636 0090 04DB     	 blt .L439
4167:../Dave/Generated/FREERTOS/tasks.c **** 					{
4168:../Dave/Generated/FREERTOS/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 6637              	 .loc 1 4168 0
 6638 0092 FB69     	 ldr r3,[r7,#28]
 6639 0094 C3F10602 	 rsb r2,r3,#6
 6640 0098 BB69     	 ldr r3,[r7,#24]
 6641 009a 9A61     	 str r2,[r3,#24]
 6642              	.L439:
4169:../Dave/Generated/FREERTOS/tasks.c **** 					}
4170:../Dave/Generated/FREERTOS/tasks.c **** 					else
4171:../Dave/Generated/FREERTOS/tasks.c **** 					{
4172:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4173:../Dave/Generated/FREERTOS/tasks.c **** 					}
4174:../Dave/Generated/FREERTOS/tasks.c **** 
4175:../Dave/Generated/FREERTOS/tasks.c **** 					/* If the running task is not the task that holds the mutex
4176:../Dave/Generated/FREERTOS/tasks.c **** 					then the task that holds the mutex could be in either the
4177:../Dave/Generated/FREERTOS/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4178:../Dave/Generated/FREERTOS/tasks.c **** 					from its current state list if it is in the Ready state as
4179:../Dave/Generated/FREERTOS/tasks.c **** 					the task's priority is going to change and there is one
4180:../Dave/Generated/FREERTOS/tasks.c **** 					Ready list per priority. */
4181:../Dave/Generated/FREERTOS/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 6643              	 .loc 1 4181 0
 6644 009c BB69     	 ldr r3,[r7,#24]
 6645 009e 5969     	 ldr r1,[r3,#20]
 6646 00a0 3A69     	 ldr r2,[r7,#16]
 6647 00a2 1346     	 mov r3,r2
 6648 00a4 9B00     	 lsls r3,r3,#2
 6649 00a6 1344     	 add r3,r3,r2
 6650 00a8 9B00     	 lsls r3,r3,#2
 6651 00aa 204A     	 ldr r2,.L442+4
 6652 00ac 1344     	 add r3,r3,r2
 6653 00ae 9942     	 cmp r1,r3
 6654 00b0 36D1     	 bne .L431
4182:../Dave/Generated/FREERTOS/tasks.c **** 					{
4183:../Dave/Generated/FREERTOS/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6655              	 .loc 1 4183 0
 6656 00b2 BB69     	 ldr r3,[r7,#24]
 6657 00b4 0433     	 adds r3,r3,#4
 6658 00b6 1846     	 mov r0,r3
 6659 00b8 FFF7FEFF 	 bl uxListRemove
 6660 00bc 0346     	 mov r3,r0
 6661 00be 002B     	 cmp r3,#0
 6662 00c0 15D1     	 bne .L440
4184:../Dave/Generated/FREERTOS/tasks.c **** 						{
4185:../Dave/Generated/FREERTOS/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 6663              	 .loc 1 4185 0
 6664 00c2 BB69     	 ldr r3,[r7,#24]
 6665 00c4 DA6A     	 ldr r2,[r3,#44]
 6666 00c6 1949     	 ldr r1,.L442+4
 6667 00c8 1346     	 mov r3,r2
 6668 00ca 9B00     	 lsls r3,r3,#2
 6669 00cc 1344     	 add r3,r3,r2
 6670 00ce 9B00     	 lsls r3,r3,#2
 6671 00d0 0B44     	 add r3,r3,r1
 6672 00d2 1B68     	 ldr r3,[r3]
 6673 00d4 002B     	 cmp r3,#0
 6674 00d6 0AD1     	 bne .L440
 6675              	 .loc 1 4185 0 is_stmt 0 discriminator 1
 6676 00d8 BB69     	 ldr r3,[r7,#24]
 6677 00da DB6A     	 ldr r3,[r3,#44]
 6678 00dc 1A46     	 mov r2,r3
 6679 00de 0123     	 movs r3,#1
 6680 00e0 9340     	 lsls r3,r3,r2
 6681 00e2 DA43     	 mvns r2,r3
 6682 00e4 124B     	 ldr r3,.L442+8
 6683 00e6 1B68     	 ldr r3,[r3]
 6684 00e8 1340     	 ands r3,r3,r2
 6685 00ea 114A     	 ldr r2,.L442+8
 6686 00ec 1360     	 str r3,[r2]
 6687              	.L440:
4186:../Dave/Generated/FREERTOS/tasks.c **** 						}
4187:../Dave/Generated/FREERTOS/tasks.c **** 						else
4188:../Dave/Generated/FREERTOS/tasks.c **** 						{
4189:../Dave/Generated/FREERTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4190:../Dave/Generated/FREERTOS/tasks.c **** 						}
4191:../Dave/Generated/FREERTOS/tasks.c **** 
4192:../Dave/Generated/FREERTOS/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 6688              	 .loc 1 4192 0 is_stmt 1
 6689 00ee BB69     	 ldr r3,[r7,#24]
 6690 00f0 DB6A     	 ldr r3,[r3,#44]
 6691 00f2 1A46     	 mov r2,r3
 6692 00f4 0123     	 movs r3,#1
 6693 00f6 03FA02F2 	 lsl r2,r3,r2
 6694 00fa 0D4B     	 ldr r3,.L442+8
 6695 00fc 1B68     	 ldr r3,[r3]
 6696 00fe 1343     	 orrs r3,r3,r2
 6697 0100 0B4A     	 ldr r2,.L442+8
 6698 0102 1360     	 str r3,[r2]
 6699 0104 BB69     	 ldr r3,[r7,#24]
 6700 0106 DA6A     	 ldr r2,[r3,#44]
 6701 0108 1346     	 mov r3,r2
 6702 010a 9B00     	 lsls r3,r3,#2
 6703 010c 1344     	 add r3,r3,r2
 6704 010e 9B00     	 lsls r3,r3,#2
 6705 0110 064A     	 ldr r2,.L442+4
 6706 0112 1A44     	 add r2,r2,r3
 6707 0114 BB69     	 ldr r3,[r7,#24]
 6708 0116 0433     	 adds r3,r3,#4
 6709 0118 1046     	 mov r0,r2
 6710 011a 1946     	 mov r1,r3
 6711 011c FFF7FEFF 	 bl vListInsertEnd
 6712              	.L431:
4193:../Dave/Generated/FREERTOS/tasks.c **** 					}
4194:../Dave/Generated/FREERTOS/tasks.c **** 					else
4195:../Dave/Generated/FREERTOS/tasks.c **** 					{
4196:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4197:../Dave/Generated/FREERTOS/tasks.c **** 					}
4198:../Dave/Generated/FREERTOS/tasks.c **** 				}
4199:../Dave/Generated/FREERTOS/tasks.c **** 				else
4200:../Dave/Generated/FREERTOS/tasks.c **** 				{
4201:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4202:../Dave/Generated/FREERTOS/tasks.c **** 				}
4203:../Dave/Generated/FREERTOS/tasks.c **** 			}
4204:../Dave/Generated/FREERTOS/tasks.c **** 			else
4205:../Dave/Generated/FREERTOS/tasks.c **** 			{
4206:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4207:../Dave/Generated/FREERTOS/tasks.c **** 			}
4208:../Dave/Generated/FREERTOS/tasks.c **** 		}
4209:../Dave/Generated/FREERTOS/tasks.c **** 		else
4210:../Dave/Generated/FREERTOS/tasks.c **** 		{
4211:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4212:../Dave/Generated/FREERTOS/tasks.c **** 		}
4213:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6713              	 .loc 1 4213 0
 6714 0120 2037     	 adds r7,r7,#32
 6715              	.LCFI288:
 6716              	 .cfi_def_cfa_offset 8
 6717 0122 BD46     	 mov sp,r7
 6718              	.LCFI289:
 6719              	 .cfi_def_cfa_register 13
 6720              	 
 6721 0124 80BD     	 pop {r7,pc}
 6722              	.L443:
 6723 0126 00BF     	 .align 2
 6724              	.L442:
 6725 0128 00000000 	 .word pxCurrentTCB
 6726 012c 00000000 	 .word pxReadyTasksLists
 6727 0130 00000000 	 .word uxTopReadyPriority
 6728              	 .cfi_endproc
 6729              	.LFE192:
 6731              	 .section .text.prvWriteNameToBuffer,"ax",%progbits
 6732              	 .align 2
 6733              	 .thumb
 6734              	 .thumb_func
 6736              	prvWriteNameToBuffer:
 6737              	.LFB193:
4214:../Dave/Generated/FREERTOS/tasks.c **** 
4215:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4216:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4217:../Dave/Generated/FREERTOS/tasks.c **** 
4218:../Dave/Generated/FREERTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4219:../Dave/Generated/FREERTOS/tasks.c **** 
4220:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskEnterCritical( void )
4221:../Dave/Generated/FREERTOS/tasks.c **** 	{
4222:../Dave/Generated/FREERTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
4223:../Dave/Generated/FREERTOS/tasks.c **** 
4224:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4225:../Dave/Generated/FREERTOS/tasks.c **** 		{
4226:../Dave/Generated/FREERTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4227:../Dave/Generated/FREERTOS/tasks.c **** 
4228:../Dave/Generated/FREERTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4229:../Dave/Generated/FREERTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
4230:../Dave/Generated/FREERTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4231:../Dave/Generated/FREERTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4232:../Dave/Generated/FREERTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
4233:../Dave/Generated/FREERTOS/tasks.c **** 			critical section. */
4234:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4235:../Dave/Generated/FREERTOS/tasks.c **** 			{
4236:../Dave/Generated/FREERTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
4237:../Dave/Generated/FREERTOS/tasks.c **** 			}
4238:../Dave/Generated/FREERTOS/tasks.c **** 		}
4239:../Dave/Generated/FREERTOS/tasks.c **** 		else
4240:../Dave/Generated/FREERTOS/tasks.c **** 		{
4241:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4242:../Dave/Generated/FREERTOS/tasks.c **** 		}
4243:../Dave/Generated/FREERTOS/tasks.c **** 	}
4244:../Dave/Generated/FREERTOS/tasks.c **** 
4245:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4246:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4247:../Dave/Generated/FREERTOS/tasks.c **** 
4248:../Dave/Generated/FREERTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4249:../Dave/Generated/FREERTOS/tasks.c **** 
4250:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskExitCritical( void )
4251:../Dave/Generated/FREERTOS/tasks.c **** 	{
4252:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4253:../Dave/Generated/FREERTOS/tasks.c **** 		{
4254:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4255:../Dave/Generated/FREERTOS/tasks.c **** 			{
4256:../Dave/Generated/FREERTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4257:../Dave/Generated/FREERTOS/tasks.c **** 
4258:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4259:../Dave/Generated/FREERTOS/tasks.c **** 				{
4260:../Dave/Generated/FREERTOS/tasks.c **** 					portENABLE_INTERRUPTS();
4261:../Dave/Generated/FREERTOS/tasks.c **** 				}
4262:../Dave/Generated/FREERTOS/tasks.c **** 				else
4263:../Dave/Generated/FREERTOS/tasks.c **** 				{
4264:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4265:../Dave/Generated/FREERTOS/tasks.c **** 				}
4266:../Dave/Generated/FREERTOS/tasks.c **** 			}
4267:../Dave/Generated/FREERTOS/tasks.c **** 			else
4268:../Dave/Generated/FREERTOS/tasks.c **** 			{
4269:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4270:../Dave/Generated/FREERTOS/tasks.c **** 			}
4271:../Dave/Generated/FREERTOS/tasks.c **** 		}
4272:../Dave/Generated/FREERTOS/tasks.c **** 		else
4273:../Dave/Generated/FREERTOS/tasks.c **** 		{
4274:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4275:../Dave/Generated/FREERTOS/tasks.c **** 		}
4276:../Dave/Generated/FREERTOS/tasks.c **** 	}
4277:../Dave/Generated/FREERTOS/tasks.c **** 
4278:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4279:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4280:../Dave/Generated/FREERTOS/tasks.c **** 
4281:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4282:../Dave/Generated/FREERTOS/tasks.c **** 
4283:../Dave/Generated/FREERTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4284:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6738              	 .loc 1 4284 0
 6739              	 .cfi_startproc
 6740              	 
 6741              	 
 6742 0000 80B5     	 push {r7,lr}
 6743              	.LCFI290:
 6744              	 .cfi_def_cfa_offset 8
 6745              	 .cfi_offset 7,-8
 6746              	 .cfi_offset 14,-4
 6747 0002 84B0     	 sub sp,sp,#16
 6748              	.LCFI291:
 6749              	 .cfi_def_cfa_offset 24
 6750 0004 00AF     	 add r7,sp,#0
 6751              	.LCFI292:
 6752              	 .cfi_def_cfa_register 7
 6753 0006 7860     	 str r0,[r7,#4]
 6754 0008 3960     	 str r1,[r7]
4285:../Dave/Generated/FREERTOS/tasks.c **** 	size_t x;
4286:../Dave/Generated/FREERTOS/tasks.c **** 
4287:../Dave/Generated/FREERTOS/tasks.c **** 		/* Start by copying the entire string. */
4288:../Dave/Generated/FREERTOS/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
 6755              	 .loc 1 4288 0
 6756 000a 7868     	 ldr r0,[r7,#4]
 6757 000c 3968     	 ldr r1,[r7]
 6758 000e FFF7FEFF 	 bl strcpy
4289:../Dave/Generated/FREERTOS/tasks.c **** 
4290:../Dave/Generated/FREERTOS/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4291:../Dave/Generated/FREERTOS/tasks.c **** 		printed out. */
4292:../Dave/Generated/FREERTOS/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 6759              	 .loc 1 4292 0
 6760 0012 7868     	 ldr r0,[r7,#4]
 6761 0014 FFF7FEFF 	 bl strlen
 6762 0018 F860     	 str r0,[r7,#12]
 6763 001a 07E0     	 b .L445
 6764              	.L446:
4293:../Dave/Generated/FREERTOS/tasks.c **** 		{
4294:../Dave/Generated/FREERTOS/tasks.c **** 			pcBuffer[ x ] = ' ';
 6765              	 .loc 1 4294 0 discriminator 3
 6766 001c 7A68     	 ldr r2,[r7,#4]
 6767 001e FB68     	 ldr r3,[r7,#12]
 6768 0020 1344     	 add r3,r3,r2
 6769 0022 2022     	 movs r2,#32
 6770 0024 1A70     	 strb r2,[r3]
4292:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6771              	 .loc 1 4292 0 discriminator 3
 6772 0026 FB68     	 ldr r3,[r7,#12]
 6773 0028 0133     	 adds r3,r3,#1
 6774 002a FB60     	 str r3,[r7,#12]
 6775              	.L445:
4292:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6776              	 .loc 1 4292 0 is_stmt 0 discriminator 1
 6777 002c FB68     	 ldr r3,[r7,#12]
 6778 002e 0E2B     	 cmp r3,#14
 6779 0030 F4D9     	 bls .L446
4295:../Dave/Generated/FREERTOS/tasks.c **** 		}
4296:../Dave/Generated/FREERTOS/tasks.c **** 
4297:../Dave/Generated/FREERTOS/tasks.c **** 		/* Terminate. */
4298:../Dave/Generated/FREERTOS/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
 6780              	 .loc 1 4298 0 is_stmt 1
 6781 0032 7A68     	 ldr r2,[r7,#4]
 6782 0034 FB68     	 ldr r3,[r7,#12]
 6783 0036 1344     	 add r3,r3,r2
 6784 0038 0022     	 movs r2,#0
 6785 003a 1A70     	 strb r2,[r3]
4299:../Dave/Generated/FREERTOS/tasks.c **** 
4300:../Dave/Generated/FREERTOS/tasks.c **** 		/* Return the new end of string. */
4301:../Dave/Generated/FREERTOS/tasks.c **** 		return &( pcBuffer[ x ] );
 6786              	 .loc 1 4301 0
 6787 003c 7A68     	 ldr r2,[r7,#4]
 6788 003e FB68     	 ldr r3,[r7,#12]
 6789 0040 1344     	 add r3,r3,r2
4302:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6790              	 .loc 1 4302 0
 6791 0042 1846     	 mov r0,r3
 6792 0044 1037     	 adds r7,r7,#16
 6793              	.LCFI293:
 6794              	 .cfi_def_cfa_offset 8
 6795 0046 BD46     	 mov sp,r7
 6796              	.LCFI294:
 6797              	 .cfi_def_cfa_register 13
 6798              	 
 6799 0048 80BD     	 pop {r7,pc}
 6800              	 .cfi_endproc
 6801              	.LFE193:
 6803 004a 00BF     	 .section .rodata
 6804 0005 000000   	 .align 2
 6805              	.LC1:
 6806 0008 09256309 	 .ascii "\011%c\011%u\011%u\011%u\015\012\000"
 6806      25750925 
 6806      75092575 
 6806      0D0A00
 6807 0017 00       	 .section .text.vTaskList,"ax",%progbits
 6808              	 .align 2
 6809              	 .global vTaskList
 6810              	 .thumb
 6811              	 .thumb_func
 6813              	vTaskList:
 6814              	.LFB194:
4303:../Dave/Generated/FREERTOS/tasks.c **** 
4304:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4305:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4306:../Dave/Generated/FREERTOS/tasks.c **** 
4307:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4308:../Dave/Generated/FREERTOS/tasks.c **** 
4309:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4310:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6815              	 .loc 1 4310 0
 6816              	 .cfi_startproc
 6817              	 
 6818              	 
 6819 0000 B0B5     	 push {r4,r5,r7,lr}
 6820              	.LCFI295:
 6821              	 .cfi_def_cfa_offset 16
 6822              	 .cfi_offset 4,-16
 6823              	 .cfi_offset 5,-12
 6824              	 .cfi_offset 7,-8
 6825              	 .cfi_offset 14,-4
 6826 0002 88B0     	 sub sp,sp,#32
 6827              	.LCFI296:
 6828              	 .cfi_def_cfa_offset 48
 6829 0004 02AF     	 add r7,sp,#8
 6830              	.LCFI297:
 6831              	 .cfi_def_cfa 7,40
 6832 0006 7860     	 str r0,[r7,#4]
4311:../Dave/Generated/FREERTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4312:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxArraySize, x;
4313:../Dave/Generated/FREERTOS/tasks.c **** 	char cStatus;
4314:../Dave/Generated/FREERTOS/tasks.c **** 
4315:../Dave/Generated/FREERTOS/tasks.c **** 		/*
4316:../Dave/Generated/FREERTOS/tasks.c **** 		 * PLEASE NOTE:
4317:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4318:../Dave/Generated/FREERTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4319:../Dave/Generated/FREERTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4320:../Dave/Generated/FREERTOS/tasks.c **** 		 * scheduler.
4321:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4322:../Dave/Generated/FREERTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4323:../Dave/Generated/FREERTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4324:../Dave/Generated/FREERTOS/tasks.c **** 		 * displays task names, states and stack usage.
4325:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4326:../Dave/Generated/FREERTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4327:../Dave/Generated/FREERTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4328:../Dave/Generated/FREERTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4329:../Dave/Generated/FREERTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4330:../Dave/Generated/FREERTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4331:../Dave/Generated/FREERTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4332:../Dave/Generated/FREERTOS/tasks.c **** 		 * snprintf() implementation!).
4333:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4334:../Dave/Generated/FREERTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4335:../Dave/Generated/FREERTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4336:../Dave/Generated/FREERTOS/tasks.c **** 		 * through a call to vTaskList().
4337:../Dave/Generated/FREERTOS/tasks.c **** 		 */
4338:../Dave/Generated/FREERTOS/tasks.c **** 
4339:../Dave/Generated/FREERTOS/tasks.c **** 
4340:../Dave/Generated/FREERTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4341:../Dave/Generated/FREERTOS/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
 6833              	 .loc 1 4341 0
 6834 0008 7B68     	 ldr r3,[r7,#4]
 6835 000a 0022     	 movs r2,#0
 6836 000c 1A70     	 strb r2,[r3]
4342:../Dave/Generated/FREERTOS/tasks.c **** 
4343:../Dave/Generated/FREERTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4344:../Dave/Generated/FREERTOS/tasks.c **** 		function is executing. */
4345:../Dave/Generated/FREERTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
 6837              	 .loc 1 4345 0
 6838 000e 454B     	 ldr r3,.L460
 6839 0010 1B68     	 ldr r3,[r3]
 6840 0012 FB60     	 str r3,[r7,#12]
4346:../Dave/Generated/FREERTOS/tasks.c **** 
4347:../Dave/Generated/FREERTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4348:../Dave/Generated/FREERTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4349:../Dave/Generated/FREERTOS/tasks.c **** 		equate to NULL. */
4350:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
 6841              	 .loc 1 4350 0
 6842 0014 434B     	 ldr r3,.L460
 6843 0016 1A68     	 ldr r2,[r3]
 6844 0018 1346     	 mov r3,r2
 6845 001a DB00     	 lsls r3,r3,#3
 6846 001c 1344     	 add r3,r3,r2
 6847 001e 9B00     	 lsls r3,r3,#2
 6848 0020 1846     	 mov r0,r3
 6849 0022 FFF7FEFF 	 bl pvPortMalloc
 6850 0026 B860     	 str r0,[r7,#8]
4351:../Dave/Generated/FREERTOS/tasks.c **** 
4352:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
 6851              	 .loc 1 4352 0
 6852 0028 BB68     	 ldr r3,[r7,#8]
 6853 002a 002B     	 cmp r3,#0
 6854 002c 76D0     	 beq .L448
4353:../Dave/Generated/FREERTOS/tasks.c **** 		{
4354:../Dave/Generated/FREERTOS/tasks.c **** 			/* Generate the (binary) data. */
4355:../Dave/Generated/FREERTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 6855              	 .loc 1 4355 0
 6856 002e B868     	 ldr r0,[r7,#8]
 6857 0030 F968     	 ldr r1,[r7,#12]
 6858 0032 0022     	 movs r2,#0
 6859 0034 FFF7FEFF 	 bl uxTaskGetSystemState
 6860 0038 F860     	 str r0,[r7,#12]
4356:../Dave/Generated/FREERTOS/tasks.c **** 
4357:../Dave/Generated/FREERTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
4358:../Dave/Generated/FREERTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
 6861              	 .loc 1 4358 0
 6862 003a 0023     	 movs r3,#0
 6863 003c 7B61     	 str r3,[r7,#20]
 6864 003e 66E0     	 b .L450
 6865              	.L459:
4359:../Dave/Generated/FREERTOS/tasks.c **** 			{
4360:../Dave/Generated/FREERTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
 6866              	 .loc 1 4360 0
 6867 0040 7A69     	 ldr r2,[r7,#20]
 6868 0042 1346     	 mov r3,r2
 6869 0044 DB00     	 lsls r3,r3,#3
 6870 0046 1344     	 add r3,r3,r2
 6871 0048 9B00     	 lsls r3,r3,#2
 6872 004a 1A46     	 mov r2,r3
 6873 004c BB68     	 ldr r3,[r7,#8]
 6874 004e 1344     	 add r3,r3,r2
 6875 0050 1B7B     	 ldrb r3,[r3,#12]
 6876 0052 042B     	 cmp r3,#4
 6877 0054 1BD8     	 bhi .L451
 6878 0056 01A2     	 adr r2,.L453
 6879 0058 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 6880              	 .p2align 2
 6881              	.L453:
 6882 005c 71000000 	 .word .L452+1
 6883 0060 77000000 	 .word .L454+1
 6884 0064 7D000000 	 .word .L455+1
 6885 0068 83000000 	 .word .L456+1
 6886 006c 89000000 	 .word .L457+1
 6887              	 .p2align 1
 6888              	.L452:
4361:../Dave/Generated/FREERTOS/tasks.c **** 				{
4362:../Dave/Generated/FREERTOS/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
 6889              	 .loc 1 4362 0
 6890 0070 5823     	 movs r3,#88
 6891 0072 FB74     	 strb r3,[r7,#19]
4363:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6892              	 .loc 1 4363 0
 6893 0074 0EE0     	 b .L458
 6894              	.L454:
4364:../Dave/Generated/FREERTOS/tasks.c **** 
4365:../Dave/Generated/FREERTOS/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
 6895              	 .loc 1 4365 0
 6896 0076 5223     	 movs r3,#82
 6897 0078 FB74     	 strb r3,[r7,#19]
4366:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6898              	 .loc 1 4366 0
 6899 007a 0BE0     	 b .L458
 6900              	.L455:
4367:../Dave/Generated/FREERTOS/tasks.c **** 
4368:../Dave/Generated/FREERTOS/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 6901              	 .loc 1 4368 0
 6902 007c 4223     	 movs r3,#66
 6903 007e FB74     	 strb r3,[r7,#19]
4369:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6904              	 .loc 1 4369 0
 6905 0080 08E0     	 b .L458
 6906              	.L456:
4370:../Dave/Generated/FREERTOS/tasks.c **** 
4371:../Dave/Generated/FREERTOS/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 6907              	 .loc 1 4371 0
 6908 0082 5323     	 movs r3,#83
 6909 0084 FB74     	 strb r3,[r7,#19]
4372:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6910              	 .loc 1 4372 0
 6911 0086 05E0     	 b .L458
 6912              	.L457:
4373:../Dave/Generated/FREERTOS/tasks.c **** 
4374:../Dave/Generated/FREERTOS/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
 6913              	 .loc 1 4374 0
 6914 0088 4423     	 movs r3,#68
 6915 008a FB74     	 strb r3,[r7,#19]
4375:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6916              	 .loc 1 4375 0
 6917 008c 02E0     	 b .L458
 6918              	.L451:
4376:../Dave/Generated/FREERTOS/tasks.c **** 
4377:../Dave/Generated/FREERTOS/tasks.c **** 					case eInvalid:		/* Fall through. */
4378:../Dave/Generated/FREERTOS/tasks.c **** 					default:			/* Should not get here, but it is included
4379:../Dave/Generated/FREERTOS/tasks.c **** 										to prevent static checking errors. */
4380:../Dave/Generated/FREERTOS/tasks.c **** 										cStatus = ( char ) 0x00;
 6919              	 .loc 1 4380 0
 6920 008e 0023     	 movs r3,#0
 6921 0090 FB74     	 strb r3,[r7,#19]
4381:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6922              	 .loc 1 4381 0
 6923 0092 00BF     	 nop
 6924              	.L458:
4382:../Dave/Generated/FREERTOS/tasks.c **** 				}
4383:../Dave/Generated/FREERTOS/tasks.c **** 
4384:../Dave/Generated/FREERTOS/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4385:../Dave/Generated/FREERTOS/tasks.c **** 				can be printed in tabular form more easily. */
4386:../Dave/Generated/FREERTOS/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 6925              	 .loc 1 4386 0 discriminator 2
 6926 0094 7A69     	 ldr r2,[r7,#20]
 6927 0096 1346     	 mov r3,r2
 6928 0098 DB00     	 lsls r3,r3,#3
 6929 009a 1344     	 add r3,r3,r2
 6930 009c 9B00     	 lsls r3,r3,#2
 6931 009e 1A46     	 mov r2,r3
 6932 00a0 BB68     	 ldr r3,[r7,#8]
 6933 00a2 1344     	 add r3,r3,r2
 6934 00a4 5B68     	 ldr r3,[r3,#4]
 6935 00a6 7868     	 ldr r0,[r7,#4]
 6936 00a8 1946     	 mov r1,r3
 6937 00aa FFF7FEFF 	 bl prvWriteNameToBuffer
 6938 00ae 7860     	 str r0,[r7,#4]
4387:../Dave/Generated/FREERTOS/tasks.c **** 
4388:../Dave/Generated/FREERTOS/tasks.c **** 				/* Write the rest of the string. */
4389:../Dave/Generated/FREERTOS/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
 6939              	 .loc 1 4389 0 discriminator 2
 6940 00b0 FD7C     	 ldrb r5,[r7,#19]
 6941 00b2 7A69     	 ldr r2,[r7,#20]
 6942 00b4 1346     	 mov r3,r2
 6943 00b6 DB00     	 lsls r3,r3,#3
 6944 00b8 1344     	 add r3,r3,r2
 6945 00ba 9B00     	 lsls r3,r3,#2
 6946 00bc 1A46     	 mov r2,r3
 6947 00be BB68     	 ldr r3,[r7,#8]
 6948 00c0 1344     	 add r3,r3,r2
 6949 00c2 1C69     	 ldr r4,[r3,#16]
 6950 00c4 7A69     	 ldr r2,[r7,#20]
 6951 00c6 1346     	 mov r3,r2
 6952 00c8 DB00     	 lsls r3,r3,#3
 6953 00ca 1344     	 add r3,r3,r2
 6954 00cc 9B00     	 lsls r3,r3,#2
 6955 00ce 1A46     	 mov r2,r3
 6956 00d0 BB68     	 ldr r3,[r7,#8]
 6957 00d2 1344     	 add r3,r3,r2
 6958 00d4 1B8C     	 ldrh r3,[r3,#32]
 6959 00d6 1946     	 mov r1,r3
 6960 00d8 7A69     	 ldr r2,[r7,#20]
 6961 00da 1346     	 mov r3,r2
 6962 00dc DB00     	 lsls r3,r3,#3
 6963 00de 1344     	 add r3,r3,r2
 6964 00e0 9B00     	 lsls r3,r3,#2
 6965 00e2 1A46     	 mov r2,r3
 6966 00e4 BB68     	 ldr r3,[r7,#8]
 6967 00e6 1344     	 add r3,r3,r2
 6968 00e8 9B68     	 ldr r3,[r3,#8]
 6969 00ea 0091     	 str r1,[sp]
 6970 00ec 0193     	 str r3,[sp,#4]
 6971 00ee 7868     	 ldr r0,[r7,#4]
 6972 00f0 0D49     	 ldr r1,.L460+4
 6973 00f2 2A46     	 mov r2,r5
 6974 00f4 2346     	 mov r3,r4
 6975 00f6 FFF7FEFF 	 bl sprintf
4390:../Dave/Generated/FREERTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
 6976              	 .loc 1 4390 0 discriminator 2
 6977 00fa 7868     	 ldr r0,[r7,#4]
 6978 00fc FFF7FEFF 	 bl strlen
 6979 0100 0246     	 mov r2,r0
 6980 0102 7B68     	 ldr r3,[r7,#4]
 6981 0104 1344     	 add r3,r3,r2
 6982 0106 7B60     	 str r3,[r7,#4]
4358:../Dave/Generated/FREERTOS/tasks.c **** 			{
 6983              	 .loc 1 4358 0 discriminator 2
 6984 0108 7B69     	 ldr r3,[r7,#20]
 6985 010a 0133     	 adds r3,r3,#1
 6986 010c 7B61     	 str r3,[r7,#20]
 6987              	.L450:
4358:../Dave/Generated/FREERTOS/tasks.c **** 			{
 6988              	 .loc 1 4358 0 is_stmt 0 discriminator 1
 6989 010e 7A69     	 ldr r2,[r7,#20]
 6990 0110 FB68     	 ldr r3,[r7,#12]
 6991 0112 9A42     	 cmp r2,r3
 6992 0114 94D3     	 bcc .L459
4391:../Dave/Generated/FREERTOS/tasks.c **** 			}
4392:../Dave/Generated/FREERTOS/tasks.c **** 
4393:../Dave/Generated/FREERTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4394:../Dave/Generated/FREERTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4395:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
 6993              	 .loc 1 4395 0 is_stmt 1
 6994 0116 B868     	 ldr r0,[r7,#8]
 6995 0118 FFF7FEFF 	 bl vPortFree
 6996              	.L448:
4396:../Dave/Generated/FREERTOS/tasks.c **** 		}
4397:../Dave/Generated/FREERTOS/tasks.c **** 		else
4398:../Dave/Generated/FREERTOS/tasks.c **** 		{
4399:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4400:../Dave/Generated/FREERTOS/tasks.c **** 		}
4401:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6997              	 .loc 1 4401 0
 6998 011c 1837     	 adds r7,r7,#24
 6999              	.LCFI298:
 7000              	 .cfi_def_cfa_offset 16
 7001 011e BD46     	 mov sp,r7
 7002              	.LCFI299:
 7003              	 .cfi_def_cfa_register 13
 7004              	 
 7005 0120 B0BD     	 pop {r4,r5,r7,pc}
 7006              	.L461:
 7007 0122 00BF     	 .align 2
 7008              	.L460:
 7009 0124 00000000 	 .word uxCurrentNumberOfTasks
 7010 0128 08000000 	 .word .LC1
 7011              	 .cfi_endproc
 7012              	.LFE194:
 7014              	 .section .text.uxTaskResetEventItemValue,"ax",%progbits
 7015              	 .align 2
 7016              	 .global uxTaskResetEventItemValue
 7017              	 .thumb
 7018              	 .thumb_func
 7020              	uxTaskResetEventItemValue:
 7021              	.LFB195:
4402:../Dave/Generated/FREERTOS/tasks.c **** 
4403:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4404:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
4405:../Dave/Generated/FREERTOS/tasks.c **** 
4406:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4407:../Dave/Generated/FREERTOS/tasks.c **** 
4408:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4409:../Dave/Generated/FREERTOS/tasks.c **** 	{
4410:../Dave/Generated/FREERTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4411:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxArraySize, x;
4412:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4413:../Dave/Generated/FREERTOS/tasks.c **** 
4414:../Dave/Generated/FREERTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4415:../Dave/Generated/FREERTOS/tasks.c **** 		{
4416:../Dave/Generated/FREERTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4417:../Dave/Generated/FREERTOS/tasks.c **** 		}
4418:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
4419:../Dave/Generated/FREERTOS/tasks.c **** 
4420:../Dave/Generated/FREERTOS/tasks.c **** 		/*
4421:../Dave/Generated/FREERTOS/tasks.c **** 		 * PLEASE NOTE:
4422:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4423:../Dave/Generated/FREERTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4424:../Dave/Generated/FREERTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4425:../Dave/Generated/FREERTOS/tasks.c **** 		 * scheduler.
4426:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4427:../Dave/Generated/FREERTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4428:../Dave/Generated/FREERTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4429:../Dave/Generated/FREERTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4430:../Dave/Generated/FREERTOS/tasks.c **** 		 * in both absolute and percentage terms.
4431:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4432:../Dave/Generated/FREERTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4433:../Dave/Generated/FREERTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4434:../Dave/Generated/FREERTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4435:../Dave/Generated/FREERTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4436:../Dave/Generated/FREERTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4437:../Dave/Generated/FREERTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4438:../Dave/Generated/FREERTOS/tasks.c **** 		 * a full snprintf() implementation!).
4439:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4440:../Dave/Generated/FREERTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4441:../Dave/Generated/FREERTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4442:../Dave/Generated/FREERTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4443:../Dave/Generated/FREERTOS/tasks.c **** 		 */
4444:../Dave/Generated/FREERTOS/tasks.c **** 
4445:../Dave/Generated/FREERTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4446:../Dave/Generated/FREERTOS/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4447:../Dave/Generated/FREERTOS/tasks.c **** 
4448:../Dave/Generated/FREERTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4449:../Dave/Generated/FREERTOS/tasks.c **** 		function is executing. */
4450:../Dave/Generated/FREERTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4451:../Dave/Generated/FREERTOS/tasks.c **** 
4452:../Dave/Generated/FREERTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4453:../Dave/Generated/FREERTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4454:../Dave/Generated/FREERTOS/tasks.c **** 		equate to NULL. */
4455:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4456:../Dave/Generated/FREERTOS/tasks.c **** 
4457:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
4458:../Dave/Generated/FREERTOS/tasks.c **** 		{
4459:../Dave/Generated/FREERTOS/tasks.c **** 			/* Generate the (binary) data. */
4460:../Dave/Generated/FREERTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4461:../Dave/Generated/FREERTOS/tasks.c **** 
4462:../Dave/Generated/FREERTOS/tasks.c **** 			/* For percentage calculations. */
4463:../Dave/Generated/FREERTOS/tasks.c **** 			ulTotalTime /= 100UL;
4464:../Dave/Generated/FREERTOS/tasks.c **** 
4465:../Dave/Generated/FREERTOS/tasks.c **** 			/* Avoid divide by zero errors. */
4466:../Dave/Generated/FREERTOS/tasks.c **** 			if( ulTotalTime > 0UL )
4467:../Dave/Generated/FREERTOS/tasks.c **** 			{
4468:../Dave/Generated/FREERTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
4469:../Dave/Generated/FREERTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4470:../Dave/Generated/FREERTOS/tasks.c **** 				{
4471:../Dave/Generated/FREERTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
4472:../Dave/Generated/FREERTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
4473:../Dave/Generated/FREERTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4474:../Dave/Generated/FREERTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4475:../Dave/Generated/FREERTOS/tasks.c **** 
4476:../Dave/Generated/FREERTOS/tasks.c **** 					/* Write the task name to the string, padding with
4477:../Dave/Generated/FREERTOS/tasks.c **** 					spaces so it can be printed in tabular form more
4478:../Dave/Generated/FREERTOS/tasks.c **** 					easily. */
4479:../Dave/Generated/FREERTOS/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4480:../Dave/Generated/FREERTOS/tasks.c **** 
4481:../Dave/Generated/FREERTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4482:../Dave/Generated/FREERTOS/tasks.c **** 					{
4483:../Dave/Generated/FREERTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4484:../Dave/Generated/FREERTOS/tasks.c **** 						{
4485:../Dave/Generated/FREERTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4486:../Dave/Generated/FREERTOS/tasks.c **** 						}
4487:../Dave/Generated/FREERTOS/tasks.c **** 						#else
4488:../Dave/Generated/FREERTOS/tasks.c **** 						{
4489:../Dave/Generated/FREERTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4490:../Dave/Generated/FREERTOS/tasks.c **** 							printf() library can be used. */
4491:../Dave/Generated/FREERTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4492:../Dave/Generated/FREERTOS/tasks.c **** 						}
4493:../Dave/Generated/FREERTOS/tasks.c **** 						#endif
4494:../Dave/Generated/FREERTOS/tasks.c **** 					}
4495:../Dave/Generated/FREERTOS/tasks.c **** 					else
4496:../Dave/Generated/FREERTOS/tasks.c **** 					{
4497:../Dave/Generated/FREERTOS/tasks.c **** 						/* If the percentage is zero here then the task has
4498:../Dave/Generated/FREERTOS/tasks.c **** 						consumed less than 1% of the total run time. */
4499:../Dave/Generated/FREERTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4500:../Dave/Generated/FREERTOS/tasks.c **** 						{
4501:../Dave/Generated/FREERTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4502:../Dave/Generated/FREERTOS/tasks.c **** 						}
4503:../Dave/Generated/FREERTOS/tasks.c **** 						#else
4504:../Dave/Generated/FREERTOS/tasks.c **** 						{
4505:../Dave/Generated/FREERTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4506:../Dave/Generated/FREERTOS/tasks.c **** 							printf() library can be used. */
4507:../Dave/Generated/FREERTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4508:../Dave/Generated/FREERTOS/tasks.c **** 						}
4509:../Dave/Generated/FREERTOS/tasks.c **** 						#endif
4510:../Dave/Generated/FREERTOS/tasks.c **** 					}
4511:../Dave/Generated/FREERTOS/tasks.c **** 
4512:../Dave/Generated/FREERTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4513:../Dave/Generated/FREERTOS/tasks.c **** 				}
4514:../Dave/Generated/FREERTOS/tasks.c **** 			}
4515:../Dave/Generated/FREERTOS/tasks.c **** 			else
4516:../Dave/Generated/FREERTOS/tasks.c **** 			{
4517:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4518:../Dave/Generated/FREERTOS/tasks.c **** 			}
4519:../Dave/Generated/FREERTOS/tasks.c **** 
4520:../Dave/Generated/FREERTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4521:../Dave/Generated/FREERTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4522:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
4523:../Dave/Generated/FREERTOS/tasks.c **** 		}
4524:../Dave/Generated/FREERTOS/tasks.c **** 		else
4525:../Dave/Generated/FREERTOS/tasks.c **** 		{
4526:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4527:../Dave/Generated/FREERTOS/tasks.c **** 		}
4528:../Dave/Generated/FREERTOS/tasks.c **** 	}
4529:../Dave/Generated/FREERTOS/tasks.c **** 
4530:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4531:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4532:../Dave/Generated/FREERTOS/tasks.c **** 
4533:../Dave/Generated/FREERTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4534:../Dave/Generated/FREERTOS/tasks.c **** {
 7022              	 .loc 1 4534 0
 7023              	 .cfi_startproc
 7024              	 
 7025              	 
 7026              	 
 7027 0000 80B4     	 push {r7}
 7028              	.LCFI300:
 7029              	 .cfi_def_cfa_offset 4
 7030              	 .cfi_offset 7,-4
 7031 0002 83B0     	 sub sp,sp,#12
 7032              	.LCFI301:
 7033              	 .cfi_def_cfa_offset 16
 7034 0004 00AF     	 add r7,sp,#0
 7035              	.LCFI302:
 7036              	 .cfi_def_cfa_register 7
4535:../Dave/Generated/FREERTOS/tasks.c **** TickType_t uxReturn;
4536:../Dave/Generated/FREERTOS/tasks.c **** 
4537:../Dave/Generated/FREERTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 7037              	 .loc 1 4537 0
 7038 0006 094B     	 ldr r3,.L464
 7039 0008 1B68     	 ldr r3,[r3]
 7040 000a 9B69     	 ldr r3,[r3,#24]
 7041 000c 7B60     	 str r3,[r7,#4]
4538:../Dave/Generated/FREERTOS/tasks.c **** 
4539:../Dave/Generated/FREERTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4540:../Dave/Generated/FREERTOS/tasks.c **** 	queues and semaphores. */
4541:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 7042              	 .loc 1 4541 0
 7043 000e 074B     	 ldr r3,.L464
 7044 0010 1B68     	 ldr r3,[r3]
 7045 0012 064A     	 ldr r2,.L464
 7046 0014 1268     	 ldr r2,[r2]
 7047 0016 D26A     	 ldr r2,[r2,#44]
 7048 0018 C2F10602 	 rsb r2,r2,#6
 7049 001c 9A61     	 str r2,[r3,#24]
4542:../Dave/Generated/FREERTOS/tasks.c **** 
4543:../Dave/Generated/FREERTOS/tasks.c **** 	return uxReturn;
 7050              	 .loc 1 4543 0
 7051 001e 7B68     	 ldr r3,[r7,#4]
4544:../Dave/Generated/FREERTOS/tasks.c **** }
 7052              	 .loc 1 4544 0
 7053 0020 1846     	 mov r0,r3
 7054 0022 0C37     	 adds r7,r7,#12
 7055              	.LCFI303:
 7056              	 .cfi_def_cfa_offset 4
 7057 0024 BD46     	 mov sp,r7
 7058              	.LCFI304:
 7059              	 .cfi_def_cfa_register 13
 7060              	 
 7061 0026 5DF8047B 	 ldr r7,[sp],#4
 7062              	.LCFI305:
 7063              	 .cfi_restore 7
 7064              	 .cfi_def_cfa_offset 0
 7065 002a 7047     	 bx lr
 7066              	.L465:
 7067              	 .align 2
 7068              	.L464:
 7069 002c 00000000 	 .word pxCurrentTCB
 7070              	 .cfi_endproc
 7071              	.LFE195:
 7073              	 .section .text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 7074              	 .align 2
 7075              	 .global pvTaskIncrementMutexHeldCount
 7076              	 .thumb
 7077              	 .thumb_func
 7079              	pvTaskIncrementMutexHeldCount:
 7080              	.LFB196:
4545:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4546:../Dave/Generated/FREERTOS/tasks.c **** 
4547:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4548:../Dave/Generated/FREERTOS/tasks.c **** 
4549:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4550:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7081              	 .loc 1 4550 0
 7082              	 .cfi_startproc
 7083              	 
 7084              	 
 7085              	 
 7086 0000 80B4     	 push {r7}
 7087              	.LCFI306:
 7088              	 .cfi_def_cfa_offset 4
 7089              	 .cfi_offset 7,-4
 7090 0002 00AF     	 add r7,sp,#0
 7091              	.LCFI307:
 7092              	 .cfi_def_cfa_register 7
4551:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4552:../Dave/Generated/FREERTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
4553:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
 7093              	 .loc 1 4553 0
 7094 0004 074B     	 ldr r3,.L469
 7095 0006 1B68     	 ldr r3,[r3]
 7096 0008 002B     	 cmp r3,#0
 7097 000a 04D0     	 beq .L467
4554:../Dave/Generated/FREERTOS/tasks.c **** 		{
4555:../Dave/Generated/FREERTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 7098              	 .loc 1 4555 0
 7099 000c 054B     	 ldr r3,.L469
 7100 000e 1B68     	 ldr r3,[r3]
 7101 0010 1A6D     	 ldr r2,[r3,#80]
 7102 0012 0132     	 adds r2,r2,#1
 7103 0014 1A65     	 str r2,[r3,#80]
 7104              	.L467:
4556:../Dave/Generated/FREERTOS/tasks.c **** 		}
4557:../Dave/Generated/FREERTOS/tasks.c **** 
4558:../Dave/Generated/FREERTOS/tasks.c **** 		return pxCurrentTCB;
 7105              	 .loc 1 4558 0
 7106 0016 034B     	 ldr r3,.L469
 7107 0018 1B68     	 ldr r3,[r3]
4559:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7108              	 .loc 1 4559 0
 7109 001a 1846     	 mov r0,r3
 7110 001c BD46     	 mov sp,r7
 7111              	.LCFI308:
 7112              	 .cfi_def_cfa_register 13
 7113              	 
 7114 001e 5DF8047B 	 ldr r7,[sp],#4
 7115              	.LCFI309:
 7116              	 .cfi_restore 7
 7117              	 .cfi_def_cfa_offset 0
 7118 0022 7047     	 bx lr
 7119              	.L470:
 7120              	 .align 2
 7121              	.L469:
 7122 0024 00000000 	 .word pxCurrentTCB
 7123              	 .cfi_endproc
 7124              	.LFE196:
 7126              	 .section .text.ulTaskNotifyTake,"ax",%progbits
 7127              	 .align 2
 7128              	 .global ulTaskNotifyTake
 7129              	 .thumb
 7130              	 .thumb_func
 7132              	ulTaskNotifyTake:
 7133              	.LFB197:
4560:../Dave/Generated/FREERTOS/tasks.c **** 
4561:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4562:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4563:../Dave/Generated/FREERTOS/tasks.c **** 
4564:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4565:../Dave/Generated/FREERTOS/tasks.c **** 
4566:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4567:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7134              	 .loc 1 4567 0
 7135              	 .cfi_startproc
 7136              	 
 7137              	 
 7138 0000 80B5     	 push {r7,lr}
 7139              	.LCFI310:
 7140              	 .cfi_def_cfa_offset 8
 7141              	 .cfi_offset 7,-8
 7142              	 .cfi_offset 14,-4
 7143 0002 84B0     	 sub sp,sp,#16
 7144              	.LCFI311:
 7145              	 .cfi_def_cfa_offset 24
 7146 0004 00AF     	 add r7,sp,#0
 7147              	.LCFI312:
 7148              	 .cfi_def_cfa_register 7
 7149 0006 7860     	 str r0,[r7,#4]
 7150 0008 3960     	 str r1,[r7]
4568:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulReturn;
4569:../Dave/Generated/FREERTOS/tasks.c **** 
4570:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 7151              	 .loc 1 4570 0
 7152 000a FFF7FEFF 	 bl vPortEnterCritical
4571:../Dave/Generated/FREERTOS/tasks.c **** 		{
4572:../Dave/Generated/FREERTOS/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4573:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 7153              	 .loc 1 4573 0
 7154 000e 1E4B     	 ldr r3,.L477
 7155 0010 1B68     	 ldr r3,[r3]
 7156 0012 9B6E     	 ldr r3,[r3,#104]
 7157 0014 002B     	 cmp r3,#0
 7158 0016 13D1     	 bne .L472
4574:../Dave/Generated/FREERTOS/tasks.c **** 			{
4575:../Dave/Generated/FREERTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4576:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 7159              	 .loc 1 4576 0
 7160 0018 1B4B     	 ldr r3,.L477
 7161 001a 1B68     	 ldr r3,[r3]
 7162 001c 0122     	 movs r2,#1
 7163 001e 83F86C20 	 strb r2,[r3,#108]
4577:../Dave/Generated/FREERTOS/tasks.c **** 
4578:../Dave/Generated/FREERTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 7164              	 .loc 1 4578 0
 7165 0022 3B68     	 ldr r3,[r7]
 7166 0024 002B     	 cmp r3,#0
 7167 0026 0BD0     	 beq .L472
4579:../Dave/Generated/FREERTOS/tasks.c **** 				{
4580:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7168              	 .loc 1 4580 0
 7169 0028 3868     	 ldr r0,[r7]
 7170 002a 0121     	 movs r1,#1
 7171 002c FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
4581:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4582:../Dave/Generated/FREERTOS/tasks.c **** 
4583:../Dave/Generated/FREERTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4584:../Dave/Generated/FREERTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4585:../Dave/Generated/FREERTOS/tasks.c **** 					critical section exits) - but it is not something that
4586:../Dave/Generated/FREERTOS/tasks.c **** 					application code should ever do. */
4587:../Dave/Generated/FREERTOS/tasks.c **** 					portYIELD_WITHIN_API();
 7172              	 .loc 1 4587 0
 7173 0030 164B     	 ldr r3,.L477+4
 7174 0032 4FF08052 	 mov r2,#268435456
 7175 0036 1A60     	 str r2,[r3]
 7176              	
 7177 0038 BFF34F8F 	 dsb
 7178              	
 7179              	
 7180 003c BFF36F8F 	 isb
 7181              	
 7182              	 .thumb
 7183              	.L472:
4588:../Dave/Generated/FREERTOS/tasks.c **** 				}
4589:../Dave/Generated/FREERTOS/tasks.c **** 				else
4590:../Dave/Generated/FREERTOS/tasks.c **** 				{
4591:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4592:../Dave/Generated/FREERTOS/tasks.c **** 				}
4593:../Dave/Generated/FREERTOS/tasks.c **** 			}
4594:../Dave/Generated/FREERTOS/tasks.c **** 			else
4595:../Dave/Generated/FREERTOS/tasks.c **** 			{
4596:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4597:../Dave/Generated/FREERTOS/tasks.c **** 			}
4598:../Dave/Generated/FREERTOS/tasks.c **** 		}
4599:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 7184              	 .loc 1 4599 0
 7185 0040 FFF7FEFF 	 bl vPortExitCritical
4600:../Dave/Generated/FREERTOS/tasks.c **** 
4601:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 7186              	 .loc 1 4601 0
 7187 0044 FFF7FEFF 	 bl vPortEnterCritical
4602:../Dave/Generated/FREERTOS/tasks.c **** 		{
4603:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4604:../Dave/Generated/FREERTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 7188              	 .loc 1 4604 0
 7189 0048 0F4B     	 ldr r3,.L477
 7190 004a 1B68     	 ldr r3,[r3]
 7191 004c 9B6E     	 ldr r3,[r3,#104]
 7192 004e FB60     	 str r3,[r7,#12]
4605:../Dave/Generated/FREERTOS/tasks.c **** 
4606:../Dave/Generated/FREERTOS/tasks.c **** 			if( ulReturn != 0UL )
 7193              	 .loc 1 4606 0
 7194 0050 FB68     	 ldr r3,[r7,#12]
 7195 0052 002B     	 cmp r3,#0
 7196 0054 0CD0     	 beq .L473
4607:../Dave/Generated/FREERTOS/tasks.c **** 			{
4608:../Dave/Generated/FREERTOS/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 7197              	 .loc 1 4608 0
 7198 0056 7B68     	 ldr r3,[r7,#4]
 7199 0058 002B     	 cmp r3,#0
 7200 005a 04D0     	 beq .L474
4609:../Dave/Generated/FREERTOS/tasks.c **** 				{
4610:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 7201              	 .loc 1 4610 0
 7202 005c 0A4B     	 ldr r3,.L477
 7203 005e 1B68     	 ldr r3,[r3]
 7204 0060 0022     	 movs r2,#0
 7205 0062 9A66     	 str r2,[r3,#104]
 7206 0064 04E0     	 b .L473
 7207              	.L474:
4611:../Dave/Generated/FREERTOS/tasks.c **** 				}
4612:../Dave/Generated/FREERTOS/tasks.c **** 				else
4613:../Dave/Generated/FREERTOS/tasks.c **** 				{
4614:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 7208              	 .loc 1 4614 0
 7209 0066 084B     	 ldr r3,.L477
 7210 0068 1B68     	 ldr r3,[r3]
 7211 006a FA68     	 ldr r2,[r7,#12]
 7212 006c 013A     	 subs r2,r2,#1
 7213 006e 9A66     	 str r2,[r3,#104]
 7214              	.L473:
4615:../Dave/Generated/FREERTOS/tasks.c **** 				}
4616:../Dave/Generated/FREERTOS/tasks.c **** 			}
4617:../Dave/Generated/FREERTOS/tasks.c **** 			else
4618:../Dave/Generated/FREERTOS/tasks.c **** 			{
4619:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4620:../Dave/Generated/FREERTOS/tasks.c **** 			}
4621:../Dave/Generated/FREERTOS/tasks.c **** 
4622:../Dave/Generated/FREERTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7215              	 .loc 1 4622 0
 7216 0070 054B     	 ldr r3,.L477
 7217 0072 1B68     	 ldr r3,[r3]
 7218 0074 0022     	 movs r2,#0
 7219 0076 83F86C20 	 strb r2,[r3,#108]
4623:../Dave/Generated/FREERTOS/tasks.c **** 		}
4624:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 7220              	 .loc 1 4624 0
 7221 007a FFF7FEFF 	 bl vPortExitCritical
4625:../Dave/Generated/FREERTOS/tasks.c **** 
4626:../Dave/Generated/FREERTOS/tasks.c **** 		return ulReturn;
 7222              	 .loc 1 4626 0
 7223 007e FB68     	 ldr r3,[r7,#12]
4627:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7224              	 .loc 1 4627 0
 7225 0080 1846     	 mov r0,r3
 7226 0082 1037     	 adds r7,r7,#16
 7227              	.LCFI313:
 7228              	 .cfi_def_cfa_offset 8
 7229 0084 BD46     	 mov sp,r7
 7230              	.LCFI314:
 7231              	 .cfi_def_cfa_register 13
 7232              	 
 7233 0086 80BD     	 pop {r7,pc}
 7234              	.L478:
 7235              	 .align 2
 7236              	.L477:
 7237 0088 00000000 	 .word pxCurrentTCB
 7238 008c 04ED00E0 	 .word -536810236
 7239              	 .cfi_endproc
 7240              	.LFE197:
 7242              	 .section .text.xTaskNotifyWait,"ax",%progbits
 7243              	 .align 2
 7244              	 .global xTaskNotifyWait
 7245              	 .thumb
 7246              	 .thumb_func
 7248              	xTaskNotifyWait:
 7249              	.LFB198:
4628:../Dave/Generated/FREERTOS/tasks.c **** 
4629:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4630:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4631:../Dave/Generated/FREERTOS/tasks.c **** 
4632:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4633:../Dave/Generated/FREERTOS/tasks.c **** 
4634:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4635:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7250              	 .loc 1 4635 0
 7251              	 .cfi_startproc
 7252              	 
 7253              	 
 7254 0000 80B5     	 push {r7,lr}
 7255              	.LCFI315:
 7256              	 .cfi_def_cfa_offset 8
 7257              	 .cfi_offset 7,-8
 7258              	 .cfi_offset 14,-4
 7259 0002 86B0     	 sub sp,sp,#24
 7260              	.LCFI316:
 7261              	 .cfi_def_cfa_offset 32
 7262 0004 00AF     	 add r7,sp,#0
 7263              	.LCFI317:
 7264              	 .cfi_def_cfa_register 7
 7265 0006 F860     	 str r0,[r7,#12]
 7266 0008 B960     	 str r1,[r7,#8]
 7267 000a 7A60     	 str r2,[r7,#4]
 7268 000c 3B60     	 str r3,[r7]
4636:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
4637:../Dave/Generated/FREERTOS/tasks.c **** 
4638:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 7269              	 .loc 1 4638 0
 7270 000e FFF7FEFF 	 bl vPortEnterCritical
4639:../Dave/Generated/FREERTOS/tasks.c **** 		{
4640:../Dave/Generated/FREERTOS/tasks.c **** 			/* Only block if a notification is not already pending. */
4641:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 7271              	 .loc 1 4641 0
 7272 0012 264B     	 ldr r3,.L485
 7273 0014 1B68     	 ldr r3,[r3]
 7274 0016 93F86C30 	 ldrb r3,[r3,#108]
 7275 001a DBB2     	 uxtb r3,r3
 7276 001c 022B     	 cmp r3,#2
 7277 001e 1AD0     	 beq .L480
4642:../Dave/Generated/FREERTOS/tasks.c **** 			{
4643:../Dave/Generated/FREERTOS/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4644:../Dave/Generated/FREERTOS/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4645:../Dave/Generated/FREERTOS/tasks.c **** 				clear the value to zero. */
4646:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 7278              	 .loc 1 4646 0
 7279 0020 224B     	 ldr r3,.L485
 7280 0022 1B68     	 ldr r3,[r3]
 7281 0024 996E     	 ldr r1,[r3,#104]
 7282 0026 FA68     	 ldr r2,[r7,#12]
 7283 0028 D243     	 mvns r2,r2
 7284 002a 0A40     	 ands r2,r2,r1
 7285 002c 9A66     	 str r2,[r3,#104]
4647:../Dave/Generated/FREERTOS/tasks.c **** 
4648:../Dave/Generated/FREERTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4649:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 7286              	 .loc 1 4649 0
 7287 002e 1F4B     	 ldr r3,.L485
 7288 0030 1B68     	 ldr r3,[r3]
 7289 0032 0122     	 movs r2,#1
 7290 0034 83F86C20 	 strb r2,[r3,#108]
4650:../Dave/Generated/FREERTOS/tasks.c **** 
4651:../Dave/Generated/FREERTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 7291              	 .loc 1 4651 0
 7292 0038 3B68     	 ldr r3,[r7]
 7293 003a 002B     	 cmp r3,#0
 7294 003c 0BD0     	 beq .L480
4652:../Dave/Generated/FREERTOS/tasks.c **** 				{
4653:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7295              	 .loc 1 4653 0
 7296 003e 3868     	 ldr r0,[r7]
 7297 0040 0121     	 movs r1,#1
 7298 0042 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
4654:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4655:../Dave/Generated/FREERTOS/tasks.c **** 
4656:../Dave/Generated/FREERTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4657:../Dave/Generated/FREERTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4658:../Dave/Generated/FREERTOS/tasks.c **** 					critical section exits) - but it is not something that
4659:../Dave/Generated/FREERTOS/tasks.c **** 					application code should ever do. */
4660:../Dave/Generated/FREERTOS/tasks.c **** 					portYIELD_WITHIN_API();
 7299              	 .loc 1 4660 0
 7300 0046 1A4B     	 ldr r3,.L485+4
 7301 0048 4FF08052 	 mov r2,#268435456
 7302 004c 1A60     	 str r2,[r3]
 7303              	
 7304 004e BFF34F8F 	 dsb
 7305              	
 7306              	
 7307 0052 BFF36F8F 	 isb
 7308              	
 7309              	 .thumb
 7310              	.L480:
4661:../Dave/Generated/FREERTOS/tasks.c **** 				}
4662:../Dave/Generated/FREERTOS/tasks.c **** 				else
4663:../Dave/Generated/FREERTOS/tasks.c **** 				{
4664:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4665:../Dave/Generated/FREERTOS/tasks.c **** 				}
4666:../Dave/Generated/FREERTOS/tasks.c **** 			}
4667:../Dave/Generated/FREERTOS/tasks.c **** 			else
4668:../Dave/Generated/FREERTOS/tasks.c **** 			{
4669:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4670:../Dave/Generated/FREERTOS/tasks.c **** 			}
4671:../Dave/Generated/FREERTOS/tasks.c **** 		}
4672:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 7311              	 .loc 1 4672 0
 7312 0056 FFF7FEFF 	 bl vPortExitCritical
4673:../Dave/Generated/FREERTOS/tasks.c **** 
4674:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 7313              	 .loc 1 4674 0
 7314 005a FFF7FEFF 	 bl vPortEnterCritical
4675:../Dave/Generated/FREERTOS/tasks.c **** 		{
4676:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4677:../Dave/Generated/FREERTOS/tasks.c **** 
4678:../Dave/Generated/FREERTOS/tasks.c **** 			if( pulNotificationValue != NULL )
 7315              	 .loc 1 4678 0
 7316 005e 7B68     	 ldr r3,[r7,#4]
 7317 0060 002B     	 cmp r3,#0
 7318 0062 04D0     	 beq .L481
4679:../Dave/Generated/FREERTOS/tasks.c **** 			{
4680:../Dave/Generated/FREERTOS/tasks.c **** 				/* Output the current notification value, which may or may not
4681:../Dave/Generated/FREERTOS/tasks.c **** 				have changed. */
4682:../Dave/Generated/FREERTOS/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 7319              	 .loc 1 4682 0
 7320 0064 114B     	 ldr r3,.L485
 7321 0066 1B68     	 ldr r3,[r3]
 7322 0068 9A6E     	 ldr r2,[r3,#104]
 7323 006a 7B68     	 ldr r3,[r7,#4]
 7324 006c 1A60     	 str r2,[r3]
 7325              	.L481:
4683:../Dave/Generated/FREERTOS/tasks.c **** 			}
4684:../Dave/Generated/FREERTOS/tasks.c **** 
4685:../Dave/Generated/FREERTOS/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4686:../Dave/Generated/FREERTOS/tasks.c **** 			blocked state (because a notification was already pending) or the
4687:../Dave/Generated/FREERTOS/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4688:../Dave/Generated/FREERTOS/tasks.c **** 			unblocked because of a timeout. */
4689:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 7326              	 .loc 1 4689 0
 7327 006e 0F4B     	 ldr r3,.L485
 7328 0070 1B68     	 ldr r3,[r3]
 7329 0072 93F86C30 	 ldrb r3,[r3,#108]
 7330 0076 DBB2     	 uxtb r3,r3
 7331 0078 022B     	 cmp r3,#2
 7332 007a 02D0     	 beq .L482
4690:../Dave/Generated/FREERTOS/tasks.c **** 			{
4691:../Dave/Generated/FREERTOS/tasks.c **** 				/* A notification was not received. */
4692:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdFALSE;
 7333              	 .loc 1 4692 0
 7334 007c 0023     	 movs r3,#0
 7335 007e 7B61     	 str r3,[r7,#20]
 7336 0080 08E0     	 b .L483
 7337              	.L482:
4693:../Dave/Generated/FREERTOS/tasks.c **** 			}
4694:../Dave/Generated/FREERTOS/tasks.c **** 			else
4695:../Dave/Generated/FREERTOS/tasks.c **** 			{
4696:../Dave/Generated/FREERTOS/tasks.c **** 				/* A notification was already pending or a notification was
4697:../Dave/Generated/FREERTOS/tasks.c **** 				received while the task was waiting. */
4698:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 7338              	 .loc 1 4698 0
 7339 0082 0A4B     	 ldr r3,.L485
 7340 0084 1B68     	 ldr r3,[r3]
 7341 0086 996E     	 ldr r1,[r3,#104]
 7342 0088 BA68     	 ldr r2,[r7,#8]
 7343 008a D243     	 mvns r2,r2
 7344 008c 0A40     	 ands r2,r2,r1
 7345 008e 9A66     	 str r2,[r3,#104]
4699:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdTRUE;
 7346              	 .loc 1 4699 0
 7347 0090 0123     	 movs r3,#1
 7348 0092 7B61     	 str r3,[r7,#20]
 7349              	.L483:
4700:../Dave/Generated/FREERTOS/tasks.c **** 			}
4701:../Dave/Generated/FREERTOS/tasks.c **** 
4702:../Dave/Generated/FREERTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7350              	 .loc 1 4702 0
 7351 0094 054B     	 ldr r3,.L485
 7352 0096 1B68     	 ldr r3,[r3]
 7353 0098 0022     	 movs r2,#0
 7354 009a 83F86C20 	 strb r2,[r3,#108]
4703:../Dave/Generated/FREERTOS/tasks.c **** 		}
4704:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 7355              	 .loc 1 4704 0
 7356 009e FFF7FEFF 	 bl vPortExitCritical
4705:../Dave/Generated/FREERTOS/tasks.c **** 
4706:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 7357              	 .loc 1 4706 0
 7358 00a2 7B69     	 ldr r3,[r7,#20]
4707:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7359              	 .loc 1 4707 0
 7360 00a4 1846     	 mov r0,r3
 7361 00a6 1837     	 adds r7,r7,#24
 7362              	.LCFI318:
 7363              	 .cfi_def_cfa_offset 8
 7364 00a8 BD46     	 mov sp,r7
 7365              	.LCFI319:
 7366              	 .cfi_def_cfa_register 13
 7367              	 
 7368 00aa 80BD     	 pop {r7,pc}
 7369              	.L486:
 7370              	 .align 2
 7371              	.L485:
 7372 00ac 00000000 	 .word pxCurrentTCB
 7373 00b0 04ED00E0 	 .word -536810236
 7374              	 .cfi_endproc
 7375              	.LFE198:
 7377              	 .section .text.xTaskGenericNotify,"ax",%progbits
 7378              	 .align 2
 7379              	 .global xTaskGenericNotify
 7380              	 .thumb
 7381              	 .thumb_func
 7383              	xTaskGenericNotify:
 7384              	.LFB199:
4708:../Dave/Generated/FREERTOS/tasks.c **** 
4709:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4710:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4711:../Dave/Generated/FREERTOS/tasks.c **** 
4712:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4713:../Dave/Generated/FREERTOS/tasks.c **** 
4714:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4715:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7385              	 .loc 1 4715 0
 7386              	 .cfi_startproc
 7387              	 
 7388              	 
 7389 0000 80B5     	 push {r7,lr}
 7390              	.LCFI320:
 7391              	 .cfi_def_cfa_offset 8
 7392              	 .cfi_offset 7,-8
 7393              	 .cfi_offset 14,-4
 7394 0002 8AB0     	 sub sp,sp,#40
 7395              	.LCFI321:
 7396              	 .cfi_def_cfa_offset 48
 7397 0004 00AF     	 add r7,sp,#0
 7398              	.LCFI322:
 7399              	 .cfi_def_cfa_register 7
 7400 0006 F860     	 str r0,[r7,#12]
 7401 0008 B960     	 str r1,[r7,#8]
 7402 000a 3B60     	 str r3,[r7]
 7403 000c 1346     	 mov r3,r2
 7404 000e FB71     	 strb r3,[r7,#7]
4716:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
4717:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7405              	 .loc 1 4717 0
 7406 0010 0123     	 movs r3,#1
 7407 0012 7B62     	 str r3,[r7,#36]
4718:../Dave/Generated/FREERTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4719:../Dave/Generated/FREERTOS/tasks.c **** 
4720:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToNotify );
 7408              	 .loc 1 4720 0
 7409 0014 FB68     	 ldr r3,[r7,#12]
 7410 0016 002B     	 cmp r3,#0
 7411 0018 09D1     	 bne .L488
 7412              	.LBB210:
 7413              	.LBB211:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7414              	 .loc 2 195 0 discriminator 1
 7415              	
 7416 001a 4FF0FC03 	 mov r3,#252
 7417 001e 83F31188 	 msr basepri,r3
 7418 0022 BFF36F8F 	 isb 
 7419 0026 BFF34F8F 	 dsb 
 7420              	
 7421              	
 7422              	 .thumb
 7423 002a BB61     	 str r3,[r7,#24]
 7424              	.L489:
 7425              	.LBE211:
 7426              	.LBE210:
 7427              	 .loc 1 4720 0 discriminator 1
 7428 002c FEE7     	 b .L489
 7429              	.L488:
4721:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = xTaskToNotify;
 7430              	 .loc 1 4721 0
 7431 002e FB68     	 ldr r3,[r7,#12]
 7432 0030 3B62     	 str r3,[r7,#32]
4722:../Dave/Generated/FREERTOS/tasks.c **** 
4723:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 7433              	 .loc 1 4723 0
 7434 0032 FFF7FEFF 	 bl vPortEnterCritical
4724:../Dave/Generated/FREERTOS/tasks.c **** 		{
4725:../Dave/Generated/FREERTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7435              	 .loc 1 4725 0
 7436 0036 3B68     	 ldr r3,[r7]
 7437 0038 002B     	 cmp r3,#0
 7438 003a 03D0     	 beq .L490
4726:../Dave/Generated/FREERTOS/tasks.c **** 			{
4727:../Dave/Generated/FREERTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7439              	 .loc 1 4727 0
 7440 003c 3B6A     	 ldr r3,[r7,#32]
 7441 003e 9A6E     	 ldr r2,[r3,#104]
 7442 0040 3B68     	 ldr r3,[r7]
 7443 0042 1A60     	 str r2,[r3]
 7444              	.L490:
4728:../Dave/Generated/FREERTOS/tasks.c **** 			}
4729:../Dave/Generated/FREERTOS/tasks.c **** 
4730:../Dave/Generated/FREERTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7445              	 .loc 1 4730 0
 7446 0044 3B6A     	 ldr r3,[r7,#32]
 7447 0046 93F86C30 	 ldrb r3,[r3,#108]
 7448 004a FB77     	 strb r3,[r7,#31]
4731:../Dave/Generated/FREERTOS/tasks.c **** 
4732:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7449              	 .loc 1 4732 0
 7450 004c 3B6A     	 ldr r3,[r7,#32]
 7451 004e 0222     	 movs r2,#2
 7452 0050 83F86C20 	 strb r2,[r3,#108]
4733:../Dave/Generated/FREERTOS/tasks.c **** 
4734:../Dave/Generated/FREERTOS/tasks.c **** 			switch( eAction )
 7453              	 .loc 1 4734 0
 7454 0054 FB79     	 ldrb r3,[r7,#7]
 7455 0056 042B     	 cmp r3,#4
 7456 0058 27D8     	 bhi .L491
 7457 005a 01A2     	 adr r2,.L493
 7458 005c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 7459              	 .p2align 2
 7460              	.L493:
 7461 0060 CB000000 	 .word .L507+1
 7462 0064 75000000 	 .word .L494+1
 7463 0068 83000000 	 .word .L495+1
 7464 006c 8F000000 	 .word .L496+1
 7465 0070 97000000 	 .word .L497+1
 7466              	 .p2align 1
 7467              	.L494:
4735:../Dave/Generated/FREERTOS/tasks.c **** 			{
4736:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetBits	:
4737:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7468              	 .loc 1 4737 0
 7469 0074 3B6A     	 ldr r3,[r7,#32]
 7470 0076 9A6E     	 ldr r2,[r3,#104]
 7471 0078 BB68     	 ldr r3,[r7,#8]
 7472 007a 1A43     	 orrs r2,r2,r3
 7473 007c 3B6A     	 ldr r3,[r7,#32]
 7474 007e 9A66     	 str r2,[r3,#104]
4738:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7475              	 .loc 1 4738 0
 7476 0080 24E0     	 b .L498
 7477              	.L495:
4739:../Dave/Generated/FREERTOS/tasks.c **** 
4740:../Dave/Generated/FREERTOS/tasks.c **** 				case eIncrement	:
4741:../Dave/Generated/FREERTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7478              	 .loc 1 4741 0
 7479 0082 3B6A     	 ldr r3,[r7,#32]
 7480 0084 9B6E     	 ldr r3,[r3,#104]
 7481 0086 5A1C     	 adds r2,r3,#1
 7482 0088 3B6A     	 ldr r3,[r7,#32]
 7483 008a 9A66     	 str r2,[r3,#104]
4742:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7484              	 .loc 1 4742 0
 7485 008c 1EE0     	 b .L498
 7486              	.L496:
4743:../Dave/Generated/FREERTOS/tasks.c **** 
4744:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4745:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7487              	 .loc 1 4745 0
 7488 008e 3B6A     	 ldr r3,[r7,#32]
 7489 0090 BA68     	 ldr r2,[r7,#8]
 7490 0092 9A66     	 str r2,[r3,#104]
4746:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7491              	 .loc 1 4746 0
 7492 0094 1AE0     	 b .L498
 7493              	.L497:
4747:../Dave/Generated/FREERTOS/tasks.c **** 
4748:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4749:../Dave/Generated/FREERTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7494              	 .loc 1 4749 0
 7495 0096 FB7F     	 ldrb r3,[r7,#31]
 7496 0098 022B     	 cmp r3,#2
 7497 009a 03D0     	 beq .L499
4750:../Dave/Generated/FREERTOS/tasks.c **** 					{
4751:../Dave/Generated/FREERTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7498              	 .loc 1 4751 0
 7499 009c 3B6A     	 ldr r3,[r7,#32]
 7500 009e BA68     	 ldr r2,[r7,#8]
 7501 00a0 9A66     	 str r2,[r3,#104]
4752:../Dave/Generated/FREERTOS/tasks.c **** 					}
4753:../Dave/Generated/FREERTOS/tasks.c **** 					else
4754:../Dave/Generated/FREERTOS/tasks.c **** 					{
4755:../Dave/Generated/FREERTOS/tasks.c **** 						/* The value could not be written to the task. */
4756:../Dave/Generated/FREERTOS/tasks.c **** 						xReturn = pdFAIL;
4757:../Dave/Generated/FREERTOS/tasks.c **** 					}
4758:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7502              	 .loc 1 4758 0
 7503 00a2 13E0     	 b .L498
 7504              	.L499:
4756:../Dave/Generated/FREERTOS/tasks.c **** 					}
 7505              	 .loc 1 4756 0
 7506 00a4 0023     	 movs r3,#0
 7507 00a6 7B62     	 str r3,[r7,#36]
 7508              	 .loc 1 4758 0
 7509 00a8 10E0     	 b .L498
 7510              	.L491:
4759:../Dave/Generated/FREERTOS/tasks.c **** 
4760:../Dave/Generated/FREERTOS/tasks.c **** 				case eNoAction:
4761:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task is being notified without its notify value being
4762:../Dave/Generated/FREERTOS/tasks.c **** 					updated. */
4763:../Dave/Generated/FREERTOS/tasks.c **** 					break;
4764:../Dave/Generated/FREERTOS/tasks.c **** 
4765:../Dave/Generated/FREERTOS/tasks.c **** 				default:
4766:../Dave/Generated/FREERTOS/tasks.c **** 					/* Should not get here if all enums are handled.
4767:../Dave/Generated/FREERTOS/tasks.c **** 					Artificially force an assert by testing a value the
4768:../Dave/Generated/FREERTOS/tasks.c **** 					compiler can't assume is const. */
4769:../Dave/Generated/FREERTOS/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7511              	 .loc 1 4769 0
 7512 00aa 3B6A     	 ldr r3,[r7,#32]
 7513 00ac 9B6E     	 ldr r3,[r3,#104]
 7514 00ae B3F1FF3F 	 cmp r3,#-1
 7515 00b2 09D0     	 beq .L501
 7516              	.LBB212:
 7517              	.LBB213:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7518              	 .loc 2 195 0 discriminator 1
 7519              	
 7520 00b4 4FF0FC03 	 mov r3,#252
 7521 00b8 83F31188 	 msr basepri,r3
 7522 00bc BFF36F8F 	 isb 
 7523 00c0 BFF34F8F 	 dsb 
 7524              	
 7525              	
 7526              	 .thumb
 7527 00c4 7B61     	 str r3,[r7,#20]
 7528              	.L502:
 7529              	.LBE213:
 7530              	.LBE212:
 7531              	 .loc 1 4769 0 discriminator 2
 7532 00c6 FEE7     	 b .L502
 7533              	.L501:
4770:../Dave/Generated/FREERTOS/tasks.c **** 
4771:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7534              	 .loc 1 4771 0
 7535 00c8 00E0     	 b .L498
 7536              	.L507:
4763:../Dave/Generated/FREERTOS/tasks.c **** 
 7537              	 .loc 1 4763 0
 7538 00ca 00BF     	 nop
 7539              	.L498:
4772:../Dave/Generated/FREERTOS/tasks.c **** 			}
4773:../Dave/Generated/FREERTOS/tasks.c **** 
4774:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY();
4775:../Dave/Generated/FREERTOS/tasks.c **** 
4776:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4777:../Dave/Generated/FREERTOS/tasks.c **** 			notification then unblock it now. */
4778:../Dave/Generated/FREERTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7540              	 .loc 1 4778 0
 7541 00cc FB7F     	 ldrb r3,[r7,#31]
 7542 00ce 012B     	 cmp r3,#1
 7543 00d0 3AD1     	 bne .L503
4779:../Dave/Generated/FREERTOS/tasks.c **** 			{
4780:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7544              	 .loc 1 4780 0
 7545 00d2 3B6A     	 ldr r3,[r7,#32]
 7546 00d4 0433     	 adds r3,r3,#4
 7547 00d6 1846     	 mov r0,r3
 7548 00d8 FFF7FEFF 	 bl uxListRemove
4781:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7549              	 .loc 1 4781 0
 7550 00dc 3B6A     	 ldr r3,[r7,#32]
 7551 00de DB6A     	 ldr r3,[r3,#44]
 7552 00e0 1A46     	 mov r2,r3
 7553 00e2 0123     	 movs r3,#1
 7554 00e4 03FA02F2 	 lsl r2,r3,r2
 7555 00e8 1B4B     	 ldr r3,.L508
 7556 00ea 1B68     	 ldr r3,[r3]
 7557 00ec 1343     	 orrs r3,r3,r2
 7558 00ee 1A4A     	 ldr r2,.L508
 7559 00f0 1360     	 str r3,[r2]
 7560 00f2 3B6A     	 ldr r3,[r7,#32]
 7561 00f4 DA6A     	 ldr r2,[r3,#44]
 7562 00f6 1346     	 mov r3,r2
 7563 00f8 9B00     	 lsls r3,r3,#2
 7564 00fa 1344     	 add r3,r3,r2
 7565 00fc 9B00     	 lsls r3,r3,#2
 7566 00fe 174A     	 ldr r2,.L508+4
 7567 0100 1A44     	 add r2,r2,r3
 7568 0102 3B6A     	 ldr r3,[r7,#32]
 7569 0104 0433     	 adds r3,r3,#4
 7570 0106 1046     	 mov r0,r2
 7571 0108 1946     	 mov r1,r3
 7572 010a FFF7FEFF 	 bl vListInsertEnd
4782:../Dave/Generated/FREERTOS/tasks.c **** 
4783:../Dave/Generated/FREERTOS/tasks.c **** 				/* The task should not have been on an event list. */
4784:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7573              	 .loc 1 4784 0
 7574 010e 3B6A     	 ldr r3,[r7,#32]
 7575 0110 9B6A     	 ldr r3,[r3,#40]
 7576 0112 002B     	 cmp r3,#0
 7577 0114 09D0     	 beq .L504
 7578              	.LBB214:
 7579              	.LBB215:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7580              	 .loc 2 195 0 discriminator 1
 7581              	
 7582 0116 4FF0FC03 	 mov r3,#252
 7583 011a 83F31188 	 msr basepri,r3
 7584 011e BFF36F8F 	 isb 
 7585 0122 BFF34F8F 	 dsb 
 7586              	
 7587              	
 7588              	 .thumb
 7589 0126 3B61     	 str r3,[r7,#16]
 7590              	.L505:
 7591              	.LBE215:
 7592              	.LBE214:
 7593              	 .loc 1 4784 0 discriminator 3
 7594 0128 FEE7     	 b .L505
 7595              	.L504:
4785:../Dave/Generated/FREERTOS/tasks.c **** 
4786:../Dave/Generated/FREERTOS/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4787:../Dave/Generated/FREERTOS/tasks.c **** 				{
4788:../Dave/Generated/FREERTOS/tasks.c **** 					/* If a task is blocked waiting for a notification then
4789:../Dave/Generated/FREERTOS/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4790:../Dave/Generated/FREERTOS/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4791:../Dave/Generated/FREERTOS/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4792:../Dave/Generated/FREERTOS/tasks.c **** 					because it will automatically get reset to a new value when
4793:../Dave/Generated/FREERTOS/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4794:../Dave/Generated/FREERTOS/tasks.c **** 					tickless idling is used it might be more important to enter
4795:../Dave/Generated/FREERTOS/tasks.c **** 					sleep mode at the earliest possible time - so reset
4796:../Dave/Generated/FREERTOS/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4797:../Dave/Generated/FREERTOS/tasks.c **** 					earliest possible time. */
4798:../Dave/Generated/FREERTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
4799:../Dave/Generated/FREERTOS/tasks.c **** 				}
4800:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
4801:../Dave/Generated/FREERTOS/tasks.c **** 
4802:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7596              	 .loc 1 4802 0
 7597 012a 3B6A     	 ldr r3,[r7,#32]
 7598 012c DA6A     	 ldr r2,[r3,#44]
 7599 012e 0C4B     	 ldr r3,.L508+8
 7600 0130 1B68     	 ldr r3,[r3]
 7601 0132 DB6A     	 ldr r3,[r3,#44]
 7602 0134 9A42     	 cmp r2,r3
 7603 0136 07D9     	 bls .L503
4803:../Dave/Generated/FREERTOS/tasks.c **** 				{
4804:../Dave/Generated/FREERTOS/tasks.c **** 					/* The notified task has a priority above the currently
4805:../Dave/Generated/FREERTOS/tasks.c **** 					executing task so a yield is required. */
4806:../Dave/Generated/FREERTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 7604              	 .loc 1 4806 0
 7605 0138 0A4B     	 ldr r3,.L508+12
 7606 013a 4FF08052 	 mov r2,#268435456
 7607 013e 1A60     	 str r2,[r3]
 7608              	
 7609 0140 BFF34F8F 	 dsb
 7610              	
 7611              	
 7612 0144 BFF36F8F 	 isb
 7613              	
 7614              	 .thumb
 7615              	.L503:
4807:../Dave/Generated/FREERTOS/tasks.c **** 				}
4808:../Dave/Generated/FREERTOS/tasks.c **** 				else
4809:../Dave/Generated/FREERTOS/tasks.c **** 				{
4810:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4811:../Dave/Generated/FREERTOS/tasks.c **** 				}
4812:../Dave/Generated/FREERTOS/tasks.c **** 			}
4813:../Dave/Generated/FREERTOS/tasks.c **** 			else
4814:../Dave/Generated/FREERTOS/tasks.c **** 			{
4815:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4816:../Dave/Generated/FREERTOS/tasks.c **** 			}
4817:../Dave/Generated/FREERTOS/tasks.c **** 		}
4818:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 7616              	 .loc 1 4818 0
 7617 0148 FFF7FEFF 	 bl vPortExitCritical
4819:../Dave/Generated/FREERTOS/tasks.c **** 
4820:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 7618              	 .loc 1 4820 0
 7619 014c 7B6A     	 ldr r3,[r7,#36]
4821:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7620              	 .loc 1 4821 0
 7621 014e 1846     	 mov r0,r3
 7622 0150 2837     	 adds r7,r7,#40
 7623              	.LCFI323:
 7624              	 .cfi_def_cfa_offset 8
 7625 0152 BD46     	 mov sp,r7
 7626              	.LCFI324:
 7627              	 .cfi_def_cfa_register 13
 7628              	 
 7629 0154 80BD     	 pop {r7,pc}
 7630              	.L509:
 7631 0156 00BF     	 .align 2
 7632              	.L508:
 7633 0158 00000000 	 .word uxTopReadyPriority
 7634 015c 00000000 	 .word pxReadyTasksLists
 7635 0160 00000000 	 .word pxCurrentTCB
 7636 0164 04ED00E0 	 .word -536810236
 7637              	 .cfi_endproc
 7638              	.LFE199:
 7640              	 .section .text.xTaskGenericNotifyFromISR,"ax",%progbits
 7641              	 .align 2
 7642              	 .global xTaskGenericNotifyFromISR
 7643              	 .thumb
 7644              	 .thumb_func
 7646              	xTaskGenericNotifyFromISR:
 7647              	.LFB200:
4822:../Dave/Generated/FREERTOS/tasks.c **** 
4823:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4824:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4825:../Dave/Generated/FREERTOS/tasks.c **** 
4826:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4827:../Dave/Generated/FREERTOS/tasks.c **** 
4828:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4829:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7648              	 .loc 1 4829 0
 7649              	 .cfi_startproc
 7650              	 
 7651              	 
 7652 0000 80B5     	 push {r7,lr}
 7653              	.LCFI325:
 7654              	 .cfi_def_cfa_offset 8
 7655              	 .cfi_offset 7,-8
 7656              	 .cfi_offset 14,-4
 7657 0002 8EB0     	 sub sp,sp,#56
 7658              	.LCFI326:
 7659              	 .cfi_def_cfa_offset 64
 7660 0004 00AF     	 add r7,sp,#0
 7661              	.LCFI327:
 7662              	 .cfi_def_cfa_register 7
 7663 0006 F860     	 str r0,[r7,#12]
 7664 0008 B960     	 str r1,[r7,#8]
 7665 000a 3B60     	 str r3,[r7]
 7666 000c 1346     	 mov r3,r2
 7667 000e FB71     	 strb r3,[r7,#7]
4830:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
4831:../Dave/Generated/FREERTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4832:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7668              	 .loc 1 4832 0
 7669 0010 0123     	 movs r3,#1
 7670 0012 7B63     	 str r3,[r7,#52]
4833:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4834:../Dave/Generated/FREERTOS/tasks.c **** 
4835:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToNotify );
 7671              	 .loc 1 4835 0
 7672 0014 FB68     	 ldr r3,[r7,#12]
 7673 0016 002B     	 cmp r3,#0
 7674 0018 09D1     	 bne .L511
 7675              	.LBB216:
 7676              	.LBB217:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7677              	 .loc 2 195 0 discriminator 1
 7678              	
 7679 001a 4FF0FC03 	 mov r3,#252
 7680 001e 83F31188 	 msr basepri,r3
 7681 0022 BFF36F8F 	 isb 
 7682 0026 BFF34F8F 	 dsb 
 7683              	
 7684              	
 7685              	 .thumb
 7686 002a 7B62     	 str r3,[r7,#36]
 7687              	.L512:
 7688              	.LBE217:
 7689              	.LBE216:
 7690              	 .loc 1 4835 0 discriminator 1
 7691 002c FEE7     	 b .L512
 7692              	.L511:
4836:../Dave/Generated/FREERTOS/tasks.c **** 
4837:../Dave/Generated/FREERTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4838:../Dave/Generated/FREERTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4839:../Dave/Generated/FREERTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4840:../Dave/Generated/FREERTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4841:../Dave/Generated/FREERTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4842:../Dave/Generated/FREERTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4843:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4844:../Dave/Generated/FREERTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4845:../Dave/Generated/FREERTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4846:../Dave/Generated/FREERTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4847:../Dave/Generated/FREERTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4848:../Dave/Generated/FREERTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4849:../Dave/Generated/FREERTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4850:../Dave/Generated/FREERTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4851:../Dave/Generated/FREERTOS/tasks.c **** 		provided on the following link:
4852:../Dave/Generated/FREERTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4853:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7693              	 .loc 1 4853 0
 7694 002e FFF7FEFF 	 bl vPortValidateInterruptPriority
4854:../Dave/Generated/FREERTOS/tasks.c **** 
4855:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = xTaskToNotify;
 7695              	 .loc 1 4855 0
 7696 0032 FB68     	 ldr r3,[r7,#12]
 7697 0034 3B63     	 str r3,[r7,#48]
 7698              	.LBB218:
 7699              	.LBB219:
 211:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7700              	 .loc 2 211 0
 7701              	
 7702 0036 EFF31182 	 mrs r2,basepri
 7703 003a 4FF0FC03 	 mov r3,#252
 7704 003e 83F31188 	 msr basepri,r3
 7705 0042 BFF36F8F 	 isb 
 7706 0046 BFF34F8F 	 dsb 
 7707              	
 7708              	
 7709              	 .thumb
 7710 004a 3A62     	 str r2,[r7,#32]
 7711 004c FB61     	 str r3,[r7,#28]
 223:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 7712              	 .loc 2 223 0
 7713 004e 3B6A     	 ldr r3,[r7,#32]
 7714              	.LBE219:
 7715              	.LBE218:
4856:../Dave/Generated/FREERTOS/tasks.c **** 
4857:../Dave/Generated/FREERTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7716              	 .loc 1 4857 0
 7717 0050 FB62     	 str r3,[r7,#44]
4858:../Dave/Generated/FREERTOS/tasks.c **** 		{
4859:../Dave/Generated/FREERTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7718              	 .loc 1 4859 0
 7719 0052 3B68     	 ldr r3,[r7]
 7720 0054 002B     	 cmp r3,#0
 7721 0056 03D0     	 beq .L514
4860:../Dave/Generated/FREERTOS/tasks.c **** 			{
4861:../Dave/Generated/FREERTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7722              	 .loc 1 4861 0
 7723 0058 3B6B     	 ldr r3,[r7,#48]
 7724 005a 9A6E     	 ldr r2,[r3,#104]
 7725 005c 3B68     	 ldr r3,[r7]
 7726 005e 1A60     	 str r2,[r3]
 7727              	.L514:
4862:../Dave/Generated/FREERTOS/tasks.c **** 			}
4863:../Dave/Generated/FREERTOS/tasks.c **** 
4864:../Dave/Generated/FREERTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7728              	 .loc 1 4864 0
 7729 0060 3B6B     	 ldr r3,[r7,#48]
 7730 0062 93F86C30 	 ldrb r3,[r3,#108]
 7731 0066 87F82B30 	 strb r3,[r7,#43]
4865:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7732              	 .loc 1 4865 0
 7733 006a 3B6B     	 ldr r3,[r7,#48]
 7734 006c 0222     	 movs r2,#2
 7735 006e 83F86C20 	 strb r2,[r3,#108]
4866:../Dave/Generated/FREERTOS/tasks.c **** 
4867:../Dave/Generated/FREERTOS/tasks.c **** 			switch( eAction )
 7736              	 .loc 1 4867 0
 7737 0072 FB79     	 ldrb r3,[r7,#7]
 7738 0074 042B     	 cmp r3,#4
 7739 0076 29D8     	 bhi .L515
 7740 0078 01A2     	 adr r2,.L517
 7741 007a 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 7742 007e 00BF     	 .p2align 2
 7743              	.L517:
 7744 0080 ED000000 	 .word .L534+1
 7745 0084 95000000 	 .word .L518+1
 7746 0088 A3000000 	 .word .L519+1
 7747 008c AF000000 	 .word .L520+1
 7748 0090 B7000000 	 .word .L521+1
 7749              	 .p2align 1
 7750              	.L518:
4868:../Dave/Generated/FREERTOS/tasks.c **** 			{
4869:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetBits	:
4870:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7751              	 .loc 1 4870 0
 7752 0094 3B6B     	 ldr r3,[r7,#48]
 7753 0096 9A6E     	 ldr r2,[r3,#104]
 7754 0098 BB68     	 ldr r3,[r7,#8]
 7755 009a 1A43     	 orrs r2,r2,r3
 7756 009c 3B6B     	 ldr r3,[r7,#48]
 7757 009e 9A66     	 str r2,[r3,#104]
4871:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7758              	 .loc 1 4871 0
 7759 00a0 25E0     	 b .L522
 7760              	.L519:
4872:../Dave/Generated/FREERTOS/tasks.c **** 
4873:../Dave/Generated/FREERTOS/tasks.c **** 				case eIncrement	:
4874:../Dave/Generated/FREERTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7761              	 .loc 1 4874 0
 7762 00a2 3B6B     	 ldr r3,[r7,#48]
 7763 00a4 9B6E     	 ldr r3,[r3,#104]
 7764 00a6 5A1C     	 adds r2,r3,#1
 7765 00a8 3B6B     	 ldr r3,[r7,#48]
 7766 00aa 9A66     	 str r2,[r3,#104]
4875:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7767              	 .loc 1 4875 0
 7768 00ac 1FE0     	 b .L522
 7769              	.L520:
4876:../Dave/Generated/FREERTOS/tasks.c **** 
4877:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4878:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7770              	 .loc 1 4878 0
 7771 00ae 3B6B     	 ldr r3,[r7,#48]
 7772 00b0 BA68     	 ldr r2,[r7,#8]
 7773 00b2 9A66     	 str r2,[r3,#104]
4879:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7774              	 .loc 1 4879 0
 7775 00b4 1BE0     	 b .L522
 7776              	.L521:
4880:../Dave/Generated/FREERTOS/tasks.c **** 
4881:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4882:../Dave/Generated/FREERTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7777              	 .loc 1 4882 0
 7778 00b6 97F82B30 	 ldrb r3,[r7,#43]
 7779 00ba 022B     	 cmp r3,#2
 7780 00bc 03D0     	 beq .L523
4883:../Dave/Generated/FREERTOS/tasks.c **** 					{
4884:../Dave/Generated/FREERTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7781              	 .loc 1 4884 0
 7782 00be 3B6B     	 ldr r3,[r7,#48]
 7783 00c0 BA68     	 ldr r2,[r7,#8]
 7784 00c2 9A66     	 str r2,[r3,#104]
4885:../Dave/Generated/FREERTOS/tasks.c **** 					}
4886:../Dave/Generated/FREERTOS/tasks.c **** 					else
4887:../Dave/Generated/FREERTOS/tasks.c **** 					{
4888:../Dave/Generated/FREERTOS/tasks.c **** 						/* The value could not be written to the task. */
4889:../Dave/Generated/FREERTOS/tasks.c **** 						xReturn = pdFAIL;
4890:../Dave/Generated/FREERTOS/tasks.c **** 					}
4891:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7785              	 .loc 1 4891 0
 7786 00c4 13E0     	 b .L522
 7787              	.L523:
4889:../Dave/Generated/FREERTOS/tasks.c **** 					}
 7788              	 .loc 1 4889 0
 7789 00c6 0023     	 movs r3,#0
 7790 00c8 7B63     	 str r3,[r7,#52]
 7791              	 .loc 1 4891 0
 7792 00ca 10E0     	 b .L522
 7793              	.L515:
4892:../Dave/Generated/FREERTOS/tasks.c **** 
4893:../Dave/Generated/FREERTOS/tasks.c **** 				case eNoAction :
4894:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task is being notified without its notify value being
4895:../Dave/Generated/FREERTOS/tasks.c **** 					updated. */
4896:../Dave/Generated/FREERTOS/tasks.c **** 					break;
4897:../Dave/Generated/FREERTOS/tasks.c **** 
4898:../Dave/Generated/FREERTOS/tasks.c **** 				default:
4899:../Dave/Generated/FREERTOS/tasks.c **** 					/* Should not get here if all enums are handled.
4900:../Dave/Generated/FREERTOS/tasks.c **** 					Artificially force an assert by testing a value the
4901:../Dave/Generated/FREERTOS/tasks.c **** 					compiler can't assume is const. */
4902:../Dave/Generated/FREERTOS/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7794              	 .loc 1 4902 0
 7795 00cc 3B6B     	 ldr r3,[r7,#48]
 7796 00ce 9B6E     	 ldr r3,[r3,#104]
 7797 00d0 B3F1FF3F 	 cmp r3,#-1
 7798 00d4 09D0     	 beq .L525
 7799              	.LBB220:
 7800              	.LBB221:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7801              	 .loc 2 195 0 discriminator 1
 7802              	
 7803 00d6 4FF0FC03 	 mov r3,#252
 7804 00da 83F31188 	 msr basepri,r3
 7805 00de BFF36F8F 	 isb 
 7806 00e2 BFF34F8F 	 dsb 
 7807              	
 7808              	
 7809              	 .thumb
 7810 00e6 BB61     	 str r3,[r7,#24]
 7811              	.L526:
 7812              	.LBE221:
 7813              	.LBE220:
 7814              	 .loc 1 4902 0 discriminator 2
 7815 00e8 FEE7     	 b .L526
 7816              	.L525:
4903:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7817              	 .loc 1 4903 0
 7818 00ea 00E0     	 b .L522
 7819              	.L534:
4896:../Dave/Generated/FREERTOS/tasks.c **** 
 7820              	 .loc 1 4896 0
 7821 00ec 00BF     	 nop
 7822              	.L522:
4904:../Dave/Generated/FREERTOS/tasks.c **** 			}
4905:../Dave/Generated/FREERTOS/tasks.c **** 
4906:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4907:../Dave/Generated/FREERTOS/tasks.c **** 
4908:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4909:../Dave/Generated/FREERTOS/tasks.c **** 			notification then unblock it now. */
4910:../Dave/Generated/FREERTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7823              	 .loc 1 4910 0
 7824 00ee 97F82B30 	 ldrb r3,[r7,#43]
 7825 00f2 012B     	 cmp r3,#1
 7826 00f4 46D1     	 bne .L527
4911:../Dave/Generated/FREERTOS/tasks.c **** 			{
4912:../Dave/Generated/FREERTOS/tasks.c **** 				/* The task should not have been on an event list. */
4913:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7827              	 .loc 1 4913 0
 7828 00f6 3B6B     	 ldr r3,[r7,#48]
 7829 00f8 9B6A     	 ldr r3,[r3,#40]
 7830 00fa 002B     	 cmp r3,#0
 7831 00fc 09D0     	 beq .L528
 7832              	.LBB222:
 7833              	.LBB223:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7834              	 .loc 2 195 0 discriminator 1
 7835              	
 7836 00fe 4FF0FC03 	 mov r3,#252
 7837 0102 83F31188 	 msr basepri,r3
 7838 0106 BFF36F8F 	 isb 
 7839 010a BFF34F8F 	 dsb 
 7840              	
 7841              	
 7842              	 .thumb
 7843 010e 7B61     	 str r3,[r7,#20]
 7844              	.L529:
 7845              	.LBE223:
 7846              	.LBE222:
 7847              	 .loc 1 4913 0 discriminator 3
 7848 0110 FEE7     	 b .L529
 7849              	.L528:
4914:../Dave/Generated/FREERTOS/tasks.c **** 
4915:../Dave/Generated/FREERTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7850              	 .loc 1 4915 0
 7851 0112 214B     	 ldr r3,.L535
 7852 0114 1B68     	 ldr r3,[r3]
 7853 0116 002B     	 cmp r3,#0
 7854 0118 1ED1     	 bne .L530
4916:../Dave/Generated/FREERTOS/tasks.c **** 				{
4917:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7855              	 .loc 1 4917 0
 7856 011a 3B6B     	 ldr r3,[r7,#48]
 7857 011c 0433     	 adds r3,r3,#4
 7858 011e 1846     	 mov r0,r3
 7859 0120 FFF7FEFF 	 bl uxListRemove
4918:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7860              	 .loc 1 4918 0
 7861 0124 3B6B     	 ldr r3,[r7,#48]
 7862 0126 DB6A     	 ldr r3,[r3,#44]
 7863 0128 1A46     	 mov r2,r3
 7864 012a 0123     	 movs r3,#1
 7865 012c 03FA02F2 	 lsl r2,r3,r2
 7866 0130 1A4B     	 ldr r3,.L535+4
 7867 0132 1B68     	 ldr r3,[r3]
 7868 0134 1343     	 orrs r3,r3,r2
 7869 0136 194A     	 ldr r2,.L535+4
 7870 0138 1360     	 str r3,[r2]
 7871 013a 3B6B     	 ldr r3,[r7,#48]
 7872 013c DA6A     	 ldr r2,[r3,#44]
 7873 013e 1346     	 mov r3,r2
 7874 0140 9B00     	 lsls r3,r3,#2
 7875 0142 1344     	 add r3,r3,r2
 7876 0144 9B00     	 lsls r3,r3,#2
 7877 0146 164A     	 ldr r2,.L535+8
 7878 0148 1A44     	 add r2,r2,r3
 7879 014a 3B6B     	 ldr r3,[r7,#48]
 7880 014c 0433     	 adds r3,r3,#4
 7881 014e 1046     	 mov r0,r2
 7882 0150 1946     	 mov r1,r3
 7883 0152 FFF7FEFF 	 bl vListInsertEnd
 7884 0156 05E0     	 b .L531
 7885              	.L530:
4919:../Dave/Generated/FREERTOS/tasks.c **** 				}
4920:../Dave/Generated/FREERTOS/tasks.c **** 				else
4921:../Dave/Generated/FREERTOS/tasks.c **** 				{
4922:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4923:../Dave/Generated/FREERTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4924:../Dave/Generated/FREERTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7886              	 .loc 1 4924 0
 7887 0158 3B6B     	 ldr r3,[r7,#48]
 7888 015a 1833     	 adds r3,r3,#24
 7889 015c 1148     	 ldr r0,.L535+12
 7890 015e 1946     	 mov r1,r3
 7891 0160 FFF7FEFF 	 bl vListInsertEnd
 7892              	.L531:
4925:../Dave/Generated/FREERTOS/tasks.c **** 				}
4926:../Dave/Generated/FREERTOS/tasks.c **** 
4927:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7893              	 .loc 1 4927 0
 7894 0164 3B6B     	 ldr r3,[r7,#48]
 7895 0166 DA6A     	 ldr r2,[r3,#44]
 7896 0168 0F4B     	 ldr r3,.L535+16
 7897 016a 1B68     	 ldr r3,[r3]
 7898 016c DB6A     	 ldr r3,[r3,#44]
 7899 016e 9A42     	 cmp r2,r3
 7900 0170 08D9     	 bls .L527
4928:../Dave/Generated/FREERTOS/tasks.c **** 				{
4929:../Dave/Generated/FREERTOS/tasks.c **** 					/* The notified task has a priority above the currently
4930:../Dave/Generated/FREERTOS/tasks.c **** 					executing task so a yield is required. */
4931:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7901              	 .loc 1 4931 0
 7902 0172 3B6C     	 ldr r3,[r7,#64]
 7903 0174 002B     	 cmp r3,#0
 7904 0176 02D0     	 beq .L532
4932:../Dave/Generated/FREERTOS/tasks.c **** 					{
4933:../Dave/Generated/FREERTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7905              	 .loc 1 4933 0
 7906 0178 3B6C     	 ldr r3,[r7,#64]
 7907 017a 0122     	 movs r2,#1
 7908 017c 1A60     	 str r2,[r3]
 7909              	.L532:
4934:../Dave/Generated/FREERTOS/tasks.c **** 					}
4935:../Dave/Generated/FREERTOS/tasks.c **** 
4936:../Dave/Generated/FREERTOS/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4937:../Dave/Generated/FREERTOS/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4938:../Dave/Generated/FREERTOS/tasks.c **** 					safe FreeRTOS function. */
4939:../Dave/Generated/FREERTOS/tasks.c **** 					xYieldPending = pdTRUE;
 7910              	 .loc 1 4939 0
 7911 017e 0B4B     	 ldr r3,.L535+20
 7912 0180 0122     	 movs r2,#1
 7913 0182 1A60     	 str r2,[r3]
 7914              	.L527:
 7915 0184 FB6A     	 ldr r3,[r7,#44]
 7916 0186 3B61     	 str r3,[r7,#16]
 7917              	.LBB224:
 7918              	.LBB225:
 7919              	 .loc 2 229 0
 7920 0188 3B69     	 ldr r3,[r7,#16]
 7921              	
 7922 018a 83F31188 	 msr basepri,r3
 7923              	
 7924              	 .thumb
 7925              	.LBE225:
 7926              	.LBE224:
4940:../Dave/Generated/FREERTOS/tasks.c **** 				}
4941:../Dave/Generated/FREERTOS/tasks.c **** 				else
4942:../Dave/Generated/FREERTOS/tasks.c **** 				{
4943:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4944:../Dave/Generated/FREERTOS/tasks.c **** 				}
4945:../Dave/Generated/FREERTOS/tasks.c **** 			}
4946:../Dave/Generated/FREERTOS/tasks.c **** 		}
4947:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4948:../Dave/Generated/FREERTOS/tasks.c **** 
4949:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 7927              	 .loc 1 4949 0
 7928 018e 7B6B     	 ldr r3,[r7,#52]
4950:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7929              	 .loc 1 4950 0
 7930 0190 1846     	 mov r0,r3
 7931 0192 3837     	 adds r7,r7,#56
 7932              	.LCFI328:
 7933              	 .cfi_def_cfa_offset 8
 7934 0194 BD46     	 mov sp,r7
 7935              	.LCFI329:
 7936              	 .cfi_def_cfa_register 13
 7937              	 
 7938 0196 80BD     	 pop {r7,pc}
 7939              	.L536:
 7940              	 .align 2
 7941              	.L535:
 7942 0198 00000000 	 .word uxSchedulerSuspended
 7943 019c 00000000 	 .word uxTopReadyPriority
 7944 01a0 00000000 	 .word pxReadyTasksLists
 7945 01a4 00000000 	 .word xPendingReadyList
 7946 01a8 00000000 	 .word pxCurrentTCB
 7947 01ac 00000000 	 .word xYieldPending
 7948              	 .cfi_endproc
 7949              	.LFE200:
 7951              	 .section .text.vTaskNotifyGiveFromISR,"ax",%progbits
 7952              	 .align 2
 7953              	 .global vTaskNotifyGiveFromISR
 7954              	 .thumb
 7955              	 .thumb_func
 7957              	vTaskNotifyGiveFromISR:
 7958              	.LFB201:
4951:../Dave/Generated/FREERTOS/tasks.c **** 
4952:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4953:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4954:../Dave/Generated/FREERTOS/tasks.c **** 
4955:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4956:../Dave/Generated/FREERTOS/tasks.c **** 
4957:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4958:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7959              	 .loc 1 4958 0
 7960              	 .cfi_startproc
 7961              	 
 7962              	 
 7963 0000 80B5     	 push {r7,lr}
 7964              	.LCFI330:
 7965              	 .cfi_def_cfa_offset 8
 7966              	 .cfi_offset 7,-8
 7967              	 .cfi_offset 14,-4
 7968 0002 8AB0     	 sub sp,sp,#40
 7969              	.LCFI331:
 7970              	 .cfi_def_cfa_offset 48
 7971 0004 00AF     	 add r7,sp,#0
 7972              	.LCFI332:
 7973              	 .cfi_def_cfa_register 7
 7974 0006 7860     	 str r0,[r7,#4]
 7975 0008 3960     	 str r1,[r7]
4959:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
4960:../Dave/Generated/FREERTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4961:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4962:../Dave/Generated/FREERTOS/tasks.c **** 
4963:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToNotify );
 7976              	 .loc 1 4963 0
 7977 000a 7B68     	 ldr r3,[r7,#4]
 7978 000c 002B     	 cmp r3,#0
 7979 000e 09D1     	 bne .L538
 7980              	.LBB226:
 7981              	.LBB227:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7982              	 .loc 2 195 0 discriminator 1
 7983              	
 7984 0010 4FF0FC03 	 mov r3,#252
 7985 0014 83F31188 	 msr basepri,r3
 7986 0018 BFF36F8F 	 isb 
 7987 001c BFF34F8F 	 dsb 
 7988              	
 7989              	
 7990              	 .thumb
 7991 0020 BB61     	 str r3,[r7,#24]
 7992              	.L539:
 7993              	.LBE227:
 7994              	.LBE226:
 7995              	 .loc 1 4963 0 discriminator 1
 7996 0022 FEE7     	 b .L539
 7997              	.L538:
4964:../Dave/Generated/FREERTOS/tasks.c **** 
4965:../Dave/Generated/FREERTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4966:../Dave/Generated/FREERTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4967:../Dave/Generated/FREERTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4968:../Dave/Generated/FREERTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4969:../Dave/Generated/FREERTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4970:../Dave/Generated/FREERTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4971:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4972:../Dave/Generated/FREERTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4973:../Dave/Generated/FREERTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4974:../Dave/Generated/FREERTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4975:../Dave/Generated/FREERTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4976:../Dave/Generated/FREERTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4977:../Dave/Generated/FREERTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4978:../Dave/Generated/FREERTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4979:../Dave/Generated/FREERTOS/tasks.c **** 		provided on the following link:
4980:../Dave/Generated/FREERTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4981:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7998              	 .loc 1 4981 0
 7999 0024 FFF7FEFF 	 bl vPortValidateInterruptPriority
4982:../Dave/Generated/FREERTOS/tasks.c **** 
4983:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = xTaskToNotify;
 8000              	 .loc 1 4983 0
 8001 0028 7B68     	 ldr r3,[r7,#4]
 8002 002a 7B62     	 str r3,[r7,#36]
 8003              	.LBB228:
 8004              	.LBB229:
 211:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 8005              	 .loc 2 211 0
 8006              	
 8007 002c EFF31182 	 mrs r2,basepri
 8008 0030 4FF0FC03 	 mov r3,#252
 8009 0034 83F31188 	 msr basepri,r3
 8010 0038 BFF36F8F 	 isb 
 8011 003c BFF34F8F 	 dsb 
 8012              	
 8013              	
 8014              	 .thumb
 8015 0040 7A61     	 str r2,[r7,#20]
 8016 0042 3B61     	 str r3,[r7,#16]
 223:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 8017              	 .loc 2 223 0
 8018 0044 7B69     	 ldr r3,[r7,#20]
 8019              	.LBE229:
 8020              	.LBE228:
4984:../Dave/Generated/FREERTOS/tasks.c **** 
4985:../Dave/Generated/FREERTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8021              	 .loc 1 4985 0
 8022 0046 3B62     	 str r3,[r7,#32]
4986:../Dave/Generated/FREERTOS/tasks.c **** 		{
4987:../Dave/Generated/FREERTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8023              	 .loc 1 4987 0
 8024 0048 7B6A     	 ldr r3,[r7,#36]
 8025 004a 93F86C30 	 ldrb r3,[r3,#108]
 8026 004e FB77     	 strb r3,[r7,#31]
4988:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8027              	 .loc 1 4988 0
 8028 0050 7B6A     	 ldr r3,[r7,#36]
 8029 0052 0222     	 movs r2,#2
 8030 0054 83F86C20 	 strb r2,[r3,#108]
4989:../Dave/Generated/FREERTOS/tasks.c **** 
4990:../Dave/Generated/FREERTOS/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4991:../Dave/Generated/FREERTOS/tasks.c **** 			semaphore. */
4992:../Dave/Generated/FREERTOS/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 8031              	 .loc 1 4992 0
 8032 0058 7B6A     	 ldr r3,[r7,#36]
 8033 005a 9B6E     	 ldr r3,[r3,#104]
 8034 005c 5A1C     	 adds r2,r3,#1
 8035 005e 7B6A     	 ldr r3,[r7,#36]
 8036 0060 9A66     	 str r2,[r3,#104]
4993:../Dave/Generated/FREERTOS/tasks.c **** 
4994:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4995:../Dave/Generated/FREERTOS/tasks.c **** 
4996:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4997:../Dave/Generated/FREERTOS/tasks.c **** 			notification then unblock it now. */
4998:../Dave/Generated/FREERTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8037              	 .loc 1 4998 0
 8038 0062 FB7F     	 ldrb r3,[r7,#31]
 8039 0064 012B     	 cmp r3,#1
 8040 0066 46D1     	 bne .L541
4999:../Dave/Generated/FREERTOS/tasks.c **** 			{
5000:../Dave/Generated/FREERTOS/tasks.c **** 				/* The task should not have been on an event list. */
5001:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8041              	 .loc 1 5001 0
 8042 0068 7B6A     	 ldr r3,[r7,#36]
 8043 006a 9B6A     	 ldr r3,[r3,#40]
 8044 006c 002B     	 cmp r3,#0
 8045 006e 09D0     	 beq .L542
 8046              	.LBB230:
 8047              	.LBB231:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 8048              	 .loc 2 195 0 discriminator 1
 8049              	
 8050 0070 4FF0FC03 	 mov r3,#252
 8051 0074 83F31188 	 msr basepri,r3
 8052 0078 BFF36F8F 	 isb 
 8053 007c BFF34F8F 	 dsb 
 8054              	
 8055              	
 8056              	 .thumb
 8057 0080 FB60     	 str r3,[r7,#12]
 8058              	.L543:
 8059              	.LBE231:
 8060              	.LBE230:
 8061              	 .loc 1 5001 0 discriminator 2
 8062 0082 FEE7     	 b .L543
 8063              	.L542:
5002:../Dave/Generated/FREERTOS/tasks.c **** 
5003:../Dave/Generated/FREERTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8064              	 .loc 1 5003 0
 8065 0084 204B     	 ldr r3,.L547
 8066 0086 1B68     	 ldr r3,[r3]
 8067 0088 002B     	 cmp r3,#0
 8068 008a 1ED1     	 bne .L544
5004:../Dave/Generated/FREERTOS/tasks.c **** 				{
5005:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8069              	 .loc 1 5005 0
 8070 008c 7B6A     	 ldr r3,[r7,#36]
 8071 008e 0433     	 adds r3,r3,#4
 8072 0090 1846     	 mov r0,r3
 8073 0092 FFF7FEFF 	 bl uxListRemove
5006:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 8074              	 .loc 1 5006 0
 8075 0096 7B6A     	 ldr r3,[r7,#36]
 8076 0098 DB6A     	 ldr r3,[r3,#44]
 8077 009a 1A46     	 mov r2,r3
 8078 009c 0123     	 movs r3,#1
 8079 009e 03FA02F2 	 lsl r2,r3,r2
 8080 00a2 1A4B     	 ldr r3,.L547+4
 8081 00a4 1B68     	 ldr r3,[r3]
 8082 00a6 1343     	 orrs r3,r3,r2
 8083 00a8 184A     	 ldr r2,.L547+4
 8084 00aa 1360     	 str r3,[r2]
 8085 00ac 7B6A     	 ldr r3,[r7,#36]
 8086 00ae DA6A     	 ldr r2,[r3,#44]
 8087 00b0 1346     	 mov r3,r2
 8088 00b2 9B00     	 lsls r3,r3,#2
 8089 00b4 1344     	 add r3,r3,r2
 8090 00b6 9B00     	 lsls r3,r3,#2
 8091 00b8 154A     	 ldr r2,.L547+8
 8092 00ba 1A44     	 add r2,r2,r3
 8093 00bc 7B6A     	 ldr r3,[r7,#36]
 8094 00be 0433     	 adds r3,r3,#4
 8095 00c0 1046     	 mov r0,r2
 8096 00c2 1946     	 mov r1,r3
 8097 00c4 FFF7FEFF 	 bl vListInsertEnd
 8098 00c8 05E0     	 b .L545
 8099              	.L544:
5007:../Dave/Generated/FREERTOS/tasks.c **** 				}
5008:../Dave/Generated/FREERTOS/tasks.c **** 				else
5009:../Dave/Generated/FREERTOS/tasks.c **** 				{
5010:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5011:../Dave/Generated/FREERTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
5012:../Dave/Generated/FREERTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8100              	 .loc 1 5012 0
 8101 00ca 7B6A     	 ldr r3,[r7,#36]
 8102 00cc 1833     	 adds r3,r3,#24
 8103 00ce 1148     	 ldr r0,.L547+12
 8104 00d0 1946     	 mov r1,r3
 8105 00d2 FFF7FEFF 	 bl vListInsertEnd
 8106              	.L545:
5013:../Dave/Generated/FREERTOS/tasks.c **** 				}
5014:../Dave/Generated/FREERTOS/tasks.c **** 
5015:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8107              	 .loc 1 5015 0
 8108 00d6 7B6A     	 ldr r3,[r7,#36]
 8109 00d8 DA6A     	 ldr r2,[r3,#44]
 8110 00da 0F4B     	 ldr r3,.L547+16
 8111 00dc 1B68     	 ldr r3,[r3]
 8112 00de DB6A     	 ldr r3,[r3,#44]
 8113 00e0 9A42     	 cmp r2,r3
 8114 00e2 08D9     	 bls .L541
5016:../Dave/Generated/FREERTOS/tasks.c **** 				{
5017:../Dave/Generated/FREERTOS/tasks.c **** 					/* The notified task has a priority above the currently
5018:../Dave/Generated/FREERTOS/tasks.c **** 					executing task so a yield is required. */
5019:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 8115              	 .loc 1 5019 0
 8116 00e4 3B68     	 ldr r3,[r7]
 8117 00e6 002B     	 cmp r3,#0
 8118 00e8 02D0     	 beq .L546
5020:../Dave/Generated/FREERTOS/tasks.c **** 					{
5021:../Dave/Generated/FREERTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 8119              	 .loc 1 5021 0
 8120 00ea 3B68     	 ldr r3,[r7]
 8121 00ec 0122     	 movs r2,#1
 8122 00ee 1A60     	 str r2,[r3]
 8123              	.L546:
5022:../Dave/Generated/FREERTOS/tasks.c **** 					}
5023:../Dave/Generated/FREERTOS/tasks.c **** 
5024:../Dave/Generated/FREERTOS/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5025:../Dave/Generated/FREERTOS/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5026:../Dave/Generated/FREERTOS/tasks.c **** 					safe FreeRTOS function. */
5027:../Dave/Generated/FREERTOS/tasks.c **** 					xYieldPending = pdTRUE;
 8124              	 .loc 1 5027 0
 8125 00f0 0A4B     	 ldr r3,.L547+20
 8126 00f2 0122     	 movs r2,#1
 8127 00f4 1A60     	 str r2,[r3]
 8128              	.L541:
 8129 00f6 3B6A     	 ldr r3,[r7,#32]
 8130 00f8 BB60     	 str r3,[r7,#8]
 8131              	.LBB232:
 8132              	.LBB233:
 8133              	 .loc 2 229 0
 8134 00fa BB68     	 ldr r3,[r7,#8]
 8135              	
 8136 00fc 83F31188 	 msr basepri,r3
 8137              	
 8138              	 .thumb
 8139              	.LBE233:
 8140              	.LBE232:
5028:../Dave/Generated/FREERTOS/tasks.c **** 				}
5029:../Dave/Generated/FREERTOS/tasks.c **** 				else
5030:../Dave/Generated/FREERTOS/tasks.c **** 				{
5031:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5032:../Dave/Generated/FREERTOS/tasks.c **** 				}
5033:../Dave/Generated/FREERTOS/tasks.c **** 			}
5034:../Dave/Generated/FREERTOS/tasks.c **** 		}
5035:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5036:../Dave/Generated/FREERTOS/tasks.c **** 	}
 8141              	 .loc 1 5036 0
 8142 0100 2837     	 adds r7,r7,#40
 8143              	.LCFI333:
 8144              	 .cfi_def_cfa_offset 8
 8145 0102 BD46     	 mov sp,r7
 8146              	.LCFI334:
 8147              	 .cfi_def_cfa_register 13
 8148              	 
 8149 0104 80BD     	 pop {r7,pc}
 8150              	.L548:
 8151 0106 00BF     	 .align 2
 8152              	.L547:
 8153 0108 00000000 	 .word uxSchedulerSuspended
 8154 010c 00000000 	 .word uxTopReadyPriority
 8155 0110 00000000 	 .word pxReadyTasksLists
 8156 0114 00000000 	 .word xPendingReadyList
 8157 0118 00000000 	 .word pxCurrentTCB
 8158 011c 00000000 	 .word xYieldPending
 8159              	 .cfi_endproc
 8160              	.LFE201:
 8162              	 .section .text.xTaskNotifyStateClear,"ax",%progbits
 8163              	 .align 2
 8164              	 .global xTaskNotifyStateClear
 8165              	 .thumb
 8166              	 .thumb_func
 8168              	xTaskNotifyStateClear:
 8169              	.LFB202:
5037:../Dave/Generated/FREERTOS/tasks.c **** 
5038:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5039:../Dave/Generated/FREERTOS/tasks.c **** 
5040:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5041:../Dave/Generated/FREERTOS/tasks.c **** 
5042:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5043:../Dave/Generated/FREERTOS/tasks.c **** 
5044:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5045:../Dave/Generated/FREERTOS/tasks.c **** 	{
 8170              	 .loc 1 5045 0
 8171              	 .cfi_startproc
 8172              	 
 8173              	 
 8174 0000 80B5     	 push {r7,lr}
 8175              	.LCFI335:
 8176              	 .cfi_def_cfa_offset 8
 8177              	 .cfi_offset 7,-8
 8178              	 .cfi_offset 14,-4
 8179 0002 84B0     	 sub sp,sp,#16
 8180              	.LCFI336:
 8181              	 .cfi_def_cfa_offset 24
 8182 0004 00AF     	 add r7,sp,#0
 8183              	.LCFI337:
 8184              	 .cfi_def_cfa_register 7
 8185 0006 7860     	 str r0,[r7,#4]
5046:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
5047:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
5048:../Dave/Generated/FREERTOS/tasks.c **** 
5049:../Dave/Generated/FREERTOS/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5050:../Dave/Generated/FREERTOS/tasks.c **** 		its notification state cleared. */
5051:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 8186              	 .loc 1 5051 0
 8187 0008 7B68     	 ldr r3,[r7,#4]
 8188 000a 002B     	 cmp r3,#0
 8189 000c 02D1     	 bne .L550
 8190              	 .loc 1 5051 0 is_stmt 0 discriminator 1
 8191 000e 0E4B     	 ldr r3,.L555
 8192 0010 1B68     	 ldr r3,[r3]
 8193 0012 00E0     	 b .L551
 8194              	.L550:
 8195              	 .loc 1 5051 0 discriminator 2
 8196 0014 7B68     	 ldr r3,[r7,#4]
 8197              	.L551:
 8198              	 .loc 1 5051 0 discriminator 4
 8199 0016 BB60     	 str r3,[r7,#8]
5052:../Dave/Generated/FREERTOS/tasks.c **** 
5053:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 8200              	 .loc 1 5053 0 is_stmt 1 discriminator 4
 8201 0018 FFF7FEFF 	 bl vPortEnterCritical
5054:../Dave/Generated/FREERTOS/tasks.c **** 		{
5055:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8202              	 .loc 1 5055 0 discriminator 4
 8203 001c BB68     	 ldr r3,[r7,#8]
 8204 001e 93F86C30 	 ldrb r3,[r3,#108]
 8205 0022 DBB2     	 uxtb r3,r3
 8206 0024 022B     	 cmp r3,#2
 8207 0026 06D1     	 bne .L552
5056:../Dave/Generated/FREERTOS/tasks.c **** 			{
5057:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8208              	 .loc 1 5057 0
 8209 0028 BB68     	 ldr r3,[r7,#8]
 8210 002a 0022     	 movs r2,#0
 8211 002c 83F86C20 	 strb r2,[r3,#108]
5058:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdPASS;
 8212              	 .loc 1 5058 0
 8213 0030 0123     	 movs r3,#1
 8214 0032 FB60     	 str r3,[r7,#12]
 8215 0034 01E0     	 b .L553
 8216              	.L552:
5059:../Dave/Generated/FREERTOS/tasks.c **** 			}
5060:../Dave/Generated/FREERTOS/tasks.c **** 			else
5061:../Dave/Generated/FREERTOS/tasks.c **** 			{
5062:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdFAIL;
 8217              	 .loc 1 5062 0
 8218 0036 0023     	 movs r3,#0
 8219 0038 FB60     	 str r3,[r7,#12]
 8220              	.L553:
5063:../Dave/Generated/FREERTOS/tasks.c **** 			}
5064:../Dave/Generated/FREERTOS/tasks.c **** 		}
5065:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 8221              	 .loc 1 5065 0
 8222 003a FFF7FEFF 	 bl vPortExitCritical
5066:../Dave/Generated/FREERTOS/tasks.c **** 
5067:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 8223              	 .loc 1 5067 0
 8224 003e FB68     	 ldr r3,[r7,#12]
5068:../Dave/Generated/FREERTOS/tasks.c **** 	}
 8225              	 .loc 1 5068 0
 8226 0040 1846     	 mov r0,r3
 8227 0042 1037     	 adds r7,r7,#16
 8228              	.LCFI338:
 8229              	 .cfi_def_cfa_offset 8
 8230 0044 BD46     	 mov sp,r7
 8231              	.LCFI339:
 8232              	 .cfi_def_cfa_register 13
 8233              	 
 8234 0046 80BD     	 pop {r7,pc}
 8235              	.L556:
 8236              	 .align 2
 8237              	.L555:
 8238 0048 00000000 	 .word pxCurrentTCB
 8239              	 .cfi_endproc
 8240              	.LFE202:
 8242              	 .section .text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 8243              	 .align 2
 8244              	 .thumb
 8245              	 .thumb_func
 8247              	prvAddCurrentTaskToDelayedList:
 8248              	.LFB203:
5069:../Dave/Generated/FREERTOS/tasks.c **** 
5070:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5071:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5072:../Dave/Generated/FREERTOS/tasks.c **** 
5073:../Dave/Generated/FREERTOS/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5074:../Dave/Generated/FREERTOS/tasks.c **** 	TickType_t xTaskGetIdleRunTimeCounter( void )
5075:../Dave/Generated/FREERTOS/tasks.c **** 	{
5076:../Dave/Generated/FREERTOS/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5077:../Dave/Generated/FREERTOS/tasks.c **** 	}
5078:../Dave/Generated/FREERTOS/tasks.c **** #endif
5079:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5080:../Dave/Generated/FREERTOS/tasks.c **** 
5081:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5082:../Dave/Generated/FREERTOS/tasks.c **** {
 8249              	 .loc 1 5082 0
 8250              	 .cfi_startproc
 8251              	 
 8252              	 
 8253 0000 80B5     	 push {r7,lr}
 8254              	.LCFI340:
 8255              	 .cfi_def_cfa_offset 8
 8256              	 .cfi_offset 7,-8
 8257              	 .cfi_offset 14,-4
 8258 0002 84B0     	 sub sp,sp,#16
 8259              	.LCFI341:
 8260              	 .cfi_def_cfa_offset 24
 8261 0004 00AF     	 add r7,sp,#0
 8262              	.LCFI342:
 8263              	 .cfi_def_cfa_register 7
 8264 0006 7860     	 str r0,[r7,#4]
 8265 0008 3960     	 str r1,[r7]
5083:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTimeToWake;
5084:../Dave/Generated/FREERTOS/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 8266              	 .loc 1 5084 0
 8267 000a 2B4B     	 ldr r3,.L562
 8268 000c 1B68     	 ldr r3,[r3]
 8269 000e FB60     	 str r3,[r7,#12]
5085:../Dave/Generated/FREERTOS/tasks.c **** 
5086:../Dave/Generated/FREERTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5087:../Dave/Generated/FREERTOS/tasks.c **** 	{
5088:../Dave/Generated/FREERTOS/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5089:../Dave/Generated/FREERTOS/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5090:../Dave/Generated/FREERTOS/tasks.c **** 		when the task leaves the Blocked state. */
5091:../Dave/Generated/FREERTOS/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8270              	 .loc 1 5091 0
 8271 0010 2A4B     	 ldr r3,.L562+4
 8272 0012 1B68     	 ldr r3,[r3]
 8273 0014 0022     	 movs r2,#0
 8274 0016 83F86D20 	 strb r2,[r3,#109]
5092:../Dave/Generated/FREERTOS/tasks.c **** 	}
5093:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
5094:../Dave/Generated/FREERTOS/tasks.c **** 
5095:../Dave/Generated/FREERTOS/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5096:../Dave/Generated/FREERTOS/tasks.c **** 	as the same list item is used for both lists. */
5097:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8275              	 .loc 1 5097 0
 8276 001a 284B     	 ldr r3,.L562+4
 8277 001c 1B68     	 ldr r3,[r3]
 8278 001e 0433     	 adds r3,r3,#4
 8279 0020 1846     	 mov r0,r3
 8280 0022 FFF7FEFF 	 bl uxListRemove
 8281 0026 0346     	 mov r3,r0
 8282 0028 002B     	 cmp r3,#0
 8283 002a 0BD1     	 bne .L558
5098:../Dave/Generated/FREERTOS/tasks.c **** 	{
5099:../Dave/Generated/FREERTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5100:../Dave/Generated/FREERTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
5101:../Dave/Generated/FREERTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 8284              	 .loc 1 5101 0
 8285 002c 234B     	 ldr r3,.L562+4
 8286 002e 1B68     	 ldr r3,[r3]
 8287 0030 DB6A     	 ldr r3,[r3,#44]
 8288 0032 1A46     	 mov r2,r3
 8289 0034 0123     	 movs r3,#1
 8290 0036 9340     	 lsls r3,r3,r2
 8291 0038 DA43     	 mvns r2,r3
 8292 003a 214B     	 ldr r3,.L562+8
 8293 003c 1B68     	 ldr r3,[r3]
 8294 003e 1340     	 ands r3,r3,r2
 8295 0040 1F4A     	 ldr r2,.L562+8
 8296 0042 1360     	 str r3,[r2]
 8297              	.L558:
5102:../Dave/Generated/FREERTOS/tasks.c **** 	}
5103:../Dave/Generated/FREERTOS/tasks.c **** 	else
5104:../Dave/Generated/FREERTOS/tasks.c **** 	{
5105:../Dave/Generated/FREERTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5106:../Dave/Generated/FREERTOS/tasks.c **** 	}
5107:../Dave/Generated/FREERTOS/tasks.c **** 
5108:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5109:../Dave/Generated/FREERTOS/tasks.c **** 	{
5110:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8298              	 .loc 1 5110 0
 8299 0044 7B68     	 ldr r3,[r7,#4]
 8300 0046 B3F1FF3F 	 cmp r3,#-1
 8301 004a 0AD1     	 bne .L559
 8302              	 .loc 1 5110 0 is_stmt 0 discriminator 1
 8303 004c 3B68     	 ldr r3,[r7]
 8304 004e 002B     	 cmp r3,#0
 8305 0050 07D0     	 beq .L559
5111:../Dave/Generated/FREERTOS/tasks.c **** 		{
5112:../Dave/Generated/FREERTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5113:../Dave/Generated/FREERTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5114:../Dave/Generated/FREERTOS/tasks.c **** 			indefinitely. */
5115:../Dave/Generated/FREERTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8306              	 .loc 1 5115 0 is_stmt 1
 8307 0052 1A4B     	 ldr r3,.L562+4
 8308 0054 1B68     	 ldr r3,[r3]
 8309 0056 0433     	 adds r3,r3,#4
 8310 0058 1A48     	 ldr r0,.L562+12
 8311 005a 1946     	 mov r1,r3
 8312 005c FFF7FEFF 	 bl vListInsertEnd
 8313 0060 26E0     	 b .L557
 8314              	.L559:
5116:../Dave/Generated/FREERTOS/tasks.c **** 		}
5117:../Dave/Generated/FREERTOS/tasks.c **** 		else
5118:../Dave/Generated/FREERTOS/tasks.c **** 		{
5119:../Dave/Generated/FREERTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5120:../Dave/Generated/FREERTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5121:../Dave/Generated/FREERTOS/tasks.c **** 			kernel will manage it correctly. */
5122:../Dave/Generated/FREERTOS/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 8315              	 .loc 1 5122 0
 8316 0062 FA68     	 ldr r2,[r7,#12]
 8317 0064 7B68     	 ldr r3,[r7,#4]
 8318 0066 1344     	 add r3,r3,r2
 8319 0068 BB60     	 str r3,[r7,#8]
5123:../Dave/Generated/FREERTOS/tasks.c **** 
5124:../Dave/Generated/FREERTOS/tasks.c **** 			/* The list item will be inserted in wake time order. */
5125:../Dave/Generated/FREERTOS/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8320              	 .loc 1 5125 0
 8321 006a 144B     	 ldr r3,.L562+4
 8322 006c 1B68     	 ldr r3,[r3]
 8323 006e BA68     	 ldr r2,[r7,#8]
 8324 0070 5A60     	 str r2,[r3,#4]
5126:../Dave/Generated/FREERTOS/tasks.c **** 
5127:../Dave/Generated/FREERTOS/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 8325              	 .loc 1 5127 0
 8326 0072 BA68     	 ldr r2,[r7,#8]
 8327 0074 FB68     	 ldr r3,[r7,#12]
 8328 0076 9A42     	 cmp r2,r3
 8329 0078 09D2     	 bcs .L561
5128:../Dave/Generated/FREERTOS/tasks.c **** 			{
5129:../Dave/Generated/FREERTOS/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5130:../Dave/Generated/FREERTOS/tasks.c **** 				list. */
5131:../Dave/Generated/FREERTOS/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8330              	 .loc 1 5131 0
 8331 007a 134B     	 ldr r3,.L562+16
 8332 007c 1A68     	 ldr r2,[r3]
 8333 007e 0F4B     	 ldr r3,.L562+4
 8334 0080 1B68     	 ldr r3,[r3]
 8335 0082 0433     	 adds r3,r3,#4
 8336 0084 1046     	 mov r0,r2
 8337 0086 1946     	 mov r1,r3
 8338 0088 FFF7FEFF 	 bl vListInsert
 8339 008c 10E0     	 b .L557
 8340              	.L561:
5132:../Dave/Generated/FREERTOS/tasks.c **** 			}
5133:../Dave/Generated/FREERTOS/tasks.c **** 			else
5134:../Dave/Generated/FREERTOS/tasks.c **** 			{
5135:../Dave/Generated/FREERTOS/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5136:../Dave/Generated/FREERTOS/tasks.c **** 				is used. */
5137:../Dave/Generated/FREERTOS/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8341              	 .loc 1 5137 0
 8342 008e 0F4B     	 ldr r3,.L562+20
 8343 0090 1A68     	 ldr r2,[r3]
 8344 0092 0A4B     	 ldr r3,.L562+4
 8345 0094 1B68     	 ldr r3,[r3]
 8346 0096 0433     	 adds r3,r3,#4
 8347 0098 1046     	 mov r0,r2
 8348 009a 1946     	 mov r1,r3
 8349 009c FFF7FEFF 	 bl vListInsert
5138:../Dave/Generated/FREERTOS/tasks.c **** 
5139:../Dave/Generated/FREERTOS/tasks.c **** 				/* If the task entering the blocked state was placed at the
5140:../Dave/Generated/FREERTOS/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5141:../Dave/Generated/FREERTOS/tasks.c **** 				needs to be updated too. */
5142:../Dave/Generated/FREERTOS/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 8350              	 .loc 1 5142 0
 8351 00a0 0B4B     	 ldr r3,.L562+24
 8352 00a2 1B68     	 ldr r3,[r3]
 8353 00a4 BA68     	 ldr r2,[r7,#8]
 8354 00a6 9A42     	 cmp r2,r3
 8355 00a8 02D2     	 bcs .L557
5143:../Dave/Generated/FREERTOS/tasks.c **** 				{
5144:../Dave/Generated/FREERTOS/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 8356              	 .loc 1 5144 0
 8357 00aa 094A     	 ldr r2,.L562+24
 8358 00ac BB68     	 ldr r3,[r7,#8]
 8359 00ae 1360     	 str r3,[r2]
 8360              	.L557:
5145:../Dave/Generated/FREERTOS/tasks.c **** 				}
5146:../Dave/Generated/FREERTOS/tasks.c **** 				else
5147:../Dave/Generated/FREERTOS/tasks.c **** 				{
5148:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5149:../Dave/Generated/FREERTOS/tasks.c **** 				}
5150:../Dave/Generated/FREERTOS/tasks.c **** 			}
5151:../Dave/Generated/FREERTOS/tasks.c **** 		}
5152:../Dave/Generated/FREERTOS/tasks.c **** 	}
5153:../Dave/Generated/FREERTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5154:../Dave/Generated/FREERTOS/tasks.c **** 	{
5155:../Dave/Generated/FREERTOS/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5156:../Dave/Generated/FREERTOS/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5157:../Dave/Generated/FREERTOS/tasks.c **** 		will manage it correctly. */
5158:../Dave/Generated/FREERTOS/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5159:../Dave/Generated/FREERTOS/tasks.c **** 
5160:../Dave/Generated/FREERTOS/tasks.c **** 		/* The list item will be inserted in wake time order. */
5161:../Dave/Generated/FREERTOS/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5162:../Dave/Generated/FREERTOS/tasks.c **** 
5163:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5164:../Dave/Generated/FREERTOS/tasks.c **** 		{
5165:../Dave/Generated/FREERTOS/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5166:../Dave/Generated/FREERTOS/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5167:../Dave/Generated/FREERTOS/tasks.c **** 		}
5168:../Dave/Generated/FREERTOS/tasks.c **** 		else
5169:../Dave/Generated/FREERTOS/tasks.c **** 		{
5170:../Dave/Generated/FREERTOS/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5171:../Dave/Generated/FREERTOS/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5172:../Dave/Generated/FREERTOS/tasks.c **** 
5173:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5174:../Dave/Generated/FREERTOS/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5175:../Dave/Generated/FREERTOS/tasks.c **** 			too. */
5176:../Dave/Generated/FREERTOS/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5177:../Dave/Generated/FREERTOS/tasks.c **** 			{
5178:../Dave/Generated/FREERTOS/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5179:../Dave/Generated/FREERTOS/tasks.c **** 			}
5180:../Dave/Generated/FREERTOS/tasks.c **** 			else
5181:../Dave/Generated/FREERTOS/tasks.c **** 			{
5182:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5183:../Dave/Generated/FREERTOS/tasks.c **** 			}
5184:../Dave/Generated/FREERTOS/tasks.c **** 		}
5185:../Dave/Generated/FREERTOS/tasks.c **** 
5186:../Dave/Generated/FREERTOS/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5187:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xCanBlockIndefinitely;
5188:../Dave/Generated/FREERTOS/tasks.c **** 	}
5189:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5190:../Dave/Generated/FREERTOS/tasks.c **** }
 8361              	 .loc 1 5190 0
 8362 00b0 1037     	 adds r7,r7,#16
 8363              	.LCFI343:
 8364              	 .cfi_def_cfa_offset 8
 8365 00b2 BD46     	 mov sp,r7
 8366              	.LCFI344:
 8367              	 .cfi_def_cfa_register 13
 8368              	 
 8369 00b4 80BD     	 pop {r7,pc}
 8370              	.L563:
 8371 00b6 00BF     	 .align 2
 8372              	.L562:
 8373 00b8 00000000 	 .word xTickCount
 8374 00bc 00000000 	 .word pxCurrentTCB
 8375 00c0 00000000 	 .word uxTopReadyPriority
 8376 00c4 00000000 	 .word xSuspendedTaskList
 8377 00c8 00000000 	 .word pxOverflowDelayedTaskList
 8378 00cc 00000000 	 .word pxDelayedTaskList
 8379 00d0 00000000 	 .word xNextTaskUnblockTime
 8380              	 .cfi_endproc
 8381              	.LFE203:
 8383              	 .text
 8384              	.Letext0:
 8385              	 .file 3 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 8386              	 .file 4 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 8387              	 .file 5 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 8388              	 .file 6 "../Dave/Generated/FREERTOS/projdefs.h"
 8389              	 .file 7 "../Dave/Generated/FREERTOS/list.h"
 8390              	 .file 8 "../Dave/Generated/FREERTOS/task.h"
 8391              	 .file 9 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/03_VCUJR20/2021_04_09_VCU_jr20_Source_noCAN2/Libraries/CMSIS/Include/cmsis_gcc.h"
 8392              	 .file 10 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/03_VCUJR20/2021_04_09_VCU_jr20_Source_noCAN2/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
    {standard input}:24     .bss.pxCurrentTCB:00000000 pxCurrentTCB
    {standard input}:21     .bss.pxCurrentTCB:00000000 $d
    {standard input}:27     .bss.pxReadyTasksLists:00000000 $d
    {standard input}:30     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
    {standard input}:33     .bss.xDelayedTaskList1:00000000 $d
    {standard input}:36     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
    {standard input}:39     .bss.xDelayedTaskList2:00000000 $d
    {standard input}:42     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
    {standard input}:45     .bss.pxDelayedTaskList:00000000 $d
    {standard input}:48     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
    {standard input}:51     .bss.pxOverflowDelayedTaskList:00000000 $d
    {standard input}:54     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
    {standard input}:57     .bss.xPendingReadyList:00000000 $d
    {standard input}:60     .bss.xPendingReadyList:00000000 xPendingReadyList
    {standard input}:63     .bss.xTasksWaitingTermination:00000000 $d
    {standard input}:66     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
    {standard input}:69     .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
    {standard input}:72     .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
    {standard input}:75     .bss.xSuspendedTaskList:00000000 $d
    {standard input}:78     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
    {standard input}:81     .bss.uxCurrentNumberOfTasks:00000000 $d
    {standard input}:84     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
    {standard input}:87     .bss.xTickCount:00000000 $d
    {standard input}:90     .bss.xTickCount:00000000 xTickCount
    {standard input}:93     .bss.uxTopReadyPriority:00000000 $d
    {standard input}:96     .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
    {standard input}:99     .bss.xSchedulerRunning:00000000 $d
    {standard input}:102    .bss.xSchedulerRunning:00000000 xSchedulerRunning
    {standard input}:105    .bss.uxPendedTicks:00000000 $d
    {standard input}:108    .bss.uxPendedTicks:00000000 uxPendedTicks
    {standard input}:111    .bss.xYieldPending:00000000 $d
    {standard input}:114    .bss.xYieldPending:00000000 xYieldPending
    {standard input}:117    .bss.xNumOfOverflows:00000000 $d
    {standard input}:120    .bss.xNumOfOverflows:00000000 xNumOfOverflows
    {standard input}:123    .bss.uxTaskNumber:00000000 $d
    {standard input}:126    .bss.uxTaskNumber:00000000 uxTaskNumber
    {standard input}:129    .bss.xNextTaskUnblockTime:00000000 $d
    {standard input}:132    .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
    {standard input}:135    .bss.xIdleTaskHandle:00000000 $d
    {standard input}:138    .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
    {standard input}:141    .bss.uxSchedulerSuspended:00000000 $d
    {standard input}:144    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
    {standard input}:147    .text.xTaskCreate:00000000 $t
    {standard input}:152    .text.xTaskCreate:00000000 xTaskCreate
    {standard input}:260    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
    {standard input}:489    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
    {standard input}:256    .text.prvInitialiseNewTask:00000000 $t
    {standard input}:485    .text.prvAddNewTaskToReadyList:00000000 $t
    {standard input}:5325   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
    {standard input}:625    .text.prvAddNewTaskToReadyList:000000c4 $d
    {standard input}:636    .text.vTaskDelete:00000000 $t
    {standard input}:641    .text.vTaskDelete:00000000 vTaskDelete
    {standard input}:5918   .text.prvDeleteTCB:00000000 prvDeleteTCB
    {standard input}:5961   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
    {standard input}:817    .text.vTaskDelete:000000f4 $d
    {standard input}:831    .text.vTaskDelayUntil:00000000 $t
    {standard input}:836    .text.vTaskDelayUntil:00000000 vTaskDelayUntil
    {standard input}:2485   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
    {standard input}:8247   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
    {standard input}:2529   .text.xTaskResumeAll:00000000 xTaskResumeAll
    {standard input}:1024   .text.vTaskDelayUntil:000000e8 $d
    {standard input}:1031   .text.vTaskDelay:00000000 $t
    {standard input}:1036   .text.vTaskDelay:00000000 vTaskDelay
    {standard input}:1122   .text.vTaskDelay:0000005c $d
    {standard input}:1128   .text.eTaskGetState:00000000 $t
    {standard input}:1133   .text.eTaskGetState:00000000 eTaskGetState
    {standard input}:1284   .text.eTaskGetState:000000b8 $d
    {standard input}:1293   .text.uxTaskPriorityGet:00000000 $t
    {standard input}:1298   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
    {standard input}:1353   .text.uxTaskPriorityGet:00000030 $d
    {standard input}:1358   .text.uxTaskPriorityGetFromISR:00000000 $t
    {standard input}:1363   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
    {standard input}:1448   .text.uxTaskPriorityGetFromISR:00000054 $d
    {standard input}:1453   .text.vTaskPrioritySet:00000000 $t
    {standard input}:1458   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
    {standard input}:1685   .text.vTaskPrioritySet:00000144 $d
    {standard input}:1693   .text.vTaskSuspend:00000000 $t
    {standard input}:1698   .text.vTaskSuspend:00000000 vTaskSuspend
    {standard input}:3954   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
    {standard input}:1882   .text.vTaskSuspend:00000100 $d
    {standard input}:1894   .text.prvTaskIsTaskSuspended:00000000 $t
    {standard input}:1898   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
    {standard input}:1984   .text.prvTaskIsTaskSuspended:00000058 $d
    {standard input}:1990   .text.vTaskResume:00000000 $t
    {standard input}:1995   .text.vTaskResume:00000000 vTaskResume
    {standard input}:2120   .text.vTaskResume:000000ac $d
    {standard input}:2128   .text.xTaskResumeFromISR:00000000 $t
    {standard input}:2133   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
    {standard input}:2289   .text.xTaskResumeFromISR:000000d0 $d
    {standard input}:2298   .rodata:00000000 $d
    {standard input}:2302   .text.vTaskStartScheduler:00000000 $t
    {standard input}:2307   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
    {standard input}:2411   .text.vTaskStartScheduler:0000007c $d
    {standard input}:5116   .text.prvIdleTask:00000000 prvIdleTask
    {standard input}:2421   .text.vTaskEndScheduler:00000000 $t
    {standard input}:2426   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
    {standard input}:2475   .text.vTaskEndScheduler:00000028 $d
    {standard input}:2480   .text.vTaskSuspendAll:00000000 $t
    {standard input}:2519   .text.vTaskSuspendAll:00000018 $d
    {standard input}:2524   .text.xTaskResumeAll:00000000 $t
    {standard input}:3703   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
    {standard input}:2731   .text.xTaskResumeAll:00000118 $d
    {standard input}:2744   .text.xTaskGetTickCount:00000000 $t
    {standard input}:2749   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
    {standard input}:2789   .text.xTaskGetTickCount:0000001c $d
    {standard input}:2794   .text.xTaskGetTickCountFromISR:00000000 $t
    {standard input}:2799   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
    {standard input}:2840   .text.xTaskGetTickCountFromISR:00000020 $d
    {standard input}:2845   .text.uxTaskGetNumberOfTasks:00000000 $t
    {standard input}:2850   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
    {standard input}:2881   .text.uxTaskGetNumberOfTasks:00000014 $d
    {standard input}:2886   .text.pcTaskGetName:00000000 $t
    {standard input}:2891   .text.pcTaskGetName:00000000 pcTaskGetName
    {standard input}:2965   .text.pcTaskGetName:00000044 $d
    {standard input}:2970   .text.prvSearchForNameWithinSingleList:00000000 $t
    {standard input}:2974   .text.prvSearchForNameWithinSingleList:00000000 prvSearchForNameWithinSingleList
    {standard input}:3148   .text.xTaskGetHandle:00000000 $t
    {standard input}:3153   .text.xTaskGetHandle:00000000 xTaskGetHandle
    {standard input}:3290   .text.xTaskGetHandle:000000b4 $d
    {standard input}:3299   .text.uxTaskGetSystemState:00000000 $t
    {standard input}:3304   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
    {standard input}:5655   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
    {standard input}:3468   .text.uxTaskGetSystemState:00000108 $d
    {standard input}:3478   .text.xTaskGetIdleTaskHandle:00000000 $t
    {standard input}:3483   .text.xTaskGetIdleTaskHandle:00000000 xTaskGetIdleTaskHandle
    {standard input}:3543   .text.xTaskGetIdleTaskHandle:00000034 $d
    {standard input}:3548   .text.xTaskAbortDelay:00000000 $t
    {standard input}:3553   .text.xTaskAbortDelay:00000000 xTaskAbortDelay
    {standard input}:3690   .text.xTaskAbortDelay:000000c0 $d
    {standard input}:3698   .text.xTaskIncrementTick:00000000 $t
    {standard input}:3934   .text.xTaskIncrementTick:00000148 $d
    {standard input}:3949   .text.vTaskSwitchContext:00000000 $t
    {standard input}:4088   .text.vTaskSwitchContext:000000a0 $d
    {standard input}:4097   .text.vTaskPlaceOnEventList:00000000 $t
    {standard input}:4102   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
    {standard input}:4166   .text.vTaskPlaceOnEventList:00000040 $d
    {standard input}:4171   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
    {standard input}:4176   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
    {standard input}:4270   .text.vTaskPlaceOnUnorderedEventList:0000006c $d
    {standard input}:4276   .text.vTaskPlaceOnEventListRestricted:00000000 $t
    {standard input}:4281   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
    {standard input}:4354   .text.vTaskPlaceOnEventListRestricted:00000050 $d
    {standard input}:4359   .text.xTaskRemoveFromEventList:00000000 $t
    {standard input}:4364   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
    {standard input}:4493   .text.xTaskRemoveFromEventList:000000b0 $d
    {standard input}:4503   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
    {standard input}:4508   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
    {standard input}:4638   .text.vTaskRemoveFromUnorderedEventList:000000ac $d
    {standard input}:4647   .text.vTaskSetTimeOutState:00000000 $t
    {standard input}:4652   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
    {standard input}:4718   .text.vTaskSetTimeOutState:00000040 $d
    {standard input}:4724   .text.vTaskInternalSetTimeOutState:00000000 $t
    {standard input}:4729   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
    {standard input}:4773   .text.vTaskInternalSetTimeOutState:00000024 $d
    {standard input}:4779   .text.xTaskCheckForTimeOut:00000000 $t
    {standard input}:4784   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
    {standard input}:4951   .text.xTaskCheckForTimeOut:000000d4 $d
    {standard input}:4958   .text.vTaskMissedYield:00000000 $t
    {standard input}:4963   .text.vTaskMissedYield:00000000 vTaskMissedYield
    {standard input}:4994   .text.vTaskMissedYield:00000014 $d
    {standard input}:4999   .text.uxTaskGetTaskNumber:00000000 $t
    {standard input}:5004   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
    {standard input}:5059   .text.vTaskSetTaskNumber:00000000 $t
    {standard input}:5064   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
    {standard input}:5112   .text.prvIdleTask:00000000 $t
    {standard input}:5417   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
    {standard input}:5159   .text.prvIdleTask:00000028 $d
    {standard input}:5165   .text.vTaskSetThreadLocalStoragePointer:00000000 $t
    {standard input}:5170   .text.vTaskSetThreadLocalStoragePointer:00000000 vTaskSetThreadLocalStoragePointer
    {standard input}:5233   .text.vTaskSetThreadLocalStoragePointer:0000003c $d
    {standard input}:5238   .text.pvTaskGetThreadLocalStoragePointer:00000000 $t
    {standard input}:5243   .text.pvTaskGetThreadLocalStoragePointer:00000000 pvTaskGetThreadLocalStoragePointer
    {standard input}:5316   .text.pvTaskGetThreadLocalStoragePointer:00000048 $d
    {standard input}:5321   .text.prvInitialiseTaskLists:00000000 $t
    {standard input}:5401   .text.prvInitialiseTaskLists:0000005c $d
    {standard input}:5413   .text.prvCheckTasksWaitingTermination:00000000 $t
    {standard input}:5486   .text.prvCheckTasksWaitingTermination:0000004c $d
    {standard input}:5493   .text.vTaskGetInfo:00000000 $t
    {standard input}:5498   .text.vTaskGetInfo:00000000 vTaskGetInfo
    {standard input}:5785   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
    {standard input}:5646   .text.vTaskGetInfo:000000c4 $d
    {standard input}:5651   .text.prvListTasksWithinSingleList:00000000 $t
    {standard input}:5781   .text.prvTaskCheckFreeStackSpace:00000000 $t
    {standard input}:5848   .text.uxTaskGetStackHighWaterMark:00000000 $t
    {standard input}:5853   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
    {standard input}:5909   .text.uxTaskGetStackHighWaterMark:00000034 $d
    {standard input}:5914   .text.prvDeleteTCB:00000000 $t
    {standard input}:5957   .text.prvResetNextTaskUnblockTime:00000000 $t
    {standard input}:6018   .text.prvResetNextTaskUnblockTime:00000038 $d
    {standard input}:6024   .text.xTaskGetCurrentTaskHandle:00000000 $t
    {standard input}:6029   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
    {standard input}:6069   .text.xTaskGetCurrentTaskHandle:0000001c $d
    {standard input}:6074   .text.xTaskGetSchedulerState:00000000 $t
    {standard input}:6079   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
    {standard input}:6139   .text.xTaskGetSchedulerState:00000034 $d
    {standard input}:6145   .text.xTaskPriorityInherit:00000000 $t
    {standard input}:6150   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
    {standard input}:6316   .text.xTaskPriorityInherit:000000f8 $d
    {standard input}:6323   .text.xTaskPriorityDisinherit:00000000 $t
    {standard input}:6328   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
    {standard input}:6508   .text.xTaskPriorityDisinherit:00000100 $d
    {standard input}:6515   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
    {standard input}:6520   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
    {standard input}:6725   .text.vTaskPriorityDisinheritAfterTimeout:00000128 $d
    {standard input}:6732   .text.prvWriteNameToBuffer:00000000 $t
    {standard input}:6736   .text.prvWriteNameToBuffer:00000000 prvWriteNameToBuffer
    {standard input}:6808   .text.vTaskList:00000000 $t
    {standard input}:6813   .text.vTaskList:00000000 vTaskList
    {standard input}:6882   .text.vTaskList:0000005c $d
    {standard input}:6887   .text.vTaskList:00000070 $t
    {standard input}:7009   .text.vTaskList:00000124 $d
    {standard input}:7015   .text.uxTaskResetEventItemValue:00000000 $t
    {standard input}:7020   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
    {standard input}:7069   .text.uxTaskResetEventItemValue:0000002c $d
    {standard input}:7074   .text.pvTaskIncrementMutexHeldCount:00000000 $t
    {standard input}:7079   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
    {standard input}:7122   .text.pvTaskIncrementMutexHeldCount:00000024 $d
    {standard input}:7127   .text.ulTaskNotifyTake:00000000 $t
    {standard input}:7132   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
    {standard input}:7237   .text.ulTaskNotifyTake:00000088 $d
    {standard input}:7243   .text.xTaskNotifyWait:00000000 $t
    {standard input}:7248   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
    {standard input}:7372   .text.xTaskNotifyWait:000000ac $d
    {standard input}:7378   .text.xTaskGenericNotify:00000000 $t
    {standard input}:7383   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
    {standard input}:7461   .text.xTaskGenericNotify:00000060 $d
    {standard input}:7466   .text.xTaskGenericNotify:00000074 $t
    {standard input}:7633   .text.xTaskGenericNotify:00000158 $d
    {standard input}:7641   .text.xTaskGenericNotifyFromISR:00000000 $t
    {standard input}:7646   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
    {standard input}:7744   .text.xTaskGenericNotifyFromISR:00000080 $d
    {standard input}:7749   .text.xTaskGenericNotifyFromISR:00000094 $t
    {standard input}:7942   .text.xTaskGenericNotifyFromISR:00000198 $d
    {standard input}:7952   .text.vTaskNotifyGiveFromISR:00000000 $t
    {standard input}:7957   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
    {standard input}:8153   .text.vTaskNotifyGiveFromISR:00000108 $d
    {standard input}:8163   .text.xTaskNotifyStateClear:00000000 $t
    {standard input}:8168   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
    {standard input}:8238   .text.xTaskNotifyStateClear:00000048 $d
    {standard input}:8243   .text.prvAddCurrentTaskToDelayedList:00000000 $t
    {standard input}:8373   .text.prvAddCurrentTaskToDelayedList:000000b8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
strlen
vListInsert
vListInitialise
strcpy
sprintf
