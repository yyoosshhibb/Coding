
2021_04_09_VCU_jr20_Source_noCAN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fae4  08000000  0c000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00020000  2**0
                  ALLOC
  2 .data         00000690  20000000  0c00fae4  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000e98  20000690  0c010174  00018690  2**3
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  0001ffc0  2**2
                  ALLOC
  5 .debug_aranges 00001a80  00000000  00000000  00018690  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0003d629  00000000  00000000  0001a110  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006c22  00000000  00000000  00057739  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000115be  00000000  00000000  0005e35b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000690c  00000000  00000000  0006f91c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000104f6  00000000  00000000  00076228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d00f  00000000  00000000  0008671e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000015e0  00000000  00000000  0009372d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 000011c4  00000000  00000000  00094d0d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b5 cc 00 08 35 ae 00 08     ............5...
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	41 86 00 08 b1 02 00 08 00 00 00 00 81 88 00 08     A...............
 800003c:	f1 88 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 79 d7 00 08 b1 02 00 08 b1 02 00 08     ....y...........
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00fae4 	.word	0x0c00fae4
 800024c:	20000000 	.word	0x20000000
 8000250:	00000690 	.word	0x00000690
 8000254:	0c010174 	.word	0x0c010174
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00fae4 	.word	0x0c00fae4
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00fae4 	.word	0x0c00fae4
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000690 	.word	0x20000690
 800027c:	00000e94 	.word	0x00000e94
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	0800efe9 	.word	0x0800efe9
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	0800e259 	.word	0x0800e259

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f00a fe4d 	bl	800af64 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f00a fedf 	bl	800b08c <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f00a febe 	bl	800b078 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <FUNC_Brakelight>:
          /* Output and update for atomic system: '<Root>/Brakelight' */
      
              
  
        void FUNC_Brakelight(void)
  {
 80003a8:	b598      	push	{r3, r4, r7, lr}
 80003aa:	af00      	add	r7, sp, #0


                                /* RelationalOperator: '<S1>/Relational Operator' incorporates:
 *  Constant: '<S1>/Constant'
 */
/*@>c6e0*/VCU_B./*@>c876*/RelationalOperator_c/*@>6a7a*/ = (/*@>c6e6*/VCU_B./*@>c879*/Add1_m/*@>6a79*/ > /*@>c464*/5.0);
 80003ac:	4b20      	ldr	r3, [pc, #128]	; (8000430 <FUNC_Brakelight+0x88>)
 80003ae:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80003b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003b6:	2101      	movs	r1, #1
 80003b8:	460c      	mov	r4, r1
 80003ba:	4610      	mov	r0, r2
 80003bc:	4619      	mov	r1, r3
 80003be:	f04f 0200 	mov.w	r2, #0
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <FUNC_Brakelight+0x8c>)
 80003c4:	f00e fde0 	bl	800ef88 <__aeabi_dcmpgt>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d101      	bne.n	80003d2 <FUNC_Brakelight+0x2a>
 80003ce:	2300      	movs	r3, #0
 80003d0:	461c      	mov	r4, r3
 80003d2:	b2e3      	uxtb	r3, r4
 80003d4:	461a      	mov	r2, r3
 80003d6:	4b16      	ldr	r3, [pc, #88]	; (8000430 <FUNC_Brakelight+0x88>)
 80003d8:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
/* RelationalOperator: '<S1>/Relational Operator1' incorporates:
 *  Constant: '<S1>/Constant'
 */
/*@>c6ec*/VCU_B./*@>c87c*/RelationalOperator1_b/*@>6a7e*/ = (/*@>c465*/5.0/*@>6a7d*/ < /*@>c6f2*/VCU_B./*@>c87f*/Sensitivity1538mVbar);
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <FUNC_Brakelight+0x88>)
 80003de:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 80003e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003e6:	2101      	movs	r1, #1
 80003e8:	460c      	mov	r4, r1
 80003ea:	4610      	mov	r0, r2
 80003ec:	4619      	mov	r1, r3
 80003ee:	f04f 0200 	mov.w	r2, #0
 80003f2:	4b10      	ldr	r3, [pc, #64]	; (8000434 <FUNC_Brakelight+0x8c>)
 80003f4:	f00e fdc8 	bl	800ef88 <__aeabi_dcmpgt>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d101      	bne.n	8000402 <FUNC_Brakelight+0x5a>
 80003fe:	2300      	movs	r3, #0
 8000400:	461c      	mov	r4, r3
 8000402:	b2e3      	uxtb	r3, r4
 8000404:	461a      	mov	r2, r3
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <FUNC_Brakelight+0x88>)
 8000408:	f883 2811 	strb.w	r2, [r3, #2065]	; 0x811
/* Logic: '<S1>/Logical Operator' */
/*@>c6f8*/VCU_B./*@>c882*/Brakelight/*@>6a84*/ = (/*@>c6fe*/VCU_B./*@>c885*/RelationalOperator_c/*@>6a83*/ || /*@>c704*/VCU_B./*@>c888*/RelationalOperator1_b);
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <FUNC_Brakelight+0x88>)
 800040e:	f893 3810 	ldrb.w	r3, [r3, #2064]	; 0x810
 8000412:	2b00      	cmp	r3, #0
 8000414:	d104      	bne.n	8000420 <FUNC_Brakelight+0x78>
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <FUNC_Brakelight+0x88>)
 8000418:	f893 3811 	ldrb.w	r3, [r3, #2065]	; 0x811
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <FUNC_Brakelight+0x7c>
 8000420:	2301      	movs	r3, #1
 8000422:	e000      	b.n	8000426 <FUNC_Brakelight+0x7e>
 8000424:	2300      	movs	r3, #0
 8000426:	b2da      	uxtb	r2, r3
 8000428:	4b01      	ldr	r3, [pc, #4]	; (8000430 <FUNC_Brakelight+0x88>)
 800042a:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812


        
    
      
          }
 800042e:	bd98      	pop	{r3, r4, r7, pc}
 8000430:	200008a8 	.word	0x200008a8
 8000434:	40140000 	.word	0x40140000

08000438 <FUNC_InputData>:
          /* Output and update for atomic system: '<Root>/Input Data' */
      
              
  
        void FUNC_InputData(void)
  {
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b083      	sub	sp, #12
 800043c:	af02      	add	r7, sp, #8
  



                                /* DataStoreRead: '<S8>/Data Store Read1' */
/*@>f91c*/VCU_B./*@>10e4e*/DataStoreRead1_d/*@>6a99*/ = /*@>1003b*/VCU_DW./*@>11169*/VAR_IN_p_brake_F_LSB;
 800043e:	4bc0      	ldr	r3, [pc, #768]	; (8000740 <FUNC_InputData+0x308>)
 8000440:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8000444:	4bbf      	ldr	r3, [pc, #764]	; (8000744 <FUNC_InputData+0x30c>)
 8000446:	f883 2757 	strb.w	r2, [r3, #1879]	; 0x757
/* DataStoreRead: '<S8>/Data Store Read4' */
/*@>f922*/VCU_B./*@>10e51*/DataStoreRead4_p/*@>6a9b*/ = /*@>10041*/VCU_DW./*@>1116c*/VAR_IN_p_brake_F_MSB;
 800044a:	4bbd      	ldr	r3, [pc, #756]	; (8000740 <FUNC_InputData+0x308>)
 800044c:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
 8000450:	4bbc      	ldr	r3, [pc, #752]	; (8000744 <FUNC_InputData+0x30c>)
 8000452:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
/* Gain: '<S16>/Gain' */
/*@>f928*/VCU_B./*@>10e54*/Gain_d/*@>6aa3*/ = /*@>e578*/(uint16_T)(/*@>f92e*/VCU_B./*@>10e57*/DataStoreRead4_p/*@>e55c*/ << /*@>e55b*/7);
 8000456:	4bbb      	ldr	r3, [pc, #748]	; (8000744 <FUNC_InputData+0x30c>)
 8000458:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 800045c:	b29b      	uxth	r3, r3
 800045e:	01db      	lsls	r3, r3, #7
 8000460:	b29a      	uxth	r2, r3
 8000462:	4bb8      	ldr	r3, [pc, #736]	; (8000744 <FUNC_InputData+0x30c>)
 8000464:	f8a3 2726 	strh.w	r2, [r3, #1830]	; 0x726
/* Sum: '<S16>/Add' */
/*@>f934*/VCU_B./*@>10e5a*/Add_a/*@>8871*/ = /*@>e54c*/(uint16_T)(((/*@>e57d*/(uint32_T)/*@>f93a*/VCU_B./*@>10e5d*/Gain_d/*@>e553*/ << /*@>e552*/1)/*@>886d*/ + /*@>f940*/VCU_B./*@>10e60*/DataStoreRead1_d)/*@>e54a*/ >> /*@>e549*/1);
 8000468:	4bb6      	ldr	r3, [pc, #728]	; (8000744 <FUNC_InputData+0x30c>)
 800046a:	f8b3 3726 	ldrh.w	r3, [r3, #1830]	; 0x726
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	4ab4      	ldr	r2, [pc, #720]	; (8000744 <FUNC_InputData+0x30c>)
 8000472:	f892 2757 	ldrb.w	r2, [r2, #1879]	; 0x757
 8000476:	4413      	add	r3, r2
 8000478:	085b      	lsrs	r3, r3, #1
 800047a:	b29a      	uxth	r2, r3
 800047c:	4bb1      	ldr	r3, [pc, #708]	; (8000744 <FUNC_InputData+0x30c>)
 800047e:	f8a3 2728 	strh.w	r2, [r3, #1832]	; 0x728
/* DataTypeConversion: '<S16>/Data Type Conversion' */
/*@>f946*/VCU_B./*@>10e63*/DataTypeConversion_h/*@>6aab*/ = /*@>f46e*/(uint16_T)(/*@>f94c*/VCU_B./*@>10e66*/Add_a/*@>e540*/ << /*@>f071*/1);
 8000482:	4bb0      	ldr	r3, [pc, #704]	; (8000744 <FUNC_InputData+0x30c>)
 8000484:	f8b3 3728 	ldrh.w	r3, [r3, #1832]	; 0x728
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	b29a      	uxth	r2, r3
 800048c:	4bad      	ldr	r3, [pc, #692]	; (8000744 <FUNC_InputData+0x30c>)
 800048e:	f8a3 2714 	strh.w	r2, [r3, #1812]	; 0x714
/* Gain: '<S15>/Factor' */
/*@>f952*/VCU_B./*@>10e69*/Factor_g/*@>6ab3*/ = /*@>e568*/64173U/*@>e539*/ * /*@>f958*/VCU_B./*@>10e6c*/DataTypeConversion_h;
 8000492:	4bac      	ldr	r3, [pc, #688]	; (8000744 <FUNC_InputData+0x30c>)
 8000494:	f8b3 3714 	ldrh.w	r3, [r3, #1812]	; 0x714
 8000498:	461a      	mov	r2, r3
 800049a:	f64f 23ad 	movw	r3, #64173	; 0xfaad
 800049e:	fb03 f302 	mul.w	r3, r3, r2
 80004a2:	4aa8      	ldr	r2, [pc, #672]	; (8000744 <FUNC_InputData+0x30c>)
 80004a4:	f8c2 36dc 	str.w	r3, [r2, #1756]	; 0x6dc
/* Sum: '<S15>/Add1' incorporates:
 *  Constant: '<S15>/Offset'
 */
/*@>f95e*/VCU_B./*@>10e6f*/Add1_m/*@>8878*/ = /*@>e58a*/(real_T)/*@>f964*/VCU_B./*@>10e72*/Factor_g/*@>e532*/ * /*@>e531*/2.384185791015625E-7/*@>8875*/ + /*@>e398*/-20.0;
 80004a8:	4ba6      	ldr	r3, [pc, #664]	; (8000744 <FUNC_InputData+0x30c>)
 80004aa:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 80004ae:	4618      	mov	r0, r3
 80004b0:	f00e fa64 	bl	800e97c <__aeabi_ui2d>
 80004b4:	4602      	mov	r2, r0
 80004b6:	460b      	mov	r3, r1
 80004b8:	4610      	mov	r0, r2
 80004ba:	4619      	mov	r1, r3
 80004bc:	f04f 0200 	mov.w	r2, #0
 80004c0:	4ba1      	ldr	r3, [pc, #644]	; (8000748 <FUNC_InputData+0x310>)
 80004c2:	f00e fad1 	bl	800ea68 <__aeabi_dmul>
 80004c6:	4602      	mov	r2, r0
 80004c8:	460b      	mov	r3, r1
 80004ca:	4610      	mov	r0, r2
 80004cc:	4619      	mov	r1, r3
 80004ce:	f04f 0200 	mov.w	r2, #0
 80004d2:	4b9e      	ldr	r3, [pc, #632]	; (800074c <FUNC_InputData+0x314>)
 80004d4:	f00e f914 	bl	800e700 <__aeabi_dsub>
 80004d8:	4602      	mov	r2, r0
 80004da:	460b      	mov	r3, r1
 80004dc:	4999      	ldr	r1, [pc, #612]	; (8000744 <FUNC_InputData+0x30c>)
 80004de:	f501 6198 	add.w	r1, r1, #1216	; 0x4c0
 80004e2:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S8>/Data Store Read2' */
/*@>f96a*/VCU_B./*@>10e75*/DataStoreRead2/*@>6aba*/ = /*@>10047*/VCU_DW./*@>1116f*/VAR_IN_ABS_BL_switch;
 80004e6:	4b96      	ldr	r3, [pc, #600]	; (8000740 <FUNC_InputData+0x308>)
 80004e8:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
 80004ec:	4b95      	ldr	r3, [pc, #596]	; (8000744 <FUNC_InputData+0x30c>)
 80004ee:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
/* DataTypeConversion: '<S8>/Data Type Conversion2' */
/*@>f970*/VCU_B./*@>10e78*/ABS_BL_switch/*@>6abd*/ = /*@>f976*/VCU_B./*@>10e7b*/DataStoreRead2;
 80004f2:	4b94      	ldr	r3, [pc, #592]	; (8000744 <FUNC_InputData+0x30c>)
 80004f4:	f893 3759 	ldrb.w	r3, [r3, #1881]	; 0x759
 80004f8:	4618      	mov	r0, r3
 80004fa:	f00e fa3f 	bl	800e97c <__aeabi_ui2d>
 80004fe:	4602      	mov	r2, r0
 8000500:	460b      	mov	r3, r1
 8000502:	4990      	ldr	r1, [pc, #576]	; (8000744 <FUNC_InputData+0x30c>)
 8000504:	f501 6199 	add.w	r1, r1, #1224	; 0x4c8
 8000508:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S8>/Data Store Read3' */
/*@>f97c*/VCU_B./*@>10e7e*/DataStoreRead3_l/*@>6abf*/ = /*@>1004d*/VCU_DW./*@>11172*/VAR_IN_ABS_switchstate;
 800050c:	4b8c      	ldr	r3, [pc, #560]	; (8000740 <FUNC_InputData+0x308>)
 800050e:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
 8000512:	4b8c      	ldr	r3, [pc, #560]	; (8000744 <FUNC_InputData+0x30c>)
 8000514:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
/* DataTypeConversion: '<S8>/Data Type Conversion' */
/*@>f982*/VCU_B./*@>10e81*/ABS_switchstate/*@>6ac2*/ = /*@>f988*/VCU_B./*@>10e84*/DataStoreRead3_l;
 8000518:	4b8a      	ldr	r3, [pc, #552]	; (8000744 <FUNC_InputData+0x30c>)
 800051a:	f893 375a 	ldrb.w	r3, [r3, #1882]	; 0x75a
 800051e:	4618      	mov	r0, r3
 8000520:	f00e fa2c 	bl	800e97c <__aeabi_ui2d>
 8000524:	4602      	mov	r2, r0
 8000526:	460b      	mov	r3, r1
 8000528:	4986      	ldr	r1, [pc, #536]	; (8000744 <FUNC_InputData+0x30c>)
 800052a:	f501 619a 	add.w	r1, r1, #1232	; 0x4d0
 800052e:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S8>/Data Store Read5' */
/*@>f98e*/VCU_B./*@>10e87*/DataStoreRead5_d/*@>6ac4*/ = /*@>10053*/VCU_DW./*@>11175*/VAR_IN_ABS_EBD_Lamp;
 8000532:	4b83      	ldr	r3, [pc, #524]	; (8000740 <FUNC_InputData+0x308>)
 8000534:	f893 2134 	ldrb.w	r2, [r3, #308]	; 0x134
 8000538:	4b82      	ldr	r3, [pc, #520]	; (8000744 <FUNC_InputData+0x30c>)
 800053a:	f883 275b 	strb.w	r2, [r3, #1883]	; 0x75b
/* DataTypeConversion: '<S8>/Data Type Conversion4' */
/*@>f994*/VCU_B./*@>10e8a*/ABS_EBD_Lamp/*@>6ac7*/ = /*@>f99a*/VCU_B./*@>10e8d*/DataStoreRead5_d;
 800053e:	4b81      	ldr	r3, [pc, #516]	; (8000744 <FUNC_InputData+0x30c>)
 8000540:	f893 375b 	ldrb.w	r3, [r3, #1883]	; 0x75b
 8000544:	4618      	mov	r0, r3
 8000546:	f00e fa19 	bl	800e97c <__aeabi_ui2d>
 800054a:	4602      	mov	r2, r0
 800054c:	460b      	mov	r3, r1
 800054e:	497d      	ldr	r1, [pc, #500]	; (8000744 <FUNC_InputData+0x30c>)
 8000550:	f501 619b 	add.w	r1, r1, #1240	; 0x4d8
 8000554:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S8>/Data Store Read6' */
/*@>f9a0*/VCU_B./*@>10e90*/DataStoreRead6_j/*@>6ac9*/ = /*@>10059*/VCU_DW./*@>11178*/VAR_IN_ABS_active;
 8000558:	4b79      	ldr	r3, [pc, #484]	; (8000740 <FUNC_InputData+0x308>)
 800055a:	f893 2135 	ldrb.w	r2, [r3, #309]	; 0x135
 800055e:	4b79      	ldr	r3, [pc, #484]	; (8000744 <FUNC_InputData+0x30c>)
 8000560:	f883 275c 	strb.w	r2, [r3, #1884]	; 0x75c
/* DataTypeConversion: '<S8>/Data Type Conversion3' */
/*@>f9a6*/VCU_B./*@>10e93*/ABS_active/*@>6acc*/ = /*@>f9ac*/VCU_B./*@>10e96*/DataStoreRead6_j;
 8000564:	4b77      	ldr	r3, [pc, #476]	; (8000744 <FUNC_InputData+0x30c>)
 8000566:	f893 375c 	ldrb.w	r3, [r3, #1884]	; 0x75c
 800056a:	4618      	mov	r0, r3
 800056c:	f00e fa06 	bl	800e97c <__aeabi_ui2d>
 8000570:	4602      	mov	r2, r0
 8000572:	460b      	mov	r3, r1
 8000574:	4973      	ldr	r1, [pc, #460]	; (8000744 <FUNC_InputData+0x30c>)
 8000576:	f501 619c 	add.w	r1, r1, #1248	; 0x4e0
 800057a:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S8>/Data Store Read7' */
/*@>f9b2*/VCU_B./*@>10e99*/DataStoreRead7_l/*@>6ace*/ = /*@>1005f*/VCU_DW./*@>1117b*/VAR_IN_ABS_Lamp;
 800057e:	4b70      	ldr	r3, [pc, #448]	; (8000740 <FUNC_InputData+0x308>)
 8000580:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
 8000584:	4b6f      	ldr	r3, [pc, #444]	; (8000744 <FUNC_InputData+0x30c>)
 8000586:	f883 275d 	strb.w	r2, [r3, #1885]	; 0x75d
/* DataTypeConversion: '<S8>/Data Type Conversion5' */
/*@>f9b8*/VCU_B./*@>10e9c*/ABS_Lamp/*@>6ad1*/ = /*@>f9be*/VCU_B./*@>10e9f*/DataStoreRead7_l;
 800058a:	4b6e      	ldr	r3, [pc, #440]	; (8000744 <FUNC_InputData+0x30c>)
 800058c:	f893 375d 	ldrb.w	r3, [r3, #1885]	; 0x75d
 8000590:	4618      	mov	r0, r3
 8000592:	f00e f9f3 	bl	800e97c <__aeabi_ui2d>
 8000596:	4602      	mov	r2, r0
 8000598:	460b      	mov	r3, r1
 800059a:	496a      	ldr	r1, [pc, #424]	; (8000744 <FUNC_InputData+0x30c>)
 800059c:	f501 619d 	add.w	r1, r1, #1256	; 0x4e8
 80005a0:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S9>/Data Store Read5' */
/*@>f9c4*/VCU_B./*@>10ea2*/DataStoreRead5_n/*@>6ad3*/ = /*@>10065*/VCU_DW./*@>1117e*/VAR_IN_n_wheel_FL_mpros_LSB;
 80005a4:	4b66      	ldr	r3, [pc, #408]	; (8000740 <FUNC_InputData+0x308>)
 80005a6:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
 80005aa:	4b66      	ldr	r3, [pc, #408]	; (8000744 <FUNC_InputData+0x30c>)
 80005ac:	f883 275e 	strb.w	r2, [r3, #1886]	; 0x75e
/* DataStoreRead: '<S9>/Data Store Read1' */
/*@>f9ca*/VCU_B./*@>10ea5*/DataStoreRead1_k/*@>6ad5*/ = /*@>1006b*/VCU_DW./*@>11181*/VAR_IN_n_wheel_FL_mpros_MSB;
 80005b0:	4b63      	ldr	r3, [pc, #396]	; (8000740 <FUNC_InputData+0x308>)
 80005b2:	f893 2137 	ldrb.w	r2, [r3, #311]	; 0x137
 80005b6:	4b63      	ldr	r3, [pc, #396]	; (8000744 <FUNC_InputData+0x30c>)
 80005b8:	f883 275f 	strb.w	r2, [r3, #1887]	; 0x75f
/* Gain: '<S21>/Gain' */
/*@>f9d0*/VCU_B./*@>10ea8*/Gain_i/*@>6add*/ = /*@>e5ac*/(uint16_T)(/*@>f9d6*/VCU_B./*@>10eab*/DataStoreRead1_k/*@>e52d*/ << /*@>e52c*/7);
 80005bc:	4b61      	ldr	r3, [pc, #388]	; (8000744 <FUNC_InputData+0x30c>)
 80005be:	f893 375f 	ldrb.w	r3, [r3, #1887]	; 0x75f
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	01db      	lsls	r3, r3, #7
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	4b5e      	ldr	r3, [pc, #376]	; (8000744 <FUNC_InputData+0x30c>)
 80005ca:	f8a3 272a 	strh.w	r2, [r3, #1834]	; 0x72a
/* Sum: '<S21>/Add' */
/*@>f9dc*/VCU_B./*@>10eae*/Add_li/*@>8881*/ = /*@>e51d*/(uint16_T)(((/*@>e5b1*/(uint32_T)/*@>f9e2*/VCU_B./*@>10eb1*/Gain_i/*@>e524*/ << /*@>e523*/1)/*@>887d*/ + /*@>f9e8*/VCU_B./*@>10eb4*/DataStoreRead5_n)/*@>e51b*/ >> /*@>e51a*/1);
 80005ce:	4b5d      	ldr	r3, [pc, #372]	; (8000744 <FUNC_InputData+0x30c>)
 80005d0:	f8b3 372a 	ldrh.w	r3, [r3, #1834]	; 0x72a
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	4a5b      	ldr	r2, [pc, #364]	; (8000744 <FUNC_InputData+0x30c>)
 80005d8:	f892 275e 	ldrb.w	r2, [r2, #1886]	; 0x75e
 80005dc:	4413      	add	r3, r2
 80005de:	085b      	lsrs	r3, r3, #1
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	4b58      	ldr	r3, [pc, #352]	; (8000744 <FUNC_InputData+0x30c>)
 80005e4:	f8a3 272c 	strh.w	r2, [r3, #1836]	; 0x72c
/* DataTypeConversion: '<S21>/Data Type Conversion' */
/*@>f9ee*/VCU_B./*@>10eb7*/DataTypeConversion_a/*@>6ae5*/ = /*@>f46d*/(uint16_T)(/*@>f9f4*/VCU_B./*@>10eba*/Add_li/*@>e511*/ << /*@>f073*/1);
 80005e8:	4b56      	ldr	r3, [pc, #344]	; (8000744 <FUNC_InputData+0x30c>)
 80005ea:	f8b3 372c 	ldrh.w	r3, [r3, #1836]	; 0x72c
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	4b54      	ldr	r3, [pc, #336]	; (8000744 <FUNC_InputData+0x30c>)
 80005f4:	f8a3 2716 	strh.w	r2, [r3, #1814]	; 0x716
/* Gain: '<S17>/Factor' */
/*@>f9fa*/VCU_B./*@>10ebd*/Factor_br/*@>6aed*/ = /*@>e5bb*/(uint32_T)/*@>fa00*/VCU_B./*@>10ec0*/DataTypeConversion_a/*@>e50c*/ << /*@>e50b*/15;
 80005f8:	4b52      	ldr	r3, [pc, #328]	; (8000744 <FUNC_InputData+0x30c>)
 80005fa:	f8b3 3716 	ldrh.w	r3, [r3, #1814]	; 0x716
 80005fe:	03db      	lsls	r3, r3, #15
 8000600:	4a50      	ldr	r2, [pc, #320]	; (8000744 <FUNC_InputData+0x30c>)
 8000602:	f8c2 36e0 	str.w	r3, [r2, #1760]	; 0x6e0
/* Sum: '<S17>/Add1' */
/*@>fa06*/VCU_B./*@>10ec3*/Add1_k/*@>8888*/ = /*@>e5bf*/(real_T)/*@>fa0c*/VCU_B./*@>10ec6*/Factor_br/*@>e501*/ * /*@>e500*/4.76837158203125E-7;
 8000606:	4b4f      	ldr	r3, [pc, #316]	; (8000744 <FUNC_InputData+0x30c>)
 8000608:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 800060c:	4618      	mov	r0, r3
 800060e:	f00e f9b5 	bl	800e97c <__aeabi_ui2d>
 8000612:	4602      	mov	r2, r0
 8000614:	460b      	mov	r3, r1
 8000616:	4610      	mov	r0, r2
 8000618:	4619      	mov	r1, r3
 800061a:	f04f 0200 	mov.w	r2, #0
 800061e:	4b4c      	ldr	r3, [pc, #304]	; (8000750 <FUNC_InputData+0x318>)
 8000620:	f00e fa22 	bl	800ea68 <__aeabi_dmul>
 8000624:	4602      	mov	r2, r0
 8000626:	460b      	mov	r3, r1
 8000628:	4946      	ldr	r1, [pc, #280]	; (8000744 <FUNC_InputData+0x30c>)
 800062a:	f501 619e 	add.w	r1, r1, #1264	; 0x4f0
 800062e:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S9>/Data Store Read2' */
/*@>fa12*/VCU_B./*@>10ec9*/DataStoreRead2_n/*@>6af4*/ = /*@>10071*/VCU_DW./*@>11184*/VAR_IN_n_wheel_FR_mpros_LSB;
 8000632:	4b43      	ldr	r3, [pc, #268]	; (8000740 <FUNC_InputData+0x308>)
 8000634:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
 8000638:	4b42      	ldr	r3, [pc, #264]	; (8000744 <FUNC_InputData+0x30c>)
 800063a:	f883 2760 	strb.w	r2, [r3, #1888]	; 0x760
/* DataStoreRead: '<S9>/Data Store Read3' */
/*@>fa18*/VCU_B./*@>10ecc*/DataStoreRead3_k/*@>6af6*/ = /*@>10077*/VCU_DW./*@>11187*/VAR_IN_n_wheel_FR_mpros_MSB;
 800063e:	4b40      	ldr	r3, [pc, #256]	; (8000740 <FUNC_InputData+0x308>)
 8000640:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 8000644:	4b3f      	ldr	r3, [pc, #252]	; (8000744 <FUNC_InputData+0x30c>)
 8000646:	f883 2761 	strb.w	r2, [r3, #1889]	; 0x761
/* Gain: '<S22>/Gain' */
/*@>fa1e*/VCU_B./*@>10ecf*/Gain_e/*@>6afe*/ = /*@>e5c8*/(uint16_T)(/*@>fa24*/VCU_B./*@>10ed2*/DataStoreRead3_k/*@>e4fc*/ << /*@>e4fb*/7);
 800064a:	4b3e      	ldr	r3, [pc, #248]	; (8000744 <FUNC_InputData+0x30c>)
 800064c:	f893 3761 	ldrb.w	r3, [r3, #1889]	; 0x761
 8000650:	b29b      	uxth	r3, r3
 8000652:	01db      	lsls	r3, r3, #7
 8000654:	b29a      	uxth	r2, r3
 8000656:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <FUNC_InputData+0x30c>)
 8000658:	f8a3 272e 	strh.w	r2, [r3, #1838]	; 0x72e
/* Sum: '<S22>/Add' */
/*@>fa2a*/VCU_B./*@>10ed5*/Add_f/*@>8891*/ = /*@>e4ec*/(uint16_T)(((/*@>e5cd*/(uint32_T)/*@>fa30*/VCU_B./*@>10ed8*/Gain_e/*@>e4f3*/ << /*@>e4f2*/1)/*@>888d*/ + /*@>fa36*/VCU_B./*@>10edb*/DataStoreRead2_n)/*@>e4ea*/ >> /*@>e4e9*/1);
 800065c:	4b39      	ldr	r3, [pc, #228]	; (8000744 <FUNC_InputData+0x30c>)
 800065e:	f8b3 372e 	ldrh.w	r3, [r3, #1838]	; 0x72e
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4a37      	ldr	r2, [pc, #220]	; (8000744 <FUNC_InputData+0x30c>)
 8000666:	f892 2760 	ldrb.w	r2, [r2, #1888]	; 0x760
 800066a:	4413      	add	r3, r2
 800066c:	085b      	lsrs	r3, r3, #1
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b34      	ldr	r3, [pc, #208]	; (8000744 <FUNC_InputData+0x30c>)
 8000672:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
/* DataTypeConversion: '<S22>/Data Type Conversion' */
/*@>fa3c*/VCU_B./*@>10ede*/DataTypeConversion_l/*@>6b06*/ = /*@>f46c*/(uint16_T)(/*@>fa42*/VCU_B./*@>10ee1*/Add_f/*@>e4e0*/ << /*@>f075*/1);
 8000676:	4b33      	ldr	r3, [pc, #204]	; (8000744 <FUNC_InputData+0x30c>)
 8000678:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b30      	ldr	r3, [pc, #192]	; (8000744 <FUNC_InputData+0x30c>)
 8000682:	f8a3 2718 	strh.w	r2, [r3, #1816]	; 0x718
/* Gain: '<S18>/Factor' */
/*@>fa48*/VCU_B./*@>10ee4*/Factor_gm/*@>6b0e*/ = /*@>e5d7*/(uint32_T)/*@>fa4e*/VCU_B./*@>10ee7*/DataTypeConversion_l/*@>e4db*/ << /*@>e4da*/15;
 8000686:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <FUNC_InputData+0x30c>)
 8000688:	f8b3 3718 	ldrh.w	r3, [r3, #1816]	; 0x718
 800068c:	03db      	lsls	r3, r3, #15
 800068e:	4a2d      	ldr	r2, [pc, #180]	; (8000744 <FUNC_InputData+0x30c>)
 8000690:	f8c2 36e4 	str.w	r3, [r2, #1764]	; 0x6e4
/* Sum: '<S18>/Add1' */
/*@>fa54*/VCU_B./*@>10eea*/Add1_de/*@>8898*/ = /*@>e5db*/(real_T)/*@>fa5a*/VCU_B./*@>10eed*/Factor_gm/*@>e4d0*/ * /*@>e4cf*/4.76837158203125E-7;
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <FUNC_InputData+0x30c>)
 8000696:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 800069a:	4618      	mov	r0, r3
 800069c:	f00e f96e 	bl	800e97c <__aeabi_ui2d>
 80006a0:	4602      	mov	r2, r0
 80006a2:	460b      	mov	r3, r1
 80006a4:	4610      	mov	r0, r2
 80006a6:	4619      	mov	r1, r3
 80006a8:	f04f 0200 	mov.w	r2, #0
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <FUNC_InputData+0x318>)
 80006ae:	f00e f9db 	bl	800ea68 <__aeabi_dmul>
 80006b2:	4602      	mov	r2, r0
 80006b4:	460b      	mov	r3, r1
 80006b6:	4923      	ldr	r1, [pc, #140]	; (8000744 <FUNC_InputData+0x30c>)
 80006b8:	f501 619f 	add.w	r1, r1, #1272	; 0x4f8
 80006bc:	e9c1 2300 	strd	r2, r3, [r1]
/* Sum: '<S9>/Add' */
/*@>fa60*/VCU_B./*@>10ef0*/Add_l1/*@>889d*/ = /*@>fa66*/VCU_B./*@>10ef3*/Add1_k/*@>889a*/ + /*@>fa6c*/VCU_B./*@>10ef6*/Add1_de;
 80006c0:	4b20      	ldr	r3, [pc, #128]	; (8000744 <FUNC_InputData+0x30c>)
 80006c2:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 80006c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <FUNC_InputData+0x30c>)
 80006cc:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 80006d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006d4:	f00e f816 	bl	800e704 <__adddf3>
 80006d8:	4602      	mov	r2, r0
 80006da:	460b      	mov	r3, r1
 80006dc:	4919      	ldr	r1, [pc, #100]	; (8000744 <FUNC_InputData+0x30c>)
 80006de:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S9>/Gain4' */
/*@>fa72*/VCU_B./*@>10ef9*/Gain4/*@>6b20*/ = /*@>e399*/0.9/*@>e4ca*/ * /*@>fa78*/VCU_B./*@>10efc*/Add_l1;
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <FUNC_InputData+0x30c>)
 80006e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80006ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006f0:	4610      	mov	r0, r2
 80006f2:	4619      	mov	r1, r3
 80006f4:	a310      	add	r3, pc, #64	; (adr r3, 8000738 <FUNC_InputData+0x300>)
 80006f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006fa:	f00e f9b5 	bl	800ea68 <__aeabi_dmul>
 80006fe:	4602      	mov	r2, r0
 8000700:	460b      	mov	r3, r1
 8000702:	4910      	ldr	r1, [pc, #64]	; (8000744 <FUNC_InputData+0x30c>)
 8000704:	f501 61a1 	add.w	r1, r1, #1288	; 0x508
 8000708:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S9>/Data Store Read4' */
/*@>fa7e*/VCU_B./*@>10eff*/DataStoreRead4_o/*@>6b22*/ = /*@>1007d*/VCU_DW./*@>1118a*/VAR_IN_n_wheel_RL_mpros_LSB;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <FUNC_InputData+0x308>)
 800070e:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <FUNC_InputData+0x30c>)
 8000714:	f883 2762 	strb.w	r2, [r3, #1890]	; 0x762
/* DataStoreRead: '<S9>/Data Store Read6' */
/*@>fa84*/VCU_B./*@>10f02*/DataStoreRead6_f/*@>6b24*/ = /*@>10083*/VCU_DW./*@>1118d*/VAR_IN_n_wheel_RL_mpros_MSB;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <FUNC_InputData+0x308>)
 800071a:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <FUNC_InputData+0x30c>)
 8000720:	f883 2763 	strb.w	r2, [r3, #1891]	; 0x763
/* Gain: '<S23>/Gain' */
/*@>fa8a*/VCU_B./*@>10f05*/Gain_me/*@>6b2c*/ = /*@>e5e9*/(uint16_T)(/*@>fa90*/VCU_B./*@>10f08*/DataStoreRead6_f/*@>e4c7*/ << /*@>e4c6*/7);
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <FUNC_InputData+0x30c>)
 8000726:	f893 3763 	ldrb.w	r3, [r3, #1891]	; 0x763
 800072a:	b29b      	uxth	r3, r3
 800072c:	01db      	lsls	r3, r3, #7
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <FUNC_InputData+0x30c>)
 8000732:	f8a3 2732 	strh.w	r2, [r3, #1842]	; 0x732
 8000736:	e00d      	b.n	8000754 <FUNC_InputData+0x31c>
 8000738:	cccccccd 	.word	0xcccccccd
 800073c:	3feccccc 	.word	0x3feccccc
 8000740:	200010c8 	.word	0x200010c8
 8000744:	200008a8 	.word	0x200008a8
 8000748:	3e900000 	.word	0x3e900000
 800074c:	40340000 	.word	0x40340000
 8000750:	3ea00000 	.word	0x3ea00000
/* Sum: '<S23>/Add' */
/*@>fa96*/VCU_B./*@>10f0b*/Add_o4/*@>88a6*/ = /*@>e4b7*/(uint16_T)(((/*@>e5ee*/(uint32_T)/*@>fa9c*/VCU_B./*@>10f0e*/Gain_me/*@>e4be*/ << /*@>e4bd*/1)/*@>88a2*/ + /*@>faa2*/VCU_B./*@>10f11*/DataStoreRead4_o)/*@>e4b5*/ >> /*@>e4b4*/1);
 8000754:	4bc0      	ldr	r3, [pc, #768]	; (8000a58 <FUNC_InputData+0x620>)
 8000756:	f8b3 3732 	ldrh.w	r3, [r3, #1842]	; 0x732
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4abe      	ldr	r2, [pc, #760]	; (8000a58 <FUNC_InputData+0x620>)
 800075e:	f892 2762 	ldrb.w	r2, [r2, #1890]	; 0x762
 8000762:	4413      	add	r3, r2
 8000764:	085b      	lsrs	r3, r3, #1
 8000766:	b29a      	uxth	r2, r3
 8000768:	4bbb      	ldr	r3, [pc, #748]	; (8000a58 <FUNC_InputData+0x620>)
 800076a:	f8a3 2734 	strh.w	r2, [r3, #1844]	; 0x734
/* DataTypeConversion: '<S23>/Data Type Conversion' */
/*@>faa8*/VCU_B./*@>10f14*/DataTypeConversion_j/*@>6b34*/ = /*@>f46b*/(uint16_T)(/*@>faae*/VCU_B./*@>10f17*/Add_o4/*@>e4ab*/ << /*@>f077*/1);
 800076e:	4bba      	ldr	r3, [pc, #744]	; (8000a58 <FUNC_InputData+0x620>)
 8000770:	f8b3 3734 	ldrh.w	r3, [r3, #1844]	; 0x734
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	b29a      	uxth	r2, r3
 8000778:	4bb7      	ldr	r3, [pc, #732]	; (8000a58 <FUNC_InputData+0x620>)
 800077a:	f8a3 271a 	strh.w	r2, [r3, #1818]	; 0x71a
/* Gain: '<S19>/Factor' */
/*@>fab4*/VCU_B./*@>10f1a*/Factor_d5/*@>6b3c*/ = /*@>e5f8*/(uint32_T)/*@>faba*/VCU_B./*@>10f1d*/DataTypeConversion_j/*@>e4a6*/ << /*@>e4a5*/15;
 800077e:	4bb6      	ldr	r3, [pc, #728]	; (8000a58 <FUNC_InputData+0x620>)
 8000780:	f8b3 371a 	ldrh.w	r3, [r3, #1818]	; 0x71a
 8000784:	03db      	lsls	r3, r3, #15
 8000786:	4ab4      	ldr	r2, [pc, #720]	; (8000a58 <FUNC_InputData+0x620>)
 8000788:	f8c2 36e8 	str.w	r3, [r2, #1768]	; 0x6e8
/* Sum: '<S19>/Add1' */
/*@>fac0*/VCU_B./*@>10f20*/Add1_ks/*@>88ad*/ = /*@>e5fc*/(real_T)/*@>fac6*/VCU_B./*@>10f23*/Factor_d5/*@>e49b*/ * /*@>e49a*/4.76837158203125E-7;
 800078c:	4bb2      	ldr	r3, [pc, #712]	; (8000a58 <FUNC_InputData+0x620>)
 800078e:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 8000792:	4618      	mov	r0, r3
 8000794:	f00e f8f2 	bl	800e97c <__aeabi_ui2d>
 8000798:	4602      	mov	r2, r0
 800079a:	460b      	mov	r3, r1
 800079c:	4610      	mov	r0, r2
 800079e:	4619      	mov	r1, r3
 80007a0:	f04f 0200 	mov.w	r2, #0
 80007a4:	4bad      	ldr	r3, [pc, #692]	; (8000a5c <FUNC_InputData+0x624>)
 80007a6:	f00e f95f 	bl	800ea68 <__aeabi_dmul>
 80007aa:	4602      	mov	r2, r0
 80007ac:	460b      	mov	r3, r1
 80007ae:	49aa      	ldr	r1, [pc, #680]	; (8000a58 <FUNC_InputData+0x620>)
 80007b0:	f501 61a2 	add.w	r1, r1, #1296	; 0x510
 80007b4:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S9>/Data Store Read7' */
/*@>facc*/VCU_B./*@>10f26*/DataStoreRead7_h/*@>6b43*/ = /*@>10089*/VCU_DW./*@>11190*/VAR_IN_n_wheel_RR_mpros_LSB;
 80007b8:	4ba9      	ldr	r3, [pc, #676]	; (8000a60 <FUNC_InputData+0x628>)
 80007ba:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 80007be:	4ba6      	ldr	r3, [pc, #664]	; (8000a58 <FUNC_InputData+0x620>)
 80007c0:	f883 2764 	strb.w	r2, [r3, #1892]	; 0x764
/* DataStoreRead: '<S9>/Data Store Read8' */
/*@>fad2*/VCU_B./*@>10f29*/DataStoreRead8_e/*@>6b45*/ = /*@>1008f*/VCU_DW./*@>11193*/VAR_IN_n_wheel_RR_mpros_MSB;
 80007c4:	4ba6      	ldr	r3, [pc, #664]	; (8000a60 <FUNC_InputData+0x628>)
 80007c6:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 80007ca:	4ba3      	ldr	r3, [pc, #652]	; (8000a58 <FUNC_InputData+0x620>)
 80007cc:	f883 2765 	strb.w	r2, [r3, #1893]	; 0x765
/* Gain: '<S24>/Gain' */
/*@>fad8*/VCU_B./*@>10f2c*/Gain_c/*@>6b4d*/ = /*@>e605*/(uint16_T)(/*@>fade*/VCU_B./*@>10f2f*/DataStoreRead8_e/*@>e496*/ << /*@>e495*/7);
 80007d0:	4ba1      	ldr	r3, [pc, #644]	; (8000a58 <FUNC_InputData+0x620>)
 80007d2:	f893 3765 	ldrb.w	r3, [r3, #1893]	; 0x765
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	01db      	lsls	r3, r3, #7
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b9e      	ldr	r3, [pc, #632]	; (8000a58 <FUNC_InputData+0x620>)
 80007de:	f8a3 2736 	strh.w	r2, [r3, #1846]	; 0x736
/* Sum: '<S24>/Add' */
/*@>fae4*/VCU_B./*@>10f32*/Add_fb/*@>88b6*/ = /*@>e486*/(uint16_T)(((/*@>e60a*/(uint32_T)/*@>faea*/VCU_B./*@>10f35*/Gain_c/*@>e48d*/ << /*@>e48c*/1)/*@>88b2*/ + /*@>faf0*/VCU_B./*@>10f38*/DataStoreRead7_h)/*@>e484*/ >> /*@>e483*/1);
 80007e2:	4b9d      	ldr	r3, [pc, #628]	; (8000a58 <FUNC_InputData+0x620>)
 80007e4:	f8b3 3736 	ldrh.w	r3, [r3, #1846]	; 0x736
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	4a9b      	ldr	r2, [pc, #620]	; (8000a58 <FUNC_InputData+0x620>)
 80007ec:	f892 2764 	ldrb.w	r2, [r2, #1892]	; 0x764
 80007f0:	4413      	add	r3, r2
 80007f2:	085b      	lsrs	r3, r3, #1
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b98      	ldr	r3, [pc, #608]	; (8000a58 <FUNC_InputData+0x620>)
 80007f8:	f8a3 2738 	strh.w	r2, [r3, #1848]	; 0x738
/* DataTypeConversion: '<S24>/Data Type Conversion' */
/*@>faf6*/VCU_B./*@>10f3b*/DataTypeConversion_c/*@>6b55*/ = /*@>f46a*/(uint16_T)(/*@>fafc*/VCU_B./*@>10f3e*/Add_fb/*@>e47a*/ << /*@>f079*/1);
 80007fc:	4b96      	ldr	r3, [pc, #600]	; (8000a58 <FUNC_InputData+0x620>)
 80007fe:	f8b3 3738 	ldrh.w	r3, [r3, #1848]	; 0x738
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	b29a      	uxth	r2, r3
 8000806:	4b94      	ldr	r3, [pc, #592]	; (8000a58 <FUNC_InputData+0x620>)
 8000808:	f8a3 271c 	strh.w	r2, [r3, #1820]	; 0x71c
/* Gain: '<S20>/Factor' */
/*@>fb02*/VCU_B./*@>10f41*/Factor_jp/*@>6b5d*/ = /*@>e614*/(uint32_T)/*@>fb08*/VCU_B./*@>10f44*/DataTypeConversion_c/*@>e475*/ << /*@>e474*/15;
 800080c:	4b92      	ldr	r3, [pc, #584]	; (8000a58 <FUNC_InputData+0x620>)
 800080e:	f8b3 371c 	ldrh.w	r3, [r3, #1820]	; 0x71c
 8000812:	03db      	lsls	r3, r3, #15
 8000814:	4a90      	ldr	r2, [pc, #576]	; (8000a58 <FUNC_InputData+0x620>)
 8000816:	f8c2 36ec 	str.w	r3, [r2, #1772]	; 0x6ec
/* Sum: '<S20>/Add1' */
/*@>fb0e*/VCU_B./*@>10f47*/Add1_eq/*@>88bd*/ = /*@>e618*/(real_T)/*@>fb14*/VCU_B./*@>10f4a*/Factor_jp/*@>e46a*/ * /*@>e469*/4.76837158203125E-7;
 800081a:	4b8f      	ldr	r3, [pc, #572]	; (8000a58 <FUNC_InputData+0x620>)
 800081c:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8000820:	4618      	mov	r0, r3
 8000822:	f00e f8ab 	bl	800e97c <__aeabi_ui2d>
 8000826:	4602      	mov	r2, r0
 8000828:	460b      	mov	r3, r1
 800082a:	4610      	mov	r0, r2
 800082c:	4619      	mov	r1, r3
 800082e:	f04f 0200 	mov.w	r2, #0
 8000832:	4b8a      	ldr	r3, [pc, #552]	; (8000a5c <FUNC_InputData+0x624>)
 8000834:	f00e f918 	bl	800ea68 <__aeabi_dmul>
 8000838:	4602      	mov	r2, r0
 800083a:	460b      	mov	r3, r1
 800083c:	4986      	ldr	r1, [pc, #536]	; (8000a58 <FUNC_InputData+0x620>)
 800083e:	f501 61a3 	add.w	r1, r1, #1304	; 0x518
 8000842:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S25>/Data Store Read1' */
/*@>fb1a*/VCU_B./*@>10f4d*/DataStoreRead1_g/*@>6b64*/ = /*@>10095*/VCU_DW./*@>11196*/VAR_IN_u_TPS;
 8000846:	4b86      	ldr	r3, [pc, #536]	; (8000a60 <FUNC_InputData+0x628>)
 8000848:	f893 213f 	ldrb.w	r2, [r3, #319]	; 0x13f
 800084c:	4b82      	ldr	r3, [pc, #520]	; (8000a58 <FUNC_InputData+0x620>)
 800084e:	f883 2766 	strb.w	r2, [r3, #1894]	; 0x766
/* DataStoreRead: '<S26>/Data Store Read5' */
/*@>fb20*/VCU_B./*@>10f50*/DataStoreRead5_i/*@>6b66*/ = /*@>1009b*/VCU_DW./*@>11199*/VAR_IN_p_air_22;
 8000852:	4b83      	ldr	r3, [pc, #524]	; (8000a60 <FUNC_InputData+0x628>)
 8000854:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
 8000858:	4b7f      	ldr	r3, [pc, #508]	; (8000a58 <FUNC_InputData+0x620>)
 800085a:	f883 2767 	strb.w	r2, [r3, #1895]	; 0x767
/* DataTypeConversion: '<S26>/Data Type Conversion' */
/*@>fb26*/VCU_B./*@>10f53*/DataTypeConversion/*@>6b69*/ = /*@>fb2c*/VCU_B./*@>10f56*/DataStoreRead5_i;
 800085e:	4b7e      	ldr	r3, [pc, #504]	; (8000a58 <FUNC_InputData+0x620>)
 8000860:	f893 3767 	ldrb.w	r3, [r3, #1895]	; 0x767
 8000864:	4618      	mov	r0, r3
 8000866:	f00e f889 	bl	800e97c <__aeabi_ui2d>
 800086a:	4602      	mov	r2, r0
 800086c:	460b      	mov	r3, r1
 800086e:	497a      	ldr	r1, [pc, #488]	; (8000a58 <FUNC_InputData+0x620>)
 8000870:	f501 61a4 	add.w	r1, r1, #1312	; 0x520
 8000874:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S26>/Data Store Read4' */
/*@>fb32*/VCU_B./*@>10f59*/DataStoreRead4_k/*@>6b6b*/ = /*@>100a1*/VCU_DW./*@>1119c*/VAR_IN_p_air_22_des;
 8000878:	4b79      	ldr	r3, [pc, #484]	; (8000a60 <FUNC_InputData+0x628>)
 800087a:	f893 2143 	ldrb.w	r2, [r3, #323]	; 0x143
 800087e:	4b76      	ldr	r3, [pc, #472]	; (8000a58 <FUNC_InputData+0x620>)
 8000880:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
/* DataTypeConversion: '<S26>/Data Type Conversion1' */
/*@>fb38*/VCU_B./*@>10f5c*/DataTypeConversion1/*@>6b6e*/ = /*@>fb3e*/VCU_B./*@>10f5f*/DataStoreRead4_k;
 8000884:	4b74      	ldr	r3, [pc, #464]	; (8000a58 <FUNC_InputData+0x620>)
 8000886:	f893 3768 	ldrb.w	r3, [r3, #1896]	; 0x768
 800088a:	4618      	mov	r0, r3
 800088c:	f00e f876 	bl	800e97c <__aeabi_ui2d>
 8000890:	4602      	mov	r2, r0
 8000892:	460b      	mov	r3, r1
 8000894:	4970      	ldr	r1, [pc, #448]	; (8000a58 <FUNC_InputData+0x620>)
 8000896:	f501 61a5 	add.w	r1, r1, #1320	; 0x528
 800089a:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S26>/Data Store Read1' */
/*@>fb44*/VCU_B./*@>10f62*/DataStoreRead1_m/*@>6b70*/ = /*@>100a7*/VCU_DW./*@>1119f*/VAR_IN_n_engine_MSB;
 800089e:	4b70      	ldr	r3, [pc, #448]	; (8000a60 <FUNC_InputData+0x628>)
 80008a0:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
 80008a4:	4b6c      	ldr	r3, [pc, #432]	; (8000a58 <FUNC_InputData+0x620>)
 80008a6:	f883 2769 	strb.w	r2, [r3, #1897]	; 0x769
/* Gain: '<S29>/Gain' */
/*@>fb4a*/VCU_B./*@>10f65*/Gain_cv/*@>6b78*/ = /*@>e62b*/(uint16_T)(/*@>fb50*/VCU_B./*@>10f68*/DataStoreRead1_m/*@>e465*/ << /*@>e464*/7);
 80008aa:	4b6b      	ldr	r3, [pc, #428]	; (8000a58 <FUNC_InputData+0x620>)
 80008ac:	f893 3769 	ldrb.w	r3, [r3, #1897]	; 0x769
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	01db      	lsls	r3, r3, #7
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b68      	ldr	r3, [pc, #416]	; (8000a58 <FUNC_InputData+0x620>)
 80008b8:	f8a3 273a 	strh.w	r2, [r3, #1850]	; 0x73a
/* DataStoreRead: '<S26>/Data Store Read2' */
/*@>fb56*/VCU_B./*@>10f6b*/DataStoreRead2_o/*@>6b7a*/ = /*@>100ad*/VCU_DW./*@>111a2*/VAR_IN_n_engine_LSB;
 80008bc:	4b68      	ldr	r3, [pc, #416]	; (8000a60 <FUNC_InputData+0x628>)
 80008be:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
 80008c2:	4b65      	ldr	r3, [pc, #404]	; (8000a58 <FUNC_InputData+0x620>)
 80008c4:	f883 276a 	strb.w	r2, [r3, #1898]	; 0x76a
/* Sum: '<S29>/Add' */
/*@>fb5c*/VCU_B./*@>10f6e*/Add_d/*@>88c6*/ = /*@>e455*/(uint16_T)(((/*@>e632*/(uint32_T)/*@>fb62*/VCU_B./*@>10f71*/Gain_cv/*@>e45c*/ << /*@>e45b*/1)/*@>88c2*/ + /*@>fb68*/VCU_B./*@>10f74*/DataStoreRead2_o)/*@>e453*/ >> /*@>e452*/1);
 80008c8:	4b63      	ldr	r3, [pc, #396]	; (8000a58 <FUNC_InputData+0x620>)
 80008ca:	f8b3 373a 	ldrh.w	r3, [r3, #1850]	; 0x73a
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	4a61      	ldr	r2, [pc, #388]	; (8000a58 <FUNC_InputData+0x620>)
 80008d2:	f892 276a 	ldrb.w	r2, [r2, #1898]	; 0x76a
 80008d6:	4413      	add	r3, r2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	b29a      	uxth	r2, r3
 80008dc:	4b5e      	ldr	r3, [pc, #376]	; (8000a58 <FUNC_InputData+0x620>)
 80008de:	f8a3 273c 	strh.w	r2, [r3, #1852]	; 0x73c
/* DataTypeConversion: '<S29>/Data Type Conversion' */
/*@>fb6e*/VCU_B./*@>10f77*/DataTypeConversion_o/*@>6b82*/ = /*@>f469*/(uint16_T)(/*@>fb74*/VCU_B./*@>10f7a*/Add_d/*@>e449*/ << /*@>f07b*/1);
 80008e2:	4b5d      	ldr	r3, [pc, #372]	; (8000a58 <FUNC_InputData+0x620>)
 80008e4:	f8b3 373c 	ldrh.w	r3, [r3, #1852]	; 0x73c
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	4b5a      	ldr	r3, [pc, #360]	; (8000a58 <FUNC_InputData+0x620>)
 80008ee:	f8a3 271e 	strh.w	r2, [r3, #1822]	; 0x71e
/* DataTypeConversion: '<S26>/Data Type Conversion2' */
/*@>fb7a*/VCU_B./*@>10f7d*/DataTypeConversion2/*@>6b85*/ = /*@>fb80*/VCU_B./*@>10f80*/DataTypeConversion_o;
 80008f2:	4b59      	ldr	r3, [pc, #356]	; (8000a58 <FUNC_InputData+0x620>)
 80008f4:	f8b3 371e 	ldrh.w	r3, [r3, #1822]	; 0x71e
 80008f8:	4618      	mov	r0, r3
 80008fa:	f00e f83f 	bl	800e97c <__aeabi_ui2d>
 80008fe:	4602      	mov	r2, r0
 8000900:	460b      	mov	r3, r1
 8000902:	4955      	ldr	r1, [pc, #340]	; (8000a58 <FUNC_InputData+0x620>)
 8000904:	f501 61a6 	add.w	r1, r1, #1328	; 0x530
 8000908:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S26>/Data Store Read' */
/*@>fb86*/VCU_B./*@>10f83*/DataStoreRead_h/*@>6b87*/ = /*@>100b3*/VCU_DW./*@>111a5*/VAR_IN_gear;
 800090c:	4b54      	ldr	r3, [pc, #336]	; (8000a60 <FUNC_InputData+0x628>)
 800090e:	f893 2140 	ldrb.w	r2, [r3, #320]	; 0x140
 8000912:	4b51      	ldr	r3, [pc, #324]	; (8000a58 <FUNC_InputData+0x620>)
 8000914:	f883 276b 	strb.w	r2, [r3, #1899]	; 0x76b
/* ArithShift: '<S26>/Shift Arithmetic' */
/*@>fb8c*/VCU_B./*@>10f86*/ShiftArithmetic/*@>8868*/ = /*@>e643*/(uint8_T)(/*@>e641*/(uint32_T)/*@>fb92*/VCU_B./*@>10f89*/DataStoreRead_h/*@>e444*/ >> /*@>e440*/3);
 8000918:	4b4f      	ldr	r3, [pc, #316]	; (8000a58 <FUNC_InputData+0x620>)
 800091a:	f893 376b 	ldrb.w	r3, [r3, #1899]	; 0x76b
 800091e:	08db      	lsrs	r3, r3, #3
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b4d      	ldr	r3, [pc, #308]	; (8000a58 <FUNC_InputData+0x620>)
 8000924:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c
/* DataTypeConversion: '<S26>/Data Type Conversion3' */
/*@>fb98*/VCU_B./*@>10f8c*/DataTypeConversion3/*@>6b8b*/ = /*@>fb9e*/VCU_B./*@>10f8f*/ShiftArithmetic;
 8000928:	4b4b      	ldr	r3, [pc, #300]	; (8000a58 <FUNC_InputData+0x620>)
 800092a:	f893 376c 	ldrb.w	r3, [r3, #1900]	; 0x76c
 800092e:	4618      	mov	r0, r3
 8000930:	f00e f824 	bl	800e97c <__aeabi_ui2d>
 8000934:	4602      	mov	r2, r0
 8000936:	460b      	mov	r3, r1
 8000938:	4947      	ldr	r1, [pc, #284]	; (8000a58 <FUNC_InputData+0x620>)
 800093a:	f501 61a7 	add.w	r1, r1, #1336	; 0x538
 800093e:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S27>/Data Store Read1' */
/*@>fba4*/VCU_B./*@>10f92*/DataStoreRead1_g5/*@>6b8d*/ = /*@>100b9*/VCU_DW./*@>111a8*/VAR_IN_t_water_engine;
 8000942:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <FUNC_InputData+0x628>)
 8000944:	f893 2145 	ldrb.w	r2, [r3, #325]	; 0x145
 8000948:	4b43      	ldr	r3, [pc, #268]	; (8000a58 <FUNC_InputData+0x620>)
 800094a:	f883 276d 	strb.w	r2, [r3, #1901]	; 0x76d
/* Gain: '<S30>/Factor' */
/*@>fbaa*/VCU_B./*@>10f95*/Factor_ba/*@>6b95*/ = /*@>e64d*/(uint16_T)(/*@>fbb0*/VCU_B./*@>10f98*/DataStoreRead1_g5/*@>e43c*/ << /*@>e43b*/7);
 800094e:	4b42      	ldr	r3, [pc, #264]	; (8000a58 <FUNC_InputData+0x620>)
 8000950:	f893 376d 	ldrb.w	r3, [r3, #1901]	; 0x76d
 8000954:	b29b      	uxth	r3, r3
 8000956:	01db      	lsls	r3, r3, #7
 8000958:	b29a      	uxth	r2, r3
 800095a:	4b3f      	ldr	r3, [pc, #252]	; (8000a58 <FUNC_InputData+0x620>)
 800095c:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
/* Sum: '<S30>/Add1' incorporates:
 *  Constant: '<S30>/Offset'
 */
/*@>fbb6*/VCU_B./*@>10f9b*/Add1_iu/*@>88cd*/ = /*@>e650*/(real_T)/*@>fbbc*/VCU_B./*@>10f9e*/Factor_ba/*@>e430*/ * /*@>e42f*/0.0078125/*@>88ca*/ + /*@>e39a*/-50.0;
 8000960:	4b3d      	ldr	r3, [pc, #244]	; (8000a58 <FUNC_InputData+0x620>)
 8000962:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8000966:	4618      	mov	r0, r3
 8000968:	f00e f808 	bl	800e97c <__aeabi_ui2d>
 800096c:	4602      	mov	r2, r0
 800096e:	460b      	mov	r3, r1
 8000970:	4610      	mov	r0, r2
 8000972:	4619      	mov	r1, r3
 8000974:	f04f 0200 	mov.w	r2, #0
 8000978:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800097c:	f00e f874 	bl	800ea68 <__aeabi_dmul>
 8000980:	4602      	mov	r2, r0
 8000982:	460b      	mov	r3, r1
 8000984:	4610      	mov	r0, r2
 8000986:	4619      	mov	r1, r3
 8000988:	f04f 0200 	mov.w	r2, #0
 800098c:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <FUNC_InputData+0x62c>)
 800098e:	f00d feb7 	bl	800e700 <__aeabi_dsub>
 8000992:	4602      	mov	r2, r0
 8000994:	460b      	mov	r3, r1
 8000996:	4930      	ldr	r1, [pc, #192]	; (8000a58 <FUNC_InputData+0x620>)
 8000998:	f501 61a8 	add.w	r1, r1, #1344	; 0x540
 800099c:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S11>/Data Store Read1' */
/*@>fbc2*/VCU_B./*@>10fa1*/TeleFansDC_h/*@>6b9c*/ = /*@>100bf*/VCU_DW./*@>111ab*/VAR_IN_TeleFansDC;
 80009a0:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <FUNC_InputData+0x628>)
 80009a2:	f893 2146 	ldrb.w	r2, [r3, #326]	; 0x146
 80009a6:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <FUNC_InputData+0x620>)
 80009a8:	f883 276e 	strb.w	r2, [r3, #1902]	; 0x76e
/* DataTypeConversion: '<S11>/Data Type Conversion1' */
/*@>fbc8*/VCU_B./*@>10fa4*/TeleFansDC/*@>6b9f*/ = /*@>fbce*/VCU_B./*@>10fa7*/TeleFansDC_h;
 80009ac:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <FUNC_InputData+0x620>)
 80009ae:	f893 376e 	ldrb.w	r3, [r3, #1902]	; 0x76e
 80009b2:	4618      	mov	r0, r3
 80009b4:	f00d ffe2 	bl	800e97c <__aeabi_ui2d>
 80009b8:	4602      	mov	r2, r0
 80009ba:	460b      	mov	r3, r1
 80009bc:	4926      	ldr	r1, [pc, #152]	; (8000a58 <FUNC_InputData+0x620>)
 80009be:	f501 61a9 	add.w	r1, r1, #1352	; 0x548
 80009c2:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S31>/Factor' */
/*@>fbd4*/VCU_B./*@>10faa*/Factor_kk/*@>6ba7*/ = /*@>e39b*/0.01/*@>e42a*/ * /*@>fbda*/VCU_B./*@>10fad*/TeleFansDC;
 80009c6:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <FUNC_InputData+0x620>)
 80009c8:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 80009cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009d0:	4610      	mov	r0, r2
 80009d2:	4619      	mov	r1, r3
 80009d4:	a31e      	add	r3, pc, #120	; (adr r3, 8000a50 <FUNC_InputData+0x618>)
 80009d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009da:	f00e f845 	bl	800ea68 <__aeabi_dmul>
 80009de:	4602      	mov	r2, r0
 80009e0:	460b      	mov	r3, r1
 80009e2:	491d      	ldr	r1, [pc, #116]	; (8000a58 <FUNC_InputData+0x620>)
 80009e4:	f501 61aa 	add.w	r1, r1, #1360	; 0x550
 80009e8:	e9c1 2300 	strd	r2, r3, [r1]
/* Sum: '<S31>/Add1' */
/*@>fbe0*/VCU_B./*@>10fb0*/Add1_ik/*@>88d2*/ = /*@>fbe6*/VCU_B./*@>10fb3*/Factor_kk;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <FUNC_InputData+0x620>)
 80009ee:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 80009f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009f6:	4918      	ldr	r1, [pc, #96]	; (8000a58 <FUNC_InputData+0x620>)
 80009f8:	f501 61ab 	add.w	r1, r1, #1368	; 0x558
 80009fc:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S11>/Data Store Read8' */
/*@>fbec*/VCU_B./*@>10fb6*/TeleActiveBit_p/*@>6bae*/ = /*@>100c5*/VCU_DW./*@>111ae*/VAR_IN_TeleActiveBit;
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <FUNC_InputData+0x628>)
 8000a02:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <FUNC_InputData+0x620>)
 8000a08:	f883 276f 	strb.w	r2, [r3, #1903]	; 0x76f
/* DataTypeConversion: '<S11>/Data Type Conversion' */
/*@>fbf2*/VCU_B./*@>10fb9*/TeleActiveBit/*@>6bb1*/ = /*@>fbf8*/VCU_B./*@>10fbc*/TeleActiveBit_p;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <FUNC_InputData+0x620>)
 8000a0e:	f893 376f 	ldrb.w	r3, [r3, #1903]	; 0x76f
 8000a12:	4618      	mov	r0, r3
 8000a14:	f00d ffb2 	bl	800e97c <__aeabi_ui2d>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	490e      	ldr	r1, [pc, #56]	; (8000a58 <FUNC_InputData+0x620>)
 8000a1e:	f501 61ac 	add.w	r1, r1, #1376	; 0x560
 8000a22:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S12>/Data Store Read1' */
/*@>fbfe*/VCU_B./*@>10fbf*/DataStoreRead1_f/*@>6bb3*/ = /*@>100cb*/VCU_DW./*@>111b1*/VAR_IN_g_yaw_ABS_MSB;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <FUNC_InputData+0x628>)
 8000a28:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <FUNC_InputData+0x620>)
 8000a2e:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
/* DataStoreRead: '<S12>/Data Store Read3' */
/*@>fc04*/VCU_B./*@>10fc2*/DataStoreRead3_o/*@>6bb5*/ = /*@>100d1*/VCU_DW./*@>111b4*/VAR_IN_g_yaw_ABS_LSB;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <FUNC_InputData+0x628>)
 8000a34:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <FUNC_InputData+0x620>)
 8000a3a:	f883 2771 	strb.w	r2, [r3, #1905]	; 0x771
/* DataStoreRead: '<S12>/Data Store Read2' */
/*@>fc0a*/VCU_B./*@>10fc5*/DataStoreRead2_h/*@>6bb7*/ = /*@>100d7*/VCU_DW./*@>111b7*/VAR_IN_g_long_ABS_MSB;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <FUNC_InputData+0x628>)
 8000a40:	f893 2149 	ldrb.w	r2, [r3, #329]	; 0x149
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <FUNC_InputData+0x620>)
 8000a46:	f883 2772 	strb.w	r2, [r3, #1906]	; 0x772
 8000a4a:	e00d      	b.n	8000a68 <FUNC_InputData+0x630>
 8000a4c:	f3af 8000 	nop.w
 8000a50:	47ae147b 	.word	0x47ae147b
 8000a54:	3f847ae1 	.word	0x3f847ae1
 8000a58:	200008a8 	.word	0x200008a8
 8000a5c:	3ea00000 	.word	0x3ea00000
 8000a60:	200010c8 	.word	0x200010c8
 8000a64:	40490000 	.word	0x40490000
/* DataStoreRead: '<S12>/Data Store Read4' */
/*@>fc10*/VCU_B./*@>10fc8*/DataStoreRead4_l/*@>6bb9*/ = /*@>100dd*/VCU_DW./*@>111ba*/VAR_IN_g_long_ABS_LSB;
 8000a68:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <FUNC_InputData+0x6e0>)
 8000a6a:	f893 214b 	ldrb.w	r2, [r3, #331]	; 0x14b
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <FUNC_InputData+0x6e4>)
 8000a70:	f883 2773 	strb.w	r2, [r3, #1907]	; 0x773
/* DataStoreRead: '<S13>/Data Store Read9' */
/*@>fc16*/VCU_B./*@>10fcb*/DataStoreRead9/*@>6bbb*/ = /*@>100e3*/VCU_DW./*@>111bd*/VAR_IN_x_clutch_STW;
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <FUNC_InputData+0x6e0>)
 8000a76:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8000a7a:	4928      	ldr	r1, [pc, #160]	; (8000b1c <FUNC_InputData+0x6e4>)
 8000a7c:	f501 61ad 	add.w	r1, r1, #1384	; 0x568
 8000a80:	e9c1 2300 	strd	r2, r3, [r1]
/* Saturate: '<S13>/Saturation' incorporates:
 *  Gain: '<S13>/mV//V'
 */
/*@>fc1c*/VCU_B./*@>10fce*/mVV/*@>6bc3*/ = /*@>e39c*/0.001/*@>e426*/ * /*@>fc22*/VCU_B./*@>10fd1*/DataStoreRead9;
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <FUNC_InputData+0x6e4>)
 8000a86:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8000a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4619      	mov	r1, r3
 8000a92:	a31f      	add	r3, pc, #124	; (adr r3, 8000b10 <FUNC_InputData+0x6d8>)
 8000a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a98:	f00d ffe6 	bl	800ea68 <__aeabi_dmul>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	491e      	ldr	r1, [pc, #120]	; (8000b1c <FUNC_InputData+0x6e4>)
 8000aa2:	f501 61ae 	add.w	r1, r1, #1392	; 0x570
 8000aa6:	e9c1 2300 	strd	r2, r3, [r1]
/*@>e792*/if (/*@>fc28*/VCU_B./*@>10fd4*/mVV/*@>e78d*/ > /*@>ec36*/5.0) {
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <FUNC_InputData+0x6e4>)
 8000aac:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8000ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab4:	4610      	mov	r0, r2
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f04f 0200 	mov.w	r2, #0
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <FUNC_InputData+0x6e8>)
 8000abe:	f00e fa63 	bl	800ef88 <__aeabi_dcmpgt>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d008      	beq.n	8000ada <FUNC_InputData+0x6a2>
    /*@>fc34*/VCU_B./*@>10fda*/Saturation_e/*@>e794*/ = /*@>ec3c*/5.0;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <FUNC_InputData+0x6e4>)
 8000aca:	f503 61af 	add.w	r1, r3, #1400	; 0x578
 8000ace:	f04f 0200 	mov.w	r2, #0
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <FUNC_InputData+0x6e8>)
 8000ad4:	e9c1 2300 	strd	r2, r3, [r1]
 8000ad8:	e02e      	b.n	8000b38 <FUNC_InputData+0x700>
} else /*@>e795*/if (/*@>fc2e*/VCU_B./*@>10fd7*/mVV/*@>e78a*/ < /*@>ec38*/0.0) {
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <FUNC_InputData+0x6e4>)
 8000adc:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8000ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae4:	4610      	mov	r0, r2
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 0200 	mov.w	r2, #0
 8000aec:	f04f 0300 	mov.w	r3, #0
 8000af0:	f00e fa2c 	bl	800ef4c <__aeabi_dcmplt>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d014      	beq.n	8000b24 <FUNC_InputData+0x6ec>
    /*@>fc46*/VCU_B./*@>10fe3*/Saturation_e/*@>e797*/ = /*@>ec3a*/0.0;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <FUNC_InputData+0x6e4>)
 8000afc:	f503 61af 	add.w	r1, r3, #1400	; 0x578
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	f04f 0300 	mov.w	r3, #0
 8000b08:	e9c1 2300 	strd	r2, r3, [r1]
 8000b0c:	e014      	b.n	8000b38 <FUNC_InputData+0x700>
 8000b0e:	bf00      	nop
 8000b10:	d2f1a9fc 	.word	0xd2f1a9fc
 8000b14:	3f50624d 	.word	0x3f50624d
 8000b18:	200010c8 	.word	0x200010c8
 8000b1c:	200008a8 	.word	0x200008a8
 8000b20:	40140000 	.word	0x40140000
} else {
    /*@>fc3a*/VCU_B./*@>10fdd*/Saturation_e/*@>e791*/ = /*@>fc40*/VCU_B./*@>10fe0*/mVV;
 8000b24:	4bb4      	ldr	r3, [pc, #720]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000b26:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	49b2      	ldr	r1, [pc, #712]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000b30:	f501 61af 	add.w	r1, r1, #1400	; 0x578
 8000b34:	e9c1 2300 	strd	r2, r3, [r1]
}
/* End of Saturate: '<S13>/Saturation' */

/* Lookup_n-D: '<S13>/1-D Lookup Table' */
/*@>fc4c*/VCU_B./*@>10fe6*/x_clutch_STW/*@>8a75*/ = /*@>f30a*/look1_binlxpw(/*@>fc52*/VCU_B./*@>10fe9*/Saturation_e, /*@>ff44*/VCU_ConstP./*@>11133*/uDLookupTable_bp01Data, /*@>ff4a*/VCU_ConstP./*@>11136*/pooled6, /*@>e2f2*/1U);
 8000b38:	4baf      	ldr	r3, [pc, #700]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000b3a:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8000b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b42:	2101      	movs	r1, #1
 8000b44:	9100      	str	r1, [sp, #0]
 8000b46:	4610      	mov	r0, r2
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4aac      	ldr	r2, [pc, #688]	; (8000dfc <FUNC_InputData+0x9c4>)
 8000b4c:	4bac      	ldr	r3, [pc, #688]	; (8000e00 <FUNC_InputData+0x9c8>)
 8000b4e:	f005 f8cf 	bl	8005cf0 <look1_binlxpw>
 8000b52:	4602      	mov	r2, r0
 8000b54:	460b      	mov	r3, r1
 8000b56:	49a8      	ldr	r1, [pc, #672]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000b58:	f501 61b0 	add.w	r1, r1, #1408	; 0x580
 8000b5c:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S13>/Data Store Read10' */
/*@>fc58*/VCU_B./*@>10fec*/DataStoreRead10_b/*@>6bd2*/ = /*@>100e9*/VCU_DW./*@>111c0*/VAR_IN_STW_mue_tyre;
 8000b60:	4ba8      	ldr	r3, [pc, #672]	; (8000e04 <FUNC_InputData+0x9cc>)
 8000b62:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
 8000b66:	4ba4      	ldr	r3, [pc, #656]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000b68:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774
/* Gain: '<S36>/Factor' */
/*@>fc5e*/VCU_B./*@>10fef*/Factor_oq/*@>6bda*/ = /*@>e676*/(uint16_T)(/*@>e56a*/164U/*@>e421*/ * /*@>fc64*/VCU_B./*@>10ff2*/DataStoreRead10_b);
 8000b6c:	4ba2      	ldr	r3, [pc, #648]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000b6e:	f893 3774 	ldrb.w	r3, [r3, #1908]	; 0x774
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	461a      	mov	r2, r3
 8000b76:	0092      	lsls	r2, r2, #2
 8000b78:	441a      	add	r2, r3
 8000b7a:	00d2      	lsls	r2, r2, #3
 8000b7c:	4413      	add	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	4b9d      	ldr	r3, [pc, #628]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000b84:	f8a3 2722 	strh.w	r2, [r3, #1826]	; 0x722
/* Sum: '<S36>/Add1' */
/*@>fc6a*/VCU_B./*@>10ff5*/Add1_f1/*@>8939*/ = /*@>e679*/(real_T)/*@>fc70*/VCU_B./*@>10ff8*/Factor_oq/*@>e41a*/ * /*@>e419*/6.103515625E-5;
 8000b88:	4b9b      	ldr	r3, [pc, #620]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000b8a:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f00d fef4 	bl	800e97c <__aeabi_ui2d>
 8000b94:	4602      	mov	r2, r0
 8000b96:	460b      	mov	r3, r1
 8000b98:	4610      	mov	r0, r2
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f04f 0200 	mov.w	r2, #0
 8000ba0:	4b99      	ldr	r3, [pc, #612]	; (8000e08 <FUNC_InputData+0x9d0>)
 8000ba2:	f00d ff61 	bl	800ea68 <__aeabi_dmul>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	460b      	mov	r3, r1
 8000baa:	4993      	ldr	r1, [pc, #588]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000bac:	f501 61b1 	add.w	r1, r1, #1416	; 0x588
 8000bb0:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S13>/Data Store Read' */
/*@>fc76*/VCU_B./*@>10ffb*/DataStoreRead_c/*@>6be1*/ = /*@>100ef*/VCU_DW./*@>111c3*/VAR_IN_STW_shift_up_request;
 8000bb4:	4b93      	ldr	r3, [pc, #588]	; (8000e04 <FUNC_InputData+0x9cc>)
 8000bb6:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 8000bba:	4b8f      	ldr	r3, [pc, #572]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000bbc:	f883 2775 	strb.w	r2, [r3, #1909]	; 0x775
/* DataTypeConversion: '<S13>/Data Type Conversion' */
/*@>fc7c*/VCU_B./*@>10ffe*/STW_shift_up_request/*@>6be4*/ = /*@>fc82*/VCU_B./*@>11001*/DataStoreRead_c;
 8000bc0:	4b8d      	ldr	r3, [pc, #564]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000bc2:	f893 3775 	ldrb.w	r3, [r3, #1909]	; 0x775
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f00d fed8 	bl	800e97c <__aeabi_ui2d>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4989      	ldr	r1, [pc, #548]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000bd2:	f501 61b2 	add.w	r1, r1, #1424	; 0x590
 8000bd6:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S13>/Data Store Read1' */
/*@>fc88*/VCU_B./*@>11004*/DataStoreRead1_j/*@>6be6*/ = /*@>100f5*/VCU_DW./*@>111c6*/VAR_IN_STW_shift_down_request;
 8000bda:	4b8a      	ldr	r3, [pc, #552]	; (8000e04 <FUNC_InputData+0x9cc>)
 8000bdc:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
 8000be0:	4b85      	ldr	r3, [pc, #532]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000be2:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776
/* DataTypeConversion: '<S13>/Data Type Conversion1' */
/*@>fc8e*/VCU_B./*@>11007*/STW_shift_down_request/*@>6be9*/ = /*@>fc94*/VCU_B./*@>1100a*/DataStoreRead1_j;
 8000be6:	4b84      	ldr	r3, [pc, #528]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000be8:	f893 3776 	ldrb.w	r3, [r3, #1910]	; 0x776
 8000bec:	4618      	mov	r0, r3
 8000bee:	f00d fec5 	bl	800e97c <__aeabi_ui2d>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	4980      	ldr	r1, [pc, #512]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000bf8:	f501 61b3 	add.w	r1, r1, #1432	; 0x598
 8000bfc:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S13>/Data Store Read2' */
/*@>fc9a*/VCU_B./*@>1100d*/DataStoreRead2_i/*@>6beb*/ = /*@>100fb*/VCU_DW./*@>111c9*/VAR_IN_STW_transmission_mode;
 8000c00:	4b80      	ldr	r3, [pc, #512]	; (8000e04 <FUNC_InputData+0x9cc>)
 8000c02:	f893 214f 	ldrb.w	r2, [r3, #335]	; 0x14f
 8000c06:	4b7c      	ldr	r3, [pc, #496]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000c08:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
/* DataTypeConversion: '<S13>/Data Type Conversion6' */
/*@>fca0*/VCU_B./*@>11010*/STW_transmission_mode/*@>6bee*/ = /*@>fca6*/VCU_B./*@>11013*/DataStoreRead2_i;
 8000c0c:	4b7a      	ldr	r3, [pc, #488]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000c0e:	f893 3777 	ldrb.w	r3, [r3, #1911]	; 0x777
 8000c12:	4618      	mov	r0, r3
 8000c14:	f00d feb2 	bl	800e97c <__aeabi_ui2d>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4976      	ldr	r1, [pc, #472]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000c1e:	f501 61b4 	add.w	r1, r1, #1440	; 0x5a0
 8000c22:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S14>/Data Store Read9' */
/*@>fcac*/VCU_B./*@>11016*/DataStoreRead9_m/*@>6bf0*/ = /*@>10101*/VCU_DW./*@>111cc*/VAR_IN_x_RH_F;
 8000c26:	4b77      	ldr	r3, [pc, #476]	; (8000e04 <FUNC_InputData+0x9cc>)
 8000c28:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8000c2c:	4972      	ldr	r1, [pc, #456]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000c2e:	f501 61b5 	add.w	r1, r1, #1448	; 0x5a8
 8000c32:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V19' */
/*@>fcb2*/VCU_B./*@>11019*/mVV19/*@>6bf8*/ = /*@>e39f*/0.001/*@>e414*/ * /*@>fcb8*/VCU_B./*@>1101c*/DataStoreRead9_m;
 8000c36:	4b70      	ldr	r3, [pc, #448]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000c38:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 8000c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c40:	4610      	mov	r0, r2
 8000c42:	4619      	mov	r1, r3
 8000c44:	a36a      	add	r3, pc, #424	; (adr r3, 8000df0 <FUNC_InputData+0x9b8>)
 8000c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4a:	f00d ff0d 	bl	800ea68 <__aeabi_dmul>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	460b      	mov	r3, r1
 8000c52:	4969      	ldr	r1, [pc, #420]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000c54:	f501 61b6 	add.w	r1, r1, #1456	; 0x5b0
 8000c58:	e9c1 2300 	strd	r2, r3, [r1]
/* Lookup_n-D: '<S14>/1-D Lookup Table4' */
/*@>fcbe*/VCU_B./*@>1101f*/x_RH_F/*@>8a9e*/ = /*@>f30e*/look1_binlxpw(/*@>fcc4*/VCU_B./*@>11022*/mVV19, /*@>ff50*/VCU_ConstP./*@>11139*/pooled8, /*@>ff56*/VCU_ConstP./*@>1113c*/pooled7, /*@>e2f8*/1U);
 8000c5c:	4b66      	ldr	r3, [pc, #408]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000c5e:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8000c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c66:	2101      	movs	r1, #1
 8000c68:	9100      	str	r1, [sp, #0]
 8000c6a:	4610      	mov	r0, r2
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4a67      	ldr	r2, [pc, #412]	; (8000e0c <FUNC_InputData+0x9d4>)
 8000c70:	4b67      	ldr	r3, [pc, #412]	; (8000e10 <FUNC_InputData+0x9d8>)
 8000c72:	f005 f83d 	bl	8005cf0 <look1_binlxpw>
 8000c76:	4602      	mov	r2, r0
 8000c78:	460b      	mov	r3, r1
 8000c7a:	495f      	ldr	r1, [pc, #380]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000c7c:	f501 61b7 	add.w	r1, r1, #1464	; 0x5b8
 8000c80:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S14>/Data Store Read10' */
/*@>fcca*/VCU_B./*@>11025*/DataStoreRead10/*@>6c01*/ = /*@>10107*/VCU_DW./*@>111cf*/VAR_IN_x_RH_RL;
 8000c84:	4b5f      	ldr	r3, [pc, #380]	; (8000e04 <FUNC_InputData+0x9cc>)
 8000c86:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000c8a:	495b      	ldr	r1, [pc, #364]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000c8c:	f501 61b8 	add.w	r1, r1, #1472	; 0x5c0
 8000c90:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V20' */
/*@>fcd0*/VCU_B./*@>11028*/mVV20/*@>6c09*/ = /*@>e3a0*/0.001/*@>e410*/ * /*@>fcd6*/VCU_B./*@>1102b*/DataStoreRead10;
 8000c94:	4b58      	ldr	r3, [pc, #352]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000c96:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8000c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	a353      	add	r3, pc, #332	; (adr r3, 8000df0 <FUNC_InputData+0x9b8>)
 8000ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca8:	f00d fede 	bl	800ea68 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4951      	ldr	r1, [pc, #324]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000cb2:	f501 61b9 	add.w	r1, r1, #1480	; 0x5c8
 8000cb6:	e9c1 2300 	strd	r2, r3, [r1]
/* Lookup_n-D: '<S14>/1-D Lookup Table5' */
/*@>fcdc*/VCU_B./*@>1102e*/x_RH_RL/*@>8ac7*/ = /*@>f312*/look1_binlxpw(/*@>fce2*/VCU_B./*@>11031*/mVV20, /*@>ff5c*/VCU_ConstP./*@>1113f*/uDLookupTable5_bp01Data, /*@>ff62*/VCU_ConstP./*@>11142*/pooled7, /*@>e2fe*/1U);
 8000cba:	4b4f      	ldr	r3, [pc, #316]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000cbc:	f503 63b9 	add.w	r3, r3, #1480	; 0x5c8
 8000cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	9100      	str	r1, [sp, #0]
 8000cc8:	4610      	mov	r0, r2
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4a51      	ldr	r2, [pc, #324]	; (8000e14 <FUNC_InputData+0x9dc>)
 8000cce:	4b50      	ldr	r3, [pc, #320]	; (8000e10 <FUNC_InputData+0x9d8>)
 8000cd0:	f005 f80e 	bl	8005cf0 <look1_binlxpw>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	4947      	ldr	r1, [pc, #284]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000cda:	f501 61ba 	add.w	r1, r1, #1488	; 0x5d0
 8000cde:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S14>/Data Store Read11' */
/*@>fce8*/VCU_B./*@>11034*/DataStoreRead11/*@>6c12*/ = /*@>1010d*/VCU_DW./*@>111d2*/VAR_IN_x_RH_RR;
 8000ce2:	4b48      	ldr	r3, [pc, #288]	; (8000e04 <FUNC_InputData+0x9cc>)
 8000ce4:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8000ce8:	4943      	ldr	r1, [pc, #268]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000cea:	f501 61bb 	add.w	r1, r1, #1496	; 0x5d8
 8000cee:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V21' */
/*@>fcee*/VCU_B./*@>11037*/mVV21/*@>6c1a*/ = /*@>e3a1*/0.001/*@>e40c*/ * /*@>fcf4*/VCU_B./*@>1103a*/DataStoreRead11;
 8000cf2:	4b41      	ldr	r3, [pc, #260]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000cf4:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8000cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	a33b      	add	r3, pc, #236	; (adr r3, 8000df0 <FUNC_InputData+0x9b8>)
 8000d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d06:	f00d feaf 	bl	800ea68 <__aeabi_dmul>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	493a      	ldr	r1, [pc, #232]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000d10:	f501 61bc 	add.w	r1, r1, #1504	; 0x5e0
 8000d14:	e9c1 2300 	strd	r2, r3, [r1]
/* Lookup_n-D: '<S14>/1-D Lookup Table6' */
/*@>fcfa*/VCU_B./*@>1103d*/x_RH_RR/*@>8af0*/ = /*@>f316*/look1_binlxpw(/*@>fd00*/VCU_B./*@>11040*/mVV21, /*@>ff68*/VCU_ConstP./*@>11145*/pooled8, /*@>ff6e*/VCU_ConstP./*@>11148*/pooled7, /*@>e304*/1U);
 8000d18:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000d1a:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
 8000d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d22:	2101      	movs	r1, #1
 8000d24:	9100      	str	r1, [sp, #0]
 8000d26:	4610      	mov	r0, r2
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4a38      	ldr	r2, [pc, #224]	; (8000e0c <FUNC_InputData+0x9d4>)
 8000d2c:	4b38      	ldr	r3, [pc, #224]	; (8000e10 <FUNC_InputData+0x9d8>)
 8000d2e:	f004 ffdf 	bl	8005cf0 <look1_binlxpw>
 8000d32:	4602      	mov	r2, r0
 8000d34:	460b      	mov	r3, r1
 8000d36:	4930      	ldr	r1, [pc, #192]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000d38:	f501 61bd 	add.w	r1, r1, #1512	; 0x5e8
 8000d3c:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S14>/Data Store Read2' */
/*@>fd06*/VCU_B./*@>11043*/DataStoreRead2_k/*@>6c23*/ = /*@>10113*/VCU_DW./*@>111d5*/VAR_IN_p_pneum;
 8000d40:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <FUNC_InputData+0x9cc>)
 8000d42:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
 8000d46:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000d48:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
/* Gain: '<S14>/CAN to bar' */
/*@>fd0c*/VCU_B./*@>11046*/p_pneum/*@>6c2b*/ = /*@>e6a6*/(uint16_T)(/*@>e56c*/164U/*@>e407*/ * /*@>fd12*/VCU_B./*@>11049*/DataStoreRead2_k);
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000d4e:	f893 3778 	ldrb.w	r3, [r3, #1912]	; 0x778
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	461a      	mov	r2, r3
 8000d56:	0092      	lsls	r2, r2, #2
 8000d58:	441a      	add	r2, r3
 8000d5a:	00d2      	lsls	r2, r2, #3
 8000d5c:	4413      	add	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000d64:	f8a3 2724 	strh.w	r2, [r3, #1828]	; 0x724
/* DataStoreRead: '<S14>/Data Store Read3' */
/*@>fd18*/VCU_B./*@>1104c*/DataStoreRead3/*@>6c2d*/ = /*@>10119*/VCU_DW./*@>111d8*/VAR_IN_x_clutch;
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <FUNC_InputData+0x9cc>)
 8000d6a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8000d6e:	4922      	ldr	r1, [pc, #136]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000d70:	f501 61be 	add.w	r1, r1, #1520	; 0x5f0
 8000d74:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V14' */
/*@>fd1e*/VCU_B./*@>1104f*/mVV14/*@>6c35*/ = /*@>e3a2*/0.001/*@>e401*/ * /*@>fd24*/VCU_B./*@>11052*/DataStoreRead3;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000d7a:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8000d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d82:	4610      	mov	r0, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	a31a      	add	r3, pc, #104	; (adr r3, 8000df0 <FUNC_InputData+0x9b8>)
 8000d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8c:	f00d fe6c 	bl	800ea68 <__aeabi_dmul>
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4918      	ldr	r1, [pc, #96]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000d96:	f501 61bf 	add.w	r1, r1, #1528	; 0x5f8
 8000d9a:	e9c1 2300 	strd	r2, r3, [r1]
/* Saturate: '<S14>/Saturation' incorporates:
 *  Lookup_n-D: '<S14>/Clutch_Pos2'
 */
/*@>fd2a*/VCU_B./*@>11055*/x_clutch/*@>8b19*/ = /*@>f31a*/look1_binlxpw(/*@>fd30*/VCU_B./*@>11058*/mVV14, /*@>ff74*/VCU_ConstP./*@>1114b*/Clutch_Pos2_bp01Data, /*@>ff7a*/VCU_ConstP./*@>1114e*/pooled6, /*@>e30a*/1U);
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000da0:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 8000da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da8:	2101      	movs	r1, #1
 8000daa:	9100      	str	r1, [sp, #0]
 8000dac:	4610      	mov	r0, r2
 8000dae:	4619      	mov	r1, r3
 8000db0:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <FUNC_InputData+0x9e0>)
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <FUNC_InputData+0x9c8>)
 8000db4:	f004 ff9c 	bl	8005cf0 <look1_binlxpw>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	490e      	ldr	r1, [pc, #56]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000dbe:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
 8000dc2:	e9c1 2300 	strd	r2, r3, [r1]
/*@>e7dd*/if (/*@>fd36*/VCU_B./*@>1105b*/x_clutch/*@>e7d8*/ > /*@>ec3e*/25.0) {
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000dc8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <FUNC_InputData+0x9e4>)
 8000dda:	f00e f8d5 	bl	800ef88 <__aeabi_dcmpgt>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d021      	beq.n	8000e28 <FUNC_InputData+0x9f0>
    /*@>fd42*/VCU_B./*@>11061*/x_clutch_b/*@>e7df*/ = /*@>ec44*/25.0;
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <FUNC_InputData+0x9c0>)
 8000de6:	f503 61c1 	add.w	r1, r3, #1544	; 0x608
 8000dea:	f04f 0200 	mov.w	r2, #0
 8000dee:	e017      	b.n	8000e20 <FUNC_InputData+0x9e8>
 8000df0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000df4:	3f50624d 	.word	0x3f50624d
 8000df8:	200008a8 	.word	0x200008a8
 8000dfc:	0800f1f8 	.word	0x0800f1f8
 8000e00:	0800f1e8 	.word	0x0800f1e8
 8000e04:	200010c8 	.word	0x200010c8
 8000e08:	3f100000 	.word	0x3f100000
 8000e0c:	0800f218 	.word	0x0800f218
 8000e10:	0800f208 	.word	0x0800f208
 8000e14:	0800f228 	.word	0x0800f228
 8000e18:	0800f238 	.word	0x0800f238
 8000e1c:	40390000 	.word	0x40390000
 8000e20:	4ba7      	ldr	r3, [pc, #668]	; (80010c0 <FUNC_InputData+0xc88>)
 8000e22:	e9c1 2300 	strd	r2, r3, [r1]
 8000e26:	e023      	b.n	8000e70 <FUNC_InputData+0xa38>
} else /*@>e7e0*/if (/*@>fd3c*/VCU_B./*@>1105e*/x_clutch/*@>e7d5*/ < /*@>ec40*/0.0) {
 8000e28:	4ba6      	ldr	r3, [pc, #664]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000e2a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	f00e f885 	bl	800ef4c <__aeabi_dcmplt>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d009      	beq.n	8000e5c <FUNC_InputData+0xa24>
    /*@>fd54*/VCU_B./*@>1106a*/x_clutch_b/*@>e7e2*/ = /*@>ec42*/0.0;
 8000e48:	4b9e      	ldr	r3, [pc, #632]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000e4a:	f503 61c1 	add.w	r1, r3, #1544	; 0x608
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	e9c1 2300 	strd	r2, r3, [r1]
 8000e5a:	e009      	b.n	8000e70 <FUNC_InputData+0xa38>
} else {
    /*@>fd48*/VCU_B./*@>11064*/x_clutch_b/*@>e7dc*/ = /*@>fd4e*/VCU_B./*@>11067*/x_clutch;
 8000e5c:	4b99      	ldr	r3, [pc, #612]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000e5e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e66:	4997      	ldr	r1, [pc, #604]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000e68:	f501 61c1 	add.w	r1, r1, #1544	; 0x608
 8000e6c:	e9c1 2300 	strd	r2, r3, [r1]
}
/* End of Saturate: '<S14>/Saturation' */

/* DataStoreRead: '<S14>/Data Store Read' */
/*@>fd5a*/VCU_B./*@>1106d*/DataStoreRead/*@>6c44*/ = /*@>1011f*/VCU_DW./*@>111db*/VAR_IN_Fans_dash_bit;
 8000e70:	4b95      	ldr	r3, [pc, #596]	; (80010c8 <FUNC_InputData+0xc90>)
 8000e72:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000e76:	4993      	ldr	r1, [pc, #588]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000e78:	f501 61c2 	add.w	r1, r1, #1552	; 0x610
 8000e7c:	e9c1 2300 	strd	r2, r3, [r1]
/* DataTypeConversion: '<S14>/Data Type Conversion10' */
/*@>fd60*/VCU_B./*@>11070*/Fans_dash_bit/*@>6c47*/ = (/*@>fd66*/VCU_B./*@>11073*/DataStoreRead/*@>e3fe*/ != /*@>e3fc*/0.0);
 8000e80:	4b90      	ldr	r3, [pc, #576]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000e82:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	460c      	mov	r4, r1
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4619      	mov	r1, r3
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	f04f 0300 	mov.w	r3, #0
 8000e9a:	f00e f84d 	bl	800ef38 <__aeabi_dcmpeq>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <FUNC_InputData+0xa70>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	461c      	mov	r4, r3
 8000ea8:	b2e3      	uxtb	r3, r4
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b85      	ldr	r3, [pc, #532]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000eae:	f883 280e 	strb.w	r2, [r3, #2062]	; 0x80e
/* DataStoreRead: '<S14>/Data Store Read1' */
/*@>fd6c*/VCU_B./*@>11076*/DataStoreRead1/*@>6c49*/ = /*@>10125*/VCU_DW./*@>111de*/VAR_IN_p_brake_R;
 8000eb2:	4b85      	ldr	r3, [pc, #532]	; (80010c8 <FUNC_InputData+0xc90>)
 8000eb4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000eb8:	4982      	ldr	r1, [pc, #520]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000eba:	f501 61c3 	add.w	r1, r1, #1560	; 0x618
 8000ebe:	e9c1 2300 	strd	r2, r3, [r1]
/* Saturate: '<S41>/Saturation' incorporates:
 *  Gain: '<S14>/mV//V11'
 */
/*@>fd72*/VCU_B./*@>11079*/mVV11/*@>6c51*/ = /*@>e3a5*/0.001/*@>e3f9*/ * /*@>fd78*/VCU_B./*@>1107c*/DataStoreRead1;
 8000ec2:	4b80      	ldr	r3, [pc, #512]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000ec4:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8000ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	a373      	add	r3, pc, #460	; (adr r3, 80010a0 <FUNC_InputData+0xc68>)
 8000ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed6:	f00d fdc7 	bl	800ea68 <__aeabi_dmul>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4979      	ldr	r1, [pc, #484]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000ee0:	f501 61c4 	add.w	r1, r1, #1568	; 0x620
 8000ee4:	e9c1 2300 	strd	r2, r3, [r1]
/*@>e828*/if (/*@>fd7e*/VCU_B./*@>1107f*/mVV11/*@>e823*/ > /*@>ec46*/4.8) {
 8000ee8:	4b76      	ldr	r3, [pc, #472]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000eea:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8000eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	a36c      	add	r3, pc, #432	; (adr r3, 80010a8 <FUNC_InputData+0xc70>)
 8000ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efc:	f00e f844 	bl	800ef88 <__aeabi_dcmpgt>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d008      	beq.n	8000f18 <FUNC_InputData+0xae0>
    /*@>fd8a*/VCU_B./*@>11085*/Saturation_i/*@>e82a*/ = /*@>ec4c*/4.8;
 8000f06:	4b6f      	ldr	r3, [pc, #444]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000f08:	f503 61c5 	add.w	r1, r3, #1576	; 0x628
 8000f0c:	a366      	add	r3, pc, #408	; (adr r3, 80010a8 <FUNC_InputData+0xc70>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	e9c1 2300 	strd	r2, r3, [r1]
 8000f16:	e021      	b.n	8000f5c <FUNC_InputData+0xb24>
} else /*@>e82b*/if (/*@>fd84*/VCU_B./*@>11082*/mVV11/*@>e820*/ < /*@>ec48*/0.5) {
 8000f18:	4b6a      	ldr	r3, [pc, #424]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000f1a:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	4610      	mov	r0, r2
 8000f24:	4619      	mov	r1, r3
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	4b68      	ldr	r3, [pc, #416]	; (80010cc <FUNC_InputData+0xc94>)
 8000f2c:	f00e f80e 	bl	800ef4c <__aeabi_dcmplt>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d008      	beq.n	8000f48 <FUNC_InputData+0xb10>
    /*@>fd9c*/VCU_B./*@>1108e*/Saturation_i/*@>e82d*/ = /*@>ec4a*/0.5;
 8000f36:	4b63      	ldr	r3, [pc, #396]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000f38:	f503 61c5 	add.w	r1, r3, #1576	; 0x628
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	4b62      	ldr	r3, [pc, #392]	; (80010cc <FUNC_InputData+0xc94>)
 8000f42:	e9c1 2300 	strd	r2, r3, [r1]
 8000f46:	e009      	b.n	8000f5c <FUNC_InputData+0xb24>
} else {
    /*@>fd90*/VCU_B./*@>11088*/Saturation_i/*@>e827*/ = /*@>fd96*/VCU_B./*@>1108b*/mVV11;
 8000f48:	4b5e      	ldr	r3, [pc, #376]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000f4a:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8000f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f52:	495c      	ldr	r1, [pc, #368]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000f54:	f501 61c5 	add.w	r1, r1, #1576	; 0x628
 8000f58:	e9c1 2300 	strd	r2, r3, [r1]
/* End of Saturate: '<S41>/Saturation' */

/* Sum: '<S41>/Add' incorporates:
 *  Constant: '<S41>/Offset'
 */
/*@>fda2*/VCU_B./*@>11091*/Add_ps/*@>8992*/ = /*@>fda8*/VCU_B./*@>11094*/Saturation_i/*@>898f*/ - /*@>e3a8*/0.5;
 8000f5c:	4b59      	ldr	r3, [pc, #356]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000f5e:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 8000f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f66:	4610      	mov	r0, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	4b57      	ldr	r3, [pc, #348]	; (80010cc <FUNC_InputData+0xc94>)
 8000f70:	f00d fbc6 	bl	800e700 <__aeabi_dsub>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4952      	ldr	r1, [pc, #328]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000f7a:	f501 61c6 	add.w	r1, r1, #1584	; 0x630
 8000f7e:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S41>/Sensitivity: 15,38 mV // bar' */
/*@>fdae*/VCU_B./*@>11097*/Sensitivity1538mVbar/*@>6c64*/ = /*@>e3a9*/65.019505851755525/*@>e3f5*/ * /*@>fdb4*/VCU_B./*@>1109a*/Add_ps;
 8000f82:	4b50      	ldr	r3, [pc, #320]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000f84:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	a347      	add	r3, pc, #284	; (adr r3, 80010b0 <FUNC_InputData+0xc78>)
 8000f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f96:	f00d fd67 	bl	800ea68 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4949      	ldr	r1, [pc, #292]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000fa0:	f501 61c7 	add.w	r1, r1, #1592	; 0x638
 8000fa4:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S14>/Data Store Read12' */
/*@>fdba*/VCU_B./*@>1109d*/DataStoreRead12/*@>6c66*/ = /*@>1012b*/VCU_DW./*@>111e1*/VAR_IN_U_Bat;
 8000fa8:	4b47      	ldr	r3, [pc, #284]	; (80010c8 <FUNC_InputData+0xc90>)
 8000faa:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8000fae:	4945      	ldr	r1, [pc, #276]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000fb0:	f501 61c8 	add.w	r1, r1, #1600	; 0x640
 8000fb4:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V13' */
/*@>fdc0*/VCU_B./*@>110a0*/U_Bat/*@>6c6e*/ = /*@>e3aa*/0.001/*@>e3f1*/ * /*@>fdc6*/VCU_B./*@>110a3*/DataStoreRead12;
 8000fb8:	4b42      	ldr	r3, [pc, #264]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000fba:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	a336      	add	r3, pc, #216	; (adr r3, 80010a0 <FUNC_InputData+0xc68>)
 8000fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fcc:	f00d fd4c 	bl	800ea68 <__aeabi_dmul>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	493b      	ldr	r1, [pc, #236]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000fd6:	f501 61c9 	add.w	r1, r1, #1608	; 0x648
 8000fda:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreRead: '<S14>/Data Store Read4' */
/*@>fdcc*/VCU_B./*@>110a6*/DataStoreRead4/*@>6c70*/ = /*@>10131*/VCU_DW./*@>111e4*/VAR_IN_f_FL;
 8000fde:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <FUNC_InputData+0xc90>)
 8000fe0:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8000fe4:	4937      	ldr	r1, [pc, #220]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000fe6:	f501 61ca 	add.w	r1, r1, #1616	; 0x650
 8000fea:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V15' */
/*@>fdd2*/VCU_B./*@>110a9*/mVV15/*@>6c78*/ = /*@>e3ab*/0.001/*@>e3ed*/ * /*@>fdd8*/VCU_B./*@>110ac*/DataStoreRead4;
 8000fee:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <FUNC_InputData+0xc8c>)
 8000ff0:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	a328      	add	r3, pc, #160	; (adr r3, 80010a0 <FUNC_InputData+0xc68>)
 8000ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001002:	f00d fd31 	bl	800ea68 <__aeabi_dmul>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	492e      	ldr	r1, [pc, #184]	; (80010c4 <FUNC_InputData+0xc8c>)
 800100c:	f501 61cb 	add.w	r1, r1, #1624	; 0x658
 8001010:	e9c1 2300 	strd	r2, r3, [r1]
/* Saturate: '<S42>/Saturation1' incorporates:
 *  Lookup_n-D: '<S42>/1-D Lookup Table1'
 */
/*@>fdde*/VCU_B./*@>110af*/uDLookupTable1/*@>8b42*/ = /*@>f31e*/look1_binlxpw(/*@>fde4*/VCU_B./*@>110b2*/mVV15, /*@>ff80*/VCU_ConstP./*@>11151*/uDLookupTable1_bp01Data, /*@>ff86*/VCU_ConstP./*@>11154*/uDLookupTable1_tableData, /*@>e310*/1U);
 8001014:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <FUNC_InputData+0xc8c>)
 8001016:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	2101      	movs	r1, #1
 8001020:	9100      	str	r1, [sp, #0]
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	4a2a      	ldr	r2, [pc, #168]	; (80010d0 <FUNC_InputData+0xc98>)
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <FUNC_InputData+0xc9c>)
 800102a:	f004 fe61 	bl	8005cf0 <look1_binlxpw>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4924      	ldr	r1, [pc, #144]	; (80010c4 <FUNC_InputData+0xc8c>)
 8001034:	f501 61cc 	add.w	r1, r1, #1632	; 0x660
 8001038:	e9c1 2300 	strd	r2, r3, [r1]
/*@>e873*/if (/*@>fdea*/VCU_B./*@>110b5*/uDLookupTable1/*@>e86e*/ > /*@>ec4e*/9000.0) {
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <FUNC_InputData+0xc8c>)
 800103e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	a31b      	add	r3, pc, #108	; (adr r3, 80010b8 <FUNC_InputData+0xc80>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f00d ff9a 	bl	800ef88 <__aeabi_dcmpgt>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d008      	beq.n	800106c <FUNC_InputData+0xc34>
    /*@>fdf6*/VCU_B./*@>110bb*/Saturation1_e/*@>e875*/ = /*@>ec54*/9000.0;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <FUNC_InputData+0xc8c>)
 800105c:	f503 61cd 	add.w	r1, r3, #1640	; 0x668
 8001060:	a315      	add	r3, pc, #84	; (adr r3, 80010b8 <FUNC_InputData+0xc80>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	e9c1 2300 	strd	r2, r3, [r1]
 800106a:	e03f      	b.n	80010ec <FUNC_InputData+0xcb4>
} else /*@>e876*/if (/*@>fdf0*/VCU_B./*@>110b8*/uDLookupTable1/*@>e86b*/ < /*@>ec50*/0.0) {
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <FUNC_InputData+0xc8c>)
 800106e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	f00d ff63 	bl	800ef4c <__aeabi_dcmplt>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d025      	beq.n	80010d8 <FUNC_InputData+0xca0>
    /*@>fe08*/VCU_B./*@>110c4*/Saturation1_e/*@>e878*/ = /*@>ec52*/0.0;
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <FUNC_InputData+0xc8c>)
 800108e:	f503 61cd 	add.w	r1, r3, #1640	; 0x668
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	e9c1 2300 	strd	r2, r3, [r1]
 800109e:	e025      	b.n	80010ec <FUNC_InputData+0xcb4>
 80010a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80010a4:	3f50624d 	.word	0x3f50624d
 80010a8:	33333333 	.word	0x33333333
 80010ac:	40133333 	.word	0x40133333
 80010b0:	9578d7b8 	.word	0x9578d7b8
 80010b4:	4050413f 	.word	0x4050413f
 80010b8:	00000000 	.word	0x00000000
 80010bc:	40c19400 	.word	0x40c19400
 80010c0:	40390000 	.word	0x40390000
 80010c4:	200008a8 	.word	0x200008a8
 80010c8:	200010c8 	.word	0x200010c8
 80010cc:	3fe00000 	.word	0x3fe00000
 80010d0:	0800f258 	.word	0x0800f258
 80010d4:	0800f248 	.word	0x0800f248
} else {
    /*@>fdfc*/VCU_B./*@>110be*/Saturation1_e/*@>e872*/ = /*@>fe02*/VCU_B./*@>110c1*/uDLookupTable1;
 80010d8:	4ba5      	ldr	r3, [pc, #660]	; (8001370 <FUNC_InputData+0xf38>)
 80010da:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	49a3      	ldr	r1, [pc, #652]	; (8001370 <FUNC_InputData+0xf38>)
 80010e4:	f501 61cd 	add.w	r1, r1, #1640	; 0x668
 80010e8:	e9c1 2300 	strd	r2, r3, [r1]
}
/* End of Saturate: '<S42>/Saturation1' */

/* DataStoreRead: '<S14>/Data Store Read5' */
/*@>fe0e*/VCU_B./*@>110c7*/DataStoreRead5/*@>6c87*/ = /*@>10137*/VCU_DW./*@>111e7*/VAR_IN_f_FR;
 80010ec:	4ba1      	ldr	r3, [pc, #644]	; (8001374 <FUNC_InputData+0xf3c>)
 80010ee:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80010f2:	499f      	ldr	r1, [pc, #636]	; (8001370 <FUNC_InputData+0xf38>)
 80010f4:	f501 61ce 	add.w	r1, r1, #1648	; 0x670
 80010f8:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V16' */
/*@>fe14*/VCU_B./*@>110ca*/mVV16/*@>6c8f*/ = /*@>e3ae*/0.001/*@>e3e9*/ * /*@>fe1a*/VCU_B./*@>110cd*/DataStoreRead5;
 80010fc:	4b9c      	ldr	r3, [pc, #624]	; (8001370 <FUNC_InputData+0xf38>)
 80010fe:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	a395      	add	r3, pc, #596	; (adr r3, 8001360 <FUNC_InputData+0xf28>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f00d fcaa 	bl	800ea68 <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4995      	ldr	r1, [pc, #596]	; (8001370 <FUNC_InputData+0xf38>)
 800111a:	f501 61cf 	add.w	r1, r1, #1656	; 0x678
 800111e:	e9c1 2300 	strd	r2, r3, [r1]
/* Saturate: '<S43>/Saturation1' incorporates:
 *  Lookup_n-D: '<S43>/1-D Lookup Table1'
 */
/*@>fe20*/VCU_B./*@>110d0*/uDLookupTable1_k/*@>8b6b*/ = /*@>f322*/look1_binlxpw(/*@>fe26*/VCU_B./*@>110d3*/mVV16, /*@>ff8c*/VCU_ConstP./*@>11157*/uDLookupTable1_bp01Data_d, /*@>ff92*/VCU_ConstP./*@>1115a*/uDLookupTable1_tableData_o, /*@>e316*/1U);
 8001122:	4b93      	ldr	r3, [pc, #588]	; (8001370 <FUNC_InputData+0xf38>)
 8001124:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	2101      	movs	r1, #1
 800112e:	9100      	str	r1, [sp, #0]
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	4a90      	ldr	r2, [pc, #576]	; (8001378 <FUNC_InputData+0xf40>)
 8001136:	4b91      	ldr	r3, [pc, #580]	; (800137c <FUNC_InputData+0xf44>)
 8001138:	f004 fdda 	bl	8005cf0 <look1_binlxpw>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	498b      	ldr	r1, [pc, #556]	; (8001370 <FUNC_InputData+0xf38>)
 8001142:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
 8001146:	e9c1 2300 	strd	r2, r3, [r1]
/*@>e8be*/if (/*@>fe2c*/VCU_B./*@>110d6*/uDLookupTable1_k/*@>e8b9*/ > /*@>ec56*/9000.0) {
 800114a:	4b89      	ldr	r3, [pc, #548]	; (8001370 <FUNC_InputData+0xf38>)
 800114c:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	a383      	add	r3, pc, #524	; (adr r3, 8001368 <FUNC_InputData+0xf30>)
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f00d ff13 	bl	800ef88 <__aeabi_dcmpgt>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d008      	beq.n	800117a <FUNC_InputData+0xd42>
    /*@>fe38*/VCU_B./*@>110dc*/Saturation1_n/*@>e8c0*/ = /*@>ec5c*/9000.0;
 8001168:	4b81      	ldr	r3, [pc, #516]	; (8001370 <FUNC_InputData+0xf38>)
 800116a:	f503 61d1 	add.w	r1, r3, #1672	; 0x688
 800116e:	a37e      	add	r3, pc, #504	; (adr r3, 8001368 <FUNC_InputData+0xf30>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	e9c1 2300 	strd	r2, r3, [r1]
 8001178:	e023      	b.n	80011c2 <FUNC_InputData+0xd8a>
} else /*@>e8c1*/if (/*@>fe32*/VCU_B./*@>110d9*/uDLookupTable1_k/*@>e8b6*/ < /*@>ec58*/0.0) {
 800117a:	4b7d      	ldr	r3, [pc, #500]	; (8001370 <FUNC_InputData+0xf38>)
 800117c:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	f00d fedc 	bl	800ef4c <__aeabi_dcmplt>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d009      	beq.n	80011ae <FUNC_InputData+0xd76>
    /*@>fe4a*/VCU_B./*@>110e5*/Saturation1_n/*@>e8c3*/ = /*@>ec5a*/0.0;
 800119a:	4b75      	ldr	r3, [pc, #468]	; (8001370 <FUNC_InputData+0xf38>)
 800119c:	f503 61d1 	add.w	r1, r3, #1672	; 0x688
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	e9c1 2300 	strd	r2, r3, [r1]
 80011ac:	e009      	b.n	80011c2 <FUNC_InputData+0xd8a>
} else {
    /*@>fe3e*/VCU_B./*@>110df*/Saturation1_n/*@>e8bd*/ = /*@>fe44*/VCU_B./*@>110e2*/uDLookupTable1_k;
 80011ae:	4b70      	ldr	r3, [pc, #448]	; (8001370 <FUNC_InputData+0xf38>)
 80011b0:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	496d      	ldr	r1, [pc, #436]	; (8001370 <FUNC_InputData+0xf38>)
 80011ba:	f501 61d1 	add.w	r1, r1, #1672	; 0x688
 80011be:	e9c1 2300 	strd	r2, r3, [r1]
}
/* End of Saturate: '<S43>/Saturation1' */

/* DataStoreRead: '<S14>/Data Store Read6' */
/*@>fe50*/VCU_B./*@>110e8*/DataStoreRead6/*@>6c9e*/ = /*@>1013d*/VCU_DW./*@>111ea*/VAR_IN_f_RL;
 80011c2:	4b6c      	ldr	r3, [pc, #432]	; (8001374 <FUNC_InputData+0xf3c>)
 80011c4:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80011c8:	4969      	ldr	r1, [pc, #420]	; (8001370 <FUNC_InputData+0xf38>)
 80011ca:	f501 61d2 	add.w	r1, r1, #1680	; 0x690
 80011ce:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V17' */
/*@>fe56*/VCU_B./*@>110eb*/mVV17/*@>6ca6*/ = /*@>e3b1*/0.001/*@>e3e5*/ * /*@>fe5c*/VCU_B./*@>110ee*/DataStoreRead6;
 80011d2:	4b67      	ldr	r3, [pc, #412]	; (8001370 <FUNC_InputData+0xf38>)
 80011d4:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	a35f      	add	r3, pc, #380	; (adr r3, 8001360 <FUNC_InputData+0xf28>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f00d fc3f 	bl	800ea68 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4960      	ldr	r1, [pc, #384]	; (8001370 <FUNC_InputData+0xf38>)
 80011f0:	f501 61d3 	add.w	r1, r1, #1688	; 0x698
 80011f4:	e9c1 2300 	strd	r2, r3, [r1]
/* Saturate: '<S44>/Saturation1' incorporates:
 *  Lookup_n-D: '<S44>/1-D Lookup Table1'
 */
/*@>fe62*/VCU_B./*@>110f1*/uDLookupTable1_p/*@>8b94*/ = /*@>f326*/look1_binlxpw(/*@>fe68*/VCU_B./*@>110f4*/mVV17, /*@>ff98*/VCU_ConstP./*@>1115d*/uDLookupTable1_bp01Data_o, /*@>ff9e*/VCU_ConstP./*@>11160*/uDLookupTable1_tableData_d, /*@>e31c*/4U);
 80011f8:	4b5d      	ldr	r3, [pc, #372]	; (8001370 <FUNC_InputData+0xf38>)
 80011fa:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 80011fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001202:	2104      	movs	r1, #4
 8001204:	9100      	str	r1, [sp, #0]
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	4a5d      	ldr	r2, [pc, #372]	; (8001380 <FUNC_InputData+0xf48>)
 800120c:	4b5d      	ldr	r3, [pc, #372]	; (8001384 <FUNC_InputData+0xf4c>)
 800120e:	f004 fd6f 	bl	8005cf0 <look1_binlxpw>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4956      	ldr	r1, [pc, #344]	; (8001370 <FUNC_InputData+0xf38>)
 8001218:	f501 61d4 	add.w	r1, r1, #1696	; 0x6a0
 800121c:	e9c1 2300 	strd	r2, r3, [r1]
/*@>e909*/if (/*@>fe6e*/VCU_B./*@>110f7*/uDLookupTable1_p/*@>e904*/ > /*@>ec5e*/9000.0) {
 8001220:	4b53      	ldr	r3, [pc, #332]	; (8001370 <FUNC_InputData+0xf38>)
 8001222:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	a34e      	add	r3, pc, #312	; (adr r3, 8001368 <FUNC_InputData+0xf30>)
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	f00d fea8 	bl	800ef88 <__aeabi_dcmpgt>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d008      	beq.n	8001250 <FUNC_InputData+0xe18>
    /*@>fe7a*/VCU_B./*@>110fd*/Saturation1_o/*@>e90b*/ = /*@>ec64*/9000.0;
 800123e:	4b4c      	ldr	r3, [pc, #304]	; (8001370 <FUNC_InputData+0xf38>)
 8001240:	f503 61d5 	add.w	r1, r3, #1704	; 0x6a8
 8001244:	a348      	add	r3, pc, #288	; (adr r3, 8001368 <FUNC_InputData+0xf30>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	e9c1 2300 	strd	r2, r3, [r1]
 800124e:	e023      	b.n	8001298 <FUNC_InputData+0xe60>
} else /*@>e90c*/if (/*@>fe74*/VCU_B./*@>110fa*/uDLookupTable1_p/*@>e901*/ < /*@>ec60*/0.0) {
 8001250:	4b47      	ldr	r3, [pc, #284]	; (8001370 <FUNC_InputData+0xf38>)
 8001252:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	f04f 0300 	mov.w	r3, #0
 8001266:	f00d fe71 	bl	800ef4c <__aeabi_dcmplt>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d009      	beq.n	8001284 <FUNC_InputData+0xe4c>
    /*@>fe8c*/VCU_B./*@>11106*/Saturation1_o/*@>e90e*/ = /*@>ec62*/0.0;
 8001270:	4b3f      	ldr	r3, [pc, #252]	; (8001370 <FUNC_InputData+0xf38>)
 8001272:	f503 61d5 	add.w	r1, r3, #1704	; 0x6a8
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	e9c1 2300 	strd	r2, r3, [r1]
 8001282:	e009      	b.n	8001298 <FUNC_InputData+0xe60>
} else {
    /*@>fe80*/VCU_B./*@>11100*/Saturation1_o/*@>e908*/ = /*@>fe86*/VCU_B./*@>11103*/uDLookupTable1_p;
 8001284:	4b3a      	ldr	r3, [pc, #232]	; (8001370 <FUNC_InputData+0xf38>)
 8001286:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	4938      	ldr	r1, [pc, #224]	; (8001370 <FUNC_InputData+0xf38>)
 8001290:	f501 61d5 	add.w	r1, r1, #1704	; 0x6a8
 8001294:	e9c1 2300 	strd	r2, r3, [r1]
}
/* End of Saturate: '<S44>/Saturation1' */

/* DataStoreRead: '<S14>/Data Store Read7' */
/*@>fe92*/VCU_B./*@>11109*/DataStoreRead7/*@>6cb5*/ = /*@>10143*/VCU_DW./*@>111ed*/VAR_IN_f_RR;
 8001298:	4b36      	ldr	r3, [pc, #216]	; (8001374 <FUNC_InputData+0xf3c>)
 800129a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800129e:	4934      	ldr	r1, [pc, #208]	; (8001370 <FUNC_InputData+0xf38>)
 80012a0:	f501 61d6 	add.w	r1, r1, #1712	; 0x6b0
 80012a4:	e9c1 2300 	strd	r2, r3, [r1]
/* Gain: '<S14>/mV//V18' */
/*@>fe98*/VCU_B./*@>1110c*/mVV18/*@>6cbd*/ = /*@>e3b4*/0.001/*@>e3e1*/ * /*@>fe9e*/VCU_B./*@>1110f*/DataStoreRead7;
 80012a8:	4b31      	ldr	r3, [pc, #196]	; (8001370 <FUNC_InputData+0xf38>)
 80012aa:	f503 63d6 	add.w	r3, r3, #1712	; 0x6b0
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	a32a      	add	r3, pc, #168	; (adr r3, 8001360 <FUNC_InputData+0xf28>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f00d fbd4 	bl	800ea68 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	492a      	ldr	r1, [pc, #168]	; (8001370 <FUNC_InputData+0xf38>)
 80012c6:	f501 61d7 	add.w	r1, r1, #1720	; 0x6b8
 80012ca:	e9c1 2300 	strd	r2, r3, [r1]
/* Saturate: '<S45>/Saturation1' incorporates:
 *  Lookup_n-D: '<S45>/1-D Lookup Table1'
 */
/*@>fea4*/VCU_B./*@>11112*/uDLookupTable1_kb/*@>8bbd*/ = /*@>f32a*/look1_binlxpw(/*@>feaa*/VCU_B./*@>11115*/mVV18, /*@>ffa4*/VCU_ConstP./*@>11163*/uDLookupTable1_bp01Data_n, /*@>ffaa*/VCU_ConstP./*@>11166*/uDLookupTable1_tableData_l, /*@>e322*/4U);
 80012ce:	4b28      	ldr	r3, [pc, #160]	; (8001370 <FUNC_InputData+0xf38>)
 80012d0:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	2104      	movs	r1, #4
 80012da:	9100      	str	r1, [sp, #0]
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	4a29      	ldr	r2, [pc, #164]	; (8001388 <FUNC_InputData+0xf50>)
 80012e2:	4b2a      	ldr	r3, [pc, #168]	; (800138c <FUNC_InputData+0xf54>)
 80012e4:	f004 fd04 	bl	8005cf0 <look1_binlxpw>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4920      	ldr	r1, [pc, #128]	; (8001370 <FUNC_InputData+0xf38>)
 80012ee:	f501 61d8 	add.w	r1, r1, #1728	; 0x6c0
 80012f2:	e9c1 2300 	strd	r2, r3, [r1]
/*@>e954*/if (/*@>feb0*/VCU_B./*@>11118*/uDLookupTable1_kb/*@>e94f*/ > /*@>ec66*/9000.0) {
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <FUNC_InputData+0xf38>)
 80012f8:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	a318      	add	r3, pc, #96	; (adr r3, 8001368 <FUNC_InputData+0xf30>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	f00d fe3d 	bl	800ef88 <__aeabi_dcmpgt>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d008      	beq.n	8001326 <FUNC_InputData+0xeee>
    /*@>febc*/VCU_B./*@>1111e*/Saturation1_h/*@>e956*/ = /*@>ec6c*/9000.0;
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <FUNC_InputData+0xf38>)
 8001316:	f503 61d9 	add.w	r1, r3, #1736	; 0x6c8
 800131a:	a313      	add	r3, pc, #76	; (adr r3, 8001368 <FUNC_InputData+0xf30>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	e9c1 2300 	strd	r2, r3, [r1]
 8001324:	e03e      	b.n	80013a4 <FUNC_InputData+0xf6c>
} else /*@>e957*/if (/*@>feb6*/VCU_B./*@>1111b*/uDLookupTable1_kb/*@>e94c*/ < /*@>ec68*/0.0) {
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <FUNC_InputData+0xf38>)
 8001328:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	f04f 0300 	mov.w	r3, #0
 800133c:	f00d fe06 	bl	800ef4c <__aeabi_dcmplt>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d024      	beq.n	8001390 <FUNC_InputData+0xf58>
    /*@>fece*/VCU_B./*@>11127*/Saturation1_h/*@>e959*/ = /*@>ec6a*/0.0;
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <FUNC_InputData+0xf38>)
 8001348:	f503 61d9 	add.w	r1, r3, #1736	; 0x6c8
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	e9c1 2300 	strd	r2, r3, [r1]
 8001358:	e024      	b.n	80013a4 <FUNC_InputData+0xf6c>
 800135a:	bf00      	nop
 800135c:	f3af 8000 	nop.w
 8001360:	d2f1a9fc 	.word	0xd2f1a9fc
 8001364:	3f50624d 	.word	0x3f50624d
 8001368:	00000000 	.word	0x00000000
 800136c:	40c19400 	.word	0x40c19400
 8001370:	200008a8 	.word	0x200008a8
 8001374:	200010c8 	.word	0x200010c8
 8001378:	0800f278 	.word	0x0800f278
 800137c:	0800f268 	.word	0x0800f268
 8001380:	0800f2b0 	.word	0x0800f2b0
 8001384:	0800f288 	.word	0x0800f288
 8001388:	0800f300 	.word	0x0800f300
 800138c:	0800f2d8 	.word	0x0800f2d8
} else {
    /*@>fec2*/VCU_B./*@>11121*/Saturation1_h/*@>e953*/ = /*@>fec8*/VCU_B./*@>11124*/uDLookupTable1_kb;
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <FUNC_InputData+0xfb4>)
 8001392:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	4914      	ldr	r1, [pc, #80]	; (80013ec <FUNC_InputData+0xfb4>)
 800139c:	f501 61d9 	add.w	r1, r1, #1736	; 0x6c8
 80013a0:	e9c1 2300 	strd	r2, r3, [r1]
}
/* End of Saturate: '<S45>/Saturation1' */

/* DataStoreRead: '<S14>/Data Store Read8' */
/*@>fed4*/VCU_B./*@>1112a*/DataStoreRead8/*@>6ccc*/ = /*@>10149*/VCU_DW./*@>111f0*/VAR_IN_LC_dash_bit;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <FUNC_InputData+0xfb8>)
 80013a6:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 80013aa:	4910      	ldr	r1, [pc, #64]	; (80013ec <FUNC_InputData+0xfb4>)
 80013ac:	f501 61da 	add.w	r1, r1, #1744	; 0x6d0
 80013b0:	e9c1 2300 	strd	r2, r3, [r1]
/* DataTypeConversion: '<S14>/Data Type Conversion11' */
/*@>feda*/VCU_B./*@>1112d*/LC_dash_bit/*@>6ccf*/ = (/*@>fee0*/VCU_B./*@>11130*/DataStoreRead8/*@>e3de*/ != /*@>e3dc*/0.0);
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <FUNC_InputData+0xfb4>)
 80013b6:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	2101      	movs	r1, #1
 80013c0:	460c      	mov	r4, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	f00d fdb3 	bl	800ef38 <__aeabi_dcmpeq>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <FUNC_InputData+0xfa4>
 80013d8:	2300      	movs	r3, #0
 80013da:	461c      	mov	r4, r3
 80013dc:	b2e3      	uxtb	r3, r4
 80013de:	461a      	mov	r2, r3
 80013e0:	4b02      	ldr	r3, [pc, #8]	; (80013ec <FUNC_InputData+0xfb4>)
 80013e2:	f883 280f 	strb.w	r2, [r3, #2063]	; 0x80f


        
    
      
          }
 80013e6:	3704      	adds	r7, #4
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd90      	pop	{r4, r7, pc}
 80013ec:	200008a8 	.word	0x200008a8
 80013f0:	200010c8 	.word	0x200010c8
 80013f4:	f3af 8000 	nop.w

080013f8 <FUNC_OutputData>:
          /* Output and update for atomic system: '<Root>/Output Data' */
      
              
  
        void FUNC_OutputData(void)
  {
 80013f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013fc:	b0be      	sub	sp, #248	; 0xf8
 80013fe:	af00      	add	r7, sp, #0
  



                                /* Gain: '<S63>/Gain' */
/*@>15372*/VCU_B./*@>1708c*/n_wheel_FL_kmh/*@>6eb5*/ = /*@>12c18*/3.6/*@>13672*/ * /*@>15378*/VCU_B./*@>1708f*/Add1_k;
 8001400:	4bb1      	ldr	r3, [pc, #708]	; (80016c8 <FUNC_OutputData+0x2d0>)
 8001402:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	a3ac      	add	r3, pc, #688	; (adr r3, 80016c0 <FUNC_OutputData+0x2c8>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f00d fb28 	bl	800ea68 <__aeabi_dmul>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	4ba9      	ldr	r3, [pc, #676]	; (80016c8 <FUNC_OutputData+0x2d0>)
 8001422:	e9c3 01c2 	strd	r0, r1, [r3, #776]	; 0x308
/* Gain: '<S70>/Factor' */
/*@>1537e*/VCU_B./*@>17092*/Factor/*@>6ebd*/ = /*@>12c19*/10.0/*@>1366e*/ * /*@>15384*/VCU_B./*@>17095*/n_wheel_FL_kmh;
 8001426:	4ba8      	ldr	r3, [pc, #672]	; (80016c8 <FUNC_OutputData+0x2d0>)
 8001428:	e9d3 23c2 	ldrd	r2, r3, [r3, #776]	; 0x308
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4ba5      	ldr	r3, [pc, #660]	; (80016cc <FUNC_OutputData+0x2d4>)
 8001436:	f00d fb17 	bl	800ea68 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	4ba1      	ldr	r3, [pc, #644]	; (80016c8 <FUNC_OutputData+0x2d0>)
 8001444:	e9c3 01c4 	strd	r0, r1, [r3, #784]	; 0x310
/* Sum: '<S70>/Add1' */
/*@>1538a*/VCU_B./*@>17098*/Add1_g/*@>98bc*/ = /*@>15390*/VCU_B./*@>1709b*/Factor;
 8001448:	4b9f      	ldr	r3, [pc, #636]	; (80016c8 <FUNC_OutputData+0x2d0>)
 800144a:	e9d3 23c4 	ldrd	r2, r3, [r3, #784]	; 0x310
 800144e:	499e      	ldr	r1, [pc, #632]	; (80016c8 <FUNC_OutputData+0x2d0>)
 8001450:	e9c1 23c6 	strd	r2, r3, [r1, #792]	; 0x318
/* DataTypeConversion: '<S70>/Data Type Conversion10' */
/*@>13629*/tmp/*@>1362b*/ = /*@>14950*/floor(/*@>15396*/VCU_B./*@>1709e*/Add1_g);
 8001454:	4b9c      	ldr	r3, [pc, #624]	; (80016c8 <FUNC_OutputData+0x2d0>)
 8001456:	e9d3 23c6 	ldrd	r2, r3, [r3, #792]	; 0x318
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f00c ff0f 	bl	800e280 <floor>
 8001462:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13649*/if (/*@>14952*/rtIsNaN(/*@>1362d*/tmp)/*@>13637*/ || /*@>14954*/rtIsInf(/*@>13632*/tmp)) {
 8001466:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800146a:	f005 f859 	bl	8006520 <rtIsNaN>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d106      	bne.n	8001482 <FUNC_OutputData+0x8a>
 8001474:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001478:	f005 f82e 	bl	80064d8 <rtIsInf>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d006      	beq.n	8001490 <FUNC_OutputData+0x98>
    /*@>1363a*/tmp/*@>1363c*/ = /*@>13639*/0.0;
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	f04f 0300 	mov.w	r3, #0
 800148a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800148e:	e008      	b.n	80014a2 <FUNC_OutputData+0xaa>
} else {
    /*@>13645*/tmp/*@>13647*/ = /*@>14956*/fmod(/*@>1363e*/tmp, /*@>13642*/65536.0);
 8001490:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	4b8d      	ldr	r3, [pc, #564]	; (80016d0 <FUNC_OutputData+0x2d8>)
 800149a:	f00c ff79 	bl	800e390 <fmod>
 800149e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>1539c*/VCU_B./*@>170a1*/DataTypeConversion10/*@>6ec5*/ = /*@>138a6*/(uint16_T)(/*@>13650*/tmp/*@>13653*/ < /*@>1364f*/0.0/*@>13653*/ ? (int32_T)/*@>1365b*/(uint16_T)-/*@<13664*//*@>13659*/(int16_T)/*@>13667*/(uint16_T)-/*@<13657*//*@>13654*/tmp : (int32_T)/*@>1366a*/(uint16_T)/*@>1365c*/tmp);
 80014a2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	f00d fd4d 	bl	800ef4c <__aeabi_dcmplt>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00e      	beq.n	80014d6 <FUNC_OutputData+0xde>
 80014b8:	f8d7 40f0 	ldr.w	r4, [r7, #240]	; 0xf0
 80014bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014c0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014c4:	4620      	mov	r0, r4
 80014c6:	4629      	mov	r1, r5
 80014c8:	f00d fd68 	bl	800ef9c <__aeabi_d2uiz>
 80014cc:	4603      	mov	r3, r0
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	425b      	negs	r3, r3
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	e005      	b.n	80014e2 <FUNC_OutputData+0xea>
 80014d6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80014da:	f00d fd5f 	bl	800ef9c <__aeabi_d2uiz>
 80014de:	4603      	mov	r3, r0
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	4a79      	ldr	r2, [pc, #484]	; (80016c8 <FUNC_OutputData+0x2d0>)
 80014e4:	f8a2 36f8 	strh.w	r3, [r2, #1784]	; 0x6f8
/* End of DataTypeConversion: '<S70>/Data Type Conversion10' */

/* DataStoreWrite: '<S64>/Data Store Write' */
/*@>15a43*/VCU_DW./*@>17380*/VAR_OUT_n_wheel_FL_kmproh/*@>6ec7*/ = /*@>153a2*/VCU_B./*@>170a4*/DataTypeConversion10;
 80014e8:	4b77      	ldr	r3, [pc, #476]	; (80016c8 <FUNC_OutputData+0x2d0>)
 80014ea:	f8b3 36f8 	ldrh.w	r3, [r3, #1784]	; 0x6f8
 80014ee:	4a79      	ldr	r2, [pc, #484]	; (80016d4 <FUNC_OutputData+0x2dc>)
 80014f0:	f8a2 30c2 	strh.w	r3, [r2, #194]	; 0xc2
/* Gain: '<S63>/Gain1' */
/*@>153a8*/VCU_B./*@>170a7*/n_wheel_FR_kmh/*@>6ecf*/ = /*@>12c1a*/3.6/*@>13622*/ * /*@>153ae*/VCU_B./*@>170aa*/Add1_de;
 80014f4:	4b74      	ldr	r3, [pc, #464]	; (80016c8 <FUNC_OutputData+0x2d0>)
 80014f6:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	a36f      	add	r3, pc, #444	; (adr r3, 80016c0 <FUNC_OutputData+0x2c8>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f00d faae 	bl	800ea68 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	4b6c      	ldr	r3, [pc, #432]	; (80016c8 <FUNC_OutputData+0x2d0>)
 8001516:	e9c3 01c8 	strd	r0, r1, [r3, #800]	; 0x320
/* Gain: '<S71>/Factor' */
/*@>153b4*/VCU_B./*@>170ad*/Factor_c/*@>6ed7*/ = /*@>12c1b*/10.0/*@>1361e*/ * /*@>153ba*/VCU_B./*@>170b0*/n_wheel_FR_kmh;
 800151a:	4b6b      	ldr	r3, [pc, #428]	; (80016c8 <FUNC_OutputData+0x2d0>)
 800151c:	e9d3 23c8 	ldrd	r2, r3, [r3, #800]	; 0x320
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b68      	ldr	r3, [pc, #416]	; (80016cc <FUNC_OutputData+0x2d4>)
 800152a:	f00d fa9d 	bl	800ea68 <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	4b64      	ldr	r3, [pc, #400]	; (80016c8 <FUNC_OutputData+0x2d0>)
 8001538:	e9c3 01ca 	strd	r0, r1, [r3, #808]	; 0x328
/* Sum: '<S71>/Add1' */
/*@>153c0*/VCU_B./*@>170b3*/Add1_i/*@>98c1*/ = /*@>153c6*/VCU_B./*@>170b6*/Factor_c;
 800153c:	4b62      	ldr	r3, [pc, #392]	; (80016c8 <FUNC_OutputData+0x2d0>)
 800153e:	e9d3 23ca 	ldrd	r2, r3, [r3, #808]	; 0x328
 8001542:	4961      	ldr	r1, [pc, #388]	; (80016c8 <FUNC_OutputData+0x2d0>)
 8001544:	e9c1 23cc 	strd	r2, r3, [r1, #816]	; 0x330
/* DataTypeConversion: '<S71>/Data Type Conversion10' */
/*@>135d9*/tmp/*@>135db*/ = /*@>14958*/floor(/*@>153cc*/VCU_B./*@>170b9*/Add1_i);
 8001548:	4b5f      	ldr	r3, [pc, #380]	; (80016c8 <FUNC_OutputData+0x2d0>)
 800154a:	e9d3 23cc 	ldrd	r2, r3, [r3, #816]	; 0x330
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f00c fe95 	bl	800e280 <floor>
 8001556:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>135f9*/if (/*@>1495a*/rtIsNaN(/*@>135dd*/tmp)/*@>135e7*/ || /*@>1495c*/rtIsInf(/*@>135e2*/tmp)) {
 800155a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800155e:	f004 ffdf 	bl	8006520 <rtIsNaN>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d106      	bne.n	8001576 <FUNC_OutputData+0x17e>
 8001568:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800156c:	f004 ffb4 	bl	80064d8 <rtIsInf>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d006      	beq.n	8001584 <FUNC_OutputData+0x18c>
    /*@>135ea*/tmp/*@>135ec*/ = /*@>135e9*/0.0;
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001582:	e008      	b.n	8001596 <FUNC_OutputData+0x19e>
} else {
    /*@>135f5*/tmp/*@>135f7*/ = /*@>1495e*/fmod(/*@>135ee*/tmp, /*@>135f2*/65536.0);
 8001584:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <FUNC_OutputData+0x2d8>)
 800158e:	f00c feff 	bl	800e390 <fmod>
 8001592:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>153d2*/VCU_B./*@>170bc*/DataTypeConversion10_b/*@>6edf*/ = /*@>138bd*/(uint16_T)(/*@>13600*/tmp/*@>13603*/ < /*@>135ff*/0.0/*@>13603*/ ? (int32_T)/*@>1360b*/(uint16_T)-/*@<13614*//*@>13609*/(int16_T)/*@>13617*/(uint16_T)-/*@<13607*//*@>13604*/tmp : (int32_T)/*@>1361a*/(uint16_T)/*@>1360c*/tmp);
 8001596:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	f00d fcd3 	bl	800ef4c <__aeabi_dcmplt>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00e      	beq.n	80015ca <FUNC_OutputData+0x1d2>
 80015ac:	f8d7 80f0 	ldr.w	r8, [r7, #240]	; 0xf0
 80015b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015b4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80015b8:	4640      	mov	r0, r8
 80015ba:	4649      	mov	r1, r9
 80015bc:	f00d fcee 	bl	800ef9c <__aeabi_d2uiz>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	425b      	negs	r3, r3
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	e005      	b.n	80015d6 <FUNC_OutputData+0x1de>
 80015ca:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80015ce:	f00d fce5 	bl	800ef9c <__aeabi_d2uiz>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4a3c      	ldr	r2, [pc, #240]	; (80016c8 <FUNC_OutputData+0x2d0>)
 80015d8:	f8a2 36fa 	strh.w	r3, [r2, #1786]	; 0x6fa
/* End of DataTypeConversion: '<S71>/Data Type Conversion10' */

/* DataStoreWrite: '<S64>/Data Store Write1' */
/*@>15a49*/VCU_DW./*@>17383*/VAR_OUT_n_wheel_FR_kmproh/*@>6ee1*/ = /*@>153d8*/VCU_B./*@>170bf*/DataTypeConversion10_b;
 80015dc:	4b3a      	ldr	r3, [pc, #232]	; (80016c8 <FUNC_OutputData+0x2d0>)
 80015de:	f8b3 36fa 	ldrh.w	r3, [r3, #1786]	; 0x6fa
 80015e2:	4a3c      	ldr	r2, [pc, #240]	; (80016d4 <FUNC_OutputData+0x2dc>)
 80015e4:	f8a2 30c4 	strh.w	r3, [r2, #196]	; 0xc4
/* Gain: '<S63>/Gain2' */
/*@>153de*/VCU_B./*@>170c2*/n_wheel_RL_kmh/*@>6ee9*/ = /*@>12c1c*/3.6/*@>135d2*/ * /*@>153e4*/VCU_B./*@>170c5*/Add1_ks;
 80015e8:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <FUNC_OutputData+0x2d0>)
 80015ea:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	a332      	add	r3, pc, #200	; (adr r3, 80016c0 <FUNC_OutputData+0x2c8>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f00d fa34 	bl	800ea68 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <FUNC_OutputData+0x2d0>)
 800160a:	e9c3 01ce 	strd	r0, r1, [r3, #824]	; 0x338
/* Gain: '<S72>/Factor' */
/*@>153ea*/VCU_B./*@>170c8*/Factor_j/*@>6ef1*/ = /*@>12c1d*/10.0/*@>135ce*/ * /*@>153f0*/VCU_B./*@>170cb*/n_wheel_RL_kmh;
 800160e:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <FUNC_OutputData+0x2d0>)
 8001610:	e9d3 23ce 	ldrd	r2, r3, [r3, #824]	; 0x338
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <FUNC_OutputData+0x2d4>)
 800161e:	f00d fa23 	bl	800ea68 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <FUNC_OutputData+0x2d0>)
 800162c:	e9c3 01d0 	strd	r0, r1, [r3, #832]	; 0x340
/* Sum: '<S72>/Add1' */
/*@>153f6*/VCU_B./*@>170ce*/Add1_a/*@>98c6*/ = /*@>153fc*/VCU_B./*@>170d1*/Factor_j;
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <FUNC_OutputData+0x2d0>)
 8001632:	e9d3 23d0 	ldrd	r2, r3, [r3, #832]	; 0x340
 8001636:	4924      	ldr	r1, [pc, #144]	; (80016c8 <FUNC_OutputData+0x2d0>)
 8001638:	e9c1 23d2 	strd	r2, r3, [r1, #840]	; 0x348
/* DataTypeConversion: '<S72>/Data Type Conversion10' */
/*@>13589*/tmp/*@>1358b*/ = /*@>14960*/floor(/*@>15402*/VCU_B./*@>170d4*/Add1_a);
 800163c:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <FUNC_OutputData+0x2d0>)
 800163e:	e9d3 23d2 	ldrd	r2, r3, [r3, #840]	; 0x348
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f00c fe1b 	bl	800e280 <floor>
 800164a:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>135a9*/if (/*@>14962*/rtIsNaN(/*@>1358d*/tmp)/*@>13597*/ || /*@>14964*/rtIsInf(/*@>13592*/tmp)) {
 800164e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001652:	f004 ff65 	bl	8006520 <rtIsNaN>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d106      	bne.n	800166a <FUNC_OutputData+0x272>
 800165c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001660:	f004 ff3a 	bl	80064d8 <rtIsInf>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <FUNC_OutputData+0x280>
    /*@>1359a*/tmp/*@>1359c*/ = /*@>13599*/0.0;
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001676:	e008      	b.n	800168a <FUNC_OutputData+0x292>
} else {
    /*@>135a5*/tmp/*@>135a7*/ = /*@>14966*/fmod(/*@>1359e*/tmp, /*@>135a2*/65536.0);
 8001678:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <FUNC_OutputData+0x2d8>)
 8001682:	f00c fe85 	bl	800e390 <fmod>
 8001686:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15408*/VCU_B./*@>170d7*/DataTypeConversion10_be/*@>6ef9*/ = /*@>138d4*/(uint16_T)(/*@>135b0*/tmp/*@>135b3*/ < /*@>135af*/0.0/*@>135b3*/ ? (int32_T)/*@>135bb*/(uint16_T)-/*@<135c4*//*@>135b9*/(int16_T)/*@>135c7*/(uint16_T)-/*@<135b7*//*@>135b4*/tmp : (int32_T)/*@>135ca*/(uint16_T)/*@>135bc*/tmp);
 800168a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	f00d fc59 	bl	800ef4c <__aeabi_dcmplt>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d01b      	beq.n	80016d8 <FUNC_OutputData+0x2e0>
 80016a0:	f8d7 a0f0 	ldr.w	sl, [r7, #240]	; 0xf0
 80016a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016a8:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80016ac:	4650      	mov	r0, sl
 80016ae:	4659      	mov	r1, fp
 80016b0:	f00d fc74 	bl	800ef9c <__aeabi_d2uiz>
 80016b4:	4603      	mov	r3, r0
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	425b      	negs	r3, r3
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	e012      	b.n	80016e4 <FUNC_OutputData+0x2ec>
 80016be:	bf00      	nop
 80016c0:	cccccccd 	.word	0xcccccccd
 80016c4:	400ccccc 	.word	0x400ccccc
 80016c8:	200008a8 	.word	0x200008a8
 80016cc:	40240000 	.word	0x40240000
 80016d0:	40f00000 	.word	0x40f00000
 80016d4:	200010c8 	.word	0x200010c8
 80016d8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80016dc:	f00d fc5e 	bl	800ef9c <__aeabi_d2uiz>
 80016e0:	4603      	mov	r3, r0
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4aa2      	ldr	r2, [pc, #648]	; (8001970 <FUNC_OutputData+0x578>)
 80016e6:	f8a2 36fc 	strh.w	r3, [r2, #1788]	; 0x6fc
/* End of DataTypeConversion: '<S72>/Data Type Conversion10' */

/* DataStoreWrite: '<S64>/Data Store Write2' */
/*@>15a4f*/VCU_DW./*@>17386*/VAR_OUT_n_wheel_RL_kmproh/*@>6efb*/ = /*@>1540e*/VCU_B./*@>170da*/DataTypeConversion10_be;
 80016ea:	4ba1      	ldr	r3, [pc, #644]	; (8001970 <FUNC_OutputData+0x578>)
 80016ec:	f8b3 36fc 	ldrh.w	r3, [r3, #1788]	; 0x6fc
 80016f0:	4aa0      	ldr	r2, [pc, #640]	; (8001974 <FUNC_OutputData+0x57c>)
 80016f2:	f8a2 30c6 	strh.w	r3, [r2, #198]	; 0xc6
/* Gain: '<S63>/Gain3' */
/*@>15414*/VCU_B./*@>170dd*/n_wheel_RR_kmh/*@>6f03*/ = /*@>12c1e*/3.6/*@>13582*/ * /*@>1541a*/VCU_B./*@>170e0*/Add1_eq;
 80016f6:	4b9e      	ldr	r3, [pc, #632]	; (8001970 <FUNC_OutputData+0x578>)
 80016f8:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	a398      	add	r3, pc, #608	; (adr r3, 8001968 <FUNC_OutputData+0x570>)
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	f00d f9ad 	bl	800ea68 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	4b96      	ldr	r3, [pc, #600]	; (8001970 <FUNC_OutputData+0x578>)
 8001718:	e9c3 01d4 	strd	r0, r1, [r3, #848]	; 0x350
/* Gain: '<S73>/Factor' */
/*@>15420*/VCU_B./*@>170e3*/Factor_h/*@>6f0b*/ = /*@>12c1f*/10.0/*@>1357e*/ * /*@>15426*/VCU_B./*@>170e6*/n_wheel_RR_kmh;
 800171c:	4b94      	ldr	r3, [pc, #592]	; (8001970 <FUNC_OutputData+0x578>)
 800171e:	e9d3 23d4 	ldrd	r2, r3, [r3, #848]	; 0x350
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	4b93      	ldr	r3, [pc, #588]	; (8001978 <FUNC_OutputData+0x580>)
 800172c:	f00d f99c 	bl	800ea68 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	4b8d      	ldr	r3, [pc, #564]	; (8001970 <FUNC_OutputData+0x578>)
 800173a:	e9c3 01d6 	strd	r0, r1, [r3, #856]	; 0x358
/* Sum: '<S73>/Add1' */
/*@>1542c*/VCU_B./*@>170e9*/Add1_e/*@>98cb*/ = /*@>15432*/VCU_B./*@>170ec*/Factor_h;
 800173e:	4b8c      	ldr	r3, [pc, #560]	; (8001970 <FUNC_OutputData+0x578>)
 8001740:	e9d3 23d6 	ldrd	r2, r3, [r3, #856]	; 0x358
 8001744:	498a      	ldr	r1, [pc, #552]	; (8001970 <FUNC_OutputData+0x578>)
 8001746:	e9c1 23d8 	strd	r2, r3, [r1, #864]	; 0x360
/* DataTypeConversion: '<S73>/Data Type Conversion10' */
/*@>13539*/tmp/*@>1353b*/ = /*@>14968*/floor(/*@>15438*/VCU_B./*@>170ef*/Add1_e);
 800174a:	4b89      	ldr	r3, [pc, #548]	; (8001970 <FUNC_OutputData+0x578>)
 800174c:	e9d3 23d8 	ldrd	r2, r3, [r3, #864]	; 0x360
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	f00c fd94 	bl	800e280 <floor>
 8001758:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13559*/if (/*@>1496a*/rtIsNaN(/*@>1353d*/tmp)/*@>13547*/ || /*@>1496c*/rtIsInf(/*@>13542*/tmp)) {
 800175c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001760:	f004 fede 	bl	8006520 <rtIsNaN>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <FUNC_OutputData+0x380>
 800176a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800176e:	f004 feb3 	bl	80064d8 <rtIsInf>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <FUNC_OutputData+0x38e>
    /*@>1354a*/tmp/*@>1354c*/ = /*@>13549*/0.0;
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001784:	e008      	b.n	8001798 <FUNC_OutputData+0x3a0>
} else {
    /*@>13555*/tmp/*@>13557*/ = /*@>1496e*/fmod(/*@>1354e*/tmp, /*@>13552*/65536.0);
 8001786:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	4b7b      	ldr	r3, [pc, #492]	; (800197c <FUNC_OutputData+0x584>)
 8001790:	f00c fdfe 	bl	800e390 <fmod>
 8001794:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>1543e*/VCU_B./*@>170f2*/DataTypeConversion10_o/*@>6f13*/ = /*@>138eb*/(uint16_T)(/*@>13560*/tmp/*@>13563*/ < /*@>1355f*/0.0/*@>13563*/ ? (int32_T)/*@>1356b*/(uint16_T)-/*@<13574*//*@>13569*/(int16_T)/*@>13577*/(uint16_T)-/*@<13567*//*@>13564*/tmp : (int32_T)/*@>1357a*/(uint16_T)/*@>1356c*/tmp);
 8001798:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	f00d fbd2 	bl	800ef4c <__aeabi_dcmplt>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d012      	beq.n	80017d4 <FUNC_OutputData+0x3dc>
 80017ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80017b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80017b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80017be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017c2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80017c6:	f00d fbe9 	bl	800ef9c <__aeabi_d2uiz>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	425b      	negs	r3, r3
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	e005      	b.n	80017e0 <FUNC_OutputData+0x3e8>
 80017d4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80017d8:	f00d fbe0 	bl	800ef9c <__aeabi_d2uiz>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4a63      	ldr	r2, [pc, #396]	; (8001970 <FUNC_OutputData+0x578>)
 80017e2:	f8a2 36fe 	strh.w	r3, [r2, #1790]	; 0x6fe
/* End of DataTypeConversion: '<S73>/Data Type Conversion10' */

/* DataStoreWrite: '<S64>/Data Store Write3' */
/*@>15a55*/VCU_DW./*@>17389*/VAR_OUT_n_wheel_RR_kmproh/*@>6f15*/ = /*@>15444*/VCU_B./*@>170f5*/DataTypeConversion10_o;
 80017e6:	4b62      	ldr	r3, [pc, #392]	; (8001970 <FUNC_OutputData+0x578>)
 80017e8:	f8b3 36fe 	ldrh.w	r3, [r3, #1790]	; 0x6fe
 80017ec:	4a61      	ldr	r2, [pc, #388]	; (8001974 <FUNC_OutputData+0x57c>)
 80017ee:	f8a2 30c8 	strh.w	r3, [r2, #200]	; 0xc8
/* Sum: '<S80>/Add1' */
/*@>1544a*/VCU_B./*@>170f8*/Add1_j/*@>98d0*/ = /*@>15450*/VCU_B./*@>170fb*/Sensitivity1538mVbar;
 80017f2:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <FUNC_OutputData+0x578>)
 80017f4:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	495c      	ldr	r1, [pc, #368]	; (8001970 <FUNC_OutputData+0x578>)
 80017fe:	e9c1 23da 	strd	r2, r3, [r1, #872]	; 0x368
/* DataTypeConversion: '<S80>/Data Type Conversion10' */
/*@>134f1*/tmp/*@>134f3*/ = /*@>14970*/floor(/*@>15456*/VCU_B./*@>170fe*/Add1_j);
 8001802:	4b5b      	ldr	r3, [pc, #364]	; (8001970 <FUNC_OutputData+0x578>)
 8001804:	e9d3 23da 	ldrd	r2, r3, [r3, #872]	; 0x368
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	f00c fd38 	bl	800e280 <floor>
 8001810:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13511*/if (/*@>14972*/rtIsNaN(/*@>134f5*/tmp)/*@>134ff*/ || /*@>14974*/rtIsInf(/*@>134fa*/tmp)) {
 8001814:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001818:	f004 fe82 	bl	8006520 <rtIsNaN>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <FUNC_OutputData+0x438>
 8001822:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001826:	f004 fe57 	bl	80064d8 <rtIsInf>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <FUNC_OutputData+0x446>
    /*@>13502*/tmp/*@>13504*/ = /*@>13501*/0.0;
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800183c:	e008      	b.n	8001850 <FUNC_OutputData+0x458>
} else {
    /*@>1350d*/tmp/*@>1350f*/ = /*@>14976*/fmod(/*@>13506*/tmp, /*@>1350a*/256.0);
 800183e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	4b4e      	ldr	r3, [pc, #312]	; (8001980 <FUNC_OutputData+0x588>)
 8001848:	f00c fda2 	bl	800e390 <fmod>
 800184c:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>1545c*/VCU_B./*@>17101*/DataTypeConversion10_ho/*@>6f1d*/ = /*@>138fe*/(uint8_T)(/*@>13518*/tmp/*@>1351b*/ < /*@>13517*/0.0/*@>1351b*/ ? (int32_T)/*@>13523*/(uint8_T)-/*@<1352c*//*@>13521*/(int8_T)/*@>1352f*/(uint8_T)-/*@<1351f*//*@>1351c*/tmp : (int32_T)/*@>13532*/(uint8_T)/*@>13524*/tmp);
 8001850:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	f00d fb76 	bl	800ef4c <__aeabi_dcmplt>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d012      	beq.n	800188c <FUNC_OutputData+0x494>
 8001866:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800186a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800186e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001872:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001876:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800187a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800187e:	f00d fb8d 	bl	800ef9c <__aeabi_d2uiz>
 8001882:	4603      	mov	r3, r0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	425b      	negs	r3, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	e005      	b.n	8001898 <FUNC_OutputData+0x4a0>
 800188c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001890:	f00d fb84 	bl	800ef9c <__aeabi_d2uiz>
 8001894:	4603      	mov	r3, r0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4a35      	ldr	r2, [pc, #212]	; (8001970 <FUNC_OutputData+0x578>)
 800189a:	f882 3743 	strb.w	r3, [r2, #1859]	; 0x743
/* End of DataTypeConversion: '<S80>/Data Type Conversion10' */

/* DataStoreWrite: '<S66>/Data Store Write' */
/*@>15a5b*/VCU_DW./*@>1738c*/VAR_OUT_p_brake_R/*@>6f1f*/ = /*@>15462*/VCU_B./*@>17104*/DataTypeConversion10_ho;
 800189e:	4b34      	ldr	r3, [pc, #208]	; (8001970 <FUNC_OutputData+0x578>)
 80018a0:	f893 3743 	ldrb.w	r3, [r3, #1859]	; 0x743
 80018a4:	4a33      	ldr	r2, [pc, #204]	; (8001974 <FUNC_OutputData+0x57c>)
 80018a6:	f882 311b 	strb.w	r3, [r2, #283]	; 0x11b
/* Gain: '<S81>/Factor' */
/*@>15468*/VCU_B./*@>17107*/Factor_d/*@>6f27*/ = /*@>12c20*/100.0/*@>134ea*/ * /*@>1546e*/VCU_B./*@>1710a*/Add1_f1;
 80018aa:	4b31      	ldr	r3, [pc, #196]	; (8001970 <FUNC_OutputData+0x578>)
 80018ac:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	4b31      	ldr	r3, [pc, #196]	; (8001984 <FUNC_OutputData+0x58c>)
 80018be:	f00d f8d3 	bl	800ea68 <__aeabi_dmul>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <FUNC_OutputData+0x578>)
 80018cc:	e9c3 01dc 	strd	r0, r1, [r3, #880]	; 0x370
/* Sum: '<S81>/Add1' */
/*@>15474*/VCU_B./*@>1710d*/Add1_l/*@>98d5*/ = /*@>1547a*/VCU_B./*@>17110*/Factor_d;
 80018d0:	4b27      	ldr	r3, [pc, #156]	; (8001970 <FUNC_OutputData+0x578>)
 80018d2:	e9d3 23dc 	ldrd	r2, r3, [r3, #880]	; 0x370
 80018d6:	4926      	ldr	r1, [pc, #152]	; (8001970 <FUNC_OutputData+0x578>)
 80018d8:	e9c1 23de 	strd	r2, r3, [r1, #888]	; 0x378
/* DataTypeConversion: '<S81>/Data Type Conversion10' */
/*@>134a5*/tmp/*@>134a7*/ = /*@>14978*/floor(/*@>15480*/VCU_B./*@>17113*/Add1_l);
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <FUNC_OutputData+0x578>)
 80018de:	e9d3 23de 	ldrd	r2, r3, [r3, #888]	; 0x378
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f00c fccb 	bl	800e280 <floor>
 80018ea:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>134c5*/if (/*@>1497a*/rtIsNaN(/*@>134a9*/tmp)/*@>134b3*/ || /*@>1497c*/rtIsInf(/*@>134ae*/tmp)) {
 80018ee:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80018f2:	f004 fe15 	bl	8006520 <rtIsNaN>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d106      	bne.n	800190a <FUNC_OutputData+0x512>
 80018fc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001900:	f004 fdea 	bl	80064d8 <rtIsInf>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d006      	beq.n	8001918 <FUNC_OutputData+0x520>
    /*@>134b6*/tmp/*@>134b8*/ = /*@>134b5*/0.0;
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001916:	e008      	b.n	800192a <FUNC_OutputData+0x532>
} else {
    /*@>134c1*/tmp/*@>134c3*/ = /*@>1497e*/fmod(/*@>134ba*/tmp, /*@>134be*/256.0);
 8001918:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <FUNC_OutputData+0x588>)
 8001922:	f00c fd35 	bl	800e390 <fmod>
 8001926:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15486*/VCU_B./*@>17116*/DataTypeConversion10_fx/*@>6f2f*/ = /*@>13913*/(uint8_T)(/*@>134cc*/tmp/*@>134cf*/ < /*@>134cb*/0.0/*@>134cf*/ ? (int32_T)/*@>134d7*/(uint8_T)-/*@<134e0*//*@>134d5*/(int8_T)/*@>134e3*/(uint8_T)-/*@<134d3*//*@>134d0*/tmp : (int32_T)/*@>134e6*/(uint8_T)/*@>134d8*/tmp);
 800192a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	f00d fb09 	bl	800ef4c <__aeabi_dcmplt>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d023      	beq.n	8001988 <FUNC_OutputData+0x590>
 8001940:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001944:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800194c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001950:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001954:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001958:	f00d fb20 	bl	800ef9c <__aeabi_d2uiz>
 800195c:	4603      	mov	r3, r0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	425b      	negs	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	e016      	b.n	8001994 <FUNC_OutputData+0x59c>
 8001966:	bf00      	nop
 8001968:	cccccccd 	.word	0xcccccccd
 800196c:	400ccccc 	.word	0x400ccccc
 8001970:	200008a8 	.word	0x200008a8
 8001974:	200010c8 	.word	0x200010c8
 8001978:	40240000 	.word	0x40240000
 800197c:	40f00000 	.word	0x40f00000
 8001980:	40700000 	.word	0x40700000
 8001984:	40590000 	.word	0x40590000
 8001988:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800198c:	f00d fb06 	bl	800ef9c <__aeabi_d2uiz>
 8001990:	4603      	mov	r3, r0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	4a8e      	ldr	r2, [pc, #568]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001996:	f882 3744 	strb.w	r3, [r2, #1860]	; 0x744
/* End of DataTypeConversion: '<S81>/Data Type Conversion10' */

/* DataStoreWrite: '<S66>/Data Store Write1' */
/*@>15a61*/VCU_DW./*@>1738f*/VAR_OUT_STW_mue_tyre/*@>6f31*/ = /*@>1548c*/VCU_B./*@>17119*/DataTypeConversion10_fx;
 800199a:	4b8d      	ldr	r3, [pc, #564]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 800199c:	f893 3744 	ldrb.w	r3, [r3, #1860]	; 0x744
 80019a0:	4a8c      	ldr	r2, [pc, #560]	; (8001bd4 <FUNC_OutputData+0x7dc>)
 80019a2:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
/* Gain: '<S82>/Factor' */
/*@>15492*/VCU_B./*@>1711c*/Factor_b/*@>6f39*/ = /*@>12c21*/10.0/*@>1349e*/ * /*@>15498*/VCU_B./*@>1711f*/x_clutch_LC;
 80019a6:	4b8a      	ldr	r3, [pc, #552]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 80019a8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	4b88      	ldr	r3, [pc, #544]	; (8001bd8 <FUNC_OutputData+0x7e0>)
 80019b6:	f00d f857 	bl	800ea68 <__aeabi_dmul>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	4b83      	ldr	r3, [pc, #524]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 80019c4:	e9c3 01e0 	strd	r0, r1, [r3, #896]	; 0x380
/* Sum: '<S82>/Add1' */
/*@>1549e*/VCU_B./*@>17122*/Add1_ll/*@>98da*/ = /*@>154a4*/VCU_B./*@>17125*/Factor_b;
 80019c8:	4b81      	ldr	r3, [pc, #516]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 80019ca:	e9d3 23e0 	ldrd	r2, r3, [r3, #896]	; 0x380
 80019ce:	4980      	ldr	r1, [pc, #512]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 80019d0:	e9c1 23e2 	strd	r2, r3, [r1, #904]	; 0x388
/* DataTypeConversion: '<S82>/Data Type Conversion10' */
/*@>13459*/tmp/*@>1345b*/ = /*@>14980*/floor(/*@>154aa*/VCU_B./*@>17128*/Add1_ll);
 80019d4:	4b7e      	ldr	r3, [pc, #504]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 80019d6:	e9d3 23e2 	ldrd	r2, r3, [r3, #904]	; 0x388
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f00c fc4f 	bl	800e280 <floor>
 80019e2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13479*/if (/*@>14982*/rtIsNaN(/*@>1345d*/tmp)/*@>13467*/ || /*@>14984*/rtIsInf(/*@>13462*/tmp)) {
 80019e6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80019ea:	f004 fd99 	bl	8006520 <rtIsNaN>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d106      	bne.n	8001a02 <FUNC_OutputData+0x60a>
 80019f4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80019f8:	f004 fd6e 	bl	80064d8 <rtIsInf>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d006      	beq.n	8001a10 <FUNC_OutputData+0x618>
    /*@>1346a*/tmp/*@>1346c*/ = /*@>13469*/0.0;
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001a0e:	e008      	b.n	8001a22 <FUNC_OutputData+0x62a>
} else {
    /*@>13475*/tmp/*@>13477*/ = /*@>14986*/fmod(/*@>1346e*/tmp, /*@>13472*/256.0);
 8001a10:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	4b70      	ldr	r3, [pc, #448]	; (8001bdc <FUNC_OutputData+0x7e4>)
 8001a1a:	f00c fcb9 	bl	800e390 <fmod>
 8001a1e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>154b0*/VCU_B./*@>1712b*/DataTypeConversion10_ae/*@>6f41*/ = /*@>13928*/(uint8_T)(/*@>13480*/tmp/*@>13483*/ < /*@>1347f*/0.0/*@>13483*/ ? (int32_T)/*@>1348b*/(uint8_T)-/*@<13494*//*@>13489*/(int8_T)/*@>13497*/(uint8_T)-/*@<13487*//*@>13484*/tmp : (int32_T)/*@>1349a*/(uint8_T)/*@>1348c*/tmp);
 8001a22:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	f00d fa8d 	bl	800ef4c <__aeabi_dcmplt>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d012      	beq.n	8001a5e <FUNC_OutputData+0x666>
 8001a38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a4c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001a50:	f00d faa4 	bl	800ef9c <__aeabi_d2uiz>
 8001a54:	4603      	mov	r3, r0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	425b      	negs	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	e005      	b.n	8001a6a <FUNC_OutputData+0x672>
 8001a5e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001a62:	f00d fa9b 	bl	800ef9c <__aeabi_d2uiz>
 8001a66:	4603      	mov	r3, r0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4a59      	ldr	r2, [pc, #356]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001a6c:	f882 3745 	strb.w	r3, [r2, #1861]	; 0x745
/* End of DataTypeConversion: '<S82>/Data Type Conversion10' */

/* DataStoreWrite: '<S66>/Data Store Write2' */
/*@>15a67*/VCU_DW./*@>17392*/VAR_OUT_x_clutch_LC/*@>6f43*/ = /*@>154b6*/VCU_B./*@>1712e*/DataTypeConversion10_ae;
 8001a70:	4b57      	ldr	r3, [pc, #348]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001a72:	f893 3745 	ldrb.w	r3, [r3, #1861]	; 0x745
 8001a76:	4a57      	ldr	r2, [pc, #348]	; (8001bd4 <FUNC_OutputData+0x7dc>)
 8001a78:	f882 311d 	strb.w	r3, [r2, #285]	; 0x11d
/* Sum: '<S115>/Add' */
/*@>154bc*/VCU_B./*@>17131*/Add_p/*@>98df*/ = /*@>154c2*/VCU_B./*@>17134*/Add1_k/*@>98dc*/ + /*@>154c8*/VCU_B./*@>17137*/Add1_de;
 8001a7c:	4b54      	ldr	r3, [pc, #336]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001a7e:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8001a82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a86:	4b52      	ldr	r3, [pc, #328]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001a88:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f00c fe38 	bl	800e704 <__adddf3>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4b4c      	ldr	r3, [pc, #304]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001a9e:	e9c3 01e4 	strd	r0, r1, [r3, #912]	; 0x390
/* Gain: '<S115>/Gain' */
/*@>154ce*/VCU_B./*@>1713a*/Gain_g2/*@>6f50*/ = /*@>12c22*/0.5/*@>13452*/ * /*@>154d4*/VCU_B./*@>1713d*/Add_p;
 8001aa2:	4b4b      	ldr	r3, [pc, #300]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001aa4:	e9d3 23e4 	ldrd	r2, r3, [r3, #912]	; 0x390
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <FUNC_OutputData+0x7e8>)
 8001ab2:	f00c ffd9 	bl	800ea68 <__aeabi_dmul>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001ac0:	e9c3 01e6 	strd	r0, r1, [r3, #920]	; 0x398
/* RelationalOperator: '<S120>/Compare' incorporates:
 *  Constant: '<S120>/Constant'
 */
/*@>154da*/VCU_B./*@>17140*/Compare_in/*@>6f54*/ = (/*@>154e0*/VCU_B./*@>17143*/Gain_g2/*@>6f53*/ <= /*@>12c23*/1.0);
 8001ac4:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001ac6:	e9d3 23e6 	ldrd	r2, r3, [r3, #920]	; 0x398
 8001aca:	2101      	movs	r1, #1
 8001acc:	460c      	mov	r4, r1
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <FUNC_OutputData+0x7ec>)
 8001ad8:	f00d fa42 	bl	800ef60 <__aeabi_dcmple>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <FUNC_OutputData+0x6ee>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	461c      	mov	r4, r3
 8001ae6:	b2e3      	uxtb	r3, r4
 8001ae8:	4a39      	ldr	r2, [pc, #228]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001aea:	f882 3807 	strb.w	r3, [r2, #2055]	; 0x807
/* Product: '<S115>/Product' */
/*@>154e6*/VCU_B./*@>17146*/Product_o/*@>6f5b*/ = /*@>13937*/(uint16_T)(/*@>154ec*/VCU_B./*@>17149*/LC_dash_bit/*@>17149*/ ? /*@>13935*/(int32_T)/*@>154f2*/VCU_B./*@>1714c*/Compare_in : /*@>1344c*/0);
 8001aee:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001af0:	f893 380f 	ldrb.w	r3, [r3, #2063]	; 0x80f
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <FUNC_OutputData+0x70a>
 8001af8:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001afa:	f893 3807 	ldrb.w	r3, [r3, #2055]	; 0x807
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	e000      	b.n	8001b04 <FUNC_OutputData+0x70c>
 8001b02:	2300      	movs	r3, #0
 8001b04:	4a32      	ldr	r2, [pc, #200]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001b06:	f8a2 3700 	strh.w	r3, [r2, #1792]	; 0x700
/* Gain: '<S83>/Factor' */
/*@>154f8*/VCU_B./*@>1714f*/Factor_ii/*@>6f63*/ = /*@>1393a*/(uint32_T)/*@>154fe*/VCU_B./*@>17152*/Product_o/*@>1344a*/ << /*@>13449*/15;
 8001b0a:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001b0c:	f8b3 3700 	ldrh.w	r3, [r3, #1792]	; 0x700
 8001b10:	03da      	lsls	r2, r3, #15
 8001b12:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001b14:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0
/* Sum: '<S83>/Add1' */
/*@>15504*/VCU_B./*@>17155*/Add1_b/*@>98e6*/ = /*@>1393e*/(real_T)/*@>1550a*/VCU_B./*@>17158*/Factor_ii/*@>1343e*/ * /*@>1343d*/3.0517578125E-5;
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001b1a:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f00c ff2c 	bl	800e97c <__aeabi_ui2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001b34:	f00c ff98 	bl	800ea68 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001b42:	e9c3 01e8 	strd	r0, r1, [r3, #928]	; 0x3a0
/* DataTypeConversion: '<S83>/Data Type Conversion10' */
/*@>133f7*/tmp/*@>133f9*/ = /*@>14988*/floor(/*@>15510*/VCU_B./*@>1715b*/Add1_b);
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <FUNC_OutputData+0x7d8>)
 8001b48:	e9d3 23e8 	ldrd	r2, r3, [r3, #928]	; 0x3a0
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f00c fb96 	bl	800e280 <floor>
 8001b54:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13417*/if (/*@>1498a*/rtIsNaN(/*@>133fb*/tmp)/*@>13405*/ || /*@>1498c*/rtIsInf(/*@>13400*/tmp)) {
 8001b58:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001b5c:	f004 fce0 	bl	8006520 <rtIsNaN>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <FUNC_OutputData+0x77c>
 8001b66:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001b6a:	f004 fcb5 	bl	80064d8 <rtIsInf>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <FUNC_OutputData+0x78a>
    /*@>13408*/tmp/*@>1340a*/ = /*@>13407*/0.0;
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001b80:	e008      	b.n	8001b94 <FUNC_OutputData+0x79c>
} else {
    /*@>13413*/tmp/*@>13415*/ = /*@>1498e*/fmod(/*@>1340c*/tmp, /*@>13410*/256.0);
 8001b82:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <FUNC_OutputData+0x7e4>)
 8001b8c:	f00c fc00 	bl	800e390 <fmod>
 8001b90:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15516*/VCU_B./*@>1715e*/DataTypeConversion10_c/*@>6f6b*/ = /*@>1394d*/(uint8_T)(/*@>1341e*/tmp/*@>13421*/ < /*@>1341d*/0.0/*@>13421*/ ? (int32_T)/*@>13429*/(uint8_T)-/*@<13432*//*@>13427*/(int8_T)/*@>13435*/(uint8_T)-/*@<13425*//*@>13422*/tmp : (int32_T)/*@>13438*/(uint8_T)/*@>1342a*/tmp);
 8001b94:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	f00d f9d4 	bl	800ef4c <__aeabi_dcmplt>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01e      	beq.n	8001be8 <FUNC_OutputData+0x7f0>
 8001baa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001bae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001bbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001bc2:	f00d f9eb 	bl	800ef9c <__aeabi_d2uiz>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	425b      	negs	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	e011      	b.n	8001bf4 <FUNC_OutputData+0x7fc>
 8001bd0:	200008a8 	.word	0x200008a8
 8001bd4:	200010c8 	.word	0x200010c8
 8001bd8:	40240000 	.word	0x40240000
 8001bdc:	40700000 	.word	0x40700000
 8001be0:	3fe00000 	.word	0x3fe00000
 8001be4:	3ff00000 	.word	0x3ff00000
 8001be8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001bec:	f00d f9d6 	bl	800ef9c <__aeabi_d2uiz>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	4a9f      	ldr	r2, [pc, #636]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001bf6:	f882 3746 	strb.w	r3, [r2, #1862]	; 0x746
/* End of DataTypeConversion: '<S83>/Data Type Conversion10' */

/* DataStoreWrite: '<S66>/Data Store Write3' */
/*@>15a6d*/VCU_DW./*@>17395*/VAR_OUT_LC_dash_Bit/*@>6f6d*/ = /*@>1551c*/VCU_B./*@>17161*/DataTypeConversion10_c;
 8001bfa:	4b9e      	ldr	r3, [pc, #632]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001bfc:	f893 3746 	ldrb.w	r3, [r3, #1862]	; 0x746
 8001c00:	4a9d      	ldr	r2, [pc, #628]	; (8001e78 <FUNC_OutputData+0xa80>)
 8001c02:	f882 311e 	strb.w	r3, [r2, #286]	; 0x11e
/* RelationalOperator: '<S108>/Compare' */
/*@>15522*/VCU_B./*@>17164*/Compare_k5/*@>6f71*/ = /*@>15528*/VCU_B./*@>17167*/LC_active_bit;
 8001c06:	4b9b      	ldr	r3, [pc, #620]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001c08:	f893 3781 	ldrb.w	r3, [r3, #1921]	; 0x781
 8001c0c:	4a99      	ldr	r2, [pc, #612]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001c0e:	f882 3808 	strb.w	r3, [r2, #2056]	; 0x808
/* Gain: '<S84>/Factor' */
/*@>1552e*/VCU_B./*@>1716a*/Factor_c0/*@>6f79*/ = /*@>13956*/(uint8_T)(/*@>15534*/VCU_B./*@>1716d*/Compare_k5/*@>133f0*/ << /*@>133ef*/7);
 8001c12:	4b98      	ldr	r3, [pc, #608]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001c14:	f893 3808 	ldrb.w	r3, [r3, #2056]	; 0x808
 8001c18:	01db      	lsls	r3, r3, #7
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	4a95      	ldr	r2, [pc, #596]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001c1e:	f882 3779 	strb.w	r3, [r2, #1913]	; 0x779
/* Sum: '<S84>/Add1' */
/*@>1553a*/VCU_B./*@>17170*/Add1_n/*@>98ed*/ = /*@>13959*/(real_T)/*@>15540*/VCU_B./*@>17173*/Factor_c0/*@>133e1*/ * /*@>133e0*/0.0078125;
 8001c22:	4b94      	ldr	r3, [pc, #592]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001c24:	f893 3779 	ldrb.w	r3, [r3, #1913]	; 0x779
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f00c fea7 	bl	800e97c <__aeabi_ui2d>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4610      	mov	r0, r2
 8001c34:	4619      	mov	r1, r3
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001c3e:	f00c ff13 	bl	800ea68 <__aeabi_dmul>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4b8a      	ldr	r3, [pc, #552]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001c4c:	e9c3 01ea 	strd	r0, r1, [r3, #936]	; 0x3a8
/* DataTypeConversion: '<S84>/Data Type Conversion10' */
/*@>1339a*/tmp/*@>1339c*/ = /*@>14990*/floor(/*@>15546*/VCU_B./*@>17176*/Add1_n);
 8001c50:	4b88      	ldr	r3, [pc, #544]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001c52:	e9d3 23ea 	ldrd	r2, r3, [r3, #936]	; 0x3a8
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f00c fb11 	bl	800e280 <floor>
 8001c5e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>133ba*/if (/*@>14992*/rtIsNaN(/*@>1339e*/tmp)/*@>133a8*/ || /*@>14994*/rtIsInf(/*@>133a3*/tmp)) {
 8001c62:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001c66:	f004 fc5b 	bl	8006520 <rtIsNaN>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d106      	bne.n	8001c7e <FUNC_OutputData+0x886>
 8001c70:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001c74:	f004 fc30 	bl	80064d8 <rtIsInf>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d006      	beq.n	8001c8c <FUNC_OutputData+0x894>
    /*@>133ab*/tmp/*@>133ad*/ = /*@>133aa*/0.0;
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001c8a:	e008      	b.n	8001c9e <FUNC_OutputData+0x8a6>
} else {
    /*@>133b6*/tmp/*@>133b8*/ = /*@>14996*/fmod(/*@>133af*/tmp, /*@>133b3*/256.0);
 8001c8c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	4b79      	ldr	r3, [pc, #484]	; (8001e7c <FUNC_OutputData+0xa84>)
 8001c96:	f00c fb7b 	bl	800e390 <fmod>
 8001c9a:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>1554c*/VCU_B./*@>17179*/DataTypeConversion10_ou/*@>6f81*/ = /*@>13968*/(uint8_T)(/*@>133c1*/tmp/*@>133c4*/ < /*@>133c0*/0.0/*@>133c4*/ ? (int32_T)/*@>133cc*/(uint8_T)-/*@<133d5*//*@>133ca*/(int8_T)/*@>133d8*/(uint8_T)-/*@<133c8*//*@>133c5*/tmp : (int32_T)/*@>133db*/(uint8_T)/*@>133cd*/tmp);
 8001c9e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	f00d f94f 	bl	800ef4c <__aeabi_dcmplt>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d012      	beq.n	8001cda <FUNC_OutputData+0x8e2>
 8001cb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001cb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cc0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001cc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001cc8:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001ccc:	f00d f966 	bl	800ef9c <__aeabi_d2uiz>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	425b      	negs	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	e005      	b.n	8001ce6 <FUNC_OutputData+0x8ee>
 8001cda:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001cde:	f00d f95d 	bl	800ef9c <__aeabi_d2uiz>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	4a63      	ldr	r2, [pc, #396]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001ce8:	f882 3747 	strb.w	r3, [r2, #1863]	; 0x747
/* End of DataTypeConversion: '<S84>/Data Type Conversion10' */

/* DataStoreWrite: '<S66>/Data Store Write4' */
/*@>15a73*/VCU_DW./*@>17398*/VAR_OUT_LC_active_bit/*@>6f83*/ = /*@>15552*/VCU_B./*@>1717c*/DataTypeConversion10_ou;
 8001cec:	4b61      	ldr	r3, [pc, #388]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001cee:	f893 3747 	ldrb.w	r3, [r3, #1863]	; 0x747
 8001cf2:	4a61      	ldr	r2, [pc, #388]	; (8001e78 <FUNC_OutputData+0xa80>)
 8001cf4:	f882 311f 	strb.w	r3, [r2, #287]	; 0x11f
/* Gain: '<S85>/Factor' */
/*@>15558*/VCU_B./*@>1717f*/Factor_b4/*@>6f8b*/ = /*@>1396f*/(uint8_T)(/*@>1555e*/VCU_B./*@>17182*/LC_ready_bit/*@>13393*/ << /*@>13392*/7);
 8001cf8:	4b5e      	ldr	r3, [pc, #376]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001cfa:	f893 3782 	ldrb.w	r3, [r3, #1922]	; 0x782
 8001cfe:	01db      	lsls	r3, r3, #7
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	4a5c      	ldr	r2, [pc, #368]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001d04:	f882 377a 	strb.w	r3, [r2, #1914]	; 0x77a
/* Sum: '<S85>/Add1' */
/*@>15564*/VCU_B./*@>17185*/Add1_jg/*@>98f4*/ = /*@>13972*/(real_T)/*@>1556a*/VCU_B./*@>17188*/Factor_b4/*@>13384*/ * /*@>13383*/0.0078125;
 8001d08:	4b5a      	ldr	r3, [pc, #360]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001d0a:	f893 377a 	ldrb.w	r3, [r3, #1914]	; 0x77a
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f00c fe34 	bl	800e97c <__aeabi_ui2d>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d24:	f00c fea0 	bl	800ea68 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001d32:	e9c3 01ec 	strd	r0, r1, [r3, #944]	; 0x3b0
/* DataTypeConversion: '<S85>/Data Type Conversion10' */
/*@>1333d*/tmp/*@>1333f*/ = /*@>14998*/floor(/*@>15570*/VCU_B./*@>1718b*/Add1_jg);
 8001d36:	4b4f      	ldr	r3, [pc, #316]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001d38:	e9d3 23ec 	ldrd	r2, r3, [r3, #944]	; 0x3b0
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f00c fa9e 	bl	800e280 <floor>
 8001d44:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>1335d*/if (/*@>1499a*/rtIsNaN(/*@>13341*/tmp)/*@>1334b*/ || /*@>1499c*/rtIsInf(/*@>13346*/tmp)) {
 8001d48:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d4c:	f004 fbe8 	bl	8006520 <rtIsNaN>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <FUNC_OutputData+0x96c>
 8001d56:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d5a:	f004 fbbd 	bl	80064d8 <rtIsInf>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <FUNC_OutputData+0x97a>
    /*@>1334e*/tmp/*@>13350*/ = /*@>1334d*/0.0;
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001d70:	e008      	b.n	8001d84 <FUNC_OutputData+0x98c>
} else {
    /*@>13359*/tmp/*@>1335b*/ = /*@>1499e*/fmod(/*@>13352*/tmp, /*@>13356*/256.0);
 8001d72:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <FUNC_OutputData+0xa84>)
 8001d7c:	f00c fb08 	bl	800e390 <fmod>
 8001d80:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15576*/VCU_B./*@>1718e*/DataTypeConversion10_p/*@>6f93*/ = /*@>13981*/(uint8_T)(/*@>13364*/tmp/*@>13367*/ < /*@>13363*/0.0/*@>13367*/ ? (int32_T)/*@>1336f*/(uint8_T)-/*@<13378*//*@>1336d*/(int8_T)/*@>1337b*/(uint8_T)-/*@<1336b*//*@>13368*/tmp : (int32_T)/*@>1337e*/(uint8_T)/*@>13370*/tmp);
 8001d84:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	f00d f8dc 	bl	800ef4c <__aeabi_dcmplt>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d012      	beq.n	8001dc0 <FUNC_OutputData+0x9c8>
 8001d9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001d9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001da6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001daa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001dae:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001db2:	f00d f8f3 	bl	800ef9c <__aeabi_d2uiz>
 8001db6:	4603      	mov	r3, r0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	425b      	negs	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	e005      	b.n	8001dcc <FUNC_OutputData+0x9d4>
 8001dc0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001dc4:	f00d f8ea 	bl	800ef9c <__aeabi_d2uiz>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	4a29      	ldr	r2, [pc, #164]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001dce:	f882 3748 	strb.w	r3, [r2, #1864]	; 0x748
/* End of DataTypeConversion: '<S85>/Data Type Conversion10' */

/* DataStoreWrite: '<S66>/Data Store Write5' */
/*@>15a79*/VCU_DW./*@>1739b*/VAR_OUT_LC_ready_bit/*@>6f95*/ = /*@>1557c*/VCU_B./*@>17191*/DataTypeConversion10_p;
 8001dd2:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001dd4:	f893 3748 	ldrb.w	r3, [r3, #1864]	; 0x748
 8001dd8:	4a27      	ldr	r2, [pc, #156]	; (8001e78 <FUNC_OutputData+0xa80>)
 8001dda:	f882 3120 	strb.w	r3, [r2, #288]	; 0x120
/* Sum: '<S86>/Add1' */
/*@>15582*/VCU_B./*@>17194*/Add1_bq/*@>98f9*/ = /*@>15588*/VCU_B./*@>17197*/LC_Mdes;
 8001dde:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001de0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001de4:	4923      	ldr	r1, [pc, #140]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001de6:	e9c1 23ee 	strd	r2, r3, [r1, #952]	; 0x3b8
/* DataTypeConversion: '<S86>/Data Type Conversion10' */
/*@>132f5*/tmp/*@>132f7*/ = /*@>149a0*/floor(/*@>1558e*/VCU_B./*@>1719a*/Add1_bq);
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <FUNC_OutputData+0xa7c>)
 8001dec:	e9d3 23ee 	ldrd	r2, r3, [r3, #952]	; 0x3b8
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	f00c fa44 	bl	800e280 <floor>
 8001df8:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13315*/if (/*@>149a2*/rtIsNaN(/*@>132f9*/tmp)/*@>13303*/ || /*@>149a4*/rtIsInf(/*@>132fe*/tmp)) {
 8001dfc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e00:	f004 fb8e 	bl	8006520 <rtIsNaN>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <FUNC_OutputData+0xa20>
 8001e0a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e0e:	f004 fb63 	bl	80064d8 <rtIsInf>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d006      	beq.n	8001e26 <FUNC_OutputData+0xa2e>
    /*@>13306*/tmp/*@>13308*/ = /*@>13305*/0.0;
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001e24:	e008      	b.n	8001e38 <FUNC_OutputData+0xa40>
} else {
    /*@>13311*/tmp/*@>13313*/ = /*@>149a6*/fmod(/*@>1330a*/tmp, /*@>1330e*/256.0);
 8001e26:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <FUNC_OutputData+0xa84>)
 8001e30:	f00c faae 	bl	800e390 <fmod>
 8001e34:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15594*/VCU_B./*@>1719d*/DataTypeConversion10_ci/*@>6f9d*/ = /*@>13994*/(uint8_T)(/*@>1331c*/tmp/*@>1331f*/ < /*@>1331b*/0.0/*@>1331f*/ ? (int32_T)/*@>13327*/(uint8_T)-/*@<13330*//*@>13325*/(int8_T)/*@>13333*/(uint8_T)-/*@<13323*//*@>13320*/tmp : (int32_T)/*@>13336*/(uint8_T)/*@>13328*/tmp);
 8001e38:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	f00d f882 	bl	800ef4c <__aeabi_dcmplt>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d018      	beq.n	8001e80 <FUNC_OutputData+0xa88>
 8001e4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e5a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001e66:	f00d f899 	bl	800ef9c <__aeabi_d2uiz>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	425b      	negs	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	e00b      	b.n	8001e8c <FUNC_OutputData+0xa94>
 8001e74:	200008a8 	.word	0x200008a8
 8001e78:	200010c8 	.word	0x200010c8
 8001e7c:	40700000 	.word	0x40700000
 8001e80:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001e84:	f00d f88a 	bl	800ef9c <__aeabi_d2uiz>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	4aaa      	ldr	r2, [pc, #680]	; (8002138 <FUNC_OutputData+0xd40>)
 8001e8e:	f882 3749 	strb.w	r3, [r2, #1865]	; 0x749
/* End of DataTypeConversion: '<S86>/Data Type Conversion10' */

/* DataStoreWrite: '<S66>/Data Store Write6' */
/*@>15a7f*/VCU_DW./*@>1739e*/VAR_OUT_LC_Mdes/*@>6f9f*/ = /*@>1559a*/VCU_B./*@>171a0*/DataTypeConversion10_ci;
 8001e92:	4ba9      	ldr	r3, [pc, #676]	; (8002138 <FUNC_OutputData+0xd40>)
 8001e94:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8001e98:	4aa8      	ldr	r2, [pc, #672]	; (800213c <FUNC_OutputData+0xd44>)
 8001e9a:	f882 3121 	strb.w	r3, [r2, #289]	; 0x121
/* Gain: '<S87>/Factor' */
/*@>155a0*/VCU_B./*@>171a3*/Factor_n/*@>6fa7*/ = /*@>12c24*/0.1/*@>132ee*/ * /*@>155a6*/VCU_B./*@>171a6*/LC_Fnr;
 8001e9e:	4ba6      	ldr	r3, [pc, #664]	; (8002138 <FUNC_OutputData+0xd40>)
 8001ea0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	a3a1      	add	r3, pc, #644	; (adr r3, 8002130 <FUNC_OutputData+0xd38>)
 8001eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eae:	f00c fddb 	bl	800ea68 <__aeabi_dmul>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4b9f      	ldr	r3, [pc, #636]	; (8002138 <FUNC_OutputData+0xd40>)
 8001ebc:	e9c3 01f0 	strd	r0, r1, [r3, #960]	; 0x3c0
/* Sum: '<S87>/Add1' */
/*@>155ac*/VCU_B./*@>171a9*/Add1_io/*@>98fe*/ = /*@>155b2*/VCU_B./*@>171ac*/Factor_n;
 8001ec0:	4b9d      	ldr	r3, [pc, #628]	; (8002138 <FUNC_OutputData+0xd40>)
 8001ec2:	e9d3 23f0 	ldrd	r2, r3, [r3, #960]	; 0x3c0
 8001ec6:	499c      	ldr	r1, [pc, #624]	; (8002138 <FUNC_OutputData+0xd40>)
 8001ec8:	e9c1 23f2 	strd	r2, r3, [r1, #968]	; 0x3c8
/* DataTypeConversion: '<S87>/Data Type Conversion10' */
/*@>132a9*/tmp/*@>132ab*/ = /*@>149a8*/floor(/*@>155b8*/VCU_B./*@>171af*/Add1_io);
 8001ecc:	4b9a      	ldr	r3, [pc, #616]	; (8002138 <FUNC_OutputData+0xd40>)
 8001ece:	e9d3 23f2 	ldrd	r2, r3, [r3, #968]	; 0x3c8
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f00c f9d3 	bl	800e280 <floor>
 8001eda:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>132c9*/if (/*@>149aa*/rtIsNaN(/*@>132ad*/tmp)/*@>132b7*/ || /*@>149ac*/rtIsInf(/*@>132b2*/tmp)) {
 8001ede:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001ee2:	f004 fb1d 	bl	8006520 <rtIsNaN>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d106      	bne.n	8001efa <FUNC_OutputData+0xb02>
 8001eec:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001ef0:	f004 faf2 	bl	80064d8 <rtIsInf>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d006      	beq.n	8001f08 <FUNC_OutputData+0xb10>
    /*@>132ba*/tmp/*@>132bc*/ = /*@>132b9*/0.0;
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001f06:	e008      	b.n	8001f1a <FUNC_OutputData+0xb22>
} else {
    /*@>132c5*/tmp/*@>132c7*/ = /*@>149ae*/fmod(/*@>132be*/tmp, /*@>132c2*/256.0);
 8001f08:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	4b8b      	ldr	r3, [pc, #556]	; (8002140 <FUNC_OutputData+0xd48>)
 8001f12:	f00c fa3d 	bl	800e390 <fmod>
 8001f16:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>155be*/VCU_B./*@>171b2*/DataTypeConversion10_j/*@>6faf*/ = /*@>139a9*/(uint8_T)(/*@>132d0*/tmp/*@>132d3*/ < /*@>132cf*/0.0/*@>132d3*/ ? (int32_T)/*@>132db*/(uint8_T)-/*@<132e4*//*@>132d9*/(int8_T)/*@>132e7*/(uint8_T)-/*@<132d7*//*@>132d4*/tmp : (int32_T)/*@>132ea*/(uint8_T)/*@>132dc*/tmp);
 8001f1a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	f00d f811 	bl	800ef4c <__aeabi_dcmplt>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d012      	beq.n	8001f56 <FUNC_OutputData+0xb5e>
 8001f30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001f34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f44:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001f48:	f00d f828 	bl	800ef9c <__aeabi_d2uiz>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	425b      	negs	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	e005      	b.n	8001f62 <FUNC_OutputData+0xb6a>
 8001f56:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f5a:	f00d f81f 	bl	800ef9c <__aeabi_d2uiz>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	4a75      	ldr	r2, [pc, #468]	; (8002138 <FUNC_OutputData+0xd40>)
 8001f64:	f882 374a 	strb.w	r3, [r2, #1866]	; 0x74a
/* End of DataTypeConversion: '<S87>/Data Type Conversion10' */

/* DataStoreWrite: '<S66>/Data Store Write7' */
/*@>15a85*/VCU_DW./*@>173a1*/VAR_OUT_LC_Fnr/*@>6fb1*/ = /*@>155c4*/VCU_B./*@>171b5*/DataTypeConversion10_j;
 8001f68:	4b73      	ldr	r3, [pc, #460]	; (8002138 <FUNC_OutputData+0xd40>)
 8001f6a:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8001f6e:	4a73      	ldr	r2, [pc, #460]	; (800213c <FUNC_OutputData+0xd44>)
 8001f70:	f882 3122 	strb.w	r3, [r2, #290]	; 0x122
/* Sum: '<S74>/Add1' */
/*@>155ca*/VCU_B./*@>171b8*/Add1_p/*@>9903*/ = /*@>155d0*/VCU_B./*@>171bb*/ABS_switchstate;
 8001f74:	4b70      	ldr	r3, [pc, #448]	; (8002138 <FUNC_OutputData+0xd40>)
 8001f76:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	496e      	ldr	r1, [pc, #440]	; (8002138 <FUNC_OutputData+0xd40>)
 8001f80:	e9c1 23f4 	strd	r2, r3, [r1, #976]	; 0x3d0
/* DataTypeConversion: '<S74>/Data Type Conversion10' */
/*@>13261*/tmp/*@>13263*/ = /*@>149b0*/floor(/*@>155d6*/VCU_B./*@>171be*/Add1_p);
 8001f84:	4b6c      	ldr	r3, [pc, #432]	; (8002138 <FUNC_OutputData+0xd40>)
 8001f86:	e9d3 23f4 	ldrd	r2, r3, [r3, #976]	; 0x3d0
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f00c f977 	bl	800e280 <floor>
 8001f92:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13281*/if (/*@>149b2*/rtIsNaN(/*@>13265*/tmp)/*@>1326f*/ || /*@>149b4*/rtIsInf(/*@>1326a*/tmp)) {
 8001f96:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001f9a:	f004 fac1 	bl	8006520 <rtIsNaN>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d106      	bne.n	8001fb2 <FUNC_OutputData+0xbba>
 8001fa4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001fa8:	f004 fa96 	bl	80064d8 <rtIsInf>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <FUNC_OutputData+0xbc8>
    /*@>13272*/tmp/*@>13274*/ = /*@>13271*/0.0;
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001fbe:	e008      	b.n	8001fd2 <FUNC_OutputData+0xbda>
} else {
    /*@>1327d*/tmp/*@>1327f*/ = /*@>149b6*/fmod(/*@>13276*/tmp, /*@>1327a*/256.0);
 8001fc0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	4b5d      	ldr	r3, [pc, #372]	; (8002140 <FUNC_OutputData+0xd48>)
 8001fca:	f00c f9e1 	bl	800e390 <fmod>
 8001fce:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>155dc*/VCU_B./*@>171c1*/DataTypeConversion10_o3/*@>6fb9*/ = /*@>139bc*/(uint8_T)(/*@>13288*/tmp/*@>1328b*/ < /*@>13287*/0.0/*@>1328b*/ ? (int32_T)/*@>13293*/(uint8_T)-/*@<1329c*//*@>13291*/(int8_T)/*@>1329f*/(uint8_T)-/*@<1328f*//*@>1328c*/tmp : (int32_T)/*@>132a2*/(uint8_T)/*@>13294*/tmp);
 8001fd2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	f00c ffb5 	bl	800ef4c <__aeabi_dcmplt>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d012      	beq.n	800200e <FUNC_OutputData+0xc16>
 8001fe8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001fec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001ffc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002000:	f00c ffcc 	bl	800ef9c <__aeabi_d2uiz>
 8002004:	4603      	mov	r3, r0
 8002006:	b2db      	uxtb	r3, r3
 8002008:	425b      	negs	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	e005      	b.n	800201a <FUNC_OutputData+0xc22>
 800200e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002012:	f00c ffc3 	bl	800ef9c <__aeabi_d2uiz>
 8002016:	4603      	mov	r3, r0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	4a47      	ldr	r2, [pc, #284]	; (8002138 <FUNC_OutputData+0xd40>)
 800201c:	f882 374b 	strb.w	r3, [r2, #1867]	; 0x74b
/* End of DataTypeConversion: '<S74>/Data Type Conversion10' */

/* DataStoreWrite: '<S65>/Data Store Write' */
/*@>15a8b*/VCU_DW./*@>173a4*/VAR_OUT_ABS_switchstate/*@>6fbb*/ = /*@>155e2*/VCU_B./*@>171c4*/DataTypeConversion10_o3;
 8002020:	4b45      	ldr	r3, [pc, #276]	; (8002138 <FUNC_OutputData+0xd40>)
 8002022:	f893 374b 	ldrb.w	r3, [r3, #1867]	; 0x74b
 8002026:	4a45      	ldr	r2, [pc, #276]	; (800213c <FUNC_OutputData+0xd44>)
 8002028:	f882 3123 	strb.w	r3, [r2, #291]	; 0x123
/* Sum: '<S75>/Add1' */
/*@>155e8*/VCU_B./*@>171c7*/Add1_c/*@>9908*/ = /*@>155ee*/VCU_B./*@>171ca*/Add1_m;
 800202c:	4b42      	ldr	r3, [pc, #264]	; (8002138 <FUNC_OutputData+0xd40>)
 800202e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	4940      	ldr	r1, [pc, #256]	; (8002138 <FUNC_OutputData+0xd40>)
 8002038:	e9c1 23f6 	strd	r2, r3, [r1, #984]	; 0x3d8
/* DataTypeConversion: '<S75>/Data Type Conversion10' */
/*@>13219*/tmp/*@>1321b*/ = /*@>149b8*/floor(/*@>155f4*/VCU_B./*@>171cd*/Add1_c);
 800203c:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <FUNC_OutputData+0xd40>)
 800203e:	e9d3 23f6 	ldrd	r2, r3, [r3, #984]	; 0x3d8
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	f00c f91b 	bl	800e280 <floor>
 800204a:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13239*/if (/*@>149ba*/rtIsNaN(/*@>1321d*/tmp)/*@>13227*/ || /*@>149bc*/rtIsInf(/*@>13222*/tmp)) {
 800204e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002052:	f004 fa65 	bl	8006520 <rtIsNaN>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d106      	bne.n	800206a <FUNC_OutputData+0xc72>
 800205c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002060:	f004 fa3a 	bl	80064d8 <rtIsInf>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d006      	beq.n	8002078 <FUNC_OutputData+0xc80>
    /*@>1322a*/tmp/*@>1322c*/ = /*@>13229*/0.0;
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002076:	e008      	b.n	800208a <FUNC_OutputData+0xc92>
} else {
    /*@>13235*/tmp/*@>13237*/ = /*@>149be*/fmod(/*@>1322e*/tmp, /*@>13232*/65536.0);
 8002078:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	4b30      	ldr	r3, [pc, #192]	; (8002144 <FUNC_OutputData+0xd4c>)
 8002082:	f00c f985 	bl	800e390 <fmod>
 8002086:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>155fa*/VCU_B./*@>171d0*/DataTypeConversion10_h/*@>6fc3*/ = /*@>139cf*/(uint16_T)(/*@>13240*/tmp/*@>13243*/ < /*@>1323f*/0.0/*@>13243*/ ? (int32_T)/*@>1324b*/(uint16_T)-/*@<13254*//*@>13249*/(int16_T)/*@>13257*/(uint16_T)-/*@<13247*//*@>13244*/tmp : (int32_T)/*@>1325a*/(uint16_T)/*@>1324c*/tmp);
 800208a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	f00c ff59 	bl	800ef4c <__aeabi_dcmplt>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d012      	beq.n	80020c6 <FUNC_OutputData+0xcce>
 80020a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80020a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80020a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80020b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80020b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80020b8:	f00c ff70 	bl	800ef9c <__aeabi_d2uiz>
 80020bc:	4603      	mov	r3, r0
 80020be:	b29b      	uxth	r3, r3
 80020c0:	425b      	negs	r3, r3
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	e005      	b.n	80020d2 <FUNC_OutputData+0xcda>
 80020c6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80020ca:	f00c ff67 	bl	800ef9c <__aeabi_d2uiz>
 80020ce:	4603      	mov	r3, r0
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	4a19      	ldr	r2, [pc, #100]	; (8002138 <FUNC_OutputData+0xd40>)
 80020d4:	f8a2 3702 	strh.w	r3, [r2, #1794]	; 0x702
/* End of DataTypeConversion: '<S75>/Data Type Conversion10' */

/* DataStoreWrite: '<S65>/Data Store Write1' */
/*@>15a91*/VCU_DW./*@>173a7*/VAR_OUT_p_brake_F/*@>6fc5*/ = /*@>15600*/VCU_B./*@>171d3*/DataTypeConversion10_h;
 80020d8:	4b17      	ldr	r3, [pc, #92]	; (8002138 <FUNC_OutputData+0xd40>)
 80020da:	f8b3 3702 	ldrh.w	r3, [r3, #1794]	; 0x702
 80020de:	4a17      	ldr	r2, [pc, #92]	; (800213c <FUNC_OutputData+0xd44>)
 80020e0:	f8a2 30ca 	strh.w	r3, [r2, #202]	; 0xca
/* Sum: '<S76>/Add1' */
/*@>15606*/VCU_B./*@>171d6*/Add1_js/*@>990d*/ = /*@>1560c*/VCU_B./*@>171d9*/ABS_BL_switch;
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <FUNC_OutputData+0xd40>)
 80020e6:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80020ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ee:	4912      	ldr	r1, [pc, #72]	; (8002138 <FUNC_OutputData+0xd40>)
 80020f0:	e9c1 23f8 	strd	r2, r3, [r1, #992]	; 0x3e0
/* DataTypeConversion: '<S76>/Data Type Conversion10' */
/*@>131d1*/tmp/*@>131d3*/ = /*@>149c0*/floor(/*@>15612*/VCU_B./*@>171dc*/Add1_js);
 80020f4:	4b10      	ldr	r3, [pc, #64]	; (8002138 <FUNC_OutputData+0xd40>)
 80020f6:	e9d3 23f8 	ldrd	r2, r3, [r3, #992]	; 0x3e0
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	f00c f8bf 	bl	800e280 <floor>
 8002102:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>131f1*/if (/*@>149c2*/rtIsNaN(/*@>131d5*/tmp)/*@>131df*/ || /*@>149c4*/rtIsInf(/*@>131da*/tmp)) {
 8002106:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800210a:	f004 fa09 	bl	8006520 <rtIsNaN>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d106      	bne.n	8002122 <FUNC_OutputData+0xd2a>
 8002114:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002118:	f004 f9de 	bl	80064d8 <rtIsInf>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d012      	beq.n	8002148 <FUNC_OutputData+0xd50>
    /*@>131e2*/tmp/*@>131e4*/ = /*@>131e1*/0.0;
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800212e:	e014      	b.n	800215a <FUNC_OutputData+0xd62>
 8002130:	9999999a 	.word	0x9999999a
 8002134:	3fb99999 	.word	0x3fb99999
 8002138:	200008a8 	.word	0x200008a8
 800213c:	200010c8 	.word	0x200010c8
 8002140:	40700000 	.word	0x40700000
 8002144:	40f00000 	.word	0x40f00000
} else {
    /*@>131ed*/tmp/*@>131ef*/ = /*@>149c6*/fmod(/*@>131e6*/tmp, /*@>131ea*/256.0);
 8002148:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	4b9a      	ldr	r3, [pc, #616]	; (80023bc <FUNC_OutputData+0xfc4>)
 8002152:	f00c f91d 	bl	800e390 <fmod>
 8002156:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15618*/VCU_B./*@>171df*/DataTypeConversion10_ok/*@>6fcd*/ = /*@>139e2*/(uint8_T)(/*@>131f8*/tmp/*@>131fb*/ < /*@>131f7*/0.0/*@>131fb*/ ? (int32_T)/*@>13203*/(uint8_T)-/*@<1320c*//*@>13201*/(int8_T)/*@>1320f*/(uint8_T)-/*@<131ff*//*@>131fc*/tmp : (int32_T)/*@>13212*/(uint8_T)/*@>13204*/tmp);
 800215a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	f00c fef1 	bl	800ef4c <__aeabi_dcmplt>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d012      	beq.n	8002196 <FUNC_OutputData+0xd9e>
 8002170:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002174:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800217c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002180:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002184:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002188:	f00c ff08 	bl	800ef9c <__aeabi_d2uiz>
 800218c:	4603      	mov	r3, r0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	425b      	negs	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	e005      	b.n	80021a2 <FUNC_OutputData+0xdaa>
 8002196:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800219a:	f00c feff 	bl	800ef9c <__aeabi_d2uiz>
 800219e:	4603      	mov	r3, r0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4a87      	ldr	r2, [pc, #540]	; (80023c0 <FUNC_OutputData+0xfc8>)
 80021a4:	f882 374c 	strb.w	r3, [r2, #1868]	; 0x74c
/* End of DataTypeConversion: '<S76>/Data Type Conversion10' */

/* DataStoreWrite: '<S65>/Data Store Write2' */
/*@>15a97*/VCU_DW./*@>173aa*/VAR_OUT_ABS_BL_switch/*@>6fcf*/ = /*@>1561e*/VCU_B./*@>171e2*/DataTypeConversion10_ok;
 80021a8:	4b85      	ldr	r3, [pc, #532]	; (80023c0 <FUNC_OutputData+0xfc8>)
 80021aa:	f893 374c 	ldrb.w	r3, [r3, #1868]	; 0x74c
 80021ae:	4a85      	ldr	r2, [pc, #532]	; (80023c4 <FUNC_OutputData+0xfcc>)
 80021b0:	f882 3124 	strb.w	r3, [r2, #292]	; 0x124
/* Sum: '<S77>/Add1' */
/*@>15624*/VCU_B./*@>171e5*/Add1_ak/*@>9912*/ = /*@>1562a*/VCU_B./*@>171e8*/ABS_active;
 80021b4:	4b82      	ldr	r3, [pc, #520]	; (80023c0 <FUNC_OutputData+0xfc8>)
 80021b6:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	4980      	ldr	r1, [pc, #512]	; (80023c0 <FUNC_OutputData+0xfc8>)
 80021c0:	e9c1 23fa 	strd	r2, r3, [r1, #1000]	; 0x3e8
/* DataTypeConversion: '<S77>/Data Type Conversion10' */
/*@>13189*/tmp/*@>1318b*/ = /*@>149c8*/floor(/*@>15630*/VCU_B./*@>171eb*/Add1_ak);
 80021c4:	4b7e      	ldr	r3, [pc, #504]	; (80023c0 <FUNC_OutputData+0xfc8>)
 80021c6:	e9d3 23fa 	ldrd	r2, r3, [r3, #1000]	; 0x3e8
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f00c f857 	bl	800e280 <floor>
 80021d2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>131a9*/if (/*@>149ca*/rtIsNaN(/*@>1318d*/tmp)/*@>13197*/ || /*@>149cc*/rtIsInf(/*@>13192*/tmp)) {
 80021d6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80021da:	f004 f9a1 	bl	8006520 <rtIsNaN>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d106      	bne.n	80021f2 <FUNC_OutputData+0xdfa>
 80021e4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80021e8:	f004 f976 	bl	80064d8 <rtIsInf>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <FUNC_OutputData+0xe08>
    /*@>1319a*/tmp/*@>1319c*/ = /*@>13199*/0.0;
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80021fe:	e008      	b.n	8002212 <FUNC_OutputData+0xe1a>
} else {
    /*@>131a5*/tmp/*@>131a7*/ = /*@>149ce*/fmod(/*@>1319e*/tmp, /*@>131a2*/256.0);
 8002200:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	4b6c      	ldr	r3, [pc, #432]	; (80023bc <FUNC_OutputData+0xfc4>)
 800220a:	f00c f8c1 	bl	800e390 <fmod>
 800220e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15636*/VCU_B./*@>171ee*/DataTypeConversion10_ah/*@>6fd7*/ = /*@>139f5*/(uint8_T)(/*@>131b0*/tmp/*@>131b3*/ < /*@>131af*/0.0/*@>131b3*/ ? (int32_T)/*@>131bb*/(uint8_T)-/*@<131c4*//*@>131b9*/(int8_T)/*@>131c7*/(uint8_T)-/*@<131b7*//*@>131b4*/tmp : (int32_T)/*@>131ca*/(uint8_T)/*@>131bc*/tmp);
 8002212:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	f00c fe95 	bl	800ef4c <__aeabi_dcmplt>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d012      	beq.n	800224e <FUNC_OutputData+0xe56>
 8002228:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800222c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002234:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002238:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800223c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002240:	f00c feac 	bl	800ef9c <__aeabi_d2uiz>
 8002244:	4603      	mov	r3, r0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	425b      	negs	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	e005      	b.n	800225a <FUNC_OutputData+0xe62>
 800224e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002252:	f00c fea3 	bl	800ef9c <__aeabi_d2uiz>
 8002256:	4603      	mov	r3, r0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	4a59      	ldr	r2, [pc, #356]	; (80023c0 <FUNC_OutputData+0xfc8>)
 800225c:	f882 374d 	strb.w	r3, [r2, #1869]	; 0x74d
/* End of DataTypeConversion: '<S77>/Data Type Conversion10' */

/* DataStoreWrite: '<S65>/Data Store Write3' */
/*@>15a9d*/VCU_DW./*@>173ad*/VAR_OUT_ABS_active/*@>6fd9*/ = /*@>1563c*/VCU_B./*@>171f1*/DataTypeConversion10_ah;
 8002260:	4b57      	ldr	r3, [pc, #348]	; (80023c0 <FUNC_OutputData+0xfc8>)
 8002262:	f893 374d 	ldrb.w	r3, [r3, #1869]	; 0x74d
 8002266:	4a57      	ldr	r2, [pc, #348]	; (80023c4 <FUNC_OutputData+0xfcc>)
 8002268:	f882 3125 	strb.w	r3, [r2, #293]	; 0x125
/* Sum: '<S78>/Add1' */
/*@>15642*/VCU_B./*@>171f4*/Add1_n4/*@>9917*/ = /*@>15648*/VCU_B./*@>171f7*/ABS_EBD_Lamp;
 800226c:	4b54      	ldr	r3, [pc, #336]	; (80023c0 <FUNC_OutputData+0xfc8>)
 800226e:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8002272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002276:	4952      	ldr	r1, [pc, #328]	; (80023c0 <FUNC_OutputData+0xfc8>)
 8002278:	e9c1 23fc 	strd	r2, r3, [r1, #1008]	; 0x3f0
/* DataTypeConversion: '<S78>/Data Type Conversion10' */
/*@>13141*/tmp/*@>13143*/ = /*@>149d0*/floor(/*@>1564e*/VCU_B./*@>171fa*/Add1_n4);
 800227c:	4b50      	ldr	r3, [pc, #320]	; (80023c0 <FUNC_OutputData+0xfc8>)
 800227e:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f00b fffb 	bl	800e280 <floor>
 800228a:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13161*/if (/*@>149d2*/rtIsNaN(/*@>13145*/tmp)/*@>1314f*/ || /*@>149d4*/rtIsInf(/*@>1314a*/tmp)) {
 800228e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002292:	f004 f945 	bl	8006520 <rtIsNaN>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d106      	bne.n	80022aa <FUNC_OutputData+0xeb2>
 800229c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80022a0:	f004 f91a 	bl	80064d8 <rtIsInf>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d006      	beq.n	80022b8 <FUNC_OutputData+0xec0>
    /*@>13152*/tmp/*@>13154*/ = /*@>13151*/0.0;
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80022b6:	e008      	b.n	80022ca <FUNC_OutputData+0xed2>
} else {
    /*@>1315d*/tmp/*@>1315f*/ = /*@>149d6*/fmod(/*@>13156*/tmp, /*@>1315a*/256.0);
 80022b8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	4b3e      	ldr	r3, [pc, #248]	; (80023bc <FUNC_OutputData+0xfc4>)
 80022c2:	f00c f865 	bl	800e390 <fmod>
 80022c6:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15654*/VCU_B./*@>171fd*/DataTypeConversion10_d/*@>6fe1*/ = /*@>13a08*/(uint8_T)(/*@>13168*/tmp/*@>1316b*/ < /*@>13167*/0.0/*@>1316b*/ ? (int32_T)/*@>13173*/(uint8_T)-/*@<1317c*//*@>13171*/(int8_T)/*@>1317f*/(uint8_T)-/*@<1316f*//*@>1316c*/tmp : (int32_T)/*@>13182*/(uint8_T)/*@>13174*/tmp);
 80022ca:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	f00c fe39 	bl	800ef4c <__aeabi_dcmplt>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d012      	beq.n	8002306 <FUNC_OutputData+0xf0e>
 80022e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80022e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80022f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022f4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80022f8:	f00c fe50 	bl	800ef9c <__aeabi_d2uiz>
 80022fc:	4603      	mov	r3, r0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	425b      	negs	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	e005      	b.n	8002312 <FUNC_OutputData+0xf1a>
 8002306:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800230a:	f00c fe47 	bl	800ef9c <__aeabi_d2uiz>
 800230e:	4603      	mov	r3, r0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	4a2b      	ldr	r2, [pc, #172]	; (80023c0 <FUNC_OutputData+0xfc8>)
 8002314:	f882 374e 	strb.w	r3, [r2, #1870]	; 0x74e
/* End of DataTypeConversion: '<S78>/Data Type Conversion10' */

/* DataStoreWrite: '<S65>/Data Store Write4' */
/*@>15aa3*/VCU_DW./*@>173b0*/VAR_OUT_ABS_EBD_Lamp/*@>6fe3*/ = /*@>1565a*/VCU_B./*@>17200*/DataTypeConversion10_d;
 8002318:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <FUNC_OutputData+0xfc8>)
 800231a:	f893 374e 	ldrb.w	r3, [r3, #1870]	; 0x74e
 800231e:	4a29      	ldr	r2, [pc, #164]	; (80023c4 <FUNC_OutputData+0xfcc>)
 8002320:	f882 3126 	strb.w	r3, [r2, #294]	; 0x126
/* Sum: '<S79>/Add1' */
/*@>15660*/VCU_B./*@>17203*/Add1_h/*@>991c*/ = /*@>15666*/VCU_B./*@>17206*/ABS_Lamp;
 8002324:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <FUNC_OutputData+0xfc8>)
 8002326:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	4924      	ldr	r1, [pc, #144]	; (80023c0 <FUNC_OutputData+0xfc8>)
 8002330:	e9c1 23fe 	strd	r2, r3, [r1, #1016]	; 0x3f8
/* DataTypeConversion: '<S79>/Data Type Conversion10' */
/*@>130f9*/tmp/*@>130fb*/ = /*@>149d8*/floor(/*@>1566c*/VCU_B./*@>17209*/Add1_h);
 8002334:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <FUNC_OutputData+0xfc8>)
 8002336:	e9d3 23fe 	ldrd	r2, r3, [r3, #1016]	; 0x3f8
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	f00b ff9f 	bl	800e280 <floor>
 8002342:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13119*/if (/*@>149da*/rtIsNaN(/*@>130fd*/tmp)/*@>13107*/ || /*@>149dc*/rtIsInf(/*@>13102*/tmp)) {
 8002346:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800234a:	f004 f8e9 	bl	8006520 <rtIsNaN>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d106      	bne.n	8002362 <FUNC_OutputData+0xf6a>
 8002354:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002358:	f004 f8be 	bl	80064d8 <rtIsInf>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d006      	beq.n	8002370 <FUNC_OutputData+0xf78>
    /*@>1310a*/tmp/*@>1310c*/ = /*@>13109*/0.0;
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800236e:	e008      	b.n	8002382 <FUNC_OutputData+0xf8a>
} else {
    /*@>13115*/tmp/*@>13117*/ = /*@>149de*/fmod(/*@>1310e*/tmp, /*@>13112*/256.0);
 8002370:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	4b10      	ldr	r3, [pc, #64]	; (80023bc <FUNC_OutputData+0xfc4>)
 800237a:	f00c f809 	bl	800e390 <fmod>
 800237e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15672*/VCU_B./*@>1720c*/DataTypeConversion10_bd/*@>6feb*/ = /*@>13a1b*/(uint8_T)(/*@>13120*/tmp/*@>13123*/ < /*@>1311f*/0.0/*@>13123*/ ? (int32_T)/*@>1312b*/(uint8_T)-/*@<13134*//*@>13129*/(int8_T)/*@>13137*/(uint8_T)-/*@<13127*//*@>13124*/tmp : (int32_T)/*@>1313a*/(uint8_T)/*@>1312c*/tmp);
 8002382:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	f00c fddd 	bl	800ef4c <__aeabi_dcmplt>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d017      	beq.n	80023c8 <FUNC_OutputData+0xfd0>
 8002398:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800239c:	67bb      	str	r3, [r7, #120]	; 0x78
 800239e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023a8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80023ac:	f00c fdf6 	bl	800ef9c <__aeabi_d2uiz>
 80023b0:	4603      	mov	r3, r0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	425b      	negs	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	e00c      	b.n	80023d4 <FUNC_OutputData+0xfdc>
 80023ba:	bf00      	nop
 80023bc:	40700000 	.word	0x40700000
 80023c0:	200008a8 	.word	0x200008a8
 80023c4:	200010c8 	.word	0x200010c8
 80023c8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80023cc:	f00c fde6 	bl	800ef9c <__aeabi_d2uiz>
 80023d0:	4603      	mov	r3, r0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	4aa9      	ldr	r2, [pc, #676]	; (800267c <FUNC_OutputData+0x1284>)
 80023d6:	f882 374f 	strb.w	r3, [r2, #1871]	; 0x74f
/* End of DataTypeConversion: '<S79>/Data Type Conversion10' */

/* DataStoreWrite: '<S65>/Data Store Write5' */
/*@>15aa9*/VCU_DW./*@>173b3*/VAR_OUT_ABS_Lamp/*@>6fed*/ = /*@>15678*/VCU_B./*@>1720f*/DataTypeConversion10_bd;
 80023da:	4ba8      	ldr	r3, [pc, #672]	; (800267c <FUNC_OutputData+0x1284>)
 80023dc:	f893 374f 	ldrb.w	r3, [r3, #1871]	; 0x74f
 80023e0:	4aa7      	ldr	r2, [pc, #668]	; (8002680 <FUNC_OutputData+0x1288>)
 80023e2:	f882 3127 	strb.w	r3, [r2, #295]	; 0x127
/* Gain: '<S88>/Factor' */
/*@>1567e*/VCU_B./*@>17212*/Factor_a/*@>6ff5*/ = /*@>12c25*/10.0/*@>130f2*/ * /*@>15684*/VCU_B./*@>17215*/Saturation1_e;
 80023e6:	4ba5      	ldr	r3, [pc, #660]	; (800267c <FUNC_OutputData+0x1284>)
 80023e8:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	4ba2      	ldr	r3, [pc, #648]	; (8002684 <FUNC_OutputData+0x128c>)
 80023fa:	f00c fb35 	bl	800ea68 <__aeabi_dmul>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	4b9d      	ldr	r3, [pc, #628]	; (800267c <FUNC_OutputData+0x1284>)
 8002408:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800240c:	e9c3 0100 	strd	r0, r1, [r3]
/* Sum: '<S88>/Add1' */
/*@>1568a*/VCU_B./*@>17218*/Add1_lh/*@>9921*/ = /*@>15690*/VCU_B./*@>1721b*/Factor_a;
 8002410:	4b9a      	ldr	r3, [pc, #616]	; (800267c <FUNC_OutputData+0x1284>)
 8002412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800241a:	4b98      	ldr	r3, [pc, #608]	; (800267c <FUNC_OutputData+0x1284>)
 800241c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002420:	e9c3 0100 	strd	r0, r1, [r3]
/* DataTypeConversion: '<S88>/Data Type Conversion10' */
/*@>130ad*/tmp/*@>130af*/ = /*@>149e0*/floor(/*@>15696*/VCU_B./*@>1721e*/Add1_lh);
 8002424:	4b95      	ldr	r3, [pc, #596]	; (800267c <FUNC_OutputData+0x1284>)
 8002426:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	f00b ff25 	bl	800e280 <floor>
 8002436:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>130cd*/if (/*@>149e2*/rtIsNaN(/*@>130b1*/tmp)/*@>130bb*/ || /*@>149e4*/rtIsInf(/*@>130b6*/tmp)) {
 800243a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800243e:	f004 f86f 	bl	8006520 <rtIsNaN>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d106      	bne.n	8002456 <FUNC_OutputData+0x105e>
 8002448:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800244c:	f004 f844 	bl	80064d8 <rtIsInf>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d006      	beq.n	8002464 <FUNC_OutputData+0x106c>
    /*@>130be*/tmp/*@>130c0*/ = /*@>130bd*/0.0;
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002462:	e008      	b.n	8002476 <FUNC_OutputData+0x107e>
} else {
    /*@>130c9*/tmp/*@>130cb*/ = /*@>149e6*/fmod(/*@>130c2*/tmp, /*@>130c6*/65536.0);
 8002464:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	4b86      	ldr	r3, [pc, #536]	; (8002688 <FUNC_OutputData+0x1290>)
 800246e:	f00b ff8f 	bl	800e390 <fmod>
 8002472:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>1569c*/VCU_B./*@>17221*/DataTypeConversion10_m/*@>6ffd*/ = /*@>13a30*/(uint16_T)(/*@>130d4*/tmp/*@>130d7*/ < /*@>130d3*/0.0/*@>130d7*/ ? (int32_T)/*@>130df*/(uint16_T)-/*@<130e8*//*@>130dd*/(int16_T)/*@>130eb*/(uint16_T)-/*@<130db*//*@>130d8*/tmp : (int32_T)/*@>130ee*/(uint16_T)/*@>130e0*/tmp);
 8002476:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	f00c fd63 	bl	800ef4c <__aeabi_dcmplt>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d010      	beq.n	80024ae <FUNC_OutputData+0x10b6>
 800248c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002490:	673b      	str	r3, [r7, #112]	; 0x70
 8002492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002496:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800249a:	677b      	str	r3, [r7, #116]	; 0x74
 800249c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80024a0:	f00c fd7c 	bl	800ef9c <__aeabi_d2uiz>
 80024a4:	4603      	mov	r3, r0
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	425b      	negs	r3, r3
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	e005      	b.n	80024ba <FUNC_OutputData+0x10c2>
 80024ae:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80024b2:	f00c fd73 	bl	800ef9c <__aeabi_d2uiz>
 80024b6:	4603      	mov	r3, r0
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	4a70      	ldr	r2, [pc, #448]	; (800267c <FUNC_OutputData+0x1284>)
 80024bc:	f8a2 3704 	strh.w	r3, [r2, #1796]	; 0x704
/* End of DataTypeConversion: '<S88>/Data Type Conversion10' */

/* DataStoreWrite: '<S67>/Data Store Write' */
/*@>15aaf*/VCU_DW./*@>173b6*/VAR_OUT_f_FL/*@>6fff*/ = /*@>156a2*/VCU_B./*@>17224*/DataTypeConversion10_m;
 80024c0:	4b6e      	ldr	r3, [pc, #440]	; (800267c <FUNC_OutputData+0x1284>)
 80024c2:	f8b3 3704 	ldrh.w	r3, [r3, #1796]	; 0x704
 80024c6:	4a6e      	ldr	r2, [pc, #440]	; (8002680 <FUNC_OutputData+0x1288>)
 80024c8:	f8a2 30cc 	strh.w	r3, [r2, #204]	; 0xcc
/* Gain: '<S89>/Factor' */
/*@>156a8*/VCU_B./*@>17227*/Factor_i/*@>7007*/ = /*@>12c26*/10.0/*@>130a6*/ * /*@>156ae*/VCU_B./*@>1722a*/Saturation1_n;
 80024cc:	4b6b      	ldr	r3, [pc, #428]	; (800267c <FUNC_OutputData+0x1284>)
 80024ce:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 80024d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d6:	4610      	mov	r0, r2
 80024d8:	4619      	mov	r1, r3
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	4b69      	ldr	r3, [pc, #420]	; (8002684 <FUNC_OutputData+0x128c>)
 80024e0:	f00c fac2 	bl	800ea68 <__aeabi_dmul>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4610      	mov	r0, r2
 80024ea:	4619      	mov	r1, r3
 80024ec:	4b63      	ldr	r3, [pc, #396]	; (800267c <FUNC_OutputData+0x1284>)
 80024ee:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80024f2:	e9c3 0100 	strd	r0, r1, [r3]
/* Sum: '<S89>/Add1' */
/*@>156b4*/VCU_B./*@>1722d*/Add1_bqm/*@>9926*/ = /*@>156ba*/VCU_B./*@>17230*/Factor_i;
 80024f6:	4b61      	ldr	r3, [pc, #388]	; (800267c <FUNC_OutputData+0x1284>)
 80024f8:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80024fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002500:	4b5e      	ldr	r3, [pc, #376]	; (800267c <FUNC_OutputData+0x1284>)
 8002502:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8002506:	e9c3 0100 	strd	r0, r1, [r3]
/* DataTypeConversion: '<S89>/Data Type Conversion10' */
/*@>13061*/tmp/*@>13063*/ = /*@>149e8*/floor(/*@>156c0*/VCU_B./*@>17233*/Add1_bqm);
 800250a:	4b5c      	ldr	r3, [pc, #368]	; (800267c <FUNC_OutputData+0x1284>)
 800250c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	f00b feb2 	bl	800e280 <floor>
 800251c:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13081*/if (/*@>149ea*/rtIsNaN(/*@>13065*/tmp)/*@>1306f*/ || /*@>149ec*/rtIsInf(/*@>1306a*/tmp)) {
 8002520:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002524:	f003 fffc 	bl	8006520 <rtIsNaN>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <FUNC_OutputData+0x1144>
 800252e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002532:	f003 ffd1 	bl	80064d8 <rtIsInf>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d006      	beq.n	800254a <FUNC_OutputData+0x1152>
    /*@>13072*/tmp/*@>13074*/ = /*@>13071*/0.0;
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002548:	e008      	b.n	800255c <FUNC_OutputData+0x1164>
} else {
    /*@>1307d*/tmp/*@>1307f*/ = /*@>149ee*/fmod(/*@>13076*/tmp, /*@>1307a*/65536.0);
 800254a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	4b4d      	ldr	r3, [pc, #308]	; (8002688 <FUNC_OutputData+0x1290>)
 8002554:	f00b ff1c 	bl	800e390 <fmod>
 8002558:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>156c6*/VCU_B./*@>17236*/DataTypeConversion10_f/*@>700f*/ = /*@>13a45*/(uint16_T)(/*@>13088*/tmp/*@>1308b*/ < /*@>13087*/0.0/*@>1308b*/ ? (int32_T)/*@>13093*/(uint16_T)-/*@<1309c*//*@>13091*/(int16_T)/*@>1309f*/(uint16_T)-/*@<1308f*//*@>1308c*/tmp : (int32_T)/*@>130a2*/(uint16_T)/*@>13094*/tmp);
 800255c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	f00c fcf0 	bl	800ef4c <__aeabi_dcmplt>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d010      	beq.n	8002594 <FUNC_OutputData+0x119c>
 8002572:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002576:	66bb      	str	r3, [r7, #104]	; 0x68
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002580:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002582:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002586:	f00c fd09 	bl	800ef9c <__aeabi_d2uiz>
 800258a:	4603      	mov	r3, r0
 800258c:	b29b      	uxth	r3, r3
 800258e:	425b      	negs	r3, r3
 8002590:	b29b      	uxth	r3, r3
 8002592:	e005      	b.n	80025a0 <FUNC_OutputData+0x11a8>
 8002594:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002598:	f00c fd00 	bl	800ef9c <__aeabi_d2uiz>
 800259c:	4603      	mov	r3, r0
 800259e:	b29b      	uxth	r3, r3
 80025a0:	4a36      	ldr	r2, [pc, #216]	; (800267c <FUNC_OutputData+0x1284>)
 80025a2:	f8a2 3706 	strh.w	r3, [r2, #1798]	; 0x706
/* End of DataTypeConversion: '<S89>/Data Type Conversion10' */

/* DataStoreWrite: '<S67>/Data Store Write1' */
/*@>15ab5*/VCU_DW./*@>173b9*/VAR_OUT_f_FR/*@>7011*/ = /*@>156cc*/VCU_B./*@>17239*/DataTypeConversion10_f;
 80025a6:	4b35      	ldr	r3, [pc, #212]	; (800267c <FUNC_OutputData+0x1284>)
 80025a8:	f8b3 3706 	ldrh.w	r3, [r3, #1798]	; 0x706
 80025ac:	4a34      	ldr	r2, [pc, #208]	; (8002680 <FUNC_OutputData+0x1288>)
 80025ae:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
/* Gain: '<S90>/Factor' */
/*@>156d2*/VCU_B./*@>1723c*/Factor_jn/*@>7019*/ = /*@>12c27*/10.0/*@>1305a*/ * /*@>156d8*/VCU_B./*@>1723f*/Saturation1_o;
 80025b2:	4b32      	ldr	r3, [pc, #200]	; (800267c <FUNC_OutputData+0x1284>)
 80025b4:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	4b2f      	ldr	r3, [pc, #188]	; (8002684 <FUNC_OutputData+0x128c>)
 80025c6:	f00c fa4f 	bl	800ea68 <__aeabi_dmul>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4610      	mov	r0, r2
 80025d0:	4619      	mov	r1, r3
 80025d2:	4b2a      	ldr	r3, [pc, #168]	; (800267c <FUNC_OutputData+0x1284>)
 80025d4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80025d8:	e9c3 0100 	strd	r0, r1, [r3]
/* Sum: '<S90>/Add1' */
/*@>156de*/VCU_B./*@>17242*/Add1_iv/*@>992b*/ = /*@>156e4*/VCU_B./*@>17245*/Factor_jn;
 80025dc:	4b27      	ldr	r3, [pc, #156]	; (800267c <FUNC_OutputData+0x1284>)
 80025de:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80025e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e6:	4b25      	ldr	r3, [pc, #148]	; (800267c <FUNC_OutputData+0x1284>)
 80025e8:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80025ec:	e9c3 0100 	strd	r0, r1, [r3]
/* DataTypeConversion: '<S90>/Data Type Conversion10' */
/*@>13015*/tmp/*@>13017*/ = /*@>149f0*/floor(/*@>156ea*/VCU_B./*@>17248*/Add1_iv);
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <FUNC_OutputData+0x1284>)
 80025f2:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80025f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f00b fe3f 	bl	800e280 <floor>
 8002602:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>13035*/if (/*@>149f2*/rtIsNaN(/*@>13019*/tmp)/*@>13023*/ || /*@>149f4*/rtIsInf(/*@>1301e*/tmp)) {
 8002606:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800260a:	f003 ff89 	bl	8006520 <rtIsNaN>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d106      	bne.n	8002622 <FUNC_OutputData+0x122a>
 8002614:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002618:	f003 ff5e 	bl	80064d8 <rtIsInf>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d006      	beq.n	8002630 <FUNC_OutputData+0x1238>
    /*@>13026*/tmp/*@>13028*/ = /*@>13025*/0.0;
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800262e:	e008      	b.n	8002642 <FUNC_OutputData+0x124a>
} else {
    /*@>13031*/tmp/*@>13033*/ = /*@>149f6*/fmod(/*@>1302a*/tmp, /*@>1302e*/65536.0);
 8002630:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <FUNC_OutputData+0x1290>)
 800263a:	f00b fea9 	bl	800e390 <fmod>
 800263e:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>156f0*/VCU_B./*@>1724b*/DataTypeConversion10_a/*@>7021*/ = /*@>13a5a*/(uint16_T)(/*@>1303c*/tmp/*@>1303f*/ < /*@>1303b*/0.0/*@>1303f*/ ? (int32_T)/*@>13047*/(uint16_T)-/*@<13050*//*@>13045*/(int16_T)/*@>13053*/(uint16_T)-/*@<13043*//*@>13040*/tmp : (int32_T)/*@>13056*/(uint16_T)/*@>13048*/tmp);
 8002642:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	f00c fc7d 	bl	800ef4c <__aeabi_dcmplt>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d019      	beq.n	800268c <FUNC_OutputData+0x1294>
 8002658:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800265c:	663b      	str	r3, [r7, #96]	; 0x60
 800265e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002662:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002666:	667b      	str	r3, [r7, #100]	; 0x64
 8002668:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800266c:	f00c fc96 	bl	800ef9c <__aeabi_d2uiz>
 8002670:	4603      	mov	r3, r0
 8002672:	b29b      	uxth	r3, r3
 8002674:	425b      	negs	r3, r3
 8002676:	b29b      	uxth	r3, r3
 8002678:	e00e      	b.n	8002698 <FUNC_OutputData+0x12a0>
 800267a:	bf00      	nop
 800267c:	200008a8 	.word	0x200008a8
 8002680:	200010c8 	.word	0x200010c8
 8002684:	40240000 	.word	0x40240000
 8002688:	40f00000 	.word	0x40f00000
 800268c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002690:	f00c fc84 	bl	800ef9c <__aeabi_d2uiz>
 8002694:	4603      	mov	r3, r0
 8002696:	b29b      	uxth	r3, r3
 8002698:	4aab      	ldr	r2, [pc, #684]	; (8002948 <FUNC_OutputData+0x1550>)
 800269a:	f8a2 3708 	strh.w	r3, [r2, #1800]	; 0x708
/* End of DataTypeConversion: '<S90>/Data Type Conversion10' */

/* DataStoreWrite: '<S67>/Data Store Write2' */
/*@>15abb*/VCU_DW./*@>173bc*/VAR_OUT_f_RL/*@>7023*/ = /*@>156f6*/VCU_B./*@>1724e*/DataTypeConversion10_a;
 800269e:	4baa      	ldr	r3, [pc, #680]	; (8002948 <FUNC_OutputData+0x1550>)
 80026a0:	f8b3 3708 	ldrh.w	r3, [r3, #1800]	; 0x708
 80026a4:	4aa9      	ldr	r2, [pc, #676]	; (800294c <FUNC_OutputData+0x1554>)
 80026a6:	f8a2 30d0 	strh.w	r3, [r2, #208]	; 0xd0
/* Gain: '<S91>/Factor' */
/*@>156fc*/VCU_B./*@>17251*/Factor_h0/*@>702b*/ = /*@>12c28*/10.0/*@>1300e*/ * /*@>15702*/VCU_B./*@>17254*/Saturation1_h;
 80026aa:	4ba7      	ldr	r3, [pc, #668]	; (8002948 <FUNC_OutputData+0x1550>)
 80026ac:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 80026b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b4:	4610      	mov	r0, r2
 80026b6:	4619      	mov	r1, r3
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	4ba4      	ldr	r3, [pc, #656]	; (8002950 <FUNC_OutputData+0x1558>)
 80026be:	f00c f9d3 	bl	800ea68 <__aeabi_dmul>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	4b9f      	ldr	r3, [pc, #636]	; (8002948 <FUNC_OutputData+0x1550>)
 80026cc:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80026d0:	e9c3 0100 	strd	r0, r1, [r3]
/* Sum: '<S91>/Add1' */
/*@>15708*/VCU_B./*@>17257*/Add1_i1/*@>9930*/ = /*@>1570e*/VCU_B./*@>1725a*/Factor_h0;
 80026d4:	4b9c      	ldr	r3, [pc, #624]	; (8002948 <FUNC_OutputData+0x1550>)
 80026d6:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80026da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026de:	4b9a      	ldr	r3, [pc, #616]	; (8002948 <FUNC_OutputData+0x1550>)
 80026e0:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80026e4:	e9c3 0100 	strd	r0, r1, [r3]
/* DataTypeConversion: '<S91>/Data Type Conversion10' */
/*@>12fc9*/tmp/*@>12fcb*/ = /*@>149f8*/floor(/*@>15714*/VCU_B./*@>1725d*/Add1_i1);
 80026e8:	4b97      	ldr	r3, [pc, #604]	; (8002948 <FUNC_OutputData+0x1550>)
 80026ea:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	f00b fdc3 	bl	800e280 <floor>
 80026fa:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>12fe9*/if (/*@>149fa*/rtIsNaN(/*@>12fcd*/tmp)/*@>12fd7*/ || /*@>149fc*/rtIsInf(/*@>12fd2*/tmp)) {
 80026fe:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002702:	f003 ff0d 	bl	8006520 <rtIsNaN>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d106      	bne.n	800271a <FUNC_OutputData+0x1322>
 800270c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002710:	f003 fee2 	bl	80064d8 <rtIsInf>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d006      	beq.n	8002728 <FUNC_OutputData+0x1330>
    /*@>12fda*/tmp/*@>12fdc*/ = /*@>12fd9*/0.0;
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002726:	e008      	b.n	800273a <FUNC_OutputData+0x1342>
} else {
    /*@>12fe5*/tmp/*@>12fe7*/ = /*@>149fe*/fmod(/*@>12fde*/tmp, /*@>12fe2*/65536.0);
 8002728:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	4b88      	ldr	r3, [pc, #544]	; (8002954 <FUNC_OutputData+0x155c>)
 8002732:	f00b fe2d 	bl	800e390 <fmod>
 8002736:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>1571a*/VCU_B./*@>17260*/DataTypeConversion10_n/*@>7033*/ = /*@>13a6f*/(uint16_T)(/*@>12ff0*/tmp/*@>12ff3*/ < /*@>12fef*/0.0/*@>12ff3*/ ? (int32_T)/*@>12ffb*/(uint16_T)-/*@<13004*//*@>12ff9*/(int16_T)/*@>13007*/(uint16_T)-/*@<12ff7*//*@>12ff4*/tmp : (int32_T)/*@>1300a*/(uint16_T)/*@>12ffc*/tmp);
 800273a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	f00c fc01 	bl	800ef4c <__aeabi_dcmplt>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d010      	beq.n	8002772 <FUNC_OutputData+0x137a>
 8002750:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002754:	65bb      	str	r3, [r7, #88]	; 0x58
 8002756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800275e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002760:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002764:	f00c fc1a 	bl	800ef9c <__aeabi_d2uiz>
 8002768:	4603      	mov	r3, r0
 800276a:	b29b      	uxth	r3, r3
 800276c:	425b      	negs	r3, r3
 800276e:	b29b      	uxth	r3, r3
 8002770:	e005      	b.n	800277e <FUNC_OutputData+0x1386>
 8002772:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002776:	f00c fc11 	bl	800ef9c <__aeabi_d2uiz>
 800277a:	4603      	mov	r3, r0
 800277c:	b29b      	uxth	r3, r3
 800277e:	4a72      	ldr	r2, [pc, #456]	; (8002948 <FUNC_OutputData+0x1550>)
 8002780:	f8a2 370a 	strh.w	r3, [r2, #1802]	; 0x70a
/* End of DataTypeConversion: '<S91>/Data Type Conversion10' */

/* DataStoreWrite: '<S67>/Data Store Write3' */
/*@>15ac1*/VCU_DW./*@>173bf*/VAR_OUT_f_RR/*@>7035*/ = /*@>15720*/VCU_B./*@>17263*/DataTypeConversion10_n;
 8002784:	4b70      	ldr	r3, [pc, #448]	; (8002948 <FUNC_OutputData+0x1550>)
 8002786:	f8b3 370a 	ldrh.w	r3, [r3, #1802]	; 0x70a
 800278a:	4a70      	ldr	r2, [pc, #448]	; (800294c <FUNC_OutputData+0x1554>)
 800278c:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
/* Gain: '<S92>/Factor' */
/*@>15726*/VCU_B./*@>17266*/Factor_dd/*@>703d*/ = /*@>12c29*/1.3/*@>12fc2*/ * /*@>1572c*/VCU_B./*@>17269*/x_RH_RL;
 8002790:	4b6d      	ldr	r3, [pc, #436]	; (8002948 <FUNC_OutputData+0x1550>)
 8002792:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8002796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	a368      	add	r3, pc, #416	; (adr r3, 8002940 <FUNC_OutputData+0x1548>)
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	f00c f960 	bl	800ea68 <__aeabi_dmul>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	4b65      	ldr	r3, [pc, #404]	; (8002948 <FUNC_OutputData+0x1550>)
 80027b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027b6:	e9c3 0100 	strd	r0, r1, [r3]
/* Sum: '<S92>/Add1' */
/*@>15732*/VCU_B./*@>1726c*/Add1_ai/*@>9935*/ = /*@>15738*/VCU_B./*@>1726f*/Factor_dd;
 80027ba:	4b63      	ldr	r3, [pc, #396]	; (8002948 <FUNC_OutputData+0x1550>)
 80027bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027c4:	4b60      	ldr	r3, [pc, #384]	; (8002948 <FUNC_OutputData+0x1550>)
 80027c6:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80027ca:	e9c3 0100 	strd	r0, r1, [r3]
/* DataTypeConversion: '<S92>/Data Type Conversion10' */
/*@>12f7d*/tmp/*@>12f7f*/ = /*@>14a00*/floor(/*@>1573e*/VCU_B./*@>17272*/Add1_ai);
 80027ce:	4b5e      	ldr	r3, [pc, #376]	; (8002948 <FUNC_OutputData+0x1550>)
 80027d0:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80027d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	f00b fd50 	bl	800e280 <floor>
 80027e0:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>12f9d*/if (/*@>14a02*/rtIsNaN(/*@>12f81*/tmp)/*@>12f8b*/ || /*@>14a04*/rtIsInf(/*@>12f86*/tmp)) {
 80027e4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80027e8:	f003 fe9a 	bl	8006520 <rtIsNaN>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <FUNC_OutputData+0x1408>
 80027f2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80027f6:	f003 fe6f 	bl	80064d8 <rtIsInf>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <FUNC_OutputData+0x1416>
    /*@>12f8e*/tmp/*@>12f90*/ = /*@>12f8d*/0.0;
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800280c:	e008      	b.n	8002820 <FUNC_OutputData+0x1428>
} else {
    /*@>12f99*/tmp/*@>12f9b*/ = /*@>14a06*/fmod(/*@>12f92*/tmp, /*@>12f96*/256.0);
 800280e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	4b50      	ldr	r3, [pc, #320]	; (8002958 <FUNC_OutputData+0x1560>)
 8002818:	f00b fdba 	bl	800e390 <fmod>
 800281c:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15744*/VCU_B./*@>17275*/DataTypeConversion10_px/*@>7045*/ = /*@>13a84*/(uint8_T)(/*@>12fa4*/tmp/*@>12fa7*/ < /*@>12fa3*/0.0/*@>12fa7*/ ? (int32_T)/*@>12faf*/(uint8_T)-/*@<12fb8*//*@>12fad*/(int8_T)/*@>12fbb*/(uint8_T)-/*@<12fab*//*@>12fa8*/tmp : (int32_T)/*@>12fbe*/(uint8_T)/*@>12fb0*/tmp);
 8002820:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	f00c fb8e 	bl	800ef4c <__aeabi_dcmplt>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d010      	beq.n	8002858 <FUNC_OutputData+0x1460>
 8002836:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800283a:	653b      	str	r3, [r7, #80]	; 0x50
 800283c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002840:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002844:	657b      	str	r3, [r7, #84]	; 0x54
 8002846:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800284a:	f00c fba7 	bl	800ef9c <__aeabi_d2uiz>
 800284e:	4603      	mov	r3, r0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	425b      	negs	r3, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	e005      	b.n	8002864 <FUNC_OutputData+0x146c>
 8002858:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800285c:	f00c fb9e 	bl	800ef9c <__aeabi_d2uiz>
 8002860:	4603      	mov	r3, r0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	4a38      	ldr	r2, [pc, #224]	; (8002948 <FUNC_OutputData+0x1550>)
 8002866:	f882 3750 	strb.w	r3, [r2, #1872]	; 0x750
/* End of DataTypeConversion: '<S92>/Data Type Conversion10' */

/* DataStoreWrite: '<S68>/Data Store Write' */
/*@>15ac7*/VCU_DW./*@>173c2*/VAR_OUT_x_RH_RL/*@>7047*/ = /*@>1574a*/VCU_B./*@>17278*/DataTypeConversion10_px;
 800286a:	4b37      	ldr	r3, [pc, #220]	; (8002948 <FUNC_OutputData+0x1550>)
 800286c:	f893 3750 	ldrb.w	r3, [r3, #1872]	; 0x750
 8002870:	4a36      	ldr	r2, [pc, #216]	; (800294c <FUNC_OutputData+0x1554>)
 8002872:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
/* Gain: '<S93>/Factor' */
/*@>15750*/VCU_B./*@>1727b*/Factor_bc/*@>704f*/ = /*@>12c2a*/1.3/*@>12f76*/ * /*@>15756*/VCU_B./*@>1727e*/x_RH_RR;
 8002876:	4b34      	ldr	r3, [pc, #208]	; (8002948 <FUNC_OutputData+0x1550>)
 8002878:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 800287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	a32e      	add	r3, pc, #184	; (adr r3, 8002940 <FUNC_OutputData+0x1548>)
 8002886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288a:	f00c f8ed 	bl	800ea68 <__aeabi_dmul>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4610      	mov	r0, r2
 8002894:	4619      	mov	r1, r3
 8002896:	4b2c      	ldr	r3, [pc, #176]	; (8002948 <FUNC_OutputData+0x1550>)
 8002898:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 800289c:	e9c3 0100 	strd	r0, r1, [r3]
/* Sum: '<S93>/Add1' */
/*@>1575c*/VCU_B./*@>17281*/Add1_o/*@>993a*/ = /*@>15762*/VCU_B./*@>17284*/Factor_bc;
 80028a0:	4b29      	ldr	r3, [pc, #164]	; (8002948 <FUNC_OutputData+0x1550>)
 80028a2:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80028a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028aa:	4b27      	ldr	r3, [pc, #156]	; (8002948 <FUNC_OutputData+0x1550>)
 80028ac:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80028b0:	e9c3 0100 	strd	r0, r1, [r3]
/* DataTypeConversion: '<S93>/Data Type Conversion10' */
/*@>12f31*/tmp/*@>12f33*/ = /*@>14a08*/floor(/*@>15768*/VCU_B./*@>17287*/Add1_o);
 80028b4:	4b24      	ldr	r3, [pc, #144]	; (8002948 <FUNC_OutputData+0x1550>)
 80028b6:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80028ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	f00b fcdd 	bl	800e280 <floor>
 80028c6:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>12f51*/if (/*@>14a0a*/rtIsNaN(/*@>12f35*/tmp)/*@>12f3f*/ || /*@>14a0c*/rtIsInf(/*@>12f3a*/tmp)) {
 80028ca:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80028ce:	f003 fe27 	bl	8006520 <rtIsNaN>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d106      	bne.n	80028e6 <FUNC_OutputData+0x14ee>
 80028d8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80028dc:	f003 fdfc 	bl	80064d8 <rtIsInf>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d006      	beq.n	80028f4 <FUNC_OutputData+0x14fc>
    /*@>12f42*/tmp/*@>12f44*/ = /*@>12f41*/0.0;
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80028f2:	e008      	b.n	8002906 <FUNC_OutputData+0x150e>
} else {
    /*@>12f4d*/tmp/*@>12f4f*/ = /*@>14a0e*/fmod(/*@>12f46*/tmp, /*@>12f4a*/256.0);
 80028f4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	4b16      	ldr	r3, [pc, #88]	; (8002958 <FUNC_OutputData+0x1560>)
 80028fe:	f00b fd47 	bl	800e390 <fmod>
 8002902:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>1576e*/VCU_B./*@>1728a*/DataTypeConversion10_ab/*@>7057*/ = /*@>13a99*/(uint8_T)(/*@>12f58*/tmp/*@>12f5b*/ < /*@>12f57*/0.0/*@>12f5b*/ ? (int32_T)/*@>12f63*/(uint8_T)-/*@<12f6c*//*@>12f61*/(int8_T)/*@>12f6f*/(uint8_T)-/*@<12f5f*//*@>12f5c*/tmp : (int32_T)/*@>12f72*/(uint8_T)/*@>12f64*/tmp);
 8002906:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	f00c fb1b 	bl	800ef4c <__aeabi_dcmplt>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01f      	beq.n	800295c <FUNC_OutputData+0x1564>
 800291c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002920:	64bb      	str	r3, [r7, #72]	; 0x48
 8002922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002926:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800292a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800292c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002930:	f00c fb34 	bl	800ef9c <__aeabi_d2uiz>
 8002934:	4603      	mov	r3, r0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	425b      	negs	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	e014      	b.n	8002968 <FUNC_OutputData+0x1570>
 800293e:	bf00      	nop
 8002940:	cccccccd 	.word	0xcccccccd
 8002944:	3ff4cccc 	.word	0x3ff4cccc
 8002948:	200008a8 	.word	0x200008a8
 800294c:	200010c8 	.word	0x200010c8
 8002950:	40240000 	.word	0x40240000
 8002954:	40f00000 	.word	0x40f00000
 8002958:	40700000 	.word	0x40700000
 800295c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002960:	f00c fb1c 	bl	800ef9c <__aeabi_d2uiz>
 8002964:	4603      	mov	r3, r0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	4aab      	ldr	r2, [pc, #684]	; (8002c18 <FUNC_OutputData+0x1820>)
 800296a:	f882 3751 	strb.w	r3, [r2, #1873]	; 0x751
/* End of DataTypeConversion: '<S93>/Data Type Conversion10' */

/* DataStoreWrite: '<S68>/Data Store Write1' */
/*@>15acd*/VCU_DW./*@>173c5*/VAR_OUT_x_RH_RR/*@>7059*/ = /*@>15774*/VCU_B./*@>1728d*/DataTypeConversion10_ab;
 800296e:	4baa      	ldr	r3, [pc, #680]	; (8002c18 <FUNC_OutputData+0x1820>)
 8002970:	f893 3751 	ldrb.w	r3, [r3, #1873]	; 0x751
 8002974:	4aa9      	ldr	r2, [pc, #676]	; (8002c1c <FUNC_OutputData+0x1824>)
 8002976:	f882 3129 	strb.w	r3, [r2, #297]	; 0x129
/* Gain: '<S94>/Factor' */
/*@>1577a*/VCU_B./*@>17290*/Factor_f/*@>7061*/ = /*@>12c2b*/1.3/*@>12f2a*/ * /*@>15780*/VCU_B./*@>17293*/x_RH_F;
 800297a:	4ba7      	ldr	r3, [pc, #668]	; (8002c18 <FUNC_OutputData+0x1820>)
 800297c:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	a3a1      	add	r3, pc, #644	; (adr r3, 8002c10 <FUNC_OutputData+0x1818>)
 800298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298e:	f00c f86b 	bl	800ea68 <__aeabi_dmul>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	4b9f      	ldr	r3, [pc, #636]	; (8002c18 <FUNC_OutputData+0x1820>)
 800299c:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80029a0:	e9c3 0100 	strd	r0, r1, [r3]
/* Sum: '<S94>/Add1' */
/*@>15786*/VCU_B./*@>17296*/Add1_ge/*@>993f*/ = /*@>1578c*/VCU_B./*@>17299*/Factor_f;
 80029a4:	4b9c      	ldr	r3, [pc, #624]	; (8002c18 <FUNC_OutputData+0x1820>)
 80029a6:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80029aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029ae:	4b9a      	ldr	r3, [pc, #616]	; (8002c18 <FUNC_OutputData+0x1820>)
 80029b0:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80029b4:	e9c3 0100 	strd	r0, r1, [r3]
/* DataTypeConversion: '<S94>/Data Type Conversion10' */
/*@>12ee5*/tmp/*@>12ee7*/ = /*@>14a10*/floor(/*@>15792*/VCU_B./*@>1729c*/Add1_ge);
 80029b8:	4b97      	ldr	r3, [pc, #604]	; (8002c18 <FUNC_OutputData+0x1820>)
 80029ba:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80029be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c2:	4610      	mov	r0, r2
 80029c4:	4619      	mov	r1, r3
 80029c6:	f00b fc5b 	bl	800e280 <floor>
 80029ca:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>12f05*/if (/*@>14a12*/rtIsNaN(/*@>12ee9*/tmp)/*@>12ef3*/ || /*@>14a14*/rtIsInf(/*@>12eee*/tmp)) {
 80029ce:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80029d2:	f003 fda5 	bl	8006520 <rtIsNaN>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d106      	bne.n	80029ea <FUNC_OutputData+0x15f2>
 80029dc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80029e0:	f003 fd7a 	bl	80064d8 <rtIsInf>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d006      	beq.n	80029f8 <FUNC_OutputData+0x1600>
    /*@>12ef6*/tmp/*@>12ef8*/ = /*@>12ef5*/0.0;
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80029f6:	e008      	b.n	8002a0a <FUNC_OutputData+0x1612>
} else {
    /*@>12f01*/tmp/*@>12f03*/ = /*@>14a16*/fmod(/*@>12efa*/tmp, /*@>12efe*/256.0);
 80029f8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	4b87      	ldr	r3, [pc, #540]	; (8002c20 <FUNC_OutputData+0x1828>)
 8002a02:	f00b fcc5 	bl	800e390 <fmod>
 8002a06:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15798*/VCU_B./*@>1729f*/DataTypeConversion10_e/*@>7069*/ = /*@>13aae*/(uint8_T)(/*@>12f0c*/tmp/*@>12f0f*/ < /*@>12f0b*/0.0/*@>12f0f*/ ? (int32_T)/*@>12f17*/(uint8_T)-/*@<12f20*//*@>12f15*/(int8_T)/*@>12f23*/(uint8_T)-/*@<12f13*//*@>12f10*/tmp : (int32_T)/*@>12f26*/(uint8_T)/*@>12f18*/tmp);
 8002a0a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	f00c fa99 	bl	800ef4c <__aeabi_dcmplt>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d010      	beq.n	8002a42 <FUNC_OutputData+0x164a>
 8002a20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002a24:	643b      	str	r3, [r7, #64]	; 0x40
 8002a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a2a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a30:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002a34:	f00c fab2 	bl	800ef9c <__aeabi_d2uiz>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	425b      	negs	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	e005      	b.n	8002a4e <FUNC_OutputData+0x1656>
 8002a42:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002a46:	f00c faa9 	bl	800ef9c <__aeabi_d2uiz>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	4a72      	ldr	r2, [pc, #456]	; (8002c18 <FUNC_OutputData+0x1820>)
 8002a50:	f882 3752 	strb.w	r3, [r2, #1874]	; 0x752
/* End of DataTypeConversion: '<S94>/Data Type Conversion10' */

/* DataStoreWrite: '<S68>/Data Store Write2' */
/*@>15ad3*/VCU_DW./*@>173c8*/VAR_OUT_x_RH_F/*@>706b*/ = /*@>1579e*/VCU_B./*@>172a2*/DataTypeConversion10_e;
 8002a54:	4b70      	ldr	r3, [pc, #448]	; (8002c18 <FUNC_OutputData+0x1820>)
 8002a56:	f893 3752 	ldrb.w	r3, [r3, #1874]	; 0x752
 8002a5a:	4a70      	ldr	r2, [pc, #448]	; (8002c1c <FUNC_OutputData+0x1824>)
 8002a5c:	f882 312a 	strb.w	r3, [r2, #298]	; 0x12a
/* Gain: '<S95>/Factor' */
/*@>157a4*/VCU_B./*@>172a5*/Factor_o/*@>7073*/ = /*@>12c2c*/10.0/*@>12ede*/ * /*@>157aa*/VCU_B./*@>172a8*/x_clutch_b;
 8002a60:	4b6d      	ldr	r3, [pc, #436]	; (8002c18 <FUNC_OutputData+0x1820>)
 8002a62:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8002a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	4b6c      	ldr	r3, [pc, #432]	; (8002c24 <FUNC_OutputData+0x182c>)
 8002a74:	f00b fff8 	bl	800ea68 <__aeabi_dmul>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4b65      	ldr	r3, [pc, #404]	; (8002c18 <FUNC_OutputData+0x1820>)
 8002a82:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8002a86:	e9c3 0100 	strd	r0, r1, [r3]
/* Sum: '<S95>/Add1' */
/*@>157b0*/VCU_B./*@>172ab*/Add1_id/*@>9944*/ = /*@>157b6*/VCU_B./*@>172ae*/Factor_o;
 8002a8a:	4b63      	ldr	r3, [pc, #396]	; (8002c18 <FUNC_OutputData+0x1820>)
 8002a8c:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8002a90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a94:	4b60      	ldr	r3, [pc, #384]	; (8002c18 <FUNC_OutputData+0x1820>)
 8002a96:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8002a9a:	e9c3 0100 	strd	r0, r1, [r3]
/* DataTypeConversion: '<S95>/Data Type Conversion10' */
/*@>12e99*/tmp/*@>12e9b*/ = /*@>14a18*/floor(/*@>157bc*/VCU_B./*@>172b1*/Add1_id);
 8002a9e:	4b5e      	ldr	r3, [pc, #376]	; (8002c18 <FUNC_OutputData+0x1820>)
 8002aa0:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8002aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f00b fbe8 	bl	800e280 <floor>
 8002ab0:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>12eb9*/if (/*@>14a1a*/rtIsNaN(/*@>12e9d*/tmp)/*@>12ea7*/ || /*@>14a1c*/rtIsInf(/*@>12ea2*/tmp)) {
 8002ab4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002ab8:	f003 fd32 	bl	8006520 <rtIsNaN>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <FUNC_OutputData+0x16d8>
 8002ac2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002ac6:	f003 fd07 	bl	80064d8 <rtIsInf>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d006      	beq.n	8002ade <FUNC_OutputData+0x16e6>
    /*@>12eaa*/tmp/*@>12eac*/ = /*@>12ea9*/0.0;
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002adc:	e008      	b.n	8002af0 <FUNC_OutputData+0x16f8>
} else {
    /*@>12eb5*/tmp/*@>12eb7*/ = /*@>14a1e*/fmod(/*@>12eae*/tmp, /*@>12eb2*/256.0);
 8002ade:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	4b4e      	ldr	r3, [pc, #312]	; (8002c20 <FUNC_OutputData+0x1828>)
 8002ae8:	f00b fc52 	bl	800e390 <fmod>
 8002aec:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>157c2*/VCU_B./*@>172b4*/DataTypeConversion10_g/*@>707b*/ = /*@>13ac3*/(uint8_T)(/*@>12ec0*/tmp/*@>12ec3*/ < /*@>12ebf*/0.0/*@>12ec3*/ ? (int32_T)/*@>12ecb*/(uint8_T)-/*@<12ed4*//*@>12ec9*/(int8_T)/*@>12ed7*/(uint8_T)-/*@<12ec7*//*@>12ec4*/tmp : (int32_T)/*@>12eda*/(uint8_T)/*@>12ecc*/tmp);
 8002af0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	f00c fa26 	bl	800ef4c <__aeabi_dcmplt>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d010      	beq.n	8002b28 <FUNC_OutputData+0x1730>
 8002b06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b16:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b1a:	f00c fa3f 	bl	800ef9c <__aeabi_d2uiz>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	425b      	negs	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	e005      	b.n	8002b34 <FUNC_OutputData+0x173c>
 8002b28:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002b2c:	f00c fa36 	bl	800ef9c <__aeabi_d2uiz>
 8002b30:	4603      	mov	r3, r0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	4a38      	ldr	r2, [pc, #224]	; (8002c18 <FUNC_OutputData+0x1820>)
 8002b36:	f882 3753 	strb.w	r3, [r2, #1875]	; 0x753
/* End of DataTypeConversion: '<S95>/Data Type Conversion10' */

/* DataStoreWrite: '<S68>/Data Store Write3' */
/*@>15ad9*/VCU_DW./*@>173cb*/VAR_OUT_x_clutch/*@>707d*/ = /*@>157c8*/VCU_B./*@>172b7*/DataTypeConversion10_g;
 8002b3a:	4b37      	ldr	r3, [pc, #220]	; (8002c18 <FUNC_OutputData+0x1820>)
 8002b3c:	f893 3753 	ldrb.w	r3, [r3, #1875]	; 0x753
 8002b40:	4a36      	ldr	r2, [pc, #216]	; (8002c1c <FUNC_OutputData+0x1824>)
 8002b42:	f882 312b 	strb.w	r3, [r2, #299]	; 0x12b
/* Gain: '<S96>/Factor' */
/*@>157ce*/VCU_B./*@>172ba*/Factor_k/*@>7085*/ = /*@>12c2d*/10.0/*@>12e92*/ * /*@>157d4*/VCU_B./*@>172bd*/x_clutch_STW;
 8002b46:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <FUNC_OutputData+0x1820>)
 8002b48:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8002b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <FUNC_OutputData+0x182c>)
 8002b5a:	f00b ff85 	bl	800ea68 <__aeabi_dmul>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4610      	mov	r0, r2
 8002b64:	4619      	mov	r1, r3
 8002b66:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <FUNC_OutputData+0x1820>)
 8002b68:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8002b6c:	e9c3 0100 	strd	r0, r1, [r3]
/* Sum: '<S96>/Add1' */
/*@>157da*/VCU_B./*@>172c0*/Add1_d/*@>9949*/ = /*@>157e0*/VCU_B./*@>172c3*/Factor_k;
 8002b70:	4b29      	ldr	r3, [pc, #164]	; (8002c18 <FUNC_OutputData+0x1820>)
 8002b72:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8002b76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b7a:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <FUNC_OutputData+0x1820>)
 8002b7c:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8002b80:	e9c3 0100 	strd	r0, r1, [r3]
/* DataTypeConversion: '<S96>/Data Type Conversion10' */
/*@>12e4d*/tmp/*@>12e4f*/ = /*@>14a20*/floor(/*@>157e6*/VCU_B./*@>172c6*/Add1_d);
 8002b84:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <FUNC_OutputData+0x1820>)
 8002b86:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8002b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8e:	4610      	mov	r0, r2
 8002b90:	4619      	mov	r1, r3
 8002b92:	f00b fb75 	bl	800e280 <floor>
 8002b96:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>12e6d*/if (/*@>14a22*/rtIsNaN(/*@>12e51*/tmp)/*@>12e5b*/ || /*@>14a24*/rtIsInf(/*@>12e56*/tmp)) {
 8002b9a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002b9e:	f003 fcbf 	bl	8006520 <rtIsNaN>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d106      	bne.n	8002bb6 <FUNC_OutputData+0x17be>
 8002ba8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002bac:	f003 fc94 	bl	80064d8 <rtIsInf>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <FUNC_OutputData+0x17cc>
    /*@>12e5e*/tmp/*@>12e60*/ = /*@>12e5d*/0.0;
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002bc2:	e008      	b.n	8002bd6 <FUNC_OutputData+0x17de>
} else {
    /*@>12e69*/tmp/*@>12e6b*/ = /*@>14a26*/fmod(/*@>12e62*/tmp, /*@>12e66*/256.0);
 8002bc4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <FUNC_OutputData+0x1828>)
 8002bce:	f00b fbdf 	bl	800e390 <fmod>
 8002bd2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>157ec*/VCU_B./*@>172c9*/DataTypeConversion10_k/*@>708d*/ = /*@>13ad8*/(uint8_T)(/*@>12e74*/tmp/*@>12e77*/ < /*@>12e73*/0.0/*@>12e77*/ ? (int32_T)/*@>12e7f*/(uint8_T)-/*@<12e88*//*@>12e7d*/(int8_T)/*@>12e8b*/(uint8_T)-/*@<12e7b*//*@>12e78*/tmp : (int32_T)/*@>12e8e*/(uint8_T)/*@>12e80*/tmp);
 8002bd6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	f00c f9b3 	bl	800ef4c <__aeabi_dcmplt>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01d      	beq.n	8002c28 <FUNC_OutputData+0x1830>
 8002bec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8002bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8002bfc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002c00:	f00c f9cc 	bl	800ef9c <__aeabi_d2uiz>
 8002c04:	4603      	mov	r3, r0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	425b      	negs	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	e012      	b.n	8002c34 <FUNC_OutputData+0x183c>
 8002c0e:	bf00      	nop
 8002c10:	cccccccd 	.word	0xcccccccd
 8002c14:	3ff4cccc 	.word	0x3ff4cccc
 8002c18:	200008a8 	.word	0x200008a8
 8002c1c:	200010c8 	.word	0x200010c8
 8002c20:	40700000 	.word	0x40700000
 8002c24:	40240000 	.word	0x40240000
 8002c28:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002c2c:	f00c f9b6 	bl	800ef9c <__aeabi_d2uiz>
 8002c30:	4603      	mov	r3, r0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4a71      	ldr	r2, [pc, #452]	; (8002dfc <FUNC_OutputData+0x1a04>)
 8002c36:	f882 3754 	strb.w	r3, [r2, #1876]	; 0x754
/* End of DataTypeConversion: '<S96>/Data Type Conversion10' */

/* DataStoreWrite: '<S68>/Data Store Write4' */
/*@>15adf*/VCU_DW./*@>173ce*/VAR_OUT_x_clutch_STW/*@>708f*/ = /*@>157f2*/VCU_B./*@>172cc*/DataTypeConversion10_k;
 8002c3a:	4b70      	ldr	r3, [pc, #448]	; (8002dfc <FUNC_OutputData+0x1a04>)
 8002c3c:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 8002c40:	4a6f      	ldr	r2, [pc, #444]	; (8002e00 <FUNC_OutputData+0x1a08>)
 8002c42:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c
/* Gain: '<S97>/Factor' */
/*@>157f8*/VCU_B./*@>172cf*/Factor_cv/*@>7097*/ = /*@>1388d*/40960U/*@>12e45*/ * /*@>157fe*/VCU_B./*@>172d2*/p_pneum;
 8002c46:	4b6d      	ldr	r3, [pc, #436]	; (8002dfc <FUNC_OutputData+0x1a04>)
 8002c48:	f8b3 3724 	ldrh.w	r3, [r3, #1828]	; 0x724
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	035b      	lsls	r3, r3, #13
 8002c56:	461a      	mov	r2, r3
 8002c58:	4b68      	ldr	r3, [pc, #416]	; (8002dfc <FUNC_OutputData+0x1a04>)
 8002c5a:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8
/* Sum: '<S97>/Add1' */
/*@>15804*/VCU_B./*@>172d5*/Add1_a5/*@>9950*/ = /*@>13ae0*/(real_T)/*@>1580a*/VCU_B./*@>172d8*/Factor_cv/*@>12e3c*/ * /*@>12e3b*/5.9604644775390625E-8;
 8002c5e:	4b67      	ldr	r3, [pc, #412]	; (8002dfc <FUNC_OutputData+0x1a04>)
 8002c60:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8002c64:	4618      	mov	r0, r3
 8002c66:	f00b fe89 	bl	800e97c <__aeabi_ui2d>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4610      	mov	r0, r2
 8002c70:	4619      	mov	r1, r3
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	4b63      	ldr	r3, [pc, #396]	; (8002e04 <FUNC_OutputData+0x1a0c>)
 8002c78:	f00b fef6 	bl	800ea68 <__aeabi_dmul>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	4b5d      	ldr	r3, [pc, #372]	; (8002dfc <FUNC_OutputData+0x1a04>)
 8002c86:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8002c8a:	e9c3 0100 	strd	r0, r1, [r3]
/* DataTypeConversion: '<S97>/Data Type Conversion10' */
/*@>12df5*/tmp/*@>12df7*/ = /*@>14a28*/floor(/*@>15810*/VCU_B./*@>172db*/Add1_a5);
 8002c8e:	4b5b      	ldr	r3, [pc, #364]	; (8002dfc <FUNC_OutputData+0x1a04>)
 8002c90:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f00b faf0 	bl	800e280 <floor>
 8002ca0:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>12e15*/if (/*@>14a2a*/rtIsNaN(/*@>12df9*/tmp)/*@>12e03*/ || /*@>14a2c*/rtIsInf(/*@>12dfe*/tmp)) {
 8002ca4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002ca8:	f003 fc3a 	bl	8006520 <rtIsNaN>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <FUNC_OutputData+0x18c8>
 8002cb2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002cb6:	f003 fc0f 	bl	80064d8 <rtIsInf>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d006      	beq.n	8002cce <FUNC_OutputData+0x18d6>
    /*@>12e06*/tmp/*@>12e08*/ = /*@>12e05*/0.0;
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002ccc:	e008      	b.n	8002ce0 <FUNC_OutputData+0x18e8>
} else {
    /*@>12e11*/tmp/*@>12e13*/ = /*@>14a2e*/fmod(/*@>12e0a*/tmp, /*@>12e0e*/256.0);
 8002cce:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	4b4c      	ldr	r3, [pc, #304]	; (8002e08 <FUNC_OutputData+0x1a10>)
 8002cd8:	f00b fb5a 	bl	800e390 <fmod>
 8002cdc:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15816*/VCU_B./*@>172de*/DataTypeConversion10_p5/*@>709f*/ = /*@>13aef*/(uint8_T)(/*@>12e1c*/tmp/*@>12e1f*/ < /*@>12e1b*/0.0/*@>12e1f*/ ? (int32_T)/*@>12e27*/(uint8_T)-/*@<12e30*//*@>12e25*/(int8_T)/*@>12e33*/(uint8_T)-/*@<12e23*//*@>12e20*/tmp : (int32_T)/*@>12e36*/(uint8_T)/*@>12e28*/tmp);
 8002ce0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	f00c f92e 	bl	800ef4c <__aeabi_dcmplt>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d010      	beq.n	8002d18 <FUNC_OutputData+0x1920>
 8002cf6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d0a:	f00c f947 	bl	800ef9c <__aeabi_d2uiz>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	425b      	negs	r3, r3
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	e005      	b.n	8002d24 <FUNC_OutputData+0x192c>
 8002d18:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002d1c:	f00c f93e 	bl	800ef9c <__aeabi_d2uiz>
 8002d20:	4603      	mov	r3, r0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	4a35      	ldr	r2, [pc, #212]	; (8002dfc <FUNC_OutputData+0x1a04>)
 8002d26:	f882 3755 	strb.w	r3, [r2, #1877]	; 0x755
/* End of DataTypeConversion: '<S97>/Data Type Conversion10' */

/* DataStoreWrite: '<S68>/Data Store Write5' */
/*@>15ae5*/VCU_DW./*@>173d1*/VAR_OUT_p_pneum/*@>70a1*/ = /*@>1581c*/VCU_B./*@>172e1*/DataTypeConversion10_p5;
 8002d2a:	4b34      	ldr	r3, [pc, #208]	; (8002dfc <FUNC_OutputData+0x1a04>)
 8002d2c:	f893 2755 	ldrb.w	r2, [r3, #1877]	; 0x755
 8002d30:	4b33      	ldr	r3, [pc, #204]	; (8002e00 <FUNC_OutputData+0x1a08>)
 8002d32:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
/* Gain: '<S98>/Factor' */
/*@>15822*/VCU_B./*@>172e4*/Factor_nt/*@>70a9*/ = /*@>12c2e*/10.0/*@>12dee*/ * /*@>15828*/VCU_B./*@>172e7*/U_Bat;
 8002d36:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <FUNC_OutputData+0x1a04>)
 8002d38:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d40:	4610      	mov	r0, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	4b30      	ldr	r3, [pc, #192]	; (8002e0c <FUNC_OutputData+0x1a14>)
 8002d4a:	f00b fe8d 	bl	800ea68 <__aeabi_dmul>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	492a      	ldr	r1, [pc, #168]	; (8002dfc <FUNC_OutputData+0x1a04>)
 8002d54:	f501 6193 	add.w	r1, r1, #1176	; 0x498
 8002d58:	e9c1 2300 	strd	r2, r3, [r1]
/* Sum: '<S98>/Add1' */
/*@>1582e*/VCU_B./*@>172ea*/Add1_ph/*@>9955*/ = /*@>15834*/VCU_B./*@>172ed*/Factor_nt;
 8002d5c:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <FUNC_OutputData+0x1a04>)
 8002d5e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8002d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d66:	4925      	ldr	r1, [pc, #148]	; (8002dfc <FUNC_OutputData+0x1a04>)
 8002d68:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 8002d6c:	e9c1 2300 	strd	r2, r3, [r1]
/* DataTypeConversion: '<S98>/Data Type Conversion10' */
/*@>12da9*/tmp/*@>12dab*/ = /*@>14a30*/floor(/*@>1583a*/VCU_B./*@>172f0*/Add1_ph);
 8002d70:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <FUNC_OutputData+0x1a04>)
 8002d72:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f00b fa7f 	bl	800e280 <floor>
 8002d82:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>12dc9*/if (/*@>14a32*/rtIsNaN(/*@>12dad*/tmp)/*@>12db7*/ || /*@>14a34*/rtIsInf(/*@>12db2*/tmp)) {
 8002d86:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002d8a:	f003 fbc9 	bl	8006520 <rtIsNaN>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d106      	bne.n	8002da2 <FUNC_OutputData+0x19aa>
 8002d94:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002d98:	f003 fb9e 	bl	80064d8 <rtIsInf>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d006      	beq.n	8002db0 <FUNC_OutputData+0x19b8>
    /*@>12dba*/tmp/*@>12dbc*/ = /*@>12db9*/0.0;
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002dae:	e008      	b.n	8002dc2 <FUNC_OutputData+0x19ca>
} else {
    /*@>12dc5*/tmp/*@>12dc7*/ = /*@>14a36*/fmod(/*@>12dbe*/tmp, /*@>12dc2*/256.0);
 8002db0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <FUNC_OutputData+0x1a10>)
 8002dba:	f00b fae9 	bl	800e390 <fmod>
 8002dbe:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15840*/VCU_B./*@>172f3*/DataTypeConversion10_bm/*@>70b1*/ = /*@>13b04*/(uint8_T)(/*@>12dd0*/tmp/*@>12dd3*/ < /*@>12dcf*/0.0/*@>12dd3*/ ? (int32_T)/*@>12ddb*/(uint8_T)-/*@<12de4*//*@>12dd9*/(int8_T)/*@>12de7*/(uint8_T)-/*@<12dd7*//*@>12dd4*/tmp : (int32_T)/*@>12dea*/(uint8_T)/*@>12ddc*/tmp);
 8002dc2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	f00c f8bd 	bl	800ef4c <__aeabi_dcmplt>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01b      	beq.n	8002e10 <FUNC_OutputData+0x1a18>
 8002dd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ddc:	623b      	str	r3, [r7, #32]
 8002dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
 8002de8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002dec:	f00c f8d6 	bl	800ef9c <__aeabi_d2uiz>
 8002df0:	4603      	mov	r3, r0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	425b      	negs	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	e010      	b.n	8002e1c <FUNC_OutputData+0x1a24>
 8002dfa:	bf00      	nop
 8002dfc:	200008a8 	.word	0x200008a8
 8002e00:	200010c8 	.word	0x200010c8
 8002e04:	3e700000 	.word	0x3e700000
 8002e08:	40700000 	.word	0x40700000
 8002e0c:	40240000 	.word	0x40240000
 8002e10:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002e14:	f00c f8c2 	bl	800ef9c <__aeabi_d2uiz>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	4ab6      	ldr	r2, [pc, #728]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002e1e:	f882 3756 	strb.w	r3, [r2, #1878]	; 0x756
/* End of DataTypeConversion: '<S98>/Data Type Conversion10' */

/* DataStoreWrite: '<S68>/Data Store Write6' */
/*@>15aeb*/VCU_DW./*@>173d4*/VAR_OUT_U_Bat/*@>70b3*/ = /*@>15846*/VCU_B./*@>172f6*/DataTypeConversion10_bm;
 8002e22:	4bb5      	ldr	r3, [pc, #724]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002e24:	f893 2756 	ldrb.w	r2, [r3, #1878]	; 0x756
 8002e28:	4bb4      	ldr	r3, [pc, #720]	; (80030fc <FUNC_OutputData+0x1d04>)
 8002e2a:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
/* Sum: '<S106>/Add1' */
/*@>1584c*/VCU_B./*@>172f9*/Add1_jp/*@>995a*/ = /*@>15852*/VCU_B./*@>172fc*/Saturation_b;
 8002e2e:	4bb2      	ldr	r3, [pc, #712]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002e30:	e9d3 23bc 	ldrd	r2, r3, [r3, #752]	; 0x2f0
 8002e34:	49b0      	ldr	r1, [pc, #704]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002e36:	f501 6195 	add.w	r1, r1, #1192	; 0x4a8
 8002e3a:	e9c1 2300 	strd	r2, r3, [r1]
/* DataStoreWrite: '<S69>/Data Store Write' */
/*@>15af1*/VCU_DW./*@>173d7*/VAR_OUT_Fans_active/*@>70ba*/ = /*@>15858*/VCU_B./*@>172ff*/Add1_jp;
 8002e3e:	4bae      	ldr	r3, [pc, #696]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002e40:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8002e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e48:	49ac      	ldr	r1, [pc, #688]	; (80030fc <FUNC_OutputData+0x1d04>)
 8002e4a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
/* DataStoreWrite: '<S69>/Data Store Write1' */
/*@>15af7*/VCU_DW./*@>173da*/VAR_OUT_Waterpump_active/*@>70bc*/ = /*@>15955*/VCU_ConstB./*@>1737a*/Add1;
 8002e4e:	4bac      	ldr	r3, [pc, #688]	; (8003100 <FUNC_OutputData+0x1d08>)
 8002e50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e54:	49a9      	ldr	r1, [pc, #676]	; (80030fc <FUNC_OutputData+0x1d04>)
 8002e56:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
/* RelationalOperator: '<S109>/Compare' incorporates:
 *  Constant: '<S109>/Constant'
 */
/*@>1585e*/VCU_B./*@>17302*/Compare_mi/*@>70c0*/ = (/*@>15864*/VCU_B./*@>17305*/VOVG_ShiftUp/*@>70bf*/ > /*@>12c2f*/0.0);
 8002e5a:	4ba7      	ldr	r3, [pc, #668]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e60:	2101      	movs	r1, #1
 8002e62:	460c      	mov	r4, r1
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	f00c f88a 	bl	800ef88 <__aeabi_dcmpgt>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <FUNC_OutputData+0x1a86>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	461c      	mov	r4, r3
 8002e7e:	b2e3      	uxtb	r3, r4
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b9d      	ldr	r3, [pc, #628]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002e84:	f883 2809 	strb.w	r2, [r3, #2057]	; 0x809
/* DataStoreWrite: '<S63>/Data Store Write' */
/*@>15afd*/VCU_DW./*@>173dd*/VAR_OUT_VOVG_ShiftUp/*@>70c2*/ = /*@>1586a*/VCU_B./*@>17308*/Compare_mi;
 8002e88:	4b9b      	ldr	r3, [pc, #620]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002e8a:	f893 2809 	ldrb.w	r2, [r3, #2057]	; 0x809
 8002e8e:	4b9b      	ldr	r3, [pc, #620]	; (80030fc <FUNC_OutputData+0x1d04>)
 8002e90:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
/* RelationalOperator: '<S110>/Compare' incorporates:
 *  Constant: '<S110>/Constant'
 */
/*@>15870*/VCU_B./*@>1730b*/Compare_ek/*@>70c6*/ = (/*@>15876*/VCU_B./*@>1730e*/VOVG_ShiftDown/*@>70c5*/ > /*@>12c30*/0.0);
 8002e94:	4b98      	ldr	r3, [pc, #608]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002e96:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	460c      	mov	r4, r1
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	f00c f86d 	bl	800ef88 <__aeabi_dcmpgt>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <FUNC_OutputData+0x1ac0>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	461c      	mov	r4, r3
 8002eb8:	b2e3      	uxtb	r3, r4
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4b8e      	ldr	r3, [pc, #568]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002ebe:	f883 280a 	strb.w	r2, [r3, #2058]	; 0x80a
/* DataStoreWrite: '<S63>/Data Store Write1' */
/*@>15b03*/VCU_DW./*@>173e0*/VAR_OUT_VOVG_ShiftDown/*@>70c8*/ = /*@>1587c*/VCU_B./*@>17311*/Compare_ek;
 8002ec2:	4b8d      	ldr	r3, [pc, #564]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002ec4:	f893 280a 	ldrb.w	r2, [r3, #2058]	; 0x80a
 8002ec8:	4b8c      	ldr	r3, [pc, #560]	; (80030fc <FUNC_OutputData+0x1d04>)
 8002eca:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
/* Gain: '<S63>/Gain4' */
/*@>12d61*/tmp/*@>12d63*/ = /*@>14a38*/floor(/*@>12c31*/65535.0/*@>12d5a*/ * /*@>15882*/VCU_B./*@>17314*/Saturation_b);
 8002ece:	4b8a      	ldr	r3, [pc, #552]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002ed0:	e9d3 23bc 	ldrd	r2, r3, [r3, #752]	; 0x2f0
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	a385      	add	r3, pc, #532	; (adr r3, 80030f0 <FUNC_OutputData+0x1cf8>)
 8002eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ede:	f00b fdc3 	bl	800ea68 <__aeabi_dmul>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f00b f9c9 	bl	800e280 <floor>
 8002eee:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>12d81*/if (/*@>14a3a*/rtIsNaN(/*@>12d65*/tmp)/*@>12d6f*/ || /*@>14a3c*/rtIsInf(/*@>12d6a*/tmp)) {
 8002ef2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002ef6:	f003 fb13 	bl	8006520 <rtIsNaN>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d106      	bne.n	8002f0e <FUNC_OutputData+0x1b16>
 8002f00:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002f04:	f003 fae8 	bl	80064d8 <rtIsInf>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d006      	beq.n	8002f1c <FUNC_OutputData+0x1b24>
    /*@>12d72*/tmp/*@>12d74*/ = /*@>12d71*/0.0;
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8002f1a:	e008      	b.n	8002f2e <FUNC_OutputData+0x1b36>
} else {
    /*@>12d7d*/tmp/*@>12d7f*/ = /*@>14a3e*/fmod(/*@>12d76*/tmp, /*@>12d7a*/65536.0);
 8002f1c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	4b77      	ldr	r3, [pc, #476]	; (8003104 <FUNC_OutputData+0x1d0c>)
 8002f26:	f00b fa33 	bl	800e390 <fmod>
 8002f2a:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>15888*/VCU_B./*@>17317*/Gain4_f/*@>70d0*/ = /*@>13b23*/(uint16_T)(/*@>12d88*/tmp/*@>12d8b*/ < /*@>12d87*/0.0/*@>12d8b*/ ? (int32_T)/*@>12d93*/(uint16_T)-/*@<12d9c*//*@>12d91*/(int16_T)/*@>12d9f*/(uint16_T)-/*@<12d8f*//*@>12d8c*/tmp : (int32_T)/*@>12da2*/(uint16_T)/*@>12d94*/tmp);
 8002f2e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	f00c f807 	bl	800ef4c <__aeabi_dcmplt>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d010      	beq.n	8002f66 <FUNC_OutputData+0x1b6e>
 8002f44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002f48:	61bb      	str	r3, [r7, #24]
 8002f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f58:	f00c f820 	bl	800ef9c <__aeabi_d2uiz>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	425b      	negs	r3, r3
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	e005      	b.n	8002f72 <FUNC_OutputData+0x1b7a>
 8002f66:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002f6a:	f00c f817 	bl	800ef9c <__aeabi_d2uiz>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	4a61      	ldr	r2, [pc, #388]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002f74:	f8a2 370c 	strh.w	r3, [r2, #1804]	; 0x70c
/* End of Gain: '<S63>/Gain4' */

/* DataStoreWrite: '<S63>/Data Store Write10' */
/*@>15b09*/VCU_DW./*@>173e3*/VAR_OUT_Fans2_PWM_active/*@>70d2*/ = /*@>1588e*/VCU_B./*@>1731a*/Gain4_f;
 8002f78:	4b5f      	ldr	r3, [pc, #380]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002f7a:	f8b3 270c 	ldrh.w	r2, [r3, #1804]	; 0x70c
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <FUNC_OutputData+0x1d04>)
 8002f80:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
/* RelationalOperator: '<S113>/Compare' incorporates:
 *  Constant: '<S113>/Constant'
 */
/*@>15894*/VCU_B./*@>1731d*/Compare_pr/*@>70d6*/ = (/*@>1589a*/VCU_B./*@>17320*/Ignition_Cut/*@>70d5*/ > /*@>12c32*/0.0);
 8002f84:	4b5c      	ldr	r3, [pc, #368]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002f86:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	460c      	mov	r4, r1
 8002f8e:	4610      	mov	r0, r2
 8002f90:	4619      	mov	r1, r3
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	f00b fff5 	bl	800ef88 <__aeabi_dcmpgt>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <FUNC_OutputData+0x1bb0>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	461c      	mov	r4, r3
 8002fa8:	b2e3      	uxtb	r3, r4
 8002faa:	461a      	mov	r2, r3
 8002fac:	4b52      	ldr	r3, [pc, #328]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002fae:	f883 280b 	strb.w	r2, [r3, #2059]	; 0x80b
/* DataStoreWrite: '<S63>/Data Store Write2' */
/*@>15b0f*/VCU_DW./*@>173e6*/VAR_OUT_Ignition_Cut/*@>70d8*/ = /*@>158a0*/VCU_B./*@>17323*/Compare_pr;
 8002fb2:	4b51      	ldr	r3, [pc, #324]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002fb4:	f893 280b 	ldrb.w	r2, [r3, #2059]	; 0x80b
 8002fb8:	4b50      	ldr	r3, [pc, #320]	; (80030fc <FUNC_OutputData+0x1d04>)
 8002fba:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
/* RelationalOperator: '<S111>/Compare' incorporates:
 *  Constant: '<S111>/Constant'
 */
/*@>158a6*/VCU_B./*@>17326*/Compare_d3/*@>70dc*/ = (/*@>158ac*/VCU_B./*@>17329*/VOVG_IN/*@>70db*/ > /*@>12c33*/0.0);
 8002fbe:	4b4e      	ldr	r3, [pc, #312]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002fc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	460c      	mov	r4, r1
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	f00b ffd8 	bl	800ef88 <__aeabi_dcmpgt>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <FUNC_OutputData+0x1bea>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	461c      	mov	r4, r3
 8002fe2:	b2e3      	uxtb	r3, r4
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b44      	ldr	r3, [pc, #272]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002fe8:	f883 280c 	strb.w	r2, [r3, #2060]	; 0x80c
/* DataStoreWrite: '<S63>/Data Store Write3' */
/*@>15b15*/VCU_DW./*@>173e9*/VAR_OUT_VOVG_IN/*@>70de*/ = /*@>158b2*/VCU_B./*@>1732c*/Compare_d3;
 8002fec:	4b42      	ldr	r3, [pc, #264]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002fee:	f893 280c 	ldrb.w	r2, [r3, #2060]	; 0x80c
 8002ff2:	4b42      	ldr	r3, [pc, #264]	; (80030fc <FUNC_OutputData+0x1d04>)
 8002ff4:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
/* RelationalOperator: '<S112>/Compare' incorporates:
 *  Constant: '<S112>/Constant'
 */
/*@>158b8*/VCU_B./*@>1732f*/Compare_bb/*@>70e2*/ = (/*@>158be*/VCU_B./*@>17332*/VOVG_OUT/*@>70e1*/ > /*@>12c34*/0.0);
 8002ff8:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8002ffa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002ffe:	2101      	movs	r1, #1
 8003000:	460c      	mov	r4, r1
 8003002:	4610      	mov	r0, r2
 8003004:	4619      	mov	r1, r3
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	f00b ffbb 	bl	800ef88 <__aeabi_dcmpgt>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <FUNC_OutputData+0x1c24>
 8003018:	2300      	movs	r3, #0
 800301a:	461c      	mov	r4, r3
 800301c:	b2e3      	uxtb	r3, r4
 800301e:	461a      	mov	r2, r3
 8003020:	4b35      	ldr	r3, [pc, #212]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8003022:	f883 280d 	strb.w	r2, [r3, #2061]	; 0x80d
/* DataStoreWrite: '<S63>/Data Store Write4' */
/*@>15b1b*/VCU_DW./*@>173ec*/VAR_OUT_VOVG_OUT/*@>70e4*/ = /*@>158c4*/VCU_B./*@>17335*/Compare_bb;
 8003026:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8003028:	f893 280d 	ldrb.w	r2, [r3, #2061]	; 0x80d
 800302c:	4b33      	ldr	r3, [pc, #204]	; (80030fc <FUNC_OutputData+0x1d04>)
 800302e:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
/* Saturate: '<S63>/Saturation1' */
/*@>13c10*/if (/*@>158ca*/VCU_B./*@>17338*/MHJ9_IN/*@>13c0b*/ > /*@>13d49*/1.0) {
 8003032:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8003034:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	4b31      	ldr	r3, [pc, #196]	; (8003108 <FUNC_OutputData+0x1d10>)
 8003042:	f00b ffa1 	bl	800ef88 <__aeabi_dcmpgt>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <FUNC_OutputData+0x1c66>
    /*@>158d6*/VCU_B./*@>1733e*/Saturation1/*@>13c12*/ = /*@>13d4f*/1.0;
 800304c:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <FUNC_OutputData+0x1d00>)
 800304e:	f503 6196 	add.w	r1, r3, #1200	; 0x4b0
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	4b2c      	ldr	r3, [pc, #176]	; (8003108 <FUNC_OutputData+0x1d10>)
 8003058:	e9c1 2300 	strd	r2, r3, [r1]
 800305c:	e01f      	b.n	800309e <FUNC_OutputData+0x1ca6>
} else /*@>13c13*/if (/*@>158d0*/VCU_B./*@>1733b*/MHJ9_IN/*@>13c08*/ < /*@>13d4b*/0.0) {
 800305e:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8003060:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	f00b ff6c 	bl	800ef4c <__aeabi_dcmplt>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <FUNC_OutputData+0x1c96>
    /*@>158e8*/VCU_B./*@>17347*/Saturation1/*@>13c15*/ = /*@>13d4d*/0.0;
 800307a:	4b1f      	ldr	r3, [pc, #124]	; (80030f8 <FUNC_OutputData+0x1d00>)
 800307c:	f503 6196 	add.w	r1, r3, #1200	; 0x4b0
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	e9c1 2300 	strd	r2, r3, [r1]
 800308c:	e007      	b.n	800309e <FUNC_OutputData+0x1ca6>
} else {
    /*@>158dc*/VCU_B./*@>17341*/Saturation1/*@>13c0f*/ = /*@>158e2*/VCU_B./*@>17344*/MHJ9_IN;
 800308e:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8003090:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003094:	4918      	ldr	r1, [pc, #96]	; (80030f8 <FUNC_OutputData+0x1d00>)
 8003096:	f501 6196 	add.w	r1, r1, #1200	; 0x4b0
 800309a:	e9c1 2300 	strd	r2, r3, [r1]
}
/* End of Saturate: '<S63>/Saturation1' */

/* Gain: '<S63>/uint16 ' */
/*@>12d15*/tmp/*@>12d17*/ = /*@>14a40*/floor(/*@>12c37*/65535.0/*@>12d0e*/ * /*@>158ee*/VCU_B./*@>1734a*/Saturation1);
 800309e:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <FUNC_OutputData+0x1d00>)
 80030a0:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80030a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a8:	4610      	mov	r0, r2
 80030aa:	4619      	mov	r1, r3
 80030ac:	a310      	add	r3, pc, #64	; (adr r3, 80030f0 <FUNC_OutputData+0x1cf8>)
 80030ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b2:	f00b fcd9 	bl	800ea68 <__aeabi_dmul>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4610      	mov	r0, r2
 80030bc:	4619      	mov	r1, r3
 80030be:	f00b f8df 	bl	800e280 <floor>
 80030c2:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>12d35*/if (/*@>14a42*/rtIsNaN(/*@>12d19*/tmp)/*@>12d23*/ || /*@>14a44*/rtIsInf(/*@>12d1e*/tmp)) {
 80030c6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80030ca:	f003 fa29 	bl	8006520 <rtIsNaN>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d106      	bne.n	80030e2 <FUNC_OutputData+0x1cea>
 80030d4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80030d8:	f003 f9fe 	bl	80064d8 <rtIsInf>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d014      	beq.n	800310c <FUNC_OutputData+0x1d14>
    /*@>12d26*/tmp/*@>12d28*/ = /*@>12d25*/0.0;
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80030ee:	e016      	b.n	800311e <FUNC_OutputData+0x1d26>
 80030f0:	00000000 	.word	0x00000000
 80030f4:	40efffe0 	.word	0x40efffe0
 80030f8:	200008a8 	.word	0x200008a8
 80030fc:	200010c8 	.word	0x200010c8
 8003100:	0800f1d0 	.word	0x0800f1d0
 8003104:	40f00000 	.word	0x40f00000
 8003108:	3ff00000 	.word	0x3ff00000
} else {
    /*@>12d31*/tmp/*@>12d33*/ = /*@>14a46*/fmod(/*@>12d2a*/tmp, /*@>12d2e*/65536.0);
 800310c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	4b98      	ldr	r3, [pc, #608]	; (8003378 <FUNC_OutputData+0x1f80>)
 8003116:	f00b f93b 	bl	800e390 <fmod>
 800311a:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>158f4*/VCU_B./*@>1734d*/uint16/*@>70f2*/ = /*@>13b42*/(uint16_T)(/*@>12d3c*/tmp/*@>12d3f*/ < /*@>12d3b*/0.0/*@>12d3f*/ ? (int32_T)/*@>12d47*/(uint16_T)-/*@<12d50*//*@>12d45*/(int16_T)/*@>12d53*/(uint16_T)-/*@<12d43*//*@>12d40*/tmp : (int32_T)/*@>12d56*/(uint16_T)/*@>12d48*/tmp);
 800311e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	f00b ff0f 	bl	800ef4c <__aeabi_dcmplt>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d010      	beq.n	8003156 <FUNC_OutputData+0x1d5e>
 8003134:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003148:	f00b ff28 	bl	800ef9c <__aeabi_d2uiz>
 800314c:	4603      	mov	r3, r0
 800314e:	b29b      	uxth	r3, r3
 8003150:	425b      	negs	r3, r3
 8003152:	b29b      	uxth	r3, r3
 8003154:	e005      	b.n	8003162 <FUNC_OutputData+0x1d6a>
 8003156:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800315a:	f00b ff1f 	bl	800ef9c <__aeabi_d2uiz>
 800315e:	4603      	mov	r3, r0
 8003160:	b29b      	uxth	r3, r3
 8003162:	4a86      	ldr	r2, [pc, #536]	; (800337c <FUNC_OutputData+0x1f84>)
 8003164:	f8a2 370e 	strh.w	r3, [r2, #1806]	; 0x70e
/* End of Gain: '<S63>/uint16 ' */

/* DataStoreWrite: '<S63>/Data Store Write5' */
/*@>15b21*/VCU_DW./*@>173ef*/VAR_OUT_MHJ9_IN/*@>70f4*/ = /*@>158fa*/VCU_B./*@>17350*/uint16;
 8003168:	4b84      	ldr	r3, [pc, #528]	; (800337c <FUNC_OutputData+0x1f84>)
 800316a:	f8b3 270e 	ldrh.w	r2, [r3, #1806]	; 0x70e
 800316e:	4b84      	ldr	r3, [pc, #528]	; (8003380 <FUNC_OutputData+0x1f88>)
 8003170:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
/* Saturate: '<S63>/Saturation2' */
/*@>13c5b*/if (/*@>15900*/VCU_B./*@>17353*/MHJ9_OUT/*@>13c56*/ > /*@>13d51*/1.0) {
 8003174:	4b81      	ldr	r3, [pc, #516]	; (800337c <FUNC_OutputData+0x1f84>)
 8003176:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	4b80      	ldr	r3, [pc, #512]	; (8003384 <FUNC_OutputData+0x1f8c>)
 8003184:	f00b ff00 	bl	800ef88 <__aeabi_dcmpgt>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <FUNC_OutputData+0x1da8>
    /*@>1590c*/VCU_B./*@>17359*/Saturation2/*@>13c5d*/ = /*@>13d57*/1.0;
 800318e:	4b7b      	ldr	r3, [pc, #492]	; (800337c <FUNC_OutputData+0x1f84>)
 8003190:	f503 6197 	add.w	r1, r3, #1208	; 0x4b8
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	4b7a      	ldr	r3, [pc, #488]	; (8003384 <FUNC_OutputData+0x1f8c>)
 800319a:	e9c1 2300 	strd	r2, r3, [r1]
 800319e:	e01f      	b.n	80031e0 <FUNC_OutputData+0x1de8>
} else /*@>13c5e*/if (/*@>15906*/VCU_B./*@>17356*/MHJ9_OUT/*@>13c53*/ < /*@>13d53*/0.0) {
 80031a0:	4b76      	ldr	r3, [pc, #472]	; (800337c <FUNC_OutputData+0x1f84>)
 80031a2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	f00b fecb 	bl	800ef4c <__aeabi_dcmplt>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d009      	beq.n	80031d0 <FUNC_OutputData+0x1dd8>
    /*@>1591e*/VCU_B./*@>17362*/Saturation2/*@>13c60*/ = /*@>13d55*/0.0;
 80031bc:	4b6f      	ldr	r3, [pc, #444]	; (800337c <FUNC_OutputData+0x1f84>)
 80031be:	f503 6197 	add.w	r1, r3, #1208	; 0x4b8
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	e9c1 2300 	strd	r2, r3, [r1]
 80031ce:	e007      	b.n	80031e0 <FUNC_OutputData+0x1de8>
} else {
    /*@>15912*/VCU_B./*@>1735c*/Saturation2/*@>13c5a*/ = /*@>15918*/VCU_B./*@>1735f*/MHJ9_OUT;
 80031d0:	4b6a      	ldr	r3, [pc, #424]	; (800337c <FUNC_OutputData+0x1f84>)
 80031d2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80031d6:	4969      	ldr	r1, [pc, #420]	; (800337c <FUNC_OutputData+0x1f84>)
 80031d8:	f501 6197 	add.w	r1, r1, #1208	; 0x4b8
 80031dc:	e9c1 2300 	strd	r2, r3, [r1]
}
/* End of Saturate: '<S63>/Saturation2' */

/* Gain: '<S63>/uint16_1 ' */
/*@>12cc9*/tmp/*@>12ccb*/ = /*@>14a48*/floor(/*@>12c3a*/65535.0/*@>12cc2*/ * /*@>15924*/VCU_B./*@>17365*/Saturation2);
 80031e0:	4b66      	ldr	r3, [pc, #408]	; (800337c <FUNC_OutputData+0x1f84>)
 80031e2:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	4610      	mov	r0, r2
 80031ec:	4619      	mov	r1, r3
 80031ee:	a360      	add	r3, pc, #384	; (adr r3, 8003370 <FUNC_OutputData+0x1f78>)
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	f00b fc38 	bl	800ea68 <__aeabi_dmul>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4610      	mov	r0, r2
 80031fe:	4619      	mov	r1, r3
 8003200:	f00b f83e 	bl	800e280 <floor>
 8003204:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>12ce9*/if (/*@>14a4a*/rtIsNaN(/*@>12ccd*/tmp)/*@>12cd7*/ || /*@>14a4c*/rtIsInf(/*@>12cd2*/tmp)) {
 8003208:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800320c:	f003 f988 	bl	8006520 <rtIsNaN>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <FUNC_OutputData+0x1e2c>
 8003216:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800321a:	f003 f95d 	bl	80064d8 <rtIsInf>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d006      	beq.n	8003232 <FUNC_OutputData+0x1e3a>
    /*@>12cda*/tmp/*@>12cdc*/ = /*@>12cd9*/0.0;
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8003230:	e008      	b.n	8003244 <FUNC_OutputData+0x1e4c>
} else {
    /*@>12ce5*/tmp/*@>12ce7*/ = /*@>14a4e*/fmod(/*@>12cde*/tmp, /*@>12ce2*/65536.0);
 8003232:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	4b4f      	ldr	r3, [pc, #316]	; (8003378 <FUNC_OutputData+0x1f80>)
 800323c:	f00b f8a8 	bl	800e390 <fmod>
 8003240:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>1592a*/VCU_B./*@>17368*/uint16_1/*@>7102*/ = /*@>13b55*/(uint16_T)(/*@>12cf0*/tmp/*@>12cf3*/ < /*@>12cef*/0.0/*@>12cf3*/ ? (int32_T)/*@>12cfb*/(uint16_T)-/*@<12d04*//*@>12cf9*/(int16_T)/*@>12d07*/(uint16_T)-/*@<12cf7*//*@>12cf4*/tmp : (int32_T)/*@>12d0a*/(uint16_T)/*@>12cfc*/tmp);
 8003244:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	f00b fe7c 	bl	800ef4c <__aeabi_dcmplt>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d010      	beq.n	800327c <FUNC_OutputData+0x1e84>
 800325a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003264:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800326e:	f00b fe95 	bl	800ef9c <__aeabi_d2uiz>
 8003272:	4603      	mov	r3, r0
 8003274:	b29b      	uxth	r3, r3
 8003276:	425b      	negs	r3, r3
 8003278:	b29b      	uxth	r3, r3
 800327a:	e005      	b.n	8003288 <FUNC_OutputData+0x1e90>
 800327c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003280:	f00b fe8c 	bl	800ef9c <__aeabi_d2uiz>
 8003284:	4603      	mov	r3, r0
 8003286:	b29b      	uxth	r3, r3
 8003288:	4a3c      	ldr	r2, [pc, #240]	; (800337c <FUNC_OutputData+0x1f84>)
 800328a:	f8a2 3710 	strh.w	r3, [r2, #1808]	; 0x710
/* End of Gain: '<S63>/uint16_1 ' */

/* DataStoreWrite: '<S63>/Data Store Write6' */
/*@>15b27*/VCU_DW./*@>173f2*/VAR_OUT_MHJ9_OUT/*@>7104*/ = /*@>15930*/VCU_B./*@>1736b*/uint16_1;
 800328e:	4b3b      	ldr	r3, [pc, #236]	; (800337c <FUNC_OutputData+0x1f84>)
 8003290:	f8b3 2710 	ldrh.w	r2, [r3, #1808]	; 0x710
 8003294:	4b3a      	ldr	r3, [pc, #232]	; (8003380 <FUNC_OutputData+0x1f88>)
 8003296:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
/* DataStoreWrite: '<S63>/Data Store Write8' */
/*@>15b2d*/VCU_DW./*@>173f5*/VAR_OUT_Waterpump_PWM_active/*@>7106*/ = /*@>1595b*/VCU_ConstB./*@>1737d*/Gain6;
 800329a:	4b3b      	ldr	r3, [pc, #236]	; (8003388 <FUNC_OutputData+0x1f90>)
 800329c:	8a1a      	ldrh	r2, [r3, #16]
 800329e:	4b38      	ldr	r3, [pc, #224]	; (8003380 <FUNC_OutputData+0x1f88>)
 80032a0:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
/* Gain: '<S63>/Gain5' */
/*@>12c67*/tmp/*@>12c69*/ = /*@>14a50*/floor(/*@>12c3b*/65535.0/*@>12c56*/ * /*@>15936*/VCU_B./*@>1736e*/Saturation_b);
 80032a4:	4b35      	ldr	r3, [pc, #212]	; (800337c <FUNC_OutputData+0x1f84>)
 80032a6:	e9d3 23bc 	ldrd	r2, r3, [r3, #752]	; 0x2f0
 80032aa:	4610      	mov	r0, r2
 80032ac:	4619      	mov	r1, r3
 80032ae:	a330      	add	r3, pc, #192	; (adr r3, 8003370 <FUNC_OutputData+0x1f78>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f00b fbd8 	bl	800ea68 <__aeabi_dmul>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	f00a ffde 	bl	800e280 <floor>
 80032c4:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
/*@>12c9d*/if (/*@>14a52*/rtIsNaN(/*@>12c6b*/tmp)/*@>12c7f*/ || /*@>14a54*/rtIsInf(/*@>12c70*/tmp)) {
 80032c8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80032cc:	f003 f928 	bl	8006520 <rtIsNaN>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <FUNC_OutputData+0x1eec>
 80032d6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80032da:	f003 f8fd 	bl	80064d8 <rtIsInf>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d006      	beq.n	80032f2 <FUNC_OutputData+0x1efa>
    /*@>12c82*/tmp/*@>12c84*/ = /*@>12c81*/0.0;
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80032f0:	e008      	b.n	8003304 <FUNC_OutputData+0x1f0c>
} else {
    /*@>12c99*/tmp/*@>12c9b*/ = /*@>14a56*/fmod(/*@>12c86*/tmp, /*@>12c8a*/65536.0);
 80032f2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	4b1f      	ldr	r3, [pc, #124]	; (8003378 <FUNC_OutputData+0x1f80>)
 80032fc:	f00b f848 	bl	800e390 <fmod>
 8003300:	e9c7 013c 	strd	r0, r1, [r7, #240]	; 0xf0
}
/*@>1593c*/VCU_B./*@>17371*/Gain5/*@>710e*/ = /*@>13b68*/(uint16_T)(/*@>12ca4*/tmp/*@>12ca7*/ < /*@>12ca3*/0.0/*@>12ca7*/ ? (int32_T)/*@>12caf*/(uint16_T)-/*@<12cb8*//*@>12cad*/(int16_T)/*@>12cbb*/(uint16_T)-/*@<12cab*//*@>12ca8*/tmp : (int32_T)/*@>12cbe*/(uint16_T)/*@>12cb0*/tmp);
 8003304:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	f00b fe1c 	bl	800ef4c <__aeabi_dcmplt>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d010      	beq.n	800333c <FUNC_OutputData+0x1f44>
 800331a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003324:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800332e:	f00b fe35 	bl	800ef9c <__aeabi_d2uiz>
 8003332:	4603      	mov	r3, r0
 8003334:	b29b      	uxth	r3, r3
 8003336:	425b      	negs	r3, r3
 8003338:	b29b      	uxth	r3, r3
 800333a:	e005      	b.n	8003348 <FUNC_OutputData+0x1f50>
 800333c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003340:	f00b fe2c 	bl	800ef9c <__aeabi_d2uiz>
 8003344:	4603      	mov	r3, r0
 8003346:	b29b      	uxth	r3, r3
 8003348:	4a0c      	ldr	r2, [pc, #48]	; (800337c <FUNC_OutputData+0x1f84>)
 800334a:	f8a2 3712 	strh.w	r3, [r2, #1810]	; 0x712
/* End of Gain: '<S63>/Gain5' */

/* DataStoreWrite: '<S63>/Data Store Write9' */
/*@>15b33*/VCU_DW./*@>173f8*/VAR_OUT_Fans1_PWM_active/*@>7110*/ = /*@>15942*/VCU_B./*@>17374*/Gain5;
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <FUNC_OutputData+0x1f84>)
 8003350:	f8b3 2712 	ldrh.w	r2, [r3, #1810]	; 0x712
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <FUNC_OutputData+0x1f88>)
 8003356:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
/* DataStoreWrite: '<S63>/Data Store Write7' */
/*@>15b39*/VCU_DW./*@>173fb*/VAR_OUT_Brakelight/*@>7112*/ = /*@>15948*/VCU_B./*@>17377*/Brakelight;
 800335a:	4b08      	ldr	r3, [pc, #32]	; (800337c <FUNC_OutputData+0x1f84>)
 800335c:	f893 2812 	ldrb.w	r2, [r3, #2066]	; 0x812
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <FUNC_OutputData+0x1f88>)
 8003362:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161


        
    
      
          }
 8003366:	37f8      	adds	r7, #248	; 0xf8
 8003368:	46bd      	mov	sp, r7
 800336a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800336e:	bf00      	nop
 8003370:	00000000 	.word	0x00000000
 8003374:	40efffe0 	.word	0x40efffe0
 8003378:	40f00000 	.word	0x40f00000
 800337c:	200008a8 	.word	0x200008a8
 8003380:	200010c8 	.word	0x200010c8
 8003384:	3ff00000 	.word	0x3ff00000
 8003388:	0800f1d0 	.word	0x0800f1d0
 800338c:	f3af 8000 	nop.w

08003390 <FUNC_PumpAndFans>:
          /* Output and update for atomic system: '<Root>/Pump and Fans' */
      
              
  
        void FUNC_PumpAndFans(void)
  {
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b087      	sub	sp, #28
 8003394:	af06      	add	r7, sp, #24


                                /* Switch: '<S122>/Switch' incorporates:
 *  Switch: '<S122>/Switch1'
 */
/*@>7331*/if (/*@>17bfa*/VCU_B./*@>17e94*/Fans_dash_bit) {
 8003396:	4b42      	ldr	r3, [pc, #264]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 8003398:	f893 380e 	ldrb.w	r3, [r3, #2062]	; 0x80e
 800339c:	2b00      	cmp	r3, #0
 800339e:	d006      	beq.n	80033ae <FUNC_PumpAndFans+0x1e>
    /* Saturate: '<S122>/Saturation' incorporates:
 *  Constant: '<S122>/Constant'
 */
    /*@>17c06*/VCU_B./*@>17e9a*/Switch_j/*@>7329*/ = /*@>1776c*/1.0;
 80033a0:	493f      	ldr	r1, [pc, #252]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	4b3f      	ldr	r3, [pc, #252]	; (80034a4 <FUNC_PumpAndFans+0x114>)
 80033a8:	e9c1 23ba 	strd	r2, r3, [r1, #744]	; 0x2e8
 80033ac:	e03e      	b.n	800342c <FUNC_PumpAndFans+0x9c>
} else {
    /*@>7360*/if (/*@>17c00*/VCU_B./*@>17e97*/TeleActiveBit/*@>7352*/ >= /*@>1776b*/1.0) {
 80033ae:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 80033b0:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	4b38      	ldr	r3, [pc, #224]	; (80034a4 <FUNC_PumpAndFans+0x114>)
 80033c2:	f00b fdd7 	bl	800ef74 <__aeabi_dcmpge>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <FUNC_PumpAndFans+0x4e>
        /* Switch: '<S122>/Switch1' */
        /*@>17c1e*/VCU_B./*@>17ea6*/Switch1_d/*@>7358*/ = /*@>17c24*/VCU_B./*@>17ea9*/Add1_ik;
 80033cc:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 80033ce:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	4932      	ldr	r1, [pc, #200]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 80033d8:	e9c1 23be 	strd	r2, r3, [r1, #760]	; 0x2f8
 80033dc:	e020      	b.n	8003420 <FUNC_PumpAndFans+0x90>
    } else {
        /* Lookup_n-D: '<S122>/2-D Lookup Table' incorporates:
 *  Switch: '<S122>/Switch1'
 */
        /*@>17c0c*/VCU_B./*@>17e9d*/uDLookupTable/*@>a160*/ = /*@>179af*/look2_binlxpw(/*@>17c12*/VCU_B./*@>17ea0*/Add1_iu, /*@>17c18*/VCU_B./*@>17ea3*/Gain4, /*@>17cc4*/VCU_ConstP./*@>17eca*/uDLookupTable_bp01Data_h, /*@>17cca*/VCU_ConstP./*@>17ecd*/uDLookupTable_bp02Data, /*@>17cd0*/VCU_ConstP./*@>17ed0*/uDLookupTable_tableData, /*@>17cd6*/VCU_ConstP./*@>17ed3*/uDLookupTable_maxIndex, /*@>1775f*/7U);
 80033de:	4b30      	ldr	r3, [pc, #192]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 80033e0:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 80033e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033e8:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 80033ea:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80033ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f2:	4c2d      	ldr	r4, [pc, #180]	; (80034a8 <FUNC_PumpAndFans+0x118>)
 80033f4:	9400      	str	r4, [sp, #0]
 80033f6:	4c2d      	ldr	r4, [pc, #180]	; (80034ac <FUNC_PumpAndFans+0x11c>)
 80033f8:	9401      	str	r4, [sp, #4]
 80033fa:	4c2d      	ldr	r4, [pc, #180]	; (80034b0 <FUNC_PumpAndFans+0x120>)
 80033fc:	9402      	str	r4, [sp, #8]
 80033fe:	4c2d      	ldr	r4, [pc, #180]	; (80034b4 <FUNC_PumpAndFans+0x124>)
 8003400:	9403      	str	r4, [sp, #12]
 8003402:	2407      	movs	r4, #7
 8003404:	9404      	str	r4, [sp, #16]
 8003406:	f002 fd5d 	bl	8005ec4 <look2_binlxpw>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4924      	ldr	r1, [pc, #144]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 8003410:	e9c1 23c0 	strd	r2, r3, [r1, #768]	; 0x300
        /* Switch: '<S122>/Switch1' */
        /*@>17c2a*/VCU_B./*@>17eac*/Switch1_d/*@>735e*/ = /*@>17c30*/VCU_B./*@>17eaf*/uDLookupTable;
 8003414:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 8003416:	e9d3 23c0 	ldrd	r2, r3, [r3, #768]	; 0x300
 800341a:	4921      	ldr	r1, [pc, #132]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 800341c:	e9c1 23be 	strd	r2, r3, [r1, #760]	; 0x2f8
    }
    /* Saturate: '<S122>/Saturation' */
    /*@>17c3c*/VCU_B./*@>17eb5*/Switch_j/*@>732f*/ = /*@>17c42*/VCU_B./*@>17eb8*/Switch1_d;
 8003420:	4b1f      	ldr	r3, [pc, #124]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 8003422:	e9d3 23be 	ldrd	r2, r3, [r3, #760]	; 0x2f8
 8003426:	491e      	ldr	r1, [pc, #120]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 8003428:	e9c1 23ba 	strd	r2, r3, [r1, #744]	; 0x2e8
}
/* End of Switch: '<S122>/Switch' */

/* Saturate: '<S122>/Saturation' */
/*@>17845*/if (/*@>17c36*/VCU_B./*@>17eb2*/Switch_j/*@>17840*/ > /*@>178cf*/0.9999) {
 800342c:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 800342e:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	; 0x2e8
 8003432:	4610      	mov	r0, r2
 8003434:	4619      	mov	r1, r3
 8003436:	a318      	add	r3, pc, #96	; (adr r3, 8003498 <FUNC_PumpAndFans+0x108>)
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	f00b fda4 	bl	800ef88 <__aeabi_dcmpgt>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d006      	beq.n	8003454 <FUNC_PumpAndFans+0xc4>
    /*@>17c4e*/VCU_B./*@>17ebe*/Saturation_b/*@>17847*/ = /*@>178d5*/0.9999;
 8003446:	4916      	ldr	r1, [pc, #88]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 8003448:	a313      	add	r3, pc, #76	; (adr r3, 8003498 <FUNC_PumpAndFans+0x108>)
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	e9c1 23bc 	strd	r2, r3, [r1, #752]	; 0x2f0
 8003452:	e01b      	b.n	800348c <FUNC_PumpAndFans+0xfc>
} else /*@>17848*/if (/*@>17c48*/VCU_B./*@>17ebb*/Switch_j/*@>1783d*/ < /*@>178d1*/0.0) {
 8003454:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 8003456:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	; 0x2e8
 800345a:	4610      	mov	r0, r2
 800345c:	4619      	mov	r1, r3
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	f00b fd71 	bl	800ef4c <__aeabi_dcmplt>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <FUNC_PumpAndFans+0xf0>
    /*@>17c60*/VCU_B./*@>17ec7*/Saturation_b/*@>1784a*/ = /*@>178d3*/0.0;
 8003470:	490b      	ldr	r1, [pc, #44]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	e9c1 23bc 	strd	r2, r3, [r1, #752]	; 0x2f0
 800347e:	e005      	b.n	800348c <FUNC_PumpAndFans+0xfc>
} else {
    /*@>17c54*/VCU_B./*@>17ec1*/Saturation_b/*@>17844*/ = /*@>17c5a*/VCU_B./*@>17ec4*/Switch_j;
 8003480:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 8003482:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	; 0x2e8
 8003486:	4906      	ldr	r1, [pc, #24]	; (80034a0 <FUNC_PumpAndFans+0x110>)
 8003488:	e9c1 23bc 	strd	r2, r3, [r1, #752]	; 0x2f0


        
    
      
          }
 800348c:	3704      	adds	r7, #4
 800348e:	46bd      	mov	sp, r7
 8003490:	bd90      	pop	{r4, r7, pc}
 8003492:	bf00      	nop
 8003494:	f3af 8000 	nop.w
 8003498:	48e8a71e 	.word	0x48e8a71e
 800349c:	3fefff2e 	.word	0x3fefff2e
 80034a0:	200008a8 	.word	0x200008a8
 80034a4:	3ff00000 	.word	0x3ff00000
 80034a8:	0800f3d0 	.word	0x0800f3d0
 80034ac:	0800f408 	.word	0x0800f408
 80034b0:	0800f328 	.word	0x0800f328
 80034b4:	0800f510 	.word	0x0800f510

080034b8 <FUNC_Transmission_Init>:
    
	      /* System initialize for atomic system: '<Root>/Transmission' */
          
  
        void FUNC_Transmission_Init(void)
  {
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0



                              /* SystemInitialize for Enabled SubSystem: '<S7>/LC_jr19' */
/* InitializeConditions for S-Function (sdspcount2): '<S144>/Counter1' */
/*@>25049*/VCU_DW./*@>26b06*/Counter1_Count_m/*@>73c6*/ = /*@>26ad2*/0U;
 80034bc:	4b10      	ldr	r3, [pc, #64]	; (8003500 <FUNC_Transmission_Init+0x48>)
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
/* InitializeConditions for S-Function (sdspcount2): '<S143>/Counter' */
/*@>2504f*/VCU_DW./*@>26b09*/Counter_Count_b/*@>73d2*/ = /*@>26ad5*/0U;
 80034c4:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <FUNC_Transmission_Init+0x48>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
/* InitializeConditions for S-Function (sdspcount2): '<S144>/Counter' */
/*@>25055*/VCU_DW./*@>26b0c*/Counter_Count_n/*@>73de*/ = /*@>26ad8*/0U;
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <FUNC_Transmission_Init+0x48>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
/* SystemInitialize for Enabled SubSystem: '<S142>/Clutch Pos calc' */
/* SystemInitialize for MinMax: '<S140>/MinMax' incorporates:
 *  Outport: '<S150>/x_clutch_LC'
 */
/*@>23e44*/VCU_B./*@>26b03*/Memory1/*@>73ea*/ = /*@>1f553*/12.5;
 80034d4:	490b      	ldr	r1, [pc, #44]	; (8003504 <FUNC_Transmission_Init+0x4c>)
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <FUNC_Transmission_Init+0x50>)
 80034dc:	e9c1 23a8 	strd	r2, r3, [r1, #672]	; 0x2a0
/* End of SystemInitialize for SubSystem: '<S142>/Clutch Pos calc' */
/* End of SystemInitialize for SubSystem: '<S7>/LC_jr19' */

/* SystemInitialize for Enabled SubSystem: '<S7>/semi_auto_jr18' */
/* InitializeConditions for S-Function (sdspcount2): '<S193>/Counter1' */
/*@>2505b*/VCU_DW./*@>26b0f*/Counter1_Count/*@>73f6*/ = /*@>26adb*/0U;
 80034e0:	4b07      	ldr	r3, [pc, #28]	; (8003500 <FUNC_Transmission_Init+0x48>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
/* InitializeConditions for S-Function (sdspcount2): '<S192>/Counter' */
/*@>25061*/VCU_DW./*@>26b12*/Counter_Count/*@>7402*/ = /*@>26ade*/0U;
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <FUNC_Transmission_Init+0x48>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
/* InitializeConditions for S-Function (sdspcount2): '<S193>/Counter' */
/*@>25067*/VCU_DW./*@>26b15*/Counter_Count_i/*@>740e*/ = /*@>26ae1*/0U;
 80034f0:	4b03      	ldr	r3, [pc, #12]	; (8003500 <FUNC_Transmission_Init+0x48>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    
  



          }
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	200010c8 	.word	0x200010c8
 8003504:	200008a8 	.word	0x200008a8
 8003508:	40290000 	.word	0x40290000
 800350c:	00000000 	.word	0x00000000

08003510 <FUNC_Transmission>:
          /* Output and update for atomic system: '<Root>/Transmission' */
      
              
  
        void FUNC_Transmission(void)
  {
 8003510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003512:	b089      	sub	sp, #36	; 0x24
 8003514:	af02      	add	r7, sp, #8
  



                                /* DataTypeConversion: '<S7>/Data Type Conversion' */
/*@>2021e*/tmp_0/*@>20220*/ = /*@>22966*/floor(/*@>23e4a*/VCU_B./*@>27add*/STW_transmission_mode);
 8003516:	4bac      	ldr	r3, [pc, #688]	; (80037c8 <FUNC_Transmission+0x2b8>)
 8003518:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 800351c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003520:	4610      	mov	r0, r2
 8003522:	4619      	mov	r1, r3
 8003524:	f00a feac 	bl	800e280 <floor>
 8003528:	e9c7 0102 	strd	r0, r1, [r7, #8]
/*@>2023e*/if (/*@>22968*/rtIsNaN(/*@>20222*/tmp_0)/*@>2022c*/ || /*@>2296a*/rtIsInf(/*@>20227*/tmp_0)) {
 800352c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003530:	f002 fff6 	bl	8006520 <rtIsNaN>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <FUNC_Transmission+0x38>
 800353a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800353e:	f002 ffcb 	bl	80064d8 <rtIsInf>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d006      	beq.n	8003556 <FUNC_Transmission+0x46>
    /*@>2022f*/tmp_0/*@>20231*/ = /*@>2022e*/0.0;
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003554:	e008      	b.n	8003568 <FUNC_Transmission+0x58>
} else {
    /*@>2023a*/tmp_0/*@>2023c*/ = /*@>2296c*/fmod(/*@>20233*/tmp_0, /*@>20237*/256.0);
 8003556:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	4b9b      	ldr	r3, [pc, #620]	; (80037cc <FUNC_Transmission+0x2bc>)
 8003560:	f00a ff16 	bl	800e390 <fmod>
 8003564:	e9c7 0102 	strd	r0, r1, [r7, #8]
}
/*@>23e50*/VCU_B./*@>27ae0*/DataTypeConversion_cg/*@>741b*/ = /*@>203f3*/(int8_T)(/*@>20245*/tmp_0/*@>20248*/ < /*@>20244*/0.0/*@>20248*/ ? (int32_T)/*@>2025a*/(int8_T)-/*@<20259*//*@>2024e*/(int8_T)/*@>2025c*/(uint8_T)-/*@<2024c*//*@>20249*/tmp_0 : (int32_T)/*@>20254*/(int8_T)/*@>2025f*/(uint8_T)/*@>20250*/tmp_0);
 8003568:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	f00b fcea 	bl	800ef4c <__aeabi_dcmplt>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00d      	beq.n	800359a <FUNC_Transmission+0x8a>
 800357e:	68bc      	ldr	r4, [r7, #8]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003586:	4620      	mov	r0, r4
 8003588:	4629      	mov	r1, r5
 800358a:	f00b fd07 	bl	800ef9c <__aeabi_d2uiz>
 800358e:	4603      	mov	r3, r0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	425b      	negs	r3, r3
 8003594:	b2db      	uxtb	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	e006      	b.n	80035a8 <FUNC_Transmission+0x98>
 800359a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800359e:	f00b fcfd 	bl	800ef9c <__aeabi_d2uiz>
 80035a2:	4603      	mov	r3, r0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	4a87      	ldr	r2, [pc, #540]	; (80037c8 <FUNC_Transmission+0x2b8>)
 80035aa:	f882 377b 	strb.w	r3, [r2, #1915]	; 0x77b
/* End of DataTypeConversion: '<S7>/Data Type Conversion' */

/* RelationalOperator: '<S136>/Compare' incorporates:
 *  Constant: '<S136>/Constant'
 */
/*@>23e56*/VCU_B./*@>27ae3*/Compare/*@>741f*/ = (/*@>23e5c*/VCU_B./*@>27ae6*/DataTypeConversion_cg/*@>741e*/ == /*@>1fd72*/3);
 80035ae:	4b86      	ldr	r3, [pc, #536]	; (80037c8 <FUNC_Transmission+0x2b8>)
 80035b0:	f893 377b 	ldrb.w	r3, [r3, #1915]	; 0x77b
 80035b4:	b25b      	sxtb	r3, r3
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	bf0c      	ite	eq
 80035ba:	2301      	moveq	r3, #1
 80035bc:	2300      	movne	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	4b81      	ldr	r3, [pc, #516]	; (80037c8 <FUNC_Transmission+0x2b8>)
 80035c4:	f883 277c 	strb.w	r2, [r3, #1916]	; 0x77c
/* Outputs for Enabled SubSystem: '<S7>/LC_jr19' incorporates:
 *  EnablePort: '<S137>/Enable'
 */
/*@>7421*/if (/*@>23e62*/VCU_B./*@>27ae9*/Compare) {
 80035c8:	4b7f      	ldr	r3, [pc, #508]	; (80037c8 <FUNC_Transmission+0x2b8>)
 80035ca:	f893 377c 	ldrb.w	r3, [r3, #1916]	; 0x77c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f001 815d 	beq.w	800488e <FUNC_Transmission+0x137e>
    /*@>7424*/if (!/*@<7423*//*@>25073*/VCU_DW./*@>2836b*/LC_jr19_MODE) {
 80035d4:	4b7e      	ldr	r3, [pc, #504]	; (80037d0 <FUNC_Transmission+0x2c0>)
 80035d6:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d103      	bne.n	80035e6 <FUNC_Transmission+0xd6>
        /*@>2507f*/VCU_DW./*@>28371*/LC_jr19_MODE/*@>7426*/ = /*@>1f712*/true;
 80035de:	4b7c      	ldr	r3, [pc, #496]	; (80037d0 <FUNC_Transmission+0x2c0>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
    /* CombinatorialLogic: '<S174>/Logic' incorporates:
 *  Delay: '<S143>/Delay'
 *  Memory: '<S174>/Memory'
 *  UnitDelay: '<S143>/Unit Delay1'
 */
    /*@>23e6e*/VCU_B./*@>27aef*/UnitDelay1_h/*@>7c03*/ = /*@>25085*/VCU_DW./*@>28374*/UnitDelay1_DSTATE_d;
 80035e6:	4b7a      	ldr	r3, [pc, #488]	; (80037d0 <FUNC_Transmission+0x2c0>)
 80035e8:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 80035ec:	4b76      	ldr	r3, [pc, #472]	; (80037c8 <FUNC_Transmission+0x2b8>)
 80035ee:	f883 27c5 	strb.w	r2, [r3, #1989]	; 0x7c5
    /*@>23e80*/VCU_B./*@>27af8*/Delay_f/*@>7c11*/ = /*@>25097*/VCU_DW./*@>2837d*/Delay_DSTATE_i/*@>23708*/[/*@>23705*/0];
 80035f2:	4b77      	ldr	r3, [pc, #476]	; (80037d0 <FUNC_Transmission+0x2c0>)
 80035f4:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 80035f8:	4b73      	ldr	r3, [pc, #460]	; (80037c8 <FUNC_Transmission+0x2b8>)
 80035fa:	f883 27c6 	strb.w	r2, [r3, #1990]	; 0x7c6
    /*@>23e92*/VCU_B./*@>27b01*/Memory_k/*@>75b9*/ = /*@>2509d*/VCU_DW./*@>28380*/Memory_PreviousInput_c;
 80035fe:	4b74      	ldr	r3, [pc, #464]	; (80037d0 <FUNC_Transmission+0x2c0>)
 8003600:	f893 2156 	ldrb.w	r2, [r3, #342]	; 0x156
 8003604:	4b70      	ldr	r3, [pc, #448]	; (80037c8 <FUNC_Transmission+0x2b8>)
 8003606:	f883 27c7 	strb.w	r2, [r3, #1991]	; 0x7c7
    /*@>1fe14*/rowIdx/*@>1d740*/ = /*@>23eaa*/VCU_B./*@>27b0d*/UnitDelay1_h;
 800360a:	4b6f      	ldr	r3, [pc, #444]	; (80037c8 <FUNC_Transmission+0x2b8>)
 800360c:	f893 37c5 	ldrb.w	r3, [r3, #1989]	; 0x7c5
 8003610:	617b      	str	r3, [r7, #20]
    /*@>1fe18*/rowIdx/*@>1d767*/ = /*@>20426*/(int32_T)((/*@>20423*/(uint32_T)/*@>1fe1a*/rowIdx/*@>20216*/ << /*@>1fe1c*/1)/*@>20214*/ + /*@>23eb6*/VCU_B./*@>27b13*/Delay_f);
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	4a6c      	ldr	r2, [pc, #432]	; (80037c8 <FUNC_Transmission+0x2b8>)
 8003618:	f892 27c6 	ldrb.w	r2, [r2, #1990]	; 0x7c6
 800361c:	4413      	add	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
    /*@>1fe1f*/rowIdx/*@>1d78e*/ = /*@>20435*/(int32_T)((/*@>20432*/(uint32_T)/*@>1fe21*/rowIdx/*@>2020c*/ << /*@>1fe23*/1)/*@>2020a*/ + /*@>23ec2*/VCU_B./*@>27b19*/Memory_k);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4a68      	ldr	r2, [pc, #416]	; (80037c8 <FUNC_Transmission+0x2b8>)
 8003626:	f892 27c7 	ldrb.w	r2, [r2, #1991]	; 0x7c7
 800362a:	4413      	add	r3, r2
 800362c:	617b      	str	r3, [r7, #20]
    /*@>23eda*/VCU_B./*@>27b25*/Logic_a/*@>1d7a4*/[/*@>1fe28*/0U]/*@>1d7a3*/ = /*@>24f22*/VCU_ConstP./*@>2831a*/pooled32/*@>23714*/[/*@>2370f*/(uint32_T)/*@>23711*/rowIdx];
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	4a68      	ldr	r2, [pc, #416]	; (80037d4 <FUNC_Transmission+0x2c4>)
 8003632:	4413      	add	r3, r2
 8003634:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003638:	4b63      	ldr	r3, [pc, #396]	; (80037c8 <FUNC_Transmission+0x2b8>)
 800363a:	f883 27c8 	strb.w	r2, [r3, #1992]	; 0x7c8
    /*@>23eec*/VCU_B./*@>27b2e*/Logic_a/*@>1d7b7*/[/*@>1fe2d*/1U]/*@>1d7b6*/ = /*@>24f28*/VCU_ConstP./*@>2831d*/pooled32/*@>2371d*/[/*@>23719*/rowIdx/*@>23716*/ + /*@>2371a*/8U];
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	3308      	adds	r3, #8
 8003642:	4a64      	ldr	r2, [pc, #400]	; (80037d4 <FUNC_Transmission+0x2c4>)
 8003644:	4413      	add	r3, r2
 8003646:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 800364a:	4b5f      	ldr	r3, [pc, #380]	; (80037c8 <FUNC_Transmission+0x2b8>)
 800364c:	f883 27c9 	strb.w	r2, [r3, #1993]	; 0x7c9
    /* DataTypeConversion: '<S137>/Data Type Conversion1' */
    /*@>23efe*/VCU_B./*@>27b37*/VOVG_ShiftDown_i/*@>75bd*/ = /*@>23f04*/VCU_B./*@>27b3a*/Logic_a/*@>23722*/[/*@>2371f*/0];
 8003650:	4b5d      	ldr	r3, [pc, #372]	; (80037c8 <FUNC_Transmission+0x2b8>)
 8003652:	f893 37c8 	ldrb.w	r3, [r3, #1992]	; 0x7c8
 8003656:	4618      	mov	r0, r3
 8003658:	f00b f990 	bl	800e97c <__aeabi_ui2d>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4959      	ldr	r1, [pc, #356]	; (80037c8 <FUNC_Transmission+0x2b8>)
 8003662:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
 *
 * Block description for '<S171>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>23f28*/VCU_B./*@>27b4c*/Uk1_o/*@>7c6d*/ = /*@>250b5*/VCU_DW./*@>2838c*/DelayInput1_DSTATE_a;
 8003666:	4b5a      	ldr	r3, [pc, #360]	; (80037d0 <FUNC_Transmission+0x2c0>)
 8003668:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800366c:	4956      	ldr	r1, [pc, #344]	; (80037c8 <FUNC_Transmission+0x2b8>)
 800366e:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198
    /* CombinatorialLogic: '<S172>/Logic' incorporates:
 *  RelationalOperator: '<S171>/FixPt Relational Operator'
 */
    /*@>23f64*/VCU_B./*@>27b6a*/FixPtRelationalOperator_l/*@>75c2*/ = (/*@>23f6a*/VCU_B./*@>27b6d*/STW_shift_down_request/*@>75c1*/ > /*@>23f70*/VCU_B./*@>27b70*/Uk1_o);
 8003672:	4b55      	ldr	r3, [pc, #340]	; (80037c8 <FUNC_Transmission+0x2b8>)
 8003674:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8003678:	e9d3 0100 	ldrd	r0, r1, [r3]
 800367c:	4b52      	ldr	r3, [pc, #328]	; (80037c8 <FUNC_Transmission+0x2b8>)
 800367e:	e9d3 2366 	ldrd	r2, r3, [r3, #408]	; 0x198
 8003682:	2401      	movs	r4, #1
 8003684:	f00b fc80 	bl	800ef88 <__aeabi_dcmpgt>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <FUNC_Transmission+0x182>
 800368e:	2300      	movs	r3, #0
 8003690:	461c      	mov	r4, r3
 8003692:	b2e3      	uxtb	r3, r4
 8003694:	461a      	mov	r2, r3
 8003696:	4b4c      	ldr	r3, [pc, #304]	; (80037c8 <FUNC_Transmission+0x2b8>)
 8003698:	f883 27ca 	strb.w	r2, [r3, #1994]	; 0x7ca
    /* UnitDelay: '<S143>/Unit Delay4' */
    /*@>23f88*/VCU_B./*@>27b7c*/UnitDelay4_b/*@>7c79*/ = /*@>250bb*/VCU_DW./*@>2838f*/UnitDelay4_DSTATE_k;
 800369c:	4b4c      	ldr	r3, [pc, #304]	; (80037d0 <FUNC_Transmission+0x2c0>)
 800369e:	f893 2111 	ldrb.w	r2, [r3, #273]	; 0x111
 80036a2:	4b49      	ldr	r3, [pc, #292]	; (80037c8 <FUNC_Transmission+0x2b8>)
 80036a4:	f883 27cb 	strb.w	r2, [r3, #1995]	; 0x7cb
    /* RelationalOperator: '<S165>/Compare' incorporates:
 *  Constant: '<S165>/Constant'
 */
    /*@>23fa6*/VCU_B./*@>27b8b*/Compare_em/*@>75c7*/ = (/*@>23fac*/VCU_B./*@>27b8e*/x_clutch_STW/*@>75c6*/ >= /*@>1fd7a*/15.0);
 80036a8:	4b47      	ldr	r3, [pc, #284]	; (80037c8 <FUNC_Transmission+0x2b8>)
 80036aa:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	2101      	movs	r1, #1
 80036b4:	460c      	mov	r4, r1
 80036b6:	4610      	mov	r0, r2
 80036b8:	4619      	mov	r1, r3
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	4b46      	ldr	r3, [pc, #280]	; (80037d8 <FUNC_Transmission+0x2c8>)
 80036c0:	f00b fc58 	bl	800ef74 <__aeabi_dcmpge>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <FUNC_Transmission+0x1be>
 80036ca:	2300      	movs	r3, #0
 80036cc:	461c      	mov	r4, r3
 80036ce:	b2e3      	uxtb	r3, r4
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b3d      	ldr	r3, [pc, #244]	; (80037c8 <FUNC_Transmission+0x2b8>)
 80036d4:	f883 27cc 	strb.w	r2, [r3, #1996]	; 0x7cc
    /* Switch: '<S143>/Switch' incorporates:
 *  Constant: '<S143>/Constant'
 *  Constant: '<S143>/Constant1'
 */
    /*@>1d675*/if (/*@>24000*/VCU_B./*@>27bb8*/Compare_em) {
 80036d8:	4b3b      	ldr	r3, [pc, #236]	; (80037c8 <FUNC_Transmission+0x2b8>)
 80036da:	f893 37cc 	ldrb.w	r3, [r3, #1996]	; 0x7cc
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d006      	beq.n	80036f0 <FUNC_Transmission+0x1e0>
        /*@>2401e*/VCU_B./*@>27bc7*/Switch_e/*@>1d678*/ = /*@>1fd7c*/1.0;
 80036e2:	4939      	ldr	r1, [pc, #228]	; (80037c8 <FUNC_Transmission+0x2b8>)
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	4b3c      	ldr	r3, [pc, #240]	; (80037dc <FUNC_Transmission+0x2cc>)
 80036ea:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
 80036ee:	e006      	b.n	80036fe <FUNC_Transmission+0x1ee>
    } else {
        /*@>24018*/VCU_B./*@>27bc4*/Switch_e/*@>7c89*/ = /*@>1fd7d*/2.0;
 80036f0:	4935      	ldr	r1, [pc, #212]	; (80037c8 <FUNC_Transmission+0x2b8>)
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036fa:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
    }
    /* End of Switch: '<S143>/Switch' */

    /* RelationalOperator: '<S143>/Relational Operator' */
    /*@>24090*/VCU_B./*@>27c00*/LessthanNeutral_m/*@>75cc*/ = (/*@>24096*/VCU_B./*@>27c03*/DataTypeConversion3/*@>75cb*/ < /*@>2409c*/VCU_B./*@>27c06*/Switch_e);
 80036fe:	4b32      	ldr	r3, [pc, #200]	; (80037c8 <FUNC_Transmission+0x2b8>)
 8003700:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003704:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003708:	4b2f      	ldr	r3, [pc, #188]	; (80037c8 <FUNC_Transmission+0x2b8>)
 800370a:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 800370e:	2401      	movs	r4, #1
 8003710:	f00b fc1c 	bl	800ef4c <__aeabi_dcmplt>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <FUNC_Transmission+0x20e>
 800371a:	2300      	movs	r3, #0
 800371c:	461c      	mov	r4, r3
 800371e:	b2e3      	uxtb	r3, r4
 8003720:	461a      	mov	r2, r3
 8003722:	4b29      	ldr	r3, [pc, #164]	; (80037c8 <FUNC_Transmission+0x2b8>)
 8003724:	f883 27cd 	strb.w	r2, [r3, #1997]	; 0x7cd
    /* UnitDelay: '<S144>/Unit Delay' */
    /*@>240b4*/VCU_B./*@>27c12*/UnitDelay_j/*@>7c9a*/ = /*@>250d3*/VCU_DW./*@>2839b*/UnitDelay_DSTATE_m;
 8003728:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <FUNC_Transmission+0x2c0>)
 800372a:	f893 2112 	ldrb.w	r2, [r3, #274]	; 0x112
 800372e:	4b26      	ldr	r3, [pc, #152]	; (80037c8 <FUNC_Transmission+0x2b8>)
 8003730:	f883 27ce 	strb.w	r2, [r3, #1998]	; 0x7ce
    /* UnitDelay: '<S143>/Unit Delay2' */
    /*@>240cc*/VCU_B./*@>27c1e*/Timeout_n/*@>7ca6*/ = /*@>250d9*/VCU_DW./*@>2839e*/UnitDelay2_DSTATE_n;
 8003734:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <FUNC_Transmission+0x2c0>)
 8003736:	f893 2113 	ldrb.w	r2, [r3, #275]	; 0x113
 800373a:	4b23      	ldr	r3, [pc, #140]	; (80037c8 <FUNC_Transmission+0x2b8>)
 800373c:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
    /* RelationalOperator: '<S167>/Compare' incorporates:
 *  Constant: '<S167>/Constant'
 */
    /*@>24114*/VCU_B./*@>27c42*/Compare_nv/*@>75d2*/ = (/*@>2411a*/VCU_B./*@>27c45*/DataTypeConversion3/*@>75d1*/ == /*@>1fd81*/2.0);
 8003740:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <FUNC_Transmission+0x2b8>)
 8003742:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	2101      	movs	r1, #1
 800374c:	460c      	mov	r4, r1
 800374e:	4610      	mov	r0, r2
 8003750:	4619      	mov	r1, r3
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800375a:	f00b fbed 	bl	800ef38 <__aeabi_dcmpeq>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <FUNC_Transmission+0x258>
 8003764:	2300      	movs	r3, #0
 8003766:	461c      	mov	r4, r3
 8003768:	b2e3      	uxtb	r3, r4
 800376a:	461a      	mov	r2, r3
 800376c:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <FUNC_Transmission+0x2b8>)
 800376e:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
    /* RelationalOperator: '<S166>/Compare' incorporates:
 *  Constant: '<S166>/Constant'
 */
    /*@>24126*/VCU_B./*@>27c4b*/Compare_ad/*@>75d6*/ = (/*@>2412c*/VCU_B./*@>27c4e*/DataTypeConversion2/*@>75d5*/ > /*@>1fd82*/5550.0);
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <FUNC_Transmission+0x2b8>)
 8003774:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8003778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377c:	2101      	movs	r1, #1
 800377e:	460c      	mov	r4, r1
 8003780:	4610      	mov	r0, r2
 8003782:	4619      	mov	r1, r3
 8003784:	a30e      	add	r3, pc, #56	; (adr r3, 80037c0 <FUNC_Transmission+0x2b0>)
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f00b fbfd 	bl	800ef88 <__aeabi_dcmpgt>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <FUNC_Transmission+0x288>
 8003794:	2300      	movs	r3, #0
 8003796:	461c      	mov	r4, r3
 8003798:	b2e3      	uxtb	r3, r4
 800379a:	461a      	mov	r2, r3
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <FUNC_Transmission+0x2b8>)
 800379e:	f883 27d1 	strb.w	r2, [r3, #2001]	; 0x7d1
    /* Logic: '<S143>/Logical Operator1' */
    /*@>24150*/VCU_B./*@>27c60*/RPMcheckgear21_n/*@>75dc*/ = (/*@>24156*/VCU_B./*@>27c63*/Compare_nv/*@>75db*/ && /*@>2415c*/VCU_B./*@>27c66*/Compare_ad);
 80037a2:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <FUNC_Transmission+0x2b8>)
 80037a4:	f893 37d0 	ldrb.w	r3, [r3, #2000]	; 0x7d0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d019      	beq.n	80037e0 <FUNC_Transmission+0x2d0>
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <FUNC_Transmission+0x2b8>)
 80037ae:	f893 37d1 	ldrb.w	r3, [r3, #2001]	; 0x7d1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d014      	beq.n	80037e0 <FUNC_Transmission+0x2d0>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e013      	b.n	80037e2 <FUNC_Transmission+0x2d2>
 80037ba:	bf00      	nop
 80037bc:	f3af 8000 	nop.w
 80037c0:	00000000 	.word	0x00000000
 80037c4:	40b5ae00 	.word	0x40b5ae00
 80037c8:	200008a8 	.word	0x200008a8
 80037cc:	40700000 	.word	0x40700000
 80037d0:	200010c8 	.word	0x200010c8
 80037d4:	0800f1e8 	.word	0x0800f1e8
 80037d8:	402e0000 	.word	0x402e0000
 80037dc:	3ff00000 	.word	0x3ff00000
 80037e0:	2300      	movs	r3, #0
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	4bb4      	ldr	r3, [pc, #720]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 80037e6:	f883 27d2 	strb.w	r2, [r3, #2002]	; 0x7d2
    /* RelationalOperator: '<S168>/Compare' incorporates:
 *  Constant: '<S168>/Constant'
 */
    /*@>241a4*/VCU_B./*@>27c8a*/Compare_ex/*@>75e0*/ = (/*@>241aa*/VCU_B./*@>27c8d*/DataTypeConversion2/*@>75df*/ > /*@>1fd84*/6200.0);
 80037ea:	4bb3      	ldr	r3, [pc, #716]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 80037ec:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	2101      	movs	r1, #1
 80037f6:	460c      	mov	r4, r1
 80037f8:	4610      	mov	r0, r2
 80037fa:	4619      	mov	r1, r3
 80037fc:	a3ac      	add	r3, pc, #688	; (adr r3, 8003ab0 <FUNC_Transmission+0x5a0>)
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f00b fbc1 	bl	800ef88 <__aeabi_dcmpgt>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <FUNC_Transmission+0x300>
 800380c:	2300      	movs	r3, #0
 800380e:	461c      	mov	r4, r3
 8003810:	b2e3      	uxtb	r3, r4
 8003812:	461a      	mov	r2, r3
 8003814:	4ba8      	ldr	r3, [pc, #672]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003816:	f883 27d3 	strb.w	r2, [r3, #2003]	; 0x7d3
    /* RelationalOperator: '<S169>/Compare' incorporates:
 *  Constant: '<S169>/Constant'
 */
    /*@>241c2*/VCU_B./*@>27c99*/Compare_gl/*@>75e4*/ = (/*@>241c8*/VCU_B./*@>27c9c*/DataTypeConversion3/*@>75e3*/ == /*@>1fd85*/3.0);
 800381a:	4ba7      	ldr	r3, [pc, #668]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 800381c:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	2101      	movs	r1, #1
 8003826:	460c      	mov	r4, r1
 8003828:	4610      	mov	r0, r2
 800382a:	4619      	mov	r1, r3
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	4ba2      	ldr	r3, [pc, #648]	; (8003abc <FUNC_Transmission+0x5ac>)
 8003832:	f00b fb81 	bl	800ef38 <__aeabi_dcmpeq>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <FUNC_Transmission+0x330>
 800383c:	2300      	movs	r3, #0
 800383e:	461c      	mov	r4, r3
 8003840:	b2e3      	uxtb	r3, r4
 8003842:	461a      	mov	r2, r3
 8003844:	4b9c      	ldr	r3, [pc, #624]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003846:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
    /* Logic: '<S143>/Logical Operator2' */
    /*@>241f2*/VCU_B./*@>27cb1*/RPMcheckgear31_g/*@>75ea*/ = (/*@>241f8*/VCU_B./*@>27cb4*/Compare_ex/*@>75e9*/ && /*@>241fe*/VCU_B./*@>27cb7*/Compare_gl);
 800384a:	4b9b      	ldr	r3, [pc, #620]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 800384c:	f893 37d3 	ldrb.w	r3, [r3, #2003]	; 0x7d3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d006      	beq.n	8003862 <FUNC_Transmission+0x352>
 8003854:	4b98      	ldr	r3, [pc, #608]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003856:	f893 37d4 	ldrb.w	r3, [r3, #2004]	; 0x7d4
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <FUNC_Transmission+0x352>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <FUNC_Transmission+0x354>
 8003862:	2300      	movs	r3, #0
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b94      	ldr	r3, [pc, #592]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003868:	f883 27d5 	strb.w	r2, [r3, #2005]	; 0x7d5
    /* CombinatorialLogic: '<S172>/Logic' incorporates:
 *  Logic: '<S143>/Logical Operator'
 *  Memory: '<S172>/Memory'
 */
    /*@>2424c*/VCU_B./*@>27cde*/LogicalOperator_c/*@>75fc*/ = (/*@>24252*/VCU_B./*@>27ce1*/UnitDelay4_b/*@>75ef*/ || /*@>24258*/VCU_B./*@>27ce4*/LessthanNeutral_m/*@>75f2*/ || /*@>2425e*/VCU_B./*@>27ce7*/UnitDelay_j/*@>75f5*/ || /*@>24264*/VCU_B./*@>27cea*/Timeout_n/*@>75f8*/ || /*@>2426a*/VCU_B./*@>27ced*/RPMcheckgear21_n/*@>75fb*/ || /*@>24270*/VCU_B./*@>27cf0*/RPMcheckgear31_g);
 800386c:	4b92      	ldr	r3, [pc, #584]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 800386e:	f893 37cb 	ldrb.w	r3, [r3, #1995]	; 0x7cb
 8003872:	2b00      	cmp	r3, #0
 8003874:	d118      	bne.n	80038a8 <FUNC_Transmission+0x398>
 8003876:	4b90      	ldr	r3, [pc, #576]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003878:	f893 37cd 	ldrb.w	r3, [r3, #1997]	; 0x7cd
 800387c:	2b00      	cmp	r3, #0
 800387e:	d113      	bne.n	80038a8 <FUNC_Transmission+0x398>
 8003880:	4b8d      	ldr	r3, [pc, #564]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003882:	f893 37ce 	ldrb.w	r3, [r3, #1998]	; 0x7ce
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10e      	bne.n	80038a8 <FUNC_Transmission+0x398>
 800388a:	4b8b      	ldr	r3, [pc, #556]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 800388c:	f893 37cf 	ldrb.w	r3, [r3, #1999]	; 0x7cf
 8003890:	2b00      	cmp	r3, #0
 8003892:	d109      	bne.n	80038a8 <FUNC_Transmission+0x398>
 8003894:	4b88      	ldr	r3, [pc, #544]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003896:	f893 37d2 	ldrb.w	r3, [r3, #2002]	; 0x7d2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d104      	bne.n	80038a8 <FUNC_Transmission+0x398>
 800389e:	4b86      	ldr	r3, [pc, #536]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 80038a0:	f893 37d5 	ldrb.w	r3, [r3, #2005]	; 0x7d5
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <FUNC_Transmission+0x39c>
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <FUNC_Transmission+0x39e>
 80038ac:	2300      	movs	r3, #0
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	4b81      	ldr	r3, [pc, #516]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 80038b2:	f883 27d6 	strb.w	r2, [r3, #2006]	; 0x7d6
    /*@>2428e*/VCU_B./*@>27cff*/Memory_kz/*@>75fe*/ = /*@>250e5*/VCU_DW./*@>283a4*/Memory_PreviousInput_ao;
 80038b6:	4b82      	ldr	r3, [pc, #520]	; (8003ac0 <FUNC_Transmission+0x5b0>)
 80038b8:	f893 2157 	ldrb.w	r2, [r3, #343]	; 0x157
 80038bc:	4b7e      	ldr	r3, [pc, #504]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 80038be:	f883 27d7 	strb.w	r2, [r3, #2007]	; 0x7d7
    /*@>1fe68*/rowIdx/*@>1d935*/ = /*@>242b2*/VCU_B./*@>27d11*/FixPtRelationalOperator_l;
 80038c2:	4b7d      	ldr	r3, [pc, #500]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 80038c4:	f893 37ca 	ldrb.w	r3, [r3, #1994]	; 0x7ca
 80038c8:	617b      	str	r3, [r7, #20]
    /*@>1fe6c*/rowIdx/*@>1d95c*/ = /*@>2055d*/(int32_T)((/*@>2055a*/(uint32_T)/*@>1fe6e*/rowIdx/*@>20201*/ << /*@>1fe70*/1)/*@>201ff*/ + /*@>2430c*/VCU_B./*@>27d3e*/LogicalOperator_c);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4a7a      	ldr	r2, [pc, #488]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 80038d0:	f892 27d6 	ldrb.w	r2, [r2, #2006]	; 0x7d6
 80038d4:	4413      	add	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]
    /*@>1fe73*/rowIdx/*@>1d983*/ = /*@>2057c*/(int32_T)((/*@>20579*/(uint32_T)/*@>1fe75*/rowIdx/*@>201f7*/ << /*@>1fe77*/1)/*@>201f5*/ + /*@>24330*/VCU_B./*@>27d50*/Memory_kz);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	4a76      	ldr	r2, [pc, #472]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 80038de:	f892 27d7 	ldrb.w	r2, [r2, #2007]	; 0x7d7
 80038e2:	4413      	add	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]
    /*@>2434e*/VCU_B./*@>27d5f*/Logic_il/*@>1d999*/[/*@>1fe7c*/0U]/*@>1d998*/ = /*@>24f52*/VCU_ConstP./*@>28332*/pooled32/*@>2374e*/[/*@>23749*/(uint32_T)/*@>2374b*/rowIdx];
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	4a76      	ldr	r2, [pc, #472]	; (8003ac4 <FUNC_Transmission+0x5b4>)
 80038ea:	4413      	add	r3, r2
 80038ec:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 80038f0:	4b71      	ldr	r3, [pc, #452]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 80038f2:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
    /*@>2439c*/VCU_B./*@>27d86*/Logic_il/*@>1d9ac*/[/*@>1fe81*/1U]/*@>1d9ab*/ = /*@>24f58*/VCU_ConstP./*@>28335*/pooled32/*@>23757*/[/*@>23753*/rowIdx/*@>23750*/ + /*@>23754*/8U];
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	3308      	adds	r3, #8
 80038fa:	4a72      	ldr	r2, [pc, #456]	; (8003ac4 <FUNC_Transmission+0x5b4>)
 80038fc:	4413      	add	r3, r2
 80038fe:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003902:	4b6d      	ldr	r3, [pc, #436]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003904:	f883 27d9 	strb.w	r2, [r3, #2009]	; 0x7d9
    /* CombinatorialLogic: '<S173>/Logic' incorporates:
 *  Memory: '<S173>/Memory'
 */
    /*@>243b4*/VCU_B./*@>27d92*/Memory_ac/*@>7601*/ = /*@>250eb*/VCU_DW./*@>283a7*/Memory_PreviousInput_m;
 8003908:	4b6d      	ldr	r3, [pc, #436]	; (8003ac0 <FUNC_Transmission+0x5b0>)
 800390a:	f893 2158 	ldrb.w	r2, [r3, #344]	; 0x158
 800390e:	4b6a      	ldr	r3, [pc, #424]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003910:	f883 27da 	strb.w	r2, [r3, #2010]	; 0x7da
    /*@>1ff6a*/tmp/*@>1d9c7*/ = /*@>243de*/VCU_B./*@>27da7*/Logic_il/*@>2375c*/[/*@>23759*/0];
 8003914:	4b68      	ldr	r3, [pc, #416]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003916:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 800391a:	71fb      	strb	r3, [r7, #7]
    /*@>1fe85*/rowIdx/*@>1d9de*/ = /*@>1ff6c*/tmp;
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	617b      	str	r3, [r7, #20]
    /*@>1fe89*/rowIdx/*@>1da07*/ = /*@>205c7*/(int32_T)((/*@>205c4*/(uint32_T)/*@>1fe8b*/rowIdx/*@>201ec*/ << /*@>1fe8d*/1)/*@>201ea*/ + /*@>2442c*/VCU_B./*@>27dce*/LogicalOperator_c);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4a64      	ldr	r2, [pc, #400]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003926:	f892 27d6 	ldrb.w	r2, [r2, #2006]	; 0x7d6
 800392a:	4413      	add	r3, r2
 800392c:	617b      	str	r3, [r7, #20]
    /*@>1fe90*/rowIdx/*@>1da30*/ = /*@>205d8*/(int32_T)((/*@>205d5*/(uint32_T)/*@>1fe92*/rowIdx/*@>201e2*/ << /*@>1fe94*/1)/*@>201e0*/ + /*@>2444a*/VCU_B./*@>27ddd*/Memory_ac);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	4a61      	ldr	r2, [pc, #388]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003934:	f892 27da 	ldrb.w	r2, [r2, #2010]	; 0x7da
 8003938:	4413      	add	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
    /*@>24492*/VCU_B./*@>27e01*/Logic_l/*@>1da46*/[/*@>1fe99*/0U]/*@>1da45*/ = /*@>24f5e*/VCU_ConstP./*@>28338*/pooled32/*@>23763*/[/*@>2375e*/(uint32_T)/*@>23760*/rowIdx];
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	4a61      	ldr	r2, [pc, #388]	; (8003ac4 <FUNC_Transmission+0x5b4>)
 8003940:	4413      	add	r3, r2
 8003942:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003946:	4b5c      	ldr	r3, [pc, #368]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003948:	f883 27db 	strb.w	r2, [r3, #2011]	; 0x7db
    /*@>244aa*/VCU_B./*@>27e0d*/Logic_l/*@>1da59*/[/*@>1fe9e*/1U]/*@>1da58*/ = /*@>24f64*/VCU_ConstP./*@>2833b*/pooled32/*@>2376c*/[/*@>23768*/rowIdx/*@>23765*/ + /*@>23769*/8U];
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	3308      	adds	r3, #8
 8003950:	4a5c      	ldr	r2, [pc, #368]	; (8003ac4 <FUNC_Transmission+0x5b4>)
 8003952:	4413      	add	r3, r2
 8003954:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003958:	4b57      	ldr	r3, [pc, #348]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 800395a:	f883 27dc 	strb.w	r2, [r3, #2012]	; 0x7dc
    /* Sum: '<S152>/Add1' incorporates:
 *  Constant: '<S152>/Constant13'
 */
    /*@>244c2*/VCU_B./*@>27e19*/Add1/*@>a6e4*/ = /*@>1fd98*/2.0/*@>a6e1*/ - /*@>244c8*/VCU_B./*@>27e1c*/DataTypeConversion3;
 800395e:	4b56      	ldr	r3, [pc, #344]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003960:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	f04f 0000 	mov.w	r0, #0
 800396c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003970:	f00a fec6 	bl	800e700 <__aeabi_dsub>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	494f      	ldr	r1, [pc, #316]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 800397a:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
    /* Switch: '<S152>/Switch3' */
    /*@>244ec*/VCU_B./*@>27e2e*/Switch3/*@>7d59*/ = (/*@>244f2*/VCU_B./*@>27e31*/Add1/*@>7d53*/ >= /*@>1fd99*/0.0);
 800397e:	4b4e      	ldr	r3, [pc, #312]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003980:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	f00b faf0 	bl	800ef74 <__aeabi_dcmpge>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <FUNC_Transmission+0x492>
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	4b4a      	ldr	r3, [pc, #296]	; (8003ac8 <FUNC_Transmission+0x5b8>)
 80039a0:	e003      	b.n	80039aa <FUNC_Transmission+0x49a>
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	4943      	ldr	r1, [pc, #268]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 80039ac:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
    /* Switch: '<S152>/Switch4' */
    /*@>2451c*/VCU_B./*@>27e46*/Switch4/*@>7d71*/ = (/*@>24522*/VCU_B./*@>27e49*/Gain4/*@>7d6b*/ > /*@>1fd9a*/65.0);
 80039b0:	4b41      	ldr	r3, [pc, #260]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 80039b2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80039b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ba:	4610      	mov	r0, r2
 80039bc:	4619      	mov	r1, r3
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	4b42      	ldr	r3, [pc, #264]	; (8003acc <FUNC_Transmission+0x5bc>)
 80039c4:	f00b fae0 	bl	800ef88 <__aeabi_dcmpgt>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <FUNC_Transmission+0x4c6>
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	4b3d      	ldr	r3, [pc, #244]	; (8003ac8 <FUNC_Transmission+0x5b8>)
 80039d4:	e003      	b.n	80039de <FUNC_Transmission+0x4ce>
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	4936      	ldr	r1, [pc, #216]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 80039e0:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
    /* Logic: '<S152>/Logical Operator3' */
    /*@>24552*/VCU_B./*@>27e61*/LogicalOperator3/*@>760f*/ = ((/*@>24558*/VCU_B./*@>27e64*/Switch3/*@>201d5*/ != /*@>201d3*/0.0)/*@>760e*/ && (/*@>2455e*/VCU_B./*@>27e67*/Switch4/*@>201d9*/ != /*@>201d7*/0.0));
 80039e4:	4b34      	ldr	r3, [pc, #208]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 80039e6:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	f00b fa9f 	bl	800ef38 <__aeabi_dcmpeq>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10f      	bne.n	8003a20 <FUNC_Transmission+0x510>
 8003a00:	4b2d      	ldr	r3, [pc, #180]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003a02:	e9d3 236e 	ldrd	r2, r3, [r3, #440]	; 0x1b8
 8003a06:	4610      	mov	r0, r2
 8003a08:	4619      	mov	r1, r3
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	f00b fa91 	bl	800ef38 <__aeabi_dcmpeq>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <FUNC_Transmission+0x510>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <FUNC_Transmission+0x512>
 8003a20:	2300      	movs	r3, #0
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	4b24      	ldr	r3, [pc, #144]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003a26:	f883 27dd 	strb.w	r2, [r3, #2013]	; 0x7dd
    /* Logic: '<S152>/Logical Operator' */
    /*@>2456a*/VCU_B./*@>27e6d*/LogicalOperator_dn/*@>7615*/ = /*@>24570*/VCU_B./*@>27e70*/LogicalOperator3;
 8003a2a:	4b23      	ldr	r3, [pc, #140]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003a2c:	f893 27dd 	ldrb.w	r2, [r3, #2013]	; 0x7dd
 8003a30:	4b21      	ldr	r3, [pc, #132]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003a32:	f883 27de 	strb.w	r2, [r3, #2014]	; 0x7de
    /* Product: '<S142>/Product' */
    /*@>2457c*/VCU_B./*@>27e76*/Product/*@>761c*/ = /*@>20612*/(uint16_T)(/*@>24582*/VCU_B./*@>27e79*/LogicalOperator_dn/*@>27e79*/ ? /*@>20610*/(int32_T)/*@>24588*/VCU_B./*@>27e7c*/LC_dash_bit : /*@>201ce*/0);
 8003a36:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003a38:	f893 37de 	ldrb.w	r3, [r3, #2014]	; 0x7de
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d004      	beq.n	8003a4a <FUNC_Transmission+0x53a>
 8003a40:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003a42:	f893 380f 	ldrb.w	r3, [r3, #2063]	; 0x80f
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	e000      	b.n	8003a4c <FUNC_Transmission+0x53c>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	4a1a      	ldr	r2, [pc, #104]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003a4e:	f8a2 36f4 	strh.w	r3, [r2, #1780]	; 0x6f4
 *
 * Block description for '<S141>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>2458e*/VCU_B./*@>27e7f*/Uk1_ix/*@>7d82*/ = /*@>25103*/VCU_DW./*@>283b3*/DelayInput1_DSTATE_d;
 8003a52:	4b1b      	ldr	r3, [pc, #108]	; (8003ac0 <FUNC_Transmission+0x5b0>)
 8003a54:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 8003a58:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003a5a:	f8a3 26f6 	strh.w	r2, [r3, #1782]	; 0x6f6
    /* RelationalOperator: '<S141>/FixPt Relational Operator' */
    /*@>2459a*/VCU_B./*@>27e85*/FixPtRelationalOperator_k/*@>7621*/ = (/*@>245a0*/VCU_B./*@>27e88*/Product/*@>7620*/ > /*@>245a6*/VCU_B./*@>27e8b*/Uk1_ix);
 8003a5e:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003a60:	f8b3 26f4 	ldrh.w	r2, [r3, #1780]	; 0x6f4
 8003a64:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003a66:	f8b3 36f6 	ldrh.w	r3, [r3, #1782]	; 0x6f6
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	bf8c      	ite	hi
 8003a6e:	2301      	movhi	r3, #1
 8003a70:	2300      	movls	r3, #0
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003a78:	f883 27df 	strb.w	r2, [r3, #2015]	; 0x7df
    /* Logic: '<S137>/Logical Operator' */
    /*@>245b2*/VCU_B./*@>27e91*/LogicalOperator_k/*@>7627*/ = (/*@>245b8*/VCU_B./*@>27e94*/FixPtRelationalOperator_k/*@>7626*/ || (/*@>245be*/VCU_B./*@>27e97*/STW_shift_up_request/*@>201cc*/ != /*@>201ca*/0.0));
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003a7e:	f893 37df 	ldrb.w	r3, [r3, #2015]	; 0x7df
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10f      	bne.n	8003aa6 <FUNC_Transmission+0x596>
 8003a86:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <FUNC_Transmission+0x5a8>)
 8003a88:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	4610      	mov	r0, r2
 8003a92:	4619      	mov	r1, r3
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	f00b fa4c 	bl	800ef38 <__aeabi_dcmpeq>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d114      	bne.n	8003ad0 <FUNC_Transmission+0x5c0>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e013      	b.n	8003ad2 <FUNC_Transmission+0x5c2>
 8003aaa:	bf00      	nop
 8003aac:	f3af 8000 	nop.w
 8003ab0:	00000000 	.word	0x00000000
 8003ab4:	40b83800 	.word	0x40b83800
 8003ab8:	200008a8 	.word	0x200008a8
 8003abc:	40080000 	.word	0x40080000
 8003ac0:	200010c8 	.word	0x200010c8
 8003ac4:	0800f1e8 	.word	0x0800f1e8
 8003ac8:	3ff00000 	.word	0x3ff00000
 8003acc:	40504000 	.word	0x40504000
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	4b9a      	ldr	r3, [pc, #616]	; (8003d40 <FUNC_Transmission+0x830>)
 8003ad6:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
 *
 * Block description for '<S178>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>245ca*/VCU_B./*@>27e9d*/Uk1_fm/*@>7d8e*/ = /*@>25109*/VCU_DW./*@>283b6*/DelayInput1_DSTATE_fa;
 8003ada:	4b9a      	ldr	r3, [pc, #616]	; (8003d44 <FUNC_Transmission+0x834>)
 8003adc:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
 8003ae0:	4b97      	ldr	r3, [pc, #604]	; (8003d40 <FUNC_Transmission+0x830>)
 8003ae2:	f883 27e1 	strb.w	r2, [r3, #2017]	; 0x7e1
    /* CombinatorialLogic: '<S181>/Logic' incorporates:
 *  RelationalOperator: '<S178>/FixPt Relational Operator'
 */
    /*@>245d6*/VCU_B./*@>27ea3*/FixPtRelationalOperator_o/*@>762c*/ = (/*@>20639*/(int32_T)/*@>245dc*/VCU_B./*@>27ea6*/LogicalOperator_k/*@>762b*/ > /*@>2063b*/(int32_T)/*@>245e2*/VCU_B./*@>27ea9*/Uk1_fm);
 8003ae6:	4b96      	ldr	r3, [pc, #600]	; (8003d40 <FUNC_Transmission+0x830>)
 8003ae8:	f893 27e0 	ldrb.w	r2, [r3, #2016]	; 0x7e0
 8003aec:	4b94      	ldr	r3, [pc, #592]	; (8003d40 <FUNC_Transmission+0x830>)
 8003aee:	f893 37e1 	ldrb.w	r3, [r3, #2017]	; 0x7e1
 8003af2:	429a      	cmp	r2, r3
 8003af4:	bf8c      	ite	hi
 8003af6:	2301      	movhi	r3, #1
 8003af8:	2300      	movls	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	4b90      	ldr	r3, [pc, #576]	; (8003d40 <FUNC_Transmission+0x830>)
 8003b00:	f883 27e2 	strb.w	r2, [r3, #2018]	; 0x7e2
 *
 * Block description for '<S179>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>245ee*/VCU_B./*@>27eaf*/Uk1_d/*@>7d9a*/ = /*@>25115*/VCU_DW./*@>283bc*/DelayInput1_DSTATE_l;
 8003b04:	4b8f      	ldr	r3, [pc, #572]	; (8003d44 <FUNC_Transmission+0x834>)
 8003b06:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003b0a:	498d      	ldr	r1, [pc, #564]	; (8003d40 <FUNC_Transmission+0x830>)
 8003b0c:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
    /* RelationalOperator: '<S179>/FixPt Relational Operator' */
    /*@>24606*/VCU_B./*@>27ebb*/FixPtRelationalOperator_cf/*@>7631*/ = (/*@>2460c*/VCU_B./*@>27ebe*/DataTypeConversion3/*@>7630*/ > /*@>24612*/VCU_B./*@>27ec1*/Uk1_d);
 8003b10:	4b8b      	ldr	r3, [pc, #556]	; (8003d40 <FUNC_Transmission+0x830>)
 8003b12:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003b16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b1a:	4b89      	ldr	r3, [pc, #548]	; (8003d40 <FUNC_Transmission+0x830>)
 8003b1c:	e9d3 2370 	ldrd	r2, r3, [r3, #448]	; 0x1c0
 8003b20:	2401      	movs	r4, #1
 8003b22:	f00b fa31 	bl	800ef88 <__aeabi_dcmpgt>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <FUNC_Transmission+0x620>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	461c      	mov	r4, r3
 8003b30:	b2e3      	uxtb	r3, r4
 8003b32:	461a      	mov	r2, r3
 8003b34:	4b82      	ldr	r3, [pc, #520]	; (8003d40 <FUNC_Transmission+0x830>)
 8003b36:	f883 27e3 	strb.w	r2, [r3, #2019]	; 0x7e3
    /* RelationalOperator: '<S175>/Compare' incorporates:
 *  Constant: '<S175>/Constant'
 */
    /*@>24624*/VCU_B./*@>27eca*/Compare_np/*@>7635*/ = (/*@>2462a*/VCU_B./*@>27ecd*/DataTypeConversion3/*@>7634*/ >= /*@>1fd9c*/3.0);
 8003b3a:	4b81      	ldr	r3, [pc, #516]	; (8003d40 <FUNC_Transmission+0x830>)
 8003b3c:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b44:	2101      	movs	r1, #1
 8003b46:	460c      	mov	r4, r1
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	4b7d      	ldr	r3, [pc, #500]	; (8003d48 <FUNC_Transmission+0x838>)
 8003b52:	f00b fa0f 	bl	800ef74 <__aeabi_dcmpge>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <FUNC_Transmission+0x650>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	461c      	mov	r4, r3
 8003b60:	b2e3      	uxtb	r3, r4
 8003b62:	461a      	mov	r2, r3
 8003b64:	4b76      	ldr	r3, [pc, #472]	; (8003d40 <FUNC_Transmission+0x830>)
 8003b66:	f883 27e4 	strb.w	r2, [r3, #2020]	; 0x7e4
    /* UnitDelay: '<S143>/Unit Delay' */
    /*@>2463c*/VCU_B./*@>27ed6*/UnitDelay_m/*@>7da6*/ = /*@>2511b*/VCU_DW./*@>283bf*/UnitDelay_DSTATE_f;
 8003b6a:	4b76      	ldr	r3, [pc, #472]	; (8003d44 <FUNC_Transmission+0x834>)
 8003b6c:	f893 2115 	ldrb.w	r2, [r3, #277]	; 0x115
 8003b70:	4b73      	ldr	r3, [pc, #460]	; (8003d40 <FUNC_Transmission+0x830>)
 8003b72:	f883 27e5 	strb.w	r2, [r3, #2021]	; 0x7e5
    /* UnitDelay: '<S144>/Unit Delay1' */
    /*@>2464e*/VCU_B./*@>27edf*/Timeout_c/*@>7db2*/ = /*@>25121*/VCU_DW./*@>283c2*/UnitDelay1_DSTATE_i;
 8003b76:	4b73      	ldr	r3, [pc, #460]	; (8003d44 <FUNC_Transmission+0x834>)
 8003b78:	f893 2116 	ldrb.w	r2, [r3, #278]	; 0x116
 8003b7c:	4b70      	ldr	r3, [pc, #448]	; (8003d40 <FUNC_Transmission+0x830>)
 8003b7e:	f883 27e6 	strb.w	r2, [r3, #2022]	; 0x7e6
    /* RelationalOperator: '<S177>/Compare' incorporates:
 *  Constant: '<S177>/Constant'
 */
    /*@>24660*/VCU_B./*@>27ee8*/Compare_lz/*@>763b*/ = (/*@>24666*/VCU_B./*@>27eeb*/DataTypeConversion3/*@>763a*/ == /*@>1fda0*/0.0);
 8003b82:	4b6f      	ldr	r3, [pc, #444]	; (8003d40 <FUNC_Transmission+0x830>)
 8003b84:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	460c      	mov	r4, r1
 8003b90:	4610      	mov	r0, r2
 8003b92:	4619      	mov	r1, r3
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	f00b f9cc 	bl	800ef38 <__aeabi_dcmpeq>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <FUNC_Transmission+0x69a>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	461c      	mov	r4, r3
 8003baa:	b2e3      	uxtb	r3, r4
 8003bac:	461a      	mov	r2, r3
 8003bae:	4b64      	ldr	r3, [pc, #400]	; (8003d40 <FUNC_Transmission+0x830>)
 8003bb0:	f883 27e7 	strb.w	r2, [r3, #2023]	; 0x7e7
    /* RelationalOperator: '<S176>/Compare' incorporates:
 *  Constant: '<S176>/Constant'
 */
    /*@>24684*/VCU_B./*@>27efa*/Compare_ph/*@>763f*/ = (/*@>2468a*/VCU_B./*@>27efd*/x_clutch_STW/*@>763e*/ < /*@>1fda1*/15.0);
 8003bb4:	4b62      	ldr	r3, [pc, #392]	; (8003d40 <FUNC_Transmission+0x830>)
 8003bb6:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	460c      	mov	r4, r1
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	4b60      	ldr	r3, [pc, #384]	; (8003d4c <FUNC_Transmission+0x83c>)
 8003bcc:	f00b f9be 	bl	800ef4c <__aeabi_dcmplt>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <FUNC_Transmission+0x6ca>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	461c      	mov	r4, r3
 8003bda:	b2e3      	uxtb	r3, r4
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4b58      	ldr	r3, [pc, #352]	; (8003d40 <FUNC_Transmission+0x830>)
 8003be0:	f883 27e8 	strb.w	r2, [r3, #2024]	; 0x7e8
    /* Logic: '<S144>/Logical Operator1' */
    /*@>24696*/VCU_B./*@>27f03*/FailSafefirstgear_l/*@>7645*/ = (/*@>2469c*/VCU_B./*@>27f06*/Compare_lz/*@>7644*/ && /*@>246a2*/VCU_B./*@>27f09*/Compare_ph);
 8003be4:	4b56      	ldr	r3, [pc, #344]	; (8003d40 <FUNC_Transmission+0x830>)
 8003be6:	f893 37e7 	ldrb.w	r3, [r3, #2023]	; 0x7e7
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d006      	beq.n	8003bfc <FUNC_Transmission+0x6ec>
 8003bee:	4b54      	ldr	r3, [pc, #336]	; (8003d40 <FUNC_Transmission+0x830>)
 8003bf0:	f893 37e8 	ldrb.w	r3, [r3, #2024]	; 0x7e8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <FUNC_Transmission+0x6ec>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <FUNC_Transmission+0x6ee>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	4b4f      	ldr	r3, [pc, #316]	; (8003d40 <FUNC_Transmission+0x830>)
 8003c02:	f883 27e9 	strb.w	r2, [r3, #2025]	; 0x7e9
    /* CombinatorialLogic: '<S181>/Logic' incorporates:
 *  Logic: '<S144>/Logical Operator'
 *  Memory: '<S181>/Memory'
 */
    /*@>246ba*/VCU_B./*@>27f15*/LogicalOperator_d0/*@>7654*/ = (/*@>246c0*/VCU_B./*@>27f18*/FixPtRelationalOperator_cf/*@>764a*/ || /*@>246c6*/VCU_B./*@>27f1b*/Compare_np/*@>764d*/ || /*@>246cc*/VCU_B./*@>27f1e*/UnitDelay_m/*@>7650*/ || /*@>246d2*/VCU_B./*@>27f21*/Timeout_c/*@>7653*/ || /*@>246d8*/VCU_B./*@>27f24*/FailSafefirstgear_l);
 8003c06:	4b4e      	ldr	r3, [pc, #312]	; (8003d40 <FUNC_Transmission+0x830>)
 8003c08:	f893 37e3 	ldrb.w	r3, [r3, #2019]	; 0x7e3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d113      	bne.n	8003c38 <FUNC_Transmission+0x728>
 8003c10:	4b4b      	ldr	r3, [pc, #300]	; (8003d40 <FUNC_Transmission+0x830>)
 8003c12:	f893 37e4 	ldrb.w	r3, [r3, #2020]	; 0x7e4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10e      	bne.n	8003c38 <FUNC_Transmission+0x728>
 8003c1a:	4b49      	ldr	r3, [pc, #292]	; (8003d40 <FUNC_Transmission+0x830>)
 8003c1c:	f893 37e5 	ldrb.w	r3, [r3, #2021]	; 0x7e5
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d109      	bne.n	8003c38 <FUNC_Transmission+0x728>
 8003c24:	4b46      	ldr	r3, [pc, #280]	; (8003d40 <FUNC_Transmission+0x830>)
 8003c26:	f893 37e6 	ldrb.w	r3, [r3, #2022]	; 0x7e6
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d104      	bne.n	8003c38 <FUNC_Transmission+0x728>
 8003c2e:	4b44      	ldr	r3, [pc, #272]	; (8003d40 <FUNC_Transmission+0x830>)
 8003c30:	f893 37e9 	ldrb.w	r3, [r3, #2025]	; 0x7e9
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <FUNC_Transmission+0x72c>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <FUNC_Transmission+0x72e>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	4b3f      	ldr	r3, [pc, #252]	; (8003d40 <FUNC_Transmission+0x830>)
 8003c42:	f883 27ea 	strb.w	r2, [r3, #2026]	; 0x7ea
    /*@>246ea*/VCU_B./*@>27f2d*/Memory_o/*@>7656*/ = /*@>2512d*/VCU_DW./*@>283c8*/Memory_PreviousInput_e;
 8003c46:	4b3f      	ldr	r3, [pc, #252]	; (8003d44 <FUNC_Transmission+0x834>)
 8003c48:	f893 2159 	ldrb.w	r2, [r3, #345]	; 0x159
 8003c4c:	4b3c      	ldr	r3, [pc, #240]	; (8003d40 <FUNC_Transmission+0x830>)
 8003c4e:	f883 27eb 	strb.w	r2, [r3, #2027]	; 0x7eb
    /*@>1febe*/rowIdx/*@>1db36*/ = /*@>246f6*/VCU_B./*@>27f33*/FixPtRelationalOperator_o;
 8003c52:	4b3b      	ldr	r3, [pc, #236]	; (8003d40 <FUNC_Transmission+0x830>)
 8003c54:	f893 37e2 	ldrb.w	r3, [r3, #2018]	; 0x7e2
 8003c58:	617b      	str	r3, [r7, #20]
    /*@>1fec2*/rowIdx/*@>1db5d*/ = /*@>2068d*/(int32_T)((/*@>2068a*/(uint32_T)/*@>1fec4*/rowIdx/*@>201c6*/ << /*@>1fec6*/1)/*@>201c4*/ + /*@>24702*/VCU_B./*@>27f39*/LogicalOperator_d0);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	4a38      	ldr	r2, [pc, #224]	; (8003d40 <FUNC_Transmission+0x830>)
 8003c60:	f892 27ea 	ldrb.w	r2, [r2, #2026]	; 0x7ea
 8003c64:	4413      	add	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]
    /*@>1fec9*/rowIdx/*@>1db84*/ = /*@>2069e*/(int32_T)((/*@>2069b*/(uint32_T)/*@>1fecb*/rowIdx/*@>201bc*/ << /*@>1fecd*/1)/*@>201ba*/ + /*@>24714*/VCU_B./*@>27f42*/Memory_o);
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	4a34      	ldr	r2, [pc, #208]	; (8003d40 <FUNC_Transmission+0x830>)
 8003c6e:	f892 27eb 	ldrb.w	r2, [r2, #2027]	; 0x7eb
 8003c72:	4413      	add	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]
    /*@>24726*/VCU_B./*@>27f4b*/Logic_p/*@>1db9a*/[/*@>1fed2*/0U]/*@>1db99*/ = /*@>24f76*/VCU_ConstP./*@>28344*/pooled32/*@>23788*/[/*@>23783*/(uint32_T)/*@>23785*/rowIdx];
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	4a35      	ldr	r2, [pc, #212]	; (8003d50 <FUNC_Transmission+0x840>)
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003c80:	4b2f      	ldr	r3, [pc, #188]	; (8003d40 <FUNC_Transmission+0x830>)
 8003c82:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
    /*@>2473e*/VCU_B./*@>27f57*/Logic_p/*@>1dbad*/[/*@>1fed7*/1U]/*@>1dbac*/ = /*@>24f7c*/VCU_ConstP./*@>28347*/pooled32/*@>23791*/[/*@>2378d*/rowIdx/*@>2378a*/ + /*@>2378e*/8U];
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	3308      	adds	r3, #8
 8003c8a:	4a31      	ldr	r2, [pc, #196]	; (8003d50 <FUNC_Transmission+0x840>)
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003c92:	4b2b      	ldr	r3, [pc, #172]	; (8003d40 <FUNC_Transmission+0x830>)
 8003c94:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
    /* CombinatorialLogic: '<S182>/Logic' incorporates:
 *  S-Function (sdspcount2): '<S144>/Counter1'
 */
    /*@>24768*/VCU_B./*@>27f6c*/Counter1_a/*@>7e10*/ = /*@>1fafd*/false;
 8003c98:	4b29      	ldr	r3, [pc, #164]	; (8003d40 <FUNC_Transmission+0x830>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
    /* S-Function (sdspcount2): '<S144>/Counter1' */
    /*@>7e14*/if (/*@>24774*/VCU_B./*@>27f72*/LogicalOperator_d0) {
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <FUNC_Transmission+0x830>)
 8003ca2:	f893 37ea 	ldrb.w	r3, [r3, #2026]	; 0x7ea
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <FUNC_Transmission+0x7a2>
        /*@>25145*/VCU_DW./*@>283d4*/Counter1_Count_m/*@>7e18*/ = /*@>26bcd*/0U;
 8003caa:	4b26      	ldr	r3, [pc, #152]	; (8003d44 <FUNC_Transmission+0x834>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    }
    /*@>7e2e*/if (/*@>24786*/VCU_B./*@>27f7b*/Logic_p/*@>23796*/[/*@>23793*/0]) {
 8003cb2:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <FUNC_Transmission+0x830>)
 8003cb4:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d011      	beq.n	8003ce0 <FUNC_Transmission+0x7d0>
        /*@>1d684*/if (/*@>2514b*/VCU_DW./*@>283d7*/Counter1_Count_m/*@>7e33*/ < /*@>1fda7*/60) {
 8003cbc:	4b21      	ldr	r3, [pc, #132]	; (8003d44 <FUNC_Transmission+0x834>)
 8003cbe:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8003cc2:	2b3b      	cmp	r3, #59	; 0x3b
 8003cc4:	d808      	bhi.n	8003cd8 <FUNC_Transmission+0x7c8>
            /*@>2515d*/VCU_DW./*@>283e0*/Counter1_Count_m/*@>26c2e*/++;
 8003cc6:	4b1f      	ldr	r3, [pc, #124]	; (8003d44 <FUNC_Transmission+0x834>)
 8003cc8:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8003ccc:	3301      	adds	r3, #1
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	4b1c      	ldr	r3, [pc, #112]	; (8003d44 <FUNC_Transmission+0x834>)
 8003cd2:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8003cd6:	e003      	b.n	8003ce0 <FUNC_Transmission+0x7d0>
        } else {
            /*@>25157*/VCU_DW./*@>283dd*/Counter1_Count_m/*@>7e3a*/ = /*@>26bd0*/0U;
 8003cd8:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <FUNC_Transmission+0x834>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
        }
    }
    /*@>7e4c*/if (/*@>25151*/VCU_DW./*@>283da*/Counter1_Count_m/*@>7e4b*/ == /*@>1fda8*/1) {
 8003ce0:	4b18      	ldr	r3, [pc, #96]	; (8003d44 <FUNC_Transmission+0x834>)
 8003ce2:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d103      	bne.n	8003cf2 <FUNC_Transmission+0x7e2>
        /* CombinatorialLogic: '<S182>/Logic' */
        /*@>2479e*/VCU_B./*@>27f87*/Counter1_a/*@>7e50*/ = /*@>1fb0c*/true;
 8003cea:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <FUNC_Transmission+0x830>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
 *
 * Block description for '<S180>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>247aa*/VCU_B./*@>27f8d*/Uk1_og/*@>7e93*/ = /*@>25169*/VCU_DW./*@>283e3*/DelayInput1_DSTATE_b;
 8003cf2:	4b14      	ldr	r3, [pc, #80]	; (8003d44 <FUNC_Transmission+0x834>)
 8003cf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003cf8:	4911      	ldr	r1, [pc, #68]	; (8003d40 <FUNC_Transmission+0x830>)
 8003cfa:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8
    /* RelationalOperator: '<S180>/FixPt Relational Operator' */
    /*@>247b6*/VCU_B./*@>27f93*/FixPtRelationalOperator_p/*@>765d*/ = (/*@>247bc*/VCU_B./*@>27f96*/DataTypeConversion3/*@>765c*/ > /*@>247c2*/VCU_B./*@>27f99*/Uk1_og);
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <FUNC_Transmission+0x830>)
 8003d00:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003d04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d08:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <FUNC_Transmission+0x830>)
 8003d0a:	e9d3 2372 	ldrd	r2, r3, [r3, #456]	; 0x1c8
 8003d0e:	2401      	movs	r4, #1
 8003d10:	f00b f93a 	bl	800ef88 <__aeabi_dcmpgt>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <FUNC_Transmission+0x80e>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	461c      	mov	r4, r3
 8003d1e:	b2e3      	uxtb	r3, r4
 8003d20:	461a      	mov	r2, r3
 8003d22:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <FUNC_Transmission+0x830>)
 8003d24:	f883 27ef 	strb.w	r2, [r3, #2031]	; 0x7ef
    /* CombinatorialLogic: '<S182>/Logic' incorporates:
 *  Logic: '<S144>/Logical Operator2'
 *  Memory: '<S182>/Memory'
 */
    /*@>247c8*/VCU_B./*@>27f9c*/LogicalOperator2_b/*@>7663*/ = (/*@>247ce*/VCU_B./*@>27f9f*/LogicalOperator_d0/*@>7662*/ || /*@>247d4*/VCU_B./*@>27fa2*/FixPtRelationalOperator_p);
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <FUNC_Transmission+0x830>)
 8003d2a:	f893 37ea 	ldrb.w	r3, [r3, #2026]	; 0x7ea
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d104      	bne.n	8003d3c <FUNC_Transmission+0x82c>
 8003d32:	4b03      	ldr	r3, [pc, #12]	; (8003d40 <FUNC_Transmission+0x830>)
 8003d34:	f893 37ef 	ldrb.w	r3, [r3, #2031]	; 0x7ef
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00b      	beq.n	8003d54 <FUNC_Transmission+0x844>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e00a      	b.n	8003d56 <FUNC_Transmission+0x846>
 8003d40:	200008a8 	.word	0x200008a8
 8003d44:	200010c8 	.word	0x200010c8
 8003d48:	40080000 	.word	0x40080000
 8003d4c:	402e0000 	.word	0x402e0000
 8003d50:	0800f1e8 	.word	0x0800f1e8
 8003d54:	2300      	movs	r3, #0
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	4bab      	ldr	r3, [pc, #684]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003d5a:	f883 27f0 	strb.w	r2, [r3, #2032]	; 0x7f0
    /*@>247e0*/VCU_B./*@>27fa8*/Memory_db/*@>7665*/ = /*@>25175*/VCU_DW./*@>283e9*/Memory_PreviousInput_n;
 8003d5e:	4bab      	ldr	r3, [pc, #684]	; (800400c <FUNC_Transmission+0xafc>)
 8003d60:	f893 215a 	ldrb.w	r2, [r3, #346]	; 0x15a
 8003d64:	4ba8      	ldr	r3, [pc, #672]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003d66:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
    /*@>1fef6*/rowIdx/*@>1dc84*/ = /*@>247e6*/VCU_B./*@>27fab*/Counter1_a;
 8003d6a:	4ba7      	ldr	r3, [pc, #668]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003d6c:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8003d70:	617b      	str	r3, [r7, #20]
    /*@>1fefa*/rowIdx/*@>1dcab*/ = /*@>2072c*/(int32_T)((/*@>20729*/(uint32_T)/*@>1fefc*/rowIdx/*@>201a2*/ << /*@>1fefe*/1)/*@>201a0*/ + /*@>247ec*/VCU_B./*@>27fae*/LogicalOperator2_b);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4aa4      	ldr	r2, [pc, #656]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003d78:	f892 27f0 	ldrb.w	r2, [r2, #2032]	; 0x7f0
 8003d7c:	4413      	add	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
    /*@>1ff01*/rowIdx/*@>1dcd2*/ = /*@>2073c*/(int32_T)((/*@>20739*/(uint32_T)/*@>1ff03*/rowIdx/*@>20198*/ << /*@>1ff05*/1)/*@>20196*/ + /*@>247f8*/VCU_B./*@>27fb4*/Memory_db);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	4aa0      	ldr	r2, [pc, #640]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003d86:	f892 27f1 	ldrb.w	r2, [r2, #2033]	; 0x7f1
 8003d8a:	4413      	add	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
    /*@>24804*/VCU_B./*@>27fba*/Logic_k/*@>1dce8*/[/*@>1ff0a*/0U]/*@>1dce7*/ = /*@>24f8e*/VCU_ConstP./*@>28350*/pooled32/*@>237b2*/[/*@>237ad*/(uint32_T)/*@>237af*/rowIdx];
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	4a9f      	ldr	r2, [pc, #636]	; (8004010 <FUNC_Transmission+0xb00>)
 8003d92:	4413      	add	r3, r2
 8003d94:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003d98:	4b9b      	ldr	r3, [pc, #620]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003d9a:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
    /*@>2481c*/VCU_B./*@>27fc6*/Logic_k/*@>1dcfb*/[/*@>1ff0f*/1U]/*@>1dcfa*/ = /*@>24f94*/VCU_ConstP./*@>28353*/pooled32/*@>237bb*/[/*@>237b7*/rowIdx/*@>237b4*/ + /*@>237b8*/8U];
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	3308      	adds	r3, #8
 8003da2:	4a9b      	ldr	r2, [pc, #620]	; (8004010 <FUNC_Transmission+0xb00>)
 8003da4:	4413      	add	r3, r2
 8003da6:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8003daa:	4b97      	ldr	r3, [pc, #604]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003dac:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
    /* DataTypeConversion: '<S137>/Data Type Conversion2' */
    /*@>24834*/VCU_B./*@>27fd2*/Ignition_Cut_g/*@>7669*/ = /*@>2483a*/VCU_B./*@>27fd5*/Logic_k/*@>237c0*/[/*@>237bd*/0];
 8003db0:	4b95      	ldr	r3, [pc, #596]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003db2:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f00a fde0 	bl	800e97c <__aeabi_ui2d>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4991      	ldr	r1, [pc, #580]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003dc2:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
    /* DataTypeConversion: '<S137>/Data Type Conversion8' */
    /*@>24846*/VCU_B./*@>27fdb*/LC_Mdes_bl/*@>766c*/ = /*@>2484c*/VCU_B./*@>27fde*/Logic_k/*@>237c5*/[/*@>237c2*/0];
 8003dc6:	4b90      	ldr	r3, [pc, #576]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003dc8:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f00a fdd5 	bl	800e97c <__aeabi_ui2d>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	498c      	ldr	r1, [pc, #560]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003dd8:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
    /* S-Function (sdspcount2): '<S143>/Counter' */
    /*@>24858*/VCU_B./*@>27fe4*/Counter_j/*@>7ef1*/ = /*@>1fb15*/false;
 8003ddc:	4b8a      	ldr	r3, [pc, #552]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
    /*@>7ef5*/if (/*@>24864*/VCU_B./*@>27fea*/LogicalOperator_c) {
 8003de4:	4b88      	ldr	r3, [pc, #544]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003de6:	f893 37d6 	ldrb.w	r3, [r3, #2006]	; 0x7d6
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <FUNC_Transmission+0x8e6>
        /*@>251a5*/VCU_DW./*@>283fe*/Counter_Count_b/*@>7ef9*/ = /*@>26bd9*/0U;
 8003dee:	4b87      	ldr	r3, [pc, #540]	; (800400c <FUNC_Transmission+0xafc>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }
    /*@>7f0f*/if (/*@>24876*/VCU_B./*@>27ff3*/Logic_il/*@>237d1*/[/*@>237ce*/0]) {
 8003df6:	4b84      	ldr	r3, [pc, #528]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003df8:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d012      	beq.n	8003e26 <FUNC_Transmission+0x916>
        /*@>1d68e*/if (/*@>251ab*/VCU_DW./*@>28401*/Counter_Count_b/*@>7f14*/ < /*@>1fdae*/500) {
 8003e00:	4b82      	ldr	r3, [pc, #520]	; (800400c <FUNC_Transmission+0xafc>)
 8003e02:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8003e06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e0a:	d208      	bcs.n	8003e1e <FUNC_Transmission+0x90e>
            /*@>251bd*/VCU_DW./*@>2840a*/Counter_Count_b/*@>26c30*/++;
 8003e0c:	4b7f      	ldr	r3, [pc, #508]	; (800400c <FUNC_Transmission+0xafc>)
 8003e0e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8003e12:	3301      	adds	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	4b7d      	ldr	r3, [pc, #500]	; (800400c <FUNC_Transmission+0xafc>)
 8003e18:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8003e1c:	e003      	b.n	8003e26 <FUNC_Transmission+0x916>
        } else {
            /*@>251b7*/VCU_DW./*@>28407*/Counter_Count_b/*@>7f1b*/ = /*@>26bdc*/0U;
 8003e1e:	4b7b      	ldr	r3, [pc, #492]	; (800400c <FUNC_Transmission+0xafc>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
        }
    }
    /*@>7f2d*/if (/*@>251b1*/VCU_DW./*@>28404*/Counter_Count_b/*@>7f2c*/ == /*@>1fdb2*/500) {
 8003e26:	4b79      	ldr	r3, [pc, #484]	; (800400c <FUNC_Transmission+0xafc>)
 8003e28:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8003e2c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e30:	d103      	bne.n	8003e3a <FUNC_Transmission+0x92a>
        /*@>24894*/VCU_B./*@>28002*/Counter_j/*@>7f31*/ = /*@>1fb24*/true;
 8003e32:	4b75      	ldr	r3, [pc, #468]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
    }
    /* End of S-Function (sdspcount2): '<S143>/Counter' */

    /* S-Function (sdspcount2): '<S144>/Counter' */
    /*@>248a0*/VCU_B./*@>28008*/Counter_a/*@>7f76*/ = /*@>1fb29*/false;
 8003e3a:	4b73      	ldr	r3, [pc, #460]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 27f5 	strb.w	r2, [r3, #2037]	; 0x7f5
    /*@>7f7a*/if (/*@>248a6*/VCU_B./*@>2800b*/LogicalOperator_d0) {
 8003e42:	4b71      	ldr	r3, [pc, #452]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003e44:	f893 37ea 	ldrb.w	r3, [r3, #2026]	; 0x7ea
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <FUNC_Transmission+0x944>
        /*@>251cf*/VCU_DW./*@>28410*/Counter_Count_n/*@>7f7e*/ = /*@>26bdf*/0U;
 8003e4c:	4b6f      	ldr	r3, [pc, #444]	; (800400c <FUNC_Transmission+0xafc>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    }
    /*@>7f94*/if (/*@>248b2*/VCU_B./*@>28011*/Logic_p/*@>237e9*/[/*@>237e6*/0]) {
 8003e54:	4b6c      	ldr	r3, [pc, #432]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003e56:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d011      	beq.n	8003e82 <FUNC_Transmission+0x972>
        /*@>1d698*/if (/*@>251f3*/VCU_DW./*@>2841f*/Counter_Count_n/*@>7f99*/ < /*@>1fdb5*/200) {
 8003e5e:	4b6b      	ldr	r3, [pc, #428]	; (800400c <FUNC_Transmission+0xafc>)
 8003e60:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8003e64:	2bc7      	cmp	r3, #199	; 0xc7
 8003e66:	d808      	bhi.n	8003e7a <FUNC_Transmission+0x96a>
            /*@>25205*/VCU_DW./*@>28428*/Counter_Count_n/*@>26c31*/++;
 8003e68:	4b68      	ldr	r3, [pc, #416]	; (800400c <FUNC_Transmission+0xafc>)
 8003e6a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8003e6e:	3301      	adds	r3, #1
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	4b66      	ldr	r3, [pc, #408]	; (800400c <FUNC_Transmission+0xafc>)
 8003e74:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 8003e78:	e003      	b.n	8003e82 <FUNC_Transmission+0x972>
        } else {
            /*@>251ff*/VCU_DW./*@>28425*/Counter_Count_n/*@>7fa0*/ = /*@>26be5*/0U;
 8003e7a:	4b64      	ldr	r3, [pc, #400]	; (800400c <FUNC_Transmission+0xafc>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
        }
    }
    /*@>7fb2*/if (/*@>251f9*/VCU_DW./*@>28422*/Counter_Count_n/*@>7fb1*/ == /*@>1fdb9*/100) {
 8003e82:	4b62      	ldr	r3, [pc, #392]	; (800400c <FUNC_Transmission+0xafc>)
 8003e84:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8003e88:	2b64      	cmp	r3, #100	; 0x64
 8003e8a:	d103      	bne.n	8003e94 <FUNC_Transmission+0x984>
        /*@>248c4*/VCU_B./*@>2801a*/Counter_a/*@>7fb6*/ = /*@>1fb38*/true;
 8003e8c:	4b5e      	ldr	r3, [pc, #376]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 27f5 	strb.w	r2, [r3, #2037]	; 0x7f5
    }
    /* End of S-Function (sdspcount2): '<S144>/Counter' */

    /* DataTypeConversion: '<S137>/Data Type Conversion' */
    /*@>248d0*/VCU_B./*@>28020*/VOVG_ShiftUp_d/*@>7671*/ = /*@>248d6*/VCU_B./*@>28023*/Logic_p/*@>237ee*/[/*@>237eb*/0];
 8003e94:	4b5c      	ldr	r3, [pc, #368]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003e96:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f00a fd6e 	bl	800e97c <__aeabi_ui2d>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4958      	ldr	r1, [pc, #352]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003ea6:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
    /* Switch: '<S140>/Switch' */
    /*@>1d6a2*/if (/*@>248dc*/VCU_B./*@>28026*/Logic_il/*@>237f3*/[/*@>237f0*/0]) {
 8003eaa:	4b57      	ldr	r3, [pc, #348]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003eac:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d006      	beq.n	8003ec2 <FUNC_Transmission+0x9b2>
        /* MinMax: '<S140>/MinMax' incorporates:
 *  Constant: '<S140>/Constant'
 */
        /*@>248ee*/VCU_B./*@>2802f*/Switch_h/*@>1d6a5*/ = /*@>1fdaf*/20.0;
 8003eb4:	4954      	ldr	r1, [pc, #336]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	4b56      	ldr	r3, [pc, #344]	; (8004014 <FUNC_Transmission+0xb04>)
 8003ebc:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
 8003ec0:	e006      	b.n	8003ed0 <FUNC_Transmission+0x9c0>
    } else {
        /* MinMax: '<S140>/MinMax' incorporates:
 *  Constant: '<S140>/Constant1'
 */
        /*@>248e8*/VCU_B./*@>2802c*/Switch_h/*@>7ffd*/ = /*@>1fdb0*/0.0;
 8003ec2:	4951      	ldr	r1, [pc, #324]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
    }
    /* End of Switch: '<S140>/Switch' */

    /* Memory: '<S142>/Memory' */
    /*@>248f4*/VCU_B./*@>28032*/Memory_od/*@>7674*/ = /*@>25235*/VCU_DW./*@>2843a*/Memory_PreviousInput_i;
 8003ed0:	4b4e      	ldr	r3, [pc, #312]	; (800400c <FUNC_Transmission+0xafc>)
 8003ed2:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
 8003ed6:	4b4c      	ldr	r3, [pc, #304]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003ed8:	f883 27f6 	strb.w	r2, [r3, #2038]	; 0x7f6
    /* Sum: '<S153>/Add' */
    /*@>24900*/VCU_B./*@>28038*/Add_o/*@>a6e9*/ = /*@>24906*/VCU_B./*@>2803b*/Add1_k/*@>a6e6*/ + /*@>2490c*/VCU_B./*@>2803e*/Add1_de;
 8003edc:	4b4a      	ldr	r3, [pc, #296]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003ede:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8003ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ee6:	4b48      	ldr	r3, [pc, #288]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003ee8:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f00a fc08 	bl	800e704 <__adddf3>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4943      	ldr	r1, [pc, #268]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003efa:	e9c1 237c 	strd	r2, r3, [r1, #496]	; 0x1f0
    /* Gain: '<S153>/Gain' */
    /*@>2491e*/VCU_B./*@>28047*/Gain_g/*@>7681*/ = /*@>1fdb4*/0.5/*@>20170*/ * /*@>24924*/VCU_B./*@>2804a*/Add_o;
 8003efe:	4b42      	ldr	r3, [pc, #264]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003f00:	e9d3 237c 	ldrd	r2, r3, [r3, #496]	; 0x1f0
 8003f04:	4610      	mov	r0, r2
 8003f06:	4619      	mov	r1, r3
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	4b42      	ldr	r3, [pc, #264]	; (8004018 <FUNC_Transmission+0xb08>)
 8003f0e:	f00a fdab 	bl	800ea68 <__aeabi_dmul>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	493c      	ldr	r1, [pc, #240]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003f18:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8
    /* Sum: '<S153>/Add1' */
    /*@>24930*/VCU_B./*@>28050*/Add1_f/*@>a6ee*/ = /*@>24936*/VCU_B./*@>28053*/Add1_ks/*@>a6eb*/ + /*@>2493c*/VCU_B./*@>28056*/Add1_eq;
 8003f1c:	4b3a      	ldr	r3, [pc, #232]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003f1e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003f22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f26:	4b38      	ldr	r3, [pc, #224]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003f28:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	f00a fbe8 	bl	800e704 <__adddf3>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4933      	ldr	r1, [pc, #204]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003f3a:	e9c1 2380 	strd	r2, r3, [r1, #512]	; 0x200
    /* MinMax: '<S153>/MinMax' incorporates:
 *  Gain: '<S153>/Gain1'
 */
    /*@>24954*/VCU_B./*@>28062*/Gain1/*@>768e*/ = /*@>1fdb6*/0.5/*@>2016c*/ * /*@>2495a*/VCU_B./*@>28065*/Add1_f;
 8003f3e:	4b32      	ldr	r3, [pc, #200]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003f40:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8003f44:	4610      	mov	r0, r2
 8003f46:	4619      	mov	r1, r3
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	4b32      	ldr	r3, [pc, #200]	; (8004018 <FUNC_Transmission+0xb08>)
 8003f4e:	f00a fd8b 	bl	800ea68 <__aeabi_dmul>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	492c      	ldr	r1, [pc, #176]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003f58:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
    /* Sum: '<S153>/Add2' */
    /*@>24966*/VCU_B./*@>2806b*/Add2/*@>a6f3*/ = /*@>2496c*/VCU_B./*@>2806e*/Gain1/*@>a6f0*/ - /*@>24972*/VCU_B./*@>28071*/Gain_g;
 8003f5c:	4b2a      	ldr	r3, [pc, #168]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003f5e:	e9d3 0182 	ldrd	r0, r1, [r3, #520]	; 0x208
 8003f62:	4b29      	ldr	r3, [pc, #164]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003f64:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 8003f68:	f00a fbca 	bl	800e700 <__aeabi_dsub>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4925      	ldr	r1, [pc, #148]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003f72:	e9c1 2384 	strd	r2, r3, [r1, #528]	; 0x210
    /* MinMax: '<S153>/MinMax' */
    /*@>20a92*/if ((/*@>20f18*/0.001/*@>20a8b*/ > /*@>24984*/VCU_B./*@>2807a*/Gain1)/*@>20a8e*/ || /*@>2296e*/rtIsNaN(/*@>2498a*/VCU_B./*@>2807d*/Gain1)) {
 8003f76:	4b24      	ldr	r3, [pc, #144]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003f78:	e9d3 2382 	ldrd	r2, r3, [r3, #520]	; 0x208
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	a31f      	add	r3, pc, #124	; (adr r3, 8004000 <FUNC_Transmission+0xaf0>)
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f00a ffe1 	bl	800ef4c <__aeabi_dcmplt>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d109      	bne.n	8003fa4 <FUNC_Transmission+0xa94>
 8003f90:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003f92:	e9d3 2382 	ldrd	r2, r3, [r3, #520]	; 0x208
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	f002 fac1 	bl	8006520 <rtIsNaN>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d006      	beq.n	8003fb2 <FUNC_Transmission+0xaa2>
        /*@>2499c*/VCU_B./*@>28086*/MinMax_o/*@>20a94*/ = /*@>20f1a*/0.001;
 8003fa4:	4918      	ldr	r1, [pc, #96]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003fa6:	a316      	add	r3, pc, #88	; (adr r3, 8004000 <FUNC_Transmission+0xaf0>)
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
 8003fb0:	e005      	b.n	8003fbe <FUNC_Transmission+0xaae>
    } else {
        /*@>24990*/VCU_B./*@>28080*/MinMax_o/*@>20a91*/ = /*@>24996*/VCU_B./*@>28083*/Gain1;
 8003fb2:	4b15      	ldr	r3, [pc, #84]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003fb4:	e9d3 2382 	ldrd	r2, r3, [r3, #520]	; 0x208
 8003fb8:	4913      	ldr	r1, [pc, #76]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003fba:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
    }
    /* Saturate: '<S153>/Saturation' incorporates:
 *  Product: '<S153>/Divide'
 */
    /*@>249cc*/VCU_B./*@>2809e*/Divide/*@>769b*/ = /*@>249d2*/VCU_B./*@>280a1*/Add2/*@>20168*/ / /*@>249d8*/VCU_B./*@>280a4*/MinMax_o;
 8003fbe:	4b12      	ldr	r3, [pc, #72]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003fc0:	e9d3 0184 	ldrd	r0, r1, [r3, #528]	; 0x210
 8003fc4:	4b10      	ldr	r3, [pc, #64]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003fc6:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	; 0x218
 8003fca:	f00a fe77 	bl	800ecbc <__aeabi_ddiv>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	490d      	ldr	r1, [pc, #52]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003fd4:	e9c1 2388 	strd	r2, r3, [r1, #544]	; 0x220
    /*@>20a51*/if (/*@>249de*/VCU_B./*@>280a7*/Divide/*@>20a4c*/ > /*@>20f1c*/0.5) {
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003fda:	e9d3 2388 	ldrd	r2, r3, [r3, #544]	; 0x220
 8003fde:	4610      	mov	r0, r2
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <FUNC_Transmission+0xb08>)
 8003fe8:	f00a ffce 	bl	800ef88 <__aeabi_dcmpgt>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d014      	beq.n	800401c <FUNC_Transmission+0xb0c>
        /*@>249f0*/VCU_B./*@>280b0*/Saturation/*@>20a53*/ = /*@>20f22*/0.5;
 8003ff2:	4905      	ldr	r1, [pc, #20]	; (8004008 <FUNC_Transmission+0xaf8>)
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	4b07      	ldr	r3, [pc, #28]	; (8004018 <FUNC_Transmission+0xb08>)
 8003ffa:	e9c1 238a 	strd	r2, r3, [r1, #552]	; 0x228
 8003ffe:	e027      	b.n	8004050 <FUNC_Transmission+0xb40>
 8004000:	d2f1a9fc 	.word	0xd2f1a9fc
 8004004:	3f50624d 	.word	0x3f50624d
 8004008:	200008a8 	.word	0x200008a8
 800400c:	200010c8 	.word	0x200010c8
 8004010:	0800f1e8 	.word	0x0800f1e8
 8004014:	40340000 	.word	0x40340000
 8004018:	3fe00000 	.word	0x3fe00000
    } else /*@>20a54*/if (/*@>249ea*/VCU_B./*@>280ad*/Divide/*@>20a49*/ < /*@>20f1e*/-0.5) {
 800401c:	4baa      	ldr	r3, [pc, #680]	; (80042c8 <FUNC_Transmission+0xdb8>)
 800401e:	e9d3 2388 	ldrd	r2, r3, [r3, #544]	; 0x220
 8004022:	4610      	mov	r0, r2
 8004024:	4619      	mov	r1, r3
 8004026:	f04f 0200 	mov.w	r2, #0
 800402a:	4ba8      	ldr	r3, [pc, #672]	; (80042cc <FUNC_Transmission+0xdbc>)
 800402c:	f00a ff8e 	bl	800ef4c <__aeabi_dcmplt>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d006      	beq.n	8004044 <FUNC_Transmission+0xb34>
        /*@>24a08*/VCU_B./*@>280bc*/Saturation/*@>20a56*/ = /*@>20f20*/-0.5;
 8004036:	49a4      	ldr	r1, [pc, #656]	; (80042c8 <FUNC_Transmission+0xdb8>)
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	4ba3      	ldr	r3, [pc, #652]	; (80042cc <FUNC_Transmission+0xdbc>)
 800403e:	e9c1 238a 	strd	r2, r3, [r1, #552]	; 0x228
 8004042:	e005      	b.n	8004050 <FUNC_Transmission+0xb40>
    } else {
        /*@>249fc*/VCU_B./*@>280b6*/Saturation/*@>20a50*/ = /*@>24a02*/VCU_B./*@>280b9*/Divide;
 8004044:	4ba0      	ldr	r3, [pc, #640]	; (80042c8 <FUNC_Transmission+0xdb8>)
 8004046:	e9d3 2388 	ldrd	r2, r3, [r3, #544]	; 0x220
 800404a:	499f      	ldr	r1, [pc, #636]	; (80042c8 <FUNC_Transmission+0xdb8>)
 800404c:	e9c1 238a 	strd	r2, r3, [r1, #552]	; 0x228
    /* End of Saturate: '<S153>/Saturation' */

    /* RelationalOperator: '<S142>/Relational Operator1' incorporates:
 *  Constant: '<S142>/Constant'
 */
    /*@>24a1a*/VCU_B./*@>280c5*/RelationalOperator1_d/*@>76a5*/ = (/*@>24a20*/VCU_B./*@>280c8*/x_clutch_STW/*@>76a4*/ <= /*@>1fdc0*/15.0);
 8004050:	4b9d      	ldr	r3, [pc, #628]	; (80042c8 <FUNC_Transmission+0xdb8>)
 8004052:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8004056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405a:	2101      	movs	r1, #1
 800405c:	460c      	mov	r4, r1
 800405e:	4610      	mov	r0, r2
 8004060:	4619      	mov	r1, r3
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	4b9a      	ldr	r3, [pc, #616]	; (80042d0 <FUNC_Transmission+0xdc0>)
 8004068:	f00a ff7a 	bl	800ef60 <__aeabi_dcmple>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <FUNC_Transmission+0xb66>
 8004072:	2300      	movs	r3, #0
 8004074:	461c      	mov	r4, r3
 8004076:	b2e3      	uxtb	r3, r4
 8004078:	461a      	mov	r2, r3
 800407a:	4b93      	ldr	r3, [pc, #588]	; (80042c8 <FUNC_Transmission+0xdb8>)
 800407c:	f883 27f7 	strb.w	r2, [r3, #2039]	; 0x7f7
    /* Outputs for Enabled SubSystem: '<S142>/Clutch Pos calc' incorporates:
 *  EnablePort: '<S150>/Enable'
 */
    /*@>76a7*/if (/*@>24a32*/VCU_B./*@>280d1*/RelationalOperator1_d) {
 8004080:	4b91      	ldr	r3, [pc, #580]	; (80042c8 <FUNC_Transmission+0xdb8>)
 8004082:	f893 37f7 	ldrb.w	r3, [r3, #2039]	; 0x7f7
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 8182 	beq.w	8004390 <FUNC_Transmission+0xe80>
        /*@>76aa*/if (!/*@<76a9*//*@>25247*/VCU_DW./*@>28443*/ClutchPoscalc_MODE) {
 800408c:	4b91      	ldr	r3, [pc, #580]	; (80042d4 <FUNC_Transmission+0xdc4>)
 800408e:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 8004092:	2b00      	cmp	r3, #0
 8004094:	d103      	bne.n	800409e <FUNC_Transmission+0xb8e>
            /*@>2524d*/VCU_DW./*@>28446*/ClutchPoscalc_MODE/*@>76ac*/ = /*@>1f8e6*/true;
 8004096:	4b8f      	ldr	r3, [pc, #572]	; (80042d4 <FUNC_Transmission+0xdc4>)
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
        }
        /* MinMax: '<S140>/MinMax' incorporates:
 *  Memory: '<S150>/Memory1'
 */
        /*@>24a68*/VCU_B./*@>280ec*/Memory1/*@>8028*/ = /*@>25259*/VCU_DW./*@>2844c*/Memory1_PreviousInput;
 800409e:	4b8d      	ldr	r3, [pc, #564]	; (80042d4 <FUNC_Transmission+0xdc4>)
 80040a0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80040a4:	4988      	ldr	r1, [pc, #544]	; (80042c8 <FUNC_Transmission+0xdb8>)
 80040a6:	e9c1 23a8 	strd	r2, r3, [r1, #672]	; 0x2a0
        /* If: '<S150>/If' incorporates:
 *  Constant: '<S150>/slip_R_Max'
 *  Constant: '<S150>/slip_R_Min'
 */
        /*@>1d6ac*/if (/*@>24a92*/VCU_B./*@>28101*/Saturation/*@>802b*/ < /*@>1fdc5*/0.06) {
 80040aa:	4b87      	ldr	r3, [pc, #540]	; (80042c8 <FUNC_Transmission+0xdb8>)
 80040ac:	e9d3 238a 	ldrd	r2, r3, [r3, #552]	; 0x228
 80040b0:	4610      	mov	r0, r2
 80040b2:	4619      	mov	r1, r3
 80040b4:	a37e      	add	r3, pc, #504	; (adr r3, 80042b0 <FUNC_Transmission+0xda0>)
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	f00a ff47 	bl	800ef4c <__aeabi_dcmplt>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00f      	beq.n	80040e4 <FUNC_Transmission+0xbd4>
 *  ActionPort: '<S156>/Action Port'
 */
            /* MinMax: '<S150>/MinMax' incorporates:
 *  Sum: '<S156>/Add'
 */
            /*@>24ac2*/VCU_B./*@>28119*/Merge/*@>1d6af*/ = /*@>24ac8*/VCU_B./*@>2811c*/Memory1/*@>a7ef*/ - /*@>24ace*/VCU_B./*@>2811f*/Add1_f1;
 80040c4:	4b80      	ldr	r3, [pc, #512]	; (80042c8 <FUNC_Transmission+0xdb8>)
 80040c6:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	; 0x2a0
 80040ca:	4b7f      	ldr	r3, [pc, #508]	; (80042c8 <FUNC_Transmission+0xdb8>)
 80040cc:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f00a fb14 	bl	800e700 <__aeabi_dsub>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	497a      	ldr	r1, [pc, #488]	; (80042c8 <FUNC_Transmission+0xdb8>)
 80040de:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
 80040e2:	e022      	b.n	800412a <FUNC_Transmission+0xc1a>
            /* End of Outputs for SubSystem: '<S150>/If Action Subsystem' */
        } else /*@>1d6bb*/if (/*@>24abc*/VCU_B./*@>28116*/Saturation/*@>8030*/ > /*@>1fdc6*/0.15) {
 80040e4:	4b78      	ldr	r3, [pc, #480]	; (80042c8 <FUNC_Transmission+0xdb8>)
 80040e6:	e9d3 238a 	ldrd	r2, r3, [r3, #552]	; 0x228
 80040ea:	4610      	mov	r0, r2
 80040ec:	4619      	mov	r1, r3
 80040ee:	a372      	add	r3, pc, #456	; (adr r3, 80042b8 <FUNC_Transmission+0xda8>)
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f00a ff48 	bl	800ef88 <__aeabi_dcmpgt>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00f      	beq.n	800411e <FUNC_Transmission+0xc0e>
 *  ActionPort: '<S157>/Action Port'
 */
            /* MinMax: '<S150>/MinMax' incorporates:
 *  Sum: '<S157>/Add'
 */
            /*@>24ae6*/VCU_B./*@>2812b*/Merge/*@>1d6be*/ = /*@>24aec*/VCU_B./*@>2812e*/Add1_f1/*@>a7f4*/ + /*@>24af2*/VCU_B./*@>28131*/Memory1;
 80040fe:	4b72      	ldr	r3, [pc, #456]	; (80042c8 <FUNC_Transmission+0xdb8>)
 8004100:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8004104:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004108:	4b6f      	ldr	r3, [pc, #444]	; (80042c8 <FUNC_Transmission+0xdb8>)
 800410a:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 800410e:	f00a faf9 	bl	800e704 <__adddf3>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	496c      	ldr	r1, [pc, #432]	; (80042c8 <FUNC_Transmission+0xdb8>)
 8004118:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
 800411c:	e005      	b.n	800412a <FUNC_Transmission+0xc1a>
 *  ActionPort: '<S158>/Action Port'
 */
            /* MinMax: '<S150>/MinMax' incorporates:
 *  Inport: '<S158>/x_clutch_in'
 */
            /*@>24ada*/VCU_B./*@>28125*/Merge/*@>a7f2*/ = /*@>24ae0*/VCU_B./*@>28128*/Memory1;
 800411e:	4b6a      	ldr	r3, [pc, #424]	; (80042c8 <FUNC_Transmission+0xdb8>)
 8004120:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 8004124:	4968      	ldr	r1, [pc, #416]	; (80042c8 <FUNC_Transmission+0xdb8>)
 8004126:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
        /* End of If: '<S150>/If' */

        /* RelationalOperator: '<S150>/Relational Operator3' incorporates:
 *  Constant: '<S150>/Clutch_Close_Speedlimit1'
 */
        /*@>24b16*/VCU_B./*@>28143*/RelationalOperator3/*@>8037*/ = (/*@>24b1c*/VCU_B./*@>28146*/Add1_f1/*@>8036*/ <= /*@>1fdc7*/0.01);
 800412a:	4b67      	ldr	r3, [pc, #412]	; (80042c8 <FUNC_Transmission+0xdb8>)
 800412c:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8004130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004134:	2101      	movs	r1, #1
 8004136:	460c      	mov	r4, r1
 8004138:	4610      	mov	r0, r2
 800413a:	4619      	mov	r1, r3
 800413c:	a360      	add	r3, pc, #384	; (adr r3, 80042c0 <FUNC_Transmission+0xdb0>)
 800413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004142:	f00a ff0d 	bl	800ef60 <__aeabi_dcmple>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <FUNC_Transmission+0xc40>
 800414c:	2300      	movs	r3, #0
 800414e:	461c      	mov	r4, r3
 8004150:	b2e3      	uxtb	r3, r4
 8004152:	461a      	mov	r2, r3
 8004154:	4b5c      	ldr	r3, [pc, #368]	; (80042c8 <FUNC_Transmission+0xdb8>)
 8004156:	f883 2803 	strb.w	r2, [r3, #2051]	; 0x803
        /* Switch: '<S150>/Switch3' incorporates:
 *  Constant: '<S150>/Clutch_Close1'
 */
        /*@>8717*/if (/*@>24b2e*/VCU_B./*@>2814f*/RelationalOperator3) {
 800415a:	4b5b      	ldr	r3, [pc, #364]	; (80042c8 <FUNC_Transmission+0xdb8>)
 800415c:	f893 3803 	ldrb.w	r3, [r3, #2051]	; 0x803
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <FUNC_Transmission+0xc64>
            /*@>24b5e*/VCU_B./*@>28167*/Switch3_p/*@>870f*/ = /*@>1fdcc*/0.0;
 8004164:	4958      	ldr	r1, [pc, #352]	; (80042c8 <FUNC_Transmission+0xdb8>)
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	e9c1 23ac 	strd	r2, r3, [r1, #688]	; 0x2b0
 8004172:	e106      	b.n	8004382 <FUNC_Transmission+0xe72>
        } else {
            /* RelationalOperator: '<S150>/Relational Operator2' incorporates:
 *  Constant: '<S150>/Clutch_Close_Speedlimit'
 */
            /*@>24b52*/VCU_B./*@>28161*/RelationalOperator2_c/*@>872d*/ = (/*@>24b58*/VCU_B./*@>28164*/Gain4/*@>872c*/ >= /*@>1fdcb*/50.0);
 8004174:	4b54      	ldr	r3, [pc, #336]	; (80042c8 <FUNC_Transmission+0xdb8>)
 8004176:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	2101      	movs	r1, #1
 8004180:	460c      	mov	r4, r1
 8004182:	4610      	mov	r0, r2
 8004184:	4619      	mov	r1, r3
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	4b53      	ldr	r3, [pc, #332]	; (80042d8 <FUNC_Transmission+0xdc8>)
 800418c:	f00a fef2 	bl	800ef74 <__aeabi_dcmpge>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <FUNC_Transmission+0xc8a>
 8004196:	2300      	movs	r3, #0
 8004198:	461c      	mov	r4, r3
 800419a:	b2e3      	uxtb	r3, r4
 800419c:	461a      	mov	r2, r3
 800419e:	4b4a      	ldr	r3, [pc, #296]	; (80042c8 <FUNC_Transmission+0xdb8>)
 80041a0:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
            /* Switch: '<S150>/Switch2' incorporates:
 *  Constant: '<S150>/Clutch_Close'
 */
            /*@>874b*/if (/*@>24b7c*/VCU_B./*@>28176*/RelationalOperator2_c) {
 80041a4:	4b48      	ldr	r3, [pc, #288]	; (80042c8 <FUNC_Transmission+0xdb8>)
 80041a6:	f893 3804 	ldrb.w	r3, [r3, #2052]	; 0x804
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d007      	beq.n	80041be <FUNC_Transmission+0xcae>
                /*@>24bac*/VCU_B./*@>2818e*/Switch2/*@>8743*/ = /*@>1fdcf*/0.0;
 80041ae:	4946      	ldr	r1, [pc, #280]	; (80042c8 <FUNC_Transmission+0xdb8>)
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	e9c1 23ae 	strd	r2, r3, [r1, #696]	; 0x2b8
 80041bc:	e0db      	b.n	8004376 <FUNC_Transmission+0xe66>
            } else {
                /* RelationalOperator: '<S150>/Relational Operator1' incorporates:
 *  Constant: '<S150>/Clutch_Hold_Speedlimit'
 */
                /*@>24ba0*/VCU_B./*@>28188*/RelationalOperator1_c/*@>8761*/ = (/*@>24ba6*/VCU_B./*@>2818b*/Gain4/*@>8760*/ >= /*@>1fdce*/1.0);
 80041be:	4b42      	ldr	r3, [pc, #264]	; (80042c8 <FUNC_Transmission+0xdb8>)
 80041c0:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80041c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c8:	2101      	movs	r1, #1
 80041ca:	460c      	mov	r4, r1
 80041cc:	4610      	mov	r0, r2
 80041ce:	4619      	mov	r1, r3
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	4b41      	ldr	r3, [pc, #260]	; (80042dc <FUNC_Transmission+0xdcc>)
 80041d6:	f00a fecd 	bl	800ef74 <__aeabi_dcmpge>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <FUNC_Transmission+0xcd4>
 80041e0:	2300      	movs	r3, #0
 80041e2:	461c      	mov	r4, r3
 80041e4:	b2e3      	uxtb	r3, r4
 80041e6:	461a      	mov	r2, r3
 80041e8:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <FUNC_Transmission+0xdb8>)
 80041ea:	f883 2805 	strb.w	r2, [r3, #2053]	; 0x805
                /* Logic: '<S150>/Logical Operator' */
                /*@>24bd6*/VCU_B./*@>281a3*/LogicalOperator_ej/*@>8767*/ = (/*@>24bdc*/VCU_B./*@>281a6*/Memory_od/*@>8766*/ && /*@>24be2*/VCU_B./*@>281a9*/RelationalOperator1_c);
 80041ee:	4b36      	ldr	r3, [pc, #216]	; (80042c8 <FUNC_Transmission+0xdb8>)
 80041f0:	f893 37f6 	ldrb.w	r3, [r3, #2038]	; 0x7f6
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d006      	beq.n	8004206 <FUNC_Transmission+0xcf6>
 80041f8:	4b33      	ldr	r3, [pc, #204]	; (80042c8 <FUNC_Transmission+0xdb8>)
 80041fa:	f893 3805 	ldrb.w	r3, [r3, #2053]	; 0x805
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <FUNC_Transmission+0xcf6>
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <FUNC_Transmission+0xcf8>
 8004206:	2300      	movs	r3, #0
 8004208:	b2da      	uxtb	r2, r3
 800420a:	4b2f      	ldr	r3, [pc, #188]	; (80042c8 <FUNC_Transmission+0xdb8>)
 800420c:	f883 2806 	strb.w	r2, [r3, #2054]	; 0x806
                /* Switch: '<S150>/Switch1' incorporates:
 *  Constant: '<S150>/Init_pos_clutch'
 */
                /*@>8789*/if (/*@>24c00*/VCU_B./*@>281b8*/LogicalOperator_ej) {
 8004210:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <FUNC_Transmission+0xdb8>)
 8004212:	f893 3806 	ldrb.w	r3, [r3, #2054]	; 0x806
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 80a1 	beq.w	800435e <FUNC_Transmission+0xe4e>
                    /* Switch: '<S150>/Switch' */
                    /*@>87c6*/if (/*@>24c36*/VCU_B./*@>281d3*/DataTypeConversion2/*@>87b8*/ >= /*@>1fdd3*/4000.0) {
 800421c:	4b2a      	ldr	r3, [pc, #168]	; (80042c8 <FUNC_Transmission+0xdb8>)
 800421e:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8004222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004226:	4610      	mov	r0, r2
 8004228:	4619      	mov	r1, r3
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	4b2c      	ldr	r3, [pc, #176]	; (80042e0 <FUNC_Transmission+0xdd0>)
 8004230:	f00a fea0 	bl	800ef74 <__aeabi_dcmpge>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <FUNC_Transmission+0xd3a>
                        /* MinMax: '<S150>/MinMax' incorporates:
 *  Constant: '<S150>/Constant Gradient'
 */
                        /*@>24c66*/VCU_B./*@>281eb*/Switch_i/*@>87be*/ = /*@>1fdd5*/0.0;
 800423a:	4923      	ldr	r1, [pc, #140]	; (80042c8 <FUNC_Transmission+0xdb8>)
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	e9c1 23b2 	strd	r2, r3, [r1, #712]	; 0x2c8
 8004248:	e014      	b.n	8004274 <FUNC_Transmission+0xd64>
                    } else {
                        /* Sum: '<S150>/Add' */
                        /*@>24c54*/VCU_B./*@>281e2*/Add_e/*@>a800*/ = /*@>24c5a*/VCU_B./*@>281e5*/Add1_f1/*@>a7fd*/ + /*@>24c60*/VCU_B./*@>281e8*/Memory1;
 800424a:	4b1f      	ldr	r3, [pc, #124]	; (80042c8 <FUNC_Transmission+0xdb8>)
 800424c:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8004250:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004254:	4b1c      	ldr	r3, [pc, #112]	; (80042c8 <FUNC_Transmission+0xdb8>)
 8004256:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 800425a:	f00a fa53 	bl	800e704 <__adddf3>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4919      	ldr	r1, [pc, #100]	; (80042c8 <FUNC_Transmission+0xdb8>)
 8004264:	e9c1 23b8 	strd	r2, r3, [r1, #736]	; 0x2e0
                        /* MinMax: '<S150>/MinMax' */
                        /*@>24c84*/VCU_B./*@>281fa*/Switch_i/*@>87c4*/ = /*@>24c8a*/VCU_B./*@>281fd*/Add_e;
 8004268:	4b17      	ldr	r3, [pc, #92]	; (80042c8 <FUNC_Transmission+0xdb8>)
 800426a:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	; 0x2e0
 800426e:	4916      	ldr	r1, [pc, #88]	; (80042c8 <FUNC_Transmission+0xdb8>)
 8004270:	e9c1 23b2 	strd	r2, r3, [r1, #712]	; 0x2c8
                    }
                    /* End of Switch: '<S150>/Switch' */

                    /* MinMax: '<S150>/MinMax' */
                    /*@>20c2d*/if ((/*@>24ca2*/VCU_B./*@>28209*/Merge/*@>20c26*/ > /*@>24ca8*/VCU_B./*@>2820c*/Switch_i)/*@>20c29*/ || /*@>22970*/rtIsNaN(/*@>24cae*/VCU_B./*@>2820f*/Switch_i)) {
 8004274:	4b14      	ldr	r3, [pc, #80]	; (80042c8 <FUNC_Transmission+0xdb8>)
 8004276:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	; 0x2a8
 800427a:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <FUNC_Transmission+0xdb8>)
 800427c:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8004280:	f00a fe82 	bl	800ef88 <__aeabi_dcmpgt>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d109      	bne.n	800429e <FUNC_Transmission+0xd8e>
 800428a:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <FUNC_Transmission+0xdb8>)
 800428c:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8004290:	4610      	mov	r0, r2
 8004292:	4619      	mov	r1, r3
 8004294:	f002 f944 	bl	8006520 <rtIsNaN>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d022      	beq.n	80042e4 <FUNC_Transmission+0xdd4>
                        /*@>24cc6*/VCU_B./*@>2821b*/MinMax_c/*@>20c2f*/ = /*@>24ccc*/VCU_B./*@>2821e*/Merge;
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <FUNC_Transmission+0xdb8>)
 80042a0:	e9d3 23aa 	ldrd	r2, r3, [r3, #680]	; 0x2a8
 80042a4:	4908      	ldr	r1, [pc, #32]	; (80042c8 <FUNC_Transmission+0xdb8>)
 80042a6:	e9c1 23b4 	strd	r2, r3, [r1, #720]	; 0x2d0
 80042aa:	e021      	b.n	80042f0 <FUNC_Transmission+0xde0>
 80042ac:	f3af 8000 	nop.w
 80042b0:	eb851eb8 	.word	0xeb851eb8
 80042b4:	3faeb851 	.word	0x3faeb851
 80042b8:	33333333 	.word	0x33333333
 80042bc:	3fc33333 	.word	0x3fc33333
 80042c0:	47ae147b 	.word	0x47ae147b
 80042c4:	3f847ae1 	.word	0x3f847ae1
 80042c8:	200008a8 	.word	0x200008a8
 80042cc:	bfe00000 	.word	0xbfe00000
 80042d0:	402e0000 	.word	0x402e0000
 80042d4:	200010c8 	.word	0x200010c8
 80042d8:	40490000 	.word	0x40490000
 80042dc:	3ff00000 	.word	0x3ff00000
 80042e0:	40af4000 	.word	0x40af4000
                    } else {
                        /*@>24cba*/VCU_B./*@>28215*/MinMax_c/*@>20c2c*/ = /*@>24cc0*/VCU_B./*@>28218*/Switch_i;
 80042e4:	4b9e      	ldr	r3, [pc, #632]	; (8004560 <FUNC_Transmission+0x1050>)
 80042e6:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 80042ea:	499d      	ldr	r1, [pc, #628]	; (8004560 <FUNC_Transmission+0x1050>)
 80042ec:	e9c1 23b4 	strd	r2, r3, [r1, #720]	; 0x2d0
                    }
                    /* Saturate: '<S150>/Saturation' */
                    /*@>20bec*/if (/*@>24cf6*/VCU_B./*@>28233*/MinMax_c/*@>20be7*/ > /*@>20f24*/25.0) {
 80042f0:	4b9b      	ldr	r3, [pc, #620]	; (8004560 <FUNC_Transmission+0x1050>)
 80042f2:	e9d3 23b4 	ldrd	r2, r3, [r3, #720]	; 0x2d0
 80042f6:	4610      	mov	r0, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	4b99      	ldr	r3, [pc, #612]	; (8004564 <FUNC_Transmission+0x1054>)
 8004300:	f00a fe42 	bl	800ef88 <__aeabi_dcmpgt>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d006      	beq.n	8004318 <FUNC_Transmission+0xe08>
                        /*@>24d0e*/VCU_B./*@>2823f*/Saturation_f/*@>20bee*/ = /*@>20f2a*/25.0;
 800430a:	4995      	ldr	r1, [pc, #596]	; (8004560 <FUNC_Transmission+0x1050>)
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	4b94      	ldr	r3, [pc, #592]	; (8004564 <FUNC_Transmission+0x1054>)
 8004312:	e9c1 23b6 	strd	r2, r3, [r1, #728]	; 0x2d8
 8004316:	e01b      	b.n	8004350 <FUNC_Transmission+0xe40>
                    } else /*@>20bef*/if (/*@>24d08*/VCU_B./*@>2823c*/MinMax_c/*@>20be4*/ < /*@>20f26*/0.0) {
 8004318:	4b91      	ldr	r3, [pc, #580]	; (8004560 <FUNC_Transmission+0x1050>)
 800431a:	e9d3 23b4 	ldrd	r2, r3, [r3, #720]	; 0x2d0
 800431e:	4610      	mov	r0, r2
 8004320:	4619      	mov	r1, r3
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	f00a fe0f 	bl	800ef4c <__aeabi_dcmplt>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d007      	beq.n	8004344 <FUNC_Transmission+0xe34>
                        /*@>24d38*/VCU_B./*@>28254*/Saturation_f/*@>20bf1*/ = /*@>20f28*/0.0;
 8004334:	498a      	ldr	r1, [pc, #552]	; (8004560 <FUNC_Transmission+0x1050>)
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	e9c1 23b6 	strd	r2, r3, [r1, #728]	; 0x2d8
 8004342:	e005      	b.n	8004350 <FUNC_Transmission+0xe40>
                    } else {
                        /*@>24d2c*/VCU_B./*@>2824e*/Saturation_f/*@>20beb*/ = /*@>24d32*/VCU_B./*@>28251*/MinMax_c;
 8004344:	4b86      	ldr	r3, [pc, #536]	; (8004560 <FUNC_Transmission+0x1050>)
 8004346:	e9d3 23b4 	ldrd	r2, r3, [r3, #720]	; 0x2d0
 800434a:	4985      	ldr	r1, [pc, #532]	; (8004560 <FUNC_Transmission+0x1050>)
 800434c:	e9c1 23b6 	strd	r2, r3, [r1, #728]	; 0x2d8
                    }
                    /* End of Saturate: '<S150>/Saturation' */
                    /*@>24d50*/VCU_B./*@>28260*/Switch1_j/*@>8784*/ = /*@>24d56*/VCU_B./*@>28263*/Saturation_f;
 8004350:	4b83      	ldr	r3, [pc, #524]	; (8004560 <FUNC_Transmission+0x1050>)
 8004352:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 8004356:	4982      	ldr	r1, [pc, #520]	; (8004560 <FUNC_Transmission+0x1050>)
 8004358:	e9c1 23b0 	strd	r2, r3, [r1, #704]	; 0x2c0
 800435c:	e005      	b.n	800436a <FUNC_Transmission+0xe5a>
                } else {
                    /*@>24c30*/VCU_B./*@>281d0*/Switch1_j/*@>8787*/ = /*@>1fdd2*/15.0;
 800435e:	4980      	ldr	r1, [pc, #512]	; (8004560 <FUNC_Transmission+0x1050>)
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	4b80      	ldr	r3, [pc, #512]	; (8004568 <FUNC_Transmission+0x1058>)
 8004366:	e9c1 23b0 	strd	r2, r3, [r1, #704]	; 0x2c0
                }
                /* End of Switch: '<S150>/Switch1' */
                /*@>24c78*/VCU_B./*@>281f4*/Switch2/*@>8749*/ = /*@>24c7e*/VCU_B./*@>281f7*/Switch1_j;
 800436a:	4b7d      	ldr	r3, [pc, #500]	; (8004560 <FUNC_Transmission+0x1050>)
 800436c:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 8004370:	497b      	ldr	r1, [pc, #492]	; (8004560 <FUNC_Transmission+0x1050>)
 8004372:	e9c1 23ae 	strd	r2, r3, [r1, #696]	; 0x2b8
            }
            /* End of Switch: '<S150>/Switch2' */
            /*@>24c06*/VCU_B./*@>281bb*/Switch3_p/*@>8715*/ = /*@>24c0c*/VCU_B./*@>281be*/Switch2;
 8004376:	4b7a      	ldr	r3, [pc, #488]	; (8004560 <FUNC_Transmission+0x1050>)
 8004378:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 800437c:	4978      	ldr	r1, [pc, #480]	; (8004560 <FUNC_Transmission+0x1050>)
 800437e:	e9c1 23ac 	strd	r2, r3, [r1, #688]	; 0x2b0
        }
        /* End of Switch: '<S150>/Switch3' */

        /* Update for Memory: '<S150>/Memory1' */
        /*@>2525f*/VCU_DW./*@>2844f*/Memory1_PreviousInput/*@>8055*/ = /*@>24bb2*/VCU_B./*@>28191*/Switch3_p;
 8004382:	4b77      	ldr	r3, [pc, #476]	; (8004560 <FUNC_Transmission+0x1050>)
 8004384:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 8004388:	4978      	ldr	r1, [pc, #480]	; (800456c <FUNC_Transmission+0x105c>)
 800438a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800438e:	e00e      	b.n	80043ae <FUNC_Transmission+0xe9e>
    } else {
        /*@>76b0*/if (/*@>25241*/VCU_DW./*@>28440*/ClutchPoscalc_MODE) {
 8004390:	4b76      	ldr	r3, [pc, #472]	; (800456c <FUNC_Transmission+0x105c>)
 8004392:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 8004396:	2b00      	cmp	r3, #0
 8004398:	d009      	beq.n	80043ae <FUNC_Transmission+0xe9e>
            /* Disable for MinMax: '<S140>/MinMax' incorporates:
 *  Outport: '<S150>/x_clutch_LC'
 */
            /*@>24a56*/VCU_B./*@>280e3*/Memory1/*@>8061*/ = /*@>1fdc3*/12.5;
 800439a:	4971      	ldr	r1, [pc, #452]	; (8004560 <FUNC_Transmission+0x1050>)
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	4b73      	ldr	r3, [pc, #460]	; (8004570 <FUNC_Transmission+0x1060>)
 80043a2:	e9c1 23a8 	strd	r2, r3, [r1, #672]	; 0x2a0
            /*@>25253*/VCU_DW./*@>28449*/ClutchPoscalc_MODE/*@>76b2*/ = /*@>1f8eb*/false;
 80043a6:	4b71      	ldr	r3, [pc, #452]	; (800456c <FUNC_Transmission+0x105c>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
        }
    }
    /* End of Outputs for SubSystem: '<S142>/Clutch Pos calc' */

    /* MinMax: '<S140>/MinMax' */
    /*@>20aca*/if ((/*@>24a80*/VCU_B./*@>280f8*/x_clutch_STW/*@>20ac3*/ > /*@>24a86*/VCU_B./*@>280fb*/Switch_h)/*@>20ac6*/ || /*@>22972*/rtIsNaN(/*@>24a8c*/VCU_B./*@>280fe*/Switch_h)) {
 80043ae:	4b6c      	ldr	r3, [pc, #432]	; (8004560 <FUNC_Transmission+0x1050>)
 80043b0:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80043b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043b8:	4b69      	ldr	r3, [pc, #420]	; (8004560 <FUNC_Transmission+0x1050>)
 80043ba:	e9d3 237a 	ldrd	r2, r3, [r3, #488]	; 0x1e8
 80043be:	f00a fde3 	bl	800ef88 <__aeabi_dcmpgt>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d109      	bne.n	80043dc <FUNC_Transmission+0xecc>
 80043c8:	4b65      	ldr	r3, [pc, #404]	; (8004560 <FUNC_Transmission+0x1050>)
 80043ca:	e9d3 237a 	ldrd	r2, r3, [r3, #488]	; 0x1e8
 80043ce:	4610      	mov	r0, r2
 80043d0:	4619      	mov	r1, r3
 80043d2:	f002 f8a5 	bl	8006520 <rtIsNaN>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <FUNC_Transmission+0xede>
        /*@>24ab0*/VCU_B./*@>28110*/MinMax_oo/*@>20acc*/ = /*@>24ab6*/VCU_B./*@>28113*/x_clutch_STW;
 80043dc:	4b60      	ldr	r3, [pc, #384]	; (8004560 <FUNC_Transmission+0x1050>)
 80043de:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	495e      	ldr	r1, [pc, #376]	; (8004560 <FUNC_Transmission+0x1050>)
 80043e8:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
 80043ec:	e005      	b.n	80043fa <FUNC_Transmission+0xeea>
    } else {
        /*@>24aa4*/VCU_B./*@>2810a*/MinMax_oo/*@>20ac9*/ = /*@>24aaa*/VCU_B./*@>2810d*/Switch_h;
 80043ee:	4b5c      	ldr	r3, [pc, #368]	; (8004560 <FUNC_Transmission+0x1050>)
 80043f0:	e9d3 237a 	ldrd	r2, r3, [r3, #488]	; 0x1e8
 80043f4:	495a      	ldr	r1, [pc, #360]	; (8004560 <FUNC_Transmission+0x1050>)
 80043f6:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
    }
    /*@>20b02*/if (!/*@<22951*/((/*@>24b04*/VCU_B./*@>2813a*/MinMax_oo/*@>20afb*/ > /*@>24b0a*/VCU_B./*@>2813d*/Memory1)/*@>20afe*/ || /*@>22974*/rtIsNaN(/*@>24b10*/VCU_B./*@>28140*/Memory1))) {
 80043fa:	4b59      	ldr	r3, [pc, #356]	; (8004560 <FUNC_Transmission+0x1050>)
 80043fc:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	; 0x230
 8004400:	4b57      	ldr	r3, [pc, #348]	; (8004560 <FUNC_Transmission+0x1050>)
 8004402:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 8004406:	2401      	movs	r4, #1
 8004408:	f00a fdbe 	bl	800ef88 <__aeabi_dcmpgt>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <FUNC_Transmission+0xf06>
 8004412:	2300      	movs	r3, #0
 8004414:	461c      	mov	r4, r3
 8004416:	b2e3      	uxtb	r3, r4
 8004418:	f083 0301 	eor.w	r3, r3, #1
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00f      	beq.n	8004442 <FUNC_Transmission+0xf32>
 8004422:	4b4f      	ldr	r3, [pc, #316]	; (8004560 <FUNC_Transmission+0x1050>)
 8004424:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 8004428:	4610      	mov	r0, r2
 800442a:	4619      	mov	r1, r3
 800442c:	f002 f878 	bl	8006520 <rtIsNaN>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d105      	bne.n	8004442 <FUNC_Transmission+0xf32>
        /*@>24b22*/VCU_B./*@>28149*/MinMax_oo/*@>20b01*/ = /*@>24b28*/VCU_B./*@>2814c*/Memory1;
 8004436:	4b4a      	ldr	r3, [pc, #296]	; (8004560 <FUNC_Transmission+0x1050>)
 8004438:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 800443c:	4948      	ldr	r1, [pc, #288]	; (8004560 <FUNC_Transmission+0x1050>)
 800443e:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
    }
    /* RelationalOperator: '<S145>/Compare' incorporates:
 *  Constant: '<S145>/Constant'
 */
    /*@>24b46*/VCU_B./*@>2815b*/Compare_k/*@>76b7*/ = (/*@>24b4c*/VCU_B./*@>2815e*/MinMax_oo/*@>76b6*/ > /*@>1fdcd*/1.0);
 8004442:	4b47      	ldr	r3, [pc, #284]	; (8004560 <FUNC_Transmission+0x1050>)
 8004444:	e9d3 238c 	ldrd	r2, r3, [r3, #560]	; 0x230
 8004448:	2101      	movs	r1, #1
 800444a:	460c      	mov	r4, r1
 800444c:	4610      	mov	r0, r2
 800444e:	4619      	mov	r1, r3
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	4b47      	ldr	r3, [pc, #284]	; (8004574 <FUNC_Transmission+0x1064>)
 8004456:	f00a fd97 	bl	800ef88 <__aeabi_dcmpgt>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <FUNC_Transmission+0xf54>
 8004460:	2300      	movs	r3, #0
 8004462:	461c      	mov	r4, r3
 8004464:	b2e3      	uxtb	r3, r4
 8004466:	461a      	mov	r2, r3
 8004468:	4b3d      	ldr	r3, [pc, #244]	; (8004560 <FUNC_Transmission+0x1050>)
 800446a:	f883 27f8 	strb.w	r2, [r3, #2040]	; 0x7f8
    /* DataTypeConversion: '<S137>/Data Type Conversion3' */
    /*@>24b70*/VCU_B./*@>28170*/VOVG_IN_b/*@>76ba*/ = /*@>24b76*/VCU_B./*@>28173*/Compare_k;
 800446e:	4b3c      	ldr	r3, [pc, #240]	; (8004560 <FUNC_Transmission+0x1050>)
 8004470:	f893 37f8 	ldrb.w	r3, [r3, #2040]	; 0x7f8
 8004474:	4618      	mov	r0, r3
 8004476:	f00a fa81 	bl	800e97c <__aeabi_ui2d>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4938      	ldr	r1, [pc, #224]	; (8004560 <FUNC_Transmission+0x1050>)
 8004480:	e9c1 238e 	strd	r2, r3, [r1, #568]	; 0x238
    /* Sum: '<S140>/Add' */
    /*@>24b8e*/VCU_B./*@>2817f*/Add_od/*@>a744*/ = /*@>24b94*/VCU_B./*@>28182*/MinMax_oo/*@>a741*/ - /*@>24b9a*/VCU_B./*@>28185*/x_clutch_b;
 8004484:	4b36      	ldr	r3, [pc, #216]	; (8004560 <FUNC_Transmission+0x1050>)
 8004486:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	; 0x230
 800448a:	4b35      	ldr	r3, [pc, #212]	; (8004560 <FUNC_Transmission+0x1050>)
 800448c:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	f00a f934 	bl	800e700 <__aeabi_dsub>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4930      	ldr	r1, [pc, #192]	; (8004560 <FUNC_Transmission+0x1050>)
 800449e:	e9c1 2390 	strd	r2, r3, [r1, #576]	; 0x240
    /* RelationalOperator: '<S147>/Compare' incorporates:
 *  Constant: '<S147>/Constant'
 */
    /*@>24bca*/VCU_B./*@>2819d*/Compare_fm/*@>76c3*/ = (/*@>24bd0*/VCU_B./*@>281a0*/Add_od/*@>76c2*/ < /*@>1fdd1*/-0.5);
 80044a2:	4b2f      	ldr	r3, [pc, #188]	; (8004560 <FUNC_Transmission+0x1050>)
 80044a4:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	; 0x240
 80044a8:	2101      	movs	r1, #1
 80044aa:	460c      	mov	r4, r1
 80044ac:	4610      	mov	r0, r2
 80044ae:	4619      	mov	r1, r3
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	4b30      	ldr	r3, [pc, #192]	; (8004578 <FUNC_Transmission+0x1068>)
 80044b6:	f00a fd49 	bl	800ef4c <__aeabi_dcmplt>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <FUNC_Transmission+0xfb4>
 80044c0:	2300      	movs	r3, #0
 80044c2:	461c      	mov	r4, r3
 80044c4:	b2e3      	uxtb	r3, r4
 80044c6:	461a      	mov	r2, r3
 80044c8:	4b25      	ldr	r3, [pc, #148]	; (8004560 <FUNC_Transmission+0x1050>)
 80044ca:	f883 27f9 	strb.w	r2, [r3, #2041]	; 0x7f9
    /* Lookup_n-D: '<S140>/Duty Cycle MHJ9' */
    /*@>24bf4*/VCU_B./*@>281b2*/DutyCycleMHJ9_l/*@>a823*/ = /*@>22978*/look1_binlxpw(/*@>24bfa*/VCU_B./*@>281b5*/Add_od, /*@>24fb2*/VCU_ConstP./*@>28362*/pooled23, /*@>24fb8*/VCU_ConstP./*@>28365*/pooled22, /*@>1fcdb*/14U);
 80044ce:	4b24      	ldr	r3, [pc, #144]	; (8004560 <FUNC_Transmission+0x1050>)
 80044d0:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	; 0x240
 80044d4:	210e      	movs	r1, #14
 80044d6:	9100      	str	r1, [sp, #0]
 80044d8:	4610      	mov	r0, r2
 80044da:	4619      	mov	r1, r3
 80044dc:	4a27      	ldr	r2, [pc, #156]	; (800457c <FUNC_Transmission+0x106c>)
 80044de:	4b28      	ldr	r3, [pc, #160]	; (8004580 <FUNC_Transmission+0x1070>)
 80044e0:	f001 fc06 	bl	8005cf0 <look1_binlxpw>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	491d      	ldr	r1, [pc, #116]	; (8004560 <FUNC_Transmission+0x1050>)
 80044ea:	e9c1 2392 	strd	r2, r3, [r1, #584]	; 0x248
    /* Product: '<S140>/Product1' */
    /*@>24c1e*/VCU_B./*@>281c7*/Product1_l/*@>76d1*/ = /*@>24c24*/VCU_B./*@>281ca*/DutyCycleMHJ9_l/*@>20164*/ * /*@>208a5*/(real_T)/*@>24c2a*/VCU_B./*@>281cd*/Compare_fm;
 80044ee:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <FUNC_Transmission+0x1050>)
 80044f0:	e9d3 4592 	ldrd	r4, r5, [r3, #584]	; 0x248
 80044f4:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <FUNC_Transmission+0x1050>)
 80044f6:	f893 37f9 	ldrb.w	r3, [r3, #2041]	; 0x7f9
 80044fa:	4618      	mov	r0, r3
 80044fc:	f00a fa3e 	bl	800e97c <__aeabi_ui2d>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4620      	mov	r0, r4
 8004506:	4629      	mov	r1, r5
 8004508:	f00a faae 	bl	800ea68 <__aeabi_dmul>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4913      	ldr	r1, [pc, #76]	; (8004560 <FUNC_Transmission+0x1050>)
 8004512:	e9c1 2394 	strd	r2, r3, [r1, #592]	; 0x250
    /* RelationalOperator: '<S146>/Compare' incorporates:
 *  Constant: '<S146>/Constant'
 */
    /*@>24c48*/VCU_B./*@>281dc*/Compare_i/*@>76d5*/ = (/*@>24c4e*/VCU_B./*@>281df*/x_clutch_b/*@>76d4*/ > /*@>1fdd6*/20.0);
 8004516:	4b12      	ldr	r3, [pc, #72]	; (8004560 <FUNC_Transmission+0x1050>)
 8004518:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	2101      	movs	r1, #1
 8004522:	460c      	mov	r4, r1
 8004524:	4610      	mov	r0, r2
 8004526:	4619      	mov	r1, r3
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	4b15      	ldr	r3, [pc, #84]	; (8004584 <FUNC_Transmission+0x1074>)
 800452e:	f00a fd2b 	bl	800ef88 <__aeabi_dcmpgt>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <FUNC_Transmission+0x102c>
 8004538:	2300      	movs	r3, #0
 800453a:	461c      	mov	r4, r3
 800453c:	b2e3      	uxtb	r3, r4
 800453e:	461a      	mov	r2, r3
 8004540:	4b07      	ldr	r3, [pc, #28]	; (8004560 <FUNC_Transmission+0x1050>)
 8004542:	f883 27fa 	strb.w	r2, [r3, #2042]	; 0x7fa
    /* Switch: '<S140>/Switch1' incorporates:
 *  Constant: '<S140>/Constant2'
 *  Constant: '<S140>/Constant3'
 */
    /*@>1d6b6*/if (/*@>24c72*/VCU_B./*@>281f1*/Compare_i) {
 8004546:	4b06      	ldr	r3, [pc, #24]	; (8004560 <FUNC_Transmission+0x1050>)
 8004548:	f893 37fa 	ldrb.w	r3, [r3, #2042]	; 0x7fa
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01b      	beq.n	8004588 <FUNC_Transmission+0x1078>
        /*@>24c9c*/VCU_B./*@>28206*/Switch1_k/*@>1d6b9*/ = /*@>1fdd8*/2.0;
 8004550:	4903      	ldr	r1, [pc, #12]	; (8004560 <FUNC_Transmission+0x1050>)
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800455a:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
 800455e:	e019      	b.n	8004594 <FUNC_Transmission+0x1084>
 8004560:	200008a8 	.word	0x200008a8
 8004564:	40390000 	.word	0x40390000
 8004568:	402e0000 	.word	0x402e0000
 800456c:	200010c8 	.word	0x200010c8
 8004570:	40290000 	.word	0x40290000
 8004574:	3ff00000 	.word	0x3ff00000
 8004578:	bfe00000 	.word	0xbfe00000
 800457c:	0800f498 	.word	0x0800f498
 8004580:	0800f420 	.word	0x0800f420
 8004584:	40340000 	.word	0x40340000
    } else {
        /*@>24c96*/VCU_B./*@>28203*/Switch1_k/*@>8099*/ = /*@>1fdd9*/1.0;
 8004588:	4979      	ldr	r1, [pc, #484]	; (8004770 <FUNC_Transmission+0x1260>)
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	4b79      	ldr	r3, [pc, #484]	; (8004774 <FUNC_Transmission+0x1264>)
 8004590:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
    }
    /* End of Switch: '<S140>/Switch1' */

    /* Product: '<S140>/Product2' */
    /*@>24cd8*/VCU_B./*@>28224*/Product2_a/*@>76dd*/ = /*@>24cde*/VCU_B./*@>28227*/Product1_l/*@>20160*/ * /*@>24ce4*/VCU_B./*@>2822a*/Switch1_k;
 8004594:	4b76      	ldr	r3, [pc, #472]	; (8004770 <FUNC_Transmission+0x1260>)
 8004596:	e9d3 0194 	ldrd	r0, r1, [r3, #592]	; 0x250
 800459a:	4b75      	ldr	r3, [pc, #468]	; (8004770 <FUNC_Transmission+0x1260>)
 800459c:	e9d3 2396 	ldrd	r2, r3, [r3, #600]	; 0x258
 80045a0:	f00a fa62 	bl	800ea68 <__aeabi_dmul>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4971      	ldr	r1, [pc, #452]	; (8004770 <FUNC_Transmission+0x1260>)
 80045aa:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
    /* DataTypeConversion: '<S137>/Data Type Conversion6' */
    /*@>24cea*/VCU_B./*@>2822d*/MHJ9_OUT_p/*@>76e0*/ = /*@>24cf0*/VCU_B./*@>28230*/Product2_a;
 80045ae:	4b70      	ldr	r3, [pc, #448]	; (8004770 <FUNC_Transmission+0x1260>)
 80045b0:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 80045b4:	496e      	ldr	r1, [pc, #440]	; (8004770 <FUNC_Transmission+0x1260>)
 80045b6:	e9c1 239a 	strd	r2, r3, [r1, #616]	; 0x268
    /* RelationalOperator: '<S148>/Compare' incorporates:
 *  Constant: '<S148>/Constant'
 */
    /*@>24cfc*/VCU_B./*@>28236*/Compare_n3/*@>76e4*/ = (/*@>24d02*/VCU_B./*@>28239*/Add_od/*@>76e3*/ > /*@>1fddc*/0.0);
 80045ba:	4b6d      	ldr	r3, [pc, #436]	; (8004770 <FUNC_Transmission+0x1260>)
 80045bc:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	; 0x240
 80045c0:	2101      	movs	r1, #1
 80045c2:	460c      	mov	r4, r1
 80045c4:	4610      	mov	r0, r2
 80045c6:	4619      	mov	r1, r3
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	f00a fcda 	bl	800ef88 <__aeabi_dcmpgt>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <FUNC_Transmission+0x10ce>
 80045da:	2300      	movs	r3, #0
 80045dc:	461c      	mov	r4, r3
 80045de:	b2e3      	uxtb	r3, r4
 80045e0:	461a      	mov	r2, r3
 80045e2:	4b63      	ldr	r3, [pc, #396]	; (8004770 <FUNC_Transmission+0x1260>)
 80045e4:	f883 27fb 	strb.w	r2, [r3, #2043]	; 0x7fb
    /* Product: '<S140>/Product3' */
    /*@>24d1a*/VCU_B./*@>28245*/Product3_n/*@>76eb*/ = /*@>24d20*/VCU_B./*@>28248*/DutyCycleMHJ9_l/*@>2015c*/ * /*@>208d8*/(real_T)/*@>24d26*/VCU_B./*@>2824b*/Compare_n3;
 80045e8:	4b61      	ldr	r3, [pc, #388]	; (8004770 <FUNC_Transmission+0x1260>)
 80045ea:	e9d3 4592 	ldrd	r4, r5, [r3, #584]	; 0x248
 80045ee:	4b60      	ldr	r3, [pc, #384]	; (8004770 <FUNC_Transmission+0x1260>)
 80045f0:	f893 37fb 	ldrb.w	r3, [r3, #2043]	; 0x7fb
 80045f4:	4618      	mov	r0, r3
 80045f6:	f00a f9c1 	bl	800e97c <__aeabi_ui2d>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4620      	mov	r0, r4
 8004600:	4629      	mov	r1, r5
 8004602:	f00a fa31 	bl	800ea68 <__aeabi_dmul>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4959      	ldr	r1, [pc, #356]	; (8004770 <FUNC_Transmission+0x1260>)
 800460c:	e9c1 239c 	strd	r2, r3, [r1, #624]	; 0x270
    /* DataTypeConversion: '<S137>/Data Type Conversion5' */
    /*@>24d44*/VCU_B./*@>2825a*/MHJ9_IN_m/*@>76ee*/ = /*@>24d4a*/VCU_B./*@>2825d*/Product3_n;
 8004610:	4b57      	ldr	r3, [pc, #348]	; (8004770 <FUNC_Transmission+0x1260>)
 8004612:	e9d3 239c 	ldrd	r2, r3, [r3, #624]	; 0x270
 8004616:	4956      	ldr	r1, [pc, #344]	; (8004770 <FUNC_Transmission+0x1260>)
 8004618:	e9c1 239e 	strd	r2, r3, [r1, #632]	; 0x278
    /* RelationalOperator: '<S149>/Compare' incorporates:
 *  Constant: '<S149>/Constant'
 */
    /*@>24d62*/VCU_B./*@>28269*/Compare_hz/*@>76f2*/ = (/*@>24d68*/VCU_B./*@>2826c*/Add_od/*@>76f1*/ < /*@>1fddf*/-20.0);
 800461c:	4b54      	ldr	r3, [pc, #336]	; (8004770 <FUNC_Transmission+0x1260>)
 800461e:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	; 0x240
 8004622:	2101      	movs	r1, #1
 8004624:	460c      	mov	r4, r1
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	4b52      	ldr	r3, [pc, #328]	; (8004778 <FUNC_Transmission+0x1268>)
 8004630:	f00a fc8c 	bl	800ef4c <__aeabi_dcmplt>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <FUNC_Transmission+0x112e>
 800463a:	2300      	movs	r3, #0
 800463c:	461c      	mov	r4, r3
 800463e:	b2e3      	uxtb	r3, r4
 8004640:	461a      	mov	r2, r3
 8004642:	4b4b      	ldr	r3, [pc, #300]	; (8004770 <FUNC_Transmission+0x1260>)
 8004644:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
    /* DataTypeConversion: '<S137>/Data Type Conversion4' */
    /*@>24d74*/VCU_B./*@>28272*/VOVG_OUT_i/*@>76f5*/ = /*@>24d7a*/VCU_B./*@>28275*/Compare_hz;
 8004648:	4b49      	ldr	r3, [pc, #292]	; (8004770 <FUNC_Transmission+0x1260>)
 800464a:	f893 37fc 	ldrb.w	r3, [r3, #2044]	; 0x7fc
 800464e:	4618      	mov	r0, r3
 8004650:	f00a f994 	bl	800e97c <__aeabi_ui2d>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4945      	ldr	r1, [pc, #276]	; (8004770 <FUNC_Transmission+0x1260>)
 800465a:	e9c1 23a0 	strd	r2, r3, [r1, #640]	; 0x280
    /* DataTypeConversion: '<S137>/Data Type Conversion7' */
    /*@>24d86*/VCU_B./*@>2827b*/x_clutch_LC_n/*@>76f8*/ = /*@>24d8c*/VCU_B./*@>2827e*/Memory1;
 800465e:	4b44      	ldr	r3, [pc, #272]	; (8004770 <FUNC_Transmission+0x1260>)
 8004660:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	; 0x2a0
 8004664:	4942      	ldr	r1, [pc, #264]	; (8004770 <FUNC_Transmission+0x1260>)
 8004666:	e9c1 23a2 	strd	r2, r3, [r1, #648]	; 0x288
    /* RelationalOperator: '<S163>/Compare' */
    /*@>24d98*/VCU_B./*@>28284*/Compare_mq/*@>76fc*/ = /*@>24d9e*/VCU_B./*@>28287*/LC_dash_bit;
 800466a:	4b41      	ldr	r3, [pc, #260]	; (8004770 <FUNC_Transmission+0x1260>)
 800466c:	f893 280f 	ldrb.w	r2, [r3, #2063]	; 0x80f
 8004670:	4b3f      	ldr	r3, [pc, #252]	; (8004770 <FUNC_Transmission+0x1260>)
 8004672:	f883 27fd 	strb.w	r2, [r3, #2045]	; 0x7fd
    /* RelationalOperator: '<S164>/Compare' incorporates:
 *  Constant: '<S164>/Constant'
 */
    /*@>24daa*/VCU_B./*@>2828d*/Compare_d/*@>7700*/ = (/*@>24db0*/VCU_B./*@>28290*/DataTypeConversion3/*@>76ff*/ <= /*@>1fde0*/2.0);
 8004676:	4b3e      	ldr	r3, [pc, #248]	; (8004770 <FUNC_Transmission+0x1260>)
 8004678:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	2101      	movs	r1, #1
 8004682:	460c      	mov	r4, r1
 8004684:	4610      	mov	r0, r2
 8004686:	4619      	mov	r1, r3
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004690:	f00a fc66 	bl	800ef60 <__aeabi_dcmple>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <FUNC_Transmission+0x118e>
 800469a:	2300      	movs	r3, #0
 800469c:	461c      	mov	r4, r3
 800469e:	b2e3      	uxtb	r3, r4
 80046a0:	461a      	mov	r2, r3
 80046a2:	4b33      	ldr	r3, [pc, #204]	; (8004770 <FUNC_Transmission+0x1260>)
 80046a4:	f883 27fe 	strb.w	r2, [r3, #2046]	; 0x7fe
    /* Logic: '<S151>/LC Initialization' */
    /*@>24dbc*/VCU_B./*@>28296*/LCInitialization/*@>7706*/ = (/*@>24dc2*/VCU_B./*@>28299*/Compare_mq/*@>7705*/ && /*@>24dc8*/VCU_B./*@>2829c*/Compare_d);
 80046a8:	4b31      	ldr	r3, [pc, #196]	; (8004770 <FUNC_Transmission+0x1260>)
 80046aa:	f893 37fd 	ldrb.w	r3, [r3, #2045]	; 0x7fd
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d006      	beq.n	80046c0 <FUNC_Transmission+0x11b0>
 80046b2:	4b2f      	ldr	r3, [pc, #188]	; (8004770 <FUNC_Transmission+0x1260>)
 80046b4:	f893 37fe 	ldrb.w	r3, [r3, #2046]	; 0x7fe
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <FUNC_Transmission+0x11b0>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <FUNC_Transmission+0x11b2>
 80046c0:	2300      	movs	r3, #0
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	4b2a      	ldr	r3, [pc, #168]	; (8004770 <FUNC_Transmission+0x1260>)
 80046c6:	f883 27ff 	strb.w	r2, [r3, #2047]	; 0x7ff
    /* Logic: '<S142>/Logical Operator' */
    /*@>24dd4*/VCU_B./*@>282a2*/LogicalOperator_a/*@>770c*/ = (/*@>24dda*/VCU_B./*@>282a5*/LCInitialization/*@>770b*/ && /*@>24de0*/VCU_B./*@>282a8*/RelationalOperator1_d);
 80046ca:	4b29      	ldr	r3, [pc, #164]	; (8004770 <FUNC_Transmission+0x1260>)
 80046cc:	f893 37ff 	ldrb.w	r3, [r3, #2047]	; 0x7ff
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d006      	beq.n	80046e2 <FUNC_Transmission+0x11d2>
 80046d4:	4b26      	ldr	r3, [pc, #152]	; (8004770 <FUNC_Transmission+0x1260>)
 80046d6:	f893 37f7 	ldrb.w	r3, [r3, #2039]	; 0x7f7
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <FUNC_Transmission+0x11d2>
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <FUNC_Transmission+0x11d4>
 80046e2:	2300      	movs	r3, #0
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	4b22      	ldr	r3, [pc, #136]	; (8004770 <FUNC_Transmission+0x1260>)
 80046e8:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
    /* DataTypeConversion: '<S137>/Data Type Conversion9' incorporates:
 *  Constant: '<S142>/Constant1'
 */
    /*@>24dec*/VCU_B./*@>282ae*/LC_Fnr_e/*@>770f*/ = /*@>1fde1*/0.0;
 80046ec:	4920      	ldr	r1, [pc, #128]	; (8004770 <FUNC_Transmission+0x1260>)
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	e9c1 23a4 	strd	r2, r3, [r1, #656]	; 0x290
    /* RelationalOperator: '<S142>/Relational Operator' */
    /*@>24df8*/VCU_B./*@>282b4*/RelationalOperator_l/*@>7713*/ = (/*@>24dfe*/VCU_B./*@>282b7*/DataTypeConversion/*@>7712*/ >= /*@>24e04*/VCU_B./*@>282ba*/DataTypeConversion1);
 80046fa:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <FUNC_Transmission+0x1260>)
 80046fc:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8004700:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004704:	4b1a      	ldr	r3, [pc, #104]	; (8004770 <FUNC_Transmission+0x1260>)
 8004706:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 800470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470e:	2401      	movs	r4, #1
 8004710:	f00a fc30 	bl	800ef74 <__aeabi_dcmpge>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <FUNC_Transmission+0x120e>
 800471a:	2300      	movs	r3, #0
 800471c:	461c      	mov	r4, r3
 800471e:	b2e3      	uxtb	r3, r4
 8004720:	461a      	mov	r2, r3
 8004722:	4b13      	ldr	r3, [pc, #76]	; (8004770 <FUNC_Transmission+0x1260>)
 8004724:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
 *
 * Block description for '<S170>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>24e10*/VCU_B./*@>282c0*/Uk1_h/*@>80aa*/ = /*@>252bf*/VCU_DW./*@>2847f*/DelayInput1_DSTATE_n;
 8004728:	4b14      	ldr	r3, [pc, #80]	; (800477c <FUNC_Transmission+0x126c>)
 800472a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800472e:	4910      	ldr	r1, [pc, #64]	; (8004770 <FUNC_Transmission+0x1260>)
 8004730:	e9c1 23a6 	strd	r2, r3, [r1, #664]	; 0x298
    /* RelationalOperator: '<S170>/FixPt Relational Operator' */
    /*@>24e1c*/VCU_B./*@>282c6*/FixPtRelationalOperator_df/*@>7718*/ = (/*@>24e22*/VCU_B./*@>282c9*/DataTypeConversion3/*@>7717*/ < /*@>24e28*/VCU_B./*@>282cc*/Uk1_h);
 8004734:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <FUNC_Transmission+0x1260>)
 8004736:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800473a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800473e:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <FUNC_Transmission+0x1260>)
 8004740:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	; 0x298
 8004744:	2401      	movs	r4, #1
 8004746:	f00a fc01 	bl	800ef4c <__aeabi_dcmplt>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <FUNC_Transmission+0x1244>
 8004750:	2300      	movs	r3, #0
 8004752:	461c      	mov	r4, r3
 8004754:	b2e3      	uxtb	r3, r4
 8004756:	461a      	mov	r2, r3
 8004758:	4b05      	ldr	r3, [pc, #20]	; (8004770 <FUNC_Transmission+0x1260>)
 800475a:	f883 2802 	strb.w	r2, [r3, #2050]	; 0x802
    /* Update for UnitDelay: '<S143>/Unit Delay1' */
    /*@>252d1*/VCU_DW./*@>28488*/UnitDelay1_DSTATE_d/*@>80b6*/ = /*@>24e34*/VCU_B./*@>282d2*/Logic_il/*@>23832*/[/*@>2382f*/0];
 800475e:	4b04      	ldr	r3, [pc, #16]	; (8004770 <FUNC_Transmission+0x1260>)
 8004760:	f893 27d8 	ldrb.w	r2, [r3, #2008]	; 0x7d8
 8004764:	4b05      	ldr	r3, [pc, #20]	; (800477c <FUNC_Transmission+0x126c>)
 8004766:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    /* Update for Delay: '<S143>/Delay' */
/*@>1cf60*/    for (/*@>26c22*/rowIdx = /*@>1fde7*/0; /*@>26c2a*/rowIdx < /*@>1fde8*/19; /*@>26c27*/rowIdx/*@>26c35*/++) {
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	e016      	b.n	800479e <FUNC_Transmission+0x128e>
 8004770:	200008a8 	.word	0x200008a8
 8004774:	3ff00000 	.word	0x3ff00000
 8004778:	c0340000 	.word	0xc0340000
 800477c:	200010c8 	.word	0x200010c8
        /*@>252ef*/VCU_DW./*@>28497*/Delay_DSTATE_i/*@>1b7d1*/[/*@>1fd67*/rowIdx]/*@>80e4*/ = /*@>252f5*/VCU_DW./*@>2849a*/Delay_DSTATE_i/*@>2383f*/[/*@>2383b*/rowIdx/*@>23839*/ + /*@>2383c*/1];
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	3301      	adds	r3, #1
 8004784:	4a61      	ldr	r2, [pc, #388]	; (800490c <FUNC_Transmission+0x13fc>)
 8004786:	4413      	add	r3, r2
 8004788:	f893 10fd 	ldrb.w	r1, [r3, #253]	; 0xfd
 800478c:	4a5f      	ldr	r2, [pc, #380]	; (800490c <FUNC_Transmission+0x13fc>)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	4413      	add	r3, r2
 8004792:	33f8      	adds	r3, #248	; 0xf8
 8004794:	460a      	mov	r2, r1
 8004796:	715a      	strb	r2, [r3, #5]
    /* RelationalOperator: '<S170>/FixPt Relational Operator' */
    /*@>24e1c*/VCU_B./*@>282c6*/FixPtRelationalOperator_df/*@>7718*/ = (/*@>24e22*/VCU_B./*@>282c9*/DataTypeConversion3/*@>7717*/ < /*@>24e28*/VCU_B./*@>282cc*/Uk1_h);
    /* Update for UnitDelay: '<S143>/Unit Delay1' */
    /*@>252d1*/VCU_DW./*@>28488*/UnitDelay1_DSTATE_d/*@>80b6*/ = /*@>24e34*/VCU_B./*@>282d2*/Logic_il/*@>23832*/[/*@>2382f*/0];
    /* Update for Delay: '<S143>/Delay' */
/*@>1cf60*/    for (/*@>26c22*/rowIdx = /*@>1fde7*/0; /*@>26c2a*/rowIdx < /*@>1fde8*/19; /*@>26c27*/rowIdx/*@>26c35*/++) {
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	3301      	adds	r3, #1
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b12      	cmp	r3, #18
 80047a2:	dded      	ble.n	8004780 <FUNC_Transmission+0x1270>
        /*@>252ef*/VCU_DW./*@>28497*/Delay_DSTATE_i/*@>1b7d1*/[/*@>1fd67*/rowIdx]/*@>80e4*/ = /*@>252f5*/VCU_DW./*@>2849a*/Delay_DSTATE_i/*@>2383f*/[/*@>2383b*/rowIdx/*@>23839*/ + /*@>2383c*/1];
    }
    /*@>252e9*/VCU_DW./*@>28494*/Delay_DSTATE_i/*@>80fc*/[/*@>1fb77*/19]/*@>8106*/ = /*@>24e4c*/VCU_B./*@>282de*/LogicalOperator_c;
 80047a4:	4b5a      	ldr	r3, [pc, #360]	; (8004910 <FUNC_Transmission+0x1400>)
 80047a6:	f893 27d6 	ldrb.w	r2, [r3, #2006]	; 0x7d6
 80047aa:	4b58      	ldr	r3, [pc, #352]	; (800490c <FUNC_Transmission+0x13fc>)
 80047ac:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
    /* End of Update for Delay: '<S143>/Delay' */

    /* Update for Memory: '<S174>/Memory' */
    /*@>252fb*/VCU_DW./*@>2849d*/Memory_PreviousInput_c/*@>7868*/ = /*@>24e52*/VCU_B./*@>282e1*/Logic_a/*@>23844*/[/*@>23841*/0];
 80047b0:	4b57      	ldr	r3, [pc, #348]	; (8004910 <FUNC_Transmission+0x1400>)
 80047b2:	f893 27c8 	ldrb.w	r2, [r3, #1992]	; 0x7c8
 80047b6:	4b55      	ldr	r3, [pc, #340]	; (800490c <FUNC_Transmission+0x13fc>)
 80047b8:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
 *
 * Block description for '<S171>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>25301*/VCU_DW./*@>284a0*/DelayInput1_DSTATE_a/*@>8112*/ = /*@>24e58*/VCU_B./*@>282e4*/STW_shift_down_request;
 80047bc:	4b54      	ldr	r3, [pc, #336]	; (8004910 <FUNC_Transmission+0x1400>)
 80047be:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	4951      	ldr	r1, [pc, #324]	; (800490c <FUNC_Transmission+0x13fc>)
 80047c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    /* Update for UnitDelay: '<S143>/Unit Delay4' */
    /*@>25307*/VCU_DW./*@>284a3*/UnitDelay4_DSTATE_k/*@>811e*/ = /*@>24e5e*/VCU_B./*@>282e7*/FixPtRelationalOperator_df;
 80047cc:	4b50      	ldr	r3, [pc, #320]	; (8004910 <FUNC_Transmission+0x1400>)
 80047ce:	f893 2802 	ldrb.w	r2, [r3, #2050]	; 0x802
 80047d2:	4b4e      	ldr	r3, [pc, #312]	; (800490c <FUNC_Transmission+0x13fc>)
 80047d4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
    /* Update for UnitDelay: '<S144>/Unit Delay' */
    /*@>2530d*/VCU_DW./*@>284a6*/UnitDelay_DSTATE_m/*@>812a*/ = /*@>24e64*/VCU_B./*@>282ea*/Logic_p/*@>23849*/[/*@>23846*/0];
 80047d8:	4b4d      	ldr	r3, [pc, #308]	; (8004910 <FUNC_Transmission+0x1400>)
 80047da:	f893 27ec 	ldrb.w	r2, [r3, #2028]	; 0x7ec
 80047de:	4b4b      	ldr	r3, [pc, #300]	; (800490c <FUNC_Transmission+0x13fc>)
 80047e0:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
    /* Update for UnitDelay: '<S143>/Unit Delay2' */
    /*@>25313*/VCU_DW./*@>284a9*/UnitDelay2_DSTATE_n/*@>8136*/ = /*@>24e6a*/VCU_B./*@>282ed*/Counter_j;
 80047e4:	4b4a      	ldr	r3, [pc, #296]	; (8004910 <FUNC_Transmission+0x1400>)
 80047e6:	f893 27f4 	ldrb.w	r2, [r3, #2036]	; 0x7f4
 80047ea:	4b48      	ldr	r3, [pc, #288]	; (800490c <FUNC_Transmission+0x13fc>)
 80047ec:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
    /* Update for Memory: '<S172>/Memory' */
    /*@>25319*/VCU_DW./*@>284ac*/Memory_PreviousInput_ao/*@>786e*/ = /*@>24e70*/VCU_B./*@>282f0*/Logic_il/*@>2384e*/[/*@>2384b*/0];
 80047f0:	4b47      	ldr	r3, [pc, #284]	; (8004910 <FUNC_Transmission+0x1400>)
 80047f2:	f893 27d8 	ldrb.w	r2, [r3, #2008]	; 0x7d8
 80047f6:	4b45      	ldr	r3, [pc, #276]	; (800490c <FUNC_Transmission+0x13fc>)
 80047f8:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
    /* Update for Memory: '<S173>/Memory' */
    /*@>2531f*/VCU_DW./*@>284af*/Memory_PreviousInput_m/*@>7870*/ = /*@>24e76*/VCU_B./*@>282f3*/Logic_l/*@>23853*/[/*@>23850*/0];
 80047fc:	4b44      	ldr	r3, [pc, #272]	; (8004910 <FUNC_Transmission+0x1400>)
 80047fe:	f893 27db 	ldrb.w	r2, [r3, #2011]	; 0x7db
 8004802:	4b42      	ldr	r3, [pc, #264]	; (800490c <FUNC_Transmission+0x13fc>)
 8004804:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 *
 * Block description for '<S141>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>25325*/VCU_DW./*@>284b2*/DelayInput1_DSTATE_d/*@>8142*/ = /*@>24e7c*/VCU_B./*@>282f6*/Product;
 8004808:	4b41      	ldr	r3, [pc, #260]	; (8004910 <FUNC_Transmission+0x1400>)
 800480a:	f8b3 26f4 	ldrh.w	r2, [r3, #1780]	; 0x6f4
 800480e:	4b3f      	ldr	r3, [pc, #252]	; (800490c <FUNC_Transmission+0x13fc>)
 8004810:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 *
 * Block description for '<S178>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>2532b*/VCU_DW./*@>284b5*/DelayInput1_DSTATE_fa/*@>814e*/ = /*@>24e82*/VCU_B./*@>282f9*/LogicalOperator_k;
 8004814:	4b3e      	ldr	r3, [pc, #248]	; (8004910 <FUNC_Transmission+0x1400>)
 8004816:	f893 27e0 	ldrb.w	r2, [r3, #2016]	; 0x7e0
 800481a:	4b3c      	ldr	r3, [pc, #240]	; (800490c <FUNC_Transmission+0x13fc>)
 800481c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 *
 * Block description for '<S179>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>25331*/VCU_DW./*@>284b8*/DelayInput1_DSTATE_l/*@>815a*/ = /*@>24e88*/VCU_B./*@>282fc*/DataTypeConversion3;
 8004820:	4b3b      	ldr	r3, [pc, #236]	; (8004910 <FUNC_Transmission+0x1400>)
 8004822:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	4938      	ldr	r1, [pc, #224]	; (800490c <FUNC_Transmission+0x13fc>)
 800482c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    /* Update for UnitDelay: '<S143>/Unit Delay' */
    /*@>25337*/VCU_DW./*@>284bb*/UnitDelay_DSTATE_f/*@>8166*/ = /*@>24e8e*/VCU_B./*@>282ff*/Logic_l/*@>23858*/[/*@>23855*/0];
 8004830:	4b37      	ldr	r3, [pc, #220]	; (8004910 <FUNC_Transmission+0x1400>)
 8004832:	f893 27db 	ldrb.w	r2, [r3, #2011]	; 0x7db
 8004836:	4b35      	ldr	r3, [pc, #212]	; (800490c <FUNC_Transmission+0x13fc>)
 8004838:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    /* Update for UnitDelay: '<S144>/Unit Delay1' */
    /*@>2533d*/VCU_DW./*@>284be*/UnitDelay1_DSTATE_i/*@>8172*/ = /*@>24e94*/VCU_B./*@>28302*/Counter_a;
 800483c:	4b34      	ldr	r3, [pc, #208]	; (8004910 <FUNC_Transmission+0x1400>)
 800483e:	f893 27f5 	ldrb.w	r2, [r3, #2037]	; 0x7f5
 8004842:	4b32      	ldr	r3, [pc, #200]	; (800490c <FUNC_Transmission+0x13fc>)
 8004844:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
    /* Update for Memory: '<S181>/Memory' */
    /*@>25343*/VCU_DW./*@>284c1*/Memory_PreviousInput_e/*@>7877*/ = /*@>24e9a*/VCU_B./*@>28305*/Logic_p/*@>2385d*/[/*@>2385a*/0];
 8004848:	4b31      	ldr	r3, [pc, #196]	; (8004910 <FUNC_Transmission+0x1400>)
 800484a:	f893 27ec 	ldrb.w	r2, [r3, #2028]	; 0x7ec
 800484e:	4b2f      	ldr	r3, [pc, #188]	; (800490c <FUNC_Transmission+0x13fc>)
 8004850:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 *
 * Block description for '<S180>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>25349*/VCU_DW./*@>284c4*/DelayInput1_DSTATE_b/*@>817e*/ = /*@>24ea0*/VCU_B./*@>28308*/DataTypeConversion3;
 8004854:	4b2e      	ldr	r3, [pc, #184]	; (8004910 <FUNC_Transmission+0x1400>)
 8004856:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	492b      	ldr	r1, [pc, #172]	; (800490c <FUNC_Transmission+0x13fc>)
 8004860:	e9c1 2308 	strd	r2, r3, [r1, #32]
    /* Update for Memory: '<S182>/Memory' */
    /*@>2534f*/VCU_DW./*@>284c7*/Memory_PreviousInput_n/*@>787a*/ = /*@>24ea6*/VCU_B./*@>2830b*/Logic_k/*@>23862*/[/*@>2385f*/0];
 8004864:	4b2a      	ldr	r3, [pc, #168]	; (8004910 <FUNC_Transmission+0x1400>)
 8004866:	f893 27f2 	ldrb.w	r2, [r3, #2034]	; 0x7f2
 800486a:	4b28      	ldr	r3, [pc, #160]	; (800490c <FUNC_Transmission+0x13fc>)
 800486c:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    /* Update for Memory: '<S142>/Memory' */
    /*@>25355*/VCU_DW./*@>284ca*/Memory_PreviousInput_i/*@>787c*/ = /*@>24eac*/VCU_B./*@>2830e*/RelationalOperator1_d;
 8004870:	4b27      	ldr	r3, [pc, #156]	; (8004910 <FUNC_Transmission+0x1400>)
 8004872:	f893 27f7 	ldrb.w	r2, [r3, #2039]	; 0x7f7
 8004876:	4b25      	ldr	r3, [pc, #148]	; (800490c <FUNC_Transmission+0x13fc>)
 8004878:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
 *
 * Block description for '<S170>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>2535b*/VCU_DW./*@>284cd*/DelayInput1_DSTATE_n/*@>818a*/ = /*@>24eb2*/VCU_B./*@>28311*/DataTypeConversion3;
 800487c:	4b24      	ldr	r3, [pc, #144]	; (8004910 <FUNC_Transmission+0x1400>)
 800487e:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	4921      	ldr	r1, [pc, #132]	; (800490c <FUNC_Transmission+0x13fc>)
 8004888:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800488c:	e017      	b.n	80048be <FUNC_Transmission+0x13ae>
} else {
    /*@>742a*/if (/*@>2506d*/VCU_DW./*@>28368*/LC_jr19_MODE) {
 800488e:	4b1f      	ldr	r3, [pc, #124]	; (800490c <FUNC_Transmission+0x13fc>)
 8004890:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
 8004894:	2b00      	cmp	r3, #0
 8004896:	d012      	beq.n	80048be <FUNC_Transmission+0x13ae>
        /* Disable for Enabled SubSystem: '<S142>/Clutch Pos calc' */
        /*@>78b2*/if (/*@>25079*/VCU_DW./*@>2836e*/ClutchPoscalc_MODE) {
 8004898:	4b1c      	ldr	r3, [pc, #112]	; (800490c <FUNC_Transmission+0x13fc>)
 800489a:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <FUNC_Transmission+0x13a6>
            /* Disable for MinMax: '<S140>/MinMax' incorporates:
 *  Outport: '<S150>/x_clutch_LC'
 */
            /*@>23e68*/VCU_B./*@>27aec*/Memory1/*@>8194*/ = /*@>1fd73*/12.5;
 80048a2:	491b      	ldr	r1, [pc, #108]	; (8004910 <FUNC_Transmission+0x1400>)
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	4b1a      	ldr	r3, [pc, #104]	; (8004914 <FUNC_Transmission+0x1404>)
 80048aa:	e9c1 23a8 	strd	r2, r3, [r1, #672]	; 0x2a0
            /*@>25091*/VCU_DW./*@>2837a*/ClutchPoscalc_MODE/*@>78b5*/ = /*@>1f95e*/false;
 80048ae:	4b17      	ldr	r3, [pc, #92]	; (800490c <FUNC_Transmission+0x13fc>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
        }
        /* End of Disable for SubSystem: '<S142>/Clutch Pos calc' */
        /*@>2508b*/VCU_DW./*@>28377*/LC_jr19_MODE/*@>742c*/ = /*@>1f717*/false;
 80048b6:	4b15      	ldr	r3, [pc, #84]	; (800490c <FUNC_Transmission+0x13fc>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
/* End of Outputs for SubSystem: '<S7>/LC_jr19' */

/* RelationalOperator: '<S133>/Compare' incorporates:
 *  Constant: '<S133>/Constant'
 */
/*@>23e74*/VCU_B./*@>27af2*/Compare_c/*@>7430*/ = (/*@>23e7a*/VCU_B./*@>27af5*/DataTypeConversion_cg/*@>742f*/ == /*@>1fd74*/1);
 80048be:	4b14      	ldr	r3, [pc, #80]	; (8004910 <FUNC_Transmission+0x1400>)
 80048c0:	f893 377b 	ldrb.w	r3, [r3, #1915]	; 0x77b
 80048c4:	b25b      	sxtb	r3, r3
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	bf0c      	ite	eq
 80048ca:	2301      	moveq	r3, #1
 80048cc:	2300      	movne	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	461a      	mov	r2, r3
 80048d2:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <FUNC_Transmission+0x1400>)
 80048d4:	f883 277d 	strb.w	r2, [r3, #1917]	; 0x77d
/* RelationalOperator: '<S134>/Compare' incorporates:
 *  Constant: '<S134>/Constant'
 */
/*@>23e86*/VCU_B./*@>27afb*/Compare_g/*@>7434*/ = (/*@>23e8c*/VCU_B./*@>27afe*/DataTypeConversion_cg/*@>7433*/ > /*@>1fd75*/3);
 80048d8:	4b0d      	ldr	r3, [pc, #52]	; (8004910 <FUNC_Transmission+0x1400>)
 80048da:	f893 377b 	ldrb.w	r3, [r3, #1915]	; 0x77b
 80048de:	b25b      	sxtb	r3, r3
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	bfcc      	ite	gt
 80048e4:	2301      	movgt	r3, #1
 80048e6:	2300      	movle	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	461a      	mov	r2, r3
 80048ec:	4b08      	ldr	r3, [pc, #32]	; (8004910 <FUNC_Transmission+0x1400>)
 80048ee:	f883 277e 	strb.w	r2, [r3, #1918]	; 0x77e
/* Logic: '<S7>/Logical Operator' */
/*@>23e98*/VCU_B./*@>27b04*/LogicalOperator/*@>743a*/ = (/*@>23e9e*/VCU_B./*@>27b07*/Compare_c/*@>7439*/ || /*@>23ea4*/VCU_B./*@>27b0a*/Compare_g);
 80048f2:	4b07      	ldr	r3, [pc, #28]	; (8004910 <FUNC_Transmission+0x1400>)
 80048f4:	f893 377d 	ldrb.w	r3, [r3, #1917]	; 0x77d
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d104      	bne.n	8004906 <FUNC_Transmission+0x13f6>
 80048fc:	4b04      	ldr	r3, [pc, #16]	; (8004910 <FUNC_Transmission+0x1400>)
 80048fe:	f893 377e 	ldrb.w	r3, [r3, #1918]	; 0x77e
 8004902:	2b00      	cmp	r3, #0
 8004904:	d008      	beq.n	8004918 <FUNC_Transmission+0x1408>
 8004906:	2301      	movs	r3, #1
 8004908:	e007      	b.n	800491a <FUNC_Transmission+0x140a>
 800490a:	bf00      	nop
 800490c:	200010c8 	.word	0x200010c8
 8004910:	200008a8 	.word	0x200008a8
 8004914:	40290000 	.word	0x40290000
 8004918:	2300      	movs	r3, #0
 800491a:	b2da      	uxtb	r2, r3
 800491c:	4b92      	ldr	r3, [pc, #584]	; (8004b68 <FUNC_Transmission+0x1658>)
 800491e:	f883 277f 	strb.w	r2, [r3, #1919]	; 0x77f
/* Outputs for Enabled SubSystem: '<S7>/semi_auto_jr18' incorporates:
 *  EnablePort: '<S139>/Enable'
 */
/*@>743c*/if (/*@>23eb0*/VCU_B./*@>27b10*/LogicalOperator) {
 8004922:	4b91      	ldr	r3, [pc, #580]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004924:	f893 377f 	ldrb.w	r3, [r3, #1919]	; 0x77f
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 865d 	beq.w	80055e8 <FUNC_Transmission+0x20d8>
    /* CombinatorialLogic: '<S208>/Logic' incorporates:
 *  Delay: '<S192>/Delay'
 *  Memory: '<S208>/Memory'
 *  UnitDelay: '<S192>/Unit Delay1'
 */
    /*@>23ebc*/VCU_B./*@>27b16*/UnitDelay1/*@>81a2*/ = /*@>250a3*/VCU_DW./*@>28383*/UnitDelay1_DSTATE;
 800492e:	4b8f      	ldr	r3, [pc, #572]	; (8004b6c <FUNC_Transmission+0x165c>)
 8004930:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 8004934:	4b8c      	ldr	r3, [pc, #560]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004936:	f883 2783 	strb.w	r2, [r3, #1923]	; 0x783
    /*@>23ed4*/VCU_B./*@>27b22*/Delay/*@>81b0*/ = /*@>250a9*/VCU_DW./*@>28386*/Delay_DSTATE/*@>2370d*/[/*@>2370a*/0];
 800493a:	4b8c      	ldr	r3, [pc, #560]	; (8004b6c <FUNC_Transmission+0x165c>)
 800493c:	f893 20e2 	ldrb.w	r2, [r3, #226]	; 0xe2
 8004940:	4b89      	ldr	r3, [pc, #548]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004942:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
    /*@>23ee6*/VCU_B./*@>27b2b*/Memory/*@>78c6*/ = /*@>250af*/VCU_DW./*@>28389*/Memory_PreviousInput;
 8004946:	4b89      	ldr	r3, [pc, #548]	; (8004b6c <FUNC_Transmission+0x165c>)
 8004948:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
 800494c:	4b86      	ldr	r3, [pc, #536]	; (8004b68 <FUNC_Transmission+0x1658>)
 800494e:	f883 2785 	strb.w	r2, [r3, #1925]	; 0x785
    /*@>1fe30*/rowIdx/*@>1d7e7*/ = /*@>23ef8*/VCU_B./*@>27b34*/UnitDelay1;
 8004952:	4b85      	ldr	r3, [pc, #532]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004954:	f893 3783 	ldrb.w	r3, [r3, #1923]	; 0x783
 8004958:	617b      	str	r3, [r7, #20]
    /*@>1fe34*/rowIdx/*@>1d80e*/ = /*@>2045a*/(int32_T)((/*@>20457*/(uint32_T)/*@>1fe36*/rowIdx/*@>20157*/ << /*@>1fe38*/1)/*@>20155*/ + /*@>23f22*/VCU_B./*@>27b49*/Delay);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	4a82      	ldr	r2, [pc, #520]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004960:	f892 2784 	ldrb.w	r2, [r2, #1924]	; 0x784
 8004964:	4413      	add	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
    /*@>1fe3b*/rowIdx/*@>1d835*/ = /*@>20478*/(int32_T)((/*@>20475*/(uint32_T)/*@>1fe3d*/rowIdx/*@>2014d*/ << /*@>1fe3f*/1)/*@>2014b*/ + /*@>23f5e*/VCU_B./*@>27b67*/Memory);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	4a7e      	ldr	r2, [pc, #504]	; (8004b68 <FUNC_Transmission+0x1658>)
 800496e:	f892 2785 	ldrb.w	r2, [r2, #1925]	; 0x785
 8004972:	4413      	add	r3, r2
 8004974:	617b      	str	r3, [r7, #20]
    /*@>23f82*/VCU_B./*@>27b79*/Logic/*@>1d84b*/[/*@>1fe44*/0U]/*@>1d84a*/ = /*@>24f2e*/VCU_ConstP./*@>28320*/pooled32/*@>23729*/[/*@>23724*/(uint32_T)/*@>23726*/rowIdx];
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	4a7d      	ldr	r2, [pc, #500]	; (8004b70 <FUNC_Transmission+0x1660>)
 800497a:	4413      	add	r3, r2
 800497c:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004980:	4b79      	ldr	r3, [pc, #484]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004982:	f883 2786 	strb.w	r2, [r3, #1926]	; 0x786
    /*@>23fa0*/VCU_B./*@>27b88*/Logic/*@>1d85e*/[/*@>1fe49*/1U]/*@>1d85d*/ = /*@>24f34*/VCU_ConstP./*@>28323*/pooled32/*@>23732*/[/*@>2372e*/rowIdx/*@>2372b*/ + /*@>2372f*/8U];
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	3308      	adds	r3, #8
 800498a:	4a79      	ldr	r2, [pc, #484]	; (8004b70 <FUNC_Transmission+0x1660>)
 800498c:	4413      	add	r3, r2
 800498e:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004992:	4b75      	ldr	r3, [pc, #468]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004994:	f883 2787 	strb.w	r2, [r3, #1927]	; 0x787
    /* DataTypeConversion: '<S139>/Data Type Conversion10' */
    /*@>23ff4*/VCU_B./*@>27bb2*/VOVG_ShiftDown_m/*@>78ca*/ = /*@>23ffa*/VCU_B./*@>27bb5*/Logic/*@>23737*/[/*@>23734*/0];
 8004998:	4b73      	ldr	r3, [pc, #460]	; (8004b68 <FUNC_Transmission+0x1658>)
 800499a:	f893 3786 	ldrb.w	r3, [r3, #1926]	; 0x786
 800499e:	4618      	mov	r0, r3
 80049a0:	f009 ffec 	bl	800e97c <__aeabi_ui2d>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	496f      	ldr	r1, [pc, #444]	; (8004b68 <FUNC_Transmission+0x1658>)
 80049aa:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 *
 * Block description for '<S205>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>24012*/VCU_B./*@>27bc1*/Uk1/*@>820c*/ = /*@>250c1*/VCU_DW./*@>28392*/DelayInput1_DSTATE;
 80049ae:	4b6f      	ldr	r3, [pc, #444]	; (8004b6c <FUNC_Transmission+0x165c>)
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	496c      	ldr	r1, [pc, #432]	; (8004b68 <FUNC_Transmission+0x1658>)
 80049b6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    /* CombinatorialLogic: '<S206>/Logic' incorporates:
 *  Delay: '<S192>/Delay1'
 *  Memory: '<S206>/Memory'
 *  RelationalOperator: '<S205>/FixPt Relational Operator'
 */
    /*@>24036*/VCU_B./*@>27bd3*/FixPtRelationalOperator/*@>78cf*/ = (/*@>2403c*/VCU_B./*@>27bd6*/STW_shift_down_request/*@>78ce*/ > /*@>24042*/VCU_B./*@>27bd9*/Uk1);
 80049ba:	4b6b      	ldr	r3, [pc, #428]	; (8004b68 <FUNC_Transmission+0x1658>)
 80049bc:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 80049c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049c4:	4b68      	ldr	r3, [pc, #416]	; (8004b68 <FUNC_Transmission+0x1658>)
 80049c6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80049ca:	2401      	movs	r4, #1
 80049cc:	f00a fadc 	bl	800ef88 <__aeabi_dcmpgt>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <FUNC_Transmission+0x14ca>
 80049d6:	2300      	movs	r3, #0
 80049d8:	461c      	mov	r4, r3
 80049da:	b2e3      	uxtb	r3, r4
 80049dc:	461a      	mov	r2, r3
 80049de:	4b62      	ldr	r3, [pc, #392]	; (8004b68 <FUNC_Transmission+0x1658>)
 80049e0:	f883 2788 	strb.w	r2, [r3, #1928]	; 0x788
    /*@>2408a*/VCU_B./*@>27bfd*/Delay1/*@>8218*/ = /*@>250c7*/VCU_DW./*@>28395*/Delay1_DSTATE;
 80049e4:	4b61      	ldr	r3, [pc, #388]	; (8004b6c <FUNC_Transmission+0x165c>)
 80049e6:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 80049ea:	4b5f      	ldr	r3, [pc, #380]	; (8004b68 <FUNC_Transmission+0x1658>)
 80049ec:	f883 2789 	strb.w	r2, [r3, #1929]	; 0x789
    /*@>240ae*/VCU_B./*@>27c0f*/Memory_d/*@>78d2*/ = /*@>250cd*/VCU_DW./*@>28398*/Memory_PreviousInput_l;
 80049f0:	4b5e      	ldr	r3, [pc, #376]	; (8004b6c <FUNC_Transmission+0x165c>)
 80049f2:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
 80049f6:	4b5c      	ldr	r3, [pc, #368]	; (8004b68 <FUNC_Transmission+0x1658>)
 80049f8:	f883 278a 	strb.w	r2, [r3, #1930]	; 0x78a
    /*@>1fe4c*/rowIdx/*@>1d88e*/ = /*@>240c6*/VCU_B./*@>27c1b*/FixPtRelationalOperator;
 80049fc:	4b5a      	ldr	r3, [pc, #360]	; (8004b68 <FUNC_Transmission+0x1658>)
 80049fe:	f893 3788 	ldrb.w	r3, [r3, #1928]	; 0x788
 8004a02:	617b      	str	r3, [r7, #20]
    /*@>1fe50*/rowIdx/*@>1d8b5*/ = /*@>204eb*/(int32_T)((/*@>204e8*/(uint32_T)/*@>1fe52*/rowIdx/*@>20142*/ << /*@>1fe54*/1)/*@>20140*/ + /*@>2410e*/VCU_B./*@>27c3f*/Delay1);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	4a57      	ldr	r2, [pc, #348]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004a0a:	f892 2789 	ldrb.w	r2, [r2, #1929]	; 0x789
 8004a0e:	4413      	add	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]
    /*@>1fe57*/rowIdx/*@>1d8dc*/ = /*@>20506*/(int32_T)((/*@>20503*/(uint32_T)/*@>1fe59*/rowIdx/*@>20138*/ << /*@>1fe5b*/1)/*@>20136*/ + /*@>24120*/VCU_B./*@>27c48*/Memory_d);
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	4a54      	ldr	r2, [pc, #336]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004a18:	f892 278a 	ldrb.w	r2, [r2, #1930]	; 0x78a
 8004a1c:	4413      	add	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]
    /*@>2414a*/VCU_B./*@>27c5d*/Logic_i/*@>1d8f2*/[/*@>1fe60*/0U]/*@>1d8f1*/ = /*@>24f46*/VCU_ConstP./*@>2832c*/pooled32/*@>2373e*/[/*@>23739*/(uint32_T)/*@>2373b*/rowIdx];
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	4a53      	ldr	r2, [pc, #332]	; (8004b70 <FUNC_Transmission+0x1660>)
 8004a24:	4413      	add	r3, r2
 8004a26:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004a2a:	4b4f      	ldr	r3, [pc, #316]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004a2c:	f883 278b 	strb.w	r2, [r3, #1931]	; 0x78b
    /*@>2419e*/VCU_B./*@>27c87*/Logic_i/*@>1d905*/[/*@>1fe65*/1U]/*@>1d904*/ = /*@>24f4c*/VCU_ConstP./*@>2832f*/pooled32/*@>23747*/[/*@>23743*/rowIdx/*@>23740*/ + /*@>23744*/8U];
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	3308      	adds	r3, #8
 8004a34:	4a4e      	ldr	r2, [pc, #312]	; (8004b70 <FUNC_Transmission+0x1660>)
 8004a36:	4413      	add	r3, r2
 8004a38:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004a3c:	4b4a      	ldr	r3, [pc, #296]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004a3e:	f883 278c 	strb.w	r2, [r3, #1932]	; 0x78c
    /* UnitDelay: '<S192>/Unit Delay4' */
    /*@>241bc*/VCU_B./*@>27c96*/UnitDelay4/*@>8274*/ = /*@>250df*/VCU_DW./*@>283a1*/UnitDelay4_DSTATE;
 8004a42:	4b4a      	ldr	r3, [pc, #296]	; (8004b6c <FUNC_Transmission+0x165c>)
 8004a44:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
 8004a48:	4b47      	ldr	r3, [pc, #284]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004a4a:	f883 278d 	strb.w	r2, [r3, #1933]	; 0x78d
    /* Gain: '<S209>/Gain' */
    /*@>241e6*/VCU_B./*@>27cab*/Gain/*@>78dc*/ = /*@>1fd88*/2.0/*@>2012e*/ * /*@>241ec*/VCU_B./*@>27cae*/DataTypeConversion1;
 8004a4e:	4b46      	ldr	r3, [pc, #280]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004a50:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	f009 fe52 	bl	800e704 <__adddf3>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4940      	ldr	r1, [pc, #256]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004a66:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    /* RelationalOperator: '<S209>/Relational Operator' incorporates:
 *  Constant: '<S209>/Constant'
 */
    /*@>24240*/VCU_B./*@>27cd8*/RelationalOperator/*@>78e0*/ = (/*@>24246*/VCU_B./*@>27cdb*/Gain/*@>78df*/ > /*@>1fd89*/169.0);
 8004a6a:	4b3f      	ldr	r3, [pc, #252]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004a6c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004a70:	2101      	movs	r1, #1
 8004a72:	460c      	mov	r4, r1
 8004a74:	4610      	mov	r0, r2
 8004a76:	4619      	mov	r1, r3
 8004a78:	a337      	add	r3, pc, #220	; (adr r3, 8004b58 <FUNC_Transmission+0x1648>)
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	f00a fa83 	bl	800ef88 <__aeabi_dcmpgt>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <FUNC_Transmission+0x157c>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	461c      	mov	r4, r3
 8004a8c:	b2e3      	uxtb	r3, r4
 8004a8e:	461a      	mov	r2, r3
 8004a90:	4b35      	ldr	r3, [pc, #212]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004a92:	f883 278e 	strb.w	r2, [r3, #1934]	; 0x78e
    /* RelationalOperator: '<S209>/Relational Operator1' incorporates:
 *  Constant: '<S209>/Constant1'
 */
    /*@>24282*/VCU_B./*@>27cf9*/RelationalOperator1/*@>78e4*/ = (/*@>24288*/VCU_B./*@>27cfc*/Gain/*@>78e3*/ > /*@>1fd8b*/228.0);
 8004a96:	4b34      	ldr	r3, [pc, #208]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004a98:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	4b32      	ldr	r3, [pc, #200]	; (8004b74 <FUNC_Transmission+0x1664>)
 8004aaa:	f00a fa6d 	bl	800ef88 <__aeabi_dcmpgt>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <FUNC_Transmission+0x15a8>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	461c      	mov	r4, r3
 8004ab8:	b2e3      	uxtb	r3, r4
 8004aba:	461a      	mov	r2, r3
 8004abc:	4b2a      	ldr	r3, [pc, #168]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004abe:	f883 278f 	strb.w	r2, [r3, #1935]	; 0x78f
    /* RelationalOperator: '<S209>/Relational Operator2' incorporates:
 *  Constant: '<S209>/Constant2'
 */
    /*@>242a6*/VCU_B./*@>27d0b*/RelationalOperator2/*@>78e8*/ = (/*@>242ac*/VCU_B./*@>27d0e*/Gain/*@>78e7*/ > /*@>1fd8c*/325.0);
 8004ac2:	4b29      	ldr	r3, [pc, #164]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004ac4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004ac8:	2101      	movs	r1, #1
 8004aca:	460c      	mov	r4, r1
 8004acc:	4610      	mov	r0, r2
 8004ace:	4619      	mov	r1, r3
 8004ad0:	a323      	add	r3, pc, #140	; (adr r3, 8004b60 <FUNC_Transmission+0x1650>)
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	f00a fa57 	bl	800ef88 <__aeabi_dcmpgt>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <FUNC_Transmission+0x15d4>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	461c      	mov	r4, r3
 8004ae4:	b2e3      	uxtb	r3, r4
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	4b1f      	ldr	r3, [pc, #124]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004aea:	f883 2790 	strb.w	r2, [r3, #1936]	; 0x790
    /* Sum: '<S209>/Add' */
    /*@>242f4*/VCU_B./*@>27d32*/Add_c/*@>a761*/ = /*@>20571*/(uint8_T)((/*@>2056b*/(uint32_T)/*@>242fa*/VCU_B./*@>27d35*/RelationalOperator/*@>2011e*/ + /*@>24300*/VCU_B./*@>27d38*/RelationalOperator1)/*@>20111*/ + /*@>24306*/VCU_B./*@>27d3b*/RelationalOperator2);
 8004aee:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004af0:	f893 278e 	ldrb.w	r2, [r3, #1934]	; 0x78e
 8004af4:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004af6:	f893 378f 	ldrb.w	r3, [r3, #1935]	; 0x78f
 8004afa:	4413      	add	r3, r2
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	4b1a      	ldr	r3, [pc, #104]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004b00:	f893 3790 	ldrb.w	r3, [r3, #1936]	; 0x790
 8004b04:	4413      	add	r3, r2
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	4b17      	ldr	r3, [pc, #92]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004b0a:	f883 273e 	strb.w	r2, [r3, #1854]	; 0x73e
    /* RelationalOperator: '<S199>/Compare' incorporates:
 *  Constant: '<S199>/Constant'
 */
    /*@>24324*/VCU_B./*@>27d4a*/Compare_b/*@>78f2*/ = (/*@>2432a*/VCU_B./*@>27d4d*/x_clutch_STW/*@>78f1*/ >= /*@>1fd8e*/15.0);
 8004b0e:	4b16      	ldr	r3, [pc, #88]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004b10:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8004b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b18:	2101      	movs	r1, #1
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4619      	mov	r1, r3
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <FUNC_Transmission+0x1668>)
 8004b26:	f00a fa25 	bl	800ef74 <__aeabi_dcmpge>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <FUNC_Transmission+0x1624>
 8004b30:	2300      	movs	r3, #0
 8004b32:	461c      	mov	r4, r3
 8004b34:	b2e3      	uxtb	r3, r4
 8004b36:	461a      	mov	r2, r3
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004b3a:	f883 2791 	strb.w	r2, [r3, #1937]	; 0x791
    /* Switch: '<S192>/Switch' incorporates:
 *  Constant: '<S192>/Constant'
 *  Constant: '<S192>/Constant1'
 */
    /*@>1d67f*/if (/*@>24348*/VCU_B./*@>27d5c*/Compare_b) {
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004b40:	f893 3791 	ldrb.w	r3, [r3, #1937]	; 0x791
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01b      	beq.n	8004b80 <FUNC_Transmission+0x1670>
        /*@>24396*/VCU_B./*@>27d83*/Switch/*@>1d682*/ = /*@>1fd90*/1.0;
 8004b48:	4907      	ldr	r1, [pc, #28]	; (8004b68 <FUNC_Transmission+0x1658>)
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <FUNC_Transmission+0x166c>)
 8004b50:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004b54:	e01b      	b.n	8004b8e <FUNC_Transmission+0x167e>
 8004b56:	bf00      	nop
 8004b58:	00000000 	.word	0x00000000
 8004b5c:	40652000 	.word	0x40652000
 8004b60:	00000000 	.word	0x00000000
 8004b64:	40745000 	.word	0x40745000
 8004b68:	200008a8 	.word	0x200008a8
 8004b6c:	200010c8 	.word	0x200010c8
 8004b70:	0800f1e8 	.word	0x0800f1e8
 8004b74:	406c8000 	.word	0x406c8000
 8004b78:	402e0000 	.word	0x402e0000
 8004b7c:	3ff00000 	.word	0x3ff00000
    } else {
        /*@>24390*/VCU_B./*@>27d80*/Switch/*@>8284*/ = /*@>1fd91*/2.0;
 8004b80:	495f      	ldr	r1, [pc, #380]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b8a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    }
    /* End of Switch: '<S192>/Switch' */

    /* RelationalOperator: '<S192>/Relational Operator' */
    /*@>243cc*/VCU_B./*@>27d9e*/LessthanNeutral/*@>78f7*/ = (/*@>243d2*/VCU_B./*@>27da1*/Add_c/*@>20107*/ < /*@>243d8*/VCU_B./*@>27da4*/Switch);
 8004b8e:	4b5c      	ldr	r3, [pc, #368]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004b90:	f893 373e 	ldrb.w	r3, [r3, #1854]	; 0x73e
 8004b94:	4618      	mov	r0, r3
 8004b96:	f009 ff01 	bl	800e99c <__aeabi_i2d>
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	460d      	mov	r5, r1
 8004b9e:	4b58      	ldr	r3, [pc, #352]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004ba0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	460e      	mov	r6, r1
 8004ba8:	4620      	mov	r0, r4
 8004baa:	4629      	mov	r1, r5
 8004bac:	f00a f9ce 	bl	800ef4c <__aeabi_dcmplt>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <FUNC_Transmission+0x16aa>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	461e      	mov	r6, r3
 8004bba:	b2f3      	uxtb	r3, r6
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4b50      	ldr	r3, [pc, #320]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004bc0:	f883 2792 	strb.w	r2, [r3, #1938]	; 0x792
    /* UnitDelay: '<S193>/Unit Delay' */
    /*@>2441a*/VCU_B./*@>27dc5*/UnitDelay/*@>8295*/ = /*@>250f1*/VCU_DW./*@>283aa*/UnitDelay_DSTATE;
 8004bc4:	4b4f      	ldr	r3, [pc, #316]	; (8004d04 <FUNC_Transmission+0x17f4>)
 8004bc6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 8004bca:	4b4d      	ldr	r3, [pc, #308]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004bcc:	f883 2793 	strb.w	r2, [r3, #1939]	; 0x793
    /* UnitDelay: '<S192>/Unit Delay2' */
    /*@>24426*/VCU_B./*@>27dcb*/Timeout/*@>82a1*/ = /*@>250f7*/VCU_DW./*@>283ad*/UnitDelay2_DSTATE;
 8004bd0:	4b4c      	ldr	r3, [pc, #304]	; (8004d04 <FUNC_Transmission+0x17f4>)
 8004bd2:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 8004bd6:	4b4a      	ldr	r3, [pc, #296]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004bd8:	f883 2794 	strb.w	r2, [r3, #1940]	; 0x794
    /* RelationalOperator: '<S200>/Compare' incorporates:
 *  Constant: '<S200>/Constant'
 */
    /*@>2443e*/VCU_B./*@>27dd7*/Compare_f/*@>78fd*/ = (/*@>24444*/VCU_B./*@>27dda*/DataTypeConversion2/*@>78fc*/ > /*@>1fd94*/5000.0);
 8004bdc:	4b48      	ldr	r3, [pc, #288]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004bde:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	2101      	movs	r1, #1
 8004be8:	460c      	mov	r4, r1
 8004bea:	4610      	mov	r0, r2
 8004bec:	4619      	mov	r1, r3
 8004bee:	a340      	add	r3, pc, #256	; (adr r3, 8004cf0 <FUNC_Transmission+0x17e0>)
 8004bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf4:	f00a f9c8 	bl	800ef88 <__aeabi_dcmpgt>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <FUNC_Transmission+0x16f2>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	461c      	mov	r4, r3
 8004c02:	b2e3      	uxtb	r3, r4
 8004c04:	461a      	mov	r2, r3
 8004c06:	4b3e      	ldr	r3, [pc, #248]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004c08:	f883 2795 	strb.w	r2, [r3, #1941]	; 0x795
    /* RelationalOperator: '<S201>/Compare' incorporates:
 *  Constant: '<S201>/Constant'
 */
    /*@>24486*/VCU_B./*@>27dfb*/Compare_n/*@>7901*/ = (/*@>2448c*/VCU_B./*@>27dfe*/Add_c/*@>7900*/ == /*@>1fd95*/2);
 8004c0c:	4b3c      	ldr	r3, [pc, #240]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004c0e:	f893 373e 	ldrb.w	r3, [r3, #1854]	; 0x73e
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	bf0c      	ite	eq
 8004c16:	2301      	moveq	r3, #1
 8004c18:	2300      	movne	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4b38      	ldr	r3, [pc, #224]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004c20:	f883 2796 	strb.w	r2, [r3, #1942]	; 0x796
    /* Logic: '<S192>/Logical Operator1' */
    /*@>24498*/VCU_B./*@>27e04*/RPMcheckgear21/*@>7907*/ = (/*@>2449e*/VCU_B./*@>27e07*/Compare_n/*@>7906*/ && /*@>244a4*/VCU_B./*@>27e0a*/Compare_f);
 8004c24:	4b36      	ldr	r3, [pc, #216]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004c26:	f893 3796 	ldrb.w	r3, [r3, #1942]	; 0x796
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d006      	beq.n	8004c3c <FUNC_Transmission+0x172c>
 8004c2e:	4b34      	ldr	r3, [pc, #208]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004c30:	f893 3795 	ldrb.w	r3, [r3, #1941]	; 0x795
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <FUNC_Transmission+0x172c>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <FUNC_Transmission+0x172e>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	4b2f      	ldr	r3, [pc, #188]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004c42:	f883 2797 	strb.w	r2, [r3, #1943]	; 0x797
    /* RelationalOperator: '<S202>/Compare' incorporates:
 *  Constant: '<S202>/Constant'
 */
    /*@>244b6*/VCU_B./*@>27e13*/Compare_l/*@>790b*/ = (/*@>244bc*/VCU_B./*@>27e16*/DataTypeConversion2/*@>790a*/ > /*@>1fd96*/5300.0);
 8004c46:	4b2e      	ldr	r3, [pc, #184]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004c48:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c50:	2101      	movs	r1, #1
 8004c52:	460c      	mov	r4, r1
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	a327      	add	r3, pc, #156	; (adr r3, 8004cf8 <FUNC_Transmission+0x17e8>)
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f00a f993 	bl	800ef88 <__aeabi_dcmpgt>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <FUNC_Transmission+0x175c>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	461c      	mov	r4, r3
 8004c6c:	b2e3      	uxtb	r3, r4
 8004c6e:	461a      	mov	r2, r3
 8004c70:	4b23      	ldr	r3, [pc, #140]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004c72:	f883 2798 	strb.w	r2, [r3, #1944]	; 0x798
    /* RelationalOperator: '<S203>/Compare' incorporates:
 *  Constant: '<S203>/Constant'
 */
    /*@>244e0*/VCU_B./*@>27e28*/Compare_h/*@>790f*/ = (/*@>244e6*/VCU_B./*@>27e2b*/Add_c/*@>790e*/ == /*@>1fd97*/3);
 8004c76:	4b22      	ldr	r3, [pc, #136]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004c78:	f893 373e 	ldrb.w	r3, [r3, #1854]	; 0x73e
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	bf0c      	ite	eq
 8004c80:	2301      	moveq	r3, #1
 8004c82:	2300      	movne	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	461a      	mov	r2, r3
 8004c88:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004c8a:	f883 2799 	strb.w	r2, [r3, #1945]	; 0x799
    /* Logic: '<S192>/Logical Operator2' */
    /*@>2450a*/VCU_B./*@>27e3d*/RPMcheckgear31/*@>7915*/ = (/*@>24510*/VCU_B./*@>27e40*/Compare_l/*@>7914*/ && /*@>24516*/VCU_B./*@>27e43*/Compare_h);
 8004c8e:	4b1c      	ldr	r3, [pc, #112]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004c90:	f893 3798 	ldrb.w	r3, [r3, #1944]	; 0x798
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d006      	beq.n	8004ca6 <FUNC_Transmission+0x1796>
 8004c98:	4b19      	ldr	r3, [pc, #100]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004c9a:	f893 3799 	ldrb.w	r3, [r3, #1945]	; 0x799
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <FUNC_Transmission+0x1796>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <FUNC_Transmission+0x1798>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004cac:	f883 279a 	strb.w	r2, [r3, #1946]	; 0x79a
    /* CombinatorialLogic: '<S207>/Logic' incorporates:
 *  Logic: '<S192>/Logical Operator'
 *  Memory: '<S207>/Memory'
 */
    /*@>24528*/VCU_B./*@>27e4c*/LogicalOperator_d/*@>7927*/ = (/*@>2452e*/VCU_B./*@>27e4f*/UnitDelay4/*@>791a*/ || /*@>24534*/VCU_B./*@>27e52*/LessthanNeutral/*@>791d*/ || /*@>2453a*/VCU_B./*@>27e55*/UnitDelay/*@>7920*/ || /*@>24540*/VCU_B./*@>27e58*/Timeout/*@>7923*/ || /*@>24546*/VCU_B./*@>27e5b*/RPMcheckgear21/*@>7926*/ || /*@>2454c*/VCU_B./*@>27e5e*/RPMcheckgear31);
 8004cb0:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004cb2:	f893 378d 	ldrb.w	r3, [r3, #1933]	; 0x78d
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d118      	bne.n	8004cec <FUNC_Transmission+0x17dc>
 8004cba:	4b11      	ldr	r3, [pc, #68]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004cbc:	f893 3792 	ldrb.w	r3, [r3, #1938]	; 0x792
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d113      	bne.n	8004cec <FUNC_Transmission+0x17dc>
 8004cc4:	4b0e      	ldr	r3, [pc, #56]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004cc6:	f893 3793 	ldrb.w	r3, [r3, #1939]	; 0x793
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10e      	bne.n	8004cec <FUNC_Transmission+0x17dc>
 8004cce:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004cd0:	f893 3794 	ldrb.w	r3, [r3, #1940]	; 0x794
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <FUNC_Transmission+0x17dc>
 8004cd8:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004cda:	f893 3797 	ldrb.w	r3, [r3, #1943]	; 0x797
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d104      	bne.n	8004cec <FUNC_Transmission+0x17dc>
 8004ce2:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <FUNC_Transmission+0x17f0>)
 8004ce4:	f893 379a 	ldrb.w	r3, [r3, #1946]	; 0x79a
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00d      	beq.n	8004d08 <FUNC_Transmission+0x17f8>
 8004cec:	2301      	movs	r3, #1
 8004cee:	e00c      	b.n	8004d0a <FUNC_Transmission+0x17fa>
 8004cf0:	00000000 	.word	0x00000000
 8004cf4:	40b38800 	.word	0x40b38800
 8004cf8:	00000000 	.word	0x00000000
 8004cfc:	40b4b400 	.word	0x40b4b400
 8004d00:	200008a8 	.word	0x200008a8
 8004d04:	200010c8 	.word	0x200010c8
 8004d08:	2300      	movs	r3, #0
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	4b96      	ldr	r3, [pc, #600]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004d0e:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
    /*@>24564*/VCU_B./*@>27e6a*/Memory_l/*@>7929*/ = /*@>250fd*/VCU_DW./*@>283b0*/Memory_PreviousInput_a;
 8004d12:	4b96      	ldr	r3, [pc, #600]	; (8004f6c <FUNC_Transmission+0x1a5c>)
 8004d14:	f893 2153 	ldrb.w	r2, [r3, #339]	; 0x153
 8004d18:	4b93      	ldr	r3, [pc, #588]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004d1a:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
    /*@>1ff76*/tmp/*@>1da74*/ = /*@>24576*/VCU_B./*@>27e73*/Logic_i/*@>23771*/[/*@>2376e*/0];
 8004d1e:	4b92      	ldr	r3, [pc, #584]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004d20:	f893 378b 	ldrb.w	r3, [r3, #1931]	; 0x78b
 8004d24:	71fb      	strb	r3, [r7, #7]
    /*@>1fea2*/rowIdx/*@>1da8b*/ = /*@>1ff78*/tmp;
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	617b      	str	r3, [r7, #20]
    /*@>1fea6*/rowIdx/*@>1dab4*/ = /*@>20618*/(int32_T)((/*@>20615*/(uint32_T)/*@>1fea8*/rowIdx/*@>20101*/ << /*@>1feaa*/1)/*@>200ff*/ + /*@>24594*/VCU_B./*@>27e82*/LogicalOperator_d);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	4a8e      	ldr	r2, [pc, #568]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004d30:	f892 279b 	ldrb.w	r2, [r2, #1947]	; 0x79b
 8004d34:	4413      	add	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]
    /*@>1fead*/rowIdx/*@>1dadd*/ = /*@>20627*/(int32_T)((/*@>20624*/(uint32_T)/*@>1feaf*/rowIdx/*@>200f7*/ << /*@>1feb1*/1)/*@>200f5*/ + /*@>245ac*/VCU_B./*@>27e8e*/Memory_l);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	4a8a      	ldr	r2, [pc, #552]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004d3e:	f892 279c 	ldrb.w	r2, [r2, #1948]	; 0x79c
 8004d42:	4413      	add	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]
    /*@>245c4*/VCU_B./*@>27e9a*/Logic_iy/*@>1daf3*/[/*@>1feb6*/0U]/*@>1daf2*/ = /*@>24f6a*/VCU_ConstP./*@>2833e*/pooled32/*@>23778*/[/*@>23773*/(uint32_T)/*@>23775*/rowIdx];
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	4a89      	ldr	r2, [pc, #548]	; (8004f70 <FUNC_Transmission+0x1a60>)
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004d50:	4b85      	ldr	r3, [pc, #532]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004d52:	f883 279d 	strb.w	r2, [r3, #1949]	; 0x79d
    /*@>245d0*/VCU_B./*@>27ea0*/Logic_iy/*@>1db06*/[/*@>1febb*/1U]/*@>1db05*/ = /*@>24f70*/VCU_ConstP./*@>28341*/pooled32/*@>23781*/[/*@>2377d*/rowIdx/*@>2377a*/ + /*@>2377e*/8U];
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	4a85      	ldr	r2, [pc, #532]	; (8004f70 <FUNC_Transmission+0x1a60>)
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004d62:	4b81      	ldr	r3, [pc, #516]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004d64:	f883 279e 	strb.w	r2, [r3, #1950]	; 0x79e
 *
 * Block description for '<S213>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>245e8*/VCU_B./*@>27eac*/Uk1_i/*@>82fd*/ = /*@>2510f*/VCU_DW./*@>283b9*/DelayInput1_DSTATE_g;
 8004d68:	4b80      	ldr	r3, [pc, #512]	; (8004f6c <FUNC_Transmission+0x1a5c>)
 8004d6a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004d6e:	497e      	ldr	r1, [pc, #504]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004d70:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    /* CombinatorialLogic: '<S216>/Logic' incorporates:
 *  RelationalOperator: '<S213>/FixPt Relational Operator'
 */
    /*@>245f4*/VCU_B./*@>27eb2*/FixPtRelationalOperator_c/*@>792f*/ = (/*@>245fa*/VCU_B./*@>27eb5*/STW_shift_up_request/*@>792e*/ > /*@>24600*/VCU_B./*@>27eb8*/Uk1_i);
 8004d74:	4b7c      	ldr	r3, [pc, #496]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004d76:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8004d7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d7e:	4b7a      	ldr	r3, [pc, #488]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004d80:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004d84:	2401      	movs	r4, #1
 8004d86:	f00a f8ff 	bl	800ef88 <__aeabi_dcmpgt>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <FUNC_Transmission+0x1884>
 8004d90:	2300      	movs	r3, #0
 8004d92:	461c      	mov	r4, r3
 8004d94:	b2e3      	uxtb	r3, r4
 8004d96:	461a      	mov	r2, r3
 8004d98:	4b73      	ldr	r3, [pc, #460]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004d9a:	f883 279f 	strb.w	r2, [r3, #1951]	; 0x79f
    /* Gain: '<S218>/Gain' */
    /*@>24618*/VCU_B./*@>27ec4*/Gain_m/*@>7937*/ = /*@>1fd9b*/2.0/*@>200ed*/ * /*@>2461e*/VCU_B./*@>27ec7*/DataTypeConversion1;
 8004d9e:	4b72      	ldr	r3, [pc, #456]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004da0:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	4610      	mov	r0, r2
 8004daa:	4619      	mov	r1, r3
 8004dac:	f009 fcaa 	bl	800e704 <__adddf3>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	496c      	ldr	r1, [pc, #432]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004db6:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    /* RelationalOperator: '<S218>/Relational Operator' incorporates:
 *  Constant: '<S218>/Constant'
 */
    /*@>24630*/VCU_B./*@>27ed0*/RelationalOperator_d/*@>793b*/ = (/*@>24636*/VCU_B./*@>27ed3*/Gain_m/*@>793a*/ > /*@>1fd9d*/169.0);
 8004dba:	4b6b      	ldr	r3, [pc, #428]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004dbc:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	a363      	add	r3, pc, #396	; (adr r3, 8004f58 <FUNC_Transmission+0x1a48>)
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	f00a f8db 	bl	800ef88 <__aeabi_dcmpgt>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <FUNC_Transmission+0x18cc>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	461c      	mov	r4, r3
 8004ddc:	b2e3      	uxtb	r3, r4
 8004dde:	461a      	mov	r2, r3
 8004de0:	4b61      	ldr	r3, [pc, #388]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004de2:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0
    /* RelationalOperator: '<S218>/Relational Operator1' incorporates:
 *  Constant: '<S218>/Constant1'
 */
    /*@>24642*/VCU_B./*@>27ed9*/RelationalOperator1_a/*@>793f*/ = (/*@>24648*/VCU_B./*@>27edc*/Gain_m/*@>793e*/ > /*@>1fd9e*/269.0);
 8004de6:	4b60      	ldr	r3, [pc, #384]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004de8:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004dec:	2101      	movs	r1, #1
 8004dee:	460c      	mov	r4, r1
 8004df0:	4610      	mov	r0, r2
 8004df2:	4619      	mov	r1, r3
 8004df4:	a35a      	add	r3, pc, #360	; (adr r3, 8004f60 <FUNC_Transmission+0x1a50>)
 8004df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfa:	f00a f8c5 	bl	800ef88 <__aeabi_dcmpgt>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <FUNC_Transmission+0x18f8>
 8004e04:	2300      	movs	r3, #0
 8004e06:	461c      	mov	r4, r3
 8004e08:	b2e3      	uxtb	r3, r4
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	4b56      	ldr	r3, [pc, #344]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004e0e:	f883 27a1 	strb.w	r2, [r3, #1953]	; 0x7a1
    /* RelationalOperator: '<S218>/Relational Operator2' incorporates:
 *  Constant: '<S218>/Constant2'
 */
    /*@>24654*/VCU_B./*@>27ee2*/RelationalOperator2_d/*@>7943*/ = (/*@>2465a*/VCU_B./*@>27ee5*/Gain_m/*@>7942*/ > /*@>1fd9f*/360.0);
 8004e12:	4b55      	ldr	r3, [pc, #340]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004e14:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004e18:	2101      	movs	r1, #1
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	4619      	mov	r1, r3
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	4b53      	ldr	r3, [pc, #332]	; (8004f74 <FUNC_Transmission+0x1a64>)
 8004e26:	f00a f8af 	bl	800ef88 <__aeabi_dcmpgt>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <FUNC_Transmission+0x1924>
 8004e30:	2300      	movs	r3, #0
 8004e32:	461c      	mov	r4, r3
 8004e34:	b2e3      	uxtb	r3, r4
 8004e36:	461a      	mov	r2, r3
 8004e38:	4b4b      	ldr	r3, [pc, #300]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004e3a:	f883 27a2 	strb.w	r2, [r3, #1954]	; 0x7a2
    /* Sum: '<S218>/Add' */
    /*@>2466c*/VCU_B./*@>27eee*/Add_j/*@>a76a*/ = /*@>2065e*/(uint8_T)((/*@>20658*/(uint32_T)/*@>24672*/VCU_B./*@>27ef1*/RelationalOperator_d/*@>200dd*/ + /*@>24678*/VCU_B./*@>27ef4*/RelationalOperator1_a)/*@>200d0*/ + /*@>2467e*/VCU_B./*@>27ef7*/RelationalOperator2_d);
 8004e3e:	4b4a      	ldr	r3, [pc, #296]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004e40:	f893 27a0 	ldrb.w	r2, [r3, #1952]	; 0x7a0
 8004e44:	4b48      	ldr	r3, [pc, #288]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004e46:	f893 37a1 	ldrb.w	r3, [r3, #1953]	; 0x7a1
 8004e4a:	4413      	add	r3, r2
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	4b46      	ldr	r3, [pc, #280]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004e50:	f893 37a2 	ldrb.w	r3, [r3, #1954]	; 0x7a2
 8004e54:	4413      	add	r3, r2
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	4b43      	ldr	r3, [pc, #268]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004e5a:	f883 273f 	strb.w	r2, [r3, #1855]	; 0x73f
 *
 * Block description for '<S214>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>24690*/VCU_B./*@>27f00*/Uk1_b/*@>8309*/ = /*@>25127*/VCU_DW./*@>283c5*/DelayInput1_DSTATE_ga;
 8004e5e:	4b43      	ldr	r3, [pc, #268]	; (8004f6c <FUNC_Transmission+0x1a5c>)
 8004e60:	f893 20de 	ldrb.w	r2, [r3, #222]	; 0xde
 8004e64:	4b40      	ldr	r3, [pc, #256]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004e66:	f883 2740 	strb.w	r2, [r3, #1856]	; 0x740
    /* RelationalOperator: '<S214>/FixPt Relational Operator' */
    /*@>246a8*/VCU_B./*@>27f0c*/FixPtRelationalOperator_m/*@>794e*/ = (/*@>246ae*/VCU_B./*@>27f0f*/Add_j/*@>794d*/ > /*@>246b4*/VCU_B./*@>27f12*/Uk1_b);
 8004e6a:	4b3f      	ldr	r3, [pc, #252]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004e6c:	f893 273f 	ldrb.w	r2, [r3, #1855]	; 0x73f
 8004e70:	4b3d      	ldr	r3, [pc, #244]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004e72:	f893 3740 	ldrb.w	r3, [r3, #1856]	; 0x740
 8004e76:	429a      	cmp	r2, r3
 8004e78:	bf8c      	ite	hi
 8004e7a:	2301      	movhi	r3, #1
 8004e7c:	2300      	movls	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	461a      	mov	r2, r3
 8004e82:	4b39      	ldr	r3, [pc, #228]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004e84:	f883 27a3 	strb.w	r2, [r3, #1955]	; 0x7a3
    /* RelationalOperator: '<S210>/Compare' incorporates:
 *  Constant: '<S210>/Constant'
 */
    /*@>246de*/VCU_B./*@>27f27*/Compare_ha/*@>7952*/ = (/*@>246e4*/VCU_B./*@>27f2a*/Add_j/*@>7951*/ >= /*@>1fda2*/3);
 8004e88:	4b37      	ldr	r3, [pc, #220]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004e8a:	f893 373f 	ldrb.w	r3, [r3, #1855]	; 0x73f
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	bf8c      	ite	hi
 8004e92:	2301      	movhi	r3, #1
 8004e94:	2300      	movls	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4b33      	ldr	r3, [pc, #204]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004e9c:	f883 27a4 	strb.w	r2, [r3, #1956]	; 0x7a4
    /* UnitDelay: '<S192>/Unit Delay' */
    /*@>246f0*/VCU_B./*@>27f30*/UnitDelay_p/*@>8315*/ = /*@>25133*/VCU_DW./*@>283cb*/UnitDelay_DSTATE_b;
 8004ea0:	4b32      	ldr	r3, [pc, #200]	; (8004f6c <FUNC_Transmission+0x1a5c>)
 8004ea2:	f893 20fa 	ldrb.w	r2, [r3, #250]	; 0xfa
 8004ea6:	4b30      	ldr	r3, [pc, #192]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004ea8:	f883 27a5 	strb.w	r2, [r3, #1957]	; 0x7a5
    /* UnitDelay: '<S193>/Unit Delay1' */
    /*@>246fc*/VCU_B./*@>27f36*/Timeout_i/*@>8321*/ = /*@>25139*/VCU_DW./*@>283ce*/UnitDelay1_DSTATE_k;
 8004eac:	4b2f      	ldr	r3, [pc, #188]	; (8004f6c <FUNC_Transmission+0x1a5c>)
 8004eae:	f893 20fb 	ldrb.w	r2, [r3, #251]	; 0xfb
 8004eb2:	4b2d      	ldr	r3, [pc, #180]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004eb4:	f883 27a6 	strb.w	r2, [r3, #1958]	; 0x7a6
    /* RelationalOperator: '<S212>/Compare' incorporates:
 *  Constant: '<S212>/Constant'
 */
    /*@>24708*/VCU_B./*@>27f3c*/Compare_e/*@>7958*/ = (/*@>2470e*/VCU_B./*@>27f3f*/Add_j/*@>7957*/ == /*@>1fda3*/0);
 8004eb8:	4b2b      	ldr	r3, [pc, #172]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004eba:	f893 373f 	ldrb.w	r3, [r3, #1855]	; 0x73f
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bf0c      	ite	eq
 8004ec2:	2301      	moveq	r3, #1
 8004ec4:	2300      	movne	r3, #0
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4b27      	ldr	r3, [pc, #156]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004ecc:	f883 27a7 	strb.w	r2, [r3, #1959]	; 0x7a7
    /* RelationalOperator: '<S211>/Compare' incorporates:
 *  Constant: '<S211>/Constant'
 */
    /*@>2471a*/VCU_B./*@>27f45*/Compare_a/*@>795c*/ = (/*@>24720*/VCU_B./*@>27f48*/x_clutch_STW/*@>795b*/ < /*@>1fda4*/15.0);
 8004ed0:	4b25      	ldr	r3, [pc, #148]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004ed2:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eda:	2101      	movs	r1, #1
 8004edc:	460c      	mov	r4, r1
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	4b24      	ldr	r3, [pc, #144]	; (8004f78 <FUNC_Transmission+0x1a68>)
 8004ee8:	f00a f830 	bl	800ef4c <__aeabi_dcmplt>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <FUNC_Transmission+0x19e6>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	461c      	mov	r4, r3
 8004ef6:	b2e3      	uxtb	r3, r4
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004efc:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
    /* Logic: '<S193>/Logical Operator1' */
    /*@>2472c*/VCU_B./*@>27f4e*/FailSafefirstgear/*@>7962*/ = (/*@>24732*/VCU_B./*@>27f51*/Compare_e/*@>7961*/ && /*@>24738*/VCU_B./*@>27f54*/Compare_a);
 8004f00:	4b19      	ldr	r3, [pc, #100]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004f02:	f893 37a7 	ldrb.w	r3, [r3, #1959]	; 0x7a7
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d006      	beq.n	8004f18 <FUNC_Transmission+0x1a08>
 8004f0a:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004f0c:	f893 37a8 	ldrb.w	r3, [r3, #1960]	; 0x7a8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <FUNC_Transmission+0x1a08>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <FUNC_Transmission+0x1a0a>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004f1e:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
    /* CombinatorialLogic: '<S216>/Logic' incorporates:
 *  Logic: '<S193>/Logical Operator'
 *  Memory: '<S216>/Memory'
 */
    /*@>24744*/VCU_B./*@>27f5a*/LogicalOperator_i/*@>7971*/ = (/*@>2474a*/VCU_B./*@>27f5d*/FixPtRelationalOperator_m/*@>7967*/ || /*@>24750*/VCU_B./*@>27f60*/Compare_ha/*@>796a*/ || /*@>24756*/VCU_B./*@>27f63*/UnitDelay_p/*@>796d*/ || /*@>2475c*/VCU_B./*@>27f66*/Timeout_i/*@>7970*/ || /*@>24762*/VCU_B./*@>27f69*/FailSafefirstgear);
 8004f22:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004f24:	f893 37a3 	ldrb.w	r3, [r3, #1955]	; 0x7a3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d113      	bne.n	8004f54 <FUNC_Transmission+0x1a44>
 8004f2c:	4b0e      	ldr	r3, [pc, #56]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004f2e:	f893 37a4 	ldrb.w	r3, [r3, #1956]	; 0x7a4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10e      	bne.n	8004f54 <FUNC_Transmission+0x1a44>
 8004f36:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004f38:	f893 37a5 	ldrb.w	r3, [r3, #1957]	; 0x7a5
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d109      	bne.n	8004f54 <FUNC_Transmission+0x1a44>
 8004f40:	4b09      	ldr	r3, [pc, #36]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004f42:	f893 37a6 	ldrb.w	r3, [r3, #1958]	; 0x7a6
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d104      	bne.n	8004f54 <FUNC_Transmission+0x1a44>
 8004f4a:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <FUNC_Transmission+0x1a58>)
 8004f4c:	f893 37a9 	ldrb.w	r3, [r3, #1961]	; 0x7a9
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d013      	beq.n	8004f7c <FUNC_Transmission+0x1a6c>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e012      	b.n	8004f7e <FUNC_Transmission+0x1a6e>
 8004f58:	00000000 	.word	0x00000000
 8004f5c:	40652000 	.word	0x40652000
 8004f60:	00000000 	.word	0x00000000
 8004f64:	4070d000 	.word	0x4070d000
 8004f68:	200008a8 	.word	0x200008a8
 8004f6c:	200010c8 	.word	0x200010c8
 8004f70:	0800f1e8 	.word	0x0800f1e8
 8004f74:	40768000 	.word	0x40768000
 8004f78:	402e0000 	.word	0x402e0000
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	4bb0      	ldr	r3, [pc, #704]	; (8005244 <FUNC_Transmission+0x1d34>)
 8004f82:	f883 27aa 	strb.w	r2, [r3, #1962]	; 0x7aa
    /*@>2476e*/VCU_B./*@>27f6f*/Memory_a/*@>7973*/ = /*@>2513f*/VCU_DW./*@>283d1*/Memory_PreviousInput_al;
 8004f86:	4bb0      	ldr	r3, [pc, #704]	; (8005248 <FUNC_Transmission+0x1d38>)
 8004f88:	f893 2154 	ldrb.w	r2, [r3, #340]	; 0x154
 8004f8c:	4bad      	ldr	r3, [pc, #692]	; (8005244 <FUNC_Transmission+0x1d34>)
 8004f8e:	f883 27ab 	strb.w	r2, [r3, #1963]	; 0x7ab
    /*@>1feda*/rowIdx/*@>1dbdd*/ = /*@>2477a*/VCU_B./*@>27f75*/FixPtRelationalOperator_c;
 8004f92:	4bac      	ldr	r3, [pc, #688]	; (8005244 <FUNC_Transmission+0x1d34>)
 8004f94:	f893 379f 	ldrb.w	r3, [r3, #1951]	; 0x79f
 8004f98:	617b      	str	r3, [r7, #20]
    /*@>1fede*/rowIdx/*@>1dc04*/ = /*@>206b9*/(int32_T)((/*@>206b6*/(uint32_T)/*@>1fee0*/rowIdx/*@>200c7*/ << /*@>1fee2*/1)/*@>200c5*/ + /*@>24780*/VCU_B./*@>27f78*/LogicalOperator_i);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4aa9      	ldr	r2, [pc, #676]	; (8005244 <FUNC_Transmission+0x1d34>)
 8004fa0:	f892 27aa 	ldrb.w	r2, [r2, #1962]	; 0x7aa
 8004fa4:	4413      	add	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]
    /*@>1fee5*/rowIdx/*@>1dc2b*/ = /*@>206c9*/(int32_T)((/*@>206c6*/(uint32_T)/*@>1fee7*/rowIdx/*@>200bd*/ << /*@>1fee9*/1)/*@>200bb*/ + /*@>2478c*/VCU_B./*@>27f7e*/Memory_a);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	4aa5      	ldr	r2, [pc, #660]	; (8005244 <FUNC_Transmission+0x1d34>)
 8004fae:	f892 27ab 	ldrb.w	r2, [r2, #1963]	; 0x7ab
 8004fb2:	4413      	add	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]
    /*@>24792*/VCU_B./*@>27f81*/Logic_iz/*@>1dc41*/[/*@>1feee*/0U]/*@>1dc40*/ = /*@>24f82*/VCU_ConstP./*@>2834a*/pooled32/*@>2379d*/[/*@>23798*/(uint32_T)/*@>2379a*/rowIdx];
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	4aa4      	ldr	r2, [pc, #656]	; (800524c <FUNC_Transmission+0x1d3c>)
 8004fba:	4413      	add	r3, r2
 8004fbc:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004fc0:	4ba0      	ldr	r3, [pc, #640]	; (8005244 <FUNC_Transmission+0x1d34>)
 8004fc2:	f883 27ac 	strb.w	r2, [r3, #1964]	; 0x7ac
    /*@>24798*/VCU_B./*@>27f84*/Logic_iz/*@>1dc54*/[/*@>1fef3*/1U]/*@>1dc53*/ = /*@>24f88*/VCU_ConstP./*@>2834d*/pooled32/*@>237a6*/[/*@>237a2*/rowIdx/*@>2379f*/ + /*@>237a3*/8U];
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	3308      	adds	r3, #8
 8004fca:	4aa0      	ldr	r2, [pc, #640]	; (800524c <FUNC_Transmission+0x1d3c>)
 8004fcc:	4413      	add	r3, r2
 8004fce:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 8004fd2:	4b9c      	ldr	r3, [pc, #624]	; (8005244 <FUNC_Transmission+0x1d34>)
 8004fd4:	f883 27ad 	strb.w	r2, [r3, #1965]	; 0x7ad
    /* CombinatorialLogic: '<S217>/Logic' incorporates:
 *  S-Function (sdspcount2): '<S193>/Counter1'
 */
    /*@>247a4*/VCU_B./*@>27f8a*/Counter1/*@>837f*/ = /*@>1fbd2*/false;
 8004fd8:	4b9a      	ldr	r3, [pc, #616]	; (8005244 <FUNC_Transmission+0x1d34>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 27ae 	strb.w	r2, [r3, #1966]	; 0x7ae
    /* S-Function (sdspcount2): '<S193>/Counter1' */
    /*@>8383*/if (/*@>247b0*/VCU_B./*@>27f90*/LogicalOperator_i) {
 8004fe0:	4b98      	ldr	r3, [pc, #608]	; (8005244 <FUNC_Transmission+0x1d34>)
 8004fe2:	f893 37aa 	ldrb.w	r3, [r3, #1962]	; 0x7aa
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <FUNC_Transmission+0x1ae2>
        /*@>2516f*/VCU_DW./*@>283e6*/Counter1_Count/*@>8387*/ = /*@>26bd3*/0U;
 8004fea:	4b97      	ldr	r3, [pc, #604]	; (8005248 <FUNC_Transmission+0x1d38>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
    }
    /*@>839d*/if (/*@>247da*/VCU_B./*@>27fa5*/Logic_iz/*@>237ab*/[/*@>237a8*/0]) {
 8004ff2:	4b94      	ldr	r3, [pc, #592]	; (8005244 <FUNC_Transmission+0x1d34>)
 8004ff4:	f893 37ac 	ldrb.w	r3, [r3, #1964]	; 0x7ac
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d011      	beq.n	8005020 <FUNC_Transmission+0x1b10>
        /*@>1d689*/if (/*@>2517b*/VCU_DW./*@>283ec*/Counter1_Count/*@>83a2*/ < /*@>1fda9*/60) {
 8004ffc:	4b92      	ldr	r3, [pc, #584]	; (8005248 <FUNC_Transmission+0x1d38>)
 8004ffe:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8005002:	2b3b      	cmp	r3, #59	; 0x3b
 8005004:	d808      	bhi.n	8005018 <FUNC_Transmission+0x1b08>
            /*@>2518d*/VCU_DW./*@>283f5*/Counter1_Count/*@>26c2f*/++;
 8005006:	4b90      	ldr	r3, [pc, #576]	; (8005248 <FUNC_Transmission+0x1d38>)
 8005008:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800500c:	3301      	adds	r3, #1
 800500e:	b2da      	uxtb	r2, r3
 8005010:	4b8d      	ldr	r3, [pc, #564]	; (8005248 <FUNC_Transmission+0x1d38>)
 8005012:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
 8005016:	e003      	b.n	8005020 <FUNC_Transmission+0x1b10>
        } else {
            /*@>25187*/VCU_DW./*@>283f2*/Counter1_Count/*@>83a9*/ = /*@>26bd6*/0U;
 8005018:	4b8b      	ldr	r3, [pc, #556]	; (8005248 <FUNC_Transmission+0x1d38>)
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
        }
    }
    /*@>83bb*/if (/*@>25181*/VCU_DW./*@>283ef*/Counter1_Count/*@>83ba*/ == /*@>1fdaa*/1) {
 8005020:	4b89      	ldr	r3, [pc, #548]	; (8005248 <FUNC_Transmission+0x1d38>)
 8005022:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8005026:	2b01      	cmp	r3, #1
 8005028:	d103      	bne.n	8005032 <FUNC_Transmission+0x1b22>
        /* CombinatorialLogic: '<S217>/Logic' */
        /*@>247f2*/VCU_B./*@>27fb1*/Counter1/*@>83bf*/ = /*@>1fbe1*/true;
 800502a:	4b86      	ldr	r3, [pc, #536]	; (8005244 <FUNC_Transmission+0x1d34>)
 800502c:	2201      	movs	r2, #1
 800502e:	f883 27ae 	strb.w	r2, [r3, #1966]	; 0x7ae
 *
 * Block description for '<S215>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>247fe*/VCU_B./*@>27fb7*/Uk1_m/*@>8402*/ = /*@>25199*/VCU_DW./*@>283f8*/DelayInput1_DSTATE_f;
 8005032:	4b85      	ldr	r3, [pc, #532]	; (8005248 <FUNC_Transmission+0x1d38>)
 8005034:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
 8005038:	4b82      	ldr	r3, [pc, #520]	; (8005244 <FUNC_Transmission+0x1d34>)
 800503a:	f883 2741 	strb.w	r2, [r3, #1857]	; 0x741
    /* RelationalOperator: '<S215>/FixPt Relational Operator' */
    /*@>2480a*/VCU_B./*@>27fbd*/FixPtRelationalOperator_b/*@>797a*/ = (/*@>24810*/VCU_B./*@>27fc0*/Add_j/*@>7979*/ > /*@>24816*/VCU_B./*@>27fc3*/Uk1_m);
 800503e:	4b81      	ldr	r3, [pc, #516]	; (8005244 <FUNC_Transmission+0x1d34>)
 8005040:	f893 273f 	ldrb.w	r2, [r3, #1855]	; 0x73f
 8005044:	4b7f      	ldr	r3, [pc, #508]	; (8005244 <FUNC_Transmission+0x1d34>)
 8005046:	f893 3741 	ldrb.w	r3, [r3, #1857]	; 0x741
 800504a:	429a      	cmp	r2, r3
 800504c:	bf8c      	ite	hi
 800504e:	2301      	movhi	r3, #1
 8005050:	2300      	movls	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	461a      	mov	r2, r3
 8005056:	4b7b      	ldr	r3, [pc, #492]	; (8005244 <FUNC_Transmission+0x1d34>)
 8005058:	f883 27af 	strb.w	r2, [r3, #1967]	; 0x7af
    /* CombinatorialLogic: '<S217>/Logic' incorporates:
 *  Logic: '<S193>/Logical Operator2'
 *  Memory: '<S217>/Memory'
 */
    /*@>24822*/VCU_B./*@>27fc9*/LogicalOperator2/*@>7980*/ = (/*@>24828*/VCU_B./*@>27fcc*/LogicalOperator_i/*@>797f*/ || /*@>2482e*/VCU_B./*@>27fcf*/FixPtRelationalOperator_b);
 800505c:	4b79      	ldr	r3, [pc, #484]	; (8005244 <FUNC_Transmission+0x1d34>)
 800505e:	f893 37aa 	ldrb.w	r3, [r3, #1962]	; 0x7aa
 8005062:	2b00      	cmp	r3, #0
 8005064:	d104      	bne.n	8005070 <FUNC_Transmission+0x1b60>
 8005066:	4b77      	ldr	r3, [pc, #476]	; (8005244 <FUNC_Transmission+0x1d34>)
 8005068:	f893 37af 	ldrb.w	r3, [r3, #1967]	; 0x7af
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <FUNC_Transmission+0x1b64>
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <FUNC_Transmission+0x1b66>
 8005074:	2300      	movs	r3, #0
 8005076:	b2da      	uxtb	r2, r3
 8005078:	4b72      	ldr	r3, [pc, #456]	; (8005244 <FUNC_Transmission+0x1d34>)
 800507a:	f883 27b0 	strb.w	r2, [r3, #1968]	; 0x7b0
    /*@>24840*/VCU_B./*@>27fd8*/Memory_g/*@>7982*/ = /*@>2519f*/VCU_DW./*@>283fb*/Memory_PreviousInput_k;
 800507e:	4b72      	ldr	r3, [pc, #456]	; (8005248 <FUNC_Transmission+0x1d38>)
 8005080:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
 8005084:	4b6f      	ldr	r3, [pc, #444]	; (8005244 <FUNC_Transmission+0x1d34>)
 8005086:	f883 27b1 	strb.w	r2, [r3, #1969]	; 0x7b1
    /*@>1ff12*/rowIdx/*@>1dd2b*/ = /*@>24852*/VCU_B./*@>27fe1*/Counter1;
 800508a:	4b6e      	ldr	r3, [pc, #440]	; (8005244 <FUNC_Transmission+0x1d34>)
 800508c:	f893 37ae 	ldrb.w	r3, [r3, #1966]	; 0x7ae
 8005090:	617b      	str	r3, [r7, #20]
    /*@>1ff16*/rowIdx/*@>1dd52*/ = /*@>2075f*/(int32_T)((/*@>2075c*/(uint32_T)/*@>1ff18*/rowIdx/*@>200a3*/ << /*@>1ff1a*/1)/*@>200a1*/ + /*@>2485e*/VCU_B./*@>27fe7*/LogicalOperator2);
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	4a6b      	ldr	r2, [pc, #428]	; (8005244 <FUNC_Transmission+0x1d34>)
 8005098:	f892 27b0 	ldrb.w	r2, [r2, #1968]	; 0x7b0
 800509c:	4413      	add	r3, r2
 800509e:	617b      	str	r3, [r7, #20]
    /*@>1ff1d*/rowIdx/*@>1dd79*/ = /*@>20769*/(int32_T)((/*@>20766*/(uint32_T)/*@>1ff1f*/rowIdx/*@>20099*/ << /*@>1ff21*/1)/*@>20097*/ + /*@>2486a*/VCU_B./*@>27fed*/Memory_g);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	4a67      	ldr	r2, [pc, #412]	; (8005244 <FUNC_Transmission+0x1d34>)
 80050a6:	f892 27b1 	ldrb.w	r2, [r2, #1969]	; 0x7b1
 80050aa:	4413      	add	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]
    /*@>24870*/VCU_B./*@>27ff0*/Logic_e/*@>1dd8f*/[/*@>1ff26*/0U]/*@>1dd8e*/ = /*@>24f9a*/VCU_ConstP./*@>28356*/pooled32/*@>237cc*/[/*@>237c7*/(uint32_T)/*@>237c9*/rowIdx];
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	4a66      	ldr	r2, [pc, #408]	; (800524c <FUNC_Transmission+0x1d3c>)
 80050b2:	4413      	add	r3, r2
 80050b4:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 80050b8:	4b62      	ldr	r3, [pc, #392]	; (8005244 <FUNC_Transmission+0x1d34>)
 80050ba:	f883 27b2 	strb.w	r2, [r3, #1970]	; 0x7b2
    /*@>2487c*/VCU_B./*@>27ff6*/Logic_e/*@>1dda2*/[/*@>1ff2b*/1U]/*@>1dda1*/ = /*@>24fa0*/VCU_ConstP./*@>28359*/pooled32/*@>237da*/[/*@>237d6*/rowIdx/*@>237d3*/ + /*@>237d7*/8U];
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	3308      	adds	r3, #8
 80050c2:	4a62      	ldr	r2, [pc, #392]	; (800524c <FUNC_Transmission+0x1d3c>)
 80050c4:	4413      	add	r3, r2
 80050c6:	f893 2330 	ldrb.w	r2, [r3, #816]	; 0x330
 80050ca:	4b5e      	ldr	r3, [pc, #376]	; (8005244 <FUNC_Transmission+0x1d34>)
 80050cc:	f883 27b3 	strb.w	r2, [r3, #1971]	; 0x7b3
    /* DataTypeConversion: '<S139>/Data Type Conversion11' */
    /*@>24882*/VCU_B./*@>27ff9*/Ignition_Cut_o/*@>7986*/ = /*@>24888*/VCU_B./*@>27ffc*/Logic_e/*@>237df*/[/*@>237dc*/0];
 80050d0:	4b5c      	ldr	r3, [pc, #368]	; (8005244 <FUNC_Transmission+0x1d34>)
 80050d2:	f893 37b2 	ldrb.w	r3, [r3, #1970]	; 0x7b2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f009 fc50 	bl	800e97c <__aeabi_ui2d>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4958      	ldr	r1, [pc, #352]	; (8005244 <FUNC_Transmission+0x1d34>)
 80050e2:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    /* S-Function (sdspcount2): '<S192>/Counter' */
    /*@>2488e*/VCU_B./*@>27fff*/Counter/*@>8460*/ = /*@>1fbea*/false;
 80050e6:	4b57      	ldr	r3, [pc, #348]	; (8005244 <FUNC_Transmission+0x1d34>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 27b4 	strb.w	r2, [r3, #1972]	; 0x7b4
    /*@>8464*/if (/*@>2489a*/VCU_B./*@>28005*/LogicalOperator_d) {
 80050ee:	4b55      	ldr	r3, [pc, #340]	; (8005244 <FUNC_Transmission+0x1d34>)
 80050f0:	f893 379b 	ldrb.w	r3, [r3, #1947]	; 0x79b
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <FUNC_Transmission+0x1bf0>
        /*@>251c9*/VCU_DW./*@>2840d*/Counter_Count/*@>8468*/ = /*@>26be2*/0U;
 80050f8:	4b53      	ldr	r3, [pc, #332]	; (8005248 <FUNC_Transmission+0x1d38>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
    }
    /*@>847e*/if (/*@>248ac*/VCU_B./*@>2800e*/Logic_i/*@>237e4*/[/*@>237e1*/0]) {
 8005100:	4b50      	ldr	r3, [pc, #320]	; (8005244 <FUNC_Transmission+0x1d34>)
 8005102:	f893 378b 	ldrb.w	r3, [r3, #1931]	; 0x78b
 8005106:	2b00      	cmp	r3, #0
 8005108:	d012      	beq.n	8005130 <FUNC_Transmission+0x1c20>
        /*@>1d693*/if (/*@>251d5*/VCU_DW./*@>28413*/Counter_Count/*@>8483*/ < /*@>1fdb3*/500) {
 800510a:	4b4f      	ldr	r3, [pc, #316]	; (8005248 <FUNC_Transmission+0x1d38>)
 800510c:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8005110:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005114:	d208      	bcs.n	8005128 <FUNC_Transmission+0x1c18>
            /*@>251e7*/VCU_DW./*@>2841c*/Counter_Count/*@>26c32*/++;
 8005116:	4b4c      	ldr	r3, [pc, #304]	; (8005248 <FUNC_Transmission+0x1d38>)
 8005118:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800511c:	3301      	adds	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	4b49      	ldr	r3, [pc, #292]	; (8005248 <FUNC_Transmission+0x1d38>)
 8005122:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005126:	e003      	b.n	8005130 <FUNC_Transmission+0x1c20>
        } else {
            /*@>251e1*/VCU_DW./*@>28419*/Counter_Count/*@>848a*/ = /*@>26be8*/0U;
 8005128:	4b47      	ldr	r3, [pc, #284]	; (8005248 <FUNC_Transmission+0x1d38>)
 800512a:	2200      	movs	r2, #0
 800512c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
        }
    }
    /*@>849c*/if (/*@>251db*/VCU_DW./*@>28416*/Counter_Count/*@>849b*/ == /*@>1fdb7*/500) {
 8005130:	4b45      	ldr	r3, [pc, #276]	; (8005248 <FUNC_Transmission+0x1d38>)
 8005132:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8005136:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800513a:	d103      	bne.n	8005144 <FUNC_Transmission+0x1c34>
        /*@>248b8*/VCU_B./*@>28014*/Counter/*@>84a0*/ = /*@>1fbf9*/true;
 800513c:	4b41      	ldr	r3, [pc, #260]	; (8005244 <FUNC_Transmission+0x1d34>)
 800513e:	2201      	movs	r2, #1
 8005140:	f883 27b4 	strb.w	r2, [r3, #1972]	; 0x7b4
    }
    /* End of S-Function (sdspcount2): '<S192>/Counter' */

    /* S-Function (sdspcount2): '<S193>/Counter' */
    /*@>248be*/VCU_B./*@>28017*/Counter_d/*@>84e5*/ = /*@>1fbfe*/false;
 8005144:	4b3f      	ldr	r3, [pc, #252]	; (8005244 <FUNC_Transmission+0x1d34>)
 8005146:	2200      	movs	r2, #0
 8005148:	f883 27b5 	strb.w	r2, [r3, #1973]	; 0x7b5
    /*@>84e9*/if (/*@>248ca*/VCU_B./*@>2801d*/LogicalOperator_i) {
 800514c:	4b3d      	ldr	r3, [pc, #244]	; (8005244 <FUNC_Transmission+0x1d34>)
 800514e:	f893 37aa 	ldrb.w	r3, [r3, #1962]	; 0x7aa
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <FUNC_Transmission+0x1c4e>
        /*@>25211*/VCU_DW./*@>2842b*/Counter_Count_i/*@>84ed*/ = /*@>26beb*/0U;
 8005156:	4b3c      	ldr	r3, [pc, #240]	; (8005248 <FUNC_Transmission+0x1d38>)
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    }
    /*@>8503*/if (/*@>248e2*/VCU_B./*@>28029*/Logic_iz/*@>237f8*/[/*@>237f5*/0]) {
 800515e:	4b39      	ldr	r3, [pc, #228]	; (8005244 <FUNC_Transmission+0x1d34>)
 8005160:	f893 37ac 	ldrb.w	r3, [r3, #1964]	; 0x7ac
 8005164:	2b00      	cmp	r3, #0
 8005166:	d011      	beq.n	800518c <FUNC_Transmission+0x1c7c>
        /*@>1d69d*/if (/*@>25217*/VCU_DW./*@>2842e*/Counter_Count_i/*@>8508*/ < /*@>1fdbc*/200) {
 8005168:	4b37      	ldr	r3, [pc, #220]	; (8005248 <FUNC_Transmission+0x1d38>)
 800516a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800516e:	2bc7      	cmp	r3, #199	; 0xc7
 8005170:	d808      	bhi.n	8005184 <FUNC_Transmission+0x1c74>
            /*@>25229*/VCU_DW./*@>28437*/Counter_Count_i/*@>26c33*/++;
 8005172:	4b35      	ldr	r3, [pc, #212]	; (8005248 <FUNC_Transmission+0x1d38>)
 8005174:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8005178:	3301      	adds	r3, #1
 800517a:	b2da      	uxtb	r2, r3
 800517c:	4b32      	ldr	r3, [pc, #200]	; (8005248 <FUNC_Transmission+0x1d38>)
 800517e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8005182:	e003      	b.n	800518c <FUNC_Transmission+0x1c7c>
        } else {
            /*@>25223*/VCU_DW./*@>28434*/Counter_Count_i/*@>850f*/ = /*@>26bee*/0U;
 8005184:	4b30      	ldr	r3, [pc, #192]	; (8005248 <FUNC_Transmission+0x1d38>)
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
        }
    }
    /*@>8521*/if (/*@>2521d*/VCU_DW./*@>28431*/Counter_Count_i/*@>8520*/ == /*@>1fdc2*/180) {
 800518c:	4b2e      	ldr	r3, [pc, #184]	; (8005248 <FUNC_Transmission+0x1d38>)
 800518e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8005192:	2bb4      	cmp	r3, #180	; 0xb4
 8005194:	d103      	bne.n	800519e <FUNC_Transmission+0x1c8e>
        /*@>248fa*/VCU_B./*@>28035*/Counter_d/*@>8525*/ = /*@>1fc0d*/true;
 8005196:	4b2b      	ldr	r3, [pc, #172]	; (8005244 <FUNC_Transmission+0x1d34>)
 8005198:	2201      	movs	r2, #1
 800519a:	f883 27b5 	strb.w	r2, [r3, #1973]	; 0x7b5
    }
    /* End of S-Function (sdspcount2): '<S193>/Counter' */

    /* DataTypeConversion: '<S139>/Data Type Conversion8' */
    /*@>24912*/VCU_B./*@>28041*/VOVG_ShiftUp_k/*@>798b*/ = /*@>24918*/VCU_B./*@>28044*/Logic_iz/*@>237fd*/[/*@>237fa*/0];
 800519e:	4b29      	ldr	r3, [pc, #164]	; (8005244 <FUNC_Transmission+0x1d34>)
 80051a0:	f893 37ac 	ldrb.w	r3, [r3, #1964]	; 0x7ac
 80051a4:	4618      	mov	r0, r3
 80051a6:	f009 fbe9 	bl	800e97c <__aeabi_ui2d>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	4925      	ldr	r1, [pc, #148]	; (8005244 <FUNC_Transmission+0x1d34>)
 80051b0:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 *
 * Block description for '<S204>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>2492a*/VCU_B./*@>2804d*/Uk1_f/*@>8568*/ = /*@>2523b*/VCU_DW./*@>2843d*/DelayInput1_DSTATE_p;
 80051b4:	4b24      	ldr	r3, [pc, #144]	; (8005248 <FUNC_Transmission+0x1d38>)
 80051b6:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
 80051ba:	4b22      	ldr	r3, [pc, #136]	; (8005244 <FUNC_Transmission+0x1d34>)
 80051bc:	f883 2742 	strb.w	r2, [r3, #1858]	; 0x742
    /* RelationalOperator: '<S204>/FixPt Relational Operator' */
    /*@>24942*/VCU_B./*@>28059*/FixPtRelationalOperator_d/*@>7990*/ = (/*@>24948*/VCU_B./*@>2805c*/Add_c/*@>798f*/ < /*@>2494e*/VCU_B./*@>2805f*/Uk1_f);
 80051c0:	4b20      	ldr	r3, [pc, #128]	; (8005244 <FUNC_Transmission+0x1d34>)
 80051c2:	f893 273e 	ldrb.w	r2, [r3, #1854]	; 0x73e
 80051c6:	4b1f      	ldr	r3, [pc, #124]	; (8005244 <FUNC_Transmission+0x1d34>)
 80051c8:	f893 3742 	ldrb.w	r3, [r3, #1858]	; 0x742
 80051cc:	429a      	cmp	r2, r3
 80051ce:	bf34      	ite	cc
 80051d0:	2301      	movcc	r3, #1
 80051d2:	2300      	movcs	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	4b1a      	ldr	r3, [pc, #104]	; (8005244 <FUNC_Transmission+0x1d34>)
 80051da:	f883 27b6 	strb.w	r2, [r3, #1974]	; 0x7b6
    /* Switch: '<S191>/Switch' */
    /*@>1d6a7*/if (/*@>24960*/VCU_B./*@>28068*/Logic_i/*@>23802*/[/*@>237ff*/0]) {
 80051de:	4b19      	ldr	r3, [pc, #100]	; (8005244 <FUNC_Transmission+0x1d34>)
 80051e0:	f893 378b 	ldrb.w	r3, [r3, #1931]	; 0x78b
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d006      	beq.n	80051f6 <FUNC_Transmission+0x1ce6>
        /* MinMax: '<S191>/MinMax' incorporates:
 *  Constant: '<S191>/Constant'
 */
        /*@>2497e*/VCU_B./*@>28077*/Switch_g/*@>1d6aa*/ = /*@>1fdba*/20.0;
 80051e8:	4916      	ldr	r1, [pc, #88]	; (8005244 <FUNC_Transmission+0x1d34>)
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	4b18      	ldr	r3, [pc, #96]	; (8005250 <FUNC_Transmission+0x1d40>)
 80051f0:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 80051f4:	e006      	b.n	8005204 <FUNC_Transmission+0x1cf4>
    } else {
        /* MinMax: '<S191>/MinMax' incorporates:
 *  Constant: '<S191>/Constant1'
 */
        /*@>24978*/VCU_B./*@>28074*/Switch_g/*@>8578*/ = /*@>1fdbb*/0.0;
 80051f6:	4913      	ldr	r1, [pc, #76]	; (8005244 <FUNC_Transmission+0x1d34>)
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    }
    /* End of Switch: '<S191>/Switch' */

    /* MinMax: '<S191>/MinMax' */
    /*@>20b3a*/if ((/*@>249a2*/VCU_B./*@>28089*/x_clutch_STW/*@>20b33*/ > /*@>249a8*/VCU_B./*@>2808c*/Switch_g)/*@>20b36*/ || /*@>2297a*/rtIsNaN(/*@>249ae*/VCU_B./*@>2808f*/Switch_g)) {
 8005204:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <FUNC_Transmission+0x1d34>)
 8005206:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800520a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800520e:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <FUNC_Transmission+0x1d34>)
 8005210:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8005214:	f009 feb8 	bl	800ef88 <__aeabi_dcmpgt>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d109      	bne.n	8005232 <FUNC_Transmission+0x1d22>
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <FUNC_Transmission+0x1d34>)
 8005220:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8005224:	4610      	mov	r0, r2
 8005226:	4619      	mov	r1, r3
 8005228:	f001 f97a 	bl	8006520 <rtIsNaN>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d010      	beq.n	8005254 <FUNC_Transmission+0x1d44>
        /*@>249c0*/VCU_B./*@>28098*/MinMax/*@>20b3c*/ = /*@>249c6*/VCU_B./*@>2809b*/x_clutch_STW;
 8005232:	4b04      	ldr	r3, [pc, #16]	; (8005244 <FUNC_Transmission+0x1d34>)
 8005234:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	4901      	ldr	r1, [pc, #4]	; (8005244 <FUNC_Transmission+0x1d34>)
 800523e:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8005242:	e00d      	b.n	8005260 <FUNC_Transmission+0x1d50>
 8005244:	200008a8 	.word	0x200008a8
 8005248:	200010c8 	.word	0x200010c8
 800524c:	0800f1e8 	.word	0x0800f1e8
 8005250:	40340000 	.word	0x40340000
    } else {
        /*@>249b4*/VCU_B./*@>28092*/MinMax/*@>20b39*/ = /*@>249ba*/VCU_B./*@>28095*/Switch_g;
 8005254:	4b9e      	ldr	r3, [pc, #632]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 8005256:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800525a:	499d      	ldr	r1, [pc, #628]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 800525c:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
    }
    /*@>20b72*/if (!/*@<22950*/(/*@>249e4*/VCU_B./*@>280aa*/MinMax/*@>20b6b*/ > /*@>20f2c*/0.0)) {
 8005260:	4b9b      	ldr	r3, [pc, #620]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 8005262:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8005266:	2101      	movs	r1, #1
 8005268:	460c      	mov	r4, r1
 800526a:	4610      	mov	r0, r2
 800526c:	4619      	mov	r1, r3
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	f009 fe87 	bl	800ef88 <__aeabi_dcmpgt>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <FUNC_Transmission+0x1d74>
 8005280:	2300      	movs	r3, #0
 8005282:	461c      	mov	r4, r3
 8005284:	b2e3      	uxtb	r3, r4
 8005286:	f083 0301 	eor.w	r3, r3, #1
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d006      	beq.n	800529e <FUNC_Transmission+0x1d8e>
        /*@>249f6*/VCU_B./*@>280b3*/MinMax/*@>20b71*/ = /*@>20f30*/0.0;
 8005290:	498f      	ldr	r1, [pc, #572]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 8005292:	f04f 0200 	mov.w	r2, #0
 8005296:	f04f 0300 	mov.w	r3, #0
 800529a:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
    }
    /* RelationalOperator: '<S194>/Compare' incorporates:
 *  Constant: '<S194>/Constant'
 */
    /*@>24a0e*/VCU_B./*@>280bf*/Compare_ao/*@>7996*/ = (/*@>24a14*/VCU_B./*@>280c2*/MinMax/*@>7995*/ > /*@>1fdc1*/1.0);
 800529e:	4b8c      	ldr	r3, [pc, #560]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80052a0:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80052a4:	2101      	movs	r1, #1
 80052a6:	460c      	mov	r4, r1
 80052a8:	4610      	mov	r0, r2
 80052aa:	4619      	mov	r1, r3
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	4b88      	ldr	r3, [pc, #544]	; (80054d4 <FUNC_Transmission+0x1fc4>)
 80052b2:	f009 fe69 	bl	800ef88 <__aeabi_dcmpgt>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <FUNC_Transmission+0x1db0>
 80052bc:	2300      	movs	r3, #0
 80052be:	461c      	mov	r4, r3
 80052c0:	b2e3      	uxtb	r3, r4
 80052c2:	461a      	mov	r2, r3
 80052c4:	4b82      	ldr	r3, [pc, #520]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80052c6:	f883 27b7 	strb.w	r2, [r3, #1975]	; 0x7b7
    /* DataTypeConversion: '<S139>/Data Type Conversion12' */
    /*@>24a26*/VCU_B./*@>280cb*/VOVG_IN_h/*@>7999*/ = /*@>24a2c*/VCU_B./*@>280ce*/Compare_ao;
 80052ca:	4b81      	ldr	r3, [pc, #516]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80052cc:	f893 37b7 	ldrb.w	r3, [r3, #1975]	; 0x7b7
 80052d0:	4618      	mov	r0, r3
 80052d2:	f009 fb53 	bl	800e97c <__aeabi_ui2d>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	497d      	ldr	r1, [pc, #500]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80052dc:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    /* Sum: '<S191>/Add' */
    /*@>24a38*/VCU_B./*@>280d4*/Add/*@>a76f*/ = /*@>24a3e*/VCU_B./*@>280d7*/MinMax/*@>a76c*/ - /*@>24a44*/VCU_B./*@>280da*/x_clutch_b;
 80052e0:	4b7b      	ldr	r3, [pc, #492]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80052e2:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 80052e6:	4b7a      	ldr	r3, [pc, #488]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80052e8:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	f009 fa06 	bl	800e700 <__aeabi_dsub>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4975      	ldr	r1, [pc, #468]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80052fa:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    /* RelationalOperator: '<S196>/Compare' incorporates:
 *  Constant: '<S196>/Constant'
 */
    /*@>24a4a*/VCU_B./*@>280dd*/Compare_gu/*@>79a2*/ = (/*@>24a50*/VCU_B./*@>280e0*/Add/*@>79a1*/ < /*@>1fdc4*/-0.5);
 80052fe:	4b74      	ldr	r3, [pc, #464]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 8005300:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8005304:	2101      	movs	r1, #1
 8005306:	460c      	mov	r4, r1
 8005308:	4610      	mov	r0, r2
 800530a:	4619      	mov	r1, r3
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	4b71      	ldr	r3, [pc, #452]	; (80054d8 <FUNC_Transmission+0x1fc8>)
 8005312:	f009 fe1b 	bl	800ef4c <__aeabi_dcmplt>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <FUNC_Transmission+0x1e10>
 800531c:	2300      	movs	r3, #0
 800531e:	461c      	mov	r4, r3
 8005320:	b2e3      	uxtb	r3, r4
 8005322:	461a      	mov	r2, r3
 8005324:	4b6a      	ldr	r3, [pc, #424]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 8005326:	f883 27b8 	strb.w	r2, [r3, #1976]	; 0x7b8
    /* Lookup_n-D: '<S191>/Duty Cycle MHJ9' */
    /*@>24a5c*/VCU_B./*@>280e6*/DutyCycleMHJ9/*@>a84c*/ = /*@>2297e*/look1_binlxpw(/*@>24a62*/VCU_B./*@>280e9*/Add, /*@>24fa6*/VCU_ConstP./*@>2835c*/pooled23, /*@>24fac*/VCU_ConstP./*@>2835f*/pooled22, /*@>1fce1*/14U);
 800532a:	4b69      	ldr	r3, [pc, #420]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 800532c:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8005330:	210e      	movs	r1, #14
 8005332:	9100      	str	r1, [sp, #0]
 8005334:	4610      	mov	r0, r2
 8005336:	4619      	mov	r1, r3
 8005338:	4a68      	ldr	r2, [pc, #416]	; (80054dc <FUNC_Transmission+0x1fcc>)
 800533a:	4b69      	ldr	r3, [pc, #420]	; (80054e0 <FUNC_Transmission+0x1fd0>)
 800533c:	f000 fcd8 	bl	8005cf0 <look1_binlxpw>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4962      	ldr	r1, [pc, #392]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 8005346:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    /* Product: '<S191>/Product1' */
    /*@>24a6e*/VCU_B./*@>280ef*/Product1/*@>79b0*/ = /*@>24a74*/VCU_B./*@>280f2*/DutyCycleMHJ9/*@>20071*/ * /*@>20864*/(real_T)/*@>24a7a*/VCU_B./*@>280f5*/Compare_gu;
 800534a:	4b61      	ldr	r3, [pc, #388]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 800534c:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8005350:	4b5f      	ldr	r3, [pc, #380]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 8005352:	f893 37b8 	ldrb.w	r3, [r3, #1976]	; 0x7b8
 8005356:	4618      	mov	r0, r3
 8005358:	f009 fb10 	bl	800e97c <__aeabi_ui2d>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4620      	mov	r0, r4
 8005362:	4629      	mov	r1, r5
 8005364:	f009 fb80 	bl	800ea68 <__aeabi_dmul>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4958      	ldr	r1, [pc, #352]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 800536e:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
    /* RelationalOperator: '<S195>/Compare' incorporates:
 *  Constant: '<S195>/Constant'
 */
    /*@>24a98*/VCU_B./*@>28104*/Compare_eh/*@>79b4*/ = (/*@>24a9e*/VCU_B./*@>28107*/x_clutch_b/*@>79b3*/ > /*@>1fdc8*/20.0);
 8005372:	4b57      	ldr	r3, [pc, #348]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 8005374:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	2101      	movs	r1, #1
 800537e:	460c      	mov	r4, r1
 8005380:	4610      	mov	r0, r2
 8005382:	4619      	mov	r1, r3
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	4b56      	ldr	r3, [pc, #344]	; (80054e4 <FUNC_Transmission+0x1fd4>)
 800538a:	f009 fdfd 	bl	800ef88 <__aeabi_dcmpgt>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <FUNC_Transmission+0x1e88>
 8005394:	2300      	movs	r3, #0
 8005396:	461c      	mov	r4, r3
 8005398:	b2e3      	uxtb	r3, r4
 800539a:	461a      	mov	r2, r3
 800539c:	4b4c      	ldr	r3, [pc, #304]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 800539e:	f883 27b9 	strb.w	r2, [r3, #1977]	; 0x7b9
    /* Switch: '<S191>/Switch1' incorporates:
 *  Constant: '<S191>/Constant2'
 *  Constant: '<S191>/Constant3'
 */
    /*@>1d6b1*/if (/*@>24ad4*/VCU_B./*@>28122*/Compare_eh) {
 80053a2:	4b4b      	ldr	r3, [pc, #300]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80053a4:	f893 37b9 	ldrb.w	r3, [r3, #1977]	; 0x7b9
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <FUNC_Transmission+0x1eac>
        /*@>24afe*/VCU_B./*@>28137*/Switch1/*@>1d6b4*/ = /*@>1fdc9*/2.0;
 80053ac:	4948      	ldr	r1, [pc, #288]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053b6:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
 80053ba:	e005      	b.n	80053c8 <FUNC_Transmission+0x1eb8>
    } else {
        /*@>24af8*/VCU_B./*@>28134*/Switch1/*@>85b3*/ = /*@>1fdca*/1.0;
 80053bc:	4944      	ldr	r1, [pc, #272]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	4b44      	ldr	r3, [pc, #272]	; (80054d4 <FUNC_Transmission+0x1fc4>)
 80053c4:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    }
    /* End of Switch: '<S191>/Switch1' */

    /* Product: '<S191>/Product2' */
    /*@>24b34*/VCU_B./*@>28152*/Product2/*@>79bc*/ = /*@>24b3a*/VCU_B./*@>28155*/Product1/*@>2006d*/ * /*@>24b40*/VCU_B./*@>28158*/Switch1;
 80053c8:	4b41      	ldr	r3, [pc, #260]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80053ca:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 80053ce:	4b40      	ldr	r3, [pc, #256]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80053d0:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 80053d4:	f009 fb48 	bl	800ea68 <__aeabi_dmul>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	493c      	ldr	r1, [pc, #240]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80053de:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    /* DataTypeConversion: '<S139>/Data Type Conversion15' */
    /*@>24b64*/VCU_B./*@>2816a*/MHJ9_OUT_d/*@>79bf*/ = /*@>24b6a*/VCU_B./*@>2816d*/Product2;
 80053e2:	4b3b      	ldr	r3, [pc, #236]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80053e4:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80053e8:	4939      	ldr	r1, [pc, #228]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80053ea:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    /* RelationalOperator: '<S197>/Compare' incorporates:
 *  Constant: '<S197>/Constant'
 */
    /*@>24b82*/VCU_B./*@>28179*/Compare_m/*@>79c3*/ = (/*@>24b88*/VCU_B./*@>2817c*/Add/*@>79c2*/ > /*@>1fdd0*/0.0);
 80053ee:	4b38      	ldr	r3, [pc, #224]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80053f0:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 80053f4:	2101      	movs	r1, #1
 80053f6:	460c      	mov	r4, r1
 80053f8:	4610      	mov	r0, r2
 80053fa:	4619      	mov	r1, r3
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	f009 fdc0 	bl	800ef88 <__aeabi_dcmpgt>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <FUNC_Transmission+0x1f02>
 800540e:	2300      	movs	r3, #0
 8005410:	461c      	mov	r4, r3
 8005412:	b2e3      	uxtb	r3, r4
 8005414:	461a      	mov	r2, r3
 8005416:	4b2e      	ldr	r3, [pc, #184]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 8005418:	f883 27ba 	strb.w	r2, [r3, #1978]	; 0x7ba
    /* Product: '<S191>/Product3' */
    /*@>24bb8*/VCU_B./*@>28194*/Product3/*@>79ca*/ = /*@>24bbe*/VCU_B./*@>28197*/DutyCycleMHJ9/*@>20069*/ * /*@>208a1*/(real_T)/*@>24bc4*/VCU_B./*@>2819a*/Compare_m;
 800541c:	4b2c      	ldr	r3, [pc, #176]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 800541e:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8005422:	4b2b      	ldr	r3, [pc, #172]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 8005424:	f893 37ba 	ldrb.w	r3, [r3, #1978]	; 0x7ba
 8005428:	4618      	mov	r0, r3
 800542a:	f009 faa7 	bl	800e97c <__aeabi_ui2d>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	4620      	mov	r0, r4
 8005434:	4629      	mov	r1, r5
 8005436:	f009 fb17 	bl	800ea68 <__aeabi_dmul>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4924      	ldr	r1, [pc, #144]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 8005440:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
    /* DataTypeConversion: '<S139>/Data Type Conversion14' */
    /*@>24be8*/VCU_B./*@>281ac*/MHJ9_IN_e/*@>79cd*/ = /*@>24bee*/VCU_B./*@>281af*/Product3;
 8005444:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 8005446:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	; 0xd8
 800544a:	4921      	ldr	r1, [pc, #132]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 800544c:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
    /* RelationalOperator: '<S198>/Compare' incorporates:
 *  Constant: '<S198>/Constant'
 */
    /*@>24c12*/VCU_B./*@>281c1*/Compare_md/*@>79d1*/ = (/*@>24c18*/VCU_B./*@>281c4*/Add/*@>79d0*/ < /*@>1fdd4*/-20.0);
 8005450:	4b1f      	ldr	r3, [pc, #124]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 8005452:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8005456:	2101      	movs	r1, #1
 8005458:	460c      	mov	r4, r1
 800545a:	4610      	mov	r0, r2
 800545c:	4619      	mov	r1, r3
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	4b21      	ldr	r3, [pc, #132]	; (80054e8 <FUNC_Transmission+0x1fd8>)
 8005464:	f009 fd72 	bl	800ef4c <__aeabi_dcmplt>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <FUNC_Transmission+0x1f62>
 800546e:	2300      	movs	r3, #0
 8005470:	461c      	mov	r4, r3
 8005472:	b2e3      	uxtb	r3, r4
 8005474:	461a      	mov	r2, r3
 8005476:	4b16      	ldr	r3, [pc, #88]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 8005478:	f883 27bb 	strb.w	r2, [r3, #1979]	; 0x7bb
    /* DataTypeConversion: '<S139>/Data Type Conversion13' */
    /*@>24c3c*/VCU_B./*@>281d6*/VOVG_OUT_j/*@>79d4*/ = /*@>24c42*/VCU_B./*@>281d9*/Compare_md;
 800547c:	4b14      	ldr	r3, [pc, #80]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 800547e:	f893 37bb 	ldrb.w	r3, [r3, #1979]	; 0x7bb
 8005482:	4618      	mov	r0, r3
 8005484:	f009 fa7a 	bl	800e97c <__aeabi_ui2d>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4910      	ldr	r1, [pc, #64]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 800548e:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    /* DataTypeConversion: '<S139>/Data Type Conversion16' */
    /*@>24c6c*/VCU_B./*@>281ee*/x_clutch_LC_b/*@>79d7*/ = /*@>1fdd7*/0.0;
 8005492:	490f      	ldr	r1, [pc, #60]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    /* DataTypeConversion: '<S139>/Data Type Conversion17' */
    /*@>24c90*/VCU_B./*@>28200*/LC_Mdes_b/*@>79da*/ = /*@>1fdda*/0.0;
 80054a0:	490b      	ldr	r1, [pc, #44]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80054a2:	f04f 0200 	mov.w	r2, #0
 80054a6:	f04f 0300 	mov.w	r3, #0
 80054aa:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
    /* DataTypeConversion: '<S139>/Data Type Conversion18' */
    /*@>24cb4*/VCU_B./*@>28212*/LC_Fnr_l/*@>79dd*/ = /*@>1fddb*/0.0;
 80054ae:	4908      	ldr	r1, [pc, #32]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    /* Update for UnitDelay: '<S192>/Unit Delay1' */
    /*@>25265*/VCU_DW./*@>28452*/UnitDelay1_DSTATE/*@>85c4*/ = /*@>24cd2*/VCU_B./*@>28221*/Logic_i/*@>23807*/[/*@>23804*/0];
 80054bc:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <FUNC_Transmission+0x1fc0>)
 80054be:	f893 278b 	ldrb.w	r2, [r3, #1931]	; 0x78b
 80054c2:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <FUNC_Transmission+0x1fdc>)
 80054c4:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    /* Update for Delay: '<S192>/Delay' */
/*@>1ce53*/    for (/*@>26c14*/rowIdx = /*@>1fde2*/0; /*@>26c1c*/rowIdx < /*@>1fde3*/19; /*@>26c19*/rowIdx/*@>26c34*/++) {
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	e01f      	b.n	800550e <FUNC_Transmission+0x1ffe>
 80054ce:	bf00      	nop
 80054d0:	200008a8 	.word	0x200008a8
 80054d4:	3ff00000 	.word	0x3ff00000
 80054d8:	bfe00000 	.word	0xbfe00000
 80054dc:	0800f498 	.word	0x0800f498
 80054e0:	0800f420 	.word	0x0800f420
 80054e4:	40340000 	.word	0x40340000
 80054e8:	c0340000 	.word	0xc0340000
 80054ec:	200010c8 	.word	0x200010c8
        /*@>25271*/VCU_DW./*@>28458*/Delay_DSTATE/*@>1b2bc*/[/*@>1fd56*/rowIdx]/*@>85f2*/ = /*@>25277*/VCU_DW./*@>2845b*/Delay_DSTATE/*@>2380f*/[/*@>2380b*/rowIdx/*@>23809*/ + /*@>2380c*/1];
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	3301      	adds	r3, #1
 80054f4:	4a9d      	ldr	r2, [pc, #628]	; (800576c <FUNC_Transmission+0x225c>)
 80054f6:	4413      	add	r3, r2
 80054f8:	f893 10e2 	ldrb.w	r1, [r3, #226]	; 0xe2
 80054fc:	4a9b      	ldr	r2, [pc, #620]	; (800576c <FUNC_Transmission+0x225c>)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	4413      	add	r3, r2
 8005502:	33e0      	adds	r3, #224	; 0xe0
 8005504:	460a      	mov	r2, r1
 8005506:	709a      	strb	r2, [r3, #2]
    /* DataTypeConversion: '<S139>/Data Type Conversion18' */
    /*@>24cb4*/VCU_B./*@>28212*/LC_Fnr_l/*@>79dd*/ = /*@>1fddb*/0.0;
    /* Update for UnitDelay: '<S192>/Unit Delay1' */
    /*@>25265*/VCU_DW./*@>28452*/UnitDelay1_DSTATE/*@>85c4*/ = /*@>24cd2*/VCU_B./*@>28221*/Logic_i/*@>23807*/[/*@>23804*/0];
    /* Update for Delay: '<S192>/Delay' */
/*@>1ce53*/    for (/*@>26c14*/rowIdx = /*@>1fde2*/0; /*@>26c1c*/rowIdx < /*@>1fde3*/19; /*@>26c19*/rowIdx/*@>26c34*/++) {
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	3301      	adds	r3, #1
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b12      	cmp	r3, #18
 8005512:	dded      	ble.n	80054f0 <FUNC_Transmission+0x1fe0>
        /*@>25271*/VCU_DW./*@>28458*/Delay_DSTATE/*@>1b2bc*/[/*@>1fd56*/rowIdx]/*@>85f2*/ = /*@>25277*/VCU_DW./*@>2845b*/Delay_DSTATE/*@>2380f*/[/*@>2380b*/rowIdx/*@>23809*/ + /*@>2380c*/1];
    }
    /*@>2526b*/VCU_DW./*@>28455*/Delay_DSTATE/*@>860a*/[/*@>1fc2e*/19]/*@>8614*/ = /*@>24d14*/VCU_B./*@>28242*/LogicalOperator_d;
 8005514:	4b96      	ldr	r3, [pc, #600]	; (8005770 <FUNC_Transmission+0x2260>)
 8005516:	f893 279b 	ldrb.w	r2, [r3, #1947]	; 0x79b
 800551a:	4b94      	ldr	r3, [pc, #592]	; (800576c <FUNC_Transmission+0x225c>)
 800551c:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
    /* End of Update for Delay: '<S192>/Delay' */

    /* Update for Memory: '<S208>/Memory' */
    /*@>2527d*/VCU_DW./*@>2845e*/Memory_PreviousInput/*@>7af1*/ = /*@>24d3e*/VCU_B./*@>28257*/Logic/*@>23814*/[/*@>23811*/0];
 8005520:	4b93      	ldr	r3, [pc, #588]	; (8005770 <FUNC_Transmission+0x2260>)
 8005522:	f893 2786 	ldrb.w	r2, [r3, #1926]	; 0x786
 8005526:	4b91      	ldr	r3, [pc, #580]	; (800576c <FUNC_Transmission+0x225c>)
 8005528:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
 *
 * Block description for '<S205>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>25283*/VCU_DW./*@>28461*/DelayInput1_DSTATE/*@>8620*/ = /*@>24d5c*/VCU_B./*@>28266*/STW_shift_down_request;
 800552c:	4b90      	ldr	r3, [pc, #576]	; (8005770 <FUNC_Transmission+0x2260>)
 800552e:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	498d      	ldr	r1, [pc, #564]	; (800576c <FUNC_Transmission+0x225c>)
 8005538:	e9c1 2300 	strd	r2, r3, [r1]
    /* Update for Delay: '<S192>/Delay1' */
    /*@>25289*/VCU_DW./*@>28464*/Delay1_DSTATE/*@>862c*/ = /*@>24d6e*/VCU_B./*@>2826f*/LogicalOperator_d;
 800553c:	4b8c      	ldr	r3, [pc, #560]	; (8005770 <FUNC_Transmission+0x2260>)
 800553e:	f893 279b 	ldrb.w	r2, [r3, #1947]	; 0x79b
 8005542:	4b8a      	ldr	r3, [pc, #552]	; (800576c <FUNC_Transmission+0x225c>)
 8005544:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
    /* Update for Memory: '<S206>/Memory' */
    /*@>2528f*/VCU_DW./*@>28467*/Memory_PreviousInput_l/*@>7af5*/ = /*@>24d80*/VCU_B./*@>28278*/Logic_i/*@>23819*/[/*@>23816*/0];
 8005548:	4b89      	ldr	r3, [pc, #548]	; (8005770 <FUNC_Transmission+0x2260>)
 800554a:	f893 278b 	ldrb.w	r2, [r3, #1931]	; 0x78b
 800554e:	4b87      	ldr	r3, [pc, #540]	; (800576c <FUNC_Transmission+0x225c>)
 8005550:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
    /* Update for UnitDelay: '<S192>/Unit Delay4' */
    /*@>25295*/VCU_DW./*@>2846a*/UnitDelay4_DSTATE/*@>8638*/ = /*@>24d92*/VCU_B./*@>28281*/FixPtRelationalOperator_d;
 8005554:	4b86      	ldr	r3, [pc, #536]	; (8005770 <FUNC_Transmission+0x2260>)
 8005556:	f893 27b6 	ldrb.w	r2, [r3, #1974]	; 0x7b6
 800555a:	4b84      	ldr	r3, [pc, #528]	; (800576c <FUNC_Transmission+0x225c>)
 800555c:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
    /* Update for UnitDelay: '<S193>/Unit Delay' */
    /*@>2529b*/VCU_DW./*@>2846d*/UnitDelay_DSTATE/*@>8644*/ = /*@>24da4*/VCU_B./*@>2828a*/Logic_iz/*@>2381e*/[/*@>2381b*/0];
 8005560:	4b83      	ldr	r3, [pc, #524]	; (8005770 <FUNC_Transmission+0x2260>)
 8005562:	f893 27ac 	ldrb.w	r2, [r3, #1964]	; 0x7ac
 8005566:	4b81      	ldr	r3, [pc, #516]	; (800576c <FUNC_Transmission+0x225c>)
 8005568:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    /* Update for UnitDelay: '<S192>/Unit Delay2' */
    /*@>252a1*/VCU_DW./*@>28470*/UnitDelay2_DSTATE/*@>8650*/ = /*@>24db6*/VCU_B./*@>28293*/Counter;
 800556c:	4b80      	ldr	r3, [pc, #512]	; (8005770 <FUNC_Transmission+0x2260>)
 800556e:	f893 27b4 	ldrb.w	r2, [r3, #1972]	; 0x7b4
 8005572:	4b7e      	ldr	r3, [pc, #504]	; (800576c <FUNC_Transmission+0x225c>)
 8005574:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
    /* Update for Memory: '<S207>/Memory' */
    /*@>252a7*/VCU_DW./*@>28473*/Memory_PreviousInput_a/*@>7afa*/ = /*@>24dce*/VCU_B./*@>2829f*/Logic_iy/*@>23823*/[/*@>23820*/0];
 8005578:	4b7d      	ldr	r3, [pc, #500]	; (8005770 <FUNC_Transmission+0x2260>)
 800557a:	f893 279d 	ldrb.w	r2, [r3, #1949]	; 0x79d
 800557e:	4b7b      	ldr	r3, [pc, #492]	; (800576c <FUNC_Transmission+0x225c>)
 8005580:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
 *
 * Block description for '<S213>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>252ad*/VCU_DW./*@>28476*/DelayInput1_DSTATE_g/*@>865c*/ = /*@>24de6*/VCU_B./*@>282ab*/STW_shift_up_request;
 8005584:	4b7a      	ldr	r3, [pc, #488]	; (8005770 <FUNC_Transmission+0x2260>)
 8005586:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 800558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558e:	4977      	ldr	r1, [pc, #476]	; (800576c <FUNC_Transmission+0x225c>)
 8005590:	e9c1 2302 	strd	r2, r3, [r1, #8]
 *
 * Block description for '<S214>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>252b3*/VCU_DW./*@>28479*/DelayInput1_DSTATE_ga/*@>8668*/ = /*@>24df2*/VCU_B./*@>282b1*/Add_j;
 8005594:	4b76      	ldr	r3, [pc, #472]	; (8005770 <FUNC_Transmission+0x2260>)
 8005596:	f893 273f 	ldrb.w	r2, [r3, #1855]	; 0x73f
 800559a:	4b74      	ldr	r3, [pc, #464]	; (800576c <FUNC_Transmission+0x225c>)
 800559c:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
    /* Update for UnitDelay: '<S192>/Unit Delay' */
    /*@>252b9*/VCU_DW./*@>2847c*/UnitDelay_DSTATE_b/*@>8674*/ = /*@>24e0a*/VCU_B./*@>282bd*/Logic_iy/*@>23828*/[/*@>23825*/0];
 80055a0:	4b73      	ldr	r3, [pc, #460]	; (8005770 <FUNC_Transmission+0x2260>)
 80055a2:	f893 279d 	ldrb.w	r2, [r3, #1949]	; 0x79d
 80055a6:	4b71      	ldr	r3, [pc, #452]	; (800576c <FUNC_Transmission+0x225c>)
 80055a8:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
    /* Update for UnitDelay: '<S193>/Unit Delay1' */
    /*@>252c5*/VCU_DW./*@>28482*/UnitDelay1_DSTATE_k/*@>8680*/ = /*@>24e16*/VCU_B./*@>282c3*/Counter_d;
 80055ac:	4b70      	ldr	r3, [pc, #448]	; (8005770 <FUNC_Transmission+0x2260>)
 80055ae:	f893 27b5 	ldrb.w	r2, [r3, #1973]	; 0x7b5
 80055b2:	4b6e      	ldr	r3, [pc, #440]	; (800576c <FUNC_Transmission+0x225c>)
 80055b4:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
    /* Update for Memory: '<S216>/Memory' */
    /*@>252cb*/VCU_DW./*@>28485*/Memory_PreviousInput_al/*@>7b00*/ = /*@>24e2e*/VCU_B./*@>282cf*/Logic_iz/*@>2382d*/[/*@>2382a*/0];
 80055b8:	4b6d      	ldr	r3, [pc, #436]	; (8005770 <FUNC_Transmission+0x2260>)
 80055ba:	f893 27ac 	ldrb.w	r2, [r3, #1964]	; 0x7ac
 80055be:	4b6b      	ldr	r3, [pc, #428]	; (800576c <FUNC_Transmission+0x225c>)
 80055c0:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 *
 * Block description for '<S215>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>252d7*/VCU_DW./*@>2848b*/DelayInput1_DSTATE_f/*@>868c*/ = /*@>24e3a*/VCU_B./*@>282d5*/Add_j;
 80055c4:	4b6a      	ldr	r3, [pc, #424]	; (8005770 <FUNC_Transmission+0x2260>)
 80055c6:	f893 273f 	ldrb.w	r2, [r3, #1855]	; 0x73f
 80055ca:	4b68      	ldr	r3, [pc, #416]	; (800576c <FUNC_Transmission+0x225c>)
 80055cc:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
    /* Update for Memory: '<S217>/Memory' */
    /*@>252dd*/VCU_DW./*@>2848e*/Memory_PreviousInput_k/*@>7b03*/ = /*@>24e40*/VCU_B./*@>282d8*/Logic_e/*@>23837*/[/*@>23834*/0];
 80055d0:	4b67      	ldr	r3, [pc, #412]	; (8005770 <FUNC_Transmission+0x2260>)
 80055d2:	f893 27b2 	ldrb.w	r2, [r3, #1970]	; 0x7b2
 80055d6:	4b65      	ldr	r3, [pc, #404]	; (800576c <FUNC_Transmission+0x225c>)
 80055d8:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
 *
 * Block description for '<S204>/Delay Input1':
 *  
 *  Store in Global RAM
 */
    /*@>252e3*/VCU_DW./*@>28491*/DelayInput1_DSTATE_p/*@>8698*/ = /*@>24e46*/VCU_B./*@>282db*/Add_c;
 80055dc:	4b64      	ldr	r3, [pc, #400]	; (8005770 <FUNC_Transmission+0x2260>)
 80055de:	f893 273e 	ldrb.w	r2, [r3, #1854]	; 0x73e
 80055e2:	4b62      	ldr	r3, [pc, #392]	; (800576c <FUNC_Transmission+0x225c>)
 80055e4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
/* End of Outputs for SubSystem: '<S7>/semi_auto_jr18' */

/* RelationalOperator: '<S135>/Compare' incorporates:
 *  Constant: '<S135>/Constant'
 */
/*@>23ec8*/VCU_B./*@>27b1c*/Compare_j/*@>7443*/ = (/*@>23ece*/VCU_B./*@>27b1f*/DataTypeConversion_cg/*@>7442*/ == /*@>1fd76*/2);
 80055e8:	4b61      	ldr	r3, [pc, #388]	; (8005770 <FUNC_Transmission+0x2260>)
 80055ea:	f893 377b 	ldrb.w	r3, [r3, #1915]	; 0x77b
 80055ee:	b25b      	sxtb	r3, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	bf0c      	ite	eq
 80055f4:	2301      	moveq	r3, #1
 80055f6:	2300      	movne	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	4b5c      	ldr	r3, [pc, #368]	; (8005770 <FUNC_Transmission+0x2260>)
 80055fe:	f883 2780 	strb.w	r2, [r3, #1920]	; 0x780
/* Outputs for Enabled SubSystem: '<S7>/driver_jr18' incorporates:
 *  EnablePort: '<S138>/Enable'
 */
/*@>7445*/if (/*@>23ee0*/VCU_B./*@>27b28*/Compare_j) {
 8005602:	4b5b      	ldr	r3, [pc, #364]	; (8005770 <FUNC_Transmission+0x2260>)
 8005604:	f893 3780 	ldrb.w	r3, [r3, #1920]	; 0x780
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 81c3 	beq.w	8005994 <FUNC_Transmission+0x2484>
    /* MinMax: '<S183>/MinMax' */
    /*@>20baa*/if (/*@>23ef2*/VCU_B./*@>27b31*/x_clutch_STW/*@>20ba3*/ > /*@>20f32*/0.0) {
 800560e:	4b58      	ldr	r3, [pc, #352]	; (8005770 <FUNC_Transmission+0x2260>)
 8005610:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8005614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005618:	4610      	mov	r0, r2
 800561a:	4619      	mov	r1, r3
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	f009 fcb0 	bl	800ef88 <__aeabi_dcmpgt>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d008      	beq.n	8005640 <FUNC_Transmission+0x2130>
        /*@>23f16*/VCU_B./*@>27b43*/MinMax_l/*@>20bac*/ = /*@>23f1c*/VCU_B./*@>27b46*/x_clutch_STW;
 800562e:	4b50      	ldr	r3, [pc, #320]	; (8005770 <FUNC_Transmission+0x2260>)
 8005630:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	494d      	ldr	r1, [pc, #308]	; (8005770 <FUNC_Transmission+0x2260>)
 800563a:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
 800563e:	e006      	b.n	800564e <FUNC_Transmission+0x213e>
    } else {
        /*@>23f10*/VCU_B./*@>27b40*/MinMax_l/*@>20ba9*/ = /*@>20f36*/0.0;
 8005640:	494b      	ldr	r1, [pc, #300]	; (8005770 <FUNC_Transmission+0x2260>)
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
    /* End of MinMax: '<S183>/MinMax' */

    /* RelationalOperator: '<S186>/Compare' incorporates:
 *  Constant: '<S186>/Constant'
 */
    /*@>23f76*/VCU_B./*@>27b73*/Compare_bd/*@>7b39*/ = (/*@>23f7c*/VCU_B./*@>27b76*/MinMax_l/*@>7b38*/ > /*@>1fd79*/1.0);
 800564e:	4b48      	ldr	r3, [pc, #288]	; (8005770 <FUNC_Transmission+0x2260>)
 8005650:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8005654:	2101      	movs	r1, #1
 8005656:	460c      	mov	r4, r1
 8005658:	4610      	mov	r0, r2
 800565a:	4619      	mov	r1, r3
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	4b44      	ldr	r3, [pc, #272]	; (8005774 <FUNC_Transmission+0x2264>)
 8005662:	f009 fc91 	bl	800ef88 <__aeabi_dcmpgt>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <FUNC_Transmission+0x2160>
 800566c:	2300      	movs	r3, #0
 800566e:	461c      	mov	r4, r3
 8005670:	b2e3      	uxtb	r3, r4
 8005672:	461a      	mov	r2, r3
 8005674:	4b3e      	ldr	r3, [pc, #248]	; (8005770 <FUNC_Transmission+0x2260>)
 8005676:	f883 27bc 	strb.w	r2, [r3, #1980]	; 0x7bc
    /* DataTypeConversion: '<S138>/Data Type Conversion12' */
    /*@>23f94*/VCU_B./*@>27b82*/VOVG_IN_c/*@>7b3c*/ = /*@>23f9a*/VCU_B./*@>27b85*/Compare_bd;
 800567a:	4b3d      	ldr	r3, [pc, #244]	; (8005770 <FUNC_Transmission+0x2260>)
 800567c:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 8005680:	4618      	mov	r0, r3
 8005682:	f009 f97b 	bl	800e97c <__aeabi_ui2d>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4939      	ldr	r1, [pc, #228]	; (8005770 <FUNC_Transmission+0x2260>)
 800568c:	e9c1 2344 	strd	r2, r3, [r1, #272]	; 0x110
    /* Sum: '<S183>/Add' */
    /*@>23fe2*/VCU_B./*@>27ba9*/Add_l/*@>a788*/ = /*@>23fe8*/VCU_B./*@>27bac*/MinMax_l/*@>a785*/ - /*@>23fee*/VCU_B./*@>27baf*/x_clutch_b;
 8005690:	4b37      	ldr	r3, [pc, #220]	; (8005770 <FUNC_Transmission+0x2260>)
 8005692:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	; 0x108
 8005696:	4b36      	ldr	r3, [pc, #216]	; (8005770 <FUNC_Transmission+0x2260>)
 8005698:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f009 f82e 	bl	800e700 <__aeabi_dsub>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4931      	ldr	r1, [pc, #196]	; (8005770 <FUNC_Transmission+0x2260>)
 80056aa:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
    /* RelationalOperator: '<S188>/Compare' incorporates:
 *  Constant: '<S188>/Constant'
 */
    /*@>24006*/VCU_B./*@>27bbb*/Compare_e5/*@>7b45*/ = (/*@>2400c*/VCU_B./*@>27bbe*/Add_l/*@>7b44*/ < /*@>1fd7b*/-0.5);
 80056ae:	4b30      	ldr	r3, [pc, #192]	; (8005770 <FUNC_Transmission+0x2260>)
 80056b0:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80056b4:	2101      	movs	r1, #1
 80056b6:	460c      	mov	r4, r1
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	4b2d      	ldr	r3, [pc, #180]	; (8005778 <FUNC_Transmission+0x2268>)
 80056c2:	f009 fc43 	bl	800ef4c <__aeabi_dcmplt>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <FUNC_Transmission+0x21c0>
 80056cc:	2300      	movs	r3, #0
 80056ce:	461c      	mov	r4, r3
 80056d0:	b2e3      	uxtb	r3, r4
 80056d2:	461a      	mov	r2, r3
 80056d4:	4b26      	ldr	r3, [pc, #152]	; (8005770 <FUNC_Transmission+0x2260>)
 80056d6:	f883 27bd 	strb.w	r2, [r3, #1981]	; 0x7bd
    /* Lookup_n-D: '<S183>/Duty Cycle MHJ9' */
    /*@>2402a*/VCU_B./*@>27bcd*/DutyCycleMHJ9_d/*@>a875*/ = /*@>22982*/look1_binlxpw(/*@>24030*/VCU_B./*@>27bd0*/Add_l, /*@>24f3a*/VCU_ConstP./*@>28326*/pooled23, /*@>24f40*/VCU_ConstP./*@>28329*/pooled22, /*@>1fce7*/14U);
 80056da:	4b25      	ldr	r3, [pc, #148]	; (8005770 <FUNC_Transmission+0x2260>)
 80056dc:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80056e0:	210e      	movs	r1, #14
 80056e2:	9100      	str	r1, [sp, #0]
 80056e4:	4610      	mov	r0, r2
 80056e6:	4619      	mov	r1, r3
 80056e8:	4a24      	ldr	r2, [pc, #144]	; (800577c <FUNC_Transmission+0x226c>)
 80056ea:	4b25      	ldr	r3, [pc, #148]	; (8005780 <FUNC_Transmission+0x2270>)
 80056ec:	f000 fb00 	bl	8005cf0 <look1_binlxpw>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	491e      	ldr	r1, [pc, #120]	; (8005770 <FUNC_Transmission+0x2260>)
 80056f6:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
    /* Product: '<S183>/Product1' */
    /*@>24078*/VCU_B./*@>27bf4*/Product1_p/*@>7b53*/ = /*@>2407e*/VCU_B./*@>27bf7*/DutyCycleMHJ9_d/*@>20065*/ * /*@>204a6*/(real_T)/*@>24084*/VCU_B./*@>27bfa*/Compare_e5;
 80056fa:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <FUNC_Transmission+0x2260>)
 80056fc:	e9d3 4548 	ldrd	r4, r5, [r3, #288]	; 0x120
 8005700:	4b1b      	ldr	r3, [pc, #108]	; (8005770 <FUNC_Transmission+0x2260>)
 8005702:	f893 37bd 	ldrb.w	r3, [r3, #1981]	; 0x7bd
 8005706:	4618      	mov	r0, r3
 8005708:	f009 f938 	bl	800e97c <__aeabi_ui2d>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4620      	mov	r0, r4
 8005712:	4629      	mov	r1, r5
 8005714:	f009 f9a8 	bl	800ea68 <__aeabi_dmul>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	4914      	ldr	r1, [pc, #80]	; (8005770 <FUNC_Transmission+0x2260>)
 800571e:	e9c1 234a 	strd	r2, r3, [r1, #296]	; 0x128
    /* RelationalOperator: '<S187>/Compare' incorporates:
 *  Constant: '<S187>/Constant'
 */
    /*@>240a2*/VCU_B./*@>27c09*/Compare_p/*@>7b57*/ = (/*@>240a8*/VCU_B./*@>27c0c*/x_clutch_b/*@>7b56*/ > /*@>1fd7e*/20.0);
 8005722:	4b13      	ldr	r3, [pc, #76]	; (8005770 <FUNC_Transmission+0x2260>)
 8005724:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8005728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572c:	2101      	movs	r1, #1
 800572e:	460c      	mov	r4, r1
 8005730:	4610      	mov	r0, r2
 8005732:	4619      	mov	r1, r3
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	4b12      	ldr	r3, [pc, #72]	; (8005784 <FUNC_Transmission+0x2274>)
 800573a:	f009 fc25 	bl	800ef88 <__aeabi_dcmpgt>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <FUNC_Transmission+0x2238>
 8005744:	2300      	movs	r3, #0
 8005746:	461c      	mov	r4, r3
 8005748:	b2e3      	uxtb	r3, r4
 800574a:	461a      	mov	r2, r3
 800574c:	4b08      	ldr	r3, [pc, #32]	; (8005770 <FUNC_Transmission+0x2260>)
 800574e:	f883 27be 	strb.w	r2, [r3, #1982]	; 0x7be
    /* Switch: '<S183>/Switch1' incorporates:
 *  Constant: '<S183>/Constant2'
 *  Constant: '<S183>/Constant3'
 */
    /*@>1d67a*/if (/*@>240c0*/VCU_B./*@>27c18*/Compare_p) {
 8005752:	4b07      	ldr	r3, [pc, #28]	; (8005770 <FUNC_Transmission+0x2260>)
 8005754:	f893 37be 	ldrb.w	r3, [r3, #1982]	; 0x7be
 8005758:	2b00      	cmp	r3, #0
 800575a:	d015      	beq.n	8005788 <FUNC_Transmission+0x2278>
        /*@>24108*/VCU_B./*@>27c3c*/Switch1_e/*@>1d67d*/ = /*@>1fd7f*/2.0;
 800575c:	4904      	ldr	r1, [pc, #16]	; (8005770 <FUNC_Transmission+0x2260>)
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005766:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
 800576a:	e013      	b.n	8005794 <FUNC_Transmission+0x2284>
 800576c:	200010c8 	.word	0x200010c8
 8005770:	200008a8 	.word	0x200008a8
 8005774:	3ff00000 	.word	0x3ff00000
 8005778:	bfe00000 	.word	0xbfe00000
 800577c:	0800f498 	.word	0x0800f498
 8005780:	0800f420 	.word	0x0800f420
 8005784:	40340000 	.word	0x40340000
    } else {
        /*@>24102*/VCU_B./*@>27c39*/Switch1_e/*@>86ce*/ = /*@>1fd80*/1.0;
 8005788:	49a5      	ldr	r1, [pc, #660]	; (8005a20 <FUNC_Transmission+0x2510>)
 800578a:	f04f 0200 	mov.w	r2, #0
 800578e:	4ba5      	ldr	r3, [pc, #660]	; (8005a24 <FUNC_Transmission+0x2514>)
 8005790:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
    }
    /* End of Switch: '<S183>/Switch1' */

    /* Product: '<S183>/Product2' */
    /*@>24138*/VCU_B./*@>27c54*/Product2_p/*@>7b5f*/ = /*@>2413e*/VCU_B./*@>27c57*/Product1_p/*@>20061*/ * /*@>24144*/VCU_B./*@>27c5a*/Switch1_e;
 8005794:	4ba2      	ldr	r3, [pc, #648]	; (8005a20 <FUNC_Transmission+0x2510>)
 8005796:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	; 0x128
 800579a:	4ba1      	ldr	r3, [pc, #644]	; (8005a20 <FUNC_Transmission+0x2510>)
 800579c:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80057a0:	f009 f962 	bl	800ea68 <__aeabi_dmul>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	499d      	ldr	r1, [pc, #628]	; (8005a20 <FUNC_Transmission+0x2510>)
 80057aa:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
    /* DataTypeConversion: '<S138>/Data Type Conversion15' */
    /*@>24192*/VCU_B./*@>27c81*/MHJ9_OUT_k/*@>7b62*/ = /*@>24198*/VCU_B./*@>27c84*/Product2_p;
 80057ae:	4b9c      	ldr	r3, [pc, #624]	; (8005a20 <FUNC_Transmission+0x2510>)
 80057b0:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 80057b4:	499a      	ldr	r1, [pc, #616]	; (8005a20 <FUNC_Transmission+0x2510>)
 80057b6:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
    /* RelationalOperator: '<S189>/Compare' incorporates:
 *  Constant: '<S189>/Constant'
 */
    /*@>241b0*/VCU_B./*@>27c90*/Compare_gz/*@>7b66*/ = (/*@>241b6*/VCU_B./*@>27c93*/Add_l/*@>7b65*/ > /*@>1fd83*/0.0);
 80057ba:	4b99      	ldr	r3, [pc, #612]	; (8005a20 <FUNC_Transmission+0x2510>)
 80057bc:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80057c0:	2101      	movs	r1, #1
 80057c2:	460c      	mov	r4, r1
 80057c4:	4610      	mov	r0, r2
 80057c6:	4619      	mov	r1, r3
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	f009 fbda 	bl	800ef88 <__aeabi_dcmpgt>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <FUNC_Transmission+0x22ce>
 80057da:	2300      	movs	r3, #0
 80057dc:	461c      	mov	r4, r3
 80057de:	b2e3      	uxtb	r3, r4
 80057e0:	461a      	mov	r2, r3
 80057e2:	4b8f      	ldr	r3, [pc, #572]	; (8005a20 <FUNC_Transmission+0x2510>)
 80057e4:	f883 27bf 	strb.w	r2, [r3, #1983]	; 0x7bf
    /* Product: '<S183>/Product3' */
    /*@>241d4*/VCU_B./*@>27ca2*/Product3_d/*@>7b6d*/ = /*@>241da*/VCU_B./*@>27ca5*/DutyCycleMHJ9_d/*@>2005d*/ * /*@>204fa*/(real_T)/*@>241e0*/VCU_B./*@>27ca8*/Compare_gz;
 80057e8:	4b8d      	ldr	r3, [pc, #564]	; (8005a20 <FUNC_Transmission+0x2510>)
 80057ea:	e9d3 4548 	ldrd	r4, r5, [r3, #288]	; 0x120
 80057ee:	4b8c      	ldr	r3, [pc, #560]	; (8005a20 <FUNC_Transmission+0x2510>)
 80057f0:	f893 37bf 	ldrb.w	r3, [r3, #1983]	; 0x7bf
 80057f4:	4618      	mov	r0, r3
 80057f6:	f009 f8c1 	bl	800e97c <__aeabi_ui2d>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4620      	mov	r0, r4
 8005800:	4629      	mov	r1, r5
 8005802:	f009 f931 	bl	800ea68 <__aeabi_dmul>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4985      	ldr	r1, [pc, #532]	; (8005a20 <FUNC_Transmission+0x2510>)
 800580c:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
    /* DataTypeConversion: '<S138>/Data Type Conversion14' */
    /*@>24234*/VCU_B./*@>27cd2*/MHJ9_IN_p/*@>7b70*/ = /*@>2423a*/VCU_B./*@>27cd5*/Product3_d;
 8005810:	4b83      	ldr	r3, [pc, #524]	; (8005a20 <FUNC_Transmission+0x2510>)
 8005812:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8005816:	4982      	ldr	r1, [pc, #520]	; (8005a20 <FUNC_Transmission+0x2510>)
 8005818:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
    /* RelationalOperator: '<S190>/Compare' incorporates:
 *  Constant: '<S190>/Constant'
 */
    /*@>24276*/VCU_B./*@>27cf3*/Compare_bh/*@>7b74*/ = (/*@>2427c*/VCU_B./*@>27cf6*/Add_l/*@>7b73*/ < /*@>1fd86*/-20.0);
 800581c:	4b80      	ldr	r3, [pc, #512]	; (8005a20 <FUNC_Transmission+0x2510>)
 800581e:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8005822:	2101      	movs	r1, #1
 8005824:	460c      	mov	r4, r1
 8005826:	4610      	mov	r0, r2
 8005828:	4619      	mov	r1, r3
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	4b7e      	ldr	r3, [pc, #504]	; (8005a28 <FUNC_Transmission+0x2518>)
 8005830:	f009 fb8c 	bl	800ef4c <__aeabi_dcmplt>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <FUNC_Transmission+0x232e>
 800583a:	2300      	movs	r3, #0
 800583c:	461c      	mov	r4, r3
 800583e:	b2e3      	uxtb	r3, r4
 8005840:	461a      	mov	r2, r3
 8005842:	4b77      	ldr	r3, [pc, #476]	; (8005a20 <FUNC_Transmission+0x2510>)
 8005844:	f883 27c0 	strb.w	r2, [r3, #1984]	; 0x7c0
    /* DataTypeConversion: '<S138>/Data Type Conversion13' */
    /*@>2429a*/VCU_B./*@>27d05*/VOVG_OUT_o/*@>7b77*/ = /*@>242a0*/VCU_B./*@>27d08*/Compare_bh;
 8005848:	4b75      	ldr	r3, [pc, #468]	; (8005a20 <FUNC_Transmission+0x2510>)
 800584a:	f893 37c0 	ldrb.w	r3, [r3, #1984]	; 0x7c0
 800584e:	4618      	mov	r0, r3
 8005850:	f009 f894 	bl	800e97c <__aeabi_ui2d>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4971      	ldr	r1, [pc, #452]	; (8005a20 <FUNC_Transmission+0x2510>)
 800585a:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
    /* RelationalOperator: '<S184>/Compare' incorporates:
 *  Constant: '<S184>/Constant'
 */
    /*@>242e8*/VCU_B./*@>27d2c*/Compare_g5/*@>7b7b*/ = (/*@>242ee*/VCU_B./*@>27d2f*/DataTypeConversion3/*@>7b7a*/ < /*@>1fd87*/3.0);
 800585e:	4b70      	ldr	r3, [pc, #448]	; (8005a20 <FUNC_Transmission+0x2510>)
 8005860:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8005864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005868:	2101      	movs	r1, #1
 800586a:	460c      	mov	r4, r1
 800586c:	4610      	mov	r0, r2
 800586e:	4619      	mov	r1, r3
 8005870:	f04f 0200 	mov.w	r2, #0
 8005874:	4b6d      	ldr	r3, [pc, #436]	; (8005a2c <FUNC_Transmission+0x251c>)
 8005876:	f009 fb69 	bl	800ef4c <__aeabi_dcmplt>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <FUNC_Transmission+0x2374>
 8005880:	2300      	movs	r3, #0
 8005882:	461c      	mov	r4, r3
 8005884:	b2e3      	uxtb	r3, r4
 8005886:	461a      	mov	r2, r3
 8005888:	4b65      	ldr	r3, [pc, #404]	; (8005a20 <FUNC_Transmission+0x2510>)
 800588a:	f883 27c1 	strb.w	r2, [r3, #1985]	; 0x7c1
    /* Logic: '<S138>/Logical Operator1' */
    /*@>24312*/VCU_B./*@>27d41*/LogicalOperator1/*@>7b81*/ = ((/*@>24318*/VCU_B./*@>27d44*/STW_shift_up_request/*@>2005a*/ != /*@>20058*/0.0)/*@>7b80*/ && /*@>2431e*/VCU_B./*@>27d47*/Compare_g5);
 800588e:	4b64      	ldr	r3, [pc, #400]	; (8005a20 <FUNC_Transmission+0x2510>)
 8005890:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	4610      	mov	r0, r2
 800589a:	4619      	mov	r1, r3
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	f009 fb48 	bl	800ef38 <__aeabi_dcmpeq>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <FUNC_Transmission+0x23ac>
 80058ae:	4b5c      	ldr	r3, [pc, #368]	; (8005a20 <FUNC_Transmission+0x2510>)
 80058b0:	f893 37c1 	ldrb.w	r3, [r3, #1985]	; 0x7c1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <FUNC_Transmission+0x23ac>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <FUNC_Transmission+0x23ae>
 80058bc:	2300      	movs	r3, #0
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	4b57      	ldr	r3, [pc, #348]	; (8005a20 <FUNC_Transmission+0x2510>)
 80058c2:	f883 27c2 	strb.w	r2, [r3, #1986]	; 0x7c2
    /* DataTypeConversion: '<S138>/Data Type Conversion8' */
    /*@>2433c*/VCU_B./*@>27d56*/VOVG_ShiftUp_o/*@>7b84*/ = /*@>24342*/VCU_B./*@>27d59*/LogicalOperator1;
 80058c6:	4b56      	ldr	r3, [pc, #344]	; (8005a20 <FUNC_Transmission+0x2510>)
 80058c8:	f893 37c2 	ldrb.w	r3, [r3, #1986]	; 0x7c2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f009 f855 	bl	800e97c <__aeabi_ui2d>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4952      	ldr	r1, [pc, #328]	; (8005a20 <FUNC_Transmission+0x2510>)
 80058d8:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
    /* RelationalOperator: '<S185>/Compare' incorporates:
 *  Constant: '<S185>/Constant'
 */
    /*@>24384*/VCU_B./*@>27d7a*/Compare_mz/*@>7b88*/ = (/*@>2438a*/VCU_B./*@>27d7d*/DataTypeConversion3/*@>7b87*/ >= /*@>1fd8a*/0.0);
 80058dc:	4b50      	ldr	r3, [pc, #320]	; (8005a20 <FUNC_Transmission+0x2510>)
 80058de:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	2101      	movs	r1, #1
 80058e8:	460c      	mov	r4, r1
 80058ea:	4610      	mov	r0, r2
 80058ec:	4619      	mov	r1, r3
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	f04f 0300 	mov.w	r3, #0
 80058f6:	f009 fb3d 	bl	800ef74 <__aeabi_dcmpge>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <FUNC_Transmission+0x23f4>
 8005900:	2300      	movs	r3, #0
 8005902:	461c      	mov	r4, r3
 8005904:	b2e3      	uxtb	r3, r4
 8005906:	461a      	mov	r2, r3
 8005908:	4b45      	ldr	r3, [pc, #276]	; (8005a20 <FUNC_Transmission+0x2510>)
 800590a:	f883 27c3 	strb.w	r2, [r3, #1987]	; 0x7c3
    /* Logic: '<S138>/Logical Operator' */
    /*@>243a2*/VCU_B./*@>27d89*/LogicalOperator_e/*@>7b8e*/ = (/*@>243a8*/VCU_B./*@>27d8c*/Compare_mz/*@>7b8d*/ && (/*@>243ae*/VCU_B./*@>27d8f*/STW_shift_down_request/*@>20056*/ != /*@>20054*/0.0));
 800590e:	4b44      	ldr	r3, [pc, #272]	; (8005a20 <FUNC_Transmission+0x2510>)
 8005910:	f893 37c3 	ldrb.w	r3, [r3, #1987]	; 0x7c3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d011      	beq.n	800593c <FUNC_Transmission+0x242c>
 8005918:	4b41      	ldr	r3, [pc, #260]	; (8005a20 <FUNC_Transmission+0x2510>)
 800591a:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	4610      	mov	r0, r2
 8005924:	4619      	mov	r1, r3
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	f04f 0300 	mov.w	r3, #0
 800592e:	f009 fb03 	bl	800ef38 <__aeabi_dcmpeq>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <FUNC_Transmission+0x242c>
 8005938:	2301      	movs	r3, #1
 800593a:	e000      	b.n	800593e <FUNC_Transmission+0x242e>
 800593c:	2300      	movs	r3, #0
 800593e:	b2da      	uxtb	r2, r3
 8005940:	4b37      	ldr	r3, [pc, #220]	; (8005a20 <FUNC_Transmission+0x2510>)
 8005942:	f883 27c4 	strb.w	r2, [r3, #1988]	; 0x7c4
    /* DataTypeConversion: '<S138>/Data Type Conversion10' */
    /*@>243c0*/VCU_B./*@>27d98*/VOVG_ShiftDown_f/*@>7b91*/ = /*@>243c6*/VCU_B./*@>27d9b*/LogicalOperator_e;
 8005946:	4b36      	ldr	r3, [pc, #216]	; (8005a20 <FUNC_Transmission+0x2510>)
 8005948:	f893 37c4 	ldrb.w	r3, [r3, #1988]	; 0x7c4
 800594c:	4618      	mov	r0, r3
 800594e:	f009 f815 	bl	800e97c <__aeabi_ui2d>
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	4932      	ldr	r1, [pc, #200]	; (8005a20 <FUNC_Transmission+0x2510>)
 8005958:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168
    /* DataTypeConversion: '<S138>/Data Type Conversion11' */
    /*@>24414*/VCU_B./*@>27dc2*/Ignition_Cut_h/*@>7b94*/ = /*@>1fd8d*/0.0;
 800595c:	4930      	ldr	r1, [pc, #192]	; (8005a20 <FUNC_Transmission+0x2510>)
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	e9c1 235c 	strd	r2, r3, [r1, #368]	; 0x170
    /* DataTypeConversion: '<S138>/Data Type Conversion16' */
    /*@>24420*/VCU_B./*@>27dc8*/x_clutch_LC_i/*@>7b97*/ = /*@>1fd8f*/0.0;
 800596a:	492d      	ldr	r1, [pc, #180]	; (8005a20 <FUNC_Transmission+0x2510>)
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
    /* DataTypeConversion: '<S138>/Data Type Conversion17' */
    /*@>24438*/VCU_B./*@>27dd4*/LC_Mdes_f/*@>7b9a*/ = /*@>1fd92*/0.0;
 8005978:	4929      	ldr	r1, [pc, #164]	; (8005a20 <FUNC_Transmission+0x2510>)
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	f04f 0300 	mov.w	r3, #0
 8005982:	e9c1 2360 	strd	r2, r3, [r1, #384]	; 0x180
    /* DataTypeConversion: '<S138>/Data Type Conversion18' */
    /*@>24480*/VCU_B./*@>27df8*/LC_Fnr_f/*@>7b9d*/ = /*@>1fd93*/0.0;
 8005986:	4926      	ldr	r1, [pc, #152]	; (8005a20 <FUNC_Transmission+0x2510>)
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
}
/* End of Outputs for SubSystem: '<S7>/driver_jr18' */

/* MultiPortSwitch: '<S7>/Multiport Switch' */
/*@>744a*/switch (/*@>23f0a*/VCU_B./*@>27b3d*/DataTypeConversion_cg) {
 8005994:	4b22      	ldr	r3, [pc, #136]	; (8005a20 <FUNC_Transmission+0x2510>)
 8005996:	f893 377b 	ldrb.w	r3, [r3, #1915]	; 0x77b
 800599a:	b25b      	sxtb	r3, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d00a      	beq.n	80059b6 <FUNC_Transmission+0x24a6>
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	d00f      	beq.n	80059c4 <FUNC_Transmission+0x24b4>
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d114      	bne.n	80059d2 <FUNC_Transmission+0x24c2>
  case /*@>1f730*/1:
    /*@>23f3a*/VCU_B./*@>27b55*/VOVG_ShiftUp/*@>744e*/ = /*@>23f40*/VCU_B./*@>27b58*/VOVG_ShiftUp_k;
 80059a8:	4b1d      	ldr	r3, [pc, #116]	; (8005a20 <FUNC_Transmission+0x2510>)
 80059aa:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80059ae:	491c      	ldr	r1, [pc, #112]	; (8005a20 <FUNC_Transmission+0x2510>)
 80059b0:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80059b4:	e014      	b.n	80059e0 <FUNC_Transmission+0x24d0>
  case /*@>1f731*/2:
    /*@>23f46*/VCU_B./*@>27b5b*/VOVG_ShiftUp/*@>7450*/ = /*@>23f4c*/VCU_B./*@>27b5e*/VOVG_ShiftUp_o;
 80059b6:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <FUNC_Transmission+0x2510>)
 80059b8:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 80059bc:	4918      	ldr	r1, [pc, #96]	; (8005a20 <FUNC_Transmission+0x2510>)
 80059be:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80059c2:	e00d      	b.n	80059e0 <FUNC_Transmission+0x24d0>
  case /*@>1f732*/3:
    /*@>23f52*/VCU_B./*@>27b61*/VOVG_ShiftUp/*@>7452*/ = /*@>23f58*/VCU_B./*@>27b64*/VOVG_ShiftUp_d;
 80059c4:	4b16      	ldr	r3, [pc, #88]	; (8005a20 <FUNC_Transmission+0x2510>)
 80059c6:	e9d3 2378 	ldrd	r2, r3, [r3, #480]	; 0x1e0
 80059ca:	4915      	ldr	r1, [pc, #84]	; (8005a20 <FUNC_Transmission+0x2510>)
 80059cc:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80059d0:	e006      	b.n	80059e0 <FUNC_Transmission+0x24d0>
  default:
    /*@>23f2e*/VCU_B./*@>27b4f*/VOVG_ShiftUp/*@>744c*/ = /*@>23f34*/VCU_B./*@>27b52*/VOVG_ShiftUp_k;
 80059d2:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <FUNC_Transmission+0x2510>)
 80059d4:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80059d8:	4911      	ldr	r1, [pc, #68]	; (8005a20 <FUNC_Transmission+0x2510>)
 80059da:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80059de:	bf00      	nop
}
/*@>7455*/switch (/*@>23f8e*/VCU_B./*@>27b7f*/DataTypeConversion_cg) {
 80059e0:	4b0f      	ldr	r3, [pc, #60]	; (8005a20 <FUNC_Transmission+0x2510>)
 80059e2:	f893 377b 	ldrb.w	r3, [r3, #1915]	; 0x77b
 80059e6:	b25b      	sxtb	r3, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d00a      	beq.n	8005a02 <FUNC_Transmission+0x24f2>
 80059ec:	2b03      	cmp	r3, #3
 80059ee:	d00f      	beq.n	8005a10 <FUNC_Transmission+0x2500>
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d11d      	bne.n	8005a30 <FUNC_Transmission+0x2520>
  case /*@>1f745*/1:
    /*@>23fbe*/VCU_B./*@>27b97*/LC_Fnr/*@>7459*/ = /*@>23fc4*/VCU_B./*@>27b9a*/LC_Fnr_l;
 80059f4:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <FUNC_Transmission+0x2510>)
 80059f6:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 80059fa:	4909      	ldr	r1, [pc, #36]	; (8005a20 <FUNC_Transmission+0x2510>)
 80059fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    break;
 8005a00:	e01d      	b.n	8005a3e <FUNC_Transmission+0x252e>
  case /*@>1f746*/2:
    /*@>23fca*/VCU_B./*@>27b9d*/LC_Fnr/*@>745b*/ = /*@>23fd0*/VCU_B./*@>27ba0*/LC_Fnr_f;
 8005a02:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <FUNC_Transmission+0x2510>)
 8005a04:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 8005a08:	4905      	ldr	r1, [pc, #20]	; (8005a20 <FUNC_Transmission+0x2510>)
 8005a0a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    break;
 8005a0e:	e016      	b.n	8005a3e <FUNC_Transmission+0x252e>
  case /*@>1f747*/3:
    /*@>23fd6*/VCU_B./*@>27ba3*/LC_Fnr/*@>745d*/ = /*@>23fdc*/VCU_B./*@>27ba6*/LC_Fnr_e;
 8005a10:	4b03      	ldr	r3, [pc, #12]	; (8005a20 <FUNC_Transmission+0x2510>)
 8005a12:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	; 0x290
 8005a16:	4902      	ldr	r1, [pc, #8]	; (8005a20 <FUNC_Transmission+0x2510>)
 8005a18:	e9c1 2302 	strd	r2, r3, [r1, #8]
    break;
 8005a1c:	e00f      	b.n	8005a3e <FUNC_Transmission+0x252e>
 8005a1e:	bf00      	nop
 8005a20:	200008a8 	.word	0x200008a8
 8005a24:	3ff00000 	.word	0x3ff00000
 8005a28:	c0340000 	.word	0xc0340000
 8005a2c:	40080000 	.word	0x40080000
  default:
    /*@>23fb2*/VCU_B./*@>27b91*/LC_Fnr/*@>7457*/ = /*@>23fb8*/VCU_B./*@>27b94*/LC_Fnr_l;
 8005a30:	4b84      	ldr	r3, [pc, #528]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005a32:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 8005a36:	4983      	ldr	r1, [pc, #524]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005a38:	e9c1 2302 	strd	r2, r3, [r1, #8]
    break;
 8005a3c:	bf00      	nop
}
/*@>7460*/switch (/*@>24024*/VCU_B./*@>27bca*/DataTypeConversion_cg) {
 8005a3e:	4b81      	ldr	r3, [pc, #516]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005a40:	f893 377b 	ldrb.w	r3, [r3, #1915]	; 0x77b
 8005a44:	b25b      	sxtb	r3, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d00a      	beq.n	8005a60 <FUNC_Transmission+0x2550>
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d00f      	beq.n	8005a6e <FUNC_Transmission+0x255e>
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d114      	bne.n	8005a7c <FUNC_Transmission+0x256c>
  case /*@>1f75a*/1:
    /*@>24054*/VCU_B./*@>27be2*/VOVG_ShiftDown/*@>7464*/ = /*@>2405a*/VCU_B./*@>27be5*/VOVG_ShiftDown_m;
 8005a52:	4b7c      	ldr	r3, [pc, #496]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005a54:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005a58:	497a      	ldr	r1, [pc, #488]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005a5a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    break;
 8005a5e:	e014      	b.n	8005a8a <FUNC_Transmission+0x257a>
  case /*@>1f75b*/2:
    /*@>24060*/VCU_B./*@>27be8*/VOVG_ShiftDown/*@>7466*/ = /*@>24066*/VCU_B./*@>27beb*/VOVG_ShiftDown_f;
 8005a60:	4b78      	ldr	r3, [pc, #480]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005a62:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8005a66:	4977      	ldr	r1, [pc, #476]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005a68:	e9c1 2304 	strd	r2, r3, [r1, #16]
    break;
 8005a6c:	e00d      	b.n	8005a8a <FUNC_Transmission+0x257a>
  case /*@>1f75c*/3:
    /*@>2406c*/VCU_B./*@>27bee*/VOVG_ShiftDown/*@>7468*/ = /*@>24072*/VCU_B./*@>27bf1*/VOVG_ShiftDown_i;
 8005a6e:	4b75      	ldr	r3, [pc, #468]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005a70:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8005a74:	4973      	ldr	r1, [pc, #460]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005a76:	e9c1 2304 	strd	r2, r3, [r1, #16]
    break;
 8005a7a:	e006      	b.n	8005a8a <FUNC_Transmission+0x257a>
  default:
    /*@>24048*/VCU_B./*@>27bdc*/VOVG_ShiftDown/*@>7462*/ = /*@>2404e*/VCU_B./*@>27bdf*/VOVG_ShiftDown_m;
 8005a7c:	4b71      	ldr	r3, [pc, #452]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005a7e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005a82:	4970      	ldr	r1, [pc, #448]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005a84:	e9c1 2304 	strd	r2, r3, [r1, #16]
    break;
 8005a88:	bf00      	nop
}
/*@>746b*/switch (/*@>240ba*/VCU_B./*@>27c15*/DataTypeConversion_cg) {
 8005a8a:	4b6e      	ldr	r3, [pc, #440]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005a8c:	f893 377b 	ldrb.w	r3, [r3, #1915]	; 0x77b
 8005a90:	b25b      	sxtb	r3, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d00a      	beq.n	8005aac <FUNC_Transmission+0x259c>
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d00f      	beq.n	8005aba <FUNC_Transmission+0x25aa>
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d114      	bne.n	8005ac8 <FUNC_Transmission+0x25b8>
  case /*@>1f76f*/1:
    /*@>240de*/VCU_B./*@>27c27*/Ignition_Cut/*@>746f*/ = /*@>240e4*/VCU_B./*@>27c2a*/Ignition_Cut_o;
 8005a9e:	4b69      	ldr	r3, [pc, #420]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005aa0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005aa4:	4967      	ldr	r1, [pc, #412]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005aa6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    break;
 8005aaa:	e014      	b.n	8005ad6 <FUNC_Transmission+0x25c6>
  case /*@>1f770*/2:
    /*@>240ea*/VCU_B./*@>27c2d*/Ignition_Cut/*@>7471*/ = /*@>240f0*/VCU_B./*@>27c30*/Ignition_Cut_h;
 8005aac:	4b65      	ldr	r3, [pc, #404]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005aae:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	; 0x170
 8005ab2:	4964      	ldr	r1, [pc, #400]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005ab4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    break;
 8005ab8:	e00d      	b.n	8005ad6 <FUNC_Transmission+0x25c6>
  case /*@>1f771*/3:
    /*@>240f6*/VCU_B./*@>27c33*/Ignition_Cut/*@>7473*/ = /*@>240fc*/VCU_B./*@>27c36*/Ignition_Cut_g;
 8005aba:	4b62      	ldr	r3, [pc, #392]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005abc:	e9d3 2374 	ldrd	r2, r3, [r3, #464]	; 0x1d0
 8005ac0:	4960      	ldr	r1, [pc, #384]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005ac2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    break;
 8005ac6:	e006      	b.n	8005ad6 <FUNC_Transmission+0x25c6>
  default:
    /*@>240d2*/VCU_B./*@>27c21*/Ignition_Cut/*@>746d*/ = /*@>240d8*/VCU_B./*@>27c24*/Ignition_Cut_o;
 8005ac8:	4b5e      	ldr	r3, [pc, #376]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005aca:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005ace:	495d      	ldr	r1, [pc, #372]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005ad0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    break;
 8005ad4:	bf00      	nop
}
/*@>7476*/switch (/*@>24132*/VCU_B./*@>27c51*/DataTypeConversion_cg) {
 8005ad6:	4b5b      	ldr	r3, [pc, #364]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005ad8:	f893 377b 	ldrb.w	r3, [r3, #1915]	; 0x77b
 8005adc:	b25b      	sxtb	r3, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d00a      	beq.n	8005af8 <FUNC_Transmission+0x25e8>
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d00f      	beq.n	8005b06 <FUNC_Transmission+0x25f6>
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d114      	bne.n	8005b14 <FUNC_Transmission+0x2604>
  case /*@>1f784*/1:
    /*@>2416e*/VCU_B./*@>27c6f*/VOVG_IN/*@>747a*/ = /*@>24174*/VCU_B./*@>27c72*/VOVG_IN_h;
 8005aea:	4b56      	ldr	r3, [pc, #344]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005aec:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8005af0:	4954      	ldr	r1, [pc, #336]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005af2:	e9c1 2308 	strd	r2, r3, [r1, #32]
    break;
 8005af6:	e014      	b.n	8005b22 <FUNC_Transmission+0x2612>
  case /*@>1f785*/2:
    /*@>2417a*/VCU_B./*@>27c75*/VOVG_IN/*@>747c*/ = /*@>24180*/VCU_B./*@>27c78*/VOVG_IN_c;
 8005af8:	4b52      	ldr	r3, [pc, #328]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005afa:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	; 0x110
 8005afe:	4951      	ldr	r1, [pc, #324]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b00:	e9c1 2308 	strd	r2, r3, [r1, #32]
    break;
 8005b04:	e00d      	b.n	8005b22 <FUNC_Transmission+0x2612>
  case /*@>1f786*/3:
    /*@>24186*/VCU_B./*@>27c7b*/VOVG_IN/*@>747e*/ = /*@>2418c*/VCU_B./*@>27c7e*/VOVG_IN_b;
 8005b06:	4b4f      	ldr	r3, [pc, #316]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b08:	e9d3 238e 	ldrd	r2, r3, [r3, #568]	; 0x238
 8005b0c:	494d      	ldr	r1, [pc, #308]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b0e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    break;
 8005b12:	e006      	b.n	8005b22 <FUNC_Transmission+0x2612>
  default:
    /*@>24162*/VCU_B./*@>27c69*/VOVG_IN/*@>7478*/ = /*@>24168*/VCU_B./*@>27c6c*/VOVG_IN_h;
 8005b14:	4b4b      	ldr	r3, [pc, #300]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b16:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8005b1a:	494a      	ldr	r1, [pc, #296]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b1c:	e9c1 2308 	strd	r2, r3, [r1, #32]
    break;
 8005b20:	bf00      	nop
}
/*@>7481*/switch (/*@>241ce*/VCU_B./*@>27c9f*/DataTypeConversion_cg) {
 8005b22:	4b48      	ldr	r3, [pc, #288]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b24:	f893 377b 	ldrb.w	r3, [r3, #1915]	; 0x77b
 8005b28:	b25b      	sxtb	r3, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d00a      	beq.n	8005b44 <FUNC_Transmission+0x2634>
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d00f      	beq.n	8005b52 <FUNC_Transmission+0x2642>
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d114      	bne.n	8005b60 <FUNC_Transmission+0x2650>
  case /*@>1f799*/1:
    /*@>24210*/VCU_B./*@>27cc0*/VOVG_OUT/*@>7485*/ = /*@>24216*/VCU_B./*@>27cc3*/VOVG_OUT_j;
 8005b36:	4b43      	ldr	r3, [pc, #268]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b38:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8005b3c:	4941      	ldr	r1, [pc, #260]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b3e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    break;
 8005b42:	e014      	b.n	8005b6e <FUNC_Transmission+0x265e>
  case /*@>1f79a*/2:
    /*@>2421c*/VCU_B./*@>27cc6*/VOVG_OUT/*@>7487*/ = /*@>24222*/VCU_B./*@>27cc9*/VOVG_OUT_o;
 8005b44:	4b3f      	ldr	r3, [pc, #252]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b46:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
 8005b4a:	493e      	ldr	r1, [pc, #248]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b4c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    break;
 8005b50:	e00d      	b.n	8005b6e <FUNC_Transmission+0x265e>
  case /*@>1f79b*/3:
    /*@>24228*/VCU_B./*@>27ccc*/VOVG_OUT/*@>7489*/ = /*@>2422e*/VCU_B./*@>27ccf*/VOVG_OUT_i;
 8005b52:	4b3c      	ldr	r3, [pc, #240]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b54:	e9d3 23a0 	ldrd	r2, r3, [r3, #640]	; 0x280
 8005b58:	493a      	ldr	r1, [pc, #232]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b5a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    break;
 8005b5e:	e006      	b.n	8005b6e <FUNC_Transmission+0x265e>
  default:
    /*@>24204*/VCU_B./*@>27cba*/VOVG_OUT/*@>7483*/ = /*@>2420a*/VCU_B./*@>27cbd*/VOVG_OUT_j;
 8005b60:	4b38      	ldr	r3, [pc, #224]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b62:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8005b66:	4937      	ldr	r1, [pc, #220]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b68:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    break;
 8005b6c:	bf00      	nop
}
/*@>748c*/switch (/*@>24294*/VCU_B./*@>27d02*/DataTypeConversion_cg) {
 8005b6e:	4b35      	ldr	r3, [pc, #212]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b70:	f893 377b 	ldrb.w	r3, [r3, #1915]	; 0x77b
 8005b74:	b25b      	sxtb	r3, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d00a      	beq.n	8005b90 <FUNC_Transmission+0x2680>
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d00f      	beq.n	8005b9e <FUNC_Transmission+0x268e>
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d114      	bne.n	8005bac <FUNC_Transmission+0x269c>
  case /*@>1f7ae*/1:
    /*@>242c4*/VCU_B./*@>27d1a*/MHJ9_IN/*@>7490*/ = /*@>242ca*/VCU_B./*@>27d1d*/MHJ9_IN_e;
 8005b82:	4b30      	ldr	r3, [pc, #192]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b84:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 8005b88:	492e      	ldr	r1, [pc, #184]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b8a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    break;
 8005b8e:	e014      	b.n	8005bba <FUNC_Transmission+0x26aa>
  case /*@>1f7af*/2:
    /*@>242d0*/VCU_B./*@>27d20*/MHJ9_IN/*@>7492*/ = /*@>242d6*/VCU_B./*@>27d23*/MHJ9_IN_p;
 8005b90:	4b2c      	ldr	r3, [pc, #176]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b92:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8005b96:	492b      	ldr	r1, [pc, #172]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005b98:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    break;
 8005b9c:	e00d      	b.n	8005bba <FUNC_Transmission+0x26aa>
  case /*@>1f7b0*/3:
    /*@>242dc*/VCU_B./*@>27d26*/MHJ9_IN/*@>7494*/ = /*@>242e2*/VCU_B./*@>27d29*/MHJ9_IN_m;
 8005b9e:	4b29      	ldr	r3, [pc, #164]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005ba0:	e9d3 239e 	ldrd	r2, r3, [r3, #632]	; 0x278
 8005ba4:	4927      	ldr	r1, [pc, #156]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005ba6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    break;
 8005baa:	e006      	b.n	8005bba <FUNC_Transmission+0x26aa>
  default:
    /*@>242b8*/VCU_B./*@>27d14*/MHJ9_IN/*@>748e*/ = /*@>242be*/VCU_B./*@>27d17*/MHJ9_IN_e;
 8005bac:	4b25      	ldr	r3, [pc, #148]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005bae:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 8005bb2:	4924      	ldr	r1, [pc, #144]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005bb4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    break;
 8005bb8:	bf00      	nop
}
/*@>7497*/switch (/*@>24336*/VCU_B./*@>27d53*/DataTypeConversion_cg) {
 8005bba:	4b22      	ldr	r3, [pc, #136]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005bbc:	f893 377b 	ldrb.w	r3, [r3, #1915]	; 0x77b
 8005bc0:	b25b      	sxtb	r3, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d00a      	beq.n	8005bdc <FUNC_Transmission+0x26cc>
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d00f      	beq.n	8005bea <FUNC_Transmission+0x26da>
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d114      	bne.n	8005bf8 <FUNC_Transmission+0x26e8>
  case /*@>1f7c3*/1:
    /*@>24360*/VCU_B./*@>27d68*/MHJ9_OUT/*@>749b*/ = /*@>24366*/VCU_B./*@>27d6b*/MHJ9_OUT_d;
 8005bce:	4b1d      	ldr	r3, [pc, #116]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005bd0:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8005bd4:	491b      	ldr	r1, [pc, #108]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005bd6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    break;
 8005bda:	e014      	b.n	8005c06 <FUNC_Transmission+0x26f6>
  case /*@>1f7c4*/2:
    /*@>2436c*/VCU_B./*@>27d6e*/MHJ9_OUT/*@>749d*/ = /*@>24372*/VCU_B./*@>27d71*/MHJ9_OUT_k;
 8005bdc:	4b19      	ldr	r3, [pc, #100]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005bde:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 8005be2:	4918      	ldr	r1, [pc, #96]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005be4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    break;
 8005be8:	e00d      	b.n	8005c06 <FUNC_Transmission+0x26f6>
  case /*@>1f7c5*/3:
    /*@>24378*/VCU_B./*@>27d74*/MHJ9_OUT/*@>749f*/ = /*@>2437e*/VCU_B./*@>27d77*/MHJ9_OUT_p;
 8005bea:	4b16      	ldr	r3, [pc, #88]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005bec:	e9d3 239a 	ldrd	r2, r3, [r3, #616]	; 0x268
 8005bf0:	4914      	ldr	r1, [pc, #80]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005bf2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    break;
 8005bf6:	e006      	b.n	8005c06 <FUNC_Transmission+0x26f6>
  default:
    /*@>24354*/VCU_B./*@>27d62*/MHJ9_OUT/*@>7499*/ = /*@>2435a*/VCU_B./*@>27d65*/MHJ9_OUT_d;
 8005bf8:	4b12      	ldr	r3, [pc, #72]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005bfa:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8005bfe:	4911      	ldr	r1, [pc, #68]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005c00:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    break;
 8005c04:	bf00      	nop
}
/*@>74a2*/switch (/*@>243ba*/VCU_B./*@>27d95*/DataTypeConversion_cg) {
 8005c06:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005c08:	f893 377b 	ldrb.w	r3, [r3, #1915]	; 0x77b
 8005c0c:	b25b      	sxtb	r3, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d00a      	beq.n	8005c28 <FUNC_Transmission+0x2718>
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d00f      	beq.n	8005c36 <FUNC_Transmission+0x2726>
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d116      	bne.n	8005c48 <FUNC_Transmission+0x2738>
  case /*@>1f7d8*/1:
    /*@>243f0*/VCU_B./*@>27db0*/x_clutch_LC/*@>74a6*/ = /*@>243f6*/VCU_B./*@>27db3*/x_clutch_LC_b;
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005c1c:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 8005c20:	4908      	ldr	r1, [pc, #32]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005c22:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    break;
 8005c26:	e016      	b.n	8005c56 <FUNC_Transmission+0x2746>
  case /*@>1f7d9*/2:
    /*@>243fc*/VCU_B./*@>27db6*/x_clutch_LC/*@>74a8*/ = /*@>24402*/VCU_B./*@>27db9*/x_clutch_LC_i;
 8005c28:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005c2a:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 8005c2e:	4905      	ldr	r1, [pc, #20]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005c30:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    break;
 8005c34:	e00f      	b.n	8005c56 <FUNC_Transmission+0x2746>
  case /*@>1f7da*/3:
    /*@>24408*/VCU_B./*@>27dbc*/x_clutch_LC/*@>74aa*/ = /*@>2440e*/VCU_B./*@>27dbf*/x_clutch_LC_n;
 8005c36:	4b03      	ldr	r3, [pc, #12]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005c38:	e9d3 23a2 	ldrd	r2, r3, [r3, #648]	; 0x288
 8005c3c:	4901      	ldr	r1, [pc, #4]	; (8005c44 <FUNC_Transmission+0x2734>)
 8005c3e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    break;
 8005c42:	e008      	b.n	8005c56 <FUNC_Transmission+0x2746>
 8005c44:	200008a8 	.word	0x200008a8
  default:
    /*@>243e4*/VCU_B./*@>27daa*/x_clutch_LC/*@>74a4*/ = /*@>243ea*/VCU_B./*@>27dad*/x_clutch_LC_b;
 8005c48:	4b26      	ldr	r3, [pc, #152]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005c4a:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 8005c4e:	4925      	ldr	r1, [pc, #148]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005c50:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    break;
 8005c54:	bf00      	nop
}
/*@>74ad*/switch (/*@>24432*/VCU_B./*@>27dd1*/DataTypeConversion_cg) {
 8005c56:	4b23      	ldr	r3, [pc, #140]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005c58:	f893 377b 	ldrb.w	r3, [r3, #1915]	; 0x77b
 8005c5c:	b25b      	sxtb	r3, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d00a      	beq.n	8005c78 <FUNC_Transmission+0x2768>
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d00f      	beq.n	8005c86 <FUNC_Transmission+0x2776>
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d114      	bne.n	8005c94 <FUNC_Transmission+0x2784>
  case /*@>1f7ed*/1:
    /*@>2445c*/VCU_B./*@>27de6*/LC_Mdes/*@>74b1*/ = /*@>24462*/VCU_B./*@>27de9*/LC_Mdes_b;
 8005c6a:	4b1e      	ldr	r3, [pc, #120]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005c6c:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8005c70:	491c      	ldr	r1, [pc, #112]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005c72:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    break;
 8005c76:	e014      	b.n	8005ca2 <FUNC_Transmission+0x2792>
  case /*@>1f7ee*/2:
    /*@>24468*/VCU_B./*@>27dec*/LC_Mdes/*@>74b3*/ = /*@>2446e*/VCU_B./*@>27def*/LC_Mdes_f;
 8005c78:	4b1a      	ldr	r3, [pc, #104]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005c7a:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 8005c7e:	4919      	ldr	r1, [pc, #100]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005c80:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    break;
 8005c84:	e00d      	b.n	8005ca2 <FUNC_Transmission+0x2792>
  case /*@>1f7ef*/3:
    /*@>24474*/VCU_B./*@>27df2*/LC_Mdes/*@>74b5*/ = /*@>2447a*/VCU_B./*@>27df5*/LC_Mdes_bl;
 8005c86:	4b17      	ldr	r3, [pc, #92]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005c88:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	; 0x1d8
 8005c8c:	4915      	ldr	r1, [pc, #84]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005c8e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    break;
 8005c92:	e006      	b.n	8005ca2 <FUNC_Transmission+0x2792>
  default:
    /*@>24450*/VCU_B./*@>27de0*/LC_Mdes/*@>74af*/ = /*@>24456*/VCU_B./*@>27de3*/LC_Mdes_b;
 8005c94:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005c96:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8005c9a:	4912      	ldr	r1, [pc, #72]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005c9c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    break;
 8005ca0:	bf00      	nop
}
/* End of MultiPortSwitch: '<S7>/Multiport Switch' */

/* MultiPortSwitch: '<S7>/Multiport Switch1' */
/*@>1d708*/if (/*@>244b0*/VCU_B./*@>27e10*/DataTypeConversion_cg/*@>1d707*/ == /*@>1fe0e*/1) {
 8005ca2:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005ca4:	f893 377b 	ldrb.w	r3, [r3, #1915]	; 0x77b
 8005ca8:	b25b      	sxtb	r3, r3
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d10c      	bne.n	8005cc8 <FUNC_Transmission+0x27b8>
    /*@>244d4*/VCU_B./*@>27e22*/LC_active_bit/*@>74bc*/ = /*@>244da*/VCU_B./*@>27e25*/LogicalOperator_a;
 8005cae:	4b0d      	ldr	r3, [pc, #52]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005cb0:	f893 2800 	ldrb.w	r2, [r3, #2048]	; 0x800
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005cb6:	f883 2781 	strb.w	r2, [r3, #1921]	; 0x781
    /*@>244fe*/VCU_B./*@>27e37*/LC_ready_bit/*@>74c3*/ = /*@>24504*/VCU_B./*@>27e3a*/RelationalOperator_l;
 8005cba:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005cbc:	f893 2801 	ldrb.w	r2, [r3, #2049]	; 0x801
 8005cc0:	4b08      	ldr	r3, [pc, #32]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005cc2:	f883 2782 	strb.w	r2, [r3, #1922]	; 0x782
 8005cc6:	e009      	b.n	8005cdc <FUNC_Transmission+0x27cc>
} else {
    /*@>244ce*/VCU_B./*@>27e1f*/LC_active_bit/*@>74ba*/ = /*@>24ebf*/VCU_ConstB./*@>28314*/LC_active_bit;
 8005cc8:	4b07      	ldr	r3, [pc, #28]	; (8005ce8 <FUNC_Transmission+0x27d8>)
 8005cca:	7c9a      	ldrb	r2, [r3, #18]
 8005ccc:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005cce:	f883 2781 	strb.w	r2, [r3, #1921]	; 0x781
    /*@>244f8*/VCU_B./*@>27e34*/LC_ready_bit/*@>74c1*/ = /*@>24ec5*/VCU_ConstB./*@>28317*/LC_ready_bit;
 8005cd2:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <FUNC_Transmission+0x27d8>)
 8005cd4:	7cda      	ldrb	r2, [r3, #19]
 8005cd6:	4b03      	ldr	r3, [pc, #12]	; (8005ce4 <FUNC_Transmission+0x27d4>)
 8005cd8:	f883 2782 	strb.w	r2, [r3, #1922]	; 0x782


        
    
      
          }
 8005cdc:	371c      	adds	r7, #28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	200008a8 	.word	0x200008a8
 8005ce8:	0800f1d0 	.word	0x0800f1d0
 8005cec:	f3af 8000 	nop.w

08005cf0 <look1_binlxpw>:


    
             
real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[], uint32_T maxIndex)
{
 8005cf0:	b5b0      	push	{r4, r5, r7, lr}
 8005cf2:	b08a      	sub	sp, #40	; 0x28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
   Extrapolation method: 'Linear'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    if (u0 <= bp0[0U]) {
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	4610      	mov	r0, r2
 8005d06:	4619      	mov	r1, r3
 8005d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d0c:	f009 f932 	bl	800ef74 <__aeabi_dcmpge>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d020      	beq.n	8005d58 <look1_binlxpw+0x68>
        iLeft = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	61bb      	str	r3, [r7, #24]
        frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d24:	f008 fcec 	bl	800e700 <__aeabi_dsub>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4614      	mov	r4, r2
 8005d2e:	461d      	mov	r5, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3308      	adds	r3, #8
 8005d34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	f008 fcdf 	bl	800e700 <__aeabi_dsub>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4620      	mov	r0, r4
 8005d48:	4629      	mov	r1, r5
 8005d4a:	f008 ffb7 	bl	800ecbc <__aeabi_ddiv>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005d56:	e08b      	b.n	8005e70 <look1_binlxpw+0x180>
    } else if (u0 < bp0[maxIndex]) {
 8005d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	4413      	add	r3, r2
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	4610      	mov	r0, r2
 8005d66:	4619      	mov	r1, r3
 8005d68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d6c:	f009 f90c 	bl	800ef88 <__aeabi_dcmpgt>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d04d      	beq.n	8005e12 <look1_binlxpw+0x122>
        /* Binary Search */
        bpIdx = maxIndex >> 1U;
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	085b      	lsrs	r3, r3, #1
 8005d7a:	617b      	str	r3, [r7, #20]
        iLeft = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	61bb      	str	r3, [r7, #24]
        iRght = maxIndex;
 8005d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d82:	61fb      	str	r3, [r7, #28]
        while (iRght - iLeft > 1U) {
 8005d84:	e018      	b.n	8005db8 <look1_binlxpw+0xc8>
            if (u0 < bp0[bpIdx]) {
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	4610      	mov	r0, r2
 8005d94:	4619      	mov	r1, r3
 8005d96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d9a:	f009 f8f5 	bl	800ef88 <__aeabi_dcmpgt>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d002      	beq.n	8005daa <look1_binlxpw+0xba>
                iRght = bpIdx;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	e001      	b.n	8005dae <look1_binlxpw+0xbe>
            } else {
                iLeft = bpIdx;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	61bb      	str	r3, [r7, #24]
            }
            bpIdx = (iRght + iLeft) >> 1U;
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	4413      	add	r3, r2
 8005db4:	085b      	lsrs	r3, r3, #1
 8005db6:	617b      	str	r3, [r7, #20]
    } else if (u0 < bp0[maxIndex]) {
        /* Binary Search */
        bpIdx = maxIndex >> 1U;
        iLeft = 0U;
        iRght = maxIndex;
        while (iRght - iLeft > 1U) {
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d8e1      	bhi.n	8005d86 <look1_binlxpw+0x96>
            } else {
                iLeft = bpIdx;
            }
            bpIdx = (iRght + iLeft) >> 1U;
        }
        frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4413      	add	r3, r2
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005dd2:	f008 fc95 	bl	800e700 <__aeabi_dsub>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4614      	mov	r4, r2
 8005ddc:	461d      	mov	r5, r3
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	3301      	adds	r3, #1
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	4413      	add	r3, r2
 8005de8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	4413      	add	r3, r2
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	f008 fc82 	bl	800e700 <__aeabi_dsub>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4620      	mov	r0, r4
 8005e02:	4629      	mov	r1, r5
 8005e04:	f008 ff5a 	bl	800ecbc <__aeabi_ddiv>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005e10:	e02e      	b.n	8005e70 <look1_binlxpw+0x180>
    } else {
        iLeft = maxIndex - 1U;
 8005e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e14:	3b01      	subs	r3, #1
 8005e16:	61bb      	str	r3, [r7, #24]
        frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	4413      	add	r3, r2
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e2e:	f008 fc67 	bl	800e700 <__aeabi_dsub>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4614      	mov	r4, r2
 8005e38:	461d      	mov	r5, r3
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	4413      	add	r3, r2
 8005e42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	4413      	add	r3, r2
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	f008 fc52 	bl	800e700 <__aeabi_dsub>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4620      	mov	r0, r4
 8005e62:	4629      	mov	r1, r5
 8005e64:	f008 ff2a 	bl	800ecbc <__aeabi_ddiv>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    /* Interpolation 1-D
   Interpolation method: 'Linear point-slope'
   Use last breakpoint for index at or above upper limit: 'off'
   Overflow mode: 'portable wrapping'
 */
    return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	3301      	adds	r3, #1
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	4413      	add	r3, r2
 8005e7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	4413      	add	r3, r2
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	f008 fc39 	bl	800e700 <__aeabi_dsub>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4610      	mov	r0, r2
 8005e94:	4619      	mov	r1, r3
 8005e96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e9a:	f008 fde5 	bl	800ea68 <__aeabi_dmul>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	4413      	add	r3, r2
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f008 fc27 	bl	800e704 <__adddf3>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
}
 8005eba:	4610      	mov	r0, r2
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	3728      	adds	r7, #40	; 0x28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bdb0      	pop	{r4, r5, r7, pc}

08005ec4 <look2_binlxpw>:
        
         
real_T look2_binlxpw(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[], const real_T table[], const uint32_T maxIndex[], uint32_T stride)
{
 8005ec4:	b5b0      	push	{r4, r5, r7, lr}
 8005ec6:	b092      	sub	sp, #72	; 0x48
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005ece:	e9c7 2300 	strd	r2, r3, [r7]
   Extrapolation method: 'Linear'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    if (u0 <= bp0[0U]) {
 8005ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	4610      	mov	r0, r2
 8005eda:	4619      	mov	r1, r3
 8005edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ee0:	f009 f848 	bl	800ef74 <__aeabi_dcmpge>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d020      	beq.n	8005f2c <look2_binlxpw+0x68>
        iLeft = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	637b      	str	r3, [r7, #52]	; 0x34
        frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8005eee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ef8:	f008 fc02 	bl	800e700 <__aeabi_dsub>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4614      	mov	r4, r2
 8005f02:	461d      	mov	r5, r3
 8005f04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f06:	3308      	adds	r3, #8
 8005f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f008 fbf5 	bl	800e700 <__aeabi_dsub>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	4629      	mov	r1, r5
 8005f1e:	f008 fecd 	bl	800ecbc <__aeabi_ddiv>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8005f2a:	e092      	b.n	8006052 <look2_binlxpw+0x18e>
    } else if (u0 < bp0[maxIndex[0U]]) {
 8005f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f34:	4413      	add	r3, r2
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f42:	f009 f821 	bl	800ef88 <__aeabi_dcmpgt>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d04f      	beq.n	8005fec <look2_binlxpw+0x128>
        /* Binary Search */
        bpIdx = maxIndex[0U] >> 1U;
 8005f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	085b      	lsrs	r3, r3, #1
 8005f52:	63bb      	str	r3, [r7, #56]	; 0x38
        iLeft = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	637b      	str	r3, [r7, #52]	; 0x34
        iRght = maxIndex[0U];
 8005f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (iRght - iLeft > 1U) {
 8005f5e:	e018      	b.n	8005f92 <look2_binlxpw+0xce>
            if (u0 < bp0[bpIdx]) {
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f66:	4413      	add	r3, r2
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	4619      	mov	r1, r3
 8005f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f74:	f009 f808 	bl	800ef88 <__aeabi_dcmpgt>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <look2_binlxpw+0xc0>
                iRght = bpIdx;
 8005f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f82:	e001      	b.n	8005f88 <look2_binlxpw+0xc4>
            } else {
                iLeft = bpIdx;
 8005f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f86:	637b      	str	r3, [r7, #52]	; 0x34
            }
            bpIdx = (iRght + iLeft) >> 1U;
 8005f88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8c:	4413      	add	r3, r2
 8005f8e:	085b      	lsrs	r3, r3, #1
 8005f90:	63bb      	str	r3, [r7, #56]	; 0x38
    } else if (u0 < bp0[maxIndex[0U]]) {
        /* Binary Search */
        bpIdx = maxIndex[0U] >> 1U;
        iLeft = 0U;
        iRght = maxIndex[0U];
        while (iRght - iLeft > 1U) {
 8005f92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d8e1      	bhi.n	8005f60 <look2_binlxpw+0x9c>
            } else {
                iLeft = bpIdx;
            }
            bpIdx = (iRght + iLeft) >> 1U;
        }
        frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8005f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fa2:	4413      	add	r3, r2
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005fac:	f008 fba8 	bl	800e700 <__aeabi_dsub>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4614      	mov	r4, r2
 8005fb6:	461d      	mov	r5, r3
 8005fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fba:	3301      	adds	r3, #1
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fc0:	4413      	add	r3, r2
 8005fc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fcc:	4413      	add	r3, r2
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f008 fb95 	bl	800e700 <__aeabi_dsub>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4620      	mov	r0, r4
 8005fdc:	4629      	mov	r1, r5
 8005fde:	f008 fe6d 	bl	800ecbc <__aeabi_ddiv>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8005fea:	e032      	b.n	8006052 <look2_binlxpw+0x18e>
    } else {
        iLeft = maxIndex[0U] - 1U;
 8005fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	637b      	str	r3, [r7, #52]	; 0x34
        frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U] - 1U]);
 8005ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006002:	4413      	add	r3, r2
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800600c:	f008 fb78 	bl	800e700 <__aeabi_dsub>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4614      	mov	r4, r2
 8006016:	461d      	mov	r5, r3
 8006018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006020:	4413      	add	r3, r2
 8006022:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800602e:	3b01      	subs	r3, #1
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006034:	4413      	add	r3, r2
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	f008 fb61 	bl	800e700 <__aeabi_dsub>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	4620      	mov	r0, r4
 8006044:	4629      	mov	r1, r5
 8006046:	f008 fe39 	bl	800ecbc <__aeabi_ddiv>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
    fractions[0U] = frac;
 8006052:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006056:	e9c7 2304 	strd	r2, r3, [r7, #16]
    bpIndices[0U] = iLeft;
 800605a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605c:	623b      	str	r3, [r7, #32]
   Extrapolation method: 'Linear'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'off'
   Remove protection against out-of-range input in generated code: 'off'
 */
    if (u1 <= bp1[0U]) {
 800605e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	4610      	mov	r0, r2
 8006066:	4619      	mov	r1, r3
 8006068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800606c:	f008 ff82 	bl	800ef74 <__aeabi_dcmpge>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d020      	beq.n	80060b8 <look2_binlxpw+0x1f4>
        iLeft = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	637b      	str	r3, [r7, #52]	; 0x34
        frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 800607a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006084:	f008 fb3c 	bl	800e700 <__aeabi_dsub>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4614      	mov	r4, r2
 800608e:	461d      	mov	r5, r3
 8006090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006092:	3308      	adds	r3, #8
 8006094:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	f008 fb2f 	bl	800e700 <__aeabi_dsub>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	4620      	mov	r0, r4
 80060a8:	4629      	mov	r1, r5
 80060aa:	f008 fe07 	bl	800ecbc <__aeabi_ddiv>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80060b6:	e098      	b.n	80061ea <look2_binlxpw+0x326>
    } else if (u1 < bp1[maxIndex[1U]]) {
 80060b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ba:	3304      	adds	r3, #4
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060c2:	4413      	add	r3, r2
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	4610      	mov	r0, r2
 80060ca:	4619      	mov	r1, r3
 80060cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060d0:	f008 ff5a 	bl	800ef88 <__aeabi_dcmpgt>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d050      	beq.n	800617c <look2_binlxpw+0x2b8>
        /* Binary Search */
        bpIdx = maxIndex[1U] >> 1U;
 80060da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060dc:	3304      	adds	r3, #4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	085b      	lsrs	r3, r3, #1
 80060e2:	63bb      	str	r3, [r7, #56]	; 0x38
        iLeft = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	637b      	str	r3, [r7, #52]	; 0x34
        iRght = maxIndex[1U];
 80060e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (iRght - iLeft > 1U) {
 80060ee:	e018      	b.n	8006122 <look2_binlxpw+0x25e>
            if (u1 < bp1[bpIdx]) {
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060f6:	4413      	add	r3, r2
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	4610      	mov	r0, r2
 80060fe:	4619      	mov	r1, r3
 8006100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006104:	f008 ff40 	bl	800ef88 <__aeabi_dcmpgt>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <look2_binlxpw+0x250>
                iRght = bpIdx;
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006112:	e001      	b.n	8006118 <look2_binlxpw+0x254>
            } else {
                iLeft = bpIdx;
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	637b      	str	r3, [r7, #52]	; 0x34
            }
            bpIdx = (iRght + iLeft) >> 1U;
 8006118:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800611a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611c:	4413      	add	r3, r2
 800611e:	085b      	lsrs	r3, r3, #1
 8006120:	63bb      	str	r3, [r7, #56]	; 0x38
    } else if (u1 < bp1[maxIndex[1U]]) {
        /* Binary Search */
        bpIdx = maxIndex[1U] >> 1U;
        iLeft = 0U;
        iRght = maxIndex[1U];
        while (iRght - iLeft > 1U) {
 8006122:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b01      	cmp	r3, #1
 800612a:	d8e1      	bhi.n	80060f0 <look2_binlxpw+0x22c>
            } else {
                iLeft = bpIdx;
            }
            bpIdx = (iRght + iLeft) >> 1U;
        }
        frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 800612c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006132:	4413      	add	r3, r2
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	e9d7 0100 	ldrd	r0, r1, [r7]
 800613c:	f008 fae0 	bl	800e700 <__aeabi_dsub>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4614      	mov	r4, r2
 8006146:	461d      	mov	r5, r3
 8006148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614a:	3301      	adds	r3, #1
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006150:	4413      	add	r3, r2
 8006152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800615c:	4413      	add	r3, r2
 800615e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006162:	f008 facd 	bl	800e700 <__aeabi_dsub>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4620      	mov	r0, r4
 800616c:	4629      	mov	r1, r5
 800616e:	f008 fda5 	bl	800ecbc <__aeabi_ddiv>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800617a:	e036      	b.n	80061ea <look2_binlxpw+0x326>
    } else {
        iLeft = maxIndex[1U] - 1U;
 800617c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800617e:	3304      	adds	r3, #4
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3b01      	subs	r3, #1
 8006184:	637b      	str	r3, [r7, #52]	; 0x34
        frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U] - 1U]);
 8006186:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006188:	3304      	adds	r3, #4
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006190:	3b01      	subs	r3, #1
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006196:	4413      	add	r3, r2
 8006198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061a0:	f008 faae 	bl	800e700 <__aeabi_dsub>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	4614      	mov	r4, r2
 80061aa:	461d      	mov	r5, r3
 80061ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ae:	3304      	adds	r3, #4
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061b6:	4413      	add	r3, r2
 80061b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061be:	3304      	adds	r3, #4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80061c6:	3b01      	subs	r3, #1
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061cc:	4413      	add	r3, r2
 80061ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d2:	f008 fa95 	bl	800e700 <__aeabi_dsub>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4620      	mov	r0, r4
 80061dc:	4629      	mov	r1, r5
 80061de:	f008 fd6d 	bl	800ecbc <__aeabi_ddiv>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    /* Interpolation 2-D
   Interpolation method: 'Linear point-slope'
   Use last breakpoint for index at or above upper limit: 'off'
   Overflow mode: 'portable wrapping'
 */
    bpIdx = iLeft * stride + bpIndices[0U];
 80061ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061ee:	fb02 f203 	mul.w	r2, r2, r3
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	4413      	add	r3, r2
 80061f6:	63bb      	str	r3, [r7, #56]	; 0x38
    yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
 80061f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fa:	3301      	adds	r3, #1
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006200:	4413      	add	r3, r2
 8006202:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800620c:	4413      	add	r3, r2
 800620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006212:	f008 fa75 	bl	800e700 <__aeabi_dsub>
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	4610      	mov	r0, r2
 800621c:	4619      	mov	r1, r3
 800621e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006222:	f008 fc21 	bl	800ea68 <__aeabi_dmul>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4610      	mov	r0, r2
 800622c:	4619      	mov	r1, r3
 800622e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006234:	4413      	add	r3, r2
 8006236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623a:	f008 fa63 	bl	800e704 <__adddf3>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    bpIdx += stride;
 8006246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800624a:	4413      	add	r3, r2
 800624c:	63bb      	str	r3, [r7, #56]	; 0x38
    return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) - yL_1d) * frac + yL_1d;
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	3301      	adds	r3, #1
 8006252:	00db      	lsls	r3, r3, #3
 8006254:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006256:	4413      	add	r3, r2
 8006258:	e9d3 0100 	ldrd	r0, r1, [r3]
 800625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006262:	4413      	add	r3, r2
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f008 fa4a 	bl	800e700 <__aeabi_dsub>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4610      	mov	r0, r2
 8006272:	4619      	mov	r1, r3
 8006274:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006278:	f008 fbf6 	bl	800ea68 <__aeabi_dmul>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4610      	mov	r0, r2
 8006282:	4619      	mov	r1, r3
 8006284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800628a:	4413      	add	r3, r2
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	f008 fa38 	bl	800e704 <__adddf3>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	4610      	mov	r0, r2
 800629a:	4619      	mov	r1, r3
 800629c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062a0:	f008 fa2e 	bl	800e700 <__aeabi_dsub>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4610      	mov	r0, r2
 80062aa:	4619      	mov	r1, r3
 80062ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062b0:	f008 fbda 	bl	800ea68 <__aeabi_dmul>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4610      	mov	r0, r2
 80062ba:	4619      	mov	r1, r3
 80062bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062c0:	f008 fa20 	bl	800e704 <__adddf3>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
}
 80062c8:	4610      	mov	r0, r2
 80062ca:	4619      	mov	r1, r3
 80062cc:	3748      	adds	r7, #72	; 0x48
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bdb0      	pop	{r4, r5, r7, pc}
 80062d2:	bf00      	nop

080062d4 <VCU_initialize>:


  /* Model initialize function */
  
    void VCU_initialize(void)
  { 
 80062d4:	b580      	push	{r7, lr}
 80062d6:	af00      	add	r7, sp, #0
    
    
        /* Registration code */
          
  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 80062d8:	2008      	movs	r0, #8
 80062da:	f000 f8c5 	bl	8006468 <rt_InitInfAndNaN>
  

        
            
            /* initialize error status */
            rtmSetErrorStatus(VCU_M, (NULL));
 80062de:	4b09      	ldr	r3, [pc, #36]	; (8006304 <VCU_initialize+0x30>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	601a      	str	r2, [r3, #0]

    /* block I/O */
    
      
        
        (void) memset(((void *) &VCU_B), 0,
 80062e4:	4808      	ldr	r0, [pc, #32]	; (8006308 <VCU_initialize+0x34>)
 80062e6:	2100      	movs	r1, #0
 80062e8:	f640 0218 	movw	r2, #2072	; 0x818
 80062ec:	f008 febd 	bl	800f06a <memset>
    
        

    
        
                    (void) memset((void *)&VCU_DW,  0,
 80062f0:	4806      	ldr	r0, [pc, #24]	; (800630c <VCU_initialize+0x38>)
 80062f2:	2100      	movs	r1, #0
 80062f4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80062f8:	f008 feb7 	bl	800f06a <memset>



/* SystemInitialize for Atomic SubSystem: '<Root>/Transmission' */

/*@[28cda*/      FUNC_Transmission_Init();      
 80062fc:	f7fd f8dc 	bl	80034b8 <FUNC_Transmission_Init>

      
  


  }
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	200010c0 	.word	0x200010c0
 8006308:	200008a8 	.word	0x200008a8
 800630c:	200010c8 	.word	0x200010c8

08006310 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8006316:	2340      	movs	r3, #64	; 0x40
 8006318:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b20      	cmp	r3, #32
 800632a:	d10a      	bne.n	8006342 <rtGetInf+0x32>
    inf = rtGetInfF();
 800632c:	f000 f81a 	bl	8006364 <rtGetInfF>
 8006330:	4603      	mov	r3, r0
 8006332:	4618      	mov	r0, r3
 8006334:	f008 fb44 	bl	800e9c0 <__aeabi_f2d>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8006340:	e007      	b.n	8006352 <rtGetInf+0x42>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8006342:	4b07      	ldr	r3, [pc, #28]	; (8006360 <rtGetInf+0x50>)
 8006344:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8006346:	2300      	movs	r3, #0
 8006348:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 800634a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800634e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 8006352:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8006356:	4610      	mov	r0, r2
 8006358:	4619      	mov	r1, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	7ff00000 	.word	0x7ff00000

08006364 <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800636a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800636e:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8006370:	687b      	ldr	r3, [r7, #4]
}
 8006372:	4618      	mov	r0, r3
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop

08006380 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8006386:	2340      	movs	r3, #64	; 0x40
 8006388:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 800638a:	f04f 0200 	mov.w	r2, #0
 800638e:	f04f 0300 	mov.w	r3, #0
 8006392:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2b20      	cmp	r3, #32
 800639a:	d10a      	bne.n	80063b2 <rtGetMinusInf+0x32>
    minf = rtGetMinusInfF();
 800639c:	f000 f81a 	bl	80063d4 <rtGetMinusInfF>
 80063a0:	4603      	mov	r3, r0
 80063a2:	4618      	mov	r0, r3
 80063a4:	f008 fb0c 	bl	800e9c0 <__aeabi_f2d>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80063b0:	e007      	b.n	80063c2 <rtGetMinusInf+0x42>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 80063b2:	4b07      	ldr	r3, [pc, #28]	; (80063d0 <rtGetMinusInf+0x50>)
 80063b4:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 80063ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063be:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 80063c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80063c6:	4610      	mov	r0, r2
 80063c8:	4619      	mov	r1, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	fff00000 	.word	0xfff00000

080063d4 <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 80063da:	4b04      	ldr	r3, [pc, #16]	; (80063ec <rtGetMinusInfF+0x18>)
 80063dc:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 80063de:	687b      	ldr	r3, [r7, #4]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	ff800000 	.word	0xff800000

080063f0 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80063f6:	2340      	movs	r3, #64	; 0x40
 80063f8:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 80063fa:	f04f 0200 	mov.w	r2, #0
 80063fe:	f04f 0300 	mov.w	r3, #0
 8006402:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b20      	cmp	r3, #32
 800640a:	d10a      	bne.n	8006422 <rtGetNaN+0x32>
    nan = rtGetNaNF();
 800640c:	f000 f81a 	bl	8006444 <rtGetNaNF>
 8006410:	4603      	mov	r3, r0
 8006412:	4618      	mov	r0, r3
 8006414:	f008 fad4 	bl	800e9c0 <__aeabi_f2d>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8006420:	e007      	b.n	8006432 <rtGetNaN+0x42>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 8006422:	4b07      	ldr	r3, [pc, #28]	; (8006440 <rtGetNaN+0x50>)
 8006424:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8006426:	2300      	movs	r3, #0
 8006428:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 800642a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800642e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 8006432:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8006436:	4610      	mov	r0, r2
 8006438:	4619      	mov	r1, r3
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	fff80000 	.word	0xfff80000

08006444 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 800644a:	f04f 0300 	mov.w	r3, #0
 800644e:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 8006450:	4b04      	ldr	r3, [pc, #16]	; (8006464 <rtGetNaNF+0x20>)
 8006452:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 8006454:	687b      	ldr	r3, [r7, #4]
}
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	ffc00000 	.word	0xffc00000

08006468 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8006470:	f7ff ffbe 	bl	80063f0 <rtGetNaN>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4911      	ldr	r1, [pc, #68]	; (80064c0 <rt_InitInfAndNaN+0x58>)
 800647a:	e9c1 2300 	strd	r2, r3, [r1]
  rtNaNF = rtGetNaNF();
 800647e:	f7ff ffe1 	bl	8006444 <rtGetNaNF>
 8006482:	4602      	mov	r2, r0
 8006484:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <rt_InitInfAndNaN+0x5c>)
 8006486:	601a      	str	r2, [r3, #0]
  rtInf = rtGetInf();
 8006488:	f7ff ff42 	bl	8006310 <rtGetInf>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	490d      	ldr	r1, [pc, #52]	; (80064c8 <rt_InitInfAndNaN+0x60>)
 8006492:	e9c1 2300 	strd	r2, r3, [r1]
  rtInfF = rtGetInfF();
 8006496:	f7ff ff65 	bl	8006364 <rtGetInfF>
 800649a:	4602      	mov	r2, r0
 800649c:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <rt_InitInfAndNaN+0x64>)
 800649e:	601a      	str	r2, [r3, #0]
  rtMinusInf = rtGetMinusInf();
 80064a0:	f7ff ff6e 	bl	8006380 <rtGetMinusInf>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4909      	ldr	r1, [pc, #36]	; (80064d0 <rt_InitInfAndNaN+0x68>)
 80064aa:	e9c1 2300 	strd	r2, r3, [r1]
  rtMinusInfF = rtGetMinusInfF();
 80064ae:	f7ff ff91 	bl	80063d4 <rtGetMinusInfF>
 80064b2:	4602      	mov	r2, r0
 80064b4:	4b07      	ldr	r3, [pc, #28]	; (80064d4 <rt_InitInfAndNaN+0x6c>)
 80064b6:	601a      	str	r2, [r3, #0]
}
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20001240 	.word	0x20001240
 80064c4:	20001230 	.word	0x20001230
 80064c8:	20001238 	.word	0x20001238
 80064cc:	20001234 	.word	0x20001234
 80064d0:	20001248 	.word	0x20001248
 80064d4:	20001250 	.word	0x20001250

080064d8 <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 80064e2:	4b0d      	ldr	r3, [pc, #52]	; (8006518 <rtIsInf+0x40>)
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064ec:	f008 fd24 	bl	800ef38 <__aeabi_dcmpeq>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <rtIsInf+0x32>
 80064f6:	4b09      	ldr	r3, [pc, #36]	; (800651c <rtIsInf+0x44>)
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006500:	f008 fd1a 	bl	800ef38 <__aeabi_dcmpeq>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <rtIsInf+0x36>
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <rtIsInf+0x38>
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20001238 	.word	0x20001238
 800651c:	20001248 	.word	0x20001248

08006520 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value!=value) ? 1U : 0U);
 800652a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800652e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006532:	f008 fd01 	bl	800ef38 <__aeabi_dcmpeq>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <rtIsNaN+0x20>
 800653c:	2301      	movs	r3, #1
 800653e:	e000      	b.n	8006542 <rtIsNaN+0x22>
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop

0800654c <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a05      	ldr	r2, [pc, #20]	; (800656c <XMC_ERU_Enable+0x20>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d103      	bne.n	8006564 <XMC_ERU_Enable+0x18>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 800655c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006560:	f000 f99a 	bl	8006898 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	40044000 	.word	0x40044000

08006570 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	460b      	mov	r3, r1
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800657e:	7afb      	ldrb	r3, [r7, #11]
 8006580:	089b      	lsrs	r3, r3, #2
 8006582:	b2db      	uxtb	r3, r3
 8006584:	4618      	mov	r0, r3
 8006586:	7afb      	ldrb	r3, [r7, #11]
 8006588:	089b      	lsrs	r3, r3, #2
 800658a:	b2db      	uxtb	r3, r3
 800658c:	461a      	mov	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3204      	adds	r2, #4
 8006592:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006596:	7afb      	ldrb	r3, [r7, #11]
 8006598:	f003 0303 	and.w	r3, r3, #3
 800659c:	00db      	lsls	r3, r3, #3
 800659e:	4619      	mov	r1, r3
 80065a0:	23f8      	movs	r3, #248	; 0xf8
 80065a2:	408b      	lsls	r3, r1
 80065a4:	43db      	mvns	r3, r3
 80065a6:	ea02 0103 	and.w	r1, r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	1d02      	adds	r2, r0, #4
 80065ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80065b6:	7afb      	ldrb	r3, [r7, #11]
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	4619      	mov	r1, r3
 80065bc:	2303      	movs	r3, #3
 80065be:	408b      	lsls	r3, r1
 80065c0:	43db      	mvns	r3, r3
 80065c2:	401a      	ands	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4a3a      	ldr	r2, [pc, #232]	; (80066b4 <XMC_GPIO_Init+0x144>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <XMC_GPIO_Init+0x68>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4a39      	ldr	r2, [pc, #228]	; (80066b8 <XMC_GPIO_Init+0x148>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d10a      	bne.n	80065ee <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80065dc:	7afb      	ldrb	r3, [r7, #11]
 80065de:	2101      	movs	r1, #1
 80065e0:	fa01 f303 	lsl.w	r3, r1, r3
 80065e4:	43db      	mvns	r3, r3
 80065e6:	401a      	ands	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	661a      	str	r2, [r3, #96]	; 0x60
 80065ec:	e042      	b.n	8006674 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	b25b      	sxtb	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	da3c      	bge.n	8006674 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	7afb      	ldrb	r3, [r7, #11]
 8006600:	409a      	lsls	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8006606:	7afb      	ldrb	r3, [r7, #11]
 8006608:	08db      	lsrs	r3, r3, #3
 800660a:	b2db      	uxtb	r3, r3
 800660c:	4618      	mov	r0, r3
 800660e:	7afb      	ldrb	r3, [r7, #11]
 8006610:	08db      	lsrs	r3, r3, #3
 8006612:	b2db      	uxtb	r3, r3
 8006614:	461a      	mov	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3210      	adds	r2, #16
 800661a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800661e:	7afb      	ldrb	r3, [r7, #11]
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4619      	mov	r1, r3
 8006628:	2307      	movs	r3, #7
 800662a:	408b      	lsls	r3, r1
 800662c:	43db      	mvns	r3, r3
 800662e:	ea02 0103 	and.w	r1, r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f100 0210 	add.w	r2, r0, #16
 8006638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800663c:	7afb      	ldrb	r3, [r7, #11]
 800663e:	08db      	lsrs	r3, r3, #3
 8006640:	b2db      	uxtb	r3, r3
 8006642:	4618      	mov	r0, r3
 8006644:	7afb      	ldrb	r3, [r7, #11]
 8006646:	08db      	lsrs	r3, r3, #3
 8006648:	b2db      	uxtb	r3, r3
 800664a:	461a      	mov	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3210      	adds	r2, #16
 8006650:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	7a1b      	ldrb	r3, [r3, #8]
 8006658:	4619      	mov	r1, r3
 800665a:	7afb      	ldrb	r3, [r7, #11]
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	fa01 f303 	lsl.w	r3, r1, r3
 8006666:	ea42 0103 	orr.w	r1, r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f100 0210 	add.w	r2, r0, #16
 8006670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8006674:	7afb      	ldrb	r3, [r7, #11]
 8006676:	089b      	lsrs	r3, r3, #2
 8006678:	b2db      	uxtb	r3, r3
 800667a:	4618      	mov	r0, r3
 800667c:	7afb      	ldrb	r3, [r7, #11]
 800667e:	089b      	lsrs	r3, r3, #2
 8006680:	b2db      	uxtb	r3, r3
 8006682:	461a      	mov	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3204      	adds	r2, #4
 8006688:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	4619      	mov	r1, r3
 8006692:	7afb      	ldrb	r3, [r7, #11]
 8006694:	f003 0303 	and.w	r3, r3, #3
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	fa01 f303 	lsl.w	r3, r1, r3
 800669e:	ea42 0103 	orr.w	r1, r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	1d02      	adds	r2, r0, #4
 80066a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	48028e00 	.word	0x48028e00
 80066b8:	48028f00 	.word	0x48028f00

080066bc <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80066bc:	b480      	push	{r7}
 80066be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066c0:	4b03      	ldr	r3, [pc, #12]	; (80066d0 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80066c2:	681b      	ldr	r3, [r3, #0]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	2000ffc0 	.word	0x2000ffc0

080066d4 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 80066d8:	4b03      	ldr	r3, [pc, #12]	; (80066e8 <XMC_SCU_GetMirrorStatus+0x14>)
 80066da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80066de:	4618      	mov	r0, r3
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	50004000 	.word	0x50004000

080066ec <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80066f4:	f7f9 fdee 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80066f8:	4b0b      	ldr	r3, [pc, #44]	; (8006728 <XMC_SCU_lDelay+0x3c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a0b      	ldr	r2, [pc, #44]	; (800672c <XMC_SCU_lDelay+0x40>)
 80066fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006702:	0c9a      	lsrs	r2, r3, #18
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	fb02 f303 	mul.w	r3, r2, r3
 800670a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800670c:	2300      	movs	r3, #0
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	e003      	b.n	800671a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8006712:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3301      	adds	r3, #1
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	429a      	cmp	r2, r3
 8006720:	d3f7      	bcc.n	8006712 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	2000ffc0 	.word	0x2000ffc0
 800672c:	431bde83 	.word	0x431bde83

08006730 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8006738:	4905      	ldr	r1, [pc, #20]	; (8006750 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 800673a:	4b05      	ldr	r3, [pc, #20]	; (8006750 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4313      	orrs	r3, r2
 8006742:	608b      	str	r3, [r1, #8]
}
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	50004074 	.word	0x50004074

08006754 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8006754:	b480      	push	{r7}
 8006756:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8006758:	4b03      	ldr	r3, [pc, #12]	; (8006768 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800675a:	685b      	ldr	r3, [r3, #4]
}
 800675c:	4618      	mov	r0, r3
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	50004074 	.word	0x50004074

0800676c <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8006774:	4a03      	ldr	r2, [pc, #12]	; (8006784 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60d3      	str	r3, [r2, #12]
}
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	50004074 	.word	0x50004074

08006788 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8006788:	b5b0      	push	{r4, r5, r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af02      	add	r7, sp, #8
 800678e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8006790:	2000      	movs	r0, #0
 8006792:	f000 f8ad 	bl	80068f0 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8006796:	f000 fa3f 	bl	8006c18 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	79db      	ldrb	r3, [r3, #7]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80067a2:	f000 fa77 	bl	8006c94 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80067a6:	bf00      	nop
 80067a8:	f000 fa62 	bl	8006c70 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80067ac:	4603      	mov	r3, r0
 80067ae:	f083 0301 	eor.w	r3, r3, #1
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1f7      	bne.n	80067a8 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	7a5b      	ldrb	r3, [r3, #9]
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 f911 	bl	80069e4 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80067c2:	bf00      	nop
 80067c4:	f7ff ff86 	bl	80066d4 <XMC_SCU_GetMirrorStatus>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1fa      	bne.n	80067c4 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	7a1b      	ldrb	r3, [r3, #8]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 f9fa 	bl	8006bcc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	7c1b      	ldrb	r3, [r3, #16]
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 f91f 	bl	8006a20 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	7c5b      	ldrb	r3, [r3, #17]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 f942 	bl	8006a70 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	7c9b      	ldrb	r3, [r3, #18]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 f929 	bl	8006a48 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	7cdb      	ldrb	r3, [r3, #19]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 f94c 	bl	8006a98 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	799b      	ldrb	r3, [r3, #6]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00a      	beq.n	800681e <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8006808:	f000 fa7c 	bl	8006d04 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 800680c:	bf00      	nop
 800680e:	f000 faa1 	bl	8006d54 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8006812:	4603      	mov	r3, r0
 8006814:	f083 0301 	eor.w	r3, r3, #1
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1f7      	bne.n	800680e <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	78db      	ldrb	r3, [r3, #3]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d102      	bne.n	800682c <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8006826:	f000 fab9 	bl	8006d9c <XMC_SCU_CLOCK_DisableSystemPll>
 800682a:	e014      	b.n	8006856 <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800682c:	f000 faa6 	bl	8006d7c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	8899      	ldrh	r1, [r3, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800683c:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8006842:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	4608      	mov	r0, r1
 800684c:	4611      	mov	r1, r2
 800684e:	462a      	mov	r2, r5
 8006850:	4623      	mov	r3, r4
 8006852:	f000 fab3 	bl	8006dbc <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800685e:	d103      	bne.n	8006868 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8006860:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006864:	f000 f844 	bl	80068f0 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8006868:	f7f9 fd34 	bl	80002d4 <SystemCoreClockUpdate>
}
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bdb0      	pop	{r4, r5, r7, pc}
 8006872:	bf00      	nop

08006874 <XMC_SCU_INTERRUPT_EnableNmiRequest>:
  SCU_PARITY->PETE &= (uint32_t)~memory; 
}

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 800687c:	4905      	ldr	r1, [pc, #20]	; (8006894 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 800687e:	4b05      	ldr	r3, [pc, #20]	; (8006894 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8006880:	695a      	ldr	r2, [r3, #20]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4313      	orrs	r3, r2
 8006886:	614b      	str	r3, [r1, #20]
}
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	50004074 	.word	0x50004074

08006898 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	0f1b      	lsrs	r3, r3, #28
 80068a4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068ac:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	4613      	mov	r3, r2
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	4413      	add	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	461a      	mov	r2, r3
 80068ba:	4b04      	ldr	r3, [pc, #16]	; (80068cc <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80068bc:	4413      	add	r3, r2
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	601a      	str	r2, [r3, #0]
}
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	50004414 	.word	0x50004414

080068d0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80068d4:	f7ff fef2 	bl	80066bc <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80068d8:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80068da:	4b04      	ldr	r3, [pc, #16]	; (80068ec <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80068dc:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	50004600 	.word	0x50004600

080068f0 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80068f8:	4906      	ldr	r1, [pc, #24]	; (8006914 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80068fa:	4b06      	ldr	r3, [pc, #24]	; (8006914 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4313      	orrs	r3, r2
 8006906:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	50004600 	.word	0x50004600

08006918 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8006920:	4906      	ldr	r1, [pc, #24]	; (800693c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8006922:	4b06      	ldr	r3, [pc, #24]	; (800693c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4313      	orrs	r3, r2
 800692e:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	50004600 	.word	0x50004600

08006940 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8006948:	4906      	ldr	r1, [pc, #24]	; (8006964 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800694a:	4b06      	ldr	r3, [pc, #24]	; (8006964 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800694c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4313      	orrs	r3, r2
 8006956:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	50004600 	.word	0x50004600

08006968 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	4603      	mov	r3, r0
 8006970:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8006972:	88fb      	ldrh	r3, [r7, #6]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d108      	bne.n	800698a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8006978:	4a0a      	ldr	r2, [pc, #40]	; (80069a4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800697a:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006982:	f023 0301 	bic.w	r3, r3, #1
 8006986:	60d3      	str	r3, [r2, #12]
 8006988:	e007      	b.n	800699a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800698a:	4a06      	ldr	r2, [pc, #24]	; (80069a4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006994:	f043 0301 	orr.w	r3, r3, #1
 8006998:	60d3      	str	r3, [r2, #12]
  }
}
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	50004710 	.word	0x50004710

080069a8 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	4603      	mov	r3, r0
 80069b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80069b2:	bf00      	nop
 80069b4:	4b09      	ldr	r3, [pc, #36]	; (80069dc <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80069b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f8      	bne.n	80069b4 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80069c2:	4907      	ldr	r1, [pc, #28]	; (80069e0 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80069c4:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80069cc:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	50004000 	.word	0x50004000
 80069e0:	50004300 	.word	0x50004300

080069e4 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	4603      	mov	r3, r0
 80069ec:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80069ee:	bf00      	nop
 80069f0:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80069f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80069f6:	f003 0308 	and.w	r3, r3, #8
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f8      	bne.n	80069f0 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80069fe:	4907      	ldr	r1, [pc, #28]	; (8006a1c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8006a00:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8006a08:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	50004000 	.word	0x50004000
 8006a1c:	50004300 	.word	0x50004300

08006a20 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8006a28:	4906      	ldr	r1, [pc, #24]	; (8006a44 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8006a2a:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	50004600 	.word	0x50004600

08006a48 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8006a50:	4906      	ldr	r1, [pc, #24]	; (8006a6c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8006a52:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	50004600 	.word	0x50004600

08006a70 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8006a78:	4906      	ldr	r1, [pc, #24]	; (8006a94 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8006a7a:	4b06      	ldr	r3, [pc, #24]	; (8006a94 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8006a86:	4313      	orrs	r3, r2
 8006a88:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	50004600 	.word	0x50004600

08006a98 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8006aa0:	4906      	ldr	r1, [pc, #24]	; (8006abc <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8006aa2:	4b06      	ldr	r3, [pc, #24]	; (8006abc <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	50004600 	.word	0x50004600

08006ac0 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8006ac8:	4906      	ldr	r1, [pc, #24]	; (8006ae4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8006aca:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	50004600 	.word	0x50004600

08006ae8 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8006af0:	4906      	ldr	r1, [pc, #24]	; (8006b0c <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8006af2:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8006afe:	4313      	orrs	r3, r2
 8006b00:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	50004600 	.word	0x50004600

08006b10 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8006b18:	4906      	ldr	r1, [pc, #24]	; (8006b34 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8006b1a:	4b06      	ldr	r3, [pc, #24]	; (8006b34 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8006b26:	4313      	orrs	r3, r2
 8006b28:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	50004600 	.word	0x50004600

08006b38 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	4603      	mov	r3, r0
 8006b40:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8006b42:	4a04      	ldr	r2, [pc, #16]	; (8006b54 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8006b44:	79fb      	ldrb	r3, [r7, #7]
 8006b46:	6053      	str	r3, [r2, #4]
}
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	50004600 	.word	0x50004600

08006b58 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8006b62:	4a19      	ldr	r2, [pc, #100]	; (8006bc8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006b64:	4b18      	ldr	r3, [pc, #96]	; (8006bc8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	f043 0301 	orr.w	r3, r3, #1
 8006b6c:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8006b6e:	4a16      	ldr	r2, [pc, #88]	; (8006bc8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006b70:	4b15      	ldr	r3, [pc, #84]	; (8006bc8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	f043 0310 	orr.w	r3, r3, #16
 8006b78:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8006b7a:	4913      	ldr	r1, [pc, #76]	; (8006bc8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8006b8c:	4a0e      	ldr	r2, [pc, #56]	; (8006bc8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006b8e:	4b0e      	ldr	r3, [pc, #56]	; (8006bc8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b96:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8006b98:	4a0b      	ldr	r2, [pc, #44]	; (8006bc8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	; (8006bc8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	f023 0310 	bic.w	r3, r3, #16
 8006ba2:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8006ba4:	4a08      	ldr	r2, [pc, #32]	; (8006bc8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006ba6:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bae:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8006bb0:	bf00      	nop
 8006bb2:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	f003 0304 	and.w	r3, r3, #4
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0f9      	beq.n	8006bb2 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	50004710 	.word	0x50004710

08006bcc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8006bd6:	4a0f      	ldr	r2, [pc, #60]	; (8006c14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006bd8:	4b0e      	ldr	r3, [pc, #56]	; (8006c14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006be0:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d10e      	bne.n	8006c06 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8006be8:	4a0a      	ldr	r2, [pc, #40]	; (8006c14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006bea:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006bf2:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8006bf4:	2064      	movs	r0, #100	; 0x64
 8006bf6:	f7ff fd79 	bl	80066ec <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8006bfa:	4a06      	ldr	r2, [pc, #24]	; (8006c14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006bfc:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c04:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8006c06:	2064      	movs	r0, #100	; 0x64
 8006c08:	f7ff fd70 	bl	80066ec <XMC_SCU_lDelay>
}
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	50004710 	.word	0x50004710

08006c18 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8006c1c:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d109      	bne.n	8006c3c <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8006c28:	4b0f      	ldr	r3, [pc, #60]	; (8006c68 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8006c2e:	bf00      	nop
 8006c30:	4b0d      	ldr	r3, [pc, #52]	; (8006c68 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d0f9      	beq.n	8006c30 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8006c3c:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00a      	beq.n	8006c5e <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8006c48:	4b08      	ldr	r3, [pc, #32]	; (8006c6c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8006c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c4e:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8006c50:	bf00      	nop
 8006c52:	4b06      	ldr	r3, [pc, #24]	; (8006c6c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1f9      	bne.n	8006c52 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	50004200 	.word	0x50004200
 8006c6c:	50004400 	.word	0x50004400

08006c70 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8006c74:	4b06      	ldr	r3, [pc, #24]	; (8006c90 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	bf0c      	ite	eq
 8006c80:	2301      	moveq	r3, #1
 8006c82:	2300      	movne	r3, #0
 8006c84:	b2db      	uxtb	r3, r3
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	50004300 	.word	0x50004300

08006c94 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8006c98:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006c9c:	f7ff fd66 	bl	800676c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8006ca0:	4a17      	ldr	r2, [pc, #92]	; (8006d00 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006ca2:	4b17      	ldr	r3, [pc, #92]	; (8006d00 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006caa:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8006cac:	bf00      	nop
 8006cae:	f7ff fd51 	bl	8006754 <XMC_SCU_INTERUPT_GetEventStatus>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0f8      	beq.n	8006cae <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8006cbc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006cc0:	f7ff fd54 	bl	800676c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8006cc4:	4b0e      	ldr	r3, [pc, #56]	; (8006d00 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006cc6:	2208      	movs	r2, #8
 8006cc8:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8006cca:	bf00      	nop
 8006ccc:	f7ff fd42 	bl	8006754 <XMC_SCU_INTERUPT_GetEventStatus>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0f8      	beq.n	8006ccc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8006cda:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006cde:	f7ff fd45 	bl	800676c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8006ce2:	4a07      	ldr	r2, [pc, #28]	; (8006d00 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006ce4:	4b06      	ldr	r3, [pc, #24]	; (8006d00 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f043 0308 	orr.w	r3, r3, #8
 8006cec:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8006cee:	bf00      	nop
 8006cf0:	f7ff fd30 	bl	8006754 <XMC_SCU_INTERUPT_GetEventStatus>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0f8      	beq.n	8006cf0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	50004300 	.word	0x50004300

08006d04 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8006d04:	b5b0      	push	{r4, r5, r7, lr}
 8006d06:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8006d08:	4a0f      	ldr	r2, [pc, #60]	; (8006d48 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8006d0a:	4b0f      	ldr	r3, [pc, #60]	; (8006d48 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d12:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8006d14:	4d0d      	ldr	r5, [pc, #52]	; (8006d4c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8006d16:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8006d1e:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8006d22:	f004 f9a9 	bl	800b078 <OSCHP_GetFrequency>
 8006d26:	4602      	mov	r2, r0
 8006d28:	4b09      	ldr	r3, [pc, #36]	; (8006d50 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8006d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d2e:	0d1b      	lsrs	r3, r3, #20
 8006d30:	3b01      	subs	r3, #1
 8006d32:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8006d34:	4323      	orrs	r3, r4
 8006d36:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8006d38:	4a03      	ldr	r2, [pc, #12]	; (8006d48 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8006d3a:	4b03      	ldr	r3, [pc, #12]	; (8006d48 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d42:	6053      	str	r3, [r2, #4]
}
 8006d44:	bdb0      	pop	{r4, r5, r7, pc}
 8006d46:	bf00      	nop
 8006d48:	50004710 	.word	0x50004710
 8006d4c:	50004700 	.word	0x50004700
 8006d50:	6b5fca6b 	.word	0x6b5fca6b

08006d54 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8006d58:	4b07      	ldr	r3, [pc, #28]	; (8006d78 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8006d60:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8006d64:	bf0c      	ite	eq
 8006d66:	2301      	moveq	r3, #1
 8006d68:	2300      	movne	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	50004710 	.word	0x50004710

08006d7c <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8006d80:	4a05      	ldr	r2, [pc, #20]	; (8006d98 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8006d82:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d8a:	f023 0302 	bic.w	r3, r3, #2
 8006d8e:	6053      	str	r3, [r2, #4]
}
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	50004710 	.word	0x50004710

08006d9c <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8006da0:	4a05      	ldr	r2, [pc, #20]	; (8006db8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8006da2:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006daa:	f043 0302 	orr.w	r3, r3, #2
 8006dae:	6053      	str	r3, [r2, #4]
}
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	50004710 	.word	0x50004710

08006dbc <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60ba      	str	r2, [r7, #8]
 8006dc4:	607b      	str	r3, [r7, #4]
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	81fb      	strh	r3, [r7, #14]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8006dce:	89fb      	ldrh	r3, [r7, #14]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7ff fdc9 	bl	8006968 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8006dd6:	7b7b      	ldrb	r3, [r7, #13]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	f040 8084 	bne.w	8006ee6 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8006dde:	89fb      	ldrh	r3, [r7, #14]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d109      	bne.n	8006df8 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8006de4:	f004 f948 	bl	800b078 <OSCHP_GetFrequency>
 8006de8:	4602      	mov	r2, r0
 8006dea:	4b4b      	ldr	r3, [pc, #300]	; (8006f18 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8006dec:	fba3 2302 	umull	r2, r3, r3, r2
 8006df0:	0c9b      	lsrs	r3, r3, #18
 8006df2:	059b      	lsls	r3, r3, #22
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	e002      	b.n	8006dfe <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8006df8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8006dfc:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	fb02 f203 	mul.w	r2, r2, r3
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0c:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	4a42      	ldr	r2, [pc, #264]	; (8006f1c <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8006e12:	fba2 2303 	umull	r2, r3, r2, r3
 8006e16:	091b      	lsrs	r3, r3, #4
 8006e18:	0d9b      	lsrs	r3, r3, #22
 8006e1a:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8006e1c:	4a40      	ldr	r2, [pc, #256]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e1e:	4b40      	ldr	r3, [pc, #256]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f043 0301 	orr.w	r3, r3, #1
 8006e26:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8006e28:	4a3d      	ldr	r2, [pc, #244]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e2a:	4b3d      	ldr	r3, [pc, #244]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f043 0310 	orr.w	r3, r3, #16
 8006e32:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8006e34:	493a      	ldr	r1, [pc, #232]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e36:	4b3a      	ldr	r3, [pc, #232]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	4b3a      	ldr	r3, [pc, #232]	; (8006f24 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8006e3c:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	3a01      	subs	r2, #1
 8006e42:	0212      	lsls	r2, r2, #8
 8006e44:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006e4c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8006e54:	4313      	orrs	r3, r2
 8006e56:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8006e58:	4a31      	ldr	r2, [pc, #196]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e5a:	4b31      	ldr	r3, [pc, #196]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e62:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8006e64:	4a2e      	ldr	r2, [pc, #184]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e66:	4b2e      	ldr	r3, [pc, #184]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f023 0310 	bic.w	r3, r3, #16
 8006e6e:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8006e70:	4a2b      	ldr	r2, [pc, #172]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e72:	4b2b      	ldr	r3, [pc, #172]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e7a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8006e7c:	bf00      	nop
 8006e7e:	4b28      	ldr	r3, [pc, #160]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0304 	and.w	r3, r3, #4
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0f9      	beq.n	8006e7e <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8006e8a:	4a25      	ldr	r2, [pc, #148]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e8c:	4b24      	ldr	r3, [pc, #144]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f023 0301 	bic.w	r3, r3, #1
 8006e94:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8006e96:	bf00      	nop
 8006e98:	4b21      	ldr	r3, [pc, #132]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1f9      	bne.n	8006e98 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	4a20      	ldr	r2, [pc, #128]	; (8006f28 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8006ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	0d9b      	lsrs	r3, r3, #22
 8006eb0:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8006eb2:	6a3a      	ldr	r2, [r7, #32]
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d202      	bcs.n	8006ec0 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8006eba:	6938      	ldr	r0, [r7, #16]
 8006ebc:	f000 f838 	bl	8006f30 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	085b      	lsrs	r3, r3, #1
 8006ec4:	4a19      	ldr	r2, [pc, #100]	; (8006f2c <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8006ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eca:	095b      	lsrs	r3, r3, #5
 8006ecc:	0d9b      	lsrs	r3, r3, #22
 8006ece:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8006ed0:	6a3a      	ldr	r2, [r7, #32]
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d202      	bcs.n	8006ede <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8006ed8:	6938      	ldr	r0, [r7, #16]
 8006eda:	f000 f829 	bl	8006f30 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8006ede:	6a38      	ldr	r0, [r7, #32]
 8006ee0:	f000 f826 	bl	8006f30 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8006ee4:	e015      	b.n	8006f12 <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8006ee6:	490e      	ldr	r1, [pc, #56]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006ee8:	4b0d      	ldr	r3, [pc, #52]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8006ef8:	4a09      	ldr	r2, [pc, #36]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006efa:	4b09      	ldr	r3, [pc, #36]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f043 0301 	orr.w	r3, r3, #1
 8006f02:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8006f04:	bf00      	nop
 8006f06:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0f9      	beq.n	8006f06 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	431bde83 	.word	0x431bde83
 8006f1c:	aaaaaaab 	.word	0xaaaaaaab
 8006f20:	50004710 	.word	0x50004710
 8006f24:	f08080ff 	.word	0xf08080ff
 8006f28:	88888889 	.word	0x88888889
 8006f2c:	b60b60b7 	.word	0xb60b60b7

08006f30 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8006f38:	4907      	ldr	r1, [pc, #28]	; (8006f58 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8006f3a:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	3b01      	subs	r3, #1
 8006f46:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8006f4c:	2032      	movs	r0, #50	; 0x32
 8006f4e:	f7ff fbcd 	bl	80066ec <XMC_SCU_lDelay>
}
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	50004710 	.word	0x50004710

08006f5c <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8006f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	bf0c      	ite	eq
 8006f72:	2301      	moveq	r3, #1
 8006f74:	2300      	movne	r3, #0
 8006f76:	b2db      	uxtb	r3, r3
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	4608      	mov	r0, r1
 8006f8e:	4611      	mov	r1, r2
 8006f90:	461a      	mov	r2, r3
 8006f92:	4603      	mov	r3, r0
 8006f94:	70fb      	strb	r3, [r7, #3]
 8006f96:	460b      	mov	r3, r1
 8006f98:	70bb      	strb	r3, [r7, #2]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8006f9e:	78fa      	ldrb	r2, [r7, #3]
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8006fa0:	78bb      	ldrb	r3, [r7, #2]
 8006fa2:	041b      	lsls	r3, r3, #16
 8006fa4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8006fa8:	431a      	orrs	r2, r3
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8006faa:	787b      	ldrb	r3, [r7, #1]
 8006fac:	061b      	lsls	r3, r3, #24
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8006fae:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	601a      	str	r2, [r3, #0]
}
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop

08006fe0 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	601a      	str	r2, [r3, #0]
}
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop

08007000 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4293      	cmp	r3, r2
 8007010:	bf38      	it	cc
 8007012:	4613      	movcc	r3, r2
}
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4293      	cmp	r3, r2
 8007030:	bf28      	it	cs
 8007032:	4613      	movcs	r3, r2
}
 8007034:	4618      	mov	r0, r3
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
                                               const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b088      	sub	sp, #32
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	6852      	ldr	r2, [r2, #4]
 8007052:	fbb3 f1f2 	udiv	r1, r3, r2
 8007056:	fb02 f201 	mul.w	r2, r2, r1
 800705a:	1a9b      	subs	r3, r3, r2
 800705c:	2b00      	cmp	r3, #0
 800705e:	f040 808e 	bne.w	800717e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x13e>
  {
    uint32_t prescaler;
    uint32_t div8 = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007072:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 8007074:	2319      	movs	r3, #25
 8007076:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8007080:	e04b      	b.n	800711a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xda>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	fbb3 f2f2 	udiv	r2, r3, r2
 800708a:	6979      	ldr	r1, [r7, #20]
 800708c:	fb01 f202 	mul.w	r2, r1, r2
 8007090:	1a9b      	subs	r3, r3, r2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d13e      	bne.n	8007114 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
      {
    	  div8 = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a2:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d034      	beq.n	8007114 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070b0:	d830      	bhi.n	8007114 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
        {
          if (prescaler >= 64)
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	2b3f      	cmp	r3, #63	; 0x3f
 80070b6:	d90a      	bls.n	80070ce <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8a>
            {
              --ntq;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	617b      	str	r3, [r7, #20]
              continue;
 80070c8:	e027      	b.n	800711a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xda>
            }
            else
            {
              div8 = 1;
 80070ca:	2301      	movs	r3, #1
 80070cc:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	8912      	ldrh	r2, [r2, #8]
 80070d6:	fb02 f303 	mul.w	r3, r2, r3
 80070da:	4a2b      	ldr	r2, [pc, #172]	; (8007188 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x148>)
 80070dc:	fba2 2303 	umull	r2, r3, r2, r3
 80070e0:	0b5b      	lsrs	r3, r3, #13
 80070e2:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	3b01      	subs	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d90f      	bls.n	8007114 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	2b0f      	cmp	r3, #15
 80070f8:	d80c      	bhi.n	8007114 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d909      	bls.n	8007114 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
        		  (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b06      	cmp	r3, #6
 8007104:	d806      	bhi.n	8007114 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	895b      	ldrh	r3, [r3, #10]
 800710a:	461a      	mov	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	429a      	cmp	r2, r3
 8007110:	d800      	bhi.n	8007114 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
          {
            break;
 8007112:	e005      	b.n	8007120 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe0>
          }


        }
      }
      --ntq;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	3b01      	subs	r3, #1
 8007118:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b07      	cmp	r3, #7
 800711e:	d8b0      	bhi.n	8007082 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x42>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2b07      	cmp	r3, #7
 8007124:	d92b      	bls.n	800717e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x13e>
    {


      XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff ff4a 	bl	8006fc0 <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3b01      	subs	r3, #1
 8007130:	031b      	lsls	r3, r3, #12
 8007132:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	895b      	ldrh	r3, [r3, #10]
 800713a:	3b01      	subs	r3, #1
 800713c:	019b      	lsls	r3, r3, #6
 800713e:	b2db      	uxtb	r3, r3


      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8007140:	431a      	orrs	r2, r3
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	3b01      	subs	r3, #1
 8007146:	021b      	lsls	r3, r3, #8
 8007148:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 800714c:	ea42 0103 	orr.w	r1, r2, r3
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	4613      	mov	r3, r2
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	4413      	add	r3, r2
 8007158:	461a      	mov	r2, r3
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	40d3      	lsrs	r3, r2
 800715e:	3b01      	subs	r3, #1
 8007160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8007164:	ea41 0203 	orr.w	r2, r1, r3
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	03db      	lsls	r3, r3, #15
 800716c:	b29b      	uxth	r3, r3

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 800716e:	431a      	orrs	r2, r3


      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	611a      	str	r2, [r3, #16]
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7ff ff33 	bl	8006fe0 <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
 800717a:	2300      	movs	r3, #0
 800717c:	e000      	b.n	8007180 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x140>
    }
  }

  return XMC_CAN_STATUS_ERROR;
 800717e:	2301      	movs	r3, #1
}
 8007180:	4618      	mov	r0, r3
 8007182:	3720      	adds	r7, #32
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	d1b71759 	.word	0xd1b71759

0800718c <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	460b      	mov	r3, r1
 8007196:	70fb      	strb	r3, [r7, #3]
 8007198:	4613      	mov	r3, r2
 800719a:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 800719c:	bf00      	nop
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7ff fedc 	bl	8006f5c <XMC_CAN_IsPanelControlReady>
 80071a4:	4603      	mov	r3, r0
 80071a6:	f083 0301 	eor.w	r3, r3, #1
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1f6      	bne.n	800719e <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 80071b0:	78fb      	ldrb	r3, [r7, #3]
 80071b2:	3301      	adds	r3, #1
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	78ba      	ldrb	r2, [r7, #2]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	2102      	movs	r1, #2
 80071bc:	f7ff fee2 	bl	8006f84 <XMC_CAN_PanelControl>
}
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop

080071c8 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 80071d0:	4809      	ldr	r0, [pc, #36]	; (80071f8 <XMC_CAN_Enable+0x30>)
 80071d2:	f7ff fb61 	bl	8006898 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f023 0201 	bic.w	r2, r3, #1
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 80071e2:	bf00      	nop
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0302 	and.w	r3, r3, #2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1f9      	bne.n	80071e4 <XMC_CAN_Enable+0x1c>
  {
    /*Do nothing*/
  };
}
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	10000010 	.word	0x10000010

080071fc <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	460b      	mov	r3, r1
 8007206:	70fb      	strb	r3, [r7, #3]
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop

08007214 <XMC_CAN_GetBaudrateClockFrequency>:
  return XMC_CAN_CANCLKSRC_FPERI;
#endif    
}

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
      frequency = 0;
      break;
  }
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 800721c:	f7ff fb58 	bl	80068d0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8007220:	60f8      	str	r0, [r7, #12]
#endif  

  return frequency;
 8007222:	68fb      	ldr	r3, [r7, #12]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	460b      	mov	r3, r1
 8007236:	607a      	str	r2, [r7, #4]
 8007238:	72fb      	strb	r3, [r7, #11]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f7ff ffc4 	bl	80071c8 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 8007240:	7afb      	ldrb	r3, [r7, #11]
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	4619      	mov	r1, r3
 8007246:	f7ff ffd9 	bl	80071fc <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f7ff ffe2 	bl	8007214 <XMC_CAN_GetBaudrateClockFrequency>
 8007250:	61f8      	str	r0, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	fbb2 f3f3 	udiv	r3, r2, r3
 800725a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800725e:	2000      	movs	r0, #0
 8007260:	4619      	mov	r1, r3
 8007262:	f7ff fecd 	bl	8007000 <max>
 8007266:	4603      	mov	r3, r0
 8007268:	4618      	mov	r0, r3
 800726a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800726e:	f7ff fed7 	bl	8007020 <min>
 8007272:	61b8      	str	r0, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800727a:	69fa      	ldr	r2, [r7, #28]
 800727c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007280:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800728a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	4313      	orrs	r3, r2
 800729a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	60da      	str	r2, [r3, #12]

  return freq_n;
 80072a2:	697b      	ldr	r3, [r7, #20]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3720      	adds	r7, #32
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t reg;
  
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 80072bc:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 80072c0:	095b      	lsrs	r3, r3, #5
 80072c2:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	035a      	lsls	r2, r3, #13
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f003 031f 	and.w	r3, r3, #31
 80072d0:	021b      	lsls	r3, r3, #8
 80072d2:	4313      	orrs	r3, r2
 80072d4:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6812      	ldr	r2, [r2, #0]
 80072de:	6892      	ldr	r2, [r2, #8]
 80072e0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80072e4:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6812      	ldr	r2, [r2, #0]
 80072ee:	6891      	ldr	r1, [r2, #8]
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	609a      	str	r2, [r3, #8]
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	79db      	ldrb	r3, [r3, #7]
 80072fa:	f003 0320 	and.w	r3, r3, #32
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d007      	beq.n	8007314 <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	79db      	ldrb	r3, [r3, #7]
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 800730e:	2b00      	cmp	r3, #0
 8007310:	d100      	bne.n	8007314 <XMC_CAN_MO_Config+0x68>
 8007312:	e060      	b.n	80073d6 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8007318:	2b00      	cmp	r3, #0
 800731a:	d004      	beq.n	8007326 <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8007320:	2b01      	cmp	r3, #1
 8007322:	d000      	beq.n	8007326 <XMC_CAN_MO_Config+0x7a>
 8007324:	e057      	b.n	80073d6 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2220      	movs	r2, #32
 800732c:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	79db      	ldrb	r3, [r3, #7]
 8007332:	f003 0320 	and.w	r3, r3, #32
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d128      	bne.n	800738e <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8007348:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8007352:	049b      	lsls	r3, r3, #18
 8007354:	461a      	mov	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8007370:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800737a:	049b      	lsls	r3, r3, #18
 800737c:	461a      	mov	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	60da      	str	r2, [r3, #12]
 800738c:	e009      	b.n	80073a2 <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	6852      	ldr	r2, [r2, #4]
 8007396:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6892      	ldr	r2, [r2, #8]
 80073a0:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	7e1b      	ldrb	r3, [r3, #24]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d10c      	bne.n	80073c4 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f81a 	bl	80073e4 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80073b8:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a07      	ldr	r2, [pc, #28]	; (80073dc <XMC_CAN_MO_Config+0x130>)
 80073c0:	61da      	str	r2, [r3, #28]
 80073c2:	e008      	b.n	80073d6 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073cc:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a03      	ldr	r2, [pc, #12]	; (80073e0 <XMC_CAN_MO_Config+0x134>)
 80073d4:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	062000c0 	.word	0x062000c0
 80073e0:	00a00640 	.word	0x00a00640

080073e4 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80073ec:	2303      	movs	r3, #3
 80073ee:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	7e1b      	ldrb	r3, [r3, #24]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d122      	bne.n	800743e <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2220      	movs	r2, #32
 80073fe:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6812      	ldr	r2, [r2, #0]
 8007408:	6812      	ldr	r2, [r2, #0]
 800740a:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	7b12      	ldrb	r2, [r2, #12]
 8007412:	0612      	lsls	r2, r2, #24
 8007414:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8007418:	430a      	orrs	r2, r1
 800741a:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6912      	ldr	r2, [r2, #16]
 8007424:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	6952      	ldr	r2, [r2, #20]
 800742e:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOCTR_RESRTSEL_Msk);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a06      	ldr	r2, [pc, #24]	; (8007450 <XMC_CAN_MO_UpdateData+0x6c>)
 8007436:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 8007438:	2300      	movs	r3, #0
 800743a:	73fb      	strb	r3, [r7, #15]
 800743c:	e001      	b.n	8007442 <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800743e:	2303      	movs	r3, #3
 8007440:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 8007442:	7bfb      	ldrb	r3, [r7, #15]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	00280040 	.word	0x00280040

08007454 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	095b      	lsrs	r3, r3, #5
 800746c:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007478:	0a1b      	lsrs	r3, r3, #8
 800747a:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d102      	bne.n	8007488 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 8007482:	2304      	movs	r3, #4
 8007484:	75fb      	strb	r3, [r7, #23]
 8007486:	e00c      	b.n	80074a2 <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d102      	bne.n	8007494 <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 800748e:	2302      	movs	r3, #2
 8007490:	75fb      	strb	r3, [r7, #23]
 8007492:	e006      	b.n	80074a2 <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800749c:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 800749e:	2300      	movs	r3, #0
 80074a0:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ce:	0adb      	lsrs	r3, r3, #11
 80074d0:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	089b      	lsrs	r3, r3, #2
 80074de:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80074e6:	2303      	movs	r3, #3
 80074e8:	75fb      	strb	r3, [r7, #23]
 80074ea:	e0a7      	b.n	800763c <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d102      	bne.n	80074f8 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 80074f2:	2302      	movs	r3, #2
 80074f4:	75fb      	strb	r3, [r7, #23]
 80074f6:	e0a1      	b.n	800763c <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2208      	movs	r2, #8
 80074fe:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800750a:	0f5b      	lsrs	r3, r3, #29
 800750c:	2b00      	cmp	r3, #0
 800750e:	d140      	bne.n	8007592 <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	79d3      	ldrb	r3, [r2, #7]
 8007514:	f36f 1345 	bfc	r3, #5, #1
 8007518:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	699a      	ldr	r2, [r3, #24]
 8007520:	4b4a      	ldr	r3, [pc, #296]	; (800764c <XMC_CAN_MO_Receive+0x19c>)
 8007522:	4013      	ands	r3, r2
 8007524:	0c9b      	lsrs	r3, r3, #18
 8007526:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6853      	ldr	r3, [r2, #4]
 800752e:	f361 031c 	bfi	r3, r1, #0, #29
 8007532:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800753e:	0f5b      	lsrs	r3, r3, #29
 8007540:	b2db      	uxtb	r3, r3
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	b2d9      	uxtb	r1, r3
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	7ad3      	ldrb	r3, [r2, #11]
 800754c:	f361 1345 	bfi	r3, r1, #5, #1
 8007550:	72d3      	strb	r3, [r2, #11]
        if(can_mo->can_ide_mask == 1U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	7adb      	ldrb	r3, [r3, #11]
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00d      	beq.n	800757c <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68da      	ldr	r2, [r3, #12]
 8007566:	4b39      	ldr	r3, [pc, #228]	; (800764c <XMC_CAN_MO_Receive+0x19c>)
 8007568:	4013      	ands	r3, r2
 800756a:	0c9b      	lsrs	r3, r3, #18
 800756c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6893      	ldr	r3, [r2, #8]
 8007574:	f361 031c 	bfi	r3, r1, #0, #29
 8007578:	6093      	str	r3, [r2, #8]
 800757a:	e032      	b.n	80075e2 <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6893      	ldr	r3, [r2, #8]
 800758a:	f361 031c 	bfi	r3, r1, #0, #29
 800758e:	6093      	str	r3, [r2, #8]
 8007590:	e027      	b.n	80075e2 <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	79d3      	ldrb	r3, [r2, #7]
 8007596:	f043 0320 	orr.w	r3, r3, #32
 800759a:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	6853      	ldr	r3, [r2, #4]
 80075aa:	f361 031c 	bfi	r3, r1, #0, #29
 80075ae:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	6893      	ldr	r3, [r2, #8]
 80075be:	f361 031c 	bfi	r3, r1, #0, #29
 80075c2:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075ce:	0f5b      	lsrs	r3, r3, #29
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	b2d9      	uxtb	r1, r3
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	7ad3      	ldrb	r3, [r2, #11]
 80075dc:	f361 1345 	bfi	r3, r1, #5, #1
 80075e0:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80075ec:	0e1b      	lsrs	r3, r3, #24
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	691a      	ldr	r2, [r3, #16]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	695a      	ldr	r2, [r3, #20]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f003 0304 	and.w	r3, r3, #4
 8007612:	089b      	lsrs	r3, r3, #2
 8007614:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	f003 0308 	and.w	r3, r3, #8
 8007620:	08db      	lsrs	r3, r3, #3
 8007622:	757b      	strb	r3, [r7, #21]
    } while ((rx_pnd != 0U) && (new_data != 0U));
 8007624:	7dbb      	ldrb	r3, [r7, #22]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <XMC_CAN_MO_Receive+0x182>
 800762a:	7d7b      	ldrb	r3, [r7, #21]
 800762c:	2b00      	cmp	r3, #0
 800762e:	f47f af63 	bne.w	80074f8 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 8007638:	2300      	movs	r3, #0
 800763a:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 800763c:	7dfb      	ldrb	r3, [r7, #23]
}
 800763e:	4618      	mov	r0, r3
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	1ffc0000 	.word	0x1ffc0000

08007650 <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  if(event != XMC_CAN_NODE_EVENT_CFCIE)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007660:	d006      	beq.n	8007670 <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	431a      	orrs	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	e005      	b.n	800767c <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	699a      	ldr	r2, [r3, #24]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	619a      	str	r2, [r3, #24]
  }
}
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop

08007688 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007696:	60da      	str	r2, [r3, #12]
}
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop

080076a4 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a10      	ldr	r2, [pc, #64]	; (80076f0 <XMC_CCU4_lDeassertReset+0x4c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d103      	bne.n	80076bc <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80076b4:	2004      	movs	r0, #4
 80076b6:	f7ff f8ef 	bl	8006898 <XMC_SCU_RESET_DeassertPeripheralReset>
 80076ba:	e016      	b.n	80076ea <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a0d      	ldr	r2, [pc, #52]	; (80076f4 <XMC_CCU4_lDeassertReset+0x50>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d103      	bne.n	80076cc <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 80076c4:	2008      	movs	r0, #8
 80076c6:	f7ff f8e7 	bl	8006898 <XMC_SCU_RESET_DeassertPeripheralReset>
 80076ca:	e00e      	b.n	80076ea <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a0a      	ldr	r2, [pc, #40]	; (80076f8 <XMC_CCU4_lDeassertReset+0x54>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d103      	bne.n	80076dc <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 80076d4:	2010      	movs	r0, #16
 80076d6:	f7ff f8df 	bl	8006898 <XMC_SCU_RESET_DeassertPeripheralReset>
 80076da:	e006      	b.n	80076ea <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a07      	ldr	r2, [pc, #28]	; (80076fc <XMC_CCU4_lDeassertReset+0x58>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d102      	bne.n	80076ea <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 80076e4:	4806      	ldr	r0, [pc, #24]	; (8007700 <XMC_CCU4_lDeassertReset+0x5c>)
 80076e6:	f7ff f8d7 	bl	8006898 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	4000c000 	.word	0x4000c000
 80076f4:	40010000 	.word	0x40010000
 80076f8:	40014000 	.word	0x40014000
 80076fc:	48004000 	.word	0x48004000
 8007700:	10000001 	.word	0x10000001

08007704 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 800770c:	2010      	movs	r0, #16
 800770e:	f7ff fa13 	bl	8006b38 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff ffc6 	bl	80076a4 <XMC_CCU4_lDeassertReset>
#endif
}
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop

08007720 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7ff ffe9 	bl	8007704 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff ffa8 	bl	8007688 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007744:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8007746:	78fb      	ldrb	r3, [r7, #3]
 8007748:	039b      	lsls	r3, r3, #14
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	4313      	orrs	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	601a      	str	r2, [r3, #0]
}
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	795b      	ldrb	r3, [r3, #5]
 8007772:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007776:	b2db      	uxtb	r3, r3
 8007778:	051a      	lsls	r2, r3, #20
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	791b      	ldrb	r3, [r3, #4]
 8007782:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007786:	b2db      	uxtb	r3, r3
 8007788:	461a      	mov	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	795b      	ldrb	r3, [r3, #5]
 8007792:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007796:	b2db      	uxtb	r3, r3
 8007798:	461a      	mov	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	795b      	ldrb	r3, [r3, #5]
 80077a2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	791b      	ldrb	r3, [r3, #4]
 80077b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	461a      	mov	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	460b      	mov	r3, r1
 80077d2:	70fb      	strb	r3, [r7, #3]
 80077d4:	4613      	mov	r3, r2
 80077d6:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80077de:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	2b09      	cmp	r3, #9
 80077e4:	d82c      	bhi.n	8007840 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 80077e6:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 80077e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ec:	08007815 	.word	0x08007815
 80077f0:	08007815 	.word	0x08007815
 80077f4:	0800781f 	.word	0x0800781f
 80077f8:	0800781f 	.word	0x0800781f
 80077fc:	08007841 	.word	0x08007841
 8007800:	08007841 	.word	0x08007841
 8007804:	08007841 	.word	0x08007841
 8007808:	08007841 	.word	0x08007841
 800780c:	08007829 	.word	0x08007829
 8007810:	08007835 	.word	0x08007835
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8007814:	2303      	movs	r3, #3
 8007816:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8007818:	2300      	movs	r3, #0
 800781a:	617b      	str	r3, [r7, #20]
      break;
 800781c:	e016      	b.n	800784c <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 800781e:	230c      	movs	r3, #12
 8007820:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8007822:	2302      	movs	r3, #2
 8007824:	617b      	str	r3, [r7, #20]
      break;
 8007826:	e011      	b.n	800784c <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8007828:	f44f 7340 	mov.w	r3, #768	; 0x300
 800782c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 800782e:	2308      	movs	r3, #8
 8007830:	617b      	str	r3, [r7, #20]
      break;
 8007832:	e00b      	b.n	800784c <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8007834:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007838:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 800783a:	230a      	movs	r3, #10
 800783c:	617b      	str	r3, [r7, #20]
      break;
 800783e:	e005      	b.n	800784c <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8007840:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007844:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8007846:	230c      	movs	r3, #12
 8007848:	617b      	str	r3, [r7, #20]
      break;
 800784a:	bf00      	nop
  }
  
  srs &= ~mask; 
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	43db      	mvns	r3, r3
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4013      	ands	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8007856:	78ba      	ldrb	r2, [r7, #2]
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	fa02 f303 	lsl.w	r3, r2, r3
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	4313      	orrs	r3, r2
 8007862:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop

08007878 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	460b      	mov	r3, r1
 8007882:	607a      	str	r2, [r7, #4]
 8007884:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7fe fe60 	bl	800654c <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8007890:	7afb      	ldrb	r3, [r7, #11]
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4619      	mov	r1, r3
 8007896:	230f      	movs	r3, #15
 8007898:	408b      	lsls	r3, r1
 800789a:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 800789c:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	7af9      	ldrb	r1, [r7, #11]
 80078a4:	0089      	lsls	r1, r1, #2
 80078a6:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80078a8:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 80078ae:	7afa      	ldrb	r2, [r7, #11]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6859      	ldr	r1, [r3, #4]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3204      	adds	r2, #4
 80078b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop

080078c4 <XMC_ERU_OGU_Init>:

/* Initializes the selected ERU_OGUy channel with the config structure.  */
void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_OGU_CONFIG_t *const config)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	460b      	mov	r3, r1
 80078ce:	607a      	str	r2, [r7, #4]
 80078d0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f7fe fe3a 	bl	800654c <XMC_ERU_Enable>

  eru->EXOCON[channel] = config->raw;
 80078d8:	7afa      	ldrb	r2, [r7, #11]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6819      	ldr	r1, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	3208      	adds	r2, #8
 80078e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	70fb      	strb	r3, [r7, #3]
 80078f8:	4613      	mov	r3, r2
 80078fa:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007900:	78fb      	ldrb	r3, [r7, #3]
 8007902:	005b      	lsls	r3, r3, #1
 8007904:	4619      	mov	r1, r3
 8007906:	2303      	movs	r3, #3
 8007908:	408b      	lsls	r3, r1
 800790a:	43db      	mvns	r3, r3
 800790c:	401a      	ands	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007916:	78bb      	ldrb	r3, [r7, #2]
 8007918:	78f9      	ldrb	r1, [r7, #3]
 800791a:	0049      	lsls	r1, r1, #1
 800791c:	408b      	lsls	r3, r1
 800791e:	431a      	orrs	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop

08007930 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 800793a:	783b      	ldrb	r3, [r7, #0]
 800793c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007940:	b2db      	uxtb	r3, r3
 8007942:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8007944:	78bb      	ldrb	r3, [r7, #2]
 8007946:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800794a:	b2db      	uxtb	r3, r3
 800794c:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 800794e:	4313      	orrs	r3, r2
 8007950:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 800795a:	78fb      	ldrb	r3, [r7, #3]
 800795c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007960:	b2db      	uxtb	r3, r3
 8007962:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 8007964:	78fb      	ldrb	r3, [r7, #3]
 8007966:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800796a:	b2db      	uxtb	r3, r3
 800796c:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 800796e:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007976:	b2db      	uxtb	r3, r3
 8007978:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 800797a:	4313      	orrs	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4313      	orrs	r3, r2
 8007988:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079aa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop

080079c0 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop

080079e4 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 80079e8:	2001      	movs	r0, #1
 80079ea:	f7fe ff55 	bl	8006898 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 80079fa:	f7ff fff3 	bl	80079e4 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	695a      	ldr	r2, [r3, #20]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68da      	ldr	r2, [r3, #12]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	691a      	ldr	r2, [r3, #16]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop

08007a44 <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	603b      	str	r3, [r7, #0]
 8007a50:	4613      	mov	r3, r2
 8007a52:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 8007a54:	79fb      	ldrb	r3, [r7, #7]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d109      	bne.n	8007a6e <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
	XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	f240 731f 	movw	r3, #1823	; 0x71f
 8007a60:	4013      	ands	r3, r2
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	3128      	adds	r1, #40	; 0x28
 8007a68:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007a6c:	e007      	b.n	8007a7e <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	4b05      	ldr	r3, [pc, #20]	; (8007a88 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 8007a72:	4013      	ands	r3, r2
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	3128      	adds	r1, #40	; 0x28
 8007a7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	071f0000 	.word	0x071f0000

08007a8c <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a9a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73fb      	strb	r3, [r7, #15]
 8007aa8:	e017      	b.n	8007ada <XMC_VADC_GLOBAL_StartupCalibration+0x4e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
 8007aac:	4a0f      	ldr	r2, [pc, #60]	; (8007aec <XMC_VADC_GLOBAL_StartupCalibration+0x60>)
 8007aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ab2:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d008      	beq.n	8007ad4 <XMC_VADC_GLOBAL_StartupCalibration+0x48>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8007ac2:	e000      	b.n	8007ac6 <XMC_VADC_GLOBAL_StartupCalibration+0x3a>
      {
        __NOP();
 8007ac4:	bf00      	nop
  {
    group_ptr = g_xmc_vadc_group_array[i];
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1f7      	bne.n	8007ac4 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	73fb      	strb	r3, [r7, #15]
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	2b03      	cmp	r3, #3
 8007ade:	d9e4      	bls.n	8007aaa <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	0800f528 	.word	0x0800f528

08007af0 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	70fb      	strb	r3, [r7, #3]
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8007afc:	78fb      	ldrb	r3, [r7, #3]
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d903      	bls.n	8007b0a <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 8007b02:	78fb      	ldrb	r3, [r7, #3]
 8007b04:	3b04      	subs	r3, #4
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	e001      	b.n	8007b0e <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 8007b0a:	78fb      	ldrb	r3, [r7, #3]
 8007b0c:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007b14:	f023 020f 	bic.w	r2, r3, #15
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	431a      	orrs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	6859      	ldr	r1, [r3, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	f000 f828 	bl	8007ba0 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	6859      	ldr	r1, [r3, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f000 f821 	bl	8007ba0 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	6899      	ldr	r1, [r3, #8]
 8007b64:	2200      	movs	r2, #0
 8007b66:	2301      	movs	r3, #1
 8007b68:	f000 f81a 	bl	8007ba0 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	6899      	ldr	r1, [r3, #8]
 8007b72:	2201      	movs	r2, #1
 8007b74:	2301      	movs	r3, #1
 8007b76:	f000 f813 	bl	8007ba0 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	691a      	ldr	r2, [r3, #16]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	6819      	ldr	r1, [r3, #0]
 8007b94:	f7ff fecc 	bl	8007930 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop

08007ba0 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b08d      	sub	sp, #52	; 0x34
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	4613      	mov	r3, r2
 8007bae:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d113      	bne.n	8007bde <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8007bb6:	2308      	movs	r3, #8
 8007bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8007bba:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8007bbe:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8007bc4:	231f      	movs	r3, #31
 8007bc6:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8007bc8:	7a3b      	ldrb	r3, [r7, #8]
 8007bca:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8007bd2:	7a7b      	ldrb	r3, [r7, #9]
 8007bd4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	76fb      	strb	r3, [r7, #27]
 8007bdc:	e013      	b.n	8007c06 <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8007bde:	2318      	movs	r3, #24
 8007be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8007be2:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8007be8:	2310      	movs	r3, #16
 8007bea:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8007bec:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8007bf0:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8007bf2:	7abb      	ldrb	r3, [r7, #10]
 8007bf4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8007bfc:	7afb      	ldrb	r3, [r7, #11]
 8007bfe:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	3228      	adds	r2, #40	; 0x28
 8007c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c10:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	43db      	mvns	r3, r3
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8007c1c:	7efa      	ldrb	r2, [r7, #27]
 8007c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c20:	fa02 f303 	lsl.w	r3, r2, r3
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	4013      	ands	r3, r2
 8007c32:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	69fa      	ldr	r2, [r7, #28]
 8007c38:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	3228      	adds	r2, #40	; 0x28
 8007c48:	6979      	ldr	r1, [r7, #20]
 8007c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007c4e:	3734      	adds	r7, #52	; 0x34
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c6a:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
 8007c72:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop

08007c90 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	75fb      	strb	r3, [r7, #23]
 8007c9e:	e009      	b.n	8007cb4 <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	4a39      	ldr	r2, [pc, #228]	; (8007d88 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7ff fe89 	bl	80079c0 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	75fb      	strb	r3, [r7, #23]
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d9f2      	bls.n	8007ca0 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	f003 0303 	and.w	r3, r3, #3
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8007ccc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007cd0:	613b      	str	r3, [r7, #16]
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	75fb      	strb	r3, [r7, #23]
 8007cd6:	e021      	b.n	8007d1c <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	4a2b      	ldr	r2, [pc, #172]	; (8007d88 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ce4:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cec:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	021b      	lsls	r3, r3, #8
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]
  
    /* Program the start mode */
    reg |= conv_start_mask;
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	4a1f      	ldr	r2, [pc, #124]	; (8007d88 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007d16:	7dfb      	ldrb	r3, [r7, #23]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	75fb      	strb	r3, [r7, #23]
 8007d1c:	7dfb      	ldrb	r3, [r7, #23]
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d9da      	bls.n	8007cd8 <XMC_VADC_GLOBAL_BackgroundInit+0x48>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f043 0201 	orr.w	r2, r3, #1
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	f003 0303 	and.w	r3, r3, #3
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d107      	bne.n	8007d60 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007d56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007d60:	2300      	movs	r3, #0
 8007d62:	75fb      	strb	r3, [r7, #23]
 8007d64:	e009      	b.n	8007d7a <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	4a07      	ldr	r2, [pc, #28]	; (8007d88 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7ff fe14 	bl	800799c <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	3301      	adds	r3, #1
 8007d78:	75fb      	strb	r3, [r7, #23]
 8007d7a:	7dfb      	ldrb	r3, [r7, #23]
 8007d7c:	2b03      	cmp	r3, #3
 8007d7e:	d9f2      	bls.n	8007d66 <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	0800f528 	.word	0x0800f528

08007d8c <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b089      	sub	sp, #36	; 0x24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	7a1b      	ldrb	r3, [r3, #8]
 8007d9c:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007da4:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2201      	movs	r2, #1
 8007daa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dae:	43db      	mvns	r3, r3
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	4013      	ands	r3, r2
 8007db4:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	7a5b      	ldrb	r3, [r3, #9]
 8007dd0:	b25b      	sxtb	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	db29      	blt.n	8007e2a <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d10a      	bne.n	8007df6 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8007de0:	2308      	movs	r3, #8
 8007de2:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007dea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8007df4:	e00c      	b.n	8007e10 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d109      	bne.n	8007e10 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e06:	f023 021f 	bic.w	r2, r3, #31
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	7a52      	ldrb	r2, [r2, #9]
 8007e1a:	b251      	sxtb	r1, r2
 8007e1c:	69fa      	ldr	r2, [r7, #28]
 8007e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8007e22:	431a      	orrs	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	431a      	orrs	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6819      	ldr	r1, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	3280      	adds	r2, #128	; 0x80
 8007e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8007e4a:	3724      	adds	r7, #36	; 0x24
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <XMC_WDT_Enable>:
 * API IMPLEMENTATION
  ********************************************************************************************************************/

/* Enables watchdog clock and releases watchdog reset. */
void XMC_WDT_Enable(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
#if UC_FAMILY == XMC4
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_WDT);
 8007e58:	2020      	movs	r0, #32
 8007e5a:	f7fe fe6d 	bl	8006b38 <XMC_SCU_CLOCK_EnableClock>

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_WDT);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_WDT);
 8007e5e:	4802      	ldr	r0, [pc, #8]	; (8007e68 <XMC_WDT_Enable+0x14>)
 8007e60:	f7fe fd1a 	bl	8006898 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
}
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20000002 	.word	0x20000002

08007e6c <XMC_WDT_Init>:
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_WDT);
#endif
}
/* Initializes and configures watchdog with configuration data pointed by \a config. */
void XMC_WDT_Init(const XMC_WDT_CONFIG_t *const config)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  XMC_WDT_Enable();
 8007e74:	f7ff ffee 	bl	8007e54 <XMC_WDT_Enable>
  WDT->CTR = config->wdt_ctr;
 8007e78:	4a07      	ldr	r2, [pc, #28]	; (8007e98 <XMC_WDT_Init+0x2c>)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	6053      	str	r3, [r2, #4]
  WDT->WLB = config->window_lower_bound;
 8007e80:	4a05      	ldr	r2, [pc, #20]	; (8007e98 <XMC_WDT_Init+0x2c>)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	6113      	str	r3, [r2, #16]
  WDT->WUB = config->window_upper_bound;
 8007e88:	4a03      	ldr	r2, [pc, #12]	; (8007e98 <XMC_WDT_Init+0x2c>)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6153      	str	r3, [r2, #20]
}
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	50008000 	.word	0x50008000

08007e9c <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8007ea4:	4b14      	ldr	r3, [pc, #80]	; (8007ef8 <_sbrk+0x5c>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d102      	bne.n	8007eb2 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8007eac:	4b12      	ldr	r3, [pc, #72]	; (8007ef8 <_sbrk+0x5c>)
 8007eae:	4a13      	ldr	r2, [pc, #76]	; (8007efc <_sbrk+0x60>)
 8007eb0:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8007eb2:	4b11      	ldr	r3, [pc, #68]	; (8007ef8 <_sbrk+0x5c>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3303      	adds	r3, #3
 8007ebc:	f023 0303 	bic.w	r3, r3, #3
 8007ec0:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8007ec2:	4b0d      	ldr	r3, [pc, #52]	; (8007ef8 <_sbrk+0x5c>)
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4413      	add	r3, r2
 8007eca:	4a0d      	ldr	r2, [pc, #52]	; (8007f00 <_sbrk+0x64>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d207      	bcs.n	8007ee0 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8007ed0:	4b09      	ldr	r3, [pc, #36]	; (8007ef8 <_sbrk+0x5c>)
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	4a07      	ldr	r2, [pc, #28]	; (8007ef8 <_sbrk+0x5c>)
 8007eda:	6013      	str	r3, [r2, #0]
    return (base);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	e006      	b.n	8007eee <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8007ee0:	f007 f87c 	bl	800efdc <__errno>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	230c      	movs	r3, #12
 8007ee8:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8007eea:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20000690 	.word	0x20000690
 8007efc:	20001528 	.word	0x20001528
 8007f00:	2000ffc0 	.word	0x2000ffc0

08007f04 <_init>:

/* Init */
void _init(void)
{}
 8007f04:	b480      	push	{r7}
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <WATCHDOG_Init>:
  return (version);
}

/* Initializes the watchdog timer with the generated configuration */
WATCHDOG_STATUS_t WATCHDOG_Init(WATCHDOG_t *handle)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;

  XMC_ASSERT("WATCHDOG_Init:handle NULL" , (handle != NULL));

  status = WATCHDOG_STATUS_SUCCESS;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73fb      	strb	r3, [r7, #15]

  /* Check for app instance is initialized or not */
  if (false == handle->initialized)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	791b      	ldrb	r3, [r3, #4]
 8007f20:	f083 0301 	eor.w	r3, r3, #1
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00f      	beq.n	8007f4a <WATCHDOG_Init+0x3a>
  {
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      /* Service Event Handling */
      status = WATCHDOG_lPrewarning_Configure(handle);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f812 	bl	8007f54 <WATCHDOG_lPrewarning_Configure>
 8007f30:	4603      	mov	r3, r0
 8007f32:	73fb      	strb	r3, [r7, #15]
      if(WATCHDOG_STATUS_FAILURE != status)
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d007      	beq.n	8007f4a <WATCHDOG_Init+0x3a>
      {
#endif
        /* Initialize the WDT peripheral */
        XMC_WDT_Init(handle->config);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff ff94 	bl	8007e6c <XMC_WDT_Init>
        /* Update the initialization flag */
        handle->initialized = true;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	711a      	strb	r2, [r3, #4]
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      }
#endif
  }

  return (status);
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <WATCHDOG_lPrewarning_Configure>:
#if (WATCHDOG_PREWARNING_CHECK == 1U)
/*
 * Register the Pre-warning event with GLOBAL_SCU APP
 */
WATCHDOG_STATUS_t WATCHDOG_lPrewarning_Configure(WATCHDOG_t *handle)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;
  status = WATCHDOG_STATUS_SUCCESS;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73fb      	strb	r3, [r7, #15]
      status = WATCHDOG_STATUS_FAILURE;
    }
#endif

#if (WATCHDOG_EVENT_VIA_NMI == 1U)
    XMC_SCU_INTERRUPT_EnableEvent((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8007f60:	2001      	movs	r0, #1
 8007f62:	f7fe fbe5 	bl	8006730 <XMC_SCU_INTERRUPT_EnableEvent>
    XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8007f66:	2001      	movs	r0, #1
 8007f68:	f7fe fc84 	bl	8006874 <XMC_SCU_INTERRUPT_EnableNmiRequest>
#endif

  return (status);
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop

08007f78 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8007f84:	78fb      	ldrb	r3, [r7, #3]
 8007f86:	2201      	movs	r2, #1
 8007f88:	409a      	lsls	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	60da      	str	r2, [r3, #12]
}
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	60da      	str	r2, [r3, #12]
}
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8007fbc:	887a      	ldrh	r2, [r7, #2]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8007fd8:	887a      	ldrh	r2, [r7, #2]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	611a      	str	r2, [r3, #16]
}
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop

08008004 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008016:	78fb      	ldrb	r3, [r7, #3]
 8008018:	2101      	movs	r1, #1
 800801a:	fa01 f303 	lsl.w	r3, r1, r3
 800801e:	431a      	orrs	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 8008038:	2301      	movs	r3, #1
 800803a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL))

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008042:	2b02      	cmp	r3, #2
 8008044:	d14d      	bne.n	80080e2 <PWM_lCCU4_Init+0xb2>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f000 f9ea 	bl	8008424 <GLOBAL_CCU4_Init>
 8008050:	4603      	mov	r3, r0
 8008052:	73fb      	strb	r3, [r7, #15]

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
 8008054:	7bfb      	ldrb	r3, [r7, #15]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d13f      	bne.n	80080da <PWM_lCCU4_Init+0xaa>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	689a      	ldr	r2, [r3, #8]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	4610      	mov	r0, r2
 8008064:	4619      	mov	r1, r3
 8008066:	f7ff fb79 	bl	800775c <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689a      	ldr	r2, [r3, #8]
    		                             (uint16_t)handle_ptr->period_value);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 8008072:	b29b      	uxth	r3, r3
 8008074:	4610      	mov	r0, r2
 8008076:	4619      	mov	r1, r3
 8008078:	f7ff ff9a 	bl	8007fb0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 8008084:	b29b      	uxth	r3, r3
 8008086:	4610      	mov	r0, r2
 8008088:	4619      	mov	r1, r3
 800808a:	f7ff ff9f 	bl	8007fcc <XMC_CCU4_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	4610      	mov	r0, r2
 8008098:	4619      	mov	r1, r3
 800809a:	f7ff ffa5 	bl	8007fe8 <XMC_CCU4_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f824 	bl	80080ec <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6919      	ldr	r1, [r3, #16]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	4608      	mov	r0, r1
 80080b4:	4611      	mov	r1, r2
 80080b6:	461a      	mov	r2, r3
 80080b8:	f7fe fa5a 	bl	8006570 <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d002      	beq.n	80080d4 <PWM_lCCU4_Init+0xa4>
      {
        PWM_Start(handle_ptr);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f8b8 	bl	8008244 <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]
 80080d8:	e003      	b.n	80080e2 <PWM_lCCU4_Init+0xb2>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2202      	movs	r2, #2
 80080de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }

  }
  return (status);
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_lCCU4_Init() api */
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00f      	beq.n	800811e <PWM_lCCU4_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	4618      	mov	r0, r3
 8008104:	2100      	movs	r1, #0
 8008106:	f7ff ff7d 	bl	8008004 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	689a      	ldr	r2, [r3, #8]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8008114:	4610      	mov	r0, r2
 8008116:	2100      	movs	r1, #0
 8008118:	461a      	mov	r2, r3
 800811a:	f7ff fb55 	bl	80077c8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00f      	beq.n	8008148 <PWM_lCCU4_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	4618      	mov	r0, r3
 800812e:	2102      	movs	r1, #2
 8008130:	f7ff ff68 	bl	8008004 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800813e:	4610      	mov	r0, r2
 8008140:	2102      	movs	r1, #2
 8008142:	461a      	mov	r2, r3
 8008144:	f7ff fb40 	bl	80077c8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop

08008150 <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800815e:	2b00      	cmp	r3, #0
 8008160:	d004      	beq.n	800816c <PWM_lCCU4_Start+0x1c>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008168:	2b04      	cmp	r3, #4
 800816a:	d111      	bne.n	8008190 <PWM_lCCU4_Start+0x40>
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008176:	4610      	mov	r0, r2
 8008178:	4619      	mov	r1, r3
 800817a:	f7ff fefd 	bl	8007f78 <XMC_CCU4_EnableClock>
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	4618      	mov	r0, r3
 8008184:	f7ff ff08 	bl	8007f98 <XMC_CCU4_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2203      	movs	r2, #3
 800818c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU4_Start:start PWM")
  }
} /* end of PWM_lCCU4_Start() api */
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop

08008198 <PWM_lCCU4_SetDutyCycle>:
} /* end of PWM_lCCU4_Stop() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Sets the duty cycle for CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t compare;
  PWM_STATUS_t status;

  XMC_ASSERT("PWM_lCCU4_SetDutyCycle:Invalid duty_cycle " , ((duty_cycle >= 0) && (duty_cycle <= PWM_MAX_DUTY_CYCLE)))

  status = PWM_STATUS_FAILURE;
 80081a2:	2301      	movs	r3, #1
 80081a4:	75fb      	strb	r3, [r7, #23]
  if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d02c      	beq.n	800820a <PWM_lCCU4_SetDutyCycle+0x72>
  {
    /* Duty cycle needs between 0 and 10000 */
    if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d827      	bhi.n	800820a <PWM_lCCU4_SetDutyCycle+0x72>
    {
      /* period = (PR + 1) */
      period = (uint32_t)handle_ptr->period_value + 1U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	3301      	adds	r3, #1
 80081c0:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 80081c8:	3310      	adds	r3, #16
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	fb02 f303 	mul.w	r3, r2, r3
 80081d0:	4a10      	ldr	r2, [pc, #64]	; (8008214 <PWM_lCCU4_SetDutyCycle+0x7c>)
 80081d2:	fba2 2303 	umull	r2, r3, r2, r3
 80081d6:	0b5b      	lsrs	r3, r3, #13
 80081d8:	60fb      	str	r3, [r7, #12]

      handle_ptr->compare_value = compare;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	619a      	str	r2, [r3, #24]
      handle_ptr->duty_cycle = duty_cycle;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	621a      	str	r2, [r3, #32]

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689a      	ldr	r2, [r3, #8]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	4610      	mov	r0, r2
 80081f0:	4619      	mov	r1, r3
 80081f2:	f7ff feeb 	bl	8007fcc <XMC_CCU4_SLICE_SetTimerCompareMatch>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	4610      	mov	r0, r2
 8008200:	4619      	mov	r1, r3
 8008202:	f7ff fef1 	bl	8007fe8 <XMC_CCU4_EnableShadowTransfer>
      status = PWM_STATUS_SUCCESS;
 8008206:	2300      	movs	r3, #0
 8008208:	75fb      	strb	r3, [r7, #23]
    }
  }

  XMC_DEBUG("PWM_lCCU4_SetDutyCycle:dutycycle set")
  return (status);
 800820a:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_lCCU4_SetDutyCycle() api */
 800820c:	4618      	mov	r0, r3
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	d1b71759 	.word	0xd1b71759

08008218 <PWM_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function initializes the app */
PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 8008220:	2301      	movs	r3, #1
 8008222:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800822a:	2b00      	cmp	r3, #0
 800822c:	d104      	bne.n	8008238 <PWM_Init+0x20>
  {
    status = PWM_lCCU4_Init(handle_ptr);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff fefe 	bl	8008030 <PWM_lCCU4_Init>
 8008234:	4603      	mov	r3, r0
 8008236:	73fb      	strb	r3, [r7, #15]
  {
    status = PWM_lCCU8_Init(handle_ptr);
  }
#endif

  return (status);
 8008238:	7bfb      	ldrb	r3, [r7, #15]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop

08008244 <PWM_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function starts the PWM generation. This needs to be called even if external start is configured.*/
void PWM_Start(PWM_t *const handle_ptr)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008252:	2b00      	cmp	r3, #0
 8008254:	d102      	bne.n	800825c <PWM_Start+0x18>
  {
    PWM_lCCU4_Start(handle_ptr);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7ff ff7a 	bl	8008150 <PWM_lCCU4_Start>
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    PWM_lCCU8_Start(handle_ptr);
  }
#endif
}
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop

08008264 <PWM_SetDutyCycle>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*This function is used to set the duty cycle (uint32_t) of the PWM waveform  */
PWM_STATUS_t PWM_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 800826e:	2301      	movs	r3, #1
 8008270:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008278:	2b00      	cmp	r3, #0
 800827a:	d105      	bne.n	8008288 <PWM_SetDutyCycle+0x24>
  {
    status = PWM_lCCU4_SetDutyCycle(handle_ptr, duty_cycle);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	f7ff ff8a 	bl	8008198 <PWM_lCCU4_SetDutyCycle>
 8008284:	4603      	mov	r3, r0
 8008286:	73fb      	strb	r3, [r7, #15]
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    status = PWM_lCCU8_SetDutyCycle(handle_ptr, duty_cycle);
  }
#endif
  return (status);
 8008288:	7bfb      	ldrb	r3, [r7, #15]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop

08008294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008294:	b480      	push	{r7}
 8008296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008298:	4b04      	ldr	r3, [pc, #16]	; (80082ac <__NVIC_GetPriorityGrouping+0x18>)
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082a0:	0a1b      	lsrs	r3, r3, #8
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	e000ed00 	.word	0xe000ed00

080082b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	db0b      	blt.n	80082da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082c2:	4908      	ldr	r1, [pc, #32]	; (80082e4 <__NVIC_EnableIRQ+0x34>)
 80082c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082c8:	095b      	lsrs	r3, r3, #5
 80082ca:	79fa      	ldrb	r2, [r7, #7]
 80082cc:	f002 021f 	and.w	r2, r2, #31
 80082d0:	2001      	movs	r0, #1
 80082d2:	fa00 f202 	lsl.w	r2, r0, r2
 80082d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	e000e100 	.word	0xe000e100

080082e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	6039      	str	r1, [r7, #0]
 80082f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	db0a      	blt.n	8008312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082fc:	490d      	ldr	r1, [pc, #52]	; (8008334 <__NVIC_SetPriority+0x4c>)
 80082fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	b2d2      	uxtb	r2, r2
 8008306:	0092      	lsls	r2, r2, #2
 8008308:	b2d2      	uxtb	r2, r2
 800830a:	440b      	add	r3, r1
 800830c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8008310:	e00a      	b.n	8008328 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008312:	4909      	ldr	r1, [pc, #36]	; (8008338 <__NVIC_SetPriority+0x50>)
 8008314:	79fb      	ldrb	r3, [r7, #7]
 8008316:	f003 030f 	and.w	r3, r3, #15
 800831a:	3b04      	subs	r3, #4
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	b2d2      	uxtb	r2, r2
 8008320:	0092      	lsls	r2, r2, #2
 8008322:	b2d2      	uxtb	r2, r2
 8008324:	440b      	add	r3, r1
 8008326:	761a      	strb	r2, [r3, #24]
  }
}
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	e000e100 	.word	0xe000e100
 8008338:	e000ed00 	.word	0xe000ed00

0800833c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800833c:	b480      	push	{r7}
 800833e:	b089      	sub	sp, #36	; 0x24
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f003 0307 	and.w	r3, r3, #7
 800834e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	f1c3 0307 	rsb	r3, r3, #7
 8008356:	2b06      	cmp	r3, #6
 8008358:	bf28      	it	cs
 800835a:	2306      	movcs	r3, #6
 800835c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	3306      	adds	r3, #6
 8008362:	2b06      	cmp	r3, #6
 8008364:	d902      	bls.n	800836c <NVIC_EncodePriority+0x30>
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	3b01      	subs	r3, #1
 800836a:	e000      	b.n	800836e <NVIC_EncodePriority+0x32>
 800836c:	2300      	movs	r3, #0
 800836e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	2201      	movs	r2, #1
 8008374:	fa02 f303 	lsl.w	r3, r2, r3
 8008378:	1e5a      	subs	r2, r3, #1
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	401a      	ands	r2, r3
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2101      	movs	r1, #1
 8008386:	fa01 f303 	lsl.w	r3, r1, r3
 800838a:	1e59      	subs	r1, r3, #1
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8008390:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8008392:	4618      	mov	r0, r3
 8008394:	3724      	adds	r7, #36	; 0x24
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop

080083a0 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	b25b      	sxtb	r3, r3
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7ff ff7e 	bl	80082b0 <__NVIC_EnableIRQ>
}
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop

080083bc <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 80083bc:	b590      	push	{r4, r7, lr}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	781c      	ldrb	r4, [r3, #0]
 80083c8:	f7ff ff64 	bl	8008294 <__NVIC_GetPriorityGrouping>
 80083cc:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80083d2:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80083d8:	4608      	mov	r0, r1
 80083da:	4611      	mov	r1, r2
 80083dc:	461a      	mov	r2, r3
 80083de:	f7ff ffad 	bl	800833c <NVIC_EncodePriority>
 80083e2:	4602      	mov	r2, r0
 80083e4:	b263      	sxtb	r3, r4
 80083e6:	4618      	mov	r0, r3
 80083e8:	4611      	mov	r1, r2
 80083ea:	f7ff ff7d 	bl	80082e8 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	78db      	ldrb	r3, [r3, #3]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7ff ffd2 	bl	80083a0 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	bd90      	pop	{r4, r7, pc}
 8008406:	bf00      	nop

08008408 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008416:	60da      	str	r2, [r3, #12]
}
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop

08008424 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	7b5b      	ldrb	r3, [r3, #13]
 8008430:	f083 0301 	eor.w	r3, r3, #1
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00f      	beq.n	800845a <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	689a      	ldr	r2, [r3, #8]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	7b1b      	ldrb	r3, [r3, #12]
 8008442:	4610      	mov	r0, r2
 8008444:	4619      	mov	r1, r3
 8008446:	f7ff f96b 	bl	8007720 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	4618      	mov	r0, r3
 8008450:	f7ff ffda 	bl	8008408 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 800846c:	2300      	movs	r3, #0
 800846e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	7a5b      	ldrb	r3, [r3, #9]
 8008474:	f083 0301 	eor.w	r3, r3, #1
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00d      	beq.n	800849a <GLOBAL_CAN_Init+0x36>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4610      	mov	r0, r2
 8008488:	2101      	movs	r1, #1
 800848a:	461a      	mov	r2, r3
 800848c:	f7fe fece 	bl	800722c <XMC_CAN_InitEx>
#endif
    handle->init_status = true;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 8008496:	2300      	movs	r3, #0
 8008498:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 800849a:	7bfb      	ldrb	r3, [r7, #15]

}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	3310      	adds	r3, #16
 80084b8:	4619      	mov	r1, r3
 80084ba:	2301      	movs	r3, #1
 80084bc:	408b      	lsls	r3, r1
 80084be:	431a      	orrs	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	7e1b      	ldrb	r3, [r3, #24]
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d149      	bne.n	8008574 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	695a      	ldr	r2, [r3, #20]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	4610      	mov	r0, r2
 80084ea:	4619      	mov	r1, r3
 80084ec:	f7ff fa80 	bl	80079f0 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 80084f0:	2300      	movs	r3, #0
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	e02f      	b.n	8008556 <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fe:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	4608      	mov	r0, r1
 800850c:	4619      	mov	r1, r3
 800850e:	f7ff fb13 	bl	8007b38 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4618      	mov	r0, r3
 800851e:	2103      	movs	r1, #3
 8008520:	f7ff fb9a 	bl	8007c58 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800852c:	7a1b      	ldrb	r3, [r3, #8]
 800852e:	f083 0301 	eor.w	r3, r3, #1
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d005      	beq.n	8008544 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	4618      	mov	r0, r3
 800853e:	68f9      	ldr	r1, [r7, #12]
 8008540:	f7ff ffb0 	bl	80084a4 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800854c:	2200      	movs	r2, #0
 800854e:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	3301      	adds	r3, #1
 8008554:	60fb      	str	r3, [r7, #12]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2b03      	cmp	r3, #3
 800855a:	d9cc      	bls.n	80084f6 <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	7e5b      	ldrb	r3, [r3, #25]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d004      	beq.n	800856e <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff fa8f 	bl	8007a8c <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	7e1b      	ldrb	r3, [r3, #24]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3b04      	subs	r3, #4
 8008590:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008598:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	3b04      	subs	r3, #4
 800859e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f023 0201 	bic.w	r2, r3, #1
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3b04      	subs	r3, #4
 80085ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085b0:	4a0c      	ldr	r2, [pc, #48]	; (80085e4 <pxPortInitialiseStack+0x64>)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3b14      	subs	r3, #20
 80085ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3b04      	subs	r3, #4
 80085c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f06f 0202 	mvn.w	r2, #2
 80085ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3b20      	subs	r3, #32
 80085d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085d6:	68fb      	ldr	r3, [r7, #12]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	080085e9 	.word	0x080085e9

080085e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085ee:	2300      	movs	r3, #0
 80085f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085f2:	4b10      	ldr	r3, [pc, #64]	; (8008634 <prvTaskExitError+0x4c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fa:	d009      	beq.n	8008610 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085fc:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	e7fe      	b.n	800860e <prvTaskExitError+0x26>
 8008610:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008622:	bf00      	nop
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0fc      	beq.n	8008624 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	20000190 	.word	0x20000190
	...

08008640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008640:	4b07      	ldr	r3, [pc, #28]	; (8008660 <pxCurrentTCBConst2>)
 8008642:	6819      	ldr	r1, [r3, #0]
 8008644:	6808      	ldr	r0, [r1, #0]
 8008646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864a:	f380 8809 	msr	PSP, r0
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f04f 0000 	mov.w	r0, #0
 8008656:	f380 8811 	msr	BASEPRI, r0
 800865a:	4770      	bx	lr
 800865c:	f3af 8000 	nop.w

08008660 <pxCurrentTCBConst2>:
 8008660:	2000069c 	.word	0x2000069c
 8008664:	f3af 8000 	nop.w
 8008668:	f3af 8000 	nop.w
 800866c:	f3af 8000 	nop.w

08008670 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008670:	4808      	ldr	r0, [pc, #32]	; (8008694 <prvPortStartFirstTask+0x24>)
 8008672:	6800      	ldr	r0, [r0, #0]
 8008674:	6800      	ldr	r0, [r0, #0]
 8008676:	f380 8808 	msr	MSP, r0
 800867a:	f04f 0000 	mov.w	r0, #0
 800867e:	f380 8814 	msr	CONTROL, r0
 8008682:	b662      	cpsie	i
 8008684:	b661      	cpsie	f
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	f3bf 8f6f 	isb	sy
 800868e:	df00      	svc	0
 8008690:	bf00      	nop
 8008692:	0000      	.short	0x0000
 8008694:	e000ed08 	.word	0xe000ed08

08008698 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800869e:	4b44      	ldr	r3, [pc, #272]	; (80087b0 <xPortStartScheduler+0x118>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a44      	ldr	r2, [pc, #272]	; (80087b4 <xPortStartScheduler+0x11c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d109      	bne.n	80086bc <xPortStartScheduler+0x24>
 80086a8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	613b      	str	r3, [r7, #16]
 80086ba:	e7fe      	b.n	80086ba <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80086bc:	4b3c      	ldr	r3, [pc, #240]	; (80087b0 <xPortStartScheduler+0x118>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a3d      	ldr	r2, [pc, #244]	; (80087b8 <xPortStartScheduler+0x120>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d109      	bne.n	80086da <xPortStartScheduler+0x42>
 80086c6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	e7fe      	b.n	80086d8 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086da:	4b38      	ldr	r3, [pc, #224]	; (80087bc <xPortStartScheduler+0x124>)
 80086dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	22ff      	movs	r2, #255	; 0xff
 80086ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086f4:	78fb      	ldrb	r3, [r7, #3]
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	f023 0303 	bic.w	r3, r3, #3
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	4b30      	ldr	r3, [pc, #192]	; (80087c0 <xPortStartScheduler+0x128>)
 8008700:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008702:	4b30      	ldr	r3, [pc, #192]	; (80087c4 <xPortStartScheduler+0x12c>)
 8008704:	2207      	movs	r2, #7
 8008706:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008708:	e009      	b.n	800871e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800870a:	4b2e      	ldr	r3, [pc, #184]	; (80087c4 <xPortStartScheduler+0x12c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3b01      	subs	r3, #1
 8008710:	4a2c      	ldr	r2, [pc, #176]	; (80087c4 <xPortStartScheduler+0x12c>)
 8008712:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008714:	78fb      	ldrb	r3, [r7, #3]
 8008716:	b2db      	uxtb	r3, r3
 8008718:	005b      	lsls	r3, r3, #1
 800871a:	b2db      	uxtb	r3, r3
 800871c:	70fb      	strb	r3, [r7, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800871e:	78fb      	ldrb	r3, [r7, #3]
 8008720:	b2db      	uxtb	r3, r3
 8008722:	b2db      	uxtb	r3, r3
 8008724:	b25b      	sxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	dbef      	blt.n	800870a <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800872a:	4b26      	ldr	r3, [pc, #152]	; (80087c4 <xPortStartScheduler+0x12c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f1c3 0307 	rsb	r3, r3, #7
 8008732:	2b06      	cmp	r3, #6
 8008734:	d009      	beq.n	800874a <xPortStartScheduler+0xb2>
 8008736:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	60bb      	str	r3, [r7, #8]
 8008748:	e7fe      	b.n	8008748 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800874a:	4b1e      	ldr	r3, [pc, #120]	; (80087c4 <xPortStartScheduler+0x12c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	021b      	lsls	r3, r3, #8
 8008750:	4a1c      	ldr	r2, [pc, #112]	; (80087c4 <xPortStartScheduler+0x12c>)
 8008752:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008754:	4b1b      	ldr	r3, [pc, #108]	; (80087c4 <xPortStartScheduler+0x12c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800875c:	4a19      	ldr	r2, [pc, #100]	; (80087c4 <xPortStartScheduler+0x12c>)
 800875e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	b2da      	uxtb	r2, r3
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008768:	4a17      	ldr	r2, [pc, #92]	; (80087c8 <xPortStartScheduler+0x130>)
 800876a:	4b17      	ldr	r3, [pc, #92]	; (80087c8 <xPortStartScheduler+0x130>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f443 037c 	orr.w	r3, r3, #16515072	; 0xfc0000
 8008772:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008774:	4a14      	ldr	r2, [pc, #80]	; (80087c8 <xPortStartScheduler+0x130>)
 8008776:	4b14      	ldr	r3, [pc, #80]	; (80087c8 <xPortStartScheduler+0x130>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f043 437c 	orr.w	r3, r3, #4227858432	; 0xfc000000
 800877e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008780:	f000 f8d6 	bl	8008930 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008784:	4b11      	ldr	r3, [pc, #68]	; (80087cc <xPortStartScheduler+0x134>)
 8008786:	2200      	movs	r2, #0
 8008788:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800878a:	f000 f8f3 	bl	8008974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800878e:	4a10      	ldr	r2, [pc, #64]	; (80087d0 <xPortStartScheduler+0x138>)
 8008790:	4b0f      	ldr	r3, [pc, #60]	; (80087d0 <xPortStartScheduler+0x138>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008798:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800879a:	f7ff ff69 	bl	8008670 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800879e:	f001 fbaf 	bl	8009f00 <vTaskSwitchContext>
	prvTaskExitError();
 80087a2:	f7ff ff21 	bl	80085e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	e000ed00 	.word	0xe000ed00
 80087b4:	410fc271 	.word	0x410fc271
 80087b8:	410fc270 	.word	0x410fc270
 80087bc:	e000e400 	.word	0xe000e400
 80087c0:	20000694 	.word	0x20000694
 80087c4:	20000698 	.word	0x20000698
 80087c8:	e000ed20 	.word	0xe000ed20
 80087cc:	20000190 	.word	0x20000190
 80087d0:	e000ef34 	.word	0xe000ef34

080087d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087ec:	4b0e      	ldr	r3, [pc, #56]	; (8008828 <vPortEnterCritical+0x54>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	3301      	adds	r3, #1
 80087f2:	4a0d      	ldr	r2, [pc, #52]	; (8008828 <vPortEnterCritical+0x54>)
 80087f4:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087f6:	4b0c      	ldr	r3, [pc, #48]	; (8008828 <vPortEnterCritical+0x54>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d10e      	bne.n	800881c <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087fe:	4b0b      	ldr	r3, [pc, #44]	; (800882c <vPortEnterCritical+0x58>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b00      	cmp	r3, #0
 8008806:	d009      	beq.n	800881c <vPortEnterCritical+0x48>
 8008808:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	603b      	str	r3, [r7, #0]
 800881a:	e7fe      	b.n	800881a <vPortEnterCritical+0x46>
	}
}
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	20000190 	.word	0x20000190
 800882c:	e000ed04 	.word	0xe000ed04

08008830 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008836:	4b10      	ldr	r3, [pc, #64]	; (8008878 <vPortExitCritical+0x48>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d109      	bne.n	8008852 <vPortExitCritical+0x22>
 800883e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	607b      	str	r3, [r7, #4]
 8008850:	e7fe      	b.n	8008850 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008852:	4b09      	ldr	r3, [pc, #36]	; (8008878 <vPortExitCritical+0x48>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	3b01      	subs	r3, #1
 8008858:	4a07      	ldr	r2, [pc, #28]	; (8008878 <vPortExitCritical+0x48>)
 800885a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800885c:	4b06      	ldr	r3, [pc, #24]	; (8008878 <vPortExitCritical+0x48>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d104      	bne.n	800886e <vPortExitCritical+0x3e>
 8008864:	2300      	movs	r3, #0
 8008866:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	20000190 	.word	0x20000190
 800887c:	00000000 	.word	0x00000000

08008880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008880:	f3ef 8009 	mrs	r0, PSP
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	4b15      	ldr	r3, [pc, #84]	; (80088e0 <pxCurrentTCBConst>)
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	f01e 0f10 	tst.w	lr, #16
 8008890:	bf08      	it	eq
 8008892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889a:	6010      	str	r0, [r2, #0]
 800889c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088a0:	f04f 00fc 	mov.w	r0, #252	; 0xfc
 80088a4:	f380 8811 	msr	BASEPRI, r0
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f001 fb26 	bl	8009f00 <vTaskSwitchContext>
 80088b4:	f04f 0000 	mov.w	r0, #0
 80088b8:	f380 8811 	msr	BASEPRI, r0
 80088bc:	bc09      	pop	{r0, r3}
 80088be:	6819      	ldr	r1, [r3, #0]
 80088c0:	6808      	ldr	r0, [r1, #0]
 80088c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c6:	f01e 0f10 	tst.w	lr, #16
 80088ca:	bf08      	it	eq
 80088cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088d0:	f380 8809 	msr	PSP, r0
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	f3af 8000 	nop.w

080088e0 <pxCurrentTCBConst>:
 80088e0:	2000069c 	.word	0x2000069c
 80088e4:	f3af 8000 	nop.w
 80088e8:	f3af 8000 	nop.w
 80088ec:	f3af 8000 	nop.w

080088f0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80088f6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008908:	f001 fa40 	bl	8009d8c <xTaskIncrementTick>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008912:	4b06      	ldr	r3, [pc, #24]	; (800892c <SysTick_Handler+0x3c>)
 8008914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	2300      	movs	r3, #0
 800891c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	e000ed04 	.word	0xe000ed04

08008930 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008930:	b480      	push	{r7}
 8008932:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008934:	4b0a      	ldr	r3, [pc, #40]	; (8008960 <vPortSetupTimerInterrupt+0x30>)
 8008936:	2200      	movs	r2, #0
 8008938:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800893a:	4b0a      	ldr	r3, [pc, #40]	; (8008964 <vPortSetupTimerInterrupt+0x34>)
 800893c:	2200      	movs	r2, #0
 800893e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008940:	4a09      	ldr	r2, [pc, #36]	; (8008968 <vPortSetupTimerInterrupt+0x38>)
 8008942:	4b0a      	ldr	r3, [pc, #40]	; (800896c <vPortSetupTimerInterrupt+0x3c>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	490a      	ldr	r1, [pc, #40]	; (8008970 <vPortSetupTimerInterrupt+0x40>)
 8008948:	fba1 1303 	umull	r1, r3, r1, r3
 800894c:	099b      	lsrs	r3, r3, #6
 800894e:	3b01      	subs	r3, #1
 8008950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008952:	4b03      	ldr	r3, [pc, #12]	; (8008960 <vPortSetupTimerInterrupt+0x30>)
 8008954:	2207      	movs	r2, #7
 8008956:	601a      	str	r2, [r3, #0]
}
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	e000e010 	.word	0xe000e010
 8008964:	e000e018 	.word	0xe000e018
 8008968:	e000e014 	.word	0xe000e014
 800896c:	2000ffc0 	.word	0x2000ffc0
 8008970:	10624dd3 	.word	0x10624dd3

08008974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008984 <vPortEnableVFP+0x10>
 8008978:	6801      	ldr	r1, [r0, #0]
 800897a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800897e:	6001      	str	r1, [r0, #0]
 8008980:	4770      	bx	lr
 8008982:	0000      	.short	0x0000
 8008984:	e000ed88 	.word	0xe000ed88

08008988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800898e:	f3ef 8305 	mrs	r3, IPSR
 8008992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b0f      	cmp	r3, #15
 8008998:	d913      	bls.n	80089c2 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800899a:	4a15      	ldr	r2, [pc, #84]	; (80089f0 <vPortValidateInterruptPriority+0x68>)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4413      	add	r3, r2
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80089a4:	4b13      	ldr	r3, [pc, #76]	; (80089f4 <vPortValidateInterruptPriority+0x6c>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	7afa      	ldrb	r2, [r7, #11]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d209      	bcs.n	80089c2 <vPortValidateInterruptPriority+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80089ae:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	607b      	str	r3, [r7, #4]
 80089c0:	e7fe      	b.n	80089c0 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089c2:	4b0d      	ldr	r3, [pc, #52]	; (80089f8 <vPortValidateInterruptPriority+0x70>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089ca:	4b0c      	ldr	r3, [pc, #48]	; (80089fc <vPortValidateInterruptPriority+0x74>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d909      	bls.n	80089e6 <vPortValidateInterruptPriority+0x5e>
 80089d2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	603b      	str	r3, [r7, #0]
 80089e4:	e7fe      	b.n	80089e4 <vPortValidateInterruptPriority+0x5c>
	}
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	e000e3f0 	.word	0xe000e3f0
 80089f4:	20000694 	.word	0x20000694
 80089f8:	e000ed0c 	.word	0xe000ed0c
 80089fc:	20000698 	.word	0x20000698

08008a00 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8008a08:	f001 f904 	bl	8009c14 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f006 fb11 	bl	800f034 <malloc>
 8008a12:	4603      	mov	r3, r0
 8008a14:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a16:	f001 f90b 	bl	8009c30 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
	if( pv )
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d006      	beq.n	8008a40 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8008a32:	f001 f8ef 	bl	8009c14 <vTaskSuspendAll>
		{
			free( pv );
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f006 fb04 	bl	800f044 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8008a3c:	f001 f8f8 	bl	8009c30 <xTaskResumeAll>
	}
}
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop

08008a48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f103 0208 	add.w	r2, r3, #8
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f103 0208 	add.w	r2, r3, #8
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f103 0208 	add.w	r2, r3, #8
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop

08008a88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	689a      	ldr	r2, [r3, #8]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	1c5a      	adds	r2, r3, #1
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	601a      	str	r2, [r3, #0]
}
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop

08008ae8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afe:	d103      	bne.n	8008b08 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	60fb      	str	r3, [r7, #12]
 8008b06:	e00c      	b.n	8008b22 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	60fb      	str	r3, [r7, #12]
 8008b0e:	e002      	b.n	8008b16 <vListInsert+0x2e>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	60fb      	str	r3, [r7, #12]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d9f6      	bls.n	8008b10 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	685a      	ldr	r2, [r3, #4]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	601a      	str	r2, [r3, #0]
}
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	6892      	ldr	r2, [r2, #8]
 8008b6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	6852      	ldr	r2, [r2, #4]
 8008b78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d103      	bne.n	8008b8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	689a      	ldr	r2, [r3, #8]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	1e5a      	subs	r2, r3, #1
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d109      	bne.n	8008bd4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008bc0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	60bb      	str	r3, [r7, #8]
 8008bd2:	e7fe      	b.n	8008bd2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008bd4:	f7ff fdfe 	bl	80087d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be0:	68f9      	ldr	r1, [r7, #12]
 8008be2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008be4:	fb01 f303 	mul.w	r3, r1, r3
 8008be8:	441a      	add	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c04:	3b01      	subs	r3, #1
 8008c06:	68f9      	ldr	r1, [r7, #12]
 8008c08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008c0a:	fb01 f303 	mul.w	r3, r1, r3
 8008c0e:	441a      	add	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	22ff      	movs	r2, #255	; 0xff
 8008c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	22ff      	movs	r2, #255	; 0xff
 8008c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d114      	bne.n	8008c54 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d01a      	beq.n	8008c68 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	3310      	adds	r3, #16
 8008c36:	4618      	mov	r0, r3
 8008c38:	f001 fa08 	bl	800a04c <xTaskRemoveFromEventList>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d012      	beq.n	8008c68 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008c42:	4b0d      	ldr	r3, [pc, #52]	; (8008c78 <xQueueGenericReset+0xcc>)
 8008c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c48:	601a      	str	r2, [r3, #0]
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	e009      	b.n	8008c68 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	3310      	adds	r3, #16
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7ff fef5 	bl	8008a48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	3324      	adds	r3, #36	; 0x24
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff fef0 	bl	8008a48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c68:	f7ff fde2 	bl	8008830 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c6c:	2301      	movs	r3, #1
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	e000ed04 	.word	0xe000ed04

08008c7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008c7c:	b590      	push	{r4, r7, lr}
 8008c7e:	b08b      	sub	sp, #44	; 0x2c
 8008c80:	af02      	add	r7, sp, #8
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	4613      	mov	r3, r2
 8008c88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d109      	bne.n	8008ca4 <xQueueGenericCreate+0x28>
 8008c90:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	613b      	str	r3, [r7, #16]
 8008ca2:	e7fe      	b.n	8008ca2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d102      	bne.n	8008cb0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	61fb      	str	r3, [r7, #28]
 8008cae:	e004      	b.n	8008cba <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	fb02 f303 	mul.w	r3, r2, r3
 8008cb8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	3354      	adds	r3, #84	; 0x54
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7ff fe9e 	bl	8008a00 <pvPortMalloc>
 8008cc4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00d      	beq.n	8008ce8 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	3354      	adds	r3, #84	; 0x54
 8008cd4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cd6:	79fc      	ldrb	r4, [r7, #7]
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	68b9      	ldr	r1, [r7, #8]
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	4623      	mov	r3, r4
 8008ce4:	f000 f806 	bl	8008cf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ce8:	69bb      	ldr	r3, [r7, #24]
	}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3724      	adds	r7, #36	; 0x24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd90      	pop	{r4, r7, pc}
 8008cf2:	bf00      	nop

08008cf4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
 8008d00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d103      	bne.n	8008d10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	601a      	str	r2, [r3, #0]
 8008d0e:	e002      	b.n	8008d16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d22:	69b8      	ldr	r0, [r7, #24]
 8008d24:	2101      	movs	r1, #1
 8008d26:	f7ff ff41 	bl	8008bac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	78fa      	ldrb	r2, [r7, #3]
 8008d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	2200      	movs	r2, #0
 8008d36:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop

08008d40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b08e      	sub	sp, #56	; 0x38
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
 8008d4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d109      	bne.n	8008d70 <xQueueGenericSend+0x30>
 8008d5c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d6e:	e7fe      	b.n	8008d6e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d103      	bne.n	8008d7e <xQueueGenericSend+0x3e>
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <xQueueGenericSend+0x42>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e000      	b.n	8008d84 <xQueueGenericSend+0x44>
 8008d82:	2300      	movs	r3, #0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d109      	bne.n	8008d9c <xQueueGenericSend+0x5c>
 8008d88:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	623b      	str	r3, [r7, #32]
 8008d9a:	e7fe      	b.n	8008d9a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d103      	bne.n	8008daa <xQueueGenericSend+0x6a>
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d101      	bne.n	8008dae <xQueueGenericSend+0x6e>
 8008daa:	2301      	movs	r3, #1
 8008dac:	e000      	b.n	8008db0 <xQueueGenericSend+0x70>
 8008dae:	2300      	movs	r3, #0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d109      	bne.n	8008dc8 <xQueueGenericSend+0x88>
 8008db4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	61fb      	str	r3, [r7, #28]
 8008dc6:	e7fe      	b.n	8008dc6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dc8:	f001 fae8 	bl	800a39c <xTaskGetSchedulerState>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d102      	bne.n	8008dd8 <xQueueGenericSend+0x98>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <xQueueGenericSend+0x9c>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e000      	b.n	8008dde <xQueueGenericSend+0x9e>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d109      	bne.n	8008df6 <xQueueGenericSend+0xb6>
 8008de2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008de6:	f383 8811 	msr	BASEPRI, r3
 8008dea:	f3bf 8f6f 	isb	sy
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	61bb      	str	r3, [r7, #24]
 8008df4:	e7fe      	b.n	8008df4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008df6:	f7ff fced 	bl	80087d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d302      	bcc.n	8008e0c <xQueueGenericSend+0xcc>
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d148      	bne.n	8008e9e <xQueueGenericSend+0x15e>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e10:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e14:	68b9      	ldr	r1, [r7, #8]
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	f000 fa36 	bl	8009288 <prvCopyDataToQueue>
 8008e1c:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d017      	beq.n	8008e56 <xQueueGenericSend+0x116>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d104      	bne.n	8008e36 <xQueueGenericSend+0xf6>
 8008e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <xQueueGenericSend+0xf6>
 8008e32:	bf00      	nop
 8008e34:	e02f      	b.n	8008e96 <xQueueGenericSend+0x156>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8008e36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	f000 fba3 	bl	8009584 <prvNotifyQueueSetContainer>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d028      	beq.n	8008e96 <xQueueGenericSend+0x156>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e44:	4b4c      	ldr	r3, [pc, #304]	; (8008f78 <xQueueGenericSend+0x238>)
 8008e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	f3bf 8f6f 	isb	sy
 8008e54:	e01f      	b.n	8008e96 <xQueueGenericSend+0x156>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d010      	beq.n	8008e80 <xQueueGenericSend+0x140>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	3324      	adds	r3, #36	; 0x24
 8008e62:	4618      	mov	r0, r3
 8008e64:	f001 f8f2 	bl	800a04c <xTaskRemoveFromEventList>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d013      	beq.n	8008e96 <xQueueGenericSend+0x156>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8008e6e:	4b42      	ldr	r3, [pc, #264]	; (8008f78 <xQueueGenericSend+0x238>)
 8008e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e74:	601a      	str	r2, [r3, #0]
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	e00a      	b.n	8008e96 <xQueueGenericSend+0x156>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8008e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d007      	beq.n	8008e96 <xQueueGenericSend+0x156>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e86:	4b3c      	ldr	r3, [pc, #240]	; (8008f78 <xQueueGenericSend+0x238>)
 8008e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e96:	f7ff fccb 	bl	8008830 <vPortExitCritical>
				return pdPASS;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e067      	b.n	8008f6e <xQueueGenericSend+0x22e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d103      	bne.n	8008eac <xQueueGenericSend+0x16c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ea4:	f7ff fcc4 	bl	8008830 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	e060      	b.n	8008f6e <xQueueGenericSend+0x22e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d106      	bne.n	8008ec0 <xQueueGenericSend+0x180>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008eb2:	f107 0310 	add.w	r3, r7, #16
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f001 f92c 	bl	800a114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ec0:	f7ff fcb6 	bl	8008830 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ec4:	f000 fea6 	bl	8009c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ec8:	f7ff fc84 	bl	80087d4 <vPortEnterCritical>
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ece:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	b25b      	sxtb	r3, r3
 8008ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eda:	d103      	bne.n	8008ee4 <xQueueGenericSend+0x1a4>
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	b25b      	sxtb	r3, r3
 8008eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef2:	d103      	bne.n	8008efc <xQueueGenericSend+0x1bc>
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008efc:	f7ff fc98 	bl	8008830 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f00:	f107 0210 	add.w	r2, r7, #16
 8008f04:	1d3b      	adds	r3, r7, #4
 8008f06:	4610      	mov	r0, r2
 8008f08:	4619      	mov	r1, r3
 8008f0a:	f001 f919 	bl	800a140 <xTaskCheckForTimeOut>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d124      	bne.n	8008f5e <xQueueGenericSend+0x21e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f16:	f000 fabf 	bl	8009498 <prvIsQueueFull>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d018      	beq.n	8008f52 <xQueueGenericSend+0x212>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	f103 0210 	add.w	r2, r3, #16
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4610      	mov	r0, r2
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	f001 f842 	bl	8009fb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f32:	f000 fa3b 	bl	80093ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f36:	f000 fe7b 	bl	8009c30 <xTaskResumeAll>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d115      	bne.n	8008f6c <xQueueGenericSend+0x22c>
				{
					portYIELD_WITHIN_API();
 8008f40:	4b0d      	ldr	r3, [pc, #52]	; (8008f78 <xQueueGenericSend+0x238>)
 8008f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	e00c      	b.n	8008f6c <xQueueGenericSend+0x22c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f54:	f000 fa2a 	bl	80093ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f58:	f000 fe6a 	bl	8009c30 <xTaskResumeAll>
 8008f5c:	e74b      	b.n	8008df6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f60:	f000 fa24 	bl	80093ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f64:	f000 fe64 	bl	8009c30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	e000      	b.n	8008f6e <xQueueGenericSend+0x22e>
		}
	} /*lint -restore */
 8008f6c:	e743      	b.n	8008df6 <xQueueGenericSend+0xb6>
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3738      	adds	r7, #56	; 0x38
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	e000ed04 	.word	0xe000ed04

08008f7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b08e      	sub	sp, #56	; 0x38
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d109      	bne.n	8008fa8 <xQueueGenericSendFromISR+0x2c>
 8008f94:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8008fa6:	e7fe      	b.n	8008fa6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d103      	bne.n	8008fb6 <xQueueGenericSendFromISR+0x3a>
 8008fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <xQueueGenericSendFromISR+0x3e>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e000      	b.n	8008fbc <xQueueGenericSendFromISR+0x40>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d109      	bne.n	8008fd4 <xQueueGenericSendFromISR+0x58>
 8008fc0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	623b      	str	r3, [r7, #32]
 8008fd2:	e7fe      	b.n	8008fd2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d103      	bne.n	8008fe2 <xQueueGenericSendFromISR+0x66>
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d101      	bne.n	8008fe6 <xQueueGenericSendFromISR+0x6a>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e000      	b.n	8008fe8 <xQueueGenericSendFromISR+0x6c>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d109      	bne.n	8009000 <xQueueGenericSendFromISR+0x84>
 8008fec:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	61fb      	str	r3, [r7, #28]
 8008ffe:	e7fe      	b.n	8008ffe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009000:	f7ff fcc2 	bl	8008988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009004:	f3ef 8211 	mrs	r2, BASEPRI
 8009008:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	61ba      	str	r2, [r7, #24]
 800901a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800901c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800901e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009028:	429a      	cmp	r2, r3
 800902a:	d302      	bcc.n	8009032 <xQueueGenericSendFromISR+0xb6>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b02      	cmp	r3, #2
 8009030:	d13e      	bne.n	80090b0 <xQueueGenericSendFromISR+0x134>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800903c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800903e:	68b9      	ldr	r1, [r7, #8]
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	f000 f921 	bl	8009288 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009046:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800904a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904e:	d124      	bne.n	800909a <xQueueGenericSendFromISR+0x11e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00d      	beq.n	8009074 <xQueueGenericSendFromISR+0xf8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8009058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	f000 fa92 	bl	8009584 <prvNotifyQueueSetContainer>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d021      	beq.n	80090aa <xQueueGenericSendFromISR+0x12e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01e      	beq.n	80090aa <xQueueGenericSendFromISR+0x12e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	e01a      	b.n	80090aa <xQueueGenericSendFromISR+0x12e>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009078:	2b00      	cmp	r3, #0
 800907a:	d016      	beq.n	80090aa <xQueueGenericSendFromISR+0x12e>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800907c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907e:	3324      	adds	r3, #36	; 0x24
 8009080:	4618      	mov	r0, r3
 8009082:	f000 ffe3 	bl	800a04c <xTaskRemoveFromEventList>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00e      	beq.n	80090aa <xQueueGenericSendFromISR+0x12e>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00b      	beq.n	80090aa <xQueueGenericSendFromISR+0x12e>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	e007      	b.n	80090aa <xQueueGenericSendFromISR+0x12e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800909a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800909e:	3301      	adds	r3, #1
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80090aa:	2301      	movs	r3, #1
 80090ac:	637b      	str	r3, [r7, #52]	; 0x34
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 80090ae:	e001      	b.n	80090b4 <xQueueGenericSendFromISR+0x138>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090b0:	2300      	movs	r3, #0
 80090b2:	637b      	str	r3, [r7, #52]	; 0x34
 80090b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3738      	adds	r7, #56	; 0x38
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b08c      	sub	sp, #48	; 0x30
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80090d4:	2300      	movs	r3, #0
 80090d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d109      	bne.n	80090f6 <xQueueReceive+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80090e2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	623b      	str	r3, [r7, #32]
 80090f4:	e7fe      	b.n	80090f4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d103      	bne.n	8009104 <xQueueReceive+0x3c>
 80090fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <xQueueReceive+0x40>
 8009104:	2301      	movs	r3, #1
 8009106:	e000      	b.n	800910a <xQueueReceive+0x42>
 8009108:	2300      	movs	r3, #0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d109      	bne.n	8009122 <xQueueReceive+0x5a>
 800910e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	61fb      	str	r3, [r7, #28]
 8009120:	e7fe      	b.n	8009120 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009122:	f001 f93b 	bl	800a39c <xTaskGetSchedulerState>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d102      	bne.n	8009132 <xQueueReceive+0x6a>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <xQueueReceive+0x6e>
 8009132:	2301      	movs	r3, #1
 8009134:	e000      	b.n	8009138 <xQueueReceive+0x70>
 8009136:	2300      	movs	r3, #0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d109      	bne.n	8009150 <xQueueReceive+0x88>
 800913c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009140:	f383 8811 	msr	BASEPRI, r3
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	61bb      	str	r3, [r7, #24]
 800914e:	e7fe      	b.n	800914e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009150:	f7ff fb40 	bl	80087d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009158:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	2b00      	cmp	r3, #0
 800915e:	d01f      	beq.n	80091a0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	f000 f8fc 	bl	8009360 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	1e5a      	subs	r2, r3, #1
 800916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00f      	beq.n	8009198 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917a:	3310      	adds	r3, #16
 800917c:	4618      	mov	r0, r3
 800917e:	f000 ff65 	bl	800a04c <xTaskRemoveFromEventList>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d007      	beq.n	8009198 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009188:	4b3e      	ldr	r3, [pc, #248]	; (8009284 <xQueueReceive+0x1bc>)
 800918a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009198:	f7ff fb4a 	bl	8008830 <vPortExitCritical>
				return pdPASS;
 800919c:	2301      	movs	r3, #1
 800919e:	e06d      	b.n	800927c <xQueueReceive+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d103      	bne.n	80091ae <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091a6:	f7ff fb43 	bl	8008830 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091aa:	2300      	movs	r3, #0
 80091ac:	e066      	b.n	800927c <xQueueReceive+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d106      	bne.n	80091c2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091b4:	f107 0310 	add.w	r3, r7, #16
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 ffab 	bl	800a114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091be:	2301      	movs	r3, #1
 80091c0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091c2:	f7ff fb35 	bl	8008830 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091c6:	f000 fd25 	bl	8009c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091ca:	f7ff fb03 	bl	80087d4 <vPortEnterCritical>
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	b25b      	sxtb	r3, r3
 80091d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091dc:	d103      	bne.n	80091e6 <xQueueReceive+0x11e>
 80091de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	b25b      	sxtb	r3, r3
 80091f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f4:	d103      	bne.n	80091fe <xQueueReceive+0x136>
 80091f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091fe:	f7ff fb17 	bl	8008830 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009202:	f107 0210 	add.w	r2, r7, #16
 8009206:	1d3b      	adds	r3, r7, #4
 8009208:	4610      	mov	r0, r2
 800920a:	4619      	mov	r1, r3
 800920c:	f000 ff98 	bl	800a140 <xTaskCheckForTimeOut>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d124      	bne.n	8009260 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009218:	f000 f928 	bl	800946c <prvIsQueueEmpty>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d018      	beq.n	8009254 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009224:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4610      	mov	r0, r2
 800922c:	4619      	mov	r1, r3
 800922e:	f000 fec1 	bl	8009fb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009234:	f000 f8ba 	bl	80093ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009238:	f000 fcfa 	bl	8009c30 <xTaskResumeAll>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d11b      	bne.n	800927a <xQueueReceive+0x1b2>
				{
					portYIELD_WITHIN_API();
 8009242:	4b10      	ldr	r3, [pc, #64]	; (8009284 <xQueueReceive+0x1bc>)
 8009244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	e012      	b.n	800927a <xQueueReceive+0x1b2>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009256:	f000 f8a9 	bl	80093ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800925a:	f000 fce9 	bl	8009c30 <xTaskResumeAll>
 800925e:	e777      	b.n	8009150 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009262:	f000 f8a3 	bl	80093ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009266:	f000 fce3 	bl	8009c30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800926a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800926c:	f000 f8fe 	bl	800946c <prvIsQueueEmpty>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <xQueueReceive+0x1b2>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009276:	2300      	movs	r3, #0
 8009278:	e000      	b.n	800927c <xQueueReceive+0x1b4>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
 800927a:	e769      	b.n	8009150 <xQueueReceive+0x88>
}
 800927c:	4618      	mov	r0, r3
 800927e:	3730      	adds	r7, #48	; 0x30
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	e000ed04 	.word	0xe000ed04

08009288 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009294:	2300      	movs	r3, #0
 8009296:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10d      	bne.n	80092c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d14f      	bne.n	800934e <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f001 f890 	bl	800a3d8 <xTaskPriorityDisinherit>
 80092b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	609a      	str	r2, [r3, #8]
 80092c0:	e045      	b.n	800934e <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d11a      	bne.n	80092fe <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d0:	4610      	mov	r0, r2
 80092d2:	68b9      	ldr	r1, [r7, #8]
 80092d4:	461a      	mov	r2, r3
 80092d6:	f005 febd 	bl	800f054 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e2:	441a      	add	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d32c      	bcc.n	800934e <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	605a      	str	r2, [r3, #4]
 80092fc:	e027      	b.n	800934e <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009306:	4610      	mov	r0, r2
 8009308:	68b9      	ldr	r1, [r7, #8]
 800930a:	461a      	mov	r2, r3
 800930c:	f005 fea2 	bl	800f054 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	68da      	ldr	r2, [r3, #12]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009318:	425b      	negs	r3, r3
 800931a:	441a      	add	r2, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	68da      	ldr	r2, [r3, #12]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	429a      	cmp	r2, r3
 800932a:	d207      	bcs.n	800933c <prvCopyDataToQueue+0xb4>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	689a      	ldr	r2, [r3, #8]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009334:	425b      	negs	r3, r3
 8009336:	441a      	add	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b02      	cmp	r3, #2
 8009340:	d105      	bne.n	800934e <prvCopyDataToQueue+0xc6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d002      	beq.n	800934e <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	3b01      	subs	r3, #1
 800934c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	1c5a      	adds	r2, r3, #1
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009356:	697b      	ldr	r3, [r7, #20]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3718      	adds	r7, #24
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936e:	2b00      	cmp	r3, #0
 8009370:	d019      	beq.n	80093a6 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937a:	441a      	add	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	68da      	ldr	r2, [r3, #12]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	429a      	cmp	r2, r3
 800938a:	d303      	bcc.n	8009394 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	68da      	ldr	r2, [r3, #12]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939c:	6838      	ldr	r0, [r7, #0]
 800939e:	4611      	mov	r1, r2
 80093a0:	461a      	mov	r2, r3
 80093a2:	f005 fe57 	bl	800f054 <memcpy>
	}
}
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093b4:	f7ff fa0e 	bl	80087d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093c0:	e021      	b.n	8009406 <prvUnlockQueue+0x5a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d009      	beq.n	80093de <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	2100      	movs	r1, #0
 80093ce:	f000 f8d9 	bl	8009584 <prvNotifyQueueSetContainer>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d012      	beq.n	80093fe <prvUnlockQueue+0x52>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 80093d8:	f000 ff22 	bl	800a220 <vTaskMissedYield>
 80093dc:	e00f      	b.n	80093fe <prvUnlockQueue+0x52>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00a      	beq.n	80093fc <prvUnlockQueue+0x50>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	3324      	adds	r3, #36	; 0x24
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 fe2e 	bl	800a04c <xTaskRemoveFromEventList>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d003      	beq.n	80093fe <prvUnlockQueue+0x52>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 80093f6:	f000 ff13 	bl	800a220 <vTaskMissedYield>
 80093fa:	e000      	b.n	80093fe <prvUnlockQueue+0x52>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
 80093fc:	e007      	b.n	800940e <prvUnlockQueue+0x62>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	3b01      	subs	r3, #1
 8009402:	b2db      	uxtb	r3, r3
 8009404:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800940a:	2b00      	cmp	r3, #0
 800940c:	dcd9      	bgt.n	80093c2 <prvUnlockQueue+0x16>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	22ff      	movs	r2, #255	; 0xff
 8009412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009416:	f7ff fa0b 	bl	8008830 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800941a:	f7ff f9db 	bl	80087d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009424:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009426:	e013      	b.n	8009450 <prvUnlockQueue+0xa4>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00e      	beq.n	800944e <prvUnlockQueue+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3310      	adds	r3, #16
 8009434:	4618      	mov	r0, r3
 8009436:	f000 fe09 	bl	800a04c <xTaskRemoveFromEventList>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 8009440:	f000 feee 	bl	800a220 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009444:	7bbb      	ldrb	r3, [r7, #14]
 8009446:	3b01      	subs	r3, #1
 8009448:	b2db      	uxtb	r3, r3
 800944a:	73bb      	strb	r3, [r7, #14]
 800944c:	e000      	b.n	8009450 <prvUnlockQueue+0xa4>
			}
			else
			{
				break;
 800944e:	e003      	b.n	8009458 <prvUnlockQueue+0xac>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009454:	2b00      	cmp	r3, #0
 8009456:	dce7      	bgt.n	8009428 <prvUnlockQueue+0x7c>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	22ff      	movs	r2, #255	; 0xff
 800945c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009460:	f7ff f9e6 	bl	8008830 <vPortExitCritical>
}
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop

0800946c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009474:	f7ff f9ae 	bl	80087d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947c:	2b00      	cmp	r3, #0
 800947e:	d102      	bne.n	8009486 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009480:	2301      	movs	r3, #1
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	e001      	b.n	800948a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009486:	2300      	movs	r3, #0
 8009488:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800948a:	f7ff f9d1 	bl	8008830 <vPortExitCritical>

	return xReturn;
 800948e:	68fb      	ldr	r3, [r7, #12]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094a0:	f7ff f998 	bl	80087d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d102      	bne.n	80094b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80094b0:	2301      	movs	r3, #1
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	e001      	b.n	80094ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094ba:	f7ff f9b9 	bl	8008830 <vPortExitCritical>

	return xReturn;
 80094be:	68fb      	ldr	r3, [r7, #12]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094d2:	2300      	movs	r3, #0
 80094d4:	60fb      	str	r3, [r7, #12]
 80094d6:	e014      	b.n	8009502 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80094d8:	4a0e      	ldr	r2, [pc, #56]	; (8009514 <vQueueAddToRegistry+0x4c>)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10b      	bne.n	80094fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80094e4:	490b      	ldr	r1, [pc, #44]	; (8009514 <vQueueAddToRegistry+0x4c>)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	683a      	ldr	r2, [r7, #0]
 80094ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80094ee:	4a09      	ldr	r2, [pc, #36]	; (8009514 <vQueueAddToRegistry+0x4c>)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	00db      	lsls	r3, r3, #3
 80094f4:	4413      	add	r3, r2
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80094fa:	e005      	b.n	8009508 <vQueueAddToRegistry+0x40>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	3301      	adds	r3, #1
 8009500:	60fb      	str	r3, [r7, #12]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b07      	cmp	r3, #7
 8009506:	d9e7      	bls.n	80094d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	20001254 	.word	0x20001254

08009518 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009528:	f7ff f954 	bl	80087d4 <vPortEnterCritical>
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009532:	b2db      	uxtb	r3, r3
 8009534:	b25b      	sxtb	r3, r3
 8009536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953a:	d103      	bne.n	8009544 <vQueueWaitForMessageRestricted+0x2c>
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800954a:	b2db      	uxtb	r3, r3
 800954c:	b25b      	sxtb	r3, r3
 800954e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009552:	d103      	bne.n	800955c <vQueueWaitForMessageRestricted+0x44>
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	2200      	movs	r2, #0
 8009558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800955c:	f7ff f968 	bl	8008830 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	2b00      	cmp	r3, #0
 8009566:	d106      	bne.n	8009576 <vQueueWaitForMessageRestricted+0x5e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	3324      	adds	r3, #36	; 0x24
 800956c:	4618      	mov	r0, r3
 800956e:	68b9      	ldr	r1, [r7, #8]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	f000 fd41 	bl	8009ff8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009576:	6978      	ldr	r0, [r7, #20]
 8009578:	f7ff ff18 	bl	80093ac <prvUnlockQueue>
	}
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop

08009584 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8009584:	b580      	push	{r7, lr}
 8009586:	b088      	sub	sp, #32
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009592:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8009594:	2300      	movs	r3, #0
 8009596:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d109      	bne.n	80095b2 <prvNotifyQueueSetContainer+0x2e>
 800959e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	613b      	str	r3, [r7, #16]
 80095b0:	e7fe      	b.n	80095b0 <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d309      	bcc.n	80095d2 <prvNotifyQueueSetContainer+0x4e>
 80095be:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	60fb      	str	r3, [r7, #12]
 80095d0:	e7fe      	b.n	80095d0 <prvNotifyQueueSetContainer+0x4c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095da:	429a      	cmp	r2, r3
 80095dc:	d226      	bcs.n	800962c <prvNotifyQueueSetContainer+0xa8>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095e4:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 80095e6:	1d3b      	adds	r3, r7, #4
 80095e8:	69b8      	ldr	r0, [r7, #24]
 80095ea:	4619      	mov	r1, r3
 80095ec:	683a      	ldr	r2, [r7, #0]
 80095ee:	f7ff fe4b 	bl	8009288 <prvCopyDataToQueue>
 80095f2:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 80095f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095fc:	d10e      	bne.n	800961c <prvNotifyQueueSetContainer+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009602:	2b00      	cmp	r3, #0
 8009604:	d012      	beq.n	800962c <prvNotifyQueueSetContainer+0xa8>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	3324      	adds	r3, #36	; 0x24
 800960a:	4618      	mov	r0, r3
 800960c:	f000 fd1e 	bl	800a04c <xTaskRemoveFromEventList>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00a      	beq.n	800962c <prvNotifyQueueSetContainer+0xa8>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8009616:	2301      	movs	r3, #1
 8009618:	61fb      	str	r3, [r7, #28]
 800961a:	e007      	b.n	800962c <prvNotifyQueueSetContainer+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800961c:	7dfb      	ldrb	r3, [r7, #23]
 800961e:	3301      	adds	r3, #1
 8009620:	b2db      	uxtb	r3, r3
 8009622:	b2da      	uxtb	r2, r3
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800962a:	e7ff      	b.n	800962c <prvNotifyQueueSetContainer+0xa8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800962c:	69fb      	ldr	r3, [r7, #28]
	}
 800962e:	4618      	mov	r0, r3
 8009630:	3720      	adds	r7, #32
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop

08009638 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009638:	b580      	push	{r7, lr}
 800963a:	b08c      	sub	sp, #48	; 0x30
 800963c:	af04      	add	r7, sp, #16
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	603b      	str	r3, [r7, #0]
 8009644:	4613      	mov	r3, r2
 8009646:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009648:	88fb      	ldrh	r3, [r7, #6]
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4618      	mov	r0, r3
 800964e:	f7ff f9d7 	bl	8008a00 <pvPortMalloc>
 8009652:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00e      	beq.n	8009678 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800965a:	2070      	movs	r0, #112	; 0x70
 800965c:	f7ff f9d0 	bl	8008a00 <pvPortMalloc>
 8009660:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d003      	beq.n	8009670 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	631a      	str	r2, [r3, #48]	; 0x30
 800966e:	e005      	b.n	800967c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009670:	6978      	ldr	r0, [r7, #20]
 8009672:	f7ff f9d7 	bl	8008a24 <vPortFree>
 8009676:	e001      	b.n	800967c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009678:	2300      	movs	r3, #0
 800967a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d013      	beq.n	80096aa <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009682:	88fa      	ldrh	r2, [r7, #6]
 8009684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968a:	9301      	str	r3, [sp, #4]
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	9302      	str	r3, [sp, #8]
 8009690:	2300      	movs	r3, #0
 8009692:	9303      	str	r3, [sp, #12]
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	68b9      	ldr	r1, [r7, #8]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	f000 f80f 	bl	80096bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800969e:	69f8      	ldr	r0, [r7, #28]
 80096a0:	f000 f8ae 	bl	8009800 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80096a4:	2301      	movs	r3, #1
 80096a6:	61bb      	str	r3, [r7, #24]
 80096a8:	e002      	b.n	80096b0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096aa:	f04f 33ff 	mov.w	r3, #4294967295
 80096ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096b0:	69bb      	ldr	r3, [r7, #24]
	}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3720      	adds	r7, #32
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop

080096bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b088      	sub	sp, #32
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
 80096c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80096ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4610      	mov	r0, r2
 80096d4:	21a5      	movs	r1, #165	; 0xa5
 80096d6:	461a      	mov	r2, r3
 80096d8:	f005 fcc7 	bl	800f06a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80096e6:	3b01      	subs	r3, #1
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	f023 0307 	bic.w	r3, r3, #7
 80096f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	f003 0307 	and.w	r3, r3, #7
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d009      	beq.n	8009714 <prvInitialiseNewTask+0x58>
 8009700:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	617b      	str	r3, [r7, #20]
 8009712:	e7fe      	b.n	8009712 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d01e      	beq.n	8009758 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800971a:	2300      	movs	r3, #0
 800971c:	61fb      	str	r3, [r7, #28]
 800971e:	e013      	b.n	8009748 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	4413      	add	r3, r2
 8009726:	7819      	ldrb	r1, [r3, #0]
 8009728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	4413      	add	r3, r2
 800972e:	3330      	adds	r3, #48	; 0x30
 8009730:	460a      	mov	r2, r1
 8009732:	711a      	strb	r2, [r3, #4]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	4413      	add	r3, r2
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d100      	bne.n	8009742 <prvInitialiseNewTask+0x86>
			{
				break;
 8009740:	e005      	b.n	800974e <prvInitialiseNewTask+0x92>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	3301      	adds	r3, #1
 8009746:	61fb      	str	r3, [r7, #28]
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	2b0f      	cmp	r3, #15
 800974c:	d9e8      	bls.n	8009720 <prvInitialiseNewTask+0x64>
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	2200      	movs	r2, #0
 8009752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009756:	e003      	b.n	8009760 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975a:	2200      	movs	r2, #0
 800975c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009762:	2b05      	cmp	r3, #5
 8009764:	d901      	bls.n	800976a <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009766:	2305      	movs	r3, #5
 8009768:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800976a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800976e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009774:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	2200      	movs	r2, #0
 800977a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	3304      	adds	r3, #4
 8009780:	4618      	mov	r0, r3
 8009782:	f7ff f981 	bl	8008a88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	3318      	adds	r3, #24
 800978a:	4618      	mov	r0, r3
 800978c:	f7ff f97c 	bl	8008a88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009794:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009798:	f1c3 0206 	rsb	r2, r3, #6
 800979c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097a4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 80097a6:	2300      	movs	r3, #0
 80097a8:	61fb      	str	r3, [r7, #28]
 80097aa:	e009      	b.n	80097c0 <prvInitialiseNewTask+0x104>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 80097ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	3314      	adds	r3, #20
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4413      	add	r3, r2
 80097b6:	2200      	movs	r2, #0
 80097b8:	605a      	str	r2, [r3, #4]
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	3301      	adds	r3, #1
 80097be:	61fb      	str	r3, [r7, #28]
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	2b04      	cmp	r3, #4
 80097c4:	d9f2      	bls.n	80097ac <prvInitialiseNewTask+0xf0>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c8:	2200      	movs	r2, #0
 80097ca:	669a      	str	r2, [r3, #104]	; 0x68
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 80097d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097dc:	69b8      	ldr	r0, [r7, #24]
 80097de:	68f9      	ldr	r1, [r7, #12]
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	f7fe fecd 	bl	8008580 <pxPortInitialiseStack>
 80097e6:	4602      	mov	r2, r0
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80097ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80097f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097f8:	3720      	adds	r7, #32
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop

08009800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009808:	f7fe ffe4 	bl	80087d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800980c:	4b2d      	ldr	r3, [pc, #180]	; (80098c4 <prvAddNewTaskToReadyList+0xc4>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3301      	adds	r3, #1
 8009812:	4a2c      	ldr	r2, [pc, #176]	; (80098c4 <prvAddNewTaskToReadyList+0xc4>)
 8009814:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009816:	4b2c      	ldr	r3, [pc, #176]	; (80098c8 <prvAddNewTaskToReadyList+0xc8>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d109      	bne.n	8009832 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800981e:	4a2a      	ldr	r2, [pc, #168]	; (80098c8 <prvAddNewTaskToReadyList+0xc8>)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009824:	4b27      	ldr	r3, [pc, #156]	; (80098c4 <prvAddNewTaskToReadyList+0xc4>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d110      	bne.n	800984e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800982c:	f000 fd1c 	bl	800a268 <prvInitialiseTaskLists>
 8009830:	e00d      	b.n	800984e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009832:	4b26      	ldr	r3, [pc, #152]	; (80098cc <prvAddNewTaskToReadyList+0xcc>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d109      	bne.n	800984e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800983a:	4b23      	ldr	r3, [pc, #140]	; (80098c8 <prvAddNewTaskToReadyList+0xc8>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009844:	429a      	cmp	r2, r3
 8009846:	d802      	bhi.n	800984e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009848:	4a1f      	ldr	r2, [pc, #124]	; (80098c8 <prvAddNewTaskToReadyList+0xc8>)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800984e:	4b20      	ldr	r3, [pc, #128]	; (80098d0 <prvAddNewTaskToReadyList+0xd0>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3301      	adds	r3, #1
 8009854:	4a1e      	ldr	r2, [pc, #120]	; (80098d0 <prvAddNewTaskToReadyList+0xd0>)
 8009856:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009858:	4b1d      	ldr	r3, [pc, #116]	; (80098d0 <prvAddNewTaskToReadyList+0xd0>)
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009864:	461a      	mov	r2, r3
 8009866:	2301      	movs	r3, #1
 8009868:	fa03 f202 	lsl.w	r2, r3, r2
 800986c:	4b19      	ldr	r3, [pc, #100]	; (80098d4 <prvAddNewTaskToReadyList+0xd4>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4313      	orrs	r3, r2
 8009872:	4a18      	ldr	r2, [pc, #96]	; (80098d4 <prvAddNewTaskToReadyList+0xd4>)
 8009874:	6013      	str	r3, [r2, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800987a:	4613      	mov	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4413      	add	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4a15      	ldr	r2, [pc, #84]	; (80098d8 <prvAddNewTaskToReadyList+0xd8>)
 8009884:	441a      	add	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	3304      	adds	r3, #4
 800988a:	4610      	mov	r0, r2
 800988c:	4619      	mov	r1, r3
 800988e:	f7ff f907 	bl	8008aa0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009892:	f7fe ffcd 	bl	8008830 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009896:	4b0d      	ldr	r3, [pc, #52]	; (80098cc <prvAddNewTaskToReadyList+0xcc>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00e      	beq.n	80098bc <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800989e:	4b0a      	ldr	r3, [pc, #40]	; (80098c8 <prvAddNewTaskToReadyList+0xc8>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d207      	bcs.n	80098bc <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098ac:	4b0b      	ldr	r3, [pc, #44]	; (80098dc <prvAddNewTaskToReadyList+0xdc>)
 80098ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	20000788 	.word	0x20000788
 80098c8:	2000069c 	.word	0x2000069c
 80098cc:	20000794 	.word	0x20000794
 80098d0:	200007a4 	.word	0x200007a4
 80098d4:	20000790 	.word	0x20000790
 80098d8:	200006a0 	.word	0x200006a0
 80098dc:	e000ed04 	.word	0xe000ed04

080098e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80098e8:	2300      	movs	r3, #0
 80098ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d016      	beq.n	8009920 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80098f2:	4b12      	ldr	r3, [pc, #72]	; (800993c <vTaskDelay+0x5c>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d009      	beq.n	800990e <vTaskDelay+0x2e>
 80098fa:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	60bb      	str	r3, [r7, #8]
 800990c:	e7fe      	b.n	800990c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800990e:	f000 f981 	bl	8009c14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	2100      	movs	r1, #0
 8009916:	f000 fde5 	bl	800a4e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800991a:	f000 f989 	bl	8009c30 <xTaskResumeAll>
 800991e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d107      	bne.n	8009936 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009926:	4b06      	ldr	r3, [pc, #24]	; (8009940 <vTaskDelay+0x60>)
 8009928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	200007b0 	.word	0x200007b0
 8009940:	e000ed04 	.word	0xe000ed04

08009944 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800994c:	f7fe ff42 	bl	80087d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d102      	bne.n	800995c <vTaskSuspend+0x18>
 8009956:	4b3b      	ldr	r3, [pc, #236]	; (8009a44 <vTaskSuspend+0x100>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	e000      	b.n	800995e <vTaskSuspend+0x1a>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	3304      	adds	r3, #4
 8009964:	4618      	mov	r0, r3
 8009966:	f7ff f8f7 	bl	8008b58 <uxListRemove>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d115      	bne.n	800999c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009974:	4934      	ldr	r1, [pc, #208]	; (8009a48 <vTaskSuspend+0x104>)
 8009976:	4613      	mov	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	440b      	add	r3, r1
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10a      	bne.n	800999c <vTaskSuspend+0x58>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998a:	461a      	mov	r2, r3
 800998c:	2301      	movs	r3, #1
 800998e:	4093      	lsls	r3, r2
 8009990:	43da      	mvns	r2, r3
 8009992:	4b2e      	ldr	r3, [pc, #184]	; (8009a4c <vTaskSuspend+0x108>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4013      	ands	r3, r2
 8009998:	4a2c      	ldr	r2, [pc, #176]	; (8009a4c <vTaskSuspend+0x108>)
 800999a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d004      	beq.n	80099ae <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	3318      	adds	r3, #24
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7ff f8d5 	bl	8008b58 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	3304      	adds	r3, #4
 80099b2:	4827      	ldr	r0, [pc, #156]	; (8009a50 <vTaskSuspend+0x10c>)
 80099b4:	4619      	mov	r1, r3
 80099b6:	f7ff f873 	bl	8008aa0 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d103      	bne.n	80099ce <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80099ce:	f7fe ff2f 	bl	8008830 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80099d2:	4b20      	ldr	r3, [pc, #128]	; (8009a54 <vTaskSuspend+0x110>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d005      	beq.n	80099e6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80099da:	f7fe fefb 	bl	80087d4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80099de:	f000 fcbd 	bl	800a35c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80099e2:	f7fe ff25 	bl	8008830 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80099e6:	4b17      	ldr	r3, [pc, #92]	; (8009a44 <vTaskSuspend+0x100>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d126      	bne.n	8009a3e <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 80099f0:	4b18      	ldr	r3, [pc, #96]	; (8009a54 <vTaskSuspend+0x110>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d016      	beq.n	8009a26 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80099f8:	4b17      	ldr	r3, [pc, #92]	; (8009a58 <vTaskSuspend+0x114>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d009      	beq.n	8009a14 <vTaskSuspend+0xd0>
 8009a00:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	60bb      	str	r3, [r7, #8]
 8009a12:	e7fe      	b.n	8009a12 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8009a14:	4b11      	ldr	r3, [pc, #68]	; (8009a5c <vTaskSuspend+0x118>)
 8009a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a1a:	601a      	str	r2, [r3, #0]
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	e00b      	b.n	8009a3e <vTaskSuspend+0xfa>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009a26:	4b0a      	ldr	r3, [pc, #40]	; (8009a50 <vTaskSuspend+0x10c>)
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	4b0d      	ldr	r3, [pc, #52]	; (8009a60 <vTaskSuspend+0x11c>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d103      	bne.n	8009a3a <vTaskSuspend+0xf6>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8009a32:	4b04      	ldr	r3, [pc, #16]	; (8009a44 <vTaskSuspend+0x100>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	601a      	str	r2, [r3, #0]
 8009a38:	e001      	b.n	8009a3e <vTaskSuspend+0xfa>
				}
				else
				{
					vTaskSwitchContext();
 8009a3a:	f000 fa61 	bl	8009f00 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	2000069c 	.word	0x2000069c
 8009a48:	200006a0 	.word	0x200006a0
 8009a4c:	20000790 	.word	0x20000790
 8009a50:	20000774 	.word	0x20000774
 8009a54:	20000794 	.word	0x20000794
 8009a58:	200007b0 	.word	0x200007b0
 8009a5c:	e000ed04 	.word	0xe000ed04
 8009a60:	20000788 	.word	0x20000788

08009a64 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009a64:	b480      	push	{r7}
 8009a66:	b087      	sub	sp, #28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d109      	bne.n	8009a8e <prvTaskIsTaskSuspended+0x2a>
 8009a7a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	e7fe      	b.n	8009a8c <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	695b      	ldr	r3, [r3, #20]
 8009a92:	4a0a      	ldr	r2, [pc, #40]	; (8009abc <prvTaskIsTaskSuspended+0x58>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d10a      	bne.n	8009aae <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a9c:	4a08      	ldr	r2, [pc, #32]	; (8009ac0 <prvTaskIsTaskSuspended+0x5c>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d005      	beq.n	8009aae <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d101      	bne.n	8009aae <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009aae:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	371c      	adds	r7, #28
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	20000774 	.word	0x20000774
 8009ac0:	20000748 	.word	0x20000748

08009ac4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d109      	bne.n	8009aea <vTaskResume+0x26>
 8009ad6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	60bb      	str	r3, [r7, #8]
 8009ae8:	e7fe      	b.n	8009ae8 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8009aea:	4b21      	ldr	r3, [pc, #132]	; (8009b70 <vTaskResume+0xac>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d039      	beq.n	8009b68 <vTaskResume+0xa4>
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d036      	beq.n	8009b68 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8009afa:	f7fe fe6b 	bl	80087d4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f7ff ffb0 	bl	8009a64 <prvTaskIsTaskSuspended>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d02c      	beq.n	8009b64 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7ff f822 	bl	8008b58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b18:	461a      	mov	r2, r3
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	fa03 f202 	lsl.w	r2, r3, r2
 8009b20:	4b14      	ldr	r3, [pc, #80]	; (8009b74 <vTaskResume+0xb0>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	4a13      	ldr	r2, [pc, #76]	; (8009b74 <vTaskResume+0xb0>)
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b2e:	4613      	mov	r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	4a10      	ldr	r2, [pc, #64]	; (8009b78 <vTaskResume+0xb4>)
 8009b38:	441a      	add	r2, r3
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	4610      	mov	r0, r2
 8009b40:	4619      	mov	r1, r3
 8009b42:	f7fe ffad 	bl	8008aa0 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b4a:	4b09      	ldr	r3, [pc, #36]	; (8009b70 <vTaskResume+0xac>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d307      	bcc.n	8009b64 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8009b54:	4b09      	ldr	r3, [pc, #36]	; (8009b7c <vTaskResume+0xb8>)
 8009b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8009b64:	f7fe fe64 	bl	8008830 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	2000069c 	.word	0x2000069c
 8009b74:	20000790 	.word	0x20000790
 8009b78:	200006a0 	.word	0x200006a0
 8009b7c:	e000ed04 	.word	0xe000ed04

08009b80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009b86:	2300      	movs	r3, #0
 8009b88:	9300      	str	r3, [sp, #0]
 8009b8a:	4b1c      	ldr	r3, [pc, #112]	; (8009bfc <vTaskStartScheduler+0x7c>)
 8009b8c:	9301      	str	r3, [sp, #4]
 8009b8e:	481c      	ldr	r0, [pc, #112]	; (8009c00 <vTaskStartScheduler+0x80>)
 8009b90:	491c      	ldr	r1, [pc, #112]	; (8009c04 <vTaskStartScheduler+0x84>)
 8009b92:	2282      	movs	r2, #130	; 0x82
 8009b94:	2300      	movs	r3, #0
 8009b96:	f7ff fd4f 	bl	8009638 <xTaskCreate>
 8009b9a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d102      	bne.n	8009ba8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8009ba2:	f000 fd09 	bl	800a5b8 <xTimerCreateTimerTask>
 8009ba6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d115      	bne.n	8009bda <vTaskStartScheduler+0x5a>
 8009bae:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bc0:	4b11      	ldr	r3, [pc, #68]	; (8009c08 <vTaskStartScheduler+0x88>)
 8009bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bc8:	4b10      	ldr	r3, [pc, #64]	; (8009c0c <vTaskStartScheduler+0x8c>)
 8009bca:	2201      	movs	r2, #1
 8009bcc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009bce:	4b10      	ldr	r3, [pc, #64]	; (8009c10 <vTaskStartScheduler+0x90>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009bd4:	f7fe fd60 	bl	8008698 <xPortStartScheduler>
 8009bd8:	e00d      	b.n	8009bf6 <vTaskStartScheduler+0x76>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be0:	d109      	bne.n	8009bf6 <vTaskStartScheduler+0x76>
 8009be2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	607b      	str	r3, [r7, #4]
 8009bf4:	e7fe      	b.n	8009bf4 <vTaskStartScheduler+0x74>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	200007ac 	.word	0x200007ac
 8009c00:	0800a239 	.word	0x0800a239
 8009c04:	0800f608 	.word	0x0800f608
 8009c08:	200007a8 	.word	0x200007a8
 8009c0c:	20000794 	.word	0x20000794
 8009c10:	2000078c 	.word	0x2000078c

08009c14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c14:	b480      	push	{r7}
 8009c16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009c18:	4b04      	ldr	r3, [pc, #16]	; (8009c2c <vTaskSuspendAll+0x18>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	4a03      	ldr	r2, [pc, #12]	; (8009c2c <vTaskSuspendAll+0x18>)
 8009c20:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	200007b0 	.word	0x200007b0

08009c30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c36:	2300      	movs	r3, #0
 8009c38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c3e:	4b42      	ldr	r3, [pc, #264]	; (8009d48 <xTaskResumeAll+0x118>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d109      	bne.n	8009c5a <xTaskResumeAll+0x2a>
 8009c46:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009c4a:	f383 8811 	msr	BASEPRI, r3
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	f3bf 8f4f 	dsb	sy
 8009c56:	603b      	str	r3, [r7, #0]
 8009c58:	e7fe      	b.n	8009c58 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c5a:	f7fe fdbb 	bl	80087d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c5e:	4b3a      	ldr	r3, [pc, #232]	; (8009d48 <xTaskResumeAll+0x118>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	3b01      	subs	r3, #1
 8009c64:	4a38      	ldr	r2, [pc, #224]	; (8009d48 <xTaskResumeAll+0x118>)
 8009c66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c68:	4b37      	ldr	r3, [pc, #220]	; (8009d48 <xTaskResumeAll+0x118>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d163      	bne.n	8009d38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c70:	4b36      	ldr	r3, [pc, #216]	; (8009d4c <xTaskResumeAll+0x11c>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d05f      	beq.n	8009d38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c78:	e030      	b.n	8009cdc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c7a:	4b35      	ldr	r3, [pc, #212]	; (8009d50 <xTaskResumeAll+0x120>)
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3318      	adds	r3, #24
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fe ff66 	bl	8008b58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	3304      	adds	r3, #4
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fe ff61 	bl	8008b58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	fa03 f202 	lsl.w	r2, r3, r2
 8009ca2:	4b2c      	ldr	r3, [pc, #176]	; (8009d54 <xTaskResumeAll+0x124>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	4a2a      	ldr	r2, [pc, #168]	; (8009d54 <xTaskResumeAll+0x124>)
 8009caa:	6013      	str	r3, [r2, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	4413      	add	r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4a27      	ldr	r2, [pc, #156]	; (8009d58 <xTaskResumeAll+0x128>)
 8009cba:	441a      	add	r2, r3
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	3304      	adds	r3, #4
 8009cc0:	4610      	mov	r0, r2
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	f7fe feec 	bl	8008aa0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ccc:	4b23      	ldr	r3, [pc, #140]	; (8009d5c <xTaskResumeAll+0x12c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d302      	bcc.n	8009cdc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009cd6:	4b22      	ldr	r3, [pc, #136]	; (8009d60 <xTaskResumeAll+0x130>)
 8009cd8:	2201      	movs	r2, #1
 8009cda:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cdc:	4b1c      	ldr	r3, [pc, #112]	; (8009d50 <xTaskResumeAll+0x120>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d1ca      	bne.n	8009c7a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d001      	beq.n	8009cee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009cea:	f000 fb37 	bl	800a35c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009cee:	4b1d      	ldr	r3, [pc, #116]	; (8009d64 <xTaskResumeAll+0x134>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d010      	beq.n	8009d1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009cfa:	f000 f847 	bl	8009d8c <xTaskIncrementTick>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d002      	beq.n	8009d0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d04:	4b16      	ldr	r3, [pc, #88]	; (8009d60 <xTaskResumeAll+0x130>)
 8009d06:	2201      	movs	r2, #1
 8009d08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1f1      	bne.n	8009cfa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009d16:	4b13      	ldr	r3, [pc, #76]	; (8009d64 <xTaskResumeAll+0x134>)
 8009d18:	2200      	movs	r2, #0
 8009d1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d1c:	4b10      	ldr	r3, [pc, #64]	; (8009d60 <xTaskResumeAll+0x130>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d009      	beq.n	8009d38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d24:	2301      	movs	r3, #1
 8009d26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d28:	4b0f      	ldr	r3, [pc, #60]	; (8009d68 <xTaskResumeAll+0x138>)
 8009d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d38:	f7fe fd7a 	bl	8008830 <vPortExitCritical>

	return xAlreadyYielded;
 8009d3c:	68bb      	ldr	r3, [r7, #8]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	200007b0 	.word	0x200007b0
 8009d4c:	20000788 	.word	0x20000788
 8009d50:	20000748 	.word	0x20000748
 8009d54:	20000790 	.word	0x20000790
 8009d58:	200006a0 	.word	0x200006a0
 8009d5c:	2000069c 	.word	0x2000069c
 8009d60:	2000079c 	.word	0x2000079c
 8009d64:	20000798 	.word	0x20000798
 8009d68:	e000ed04 	.word	0xe000ed04

08009d6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d72:	4b05      	ldr	r3, [pc, #20]	; (8009d88 <xTaskGetTickCount+0x1c>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d78:	687b      	ldr	r3, [r7, #4]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	370c      	adds	r7, #12
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	2000078c 	.word	0x2000078c

08009d8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d92:	2300      	movs	r3, #0
 8009d94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d96:	4b4f      	ldr	r3, [pc, #316]	; (8009ed4 <xTaskIncrementTick+0x148>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f040 8089 	bne.w	8009eb2 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009da0:	4b4d      	ldr	r3, [pc, #308]	; (8009ed8 <xTaskIncrementTick+0x14c>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3301      	adds	r3, #1
 8009da6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009da8:	4a4b      	ldr	r2, [pc, #300]	; (8009ed8 <xTaskIncrementTick+0x14c>)
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d11f      	bne.n	8009df4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009db4:	4b49      	ldr	r3, [pc, #292]	; (8009edc <xTaskIncrementTick+0x150>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d009      	beq.n	8009dd2 <xTaskIncrementTick+0x46>
 8009dbe:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	603b      	str	r3, [r7, #0]
 8009dd0:	e7fe      	b.n	8009dd0 <xTaskIncrementTick+0x44>
 8009dd2:	4b42      	ldr	r3, [pc, #264]	; (8009edc <xTaskIncrementTick+0x150>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	4b41      	ldr	r3, [pc, #260]	; (8009ee0 <xTaskIncrementTick+0x154>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a3f      	ldr	r2, [pc, #252]	; (8009edc <xTaskIncrementTick+0x150>)
 8009dde:	6013      	str	r3, [r2, #0]
 8009de0:	4a3f      	ldr	r2, [pc, #252]	; (8009ee0 <xTaskIncrementTick+0x154>)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6013      	str	r3, [r2, #0]
 8009de6:	4b3f      	ldr	r3, [pc, #252]	; (8009ee4 <xTaskIncrementTick+0x158>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3301      	adds	r3, #1
 8009dec:	4a3d      	ldr	r2, [pc, #244]	; (8009ee4 <xTaskIncrementTick+0x158>)
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	f000 fab4 	bl	800a35c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009df4:	4b3c      	ldr	r3, [pc, #240]	; (8009ee8 <xTaskIncrementTick+0x15c>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d34a      	bcc.n	8009e94 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dfe:	4b37      	ldr	r3, [pc, #220]	; (8009edc <xTaskIncrementTick+0x150>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d104      	bne.n	8009e12 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e08:	4b37      	ldr	r3, [pc, #220]	; (8009ee8 <xTaskIncrementTick+0x15c>)
 8009e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e0e:	601a      	str	r2, [r3, #0]
					break;
 8009e10:	e040      	b.n	8009e94 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e12:	4b32      	ldr	r3, [pc, #200]	; (8009edc <xTaskIncrementTick+0x150>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d203      	bcs.n	8009e32 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e2a:	4a2f      	ldr	r2, [pc, #188]	; (8009ee8 <xTaskIncrementTick+0x15c>)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e30:	e030      	b.n	8009e94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	3304      	adds	r3, #4
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fe fe8e 	bl	8008b58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d004      	beq.n	8009e4e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	3318      	adds	r3, #24
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7fe fe85 	bl	8008b58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e52:	461a      	mov	r2, r3
 8009e54:	2301      	movs	r3, #1
 8009e56:	fa03 f202 	lsl.w	r2, r3, r2
 8009e5a:	4b24      	ldr	r3, [pc, #144]	; (8009eec <xTaskIncrementTick+0x160>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	4a22      	ldr	r2, [pc, #136]	; (8009eec <xTaskIncrementTick+0x160>)
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e68:	4613      	mov	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4a1f      	ldr	r2, [pc, #124]	; (8009ef0 <xTaskIncrementTick+0x164>)
 8009e72:	441a      	add	r2, r3
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	3304      	adds	r3, #4
 8009e78:	4610      	mov	r0, r2
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	f7fe fe10 	bl	8008aa0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e84:	4b1b      	ldr	r3, [pc, #108]	; (8009ef4 <xTaskIncrementTick+0x168>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d301      	bcc.n	8009e92 <xTaskIncrementTick+0x106>
						{
							xSwitchRequired = pdTRUE;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 8009e92:	e7b4      	b.n	8009dfe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e94:	4b17      	ldr	r3, [pc, #92]	; (8009ef4 <xTaskIncrementTick+0x168>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9a:	4915      	ldr	r1, [pc, #84]	; (8009ef0 <xTaskIncrementTick+0x164>)
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4413      	add	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	440b      	add	r3, r1
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d901      	bls.n	8009eb0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009eac:	2301      	movs	r3, #1
 8009eae:	617b      	str	r3, [r7, #20]
 8009eb0:	e004      	b.n	8009ebc <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009eb2:	4b11      	ldr	r3, [pc, #68]	; (8009ef8 <xTaskIncrementTick+0x16c>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	4a0f      	ldr	r2, [pc, #60]	; (8009ef8 <xTaskIncrementTick+0x16c>)
 8009eba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009ebc:	4b0f      	ldr	r3, [pc, #60]	; (8009efc <xTaskIncrementTick+0x170>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009ec8:	697b      	ldr	r3, [r7, #20]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3718      	adds	r7, #24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	200007b0 	.word	0x200007b0
 8009ed8:	2000078c 	.word	0x2000078c
 8009edc:	20000740 	.word	0x20000740
 8009ee0:	20000744 	.word	0x20000744
 8009ee4:	200007a0 	.word	0x200007a0
 8009ee8:	200007a8 	.word	0x200007a8
 8009eec:	20000790 	.word	0x20000790
 8009ef0:	200006a0 	.word	0x200006a0
 8009ef4:	2000069c 	.word	0x2000069c
 8009ef8:	20000798 	.word	0x20000798
 8009efc:	2000079c 	.word	0x2000079c

08009f00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f00:	b480      	push	{r7}
 8009f02:	b087      	sub	sp, #28
 8009f04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f06:	4b26      	ldr	r3, [pc, #152]	; (8009fa0 <vTaskSwitchContext+0xa0>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d003      	beq.n	8009f16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f0e:	4b25      	ldr	r3, [pc, #148]	; (8009fa4 <vTaskSwitchContext+0xa4>)
 8009f10:	2201      	movs	r2, #1
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	e03e      	b.n	8009f94 <vTaskSwitchContext+0x94>
	}
	else
	{
		xYieldPending = pdFALSE;
 8009f16:	4b23      	ldr	r3, [pc, #140]	; (8009fa4 <vTaskSwitchContext+0xa4>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f1c:	4b22      	ldr	r3, [pc, #136]	; (8009fa8 <vTaskSwitchContext+0xa8>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	60fb      	str	r3, [r7, #12]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	fab3 f383 	clz	r3, r3
 8009f28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009f2a:	7afb      	ldrb	r3, [r7, #11]
 8009f2c:	f1c3 031f 	rsb	r3, r3, #31
 8009f30:	617b      	str	r3, [r7, #20]
 8009f32:	491e      	ldr	r1, [pc, #120]	; (8009fac <vTaskSwitchContext+0xac>)
 8009f34:	697a      	ldr	r2, [r7, #20]
 8009f36:	4613      	mov	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	440b      	add	r3, r1
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d109      	bne.n	8009f5a <vTaskSwitchContext+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f46:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	607b      	str	r3, [r7, #4]
 8009f58:	e7fe      	b.n	8009f58 <vTaskSwitchContext+0x58>
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4a11      	ldr	r2, [pc, #68]	; (8009fac <vTaskSwitchContext+0xac>)
 8009f66:	4413      	add	r3, r2
 8009f68:	613b      	str	r3, [r7, #16]
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	685a      	ldr	r2, [r3, #4]
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	605a      	str	r2, [r3, #4]
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	685a      	ldr	r2, [r3, #4]
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	3308      	adds	r3, #8
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d104      	bne.n	8009f8a <vTaskSwitchContext+0x8a>
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	685a      	ldr	r2, [r3, #4]
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	605a      	str	r2, [r3, #4]
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	4a07      	ldr	r2, [pc, #28]	; (8009fb0 <vTaskSwitchContext+0xb0>)
 8009f92:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f94:	371c      	adds	r7, #28
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	200007b0 	.word	0x200007b0
 8009fa4:	2000079c 	.word	0x2000079c
 8009fa8:	20000790 	.word	0x20000790
 8009fac:	200006a0 	.word	0x200006a0
 8009fb0:	2000069c 	.word	0x2000069c

08009fb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d109      	bne.n	8009fd8 <vTaskPlaceOnEventList+0x24>
 8009fc4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	60fb      	str	r3, [r7, #12]
 8009fd6:	e7fe      	b.n	8009fd6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fd8:	4b06      	ldr	r3, [pc, #24]	; (8009ff4 <vTaskPlaceOnEventList+0x40>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	3318      	adds	r3, #24
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	f7fe fd81 	bl	8008ae8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009fe6:	6838      	ldr	r0, [r7, #0]
 8009fe8:	2101      	movs	r1, #1
 8009fea:	f000 fa7b 	bl	800a4e4 <prvAddCurrentTaskToDelayedList>
}
 8009fee:	3710      	adds	r7, #16
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	2000069c 	.word	0x2000069c

08009ff8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b086      	sub	sp, #24
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d109      	bne.n	800a01e <vTaskPlaceOnEventListRestricted+0x26>
 800a00a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	617b      	str	r3, [r7, #20]
 800a01c:	e7fe      	b.n	800a01c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a01e:	4b0a      	ldr	r3, [pc, #40]	; (800a048 <vTaskPlaceOnEventListRestricted+0x50>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	3318      	adds	r3, #24
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	4619      	mov	r1, r3
 800a028:	f7fe fd3a 	bl	8008aa0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d002      	beq.n	800a038 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a032:	f04f 33ff 	mov.w	r3, #4294967295
 800a036:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a038:	68b8      	ldr	r0, [r7, #8]
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	f000 fa52 	bl	800a4e4 <prvAddCurrentTaskToDelayedList>
	}
 800a040:	3718      	adds	r7, #24
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	2000069c 	.word	0x2000069c

0800a04c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b086      	sub	sp, #24
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d109      	bne.n	800a076 <xTaskRemoveFromEventList+0x2a>
 800a062:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	60fb      	str	r3, [r7, #12]
 800a074:	e7fe      	b.n	800a074 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	3318      	adds	r3, #24
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fe fd6c 	bl	8008b58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a080:	4b1e      	ldr	r3, [pc, #120]	; (800a0fc <xTaskRemoveFromEventList+0xb0>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d11e      	bne.n	800a0c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	3304      	adds	r3, #4
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fe fd63 	bl	8008b58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a096:	461a      	mov	r2, r3
 800a098:	2301      	movs	r3, #1
 800a09a:	fa03 f202 	lsl.w	r2, r3, r2
 800a09e:	4b18      	ldr	r3, [pc, #96]	; (800a100 <xTaskRemoveFromEventList+0xb4>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	4a16      	ldr	r2, [pc, #88]	; (800a100 <xTaskRemoveFromEventList+0xb4>)
 800a0a6:	6013      	str	r3, [r2, #0]
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	4413      	add	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	4a13      	ldr	r2, [pc, #76]	; (800a104 <xTaskRemoveFromEventList+0xb8>)
 800a0b6:	441a      	add	r2, r3
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	4610      	mov	r0, r2
 800a0be:	4619      	mov	r1, r3
 800a0c0:	f7fe fcee 	bl	8008aa0 <vListInsertEnd>
 800a0c4:	e005      	b.n	800a0d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	3318      	adds	r3, #24
 800a0ca:	480f      	ldr	r0, [pc, #60]	; (800a108 <xTaskRemoveFromEventList+0xbc>)
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	f7fe fce7 	bl	8008aa0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d6:	4b0d      	ldr	r3, [pc, #52]	; (800a10c <xTaskRemoveFromEventList+0xc0>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d905      	bls.n	800a0ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a0e4:	4b0a      	ldr	r3, [pc, #40]	; (800a110 <xTaskRemoveFromEventList+0xc4>)
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	601a      	str	r2, [r3, #0]
 800a0ea:	e001      	b.n	800a0f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a0f0:	697b      	ldr	r3, [r7, #20]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3718      	adds	r7, #24
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	200007b0 	.word	0x200007b0
 800a100:	20000790 	.word	0x20000790
 800a104:	200006a0 	.word	0x200006a0
 800a108:	20000748 	.word	0x20000748
 800a10c:	2000069c 	.word	0x2000069c
 800a110:	2000079c 	.word	0x2000079c

0800a114 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a11c:	4b06      	ldr	r3, [pc, #24]	; (800a138 <vTaskInternalSetTimeOutState+0x24>)
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a124:	4b05      	ldr	r3, [pc, #20]	; (800a13c <vTaskInternalSetTimeOutState+0x28>)
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	605a      	str	r2, [r3, #4]
}
 800a12c:	370c      	adds	r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	200007a0 	.word	0x200007a0
 800a13c:	2000078c 	.word	0x2000078c

0800a140 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b088      	sub	sp, #32
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d109      	bne.n	800a164 <xTaskCheckForTimeOut+0x24>
 800a150:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	613b      	str	r3, [r7, #16]
 800a162:	e7fe      	b.n	800a162 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d109      	bne.n	800a17e <xTaskCheckForTimeOut+0x3e>
 800a16a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	60fb      	str	r3, [r7, #12]
 800a17c:	e7fe      	b.n	800a17c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a17e:	f7fe fb29 	bl	80087d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a182:	4b24      	ldr	r3, [pc, #144]	; (800a214 <xTaskCheckForTimeOut+0xd4>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	69ba      	ldr	r2, [r7, #24]
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800a192:	4b21      	ldr	r3, [pc, #132]	; (800a218 <xTaskCheckForTimeOut+0xd8>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d007      	beq.n	800a1ae <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a19e:	4b1e      	ldr	r3, [pc, #120]	; (800a218 <xTaskCheckForTimeOut+0xd8>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
				xReturn = pdTRUE;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	61fb      	str	r3, [r7, #28]
 800a1ac:	e02b      	b.n	800a206 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b6:	d102      	bne.n	800a1be <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	61fb      	str	r3, [r7, #28]
 800a1bc:	e023      	b.n	800a206 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	4b16      	ldr	r3, [pc, #88]	; (800a21c <xTaskCheckForTimeOut+0xdc>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d007      	beq.n	800a1da <xTaskCheckForTimeOut+0x9a>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	685a      	ldr	r2, [r3, #4]
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d802      	bhi.n	800a1da <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	61fb      	str	r3, [r7, #28]
 800a1d8:	e015      	b.n	800a206 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d90b      	bls.n	800a1fc <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	1ad2      	subs	r2, r2, r3
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7ff ff8f 	bl	800a114 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	61fb      	str	r3, [r7, #28]
 800a1fa:	e004      	b.n	800a206 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	2200      	movs	r2, #0
 800a200:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a202:	2301      	movs	r3, #1
 800a204:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a206:	f7fe fb13 	bl	8008830 <vPortExitCritical>

	return xReturn;
 800a20a:	69fb      	ldr	r3, [r7, #28]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3720      	adds	r7, #32
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	2000078c 	.word	0x2000078c
 800a218:	2000069c 	.word	0x2000069c
 800a21c:	200007a0 	.word	0x200007a0

0800a220 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a220:	b480      	push	{r7}
 800a222:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a224:	4b03      	ldr	r3, [pc, #12]	; (800a234 <vTaskMissedYield+0x14>)
 800a226:	2201      	movs	r2, #1
 800a228:	601a      	str	r2, [r3, #0]
}
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	2000079c 	.word	0x2000079c

0800a238 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a240:	f000 f850 	bl	800a2e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a244:	4b06      	ldr	r3, [pc, #24]	; (800a260 <prvIdleTask+0x28>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d907      	bls.n	800a25c <prvIdleTask+0x24>
			{
				taskYIELD();
 800a24c:	4b05      	ldr	r3, [pc, #20]	; (800a264 <prvIdleTask+0x2c>)
 800a24e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a252:	601a      	str	r2, [r3, #0]
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 800a25c:	e7f0      	b.n	800a240 <prvIdleTask+0x8>
 800a25e:	bf00      	nop
 800a260:	200006a0 	.word	0x200006a0
 800a264:	e000ed04 	.word	0xe000ed04

0800a268 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a26e:	2300      	movs	r3, #0
 800a270:	607b      	str	r3, [r7, #4]
 800a272:	e00c      	b.n	800a28e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	4613      	mov	r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4a11      	ldr	r2, [pc, #68]	; (800a2c4 <prvInitialiseTaskLists+0x5c>)
 800a280:	4413      	add	r3, r2
 800a282:	4618      	mov	r0, r3
 800a284:	f7fe fbe0 	bl	8008a48 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3301      	adds	r3, #1
 800a28c:	607b      	str	r3, [r7, #4]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2b05      	cmp	r3, #5
 800a292:	d9ef      	bls.n	800a274 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800a294:	480c      	ldr	r0, [pc, #48]	; (800a2c8 <prvInitialiseTaskLists+0x60>)
 800a296:	f7fe fbd7 	bl	8008a48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a29a:	480c      	ldr	r0, [pc, #48]	; (800a2cc <prvInitialiseTaskLists+0x64>)
 800a29c:	f7fe fbd4 	bl	8008a48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2a0:	480b      	ldr	r0, [pc, #44]	; (800a2d0 <prvInitialiseTaskLists+0x68>)
 800a2a2:	f7fe fbd1 	bl	8008a48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2a6:	480b      	ldr	r0, [pc, #44]	; (800a2d4 <prvInitialiseTaskLists+0x6c>)
 800a2a8:	f7fe fbce 	bl	8008a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2ac:	480a      	ldr	r0, [pc, #40]	; (800a2d8 <prvInitialiseTaskLists+0x70>)
 800a2ae:	f7fe fbcb 	bl	8008a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2b2:	4b0a      	ldr	r3, [pc, #40]	; (800a2dc <prvInitialiseTaskLists+0x74>)
 800a2b4:	4a04      	ldr	r2, [pc, #16]	; (800a2c8 <prvInitialiseTaskLists+0x60>)
 800a2b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2b8:	4b09      	ldr	r3, [pc, #36]	; (800a2e0 <prvInitialiseTaskLists+0x78>)
 800a2ba:	4a04      	ldr	r2, [pc, #16]	; (800a2cc <prvInitialiseTaskLists+0x64>)
 800a2bc:	601a      	str	r2, [r3, #0]
}
 800a2be:	3708      	adds	r7, #8
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	200006a0 	.word	0x200006a0
 800a2c8:	20000718 	.word	0x20000718
 800a2cc:	2000072c 	.word	0x2000072c
 800a2d0:	20000748 	.word	0x20000748
 800a2d4:	2000075c 	.word	0x2000075c
 800a2d8:	20000774 	.word	0x20000774
 800a2dc:	20000740 	.word	0x20000740
 800a2e0:	20000744 	.word	0x20000744

0800a2e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2ea:	e019      	b.n	800a320 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a2ec:	f7fe fa72 	bl	80087d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2f0:	4b0f      	ldr	r3, [pc, #60]	; (800a330 <prvCheckTasksWaitingTermination+0x4c>)
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fe fc2b 	bl	8008b58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a302:	4b0c      	ldr	r3, [pc, #48]	; (800a334 <prvCheckTasksWaitingTermination+0x50>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	3b01      	subs	r3, #1
 800a308:	4a0a      	ldr	r2, [pc, #40]	; (800a334 <prvCheckTasksWaitingTermination+0x50>)
 800a30a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a30c:	4b0a      	ldr	r3, [pc, #40]	; (800a338 <prvCheckTasksWaitingTermination+0x54>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3b01      	subs	r3, #1
 800a312:	4a09      	ldr	r2, [pc, #36]	; (800a338 <prvCheckTasksWaitingTermination+0x54>)
 800a314:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a316:	f7fe fa8b 	bl	8008830 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f80e 	bl	800a33c <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a320:	4b05      	ldr	r3, [pc, #20]	; (800a338 <prvCheckTasksWaitingTermination+0x54>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1e1      	bne.n	800a2ec <prvCheckTasksWaitingTermination+0x8>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	2000075c 	.word	0x2000075c
 800a334:	20000788 	.word	0x20000788
 800a338:	20000770 	.word	0x20000770

0800a33c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fe fb6b 	bl	8008a24 <vPortFree>
			vPortFree( pxTCB );
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7fe fb68 	bl	8008a24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop

0800a35c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a362:	4b0c      	ldr	r3, [pc, #48]	; (800a394 <prvResetNextTaskUnblockTime+0x38>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d104      	bne.n	800a376 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a36c:	4b0a      	ldr	r3, [pc, #40]	; (800a398 <prvResetNextTaskUnblockTime+0x3c>)
 800a36e:	f04f 32ff 	mov.w	r2, #4294967295
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	e008      	b.n	800a388 <prvResetNextTaskUnblockTime+0x2c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a376:	4b07      	ldr	r3, [pc, #28]	; (800a394 <prvResetNextTaskUnblockTime+0x38>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	4a04      	ldr	r2, [pc, #16]	; (800a398 <prvResetNextTaskUnblockTime+0x3c>)
 800a386:	6013      	str	r3, [r2, #0]
	}
}
 800a388:	370c      	adds	r7, #12
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	20000740 	.word	0x20000740
 800a398:	200007a8 	.word	0x200007a8

0800a39c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a3a2:	4b0b      	ldr	r3, [pc, #44]	; (800a3d0 <xTaskGetSchedulerState+0x34>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d102      	bne.n	800a3b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	607b      	str	r3, [r7, #4]
 800a3ae:	e008      	b.n	800a3c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3b0:	4b08      	ldr	r3, [pc, #32]	; (800a3d4 <xTaskGetSchedulerState+0x38>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d102      	bne.n	800a3be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	607b      	str	r3, [r7, #4]
 800a3bc:	e001      	b.n	800a3c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a3c2:	687b      	ldr	r3, [r7, #4]
	}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	20000794 	.word	0x20000794
 800a3d4:	200007b0 	.word	0x200007b0

0800a3d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d06e      	beq.n	800a4cc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a3ee:	4b3a      	ldr	r3, [pc, #232]	; (800a4d8 <xTaskPriorityDisinherit+0x100>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d009      	beq.n	800a40c <xTaskPriorityDisinherit+0x34>
 800a3f8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a3fc:	f383 8811 	msr	BASEPRI, r3
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	60fb      	str	r3, [r7, #12]
 800a40a:	e7fe      	b.n	800a40a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a410:	2b00      	cmp	r3, #0
 800a412:	d109      	bne.n	800a428 <xTaskPriorityDisinherit+0x50>
 800a414:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	60bb      	str	r3, [r7, #8]
 800a426:	e7fe      	b.n	800a426 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a42c:	1e5a      	subs	r2, r3, #1
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d046      	beq.n	800a4cc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a442:	2b00      	cmp	r3, #0
 800a444:	d142      	bne.n	800a4cc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	3304      	adds	r3, #4
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fb84 	bl	8008b58 <uxListRemove>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d115      	bne.n	800a482 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a45a:	4920      	ldr	r1, [pc, #128]	; (800a4dc <xTaskPriorityDisinherit+0x104>)
 800a45c:	4613      	mov	r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	4413      	add	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	440b      	add	r3, r1
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10a      	bne.n	800a482 <xTaskPriorityDisinherit+0xaa>
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a470:	461a      	mov	r2, r3
 800a472:	2301      	movs	r3, #1
 800a474:	4093      	lsls	r3, r2
 800a476:	43da      	mvns	r2, r3
 800a478:	4b19      	ldr	r3, [pc, #100]	; (800a4e0 <xTaskPriorityDisinherit+0x108>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4013      	ands	r3, r2
 800a47e:	4a18      	ldr	r2, [pc, #96]	; (800a4e0 <xTaskPriorityDisinherit+0x108>)
 800a480:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48e:	f1c3 0206 	rsb	r2, r3, #6
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49a:	461a      	mov	r2, r3
 800a49c:	2301      	movs	r3, #1
 800a49e:	fa03 f202 	lsl.w	r2, r3, r2
 800a4a2:	4b0f      	ldr	r3, [pc, #60]	; (800a4e0 <xTaskPriorityDisinherit+0x108>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	4a0d      	ldr	r2, [pc, #52]	; (800a4e0 <xTaskPriorityDisinherit+0x108>)
 800a4aa:	6013      	str	r3, [r2, #0]
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4413      	add	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	4a08      	ldr	r2, [pc, #32]	; (800a4dc <xTaskPriorityDisinherit+0x104>)
 800a4ba:	441a      	add	r2, r3
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	3304      	adds	r3, #4
 800a4c0:	4610      	mov	r0, r2
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	f7fe faec 	bl	8008aa0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4cc:	697b      	ldr	r3, [r7, #20]
	}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3718      	adds	r7, #24
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	2000069c 	.word	0x2000069c
 800a4dc:	200006a0 	.word	0x200006a0
 800a4e0:	20000790 	.word	0x20000790

0800a4e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4ee:	4b2b      	ldr	r3, [pc, #172]	; (800a59c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a4f4:	4b2a      	ldr	r3, [pc, #168]	; (800a5a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4fe:	4b28      	ldr	r3, [pc, #160]	; (800a5a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3304      	adds	r3, #4
 800a504:	4618      	mov	r0, r3
 800a506:	f7fe fb27 	bl	8008b58 <uxListRemove>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10b      	bne.n	800a528 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a510:	4b23      	ldr	r3, [pc, #140]	; (800a5a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a516:	461a      	mov	r2, r3
 800a518:	2301      	movs	r3, #1
 800a51a:	4093      	lsls	r3, r2
 800a51c:	43da      	mvns	r2, r3
 800a51e:	4b21      	ldr	r3, [pc, #132]	; (800a5a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4013      	ands	r3, r2
 800a524:	4a1f      	ldr	r2, [pc, #124]	; (800a5a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a526:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52e:	d10a      	bne.n	800a546 <prvAddCurrentTaskToDelayedList+0x62>
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d007      	beq.n	800a546 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a536:	4b1a      	ldr	r3, [pc, #104]	; (800a5a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	3304      	adds	r3, #4
 800a53c:	481a      	ldr	r0, [pc, #104]	; (800a5a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a53e:	4619      	mov	r1, r3
 800a540:	f7fe faae 	bl	8008aa0 <vListInsertEnd>
 800a544:	e026      	b.n	800a594 <prvAddCurrentTaskToDelayedList+0xb0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4413      	add	r3, r2
 800a54c:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a54e:	4b14      	ldr	r3, [pc, #80]	; (800a5a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68ba      	ldr	r2, [r7, #8]
 800a554:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d209      	bcs.n	800a572 <prvAddCurrentTaskToDelayedList+0x8e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a55e:	4b13      	ldr	r3, [pc, #76]	; (800a5ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	4b0f      	ldr	r3, [pc, #60]	; (800a5a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	3304      	adds	r3, #4
 800a568:	4610      	mov	r0, r2
 800a56a:	4619      	mov	r1, r3
 800a56c:	f7fe fabc 	bl	8008ae8 <vListInsert>
 800a570:	e010      	b.n	800a594 <prvAddCurrentTaskToDelayedList+0xb0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a572:	4b0f      	ldr	r3, [pc, #60]	; (800a5b0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	4b0a      	ldr	r3, [pc, #40]	; (800a5a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3304      	adds	r3, #4
 800a57c:	4610      	mov	r0, r2
 800a57e:	4619      	mov	r1, r3
 800a580:	f7fe fab2 	bl	8008ae8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800a584:	4b0b      	ldr	r3, [pc, #44]	; (800a5b4 <prvAddCurrentTaskToDelayedList+0xd0>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d202      	bcs.n	800a594 <prvAddCurrentTaskToDelayedList+0xb0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800a58e:	4a09      	ldr	r2, [pc, #36]	; (800a5b4 <prvAddCurrentTaskToDelayedList+0xd0>)
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	2000078c 	.word	0x2000078c
 800a5a0:	2000069c 	.word	0x2000069c
 800a5a4:	20000790 	.word	0x20000790
 800a5a8:	20000774 	.word	0x20000774
 800a5ac:	20000744 	.word	0x20000744
 800a5b0:	20000740 	.word	0x20000740
 800a5b4:	200007a8 	.word	0x200007a8

0800a5b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5c2:	f000 fb4f 	bl	800ac64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5c6:	4b11      	ldr	r3, [pc, #68]	; (800a60c <xTimerCreateTimerTask+0x54>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00b      	beq.n	800a5e6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800a5ce:	2304      	movs	r3, #4
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	4b0f      	ldr	r3, [pc, #60]	; (800a610 <xTimerCreateTimerTask+0x58>)
 800a5d4:	9301      	str	r3, [sp, #4]
 800a5d6:	480f      	ldr	r0, [pc, #60]	; (800a614 <xTimerCreateTimerTask+0x5c>)
 800a5d8:	490f      	ldr	r1, [pc, #60]	; (800a618 <xTimerCreateTimerTask+0x60>)
 800a5da:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f7ff f82a 	bl	8009638 <xTaskCreate>
 800a5e4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d109      	bne.n	800a600 <xTimerCreateTimerTask+0x48>
 800a5ec:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a5f0:	f383 8811 	msr	BASEPRI, r3
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	603b      	str	r3, [r7, #0]
 800a5fe:	e7fe      	b.n	800a5fe <xTimerCreateTimerTask+0x46>
	return xReturn;
 800a600:	687b      	ldr	r3, [r7, #4]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	200007e4 	.word	0x200007e4
 800a610:	200007e8 	.word	0x200007e8
 800a614:	0800a811 	.word	0x0800a811
 800a618:	0800f620 	.word	0x0800f620

0800a61c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b088      	sub	sp, #32
 800a620:	af02      	add	r7, sp, #8
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
 800a628:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a62a:	202c      	movs	r0, #44	; 0x2c
 800a62c:	f7fe f9e8 	bl	8008a00 <pvPortMalloc>
 800a630:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00d      	beq.n	800a654 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a640:	6a3b      	ldr	r3, [r7, #32]
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	68b9      	ldr	r1, [r7, #8]
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	f000 f806 	bl	800a660 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a654:	697b      	ldr	r3, [r7, #20]
	}
 800a656:	4618      	mov	r0, r3
 800a658:	3718      	adds	r7, #24
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop

0800a660 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
 800a66c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d109      	bne.n	800a688 <prvInitialiseNewTimer+0x28>
 800a674:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	617b      	str	r3, [r7, #20]
 800a686:	e7fe      	b.n	800a686 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800a688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d01e      	beq.n	800a6cc <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a68e:	f000 fae9 	bl	800ac64 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a0:	683a      	ldr	r2, [r7, #0]
 800a6a2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a6:	6a3a      	ldr	r2, [r7, #32]
 800a6a8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ac:	3304      	adds	r3, #4
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fe f9ea 	bl	8008a88 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d008      	beq.n	800a6cc <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6c0:	f043 0304 	orr.w	r3, r3, #4
 800a6c4:	b2da      	uxtb	r2, r3
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a6cc:	3718      	adds	r7, #24
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop

0800a6d4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b08a      	sub	sp, #40	; 0x28
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	607a      	str	r2, [r7, #4]
 800a6e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d109      	bne.n	800a700 <xTimerGenericCommand+0x2c>
 800a6ec:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a6f0:	f383 8811 	msr	BASEPRI, r3
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	623b      	str	r3, [r7, #32]
 800a6fe:	e7fe      	b.n	800a6fe <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a700:	4b1c      	ldr	r3, [pc, #112]	; (800a774 <xTimerGenericCommand+0xa0>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d030      	beq.n	800a76a <xTimerGenericCommand+0x96>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	2b05      	cmp	r3, #5
 800a718:	dc1c      	bgt.n	800a754 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a71a:	f7ff fe3f 	bl	800a39c <xTaskGetSchedulerState>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b02      	cmp	r3, #2
 800a722:	d10b      	bne.n	800a73c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a724:	4b13      	ldr	r3, [pc, #76]	; (800a774 <xTimerGenericCommand+0xa0>)
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	f107 0310 	add.w	r3, r7, #16
 800a72c:	4610      	mov	r0, r2
 800a72e:	4619      	mov	r1, r3
 800a730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a732:	2300      	movs	r3, #0
 800a734:	f7fe fb04 	bl	8008d40 <xQueueGenericSend>
 800a738:	6278      	str	r0, [r7, #36]	; 0x24
 800a73a:	e016      	b.n	800a76a <xTimerGenericCommand+0x96>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a73c:	4b0d      	ldr	r3, [pc, #52]	; (800a774 <xTimerGenericCommand+0xa0>)
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	f107 0310 	add.w	r3, r7, #16
 800a744:	4610      	mov	r0, r2
 800a746:	4619      	mov	r1, r3
 800a748:	2200      	movs	r2, #0
 800a74a:	2300      	movs	r3, #0
 800a74c:	f7fe faf8 	bl	8008d40 <xQueueGenericSend>
 800a750:	6278      	str	r0, [r7, #36]	; 0x24
 800a752:	e00a      	b.n	800a76a <xTimerGenericCommand+0x96>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a754:	4b07      	ldr	r3, [pc, #28]	; (800a774 <xTimerGenericCommand+0xa0>)
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	f107 0310 	add.w	r3, r7, #16
 800a75c:	4610      	mov	r0, r2
 800a75e:	4619      	mov	r1, r3
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	2300      	movs	r3, #0
 800a764:	f7fe fc0a 	bl	8008f7c <xQueueGenericSendFromISR>
 800a768:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3728      	adds	r7, #40	; 0x28
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	200007e4 	.word	0x200007e4

0800a778 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b088      	sub	sp, #32
 800a77c:	af02      	add	r7, sp, #8
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a782:	4b22      	ldr	r3, [pc, #136]	; (800a80c <prvProcessExpiredTimer+0x94>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	3304      	adds	r3, #4
 800a790:	4618      	mov	r0, r3
 800a792:	f7fe f9e1 	bl	8008b58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a79c:	f003 0304 	and.w	r3, r3, #4
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d022      	beq.n	800a7ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	699a      	ldr	r2, [r3, #24]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	6978      	ldr	r0, [r7, #20]
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f000 f8d0 	bl	800a958 <prvInsertTimerInActiveList>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d01e      	beq.n	800a7fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7be:	2300      	movs	r3, #0
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	6978      	ldr	r0, [r7, #20]
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	f7ff ff83 	bl	800a6d4 <xTimerGenericCommand>
 800a7ce:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d112      	bne.n	800a7fc <prvProcessExpiredTimer+0x84>
 800a7d6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	60fb      	str	r3, [r7, #12]
 800a7e8:	e7fe      	b.n	800a7e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7f0:	f023 0301 	bic.w	r3, r3, #1
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	6a1b      	ldr	r3, [r3, #32]
 800a800:	6978      	ldr	r0, [r7, #20]
 800a802:	4798      	blx	r3
}
 800a804:	3718      	adds	r7, #24
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	200007dc 	.word	0x200007dc

0800a810 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a818:	f107 0308 	add.w	r3, r7, #8
 800a81c:	4618      	mov	r0, r3
 800a81e:	f000 f857 	bl	800a8d0 <prvGetNextExpireTime>
 800a822:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	4619      	mov	r1, r3
 800a82a:	f000 f803 	bl	800a834 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a82e:	f000 f8d5 	bl	800a9dc <prvProcessReceivedCommands>
	}
 800a832:	e7f1      	b.n	800a818 <prvTimerTask+0x8>

0800a834 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a83e:	f7ff f9e9 	bl	8009c14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a842:	f107 0308 	add.w	r3, r7, #8
 800a846:	4618      	mov	r0, r3
 800a848:	f000 f866 	bl	800a918 <prvSampleTimeNow>
 800a84c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d131      	bne.n	800a8b8 <prvProcessTimerOrBlockTask+0x84>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10a      	bne.n	800a870 <prvProcessTimerOrBlockTask+0x3c>
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d806      	bhi.n	800a870 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a862:	f7ff f9e5 	bl	8009c30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	68f9      	ldr	r1, [r7, #12]
 800a86a:	f7ff ff85 	bl	800a778 <prvProcessExpiredTimer>
 800a86e:	e025      	b.n	800a8bc <prvProcessTimerOrBlockTask+0x88>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d008      	beq.n	800a888 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a876:	4b13      	ldr	r3, [pc, #76]	; (800a8c4 <prvProcessTimerOrBlockTask+0x90>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d101      	bne.n	800a884 <prvProcessTimerOrBlockTask+0x50>
 800a880:	2301      	movs	r3, #1
 800a882:	e000      	b.n	800a886 <prvProcessTimerOrBlockTask+0x52>
 800a884:	2300      	movs	r3, #0
 800a886:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a888:	4b0f      	ldr	r3, [pc, #60]	; (800a8c8 <prvProcessTimerOrBlockTask+0x94>)
 800a88a:	6819      	ldr	r1, [r3, #0]
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	4608      	mov	r0, r1
 800a894:	4619      	mov	r1, r3
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	f7fe fe3e 	bl	8009518 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 800a89c:	f7ff f9c8 	bl	8009c30 <xTaskResumeAll>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d10a      	bne.n	800a8bc <prvProcessTimerOrBlockTask+0x88>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 800a8a6:	4b09      	ldr	r3, [pc, #36]	; (800a8cc <prvProcessTimerOrBlockTask+0x98>)
 800a8a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	e001      	b.n	800a8bc <prvProcessTimerOrBlockTask+0x88>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 800a8b8:	f7ff f9ba 	bl	8009c30 <xTaskResumeAll>
		}
	}
}
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	200007e0 	.word	0x200007e0
 800a8c8:	200007e4 	.word	0x200007e4
 800a8cc:	e000ed04 	.word	0xe000ed04

0800a8d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a8d8:	4b0e      	ldr	r3, [pc, #56]	; (800a914 <prvGetNextExpireTime+0x44>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d101      	bne.n	800a8e6 <prvGetNextExpireTime+0x16>
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	e000      	b.n	800a8e8 <prvGetNextExpireTime+0x18>
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d105      	bne.n	800a900 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8f4:	4b07      	ldr	r3, [pc, #28]	; (800a914 <prvGetNextExpireTime+0x44>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	60fb      	str	r3, [r7, #12]
 800a8fe:	e001      	b.n	800a904 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a900:	2300      	movs	r3, #0
 800a902:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a904:	68fb      	ldr	r3, [r7, #12]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3714      	adds	r7, #20
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	200007dc 	.word	0x200007dc

0800a918 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a920:	f7ff fa24 	bl	8009d6c <xTaskGetTickCount>
 800a924:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a926:	4b0b      	ldr	r3, [pc, #44]	; (800a954 <prvSampleTimeNow+0x3c>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d205      	bcs.n	800a93c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a930:	f000 f936 	bl	800aba0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	e002      	b.n	800a942 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a942:	4a04      	ldr	r2, [pc, #16]	; (800a954 <prvSampleTimeNow+0x3c>)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a948:	68fb      	ldr	r3, [r7, #12]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	200007ec 	.word	0x200007ec

0800a958 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b086      	sub	sp, #24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
 800a964:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a966:	2300      	movs	r3, #0
 800a968:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	68ba      	ldr	r2, [r7, #8]
 800a96e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a976:	68ba      	ldr	r2, [r7, #8]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d812      	bhi.n	800a9a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	1ad2      	subs	r2, r2, r3
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	699b      	ldr	r3, [r3, #24]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d302      	bcc.n	800a992 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a98c:	2301      	movs	r3, #1
 800a98e:	617b      	str	r3, [r7, #20]
 800a990:	e01b      	b.n	800a9ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a992:	4b10      	ldr	r3, [pc, #64]	; (800a9d4 <prvInsertTimerInActiveList+0x7c>)
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	3304      	adds	r3, #4
 800a99a:	4610      	mov	r0, r2
 800a99c:	4619      	mov	r1, r3
 800a99e:	f7fe f8a3 	bl	8008ae8 <vListInsert>
 800a9a2:	e012      	b.n	800a9ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d206      	bcs.n	800a9ba <prvInsertTimerInActiveList+0x62>
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d302      	bcc.n	800a9ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	617b      	str	r3, [r7, #20]
 800a9b8:	e007      	b.n	800a9ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9ba:	4b07      	ldr	r3, [pc, #28]	; (800a9d8 <prvInsertTimerInActiveList+0x80>)
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	3304      	adds	r3, #4
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	f7fe f88f 	bl	8008ae8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a9ca:	697b      	ldr	r3, [r7, #20]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3718      	adds	r7, #24
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	200007e0 	.word	0x200007e0
 800a9d8:	200007dc 	.word	0x200007dc

0800a9dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b08e      	sub	sp, #56	; 0x38
 800a9e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9e2:	e0cb      	b.n	800ab7c <prvProcessReceivedCommands+0x1a0>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	da18      	bge.n	800aa1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a9ea:	1d3b      	adds	r3, r7, #4
 800a9ec:	3304      	adds	r3, #4
 800a9ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d109      	bne.n	800aa0a <prvProcessReceivedCommands+0x2e>
 800a9f6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	61fb      	str	r3, [r7, #28]
 800aa08:	e7fe      	b.n	800aa08 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa10:	6851      	ldr	r1, [r2, #4]
 800aa12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa14:	6892      	ldr	r2, [r2, #8]
 800aa16:	4608      	mov	r0, r1
 800aa18:	4611      	mov	r1, r2
 800aa1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f2c0 80ac 	blt.w	800ab7c <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d004      	beq.n	800aa3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa32:	3304      	adds	r3, #4
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fe f88f 	bl	8008b58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa3a:	463b      	mov	r3, r7
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7ff ff6b 	bl	800a918 <prvSampleTimeNow>
 800aa42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b09      	cmp	r3, #9
 800aa48:	f200 8097 	bhi.w	800ab7a <prvProcessReceivedCommands+0x19e>
 800aa4c:	a201      	add	r2, pc, #4	; (adr r2, 800aa54 <prvProcessReceivedCommands+0x78>)
 800aa4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa52:	bf00      	nop
 800aa54:	0800aa7d 	.word	0x0800aa7d
 800aa58:	0800aa7d 	.word	0x0800aa7d
 800aa5c:	0800aa7d 	.word	0x0800aa7d
 800aa60:	0800aaf3 	.word	0x0800aaf3
 800aa64:	0800ab07 	.word	0x0800ab07
 800aa68:	0800ab51 	.word	0x0800ab51
 800aa6c:	0800aa7d 	.word	0x0800aa7d
 800aa70:	0800aa7d 	.word	0x0800aa7d
 800aa74:	0800aaf3 	.word	0x0800aaf3
 800aa78:	0800ab07 	.word	0x0800ab07
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa82:	f043 0301 	orr.w	r3, r3, #1
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	699b      	ldr	r3, [r3, #24]
 800aa94:	441a      	add	r2, r3
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa9e:	f7ff ff5b 	bl	800a958 <prvInsertTimerInActiveList>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d023      	beq.n	800aaf0 <prvProcessReceivedCommands+0x114>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaaa:	6a1b      	ldr	r3, [r3, #32]
 800aaac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aab6:	f003 0304 	and.w	r3, r3, #4
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d018      	beq.n	800aaf0 <prvProcessReceivedCommands+0x114>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	699b      	ldr	r3, [r3, #24]
 800aac4:	441a      	add	r2, r3
 800aac6:	2300      	movs	r3, #0
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aacc:	2100      	movs	r1, #0
 800aace:	2300      	movs	r3, #0
 800aad0:	f7ff fe00 	bl	800a6d4 <xTimerGenericCommand>
 800aad4:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aad6:	6a3b      	ldr	r3, [r7, #32]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d109      	bne.n	800aaf0 <prvProcessReceivedCommands+0x114>
 800aadc:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800aae0:	f383 8811 	msr	BASEPRI, r3
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	61bb      	str	r3, [r7, #24]
 800aaee:	e7fe      	b.n	800aaee <prvProcessReceivedCommands+0x112>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 800aaf0:	e044      	b.n	800ab7c <prvProcessReceivedCommands+0x1a0>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aaf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaf8:	f023 0301 	bic.w	r3, r3, #1
 800aafc:	b2da      	uxtb	r2, r3
 800aafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ab04:	e03a      	b.n	800ab7c <prvProcessReceivedCommands+0x1a0>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab0c:	f043 0301 	orr.w	r3, r3, #1
 800ab10:	b2da      	uxtb	r2, r3
 800ab12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab18:	68ba      	ldr	r2, [r7, #8]
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab20:	699b      	ldr	r3, [r3, #24]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d109      	bne.n	800ab3a <prvProcessReceivedCommands+0x15e>
 800ab26:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800ab2a:	f383 8811 	msr	BASEPRI, r3
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	617b      	str	r3, [r7, #20]
 800ab38:	e7fe      	b.n	800ab38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3c:	699a      	ldr	r2, [r3, #24]
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab40:	4413      	add	r3, r2
 800ab42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab44:	4619      	mov	r1, r3
 800ab46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4a:	f7ff ff05 	bl	800a958 <prvInsertTimerInActiveList>
					break;
 800ab4e:	e015      	b.n	800ab7c <prvProcessReceivedCommands+0x1a0>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab56:	f003 0302 	and.w	r3, r3, #2
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d103      	bne.n	800ab66 <prvProcessReceivedCommands+0x18a>
						{
							vPortFree( pxTimer );
 800ab5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab60:	f7fd ff60 	bl	8008a24 <vPortFree>
 800ab64:	e008      	b.n	800ab78 <prvProcessReceivedCommands+0x19c>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab6c:	f023 0301 	bic.w	r3, r3, #1
 800ab70:	b2da      	uxtb	r2, r3
 800ab72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab78:	e000      	b.n	800ab7c <prvProcessReceivedCommands+0x1a0>

				default	:
					/* Don't expect to get here. */
					break;
 800ab7a:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab7c:	4b07      	ldr	r3, [pc, #28]	; (800ab9c <prvProcessReceivedCommands+0x1c0>)
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	1d3b      	adds	r3, r7, #4
 800ab82:	4610      	mov	r0, r2
 800ab84:	4619      	mov	r1, r3
 800ab86:	2200      	movs	r2, #0
 800ab88:	f7fe fa9e 	bl	80090c8 <xQueueReceive>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f47f af28 	bne.w	800a9e4 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 800ab94:	3730      	adds	r7, #48	; 0x30
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	200007e4 	.word	0x200007e4

0800aba0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b088      	sub	sp, #32
 800aba4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aba6:	e047      	b.n	800ac38 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aba8:	4b2c      	ldr	r3, [pc, #176]	; (800ac5c <prvSwitchTimerLists+0xbc>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abb2:	4b2a      	ldr	r3, [pc, #168]	; (800ac5c <prvSwitchTimerLists+0xbc>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	3304      	adds	r3, #4
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7fd ffc9 	bl	8008b58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	6938      	ldr	r0, [r7, #16]
 800abcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abd4:	f003 0304 	and.w	r3, r3, #4
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d02d      	beq.n	800ac38 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	699a      	ldr	r2, [r3, #24]
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	4413      	add	r3, r2
 800abe4:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	429a      	cmp	r2, r3
 800abec:	d90e      	bls.n	800ac0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	693a      	ldr	r2, [r7, #16]
 800abf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abfa:	4b18      	ldr	r3, [pc, #96]	; (800ac5c <prvSwitchTimerLists+0xbc>)
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	3304      	adds	r3, #4
 800ac02:	4610      	mov	r0, r2
 800ac04:	4619      	mov	r1, r3
 800ac06:	f7fd ff6f 	bl	8008ae8 <vListInsert>
 800ac0a:	e015      	b.n	800ac38 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	6938      	ldr	r0, [r7, #16]
 800ac12:	2100      	movs	r1, #0
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	2300      	movs	r3, #0
 800ac18:	f7ff fd5c 	bl	800a6d4 <xTimerGenericCommand>
 800ac1c:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d109      	bne.n	800ac38 <prvSwitchTimerLists+0x98>
 800ac24:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	603b      	str	r3, [r7, #0]
 800ac36:	e7fe      	b.n	800ac36 <prvSwitchTimerLists+0x96>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac38:	4b08      	ldr	r3, [pc, #32]	; (800ac5c <prvSwitchTimerLists+0xbc>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1b2      	bne.n	800aba8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ac42:	4b06      	ldr	r3, [pc, #24]	; (800ac5c <prvSwitchTimerLists+0xbc>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800ac48:	4b05      	ldr	r3, [pc, #20]	; (800ac60 <prvSwitchTimerLists+0xc0>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a03      	ldr	r2, [pc, #12]	; (800ac5c <prvSwitchTimerLists+0xbc>)
 800ac4e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac50:	4a03      	ldr	r2, [pc, #12]	; (800ac60 <prvSwitchTimerLists+0xc0>)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6013      	str	r3, [r2, #0]
}
 800ac56:	3718      	adds	r7, #24
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	200007dc 	.word	0x200007dc
 800ac60:	200007e0 	.word	0x200007e0

0800ac64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac68:	f7fd fdb4 	bl	80087d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac6c:	4b12      	ldr	r3, [pc, #72]	; (800acb8 <prvCheckForValidListAndQueue+0x54>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d11d      	bne.n	800acb0 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac74:	4811      	ldr	r0, [pc, #68]	; (800acbc <prvCheckForValidListAndQueue+0x58>)
 800ac76:	f7fd fee7 	bl	8008a48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac7a:	4811      	ldr	r0, [pc, #68]	; (800acc0 <prvCheckForValidListAndQueue+0x5c>)
 800ac7c:	f7fd fee4 	bl	8008a48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac80:	4b10      	ldr	r3, [pc, #64]	; (800acc4 <prvCheckForValidListAndQueue+0x60>)
 800ac82:	4a0e      	ldr	r2, [pc, #56]	; (800acbc <prvCheckForValidListAndQueue+0x58>)
 800ac84:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac86:	4b10      	ldr	r3, [pc, #64]	; (800acc8 <prvCheckForValidListAndQueue+0x64>)
 800ac88:	4a0d      	ldr	r2, [pc, #52]	; (800acc0 <prvCheckForValidListAndQueue+0x5c>)
 800ac8a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ac8c:	2005      	movs	r0, #5
 800ac8e:	2110      	movs	r1, #16
 800ac90:	2200      	movs	r2, #0
 800ac92:	f7fd fff3 	bl	8008c7c <xQueueGenericCreate>
 800ac96:	4602      	mov	r2, r0
 800ac98:	4b07      	ldr	r3, [pc, #28]	; (800acb8 <prvCheckForValidListAndQueue+0x54>)
 800ac9a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac9c:	4b06      	ldr	r3, [pc, #24]	; (800acb8 <prvCheckForValidListAndQueue+0x54>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d005      	beq.n	800acb0 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aca4:	4b04      	ldr	r3, [pc, #16]	; (800acb8 <prvCheckForValidListAndQueue+0x54>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4618      	mov	r0, r3
 800acaa:	4908      	ldr	r1, [pc, #32]	; (800accc <prvCheckForValidListAndQueue+0x68>)
 800acac:	f7fe fc0c 	bl	80094c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acb0:	f7fd fdbe 	bl	8008830 <vPortExitCritical>
}
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	200007e4 	.word	0x200007e4
 800acbc:	200007b4 	.word	0x200007b4
 800acc0:	200007c8 	.word	0x200007c8
 800acc4:	200007dc 	.word	0x200007dc
 800acc8:	200007e0 	.word	0x200007e0
 800accc:	0800f628 	.word	0x0800f628

0800acd0 <EVENT_GENERATOR_Init>:

/*
 * This function Initializes a EVENT_GENERATOR APP instances based on user configuration.
 */
EVENT_GENERATOR_STATUS_t EVENT_GENERATOR_Init(EVENT_GENERATOR_t *const handle)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_GENERATOR_Init:handle NULL" , (handle != NULL));
  
  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	7b5b      	ldrb	r3, [r3, #13]
 800acdc:	f083 0301 	eor.w	r3, r3, #1
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d012      	beq.n	800ad0c <EVENT_GENERATOR_Init+0x3c>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_OGU_Init(handle->eru, handle->channel, handle->config);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6819      	ldr	r1, [r3, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	7b1a      	ldrb	r2, [r3, #12]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	4608      	mov	r0, r1
 800acf4:	4611      	mov	r1, r2
 800acf6:	461a      	mov	r2, r3
 800acf8:	f7fc fde4 	bl	80078c4 <XMC_ERU_OGU_Init>
    #if (EVENT_GENERATOR_NMI_SUPPORTED == 1U)
    /* Promote the eru event as NMI, Applicable only for XMC4000 devices */
    XMC_SCU_INTERRUPT_EnableNmiRequest(handle->nmi_eru_msk);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fb fdb7 	bl	8006874 <XMC_SCU_INTERRUPT_EnableNmiRequest>
    #endif
    /* Update the init status of the instance */
    handle->init_status = true;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	735a      	strb	r2, [r3, #13]
  }
  
  return EVENT_GENERATOR_STATUS_SUCCESS;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop

0800ad18 <EVENT_DETECTOR_Init>:

/*
 * This function Initializes a EVENT_DETECTOR APP instances (ERSx+ETLx) based on user configuration.
 */
EVENT_DETECTOR_STATUS_t EVENT_DETECTOR_Init(EVENT_DETECTOR_t *const handle)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_DETECTOR_Init:handle NULL" , (handle != NULL));

  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	7b1b      	ldrb	r3, [r3, #12]
 800ad24:	f083 0301 	eor.w	r3, r3, #1
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00d      	beq.n	800ad4a <EVENT_DETECTOR_Init+0x32>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_ETL_Init(handle->eru, handle->channel, handle->config);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6819      	ldr	r1, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	791a      	ldrb	r2, [r3, #4]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	4608      	mov	r0, r1
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	461a      	mov	r2, r3
 800ad40:	f7fc fd9a 	bl	8007878 <XMC_ERU_ETL_Init>
    /* Update the init status of the instance */
    handle->init_status = true;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2201      	movs	r2, #1
 800ad48:	731a      	strb	r2, [r3, #12]
  }
  
  return EVENT_DETECTOR_STATUS_SUCCESS;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6819      	ldr	r1, [r3, #0]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	7c1a      	ldrb	r2, [r3, #16]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	3304      	adds	r3, #4
 800ad68:	4608      	mov	r0, r1
 800ad6a:	4611      	mov	r1, r2
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	f7fb fbff 	bl	8006570 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6819      	ldr	r1, [r3, #0]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	7c1a      	ldrb	r2, [r3, #16]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	7c5b      	ldrb	r3, [r3, #17]
 800ad7e:	4608      	mov	r0, r1
 800ad80:	4611      	mov	r1, r2
 800ad82:	461a      	mov	r2, r3
 800ad84:	f7fc fdb2 	bl	80078ec <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop

0800ad94 <__HardFault_Handler>:
 */
#if defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#endif
__attribute__((naked)) void __HardFault_Handler(uint32_t args[])
{
 800ad94:	4603      	mov	r3, r0

  // Configurable Fault Status Register
  // Consists of MMSR, BFSR and UFSR
  _CFSR = SCB->CFSR;
 800ad96:	4a18      	ldr	r2, [pc, #96]	; (800adf8 <__HardFault_Handler+0x64>)
 800ad98:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ad9a:	4918      	ldr	r1, [pc, #96]	; (800adfc <__HardFault_Handler+0x68>)
 800ad9c:	600a      	str	r2, [r1, #0]

  // Hard Fault Status Register
  _HFSR = SCB->HFSR;
 800ad9e:	4a16      	ldr	r2, [pc, #88]	; (800adf8 <__HardFault_Handler+0x64>)
 800ada0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ada2:	4917      	ldr	r1, [pc, #92]	; (800ae00 <__HardFault_Handler+0x6c>)
 800ada4:	600a      	str	r2, [r1, #0]

  // Debug Fault Status Register
  _DFSR = SCB->DFSR;
 800ada6:	4a14      	ldr	r2, [pc, #80]	; (800adf8 <__HardFault_Handler+0x64>)
 800ada8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800adaa:	4916      	ldr	r1, [pc, #88]	; (800ae04 <__HardFault_Handler+0x70>)
 800adac:	600a      	str	r2, [r1, #0]

  // Auxiliary Fault Status Register
  _AFSR = SCB->AFSR;
 800adae:	4a12      	ldr	r2, [pc, #72]	; (800adf8 <__HardFault_Handler+0x64>)
 800adb0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800adb2:	4915      	ldr	r1, [pc, #84]	; (800ae08 <__HardFault_Handler+0x74>)
 800adb4:	600a      	str	r2, [r1, #0]

  // Read the Fault Address Registers. These may not contain valid values.
  // Check BFARVALID/MMARVALID to see if they are valid values
  // MemManage Fault Address Register
  _MMAR = SCB->MMFAR;
 800adb6:	4a10      	ldr	r2, [pc, #64]	; (800adf8 <__HardFault_Handler+0x64>)
 800adb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800adba:	4914      	ldr	r1, [pc, #80]	; (800ae0c <__HardFault_Handler+0x78>)
 800adbc:	600a      	str	r2, [r1, #0]

  // Bus Fault Address Register
  _BFAR = SCB->BFAR;
 800adbe:	4a0e      	ldr	r2, [pc, #56]	; (800adf8 <__HardFault_Handler+0x64>)
 800adc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800adc2:	4913      	ldr	r1, [pc, #76]	; (800ae10 <__HardFault_Handler+0x7c>)
 800adc4:	600a      	str	r2, [r1, #0]

  stacked_r0 = ((uint32_t)args[0]);
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	4912      	ldr	r1, [pc, #72]	; (800ae14 <__HardFault_Handler+0x80>)
 800adca:	600a      	str	r2, [r1, #0]
  stacked_r1 = ((uint32_t)args[1]);
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	4912      	ldr	r1, [pc, #72]	; (800ae18 <__HardFault_Handler+0x84>)
 800add0:	600a      	str	r2, [r1, #0]
  stacked_r2 = ((uint32_t)args[2]);
 800add2:	689a      	ldr	r2, [r3, #8]
 800add4:	4911      	ldr	r1, [pc, #68]	; (800ae1c <__HardFault_Handler+0x88>)
 800add6:	600a      	str	r2, [r1, #0]
  stacked_r3 = ((uint32_t)args[3]);
 800add8:	68da      	ldr	r2, [r3, #12]
 800adda:	4911      	ldr	r1, [pc, #68]	; (800ae20 <__HardFault_Handler+0x8c>)
 800addc:	600a      	str	r2, [r1, #0]
  stacked_r12 = ((uint32_t)args[4]);
 800adde:	691a      	ldr	r2, [r3, #16]
 800ade0:	4910      	ldr	r1, [pc, #64]	; (800ae24 <__HardFault_Handler+0x90>)
 800ade2:	600a      	str	r2, [r1, #0]
  stacked_lr = ((uint32_t)args[5]);
 800ade4:	695a      	ldr	r2, [r3, #20]
 800ade6:	4910      	ldr	r1, [pc, #64]	; (800ae28 <__HardFault_Handler+0x94>)
 800ade8:	600a      	str	r2, [r1, #0]
  stacked_pc = ((uint32_t)args[6]);
 800adea:	699a      	ldr	r2, [r3, #24]
 800adec:	490f      	ldr	r1, [pc, #60]	; (800ae2c <__HardFault_Handler+0x98>)
 800adee:	600a      	str	r2, [r1, #0]
  stacked_psr = ((uint32_t)args[7]);
 800adf0:	69db      	ldr	r3, [r3, #28]
 800adf2:	4a0f      	ldr	r2, [pc, #60]	; (800ae30 <__HardFault_Handler+0x9c>)
 800adf4:	6013      	str	r3, [r2, #0]

  __asm("BKPT 0\n") ; // Break into the debugger
 800adf6:	be00      	bkpt	0x0000
 800adf8:	e000ed00 	.word	0xe000ed00
 800adfc:	2000129c 	.word	0x2000129c
 800ae00:	200012c0 	.word	0x200012c0
 800ae04:	200012c8 	.word	0x200012c8
 800ae08:	200012c4 	.word	0x200012c4
 800ae0c:	200012b4 	.word	0x200012b4
 800ae10:	20001294 	.word	0x20001294
 800ae14:	200012ac 	.word	0x200012ac
 800ae18:	20001298 	.word	0x20001298
 800ae1c:	200012bc 	.word	0x200012bc
 800ae20:	200012a0 	.word	0x200012a0
 800ae24:	200012b0 	.word	0x200012b0
 800ae28:	200012a4 	.word	0x200012a4
 800ae2c:	200012a8 	.word	0x200012a8
 800ae30:	200012b8 	.word	0x200012b8

0800ae34 <HardFault_Handler>:

/*GCC*/
#if defined(__GNUC__)
__attribute__((naked)) void HardFault_Handler(void)
{
__asm("  TST    LR, #4  \n"
 800ae34:	f01e 0f04 	tst.w	lr, #4
 800ae38:	bf0c      	ite	eq
 800ae3a:	f3ef 8008 	mrseq	r0, MSP
 800ae3e:	f3ef 8009 	mrsne	r0, PSP
 800ae42:	f7ff bfa7 	b.w	800ad94 <__HardFault_Handler>
 800ae46:	bf00      	nop

0800ae48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f003 0307 	and.w	r3, r3, #7
 800ae56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ae58:	4b0c      	ldr	r3, [pc, #48]	; (800ae8c <__NVIC_SetPriorityGrouping+0x44>)
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ae64:	4013      	ands	r3, r2
 800ae66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800ae70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ae74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae78:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800ae7a:	4a04      	ldr	r2, [pc, #16]	; (800ae8c <__NVIC_SetPriorityGrouping+0x44>)
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	60d3      	str	r3, [r2, #12]
}
 800ae80:	3714      	adds	r7, #20
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	e000ed00 	.word	0xe000ed00

0800ae90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ae90:	b480      	push	{r7}
 800ae92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ae94:	4b04      	ldr	r3, [pc, #16]	; (800aea8 <__NVIC_GetPriorityGrouping+0x18>)
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae9c:	0a1b      	lsrs	r3, r3, #8
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	e000ed00 	.word	0xe000ed00

0800aeac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	6039      	str	r1, [r7, #0]
 800aeb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aeb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	db0a      	blt.n	800aed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aec0:	490d      	ldr	r1, [pc, #52]	; (800aef8 <__NVIC_SetPriority+0x4c>)
 800aec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	b2d2      	uxtb	r2, r2
 800aeca:	0092      	lsls	r2, r2, #2
 800aecc:	b2d2      	uxtb	r2, r2
 800aece:	440b      	add	r3, r1
 800aed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800aed4:	e00a      	b.n	800aeec <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aed6:	4909      	ldr	r1, [pc, #36]	; (800aefc <__NVIC_SetPriority+0x50>)
 800aed8:	79fb      	ldrb	r3, [r7, #7]
 800aeda:	f003 030f 	and.w	r3, r3, #15
 800aede:	3b04      	subs	r3, #4
 800aee0:	683a      	ldr	r2, [r7, #0]
 800aee2:	b2d2      	uxtb	r2, r2
 800aee4:	0092      	lsls	r2, r2, #2
 800aee6:	b2d2      	uxtb	r2, r2
 800aee8:	440b      	add	r3, r1
 800aeea:	761a      	strb	r2, [r3, #24]
  }
}
 800aeec:	370c      	adds	r7, #12
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	e000e100 	.word	0xe000e100
 800aefc:	e000ed00 	.word	0xe000ed00

0800af00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800af00:	b480      	push	{r7}
 800af02:	b089      	sub	sp, #36	; 0x24
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f003 0307 	and.w	r3, r3, #7
 800af12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	f1c3 0307 	rsb	r3, r3, #7
 800af1a:	2b06      	cmp	r3, #6
 800af1c:	bf28      	it	cs
 800af1e:	2306      	movcs	r3, #6
 800af20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800af22:	69fb      	ldr	r3, [r7, #28]
 800af24:	3306      	adds	r3, #6
 800af26:	2b06      	cmp	r3, #6
 800af28:	d902      	bls.n	800af30 <NVIC_EncodePriority+0x30>
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	3b01      	subs	r3, #1
 800af2e:	e000      	b.n	800af32 <NVIC_EncodePriority+0x32>
 800af30:	2300      	movs	r3, #0
 800af32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	2201      	movs	r2, #1
 800af38:	fa02 f303 	lsl.w	r3, r2, r3
 800af3c:	1e5a      	subs	r2, r3, #1
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	401a      	ands	r2, r3
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	2101      	movs	r1, #1
 800af4a:	fa01 f303 	lsl.w	r3, r1, r3
 800af4e:	1e59      	subs	r1, r3, #1
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800af54:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800af56:	4618      	mov	r0, r3
 800af58:	3724      	adds	r7, #36	; 0x24
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop

0800af64 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800af6a:	2001      	movs	r0, #1
 800af6c:	f7ff ff6c 	bl	800ae48 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800af70:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 800af72:	4b36      	ldr	r3, [pc, #216]	; (800b04c <SystemCoreSetup+0xe8>)
 800af74:	4a36      	ldr	r2, [pc, #216]	; (800b050 <SystemCoreSetup+0xec>)
 800af76:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800af78:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800af7c:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800af7e:	4a33      	ldr	r2, [pc, #204]	; (800b04c <SystemCoreSetup+0xe8>)
 800af80:	4b32      	ldr	r3, [pc, #200]	; (800b04c <SystemCoreSetup+0xe8>)
 800af82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800af8e:	4b31      	ldr	r3, [pc, #196]	; (800b054 <SystemCoreSetup+0xf0>)
 800af90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af94:	3314      	adds	r3, #20
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f023 030f 	bic.w	r3, r3, #15
 800afa0:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f043 0303 	orr.w	r3, r3, #3
 800afa8:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800afaa:	4b2a      	ldr	r3, [pc, #168]	; (800b054 <SystemCoreSetup+0xf0>)
 800afac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afb0:	3314      	adds	r3, #20
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	601a      	str	r2, [r3, #0]


  /* Enable divide by zero trap */
  SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk; 
 800afb6:	4a25      	ldr	r2, [pc, #148]	; (800b04c <SystemCoreSetup+0xe8>)
 800afb8:	4b24      	ldr	r3, [pc, #144]	; (800b04c <SystemCoreSetup+0xe8>)
 800afba:	695b      	ldr	r3, [r3, #20]
 800afbc:	f043 0310 	orr.w	r3, r3, #16
 800afc0:	6153      	str	r3, [r2, #20]

  /* Enable unaligned memory access trap */
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk; 
 800afc2:	4a22      	ldr	r2, [pc, #136]	; (800b04c <SystemCoreSetup+0xe8>)
 800afc4:	4b21      	ldr	r3, [pc, #132]	; (800b04c <SystemCoreSetup+0xe8>)
 800afc6:	695b      	ldr	r3, [r3, #20]
 800afc8:	f043 0308 	orr.w	r3, r3, #8
 800afcc:	6153      	str	r3, [r2, #20]

  /* Set priority of memory managment fault */
  NVIC_SetPriority((IRQn_Type)MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0,0));
 800afce:	f7ff ff5f 	bl	800ae90 <__NVIC_GetPriorityGrouping>
 800afd2:	4603      	mov	r3, r0
 800afd4:	4618      	mov	r0, r3
 800afd6:	2100      	movs	r1, #0
 800afd8:	2200      	movs	r2, #0
 800afda:	f7ff ff91 	bl	800af00 <NVIC_EncodePriority>
 800afde:	4603      	mov	r3, r0
 800afe0:	f06f 000b 	mvn.w	r0, #11
 800afe4:	4619      	mov	r1, r3
 800afe6:	f7ff ff61 	bl	800aeac <__NVIC_SetPriority>
  /* Enable memory management fault */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800afea:	4a18      	ldr	r2, [pc, #96]	; (800b04c <SystemCoreSetup+0xe8>)
 800afec:	4b17      	ldr	r3, [pc, #92]	; (800b04c <SystemCoreSetup+0xe8>)
 800afee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aff4:	6253      	str	r3, [r2, #36]	; 0x24


  /* Set priority of bus fault */
  NVIC_SetPriority((IRQn_Type)BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0,0));
 800aff6:	f7ff ff4b 	bl	800ae90 <__NVIC_GetPriorityGrouping>
 800affa:	4603      	mov	r3, r0
 800affc:	4618      	mov	r0, r3
 800affe:	2100      	movs	r1, #0
 800b000:	2200      	movs	r2, #0
 800b002:	f7ff ff7d 	bl	800af00 <NVIC_EncodePriority>
 800b006:	4603      	mov	r3, r0
 800b008:	f06f 000a 	mvn.w	r0, #10
 800b00c:	4619      	mov	r1, r3
 800b00e:	f7ff ff4d 	bl	800aeac <__NVIC_SetPriority>
  /* Enable bus fault */
  SCB->SHCSR |= SCB_SHCSR_BUSFAULTENA_Msk;
 800b012:	4a0e      	ldr	r2, [pc, #56]	; (800b04c <SystemCoreSetup+0xe8>)
 800b014:	4b0d      	ldr	r3, [pc, #52]	; (800b04c <SystemCoreSetup+0xe8>)
 800b016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b01c:	6253      	str	r3, [r2, #36]	; 0x24
 

  /* Set priority of usage fault */
  NVIC_SetPriority((IRQn_Type)UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0,0));
 800b01e:	f7ff ff37 	bl	800ae90 <__NVIC_GetPriorityGrouping>
 800b022:	4603      	mov	r3, r0
 800b024:	4618      	mov	r0, r3
 800b026:	2100      	movs	r1, #0
 800b028:	2200      	movs	r2, #0
 800b02a:	f7ff ff69 	bl	800af00 <NVIC_EncodePriority>
 800b02e:	4603      	mov	r3, r0
 800b030:	f06f 0009 	mvn.w	r0, #9
 800b034:	4619      	mov	r1, r3
 800b036:	f7ff ff39 	bl	800aeac <__NVIC_SetPriority>
  /* Enable usage fault */
  SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk;
 800b03a:	4a04      	ldr	r2, [pc, #16]	; (800b04c <SystemCoreSetup+0xe8>)
 800b03c:	4b03      	ldr	r3, [pc, #12]	; (800b04c <SystemCoreSetup+0xe8>)
 800b03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b044:	6253      	str	r3, [r2, #36]	; 0x24
  
}
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	e000ed00 	.word	0xe000ed00
 800b050:	08000000 	.word	0x08000000
 800b054:	58001000 	.word	0x58001000

0800b058 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 800b060:	2300      	movs	r3, #0
 800b062:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	701a      	strb	r2, [r3, #0]

  return (status);
 800b06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3714      	adds	r7, #20
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 800b078:	b480      	push	{r7}
 800b07a:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 800b07c:	4b02      	ldr	r3, [pc, #8]	; (800b088 <OSCHP_GetFrequency+0x10>)
}
 800b07e:	4618      	mov	r0, r3
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr
 800b088:	00b71b00 	.word	0x00b71b00

0800b08c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 800b08c:	b5b0      	push	{r4, r5, r7, lr}
 800b08e:	b086      	sub	sp, #24
 800b090:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 800b092:	4b12      	ldr	r3, [pc, #72]	; (800b0dc <SystemCoreClockSetup+0x50>)
 800b094:	1d3c      	adds	r4, r7, #4
 800b096:	461d      	mov	r5, r3
 800b098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b09a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b09c:	682b      	ldr	r3, [r5, #0]
 800b09e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 800b0a0:	1d3b      	adds	r3, r7, #4
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fb fb70 	bl	8006788 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	f7fb fc7d 	bl	80069a8 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	f7fb fc32 	bl	8006918 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 800b0b4:	2004      	movs	r0, #4
 800b0b6:	f7fb fd03 	bl	8006ac0 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800b0ba:	2001      	movs	r0, #1
 800b0bc:	2120      	movs	r1, #32
 800b0be:	f7fb fd4b 	bl	8006b58 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 800b0c2:	2000      	movs	r0, #0
 800b0c4:	f7fb fc3c 	bl	8006940 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 800b0c8:	2001      	movs	r0, #1
 800b0ca:	f7fb fd21 	bl	8006b10 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800b0ce:	2001      	movs	r0, #1
 800b0d0:	f7fb fd0a 	bl	8006ae8 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 800b0d4:	3718      	adds	r7, #24
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bdb0      	pop	{r4, r5, r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	0800f6a0 	.word	0x0800f6a0

0800b0e0 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
                                          const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
                                          const uint32_t service_request)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	607a      	str	r2, [r7, #4]
 800b0ec:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	689a      	ldr	r2, [r3, #8]
 800b0f2:	7afb      	ldrb	r3, [r7, #11]
 800b0f4:	2107      	movs	r1, #7
 800b0f6:	fa01 f303 	lsl.w	r3, r1, r3
 800b0fa:	43db      	mvns	r3, r3
 800b0fc:	401a      	ands	r2, r3
 800b0fe:	7afb      	ldrb	r3, [r7, #11]
 800b100:	6879      	ldr	r1, [r7, #4]
 800b102:	fa01 f303 	lsl.w	r3, r1, r3
 800b106:	431a      	orrs	r2, r3
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	609a      	str	r2, [r3, #8]
}
 800b10c:	3714      	adds	r7, #20
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop

0800b118 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	460b      	mov	r3, r1
 800b122:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 800b12c:	78fb      	ldrb	r3, [r7, #3]
 800b12e:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 800b132:	431a      	orrs	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop

0800b144 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	60da      	str	r2, [r3, #12]
}
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop

0800b164 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	601a      	str	r2, [r3, #0]
}
 800b178:	370c      	adds	r7, #12
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop

0800b184 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	601a      	str	r2, [r3, #0]
}
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop

0800b1a4 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f043 0201 	orr.w	r2, r3, #1
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	601a      	str	r2, [r3, #0]
}
 800b1b8:	370c      	adds	r7, #12
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop

0800b1c4 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f023 0201 	bic.w	r2, r3, #1
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	601a      	str	r2, [r3, #0]
}
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop

0800b1e4 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	607a      	str	r2, [r7, #4]
 800b1f0:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	6812      	ldr	r2, [r2, #0]
 800b1fa:	6891      	ldr	r1, [r2, #8]
 800b1fc:	7afa      	ldrb	r2, [r7, #11]
 800b1fe:	2007      	movs	r0, #7
 800b200:	fa00 f202 	lsl.w	r2, r0, r2
 800b204:	43d2      	mvns	r2, r2
 800b206:	4011      	ands	r1, r2
                          (service_request << (uint32_t)can_mo_ptr_int);
 800b208:	7afa      	ldrb	r2, [r7, #11]
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 800b210:	430a      	orrs	r2, r1
 800b212:	609a      	str	r2, [r3, #8]
                          (service_request << (uint32_t)can_mo_ptr_int);
}
 800b214:	3714      	adds	r7, #20
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop

0800b220 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
                                        const uint32_t event)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	6812      	ldr	r2, [r2, #0]
 800b232:	6811      	ldr	r1, [r2, #0]
 800b234:	683a      	ldr	r2, [r7, #0]
 800b236:	430a      	orrs	r2, r1
 800b238:	601a      	str	r2, [r3, #0]
}
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <CAN_NODE_MO_EnableTxEvent>:
 *     return (1);
 *  }
 *  @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4618      	mov	r0, r3
 800b252:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800b256:	f7ff ffe3 	bl	800b220 <XMC_CAN_MO_EnableEvent>
}
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <CAN_NODE_MO_EnableRxEvent>:
 *  }
 *  @endcode
 */

__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4618      	mov	r0, r3
 800b26e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b272:	f7ff ffd5 	bl	800b220 <XMC_CAN_MO_EnableEvent>
}
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 800b284:	2300      	movs	r3, #0
 800b286:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 f831 	bl	800b2f0 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800b294:	2b00      	cmp	r3, #0
 800b296:	d003      	beq.n	800b2a0 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f043 0302 	orr.w	r3, r3, #2
 800b29e:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d003      	beq.n	800b2b2 <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f043 0304 	orr.w	r3, r3, #4
 800b2b0:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d003      	beq.n	800b2c4 <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f043 0308 	orr.w	r3, r3, #8
 800b2c2:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	68f9      	ldr	r1, [r7, #12]
 800b2cc:	f7fc f9c0 	bl	8007650 <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d006      	beq.n	800b2e8 <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b2e4:	f7fc f9b4 	bl	8007650 <XMC_CAN_NODE_EnableEvent>
  }

}
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop

0800b2f0 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b302:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 800b304:	4610      	mov	r0, r2
 800b306:	2100      	movs	r1, #0
 800b308:	461a      	mov	r2, r3
 800b30a:	f7ff fee9 	bl	800b0e0 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b318:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 800b31a:	4610      	mov	r0, r2
 800b31c:	2104      	movs	r1, #4
 800b31e:	461a      	mov	r2, r3
 800b320:	f7ff fede 	bl	800b0e0 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b32e:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 800b330:	4610      	mov	r0, r2
 800b332:	2108      	movs	r1, #8
 800b334:	461a      	mov	r2, r3
 800b336:	f7ff fed3 	bl	800b0e0 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b344:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 800b346:	4610      	mov	r0, r2
 800b348:	210c      	movs	r1, #12
 800b34a:	461a      	mov	r2, r3
 800b34c:	f7ff fec8 	bl	800b0e0 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 800b350:	3708      	adds	r7, #8
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop

0800b358 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4618      	mov	r0, r3
 800b366:	f7fb ffa1 	bl	80072ac <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	79db      	ldrb	r3, [r3, #7]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00b      	beq.n	800b38a <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	795b      	ldrb	r3, [r3, #5]
 800b37a:	4610      	mov	r0, r2
 800b37c:	2104      	movs	r1, #4
 800b37e:	461a      	mov	r2, r3
 800b380:	f7ff ff30 	bl	800b1e4 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f7ff ff5d 	bl	800b244 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	7a1b      	ldrb	r3, [r3, #8]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d00b      	beq.n	800b3aa <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	799b      	ldrb	r3, [r3, #6]
 800b39a:	4610      	mov	r0, r2
 800b39c:	2100      	movs	r1, #0
 800b39e:	461a      	mov	r2, r3
 800b3a0:	f7ff ff20 	bl	800b1e4 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f7ff ff5b 	bl	800b260 <CAN_NODE_MO_EnableRxEvent>
  }

}
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7fc f847 	bl	8007454 <XMC_CAN_MO_Transmit>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	73fb      	strb	r3, [r7, #15]
  return (status);
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fc f863 	bl	80074b0 <XMC_CAN_MO_Receive>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	73fb      	strb	r3, [r7, #15]
  return (status);
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800b402:	2300      	movs	r3, #0
 800b404:	73fb      	strb	r3, [r7, #15]
  uint32_t *data_pointer = (uint32_t*) array_data;
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	6812      	ldr	r2, [r2, #0]
 800b412:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	68ba      	ldr	r2, [r7, #8]
 800b41a:	6852      	ldr	r2, [r2, #4]
 800b41c:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4618      	mov	r0, r3
 800b424:	f7fb ffde 	bl	80073e4 <XMC_CAN_MO_UpdateData>
 800b428:	4603      	mov	r3, r0
 800b42a:	73fb      	strb	r3, [r7, #15]
  return (status);
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop

0800b438 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800b440:	2300      	movs	r3, #0
 800b442:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b44a:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4618      	mov	r0, r3
 800b452:	f7fd f807 	bl	8008464 <GLOBAL_CAN_Init>
 800b456:	4603      	mov	r3, r0
 800b458:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 800b45a:	7dfb      	ldrb	r3, [r7, #23]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f040 8082 	bne.w	800b566 <CAN_NODE_Init+0x12e>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	685a      	ldr	r2, [r3, #4]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	4610      	mov	r0, r2
 800b46c:	4619      	mov	r1, r3
 800b46e:	f7fb fde7 	bl	8007040 <XMC_CAN_NODE_NominalBitTimeConfigureEx>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d173      	bne.n	800b560 <CAN_NODE_Init+0x128>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7ff fe71 	bl	800b164 <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	4618      	mov	r0, r3
 800b488:	f7ff fe8c 	bl	800b1a4 <XMC_CAN_NODE_SetInitBit>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800b492:	2b00      	cmp	r3, #0
 800b494:	d005      	beq.n	800b4a2 <CAN_NODE_Init+0x6a>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7ff fe52 	bl	800b144 <XMC_CAN_NODE_EnableLoopBack>
 800b4a0:	e018      	b.n	800b4d4 <CAN_NODE_Init+0x9c>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4a8:	6819      	ldr	r1, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4b0:	791a      	ldrb	r2, [r3, #4]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b4b8:	4608      	mov	r0, r1
 800b4ba:	4611      	mov	r1, r2
 800b4bc:	461a      	mov	r2, r3
 800b4be:	f7fb f857 	bl	8006570 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	685a      	ldr	r2, [r3, #4]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	f7ff fe22 	bl	800b118 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f7ff fed1 	bl	800b27c <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 800b4da:	2300      	movs	r3, #0
 800b4dc:	613b      	str	r3, [r7, #16]
 800b4de:	e019      	b.n	800b514 <CAN_NODE_Init+0xdc>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	3302      	adds	r3, #2
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	4413      	add	r3, r2
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	6859      	ldr	r1, [r3, #4]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	791b      	ldrb	r3, [r3, #4]
 800b4fe:	4608      	mov	r0, r1
 800b500:	4611      	mov	r1, r2
 800b502:	461a      	mov	r2, r3
 800b504:	f7fb fe42 	bl	800718c <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
 800b508:	68b8      	ldr	r0, [r7, #8]
 800b50a:	f7ff ff25 	bl	800b358 <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	3301      	adds	r3, #1
 800b512:	613b      	str	r3, [r7, #16]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800b51a:	461a      	mov	r2, r3
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d8de      	bhi.n	800b4e0 <CAN_NODE_Init+0xa8>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	4618      	mov	r0, r3
 800b528:	f7ff fe2c 	bl	800b184 <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	4618      	mov	r0, r3
 800b532:	f7ff fe47 	bl	800b1c4 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800b53c:	f083 0301 	eor.w	r3, r3, #1
 800b540:	b2db      	uxtb	r3, r3
 800b542:	2b00      	cmp	r3, #0
 800b544:	d011      	beq.n	800b56a <CAN_NODE_Init+0x132>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6819      	ldr	r1, [r3, #0]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	791a      	ldrb	r2, [r3, #4]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b554:	4608      	mov	r0, r1
 800b556:	4611      	mov	r1, r2
 800b558:	461a      	mov	r2, r3
 800b55a:	f7fb f809 	bl	8006570 <XMC_GPIO_Init>
 800b55e:	e004      	b.n	800b56a <CAN_NODE_Init+0x132>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
 800b560:	2301      	movs	r3, #1
 800b562:	75fb      	strb	r3, [r7, #23]
 800b564:	e001      	b.n	800b56a <CAN_NODE_Init+0x132>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 800b566:	2301      	movs	r3, #1
 800b568:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 800b56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3718      	adds	r7, #24
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	460b      	mov	r3, r1
 800b57e:	607a      	str	r2, [r7, #4]
 800b580:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
 800b582:	7afb      	ldrb	r3, [r7, #11]
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	409a      	lsls	r2, r3
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	605a      	str	r2, [r3, #4]
}
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop

0800b598 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5a8:	78fb      	ldrb	r3, [r7, #3]
 800b5aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b5ae:	f003 0301 	and.w	r3, r3, #1
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	370c      	adds	r7, #12
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop

0800b5c0 <BUS_IO_Init>:
* @param handle_ptr Pointer pointing to APP data structure.
* @return BUS_IO_STATUS_t BUS_IO APP status.
*/

BUS_IO_STATUS_t BUS_IO_Init(BUS_IO_t *const handle_ptr)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	7c5b      	ldrb	r3, [r3, #17]
 800b5cc:	f083 0301 	eor.w	r3, r3, #1
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d020      	beq.n	800b618 <BUS_IO_Init+0x58>
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	73fb      	strb	r3, [r7, #15]
 800b5da:	e015      	b.n	800b608 <BUS_IO_Init+0x48>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
 800b5e2:	00db      	lsls	r3, r3, #3
 800b5e4:	4413      	add	r3, r2
 800b5e6:	6819      	ldr	r1, [r3, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
 800b5ee:	00db      	lsls	r3, r3, #3
 800b5f0:	4413      	add	r3, r2
 800b5f2:	791a      	ldrb	r2, [r3, #4]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	3304      	adds	r3, #4
 800b5f8:	4608      	mov	r0, r1
 800b5fa:	4611      	mov	r1, r2
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	f7fa ffb7 	bl	8006570 <XMC_GPIO_Init>
  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b602:	7bfb      	ldrb	r3, [r7, #15]
 800b604:	3301      	adds	r3, #1
 800b606:	73fb      	strb	r3, [r7, #15]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	7c1b      	ldrb	r3, [r3, #16]
 800b60c:	7bfa      	ldrb	r2, [r7, #15]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d3e4      	bcc.n	800b5dc <BUS_IO_Init+0x1c>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
    }
    handle_ptr->initialized = (bool)true;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2201      	movs	r2, #1
 800b616:	745a      	strb	r2, [r3, #17]
  }
  return (BUS_IO_STATUS_OK);
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop

0800b624 <BUS_IO_Read>:
  }
}

/* Function to read the bus pins state */
uint16_t BUS_IO_Read(BUS_IO_t *const handle_ptr)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint16_t count = 0U;
 800b62c:	2300      	movs	r3, #0
 800b62e:	81bb      	strh	r3, [r7, #12]

  XMC_ASSERT("BUS_IO_Read: handle_ptr null pointer", handle_ptr != NULL);

  /* Iterate the list of pins reading the pin state and packing the result according the pin position in the list, from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b630:	2300      	movs	r3, #0
 800b632:	73fb      	strb	r3, [r7, #15]
 800b634:	e01a      	b.n	800b66c <BUS_IO_Read+0x48>
  {
    /* Reading a bus pin's state */
    count |= (uint16_t)(XMC_GPIO_GetInput(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin) << i);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
 800b63c:	00db      	lsls	r3, r3, #3
 800b63e:	4413      	add	r3, r2
 800b640:	6819      	ldr	r1, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	7bfb      	ldrb	r3, [r7, #15]
 800b648:	00db      	lsls	r3, r3, #3
 800b64a:	4413      	add	r3, r2
 800b64c:	791b      	ldrb	r3, [r3, #4]
 800b64e:	4608      	mov	r0, r1
 800b650:	4619      	mov	r1, r3
 800b652:	f7ff ffa1 	bl	800b598 <XMC_GPIO_GetInput>
 800b656:	4602      	mov	r2, r0
 800b658:	7bfb      	ldrb	r3, [r7, #15]
 800b65a:	fa02 f303 	lsl.w	r3, r2, r3
 800b65e:	b29a      	uxth	r2, r3
 800b660:	89bb      	ldrh	r3, [r7, #12]
 800b662:	4313      	orrs	r3, r2
 800b664:	81bb      	strh	r3, [r7, #12]
  uint16_t count = 0U;

  XMC_ASSERT("BUS_IO_Read: handle_ptr null pointer", handle_ptr != NULL);

  /* Iterate the list of pins reading the pin state and packing the result according the pin position in the list, from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b666:	7bfb      	ldrb	r3, [r7, #15]
 800b668:	3301      	adds	r3, #1
 800b66a:	73fb      	strb	r3, [r7, #15]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	7c1b      	ldrb	r3, [r3, #16]
 800b670:	7bfa      	ldrb	r2, [r7, #15]
 800b672:	429a      	cmp	r2, r3
 800b674:	d3df      	bcc.n	800b636 <BUS_IO_Read+0x12>
  {
    /* Reading a bus pin's state */
    count |= (uint16_t)(XMC_GPIO_GetInput(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin) << i);
  }
  return(count);
 800b676:	89bb      	ldrh	r3, [r7, #12]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <BUS_IO_Write>:

/* Function to set the pins bus state */
void BUS_IO_Write(BUS_IO_t *const handle_ptr, const uint16_t data)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	460b      	mov	r3, r1
 800b68a:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  const BUS_IO_PORT_PIN_t *bus_io_port_pin;

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	60bb      	str	r3, [r7, #8]
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b692:	2300      	movs	r3, #0
 800b694:	73fb      	strb	r3, [r7, #15]
 800b696:	e023      	b.n	800b6e0 <BUS_IO_Write+0x60>
  {
    if (data & (uint16_t)((uint16_t)1 << i))
 800b698:	7bfb      	ldrb	r3, [r7, #15]
 800b69a:	2201      	movs	r2, #1
 800b69c:	fa02 f303 	lsl.w	r3, r2, r3
 800b6a0:	b29a      	uxth	r2, r3
 800b6a2:	887b      	ldrh	r3, [r7, #2]
 800b6a4:	4013      	ands	r3, r2
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d009      	beq.n	800b6c0 <BUS_IO_Write+0x40>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_HIGH);
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	791b      	ldrb	r3, [r3, #4]
 800b6b4:	4610      	mov	r0, r2
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	f7ff ff5b 	bl	800b574 <XMC_GPIO_SetOutputLevel>
 800b6be:	e009      	b.n	800b6d4 <BUS_IO_Write+0x54>
    }
    else
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	791b      	ldrb	r3, [r3, #4]
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b6d0:	f7ff ff50 	bl	800b574 <XMC_GPIO_SetOutputLevel>
    }
   bus_io_port_pin++;
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	3308      	adds	r3, #8
 800b6d8:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800b6da:	7bfb      	ldrb	r3, [r7, #15]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	73fb      	strb	r3, [r7, #15]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	7c1b      	ldrb	r3, [r3, #16]
 800b6e4:	7bfa      	ldrb	r2, [r7, #15]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d3d6      	bcc.n	800b698 <BUS_IO_Write+0x18>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
    }
   bus_io_port_pin++;
  }
}
 800b6ea:	3710      	adds	r7, #16
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <ANALOG_IO_Init>:
 * Input Parameter  : Handler Pointer pointing to APP data structure.
 * Output Parameter : ANALOG_IO_STATUS_t (ANALOG_IO APP initialization status).
 */

ANALOG_IO_STATUS_t ANALOG_IO_Init(const ANALOG_IO_t *const handle)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ANALOG_IO_Init: Passed handler is a null pointer", handler != NULL);
  if (*(handle->state) == ANALOG_IO_STATE_NOT_INITIALIZED)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d10a      	bne.n	800b718 <ANALOG_IO_Init+0x28>
  {
    if (handle->config_ptr != NULL)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d002      	beq.n	800b710 <ANALOG_IO_Init+0x20>
    {
      /* Instance specific initialization function call*/
      handle->config_ptr();
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4798      	blx	r3
    }
    /* Set the state variable to initialized state*/
    *(handle->state) = ANALOG_IO_STATE_INITIALIZED;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	2201      	movs	r2, #1
 800b716:	701a      	strb	r2, [r3, #0]
  }
  return (ANALOG_IO_STATUS_OK);
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop

0800b724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b724:	b480      	push	{r7}
 800b726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b728:	4b04      	ldr	r3, [pc, #16]	; (800b73c <__NVIC_GetPriorityGrouping+0x18>)
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b730:	0a1b      	lsrs	r3, r3, #8
}
 800b732:	4618      	mov	r0, r3
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	e000ed00 	.word	0xe000ed00

0800b740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	4603      	mov	r3, r0
 800b748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b74a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	db0b      	blt.n	800b76a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b752:	4908      	ldr	r1, [pc, #32]	; (800b774 <__NVIC_EnableIRQ+0x34>)
 800b754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b758:	095b      	lsrs	r3, r3, #5
 800b75a:	79fa      	ldrb	r2, [r7, #7]
 800b75c:	f002 021f 	and.w	r2, r2, #31
 800b760:	2001      	movs	r0, #1
 800b762:	fa00 f202 	lsl.w	r2, r0, r2
 800b766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr
 800b774:	e000e100 	.word	0xe000e100

0800b778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	4603      	mov	r3, r0
 800b780:	6039      	str	r1, [r7, #0]
 800b782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	db0a      	blt.n	800b7a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b78c:	490d      	ldr	r1, [pc, #52]	; (800b7c4 <__NVIC_SetPriority+0x4c>)
 800b78e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b792:	683a      	ldr	r2, [r7, #0]
 800b794:	b2d2      	uxtb	r2, r2
 800b796:	0092      	lsls	r2, r2, #2
 800b798:	b2d2      	uxtb	r2, r2
 800b79a:	440b      	add	r3, r1
 800b79c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800b7a0:	e00a      	b.n	800b7b8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7a2:	4909      	ldr	r1, [pc, #36]	; (800b7c8 <__NVIC_SetPriority+0x50>)
 800b7a4:	79fb      	ldrb	r3, [r7, #7]
 800b7a6:	f003 030f 	and.w	r3, r3, #15
 800b7aa:	3b04      	subs	r3, #4
 800b7ac:	683a      	ldr	r2, [r7, #0]
 800b7ae:	b2d2      	uxtb	r2, r2
 800b7b0:	0092      	lsls	r2, r2, #2
 800b7b2:	b2d2      	uxtb	r2, r2
 800b7b4:	440b      	add	r3, r1
 800b7b6:	761a      	strb	r2, [r3, #24]
  }
}
 800b7b8:	370c      	adds	r7, #12
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	e000e100 	.word	0xe000e100
 800b7c8:	e000ed00 	.word	0xe000ed00

0800b7cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b089      	sub	sp, #36	; 0x24
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f003 0307 	and.w	r3, r3, #7
 800b7de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	f1c3 0307 	rsb	r3, r3, #7
 800b7e6:	2b06      	cmp	r3, #6
 800b7e8:	bf28      	it	cs
 800b7ea:	2306      	movcs	r3, #6
 800b7ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b7ee:	69fb      	ldr	r3, [r7, #28]
 800b7f0:	3306      	adds	r3, #6
 800b7f2:	2b06      	cmp	r3, #6
 800b7f4:	d902      	bls.n	800b7fc <NVIC_EncodePriority+0x30>
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	e000      	b.n	800b7fe <NVIC_EncodePriority+0x32>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	2201      	movs	r2, #1
 800b804:	fa02 f303 	lsl.w	r3, r2, r3
 800b808:	1e5a      	subs	r2, r3, #1
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	401a      	ands	r2, r3
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	2101      	movs	r1, #1
 800b816:	fa01 f303 	lsl.w	r3, r1, r3
 800b81a:	1e59      	subs	r1, r3, #1
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800b820:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800b822:	4618      	mov	r0, r3
 800b824:	3724      	adds	r7, #36	; 0x24
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop

0800b830 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b83e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 800b848:	370c      	adds	r7, #12
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop

0800b854 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
                                                                    const uint32_t grp_num,
                                                                    const uint32_t ch_num)
{
 800b854:	b480      	push	{r7}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	68ba      	ldr	r2, [r7, #8]
 800b864:	3260      	adds	r2, #96	; 0x60
 800b866:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2101      	movs	r1, #1
 800b86e:	fa01 f303 	lsl.w	r3, r1, r3
 800b872:	ea42 0103 	orr.w	r1, r2, r3
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	3260      	adds	r2, #96	; 0x60
 800b87c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800b880:	3714      	adds	r7, #20
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop

0800b88c <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6819      	ldr	r1, [r3, #0]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	68ba      	ldr	r2, [r7, #8]
 800b8a0:	32a0      	adds	r2, #160	; 0xa0
 800b8a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	683a      	ldr	r2, [r7, #0]
 800b8be:	32c0      	adds	r2, #192	; 0xc0
 800b8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8c4:	b29b      	uxth	r3, r3
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	370c      	adds	r7, #12
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr
 800b8d2:	bf00      	nop

0800b8d4 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 800b8d4:	b590      	push	{r4, r7, lr}
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	7e1b      	ldrb	r3, [r3, #24]
 800b8e0:	2b02      	cmp	r3, #2
 800b8e2:	f040 80a7 	bne.w	800ba34 <ADC_MEASUREMENT_Init+0x160>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fc fdf0 	bl	80084d0 <GLOBAL_ADC_Init>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	695a      	ldr	r2, [r3, #20]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	4610      	mov	r0, r2
 800b900:	6819      	ldr	r1, [r3, #0]
 800b902:	2200      	movs	r2, #0
 800b904:	2300      	movs	r3, #0
 800b906:	f7fc f89d 	bl	8007a44 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	695a      	ldr	r2, [r3, #20]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	4610      	mov	r0, r2
 800b916:	4619      	mov	r1, r3
 800b918:	f7fc f9ba 	bl	8007c90 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800b91c:	2300      	movs	r3, #0
 800b91e:	73fb      	strb	r3, [r7, #15]
 800b920:	e03c      	b.n	800b99c <ADC_MEASUREMENT_Init+0xc8>
    {
      indexed = handle_ptr->array->channel_array[j];
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	7bfa      	ldrb	r2, [r7, #15]
 800b928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b92c:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	689a      	ldr	r2, [r3, #8]
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	7c5b      	ldrb	r3, [r3, #17]
 800b936:	4619      	mov	r1, r3
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4610      	mov	r0, r2
 800b93e:	461a      	mov	r2, r3
 800b940:	f7fc fa24 	bl	8007d8c <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	689a      	ldr	r2, [r3, #8]
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	789b      	ldrb	r3, [r3, #2]
 800b94e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b952:	b2db      	uxtb	r3, r3
 800b954:	4619      	mov	r1, r3
                                indexed->res_handle);
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 800b95a:	4610      	mov	r0, r2
 800b95c:	461a      	mov	r2, r3
 800b95e:	f7ff ff95 	bl	800b88c <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	7c1b      	ldrb	r3, [r3, #16]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800b96c:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	7c5b      	ldrb	r3, [r3, #17]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800b972:	4610      	mov	r0, r2
 800b974:	461a      	mov	r2, r3
 800b976:	f7ff ff6d 	bl	800b854 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);

#ifdef ADC_MEASUREMENT_ANALOG_IO_USED
      /* ANALOG_IO initialization for the channel*/
      if(indexed->analog_io_config != NULL)
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d009      	beq.n	800b996 <ADC_MEASUREMENT_Init+0xc2>
      {
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	4618      	mov	r0, r3
 800b988:	f7ff feb2 	bl	800b6f0 <ANALOG_IO_Init>
 800b98c:	4603      	mov	r3, r0
 800b98e:	461a      	mov	r2, r3
 800b990:	7bbb      	ldrb	r3, [r7, #14]
 800b992:	4313      	orrs	r3, r2
 800b994:	73bb      	strb	r3, [r7, #14]
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800b996:	7bfb      	ldrb	r3, [r7, #15]
 800b998:	3301      	adds	r3, #1
 800b99a:	73fb      	strb	r3, [r7, #15]
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
 800b99e:	2b0a      	cmp	r3, #10
 800b9a0:	d9bf      	bls.n	800b922 <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	7a1b      	ldrb	r3, [r3, #8]
 800b9a8:	f003 0308 	and.w	r3, r3, #8
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d02c      	beq.n	800ba0c <ADC_MEASUREMENT_Init+0x138>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	691b      	ldr	r3, [r3, #16]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d028      	beq.n	800ba0c <ADC_MEASUREMENT_Init+0x138>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	b2dc      	uxtb	r4, r3
 800b9c2:	f7ff feaf 	bl	800b724 <__NVIC_GetPriorityGrouping>
 800b9c6:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800b9cc:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	4608      	mov	r0, r1
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	461a      	mov	r2, r3
 800b9da:	f7ff fef7 	bl	800b7cc <NVIC_EncodePriority>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	b263      	sxtb	r3, r4
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	f7ff fec7 	bl	800b778 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	695a      	ldr	r2, [r3, #20]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	7e5b      	ldrb	r3, [r3, #25]
 800b9f4:	4610      	mov	r0, r2
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	f7fc f87a 	bl	8007af0 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	691b      	ldr	r3, [r3, #16]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	b25b      	sxtb	r3, r3
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7ff fe9a 	bl	800b740 <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	695b      	ldr	r3, [r3, #20]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d002      	beq.n	800ba1a <ADC_MEASUREMENT_Init+0x146>
    {
    	(handle_ptr->mux_config)();
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	695b      	ldr	r3, [r3, #20]
 800ba18:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	7e9b      	ldrb	r3, [r3, #26]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d005      	beq.n	800ba2e <ADC_MEASUREMENT_Init+0x15a>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	695b      	ldr	r3, [r3, #20]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7ff ff01 	bl	800b830 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	7bba      	ldrb	r2, [r7, #14]
 800ba32:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	7e1b      	ldrb	r3, [r3, #24]
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3714      	adds	r7, #20
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd90      	pop	{r4, r7, pc}

0800ba40 <ADC_MEASUREMENT_GetResult>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	689a      	ldr	r2, [r3, #8]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	789b      	ldrb	r3, [r3, #2]
 800ba52:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	4610      	mov	r0, r2
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	f7ff ff28 	bl	800b8b0 <XMC_VADC_GROUP_GetResult>
 800ba60:	4603      	mov	r3, r0
 800ba62:	81fb      	strh	r3, [r7, #14]

  return (result);
 800ba64:	89fb      	ldrh	r3, [r7, #14]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop

0800ba70 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800ba76:	2300      	movs	r3, #0
 800ba78:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 800ba7a:	4851      	ldr	r0, [pc, #324]	; (800bbc0 <DAVE_Init+0x150>)
 800ba7c:	f7ff faec 	bl	800b058 <CLOCK_XMC4_Init>
 800ba80:	4603      	mov	r3, r0
 800ba82:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 800ba84:	79fb      	ldrb	r3, [r7, #7]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d104      	bne.n	800ba94 <DAVE_Init+0x24>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_1 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_1); 
 800ba8a:	484e      	ldr	r0, [pc, #312]	; (800bbc4 <DAVE_Init+0x154>)
 800ba8c:	f7ff fcd4 	bl	800b438 <CAN_NODE_Init>
 800ba90:	4603      	mov	r3, r0
 800ba92:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800ba94:	79fb      	ldrb	r3, [r7, #7]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d104      	bne.n	800baa4 <DAVE_Init+0x34>
  {
	 /**  Initialization of BUS_IO APP instance BUS_IO */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&BUS_IO); 
 800ba9a:	484b      	ldr	r0, [pc, #300]	; (800bbc8 <DAVE_Init+0x158>)
 800ba9c:	f7ff fd90 	bl	800b5c0 <BUS_IO_Init>
 800baa0:	4603      	mov	r3, r0
 800baa2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800baa4:	79fb      	ldrb	r3, [r7, #7]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d104      	bne.n	800bab4 <DAVE_Init+0x44>
  {
	 /**  Initialization of WATCHDOG APP instance WATCHDOG */
	 init_status = (DAVE_STATUS_t)WATCHDOG_Init(&WATCHDOG); 
 800baaa:	4848      	ldr	r0, [pc, #288]	; (800bbcc <DAVE_Init+0x15c>)
 800baac:	f7fc fa30 	bl	8007f10 <WATCHDOG_Init>
 800bab0:	4603      	mov	r3, r0
 800bab2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bab4:	79fb      	ldrb	r3, [r7, #7]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d104      	bne.n	800bac4 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_Debug_LED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_Debug_LED); 
 800baba:	4845      	ldr	r0, [pc, #276]	; (800bbd0 <DAVE_Init+0x160>)
 800babc:	f7ff f94a 	bl	800ad54 <DIGITAL_IO_Init>
 800bac0:	4603      	mov	r3, r0
 800bac2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bac4:	79fb      	ldrb	r3, [r7, #7]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d104      	bne.n	800bad4 <DAVE_Init+0x64>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_2 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_2); 
 800baca:	4842      	ldr	r0, [pc, #264]	; (800bbd4 <DAVE_Init+0x164>)
 800bacc:	f7ff fcb4 	bl	800b438 <CAN_NODE_Init>
 800bad0:	4603      	mov	r3, r0
 800bad2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bad4:	79fb      	ldrb	r3, [r7, #7]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d104      	bne.n	800bae4 <DAVE_Init+0x74>
  {
	 /**  Initialization of PWM APP instance PWM_MHJ9_IN */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MHJ9_IN); 
 800bada:	483f      	ldr	r0, [pc, #252]	; (800bbd8 <DAVE_Init+0x168>)
 800badc:	f7fc fb9c 	bl	8008218 <PWM_Init>
 800bae0:	4603      	mov	r3, r0
 800bae2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bae4:	79fb      	ldrb	r3, [r7, #7]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d104      	bne.n	800baf4 <DAVE_Init+0x84>
  {
	 /**  Initialization of PWM APP instance PWM_MHJ9_OUT */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_MHJ9_OUT); 
 800baea:	483c      	ldr	r0, [pc, #240]	; (800bbdc <DAVE_Init+0x16c>)
 800baec:	f7fc fb94 	bl	8008218 <PWM_Init>
 800baf0:	4603      	mov	r3, r0
 800baf2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800baf4:	79fb      	ldrb	r3, [r7, #7]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d104      	bne.n	800bb04 <DAVE_Init+0x94>
  {
	 /**  Initialization of PWM APP instance PWM_Waterpump */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_Waterpump); 
 800bafa:	4839      	ldr	r0, [pc, #228]	; (800bbe0 <DAVE_Init+0x170>)
 800bafc:	f7fc fb8c 	bl	8008218 <PWM_Init>
 800bb00:	4603      	mov	r3, r0
 800bb02:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bb04:	79fb      	ldrb	r3, [r7, #7]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d104      	bne.n	800bb14 <DAVE_Init+0xa4>
  {
	 /**  Initialization of PWM APP instance PWM_Fans1 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_Fans1); 
 800bb0a:	4836      	ldr	r0, [pc, #216]	; (800bbe4 <DAVE_Init+0x174>)
 800bb0c:	f7fc fb84 	bl	8008218 <PWM_Init>
 800bb10:	4603      	mov	r3, r0
 800bb12:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d104      	bne.n	800bb24 <DAVE_Init+0xb4>
  {
	 /**  Initialization of PWM APP instance PWM_Fans2 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_Fans2); 
 800bb1a:	4833      	ldr	r0, [pc, #204]	; (800bbe8 <DAVE_Init+0x178>)
 800bb1c:	f7fc fb7c 	bl	8008218 <PWM_Init>
 800bb20:	4603      	mov	r3, r0
 800bb22:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bb24:	79fb      	ldrb	r3, [r7, #7]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d104      	bne.n	800bb34 <DAVE_Init+0xc4>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT); 
 800bb2a:	4830      	ldr	r0, [pc, #192]	; (800bbec <DAVE_Init+0x17c>)
 800bb2c:	f7ff fed2 	bl	800b8d4 <ADC_MEASUREMENT_Init>
 800bb30:	4603      	mov	r3, r0
 800bb32:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bb34:	79fb      	ldrb	r3, [r7, #7]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d104      	bne.n	800bb44 <DAVE_Init+0xd4>
  {
	 /**  Initialization of DIGITAL_IO APP instance CAN1_Res */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CAN1_Res); 
 800bb3a:	482d      	ldr	r0, [pc, #180]	; (800bbf0 <DAVE_Init+0x180>)
 800bb3c:	f7ff f90a 	bl	800ad54 <DIGITAL_IO_Init>
 800bb40:	4603      	mov	r3, r0
 800bb42:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bb44:	79fb      	ldrb	r3, [r7, #7]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d104      	bne.n	800bb54 <DAVE_Init+0xe4>
  {
	 /**  Initialization of DIGITAL_IO APP instance CAN2_Res */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CAN2_Res); 
 800bb4a:	482a      	ldr	r0, [pc, #168]	; (800bbf4 <DAVE_Init+0x184>)
 800bb4c:	f7ff f902 	bl	800ad54 <DIGITAL_IO_Init>
 800bb50:	4603      	mov	r3, r0
 800bb52:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bb54:	79fb      	ldrb	r3, [r7, #7]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d104      	bne.n	800bb64 <DAVE_Init+0xf4>
  {
	 /**  Initialization of EVENT_DETECTOR APP instance EVENT_DETECTOR_Shifting */
	 init_status = (DAVE_STATUS_t)EVENT_DETECTOR_Init(&EVENT_DETECTOR_Shifting); 
 800bb5a:	4827      	ldr	r0, [pc, #156]	; (800bbf8 <DAVE_Init+0x188>)
 800bb5c:	f7ff f8dc 	bl	800ad18 <EVENT_DETECTOR_Init>
 800bb60:	4603      	mov	r3, r0
 800bb62:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bb64:	79fb      	ldrb	r3, [r7, #7]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d104      	bne.n	800bb74 <DAVE_Init+0x104>
  {
	 /**  Initialization of EVENT_GENERATOR APP instance EVENT_GENERATOR_Shifting */
	 init_status = (DAVE_STATUS_t)EVENT_GENERATOR_Init(&EVENT_GENERATOR_Shifting); 
 800bb6a:	4824      	ldr	r0, [pc, #144]	; (800bbfc <DAVE_Init+0x18c>)
 800bb6c:	f7ff f8b0 	bl	800acd0 <EVENT_GENERATOR_Init>
 800bb70:	4603      	mov	r3, r0
 800bb72:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bb74:	79fb      	ldrb	r3, [r7, #7]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d104      	bne.n	800bb84 <DAVE_Init+0x114>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_Shifting */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_Shifting); 
 800bb7a:	4821      	ldr	r0, [pc, #132]	; (800bc00 <DAVE_Init+0x190>)
 800bb7c:	f7fc fc1e 	bl	80083bc <INTERRUPT_Init>
 800bb80:	4603      	mov	r3, r0
 800bb82:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bb84:	79fb      	ldrb	r3, [r7, #7]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d104      	bne.n	800bb94 <DAVE_Init+0x124>
  {
	 /**  Initialization of DIGITAL_IO APP instance Signal_DownShift */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Signal_DownShift); 
 800bb8a:	481e      	ldr	r0, [pc, #120]	; (800bc04 <DAVE_Init+0x194>)
 800bb8c:	f7ff f8e2 	bl	800ad54 <DIGITAL_IO_Init>
 800bb90:	4603      	mov	r3, r0
 800bb92:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bb94:	79fb      	ldrb	r3, [r7, #7]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d104      	bne.n	800bba4 <DAVE_Init+0x134>
  {
	 /**  Initialization of DIGITAL_IO APP instance Signal_UpShift */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Signal_UpShift); 
 800bb9a:	481b      	ldr	r0, [pc, #108]	; (800bc08 <DAVE_Init+0x198>)
 800bb9c:	f7ff f8da 	bl	800ad54 <DIGITAL_IO_Init>
 800bba0:	4603      	mov	r3, r0
 800bba2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800bba4:	79fb      	ldrb	r3, [r7, #7]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d104      	bne.n	800bbb4 <DAVE_Init+0x144>
  {
	 /**  Initialization of BUS_IO APP instance BUS_IO_Input */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&BUS_IO_Input); 
 800bbaa:	4818      	ldr	r0, [pc, #96]	; (800bc0c <DAVE_Init+0x19c>)
 800bbac:	f7ff fd08 	bl	800b5c0 <BUS_IO_Init>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 800bbb4:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	200007f0 	.word	0x200007f0
 800bbc4:	0800f740 	.word	0x0800f740
 800bbc8:	20000450 	.word	0x20000450
 800bbcc:	2000000c 	.word	0x2000000c
 800bbd0:	0800f63c 	.word	0x0800f63c
 800bbd4:	0800f8a4 	.word	0x0800f8a4
 800bbd8:	20000014 	.word	0x20000014
 800bbdc:	20000048 	.word	0x20000048
 800bbe0:	2000007c 	.word	0x2000007c
 800bbe4:	200000b0 	.word	0x200000b0
 800bbe8:	200000e4 	.word	0x200000e4
 800bbec:	20000604 	.word	0x20000604
 800bbf0:	0800f650 	.word	0x0800f650
 800bbf4:	0800f664 	.word	0x0800f664
 800bbf8:	200001a4 	.word	0x200001a4
 800bbfc:	20000194 	.word	0x20000194
 800bc00:	0800f59c 	.word	0x0800f59c
 800bc04:	0800f678 	.word	0x0800f678
 800bc08:	0800f68c 	.word	0x0800f68c
 800bc0c:	20000464 	.word	0x20000464

0800bc10 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b083      	sub	sp, #12
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	460b      	mov	r3, r1
 800bc1a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800bc1c:	78fb      	ldrb	r3, [r7, #3]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	409a      	lsls	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	605a      	str	r2, [r3, #4]
}
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800bc3c:	78fb      	ldrb	r3, [r7, #3]
 800bc3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bc42:	409a      	lsls	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	605a      	str	r2, [r3, #4]
}
 800bc48:	370c      	adds	r7, #12
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop

0800bc54 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	7c1b      	ldrb	r3, [r3, #16]
 800bc64:	4610      	mov	r0, r2
 800bc66:	4619      	mov	r1, r3
 800bc68:	f7ff ffd2 	bl	800bc10 <XMC_GPIO_SetOutputHigh>
}
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop

0800bc74 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	7c1b      	ldrb	r3, [r3, #16]
 800bc84:	4610      	mov	r0, r2
 800bc86:	4619      	mov	r1, r3
 800bc88:	f7ff ffd2 	bl	800bc30 <XMC_GPIO_SetOutputLow>
}
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop

0800bc94 <CAN_1_ini>:
uint16_t counter = 0;

boolean_T CAN_1_RES = true;

void CAN_1_ini()
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	af00      	add	r7, sp, #0
	//Termination Resistor on CAN 1
	if (CAN_1_RES)
 800bc98:	4b3c      	ldr	r3, [pc, #240]	; (800bd8c <CAN_1_ini+0xf8>)
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d003      	beq.n	800bca8 <CAN_1_ini+0x14>
		DIGITAL_IO_SetOutputHigh (&CAN1_Res);
 800bca0:	483b      	ldr	r0, [pc, #236]	; (800bd90 <CAN_1_ini+0xfc>)
 800bca2:	f7ff ffd7 	bl	800bc54 <DIGITAL_IO_SetOutputHigh>
 800bca6:	e002      	b.n	800bcae <CAN_1_ini+0x1a>
	else
		DIGITAL_IO_SetOutputLow (&CAN1_Res);
 800bca8:	4839      	ldr	r0, [pc, #228]	; (800bd90 <CAN_1_ini+0xfc>)
 800bcaa:	f7ff ffe3 	bl	800bc74 <DIGITAL_IO_SetOutputLow>

	//------LINK4_1_boost_gear_rev_map 0x10 LMO1------ todo
	canData.p_air_22 				= &VCU_DW.VAR_IN_p_air_22;
 800bcae:	4b39      	ldr	r3, [pc, #228]	; (800bd94 <CAN_1_ini+0x100>)
 800bcb0:	4a39      	ldr	r2, [pc, #228]	; (800bd98 <CAN_1_ini+0x104>)
 800bcb2:	601a      	str	r2, [r3, #0]
	canData.AN5GearPos	 			= &VCU_DW.VAR_IN_p_air_22_des;
 800bcb4:	4b37      	ldr	r3, [pc, #220]	; (800bd94 <CAN_1_ini+0x100>)
 800bcb6:	4a39      	ldr	r2, [pc, #228]	; (800bd9c <CAN_1_ini+0x108>)
 800bcb8:	605a      	str	r2, [r3, #4]
	canData.n_engine 				= &n_engine;
 800bcba:	4b36      	ldr	r3, [pc, #216]	; (800bd94 <CAN_1_ini+0x100>)
 800bcbc:	4a38      	ldr	r2, [pc, #224]	; (800bda0 <CAN_1_ini+0x10c>)
 800bcbe:	609a      	str	r2, [r3, #8]
	n_engine_LSB					= &VCU_DW.VAR_IN_n_engine_LSB;
 800bcc0:	4b38      	ldr	r3, [pc, #224]	; (800bda4 <CAN_1_ini+0x110>)
 800bcc2:	4a39      	ldr	r2, [pc, #228]	; (800bda8 <CAN_1_ini+0x114>)
 800bcc4:	601a      	str	r2, [r3, #0]
	n_engine_MSB					= &VCU_DW.VAR_IN_n_engine_MSB;
 800bcc6:	4b39      	ldr	r3, [pc, #228]	; (800bdac <CAN_1_ini+0x118>)
 800bcc8:	4a39      	ldr	r2, [pc, #228]	; (800bdb0 <CAN_1_ini+0x11c>)
 800bcca:	601a      	str	r2, [r3, #0]
	//canData.ign_angle 				= (uint8_t*)&VCU_DW.
	canData.gear 					= &VCU_DW.VAR_IN_gear;
 800bccc:	4b31      	ldr	r3, [pc, #196]	; (800bd94 <CAN_1_ini+0x100>)
 800bcce:	4a39      	ldr	r2, [pc, #228]	; (800bdb4 <CAN_1_ini+0x120>)
 800bcd0:	60da      	str	r2, [r3, #12]

	//------LINK4_2_press_temp_Wg 0x771 LMO2------ todo
	//canData.p_oil 				= (uint8_t*)&VCU_DW.VAR_IN_p_Oil;
	//canData.p_fuel_rail 		= (uint8_t*)&VCU_DW.VAR_IN_p_fuel_rail;
	//canData.x_throttle_valve 	= (uint8_t*)&VCU_DW.VAR_IN_x_ath;
	canData.t_water_engine 		= &VCU_DW.VAR_IN_t_water_engine;
 800bcd2:	4b30      	ldr	r3, [pc, #192]	; (800bd94 <CAN_1_ini+0x100>)
 800bcd4:	4a38      	ldr	r2, [pc, #224]	; (800bdb8 <CAN_1_ini+0x124>)
 800bcd6:	635a      	str	r2, [r3, #52]	; 0x34
	//canData.lambda_status = (uint8_t*)&VCU_DW.VAR_IN_
	//canData.error_trigger = (uint8_t*)&VCU_DW.VAR_IN_
	//canData.boost_table = (uint8_t*)&VCU_DW.VAR_IN_

	//------STW 0x8 LM04------
	canData.STW_shift_up_request 	= &VCU_DW.VAR_IN_STW_shift_up_request;
 800bcd8:	4b2e      	ldr	r3, [pc, #184]	; (800bd94 <CAN_1_ini+0x100>)
 800bcda:	4a38      	ldr	r2, [pc, #224]	; (800bdbc <CAN_1_ini+0x128>)
 800bcdc:	661a      	str	r2, [r3, #96]	; 0x60
	canData.STW_shift_down_request 	= &VCU_DW.VAR_IN_STW_shift_down_request;
 800bcde:	4b2d      	ldr	r3, [pc, #180]	; (800bd94 <CAN_1_ini+0x100>)
 800bce0:	4a37      	ldr	r2, [pc, #220]	; (800bdc0 <CAN_1_ini+0x12c>)
 800bce2:	665a      	str	r2, [r3, #100]	; 0x64
	canData.STW_transmission_mode 	= &VCU_DW.VAR_IN_STW_transmission_mode;
 800bce4:	4b2b      	ldr	r3, [pc, #172]	; (800bd94 <CAN_1_ini+0x100>)
 800bce6:	4a37      	ldr	r2, [pc, #220]	; (800bdc4 <CAN_1_ini+0x130>)
 800bce8:	679a      	str	r2, [r3, #120]	; 0x78
	//canData.STW_trigger_point		= (uint8_t*)&VCU_DW.VAR_IN_STW_map_max;
	//canData.STW_engine_map 			= (uint8_t*)&VCU_DW.VAR_IN_STW_map_min;
	//canData.STW_rev_limiter 		= (uint8_t*)&VCU_DW.VAR_IN_STW_map_3;
	//canData.STW_clutch_mode 		= (uint8_t*)&VCU_DW.VAR_IN_STW_clutch_mode;
	canData.STW_mue_tyre 			= &VCU_DW.VAR_IN_STW_mue_tyre;
 800bcea:	4b2a      	ldr	r3, [pc, #168]	; (800bd94 <CAN_1_ini+0x100>)
 800bcec:	4a36      	ldr	r2, [pc, #216]	; (800bdc8 <CAN_1_ini+0x134>)
 800bcee:	67da      	str	r2, [r3, #124]	; 0x7c
	//canData.STW_brake_balance 		= (uint8_t*)&VCU_DW.VAR_IN_brake_ratio_R;

	//------TTC_ABS 0x5C0 LM05------
	canData.ABS_switchstate	= &VCU_DW.VAR_OUT_ABS_switchstate;
 800bcf0:	4b28      	ldr	r3, [pc, #160]	; (800bd94 <CAN_1_ini+0x100>)
 800bcf2:	4a36      	ldr	r2, [pc, #216]	; (800bdcc <CAN_1_ini+0x138>)
 800bcf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	canData.p_brake_F		= &VCU_DW.VAR_OUT_p_brake_F;
 800bcf8:	4b26      	ldr	r3, [pc, #152]	; (800bd94 <CAN_1_ini+0x100>)
 800bcfa:	4a35      	ldr	r2, [pc, #212]	; (800bdd0 <CAN_1_ini+0x13c>)
 800bcfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	canData.ABS_BL_switch	= &VCU_DW.VAR_OUT_ABS_BL_switch;
 800bd00:	4b24      	ldr	r3, [pc, #144]	; (800bd94 <CAN_1_ini+0x100>)
 800bd02:	4a34      	ldr	r2, [pc, #208]	; (800bdd4 <CAN_1_ini+0x140>)
 800bd04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	canData.ABS_active		= &VCU_DW.VAR_OUT_ABS_active;
 800bd08:	4b22      	ldr	r3, [pc, #136]	; (800bd94 <CAN_1_ini+0x100>)
 800bd0a:	4a33      	ldr	r2, [pc, #204]	; (800bdd8 <CAN_1_ini+0x144>)
 800bd0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	canData.ABS_EBD_lamp	= &VCU_DW.VAR_OUT_ABS_EBD_Lamp;
 800bd10:	4b20      	ldr	r3, [pc, #128]	; (800bd94 <CAN_1_ini+0x100>)
 800bd12:	4a32      	ldr	r2, [pc, #200]	; (800bddc <CAN_1_ini+0x148>)
 800bd14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	canData.ABS_lamp		= &VCU_DW.VAR_OUT_ABS_Lamp;
 800bd18:	4b1e      	ldr	r3, [pc, #120]	; (800bd94 <CAN_1_ini+0x100>)
 800bd1a:	4a31      	ldr	r2, [pc, #196]	; (800bde0 <CAN_1_ini+0x14c>)
 800bd1c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	//------TTC_LaunchControl 0x7F0 LM06------
	canData.p_brake_R			= &VCU_DW.VAR_OUT_p_brake_R;
 800bd20:	4b1c      	ldr	r3, [pc, #112]	; (800bd94 <CAN_1_ini+0x100>)
 800bd22:	4a30      	ldr	r2, [pc, #192]	; (800bde4 <CAN_1_ini+0x150>)
 800bd24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	canData.LC_mue_tyre			= &VCU_DW.VAR_OUT_STW_mue_tyre;
 800bd28:	4b1a      	ldr	r3, [pc, #104]	; (800bd94 <CAN_1_ini+0x100>)
 800bd2a:	4a2f      	ldr	r2, [pc, #188]	; (800bde8 <CAN_1_ini+0x154>)
 800bd2c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	canData.LC_clutch_pos_des	= &VCU_DW.VAR_OUT_x_clutch_LC;
 800bd30:	4b18      	ldr	r3, [pc, #96]	; (800bd94 <CAN_1_ini+0x100>)
 800bd32:	4a2e      	ldr	r2, [pc, #184]	; (800bdec <CAN_1_ini+0x158>)
 800bd34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	canData.LC_dash_bit			= &VCU_DW.VAR_OUT_LC_dash_Bit;
 800bd38:	4b16      	ldr	r3, [pc, #88]	; (800bd94 <CAN_1_ini+0x100>)
 800bd3a:	4a2d      	ldr	r2, [pc, #180]	; (800bdf0 <CAN_1_ini+0x15c>)
 800bd3c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	canData.LC_active_bit		= &VCU_DW.VAR_OUT_LC_active_bit;
 800bd40:	4b14      	ldr	r3, [pc, #80]	; (800bd94 <CAN_1_ini+0x100>)
 800bd42:	4a2c      	ldr	r2, [pc, #176]	; (800bdf4 <CAN_1_ini+0x160>)
 800bd44:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	canData.LC_ready_bit		= &VCU_DW.VAR_OUT_LC_ready_bit;
 800bd48:	4b12      	ldr	r3, [pc, #72]	; (800bd94 <CAN_1_ini+0x100>)
 800bd4a:	4a2b      	ldr	r2, [pc, #172]	; (800bdf8 <CAN_1_ini+0x164>)
 800bd4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	canData.LC_Mdes				= &VCU_DW.VAR_OUT_LC_Mdes;
 800bd50:	4b10      	ldr	r3, [pc, #64]	; (800bd94 <CAN_1_ini+0x100>)
 800bd52:	4a2a      	ldr	r2, [pc, #168]	; (800bdfc <CAN_1_ini+0x168>)
 800bd54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	canData.LC_Fnr				= &VCU_DW.VAR_OUT_LC_Fnr;
 800bd58:	4b0e      	ldr	r3, [pc, #56]	; (800bd94 <CAN_1_ini+0x100>)
 800bd5a:	4a29      	ldr	r2, [pc, #164]	; (800be00 <CAN_1_ini+0x16c>)
 800bd5c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	//------TTC_WheelSpeed 0x340 LM07------
	canData.n_wheel_FL			= &VCU_DW.VAR_OUT_n_wheel_FL_kmproh;
 800bd60:	4b0c      	ldr	r3, [pc, #48]	; (800bd94 <CAN_1_ini+0x100>)
 800bd62:	4a28      	ldr	r2, [pc, #160]	; (800be04 <CAN_1_ini+0x170>)
 800bd64:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	canData.n_wheel_FR			= &VCU_DW.VAR_OUT_n_wheel_FR_kmproh;
 800bd68:	4b0a      	ldr	r3, [pc, #40]	; (800bd94 <CAN_1_ini+0x100>)
 800bd6a:	4a27      	ldr	r2, [pc, #156]	; (800be08 <CAN_1_ini+0x174>)
 800bd6c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	canData.n_wheel_RL			= &VCU_DW.VAR_OUT_n_wheel_RL_kmproh;
 800bd70:	4b08      	ldr	r3, [pc, #32]	; (800bd94 <CAN_1_ini+0x100>)
 800bd72:	4a26      	ldr	r2, [pc, #152]	; (800be0c <CAN_1_ini+0x178>)
 800bd74:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	canData.n_wheel_RR			= &VCU_DW.VAR_OUT_n_wheel_FL_kmproh;
 800bd78:	4b06      	ldr	r3, [pc, #24]	; (800bd94 <CAN_1_ini+0x100>)
 800bd7a:	4a22      	ldr	r2, [pc, #136]	; (800be04 <CAN_1_ini+0x170>)
 800bd7c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	//----CAN-Modeul Measurement 0x7E1 LM08------
	canData.p_pneu_VCU_IN		= &VCU_DW.VAR_IN_p_pneum;
 800bd80:	4b04      	ldr	r3, [pc, #16]	; (800bd94 <CAN_1_ini+0x100>)
 800bd82:	4a23      	ldr	r2, [pc, #140]	; (800be10 <CAN_1_ini+0x17c>)
 800bd84:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
}
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	20000620 	.word	0x20000620
 800bd90:	0800f650 	.word	0x0800f650
 800bd94:	200013c0 	.word	0x200013c0
 800bd98:	2000120c 	.word	0x2000120c
 800bd9c:	2000120b 	.word	0x2000120b
 800bda0:	20000844 	.word	0x20000844
 800bda4:	200012dc 	.word	0x200012dc
 800bda8:	2000120a 	.word	0x2000120a
 800bdac:	200012e8 	.word	0x200012e8
 800bdb0:	20001209 	.word	0x20001209
 800bdb4:	20001208 	.word	0x20001208
 800bdb8:	2000120d 	.word	0x2000120d
 800bdbc:	20001214 	.word	0x20001214
 800bdc0:	20001215 	.word	0x20001215
 800bdc4:	20001217 	.word	0x20001217
 800bdc8:	20001216 	.word	0x20001216
 800bdcc:	200011eb 	.word	0x200011eb
 800bdd0:	20001192 	.word	0x20001192
 800bdd4:	200011ec 	.word	0x200011ec
 800bdd8:	200011ed 	.word	0x200011ed
 800bddc:	200011ee 	.word	0x200011ee
 800bde0:	200011ef 	.word	0x200011ef
 800bde4:	200011e3 	.word	0x200011e3
 800bde8:	200011e4 	.word	0x200011e4
 800bdec:	200011e5 	.word	0x200011e5
 800bdf0:	200011e6 	.word	0x200011e6
 800bdf4:	200011e7 	.word	0x200011e7
 800bdf8:	200011e8 	.word	0x200011e8
 800bdfc:	200011e9 	.word	0x200011e9
 800be00:	200011ea 	.word	0x200011ea
 800be04:	2000118a 	.word	0x2000118a
 800be08:	2000118c 	.word	0x2000118c
 800be0c:	2000118e 	.word	0x2000118e
 800be10:	20001218 	.word	0x20001218

0800be14 <CAN_1_Receive>:

void CAN_1_Receive()
{
 800be14:	b598      	push	{r3, r4, r7, lr}
 800be16:	af00      	add	r7, sp, #0
	//------LINK4_1_boost_gear_rev_map 0x10 LMO1------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_01_Config);
 800be18:	484f      	ldr	r0, [pc, #316]	; (800bf58 <CAN_1_Receive+0x144>)
 800be1a:	f7ff fadb 	bl	800b3d4 <CAN_NODE_MO_Receive>

	*canData.p_air_22 = checkRangePlausi(CAN_1_LMO_01_Config.mo_ptr->can_data_byte[0], ERR_P_AIR_22); // ACHTUNG MOTOROLA und Offset --> Umwandlung in Simulink
 800be1e:	4b4f      	ldr	r3, [pc, #316]	; (800bf5c <CAN_1_Receive+0x148>)
 800be20:	681c      	ldr	r4, [r3, #0]
 800be22:	4b4d      	ldr	r3, [pc, #308]	; (800bf58 <CAN_1_Receive+0x144>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	7c1b      	ldrb	r3, [r3, #16]
 800be28:	4618      	mov	r0, r3
 800be2a:	210b      	movs	r1, #11
 800be2c:	f000 ff80 	bl	800cd30 <checkRangePlausi>
 800be30:	4603      	mov	r3, r0
 800be32:	b2db      	uxtb	r3, r3
 800be34:	7023      	strb	r3, [r4, #0]
	*canData.AN5GearPos = checkRangePlausi(CAN_1_LMO_01_Config.mo_ptr->can_data_byte[1], ERR_P_AIR_22_DES); //p_air_22_des
 800be36:	4b49      	ldr	r3, [pc, #292]	; (800bf5c <CAN_1_Receive+0x148>)
 800be38:	685c      	ldr	r4, [r3, #4]
 800be3a:	4b47      	ldr	r3, [pc, #284]	; (800bf58 <CAN_1_Receive+0x144>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	7c5b      	ldrb	r3, [r3, #17]
 800be40:	4618      	mov	r0, r3
 800be42:	210c      	movs	r1, #12
 800be44:	f000 ff74 	bl	800cd30 <checkRangePlausi>
 800be48:	4603      	mov	r3, r0
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	7023      	strb	r3, [r4, #0]
	*canData.n_engine = checkRangePlausi(CAN_1_LMO_01_Config.mo_ptr->can_data_word[1], ERR_N_ENGINE);
 800be4e:	4b43      	ldr	r3, [pc, #268]	; (800bf5c <CAN_1_Receive+0x148>)
 800be50:	689c      	ldr	r4, [r3, #8]
 800be52:	4b41      	ldr	r3, [pc, #260]	; (800bf58 <CAN_1_Receive+0x144>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	8a5b      	ldrh	r3, [r3, #18]
 800be58:	4618      	mov	r0, r3
 800be5a:	2106      	movs	r1, #6
 800be5c:	f000 ff68 	bl	800cd30 <checkRangePlausi>
 800be60:	4603      	mov	r3, r0
 800be62:	b29b      	uxth	r3, r3
 800be64:	8023      	strh	r3, [r4, #0]
	*n_engine_LSB	= getbits(*canData.n_engine, 7, 8);
 800be66:	4b3e      	ldr	r3, [pc, #248]	; (800bf60 <CAN_1_Receive+0x14c>)
 800be68:	681c      	ldr	r4, [r3, #0]
 800be6a:	4b3c      	ldr	r3, [pc, #240]	; (800bf5c <CAN_1_Receive+0x148>)
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	881b      	ldrh	r3, [r3, #0]
 800be70:	4618      	mov	r0, r3
 800be72:	2107      	movs	r1, #7
 800be74:	2208      	movs	r2, #8
 800be76:	f002 f945 	bl	800e104 <getbits>
 800be7a:	4603      	mov	r3, r0
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	7023      	strb	r3, [r4, #0]
	*n_engine_MSB	= getbits(*canData.n_engine, 15, 8);
 800be80:	4b38      	ldr	r3, [pc, #224]	; (800bf64 <CAN_1_Receive+0x150>)
 800be82:	681c      	ldr	r4, [r3, #0]
 800be84:	4b35      	ldr	r3, [pc, #212]	; (800bf5c <CAN_1_Receive+0x148>)
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	881b      	ldrh	r3, [r3, #0]
 800be8a:	4618      	mov	r0, r3
 800be8c:	210f      	movs	r1, #15
 800be8e:	2208      	movs	r2, #8
 800be90:	f002 f938 	bl	800e104 <getbits>
 800be94:	4603      	mov	r3, r0
 800be96:	b2db      	uxtb	r3, r3
 800be98:	7023      	strb	r3, [r4, #0]
	*canData.gear =  checkRangePlausi(CAN_1_LMO_01_Config.mo_ptr->can_data_byte[4],ERR_GEAR); // ACHTUNG MOTOROLA und nur 5 bit NEU --> Umwandlung in Simulink
 800be9a:	4b30      	ldr	r3, [pc, #192]	; (800bf5c <CAN_1_Receive+0x148>)
 800be9c:	68dc      	ldr	r4, [r3, #12]
 800be9e:	4b2e      	ldr	r3, [pc, #184]	; (800bf58 <CAN_1_Receive+0x144>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	7d1b      	ldrb	r3, [r3, #20]
 800bea4:	4618      	mov	r0, r3
 800bea6:	2104      	movs	r1, #4
 800bea8:	f000 ff42 	bl	800cd30 <checkRangePlausi>
 800beac:	4603      	mov	r3, r0
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	7023      	strb	r3, [r4, #0]
	//*canData.fuel_table_2_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],30,1);
	//*canData.ign_table_1_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],31,1);
	//*canData.ign_table_2_status = getbits(CAN_1_LMO_01_Config.mo_ptr->can_data[1],32,1);

	//------LINK4_2_press_temp_Wg 0x771 LMO2------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_02_Config);
 800beb2:	482d      	ldr	r0, [pc, #180]	; (800bf68 <CAN_1_Receive+0x154>)
 800beb4:	f7ff fa8e 	bl	800b3d4 <CAN_NODE_MO_Receive>

	//*canData.p_oil = CAN_1_LMO_02_Config.mo_ptr->can_data_byte[0];
	//*canData.p_fuel_rail =  CAN_1_LMO_02_Config.mo_ptr->can_data_byte[1];
	//*canData.x_throttle_valve = CAN_1_LMO_02_Config.mo_ptr->can_data_byte[2]; //x_throttleValve
	*canData.t_water_engine = CAN_1_LMO_02_Config.mo_ptr->can_data_byte[3];
 800beb8:	4b28      	ldr	r3, [pc, #160]	; (800bf5c <CAN_1_Receive+0x148>)
 800beba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bebc:	4a2a      	ldr	r2, [pc, #168]	; (800bf68 <CAN_1_Receive+0x154>)
 800bebe:	6812      	ldr	r2, [r2, #0]
 800bec0:	7cd2      	ldrb	r2, [r2, #19]
 800bec2:	701a      	strb	r2, [r3, #0]
	*canData.error_trigger = (CAN_1_LMO_03_Config.mo_ptr->can_data_byte[6]);
	*canData.boost_table = CAN_1_LMO_03_Config.mo_ptr->can_data_byte[7];
	*/

	//------STW 0x8 LM04------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_04_Config);
 800bec4:	4829      	ldr	r0, [pc, #164]	; (800bf6c <CAN_1_Receive+0x158>)
 800bec6:	f7ff fa85 	bl	800b3d4 <CAN_NODE_MO_Receive>

	*canData.STW_shift_up_request = checkRangePlausi(getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],0,1),ERR_STW_SHIFT_UP_REQUEST);
 800beca:	4b24      	ldr	r3, [pc, #144]	; (800bf5c <CAN_1_Receive+0x148>)
 800becc:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800bece:	4b27      	ldr	r3, [pc, #156]	; (800bf6c <CAN_1_Receive+0x158>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	7c1b      	ldrb	r3, [r3, #16]
 800bed4:	4618      	mov	r0, r3
 800bed6:	2100      	movs	r1, #0
 800bed8:	2201      	movs	r2, #1
 800beda:	f002 f913 	bl	800e104 <getbits>
 800bede:	4603      	mov	r3, r0
 800bee0:	4618      	mov	r0, r3
 800bee2:	2112      	movs	r1, #18
 800bee4:	f000 ff24 	bl	800cd30 <checkRangePlausi>
 800bee8:	4603      	mov	r3, r0
 800beea:	b2db      	uxtb	r3, r3
 800beec:	7023      	strb	r3, [r4, #0]
	*canData.STW_shift_down_request = checkRangePlausi(getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],1,1),ERR_STW_SHIFT_DOWN_REQUEST);
 800beee:	4b1b      	ldr	r3, [pc, #108]	; (800bf5c <CAN_1_Receive+0x148>)
 800bef0:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800bef2:	4b1e      	ldr	r3, [pc, #120]	; (800bf6c <CAN_1_Receive+0x158>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	7c1b      	ldrb	r3, [r3, #16]
 800bef8:	4618      	mov	r0, r3
 800befa:	2101      	movs	r1, #1
 800befc:	2201      	movs	r2, #1
 800befe:	f002 f901 	bl	800e104 <getbits>
 800bf02:	4603      	mov	r3, r0
 800bf04:	4618      	mov	r0, r3
 800bf06:	2111      	movs	r1, #17
 800bf08:	f000 ff12 	bl	800cd30 <checkRangePlausi>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	7023      	strb	r3, [r4, #0]
	//*canData.STW_trigger_point = getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],2,1);
	//*canData.STW_engine_map = getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],3,1);
	//*canData.STW_rev_limiter = getbits(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[0],4,1);
	//*canData.STW_clutch_mode = CAN_1_LMO_04_Config.mo_ptr->can_data_byte[1];
	*canData.STW_transmission_mode = checkRangePlausi(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[2],ERR_TRANSMISSION_MODE);
 800bf12:	4b12      	ldr	r3, [pc, #72]	; (800bf5c <CAN_1_Receive+0x148>)
 800bf14:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800bf16:	4b15      	ldr	r3, [pc, #84]	; (800bf6c <CAN_1_Receive+0x158>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	7c9b      	ldrb	r3, [r3, #18]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	2114      	movs	r1, #20
 800bf20:	f000 ff06 	bl	800cd30 <checkRangePlausi>
 800bf24:	4603      	mov	r3, r0
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	7023      	strb	r3, [r4, #0]
	*canData.STW_mue_tyre = checkRangePlausi(CAN_1_LMO_04_Config.mo_ptr->can_data_byte[3],ERR_MUE_TYRE);
 800bf2a:	4b0c      	ldr	r3, [pc, #48]	; (800bf5c <CAN_1_Receive+0x148>)
 800bf2c:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800bf2e:	4b0f      	ldr	r3, [pc, #60]	; (800bf6c <CAN_1_Receive+0x158>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	7cdb      	ldrb	r3, [r3, #19]
 800bf34:	4618      	mov	r0, r3
 800bf36:	2110      	movs	r1, #16
 800bf38:	f000 fefa 	bl	800cd30 <checkRangePlausi>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	7023      	strb	r3, [r4, #0]
	//*canData.STW_brake_balance = CAN_1_LMO_04_Config.mo_ptr->can_data_byte[4];

	//-----CAN-Modul LM08-----
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_1_LMO_08_Config);
 800bf42:	480b      	ldr	r0, [pc, #44]	; (800bf70 <CAN_1_Receive+0x15c>)
 800bf44:	f7ff fa46 	bl	800b3d4 <CAN_NODE_MO_Receive>

	*canData.p_pneu_VCU_IN = CAN_1_LMO_08_Config.mo_ptr->can_data_byte[0];
 800bf48:	4b04      	ldr	r3, [pc, #16]	; (800bf5c <CAN_1_Receive+0x148>)
 800bf4a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800bf4e:	4a08      	ldr	r2, [pc, #32]	; (800bf70 <CAN_1_Receive+0x15c>)
 800bf50:	6812      	ldr	r2, [r2, #0]
 800bf52:	7c12      	ldrb	r2, [r2, #16]
 800bf54:	701a      	strb	r2, [r3, #0]
}
 800bf56:	bd98      	pop	{r3, r4, r7, pc}
 800bf58:	0800f6e0 	.word	0x0800f6e0
 800bf5c:	200013c0 	.word	0x200013c0
 800bf60:	200012dc 	.word	0x200012dc
 800bf64:	200012e8 	.word	0x200012e8
 800bf68:	0800f6ec 	.word	0x0800f6ec
 800bf6c:	0800f704 	.word	0x0800f704
 800bf70:	0800f734 	.word	0x0800f734

0800bf74 <CAN_1_Transmit>:

void CAN_1_Transmit()
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	af00      	add	r7, sp, #0
	//------TTC_ABS 0x5C0 LM05------
	CAN1_data_Tx_LM05[0] = *canData.ABS_switchstate;
 800bf78:	4b90      	ldr	r3, [pc, #576]	; (800c1bc <CAN_1_Transmit+0x248>)
 800bf7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf7e:	781a      	ldrb	r2, [r3, #0]
 800bf80:	4b8f      	ldr	r3, [pc, #572]	; (800c1c0 <CAN_1_Transmit+0x24c>)
 800bf82:	701a      	strb	r2, [r3, #0]
	CAN1_data_Tx_LM05[1] = getbits(*canData.p_brake_F, 7,8);
 800bf84:	4b8d      	ldr	r3, [pc, #564]	; (800c1bc <CAN_1_Transmit+0x248>)
 800bf86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf8a:	881b      	ldrh	r3, [r3, #0]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	2107      	movs	r1, #7
 800bf90:	2208      	movs	r2, #8
 800bf92:	f002 f8b7 	bl	800e104 <getbits>
 800bf96:	4603      	mov	r3, r0
 800bf98:	b2da      	uxtb	r2, r3
 800bf9a:	4b89      	ldr	r3, [pc, #548]	; (800c1c0 <CAN_1_Transmit+0x24c>)
 800bf9c:	705a      	strb	r2, [r3, #1]
	CAN1_data_Tx_LM05[2] = getbits(*canData.p_brake_F, 15,8);
 800bf9e:	4b87      	ldr	r3, [pc, #540]	; (800c1bc <CAN_1_Transmit+0x248>)
 800bfa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfa4:	881b      	ldrh	r3, [r3, #0]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	210f      	movs	r1, #15
 800bfaa:	2208      	movs	r2, #8
 800bfac:	f002 f8aa 	bl	800e104 <getbits>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	b2da      	uxtb	r2, r3
 800bfb4:	4b82      	ldr	r3, [pc, #520]	; (800c1c0 <CAN_1_Transmit+0x24c>)
 800bfb6:	709a      	strb	r2, [r3, #2]
	CAN1_data_Tx_LM05[3] = getbits(*canData.ABS_BL_switch,0,1) || getbits(*canData.ABS_active,0,1) << 1 || getbits(*canData.ABS_EBD_lamp,0,1) << 2 || getbits(*canData.ABS_lamp,0,1) << 3;
 800bfb8:	4b80      	ldr	r3, [pc, #512]	; (800c1bc <CAN_1_Transmit+0x248>)
 800bfba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	f002 f89d 	bl	800e104 <getbits>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d126      	bne.n	800c01e <CAN_1_Transmit+0xaa>
 800bfd0:	4b7a      	ldr	r3, [pc, #488]	; (800c1bc <CAN_1_Transmit+0x248>)
 800bfd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	2100      	movs	r1, #0
 800bfdc:	2201      	movs	r2, #1
 800bfde:	f002 f891 	bl	800e104 <getbits>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	005b      	lsls	r3, r3, #1
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d119      	bne.n	800c01e <CAN_1_Transmit+0xaa>
 800bfea:	4b74      	ldr	r3, [pc, #464]	; (800c1bc <CAN_1_Transmit+0x248>)
 800bfec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	4618      	mov	r0, r3
 800bff4:	2100      	movs	r1, #0
 800bff6:	2201      	movs	r2, #1
 800bff8:	f002 f884 	bl	800e104 <getbits>
 800bffc:	4603      	mov	r3, r0
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10c      	bne.n	800c01e <CAN_1_Transmit+0xaa>
 800c004:	4b6d      	ldr	r3, [pc, #436]	; (800c1bc <CAN_1_Transmit+0x248>)
 800c006:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	4618      	mov	r0, r3
 800c00e:	2100      	movs	r1, #0
 800c010:	2201      	movs	r2, #1
 800c012:	f002 f877 	bl	800e104 <getbits>
 800c016:	4603      	mov	r3, r0
 800c018:	00db      	lsls	r3, r3, #3
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d001      	beq.n	800c022 <CAN_1_Transmit+0xae>
 800c01e:	2301      	movs	r3, #1
 800c020:	e000      	b.n	800c024 <CAN_1_Transmit+0xb0>
 800c022:	2300      	movs	r3, #0
 800c024:	b2da      	uxtb	r2, r3
 800c026:	4b66      	ldr	r3, [pc, #408]	; (800c1c0 <CAN_1_Transmit+0x24c>)
 800c028:	70da      	strb	r2, [r3, #3]

	CAN_NODE_MO_UpdateData(&CAN_1_LMO_05_Config, CAN1_data_Tx_LM05);
 800c02a:	4866      	ldr	r0, [pc, #408]	; (800c1c4 <CAN_1_Transmit+0x250>)
 800c02c:	4964      	ldr	r1, [pc, #400]	; (800c1c0 <CAN_1_Transmit+0x24c>)
 800c02e:	f7ff f9e3 	bl	800b3f8 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_1_LMO_05_Config);
 800c032:	4864      	ldr	r0, [pc, #400]	; (800c1c4 <CAN_1_Transmit+0x250>)
 800c034:	f7ff f9bc 	bl	800b3b0 <CAN_NODE_MO_Transmit>

	//------TTC_LaunchControl 0x7F0 LM06------
	CAN1_data_Tx_LM06[0] = *canData.p_brake_R;
 800c038:	4b60      	ldr	r3, [pc, #384]	; (800c1bc <CAN_1_Transmit+0x248>)
 800c03a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c03e:	781a      	ldrb	r2, [r3, #0]
 800c040:	4b61      	ldr	r3, [pc, #388]	; (800c1c8 <CAN_1_Transmit+0x254>)
 800c042:	701a      	strb	r2, [r3, #0]
	CAN1_data_Tx_LM06[1] = *canData.LC_mue_tyre;
 800c044:	4b5d      	ldr	r3, [pc, #372]	; (800c1bc <CAN_1_Transmit+0x248>)
 800c046:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c04a:	781a      	ldrb	r2, [r3, #0]
 800c04c:	4b5e      	ldr	r3, [pc, #376]	; (800c1c8 <CAN_1_Transmit+0x254>)
 800c04e:	705a      	strb	r2, [r3, #1]
	CAN1_data_Tx_LM06[2] = *canData.LC_clutch_pos_des;
 800c050:	4b5a      	ldr	r3, [pc, #360]	; (800c1bc <CAN_1_Transmit+0x248>)
 800c052:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c056:	781a      	ldrb	r2, [r3, #0]
 800c058:	4b5b      	ldr	r3, [pc, #364]	; (800c1c8 <CAN_1_Transmit+0x254>)
 800c05a:	709a      	strb	r2, [r3, #2]
	CAN1_data_Tx_LM06[3] = getbits(*canData.LC_dash_bit,0,1) || getbits(*canData.LC_active_bit,0,1) << 1 || getbits(*canData.LC_ready_bit,0,1) << 2;
 800c05c:	4b57      	ldr	r3, [pc, #348]	; (800c1bc <CAN_1_Transmit+0x248>)
 800c05e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	4618      	mov	r0, r3
 800c066:	2100      	movs	r1, #0
 800c068:	2201      	movs	r2, #1
 800c06a:	f002 f84b 	bl	800e104 <getbits>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d119      	bne.n	800c0a8 <CAN_1_Transmit+0x134>
 800c074:	4b51      	ldr	r3, [pc, #324]	; (800c1bc <CAN_1_Transmit+0x248>)
 800c076:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	4618      	mov	r0, r3
 800c07e:	2100      	movs	r1, #0
 800c080:	2201      	movs	r2, #1
 800c082:	f002 f83f 	bl	800e104 <getbits>
 800c086:	4603      	mov	r3, r0
 800c088:	005b      	lsls	r3, r3, #1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10c      	bne.n	800c0a8 <CAN_1_Transmit+0x134>
 800c08e:	4b4b      	ldr	r3, [pc, #300]	; (800c1bc <CAN_1_Transmit+0x248>)
 800c090:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	4618      	mov	r0, r3
 800c098:	2100      	movs	r1, #0
 800c09a:	2201      	movs	r2, #1
 800c09c:	f002 f832 	bl	800e104 <getbits>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d001      	beq.n	800c0ac <CAN_1_Transmit+0x138>
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	e000      	b.n	800c0ae <CAN_1_Transmit+0x13a>
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	b2da      	uxtb	r2, r3
 800c0b0:	4b45      	ldr	r3, [pc, #276]	; (800c1c8 <CAN_1_Transmit+0x254>)
 800c0b2:	70da      	strb	r2, [r3, #3]
	CAN1_data_Tx_LM06[4] = *canData.LC_Mdes;
 800c0b4:	4b41      	ldr	r3, [pc, #260]	; (800c1bc <CAN_1_Transmit+0x248>)
 800c0b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c0ba:	781a      	ldrb	r2, [r3, #0]
 800c0bc:	4b42      	ldr	r3, [pc, #264]	; (800c1c8 <CAN_1_Transmit+0x254>)
 800c0be:	711a      	strb	r2, [r3, #4]
	CAN1_data_Tx_LM06[5] = *canData.LC_Fnr;
 800c0c0:	4b3e      	ldr	r3, [pc, #248]	; (800c1bc <CAN_1_Transmit+0x248>)
 800c0c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c0c6:	781a      	ldrb	r2, [r3, #0]
 800c0c8:	4b3f      	ldr	r3, [pc, #252]	; (800c1c8 <CAN_1_Transmit+0x254>)
 800c0ca:	715a      	strb	r2, [r3, #5]

	CAN_NODE_MO_UpdateData(&CAN_1_LMO_06_Config, CAN1_data_Tx_LM06);
 800c0cc:	483f      	ldr	r0, [pc, #252]	; (800c1cc <CAN_1_Transmit+0x258>)
 800c0ce:	493e      	ldr	r1, [pc, #248]	; (800c1c8 <CAN_1_Transmit+0x254>)
 800c0d0:	f7ff f992 	bl	800b3f8 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_1_LMO_06_Config);
 800c0d4:	483d      	ldr	r0, [pc, #244]	; (800c1cc <CAN_1_Transmit+0x258>)
 800c0d6:	f7ff f96b 	bl	800b3b0 <CAN_NODE_MO_Transmit>

	//------TTC_WheelSpeed 0x340 LM07------
	CAN1_data_Tx_LM07[0] = getbits(*canData.n_wheel_FL,7,8);
 800c0da:	4b38      	ldr	r3, [pc, #224]	; (800c1bc <CAN_1_Transmit+0x248>)
 800c0dc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c0e0:	881b      	ldrh	r3, [r3, #0]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	2107      	movs	r1, #7
 800c0e6:	2208      	movs	r2, #8
 800c0e8:	f002 f80c 	bl	800e104 <getbits>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	b2da      	uxtb	r2, r3
 800c0f0:	4b37      	ldr	r3, [pc, #220]	; (800c1d0 <CAN_1_Transmit+0x25c>)
 800c0f2:	701a      	strb	r2, [r3, #0]
	CAN1_data_Tx_LM07[1] = getbits(*canData.n_wheel_FL,15,8);
 800c0f4:	4b31      	ldr	r3, [pc, #196]	; (800c1bc <CAN_1_Transmit+0x248>)
 800c0f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c0fa:	881b      	ldrh	r3, [r3, #0]
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	210f      	movs	r1, #15
 800c100:	2208      	movs	r2, #8
 800c102:	f001 ffff 	bl	800e104 <getbits>
 800c106:	4603      	mov	r3, r0
 800c108:	b2da      	uxtb	r2, r3
 800c10a:	4b31      	ldr	r3, [pc, #196]	; (800c1d0 <CAN_1_Transmit+0x25c>)
 800c10c:	705a      	strb	r2, [r3, #1]
	CAN1_data_Tx_LM07[2] = getbits(*canData.n_wheel_FR,7,8);
 800c10e:	4b2b      	ldr	r3, [pc, #172]	; (800c1bc <CAN_1_Transmit+0x248>)
 800c110:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c114:	881b      	ldrh	r3, [r3, #0]
 800c116:	4618      	mov	r0, r3
 800c118:	2107      	movs	r1, #7
 800c11a:	2208      	movs	r2, #8
 800c11c:	f001 fff2 	bl	800e104 <getbits>
 800c120:	4603      	mov	r3, r0
 800c122:	b2da      	uxtb	r2, r3
 800c124:	4b2a      	ldr	r3, [pc, #168]	; (800c1d0 <CAN_1_Transmit+0x25c>)
 800c126:	709a      	strb	r2, [r3, #2]
	CAN1_data_Tx_LM07[3] = getbits(*canData.n_wheel_FR,15,8);
 800c128:	4b24      	ldr	r3, [pc, #144]	; (800c1bc <CAN_1_Transmit+0x248>)
 800c12a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c12e:	881b      	ldrh	r3, [r3, #0]
 800c130:	4618      	mov	r0, r3
 800c132:	210f      	movs	r1, #15
 800c134:	2208      	movs	r2, #8
 800c136:	f001 ffe5 	bl	800e104 <getbits>
 800c13a:	4603      	mov	r3, r0
 800c13c:	b2da      	uxtb	r2, r3
 800c13e:	4b24      	ldr	r3, [pc, #144]	; (800c1d0 <CAN_1_Transmit+0x25c>)
 800c140:	70da      	strb	r2, [r3, #3]
	CAN1_data_Tx_LM07[4] = getbits(*canData.n_wheel_RL,7,8);
 800c142:	4b1e      	ldr	r3, [pc, #120]	; (800c1bc <CAN_1_Transmit+0x248>)
 800c144:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c148:	881b      	ldrh	r3, [r3, #0]
 800c14a:	4618      	mov	r0, r3
 800c14c:	2107      	movs	r1, #7
 800c14e:	2208      	movs	r2, #8
 800c150:	f001 ffd8 	bl	800e104 <getbits>
 800c154:	4603      	mov	r3, r0
 800c156:	b2da      	uxtb	r2, r3
 800c158:	4b1d      	ldr	r3, [pc, #116]	; (800c1d0 <CAN_1_Transmit+0x25c>)
 800c15a:	711a      	strb	r2, [r3, #4]
	CAN1_data_Tx_LM07[5] = getbits(*canData.n_wheel_RL,15,8);
 800c15c:	4b17      	ldr	r3, [pc, #92]	; (800c1bc <CAN_1_Transmit+0x248>)
 800c15e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c162:	881b      	ldrh	r3, [r3, #0]
 800c164:	4618      	mov	r0, r3
 800c166:	210f      	movs	r1, #15
 800c168:	2208      	movs	r2, #8
 800c16a:	f001 ffcb 	bl	800e104 <getbits>
 800c16e:	4603      	mov	r3, r0
 800c170:	b2da      	uxtb	r2, r3
 800c172:	4b17      	ldr	r3, [pc, #92]	; (800c1d0 <CAN_1_Transmit+0x25c>)
 800c174:	715a      	strb	r2, [r3, #5]
	CAN1_data_Tx_LM07[6] = getbits(*canData.n_wheel_RR,7,8);
 800c176:	4b11      	ldr	r3, [pc, #68]	; (800c1bc <CAN_1_Transmit+0x248>)
 800c178:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c17c:	881b      	ldrh	r3, [r3, #0]
 800c17e:	4618      	mov	r0, r3
 800c180:	2107      	movs	r1, #7
 800c182:	2208      	movs	r2, #8
 800c184:	f001 ffbe 	bl	800e104 <getbits>
 800c188:	4603      	mov	r3, r0
 800c18a:	b2da      	uxtb	r2, r3
 800c18c:	4b10      	ldr	r3, [pc, #64]	; (800c1d0 <CAN_1_Transmit+0x25c>)
 800c18e:	719a      	strb	r2, [r3, #6]
	CAN1_data_Tx_LM07[7] = getbits(*canData.n_wheel_RR,15,8);
 800c190:	4b0a      	ldr	r3, [pc, #40]	; (800c1bc <CAN_1_Transmit+0x248>)
 800c192:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c196:	881b      	ldrh	r3, [r3, #0]
 800c198:	4618      	mov	r0, r3
 800c19a:	210f      	movs	r1, #15
 800c19c:	2208      	movs	r2, #8
 800c19e:	f001 ffb1 	bl	800e104 <getbits>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	b2da      	uxtb	r2, r3
 800c1a6:	4b0a      	ldr	r3, [pc, #40]	; (800c1d0 <CAN_1_Transmit+0x25c>)
 800c1a8:	71da      	strb	r2, [r3, #7]

	CAN_NODE_MO_UpdateData(&CAN_1_LMO_07_Config, CAN1_data_Tx_LM07);
 800c1aa:	480a      	ldr	r0, [pc, #40]	; (800c1d4 <CAN_1_Transmit+0x260>)
 800c1ac:	4908      	ldr	r1, [pc, #32]	; (800c1d0 <CAN_1_Transmit+0x25c>)
 800c1ae:	f7ff f923 	bl	800b3f8 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_1_LMO_07_Config);
 800c1b2:	4808      	ldr	r0, [pc, #32]	; (800c1d4 <CAN_1_Transmit+0x260>)
 800c1b4:	f7ff f8fc 	bl	800b3b0 <CAN_NODE_MO_Transmit>
}
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	200013c0 	.word	0x200013c0
 800c1c0:	2000082c 	.word	0x2000082c
 800c1c4:	0800f710 	.word	0x0800f710
 800c1c8:	20000834 	.word	0x20000834
 800c1cc:	0800f71c 	.word	0x0800f71c
 800c1d0:	2000083c 	.word	0x2000083c
 800c1d4:	0800f728 	.word	0x0800f728

0800c1d8 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800c1e4:	78fb      	ldrb	r3, [r7, #3]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	409a      	lsls	r2, r3
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	605a      	str	r2, [r3, #4]
}
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	460b      	mov	r3, r1
 800c202:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800c204:	78fb      	ldrb	r3, [r7, #3]
 800c206:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c20a:	409a      	lsls	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	605a      	str	r2, [r3, #4]
}
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop

0800c21c <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	7c1b      	ldrb	r3, [r3, #16]
 800c22c:	4610      	mov	r0, r2
 800c22e:	4619      	mov	r1, r3
 800c230:	f7ff ffd2 	bl	800c1d8 <XMC_GPIO_SetOutputHigh>
}
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop

0800c23c <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	7c1b      	ldrb	r3, [r3, #16]
 800c24c:	4610      	mov	r0, r2
 800c24e:	4619      	mov	r1, r3
 800c250:	f7ff ffd2 	bl	800c1f8 <XMC_GPIO_SetOutputLow>
}
 800c254:	3708      	adds	r7, #8
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop

0800c25c <CAN_2_ini>:
uint8_t *n_wheel_RR_mpros_LSB, *n_wheel_RR_mpros_MSB;

boolean_T CAN_2_RES = true;

void CAN_2_ini()
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	af00      	add	r7, sp, #0
	//Termination Resistor on CAN 2
	if (CAN_2_RES)
 800c260:	4b77      	ldr	r3, [pc, #476]	; (800c440 <CAN_2_ini+0x1e4>)
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d003      	beq.n	800c270 <CAN_2_ini+0x14>
		DIGITAL_IO_SetOutputHigh (&CAN2_Res);
 800c268:	4876      	ldr	r0, [pc, #472]	; (800c444 <CAN_2_ini+0x1e8>)
 800c26a:	f7ff ffd7 	bl	800c21c <DIGITAL_IO_SetOutputHigh>
 800c26e:	e002      	b.n	800c276 <CAN_2_ini+0x1a>
	else
		DIGITAL_IO_SetOutputLow (&CAN2_Res);
 800c270:	4874      	ldr	r0, [pc, #464]	; (800c444 <CAN_2_ini+0x1e8>)
 800c272:	f7ff ffe3 	bl	800c23c <DIGITAL_IO_SetOutputLow>

	//------ABS 0x80 LM01------
	canData.g_yaw_ABS 			= &g_yaw_ABS;
 800c276:	4b74      	ldr	r3, [pc, #464]	; (800c448 <CAN_2_ini+0x1ec>)
 800c278:	4a74      	ldr	r2, [pc, #464]	; (800c44c <CAN_2_ini+0x1f0>)
 800c27a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	g_yaw_ABS_LSB				= &VCU_DW.VAR_IN_g_yaw_ABS_LSB;
 800c27e:	4b74      	ldr	r3, [pc, #464]	; (800c450 <CAN_2_ini+0x1f4>)
 800c280:	4a74      	ldr	r2, [pc, #464]	; (800c454 <CAN_2_ini+0x1f8>)
 800c282:	601a      	str	r2, [r3, #0]
	g_yaw_ABS_MSB				= &VCU_DW.VAR_IN_g_long_ABS_MSB;
 800c284:	4b74      	ldr	r3, [pc, #464]	; (800c458 <CAN_2_ini+0x1fc>)
 800c286:	4a75      	ldr	r2, [pc, #468]	; (800c45c <CAN_2_ini+0x200>)
 800c288:	601a      	str	r2, [r3, #0]
	canData.g_long_ABS			= &g_long_ABS;
 800c28a:	4b6f      	ldr	r3, [pc, #444]	; (800c448 <CAN_2_ini+0x1ec>)
 800c28c:	4a74      	ldr	r2, [pc, #464]	; (800c460 <CAN_2_ini+0x204>)
 800c28e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	g_long_ABS_LSB				= &VCU_DW.VAR_IN_g_long_ABS_LSB;
 800c292:	4b74      	ldr	r3, [pc, #464]	; (800c464 <CAN_2_ini+0x208>)
 800c294:	4a74      	ldr	r2, [pc, #464]	; (800c468 <CAN_2_ini+0x20c>)
 800c296:	601a      	str	r2, [r3, #0]
	g_long_ABS_MSB				= &VCU_DW.VAR_IN_g_long_ABS_MSB;
 800c298:	4b74      	ldr	r3, [pc, #464]	; (800c46c <CAN_2_ini+0x210>)
 800c29a:	4a70      	ldr	r2, [pc, #448]	; (800c45c <CAN_2_ini+0x200>)
 800c29c:	601a      	str	r2, [r3, #0]

	//------ABS 0x5C0 LM02------
	canData.ABS_switchstate_CAN2	= &VCU_DW.VAR_IN_ABS_switchstate;
 800c29e:	4b6a      	ldr	r3, [pc, #424]	; (800c448 <CAN_2_ini+0x1ec>)
 800c2a0:	4a73      	ldr	r2, [pc, #460]	; (800c470 <CAN_2_ini+0x214>)
 800c2a2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	canData.p_brake_F_CAN2			= &p_brake_F;
 800c2a6:	4b68      	ldr	r3, [pc, #416]	; (800c448 <CAN_2_ini+0x1ec>)
 800c2a8:	4a72      	ldr	r2, [pc, #456]	; (800c474 <CAN_2_ini+0x218>)
 800c2aa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	p_brake_F_LSB					= &VCU_DW.VAR_IN_p_brake_F_LSB;
 800c2ae:	4b72      	ldr	r3, [pc, #456]	; (800c478 <CAN_2_ini+0x21c>)
 800c2b0:	4a72      	ldr	r2, [pc, #456]	; (800c47c <CAN_2_ini+0x220>)
 800c2b2:	601a      	str	r2, [r3, #0]
	p_brake_F_MSB					= &VCU_DW.VAR_IN_p_brake_F_MSB;
 800c2b4:	4b72      	ldr	r3, [pc, #456]	; (800c480 <CAN_2_ini+0x224>)
 800c2b6:	4a73      	ldr	r2, [pc, #460]	; (800c484 <CAN_2_ini+0x228>)
 800c2b8:	601a      	str	r2, [r3, #0]
	canData.ABS_BL_swtich_CAN2		= &VCU_DW.VAR_IN_ABS_BL_switch;
 800c2ba:	4b63      	ldr	r3, [pc, #396]	; (800c448 <CAN_2_ini+0x1ec>)
 800c2bc:	4a72      	ldr	r2, [pc, #456]	; (800c488 <CAN_2_ini+0x22c>)
 800c2be:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	canData.ABS_active_CAN2			= &VCU_DW.VAR_IN_ABS_active;
 800c2c2:	4b61      	ldr	r3, [pc, #388]	; (800c448 <CAN_2_ini+0x1ec>)
 800c2c4:	4a71      	ldr	r2, [pc, #452]	; (800c48c <CAN_2_ini+0x230>)
 800c2c6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	canData.ABS_EBD_lamp_CAN2		= &VCU_DW.VAR_IN_ABS_EBD_Lamp;
 800c2ca:	4b5f      	ldr	r3, [pc, #380]	; (800c448 <CAN_2_ini+0x1ec>)
 800c2cc:	4a70      	ldr	r2, [pc, #448]	; (800c490 <CAN_2_ini+0x234>)
 800c2ce:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	//------Wheel n 0x140 LM03------
	canData.n_wheel_FL_mpros	= &n_wheel_FL_mpros;
 800c2d2:	4b5d      	ldr	r3, [pc, #372]	; (800c448 <CAN_2_ini+0x1ec>)
 800c2d4:	4a6f      	ldr	r2, [pc, #444]	; (800c494 <CAN_2_ini+0x238>)
 800c2d6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	n_wheel_FL_mpros_LSB 		= &VCU_DW.VAR_IN_n_wheel_FL_mpros_LSB;
 800c2da:	4b6f      	ldr	r3, [pc, #444]	; (800c498 <CAN_2_ini+0x23c>)
 800c2dc:	4a6f      	ldr	r2, [pc, #444]	; (800c49c <CAN_2_ini+0x240>)
 800c2de:	601a      	str	r2, [r3, #0]
	n_wheel_FL_mpros_MSB 		= &VCU_DW.VAR_IN_n_wheel_FL_mpros_MSB;
 800c2e0:	4b6f      	ldr	r3, [pc, #444]	; (800c4a0 <CAN_2_ini+0x244>)
 800c2e2:	4a70      	ldr	r2, [pc, #448]	; (800c4a4 <CAN_2_ini+0x248>)
 800c2e4:	601a      	str	r2, [r3, #0]

	//------Wheel n 0x142 LM04------
	canData.n_wheel_FR_mpros	= &n_wheel_FR_mpros;
 800c2e6:	4b58      	ldr	r3, [pc, #352]	; (800c448 <CAN_2_ini+0x1ec>)
 800c2e8:	4a6f      	ldr	r2, [pc, #444]	; (800c4a8 <CAN_2_ini+0x24c>)
 800c2ea:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	n_wheel_FR_mpros_LSB 		= &VCU_DW.VAR_IN_n_wheel_FR_mpros_LSB;
 800c2ee:	4b6f      	ldr	r3, [pc, #444]	; (800c4ac <CAN_2_ini+0x250>)
 800c2f0:	4a6f      	ldr	r2, [pc, #444]	; (800c4b0 <CAN_2_ini+0x254>)
 800c2f2:	601a      	str	r2, [r3, #0]
	n_wheel_FR_mpros_MSB 		= &VCU_DW.VAR_IN_n_wheel_FR_mpros_MSB;
 800c2f4:	4b6f      	ldr	r3, [pc, #444]	; (800c4b4 <CAN_2_ini+0x258>)
 800c2f6:	4a70      	ldr	r2, [pc, #448]	; (800c4b8 <CAN_2_ini+0x25c>)
 800c2f8:	601a      	str	r2, [r3, #0]

	//------Wheel n 0x340 LM05------
	canData.n_wheel_RL_mpros	= &n_wheel_RL_mpros;
 800c2fa:	4b53      	ldr	r3, [pc, #332]	; (800c448 <CAN_2_ini+0x1ec>)
 800c2fc:	4a6f      	ldr	r2, [pc, #444]	; (800c4bc <CAN_2_ini+0x260>)
 800c2fe:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	n_wheel_RL_mpros_LSB 		= &VCU_DW.VAR_IN_n_wheel_RL_mpros_LSB;
 800c302:	4b6f      	ldr	r3, [pc, #444]	; (800c4c0 <CAN_2_ini+0x264>)
 800c304:	4a6f      	ldr	r2, [pc, #444]	; (800c4c4 <CAN_2_ini+0x268>)
 800c306:	601a      	str	r2, [r3, #0]
	n_wheel_RL_mpros_MSB 		= &VCU_DW.VAR_IN_n_wheel_RL_mpros_MSB;
 800c308:	4b6f      	ldr	r3, [pc, #444]	; (800c4c8 <CAN_2_ini+0x26c>)
 800c30a:	4a70      	ldr	r2, [pc, #448]	; (800c4cc <CAN_2_ini+0x270>)
 800c30c:	601a      	str	r2, [r3, #0]

	//------Wheel n 0x342 LM06------
	canData.n_wheel_RR_mpros	= &n_wheel_RR_mpros;
 800c30e:	4b4e      	ldr	r3, [pc, #312]	; (800c448 <CAN_2_ini+0x1ec>)
 800c310:	4a6f      	ldr	r2, [pc, #444]	; (800c4d0 <CAN_2_ini+0x274>)
 800c312:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	n_wheel_RR_mpros_LSB 		= &VCU_DW.VAR_IN_n_wheel_RR_mpros_LSB;
 800c316:	4b6f      	ldr	r3, [pc, #444]	; (800c4d4 <CAN_2_ini+0x278>)
 800c318:	4a6f      	ldr	r2, [pc, #444]	; (800c4d8 <CAN_2_ini+0x27c>)
 800c31a:	601a      	str	r2, [r3, #0]
	n_wheel_RR_mpros_MSB 		= &VCU_DW.VAR_IN_n_wheel_RR_mpros_MSB;
 800c31c:	4b6f      	ldr	r3, [pc, #444]	; (800c4dc <CAN_2_ini+0x280>)
 800c31e:	4a70      	ldr	r2, [pc, #448]	; (800c4e0 <CAN_2_ini+0x284>)
 800c320:	601a      	str	r2, [r3, #0]
	//BSPD 0x200 LM07

	//BSPD 0x201 LM08

	//Wheelforce 0x7E0 LM09
	canData.f_FL			= &VCU_DW.VAR_OUT_f_FL;
 800c322:	4b49      	ldr	r3, [pc, #292]	; (800c448 <CAN_2_ini+0x1ec>)
 800c324:	4a6f      	ldr	r2, [pc, #444]	; (800c4e4 <CAN_2_ini+0x288>)
 800c326:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	canData.f_FR			= &VCU_DW.VAR_OUT_f_FR;
 800c32a:	4b47      	ldr	r3, [pc, #284]	; (800c448 <CAN_2_ini+0x1ec>)
 800c32c:	4a6e      	ldr	r2, [pc, #440]	; (800c4e8 <CAN_2_ini+0x28c>)
 800c32e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	//canData.f_RL			= (uint16_t*)&VCU_DW.VAR_OUT_f_RL;
	//canData.f_RR			= (uint16_t*)&VCU_DW.VAR_OUT_f_RR;
	canData.TR1_VSense_WP	= &VAR_TR1_VSense_WP;
 800c332:	4b45      	ldr	r3, [pc, #276]	; (800c448 <CAN_2_ini+0x1ec>)
 800c334:	4a6d      	ldr	r2, [pc, #436]	; (800c4ec <CAN_2_ini+0x290>)
 800c336:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	canData.TR2_VSense_FAN1	= &VAR_TR2_VSense_FAN1;
 800c33a:	4b43      	ldr	r3, [pc, #268]	; (800c448 <CAN_2_ini+0x1ec>)
 800c33c:	4a6c      	ldr	r2, [pc, #432]	; (800c4f0 <CAN_2_ini+0x294>)
 800c33e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	canData.TR3_VSense_FAN2	= &VAR_TR3_VSense_FAN2;
 800c342:	4b41      	ldr	r3, [pc, #260]	; (800c448 <CAN_2_ini+0x1ec>)
 800c344:	4a6b      	ldr	r2, [pc, #428]	; (800c4f4 <CAN_2_ini+0x298>)
 800c346:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	//Measurement 0x7E2 LM10
	//canData.x_RH_RL			= (uint8_t*)&VCU_DW.VAR_OUT_x_RH_RL;
	//canData.x_RH_RR			= (uint8_t*)&VCU_DW.VAR_OUT_x_RH_RR;
	canData.Brakelight		= &VCU_DW.VAR_OUT_Brakelight;
 800c34a:	4b3f      	ldr	r3, [pc, #252]	; (800c448 <CAN_2_ini+0x1ec>)
 800c34c:	4a6a      	ldr	r2, [pc, #424]	; (800c4f8 <CAN_2_ini+0x29c>)
 800c34e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	canData.x_RH_F			= &VCU_DW.VAR_OUT_x_RH_F;
 800c352:	4b3d      	ldr	r3, [pc, #244]	; (800c448 <CAN_2_ini+0x1ec>)
 800c354:	4a69      	ldr	r2, [pc, #420]	; (800c4fc <CAN_2_ini+0x2a0>)
 800c356:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	canData.x_clutch		= &VCU_DW.VAR_OUT_x_clutch;
 800c35a:	4b3b      	ldr	r3, [pc, #236]	; (800c448 <CAN_2_ini+0x1ec>)
 800c35c:	4a68      	ldr	r2, [pc, #416]	; (800c500 <CAN_2_ini+0x2a4>)
 800c35e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	canData.x_clutch_STW	= &VCU_DW.VAR_OUT_x_clutch_STW;
 800c362:	4b39      	ldr	r3, [pc, #228]	; (800c448 <CAN_2_ini+0x1ec>)
 800c364:	4a67      	ldr	r2, [pc, #412]	; (800c504 <CAN_2_ini+0x2a8>)
 800c366:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	canData.p_pneu			= &VCU_DW.VAR_OUT_p_pneum;
 800c36a:	4b37      	ldr	r3, [pc, #220]	; (800c448 <CAN_2_ini+0x1ec>)
 800c36c:	4a66      	ldr	r2, [pc, #408]	; (800c508 <CAN_2_ini+0x2ac>)
 800c36e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	canData.U_bat			= &VCU_DW.VAR_OUT_U_Bat;
 800c372:	4b35      	ldr	r3, [pc, #212]	; (800c448 <CAN_2_ini+0x1ec>)
 800c374:	4a65      	ldr	r2, [pc, #404]	; (800c50c <CAN_2_ini+0x2b0>)
 800c376:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	canData.t_board_VCU		= &VAR_boardTemp;
 800c37a:	4b33      	ldr	r3, [pc, #204]	; (800c448 <CAN_2_ini+0x1ec>)
 800c37c:	4a64      	ldr	r2, [pc, #400]	; (800c510 <CAN_2_ini+0x2b4>)
 800c37e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

	//Error 0x7E3 LM11
	canData.plausi_error 	= 0;
 800c382:	4b31      	ldr	r3, [pc, #196]	; (800c448 <CAN_2_ini+0x1ec>)
 800c384:	f503 71a0 	add.w	r1, r3, #320	; 0x140
 800c388:	f04f 0200 	mov.w	r2, #0
 800c38c:	f04f 0300 	mov.w	r3, #0
 800c390:	e9c1 2300 	strd	r2, r3, [r1]

	//Manual Control 0x7FF LM12
	canData.ManualControl_Active = 0;
 800c394:	4b2c      	ldr	r3, [pc, #176]	; (800c448 <CAN_2_ini+0x1ec>)
 800c396:	2200      	movs	r2, #0
 800c398:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	canData.ManConOn_MHJ9_IN = 0;
 800c39c:	4b2a      	ldr	r3, [pc, #168]	; (800c448 <CAN_2_ini+0x1ec>)
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	canData.ManConOn_MHJ9_OUT = 0;
 800c3a4:	4b28      	ldr	r3, [pc, #160]	; (800c448 <CAN_2_ini+0x1ec>)
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	canData.ManConOn_Waterpump = 0;
 800c3ac:	4b26      	ldr	r3, [pc, #152]	; (800c448 <CAN_2_ini+0x1ec>)
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
	canData.ManConOn_Fans1 = 0;
 800c3b4:	4b24      	ldr	r3, [pc, #144]	; (800c448 <CAN_2_ini+0x1ec>)
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	canData.ManConOn_Fans2 = 0;
 800c3bc:	4b22      	ldr	r3, [pc, #136]	; (800c448 <CAN_2_ini+0x1ec>)
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	canData.ManConOn_VOVGShiftDown = 0;
 800c3c4:	4b20      	ldr	r3, [pc, #128]	; (800c448 <CAN_2_ini+0x1ec>)
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	canData.ManConOn_VOVGShiftUp = 0;
 800c3cc:	4b1e      	ldr	r3, [pc, #120]	; (800c448 <CAN_2_ini+0x1ec>)
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
	canData.ManConOn_IgnCut = 0;
 800c3d4:	4b1c      	ldr	r3, [pc, #112]	; (800c448 <CAN_2_ini+0x1ec>)
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	canData.ManConOn_VOVG_IN = 0;
 800c3dc:	4b1a      	ldr	r3, [pc, #104]	; (800c448 <CAN_2_ini+0x1ec>)
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	canData.ManConOn_VOVG_OUT = 0;
 800c3e4:	4b18      	ldr	r3, [pc, #96]	; (800c448 <CAN_2_ini+0x1ec>)
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	canData.ManConVar_MHJ9_IN = 0;
 800c3ec:	4b16      	ldr	r3, [pc, #88]	; (800c448 <CAN_2_ini+0x1ec>)
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
	canData.ManConVar_MHJ9_OUT = 0;
 800c3f4:	4b14      	ldr	r3, [pc, #80]	; (800c448 <CAN_2_ini+0x1ec>)
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	canData.ManConVar_Waterpump = 0;
 800c3fc:	4b12      	ldr	r3, [pc, #72]	; (800c448 <CAN_2_ini+0x1ec>)
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	canData.ManConVar_Fans1 = 0;
 800c404:	4b10      	ldr	r3, [pc, #64]	; (800c448 <CAN_2_ini+0x1ec>)
 800c406:	2200      	movs	r2, #0
 800c408:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
	canData.ManConVar_Fans2 = 0;
 800c40c:	4b0e      	ldr	r3, [pc, #56]	; (800c448 <CAN_2_ini+0x1ec>)
 800c40e:	2200      	movs	r2, #0
 800c410:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
	canData.ManConVar_VOVGShiftDown = 0;
 800c414:	4b0c      	ldr	r3, [pc, #48]	; (800c448 <CAN_2_ini+0x1ec>)
 800c416:	2200      	movs	r2, #0
 800c418:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	canData.ManConVar_VOVGShiftUp = 0;
 800c41c:	4b0a      	ldr	r3, [pc, #40]	; (800c448 <CAN_2_ini+0x1ec>)
 800c41e:	2200      	movs	r2, #0
 800c420:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	canData.ManConVar_IgnCut = 0;
 800c424:	4b08      	ldr	r3, [pc, #32]	; (800c448 <CAN_2_ini+0x1ec>)
 800c426:	2200      	movs	r2, #0
 800c428:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
	canData.ManConVar_VOVG_IN = 0;
 800c42c:	4b06      	ldr	r3, [pc, #24]	; (800c448 <CAN_2_ini+0x1ec>)
 800c42e:	2200      	movs	r2, #0
 800c430:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	canData.ManConVar_VOVG_OUT = 0;
 800c434:	4b04      	ldr	r3, [pc, #16]	; (800c448 <CAN_2_ini+0x1ec>)
 800c436:	2200      	movs	r2, #0
 800c438:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
}
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	20000621 	.word	0x20000621
 800c444:	0800f664 	.word	0x0800f664
 800c448:	200013c0 	.word	0x200013c0
 800c44c:	20000860 	.word	0x20000860
 800c450:	20001338 	.word	0x20001338
 800c454:	20001212 	.word	0x20001212
 800c458:	20001334 	.word	0x20001334
 800c45c:	20001211 	.word	0x20001211
 800c460:	20000862 	.word	0x20000862
 800c464:	2000130c 	.word	0x2000130c
 800c468:	20001213 	.word	0x20001213
 800c46c:	20001320 	.word	0x20001320
 800c470:	200011fa 	.word	0x200011fa
 800c474:	20000864 	.word	0x20000864
 800c478:	20001318 	.word	0x20001318
 800c47c:	200011f8 	.word	0x200011f8
 800c480:	20001324 	.word	0x20001324
 800c484:	200011fb 	.word	0x200011fb
 800c488:	200011f9 	.word	0x200011f9
 800c48c:	200011fd 	.word	0x200011fd
 800c490:	200011fc 	.word	0x200011fc
 800c494:	20000866 	.word	0x20000866
 800c498:	2000131c 	.word	0x2000131c
 800c49c:	20001203 	.word	0x20001203
 800c4a0:	20001328 	.word	0x20001328
 800c4a4:	200011ff 	.word	0x200011ff
 800c4a8:	20000868 	.word	0x20000868
 800c4ac:	2000133c 	.word	0x2000133c
 800c4b0:	20001200 	.word	0x20001200
 800c4b4:	20001308 	.word	0x20001308
 800c4b8:	20001201 	.word	0x20001201
 800c4bc:	2000086a 	.word	0x2000086a
 800c4c0:	20001330 	.word	0x20001330
 800c4c4:	20001202 	.word	0x20001202
 800c4c8:	20001310 	.word	0x20001310
 800c4cc:	20001204 	.word	0x20001204
 800c4d0:	2000086c 	.word	0x2000086c
 800c4d4:	2000132c 	.word	0x2000132c
 800c4d8:	20001205 	.word	0x20001205
 800c4dc:	20001314 	.word	0x20001314
 800c4e0:	20001206 	.word	0x20001206
 800c4e4:	20001194 	.word	0x20001194
 800c4e8:	20001196 	.word	0x20001196
 800c4ec:	200012e0 	.word	0x200012e0
 800c4f0:	20001300 	.word	0x20001300
 800c4f4:	200012d0 	.word	0x200012d0
 800c4f8:	20001229 	.word	0x20001229
 800c4fc:	200011f2 	.word	0x200011f2
 800c500:	200011f3 	.word	0x200011f3
 800c504:	200011f4 	.word	0x200011f4
 800c508:	200011f5 	.word	0x200011f5
 800c50c:	200011f6 	.word	0x200011f6
 800c510:	200012f0 	.word	0x200012f0

0800c514 <CAN_2_Receive>:

void CAN_2_Receive()
{
 800c514:	b598      	push	{r3, r4, r7, lr}
 800c516:	af00      	add	r7, sp, #0
	//------ABS 0x80 LM01------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_01_Config);
 800c518:	48b5      	ldr	r0, [pc, #724]	; (800c7f0 <CAN_2_Receive+0x2dc>)
 800c51a:	f7fe ff5b 	bl	800b3d4 <CAN_NODE_MO_Receive>

	*canData.g_yaw_ABS 			= checkRangePlausi(CAN_2_LMO_01_Config.mo_ptr->can_data_word[0],ERR_G_YAW_ABS);
 800c51e:	4bb5      	ldr	r3, [pc, #724]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c520:	f8d3 40cc 	ldr.w	r4, [r3, #204]	; 0xcc
 800c524:	4bb2      	ldr	r3, [pc, #712]	; (800c7f0 <CAN_2_Receive+0x2dc>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	8a1b      	ldrh	r3, [r3, #16]
 800c52a:	4618      	mov	r0, r3
 800c52c:	2103      	movs	r1, #3
 800c52e:	f000 fbff 	bl	800cd30 <checkRangePlausi>
 800c532:	4603      	mov	r3, r0
 800c534:	b29b      	uxth	r3, r3
 800c536:	8023      	strh	r3, [r4, #0]
	*g_yaw_ABS_LSB				= getbits(*canData.g_yaw_ABS, 7, 8);
 800c538:	4baf      	ldr	r3, [pc, #700]	; (800c7f8 <CAN_2_Receive+0x2e4>)
 800c53a:	681c      	ldr	r4, [r3, #0]
 800c53c:	4bad      	ldr	r3, [pc, #692]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c53e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c542:	881b      	ldrh	r3, [r3, #0]
 800c544:	4618      	mov	r0, r3
 800c546:	2107      	movs	r1, #7
 800c548:	2208      	movs	r2, #8
 800c54a:	f001 fddb 	bl	800e104 <getbits>
 800c54e:	4603      	mov	r3, r0
 800c550:	b2db      	uxtb	r3, r3
 800c552:	7023      	strb	r3, [r4, #0]
	*g_yaw_ABS_MSB				= getbits(*canData.g_yaw_ABS, 15, 8);
 800c554:	4ba9      	ldr	r3, [pc, #676]	; (800c7fc <CAN_2_Receive+0x2e8>)
 800c556:	681c      	ldr	r4, [r3, #0]
 800c558:	4ba6      	ldr	r3, [pc, #664]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c55a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c55e:	881b      	ldrh	r3, [r3, #0]
 800c560:	4618      	mov	r0, r3
 800c562:	210f      	movs	r1, #15
 800c564:	2208      	movs	r2, #8
 800c566:	f001 fdcd 	bl	800e104 <getbits>
 800c56a:	4603      	mov	r3, r0
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	7023      	strb	r3, [r4, #0]
	*canData.g_long_ABS			= checkRangePlausi(CAN_2_LMO_01_Config.mo_ptr->can_data_word[1],ERR_G_LONG_ABS);
 800c570:	4ba0      	ldr	r3, [pc, #640]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c572:	f8d3 40d0 	ldr.w	r4, [r3, #208]	; 0xd0
 800c576:	4b9e      	ldr	r3, [pc, #632]	; (800c7f0 <CAN_2_Receive+0x2dc>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	8a5b      	ldrh	r3, [r3, #18]
 800c57c:	4618      	mov	r0, r3
 800c57e:	2102      	movs	r1, #2
 800c580:	f000 fbd6 	bl	800cd30 <checkRangePlausi>
 800c584:	4603      	mov	r3, r0
 800c586:	b29b      	uxth	r3, r3
 800c588:	8023      	strh	r3, [r4, #0]
	*g_long_ABS_LSB				= getbits(*canData.g_long_ABS, 7, 8);
 800c58a:	4b9d      	ldr	r3, [pc, #628]	; (800c800 <CAN_2_Receive+0x2ec>)
 800c58c:	681c      	ldr	r4, [r3, #0]
 800c58e:	4b99      	ldr	r3, [pc, #612]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c590:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c594:	881b      	ldrh	r3, [r3, #0]
 800c596:	4618      	mov	r0, r3
 800c598:	2107      	movs	r1, #7
 800c59a:	2208      	movs	r2, #8
 800c59c:	f001 fdb2 	bl	800e104 <getbits>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	7023      	strb	r3, [r4, #0]
	*g_long_ABS_MSB				= getbits(*canData.g_long_ABS, 15, 8);
 800c5a6:	4b97      	ldr	r3, [pc, #604]	; (800c804 <CAN_2_Receive+0x2f0>)
 800c5a8:	681c      	ldr	r4, [r3, #0]
 800c5aa:	4b92      	ldr	r3, [pc, #584]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c5ac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c5b0:	881b      	ldrh	r3, [r3, #0]
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	210f      	movs	r1, #15
 800c5b6:	2208      	movs	r2, #8
 800c5b8:	f001 fda4 	bl	800e104 <getbits>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	7023      	strb	r3, [r4, #0]

	//------ABS 0x5C0 LM02------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_02_Config);
 800c5c2:	4891      	ldr	r0, [pc, #580]	; (800c808 <CAN_2_Receive+0x2f4>)
 800c5c4:	f7fe ff06 	bl	800b3d4 <CAN_NODE_MO_Receive>

	*canData.ABS_switchstate_CAN2	= CAN_2_LMO_02_Config.mo_ptr->can_data_byte[0];
 800c5c8:	4b8a      	ldr	r3, [pc, #552]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c5ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c5ce:	4a8e      	ldr	r2, [pc, #568]	; (800c808 <CAN_2_Receive+0x2f4>)
 800c5d0:	6812      	ldr	r2, [r2, #0]
 800c5d2:	7c12      	ldrb	r2, [r2, #16]
 800c5d4:	701a      	strb	r2, [r3, #0]
	*canData.p_brake_F_CAN2			= checkRangePlausi(getbits(CAN_2_LMO_02_Config.mo_ptr->can_data_long,23,16),ERR_P_BRAKE_F);
 800c5d6:	4b87      	ldr	r3, [pc, #540]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c5d8:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 800c5dc:	4b8a      	ldr	r3, [pc, #552]	; (800c808 <CAN_2_Receive+0x2f4>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	2117      	movs	r1, #23
 800c5ea:	2210      	movs	r2, #16
 800c5ec:	f001 fd8a 	bl	800e104 <getbits>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	210d      	movs	r1, #13
 800c5f6:	f000 fb9b 	bl	800cd30 <checkRangePlausi>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	8023      	strh	r3, [r4, #0]
	*p_brake_F_LSB					= getbits(*canData.p_brake_F_CAN2, 7, 8);
 800c600:	4b82      	ldr	r3, [pc, #520]	; (800c80c <CAN_2_Receive+0x2f8>)
 800c602:	681c      	ldr	r4, [r3, #0]
 800c604:	4b7b      	ldr	r3, [pc, #492]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c606:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c60a:	881b      	ldrh	r3, [r3, #0]
 800c60c:	4618      	mov	r0, r3
 800c60e:	2107      	movs	r1, #7
 800c610:	2208      	movs	r2, #8
 800c612:	f001 fd77 	bl	800e104 <getbits>
 800c616:	4603      	mov	r3, r0
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	7023      	strb	r3, [r4, #0]
	*p_brake_F_MSB					= getbits(*canData.p_brake_F_CAN2, 15, 8);
 800c61c:	4b7c      	ldr	r3, [pc, #496]	; (800c810 <CAN_2_Receive+0x2fc>)
 800c61e:	681c      	ldr	r4, [r3, #0]
 800c620:	4b74      	ldr	r3, [pc, #464]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c622:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c626:	881b      	ldrh	r3, [r3, #0]
 800c628:	4618      	mov	r0, r3
 800c62a:	210f      	movs	r1, #15
 800c62c:	2208      	movs	r2, #8
 800c62e:	f001 fd69 	bl	800e104 <getbits>
 800c632:	4603      	mov	r3, r0
 800c634:	b2db      	uxtb	r3, r3
 800c636:	7023      	strb	r3, [r4, #0]
	*canData.ABS_BL_swtich_CAN2		= CAN_2_LMO_02_Config.mo_ptr->can_data_byte[3];
 800c638:	4b6e      	ldr	r3, [pc, #440]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c63a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c63e:	4a72      	ldr	r2, [pc, #456]	; (800c808 <CAN_2_Receive+0x2f4>)
 800c640:	6812      	ldr	r2, [r2, #0]
 800c642:	7cd2      	ldrb	r2, [r2, #19]
 800c644:	701a      	strb	r2, [r3, #0]
	*canData.ABS_active_CAN2		= CAN_2_LMO_02_Config.mo_ptr->can_data_byte[4];
 800c646:	4b6b      	ldr	r3, [pc, #428]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c64c:	4a6e      	ldr	r2, [pc, #440]	; (800c808 <CAN_2_Receive+0x2f4>)
 800c64e:	6812      	ldr	r2, [r2, #0]
 800c650:	7d12      	ldrb	r2, [r2, #20]
 800c652:	701a      	strb	r2, [r3, #0]
	*canData.ABS_EBD_lamp_CAN2		= CAN_2_LMO_02_Config.mo_ptr->can_data_byte[5];
 800c654:	4b67      	ldr	r3, [pc, #412]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c656:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c65a:	4a6b      	ldr	r2, [pc, #428]	; (800c808 <CAN_2_Receive+0x2f4>)
 800c65c:	6812      	ldr	r2, [r2, #0]
 800c65e:	7d52      	ldrb	r2, [r2, #21]
 800c660:	701a      	strb	r2, [r3, #0]

	//------Wheel n 0x140 LM03------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_03_Config);
 800c662:	486c      	ldr	r0, [pc, #432]	; (800c814 <CAN_2_Receive+0x300>)
 800c664:	f7fe feb6 	bl	800b3d4 <CAN_NODE_MO_Receive>

	*canData.n_wheel_FL_mpros	= checkRangePlausi(CAN_2_LMO_03_Config.mo_ptr->can_data_word[0],ERR_N_WHEEL_FL);
 800c668:	4b62      	ldr	r3, [pc, #392]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c66a:	f8d3 40ec 	ldr.w	r4, [r3, #236]	; 0xec
 800c66e:	4b69      	ldr	r3, [pc, #420]	; (800c814 <CAN_2_Receive+0x300>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	8a1b      	ldrh	r3, [r3, #16]
 800c674:	4618      	mov	r0, r3
 800c676:	2107      	movs	r1, #7
 800c678:	f000 fb5a 	bl	800cd30 <checkRangePlausi>
 800c67c:	4603      	mov	r3, r0
 800c67e:	b29b      	uxth	r3, r3
 800c680:	8023      	strh	r3, [r4, #0]
	*n_wheel_FL_mpros_LSB		= getbits(*canData.n_wheel_FL_mpros, 7, 8);
 800c682:	4b65      	ldr	r3, [pc, #404]	; (800c818 <CAN_2_Receive+0x304>)
 800c684:	681c      	ldr	r4, [r3, #0]
 800c686:	4b5b      	ldr	r3, [pc, #364]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c688:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800c68c:	881b      	ldrh	r3, [r3, #0]
 800c68e:	4618      	mov	r0, r3
 800c690:	2107      	movs	r1, #7
 800c692:	2208      	movs	r2, #8
 800c694:	f001 fd36 	bl	800e104 <getbits>
 800c698:	4603      	mov	r3, r0
 800c69a:	b2db      	uxtb	r3, r3
 800c69c:	7023      	strb	r3, [r4, #0]
	*n_wheel_FL_mpros_MSB		= getbits(*canData.n_wheel_FL_mpros, 15, 8);
 800c69e:	4b5f      	ldr	r3, [pc, #380]	; (800c81c <CAN_2_Receive+0x308>)
 800c6a0:	681c      	ldr	r4, [r3, #0]
 800c6a2:	4b54      	ldr	r3, [pc, #336]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c6a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800c6a8:	881b      	ldrh	r3, [r3, #0]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	210f      	movs	r1, #15
 800c6ae:	2208      	movs	r2, #8
 800c6b0:	f001 fd28 	bl	800e104 <getbits>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	7023      	strb	r3, [r4, #0]

	//------Wheel n 0x142 LM04------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_04_Config);
 800c6ba:	4859      	ldr	r0, [pc, #356]	; (800c820 <CAN_2_Receive+0x30c>)
 800c6bc:	f7fe fe8a 	bl	800b3d4 <CAN_NODE_MO_Receive>

	*canData.n_wheel_FR_mpros	= checkRangePlausi(CAN_2_LMO_04_Config.mo_ptr->can_data_word[0],ERR_N_WHEEL_FR);
 800c6c0:	4b4c      	ldr	r3, [pc, #304]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c6c2:	f8d3 40f0 	ldr.w	r4, [r3, #240]	; 0xf0
 800c6c6:	4b56      	ldr	r3, [pc, #344]	; (800c820 <CAN_2_Receive+0x30c>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	8a1b      	ldrh	r3, [r3, #16]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	2108      	movs	r1, #8
 800c6d0:	f000 fb2e 	bl	800cd30 <checkRangePlausi>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	8023      	strh	r3, [r4, #0]
	*n_wheel_FR_mpros_LSB		= getbits(*canData.n_wheel_FR_mpros, 7, 8);
 800c6da:	4b52      	ldr	r3, [pc, #328]	; (800c824 <CAN_2_Receive+0x310>)
 800c6dc:	681c      	ldr	r4, [r3, #0]
 800c6de:	4b45      	ldr	r3, [pc, #276]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c6e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c6e4:	881b      	ldrh	r3, [r3, #0]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	2107      	movs	r1, #7
 800c6ea:	2208      	movs	r2, #8
 800c6ec:	f001 fd0a 	bl	800e104 <getbits>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	7023      	strb	r3, [r4, #0]
	*n_wheel_FR_mpros_MSB		= getbits(*canData.n_wheel_FR_mpros, 15, 8);
 800c6f6:	4b4c      	ldr	r3, [pc, #304]	; (800c828 <CAN_2_Receive+0x314>)
 800c6f8:	681c      	ldr	r4, [r3, #0]
 800c6fa:	4b3e      	ldr	r3, [pc, #248]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c6fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c700:	881b      	ldrh	r3, [r3, #0]
 800c702:	4618      	mov	r0, r3
 800c704:	210f      	movs	r1, #15
 800c706:	2208      	movs	r2, #8
 800c708:	f001 fcfc 	bl	800e104 <getbits>
 800c70c:	4603      	mov	r3, r0
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	7023      	strb	r3, [r4, #0]

	//------Wheel n 0x340 LM05------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_05_Config);
 800c712:	4846      	ldr	r0, [pc, #280]	; (800c82c <CAN_2_Receive+0x318>)
 800c714:	f7fe fe5e 	bl	800b3d4 <CAN_NODE_MO_Receive>

	*canData.n_wheel_RL_mpros	= checkRangePlausi(CAN_2_LMO_05_Config.mo_ptr->can_data_word[0],ERR_N_WHEEL_RL);
 800c718:	4b36      	ldr	r3, [pc, #216]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c71a:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
 800c71e:	4b43      	ldr	r3, [pc, #268]	; (800c82c <CAN_2_Receive+0x318>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	8a1b      	ldrh	r3, [r3, #16]
 800c724:	4618      	mov	r0, r3
 800c726:	2109      	movs	r1, #9
 800c728:	f000 fb02 	bl	800cd30 <checkRangePlausi>
 800c72c:	4603      	mov	r3, r0
 800c72e:	b29b      	uxth	r3, r3
 800c730:	8023      	strh	r3, [r4, #0]
	*n_wheel_RL_mpros_LSB		= getbits(*canData.n_wheel_RL_mpros, 7, 8);
 800c732:	4b3f      	ldr	r3, [pc, #252]	; (800c830 <CAN_2_Receive+0x31c>)
 800c734:	681c      	ldr	r4, [r3, #0]
 800c736:	4b2f      	ldr	r3, [pc, #188]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c73c:	881b      	ldrh	r3, [r3, #0]
 800c73e:	4618      	mov	r0, r3
 800c740:	2107      	movs	r1, #7
 800c742:	2208      	movs	r2, #8
 800c744:	f001 fcde 	bl	800e104 <getbits>
 800c748:	4603      	mov	r3, r0
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	7023      	strb	r3, [r4, #0]
	*n_wheel_RL_mpros_MSB		= getbits(*canData.n_wheel_RL_mpros, 15, 8);
 800c74e:	4b39      	ldr	r3, [pc, #228]	; (800c834 <CAN_2_Receive+0x320>)
 800c750:	681c      	ldr	r4, [r3, #0]
 800c752:	4b28      	ldr	r3, [pc, #160]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c754:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c758:	881b      	ldrh	r3, [r3, #0]
 800c75a:	4618      	mov	r0, r3
 800c75c:	210f      	movs	r1, #15
 800c75e:	2208      	movs	r2, #8
 800c760:	f001 fcd0 	bl	800e104 <getbits>
 800c764:	4603      	mov	r3, r0
 800c766:	b2db      	uxtb	r3, r3
 800c768:	7023      	strb	r3, [r4, #0]

	//------Wheel n 0x342 LM06------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_06_Config);
 800c76a:	4833      	ldr	r0, [pc, #204]	; (800c838 <CAN_2_Receive+0x324>)
 800c76c:	f7fe fe32 	bl	800b3d4 <CAN_NODE_MO_Receive>

	*canData.n_wheel_RR_mpros	= checkRangePlausi(CAN_2_LMO_06_Config.mo_ptr->can_data_word[0],ERR_N_WHEEL_RR);
 800c770:	4b20      	ldr	r3, [pc, #128]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c772:	f8d3 40f8 	ldr.w	r4, [r3, #248]	; 0xf8
 800c776:	4b30      	ldr	r3, [pc, #192]	; (800c838 <CAN_2_Receive+0x324>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	8a1b      	ldrh	r3, [r3, #16]
 800c77c:	4618      	mov	r0, r3
 800c77e:	210a      	movs	r1, #10
 800c780:	f000 fad6 	bl	800cd30 <checkRangePlausi>
 800c784:	4603      	mov	r3, r0
 800c786:	b29b      	uxth	r3, r3
 800c788:	8023      	strh	r3, [r4, #0]
	*n_wheel_RR_mpros_LSB		= getbits(*canData.n_wheel_RR_mpros, 7, 8);
 800c78a:	4b2c      	ldr	r3, [pc, #176]	; (800c83c <CAN_2_Receive+0x328>)
 800c78c:	681c      	ldr	r4, [r3, #0]
 800c78e:	4b19      	ldr	r3, [pc, #100]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c790:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c794:	881b      	ldrh	r3, [r3, #0]
 800c796:	4618      	mov	r0, r3
 800c798:	2107      	movs	r1, #7
 800c79a:	2208      	movs	r2, #8
 800c79c:	f001 fcb2 	bl	800e104 <getbits>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	7023      	strb	r3, [r4, #0]
	*n_wheel_RR_mpros_MSB		= getbits(*canData.n_wheel_RR_mpros, 15, 8);
 800c7a6:	4b26      	ldr	r3, [pc, #152]	; (800c840 <CAN_2_Receive+0x32c>)
 800c7a8:	681c      	ldr	r4, [r3, #0]
 800c7aa:	4b12      	ldr	r3, [pc, #72]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c7ac:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c7b0:	881b      	ldrh	r3, [r3, #0]
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	210f      	movs	r1, #15
 800c7b6:	2208      	movs	r2, #8
 800c7b8:	f001 fca4 	bl	800e104 <getbits>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	7023      	strb	r3, [r4, #0]

	//------Manual Control 0x7FF LM12------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_12_Config);
 800c7c2:	4820      	ldr	r0, [pc, #128]	; (800c844 <CAN_2_Receive+0x330>)
 800c7c4:	f7fe fe06 	bl	800b3d4 <CAN_NODE_MO_Receive>
	canData.ManualControl_Active = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[7],7,1);
 800c7c8:	4b1e      	ldr	r3, [pc, #120]	; (800c844 <CAN_2_Receive+0x330>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	7ddb      	ldrb	r3, [r3, #23]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	2107      	movs	r1, #7
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	f001 fc96 	bl	800e104 <getbits>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	b2da      	uxtb	r2, r3
 800c7dc:	4b05      	ldr	r3, [pc, #20]	; (800c7f4 <CAN_2_Receive+0x2e0>)
 800c7de:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	canData.ManConOn_MHJ9_IN = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[0],0,1);
 800c7e2:	4b18      	ldr	r3, [pc, #96]	; (800c844 <CAN_2_Receive+0x330>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	7c1b      	ldrb	r3, [r3, #16]
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	e02b      	b.n	800c848 <CAN_2_Receive+0x334>
 800c7f0:	0800f814 	.word	0x0800f814
 800c7f4:	200013c0 	.word	0x200013c0
 800c7f8:	20001338 	.word	0x20001338
 800c7fc:	20001334 	.word	0x20001334
 800c800:	2000130c 	.word	0x2000130c
 800c804:	20001320 	.word	0x20001320
 800c808:	0800f820 	.word	0x0800f820
 800c80c:	20001318 	.word	0x20001318
 800c810:	20001324 	.word	0x20001324
 800c814:	0800f82c 	.word	0x0800f82c
 800c818:	2000131c 	.word	0x2000131c
 800c81c:	20001328 	.word	0x20001328
 800c820:	0800f838 	.word	0x0800f838
 800c824:	2000133c 	.word	0x2000133c
 800c828:	20001308 	.word	0x20001308
 800c82c:	0800f844 	.word	0x0800f844
 800c830:	20001330 	.word	0x20001330
 800c834:	20001310 	.word	0x20001310
 800c838:	0800f850 	.word	0x0800f850
 800c83c:	2000132c 	.word	0x2000132c
 800c840:	20001314 	.word	0x20001314
 800c844:	0800f898 	.word	0x0800f898
 800c848:	f001 fc5c 	bl	800e104 <getbits>
 800c84c:	4603      	mov	r3, r0
 800c84e:	b2da      	uxtb	r2, r3
 800c850:	4b7d      	ldr	r3, [pc, #500]	; (800ca48 <CAN_2_Receive+0x534>)
 800c852:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	canData.ManConOn_MHJ9_OUT = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[1],0,1);
 800c856:	4b7d      	ldr	r3, [pc, #500]	; (800ca4c <CAN_2_Receive+0x538>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	7c5b      	ldrb	r3, [r3, #17]
 800c85c:	4618      	mov	r0, r3
 800c85e:	2100      	movs	r1, #0
 800c860:	2201      	movs	r2, #1
 800c862:	f001 fc4f 	bl	800e104 <getbits>
 800c866:	4603      	mov	r3, r0
 800c868:	b2da      	uxtb	r2, r3
 800c86a:	4b77      	ldr	r3, [pc, #476]	; (800ca48 <CAN_2_Receive+0x534>)
 800c86c:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	canData.ManConOn_Waterpump = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[2],0,1);
 800c870:	4b76      	ldr	r3, [pc, #472]	; (800ca4c <CAN_2_Receive+0x538>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	7c9b      	ldrb	r3, [r3, #18]
 800c876:	4618      	mov	r0, r3
 800c878:	2100      	movs	r1, #0
 800c87a:	2201      	movs	r2, #1
 800c87c:	f001 fc42 	bl	800e104 <getbits>
 800c880:	4603      	mov	r3, r0
 800c882:	b2da      	uxtb	r2, r3
 800c884:	4b70      	ldr	r3, [pc, #448]	; (800ca48 <CAN_2_Receive+0x534>)
 800c886:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
	canData.ManConOn_Fans1 = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[3],0,1);
 800c88a:	4b70      	ldr	r3, [pc, #448]	; (800ca4c <CAN_2_Receive+0x538>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	7cdb      	ldrb	r3, [r3, #19]
 800c890:	4618      	mov	r0, r3
 800c892:	2100      	movs	r1, #0
 800c894:	2201      	movs	r2, #1
 800c896:	f001 fc35 	bl	800e104 <getbits>
 800c89a:	4603      	mov	r3, r0
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	4b6a      	ldr	r3, [pc, #424]	; (800ca48 <CAN_2_Receive+0x534>)
 800c8a0:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	canData.ManConOn_Fans2 = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[4],0,1);
 800c8a4:	4b69      	ldr	r3, [pc, #420]	; (800ca4c <CAN_2_Receive+0x538>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	7d1b      	ldrb	r3, [r3, #20]
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	f001 fc28 	bl	800e104 <getbits>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	b2da      	uxtb	r2, r3
 800c8b8:	4b63      	ldr	r3, [pc, #396]	; (800ca48 <CAN_2_Receive+0x534>)
 800c8ba:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	canData.ManConOn_VOVGShiftUp = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],0,1);
 800c8be:	4b63      	ldr	r3, [pc, #396]	; (800ca4c <CAN_2_Receive+0x538>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	7d5b      	ldrb	r3, [r3, #21]
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	f001 fc1b 	bl	800e104 <getbits>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	b2da      	uxtb	r2, r3
 800c8d2:	4b5d      	ldr	r3, [pc, #372]	; (800ca48 <CAN_2_Receive+0x534>)
 800c8d4:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
	canData.ManConOn_VOVGShiftDown = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],2,1);
 800c8d8:	4b5c      	ldr	r3, [pc, #368]	; (800ca4c <CAN_2_Receive+0x538>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	7d5b      	ldrb	r3, [r3, #21]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	2102      	movs	r1, #2
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	f001 fc0e 	bl	800e104 <getbits>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	b2da      	uxtb	r2, r3
 800c8ec:	4b56      	ldr	r3, [pc, #344]	; (800ca48 <CAN_2_Receive+0x534>)
 800c8ee:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	canData.ManConOn_IgnCut = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],4,1);
 800c8f2:	4b56      	ldr	r3, [pc, #344]	; (800ca4c <CAN_2_Receive+0x538>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	7d5b      	ldrb	r3, [r3, #21]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	2104      	movs	r1, #4
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	f001 fc01 	bl	800e104 <getbits>
 800c902:	4603      	mov	r3, r0
 800c904:	b2da      	uxtb	r2, r3
 800c906:	4b50      	ldr	r3, [pc, #320]	; (800ca48 <CAN_2_Receive+0x534>)
 800c908:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	canData.ManConOn_VOVG_IN = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],6,1);
 800c90c:	4b4f      	ldr	r3, [pc, #316]	; (800ca4c <CAN_2_Receive+0x538>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	7d5b      	ldrb	r3, [r3, #21]
 800c912:	4618      	mov	r0, r3
 800c914:	2106      	movs	r1, #6
 800c916:	2201      	movs	r2, #1
 800c918:	f001 fbf4 	bl	800e104 <getbits>
 800c91c:	4603      	mov	r3, r0
 800c91e:	b2da      	uxtb	r2, r3
 800c920:	4b49      	ldr	r3, [pc, #292]	; (800ca48 <CAN_2_Receive+0x534>)
 800c922:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	canData.ManConOn_VOVG_OUT = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[6],0,1);
 800c926:	4b49      	ldr	r3, [pc, #292]	; (800ca4c <CAN_2_Receive+0x538>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	7d9b      	ldrb	r3, [r3, #22]
 800c92c:	4618      	mov	r0, r3
 800c92e:	2100      	movs	r1, #0
 800c930:	2201      	movs	r2, #1
 800c932:	f001 fbe7 	bl	800e104 <getbits>
 800c936:	4603      	mov	r3, r0
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	4b43      	ldr	r3, [pc, #268]	; (800ca48 <CAN_2_Receive+0x534>)
 800c93c:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	canData.ManConVar_MHJ9_IN = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[0],7,7);
 800c940:	4b42      	ldr	r3, [pc, #264]	; (800ca4c <CAN_2_Receive+0x538>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	7c1b      	ldrb	r3, [r3, #16]
 800c946:	4618      	mov	r0, r3
 800c948:	2107      	movs	r1, #7
 800c94a:	2207      	movs	r2, #7
 800c94c:	f001 fbda 	bl	800e104 <getbits>
 800c950:	4603      	mov	r3, r0
 800c952:	b2da      	uxtb	r2, r3
 800c954:	4b3c      	ldr	r3, [pc, #240]	; (800ca48 <CAN_2_Receive+0x534>)
 800c956:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
	canData.ManConVar_MHJ9_OUT = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[1],7,7);
 800c95a:	4b3c      	ldr	r3, [pc, #240]	; (800ca4c <CAN_2_Receive+0x538>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	7c5b      	ldrb	r3, [r3, #17]
 800c960:	4618      	mov	r0, r3
 800c962:	2107      	movs	r1, #7
 800c964:	2207      	movs	r2, #7
 800c966:	f001 fbcd 	bl	800e104 <getbits>
 800c96a:	4603      	mov	r3, r0
 800c96c:	b2da      	uxtb	r2, r3
 800c96e:	4b36      	ldr	r3, [pc, #216]	; (800ca48 <CAN_2_Receive+0x534>)
 800c970:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	canData.ManConVar_Waterpump = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[2],7,7);
 800c974:	4b35      	ldr	r3, [pc, #212]	; (800ca4c <CAN_2_Receive+0x538>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	7c9b      	ldrb	r3, [r3, #18]
 800c97a:	4618      	mov	r0, r3
 800c97c:	2107      	movs	r1, #7
 800c97e:	2207      	movs	r2, #7
 800c980:	f001 fbc0 	bl	800e104 <getbits>
 800c984:	4603      	mov	r3, r0
 800c986:	b2da      	uxtb	r2, r3
 800c988:	4b2f      	ldr	r3, [pc, #188]	; (800ca48 <CAN_2_Receive+0x534>)
 800c98a:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	canData.ManConVar_Fans1 = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[3],7,7);
 800c98e:	4b2f      	ldr	r3, [pc, #188]	; (800ca4c <CAN_2_Receive+0x538>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	7cdb      	ldrb	r3, [r3, #19]
 800c994:	4618      	mov	r0, r3
 800c996:	2107      	movs	r1, #7
 800c998:	2207      	movs	r2, #7
 800c99a:	f001 fbb3 	bl	800e104 <getbits>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	b2da      	uxtb	r2, r3
 800c9a2:	4b29      	ldr	r3, [pc, #164]	; (800ca48 <CAN_2_Receive+0x534>)
 800c9a4:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
	canData.ManConVar_Fans2 = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[4],7,7);
 800c9a8:	4b28      	ldr	r3, [pc, #160]	; (800ca4c <CAN_2_Receive+0x538>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	7d1b      	ldrb	r3, [r3, #20]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	2107      	movs	r1, #7
 800c9b2:	2207      	movs	r2, #7
 800c9b4:	f001 fba6 	bl	800e104 <getbits>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	b2da      	uxtb	r2, r3
 800c9bc:	4b22      	ldr	r3, [pc, #136]	; (800ca48 <CAN_2_Receive+0x534>)
 800c9be:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
	canData.ManConVar_VOVGShiftUp = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],1,1);
 800c9c2:	4b22      	ldr	r3, [pc, #136]	; (800ca4c <CAN_2_Receive+0x538>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	7d5b      	ldrb	r3, [r3, #21]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	2101      	movs	r1, #1
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	f001 fb99 	bl	800e104 <getbits>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	4b1c      	ldr	r3, [pc, #112]	; (800ca48 <CAN_2_Receive+0x534>)
 800c9d8:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	canData.ManConVar_VOVGShiftDown = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],3,1);
 800c9dc:	4b1b      	ldr	r3, [pc, #108]	; (800ca4c <CAN_2_Receive+0x538>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	7d5b      	ldrb	r3, [r3, #21]
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	2103      	movs	r1, #3
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f001 fb8c 	bl	800e104 <getbits>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	b2da      	uxtb	r2, r3
 800c9f0:	4b15      	ldr	r3, [pc, #84]	; (800ca48 <CAN_2_Receive+0x534>)
 800c9f2:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	canData.ManConVar_IgnCut = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],5,1);
 800c9f6:	4b15      	ldr	r3, [pc, #84]	; (800ca4c <CAN_2_Receive+0x538>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	7d5b      	ldrb	r3, [r3, #21]
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	2105      	movs	r1, #5
 800ca00:	2201      	movs	r2, #1
 800ca02:	f001 fb7f 	bl	800e104 <getbits>
 800ca06:	4603      	mov	r3, r0
 800ca08:	b2da      	uxtb	r2, r3
 800ca0a:	4b0f      	ldr	r3, [pc, #60]	; (800ca48 <CAN_2_Receive+0x534>)
 800ca0c:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
	canData.ManConVar_VOVG_IN = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],7,1);
 800ca10:	4b0e      	ldr	r3, [pc, #56]	; (800ca4c <CAN_2_Receive+0x538>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	7d5b      	ldrb	r3, [r3, #21]
 800ca16:	4618      	mov	r0, r3
 800ca18:	2107      	movs	r1, #7
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	f001 fb72 	bl	800e104 <getbits>
 800ca20:	4603      	mov	r3, r0
 800ca22:	b2da      	uxtb	r2, r3
 800ca24:	4b08      	ldr	r3, [pc, #32]	; (800ca48 <CAN_2_Receive+0x534>)
 800ca26:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	canData.ManConVar_VOVG_OUT = getbits(CAN_2_LMO_12_Config.mo_ptr->can_data_byte[5],9,1);
 800ca2a:	4b08      	ldr	r3, [pc, #32]	; (800ca4c <CAN_2_Receive+0x538>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	7d5b      	ldrb	r3, [r3, #21]
 800ca30:	4618      	mov	r0, r3
 800ca32:	2109      	movs	r1, #9
 800ca34:	2201      	movs	r2, #1
 800ca36:	f001 fb65 	bl	800e104 <getbits>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	b2da      	uxtb	r2, r3
 800ca3e:	4b02      	ldr	r3, [pc, #8]	; (800ca48 <CAN_2_Receive+0x534>)
 800ca40:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
}
 800ca44:	bd98      	pop	{r3, r4, r7, pc}
 800ca46:	bf00      	nop
 800ca48:	200013c0 	.word	0x200013c0
 800ca4c:	0800f898 	.word	0x0800f898

0800ca50 <CAN_2_Transmit>:

void CAN_2_Transmit()
{
 800ca50:	b590      	push	{r4, r7, lr}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
	//Wheelforce 0x7E0 LM09
	CAN2_data_Tx_LM09[0] = getbits(*canData.f_FL,7,8);
 800ca56:	4b5e      	ldr	r3, [pc, #376]	; (800cbd0 <CAN_2_Transmit+0x180>)
 800ca58:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800ca5c:	881b      	ldrh	r3, [r3, #0]
 800ca5e:	4618      	mov	r0, r3
 800ca60:	2107      	movs	r1, #7
 800ca62:	2208      	movs	r2, #8
 800ca64:	f001 fb4e 	bl	800e104 <getbits>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	b2da      	uxtb	r2, r3
 800ca6c:	4b59      	ldr	r3, [pc, #356]	; (800cbd4 <CAN_2_Transmit+0x184>)
 800ca6e:	701a      	strb	r2, [r3, #0]
	CAN2_data_Tx_LM09[1] = getbits(*canData.f_FL,15,8);
 800ca70:	4b57      	ldr	r3, [pc, #348]	; (800cbd0 <CAN_2_Transmit+0x180>)
 800ca72:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800ca76:	881b      	ldrh	r3, [r3, #0]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	210f      	movs	r1, #15
 800ca7c:	2208      	movs	r2, #8
 800ca7e:	f001 fb41 	bl	800e104 <getbits>
 800ca82:	4603      	mov	r3, r0
 800ca84:	b2da      	uxtb	r2, r3
 800ca86:	4b53      	ldr	r3, [pc, #332]	; (800cbd4 <CAN_2_Transmit+0x184>)
 800ca88:	705a      	strb	r2, [r3, #1]
	CAN2_data_Tx_LM09[2] = getbits(*canData.f_FR,7,8);
 800ca8a:	4b51      	ldr	r3, [pc, #324]	; (800cbd0 <CAN_2_Transmit+0x180>)
 800ca8c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800ca90:	881b      	ldrh	r3, [r3, #0]
 800ca92:	4618      	mov	r0, r3
 800ca94:	2107      	movs	r1, #7
 800ca96:	2208      	movs	r2, #8
 800ca98:	f001 fb34 	bl	800e104 <getbits>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	4b4c      	ldr	r3, [pc, #304]	; (800cbd4 <CAN_2_Transmit+0x184>)
 800caa2:	709a      	strb	r2, [r3, #2]
	CAN2_data_Tx_LM09[3] = getbits(*canData.f_FR,15,8);
 800caa4:	4b4a      	ldr	r3, [pc, #296]	; (800cbd0 <CAN_2_Transmit+0x180>)
 800caa6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800caaa:	881b      	ldrh	r3, [r3, #0]
 800caac:	4618      	mov	r0, r3
 800caae:	210f      	movs	r1, #15
 800cab0:	2208      	movs	r2, #8
 800cab2:	f001 fb27 	bl	800e104 <getbits>
 800cab6:	4603      	mov	r3, r0
 800cab8:	b2da      	uxtb	r2, r3
 800caba:	4b46      	ldr	r3, [pc, #280]	; (800cbd4 <CAN_2_Transmit+0x184>)
 800cabc:	70da      	strb	r2, [r3, #3]
	CAN2_data_Tx_LM09[4] = (uint8_t)(*canData.TR1_VSense_WP);
 800cabe:	4b44      	ldr	r3, [pc, #272]	; (800cbd0 <CAN_2_Transmit+0x180>)
 800cac0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800cac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac8:	4610      	mov	r0, r2
 800caca:	4619      	mov	r1, r3
 800cacc:	f002 fa66 	bl	800ef9c <__aeabi_d2uiz>
 800cad0:	4603      	mov	r3, r0
 800cad2:	b2da      	uxtb	r2, r3
 800cad4:	4b3f      	ldr	r3, [pc, #252]	; (800cbd4 <CAN_2_Transmit+0x184>)
 800cad6:	711a      	strb	r2, [r3, #4]
	CAN2_data_Tx_LM09[5] = (uint8_t)(*canData.TR2_VSense_FAN1);
 800cad8:	4b3d      	ldr	r3, [pc, #244]	; (800cbd0 <CAN_2_Transmit+0x180>)
 800cada:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800cade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae2:	4610      	mov	r0, r2
 800cae4:	4619      	mov	r1, r3
 800cae6:	f002 fa59 	bl	800ef9c <__aeabi_d2uiz>
 800caea:	4603      	mov	r3, r0
 800caec:	b2da      	uxtb	r2, r3
 800caee:	4b39      	ldr	r3, [pc, #228]	; (800cbd4 <CAN_2_Transmit+0x184>)
 800caf0:	715a      	strb	r2, [r3, #5]
	CAN2_data_Tx_LM09[6] = (uint8_t)(*canData.TR3_VSense_FAN2);
 800caf2:	4b37      	ldr	r3, [pc, #220]	; (800cbd0 <CAN_2_Transmit+0x180>)
 800caf4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800caf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafc:	4610      	mov	r0, r2
 800cafe:	4619      	mov	r1, r3
 800cb00:	f002 fa4c 	bl	800ef9c <__aeabi_d2uiz>
 800cb04:	4603      	mov	r3, r0
 800cb06:	b2da      	uxtb	r2, r3
 800cb08:	4b32      	ldr	r3, [pc, #200]	; (800cbd4 <CAN_2_Transmit+0x184>)
 800cb0a:	719a      	strb	r2, [r3, #6]
	//CAN_NODE_MO_Transmit(&CAN_2_LMO_09_Config);

	//Measurement 0x7E2 LM10
	//CAN2_data_Tx_LM10[0] = *canData.x_RH_RL;
	//CAN2_data_Tx_LM10[1] = *canData.x_RH_RR;
	CAN2_data_Tx_LM10[0] = *canData.Brakelight << 7;
 800cb0c:	4b30      	ldr	r3, [pc, #192]	; (800cbd0 <CAN_2_Transmit+0x180>)
 800cb0e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	01db      	lsls	r3, r3, #7
 800cb16:	b2da      	uxtb	r2, r3
 800cb18:	4b2f      	ldr	r3, [pc, #188]	; (800cbd8 <CAN_2_Transmit+0x188>)
 800cb1a:	701a      	strb	r2, [r3, #0]
	CAN2_data_Tx_LM10[1] = (uint8_t)(*canData.t_board_VCU / 0.6);
 800cb1c:	4b2c      	ldr	r3, [pc, #176]	; (800cbd0 <CAN_2_Transmit+0x180>)
 800cb1e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800cb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb26:	4610      	mov	r0, r2
 800cb28:	4619      	mov	r1, r3
 800cb2a:	a327      	add	r3, pc, #156	; (adr r3, 800cbc8 <CAN_2_Transmit+0x178>)
 800cb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb30:	f002 f8c4 	bl	800ecbc <__aeabi_ddiv>
 800cb34:	4602      	mov	r2, r0
 800cb36:	460b      	mov	r3, r1
 800cb38:	4610      	mov	r0, r2
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	f002 fa2e 	bl	800ef9c <__aeabi_d2uiz>
 800cb40:	4603      	mov	r3, r0
 800cb42:	b2da      	uxtb	r2, r3
 800cb44:	4b24      	ldr	r3, [pc, #144]	; (800cbd8 <CAN_2_Transmit+0x188>)
 800cb46:	705a      	strb	r2, [r3, #1]
	CAN2_data_Tx_LM10[2] = *canData.x_RH_F;
 800cb48:	4b21      	ldr	r3, [pc, #132]	; (800cbd0 <CAN_2_Transmit+0x180>)
 800cb4a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800cb4e:	781a      	ldrb	r2, [r3, #0]
 800cb50:	4b21      	ldr	r3, [pc, #132]	; (800cbd8 <CAN_2_Transmit+0x188>)
 800cb52:	709a      	strb	r2, [r3, #2]
	CAN2_data_Tx_LM10[3] = *canData.x_clutch;
 800cb54:	4b1e      	ldr	r3, [pc, #120]	; (800cbd0 <CAN_2_Transmit+0x180>)
 800cb56:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800cb5a:	781a      	ldrb	r2, [r3, #0]
 800cb5c:	4b1e      	ldr	r3, [pc, #120]	; (800cbd8 <CAN_2_Transmit+0x188>)
 800cb5e:	70da      	strb	r2, [r3, #3]
	CAN2_data_Tx_LM10[4] = *canData.x_clutch_STW;
 800cb60:	4b1b      	ldr	r3, [pc, #108]	; (800cbd0 <CAN_2_Transmit+0x180>)
 800cb62:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800cb66:	781a      	ldrb	r2, [r3, #0]
 800cb68:	4b1b      	ldr	r3, [pc, #108]	; (800cbd8 <CAN_2_Transmit+0x188>)
 800cb6a:	711a      	strb	r2, [r3, #4]
	CAN2_data_Tx_LM10[5] = *canData.p_pneu;
 800cb6c:	4b18      	ldr	r3, [pc, #96]	; (800cbd0 <CAN_2_Transmit+0x180>)
 800cb6e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800cb72:	781a      	ldrb	r2, [r3, #0]
 800cb74:	4b18      	ldr	r3, [pc, #96]	; (800cbd8 <CAN_2_Transmit+0x188>)
 800cb76:	715a      	strb	r2, [r3, #5]
	CAN2_data_Tx_LM10[6] = *canData.U_bat;
 800cb78:	4b15      	ldr	r3, [pc, #84]	; (800cbd0 <CAN_2_Transmit+0x180>)
 800cb7a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800cb7e:	781a      	ldrb	r2, [r3, #0]
 800cb80:	4b15      	ldr	r3, [pc, #84]	; (800cbd8 <CAN_2_Transmit+0x188>)
 800cb82:	719a      	strb	r2, [r3, #6]

	//CAN_NODE_MO_UpdateData(&CAN_2_LMO_10_Config, CAN2_data_Tx_LM10);
	//CAN_NODE_MO_Transmit(&CAN_2_LMO_10_Config);

	//VCU_Failure 0x7E3 LM11
	for (int i = 0; i < 8; i++) {
 800cb84:	2300      	movs	r3, #0
 800cb86:	607b      	str	r3, [r7, #4]
 800cb88:	e018      	b.n	800cbbc <CAN_2_Transmit+0x16c>
		CAN2_data_Tx_LM11[i] = getbits64(canData.plausi_error, 8*(i+1)-1, 8);
 800cb8a:	4b11      	ldr	r3, [pc, #68]	; (800cbd0 <CAN_2_Transmit+0x180>)
 800cb8c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb94:	6879      	ldr	r1, [r7, #4]
 800cb96:	3101      	adds	r1, #1
 800cb98:	00c9      	lsls	r1, r1, #3
 800cb9a:	1e4c      	subs	r4, r1, #1
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	4619      	mov	r1, r3
 800cba0:	4622      	mov	r2, r4
 800cba2:	2308      	movs	r3, #8
 800cba4:	f001 fac8 	bl	800e138 <getbits64>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	b2d9      	uxtb	r1, r3
 800cbac:	4a0b      	ldr	r2, [pc, #44]	; (800cbdc <CAN_2_Transmit+0x18c>)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	460a      	mov	r2, r1
 800cbb4:	701a      	strb	r2, [r3, #0]

	//CAN_NODE_MO_UpdateData(&CAN_2_LMO_10_Config, CAN2_data_Tx_LM10);
	//CAN_NODE_MO_Transmit(&CAN_2_LMO_10_Config);

	//VCU_Failure 0x7E3 LM11
	for (int i = 0; i < 8; i++) {
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	607b      	str	r3, [r7, #4]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2b07      	cmp	r3, #7
 800cbc0:	dde3      	ble.n	800cb8a <CAN_2_Transmit+0x13a>
		CAN2_data_Tx_LM11[i] = getbits64(canData.plausi_error, 8*(i+1)-1, 8);
	}
	//CAN_NODE_MO_UpdateData(&CAN_2_LMO_11_Config, CAN2_data_Tx_LM11);
	//CAN_NODE_MO_Transmit(&CAN_2_LMO_11_Config);
}
 800cbc2:	370c      	adds	r7, #12
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd90      	pop	{r4, r7, pc}
 800cbc8:	33333333 	.word	0x33333333
 800cbcc:	3fe33333 	.word	0x3fe33333
 800cbd0:	200013c0 	.word	0x200013c0
 800cbd4:	20000848 	.word	0x20000848
 800cbd8:	20000850 	.word	0x20000850
 800cbdc:	20000858 	.word	0x20000858

0800cbe0 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b083      	sub	sp, #12
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	460b      	mov	r3, r1
 800cbea:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800cbec:	78fb      	ldrb	r3, [r7, #3]
 800cbee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cbf2:	409a      	lsls	r2, r3
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	605a      	str	r2, [r3, #4]
}
 800cbf8:	370c      	adds	r7, #12
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop

0800cc04 <XMC_WDT_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Init(), XMC_WDT_Stop()
 */
__STATIC_INLINE void XMC_WDT_Start(void)
{
 800cc04:	b480      	push	{r7}
 800cc06:	af00      	add	r7, sp, #0
  WDT->CTR |= (uint32_t)WDT_CTR_ENB_Msk;
 800cc08:	4a04      	ldr	r2, [pc, #16]	; (800cc1c <XMC_WDT_Start+0x18>)
 800cc0a:	4b04      	ldr	r3, [pc, #16]	; (800cc1c <XMC_WDT_Start+0x18>)
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	f043 0301 	orr.w	r3, r3, #1
 800cc12:	6053      	str	r3, [r2, #4]
}
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr
 800cc1c:	50008000 	.word	0x50008000

0800cc20 <XMC_WDT_Service>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_GetCounter(), XMC_WDT_SetWindowBounds(), XMC_WDT_SetServicePulseWidth()
 */
__STATIC_INLINE void XMC_WDT_Service(void)
{
 800cc20:	b480      	push	{r7}
 800cc22:	af00      	add	r7, sp, #0
  WDT->SRV = XMC_WDT_MAGIC_WORD;
 800cc24:	4b03      	ldr	r3, [pc, #12]	; (800cc34 <XMC_WDT_Service+0x14>)
 800cc26:	4a04      	ldr	r2, [pc, #16]	; (800cc38 <XMC_WDT_Service+0x18>)
 800cc28:	609a      	str	r2, [r3, #8]
}
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	50008000 	.word	0x50008000
 800cc38:	abadcafe 	.word	0xabadcafe

0800cc3c <XMC_WDT_ClearAlarm>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Service(), XMC_WDT_SetMode()
 */
__STATIC_INLINE void XMC_WDT_ClearAlarm(void)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	af00      	add	r7, sp, #0
  WDT->WDTCLR = WDT_WDTCLR_ALMC_Msk;
 800cc40:	4b03      	ldr	r3, [pc, #12]	; (800cc50 <XMC_WDT_ClearAlarm+0x14>)
 800cc42:	2201      	movs	r2, #1
 800cc44:	61da      	str	r2, [r3, #28]
}
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr
 800cc4e:	bf00      	nop
 800cc50:	50008000 	.word	0x50008000

0800cc54 <WATCHDOG_Start>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Start(void)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	af00      	add	r7, sp, #0
  XMC_WDT_Start();
 800cc58:	f7ff ffd4 	bl	800cc04 <XMC_WDT_Start>
}
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop

0800cc60 <WATCHDOG_Service>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Service(void)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	af00      	add	r7, sp, #0
  XMC_WDT_Service();
 800cc64:	f7ff ffdc 	bl	800cc20 <XMC_WDT_Service>
}
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop

0800cc6c <WATCHDOG_ClearAlarm>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_ClearAlarm(void)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	af00      	add	r7, sp, #0
  XMC_WDT_ClearAlarm();
 800cc70:	f7ff ffe4 	bl	800cc3c <XMC_WDT_ClearAlarm>
}
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop

0800cc78 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	7c1b      	ldrb	r3, [r3, #16]
 800cc88:	4610      	mov	r0, r2
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	f7ff ffa8 	bl	800cbe0 <XMC_GPIO_SetOutputLow>
}
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop

0800cc98 <Watchdog_Start>:


//######## Watchdog ########

void Watchdog_Start()
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	af00      	add	r7, sp, #0
	  WATCHDOG_Start();
 800cc9c:	f7ff ffda 	bl	800cc54 <WATCHDOG_Start>
}
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop

0800cca4 <Watchdog_Reset>:

void Watchdog_Reset()
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	af00      	add	r7, sp, #0
	  WATCHDOG_ClearAlarm();
 800cca8:	f7ff ffe0 	bl	800cc6c <WATCHDOG_ClearAlarm>
	  WATCHDOG_Service();
 800ccac:	f7ff ffd8 	bl	800cc60 <WATCHDOG_Service>
}
 800ccb0:	bd80      	pop	{r7, pc}
 800ccb2:	bf00      	nop

0800ccb4 <NMI_Handler>:

void NMI_Handler(void) //Watchdog Prewarning Handler
{
 800ccb4:	b590      	push	{r4, r7, lr}
 800ccb6:	b083      	sub	sp, #12
 800ccb8:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_Debug_LED);
 800ccba:	4818      	ldr	r0, [pc, #96]	; (800cd1c <NMI_Handler+0x68>)
 800ccbc:	f7ff ffdc 	bl	800cc78 <DIGITAL_IO_SetOutputLow>

	setbitTrue((unsigned*)&canData.plausi_error, 63);
 800ccc0:	4817      	ldr	r0, [pc, #92]	; (800cd20 <NMI_Handler+0x6c>)
 800ccc2:	213f      	movs	r1, #63	; 0x3f
 800ccc4:	f001 fa74 	bl	800e1b0 <setbitTrue>
	for (int i = 0; i < 8; i++) {
 800ccc8:	2300      	movs	r3, #0
 800ccca:	607b      	str	r3, [r7, #4]
 800cccc:	e018      	b.n	800cd00 <NMI_Handler+0x4c>
		plausi_error_array[i] = getbits64(canData.plausi_error, 8*(i+1)-1, 8);
 800ccce:	4b15      	ldr	r3, [pc, #84]	; (800cd24 <NMI_Handler+0x70>)
 800ccd0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ccd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd8:	6879      	ldr	r1, [r7, #4]
 800ccda:	3101      	adds	r1, #1
 800ccdc:	00c9      	lsls	r1, r1, #3
 800ccde:	1e4c      	subs	r4, r1, #1
 800cce0:	4610      	mov	r0, r2
 800cce2:	4619      	mov	r1, r3
 800cce4:	4622      	mov	r2, r4
 800cce6:	2308      	movs	r3, #8
 800cce8:	f001 fa26 	bl	800e138 <getbits64>
 800ccec:	4603      	mov	r3, r0
 800ccee:	b2d9      	uxtb	r1, r3
 800ccf0:	4a0d      	ldr	r2, [pc, #52]	; (800cd28 <NMI_Handler+0x74>)
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	460a      	mov	r2, r1
 800ccf8:	701a      	strb	r2, [r3, #0]
void NMI_Handler(void) //Watchdog Prewarning Handler
{
	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_Debug_LED);

	setbitTrue((unsigned*)&canData.plausi_error, 63);
	for (int i = 0; i < 8; i++) {
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	607b      	str	r3, [r7, #4]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2b07      	cmp	r3, #7
 800cd04:	dde3      	ble.n	800ccce <NMI_Handler+0x1a>
		plausi_error_array[i] = getbits64(canData.plausi_error, 8*(i+1)-1, 8);
	}
	CAN_NODE_MO_UpdateData(&CAN_2_LMO_11_Config, plausi_error_array);
 800cd06:	4809      	ldr	r0, [pc, #36]	; (800cd2c <NMI_Handler+0x78>)
 800cd08:	4907      	ldr	r1, [pc, #28]	; (800cd28 <NMI_Handler+0x74>)
 800cd0a:	f7fe fb75 	bl	800b3f8 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_2_LMO_11_Config);
 800cd0e:	4807      	ldr	r0, [pc, #28]	; (800cd2c <NMI_Handler+0x78>)
 800cd10:	f7fe fb4e 	bl	800b3b0 <CAN_NODE_MO_Transmit>
}
 800cd14:	370c      	adds	r7, #12
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd90      	pop	{r4, r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	0800f63c 	.word	0x0800f63c
 800cd20:	20001500 	.word	0x20001500
 800cd24:	200013c0 	.word	0x200013c0
 800cd28:	20000870 	.word	0x20000870
 800cd2c:	0800f88c 	.word	0x0800f88c

0800cd30 <checkRangePlausi>:

//######## Plausi Check ########

unsigned checkRangePlausi(unsigned value, VCU_Failure error_code)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b086      	sub	sp, #24
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	70fb      	strb	r3, [r7, #3]
	if(checkRangePlausi_active)
 800cd3c:	4b94      	ldr	r3, [pc, #592]	; (800cf90 <checkRangePlausi+0x260>)
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f000 816a 	beq.w	800d01a <checkRangePlausi+0x2ea>
	{
		int upperLimit, lowerLimit;
		unsigned prevValue;

		switch(error_code){
 800cd46:	78fb      	ldrb	r3, [r7, #3]
 800cd48:	3b01      	subs	r3, #1
 800cd4a:	2b16      	cmp	r3, #22
 800cd4c:	f200 8136 	bhi.w	800cfbc <checkRangePlausi+0x28c>
 800cd50:	a201      	add	r2, pc, #4	; (adr r2, 800cd58 <checkRangePlausi+0x28>)
 800cd52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd56:	bf00      	nop
 800cd58:	0800cdb5 	.word	0x0800cdb5
 800cd5c:	0800cdc7 	.word	0x0800cdc7
 800cd60:	0800cddd 	.word	0x0800cddd
 800cd64:	0800cdf3 	.word	0x0800cdf3
 800cd68:	0800ce05 	.word	0x0800ce05
 800cd6c:	0800ce17 	.word	0x0800ce17
 800cd70:	0800ce2b 	.word	0x0800ce2b
 800cd74:	0800ce41 	.word	0x0800ce41
 800cd78:	0800ce57 	.word	0x0800ce57
 800cd7c:	0800ce6d 	.word	0x0800ce6d
 800cd80:	0800ce83 	.word	0x0800ce83
 800cd84:	0800ce97 	.word	0x0800ce97
 800cd88:	0800ceab 	.word	0x0800ceab
 800cd8c:	0800cec1 	.word	0x0800cec1
 800cd90:	0800cee3 	.word	0x0800cee3
 800cd94:	0800cef7 	.word	0x0800cef7
 800cd98:	0800cf09 	.word	0x0800cf09
 800cd9c:	0800cf1b 	.word	0x0800cf1b
 800cda0:	0800cf2d 	.word	0x0800cf2d
 800cda4:	0800cf3f 	.word	0x0800cf3f
 800cda8:	0800cf51 	.word	0x0800cf51
 800cdac:	0800cf71 	.word	0x0800cf71
 800cdb0:	0800cf9d 	.word	0x0800cf9d
		case ERR_FANS_DASH_BIT: prevValue = (unsigned)*IOportData.Fans_dash_bit;
 800cdb4:	4b77      	ldr	r3, [pc, #476]	; (800cf94 <checkRangePlausi+0x264>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	60fb      	str	r3, [r7, #12]
								upperLimit=1;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	613b      	str	r3, [r7, #16]
								break;
 800cdc4:	e0fa      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_G_LONG_ABS: 	prevValue = (unsigned)*canData.g_long_ABS; //todo
 800cdc6:	4b74      	ldr	r3, [pc, #464]	; (800cf98 <checkRangePlausi+0x268>)
 800cdc8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800cdcc:	881b      	ldrh	r3, [r3, #0]
 800cdce:	60fb      	str	r3, [r7, #12]
								upperLimit=32e3;
 800cdd0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cdd4:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	613b      	str	r3, [r7, #16]
								break;
 800cdda:	e0ef      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_G_YAW_ABS: 	prevValue = (unsigned)*canData.g_yaw_ABS; //todo
 800cddc:	4b6e      	ldr	r3, [pc, #440]	; (800cf98 <checkRangePlausi+0x268>)
 800cdde:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800cde2:	881b      	ldrh	r3, [r3, #0]
 800cde4:	60fb      	str	r3, [r7, #12]
								upperLimit=32e3;
 800cde6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cdea:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cdec:	2300      	movs	r3, #0
 800cdee:	613b      	str	r3, [r7, #16]
								break;
 800cdf0:	e0e4      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_GEAR:		 	prevValue = (unsigned)*canData.gear;
 800cdf2:	4b69      	ldr	r3, [pc, #420]	; (800cf98 <checkRangePlausi+0x268>)
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	60fb      	str	r3, [r7, #12]
								upperLimit =3<<3; //Motorola
 800cdfa:	2318      	movs	r3, #24
 800cdfc:	617b      	str	r3, [r7, #20]
								lowerLimit =0<<3; //Motorola
 800cdfe:	2300      	movs	r3, #0
 800ce00:	613b      	str	r3, [r7, #16]
								break;
 800ce02:	e0db      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_LC_DASH_BIT: 	prevValue = (unsigned)*IOportData.LC_dash_bit;
 800ce04:	4b63      	ldr	r3, [pc, #396]	; (800cf94 <checkRangePlausi+0x264>)
 800ce06:	6a1b      	ldr	r3, [r3, #32]
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	60fb      	str	r3, [r7, #12]
								upperLimit=1;
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800ce10:	2300      	movs	r3, #0
 800ce12:	613b      	str	r3, [r7, #16]
								break;
 800ce14:	e0d2      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_N_ENGINE:	 	prevValue = (unsigned)*canData.n_engine;
 800ce16:	4b60      	ldr	r3, [pc, #384]	; (800cf98 <checkRangePlausi+0x268>)
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	881b      	ldrh	r3, [r3, #0]
 800ce1c:	60fb      	str	r3, [r7, #12]
								upperLimit=10000;
 800ce1e:	f242 7310 	movw	r3, #10000	; 0x2710
 800ce22:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800ce24:	2300      	movs	r3, #0
 800ce26:	613b      	str	r3, [r7, #16]
								break;
 800ce28:	e0c8      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_N_WHEEL_FL: 	prevValue = (unsigned)*canData.n_wheel_FL;
 800ce2a:	4b5b      	ldr	r3, [pc, #364]	; (800cf98 <checkRangePlausi+0x268>)
 800ce2c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ce30:	881b      	ldrh	r3, [r3, #0]
 800ce32:	60fb      	str	r3, [r7, #12]
								upperLimit=3840;
 800ce34:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800ce38:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	613b      	str	r3, [r7, #16]
								break;
 800ce3e:	e0bd      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_N_WHEEL_FR: 	prevValue = (unsigned)*canData.n_wheel_FR;
 800ce40:	4b55      	ldr	r3, [pc, #340]	; (800cf98 <checkRangePlausi+0x268>)
 800ce42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ce46:	881b      	ldrh	r3, [r3, #0]
 800ce48:	60fb      	str	r3, [r7, #12]
								upperLimit=3840;
 800ce4a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800ce4e:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800ce50:	2300      	movs	r3, #0
 800ce52:	613b      	str	r3, [r7, #16]
								break;
 800ce54:	e0b2      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_N_WHEEL_RL: 	prevValue = (unsigned)*canData.n_wheel_RL;
 800ce56:	4b50      	ldr	r3, [pc, #320]	; (800cf98 <checkRangePlausi+0x268>)
 800ce58:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ce5c:	881b      	ldrh	r3, [r3, #0]
 800ce5e:	60fb      	str	r3, [r7, #12]
								upperLimit=3840;
 800ce60:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800ce64:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	613b      	str	r3, [r7, #16]
								break;
 800ce6a:	e0a7      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_N_WHEEL_RR: 	prevValue = (unsigned)*canData.n_wheel_RR;
 800ce6c:	4b4a      	ldr	r3, [pc, #296]	; (800cf98 <checkRangePlausi+0x268>)
 800ce6e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ce72:	881b      	ldrh	r3, [r3, #0]
 800ce74:	60fb      	str	r3, [r7, #12]
								upperLimit=3840;
 800ce76:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800ce7a:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	613b      	str	r3, [r7, #16]
								break;
 800ce80:	e09c      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_P_AIR_22:	 	prevValue = (unsigned)*canData.p_air_22;
 800ce82:	4b45      	ldr	r3, [pc, #276]	; (800cf98 <checkRangePlausi+0x268>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	60fb      	str	r3, [r7, #12]
								upperLimit=1000;
 800ce8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ce8e:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800ce90:	2300      	movs	r3, #0
 800ce92:	613b      	str	r3, [r7, #16]
								break;
 800ce94:	e092      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_P_AIR_22_DES: 	prevValue = (unsigned)*canData.AN5GearPos;
 800ce96:	4b40      	ldr	r3, [pc, #256]	; (800cf98 <checkRangePlausi+0x268>)
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	60fb      	str	r3, [r7, #12]
								upperLimit=1000;
 800ce9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cea2:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800cea4:	2300      	movs	r3, #0
 800cea6:	613b      	str	r3, [r7, #16]
								break;
 800cea8:	e088      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_P_BRAKE_F: 	prevValue = (unsigned)*canData.p_brake_F; //todo
 800ceaa:	4b3b      	ldr	r3, [pc, #236]	; (800cf98 <checkRangePlausi+0x268>)
 800ceac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ceb0:	881b      	ldrh	r3, [r3, #0]
 800ceb2:	60fb      	str	r3, [r7, #12]
								upperLimit=32e3;
 800ceb4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ceb8:	617b      	str	r3, [r7, #20]
								lowerLimit =0;
 800ceba:	2300      	movs	r3, #0
 800cebc:	613b      	str	r3, [r7, #16]
								break;
 800cebe:	e07d      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_P_BRAKE_R: 	prevValue = (unsigned)*IOportData.p_brake_R;
 800cec0:	4b34      	ldr	r3, [pc, #208]	; (800cf94 <checkRangePlausi+0x264>)
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec8:	4610      	mov	r0, r2
 800ceca:	4619      	mov	r1, r3
 800cecc:	f002 f866 	bl	800ef9c <__aeabi_d2uiz>
 800ced0:	4603      	mov	r3, r0
 800ced2:	60fb      	str	r3, [r7, #12]
								upperLimit = 4800;
 800ced4:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800ced8:	617b      	str	r3, [r7, #20]
								lowerLimit = 500;
 800ceda:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800cede:	613b      	str	r3, [r7, #16]
								break;
 800cee0:	e06c      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_STW_CLTUCH_MODE: 	prevValue = (unsigned)*canData.STW_clutch_mode; //todo
 800cee2:	4b2d      	ldr	r3, [pc, #180]	; (800cf98 <checkRangePlausi+0x268>)
 800cee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	60fb      	str	r3, [r7, #12]
									upperLimit = 32e3;
 800ceea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ceee:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	613b      	str	r3, [r7, #16]
									break;
 800cef4:	e062      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_MUE_TYRE:		 	prevValue = (unsigned)*canData.STW_mue_tyre;
 800cef6:	4b28      	ldr	r3, [pc, #160]	; (800cf98 <checkRangePlausi+0x268>)
 800cef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	60fb      	str	r3, [r7, #12]
									upperLimit = 100;
 800cefe:	2364      	movs	r3, #100	; 0x64
 800cf00:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800cf02:	2300      	movs	r3, #0
 800cf04:	613b      	str	r3, [r7, #16]
									break;
 800cf06:	e059      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_STW_SHIFT_DOWN_REQUEST: 	prevValue = (unsigned)*canData.STW_shift_down_request;
 800cf08:	4b23      	ldr	r3, [pc, #140]	; (800cf98 <checkRangePlausi+0x268>)
 800cf0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	60fb      	str	r3, [r7, #12]
											upperLimit = 1;
 800cf10:	2301      	movs	r3, #1
 800cf12:	617b      	str	r3, [r7, #20]
											lowerLimit = 0;
 800cf14:	2300      	movs	r3, #0
 800cf16:	613b      	str	r3, [r7, #16]
											break;
 800cf18:	e050      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_STW_SHIFT_UP_REQUEST: 	prevValue = (unsigned)*canData.STW_shift_up_request;
 800cf1a:	4b1f      	ldr	r3, [pc, #124]	; (800cf98 <checkRangePlausi+0x268>)
 800cf1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	60fb      	str	r3, [r7, #12]
											upperLimit = 1;
 800cf22:	2301      	movs	r3, #1
 800cf24:	617b      	str	r3, [r7, #20]
											lowerLimit = 0;
 800cf26:	2300      	movs	r3, #0
 800cf28:	613b      	str	r3, [r7, #16]
											break;
 800cf2a:	e047      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_T_WATER_ENGINE: 	prevValue = (unsigned)*canData.t_water_engine;
 800cf2c:	4b1a      	ldr	r3, [pc, #104]	; (800cf98 <checkRangePlausi+0x268>)
 800cf2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	60fb      	str	r3, [r7, #12]
									upperLimit = 250;
 800cf34:	23fa      	movs	r3, #250	; 0xfa
 800cf36:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	613b      	str	r3, [r7, #16]
									break;
 800cf3c:	e03e      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_TRANSMISSION_MODE:	prevValue = (unsigned)*canData.t_water_engine;
 800cf3e:	4b16      	ldr	r3, [pc, #88]	; (800cf98 <checkRangePlausi+0x268>)
 800cf40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	60fb      	str	r3, [r7, #12]
									upperLimit = 250;
 800cf46:	23fa      	movs	r3, #250	; 0xfa
 800cf48:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	613b      	str	r3, [r7, #16]
									break;
 800cf4e:	e035      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_U_BAT:				prevValue = (unsigned)*IOportData.U_Bat;
 800cf50:	4b10      	ldr	r3, [pc, #64]	; (800cf94 <checkRangePlausi+0x264>)
 800cf52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf58:	4610      	mov	r0, r2
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	f002 f81e 	bl	800ef9c <__aeabi_d2uiz>
 800cf60:	4603      	mov	r3, r0
 800cf62:	60fb      	str	r3, [r7, #12]
									upperLimit = 20000;
 800cf64:	f644 6320 	movw	r3, #20000	; 0x4e20
 800cf68:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	613b      	str	r3, [r7, #16]
									break;
 800cf6e:	e025      	b.n	800cfbc <checkRangePlausi+0x28c>
		case ERR_X_CLUTCH:			prevValue = (unsigned)*IOportData.x_clutch;
 800cf70:	4b08      	ldr	r3, [pc, #32]	; (800cf94 <checkRangePlausi+0x264>)
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf78:	4610      	mov	r0, r2
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	f002 f80e 	bl	800ef9c <__aeabi_d2uiz>
 800cf80:	4603      	mov	r3, r0
 800cf82:	60fb      	str	r3, [r7, #12]
									upperLimit = 5000;
 800cf84:	f241 3388 	movw	r3, #5000	; 0x1388
 800cf88:	617b      	str	r3, [r7, #20]
									lowerLimit = 0;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	613b      	str	r3, [r7, #16]
									break;
 800cf8e:	e015      	b.n	800cfbc <checkRangePlausi+0x28c>
 800cf90:	20000622 	.word	0x20000622
 800cf94:	20001348 	.word	0x20001348
 800cf98:	200013c0 	.word	0x200013c0
		case ERR_X_CLUTCH_STW:			prevValue = (unsigned)*IOportData.x_clutch_STW;
 800cf9c:	4b21      	ldr	r3, [pc, #132]	; (800d024 <checkRangePlausi+0x2f4>)
 800cf9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa4:	4610      	mov	r0, r2
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	f001 fff8 	bl	800ef9c <__aeabi_d2uiz>
 800cfac:	4603      	mov	r3, r0
 800cfae:	60fb      	str	r3, [r7, #12]
										upperLimit = 5000;
 800cfb0:	f241 3388 	movw	r3, #5000	; 0x1388
 800cfb4:	617b      	str	r3, [r7, #20]
										lowerLimit = 0;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	613b      	str	r3, [r7, #16]
										break;
 800cfba:	bf00      	nop
		}

		if(value >= lowerLimit && value <= upperLimit)
 800cfbc:	693a      	ldr	r2, [r7, #16]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d814      	bhi.n	800cfee <checkRangePlausi+0x2be>
 800cfc4:	697a      	ldr	r2, [r7, #20]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d310      	bcc.n	800cfee <checkRangePlausi+0x2be>
		{
			setbitFalse((unsigned*)&canData.plausi_error, 2*(error_code-1));
 800cfcc:	78fb      	ldrb	r3, [r7, #3]
 800cfce:	3b01      	subs	r3, #1
 800cfd0:	005b      	lsls	r3, r3, #1
 800cfd2:	4815      	ldr	r0, [pc, #84]	; (800d028 <checkRangePlausi+0x2f8>)
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	f001 f913 	bl	800e200 <setbitFalse>
			setbitFalse((unsigned*)&canData.plausi_error, 2*(error_code-1)+1);
 800cfda:	78fb      	ldrb	r3, [r7, #3]
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	005b      	lsls	r3, r3, #1
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	4811      	ldr	r0, [pc, #68]	; (800d028 <checkRangePlausi+0x2f8>)
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	f001 f90b 	bl	800e200 <setbitFalse>
			return value;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	e016      	b.n	800d01c <checkRangePlausi+0x2ec>
		}
		else
		{
			if(value <= lowerLimit)
 800cfee:	693a      	ldr	r2, [r7, #16]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d307      	bcc.n	800d006 <checkRangePlausi+0x2d6>
			{
				setbitTrue((unsigned*)&canData.plausi_error, 2*(error_code-1));
 800cff6:	78fb      	ldrb	r3, [r7, #3]
 800cff8:	3b01      	subs	r3, #1
 800cffa:	005b      	lsls	r3, r3, #1
 800cffc:	480a      	ldr	r0, [pc, #40]	; (800d028 <checkRangePlausi+0x2f8>)
 800cffe:	4619      	mov	r1, r3
 800d000:	f001 f8d6 	bl	800e1b0 <setbitTrue>
 800d004:	e007      	b.n	800d016 <checkRangePlausi+0x2e6>
			}
			else
			{
				setbitTrue((unsigned*)&canData.plausi_error, 2*(error_code-1)+1);
 800d006:	78fb      	ldrb	r3, [r7, #3]
 800d008:	3b01      	subs	r3, #1
 800d00a:	005b      	lsls	r3, r3, #1
 800d00c:	3301      	adds	r3, #1
 800d00e:	4806      	ldr	r0, [pc, #24]	; (800d028 <checkRangePlausi+0x2f8>)
 800d010:	4619      	mov	r1, r3
 800d012:	f001 f8cd 	bl	800e1b0 <setbitTrue>
			}
			return prevValue;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	e000      	b.n	800d01c <checkRangePlausi+0x2ec>
		}
	}
	else
	{
		return value; //No Plausi Check
 800d01a:	687b      	ldr	r3, [r7, #4]
	}
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3718      	adds	r7, #24
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	20001348 	.word	0x20001348
 800d028:	20001500 	.word	0x20001500

0800d02c <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	460b      	mov	r3, r1
 800d036:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d03c:	78fb      	ldrb	r3, [r7, #3]
 800d03e:	fa22 f303 	lsr.w	r3, r2, r3
 800d042:	f003 0301 	and.w	r3, r3, #1
}
 800d046:	4618      	mov	r0, r3
 800d048:	370c      	adds	r7, #12
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop

0800d054 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	7c1b      	ldrb	r3, [r3, #16]
 800d064:	4610      	mov	r0, r2
 800d066:	4619      	mov	r1, r3
 800d068:	f7ff ffe0 	bl	800d02c <XMC_GPIO_GetInput>
 800d06c:	4603      	mov	r3, r0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3708      	adds	r7, #8
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop

0800d078 <IOPort_ini>:
uint16_t busio_read;
extern boolean_T shiftDownInterrupt;
extern boolean_T shiftUpInterrupt;

void IOPort_ini()
{
 800d078:	b480      	push	{r7}
 800d07a:	af00      	add	r7, sp, #0
	//Inputs
	IOportData.Fans_dash_bit = (boolean_T*)&VCU_DW.VAR_IN_Fans_dash_bit;
 800d07c:	4b3c      	ldr	r3, [pc, #240]	; (800d170 <IOPort_ini+0xf8>)
 800d07e:	4a3d      	ldr	r2, [pc, #244]	; (800d174 <IOPort_ini+0xfc>)
 800d080:	601a      	str	r2, [r3, #0]
	IOportData.p_brake_R = &VCU_DW.VAR_IN_p_brake_R;
 800d082:	4b3b      	ldr	r3, [pc, #236]	; (800d170 <IOPort_ini+0xf8>)
 800d084:	4a3c      	ldr	r2, [pc, #240]	; (800d178 <IOPort_ini+0x100>)
 800d086:	605a      	str	r2, [r3, #4]
	//IOportData.p_pneum = &VCU_DW.VAR_IN_p_pneum;
	IOportData.x_clutch = &VCU_DW.VAR_IN_x_clutch;
 800d088:	4b39      	ldr	r3, [pc, #228]	; (800d170 <IOPort_ini+0xf8>)
 800d08a:	4a3c      	ldr	r2, [pc, #240]	; (800d17c <IOPort_ini+0x104>)
 800d08c:	60da      	str	r2, [r3, #12]
	IOportData.f_FL = &VCU_DW.VAR_IN_f_FL;
 800d08e:	4b38      	ldr	r3, [pc, #224]	; (800d170 <IOPort_ini+0xf8>)
 800d090:	4a3b      	ldr	r2, [pc, #236]	; (800d180 <IOPort_ini+0x108>)
 800d092:	611a      	str	r2, [r3, #16]
	IOportData.f_FR = &VCU_DW.VAR_IN_f_FR;
 800d094:	4b36      	ldr	r3, [pc, #216]	; (800d170 <IOPort_ini+0xf8>)
 800d096:	4a3b      	ldr	r2, [pc, #236]	; (800d184 <IOPort_ini+0x10c>)
 800d098:	615a      	str	r2, [r3, #20]
	IOportData.f_RL = &VCU_DW.VAR_IN_f_RL;
 800d09a:	4b35      	ldr	r3, [pc, #212]	; (800d170 <IOPort_ini+0xf8>)
 800d09c:	4a3a      	ldr	r2, [pc, #232]	; (800d188 <IOPort_ini+0x110>)
 800d09e:	619a      	str	r2, [r3, #24]
	IOportData.f_RR = &VCU_DW.VAR_IN_f_RR;
 800d0a0:	4b33      	ldr	r3, [pc, #204]	; (800d170 <IOPort_ini+0xf8>)
 800d0a2:	4a3a      	ldr	r2, [pc, #232]	; (800d18c <IOPort_ini+0x114>)
 800d0a4:	61da      	str	r2, [r3, #28]
	IOportData.LC_dash_bit = (boolean_T*)&VCU_DW.VAR_IN_LC_dash_bit;
 800d0a6:	4b32      	ldr	r3, [pc, #200]	; (800d170 <IOPort_ini+0xf8>)
 800d0a8:	4a39      	ldr	r2, [pc, #228]	; (800d190 <IOPort_ini+0x118>)
 800d0aa:	621a      	str	r2, [r3, #32]
	IOportData.x_RH_F = &VCU_DW.VAR_IN_x_RH_F;
 800d0ac:	4b30      	ldr	r3, [pc, #192]	; (800d170 <IOPort_ini+0xf8>)
 800d0ae:	4a39      	ldr	r2, [pc, #228]	; (800d194 <IOPort_ini+0x11c>)
 800d0b0:	625a      	str	r2, [r3, #36]	; 0x24
	IOportData.x_RH_RL = &VCU_DW.VAR_IN_x_RH_RL;
 800d0b2:	4b2f      	ldr	r3, [pc, #188]	; (800d170 <IOPort_ini+0xf8>)
 800d0b4:	4a38      	ldr	r2, [pc, #224]	; (800d198 <IOPort_ini+0x120>)
 800d0b6:	629a      	str	r2, [r3, #40]	; 0x28
	IOportData.x_RH_RR = &VCU_DW.VAR_IN_x_RH_RR;
 800d0b8:	4b2d      	ldr	r3, [pc, #180]	; (800d170 <IOPort_ini+0xf8>)
 800d0ba:	4a38      	ldr	r2, [pc, #224]	; (800d19c <IOPort_ini+0x124>)
 800d0bc:	62da      	str	r2, [r3, #44]	; 0x2c
	IOportData.U_Bat = &VCU_DW.VAR_IN_U_Bat;
 800d0be:	4b2c      	ldr	r3, [pc, #176]	; (800d170 <IOPort_ini+0xf8>)
 800d0c0:	4a37      	ldr	r2, [pc, #220]	; (800d1a0 <IOPort_ini+0x128>)
 800d0c2:	631a      	str	r2, [r3, #48]	; 0x30
	IOportData.x_clutch_STW = &VCU_DW.VAR_IN_x_clutch_STW;
 800d0c4:	4b2a      	ldr	r3, [pc, #168]	; (800d170 <IOPort_ini+0xf8>)
 800d0c6:	4a37      	ldr	r2, [pc, #220]	; (800d1a4 <IOPort_ini+0x12c>)
 800d0c8:	635a      	str	r2, [r3, #52]	; 0x34
	VAR_boardTemp = 0; IOportData.boardTemp = &VAR_boardTemp;
 800d0ca:	4937      	ldr	r1, [pc, #220]	; (800d1a8 <IOPort_ini+0x130>)
 800d0cc:	f04f 0200 	mov.w	r2, #0
 800d0d0:	f04f 0300 	mov.w	r3, #0
 800d0d4:	e9c1 2300 	strd	r2, r3, [r1]
 800d0d8:	4b25      	ldr	r3, [pc, #148]	; (800d170 <IOPort_ini+0xf8>)
 800d0da:	4a33      	ldr	r2, [pc, #204]	; (800d1a8 <IOPort_ini+0x130>)
 800d0dc:	639a      	str	r2, [r3, #56]	; 0x38
	VAR_TR1_VSense_WP = 0; IOportData.TR1_VSense_WP = &VAR_TR1_VSense_WP;
 800d0de:	4933      	ldr	r1, [pc, #204]	; (800d1ac <IOPort_ini+0x134>)
 800d0e0:	f04f 0200 	mov.w	r2, #0
 800d0e4:	f04f 0300 	mov.w	r3, #0
 800d0e8:	e9c1 2300 	strd	r2, r3, [r1]
 800d0ec:	4b20      	ldr	r3, [pc, #128]	; (800d170 <IOPort_ini+0xf8>)
 800d0ee:	4a2f      	ldr	r2, [pc, #188]	; (800d1ac <IOPort_ini+0x134>)
 800d0f0:	63da      	str	r2, [r3, #60]	; 0x3c
	VAR_TR2_VSense_FAN1 = 0; IOportData.TR2_VSense_FAN1 = &VAR_TR2_VSense_FAN1;
 800d0f2:	492f      	ldr	r1, [pc, #188]	; (800d1b0 <IOPort_ini+0x138>)
 800d0f4:	f04f 0200 	mov.w	r2, #0
 800d0f8:	f04f 0300 	mov.w	r3, #0
 800d0fc:	e9c1 2300 	strd	r2, r3, [r1]
 800d100:	4b1b      	ldr	r3, [pc, #108]	; (800d170 <IOPort_ini+0xf8>)
 800d102:	4a2b      	ldr	r2, [pc, #172]	; (800d1b0 <IOPort_ini+0x138>)
 800d104:	641a      	str	r2, [r3, #64]	; 0x40
	VAR_TR3_VSense_FAN2 = 0; IOportData.TR3_VSense_FAN2 = &VAR_TR3_VSense_FAN2;
 800d106:	492b      	ldr	r1, [pc, #172]	; (800d1b4 <IOPort_ini+0x13c>)
 800d108:	f04f 0200 	mov.w	r2, #0
 800d10c:	f04f 0300 	mov.w	r3, #0
 800d110:	e9c1 2300 	strd	r2, r3, [r1]
 800d114:	4b16      	ldr	r3, [pc, #88]	; (800d170 <IOPort_ini+0xf8>)
 800d116:	4a27      	ldr	r2, [pc, #156]	; (800d1b4 <IOPort_ini+0x13c>)
 800d118:	645a      	str	r2, [r3, #68]	; 0x44

	//Outputs
	IOportData.VOVG_ShiftUp = &VCU_DW.VAR_OUT_VOVG_ShiftUp;
 800d11a:	4b15      	ldr	r3, [pc, #84]	; (800d170 <IOPort_ini+0xf8>)
 800d11c:	4a26      	ldr	r2, [pc, #152]	; (800d1b8 <IOPort_ini+0x140>)
 800d11e:	649a      	str	r2, [r3, #72]	; 0x48
	IOportData.VOVG_ShiftDown = &VCU_DW.VAR_OUT_VOVG_ShiftDown;
 800d120:	4b13      	ldr	r3, [pc, #76]	; (800d170 <IOPort_ini+0xf8>)
 800d122:	4a26      	ldr	r2, [pc, #152]	; (800d1bc <IOPort_ini+0x144>)
 800d124:	64da      	str	r2, [r3, #76]	; 0x4c
	IOportData.Ignition_Cut = &VCU_DW.VAR_OUT_Ignition_Cut;
 800d126:	4b12      	ldr	r3, [pc, #72]	; (800d170 <IOPort_ini+0xf8>)
 800d128:	4a25      	ldr	r2, [pc, #148]	; (800d1c0 <IOPort_ini+0x148>)
 800d12a:	651a      	str	r2, [r3, #80]	; 0x50
	IOportData.VOVG_IN = &VCU_DW.VAR_OUT_VOVG_IN;
 800d12c:	4b10      	ldr	r3, [pc, #64]	; (800d170 <IOPort_ini+0xf8>)
 800d12e:	4a25      	ldr	r2, [pc, #148]	; (800d1c4 <IOPort_ini+0x14c>)
 800d130:	655a      	str	r2, [r3, #84]	; 0x54
	IOportData.VOVG_OUT = &VCU_DW.VAR_OUT_VOVG_OUT;
 800d132:	4b0f      	ldr	r3, [pc, #60]	; (800d170 <IOPort_ini+0xf8>)
 800d134:	4a24      	ldr	r2, [pc, #144]	; (800d1c8 <IOPort_ini+0x150>)
 800d136:	659a      	str	r2, [r3, #88]	; 0x58
	IOportData.MHJ9_IN = (uint16_t*)&VCU_DW.VAR_OUT_MHJ9_IN; //PWM
 800d138:	4b0d      	ldr	r3, [pc, #52]	; (800d170 <IOPort_ini+0xf8>)
 800d13a:	4a24      	ldr	r2, [pc, #144]	; (800d1cc <IOPort_ini+0x154>)
 800d13c:	65da      	str	r2, [r3, #92]	; 0x5c
	IOportData.MHJ9_OUT = (uint16_t*)&VCU_DW.VAR_OUT_MHJ9_OUT; //PWM
 800d13e:	4b0c      	ldr	r3, [pc, #48]	; (800d170 <IOPort_ini+0xf8>)
 800d140:	4a23      	ldr	r2, [pc, #140]	; (800d1d0 <IOPort_ini+0x158>)
 800d142:	661a      	str	r2, [r3, #96]	; 0x60
	IOportData.Brakelight = &VCU_DW.VAR_OUT_Brakelight;
 800d144:	4b0a      	ldr	r3, [pc, #40]	; (800d170 <IOPort_ini+0xf8>)
 800d146:	4a23      	ldr	r2, [pc, #140]	; (800d1d4 <IOPort_ini+0x15c>)
 800d148:	665a      	str	r2, [r3, #100]	; 0x64
	IOportData.Waterpump_PWM_active = &VCU_DW.VAR_OUT_Waterpump_PWM_active;
 800d14a:	4b09      	ldr	r3, [pc, #36]	; (800d170 <IOPort_ini+0xf8>)
 800d14c:	4a22      	ldr	r2, [pc, #136]	; (800d1d8 <IOPort_ini+0x160>)
 800d14e:	669a      	str	r2, [r3, #104]	; 0x68
	IOportData.Fans1_PWM_active = &VCU_DW.VAR_OUT_Fans1_PWM_active;
 800d150:	4b07      	ldr	r3, [pc, #28]	; (800d170 <IOPort_ini+0xf8>)
 800d152:	4a22      	ldr	r2, [pc, #136]	; (800d1dc <IOPort_ini+0x164>)
 800d154:	66da      	str	r2, [r3, #108]	; 0x6c
	IOportData.Fans2_PWM_active = &VCU_DW.VAR_OUT_Fans2_PWM_active;
 800d156:	4b06      	ldr	r3, [pc, #24]	; (800d170 <IOPort_ini+0xf8>)
 800d158:	4a21      	ldr	r2, [pc, #132]	; (800d1e0 <IOPort_ini+0x168>)
 800d15a:	671a      	str	r2, [r3, #112]	; 0x70

	output_pins = 0;
 800d15c:	4b21      	ldr	r3, [pc, #132]	; (800d1e4 <IOPort_ini+0x16c>)
 800d15e:	2200      	movs	r2, #0
 800d160:	601a      	str	r2, [r3, #0]
	busio_read = 0;
 800d162:	4b21      	ldr	r3, [pc, #132]	; (800d1e8 <IOPort_ini+0x170>)
 800d164:	2200      	movs	r2, #0
 800d166:	801a      	strh	r2, [r3, #0]
}
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr
 800d170:	20001348 	.word	0x20001348
 800d174:	20001120 	.word	0x20001120
 800d178:	20001128 	.word	0x20001128
 800d17c:	20001148 	.word	0x20001148
 800d180:	20001150 	.word	0x20001150
 800d184:	20001158 	.word	0x20001158
 800d188:	20001160 	.word	0x20001160
 800d18c:	20001168 	.word	0x20001168
 800d190:	20001170 	.word	0x20001170
 800d194:	20001178 	.word	0x20001178
 800d198:	20001130 	.word	0x20001130
 800d19c:	20001138 	.word	0x20001138
 800d1a0:	20001140 	.word	0x20001140
 800d1a4:	20001118 	.word	0x20001118
 800d1a8:	200012f0 	.word	0x200012f0
 800d1ac:	200012e0 	.word	0x200012e0
 800d1b0:	20001300 	.word	0x20001300
 800d1b4:	200012d0 	.word	0x200012d0
 800d1b8:	20001224 	.word	0x20001224
 800d1bc:	20001225 	.word	0x20001225
 800d1c0:	20001226 	.word	0x20001226
 800d1c4:	20001227 	.word	0x20001227
 800d1c8:	20001228 	.word	0x20001228
 800d1cc:	2000119e 	.word	0x2000119e
 800d1d0:	200011a0 	.word	0x200011a0
 800d1d4:	20001229 	.word	0x20001229
 800d1d8:	200011a2 	.word	0x200011a2
 800d1dc:	200011a4 	.word	0x200011a4
 800d1e0:	2000119c 	.word	0x2000119c
 800d1e4:	20001340 	.word	0x20001340
 800d1e8:	20001344 	.word	0x20001344

0800d1ec <IOPort_setDOUTS>:

void IOPort_setDOUTS()
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	af00      	add	r7, sp, #0
	if(canData.ManualControl_Active) //set manual values if controlled by CANoe
 800d1f0:	4b14      	ldr	r3, [pc, #80]	; (800d244 <IOPort_setDOUTS+0x58>)
 800d1f2:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d001      	beq.n	800d1fe <IOPort_setDOUTS+0x12>
	{
		ManualControl_setDOUTS();
 800d1fa:	f000 fad7 	bl	800d7ac <ManualControl_setDOUTS>
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
 800d1fe:	4b12      	ldr	r3, [pc, #72]	; (800d248 <IOPort_setDOUTS+0x5c>)
 800d200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	461a      	mov	r2, r3
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
 800d206:	4b10      	ldr	r3, [pc, #64]	; (800d248 <IOPort_setDOUTS+0x5c>)
 800d208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	005b      	lsls	r3, r3, #1
	if(canData.ManualControl_Active) //set manual values if controlled by CANoe
	{
		ManualControl_setDOUTS();
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
 800d20e:	431a      	orrs	r2, r3
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
					(*IOportData.Ignition_Cut << 2) |
 800d210:	4b0d      	ldr	r3, [pc, #52]	; (800d248 <IOPort_setDOUTS+0x5c>)
 800d212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	009b      	lsls	r3, r3, #2
	{
		ManualControl_setDOUTS();
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
 800d218:	431a      	orrs	r2, r3
					(*IOportData.Ignition_Cut << 2) |
					(*IOportData.VOVG_IN << 3) |
 800d21a:	4b0b      	ldr	r3, [pc, #44]	; (800d248 <IOPort_setDOUTS+0x5c>)
 800d21c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	00db      	lsls	r3, r3, #3
		ManualControl_setDOUTS();
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
					(*IOportData.Ignition_Cut << 2) |
 800d222:	431a      	orrs	r2, r3
					(*IOportData.VOVG_IN << 3) |
					(*IOportData.VOVG_OUT << 4);
 800d224:	4b08      	ldr	r3, [pc, #32]	; (800d248 <IOPort_setDOUTS+0x5c>)
 800d226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	011b      	lsls	r3, r3, #4
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
					(*IOportData.Ignition_Cut << 2) |
					(*IOportData.VOVG_IN << 3) |
 800d22c:	4313      	orrs	r3, r2
	if(canData.ManualControl_Active) //set manual values if controlled by CANoe
	{
		ManualControl_setDOUTS();
	}
	//set calculated values if controlled by VCU
	  output_pins =	*IOportData.VOVG_ShiftUp |
 800d22e:	4a07      	ldr	r2, [pc, #28]	; (800d24c <IOPort_setDOUTS+0x60>)
 800d230:	6013      	str	r3, [r2, #0]
			  	  	(*IOportData.VOVG_ShiftDown << 1) |
					(*IOportData.Ignition_Cut << 2) |
					(*IOportData.VOVG_IN << 3) |
					(*IOportData.VOVG_OUT << 4);

	  BUS_IO_Write(&BUS_IO, (uint8_t) output_pins);
 800d232:	4b06      	ldr	r3, [pc, #24]	; (800d24c <IOPort_setDOUTS+0x60>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	b2db      	uxtb	r3, r3
 800d238:	b29b      	uxth	r3, r3
 800d23a:	4805      	ldr	r0, [pc, #20]	; (800d250 <IOPort_setDOUTS+0x64>)
 800d23c:	4619      	mov	r1, r3
 800d23e:	f7fe fa1f 	bl	800b680 <BUS_IO_Write>
}
 800d242:	bd80      	pop	{r7, pc}
 800d244:	200013c0 	.word	0x200013c0
 800d248:	20001348 	.word	0x20001348
 800d24c:	20001340 	.word	0x20001340
 800d250:	20000450 	.word	0x20000450

0800d254 <IOPort_readDINS>:

void IOPort_readDINS()
{
 800d254:	b598      	push	{r3, r4, r7, lr}
 800d256:	af00      	add	r7, sp, #0
	busio_read = BUS_IO_Read(&BUS_IO_Input);
 800d258:	4814      	ldr	r0, [pc, #80]	; (800d2ac <IOPort_readDINS+0x58>)
 800d25a:	f7fe f9e3 	bl	800b624 <BUS_IO_Read>
 800d25e:	4603      	mov	r3, r0
 800d260:	461a      	mov	r2, r3
 800d262:	4b13      	ldr	r3, [pc, #76]	; (800d2b0 <IOPort_readDINS+0x5c>)
 800d264:	801a      	strh	r2, [r3, #0]
	*IOportData.Fans_dash_bit = checkRangePlausi(getbits(busio_read, 1, 1),ERR_FANS_DASH_BIT);
 800d266:	4b13      	ldr	r3, [pc, #76]	; (800d2b4 <IOPort_readDINS+0x60>)
 800d268:	681c      	ldr	r4, [r3, #0]
 800d26a:	4b11      	ldr	r3, [pc, #68]	; (800d2b0 <IOPort_readDINS+0x5c>)
 800d26c:	881b      	ldrh	r3, [r3, #0]
 800d26e:	4618      	mov	r0, r3
 800d270:	2101      	movs	r1, #1
 800d272:	2201      	movs	r2, #1
 800d274:	f000 ff46 	bl	800e104 <getbits>
 800d278:	4603      	mov	r3, r0
 800d27a:	4618      	mov	r0, r3
 800d27c:	2101      	movs	r1, #1
 800d27e:	f7ff fd57 	bl	800cd30 <checkRangePlausi>
 800d282:	4603      	mov	r3, r0
 800d284:	b2db      	uxtb	r3, r3
 800d286:	7023      	strb	r3, [r4, #0]
	*IOportData.LC_dash_bit = checkRangePlausi(getbits(busio_read, 0, 1),ERR_LC_DASH_BIT);
 800d288:	4b0a      	ldr	r3, [pc, #40]	; (800d2b4 <IOPort_readDINS+0x60>)
 800d28a:	6a1c      	ldr	r4, [r3, #32]
 800d28c:	4b08      	ldr	r3, [pc, #32]	; (800d2b0 <IOPort_readDINS+0x5c>)
 800d28e:	881b      	ldrh	r3, [r3, #0]
 800d290:	4618      	mov	r0, r3
 800d292:	2100      	movs	r1, #0
 800d294:	2201      	movs	r2, #1
 800d296:	f000 ff35 	bl	800e104 <getbits>
 800d29a:	4603      	mov	r3, r0
 800d29c:	4618      	mov	r0, r3
 800d29e:	2105      	movs	r1, #5
 800d2a0:	f7ff fd46 	bl	800cd30 <checkRangePlausi>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	7023      	strb	r3, [r4, #0]
}
 800d2aa:	bd98      	pop	{r3, r4, r7, pc}
 800d2ac:	20000464 	.word	0x20000464
 800d2b0:	20001344 	.word	0x20001344
 800d2b4:	20001348 	.word	0x20001348

0800d2b8 <IOPort_setPWMOUTS>:

void IOPort_setPWMOUTS()
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	af00      	add	r7, sp, #0
	if(canData.ManualControl_Active) //set manual values if controlled by CANoe
 800d2bc:	4b3a      	ldr	r3, [pc, #232]	; (800d3a8 <IOPort_setPWMOUTS+0xf0>)
 800d2be:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <IOPort_setPWMOUTS+0x12>
	{
		ManualControl_setPWMOUTS();
 800d2c6:	f000 fab3 	bl	800d830 <ManualControl_setPWMOUTS>
	}
	//set calculated values if controlled by VCU
	PWM_SetDutyCycle(&PWM_MHJ9_IN, (float)*IOportData.MHJ9_IN/65536*10000);//100% = 10000, var_max = 65536
 800d2ca:	4b38      	ldr	r3, [pc, #224]	; (800d3ac <IOPort_setPWMOUTS+0xf4>)
 800d2cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2ce:	881b      	ldrh	r3, [r3, #0]
 800d2d0:	ee07 3a90 	vmov	s15, r3
 800d2d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2d8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800d3b0 <IOPort_setPWMOUTS+0xf8>
 800d2dc:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d2e0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d3b4 <IOPort_setPWMOUTS+0xfc>
 800d2e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d2e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2ec:	4832      	ldr	r0, [pc, #200]	; (800d3b8 <IOPort_setPWMOUTS+0x100>)
 800d2ee:	ee17 1a90 	vmov	r1, s15
 800d2f2:	f7fa ffb7 	bl	8008264 <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_MHJ9_OUT, (float)*IOportData.MHJ9_OUT/65536*10000);
 800d2f6:	4b2d      	ldr	r3, [pc, #180]	; (800d3ac <IOPort_setPWMOUTS+0xf4>)
 800d2f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2fa:	881b      	ldrh	r3, [r3, #0]
 800d2fc:	ee07 3a90 	vmov	s15, r3
 800d300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d304:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d3b0 <IOPort_setPWMOUTS+0xf8>
 800d308:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d30c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800d3b4 <IOPort_setPWMOUTS+0xfc>
 800d310:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d318:	4828      	ldr	r0, [pc, #160]	; (800d3bc <IOPort_setPWMOUTS+0x104>)
 800d31a:	ee17 1a90 	vmov	r1, s15
 800d31e:	f7fa ffa1 	bl	8008264 <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_Waterpump, (float)*IOportData.Waterpump_PWM_active/65536*10000);
 800d322:	4b22      	ldr	r3, [pc, #136]	; (800d3ac <IOPort_setPWMOUTS+0xf4>)
 800d324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d326:	881b      	ldrh	r3, [r3, #0]
 800d328:	ee07 3a90 	vmov	s15, r3
 800d32c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d330:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d3b0 <IOPort_setPWMOUTS+0xf8>
 800d334:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d338:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800d3b4 <IOPort_setPWMOUTS+0xfc>
 800d33c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d344:	481e      	ldr	r0, [pc, #120]	; (800d3c0 <IOPort_setPWMOUTS+0x108>)
 800d346:	ee17 1a90 	vmov	r1, s15
 800d34a:	f7fa ff8b 	bl	8008264 <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_Fans1, (float)*IOportData.Fans1_PWM_active/65536*10000);
 800d34e:	4b17      	ldr	r3, [pc, #92]	; (800d3ac <IOPort_setPWMOUTS+0xf4>)
 800d350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d352:	881b      	ldrh	r3, [r3, #0]
 800d354:	ee07 3a90 	vmov	s15, r3
 800d358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d35c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800d3b0 <IOPort_setPWMOUTS+0xf8>
 800d360:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d364:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800d3b4 <IOPort_setPWMOUTS+0xfc>
 800d368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d36c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d370:	4814      	ldr	r0, [pc, #80]	; (800d3c4 <IOPort_setPWMOUTS+0x10c>)
 800d372:	ee17 1a90 	vmov	r1, s15
 800d376:	f7fa ff75 	bl	8008264 <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_Fans2, (float)*IOportData.Fans2_PWM_active/65536*10000);
 800d37a:	4b0c      	ldr	r3, [pc, #48]	; (800d3ac <IOPort_setPWMOUTS+0xf4>)
 800d37c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d37e:	881b      	ldrh	r3, [r3, #0]
 800d380:	ee07 3a90 	vmov	s15, r3
 800d384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d388:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800d3b0 <IOPort_setPWMOUTS+0xf8>
 800d38c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d390:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800d3b4 <IOPort_setPWMOUTS+0xfc>
 800d394:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d39c:	480a      	ldr	r0, [pc, #40]	; (800d3c8 <IOPort_setPWMOUTS+0x110>)
 800d39e:	ee17 1a90 	vmov	r1, s15
 800d3a2:	f7fa ff5f 	bl	8008264 <PWM_SetDutyCycle>
	//PWM_SetFreq(&PWM_Fans1, 1000);//TEST
	//PWM_SetDutyCycle(&PWM_Fans1, 5000);//TEST
}
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	200013c0 	.word	0x200013c0
 800d3ac:	20001348 	.word	0x20001348
 800d3b0:	47800000 	.word	0x47800000
 800d3b4:	461c4000 	.word	0x461c4000
 800d3b8:	20000014 	.word	0x20000014
 800d3bc:	20000048 	.word	0x20000048
 800d3c0:	2000007c 	.word	0x2000007c
 800d3c4:	200000b0 	.word	0x200000b0
 800d3c8:	200000e4 	.word	0x200000e4
 800d3cc:	00000000 	.word	0x00000000

0800d3d0 <IOPort_readAINS>:

void IOPort_readAINS()
{
 800d3d0:	b598      	push	{r3, r4, r7, lr}
 800d3d2:	af00      	add	r7, sp, #0
	*IOportData.x_clutch_STW = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A)/4095.0*5*1000; //5V = 4095
 800d3d4:	4bd4      	ldr	r3, [pc, #848]	; (800d728 <IOPort_readAINS+0x358>)
 800d3d6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800d3d8:	48d4      	ldr	r0, [pc, #848]	; (800d72c <IOPort_readAINS+0x35c>)
 800d3da:	f7fe fb31 	bl	800ba40 <ADC_MEASUREMENT_GetResult>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f001 fadb 	bl	800e99c <__aeabi_i2d>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	4610      	mov	r0, r2
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	a3c8      	add	r3, pc, #800	; (adr r3, 800d710 <IOPort_readAINS+0x340>)
 800d3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f4:	f001 fc62 	bl	800ecbc <__aeabi_ddiv>
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	4610      	mov	r0, r2
 800d3fe:	4619      	mov	r1, r3
 800d400:	f04f 0200 	mov.w	r2, #0
 800d404:	4bca      	ldr	r3, [pc, #808]	; (800d730 <IOPort_readAINS+0x360>)
 800d406:	f001 fb2f 	bl	800ea68 <__aeabi_dmul>
 800d40a:	4602      	mov	r2, r0
 800d40c:	460b      	mov	r3, r1
 800d40e:	4610      	mov	r0, r2
 800d410:	4619      	mov	r1, r3
 800d412:	f04f 0200 	mov.w	r2, #0
 800d416:	4bc7      	ldr	r3, [pc, #796]	; (800d734 <IOPort_readAINS+0x364>)
 800d418:	f001 fb26 	bl	800ea68 <__aeabi_dmul>
 800d41c:	4602      	mov	r2, r0
 800d41e:	460b      	mov	r3, r1
 800d420:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.U_Bat = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_B)/4095.0*14.8*1000;
 800d424:	4bc0      	ldr	r3, [pc, #768]	; (800d728 <IOPort_readAINS+0x358>)
 800d426:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800d428:	48c3      	ldr	r0, [pc, #780]	; (800d738 <IOPort_readAINS+0x368>)
 800d42a:	f7fe fb09 	bl	800ba40 <ADC_MEASUREMENT_GetResult>
 800d42e:	4603      	mov	r3, r0
 800d430:	4618      	mov	r0, r3
 800d432:	f001 fab3 	bl	800e99c <__aeabi_i2d>
 800d436:	4602      	mov	r2, r0
 800d438:	460b      	mov	r3, r1
 800d43a:	4610      	mov	r0, r2
 800d43c:	4619      	mov	r1, r3
 800d43e:	a3b4      	add	r3, pc, #720	; (adr r3, 800d710 <IOPort_readAINS+0x340>)
 800d440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d444:	f001 fc3a 	bl	800ecbc <__aeabi_ddiv>
 800d448:	4602      	mov	r2, r0
 800d44a:	460b      	mov	r3, r1
 800d44c:	4610      	mov	r0, r2
 800d44e:	4619      	mov	r1, r3
 800d450:	a3b1      	add	r3, pc, #708	; (adr r3, 800d718 <IOPort_readAINS+0x348>)
 800d452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d456:	f001 fb07 	bl	800ea68 <__aeabi_dmul>
 800d45a:	4602      	mov	r2, r0
 800d45c:	460b      	mov	r3, r1
 800d45e:	4610      	mov	r0, r2
 800d460:	4619      	mov	r1, r3
 800d462:	f04f 0200 	mov.w	r2, #0
 800d466:	4bb3      	ldr	r3, [pc, #716]	; (800d734 <IOPort_readAINS+0x364>)
 800d468:	f001 fafe 	bl	800ea68 <__aeabi_dmul>
 800d46c:	4602      	mov	r2, r0
 800d46e:	460b      	mov	r3, r1
 800d470:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.x_RH_F = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_C)/4095.0*12*1000;
 800d474:	4bac      	ldr	r3, [pc, #688]	; (800d728 <IOPort_readAINS+0x358>)
 800d476:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d478:	48b0      	ldr	r0, [pc, #704]	; (800d73c <IOPort_readAINS+0x36c>)
 800d47a:	f7fe fae1 	bl	800ba40 <ADC_MEASUREMENT_GetResult>
 800d47e:	4603      	mov	r3, r0
 800d480:	4618      	mov	r0, r3
 800d482:	f001 fa8b 	bl	800e99c <__aeabi_i2d>
 800d486:	4602      	mov	r2, r0
 800d488:	460b      	mov	r3, r1
 800d48a:	4610      	mov	r0, r2
 800d48c:	4619      	mov	r1, r3
 800d48e:	a3a0      	add	r3, pc, #640	; (adr r3, 800d710 <IOPort_readAINS+0x340>)
 800d490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d494:	f001 fc12 	bl	800ecbc <__aeabi_ddiv>
 800d498:	4602      	mov	r2, r0
 800d49a:	460b      	mov	r3, r1
 800d49c:	4610      	mov	r0, r2
 800d49e:	4619      	mov	r1, r3
 800d4a0:	f04f 0200 	mov.w	r2, #0
 800d4a4:	4ba6      	ldr	r3, [pc, #664]	; (800d740 <IOPort_readAINS+0x370>)
 800d4a6:	f001 fadf 	bl	800ea68 <__aeabi_dmul>
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	4610      	mov	r0, r2
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	f04f 0200 	mov.w	r2, #0
 800d4b6:	4b9f      	ldr	r3, [pc, #636]	; (800d734 <IOPort_readAINS+0x364>)
 800d4b8:	f001 fad6 	bl	800ea68 <__aeabi_dmul>
 800d4bc:	4602      	mov	r2, r0
 800d4be:	460b      	mov	r3, r1
 800d4c0:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.f_FR = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_D)/4095.0*5*1000;
 800d4c4:	4b98      	ldr	r3, [pc, #608]	; (800d728 <IOPort_readAINS+0x358>)
 800d4c6:	695c      	ldr	r4, [r3, #20]
 800d4c8:	489e      	ldr	r0, [pc, #632]	; (800d744 <IOPort_readAINS+0x374>)
 800d4ca:	f7fe fab9 	bl	800ba40 <ADC_MEASUREMENT_GetResult>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f001 fa63 	bl	800e99c <__aeabi_i2d>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	460b      	mov	r3, r1
 800d4da:	4610      	mov	r0, r2
 800d4dc:	4619      	mov	r1, r3
 800d4de:	a38c      	add	r3, pc, #560	; (adr r3, 800d710 <IOPort_readAINS+0x340>)
 800d4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e4:	f001 fbea 	bl	800ecbc <__aeabi_ddiv>
 800d4e8:	4602      	mov	r2, r0
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	4610      	mov	r0, r2
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	f04f 0200 	mov.w	r2, #0
 800d4f4:	4b8e      	ldr	r3, [pc, #568]	; (800d730 <IOPort_readAINS+0x360>)
 800d4f6:	f001 fab7 	bl	800ea68 <__aeabi_dmul>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	4610      	mov	r0, r2
 800d500:	4619      	mov	r1, r3
 800d502:	f04f 0200 	mov.w	r2, #0
 800d506:	4b8b      	ldr	r3, [pc, #556]	; (800d734 <IOPort_readAINS+0x364>)
 800d508:	f001 faae 	bl	800ea68 <__aeabi_dmul>
 800d50c:	4602      	mov	r2, r0
 800d50e:	460b      	mov	r3, r1
 800d510:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.f_FL = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_E)/4095.0*5*1000;
 800d514:	4b84      	ldr	r3, [pc, #528]	; (800d728 <IOPort_readAINS+0x358>)
 800d516:	691c      	ldr	r4, [r3, #16]
 800d518:	488b      	ldr	r0, [pc, #556]	; (800d748 <IOPort_readAINS+0x378>)
 800d51a:	f7fe fa91 	bl	800ba40 <ADC_MEASUREMENT_GetResult>
 800d51e:	4603      	mov	r3, r0
 800d520:	4618      	mov	r0, r3
 800d522:	f001 fa3b 	bl	800e99c <__aeabi_i2d>
 800d526:	4602      	mov	r2, r0
 800d528:	460b      	mov	r3, r1
 800d52a:	4610      	mov	r0, r2
 800d52c:	4619      	mov	r1, r3
 800d52e:	a378      	add	r3, pc, #480	; (adr r3, 800d710 <IOPort_readAINS+0x340>)
 800d530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d534:	f001 fbc2 	bl	800ecbc <__aeabi_ddiv>
 800d538:	4602      	mov	r2, r0
 800d53a:	460b      	mov	r3, r1
 800d53c:	4610      	mov	r0, r2
 800d53e:	4619      	mov	r1, r3
 800d540:	f04f 0200 	mov.w	r2, #0
 800d544:	4b7a      	ldr	r3, [pc, #488]	; (800d730 <IOPort_readAINS+0x360>)
 800d546:	f001 fa8f 	bl	800ea68 <__aeabi_dmul>
 800d54a:	4602      	mov	r2, r0
 800d54c:	460b      	mov	r3, r1
 800d54e:	4610      	mov	r0, r2
 800d550:	4619      	mov	r1, r3
 800d552:	f04f 0200 	mov.w	r2, #0
 800d556:	4b77      	ldr	r3, [pc, #476]	; (800d734 <IOPort_readAINS+0x364>)
 800d558:	f001 fa86 	bl	800ea68 <__aeabi_dmul>
 800d55c:	4602      	mov	r2, r0
 800d55e:	460b      	mov	r3, r1
 800d560:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.x_clutch = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_F)/4095.0*5*1000;
 800d564:	4b70      	ldr	r3, [pc, #448]	; (800d728 <IOPort_readAINS+0x358>)
 800d566:	68dc      	ldr	r4, [r3, #12]
 800d568:	4878      	ldr	r0, [pc, #480]	; (800d74c <IOPort_readAINS+0x37c>)
 800d56a:	f7fe fa69 	bl	800ba40 <ADC_MEASUREMENT_GetResult>
 800d56e:	4603      	mov	r3, r0
 800d570:	4618      	mov	r0, r3
 800d572:	f001 fa13 	bl	800e99c <__aeabi_i2d>
 800d576:	4602      	mov	r2, r0
 800d578:	460b      	mov	r3, r1
 800d57a:	4610      	mov	r0, r2
 800d57c:	4619      	mov	r1, r3
 800d57e:	a364      	add	r3, pc, #400	; (adr r3, 800d710 <IOPort_readAINS+0x340>)
 800d580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d584:	f001 fb9a 	bl	800ecbc <__aeabi_ddiv>
 800d588:	4602      	mov	r2, r0
 800d58a:	460b      	mov	r3, r1
 800d58c:	4610      	mov	r0, r2
 800d58e:	4619      	mov	r1, r3
 800d590:	f04f 0200 	mov.w	r2, #0
 800d594:	4b66      	ldr	r3, [pc, #408]	; (800d730 <IOPort_readAINS+0x360>)
 800d596:	f001 fa67 	bl	800ea68 <__aeabi_dmul>
 800d59a:	4602      	mov	r2, r0
 800d59c:	460b      	mov	r3, r1
 800d59e:	4610      	mov	r0, r2
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	f04f 0200 	mov.w	r2, #0
 800d5a6:	4b63      	ldr	r3, [pc, #396]	; (800d734 <IOPort_readAINS+0x364>)
 800d5a8:	f001 fa5e 	bl	800ea68 <__aeabi_dmul>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.p_brake_R = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_G)/4095.0*5*1000;
 800d5b4:	4b5c      	ldr	r3, [pc, #368]	; (800d728 <IOPort_readAINS+0x358>)
 800d5b6:	685c      	ldr	r4, [r3, #4]
 800d5b8:	4865      	ldr	r0, [pc, #404]	; (800d750 <IOPort_readAINS+0x380>)
 800d5ba:	f7fe fa41 	bl	800ba40 <ADC_MEASUREMENT_GetResult>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f001 f9eb 	bl	800e99c <__aeabi_i2d>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	4610      	mov	r0, r2
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	a350      	add	r3, pc, #320	; (adr r3, 800d710 <IOPort_readAINS+0x340>)
 800d5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d4:	f001 fb72 	bl	800ecbc <__aeabi_ddiv>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	460b      	mov	r3, r1
 800d5dc:	4610      	mov	r0, r2
 800d5de:	4619      	mov	r1, r3
 800d5e0:	f04f 0200 	mov.w	r2, #0
 800d5e4:	4b52      	ldr	r3, [pc, #328]	; (800d730 <IOPort_readAINS+0x360>)
 800d5e6:	f001 fa3f 	bl	800ea68 <__aeabi_dmul>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	4610      	mov	r0, r2
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	f04f 0200 	mov.w	r2, #0
 800d5f6:	4b4f      	ldr	r3, [pc, #316]	; (800d734 <IOPort_readAINS+0x364>)
 800d5f8:	f001 fa36 	bl	800ea68 <__aeabi_dmul>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	460b      	mov	r3, r1
 800d600:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.boardTemp = NTC_Calc(ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_H));
 800d604:	4b48      	ldr	r3, [pc, #288]	; (800d728 <IOPort_readAINS+0x358>)
 800d606:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800d608:	4852      	ldr	r0, [pc, #328]	; (800d754 <IOPort_readAINS+0x384>)
 800d60a:	f7fe fa19 	bl	800ba40 <ADC_MEASUREMENT_GetResult>
 800d60e:	4603      	mov	r3, r0
 800d610:	4618      	mov	r0, r3
 800d612:	f001 f9b3 	bl	800e97c <__aeabi_ui2d>
 800d616:	4602      	mov	r2, r0
 800d618:	460b      	mov	r3, r1
 800d61a:	4610      	mov	r0, r2
 800d61c:	4619      	mov	r1, r3
 800d61e:	f000 f9ab 	bl	800d978 <NTC_Calc>
 800d622:	4602      	mov	r2, r0
 800d624:	460b      	mov	r3, r1
 800d626:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.TR1_VSense_WP = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_I)/4095.0*3.3*1000;
 800d62a:	4b3f      	ldr	r3, [pc, #252]	; (800d728 <IOPort_readAINS+0x358>)
 800d62c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800d62e:	484a      	ldr	r0, [pc, #296]	; (800d758 <IOPort_readAINS+0x388>)
 800d630:	f7fe fa06 	bl	800ba40 <ADC_MEASUREMENT_GetResult>
 800d634:	4603      	mov	r3, r0
 800d636:	4618      	mov	r0, r3
 800d638:	f001 f9b0 	bl	800e99c <__aeabi_i2d>
 800d63c:	4602      	mov	r2, r0
 800d63e:	460b      	mov	r3, r1
 800d640:	4610      	mov	r0, r2
 800d642:	4619      	mov	r1, r3
 800d644:	a332      	add	r3, pc, #200	; (adr r3, 800d710 <IOPort_readAINS+0x340>)
 800d646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64a:	f001 fb37 	bl	800ecbc <__aeabi_ddiv>
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	4610      	mov	r0, r2
 800d654:	4619      	mov	r1, r3
 800d656:	a332      	add	r3, pc, #200	; (adr r3, 800d720 <IOPort_readAINS+0x350>)
 800d658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d65c:	f001 fa04 	bl	800ea68 <__aeabi_dmul>
 800d660:	4602      	mov	r2, r0
 800d662:	460b      	mov	r3, r1
 800d664:	4610      	mov	r0, r2
 800d666:	4619      	mov	r1, r3
 800d668:	f04f 0200 	mov.w	r2, #0
 800d66c:	4b31      	ldr	r3, [pc, #196]	; (800d734 <IOPort_readAINS+0x364>)
 800d66e:	f001 f9fb 	bl	800ea68 <__aeabi_dmul>
 800d672:	4602      	mov	r2, r0
 800d674:	460b      	mov	r3, r1
 800d676:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.TR2_VSense_FAN1 = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_J)/4095.0*3.3*1000;
 800d67a:	4b2b      	ldr	r3, [pc, #172]	; (800d728 <IOPort_readAINS+0x358>)
 800d67c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800d67e:	4837      	ldr	r0, [pc, #220]	; (800d75c <IOPort_readAINS+0x38c>)
 800d680:	f7fe f9de 	bl	800ba40 <ADC_MEASUREMENT_GetResult>
 800d684:	4603      	mov	r3, r0
 800d686:	4618      	mov	r0, r3
 800d688:	f001 f988 	bl	800e99c <__aeabi_i2d>
 800d68c:	4602      	mov	r2, r0
 800d68e:	460b      	mov	r3, r1
 800d690:	4610      	mov	r0, r2
 800d692:	4619      	mov	r1, r3
 800d694:	a31e      	add	r3, pc, #120	; (adr r3, 800d710 <IOPort_readAINS+0x340>)
 800d696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d69a:	f001 fb0f 	bl	800ecbc <__aeabi_ddiv>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	4610      	mov	r0, r2
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	a31e      	add	r3, pc, #120	; (adr r3, 800d720 <IOPort_readAINS+0x350>)
 800d6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ac:	f001 f9dc 	bl	800ea68 <__aeabi_dmul>
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	460b      	mov	r3, r1
 800d6b4:	4610      	mov	r0, r2
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	f04f 0200 	mov.w	r2, #0
 800d6bc:	4b1d      	ldr	r3, [pc, #116]	; (800d734 <IOPort_readAINS+0x364>)
 800d6be:	f001 f9d3 	bl	800ea68 <__aeabi_dmul>
 800d6c2:	4602      	mov	r2, r0
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	e9c4 2300 	strd	r2, r3, [r4]
	*IOportData.TR3_VSense_FAN2 = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_K)/4095.0*3.3*1000;
 800d6ca:	4b17      	ldr	r3, [pc, #92]	; (800d728 <IOPort_readAINS+0x358>)
 800d6cc:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800d6ce:	4824      	ldr	r0, [pc, #144]	; (800d760 <IOPort_readAINS+0x390>)
 800d6d0:	f7fe f9b6 	bl	800ba40 <ADC_MEASUREMENT_GetResult>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f001 f960 	bl	800e99c <__aeabi_i2d>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	460b      	mov	r3, r1
 800d6e0:	4610      	mov	r0, r2
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	a30a      	add	r3, pc, #40	; (adr r3, 800d710 <IOPort_readAINS+0x340>)
 800d6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ea:	f001 fae7 	bl	800ecbc <__aeabi_ddiv>
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	4610      	mov	r0, r2
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	a30a      	add	r3, pc, #40	; (adr r3, 800d720 <IOPort_readAINS+0x350>)
 800d6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fc:	f001 f9b4 	bl	800ea68 <__aeabi_dmul>
 800d700:	4602      	mov	r2, r0
 800d702:	460b      	mov	r3, r1
 800d704:	4610      	mov	r0, r2
 800d706:	4619      	mov	r1, r3
 800d708:	f04f 0200 	mov.w	r2, #0
 800d70c:	e02a      	b.n	800d764 <IOPort_readAINS+0x394>
 800d70e:	bf00      	nop
 800d710:	00000000 	.word	0x00000000
 800d714:	40affe00 	.word	0x40affe00
 800d718:	9999999a 	.word	0x9999999a
 800d71c:	402d9999 	.word	0x402d9999
 800d720:	66666666 	.word	0x66666666
 800d724:	400a6666 	.word	0x400a6666
 800d728:	20001348 	.word	0x20001348
 800d72c:	20000484 	.word	0x20000484
 800d730:	40140000 	.word	0x40140000
 800d734:	408f4000 	.word	0x408f4000
 800d738:	200004a4 	.word	0x200004a4
 800d73c:	200004c4 	.word	0x200004c4
 800d740:	40280000 	.word	0x40280000
 800d744:	200004e4 	.word	0x200004e4
 800d748:	20000504 	.word	0x20000504
 800d74c:	20000524 	.word	0x20000524
 800d750:	20000544 	.word	0x20000544
 800d754:	20000564 	.word	0x20000564
 800d758:	20000584 	.word	0x20000584
 800d75c:	200005a4 	.word	0x200005a4
 800d760:	200005c4 	.word	0x200005c4
 800d764:	4b03      	ldr	r3, [pc, #12]	; (800d774 <IOPort_readAINS+0x3a4>)
 800d766:	f001 f97f 	bl	800ea68 <__aeabi_dmul>
 800d76a:	4602      	mov	r2, r0
 800d76c:	460b      	mov	r3, r1
 800d76e:	e9c4 2300 	strd	r2, r3, [r4]
	//int test2 = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_H);
  }
 800d772:	bd98      	pop	{r3, r4, r7, pc}
 800d774:	408f4000 	.word	0x408f4000

0800d778 <ERU0_3_IRQHandler>:

void Interrupt_Shifting(void)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	af00      	add	r7, sp, #0
	shiftUpInterrupt = DIGITAL_IO_GetInput(&Signal_UpShift);
 800d77c:	4807      	ldr	r0, [pc, #28]	; (800d79c <ERU0_3_IRQHandler+0x24>)
 800d77e:	f7ff fc69 	bl	800d054 <DIGITAL_IO_GetInput>
 800d782:	4603      	mov	r3, r0
 800d784:	b2da      	uxtb	r2, r3
 800d786:	4b06      	ldr	r3, [pc, #24]	; (800d7a0 <ERU0_3_IRQHandler+0x28>)
 800d788:	701a      	strb	r2, [r3, #0]
	shiftDownInterrupt = DIGITAL_IO_GetInput(&Signal_DownShift);
 800d78a:	4806      	ldr	r0, [pc, #24]	; (800d7a4 <ERU0_3_IRQHandler+0x2c>)
 800d78c:	f7ff fc62 	bl	800d054 <DIGITAL_IO_GetInput>
 800d790:	4603      	mov	r3, r0
 800d792:	b2da      	uxtb	r2, r3
 800d794:	4b04      	ldr	r3, [pc, #16]	; (800d7a8 <ERU0_3_IRQHandler+0x30>)
 800d796:	701a      	strb	r2, [r3, #0]
}
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	0800f68c 	.word	0x0800f68c
 800d7a0:	200012f8 	.word	0x200012f8
 800d7a4:	0800f678 	.word	0x0800f678
 800d7a8:	200012d8 	.word	0x200012d8

0800d7ac <ManualControl_setDOUTS>:

void ManualControl_setDOUTS()
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	af00      	add	r7, sp, #0
	if(canData.ManConOn_VOVGShiftUp)
 800d7b0:	4b1d      	ldr	r3, [pc, #116]	; (800d828 <ManualControl_setDOUTS+0x7c>)
 800d7b2:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d005      	beq.n	800d7c6 <ManualControl_setDOUTS+0x1a>
	  *IOportData.VOVG_ShiftUp = canData.ManConVar_VOVGShiftUp;
 800d7ba:	4b1c      	ldr	r3, [pc, #112]	; (800d82c <ManualControl_setDOUTS+0x80>)
 800d7bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7be:	4a1a      	ldr	r2, [pc, #104]	; (800d828 <ManualControl_setDOUTS+0x7c>)
 800d7c0:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
 800d7c4:	701a      	strb	r2, [r3, #0]

	if(canData.ManConOn_VOVGShiftDown)
 800d7c6:	4b18      	ldr	r3, [pc, #96]	; (800d828 <ManualControl_setDOUTS+0x7c>)
 800d7c8:	f893 314e 	ldrb.w	r3, [r3, #334]	; 0x14e
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d005      	beq.n	800d7dc <ManualControl_setDOUTS+0x30>
	  *IOportData.VOVG_ShiftDown = canData.ManConVar_VOVGShiftDown;
 800d7d0:	4b16      	ldr	r3, [pc, #88]	; (800d82c <ManualControl_setDOUTS+0x80>)
 800d7d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7d4:	4a14      	ldr	r2, [pc, #80]	; (800d828 <ManualControl_setDOUTS+0x7c>)
 800d7d6:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
 800d7da:	701a      	strb	r2, [r3, #0]

	if(canData.ManConOn_IgnCut)
 800d7dc:	4b12      	ldr	r3, [pc, #72]	; (800d828 <ManualControl_setDOUTS+0x7c>)
 800d7de:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d005      	beq.n	800d7f2 <ManualControl_setDOUTS+0x46>
	  *IOportData.Ignition_Cut = canData.ManConVar_IgnCut;
 800d7e6:	4b11      	ldr	r3, [pc, #68]	; (800d82c <ManualControl_setDOUTS+0x80>)
 800d7e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7ea:	4a0f      	ldr	r2, [pc, #60]	; (800d828 <ManualControl_setDOUTS+0x7c>)
 800d7ec:	f892 215a 	ldrb.w	r2, [r2, #346]	; 0x15a
 800d7f0:	701a      	strb	r2, [r3, #0]

	if(canData.ManConOn_VOVG_IN)
 800d7f2:	4b0d      	ldr	r3, [pc, #52]	; (800d828 <ManualControl_setDOUTS+0x7c>)
 800d7f4:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d005      	beq.n	800d808 <ManualControl_setDOUTS+0x5c>
	  *IOportData.VOVG_IN = canData.ManConVar_VOVG_IN;
 800d7fc:	4b0b      	ldr	r3, [pc, #44]	; (800d82c <ManualControl_setDOUTS+0x80>)
 800d7fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d800:	4a09      	ldr	r2, [pc, #36]	; (800d828 <ManualControl_setDOUTS+0x7c>)
 800d802:	f892 215b 	ldrb.w	r2, [r2, #347]	; 0x15b
 800d806:	701a      	strb	r2, [r3, #0]

	if(canData.ManConOn_VOVG_OUT)
 800d808:	4b07      	ldr	r3, [pc, #28]	; (800d828 <ManualControl_setDOUTS+0x7c>)
 800d80a:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d005      	beq.n	800d81e <ManualControl_setDOUTS+0x72>
	  *IOportData.VOVG_OUT = canData.ManConVar_VOVG_OUT;
 800d812:	4b06      	ldr	r3, [pc, #24]	; (800d82c <ManualControl_setDOUTS+0x80>)
 800d814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d816:	4a04      	ldr	r2, [pc, #16]	; (800d828 <ManualControl_setDOUTS+0x7c>)
 800d818:	f892 215c 	ldrb.w	r2, [r2, #348]	; 0x15c
 800d81c:	701a      	strb	r2, [r3, #0]
}
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop
 800d828:	200013c0 	.word	0x200013c0
 800d82c:	20001348 	.word	0x20001348

0800d830 <ManualControl_setPWMOUTS>:

void ManualControl_setPWMOUTS()
{
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
	if(canData.ManConOn_MHJ9_IN)
 800d836:	4b4b      	ldr	r3, [pc, #300]	; (800d964 <ManualControl_setPWMOUTS+0x134>)
 800d838:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d017      	beq.n	800d870 <ManualControl_setPWMOUTS+0x40>
	  *IOportData.MHJ9_IN = (float)canData.ManConVar_MHJ9_IN/100*65536;
 800d840:	4b49      	ldr	r3, [pc, #292]	; (800d968 <ManualControl_setPWMOUTS+0x138>)
 800d842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d844:	4a47      	ldr	r2, [pc, #284]	; (800d964 <ManualControl_setPWMOUTS+0x134>)
 800d846:	f892 2153 	ldrb.w	r2, [r2, #339]	; 0x153
 800d84a:	ee07 2a90 	vmov	s15, r2
 800d84e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d852:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800d96c <ManualControl_setPWMOUTS+0x13c>
 800d856:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d85a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800d970 <ManualControl_setPWMOUTS+0x140>
 800d85e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d866:	edc7 7a01 	vstr	s15, [r7, #4]
 800d86a:	88ba      	ldrh	r2, [r7, #4]
 800d86c:	b292      	uxth	r2, r2
 800d86e:	801a      	strh	r2, [r3, #0]

	if(canData.ManConOn_MHJ9_OUT)
 800d870:	4b3c      	ldr	r3, [pc, #240]	; (800d964 <ManualControl_setPWMOUTS+0x134>)
 800d872:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 800d876:	2b00      	cmp	r3, #0
 800d878:	d017      	beq.n	800d8aa <ManualControl_setPWMOUTS+0x7a>
	  *IOportData.MHJ9_OUT = (float)canData.ManConVar_MHJ9_OUT/100*65536;
 800d87a:	4b3b      	ldr	r3, [pc, #236]	; (800d968 <ManualControl_setPWMOUTS+0x138>)
 800d87c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d87e:	4a39      	ldr	r2, [pc, #228]	; (800d964 <ManualControl_setPWMOUTS+0x134>)
 800d880:	f892 2154 	ldrb.w	r2, [r2, #340]	; 0x154
 800d884:	ee07 2a90 	vmov	s15, r2
 800d888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d88c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800d96c <ManualControl_setPWMOUTS+0x13c>
 800d890:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d894:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d970 <ManualControl_setPWMOUTS+0x140>
 800d898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d89c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8a0:	edc7 7a01 	vstr	s15, [r7, #4]
 800d8a4:	88ba      	ldrh	r2, [r7, #4]
 800d8a6:	b292      	uxth	r2, r2
 800d8a8:	801a      	strh	r2, [r3, #0]

	if(canData.ManConOn_Waterpump)
 800d8aa:	4b2e      	ldr	r3, [pc, #184]	; (800d964 <ManualControl_setPWMOUTS+0x134>)
 800d8ac:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d017      	beq.n	800d8e4 <ManualControl_setPWMOUTS+0xb4>
	  *IOportData.Waterpump_PWM_active = (float)canData.ManConVar_Waterpump/100*65536;
 800d8b4:	4b2c      	ldr	r3, [pc, #176]	; (800d968 <ManualControl_setPWMOUTS+0x138>)
 800d8b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8b8:	4a2a      	ldr	r2, [pc, #168]	; (800d964 <ManualControl_setPWMOUTS+0x134>)
 800d8ba:	f892 2155 	ldrb.w	r2, [r2, #341]	; 0x155
 800d8be:	ee07 2a90 	vmov	s15, r2
 800d8c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8c6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800d96c <ManualControl_setPWMOUTS+0x13c>
 800d8ca:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d8ce:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800d970 <ManualControl_setPWMOUTS+0x140>
 800d8d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d8d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8da:	edc7 7a01 	vstr	s15, [r7, #4]
 800d8de:	88ba      	ldrh	r2, [r7, #4]
 800d8e0:	b292      	uxth	r2, r2
 800d8e2:	801a      	strh	r2, [r3, #0]

	if(canData.ManConOn_Fans1)
 800d8e4:	4b1f      	ldr	r3, [pc, #124]	; (800d964 <ManualControl_setPWMOUTS+0x134>)
 800d8e6:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d017      	beq.n	800d91e <ManualControl_setPWMOUTS+0xee>
	  *IOportData.Fans1_PWM_active = (float)canData.ManConVar_Fans1/100*65536;
 800d8ee:	4b1e      	ldr	r3, [pc, #120]	; (800d968 <ManualControl_setPWMOUTS+0x138>)
 800d8f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8f2:	4a1c      	ldr	r2, [pc, #112]	; (800d964 <ManualControl_setPWMOUTS+0x134>)
 800d8f4:	f892 2156 	ldrb.w	r2, [r2, #342]	; 0x156
 800d8f8:	ee07 2a90 	vmov	s15, r2
 800d8fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d900:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800d96c <ManualControl_setPWMOUTS+0x13c>
 800d904:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d908:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800d970 <ManualControl_setPWMOUTS+0x140>
 800d90c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d914:	edc7 7a01 	vstr	s15, [r7, #4]
 800d918:	88ba      	ldrh	r2, [r7, #4]
 800d91a:	b292      	uxth	r2, r2
 800d91c:	801a      	strh	r2, [r3, #0]

	if(canData.ManConOn_Fans2)
 800d91e:	4b11      	ldr	r3, [pc, #68]	; (800d964 <ManualControl_setPWMOUTS+0x134>)
 800d920:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 800d924:	2b00      	cmp	r3, #0
 800d926:	d017      	beq.n	800d958 <ManualControl_setPWMOUTS+0x128>
	  *IOportData.Fans2_PWM_active = (float)canData.ManConVar_Fans2/100*65536;
 800d928:	4b0f      	ldr	r3, [pc, #60]	; (800d968 <ManualControl_setPWMOUTS+0x138>)
 800d92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d92c:	4a0d      	ldr	r2, [pc, #52]	; (800d964 <ManualControl_setPWMOUTS+0x134>)
 800d92e:	f892 2157 	ldrb.w	r2, [r2, #343]	; 0x157
 800d932:	ee07 2a90 	vmov	s15, r2
 800d936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d93a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d96c <ManualControl_setPWMOUTS+0x13c>
 800d93e:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d942:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800d970 <ManualControl_setPWMOUTS+0x140>
 800d946:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d94a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d94e:	edc7 7a01 	vstr	s15, [r7, #4]
 800d952:	88ba      	ldrh	r2, [r7, #4]
 800d954:	b292      	uxth	r2, r2
 800d956:	801a      	strh	r2, [r3, #0]
}
 800d958:	370c      	adds	r7, #12
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop
 800d964:	200013c0 	.word	0x200013c0
 800d968:	20001348 	.word	0x20001348
 800d96c:	42c80000 	.word	0x42c80000
 800d970:	47800000 	.word	0x47800000
 800d974:	00000000 	.word	0x00000000

0800d978 <NTC_Calc>:

double NTC_Calc(double Temp)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b098      	sub	sp, #96	; 0x60
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	e9c7 0100 	strd	r0, r1, [r7]
			int NTC_LUT_NB_POINT = 6;
 800d982:	2306      	movs	r3, #6
 800d984:	64bb      	str	r3, [r7, #72]	; 0x48
			int i;
			uint16_t Temp_Val;
			float x0,y0,x1,y1,a,b;
			uint32_t LUT_NTC_V[6]={0};
 800d986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d98a:	2200      	movs	r2, #0
 800d98c:	601a      	str	r2, [r3, #0]
 800d98e:	3304      	adds	r3, #4
 800d990:	2200      	movs	r2, #0
 800d992:	601a      	str	r2, [r3, #0]
 800d994:	3304      	adds	r3, #4
 800d996:	2200      	movs	r2, #0
 800d998:	601a      	str	r2, [r3, #0]
 800d99a:	3304      	adds	r3, #4
 800d99c:	2200      	movs	r2, #0
 800d99e:	601a      	str	r2, [r3, #0]
 800d9a0:	3304      	adds	r3, #4
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	601a      	str	r2, [r3, #0]
 800d9a6:	3304      	adds	r3, #4
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	601a      	str	r2, [r3, #0]
 800d9ac:	3304      	adds	r3, #4
			float LUT_NTC[6]={0};
 800d9ae:	f107 030c 	add.w	r3, r7, #12
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	601a      	str	r2, [r3, #0]
 800d9b6:	3304      	adds	r3, #4
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	601a      	str	r2, [r3, #0]
 800d9bc:	3304      	adds	r3, #4
 800d9be:	2200      	movs	r2, #0
 800d9c0:	601a      	str	r2, [r3, #0]
 800d9c2:	3304      	adds	r3, #4
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	601a      	str	r2, [r3, #0]
 800d9c8:	3304      	adds	r3, #4
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	601a      	str	r2, [r3, #0]
 800d9ce:	3304      	adds	r3, #4
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	601a      	str	r2, [r3, #0]
 800d9d4:	3304      	adds	r3, #4

			LUT_NTC_V[0] = 140;
 800d9d6:	238c      	movs	r3, #140	; 0x8c
 800d9d8:	627b      	str	r3, [r7, #36]	; 0x24
			LUT_NTC_V[1] = 283;
 800d9da:	f240 131b 	movw	r3, #283	; 0x11b
 800d9de:	62bb      	str	r3, [r7, #40]	; 0x28
			LUT_NTC_V[2] = 602;
 800d9e0:	f240 235a 	movw	r3, #602	; 0x25a
 800d9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
			LUT_NTC_V[3] = 1288;
 800d9e6:	f44f 63a1 	mov.w	r3, #1288	; 0x508
 800d9ea:	633b      	str	r3, [r7, #48]	; 0x30
			LUT_NTC_V[4] = 2500;
 800d9ec:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800d9f0:	637b      	str	r3, [r7, #52]	; 0x34
			LUT_NTC_V[5] = 3850;
 800d9f2:	f640 730a 	movw	r3, #3850	; 0xf0a
 800d9f6:	63bb      	str	r3, [r7, #56]	; 0x38

		    LUT_NTC[0] = 125;
 800d9f8:	4b77      	ldr	r3, [pc, #476]	; (800dbd8 <NTC_Calc+0x260>)
 800d9fa:	60fb      	str	r3, [r7, #12]
			LUT_NTC[1] = 100;
 800d9fc:	4b77      	ldr	r3, [pc, #476]	; (800dbdc <NTC_Calc+0x264>)
 800d9fe:	613b      	str	r3, [r7, #16]
			LUT_NTC[2] = 75;
 800da00:	4b77      	ldr	r3, [pc, #476]	; (800dbe0 <NTC_Calc+0x268>)
 800da02:	617b      	str	r3, [r7, #20]
			LUT_NTC[3] = 50;
 800da04:	4b77      	ldr	r3, [pc, #476]	; (800dbe4 <NTC_Calc+0x26c>)
 800da06:	61bb      	str	r3, [r7, #24]
			LUT_NTC[4] = 25;
 800da08:	4b77      	ldr	r3, [pc, #476]	; (800dbe8 <NTC_Calc+0x270>)
 800da0a:	61fb      	str	r3, [r7, #28]
			LUT_NTC[5] = 0;
 800da0c:	f04f 0300 	mov.w	r3, #0
 800da10:	623b      	str	r3, [r7, #32]

			i=0;
 800da12:	2300      	movs	r3, #0
 800da14:	65fb      	str	r3, [r7, #92]	; 0x5c
			Temp_Val = ((Temp)*5000/4095);
 800da16:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da1a:	a36b      	add	r3, pc, #428	; (adr r3, 800dbc8 <NTC_Calc+0x250>)
 800da1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da20:	f001 f822 	bl	800ea68 <__aeabi_dmul>
 800da24:	4602      	mov	r2, r0
 800da26:	460b      	mov	r3, r1
 800da28:	4610      	mov	r0, r2
 800da2a:	4619      	mov	r1, r3
 800da2c:	a368      	add	r3, pc, #416	; (adr r3, 800dbd0 <NTC_Calc+0x258>)
 800da2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da32:	f001 f943 	bl	800ecbc <__aeabi_ddiv>
 800da36:	4602      	mov	r2, r0
 800da38:	460b      	mov	r3, r1
 800da3a:	4610      	mov	r0, r2
 800da3c:	4619      	mov	r1, r3
 800da3e:	f001 faad 	bl	800ef9c <__aeabi_d2uiz>
 800da42:	4603      	mov	r3, r0
 800da44:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			while(i<NTC_LUT_NB_POINT && LUT_NTC_V[i]<=Temp_Val) i++;
 800da48:	e002      	b.n	800da50 <NTC_Calc+0xd8>
 800da4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da4c:	3301      	adds	r3, #1
 800da4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800da52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da54:	429a      	cmp	r2, r3
 800da56:	da0a      	bge.n	800da6e <NTC_Calc+0xf6>
 800da58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800da60:	4413      	add	r3, r2
 800da62:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800da66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d9ed      	bls.n	800da4a <NTC_Calc+0xd2>
			if(i==0){
 800da6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da70:	2b00      	cmp	r3, #0
 800da72:	d112      	bne.n	800da9a <NTC_Calc+0x122>
				x0 = LUT_NTC_V[0];
 800da74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da76:	ee07 3a90 	vmov	s15, r3
 800da7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da7e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				y0 = LUT_NTC[0];
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	657b      	str	r3, [r7, #84]	; 0x54
				x1 = LUT_NTC_V[1];
 800da86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da88:	ee07 3a90 	vmov	s15, r3
 800da8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da90:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				y1 = LUT_NTC[1];
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da98:	e05e      	b.n	800db58 <NTC_Calc+0x1e0>
			}
			else if(i==NTC_LUT_NB_POINT){
 800da9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800da9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d12e      	bne.n	800db00 <NTC_Calc+0x188>
				x0 = LUT_NTC_V[NTC_LUT_NB_POINT-2];
 800daa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daa4:	3b02      	subs	r3, #2
 800daa6:	009b      	lsls	r3, r3, #2
 800daa8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800daac:	4413      	add	r3, r2
 800daae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800dab2:	ee07 3a90 	vmov	s15, r3
 800dab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daba:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				y0 = LUT_NTC[NTC_LUT_NB_POINT-2];
 800dabe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dac0:	3b02      	subs	r3, #2
 800dac2:	009b      	lsls	r3, r3, #2
 800dac4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dac8:	4413      	add	r3, r2
 800daca:	3b54      	subs	r3, #84	; 0x54
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	657b      	str	r3, [r7, #84]	; 0x54
				x1 = LUT_NTC_V[NTC_LUT_NB_POINT-1];
 800dad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dad2:	3b01      	subs	r3, #1
 800dad4:	009b      	lsls	r3, r3, #2
 800dad6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dada:	4413      	add	r3, r2
 800dadc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800dae0:	ee07 3a90 	vmov	s15, r3
 800dae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dae8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				y1 = LUT_NTC[NTC_LUT_NB_POINT-1];
 800daec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daee:	3b01      	subs	r3, #1
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800daf6:	4413      	add	r3, r2
 800daf8:	3b54      	subs	r3, #84	; 0x54
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dafe:	e02b      	b.n	800db58 <NTC_Calc+0x1e0>
			}
			else{
				x0 = LUT_NTC_V[i-1];
 800db00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db02:	3b01      	subs	r3, #1
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800db0a:	4413      	add	r3, r2
 800db0c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800db10:	ee07 3a90 	vmov	s15, r3
 800db14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db18:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				y0 = LUT_NTC[i-1];
 800db1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db1e:	3b01      	subs	r3, #1
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800db26:	4413      	add	r3, r2
 800db28:	3b54      	subs	r3, #84	; 0x54
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	657b      	str	r3, [r7, #84]	; 0x54
				x1 = LUT_NTC_V[i];
 800db2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800db36:	4413      	add	r3, r2
 800db38:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800db3c:	ee07 3a90 	vmov	s15, r3
 800db40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db44:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				y1 = LUT_NTC[i];
 800db48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800db50:	4413      	add	r3, r2
 800db52:	3b54      	subs	r3, #84	; 0x54
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	64fb      	str	r3, [r7, #76]	; 0x4c
			}

			a = (y1-y0)/(x1-x0);
 800db58:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800db5c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800db60:	ee37 7a67 	vsub.f32	s14, s14, s15
 800db64:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800db68:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800db6c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800db70:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800db74:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			b = y0 - a*x0;
 800db78:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800db7c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800db80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db84:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800db88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db8c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			return a*(Temp_Val) + b;
 800db90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800db94:	ee07 3a90 	vmov	s15, r3
 800db98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800db9c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800dba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dba4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800dba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbac:	ee17 0a90 	vmov	r0, s15
 800dbb0:	f000 ff06 	bl	800e9c0 <__aeabi_f2d>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	460b      	mov	r3, r1

}
 800dbb8:	4610      	mov	r0, r2
 800dbba:	4619      	mov	r1, r3
 800dbbc:	3760      	adds	r7, #96	; 0x60
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	f3af 8000 	nop.w
 800dbc8:	00000000 	.word	0x00000000
 800dbcc:	40b38800 	.word	0x40b38800
 800dbd0:	00000000 	.word	0x00000000
 800dbd4:	40affe00 	.word	0x40affe00
 800dbd8:	42fa0000 	.word	0x42fa0000
 800dbdc:	42c80000 	.word	0x42c80000
 800dbe0:	42960000 	.word	0x42960000
 800dbe4:	42480000 	.word	0x42480000
 800dbe8:	41c80000 	.word	0x41c80000
 800dbec:	f3af 8000 	nop.w

0800dbf0 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b083      	sub	sp, #12
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc00:	78fb      	ldrb	r3, [r7, #3]
 800dc02:	fa22 f303 	lsr.w	r3, r2, r3
 800dc06:	f003 0301 	and.w	r3, r3, #1
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	370c      	adds	r7, #12
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr
 800dc16:	bf00      	nop

0800dc18 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	7c1b      	ldrb	r3, [r3, #16]
 800dc28:	4610      	mov	r0, r2
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	f7ff ffe0 	bl	800dbf0 <XMC_GPIO_GetInput>
 800dc30:	4603      	mov	r3, r0
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3708      	adds	r7, #8
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop

0800dc3c <Task_Transmission>:

uint8_t test1 =0,test2 =0;
boolean_T transActive = 0;

void Task_Transmission (void *p)
{
 800dc3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc40:	b084      	sub	sp, #16
 800dc42:	af02      	add	r7, sp, #8
 800dc44:	6078      	str	r0, [r7, #4]
	while(1)
	{
		transActive=1;
 800dc46:	4b40      	ldr	r3, [pc, #256]	; (800dd48 <Task_Transmission+0x10c>)
 800dc48:	2201      	movs	r2, #1
 800dc4a:	701a      	strb	r2, [r3, #0]

		  //Start Transmission Calculation and send Data
		  FUNC_Transmission();
 800dc4c:	f7f5 fc60 	bl	8003510 <FUNC_Transmission>

		  //Set Outputs from Transmission Calculation
		  FUNC_OutputData();
 800dc50:	f7f3 fbd2 	bl	80013f8 <FUNC_OutputData>
		  CAN_1_Transmit(); //Vllt unnötig
 800dc54:	f7fe f98e 	bl	800bf74 <CAN_1_Transmit>
		  CAN_2_Transmit();
 800dc58:	f7fe fefa 	bl	800ca50 <CAN_2_Transmit>
		  IOPort_setDOUTS();
 800dc5c:	f7ff fac6 	bl	800d1ec <IOPort_setDOUTS>
		  IOPort_setPWMOUTS();
 800dc60:	f7ff fb2a 	bl	800d2b8 <IOPort_setPWMOUTS>

		  //Read Inputs for next Calculation
		  CAN_1_Receive();
 800dc64:	f7fe f8d6 	bl	800be14 <CAN_1_Receive>
		  IOPort_readAINS();
 800dc68:	f7ff fbb2 	bl	800d3d0 <IOPort_readAINS>

		  if(shiftDownInterrupt | shiftUpInterrupt)
 800dc6c:	4b37      	ldr	r3, [pc, #220]	; (800dd4c <Task_Transmission+0x110>)
 800dc6e:	781a      	ldrb	r2, [r3, #0]
 800dc70:	4b37      	ldr	r3, [pc, #220]	; (800dd50 <Task_Transmission+0x114>)
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	4313      	orrs	r3, r2
 800dc76:	b2db      	uxtb	r3, r3
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00f      	beq.n	800dc9c <Task_Transmission+0x60>
		  {
			  VCU_DW.VAR_IN_STW_shift_up_request = DIGITAL_IO_GetInput(&Signal_UpShift);
 800dc7c:	4835      	ldr	r0, [pc, #212]	; (800dd54 <Task_Transmission+0x118>)
 800dc7e:	f7ff ffcb 	bl	800dc18 <DIGITAL_IO_GetInput>
 800dc82:	4603      	mov	r3, r0
 800dc84:	b2da      	uxtb	r2, r3
 800dc86:	4b34      	ldr	r3, [pc, #208]	; (800dd58 <Task_Transmission+0x11c>)
 800dc88:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
			  VCU_DW.VAR_IN_STW_shift_down_request = DIGITAL_IO_GetInput(&Signal_DownShift);
 800dc8c:	4833      	ldr	r0, [pc, #204]	; (800dd5c <Task_Transmission+0x120>)
 800dc8e:	f7ff ffc3 	bl	800dc18 <DIGITAL_IO_GetInput>
 800dc92:	4603      	mov	r3, r0
 800dc94:	b2da      	uxtb	r2, r3
 800dc96:	4b30      	ldr	r3, [pc, #192]	; (800dd58 <Task_Transmission+0x11c>)
 800dc98:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
		  }
		  FUNC_InputData();
 800dc9c:	f7f2 fbcc 	bl	8000438 <FUNC_InputData>

		  //Reset if clutch is pressed
		  if((*canData.STW_shift_up_request == 1) | (*canData.STW_shift_down_request == 1) | (*IOportData.x_clutch_STW < clutch_STW_threshold) | shiftDownInterrupt | shiftUpInterrupt)
 800dca0:	4b2f      	ldr	r3, [pc, #188]	; (800dd60 <Task_Transmission+0x124>)
 800dca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dca4:	781b      	ldrb	r3, [r3, #0]
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	bf0c      	ite	eq
 800dcaa:	2301      	moveq	r3, #1
 800dcac:	2300      	movne	r3, #0
 800dcae:	b2da      	uxtb	r2, r3
 800dcb0:	4b2b      	ldr	r3, [pc, #172]	; (800dd60 <Task_Transmission+0x124>)
 800dcb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	bf0c      	ite	eq
 800dcba:	2301      	moveq	r3, #1
 800dcbc:	2300      	movne	r3, #0
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	461e      	mov	r6, r3
 800dcc6:	4b27      	ldr	r3, [pc, #156]	; (800dd64 <Task_Transmission+0x128>)
 800dcc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcca:	e9d3 4500 	ldrd	r4, r5, [r3]
 800dcce:	4b26      	ldr	r3, [pc, #152]	; (800dd68 <Task_Transmission+0x12c>)
 800dcd0:	881b      	ldrh	r3, [r3, #0]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f000 fe62 	bl	800e99c <__aeabi_i2d>
 800dcd8:	4680      	mov	r8, r0
 800dcda:	4689      	mov	r9, r1
 800dcdc:	2301      	movs	r3, #1
 800dcde:	469a      	mov	sl, r3
 800dce0:	4620      	mov	r0, r4
 800dce2:	4629      	mov	r1, r5
 800dce4:	4642      	mov	r2, r8
 800dce6:	464b      	mov	r3, r9
 800dce8:	f001 f930 	bl	800ef4c <__aeabi_dcmplt>
 800dcec:	4603      	mov	r3, r0
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d101      	bne.n	800dcf6 <Task_Transmission+0xba>
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	469a      	mov	sl, r3
 800dcf6:	fa5f f38a 	uxtb.w	r3, sl
 800dcfa:	4333      	orrs	r3, r6
 800dcfc:	4a13      	ldr	r2, [pc, #76]	; (800dd4c <Task_Transmission+0x110>)
 800dcfe:	7812      	ldrb	r2, [r2, #0]
 800dd00:	4313      	orrs	r3, r2
 800dd02:	4a13      	ldr	r2, [pc, #76]	; (800dd50 <Task_Transmission+0x114>)
 800dd04:	7812      	ldrb	r2, [r2, #0]
 800dd06:	4313      	orrs	r3, r2
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d00d      	beq.n	800dd28 <Task_Transmission+0xec>
		  {
			  Watchdog_Reset();
 800dd0c:	f7fe ffca 	bl	800cca4 <Watchdog_Reset>
			  xTimerReset(TimerHandle_Transmission,0);
 800dd10:	4b16      	ldr	r3, [pc, #88]	; (800dd6c <Task_Transmission+0x130>)
 800dd12:	681c      	ldr	r4, [r3, #0]
 800dd14:	f7fc f82a 	bl	8009d6c <xTaskGetTickCount>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	9300      	str	r3, [sp, #0]
 800dd1e:	4620      	mov	r0, r4
 800dd20:	2102      	movs	r1, #2
 800dd22:	2300      	movs	r3, #0
 800dd24:	f7fc fcd6 	bl	800a6d4 <xTimerGenericCommand>
		  }
		  if(TransmissionTask_Stop)
 800dd28:	4b11      	ldr	r3, [pc, #68]	; (800dd70 <Task_Transmission+0x134>)
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d00a      	beq.n	800dd46 <Task_Transmission+0x10a>
		  {
			  transActive = 0;
 800dd30:	4b05      	ldr	r3, [pc, #20]	; (800dd48 <Task_Transmission+0x10c>)
 800dd32:	2200      	movs	r2, #0
 800dd34:	701a      	strb	r2, [r3, #0]
			  TransmissionTask_Stop = 0;
 800dd36:	4b0e      	ldr	r3, [pc, #56]	; (800dd70 <Task_Transmission+0x134>)
 800dd38:	2200      	movs	r2, #0
 800dd3a:	701a      	strb	r2, [r3, #0]
			  vTaskSuspend(TaskHandle_Transmission);
 800dd3c:	4b0d      	ldr	r3, [pc, #52]	; (800dd74 <Task_Transmission+0x138>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7fb fdff 	bl	8009944 <vTaskSuspend>
		  }
	}
 800dd46:	e77e      	b.n	800dc46 <Task_Transmission+0xa>
 800dd48:	20000898 	.word	0x20000898
 800dd4c:	200012d8 	.word	0x200012d8
 800dd50:	200012f8 	.word	0x200012f8
 800dd54:	0800f68c 	.word	0x0800f68c
 800dd58:	200010c8 	.word	0x200010c8
 800dd5c:	0800f678 	.word	0x0800f678
 800dd60:	200013c0 	.word	0x200013c0
 800dd64:	20001348 	.word	0x20001348
 800dd68:	20000628 	.word	0x20000628
 800dd6c:	2000088c 	.word	0x2000088c
 800dd70:	20000894 	.word	0x20000894
 800dd74:	20000880 	.word	0x20000880

0800dd78 <Task_Transmit>:
}

void Task_Transmit (void *p)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		  //Simulink
		  FUNC_OutputData();
 800dd80:	f7f3 fb3a 	bl	80013f8 <FUNC_OutputData>

		  //CAN
		  CAN_1_Transmit();
 800dd84:	f7fe f8f6 	bl	800bf74 <CAN_1_Transmit>
		  CAN_2_Transmit();
 800dd88:	f7fe fe62 	bl	800ca50 <CAN_2_Transmit>

		  //IOPort
		  IOPort_setDOUTS();
 800dd8c:	f7ff fa2e 	bl	800d1ec <IOPort_setDOUTS>
		  IOPort_setPWMOUTS();
 800dd90:	f7ff fa92 	bl	800d2b8 <IOPort_setPWMOUTS>

		  //Watchdog
		  wachdog_reset[1] = 1;
 800dd94:	4b08      	ldr	r3, [pc, #32]	; (800ddb8 <Task_Transmit+0x40>)
 800dd96:	2201      	movs	r2, #1
 800dd98:	705a      	strb	r2, [r3, #1]

		  //TaskHandler Delay
		  vTaskDelay(pdMS_TO_TICKS(delay_for_transmitting));
 800dd9a:	4b08      	ldr	r3, [pc, #32]	; (800ddbc <Task_Transmit+0x44>)
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dda4:	fb03 f302 	mul.w	r3, r3, r2
 800dda8:	4a05      	ldr	r2, [pc, #20]	; (800ddc0 <Task_Transmit+0x48>)
 800ddaa:	fba2 2303 	umull	r2, r3, r2, r3
 800ddae:	099b      	lsrs	r3, r3, #6
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7fb fd95 	bl	80098e0 <vTaskDelay>
	}
 800ddb6:	e7e3      	b.n	800dd80 <Task_Transmit+0x8>
 800ddb8:	20000890 	.word	0x20000890
 800ddbc:	20000623 	.word	0x20000623
 800ddc0:	10624dd3 	.word	0x10624dd3

0800ddc4 <Task_Reveive>:
}

void Task_Reveive (void *p)
{
 800ddc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddc8:	b084      	sub	sp, #16
 800ddca:	af02      	add	r7, sp, #8
 800ddcc:	6078      	str	r0, [r7, #4]
	while(1)
	{
		 test1 = DIGITAL_IO_GetInput(&Signal_UpShift);
 800ddce:	4840      	ldr	r0, [pc, #256]	; (800ded0 <Task_Reveive+0x10c>)
 800ddd0:	f7ff ff22 	bl	800dc18 <DIGITAL_IO_GetInput>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	b2da      	uxtb	r2, r3
 800ddd8:	4b3e      	ldr	r3, [pc, #248]	; (800ded4 <Task_Reveive+0x110>)
 800ddda:	701a      	strb	r2, [r3, #0]
		 test2 =  DIGITAL_IO_GetInput(&Signal_DownShift);
 800dddc:	483e      	ldr	r0, [pc, #248]	; (800ded8 <Task_Reveive+0x114>)
 800ddde:	f7ff ff1b 	bl	800dc18 <DIGITAL_IO_GetInput>
 800dde2:	4603      	mov	r3, r0
 800dde4:	b2da      	uxtb	r2, r3
 800dde6:	4b3d      	ldr	r3, [pc, #244]	; (800dedc <Task_Reveive+0x118>)
 800dde8:	701a      	strb	r2, [r3, #0]

		  //CAN
		  CAN_1_Receive();
 800ddea:	f7fe f813 	bl	800be14 <CAN_1_Receive>
		  CAN_2_Receive();
 800ddee:	f7fe fb91 	bl	800c514 <CAN_2_Receive>

		  //IOPort
		  IOPort_readDINS();
 800ddf2:	f7ff fa2f 	bl	800d254 <IOPort_readDINS>
		  IOPort_readAINS();
 800ddf6:	f7ff faeb 	bl	800d3d0 <IOPort_readAINS>

		  //Simulink
		  FUNC_InputData();
 800ddfa:	f7f2 fb1d 	bl	8000438 <FUNC_InputData>

		  //Reset Watchdog
		  if(wachdog_reset[0] & wachdog_reset[1])
 800ddfe:	4b38      	ldr	r3, [pc, #224]	; (800dee0 <Task_Reveive+0x11c>)
 800de00:	781a      	ldrb	r2, [r3, #0]
 800de02:	4b37      	ldr	r3, [pc, #220]	; (800dee0 <Task_Reveive+0x11c>)
 800de04:	785b      	ldrb	r3, [r3, #1]
 800de06:	4013      	ands	r3, r2
 800de08:	b2db      	uxtb	r3, r3
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d007      	beq.n	800de1e <Task_Reveive+0x5a>
		  {
			  Watchdog_Reset();
 800de0e:	f7fe ff49 	bl	800cca4 <Watchdog_Reset>

			  wachdog_reset[0]=0;
 800de12:	4b33      	ldr	r3, [pc, #204]	; (800dee0 <Task_Reveive+0x11c>)
 800de14:	2200      	movs	r2, #0
 800de16:	701a      	strb	r2, [r3, #0]
			  wachdog_reset[1]=0;
 800de18:	4b31      	ldr	r3, [pc, #196]	; (800dee0 <Task_Reveive+0x11c>)
 800de1a:	2200      	movs	r2, #0
 800de1c:	705a      	strb	r2, [r3, #1]
		  }

		  //Start Transmission-Task if shift up or down request occurs
		  if((*canData.STW_shift_up_request == 1) | (*canData.STW_shift_down_request == 1) | (*IOportData.x_clutch_STW < clutch_STW_threshold) | shiftDownInterrupt | shiftUpInterrupt)
 800de1e:	4b31      	ldr	r3, [pc, #196]	; (800dee4 <Task_Reveive+0x120>)
 800de20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	2b01      	cmp	r3, #1
 800de26:	bf0c      	ite	eq
 800de28:	2301      	moveq	r3, #1
 800de2a:	2300      	movne	r3, #0
 800de2c:	b2da      	uxtb	r2, r3
 800de2e:	4b2d      	ldr	r3, [pc, #180]	; (800dee4 <Task_Reveive+0x120>)
 800de30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	2b01      	cmp	r3, #1
 800de36:	bf0c      	ite	eq
 800de38:	2301      	moveq	r3, #1
 800de3a:	2300      	movne	r3, #0
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	4313      	orrs	r3, r2
 800de40:	b2db      	uxtb	r3, r3
 800de42:	461e      	mov	r6, r3
 800de44:	4b28      	ldr	r3, [pc, #160]	; (800dee8 <Task_Reveive+0x124>)
 800de46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de48:	e9d3 4500 	ldrd	r4, r5, [r3]
 800de4c:	4b27      	ldr	r3, [pc, #156]	; (800deec <Task_Reveive+0x128>)
 800de4e:	881b      	ldrh	r3, [r3, #0]
 800de50:	4618      	mov	r0, r3
 800de52:	f000 fda3 	bl	800e99c <__aeabi_i2d>
 800de56:	4680      	mov	r8, r0
 800de58:	4689      	mov	r9, r1
 800de5a:	2301      	movs	r3, #1
 800de5c:	469a      	mov	sl, r3
 800de5e:	4620      	mov	r0, r4
 800de60:	4629      	mov	r1, r5
 800de62:	4642      	mov	r2, r8
 800de64:	464b      	mov	r3, r9
 800de66:	f001 f871 	bl	800ef4c <__aeabi_dcmplt>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d101      	bne.n	800de74 <Task_Reveive+0xb0>
 800de70:	2300      	movs	r3, #0
 800de72:	469a      	mov	sl, r3
 800de74:	fa5f f38a 	uxtb.w	r3, sl
 800de78:	4333      	orrs	r3, r6
 800de7a:	4a1d      	ldr	r2, [pc, #116]	; (800def0 <Task_Reveive+0x12c>)
 800de7c:	7812      	ldrb	r2, [r2, #0]
 800de7e:	4313      	orrs	r3, r2
 800de80:	4a1c      	ldr	r2, [pc, #112]	; (800def4 <Task_Reveive+0x130>)
 800de82:	7812      	ldrb	r2, [r2, #0]
 800de84:	4313      	orrs	r3, r2
 800de86:	2b00      	cmp	r3, #0
 800de88:	d021      	beq.n	800dece <Task_Reveive+0x10a>
		  {
			  if(shiftDownInterrupt)
 800de8a:	4b19      	ldr	r3, [pc, #100]	; (800def0 <Task_Reveive+0x12c>)
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d004      	beq.n	800de9c <Task_Reveive+0xd8>
			  {
				  VCU_DW.VAR_IN_STW_shift_down_request = 1;
 800de92:	4b19      	ldr	r3, [pc, #100]	; (800def8 <Task_Reveive+0x134>)
 800de94:	2201      	movs	r2, #1
 800de96:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
 800de9a:	e007      	b.n	800deac <Task_Reveive+0xe8>
			  }
			  else if(shiftUpInterrupt)
 800de9c:	4b15      	ldr	r3, [pc, #84]	; (800def4 <Task_Reveive+0x130>)
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d003      	beq.n	800deac <Task_Reveive+0xe8>
			  {
				  VCU_DW.VAR_IN_STW_shift_up_request = 1;
 800dea4:	4b14      	ldr	r3, [pc, #80]	; (800def8 <Task_Reveive+0x134>)
 800dea6:	2201      	movs	r2, #1
 800dea8:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
			  }
			  xTimerReset(TimerHandle_Transmission,0);
 800deac:	4b13      	ldr	r3, [pc, #76]	; (800defc <Task_Reveive+0x138>)
 800deae:	681c      	ldr	r4, [r3, #0]
 800deb0:	f7fb ff5c 	bl	8009d6c <xTaskGetTickCount>
 800deb4:	4602      	mov	r2, r0
 800deb6:	2300      	movs	r3, #0
 800deb8:	9300      	str	r3, [sp, #0]
 800deba:	4620      	mov	r0, r4
 800debc:	2102      	movs	r1, #2
 800debe:	2300      	movs	r3, #0
 800dec0:	f7fc fc08 	bl	800a6d4 <xTimerGenericCommand>
			  vTaskResume(TaskHandle_Transmission);
 800dec4:	4b0e      	ldr	r3, [pc, #56]	; (800df00 <Task_Reveive+0x13c>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4618      	mov	r0, r3
 800deca:	f7fb fdfb 	bl	8009ac4 <vTaskResume>
		  }
	}
 800dece:	e77e      	b.n	800ddce <Task_Reveive+0xa>
 800ded0:	0800f68c 	.word	0x0800f68c
 800ded4:	20000896 	.word	0x20000896
 800ded8:	0800f678 	.word	0x0800f678
 800dedc:	20000897 	.word	0x20000897
 800dee0:	20000890 	.word	0x20000890
 800dee4:	200013c0 	.word	0x200013c0
 800dee8:	20001348 	.word	0x20001348
 800deec:	20000628 	.word	0x20000628
 800def0:	200012d8 	.word	0x200012d8
 800def4:	200012f8 	.word	0x200012f8
 800def8:	200010c8 	.word	0x200010c8
 800defc:	2000088c 	.word	0x2000088c
 800df00:	20000880 	.word	0x20000880

0800df04 <Task_LowPrioTask>:
}

void Task_LowPrioTask (void *p)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//Simulink
		FUNC_PumpAndFans();
 800df0c:	f7f5 fa40 	bl	8003390 <FUNC_PumpAndFans>
		FUNC_Brakelight();
 800df10:	f7f2 fa4a 	bl	80003a8 <FUNC_Brakelight>

		//Watchdog
		wachdog_reset[0] = 1;
 800df14:	4b08      	ldr	r3, [pc, #32]	; (800df38 <Task_LowPrioTask+0x34>)
 800df16:	2201      	movs	r2, #1
 800df18:	701a      	strb	r2, [r3, #0]

		//TaskHandler Delay
		vTaskDelay(pdMS_TO_TICKS(delay_for_lowPrioTasks));
 800df1a:	4b08      	ldr	r3, [pc, #32]	; (800df3c <Task_LowPrioTask+0x38>)
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	461a      	mov	r2, r3
 800df20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df24:	fb03 f302 	mul.w	r3, r3, r2
 800df28:	4a05      	ldr	r2, [pc, #20]	; (800df40 <Task_LowPrioTask+0x3c>)
 800df2a:	fba2 2303 	umull	r2, r3, r2, r3
 800df2e:	099b      	lsrs	r3, r3, #6
 800df30:	4618      	mov	r0, r3
 800df32:	f7fb fcd5 	bl	80098e0 <vTaskDelay>
	}
 800df36:	e7e9      	b.n	800df0c <Task_LowPrioTask+0x8>
 800df38:	20000890 	.word	0x20000890
 800df3c:	20000624 	.word	0x20000624
 800df40:	10624dd3 	.word	0x10624dd3

0800df44 <Task_OneLoop>:
}

void Task_OneLoop(void *p)
//Backup-Task which runs everything in one loop
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		  //CAN
		  CAN_1_Receive();
 800df4c:	f7fd ff62 	bl	800be14 <CAN_1_Receive>
		  CAN_2_Receive();
 800df50:	f7fe fae0 	bl	800c514 <CAN_2_Receive>

		  //IOPort
		  IOPort_readDINS();
 800df54:	f7ff f97e 	bl	800d254 <IOPort_readDINS>
		  IOPort_readAINS();
 800df58:	f7ff fa3a 	bl	800d3d0 <IOPort_readAINS>

		  //Simulink
		  FUNC_InputData();
 800df5c:	f7f2 fa6c 	bl	8000438 <FUNC_InputData>
		  FUNC_Transmission();
 800df60:	f7f5 fad6 	bl	8003510 <FUNC_Transmission>
		  FUNC_PumpAndFans();
 800df64:	f7f5 fa14 	bl	8003390 <FUNC_PumpAndFans>
		  FUNC_Brakelight();
 800df68:	f7f2 fa1e 	bl	80003a8 <FUNC_Brakelight>
		  FUNC_OutputData();
 800df6c:	f7f3 fa44 	bl	80013f8 <FUNC_OutputData>

		   //CAN
		   CAN_1_Transmit();
 800df70:	f7fe f800 	bl	800bf74 <CAN_1_Transmit>
		   CAN_2_Transmit();
 800df74:	f7fe fd6c 	bl	800ca50 <CAN_2_Transmit>

		   //IOPort
		   IOPort_setDOUTS();
 800df78:	f7ff f938 	bl	800d1ec <IOPort_setDOUTS>
		   IOPort_setPWMOUTS();
 800df7c:	f7ff f99c 	bl	800d2b8 <IOPort_setPWMOUTS>

		  //Reset Watchdog
		  Watchdog_Reset();
 800df80:	f7fe fe90 	bl	800cca4 <Watchdog_Reset>
	}
 800df84:	e7e2      	b.n	800df4c <Task_OneLoop+0x8>
 800df86:	bf00      	nop

0800df88 <vCallback_SuspendTransmission>:
}

static void vCallback_SuspendTransmission(xTimerHandle pxTimer)
{
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
	  shiftDownInterrupt = 0;
 800df90:	4b06      	ldr	r3, [pc, #24]	; (800dfac <vCallback_SuspendTransmission+0x24>)
 800df92:	2200      	movs	r2, #0
 800df94:	701a      	strb	r2, [r3, #0]
	  shiftUpInterrupt = 0;
 800df96:	4b06      	ldr	r3, [pc, #24]	; (800dfb0 <vCallback_SuspendTransmission+0x28>)
 800df98:	2200      	movs	r2, #0
 800df9a:	701a      	strb	r2, [r3, #0]
	  TransmissionTask_Stop = 1;
 800df9c:	4b05      	ldr	r3, [pc, #20]	; (800dfb4 <vCallback_SuspendTransmission+0x2c>)
 800df9e:	2201      	movs	r2, #1
 800dfa0:	701a      	strb	r2, [r3, #0]
	 //vTaskSuspend(TaskHandle_Transmission);
	 //xTimerStop(TimerHandle_Transmission, 0);
}
 800dfa2:	370c      	adds	r7, #12
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr
 800dfac:	200012d8 	.word	0x200012d8
 800dfb0:	200012f8 	.word	0x200012f8
 800dfb4:	20000894 	.word	0x20000894

0800dfb8 <RTOS_Handling_ini>:

void RTOS_Handling_ini()
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af02      	add	r7, sp, #8
	shiftDownInterrupt = 0;
 800dfbe:	4b3a      	ldr	r3, [pc, #232]	; (800e0a8 <RTOS_Handling_ini+0xf0>)
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	701a      	strb	r2, [r3, #0]
	shiftUpInterrupt = 0;
 800dfc4:	4b39      	ldr	r3, [pc, #228]	; (800e0ac <RTOS_Handling_ini+0xf4>)
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	701a      	strb	r2, [r3, #0]

	  xTaskCreate(Task_Reveive, "Task_Reveive", 200, (void*) 0, tskIDLE_PRIORITY + 0, &TaskHandle_Receive);
 800dfca:	2300      	movs	r3, #0
 800dfcc:	9300      	str	r3, [sp, #0]
 800dfce:	4b38      	ldr	r3, [pc, #224]	; (800e0b0 <RTOS_Handling_ini+0xf8>)
 800dfd0:	9301      	str	r3, [sp, #4]
 800dfd2:	4838      	ldr	r0, [pc, #224]	; (800e0b4 <RTOS_Handling_ini+0xfc>)
 800dfd4:	4938      	ldr	r1, [pc, #224]	; (800e0b8 <RTOS_Handling_ini+0x100>)
 800dfd6:	22c8      	movs	r2, #200	; 0xc8
 800dfd8:	2300      	movs	r3, #0
 800dfda:	f7fb fb2d 	bl	8009638 <xTaskCreate>
	  xTaskCreate(Task_LowPrioTask, "Task_LowPrioTask", 200, (void*) 0, tskIDLE_PRIORITY + 1, &TaskHandle_LowPrioTasks);
 800dfde:	2301      	movs	r3, #1
 800dfe0:	9300      	str	r3, [sp, #0]
 800dfe2:	4b36      	ldr	r3, [pc, #216]	; (800e0bc <RTOS_Handling_ini+0x104>)
 800dfe4:	9301      	str	r3, [sp, #4]
 800dfe6:	4836      	ldr	r0, [pc, #216]	; (800e0c0 <RTOS_Handling_ini+0x108>)
 800dfe8:	4936      	ldr	r1, [pc, #216]	; (800e0c4 <RTOS_Handling_ini+0x10c>)
 800dfea:	22c8      	movs	r2, #200	; 0xc8
 800dfec:	2300      	movs	r3, #0
 800dfee:	f7fb fb23 	bl	8009638 <xTaskCreate>
	  xTaskCreate(Task_Transmit, "Task_Transmit", 200, (void*) 0, tskIDLE_PRIORITY + 2, &TaskHandle_Transmit);
 800dff2:	2302      	movs	r3, #2
 800dff4:	9300      	str	r3, [sp, #0]
 800dff6:	4b34      	ldr	r3, [pc, #208]	; (800e0c8 <RTOS_Handling_ini+0x110>)
 800dff8:	9301      	str	r3, [sp, #4]
 800dffa:	4834      	ldr	r0, [pc, #208]	; (800e0cc <RTOS_Handling_ini+0x114>)
 800dffc:	4934      	ldr	r1, [pc, #208]	; (800e0d0 <RTOS_Handling_ini+0x118>)
 800dffe:	22c8      	movs	r2, #200	; 0xc8
 800e000:	2300      	movs	r3, #0
 800e002:	f7fb fb19 	bl	8009638 <xTaskCreate>
	  xTaskCreate(Task_Transmission, "Task_Transmission", 200, (void*) 0, tskIDLE_PRIORITY + 3, &TaskHandle_Transmission);
 800e006:	2303      	movs	r3, #3
 800e008:	9300      	str	r3, [sp, #0]
 800e00a:	4b32      	ldr	r3, [pc, #200]	; (800e0d4 <RTOS_Handling_ini+0x11c>)
 800e00c:	9301      	str	r3, [sp, #4]
 800e00e:	4832      	ldr	r0, [pc, #200]	; (800e0d8 <RTOS_Handling_ini+0x120>)
 800e010:	4932      	ldr	r1, [pc, #200]	; (800e0dc <RTOS_Handling_ini+0x124>)
 800e012:	22c8      	movs	r2, #200	; 0xc8
 800e014:	2300      	movs	r3, #0
 800e016:	f7fb fb0f 	bl	8009638 <xTaskCreate>
	  xTaskCreate(Task_OneLoop, "Task_OneLoopTask", 200, (void*) 0, tskIDLE_PRIORITY + 4, &TaskHandle_OneLoopTask);
 800e01a:	2304      	movs	r3, #4
 800e01c:	9300      	str	r3, [sp, #0]
 800e01e:	4b30      	ldr	r3, [pc, #192]	; (800e0e0 <RTOS_Handling_ini+0x128>)
 800e020:	9301      	str	r3, [sp, #4]
 800e022:	4830      	ldr	r0, [pc, #192]	; (800e0e4 <RTOS_Handling_ini+0x12c>)
 800e024:	4930      	ldr	r1, [pc, #192]	; (800e0e8 <RTOS_Handling_ini+0x130>)
 800e026:	22c8      	movs	r2, #200	; 0xc8
 800e028:	2300      	movs	r3, #0
 800e02a:	f7fb fb05 	bl	8009638 <xTaskCreate>

	  TimerHandle_Transmission = xTimerCreate("Timer_Transmission", pdMS_TO_TICKS(runtime_for_transmission), pdFALSE, (void*) 0, vCallback_SuspendTransmission);
 800e02e:	4b2f      	ldr	r3, [pc, #188]	; (800e0ec <RTOS_Handling_ini+0x134>)
 800e030:	881b      	ldrh	r3, [r3, #0]
 800e032:	461a      	mov	r2, r3
 800e034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e038:	fb03 f302 	mul.w	r3, r3, r2
 800e03c:	4a2c      	ldr	r2, [pc, #176]	; (800e0f0 <RTOS_Handling_ini+0x138>)
 800e03e:	fba2 2303 	umull	r2, r3, r2, r3
 800e042:	099a      	lsrs	r2, r3, #6
 800e044:	4b2b      	ldr	r3, [pc, #172]	; (800e0f4 <RTOS_Handling_ini+0x13c>)
 800e046:	9300      	str	r3, [sp, #0]
 800e048:	482b      	ldr	r0, [pc, #172]	; (800e0f8 <RTOS_Handling_ini+0x140>)
 800e04a:	4611      	mov	r1, r2
 800e04c:	2200      	movs	r2, #0
 800e04e:	2300      	movs	r3, #0
 800e050:	f7fc fae4 	bl	800a61c <xTimerCreate>
 800e054:	4602      	mov	r2, r0
 800e056:	4b29      	ldr	r3, [pc, #164]	; (800e0fc <RTOS_Handling_ini+0x144>)
 800e058:	601a      	str	r2, [r3, #0]

	  vTaskSuspend(TaskHandle_OneLoopTask);
 800e05a:	4b21      	ldr	r3, [pc, #132]	; (800e0e0 <RTOS_Handling_ini+0x128>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4618      	mov	r0, r3
 800e060:	f7fb fc70 	bl	8009944 <vTaskSuspend>
	  vTaskSuspend(TaskHandle_Transmission);
 800e064:	4b1b      	ldr	r3, [pc, #108]	; (800e0d4 <RTOS_Handling_ini+0x11c>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4618      	mov	r0, r3
 800e06a:	f7fb fc6b 	bl	8009944 <vTaskSuspend>

	  //run one loop task if one-loop-mode is active
	  if(oneloopmode)
 800e06e:	4b24      	ldr	r3, [pc, #144]	; (800e100 <RTOS_Handling_ini+0x148>)
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d013      	beq.n	800e09e <RTOS_Handling_ini+0xe6>
	  {
		  vTaskSuspend(TaskHandle_Transmit);
 800e076:	4b14      	ldr	r3, [pc, #80]	; (800e0c8 <RTOS_Handling_ini+0x110>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fb fc62 	bl	8009944 <vTaskSuspend>
		  vTaskSuspend(TaskHandle_LowPrioTasks);
 800e080:	4b0e      	ldr	r3, [pc, #56]	; (800e0bc <RTOS_Handling_ini+0x104>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4618      	mov	r0, r3
 800e086:	f7fb fc5d 	bl	8009944 <vTaskSuspend>
		  vTaskSuspend(TaskHandle_Receive);
 800e08a:	4b09      	ldr	r3, [pc, #36]	; (800e0b0 <RTOS_Handling_ini+0xf8>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4618      	mov	r0, r3
 800e090:	f7fb fc58 	bl	8009944 <vTaskSuspend>

		  vTaskResume(TaskHandle_OneLoopTask);
 800e094:	4b12      	ldr	r3, [pc, #72]	; (800e0e0 <RTOS_Handling_ini+0x128>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4618      	mov	r0, r3
 800e09a:	f7fb fd13 	bl	8009ac4 <vTaskResume>
	  }

	  vTaskStartScheduler();
 800e09e:	f7fb fd6f 	bl	8009b80 <vTaskStartScheduler>
}
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	200012d8 	.word	0x200012d8
 800e0ac:	200012f8 	.word	0x200012f8
 800e0b0:	20000878 	.word	0x20000878
 800e0b4:	0800ddc5 	.word	0x0800ddc5
 800e0b8:	0800fa54 	.word	0x0800fa54
 800e0bc:	20000884 	.word	0x20000884
 800e0c0:	0800df05 	.word	0x0800df05
 800e0c4:	0800fa64 	.word	0x0800fa64
 800e0c8:	2000087c 	.word	0x2000087c
 800e0cc:	0800dd79 	.word	0x0800dd79
 800e0d0:	0800fa78 	.word	0x0800fa78
 800e0d4:	20000880 	.word	0x20000880
 800e0d8:	0800dc3d 	.word	0x0800dc3d
 800e0dc:	0800fa88 	.word	0x0800fa88
 800e0e0:	20000888 	.word	0x20000888
 800e0e4:	0800df45 	.word	0x0800df45
 800e0e8:	0800fa9c 	.word	0x0800fa9c
 800e0ec:	20000626 	.word	0x20000626
 800e0f0:	10624dd3 	.word	0x10624dd3
 800e0f4:	0800df89 	.word	0x0800df89
 800e0f8:	0800fab0 	.word	0x0800fab0
 800e0fc:	2000088c 	.word	0x2000088c
 800e100:	20000895 	.word	0x20000895

0800e104 <getbits>:
in the right most n bits; complementing that with ~ makes a mask with ones in the rightmost n bits.
vgl. "THE C PROGRAMMING LANGUGE" Brian W. KERNIGHAN PAGE 49
ACHTUNG!!! das ganz rechte bit des Wortes is bit 0. BSP getbis(x,4,3) gibt bit 4,3,2 bit von rechts gezählt zurück.
*/
unsigned getbits(unsigned x,int p, int n)
{
 800e104:	b480      	push	{r7}
 800e106:	b085      	sub	sp, #20
 800e108:	af00      	add	r7, sp, #0
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	607a      	str	r2, [r7, #4]
	return(x >> (p+1-n)) & ~(~0 << n);
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	1c5a      	adds	r2, r3, #1
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	1ad3      	subs	r3, r2, r3
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	fa22 f303 	lsr.w	r3, r2, r3
 800e11e:	f04f 31ff 	mov.w	r1, #4294967295
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	fa01 f202 	lsl.w	r2, r1, r2
 800e128:	43d2      	mvns	r2, r2
 800e12a:	4013      	ands	r3, r2
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3714      	adds	r7, #20
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <getbits64>:

unsigned getbits64(unsigned long long int x,int p, int n)
{
 800e138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e13c:	b085      	sub	sp, #20
 800e13e:	af00      	add	r7, sp, #0
 800e140:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800e144:	607a      	str	r2, [r7, #4]
 800e146:	603b      	str	r3, [r7, #0]
	return(unsigned)((x >> (p+1-n)) & ~(~0ULL << n));
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	1c5a      	adds	r2, r3, #1
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	1ad1      	subs	r1, r2, r3
 800e150:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e154:	f1c1 0620 	rsb	r6, r1, #32
 800e158:	f1a1 0020 	sub.w	r0, r1, #32
 800e15c:	fa22 f801 	lsr.w	r8, r2, r1
 800e160:	fa03 f606 	lsl.w	r6, r3, r6
 800e164:	ea48 0806 	orr.w	r8, r8, r6
 800e168:	fa23 f000 	lsr.w	r0, r3, r0
 800e16c:	ea48 0800 	orr.w	r8, r8, r0
 800e170:	fa23 f901 	lsr.w	r9, r3, r1
 800e174:	46c6      	mov	lr, r8
 800e176:	f04f 32ff 	mov.w	r2, #4294967295
 800e17a:	f04f 33ff 	mov.w	r3, #4294967295
 800e17e:	6839      	ldr	r1, [r7, #0]
 800e180:	f1a1 0620 	sub.w	r6, r1, #32
 800e184:	f1c1 0020 	rsb	r0, r1, #32
 800e188:	fa03 f501 	lsl.w	r5, r3, r1
 800e18c:	fa02 f606 	lsl.w	r6, r2, r6
 800e190:	4335      	orrs	r5, r6
 800e192:	fa22 f000 	lsr.w	r0, r2, r0
 800e196:	4305      	orrs	r5, r0
 800e198:	fa02 f401 	lsl.w	r4, r2, r1
 800e19c:	4623      	mov	r3, r4
 800e19e:	43db      	mvns	r3, r3
 800e1a0:	ea0e 0303 	and.w	r3, lr, r3
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3714      	adds	r7, #20
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1ae:	bf00      	nop

0800e1b0 <setbitTrue>:
{
	return (MSB<<8)|LSB;
}

void setbitTrue(unsigned long long *x, int n)
{
 800e1b0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800e1b4:	b082      	sub	sp, #8
 800e1b6:	af00      	add	r7, sp, #0
 800e1b8:	6078      	str	r0, [r7, #4]
 800e1ba:	6039      	str	r1, [r7, #0]
	*x |= (1ULL<<n);
 800e1bc:	6879      	ldr	r1, [r7, #4]
 800e1be:	e9d1 8900 	ldrd	r8, r9, [r1]
 800e1c2:	f04f 0001 	mov.w	r0, #1
 800e1c6:	f04f 0100 	mov.w	r1, #0
 800e1ca:	683c      	ldr	r4, [r7, #0]
 800e1cc:	f1a4 0620 	sub.w	r6, r4, #32
 800e1d0:	f1c4 0520 	rsb	r5, r4, #32
 800e1d4:	fa01 f304 	lsl.w	r3, r1, r4
 800e1d8:	fa00 f606 	lsl.w	r6, r0, r6
 800e1dc:	4333      	orrs	r3, r6
 800e1de:	fa20 f505 	lsr.w	r5, r0, r5
 800e1e2:	432b      	orrs	r3, r5
 800e1e4:	fa00 f204 	lsl.w	r2, r0, r4
 800e1e8:	ea42 0208 	orr.w	r2, r2, r8
 800e1ec:	ea43 0309 	orr.w	r3, r3, r9
 800e1f0:	6879      	ldr	r1, [r7, #4]
 800e1f2:	e9c1 2300 	strd	r2, r3, [r1]
}
 800e1f6:	3708      	adds	r7, #8
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e1fe:	4770      	bx	lr

0800e200 <setbitFalse>:

void setbitFalse(unsigned long long *x, int n)
{
 800e200:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800e204:	b082      	sub	sp, #8
 800e206:	af00      	add	r7, sp, #0
 800e208:	6078      	str	r0, [r7, #4]
 800e20a:	6039      	str	r1, [r7, #0]
	*x &= ~(1ULL<<n);
 800e20c:	6879      	ldr	r1, [r7, #4]
 800e20e:	e9d1 8900 	ldrd	r8, r9, [r1]
 800e212:	f04f 0001 	mov.w	r0, #1
 800e216:	f04f 0100 	mov.w	r1, #0
 800e21a:	683c      	ldr	r4, [r7, #0]
 800e21c:	f1a4 0620 	sub.w	r6, r4, #32
 800e220:	f1c4 0520 	rsb	r5, r4, #32
 800e224:	fa01 f304 	lsl.w	r3, r1, r4
 800e228:	fa00 f606 	lsl.w	r6, r0, r6
 800e22c:	4333      	orrs	r3, r6
 800e22e:	fa20 f505 	lsr.w	r5, r0, r5
 800e232:	432b      	orrs	r3, r5
 800e234:	fa00 f204 	lsl.w	r2, r0, r4
 800e238:	ea6f 0202 	mvn.w	r2, r2
 800e23c:	ea6f 0303 	mvn.w	r3, r3
 800e240:	ea02 0208 	and.w	r2, r2, r8
 800e244:	ea03 0309 	and.w	r3, r3, r9
 800e248:	6879      	ldr	r1, [r7, #4]
 800e24a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800e24e:	3708      	adds	r7, #8
 800e250:	46bd      	mov	sp, r7
 800e252:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e256:	4770      	bx	lr

0800e258 <main>:

/****************************************************
   Main Function
 *****************************************************/
int main (void)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	af00      	add	r7, sp, #0
  DAVE_Init();
 800e25c:	f7fd fc08 	bl	800ba70 <DAVE_Init>
  Watchdog_Start();
 800e260:	f7fe fd1a 	bl	800cc98 <Watchdog_Start>
  VCU_initialize();
 800e264:	f7f8 f836 	bl	80062d4 <VCU_initialize>
  CAN_1_ini();
 800e268:	f7fd fd14 	bl	800bc94 <CAN_1_ini>
  CAN_2_ini();
 800e26c:	f7fd fff6 	bl	800c25c <CAN_2_ini>
  IOPort_ini();
 800e270:	f7fe ff02 	bl	800d078 <IOPort_ini>
  RTOS_Handling_ini();  //Kupplung, Detect increase Block ???
 800e274:	f7ff fea0 	bl	800dfb8 <RTOS_Handling_ini>
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop

0800e280 <floor>:
 800e280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e284:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800e288:	f2a8 35ff 	subw	r5, r8, #1023	; 0x3ff
 800e28c:	2d13      	cmp	r5, #19
 800e28e:	4602      	mov	r2, r0
 800e290:	460b      	mov	r3, r1
 800e292:	460c      	mov	r4, r1
 800e294:	4607      	mov	r7, r0
 800e296:	4689      	mov	r9, r1
 800e298:	4606      	mov	r6, r0
 800e29a:	dc1d      	bgt.n	800e2d8 <floor+0x58>
 800e29c:	2d00      	cmp	r5, #0
 800e29e:	db40      	blt.n	800e322 <floor+0xa2>
 800e2a0:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800e38c <floor+0x10c>
 800e2a4:	fa48 f805 	asr.w	r8, r8, r5
 800e2a8:	ea08 0e01 	and.w	lr, r8, r1
 800e2ac:	ea5e 0707 	orrs.w	r7, lr, r7
 800e2b0:	d017      	beq.n	800e2e2 <floor+0x62>
 800e2b2:	a334      	add	r3, pc, #208	; (adr r3, 800e384 <floor+0x104>)
 800e2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b8:	f000 fa24 	bl	800e704 <__adddf3>
 800e2bc:	2200      	movs	r2, #0
 800e2be:	2300      	movs	r3, #0
 800e2c0:	f000 fe62 	bl	800ef88 <__aeabi_dcmpgt>
 800e2c4:	b120      	cbz	r0, 800e2d0 <floor+0x50>
 800e2c6:	2c00      	cmp	r4, #0
 800e2c8:	db3f      	blt.n	800e34a <floor+0xca>
 800e2ca:	ea29 0408 	bic.w	r4, r9, r8
 800e2ce:	2600      	movs	r6, #0
 800e2d0:	4621      	mov	r1, r4
 800e2d2:	4630      	mov	r0, r6
 800e2d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2d8:	2d33      	cmp	r5, #51	; 0x33
 800e2da:	dd06      	ble.n	800e2ea <floor+0x6a>
 800e2dc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800e2e0:	d02f      	beq.n	800e342 <floor+0xc2>
 800e2e2:	4610      	mov	r0, r2
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2ea:	f2a8 4e13 	subw	lr, r8, #1043	; 0x413
 800e2ee:	f04f 37ff 	mov.w	r7, #4294967295
 800e2f2:	fa27 f70e 	lsr.w	r7, r7, lr
 800e2f6:	4207      	tst	r7, r0
 800e2f8:	d0f3      	beq.n	800e2e2 <floor+0x62>
 800e2fa:	a322      	add	r3, pc, #136	; (adr r3, 800e384 <floor+0x104>)
 800e2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e300:	f000 fa00 	bl	800e704 <__adddf3>
 800e304:	2200      	movs	r2, #0
 800e306:	2300      	movs	r3, #0
 800e308:	f000 fe3e 	bl	800ef88 <__aeabi_dcmpgt>
 800e30c:	2800      	cmp	r0, #0
 800e30e:	d0df      	beq.n	800e2d0 <floor+0x50>
 800e310:	2c00      	cmp	r4, #0
 800e312:	db1f      	blt.n	800e354 <floor+0xd4>
 800e314:	464c      	mov	r4, r9
 800e316:	ea26 0607 	bic.w	r6, r6, r7
 800e31a:	4621      	mov	r1, r4
 800e31c:	4630      	mov	r0, r6
 800e31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e322:	a318      	add	r3, pc, #96	; (adr r3, 800e384 <floor+0x104>)
 800e324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e328:	f000 f9ec 	bl	800e704 <__adddf3>
 800e32c:	2200      	movs	r2, #0
 800e32e:	2300      	movs	r3, #0
 800e330:	f000 fe2a 	bl	800ef88 <__aeabi_dcmpgt>
 800e334:	2800      	cmp	r0, #0
 800e336:	d0cb      	beq.n	800e2d0 <floor+0x50>
 800e338:	2c00      	cmp	r4, #0
 800e33a:	db19      	blt.n	800e370 <floor+0xf0>
 800e33c:	2600      	movs	r6, #0
 800e33e:	4634      	mov	r4, r6
 800e340:	e7c6      	b.n	800e2d0 <floor+0x50>
 800e342:	f000 f9df 	bl	800e704 <__adddf3>
 800e346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e34a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e34e:	412b      	asrs	r3, r5
 800e350:	4499      	add	r9, r3
 800e352:	e7ba      	b.n	800e2ca <floor+0x4a>
 800e354:	2d14      	cmp	r5, #20
 800e356:	d008      	beq.n	800e36a <floor+0xea>
 800e358:	f5c8 6886 	rsb	r8, r8, #1072	; 0x430
 800e35c:	f108 0803 	add.w	r8, r8, #3
 800e360:	2301      	movs	r3, #1
 800e362:	fa03 f308 	lsl.w	r3, r3, r8
 800e366:	199e      	adds	r6, r3, r6
 800e368:	d3d4      	bcc.n	800e314 <floor+0x94>
 800e36a:	f109 0901 	add.w	r9, r9, #1
 800e36e:	e7d1      	b.n	800e314 <floor+0x94>
 800e370:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
 800e374:	4b02      	ldr	r3, [pc, #8]	; (800e380 <floor+0x100>)
 800e376:	433a      	orrs	r2, r7
 800e378:	bf18      	it	ne
 800e37a:	461c      	movne	r4, r3
 800e37c:	2600      	movs	r6, #0
 800e37e:	e7a7      	b.n	800e2d0 <floor+0x50>
 800e380:	bff00000 	.word	0xbff00000
 800e384:	8800759c 	.word	0x8800759c
 800e388:	7e37e43c 	.word	0x7e37e43c
 800e38c:	000fffff 	.word	0x000fffff

0800e390 <fmod>:
 800e390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e394:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800e440 <fmod+0xb0>
 800e398:	b08a      	sub	sp, #40	; 0x28
 800e39a:	461f      	mov	r7, r3
 800e39c:	4680      	mov	r8, r0
 800e39e:	4689      	mov	r9, r1
 800e3a0:	4616      	mov	r6, r2
 800e3a2:	f000 f84f 	bl	800e444 <__ieee754_fmod>
 800e3a6:	f99a 3000 	ldrsb.w	r3, [sl]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	4604      	mov	r4, r0
 800e3ae:	460d      	mov	r5, r1
 800e3b0:	d004      	beq.n	800e3bc <fmod+0x2c>
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	4639      	mov	r1, r7
 800e3b6:	f000 f971 	bl	800e69c <__fpclassifyd>
 800e3ba:	b920      	cbnz	r0, 800e3c6 <fmod+0x36>
 800e3bc:	4620      	mov	r0, r4
 800e3be:	4629      	mov	r1, r5
 800e3c0:	b00a      	add	sp, #40	; 0x28
 800e3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3c6:	4640      	mov	r0, r8
 800e3c8:	4649      	mov	r1, r9
 800e3ca:	f000 f967 	bl	800e69c <__fpclassifyd>
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	d0f4      	beq.n	800e3bc <fmod+0x2c>
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	4639      	mov	r1, r7
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	2300      	movs	r3, #0
 800e3da:	f000 fdad 	bl	800ef38 <__aeabi_dcmpeq>
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	d0ec      	beq.n	800e3bc <fmod+0x2c>
 800e3e2:	4b16      	ldr	r3, [pc, #88]	; (800e43c <fmod+0xac>)
 800e3e4:	f89a 4000 	ldrb.w	r4, [sl]
 800e3e8:	9301      	str	r3, [sp, #4]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e3f2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e3f6:	9200      	str	r2, [sp, #0]
 800e3f8:	9308      	str	r3, [sp, #32]
 800e3fa:	b194      	cbz	r4, 800e422 <fmod+0x92>
 800e3fc:	2000      	movs	r0, #0
 800e3fe:	2100      	movs	r1, #0
 800e400:	4602      	mov	r2, r0
 800e402:	460b      	mov	r3, r1
 800e404:	f000 fc5a 	bl	800ecbc <__aeabi_ddiv>
 800e408:	2c02      	cmp	r4, #2
 800e40a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e40e:	d10a      	bne.n	800e426 <fmod+0x96>
 800e410:	f000 fde4 	bl	800efdc <__errno>
 800e414:	2321      	movs	r3, #33	; 0x21
 800e416:	6003      	str	r3, [r0, #0]
 800e418:	9b08      	ldr	r3, [sp, #32]
 800e41a:	b953      	cbnz	r3, 800e432 <fmod+0xa2>
 800e41c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e420:	e7ce      	b.n	800e3c0 <fmod+0x30>
 800e422:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800e426:	4668      	mov	r0, sp
 800e428:	f000 f964 	bl	800e6f4 <matherr>
 800e42c:	2800      	cmp	r0, #0
 800e42e:	d1f3      	bne.n	800e418 <fmod+0x88>
 800e430:	e7ee      	b.n	800e410 <fmod+0x80>
 800e432:	f000 fdd3 	bl	800efdc <__errno>
 800e436:	9b08      	ldr	r3, [sp, #32]
 800e438:	6003      	str	r3, [r0, #0]
 800e43a:	e7ef      	b.n	800e41c <fmod+0x8c>
 800e43c:	0800fac4 	.word	0x0800fac4
 800e440:	2000062a 	.word	0x2000062a

0800e444 <__ieee754_fmod>:
 800e444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e448:	4690      	mov	r8, r2
 800e44a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e44e:	ea52 0408 	orrs.w	r4, r2, r8
 800e452:	4682      	mov	sl, r0
 800e454:	468b      	mov	fp, r1
 800e456:	4699      	mov	r9, r3
 800e458:	4618      	mov	r0, r3
 800e45a:	4641      	mov	r1, r8
 800e45c:	d01f      	beq.n	800e49e <__ieee754_fmod+0x5a>
 800e45e:	465d      	mov	r5, fp
 800e460:	f00b 4600 	and.w	r6, fp, #2147483648	; 0x80000000
 800e464:	4c86      	ldr	r4, [pc, #536]	; (800e680 <__ieee754_fmod+0x23c>)
 800e466:	4075      	eors	r5, r6
 800e468:	42a5      	cmp	r5, r4
 800e46a:	dc18      	bgt.n	800e49e <__ieee754_fmod+0x5a>
 800e46c:	424c      	negs	r4, r1
 800e46e:	430c      	orrs	r4, r1
 800e470:	f8df e220 	ldr.w	lr, [pc, #544]	; 800e694 <__ieee754_fmod+0x250>
 800e474:	ea42 74d4 	orr.w	r4, r2, r4, lsr #31
 800e478:	4574      	cmp	r4, lr
 800e47a:	d810      	bhi.n	800e49e <__ieee754_fmod+0x5a>
 800e47c:	4295      	cmp	r5, r2
 800e47e:	46d4      	mov	ip, sl
 800e480:	4653      	mov	r3, sl
 800e482:	4647      	mov	r7, r8
 800e484:	dc17      	bgt.n	800e4b6 <__ieee754_fmod+0x72>
 800e486:	db28      	blt.n	800e4da <__ieee754_fmod+0x96>
 800e488:	45c2      	cmp	sl, r8
 800e48a:	d326      	bcc.n	800e4da <__ieee754_fmod+0x96>
 800e48c:	d113      	bne.n	800e4b6 <__ieee754_fmod+0x72>
 800e48e:	4b7d      	ldr	r3, [pc, #500]	; (800e684 <__ieee754_fmod+0x240>)
 800e490:	0ff6      	lsrs	r6, r6, #31
 800e492:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e496:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e49a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e49e:	4642      	mov	r2, r8
 800e4a0:	464b      	mov	r3, r9
 800e4a2:	4650      	mov	r0, sl
 800e4a4:	4659      	mov	r1, fp
 800e4a6:	f000 fadf 	bl	800ea68 <__aeabi_dmul>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	460b      	mov	r3, r1
 800e4ae:	f000 fc05 	bl	800ecbc <__aeabi_ddiv>
 800e4b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4b6:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800e4ba:	da12      	bge.n	800e4e2 <__ieee754_fmod+0x9e>
 800e4bc:	2d00      	cmp	r5, #0
 800e4be:	f040 80a2 	bne.w	800e606 <__ieee754_fmod+0x1c2>
 800e4c2:	f1bc 0f00 	cmp.w	ip, #0
 800e4c6:	4664      	mov	r4, ip
 800e4c8:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 800e698 <__ieee754_fmod+0x254>
 800e4cc:	dd0d      	ble.n	800e4ea <__ieee754_fmod+0xa6>
 800e4ce:	0064      	lsls	r4, r4, #1
 800e4d0:	2c00      	cmp	r4, #0
 800e4d2:	f108 38ff 	add.w	r8, r8, #4294967295
 800e4d6:	dcfa      	bgt.n	800e4ce <__ieee754_fmod+0x8a>
 800e4d8:	e007      	b.n	800e4ea <__ieee754_fmod+0xa6>
 800e4da:	4650      	mov	r0, sl
 800e4dc:	4659      	mov	r1, fp
 800e4de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4e2:	ea4f 5825 	mov.w	r8, r5, asr #20
 800e4e6:	f2a8 38ff 	subw	r8, r8, #1023	; 0x3ff
 800e4ea:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800e4ee:	da0d      	bge.n	800e50c <__ieee754_fmod+0xc8>
 800e4f0:	2a00      	cmp	r2, #0
 800e4f2:	f040 80a1 	bne.w	800e638 <__ieee754_fmod+0x1f4>
 800e4f6:	2900      	cmp	r1, #0
 800e4f8:	460c      	mov	r4, r1
 800e4fa:	f8df e19c 	ldr.w	lr, [pc, #412]	; 800e698 <__ieee754_fmod+0x254>
 800e4fe:	dd09      	ble.n	800e514 <__ieee754_fmod+0xd0>
 800e500:	0064      	lsls	r4, r4, #1
 800e502:	2c00      	cmp	r4, #0
 800e504:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e508:	dcfa      	bgt.n	800e500 <__ieee754_fmod+0xbc>
 800e50a:	e003      	b.n	800e514 <__ieee754_fmod+0xd0>
 800e50c:	ea4f 5e22 	mov.w	lr, r2, asr #20
 800e510:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 800e514:	4c5c      	ldr	r4, [pc, #368]	; (800e688 <__ieee754_fmod+0x244>)
 800e516:	45a0      	cmp	r8, r4
 800e518:	db58      	blt.n	800e5cc <__ieee754_fmod+0x188>
 800e51a:	f3c5 0413 	ubfx	r4, r5, #0, #20
 800e51e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800e522:	4d59      	ldr	r5, [pc, #356]	; (800e688 <__ieee754_fmod+0x244>)
 800e524:	45ae      	cmp	lr, r5
 800e526:	db5f      	blt.n	800e5e8 <__ieee754_fmod+0x1a4>
 800e528:	f3c0 0113 	ubfx	r1, r0, #0, #20
 800e52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e530:	ebce 0008 	rsb	r0, lr, r8
 800e534:	e007      	b.n	800e546 <__ieee754_fmod+0x102>
 800e536:	ea52 0305 	orrs.w	r3, r2, r5
 800e53a:	d012      	beq.n	800e562 <__ieee754_fmod+0x11e>
 800e53c:	0fec      	lsrs	r4, r5, #31
 800e53e:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800e542:	006b      	lsls	r3, r5, #1
 800e544:	3801      	subs	r0, #1
 800e546:	1bdd      	subs	r5, r3, r7
 800e548:	1a62      	subs	r2, r4, r1
 800e54a:	b190      	cbz	r0, 800e572 <__ieee754_fmod+0x12e>
 800e54c:	42bb      	cmp	r3, r7
 800e54e:	bf38      	it	cc
 800e550:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800e554:	2a00      	cmp	r2, #0
 800e556:	daee      	bge.n	800e536 <__ieee754_fmod+0xf2>
 800e558:	0fda      	lsrs	r2, r3, #31
 800e55a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800e55e:	005b      	lsls	r3, r3, #1
 800e560:	e7f0      	b.n	800e544 <__ieee754_fmod+0x100>
 800e562:	4b48      	ldr	r3, [pc, #288]	; (800e684 <__ieee754_fmod+0x240>)
 800e564:	0ff6      	lsrs	r6, r6, #31
 800e566:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e56a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e56e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e572:	429f      	cmp	r7, r3
 800e574:	4611      	mov	r1, r2
 800e576:	bf88      	it	hi
 800e578:	f102 31ff 	addhi.w	r1, r2, #4294967295
 800e57c:	2900      	cmp	r1, #0
 800e57e:	bfac      	ite	ge
 800e580:	1bdb      	subge	r3, r3, r7
 800e582:	4621      	movlt	r1, r4
 800e584:	ea51 0203 	orrs.w	r2, r1, r3
 800e588:	d0eb      	beq.n	800e562 <__ieee754_fmod+0x11e>
 800e58a:	4840      	ldr	r0, [pc, #256]	; (800e68c <__ieee754_fmod+0x248>)
 800e58c:	4281      	cmp	r1, r0
 800e58e:	dc08      	bgt.n	800e5a2 <__ieee754_fmod+0x15e>
 800e590:	0fda      	lsrs	r2, r3, #31
 800e592:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e596:	4281      	cmp	r1, r0
 800e598:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e59c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e5a0:	ddf6      	ble.n	800e590 <__ieee754_fmod+0x14c>
 800e5a2:	4a39      	ldr	r2, [pc, #228]	; (800e688 <__ieee754_fmod+0x244>)
 800e5a4:	4596      	cmp	lr, r2
 800e5a6:	da50      	bge.n	800e64a <__ieee754_fmod+0x206>
 800e5a8:	4a37      	ldr	r2, [pc, #220]	; (800e688 <__ieee754_fmod+0x244>)
 800e5aa:	ebce 0202 	rsb	r2, lr, r2
 800e5ae:	2a14      	cmp	r2, #20
 800e5b0:	dc55      	bgt.n	800e65e <__ieee754_fmod+0x21a>
 800e5b2:	f20e 4e1e 	addw	lr, lr, #1054	; 0x41e
 800e5b6:	40d3      	lsrs	r3, r2
 800e5b8:	fa01 f00e 	lsl.w	r0, r1, lr
 800e5bc:	4303      	orrs	r3, r0
 800e5be:	fa41 f202 	asr.w	r2, r1, r2
 800e5c2:	ea42 0106 	orr.w	r1, r2, r6
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5cc:	4b2e      	ldr	r3, [pc, #184]	; (800e688 <__ieee754_fmod+0x244>)
 800e5ce:	ebc8 0303 	rsb	r3, r8, r3
 800e5d2:	2b1f      	cmp	r3, #31
 800e5d4:	dc29      	bgt.n	800e62a <__ieee754_fmod+0x1e6>
 800e5d6:	f208 441e 	addw	r4, r8, #1054	; 0x41e
 800e5da:	409d      	lsls	r5, r3
 800e5dc:	fa2c f404 	lsr.w	r4, ip, r4
 800e5e0:	fa0c f303 	lsl.w	r3, ip, r3
 800e5e4:	432c      	orrs	r4, r5
 800e5e6:	e79c      	b.n	800e522 <__ieee754_fmod+0xde>
 800e5e8:	4827      	ldr	r0, [pc, #156]	; (800e688 <__ieee754_fmod+0x244>)
 800e5ea:	ebce 0000 	rsb	r0, lr, r0
 800e5ee:	281f      	cmp	r0, #31
 800e5f0:	dc15      	bgt.n	800e61e <__ieee754_fmod+0x1da>
 800e5f2:	f20e 451e 	addw	r5, lr, #1054	; 0x41e
 800e5f6:	4082      	lsls	r2, r0
 800e5f8:	fa21 f505 	lsr.w	r5, r1, r5
 800e5fc:	fa01 f700 	lsl.w	r7, r1, r0
 800e600:	ea42 0105 	orr.w	r1, r2, r5
 800e604:	e794      	b.n	800e530 <__ieee754_fmod+0xec>
 800e606:	02ec      	lsls	r4, r5, #11
 800e608:	2c00      	cmp	r4, #0
 800e60a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800e688 <__ieee754_fmod+0x244>
 800e60e:	f77f af6c 	ble.w	800e4ea <__ieee754_fmod+0xa6>
 800e612:	0064      	lsls	r4, r4, #1
 800e614:	2c00      	cmp	r4, #0
 800e616:	f108 38ff 	add.w	r8, r8, #4294967295
 800e61a:	dcfa      	bgt.n	800e612 <__ieee754_fmod+0x1ce>
 800e61c:	e765      	b.n	800e4ea <__ieee754_fmod+0xa6>
 800e61e:	4a1c      	ldr	r2, [pc, #112]	; (800e690 <__ieee754_fmod+0x24c>)
 800e620:	ebce 0202 	rsb	r2, lr, r2
 800e624:	4091      	lsls	r1, r2
 800e626:	2700      	movs	r7, #0
 800e628:	e782      	b.n	800e530 <__ieee754_fmod+0xec>
 800e62a:	4b19      	ldr	r3, [pc, #100]	; (800e690 <__ieee754_fmod+0x24c>)
 800e62c:	ebc8 0303 	rsb	r3, r8, r3
 800e630:	fa0c f403 	lsl.w	r4, ip, r3
 800e634:	2300      	movs	r3, #0
 800e636:	e774      	b.n	800e522 <__ieee754_fmod+0xde>
 800e638:	f8df e04c 	ldr.w	lr, [pc, #76]	; 800e688 <__ieee754_fmod+0x244>
 800e63c:	02d4      	lsls	r4, r2, #11
 800e63e:	0064      	lsls	r4, r4, #1
 800e640:	2c00      	cmp	r4, #0
 800e642:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e646:	dcfa      	bgt.n	800e63e <__ieee754_fmod+0x1fa>
 800e648:	e764      	b.n	800e514 <__ieee754_fmod+0xd0>
 800e64a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e64e:	430e      	orrs	r6, r1
 800e650:	f20e 3eff 	addw	lr, lr, #1023	; 0x3ff
 800e654:	ea46 510e 	orr.w	r1, r6, lr, lsl #20
 800e658:	4618      	mov	r0, r3
 800e65a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e65e:	2a1f      	cmp	r2, #31
 800e660:	dc07      	bgt.n	800e672 <__ieee754_fmod+0x22e>
 800e662:	f20e 4e1e 	addw	lr, lr, #1054	; 0x41e
 800e666:	40d3      	lsrs	r3, r2
 800e668:	fa01 f10e 	lsl.w	r1, r1, lr
 800e66c:	430b      	orrs	r3, r1
 800e66e:	4632      	mov	r2, r6
 800e670:	e7a7      	b.n	800e5c2 <__ieee754_fmod+0x17e>
 800e672:	4b07      	ldr	r3, [pc, #28]	; (800e690 <__ieee754_fmod+0x24c>)
 800e674:	ebce 0303 	rsb	r3, lr, r3
 800e678:	fa41 f303 	asr.w	r3, r1, r3
 800e67c:	4632      	mov	r2, r6
 800e67e:	e7a0      	b.n	800e5c2 <__ieee754_fmod+0x17e>
 800e680:	7fefffff 	.word	0x7fefffff
 800e684:	0800fad0 	.word	0x0800fad0
 800e688:	fffffc02 	.word	0xfffffc02
 800e68c:	000fffff 	.word	0x000fffff
 800e690:	fffffbe2 	.word	0xfffffbe2
 800e694:	7ff00000 	.word	0x7ff00000
 800e698:	fffffbed 	.word	0xfffffbed

0800e69c <__fpclassifyd>:
 800e69c:	b410      	push	{r4}
 800e69e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800e6a2:	460b      	mov	r3, r1
 800e6a4:	d008      	beq.n	800e6b8 <__fpclassifyd+0x1c>
 800e6a6:	4a11      	ldr	r2, [pc, #68]	; (800e6ec <__fpclassifyd+0x50>)
 800e6a8:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e6ac:	4291      	cmp	r1, r2
 800e6ae:	d808      	bhi.n	800e6c2 <__fpclassifyd+0x26>
 800e6b0:	2004      	movs	r0, #4
 800e6b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6b6:	4770      	bx	lr
 800e6b8:	b918      	cbnz	r0, 800e6c2 <__fpclassifyd+0x26>
 800e6ba:	2002      	movs	r0, #2
 800e6bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6c0:	4770      	bx	lr
 800e6c2:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800e6c6:	4a09      	ldr	r2, [pc, #36]	; (800e6ec <__fpclassifyd+0x50>)
 800e6c8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d9ef      	bls.n	800e6b0 <__fpclassifyd+0x14>
 800e6d0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e6d4:	d201      	bcs.n	800e6da <__fpclassifyd+0x3e>
 800e6d6:	2003      	movs	r0, #3
 800e6d8:	e7eb      	b.n	800e6b2 <__fpclassifyd+0x16>
 800e6da:	4b05      	ldr	r3, [pc, #20]	; (800e6f0 <__fpclassifyd+0x54>)
 800e6dc:	429c      	cmp	r4, r3
 800e6de:	d001      	beq.n	800e6e4 <__fpclassifyd+0x48>
 800e6e0:	2000      	movs	r0, #0
 800e6e2:	e7e6      	b.n	800e6b2 <__fpclassifyd+0x16>
 800e6e4:	fab0 f080 	clz	r0, r0
 800e6e8:	0940      	lsrs	r0, r0, #5
 800e6ea:	e7e2      	b.n	800e6b2 <__fpclassifyd+0x16>
 800e6ec:	7fdfffff 	.word	0x7fdfffff
 800e6f0:	7ff00000 	.word	0x7ff00000

0800e6f4 <matherr>:
 800e6f4:	2000      	movs	r0, #0
 800e6f6:	4770      	bx	lr

0800e6f8 <__aeabi_drsub>:
 800e6f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800e6fc:	e002      	b.n	800e704 <__adddf3>
 800e6fe:	bf00      	nop

0800e700 <__aeabi_dsub>:
 800e700:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800e704 <__adddf3>:
 800e704:	b530      	push	{r4, r5, lr}
 800e706:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800e70a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800e70e:	ea94 0f05 	teq	r4, r5
 800e712:	bf08      	it	eq
 800e714:	ea90 0f02 	teqeq	r0, r2
 800e718:	bf1f      	itttt	ne
 800e71a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800e71e:	ea55 0c02 	orrsne.w	ip, r5, r2
 800e722:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800e726:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800e72a:	f000 80e2 	beq.w	800e8f2 <__adddf3+0x1ee>
 800e72e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800e732:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800e736:	bfb8      	it	lt
 800e738:	426d      	neglt	r5, r5
 800e73a:	dd0c      	ble.n	800e756 <__adddf3+0x52>
 800e73c:	442c      	add	r4, r5
 800e73e:	ea80 0202 	eor.w	r2, r0, r2
 800e742:	ea81 0303 	eor.w	r3, r1, r3
 800e746:	ea82 0000 	eor.w	r0, r2, r0
 800e74a:	ea83 0101 	eor.w	r1, r3, r1
 800e74e:	ea80 0202 	eor.w	r2, r0, r2
 800e752:	ea81 0303 	eor.w	r3, r1, r3
 800e756:	2d36      	cmp	r5, #54	; 0x36
 800e758:	bf88      	it	hi
 800e75a:	bd30      	pophi	{r4, r5, pc}
 800e75c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800e760:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800e764:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800e768:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800e76c:	d002      	beq.n	800e774 <__adddf3+0x70>
 800e76e:	4240      	negs	r0, r0
 800e770:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e774:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800e778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e77c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800e780:	d002      	beq.n	800e788 <__adddf3+0x84>
 800e782:	4252      	negs	r2, r2
 800e784:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800e788:	ea94 0f05 	teq	r4, r5
 800e78c:	f000 80a7 	beq.w	800e8de <__adddf3+0x1da>
 800e790:	f1a4 0401 	sub.w	r4, r4, #1
 800e794:	f1d5 0e20 	rsbs	lr, r5, #32
 800e798:	db0d      	blt.n	800e7b6 <__adddf3+0xb2>
 800e79a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800e79e:	fa22 f205 	lsr.w	r2, r2, r5
 800e7a2:	1880      	adds	r0, r0, r2
 800e7a4:	f141 0100 	adc.w	r1, r1, #0
 800e7a8:	fa03 f20e 	lsl.w	r2, r3, lr
 800e7ac:	1880      	adds	r0, r0, r2
 800e7ae:	fa43 f305 	asr.w	r3, r3, r5
 800e7b2:	4159      	adcs	r1, r3
 800e7b4:	e00e      	b.n	800e7d4 <__adddf3+0xd0>
 800e7b6:	f1a5 0520 	sub.w	r5, r5, #32
 800e7ba:	f10e 0e20 	add.w	lr, lr, #32
 800e7be:	2a01      	cmp	r2, #1
 800e7c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 800e7c4:	bf28      	it	cs
 800e7c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 800e7ca:	fa43 f305 	asr.w	r3, r3, r5
 800e7ce:	18c0      	adds	r0, r0, r3
 800e7d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800e7d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e7d8:	d507      	bpl.n	800e7ea <__adddf3+0xe6>
 800e7da:	f04f 0e00 	mov.w	lr, #0
 800e7de:	f1dc 0c00 	rsbs	ip, ip, #0
 800e7e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 800e7e6:	eb6e 0101 	sbc.w	r1, lr, r1
 800e7ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e7ee:	d31b      	bcc.n	800e828 <__adddf3+0x124>
 800e7f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800e7f4:	d30c      	bcc.n	800e810 <__adddf3+0x10c>
 800e7f6:	0849      	lsrs	r1, r1, #1
 800e7f8:	ea5f 0030 	movs.w	r0, r0, rrx
 800e7fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800e800:	f104 0401 	add.w	r4, r4, #1
 800e804:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800e808:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800e80c:	f080 809a 	bcs.w	800e944 <__adddf3+0x240>
 800e810:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800e814:	bf08      	it	eq
 800e816:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800e81a:	f150 0000 	adcs.w	r0, r0, #0
 800e81e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800e822:	ea41 0105 	orr.w	r1, r1, r5
 800e826:	bd30      	pop	{r4, r5, pc}
 800e828:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800e82c:	4140      	adcs	r0, r0
 800e82e:	eb41 0101 	adc.w	r1, r1, r1
 800e832:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e836:	f1a4 0401 	sub.w	r4, r4, #1
 800e83a:	d1e9      	bne.n	800e810 <__adddf3+0x10c>
 800e83c:	f091 0f00 	teq	r1, #0
 800e840:	bf04      	itt	eq
 800e842:	4601      	moveq	r1, r0
 800e844:	2000      	moveq	r0, #0
 800e846:	fab1 f381 	clz	r3, r1
 800e84a:	bf08      	it	eq
 800e84c:	3320      	addeq	r3, #32
 800e84e:	f1a3 030b 	sub.w	r3, r3, #11
 800e852:	f1b3 0220 	subs.w	r2, r3, #32
 800e856:	da0c      	bge.n	800e872 <__adddf3+0x16e>
 800e858:	320c      	adds	r2, #12
 800e85a:	dd08      	ble.n	800e86e <__adddf3+0x16a>
 800e85c:	f102 0c14 	add.w	ip, r2, #20
 800e860:	f1c2 020c 	rsb	r2, r2, #12
 800e864:	fa01 f00c 	lsl.w	r0, r1, ip
 800e868:	fa21 f102 	lsr.w	r1, r1, r2
 800e86c:	e00c      	b.n	800e888 <__adddf3+0x184>
 800e86e:	f102 0214 	add.w	r2, r2, #20
 800e872:	bfd8      	it	le
 800e874:	f1c2 0c20 	rsble	ip, r2, #32
 800e878:	fa01 f102 	lsl.w	r1, r1, r2
 800e87c:	fa20 fc0c 	lsr.w	ip, r0, ip
 800e880:	bfdc      	itt	le
 800e882:	ea41 010c 	orrle.w	r1, r1, ip
 800e886:	4090      	lslle	r0, r2
 800e888:	1ae4      	subs	r4, r4, r3
 800e88a:	bfa2      	ittt	ge
 800e88c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800e890:	4329      	orrge	r1, r5
 800e892:	bd30      	popge	{r4, r5, pc}
 800e894:	ea6f 0404 	mvn.w	r4, r4
 800e898:	3c1f      	subs	r4, #31
 800e89a:	da1c      	bge.n	800e8d6 <__adddf3+0x1d2>
 800e89c:	340c      	adds	r4, #12
 800e89e:	dc0e      	bgt.n	800e8be <__adddf3+0x1ba>
 800e8a0:	f104 0414 	add.w	r4, r4, #20
 800e8a4:	f1c4 0220 	rsb	r2, r4, #32
 800e8a8:	fa20 f004 	lsr.w	r0, r0, r4
 800e8ac:	fa01 f302 	lsl.w	r3, r1, r2
 800e8b0:	ea40 0003 	orr.w	r0, r0, r3
 800e8b4:	fa21 f304 	lsr.w	r3, r1, r4
 800e8b8:	ea45 0103 	orr.w	r1, r5, r3
 800e8bc:	bd30      	pop	{r4, r5, pc}
 800e8be:	f1c4 040c 	rsb	r4, r4, #12
 800e8c2:	f1c4 0220 	rsb	r2, r4, #32
 800e8c6:	fa20 f002 	lsr.w	r0, r0, r2
 800e8ca:	fa01 f304 	lsl.w	r3, r1, r4
 800e8ce:	ea40 0003 	orr.w	r0, r0, r3
 800e8d2:	4629      	mov	r1, r5
 800e8d4:	bd30      	pop	{r4, r5, pc}
 800e8d6:	fa21 f004 	lsr.w	r0, r1, r4
 800e8da:	4629      	mov	r1, r5
 800e8dc:	bd30      	pop	{r4, r5, pc}
 800e8de:	f094 0f00 	teq	r4, #0
 800e8e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800e8e6:	bf06      	itte	eq
 800e8e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800e8ec:	3401      	addeq	r4, #1
 800e8ee:	3d01      	subne	r5, #1
 800e8f0:	e74e      	b.n	800e790 <__adddf3+0x8c>
 800e8f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800e8f6:	bf18      	it	ne
 800e8f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800e8fc:	d029      	beq.n	800e952 <__adddf3+0x24e>
 800e8fe:	ea94 0f05 	teq	r4, r5
 800e902:	bf08      	it	eq
 800e904:	ea90 0f02 	teqeq	r0, r2
 800e908:	d005      	beq.n	800e916 <__adddf3+0x212>
 800e90a:	ea54 0c00 	orrs.w	ip, r4, r0
 800e90e:	bf04      	itt	eq
 800e910:	4619      	moveq	r1, r3
 800e912:	4610      	moveq	r0, r2
 800e914:	bd30      	pop	{r4, r5, pc}
 800e916:	ea91 0f03 	teq	r1, r3
 800e91a:	bf1e      	ittt	ne
 800e91c:	2100      	movne	r1, #0
 800e91e:	2000      	movne	r0, #0
 800e920:	bd30      	popne	{r4, r5, pc}
 800e922:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800e926:	d105      	bne.n	800e934 <__adddf3+0x230>
 800e928:	0040      	lsls	r0, r0, #1
 800e92a:	4149      	adcs	r1, r1
 800e92c:	bf28      	it	cs
 800e92e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800e932:	bd30      	pop	{r4, r5, pc}
 800e934:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800e938:	bf3c      	itt	cc
 800e93a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800e93e:	bd30      	popcc	{r4, r5, pc}
 800e940:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e944:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800e948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e94c:	f04f 0000 	mov.w	r0, #0
 800e950:	bd30      	pop	{r4, r5, pc}
 800e952:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800e956:	bf1a      	itte	ne
 800e958:	4619      	movne	r1, r3
 800e95a:	4610      	movne	r0, r2
 800e95c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800e960:	bf1c      	itt	ne
 800e962:	460b      	movne	r3, r1
 800e964:	4602      	movne	r2, r0
 800e966:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800e96a:	bf06      	itte	eq
 800e96c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800e970:	ea91 0f03 	teqeq	r1, r3
 800e974:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800e978:	bd30      	pop	{r4, r5, pc}
 800e97a:	bf00      	nop

0800e97c <__aeabi_ui2d>:
 800e97c:	f090 0f00 	teq	r0, #0
 800e980:	bf04      	itt	eq
 800e982:	2100      	moveq	r1, #0
 800e984:	4770      	bxeq	lr
 800e986:	b530      	push	{r4, r5, lr}
 800e988:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e98c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e990:	f04f 0500 	mov.w	r5, #0
 800e994:	f04f 0100 	mov.w	r1, #0
 800e998:	e750      	b.n	800e83c <__adddf3+0x138>
 800e99a:	bf00      	nop

0800e99c <__aeabi_i2d>:
 800e99c:	f090 0f00 	teq	r0, #0
 800e9a0:	bf04      	itt	eq
 800e9a2:	2100      	moveq	r1, #0
 800e9a4:	4770      	bxeq	lr
 800e9a6:	b530      	push	{r4, r5, lr}
 800e9a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800e9ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800e9b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800e9b4:	bf48      	it	mi
 800e9b6:	4240      	negmi	r0, r0
 800e9b8:	f04f 0100 	mov.w	r1, #0
 800e9bc:	e73e      	b.n	800e83c <__adddf3+0x138>
 800e9be:	bf00      	nop

0800e9c0 <__aeabi_f2d>:
 800e9c0:	0042      	lsls	r2, r0, #1
 800e9c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800e9c6:	ea4f 0131 	mov.w	r1, r1, rrx
 800e9ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800e9ce:	bf1f      	itttt	ne
 800e9d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800e9d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800e9d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800e9dc:	4770      	bxne	lr
 800e9de:	f092 0f00 	teq	r2, #0
 800e9e2:	bf14      	ite	ne
 800e9e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800e9e8:	4770      	bxeq	lr
 800e9ea:	b530      	push	{r4, r5, lr}
 800e9ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 800e9f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e9f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e9f8:	e720      	b.n	800e83c <__adddf3+0x138>
 800e9fa:	bf00      	nop

0800e9fc <__aeabi_ul2d>:
 800e9fc:	ea50 0201 	orrs.w	r2, r0, r1
 800ea00:	bf08      	it	eq
 800ea02:	4770      	bxeq	lr
 800ea04:	b530      	push	{r4, r5, lr}
 800ea06:	f04f 0500 	mov.w	r5, #0
 800ea0a:	e00a      	b.n	800ea22 <__aeabi_l2d+0x16>

0800ea0c <__aeabi_l2d>:
 800ea0c:	ea50 0201 	orrs.w	r2, r0, r1
 800ea10:	bf08      	it	eq
 800ea12:	4770      	bxeq	lr
 800ea14:	b530      	push	{r4, r5, lr}
 800ea16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800ea1a:	d502      	bpl.n	800ea22 <__aeabi_l2d+0x16>
 800ea1c:	4240      	negs	r0, r0
 800ea1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800ea22:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800ea26:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800ea2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800ea2e:	f43f aedc 	beq.w	800e7ea <__adddf3+0xe6>
 800ea32:	f04f 0203 	mov.w	r2, #3
 800ea36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ea3a:	bf18      	it	ne
 800ea3c:	3203      	addne	r2, #3
 800ea3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ea42:	bf18      	it	ne
 800ea44:	3203      	addne	r2, #3
 800ea46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800ea4a:	f1c2 0320 	rsb	r3, r2, #32
 800ea4e:	fa00 fc03 	lsl.w	ip, r0, r3
 800ea52:	fa20 f002 	lsr.w	r0, r0, r2
 800ea56:	fa01 fe03 	lsl.w	lr, r1, r3
 800ea5a:	ea40 000e 	orr.w	r0, r0, lr
 800ea5e:	fa21 f102 	lsr.w	r1, r1, r2
 800ea62:	4414      	add	r4, r2
 800ea64:	e6c1      	b.n	800e7ea <__adddf3+0xe6>
 800ea66:	bf00      	nop

0800ea68 <__aeabi_dmul>:
 800ea68:	b570      	push	{r4, r5, r6, lr}
 800ea6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800ea6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800ea72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800ea76:	bf1d      	ittte	ne
 800ea78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800ea7c:	ea94 0f0c 	teqne	r4, ip
 800ea80:	ea95 0f0c 	teqne	r5, ip
 800ea84:	f000 f8de 	bleq	800ec44 <__aeabi_dmul+0x1dc>
 800ea88:	442c      	add	r4, r5
 800ea8a:	ea81 0603 	eor.w	r6, r1, r3
 800ea8e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800ea92:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800ea96:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800ea9a:	bf18      	it	ne
 800ea9c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800eaa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800eaa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eaa8:	d038      	beq.n	800eb1c <__aeabi_dmul+0xb4>
 800eaaa:	fba0 ce02 	umull	ip, lr, r0, r2
 800eaae:	f04f 0500 	mov.w	r5, #0
 800eab2:	fbe1 e502 	umlal	lr, r5, r1, r2
 800eab6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800eaba:	fbe0 e503 	umlal	lr, r5, r0, r3
 800eabe:	f04f 0600 	mov.w	r6, #0
 800eac2:	fbe1 5603 	umlal	r5, r6, r1, r3
 800eac6:	f09c 0f00 	teq	ip, #0
 800eaca:	bf18      	it	ne
 800eacc:	f04e 0e01 	orrne.w	lr, lr, #1
 800ead0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800ead4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800ead8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800eadc:	d204      	bcs.n	800eae8 <__aeabi_dmul+0x80>
 800eade:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800eae2:	416d      	adcs	r5, r5
 800eae4:	eb46 0606 	adc.w	r6, r6, r6
 800eae8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800eaec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800eaf0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800eaf4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800eaf8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800eafc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800eb00:	bf88      	it	hi
 800eb02:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800eb06:	d81e      	bhi.n	800eb46 <__aeabi_dmul+0xde>
 800eb08:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800eb0c:	bf08      	it	eq
 800eb0e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800eb12:	f150 0000 	adcs.w	r0, r0, #0
 800eb16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800eb1a:	bd70      	pop	{r4, r5, r6, pc}
 800eb1c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800eb20:	ea46 0101 	orr.w	r1, r6, r1
 800eb24:	ea40 0002 	orr.w	r0, r0, r2
 800eb28:	ea81 0103 	eor.w	r1, r1, r3
 800eb2c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800eb30:	bfc2      	ittt	gt
 800eb32:	ebd4 050c 	rsbsgt	r5, r4, ip
 800eb36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800eb3a:	bd70      	popgt	{r4, r5, r6, pc}
 800eb3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800eb40:	f04f 0e00 	mov.w	lr, #0
 800eb44:	3c01      	subs	r4, #1
 800eb46:	f300 80ab 	bgt.w	800eca0 <__aeabi_dmul+0x238>
 800eb4a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800eb4e:	bfde      	ittt	le
 800eb50:	2000      	movle	r0, #0
 800eb52:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800eb56:	bd70      	pople	{r4, r5, r6, pc}
 800eb58:	f1c4 0400 	rsb	r4, r4, #0
 800eb5c:	3c20      	subs	r4, #32
 800eb5e:	da35      	bge.n	800ebcc <__aeabi_dmul+0x164>
 800eb60:	340c      	adds	r4, #12
 800eb62:	dc1b      	bgt.n	800eb9c <__aeabi_dmul+0x134>
 800eb64:	f104 0414 	add.w	r4, r4, #20
 800eb68:	f1c4 0520 	rsb	r5, r4, #32
 800eb6c:	fa00 f305 	lsl.w	r3, r0, r5
 800eb70:	fa20 f004 	lsr.w	r0, r0, r4
 800eb74:	fa01 f205 	lsl.w	r2, r1, r5
 800eb78:	ea40 0002 	orr.w	r0, r0, r2
 800eb7c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800eb80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800eb84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800eb88:	fa21 f604 	lsr.w	r6, r1, r4
 800eb8c:	eb42 0106 	adc.w	r1, r2, r6
 800eb90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800eb94:	bf08      	it	eq
 800eb96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800eb9a:	bd70      	pop	{r4, r5, r6, pc}
 800eb9c:	f1c4 040c 	rsb	r4, r4, #12
 800eba0:	f1c4 0520 	rsb	r5, r4, #32
 800eba4:	fa00 f304 	lsl.w	r3, r0, r4
 800eba8:	fa20 f005 	lsr.w	r0, r0, r5
 800ebac:	fa01 f204 	lsl.w	r2, r1, r4
 800ebb0:	ea40 0002 	orr.w	r0, r0, r2
 800ebb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ebb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800ebbc:	f141 0100 	adc.w	r1, r1, #0
 800ebc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ebc4:	bf08      	it	eq
 800ebc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800ebca:	bd70      	pop	{r4, r5, r6, pc}
 800ebcc:	f1c4 0520 	rsb	r5, r4, #32
 800ebd0:	fa00 f205 	lsl.w	r2, r0, r5
 800ebd4:	ea4e 0e02 	orr.w	lr, lr, r2
 800ebd8:	fa20 f304 	lsr.w	r3, r0, r4
 800ebdc:	fa01 f205 	lsl.w	r2, r1, r5
 800ebe0:	ea43 0302 	orr.w	r3, r3, r2
 800ebe4:	fa21 f004 	lsr.w	r0, r1, r4
 800ebe8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ebec:	fa21 f204 	lsr.w	r2, r1, r4
 800ebf0:	ea20 0002 	bic.w	r0, r0, r2
 800ebf4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800ebf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ebfc:	bf08      	it	eq
 800ebfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800ec02:	bd70      	pop	{r4, r5, r6, pc}
 800ec04:	f094 0f00 	teq	r4, #0
 800ec08:	d10f      	bne.n	800ec2a <__aeabi_dmul+0x1c2>
 800ec0a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800ec0e:	0040      	lsls	r0, r0, #1
 800ec10:	eb41 0101 	adc.w	r1, r1, r1
 800ec14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800ec18:	bf08      	it	eq
 800ec1a:	3c01      	subeq	r4, #1
 800ec1c:	d0f7      	beq.n	800ec0e <__aeabi_dmul+0x1a6>
 800ec1e:	ea41 0106 	orr.w	r1, r1, r6
 800ec22:	f095 0f00 	teq	r5, #0
 800ec26:	bf18      	it	ne
 800ec28:	4770      	bxne	lr
 800ec2a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800ec2e:	0052      	lsls	r2, r2, #1
 800ec30:	eb43 0303 	adc.w	r3, r3, r3
 800ec34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800ec38:	bf08      	it	eq
 800ec3a:	3d01      	subeq	r5, #1
 800ec3c:	d0f7      	beq.n	800ec2e <__aeabi_dmul+0x1c6>
 800ec3e:	ea43 0306 	orr.w	r3, r3, r6
 800ec42:	4770      	bx	lr
 800ec44:	ea94 0f0c 	teq	r4, ip
 800ec48:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800ec4c:	bf18      	it	ne
 800ec4e:	ea95 0f0c 	teqne	r5, ip
 800ec52:	d00c      	beq.n	800ec6e <__aeabi_dmul+0x206>
 800ec54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800ec58:	bf18      	it	ne
 800ec5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800ec5e:	d1d1      	bne.n	800ec04 <__aeabi_dmul+0x19c>
 800ec60:	ea81 0103 	eor.w	r1, r1, r3
 800ec64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ec68:	f04f 0000 	mov.w	r0, #0
 800ec6c:	bd70      	pop	{r4, r5, r6, pc}
 800ec6e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800ec72:	bf06      	itte	eq
 800ec74:	4610      	moveq	r0, r2
 800ec76:	4619      	moveq	r1, r3
 800ec78:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800ec7c:	d019      	beq.n	800ecb2 <__aeabi_dmul+0x24a>
 800ec7e:	ea94 0f0c 	teq	r4, ip
 800ec82:	d102      	bne.n	800ec8a <__aeabi_dmul+0x222>
 800ec84:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800ec88:	d113      	bne.n	800ecb2 <__aeabi_dmul+0x24a>
 800ec8a:	ea95 0f0c 	teq	r5, ip
 800ec8e:	d105      	bne.n	800ec9c <__aeabi_dmul+0x234>
 800ec90:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800ec94:	bf1c      	itt	ne
 800ec96:	4610      	movne	r0, r2
 800ec98:	4619      	movne	r1, r3
 800ec9a:	d10a      	bne.n	800ecb2 <__aeabi_dmul+0x24a>
 800ec9c:	ea81 0103 	eor.w	r1, r1, r3
 800eca0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800eca4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800eca8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ecac:	f04f 0000 	mov.w	r0, #0
 800ecb0:	bd70      	pop	{r4, r5, r6, pc}
 800ecb2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800ecb6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800ecba:	bd70      	pop	{r4, r5, r6, pc}

0800ecbc <__aeabi_ddiv>:
 800ecbc:	b570      	push	{r4, r5, r6, lr}
 800ecbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800ecc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800ecc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800ecca:	bf1d      	ittte	ne
 800eccc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800ecd0:	ea94 0f0c 	teqne	r4, ip
 800ecd4:	ea95 0f0c 	teqne	r5, ip
 800ecd8:	f000 f8a7 	bleq	800ee2a <__aeabi_ddiv+0x16e>
 800ecdc:	eba4 0405 	sub.w	r4, r4, r5
 800ece0:	ea81 0e03 	eor.w	lr, r1, r3
 800ece4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800ece8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800ecec:	f000 8088 	beq.w	800ee00 <__aeabi_ddiv+0x144>
 800ecf0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800ecf4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800ecf8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800ecfc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800ed00:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800ed04:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800ed08:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800ed0c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800ed10:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800ed14:	429d      	cmp	r5, r3
 800ed16:	bf08      	it	eq
 800ed18:	4296      	cmpeq	r6, r2
 800ed1a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800ed1e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800ed22:	d202      	bcs.n	800ed2a <__aeabi_ddiv+0x6e>
 800ed24:	085b      	lsrs	r3, r3, #1
 800ed26:	ea4f 0232 	mov.w	r2, r2, rrx
 800ed2a:	1ab6      	subs	r6, r6, r2
 800ed2c:	eb65 0503 	sbc.w	r5, r5, r3
 800ed30:	085b      	lsrs	r3, r3, #1
 800ed32:	ea4f 0232 	mov.w	r2, r2, rrx
 800ed36:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ed3a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800ed3e:	ebb6 0e02 	subs.w	lr, r6, r2
 800ed42:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ed46:	bf22      	ittt	cs
 800ed48:	1ab6      	subcs	r6, r6, r2
 800ed4a:	4675      	movcs	r5, lr
 800ed4c:	ea40 000c 	orrcs.w	r0, r0, ip
 800ed50:	085b      	lsrs	r3, r3, #1
 800ed52:	ea4f 0232 	mov.w	r2, r2, rrx
 800ed56:	ebb6 0e02 	subs.w	lr, r6, r2
 800ed5a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ed5e:	bf22      	ittt	cs
 800ed60:	1ab6      	subcs	r6, r6, r2
 800ed62:	4675      	movcs	r5, lr
 800ed64:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800ed68:	085b      	lsrs	r3, r3, #1
 800ed6a:	ea4f 0232 	mov.w	r2, r2, rrx
 800ed6e:	ebb6 0e02 	subs.w	lr, r6, r2
 800ed72:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ed76:	bf22      	ittt	cs
 800ed78:	1ab6      	subcs	r6, r6, r2
 800ed7a:	4675      	movcs	r5, lr
 800ed7c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800ed80:	085b      	lsrs	r3, r3, #1
 800ed82:	ea4f 0232 	mov.w	r2, r2, rrx
 800ed86:	ebb6 0e02 	subs.w	lr, r6, r2
 800ed8a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ed8e:	bf22      	ittt	cs
 800ed90:	1ab6      	subcs	r6, r6, r2
 800ed92:	4675      	movcs	r5, lr
 800ed94:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800ed98:	ea55 0e06 	orrs.w	lr, r5, r6
 800ed9c:	d018      	beq.n	800edd0 <__aeabi_ddiv+0x114>
 800ed9e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800eda2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800eda6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800edaa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800edae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800edb2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800edb6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800edba:	d1c0      	bne.n	800ed3e <__aeabi_ddiv+0x82>
 800edbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800edc0:	d10b      	bne.n	800edda <__aeabi_ddiv+0x11e>
 800edc2:	ea41 0100 	orr.w	r1, r1, r0
 800edc6:	f04f 0000 	mov.w	r0, #0
 800edca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800edce:	e7b6      	b.n	800ed3e <__aeabi_ddiv+0x82>
 800edd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800edd4:	bf04      	itt	eq
 800edd6:	4301      	orreq	r1, r0
 800edd8:	2000      	moveq	r0, #0
 800edda:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800edde:	bf88      	it	hi
 800ede0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800ede4:	f63f aeaf 	bhi.w	800eb46 <__aeabi_dmul+0xde>
 800ede8:	ebb5 0c03 	subs.w	ip, r5, r3
 800edec:	bf04      	itt	eq
 800edee:	ebb6 0c02 	subseq.w	ip, r6, r2
 800edf2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800edf6:	f150 0000 	adcs.w	r0, r0, #0
 800edfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800edfe:	bd70      	pop	{r4, r5, r6, pc}
 800ee00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800ee04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800ee08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800ee0c:	bfc2      	ittt	gt
 800ee0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 800ee12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800ee16:	bd70      	popgt	{r4, r5, r6, pc}
 800ee18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ee1c:	f04f 0e00 	mov.w	lr, #0
 800ee20:	3c01      	subs	r4, #1
 800ee22:	e690      	b.n	800eb46 <__aeabi_dmul+0xde>
 800ee24:	ea45 0e06 	orr.w	lr, r5, r6
 800ee28:	e68d      	b.n	800eb46 <__aeabi_dmul+0xde>
 800ee2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800ee2e:	ea94 0f0c 	teq	r4, ip
 800ee32:	bf08      	it	eq
 800ee34:	ea95 0f0c 	teqeq	r5, ip
 800ee38:	f43f af3b 	beq.w	800ecb2 <__aeabi_dmul+0x24a>
 800ee3c:	ea94 0f0c 	teq	r4, ip
 800ee40:	d10a      	bne.n	800ee58 <__aeabi_ddiv+0x19c>
 800ee42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800ee46:	f47f af34 	bne.w	800ecb2 <__aeabi_dmul+0x24a>
 800ee4a:	ea95 0f0c 	teq	r5, ip
 800ee4e:	f47f af25 	bne.w	800ec9c <__aeabi_dmul+0x234>
 800ee52:	4610      	mov	r0, r2
 800ee54:	4619      	mov	r1, r3
 800ee56:	e72c      	b.n	800ecb2 <__aeabi_dmul+0x24a>
 800ee58:	ea95 0f0c 	teq	r5, ip
 800ee5c:	d106      	bne.n	800ee6c <__aeabi_ddiv+0x1b0>
 800ee5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800ee62:	f43f aefd 	beq.w	800ec60 <__aeabi_dmul+0x1f8>
 800ee66:	4610      	mov	r0, r2
 800ee68:	4619      	mov	r1, r3
 800ee6a:	e722      	b.n	800ecb2 <__aeabi_dmul+0x24a>
 800ee6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800ee70:	bf18      	it	ne
 800ee72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800ee76:	f47f aec5 	bne.w	800ec04 <__aeabi_dmul+0x19c>
 800ee7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800ee7e:	f47f af0d 	bne.w	800ec9c <__aeabi_dmul+0x234>
 800ee82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800ee86:	f47f aeeb 	bne.w	800ec60 <__aeabi_dmul+0x1f8>
 800ee8a:	e712      	b.n	800ecb2 <__aeabi_dmul+0x24a>

0800ee8c <__gedf2>:
 800ee8c:	f04f 3cff 	mov.w	ip, #4294967295
 800ee90:	e006      	b.n	800eea0 <__cmpdf2+0x4>
 800ee92:	bf00      	nop

0800ee94 <__ledf2>:
 800ee94:	f04f 0c01 	mov.w	ip, #1
 800ee98:	e002      	b.n	800eea0 <__cmpdf2+0x4>
 800ee9a:	bf00      	nop

0800ee9c <__cmpdf2>:
 800ee9c:	f04f 0c01 	mov.w	ip, #1
 800eea0:	f84d cd04 	str.w	ip, [sp, #-4]!
 800eea4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800eea8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800eeac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800eeb0:	bf18      	it	ne
 800eeb2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800eeb6:	d01b      	beq.n	800eef0 <__cmpdf2+0x54>
 800eeb8:	b001      	add	sp, #4
 800eeba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800eebe:	bf0c      	ite	eq
 800eec0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800eec4:	ea91 0f03 	teqne	r1, r3
 800eec8:	bf02      	ittt	eq
 800eeca:	ea90 0f02 	teqeq	r0, r2
 800eece:	2000      	moveq	r0, #0
 800eed0:	4770      	bxeq	lr
 800eed2:	f110 0f00 	cmn.w	r0, #0
 800eed6:	ea91 0f03 	teq	r1, r3
 800eeda:	bf58      	it	pl
 800eedc:	4299      	cmppl	r1, r3
 800eede:	bf08      	it	eq
 800eee0:	4290      	cmpeq	r0, r2
 800eee2:	bf2c      	ite	cs
 800eee4:	17d8      	asrcs	r0, r3, #31
 800eee6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800eeea:	f040 0001 	orr.w	r0, r0, #1
 800eeee:	4770      	bx	lr
 800eef0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800eef4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800eef8:	d102      	bne.n	800ef00 <__cmpdf2+0x64>
 800eefa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800eefe:	d107      	bne.n	800ef10 <__cmpdf2+0x74>
 800ef00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800ef04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800ef08:	d1d6      	bne.n	800eeb8 <__cmpdf2+0x1c>
 800ef0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800ef0e:	d0d3      	beq.n	800eeb8 <__cmpdf2+0x1c>
 800ef10:	f85d 0b04 	ldr.w	r0, [sp], #4
 800ef14:	4770      	bx	lr
 800ef16:	bf00      	nop

0800ef18 <__aeabi_cdrcmple>:
 800ef18:	4684      	mov	ip, r0
 800ef1a:	4610      	mov	r0, r2
 800ef1c:	4662      	mov	r2, ip
 800ef1e:	468c      	mov	ip, r1
 800ef20:	4619      	mov	r1, r3
 800ef22:	4663      	mov	r3, ip
 800ef24:	e000      	b.n	800ef28 <__aeabi_cdcmpeq>
 800ef26:	bf00      	nop

0800ef28 <__aeabi_cdcmpeq>:
 800ef28:	b501      	push	{r0, lr}
 800ef2a:	f7ff ffb7 	bl	800ee9c <__cmpdf2>
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	bf48      	it	mi
 800ef32:	f110 0f00 	cmnmi.w	r0, #0
 800ef36:	bd01      	pop	{r0, pc}

0800ef38 <__aeabi_dcmpeq>:
 800ef38:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ef3c:	f7ff fff4 	bl	800ef28 <__aeabi_cdcmpeq>
 800ef40:	bf0c      	ite	eq
 800ef42:	2001      	moveq	r0, #1
 800ef44:	2000      	movne	r0, #0
 800ef46:	f85d fb08 	ldr.w	pc, [sp], #8
 800ef4a:	bf00      	nop

0800ef4c <__aeabi_dcmplt>:
 800ef4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ef50:	f7ff ffea 	bl	800ef28 <__aeabi_cdcmpeq>
 800ef54:	bf34      	ite	cc
 800ef56:	2001      	movcc	r0, #1
 800ef58:	2000      	movcs	r0, #0
 800ef5a:	f85d fb08 	ldr.w	pc, [sp], #8
 800ef5e:	bf00      	nop

0800ef60 <__aeabi_dcmple>:
 800ef60:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ef64:	f7ff ffe0 	bl	800ef28 <__aeabi_cdcmpeq>
 800ef68:	bf94      	ite	ls
 800ef6a:	2001      	movls	r0, #1
 800ef6c:	2000      	movhi	r0, #0
 800ef6e:	f85d fb08 	ldr.w	pc, [sp], #8
 800ef72:	bf00      	nop

0800ef74 <__aeabi_dcmpge>:
 800ef74:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ef78:	f7ff ffce 	bl	800ef18 <__aeabi_cdrcmple>
 800ef7c:	bf94      	ite	ls
 800ef7e:	2001      	movls	r0, #1
 800ef80:	2000      	movhi	r0, #0
 800ef82:	f85d fb08 	ldr.w	pc, [sp], #8
 800ef86:	bf00      	nop

0800ef88 <__aeabi_dcmpgt>:
 800ef88:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ef8c:	f7ff ffc4 	bl	800ef18 <__aeabi_cdrcmple>
 800ef90:	bf34      	ite	cc
 800ef92:	2001      	movcc	r0, #1
 800ef94:	2000      	movcs	r0, #0
 800ef96:	f85d fb08 	ldr.w	pc, [sp], #8
 800ef9a:	bf00      	nop

0800ef9c <__aeabi_d2uiz>:
 800ef9c:	004a      	lsls	r2, r1, #1
 800ef9e:	d211      	bcs.n	800efc4 <__aeabi_d2uiz+0x28>
 800efa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800efa4:	d211      	bcs.n	800efca <__aeabi_d2uiz+0x2e>
 800efa6:	d50d      	bpl.n	800efc4 <__aeabi_d2uiz+0x28>
 800efa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800efac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800efb0:	d40e      	bmi.n	800efd0 <__aeabi_d2uiz+0x34>
 800efb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800efb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800efba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800efbe:	fa23 f002 	lsr.w	r0, r3, r2
 800efc2:	4770      	bx	lr
 800efc4:	f04f 0000 	mov.w	r0, #0
 800efc8:	4770      	bx	lr
 800efca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800efce:	d102      	bne.n	800efd6 <__aeabi_d2uiz+0x3a>
 800efd0:	f04f 30ff 	mov.w	r0, #4294967295
 800efd4:	4770      	bx	lr
 800efd6:	f04f 0000 	mov.w	r0, #0
 800efda:	4770      	bx	lr

0800efdc <__errno>:
 800efdc:	4b01      	ldr	r3, [pc, #4]	; (800efe4 <__errno+0x8>)
 800efde:	6818      	ldr	r0, [r3, #0]
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop
 800efe4:	2000068c 	.word	0x2000068c

0800efe8 <__libc_init_array>:
 800efe8:	b570      	push	{r4, r5, r6, lr}
 800efea:	4b0e      	ldr	r3, [pc, #56]	; (800f024 <__libc_init_array+0x3c>)
 800efec:	4c0e      	ldr	r4, [pc, #56]	; (800f028 <__libc_init_array+0x40>)
 800efee:	1ae4      	subs	r4, r4, r3
 800eff0:	10a4      	asrs	r4, r4, #2
 800eff2:	2500      	movs	r5, #0
 800eff4:	461e      	mov	r6, r3
 800eff6:	42a5      	cmp	r5, r4
 800eff8:	d004      	beq.n	800f004 <__libc_init_array+0x1c>
 800effa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800effe:	4798      	blx	r3
 800f000:	3501      	adds	r5, #1
 800f002:	e7f8      	b.n	800eff6 <__libc_init_array+0xe>
 800f004:	f7f8 ff7e 	bl	8007f04 <_init>
 800f008:	4c08      	ldr	r4, [pc, #32]	; (800f02c <__libc_init_array+0x44>)
 800f00a:	4b09      	ldr	r3, [pc, #36]	; (800f030 <__libc_init_array+0x48>)
 800f00c:	1ae4      	subs	r4, r4, r3
 800f00e:	10a4      	asrs	r4, r4, #2
 800f010:	2500      	movs	r5, #0
 800f012:	461e      	mov	r6, r3
 800f014:	42a5      	cmp	r5, r4
 800f016:	d004      	beq.n	800f022 <__libc_init_array+0x3a>
 800f018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f01c:	4798      	blx	r3
 800f01e:	3501      	adds	r5, #1
 800f020:	e7f8      	b.n	800f014 <__libc_init_array+0x2c>
 800f022:	bd70      	pop	{r4, r5, r6, pc}
 800f024:	20000690 	.word	0x20000690
 800f028:	20000690 	.word	0x20000690
 800f02c:	20000690 	.word	0x20000690
 800f030:	20000690 	.word	0x20000690

0800f034 <malloc>:
 800f034:	4b02      	ldr	r3, [pc, #8]	; (800f040 <malloc+0xc>)
 800f036:	4601      	mov	r1, r0
 800f038:	6818      	ldr	r0, [r3, #0]
 800f03a:	f000 b863 	b.w	800f104 <_malloc_r>
 800f03e:	bf00      	nop
 800f040:	2000068c 	.word	0x2000068c

0800f044 <free>:
 800f044:	4b02      	ldr	r3, [pc, #8]	; (800f050 <free+0xc>)
 800f046:	4601      	mov	r1, r0
 800f048:	6818      	ldr	r0, [r3, #0]
 800f04a:	f000 b817 	b.w	800f07c <_free_r>
 800f04e:	bf00      	nop
 800f050:	2000068c 	.word	0x2000068c

0800f054 <memcpy>:
 800f054:	b510      	push	{r4, lr}
 800f056:	1e43      	subs	r3, r0, #1
 800f058:	440a      	add	r2, r1
 800f05a:	4291      	cmp	r1, r2
 800f05c:	d004      	beq.n	800f068 <memcpy+0x14>
 800f05e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f062:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f066:	e7f8      	b.n	800f05a <memcpy+0x6>
 800f068:	bd10      	pop	{r4, pc}

0800f06a <memset>:
 800f06a:	4402      	add	r2, r0
 800f06c:	4603      	mov	r3, r0
 800f06e:	4293      	cmp	r3, r2
 800f070:	d002      	beq.n	800f078 <memset+0xe>
 800f072:	f803 1b01 	strb.w	r1, [r3], #1
 800f076:	e7fa      	b.n	800f06e <memset+0x4>
 800f078:	4770      	bx	lr
	...

0800f07c <_free_r>:
 800f07c:	b530      	push	{r4, r5, lr}
 800f07e:	2900      	cmp	r1, #0
 800f080:	d03d      	beq.n	800f0fe <_free_r+0x82>
 800f082:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800f086:	1f0b      	subs	r3, r1, #4
 800f088:	491d      	ldr	r1, [pc, #116]	; (800f100 <_free_r+0x84>)
 800f08a:	2a00      	cmp	r2, #0
 800f08c:	bfb8      	it	lt
 800f08e:	189b      	addlt	r3, r3, r2
 800f090:	680a      	ldr	r2, [r1, #0]
 800f092:	460c      	mov	r4, r1
 800f094:	b912      	cbnz	r2, 800f09c <_free_r+0x20>
 800f096:	605a      	str	r2, [r3, #4]
 800f098:	600b      	str	r3, [r1, #0]
 800f09a:	bd30      	pop	{r4, r5, pc}
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d20d      	bcs.n	800f0bc <_free_r+0x40>
 800f0a0:	6819      	ldr	r1, [r3, #0]
 800f0a2:	1858      	adds	r0, r3, r1
 800f0a4:	4290      	cmp	r0, r2
 800f0a6:	bf01      	itttt	eq
 800f0a8:	585a      	ldreq	r2, [r3, r1]
 800f0aa:	1852      	addeq	r2, r2, r1
 800f0ac:	601a      	streq	r2, [r3, #0]
 800f0ae:	6842      	ldreq	r2, [r0, #4]
 800f0b0:	605a      	str	r2, [r3, #4]
 800f0b2:	6023      	str	r3, [r4, #0]
 800f0b4:	bd30      	pop	{r4, r5, pc}
 800f0b6:	4299      	cmp	r1, r3
 800f0b8:	d803      	bhi.n	800f0c2 <_free_r+0x46>
 800f0ba:	460a      	mov	r2, r1
 800f0bc:	6851      	ldr	r1, [r2, #4]
 800f0be:	2900      	cmp	r1, #0
 800f0c0:	d1f9      	bne.n	800f0b6 <_free_r+0x3a>
 800f0c2:	6814      	ldr	r4, [r2, #0]
 800f0c4:	1915      	adds	r5, r2, r4
 800f0c6:	429d      	cmp	r5, r3
 800f0c8:	d10a      	bne.n	800f0e0 <_free_r+0x64>
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4423      	add	r3, r4
 800f0ce:	18d0      	adds	r0, r2, r3
 800f0d0:	4288      	cmp	r0, r1
 800f0d2:	6013      	str	r3, [r2, #0]
 800f0d4:	d113      	bne.n	800f0fe <_free_r+0x82>
 800f0d6:	6808      	ldr	r0, [r1, #0]
 800f0d8:	4403      	add	r3, r0
 800f0da:	6013      	str	r3, [r2, #0]
 800f0dc:	684b      	ldr	r3, [r1, #4]
 800f0de:	e00d      	b.n	800f0fc <_free_r+0x80>
 800f0e0:	d902      	bls.n	800f0e8 <_free_r+0x6c>
 800f0e2:	230c      	movs	r3, #12
 800f0e4:	6003      	str	r3, [r0, #0]
 800f0e6:	bd30      	pop	{r4, r5, pc}
 800f0e8:	681c      	ldr	r4, [r3, #0]
 800f0ea:	1918      	adds	r0, r3, r4
 800f0ec:	4288      	cmp	r0, r1
 800f0ee:	bf04      	itt	eq
 800f0f0:	6808      	ldreq	r0, [r1, #0]
 800f0f2:	6849      	ldreq	r1, [r1, #4]
 800f0f4:	6059      	str	r1, [r3, #4]
 800f0f6:	bf04      	itt	eq
 800f0f8:	1900      	addeq	r0, r0, r4
 800f0fa:	6018      	streq	r0, [r3, #0]
 800f0fc:	6053      	str	r3, [r2, #4]
 800f0fe:	bd30      	pop	{r4, r5, pc}
 800f100:	200008a0 	.word	0x200008a0

0800f104 <_malloc_r>:
 800f104:	b570      	push	{r4, r5, r6, lr}
 800f106:	1ccc      	adds	r4, r1, #3
 800f108:	f024 0403 	bic.w	r4, r4, #3
 800f10c:	3408      	adds	r4, #8
 800f10e:	2c0c      	cmp	r4, #12
 800f110:	bf38      	it	cc
 800f112:	240c      	movcc	r4, #12
 800f114:	2c00      	cmp	r4, #0
 800f116:	4606      	mov	r6, r0
 800f118:	da03      	bge.n	800f122 <_malloc_r+0x1e>
 800f11a:	230c      	movs	r3, #12
 800f11c:	6033      	str	r3, [r6, #0]
 800f11e:	2000      	movs	r0, #0
 800f120:	bd70      	pop	{r4, r5, r6, pc}
 800f122:	428c      	cmp	r4, r1
 800f124:	d3f9      	bcc.n	800f11a <_malloc_r+0x16>
 800f126:	4a20      	ldr	r2, [pc, #128]	; (800f1a8 <_malloc_r+0xa4>)
 800f128:	6813      	ldr	r3, [r2, #0]
 800f12a:	4610      	mov	r0, r2
 800f12c:	4619      	mov	r1, r3
 800f12e:	b1a1      	cbz	r1, 800f15a <_malloc_r+0x56>
 800f130:	680a      	ldr	r2, [r1, #0]
 800f132:	1b12      	subs	r2, r2, r4
 800f134:	d40e      	bmi.n	800f154 <_malloc_r+0x50>
 800f136:	2a0b      	cmp	r2, #11
 800f138:	d903      	bls.n	800f142 <_malloc_r+0x3e>
 800f13a:	600a      	str	r2, [r1, #0]
 800f13c:	188b      	adds	r3, r1, r2
 800f13e:	508c      	str	r4, [r1, r2]
 800f140:	e01f      	b.n	800f182 <_malloc_r+0x7e>
 800f142:	428b      	cmp	r3, r1
 800f144:	bf0d      	iteet	eq
 800f146:	685a      	ldreq	r2, [r3, #4]
 800f148:	684a      	ldrne	r2, [r1, #4]
 800f14a:	605a      	strne	r2, [r3, #4]
 800f14c:	6002      	streq	r2, [r0, #0]
 800f14e:	bf18      	it	ne
 800f150:	460b      	movne	r3, r1
 800f152:	e016      	b.n	800f182 <_malloc_r+0x7e>
 800f154:	460b      	mov	r3, r1
 800f156:	6849      	ldr	r1, [r1, #4]
 800f158:	e7e9      	b.n	800f12e <_malloc_r+0x2a>
 800f15a:	4d14      	ldr	r5, [pc, #80]	; (800f1ac <_malloc_r+0xa8>)
 800f15c:	682b      	ldr	r3, [r5, #0]
 800f15e:	b91b      	cbnz	r3, 800f168 <_malloc_r+0x64>
 800f160:	4630      	mov	r0, r6
 800f162:	f000 f825 	bl	800f1b0 <_sbrk_r>
 800f166:	6028      	str	r0, [r5, #0]
 800f168:	4630      	mov	r0, r6
 800f16a:	4621      	mov	r1, r4
 800f16c:	f000 f820 	bl	800f1b0 <_sbrk_r>
 800f170:	1c42      	adds	r2, r0, #1
 800f172:	4603      	mov	r3, r0
 800f174:	d0d1      	beq.n	800f11a <_malloc_r+0x16>
 800f176:	1cc5      	adds	r5, r0, #3
 800f178:	f025 0503 	bic.w	r5, r5, #3
 800f17c:	4285      	cmp	r5, r0
 800f17e:	d10a      	bne.n	800f196 <_malloc_r+0x92>
 800f180:	601c      	str	r4, [r3, #0]
 800f182:	f103 000b 	add.w	r0, r3, #11
 800f186:	1d1a      	adds	r2, r3, #4
 800f188:	f020 0007 	bic.w	r0, r0, #7
 800f18c:	1a82      	subs	r2, r0, r2
 800f18e:	d00a      	beq.n	800f1a6 <_malloc_r+0xa2>
 800f190:	4251      	negs	r1, r2
 800f192:	5099      	str	r1, [r3, r2]
 800f194:	bd70      	pop	{r4, r5, r6, pc}
 800f196:	4630      	mov	r0, r6
 800f198:	1ae9      	subs	r1, r5, r3
 800f19a:	f000 f809 	bl	800f1b0 <_sbrk_r>
 800f19e:	3001      	adds	r0, #1
 800f1a0:	d0bb      	beq.n	800f11a <_malloc_r+0x16>
 800f1a2:	462b      	mov	r3, r5
 800f1a4:	e7ec      	b.n	800f180 <_malloc_r+0x7c>
 800f1a6:	bd70      	pop	{r4, r5, r6, pc}
 800f1a8:	200008a0 	.word	0x200008a0
 800f1ac:	2000089c 	.word	0x2000089c

0800f1b0 <_sbrk_r>:
 800f1b0:	b538      	push	{r3, r4, r5, lr}
 800f1b2:	4c06      	ldr	r4, [pc, #24]	; (800f1cc <_sbrk_r+0x1c>)
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	4608      	mov	r0, r1
 800f1ba:	6023      	str	r3, [r4, #0]
 800f1bc:	f7f8 fe6e 	bl	8007e9c <_sbrk>
 800f1c0:	1c43      	adds	r3, r0, #1
 800f1c2:	d102      	bne.n	800f1ca <_sbrk_r+0x1a>
 800f1c4:	6823      	ldr	r3, [r4, #0]
 800f1c6:	b103      	cbz	r3, 800f1ca <_sbrk_r+0x1a>
 800f1c8:	602b      	str	r3, [r5, #0]
 800f1ca:	bd38      	pop	{r3, r4, r5, pc}
 800f1cc:	20001520 	.word	0x20001520

0800f1d0 <VCU_ConstB>:
 800f1d0:	48e8a71e 3fefff2e 48e8a71e 3fefff2e     ...H...?...H...?
 800f1e0:	0000fff8 00000000                       ........

0800f1e8 <VCU_ConstP>:
 800f1e8:	00000000 40390000 00000000 00000000     ......9@........
	...
 800f204:	40140000 00000000 404b8000 00000000     ...@......K@....
 800f214:	40640000 47ae147b 3fb47ae1 8f5c28f6     ..d@{..G.z.?.(\.
 800f224:	4008f5c2 47ae147b 3fb47ae1 851eb852     ...@{..G.z.?R...
 800f234:	400851eb c28f5c29 400428f5 a3d70a3d     .Q.@)\...(.@=...
 800f244:	40103d70 00000000 c0440000 00000000     p=.@......D.....
 800f254:	4072c000 2b020c4a 3fb91687 c083126f     ..r@J..+...?o...
 800f264:	3fc5a1ca 00000000 c0440000 00000000     ...?......D.....
 800f274:	4077a000 72b020c5 3fdd9168 e353f7cf     ..w@. .rh..?..S.
 800f284:	3fe09ba5 00000000 40901800 00000000     ...?.......@....
 800f294:	409f5400 00000000 40af0400 00000000     .T.@.......@....
 800f2a4:	40b73400 00000000 40bee600 a5e353f8     .4.@.......@.S..
 800f2b4:	3fe8c49b b645a1cb 3ff4fdf3 33333333     ...?..E....?3333
 800f2c4:	40033333 1eb851ec 400beb85 f1a9fbe7     33.@.Q.....@....
 800f2d4:	40124dd2 00000000 408fd000 00000000     .M.@.......@....
 800f2e4:	409f1800 00000000 40aebe00 00000000     ...@.......@....
 800f2f4:	40b6f300 00000000 40be9600 5a1cac08     ...@.......@...Z
 800f304:	3feb3b64 374bc6a8 3ff64189 a1cac083     d;.?..K7.A.?....
 800f314:	4003b645 851eb852 400c51eb 47ae147b     E..@R....Q.@{..G
 800f324:	40127ae1 00000000 00000000 00000000     .z.@............
	...
 800f34c:	3fe00000 66666666 3fe66666 00000000     ...?ffffff.?....
 800f35c:	3ff00000 00000000 00000000 00000000     ...?............
	...
 800f384:	3fe00000 66666666 3fe66666 00000000     ...?ffffff.?....
 800f394:	3ff00000 00000000 00000000 00000000     ...?............
	...
 800f3bc:	3fe00000 66666666 3fe66666 00000000     ...?ffffff.?....
 800f3cc:	3ff00000 00000000 00000000 00000000     ...?............
 800f3dc:	404e0000 00000000 40518000 00000000     ..N@......Q@....
 800f3ec:	40528000 00000000 4052c000 00000000     ..R@......R@....
 800f3fc:	40540000 00000000 40554000 00000000     ..T@.....@U@....
	...
 800f414:	40240000 00000000 40568000 00000000     ..$@......V@....
 800f424:	3ff00000 00000000 3fe00000 9999999a     ...?.......?....
 800f434:	3fb99999 9999999a 3fa99999 9999999a     ...?.......?....
 800f444:	3fa99999 9999999a 3fa99999 eb851eb8     ...?.......?....
 800f454:	3f9eb851 00000000 00000000 00000000     Q..?............
 800f464:	00000000 eb851eb8 3f9eb851 eb851eb8     ........Q..?....
 800f474:	3f9eb851 9999999a 3fa99999 9999999a     Q..?.......?....
 800f484:	3fd99999 9999999a 3fe99999 00000000     ...?.......?....
 800f494:	3ff00000 00000000 c0390000 00000000     ...?......9.....
 800f4a4:	c0140000 00000000 c0080000 00000000     ................
 800f4b4:	c0000000 00000000 bff00000 00000000     ................
 800f4c4:	bfe00000 9999999a bfb99999 00000000     ................
 800f4d4:	00000000 9999999a 3fb99999 00000000     ...........?....
 800f4e4:	3fe00000 00000000 3ff00000 00000000     ...?.......?....
 800f4f4:	40000000 00000000 40140000 00000000     ...@.......@....
 800f504:	401c0000 00000000 40390000 00000006     ...@......9@....
 800f514:	00000002 00000100 00000101 01010001     ................
 800f524:	00000000                                ....

0800f528 <g_xmc_vadc_group_array>:
 800f528:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

0800f538 <PWM_MHJ9_IN_compare_config>:
 800f538:	00000000 00000005                       ........

0800f540 <PWM_MHJ9_IN_gpio_out_config>:
 800f540:	00000098 00010000 00000004              ............

0800f54c <PWM_MHJ9_OUT_compare_config>:
 800f54c:	00000000 00000005                       ........

0800f554 <PWM_MHJ9_OUT_gpio_out_config>:
 800f554:	00000098 00010000 00000004              ............

0800f560 <PWM_Waterpump_compare_config>:
 800f560:	00000000 00000004                       ........

0800f568 <PWM_Waterpump_gpio_out_config>:
 800f568:	00000098 00010000 00000004              ............

0800f574 <PWM_Fans1_compare_config>:
 800f574:	00000000 00000004                       ........

0800f57c <PWM_Fans1_gpio_out_config>:
 800f57c:	00000098 00010000 00000004              ............

0800f588 <PWM_Fans2_compare_config>:
 800f588:	00000000 00000004                       ........

0800f590 <PWM_Fans2_gpio_out_config>:
 800f590:	00000098 00010000 00000004              ............

0800f59c <INTERRUPT_Shifting>:
 800f59c:	01003f04                                .?..

0800f5a0 <group_init_handle0>:
	...

0800f5b4 <group_init_handle1>:
	...

0800f5c8 <group_init_handle2>:
	...

0800f5dc <group_init_handle3>:
	...

0800f5f0 <global_config>:
 800f5f0:	00000000 00000003 00000000 00000000     ................
	...
 800f608:	454c4449 00000000 09632509 25097525     IDLE.....%c.%u.%
 800f618:	75250975 00000a0d 20726d54 00637653     u.%u....Tmr Svc.
 800f628:	51726d54 00000000                       TmrQ....

0800f630 <EVENT_GENERATOR_Shifting_OGU_Config>:
 800f630:	00000010                                ....

0800f634 <EVENT_DETECTOR_Shifting_ETL_Config>:
 800f634:	00000005 00000237                       ....7...

0800f63c <DIGITAL_IO_Debug_LED>:
 800f63c:	48028000 00000080 00000001 00000000     ...H............
 800f64c:	00000002                                ....

0800f650 <CAN1_Res>:
 800f650:	48028100 00000080 00000001 00000000     ...H............
 800f660:	00000006                                ....

0800f664 <CAN2_Res>:
 800f664:	48028100 00000080 00000001 00000000     ...H............
 800f674:	0000000e                                ....

0800f678 <Signal_DownShift>:
 800f678:	48028300 00000008 00000000 00000000     ...H............
 800f688:	00000002                                ....

0800f68c <Signal_UpShift>:
 800f68c:	48028300 00000008 00000000 00000000     ...H............
 800f69c:	00000001 01040250 00010000 00000000     ....P...........
 800f6ac:	00010000 01010101                       ........

0800f6b4 <CAN_1_gpio_out>:
 800f6b4:	48028100 0000000c                       ...H....

0800f6bc <CAN_1_gpio_out_config>:
 800f6bc:	00000090 00000001 00000002              ............

0800f6c8 <CAN_1_gpio_in>:
 800f6c8:	48028100 0000000d                       ...H....

0800f6d0 <CAN_1_gpio_in_config>:
	...

0800f6dc <CAN_1_sr>:
 800f6dc:	00000000                                ....

0800f6e0 <CAN_1_LMO_01_Config>:
 800f6e0:	200001c0 00000026 00000000              ... &.......

0800f6ec <CAN_1_LMO_02_Config>:
 800f6ec:	200001e0 00000027 00000000              ... '.......

0800f6f8 <CAN_1_LMO_03_Config>:
 800f6f8:	20000200 0000001e 00000000              ... ........

0800f704 <CAN_1_LMO_04_Config>:
 800f704:	20000220 0000001f 00000000               .. ........

0800f710 <CAN_1_LMO_05_Config>:
 800f710:	20000240 00000020 00000000              @..  .......

0800f71c <CAN_1_LMO_06_Config>:
 800f71c:	20000260 00000021 00000000              `.. !.......

0800f728 <CAN_1_LMO_07_Config>:
 800f728:	20000280 00000022 00000000              ... ".......

0800f734 <CAN_1_LMO_08_Config>:
 800f734:	200002a0 00000023 00000000              ... #.......

0800f740 <CAN_1>:
 800f740:	20000138 48014300 200001b4 0800f6e0     8.. .C.H... ....
 800f750:	0800f6ec 0800f6f8 0800f704 0800f710     ................
 800f760:	0800f71c 0800f728 0800f734 00000000     ....(...4.......
	...
 800f7cc:	0800f6dc 0800f6b4 0800f6bc 0800f6c8     ................
 800f7dc:	0800f6d0 00080102 00000000              ............

0800f7e8 <CAN_2_gpio_out>:
 800f7e8:	48028100 00000004                       ...H....

0800f7f0 <CAN_2_gpio_out_config>:
 800f7f0:	00000090 00000001 00000002              ............

0800f7fc <CAN_2_gpio_in>:
 800f7fc:	48028100 00000005                       ...H....

0800f804 <CAN_2_gpio_in_config>:
	...

0800f810 <CAN_2_sr>:
 800f810:	00000000                                ....

0800f814 <CAN_2_LMO_01_Config>:
 800f814:	200002d0 0000003c 00000000              ... <.......

0800f820 <CAN_2_LMO_02_Config>:
 800f820:	200002f0 00000007 00000000              ... ........

0800f82c <CAN_2_LMO_03_Config>:
 800f82c:	20000310 00000008 00000000              ... ........

0800f838 <CAN_2_LMO_04_Config>:
 800f838:	20000330 00000005 00000000              0.. ........

0800f844 <CAN_2_LMO_05_Config>:
 800f844:	20000350 00000006 00000000              P.. ........

0800f850 <CAN_2_LMO_06_Config>:
 800f850:	20000370 00000016 00000000              p.. ........

0800f85c <CAN_2_LMO_07_Config>:
 800f85c:	20000390 00000015 00000000              ... ........

0800f868 <CAN_2_LMO_08_Config>:
 800f868:	200003b0 00000018 00000000              ... ........

0800f874 <CAN_2_LMO_09_Config>:
 800f874:	200003d0 00000017 00000000              ... ........

0800f880 <CAN_2_LMO_10_Config>:
 800f880:	200003f0 00000025 00000000              ... %.......

0800f88c <CAN_2_LMO_11_Config>:
 800f88c:	20000410 00000024 00000000              ... $.......

0800f898 <CAN_2_LMO_12_Config>:
 800f898:	20000430 00000009 00000000              0.. ........

0800f8a4 <CAN_2>:
 800f8a4:	20000138 48014200 200002c0 0800f814     8.. .B.H... ....
 800f8b4:	0800f820 0800f82c 0800f838 0800f844      ...,...8...D...
 800f8c4:	0800f850 0800f85c 0800f868 0800f874     P...\...h...t...
 800f8d4:	0800f880 0800f88c 0800f898 00000000     ................
	...
 800f930:	0800f810 0800f7e8 0800f7f0 0800f7fc     ................
 800f940:	0800f804 000c0000 00000000              ............

0800f94c <BUS_IO_pin_list>:
 800f94c:	48028000 00000009 48028000 0000000a     ...H.......H....
 800f95c:	48028000 00000004 48028000 00000005     ...H.......H....
 800f96c:	48028000 00000006 48028500 00000002     ...H.......H....
 800f97c:	48028500 00000007                       ...H....

0800f984 <BUS_IO_Input_pin_list>:
 800f984:	48028000 00000007 48028000 00000008     ...H.......H....

0800f994 <ANALOG_IO_boardTemp>:
 800f994:	00000000 200007f4 48028e00 0000000e     ....... ...H....

0800f9a4 <ANALOG_IO_pbrakeR>:
 800f9a4:	00000000 200007f5 48028e00 00000006     ....... ...H....

0800f9b4 <ANALOG_IO_xClutch>:
 800f9b4:	00000000 200007f6 48028e00 00000005     ....... ...H....

0800f9c4 <ANALOG_IO_fFL>:
 800f9c4:	00000000 200007f7 48028e00 00000002     ....... ...H....

0800f9d4 <ANALOG_IO_fFR>:
 800f9d4:	00000000 200007f8 48028e00 00000003     ....... ...H....

0800f9e4 <ANALOG_IO_xRHF>:
 800f9e4:	00000000 200007f9 48028e00 00000004     ....... ...H....

0800f9f4 <ANALOG_IO_UBat>:
 800f9f4:	00000000 200007fa 48028e00 00000008     ....... ...H....

0800fa04 <ANALOG_IO_xClutchSTW>:
 800fa04:	00000000 200007fb 48028e00 00000000     ....... ...H....

0800fa14 <ANALOG_IO_TR1_I_WP>:
 800fa14:	00000000 200007fc 48028f00 00000002     ....... ...H....

0800fa24 <ANALOG_IO_TR2_I_FAN1>:
 800fa24:	00000000 200007fd 48028f00 00000003     ....... ...H....

0800fa34 <ANALOG_IO_TR3_I_FAN2>:
 800fa34:	00000000 200007fe 48028f00 00000008     ....... ...H....

0800fa44 <global_iclass_config>:
 800fa44:	00000000                                ....

0800fa48 <backgnd_config>:
 800fa48:	00000005 00000000 00000010 6b736154     ............Task
 800fa58:	7665525f 65766965 00000000 6b736154     _Reveive....Task
 800fa68:	776f4c5f 6f697250 6b736154 00000000     _LowPrioTask....
 800fa78:	6b736154 6172545f 696d736e 00000074     Task_Transmit...
 800fa88:	6b736154 6172545f 696d736e 6f697373     Task_Transmissio
 800fa98:	0000006e 6b736154 656e4f5f 706f6f4c     n...Task_OneLoop
 800faa8:	6b736154 00000000 656d6954 72545f72     Task....Timer_Tr
 800fab8:	6d736e61 69737369 00006e6f 646f6d66     ansmission..fmod
	...

0800fad0 <Zero>:
	...
 800fadc:	80000000 00000043                       ....C...
