package Model.APPS.FREERTOS.v4_1_8;

// Import statements
import ifx.davex.app.manifest.*

abstract class FREERTOS_GUI extends AppManifest {
	/* Begin : UI variable section */
	 public GTab gtab_include_setings;
	 public GInteger ginteger_configMAX_PRIORITIES;
	 public GInteger ginteger_configMINIMAL_STACK_SIZE;
	 public GInteger ginteger_configNUM_THREAD_LOCAL_STORAGE_POINTERS;
	 public GInteger ginteger_configTOTAL_HEAP_SIZE;
	 public GInteger ginteger_configTIMER_TASK_PRIORITY;
	 public GInteger ginteger_configTIMER_QUEUE_LENGTH;
	 public GInteger ginteger_configTIMER_TASK_STACK_DEPTH;
	 public GInteger ginteger_configMAX_CO_ROUTINE_PRIORITIES;
	 public GInteger ginteger_configMAX_TASK_NAME_LEN;
	 public GInteger ginteger_configQUEUE_REGISTRY_SIZE;
	 public GInteger ginteger_configMAX_API_CALL_INTERRUPT_PRIORITY;
	 public GCombo gcombo_configTICK_SRC;
	 public GCombo gcombo_configUSE_PREEMPTION;
	 public GCombo gcombo_configUSE_PORT_OPTIMISED_TASK_SELECTION;
	 public GCombo gcombo_configMEM_ALLOC;
	 public GFloat gfloat_configTICK_RATE_HZ;
	 public GCheck gcheck_configUSE_TIME_SLICING;
	 public GCheck gcheck_configUSE_TICKLESS_IDLE;
	 public GCheck gcheck_configIDLE_SHOULD_YIELD;
	 public GCheck gcheck_enable_MPU_support;
	 public GCheck gcheck_configUSE_TASK_NOTIFICATIONS;
	 public GCheck gcheck_configUSE_MUTEXES;
	 public GCheck gcheck_configUSE_RECURSIVE_MUTEXES;
	 public GCheck gcheck_configUSE_COUNTING_SEMAPHORES;
	 public GCheck gcheck_configUSE_QUEUE_SETS;
	 public GCheck gcheck_configSUPPORT_DYNAMIC_ALLOCATION;
	 public GCheck gcheck_configAPPLICATION_ALLOCATED_HEAP;
	 public GCheck gcheck_configSUPPORT_STATIC_ALLOCATION;
	 public GCheck gcheck_configUSE_TIMERS;
	 public GCheck gcheck_configUSE_CO_ROUTINES;
	 public GCheck gcheck_configUSE_IDLE_HOOK;
	 public GCheck gcheck_configUSE_TICK_HOOK;
	 public GCheck gcheck_configCHECK_FOR_STACK_OVERFLOW;
	 public GCheck gcheck_configUSE_MALLOC_FAILED_HOOK;
	 public GCheck gcheck_configGENERATE_RUN_TIME_STATS;
	 public GCheck gcheck_configUSE_TRACE_FACILITY;
	 public GCheck gcheck_configUSE_ASSERTIONS;
	 public GCheck gcheck_INCLUDE_vTaskPrioritySet;
	 public GCheck gcheck_INCLUDE_uxTaskPriorityGet;
	 public GCheck gcheck_INCLUDE_vTaskDelete;
	 public GCheck gcheck_INCLUDE_vTaskSuspend;
	 public GCheck gcheck_INCLUDE_vTaskDelayUntil;
	 public GCheck gcheck_INCLUDE_vTaskDelay;
	 public GCheck gcheck_INCLUDE_xTaskGetIdleTaskHandle;
	 public GCheck gcheck_INCLUDE_xTaskAbortDelay;
	 public GCheck gcheck_INCLUDE_xQueueGetMutexHolder;
	 public GCheck gcheck_INCLUDE_xTaskGetHandle;
	 public GCheck gcheck_INCLUDE_uxTaskGetStackHighWaterMark;
	 public GCheck gcheck_INCLUDE_eTaskGetState;
	 public GCheck gcheck_INCLUDE_xTaskResumeFromISR;
	 public GCheck gcheck_INCLUDE_xTimerPendFunctionCall;
	 public GCheck gcheck_INCLUDE_xTaskGetSchedulerState;
	 public GCheck gcheck_INCLUDE_xTaskGetCurrentTaskHandle;
	 public GCheck gcheck_INCLUDE_xEventGroupSetBitsFromISR;
	 public GCheck gcheck_INCLUDE_xSemaphoreGetMutexHolder;
	 public GCheck gcheck_configCMSIS_COMPATIBILITY;
	 public GLabel glabel_configNUM_THREAD_LOCAL_STORAGE_POINTERS;
	 public GInterruptPrio ginterruptprio_configKERNEL_INTERRUPT_PRIORITY;

	 public FREERTOS_GUI(DaveEnv daveEnv){

	 gtab_include_setings = GTab(widgetName:"gtab_include_setings", text:"Include Settings", enabled:true, visible:true)
	 ginteger_configMAX_PRIORITIES = GInteger(widgetName:"ginteger_configMAX_PRIORITIES", value:5, minValue:1, maxValue:64, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_configMINIMAL_STACK_SIZE = GInteger(widgetName:"ginteger_configMINIMAL_STACK_SIZE", value:130, minValue:130, maxValue:Long.MAX_VALUE, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_configNUM_THREAD_LOCAL_STORAGE_POINTERS = GInteger(widgetName:"ginteger_configNUM_THREAD_LOCAL_STORAGE_POINTERS", value:5, minValue:0, maxValue:32, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_configTOTAL_HEAP_SIZE = GInteger(widgetName:"ginteger_configTOTAL_HEAP_SIZE", value:4096, minValue:1, maxValue:Long.MAX_VALUE, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_configTIMER_TASK_PRIORITY = GInteger(widgetName:"ginteger_configTIMER_TASK_PRIORITY", value:2, minValue:0, maxValue:Long.MAX_VALUE, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_configTIMER_QUEUE_LENGTH = GInteger(widgetName:"ginteger_configTIMER_QUEUE_LENGTH", value:5, minValue:1, maxValue:Long.MAX_VALUE, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_configTIMER_TASK_STACK_DEPTH = GInteger(widgetName:"ginteger_configTIMER_TASK_STACK_DEPTH", value:260, minValue:260, maxValue:Long.MAX_VALUE, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_configMAX_CO_ROUTINE_PRIORITIES = GInteger(widgetName:"ginteger_configMAX_CO_ROUTINE_PRIORITIES", value:2, minValue:1, maxValue:Long.MAX_VALUE, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_configMAX_TASK_NAME_LEN = GInteger(widgetName:"ginteger_configMAX_TASK_NAME_LEN", value:16, minValue:1, maxValue:64, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_configQUEUE_REGISTRY_SIZE = GInteger(widgetName:"ginteger_configQUEUE_REGISTRY_SIZE", value:8, minValue:0, maxValue:64, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_configMAX_API_CALL_INTERRUPT_PRIORITY = GInteger(widgetName:"ginteger_configMAX_API_CALL_INTERRUPT_PRIORITY", value:5, minValue:0, maxValue:63, enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_configTICK_SRC = GCombo(widgetName:"gcombo_configTICK_SRC", options:["SysTick"], value:"SysTick", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_configUSE_PREEMPTION = GCombo(widgetName:"gcombo_configUSE_PREEMPTION", options:["Premptive","Cooperative"], value:"Premptive", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_configUSE_PORT_OPTIMISED_TASK_SELECTION = GCombo(widgetName:"gcombo_configUSE_PORT_OPTIMISED_TASK_SELECTION", options:["Port Optimized","Generic"], value:"Port Optimized", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_configMEM_ALLOC = GCombo(widgetName:"gcombo_configMEM_ALLOC", options:["heap_1","heap_2","heap_3","heap_4","heap_5"], value:"heap_3", enabled:true, visible:true, isMandatoryValue:false)
	 gfloat_configTICK_RATE_HZ = GFloat(widgetName:"gfloat_configTICK_RATE_HZ", value:1000, minValue:1, maxValue:10000, enabled:true, visible:true, isMandatoryValue:false)
	 gcheck_configUSE_TIME_SLICING = GCheck(widgetName:"gcheck_configUSE_TIME_SLICING", value:true, enabled:true, visible:true)
	 gcheck_configUSE_TICKLESS_IDLE = GCheck(widgetName:"gcheck_configUSE_TICKLESS_IDLE", value:false, enabled:true, visible:true)
	 gcheck_configIDLE_SHOULD_YIELD = GCheck(widgetName:"gcheck_configIDLE_SHOULD_YIELD", value:true, enabled:true, visible:true)
	 gcheck_enable_MPU_support = GCheck(widgetName:"gcheck_enable_MPU_support", value:false, enabled:true, visible:true)
	 gcheck_configUSE_TASK_NOTIFICATIONS = GCheck(widgetName:"gcheck_configUSE_TASK_NOTIFICATIONS", value:true, enabled:true, visible:true)
	 gcheck_configUSE_MUTEXES = GCheck(widgetName:"gcheck_configUSE_MUTEXES", value:true, enabled:true, visible:true)
	 gcheck_configUSE_RECURSIVE_MUTEXES = GCheck(widgetName:"gcheck_configUSE_RECURSIVE_MUTEXES", value:true, enabled:true, visible:true)
	 gcheck_configUSE_COUNTING_SEMAPHORES = GCheck(widgetName:"gcheck_configUSE_COUNTING_SEMAPHORES", value:true, enabled:true, visible:true)
	 gcheck_configUSE_QUEUE_SETS = GCheck(widgetName:"gcheck_configUSE_QUEUE_SETS", value:true, enabled:true, visible:true)
	 gcheck_configSUPPORT_DYNAMIC_ALLOCATION = GCheck(widgetName:"gcheck_configSUPPORT_DYNAMIC_ALLOCATION", value:true, enabled:true, visible:true)
	 gcheck_configAPPLICATION_ALLOCATED_HEAP = GCheck(widgetName:"gcheck_configAPPLICATION_ALLOCATED_HEAP", value:false, enabled:true, visible:true)
	 gcheck_configSUPPORT_STATIC_ALLOCATION = GCheck(widgetName:"gcheck_configSUPPORT_STATIC_ALLOCATION", value:false, enabled:true, visible:true)
	 gcheck_configUSE_TIMERS = GCheck(widgetName:"gcheck_configUSE_TIMERS", value:true, enabled:true, visible:true)
	 gcheck_configUSE_CO_ROUTINES = GCheck(widgetName:"gcheck_configUSE_CO_ROUTINES", value:false, enabled:true, visible:true)
	 gcheck_configUSE_IDLE_HOOK = GCheck(widgetName:"gcheck_configUSE_IDLE_HOOK", value:false, enabled:true, visible:true)
	 gcheck_configUSE_TICK_HOOK = GCheck(widgetName:"gcheck_configUSE_TICK_HOOK", value:false, enabled:true, visible:true)
	 gcheck_configCHECK_FOR_STACK_OVERFLOW = GCheck(widgetName:"gcheck_configCHECK_FOR_STACK_OVERFLOW", value:false, enabled:true, visible:true)
	 gcheck_configUSE_MALLOC_FAILED_HOOK = GCheck(widgetName:"gcheck_configUSE_MALLOC_FAILED_HOOK", value:false, enabled:true, visible:true)
	 gcheck_configGENERATE_RUN_TIME_STATS = GCheck(widgetName:"gcheck_configGENERATE_RUN_TIME_STATS", value:false, enabled:true, visible:true)
	 gcheck_configUSE_TRACE_FACILITY = GCheck(widgetName:"gcheck_configUSE_TRACE_FACILITY", value:true, enabled:true, visible:true)
	 gcheck_configUSE_ASSERTIONS = GCheck(widgetName:"gcheck_configUSE_ASSERTIONS", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_vTaskPrioritySet = GCheck(widgetName:"gcheck_INCLUDE_vTaskPrioritySet", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_uxTaskPriorityGet = GCheck(widgetName:"gcheck_INCLUDE_uxTaskPriorityGet", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_vTaskDelete = GCheck(widgetName:"gcheck_INCLUDE_vTaskDelete", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_vTaskSuspend = GCheck(widgetName:"gcheck_INCLUDE_vTaskSuspend", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_vTaskDelayUntil = GCheck(widgetName:"gcheck_INCLUDE_vTaskDelayUntil", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_vTaskDelay = GCheck(widgetName:"gcheck_INCLUDE_vTaskDelay", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_xTaskGetIdleTaskHandle = GCheck(widgetName:"gcheck_INCLUDE_xTaskGetIdleTaskHandle", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_xTaskAbortDelay = GCheck(widgetName:"gcheck_INCLUDE_xTaskAbortDelay", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_xQueueGetMutexHolder = GCheck(widgetName:"gcheck_INCLUDE_xQueueGetMutexHolder", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_xTaskGetHandle = GCheck(widgetName:"gcheck_INCLUDE_xTaskGetHandle", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_uxTaskGetStackHighWaterMark = GCheck(widgetName:"gcheck_INCLUDE_uxTaskGetStackHighWaterMark", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_eTaskGetState = GCheck(widgetName:"gcheck_INCLUDE_eTaskGetState", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_xTaskResumeFromISR = GCheck(widgetName:"gcheck_INCLUDE_xTaskResumeFromISR", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_xTimerPendFunctionCall = GCheck(widgetName:"gcheck_INCLUDE_xTimerPendFunctionCall", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_xTaskGetSchedulerState = GCheck(widgetName:"gcheck_INCLUDE_xTaskGetSchedulerState", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_xTaskGetCurrentTaskHandle = GCheck(widgetName:"gcheck_INCLUDE_xTaskGetCurrentTaskHandle", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_xEventGroupSetBitsFromISR = GCheck(widgetName:"gcheck_INCLUDE_xEventGroupSetBitsFromISR", value:true, enabled:true, visible:true)
	 gcheck_INCLUDE_xSemaphoreGetMutexHolder = GCheck(widgetName:"gcheck_INCLUDE_xSemaphoreGetMutexHolder", value:true, enabled:true, visible:true)
	 gcheck_configCMSIS_COMPATIBILITY = GCheck(widgetName:"gcheck_configCMSIS_COMPATIBILITY", value:false, enabled:false, visible:true)
	 glabel_configNUM_THREAD_LOCAL_STORAGE_POINTERS = GLabel(widgetName:"glabel_configNUM_THREAD_LOCAL_STORAGE_POINTERS", text:"Number of thread local storage(TLS) pointers:", enabled:true, visible:true)
	 ginterruptprio_configKERNEL_INTERRUPT_PRIORITY = GInterruptPrio(widgetName:"ginterruptprio_configKERNEL_INTERRUPT_PRIORITY", priorityValue:63, minPriority:0, maxPriority:63, subPriorityValue:0, minSubPriority:0, maxSubPriority:63, subPriorityVisible:true, enabled:true, visible:true)


	 }
	/* End : UI variable section */
}
