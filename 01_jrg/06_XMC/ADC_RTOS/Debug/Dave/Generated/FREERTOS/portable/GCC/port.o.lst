   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "port.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .data.uxCriticalNesting,"aw",%progbits
  20              	 .align 2
  23              	uxCriticalNesting:
  24 0000 AAAAAAAA 	 .word -1431655766
  25              	 .section .bss.ucMaxSysCallPriority,"aw",%nobits
  28              	ucMaxSysCallPriority:
  29 0000 00       	 .space 1
  30              	 .section .bss.ulMaxPRIGROUPValue,"aw",%nobits
  31              	 .align 2
  34              	ulMaxPRIGROUPValue:
  35 0000 00000000 	 .space 4
  36              	 .section .rodata.pcInterruptPriorityRegisters,"a",%progbits
  37              	 .align 2
  40              	pcInterruptPriorityRegisters:
  41 0000 F0E300E0 	 .word -536812560
  42              	 .section .text.pxPortInitialiseStack,"ax",%progbits
  43              	 .align 2
  44              	 .global pxPortInitialiseStack
  45              	 .thumb
  46              	 .thumb_func
  48              	pxPortInitialiseStack:
  49              	.LFB138:
  50              	 .file 1 "../Dave/Generated/FREERTOS/portable/GCC/port.c"
   1:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*
   2:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * FreeRTOS Kernel V10.4.3
   3:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  *
   5:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  *
  12:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  *
  15:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  *
  22:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * https://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * https://github.com/FreeRTOS
  24:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  *
  25:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  */
  26:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
  27:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #if defined( __GNUC__ )
  28:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
  29:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*-----------------------------------------------------------
  30:../Dave/Generated/FREERTOS/portable/GCC/port.c **** * Implementation of functions defined in portable.h for the ARM CM4F port.
  31:../Dave/Generated/FREERTOS/portable/GCC/port.c **** *----------------------------------------------------------*/
  32:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
  33:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /* Scheduler includes. */
  34:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #include "FREERTOS/FreeRTOS.h"
  35:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #include "FREERTOS/task.h"
  36:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
  37:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #if (FREERTOS_MPU_SUPPORT == 0)
  38:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
  39:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #ifndef __VFP_FP__
  40:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     #error This port can only be used when the project options are configured to enable hardware fl
  41:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #endif
  42:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
  43:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  44:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     #define configSYSTICK_CLOCK_HZ      configCPU_CLOCK_HZ
  45:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* Ensure the SysTick is clocked at the same frequency as the core. */
  46:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     #define portNVIC_SYSTICK_CLK_BIT    ( 1UL << 2UL )
  47:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #else
  48:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
  49:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /* The way the SysTick is clocked is not modified in case it is not the same
  50:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * as the core. */
  51:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     #define portNVIC_SYSTICK_CLK_BIT    ( 0 )
  52:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #endif
  53:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
  54:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /* Constants required to manipulate the core.  Registers first... */
  55:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portNVIC_SYSTICK_CTRL_REG             ( *( ( volatile uint32_t * ) 0xe000e010 ) )
  56:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portNVIC_SYSTICK_LOAD_REG             ( *( ( volatile uint32_t * ) 0xe000e014 ) )
  57:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG    ( *( ( volatile uint32_t * ) 0xe000e018 ) )
  58:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portNVIC_SHPR3_REG                    ( *( ( volatile uint32_t * ) 0xe000ed20 ) )
  59:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /* ...then bits in the registers. */
  60:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portNVIC_SYSTICK_INT_BIT              ( 1UL << 1UL )
  61:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT           ( 1UL << 0UL )
  62:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT       ( 1UL << 16UL )
  63:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portNVIC_PENDSVCLEAR_BIT              ( 1UL << 27UL )
  64:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT       ( 1UL << 25UL )
  65:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
  66:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /* Constants used to detect a Cortex-M7 r0p1 core, which should use the ARM_CM7
  67:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * r0p1 port. */
  68:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portCPUID                             ( *( ( volatile uint32_t * ) 0xE000ed00 ) )
  69:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portCORTEX_M7_r0p1_ID                 ( 0x410FC271UL )
  70:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portCORTEX_M7_r0p0_ID                 ( 0x410FC270UL )
  71:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
  72:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portNVIC_PENDSV_PRI                   ( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) <<
  73:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portNVIC_SYSTICK_PRI                  ( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) <<
  74:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
  75:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /* Constants required to check the validity of an interrupt priority. */
  76:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER       ( 16 )
  77:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16       ( 0xE000E3F0 )
  78:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portAIRCR_REG                         ( *( ( volatile uint32_t * ) 0xE000ED0C ) )
  79:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portMAX_8_BIT_VALUE                   ( ( uint8_t ) 0xff )
  80:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portTOP_BIT_OF_BYTE                   ( ( uint8_t ) 0x80 )
  81:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portMAX_PRIGROUP_BITS                 ( ( uint8_t ) 7 )
  82:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portPRIORITY_GROUP_MASK               ( 0x07UL << 8UL )
  83:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portPRIGROUP_SHIFT                    ( 8UL )
  84:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
  85:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  86:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portVECTACTIVE_MASK                   ( 0xFFUL )
  87:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
  88:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /* Constants required to manipulate the VFP. */
  89:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portFPCCR                             ( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating po
  90:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portASPEN_AND_LSPEN_BITS              ( 0x3UL << 30UL )
  91:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
  92:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /* Constants required to set up the initial stack. */
  93:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portINITIAL_XPSR                      ( 0x01000000 )
  94:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portINITIAL_EXC_RETURN                ( 0xfffffffd )
  95:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
  96:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /* The systick is a 24-bit counter. */
  97:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portMAX_24_BIT_NUMBER                 ( 0xffffffUL )
  98:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
  99:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
 100:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
 101:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portSTART_ADDRESS_MASK                ( ( StackType_t ) 0xfffffffeUL )
 102:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 103:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 104:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * occurred while the SysTick counter is stopped during tickless idle
 105:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * calculations. */
 106:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #define portMISSED_COUNTS_FACTOR              ( 45UL )
 107:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 108:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 109:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * prvTaskExitError() in case it messes up unwinding of the stack in the
 110:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * debugger. */
 111:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #ifdef configTASK_RETURN_ADDRESS
 112:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     #define portTASK_RETURN_ADDRESS    configTASK_RETURN_ADDRESS
 113:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #else
 114:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     #define portTASK_RETURN_ADDRESS    prvTaskExitError
 115:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #endif
 116:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 117:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*
 118:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 119:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * file is weak to allow application writers to change the timer used to
 120:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * generate the tick interrupt.
 121:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  */
 122:../Dave/Generated/FREERTOS/portable/GCC/port.c **** void vPortSetupTimerInterrupt( void );
 123:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 124:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*
 125:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * Exception handlers.
 126:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  */
 127:../Dave/Generated/FREERTOS/portable/GCC/port.c **** void xPortPendSVHandler( void ) __attribute__( ( naked ) );
 128:../Dave/Generated/FREERTOS/portable/GCC/port.c **** void xPortSysTickHandler( void );
 129:../Dave/Generated/FREERTOS/portable/GCC/port.c **** void vPortSVCHandler( void ) __attribute__( ( naked ) );
 130:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 131:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*
 132:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 133:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  */
 134:../Dave/Generated/FREERTOS/portable/GCC/port.c **** static void prvPortStartFirstTask( void ) __attribute__( ( naked ) );
 135:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 136:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*
 137:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * Function to enable the VFP.
 138:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  */
 139:../Dave/Generated/FREERTOS/portable/GCC/port.c **** static void vPortEnableVFP( void ) __attribute__( ( naked ) );
 140:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 141:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*
 142:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 143:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  */
 144:../Dave/Generated/FREERTOS/portable/GCC/port.c **** static void prvTaskExitError( void );
 145:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 146:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*-----------------------------------------------------------*/
 147:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 148:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 149:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * variable. */
 150:../Dave/Generated/FREERTOS/portable/GCC/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 151:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 152:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*
 153:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * The number of SysTick increments that make up one tick period.
 154:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  */
 155:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 156:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     static uint32_t ulTimerCountsForOneTick = 0;
 157:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 158:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 159:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*
 160:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 161:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * 24 bit resolution of the SysTick timer.
 162:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  */
 163:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 164:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     static uint32_t xMaximumPossibleSuppressedTicks = 0;
 165:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 166:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 167:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*
 168:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 169:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * power functionality only.
 170:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  */
 171:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 172:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     static uint32_t ulStoppedTimerCompensation = 0;
 173:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 174:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 175:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*
 176:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 177:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 178:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 179:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  */
 180:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #if ( configASSERT_DEFINED == 1 )
 181:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     static uint8_t ucMaxSysCallPriority = 0;
 182:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     static uint32_t ulMaxPRIGROUPValue = 0;
 183:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t *
 184:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #endif /* configASSERT_DEFINED */
 185:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 186:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*-----------------------------------------------------------*/
 187:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 188:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*
 189:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * See header file for description.
 190:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  */
 191:../Dave/Generated/FREERTOS/portable/GCC/port.c **** StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
 192:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                                      TaskFunction_t pxCode,
 193:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                                      void * pvParameters )
 194:../Dave/Generated/FREERTOS/portable/GCC/port.c **** {
  51              	 .loc 1 194 0
  52              	 .cfi_startproc
  53              	 
  54              	 
  55              	 
  56 0000 80B4     	 push {r7}
  57              	.LCFI0:
  58              	 .cfi_def_cfa_offset 4
  59              	 .cfi_offset 7,-4
  60 0002 85B0     	 sub sp,sp,#20
  61              	.LCFI1:
  62              	 .cfi_def_cfa_offset 24
  63 0004 00AF     	 add r7,sp,#0
  64              	.LCFI2:
  65              	 .cfi_def_cfa_register 7
  66 0006 F860     	 str r0,[r7,#12]
  67 0008 B960     	 str r1,[r7,#8]
  68 000a 7A60     	 str r2,[r7,#4]
 195:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* Simulate the stack frame as it would be created by a context switch
 196:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * interrupt. */
 197:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 198:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* Offset added to account for the way the MCU uses the stack on entry/exit
 199:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * of interrupts, and to ensure alignment. */
 200:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     pxTopOfStack--;
  69              	 .loc 1 200 0
  70 000c FB68     	 ldr r3,[r7,#12]
  71 000e 043B     	 subs r3,r3,#4
  72 0010 FB60     	 str r3,[r7,#12]
 201:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 202:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
  73              	 .loc 1 202 0
  74 0012 FB68     	 ldr r3,[r7,#12]
  75 0014 4FF08072 	 mov r2,#16777216
  76 0018 1A60     	 str r2,[r3]
 203:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     pxTopOfStack--;
  77              	 .loc 1 203 0
  78 001a FB68     	 ldr r3,[r7,#12]
  79 001c 043B     	 subs r3,r3,#4
  80 001e FB60     	 str r3,[r7,#12]
 204:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
  81              	 .loc 1 204 0
  82 0020 BB68     	 ldr r3,[r7,#8]
  83 0022 23F00102 	 bic r2,r3,#1
  84 0026 FB68     	 ldr r3,[r7,#12]
  85 0028 1A60     	 str r2,[r3]
 205:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     pxTopOfStack--;
  86              	 .loc 1 205 0
  87 002a FB68     	 ldr r3,[r7,#12]
  88 002c 043B     	 subs r3,r3,#4
  89 002e FB60     	 str r3,[r7,#12]
 206:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
  90              	 .loc 1 206 0
  91 0030 0C4A     	 ldr r2,.L3
  92 0032 FB68     	 ldr r3,[r7,#12]
  93 0034 1A60     	 str r2,[r3]
 207:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 208:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* Save code space by skipping register initialisation. */
 209:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
  94              	 .loc 1 209 0
  95 0036 FB68     	 ldr r3,[r7,#12]
  96 0038 143B     	 subs r3,r3,#20
  97 003a FB60     	 str r3,[r7,#12]
 210:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
  98              	 .loc 1 210 0
  99 003c 7A68     	 ldr r2,[r7,#4]
 100 003e FB68     	 ldr r3,[r7,#12]
 101 0040 1A60     	 str r2,[r3]
 211:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 212:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* A save method is being used that requires each task to maintain its
 213:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * own exec return value. */
 214:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     pxTopOfStack--;
 102              	 .loc 1 214 0
 103 0042 FB68     	 ldr r3,[r7,#12]
 104 0044 043B     	 subs r3,r3,#4
 105 0046 FB60     	 str r3,[r7,#12]
 215:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     *pxTopOfStack = portINITIAL_EXC_RETURN;
 106              	 .loc 1 215 0
 107 0048 FB68     	 ldr r3,[r7,#12]
 108 004a 6FF00202 	 mvn r2,#2
 109 004e 1A60     	 str r2,[r3]
 216:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 217:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 110              	 .loc 1 217 0
 111 0050 FB68     	 ldr r3,[r7,#12]
 112 0052 203B     	 subs r3,r3,#32
 113 0054 FB60     	 str r3,[r7,#12]
 218:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 219:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     return pxTopOfStack;
 114              	 .loc 1 219 0
 115 0056 FB68     	 ldr r3,[r7,#12]
 220:../Dave/Generated/FREERTOS/portable/GCC/port.c **** }
 116              	 .loc 1 220 0
 117 0058 1846     	 mov r0,r3
 118 005a 1437     	 adds r7,r7,#20
 119              	.LCFI3:
 120              	 .cfi_def_cfa_offset 4
 121 005c BD46     	 mov sp,r7
 122              	.LCFI4:
 123              	 .cfi_def_cfa_register 13
 124              	 
 125 005e 5DF8047B 	 ldr r7,[sp],#4
 126              	.LCFI5:
 127              	 .cfi_restore 7
 128              	 .cfi_def_cfa_offset 0
 129 0062 7047     	 bx lr
 130              	.L4:
 131              	 .align 2
 132              	.L3:
 133 0064 00000000 	 .word prvTaskExitError
 134              	 .cfi_endproc
 135              	.LFE138:
 137              	 .section .text.prvTaskExitError,"ax",%progbits
 138              	 .align 2
 139              	 .thumb
 140              	 .thumb_func
 142              	prvTaskExitError:
 143              	.LFB139:
 221:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*-----------------------------------------------------------*/
 222:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 223:../Dave/Generated/FREERTOS/portable/GCC/port.c **** static void prvTaskExitError( void )
 224:../Dave/Generated/FREERTOS/portable/GCC/port.c **** {
 144              	 .loc 1 224 0
 145              	 .cfi_startproc
 146              	 
 147              	 
 148              	 
 149 0000 80B4     	 push {r7}
 150              	.LCFI6:
 151              	 .cfi_def_cfa_offset 4
 152              	 .cfi_offset 7,-4
 153 0002 85B0     	 sub sp,sp,#20
 154              	.LCFI7:
 155              	 .cfi_def_cfa_offset 24
 156 0004 00AF     	 add r7,sp,#0
 157              	.LCFI8:
 158              	 .cfi_def_cfa_register 7
 225:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     volatile uint32_t ulDummy = 0;
 159              	 .loc 1 225 0
 160 0006 0023     	 movs r3,#0
 161 0008 7B60     	 str r3,[r7,#4]
 226:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 227:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* A function that implements a task must not exit or attempt to return to
 228:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * its caller as there is nothing to return to.  If a task wants to exit it
 229:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * should instead call vTaskDelete( NULL ).
 230:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      *
 231:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * Artificially force an assert() to be triggered if configASSERT() is
 232:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * defined, then stop here so application writers can catch the error. */
 233:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     configASSERT( uxCriticalNesting == ~0UL );
 162              	 .loc 1 233 0
 163 000a 104B     	 ldr r3,.L9
 164 000c 1B68     	 ldr r3,[r3]
 165 000e B3F1FF3F 	 cmp r3,#-1
 166 0012 09D0     	 beq .L6
 167              	.LBB31:
 168              	.LBB32:
 169              	 .file 2 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC/portmacro.h"
   1:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*
   2:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * FreeRTOS Kernel V10.4.3
   3:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
   5:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * subject to the following conditions:
  11:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  12:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * copies or substantial portions of the Software.
  14:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  15:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  22:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * https://www.FreeRTOS.org
  23:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * https://github.com/FreeRTOS
  24:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  25:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * 1 tab == 4 spaces!
  26:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  */
  27:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  28:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  29:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** #ifndef PORTMACRO_H
  30:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define PORTMACRO_H
  31:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  32:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifdef __cplusplus
  33:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         extern "C" {
  34:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
  35:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  36:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------
  37:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * Port specific definitions.
  38:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  39:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * given hardware and compiler.
  41:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  42:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * These settings should not be altered.
  43:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *-----------------------------------------------------------
  44:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  */
  45:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  46:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Type definitions. */
  47:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portCHAR          char
  48:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portFLOAT         float
  49:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portDOUBLE        double
  50:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portLONG          long
  51:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portSHORT         short
  52:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portBASE_TYPE     long
  54:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  55:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     typedef long             BaseType_t;
  57:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     typedef unsigned long    UBaseType_t;
  58:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  59:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         typedef uint16_t     TickType_t;
  61:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #else
  63:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         typedef uint32_t     TickType_t;
  64:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  66:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * not need to be guarded with a critical section. */
  68:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
  70:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
  71:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  72:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Architecture specifics. */
  73:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  74:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
  78:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  79:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Scheduler utilities. */
  80:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portYIELD()                                 \
  81:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {                                                   \
  82:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  83:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  84:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****                                                         \
  85:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
  90:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  91:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    if( xSwitchRequired != pdFALSE ) portYIELD(
  94:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
  96:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  97:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Critical section management. */
  98:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     extern void vPortEnterCritical( void );
  99:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     extern void vPortExitCritical( void );
 100:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 106:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 107:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 108:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 109:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * (which build with all the ports) will build. */
 112:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 114:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 115:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 116:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Tickless idle/low power functionality. */
 117:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
 121:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 122:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 123:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Architecture specific optimisations. */
 124:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
 127:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 128:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 130:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Generic helper function. */
 131:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         {
 133:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             uint8_t ucReturn;
 134:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 135:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 137:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             return ucReturn;
 138:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         }
 139:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 140:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Check the configuration. */
 141:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #endif
 144:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 145:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 149:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 150:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 151:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 153:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 155:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 156:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 157:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifdef configASSERT
 158:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
 161:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 162:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* portNOP() is not required by this port. */
 163:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portNOP()
 164:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 165:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portINLINE              __inline
 166:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 167:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifndef portFORCE_INLINE
 168:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
 170:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 171:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {
 173:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         uint32_t ulCurrentInterrupt;
 174:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         BaseType_t xReturn;
 175:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 176:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 177:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 178:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 179:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         if( ulCurrentInterrupt == 0 )
 180:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         {
 181:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             xReturn = pdFALSE;
 182:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         }
 183:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         else
 184:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         {
 185:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             xReturn = pdTRUE;
 186:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         }
 187:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 188:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         return xReturn;
 189:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 190:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 191:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 192:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 193:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {
 195:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         uint32_t ulNewBASEPRI;
 196:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile
 170              	 .loc 2 197 0 discriminator 1
 171              	
 172 0014 4FF0FC03 	 mov r3,#252
 173 0018 83F31188 	 msr basepri,r3
 174 001c BFF36F8F 	 isb 
 175 0020 BFF34F8F 	 dsb 
 176              	
 177              	
 178              	 .thumb
 179 0024 FB60     	 str r3,[r7,#12]
 180              	.L7:
 181              	.LBE32:
 182              	.LBE31:
 183              	 .loc 1 233 0 discriminator 1
 184 0026 FEE7     	 b .L7
 185              	.L6:
 186              	.LBB33:
 187              	.LBB34:
 188              	 .loc 2 197 0
 189              	
 190 0028 4FF0FC03 	 mov r3,#252
 191 002c 83F31188 	 msr basepri,r3
 192 0030 BFF36F8F 	 isb 
 193 0034 BFF34F8F 	 dsb 
 194              	
 195              	
 196              	 .thumb
 197 0038 BB60     	 str r3,[r7,#8]
 198              	.LBE34:
 199              	.LBE33:
 234:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     portDISABLE_INTERRUPTS();
 235:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 236:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     while( ulDummy == 0 )
 200              	 .loc 1 236 0
 201 003a 00BF     	 nop
 202              	.L8:
 203              	 .loc 1 236 0 is_stmt 0 discriminator 1
 204 003c 7B68     	 ldr r3,[r7,#4]
 205 003e 002B     	 cmp r3,#0
 206 0040 FCD0     	 beq .L8
 237:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     {
 238:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         /* This file calls prvTaskExitError() after the scheduler has been
 239:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * started to remove a compiler warning about the function being defined
 240:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * but never called.  ulDummy is used purely to quieten other warnings
 241:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * about code appearing after this function is called - making ulDummy
 242:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * volatile makes the compiler think the function could return and
 243:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * therefore not output an 'unreachable code' warning for code that appears
 244:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * after it. */
 245:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     }
 246:../Dave/Generated/FREERTOS/portable/GCC/port.c **** }
 207              	 .loc 1 246 0 is_stmt 1
 208 0042 1437     	 adds r7,r7,#20
 209              	.LCFI9:
 210              	 .cfi_def_cfa_offset 4
 211 0044 BD46     	 mov sp,r7
 212              	.LCFI10:
 213              	 .cfi_def_cfa_register 13
 214              	 
 215 0046 5DF8047B 	 ldr r7,[sp],#4
 216              	.LCFI11:
 217              	 .cfi_restore 7
 218              	 .cfi_def_cfa_offset 0
 219 004a 7047     	 bx lr
 220              	.L10:
 221              	 .align 2
 222              	.L9:
 223 004c 00000000 	 .word uxCriticalNesting
 224              	 .cfi_endproc
 225              	.LFE139:
 227              	 .section .text.SVC_Handler,"ax",%progbits
 228              	 .align 2
 229              	 .global SVC_Handler
 230              	 .thumb
 231              	 .thumb_func
 233              	SVC_Handler:
 234              	.LFB140:
 247:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*-----------------------------------------------------------*/
 248:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 249:../Dave/Generated/FREERTOS/portable/GCC/port.c **** void vPortSVCHandler( void )
 250:../Dave/Generated/FREERTOS/portable/GCC/port.c **** {
 235              	 .loc 1 250 0
 236              	 .cfi_startproc
 237              	 
 238              	 
 239              	 
 251:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     __asm volatile (
 240              	 .loc 1 251 0
 241              	
 242 0000 074B     	 ldr r3,pxCurrentTCBConst2
 243 0002 1968     	 ldr r1,[r3]
 244 0004 0868     	 ldr r0,[r1]
 245 0006 B0E8F04F 	 ldmia r0!,{r4-r11,r14}
 246 000a 80F30988 	 msr psp,r0
 247 000e BFF36F8F 	 isb 
 248 0012 4FF00000 	 mov r0,#0
 249 0016 80F31188 	 msr basepri,r0
 250 001a 7047     	 bx r14
 251              	 
 252 001c AFF30080 	 .align 4
 253 0020 00000000 	pxCurrentTCBConst2:.word pxCurrentTCB
 254              	
 255              	
 252:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	ldr	r3, pxCurrentTCBConst2		\n"/* Restore the context. */
 253:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	ldr r1, [r3]					\n"/* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 254:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	ldr r0, [r1]					\n"/* The first item in pxCurrentTCB is the task top of stack. */
 255:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	ldmia r0!, {r4-r11, r14}		\n"/* Pop the registers that are not automatically saved on exc
 256:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	msr psp, r0						\n"/* Restore the task stack pointer. */
 257:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	isb								\n"
 258:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	mov r0, #0 						\n"
 259:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	msr	basepri, r0					\n"
 260:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	bx r14							\n"
 261:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "									\n"
 262:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	.align 4						\n"
 263:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 264:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         );
 265:../Dave/Generated/FREERTOS/portable/GCC/port.c **** }
 256              	 .loc 1 265 0
 257              	 .thumb
 258              	 .cfi_endproc
 259              	.LFE140:
 261 0024 AFF30080 	 .section .text.prvPortStartFirstTask,"ax",%progbits
 261      AFF30080 
 261      AFF30080 
 262              	 .align 2
 263              	 .thumb
 264              	 .thumb_func
 266              	prvPortStartFirstTask:
 267              	.LFB141:
 266:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*-----------------------------------------------------------*/
 267:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 268:../Dave/Generated/FREERTOS/portable/GCC/port.c **** static void prvPortStartFirstTask( void )
 269:../Dave/Generated/FREERTOS/portable/GCC/port.c **** {
 268              	 .loc 1 269 0
 269              	 .cfi_startproc
 270              	 
 271              	 
 272              	 
 270:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* Start the first task.  This also clears the bit that indicates the FPU is
 271:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * in use in case the FPU was used before the scheduler was started - which
 272:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * would otherwise result in the unnecessary leaving of space in the SVC stack
 273:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * for lazy saving of FPU registers. */
 274:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     __asm volatile (
 273              	 .loc 1 274 0
 274              	
 275 0000 0848     	 ldr r0,=0xE000ED08
 276 0002 0068     	 ldr r0,[r0]
 277 0004 0068     	 ldr r0,[r0]
 278 0006 80F30888 	 msr msp,r0
 279 000a 4FF00000 	 mov r0,#0
 280 000e 80F31488 	 msr control,r0
 281 0012 62B6     	 cpsie i
 282 0014 61B6     	 cpsie f
 283 0016 BFF34F8F 	 dsb 
 284 001a BFF36F8F 	 isb 
 285 001e 00DF     	 svc 0
 286 0020 00BF     	 nop 
 287 0022 000008ED 	 .ltorg 
 287      00E0
 288              	
 289              	
 275:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         " ldr r0, =0xE000ED08 	\n"/* Use the NVIC offset register to locate the stack. */
 276:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         " ldr r0, [r0] 			\n"
 277:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         " ldr r0, [r0] 			\n"
 278:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         " msr msp, r0			\n"/* Set the msp back to the start of the stack. */
 279:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         " mov r0, #0			\n"/* Clear the bit that indicates the FPU is in use, see comment above. */
 280:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         " msr control, r0		\n"
 281:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         " cpsie i				\n"/* Globally enable interrupts. */
 282:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         " cpsie f				\n"
 283:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         " dsb					\n"
 284:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         " isb					\n"
 285:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         " svc 0					\n"/* System call to start first task. */
 286:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         " nop					\n"
 287:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         " .ltorg				\n"
 288:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         );
 289:../Dave/Generated/FREERTOS/portable/GCC/port.c **** }
 290              	 .loc 1 289 0
 291              	 .thumb
 292              	 .cfi_endproc
 293              	.LFE141:
 295              	 .section .text.xPortStartScheduler,"ax",%progbits
 296              	 .align 2
 297              	 .global xPortStartScheduler
 298              	 .thumb
 299              	 .thumb_func
 301              	xPortStartScheduler:
 302              	.LFB142:
 290:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*-----------------------------------------------------------*/
 291:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 292:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*
 293:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * See header file for description.
 294:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  */
 295:../Dave/Generated/FREERTOS/portable/GCC/port.c **** BaseType_t xPortStartScheduler( void )
 296:../Dave/Generated/FREERTOS/portable/GCC/port.c **** {
 303              	 .loc 1 296 0
 304              	 .cfi_startproc
 305              	 
 306              	 
 307 0000 80B5     	 push {r7,lr}
 308              	.LCFI12:
 309              	 .cfi_def_cfa_offset 8
 310              	 .cfi_offset 7,-8
 311              	 .cfi_offset 14,-4
 312 0002 86B0     	 sub sp,sp,#24
 313              	.LCFI13:
 314              	 .cfi_def_cfa_offset 32
 315 0004 00AF     	 add r7,sp,#0
 316              	.LCFI14:
 317              	 .cfi_def_cfa_register 7
 297:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 298:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 299:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 300:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 301:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* This port can be used on all revisions of the Cortex-M7 core other than
 302:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * the r0p1 parts.  r0p1 parts should use the port from the
 303:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * /source/portable/GCC/ARM_CM7/r0p1 directory. */
 304:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 318              	 .loc 1 304 0
 319 0006 444B     	 ldr r3,.L23
 320 0008 1B68     	 ldr r3,[r3]
 321 000a 444A     	 ldr r2,.L23+4
 322 000c 9342     	 cmp r3,r2
 323 000e 09D1     	 bne .L14
 324              	.LBB35:
 325              	.LBB36:
 326              	 .loc 2 197 0 discriminator 1
 327              	
 328 0010 4FF0FC03 	 mov r3,#252
 329 0014 83F31188 	 msr basepri,r3
 330 0018 BFF36F8F 	 isb 
 331 001c BFF34F8F 	 dsb 
 332              	
 333              	
 334              	 .thumb
 335 0020 3B61     	 str r3,[r7,#16]
 336              	.L15:
 337              	.LBE36:
 338              	.LBE35:
 339              	 .loc 1 304 0 discriminator 2
 340 0022 FEE7     	 b .L15
 341              	.L14:
 305:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 342              	 .loc 1 305 0
 343 0024 3C4B     	 ldr r3,.L23
 344 0026 1B68     	 ldr r3,[r3]
 345 0028 3D4A     	 ldr r2,.L23+8
 346 002a 9342     	 cmp r3,r2
 347 002c 09D1     	 bne .L16
 348              	.LBB37:
 349              	.LBB38:
 350              	 .loc 2 197 0 discriminator 1
 351              	
 352 002e 4FF0FC03 	 mov r3,#252
 353 0032 83F31188 	 msr basepri,r3
 354 0036 BFF36F8F 	 isb 
 355 003a BFF34F8F 	 dsb 
 356              	
 357              	
 358              	 .thumb
 359 003e FB60     	 str r3,[r7,#12]
 360              	.L17:
 361              	.LBE38:
 362              	.LBE37:
 363              	 .loc 1 305 0 discriminator 3
 364 0040 FEE7     	 b .L17
 365              	.L16:
 366              	.LBB39:
 306:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 307:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     #if ( configASSERT_DEFINED == 1 )
 308:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         {
 309:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             volatile uint32_t ulOriginalPriority;
 310:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( 
 367              	 .loc 1 310 0
 368 0042 384B     	 ldr r3,.L23+12
 369 0044 7B61     	 str r3,[r7,#20]
 311:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             volatile uint8_t ucMaxPriorityValue;
 312:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 313:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Determine the maximum priority from which ISR safe FreeRTOS API
 314:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * functions can be called.  ISR safe functions are those that end in
 315:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 316:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * ensure interrupt entry is as fast and simple as possible.
 317:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              *
 318:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * Save the interrupt priority value that is about to be clobbered. */
 319:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             ulOriginalPriority = *pucFirstUserPriorityRegister;
 370              	 .loc 1 319 0
 371 0046 7B69     	 ldr r3,[r7,#20]
 372 0048 1B78     	 ldrb r3,[r3]
 373 004a DBB2     	 uxtb r3,r3
 374 004c 7B60     	 str r3,[r7,#4]
 320:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 321:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Determine the number of priority bits available.  First write to all
 322:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * possible bits. */
 323:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 375              	 .loc 1 323 0
 376 004e 7B69     	 ldr r3,[r7,#20]
 377 0050 FF22     	 movs r2,#255
 378 0052 1A70     	 strb r2,[r3]
 324:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 325:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Read the value back to see how many bits stuck. */
 326:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 379              	 .loc 1 326 0
 380 0054 7B69     	 ldr r3,[r7,#20]
 381 0056 1B78     	 ldrb r3,[r3]
 382 0058 DBB2     	 uxtb r3,r3
 383 005a FB70     	 strb r3,[r7,#3]
 327:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 328:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Use the same mask on the maximum system call priority. */
 329:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 384              	 .loc 1 329 0
 385 005c FB78     	 ldrb r3,[r7,#3]
 386 005e DBB2     	 uxtb r3,r3
 387 0060 23F00303 	 bic r3,r3,#3
 388 0064 DAB2     	 uxtb r2,r3
 389 0066 304B     	 ldr r3,.L23+16
 390 0068 1A70     	 strb r2,[r3]
 330:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 331:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Calculate the maximum acceptable priority group value for the number
 332:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * of bits read back. */
 333:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 391              	 .loc 1 333 0
 392 006a 304B     	 ldr r3,.L23+20
 393 006c 0722     	 movs r2,#7
 394 006e 1A60     	 str r2,[r3]
 334:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 335:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 395              	 .loc 1 335 0
 396 0070 09E0     	 b .L18
 397              	.L19:
 336:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             {
 337:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 ulMaxPRIGROUPValue--;
 398              	 .loc 1 337 0
 399 0072 2E4B     	 ldr r3,.L23+20
 400 0074 1B68     	 ldr r3,[r3]
 401 0076 013B     	 subs r3,r3,#1
 402 0078 2C4A     	 ldr r2,.L23+20
 403 007a 1360     	 str r3,[r2]
 338:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 404              	 .loc 1 338 0
 405 007c FB78     	 ldrb r3,[r7,#3]
 406 007e DBB2     	 uxtb r3,r3
 407 0080 5B00     	 lsls r3,r3,#1
 408 0082 DBB2     	 uxtb r3,r3
 409 0084 FB70     	 strb r3,[r7,#3]
 410              	.L18:
 335:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             {
 411              	 .loc 1 335 0
 412 0086 FB78     	 ldrb r3,[r7,#3]
 413 0088 DBB2     	 uxtb r3,r3
 414 008a DBB2     	 uxtb r3,r3
 415 008c 5BB2     	 sxtb r3,r3
 416 008e 002B     	 cmp r3,#0
 417 0090 EFDB     	 blt .L19
 339:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             }
 340:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 341:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             #ifdef __NVIC_PRIO_BITS
 342:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 {
 343:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                     /* Check the CMSIS configuration that defines the number of
 344:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                      * priority bits matches the number of priority bits actually queried
 345:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                      * from the hardware. */
 346:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                     configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BIT
 418              	 .loc 1 346 0
 419 0092 264B     	 ldr r3,.L23+20
 420 0094 1B68     	 ldr r3,[r3]
 421 0096 C3F10703 	 rsb r3,r3,#7
 422 009a 062B     	 cmp r3,#6
 423 009c 09D0     	 beq .L20
 424              	.LBB40:
 425              	.LBB41:
 426              	 .loc 2 197 0 discriminator 1
 427              	
 428 009e 4FF0FC03 	 mov r3,#252
 429 00a2 83F31188 	 msr basepri,r3
 430 00a6 BFF36F8F 	 isb 
 431 00aa BFF34F8F 	 dsb 
 432              	
 433              	
 434              	 .thumb
 435 00ae BB60     	 str r3,[r7,#8]
 436              	.L21:
 437              	.LBE41:
 438              	.LBE40:
 439              	 .loc 1 346 0 discriminator 4
 440 00b0 FEE7     	 b .L21
 441              	.L20:
 347:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 }
 348:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             #endif
 349:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 350:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             #ifdef configPRIO_BITS
 351:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 {
 352:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                     /* Check the FreeRTOS configuration that defines the number of
 353:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                      * priority bits matches the number of priority bits actually queried
 354:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                      * from the hardware. */
 355:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                     configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS
 356:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 }
 357:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             #endif
 358:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 359:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Shift the priority group value back to its position within the AIRCR
 360:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * register. */
 361:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 442              	 .loc 1 361 0
 443 00b2 1E4B     	 ldr r3,.L23+20
 444 00b4 1B68     	 ldr r3,[r3]
 445 00b6 1B02     	 lsls r3,r3,#8
 446 00b8 1C4A     	 ldr r2,.L23+20
 447 00ba 1360     	 str r3,[r2]
 362:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 448              	 .loc 1 362 0
 449 00bc 1B4B     	 ldr r3,.L23+20
 450 00be 1B68     	 ldr r3,[r3]
 451 00c0 03F4E063 	 and r3,r3,#1792
 452 00c4 194A     	 ldr r2,.L23+20
 453 00c6 1360     	 str r3,[r2]
 363:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 364:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Restore the clobbered interrupt priority register to its original
 365:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * value. */
 366:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             *pucFirstUserPriorityRegister = ulOriginalPriority;
 454              	 .loc 1 366 0
 455 00c8 7B68     	 ldr r3,[r7,#4]
 456 00ca DAB2     	 uxtb r2,r3
 457 00cc 7B69     	 ldr r3,[r7,#20]
 458 00ce 1A70     	 strb r2,[r3]
 459              	.LBE39:
 367:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         }
 368:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     #endif /* conifgASSERT_DEFINED */
 369:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 370:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* Make PendSV and SysTick the lowest priority interrupts. */
 371:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 460              	 .loc 1 371 0
 461 00d0 174A     	 ldr r2,.L23+24
 462 00d2 174B     	 ldr r3,.L23+24
 463 00d4 1B68     	 ldr r3,[r3]
 464 00d6 43F47C03 	 orr r3,r3,#16515072
 465 00da 1360     	 str r3,[r2]
 372:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 466              	 .loc 1 372 0
 467 00dc 144A     	 ldr r2,.L23+24
 468 00de 144B     	 ldr r3,.L23+24
 469 00e0 1B68     	 ldr r3,[r3]
 470 00e2 43F07C43 	 orr r3,r3,#-67108864
 471 00e6 1360     	 str r3,[r2]
 373:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 374:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* Start the timer that generates the tick ISR.  Interrupts are disabled
 375:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * here already. */
 376:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     vPortSetupTimerInterrupt();
 472              	 .loc 1 376 0
 473 00e8 FFF7FEFF 	 bl vPortSetupTimerInterrupt
 377:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 378:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* Initialise the critical nesting count ready for the first task. */
 379:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     uxCriticalNesting = 0;
 474              	 .loc 1 379 0
 475 00ec 114B     	 ldr r3,.L23+28
 476 00ee 0022     	 movs r2,#0
 477 00f0 1A60     	 str r2,[r3]
 380:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 381:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* Ensure the VFP is enabled - it should be anyway. */
 382:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     vPortEnableVFP();
 478              	 .loc 1 382 0
 479 00f2 FFF7FEFF 	 bl vPortEnableVFP
 383:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 384:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* Lazy save always. */
 385:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 480              	 .loc 1 385 0
 481 00f6 104A     	 ldr r2,.L23+32
 482 00f8 0F4B     	 ldr r3,.L23+32
 483 00fa 1B68     	 ldr r3,[r3]
 484 00fc 43F04043 	 orr r3,r3,#-1073741824
 485 0100 1360     	 str r3,[r2]
 386:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 387:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* Start the first task. */
 388:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     prvPortStartFirstTask();
 486              	 .loc 1 388 0
 487 0102 FFF7FEFF 	 bl prvPortStartFirstTask
 389:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 390:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* Should never get here as the tasks will now be executing!  Call the task
 391:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * exit error function to prevent compiler warnings about a static function
 392:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * not being called in the case that the application writer overrides this
 393:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * functionality by defining configTASK_RETURN_ADDRESS.  Call
 394:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * vTaskSwitchContext() so link time optimisation does not remove the
 395:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * symbol. */
 396:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     vTaskSwitchContext();
 488              	 .loc 1 396 0
 489 0106 FFF7FEFF 	 bl vTaskSwitchContext
 397:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     prvTaskExitError();
 490              	 .loc 1 397 0
 491 010a FFF7FEFF 	 bl prvTaskExitError
 398:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 399:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* Should not get here! */
 400:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     return 0;
 492              	 .loc 1 400 0
 493 010e 0023     	 movs r3,#0
 401:../Dave/Generated/FREERTOS/portable/GCC/port.c **** }
 494              	 .loc 1 401 0
 495 0110 1846     	 mov r0,r3
 496 0112 1837     	 adds r7,r7,#24
 497              	.LCFI15:
 498              	 .cfi_def_cfa_offset 8
 499 0114 BD46     	 mov sp,r7
 500              	.LCFI16:
 501              	 .cfi_def_cfa_register 13
 502              	 
 503 0116 80BD     	 pop {r7,pc}
 504              	.L24:
 505              	 .align 2
 506              	.L23:
 507 0118 00ED00E0 	 .word -536810240
 508 011c 71C20F41 	 .word 1091551857
 509 0120 70C20F41 	 .word 1091551856
 510 0124 00E400E0 	 .word -536812544
 511 0128 00000000 	 .word ucMaxSysCallPriority
 512 012c 00000000 	 .word ulMaxPRIGROUPValue
 513 0130 20ED00E0 	 .word -536810208
 514 0134 00000000 	 .word uxCriticalNesting
 515 0138 34EF00E0 	 .word -536809676
 516              	 .cfi_endproc
 517              	.LFE142:
 519              	 .section .text.vPortEndScheduler,"ax",%progbits
 520              	 .align 2
 521              	 .global vPortEndScheduler
 522              	 .thumb
 523              	 .thumb_func
 525              	vPortEndScheduler:
 526              	.LFB143:
 402:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*-----------------------------------------------------------*/
 403:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 404:../Dave/Generated/FREERTOS/portable/GCC/port.c **** void vPortEndScheduler( void )
 405:../Dave/Generated/FREERTOS/portable/GCC/port.c **** {
 527              	 .loc 1 405 0
 528              	 .cfi_startproc
 529              	 
 530              	 
 531              	 
 532 0000 80B4     	 push {r7}
 533              	.LCFI17:
 534              	 .cfi_def_cfa_offset 4
 535              	 .cfi_offset 7,-4
 536 0002 83B0     	 sub sp,sp,#12
 537              	.LCFI18:
 538              	 .cfi_def_cfa_offset 16
 539 0004 00AF     	 add r7,sp,#0
 540              	.LCFI19:
 541              	 .cfi_def_cfa_register 7
 406:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* Not implemented in ports where there is nothing to return to.
 407:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * Artificially force an assert. */
 408:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     configASSERT( uxCriticalNesting == 1000UL );
 542              	 .loc 1 408 0
 543 0006 0A4B     	 ldr r3,.L28
 544 0008 1B68     	 ldr r3,[r3]
 545 000a B3F57A7F 	 cmp r3,#1000
 546 000e 09D0     	 beq .L25
 547              	.LBB42:
 548              	.LBB43:
 549              	 .loc 2 197 0 discriminator 1
 550              	
 551 0010 4FF0FC03 	 mov r3,#252
 552 0014 83F31188 	 msr basepri,r3
 553 0018 BFF36F8F 	 isb 
 554 001c BFF34F8F 	 dsb 
 555              	
 556              	
 557              	 .thumb
 558 0020 7B60     	 str r3,[r7,#4]
 559              	.L27:
 560              	.LBE43:
 561              	.LBE42:
 562              	 .loc 1 408 0 discriminator 1
 563 0022 FEE7     	 b .L27
 564              	.L25:
 409:../Dave/Generated/FREERTOS/portable/GCC/port.c **** }
 565              	 .loc 1 409 0
 566 0024 0C37     	 adds r7,r7,#12
 567              	.LCFI20:
 568              	 .cfi_def_cfa_offset 4
 569 0026 BD46     	 mov sp,r7
 570              	.LCFI21:
 571              	 .cfi_def_cfa_register 13
 572              	 
 573 0028 5DF8047B 	 ldr r7,[sp],#4
 574              	.LCFI22:
 575              	 .cfi_restore 7
 576              	 .cfi_def_cfa_offset 0
 577 002c 7047     	 bx lr
 578              	.L29:
 579 002e 00BF     	 .align 2
 580              	.L28:
 581 0030 00000000 	 .word uxCriticalNesting
 582              	 .cfi_endproc
 583              	.LFE143:
 585              	 .section .text.vPortEnterCritical,"ax",%progbits
 586              	 .align 2
 587              	 .global vPortEnterCritical
 588              	 .thumb
 589              	 .thumb_func
 591              	vPortEnterCritical:
 592              	.LFB144:
 410:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*-----------------------------------------------------------*/
 411:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 412:../Dave/Generated/FREERTOS/portable/GCC/port.c **** void vPortEnterCritical( void )
 413:../Dave/Generated/FREERTOS/portable/GCC/port.c **** {
 593              	 .loc 1 413 0
 594              	 .cfi_startproc
 595              	 
 596              	 
 597              	 
 598 0000 80B4     	 push {r7}
 599              	.LCFI23:
 600              	 .cfi_def_cfa_offset 4
 601              	 .cfi_offset 7,-4
 602 0002 83B0     	 sub sp,sp,#12
 603              	.LCFI24:
 604              	 .cfi_def_cfa_offset 16
 605 0004 00AF     	 add r7,sp,#0
 606              	.LCFI25:
 607              	 .cfi_def_cfa_register 7
 608              	.LBB44:
 609              	.LBB45:
 610              	 .loc 2 197 0
 611              	
 612 0006 4FF0FC03 	 mov r3,#252
 613 000a 83F31188 	 msr basepri,r3
 614 000e BFF36F8F 	 isb 
 615 0012 BFF34F8F 	 dsb 
 616              	
 617              	
 618              	 .thumb
 619 0016 7B60     	 str r3,[r7,#4]
 620              	.LBE45:
 621              	.LBE44:
 414:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     portDISABLE_INTERRUPTS();
 415:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     uxCriticalNesting++;
 622              	 .loc 1 415 0
 623 0018 0E4B     	 ldr r3,.L33
 624 001a 1B68     	 ldr r3,[r3]
 625 001c 0133     	 adds r3,r3,#1
 626 001e 0D4A     	 ldr r2,.L33
 627 0020 1360     	 str r3,[r2]
 416:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 417:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* This is not the interrupt safe version of the enter critical function so
 418:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * assert() if it is being called from an interrupt context.  Only API
 419:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * functions that end in "FromISR" can be used in an interrupt.  Only assert if
 420:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * the critical nesting count is 1 to protect against recursive calls if the
 421:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * assert function also uses a critical section. */
 422:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     if( uxCriticalNesting == 1 )
 628              	 .loc 1 422 0
 629 0022 0C4B     	 ldr r3,.L33
 630 0024 1B68     	 ldr r3,[r3]
 631 0026 012B     	 cmp r3,#1
 632 0028 0ED1     	 bne .L30
 423:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     {
 424:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 633              	 .loc 1 424 0
 634 002a 0B4B     	 ldr r3,.L33+4
 635 002c 1B68     	 ldr r3,[r3]
 636 002e DBB2     	 uxtb r3,r3
 637 0030 002B     	 cmp r3,#0
 638 0032 09D0     	 beq .L30
 639              	.LBB46:
 640              	.LBB47:
 641              	 .loc 2 197 0 discriminator 1
 642              	
 643 0034 4FF0FC03 	 mov r3,#252
 644 0038 83F31188 	 msr basepri,r3
 645 003c BFF36F8F 	 isb 
 646 0040 BFF34F8F 	 dsb 
 647              	
 648              	
 649              	 .thumb
 650 0044 3B60     	 str r3,[r7]
 651              	.L32:
 652              	.LBE47:
 653              	.LBE46:
 654              	 .loc 1 424 0 discriminator 1
 655 0046 FEE7     	 b .L32
 656              	.L30:
 425:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     }
 426:../Dave/Generated/FREERTOS/portable/GCC/port.c **** }
 657              	 .loc 1 426 0
 658 0048 0C37     	 adds r7,r7,#12
 659              	.LCFI26:
 660              	 .cfi_def_cfa_offset 4
 661 004a BD46     	 mov sp,r7
 662              	.LCFI27:
 663              	 .cfi_def_cfa_register 13
 664              	 
 665 004c 5DF8047B 	 ldr r7,[sp],#4
 666              	.LCFI28:
 667              	 .cfi_restore 7
 668              	 .cfi_def_cfa_offset 0
 669 0050 7047     	 bx lr
 670              	.L34:
 671 0052 00BF     	 .align 2
 672              	.L33:
 673 0054 00000000 	 .word uxCriticalNesting
 674 0058 04ED00E0 	 .word -536810236
 675              	 .cfi_endproc
 676              	.LFE144:
 678              	 .section .text.vPortExitCritical,"ax",%progbits
 679              	 .align 2
 680              	 .global vPortExitCritical
 681              	 .thumb
 682              	 .thumb_func
 684              	vPortExitCritical:
 685              	.LFB145:
 427:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*-----------------------------------------------------------*/
 428:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 429:../Dave/Generated/FREERTOS/portable/GCC/port.c **** void vPortExitCritical( void )
 430:../Dave/Generated/FREERTOS/portable/GCC/port.c **** {
 686              	 .loc 1 430 0
 687              	 .cfi_startproc
 688              	 
 689              	 
 690              	 
 691 0000 80B4     	 push {r7}
 692              	.LCFI29:
 693              	 .cfi_def_cfa_offset 4
 694              	 .cfi_offset 7,-4
 695 0002 83B0     	 sub sp,sp,#12
 696              	.LCFI30:
 697              	 .cfi_def_cfa_offset 16
 698 0004 00AF     	 add r7,sp,#0
 699              	.LCFI31:
 700              	 .cfi_def_cfa_register 7
 431:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     configASSERT( uxCriticalNesting );
 701              	 .loc 1 431 0
 702 0006 104B     	 ldr r3,.L39
 703 0008 1B68     	 ldr r3,[r3]
 704 000a 002B     	 cmp r3,#0
 705 000c 09D1     	 bne .L36
 706              	.LBB48:
 707              	.LBB49:
 708              	 .loc 2 197 0 discriminator 1
 709              	
 710 000e 4FF0FC03 	 mov r3,#252
 711 0012 83F31188 	 msr basepri,r3
 712 0016 BFF36F8F 	 isb 
 713 001a BFF34F8F 	 dsb 
 714              	
 715              	
 716              	 .thumb
 717 001e 7B60     	 str r3,[r7,#4]
 718              	.L37:
 719              	.LBE49:
 720              	.LBE48:
 721              	 .loc 1 431 0 discriminator 1
 722 0020 FEE7     	 b .L37
 723              	.L36:
 432:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     uxCriticalNesting--;
 724              	 .loc 1 432 0
 725 0022 094B     	 ldr r3,.L39
 726 0024 1B68     	 ldr r3,[r3]
 727 0026 013B     	 subs r3,r3,#1
 728 0028 074A     	 ldr r2,.L39
 729 002a 1360     	 str r3,[r2]
 433:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 434:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     if( uxCriticalNesting == 0 )
 730              	 .loc 1 434 0
 731 002c 064B     	 ldr r3,.L39
 732 002e 1B68     	 ldr r3,[r3]
 733 0030 002B     	 cmp r3,#0
 734 0032 04D1     	 bne .L35
 735 0034 0023     	 movs r3,#0
 736 0036 3B60     	 str r3,[r7]
 737              	.LBB50:
 738              	.LBB51:
 198:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 199:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	mov %0, %1												\n"\
 200:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	msr basepri, %0											\n"\
 201:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	isb														\n"\
 202:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	dsb														\n"\
 203:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         );
 205:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 206:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 207:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 208:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 209:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {
 211:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 213:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile
 214:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 215:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	mrs %0, basepri											\n"\
 216:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	mov %1, %2												\n"\
 217:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	msr basepri, %1											\n"\
 218:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	isb														\n"\
 219:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	dsb														\n"\
 220:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 221:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         );
 222:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 223:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 224:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****          * warnings. */
 225:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         return ulOriginalBASEPRI;
 226:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 227:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 228:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 229:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {
 231:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile
 739              	 .loc 2 231 0
 740 0038 3B68     	 ldr r3,[r7]
 741              	
 742 003a 83F31188 	 msr basepri,r3
 743              	
 744              	 .thumb
 745              	.L35:
 746              	.LBE51:
 747              	.LBE50:
 435:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     {
 436:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         portENABLE_INTERRUPTS();
 437:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     }
 438:../Dave/Generated/FREERTOS/portable/GCC/port.c **** }
 748              	 .loc 1 438 0
 749 003e 0C37     	 adds r7,r7,#12
 750              	.LCFI32:
 751              	 .cfi_def_cfa_offset 4
 752 0040 BD46     	 mov sp,r7
 753              	.LCFI33:
 754              	 .cfi_def_cfa_register 13
 755              	 
 756 0042 5DF8047B 	 ldr r7,[sp],#4
 757              	.LCFI34:
 758              	 .cfi_restore 7
 759              	 .cfi_def_cfa_offset 0
 760 0046 7047     	 bx lr
 761              	.L40:
 762              	 .align 2
 763              	.L39:
 764 0048 00000000 	 .word uxCriticalNesting
 765              	 .cfi_endproc
 766              	.LFE145:
 768              	 .section .text.PendSV_Handler,"ax",%progbits
 769              	 .align 2
 770              	 .global PendSV_Handler
 771              	 .thumb
 772              	 .thumb_func
 774              	PendSV_Handler:
 775              	.LFB146:
 439:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*-----------------------------------------------------------*/
 440:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 441:../Dave/Generated/FREERTOS/portable/GCC/port.c **** void xPortPendSVHandler( void )
 442:../Dave/Generated/FREERTOS/portable/GCC/port.c **** {
 776              	 .loc 1 442 0
 777              	 .cfi_startproc
 778              	 
 779              	 
 780              	 
 443:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* This is a naked function. */
 444:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 445:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     __asm volatile
 781              	 .loc 1 445 0
 782              	
 783 0000 EFF30980 	 mrs r0,psp
 784 0004 BFF36F8F 	 isb 
 785              	 
 786 0008 154B     	 ldr r3,pxCurrentTCBConst
 787 000a 1A68     	 ldr r2,[r3]
 788              	 
 789 000c 1EF0100F 	 tst r14,#0x10
 790 0010 08BF     	 it eq
 791 0012 20ED108A 	 vstmdbeq r0!,{s16-s31}
 792              	 
 793 0016 20E9F04F 	 stmdb r0!,{r4-r11,r14}
 794 001a 1060     	 str r0,[r2]
 795              	 
 796 001c 2DE90900 	 stmdb sp!,{r0,r3}
 797 0020 4FF0FC00 	 mov r0,#252
 798 0024 80F31188 	 msr basepri,r0
 799 0028 BFF34F8F 	 dsb 
 800 002c BFF36F8F 	 isb 
 801 0030 FFF7FEFF 	 bl vTaskSwitchContext
 802 0034 4FF00000 	 mov r0,#0
 803 0038 80F31188 	 msr basepri,r0
 804 003c 09BC     	 ldmia sp!,{r0,r3}
 805              	 
 806 003e 1968     	 ldr r1,[r3]
 807 0040 0868     	 ldr r0,[r1]
 808              	 
 809 0042 B0E8F04F 	 ldmia r0!,{r4-r11,r14}
 810              	 
 811 0046 1EF0100F 	 tst r14,#0x10
 812 004a 08BF     	 it eq
 813 004c B0EC108A 	 vldmiaeq r0!,{s16-s31}
 814              	 
 815 0050 80F30988 	 msr psp,r0
 816 0054 BFF36F8F 	 isb 
 817              	 
 818              	 
 819 0058 7047     	 bx r14
 820              	 
 821 005a 00BFAFF3 	 .align 4
 821      0080
 822 0060 00000000 	pxCurrentTCBConst:.word pxCurrentTCB
 823              	
 824              	
 446:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     (
 447:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	mrs r0, psp							\n"
 448:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	isb									\n"
 449:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "										\n"
 450:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	ldr	r3, pxCurrentTCBConst			\n"/* Get the location of the current TCB. */
 451:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	ldr	r2, [r3]						\n"
 452:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "										\n"
 453:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	tst r14, #0x10						\n"/* Is the task using the FPU context?  If so, push high vfp regist
 454:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	it eq								\n"
 455:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	vstmdbeq r0!, {s16-s31}				\n"
 456:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "										\n"
 457:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	stmdb r0!, {r4-r11, r14}			\n"/* Save the core registers. */
 458:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	str r0, [r2]						\n"/* Save the new top of stack into the first member of the TCB. */
 459:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "										\n"
 460:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	stmdb sp!, {r0, r3}					\n"
 461:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	mov r0, %0 							\n"
 462:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	msr basepri, r0						\n"
 463:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	dsb									\n"
 464:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	isb									\n"
 465:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	bl vTaskSwitchContext				\n"
 466:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	mov r0, #0							\n"
 467:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	msr basepri, r0						\n"
 468:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	ldmia sp!, {r0, r3}					\n"
 469:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "										\n"
 470:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	ldr r1, [r3]						\n"/* The first item in pxCurrentTCB is the task top of stack. */
 471:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	ldr r0, [r1]						\n"
 472:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "										\n"
 473:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	ldmia r0!, {r4-r11, r14}			\n"/* Pop the core registers. */
 474:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "										\n"
 475:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	tst r14, #0x10						\n"/* Is the task using the FPU context?  If so, pop the high vfp reg
 476:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	it eq								\n"
 477:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	vldmiaeq r0!, {s16-s31}				\n"
 478:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "										\n"
 479:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	msr psp, r0							\n"
 480:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	isb									\n"
 481:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "										\n"
 482:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         #ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 483:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             #if WORKAROUND_PMU_CM001 == 1
 484:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 "			push { r14 }				\n"
 485:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 "			pop { pc }					\n"
 486:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             #endif
 487:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         #endif
 488:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "										\n"
 489:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	bx r14								\n"
 490:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "										\n"
 491:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	.align 4							\n"
 492:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "pxCurrentTCBConst: .word pxCurrentTCB	\n"
 493:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 494:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     );
 495:../Dave/Generated/FREERTOS/portable/GCC/port.c **** }
 825              	 .loc 1 495 0
 826              	 .thumb
 827              	 .cfi_endproc
 828              	.LFE146:
 830 0064 AFF30080 	 .section .text.SysTick_Handler,"ax",%progbits
 830      AFF30080 
 830      AFF30080 
 831              	 .align 2
 832              	 .global SysTick_Handler
 833              	 .thumb
 834              	 .thumb_func
 836              	SysTick_Handler:
 837              	.LFB147:
 496:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*-----------------------------------------------------------*/
 497:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 498:../Dave/Generated/FREERTOS/portable/GCC/port.c **** void xPortSysTickHandler( void )
 499:../Dave/Generated/FREERTOS/portable/GCC/port.c **** {
 838              	 .loc 1 499 0
 839              	 .cfi_startproc
 840              	 
 841              	 
 842 0000 80B5     	 push {r7,lr}
 843              	.LCFI35:
 844              	 .cfi_def_cfa_offset 8
 845              	 .cfi_offset 7,-8
 846              	 .cfi_offset 14,-4
 847 0002 82B0     	 sub sp,sp,#8
 848              	.LCFI36:
 849              	 .cfi_def_cfa_offset 16
 850 0004 00AF     	 add r7,sp,#0
 851              	.LCFI37:
 852              	 .cfi_def_cfa_register 7
 853              	.LBB52:
 854              	.LBB53:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 855              	 .loc 2 197 0
 856              	
 857 0006 4FF0FC03 	 mov r3,#252
 858 000a 83F31188 	 msr basepri,r3
 859 000e BFF36F8F 	 isb 
 860 0012 BFF34F8F 	 dsb 
 861              	
 862              	
 863              	 .thumb
 864 0016 7B60     	 str r3,[r7,#4]
 865              	.LBE53:
 866              	.LBE52:
 500:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* The SysTick runs at the lowest interrupt priority, so when this interrupt
 501:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * executes all interrupts must be unmasked.  There is therefore no need to
 502:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * save and then restore the interrupt mask value as its value is already
 503:../Dave/Generated/FREERTOS/portable/GCC/port.c ****      * known. */
 504:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     portDISABLE_INTERRUPTS();
 505:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     {
 506:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         /* Increment the RTOS tick. */
 507:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         if( xTaskIncrementTick() != pdFALSE )
 867              	 .loc 1 507 0
 868 0018 FFF7FEFF 	 bl xTaskIncrementTick
 869 001c 0346     	 mov r3,r0
 870 001e 002B     	 cmp r3,#0
 871 0020 03D0     	 beq .L43
 508:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         {
 509:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* A context switch is required.  Context switching is performed in
 510:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * the PendSV interrupt.  Pend the PendSV interrupt. */
 511:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 872              	 .loc 1 511 0
 873 0022 064B     	 ldr r3,.L44
 874 0024 4FF08052 	 mov r2,#268435456
 875 0028 1A60     	 str r2,[r3]
 876              	.L43:
 877 002a 0023     	 movs r3,#0
 878 002c 3B60     	 str r3,[r7]
 879              	.LBB54:
 880              	.LBB55:
 881              	 .loc 2 231 0
 882 002e 3B68     	 ldr r3,[r7]
 883              	
 884 0030 83F31188 	 msr basepri,r3
 885              	
 886              	 .thumb
 887              	.LBE55:
 888              	.LBE54:
 512:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         }
 513:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     }
 514:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     portENABLE_INTERRUPTS();
 515:../Dave/Generated/FREERTOS/portable/GCC/port.c **** }
 889              	 .loc 1 515 0
 890 0034 0837     	 adds r7,r7,#8
 891              	.LCFI38:
 892              	 .cfi_def_cfa_offset 8
 893 0036 BD46     	 mov sp,r7
 894              	.LCFI39:
 895              	 .cfi_def_cfa_register 13
 896              	 
 897 0038 80BD     	 pop {r7,pc}
 898              	.L45:
 899 003a 00BF     	 .align 2
 900              	.L44:
 901 003c 04ED00E0 	 .word -536810236
 902              	 .cfi_endproc
 903              	.LFE147:
 905              	 .section .text.vPortSetupTimerInterrupt,"ax",%progbits
 906              	 .align 2
 907              	 .weak vPortSetupTimerInterrupt
 908              	 .thumb
 909              	 .thumb_func
 911              	vPortSetupTimerInterrupt:
 912              	.LFB148:
 516:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*-----------------------------------------------------------*/
 517:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 518:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 519:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 520:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 521:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     {
 522:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 523:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         TickType_t xModifiableIdleTime;
 524:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 525:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         /* Make sure the SysTick reload value does not overflow the counter. */
 526:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 527:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         {
 528:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 529:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         }
 530:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 531:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         /* Stop the SysTick momentarily.  The time the SysTick is stopped for
 532:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * is accounted for as best it can be, but using the tickless mode will
 533:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * inevitably result in some tiny drift of the time maintained by the
 534:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * kernel with respect to calendar time. */
 535:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 536:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 537:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         /* Calculate the reload value required to wait xExpectedIdleTime
 538:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * tick periods.  -1 is used because this code will execute part way
 539:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * through one of the tick periods. */
 540:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpecte
 541:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 542:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         if( ulReloadValue > ulStoppedTimerCompensation )
 543:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         {
 544:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             ulReloadValue -= ulStoppedTimerCompensation;
 545:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         }
 546:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 547:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         /* Enter a critical section but don't use the taskENTER_CRITICAL()
 548:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * method as that will mask interrupts that should exit sleep mode. */
 549:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         __asm volatile ( "cpsid i" ::: "memory" );
 550:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         __asm volatile ( "dsb" );
 551:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         __asm volatile ( "isb" );
 552:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 553:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         /* If a context switch is pending or a task is waiting for the scheduler
 554:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * to be unsuspended then abandon the low power entry. */
 555:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 556:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         {
 557:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Restart from whatever is left in the count register to complete
 558:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * this tick period. */
 559:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 560:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 561:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Restart SysTick. */
 562:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 563:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 564:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Reset the reload register to the value required for normal tick
 565:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * periods. */
 566:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 567:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 568:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Re-enable interrupts - see comments above the cpsid instruction()
 569:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * above. */
 570:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 571:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         }
 572:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         else
 573:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         {
 574:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Set the new reload value. */
 575:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 576:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 577:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Clear the SysTick count flag and set the count value back to
 578:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * zero. */
 579:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 580:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 581:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Restart SysTick. */
 582:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 583:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 584:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 585:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * set its parameter to 0 to indicate that its implementation contains
 586:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * its own wait for interrupt or wait for event instruction, and so wfi
 587:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * should not be executed again.  However, the original expected idle
 588:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * time variable must remain unmodified, so a copy is taken. */
 589:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             xModifiableIdleTime = xExpectedIdleTime;
 590:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 591:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 592:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             if( xModifiableIdleTime > 0 )
 593:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             {
 594:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 __asm volatile ( "dsb" ::: "memory" );
 595:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 __asm volatile ( "wfi" );
 596:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 __asm volatile ( "isb" );
 597:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             }
 598:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 599:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 600:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 601:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Re-enable interrupts to allow the interrupt that brought the MCU
 602:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * out of sleep mode to execute immediately.  see comments above
 603:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * __disable_interrupt() call above. */
 604:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 605:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             __asm volatile ( "dsb" );
 606:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             __asm volatile ( "isb" );
 607:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 608:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Disable interrupts again because the clock is about to be stopped
 609:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * and interrupts that execute while the clock is stopped will increase
 610:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * any slippage between the time maintained by the RTOS and calendar
 611:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * time. */
 612:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             __asm volatile ( "cpsid i" ::: "memory" );
 613:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             __asm volatile ( "dsb" );
 614:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             __asm volatile ( "isb" );
 615:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 616:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Disable the SysTick clock without reading the
 617:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * portNVIC_SYSTICK_CTRL_REG register to ensure the
 618:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 619:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * the time the SysTick is stopped for is accounted for as best it can
 620:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * be, but using the tickless mode will inevitably result in some tiny
 621:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * drift of the time maintained by the kernel with respect to calendar
 622:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * time*/
 623:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 624:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 625:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Determine if the SysTick clock has already counted to zero and
 626:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * been set back to the current reload value (the reload back being
 627:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * correct for the entire expected idle time) or if the SysTick is yet
 628:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * to count to zero (in which case an interrupt other than the SysTick
 629:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * must have brought the system out of sleep mode). */
 630:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 631:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             {
 632:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 uint32_t ulCalculatedLoadValue;
 633:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 634:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 /* The tick interrupt is already pending, and the SysTick count
 635:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                  * reloaded with ulReloadValue.  Reset the
 636:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                  * portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 637:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                  * period. */
 638:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portN
 639:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 640:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 /* Don't allow a tiny value, or values that have somehow
 641:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                  * underflowed because the post sleep hook did something
 642:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                  * that took too long. */
 643:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadVal
 644:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 {
 645:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                     ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 646:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 }
 647:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 648:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 649:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 650:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 /* As the pending tick will be processed as soon as this
 651:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                  * function exits, the tick value maintained by the tick is stepped
 652:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                  * forward by one less than the time spent waiting. */
 653:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 654:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             }
 655:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             else
 656:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             {
 657:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 /* Something other than the tick interrupt ended the sleep.
 658:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                  * Work out how long the sleep lasted rounded to complete tick
 659:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                  * periods (not the ulReload value which accounted for part
 660:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                  * ticks). */
 661:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - po
 662:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 663:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 /* How many complete tick periods passed while the processor
 664:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                  * was waiting? */
 665:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 666:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 667:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 /* The reload value is set to whatever fraction of a single tick
 668:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                  * period remains. */
 669:../Dave/Generated/FREERTOS/portable/GCC/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOne
 670:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             }
 671:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 672:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 673:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 674:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * value. */
 675:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 676:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 677:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             vTaskStepTick( ulCompleteTickPeriods );
 678:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 679:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 680:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Exit with interrupts enabled. */
 681:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 682:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         }
 683:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     }
 684:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 685:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 686:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*-----------------------------------------------------------*/
 687:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 688:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*
 689:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 690:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  * frequency.
 691:../Dave/Generated/FREERTOS/portable/GCC/port.c ****  */
 692:../Dave/Generated/FREERTOS/portable/GCC/port.c **** __attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
 693:../Dave/Generated/FREERTOS/portable/GCC/port.c **** {
 913              	 .loc 1 693 0
 914              	 .cfi_startproc
 915              	 
 916              	 
 917              	 
 918 0000 80B4     	 push {r7}
 919              	.LCFI40:
 920              	 .cfi_def_cfa_offset 4
 921              	 .cfi_offset 7,-4
 922 0002 00AF     	 add r7,sp,#0
 923              	.LCFI41:
 924              	 .cfi_def_cfa_register 7
 694:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* Calculate the constants required to configure the tick interrupt. */
 695:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     #if ( configUSE_TICKLESS_IDLE == 1 )
 696:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         {
 697:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 698:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 699:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSY
 700:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         }
 701:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     #endif /* configUSE_TICKLESS_IDLE */
 702:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 703:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* Stop and clear the SysTick. */
 704:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     portNVIC_SYSTICK_CTRL_REG = 0UL;
 925              	 .loc 1 704 0
 926 0004 0A4B     	 ldr r3,.L47
 927 0006 0022     	 movs r2,#0
 928 0008 1A60     	 str r2,[r3]
 705:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 929              	 .loc 1 705 0
 930 000a 0A4B     	 ldr r3,.L47+4
 931 000c 0022     	 movs r2,#0
 932 000e 1A60     	 str r2,[r3]
 706:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 707:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     /* Configure SysTick to interrupt at the requested rate. */
 708:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 933              	 .loc 1 708 0
 934 0010 094A     	 ldr r2,.L47+8
 935 0012 0A4B     	 ldr r3,.L47+12
 936 0014 1B68     	 ldr r3,[r3]
 937 0016 0A49     	 ldr r1,.L47+16
 938 0018 A1FB0313 	 umull r1,r3,r1,r3
 939 001c 9B09     	 lsrs r3,r3,#6
 940 001e 013B     	 subs r3,r3,#1
 941 0020 1360     	 str r3,[r2]
 709:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SY
 942              	 .loc 1 709 0
 943 0022 034B     	 ldr r3,.L47
 944 0024 0722     	 movs r2,#7
 945 0026 1A60     	 str r2,[r3]
 710:../Dave/Generated/FREERTOS/portable/GCC/port.c **** }
 946              	 .loc 1 710 0
 947 0028 BD46     	 mov sp,r7
 948              	.LCFI42:
 949              	 .cfi_def_cfa_register 13
 950              	 
 951 002a 5DF8047B 	 ldr r7,[sp],#4
 952              	.LCFI43:
 953              	 .cfi_restore 7
 954              	 .cfi_def_cfa_offset 0
 955 002e 7047     	 bx lr
 956              	.L48:
 957              	 .align 2
 958              	.L47:
 959 0030 10E000E0 	 .word -536813552
 960 0034 18E000E0 	 .word -536813544
 961 0038 14E000E0 	 .word -536813548
 962 003c 00000000 	 .word SystemCoreClock
 963 0040 D34D6210 	 .word 274877907
 964              	 .cfi_endproc
 965              	.LFE148:
 967              	 .section .text.vPortEnableVFP,"ax",%progbits
 968              	 .align 2
 969              	 .thumb
 970              	 .thumb_func
 972              	vPortEnableVFP:
 973              	.LFB149:
 711:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*-----------------------------------------------------------*/
 712:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 713:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /* This is a naked function. */
 714:../Dave/Generated/FREERTOS/portable/GCC/port.c **** static void vPortEnableVFP( void )
 715:../Dave/Generated/FREERTOS/portable/GCC/port.c **** {
 974              	 .loc 1 715 0
 975              	 .cfi_startproc
 976              	 
 977              	 
 978              	 
 716:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     __asm volatile
 979              	 .loc 1 716 0
 980              	
 981 0000 DFF80C00 	 ldr.w r0,=0xE000ED88
 982 0004 0168     	 ldr r1,[r0]
 983              	 
 984 0006 41F47001 	 orr r1,r1,#(0xf<<20)
 985 000a 0160     	 str r1,[r0]
 986 000c 7047     	 bx r14
 987 000e 000088ED 	 .ltorg 
 987      00E0
 988              	
 989              	
 717:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     (
 718:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	ldr.w r0, =0xE000ED88		\n"/* The FPU enable bits are in the CPACR. */
 719:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	ldr r1, [r0]				\n"
 720:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "								\n"
 721:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
 722:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	str r1, [r0]				\n"
 723:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	bx r14						\n"
 724:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         "	.ltorg						\n"
 725:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     );
 726:../Dave/Generated/FREERTOS/portable/GCC/port.c **** }
 990              	 .loc 1 726 0
 991              	 .thumb
 992              	 .cfi_endproc
 993              	.LFE149:
 995              	 .section .text.vPortValidateInterruptPriority,"ax",%progbits
 996              	 .align 2
 997              	 .global vPortValidateInterruptPriority
 998              	 .thumb
 999              	 .thumb_func
 1001              	vPortValidateInterruptPriority:
 1002              	.LFB150:
 727:../Dave/Generated/FREERTOS/portable/GCC/port.c **** /*-----------------------------------------------------------*/
 728:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 729:../Dave/Generated/FREERTOS/portable/GCC/port.c **** #if ( configASSERT_DEFINED == 1 )
 730:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 731:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     void vPortValidateInterruptPriority( void )
 732:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     {
 1003              	 .loc 1 732 0
 1004              	 .cfi_startproc
 1005              	 
 1006              	 
 1007              	 
 1008 0000 80B4     	 push {r7}
 1009              	.LCFI44:
 1010              	 .cfi_def_cfa_offset 4
 1011              	 .cfi_offset 7,-4
 1012 0002 85B0     	 sub sp,sp,#20
 1013              	.LCFI45:
 1014              	 .cfi_def_cfa_offset 24
 1015 0004 00AF     	 add r7,sp,#0
 1016              	.LCFI46:
 1017              	 .cfi_def_cfa_register 7
 733:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         uint32_t ulCurrentInterrupt;
 734:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         uint8_t ucCurrentPriority;
 735:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 736:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         /* Obtain the number of the currently executing interrupt. */
 737:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 1018              	 .loc 1 737 0
 1019              	
 1020 0006 EFF30583 	 mrs r3,ipsr
 1021              	
 1022              	 .thumb
 1023 000a FB60     	 str r3,[r7,#12]
 738:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 739:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         /* Is the interrupt number a user defined interrupt? */
 740:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 1024              	 .loc 1 740 0
 1025 000c FB68     	 ldr r3,[r7,#12]
 1026 000e 0F2B     	 cmp r3,#15
 1027 0010 13D9     	 bls .L51
 741:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         {
 742:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* Look up the interrupt's priority. */
 743:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 1028              	 .loc 1 743 0
 1029 0012 154A     	 ldr r2,.L55
 1030 0014 FB68     	 ldr r3,[r7,#12]
 1031 0016 1344     	 add r3,r3,r2
 1032 0018 1B78     	 ldrb r3,[r3]
 1033 001a FB72     	 strb r3,[r7,#11]
 744:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 745:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             /* The following assertion will fail if a service routine (ISR) for
 746:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * an interrupt that has been assigned a priority above
 747:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 748:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * function.  ISR safe FreeRTOS API functions must *only* be called
 749:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * from interrupts that have been assigned a priority at or below
 750:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY.
 751:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              *
 752:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * Numerically low interrupt priority numbers represent logically high
 753:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * interrupt priorities, therefore the priority of the interrupt must
 754:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * be set to a value equal to or numerically *higher* than
 755:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY.
 756:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              *
 757:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * Interrupts that	use the FreeRTOS API must not be left at their
 758:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * default priority of	zero as that is the highest possible priority,
 759:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 760:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * and	therefore also guaranteed to be invalid.
 761:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              *
 762:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * FreeRTOS maintains separate thread and ISR API functions to ensure
 763:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * interrupt entry is as fast and simple as possible.
 764:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              *
 765:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * The following links provide detailed information:
 766:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
 767:../Dave/Generated/FREERTOS/portable/GCC/port.c ****              * https://www.FreeRTOS.org/FAQHelp.html */
 768:../Dave/Generated/FREERTOS/portable/GCC/port.c ****             configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 1034              	 .loc 1 768 0
 1035 001c 134B     	 ldr r3,.L55+4
 1036 001e 1B78     	 ldrb r3,[r3]
 1037 0020 FA7A     	 ldrb r2,[r7,#11]
 1038 0022 9A42     	 cmp r2,r3
 1039 0024 09D2     	 bcs .L51
 1040              	.LBB56:
 1041              	.LBB57:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 1042              	 .loc 2 197 0 discriminator 1
 1043              	
 1044 0026 4FF0FC03 	 mov r3,#252
 1045 002a 83F31188 	 msr basepri,r3
 1046 002e BFF36F8F 	 isb 
 1047 0032 BFF34F8F 	 dsb 
 1048              	
 1049              	
 1050              	 .thumb
 1051 0036 7B60     	 str r3,[r7,#4]
 1052              	.L52:
 1053              	.LBE57:
 1054              	.LBE56:
 1055              	 .loc 1 768 0 discriminator 1
 1056 0038 FEE7     	 b .L52
 1057              	.L51:
 769:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         }
 770:../Dave/Generated/FREERTOS/portable/GCC/port.c **** 
 771:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         /* Priority grouping:  The interrupt controller (NVIC) allows the bits
 772:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * that define each interrupt's priority to be split between bits that
 773:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * define the interrupt's pre-emption priority bits and bits that define
 774:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * the interrupt's sub-priority.  For simplicity all bits must be defined
 775:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * to be pre-emption priority bits.  The following assertion will fail if
 776:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * this is not the case (if some bits represent a sub-priority).
 777:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          *
 778:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * If the application only uses CMSIS libraries for interrupt
 779:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * configuration then the correct setting can be achieved on all Cortex-M
 780:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
 781:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * scheduler.  Note however that some vendor specific peripheral libraries
 782:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * assume a non-zero priority group setting, in which cases using a value
 783:../Dave/Generated/FREERTOS/portable/GCC/port.c ****          * of zero will result in unpredictable behaviour. */
 784:../Dave/Generated/FREERTOS/portable/GCC/port.c ****         configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 1058              	 .loc 1 784 0
 1059 003a 0D4B     	 ldr r3,.L55+8
 1060 003c 1B68     	 ldr r3,[r3]
 1061 003e 03F4E062 	 and r2,r3,#1792
 1062 0042 0C4B     	 ldr r3,.L55+12
 1063 0044 1B68     	 ldr r3,[r3]
 1064 0046 9A42     	 cmp r2,r3
 1065 0048 09D9     	 bls .L50
 1066              	.LBB58:
 1067              	.LBB59:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 1068              	 .loc 2 197 0 discriminator 1
 1069              	
 1070 004a 4FF0FC03 	 mov r3,#252
 1071 004e 83F31188 	 msr basepri,r3
 1072 0052 BFF36F8F 	 isb 
 1073 0056 BFF34F8F 	 dsb 
 1074              	
 1075              	
 1076              	 .thumb
 1077 005a 3B60     	 str r3,[r7]
 1078              	.L54:
 1079              	.LBE59:
 1080              	.LBE58:
 1081              	 .loc 1 784 0 discriminator 2
 1082 005c FEE7     	 b .L54
 1083              	.L50:
 785:../Dave/Generated/FREERTOS/portable/GCC/port.c ****     }
 1084              	 .loc 1 785 0
 1085 005e 1437     	 adds r7,r7,#20
 1086              	.LCFI47:
 1087              	 .cfi_def_cfa_offset 4
 1088 0060 BD46     	 mov sp,r7
 1089              	.LCFI48:
 1090              	 .cfi_def_cfa_register 13
 1091              	 
 1092 0062 5DF8047B 	 ldr r7,[sp],#4
 1093              	.LCFI49:
 1094              	 .cfi_restore 7
 1095              	 .cfi_def_cfa_offset 0
 1096 0066 7047     	 bx lr
 1097              	.L56:
 1098              	 .align 2
 1099              	.L55:
 1100 0068 F0E300E0 	 .word -536812560
 1101 006c 00000000 	 .word ucMaxSysCallPriority
 1102 0070 0CED00E0 	 .word -536810228
 1103 0074 00000000 	 .word ulMaxPRIGROUPValue
 1104              	 .cfi_endproc
 1105              	.LFE150:
 1107              	 .text
 1108              	.Letext0:
 1109              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1110              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1111              	 .file 5 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/projdefs.h"
 1112              	 .file 6 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Libraries/CMSIS/Include/cmsis_gcc.h"
 1113              	 .file 7 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Libraries/CMSIS/Include/core_cm4.h"
 1114              	 .file 8 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 port.c
    {standard input}:20     .data.uxCriticalNesting:00000000 $d
    {standard input}:23     .data.uxCriticalNesting:00000000 uxCriticalNesting
    {standard input}:28     .bss.ucMaxSysCallPriority:00000000 ucMaxSysCallPriority
    {standard input}:29     .bss.ucMaxSysCallPriority:00000000 $d
    {standard input}:31     .bss.ulMaxPRIGROUPValue:00000000 $d
    {standard input}:34     .bss.ulMaxPRIGROUPValue:00000000 ulMaxPRIGROUPValue
    {standard input}:37     .rodata.pcInterruptPriorityRegisters:00000000 $d
    {standard input}:40     .rodata.pcInterruptPriorityRegisters:00000000 pcInterruptPriorityRegisters
    {standard input}:43     .text.pxPortInitialiseStack:00000000 $t
    {standard input}:48     .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
    {standard input}:133    .text.pxPortInitialiseStack:00000064 $d
    {standard input}:142    .text.prvTaskExitError:00000000 prvTaskExitError
    {standard input}:138    .text.prvTaskExitError:00000000 $t
    {standard input}:223    .text.prvTaskExitError:0000004c $d
    {standard input}:228    .text.SVC_Handler:00000000 $t
    {standard input}:233    .text.SVC_Handler:00000000 SVC_Handler
    {standard input}:253    .text.SVC_Handler:00000020 pxCurrentTCBConst2
    {standard input}:253    .text.SVC_Handler:00000020 $d
    {standard input}:262    .text.prvPortStartFirstTask:00000000 $t
    {standard input}:266    .text.prvPortStartFirstTask:00000000 prvPortStartFirstTask
    {standard input}:287    .text.prvPortStartFirstTask:00000022 $d
    {standard input}:296    .text.xPortStartScheduler:00000000 $t
    {standard input}:301    .text.xPortStartScheduler:00000000 xPortStartScheduler
    {standard input}:911    .text.vPortSetupTimerInterrupt:00000000 vPortSetupTimerInterrupt
    {standard input}:972    .text.vPortEnableVFP:00000000 vPortEnableVFP
    {standard input}:507    .text.xPortStartScheduler:00000118 $d
    {standard input}:520    .text.vPortEndScheduler:00000000 $t
    {standard input}:525    .text.vPortEndScheduler:00000000 vPortEndScheduler
    {standard input}:581    .text.vPortEndScheduler:00000030 $d
    {standard input}:586    .text.vPortEnterCritical:00000000 $t
    {standard input}:591    .text.vPortEnterCritical:00000000 vPortEnterCritical
    {standard input}:673    .text.vPortEnterCritical:00000054 $d
    {standard input}:679    .text.vPortExitCritical:00000000 $t
    {standard input}:684    .text.vPortExitCritical:00000000 vPortExitCritical
    {standard input}:764    .text.vPortExitCritical:00000048 $d
    {standard input}:769    .text.PendSV_Handler:00000000 $t
    {standard input}:774    .text.PendSV_Handler:00000000 PendSV_Handler
    {standard input}:822    .text.PendSV_Handler:00000060 pxCurrentTCBConst
    {standard input}:822    .text.PendSV_Handler:00000060 $d
    {standard input}:831    .text.SysTick_Handler:00000000 $t
    {standard input}:836    .text.SysTick_Handler:00000000 SysTick_Handler
    {standard input}:901    .text.SysTick_Handler:0000003c $d
    {standard input}:906    .text.vPortSetupTimerInterrupt:00000000 $t
    {standard input}:959    .text.vPortSetupTimerInterrupt:00000030 $d
    {standard input}:968    .text.vPortEnableVFP:00000000 $t
    {standard input}:987    .text.vPortEnableVFP:0000000e $d
    {standard input}:996    .text.vPortValidateInterruptPriority:00000000 $t
    {standard input}:1001   .text.vPortValidateInterruptPriority:00000000 vPortValidateInterruptPriority
    {standard input}:1100   .text.vPortValidateInterruptPriority:00000068 $d
                     .debug_frame:00000010 $d
    {standard input}:261    .text.SVC_Handler:00000024 $t
    {standard input}:830    .text.PendSV_Handler:00000064 $t

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
SystemCoreClock
