   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "queue.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm xQueueRegistry,64,4
  20              	 .section .text.xQueueGenericReset,"ax",%progbits
  21              	 .align 2
  22              	 .global xQueueGenericReset
  23              	 .thumb
  24              	 .thumb_func
  26              	xQueueGenericReset:
  27              	.LFB138:
  28              	 .file 1 "../Dave/Generated/FREERTOS/queue.c"
   1:../Dave/Generated/FREERTOS/queue.c **** /*
   2:../Dave/Generated/FREERTOS/queue.c ****  * FreeRTOS Kernel V10.4.3
   3:../Dave/Generated/FREERTOS/queue.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/queue.c ****  *
   5:../Dave/Generated/FREERTOS/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/queue.c ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/queue.c ****  *
  12:../Dave/Generated/FREERTOS/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/queue.c ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/queue.c ****  *
  15:../Dave/Generated/FREERTOS/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/queue.c ****  *
  22:../Dave/Generated/FREERTOS/queue.c ****  * https://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/queue.c ****  * https://github.com/FreeRTOS
  24:../Dave/Generated/FREERTOS/queue.c ****  *
  25:../Dave/Generated/FREERTOS/queue.c ****  */
  26:../Dave/Generated/FREERTOS/queue.c **** 
  27:../Dave/Generated/FREERTOS/queue.c **** #include <stdlib.h>
  28:../Dave/Generated/FREERTOS/queue.c **** #include <string.h>
  29:../Dave/Generated/FREERTOS/queue.c **** 
  30:../Dave/Generated/FREERTOS/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  31:../Dave/Generated/FREERTOS/queue.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  32:../Dave/Generated/FREERTOS/queue.c ****  * task.h is included from an application file. */
  33:../Dave/Generated/FREERTOS/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  34:../Dave/Generated/FREERTOS/queue.c **** 
  35:../Dave/Generated/FREERTOS/queue.c **** #include "FreeRTOS.h"
  36:../Dave/Generated/FREERTOS/queue.c **** #include "task.h"
  37:../Dave/Generated/FREERTOS/queue.c **** #include "queue.h"
  38:../Dave/Generated/FREERTOS/queue.c **** 
  39:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  40:../Dave/Generated/FREERTOS/queue.c ****     #include "croutine.h"
  41:../Dave/Generated/FREERTOS/queue.c **** #endif
  42:../Dave/Generated/FREERTOS/queue.c **** 
  43:../Dave/Generated/FREERTOS/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:../Dave/Generated/FREERTOS/queue.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:../Dave/Generated/FREERTOS/queue.c ****  * for the header files above, but not in this file, in order to generate the
  46:../Dave/Generated/FREERTOS/queue.c ****  * correct privileged Vs unprivileged linkage and placement. */
  47:../Dave/Generated/FREERTOS/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:../Dave/Generated/FREERTOS/queue.c **** 
  49:../Dave/Generated/FREERTOS/queue.c **** 
  50:../Dave/Generated/FREERTOS/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  51:../Dave/Generated/FREERTOS/queue.c **** #define queueUNLOCKED             ( ( int8_t ) -1 )
  52:../Dave/Generated/FREERTOS/queue.c **** #define queueLOCKED_UNMODIFIED    ( ( int8_t ) 0 )
  53:../Dave/Generated/FREERTOS/queue.c **** #define queueINT8_MAX             ( ( int8_t ) 127 )
  54:../Dave/Generated/FREERTOS/queue.c **** 
  55:../Dave/Generated/FREERTOS/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:../Dave/Generated/FREERTOS/queue.c ****  * pcTail members are used as pointers into the queue storage area.  When the
  57:../Dave/Generated/FREERTOS/queue.c ****  * Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:../Dave/Generated/FREERTOS/queue.c ****  * not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:../Dave/Generated/FREERTOS/queue.c ****  * structure instead holds a pointer to the mutex holder (if any).  Map alternative
  60:../Dave/Generated/FREERTOS/queue.c ****  * names to the pcHead and structure member to ensure the readability of the code
  61:../Dave/Generated/FREERTOS/queue.c ****  * is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  62:../Dave/Generated/FREERTOS/queue.c ****  * a union as their usage is mutually exclusive dependent on what the queue is
  63:../Dave/Generated/FREERTOS/queue.c ****  * being used for. */
  64:../Dave/Generated/FREERTOS/queue.c **** #define uxQueueType               pcHead
  65:../Dave/Generated/FREERTOS/queue.c **** #define queueQUEUE_IS_MUTEX       NULL
  66:../Dave/Generated/FREERTOS/queue.c **** 
  67:../Dave/Generated/FREERTOS/queue.c **** typedef struct QueuePointers
  68:../Dave/Generated/FREERTOS/queue.c **** {
  69:../Dave/Generated/FREERTOS/queue.c ****     int8_t * pcTail;     /*< Points to the byte at the end of the queue storage area.  Once more by
  70:../Dave/Generated/FREERTOS/queue.c ****     int8_t * pcReadFrom; /*< Points to the last place that a queued item was read from when the str
  71:../Dave/Generated/FREERTOS/queue.c **** } QueuePointers_t;
  72:../Dave/Generated/FREERTOS/queue.c **** 
  73:../Dave/Generated/FREERTOS/queue.c **** typedef struct SemaphoreData
  74:../Dave/Generated/FREERTOS/queue.c **** {
  75:../Dave/Generated/FREERTOS/queue.c ****     TaskHandle_t xMutexHolder;        /*< The handle of the task that holds the mutex. */
  76:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxRecursiveCallCount; /*< Maintains a count of the number of times a recursive mute
  77:../Dave/Generated/FREERTOS/queue.c **** } SemaphoreData_t;
  78:../Dave/Generated/FREERTOS/queue.c **** 
  79:../Dave/Generated/FREERTOS/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  80:../Dave/Generated/FREERTOS/queue.c ****  * zero. */
  81:../Dave/Generated/FREERTOS/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH    ( ( UBaseType_t ) 0 )
  82:../Dave/Generated/FREERTOS/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME          ( ( TickType_t ) 0U )
  83:../Dave/Generated/FREERTOS/queue.c **** 
  84:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_PREEMPTION == 0 )
  85:../Dave/Generated/FREERTOS/queue.c **** 
  86:../Dave/Generated/FREERTOS/queue.c **** /* If the cooperative scheduler is being used then a yield should not be
  87:../Dave/Generated/FREERTOS/queue.c ****  * performed just because a higher priority task has been woken. */
  88:../Dave/Generated/FREERTOS/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()
  89:../Dave/Generated/FREERTOS/queue.c **** #else
  90:../Dave/Generated/FREERTOS/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  91:../Dave/Generated/FREERTOS/queue.c **** #endif
  92:../Dave/Generated/FREERTOS/queue.c **** 
  93:../Dave/Generated/FREERTOS/queue.c **** /*
  94:../Dave/Generated/FREERTOS/queue.c ****  * Definition of the queue used by the scheduler.
  95:../Dave/Generated/FREERTOS/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  96:../Dave/Generated/FREERTOS/queue.c ****  * rationale: https://www.FreeRTOS.org/Embedded-RTOS-Queues.html
  97:../Dave/Generated/FREERTOS/queue.c ****  */
  98:../Dave/Generated/FREERTOS/queue.c **** typedef struct QueueDefinition /* The old naming convention is used to prevent breaking kernel awar
  99:../Dave/Generated/FREERTOS/queue.c **** {
 100:../Dave/Generated/FREERTOS/queue.c ****     int8_t * pcHead;           /*< Points to the beginning of the queue storage area. */
 101:../Dave/Generated/FREERTOS/queue.c ****     int8_t * pcWriteTo;        /*< Points to the free next place in the storage area. */
 102:../Dave/Generated/FREERTOS/queue.c **** 
 103:../Dave/Generated/FREERTOS/queue.c ****     union
 104:../Dave/Generated/FREERTOS/queue.c ****     {
 105:../Dave/Generated/FREERTOS/queue.c ****         QueuePointers_t xQueue;     /*< Data required exclusively when this structure is used as a 
 106:../Dave/Generated/FREERTOS/queue.c ****         SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a 
 107:../Dave/Generated/FREERTOS/queue.c ****     } u;
 108:../Dave/Generated/FREERTOS/queue.c **** 
 109:../Dave/Generated/FREERTOS/queue.c ****     List_t xTasksWaitingToSend;             /*< List of tasks that are blocked waiting to post onto
 110:../Dave/Generated/FREERTOS/queue.c ****     List_t xTasksWaitingToReceive;          /*< List of tasks that are blocked waiting to read from
 111:../Dave/Generated/FREERTOS/queue.c **** 
 112:../Dave/Generated/FREERTOS/queue.c ****     volatile UBaseType_t uxMessagesWaiting; /*< The number of items currently in the queue. */
 113:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxLength;                   /*< The length of the queue defined as the number of it
 114:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxItemSize;                 /*< The size of each items that the queue will hold. */
 115:../Dave/Generated/FREERTOS/queue.c **** 
 116:../Dave/Generated/FREERTOS/queue.c ****     volatile int8_t cRxLock;                /*< Stores the number of items received from the queue 
 117:../Dave/Generated/FREERTOS/queue.c ****     volatile int8_t cTxLock;                /*< Stores the number of items transmitted to the queue
 118:../Dave/Generated/FREERTOS/queue.c **** 
 119:../Dave/Generated/FREERTOS/queue.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 120:../Dave/Generated/FREERTOS/queue.c ****         uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the memory used by the queue was static
 121:../Dave/Generated/FREERTOS/queue.c ****     #endif
 122:../Dave/Generated/FREERTOS/queue.c **** 
 123:../Dave/Generated/FREERTOS/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 124:../Dave/Generated/FREERTOS/queue.c ****         struct QueueDefinition * pxQueueSetContainer;
 125:../Dave/Generated/FREERTOS/queue.c ****     #endif
 126:../Dave/Generated/FREERTOS/queue.c **** 
 127:../Dave/Generated/FREERTOS/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 128:../Dave/Generated/FREERTOS/queue.c ****         UBaseType_t uxQueueNumber;
 129:../Dave/Generated/FREERTOS/queue.c ****         uint8_t ucQueueType;
 130:../Dave/Generated/FREERTOS/queue.c ****     #endif
 131:../Dave/Generated/FREERTOS/queue.c **** } xQUEUE;
 132:../Dave/Generated/FREERTOS/queue.c **** 
 133:../Dave/Generated/FREERTOS/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 134:../Dave/Generated/FREERTOS/queue.c ****  * name below to enable the use of older kernel aware debuggers. */
 135:../Dave/Generated/FREERTOS/queue.c **** typedef xQUEUE Queue_t;
 136:../Dave/Generated/FREERTOS/queue.c **** 
 137:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 138:../Dave/Generated/FREERTOS/queue.c **** 
 139:../Dave/Generated/FREERTOS/queue.c **** /*
 140:../Dave/Generated/FREERTOS/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 141:../Dave/Generated/FREERTOS/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 142:../Dave/Generated/FREERTOS/queue.c ****  */
 143:../Dave/Generated/FREERTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 144:../Dave/Generated/FREERTOS/queue.c **** 
 145:../Dave/Generated/FREERTOS/queue.c **** /* The type stored within the queue registry array.  This allows a name
 146:../Dave/Generated/FREERTOS/queue.c ****  * to be assigned to each queue making kernel aware debugging a little
 147:../Dave/Generated/FREERTOS/queue.c ****  * more user friendly. */
 148:../Dave/Generated/FREERTOS/queue.c ****     typedef struct QUEUE_REGISTRY_ITEM
 149:../Dave/Generated/FREERTOS/queue.c ****     {
 150:../Dave/Generated/FREERTOS/queue.c ****         const char * pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and s
 151:../Dave/Generated/FREERTOS/queue.c ****         QueueHandle_t xHandle;
 152:../Dave/Generated/FREERTOS/queue.c ****     } xQueueRegistryItem;
 153:../Dave/Generated/FREERTOS/queue.c **** 
 154:../Dave/Generated/FREERTOS/queue.c **** /* The old xQueueRegistryItem name is maintained above then typedefed to the
 155:../Dave/Generated/FREERTOS/queue.c ****  * new xQueueRegistryItem name below to enable the use of older kernel aware
 156:../Dave/Generated/FREERTOS/queue.c ****  * debuggers. */
 157:../Dave/Generated/FREERTOS/queue.c ****     typedef xQueueRegistryItem QueueRegistryItem_t;
 158:../Dave/Generated/FREERTOS/queue.c **** 
 159:../Dave/Generated/FREERTOS/queue.c **** /* The queue registry is simply an array of QueueRegistryItem_t structures.
 160:../Dave/Generated/FREERTOS/queue.c ****  * The pcQueueName member of a structure being NULL is indicative of the
 161:../Dave/Generated/FREERTOS/queue.c ****  * array position being vacant. */
 162:../Dave/Generated/FREERTOS/queue.c ****     PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 163:../Dave/Generated/FREERTOS/queue.c **** 
 164:../Dave/Generated/FREERTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 165:../Dave/Generated/FREERTOS/queue.c **** 
 166:../Dave/Generated/FREERTOS/queue.c **** /*
 167:../Dave/Generated/FREERTOS/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 168:../Dave/Generated/FREERTOS/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 169:../Dave/Generated/FREERTOS/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 170:../Dave/Generated/FREERTOS/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 171:../Dave/Generated/FREERTOS/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 172:../Dave/Generated/FREERTOS/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 173:../Dave/Generated/FREERTOS/queue.c ****  */
 174:../Dave/Generated/FREERTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 175:../Dave/Generated/FREERTOS/queue.c **** 
 176:../Dave/Generated/FREERTOS/queue.c **** /*
 177:../Dave/Generated/FREERTOS/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 178:../Dave/Generated/FREERTOS/queue.c ****  *
 179:../Dave/Generated/FREERTOS/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 180:../Dave/Generated/FREERTOS/queue.c ****  */
 181:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 182:../Dave/Generated/FREERTOS/queue.c **** 
 183:../Dave/Generated/FREERTOS/queue.c **** /*
 184:../Dave/Generated/FREERTOS/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 185:../Dave/Generated/FREERTOS/queue.c ****  *
 186:../Dave/Generated/FREERTOS/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 187:../Dave/Generated/FREERTOS/queue.c ****  */
 188:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 189:../Dave/Generated/FREERTOS/queue.c **** 
 190:../Dave/Generated/FREERTOS/queue.c **** /*
 191:../Dave/Generated/FREERTOS/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 192:../Dave/Generated/FREERTOS/queue.c ****  * back of the queue.
 193:../Dave/Generated/FREERTOS/queue.c ****  */
 194:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
 195:../Dave/Generated/FREERTOS/queue.c ****                                       const void * pvItemToQueue,
 196:../Dave/Generated/FREERTOS/queue.c ****                                       const BaseType_t xPosition ) PRIVILEGED_FUNCTION;
 197:../Dave/Generated/FREERTOS/queue.c **** 
 198:../Dave/Generated/FREERTOS/queue.c **** /*
 199:../Dave/Generated/FREERTOS/queue.c ****  * Copies an item out of a queue.
 200:../Dave/Generated/FREERTOS/queue.c ****  */
 201:../Dave/Generated/FREERTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
 202:../Dave/Generated/FREERTOS/queue.c ****                                   void * const pvBuffer ) PRIVILEGED_FUNCTION;
 203:../Dave/Generated/FREERTOS/queue.c **** 
 204:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 205:../Dave/Generated/FREERTOS/queue.c **** 
 206:../Dave/Generated/FREERTOS/queue.c **** /*
 207:../Dave/Generated/FREERTOS/queue.c ****  * Checks to see if a queue is a member of a queue set, and if so, notifies
 208:../Dave/Generated/FREERTOS/queue.c ****  * the queue set that the queue contains data.
 209:../Dave/Generated/FREERTOS/queue.c ****  */
 210:../Dave/Generated/FREERTOS/queue.c ****     static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTI
 211:../Dave/Generated/FREERTOS/queue.c **** #endif
 212:../Dave/Generated/FREERTOS/queue.c **** 
 213:../Dave/Generated/FREERTOS/queue.c **** /*
 214:../Dave/Generated/FREERTOS/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 215:../Dave/Generated/FREERTOS/queue.c ****  * dynamically to fill in the structure's members.
 216:../Dave/Generated/FREERTOS/queue.c ****  */
 217:../Dave/Generated/FREERTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 218:../Dave/Generated/FREERTOS/queue.c ****                                    const UBaseType_t uxItemSize,
 219:../Dave/Generated/FREERTOS/queue.c ****                                    uint8_t * pucQueueStorage,
 220:../Dave/Generated/FREERTOS/queue.c ****                                    const uint8_t ucQueueType,
 221:../Dave/Generated/FREERTOS/queue.c ****                                    Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 222:../Dave/Generated/FREERTOS/queue.c **** 
 223:../Dave/Generated/FREERTOS/queue.c **** /*
 224:../Dave/Generated/FREERTOS/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 225:../Dave/Generated/FREERTOS/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 226:../Dave/Generated/FREERTOS/queue.c ****  * as a mutex.
 227:../Dave/Generated/FREERTOS/queue.c ****  */
 228:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 229:../Dave/Generated/FREERTOS/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 230:../Dave/Generated/FREERTOS/queue.c **** #endif
 231:../Dave/Generated/FREERTOS/queue.c **** 
 232:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 233:../Dave/Generated/FREERTOS/queue.c **** 
 234:../Dave/Generated/FREERTOS/queue.c **** /*
 235:../Dave/Generated/FREERTOS/queue.c ****  * If a task waiting for a mutex causes the mutex holder to inherit a
 236:../Dave/Generated/FREERTOS/queue.c ****  * priority, but the waiting task times out, then the holder should
 237:../Dave/Generated/FREERTOS/queue.c ****  * disinherit the priority - but only down to the highest priority of any
 238:../Dave/Generated/FREERTOS/queue.c ****  * other tasks that are waiting for the same mutex.  This function returns
 239:../Dave/Generated/FREERTOS/queue.c ****  * that priority.
 240:../Dave/Generated/FREERTOS/queue.c ****  */
 241:../Dave/Generated/FREERTOS/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVIL
 242:../Dave/Generated/FREERTOS/queue.c **** #endif
 243:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 244:../Dave/Generated/FREERTOS/queue.c **** 
 245:../Dave/Generated/FREERTOS/queue.c **** /*
 246:../Dave/Generated/FREERTOS/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 247:../Dave/Generated/FREERTOS/queue.c ****  * accessing the queue event lists.
 248:../Dave/Generated/FREERTOS/queue.c ****  */
 249:../Dave/Generated/FREERTOS/queue.c **** #define prvLockQueue( pxQueue )                            \
 250:../Dave/Generated/FREERTOS/queue.c ****     taskENTER_CRITICAL();                                  \
 251:../Dave/Generated/FREERTOS/queue.c ****     {                                                      \
 252:../Dave/Generated/FREERTOS/queue.c ****         if( ( pxQueue )->cRxLock == queueUNLOCKED )        \
 253:../Dave/Generated/FREERTOS/queue.c ****         {                                                  \
 254:../Dave/Generated/FREERTOS/queue.c ****             ( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED; \
 255:../Dave/Generated/FREERTOS/queue.c ****         }                                                  \
 256:../Dave/Generated/FREERTOS/queue.c ****         if( ( pxQueue )->cTxLock == queueUNLOCKED )        \
 257:../Dave/Generated/FREERTOS/queue.c ****         {                                                  \
 258:../Dave/Generated/FREERTOS/queue.c ****             ( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED; \
 259:../Dave/Generated/FREERTOS/queue.c ****         }                                                  \
 260:../Dave/Generated/FREERTOS/queue.c ****     }                                                      \
 261:../Dave/Generated/FREERTOS/queue.c ****     taskEXIT_CRITICAL()
 262:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 263:../Dave/Generated/FREERTOS/queue.c **** 
 264:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
 265:../Dave/Generated/FREERTOS/queue.c ****                                BaseType_t xNewQueue )
 266:../Dave/Generated/FREERTOS/queue.c **** {
  29              	 .loc 1 266 0
  30              	 .cfi_startproc
  31              	 
  32              	 
  33 0000 80B5     	 push {r7,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 8
  36              	 .cfi_offset 7,-8
  37              	 .cfi_offset 14,-4
  38 0002 84B0     	 sub sp,sp,#16
  39              	.LCFI1:
  40              	 .cfi_def_cfa_offset 24
  41 0004 00AF     	 add r7,sp,#0
  42              	.LCFI2:
  43              	 .cfi_def_cfa_register 7
  44 0006 7860     	 str r0,[r7,#4]
  45 0008 3960     	 str r1,[r7]
 267:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
  46              	 .loc 1 267 0
  47 000a 7B68     	 ldr r3,[r7,#4]
  48 000c FB60     	 str r3,[r7,#12]
 268:../Dave/Generated/FREERTOS/queue.c **** 
 269:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
  49              	 .loc 1 269 0
  50 000e FB68     	 ldr r3,[r7,#12]
  51 0010 002B     	 cmp r3,#0
  52 0012 09D1     	 bne .L2
  53              	.LBB121:
  54              	.LBB122:
  55              	 .file 2 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC/portmacro.h"
   1:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*
   2:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * FreeRTOS Kernel V10.4.3
   3:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
   5:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * subject to the following conditions:
  11:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  12:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * copies or substantial portions of the Software.
  14:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  15:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  22:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * https://www.FreeRTOS.org
  23:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * https://github.com/FreeRTOS
  24:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  25:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * 1 tab == 4 spaces!
  26:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  */
  27:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  28:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  29:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** #ifndef PORTMACRO_H
  30:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define PORTMACRO_H
  31:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  32:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifdef __cplusplus
  33:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         extern "C" {
  34:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
  35:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  36:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------
  37:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * Port specific definitions.
  38:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  39:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * given hardware and compiler.
  41:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  42:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * These settings should not be altered.
  43:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *-----------------------------------------------------------
  44:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  */
  45:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  46:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Type definitions. */
  47:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portCHAR          char
  48:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portFLOAT         float
  49:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portDOUBLE        double
  50:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portLONG          long
  51:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portSHORT         short
  52:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portBASE_TYPE     long
  54:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  55:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     typedef long             BaseType_t;
  57:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     typedef unsigned long    UBaseType_t;
  58:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  59:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         typedef uint16_t     TickType_t;
  61:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #else
  63:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         typedef uint32_t     TickType_t;
  64:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  66:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * not need to be guarded with a critical section. */
  68:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
  70:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
  71:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  72:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Architecture specifics. */
  73:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  74:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
  78:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  79:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Scheduler utilities. */
  80:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portYIELD()                                 \
  81:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {                                                   \
  82:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  83:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  84:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****                                                         \
  85:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
  90:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  91:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    if( xSwitchRequired != pdFALSE ) portYIELD(
  94:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
  96:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  97:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Critical section management. */
  98:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     extern void vPortEnterCritical( void );
  99:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     extern void vPortExitCritical( void );
 100:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 106:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 107:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 108:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 109:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * (which build with all the ports) will build. */
 112:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 114:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 115:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 116:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Tickless idle/low power functionality. */
 117:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
 121:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 122:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 123:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Architecture specific optimisations. */
 124:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
 127:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 128:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 130:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Generic helper function. */
 131:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         {
 133:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             uint8_t ucReturn;
 134:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 135:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 137:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             return ucReturn;
 138:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         }
 139:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 140:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Check the configuration. */
 141:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #endif
 144:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 145:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 149:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 150:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 151:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 153:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 155:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 156:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 157:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifdef configASSERT
 158:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
 161:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 162:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* portNOP() is not required by this port. */
 163:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portNOP()
 164:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 165:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portINLINE              __inline
 166:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 167:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifndef portFORCE_INLINE
 168:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
 170:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 171:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {
 173:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         uint32_t ulCurrentInterrupt;
 174:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         BaseType_t xReturn;
 175:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 176:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 177:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 178:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 179:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         if( ulCurrentInterrupt == 0 )
 180:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         {
 181:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             xReturn = pdFALSE;
 182:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         }
 183:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         else
 184:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         {
 185:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             xReturn = pdTRUE;
 186:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         }
 187:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 188:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         return xReturn;
 189:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 190:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 191:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 192:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 193:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {
 195:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         uint32_t ulNewBASEPRI;
 196:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile
  56              	 .loc 2 197 0 discriminator 1
  57              	
  58 0014 4FF0FC03 	 mov r3,#252
  59 0018 83F31188 	 msr basepri,r3
  60 001c BFF36F8F 	 isb 
  61 0020 BFF34F8F 	 dsb 
  62              	
  63              	
  64              	 .thumb
  65 0024 BB60     	 str r3,[r7,#8]
  66              	.L3:
  67              	.LBE122:
  68              	.LBE121:
  69              	 .loc 1 269 0 discriminator 1
  70 0026 FEE7     	 b .L3
  71              	.L2:
 270:../Dave/Generated/FREERTOS/queue.c **** 
 271:../Dave/Generated/FREERTOS/queue.c ****     taskENTER_CRITICAL();
  72              	 .loc 1 271 0
  73 0028 FFF7FEFF 	 bl vPortEnterCritical
 272:../Dave/Generated/FREERTOS/queue.c ****     {
 273:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /
  74              	 .loc 1 273 0
  75 002c FB68     	 ldr r3,[r7,#12]
  76 002e 1A68     	 ldr r2,[r3]
  77 0030 FB68     	 ldr r3,[r7,#12]
  78 0032 DB6B     	 ldr r3,[r3,#60]
  79 0034 F968     	 ldr r1,[r7,#12]
  80 0036 096C     	 ldr r1,[r1,#64]
  81 0038 01FB03F3 	 mul r3,r1,r3
  82 003c 1A44     	 add r2,r2,r3
  83 003e FB68     	 ldr r3,[r7,#12]
  84 0040 9A60     	 str r2,[r3,#8]
 274:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  85              	 .loc 1 274 0
  86 0042 FB68     	 ldr r3,[r7,#12]
  87 0044 0022     	 movs r2,#0
  88 0046 9A63     	 str r2,[r3,#56]
 275:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->pcWriteTo = pxQueue->pcHead;
  89              	 .loc 1 275 0
  90 0048 FB68     	 ldr r3,[r7,#12]
  91 004a 1A68     	 ldr r2,[r3]
  92 004c FB68     	 ldr r3,[r7,#12]
  93 004e 5A60     	 str r2,[r3,#4]
 276:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->ux
  94              	 .loc 1 276 0
  95 0050 FB68     	 ldr r3,[r7,#12]
  96 0052 1A68     	 ldr r2,[r3]
  97 0054 FB68     	 ldr r3,[r7,#12]
  98 0056 DB6B     	 ldr r3,[r3,#60]
  99 0058 013B     	 subs r3,r3,#1
 100 005a F968     	 ldr r1,[r7,#12]
 101 005c 096C     	 ldr r1,[r1,#64]
 102 005e 01FB03F3 	 mul r3,r1,r3
 103 0062 1A44     	 add r2,r2,r3
 104 0064 FB68     	 ldr r3,[r7,#12]
 105 0066 DA60     	 str r2,[r3,#12]
 277:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
 106              	 .loc 1 277 0
 107 0068 FB68     	 ldr r3,[r7,#12]
 108 006a FF22     	 movs r2,#255
 109 006c 83F84420 	 strb r2,[r3,#68]
 278:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
 110              	 .loc 1 278 0
 111 0070 FB68     	 ldr r3,[r7,#12]
 112 0072 FF22     	 movs r2,#255
 113 0074 83F84520 	 strb r2,[r3,#69]
 279:../Dave/Generated/FREERTOS/queue.c **** 
 280:../Dave/Generated/FREERTOS/queue.c ****         if( xNewQueue == pdFALSE )
 114              	 .loc 1 280 0
 115 0078 3B68     	 ldr r3,[r7]
 116 007a 002B     	 cmp r3,#0
 117 007c 14D1     	 bne .L4
 281:../Dave/Generated/FREERTOS/queue.c ****         {
 282:../Dave/Generated/FREERTOS/queue.c ****             /* If there are tasks blocked waiting to read from the queue, then
 283:../Dave/Generated/FREERTOS/queue.c ****              * the tasks will remain blocked as after this function exits the queue
 284:../Dave/Generated/FREERTOS/queue.c ****              * will still be empty.  If there are tasks blocked waiting to write to
 285:../Dave/Generated/FREERTOS/queue.c ****              * the queue, then one should be unblocked as after this function exits
 286:../Dave/Generated/FREERTOS/queue.c ****              * it will be possible to write to it. */
 287:../Dave/Generated/FREERTOS/queue.c ****             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 118              	 .loc 1 287 0
 119 007e FB68     	 ldr r3,[r7,#12]
 120 0080 1B69     	 ldr r3,[r3,#16]
 121 0082 002B     	 cmp r3,#0
 122 0084 1AD0     	 beq .L5
 288:../Dave/Generated/FREERTOS/queue.c ****             {
 289:../Dave/Generated/FREERTOS/queue.c ****                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 123              	 .loc 1 289 0
 124 0086 FB68     	 ldr r3,[r7,#12]
 125 0088 1033     	 adds r3,r3,#16
 126 008a 1846     	 mov r0,r3
 127 008c FFF7FEFF 	 bl xTaskRemoveFromEventList
 128 0090 0346     	 mov r3,r0
 129 0092 002B     	 cmp r3,#0
 130 0094 12D0     	 beq .L5
 290:../Dave/Generated/FREERTOS/queue.c ****                 {
 291:../Dave/Generated/FREERTOS/queue.c ****                     queueYIELD_IF_USING_PREEMPTION();
 131              	 .loc 1 291 0
 132 0096 0D4B     	 ldr r3,.L7
 133 0098 4FF08052 	 mov r2,#268435456
 134 009c 1A60     	 str r2,[r3]
 135              	
 136 009e BFF34F8F 	 dsb
 137              	
 138              	
 139 00a2 BFF36F8F 	 isb
 140              	
 141              	 .thumb
 142 00a6 09E0     	 b .L5
 143              	.L4:
 292:../Dave/Generated/FREERTOS/queue.c ****                 }
 293:../Dave/Generated/FREERTOS/queue.c ****                 else
 294:../Dave/Generated/FREERTOS/queue.c ****                 {
 295:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 296:../Dave/Generated/FREERTOS/queue.c ****                 }
 297:../Dave/Generated/FREERTOS/queue.c ****             }
 298:../Dave/Generated/FREERTOS/queue.c ****             else
 299:../Dave/Generated/FREERTOS/queue.c ****             {
 300:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 301:../Dave/Generated/FREERTOS/queue.c ****             }
 302:../Dave/Generated/FREERTOS/queue.c ****         }
 303:../Dave/Generated/FREERTOS/queue.c ****         else
 304:../Dave/Generated/FREERTOS/queue.c ****         {
 305:../Dave/Generated/FREERTOS/queue.c ****             /* Ensure the event queues start in the correct state. */
 306:../Dave/Generated/FREERTOS/queue.c ****             vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 144              	 .loc 1 306 0
 145 00a8 FB68     	 ldr r3,[r7,#12]
 146 00aa 1033     	 adds r3,r3,#16
 147 00ac 1846     	 mov r0,r3
 148 00ae FFF7FEFF 	 bl vListInitialise
 307:../Dave/Generated/FREERTOS/queue.c ****             vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 149              	 .loc 1 307 0
 150 00b2 FB68     	 ldr r3,[r7,#12]
 151 00b4 2433     	 adds r3,r3,#36
 152 00b6 1846     	 mov r0,r3
 153 00b8 FFF7FEFF 	 bl vListInitialise
 154              	.L5:
 308:../Dave/Generated/FREERTOS/queue.c ****         }
 309:../Dave/Generated/FREERTOS/queue.c ****     }
 310:../Dave/Generated/FREERTOS/queue.c ****     taskEXIT_CRITICAL();
 155              	 .loc 1 310 0
 156 00bc FFF7FEFF 	 bl vPortExitCritical
 311:../Dave/Generated/FREERTOS/queue.c **** 
 312:../Dave/Generated/FREERTOS/queue.c ****     /* A value is returned for calling semantic consistency with previous
 313:../Dave/Generated/FREERTOS/queue.c ****      * versions. */
 314:../Dave/Generated/FREERTOS/queue.c ****     return pdPASS;
 157              	 .loc 1 314 0
 158 00c0 0123     	 movs r3,#1
 315:../Dave/Generated/FREERTOS/queue.c **** }
 159              	 .loc 1 315 0
 160 00c2 1846     	 mov r0,r3
 161 00c4 1037     	 adds r7,r7,#16
 162              	.LCFI3:
 163              	 .cfi_def_cfa_offset 8
 164 00c6 BD46     	 mov sp,r7
 165              	.LCFI4:
 166              	 .cfi_def_cfa_register 13
 167              	 
 168 00c8 80BD     	 pop {r7,pc}
 169              	.L8:
 170 00ca 00BF     	 .align 2
 171              	.L7:
 172 00cc 04ED00E0 	 .word -536810236
 173              	 .cfi_endproc
 174              	.LFE138:
 176              	 .section .text.xQueueGenericCreate,"ax",%progbits
 177              	 .align 2
 178              	 .global xQueueGenericCreate
 179              	 .thumb
 180              	 .thumb_func
 182              	xQueueGenericCreate:
 183              	.LFB139:
 316:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 317:../Dave/Generated/FREERTOS/queue.c **** 
 318:../Dave/Generated/FREERTOS/queue.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 319:../Dave/Generated/FREERTOS/queue.c **** 
 320:../Dave/Generated/FREERTOS/queue.c ****     QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
 321:../Dave/Generated/FREERTOS/queue.c ****                                              const UBaseType_t uxItemSize,
 322:../Dave/Generated/FREERTOS/queue.c ****                                              uint8_t * pucQueueStorage,
 323:../Dave/Generated/FREERTOS/queue.c ****                                              StaticQueue_t * pxStaticQueue,
 324:../Dave/Generated/FREERTOS/queue.c ****                                              const uint8_t ucQueueType )
 325:../Dave/Generated/FREERTOS/queue.c ****     {
 326:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * pxNewQueue;
 327:../Dave/Generated/FREERTOS/queue.c **** 
 328:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 329:../Dave/Generated/FREERTOS/queue.c **** 
 330:../Dave/Generated/FREERTOS/queue.c ****         /* The StaticQueue_t structure and the queue storage area must be
 331:../Dave/Generated/FREERTOS/queue.c ****          * supplied. */
 332:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( pxStaticQueue != NULL );
 333:../Dave/Generated/FREERTOS/queue.c **** 
 334:../Dave/Generated/FREERTOS/queue.c ****         /* A queue storage area should be provided if the item size is not 0, and
 335:../Dave/Generated/FREERTOS/queue.c ****          * should not be provided if the item size is 0. */
 336:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 337:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 338:../Dave/Generated/FREERTOS/queue.c **** 
 339:../Dave/Generated/FREERTOS/queue.c ****         #if ( configASSERT_DEFINED == 1 )
 340:../Dave/Generated/FREERTOS/queue.c ****             {
 341:../Dave/Generated/FREERTOS/queue.c ****                 /* Sanity check that the size of the structure used to declare a
 342:../Dave/Generated/FREERTOS/queue.c ****                  * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 343:../Dave/Generated/FREERTOS/queue.c ****                  * the real queue and semaphore structures. */
 344:../Dave/Generated/FREERTOS/queue.c ****                 volatile size_t xSize = sizeof( StaticQueue_t );
 345:../Dave/Generated/FREERTOS/queue.c ****                 configASSERT( xSize == sizeof( Queue_t ) );
 346:../Dave/Generated/FREERTOS/queue.c ****                 ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 347:../Dave/Generated/FREERTOS/queue.c ****             }
 348:../Dave/Generated/FREERTOS/queue.c ****         #endif /* configASSERT_DEFINED */
 349:../Dave/Generated/FREERTOS/queue.c **** 
 350:../Dave/Generated/FREERTOS/queue.c ****         /* The address of a statically allocated queue was passed in, use it.
 351:../Dave/Generated/FREERTOS/queue.c ****          * The address of a statically allocated storage area was also passed in
 352:../Dave/Generated/FREERTOS/queue.c ****          * but is already set. */
 353:../Dave/Generated/FREERTOS/queue.c ****         pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the str
 354:../Dave/Generated/FREERTOS/queue.c **** 
 355:../Dave/Generated/FREERTOS/queue.c ****         if( pxNewQueue != NULL )
 356:../Dave/Generated/FREERTOS/queue.c ****         {
 357:../Dave/Generated/FREERTOS/queue.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 358:../Dave/Generated/FREERTOS/queue.c ****                 {
 359:../Dave/Generated/FREERTOS/queue.c ****                     /* Queues can be allocated wither statically or dynamically, so
 360:../Dave/Generated/FREERTOS/queue.c ****                      * note this queue was allocated statically in case the queue is
 361:../Dave/Generated/FREERTOS/queue.c ****                      * later deleted. */
 362:../Dave/Generated/FREERTOS/queue.c ****                     pxNewQueue->ucStaticallyAllocated = pdTRUE;
 363:../Dave/Generated/FREERTOS/queue.c ****                 }
 364:../Dave/Generated/FREERTOS/queue.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 365:../Dave/Generated/FREERTOS/queue.c **** 
 366:../Dave/Generated/FREERTOS/queue.c ****             prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQu
 367:../Dave/Generated/FREERTOS/queue.c ****         }
 368:../Dave/Generated/FREERTOS/queue.c ****         else
 369:../Dave/Generated/FREERTOS/queue.c ****         {
 370:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_CREATE_FAILED( ucQueueType );
 371:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 372:../Dave/Generated/FREERTOS/queue.c ****         }
 373:../Dave/Generated/FREERTOS/queue.c **** 
 374:../Dave/Generated/FREERTOS/queue.c ****         return pxNewQueue;
 375:../Dave/Generated/FREERTOS/queue.c ****     }
 376:../Dave/Generated/FREERTOS/queue.c **** 
 377:../Dave/Generated/FREERTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 378:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 379:../Dave/Generated/FREERTOS/queue.c **** 
 380:../Dave/Generated/FREERTOS/queue.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 381:../Dave/Generated/FREERTOS/queue.c **** 
 382:../Dave/Generated/FREERTOS/queue.c ****     QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
 383:../Dave/Generated/FREERTOS/queue.c ****                                        const UBaseType_t uxItemSize,
 384:../Dave/Generated/FREERTOS/queue.c ****                                        const uint8_t ucQueueType )
 385:../Dave/Generated/FREERTOS/queue.c ****     {
 184              	 .loc 1 385 0
 185              	 .cfi_startproc
 186              	 
 187              	 
 188 0000 90B5     	 push {r4,r7,lr}
 189              	.LCFI5:
 190              	 .cfi_def_cfa_offset 12
 191              	 .cfi_offset 4,-12
 192              	 .cfi_offset 7,-8
 193              	 .cfi_offset 14,-4
 194 0002 8DB0     	 sub sp,sp,#52
 195              	.LCFI6:
 196              	 .cfi_def_cfa_offset 64
 197 0004 02AF     	 add r7,sp,#8
 198              	.LCFI7:
 199              	 .cfi_def_cfa 7,56
 200 0006 F860     	 str r0,[r7,#12]
 201 0008 B960     	 str r1,[r7,#8]
 202 000a 1346     	 mov r3,r2
 203 000c FB71     	 strb r3,[r7,#7]
 386:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * pxNewQueue;
 387:../Dave/Generated/FREERTOS/queue.c ****         size_t xQueueSizeInBytes;
 388:../Dave/Generated/FREERTOS/queue.c ****         uint8_t * pucQueueStorage;
 389:../Dave/Generated/FREERTOS/queue.c **** 
 390:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 204              	 .loc 1 390 0
 205 000e FB68     	 ldr r3,[r7,#12]
 206 0010 002B     	 cmp r3,#0
 207 0012 09D1     	 bne .L10
 208              	.LBB123:
 209              	.LBB124:
 210              	 .loc 2 197 0 discriminator 1
 211              	
 212 0014 4FF0FC03 	 mov r3,#252
 213 0018 83F31188 	 msr basepri,r3
 214 001c BFF36F8F 	 isb 
 215 0020 BFF34F8F 	 dsb 
 216              	
 217              	
 218              	 .thumb
 219 0024 BB61     	 str r3,[r7,#24]
 220              	.L11:
 221              	.LBE124:
 222              	.LBE123:
 223              	 .loc 1 390 0 discriminator 1
 224 0026 FEE7     	 b .L11
 225              	.L10:
 391:../Dave/Generated/FREERTOS/queue.c **** 
 392:../Dave/Generated/FREERTOS/queue.c ****         /* Allocate enough space to hold the maximum number of items that
 393:../Dave/Generated/FREERTOS/queue.c ****          * can be in the queue at any time.  It is valid for uxItemSize to be
 394:../Dave/Generated/FREERTOS/queue.c ****          * zero in the case the queue is used as a semaphore. */
 395:../Dave/Generated/FREERTOS/queue.c ****         xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception
 226              	 .loc 1 395 0
 227 0028 FB68     	 ldr r3,[r7,#12]
 228 002a BA68     	 ldr r2,[r7,#8]
 229 002c 02FB03F3 	 mul r3,r2,r3
 230 0030 7B62     	 str r3,[r7,#36]
 396:../Dave/Generated/FREERTOS/queue.c **** 
 397:../Dave/Generated/FREERTOS/queue.c ****         /* Check for multiplication overflow. */
 398:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) 
 231              	 .loc 1 398 0
 232 0032 BB68     	 ldr r3,[r7,#8]
 233 0034 002B     	 cmp r3,#0
 234 0036 06D0     	 beq .L12
 235              	 .loc 1 398 0 is_stmt 0 discriminator 2
 236 0038 7A6A     	 ldr r2,[r7,#36]
 237 003a BB68     	 ldr r3,[r7,#8]
 238 003c B2FBF3F2 	 udiv r2,r2,r3
 239 0040 FB68     	 ldr r3,[r7,#12]
 240 0042 9A42     	 cmp r2,r3
 241 0044 01D1     	 bne .L13
 242              	.L12:
 243              	 .loc 1 398 0 discriminator 3
 244 0046 0123     	 movs r3,#1
 245 0048 00E0     	 b .L14
 246              	.L13:
 247              	 .loc 1 398 0 discriminator 4
 248 004a 0023     	 movs r3,#0
 249              	.L14:
 250              	 .loc 1 398 0 discriminator 6
 251 004c 002B     	 cmp r3,#0
 252 004e 09D1     	 bne .L15
 253              	.LBB125:
 254              	.LBB126:
 255              	 .loc 2 197 0 is_stmt 1 discriminator 7
 256              	
 257 0050 4FF0FC03 	 mov r3,#252
 258 0054 83F31188 	 msr basepri,r3
 259 0058 BFF36F8F 	 isb 
 260 005c BFF34F8F 	 dsb 
 261              	
 262              	
 263              	 .thumb
 264 0060 7B61     	 str r3,[r7,#20]
 265              	.L16:
 266              	.LBE126:
 267              	.LBE125:
 268              	 .loc 1 398 0 discriminator 2
 269 0062 FEE7     	 b .L16
 270              	.L15:
 399:../Dave/Generated/FREERTOS/queue.c **** 
 400:../Dave/Generated/FREERTOS/queue.c ****         /* Check for addition overflow. */
 401:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 271              	 .loc 1 401 0
 272 0064 7B6A     	 ldr r3,[r7,#36]
 273 0066 03F15402 	 add r2,r3,#84
 274 006a 7B6A     	 ldr r3,[r7,#36]
 275 006c 9A42     	 cmp r2,r3
 276 006e 09D8     	 bhi .L17
 277              	.LBB127:
 278              	.LBB128:
 279              	 .loc 2 197 0 discriminator 1
 280              	
 281 0070 4FF0FC03 	 mov r3,#252
 282 0074 83F31188 	 msr basepri,r3
 283 0078 BFF36F8F 	 isb 
 284 007c BFF34F8F 	 dsb 
 285              	
 286              	
 287              	 .thumb
 288 0080 3B61     	 str r3,[r7,#16]
 289              	.L18:
 290              	.LBE128:
 291              	.LBE127:
 292              	 .loc 1 401 0 discriminator 3
 293 0082 FEE7     	 b .L18
 294              	.L17:
 402:../Dave/Generated/FREERTOS/queue.c **** 
 403:../Dave/Generated/FREERTOS/queue.c ****         /* Allocate the queue and storage area.  Justification for MISRA
 404:../Dave/Generated/FREERTOS/queue.c ****          * deviation as follows:  pvPortMalloc() always ensures returned memory
 405:../Dave/Generated/FREERTOS/queue.c ****          * blocks are aligned per the requirements of the MCU stack.  In this case
 406:../Dave/Generated/FREERTOS/queue.c ****          * pvPortMalloc() must return a pointer that is guaranteed to meet the
 407:../Dave/Generated/FREERTOS/queue.c ****          * alignment requirements of the Queue_t structure - which in this case
 408:../Dave/Generated/FREERTOS/queue.c ****          * is an int8_t *.  Therefore, whenever the stack alignment requirements
 409:../Dave/Generated/FREERTOS/queue.c ****          * are greater than or equal to the pointer to char requirements the cast
 410:../Dave/Generated/FREERTOS/queue.c ****          * is safe.  In other cases alignment requirements are not strict (one or
 411:../Dave/Generated/FREERTOS/queue.c ****          * two bytes). */
 412:../Dave/Generated/FREERTOS/queue.c ****         pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e
 295              	 .loc 1 412 0
 296 0084 7B6A     	 ldr r3,[r7,#36]
 297 0086 5433     	 adds r3,r3,#84
 298 0088 1846     	 mov r0,r3
 299 008a FFF7FEFF 	 bl pvPortMalloc
 300 008e 3862     	 str r0,[r7,#32]
 413:../Dave/Generated/FREERTOS/queue.c **** 
 414:../Dave/Generated/FREERTOS/queue.c ****         if( pxNewQueue != NULL )
 301              	 .loc 1 414 0
 302 0090 3B6A     	 ldr r3,[r7,#32]
 303 0092 002B     	 cmp r3,#0
 304 0094 0DD0     	 beq .L19
 415:../Dave/Generated/FREERTOS/queue.c ****         {
 416:../Dave/Generated/FREERTOS/queue.c ****             /* Jump past the queue structure to find the location of the queue
 417:../Dave/Generated/FREERTOS/queue.c ****              * storage area. */
 418:../Dave/Generated/FREERTOS/queue.c ****             pucQueueStorage = ( uint8_t * ) pxNewQueue;
 305              	 .loc 1 418 0
 306 0096 3B6A     	 ldr r3,[r7,#32]
 307 0098 FB61     	 str r3,[r7,#28]
 419:../Dave/Generated/FREERTOS/queue.c ****             pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char 
 308              	 .loc 1 419 0
 309 009a FB69     	 ldr r3,[r7,#28]
 310 009c 5433     	 adds r3,r3,#84
 311 009e FB61     	 str r3,[r7,#28]
 420:../Dave/Generated/FREERTOS/queue.c **** 
 421:../Dave/Generated/FREERTOS/queue.c ****             #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 422:../Dave/Generated/FREERTOS/queue.c ****                 {
 423:../Dave/Generated/FREERTOS/queue.c ****                     /* Queues can be created either statically or dynamically, so
 424:../Dave/Generated/FREERTOS/queue.c ****                      * note this task was created dynamically in case it is later
 425:../Dave/Generated/FREERTOS/queue.c ****                      * deleted. */
 426:../Dave/Generated/FREERTOS/queue.c ****                     pxNewQueue->ucStaticallyAllocated = pdFALSE;
 427:../Dave/Generated/FREERTOS/queue.c ****                 }
 428:../Dave/Generated/FREERTOS/queue.c ****             #endif /* configSUPPORT_STATIC_ALLOCATION */
 429:../Dave/Generated/FREERTOS/queue.c **** 
 430:../Dave/Generated/FREERTOS/queue.c ****             prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQu
 312              	 .loc 1 430 0
 313 00a0 FC79     	 ldrb r4,[r7,#7]
 314 00a2 3B6A     	 ldr r3,[r7,#32]
 315 00a4 0093     	 str r3,[sp]
 316 00a6 F868     	 ldr r0,[r7,#12]
 317 00a8 B968     	 ldr r1,[r7,#8]
 318 00aa FA69     	 ldr r2,[r7,#28]
 319 00ac 2346     	 mov r3,r4
 320 00ae FFF7FEFF 	 bl prvInitialiseNewQueue
 321              	.L19:
 431:../Dave/Generated/FREERTOS/queue.c ****         }
 432:../Dave/Generated/FREERTOS/queue.c ****         else
 433:../Dave/Generated/FREERTOS/queue.c ****         {
 434:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_CREATE_FAILED( ucQueueType );
 435:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 436:../Dave/Generated/FREERTOS/queue.c ****         }
 437:../Dave/Generated/FREERTOS/queue.c **** 
 438:../Dave/Generated/FREERTOS/queue.c ****         return pxNewQueue;
 322              	 .loc 1 438 0
 323 00b2 3B6A     	 ldr r3,[r7,#32]
 439:../Dave/Generated/FREERTOS/queue.c ****     }
 324              	 .loc 1 439 0
 325 00b4 1846     	 mov r0,r3
 326 00b6 2C37     	 adds r7,r7,#44
 327              	.LCFI8:
 328              	 .cfi_def_cfa_offset 12
 329 00b8 BD46     	 mov sp,r7
 330              	.LCFI9:
 331              	 .cfi_def_cfa_register 13
 332              	 
 333 00ba 90BD     	 pop {r4,r7,pc}
 334              	 .cfi_endproc
 335              	.LFE139:
 337              	 .section .text.prvInitialiseNewQueue,"ax",%progbits
 338              	 .align 2
 339              	 .thumb
 340              	 .thumb_func
 342              	prvInitialiseNewQueue:
 343              	.LFB140:
 440:../Dave/Generated/FREERTOS/queue.c **** 
 441:../Dave/Generated/FREERTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 442:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 443:../Dave/Generated/FREERTOS/queue.c **** 
 444:../Dave/Generated/FREERTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 445:../Dave/Generated/FREERTOS/queue.c ****                                    const UBaseType_t uxItemSize,
 446:../Dave/Generated/FREERTOS/queue.c ****                                    uint8_t * pucQueueStorage,
 447:../Dave/Generated/FREERTOS/queue.c ****                                    const uint8_t ucQueueType,
 448:../Dave/Generated/FREERTOS/queue.c ****                                    Queue_t * pxNewQueue )
 449:../Dave/Generated/FREERTOS/queue.c **** {
 344              	 .loc 1 449 0
 345              	 .cfi_startproc
 346              	 
 347              	 
 348 0000 80B5     	 push {r7,lr}
 349              	.LCFI10:
 350              	 .cfi_def_cfa_offset 8
 351              	 .cfi_offset 7,-8
 352              	 .cfi_offset 14,-4
 353 0002 84B0     	 sub sp,sp,#16
 354              	.LCFI11:
 355              	 .cfi_def_cfa_offset 24
 356 0004 00AF     	 add r7,sp,#0
 357              	.LCFI12:
 358              	 .cfi_def_cfa_register 7
 359 0006 F860     	 str r0,[r7,#12]
 360 0008 B960     	 str r1,[r7,#8]
 361 000a 7A60     	 str r2,[r7,#4]
 362 000c FB70     	 strb r3,[r7,#3]
 450:../Dave/Generated/FREERTOS/queue.c ****     /* Remove compiler warnings about unused parameters should
 451:../Dave/Generated/FREERTOS/queue.c ****      * configUSE_TRACE_FACILITY not be set to 1. */
 452:../Dave/Generated/FREERTOS/queue.c ****     ( void ) ucQueueType;
 453:../Dave/Generated/FREERTOS/queue.c **** 
 454:../Dave/Generated/FREERTOS/queue.c ****     if( uxItemSize == ( UBaseType_t ) 0 )
 363              	 .loc 1 454 0
 364 000e BB68     	 ldr r3,[r7,#8]
 365 0010 002B     	 cmp r3,#0
 366 0012 03D1     	 bne .L22
 455:../Dave/Generated/FREERTOS/queue.c ****     {
 456:../Dave/Generated/FREERTOS/queue.c ****         /* No RAM was allocated for the queue storage area, but PC head cannot
 457:../Dave/Generated/FREERTOS/queue.c ****          * be set to NULL because NULL is used as a key to say the queue is used as
 458:../Dave/Generated/FREERTOS/queue.c ****          * a mutex.  Therefore just set pcHead to point to the queue as a benign
 459:../Dave/Generated/FREERTOS/queue.c ****          * value that is known to be within the memory map. */
 460:../Dave/Generated/FREERTOS/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 367              	 .loc 1 460 0
 368 0014 BB69     	 ldr r3,[r7,#24]
 369 0016 BA69     	 ldr r2,[r7,#24]
 370 0018 1A60     	 str r2,[r3]
 371 001a 02E0     	 b .L23
 372              	.L22:
 461:../Dave/Generated/FREERTOS/queue.c ****     }
 462:../Dave/Generated/FREERTOS/queue.c ****     else
 463:../Dave/Generated/FREERTOS/queue.c ****     {
 464:../Dave/Generated/FREERTOS/queue.c ****         /* Set the head to the start of the queue storage area. */
 465:../Dave/Generated/FREERTOS/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 373              	 .loc 1 465 0
 374 001c BB69     	 ldr r3,[r7,#24]
 375 001e 7A68     	 ldr r2,[r7,#4]
 376 0020 1A60     	 str r2,[r3]
 377              	.L23:
 466:../Dave/Generated/FREERTOS/queue.c ****     }
 467:../Dave/Generated/FREERTOS/queue.c **** 
 468:../Dave/Generated/FREERTOS/queue.c ****     /* Initialise the queue members as described where the queue type is
 469:../Dave/Generated/FREERTOS/queue.c ****      * defined. */
 470:../Dave/Generated/FREERTOS/queue.c ****     pxNewQueue->uxLength = uxQueueLength;
 378              	 .loc 1 470 0
 379 0022 BB69     	 ldr r3,[r7,#24]
 380 0024 FA68     	 ldr r2,[r7,#12]
 381 0026 DA63     	 str r2,[r3,#60]
 471:../Dave/Generated/FREERTOS/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 382              	 .loc 1 471 0
 383 0028 BB69     	 ldr r3,[r7,#24]
 384 002a BA68     	 ldr r2,[r7,#8]
 385 002c 1A64     	 str r2,[r3,#64]
 472:../Dave/Generated/FREERTOS/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 386              	 .loc 1 472 0
 387 002e B869     	 ldr r0,[r7,#24]
 388 0030 0121     	 movs r1,#1
 389 0032 FFF7FEFF 	 bl xQueueGenericReset
 473:../Dave/Generated/FREERTOS/queue.c **** 
 474:../Dave/Generated/FREERTOS/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 475:../Dave/Generated/FREERTOS/queue.c ****         {
 476:../Dave/Generated/FREERTOS/queue.c ****             pxNewQueue->ucQueueType = ucQueueType;
 390              	 .loc 1 476 0
 391 0036 BB69     	 ldr r3,[r7,#24]
 392 0038 FA78     	 ldrb r2,[r7,#3]
 393 003a 83F85020 	 strb r2,[r3,#80]
 477:../Dave/Generated/FREERTOS/queue.c ****         }
 478:../Dave/Generated/FREERTOS/queue.c ****     #endif /* configUSE_TRACE_FACILITY */
 479:../Dave/Generated/FREERTOS/queue.c **** 
 480:../Dave/Generated/FREERTOS/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 481:../Dave/Generated/FREERTOS/queue.c ****         {
 482:../Dave/Generated/FREERTOS/queue.c ****             pxNewQueue->pxQueueSetContainer = NULL;
 394              	 .loc 1 482 0
 395 003e BB69     	 ldr r3,[r7,#24]
 396 0040 0022     	 movs r2,#0
 397 0042 9A64     	 str r2,[r3,#72]
 483:../Dave/Generated/FREERTOS/queue.c ****         }
 484:../Dave/Generated/FREERTOS/queue.c ****     #endif /* configUSE_QUEUE_SETS */
 485:../Dave/Generated/FREERTOS/queue.c **** 
 486:../Dave/Generated/FREERTOS/queue.c ****     traceQUEUE_CREATE( pxNewQueue );
 487:../Dave/Generated/FREERTOS/queue.c **** }
 398              	 .loc 1 487 0
 399 0044 1037     	 adds r7,r7,#16
 400              	.LCFI13:
 401              	 .cfi_def_cfa_offset 8
 402 0046 BD46     	 mov sp,r7
 403              	.LCFI14:
 404              	 .cfi_def_cfa_register 13
 405              	 
 406 0048 80BD     	 pop {r7,pc}
 407              	 .cfi_endproc
 408              	.LFE140:
 410 004a 00BF     	 .section .text.prvInitialiseMutex,"ax",%progbits
 411              	 .align 2
 412              	 .thumb
 413              	 .thumb_func
 415              	prvInitialiseMutex:
 416              	.LFB141:
 488:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 489:../Dave/Generated/FREERTOS/queue.c **** 
 490:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 491:../Dave/Generated/FREERTOS/queue.c **** 
 492:../Dave/Generated/FREERTOS/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue )
 493:../Dave/Generated/FREERTOS/queue.c ****     {
 417              	 .loc 1 493 0
 418              	 .cfi_startproc
 419              	 
 420              	 
 421 0000 80B5     	 push {r7,lr}
 422              	.LCFI15:
 423              	 .cfi_def_cfa_offset 8
 424              	 .cfi_offset 7,-8
 425              	 .cfi_offset 14,-4
 426 0002 82B0     	 sub sp,sp,#8
 427              	.LCFI16:
 428              	 .cfi_def_cfa_offset 16
 429 0004 00AF     	 add r7,sp,#0
 430              	.LCFI17:
 431              	 .cfi_def_cfa_register 7
 432 0006 7860     	 str r0,[r7,#4]
 494:../Dave/Generated/FREERTOS/queue.c ****         if( pxNewQueue != NULL )
 433              	 .loc 1 494 0
 434 0008 7B68     	 ldr r3,[r7,#4]
 435 000a 002B     	 cmp r3,#0
 436 000c 0ED0     	 beq .L24
 495:../Dave/Generated/FREERTOS/queue.c ****         {
 496:../Dave/Generated/FREERTOS/queue.c ****             /* The queue create function will set all the queue structure members
 497:../Dave/Generated/FREERTOS/queue.c ****             * correctly for a generic queue, but this function is creating a
 498:../Dave/Generated/FREERTOS/queue.c ****             * mutex.  Overwrite those members that need to be set differently -
 499:../Dave/Generated/FREERTOS/queue.c ****             * in particular the information required for priority inheritance. */
 500:../Dave/Generated/FREERTOS/queue.c ****             pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 437              	 .loc 1 500 0
 438 000e 7B68     	 ldr r3,[r7,#4]
 439 0010 0022     	 movs r2,#0
 440 0012 9A60     	 str r2,[r3,#8]
 501:../Dave/Generated/FREERTOS/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 441              	 .loc 1 501 0
 442 0014 7B68     	 ldr r3,[r7,#4]
 443 0016 0022     	 movs r2,#0
 444 0018 1A60     	 str r2,[r3]
 502:../Dave/Generated/FREERTOS/queue.c **** 
 503:../Dave/Generated/FREERTOS/queue.c ****             /* In case this is a recursive mutex. */
 504:../Dave/Generated/FREERTOS/queue.c ****             pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 445              	 .loc 1 504 0
 446 001a 7B68     	 ldr r3,[r7,#4]
 447 001c 0022     	 movs r2,#0
 448 001e DA60     	 str r2,[r3,#12]
 505:../Dave/Generated/FREERTOS/queue.c **** 
 506:../Dave/Generated/FREERTOS/queue.c ****             traceCREATE_MUTEX( pxNewQueue );
 507:../Dave/Generated/FREERTOS/queue.c **** 
 508:../Dave/Generated/FREERTOS/queue.c ****             /* Start with the semaphore in the expected state. */
 509:../Dave/Generated/FREERTOS/queue.c ****             ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 449              	 .loc 1 509 0
 450 0020 7868     	 ldr r0,[r7,#4]
 451 0022 0021     	 movs r1,#0
 452 0024 0022     	 movs r2,#0
 453 0026 0023     	 movs r3,#0
 454 0028 FFF7FEFF 	 bl xQueueGenericSend
 455              	.L24:
 510:../Dave/Generated/FREERTOS/queue.c ****         }
 511:../Dave/Generated/FREERTOS/queue.c ****         else
 512:../Dave/Generated/FREERTOS/queue.c ****         {
 513:../Dave/Generated/FREERTOS/queue.c ****             traceCREATE_MUTEX_FAILED();
 514:../Dave/Generated/FREERTOS/queue.c ****         }
 515:../Dave/Generated/FREERTOS/queue.c ****     }
 456              	 .loc 1 515 0
 457 002c 0837     	 adds r7,r7,#8
 458              	.LCFI18:
 459              	 .cfi_def_cfa_offset 8
 460 002e BD46     	 mov sp,r7
 461              	.LCFI19:
 462              	 .cfi_def_cfa_register 13
 463              	 
 464 0030 80BD     	 pop {r7,pc}
 465              	 .cfi_endproc
 466              	.LFE141:
 468 0032 00BF     	 .section .text.xQueueCreateMutex,"ax",%progbits
 469              	 .align 2
 470              	 .global xQueueCreateMutex
 471              	 .thumb
 472              	 .thumb_func
 474              	xQueueCreateMutex:
 475              	.LFB142:
 516:../Dave/Generated/FREERTOS/queue.c **** 
 517:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_MUTEXES */
 518:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 519:../Dave/Generated/FREERTOS/queue.c **** 
 520:../Dave/Generated/FREERTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 521:../Dave/Generated/FREERTOS/queue.c **** 
 522:../Dave/Generated/FREERTOS/queue.c ****     QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 523:../Dave/Generated/FREERTOS/queue.c ****     {
 476              	 .loc 1 523 0
 477              	 .cfi_startproc
 478              	 
 479              	 
 480 0000 80B5     	 push {r7,lr}
 481              	.LCFI20:
 482              	 .cfi_def_cfa_offset 8
 483              	 .cfi_offset 7,-8
 484              	 .cfi_offset 14,-4
 485 0002 86B0     	 sub sp,sp,#24
 486              	.LCFI21:
 487              	 .cfi_def_cfa_offset 32
 488 0004 00AF     	 add r7,sp,#0
 489              	.LCFI22:
 490              	 .cfi_def_cfa_register 7
 491 0006 0346     	 mov r3,r0
 492 0008 FB71     	 strb r3,[r7,#7]
 524:../Dave/Generated/FREERTOS/queue.c ****         QueueHandle_t xNewQueue;
 525:../Dave/Generated/FREERTOS/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 493              	 .loc 1 525 0
 494 000a 0123     	 movs r3,#1
 495 000c 7B61     	 str r3,[r7,#20]
 496 000e 0023     	 movs r3,#0
 497 0010 3B61     	 str r3,[r7,#16]
 526:../Dave/Generated/FREERTOS/queue.c **** 
 527:../Dave/Generated/FREERTOS/queue.c ****         xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 498              	 .loc 1 527 0
 499 0012 FB79     	 ldrb r3,[r7,#7]
 500 0014 7869     	 ldr r0,[r7,#20]
 501 0016 3969     	 ldr r1,[r7,#16]
 502 0018 1A46     	 mov r2,r3
 503 001a FFF7FEFF 	 bl xQueueGenericCreate
 504 001e F860     	 str r0,[r7,#12]
 528:../Dave/Generated/FREERTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 505              	 .loc 1 528 0
 506 0020 F868     	 ldr r0,[r7,#12]
 507 0022 FFF7FEFF 	 bl prvInitialiseMutex
 529:../Dave/Generated/FREERTOS/queue.c **** 
 530:../Dave/Generated/FREERTOS/queue.c ****         return xNewQueue;
 508              	 .loc 1 530 0
 509 0026 FB68     	 ldr r3,[r7,#12]
 531:../Dave/Generated/FREERTOS/queue.c ****     }
 510              	 .loc 1 531 0
 511 0028 1846     	 mov r0,r3
 512 002a 1837     	 adds r7,r7,#24
 513              	.LCFI23:
 514              	 .cfi_def_cfa_offset 8
 515 002c BD46     	 mov sp,r7
 516              	.LCFI24:
 517              	 .cfi_def_cfa_register 13
 518              	 
 519 002e 80BD     	 pop {r7,pc}
 520              	 .cfi_endproc
 521              	.LFE142:
 523              	 .section .text.xQueueGetMutexHolder,"ax",%progbits
 524              	 .align 2
 525              	 .global xQueueGetMutexHolder
 526              	 .thumb
 527              	 .thumb_func
 529              	xQueueGetMutexHolder:
 530              	.LFB143:
 532:../Dave/Generated/FREERTOS/queue.c **** 
 533:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_MUTEXES */
 534:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 535:../Dave/Generated/FREERTOS/queue.c **** 
 536:../Dave/Generated/FREERTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 537:../Dave/Generated/FREERTOS/queue.c **** 
 538:../Dave/Generated/FREERTOS/queue.c ****     QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
 539:../Dave/Generated/FREERTOS/queue.c ****                                            StaticQueue_t * pxStaticQueue )
 540:../Dave/Generated/FREERTOS/queue.c ****     {
 541:../Dave/Generated/FREERTOS/queue.c ****         QueueHandle_t xNewQueue;
 542:../Dave/Generated/FREERTOS/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 543:../Dave/Generated/FREERTOS/queue.c **** 
 544:../Dave/Generated/FREERTOS/queue.c ****         /* Prevent compiler warnings about unused parameters if
 545:../Dave/Generated/FREERTOS/queue.c ****          * configUSE_TRACE_FACILITY does not equal 1. */
 546:../Dave/Generated/FREERTOS/queue.c ****         ( void ) ucQueueType;
 547:../Dave/Generated/FREERTOS/queue.c **** 
 548:../Dave/Generated/FREERTOS/queue.c ****         xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQ
 549:../Dave/Generated/FREERTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 550:../Dave/Generated/FREERTOS/queue.c **** 
 551:../Dave/Generated/FREERTOS/queue.c ****         return xNewQueue;
 552:../Dave/Generated/FREERTOS/queue.c ****     }
 553:../Dave/Generated/FREERTOS/queue.c **** 
 554:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_MUTEXES */
 555:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 556:../Dave/Generated/FREERTOS/queue.c **** 
 557:../Dave/Generated/FREERTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 558:../Dave/Generated/FREERTOS/queue.c **** 
 559:../Dave/Generated/FREERTOS/queue.c ****     TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 560:../Dave/Generated/FREERTOS/queue.c ****     {
 531              	 .loc 1 560 0
 532              	 .cfi_startproc
 533              	 
 534              	 
 535 0000 80B5     	 push {r7,lr}
 536              	.LCFI25:
 537              	 .cfi_def_cfa_offset 8
 538              	 .cfi_offset 7,-8
 539              	 .cfi_offset 14,-4
 540 0002 84B0     	 sub sp,sp,#16
 541              	.LCFI26:
 542              	 .cfi_def_cfa_offset 24
 543 0004 00AF     	 add r7,sp,#0
 544              	.LCFI27:
 545              	 .cfi_def_cfa_register 7
 546 0006 7860     	 str r0,[r7,#4]
 561:../Dave/Generated/FREERTOS/queue.c ****         TaskHandle_t pxReturn;
 562:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 547              	 .loc 1 562 0
 548 0008 7B68     	 ldr r3,[r7,#4]
 549 000a BB60     	 str r3,[r7,#8]
 563:../Dave/Generated/FREERTOS/queue.c **** 
 564:../Dave/Generated/FREERTOS/queue.c ****         /* This function is called by xSemaphoreGetMutexHolder(), and should not
 565:../Dave/Generated/FREERTOS/queue.c ****          * be called directly.  Note:  This is a good way of determining if the
 566:../Dave/Generated/FREERTOS/queue.c ****          * calling task is the mutex holder, but not a good way of determining the
 567:../Dave/Generated/FREERTOS/queue.c ****          * identity of the mutex holder, as the holder may change between the
 568:../Dave/Generated/FREERTOS/queue.c ****          * following critical section exiting and the function returning. */
 569:../Dave/Generated/FREERTOS/queue.c ****         taskENTER_CRITICAL();
 550              	 .loc 1 569 0
 551 000c FFF7FEFF 	 bl vPortEnterCritical
 570:../Dave/Generated/FREERTOS/queue.c ****         {
 571:../Dave/Generated/FREERTOS/queue.c ****             if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 552              	 .loc 1 571 0
 553 0010 BB68     	 ldr r3,[r7,#8]
 554 0012 1B68     	 ldr r3,[r3]
 555 0014 002B     	 cmp r3,#0
 556 0016 03D1     	 bne .L29
 572:../Dave/Generated/FREERTOS/queue.c ****             {
 573:../Dave/Generated/FREERTOS/queue.c ****                 pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 557              	 .loc 1 573 0
 558 0018 BB68     	 ldr r3,[r7,#8]
 559 001a 9B68     	 ldr r3,[r3,#8]
 560 001c FB60     	 str r3,[r7,#12]
 561 001e 01E0     	 b .L30
 562              	.L29:
 574:../Dave/Generated/FREERTOS/queue.c ****             }
 575:../Dave/Generated/FREERTOS/queue.c ****             else
 576:../Dave/Generated/FREERTOS/queue.c ****             {
 577:../Dave/Generated/FREERTOS/queue.c ****                 pxReturn = NULL;
 563              	 .loc 1 577 0
 564 0020 0023     	 movs r3,#0
 565 0022 FB60     	 str r3,[r7,#12]
 566              	.L30:
 578:../Dave/Generated/FREERTOS/queue.c ****             }
 579:../Dave/Generated/FREERTOS/queue.c ****         }
 580:../Dave/Generated/FREERTOS/queue.c ****         taskEXIT_CRITICAL();
 567              	 .loc 1 580 0
 568 0024 FFF7FEFF 	 bl vPortExitCritical
 581:../Dave/Generated/FREERTOS/queue.c **** 
 582:../Dave/Generated/FREERTOS/queue.c ****         return pxReturn;
 569              	 .loc 1 582 0
 570 0028 FB68     	 ldr r3,[r7,#12]
 583:../Dave/Generated/FREERTOS/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 571              	 .loc 1 583 0
 572 002a 1846     	 mov r0,r3
 573 002c 1037     	 adds r7,r7,#16
 574              	.LCFI28:
 575              	 .cfi_def_cfa_offset 8
 576 002e BD46     	 mov sp,r7
 577              	.LCFI29:
 578              	 .cfi_def_cfa_register 13
 579              	 
 580 0030 80BD     	 pop {r7,pc}
 581              	 .cfi_endproc
 582              	.LFE143:
 584 0032 00BF     	 .section .text.xQueueGetMutexHolderFromISR,"ax",%progbits
 585              	 .align 2
 586              	 .global xQueueGetMutexHolderFromISR
 587              	 .thumb
 588              	 .thumb_func
 590              	xQueueGetMutexHolderFromISR:
 591              	.LFB144:
 584:../Dave/Generated/FREERTOS/queue.c **** 
 585:../Dave/Generated/FREERTOS/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 586:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 587:../Dave/Generated/FREERTOS/queue.c **** 
 588:../Dave/Generated/FREERTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 589:../Dave/Generated/FREERTOS/queue.c **** 
 590:../Dave/Generated/FREERTOS/queue.c ****     TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 591:../Dave/Generated/FREERTOS/queue.c ****     {
 592              	 .loc 1 591 0
 593              	 .cfi_startproc
 594              	 
 595              	 
 596              	 
 597 0000 80B4     	 push {r7}
 598              	.LCFI30:
 599              	 .cfi_def_cfa_offset 4
 600              	 .cfi_offset 7,-4
 601 0002 85B0     	 sub sp,sp,#20
 602              	.LCFI31:
 603              	 .cfi_def_cfa_offset 24
 604 0004 00AF     	 add r7,sp,#0
 605              	.LCFI32:
 606              	 .cfi_def_cfa_register 7
 607 0006 7860     	 str r0,[r7,#4]
 592:../Dave/Generated/FREERTOS/queue.c ****         TaskHandle_t pxReturn;
 593:../Dave/Generated/FREERTOS/queue.c **** 
 594:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( xSemaphore );
 608              	 .loc 1 594 0
 609 0008 7B68     	 ldr r3,[r7,#4]
 610 000a 002B     	 cmp r3,#0
 611 000c 09D1     	 bne .L33
 612              	.LBB129:
 613              	.LBB130:
 614              	 .loc 2 197 0 discriminator 1
 615              	
 616 000e 4FF0FC03 	 mov r3,#252
 617 0012 83F31188 	 msr basepri,r3
 618 0016 BFF36F8F 	 isb 
 619 001a BFF34F8F 	 dsb 
 620              	
 621              	
 622              	 .thumb
 623 001e BB60     	 str r3,[r7,#8]
 624              	.L34:
 625              	.LBE130:
 626              	.LBE129:
 627              	 .loc 1 594 0 discriminator 1
 628 0020 FEE7     	 b .L34
 629              	.L33:
 595:../Dave/Generated/FREERTOS/queue.c **** 
 596:../Dave/Generated/FREERTOS/queue.c ****         /* Mutexes cannot be used in interrupt service routines, so the mutex
 597:../Dave/Generated/FREERTOS/queue.c ****          * holder should not change in an ISR, and therefore a critical section is
 598:../Dave/Generated/FREERTOS/queue.c ****          * not required here. */
 599:../Dave/Generated/FREERTOS/queue.c ****         if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 630              	 .loc 1 599 0
 631 0022 7B68     	 ldr r3,[r7,#4]
 632 0024 1B68     	 ldr r3,[r3]
 633 0026 002B     	 cmp r3,#0
 634 0028 03D1     	 bne .L35
 600:../Dave/Generated/FREERTOS/queue.c ****         {
 601:../Dave/Generated/FREERTOS/queue.c ****             pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 635              	 .loc 1 601 0
 636 002a 7B68     	 ldr r3,[r7,#4]
 637 002c 9B68     	 ldr r3,[r3,#8]
 638 002e FB60     	 str r3,[r7,#12]
 639 0030 01E0     	 b .L36
 640              	.L35:
 602:../Dave/Generated/FREERTOS/queue.c ****         }
 603:../Dave/Generated/FREERTOS/queue.c ****         else
 604:../Dave/Generated/FREERTOS/queue.c ****         {
 605:../Dave/Generated/FREERTOS/queue.c ****             pxReturn = NULL;
 641              	 .loc 1 605 0
 642 0032 0023     	 movs r3,#0
 643 0034 FB60     	 str r3,[r7,#12]
 644              	.L36:
 606:../Dave/Generated/FREERTOS/queue.c ****         }
 607:../Dave/Generated/FREERTOS/queue.c **** 
 608:../Dave/Generated/FREERTOS/queue.c ****         return pxReturn;
 645              	 .loc 1 608 0
 646 0036 FB68     	 ldr r3,[r7,#12]
 609:../Dave/Generated/FREERTOS/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 647              	 .loc 1 609 0
 648 0038 1846     	 mov r0,r3
 649 003a 1437     	 adds r7,r7,#20
 650              	.LCFI33:
 651              	 .cfi_def_cfa_offset 4
 652 003c BD46     	 mov sp,r7
 653              	.LCFI34:
 654              	 .cfi_def_cfa_register 13
 655              	 
 656 003e 5DF8047B 	 ldr r7,[sp],#4
 657              	.LCFI35:
 658              	 .cfi_restore 7
 659              	 .cfi_def_cfa_offset 0
 660 0042 7047     	 bx lr
 661              	 .cfi_endproc
 662              	.LFE144:
 664              	 .section .text.xQueueGiveMutexRecursive,"ax",%progbits
 665              	 .align 2
 666              	 .global xQueueGiveMutexRecursive
 667              	 .thumb
 668              	 .thumb_func
 670              	xQueueGiveMutexRecursive:
 671              	.LFB145:
 610:../Dave/Generated/FREERTOS/queue.c **** 
 611:../Dave/Generated/FREERTOS/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 612:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 613:../Dave/Generated/FREERTOS/queue.c **** 
 614:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 615:../Dave/Generated/FREERTOS/queue.c **** 
 616:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 617:../Dave/Generated/FREERTOS/queue.c ****     {
 672              	 .loc 1 617 0
 673              	 .cfi_startproc
 674              	 
 675              	 
 676 0000 90B5     	 push {r4,r7,lr}
 677              	.LCFI36:
 678              	 .cfi_def_cfa_offset 12
 679              	 .cfi_offset 4,-12
 680              	 .cfi_offset 7,-8
 681              	 .cfi_offset 14,-4
 682 0002 87B0     	 sub sp,sp,#28
 683              	.LCFI37:
 684              	 .cfi_def_cfa_offset 40
 685 0004 00AF     	 add r7,sp,#0
 686              	.LCFI38:
 687              	 .cfi_def_cfa_register 7
 688 0006 7860     	 str r0,[r7,#4]
 618:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xReturn;
 619:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 689              	 .loc 1 619 0
 690 0008 7B68     	 ldr r3,[r7,#4]
 691 000a 3B61     	 str r3,[r7,#16]
 620:../Dave/Generated/FREERTOS/queue.c **** 
 621:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( pxMutex );
 692              	 .loc 1 621 0
 693 000c 3B69     	 ldr r3,[r7,#16]
 694 000e 002B     	 cmp r3,#0
 695 0010 09D1     	 bne .L39
 696              	.LBB131:
 697              	.LBB132:
 698              	 .loc 2 197 0 discriminator 1
 699              	
 700 0012 4FF0FC03 	 mov r3,#252
 701 0016 83F31188 	 msr basepri,r3
 702 001a BFF36F8F 	 isb 
 703 001e BFF34F8F 	 dsb 
 704              	
 705              	
 706              	 .thumb
 707 0022 FB60     	 str r3,[r7,#12]
 708              	.L40:
 709              	.LBE132:
 710              	.LBE131:
 711              	 .loc 1 621 0 discriminator 1
 712 0024 FEE7     	 b .L40
 713              	.L39:
 622:../Dave/Generated/FREERTOS/queue.c **** 
 623:../Dave/Generated/FREERTOS/queue.c ****         /* If this is the task that holds the mutex then xMutexHolder will not
 624:../Dave/Generated/FREERTOS/queue.c ****          * change outside of this task.  If this task does not hold the mutex then
 625:../Dave/Generated/FREERTOS/queue.c ****          * pxMutexHolder can never coincidentally equal the tasks handle, and as
 626:../Dave/Generated/FREERTOS/queue.c ****          * this is the only condition we are interested in it does not matter if
 627:../Dave/Generated/FREERTOS/queue.c ****          * pxMutexHolder is accessed simultaneously by another task.  Therefore no
 628:../Dave/Generated/FREERTOS/queue.c ****          * mutual exclusion is required to test the pxMutexHolder variable. */
 629:../Dave/Generated/FREERTOS/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 714              	 .loc 1 629 0
 715 0026 3B69     	 ldr r3,[r7,#16]
 716 0028 9C68     	 ldr r4,[r3,#8]
 717 002a FFF7FEFF 	 bl xTaskGetCurrentTaskHandle
 718 002e 0346     	 mov r3,r0
 719 0030 9C42     	 cmp r4,r3
 720 0032 11D1     	 bne .L41
 630:../Dave/Generated/FREERTOS/queue.c ****         {
 631:../Dave/Generated/FREERTOS/queue.c ****             traceGIVE_MUTEX_RECURSIVE( pxMutex );
 632:../Dave/Generated/FREERTOS/queue.c **** 
 633:../Dave/Generated/FREERTOS/queue.c ****             /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 634:../Dave/Generated/FREERTOS/queue.c ****              * the task handle, therefore no underflow check is required.  Also,
 635:../Dave/Generated/FREERTOS/queue.c ****              * uxRecursiveCallCount is only modified by the mutex holder, and as
 636:../Dave/Generated/FREERTOS/queue.c ****              * there can only be one, no mutual exclusion is required to modify the
 637:../Dave/Generated/FREERTOS/queue.c ****              * uxRecursiveCallCount member. */
 638:../Dave/Generated/FREERTOS/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 721              	 .loc 1 638 0
 722 0034 3B69     	 ldr r3,[r7,#16]
 723 0036 DB68     	 ldr r3,[r3,#12]
 724 0038 5A1E     	 subs r2,r3,#1
 725 003a 3B69     	 ldr r3,[r7,#16]
 726 003c DA60     	 str r2,[r3,#12]
 639:../Dave/Generated/FREERTOS/queue.c **** 
 640:../Dave/Generated/FREERTOS/queue.c ****             /* Has the recursive call count unwound to 0? */
 641:../Dave/Generated/FREERTOS/queue.c ****             if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 727              	 .loc 1 641 0
 728 003e 3B69     	 ldr r3,[r7,#16]
 729 0040 DB68     	 ldr r3,[r3,#12]
 730 0042 002B     	 cmp r3,#0
 731 0044 05D1     	 bne .L42
 642:../Dave/Generated/FREERTOS/queue.c ****             {
 643:../Dave/Generated/FREERTOS/queue.c ****                 /* Return the mutex.  This will automatically unblock any other
 644:../Dave/Generated/FREERTOS/queue.c ****                  * task that might be waiting to access the mutex. */
 645:../Dave/Generated/FREERTOS/queue.c ****                 ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO
 732              	 .loc 1 645 0
 733 0046 3869     	 ldr r0,[r7,#16]
 734 0048 0021     	 movs r1,#0
 735 004a 0022     	 movs r2,#0
 736 004c 0023     	 movs r3,#0
 737 004e FFF7FEFF 	 bl xQueueGenericSend
 738              	.L42:
 646:../Dave/Generated/FREERTOS/queue.c ****             }
 647:../Dave/Generated/FREERTOS/queue.c ****             else
 648:../Dave/Generated/FREERTOS/queue.c ****             {
 649:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 650:../Dave/Generated/FREERTOS/queue.c ****             }
 651:../Dave/Generated/FREERTOS/queue.c **** 
 652:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdPASS;
 739              	 .loc 1 652 0
 740 0052 0123     	 movs r3,#1
 741 0054 7B61     	 str r3,[r7,#20]
 742 0056 01E0     	 b .L43
 743              	.L41:
 653:../Dave/Generated/FREERTOS/queue.c ****         }
 654:../Dave/Generated/FREERTOS/queue.c ****         else
 655:../Dave/Generated/FREERTOS/queue.c ****         {
 656:../Dave/Generated/FREERTOS/queue.c ****             /* The mutex cannot be given because the calling task is not the
 657:../Dave/Generated/FREERTOS/queue.c ****              * holder. */
 658:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdFAIL;
 744              	 .loc 1 658 0
 745 0058 0023     	 movs r3,#0
 746 005a 7B61     	 str r3,[r7,#20]
 747              	.L43:
 659:../Dave/Generated/FREERTOS/queue.c **** 
 660:../Dave/Generated/FREERTOS/queue.c ****             traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 661:../Dave/Generated/FREERTOS/queue.c ****         }
 662:../Dave/Generated/FREERTOS/queue.c **** 
 663:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
 748              	 .loc 1 663 0
 749 005c 7B69     	 ldr r3,[r7,#20]
 664:../Dave/Generated/FREERTOS/queue.c ****     }
 750              	 .loc 1 664 0
 751 005e 1846     	 mov r0,r3
 752 0060 1C37     	 adds r7,r7,#28
 753              	.LCFI39:
 754              	 .cfi_def_cfa_offset 12
 755 0062 BD46     	 mov sp,r7
 756              	.LCFI40:
 757              	 .cfi_def_cfa_register 13
 758              	 
 759 0064 90BD     	 pop {r4,r7,pc}
 760              	 .cfi_endproc
 761              	.LFE145:
 763 0066 00BF     	 .section .text.xQueueTakeMutexRecursive,"ax",%progbits
 764              	 .align 2
 765              	 .global xQueueTakeMutexRecursive
 766              	 .thumb
 767              	 .thumb_func
 769              	xQueueTakeMutexRecursive:
 770              	.LFB146:
 665:../Dave/Generated/FREERTOS/queue.c **** 
 666:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 667:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 668:../Dave/Generated/FREERTOS/queue.c **** 
 669:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 670:../Dave/Generated/FREERTOS/queue.c **** 
 671:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
 672:../Dave/Generated/FREERTOS/queue.c ****                                          TickType_t xTicksToWait )
 673:../Dave/Generated/FREERTOS/queue.c ****     {
 771              	 .loc 1 673 0
 772              	 .cfi_startproc
 773              	 
 774              	 
 775 0000 90B5     	 push {r4,r7,lr}
 776              	.LCFI41:
 777              	 .cfi_def_cfa_offset 12
 778              	 .cfi_offset 4,-12
 779              	 .cfi_offset 7,-8
 780              	 .cfi_offset 14,-4
 781 0002 87B0     	 sub sp,sp,#28
 782              	.LCFI42:
 783              	 .cfi_def_cfa_offset 40
 784 0004 00AF     	 add r7,sp,#0
 785              	.LCFI43:
 786              	 .cfi_def_cfa_register 7
 787 0006 7860     	 str r0,[r7,#4]
 788 0008 3960     	 str r1,[r7]
 674:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xReturn;
 675:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 789              	 .loc 1 675 0
 790 000a 7B68     	 ldr r3,[r7,#4]
 791 000c 3B61     	 str r3,[r7,#16]
 676:../Dave/Generated/FREERTOS/queue.c **** 
 677:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( pxMutex );
 792              	 .loc 1 677 0
 793 000e 3B69     	 ldr r3,[r7,#16]
 794 0010 002B     	 cmp r3,#0
 795 0012 09D1     	 bne .L46
 796              	.LBB133:
 797              	.LBB134:
 798              	 .loc 2 197 0 discriminator 1
 799              	
 800 0014 4FF0FC03 	 mov r3,#252
 801 0018 83F31188 	 msr basepri,r3
 802 001c BFF36F8F 	 isb 
 803 0020 BFF34F8F 	 dsb 
 804              	
 805              	
 806              	 .thumb
 807 0024 FB60     	 str r3,[r7,#12]
 808              	.L47:
 809              	.LBE134:
 810              	.LBE133:
 811              	 .loc 1 677 0 discriminator 1
 812 0026 FEE7     	 b .L47
 813              	.L46:
 678:../Dave/Generated/FREERTOS/queue.c **** 
 679:../Dave/Generated/FREERTOS/queue.c ****         /* Comments regarding mutual exclusion as per those within
 680:../Dave/Generated/FREERTOS/queue.c ****          * xQueueGiveMutexRecursive(). */
 681:../Dave/Generated/FREERTOS/queue.c **** 
 682:../Dave/Generated/FREERTOS/queue.c ****         traceTAKE_MUTEX_RECURSIVE( pxMutex );
 683:../Dave/Generated/FREERTOS/queue.c **** 
 684:../Dave/Generated/FREERTOS/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 814              	 .loc 1 684 0
 815 0028 3B69     	 ldr r3,[r7,#16]
 816 002a 9C68     	 ldr r4,[r3,#8]
 817 002c FFF7FEFF 	 bl xTaskGetCurrentTaskHandle
 818 0030 0346     	 mov r3,r0
 819 0032 9C42     	 cmp r4,r3
 820 0034 07D1     	 bne .L48
 685:../Dave/Generated/FREERTOS/queue.c ****         {
 686:../Dave/Generated/FREERTOS/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 821              	 .loc 1 686 0
 822 0036 3B69     	 ldr r3,[r7,#16]
 823 0038 DB68     	 ldr r3,[r3,#12]
 824 003a 5A1C     	 adds r2,r3,#1
 825 003c 3B69     	 ldr r3,[r7,#16]
 826 003e DA60     	 str r2,[r3,#12]
 687:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdPASS;
 827              	 .loc 1 687 0
 828 0040 0123     	 movs r3,#1
 829 0042 7B61     	 str r3,[r7,#20]
 830 0044 0CE0     	 b .L49
 831              	.L48:
 688:../Dave/Generated/FREERTOS/queue.c ****         }
 689:../Dave/Generated/FREERTOS/queue.c ****         else
 690:../Dave/Generated/FREERTOS/queue.c ****         {
 691:../Dave/Generated/FREERTOS/queue.c ****             xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 832              	 .loc 1 691 0
 833 0046 3869     	 ldr r0,[r7,#16]
 834 0048 3968     	 ldr r1,[r7]
 835 004a FFF7FEFF 	 bl xQueueSemaphoreTake
 836 004e 7861     	 str r0,[r7,#20]
 692:../Dave/Generated/FREERTOS/queue.c **** 
 693:../Dave/Generated/FREERTOS/queue.c ****             /* pdPASS will only be returned if the mutex was successfully
 694:../Dave/Generated/FREERTOS/queue.c ****              * obtained.  The calling task may have entered the Blocked state
 695:../Dave/Generated/FREERTOS/queue.c ****              * before reaching here. */
 696:../Dave/Generated/FREERTOS/queue.c ****             if( xReturn != pdFAIL )
 837              	 .loc 1 696 0
 838 0050 7B69     	 ldr r3,[r7,#20]
 839 0052 002B     	 cmp r3,#0
 840 0054 04D0     	 beq .L49
 697:../Dave/Generated/FREERTOS/queue.c ****             {
 698:../Dave/Generated/FREERTOS/queue.c ****                 ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 841              	 .loc 1 698 0
 842 0056 3B69     	 ldr r3,[r7,#16]
 843 0058 DB68     	 ldr r3,[r3,#12]
 844 005a 5A1C     	 adds r2,r3,#1
 845 005c 3B69     	 ldr r3,[r7,#16]
 846 005e DA60     	 str r2,[r3,#12]
 847              	.L49:
 699:../Dave/Generated/FREERTOS/queue.c ****             }
 700:../Dave/Generated/FREERTOS/queue.c ****             else
 701:../Dave/Generated/FREERTOS/queue.c ****             {
 702:../Dave/Generated/FREERTOS/queue.c ****                 traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 703:../Dave/Generated/FREERTOS/queue.c ****             }
 704:../Dave/Generated/FREERTOS/queue.c ****         }
 705:../Dave/Generated/FREERTOS/queue.c **** 
 706:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
 848              	 .loc 1 706 0
 849 0060 7B69     	 ldr r3,[r7,#20]
 707:../Dave/Generated/FREERTOS/queue.c ****     }
 850              	 .loc 1 707 0
 851 0062 1846     	 mov r0,r3
 852 0064 1C37     	 adds r7,r7,#28
 853              	.LCFI44:
 854              	 .cfi_def_cfa_offset 12
 855 0066 BD46     	 mov sp,r7
 856              	.LCFI45:
 857              	 .cfi_def_cfa_register 13
 858              	 
 859 0068 90BD     	 pop {r4,r7,pc}
 860              	 .cfi_endproc
 861              	.LFE146:
 863 006a 00BF     	 .section .text.xQueueCreateCountingSemaphore,"ax",%progbits
 864              	 .align 2
 865              	 .global xQueueCreateCountingSemaphore
 866              	 .thumb
 867              	 .thumb_func
 869              	xQueueCreateCountingSemaphore:
 870              	.LFB147:
 708:../Dave/Generated/FREERTOS/queue.c **** 
 709:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 710:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 711:../Dave/Generated/FREERTOS/queue.c **** 
 712:../Dave/Generated/FREERTOS/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 713:../Dave/Generated/FREERTOS/queue.c **** 
 714:../Dave/Generated/FREERTOS/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
 715:../Dave/Generated/FREERTOS/queue.c ****                                                        const UBaseType_t uxInitialCount,
 716:../Dave/Generated/FREERTOS/queue.c ****                                                        StaticQueue_t * pxStaticQueue )
 717:../Dave/Generated/FREERTOS/queue.c ****     {
 718:../Dave/Generated/FREERTOS/queue.c ****         QueueHandle_t xHandle;
 719:../Dave/Generated/FREERTOS/queue.c **** 
 720:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( uxMaxCount != 0 );
 721:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( uxInitialCount <= uxMaxCount );
 722:../Dave/Generated/FREERTOS/queue.c **** 
 723:../Dave/Generated/FREERTOS/queue.c ****         xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, px
 724:../Dave/Generated/FREERTOS/queue.c **** 
 725:../Dave/Generated/FREERTOS/queue.c ****         if( xHandle != NULL )
 726:../Dave/Generated/FREERTOS/queue.c ****         {
 727:../Dave/Generated/FREERTOS/queue.c ****             ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 728:../Dave/Generated/FREERTOS/queue.c **** 
 729:../Dave/Generated/FREERTOS/queue.c ****             traceCREATE_COUNTING_SEMAPHORE();
 730:../Dave/Generated/FREERTOS/queue.c ****         }
 731:../Dave/Generated/FREERTOS/queue.c ****         else
 732:../Dave/Generated/FREERTOS/queue.c ****         {
 733:../Dave/Generated/FREERTOS/queue.c ****             traceCREATE_COUNTING_SEMAPHORE_FAILED();
 734:../Dave/Generated/FREERTOS/queue.c ****         }
 735:../Dave/Generated/FREERTOS/queue.c **** 
 736:../Dave/Generated/FREERTOS/queue.c ****         return xHandle;
 737:../Dave/Generated/FREERTOS/queue.c ****     }
 738:../Dave/Generated/FREERTOS/queue.c **** 
 739:../Dave/Generated/FREERTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 740:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 741:../Dave/Generated/FREERTOS/queue.c **** 
 742:../Dave/Generated/FREERTOS/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 743:../Dave/Generated/FREERTOS/queue.c **** 
 744:../Dave/Generated/FREERTOS/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
 745:../Dave/Generated/FREERTOS/queue.c ****                                                  const UBaseType_t uxInitialCount )
 746:../Dave/Generated/FREERTOS/queue.c ****     {
 871              	 .loc 1 746 0
 872              	 .cfi_startproc
 873              	 
 874              	 
 875 0000 80B5     	 push {r7,lr}
 876              	.LCFI46:
 877              	 .cfi_def_cfa_offset 8
 878              	 .cfi_offset 7,-8
 879              	 .cfi_offset 14,-4
 880 0002 86B0     	 sub sp,sp,#24
 881              	.LCFI47:
 882              	 .cfi_def_cfa_offset 32
 883 0004 00AF     	 add r7,sp,#0
 884              	.LCFI48:
 885              	 .cfi_def_cfa_register 7
 886 0006 7860     	 str r0,[r7,#4]
 887 0008 3960     	 str r1,[r7]
 747:../Dave/Generated/FREERTOS/queue.c ****         QueueHandle_t xHandle;
 748:../Dave/Generated/FREERTOS/queue.c **** 
 749:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( uxMaxCount != 0 );
 888              	 .loc 1 749 0
 889 000a 7B68     	 ldr r3,[r7,#4]
 890 000c 002B     	 cmp r3,#0
 891 000e 09D1     	 bne .L52
 892              	.LBB135:
 893              	.LBB136:
 894              	 .loc 2 197 0 discriminator 1
 895              	
 896 0010 4FF0FC03 	 mov r3,#252
 897 0014 83F31188 	 msr basepri,r3
 898 0018 BFF36F8F 	 isb 
 899 001c BFF34F8F 	 dsb 
 900              	
 901              	
 902              	 .thumb
 903 0020 3B61     	 str r3,[r7,#16]
 904              	.L53:
 905              	.LBE136:
 906              	.LBE135:
 907              	 .loc 1 749 0 discriminator 1
 908 0022 FEE7     	 b .L53
 909              	.L52:
 750:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( uxInitialCount <= uxMaxCount );
 910              	 .loc 1 750 0
 911 0024 3A68     	 ldr r2,[r7]
 912 0026 7B68     	 ldr r3,[r7,#4]
 913 0028 9A42     	 cmp r2,r3
 914 002a 09D9     	 bls .L54
 915              	.LBB137:
 916              	.LBB138:
 917              	 .loc 2 197 0 discriminator 1
 918              	
 919 002c 4FF0FC03 	 mov r3,#252
 920 0030 83F31188 	 msr basepri,r3
 921 0034 BFF36F8F 	 isb 
 922 0038 BFF34F8F 	 dsb 
 923              	
 924              	
 925              	 .thumb
 926 003c FB60     	 str r3,[r7,#12]
 927              	.L55:
 928              	.LBE138:
 929              	.LBE137:
 930              	 .loc 1 750 0 discriminator 2
 931 003e FEE7     	 b .L55
 932              	.L54:
 751:../Dave/Generated/FREERTOS/queue.c **** 
 752:../Dave/Generated/FREERTOS/queue.c ****         xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYP
 933              	 .loc 1 752 0
 934 0040 7868     	 ldr r0,[r7,#4]
 935 0042 0021     	 movs r1,#0
 936 0044 0222     	 movs r2,#2
 937 0046 FFF7FEFF 	 bl xQueueGenericCreate
 938 004a 7861     	 str r0,[r7,#20]
 753:../Dave/Generated/FREERTOS/queue.c **** 
 754:../Dave/Generated/FREERTOS/queue.c ****         if( xHandle != NULL )
 939              	 .loc 1 754 0
 940 004c 7B69     	 ldr r3,[r7,#20]
 941 004e 002B     	 cmp r3,#0
 942 0050 02D0     	 beq .L56
 755:../Dave/Generated/FREERTOS/queue.c ****         {
 756:../Dave/Generated/FREERTOS/queue.c ****             ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 943              	 .loc 1 756 0
 944 0052 7B69     	 ldr r3,[r7,#20]
 945 0054 3A68     	 ldr r2,[r7]
 946 0056 9A63     	 str r2,[r3,#56]
 947              	.L56:
 757:../Dave/Generated/FREERTOS/queue.c **** 
 758:../Dave/Generated/FREERTOS/queue.c ****             traceCREATE_COUNTING_SEMAPHORE();
 759:../Dave/Generated/FREERTOS/queue.c ****         }
 760:../Dave/Generated/FREERTOS/queue.c ****         else
 761:../Dave/Generated/FREERTOS/queue.c ****         {
 762:../Dave/Generated/FREERTOS/queue.c ****             traceCREATE_COUNTING_SEMAPHORE_FAILED();
 763:../Dave/Generated/FREERTOS/queue.c ****         }
 764:../Dave/Generated/FREERTOS/queue.c **** 
 765:../Dave/Generated/FREERTOS/queue.c ****         return xHandle;
 948              	 .loc 1 765 0
 949 0058 7B69     	 ldr r3,[r7,#20]
 766:../Dave/Generated/FREERTOS/queue.c ****     }
 950              	 .loc 1 766 0
 951 005a 1846     	 mov r0,r3
 952 005c 1837     	 adds r7,r7,#24
 953              	.LCFI49:
 954              	 .cfi_def_cfa_offset 8
 955 005e BD46     	 mov sp,r7
 956              	.LCFI50:
 957              	 .cfi_def_cfa_register 13
 958              	 
 959 0060 80BD     	 pop {r7,pc}
 960              	 .cfi_endproc
 961              	.LFE147:
 963 0062 00BF     	 .section .text.xQueueGenericSend,"ax",%progbits
 964              	 .align 2
 965              	 .global xQueueGenericSend
 966              	 .thumb
 967              	 .thumb_func
 969              	xQueueGenericSend:
 970              	.LFB148:
 767:../Dave/Generated/FREERTOS/queue.c **** 
 768:../Dave/Generated/FREERTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 769:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 770:../Dave/Generated/FREERTOS/queue.c **** 
 771:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
 772:../Dave/Generated/FREERTOS/queue.c ****                               const void * const pvItemToQueue,
 773:../Dave/Generated/FREERTOS/queue.c ****                               TickType_t xTicksToWait,
 774:../Dave/Generated/FREERTOS/queue.c ****                               const BaseType_t xCopyPosition )
 775:../Dave/Generated/FREERTOS/queue.c **** {
 971              	 .loc 1 775 0
 972              	 .cfi_startproc
 973              	 
 974              	 
 975 0000 80B5     	 push {r7,lr}
 976              	.LCFI51:
 977              	 .cfi_def_cfa_offset 8
 978              	 .cfi_offset 7,-8
 979              	 .cfi_offset 14,-4
 980 0002 8EB0     	 sub sp,sp,#56
 981              	.LCFI52:
 982              	 .cfi_def_cfa_offset 64
 983 0004 00AF     	 add r7,sp,#0
 984              	.LCFI53:
 985              	 .cfi_def_cfa_register 7
 986 0006 F860     	 str r0,[r7,#12]
 987 0008 B960     	 str r1,[r7,#8]
 988 000a 7A60     	 str r2,[r7,#4]
 989 000c 3B60     	 str r3,[r7]
 776:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 990              	 .loc 1 776 0
 991 000e 0023     	 movs r3,#0
 992 0010 7B63     	 str r3,[r7,#52]
 777:../Dave/Generated/FREERTOS/queue.c ****     TimeOut_t xTimeOut;
 778:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 993              	 .loc 1 778 0
 994 0012 FB68     	 ldr r3,[r7,#12]
 995 0014 3B63     	 str r3,[r7,#48]
 779:../Dave/Generated/FREERTOS/queue.c **** 
 780:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 996              	 .loc 1 780 0
 997 0016 3B6B     	 ldr r3,[r7,#48]
 998 0018 002B     	 cmp r3,#0
 999 001a 09D1     	 bne .L59
 1000              	.LBB139:
 1001              	.LBB140:
 1002              	 .loc 2 197 0 discriminator 1
 1003              	
 1004 001c 4FF0FC03 	 mov r3,#252
 1005 0020 83F31188 	 msr basepri,r3
 1006 0024 BFF36F8F 	 isb 
 1007 0028 BFF34F8F 	 dsb 
 1008              	
 1009              	
 1010              	 .thumb
 1011 002c 7B62     	 str r3,[r7,#36]
 1012              	.L60:
 1013              	.LBE140:
 1014              	.LBE139:
 1015              	 .loc 1 780 0 discriminator 1
 1016 002e FEE7     	 b .L60
 1017              	.L59:
 781:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1018              	 .loc 1 781 0
 1019 0030 BB68     	 ldr r3,[r7,#8]
 1020 0032 002B     	 cmp r3,#0
 1021 0034 03D1     	 bne .L61
 1022              	 .loc 1 781 0 is_stmt 0 discriminator 2
 1023 0036 3B6B     	 ldr r3,[r7,#48]
 1024 0038 1B6C     	 ldr r3,[r3,#64]
 1025 003a 002B     	 cmp r3,#0
 1026 003c 01D1     	 bne .L62
 1027              	.L61:
 1028              	 .loc 1 781 0 discriminator 3
 1029 003e 0123     	 movs r3,#1
 1030 0040 00E0     	 b .L63
 1031              	.L62:
 1032              	 .loc 1 781 0 discriminator 4
 1033 0042 0023     	 movs r3,#0
 1034              	.L63:
 1035              	 .loc 1 781 0 discriminator 6
 1036 0044 002B     	 cmp r3,#0
 1037 0046 09D1     	 bne .L64
 1038              	.LBB141:
 1039              	.LBB142:
 1040              	 .loc 2 197 0 is_stmt 1 discriminator 7
 1041              	
 1042 0048 4FF0FC03 	 mov r3,#252
 1043 004c 83F31188 	 msr basepri,r3
 1044 0050 BFF36F8F 	 isb 
 1045 0054 BFF34F8F 	 dsb 
 1046              	
 1047              	
 1048              	 .thumb
 1049 0058 3B62     	 str r3,[r7,#32]
 1050              	.L65:
 1051              	.LBE142:
 1052              	.LBE141:
 1053              	 .loc 1 781 0 discriminator 2
 1054 005a FEE7     	 b .L65
 1055              	.L64:
 782:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1056              	 .loc 1 782 0
 1057 005c 3B68     	 ldr r3,[r7]
 1058 005e 022B     	 cmp r3,#2
 1059 0060 03D1     	 bne .L66
 1060              	 .loc 1 782 0 is_stmt 0 discriminator 2
 1061 0062 3B6B     	 ldr r3,[r7,#48]
 1062 0064 DB6B     	 ldr r3,[r3,#60]
 1063 0066 012B     	 cmp r3,#1
 1064 0068 01D1     	 bne .L67
 1065              	.L66:
 1066              	 .loc 1 782 0 discriminator 3
 1067 006a 0123     	 movs r3,#1
 1068 006c 00E0     	 b .L68
 1069              	.L67:
 1070              	 .loc 1 782 0 discriminator 4
 1071 006e 0023     	 movs r3,#0
 1072              	.L68:
 1073              	 .loc 1 782 0 discriminator 6
 1074 0070 002B     	 cmp r3,#0
 1075 0072 09D1     	 bne .L69
 1076              	.LBB143:
 1077              	.LBB144:
 1078              	 .loc 2 197 0 is_stmt 1 discriminator 7
 1079              	
 1080 0074 4FF0FC03 	 mov r3,#252
 1081 0078 83F31188 	 msr basepri,r3
 1082 007c BFF36F8F 	 isb 
 1083 0080 BFF34F8F 	 dsb 
 1084              	
 1085              	
 1086              	 .thumb
 1087 0084 FB61     	 str r3,[r7,#28]
 1088              	.L70:
 1089              	.LBE144:
 1090              	.LBE143:
 1091              	 .loc 1 782 0 discriminator 3
 1092 0086 FEE7     	 b .L70
 1093              	.L69:
 783:../Dave/Generated/FREERTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 784:../Dave/Generated/FREERTOS/queue.c ****         {
 785:../Dave/Generated/FREERTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 1094              	 .loc 1 785 0
 1095 0088 FFF7FEFF 	 bl xTaskGetSchedulerState
 1096 008c 0346     	 mov r3,r0
 1097 008e 002B     	 cmp r3,#0
 1098 0090 02D1     	 bne .L71
 1099              	 .loc 1 785 0 is_stmt 0 discriminator 2
 1100 0092 7B68     	 ldr r3,[r7,#4]
 1101 0094 002B     	 cmp r3,#0
 1102 0096 01D1     	 bne .L72
 1103              	.L71:
 1104              	 .loc 1 785 0 discriminator 3
 1105 0098 0123     	 movs r3,#1
 1106 009a 00E0     	 b .L73
 1107              	.L72:
 1108              	 .loc 1 785 0 discriminator 4
 1109 009c 0023     	 movs r3,#0
 1110              	.L73:
 1111              	 .loc 1 785 0 discriminator 6
 1112 009e 002B     	 cmp r3,#0
 1113 00a0 09D1     	 bne .L74
 1114              	.LBB145:
 1115              	.LBB146:
 1116              	 .loc 2 197 0 is_stmt 1 discriminator 7
 1117              	
 1118 00a2 4FF0FC03 	 mov r3,#252
 1119 00a6 83F31188 	 msr basepri,r3
 1120 00aa BFF36F8F 	 isb 
 1121 00ae BFF34F8F 	 dsb 
 1122              	
 1123              	
 1124              	 .thumb
 1125 00b2 BB61     	 str r3,[r7,#24]
 1126              	.L75:
 1127              	.LBE146:
 1128              	.LBE145:
 1129              	 .loc 1 785 0 discriminator 4
 1130 00b4 FEE7     	 b .L75
 1131              	.L74:
 786:../Dave/Generated/FREERTOS/queue.c ****         }
 787:../Dave/Generated/FREERTOS/queue.c ****     #endif
 788:../Dave/Generated/FREERTOS/queue.c **** 
 789:../Dave/Generated/FREERTOS/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to
 790:../Dave/Generated/FREERTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
 791:../Dave/Generated/FREERTOS/queue.c ****      * interest of execution time efficiency. */
 792:../Dave/Generated/FREERTOS/queue.c ****     for( ; ; )
 793:../Dave/Generated/FREERTOS/queue.c ****     {
 794:../Dave/Generated/FREERTOS/queue.c ****         taskENTER_CRITICAL();
 1132              	 .loc 1 794 0
 1133 00b6 FFF7FEFF 	 bl vPortEnterCritical
 795:../Dave/Generated/FREERTOS/queue.c ****         {
 796:../Dave/Generated/FREERTOS/queue.c ****             /* Is there room on the queue now?  The running task must be the
 797:../Dave/Generated/FREERTOS/queue.c ****              * highest priority task wanting to access the queue.  If the head item
 798:../Dave/Generated/FREERTOS/queue.c ****              * in the queue is to be overwritten then it does not matter if the
 799:../Dave/Generated/FREERTOS/queue.c ****              * queue is full. */
 800:../Dave/Generated/FREERTOS/queue.c ****             if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERW
 1134              	 .loc 1 800 0
 1135 00ba 3B6B     	 ldr r3,[r7,#48]
 1136 00bc 9A6B     	 ldr r2,[r3,#56]
 1137 00be 3B6B     	 ldr r3,[r7,#48]
 1138 00c0 DB6B     	 ldr r3,[r3,#60]
 1139 00c2 9A42     	 cmp r2,r3
 1140 00c4 02D3     	 bcc .L76
 1141              	 .loc 1 800 0 is_stmt 0 discriminator 1
 1142 00c6 3B68     	 ldr r3,[r7]
 1143 00c8 022B     	 cmp r3,#2
 1144 00ca 47D1     	 bne .L77
 1145              	.L76:
 1146              	.LBB147:
 801:../Dave/Generated/FREERTOS/queue.c ****             {
 802:../Dave/Generated/FREERTOS/queue.c ****                 traceQUEUE_SEND( pxQueue );
 803:../Dave/Generated/FREERTOS/queue.c **** 
 804:../Dave/Generated/FREERTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
 805:../Dave/Generated/FREERTOS/queue.c ****                     {
 806:../Dave/Generated/FREERTOS/queue.c ****                         const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1147              	 .loc 1 806 0 is_stmt 1
 1148 00cc 3B6B     	 ldr r3,[r7,#48]
 1149 00ce 9B6B     	 ldr r3,[r3,#56]
 1150 00d0 FB62     	 str r3,[r7,#44]
 807:../Dave/Generated/FREERTOS/queue.c **** 
 808:../Dave/Generated/FREERTOS/queue.c ****                         xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition 
 1151              	 .loc 1 808 0
 1152 00d2 386B     	 ldr r0,[r7,#48]
 1153 00d4 B968     	 ldr r1,[r7,#8]
 1154 00d6 3A68     	 ldr r2,[r7]
 1155 00d8 FFF7FEFF 	 bl prvCopyDataToQueue
 1156 00dc B862     	 str r0,[r7,#40]
 809:../Dave/Generated/FREERTOS/queue.c **** 
 810:../Dave/Generated/FREERTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
 1157              	 .loc 1 810 0
 1158 00de 3B6B     	 ldr r3,[r7,#48]
 1159 00e0 9B6C     	 ldr r3,[r3,#72]
 1160 00e2 002B     	 cmp r3,#0
 1161 00e4 16D0     	 beq .L78
 811:../Dave/Generated/FREERTOS/queue.c ****                         {
 812:../Dave/Generated/FREERTOS/queue.c ****                             if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting 
 1162              	 .loc 1 812 0
 1163 00e6 3B68     	 ldr r3,[r7]
 1164 00e8 022B     	 cmp r3,#2
 1165 00ea 04D1     	 bne .L79
 1166              	 .loc 1 812 0 is_stmt 0 discriminator 1
 1167 00ec FB6A     	 ldr r3,[r7,#44]
 1168 00ee 002B     	 cmp r3,#0
 1169 00f0 01D0     	 beq .L79
 1170              	 .loc 1 812 0
 1171 00f2 00BF     	 nop
 1172 00f4 2EE0     	 b .L81
 1173              	.L79:
 813:../Dave/Generated/FREERTOS/queue.c ****                             {
 814:../Dave/Generated/FREERTOS/queue.c ****                                 /* Do not notify the queue set as an existing item
 815:../Dave/Generated/FREERTOS/queue.c ****                                  * was overwritten in the queue so the number of items
 816:../Dave/Generated/FREERTOS/queue.c ****                                  * in the queue has not changed. */
 817:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 818:../Dave/Generated/FREERTOS/queue.c ****                             }
 819:../Dave/Generated/FREERTOS/queue.c ****                             else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 1174              	 .loc 1 819 0 is_stmt 1
 1175 00f6 386B     	 ldr r0,[r7,#48]
 1176 00f8 FFF7FEFF 	 bl prvNotifyQueueSetContainer
 1177 00fc 0346     	 mov r3,r0
 1178 00fe 002B     	 cmp r3,#0
 1179 0100 28D0     	 beq .L81
 820:../Dave/Generated/FREERTOS/queue.c ****                             {
 821:../Dave/Generated/FREERTOS/queue.c ****                                 /* The queue is a member of a queue set, and posting
 822:../Dave/Generated/FREERTOS/queue.c ****                                  * to the queue set caused a higher priority task to
 823:../Dave/Generated/FREERTOS/queue.c ****                                  * unblock. A context switch is required. */
 824:../Dave/Generated/FREERTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 1180              	 .loc 1 824 0
 1181 0102 4C4B     	 ldr r3,.L94
 1182 0104 4FF08052 	 mov r2,#268435456
 1183 0108 1A60     	 str r2,[r3]
 1184              	
 1185 010a BFF34F8F 	 dsb
 1186              	
 1187              	
 1188 010e BFF36F8F 	 isb
 1189              	
 1190              	 .thumb
 1191 0112 1FE0     	 b .L81
 1192              	.L78:
 825:../Dave/Generated/FREERTOS/queue.c ****                             }
 826:../Dave/Generated/FREERTOS/queue.c ****                             else
 827:../Dave/Generated/FREERTOS/queue.c ****                             {
 828:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 829:../Dave/Generated/FREERTOS/queue.c ****                             }
 830:../Dave/Generated/FREERTOS/queue.c ****                         }
 831:../Dave/Generated/FREERTOS/queue.c ****                         else
 832:../Dave/Generated/FREERTOS/queue.c ****                         {
 833:../Dave/Generated/FREERTOS/queue.c ****                             /* If there was a task waiting for data to arrive on the
 834:../Dave/Generated/FREERTOS/queue.c ****                              * queue then unblock it now. */
 835:../Dave/Generated/FREERTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
 1193              	 .loc 1 835 0
 1194 0114 3B6B     	 ldr r3,[r7,#48]
 1195 0116 5B6A     	 ldr r3,[r3,#36]
 1196 0118 002B     	 cmp r3,#0
 1197 011a 10D0     	 beq .L82
 836:../Dave/Generated/FREERTOS/queue.c ****                             {
 837:../Dave/Generated/FREERTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
 1198              	 .loc 1 837 0
 1199 011c 3B6B     	 ldr r3,[r7,#48]
 1200 011e 2433     	 adds r3,r3,#36
 1201 0120 1846     	 mov r0,r3
 1202 0122 FFF7FEFF 	 bl xTaskRemoveFromEventList
 1203 0126 0346     	 mov r3,r0
 1204 0128 002B     	 cmp r3,#0
 1205 012a 13D0     	 beq .L81
 838:../Dave/Generated/FREERTOS/queue.c ****                                 {
 839:../Dave/Generated/FREERTOS/queue.c ****                                     /* The unblocked task has a priority higher than
 840:../Dave/Generated/FREERTOS/queue.c ****                                      * our own so yield immediately.  Yes it is ok to
 841:../Dave/Generated/FREERTOS/queue.c ****                                      * do this from within the critical section - the
 842:../Dave/Generated/FREERTOS/queue.c ****                                      * kernel takes care of that. */
 843:../Dave/Generated/FREERTOS/queue.c ****                                     queueYIELD_IF_USING_PREEMPTION();
 1206              	 .loc 1 843 0
 1207 012c 414B     	 ldr r3,.L94
 1208 012e 4FF08052 	 mov r2,#268435456
 1209 0132 1A60     	 str r2,[r3]
 1210              	
 1211 0134 BFF34F8F 	 dsb
 1212              	
 1213              	
 1214 0138 BFF36F8F 	 isb
 1215              	
 1216              	 .thumb
 1217 013c 0AE0     	 b .L81
 1218              	.L82:
 844:../Dave/Generated/FREERTOS/queue.c ****                                 }
 845:../Dave/Generated/FREERTOS/queue.c ****                                 else
 846:../Dave/Generated/FREERTOS/queue.c ****                                 {
 847:../Dave/Generated/FREERTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
 848:../Dave/Generated/FREERTOS/queue.c ****                                 }
 849:../Dave/Generated/FREERTOS/queue.c ****                             }
 850:../Dave/Generated/FREERTOS/queue.c ****                             else if( xYieldRequired != pdFALSE )
 1219              	 .loc 1 850 0
 1220 013e BB6A     	 ldr r3,[r7,#40]
 1221 0140 002B     	 cmp r3,#0
 1222 0142 07D0     	 beq .L81
 851:../Dave/Generated/FREERTOS/queue.c ****                             {
 852:../Dave/Generated/FREERTOS/queue.c ****                                 /* This path is a special case that will only get
 853:../Dave/Generated/FREERTOS/queue.c ****                                  * executed if the task was holding multiple mutexes
 854:../Dave/Generated/FREERTOS/queue.c ****                                  * and the mutexes were given back in an order that is
 855:../Dave/Generated/FREERTOS/queue.c ****                                  * different to that in which they were taken. */
 856:../Dave/Generated/FREERTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 1223              	 .loc 1 856 0
 1224 0144 3B4B     	 ldr r3,.L94
 1225 0146 4FF08052 	 mov r2,#268435456
 1226 014a 1A60     	 str r2,[r3]
 1227              	
 1228 014c BFF34F8F 	 dsb
 1229              	
 1230              	
 1231 0150 BFF36F8F 	 isb
 1232              	
 1233              	 .thumb
 1234              	.L81:
 1235              	.LBE147:
 857:../Dave/Generated/FREERTOS/queue.c ****                             }
 858:../Dave/Generated/FREERTOS/queue.c ****                             else
 859:../Dave/Generated/FREERTOS/queue.c ****                             {
 860:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 861:../Dave/Generated/FREERTOS/queue.c ****                             }
 862:../Dave/Generated/FREERTOS/queue.c ****                         }
 863:../Dave/Generated/FREERTOS/queue.c ****                     }
 864:../Dave/Generated/FREERTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
 865:../Dave/Generated/FREERTOS/queue.c ****                     {
 866:../Dave/Generated/FREERTOS/queue.c ****                         xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition 
 867:../Dave/Generated/FREERTOS/queue.c **** 
 868:../Dave/Generated/FREERTOS/queue.c ****                         /* If there was a task waiting for data to arrive on the
 869:../Dave/Generated/FREERTOS/queue.c ****                          * queue then unblock it now. */
 870:../Dave/Generated/FREERTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 871:../Dave/Generated/FREERTOS/queue.c ****                         {
 872:../Dave/Generated/FREERTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
 873:../Dave/Generated/FREERTOS/queue.c ****                             {
 874:../Dave/Generated/FREERTOS/queue.c ****                                 /* The unblocked task has a priority higher than
 875:../Dave/Generated/FREERTOS/queue.c ****                                  * our own so yield immediately.  Yes it is ok to do
 876:../Dave/Generated/FREERTOS/queue.c ****                                  * this from within the critical section - the kernel
 877:../Dave/Generated/FREERTOS/queue.c ****                                  * takes care of that. */
 878:../Dave/Generated/FREERTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 879:../Dave/Generated/FREERTOS/queue.c ****                             }
 880:../Dave/Generated/FREERTOS/queue.c ****                             else
 881:../Dave/Generated/FREERTOS/queue.c ****                             {
 882:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 883:../Dave/Generated/FREERTOS/queue.c ****                             }
 884:../Dave/Generated/FREERTOS/queue.c ****                         }
 885:../Dave/Generated/FREERTOS/queue.c ****                         else if( xYieldRequired != pdFALSE )
 886:../Dave/Generated/FREERTOS/queue.c ****                         {
 887:../Dave/Generated/FREERTOS/queue.c ****                             /* This path is a special case that will only get
 888:../Dave/Generated/FREERTOS/queue.c ****                              * executed if the task was holding multiple mutexes and
 889:../Dave/Generated/FREERTOS/queue.c ****                              * the mutexes were given back in an order that is
 890:../Dave/Generated/FREERTOS/queue.c ****                              * different to that in which they were taken. */
 891:../Dave/Generated/FREERTOS/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 892:../Dave/Generated/FREERTOS/queue.c ****                         }
 893:../Dave/Generated/FREERTOS/queue.c ****                         else
 894:../Dave/Generated/FREERTOS/queue.c ****                         {
 895:../Dave/Generated/FREERTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 896:../Dave/Generated/FREERTOS/queue.c ****                         }
 897:../Dave/Generated/FREERTOS/queue.c ****                     }
 898:../Dave/Generated/FREERTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
 899:../Dave/Generated/FREERTOS/queue.c **** 
 900:../Dave/Generated/FREERTOS/queue.c ****                 taskEXIT_CRITICAL();
 1236              	 .loc 1 900 0
 1237 0154 FFF7FEFF 	 bl vPortExitCritical
 901:../Dave/Generated/FREERTOS/queue.c ****                 return pdPASS;
 1238              	 .loc 1 901 0
 1239 0158 0123     	 movs r3,#1
 1240 015a 67E0     	 b .L93
 1241              	.L77:
 902:../Dave/Generated/FREERTOS/queue.c ****             }
 903:../Dave/Generated/FREERTOS/queue.c ****             else
 904:../Dave/Generated/FREERTOS/queue.c ****             {
 905:../Dave/Generated/FREERTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 1242              	 .loc 1 905 0
 1243 015c 7B68     	 ldr r3,[r7,#4]
 1244 015e 002B     	 cmp r3,#0
 1245 0160 03D1     	 bne .L84
 906:../Dave/Generated/FREERTOS/queue.c ****                 {
 907:../Dave/Generated/FREERTOS/queue.c ****                     /* The queue was full and no block time is specified (or
 908:../Dave/Generated/FREERTOS/queue.c ****                      * the block time has expired) so leave now. */
 909:../Dave/Generated/FREERTOS/queue.c ****                     taskEXIT_CRITICAL();
 1246              	 .loc 1 909 0
 1247 0162 FFF7FEFF 	 bl vPortExitCritical
 910:../Dave/Generated/FREERTOS/queue.c **** 
 911:../Dave/Generated/FREERTOS/queue.c ****                     /* Return to the original privilege level before exiting
 912:../Dave/Generated/FREERTOS/queue.c ****                      * the function. */
 913:../Dave/Generated/FREERTOS/queue.c ****                     traceQUEUE_SEND_FAILED( pxQueue );
 914:../Dave/Generated/FREERTOS/queue.c ****                     return errQUEUE_FULL;
 1248              	 .loc 1 914 0
 1249 0166 0023     	 movs r3,#0
 1250 0168 60E0     	 b .L93
 1251              	.L84:
 915:../Dave/Generated/FREERTOS/queue.c ****                 }
 916:../Dave/Generated/FREERTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 1252              	 .loc 1 916 0
 1253 016a 7B6B     	 ldr r3,[r7,#52]
 1254 016c 002B     	 cmp r3,#0
 1255 016e 06D1     	 bne .L85
 917:../Dave/Generated/FREERTOS/queue.c ****                 {
 918:../Dave/Generated/FREERTOS/queue.c ****                     /* The queue was full and a block time was specified so
 919:../Dave/Generated/FREERTOS/queue.c ****                      * configure the timeout structure. */
 920:../Dave/Generated/FREERTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 1256              	 .loc 1 920 0
 1257 0170 07F11003 	 add r3,r7,#16
 1258 0174 1846     	 mov r0,r3
 1259 0176 FFF7FEFF 	 bl vTaskInternalSetTimeOutState
 921:../Dave/Generated/FREERTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 1260              	 .loc 1 921 0
 1261 017a 0123     	 movs r3,#1
 1262 017c 7B63     	 str r3,[r7,#52]
 1263              	.L85:
 922:../Dave/Generated/FREERTOS/queue.c ****                 }
 923:../Dave/Generated/FREERTOS/queue.c ****                 else
 924:../Dave/Generated/FREERTOS/queue.c ****                 {
 925:../Dave/Generated/FREERTOS/queue.c ****                     /* Entry time was already set. */
 926:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 927:../Dave/Generated/FREERTOS/queue.c ****                 }
 928:../Dave/Generated/FREERTOS/queue.c ****             }
 929:../Dave/Generated/FREERTOS/queue.c ****         }
 930:../Dave/Generated/FREERTOS/queue.c ****         taskEXIT_CRITICAL();
 1264              	 .loc 1 930 0
 1265 017e FFF7FEFF 	 bl vPortExitCritical
 931:../Dave/Generated/FREERTOS/queue.c **** 
 932:../Dave/Generated/FREERTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
 933:../Dave/Generated/FREERTOS/queue.c ****          * now the critical section has been exited. */
 934:../Dave/Generated/FREERTOS/queue.c **** 
 935:../Dave/Generated/FREERTOS/queue.c ****         vTaskSuspendAll();
 1266              	 .loc 1 935 0
 1267 0182 FFF7FEFF 	 bl vTaskSuspendAll
 936:../Dave/Generated/FREERTOS/queue.c ****         prvLockQueue( pxQueue );
 1268              	 .loc 1 936 0
 1269 0186 FFF7FEFF 	 bl vPortEnterCritical
 1270 018a 3B6B     	 ldr r3,[r7,#48]
 1271 018c 93F84430 	 ldrb r3,[r3,#68]
 1272 0190 DBB2     	 uxtb r3,r3
 1273 0192 5BB2     	 sxtb r3,r3
 1274 0194 B3F1FF3F 	 cmp r3,#-1
 1275 0198 03D1     	 bne .L86
 1276              	 .loc 1 936 0 is_stmt 0 discriminator 1
 1277 019a 3B6B     	 ldr r3,[r7,#48]
 1278 019c 0022     	 movs r2,#0
 1279 019e 83F84420 	 strb r2,[r3,#68]
 1280              	.L86:
 1281              	 .loc 1 936 0 discriminator 3
 1282 01a2 3B6B     	 ldr r3,[r7,#48]
 1283 01a4 93F84530 	 ldrb r3,[r3,#69]
 1284 01a8 DBB2     	 uxtb r3,r3
 1285 01aa 5BB2     	 sxtb r3,r3
 1286 01ac B3F1FF3F 	 cmp r3,#-1
 1287 01b0 03D1     	 bne .L87
 1288              	 .loc 1 936 0 discriminator 4
 1289 01b2 3B6B     	 ldr r3,[r7,#48]
 1290 01b4 0022     	 movs r2,#0
 1291 01b6 83F84520 	 strb r2,[r3,#69]
 1292              	.L87:
 1293              	 .loc 1 936 0 discriminator 6
 1294 01ba FFF7FEFF 	 bl vPortExitCritical
 937:../Dave/Generated/FREERTOS/queue.c **** 
 938:../Dave/Generated/FREERTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
 939:../Dave/Generated/FREERTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1295              	 .loc 1 939 0 is_stmt 1 discriminator 6
 1296 01be 07F11002 	 add r2,r7,#16
 1297 01c2 3B1D     	 adds r3,r7,#4
 1298 01c4 1046     	 mov r0,r2
 1299 01c6 1946     	 mov r1,r3
 1300 01c8 FFF7FEFF 	 bl xTaskCheckForTimeOut
 1301 01cc 0346     	 mov r3,r0
 1302 01ce 002B     	 cmp r3,#0
 1303 01d0 24D1     	 bne .L88
 940:../Dave/Generated/FREERTOS/queue.c ****         {
 941:../Dave/Generated/FREERTOS/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
 1304              	 .loc 1 941 0
 1305 01d2 386B     	 ldr r0,[r7,#48]
 1306 01d4 FFF7FEFF 	 bl prvIsQueueFull
 1307 01d8 0346     	 mov r3,r0
 1308 01da 002B     	 cmp r3,#0
 1309 01dc 18D0     	 beq .L89
 942:../Dave/Generated/FREERTOS/queue.c ****             {
 943:../Dave/Generated/FREERTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 944:../Dave/Generated/FREERTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1310              	 .loc 1 944 0
 1311 01de 3B6B     	 ldr r3,[r7,#48]
 1312 01e0 03F11002 	 add r2,r3,#16
 1313 01e4 7B68     	 ldr r3,[r7,#4]
 1314 01e6 1046     	 mov r0,r2
 1315 01e8 1946     	 mov r1,r3
 1316 01ea FFF7FEFF 	 bl vTaskPlaceOnEventList
 945:../Dave/Generated/FREERTOS/queue.c **** 
 946:../Dave/Generated/FREERTOS/queue.c ****                 /* Unlocking the queue means queue events can effect the
 947:../Dave/Generated/FREERTOS/queue.c ****                  * event list.  It is possible that interrupts occurring now
 948:../Dave/Generated/FREERTOS/queue.c ****                  * remove this task from the event list again - but as the
 949:../Dave/Generated/FREERTOS/queue.c ****                  * scheduler is suspended the task will go onto the pending
 950:../Dave/Generated/FREERTOS/queue.c ****                  * ready last instead of the actual ready list. */
 951:../Dave/Generated/FREERTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 1317              	 .loc 1 951 0
 1318 01ee 386B     	 ldr r0,[r7,#48]
 1319 01f0 FFF7FEFF 	 bl prvUnlockQueue
 952:../Dave/Generated/FREERTOS/queue.c **** 
 953:../Dave/Generated/FREERTOS/queue.c ****                 /* Resuming the scheduler will move tasks from the pending
 954:../Dave/Generated/FREERTOS/queue.c ****                  * ready list into the ready list - so it is feasible that this
 955:../Dave/Generated/FREERTOS/queue.c ****                  * task is already in a ready list before it yields - in which
 956:../Dave/Generated/FREERTOS/queue.c ****                  * case the yield will not cause a context switch unless there
 957:../Dave/Generated/FREERTOS/queue.c ****                  * is also a higher priority task in the pending ready list. */
 958:../Dave/Generated/FREERTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 1320              	 .loc 1 958 0
 1321 01f4 FFF7FEFF 	 bl xTaskResumeAll
 1322 01f8 0346     	 mov r3,r0
 1323 01fa 002B     	 cmp r3,#0
 1324 01fc 15D1     	 bne .L92
 959:../Dave/Generated/FREERTOS/queue.c ****                 {
 960:../Dave/Generated/FREERTOS/queue.c ****                     portYIELD_WITHIN_API();
 1325              	 .loc 1 960 0
 1326 01fe 0D4B     	 ldr r3,.L94
 1327 0200 4FF08052 	 mov r2,#268435456
 1328 0204 1A60     	 str r2,[r3]
 1329              	
 1330 0206 BFF34F8F 	 dsb
 1331              	
 1332              	
 1333 020a BFF36F8F 	 isb
 1334              	
 1335              	 .thumb
 1336 020e 0CE0     	 b .L92
 1337              	.L89:
 961:../Dave/Generated/FREERTOS/queue.c ****                 }
 962:../Dave/Generated/FREERTOS/queue.c ****             }
 963:../Dave/Generated/FREERTOS/queue.c ****             else
 964:../Dave/Generated/FREERTOS/queue.c ****             {
 965:../Dave/Generated/FREERTOS/queue.c ****                 /* Try again. */
 966:../Dave/Generated/FREERTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 1338              	 .loc 1 966 0
 1339 0210 386B     	 ldr r0,[r7,#48]
 1340 0212 FFF7FEFF 	 bl prvUnlockQueue
 967:../Dave/Generated/FREERTOS/queue.c ****                 ( void ) xTaskResumeAll();
 1341              	 .loc 1 967 0
 1342 0216 FFF7FEFF 	 bl xTaskResumeAll
 1343 021a 4CE7     	 b .L74
 1344              	.L88:
 968:../Dave/Generated/FREERTOS/queue.c ****             }
 969:../Dave/Generated/FREERTOS/queue.c ****         }
 970:../Dave/Generated/FREERTOS/queue.c ****         else
 971:../Dave/Generated/FREERTOS/queue.c ****         {
 972:../Dave/Generated/FREERTOS/queue.c ****             /* The timeout has expired. */
 973:../Dave/Generated/FREERTOS/queue.c ****             prvUnlockQueue( pxQueue );
 1345              	 .loc 1 973 0
 1346 021c 386B     	 ldr r0,[r7,#48]
 1347 021e FFF7FEFF 	 bl prvUnlockQueue
 974:../Dave/Generated/FREERTOS/queue.c ****             ( void ) xTaskResumeAll();
 1348              	 .loc 1 974 0
 1349 0222 FFF7FEFF 	 bl xTaskResumeAll
 975:../Dave/Generated/FREERTOS/queue.c **** 
 976:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_SEND_FAILED( pxQueue );
 977:../Dave/Generated/FREERTOS/queue.c ****             return errQUEUE_FULL;
 1350              	 .loc 1 977 0
 1351 0226 0023     	 movs r3,#0
 1352 0228 00E0     	 b .L93
 1353              	.L92:
 978:../Dave/Generated/FREERTOS/queue.c ****         }
 979:../Dave/Generated/FREERTOS/queue.c ****     } /*lint -restore */
 1354              	 .loc 1 979 0 discriminator 7
 1355 022a 44E7     	 b .L74
 1356              	.L93:
 980:../Dave/Generated/FREERTOS/queue.c **** }
 1357              	 .loc 1 980 0 discriminator 8
 1358 022c 1846     	 mov r0,r3
 1359 022e 3837     	 adds r7,r7,#56
 1360              	.LCFI54:
 1361              	 .cfi_def_cfa_offset 8
 1362 0230 BD46     	 mov sp,r7
 1363              	.LCFI55:
 1364              	 .cfi_def_cfa_register 13
 1365              	 
 1366 0232 80BD     	 pop {r7,pc}
 1367              	.L95:
 1368              	 .align 2
 1369              	.L94:
 1370 0234 04ED00E0 	 .word -536810236
 1371              	 .cfi_endproc
 1372              	.LFE148:
 1374              	 .section .text.xQueueGenericSendFromISR,"ax",%progbits
 1375              	 .align 2
 1376              	 .global xQueueGenericSendFromISR
 1377              	 .thumb
 1378              	 .thumb_func
 1380              	xQueueGenericSendFromISR:
 1381              	.LFB149:
 981:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 982:../Dave/Generated/FREERTOS/queue.c **** 
 983:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
 984:../Dave/Generated/FREERTOS/queue.c ****                                      const void * const pvItemToQueue,
 985:../Dave/Generated/FREERTOS/queue.c ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
 986:../Dave/Generated/FREERTOS/queue.c ****                                      const BaseType_t xCopyPosition )
 987:../Dave/Generated/FREERTOS/queue.c **** {
 1382              	 .loc 1 987 0
 1383              	 .cfi_startproc
 1384              	 
 1385              	 
 1386 0000 80B5     	 push {r7,lr}
 1387              	.LCFI56:
 1388              	 .cfi_def_cfa_offset 8
 1389              	 .cfi_offset 7,-8
 1390              	 .cfi_offset 14,-4
 1391 0002 90B0     	 sub sp,sp,#64
 1392              	.LCFI57:
 1393              	 .cfi_def_cfa_offset 72
 1394 0004 00AF     	 add r7,sp,#0
 1395              	.LCFI58:
 1396              	 .cfi_def_cfa_register 7
 1397 0006 F860     	 str r0,[r7,#12]
 1398 0008 B960     	 str r1,[r7,#8]
 1399 000a 7A60     	 str r2,[r7,#4]
 1400 000c 3B60     	 str r3,[r7]
 988:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn;
 989:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 990:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 1401              	 .loc 1 990 0
 1402 000e FB68     	 ldr r3,[r7,#12]
 1403 0010 BB63     	 str r3,[r7,#56]
 991:../Dave/Generated/FREERTOS/queue.c **** 
 992:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 1404              	 .loc 1 992 0
 1405 0012 BB6B     	 ldr r3,[r7,#56]
 1406 0014 002B     	 cmp r3,#0
 1407 0016 09D1     	 bne .L97
 1408              	.LBB148:
 1409              	.LBB149:
 1410              	 .loc 2 197 0 discriminator 1
 1411              	
 1412 0018 4FF0FC03 	 mov r3,#252
 1413 001c 83F31188 	 msr basepri,r3
 1414 0020 BFF36F8F 	 isb 
 1415 0024 BFF34F8F 	 dsb 
 1416              	
 1417              	
 1418              	 .thumb
 1419 0028 BB62     	 str r3,[r7,#40]
 1420              	.L98:
 1421              	.LBE149:
 1422              	.LBE148:
 1423              	 .loc 1 992 0 discriminator 1
 1424 002a FEE7     	 b .L98
 1425              	.L97:
 993:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1426              	 .loc 1 993 0
 1427 002c BB68     	 ldr r3,[r7,#8]
 1428 002e 002B     	 cmp r3,#0
 1429 0030 03D1     	 bne .L99
 1430              	 .loc 1 993 0 is_stmt 0 discriminator 2
 1431 0032 BB6B     	 ldr r3,[r7,#56]
 1432 0034 1B6C     	 ldr r3,[r3,#64]
 1433 0036 002B     	 cmp r3,#0
 1434 0038 01D1     	 bne .L100
 1435              	.L99:
 1436              	 .loc 1 993 0 discriminator 3
 1437 003a 0123     	 movs r3,#1
 1438 003c 00E0     	 b .L101
 1439              	.L100:
 1440              	 .loc 1 993 0 discriminator 4
 1441 003e 0023     	 movs r3,#0
 1442              	.L101:
 1443              	 .loc 1 993 0 discriminator 6
 1444 0040 002B     	 cmp r3,#0
 1445 0042 09D1     	 bne .L102
 1446              	.LBB150:
 1447              	.LBB151:
 1448              	 .loc 2 197 0 is_stmt 1 discriminator 7
 1449              	
 1450 0044 4FF0FC03 	 mov r3,#252
 1451 0048 83F31188 	 msr basepri,r3
 1452 004c BFF36F8F 	 isb 
 1453 0050 BFF34F8F 	 dsb 
 1454              	
 1455              	
 1456              	 .thumb
 1457 0054 7B62     	 str r3,[r7,#36]
 1458              	.L103:
 1459              	.LBE151:
 1460              	.LBE150:
 1461              	 .loc 1 993 0 discriminator 2
 1462 0056 FEE7     	 b .L103
 1463              	.L102:
 994:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1464              	 .loc 1 994 0
 1465 0058 3B68     	 ldr r3,[r7]
 1466 005a 022B     	 cmp r3,#2
 1467 005c 03D1     	 bne .L104
 1468              	 .loc 1 994 0 is_stmt 0 discriminator 2
 1469 005e BB6B     	 ldr r3,[r7,#56]
 1470 0060 DB6B     	 ldr r3,[r3,#60]
 1471 0062 012B     	 cmp r3,#1
 1472 0064 01D1     	 bne .L105
 1473              	.L104:
 1474              	 .loc 1 994 0 discriminator 3
 1475 0066 0123     	 movs r3,#1
 1476 0068 00E0     	 b .L106
 1477              	.L105:
 1478              	 .loc 1 994 0 discriminator 4
 1479 006a 0023     	 movs r3,#0
 1480              	.L106:
 1481              	 .loc 1 994 0 discriminator 6
 1482 006c 002B     	 cmp r3,#0
 1483 006e 09D1     	 bne .L107
 1484              	.LBB152:
 1485              	.LBB153:
 1486              	 .loc 2 197 0 is_stmt 1 discriminator 7
 1487              	
 1488 0070 4FF0FC03 	 mov r3,#252
 1489 0074 83F31188 	 msr basepri,r3
 1490 0078 BFF36F8F 	 isb 
 1491 007c BFF34F8F 	 dsb 
 1492              	
 1493              	
 1494              	 .thumb
 1495 0080 3B62     	 str r3,[r7,#32]
 1496              	.L108:
 1497              	.LBE153:
 1498              	.LBE152:
 1499              	 .loc 1 994 0 discriminator 3
 1500 0082 FEE7     	 b .L108
 1501              	.L107:
 995:../Dave/Generated/FREERTOS/queue.c **** 
 996:../Dave/Generated/FREERTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
 997:../Dave/Generated/FREERTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
 998:../Dave/Generated/FREERTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
 999:../Dave/Generated/FREERTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1000:../Dave/Generated/FREERTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1001:../Dave/Generated/FREERTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1002:../Dave/Generated/FREERTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1003:../Dave/Generated/FREERTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1004:../Dave/Generated/FREERTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1005:../Dave/Generated/FREERTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1006:../Dave/Generated/FREERTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1007:../Dave/Generated/FREERTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1008:../Dave/Generated/FREERTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1009:../Dave/Generated/FREERTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1010:../Dave/Generated/FREERTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1502              	 .loc 1 1010 0
 1503 0084 FFF7FEFF 	 bl vPortValidateInterruptPriority
 1504              	.LBB154:
 1505              	.LBB155:
 198:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 199:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	mov %0, %1												\n"\
 200:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	msr basepri, %0											\n"\
 201:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	isb														\n"\
 202:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	dsb														\n"\
 203:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         );
 205:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 206:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 207:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 208:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 209:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {
 211:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 213:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile
 1506              	 .loc 2 213 0
 1507              	
 1508 0088 EFF31182 	 mrs r2,basepri
 1509 008c 4FF0FC03 	 mov r3,#252
 1510 0090 83F31188 	 msr basepri,r3
 1511 0094 BFF36F8F 	 isb 
 1512 0098 BFF34F8F 	 dsb 
 1513              	
 1514              	
 1515              	 .thumb
 1516 009c FA61     	 str r2,[r7,#28]
 1517 009e BB61     	 str r3,[r7,#24]
 214:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 215:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	mrs %0, basepri											\n"\
 216:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	mov %1, %2												\n"\
 217:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	msr basepri, %1											\n"\
 218:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	isb														\n"\
 219:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	dsb														\n"\
 220:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 221:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         );
 222:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 223:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 224:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****          * warnings. */
 225:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         return ulOriginalBASEPRI;
 1518              	 .loc 2 225 0
 1519 00a0 FB69     	 ldr r3,[r7,#28]
 1520              	.LBE155:
 1521              	.LBE154:
1011:../Dave/Generated/FREERTOS/queue.c **** 
1012:../Dave/Generated/FREERTOS/queue.c ****     /* Similar to xQueueGenericSend, except without blocking if there is no room
1013:../Dave/Generated/FREERTOS/queue.c ****      * in the queue.  Also don't directly wake a task that was blocked on a queue
1014:../Dave/Generated/FREERTOS/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1015:../Dave/Generated/FREERTOS/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1016:../Dave/Generated/FREERTOS/queue.c ****      * post). */
1017:../Dave/Generated/FREERTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1522              	 .loc 1 1017 0
 1523 00a2 7B63     	 str r3,[r7,#52]
1018:../Dave/Generated/FREERTOS/queue.c ****     {
1019:../Dave/Generated/FREERTOS/queue.c ****         if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE
 1524              	 .loc 1 1019 0
 1525 00a4 BB6B     	 ldr r3,[r7,#56]
 1526 00a6 9A6B     	 ldr r2,[r3,#56]
 1527 00a8 BB6B     	 ldr r3,[r7,#56]
 1528 00aa DB6B     	 ldr r3,[r3,#60]
 1529 00ac 9A42     	 cmp r2,r3
 1530 00ae 02D3     	 bcc .L110
 1531              	 .loc 1 1019 0 is_stmt 0 discriminator 1
 1532 00b0 3B68     	 ldr r3,[r7]
 1533 00b2 022B     	 cmp r3,#2
 1534 00b4 56D1     	 bne .L111
 1535              	.L110:
 1536              	.LBB156:
1020:../Dave/Generated/FREERTOS/queue.c ****         {
1021:../Dave/Generated/FREERTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
 1537              	 .loc 1 1021 0 is_stmt 1
 1538 00b6 BB6B     	 ldr r3,[r7,#56]
 1539 00b8 93F84530 	 ldrb r3,[r3,#69]
 1540 00bc 87F83330 	 strb r3,[r7,#51]
1022:../Dave/Generated/FREERTOS/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1541              	 .loc 1 1022 0
 1542 00c0 BB6B     	 ldr r3,[r7,#56]
 1543 00c2 9B6B     	 ldr r3,[r3,#56]
 1544 00c4 FB62     	 str r3,[r7,#44]
1023:../Dave/Generated/FREERTOS/queue.c **** 
1024:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1025:../Dave/Generated/FREERTOS/queue.c **** 
1026:../Dave/Generated/FREERTOS/queue.c ****             /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
1027:../Dave/Generated/FREERTOS/queue.c ****              *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
1028:../Dave/Generated/FREERTOS/queue.c ****              *  in a task disinheriting a priority and prvCopyDataToQueue() can be
1029:../Dave/Generated/FREERTOS/queue.c ****              *  called here even though the disinherit function does not check if
1030:../Dave/Generated/FREERTOS/queue.c ****              *  the scheduler is suspended before accessing the ready lists. */
1031:../Dave/Generated/FREERTOS/queue.c ****             ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 1545              	 .loc 1 1031 0
 1546 00c6 B86B     	 ldr r0,[r7,#56]
 1547 00c8 B968     	 ldr r1,[r7,#8]
 1548 00ca 3A68     	 ldr r2,[r7]
 1549 00cc FFF7FEFF 	 bl prvCopyDataToQueue
1032:../Dave/Generated/FREERTOS/queue.c **** 
1033:../Dave/Generated/FREERTOS/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1034:../Dave/Generated/FREERTOS/queue.c ****              * be done when the queue is unlocked later. */
1035:../Dave/Generated/FREERTOS/queue.c ****             if( cTxLock == queueUNLOCKED )
 1550              	 .loc 1 1035 0
 1551 00d0 97F93330 	 ldrsb r3,[r7,#51]
 1552 00d4 B3F1FF3F 	 cmp r3,#-1
 1553 00d8 2BD1     	 bne .L112
1036:../Dave/Generated/FREERTOS/queue.c ****             {
1037:../Dave/Generated/FREERTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1038:../Dave/Generated/FREERTOS/queue.c ****                     {
1039:../Dave/Generated/FREERTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
 1554              	 .loc 1 1039 0
 1555 00da BB6B     	 ldr r3,[r7,#56]
 1556 00dc 9B6C     	 ldr r3,[r3,#72]
 1557 00de 002B     	 cmp r3,#0
 1558 00e0 14D0     	 beq .L113
1040:../Dave/Generated/FREERTOS/queue.c ****                         {
1041:../Dave/Generated/FREERTOS/queue.c ****                             if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting 
 1559              	 .loc 1 1041 0
 1560 00e2 3B68     	 ldr r3,[r7]
 1561 00e4 022B     	 cmp r3,#2
 1562 00e6 04D1     	 bne .L114
 1563              	 .loc 1 1041 0 is_stmt 0 discriminator 1
 1564 00e8 FB6A     	 ldr r3,[r7,#44]
 1565 00ea 002B     	 cmp r3,#0
 1566 00ec 01D0     	 beq .L114
 1567              	 .loc 1 1041 0
 1568 00ee 00BF     	 nop
 1569 00f0 35E0     	 b .L116
 1570              	.L114:
1042:../Dave/Generated/FREERTOS/queue.c ****                             {
1043:../Dave/Generated/FREERTOS/queue.c ****                                 /* Do not notify the queue set as an existing item
1044:../Dave/Generated/FREERTOS/queue.c ****                                  * was overwritten in the queue so the number of items
1045:../Dave/Generated/FREERTOS/queue.c ****                                  * in the queue has not changed. */
1046:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1047:../Dave/Generated/FREERTOS/queue.c ****                             }
1048:../Dave/Generated/FREERTOS/queue.c ****                             else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 1571              	 .loc 1 1048 0 is_stmt 1
 1572 00f2 B86B     	 ldr r0,[r7,#56]
 1573 00f4 FFF7FEFF 	 bl prvNotifyQueueSetContainer
 1574 00f8 0346     	 mov r3,r0
 1575 00fa 002B     	 cmp r3,#0
 1576 00fc 2FD0     	 beq .L116
1049:../Dave/Generated/FREERTOS/queue.c ****                             {
1050:../Dave/Generated/FREERTOS/queue.c ****                                 /* The queue is a member of a queue set, and posting
1051:../Dave/Generated/FREERTOS/queue.c ****                                  * to the queue set caused a higher priority task to
1052:../Dave/Generated/FREERTOS/queue.c ****                                  * unblock.  A context switch is required. */
1053:../Dave/Generated/FREERTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
 1577              	 .loc 1 1053 0
 1578 00fe 7B68     	 ldr r3,[r7,#4]
 1579 0100 002B     	 cmp r3,#0
 1580 0102 2CD0     	 beq .L116
1054:../Dave/Generated/FREERTOS/queue.c ****                                 {
1055:../Dave/Generated/FREERTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
 1581              	 .loc 1 1055 0
 1582 0104 7B68     	 ldr r3,[r7,#4]
 1583 0106 0122     	 movs r2,#1
 1584 0108 1A60     	 str r2,[r3]
 1585 010a 28E0     	 b .L116
 1586              	.L113:
1056:../Dave/Generated/FREERTOS/queue.c ****                                 }
1057:../Dave/Generated/FREERTOS/queue.c ****                                 else
1058:../Dave/Generated/FREERTOS/queue.c ****                                 {
1059:../Dave/Generated/FREERTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1060:../Dave/Generated/FREERTOS/queue.c ****                                 }
1061:../Dave/Generated/FREERTOS/queue.c ****                             }
1062:../Dave/Generated/FREERTOS/queue.c ****                             else
1063:../Dave/Generated/FREERTOS/queue.c ****                             {
1064:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1065:../Dave/Generated/FREERTOS/queue.c ****                             }
1066:../Dave/Generated/FREERTOS/queue.c ****                         }
1067:../Dave/Generated/FREERTOS/queue.c ****                         else
1068:../Dave/Generated/FREERTOS/queue.c ****                         {
1069:../Dave/Generated/FREERTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
 1587              	 .loc 1 1069 0
 1588 010c BB6B     	 ldr r3,[r7,#56]
 1589 010e 5B6A     	 ldr r3,[r3,#36]
 1590 0110 002B     	 cmp r3,#0
 1591 0112 24D0     	 beq .L116
1070:../Dave/Generated/FREERTOS/queue.c ****                             {
1071:../Dave/Generated/FREERTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
 1592              	 .loc 1 1071 0
 1593 0114 BB6B     	 ldr r3,[r7,#56]
 1594 0116 2433     	 adds r3,r3,#36
 1595 0118 1846     	 mov r0,r3
 1596 011a FFF7FEFF 	 bl xTaskRemoveFromEventList
 1597 011e 0346     	 mov r3,r0
 1598 0120 002B     	 cmp r3,#0
 1599 0122 1CD0     	 beq .L116
1072:../Dave/Generated/FREERTOS/queue.c ****                                 {
1073:../Dave/Generated/FREERTOS/queue.c ****                                     /* The task waiting has a higher priority so
1074:../Dave/Generated/FREERTOS/queue.c ****                                      *  record that a context switch is required. */
1075:../Dave/Generated/FREERTOS/queue.c ****                                     if( pxHigherPriorityTaskWoken != NULL )
 1600              	 .loc 1 1075 0
 1601 0124 7B68     	 ldr r3,[r7,#4]
 1602 0126 002B     	 cmp r3,#0
 1603 0128 19D0     	 beq .L116
1076:../Dave/Generated/FREERTOS/queue.c ****                                     {
1077:../Dave/Generated/FREERTOS/queue.c ****                                         *pxHigherPriorityTaskWoken = pdTRUE;
 1604              	 .loc 1 1077 0
 1605 012a 7B68     	 ldr r3,[r7,#4]
 1606 012c 0122     	 movs r2,#1
 1607 012e 1A60     	 str r2,[r3]
 1608 0130 15E0     	 b .L116
 1609              	.L112:
1078:../Dave/Generated/FREERTOS/queue.c ****                                     }
1079:../Dave/Generated/FREERTOS/queue.c ****                                     else
1080:../Dave/Generated/FREERTOS/queue.c ****                                     {
1081:../Dave/Generated/FREERTOS/queue.c ****                                         mtCOVERAGE_TEST_MARKER();
1082:../Dave/Generated/FREERTOS/queue.c ****                                     }
1083:../Dave/Generated/FREERTOS/queue.c ****                                 }
1084:../Dave/Generated/FREERTOS/queue.c ****                                 else
1085:../Dave/Generated/FREERTOS/queue.c ****                                 {
1086:../Dave/Generated/FREERTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1087:../Dave/Generated/FREERTOS/queue.c ****                                 }
1088:../Dave/Generated/FREERTOS/queue.c ****                             }
1089:../Dave/Generated/FREERTOS/queue.c ****                             else
1090:../Dave/Generated/FREERTOS/queue.c ****                             {
1091:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1092:../Dave/Generated/FREERTOS/queue.c ****                             }
1093:../Dave/Generated/FREERTOS/queue.c ****                         }
1094:../Dave/Generated/FREERTOS/queue.c ****                     }
1095:../Dave/Generated/FREERTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1096:../Dave/Generated/FREERTOS/queue.c ****                     {
1097:../Dave/Generated/FREERTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1098:../Dave/Generated/FREERTOS/queue.c ****                         {
1099:../Dave/Generated/FREERTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1100:../Dave/Generated/FREERTOS/queue.c ****                             {
1101:../Dave/Generated/FREERTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
1102:../Dave/Generated/FREERTOS/queue.c ****                                  * context switch is required. */
1103:../Dave/Generated/FREERTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1104:../Dave/Generated/FREERTOS/queue.c ****                                 {
1105:../Dave/Generated/FREERTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1106:../Dave/Generated/FREERTOS/queue.c ****                                 }
1107:../Dave/Generated/FREERTOS/queue.c ****                                 else
1108:../Dave/Generated/FREERTOS/queue.c ****                                 {
1109:../Dave/Generated/FREERTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1110:../Dave/Generated/FREERTOS/queue.c ****                                 }
1111:../Dave/Generated/FREERTOS/queue.c ****                             }
1112:../Dave/Generated/FREERTOS/queue.c ****                             else
1113:../Dave/Generated/FREERTOS/queue.c ****                             {
1114:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1115:../Dave/Generated/FREERTOS/queue.c ****                             }
1116:../Dave/Generated/FREERTOS/queue.c ****                         }
1117:../Dave/Generated/FREERTOS/queue.c ****                         else
1118:../Dave/Generated/FREERTOS/queue.c ****                         {
1119:../Dave/Generated/FREERTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1120:../Dave/Generated/FREERTOS/queue.c ****                         }
1121:../Dave/Generated/FREERTOS/queue.c **** 
1122:../Dave/Generated/FREERTOS/queue.c ****                         /* Not used in this path. */
1123:../Dave/Generated/FREERTOS/queue.c ****                         ( void ) uxPreviousMessagesWaiting;
1124:../Dave/Generated/FREERTOS/queue.c ****                     }
1125:../Dave/Generated/FREERTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1126:../Dave/Generated/FREERTOS/queue.c ****             }
1127:../Dave/Generated/FREERTOS/queue.c ****             else
1128:../Dave/Generated/FREERTOS/queue.c ****             {
1129:../Dave/Generated/FREERTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1130:../Dave/Generated/FREERTOS/queue.c ****                  * knows that data was posted while it was locked. */
1131:../Dave/Generated/FREERTOS/queue.c ****                 configASSERT( cTxLock != queueINT8_MAX );
 1610              	 .loc 1 1131 0
 1611 0132 97F93330 	 ldrsb r3,[r7,#51]
 1612 0136 7F2B     	 cmp r3,#127
 1613 0138 09D1     	 bne .L117
 1614              	.LBB157:
 1615              	.LBB158:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 1616              	 .loc 2 197 0 discriminator 1
 1617              	
 1618 013a 4FF0FC03 	 mov r3,#252
 1619 013e 83F31188 	 msr basepri,r3
 1620 0142 BFF36F8F 	 isb 
 1621 0146 BFF34F8F 	 dsb 
 1622              	
 1623              	
 1624              	 .thumb
 1625 014a 7B61     	 str r3,[r7,#20]
 1626              	.L118:
 1627              	.LBE158:
 1628              	.LBE157:
 1629              	 .loc 1 1131 0 discriminator 9
 1630 014c FEE7     	 b .L118
 1631              	.L117:
1132:../Dave/Generated/FREERTOS/queue.c **** 
1133:../Dave/Generated/FREERTOS/queue.c ****                 pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1632              	 .loc 1 1133 0
 1633 014e 97F83330 	 ldrb r3,[r7,#51]
 1634 0152 0133     	 adds r3,r3,#1
 1635 0154 DBB2     	 uxtb r3,r3
 1636 0156 DAB2     	 uxtb r2,r3
 1637 0158 BB6B     	 ldr r3,[r7,#56]
 1638 015a 83F84520 	 strb r2,[r3,#69]
 1639              	.L116:
1134:../Dave/Generated/FREERTOS/queue.c ****             }
1135:../Dave/Generated/FREERTOS/queue.c **** 
1136:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdPASS;
 1640              	 .loc 1 1136 0
 1641 015e 0123     	 movs r3,#1
 1642 0160 FB63     	 str r3,[r7,#60]
 1643              	.LBE156:
1020:../Dave/Generated/FREERTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
 1644              	 .loc 1 1020 0
 1645 0162 01E0     	 b .L119
 1646              	.L111:
1137:../Dave/Generated/FREERTOS/queue.c ****         }
1138:../Dave/Generated/FREERTOS/queue.c ****         else
1139:../Dave/Generated/FREERTOS/queue.c ****         {
1140:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1141:../Dave/Generated/FREERTOS/queue.c ****             xReturn = errQUEUE_FULL;
 1647              	 .loc 1 1141 0
 1648 0164 0023     	 movs r3,#0
 1649 0166 FB63     	 str r3,[r7,#60]
 1650              	.L119:
 1651 0168 7B6B     	 ldr r3,[r7,#52]
 1652 016a 3B61     	 str r3,[r7,#16]
 1653              	.LBB159:
 1654              	.LBB160:
 226:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 227:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 228:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 229:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {
 231:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile
 1655              	 .loc 2 231 0
 1656 016c 3B69     	 ldr r3,[r7,#16]
 1657              	
 1658 016e 83F31188 	 msr basepri,r3
 1659              	
 1660              	 .thumb
 1661              	.LBE160:
 1662              	.LBE159:
1142:../Dave/Generated/FREERTOS/queue.c ****         }
1143:../Dave/Generated/FREERTOS/queue.c ****     }
1144:../Dave/Generated/FREERTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1145:../Dave/Generated/FREERTOS/queue.c **** 
1146:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 1663              	 .loc 1 1146 0
 1664 0172 FB6B     	 ldr r3,[r7,#60]
1147:../Dave/Generated/FREERTOS/queue.c **** }
 1665              	 .loc 1 1147 0
 1666 0174 1846     	 mov r0,r3
 1667 0176 4037     	 adds r7,r7,#64
 1668              	.LCFI59:
 1669              	 .cfi_def_cfa_offset 8
 1670 0178 BD46     	 mov sp,r7
 1671              	.LCFI60:
 1672              	 .cfi_def_cfa_register 13
 1673              	 
 1674 017a 80BD     	 pop {r7,pc}
 1675              	 .cfi_endproc
 1676              	.LFE149:
 1678              	 .section .text.xQueueGiveFromISR,"ax",%progbits
 1679              	 .align 2
 1680              	 .global xQueueGiveFromISR
 1681              	 .thumb
 1682              	 .thumb_func
 1684              	xQueueGiveFromISR:
 1685              	.LFB150:
1148:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1149:../Dave/Generated/FREERTOS/queue.c **** 
1150:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
1151:../Dave/Generated/FREERTOS/queue.c ****                               BaseType_t * const pxHigherPriorityTaskWoken )
1152:../Dave/Generated/FREERTOS/queue.c **** {
 1686              	 .loc 1 1152 0
 1687              	 .cfi_startproc
 1688              	 
 1689              	 
 1690 0000 80B5     	 push {r7,lr}
 1691              	.LCFI61:
 1692              	 .cfi_def_cfa_offset 8
 1693              	 .cfi_offset 7,-8
 1694              	 .cfi_offset 14,-4
 1695 0002 8EB0     	 sub sp,sp,#56
 1696              	.LCFI62:
 1697              	 .cfi_def_cfa_offset 64
 1698 0004 00AF     	 add r7,sp,#0
 1699              	.LCFI63:
 1700              	 .cfi_def_cfa_register 7
 1701 0006 7860     	 str r0,[r7,#4]
 1702 0008 3960     	 str r1,[r7]
1153:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn;
1154:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1155:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 1703              	 .loc 1 1155 0
 1704 000a 7B68     	 ldr r3,[r7,#4]
 1705 000c 3B63     	 str r3,[r7,#48]
1156:../Dave/Generated/FREERTOS/queue.c **** 
1157:../Dave/Generated/FREERTOS/queue.c ****     /* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1158:../Dave/Generated/FREERTOS/queue.c ****      * item size is 0.  Don't directly wake a task that was blocked on a queue
1159:../Dave/Generated/FREERTOS/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1160:../Dave/Generated/FREERTOS/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1161:../Dave/Generated/FREERTOS/queue.c ****      * post). */
1162:../Dave/Generated/FREERTOS/queue.c **** 
1163:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 1706              	 .loc 1 1163 0
 1707 000e 3B6B     	 ldr r3,[r7,#48]
 1708 0010 002B     	 cmp r3,#0
 1709 0012 09D1     	 bne .L122
 1710              	.LBB161:
 1711              	.LBB162:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 1712              	 .loc 2 197 0 discriminator 1
 1713              	
 1714 0014 4FF0FC03 	 mov r3,#252
 1715 0018 83F31188 	 msr basepri,r3
 1716 001c BFF36F8F 	 isb 
 1717 0020 BFF34F8F 	 dsb 
 1718              	
 1719              	
 1720              	 .thumb
 1721 0024 3B62     	 str r3,[r7,#32]
 1722              	.L123:
 1723              	.LBE162:
 1724              	.LBE161:
 1725              	 .loc 1 1163 0 discriminator 1
 1726 0026 FEE7     	 b .L123
 1727              	.L122:
1164:../Dave/Generated/FREERTOS/queue.c **** 
1165:../Dave/Generated/FREERTOS/queue.c ****     /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1166:../Dave/Generated/FREERTOS/queue.c ****      * if the item size is not 0. */
1167:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
 1728              	 .loc 1 1167 0
 1729 0028 3B6B     	 ldr r3,[r7,#48]
 1730 002a 1B6C     	 ldr r3,[r3,#64]
 1731 002c 002B     	 cmp r3,#0
 1732 002e 09D0     	 beq .L124
 1733              	.LBB163:
 1734              	.LBB164:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 1735              	 .loc 2 197 0 discriminator 1
 1736              	
 1737 0030 4FF0FC03 	 mov r3,#252
 1738 0034 83F31188 	 msr basepri,r3
 1739 0038 BFF36F8F 	 isb 
 1740 003c BFF34F8F 	 dsb 
 1741              	
 1742              	
 1743              	 .thumb
 1744 0040 FB61     	 str r3,[r7,#28]
 1745              	.L125:
 1746              	.LBE164:
 1747              	.LBE163:
 1748              	 .loc 1 1167 0 discriminator 2
 1749 0042 FEE7     	 b .L125
 1750              	.L124:
1168:../Dave/Generated/FREERTOS/queue.c **** 
1169:../Dave/Generated/FREERTOS/queue.c ****     /* Normally a mutex would not be given from an interrupt, especially if
1170:../Dave/Generated/FREERTOS/queue.c ****      * there is a mutex holder, as priority inheritance makes no sense for an
1171:../Dave/Generated/FREERTOS/queue.c ****      * interrupts, only tasks. */
1172:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMu
 1751              	 .loc 1 1172 0
 1752 0044 3B6B     	 ldr r3,[r7,#48]
 1753 0046 1B68     	 ldr r3,[r3]
 1754 0048 002B     	 cmp r3,#0
 1755 004a 03D1     	 bne .L126
 1756              	 .loc 1 1172 0 is_stmt 0 discriminator 2
 1757 004c 3B6B     	 ldr r3,[r7,#48]
 1758 004e 9B68     	 ldr r3,[r3,#8]
 1759 0050 002B     	 cmp r3,#0
 1760 0052 01D1     	 bne .L127
 1761              	.L126:
 1762              	 .loc 1 1172 0 discriminator 3
 1763 0054 0123     	 movs r3,#1
 1764 0056 00E0     	 b .L128
 1765              	.L127:
 1766              	 .loc 1 1172 0 discriminator 4
 1767 0058 0023     	 movs r3,#0
 1768              	.L128:
 1769              	 .loc 1 1172 0 discriminator 6
 1770 005a 002B     	 cmp r3,#0
 1771 005c 09D1     	 bne .L129
 1772              	.LBB165:
 1773              	.LBB166:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 1774              	 .loc 2 197 0 is_stmt 1 discriminator 7
 1775              	
 1776 005e 4FF0FC03 	 mov r3,#252
 1777 0062 83F31188 	 msr basepri,r3
 1778 0066 BFF36F8F 	 isb 
 1779 006a BFF34F8F 	 dsb 
 1780              	
 1781              	
 1782              	 .thumb
 1783 006e BB61     	 str r3,[r7,#24]
 1784              	.L130:
 1785              	.LBE166:
 1786              	.LBE165:
 1787              	 .loc 1 1172 0 discriminator 3
 1788 0070 FEE7     	 b .L130
 1789              	.L129:
1173:../Dave/Generated/FREERTOS/queue.c **** 
1174:../Dave/Generated/FREERTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1175:../Dave/Generated/FREERTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1176:../Dave/Generated/FREERTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1177:../Dave/Generated/FREERTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1178:../Dave/Generated/FREERTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1179:../Dave/Generated/FREERTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1180:../Dave/Generated/FREERTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1181:../Dave/Generated/FREERTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1182:../Dave/Generated/FREERTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1183:../Dave/Generated/FREERTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1184:../Dave/Generated/FREERTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1185:../Dave/Generated/FREERTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1186:../Dave/Generated/FREERTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1187:../Dave/Generated/FREERTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1188:../Dave/Generated/FREERTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1790              	 .loc 1 1188 0
 1791 0072 FFF7FEFF 	 bl vPortValidateInterruptPriority
 1792              	.LBB167:
 1793              	.LBB168:
 213:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 1794              	 .loc 2 213 0
 1795              	
 1796 0076 EFF31182 	 mrs r2,basepri
 1797 007a 4FF0FC03 	 mov r3,#252
 1798 007e 83F31188 	 msr basepri,r3
 1799 0082 BFF36F8F 	 isb 
 1800 0086 BFF34F8F 	 dsb 
 1801              	
 1802              	
 1803              	 .thumb
 1804 008a 7A61     	 str r2,[r7,#20]
 1805 008c 3B61     	 str r3,[r7,#16]
 225:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 1806              	 .loc 2 225 0
 1807 008e 7B69     	 ldr r3,[r7,#20]
 1808              	.LBE168:
 1809              	.LBE167:
1189:../Dave/Generated/FREERTOS/queue.c **** 
1190:../Dave/Generated/FREERTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1810              	 .loc 1 1190 0
 1811 0090 FB62     	 str r3,[r7,#44]
 1812              	.LBB169:
1191:../Dave/Generated/FREERTOS/queue.c ****     {
1192:../Dave/Generated/FREERTOS/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1813              	 .loc 1 1192 0
 1814 0092 3B6B     	 ldr r3,[r7,#48]
 1815 0094 9B6B     	 ldr r3,[r3,#56]
 1816 0096 BB62     	 str r3,[r7,#40]
1193:../Dave/Generated/FREERTOS/queue.c **** 
1194:../Dave/Generated/FREERTOS/queue.c ****         /* When the queue is used to implement a semaphore no data is ever
1195:../Dave/Generated/FREERTOS/queue.c ****          * moved through the queue but it is still valid to see if the queue 'has
1196:../Dave/Generated/FREERTOS/queue.c ****          * space'. */
1197:../Dave/Generated/FREERTOS/queue.c ****         if( uxMessagesWaiting < pxQueue->uxLength )
 1817              	 .loc 1 1197 0
 1818 0098 3B6B     	 ldr r3,[r7,#48]
 1819 009a DA6B     	 ldr r2,[r3,#60]
 1820 009c BB6A     	 ldr r3,[r7,#40]
 1821 009e 9A42     	 cmp r2,r3
 1822 00a0 4AD9     	 bls .L132
 1823              	.LBB170:
1198:../Dave/Generated/FREERTOS/queue.c ****         {
1199:../Dave/Generated/FREERTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
 1824              	 .loc 1 1199 0
 1825 00a2 3B6B     	 ldr r3,[r7,#48]
 1826 00a4 93F84530 	 ldrb r3,[r3,#69]
 1827 00a8 87F82730 	 strb r3,[r7,#39]
1200:../Dave/Generated/FREERTOS/queue.c **** 
1201:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1202:../Dave/Generated/FREERTOS/queue.c **** 
1203:../Dave/Generated/FREERTOS/queue.c ****             /* A task can only have an inherited priority if it is a mutex
1204:../Dave/Generated/FREERTOS/queue.c ****              * holder - and if there is a mutex holder then the mutex cannot be
1205:../Dave/Generated/FREERTOS/queue.c ****              * given from an ISR.  As this is the ISR version of the function it
1206:../Dave/Generated/FREERTOS/queue.c ****              * can be assumed there is no mutex holder and no need to determine if
1207:../Dave/Generated/FREERTOS/queue.c ****              * priority disinheritance is needed.  Simply increase the count of
1208:../Dave/Generated/FREERTOS/queue.c ****              * messages (semaphores) available. */
1209:../Dave/Generated/FREERTOS/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 1828              	 .loc 1 1209 0
 1829 00ac BB6A     	 ldr r3,[r7,#40]
 1830 00ae 5A1C     	 adds r2,r3,#1
 1831 00b0 3B6B     	 ldr r3,[r7,#48]
 1832 00b2 9A63     	 str r2,[r3,#56]
1210:../Dave/Generated/FREERTOS/queue.c **** 
1211:../Dave/Generated/FREERTOS/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1212:../Dave/Generated/FREERTOS/queue.c ****              * be done when the queue is unlocked later. */
1213:../Dave/Generated/FREERTOS/queue.c ****             if( cTxLock == queueUNLOCKED )
 1833              	 .loc 1 1213 0
 1834 00b4 97F92730 	 ldrsb r3,[r7,#39]
 1835 00b8 B3F1FF3F 	 cmp r3,#-1
 1836 00bc 23D1     	 bne .L133
1214:../Dave/Generated/FREERTOS/queue.c ****             {
1215:../Dave/Generated/FREERTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1216:../Dave/Generated/FREERTOS/queue.c ****                     {
1217:../Dave/Generated/FREERTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
 1837              	 .loc 1 1217 0
 1838 00be 3B6B     	 ldr r3,[r7,#48]
 1839 00c0 9B6C     	 ldr r3,[r3,#72]
 1840 00c2 002B     	 cmp r3,#0
 1841 00c4 0CD0     	 beq .L134
1218:../Dave/Generated/FREERTOS/queue.c ****                         {
1219:../Dave/Generated/FREERTOS/queue.c ****                             if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 1842              	 .loc 1 1219 0
 1843 00c6 386B     	 ldr r0,[r7,#48]
 1844 00c8 FFF7FEFF 	 bl prvNotifyQueueSetContainer
 1845 00cc 0346     	 mov r3,r0
 1846 00ce 002B     	 cmp r3,#0
 1847 00d0 2FD0     	 beq .L135
1220:../Dave/Generated/FREERTOS/queue.c ****                             {
1221:../Dave/Generated/FREERTOS/queue.c ****                                 /* The semaphore is a member of a queue set, and
1222:../Dave/Generated/FREERTOS/queue.c ****                                  * posting to the queue set caused a higher priority
1223:../Dave/Generated/FREERTOS/queue.c ****                                  * task to unblock.  A context switch is required. */
1224:../Dave/Generated/FREERTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
 1848              	 .loc 1 1224 0
 1849 00d2 3B68     	 ldr r3,[r7]
 1850 00d4 002B     	 cmp r3,#0
 1851 00d6 2CD0     	 beq .L135
1225:../Dave/Generated/FREERTOS/queue.c ****                                 {
1226:../Dave/Generated/FREERTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
 1852              	 .loc 1 1226 0
 1853 00d8 3B68     	 ldr r3,[r7]
 1854 00da 0122     	 movs r2,#1
 1855 00dc 1A60     	 str r2,[r3]
 1856 00de 28E0     	 b .L135
 1857              	.L134:
1227:../Dave/Generated/FREERTOS/queue.c ****                                 }
1228:../Dave/Generated/FREERTOS/queue.c ****                                 else
1229:../Dave/Generated/FREERTOS/queue.c ****                                 {
1230:../Dave/Generated/FREERTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1231:../Dave/Generated/FREERTOS/queue.c ****                                 }
1232:../Dave/Generated/FREERTOS/queue.c ****                             }
1233:../Dave/Generated/FREERTOS/queue.c ****                             else
1234:../Dave/Generated/FREERTOS/queue.c ****                             {
1235:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1236:../Dave/Generated/FREERTOS/queue.c ****                             }
1237:../Dave/Generated/FREERTOS/queue.c ****                         }
1238:../Dave/Generated/FREERTOS/queue.c ****                         else
1239:../Dave/Generated/FREERTOS/queue.c ****                         {
1240:../Dave/Generated/FREERTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
 1858              	 .loc 1 1240 0
 1859 00e0 3B6B     	 ldr r3,[r7,#48]
 1860 00e2 5B6A     	 ldr r3,[r3,#36]
 1861 00e4 002B     	 cmp r3,#0
 1862 00e6 24D0     	 beq .L135
1241:../Dave/Generated/FREERTOS/queue.c ****                             {
1242:../Dave/Generated/FREERTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
 1863              	 .loc 1 1242 0
 1864 00e8 3B6B     	 ldr r3,[r7,#48]
 1865 00ea 2433     	 adds r3,r3,#36
 1866 00ec 1846     	 mov r0,r3
 1867 00ee FFF7FEFF 	 bl xTaskRemoveFromEventList
 1868 00f2 0346     	 mov r3,r0
 1869 00f4 002B     	 cmp r3,#0
 1870 00f6 1CD0     	 beq .L135
1243:../Dave/Generated/FREERTOS/queue.c ****                                 {
1244:../Dave/Generated/FREERTOS/queue.c ****                                     /* The task waiting has a higher priority so
1245:../Dave/Generated/FREERTOS/queue.c ****                                      *  record that a context switch is required. */
1246:../Dave/Generated/FREERTOS/queue.c ****                                     if( pxHigherPriorityTaskWoken != NULL )
 1871              	 .loc 1 1246 0
 1872 00f8 3B68     	 ldr r3,[r7]
 1873 00fa 002B     	 cmp r3,#0
 1874 00fc 19D0     	 beq .L135
1247:../Dave/Generated/FREERTOS/queue.c ****                                     {
1248:../Dave/Generated/FREERTOS/queue.c ****                                         *pxHigherPriorityTaskWoken = pdTRUE;
 1875              	 .loc 1 1248 0
 1876 00fe 3B68     	 ldr r3,[r7]
 1877 0100 0122     	 movs r2,#1
 1878 0102 1A60     	 str r2,[r3]
 1879 0104 15E0     	 b .L135
 1880              	.L133:
1249:../Dave/Generated/FREERTOS/queue.c ****                                     }
1250:../Dave/Generated/FREERTOS/queue.c ****                                     else
1251:../Dave/Generated/FREERTOS/queue.c ****                                     {
1252:../Dave/Generated/FREERTOS/queue.c ****                                         mtCOVERAGE_TEST_MARKER();
1253:../Dave/Generated/FREERTOS/queue.c ****                                     }
1254:../Dave/Generated/FREERTOS/queue.c ****                                 }
1255:../Dave/Generated/FREERTOS/queue.c ****                                 else
1256:../Dave/Generated/FREERTOS/queue.c ****                                 {
1257:../Dave/Generated/FREERTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1258:../Dave/Generated/FREERTOS/queue.c ****                                 }
1259:../Dave/Generated/FREERTOS/queue.c ****                             }
1260:../Dave/Generated/FREERTOS/queue.c ****                             else
1261:../Dave/Generated/FREERTOS/queue.c ****                             {
1262:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1263:../Dave/Generated/FREERTOS/queue.c ****                             }
1264:../Dave/Generated/FREERTOS/queue.c ****                         }
1265:../Dave/Generated/FREERTOS/queue.c ****                     }
1266:../Dave/Generated/FREERTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1267:../Dave/Generated/FREERTOS/queue.c ****                     {
1268:../Dave/Generated/FREERTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1269:../Dave/Generated/FREERTOS/queue.c ****                         {
1270:../Dave/Generated/FREERTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1271:../Dave/Generated/FREERTOS/queue.c ****                             {
1272:../Dave/Generated/FREERTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
1273:../Dave/Generated/FREERTOS/queue.c ****                                  * context switch is required. */
1274:../Dave/Generated/FREERTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1275:../Dave/Generated/FREERTOS/queue.c ****                                 {
1276:../Dave/Generated/FREERTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1277:../Dave/Generated/FREERTOS/queue.c ****                                 }
1278:../Dave/Generated/FREERTOS/queue.c ****                                 else
1279:../Dave/Generated/FREERTOS/queue.c ****                                 {
1280:../Dave/Generated/FREERTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1281:../Dave/Generated/FREERTOS/queue.c ****                                 }
1282:../Dave/Generated/FREERTOS/queue.c ****                             }
1283:../Dave/Generated/FREERTOS/queue.c ****                             else
1284:../Dave/Generated/FREERTOS/queue.c ****                             {
1285:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1286:../Dave/Generated/FREERTOS/queue.c ****                             }
1287:../Dave/Generated/FREERTOS/queue.c ****                         }
1288:../Dave/Generated/FREERTOS/queue.c ****                         else
1289:../Dave/Generated/FREERTOS/queue.c ****                         {
1290:../Dave/Generated/FREERTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1291:../Dave/Generated/FREERTOS/queue.c ****                         }
1292:../Dave/Generated/FREERTOS/queue.c ****                     }
1293:../Dave/Generated/FREERTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1294:../Dave/Generated/FREERTOS/queue.c ****             }
1295:../Dave/Generated/FREERTOS/queue.c ****             else
1296:../Dave/Generated/FREERTOS/queue.c ****             {
1297:../Dave/Generated/FREERTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1298:../Dave/Generated/FREERTOS/queue.c ****                  * knows that data was posted while it was locked. */
1299:../Dave/Generated/FREERTOS/queue.c ****                 configASSERT( cTxLock != queueINT8_MAX );
 1881              	 .loc 1 1299 0
 1882 0106 97F92730 	 ldrsb r3,[r7,#39]
 1883 010a 7F2B     	 cmp r3,#127
 1884 010c 09D1     	 bne .L136
 1885              	.LBB171:
 1886              	.LBB172:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 1887              	 .loc 2 197 0 discriminator 1
 1888              	
 1889 010e 4FF0FC03 	 mov r3,#252
 1890 0112 83F31188 	 msr basepri,r3
 1891 0116 BFF36F8F 	 isb 
 1892 011a BFF34F8F 	 dsb 
 1893              	
 1894              	
 1895              	 .thumb
 1896 011e FB60     	 str r3,[r7,#12]
 1897              	.L137:
 1898              	.LBE172:
 1899              	.LBE171:
 1900              	 .loc 1 1299 0 discriminator 8
 1901 0120 FEE7     	 b .L137
 1902              	.L136:
1300:../Dave/Generated/FREERTOS/queue.c **** 
1301:../Dave/Generated/FREERTOS/queue.c ****                 pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1903              	 .loc 1 1301 0
 1904 0122 97F82730 	 ldrb r3,[r7,#39]
 1905 0126 0133     	 adds r3,r3,#1
 1906 0128 DBB2     	 uxtb r3,r3
 1907 012a DAB2     	 uxtb r2,r3
 1908 012c 3B6B     	 ldr r3,[r7,#48]
 1909 012e 83F84520 	 strb r2,[r3,#69]
 1910              	.L135:
1302:../Dave/Generated/FREERTOS/queue.c ****             }
1303:../Dave/Generated/FREERTOS/queue.c **** 
1304:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdPASS;
 1911              	 .loc 1 1304 0
 1912 0132 0123     	 movs r3,#1
 1913 0134 7B63     	 str r3,[r7,#52]
 1914              	.LBE170:
 1915 0136 01E0     	 b .L138
 1916              	.L132:
1305:../Dave/Generated/FREERTOS/queue.c ****         }
1306:../Dave/Generated/FREERTOS/queue.c ****         else
1307:../Dave/Generated/FREERTOS/queue.c ****         {
1308:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1309:../Dave/Generated/FREERTOS/queue.c ****             xReturn = errQUEUE_FULL;
 1917              	 .loc 1 1309 0
 1918 0138 0023     	 movs r3,#0
 1919 013a 7B63     	 str r3,[r7,#52]
 1920              	.L138:
 1921 013c FB6A     	 ldr r3,[r7,#44]
 1922 013e BB60     	 str r3,[r7,#8]
 1923              	.LBE169:
 1924              	.LBB173:
 1925              	.LBB174:
 1926              	 .loc 2 231 0
 1927 0140 BB68     	 ldr r3,[r7,#8]
 1928              	
 1929 0142 83F31188 	 msr basepri,r3
 1930              	
 1931              	 .thumb
 1932              	.LBE174:
 1933              	.LBE173:
1310:../Dave/Generated/FREERTOS/queue.c ****         }
1311:../Dave/Generated/FREERTOS/queue.c ****     }
1312:../Dave/Generated/FREERTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1313:../Dave/Generated/FREERTOS/queue.c **** 
1314:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 1934              	 .loc 1 1314 0
 1935 0146 7B6B     	 ldr r3,[r7,#52]
1315:../Dave/Generated/FREERTOS/queue.c **** }
 1936              	 .loc 1 1315 0
 1937 0148 1846     	 mov r0,r3
 1938 014a 3837     	 adds r7,r7,#56
 1939              	.LCFI64:
 1940              	 .cfi_def_cfa_offset 8
 1941 014c BD46     	 mov sp,r7
 1942              	.LCFI65:
 1943              	 .cfi_def_cfa_register 13
 1944              	 
 1945 014e 80BD     	 pop {r7,pc}
 1946              	 .cfi_endproc
 1947              	.LFE150:
 1949              	 .section .text.xQueueReceive,"ax",%progbits
 1950              	 .align 2
 1951              	 .global xQueueReceive
 1952              	 .thumb
 1953              	 .thumb_func
 1955              	xQueueReceive:
 1956              	.LFB151:
1316:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1317:../Dave/Generated/FREERTOS/queue.c **** 
1318:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue,
1319:../Dave/Generated/FREERTOS/queue.c ****                           void * const pvBuffer,
1320:../Dave/Generated/FREERTOS/queue.c ****                           TickType_t xTicksToWait )
1321:../Dave/Generated/FREERTOS/queue.c **** {
 1957              	 .loc 1 1321 0
 1958              	 .cfi_startproc
 1959              	 
 1960              	 
 1961 0000 80B5     	 push {r7,lr}
 1962              	.LCFI66:
 1963              	 .cfi_def_cfa_offset 8
 1964              	 .cfi_offset 7,-8
 1965              	 .cfi_offset 14,-4
 1966 0002 8CB0     	 sub sp,sp,#48
 1967              	.LCFI67:
 1968              	 .cfi_def_cfa_offset 56
 1969 0004 00AF     	 add r7,sp,#0
 1970              	.LCFI68:
 1971              	 .cfi_def_cfa_register 7
 1972 0006 F860     	 str r0,[r7,#12]
 1973 0008 B960     	 str r1,[r7,#8]
 1974 000a 7A60     	 str r2,[r7,#4]
1322:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1975              	 .loc 1 1322 0
 1976 000c 0023     	 movs r3,#0
 1977 000e FB62     	 str r3,[r7,#44]
1323:../Dave/Generated/FREERTOS/queue.c ****     TimeOut_t xTimeOut;
1324:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 1978              	 .loc 1 1324 0
 1979 0010 FB68     	 ldr r3,[r7,#12]
 1980 0012 BB62     	 str r3,[r7,#40]
1325:../Dave/Generated/FREERTOS/queue.c **** 
1326:../Dave/Generated/FREERTOS/queue.c ****     /* Check the pointer is not NULL. */
1327:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( ( pxQueue ) );
 1981              	 .loc 1 1327 0
 1982 0014 BB6A     	 ldr r3,[r7,#40]
 1983 0016 002B     	 cmp r3,#0
 1984 0018 09D1     	 bne .L141
 1985              	.LBB175:
 1986              	.LBB176:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 1987              	 .loc 2 197 0 discriminator 1
 1988              	
 1989 001a 4FF0FC03 	 mov r3,#252
 1990 001e 83F31188 	 msr basepri,r3
 1991 0022 BFF36F8F 	 isb 
 1992 0026 BFF34F8F 	 dsb 
 1993              	
 1994              	
 1995              	 .thumb
 1996 002a 3B62     	 str r3,[r7,#32]
 1997              	.L142:
 1998              	.LBE176:
 1999              	.LBE175:
 2000              	 .loc 1 1327 0 discriminator 1
 2001 002c FEE7     	 b .L142
 2002              	.L141:
1328:../Dave/Generated/FREERTOS/queue.c **** 
1329:../Dave/Generated/FREERTOS/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1330:../Dave/Generated/FREERTOS/queue.c ****      * is zero (so no data is copied into the buffer). */
1331:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
 2003              	 .loc 1 1331 0
 2004 002e BB68     	 ldr r3,[r7,#8]
 2005 0030 002B     	 cmp r3,#0
 2006 0032 03D1     	 bne .L143
 2007              	 .loc 1 1331 0 is_stmt 0 discriminator 2
 2008 0034 BB6A     	 ldr r3,[r7,#40]
 2009 0036 1B6C     	 ldr r3,[r3,#64]
 2010 0038 002B     	 cmp r3,#0
 2011 003a 01D1     	 bne .L144
 2012              	.L143:
 2013              	 .loc 1 1331 0 discriminator 3
 2014 003c 0123     	 movs r3,#1
 2015 003e 00E0     	 b .L145
 2016              	.L144:
 2017              	 .loc 1 1331 0 discriminator 4
 2018 0040 0023     	 movs r3,#0
 2019              	.L145:
 2020              	 .loc 1 1331 0 discriminator 6
 2021 0042 002B     	 cmp r3,#0
 2022 0044 09D1     	 bne .L146
 2023              	.LBB177:
 2024              	.LBB178:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2025              	 .loc 2 197 0 is_stmt 1 discriminator 7
 2026              	
 2027 0046 4FF0FC03 	 mov r3,#252
 2028 004a 83F31188 	 msr basepri,r3
 2029 004e BFF36F8F 	 isb 
 2030 0052 BFF34F8F 	 dsb 
 2031              	
 2032              	
 2033              	 .thumb
 2034 0056 FB61     	 str r3,[r7,#28]
 2035              	.L147:
 2036              	.LBE178:
 2037              	.LBE177:
 2038              	 .loc 1 1331 0 discriminator 2
 2039 0058 FEE7     	 b .L147
 2040              	.L146:
1332:../Dave/Generated/FREERTOS/queue.c **** 
1333:../Dave/Generated/FREERTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1334:../Dave/Generated/FREERTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1335:../Dave/Generated/FREERTOS/queue.c ****         {
1336:../Dave/Generated/FREERTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 2041              	 .loc 1 1336 0
 2042 005a FFF7FEFF 	 bl xTaskGetSchedulerState
 2043 005e 0346     	 mov r3,r0
 2044 0060 002B     	 cmp r3,#0
 2045 0062 02D1     	 bne .L148
 2046              	 .loc 1 1336 0 is_stmt 0 discriminator 2
 2047 0064 7B68     	 ldr r3,[r7,#4]
 2048 0066 002B     	 cmp r3,#0
 2049 0068 01D1     	 bne .L149
 2050              	.L148:
 2051              	 .loc 1 1336 0 discriminator 3
 2052 006a 0123     	 movs r3,#1
 2053 006c 00E0     	 b .L150
 2054              	.L149:
 2055              	 .loc 1 1336 0 discriminator 4
 2056 006e 0023     	 movs r3,#0
 2057              	.L150:
 2058              	 .loc 1 1336 0 discriminator 6
 2059 0070 002B     	 cmp r3,#0
 2060 0072 09D1     	 bne .L151
 2061              	.LBB179:
 2062              	.LBB180:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2063              	 .loc 2 197 0 is_stmt 1 discriminator 7
 2064              	
 2065 0074 4FF0FC03 	 mov r3,#252
 2066 0078 83F31188 	 msr basepri,r3
 2067 007c BFF36F8F 	 isb 
 2068 0080 BFF34F8F 	 dsb 
 2069              	
 2070              	
 2071              	 .thumb
 2072 0084 BB61     	 str r3,[r7,#24]
 2073              	.L152:
 2074              	.LBE180:
 2075              	.LBE179:
 2076              	 .loc 1 1336 0 discriminator 3
 2077 0086 FEE7     	 b .L152
 2078              	.L151:
1337:../Dave/Generated/FREERTOS/queue.c ****         }
1338:../Dave/Generated/FREERTOS/queue.c ****     #endif
1339:../Dave/Generated/FREERTOS/queue.c **** 
1340:../Dave/Generated/FREERTOS/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1341:../Dave/Generated/FREERTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
1342:../Dave/Generated/FREERTOS/queue.c ****      * interest of execution time efficiency. */
1343:../Dave/Generated/FREERTOS/queue.c ****     for( ; ; )
1344:../Dave/Generated/FREERTOS/queue.c ****     {
1345:../Dave/Generated/FREERTOS/queue.c ****         taskENTER_CRITICAL();
 2079              	 .loc 1 1345 0
 2080 0088 FFF7FEFF 	 bl vPortEnterCritical
 2081              	.LBB181:
1346:../Dave/Generated/FREERTOS/queue.c ****         {
1347:../Dave/Generated/FREERTOS/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2082              	 .loc 1 1347 0
 2083 008c BB6A     	 ldr r3,[r7,#40]
 2084 008e 9B6B     	 ldr r3,[r3,#56]
 2085 0090 7B62     	 str r3,[r7,#36]
1348:../Dave/Generated/FREERTOS/queue.c **** 
1349:../Dave/Generated/FREERTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1350:../Dave/Generated/FREERTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1351:../Dave/Generated/FREERTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2086              	 .loc 1 1351 0
 2087 0092 7B6A     	 ldr r3,[r7,#36]
 2088 0094 002B     	 cmp r3,#0
 2089 0096 1FD0     	 beq .L153
1352:../Dave/Generated/FREERTOS/queue.c ****             {
1353:../Dave/Generated/FREERTOS/queue.c ****                 /* Data available, remove one item. */
1354:../Dave/Generated/FREERTOS/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
 2090              	 .loc 1 1354 0
 2091 0098 B86A     	 ldr r0,[r7,#40]
 2092 009a B968     	 ldr r1,[r7,#8]
 2093 009c FFF7FEFF 	 bl prvCopyDataFromQueue
1355:../Dave/Generated/FREERTOS/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1356:../Dave/Generated/FREERTOS/queue.c ****                 pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2094              	 .loc 1 1356 0
 2095 00a0 7B6A     	 ldr r3,[r7,#36]
 2096 00a2 5A1E     	 subs r2,r3,#1
 2097 00a4 BB6A     	 ldr r3,[r7,#40]
 2098 00a6 9A63     	 str r2,[r3,#56]
1357:../Dave/Generated/FREERTOS/queue.c **** 
1358:../Dave/Generated/FREERTOS/queue.c ****                 /* There is now space in the queue, were any tasks waiting to
1359:../Dave/Generated/FREERTOS/queue.c ****                  * post to the queue?  If so, unblock the highest priority waiting
1360:../Dave/Generated/FREERTOS/queue.c ****                  * task. */
1361:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2099              	 .loc 1 1361 0
 2100 00a8 BB6A     	 ldr r3,[r7,#40]
 2101 00aa 1B69     	 ldr r3,[r3,#16]
 2102 00ac 002B     	 cmp r3,#0
 2103 00ae 0FD0     	 beq .L154
1362:../Dave/Generated/FREERTOS/queue.c ****                 {
1363:../Dave/Generated/FREERTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2104              	 .loc 1 1363 0
 2105 00b0 BB6A     	 ldr r3,[r7,#40]
 2106 00b2 1033     	 adds r3,r3,#16
 2107 00b4 1846     	 mov r0,r3
 2108 00b6 FFF7FEFF 	 bl xTaskRemoveFromEventList
 2109 00ba 0346     	 mov r3,r0
 2110 00bc 002B     	 cmp r3,#0
 2111 00be 07D0     	 beq .L154
1364:../Dave/Generated/FREERTOS/queue.c ****                     {
1365:../Dave/Generated/FREERTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 2112              	 .loc 1 1365 0
 2113 00c0 3E4B     	 ldr r3,.L165
 2114 00c2 4FF08052 	 mov r2,#268435456
 2115 00c6 1A60     	 str r2,[r3]
 2116              	
 2117 00c8 BFF34F8F 	 dsb
 2118              	
 2119              	
 2120 00cc BFF36F8F 	 isb
 2121              	
 2122              	 .thumb
 2123              	.L154:
1366:../Dave/Generated/FREERTOS/queue.c ****                     }
1367:../Dave/Generated/FREERTOS/queue.c ****                     else
1368:../Dave/Generated/FREERTOS/queue.c ****                     {
1369:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1370:../Dave/Generated/FREERTOS/queue.c ****                     }
1371:../Dave/Generated/FREERTOS/queue.c ****                 }
1372:../Dave/Generated/FREERTOS/queue.c ****                 else
1373:../Dave/Generated/FREERTOS/queue.c ****                 {
1374:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1375:../Dave/Generated/FREERTOS/queue.c ****                 }
1376:../Dave/Generated/FREERTOS/queue.c **** 
1377:../Dave/Generated/FREERTOS/queue.c ****                 taskEXIT_CRITICAL();
 2124              	 .loc 1 1377 0
 2125 00d0 FFF7FEFF 	 bl vPortExitCritical
1378:../Dave/Generated/FREERTOS/queue.c ****                 return pdPASS;
 2126              	 .loc 1 1378 0
 2127 00d4 0123     	 movs r3,#1
 2128 00d6 6DE0     	 b .L164
 2129              	.L153:
1379:../Dave/Generated/FREERTOS/queue.c ****             }
1380:../Dave/Generated/FREERTOS/queue.c ****             else
1381:../Dave/Generated/FREERTOS/queue.c ****             {
1382:../Dave/Generated/FREERTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 2130              	 .loc 1 1382 0
 2131 00d8 7B68     	 ldr r3,[r7,#4]
 2132 00da 002B     	 cmp r3,#0
 2133 00dc 03D1     	 bne .L156
1383:../Dave/Generated/FREERTOS/queue.c ****                 {
1384:../Dave/Generated/FREERTOS/queue.c ****                     /* The queue was empty and no block time is specified (or
1385:../Dave/Generated/FREERTOS/queue.c ****                      * the block time has expired) so leave now. */
1386:../Dave/Generated/FREERTOS/queue.c ****                     taskEXIT_CRITICAL();
 2134              	 .loc 1 1386 0
 2135 00de FFF7FEFF 	 bl vPortExitCritical
1387:../Dave/Generated/FREERTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1388:../Dave/Generated/FREERTOS/queue.c ****                     return errQUEUE_EMPTY;
 2136              	 .loc 1 1388 0
 2137 00e2 0023     	 movs r3,#0
 2138 00e4 66E0     	 b .L164
 2139              	.L156:
1389:../Dave/Generated/FREERTOS/queue.c ****                 }
1390:../Dave/Generated/FREERTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 2140              	 .loc 1 1390 0
 2141 00e6 FB6A     	 ldr r3,[r7,#44]
 2142 00e8 002B     	 cmp r3,#0
 2143 00ea 06D1     	 bne .L157
1391:../Dave/Generated/FREERTOS/queue.c ****                 {
1392:../Dave/Generated/FREERTOS/queue.c ****                     /* The queue was empty and a block time was specified so
1393:../Dave/Generated/FREERTOS/queue.c ****                      * configure the timeout structure. */
1394:../Dave/Generated/FREERTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 2144              	 .loc 1 1394 0
 2145 00ec 07F11003 	 add r3,r7,#16
 2146 00f0 1846     	 mov r0,r3
 2147 00f2 FFF7FEFF 	 bl vTaskInternalSetTimeOutState
1395:../Dave/Generated/FREERTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 2148              	 .loc 1 1395 0
 2149 00f6 0123     	 movs r3,#1
 2150 00f8 FB62     	 str r3,[r7,#44]
 2151              	.L157:
 2152              	.LBE181:
1396:../Dave/Generated/FREERTOS/queue.c ****                 }
1397:../Dave/Generated/FREERTOS/queue.c ****                 else
1398:../Dave/Generated/FREERTOS/queue.c ****                 {
1399:../Dave/Generated/FREERTOS/queue.c ****                     /* Entry time was already set. */
1400:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1401:../Dave/Generated/FREERTOS/queue.c ****                 }
1402:../Dave/Generated/FREERTOS/queue.c ****             }
1403:../Dave/Generated/FREERTOS/queue.c ****         }
1404:../Dave/Generated/FREERTOS/queue.c ****         taskEXIT_CRITICAL();
 2153              	 .loc 1 1404 0
 2154 00fa FFF7FEFF 	 bl vPortExitCritical
1405:../Dave/Generated/FREERTOS/queue.c **** 
1406:../Dave/Generated/FREERTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1407:../Dave/Generated/FREERTOS/queue.c ****          * now the critical section has been exited. */
1408:../Dave/Generated/FREERTOS/queue.c **** 
1409:../Dave/Generated/FREERTOS/queue.c ****         vTaskSuspendAll();
 2155              	 .loc 1 1409 0
 2156 00fe FFF7FEFF 	 bl vTaskSuspendAll
1410:../Dave/Generated/FREERTOS/queue.c ****         prvLockQueue( pxQueue );
 2157              	 .loc 1 1410 0
 2158 0102 FFF7FEFF 	 bl vPortEnterCritical
 2159 0106 BB6A     	 ldr r3,[r7,#40]
 2160 0108 93F84430 	 ldrb r3,[r3,#68]
 2161 010c DBB2     	 uxtb r3,r3
 2162 010e 5BB2     	 sxtb r3,r3
 2163 0110 B3F1FF3F 	 cmp r3,#-1
 2164 0114 03D1     	 bne .L158
 2165              	 .loc 1 1410 0 is_stmt 0 discriminator 1
 2166 0116 BB6A     	 ldr r3,[r7,#40]
 2167 0118 0022     	 movs r2,#0
 2168 011a 83F84420 	 strb r2,[r3,#68]
 2169              	.L158:
 2170              	 .loc 1 1410 0 discriminator 3
 2171 011e BB6A     	 ldr r3,[r7,#40]
 2172 0120 93F84530 	 ldrb r3,[r3,#69]
 2173 0124 DBB2     	 uxtb r3,r3
 2174 0126 5BB2     	 sxtb r3,r3
 2175 0128 B3F1FF3F 	 cmp r3,#-1
 2176 012c 03D1     	 bne .L159
 2177              	 .loc 1 1410 0 discriminator 4
 2178 012e BB6A     	 ldr r3,[r7,#40]
 2179 0130 0022     	 movs r2,#0
 2180 0132 83F84520 	 strb r2,[r3,#69]
 2181              	.L159:
 2182              	 .loc 1 1410 0 discriminator 6
 2183 0136 FFF7FEFF 	 bl vPortExitCritical
1411:../Dave/Generated/FREERTOS/queue.c **** 
1412:../Dave/Generated/FREERTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1413:../Dave/Generated/FREERTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2184              	 .loc 1 1413 0 is_stmt 1 discriminator 6
 2185 013a 07F11002 	 add r2,r7,#16
 2186 013e 3B1D     	 adds r3,r7,#4
 2187 0140 1046     	 mov r0,r2
 2188 0142 1946     	 mov r1,r3
 2189 0144 FFF7FEFF 	 bl xTaskCheckForTimeOut
 2190 0148 0346     	 mov r3,r0
 2191 014a 002B     	 cmp r3,#0
 2192 014c 24D1     	 bne .L160
1414:../Dave/Generated/FREERTOS/queue.c ****         {
1415:../Dave/Generated/FREERTOS/queue.c ****             /* The timeout has not expired.  If the queue is still empty place
1416:../Dave/Generated/FREERTOS/queue.c ****              * the task on the list of tasks waiting to receive from the queue. */
1417:../Dave/Generated/FREERTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2193              	 .loc 1 1417 0
 2194 014e B86A     	 ldr r0,[r7,#40]
 2195 0150 FFF7FEFF 	 bl prvIsQueueEmpty
 2196 0154 0346     	 mov r3,r0
 2197 0156 002B     	 cmp r3,#0
 2198 0158 18D0     	 beq .L161
1418:../Dave/Generated/FREERTOS/queue.c ****             {
1419:../Dave/Generated/FREERTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1420:../Dave/Generated/FREERTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2199              	 .loc 1 1420 0
 2200 015a BB6A     	 ldr r3,[r7,#40]
 2201 015c 03F12402 	 add r2,r3,#36
 2202 0160 7B68     	 ldr r3,[r7,#4]
 2203 0162 1046     	 mov r0,r2
 2204 0164 1946     	 mov r1,r3
 2205 0166 FFF7FEFF 	 bl vTaskPlaceOnEventList
1421:../Dave/Generated/FREERTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2206              	 .loc 1 1421 0
 2207 016a B86A     	 ldr r0,[r7,#40]
 2208 016c FFF7FEFF 	 bl prvUnlockQueue
1422:../Dave/Generated/FREERTOS/queue.c **** 
1423:../Dave/Generated/FREERTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 2209              	 .loc 1 1423 0
 2210 0170 FFF7FEFF 	 bl xTaskResumeAll
 2211 0174 0346     	 mov r3,r0
 2212 0176 002B     	 cmp r3,#0
 2213 0178 1BD1     	 bne .L163
1424:../Dave/Generated/FREERTOS/queue.c ****                 {
1425:../Dave/Generated/FREERTOS/queue.c ****                     portYIELD_WITHIN_API();
 2214              	 .loc 1 1425 0
 2215 017a 104B     	 ldr r3,.L165
 2216 017c 4FF08052 	 mov r2,#268435456
 2217 0180 1A60     	 str r2,[r3]
 2218              	
 2219 0182 BFF34F8F 	 dsb
 2220              	
 2221              	
 2222 0186 BFF36F8F 	 isb
 2223              	
 2224              	 .thumb
 2225 018a 12E0     	 b .L163
 2226              	.L161:
1426:../Dave/Generated/FREERTOS/queue.c ****                 }
1427:../Dave/Generated/FREERTOS/queue.c ****                 else
1428:../Dave/Generated/FREERTOS/queue.c ****                 {
1429:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1430:../Dave/Generated/FREERTOS/queue.c ****                 }
1431:../Dave/Generated/FREERTOS/queue.c ****             }
1432:../Dave/Generated/FREERTOS/queue.c ****             else
1433:../Dave/Generated/FREERTOS/queue.c ****             {
1434:../Dave/Generated/FREERTOS/queue.c ****                 /* The queue contains data again.  Loop back to try and read the
1435:../Dave/Generated/FREERTOS/queue.c ****                  * data. */
1436:../Dave/Generated/FREERTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2227              	 .loc 1 1436 0
 2228 018c B86A     	 ldr r0,[r7,#40]
 2229 018e FFF7FEFF 	 bl prvUnlockQueue
1437:../Dave/Generated/FREERTOS/queue.c ****                 ( void ) xTaskResumeAll();
 2230              	 .loc 1 1437 0
 2231 0192 FFF7FEFF 	 bl xTaskResumeAll
 2232 0196 77E7     	 b .L151
 2233              	.L160:
1438:../Dave/Generated/FREERTOS/queue.c ****             }
1439:../Dave/Generated/FREERTOS/queue.c ****         }
1440:../Dave/Generated/FREERTOS/queue.c ****         else
1441:../Dave/Generated/FREERTOS/queue.c ****         {
1442:../Dave/Generated/FREERTOS/queue.c ****             /* Timed out.  If there is no data in the queue exit, otherwise loop
1443:../Dave/Generated/FREERTOS/queue.c ****              * back and attempt to read the data. */
1444:../Dave/Generated/FREERTOS/queue.c ****             prvUnlockQueue( pxQueue );
 2234              	 .loc 1 1444 0
 2235 0198 B86A     	 ldr r0,[r7,#40]
 2236 019a FFF7FEFF 	 bl prvUnlockQueue
1445:../Dave/Generated/FREERTOS/queue.c ****             ( void ) xTaskResumeAll();
 2237              	 .loc 1 1445 0
 2238 019e FFF7FEFF 	 bl xTaskResumeAll
1446:../Dave/Generated/FREERTOS/queue.c **** 
1447:../Dave/Generated/FREERTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2239              	 .loc 1 1447 0
 2240 01a2 B86A     	 ldr r0,[r7,#40]
 2241 01a4 FFF7FEFF 	 bl prvIsQueueEmpty
 2242 01a8 0346     	 mov r3,r0
 2243 01aa 002B     	 cmp r3,#0
 2244 01ac 01D0     	 beq .L163
1448:../Dave/Generated/FREERTOS/queue.c ****             {
1449:../Dave/Generated/FREERTOS/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1450:../Dave/Generated/FREERTOS/queue.c ****                 return errQUEUE_EMPTY;
 2245              	 .loc 1 1450 0
 2246 01ae 0023     	 movs r3,#0
 2247 01b0 00E0     	 b .L164
 2248              	.L163:
1451:../Dave/Generated/FREERTOS/queue.c ****             }
1452:../Dave/Generated/FREERTOS/queue.c ****             else
1453:../Dave/Generated/FREERTOS/queue.c ****             {
1454:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1455:../Dave/Generated/FREERTOS/queue.c ****             }
1456:../Dave/Generated/FREERTOS/queue.c ****         }
1457:../Dave/Generated/FREERTOS/queue.c ****     } /*lint -restore */
 2249              	 .loc 1 1457 0 discriminator 5
 2250 01b2 69E7     	 b .L151
 2251              	.L164:
1458:../Dave/Generated/FREERTOS/queue.c **** }
 2252              	 .loc 1 1458 0 discriminator 6
 2253 01b4 1846     	 mov r0,r3
 2254 01b6 3037     	 adds r7,r7,#48
 2255              	.LCFI69:
 2256              	 .cfi_def_cfa_offset 8
 2257 01b8 BD46     	 mov sp,r7
 2258              	.LCFI70:
 2259              	 .cfi_def_cfa_register 13
 2260              	 
 2261 01ba 80BD     	 pop {r7,pc}
 2262              	.L166:
 2263              	 .align 2
 2264              	.L165:
 2265 01bc 04ED00E0 	 .word -536810236
 2266              	 .cfi_endproc
 2267              	.LFE151:
 2269              	 .section .text.xQueueSemaphoreTake,"ax",%progbits
 2270              	 .align 2
 2271              	 .global xQueueSemaphoreTake
 2272              	 .thumb
 2273              	 .thumb_func
 2275              	xQueueSemaphoreTake:
 2276              	.LFB152:
1459:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1460:../Dave/Generated/FREERTOS/queue.c **** 
1461:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
1462:../Dave/Generated/FREERTOS/queue.c ****                                 TickType_t xTicksToWait )
1463:../Dave/Generated/FREERTOS/queue.c **** {
 2277              	 .loc 1 1463 0
 2278              	 .cfi_startproc
 2279              	 
 2280              	 
 2281 0000 80B5     	 push {r7,lr}
 2282              	.LCFI71:
 2283              	 .cfi_def_cfa_offset 8
 2284              	 .cfi_offset 7,-8
 2285              	 .cfi_offset 14,-4
 2286 0002 8EB0     	 sub sp,sp,#56
 2287              	.LCFI72:
 2288              	 .cfi_def_cfa_offset 64
 2289 0004 00AF     	 add r7,sp,#0
 2290              	.LCFI73:
 2291              	 .cfi_def_cfa_register 7
 2292 0006 7860     	 str r0,[r7,#4]
 2293 0008 3960     	 str r1,[r7]
1464:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2294              	 .loc 1 1464 0
 2295 000a 0023     	 movs r3,#0
 2296 000c 7B63     	 str r3,[r7,#52]
1465:../Dave/Generated/FREERTOS/queue.c ****     TimeOut_t xTimeOut;
1466:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2297              	 .loc 1 1466 0
 2298 000e 7B68     	 ldr r3,[r7,#4]
 2299 0010 FB62     	 str r3,[r7,#44]
1467:../Dave/Generated/FREERTOS/queue.c **** 
1468:../Dave/Generated/FREERTOS/queue.c ****     #if ( configUSE_MUTEXES == 1 )
1469:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xInheritanceOccurred = pdFALSE;
 2300              	 .loc 1 1469 0
 2301 0012 0023     	 movs r3,#0
 2302 0014 3B63     	 str r3,[r7,#48]
1470:../Dave/Generated/FREERTOS/queue.c ****     #endif
1471:../Dave/Generated/FREERTOS/queue.c **** 
1472:../Dave/Generated/FREERTOS/queue.c ****     /* Check the queue pointer is not NULL. */
1473:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( ( pxQueue ) );
 2303              	 .loc 1 1473 0
 2304 0016 FB6A     	 ldr r3,[r7,#44]
 2305 0018 002B     	 cmp r3,#0
 2306 001a 09D1     	 bne .L168
 2307              	.LBB182:
 2308              	.LBB183:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2309              	 .loc 2 197 0 discriminator 1
 2310              	
 2311 001c 4FF0FC03 	 mov r3,#252
 2312 0020 83F31188 	 msr basepri,r3
 2313 0024 BFF36F8F 	 isb 
 2314 0028 BFF34F8F 	 dsb 
 2315              	
 2316              	
 2317              	 .thumb
 2318 002c 3B62     	 str r3,[r7,#32]
 2319              	.L169:
 2320              	.LBE183:
 2321              	.LBE182:
 2322              	 .loc 1 1473 0 discriminator 1
 2323 002e FEE7     	 b .L169
 2324              	.L168:
1474:../Dave/Generated/FREERTOS/queue.c **** 
1475:../Dave/Generated/FREERTOS/queue.c ****     /* Check this really is a semaphore, in which case the item size will be
1476:../Dave/Generated/FREERTOS/queue.c ****      * 0. */
1477:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
 2325              	 .loc 1 1477 0
 2326 0030 FB6A     	 ldr r3,[r7,#44]
 2327 0032 1B6C     	 ldr r3,[r3,#64]
 2328 0034 002B     	 cmp r3,#0
 2329 0036 09D0     	 beq .L170
 2330              	.LBB184:
 2331              	.LBB185:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2332              	 .loc 2 197 0 discriminator 1
 2333              	
 2334 0038 4FF0FC03 	 mov r3,#252
 2335 003c 83F31188 	 msr basepri,r3
 2336 0040 BFF36F8F 	 isb 
 2337 0044 BFF34F8F 	 dsb 
 2338              	
 2339              	
 2340              	 .thumb
 2341 0048 FB61     	 str r3,[r7,#28]
 2342              	.L171:
 2343              	.LBE185:
 2344              	.LBE184:
 2345              	 .loc 1 1477 0 discriminator 2
 2346 004a FEE7     	 b .L171
 2347              	.L170:
1478:../Dave/Generated/FREERTOS/queue.c **** 
1479:../Dave/Generated/FREERTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1480:../Dave/Generated/FREERTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1481:../Dave/Generated/FREERTOS/queue.c ****         {
1482:../Dave/Generated/FREERTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 2348              	 .loc 1 1482 0
 2349 004c FFF7FEFF 	 bl xTaskGetSchedulerState
 2350 0050 0346     	 mov r3,r0
 2351 0052 002B     	 cmp r3,#0
 2352 0054 02D1     	 bne .L172
 2353              	 .loc 1 1482 0 is_stmt 0 discriminator 2
 2354 0056 3B68     	 ldr r3,[r7]
 2355 0058 002B     	 cmp r3,#0
 2356 005a 01D1     	 bne .L173
 2357              	.L172:
 2358              	 .loc 1 1482 0 discriminator 3
 2359 005c 0123     	 movs r3,#1
 2360 005e 00E0     	 b .L174
 2361              	.L173:
 2362              	 .loc 1 1482 0 discriminator 4
 2363 0060 0023     	 movs r3,#0
 2364              	.L174:
 2365              	 .loc 1 1482 0 discriminator 6
 2366 0062 002B     	 cmp r3,#0
 2367 0064 09D1     	 bne .L175
 2368              	.LBB186:
 2369              	.LBB187:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2370              	 .loc 2 197 0 is_stmt 1 discriminator 7
 2371              	
 2372 0066 4FF0FC03 	 mov r3,#252
 2373 006a 83F31188 	 msr basepri,r3
 2374 006e BFF36F8F 	 isb 
 2375 0072 BFF34F8F 	 dsb 
 2376              	
 2377              	
 2378              	 .thumb
 2379 0076 BB61     	 str r3,[r7,#24]
 2380              	.L176:
 2381              	.LBE187:
 2382              	.LBE186:
 2383              	 .loc 1 1482 0 discriminator 3
 2384 0078 FEE7     	 b .L176
 2385              	.L175:
1483:../Dave/Generated/FREERTOS/queue.c ****         }
1484:../Dave/Generated/FREERTOS/queue.c ****     #endif
1485:../Dave/Generated/FREERTOS/queue.c **** 
1486:../Dave/Generated/FREERTOS/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1487:../Dave/Generated/FREERTOS/queue.c ****      * statements within the function itself.  This is done in the interest
1488:../Dave/Generated/FREERTOS/queue.c ****      * of execution time efficiency. */
1489:../Dave/Generated/FREERTOS/queue.c ****     for( ; ; )
1490:../Dave/Generated/FREERTOS/queue.c ****     {
1491:../Dave/Generated/FREERTOS/queue.c ****         taskENTER_CRITICAL();
 2386              	 .loc 1 1491 0
 2387 007a FFF7FEFF 	 bl vPortEnterCritical
 2388              	.LBB188:
1492:../Dave/Generated/FREERTOS/queue.c ****         {
1493:../Dave/Generated/FREERTOS/queue.c ****             /* Semaphores are queues with an item size of 0, and where the
1494:../Dave/Generated/FREERTOS/queue.c ****              * number of messages in the queue is the semaphore's count value. */
1495:../Dave/Generated/FREERTOS/queue.c ****             const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 2389              	 .loc 1 1495 0
 2390 007e FB6A     	 ldr r3,[r7,#44]
 2391 0080 9B6B     	 ldr r3,[r3,#56]
 2392 0082 BB62     	 str r3,[r7,#40]
1496:../Dave/Generated/FREERTOS/queue.c **** 
1497:../Dave/Generated/FREERTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1498:../Dave/Generated/FREERTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1499:../Dave/Generated/FREERTOS/queue.c ****             if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 2393              	 .loc 1 1499 0
 2394 0084 BB6A     	 ldr r3,[r7,#40]
 2395 0086 002B     	 cmp r3,#0
 2396 0088 24D0     	 beq .L177
1500:../Dave/Generated/FREERTOS/queue.c ****             {
1501:../Dave/Generated/FREERTOS/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1502:../Dave/Generated/FREERTOS/queue.c **** 
1503:../Dave/Generated/FREERTOS/queue.c ****                 /* Semaphores are queues with a data size of zero and where the
1504:../Dave/Generated/FREERTOS/queue.c ****                  * messages waiting is the semaphore's count.  Reduce the count. */
1505:../Dave/Generated/FREERTOS/queue.c ****                 pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 2397              	 .loc 1 1505 0
 2398 008a BB6A     	 ldr r3,[r7,#40]
 2399 008c 5A1E     	 subs r2,r3,#1
 2400 008e FB6A     	 ldr r3,[r7,#44]
 2401 0090 9A63     	 str r2,[r3,#56]
1506:../Dave/Generated/FREERTOS/queue.c **** 
1507:../Dave/Generated/FREERTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1508:../Dave/Generated/FREERTOS/queue.c ****                     {
1509:../Dave/Generated/FREERTOS/queue.c ****                         if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2402              	 .loc 1 1509 0
 2403 0092 FB6A     	 ldr r3,[r7,#44]
 2404 0094 1B68     	 ldr r3,[r3]
 2405 0096 002B     	 cmp r3,#0
 2406 0098 04D1     	 bne .L178
1510:../Dave/Generated/FREERTOS/queue.c ****                         {
1511:../Dave/Generated/FREERTOS/queue.c ****                             /* Record the information required to implement
1512:../Dave/Generated/FREERTOS/queue.c ****                              * priority inheritance should it become necessary. */
1513:../Dave/Generated/FREERTOS/queue.c ****                             pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 2407              	 .loc 1 1513 0
 2408 009a FFF7FEFF 	 bl pvTaskIncrementMutexHeldCount
 2409 009e 0246     	 mov r2,r0
 2410 00a0 FB6A     	 ldr r3,[r7,#44]
 2411 00a2 9A60     	 str r2,[r3,#8]
 2412              	.L178:
1514:../Dave/Generated/FREERTOS/queue.c ****                         }
1515:../Dave/Generated/FREERTOS/queue.c ****                         else
1516:../Dave/Generated/FREERTOS/queue.c ****                         {
1517:../Dave/Generated/FREERTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1518:../Dave/Generated/FREERTOS/queue.c ****                         }
1519:../Dave/Generated/FREERTOS/queue.c ****                     }
1520:../Dave/Generated/FREERTOS/queue.c ****                 #endif /* configUSE_MUTEXES */
1521:../Dave/Generated/FREERTOS/queue.c **** 
1522:../Dave/Generated/FREERTOS/queue.c ****                 /* Check to see if other tasks are blocked waiting to give the
1523:../Dave/Generated/FREERTOS/queue.c ****                  * semaphore, and if so, unblock the highest priority such task. */
1524:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2413              	 .loc 1 1524 0
 2414 00a4 FB6A     	 ldr r3,[r7,#44]
 2415 00a6 1B69     	 ldr r3,[r3,#16]
 2416 00a8 002B     	 cmp r3,#0
 2417 00aa 0FD0     	 beq .L179
1525:../Dave/Generated/FREERTOS/queue.c ****                 {
1526:../Dave/Generated/FREERTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2418              	 .loc 1 1526 0
 2419 00ac FB6A     	 ldr r3,[r7,#44]
 2420 00ae 1033     	 adds r3,r3,#16
 2421 00b0 1846     	 mov r0,r3
 2422 00b2 FFF7FEFF 	 bl xTaskRemoveFromEventList
 2423 00b6 0346     	 mov r3,r0
 2424 00b8 002B     	 cmp r3,#0
 2425 00ba 07D0     	 beq .L179
1527:../Dave/Generated/FREERTOS/queue.c ****                     {
1528:../Dave/Generated/FREERTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 2426              	 .loc 1 1528 0
 2427 00bc 544B     	 ldr r3,.L194
 2428 00be 4FF08052 	 mov r2,#268435456
 2429 00c2 1A60     	 str r2,[r3]
 2430              	
 2431 00c4 BFF34F8F 	 dsb
 2432              	
 2433              	
 2434 00c8 BFF36F8F 	 isb
 2435              	
 2436              	 .thumb
 2437              	.L179:
1529:../Dave/Generated/FREERTOS/queue.c ****                     }
1530:../Dave/Generated/FREERTOS/queue.c ****                     else
1531:../Dave/Generated/FREERTOS/queue.c ****                     {
1532:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1533:../Dave/Generated/FREERTOS/queue.c ****                     }
1534:../Dave/Generated/FREERTOS/queue.c ****                 }
1535:../Dave/Generated/FREERTOS/queue.c ****                 else
1536:../Dave/Generated/FREERTOS/queue.c ****                 {
1537:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1538:../Dave/Generated/FREERTOS/queue.c ****                 }
1539:../Dave/Generated/FREERTOS/queue.c **** 
1540:../Dave/Generated/FREERTOS/queue.c ****                 taskEXIT_CRITICAL();
 2438              	 .loc 1 1540 0
 2439 00cc FFF7FEFF 	 bl vPortExitCritical
1541:../Dave/Generated/FREERTOS/queue.c ****                 return pdPASS;
 2440              	 .loc 1 1541 0
 2441 00d0 0123     	 movs r3,#1
 2442 00d2 99E0     	 b .L193
 2443              	.L177:
1542:../Dave/Generated/FREERTOS/queue.c ****             }
1543:../Dave/Generated/FREERTOS/queue.c ****             else
1544:../Dave/Generated/FREERTOS/queue.c ****             {
1545:../Dave/Generated/FREERTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 2444              	 .loc 1 1545 0
 2445 00d4 3B68     	 ldr r3,[r7]
 2446 00d6 002B     	 cmp r3,#0
 2447 00d8 10D1     	 bne .L181
1546:../Dave/Generated/FREERTOS/queue.c ****                 {
1547:../Dave/Generated/FREERTOS/queue.c ****                     /* For inheritance to have occurred there must have been an
1548:../Dave/Generated/FREERTOS/queue.c ****                      * initial timeout, and an adjusted timeout cannot become 0, as
1549:../Dave/Generated/FREERTOS/queue.c ****                      * if it were 0 the function would have exited. */
1550:../Dave/Generated/FREERTOS/queue.c ****                     #if ( configUSE_MUTEXES == 1 )
1551:../Dave/Generated/FREERTOS/queue.c ****                         {
1552:../Dave/Generated/FREERTOS/queue.c ****                             configASSERT( xInheritanceOccurred == pdFALSE );
 2448              	 .loc 1 1552 0
 2449 00da 3B6B     	 ldr r3,[r7,#48]
 2450 00dc 002B     	 cmp r3,#0
 2451 00de 09D0     	 beq .L182
 2452              	.LBB189:
 2453              	.LBB190:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2454              	 .loc 2 197 0 discriminator 1
 2455              	
 2456 00e0 4FF0FC03 	 mov r3,#252
 2457 00e4 83F31188 	 msr basepri,r3
 2458 00e8 BFF36F8F 	 isb 
 2459 00ec BFF34F8F 	 dsb 
 2460              	
 2461              	
 2462              	 .thumb
 2463 00f0 7B61     	 str r3,[r7,#20]
 2464              	.L183:
 2465              	.LBE190:
 2466              	.LBE189:
 2467              	 .loc 1 1552 0 discriminator 4
 2468 00f2 FEE7     	 b .L183
 2469              	.L182:
1553:../Dave/Generated/FREERTOS/queue.c ****                         }
1554:../Dave/Generated/FREERTOS/queue.c ****                     #endif /* configUSE_MUTEXES */
1555:../Dave/Generated/FREERTOS/queue.c **** 
1556:../Dave/Generated/FREERTOS/queue.c ****                     /* The semaphore count was 0 and no block time is specified
1557:../Dave/Generated/FREERTOS/queue.c ****                      * (or the block time has expired) so exit now. */
1558:../Dave/Generated/FREERTOS/queue.c ****                     taskEXIT_CRITICAL();
 2470              	 .loc 1 1558 0
 2471 00f4 FFF7FEFF 	 bl vPortExitCritical
1559:../Dave/Generated/FREERTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1560:../Dave/Generated/FREERTOS/queue.c ****                     return errQUEUE_EMPTY;
 2472              	 .loc 1 1560 0
 2473 00f8 0023     	 movs r3,#0
 2474 00fa 85E0     	 b .L193
 2475              	.L181:
1561:../Dave/Generated/FREERTOS/queue.c ****                 }
1562:../Dave/Generated/FREERTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 2476              	 .loc 1 1562 0
 2477 00fc 7B6B     	 ldr r3,[r7,#52]
 2478 00fe 002B     	 cmp r3,#0
 2479 0100 06D1     	 bne .L184
1563:../Dave/Generated/FREERTOS/queue.c ****                 {
1564:../Dave/Generated/FREERTOS/queue.c ****                     /* The semaphore count was 0 and a block time was specified
1565:../Dave/Generated/FREERTOS/queue.c ****                      * so configure the timeout structure ready to block. */
1566:../Dave/Generated/FREERTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 2480              	 .loc 1 1566 0
 2481 0102 07F10C03 	 add r3,r7,#12
 2482 0106 1846     	 mov r0,r3
 2483 0108 FFF7FEFF 	 bl vTaskInternalSetTimeOutState
1567:../Dave/Generated/FREERTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 2484              	 .loc 1 1567 0
 2485 010c 0123     	 movs r3,#1
 2486 010e 7B63     	 str r3,[r7,#52]
 2487              	.L184:
 2488              	.LBE188:
1568:../Dave/Generated/FREERTOS/queue.c ****                 }
1569:../Dave/Generated/FREERTOS/queue.c ****                 else
1570:../Dave/Generated/FREERTOS/queue.c ****                 {
1571:../Dave/Generated/FREERTOS/queue.c ****                     /* Entry time was already set. */
1572:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1573:../Dave/Generated/FREERTOS/queue.c ****                 }
1574:../Dave/Generated/FREERTOS/queue.c ****             }
1575:../Dave/Generated/FREERTOS/queue.c ****         }
1576:../Dave/Generated/FREERTOS/queue.c ****         taskEXIT_CRITICAL();
 2489              	 .loc 1 1576 0
 2490 0110 FFF7FEFF 	 bl vPortExitCritical
1577:../Dave/Generated/FREERTOS/queue.c **** 
1578:../Dave/Generated/FREERTOS/queue.c ****         /* Interrupts and other tasks can give to and take from the semaphore
1579:../Dave/Generated/FREERTOS/queue.c ****          * now the critical section has been exited. */
1580:../Dave/Generated/FREERTOS/queue.c **** 
1581:../Dave/Generated/FREERTOS/queue.c ****         vTaskSuspendAll();
 2491              	 .loc 1 1581 0
 2492 0114 FFF7FEFF 	 bl vTaskSuspendAll
1582:../Dave/Generated/FREERTOS/queue.c ****         prvLockQueue( pxQueue );
 2493              	 .loc 1 1582 0
 2494 0118 FFF7FEFF 	 bl vPortEnterCritical
 2495 011c FB6A     	 ldr r3,[r7,#44]
 2496 011e 93F84430 	 ldrb r3,[r3,#68]
 2497 0122 DBB2     	 uxtb r3,r3
 2498 0124 5BB2     	 sxtb r3,r3
 2499 0126 B3F1FF3F 	 cmp r3,#-1
 2500 012a 03D1     	 bne .L185
 2501              	 .loc 1 1582 0 is_stmt 0 discriminator 1
 2502 012c FB6A     	 ldr r3,[r7,#44]
 2503 012e 0022     	 movs r2,#0
 2504 0130 83F84420 	 strb r2,[r3,#68]
 2505              	.L185:
 2506              	 .loc 1 1582 0 discriminator 3
 2507 0134 FB6A     	 ldr r3,[r7,#44]
 2508 0136 93F84530 	 ldrb r3,[r3,#69]
 2509 013a DBB2     	 uxtb r3,r3
 2510 013c 5BB2     	 sxtb r3,r3
 2511 013e B3F1FF3F 	 cmp r3,#-1
 2512 0142 03D1     	 bne .L186
 2513              	 .loc 1 1582 0 discriminator 4
 2514 0144 FB6A     	 ldr r3,[r7,#44]
 2515 0146 0022     	 movs r2,#0
 2516 0148 83F84520 	 strb r2,[r3,#69]
 2517              	.L186:
 2518              	 .loc 1 1582 0 discriminator 6
 2519 014c FFF7FEFF 	 bl vPortExitCritical
1583:../Dave/Generated/FREERTOS/queue.c **** 
1584:../Dave/Generated/FREERTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1585:../Dave/Generated/FREERTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2520              	 .loc 1 1585 0 is_stmt 1 discriminator 6
 2521 0150 07F10C02 	 add r2,r7,#12
 2522 0154 3B46     	 mov r3,r7
 2523 0156 1046     	 mov r0,r2
 2524 0158 1946     	 mov r1,r3
 2525 015a FFF7FEFF 	 bl xTaskCheckForTimeOut
 2526 015e 0346     	 mov r3,r0
 2527 0160 002B     	 cmp r3,#0
 2528 0162 32D1     	 bne .L187
1586:../Dave/Generated/FREERTOS/queue.c ****         {
1587:../Dave/Generated/FREERTOS/queue.c ****             /* A block time is specified and not expired.  If the semaphore
1588:../Dave/Generated/FREERTOS/queue.c ****              * count is 0 then enter the Blocked state to wait for a semaphore to
1589:../Dave/Generated/FREERTOS/queue.c ****              * become available.  As semaphores are implemented with queues the
1590:../Dave/Generated/FREERTOS/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1591:../Dave/Generated/FREERTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2529              	 .loc 1 1591 0
 2530 0164 F86A     	 ldr r0,[r7,#44]
 2531 0166 FFF7FEFF 	 bl prvIsQueueEmpty
 2532 016a 0346     	 mov r3,r0
 2533 016c 002B     	 cmp r3,#0
 2534 016e 26D0     	 beq .L188
1592:../Dave/Generated/FREERTOS/queue.c ****             {
1593:../Dave/Generated/FREERTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1594:../Dave/Generated/FREERTOS/queue.c **** 
1595:../Dave/Generated/FREERTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1596:../Dave/Generated/FREERTOS/queue.c ****                     {
1597:../Dave/Generated/FREERTOS/queue.c ****                         if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2535              	 .loc 1 1597 0
 2536 0170 FB6A     	 ldr r3,[r7,#44]
 2537 0172 1B68     	 ldr r3,[r3]
 2538 0174 002B     	 cmp r3,#0
 2539 0176 09D1     	 bne .L189
1598:../Dave/Generated/FREERTOS/queue.c ****                         {
1599:../Dave/Generated/FREERTOS/queue.c ****                             taskENTER_CRITICAL();
 2540              	 .loc 1 1599 0
 2541 0178 FFF7FEFF 	 bl vPortEnterCritical
1600:../Dave/Generated/FREERTOS/queue.c ****                             {
1601:../Dave/Generated/FREERTOS/queue.c ****                                 xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.
 2542              	 .loc 1 1601 0
 2543 017c FB6A     	 ldr r3,[r7,#44]
 2544 017e 9B68     	 ldr r3,[r3,#8]
 2545 0180 1846     	 mov r0,r3
 2546 0182 FFF7FEFF 	 bl xTaskPriorityInherit
 2547 0186 3863     	 str r0,[r7,#48]
1602:../Dave/Generated/FREERTOS/queue.c ****                             }
1603:../Dave/Generated/FREERTOS/queue.c ****                             taskEXIT_CRITICAL();
 2548              	 .loc 1 1603 0
 2549 0188 FFF7FEFF 	 bl vPortExitCritical
 2550              	.L189:
1604:../Dave/Generated/FREERTOS/queue.c ****                         }
1605:../Dave/Generated/FREERTOS/queue.c ****                         else
1606:../Dave/Generated/FREERTOS/queue.c ****                         {
1607:../Dave/Generated/FREERTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1608:../Dave/Generated/FREERTOS/queue.c ****                         }
1609:../Dave/Generated/FREERTOS/queue.c ****                     }
1610:../Dave/Generated/FREERTOS/queue.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1611:../Dave/Generated/FREERTOS/queue.c **** 
1612:../Dave/Generated/FREERTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2551              	 .loc 1 1612 0
 2552 018c FB6A     	 ldr r3,[r7,#44]
 2553 018e 03F12402 	 add r2,r3,#36
 2554 0192 3B68     	 ldr r3,[r7]
 2555 0194 1046     	 mov r0,r2
 2556 0196 1946     	 mov r1,r3
 2557 0198 FFF7FEFF 	 bl vTaskPlaceOnEventList
1613:../Dave/Generated/FREERTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2558              	 .loc 1 1613 0
 2559 019c F86A     	 ldr r0,[r7,#44]
 2560 019e FFF7FEFF 	 bl prvUnlockQueue
1614:../Dave/Generated/FREERTOS/queue.c **** 
1615:../Dave/Generated/FREERTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 2561              	 .loc 1 1615 0
 2562 01a2 FFF7FEFF 	 bl xTaskResumeAll
 2563 01a6 0346     	 mov r3,r0
 2564 01a8 002B     	 cmp r3,#0
 2565 01aa 2CD1     	 bne .L191
1616:../Dave/Generated/FREERTOS/queue.c ****                 {
1617:../Dave/Generated/FREERTOS/queue.c ****                     portYIELD_WITHIN_API();
 2566              	 .loc 1 1617 0
 2567 01ac 184B     	 ldr r3,.L194
 2568 01ae 4FF08052 	 mov r2,#268435456
 2569 01b2 1A60     	 str r2,[r3]
 2570              	
 2571 01b4 BFF34F8F 	 dsb
 2572              	
 2573              	
 2574 01b8 BFF36F8F 	 isb
 2575              	
 2576              	 .thumb
 2577 01bc 23E0     	 b .L191
 2578              	.L188:
1618:../Dave/Generated/FREERTOS/queue.c ****                 }
1619:../Dave/Generated/FREERTOS/queue.c ****                 else
1620:../Dave/Generated/FREERTOS/queue.c ****                 {
1621:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1622:../Dave/Generated/FREERTOS/queue.c ****                 }
1623:../Dave/Generated/FREERTOS/queue.c ****             }
1624:../Dave/Generated/FREERTOS/queue.c ****             else
1625:../Dave/Generated/FREERTOS/queue.c ****             {
1626:../Dave/Generated/FREERTOS/queue.c ****                 /* There was no timeout and the semaphore count was not 0, so
1627:../Dave/Generated/FREERTOS/queue.c ****                  * attempt to take the semaphore again. */
1628:../Dave/Generated/FREERTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2579              	 .loc 1 1628 0
 2580 01be F86A     	 ldr r0,[r7,#44]
 2581 01c0 FFF7FEFF 	 bl prvUnlockQueue
1629:../Dave/Generated/FREERTOS/queue.c ****                 ( void ) xTaskResumeAll();
 2582              	 .loc 1 1629 0
 2583 01c4 FFF7FEFF 	 bl xTaskResumeAll
 2584 01c8 57E7     	 b .L175
 2585              	.L187:
1630:../Dave/Generated/FREERTOS/queue.c ****             }
1631:../Dave/Generated/FREERTOS/queue.c ****         }
1632:../Dave/Generated/FREERTOS/queue.c ****         else
1633:../Dave/Generated/FREERTOS/queue.c ****         {
1634:../Dave/Generated/FREERTOS/queue.c ****             /* Timed out. */
1635:../Dave/Generated/FREERTOS/queue.c ****             prvUnlockQueue( pxQueue );
 2586              	 .loc 1 1635 0
 2587 01ca F86A     	 ldr r0,[r7,#44]
 2588 01cc FFF7FEFF 	 bl prvUnlockQueue
1636:../Dave/Generated/FREERTOS/queue.c ****             ( void ) xTaskResumeAll();
 2589              	 .loc 1 1636 0
 2590 01d0 FFF7FEFF 	 bl xTaskResumeAll
1637:../Dave/Generated/FREERTOS/queue.c **** 
1638:../Dave/Generated/FREERTOS/queue.c ****             /* If the semaphore count is 0 exit now as the timeout has
1639:../Dave/Generated/FREERTOS/queue.c ****              * expired.  Otherwise return to attempt to take the semaphore that is
1640:../Dave/Generated/FREERTOS/queue.c ****              * known to be available.  As semaphores are implemented by queues the
1641:../Dave/Generated/FREERTOS/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1642:../Dave/Generated/FREERTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2591              	 .loc 1 1642 0
 2592 01d4 F86A     	 ldr r0,[r7,#44]
 2593 01d6 FFF7FEFF 	 bl prvIsQueueEmpty
 2594 01da 0346     	 mov r3,r0
 2595 01dc 002B     	 cmp r3,#0
 2596 01de 12D0     	 beq .L191
1643:../Dave/Generated/FREERTOS/queue.c ****             {
1644:../Dave/Generated/FREERTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1645:../Dave/Generated/FREERTOS/queue.c ****                     {
1646:../Dave/Generated/FREERTOS/queue.c ****                         /* xInheritanceOccurred could only have be set if
1647:../Dave/Generated/FREERTOS/queue.c ****                          * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1648:../Dave/Generated/FREERTOS/queue.c ****                          * test the mutex type again to check it is actually a mutex. */
1649:../Dave/Generated/FREERTOS/queue.c ****                         if( xInheritanceOccurred != pdFALSE )
 2597              	 .loc 1 1649 0
 2598 01e0 3B6B     	 ldr r3,[r7,#48]
 2599 01e2 002B     	 cmp r3,#0
 2600 01e4 0DD0     	 beq .L192
1650:../Dave/Generated/FREERTOS/queue.c ****                         {
1651:../Dave/Generated/FREERTOS/queue.c ****                             taskENTER_CRITICAL();
 2601              	 .loc 1 1651 0
 2602 01e6 FFF7FEFF 	 bl vPortEnterCritical
 2603              	.LBB191:
1652:../Dave/Generated/FREERTOS/queue.c ****                             {
1653:../Dave/Generated/FREERTOS/queue.c ****                                 UBaseType_t uxHighestWaitingPriority;
1654:../Dave/Generated/FREERTOS/queue.c **** 
1655:../Dave/Generated/FREERTOS/queue.c ****                                 /* This task blocking on the mutex caused another
1656:../Dave/Generated/FREERTOS/queue.c ****                                  * task to inherit this task's priority.  Now this task
1657:../Dave/Generated/FREERTOS/queue.c ****                                  * has timed out the priority should be disinherited
1658:../Dave/Generated/FREERTOS/queue.c ****                                  * again, but only as low as the next highest priority
1659:../Dave/Generated/FREERTOS/queue.c ****                                  * task that is waiting for the same mutex. */
1660:../Dave/Generated/FREERTOS/queue.c ****                                 uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( px
 2604              	 .loc 1 1660 0
 2605 01ea F86A     	 ldr r0,[r7,#44]
 2606 01ec FFF7FEFF 	 bl prvGetDisinheritPriorityAfterTimeout
 2607 01f0 7862     	 str r0,[r7,#36]
1661:../Dave/Generated/FREERTOS/queue.c ****                                 vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHo
 2608              	 .loc 1 1661 0
 2609 01f2 FB6A     	 ldr r3,[r7,#44]
 2610 01f4 9B68     	 ldr r3,[r3,#8]
 2611 01f6 1846     	 mov r0,r3
 2612 01f8 796A     	 ldr r1,[r7,#36]
 2613 01fa FFF7FEFF 	 bl vTaskPriorityDisinheritAfterTimeout
 2614              	.LBE191:
1662:../Dave/Generated/FREERTOS/queue.c ****                             }
1663:../Dave/Generated/FREERTOS/queue.c ****                             taskEXIT_CRITICAL();
 2615              	 .loc 1 1663 0
 2616 01fe FFF7FEFF 	 bl vPortExitCritical
 2617              	.L192:
1664:../Dave/Generated/FREERTOS/queue.c ****                         }
1665:../Dave/Generated/FREERTOS/queue.c ****                     }
1666:../Dave/Generated/FREERTOS/queue.c ****                 #endif /* configUSE_MUTEXES */
1667:../Dave/Generated/FREERTOS/queue.c **** 
1668:../Dave/Generated/FREERTOS/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1669:../Dave/Generated/FREERTOS/queue.c ****                 return errQUEUE_EMPTY;
 2618              	 .loc 1 1669 0
 2619 0202 0023     	 movs r3,#0
 2620 0204 00E0     	 b .L193
 2621              	.L191:
1670:../Dave/Generated/FREERTOS/queue.c ****             }
1671:../Dave/Generated/FREERTOS/queue.c ****             else
1672:../Dave/Generated/FREERTOS/queue.c ****             {
1673:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1674:../Dave/Generated/FREERTOS/queue.c ****             }
1675:../Dave/Generated/FREERTOS/queue.c ****         }
1676:../Dave/Generated/FREERTOS/queue.c ****     } /*lint -restore */
 2622              	 .loc 1 1676 0 discriminator 6
 2623 0206 38E7     	 b .L175
 2624              	.L193:
1677:../Dave/Generated/FREERTOS/queue.c **** }
 2625              	 .loc 1 1677 0 discriminator 7
 2626 0208 1846     	 mov r0,r3
 2627 020a 3837     	 adds r7,r7,#56
 2628              	.LCFI74:
 2629              	 .cfi_def_cfa_offset 8
 2630 020c BD46     	 mov sp,r7
 2631              	.LCFI75:
 2632              	 .cfi_def_cfa_register 13
 2633              	 
 2634 020e 80BD     	 pop {r7,pc}
 2635              	.L195:
 2636              	 .align 2
 2637              	.L194:
 2638 0210 04ED00E0 	 .word -536810236
 2639              	 .cfi_endproc
 2640              	.LFE152:
 2642              	 .section .text.xQueuePeek,"ax",%progbits
 2643              	 .align 2
 2644              	 .global xQueuePeek
 2645              	 .thumb
 2646              	 .thumb_func
 2648              	xQueuePeek:
 2649              	.LFB153:
1678:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1679:../Dave/Generated/FREERTOS/queue.c **** 
1680:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue,
1681:../Dave/Generated/FREERTOS/queue.c ****                        void * const pvBuffer,
1682:../Dave/Generated/FREERTOS/queue.c ****                        TickType_t xTicksToWait )
1683:../Dave/Generated/FREERTOS/queue.c **** {
 2650              	 .loc 1 1683 0
 2651              	 .cfi_startproc
 2652              	 
 2653              	 
 2654 0000 80B5     	 push {r7,lr}
 2655              	.LCFI76:
 2656              	 .cfi_def_cfa_offset 8
 2657              	 .cfi_offset 7,-8
 2658              	 .cfi_offset 14,-4
 2659 0002 8EB0     	 sub sp,sp,#56
 2660              	.LCFI77:
 2661              	 .cfi_def_cfa_offset 64
 2662 0004 00AF     	 add r7,sp,#0
 2663              	.LCFI78:
 2664              	 .cfi_def_cfa_register 7
 2665 0006 F860     	 str r0,[r7,#12]
 2666 0008 B960     	 str r1,[r7,#8]
 2667 000a 7A60     	 str r2,[r7,#4]
1684:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2668              	 .loc 1 1684 0
 2669 000c 0023     	 movs r3,#0
 2670 000e 7B63     	 str r3,[r7,#52]
1685:../Dave/Generated/FREERTOS/queue.c ****     TimeOut_t xTimeOut;
1686:../Dave/Generated/FREERTOS/queue.c ****     int8_t * pcOriginalReadPosition;
1687:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2671              	 .loc 1 1687 0
 2672 0010 FB68     	 ldr r3,[r7,#12]
 2673 0012 3B63     	 str r3,[r7,#48]
1688:../Dave/Generated/FREERTOS/queue.c **** 
1689:../Dave/Generated/FREERTOS/queue.c ****     /* Check the pointer is not NULL. */
1690:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( ( pxQueue ) );
 2674              	 .loc 1 1690 0
 2675 0014 3B6B     	 ldr r3,[r7,#48]
 2676 0016 002B     	 cmp r3,#0
 2677 0018 09D1     	 bne .L197
 2678              	.LBB192:
 2679              	.LBB193:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2680              	 .loc 2 197 0 discriminator 1
 2681              	
 2682 001a 4FF0FC03 	 mov r3,#252
 2683 001e 83F31188 	 msr basepri,r3
 2684 0022 BFF36F8F 	 isb 
 2685 0026 BFF34F8F 	 dsb 
 2686              	
 2687              	
 2688              	 .thumb
 2689 002a 7B62     	 str r3,[r7,#36]
 2690              	.L198:
 2691              	.LBE193:
 2692              	.LBE192:
 2693              	 .loc 1 1690 0 discriminator 1
 2694 002c FEE7     	 b .L198
 2695              	.L197:
1691:../Dave/Generated/FREERTOS/queue.c **** 
1692:../Dave/Generated/FREERTOS/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1693:../Dave/Generated/FREERTOS/queue.c ****      * is zero (so no data is copied into the buffer. */
1694:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
 2696              	 .loc 1 1694 0
 2697 002e BB68     	 ldr r3,[r7,#8]
 2698 0030 002B     	 cmp r3,#0
 2699 0032 03D1     	 bne .L199
 2700              	 .loc 1 1694 0 is_stmt 0 discriminator 2
 2701 0034 3B6B     	 ldr r3,[r7,#48]
 2702 0036 1B6C     	 ldr r3,[r3,#64]
 2703 0038 002B     	 cmp r3,#0
 2704 003a 01D1     	 bne .L200
 2705              	.L199:
 2706              	 .loc 1 1694 0 discriminator 3
 2707 003c 0123     	 movs r3,#1
 2708 003e 00E0     	 b .L201
 2709              	.L200:
 2710              	 .loc 1 1694 0 discriminator 4
 2711 0040 0023     	 movs r3,#0
 2712              	.L201:
 2713              	 .loc 1 1694 0 discriminator 6
 2714 0042 002B     	 cmp r3,#0
 2715 0044 09D1     	 bne .L202
 2716              	.LBB194:
 2717              	.LBB195:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2718              	 .loc 2 197 0 is_stmt 1 discriminator 7
 2719              	
 2720 0046 4FF0FC03 	 mov r3,#252
 2721 004a 83F31188 	 msr basepri,r3
 2722 004e BFF36F8F 	 isb 
 2723 0052 BFF34F8F 	 dsb 
 2724              	
 2725              	
 2726              	 .thumb
 2727 0056 3B62     	 str r3,[r7,#32]
 2728              	.L203:
 2729              	.LBE195:
 2730              	.LBE194:
 2731              	 .loc 1 1694 0 discriminator 2
 2732 0058 FEE7     	 b .L203
 2733              	.L202:
1695:../Dave/Generated/FREERTOS/queue.c **** 
1696:../Dave/Generated/FREERTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1697:../Dave/Generated/FREERTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1698:../Dave/Generated/FREERTOS/queue.c ****         {
1699:../Dave/Generated/FREERTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 2734              	 .loc 1 1699 0
 2735 005a FFF7FEFF 	 bl xTaskGetSchedulerState
 2736 005e 0346     	 mov r3,r0
 2737 0060 002B     	 cmp r3,#0
 2738 0062 02D1     	 bne .L204
 2739              	 .loc 1 1699 0 is_stmt 0 discriminator 2
 2740 0064 7B68     	 ldr r3,[r7,#4]
 2741 0066 002B     	 cmp r3,#0
 2742 0068 01D1     	 bne .L205
 2743              	.L204:
 2744              	 .loc 1 1699 0 discriminator 3
 2745 006a 0123     	 movs r3,#1
 2746 006c 00E0     	 b .L206
 2747              	.L205:
 2748              	 .loc 1 1699 0 discriminator 4
 2749 006e 0023     	 movs r3,#0
 2750              	.L206:
 2751              	 .loc 1 1699 0 discriminator 6
 2752 0070 002B     	 cmp r3,#0
 2753 0072 09D1     	 bne .L207
 2754              	.LBB196:
 2755              	.LBB197:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2756              	 .loc 2 197 0 is_stmt 1 discriminator 7
 2757              	
 2758 0074 4FF0FC03 	 mov r3,#252
 2759 0078 83F31188 	 msr basepri,r3
 2760 007c BFF36F8F 	 isb 
 2761 0080 BFF34F8F 	 dsb 
 2762              	
 2763              	
 2764              	 .thumb
 2765 0084 FB61     	 str r3,[r7,#28]
 2766              	.L208:
 2767              	.LBE197:
 2768              	.LBE196:
 2769              	 .loc 1 1699 0 discriminator 3
 2770 0086 FEE7     	 b .L208
 2771              	.L207:
1700:../Dave/Generated/FREERTOS/queue.c ****         }
1701:../Dave/Generated/FREERTOS/queue.c ****     #endif
1702:../Dave/Generated/FREERTOS/queue.c **** 
1703:../Dave/Generated/FREERTOS/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1704:../Dave/Generated/FREERTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
1705:../Dave/Generated/FREERTOS/queue.c ****      * interest of execution time efficiency. */
1706:../Dave/Generated/FREERTOS/queue.c ****     for( ; ; )
1707:../Dave/Generated/FREERTOS/queue.c ****     {
1708:../Dave/Generated/FREERTOS/queue.c ****         taskENTER_CRITICAL();
 2772              	 .loc 1 1708 0
 2773 0088 FFF7FEFF 	 bl vPortEnterCritical
 2774              	.LBB198:
1709:../Dave/Generated/FREERTOS/queue.c ****         {
1710:../Dave/Generated/FREERTOS/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2775              	 .loc 1 1710 0
 2776 008c 3B6B     	 ldr r3,[r7,#48]
 2777 008e 9B6B     	 ldr r3,[r3,#56]
 2778 0090 FB62     	 str r3,[r7,#44]
1711:../Dave/Generated/FREERTOS/queue.c **** 
1712:../Dave/Generated/FREERTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1713:../Dave/Generated/FREERTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1714:../Dave/Generated/FREERTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2779              	 .loc 1 1714 0
 2780 0092 FB6A     	 ldr r3,[r7,#44]
 2781 0094 002B     	 cmp r3,#0
 2782 0096 21D0     	 beq .L209
1715:../Dave/Generated/FREERTOS/queue.c ****             {
1716:../Dave/Generated/FREERTOS/queue.c ****                 /* Remember the read position so it can be reset after the data
1717:../Dave/Generated/FREERTOS/queue.c ****                  * is read from the queue as this function is only peeking the
1718:../Dave/Generated/FREERTOS/queue.c ****                  * data, not removing it. */
1719:../Dave/Generated/FREERTOS/queue.c ****                 pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 2783              	 .loc 1 1719 0
 2784 0098 3B6B     	 ldr r3,[r7,#48]
 2785 009a DB68     	 ldr r3,[r3,#12]
 2786 009c BB62     	 str r3,[r7,#40]
1720:../Dave/Generated/FREERTOS/queue.c **** 
1721:../Dave/Generated/FREERTOS/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
 2787              	 .loc 1 1721 0
 2788 009e 386B     	 ldr r0,[r7,#48]
 2789 00a0 B968     	 ldr r1,[r7,#8]
 2790 00a2 FFF7FEFF 	 bl prvCopyDataFromQueue
1722:../Dave/Generated/FREERTOS/queue.c ****                 traceQUEUE_PEEK( pxQueue );
1723:../Dave/Generated/FREERTOS/queue.c **** 
1724:../Dave/Generated/FREERTOS/queue.c ****                 /* The data is not being removed, so reset the read pointer. */
1725:../Dave/Generated/FREERTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2791              	 .loc 1 1725 0
 2792 00a6 3B6B     	 ldr r3,[r7,#48]
 2793 00a8 BA6A     	 ldr r2,[r7,#40]
 2794 00aa DA60     	 str r2,[r3,#12]
1726:../Dave/Generated/FREERTOS/queue.c **** 
1727:../Dave/Generated/FREERTOS/queue.c ****                 /* The data is being left in the queue, so see if there are
1728:../Dave/Generated/FREERTOS/queue.c ****                  * any other tasks waiting for the data. */
1729:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2795              	 .loc 1 1729 0
 2796 00ac 3B6B     	 ldr r3,[r7,#48]
 2797 00ae 5B6A     	 ldr r3,[r3,#36]
 2798 00b0 002B     	 cmp r3,#0
 2799 00b2 0FD0     	 beq .L210
1730:../Dave/Generated/FREERTOS/queue.c ****                 {
1731:../Dave/Generated/FREERTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
 2800              	 .loc 1 1731 0
 2801 00b4 3B6B     	 ldr r3,[r7,#48]
 2802 00b6 2433     	 adds r3,r3,#36
 2803 00b8 1846     	 mov r0,r3
 2804 00ba FFF7FEFF 	 bl xTaskRemoveFromEventList
 2805 00be 0346     	 mov r3,r0
 2806 00c0 002B     	 cmp r3,#0
 2807 00c2 07D0     	 beq .L210
1732:../Dave/Generated/FREERTOS/queue.c ****                     {
1733:../Dave/Generated/FREERTOS/queue.c ****                         /* The task waiting has a higher priority than this task. */
1734:../Dave/Generated/FREERTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 2808              	 .loc 1 1734 0
 2809 00c4 3E4B     	 ldr r3,.L221
 2810 00c6 4FF08052 	 mov r2,#268435456
 2811 00ca 1A60     	 str r2,[r3]
 2812              	
 2813 00cc BFF34F8F 	 dsb
 2814              	
 2815              	
 2816 00d0 BFF36F8F 	 isb
 2817              	
 2818              	 .thumb
 2819              	.L210:
1735:../Dave/Generated/FREERTOS/queue.c ****                     }
1736:../Dave/Generated/FREERTOS/queue.c ****                     else
1737:../Dave/Generated/FREERTOS/queue.c ****                     {
1738:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1739:../Dave/Generated/FREERTOS/queue.c ****                     }
1740:../Dave/Generated/FREERTOS/queue.c ****                 }
1741:../Dave/Generated/FREERTOS/queue.c ****                 else
1742:../Dave/Generated/FREERTOS/queue.c ****                 {
1743:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1744:../Dave/Generated/FREERTOS/queue.c ****                 }
1745:../Dave/Generated/FREERTOS/queue.c **** 
1746:../Dave/Generated/FREERTOS/queue.c ****                 taskEXIT_CRITICAL();
 2820              	 .loc 1 1746 0
 2821 00d4 FFF7FEFF 	 bl vPortExitCritical
1747:../Dave/Generated/FREERTOS/queue.c ****                 return pdPASS;
 2822              	 .loc 1 1747 0
 2823 00d8 0123     	 movs r3,#1
 2824 00da 6DE0     	 b .L220
 2825              	.L209:
1748:../Dave/Generated/FREERTOS/queue.c ****             }
1749:../Dave/Generated/FREERTOS/queue.c ****             else
1750:../Dave/Generated/FREERTOS/queue.c ****             {
1751:../Dave/Generated/FREERTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 2826              	 .loc 1 1751 0
 2827 00dc 7B68     	 ldr r3,[r7,#4]
 2828 00de 002B     	 cmp r3,#0
 2829 00e0 03D1     	 bne .L212
1752:../Dave/Generated/FREERTOS/queue.c ****                 {
1753:../Dave/Generated/FREERTOS/queue.c ****                     /* The queue was empty and no block time is specified (or
1754:../Dave/Generated/FREERTOS/queue.c ****                      * the block time has expired) so leave now. */
1755:../Dave/Generated/FREERTOS/queue.c ****                     taskEXIT_CRITICAL();
 2830              	 .loc 1 1755 0
 2831 00e2 FFF7FEFF 	 bl vPortExitCritical
1756:../Dave/Generated/FREERTOS/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
1757:../Dave/Generated/FREERTOS/queue.c ****                     return errQUEUE_EMPTY;
 2832              	 .loc 1 1757 0
 2833 00e6 0023     	 movs r3,#0
 2834 00e8 66E0     	 b .L220
 2835              	.L212:
1758:../Dave/Generated/FREERTOS/queue.c ****                 }
1759:../Dave/Generated/FREERTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 2836              	 .loc 1 1759 0
 2837 00ea 7B6B     	 ldr r3,[r7,#52]
 2838 00ec 002B     	 cmp r3,#0
 2839 00ee 06D1     	 bne .L213
1760:../Dave/Generated/FREERTOS/queue.c ****                 {
1761:../Dave/Generated/FREERTOS/queue.c ****                     /* The queue was empty and a block time was specified so
1762:../Dave/Generated/FREERTOS/queue.c ****                      * configure the timeout structure ready to enter the blocked
1763:../Dave/Generated/FREERTOS/queue.c ****                      * state. */
1764:../Dave/Generated/FREERTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 2840              	 .loc 1 1764 0
 2841 00f0 07F11403 	 add r3,r7,#20
 2842 00f4 1846     	 mov r0,r3
 2843 00f6 FFF7FEFF 	 bl vTaskInternalSetTimeOutState
1765:../Dave/Generated/FREERTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 2844              	 .loc 1 1765 0
 2845 00fa 0123     	 movs r3,#1
 2846 00fc 7B63     	 str r3,[r7,#52]
 2847              	.L213:
 2848              	.LBE198:
1766:../Dave/Generated/FREERTOS/queue.c ****                 }
1767:../Dave/Generated/FREERTOS/queue.c ****                 else
1768:../Dave/Generated/FREERTOS/queue.c ****                 {
1769:../Dave/Generated/FREERTOS/queue.c ****                     /* Entry time was already set. */
1770:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1771:../Dave/Generated/FREERTOS/queue.c ****                 }
1772:../Dave/Generated/FREERTOS/queue.c ****             }
1773:../Dave/Generated/FREERTOS/queue.c ****         }
1774:../Dave/Generated/FREERTOS/queue.c ****         taskEXIT_CRITICAL();
 2849              	 .loc 1 1774 0
 2850 00fe FFF7FEFF 	 bl vPortExitCritical
1775:../Dave/Generated/FREERTOS/queue.c **** 
1776:../Dave/Generated/FREERTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1777:../Dave/Generated/FREERTOS/queue.c ****          * now the critical section has been exited. */
1778:../Dave/Generated/FREERTOS/queue.c **** 
1779:../Dave/Generated/FREERTOS/queue.c ****         vTaskSuspendAll();
 2851              	 .loc 1 1779 0
 2852 0102 FFF7FEFF 	 bl vTaskSuspendAll
1780:../Dave/Generated/FREERTOS/queue.c ****         prvLockQueue( pxQueue );
 2853              	 .loc 1 1780 0
 2854 0106 FFF7FEFF 	 bl vPortEnterCritical
 2855 010a 3B6B     	 ldr r3,[r7,#48]
 2856 010c 93F84430 	 ldrb r3,[r3,#68]
 2857 0110 DBB2     	 uxtb r3,r3
 2858 0112 5BB2     	 sxtb r3,r3
 2859 0114 B3F1FF3F 	 cmp r3,#-1
 2860 0118 03D1     	 bne .L214
 2861              	 .loc 1 1780 0 is_stmt 0 discriminator 1
 2862 011a 3B6B     	 ldr r3,[r7,#48]
 2863 011c 0022     	 movs r2,#0
 2864 011e 83F84420 	 strb r2,[r3,#68]
 2865              	.L214:
 2866              	 .loc 1 1780 0 discriminator 3
 2867 0122 3B6B     	 ldr r3,[r7,#48]
 2868 0124 93F84530 	 ldrb r3,[r3,#69]
 2869 0128 DBB2     	 uxtb r3,r3
 2870 012a 5BB2     	 sxtb r3,r3
 2871 012c B3F1FF3F 	 cmp r3,#-1
 2872 0130 03D1     	 bne .L215
 2873              	 .loc 1 1780 0 discriminator 4
 2874 0132 3B6B     	 ldr r3,[r7,#48]
 2875 0134 0022     	 movs r2,#0
 2876 0136 83F84520 	 strb r2,[r3,#69]
 2877              	.L215:
 2878              	 .loc 1 1780 0 discriminator 6
 2879 013a FFF7FEFF 	 bl vPortExitCritical
1781:../Dave/Generated/FREERTOS/queue.c **** 
1782:../Dave/Generated/FREERTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1783:../Dave/Generated/FREERTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2880              	 .loc 1 1783 0 is_stmt 1 discriminator 6
 2881 013e 07F11402 	 add r2,r7,#20
 2882 0142 3B1D     	 adds r3,r7,#4
 2883 0144 1046     	 mov r0,r2
 2884 0146 1946     	 mov r1,r3
 2885 0148 FFF7FEFF 	 bl xTaskCheckForTimeOut
 2886 014c 0346     	 mov r3,r0
 2887 014e 002B     	 cmp r3,#0
 2888 0150 24D1     	 bne .L216
1784:../Dave/Generated/FREERTOS/queue.c ****         {
1785:../Dave/Generated/FREERTOS/queue.c ****             /* Timeout has not expired yet, check to see if there is data in the
1786:../Dave/Generated/FREERTOS/queue.c ****             * queue now, and if not enter the Blocked state to wait for data. */
1787:../Dave/Generated/FREERTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2889              	 .loc 1 1787 0
 2890 0152 386B     	 ldr r0,[r7,#48]
 2891 0154 FFF7FEFF 	 bl prvIsQueueEmpty
 2892 0158 0346     	 mov r3,r0
 2893 015a 002B     	 cmp r3,#0
 2894 015c 18D0     	 beq .L217
1788:../Dave/Generated/FREERTOS/queue.c ****             {
1789:../Dave/Generated/FREERTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1790:../Dave/Generated/FREERTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2895              	 .loc 1 1790 0
 2896 015e 3B6B     	 ldr r3,[r7,#48]
 2897 0160 03F12402 	 add r2,r3,#36
 2898 0164 7B68     	 ldr r3,[r7,#4]
 2899 0166 1046     	 mov r0,r2
 2900 0168 1946     	 mov r1,r3
 2901 016a FFF7FEFF 	 bl vTaskPlaceOnEventList
1791:../Dave/Generated/FREERTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2902              	 .loc 1 1791 0
 2903 016e 386B     	 ldr r0,[r7,#48]
 2904 0170 FFF7FEFF 	 bl prvUnlockQueue
1792:../Dave/Generated/FREERTOS/queue.c **** 
1793:../Dave/Generated/FREERTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 2905              	 .loc 1 1793 0
 2906 0174 FFF7FEFF 	 bl xTaskResumeAll
 2907 0178 0346     	 mov r3,r0
 2908 017a 002B     	 cmp r3,#0
 2909 017c 1BD1     	 bne .L219
1794:../Dave/Generated/FREERTOS/queue.c ****                 {
1795:../Dave/Generated/FREERTOS/queue.c ****                     portYIELD_WITHIN_API();
 2910              	 .loc 1 1795 0
 2911 017e 104B     	 ldr r3,.L221
 2912 0180 4FF08052 	 mov r2,#268435456
 2913 0184 1A60     	 str r2,[r3]
 2914              	
 2915 0186 BFF34F8F 	 dsb
 2916              	
 2917              	
 2918 018a BFF36F8F 	 isb
 2919              	
 2920              	 .thumb
 2921 018e 12E0     	 b .L219
 2922              	.L217:
1796:../Dave/Generated/FREERTOS/queue.c ****                 }
1797:../Dave/Generated/FREERTOS/queue.c ****                 else
1798:../Dave/Generated/FREERTOS/queue.c ****                 {
1799:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1800:../Dave/Generated/FREERTOS/queue.c ****                 }
1801:../Dave/Generated/FREERTOS/queue.c ****             }
1802:../Dave/Generated/FREERTOS/queue.c ****             else
1803:../Dave/Generated/FREERTOS/queue.c ****             {
1804:../Dave/Generated/FREERTOS/queue.c ****                 /* There is data in the queue now, so don't enter the blocked
1805:../Dave/Generated/FREERTOS/queue.c ****                  * state, instead return to try and obtain the data. */
1806:../Dave/Generated/FREERTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2923              	 .loc 1 1806 0
 2924 0190 386B     	 ldr r0,[r7,#48]
 2925 0192 FFF7FEFF 	 bl prvUnlockQueue
1807:../Dave/Generated/FREERTOS/queue.c ****                 ( void ) xTaskResumeAll();
 2926              	 .loc 1 1807 0
 2927 0196 FFF7FEFF 	 bl xTaskResumeAll
 2928 019a 75E7     	 b .L207
 2929              	.L216:
1808:../Dave/Generated/FREERTOS/queue.c ****             }
1809:../Dave/Generated/FREERTOS/queue.c ****         }
1810:../Dave/Generated/FREERTOS/queue.c ****         else
1811:../Dave/Generated/FREERTOS/queue.c ****         {
1812:../Dave/Generated/FREERTOS/queue.c ****             /* The timeout has expired.  If there is still no data in the queue
1813:../Dave/Generated/FREERTOS/queue.c ****              * exit, otherwise go back and try to read the data again. */
1814:../Dave/Generated/FREERTOS/queue.c ****             prvUnlockQueue( pxQueue );
 2930              	 .loc 1 1814 0
 2931 019c 386B     	 ldr r0,[r7,#48]
 2932 019e FFF7FEFF 	 bl prvUnlockQueue
1815:../Dave/Generated/FREERTOS/queue.c ****             ( void ) xTaskResumeAll();
 2933              	 .loc 1 1815 0
 2934 01a2 FFF7FEFF 	 bl xTaskResumeAll
1816:../Dave/Generated/FREERTOS/queue.c **** 
1817:../Dave/Generated/FREERTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2935              	 .loc 1 1817 0
 2936 01a6 386B     	 ldr r0,[r7,#48]
 2937 01a8 FFF7FEFF 	 bl prvIsQueueEmpty
 2938 01ac 0346     	 mov r3,r0
 2939 01ae 002B     	 cmp r3,#0
 2940 01b0 01D0     	 beq .L219
1818:../Dave/Generated/FREERTOS/queue.c ****             {
1819:../Dave/Generated/FREERTOS/queue.c ****                 traceQUEUE_PEEK_FAILED( pxQueue );
1820:../Dave/Generated/FREERTOS/queue.c ****                 return errQUEUE_EMPTY;
 2941              	 .loc 1 1820 0
 2942 01b2 0023     	 movs r3,#0
 2943 01b4 00E0     	 b .L220
 2944              	.L219:
1821:../Dave/Generated/FREERTOS/queue.c ****             }
1822:../Dave/Generated/FREERTOS/queue.c ****             else
1823:../Dave/Generated/FREERTOS/queue.c ****             {
1824:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1825:../Dave/Generated/FREERTOS/queue.c ****             }
1826:../Dave/Generated/FREERTOS/queue.c ****         }
1827:../Dave/Generated/FREERTOS/queue.c ****     } /*lint -restore */
 2945              	 .loc 1 1827 0 discriminator 5
 2946 01b6 67E7     	 b .L207
 2947              	.L220:
1828:../Dave/Generated/FREERTOS/queue.c **** }
 2948              	 .loc 1 1828 0 discriminator 6
 2949 01b8 1846     	 mov r0,r3
 2950 01ba 3837     	 adds r7,r7,#56
 2951              	.LCFI79:
 2952              	 .cfi_def_cfa_offset 8
 2953 01bc BD46     	 mov sp,r7
 2954              	.LCFI80:
 2955              	 .cfi_def_cfa_register 13
 2956              	 
 2957 01be 80BD     	 pop {r7,pc}
 2958              	.L222:
 2959              	 .align 2
 2960              	.L221:
 2961 01c0 04ED00E0 	 .word -536810236
 2962              	 .cfi_endproc
 2963              	.LFE153:
 2965              	 .section .text.xQueueReceiveFromISR,"ax",%progbits
 2966              	 .align 2
 2967              	 .global xQueueReceiveFromISR
 2968              	 .thumb
 2969              	 .thumb_func
 2971              	xQueueReceiveFromISR:
 2972              	.LFB154:
1829:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1830:../Dave/Generated/FREERTOS/queue.c **** 
1831:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
1832:../Dave/Generated/FREERTOS/queue.c ****                                  void * const pvBuffer,
1833:../Dave/Generated/FREERTOS/queue.c ****                                  BaseType_t * const pxHigherPriorityTaskWoken )
1834:../Dave/Generated/FREERTOS/queue.c **** {
 2973              	 .loc 1 1834 0
 2974              	 .cfi_startproc
 2975              	 
 2976              	 
 2977 0000 80B5     	 push {r7,lr}
 2978              	.LCFI81:
 2979              	 .cfi_def_cfa_offset 8
 2980              	 .cfi_offset 7,-8
 2981              	 .cfi_offset 14,-4
 2982 0002 90B0     	 sub sp,sp,#64
 2983              	.LCFI82:
 2984              	 .cfi_def_cfa_offset 72
 2985 0004 00AF     	 add r7,sp,#0
 2986              	.LCFI83:
 2987              	 .cfi_def_cfa_register 7
 2988 0006 F860     	 str r0,[r7,#12]
 2989 0008 B960     	 str r1,[r7,#8]
 2990 000a 7A60     	 str r2,[r7,#4]
1835:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn;
1836:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1837:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2991              	 .loc 1 1837 0
 2992 000c FB68     	 ldr r3,[r7,#12]
 2993 000e BB63     	 str r3,[r7,#56]
1838:../Dave/Generated/FREERTOS/queue.c **** 
1839:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 2994              	 .loc 1 1839 0
 2995 0010 BB6B     	 ldr r3,[r7,#56]
 2996 0012 002B     	 cmp r3,#0
 2997 0014 09D1     	 bne .L224
 2998              	.LBB199:
 2999              	.LBB200:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3000              	 .loc 2 197 0 discriminator 1
 3001              	
 3002 0016 4FF0FC03 	 mov r3,#252
 3003 001a 83F31188 	 msr basepri,r3
 3004 001e BFF36F8F 	 isb 
 3005 0022 BFF34F8F 	 dsb 
 3006              	
 3007              	
 3008              	 .thumb
 3009 0026 BB62     	 str r3,[r7,#40]
 3010              	.L225:
 3011              	.LBE200:
 3012              	.LBE199:
 3013              	 .loc 1 1839 0 discriminator 1
 3014 0028 FEE7     	 b .L225
 3015              	.L224:
1840:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3016              	 .loc 1 1840 0
 3017 002a BB68     	 ldr r3,[r7,#8]
 3018 002c 002B     	 cmp r3,#0
 3019 002e 03D1     	 bne .L226
 3020              	 .loc 1 1840 0 is_stmt 0 discriminator 2
 3021 0030 BB6B     	 ldr r3,[r7,#56]
 3022 0032 1B6C     	 ldr r3,[r3,#64]
 3023 0034 002B     	 cmp r3,#0
 3024 0036 01D1     	 bne .L227
 3025              	.L226:
 3026              	 .loc 1 1840 0 discriminator 3
 3027 0038 0123     	 movs r3,#1
 3028 003a 00E0     	 b .L228
 3029              	.L227:
 3030              	 .loc 1 1840 0 discriminator 4
 3031 003c 0023     	 movs r3,#0
 3032              	.L228:
 3033              	 .loc 1 1840 0 discriminator 6
 3034 003e 002B     	 cmp r3,#0
 3035 0040 09D1     	 bne .L229
 3036              	.LBB201:
 3037              	.LBB202:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3038              	 .loc 2 197 0 is_stmt 1 discriminator 7
 3039              	
 3040 0042 4FF0FC03 	 mov r3,#252
 3041 0046 83F31188 	 msr basepri,r3
 3042 004a BFF36F8F 	 isb 
 3043 004e BFF34F8F 	 dsb 
 3044              	
 3045              	
 3046              	 .thumb
 3047 0052 7B62     	 str r3,[r7,#36]
 3048              	.L230:
 3049              	.LBE202:
 3050              	.LBE201:
 3051              	 .loc 1 1840 0 discriminator 2
 3052 0054 FEE7     	 b .L230
 3053              	.L229:
1841:../Dave/Generated/FREERTOS/queue.c **** 
1842:../Dave/Generated/FREERTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1843:../Dave/Generated/FREERTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1844:../Dave/Generated/FREERTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1845:../Dave/Generated/FREERTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1846:../Dave/Generated/FREERTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1847:../Dave/Generated/FREERTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1848:../Dave/Generated/FREERTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1849:../Dave/Generated/FREERTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1850:../Dave/Generated/FREERTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1851:../Dave/Generated/FREERTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1852:../Dave/Generated/FREERTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1853:../Dave/Generated/FREERTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1854:../Dave/Generated/FREERTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1855:../Dave/Generated/FREERTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1856:../Dave/Generated/FREERTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3054              	 .loc 1 1856 0
 3055 0056 FFF7FEFF 	 bl vPortValidateInterruptPriority
 3056              	.LBB203:
 3057              	.LBB204:
 213:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3058              	 .loc 2 213 0
 3059              	
 3060 005a EFF31182 	 mrs r2,basepri
 3061 005e 4FF0FC03 	 mov r3,#252
 3062 0062 83F31188 	 msr basepri,r3
 3063 0066 BFF36F8F 	 isb 
 3064 006a BFF34F8F 	 dsb 
 3065              	
 3066              	
 3067              	 .thumb
 3068 006e 3A62     	 str r2,[r7,#32]
 3069 0070 FB61     	 str r3,[r7,#28]
 225:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 3070              	 .loc 2 225 0
 3071 0072 3B6A     	 ldr r3,[r7,#32]
 3072              	.LBE204:
 3073              	.LBE203:
1857:../Dave/Generated/FREERTOS/queue.c **** 
1858:../Dave/Generated/FREERTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 3074              	 .loc 1 1858 0
 3075 0074 7B63     	 str r3,[r7,#52]
 3076              	.LBB205:
1859:../Dave/Generated/FREERTOS/queue.c ****     {
1860:../Dave/Generated/FREERTOS/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 3077              	 .loc 1 1860 0
 3078 0076 BB6B     	 ldr r3,[r7,#56]
 3079 0078 9B6B     	 ldr r3,[r3,#56]
 3080 007a 3B63     	 str r3,[r7,#48]
1861:../Dave/Generated/FREERTOS/queue.c **** 
1862:../Dave/Generated/FREERTOS/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
1863:../Dave/Generated/FREERTOS/queue.c ****         if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 3081              	 .loc 1 1863 0
 3082 007c 3B6B     	 ldr r3,[r7,#48]
 3083 007e 002B     	 cmp r3,#0
 3084 0080 3DD0     	 beq .L232
 3085              	.LBB206:
1864:../Dave/Generated/FREERTOS/queue.c ****         {
1865:../Dave/Generated/FREERTOS/queue.c ****             const int8_t cRxLock = pxQueue->cRxLock;
 3086              	 .loc 1 1865 0
 3087 0082 BB6B     	 ldr r3,[r7,#56]
 3088 0084 93F84430 	 ldrb r3,[r3,#68]
 3089 0088 87F82F30 	 strb r3,[r7,#47]
1866:../Dave/Generated/FREERTOS/queue.c **** 
1867:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1868:../Dave/Generated/FREERTOS/queue.c **** 
1869:../Dave/Generated/FREERTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 3090              	 .loc 1 1869 0
 3091 008c B86B     	 ldr r0,[r7,#56]
 3092 008e B968     	 ldr r1,[r7,#8]
 3093 0090 FFF7FEFF 	 bl prvCopyDataFromQueue
1870:../Dave/Generated/FREERTOS/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 3094              	 .loc 1 1870 0
 3095 0094 3B6B     	 ldr r3,[r7,#48]
 3096 0096 5A1E     	 subs r2,r3,#1
 3097 0098 BB6B     	 ldr r3,[r7,#56]
 3098 009a 9A63     	 str r2,[r3,#56]
1871:../Dave/Generated/FREERTOS/queue.c **** 
1872:../Dave/Generated/FREERTOS/queue.c ****             /* If the queue is locked the event list will not be modified.
1873:../Dave/Generated/FREERTOS/queue.c ****              * Instead update the lock count so the task that unlocks the queue
1874:../Dave/Generated/FREERTOS/queue.c ****              * will know that an ISR has removed data while the queue was
1875:../Dave/Generated/FREERTOS/queue.c ****              * locked. */
1876:../Dave/Generated/FREERTOS/queue.c ****             if( cRxLock == queueUNLOCKED )
 3099              	 .loc 1 1876 0
 3100 009c 97F92F30 	 ldrsb r3,[r7,#47]
 3101 00a0 B3F1FF3F 	 cmp r3,#-1
 3102 00a4 12D1     	 bne .L233
1877:../Dave/Generated/FREERTOS/queue.c ****             {
1878:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 3103              	 .loc 1 1878 0
 3104 00a6 BB6B     	 ldr r3,[r7,#56]
 3105 00a8 1B69     	 ldr r3,[r3,#16]
 3106 00aa 002B     	 cmp r3,#0
 3107 00ac 24D0     	 beq .L234
1879:../Dave/Generated/FREERTOS/queue.c ****                 {
1880:../Dave/Generated/FREERTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 3108              	 .loc 1 1880 0
 3109 00ae BB6B     	 ldr r3,[r7,#56]
 3110 00b0 1033     	 adds r3,r3,#16
 3111 00b2 1846     	 mov r0,r3
 3112 00b4 FFF7FEFF 	 bl xTaskRemoveFromEventList
 3113 00b8 0346     	 mov r3,r0
 3114 00ba 002B     	 cmp r3,#0
 3115 00bc 1CD0     	 beq .L234
1881:../Dave/Generated/FREERTOS/queue.c ****                     {
1882:../Dave/Generated/FREERTOS/queue.c ****                         /* The task waiting has a higher priority than us so
1883:../Dave/Generated/FREERTOS/queue.c ****                          * force a context switch. */
1884:../Dave/Generated/FREERTOS/queue.c ****                         if( pxHigherPriorityTaskWoken != NULL )
 3116              	 .loc 1 1884 0
 3117 00be 7B68     	 ldr r3,[r7,#4]
 3118 00c0 002B     	 cmp r3,#0
 3119 00c2 19D0     	 beq .L234
1885:../Dave/Generated/FREERTOS/queue.c ****                         {
1886:../Dave/Generated/FREERTOS/queue.c ****                             *pxHigherPriorityTaskWoken = pdTRUE;
 3120              	 .loc 1 1886 0
 3121 00c4 7B68     	 ldr r3,[r7,#4]
 3122 00c6 0122     	 movs r2,#1
 3123 00c8 1A60     	 str r2,[r3]
 3124 00ca 15E0     	 b .L234
 3125              	.L233:
1887:../Dave/Generated/FREERTOS/queue.c ****                         }
1888:../Dave/Generated/FREERTOS/queue.c ****                         else
1889:../Dave/Generated/FREERTOS/queue.c ****                         {
1890:../Dave/Generated/FREERTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1891:../Dave/Generated/FREERTOS/queue.c ****                         }
1892:../Dave/Generated/FREERTOS/queue.c ****                     }
1893:../Dave/Generated/FREERTOS/queue.c ****                     else
1894:../Dave/Generated/FREERTOS/queue.c ****                     {
1895:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1896:../Dave/Generated/FREERTOS/queue.c ****                     }
1897:../Dave/Generated/FREERTOS/queue.c ****                 }
1898:../Dave/Generated/FREERTOS/queue.c ****                 else
1899:../Dave/Generated/FREERTOS/queue.c ****                 {
1900:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1901:../Dave/Generated/FREERTOS/queue.c ****                 }
1902:../Dave/Generated/FREERTOS/queue.c ****             }
1903:../Dave/Generated/FREERTOS/queue.c ****             else
1904:../Dave/Generated/FREERTOS/queue.c ****             {
1905:../Dave/Generated/FREERTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1906:../Dave/Generated/FREERTOS/queue.c ****                  * knows that data was removed while it was locked. */
1907:../Dave/Generated/FREERTOS/queue.c ****                 configASSERT( cRxLock != queueINT8_MAX );
 3126              	 .loc 1 1907 0
 3127 00cc 97F92F30 	 ldrsb r3,[r7,#47]
 3128 00d0 7F2B     	 cmp r3,#127
 3129 00d2 09D1     	 bne .L235
 3130              	.LBB207:
 3131              	.LBB208:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3132              	 .loc 2 197 0 discriminator 1
 3133              	
 3134 00d4 4FF0FC03 	 mov r3,#252
 3135 00d8 83F31188 	 msr basepri,r3
 3136 00dc BFF36F8F 	 isb 
 3137 00e0 BFF34F8F 	 dsb 
 3138              	
 3139              	
 3140              	 .thumb
 3141 00e4 BB61     	 str r3,[r7,#24]
 3142              	.L236:
 3143              	.LBE208:
 3144              	.LBE207:
 3145              	 .loc 1 1907 0 discriminator 5
 3146 00e6 FEE7     	 b .L236
 3147              	.L235:
1908:../Dave/Generated/FREERTOS/queue.c **** 
1909:../Dave/Generated/FREERTOS/queue.c ****                 pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 3148              	 .loc 1 1909 0
 3149 00e8 97F82F30 	 ldrb r3,[r7,#47]
 3150 00ec 0133     	 adds r3,r3,#1
 3151 00ee DBB2     	 uxtb r3,r3
 3152 00f0 DAB2     	 uxtb r2,r3
 3153 00f2 BB6B     	 ldr r3,[r7,#56]
 3154 00f4 83F84420 	 strb r2,[r3,#68]
 3155              	.L234:
1910:../Dave/Generated/FREERTOS/queue.c ****             }
1911:../Dave/Generated/FREERTOS/queue.c **** 
1912:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdPASS;
 3156              	 .loc 1 1912 0
 3157 00f8 0123     	 movs r3,#1
 3158 00fa FB63     	 str r3,[r7,#60]
 3159              	.LBE206:
 3160 00fc 01E0     	 b .L237
 3161              	.L232:
1913:../Dave/Generated/FREERTOS/queue.c ****         }
1914:../Dave/Generated/FREERTOS/queue.c ****         else
1915:../Dave/Generated/FREERTOS/queue.c ****         {
1916:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdFAIL;
 3162              	 .loc 1 1916 0
 3163 00fe 0023     	 movs r3,#0
 3164 0100 FB63     	 str r3,[r7,#60]
 3165              	.L237:
 3166 0102 7B6B     	 ldr r3,[r7,#52]
 3167 0104 7B61     	 str r3,[r7,#20]
 3168              	.LBE205:
 3169              	.LBB209:
 3170              	.LBB210:
 3171              	 .loc 2 231 0
 3172 0106 7B69     	 ldr r3,[r7,#20]
 3173              	
 3174 0108 83F31188 	 msr basepri,r3
 3175              	
 3176              	 .thumb
 3177              	.LBE210:
 3178              	.LBE209:
1917:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1918:../Dave/Generated/FREERTOS/queue.c ****         }
1919:../Dave/Generated/FREERTOS/queue.c ****     }
1920:../Dave/Generated/FREERTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1921:../Dave/Generated/FREERTOS/queue.c **** 
1922:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 3179              	 .loc 1 1922 0
 3180 010c FB6B     	 ldr r3,[r7,#60]
1923:../Dave/Generated/FREERTOS/queue.c **** }
 3181              	 .loc 1 1923 0
 3182 010e 1846     	 mov r0,r3
 3183 0110 4037     	 adds r7,r7,#64
 3184              	.LCFI84:
 3185              	 .cfi_def_cfa_offset 8
 3186 0112 BD46     	 mov sp,r7
 3187              	.LCFI85:
 3188              	 .cfi_def_cfa_register 13
 3189              	 
 3190 0114 80BD     	 pop {r7,pc}
 3191              	 .cfi_endproc
 3192              	.LFE154:
 3194 0116 00BF     	 .section .text.xQueuePeekFromISR,"ax",%progbits
 3195              	 .align 2
 3196              	 .global xQueuePeekFromISR
 3197              	 .thumb
 3198              	 .thumb_func
 3200              	xQueuePeekFromISR:
 3201              	.LFB155:
1924:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1925:../Dave/Generated/FREERTOS/queue.c **** 
1926:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
1927:../Dave/Generated/FREERTOS/queue.c ****                               void * const pvBuffer )
1928:../Dave/Generated/FREERTOS/queue.c **** {
 3202              	 .loc 1 1928 0
 3203              	 .cfi_startproc
 3204              	 
 3205              	 
 3206 0000 80B5     	 push {r7,lr}
 3207              	.LCFI86:
 3208              	 .cfi_def_cfa_offset 8
 3209              	 .cfi_offset 7,-8
 3210              	 .cfi_offset 14,-4
 3211 0002 8CB0     	 sub sp,sp,#48
 3212              	.LCFI87:
 3213              	 .cfi_def_cfa_offset 56
 3214 0004 00AF     	 add r7,sp,#0
 3215              	.LCFI88:
 3216              	 .cfi_def_cfa_register 7
 3217 0006 7860     	 str r0,[r7,#4]
 3218 0008 3960     	 str r1,[r7]
1929:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn;
1930:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1931:../Dave/Generated/FREERTOS/queue.c ****     int8_t * pcOriginalReadPosition;
1932:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3219              	 .loc 1 1932 0
 3220 000a 7B68     	 ldr r3,[r7,#4]
 3221 000c BB62     	 str r3,[r7,#40]
1933:../Dave/Generated/FREERTOS/queue.c **** 
1934:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 3222              	 .loc 1 1934 0
 3223 000e BB6A     	 ldr r3,[r7,#40]
 3224 0010 002B     	 cmp r3,#0
 3225 0012 09D1     	 bne .L240
 3226              	.LBB211:
 3227              	.LBB212:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3228              	 .loc 2 197 0 discriminator 1
 3229              	
 3230 0014 4FF0FC03 	 mov r3,#252
 3231 0018 83F31188 	 msr basepri,r3
 3232 001c BFF36F8F 	 isb 
 3233 0020 BFF34F8F 	 dsb 
 3234              	
 3235              	
 3236              	 .thumb
 3237 0024 FB61     	 str r3,[r7,#28]
 3238              	.L241:
 3239              	.LBE212:
 3240              	.LBE211:
 3241              	 .loc 1 1934 0 discriminator 1
 3242 0026 FEE7     	 b .L241
 3243              	.L240:
1935:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3244              	 .loc 1 1935 0
 3245 0028 3B68     	 ldr r3,[r7]
 3246 002a 002B     	 cmp r3,#0
 3247 002c 03D1     	 bne .L242
 3248              	 .loc 1 1935 0 is_stmt 0 discriminator 2
 3249 002e BB6A     	 ldr r3,[r7,#40]
 3250 0030 1B6C     	 ldr r3,[r3,#64]
 3251 0032 002B     	 cmp r3,#0
 3252 0034 01D1     	 bne .L243
 3253              	.L242:
 3254              	 .loc 1 1935 0 discriminator 3
 3255 0036 0123     	 movs r3,#1
 3256 0038 00E0     	 b .L244
 3257              	.L243:
 3258              	 .loc 1 1935 0 discriminator 4
 3259 003a 0023     	 movs r3,#0
 3260              	.L244:
 3261              	 .loc 1 1935 0 discriminator 6
 3262 003c 002B     	 cmp r3,#0
 3263 003e 09D1     	 bne .L245
 3264              	.LBB213:
 3265              	.LBB214:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3266              	 .loc 2 197 0 is_stmt 1 discriminator 7
 3267              	
 3268 0040 4FF0FC03 	 mov r3,#252
 3269 0044 83F31188 	 msr basepri,r3
 3270 0048 BFF36F8F 	 isb 
 3271 004c BFF34F8F 	 dsb 
 3272              	
 3273              	
 3274              	 .thumb
 3275 0050 BB61     	 str r3,[r7,#24]
 3276              	.L246:
 3277              	.LBE214:
 3278              	.LBE213:
 3279              	 .loc 1 1935 0 discriminator 2
 3280 0052 FEE7     	 b .L246
 3281              	.L245:
1936:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3282              	 .loc 1 1936 0
 3283 0054 BB6A     	 ldr r3,[r7,#40]
 3284 0056 1B6C     	 ldr r3,[r3,#64]
 3285 0058 002B     	 cmp r3,#0
 3286 005a 09D1     	 bne .L247
 3287              	.LBB215:
 3288              	.LBB216:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3289              	 .loc 2 197 0 discriminator 1
 3290              	
 3291 005c 4FF0FC03 	 mov r3,#252
 3292 0060 83F31188 	 msr basepri,r3
 3293 0064 BFF36F8F 	 isb 
 3294 0068 BFF34F8F 	 dsb 
 3295              	
 3296              	
 3297              	 .thumb
 3298 006c 7B61     	 str r3,[r7,#20]
 3299              	.L248:
 3300              	.LBE216:
 3301              	.LBE215:
 3302              	 .loc 1 1936 0 discriminator 3
 3303 006e FEE7     	 b .L248
 3304              	.L247:
1937:../Dave/Generated/FREERTOS/queue.c **** 
1938:../Dave/Generated/FREERTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1939:../Dave/Generated/FREERTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1940:../Dave/Generated/FREERTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1941:../Dave/Generated/FREERTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1942:../Dave/Generated/FREERTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1943:../Dave/Generated/FREERTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1944:../Dave/Generated/FREERTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1945:../Dave/Generated/FREERTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1946:../Dave/Generated/FREERTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1947:../Dave/Generated/FREERTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1948:../Dave/Generated/FREERTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1949:../Dave/Generated/FREERTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1950:../Dave/Generated/FREERTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1951:../Dave/Generated/FREERTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1952:../Dave/Generated/FREERTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3305              	 .loc 1 1952 0
 3306 0070 FFF7FEFF 	 bl vPortValidateInterruptPriority
 3307              	.LBB217:
 3308              	.LBB218:
 213:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3309              	 .loc 2 213 0
 3310              	
 3311 0074 EFF31182 	 mrs r2,basepri
 3312 0078 4FF0FC03 	 mov r3,#252
 3313 007c 83F31188 	 msr basepri,r3
 3314 0080 BFF36F8F 	 isb 
 3315 0084 BFF34F8F 	 dsb 
 3316              	
 3317              	
 3318              	 .thumb
 3319 0088 3A61     	 str r2,[r7,#16]
 3320 008a FB60     	 str r3,[r7,#12]
 225:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 3321              	 .loc 2 225 0
 3322 008c 3B69     	 ldr r3,[r7,#16]
 3323              	.LBE218:
 3324              	.LBE217:
1953:../Dave/Generated/FREERTOS/queue.c **** 
1954:../Dave/Generated/FREERTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 3325              	 .loc 1 1954 0
 3326 008e 7B62     	 str r3,[r7,#36]
1955:../Dave/Generated/FREERTOS/queue.c ****     {
1956:../Dave/Generated/FREERTOS/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
1957:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 3327              	 .loc 1 1957 0
 3328 0090 BB6A     	 ldr r3,[r7,#40]
 3329 0092 9B6B     	 ldr r3,[r3,#56]
 3330 0094 002B     	 cmp r3,#0
 3331 0096 0CD0     	 beq .L250
1958:../Dave/Generated/FREERTOS/queue.c ****         {
1959:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR( pxQueue );
1960:../Dave/Generated/FREERTOS/queue.c **** 
1961:../Dave/Generated/FREERTOS/queue.c ****             /* Remember the read position so it can be reset as nothing is
1962:../Dave/Generated/FREERTOS/queue.c ****              * actually being removed from the queue. */
1963:../Dave/Generated/FREERTOS/queue.c ****             pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 3332              	 .loc 1 1963 0
 3333 0098 BB6A     	 ldr r3,[r7,#40]
 3334 009a DB68     	 ldr r3,[r3,#12]
 3335 009c 3B62     	 str r3,[r7,#32]
1964:../Dave/Generated/FREERTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 3336              	 .loc 1 1964 0
 3337 009e B86A     	 ldr r0,[r7,#40]
 3338 00a0 3968     	 ldr r1,[r7]
 3339 00a2 FFF7FEFF 	 bl prvCopyDataFromQueue
1965:../Dave/Generated/FREERTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 3340              	 .loc 1 1965 0
 3341 00a6 BB6A     	 ldr r3,[r7,#40]
 3342 00a8 3A6A     	 ldr r2,[r7,#32]
 3343 00aa DA60     	 str r2,[r3,#12]
1966:../Dave/Generated/FREERTOS/queue.c **** 
1967:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdPASS;
 3344              	 .loc 1 1967 0
 3345 00ac 0123     	 movs r3,#1
 3346 00ae FB62     	 str r3,[r7,#44]
 3347 00b0 01E0     	 b .L251
 3348              	.L250:
1968:../Dave/Generated/FREERTOS/queue.c ****         }
1969:../Dave/Generated/FREERTOS/queue.c ****         else
1970:../Dave/Generated/FREERTOS/queue.c ****         {
1971:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdFAIL;
 3349              	 .loc 1 1971 0
 3350 00b2 0023     	 movs r3,#0
 3351 00b4 FB62     	 str r3,[r7,#44]
 3352              	.L251:
 3353 00b6 7B6A     	 ldr r3,[r7,#36]
 3354 00b8 BB60     	 str r3,[r7,#8]
 3355              	.LBB219:
 3356              	.LBB220:
 3357              	 .loc 2 231 0
 3358 00ba BB68     	 ldr r3,[r7,#8]
 3359              	
 3360 00bc 83F31188 	 msr basepri,r3
 3361              	
 3362              	 .thumb
 3363              	.LBE220:
 3364              	.LBE219:
1972:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1973:../Dave/Generated/FREERTOS/queue.c ****         }
1974:../Dave/Generated/FREERTOS/queue.c ****     }
1975:../Dave/Generated/FREERTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1976:../Dave/Generated/FREERTOS/queue.c **** 
1977:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 3365              	 .loc 1 1977 0
 3366 00c0 FB6A     	 ldr r3,[r7,#44]
1978:../Dave/Generated/FREERTOS/queue.c **** }
 3367              	 .loc 1 1978 0
 3368 00c2 1846     	 mov r0,r3
 3369 00c4 3037     	 adds r7,r7,#48
 3370              	.LCFI89:
 3371              	 .cfi_def_cfa_offset 8
 3372 00c6 BD46     	 mov sp,r7
 3373              	.LCFI90:
 3374              	 .cfi_def_cfa_register 13
 3375              	 
 3376 00c8 80BD     	 pop {r7,pc}
 3377              	 .cfi_endproc
 3378              	.LFE155:
 3380 00ca 00BF     	 .section .text.uxQueueMessagesWaiting,"ax",%progbits
 3381              	 .align 2
 3382              	 .global uxQueueMessagesWaiting
 3383              	 .thumb
 3384              	 .thumb_func
 3386              	uxQueueMessagesWaiting:
 3387              	.LFB156:
1979:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1980:../Dave/Generated/FREERTOS/queue.c **** 
1981:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1982:../Dave/Generated/FREERTOS/queue.c **** {
 3388              	 .loc 1 1982 0
 3389              	 .cfi_startproc
 3390              	 
 3391              	 
 3392 0000 80B5     	 push {r7,lr}
 3393              	.LCFI91:
 3394              	 .cfi_def_cfa_offset 8
 3395              	 .cfi_offset 7,-8
 3396              	 .cfi_offset 14,-4
 3397 0002 84B0     	 sub sp,sp,#16
 3398              	.LCFI92:
 3399              	 .cfi_def_cfa_offset 24
 3400 0004 00AF     	 add r7,sp,#0
 3401              	.LCFI93:
 3402              	 .cfi_def_cfa_register 7
 3403 0006 7860     	 str r0,[r7,#4]
1983:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxReturn;
1984:../Dave/Generated/FREERTOS/queue.c **** 
1985:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( xQueue );
 3404              	 .loc 1 1985 0
 3405 0008 7B68     	 ldr r3,[r7,#4]
 3406 000a 002B     	 cmp r3,#0
 3407 000c 09D1     	 bne .L254
 3408              	.LBB221:
 3409              	.LBB222:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3410              	 .loc 2 197 0 discriminator 1
 3411              	
 3412 000e 4FF0FC03 	 mov r3,#252
 3413 0012 83F31188 	 msr basepri,r3
 3414 0016 BFF36F8F 	 isb 
 3415 001a BFF34F8F 	 dsb 
 3416              	
 3417              	
 3418              	 .thumb
 3419 001e BB60     	 str r3,[r7,#8]
 3420              	.L255:
 3421              	.LBE222:
 3422              	.LBE221:
 3423              	 .loc 1 1985 0 discriminator 1
 3424 0020 FEE7     	 b .L255
 3425              	.L254:
1986:../Dave/Generated/FREERTOS/queue.c **** 
1987:../Dave/Generated/FREERTOS/queue.c ****     taskENTER_CRITICAL();
 3426              	 .loc 1 1987 0
 3427 0022 FFF7FEFF 	 bl vPortEnterCritical
1988:../Dave/Generated/FREERTOS/queue.c ****     {
1989:../Dave/Generated/FREERTOS/queue.c ****         uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 3428              	 .loc 1 1989 0
 3429 0026 7B68     	 ldr r3,[r7,#4]
 3430 0028 9B6B     	 ldr r3,[r3,#56]
 3431 002a FB60     	 str r3,[r7,#12]
1990:../Dave/Generated/FREERTOS/queue.c ****     }
1991:../Dave/Generated/FREERTOS/queue.c ****     taskEXIT_CRITICAL();
 3432              	 .loc 1 1991 0
 3433 002c FFF7FEFF 	 bl vPortExitCritical
1992:../Dave/Generated/FREERTOS/queue.c **** 
1993:../Dave/Generated/FREERTOS/queue.c ****     return uxReturn;
 3434              	 .loc 1 1993 0
 3435 0030 FB68     	 ldr r3,[r7,#12]
1994:../Dave/Generated/FREERTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3436              	 .loc 1 1994 0
 3437 0032 1846     	 mov r0,r3
 3438 0034 1037     	 adds r7,r7,#16
 3439              	.LCFI94:
 3440              	 .cfi_def_cfa_offset 8
 3441 0036 BD46     	 mov sp,r7
 3442              	.LCFI95:
 3443              	 .cfi_def_cfa_register 13
 3444              	 
 3445 0038 80BD     	 pop {r7,pc}
 3446              	 .cfi_endproc
 3447              	.LFE156:
 3449 003a 00BF     	 .section .text.uxQueueSpacesAvailable,"ax",%progbits
 3450              	 .align 2
 3451              	 .global uxQueueSpacesAvailable
 3452              	 .thumb
 3453              	 .thumb_func
 3455              	uxQueueSpacesAvailable:
 3456              	.LFB157:
1995:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1996:../Dave/Generated/FREERTOS/queue.c **** 
1997:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1998:../Dave/Generated/FREERTOS/queue.c **** {
 3457              	 .loc 1 1998 0
 3458              	 .cfi_startproc
 3459              	 
 3460              	 
 3461 0000 80B5     	 push {r7,lr}
 3462              	.LCFI96:
 3463              	 .cfi_def_cfa_offset 8
 3464              	 .cfi_offset 7,-8
 3465              	 .cfi_offset 14,-4
 3466 0002 86B0     	 sub sp,sp,#24
 3467              	.LCFI97:
 3468              	 .cfi_def_cfa_offset 32
 3469 0004 00AF     	 add r7,sp,#0
 3470              	.LCFI98:
 3471              	 .cfi_def_cfa_register 7
 3472 0006 7860     	 str r0,[r7,#4]
1999:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxReturn;
2000:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3473              	 .loc 1 2000 0
 3474 0008 7B68     	 ldr r3,[r7,#4]
 3475 000a 7B61     	 str r3,[r7,#20]
2001:../Dave/Generated/FREERTOS/queue.c **** 
2002:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 3476              	 .loc 1 2002 0
 3477 000c 7B69     	 ldr r3,[r7,#20]
 3478 000e 002B     	 cmp r3,#0
 3479 0010 09D1     	 bne .L258
 3480              	.LBB223:
 3481              	.LBB224:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3482              	 .loc 2 197 0 discriminator 1
 3483              	
 3484 0012 4FF0FC03 	 mov r3,#252
 3485 0016 83F31188 	 msr basepri,r3
 3486 001a BFF36F8F 	 isb 
 3487 001e BFF34F8F 	 dsb 
 3488              	
 3489              	
 3490              	 .thumb
 3491 0022 FB60     	 str r3,[r7,#12]
 3492              	.L259:
 3493              	.LBE224:
 3494              	.LBE223:
 3495              	 .loc 1 2002 0 discriminator 1
 3496 0024 FEE7     	 b .L259
 3497              	.L258:
2003:../Dave/Generated/FREERTOS/queue.c **** 
2004:../Dave/Generated/FREERTOS/queue.c ****     taskENTER_CRITICAL();
 3498              	 .loc 1 2004 0
 3499 0026 FFF7FEFF 	 bl vPortEnterCritical
2005:../Dave/Generated/FREERTOS/queue.c ****     {
2006:../Dave/Generated/FREERTOS/queue.c ****         uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 3500              	 .loc 1 2006 0
 3501 002a 7B69     	 ldr r3,[r7,#20]
 3502 002c DA6B     	 ldr r2,[r3,#60]
 3503 002e 7B69     	 ldr r3,[r7,#20]
 3504 0030 9B6B     	 ldr r3,[r3,#56]
 3505 0032 D31A     	 subs r3,r2,r3
 3506 0034 3B61     	 str r3,[r7,#16]
2007:../Dave/Generated/FREERTOS/queue.c ****     }
2008:../Dave/Generated/FREERTOS/queue.c ****     taskEXIT_CRITICAL();
 3507              	 .loc 1 2008 0
 3508 0036 FFF7FEFF 	 bl vPortExitCritical
2009:../Dave/Generated/FREERTOS/queue.c **** 
2010:../Dave/Generated/FREERTOS/queue.c ****     return uxReturn;
 3509              	 .loc 1 2010 0
 3510 003a 3B69     	 ldr r3,[r7,#16]
2011:../Dave/Generated/FREERTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3511              	 .loc 1 2011 0
 3512 003c 1846     	 mov r0,r3
 3513 003e 1837     	 adds r7,r7,#24
 3514              	.LCFI99:
 3515              	 .cfi_def_cfa_offset 8
 3516 0040 BD46     	 mov sp,r7
 3517              	.LCFI100:
 3518              	 .cfi_def_cfa_register 13
 3519              	 
 3520 0042 80BD     	 pop {r7,pc}
 3521              	 .cfi_endproc
 3522              	.LFE157:
 3524              	 .section .text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 3525              	 .align 2
 3526              	 .global uxQueueMessagesWaitingFromISR
 3527              	 .thumb
 3528              	 .thumb_func
 3530              	uxQueueMessagesWaitingFromISR:
 3531              	.LFB158:
2012:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2013:../Dave/Generated/FREERTOS/queue.c **** 
2014:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
2015:../Dave/Generated/FREERTOS/queue.c **** {
 3532              	 .loc 1 2015 0
 3533              	 .cfi_startproc
 3534              	 
 3535              	 
 3536              	 
 3537 0000 80B4     	 push {r7}
 3538              	.LCFI101:
 3539              	 .cfi_def_cfa_offset 4
 3540              	 .cfi_offset 7,-4
 3541 0002 87B0     	 sub sp,sp,#28
 3542              	.LCFI102:
 3543              	 .cfi_def_cfa_offset 32
 3544 0004 00AF     	 add r7,sp,#0
 3545              	.LCFI103:
 3546              	 .cfi_def_cfa_register 7
 3547 0006 7860     	 str r0,[r7,#4]
2016:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxReturn;
2017:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3548              	 .loc 1 2017 0
 3549 0008 7B68     	 ldr r3,[r7,#4]
 3550 000a 7B61     	 str r3,[r7,#20]
2018:../Dave/Generated/FREERTOS/queue.c **** 
2019:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 3551              	 .loc 1 2019 0
 3552 000c 7B69     	 ldr r3,[r7,#20]
 3553 000e 002B     	 cmp r3,#0
 3554 0010 09D1     	 bne .L262
 3555              	.LBB225:
 3556              	.LBB226:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3557              	 .loc 2 197 0 discriminator 1
 3558              	
 3559 0012 4FF0FC03 	 mov r3,#252
 3560 0016 83F31188 	 msr basepri,r3
 3561 001a BFF36F8F 	 isb 
 3562 001e BFF34F8F 	 dsb 
 3563              	
 3564              	
 3565              	 .thumb
 3566 0022 FB60     	 str r3,[r7,#12]
 3567              	.L263:
 3568              	.LBE226:
 3569              	.LBE225:
 3570              	 .loc 1 2019 0 discriminator 1
 3571 0024 FEE7     	 b .L263
 3572              	.L262:
2020:../Dave/Generated/FREERTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 3573              	 .loc 1 2020 0
 3574 0026 7B69     	 ldr r3,[r7,#20]
 3575 0028 9B6B     	 ldr r3,[r3,#56]
 3576 002a 3B61     	 str r3,[r7,#16]
2021:../Dave/Generated/FREERTOS/queue.c **** 
2022:../Dave/Generated/FREERTOS/queue.c ****     return uxReturn;
 3577              	 .loc 1 2022 0
 3578 002c 3B69     	 ldr r3,[r7,#16]
2023:../Dave/Generated/FREERTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3579              	 .loc 1 2023 0
 3580 002e 1846     	 mov r0,r3
 3581 0030 1C37     	 adds r7,r7,#28
 3582              	.LCFI104:
 3583              	 .cfi_def_cfa_offset 4
 3584 0032 BD46     	 mov sp,r7
 3585              	.LCFI105:
 3586              	 .cfi_def_cfa_register 13
 3587              	 
 3588 0034 5DF8047B 	 ldr r7,[sp],#4
 3589              	.LCFI106:
 3590              	 .cfi_restore 7
 3591              	 .cfi_def_cfa_offset 0
 3592 0038 7047     	 bx lr
 3593              	 .cfi_endproc
 3594              	.LFE158:
 3596 003a 00BF     	 .section .text.vQueueDelete,"ax",%progbits
 3597              	 .align 2
 3598              	 .global vQueueDelete
 3599              	 .thumb
 3600              	 .thumb_func
 3602              	vQueueDelete:
 3603              	.LFB159:
2024:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2025:../Dave/Generated/FREERTOS/queue.c **** 
2026:../Dave/Generated/FREERTOS/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
2027:../Dave/Generated/FREERTOS/queue.c **** {
 3604              	 .loc 1 2027 0
 3605              	 .cfi_startproc
 3606              	 
 3607              	 
 3608 0000 80B5     	 push {r7,lr}
 3609              	.LCFI107:
 3610              	 .cfi_def_cfa_offset 8
 3611              	 .cfi_offset 7,-8
 3612              	 .cfi_offset 14,-4
 3613 0002 84B0     	 sub sp,sp,#16
 3614              	.LCFI108:
 3615              	 .cfi_def_cfa_offset 24
 3616 0004 00AF     	 add r7,sp,#0
 3617              	.LCFI109:
 3618              	 .cfi_def_cfa_register 7
 3619 0006 7860     	 str r0,[r7,#4]
2028:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3620              	 .loc 1 2028 0
 3621 0008 7B68     	 ldr r3,[r7,#4]
 3622 000a FB60     	 str r3,[r7,#12]
2029:../Dave/Generated/FREERTOS/queue.c **** 
2030:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 3623              	 .loc 1 2030 0
 3624 000c FB68     	 ldr r3,[r7,#12]
 3625 000e 002B     	 cmp r3,#0
 3626 0010 09D1     	 bne .L266
 3627              	.LBB227:
 3628              	.LBB228:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3629              	 .loc 2 197 0 discriminator 1
 3630              	
 3631 0012 4FF0FC03 	 mov r3,#252
 3632 0016 83F31188 	 msr basepri,r3
 3633 001a BFF36F8F 	 isb 
 3634 001e BFF34F8F 	 dsb 
 3635              	
 3636              	
 3637              	 .thumb
 3638 0022 BB60     	 str r3,[r7,#8]
 3639              	.L267:
 3640              	.LBE228:
 3641              	.LBE227:
 3642              	 .loc 1 2030 0 discriminator 1
 3643 0024 FEE7     	 b .L267
 3644              	.L266:
2031:../Dave/Generated/FREERTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
2032:../Dave/Generated/FREERTOS/queue.c **** 
2033:../Dave/Generated/FREERTOS/queue.c ****     #if ( configQUEUE_REGISTRY_SIZE > 0 )
2034:../Dave/Generated/FREERTOS/queue.c ****         {
2035:../Dave/Generated/FREERTOS/queue.c ****             vQueueUnregisterQueue( pxQueue );
 3645              	 .loc 1 2035 0
 3646 0026 F868     	 ldr r0,[r7,#12]
 3647 0028 FFF7FEFF 	 bl vQueueUnregisterQueue
2036:../Dave/Generated/FREERTOS/queue.c ****         }
2037:../Dave/Generated/FREERTOS/queue.c ****     #endif
2038:../Dave/Generated/FREERTOS/queue.c **** 
2039:../Dave/Generated/FREERTOS/queue.c ****     #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
2040:../Dave/Generated/FREERTOS/queue.c ****         {
2041:../Dave/Generated/FREERTOS/queue.c ****             /* The queue can only have been allocated dynamically - free it
2042:../Dave/Generated/FREERTOS/queue.c ****              * again. */
2043:../Dave/Generated/FREERTOS/queue.c ****             vPortFree( pxQueue );
 3648              	 .loc 1 2043 0
 3649 002c F868     	 ldr r0,[r7,#12]
 3650 002e FFF7FEFF 	 bl vPortFree
2044:../Dave/Generated/FREERTOS/queue.c ****         }
2045:../Dave/Generated/FREERTOS/queue.c ****     #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
2046:../Dave/Generated/FREERTOS/queue.c ****         {
2047:../Dave/Generated/FREERTOS/queue.c ****             /* The queue could have been allocated statically or dynamically, so
2048:../Dave/Generated/FREERTOS/queue.c ****              * check before attempting to free the memory. */
2049:../Dave/Generated/FREERTOS/queue.c ****             if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
2050:../Dave/Generated/FREERTOS/queue.c ****             {
2051:../Dave/Generated/FREERTOS/queue.c ****                 vPortFree( pxQueue );
2052:../Dave/Generated/FREERTOS/queue.c ****             }
2053:../Dave/Generated/FREERTOS/queue.c ****             else
2054:../Dave/Generated/FREERTOS/queue.c ****             {
2055:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2056:../Dave/Generated/FREERTOS/queue.c ****             }
2057:../Dave/Generated/FREERTOS/queue.c ****         }
2058:../Dave/Generated/FREERTOS/queue.c ****     #else /* if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION ==
2059:../Dave/Generated/FREERTOS/queue.c ****         {
2060:../Dave/Generated/FREERTOS/queue.c ****             /* The queue must have been statically allocated, so is not going to be
2061:../Dave/Generated/FREERTOS/queue.c ****              * deleted.  Avoid compiler warnings about the unused parameter. */
2062:../Dave/Generated/FREERTOS/queue.c ****             ( void ) pxQueue;
2063:../Dave/Generated/FREERTOS/queue.c ****         }
2064:../Dave/Generated/FREERTOS/queue.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2065:../Dave/Generated/FREERTOS/queue.c **** }
 3651              	 .loc 1 2065 0
 3652 0032 1037     	 adds r7,r7,#16
 3653              	.LCFI110:
 3654              	 .cfi_def_cfa_offset 8
 3655 0034 BD46     	 mov sp,r7
 3656              	.LCFI111:
 3657              	 .cfi_def_cfa_register 13
 3658              	 
 3659 0036 80BD     	 pop {r7,pc}
 3660              	 .cfi_endproc
 3661              	.LFE159:
 3663              	 .section .text.uxQueueGetQueueNumber,"ax",%progbits
 3664              	 .align 2
 3665              	 .global uxQueueGetQueueNumber
 3666              	 .thumb
 3667              	 .thumb_func
 3669              	uxQueueGetQueueNumber:
 3670              	.LFB160:
2066:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2067:../Dave/Generated/FREERTOS/queue.c **** 
2068:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2069:../Dave/Generated/FREERTOS/queue.c **** 
2070:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2071:../Dave/Generated/FREERTOS/queue.c ****     {
 3671              	 .loc 1 2071 0
 3672              	 .cfi_startproc
 3673              	 
 3674              	 
 3675              	 
 3676 0000 80B4     	 push {r7}
 3677              	.LCFI112:
 3678              	 .cfi_def_cfa_offset 4
 3679              	 .cfi_offset 7,-4
 3680 0002 83B0     	 sub sp,sp,#12
 3681              	.LCFI113:
 3682              	 .cfi_def_cfa_offset 16
 3683 0004 00AF     	 add r7,sp,#0
 3684              	.LCFI114:
 3685              	 .cfi_def_cfa_register 7
 3686 0006 7860     	 str r0,[r7,#4]
2072:../Dave/Generated/FREERTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 3687              	 .loc 1 2072 0
 3688 0008 7B68     	 ldr r3,[r7,#4]
 3689 000a DB6C     	 ldr r3,[r3,#76]
2073:../Dave/Generated/FREERTOS/queue.c ****     }
 3690              	 .loc 1 2073 0
 3691 000c 1846     	 mov r0,r3
 3692 000e 0C37     	 adds r7,r7,#12
 3693              	.LCFI115:
 3694              	 .cfi_def_cfa_offset 4
 3695 0010 BD46     	 mov sp,r7
 3696              	.LCFI116:
 3697              	 .cfi_def_cfa_register 13
 3698              	 
 3699 0012 5DF8047B 	 ldr r7,[sp],#4
 3700              	.LCFI117:
 3701              	 .cfi_restore 7
 3702              	 .cfi_def_cfa_offset 0
 3703 0016 7047     	 bx lr
 3704              	 .cfi_endproc
 3705              	.LFE160:
 3707              	 .section .text.vQueueSetQueueNumber,"ax",%progbits
 3708              	 .align 2
 3709              	 .global vQueueSetQueueNumber
 3710              	 .thumb
 3711              	 .thumb_func
 3713              	vQueueSetQueueNumber:
 3714              	.LFB161:
2074:../Dave/Generated/FREERTOS/queue.c **** 
2075:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2076:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2077:../Dave/Generated/FREERTOS/queue.c **** 
2078:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2079:../Dave/Generated/FREERTOS/queue.c **** 
2080:../Dave/Generated/FREERTOS/queue.c ****     void vQueueSetQueueNumber( QueueHandle_t xQueue,
2081:../Dave/Generated/FREERTOS/queue.c ****                                UBaseType_t uxQueueNumber )
2082:../Dave/Generated/FREERTOS/queue.c ****     {
 3715              	 .loc 1 2082 0
 3716              	 .cfi_startproc
 3717              	 
 3718              	 
 3719              	 
 3720 0000 80B4     	 push {r7}
 3721              	.LCFI118:
 3722              	 .cfi_def_cfa_offset 4
 3723              	 .cfi_offset 7,-4
 3724 0002 83B0     	 sub sp,sp,#12
 3725              	.LCFI119:
 3726              	 .cfi_def_cfa_offset 16
 3727 0004 00AF     	 add r7,sp,#0
 3728              	.LCFI120:
 3729              	 .cfi_def_cfa_register 7
 3730 0006 7860     	 str r0,[r7,#4]
 3731 0008 3960     	 str r1,[r7]
2083:../Dave/Generated/FREERTOS/queue.c ****         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 3732              	 .loc 1 2083 0
 3733 000a 7B68     	 ldr r3,[r7,#4]
 3734 000c 3A68     	 ldr r2,[r7]
 3735 000e DA64     	 str r2,[r3,#76]
2084:../Dave/Generated/FREERTOS/queue.c ****     }
 3736              	 .loc 1 2084 0
 3737 0010 0C37     	 adds r7,r7,#12
 3738              	.LCFI121:
 3739              	 .cfi_def_cfa_offset 4
 3740 0012 BD46     	 mov sp,r7
 3741              	.LCFI122:
 3742              	 .cfi_def_cfa_register 13
 3743              	 
 3744 0014 5DF8047B 	 ldr r7,[sp],#4
 3745              	.LCFI123:
 3746              	 .cfi_restore 7
 3747              	 .cfi_def_cfa_offset 0
 3748 0018 7047     	 bx lr
 3749              	 .cfi_endproc
 3750              	.LFE161:
 3752 001a 00BF     	 .section .text.ucQueueGetQueueType,"ax",%progbits
 3753              	 .align 2
 3754              	 .global ucQueueGetQueueType
 3755              	 .thumb
 3756              	 .thumb_func
 3758              	ucQueueGetQueueType:
 3759              	.LFB162:
2085:../Dave/Generated/FREERTOS/queue.c **** 
2086:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2087:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2088:../Dave/Generated/FREERTOS/queue.c **** 
2089:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2090:../Dave/Generated/FREERTOS/queue.c **** 
2091:../Dave/Generated/FREERTOS/queue.c ****     uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2092:../Dave/Generated/FREERTOS/queue.c ****     {
 3760              	 .loc 1 2092 0
 3761              	 .cfi_startproc
 3762              	 
 3763              	 
 3764              	 
 3765 0000 80B4     	 push {r7}
 3766              	.LCFI124:
 3767              	 .cfi_def_cfa_offset 4
 3768              	 .cfi_offset 7,-4
 3769 0002 83B0     	 sub sp,sp,#12
 3770              	.LCFI125:
 3771              	 .cfi_def_cfa_offset 16
 3772 0004 00AF     	 add r7,sp,#0
 3773              	.LCFI126:
 3774              	 .cfi_def_cfa_register 7
 3775 0006 7860     	 str r0,[r7,#4]
2093:../Dave/Generated/FREERTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->ucQueueType;
 3776              	 .loc 1 2093 0
 3777 0008 7B68     	 ldr r3,[r7,#4]
 3778 000a 93F85030 	 ldrb r3,[r3,#80]
2094:../Dave/Generated/FREERTOS/queue.c ****     }
 3779              	 .loc 1 2094 0
 3780 000e 1846     	 mov r0,r3
 3781 0010 0C37     	 adds r7,r7,#12
 3782              	.LCFI127:
 3783              	 .cfi_def_cfa_offset 4
 3784 0012 BD46     	 mov sp,r7
 3785              	.LCFI128:
 3786              	 .cfi_def_cfa_register 13
 3787              	 
 3788 0014 5DF8047B 	 ldr r7,[sp],#4
 3789              	.LCFI129:
 3790              	 .cfi_restore 7
 3791              	 .cfi_def_cfa_offset 0
 3792 0018 7047     	 bx lr
 3793              	 .cfi_endproc
 3794              	.LFE162:
 3796 001a 00BF     	 .section .text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
 3797              	 .align 2
 3798              	 .thumb
 3799              	 .thumb_func
 3801              	prvGetDisinheritPriorityAfterTimeout:
 3802              	.LFB163:
2095:../Dave/Generated/FREERTOS/queue.c **** 
2096:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2097:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2098:../Dave/Generated/FREERTOS/queue.c **** 
2099:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
2100:../Dave/Generated/FREERTOS/queue.c **** 
2101:../Dave/Generated/FREERTOS/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2102:../Dave/Generated/FREERTOS/queue.c ****     {
 3803              	 .loc 1 2102 0
 3804              	 .cfi_startproc
 3805              	 
 3806              	 
 3807              	 
 3808 0000 80B4     	 push {r7}
 3809              	.LCFI130:
 3810              	 .cfi_def_cfa_offset 4
 3811              	 .cfi_offset 7,-4
 3812 0002 85B0     	 sub sp,sp,#20
 3813              	.LCFI131:
 3814              	 .cfi_def_cfa_offset 24
 3815 0004 00AF     	 add r7,sp,#0
 3816              	.LCFI132:
 3817              	 .cfi_def_cfa_register 7
 3818 0006 7860     	 str r0,[r7,#4]
2103:../Dave/Generated/FREERTOS/queue.c ****         UBaseType_t uxHighestPriorityOfWaitingTasks;
2104:../Dave/Generated/FREERTOS/queue.c **** 
2105:../Dave/Generated/FREERTOS/queue.c ****         /* If a task waiting for a mutex causes the mutex holder to inherit a
2106:../Dave/Generated/FREERTOS/queue.c ****          * priority, but the waiting task times out, then the holder should
2107:../Dave/Generated/FREERTOS/queue.c ****          * disinherit the priority - but only down to the highest priority of any
2108:../Dave/Generated/FREERTOS/queue.c ****          * other tasks that are waiting for the same mutex.  For this purpose,
2109:../Dave/Generated/FREERTOS/queue.c ****          * return the priority of the highest priority task that is waiting for the
2110:../Dave/Generated/FREERTOS/queue.c ****          * mutex. */
2111:../Dave/Generated/FREERTOS/queue.c ****         if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 3819              	 .loc 1 2111 0
 3820 0008 7B68     	 ldr r3,[r7,#4]
 3821 000a 5B6A     	 ldr r3,[r3,#36]
 3822 000c 002B     	 cmp r3,#0
 3823 000e 06D0     	 beq .L274
2112:../Dave/Generated/FREERTOS/queue.c ****         {
2113:../Dave/Generated/FREERTOS/queue.c ****             uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t 
 3824              	 .loc 1 2113 0
 3825 0010 7B68     	 ldr r3,[r7,#4]
 3826 0012 1B6B     	 ldr r3,[r3,#48]
 3827 0014 1B68     	 ldr r3,[r3]
 3828 0016 C3F10503 	 rsb r3,r3,#5
 3829 001a FB60     	 str r3,[r7,#12]
 3830 001c 01E0     	 b .L275
 3831              	.L274:
2114:../Dave/Generated/FREERTOS/queue.c ****         }
2115:../Dave/Generated/FREERTOS/queue.c ****         else
2116:../Dave/Generated/FREERTOS/queue.c ****         {
2117:../Dave/Generated/FREERTOS/queue.c ****             uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 3832              	 .loc 1 2117 0
 3833 001e 0023     	 movs r3,#0
 3834 0020 FB60     	 str r3,[r7,#12]
 3835              	.L275:
2118:../Dave/Generated/FREERTOS/queue.c ****         }
2119:../Dave/Generated/FREERTOS/queue.c **** 
2120:../Dave/Generated/FREERTOS/queue.c ****         return uxHighestPriorityOfWaitingTasks;
 3836              	 .loc 1 2120 0
 3837 0022 FB68     	 ldr r3,[r7,#12]
2121:../Dave/Generated/FREERTOS/queue.c ****     }
 3838              	 .loc 1 2121 0
 3839 0024 1846     	 mov r0,r3
 3840 0026 1437     	 adds r7,r7,#20
 3841              	.LCFI133:
 3842              	 .cfi_def_cfa_offset 4
 3843 0028 BD46     	 mov sp,r7
 3844              	.LCFI134:
 3845              	 .cfi_def_cfa_register 13
 3846              	 
 3847 002a 5DF8047B 	 ldr r7,[sp],#4
 3848              	.LCFI135:
 3849              	 .cfi_restore 7
 3850              	 .cfi_def_cfa_offset 0
 3851 002e 7047     	 bx lr
 3852              	 .cfi_endproc
 3853              	.LFE163:
 3855              	 .section .text.prvCopyDataToQueue,"ax",%progbits
 3856              	 .align 2
 3857              	 .thumb
 3858              	 .thumb_func
 3860              	prvCopyDataToQueue:
 3861              	.LFB164:
2122:../Dave/Generated/FREERTOS/queue.c **** 
2123:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_MUTEXES */
2124:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2125:../Dave/Generated/FREERTOS/queue.c **** 
2126:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
2127:../Dave/Generated/FREERTOS/queue.c ****                                       const void * pvItemToQueue,
2128:../Dave/Generated/FREERTOS/queue.c ****                                       const BaseType_t xPosition )
2129:../Dave/Generated/FREERTOS/queue.c **** {
 3862              	 .loc 1 2129 0
 3863              	 .cfi_startproc
 3864              	 
 3865              	 
 3866 0000 80B5     	 push {r7,lr}
 3867              	.LCFI136:
 3868              	 .cfi_def_cfa_offset 8
 3869              	 .cfi_offset 7,-8
 3870              	 .cfi_offset 14,-4
 3871 0002 86B0     	 sub sp,sp,#24
 3872              	.LCFI137:
 3873              	 .cfi_def_cfa_offset 32
 3874 0004 00AF     	 add r7,sp,#0
 3875              	.LCFI138:
 3876              	 .cfi_def_cfa_register 7
 3877 0006 F860     	 str r0,[r7,#12]
 3878 0008 B960     	 str r1,[r7,#8]
 3879 000a 7A60     	 str r2,[r7,#4]
2130:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn = pdFALSE;
 3880              	 .loc 1 2130 0
 3881 000c 0023     	 movs r3,#0
 3882 000e 7B61     	 str r3,[r7,#20]
2131:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
2132:../Dave/Generated/FREERTOS/queue.c **** 
2133:../Dave/Generated/FREERTOS/queue.c ****     /* This function is called from a critical section. */
2134:../Dave/Generated/FREERTOS/queue.c **** 
2135:../Dave/Generated/FREERTOS/queue.c ****     uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 3883              	 .loc 1 2135 0
 3884 0010 FB68     	 ldr r3,[r7,#12]
 3885 0012 9B6B     	 ldr r3,[r3,#56]
 3886 0014 3B61     	 str r3,[r7,#16]
2136:../Dave/Generated/FREERTOS/queue.c **** 
2137:../Dave/Generated/FREERTOS/queue.c ****     if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 3887              	 .loc 1 2137 0
 3888 0016 FB68     	 ldr r3,[r7,#12]
 3889 0018 1B6C     	 ldr r3,[r3,#64]
 3890 001a 002B     	 cmp r3,#0
 3891 001c 0DD1     	 bne .L278
2138:../Dave/Generated/FREERTOS/queue.c ****     {
2139:../Dave/Generated/FREERTOS/queue.c ****         #if ( configUSE_MUTEXES == 1 )
2140:../Dave/Generated/FREERTOS/queue.c ****             {
2141:../Dave/Generated/FREERTOS/queue.c ****                 if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 3892              	 .loc 1 2141 0
 3893 001e FB68     	 ldr r3,[r7,#12]
 3894 0020 1B68     	 ldr r3,[r3]
 3895 0022 002B     	 cmp r3,#0
 3896 0024 4FD1     	 bne .L279
2142:../Dave/Generated/FREERTOS/queue.c ****                 {
2143:../Dave/Generated/FREERTOS/queue.c ****                     /* The mutex is no longer being held. */
2144:../Dave/Generated/FREERTOS/queue.c ****                     xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 3897              	 .loc 1 2144 0
 3898 0026 FB68     	 ldr r3,[r7,#12]
 3899 0028 9B68     	 ldr r3,[r3,#8]
 3900 002a 1846     	 mov r0,r3
 3901 002c FFF7FEFF 	 bl xTaskPriorityDisinherit
 3902 0030 7861     	 str r0,[r7,#20]
2145:../Dave/Generated/FREERTOS/queue.c ****                     pxQueue->u.xSemaphore.xMutexHolder = NULL;
 3903              	 .loc 1 2145 0
 3904 0032 FB68     	 ldr r3,[r7,#12]
 3905 0034 0022     	 movs r2,#0
 3906 0036 9A60     	 str r2,[r3,#8]
 3907 0038 45E0     	 b .L279
 3908              	.L278:
2146:../Dave/Generated/FREERTOS/queue.c ****                 }
2147:../Dave/Generated/FREERTOS/queue.c ****                 else
2148:../Dave/Generated/FREERTOS/queue.c ****                 {
2149:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2150:../Dave/Generated/FREERTOS/queue.c ****                 }
2151:../Dave/Generated/FREERTOS/queue.c ****             }
2152:../Dave/Generated/FREERTOS/queue.c ****         #endif /* configUSE_MUTEXES */
2153:../Dave/Generated/FREERTOS/queue.c ****     }
2154:../Dave/Generated/FREERTOS/queue.c ****     else if( xPosition == queueSEND_TO_BACK )
 3909              	 .loc 1 2154 0
 3910 003a 7B68     	 ldr r3,[r7,#4]
 3911 003c 002B     	 cmp r3,#0
 3912 003e 1AD1     	 bne .L280
2155:../Dave/Generated/FREERTOS/queue.c ****     {
2156:../Dave/Generated/FREERTOS/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSi
 3913              	 .loc 1 2156 0
 3914 0040 FB68     	 ldr r3,[r7,#12]
 3915 0042 5A68     	 ldr r2,[r3,#4]
 3916 0044 FB68     	 ldr r3,[r7,#12]
 3917 0046 1B6C     	 ldr r3,[r3,#64]
 3918 0048 1046     	 mov r0,r2
 3919 004a B968     	 ldr r1,[r7,#8]
 3920 004c 1A46     	 mov r2,r3
 3921 004e FFF7FEFF 	 bl memcpy
2157:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
 3922              	 .loc 1 2157 0
 3923 0052 FB68     	 ldr r3,[r7,#12]
 3924 0054 5A68     	 ldr r2,[r3,#4]
 3925 0056 FB68     	 ldr r3,[r7,#12]
 3926 0058 1B6C     	 ldr r3,[r3,#64]
 3927 005a 1A44     	 add r2,r2,r3
 3928 005c FB68     	 ldr r3,[r7,#12]
 3929 005e 5A60     	 str r2,[r3,#4]
2158:../Dave/Generated/FREERTOS/queue.c **** 
2159:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                       
 3930              	 .loc 1 2159 0
 3931 0060 FB68     	 ldr r3,[r7,#12]
 3932 0062 5A68     	 ldr r2,[r3,#4]
 3933 0064 FB68     	 ldr r3,[r7,#12]
 3934 0066 9B68     	 ldr r3,[r3,#8]
 3935 0068 9A42     	 cmp r2,r3
 3936 006a 2CD3     	 bcc .L279
2160:../Dave/Generated/FREERTOS/queue.c ****         {
2161:../Dave/Generated/FREERTOS/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 3937              	 .loc 1 2161 0
 3938 006c FB68     	 ldr r3,[r7,#12]
 3939 006e 1A68     	 ldr r2,[r3]
 3940 0070 FB68     	 ldr r3,[r7,#12]
 3941 0072 5A60     	 str r2,[r3,#4]
 3942 0074 27E0     	 b .L279
 3943              	.L280:
2162:../Dave/Generated/FREERTOS/queue.c ****         }
2163:../Dave/Generated/FREERTOS/queue.c ****         else
2164:../Dave/Generated/FREERTOS/queue.c ****         {
2165:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2166:../Dave/Generated/FREERTOS/queue.c ****         }
2167:../Dave/Generated/FREERTOS/queue.c ****     }
2168:../Dave/Generated/FREERTOS/queue.c ****     else
2169:../Dave/Generated/FREERTOS/queue.c ****     {
2170:../Dave/Generated/FREERTOS/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue
 3944              	 .loc 1 2170 0
 3945 0076 FB68     	 ldr r3,[r7,#12]
 3946 0078 DA68     	 ldr r2,[r3,#12]
 3947 007a FB68     	 ldr r3,[r7,#12]
 3948 007c 1B6C     	 ldr r3,[r3,#64]
 3949 007e 1046     	 mov r0,r2
 3950 0080 B968     	 ldr r1,[r7,#8]
 3951 0082 1A46     	 mov r2,r3
 3952 0084 FFF7FEFF 	 bl memcpy
2171:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 3953              	 .loc 1 2171 0
 3954 0088 FB68     	 ldr r3,[r7,#12]
 3955 008a DA68     	 ldr r2,[r3,#12]
 3956 008c FB68     	 ldr r3,[r7,#12]
 3957 008e 1B6C     	 ldr r3,[r3,#64]
 3958 0090 5B42     	 negs r3,r3
 3959 0092 1A44     	 add r2,r2,r3
 3960 0094 FB68     	 ldr r3,[r7,#12]
 3961 0096 DA60     	 str r2,[r3,#12]
2172:../Dave/Generated/FREERTOS/queue.c **** 
2173:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified
 3962              	 .loc 1 2173 0
 3963 0098 FB68     	 ldr r3,[r7,#12]
 3964 009a DA68     	 ldr r2,[r3,#12]
 3965 009c FB68     	 ldr r3,[r7,#12]
 3966 009e 1B68     	 ldr r3,[r3]
 3967 00a0 9A42     	 cmp r2,r3
 3968 00a2 07D2     	 bcs .L281
2174:../Dave/Generated/FREERTOS/queue.c ****         {
2175:../Dave/Generated/FREERTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 3969              	 .loc 1 2175 0
 3970 00a4 FB68     	 ldr r3,[r7,#12]
 3971 00a6 9A68     	 ldr r2,[r3,#8]
 3972 00a8 FB68     	 ldr r3,[r7,#12]
 3973 00aa 1B6C     	 ldr r3,[r3,#64]
 3974 00ac 5B42     	 negs r3,r3
 3975 00ae 1A44     	 add r2,r2,r3
 3976 00b0 FB68     	 ldr r3,[r7,#12]
 3977 00b2 DA60     	 str r2,[r3,#12]
 3978              	.L281:
2176:../Dave/Generated/FREERTOS/queue.c ****         }
2177:../Dave/Generated/FREERTOS/queue.c ****         else
2178:../Dave/Generated/FREERTOS/queue.c ****         {
2179:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2180:../Dave/Generated/FREERTOS/queue.c ****         }
2181:../Dave/Generated/FREERTOS/queue.c **** 
2182:../Dave/Generated/FREERTOS/queue.c ****         if( xPosition == queueOVERWRITE )
 3979              	 .loc 1 2182 0
 3980 00b4 7B68     	 ldr r3,[r7,#4]
 3981 00b6 022B     	 cmp r3,#2
 3982 00b8 05D1     	 bne .L279
2183:../Dave/Generated/FREERTOS/queue.c ****         {
2184:../Dave/Generated/FREERTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 3983              	 .loc 1 2184 0
 3984 00ba 3B69     	 ldr r3,[r7,#16]
 3985 00bc 002B     	 cmp r3,#0
 3986 00be 02D0     	 beq .L279
2185:../Dave/Generated/FREERTOS/queue.c ****             {
2186:../Dave/Generated/FREERTOS/queue.c ****                 /* An item is not being added but overwritten, so subtract
2187:../Dave/Generated/FREERTOS/queue.c ****                  * one from the recorded number of items in the queue so when
2188:../Dave/Generated/FREERTOS/queue.c ****                  * one is added again below the number of recorded items remains
2189:../Dave/Generated/FREERTOS/queue.c ****                  * correct. */
2190:../Dave/Generated/FREERTOS/queue.c ****                 --uxMessagesWaiting;
 3987              	 .loc 1 2190 0
 3988 00c0 3B69     	 ldr r3,[r7,#16]
 3989 00c2 013B     	 subs r3,r3,#1
 3990 00c4 3B61     	 str r3,[r7,#16]
 3991              	.L279:
2191:../Dave/Generated/FREERTOS/queue.c ****             }
2192:../Dave/Generated/FREERTOS/queue.c ****             else
2193:../Dave/Generated/FREERTOS/queue.c ****             {
2194:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2195:../Dave/Generated/FREERTOS/queue.c ****             }
2196:../Dave/Generated/FREERTOS/queue.c ****         }
2197:../Dave/Generated/FREERTOS/queue.c ****         else
2198:../Dave/Generated/FREERTOS/queue.c ****         {
2199:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2200:../Dave/Generated/FREERTOS/queue.c ****         }
2201:../Dave/Generated/FREERTOS/queue.c ****     }
2202:../Dave/Generated/FREERTOS/queue.c **** 
2203:../Dave/Generated/FREERTOS/queue.c ****     pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 3992              	 .loc 1 2203 0
 3993 00c6 3B69     	 ldr r3,[r7,#16]
 3994 00c8 5A1C     	 adds r2,r3,#1
 3995 00ca FB68     	 ldr r3,[r7,#12]
 3996 00cc 9A63     	 str r2,[r3,#56]
2204:../Dave/Generated/FREERTOS/queue.c **** 
2205:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 3997              	 .loc 1 2205 0
 3998 00ce 7B69     	 ldr r3,[r7,#20]
2206:../Dave/Generated/FREERTOS/queue.c **** }
 3999              	 .loc 1 2206 0
 4000 00d0 1846     	 mov r0,r3
 4001 00d2 1837     	 adds r7,r7,#24
 4002              	.LCFI139:
 4003              	 .cfi_def_cfa_offset 8
 4004 00d4 BD46     	 mov sp,r7
 4005              	.LCFI140:
 4006              	 .cfi_def_cfa_register 13
 4007              	 
 4008 00d6 80BD     	 pop {r7,pc}
 4009              	 .cfi_endproc
 4010              	.LFE164:
 4012              	 .section .text.prvCopyDataFromQueue,"ax",%progbits
 4013              	 .align 2
 4014              	 .thumb
 4015              	 .thumb_func
 4017              	prvCopyDataFromQueue:
 4018              	.LFB165:
2207:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2208:../Dave/Generated/FREERTOS/queue.c **** 
2209:../Dave/Generated/FREERTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
2210:../Dave/Generated/FREERTOS/queue.c ****                                   void * const pvBuffer )
2211:../Dave/Generated/FREERTOS/queue.c **** {
 4019              	 .loc 1 2211 0
 4020              	 .cfi_startproc
 4021              	 
 4022              	 
 4023 0000 80B5     	 push {r7,lr}
 4024              	.LCFI141:
 4025              	 .cfi_def_cfa_offset 8
 4026              	 .cfi_offset 7,-8
 4027              	 .cfi_offset 14,-4
 4028 0002 82B0     	 sub sp,sp,#8
 4029              	.LCFI142:
 4030              	 .cfi_def_cfa_offset 16
 4031 0004 00AF     	 add r7,sp,#0
 4032              	.LCFI143:
 4033              	 .cfi_def_cfa_register 7
 4034 0006 7860     	 str r0,[r7,#4]
 4035 0008 3960     	 str r1,[r7]
2212:../Dave/Generated/FREERTOS/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 4036              	 .loc 1 2212 0
 4037 000a 7B68     	 ldr r3,[r7,#4]
 4038 000c 1B6C     	 ldr r3,[r3,#64]
 4039 000e 002B     	 cmp r3,#0
 4040 0010 19D0     	 beq .L283
2213:../Dave/Generated/FREERTOS/queue.c ****     {
2214:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithm
 4041              	 .loc 1 2214 0
 4042 0012 7B68     	 ldr r3,[r7,#4]
 4043 0014 DA68     	 ldr r2,[r3,#12]
 4044 0016 7B68     	 ldr r3,[r7,#4]
 4045 0018 1B6C     	 ldr r3,[r3,#64]
 4046 001a 1A44     	 add r2,r2,r3
 4047 001c 7B68     	 ldr r3,[r7,#4]
 4048 001e DA60     	 str r2,[r3,#12]
2215:../Dave/Generated/FREERTOS/queue.c **** 
2216:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception
 4049              	 .loc 1 2216 0
 4050 0020 7B68     	 ldr r3,[r7,#4]
 4051 0022 DA68     	 ldr r2,[r3,#12]
 4052 0024 7B68     	 ldr r3,[r7,#4]
 4053 0026 9B68     	 ldr r3,[r3,#8]
 4054 0028 9A42     	 cmp r2,r3
 4055 002a 03D3     	 bcc .L285
2217:../Dave/Generated/FREERTOS/queue.c ****         {
2218:../Dave/Generated/FREERTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 4056              	 .loc 1 2218 0
 4057 002c 7B68     	 ldr r3,[r7,#4]
 4058 002e 1A68     	 ldr r2,[r3]
 4059 0030 7B68     	 ldr r3,[r7,#4]
 4060 0032 DA60     	 str r2,[r3,#12]
 4061              	.L285:
2219:../Dave/Generated/FREERTOS/queue.c ****         }
2220:../Dave/Generated/FREERTOS/queue.c ****         else
2221:../Dave/Generated/FREERTOS/queue.c ****         {
2222:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2223:../Dave/Generated/FREERTOS/queue.c ****         }
2224:../Dave/Generated/FREERTOS/queue.c **** 
2225:../Dave/Generated/FREERTOS/queue.c ****         ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) p
 4062              	 .loc 1 2225 0
 4063 0034 7B68     	 ldr r3,[r7,#4]
 4064 0036 DA68     	 ldr r2,[r3,#12]
 4065 0038 7B68     	 ldr r3,[r7,#4]
 4066 003a 1B6C     	 ldr r3,[r3,#64]
 4067 003c 3868     	 ldr r0,[r7]
 4068 003e 1146     	 mov r1,r2
 4069 0040 1A46     	 mov r2,r3
 4070 0042 FFF7FEFF 	 bl memcpy
 4071              	.L283:
2226:../Dave/Generated/FREERTOS/queue.c ****     }
2227:../Dave/Generated/FREERTOS/queue.c **** }
 4072              	 .loc 1 2227 0
 4073 0046 0837     	 adds r7,r7,#8
 4074              	.LCFI144:
 4075              	 .cfi_def_cfa_offset 8
 4076 0048 BD46     	 mov sp,r7
 4077              	.LCFI145:
 4078              	 .cfi_def_cfa_register 13
 4079              	 
 4080 004a 80BD     	 pop {r7,pc}
 4081              	 .cfi_endproc
 4082              	.LFE165:
 4084              	 .section .text.prvUnlockQueue,"ax",%progbits
 4085              	 .align 2
 4086              	 .thumb
 4087              	 .thumb_func
 4089              	prvUnlockQueue:
 4090              	.LFB166:
2228:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2229:../Dave/Generated/FREERTOS/queue.c **** 
2230:../Dave/Generated/FREERTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2231:../Dave/Generated/FREERTOS/queue.c **** {
 4091              	 .loc 1 2231 0
 4092              	 .cfi_startproc
 4093              	 
 4094              	 
 4095 0000 80B5     	 push {r7,lr}
 4096              	.LCFI146:
 4097              	 .cfi_def_cfa_offset 8
 4098              	 .cfi_offset 7,-8
 4099              	 .cfi_offset 14,-4
 4100 0002 84B0     	 sub sp,sp,#16
 4101              	.LCFI147:
 4102              	 .cfi_def_cfa_offset 24
 4103 0004 00AF     	 add r7,sp,#0
 4104              	.LCFI148:
 4105              	 .cfi_def_cfa_register 7
 4106 0006 7860     	 str r0,[r7,#4]
2232:../Dave/Generated/FREERTOS/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2233:../Dave/Generated/FREERTOS/queue.c **** 
2234:../Dave/Generated/FREERTOS/queue.c ****     /* The lock counts contains the number of extra data items placed or
2235:../Dave/Generated/FREERTOS/queue.c ****      * removed from the queue while the queue was locked.  When a queue is
2236:../Dave/Generated/FREERTOS/queue.c ****      * locked items can be added or removed, but the event lists cannot be
2237:../Dave/Generated/FREERTOS/queue.c ****      * updated. */
2238:../Dave/Generated/FREERTOS/queue.c ****     taskENTER_CRITICAL();
 4107              	 .loc 1 2238 0
 4108 0008 FFF7FEFF 	 bl vPortEnterCritical
 4109              	.LBB229:
2239:../Dave/Generated/FREERTOS/queue.c ****     {
2240:../Dave/Generated/FREERTOS/queue.c ****         int8_t cTxLock = pxQueue->cTxLock;
 4110              	 .loc 1 2240 0
 4111 000c 7B68     	 ldr r3,[r7,#4]
 4112 000e 93F84530 	 ldrb r3,[r3,#69]
 4113 0012 FB73     	 strb r3,[r7,#15]
2241:../Dave/Generated/FREERTOS/queue.c **** 
2242:../Dave/Generated/FREERTOS/queue.c ****         /* See if data was added to the queue while it was locked. */
2243:../Dave/Generated/FREERTOS/queue.c ****         while( cTxLock > queueLOCKED_UNMODIFIED )
 4114              	 .loc 1 2243 0
 4115 0014 20E0     	 b .L287
 4116              	.L292:
2244:../Dave/Generated/FREERTOS/queue.c ****         {
2245:../Dave/Generated/FREERTOS/queue.c ****             /* Data was posted while the queue was locked.  Are any tasks
2246:../Dave/Generated/FREERTOS/queue.c ****              * blocked waiting for data to become available? */
2247:../Dave/Generated/FREERTOS/queue.c ****             #if ( configUSE_QUEUE_SETS == 1 )
2248:../Dave/Generated/FREERTOS/queue.c ****                 {
2249:../Dave/Generated/FREERTOS/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
 4117              	 .loc 1 2249 0
 4118 0016 7B68     	 ldr r3,[r7,#4]
 4119 0018 9B6C     	 ldr r3,[r3,#72]
 4120 001a 002B     	 cmp r3,#0
 4121 001c 08D0     	 beq .L288
2250:../Dave/Generated/FREERTOS/queue.c ****                     {
2251:../Dave/Generated/FREERTOS/queue.c ****                         if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 4122              	 .loc 1 2251 0
 4123 001e 7868     	 ldr r0,[r7,#4]
 4124 0020 FFF7FEFF 	 bl prvNotifyQueueSetContainer
 4125 0024 0346     	 mov r3,r0
 4126 0026 002B     	 cmp r3,#0
 4127 0028 12D0     	 beq .L289
2252:../Dave/Generated/FREERTOS/queue.c ****                         {
2253:../Dave/Generated/FREERTOS/queue.c ****                             /* The queue is a member of a queue set, and posting to
2254:../Dave/Generated/FREERTOS/queue.c ****                              * the queue set caused a higher priority task to unblock.
2255:../Dave/Generated/FREERTOS/queue.c ****                              * A context switch is required. */
2256:../Dave/Generated/FREERTOS/queue.c ****                             vTaskMissedYield();
 4128              	 .loc 1 2256 0
 4129 002a FFF7FEFF 	 bl vTaskMissedYield
 4130 002e 0FE0     	 b .L289
 4131              	.L288:
2257:../Dave/Generated/FREERTOS/queue.c ****                         }
2258:../Dave/Generated/FREERTOS/queue.c ****                         else
2259:../Dave/Generated/FREERTOS/queue.c ****                         {
2260:../Dave/Generated/FREERTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2261:../Dave/Generated/FREERTOS/queue.c ****                         }
2262:../Dave/Generated/FREERTOS/queue.c ****                     }
2263:../Dave/Generated/FREERTOS/queue.c ****                     else
2264:../Dave/Generated/FREERTOS/queue.c ****                     {
2265:../Dave/Generated/FREERTOS/queue.c ****                         /* Tasks that are removed from the event list will get
2266:../Dave/Generated/FREERTOS/queue.c ****                          * added to the pending ready list as the scheduler is still
2267:../Dave/Generated/FREERTOS/queue.c ****                          * suspended. */
2268:../Dave/Generated/FREERTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 4132              	 .loc 1 2268 0
 4133 0030 7B68     	 ldr r3,[r7,#4]
 4134 0032 5B6A     	 ldr r3,[r3,#36]
 4135 0034 002B     	 cmp r3,#0
 4136 0036 0AD0     	 beq .L290
2269:../Dave/Generated/FREERTOS/queue.c ****                         {
2270:../Dave/Generated/FREERTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
 4137              	 .loc 1 2270 0
 4138 0038 7B68     	 ldr r3,[r7,#4]
 4139 003a 2433     	 adds r3,r3,#36
 4140 003c 1846     	 mov r0,r3
 4141 003e FFF7FEFF 	 bl xTaskRemoveFromEventList
 4142 0042 0346     	 mov r3,r0
 4143 0044 002B     	 cmp r3,#0
 4144 0046 03D0     	 beq .L289
2271:../Dave/Generated/FREERTOS/queue.c ****                             {
2272:../Dave/Generated/FREERTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
2273:../Dave/Generated/FREERTOS/queue.c ****                                  * context switch is required. */
2274:../Dave/Generated/FREERTOS/queue.c ****                                 vTaskMissedYield();
 4145              	 .loc 1 2274 0
 4146 0048 FFF7FEFF 	 bl vTaskMissedYield
 4147 004c 00E0     	 b .L289
 4148              	.L290:
2275:../Dave/Generated/FREERTOS/queue.c ****                             }
2276:../Dave/Generated/FREERTOS/queue.c ****                             else
2277:../Dave/Generated/FREERTOS/queue.c ****                             {
2278:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
2279:../Dave/Generated/FREERTOS/queue.c ****                             }
2280:../Dave/Generated/FREERTOS/queue.c ****                         }
2281:../Dave/Generated/FREERTOS/queue.c ****                         else
2282:../Dave/Generated/FREERTOS/queue.c ****                         {
2283:../Dave/Generated/FREERTOS/queue.c ****                             break;
 4149              	 .loc 1 2283 0
 4150 004e 07E0     	 b .L291
 4151              	.L289:
2284:../Dave/Generated/FREERTOS/queue.c ****                         }
2285:../Dave/Generated/FREERTOS/queue.c ****                     }
2286:../Dave/Generated/FREERTOS/queue.c ****                 }
2287:../Dave/Generated/FREERTOS/queue.c ****             #else /* configUSE_QUEUE_SETS */
2288:../Dave/Generated/FREERTOS/queue.c ****                 {
2289:../Dave/Generated/FREERTOS/queue.c ****                     /* Tasks that are removed from the event list will get added to
2290:../Dave/Generated/FREERTOS/queue.c ****                      * the pending ready list as the scheduler is still suspended. */
2291:../Dave/Generated/FREERTOS/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2292:../Dave/Generated/FREERTOS/queue.c ****                     {
2293:../Dave/Generated/FREERTOS/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
2294:../Dave/Generated/FREERTOS/queue.c ****                         {
2295:../Dave/Generated/FREERTOS/queue.c ****                             /* The task waiting has a higher priority so record that
2296:../Dave/Generated/FREERTOS/queue.c ****                              * a context switch is required. */
2297:../Dave/Generated/FREERTOS/queue.c ****                             vTaskMissedYield();
2298:../Dave/Generated/FREERTOS/queue.c ****                         }
2299:../Dave/Generated/FREERTOS/queue.c ****                         else
2300:../Dave/Generated/FREERTOS/queue.c ****                         {
2301:../Dave/Generated/FREERTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2302:../Dave/Generated/FREERTOS/queue.c ****                         }
2303:../Dave/Generated/FREERTOS/queue.c ****                     }
2304:../Dave/Generated/FREERTOS/queue.c ****                     else
2305:../Dave/Generated/FREERTOS/queue.c ****                     {
2306:../Dave/Generated/FREERTOS/queue.c ****                         break;
2307:../Dave/Generated/FREERTOS/queue.c ****                     }
2308:../Dave/Generated/FREERTOS/queue.c ****                 }
2309:../Dave/Generated/FREERTOS/queue.c ****             #endif /* configUSE_QUEUE_SETS */
2310:../Dave/Generated/FREERTOS/queue.c **** 
2311:../Dave/Generated/FREERTOS/queue.c ****             --cTxLock;
 4152              	 .loc 1 2311 0
 4153 0050 FB7B     	 ldrb r3,[r7,#15]
 4154 0052 013B     	 subs r3,r3,#1
 4155 0054 DBB2     	 uxtb r3,r3
 4156 0056 FB73     	 strb r3,[r7,#15]
 4157              	.L287:
2243:../Dave/Generated/FREERTOS/queue.c ****         {
 4158              	 .loc 1 2243 0
 4159 0058 97F90F30 	 ldrsb r3,[r7,#15]
 4160 005c 002B     	 cmp r3,#0
 4161 005e DADC     	 bgt .L292
 4162              	.L291:
2312:../Dave/Generated/FREERTOS/queue.c ****         }
2313:../Dave/Generated/FREERTOS/queue.c **** 
2314:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
 4163              	 .loc 1 2314 0
 4164 0060 7B68     	 ldr r3,[r7,#4]
 4165 0062 FF22     	 movs r2,#255
 4166 0064 83F84520 	 strb r2,[r3,#69]
 4167              	.LBE229:
2315:../Dave/Generated/FREERTOS/queue.c ****     }
2316:../Dave/Generated/FREERTOS/queue.c ****     taskEXIT_CRITICAL();
 4168              	 .loc 1 2316 0
 4169 0068 FFF7FEFF 	 bl vPortExitCritical
2317:../Dave/Generated/FREERTOS/queue.c **** 
2318:../Dave/Generated/FREERTOS/queue.c ****     /* Do the same for the Rx lock. */
2319:../Dave/Generated/FREERTOS/queue.c ****     taskENTER_CRITICAL();
 4170              	 .loc 1 2319 0
 4171 006c FFF7FEFF 	 bl vPortEnterCritical
 4172              	.LBB230:
2320:../Dave/Generated/FREERTOS/queue.c ****     {
2321:../Dave/Generated/FREERTOS/queue.c ****         int8_t cRxLock = pxQueue->cRxLock;
 4173              	 .loc 1 2321 0
 4174 0070 7B68     	 ldr r3,[r7,#4]
 4175 0072 93F84430 	 ldrb r3,[r3,#68]
 4176 0076 BB73     	 strb r3,[r7,#14]
2322:../Dave/Generated/FREERTOS/queue.c **** 
2323:../Dave/Generated/FREERTOS/queue.c ****         while( cRxLock > queueLOCKED_UNMODIFIED )
 4177              	 .loc 1 2323 0
 4178 0078 13E0     	 b .L293
 4179              	.L297:
2324:../Dave/Generated/FREERTOS/queue.c ****         {
2325:../Dave/Generated/FREERTOS/queue.c ****             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 4180              	 .loc 1 2325 0
 4181 007a 7B68     	 ldr r3,[r7,#4]
 4182 007c 1B69     	 ldr r3,[r3,#16]
 4183 007e 002B     	 cmp r3,#0
 4184 0080 0ED0     	 beq .L294
2326:../Dave/Generated/FREERTOS/queue.c ****             {
2327:../Dave/Generated/FREERTOS/queue.c ****                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 4185              	 .loc 1 2327 0
 4186 0082 7B68     	 ldr r3,[r7,#4]
 4187 0084 1033     	 adds r3,r3,#16
 4188 0086 1846     	 mov r0,r3
 4189 0088 FFF7FEFF 	 bl xTaskRemoveFromEventList
 4190 008c 0346     	 mov r3,r0
 4191 008e 002B     	 cmp r3,#0
 4192 0090 01D0     	 beq .L295
2328:../Dave/Generated/FREERTOS/queue.c ****                 {
2329:../Dave/Generated/FREERTOS/queue.c ****                     vTaskMissedYield();
 4193              	 .loc 1 2329 0
 4194 0092 FFF7FEFF 	 bl vTaskMissedYield
 4195              	.L295:
2330:../Dave/Generated/FREERTOS/queue.c ****                 }
2331:../Dave/Generated/FREERTOS/queue.c ****                 else
2332:../Dave/Generated/FREERTOS/queue.c ****                 {
2333:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2334:../Dave/Generated/FREERTOS/queue.c ****                 }
2335:../Dave/Generated/FREERTOS/queue.c **** 
2336:../Dave/Generated/FREERTOS/queue.c ****                 --cRxLock;
 4196              	 .loc 1 2336 0
 4197 0096 BB7B     	 ldrb r3,[r7,#14]
 4198 0098 013B     	 subs r3,r3,#1
 4199 009a DBB2     	 uxtb r3,r3
 4200 009c BB73     	 strb r3,[r7,#14]
 4201 009e 00E0     	 b .L293
 4202              	.L294:
2337:../Dave/Generated/FREERTOS/queue.c ****             }
2338:../Dave/Generated/FREERTOS/queue.c ****             else
2339:../Dave/Generated/FREERTOS/queue.c ****             {
2340:../Dave/Generated/FREERTOS/queue.c ****                 break;
 4203              	 .loc 1 2340 0
 4204 00a0 03E0     	 b .L296
 4205              	.L293:
2323:../Dave/Generated/FREERTOS/queue.c ****         {
 4206              	 .loc 1 2323 0
 4207 00a2 97F90E30 	 ldrsb r3,[r7,#14]
 4208 00a6 002B     	 cmp r3,#0
 4209 00a8 E7DC     	 bgt .L297
 4210              	.L296:
2341:../Dave/Generated/FREERTOS/queue.c ****             }
2342:../Dave/Generated/FREERTOS/queue.c ****         }
2343:../Dave/Generated/FREERTOS/queue.c **** 
2344:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
 4211              	 .loc 1 2344 0
 4212 00aa 7B68     	 ldr r3,[r7,#4]
 4213 00ac FF22     	 movs r2,#255
 4214 00ae 83F84420 	 strb r2,[r3,#68]
 4215              	.LBE230:
2345:../Dave/Generated/FREERTOS/queue.c ****     }
2346:../Dave/Generated/FREERTOS/queue.c ****     taskEXIT_CRITICAL();
 4216              	 .loc 1 2346 0
 4217 00b2 FFF7FEFF 	 bl vPortExitCritical
2347:../Dave/Generated/FREERTOS/queue.c **** }
 4218              	 .loc 1 2347 0
 4219 00b6 1037     	 adds r7,r7,#16
 4220              	.LCFI149:
 4221              	 .cfi_def_cfa_offset 8
 4222 00b8 BD46     	 mov sp,r7
 4223              	.LCFI150:
 4224              	 .cfi_def_cfa_register 13
 4225              	 
 4226 00ba 80BD     	 pop {r7,pc}
 4227              	 .cfi_endproc
 4228              	.LFE166:
 4230              	 .section .text.prvIsQueueEmpty,"ax",%progbits
 4231              	 .align 2
 4232              	 .thumb
 4233              	 .thumb_func
 4235              	prvIsQueueEmpty:
 4236              	.LFB167:
2348:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2349:../Dave/Generated/FREERTOS/queue.c **** 
2350:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
2351:../Dave/Generated/FREERTOS/queue.c **** {
 4237              	 .loc 1 2351 0
 4238              	 .cfi_startproc
 4239              	 
 4240              	 
 4241 0000 80B5     	 push {r7,lr}
 4242              	.LCFI151:
 4243              	 .cfi_def_cfa_offset 8
 4244              	 .cfi_offset 7,-8
 4245              	 .cfi_offset 14,-4
 4246 0002 84B0     	 sub sp,sp,#16
 4247              	.LCFI152:
 4248              	 .cfi_def_cfa_offset 24
 4249 0004 00AF     	 add r7,sp,#0
 4250              	.LCFI153:
 4251              	 .cfi_def_cfa_register 7
 4252 0006 7860     	 str r0,[r7,#4]
2352:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn;
2353:../Dave/Generated/FREERTOS/queue.c **** 
2354:../Dave/Generated/FREERTOS/queue.c ****     taskENTER_CRITICAL();
 4253              	 .loc 1 2354 0
 4254 0008 FFF7FEFF 	 bl vPortEnterCritical
2355:../Dave/Generated/FREERTOS/queue.c ****     {
2356:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 4255              	 .loc 1 2356 0
 4256 000c 7B68     	 ldr r3,[r7,#4]
 4257 000e 9B6B     	 ldr r3,[r3,#56]
 4258 0010 002B     	 cmp r3,#0
 4259 0012 02D1     	 bne .L299
2357:../Dave/Generated/FREERTOS/queue.c ****         {
2358:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdTRUE;
 4260              	 .loc 1 2358 0
 4261 0014 0123     	 movs r3,#1
 4262 0016 FB60     	 str r3,[r7,#12]
 4263 0018 01E0     	 b .L300
 4264              	.L299:
2359:../Dave/Generated/FREERTOS/queue.c ****         }
2360:../Dave/Generated/FREERTOS/queue.c ****         else
2361:../Dave/Generated/FREERTOS/queue.c ****         {
2362:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdFALSE;
 4265              	 .loc 1 2362 0
 4266 001a 0023     	 movs r3,#0
 4267 001c FB60     	 str r3,[r7,#12]
 4268              	.L300:
2363:../Dave/Generated/FREERTOS/queue.c ****         }
2364:../Dave/Generated/FREERTOS/queue.c ****     }
2365:../Dave/Generated/FREERTOS/queue.c ****     taskEXIT_CRITICAL();
 4269              	 .loc 1 2365 0
 4270 001e FFF7FEFF 	 bl vPortExitCritical
2366:../Dave/Generated/FREERTOS/queue.c **** 
2367:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 4271              	 .loc 1 2367 0
 4272 0022 FB68     	 ldr r3,[r7,#12]
2368:../Dave/Generated/FREERTOS/queue.c **** }
 4273              	 .loc 1 2368 0
 4274 0024 1846     	 mov r0,r3
 4275 0026 1037     	 adds r7,r7,#16
 4276              	.LCFI154:
 4277              	 .cfi_def_cfa_offset 8
 4278 0028 BD46     	 mov sp,r7
 4279              	.LCFI155:
 4280              	 .cfi_def_cfa_register 13
 4281              	 
 4282 002a 80BD     	 pop {r7,pc}
 4283              	 .cfi_endproc
 4284              	.LFE167:
 4286              	 .section .text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 4287              	 .align 2
 4288              	 .global xQueueIsQueueEmptyFromISR
 4289              	 .thumb
 4290              	 .thumb_func
 4292              	xQueueIsQueueEmptyFromISR:
 4293              	.LFB168:
2369:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2370:../Dave/Generated/FREERTOS/queue.c **** 
2371:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2372:../Dave/Generated/FREERTOS/queue.c **** {
 4294              	 .loc 1 2372 0
 4295              	 .cfi_startproc
 4296              	 
 4297              	 
 4298              	 
 4299 0000 80B4     	 push {r7}
 4300              	.LCFI156:
 4301              	 .cfi_def_cfa_offset 4
 4302              	 .cfi_offset 7,-4
 4303 0002 87B0     	 sub sp,sp,#28
 4304              	.LCFI157:
 4305              	 .cfi_def_cfa_offset 32
 4306 0004 00AF     	 add r7,sp,#0
 4307              	.LCFI158:
 4308              	 .cfi_def_cfa_register 7
 4309 0006 7860     	 str r0,[r7,#4]
2373:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn;
2374:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 4310              	 .loc 1 2374 0
 4311 0008 7B68     	 ldr r3,[r7,#4]
 4312 000a 3B61     	 str r3,[r7,#16]
2375:../Dave/Generated/FREERTOS/queue.c **** 
2376:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 4313              	 .loc 1 2376 0
 4314 000c 3B69     	 ldr r3,[r7,#16]
 4315 000e 002B     	 cmp r3,#0
 4316 0010 09D1     	 bne .L303
 4317              	.LBB231:
 4318              	.LBB232:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4319              	 .loc 2 197 0 discriminator 1
 4320              	
 4321 0012 4FF0FC03 	 mov r3,#252
 4322 0016 83F31188 	 msr basepri,r3
 4323 001a BFF36F8F 	 isb 
 4324 001e BFF34F8F 	 dsb 
 4325              	
 4326              	
 4327              	 .thumb
 4328 0022 FB60     	 str r3,[r7,#12]
 4329              	.L304:
 4330              	.LBE232:
 4331              	.LBE231:
 4332              	 .loc 1 2376 0 discriminator 1
 4333 0024 FEE7     	 b .L304
 4334              	.L303:
2377:../Dave/Generated/FREERTOS/queue.c **** 
2378:../Dave/Generated/FREERTOS/queue.c ****     if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 4335              	 .loc 1 2378 0
 4336 0026 3B69     	 ldr r3,[r7,#16]
 4337 0028 9B6B     	 ldr r3,[r3,#56]
 4338 002a 002B     	 cmp r3,#0
 4339 002c 02D1     	 bne .L305
2379:../Dave/Generated/FREERTOS/queue.c ****     {
2380:../Dave/Generated/FREERTOS/queue.c ****         xReturn = pdTRUE;
 4340              	 .loc 1 2380 0
 4341 002e 0123     	 movs r3,#1
 4342 0030 7B61     	 str r3,[r7,#20]
 4343 0032 01E0     	 b .L306
 4344              	.L305:
2381:../Dave/Generated/FREERTOS/queue.c ****     }
2382:../Dave/Generated/FREERTOS/queue.c ****     else
2383:../Dave/Generated/FREERTOS/queue.c ****     {
2384:../Dave/Generated/FREERTOS/queue.c ****         xReturn = pdFALSE;
 4345              	 .loc 1 2384 0
 4346 0034 0023     	 movs r3,#0
 4347 0036 7B61     	 str r3,[r7,#20]
 4348              	.L306:
2385:../Dave/Generated/FREERTOS/queue.c ****     }
2386:../Dave/Generated/FREERTOS/queue.c **** 
2387:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 4349              	 .loc 1 2387 0
 4350 0038 7B69     	 ldr r3,[r7,#20]
2388:../Dave/Generated/FREERTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 4351              	 .loc 1 2388 0
 4352 003a 1846     	 mov r0,r3
 4353 003c 1C37     	 adds r7,r7,#28
 4354              	.LCFI159:
 4355              	 .cfi_def_cfa_offset 4
 4356 003e BD46     	 mov sp,r7
 4357              	.LCFI160:
 4358              	 .cfi_def_cfa_register 13
 4359              	 
 4360 0040 5DF8047B 	 ldr r7,[sp],#4
 4361              	.LCFI161:
 4362              	 .cfi_restore 7
 4363              	 .cfi_def_cfa_offset 0
 4364 0044 7047     	 bx lr
 4365              	 .cfi_endproc
 4366              	.LFE168:
 4368 0046 00BF     	 .section .text.prvIsQueueFull,"ax",%progbits
 4369              	 .align 2
 4370              	 .thumb
 4371              	 .thumb_func
 4373              	prvIsQueueFull:
 4374              	.LFB169:
2389:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2390:../Dave/Generated/FREERTOS/queue.c **** 
2391:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
2392:../Dave/Generated/FREERTOS/queue.c **** {
 4375              	 .loc 1 2392 0
 4376              	 .cfi_startproc
 4377              	 
 4378              	 
 4379 0000 80B5     	 push {r7,lr}
 4380              	.LCFI162:
 4381              	 .cfi_def_cfa_offset 8
 4382              	 .cfi_offset 7,-8
 4383              	 .cfi_offset 14,-4
 4384 0002 84B0     	 sub sp,sp,#16
 4385              	.LCFI163:
 4386              	 .cfi_def_cfa_offset 24
 4387 0004 00AF     	 add r7,sp,#0
 4388              	.LCFI164:
 4389              	 .cfi_def_cfa_register 7
 4390 0006 7860     	 str r0,[r7,#4]
2393:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn;
2394:../Dave/Generated/FREERTOS/queue.c **** 
2395:../Dave/Generated/FREERTOS/queue.c ****     taskENTER_CRITICAL();
 4391              	 .loc 1 2395 0
 4392 0008 FFF7FEFF 	 bl vPortEnterCritical
2396:../Dave/Generated/FREERTOS/queue.c ****     {
2397:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 4393              	 .loc 1 2397 0
 4394 000c 7B68     	 ldr r3,[r7,#4]
 4395 000e 9A6B     	 ldr r2,[r3,#56]
 4396 0010 7B68     	 ldr r3,[r7,#4]
 4397 0012 DB6B     	 ldr r3,[r3,#60]
 4398 0014 9A42     	 cmp r2,r3
 4399 0016 02D1     	 bne .L309
2398:../Dave/Generated/FREERTOS/queue.c ****         {
2399:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdTRUE;
 4400              	 .loc 1 2399 0
 4401 0018 0123     	 movs r3,#1
 4402 001a FB60     	 str r3,[r7,#12]
 4403 001c 01E0     	 b .L310
 4404              	.L309:
2400:../Dave/Generated/FREERTOS/queue.c ****         }
2401:../Dave/Generated/FREERTOS/queue.c ****         else
2402:../Dave/Generated/FREERTOS/queue.c ****         {
2403:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdFALSE;
 4405              	 .loc 1 2403 0
 4406 001e 0023     	 movs r3,#0
 4407 0020 FB60     	 str r3,[r7,#12]
 4408              	.L310:
2404:../Dave/Generated/FREERTOS/queue.c ****         }
2405:../Dave/Generated/FREERTOS/queue.c ****     }
2406:../Dave/Generated/FREERTOS/queue.c ****     taskEXIT_CRITICAL();
 4409              	 .loc 1 2406 0
 4410 0022 FFF7FEFF 	 bl vPortExitCritical
2407:../Dave/Generated/FREERTOS/queue.c **** 
2408:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 4411              	 .loc 1 2408 0
 4412 0026 FB68     	 ldr r3,[r7,#12]
2409:../Dave/Generated/FREERTOS/queue.c **** }
 4413              	 .loc 1 2409 0
 4414 0028 1846     	 mov r0,r3
 4415 002a 1037     	 adds r7,r7,#16
 4416              	.LCFI165:
 4417              	 .cfi_def_cfa_offset 8
 4418 002c BD46     	 mov sp,r7
 4419              	.LCFI166:
 4420              	 .cfi_def_cfa_register 13
 4421              	 
 4422 002e 80BD     	 pop {r7,pc}
 4423              	 .cfi_endproc
 4424              	.LFE169:
 4426              	 .section .text.xQueueIsQueueFullFromISR,"ax",%progbits
 4427              	 .align 2
 4428              	 .global xQueueIsQueueFullFromISR
 4429              	 .thumb
 4430              	 .thumb_func
 4432              	xQueueIsQueueFullFromISR:
 4433              	.LFB170:
2410:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2411:../Dave/Generated/FREERTOS/queue.c **** 
2412:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2413:../Dave/Generated/FREERTOS/queue.c **** {
 4434              	 .loc 1 2413 0
 4435              	 .cfi_startproc
 4436              	 
 4437              	 
 4438              	 
 4439 0000 80B4     	 push {r7}
 4440              	.LCFI167:
 4441              	 .cfi_def_cfa_offset 4
 4442              	 .cfi_offset 7,-4
 4443 0002 87B0     	 sub sp,sp,#28
 4444              	.LCFI168:
 4445              	 .cfi_def_cfa_offset 32
 4446 0004 00AF     	 add r7,sp,#0
 4447              	.LCFI169:
 4448              	 .cfi_def_cfa_register 7
 4449 0006 7860     	 str r0,[r7,#4]
2414:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn;
2415:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 4450              	 .loc 1 2415 0
 4451 0008 7B68     	 ldr r3,[r7,#4]
 4452 000a 3B61     	 str r3,[r7,#16]
2416:../Dave/Generated/FREERTOS/queue.c **** 
2417:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 4453              	 .loc 1 2417 0
 4454 000c 3B69     	 ldr r3,[r7,#16]
 4455 000e 002B     	 cmp r3,#0
 4456 0010 09D1     	 bne .L313
 4457              	.LBB233:
 4458              	.LBB234:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4459              	 .loc 2 197 0 discriminator 1
 4460              	
 4461 0012 4FF0FC03 	 mov r3,#252
 4462 0016 83F31188 	 msr basepri,r3
 4463 001a BFF36F8F 	 isb 
 4464 001e BFF34F8F 	 dsb 
 4465              	
 4466              	
 4467              	 .thumb
 4468 0022 FB60     	 str r3,[r7,#12]
 4469              	.L314:
 4470              	.LBE234:
 4471              	.LBE233:
 4472              	 .loc 1 2417 0 discriminator 1
 4473 0024 FEE7     	 b .L314
 4474              	.L313:
2418:../Dave/Generated/FREERTOS/queue.c **** 
2419:../Dave/Generated/FREERTOS/queue.c ****     if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 4475              	 .loc 1 2419 0
 4476 0026 3B69     	 ldr r3,[r7,#16]
 4477 0028 9A6B     	 ldr r2,[r3,#56]
 4478 002a 3B69     	 ldr r3,[r7,#16]
 4479 002c DB6B     	 ldr r3,[r3,#60]
 4480 002e 9A42     	 cmp r2,r3
 4481 0030 02D1     	 bne .L315
2420:../Dave/Generated/FREERTOS/queue.c ****     {
2421:../Dave/Generated/FREERTOS/queue.c ****         xReturn = pdTRUE;
 4482              	 .loc 1 2421 0
 4483 0032 0123     	 movs r3,#1
 4484 0034 7B61     	 str r3,[r7,#20]
 4485 0036 01E0     	 b .L316
 4486              	.L315:
2422:../Dave/Generated/FREERTOS/queue.c ****     }
2423:../Dave/Generated/FREERTOS/queue.c ****     else
2424:../Dave/Generated/FREERTOS/queue.c ****     {
2425:../Dave/Generated/FREERTOS/queue.c ****         xReturn = pdFALSE;
 4487              	 .loc 1 2425 0
 4488 0038 0023     	 movs r3,#0
 4489 003a 7B61     	 str r3,[r7,#20]
 4490              	.L316:
2426:../Dave/Generated/FREERTOS/queue.c ****     }
2427:../Dave/Generated/FREERTOS/queue.c **** 
2428:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 4491              	 .loc 1 2428 0
 4492 003c 7B69     	 ldr r3,[r7,#20]
2429:../Dave/Generated/FREERTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 4493              	 .loc 1 2429 0
 4494 003e 1846     	 mov r0,r3
 4495 0040 1C37     	 adds r7,r7,#28
 4496              	.LCFI170:
 4497              	 .cfi_def_cfa_offset 4
 4498 0042 BD46     	 mov sp,r7
 4499              	.LCFI171:
 4500              	 .cfi_def_cfa_register 13
 4501              	 
 4502 0044 5DF8047B 	 ldr r7,[sp],#4
 4503              	.LCFI172:
 4504              	 .cfi_restore 7
 4505              	 .cfi_def_cfa_offset 0
 4506 0048 7047     	 bx lr
 4507              	 .cfi_endproc
 4508              	.LFE170:
 4510 004a 00BF     	 .section .text.vQueueAddToRegistry,"ax",%progbits
 4511              	 .align 2
 4512              	 .global vQueueAddToRegistry
 4513              	 .thumb
 4514              	 .thumb_func
 4516              	vQueueAddToRegistry:
 4517              	.LFB171:
2430:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2431:../Dave/Generated/FREERTOS/queue.c **** 
2432:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2433:../Dave/Generated/FREERTOS/queue.c **** 
2434:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xQueueCRSend( QueueHandle_t xQueue,
2435:../Dave/Generated/FREERTOS/queue.c ****                              const void * pvItemToQueue,
2436:../Dave/Generated/FREERTOS/queue.c ****                              TickType_t xTicksToWait )
2437:../Dave/Generated/FREERTOS/queue.c ****     {
2438:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xReturn;
2439:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2440:../Dave/Generated/FREERTOS/queue.c **** 
2441:../Dave/Generated/FREERTOS/queue.c ****         /* If the queue is already full we may have to block.  A critical section
2442:../Dave/Generated/FREERTOS/queue.c ****          * is required to prevent an interrupt removing something from the queue
2443:../Dave/Generated/FREERTOS/queue.c ****          * between the check to see if the queue is full and blocking on the queue. */
2444:../Dave/Generated/FREERTOS/queue.c ****         portDISABLE_INTERRUPTS();
2445:../Dave/Generated/FREERTOS/queue.c ****         {
2446:../Dave/Generated/FREERTOS/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
2447:../Dave/Generated/FREERTOS/queue.c ****             {
2448:../Dave/Generated/FREERTOS/queue.c ****                 /* The queue is full - do we want to block or just leave without
2449:../Dave/Generated/FREERTOS/queue.c ****                  * posting? */
2450:../Dave/Generated/FREERTOS/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2451:../Dave/Generated/FREERTOS/queue.c ****                 {
2452:../Dave/Generated/FREERTOS/queue.c ****                     /* As this is called from a coroutine we cannot block directly, but
2453:../Dave/Generated/FREERTOS/queue.c ****                      * return indicating that we need to block. */
2454:../Dave/Generated/FREERTOS/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2455:../Dave/Generated/FREERTOS/queue.c ****                     portENABLE_INTERRUPTS();
2456:../Dave/Generated/FREERTOS/queue.c ****                     return errQUEUE_BLOCKED;
2457:../Dave/Generated/FREERTOS/queue.c ****                 }
2458:../Dave/Generated/FREERTOS/queue.c ****                 else
2459:../Dave/Generated/FREERTOS/queue.c ****                 {
2460:../Dave/Generated/FREERTOS/queue.c ****                     portENABLE_INTERRUPTS();
2461:../Dave/Generated/FREERTOS/queue.c ****                     return errQUEUE_FULL;
2462:../Dave/Generated/FREERTOS/queue.c ****                 }
2463:../Dave/Generated/FREERTOS/queue.c ****             }
2464:../Dave/Generated/FREERTOS/queue.c ****         }
2465:../Dave/Generated/FREERTOS/queue.c ****         portENABLE_INTERRUPTS();
2466:../Dave/Generated/FREERTOS/queue.c **** 
2467:../Dave/Generated/FREERTOS/queue.c ****         portDISABLE_INTERRUPTS();
2468:../Dave/Generated/FREERTOS/queue.c ****         {
2469:../Dave/Generated/FREERTOS/queue.c ****             if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2470:../Dave/Generated/FREERTOS/queue.c ****             {
2471:../Dave/Generated/FREERTOS/queue.c ****                 /* There is room in the queue, copy the data into the queue. */
2472:../Dave/Generated/FREERTOS/queue.c ****                 prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2473:../Dave/Generated/FREERTOS/queue.c ****                 xReturn = pdPASS;
2474:../Dave/Generated/FREERTOS/queue.c **** 
2475:../Dave/Generated/FREERTOS/queue.c ****                 /* Were any co-routines waiting for data to become available? */
2476:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2477:../Dave/Generated/FREERTOS/queue.c ****                 {
2478:../Dave/Generated/FREERTOS/queue.c ****                     /* In this instance the co-routine could be placed directly
2479:../Dave/Generated/FREERTOS/queue.c ****                      * into the ready list as we are within a critical section.
2480:../Dave/Generated/FREERTOS/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2481:../Dave/Generated/FREERTOS/queue.c ****                      * the event were caused from within an interrupt. */
2482:../Dave/Generated/FREERTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2483:../Dave/Generated/FREERTOS/queue.c ****                     {
2484:../Dave/Generated/FREERTOS/queue.c ****                         /* The co-routine waiting has a higher priority so record
2485:../Dave/Generated/FREERTOS/queue.c ****                          * that a yield might be appropriate. */
2486:../Dave/Generated/FREERTOS/queue.c ****                         xReturn = errQUEUE_YIELD;
2487:../Dave/Generated/FREERTOS/queue.c ****                     }
2488:../Dave/Generated/FREERTOS/queue.c ****                     else
2489:../Dave/Generated/FREERTOS/queue.c ****                     {
2490:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2491:../Dave/Generated/FREERTOS/queue.c ****                     }
2492:../Dave/Generated/FREERTOS/queue.c ****                 }
2493:../Dave/Generated/FREERTOS/queue.c ****                 else
2494:../Dave/Generated/FREERTOS/queue.c ****                 {
2495:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2496:../Dave/Generated/FREERTOS/queue.c ****                 }
2497:../Dave/Generated/FREERTOS/queue.c ****             }
2498:../Dave/Generated/FREERTOS/queue.c ****             else
2499:../Dave/Generated/FREERTOS/queue.c ****             {
2500:../Dave/Generated/FREERTOS/queue.c ****                 xReturn = errQUEUE_FULL;
2501:../Dave/Generated/FREERTOS/queue.c ****             }
2502:../Dave/Generated/FREERTOS/queue.c ****         }
2503:../Dave/Generated/FREERTOS/queue.c ****         portENABLE_INTERRUPTS();
2504:../Dave/Generated/FREERTOS/queue.c **** 
2505:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
2506:../Dave/Generated/FREERTOS/queue.c ****     }
2507:../Dave/Generated/FREERTOS/queue.c **** 
2508:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2509:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2510:../Dave/Generated/FREERTOS/queue.c **** 
2511:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2512:../Dave/Generated/FREERTOS/queue.c **** 
2513:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
2514:../Dave/Generated/FREERTOS/queue.c ****                                 void * pvBuffer,
2515:../Dave/Generated/FREERTOS/queue.c ****                                 TickType_t xTicksToWait )
2516:../Dave/Generated/FREERTOS/queue.c ****     {
2517:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xReturn;
2518:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2519:../Dave/Generated/FREERTOS/queue.c **** 
2520:../Dave/Generated/FREERTOS/queue.c ****         /* If the queue is already empty we may have to block.  A critical section
2521:../Dave/Generated/FREERTOS/queue.c ****          * is required to prevent an interrupt adding something to the queue
2522:../Dave/Generated/FREERTOS/queue.c ****          * between the check to see if the queue is empty and blocking on the queue. */
2523:../Dave/Generated/FREERTOS/queue.c ****         portDISABLE_INTERRUPTS();
2524:../Dave/Generated/FREERTOS/queue.c ****         {
2525:../Dave/Generated/FREERTOS/queue.c ****             if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2526:../Dave/Generated/FREERTOS/queue.c ****             {
2527:../Dave/Generated/FREERTOS/queue.c ****                 /* There are no messages in the queue, do we want to block or just
2528:../Dave/Generated/FREERTOS/queue.c ****                  * leave with nothing? */
2529:../Dave/Generated/FREERTOS/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2530:../Dave/Generated/FREERTOS/queue.c ****                 {
2531:../Dave/Generated/FREERTOS/queue.c ****                     /* As this is a co-routine we cannot block directly, but return
2532:../Dave/Generated/FREERTOS/queue.c ****                      * indicating that we need to block. */
2533:../Dave/Generated/FREERTOS/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) 
2534:../Dave/Generated/FREERTOS/queue.c ****                     portENABLE_INTERRUPTS();
2535:../Dave/Generated/FREERTOS/queue.c ****                     return errQUEUE_BLOCKED;
2536:../Dave/Generated/FREERTOS/queue.c ****                 }
2537:../Dave/Generated/FREERTOS/queue.c ****                 else
2538:../Dave/Generated/FREERTOS/queue.c ****                 {
2539:../Dave/Generated/FREERTOS/queue.c ****                     portENABLE_INTERRUPTS();
2540:../Dave/Generated/FREERTOS/queue.c ****                     return errQUEUE_FULL;
2541:../Dave/Generated/FREERTOS/queue.c ****                 }
2542:../Dave/Generated/FREERTOS/queue.c ****             }
2543:../Dave/Generated/FREERTOS/queue.c ****             else
2544:../Dave/Generated/FREERTOS/queue.c ****             {
2545:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2546:../Dave/Generated/FREERTOS/queue.c ****             }
2547:../Dave/Generated/FREERTOS/queue.c ****         }
2548:../Dave/Generated/FREERTOS/queue.c ****         portENABLE_INTERRUPTS();
2549:../Dave/Generated/FREERTOS/queue.c **** 
2550:../Dave/Generated/FREERTOS/queue.c ****         portDISABLE_INTERRUPTS();
2551:../Dave/Generated/FREERTOS/queue.c ****         {
2552:../Dave/Generated/FREERTOS/queue.c ****             if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2553:../Dave/Generated/FREERTOS/queue.c ****             {
2554:../Dave/Generated/FREERTOS/queue.c ****                 /* Data is available from the queue. */
2555:../Dave/Generated/FREERTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2556:../Dave/Generated/FREERTOS/queue.c **** 
2557:../Dave/Generated/FREERTOS/queue.c ****                 if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2558:../Dave/Generated/FREERTOS/queue.c ****                 {
2559:../Dave/Generated/FREERTOS/queue.c ****                     pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2560:../Dave/Generated/FREERTOS/queue.c ****                 }
2561:../Dave/Generated/FREERTOS/queue.c ****                 else
2562:../Dave/Generated/FREERTOS/queue.c ****                 {
2563:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2564:../Dave/Generated/FREERTOS/queue.c ****                 }
2565:../Dave/Generated/FREERTOS/queue.c **** 
2566:../Dave/Generated/FREERTOS/queue.c ****                 --( pxQueue->uxMessagesWaiting );
2567:../Dave/Generated/FREERTOS/queue.c ****                 ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( un
2568:../Dave/Generated/FREERTOS/queue.c **** 
2569:../Dave/Generated/FREERTOS/queue.c ****                 xReturn = pdPASS;
2570:../Dave/Generated/FREERTOS/queue.c **** 
2571:../Dave/Generated/FREERTOS/queue.c ****                 /* Were any co-routines waiting for space to become available? */
2572:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2573:../Dave/Generated/FREERTOS/queue.c ****                 {
2574:../Dave/Generated/FREERTOS/queue.c ****                     /* In this instance the co-routine could be placed directly
2575:../Dave/Generated/FREERTOS/queue.c ****                      * into the ready list as we are within a critical section.
2576:../Dave/Generated/FREERTOS/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2577:../Dave/Generated/FREERTOS/queue.c ****                      * the event were caused from within an interrupt. */
2578:../Dave/Generated/FREERTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2579:../Dave/Generated/FREERTOS/queue.c ****                     {
2580:../Dave/Generated/FREERTOS/queue.c ****                         xReturn = errQUEUE_YIELD;
2581:../Dave/Generated/FREERTOS/queue.c ****                     }
2582:../Dave/Generated/FREERTOS/queue.c ****                     else
2583:../Dave/Generated/FREERTOS/queue.c ****                     {
2584:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2585:../Dave/Generated/FREERTOS/queue.c ****                     }
2586:../Dave/Generated/FREERTOS/queue.c ****                 }
2587:../Dave/Generated/FREERTOS/queue.c ****                 else
2588:../Dave/Generated/FREERTOS/queue.c ****                 {
2589:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2590:../Dave/Generated/FREERTOS/queue.c ****                 }
2591:../Dave/Generated/FREERTOS/queue.c ****             }
2592:../Dave/Generated/FREERTOS/queue.c ****             else
2593:../Dave/Generated/FREERTOS/queue.c ****             {
2594:../Dave/Generated/FREERTOS/queue.c ****                 xReturn = pdFAIL;
2595:../Dave/Generated/FREERTOS/queue.c ****             }
2596:../Dave/Generated/FREERTOS/queue.c ****         }
2597:../Dave/Generated/FREERTOS/queue.c ****         portENABLE_INTERRUPTS();
2598:../Dave/Generated/FREERTOS/queue.c **** 
2599:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
2600:../Dave/Generated/FREERTOS/queue.c ****     }
2601:../Dave/Generated/FREERTOS/queue.c **** 
2602:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2603:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2604:../Dave/Generated/FREERTOS/queue.c **** 
2605:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2606:../Dave/Generated/FREERTOS/queue.c **** 
2607:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
2608:../Dave/Generated/FREERTOS/queue.c ****                                     const void * pvItemToQueue,
2609:../Dave/Generated/FREERTOS/queue.c ****                                     BaseType_t xCoRoutinePreviouslyWoken )
2610:../Dave/Generated/FREERTOS/queue.c ****     {
2611:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2612:../Dave/Generated/FREERTOS/queue.c **** 
2613:../Dave/Generated/FREERTOS/queue.c ****         /* Cannot block within an ISR so if there is no space on the queue then
2614:../Dave/Generated/FREERTOS/queue.c ****          * exit without doing anything. */
2615:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2616:../Dave/Generated/FREERTOS/queue.c ****         {
2617:../Dave/Generated/FREERTOS/queue.c ****             prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2618:../Dave/Generated/FREERTOS/queue.c **** 
2619:../Dave/Generated/FREERTOS/queue.c ****             /* We only want to wake one co-routine per ISR, so check that a
2620:../Dave/Generated/FREERTOS/queue.c ****              * co-routine has not already been woken. */
2621:../Dave/Generated/FREERTOS/queue.c ****             if( xCoRoutinePreviouslyWoken == pdFALSE )
2622:../Dave/Generated/FREERTOS/queue.c ****             {
2623:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2624:../Dave/Generated/FREERTOS/queue.c ****                 {
2625:../Dave/Generated/FREERTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2626:../Dave/Generated/FREERTOS/queue.c ****                     {
2627:../Dave/Generated/FREERTOS/queue.c ****                         return pdTRUE;
2628:../Dave/Generated/FREERTOS/queue.c ****                     }
2629:../Dave/Generated/FREERTOS/queue.c ****                     else
2630:../Dave/Generated/FREERTOS/queue.c ****                     {
2631:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2632:../Dave/Generated/FREERTOS/queue.c ****                     }
2633:../Dave/Generated/FREERTOS/queue.c ****                 }
2634:../Dave/Generated/FREERTOS/queue.c ****                 else
2635:../Dave/Generated/FREERTOS/queue.c ****                 {
2636:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2637:../Dave/Generated/FREERTOS/queue.c ****                 }
2638:../Dave/Generated/FREERTOS/queue.c ****             }
2639:../Dave/Generated/FREERTOS/queue.c ****             else
2640:../Dave/Generated/FREERTOS/queue.c ****             {
2641:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2642:../Dave/Generated/FREERTOS/queue.c ****             }
2643:../Dave/Generated/FREERTOS/queue.c ****         }
2644:../Dave/Generated/FREERTOS/queue.c ****         else
2645:../Dave/Generated/FREERTOS/queue.c ****         {
2646:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2647:../Dave/Generated/FREERTOS/queue.c ****         }
2648:../Dave/Generated/FREERTOS/queue.c **** 
2649:../Dave/Generated/FREERTOS/queue.c ****         return xCoRoutinePreviouslyWoken;
2650:../Dave/Generated/FREERTOS/queue.c ****     }
2651:../Dave/Generated/FREERTOS/queue.c **** 
2652:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2653:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2654:../Dave/Generated/FREERTOS/queue.c **** 
2655:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2656:../Dave/Generated/FREERTOS/queue.c **** 
2657:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
2658:../Dave/Generated/FREERTOS/queue.c ****                                        void * pvBuffer,
2659:../Dave/Generated/FREERTOS/queue.c ****                                        BaseType_t * pxCoRoutineWoken )
2660:../Dave/Generated/FREERTOS/queue.c ****     {
2661:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xReturn;
2662:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2663:../Dave/Generated/FREERTOS/queue.c **** 
2664:../Dave/Generated/FREERTOS/queue.c ****         /* We cannot block from an ISR, so check there is data available. If
2665:../Dave/Generated/FREERTOS/queue.c ****          * not then just leave without doing anything. */
2666:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2667:../Dave/Generated/FREERTOS/queue.c ****         {
2668:../Dave/Generated/FREERTOS/queue.c ****             /* Copy the data from the queue. */
2669:../Dave/Generated/FREERTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2670:../Dave/Generated/FREERTOS/queue.c **** 
2671:../Dave/Generated/FREERTOS/queue.c ****             if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2672:../Dave/Generated/FREERTOS/queue.c ****             {
2673:../Dave/Generated/FREERTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2674:../Dave/Generated/FREERTOS/queue.c ****             }
2675:../Dave/Generated/FREERTOS/queue.c ****             else
2676:../Dave/Generated/FREERTOS/queue.c ****             {
2677:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2678:../Dave/Generated/FREERTOS/queue.c ****             }
2679:../Dave/Generated/FREERTOS/queue.c **** 
2680:../Dave/Generated/FREERTOS/queue.c ****             --( pxQueue->uxMessagesWaiting );
2681:../Dave/Generated/FREERTOS/queue.c ****             ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsign
2682:../Dave/Generated/FREERTOS/queue.c **** 
2683:../Dave/Generated/FREERTOS/queue.c ****             if( ( *pxCoRoutineWoken ) == pdFALSE )
2684:../Dave/Generated/FREERTOS/queue.c ****             {
2685:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2686:../Dave/Generated/FREERTOS/queue.c ****                 {
2687:../Dave/Generated/FREERTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2688:../Dave/Generated/FREERTOS/queue.c ****                     {
2689:../Dave/Generated/FREERTOS/queue.c ****                         *pxCoRoutineWoken = pdTRUE;
2690:../Dave/Generated/FREERTOS/queue.c ****                     }
2691:../Dave/Generated/FREERTOS/queue.c ****                     else
2692:../Dave/Generated/FREERTOS/queue.c ****                     {
2693:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2694:../Dave/Generated/FREERTOS/queue.c ****                     }
2695:../Dave/Generated/FREERTOS/queue.c ****                 }
2696:../Dave/Generated/FREERTOS/queue.c ****                 else
2697:../Dave/Generated/FREERTOS/queue.c ****                 {
2698:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2699:../Dave/Generated/FREERTOS/queue.c ****                 }
2700:../Dave/Generated/FREERTOS/queue.c ****             }
2701:../Dave/Generated/FREERTOS/queue.c ****             else
2702:../Dave/Generated/FREERTOS/queue.c ****             {
2703:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2704:../Dave/Generated/FREERTOS/queue.c ****             }
2705:../Dave/Generated/FREERTOS/queue.c **** 
2706:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdPASS;
2707:../Dave/Generated/FREERTOS/queue.c ****         }
2708:../Dave/Generated/FREERTOS/queue.c ****         else
2709:../Dave/Generated/FREERTOS/queue.c ****         {
2710:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdFAIL;
2711:../Dave/Generated/FREERTOS/queue.c ****         }
2712:../Dave/Generated/FREERTOS/queue.c **** 
2713:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
2714:../Dave/Generated/FREERTOS/queue.c ****     }
2715:../Dave/Generated/FREERTOS/queue.c **** 
2716:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2717:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2718:../Dave/Generated/FREERTOS/queue.c **** 
2719:../Dave/Generated/FREERTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2720:../Dave/Generated/FREERTOS/queue.c **** 
2721:../Dave/Generated/FREERTOS/queue.c ****     void vQueueAddToRegistry( QueueHandle_t xQueue,
2722:../Dave/Generated/FREERTOS/queue.c ****                               const char * pcQueueName ) /*lint !e971 Unqualified char types are al
2723:../Dave/Generated/FREERTOS/queue.c ****     {
 4518              	 .loc 1 2723 0
 4519              	 .cfi_startproc
 4520              	 
 4521              	 
 4522              	 
 4523 0000 80B4     	 push {r7}
 4524              	.LCFI173:
 4525              	 .cfi_def_cfa_offset 4
 4526              	 .cfi_offset 7,-4
 4527 0002 85B0     	 sub sp,sp,#20
 4528              	.LCFI174:
 4529              	 .cfi_def_cfa_offset 24
 4530 0004 00AF     	 add r7,sp,#0
 4531              	.LCFI175:
 4532              	 .cfi_def_cfa_register 7
 4533 0006 7860     	 str r0,[r7,#4]
 4534 0008 3960     	 str r1,[r7]
2724:../Dave/Generated/FREERTOS/queue.c ****         UBaseType_t ux;
2725:../Dave/Generated/FREERTOS/queue.c **** 
2726:../Dave/Generated/FREERTOS/queue.c ****         /* See if there is an empty space in the registry.  A NULL name denotes
2727:../Dave/Generated/FREERTOS/queue.c ****          * a free slot. */
2728:../Dave/Generated/FREERTOS/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4535              	 .loc 1 2728 0
 4536 000a 0023     	 movs r3,#0
 4537 000c FB60     	 str r3,[r7,#12]
 4538 000e 14E0     	 b .L319
 4539              	.L322:
2729:../Dave/Generated/FREERTOS/queue.c ****         {
2730:../Dave/Generated/FREERTOS/queue.c ****             if( xQueueRegistry[ ux ].pcQueueName == NULL )
 4540              	 .loc 1 2730 0
 4541 0010 0E4A     	 ldr r2,.L323
 4542 0012 FB68     	 ldr r3,[r7,#12]
 4543 0014 52F83330 	 ldr r3,[r2,r3,lsl#3]
 4544 0018 002B     	 cmp r3,#0
 4545 001a 0BD1     	 bne .L320
2731:../Dave/Generated/FREERTOS/queue.c ****             {
2732:../Dave/Generated/FREERTOS/queue.c ****                 /* Store the information on this queue. */
2733:../Dave/Generated/FREERTOS/queue.c ****                 xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 4546              	 .loc 1 2733 0
 4547 001c 0B49     	 ldr r1,.L323
 4548 001e FB68     	 ldr r3,[r7,#12]
 4549 0020 3A68     	 ldr r2,[r7]
 4550 0022 41F83320 	 str r2,[r1,r3,lsl#3]
2734:../Dave/Generated/FREERTOS/queue.c ****                 xQueueRegistry[ ux ].xHandle = xQueue;
 4551              	 .loc 1 2734 0
 4552 0026 094A     	 ldr r2,.L323
 4553 0028 FB68     	 ldr r3,[r7,#12]
 4554 002a DB00     	 lsls r3,r3,#3
 4555 002c 1344     	 add r3,r3,r2
 4556 002e 7A68     	 ldr r2,[r7,#4]
 4557 0030 5A60     	 str r2,[r3,#4]
2735:../Dave/Generated/FREERTOS/queue.c **** 
2736:../Dave/Generated/FREERTOS/queue.c ****                 traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2737:../Dave/Generated/FREERTOS/queue.c ****                 break;
 4558              	 .loc 1 2737 0
 4559 0032 05E0     	 b .L318
 4560              	.L320:
2728:../Dave/Generated/FREERTOS/queue.c ****         {
 4561              	 .loc 1 2728 0 discriminator 2
 4562 0034 FB68     	 ldr r3,[r7,#12]
 4563 0036 0133     	 adds r3,r3,#1
 4564 0038 FB60     	 str r3,[r7,#12]
 4565              	.L319:
2728:../Dave/Generated/FREERTOS/queue.c ****         {
 4566              	 .loc 1 2728 0 is_stmt 0 discriminator 1
 4567 003a FB68     	 ldr r3,[r7,#12]
 4568 003c 072B     	 cmp r3,#7
 4569 003e E7D9     	 bls .L322
 4570              	.L318:
2738:../Dave/Generated/FREERTOS/queue.c ****             }
2739:../Dave/Generated/FREERTOS/queue.c ****             else
2740:../Dave/Generated/FREERTOS/queue.c ****             {
2741:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2742:../Dave/Generated/FREERTOS/queue.c ****             }
2743:../Dave/Generated/FREERTOS/queue.c ****         }
2744:../Dave/Generated/FREERTOS/queue.c ****     }
 4571              	 .loc 1 2744 0 is_stmt 1
 4572 0040 1437     	 adds r7,r7,#20
 4573              	.LCFI176:
 4574              	 .cfi_def_cfa_offset 4
 4575 0042 BD46     	 mov sp,r7
 4576              	.LCFI177:
 4577              	 .cfi_def_cfa_register 13
 4578              	 
 4579 0044 5DF8047B 	 ldr r7,[sp],#4
 4580              	.LCFI178:
 4581              	 .cfi_restore 7
 4582              	 .cfi_def_cfa_offset 0
 4583 0048 7047     	 bx lr
 4584              	.L324:
 4585 004a 00BF     	 .align 2
 4586              	.L323:
 4587 004c 00000000 	 .word xQueueRegistry
 4588              	 .cfi_endproc
 4589              	.LFE171:
 4591              	 .section .text.pcQueueGetName,"ax",%progbits
 4592              	 .align 2
 4593              	 .global pcQueueGetName
 4594              	 .thumb
 4595              	 .thumb_func
 4597              	pcQueueGetName:
 4598              	.LFB172:
2745:../Dave/Generated/FREERTOS/queue.c **** 
2746:../Dave/Generated/FREERTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2747:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2748:../Dave/Generated/FREERTOS/queue.c **** 
2749:../Dave/Generated/FREERTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2750:../Dave/Generated/FREERTOS/queue.c **** 
2751:../Dave/Generated/FREERTOS/queue.c ****     const char * pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are all
2752:../Dave/Generated/FREERTOS/queue.c ****     {
 4599              	 .loc 1 2752 0
 4600              	 .cfi_startproc
 4601              	 
 4602              	 
 4603              	 
 4604 0000 80B4     	 push {r7}
 4605              	.LCFI179:
 4606              	 .cfi_def_cfa_offset 4
 4607              	 .cfi_offset 7,-4
 4608 0002 85B0     	 sub sp,sp,#20
 4609              	.LCFI180:
 4610              	 .cfi_def_cfa_offset 24
 4611 0004 00AF     	 add r7,sp,#0
 4612              	.LCFI181:
 4613              	 .cfi_def_cfa_register 7
 4614 0006 7860     	 str r0,[r7,#4]
2753:../Dave/Generated/FREERTOS/queue.c ****         UBaseType_t ux;
2754:../Dave/Generated/FREERTOS/queue.c ****         const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings a
 4615              	 .loc 1 2754 0
 4616 0008 0023     	 movs r3,#0
 4617 000a BB60     	 str r3,[r7,#8]
2755:../Dave/Generated/FREERTOS/queue.c **** 
2756:../Dave/Generated/FREERTOS/queue.c ****         /* Note there is nothing here to protect against another task adding or
2757:../Dave/Generated/FREERTOS/queue.c ****          * removing entries from the registry while it is being searched. */
2758:../Dave/Generated/FREERTOS/queue.c **** 
2759:../Dave/Generated/FREERTOS/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4618              	 .loc 1 2759 0
 4619 000c 0023     	 movs r3,#0
 4620 000e FB60     	 str r3,[r7,#12]
 4621 0010 10E0     	 b .L326
 4622              	.L329:
2760:../Dave/Generated/FREERTOS/queue.c ****         {
2761:../Dave/Generated/FREERTOS/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 4623              	 .loc 1 2761 0
 4624 0012 0D4A     	 ldr r2,.L331
 4625 0014 FB68     	 ldr r3,[r7,#12]
 4626 0016 DB00     	 lsls r3,r3,#3
 4627 0018 1344     	 add r3,r3,r2
 4628 001a 5A68     	 ldr r2,[r3,#4]
 4629 001c 7B68     	 ldr r3,[r7,#4]
 4630 001e 9A42     	 cmp r2,r3
 4631 0020 05D1     	 bne .L327
2762:../Dave/Generated/FREERTOS/queue.c ****             {
2763:../Dave/Generated/FREERTOS/queue.c ****                 pcReturn = xQueueRegistry[ ux ].pcQueueName;
 4632              	 .loc 1 2763 0
 4633 0022 094A     	 ldr r2,.L331
 4634 0024 FB68     	 ldr r3,[r7,#12]
 4635 0026 52F83330 	 ldr r3,[r2,r3,lsl#3]
 4636 002a BB60     	 str r3,[r7,#8]
2764:../Dave/Generated/FREERTOS/queue.c ****                 break;
 4637              	 .loc 1 2764 0
 4638 002c 05E0     	 b .L328
 4639              	.L327:
2759:../Dave/Generated/FREERTOS/queue.c ****         {
 4640              	 .loc 1 2759 0 discriminator 2
 4641 002e FB68     	 ldr r3,[r7,#12]
 4642 0030 0133     	 adds r3,r3,#1
 4643 0032 FB60     	 str r3,[r7,#12]
 4644              	.L326:
2759:../Dave/Generated/FREERTOS/queue.c ****         {
 4645              	 .loc 1 2759 0 is_stmt 0 discriminator 1
 4646 0034 FB68     	 ldr r3,[r7,#12]
 4647 0036 072B     	 cmp r3,#7
 4648 0038 EBD9     	 bls .L329
 4649              	.L328:
2765:../Dave/Generated/FREERTOS/queue.c ****             }
2766:../Dave/Generated/FREERTOS/queue.c ****             else
2767:../Dave/Generated/FREERTOS/queue.c ****             {
2768:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2769:../Dave/Generated/FREERTOS/queue.c ****             }
2770:../Dave/Generated/FREERTOS/queue.c ****         }
2771:../Dave/Generated/FREERTOS/queue.c **** 
2772:../Dave/Generated/FREERTOS/queue.c ****         return pcReturn;
 4650              	 .loc 1 2772 0 is_stmt 1
 4651 003a BB68     	 ldr r3,[r7,#8]
2773:../Dave/Generated/FREERTOS/queue.c ****     } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 4652              	 .loc 1 2773 0
 4653 003c 1846     	 mov r0,r3
 4654 003e 1437     	 adds r7,r7,#20
 4655              	.LCFI182:
 4656              	 .cfi_def_cfa_offset 4
 4657 0040 BD46     	 mov sp,r7
 4658              	.LCFI183:
 4659              	 .cfi_def_cfa_register 13
 4660              	 
 4661 0042 5DF8047B 	 ldr r7,[sp],#4
 4662              	.LCFI184:
 4663              	 .cfi_restore 7
 4664              	 .cfi_def_cfa_offset 0
 4665 0046 7047     	 bx lr
 4666              	.L332:
 4667              	 .align 2
 4668              	.L331:
 4669 0048 00000000 	 .word xQueueRegistry
 4670              	 .cfi_endproc
 4671              	.LFE172:
 4673              	 .section .text.vQueueUnregisterQueue,"ax",%progbits
 4674              	 .align 2
 4675              	 .global vQueueUnregisterQueue
 4676              	 .thumb
 4677              	 .thumb_func
 4679              	vQueueUnregisterQueue:
 4680              	.LFB173:
2774:../Dave/Generated/FREERTOS/queue.c **** 
2775:../Dave/Generated/FREERTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2776:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2777:../Dave/Generated/FREERTOS/queue.c **** 
2778:../Dave/Generated/FREERTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2779:../Dave/Generated/FREERTOS/queue.c **** 
2780:../Dave/Generated/FREERTOS/queue.c ****     void vQueueUnregisterQueue( QueueHandle_t xQueue )
2781:../Dave/Generated/FREERTOS/queue.c ****     {
 4681              	 .loc 1 2781 0
 4682              	 .cfi_startproc
 4683              	 
 4684              	 
 4685              	 
 4686 0000 80B4     	 push {r7}
 4687              	.LCFI185:
 4688              	 .cfi_def_cfa_offset 4
 4689              	 .cfi_offset 7,-4
 4690 0002 85B0     	 sub sp,sp,#20
 4691              	.LCFI186:
 4692              	 .cfi_def_cfa_offset 24
 4693 0004 00AF     	 add r7,sp,#0
 4694              	.LCFI187:
 4695              	 .cfi_def_cfa_register 7
 4696 0006 7860     	 str r0,[r7,#4]
2782:../Dave/Generated/FREERTOS/queue.c ****         UBaseType_t ux;
2783:../Dave/Generated/FREERTOS/queue.c **** 
2784:../Dave/Generated/FREERTOS/queue.c ****         /* See if the handle of the queue being unregistered in actually in the
2785:../Dave/Generated/FREERTOS/queue.c ****          * registry. */
2786:../Dave/Generated/FREERTOS/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4697              	 .loc 1 2786 0
 4698 0008 0023     	 movs r3,#0
 4699 000a FB60     	 str r3,[r7,#12]
 4700 000c 16E0     	 b .L334
 4701              	.L337:
2787:../Dave/Generated/FREERTOS/queue.c ****         {
2788:../Dave/Generated/FREERTOS/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 4702              	 .loc 1 2788 0
 4703 000e 0F4A     	 ldr r2,.L338
 4704 0010 FB68     	 ldr r3,[r7,#12]
 4705 0012 DB00     	 lsls r3,r3,#3
 4706 0014 1344     	 add r3,r3,r2
 4707 0016 5A68     	 ldr r2,[r3,#4]
 4708 0018 7B68     	 ldr r3,[r7,#4]
 4709 001a 9A42     	 cmp r2,r3
 4710 001c 0BD1     	 bne .L335
2789:../Dave/Generated/FREERTOS/queue.c ****             {
2790:../Dave/Generated/FREERTOS/queue.c ****                 /* Set the name to NULL to show that this slot if free again. */
2791:../Dave/Generated/FREERTOS/queue.c ****                 xQueueRegistry[ ux ].pcQueueName = NULL;
 4711              	 .loc 1 2791 0
 4712 001e 0B4A     	 ldr r2,.L338
 4713 0020 FB68     	 ldr r3,[r7,#12]
 4714 0022 0021     	 movs r1,#0
 4715 0024 42F83310 	 str r1,[r2,r3,lsl#3]
2792:../Dave/Generated/FREERTOS/queue.c **** 
2793:../Dave/Generated/FREERTOS/queue.c ****                 /* Set the handle to NULL to ensure the same queue handle cannot
2794:../Dave/Generated/FREERTOS/queue.c ****                  * appear in the registry twice if it is added, removed, then
2795:../Dave/Generated/FREERTOS/queue.c ****                  * added again. */
2796:../Dave/Generated/FREERTOS/queue.c ****                 xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 4716              	 .loc 1 2796 0
 4717 0028 084A     	 ldr r2,.L338
 4718 002a FB68     	 ldr r3,[r7,#12]
 4719 002c DB00     	 lsls r3,r3,#3
 4720 002e 1344     	 add r3,r3,r2
 4721 0030 0022     	 movs r2,#0
 4722 0032 5A60     	 str r2,[r3,#4]
2797:../Dave/Generated/FREERTOS/queue.c ****                 break;
 4723              	 .loc 1 2797 0
 4724 0034 05E0     	 b .L333
 4725              	.L335:
2786:../Dave/Generated/FREERTOS/queue.c ****         {
 4726              	 .loc 1 2786 0 discriminator 2
 4727 0036 FB68     	 ldr r3,[r7,#12]
 4728 0038 0133     	 adds r3,r3,#1
 4729 003a FB60     	 str r3,[r7,#12]
 4730              	.L334:
2786:../Dave/Generated/FREERTOS/queue.c ****         {
 4731              	 .loc 1 2786 0 is_stmt 0 discriminator 1
 4732 003c FB68     	 ldr r3,[r7,#12]
 4733 003e 072B     	 cmp r3,#7
 4734 0040 E5D9     	 bls .L337
 4735              	.L333:
2798:../Dave/Generated/FREERTOS/queue.c ****             }
2799:../Dave/Generated/FREERTOS/queue.c ****             else
2800:../Dave/Generated/FREERTOS/queue.c ****             {
2801:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2802:../Dave/Generated/FREERTOS/queue.c ****             }
2803:../Dave/Generated/FREERTOS/queue.c ****         }
2804:../Dave/Generated/FREERTOS/queue.c ****     } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 4736              	 .loc 1 2804 0 is_stmt 1
 4737 0042 1437     	 adds r7,r7,#20
 4738              	.LCFI188:
 4739              	 .cfi_def_cfa_offset 4
 4740 0044 BD46     	 mov sp,r7
 4741              	.LCFI189:
 4742              	 .cfi_def_cfa_register 13
 4743              	 
 4744 0046 5DF8047B 	 ldr r7,[sp],#4
 4745              	.LCFI190:
 4746              	 .cfi_restore 7
 4747              	 .cfi_def_cfa_offset 0
 4748 004a 7047     	 bx lr
 4749              	.L339:
 4750              	 .align 2
 4751              	.L338:
 4752 004c 00000000 	 .word xQueueRegistry
 4753              	 .cfi_endproc
 4754              	.LFE173:
 4756              	 .section .text.vQueueWaitForMessageRestricted,"ax",%progbits
 4757              	 .align 2
 4758              	 .global vQueueWaitForMessageRestricted
 4759              	 .thumb
 4760              	 .thumb_func
 4762              	vQueueWaitForMessageRestricted:
 4763              	.LFB174:
2805:../Dave/Generated/FREERTOS/queue.c **** 
2806:../Dave/Generated/FREERTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2807:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2808:../Dave/Generated/FREERTOS/queue.c **** 
2809:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_TIMERS == 1 )
2810:../Dave/Generated/FREERTOS/queue.c **** 
2811:../Dave/Generated/FREERTOS/queue.c ****     void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
2812:../Dave/Generated/FREERTOS/queue.c ****                                          TickType_t xTicksToWait,
2813:../Dave/Generated/FREERTOS/queue.c ****                                          const BaseType_t xWaitIndefinitely )
2814:../Dave/Generated/FREERTOS/queue.c ****     {
 4764              	 .loc 1 2814 0
 4765              	 .cfi_startproc
 4766              	 
 4767              	 
 4768 0000 80B5     	 push {r7,lr}
 4769              	.LCFI191:
 4770              	 .cfi_def_cfa_offset 8
 4771              	 .cfi_offset 7,-8
 4772              	 .cfi_offset 14,-4
 4773 0002 86B0     	 sub sp,sp,#24
 4774              	.LCFI192:
 4775              	 .cfi_def_cfa_offset 32
 4776 0004 00AF     	 add r7,sp,#0
 4777              	.LCFI193:
 4778              	 .cfi_def_cfa_register 7
 4779 0006 F860     	 str r0,[r7,#12]
 4780 0008 B960     	 str r1,[r7,#8]
 4781 000a 7A60     	 str r2,[r7,#4]
2815:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
 4782              	 .loc 1 2815 0
 4783 000c FB68     	 ldr r3,[r7,#12]
 4784 000e 7B61     	 str r3,[r7,#20]
2816:../Dave/Generated/FREERTOS/queue.c **** 
2817:../Dave/Generated/FREERTOS/queue.c ****         /* This function should not be called by application code hence the
2818:../Dave/Generated/FREERTOS/queue.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
2819:../Dave/Generated/FREERTOS/queue.c ****          * designed for use by kernel code, and has special calling requirements.
2820:../Dave/Generated/FREERTOS/queue.c ****          * It can result in vListInsert() being called on a list that can only
2821:../Dave/Generated/FREERTOS/queue.c ****          * possibly ever have one item in it, so the list will be fast, but even
2822:../Dave/Generated/FREERTOS/queue.c ****          * so it should be called with the scheduler locked and not from a critical
2823:../Dave/Generated/FREERTOS/queue.c ****          * section. */
2824:../Dave/Generated/FREERTOS/queue.c **** 
2825:../Dave/Generated/FREERTOS/queue.c ****         /* Only do anything if there are no messages in the queue.  This function
2826:../Dave/Generated/FREERTOS/queue.c ****          *  will not actually cause the task to block, just place it on a blocked
2827:../Dave/Generated/FREERTOS/queue.c ****          *  list.  It will not block until the scheduler is unlocked - at which
2828:../Dave/Generated/FREERTOS/queue.c ****          *  time a yield will be performed.  If an item is added to the queue while
2829:../Dave/Generated/FREERTOS/queue.c ****          *  the queue is locked, and the calling task blocks on the queue, then the
2830:../Dave/Generated/FREERTOS/queue.c ****          *  calling task will be immediately unblocked when the queue is unlocked. */
2831:../Dave/Generated/FREERTOS/queue.c ****         prvLockQueue( pxQueue );
 4785              	 .loc 1 2831 0
 4786 0010 FFF7FEFF 	 bl vPortEnterCritical
 4787 0014 7B69     	 ldr r3,[r7,#20]
 4788 0016 93F84430 	 ldrb r3,[r3,#68]
 4789 001a DBB2     	 uxtb r3,r3
 4790 001c 5BB2     	 sxtb r3,r3
 4791 001e B3F1FF3F 	 cmp r3,#-1
 4792 0022 03D1     	 bne .L341
 4793              	 .loc 1 2831 0 is_stmt 0 discriminator 1
 4794 0024 7B69     	 ldr r3,[r7,#20]
 4795 0026 0022     	 movs r2,#0
 4796 0028 83F84420 	 strb r2,[r3,#68]
 4797              	.L341:
 4798              	 .loc 1 2831 0 discriminator 3
 4799 002c 7B69     	 ldr r3,[r7,#20]
 4800 002e 93F84530 	 ldrb r3,[r3,#69]
 4801 0032 DBB2     	 uxtb r3,r3
 4802 0034 5BB2     	 sxtb r3,r3
 4803 0036 B3F1FF3F 	 cmp r3,#-1
 4804 003a 03D1     	 bne .L342
 4805              	 .loc 1 2831 0 discriminator 4
 4806 003c 7B69     	 ldr r3,[r7,#20]
 4807 003e 0022     	 movs r2,#0
 4808 0040 83F84520 	 strb r2,[r3,#69]
 4809              	.L342:
 4810              	 .loc 1 2831 0 discriminator 6
 4811 0044 FFF7FEFF 	 bl vPortExitCritical
2832:../Dave/Generated/FREERTOS/queue.c **** 
2833:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 4812              	 .loc 1 2833 0 is_stmt 1 discriminator 6
 4813 0048 7B69     	 ldr r3,[r7,#20]
 4814 004a 9B6B     	 ldr r3,[r3,#56]
 4815 004c 002B     	 cmp r3,#0
 4816 004e 06D1     	 bne .L343
2834:../Dave/Generated/FREERTOS/queue.c ****         {
2835:../Dave/Generated/FREERTOS/queue.c ****             /* There is nothing in the queue, block for the specified period. */
2836:../Dave/Generated/FREERTOS/queue.c ****             vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xW
 4817              	 .loc 1 2836 0
 4818 0050 7B69     	 ldr r3,[r7,#20]
 4819 0052 2433     	 adds r3,r3,#36
 4820 0054 1846     	 mov r0,r3
 4821 0056 B968     	 ldr r1,[r7,#8]
 4822 0058 7A68     	 ldr r2,[r7,#4]
 4823 005a FFF7FEFF 	 bl vTaskPlaceOnEventListRestricted
 4824              	.L343:
2837:../Dave/Generated/FREERTOS/queue.c ****         }
2838:../Dave/Generated/FREERTOS/queue.c ****         else
2839:../Dave/Generated/FREERTOS/queue.c ****         {
2840:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2841:../Dave/Generated/FREERTOS/queue.c ****         }
2842:../Dave/Generated/FREERTOS/queue.c **** 
2843:../Dave/Generated/FREERTOS/queue.c ****         prvUnlockQueue( pxQueue );
 4825              	 .loc 1 2843 0
 4826 005e 7869     	 ldr r0,[r7,#20]
 4827 0060 FFF7FEFF 	 bl prvUnlockQueue
2844:../Dave/Generated/FREERTOS/queue.c ****     }
 4828              	 .loc 1 2844 0
 4829 0064 1837     	 adds r7,r7,#24
 4830              	.LCFI194:
 4831              	 .cfi_def_cfa_offset 8
 4832 0066 BD46     	 mov sp,r7
 4833              	.LCFI195:
 4834              	 .cfi_def_cfa_register 13
 4835              	 
 4836 0068 80BD     	 pop {r7,pc}
 4837              	 .cfi_endproc
 4838              	.LFE174:
 4840 006a 00BF     	 .section .text.xQueueCreateSet,"ax",%progbits
 4841              	 .align 2
 4842              	 .global xQueueCreateSet
 4843              	 .thumb
 4844              	 .thumb_func
 4846              	xQueueCreateSet:
 4847              	.LFB175:
2845:../Dave/Generated/FREERTOS/queue.c **** 
2846:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_TIMERS */
2847:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2848:../Dave/Generated/FREERTOS/queue.c **** 
2849:../Dave/Generated/FREERTOS/queue.c **** #if ( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
2850:../Dave/Generated/FREERTOS/queue.c **** 
2851:../Dave/Generated/FREERTOS/queue.c ****     QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
2852:../Dave/Generated/FREERTOS/queue.c ****     {
 4848              	 .loc 1 2852 0
 4849              	 .cfi_startproc
 4850              	 
 4851              	 
 4852 0000 80B5     	 push {r7,lr}
 4853              	.LCFI196:
 4854              	 .cfi_def_cfa_offset 8
 4855              	 .cfi_offset 7,-8
 4856              	 .cfi_offset 14,-4
 4857 0002 84B0     	 sub sp,sp,#16
 4858              	.LCFI197:
 4859              	 .cfi_def_cfa_offset 24
 4860 0004 00AF     	 add r7,sp,#0
 4861              	.LCFI198:
 4862              	 .cfi_def_cfa_register 7
 4863 0006 7860     	 str r0,[r7,#4]
2853:../Dave/Generated/FREERTOS/queue.c ****         QueueSetHandle_t pxQueue;
2854:../Dave/Generated/FREERTOS/queue.c **** 
2855:../Dave/Generated/FREERTOS/queue.c ****         pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), que
 4864              	 .loc 1 2855 0
 4865 0008 7868     	 ldr r0,[r7,#4]
 4866 000a 0421     	 movs r1,#4
 4867 000c 0022     	 movs r2,#0
 4868 000e FFF7FEFF 	 bl xQueueGenericCreate
 4869 0012 F860     	 str r0,[r7,#12]
2856:../Dave/Generated/FREERTOS/queue.c **** 
2857:../Dave/Generated/FREERTOS/queue.c ****         return pxQueue;
 4870              	 .loc 1 2857 0
 4871 0014 FB68     	 ldr r3,[r7,#12]
2858:../Dave/Generated/FREERTOS/queue.c ****     }
 4872              	 .loc 1 2858 0
 4873 0016 1846     	 mov r0,r3
 4874 0018 1037     	 adds r7,r7,#16
 4875              	.LCFI199:
 4876              	 .cfi_def_cfa_offset 8
 4877 001a BD46     	 mov sp,r7
 4878              	.LCFI200:
 4879              	 .cfi_def_cfa_register 13
 4880              	 
 4881 001c 80BD     	 pop {r7,pc}
 4882              	 .cfi_endproc
 4883              	.LFE175:
 4885 001e 00BF     	 .section .text.xQueueAddToSet,"ax",%progbits
 4886              	 .align 2
 4887              	 .global xQueueAddToSet
 4888              	 .thumb
 4889              	 .thumb_func
 4891              	xQueueAddToSet:
 4892              	.LFB176:
2859:../Dave/Generated/FREERTOS/queue.c **** 
2860:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2861:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2862:../Dave/Generated/FREERTOS/queue.c **** 
2863:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2864:../Dave/Generated/FREERTOS/queue.c **** 
2865:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore,
2866:../Dave/Generated/FREERTOS/queue.c ****                                QueueSetHandle_t xQueueSet )
2867:../Dave/Generated/FREERTOS/queue.c ****     {
 4893              	 .loc 1 2867 0
 4894              	 .cfi_startproc
 4895              	 
 4896              	 
 4897 0000 80B5     	 push {r7,lr}
 4898              	.LCFI201:
 4899              	 .cfi_def_cfa_offset 8
 4900              	 .cfi_offset 7,-8
 4901              	 .cfi_offset 14,-4
 4902 0002 84B0     	 sub sp,sp,#16
 4903              	.LCFI202:
 4904              	 .cfi_def_cfa_offset 24
 4905 0004 00AF     	 add r7,sp,#0
 4906              	.LCFI203:
 4907              	 .cfi_def_cfa_register 7
 4908 0006 7860     	 str r0,[r7,#4]
 4909 0008 3960     	 str r1,[r7]
2868:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xReturn;
2869:../Dave/Generated/FREERTOS/queue.c **** 
2870:../Dave/Generated/FREERTOS/queue.c ****         taskENTER_CRITICAL();
 4910              	 .loc 1 2870 0
 4911 000a FFF7FEFF 	 bl vPortEnterCritical
2871:../Dave/Generated/FREERTOS/queue.c ****         {
2872:../Dave/Generated/FREERTOS/queue.c ****             if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 4912              	 .loc 1 2872 0
 4913 000e 7B68     	 ldr r3,[r7,#4]
 4914 0010 9B6C     	 ldr r3,[r3,#72]
 4915 0012 002B     	 cmp r3,#0
 4916 0014 02D0     	 beq .L347
2873:../Dave/Generated/FREERTOS/queue.c ****             {
2874:../Dave/Generated/FREERTOS/queue.c ****                 /* Cannot add a queue/semaphore to more than one queue set. */
2875:../Dave/Generated/FREERTOS/queue.c ****                 xReturn = pdFAIL;
 4917              	 .loc 1 2875 0
 4918 0016 0023     	 movs r3,#0
 4919 0018 FB60     	 str r3,[r7,#12]
 4920 001a 0BE0     	 b .L348
 4921              	.L347:
2876:../Dave/Generated/FREERTOS/queue.c ****             }
2877:../Dave/Generated/FREERTOS/queue.c ****             else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 4922              	 .loc 1 2877 0
 4923 001c 7B68     	 ldr r3,[r7,#4]
 4924 001e 9B6B     	 ldr r3,[r3,#56]
 4925 0020 002B     	 cmp r3,#0
 4926 0022 02D0     	 beq .L349
2878:../Dave/Generated/FREERTOS/queue.c ****             {
2879:../Dave/Generated/FREERTOS/queue.c ****                 /* Cannot add a queue/semaphore to a queue set if there are already
2880:../Dave/Generated/FREERTOS/queue.c ****                  * items in the queue/semaphore. */
2881:../Dave/Generated/FREERTOS/queue.c ****                 xReturn = pdFAIL;
 4927              	 .loc 1 2881 0
 4928 0024 0023     	 movs r3,#0
 4929 0026 FB60     	 str r3,[r7,#12]
 4930 0028 04E0     	 b .L348
 4931              	.L349:
2882:../Dave/Generated/FREERTOS/queue.c ****             }
2883:../Dave/Generated/FREERTOS/queue.c ****             else
2884:../Dave/Generated/FREERTOS/queue.c ****             {
2885:../Dave/Generated/FREERTOS/queue.c ****                 ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 4932              	 .loc 1 2885 0
 4933 002a 7B68     	 ldr r3,[r7,#4]
 4934 002c 3A68     	 ldr r2,[r7]
 4935 002e 9A64     	 str r2,[r3,#72]
2886:../Dave/Generated/FREERTOS/queue.c ****                 xReturn = pdPASS;
 4936              	 .loc 1 2886 0
 4937 0030 0123     	 movs r3,#1
 4938 0032 FB60     	 str r3,[r7,#12]
 4939              	.L348:
2887:../Dave/Generated/FREERTOS/queue.c ****             }
2888:../Dave/Generated/FREERTOS/queue.c ****         }
2889:../Dave/Generated/FREERTOS/queue.c ****         taskEXIT_CRITICAL();
 4940              	 .loc 1 2889 0
 4941 0034 FFF7FEFF 	 bl vPortExitCritical
2890:../Dave/Generated/FREERTOS/queue.c **** 
2891:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
 4942              	 .loc 1 2891 0
 4943 0038 FB68     	 ldr r3,[r7,#12]
2892:../Dave/Generated/FREERTOS/queue.c ****     }
 4944              	 .loc 1 2892 0
 4945 003a 1846     	 mov r0,r3
 4946 003c 1037     	 adds r7,r7,#16
 4947              	.LCFI204:
 4948              	 .cfi_def_cfa_offset 8
 4949 003e BD46     	 mov sp,r7
 4950              	.LCFI205:
 4951              	 .cfi_def_cfa_register 13
 4952              	 
 4953 0040 80BD     	 pop {r7,pc}
 4954              	 .cfi_endproc
 4955              	.LFE176:
 4957 0042 00BF     	 .section .text.xQueueRemoveFromSet,"ax",%progbits
 4958              	 .align 2
 4959              	 .global xQueueRemoveFromSet
 4960              	 .thumb
 4961              	 .thumb_func
 4963              	xQueueRemoveFromSet:
 4964              	.LFB177:
2893:../Dave/Generated/FREERTOS/queue.c **** 
2894:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2895:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2896:../Dave/Generated/FREERTOS/queue.c **** 
2897:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2898:../Dave/Generated/FREERTOS/queue.c **** 
2899:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore,
2900:../Dave/Generated/FREERTOS/queue.c ****                                     QueueSetHandle_t xQueueSet )
2901:../Dave/Generated/FREERTOS/queue.c ****     {
 4965              	 .loc 1 2901 0
 4966              	 .cfi_startproc
 4967              	 
 4968              	 
 4969 0000 80B5     	 push {r7,lr}
 4970              	.LCFI206:
 4971              	 .cfi_def_cfa_offset 8
 4972              	 .cfi_offset 7,-8
 4973              	 .cfi_offset 14,-4
 4974 0002 84B0     	 sub sp,sp,#16
 4975              	.LCFI207:
 4976              	 .cfi_def_cfa_offset 24
 4977 0004 00AF     	 add r7,sp,#0
 4978              	.LCFI208:
 4979              	 .cfi_def_cfa_register 7
 4980 0006 7860     	 str r0,[r7,#4]
 4981 0008 3960     	 str r1,[r7]
2902:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xReturn;
2903:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxQueueOrSemaphore = ( Queue_t * ) xQueueOrSemaphore;
 4982              	 .loc 1 2903 0
 4983 000a 7B68     	 ldr r3,[r7,#4]
 4984 000c BB60     	 str r3,[r7,#8]
2904:../Dave/Generated/FREERTOS/queue.c **** 
2905:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueueOrSemaphore->pxQueueSetContainer != xQueueSet )
 4985              	 .loc 1 2905 0
 4986 000e BB68     	 ldr r3,[r7,#8]
 4987 0010 9A6C     	 ldr r2,[r3,#72]
 4988 0012 3B68     	 ldr r3,[r7]
 4989 0014 9A42     	 cmp r2,r3
 4990 0016 02D0     	 beq .L352
2906:../Dave/Generated/FREERTOS/queue.c ****         {
2907:../Dave/Generated/FREERTOS/queue.c ****             /* The queue was not a member of the set. */
2908:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdFAIL;
 4991              	 .loc 1 2908 0
 4992 0018 0023     	 movs r3,#0
 4993 001a FB60     	 str r3,[r7,#12]
 4994 001c 0FE0     	 b .L353
 4995              	.L352:
2909:../Dave/Generated/FREERTOS/queue.c ****         }
2910:../Dave/Generated/FREERTOS/queue.c ****         else if( pxQueueOrSemaphore->uxMessagesWaiting != ( UBaseType_t ) 0 )
 4996              	 .loc 1 2910 0
 4997 001e BB68     	 ldr r3,[r7,#8]
 4998 0020 9B6B     	 ldr r3,[r3,#56]
 4999 0022 002B     	 cmp r3,#0
 5000 0024 02D0     	 beq .L354
2911:../Dave/Generated/FREERTOS/queue.c ****         {
2912:../Dave/Generated/FREERTOS/queue.c ****             /* It is dangerous to remove a queue from a set when the queue is
2913:../Dave/Generated/FREERTOS/queue.c ****              * not empty because the queue set will still hold pending events for
2914:../Dave/Generated/FREERTOS/queue.c ****              * the queue. */
2915:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdFAIL;
 5001              	 .loc 1 2915 0
 5002 0026 0023     	 movs r3,#0
 5003 0028 FB60     	 str r3,[r7,#12]
 5004 002a 08E0     	 b .L353
 5005              	.L354:
2916:../Dave/Generated/FREERTOS/queue.c ****         }
2917:../Dave/Generated/FREERTOS/queue.c ****         else
2918:../Dave/Generated/FREERTOS/queue.c ****         {
2919:../Dave/Generated/FREERTOS/queue.c ****             taskENTER_CRITICAL();
 5006              	 .loc 1 2919 0
 5007 002c FFF7FEFF 	 bl vPortEnterCritical
2920:../Dave/Generated/FREERTOS/queue.c ****             {
2921:../Dave/Generated/FREERTOS/queue.c ****                 /* The queue is no longer contained in the set. */
2922:../Dave/Generated/FREERTOS/queue.c ****                 pxQueueOrSemaphore->pxQueueSetContainer = NULL;
 5008              	 .loc 1 2922 0
 5009 0030 BB68     	 ldr r3,[r7,#8]
 5010 0032 0022     	 movs r2,#0
 5011 0034 9A64     	 str r2,[r3,#72]
2923:../Dave/Generated/FREERTOS/queue.c ****             }
2924:../Dave/Generated/FREERTOS/queue.c ****             taskEXIT_CRITICAL();
 5012              	 .loc 1 2924 0
 5013 0036 FFF7FEFF 	 bl vPortExitCritical
2925:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdPASS;
 5014              	 .loc 1 2925 0
 5015 003a 0123     	 movs r3,#1
 5016 003c FB60     	 str r3,[r7,#12]
 5017              	.L353:
2926:../Dave/Generated/FREERTOS/queue.c ****         }
2927:../Dave/Generated/FREERTOS/queue.c **** 
2928:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
 5018              	 .loc 1 2928 0
 5019 003e FB68     	 ldr r3,[r7,#12]
2929:../Dave/Generated/FREERTOS/queue.c ****     } /*lint !e818 xQueueSet could not be declared as pointing to const as it is a typedef. */
 5020              	 .loc 1 2929 0
 5021 0040 1846     	 mov r0,r3
 5022 0042 1037     	 adds r7,r7,#16
 5023              	.LCFI209:
 5024              	 .cfi_def_cfa_offset 8
 5025 0044 BD46     	 mov sp,r7
 5026              	.LCFI210:
 5027              	 .cfi_def_cfa_register 13
 5028              	 
 5029 0046 80BD     	 pop {r7,pc}
 5030              	 .cfi_endproc
 5031              	.LFE177:
 5033              	 .section .text.xQueueSelectFromSet,"ax",%progbits
 5034              	 .align 2
 5035              	 .global xQueueSelectFromSet
 5036              	 .thumb
 5037              	 .thumb_func
 5039              	xQueueSelectFromSet:
 5040              	.LFB178:
2930:../Dave/Generated/FREERTOS/queue.c **** 
2931:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2932:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2933:../Dave/Generated/FREERTOS/queue.c **** 
2934:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2935:../Dave/Generated/FREERTOS/queue.c **** 
2936:../Dave/Generated/FREERTOS/queue.c ****     QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet,
2937:../Dave/Generated/FREERTOS/queue.c ****                                                 TickType_t const xTicksToWait )
2938:../Dave/Generated/FREERTOS/queue.c ****     {
 5041              	 .loc 1 2938 0
 5042              	 .cfi_startproc
 5043              	 
 5044              	 
 5045 0000 80B5     	 push {r7,lr}
 5046              	.LCFI211:
 5047              	 .cfi_def_cfa_offset 8
 5048              	 .cfi_offset 7,-8
 5049              	 .cfi_offset 14,-4
 5050 0002 84B0     	 sub sp,sp,#16
 5051              	.LCFI212:
 5052              	 .cfi_def_cfa_offset 24
 5053 0004 00AF     	 add r7,sp,#0
 5054              	.LCFI213:
 5055              	 .cfi_def_cfa_register 7
 5056 0006 7860     	 str r0,[r7,#4]
 5057 0008 3960     	 str r1,[r7]
2939:../Dave/Generated/FREERTOS/queue.c ****         QueueSetMemberHandle_t xReturn = NULL;
 5058              	 .loc 1 2939 0
 5059 000a 0023     	 movs r3,#0
 5060 000c FB60     	 str r3,[r7,#12]
2940:../Dave/Generated/FREERTOS/queue.c **** 
2941:../Dave/Generated/FREERTOS/queue.c ****         ( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961
 5061              	 .loc 1 2941 0
 5062 000e 07F10C03 	 add r3,r7,#12
 5063 0012 7868     	 ldr r0,[r7,#4]
 5064 0014 1946     	 mov r1,r3
 5065 0016 3A68     	 ldr r2,[r7]
 5066 0018 FFF7FEFF 	 bl xQueueReceive
2942:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
 5067              	 .loc 1 2942 0
 5068 001c FB68     	 ldr r3,[r7,#12]
2943:../Dave/Generated/FREERTOS/queue.c ****     }
 5069              	 .loc 1 2943 0
 5070 001e 1846     	 mov r0,r3
 5071 0020 1037     	 adds r7,r7,#16
 5072              	.LCFI214:
 5073              	 .cfi_def_cfa_offset 8
 5074 0022 BD46     	 mov sp,r7
 5075              	.LCFI215:
 5076              	 .cfi_def_cfa_register 13
 5077              	 
 5078 0024 80BD     	 pop {r7,pc}
 5079              	 .cfi_endproc
 5080              	.LFE178:
 5082 0026 00BF     	 .section .text.xQueueSelectFromSetFromISR,"ax",%progbits
 5083              	 .align 2
 5084              	 .global xQueueSelectFromSetFromISR
 5085              	 .thumb
 5086              	 .thumb_func
 5088              	xQueueSelectFromSetFromISR:
 5089              	.LFB179:
2944:../Dave/Generated/FREERTOS/queue.c **** 
2945:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2946:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2947:../Dave/Generated/FREERTOS/queue.c **** 
2948:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2949:../Dave/Generated/FREERTOS/queue.c **** 
2950:../Dave/Generated/FREERTOS/queue.c ****     QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet )
2951:../Dave/Generated/FREERTOS/queue.c ****     {
 5090              	 .loc 1 2951 0
 5091              	 .cfi_startproc
 5092              	 
 5093              	 
 5094 0000 80B5     	 push {r7,lr}
 5095              	.LCFI216:
 5096              	 .cfi_def_cfa_offset 8
 5097              	 .cfi_offset 7,-8
 5098              	 .cfi_offset 14,-4
 5099 0002 84B0     	 sub sp,sp,#16
 5100              	.LCFI217:
 5101              	 .cfi_def_cfa_offset 24
 5102 0004 00AF     	 add r7,sp,#0
 5103              	.LCFI218:
 5104              	 .cfi_def_cfa_register 7
 5105 0006 7860     	 str r0,[r7,#4]
2952:../Dave/Generated/FREERTOS/queue.c ****         QueueSetMemberHandle_t xReturn = NULL;
 5106              	 .loc 1 2952 0
 5107 0008 0023     	 movs r3,#0
 5108 000a FB60     	 str r3,[r7,#12]
2953:../Dave/Generated/FREERTOS/queue.c **** 
2954:../Dave/Generated/FREERTOS/queue.c ****         ( void ) xQueueReceiveFromISR( ( QueueHandle_t ) xQueueSet, &xReturn, NULL ); /*lint !e961 
 5109              	 .loc 1 2954 0
 5110 000c 07F10C03 	 add r3,r7,#12
 5111 0010 7868     	 ldr r0,[r7,#4]
 5112 0012 1946     	 mov r1,r3
 5113 0014 0022     	 movs r2,#0
 5114 0016 FFF7FEFF 	 bl xQueueReceiveFromISR
2955:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
 5115              	 .loc 1 2955 0
 5116 001a FB68     	 ldr r3,[r7,#12]
2956:../Dave/Generated/FREERTOS/queue.c ****     }
 5117              	 .loc 1 2956 0
 5118 001c 1846     	 mov r0,r3
 5119 001e 1037     	 adds r7,r7,#16
 5120              	.LCFI219:
 5121              	 .cfi_def_cfa_offset 8
 5122 0020 BD46     	 mov sp,r7
 5123              	.LCFI220:
 5124              	 .cfi_def_cfa_register 13
 5125              	 
 5126 0022 80BD     	 pop {r7,pc}
 5127              	 .cfi_endproc
 5128              	.LFE179:
 5130              	 .section .text.prvNotifyQueueSetContainer,"ax",%progbits
 5131              	 .align 2
 5132              	 .thumb
 5133              	 .thumb_func
 5135              	prvNotifyQueueSetContainer:
 5136              	.LFB180:
2957:../Dave/Generated/FREERTOS/queue.c **** 
2958:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2959:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2960:../Dave/Generated/FREERTOS/queue.c **** 
2961:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2962:../Dave/Generated/FREERTOS/queue.c **** 
2963:../Dave/Generated/FREERTOS/queue.c ****     static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
2964:../Dave/Generated/FREERTOS/queue.c ****     {
 5137              	 .loc 1 2964 0
 5138              	 .cfi_startproc
 5139              	 
 5140              	 
 5141 0000 80B5     	 push {r7,lr}
 5142              	.LCFI221:
 5143              	 .cfi_def_cfa_offset 8
 5144              	 .cfi_offset 7,-8
 5145              	 .cfi_offset 14,-4
 5146 0002 88B0     	 sub sp,sp,#32
 5147              	.LCFI222:
 5148              	 .cfi_def_cfa_offset 40
 5149 0004 00AF     	 add r7,sp,#0
 5150              	.LCFI223:
 5151              	 .cfi_def_cfa_register 7
 5152 0006 7860     	 str r0,[r7,#4]
2965:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 5153              	 .loc 1 2965 0
 5154 0008 7B68     	 ldr r3,[r7,#4]
 5155 000a 9B6C     	 ldr r3,[r3,#72]
 5156 000c BB61     	 str r3,[r7,#24]
2966:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xReturn = pdFALSE;
 5157              	 .loc 1 2966 0
 5158 000e 0023     	 movs r3,#0
 5159 0010 FB61     	 str r3,[r7,#28]
2967:../Dave/Generated/FREERTOS/queue.c **** 
2968:../Dave/Generated/FREERTOS/queue.c ****         /* This function must be called form a critical section. */
2969:../Dave/Generated/FREERTOS/queue.c **** 
2970:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( pxQueueSetContainer );
 5160              	 .loc 1 2970 0
 5161 0012 BB69     	 ldr r3,[r7,#24]
 5162 0014 002B     	 cmp r3,#0
 5163 0016 09D1     	 bne .L361
 5164              	.LBB235:
 5165              	.LBB236:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 5166              	 .loc 2 197 0 discriminator 1
 5167              	
 5168 0018 4FF0FC03 	 mov r3,#252
 5169 001c 83F31188 	 msr basepri,r3
 5170 0020 BFF36F8F 	 isb 
 5171 0024 BFF34F8F 	 dsb 
 5172              	
 5173              	
 5174              	 .thumb
 5175 0028 3B61     	 str r3,[r7,#16]
 5176              	.L362:
 5177              	.LBE236:
 5178              	.LBE235:
 5179              	 .loc 1 2970 0 discriminator 1
 5180 002a FEE7     	 b .L362
 5181              	.L361:
2971:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 5182              	 .loc 1 2971 0
 5183 002c BB69     	 ldr r3,[r7,#24]
 5184 002e 9A6B     	 ldr r2,[r3,#56]
 5185 0030 BB69     	 ldr r3,[r7,#24]
 5186 0032 DB6B     	 ldr r3,[r3,#60]
 5187 0034 9A42     	 cmp r2,r3
 5188 0036 09D3     	 bcc .L363
 5189              	.LBB237:
 5190              	.LBB238:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 5191              	 .loc 2 197 0 discriminator 1
 5192              	
 5193 0038 4FF0FC03 	 mov r3,#252
 5194 003c 83F31188 	 msr basepri,r3
 5195 0040 BFF36F8F 	 isb 
 5196 0044 BFF34F8F 	 dsb 
 5197              	
 5198              	
 5199              	 .thumb
 5200 0048 FB60     	 str r3,[r7,#12]
 5201              	.L364:
 5202              	.LBE238:
 5203              	.LBE237:
 5204              	 .loc 1 2971 0 discriminator 2
 5205 004a FEE7     	 b .L364
 5206              	.L363:
2972:../Dave/Generated/FREERTOS/queue.c **** 
2973:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 5207              	 .loc 1 2973 0
 5208 004c BB69     	 ldr r3,[r7,#24]
 5209 004e 9A6B     	 ldr r2,[r3,#56]
 5210 0050 BB69     	 ldr r3,[r7,#24]
 5211 0052 DB6B     	 ldr r3,[r3,#60]
 5212 0054 9A42     	 cmp r2,r3
 5213 0056 34D2     	 bcs .L365
 5214              	.LBB239:
2974:../Dave/Generated/FREERTOS/queue.c ****         {
2975:../Dave/Generated/FREERTOS/queue.c ****             const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 5215              	 .loc 1 2975 0
 5216 0058 BB69     	 ldr r3,[r7,#24]
 5217 005a 93F84530 	 ldrb r3,[r3,#69]
 5218 005e FB75     	 strb r3,[r7,#23]
2976:../Dave/Generated/FREERTOS/queue.c **** 
2977:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_SET_SEND( pxQueueSetContainer );
2978:../Dave/Generated/FREERTOS/queue.c **** 
2979:../Dave/Generated/FREERTOS/queue.c ****             /* The data copied is the handle of the queue that contains data. */
2980:../Dave/Generated/FREERTOS/queue.c ****             xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 5219              	 .loc 1 2980 0
 5220 0060 3B1D     	 adds r3,r7,#4
 5221 0062 B869     	 ldr r0,[r7,#24]
 5222 0064 1946     	 mov r1,r3
 5223 0066 0022     	 movs r2,#0
 5224 0068 FFF7FEFF 	 bl prvCopyDataToQueue
 5225 006c F861     	 str r0,[r7,#28]
2981:../Dave/Generated/FREERTOS/queue.c **** 
2982:../Dave/Generated/FREERTOS/queue.c ****             if( cTxLock == queueUNLOCKED )
 5226              	 .loc 1 2982 0
 5227 006e 97F91730 	 ldrsb r3,[r7,#23]
 5228 0072 B3F1FF3F 	 cmp r3,#-1
 5229 0076 0ED1     	 bne .L366
2983:../Dave/Generated/FREERTOS/queue.c ****             {
2984:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALS
 5230              	 .loc 1 2984 0
 5231 0078 BB69     	 ldr r3,[r7,#24]
 5232 007a 5B6A     	 ldr r3,[r3,#36]
 5233 007c 002B     	 cmp r3,#0
 5234 007e 20D0     	 beq .L367
2985:../Dave/Generated/FREERTOS/queue.c ****                 {
2986:../Dave/Generated/FREERTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) 
 5235              	 .loc 1 2986 0
 5236 0080 BB69     	 ldr r3,[r7,#24]
 5237 0082 2433     	 adds r3,r3,#36
 5238 0084 1846     	 mov r0,r3
 5239 0086 FFF7FEFF 	 bl xTaskRemoveFromEventList
 5240 008a 0346     	 mov r3,r0
 5241 008c 002B     	 cmp r3,#0
 5242 008e 18D0     	 beq .L367
2987:../Dave/Generated/FREERTOS/queue.c ****                     {
2988:../Dave/Generated/FREERTOS/queue.c ****                         /* The task waiting has a higher priority. */
2989:../Dave/Generated/FREERTOS/queue.c ****                         xReturn = pdTRUE;
 5243              	 .loc 1 2989 0
 5244 0090 0123     	 movs r3,#1
 5245 0092 FB61     	 str r3,[r7,#28]
 5246 0094 15E0     	 b .L367
 5247              	.L366:
2990:../Dave/Generated/FREERTOS/queue.c ****                     }
2991:../Dave/Generated/FREERTOS/queue.c ****                     else
2992:../Dave/Generated/FREERTOS/queue.c ****                     {
2993:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2994:../Dave/Generated/FREERTOS/queue.c ****                     }
2995:../Dave/Generated/FREERTOS/queue.c ****                 }
2996:../Dave/Generated/FREERTOS/queue.c ****                 else
2997:../Dave/Generated/FREERTOS/queue.c ****                 {
2998:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2999:../Dave/Generated/FREERTOS/queue.c ****                 }
3000:../Dave/Generated/FREERTOS/queue.c ****             }
3001:../Dave/Generated/FREERTOS/queue.c ****             else
3002:../Dave/Generated/FREERTOS/queue.c ****             {
3003:../Dave/Generated/FREERTOS/queue.c ****                 configASSERT( cTxLock != queueINT8_MAX );
 5248              	 .loc 1 3003 0
 5249 0096 97F91730 	 ldrsb r3,[r7,#23]
 5250 009a 7F2B     	 cmp r3,#127
 5251 009c 09D1     	 bne .L368
 5252              	.LBB240:
 5253              	.LBB241:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 5254              	 .loc 2 197 0 discriminator 1
 5255              	
 5256 009e 4FF0FC03 	 mov r3,#252
 5257 00a2 83F31188 	 msr basepri,r3
 5258 00a6 BFF36F8F 	 isb 
 5259 00aa BFF34F8F 	 dsb 
 5260              	
 5261              	
 5262              	 .thumb
 5263 00ae BB60     	 str r3,[r7,#8]
 5264              	.L369:
 5265              	.LBE241:
 5266              	.LBE240:
 5267              	 .loc 1 3003 0 discriminator 5
 5268 00b0 FEE7     	 b .L369
 5269              	.L368:
3004:../Dave/Generated/FREERTOS/queue.c **** 
3005:../Dave/Generated/FREERTOS/queue.c ****                 pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 5270              	 .loc 1 3005 0
 5271 00b2 FB7D     	 ldrb r3,[r7,#23]
 5272 00b4 0133     	 adds r3,r3,#1
 5273 00b6 DBB2     	 uxtb r3,r3
 5274 00b8 DAB2     	 uxtb r2,r3
 5275 00ba BB69     	 ldr r3,[r7,#24]
 5276 00bc 83F84520 	 strb r2,[r3,#69]
 5277              	.LBE239:
 5278 00c0 FFE7     	 b .L365
 5279              	.L367:
 5280              	.L365:
3006:../Dave/Generated/FREERTOS/queue.c ****             }
3007:../Dave/Generated/FREERTOS/queue.c ****         }
3008:../Dave/Generated/FREERTOS/queue.c ****         else
3009:../Dave/Generated/FREERTOS/queue.c ****         {
3010:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
3011:../Dave/Generated/FREERTOS/queue.c ****         }
3012:../Dave/Generated/FREERTOS/queue.c **** 
3013:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
 5281              	 .loc 1 3013 0
 5282 00c2 FB69     	 ldr r3,[r7,#28]
3014:../Dave/Generated/FREERTOS/queue.c ****     }
 5283              	 .loc 1 3014 0
 5284 00c4 1846     	 mov r0,r3
 5285 00c6 2037     	 adds r7,r7,#32
 5286              	.LCFI224:
 5287              	 .cfi_def_cfa_offset 8
 5288 00c8 BD46     	 mov sp,r7
 5289              	.LCFI225:
 5290              	 .cfi_def_cfa_register 13
 5291              	 
 5292 00ca 80BD     	 pop {r7,pc}
 5293              	 .cfi_endproc
 5294              	.LFE180:
 5296              	 .text
 5297              	.Letext0:
 5298              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 5299              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 5300              	 .file 5 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 5301              	 .file 6 "../Dave/Generated/FREERTOS/list.h"
 5302              	 .file 7 "../Dave/Generated/FREERTOS/task.h"
 5303              	 .file 8 "../Dave/Generated/FREERTOS/queue.h"
 5304              	 .file 9 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Libraries/CMSIS/Include/cmsis_gcc.h"
 5305              	 .file 10 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
                            *COM*:00000040 xQueueRegistry
    {standard input}:21     .text.xQueueGenericReset:00000000 $t
    {standard input}:26     .text.xQueueGenericReset:00000000 xQueueGenericReset
    {standard input}:172    .text.xQueueGenericReset:000000cc $d
    {standard input}:177    .text.xQueueGenericCreate:00000000 $t
    {standard input}:182    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
    {standard input}:342    .text.prvInitialiseNewQueue:00000000 prvInitialiseNewQueue
    {standard input}:338    .text.prvInitialiseNewQueue:00000000 $t
    {standard input}:411    .text.prvInitialiseMutex:00000000 $t
    {standard input}:415    .text.prvInitialiseMutex:00000000 prvInitialiseMutex
    {standard input}:969    .text.xQueueGenericSend:00000000 xQueueGenericSend
    {standard input}:469    .text.xQueueCreateMutex:00000000 $t
    {standard input}:474    .text.xQueueCreateMutex:00000000 xQueueCreateMutex
    {standard input}:524    .text.xQueueGetMutexHolder:00000000 $t
    {standard input}:529    .text.xQueueGetMutexHolder:00000000 xQueueGetMutexHolder
    {standard input}:585    .text.xQueueGetMutexHolderFromISR:00000000 $t
    {standard input}:590    .text.xQueueGetMutexHolderFromISR:00000000 xQueueGetMutexHolderFromISR
    {standard input}:665    .text.xQueueGiveMutexRecursive:00000000 $t
    {standard input}:670    .text.xQueueGiveMutexRecursive:00000000 xQueueGiveMutexRecursive
    {standard input}:764    .text.xQueueTakeMutexRecursive:00000000 $t
    {standard input}:769    .text.xQueueTakeMutexRecursive:00000000 xQueueTakeMutexRecursive
    {standard input}:2275   .text.xQueueSemaphoreTake:00000000 xQueueSemaphoreTake
    {standard input}:864    .text.xQueueCreateCountingSemaphore:00000000 $t
    {standard input}:869    .text.xQueueCreateCountingSemaphore:00000000 xQueueCreateCountingSemaphore
    {standard input}:964    .text.xQueueGenericSend:00000000 $t
    {standard input}:3860   .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
    {standard input}:5135   .text.prvNotifyQueueSetContainer:00000000 prvNotifyQueueSetContainer
    {standard input}:4373   .text.prvIsQueueFull:00000000 prvIsQueueFull
    {standard input}:4089   .text.prvUnlockQueue:00000000 prvUnlockQueue
    {standard input}:1370   .text.xQueueGenericSend:00000234 $d
    {standard input}:1375   .text.xQueueGenericSendFromISR:00000000 $t
    {standard input}:1380   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
    {standard input}:1679   .text.xQueueGiveFromISR:00000000 $t
    {standard input}:1684   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
    {standard input}:1950   .text.xQueueReceive:00000000 $t
    {standard input}:1955   .text.xQueueReceive:00000000 xQueueReceive
    {standard input}:4017   .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
    {standard input}:4235   .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
    {standard input}:2265   .text.xQueueReceive:000001bc $d
    {standard input}:2270   .text.xQueueSemaphoreTake:00000000 $t
    {standard input}:3801   .text.prvGetDisinheritPriorityAfterTimeout:00000000 prvGetDisinheritPriorityAfterTimeout
    {standard input}:2638   .text.xQueueSemaphoreTake:00000210 $d
    {standard input}:2643   .text.xQueuePeek:00000000 $t
    {standard input}:2648   .text.xQueuePeek:00000000 xQueuePeek
    {standard input}:2961   .text.xQueuePeek:000001c0 $d
    {standard input}:2966   .text.xQueueReceiveFromISR:00000000 $t
    {standard input}:2971   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
    {standard input}:3195   .text.xQueuePeekFromISR:00000000 $t
    {standard input}:3200   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
    {standard input}:3381   .text.uxQueueMessagesWaiting:00000000 $t
    {standard input}:3386   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
    {standard input}:3450   .text.uxQueueSpacesAvailable:00000000 $t
    {standard input}:3455   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
    {standard input}:3525   .text.uxQueueMessagesWaitingFromISR:00000000 $t
    {standard input}:3530   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
    {standard input}:3597   .text.vQueueDelete:00000000 $t
    {standard input}:3602   .text.vQueueDelete:00000000 vQueueDelete
    {standard input}:4679   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
    {standard input}:3664   .text.uxQueueGetQueueNumber:00000000 $t
    {standard input}:3669   .text.uxQueueGetQueueNumber:00000000 uxQueueGetQueueNumber
    {standard input}:3708   .text.vQueueSetQueueNumber:00000000 $t
    {standard input}:3713   .text.vQueueSetQueueNumber:00000000 vQueueSetQueueNumber
    {standard input}:3753   .text.ucQueueGetQueueType:00000000 $t
    {standard input}:3758   .text.ucQueueGetQueueType:00000000 ucQueueGetQueueType
    {standard input}:3797   .text.prvGetDisinheritPriorityAfterTimeout:00000000 $t
    {standard input}:3856   .text.prvCopyDataToQueue:00000000 $t
    {standard input}:4013   .text.prvCopyDataFromQueue:00000000 $t
    {standard input}:4085   .text.prvUnlockQueue:00000000 $t
    {standard input}:4231   .text.prvIsQueueEmpty:00000000 $t
    {standard input}:4287   .text.xQueueIsQueueEmptyFromISR:00000000 $t
    {standard input}:4292   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
    {standard input}:4369   .text.prvIsQueueFull:00000000 $t
    {standard input}:4427   .text.xQueueIsQueueFullFromISR:00000000 $t
    {standard input}:4432   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
    {standard input}:4511   .text.vQueueAddToRegistry:00000000 $t
    {standard input}:4516   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
    {standard input}:4587   .text.vQueueAddToRegistry:0000004c $d
    {standard input}:4592   .text.pcQueueGetName:00000000 $t
    {standard input}:4597   .text.pcQueueGetName:00000000 pcQueueGetName
    {standard input}:4669   .text.pcQueueGetName:00000048 $d
    {standard input}:4674   .text.vQueueUnregisterQueue:00000000 $t
    {standard input}:4752   .text.vQueueUnregisterQueue:0000004c $d
    {standard input}:4757   .text.vQueueWaitForMessageRestricted:00000000 $t
    {standard input}:4762   .text.vQueueWaitForMessageRestricted:00000000 vQueueWaitForMessageRestricted
    {standard input}:4841   .text.xQueueCreateSet:00000000 $t
    {standard input}:4846   .text.xQueueCreateSet:00000000 xQueueCreateSet
    {standard input}:4886   .text.xQueueAddToSet:00000000 $t
    {standard input}:4891   .text.xQueueAddToSet:00000000 xQueueAddToSet
    {standard input}:4958   .text.xQueueRemoveFromSet:00000000 $t
    {standard input}:4963   .text.xQueueRemoveFromSet:00000000 xQueueRemoveFromSet
    {standard input}:5034   .text.xQueueSelectFromSet:00000000 $t
    {standard input}:5039   .text.xQueueSelectFromSet:00000000 xQueueSelectFromSet
    {standard input}:5083   .text.xQueueSelectFromSetFromISR:00000000 $t
    {standard input}:5088   .text.xQueueSelectFromSetFromISR:00000000 xQueueSelectFromSetFromISR
    {standard input}:5131   .text.prvNotifyQueueSetContainer:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
xTaskRemoveFromEventList
vListInitialise
vPortExitCritical
pvPortMalloc
xTaskGetCurrentTaskHandle
xTaskGetSchedulerState
vTaskInternalSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
vTaskPlaceOnEventListRestricted
