   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "list.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.vListInitialise,"ax",%progbits
  20              	 .align 2
  21              	 .global vListInitialise
  22              	 .thumb
  23              	 .thumb_func
  25              	vListInitialise:
  26              	.LFB138:
  27              	 .file 1 "../Dave/Generated/FREERTOS/list.c"
   1:../Dave/Generated/FREERTOS/list.c **** /*
   2:../Dave/Generated/FREERTOS/list.c ****  * FreeRTOS Kernel V10.4.3
   3:../Dave/Generated/FREERTOS/list.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/list.c ****  *
   5:../Dave/Generated/FREERTOS/list.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/list.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/list.c ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/list.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/list.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/list.c ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/list.c ****  *
  12:../Dave/Generated/FREERTOS/list.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/list.c ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/list.c ****  *
  15:../Dave/Generated/FREERTOS/list.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/list.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/list.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/list.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/list.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/list.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/list.c ****  *
  22:../Dave/Generated/FREERTOS/list.c ****  * https://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/list.c ****  * https://github.com/FreeRTOS
  24:../Dave/Generated/FREERTOS/list.c ****  *
  25:../Dave/Generated/FREERTOS/list.c ****  */
  26:../Dave/Generated/FREERTOS/list.c **** 
  27:../Dave/Generated/FREERTOS/list.c **** 
  28:../Dave/Generated/FREERTOS/list.c **** #include <stdlib.h>
  29:../Dave/Generated/FREERTOS/list.c **** 
  30:../Dave/Generated/FREERTOS/list.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  31:../Dave/Generated/FREERTOS/list.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  32:../Dave/Generated/FREERTOS/list.c ****  * task.h is included from an application file. */
  33:../Dave/Generated/FREERTOS/list.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  34:../Dave/Generated/FREERTOS/list.c **** 
  35:../Dave/Generated/FREERTOS/list.c **** #include "FreeRTOS.h"
  36:../Dave/Generated/FREERTOS/list.c **** #include "list.h"
  37:../Dave/Generated/FREERTOS/list.c **** 
  38:../Dave/Generated/FREERTOS/list.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  39:../Dave/Generated/FREERTOS/list.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be
  40:../Dave/Generated/FREERTOS/list.c ****  * defined for the header files above, but not in this file, in order to
  41:../Dave/Generated/FREERTOS/list.c ****  * generate the correct privileged Vs unprivileged linkage and placement. */
  42:../Dave/Generated/FREERTOS/list.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  43:../Dave/Generated/FREERTOS/list.c **** 
  44:../Dave/Generated/FREERTOS/list.c **** /*-----------------------------------------------------------
  45:../Dave/Generated/FREERTOS/list.c **** * PUBLIC LIST API documented in list.h
  46:../Dave/Generated/FREERTOS/list.c **** *----------------------------------------------------------*/
  47:../Dave/Generated/FREERTOS/list.c **** 
  48:../Dave/Generated/FREERTOS/list.c **** void vListInitialise( List_t * const pxList )
  49:../Dave/Generated/FREERTOS/list.c **** {
  28              	 .loc 1 49 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 83B0     	 sub sp,sp,#12
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 16
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 7860     	 str r0,[r7,#4]
  50:../Dave/Generated/FREERTOS/list.c ****     /* The list structure contains a list item which is used to mark the
  51:../Dave/Generated/FREERTOS/list.c ****      * end of the list.  To initialise the list the list end is inserted
  52:../Dave/Generated/FREERTOS/list.c ****      * as the only list entry. */
  53:../Dave/Generated/FREERTOS/list.c ****     pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini li
  44              	 .loc 1 53 0
  45 0008 7B68     	 ldr r3,[r7,#4]
  46 000a 03F10802 	 add r2,r3,#8
  47 000e 7B68     	 ldr r3,[r7,#4]
  48 0010 5A60     	 str r2,[r3,#4]
  54:../Dave/Generated/FREERTOS/list.c **** 
  55:../Dave/Generated/FREERTOS/list.c ****     /* The list end value is the highest possible value in the list to
  56:../Dave/Generated/FREERTOS/list.c ****      * ensure it remains at the end of the list. */
  57:../Dave/Generated/FREERTOS/list.c ****     pxList->xListEnd.xItemValue = portMAX_DELAY;
  49              	 .loc 1 57 0
  50 0012 7B68     	 ldr r3,[r7,#4]
  51 0014 4FF0FF32 	 mov r2,#-1
  52 0018 9A60     	 str r2,[r3,#8]
  58:../Dave/Generated/FREERTOS/list.c **** 
  59:../Dave/Generated/FREERTOS/list.c ****     /* The list end next and previous pointers point to itself so we know
  60:../Dave/Generated/FREERTOS/list.c ****      * when the list is empty. */
  61:../Dave/Generated/FREERTOS/list.c ****     pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087
  53              	 .loc 1 61 0
  54 001a 7B68     	 ldr r3,[r7,#4]
  55 001c 03F10802 	 add r2,r3,#8
  56 0020 7B68     	 ldr r3,[r7,#4]
  57 0022 DA60     	 str r2,[r3,#12]
  62:../Dave/Generated/FREERTOS/list.c ****     pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087
  58              	 .loc 1 62 0
  59 0024 7B68     	 ldr r3,[r7,#4]
  60 0026 03F10802 	 add r2,r3,#8
  61 002a 7B68     	 ldr r3,[r7,#4]
  62 002c 1A61     	 str r2,[r3,#16]
  63:../Dave/Generated/FREERTOS/list.c **** 
  64:../Dave/Generated/FREERTOS/list.c ****     pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  63              	 .loc 1 64 0
  64 002e 7B68     	 ldr r3,[r7,#4]
  65 0030 0022     	 movs r2,#0
  66 0032 1A60     	 str r2,[r3]
  65:../Dave/Generated/FREERTOS/list.c **** 
  66:../Dave/Generated/FREERTOS/list.c ****     /* Write known values into the list if
  67:../Dave/Generated/FREERTOS/list.c ****      * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  68:../Dave/Generated/FREERTOS/list.c ****     listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
  69:../Dave/Generated/FREERTOS/list.c ****     listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
  70:../Dave/Generated/FREERTOS/list.c **** }
  67              	 .loc 1 70 0
  68 0034 0C37     	 adds r7,r7,#12
  69              	.LCFI3:
  70              	 .cfi_def_cfa_offset 4
  71 0036 BD46     	 mov sp,r7
  72              	.LCFI4:
  73              	 .cfi_def_cfa_register 13
  74              	 
  75 0038 5DF8047B 	 ldr r7,[sp],#4
  76              	.LCFI5:
  77              	 .cfi_restore 7
  78              	 .cfi_def_cfa_offset 0
  79 003c 7047     	 bx lr
  80              	 .cfi_endproc
  81              	.LFE138:
  83 003e 00BF     	 .section .text.vListInitialiseItem,"ax",%progbits
  84              	 .align 2
  85              	 .global vListInitialiseItem
  86              	 .thumb
  87              	 .thumb_func
  89              	vListInitialiseItem:
  90              	.LFB139:
  71:../Dave/Generated/FREERTOS/list.c **** /*-----------------------------------------------------------*/
  72:../Dave/Generated/FREERTOS/list.c **** 
  73:../Dave/Generated/FREERTOS/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
  74:../Dave/Generated/FREERTOS/list.c **** {
  91              	 .loc 1 74 0
  92              	 .cfi_startproc
  93              	 
  94              	 
  95              	 
  96 0000 80B4     	 push {r7}
  97              	.LCFI6:
  98              	 .cfi_def_cfa_offset 4
  99              	 .cfi_offset 7,-4
 100 0002 83B0     	 sub sp,sp,#12
 101              	.LCFI7:
 102              	 .cfi_def_cfa_offset 16
 103 0004 00AF     	 add r7,sp,#0
 104              	.LCFI8:
 105              	 .cfi_def_cfa_register 7
 106 0006 7860     	 str r0,[r7,#4]
  75:../Dave/Generated/FREERTOS/list.c ****     /* Make sure the list item is not recorded as being on a list. */
  76:../Dave/Generated/FREERTOS/list.c ****     pxItem->pxContainer = NULL;
 107              	 .loc 1 76 0
 108 0008 7B68     	 ldr r3,[r7,#4]
 109 000a 0022     	 movs r2,#0
 110 000c 1A61     	 str r2,[r3,#16]
  77:../Dave/Generated/FREERTOS/list.c **** 
  78:../Dave/Generated/FREERTOS/list.c ****     /* Write known values into the list item if
  79:../Dave/Generated/FREERTOS/list.c ****      * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  80:../Dave/Generated/FREERTOS/list.c ****     listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  81:../Dave/Generated/FREERTOS/list.c ****     listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  82:../Dave/Generated/FREERTOS/list.c **** }
 111              	 .loc 1 82 0
 112 000e 0C37     	 adds r7,r7,#12
 113              	.LCFI9:
 114              	 .cfi_def_cfa_offset 4
 115 0010 BD46     	 mov sp,r7
 116              	.LCFI10:
 117              	 .cfi_def_cfa_register 13
 118              	 
 119 0012 5DF8047B 	 ldr r7,[sp],#4
 120              	.LCFI11:
 121              	 .cfi_restore 7
 122              	 .cfi_def_cfa_offset 0
 123 0016 7047     	 bx lr
 124              	 .cfi_endproc
 125              	.LFE139:
 127              	 .section .text.vListInsertEnd,"ax",%progbits
 128              	 .align 2
 129              	 .global vListInsertEnd
 130              	 .thumb
 131              	 .thumb_func
 133              	vListInsertEnd:
 134              	.LFB140:
  83:../Dave/Generated/FREERTOS/list.c **** /*-----------------------------------------------------------*/
  84:../Dave/Generated/FREERTOS/list.c **** 
  85:../Dave/Generated/FREERTOS/list.c **** void vListInsertEnd( List_t * const pxList,
  86:../Dave/Generated/FREERTOS/list.c ****                      ListItem_t * const pxNewListItem )
  87:../Dave/Generated/FREERTOS/list.c **** {
 135              	 .loc 1 87 0
 136              	 .cfi_startproc
 137              	 
 138              	 
 139              	 
 140 0000 80B4     	 push {r7}
 141              	.LCFI12:
 142              	 .cfi_def_cfa_offset 4
 143              	 .cfi_offset 7,-4
 144 0002 85B0     	 sub sp,sp,#20
 145              	.LCFI13:
 146              	 .cfi_def_cfa_offset 24
 147 0004 00AF     	 add r7,sp,#0
 148              	.LCFI14:
 149              	 .cfi_def_cfa_register 7
 150 0006 7860     	 str r0,[r7,#4]
 151 0008 3960     	 str r1,[r7]
  88:../Dave/Generated/FREERTOS/list.c ****     ListItem_t * const pxIndex = pxList->pxIndex;
 152              	 .loc 1 88 0
 153 000a 7B68     	 ldr r3,[r7,#4]
 154 000c 5B68     	 ldr r3,[r3,#4]
 155 000e FB60     	 str r3,[r7,#12]
  89:../Dave/Generated/FREERTOS/list.c **** 
  90:../Dave/Generated/FREERTOS/list.c ****     /* Only effective when configASSERT() is also defined, these tests may catch
  91:../Dave/Generated/FREERTOS/list.c ****      * the list data structures being overwritten in memory.  They will not catch
  92:../Dave/Generated/FREERTOS/list.c ****      * data errors caused by incorrect configuration or use of FreeRTOS. */
  93:../Dave/Generated/FREERTOS/list.c ****     listTEST_LIST_INTEGRITY( pxList );
  94:../Dave/Generated/FREERTOS/list.c ****     listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
  95:../Dave/Generated/FREERTOS/list.c **** 
  96:../Dave/Generated/FREERTOS/list.c ****     /* Insert a new list item into pxList, but rather than sort the list,
  97:../Dave/Generated/FREERTOS/list.c ****      * makes the new list item the last item to be removed by a call to
  98:../Dave/Generated/FREERTOS/list.c ****      * listGET_OWNER_OF_NEXT_ENTRY(). */
  99:../Dave/Generated/FREERTOS/list.c ****     pxNewListItem->pxNext = pxIndex;
 156              	 .loc 1 99 0
 157 0010 3B68     	 ldr r3,[r7]
 158 0012 FA68     	 ldr r2,[r7,#12]
 159 0014 5A60     	 str r2,[r3,#4]
 100:../Dave/Generated/FREERTOS/list.c ****     pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 160              	 .loc 1 100 0
 161 0016 FB68     	 ldr r3,[r7,#12]
 162 0018 9A68     	 ldr r2,[r3,#8]
 163 001a 3B68     	 ldr r3,[r7]
 164 001c 9A60     	 str r2,[r3,#8]
 101:../Dave/Generated/FREERTOS/list.c **** 
 102:../Dave/Generated/FREERTOS/list.c ****     /* Only used during decision coverage testing. */
 103:../Dave/Generated/FREERTOS/list.c ****     mtCOVERAGE_TEST_DELAY();
 104:../Dave/Generated/FREERTOS/list.c **** 
 105:../Dave/Generated/FREERTOS/list.c ****     pxIndex->pxPrevious->pxNext = pxNewListItem;
 165              	 .loc 1 105 0
 166 001e FB68     	 ldr r3,[r7,#12]
 167 0020 9B68     	 ldr r3,[r3,#8]
 168 0022 3A68     	 ldr r2,[r7]
 169 0024 5A60     	 str r2,[r3,#4]
 106:../Dave/Generated/FREERTOS/list.c ****     pxIndex->pxPrevious = pxNewListItem;
 170              	 .loc 1 106 0
 171 0026 FB68     	 ldr r3,[r7,#12]
 172 0028 3A68     	 ldr r2,[r7]
 173 002a 9A60     	 str r2,[r3,#8]
 107:../Dave/Generated/FREERTOS/list.c **** 
 108:../Dave/Generated/FREERTOS/list.c ****     /* Remember which list the item is in. */
 109:../Dave/Generated/FREERTOS/list.c ****     pxNewListItem->pxContainer = pxList;
 174              	 .loc 1 109 0
 175 002c 3B68     	 ldr r3,[r7]
 176 002e 7A68     	 ldr r2,[r7,#4]
 177 0030 1A61     	 str r2,[r3,#16]
 110:../Dave/Generated/FREERTOS/list.c **** 
 111:../Dave/Generated/FREERTOS/list.c ****     ( pxList->uxNumberOfItems )++;
 178              	 .loc 1 111 0
 179 0032 7B68     	 ldr r3,[r7,#4]
 180 0034 1B68     	 ldr r3,[r3]
 181 0036 5A1C     	 adds r2,r3,#1
 182 0038 7B68     	 ldr r3,[r7,#4]
 183 003a 1A60     	 str r2,[r3]
 112:../Dave/Generated/FREERTOS/list.c **** }
 184              	 .loc 1 112 0
 185 003c 1437     	 adds r7,r7,#20
 186              	.LCFI15:
 187              	 .cfi_def_cfa_offset 4
 188 003e BD46     	 mov sp,r7
 189              	.LCFI16:
 190              	 .cfi_def_cfa_register 13
 191              	 
 192 0040 5DF8047B 	 ldr r7,[sp],#4
 193              	.LCFI17:
 194              	 .cfi_restore 7
 195              	 .cfi_def_cfa_offset 0
 196 0044 7047     	 bx lr
 197              	 .cfi_endproc
 198              	.LFE140:
 200 0046 00BF     	 .section .text.vListInsert,"ax",%progbits
 201              	 .align 2
 202              	 .global vListInsert
 203              	 .thumb
 204              	 .thumb_func
 206              	vListInsert:
 207              	.LFB141:
 113:../Dave/Generated/FREERTOS/list.c **** /*-----------------------------------------------------------*/
 114:../Dave/Generated/FREERTOS/list.c **** 
 115:../Dave/Generated/FREERTOS/list.c **** void vListInsert( List_t * const pxList,
 116:../Dave/Generated/FREERTOS/list.c ****                   ListItem_t * const pxNewListItem )
 117:../Dave/Generated/FREERTOS/list.c **** {
 208              	 .loc 1 117 0
 209              	 .cfi_startproc
 210              	 
 211              	 
 212              	 
 213 0000 80B4     	 push {r7}
 214              	.LCFI18:
 215              	 .cfi_def_cfa_offset 4
 216              	 .cfi_offset 7,-4
 217 0002 85B0     	 sub sp,sp,#20
 218              	.LCFI19:
 219              	 .cfi_def_cfa_offset 24
 220 0004 00AF     	 add r7,sp,#0
 221              	.LCFI20:
 222              	 .cfi_def_cfa_register 7
 223 0006 7860     	 str r0,[r7,#4]
 224 0008 3960     	 str r1,[r7]
 118:../Dave/Generated/FREERTOS/list.c ****     ListItem_t * pxIterator;
 119:../Dave/Generated/FREERTOS/list.c ****     const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 225              	 .loc 1 119 0
 226 000a 3B68     	 ldr r3,[r7]
 227 000c 1B68     	 ldr r3,[r3]
 228 000e BB60     	 str r3,[r7,#8]
 120:../Dave/Generated/FREERTOS/list.c **** 
 121:../Dave/Generated/FREERTOS/list.c ****     /* Only effective when configASSERT() is also defined, these tests may catch
 122:../Dave/Generated/FREERTOS/list.c ****      * the list data structures being overwritten in memory.  They will not catch
 123:../Dave/Generated/FREERTOS/list.c ****      * data errors caused by incorrect configuration or use of FreeRTOS. */
 124:../Dave/Generated/FREERTOS/list.c ****     listTEST_LIST_INTEGRITY( pxList );
 125:../Dave/Generated/FREERTOS/list.c ****     listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 126:../Dave/Generated/FREERTOS/list.c **** 
 127:../Dave/Generated/FREERTOS/list.c ****     /* Insert the new list item into the list, sorted in xItemValue order.
 128:../Dave/Generated/FREERTOS/list.c ****      *
 129:../Dave/Generated/FREERTOS/list.c ****      * If the list already contains a list item with the same item value then the
 130:../Dave/Generated/FREERTOS/list.c ****      * new list item should be placed after it.  This ensures that TCBs which are
 131:../Dave/Generated/FREERTOS/list.c ****      * stored in ready lists (all of which have the same xItemValue value) get a
 132:../Dave/Generated/FREERTOS/list.c ****      * share of the CPU.  However, if the xItemValue is the same as the back marker
 133:../Dave/Generated/FREERTOS/list.c ****      * the iteration loop below will not end.  Therefore the value is checked
 134:../Dave/Generated/FREERTOS/list.c ****      * first, and the algorithm slightly modified if necessary. */
 135:../Dave/Generated/FREERTOS/list.c ****     if( xValueOfInsertion == portMAX_DELAY )
 229              	 .loc 1 135 0
 230 0010 BB68     	 ldr r3,[r7,#8]
 231 0012 B3F1FF3F 	 cmp r3,#-1
 232 0016 03D1     	 bne .L5
 136:../Dave/Generated/FREERTOS/list.c ****     {
 137:../Dave/Generated/FREERTOS/list.c ****         pxIterator = pxList->xListEnd.pxPrevious;
 233              	 .loc 1 137 0
 234 0018 7B68     	 ldr r3,[r7,#4]
 235 001a 1B69     	 ldr r3,[r3,#16]
 236 001c FB60     	 str r3,[r7,#12]
 237 001e 0CE0     	 b .L6
 238              	.L5:
 138:../Dave/Generated/FREERTOS/list.c ****     }
 139:../Dave/Generated/FREERTOS/list.c ****     else
 140:../Dave/Generated/FREERTOS/list.c ****     {
 141:../Dave/Generated/FREERTOS/list.c ****         /* *** NOTE ***********************************************************
 142:../Dave/Generated/FREERTOS/list.c ****         *  If you find your application is crashing here then likely causes are
 143:../Dave/Generated/FREERTOS/list.c ****         *  listed below.  In addition see https://www.FreeRTOS.org/FAQHelp.html for
 144:../Dave/Generated/FREERTOS/list.c ****         *  more tips, and ensure configASSERT() is defined!
 145:../Dave/Generated/FREERTOS/list.c ****         *  https://www.FreeRTOS.org/a00110.html#configASSERT
 146:../Dave/Generated/FREERTOS/list.c ****         *
 147:../Dave/Generated/FREERTOS/list.c ****         *   1) Stack overflow -
 148:../Dave/Generated/FREERTOS/list.c ****         *      see https://www.FreeRTOS.org/Stacks-and-stack-overflow-checking.html
 149:../Dave/Generated/FREERTOS/list.c ****         *   2) Incorrect interrupt priority assignment, especially on Cortex-M
 150:../Dave/Generated/FREERTOS/list.c ****         *      parts where numerically high priority values denote low actual
 151:../Dave/Generated/FREERTOS/list.c ****         *      interrupt priorities, which can seem counter intuitive.  See
 152:../Dave/Generated/FREERTOS/list.c ****         *      https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html and the definition
 153:../Dave/Generated/FREERTOS/list.c ****         *      of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 154:../Dave/Generated/FREERTOS/list.c ****         *      https://www.FreeRTOS.org/a00110.html
 155:../Dave/Generated/FREERTOS/list.c ****         *   3) Calling an API function from within a critical section or when
 156:../Dave/Generated/FREERTOS/list.c ****         *      the scheduler is suspended, or calling an API function that does
 157:../Dave/Generated/FREERTOS/list.c ****         *      not end in "FromISR" from an interrupt.
 158:../Dave/Generated/FREERTOS/list.c ****         *   4) Using a queue or semaphore before it has been initialised or
 159:../Dave/Generated/FREERTOS/list.c ****         *      before the scheduler has been started (are interrupts firing
 160:../Dave/Generated/FREERTOS/list.c ****         *      before vTaskStartScheduler() has been called?).
 161:../Dave/Generated/FREERTOS/list.c ****         **********************************************************************/
 162:../Dave/Generated/FREERTOS/list.c **** 
 163:../Dave/Generated/FREERTOS/list.c ****         for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <=
 239              	 .loc 1 163 0
 240 0020 7B68     	 ldr r3,[r7,#4]
 241 0022 0833     	 adds r3,r3,#8
 242 0024 FB60     	 str r3,[r7,#12]
 243 0026 02E0     	 b .L7
 244              	.L8:
 245              	 .loc 1 163 0 is_stmt 0 discriminator 3
 246 0028 FB68     	 ldr r3,[r7,#12]
 247 002a 5B68     	 ldr r3,[r3,#4]
 248 002c FB60     	 str r3,[r7,#12]
 249              	.L7:
 250              	 .loc 1 163 0 discriminator 1
 251 002e FB68     	 ldr r3,[r7,#12]
 252 0030 5B68     	 ldr r3,[r3,#4]
 253 0032 1A68     	 ldr r2,[r3]
 254 0034 BB68     	 ldr r3,[r7,#8]
 255 0036 9A42     	 cmp r2,r3
 256 0038 F6D9     	 bls .L8
 257              	.L6:
 164:../Dave/Generated/FREERTOS/list.c ****         {
 165:../Dave/Generated/FREERTOS/list.c ****             /* There is nothing to do here, just iterating to the wanted
 166:../Dave/Generated/FREERTOS/list.c ****              * insertion position. */
 167:../Dave/Generated/FREERTOS/list.c ****         }
 168:../Dave/Generated/FREERTOS/list.c ****     }
 169:../Dave/Generated/FREERTOS/list.c **** 
 170:../Dave/Generated/FREERTOS/list.c ****     pxNewListItem->pxNext = pxIterator->pxNext;
 258              	 .loc 1 170 0 is_stmt 1
 259 003a FB68     	 ldr r3,[r7,#12]
 260 003c 5A68     	 ldr r2,[r3,#4]
 261 003e 3B68     	 ldr r3,[r7]
 262 0040 5A60     	 str r2,[r3,#4]
 171:../Dave/Generated/FREERTOS/list.c ****     pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 263              	 .loc 1 171 0
 264 0042 3B68     	 ldr r3,[r7]
 265 0044 5B68     	 ldr r3,[r3,#4]
 266 0046 3A68     	 ldr r2,[r7]
 267 0048 9A60     	 str r2,[r3,#8]
 172:../Dave/Generated/FREERTOS/list.c ****     pxNewListItem->pxPrevious = pxIterator;
 268              	 .loc 1 172 0
 269 004a 3B68     	 ldr r3,[r7]
 270 004c FA68     	 ldr r2,[r7,#12]
 271 004e 9A60     	 str r2,[r3,#8]
 173:../Dave/Generated/FREERTOS/list.c ****     pxIterator->pxNext = pxNewListItem;
 272              	 .loc 1 173 0
 273 0050 FB68     	 ldr r3,[r7,#12]
 274 0052 3A68     	 ldr r2,[r7]
 275 0054 5A60     	 str r2,[r3,#4]
 174:../Dave/Generated/FREERTOS/list.c **** 
 175:../Dave/Generated/FREERTOS/list.c ****     /* Remember which list the item is in.  This allows fast removal of the
 176:../Dave/Generated/FREERTOS/list.c ****      * item later. */
 177:../Dave/Generated/FREERTOS/list.c ****     pxNewListItem->pxContainer = pxList;
 276              	 .loc 1 177 0
 277 0056 3B68     	 ldr r3,[r7]
 278 0058 7A68     	 ldr r2,[r7,#4]
 279 005a 1A61     	 str r2,[r3,#16]
 178:../Dave/Generated/FREERTOS/list.c **** 
 179:../Dave/Generated/FREERTOS/list.c ****     ( pxList->uxNumberOfItems )++;
 280              	 .loc 1 179 0
 281 005c 7B68     	 ldr r3,[r7,#4]
 282 005e 1B68     	 ldr r3,[r3]
 283 0060 5A1C     	 adds r2,r3,#1
 284 0062 7B68     	 ldr r3,[r7,#4]
 285 0064 1A60     	 str r2,[r3]
 180:../Dave/Generated/FREERTOS/list.c **** }
 286              	 .loc 1 180 0
 287 0066 1437     	 adds r7,r7,#20
 288              	.LCFI21:
 289              	 .cfi_def_cfa_offset 4
 290 0068 BD46     	 mov sp,r7
 291              	.LCFI22:
 292              	 .cfi_def_cfa_register 13
 293              	 
 294 006a 5DF8047B 	 ldr r7,[sp],#4
 295              	.LCFI23:
 296              	 .cfi_restore 7
 297              	 .cfi_def_cfa_offset 0
 298 006e 7047     	 bx lr
 299              	 .cfi_endproc
 300              	.LFE141:
 302              	 .section .text.uxListRemove,"ax",%progbits
 303              	 .align 2
 304              	 .global uxListRemove
 305              	 .thumb
 306              	 .thumb_func
 308              	uxListRemove:
 309              	.LFB142:
 181:../Dave/Generated/FREERTOS/list.c **** /*-----------------------------------------------------------*/
 182:../Dave/Generated/FREERTOS/list.c **** 
 183:../Dave/Generated/FREERTOS/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 184:../Dave/Generated/FREERTOS/list.c **** {
 310              	 .loc 1 184 0
 311              	 .cfi_startproc
 312              	 
 313              	 
 314              	 
 315 0000 80B4     	 push {r7}
 316              	.LCFI24:
 317              	 .cfi_def_cfa_offset 4
 318              	 .cfi_offset 7,-4
 319 0002 85B0     	 sub sp,sp,#20
 320              	.LCFI25:
 321              	 .cfi_def_cfa_offset 24
 322 0004 00AF     	 add r7,sp,#0
 323              	.LCFI26:
 324              	 .cfi_def_cfa_register 7
 325 0006 7860     	 str r0,[r7,#4]
 185:../Dave/Generated/FREERTOS/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 186:../Dave/Generated/FREERTOS/list.c ****  * item. */
 187:../Dave/Generated/FREERTOS/list.c ****     List_t * const pxList = pxItemToRemove->pxContainer;
 326              	 .loc 1 187 0
 327 0008 7B68     	 ldr r3,[r7,#4]
 328 000a 1B69     	 ldr r3,[r3,#16]
 329 000c FB60     	 str r3,[r7,#12]
 188:../Dave/Generated/FREERTOS/list.c **** 
 189:../Dave/Generated/FREERTOS/list.c ****     pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 330              	 .loc 1 189 0
 331 000e 7B68     	 ldr r3,[r7,#4]
 332 0010 5B68     	 ldr r3,[r3,#4]
 333 0012 7A68     	 ldr r2,[r7,#4]
 334 0014 9268     	 ldr r2,[r2,#8]
 335 0016 9A60     	 str r2,[r3,#8]
 190:../Dave/Generated/FREERTOS/list.c ****     pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 336              	 .loc 1 190 0
 337 0018 7B68     	 ldr r3,[r7,#4]
 338 001a 9B68     	 ldr r3,[r3,#8]
 339 001c 7A68     	 ldr r2,[r7,#4]
 340 001e 5268     	 ldr r2,[r2,#4]
 341 0020 5A60     	 str r2,[r3,#4]
 191:../Dave/Generated/FREERTOS/list.c **** 
 192:../Dave/Generated/FREERTOS/list.c ****     /* Only used during decision coverage testing. */
 193:../Dave/Generated/FREERTOS/list.c ****     mtCOVERAGE_TEST_DELAY();
 194:../Dave/Generated/FREERTOS/list.c **** 
 195:../Dave/Generated/FREERTOS/list.c ****     /* Make sure the index is left pointing to a valid item. */
 196:../Dave/Generated/FREERTOS/list.c ****     if( pxList->pxIndex == pxItemToRemove )
 342              	 .loc 1 196 0
 343 0022 FB68     	 ldr r3,[r7,#12]
 344 0024 5A68     	 ldr r2,[r3,#4]
 345 0026 7B68     	 ldr r3,[r7,#4]
 346 0028 9A42     	 cmp r2,r3
 347 002a 03D1     	 bne .L10
 197:../Dave/Generated/FREERTOS/list.c ****     {
 198:../Dave/Generated/FREERTOS/list.c ****         pxList->pxIndex = pxItemToRemove->pxPrevious;
 348              	 .loc 1 198 0
 349 002c 7B68     	 ldr r3,[r7,#4]
 350 002e 9A68     	 ldr r2,[r3,#8]
 351 0030 FB68     	 ldr r3,[r7,#12]
 352 0032 5A60     	 str r2,[r3,#4]
 353              	.L10:
 199:../Dave/Generated/FREERTOS/list.c ****     }
 200:../Dave/Generated/FREERTOS/list.c ****     else
 201:../Dave/Generated/FREERTOS/list.c ****     {
 202:../Dave/Generated/FREERTOS/list.c ****         mtCOVERAGE_TEST_MARKER();
 203:../Dave/Generated/FREERTOS/list.c ****     }
 204:../Dave/Generated/FREERTOS/list.c **** 
 205:../Dave/Generated/FREERTOS/list.c ****     pxItemToRemove->pxContainer = NULL;
 354              	 .loc 1 205 0
 355 0034 7B68     	 ldr r3,[r7,#4]
 356 0036 0022     	 movs r2,#0
 357 0038 1A61     	 str r2,[r3,#16]
 206:../Dave/Generated/FREERTOS/list.c ****     ( pxList->uxNumberOfItems )--;
 358              	 .loc 1 206 0
 359 003a FB68     	 ldr r3,[r7,#12]
 360 003c 1B68     	 ldr r3,[r3]
 361 003e 5A1E     	 subs r2,r3,#1
 362 0040 FB68     	 ldr r3,[r7,#12]
 363 0042 1A60     	 str r2,[r3]
 207:../Dave/Generated/FREERTOS/list.c **** 
 208:../Dave/Generated/FREERTOS/list.c ****     return pxList->uxNumberOfItems;
 364              	 .loc 1 208 0
 365 0044 FB68     	 ldr r3,[r7,#12]
 366 0046 1B68     	 ldr r3,[r3]
 209:../Dave/Generated/FREERTOS/list.c **** }
 367              	 .loc 1 209 0
 368 0048 1846     	 mov r0,r3
 369 004a 1437     	 adds r7,r7,#20
 370              	.LCFI27:
 371              	 .cfi_def_cfa_offset 4
 372 004c BD46     	 mov sp,r7
 373              	.LCFI28:
 374              	 .cfi_def_cfa_register 13
 375              	 
 376 004e 5DF8047B 	 ldr r7,[sp],#4
 377              	.LCFI29:
 378              	 .cfi_restore 7
 379              	 .cfi_def_cfa_offset 0
 380 0052 7047     	 bx lr
 381              	 .cfi_endproc
 382              	.LFE142:
 384              	 .text
 385              	.Letext0:
 386              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 387              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 388              	 .file 4 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC/portmacro.h"
 389              	 .file 5 "../Dave/Generated/FREERTOS/list.h"
 390              	 .file 6 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Libraries/CMSIS/Include/cmsis_gcc.h"
 391              	 .file 7 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 list.c
    {standard input}:20     .text.vListInitialise:00000000 $t
    {standard input}:25     .text.vListInitialise:00000000 vListInitialise
    {standard input}:84     .text.vListInitialiseItem:00000000 $t
    {standard input}:89     .text.vListInitialiseItem:00000000 vListInitialiseItem
    {standard input}:128    .text.vListInsertEnd:00000000 $t
    {standard input}:133    .text.vListInsertEnd:00000000 vListInsertEnd
    {standard input}:201    .text.vListInsert:00000000 $t
    {standard input}:206    .text.vListInsert:00000000 vListInsert
    {standard input}:303    .text.uxListRemove:00000000 $t
    {standard input}:308    .text.uxListRemove:00000000 uxListRemove
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
