   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "tasks.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .global pxCurrentTCB
  20              	 .section .bss.pxCurrentTCB,"aw",%nobits
  21              	 .align 2
  24              	pxCurrentTCB:
  25 0000 00000000 	 .space 4
  26              	 .section .bss.pxReadyTasksLists,"aw",%nobits
  27              	 .align 2
  30              	pxReadyTasksLists:
  31 0000 00000000 	 .space 100
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              	 .section .bss.xDelayedTaskList1,"aw",%nobits
  33              	 .align 2
  36              	xDelayedTaskList1:
  37 0000 00000000 	 .space 20
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              	 .section .bss.xDelayedTaskList2,"aw",%nobits
  39              	 .align 2
  42              	xDelayedTaskList2:
  43 0000 00000000 	 .space 20
  43      00000000 
  43      00000000 
  43      00000000 
  43      00000000 
  44              	 .section .bss.pxDelayedTaskList,"aw",%nobits
  45              	 .align 2
  48              	pxDelayedTaskList:
  49 0000 00000000 	 .space 4
  50              	 .section .bss.pxOverflowDelayedTaskList,"aw",%nobits
  51              	 .align 2
  54              	pxOverflowDelayedTaskList:
  55 0000 00000000 	 .space 4
  56              	 .section .bss.xPendingReadyList,"aw",%nobits
  57              	 .align 2
  60              	xPendingReadyList:
  61 0000 00000000 	 .space 20
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
  62              	 .section .bss.xTasksWaitingTermination,"aw",%nobits
  63              	 .align 2
  66              	xTasksWaitingTermination:
  67 0000 00000000 	 .space 20
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              	 .section .bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  69              	 .align 2
  72              	uxDeletedTasksWaitingCleanUp:
  73 0000 00000000 	 .space 4
  74              	 .section .bss.xSuspendedTaskList,"aw",%nobits
  75              	 .align 2
  78              	xSuspendedTaskList:
  79 0000 00000000 	 .space 20
  79      00000000 
  79      00000000 
  79      00000000 
  79      00000000 
  80              	 .section .bss.uxCurrentNumberOfTasks,"aw",%nobits
  81              	 .align 2
  84              	uxCurrentNumberOfTasks:
  85 0000 00000000 	 .space 4
  86              	 .section .bss.xTickCount,"aw",%nobits
  87              	 .align 2
  90              	xTickCount:
  91 0000 00000000 	 .space 4
  92              	 .section .bss.uxTopReadyPriority,"aw",%nobits
  93              	 .align 2
  96              	uxTopReadyPriority:
  97 0000 00000000 	 .space 4
  98              	 .section .bss.xSchedulerRunning,"aw",%nobits
  99              	 .align 2
 102              	xSchedulerRunning:
 103 0000 00000000 	 .space 4
 104              	 .section .bss.xPendedTicks,"aw",%nobits
 105              	 .align 2
 108              	xPendedTicks:
 109 0000 00000000 	 .space 4
 110              	 .section .bss.xYieldPending,"aw",%nobits
 111              	 .align 2
 114              	xYieldPending:
 115 0000 00000000 	 .space 4
 116              	 .section .bss.xNumOfOverflows,"aw",%nobits
 117              	 .align 2
 120              	xNumOfOverflows:
 121 0000 00000000 	 .space 4
 122              	 .section .bss.uxTaskNumber,"aw",%nobits
 123              	 .align 2
 126              	uxTaskNumber:
 127 0000 00000000 	 .space 4
 128              	 .section .bss.xNextTaskUnblockTime,"aw",%nobits
 129              	 .align 2
 132              	xNextTaskUnblockTime:
 133 0000 00000000 	 .space 4
 134              	 .section .bss.xIdleTaskHandle,"aw",%nobits
 135              	 .align 2
 138              	xIdleTaskHandle:
 139 0000 00000000 	 .space 4
 140              	 .global uxTopUsedPriority
 141              	 .section .data.uxTopUsedPriority,"aw",%progbits
 142              	 .align 2
 145              	uxTopUsedPriority:
 146 0000 04000000 	 .word 4
 147              	 .section .bss.uxSchedulerSuspended,"aw",%nobits
 148              	 .align 2
 151              	uxSchedulerSuspended:
 152 0000 00000000 	 .space 4
 153              	 .section .text.xTaskCreate,"ax",%progbits
 154              	 .align 2
 155              	 .global xTaskCreate
 156              	 .thumb
 157              	 .thumb_func
 159              	xTaskCreate:
 160              	.LFB138:
 161              	 .file 1 "../Dave/Generated/FREERTOS/tasks.c"
   1:../Dave/Generated/FREERTOS/tasks.c **** /*
   2:../Dave/Generated/FREERTOS/tasks.c ****  * FreeRTOS Kernel V10.4.3
   3:../Dave/Generated/FREERTOS/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/tasks.c ****  *
   5:../Dave/Generated/FREERTOS/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/tasks.c ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/tasks.c ****  *
  12:../Dave/Generated/FREERTOS/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/tasks.c ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/tasks.c ****  *
  15:../Dave/Generated/FREERTOS/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/tasks.c ****  *
  22:../Dave/Generated/FREERTOS/tasks.c ****  * https://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/tasks.c ****  * https://github.com/FreeRTOS
  24:../Dave/Generated/FREERTOS/tasks.c ****  *
  25:../Dave/Generated/FREERTOS/tasks.c ****  */
  26:../Dave/Generated/FREERTOS/tasks.c **** 
  27:../Dave/Generated/FREERTOS/tasks.c **** /* Standard includes. */
  28:../Dave/Generated/FREERTOS/tasks.c **** #include <stdlib.h>
  29:../Dave/Generated/FREERTOS/tasks.c **** #include <string.h>
  30:../Dave/Generated/FREERTOS/tasks.c **** 
  31:../Dave/Generated/FREERTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:../Dave/Generated/FREERTOS/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  33:../Dave/Generated/FREERTOS/tasks.c ****  * task.h is included from an application file. */
  34:../Dave/Generated/FREERTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:../Dave/Generated/FREERTOS/tasks.c **** 
  36:../Dave/Generated/FREERTOS/tasks.c **** /* FreeRTOS includes. */
  37:../Dave/Generated/FREERTOS/tasks.c **** #include "FreeRTOS.h"
  38:../Dave/Generated/FREERTOS/tasks.c **** #include "task.h"
  39:../Dave/Generated/FREERTOS/tasks.c **** #include "timers.h"
  40:../Dave/Generated/FREERTOS/tasks.c **** #include "stack_macros.h"
  41:../Dave/Generated/FREERTOS/tasks.c **** 
  42:../Dave/Generated/FREERTOS/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  43:../Dave/Generated/FREERTOS/tasks.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  44:../Dave/Generated/FREERTOS/tasks.c ****  * for the header files above, but not in this file, in order to generate the
  45:../Dave/Generated/FREERTOS/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  46:../Dave/Generated/FREERTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  47:../Dave/Generated/FREERTOS/tasks.c **** 
  48:../Dave/Generated/FREERTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  49:../Dave/Generated/FREERTOS/tasks.c ****  * functions but without including stdio.h here. */
  50:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  51:../Dave/Generated/FREERTOS/tasks.c **** 
  52:../Dave/Generated/FREERTOS/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  53:../Dave/Generated/FREERTOS/tasks.c ****  * to generate human readable text from the raw data generated by the
  54:../Dave/Generated/FREERTOS/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:../Dave/Generated/FREERTOS/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  56:../Dave/Generated/FREERTOS/tasks.c ****     #include <stdio.h>
  57:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:../Dave/Generated/FREERTOS/tasks.c **** 
  59:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  60:../Dave/Generated/FREERTOS/tasks.c **** 
  61:../Dave/Generated/FREERTOS/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  62:../Dave/Generated/FREERTOS/tasks.c ****  * performed just because a higher priority task has been woken. */
  63:../Dave/Generated/FREERTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()
  64:../Dave/Generated/FREERTOS/tasks.c **** #else
  65:../Dave/Generated/FREERTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  66:../Dave/Generated/FREERTOS/tasks.c **** #endif
  67:../Dave/Generated/FREERTOS/tasks.c **** 
  68:../Dave/Generated/FREERTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  69:../Dave/Generated/FREERTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  70:../Dave/Generated/FREERTOS/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  71:../Dave/Generated/FREERTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  72:../Dave/Generated/FREERTOS/tasks.c **** 
  73:../Dave/Generated/FREERTOS/tasks.c **** /*
  74:../Dave/Generated/FREERTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  75:../Dave/Generated/FREERTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
  76:../Dave/Generated/FREERTOS/tasks.c ****  */
  77:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  78:../Dave/Generated/FREERTOS/tasks.c **** 
  79:../Dave/Generated/FREERTOS/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  80:../Dave/Generated/FREERTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
  81:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  82:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  83:../Dave/Generated/FREERTOS/tasks.c **** 
  84:../Dave/Generated/FREERTOS/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  85:../Dave/Generated/FREERTOS/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
  86:../Dave/Generated/FREERTOS/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
  87:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
  88:../Dave/Generated/FREERTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
  89:../Dave/Generated/FREERTOS/tasks.c **** #else
  90:../Dave/Generated/FREERTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  91:../Dave/Generated/FREERTOS/tasks.c **** #endif
  92:../Dave/Generated/FREERTOS/tasks.c **** 
  93:../Dave/Generated/FREERTOS/tasks.c **** /*
  94:../Dave/Generated/FREERTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  95:../Dave/Generated/FREERTOS/tasks.c ****  */
  96:../Dave/Generated/FREERTOS/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
  97:../Dave/Generated/FREERTOS/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
  98:../Dave/Generated/FREERTOS/tasks.c **** #define tskREADY_CHAR        ( 'R' )
  99:../Dave/Generated/FREERTOS/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 100:../Dave/Generated/FREERTOS/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 101:../Dave/Generated/FREERTOS/tasks.c **** 
 102:../Dave/Generated/FREERTOS/tasks.c **** /*
 103:../Dave/Generated/FREERTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 104:../Dave/Generated/FREERTOS/tasks.c ****  * global, rather than file scope.
 105:../Dave/Generated/FREERTOS/tasks.c ****  */
 106:../Dave/Generated/FREERTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 107:../Dave/Generated/FREERTOS/tasks.c ****     #define static
 108:../Dave/Generated/FREERTOS/tasks.c **** #endif
 109:../Dave/Generated/FREERTOS/tasks.c **** 
 110:../Dave/Generated/FREERTOS/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 111:../Dave/Generated/FREERTOS/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 112:../Dave/Generated/FREERTOS/tasks.c **** #ifndef configIDLE_TASK_NAME
 113:../Dave/Generated/FREERTOS/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 114:../Dave/Generated/FREERTOS/tasks.c **** #endif
 115:../Dave/Generated/FREERTOS/tasks.c **** 
 116:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 117:../Dave/Generated/FREERTOS/tasks.c **** 
 118:../Dave/Generated/FREERTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 119:../Dave/Generated/FREERTOS/tasks.c ****  * performed in a generic way that is not optimised to any particular
 120:../Dave/Generated/FREERTOS/tasks.c ****  * microcontroller architecture. */
 121:../Dave/Generated/FREERTOS/tasks.c **** 
 122:../Dave/Generated/FREERTOS/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 123:../Dave/Generated/FREERTOS/tasks.c ****  * state task. */
 124:../Dave/Generated/FREERTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 125:../Dave/Generated/FREERTOS/tasks.c ****     {                                               \
 126:../Dave/Generated/FREERTOS/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 127:../Dave/Generated/FREERTOS/tasks.c ****         {                                           \
 128:../Dave/Generated/FREERTOS/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 129:../Dave/Generated/FREERTOS/tasks.c ****         }                                           \
 130:../Dave/Generated/FREERTOS/tasks.c ****     } /* taskRECORD_READY_PRIORITY */
 131:../Dave/Generated/FREERTOS/tasks.c **** 
 132:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 133:../Dave/Generated/FREERTOS/tasks.c **** 
 134:../Dave/Generated/FREERTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 135:../Dave/Generated/FREERTOS/tasks.c ****     {                                                                         \
 136:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 137:../Dave/Generated/FREERTOS/tasks.c ****                                                                               \
 138:../Dave/Generated/FREERTOS/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */      \
 139:../Dave/Generated/FREERTOS/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 140:../Dave/Generated/FREERTOS/tasks.c ****         {                                                                     \
 141:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( uxTopPriority );                                    \
 142:../Dave/Generated/FREERTOS/tasks.c ****             --uxTopPriority;                                                  \
 143:../Dave/Generated/FREERTOS/tasks.c ****         }                                                                     \
 144:../Dave/Generated/FREERTOS/tasks.c ****                                                                               \
 145:../Dave/Generated/FREERTOS/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 146:../Dave/Generated/FREERTOS/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 147:../Dave/Generated/FREERTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 148:../Dave/Generated/FREERTOS/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 149:../Dave/Generated/FREERTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK */
 150:../Dave/Generated/FREERTOS/tasks.c **** 
 151:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 152:../Dave/Generated/FREERTOS/tasks.c **** 
 153:../Dave/Generated/FREERTOS/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 154:../Dave/Generated/FREERTOS/tasks.c ****  * they are only required when a port optimised method of task selection is
 155:../Dave/Generated/FREERTOS/tasks.c ****  * being used. */
 156:../Dave/Generated/FREERTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 157:../Dave/Generated/FREERTOS/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 158:../Dave/Generated/FREERTOS/tasks.c **** 
 159:../Dave/Generated/FREERTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 160:../Dave/Generated/FREERTOS/tasks.c **** 
 161:../Dave/Generated/FREERTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 162:../Dave/Generated/FREERTOS/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 163:../Dave/Generated/FREERTOS/tasks.c ****  * architecture being used. */
 164:../Dave/Generated/FREERTOS/tasks.c **** 
 165:../Dave/Generated/FREERTOS/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 166:../Dave/Generated/FREERTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( uxPriority, uxTop
 167:../Dave/Generated/FREERTOS/tasks.c **** 
 168:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 169:../Dave/Generated/FREERTOS/tasks.c **** 
 170:../Dave/Generated/FREERTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 171:../Dave/Generated/FREERTOS/tasks.c ****     {                                                                                           \
 172:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 173:../Dave/Generated/FREERTOS/tasks.c ****                                                                                                 \
 174:../Dave/Generated/FREERTOS/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 175:../Dave/Generated/FREERTOS/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 176:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 177:../Dave/Generated/FREERTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 178:../Dave/Generated/FREERTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 179:../Dave/Generated/FREERTOS/tasks.c **** 
 180:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 181:../Dave/Generated/FREERTOS/tasks.c **** 
 182:../Dave/Generated/FREERTOS/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 183:../Dave/Generated/FREERTOS/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 184:../Dave/Generated/FREERTOS/tasks.c ****  * or suspended list then it won't be in a ready list. */
 185:../Dave/Generated/FREERTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 186:../Dave/Generated/FREERTOS/tasks.c ****     {                                                                                              
 187:../Dave/Generated/FREERTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 188:../Dave/Generated/FREERTOS/tasks.c ****         {                                                                                          
 189:../Dave/Generated/FREERTOS/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 190:../Dave/Generated/FREERTOS/tasks.c ****         }                                                                                          
 191:../Dave/Generated/FREERTOS/tasks.c ****     }
 192:../Dave/Generated/FREERTOS/tasks.c **** 
 193:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../Dave/Generated/FREERTOS/tasks.c **** 
 195:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 196:../Dave/Generated/FREERTOS/tasks.c **** 
 197:../Dave/Generated/FREERTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 198:../Dave/Generated/FREERTOS/tasks.c ****  * count overflows. */
 199:../Dave/Generated/FREERTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
 200:../Dave/Generated/FREERTOS/tasks.c ****     {                                                                             \
 201:../Dave/Generated/FREERTOS/tasks.c ****         List_t * pxTemp;                                                          \
 202:../Dave/Generated/FREERTOS/tasks.c ****                                                                                   \
 203:../Dave/Generated/FREERTOS/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 204:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 205:../Dave/Generated/FREERTOS/tasks.c ****                                                                                   \
 206:../Dave/Generated/FREERTOS/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 207:../Dave/Generated/FREERTOS/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 208:../Dave/Generated/FREERTOS/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 209:../Dave/Generated/FREERTOS/tasks.c ****         xNumOfOverflows++;                                                        \
 210:../Dave/Generated/FREERTOS/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 211:../Dave/Generated/FREERTOS/tasks.c ****     }
 212:../Dave/Generated/FREERTOS/tasks.c **** 
 213:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 214:../Dave/Generated/FREERTOS/tasks.c **** 
 215:../Dave/Generated/FREERTOS/tasks.c **** /*
 216:../Dave/Generated/FREERTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 217:../Dave/Generated/FREERTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 218:../Dave/Generated/FREERTOS/tasks.c ****  */
 219:../Dave/Generated/FREERTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 220:../Dave/Generated/FREERTOS/tasks.c ****     traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                       
 221:../Dave/Generated/FREERTOS/tasks.c ****     taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                            
 222:../Dave/Generated/FREERTOS/tasks.c ****     vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem )
 223:../Dave/Generated/FREERTOS/tasks.c ****     tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 224:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 225:../Dave/Generated/FREERTOS/tasks.c **** 
 226:../Dave/Generated/FREERTOS/tasks.c **** /*
 227:../Dave/Generated/FREERTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 228:../Dave/Generated/FREERTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 229:../Dave/Generated/FREERTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 230:../Dave/Generated/FREERTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 231:../Dave/Generated/FREERTOS/tasks.c ****  */
 232:../Dave/Generated/FREERTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 233:../Dave/Generated/FREERTOS/tasks.c **** 
 234:../Dave/Generated/FREERTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 235:../Dave/Generated/FREERTOS/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 236:../Dave/Generated/FREERTOS/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 237:../Dave/Generated/FREERTOS/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 238:../Dave/Generated/FREERTOS/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 239:../Dave/Generated/FREERTOS/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 240:../Dave/Generated/FREERTOS/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 241:../Dave/Generated/FREERTOS/tasks.c ****  * to its original value when it is released. */
 242:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_16_BIT_TICKS == 1 )
 243:../Dave/Generated/FREERTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 244:../Dave/Generated/FREERTOS/tasks.c **** #else
 245:../Dave/Generated/FREERTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 246:../Dave/Generated/FREERTOS/tasks.c **** #endif
 247:../Dave/Generated/FREERTOS/tasks.c **** 
 248:../Dave/Generated/FREERTOS/tasks.c **** /*
 249:../Dave/Generated/FREERTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 250:../Dave/Generated/FREERTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 251:../Dave/Generated/FREERTOS/tasks.c ****  * (the task's run time environment, including register values)
 252:../Dave/Generated/FREERTOS/tasks.c ****  */
 253:../Dave/Generated/FREERTOS/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 254:../Dave/Generated/FREERTOS/tasks.c **** {
 255:../Dave/Generated/FREERTOS/tasks.c ****     volatile StackType_t * pxTopOfStack; /*< Points to the location of the last item placed on the 
 256:../Dave/Generated/FREERTOS/tasks.c **** 
 257:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 258:../Dave/Generated/FREERTOS/tasks.c ****         xMPU_SETTINGS xMPUSettings; /*< The MPU settings are defined as part of the port layer.  TH
 259:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 260:../Dave/Generated/FREERTOS/tasks.c **** 
 261:../Dave/Generated/FREERTOS/tasks.c ****     ListItem_t xStateListItem;                  /*< The list that the state list item of a task is 
 262:../Dave/Generated/FREERTOS/tasks.c ****     ListItem_t xEventListItem;                  /*< Used to reference a task from an event list. */
 263:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxPriority;                     /*< The priority of the task.  0 is the lowest prio
 264:../Dave/Generated/FREERTOS/tasks.c ****     StackType_t * pxStack;                      /*< Points to the start of the stack. */
 265:../Dave/Generated/FREERTOS/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /*< Descriptive name given to the task when created
 266:../Dave/Generated/FREERTOS/tasks.c **** 
 267:../Dave/Generated/FREERTOS/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 268:../Dave/Generated/FREERTOS/tasks.c ****         StackType_t * pxEndOfStack; /*< Points to the highest valid address for the stack. */
 269:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 270:../Dave/Generated/FREERTOS/tasks.c **** 
 271:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 272:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxCriticalNesting; /*< Holds the critical section nesting depth for ports that 
 273:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 274:../Dave/Generated/FREERTOS/tasks.c **** 
 275:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 276:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTCBNumber;  /*< Stores a number that increments each time a TCB is created.  
 277:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTaskNumber; /*< Stores a number specifically for use by third party trace cod
 278:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 279:../Dave/Generated/FREERTOS/tasks.c **** 
 280:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 281:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxBasePriority; /*< The priority last assigned to the task - used by the priori
 282:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxMutexesHeld;
 283:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 284:../Dave/Generated/FREERTOS/tasks.c **** 
 285:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 286:../Dave/Generated/FREERTOS/tasks.c ****         TaskHookFunction_t pxTaskTag;
 287:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 288:../Dave/Generated/FREERTOS/tasks.c **** 
 289:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 290:../Dave/Generated/FREERTOS/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 291:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 292:../Dave/Generated/FREERTOS/tasks.c **** 
 293:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 294:../Dave/Generated/FREERTOS/tasks.c ****         uint32_t ulRunTimeCounter; /*< Stores the amount of time the task has spent in the Running 
 295:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 296:../Dave/Generated/FREERTOS/tasks.c **** 
 297:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 298:../Dave/Generated/FREERTOS/tasks.c **** 
 299:../Dave/Generated/FREERTOS/tasks.c ****         /* Allocate a Newlib reent structure that is specific to this task.
 300:../Dave/Generated/FREERTOS/tasks.c ****          * Note Newlib support has been included by popular demand, but is not
 301:../Dave/Generated/FREERTOS/tasks.c ****          * used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 302:../Dave/Generated/FREERTOS/tasks.c ****          * responsible for resulting newlib operation.  User must be familiar with
 303:../Dave/Generated/FREERTOS/tasks.c ****          * newlib and must provide system-wide implementations of the necessary
 304:../Dave/Generated/FREERTOS/tasks.c ****          * stubs. Be warned that (at the time of writing) the current newlib design
 305:../Dave/Generated/FREERTOS/tasks.c ****          * implements a system-wide malloc() that must be provided with locks.
 306:../Dave/Generated/FREERTOS/tasks.c ****          *
 307:../Dave/Generated/FREERTOS/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 308:../Dave/Generated/FREERTOS/tasks.c ****          * for additional information. */
 309:../Dave/Generated/FREERTOS/tasks.c ****         struct  _reent xNewLib_reent;
 310:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 311:../Dave/Generated/FREERTOS/tasks.c **** 
 312:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 313:../Dave/Generated/FREERTOS/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 314:../Dave/Generated/FREERTOS/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 315:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 316:../Dave/Generated/FREERTOS/tasks.c **** 
 317:../Dave/Generated/FREERTOS/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 318:../Dave/Generated/FREERTOS/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 319:../Dave/Generated/FREERTOS/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 320:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t ucStaticallyAllocated;                     /*< Set to pdTRUE if the task is a stati
 321:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 322:../Dave/Generated/FREERTOS/tasks.c **** 
 323:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 324:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t ucDelayAborted;
 325:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 326:../Dave/Generated/FREERTOS/tasks.c **** 
 327:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 328:../Dave/Generated/FREERTOS/tasks.c ****         int iTaskErrno;
 329:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 330:../Dave/Generated/FREERTOS/tasks.c **** } tskTCB;
 331:../Dave/Generated/FREERTOS/tasks.c **** 
 332:../Dave/Generated/FREERTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 333:../Dave/Generated/FREERTOS/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 334:../Dave/Generated/FREERTOS/tasks.c **** typedef tskTCB TCB_t;
 335:../Dave/Generated/FREERTOS/tasks.c **** 
 336:../Dave/Generated/FREERTOS/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 337:../Dave/Generated/FREERTOS/tasks.c ****  * which static variables must be declared volatile. */
 338:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 339:../Dave/Generated/FREERTOS/tasks.c **** 
 340:../Dave/Generated/FREERTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 341:../Dave/Generated/FREERTOS/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 342:../Dave/Generated/FREERTOS/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 343:../Dave/Generated/FREERTOS/tasks.c ****  * the static qualifier. */
 344:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /*< Prioritised ready task
 345:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /*< Delayed tasks. */
 346:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /*< Delayed tasks (two lis
 347:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /*< Points to the delayed 
 348:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /*< Points to the delayed 
 349:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /*< Tasks that have been r
 350:../Dave/Generated/FREERTOS/tasks.c **** 
 351:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 352:../Dave/Generated/FREERTOS/tasks.c **** 
 353:../Dave/Generated/FREERTOS/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /*< Tasks that have been deleted - but 
 354:../Dave/Generated/FREERTOS/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 355:../Dave/Generated/FREERTOS/tasks.c **** 
 356:../Dave/Generated/FREERTOS/tasks.c **** #endif
 357:../Dave/Generated/FREERTOS/tasks.c **** 
 358:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 359:../Dave/Generated/FREERTOS/tasks.c **** 
 360:../Dave/Generated/FREERTOS/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /*< Tasks that are currently suspended. */
 361:../Dave/Generated/FREERTOS/tasks.c **** 
 362:../Dave/Generated/FREERTOS/tasks.c **** #endif
 363:../Dave/Generated/FREERTOS/tasks.c **** 
 364:../Dave/Generated/FREERTOS/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 365:../Dave/Generated/FREERTOS/tasks.c ****  * the errno of the currently running task. */
 366:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 367:../Dave/Generated/FREERTOS/tasks.c ****     int FreeRTOS_errno = 0;
 368:../Dave/Generated/FREERTOS/tasks.c **** #endif
 369:../Dave/Generated/FREERTOS/tasks.c **** 
 370:../Dave/Generated/FREERTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 371:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 372:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 373:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
 374:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 375:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 376:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 377:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 378:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 379:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 380:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /*< Holds the 
 381:../Dave/Generated/FREERTOS/tasks.c **** 
 382:../Dave/Generated/FREERTOS/tasks.c **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 383:../Dave/Generated/FREERTOS/tasks.c ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
 384:../Dave/Generated/FREERTOS/tasks.c ****  * to determine the number of priority lists to read back from the remote target. */
 385:../Dave/Generated/FREERTOS/tasks.c **** const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 386:../Dave/Generated/FREERTOS/tasks.c **** 
 387:../Dave/Generated/FREERTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 388:../Dave/Generated/FREERTOS/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 389:../Dave/Generated/FREERTOS/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 390:../Dave/Generated/FREERTOS/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 391:../Dave/Generated/FREERTOS/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 392:../Dave/Generated/FREERTOS/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 393:../Dave/Generated/FREERTOS/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 394:../Dave/Generated/FREERTOS/tasks.c ****  * accessed from a critical section. */
 395:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) pdFALSE;
 396:../Dave/Generated/FREERTOS/tasks.c **** 
 397:../Dave/Generated/FREERTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 398:../Dave/Generated/FREERTOS/tasks.c **** 
 399:../Dave/Generated/FREERTOS/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 400:../Dave/Generated/FREERTOS/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 401:../Dave/Generated/FREERTOS/tasks.c ****     PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;    /*< Holds the value of a timer/c
 402:../Dave/Generated/FREERTOS/tasks.c ****     PRIVILEGED_DATA static volatile uint32_t ulTotalRunTime = 0UL; /*< Holds the total amount of ex
 403:../Dave/Generated/FREERTOS/tasks.c **** 
 404:../Dave/Generated/FREERTOS/tasks.c **** #endif
 405:../Dave/Generated/FREERTOS/tasks.c **** 
 406:../Dave/Generated/FREERTOS/tasks.c **** /*lint -restore */
 407:../Dave/Generated/FREERTOS/tasks.c **** 
 408:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 409:../Dave/Generated/FREERTOS/tasks.c **** 
 410:../Dave/Generated/FREERTOS/tasks.c **** /* File private functions. --------------------------------*/
 411:../Dave/Generated/FREERTOS/tasks.c **** 
 412:../Dave/Generated/FREERTOS/tasks.c **** /**
 413:../Dave/Generated/FREERTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 414:../Dave/Generated/FREERTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 415:../Dave/Generated/FREERTOS/tasks.c ****  * is in any other state.
 416:../Dave/Generated/FREERTOS/tasks.c ****  */
 417:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 418:../Dave/Generated/FREERTOS/tasks.c **** 
 419:../Dave/Generated/FREERTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 420:../Dave/Generated/FREERTOS/tasks.c **** 
 421:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 422:../Dave/Generated/FREERTOS/tasks.c **** 
 423:../Dave/Generated/FREERTOS/tasks.c **** /*
 424:../Dave/Generated/FREERTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 425:../Dave/Generated/FREERTOS/tasks.c ****  * automatically upon the creation of the first task.
 426:../Dave/Generated/FREERTOS/tasks.c ****  */
 427:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 428:../Dave/Generated/FREERTOS/tasks.c **** 
 429:../Dave/Generated/FREERTOS/tasks.c **** /*
 430:../Dave/Generated/FREERTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 431:../Dave/Generated/FREERTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 432:../Dave/Generated/FREERTOS/tasks.c ****  * creation of the first user task.
 433:../Dave/Generated/FREERTOS/tasks.c ****  *
 434:../Dave/Generated/FREERTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 435:../Dave/Generated/FREERTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 436:../Dave/Generated/FREERTOS/tasks.c ****  *
 437:../Dave/Generated/FREERTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 438:../Dave/Generated/FREERTOS/tasks.c ****  *
 439:../Dave/Generated/FREERTOS/tasks.c ****  */
 440:../Dave/Generated/FREERTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 441:../Dave/Generated/FREERTOS/tasks.c **** 
 442:../Dave/Generated/FREERTOS/tasks.c **** /*
 443:../Dave/Generated/FREERTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 444:../Dave/Generated/FREERTOS/tasks.c ****  * including the stack pointed to by the TCB.
 445:../Dave/Generated/FREERTOS/tasks.c ****  *
 446:../Dave/Generated/FREERTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 447:../Dave/Generated/FREERTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 448:../Dave/Generated/FREERTOS/tasks.c ****  */
 449:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 450:../Dave/Generated/FREERTOS/tasks.c **** 
 451:../Dave/Generated/FREERTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 452:../Dave/Generated/FREERTOS/tasks.c **** 
 453:../Dave/Generated/FREERTOS/tasks.c **** #endif
 454:../Dave/Generated/FREERTOS/tasks.c **** 
 455:../Dave/Generated/FREERTOS/tasks.c **** /*
 456:../Dave/Generated/FREERTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 457:../Dave/Generated/FREERTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 458:../Dave/Generated/FREERTOS/tasks.c ****  * and its TCB deleted.
 459:../Dave/Generated/FREERTOS/tasks.c ****  */
 460:../Dave/Generated/FREERTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 461:../Dave/Generated/FREERTOS/tasks.c **** 
 462:../Dave/Generated/FREERTOS/tasks.c **** /*
 463:../Dave/Generated/FREERTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 464:../Dave/Generated/FREERTOS/tasks.c ****  * either the current or the overflow delayed task list.
 465:../Dave/Generated/FREERTOS/tasks.c ****  */
 466:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 467:../Dave/Generated/FREERTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 468:../Dave/Generated/FREERTOS/tasks.c **** 
 469:../Dave/Generated/FREERTOS/tasks.c **** /*
 470:../Dave/Generated/FREERTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 471:../Dave/Generated/FREERTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 472:../Dave/Generated/FREERTOS/tasks.c ****  * a suspended list, etc.).
 473:../Dave/Generated/FREERTOS/tasks.c ****  *
 474:../Dave/Generated/FREERTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 475:../Dave/Generated/FREERTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 476:../Dave/Generated/FREERTOS/tasks.c ****  */
 477:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 478:../Dave/Generated/FREERTOS/tasks.c **** 
 479:../Dave/Generated/FREERTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 480:../Dave/Generated/FREERTOS/tasks.c ****                                                      List_t * pxList,
 481:../Dave/Generated/FREERTOS/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 482:../Dave/Generated/FREERTOS/tasks.c **** 
 483:../Dave/Generated/FREERTOS/tasks.c **** #endif
 484:../Dave/Generated/FREERTOS/tasks.c **** 
 485:../Dave/Generated/FREERTOS/tasks.c **** /*
 486:../Dave/Generated/FREERTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 487:../Dave/Generated/FREERTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 488:../Dave/Generated/FREERTOS/tasks.c ****  */
 489:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 490:../Dave/Generated/FREERTOS/tasks.c **** 
 491:../Dave/Generated/FREERTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 492:../Dave/Generated/FREERTOS/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 493:../Dave/Generated/FREERTOS/tasks.c **** 
 494:../Dave/Generated/FREERTOS/tasks.c **** #endif
 495:../Dave/Generated/FREERTOS/tasks.c **** 
 496:../Dave/Generated/FREERTOS/tasks.c **** /*
 497:../Dave/Generated/FREERTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 498:../Dave/Generated/FREERTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 499:../Dave/Generated/FREERTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 500:../Dave/Generated/FREERTOS/tasks.c ****  */
 501:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 502:../Dave/Generated/FREERTOS/tasks.c **** 
 503:../Dave/Generated/FREERTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 504:../Dave/Generated/FREERTOS/tasks.c **** 
 505:../Dave/Generated/FREERTOS/tasks.c **** #endif
 506:../Dave/Generated/FREERTOS/tasks.c **** 
 507:../Dave/Generated/FREERTOS/tasks.c **** /*
 508:../Dave/Generated/FREERTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 509:../Dave/Generated/FREERTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 510:../Dave/Generated/FREERTOS/tasks.c ****  *
 511:../Dave/Generated/FREERTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 512:../Dave/Generated/FREERTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 513:../Dave/Generated/FREERTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 514:../Dave/Generated/FREERTOS/tasks.c ****  * set to a value other than 1.
 515:../Dave/Generated/FREERTOS/tasks.c ****  */
 516:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 517:../Dave/Generated/FREERTOS/tasks.c **** 
 518:../Dave/Generated/FREERTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 519:../Dave/Generated/FREERTOS/tasks.c **** 
 520:../Dave/Generated/FREERTOS/tasks.c **** #endif
 521:../Dave/Generated/FREERTOS/tasks.c **** 
 522:../Dave/Generated/FREERTOS/tasks.c **** /*
 523:../Dave/Generated/FREERTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 524:../Dave/Generated/FREERTOS/tasks.c ****  * will exit the Blocked state.
 525:../Dave/Generated/FREERTOS/tasks.c ****  */
 526:../Dave/Generated/FREERTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 527:../Dave/Generated/FREERTOS/tasks.c **** 
 528:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 529:../Dave/Generated/FREERTOS/tasks.c **** 
 530:../Dave/Generated/FREERTOS/tasks.c **** /*
 531:../Dave/Generated/FREERTOS/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 532:../Dave/Generated/FREERTOS/tasks.c ****  * human readable tables of task information.
 533:../Dave/Generated/FREERTOS/tasks.c ****  */
 534:../Dave/Generated/FREERTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 535:../Dave/Generated/FREERTOS/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 536:../Dave/Generated/FREERTOS/tasks.c **** 
 537:../Dave/Generated/FREERTOS/tasks.c **** #endif
 538:../Dave/Generated/FREERTOS/tasks.c **** 
 539:../Dave/Generated/FREERTOS/tasks.c **** /*
 540:../Dave/Generated/FREERTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 541:../Dave/Generated/FREERTOS/tasks.c ****  * dynamically to fill in the structure's members.
 542:../Dave/Generated/FREERTOS/tasks.c ****  */
 543:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 544:../Dave/Generated/FREERTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 545:../Dave/Generated/FREERTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 546:../Dave/Generated/FREERTOS/tasks.c ****                                   void * const pvParameters,
 547:../Dave/Generated/FREERTOS/tasks.c ****                                   UBaseType_t uxPriority,
 548:../Dave/Generated/FREERTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 549:../Dave/Generated/FREERTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 550:../Dave/Generated/FREERTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 551:../Dave/Generated/FREERTOS/tasks.c **** 
 552:../Dave/Generated/FREERTOS/tasks.c **** /*
 553:../Dave/Generated/FREERTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 554:../Dave/Generated/FREERTOS/tasks.c ****  * under the control of the scheduler.
 555:../Dave/Generated/FREERTOS/tasks.c ****  */
 556:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 557:../Dave/Generated/FREERTOS/tasks.c **** 
 558:../Dave/Generated/FREERTOS/tasks.c **** /*
 559:../Dave/Generated/FREERTOS/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 560:../Dave/Generated/FREERTOS/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 561:../Dave/Generated/FREERTOS/tasks.c ****  * called by the function.
 562:../Dave/Generated/FREERTOS/tasks.c ****  */
 563:../Dave/Generated/FREERTOS/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 564:../Dave/Generated/FREERTOS/tasks.c **** 
 565:../Dave/Generated/FREERTOS/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 566:../Dave/Generated/FREERTOS/tasks.c **** 
 567:../Dave/Generated/FREERTOS/tasks.c **** #endif
 568:../Dave/Generated/FREERTOS/tasks.c **** 
 569:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 570:../Dave/Generated/FREERTOS/tasks.c **** 
 571:../Dave/Generated/FREERTOS/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 572:../Dave/Generated/FREERTOS/tasks.c **** 
 573:../Dave/Generated/FREERTOS/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 574:../Dave/Generated/FREERTOS/tasks.c ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 575:../Dave/Generated/FREERTOS/tasks.c ****                                     const uint32_t ulStackDepth,
 576:../Dave/Generated/FREERTOS/tasks.c ****                                     void * const pvParameters,
 577:../Dave/Generated/FREERTOS/tasks.c ****                                     UBaseType_t uxPriority,
 578:../Dave/Generated/FREERTOS/tasks.c ****                                     StackType_t * const puxStackBuffer,
 579:../Dave/Generated/FREERTOS/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
 580:../Dave/Generated/FREERTOS/tasks.c ****     {
 581:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxNewTCB;
 582:../Dave/Generated/FREERTOS/tasks.c ****         TaskHandle_t xReturn;
 583:../Dave/Generated/FREERTOS/tasks.c **** 
 584:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( puxStackBuffer != NULL );
 585:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 586:../Dave/Generated/FREERTOS/tasks.c **** 
 587:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
 588:../Dave/Generated/FREERTOS/tasks.c ****             {
 589:../Dave/Generated/FREERTOS/tasks.c ****                 /* Sanity check that the size of the structure used to declare a
 590:../Dave/Generated/FREERTOS/tasks.c ****                  * variable of type StaticTask_t equals the size of the real task
 591:../Dave/Generated/FREERTOS/tasks.c ****                  * structure. */
 592:../Dave/Generated/FREERTOS/tasks.c ****                 volatile size_t xSize = sizeof( StaticTask_t );
 593:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( xSize == sizeof( TCB_t ) );
 594:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 595:../Dave/Generated/FREERTOS/tasks.c ****             }
 596:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configASSERT_DEFINED */
 597:../Dave/Generated/FREERTOS/tasks.c **** 
 598:../Dave/Generated/FREERTOS/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 599:../Dave/Generated/FREERTOS/tasks.c ****         {
 600:../Dave/Generated/FREERTOS/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
 601:../Dave/Generated/FREERTOS/tasks.c ****              * function - use them. */
 602:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 603:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 604:../Dave/Generated/FREERTOS/tasks.c **** 
 605:../Dave/Generated/FREERTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
 606:../Dave/Generated/FREERTOS/tasks.c ****                 {
 607:../Dave/Generated/FREERTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 608:../Dave/Generated/FREERTOS/tasks.c ****                      * task was created statically in case the task is later deleted. */
 609:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 610:../Dave/Generated/FREERTOS/tasks.c ****                 }
 611:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 612:../Dave/Generated/FREERTOS/tasks.c **** 
 613:../Dave/Generated/FREERTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 614:../Dave/Generated/FREERTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 615:../Dave/Generated/FREERTOS/tasks.c ****         }
 616:../Dave/Generated/FREERTOS/tasks.c ****         else
 617:../Dave/Generated/FREERTOS/tasks.c ****         {
 618:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = NULL;
 619:../Dave/Generated/FREERTOS/tasks.c ****         }
 620:../Dave/Generated/FREERTOS/tasks.c **** 
 621:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 622:../Dave/Generated/FREERTOS/tasks.c ****     }
 623:../Dave/Generated/FREERTOS/tasks.c **** 
 624:../Dave/Generated/FREERTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 625:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 626:../Dave/Generated/FREERTOS/tasks.c **** 
 627:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 628:../Dave/Generated/FREERTOS/tasks.c **** 
 629:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 630:../Dave/Generated/FREERTOS/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
 631:../Dave/Generated/FREERTOS/tasks.c ****     {
 632:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxNewTCB;
 633:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 634:../Dave/Generated/FREERTOS/tasks.c **** 
 635:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 636:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 637:../Dave/Generated/FREERTOS/tasks.c **** 
 638:../Dave/Generated/FREERTOS/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 639:../Dave/Generated/FREERTOS/tasks.c ****         {
 640:../Dave/Generated/FREERTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 641:../Dave/Generated/FREERTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 642:../Dave/Generated/FREERTOS/tasks.c ****              * not static allocation is being used. */
 643:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 644:../Dave/Generated/FREERTOS/tasks.c **** 
 645:../Dave/Generated/FREERTOS/tasks.c ****             /* Store the stack location in the TCB. */
 646:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 647:../Dave/Generated/FREERTOS/tasks.c **** 
 648:../Dave/Generated/FREERTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 649:../Dave/Generated/FREERTOS/tasks.c ****                 {
 650:../Dave/Generated/FREERTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 651:../Dave/Generated/FREERTOS/tasks.c ****                      * task was created statically in case the task is later deleted. */
 652:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 653:../Dave/Generated/FREERTOS/tasks.c ****                 }
 654:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 655:../Dave/Generated/FREERTOS/tasks.c **** 
 656:../Dave/Generated/FREERTOS/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 657:../Dave/Generated/FREERTOS/tasks.c ****                                   pxTaskDefinition->pcName,
 658:../Dave/Generated/FREERTOS/tasks.c ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
 659:../Dave/Generated/FREERTOS/tasks.c ****                                   pxTaskDefinition->pvParameters,
 660:../Dave/Generated/FREERTOS/tasks.c ****                                   pxTaskDefinition->uxPriority,
 661:../Dave/Generated/FREERTOS/tasks.c ****                                   pxCreatedTask, pxNewTCB,
 662:../Dave/Generated/FREERTOS/tasks.c ****                                   pxTaskDefinition->xRegions );
 663:../Dave/Generated/FREERTOS/tasks.c **** 
 664:../Dave/Generated/FREERTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 665:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdPASS;
 666:../Dave/Generated/FREERTOS/tasks.c ****         }
 667:../Dave/Generated/FREERTOS/tasks.c **** 
 668:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 669:../Dave/Generated/FREERTOS/tasks.c ****     }
 670:../Dave/Generated/FREERTOS/tasks.c **** 
 671:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 672:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 673:../Dave/Generated/FREERTOS/tasks.c **** 
 674:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 675:../Dave/Generated/FREERTOS/tasks.c **** 
 676:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 677:../Dave/Generated/FREERTOS/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
 678:../Dave/Generated/FREERTOS/tasks.c ****     {
 679:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxNewTCB;
 680:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:../Dave/Generated/FREERTOS/tasks.c **** 
 682:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 683:../Dave/Generated/FREERTOS/tasks.c **** 
 684:../Dave/Generated/FREERTOS/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 685:../Dave/Generated/FREERTOS/tasks.c ****         {
 686:../Dave/Generated/FREERTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 687:../Dave/Generated/FREERTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 688:../Dave/Generated/FREERTOS/tasks.c ****              * not static allocation is being used. */
 689:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:../Dave/Generated/FREERTOS/tasks.c **** 
 691:../Dave/Generated/FREERTOS/tasks.c ****             if( pxNewTCB != NULL )
 692:../Dave/Generated/FREERTOS/tasks.c ****             {
 693:../Dave/Generated/FREERTOS/tasks.c ****                 /* Store the stack location in the TCB. */
 694:../Dave/Generated/FREERTOS/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:../Dave/Generated/FREERTOS/tasks.c **** 
 696:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 697:../Dave/Generated/FREERTOS/tasks.c ****                     {
 698:../Dave/Generated/FREERTOS/tasks.c ****                         /* Tasks can be created statically or dynamically, so note
 699:../Dave/Generated/FREERTOS/tasks.c ****                          * this task had a statically allocated stack in case it is
 700:../Dave/Generated/FREERTOS/tasks.c ****                          * later deleted.  The TCB was allocated dynamically. */
 701:../Dave/Generated/FREERTOS/tasks.c ****                         pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:../Dave/Generated/FREERTOS/tasks.c ****                     }
 703:../Dave/Generated/FREERTOS/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 704:../Dave/Generated/FREERTOS/tasks.c **** 
 705:../Dave/Generated/FREERTOS/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 706:../Dave/Generated/FREERTOS/tasks.c ****                                       pxTaskDefinition->pcName,
 707:../Dave/Generated/FREERTOS/tasks.c ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 708:../Dave/Generated/FREERTOS/tasks.c ****                                       pxTaskDefinition->pvParameters,
 709:../Dave/Generated/FREERTOS/tasks.c ****                                       pxTaskDefinition->uxPriority,
 710:../Dave/Generated/FREERTOS/tasks.c ****                                       pxCreatedTask, pxNewTCB,
 711:../Dave/Generated/FREERTOS/tasks.c ****                                       pxTaskDefinition->xRegions );
 712:../Dave/Generated/FREERTOS/tasks.c **** 
 713:../Dave/Generated/FREERTOS/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
 714:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdPASS;
 715:../Dave/Generated/FREERTOS/tasks.c ****             }
 716:../Dave/Generated/FREERTOS/tasks.c ****         }
 717:../Dave/Generated/FREERTOS/tasks.c **** 
 718:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 719:../Dave/Generated/FREERTOS/tasks.c ****     }
 720:../Dave/Generated/FREERTOS/tasks.c **** 
 721:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 722:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 723:../Dave/Generated/FREERTOS/tasks.c **** 
 724:../Dave/Generated/FREERTOS/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:../Dave/Generated/FREERTOS/tasks.c **** 
 726:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 727:../Dave/Generated/FREERTOS/tasks.c ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 728:../Dave/Generated/FREERTOS/tasks.c ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 729:../Dave/Generated/FREERTOS/tasks.c ****                             void * const pvParameters,
 730:../Dave/Generated/FREERTOS/tasks.c ****                             UBaseType_t uxPriority,
 731:../Dave/Generated/FREERTOS/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
 732:../Dave/Generated/FREERTOS/tasks.c ****     {
 162              	 .loc 1 732 0
 163              	 .cfi_startproc
 164              	 
 165              	 
 166 0000 80B5     	 push {r7,lr}
 167              	.LCFI0:
 168              	 .cfi_def_cfa_offset 8
 169              	 .cfi_offset 7,-8
 170              	 .cfi_offset 14,-4
 171 0002 8CB0     	 sub sp,sp,#48
 172              	.LCFI1:
 173              	 .cfi_def_cfa_offset 56
 174 0004 04AF     	 add r7,sp,#16
 175              	.LCFI2:
 176              	 .cfi_def_cfa 7,40
 177 0006 F860     	 str r0,[r7,#12]
 178 0008 B960     	 str r1,[r7,#8]
 179 000a 3B60     	 str r3,[r7]
 180 000c 1346     	 mov r3,r2
 181 000e FB80     	 strh r3,[r7,#6]
 182              	.LBB133:
 733:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxNewTCB;
 734:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
 735:../Dave/Generated/FREERTOS/tasks.c **** 
 736:../Dave/Generated/FREERTOS/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 737:../Dave/Generated/FREERTOS/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:../Dave/Generated/FREERTOS/tasks.c ****          * the TCB then the stack. */
 739:../Dave/Generated/FREERTOS/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
 740:../Dave/Generated/FREERTOS/tasks.c ****             {
 741:../Dave/Generated/FREERTOS/tasks.c ****                 /* Allocate space for the TCB.  Where the memory comes from depends on
 742:../Dave/Generated/FREERTOS/tasks.c ****                  * the implementation of the port malloc function and whether or not static
 743:../Dave/Generated/FREERTOS/tasks.c ****                  * allocation is being used. */
 744:../Dave/Generated/FREERTOS/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:../Dave/Generated/FREERTOS/tasks.c **** 
 746:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxNewTCB != NULL )
 747:../Dave/Generated/FREERTOS/tasks.c ****                 {
 748:../Dave/Generated/FREERTOS/tasks.c ****                     /* Allocate space for the stack used by the task being created.
 749:../Dave/Generated/FREERTOS/tasks.c ****                      * The base of the stack memory stored in the TCB so the task can
 750:../Dave/Generated/FREERTOS/tasks.c ****                      * be deleted later if required. */
 751:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth
 752:../Dave/Generated/FREERTOS/tasks.c **** 
 753:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxNewTCB->pxStack == NULL )
 754:../Dave/Generated/FREERTOS/tasks.c ****                     {
 755:../Dave/Generated/FREERTOS/tasks.c ****                         /* Could not allocate the stack.  Delete the allocated TCB. */
 756:../Dave/Generated/FREERTOS/tasks.c ****                         vPortFree( pxNewTCB );
 757:../Dave/Generated/FREERTOS/tasks.c ****                         pxNewTCB = NULL;
 758:../Dave/Generated/FREERTOS/tasks.c ****                     }
 759:../Dave/Generated/FREERTOS/tasks.c ****                 }
 760:../Dave/Generated/FREERTOS/tasks.c ****             }
 761:../Dave/Generated/FREERTOS/tasks.c ****         #else /* portSTACK_GROWTH */
 762:../Dave/Generated/FREERTOS/tasks.c ****             {
 763:../Dave/Generated/FREERTOS/tasks.c ****                 StackType_t * pxStack;
 764:../Dave/Generated/FREERTOS/tasks.c **** 
 765:../Dave/Generated/FREERTOS/tasks.c ****                 /* Allocate space for the stack used by the task being created. */
 766:../Dave/Generated/FREERTOS/tasks.c ****                 pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); 
 183              	 .loc 1 766 0
 184 0010 FB88     	 ldrh r3,[r7,#6]
 185 0012 9B00     	 lsls r3,r3,#2
 186 0014 1846     	 mov r0,r3
 187 0016 FFF7FEFF 	 bl pvPortMalloc
 188 001a 7861     	 str r0,[r7,#20]
 767:../Dave/Generated/FREERTOS/tasks.c **** 
 768:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxStack != NULL )
 189              	 .loc 1 768 0
 190 001c 7B69     	 ldr r3,[r7,#20]
 191 001e 002B     	 cmp r3,#0
 192 0020 0ED0     	 beq .L2
 769:../Dave/Generated/FREERTOS/tasks.c ****                 {
 770:../Dave/Generated/FREERTOS/tasks.c ****                     /* Allocate space for the TCB. */
 771:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 Al
 193              	 .loc 1 771 0
 194 0022 7020     	 movs r0,#112
 195 0024 FFF7FEFF 	 bl pvPortMalloc
 196 0028 F861     	 str r0,[r7,#28]
 772:../Dave/Generated/FREERTOS/tasks.c **** 
 773:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxNewTCB != NULL )
 197              	 .loc 1 773 0
 198 002a FB69     	 ldr r3,[r7,#28]
 199 002c 002B     	 cmp r3,#0
 200 002e 03D0     	 beq .L3
 774:../Dave/Generated/FREERTOS/tasks.c ****                     {
 775:../Dave/Generated/FREERTOS/tasks.c ****                         /* Store the stack location in the TCB. */
 776:../Dave/Generated/FREERTOS/tasks.c ****                         pxNewTCB->pxStack = pxStack;
 201              	 .loc 1 776 0
 202 0030 FB69     	 ldr r3,[r7,#28]
 203 0032 7A69     	 ldr r2,[r7,#20]
 204 0034 1A63     	 str r2,[r3,#48]
 205 0036 05E0     	 b .L5
 206              	.L3:
 777:../Dave/Generated/FREERTOS/tasks.c ****                     }
 778:../Dave/Generated/FREERTOS/tasks.c ****                     else
 779:../Dave/Generated/FREERTOS/tasks.c ****                     {
 780:../Dave/Generated/FREERTOS/tasks.c ****                         /* The stack cannot be used as the TCB was not created.  Free
 781:../Dave/Generated/FREERTOS/tasks.c ****                          * it again. */
 782:../Dave/Generated/FREERTOS/tasks.c ****                         vPortFree( pxStack );
 207              	 .loc 1 782 0
 208 0038 7869     	 ldr r0,[r7,#20]
 209 003a FFF7FEFF 	 bl vPortFree
 210 003e 01E0     	 b .L5
 211              	.L2:
 783:../Dave/Generated/FREERTOS/tasks.c ****                     }
 784:../Dave/Generated/FREERTOS/tasks.c ****                 }
 785:../Dave/Generated/FREERTOS/tasks.c ****                 else
 786:../Dave/Generated/FREERTOS/tasks.c ****                 {
 787:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB = NULL;
 212              	 .loc 1 787 0
 213 0040 0023     	 movs r3,#0
 214 0042 FB61     	 str r3,[r7,#28]
 215              	.L5:
 216              	.LBE133:
 788:../Dave/Generated/FREERTOS/tasks.c ****                 }
 789:../Dave/Generated/FREERTOS/tasks.c ****             }
 790:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* portSTACK_GROWTH */
 791:../Dave/Generated/FREERTOS/tasks.c **** 
 792:../Dave/Generated/FREERTOS/tasks.c ****         if( pxNewTCB != NULL )
 217              	 .loc 1 792 0
 218 0044 FB69     	 ldr r3,[r7,#28]
 219 0046 002B     	 cmp r3,#0
 220 0048 13D0     	 beq .L6
 793:../Dave/Generated/FREERTOS/tasks.c ****         {
 794:../Dave/Generated/FREERTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 795:../Dave/Generated/FREERTOS/tasks.c ****                 {
 796:../Dave/Generated/FREERTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 797:../Dave/Generated/FREERTOS/tasks.c ****                      * task was created dynamically in case it is later deleted. */
 798:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 799:../Dave/Generated/FREERTOS/tasks.c ****                 }
 800:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 801:../Dave/Generated/FREERTOS/tasks.c **** 
 802:../Dave/Generated/FREERTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 221              	 .loc 1 802 0
 222 004a FA88     	 ldrh r2,[r7,#6]
 223 004c BB6A     	 ldr r3,[r7,#40]
 224 004e 0093     	 str r3,[sp]
 225 0050 FB6A     	 ldr r3,[r7,#44]
 226 0052 0193     	 str r3,[sp,#4]
 227 0054 FB69     	 ldr r3,[r7,#28]
 228 0056 0293     	 str r3,[sp,#8]
 229 0058 0023     	 movs r3,#0
 230 005a 0393     	 str r3,[sp,#12]
 231 005c F868     	 ldr r0,[r7,#12]
 232 005e B968     	 ldr r1,[r7,#8]
 233 0060 3B68     	 ldr r3,[r7]
 234 0062 FFF7FEFF 	 bl prvInitialiseNewTask
 803:../Dave/Generated/FREERTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 235              	 .loc 1 803 0
 236 0066 F869     	 ldr r0,[r7,#28]
 237 0068 FFF7FEFF 	 bl prvAddNewTaskToReadyList
 804:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdPASS;
 238              	 .loc 1 804 0
 239 006c 0123     	 movs r3,#1
 240 006e BB61     	 str r3,[r7,#24]
 241 0070 02E0     	 b .L7
 242              	.L6:
 805:../Dave/Generated/FREERTOS/tasks.c ****         }
 806:../Dave/Generated/FREERTOS/tasks.c ****         else
 807:../Dave/Generated/FREERTOS/tasks.c ****         {
 808:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 243              	 .loc 1 808 0
 244 0072 4FF0FF33 	 mov r3,#-1
 245 0076 BB61     	 str r3,[r7,#24]
 246              	.L7:
 809:../Dave/Generated/FREERTOS/tasks.c ****         }
 810:../Dave/Generated/FREERTOS/tasks.c **** 
 811:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 247              	 .loc 1 811 0
 248 0078 BB69     	 ldr r3,[r7,#24]
 812:../Dave/Generated/FREERTOS/tasks.c ****     }
 249              	 .loc 1 812 0
 250 007a 1846     	 mov r0,r3
 251 007c 2037     	 adds r7,r7,#32
 252              	.LCFI3:
 253              	 .cfi_def_cfa_offset 8
 254 007e BD46     	 mov sp,r7
 255              	.LCFI4:
 256              	 .cfi_def_cfa_register 13
 257              	 
 258 0080 80BD     	 pop {r7,pc}
 259              	 .cfi_endproc
 260              	.LFE138:
 262 0082 00BF     	 .section .text.prvInitialiseNewTask,"ax",%progbits
 263              	 .align 2
 264              	 .thumb
 265              	 .thumb_func
 267              	prvInitialiseNewTask:
 268              	.LFB139:
 813:../Dave/Generated/FREERTOS/tasks.c **** 
 814:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 815:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 816:../Dave/Generated/FREERTOS/tasks.c **** 
 817:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 818:../Dave/Generated/FREERTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 819:../Dave/Generated/FREERTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 820:../Dave/Generated/FREERTOS/tasks.c ****                                   void * const pvParameters,
 821:../Dave/Generated/FREERTOS/tasks.c ****                                   UBaseType_t uxPriority,
 822:../Dave/Generated/FREERTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 823:../Dave/Generated/FREERTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 824:../Dave/Generated/FREERTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
 825:../Dave/Generated/FREERTOS/tasks.c **** {
 269              	 .loc 1 825 0
 270              	 .cfi_startproc
 271              	 
 272              	 
 273 0000 80B5     	 push {r7,lr}
 274              	.LCFI5:
 275              	 .cfi_def_cfa_offset 8
 276              	 .cfi_offset 7,-8
 277              	 .cfi_offset 14,-4
 278 0002 88B0     	 sub sp,sp,#32
 279              	.LCFI6:
 280              	 .cfi_def_cfa_offset 40
 281 0004 00AF     	 add r7,sp,#0
 282              	.LCFI7:
 283              	 .cfi_def_cfa_register 7
 284 0006 F860     	 str r0,[r7,#12]
 285 0008 B960     	 str r1,[r7,#8]
 286 000a 7A60     	 str r2,[r7,#4]
 287 000c 3B60     	 str r3,[r7]
 826:../Dave/Generated/FREERTOS/tasks.c ****     StackType_t * pxTopOfStack;
 827:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t x;
 828:../Dave/Generated/FREERTOS/tasks.c **** 
 829:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 830:../Dave/Generated/FREERTOS/tasks.c ****         /* Should the task be created in privileged mode? */
 831:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xRunPrivileged;
 832:../Dave/Generated/FREERTOS/tasks.c **** 
 833:../Dave/Generated/FREERTOS/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 834:../Dave/Generated/FREERTOS/tasks.c ****         {
 835:../Dave/Generated/FREERTOS/tasks.c ****             xRunPrivileged = pdTRUE;
 836:../Dave/Generated/FREERTOS/tasks.c ****         }
 837:../Dave/Generated/FREERTOS/tasks.c ****         else
 838:../Dave/Generated/FREERTOS/tasks.c ****         {
 839:../Dave/Generated/FREERTOS/tasks.c ****             xRunPrivileged = pdFALSE;
 840:../Dave/Generated/FREERTOS/tasks.c ****         }
 841:../Dave/Generated/FREERTOS/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
 842:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 843:../Dave/Generated/FREERTOS/tasks.c **** 
 844:../Dave/Generated/FREERTOS/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
 845:../Dave/Generated/FREERTOS/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 846:../Dave/Generated/FREERTOS/tasks.c ****         {
 847:../Dave/Generated/FREERTOS/tasks.c ****             /* Fill the stack with a known value to assist debugging. */
 848:../Dave/Generated/FREERTOS/tasks.c ****             ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth
 288              	 .loc 1 848 0
 289 000e 3B6B     	 ldr r3,[r7,#48]
 290 0010 1A6B     	 ldr r2,[r3,#48]
 291 0012 7B68     	 ldr r3,[r7,#4]
 292 0014 9B00     	 lsls r3,r3,#2
 293 0016 1046     	 mov r0,r2
 294 0018 A521     	 movs r1,#165
 295 001a 1A46     	 mov r2,r3
 296 001c FFF7FEFF 	 bl memset
 849:../Dave/Generated/FREERTOS/tasks.c ****         }
 850:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 851:../Dave/Generated/FREERTOS/tasks.c **** 
 852:../Dave/Generated/FREERTOS/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
 853:../Dave/Generated/FREERTOS/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
 854:../Dave/Generated/FREERTOS/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 855:../Dave/Generated/FREERTOS/tasks.c ****      * by the port. */
 856:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
 857:../Dave/Generated/FREERTOS/tasks.c ****         {
 858:../Dave/Generated/FREERTOS/tasks.c ****             pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 297              	 .loc 1 858 0
 298 0020 3B6B     	 ldr r3,[r7,#48]
 299 0022 1A6B     	 ldr r2,[r3,#48]
 300 0024 7B68     	 ldr r3,[r7,#4]
 301 0026 03F18043 	 add r3,r3,#1073741824
 302 002a 013B     	 subs r3,r3,#1
 303 002c 9B00     	 lsls r3,r3,#2
 304 002e 1344     	 add r3,r3,r2
 305 0030 BB61     	 str r3,[r7,#24]
 859:../Dave/Generated/FREERTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 306              	 .loc 1 859 0
 307 0032 BB69     	 ldr r3,[r7,#24]
 308 0034 23F00703 	 bic r3,r3,#7
 309 0038 BB61     	 str r3,[r7,#24]
 860:../Dave/Generated/FREERTOS/tasks.c **** 
 861:../Dave/Generated/FREERTOS/tasks.c ****             /* Check the alignment of the calculated top of stack is correct. */
 862:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) po
 310              	 .loc 1 862 0
 311 003a BB69     	 ldr r3,[r7,#24]
 312 003c 03F00703 	 and r3,r3,#7
 313 0040 002B     	 cmp r3,#0
 314 0042 09D0     	 beq .L10
 315              	.LBB134:
 316              	.LBB135:
 317              	 .file 2 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC/portmacro.h"
   1:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*
   2:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * FreeRTOS Kernel V10.4.3
   3:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
   5:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * subject to the following conditions:
  11:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  12:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * copies or substantial portions of the Software.
  14:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  15:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  22:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * https://www.FreeRTOS.org
  23:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * https://github.com/FreeRTOS
  24:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  25:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * 1 tab == 4 spaces!
  26:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  */
  27:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  28:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  29:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** #ifndef PORTMACRO_H
  30:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define PORTMACRO_H
  31:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  32:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifdef __cplusplus
  33:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         extern "C" {
  34:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
  35:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  36:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------
  37:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * Port specific definitions.
  38:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  39:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * given hardware and compiler.
  41:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  42:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * These settings should not be altered.
  43:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *-----------------------------------------------------------
  44:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  */
  45:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  46:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Type definitions. */
  47:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portCHAR          char
  48:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portFLOAT         float
  49:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portDOUBLE        double
  50:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portLONG          long
  51:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portSHORT         short
  52:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portBASE_TYPE     long
  54:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  55:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     typedef long             BaseType_t;
  57:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     typedef unsigned long    UBaseType_t;
  58:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  59:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         typedef uint16_t     TickType_t;
  61:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #else
  63:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         typedef uint32_t     TickType_t;
  64:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  66:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * not need to be guarded with a critical section. */
  68:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
  70:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
  71:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  72:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Architecture specifics. */
  73:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  74:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
  78:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  79:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Scheduler utilities. */
  80:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portYIELD()                                 \
  81:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {                                                   \
  82:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  83:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  84:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****                                                         \
  85:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
  90:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  91:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    if( xSwitchRequired != pdFALSE ) portYIELD(
  94:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
  96:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  97:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Critical section management. */
  98:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     extern void vPortEnterCritical( void );
  99:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     extern void vPortExitCritical( void );
 100:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 106:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 107:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 108:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 109:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * (which build with all the ports) will build. */
 112:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 114:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 115:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 116:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Tickless idle/low power functionality. */
 117:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
 121:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 122:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 123:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Architecture specific optimisations. */
 124:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
 127:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 128:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 130:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Generic helper function. */
 131:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         {
 133:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             uint8_t ucReturn;
 134:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 135:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 137:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             return ucReturn;
 138:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         }
 139:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 140:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Check the configuration. */
 141:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #endif
 144:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 145:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 149:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 150:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 151:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 153:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 155:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 156:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 157:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifdef configASSERT
 158:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
 161:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 162:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* portNOP() is not required by this port. */
 163:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portNOP()
 164:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 165:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portINLINE              __inline
 166:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 167:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifndef portFORCE_INLINE
 168:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
 170:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 171:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {
 173:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         uint32_t ulCurrentInterrupt;
 174:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         BaseType_t xReturn;
 175:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 176:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 177:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 178:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 179:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         if( ulCurrentInterrupt == 0 )
 180:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         {
 181:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             xReturn = pdFALSE;
 182:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         }
 183:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         else
 184:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         {
 185:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             xReturn = pdTRUE;
 186:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         }
 187:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 188:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         return xReturn;
 189:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 190:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 191:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 192:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 193:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {
 195:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         uint32_t ulNewBASEPRI;
 196:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile
 318              	 .loc 2 197 0 discriminator 1
 319              	
 320 0044 4FF0FC03 	 mov r3,#252
 321 0048 83F31188 	 msr basepri,r3
 322 004c BFF36F8F 	 isb 
 323 0050 BFF34F8F 	 dsb 
 324              	
 325              	
 326              	 .thumb
 327 0054 7B61     	 str r3,[r7,#20]
 328              	.L11:
 329              	.LBE135:
 330              	.LBE134:
 331              	 .loc 1 862 0 discriminator 1
 332 0056 FEE7     	 b .L11
 333              	.L10:
 863:../Dave/Generated/FREERTOS/tasks.c **** 
 864:../Dave/Generated/FREERTOS/tasks.c ****             #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 865:../Dave/Generated/FREERTOS/tasks.c ****                 {
 866:../Dave/Generated/FREERTOS/tasks.c ****                     /* Also record the stack's high address, which may assist
 867:../Dave/Generated/FREERTOS/tasks.c ****                      * debugging. */
 868:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->pxEndOfStack = pxTopOfStack;
 869:../Dave/Generated/FREERTOS/tasks.c ****                 }
 870:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* configRECORD_STACK_HIGH_ADDRESS */
 871:../Dave/Generated/FREERTOS/tasks.c ****         }
 872:../Dave/Generated/FREERTOS/tasks.c ****     #else /* portSTACK_GROWTH */
 873:../Dave/Generated/FREERTOS/tasks.c ****         {
 874:../Dave/Generated/FREERTOS/tasks.c ****             pxTopOfStack = pxNewTCB->pxStack;
 875:../Dave/Generated/FREERTOS/tasks.c **** 
 876:../Dave/Generated/FREERTOS/tasks.c ****             /* Check the alignment of the stack buffer is correct. */
 877:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE
 878:../Dave/Generated/FREERTOS/tasks.c **** 
 879:../Dave/Generated/FREERTOS/tasks.c ****             /* The other extreme of the stack space is required if stack checking is
 880:../Dave/Generated/FREERTOS/tasks.c ****              * performed. */
 881:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 882:../Dave/Generated/FREERTOS/tasks.c ****         }
 883:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* portSTACK_GROWTH */
 884:../Dave/Generated/FREERTOS/tasks.c **** 
 885:../Dave/Generated/FREERTOS/tasks.c ****     /* Store the task name in the TCB. */
 886:../Dave/Generated/FREERTOS/tasks.c ****     if( pcName != NULL )
 334              	 .loc 1 886 0
 335 0058 BB68     	 ldr r3,[r7,#8]
 336 005a 002B     	 cmp r3,#0
 337 005c 1ED0     	 beq .L12
 887:../Dave/Generated/FREERTOS/tasks.c ****     {
 888:../Dave/Generated/FREERTOS/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 338              	 .loc 1 888 0
 339 005e 0023     	 movs r3,#0
 340 0060 FB61     	 str r3,[r7,#28]
 341 0062 13E0     	 b .L13
 342              	.L16:
 889:../Dave/Generated/FREERTOS/tasks.c ****         {
 890:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 343              	 .loc 1 890 0
 344 0064 BA68     	 ldr r2,[r7,#8]
 345 0066 FB69     	 ldr r3,[r7,#28]
 346 0068 1344     	 add r3,r3,r2
 347 006a 1978     	 ldrb r1,[r3]
 348 006c 3A6B     	 ldr r2,[r7,#48]
 349 006e FB69     	 ldr r3,[r7,#28]
 350 0070 1344     	 add r3,r3,r2
 351 0072 3033     	 adds r3,r3,#48
 352 0074 0A46     	 mov r2,r1
 353 0076 1A71     	 strb r2,[r3,#4]
 891:../Dave/Generated/FREERTOS/tasks.c **** 
 892:../Dave/Generated/FREERTOS/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 893:../Dave/Generated/FREERTOS/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 894:../Dave/Generated/FREERTOS/tasks.c ****              * string is not accessible (extremely unlikely). */
 895:../Dave/Generated/FREERTOS/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
 354              	 .loc 1 895 0
 355 0078 BA68     	 ldr r2,[r7,#8]
 356 007a FB69     	 ldr r3,[r7,#28]
 357 007c 1344     	 add r3,r3,r2
 358 007e 1B78     	 ldrb r3,[r3]
 359 0080 002B     	 cmp r3,#0
 360 0082 00D1     	 bne .L14
 896:../Dave/Generated/FREERTOS/tasks.c ****             {
 897:../Dave/Generated/FREERTOS/tasks.c ****                 break;
 361              	 .loc 1 897 0
 362 0084 05E0     	 b .L15
 363              	.L14:
 888:../Dave/Generated/FREERTOS/tasks.c ****         {
 364              	 .loc 1 888 0 discriminator 2
 365 0086 FB69     	 ldr r3,[r7,#28]
 366 0088 0133     	 adds r3,r3,#1
 367 008a FB61     	 str r3,[r7,#28]
 368              	.L13:
 888:../Dave/Generated/FREERTOS/tasks.c ****         {
 369              	 .loc 1 888 0 is_stmt 0 discriminator 1
 370 008c FB69     	 ldr r3,[r7,#28]
 371 008e 0F2B     	 cmp r3,#15
 372 0090 E8D9     	 bls .L16
 373              	.L15:
 898:../Dave/Generated/FREERTOS/tasks.c ****             }
 899:../Dave/Generated/FREERTOS/tasks.c ****             else
 900:../Dave/Generated/FREERTOS/tasks.c ****             {
 901:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 902:../Dave/Generated/FREERTOS/tasks.c ****             }
 903:../Dave/Generated/FREERTOS/tasks.c ****         }
 904:../Dave/Generated/FREERTOS/tasks.c **** 
 905:../Dave/Generated/FREERTOS/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
 906:../Dave/Generated/FREERTOS/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
 907:../Dave/Generated/FREERTOS/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 374              	 .loc 1 907 0 is_stmt 1
 375 0092 3B6B     	 ldr r3,[r7,#48]
 376 0094 0022     	 movs r2,#0
 377 0096 83F84320 	 strb r2,[r3,#67]
 378 009a 03E0     	 b .L17
 379              	.L12:
 908:../Dave/Generated/FREERTOS/tasks.c ****     }
 909:../Dave/Generated/FREERTOS/tasks.c ****     else
 910:../Dave/Generated/FREERTOS/tasks.c ****     {
 911:../Dave/Generated/FREERTOS/tasks.c ****         /* The task has not been given a name, so just ensure there is a NULL
 912:../Dave/Generated/FREERTOS/tasks.c ****          * terminator when it is read out. */
 913:../Dave/Generated/FREERTOS/tasks.c ****         pxNewTCB->pcTaskName[ 0 ] = 0x00;
 380              	 .loc 1 913 0
 381 009c 3B6B     	 ldr r3,[r7,#48]
 382 009e 0022     	 movs r2,#0
 383 00a0 83F83420 	 strb r2,[r3,#52]
 384              	.L17:
 914:../Dave/Generated/FREERTOS/tasks.c ****     }
 915:../Dave/Generated/FREERTOS/tasks.c **** 
 916:../Dave/Generated/FREERTOS/tasks.c ****     /* This is used as an array index so must ensure it's not too large.  First
 917:../Dave/Generated/FREERTOS/tasks.c ****      * remove the privilege bit if one is present. */
 918:../Dave/Generated/FREERTOS/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 385              	 .loc 1 918 0
 386 00a4 BB6A     	 ldr r3,[r7,#40]
 387 00a6 042B     	 cmp r3,#4
 388 00a8 01D9     	 bls .L18
 919:../Dave/Generated/FREERTOS/tasks.c ****     {
 920:../Dave/Generated/FREERTOS/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 389              	 .loc 1 920 0
 390 00aa 0423     	 movs r3,#4
 391 00ac BB62     	 str r3,[r7,#40]
 392              	.L18:
 921:../Dave/Generated/FREERTOS/tasks.c ****     }
 922:../Dave/Generated/FREERTOS/tasks.c ****     else
 923:../Dave/Generated/FREERTOS/tasks.c ****     {
 924:../Dave/Generated/FREERTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 925:../Dave/Generated/FREERTOS/tasks.c ****     }
 926:../Dave/Generated/FREERTOS/tasks.c **** 
 927:../Dave/Generated/FREERTOS/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
 393              	 .loc 1 927 0
 394 00ae 3B6B     	 ldr r3,[r7,#48]
 395 00b0 BA6A     	 ldr r2,[r7,#40]
 396 00b2 DA62     	 str r2,[r3,#44]
 928:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 929:../Dave/Generated/FREERTOS/tasks.c ****         {
 930:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->uxBasePriority = uxPriority;
 397              	 .loc 1 930 0
 398 00b4 3B6B     	 ldr r3,[r7,#48]
 399 00b6 BA6A     	 ldr r2,[r7,#40]
 400 00b8 DA64     	 str r2,[r3,#76]
 931:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->uxMutexesHeld = 0;
 401              	 .loc 1 931 0
 402 00ba 3B6B     	 ldr r3,[r7,#48]
 403 00bc 0022     	 movs r2,#0
 404 00be 1A65     	 str r2,[r3,#80]
 932:../Dave/Generated/FREERTOS/tasks.c ****         }
 933:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* configUSE_MUTEXES */
 934:../Dave/Generated/FREERTOS/tasks.c **** 
 935:../Dave/Generated/FREERTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 405              	 .loc 1 935 0
 406 00c0 3B6B     	 ldr r3,[r7,#48]
 407 00c2 0433     	 adds r3,r3,#4
 408 00c4 1846     	 mov r0,r3
 409 00c6 FFF7FEFF 	 bl vListInitialiseItem
 936:../Dave/Generated/FREERTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 410              	 .loc 1 936 0
 411 00ca 3B6B     	 ldr r3,[r7,#48]
 412 00cc 1833     	 adds r3,r3,#24
 413 00ce 1846     	 mov r0,r3
 414 00d0 FFF7FEFF 	 bl vListInitialiseItem
 937:../Dave/Generated/FREERTOS/tasks.c **** 
 938:../Dave/Generated/FREERTOS/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 939:../Dave/Generated/FREERTOS/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
 940:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 415              	 .loc 1 940 0
 416 00d4 3B6B     	 ldr r3,[r7,#48]
 417 00d6 3A6B     	 ldr r2,[r7,#48]
 418 00d8 1A61     	 str r2,[r3,#16]
 941:../Dave/Generated/FREERTOS/tasks.c **** 
 942:../Dave/Generated/FREERTOS/tasks.c ****     /* Event lists are always in priority order. */
 943:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
 419              	 .loc 1 943 0
 420 00da BB6A     	 ldr r3,[r7,#40]
 421 00dc C3F10502 	 rsb r2,r3,#5
 422 00e0 3B6B     	 ldr r3,[r7,#48]
 423 00e2 9A61     	 str r2,[r3,#24]
 944:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 424              	 .loc 1 944 0
 425 00e4 3B6B     	 ldr r3,[r7,#48]
 426 00e6 3A6B     	 ldr r2,[r7,#48]
 427 00e8 5A62     	 str r2,[r3,#36]
 945:../Dave/Generated/FREERTOS/tasks.c **** 
 946:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 947:../Dave/Generated/FREERTOS/tasks.c ****         {
 948:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 949:../Dave/Generated/FREERTOS/tasks.c ****         }
 950:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* portCRITICAL_NESTING_IN_TCB */
 951:../Dave/Generated/FREERTOS/tasks.c **** 
 952:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 953:../Dave/Generated/FREERTOS/tasks.c ****         {
 954:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->pxTaskTag = NULL;
 955:../Dave/Generated/FREERTOS/tasks.c ****         }
 956:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* configUSE_APPLICATION_TASK_TAG */
 957:../Dave/Generated/FREERTOS/tasks.c **** 
 958:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 959:../Dave/Generated/FREERTOS/tasks.c ****         {
 960:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->ulRunTimeCounter = 0UL;
 961:../Dave/Generated/FREERTOS/tasks.c ****         }
 962:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* configGENERATE_RUN_TIME_STATS */
 963:../Dave/Generated/FREERTOS/tasks.c **** 
 964:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 965:../Dave/Generated/FREERTOS/tasks.c ****         {
 966:../Dave/Generated/FREERTOS/tasks.c ****             vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ul
 967:../Dave/Generated/FREERTOS/tasks.c ****         }
 968:../Dave/Generated/FREERTOS/tasks.c ****     #else
 969:../Dave/Generated/FREERTOS/tasks.c ****         {
 970:../Dave/Generated/FREERTOS/tasks.c ****             /* Avoid compiler warning about unreferenced parameter. */
 971:../Dave/Generated/FREERTOS/tasks.c ****             ( void ) xRegions;
 972:../Dave/Generated/FREERTOS/tasks.c ****         }
 973:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 974:../Dave/Generated/FREERTOS/tasks.c **** 
 975:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 976:../Dave/Generated/FREERTOS/tasks.c ****         {
 977:../Dave/Generated/FREERTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNe
 428              	 .loc 1 977 0
 429 00ea 3B6B     	 ldr r3,[r7,#48]
 430 00ec 5433     	 adds r3,r3,#84
 431 00ee 1846     	 mov r0,r3
 432 00f0 0021     	 movs r1,#0
 433 00f2 1422     	 movs r2,#20
 434 00f4 FFF7FEFF 	 bl memset
 978:../Dave/Generated/FREERTOS/tasks.c ****         }
 979:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 980:../Dave/Generated/FREERTOS/tasks.c **** 
 981:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 982:../Dave/Generated/FREERTOS/tasks.c ****         {
 983:../Dave/Generated/FREERTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotif
 435              	 .loc 1 983 0
 436 00f8 3B6B     	 ldr r3,[r7,#48]
 437 00fa 6833     	 adds r3,r3,#104
 438 00fc 1846     	 mov r0,r3
 439 00fe 0021     	 movs r1,#0
 440 0100 0422     	 movs r2,#4
 441 0102 FFF7FEFF 	 bl memset
 984:../Dave/Generated/FREERTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyS
 442              	 .loc 1 984 0
 443 0106 3B6B     	 ldr r3,[r7,#48]
 444 0108 6C33     	 adds r3,r3,#108
 445 010a 1846     	 mov r0,r3
 446 010c 0021     	 movs r1,#0
 447 010e 0122     	 movs r2,#1
 448 0110 FFF7FEFF 	 bl memset
 985:../Dave/Generated/FREERTOS/tasks.c ****         }
 986:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 987:../Dave/Generated/FREERTOS/tasks.c **** 
 988:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 989:../Dave/Generated/FREERTOS/tasks.c ****         {
 990:../Dave/Generated/FREERTOS/tasks.c ****             /* Initialise this task's Newlib reent structure.
 991:../Dave/Generated/FREERTOS/tasks.c ****              * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 992:../Dave/Generated/FREERTOS/tasks.c ****              * for additional information. */
 993:../Dave/Generated/FREERTOS/tasks.c ****             _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 994:../Dave/Generated/FREERTOS/tasks.c ****         }
 995:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 996:../Dave/Generated/FREERTOS/tasks.c **** 
 997:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 998:../Dave/Generated/FREERTOS/tasks.c ****         {
 999:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->ucDelayAborted = pdFALSE;
 449              	 .loc 1 999 0
 450 0114 3B6B     	 ldr r3,[r7,#48]
 451 0116 0022     	 movs r2,#0
 452 0118 83F86D20 	 strb r2,[r3,#109]
1000:../Dave/Generated/FREERTOS/tasks.c ****         }
1001:../Dave/Generated/FREERTOS/tasks.c ****     #endif
1002:../Dave/Generated/FREERTOS/tasks.c **** 
1003:../Dave/Generated/FREERTOS/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
1004:../Dave/Generated/FREERTOS/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
1005:../Dave/Generated/FREERTOS/tasks.c ****      * to the start of the task function. Once the stack has been initialised
1006:../Dave/Generated/FREERTOS/tasks.c ****      * the top of stack variable is updated. */
1007:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
1008:../Dave/Generated/FREERTOS/tasks.c ****         {
1009:../Dave/Generated/FREERTOS/tasks.c ****             /* If the port has capability to detect stack overflow,
1010:../Dave/Generated/FREERTOS/tasks.c ****              * pass the stack end address to the stack initialization
1011:../Dave/Generated/FREERTOS/tasks.c ****              * function as well. */
1012:../Dave/Generated/FREERTOS/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1013:../Dave/Generated/FREERTOS/tasks.c ****                 {
1014:../Dave/Generated/FREERTOS/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1015:../Dave/Generated/FREERTOS/tasks.c ****                         {
1016:../Dave/Generated/FREERTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1017:../Dave/Generated/FREERTOS/tasks.c ****                         }
1018:../Dave/Generated/FREERTOS/tasks.c ****                     #else /* portSTACK_GROWTH */
1019:../Dave/Generated/FREERTOS/tasks.c ****                         {
1020:../Dave/Generated/FREERTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1021:../Dave/Generated/FREERTOS/tasks.c ****                         }
1022:../Dave/Generated/FREERTOS/tasks.c ****                     #endif /* portSTACK_GROWTH */
1023:../Dave/Generated/FREERTOS/tasks.c ****                 }
1024:../Dave/Generated/FREERTOS/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1025:../Dave/Generated/FREERTOS/tasks.c ****                 {
1026:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
1027:../Dave/Generated/FREERTOS/tasks.c ****                 }
1028:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1029:../Dave/Generated/FREERTOS/tasks.c ****         }
1030:../Dave/Generated/FREERTOS/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
1031:../Dave/Generated/FREERTOS/tasks.c ****         {
1032:../Dave/Generated/FREERTOS/tasks.c ****             /* If the port has capability to detect stack overflow,
1033:../Dave/Generated/FREERTOS/tasks.c ****              * pass the stack end address to the stack initialization
1034:../Dave/Generated/FREERTOS/tasks.c ****              * function as well. */
1035:../Dave/Generated/FREERTOS/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1036:../Dave/Generated/FREERTOS/tasks.c ****                 {
1037:../Dave/Generated/FREERTOS/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1038:../Dave/Generated/FREERTOS/tasks.c ****                         {
1039:../Dave/Generated/FREERTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1040:../Dave/Generated/FREERTOS/tasks.c ****                         }
1041:../Dave/Generated/FREERTOS/tasks.c ****                     #else /* portSTACK_GROWTH */
1042:../Dave/Generated/FREERTOS/tasks.c ****                         {
1043:../Dave/Generated/FREERTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1044:../Dave/Generated/FREERTOS/tasks.c ****                         }
1045:../Dave/Generated/FREERTOS/tasks.c ****                     #endif /* portSTACK_GROWTH */
1046:../Dave/Generated/FREERTOS/tasks.c ****                 }
1047:../Dave/Generated/FREERTOS/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1048:../Dave/Generated/FREERTOS/tasks.c ****                 {
1049:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
 453              	 .loc 1 1049 0
 454 011c B869     	 ldr r0,[r7,#24]
 455 011e F968     	 ldr r1,[r7,#12]
 456 0120 3A68     	 ldr r2,[r7]
 457 0122 FFF7FEFF 	 bl pxPortInitialiseStack
 458 0126 0246     	 mov r2,r0
 459 0128 3B6B     	 ldr r3,[r7,#48]
 460 012a 1A60     	 str r2,[r3]
1050:../Dave/Generated/FREERTOS/tasks.c ****                 }
1051:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1052:../Dave/Generated/FREERTOS/tasks.c ****         }
1053:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
1054:../Dave/Generated/FREERTOS/tasks.c **** 
1055:../Dave/Generated/FREERTOS/tasks.c ****     if( pxCreatedTask != NULL )
 461              	 .loc 1 1055 0
 462 012c FB6A     	 ldr r3,[r7,#44]
 463 012e 002B     	 cmp r3,#0
 464 0130 02D0     	 beq .L9
1056:../Dave/Generated/FREERTOS/tasks.c ****     {
1057:../Dave/Generated/FREERTOS/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
1058:../Dave/Generated/FREERTOS/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
1059:../Dave/Generated/FREERTOS/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 465              	 .loc 1 1059 0
 466 0132 FB6A     	 ldr r3,[r7,#44]
 467 0134 3A6B     	 ldr r2,[r7,#48]
 468 0136 1A60     	 str r2,[r3]
 469              	.L9:
1060:../Dave/Generated/FREERTOS/tasks.c ****     }
1061:../Dave/Generated/FREERTOS/tasks.c ****     else
1062:../Dave/Generated/FREERTOS/tasks.c ****     {
1063:../Dave/Generated/FREERTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1064:../Dave/Generated/FREERTOS/tasks.c ****     }
1065:../Dave/Generated/FREERTOS/tasks.c **** }
 470              	 .loc 1 1065 0
 471 0138 2037     	 adds r7,r7,#32
 472              	.LCFI8:
 473              	 .cfi_def_cfa_offset 8
 474 013a BD46     	 mov sp,r7
 475              	.LCFI9:
 476              	 .cfi_def_cfa_register 13
 477              	 
 478 013c 80BD     	 pop {r7,pc}
 479              	 .cfi_endproc
 480              	.LFE139:
 482 013e 00BF     	 .section .text.prvAddNewTaskToReadyList,"ax",%progbits
 483              	 .align 2
 484              	 .thumb
 485              	 .thumb_func
 487              	prvAddNewTaskToReadyList:
 488              	.LFB140:
1066:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1067:../Dave/Generated/FREERTOS/tasks.c **** 
1068:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1069:../Dave/Generated/FREERTOS/tasks.c **** {
 489              	 .loc 1 1069 0
 490              	 .cfi_startproc
 491              	 
 492              	 
 493 0000 80B5     	 push {r7,lr}
 494              	.LCFI10:
 495              	 .cfi_def_cfa_offset 8
 496              	 .cfi_offset 7,-8
 497              	 .cfi_offset 14,-4
 498 0002 82B0     	 sub sp,sp,#8
 499              	.LCFI11:
 500              	 .cfi_def_cfa_offset 16
 501 0004 00AF     	 add r7,sp,#0
 502              	.LCFI12:
 503              	 .cfi_def_cfa_register 7
 504 0006 7860     	 str r0,[r7,#4]
1070:../Dave/Generated/FREERTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
1071:../Dave/Generated/FREERTOS/tasks.c ****      * updated. */
1072:../Dave/Generated/FREERTOS/tasks.c ****     taskENTER_CRITICAL();
 505              	 .loc 1 1072 0
 506 0008 FFF7FEFF 	 bl vPortEnterCritical
1073:../Dave/Generated/FREERTOS/tasks.c ****     {
1074:../Dave/Generated/FREERTOS/tasks.c ****         uxCurrentNumberOfTasks++;
 507              	 .loc 1 1074 0
 508 000c 2D4B     	 ldr r3,.L24
 509 000e 1B68     	 ldr r3,[r3]
 510 0010 0133     	 adds r3,r3,#1
 511 0012 2C4A     	 ldr r2,.L24
 512 0014 1360     	 str r3,[r2]
1075:../Dave/Generated/FREERTOS/tasks.c **** 
1076:../Dave/Generated/FREERTOS/tasks.c ****         if( pxCurrentTCB == NULL )
 513              	 .loc 1 1076 0
 514 0016 2C4B     	 ldr r3,.L24+4
 515 0018 1B68     	 ldr r3,[r3]
 516 001a 002B     	 cmp r3,#0
 517 001c 09D1     	 bne .L21
1077:../Dave/Generated/FREERTOS/tasks.c ****         {
1078:../Dave/Generated/FREERTOS/tasks.c ****             /* There are no other tasks, or all the other tasks are in
1079:../Dave/Generated/FREERTOS/tasks.c ****              * the suspended state - make this the current task. */
1080:../Dave/Generated/FREERTOS/tasks.c ****             pxCurrentTCB = pxNewTCB;
 518              	 .loc 1 1080 0
 519 001e 2A4A     	 ldr r2,.L24+4
 520 0020 7B68     	 ldr r3,[r7,#4]
 521 0022 1360     	 str r3,[r2]
1081:../Dave/Generated/FREERTOS/tasks.c **** 
1082:../Dave/Generated/FREERTOS/tasks.c ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 522              	 .loc 1 1082 0
 523 0024 274B     	 ldr r3,.L24
 524 0026 1B68     	 ldr r3,[r3]
 525 0028 012B     	 cmp r3,#1
 526 002a 10D1     	 bne .L22
1083:../Dave/Generated/FREERTOS/tasks.c ****             {
1084:../Dave/Generated/FREERTOS/tasks.c ****                 /* This is the first task to be created so do the preliminary
1085:../Dave/Generated/FREERTOS/tasks.c ****                  * initialisation required.  We will not recover if this call
1086:../Dave/Generated/FREERTOS/tasks.c ****                  * fails, but we will report the failure. */
1087:../Dave/Generated/FREERTOS/tasks.c ****                 prvInitialiseTaskLists();
 527              	 .loc 1 1087 0
 528 002c FFF7FEFF 	 bl prvInitialiseTaskLists
 529 0030 0DE0     	 b .L22
 530              	.L21:
1088:../Dave/Generated/FREERTOS/tasks.c ****             }
1089:../Dave/Generated/FREERTOS/tasks.c ****             else
1090:../Dave/Generated/FREERTOS/tasks.c ****             {
1091:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1092:../Dave/Generated/FREERTOS/tasks.c ****             }
1093:../Dave/Generated/FREERTOS/tasks.c ****         }
1094:../Dave/Generated/FREERTOS/tasks.c ****         else
1095:../Dave/Generated/FREERTOS/tasks.c ****         {
1096:../Dave/Generated/FREERTOS/tasks.c ****             /* If the scheduler is not already running, make this task the
1097:../Dave/Generated/FREERTOS/tasks.c ****              * current task if it is the highest priority task to be created
1098:../Dave/Generated/FREERTOS/tasks.c ****              * so far. */
1099:../Dave/Generated/FREERTOS/tasks.c ****             if( xSchedulerRunning == pdFALSE )
 531              	 .loc 1 1099 0
 532 0032 264B     	 ldr r3,.L24+8
 533 0034 1B68     	 ldr r3,[r3]
 534 0036 002B     	 cmp r3,#0
 535 0038 09D1     	 bne .L22
1100:../Dave/Generated/FREERTOS/tasks.c ****             {
1101:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 536              	 .loc 1 1101 0
 537 003a 234B     	 ldr r3,.L24+4
 538 003c 1B68     	 ldr r3,[r3]
 539 003e DA6A     	 ldr r2,[r3,#44]
 540 0040 7B68     	 ldr r3,[r7,#4]
 541 0042 DB6A     	 ldr r3,[r3,#44]
 542 0044 9A42     	 cmp r2,r3
 543 0046 02D8     	 bhi .L22
1102:../Dave/Generated/FREERTOS/tasks.c ****                 {
1103:../Dave/Generated/FREERTOS/tasks.c ****                     pxCurrentTCB = pxNewTCB;
 544              	 .loc 1 1103 0
 545 0048 1F4A     	 ldr r2,.L24+4
 546 004a 7B68     	 ldr r3,[r7,#4]
 547 004c 1360     	 str r3,[r2]
 548              	.L22:
1104:../Dave/Generated/FREERTOS/tasks.c ****                 }
1105:../Dave/Generated/FREERTOS/tasks.c ****                 else
1106:../Dave/Generated/FREERTOS/tasks.c ****                 {
1107:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1108:../Dave/Generated/FREERTOS/tasks.c ****                 }
1109:../Dave/Generated/FREERTOS/tasks.c ****             }
1110:../Dave/Generated/FREERTOS/tasks.c ****             else
1111:../Dave/Generated/FREERTOS/tasks.c ****             {
1112:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1113:../Dave/Generated/FREERTOS/tasks.c ****             }
1114:../Dave/Generated/FREERTOS/tasks.c ****         }
1115:../Dave/Generated/FREERTOS/tasks.c **** 
1116:../Dave/Generated/FREERTOS/tasks.c ****         uxTaskNumber++;
 549              	 .loc 1 1116 0
 550 004e 204B     	 ldr r3,.L24+12
 551 0050 1B68     	 ldr r3,[r3]
 552 0052 0133     	 adds r3,r3,#1
 553 0054 1E4A     	 ldr r2,.L24+12
 554 0056 1360     	 str r3,[r2]
1117:../Dave/Generated/FREERTOS/tasks.c **** 
1118:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
1119:../Dave/Generated/FREERTOS/tasks.c ****             {
1120:../Dave/Generated/FREERTOS/tasks.c ****                 /* Add a counter into the TCB for tracing only. */
1121:../Dave/Generated/FREERTOS/tasks.c ****                 pxNewTCB->uxTCBNumber = uxTaskNumber;
 555              	 .loc 1 1121 0
 556 0058 1D4B     	 ldr r3,.L24+12
 557 005a 1A68     	 ldr r2,[r3]
 558 005c 7B68     	 ldr r3,[r7,#4]
 559 005e 5A64     	 str r2,[r3,#68]
1122:../Dave/Generated/FREERTOS/tasks.c ****             }
1123:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_TRACE_FACILITY */
1124:../Dave/Generated/FREERTOS/tasks.c ****         traceTASK_CREATE( pxNewTCB );
1125:../Dave/Generated/FREERTOS/tasks.c **** 
1126:../Dave/Generated/FREERTOS/tasks.c ****         prvAddTaskToReadyList( pxNewTCB );
 560              	 .loc 1 1126 0
 561 0060 7B68     	 ldr r3,[r7,#4]
 562 0062 DB6A     	 ldr r3,[r3,#44]
 563 0064 1A46     	 mov r2,r3
 564 0066 0123     	 movs r3,#1
 565 0068 03FA02F2 	 lsl r2,r3,r2
 566 006c 194B     	 ldr r3,.L24+16
 567 006e 1B68     	 ldr r3,[r3]
 568 0070 1343     	 orrs r3,r3,r2
 569 0072 184A     	 ldr r2,.L24+16
 570 0074 1360     	 str r3,[r2]
 571 0076 7B68     	 ldr r3,[r7,#4]
 572 0078 DA6A     	 ldr r2,[r3,#44]
 573 007a 1346     	 mov r3,r2
 574 007c 9B00     	 lsls r3,r3,#2
 575 007e 1344     	 add r3,r3,r2
 576 0080 9B00     	 lsls r3,r3,#2
 577 0082 154A     	 ldr r2,.L24+20
 578 0084 1A44     	 add r2,r2,r3
 579 0086 7B68     	 ldr r3,[r7,#4]
 580 0088 0433     	 adds r3,r3,#4
 581 008a 1046     	 mov r0,r2
 582 008c 1946     	 mov r1,r3
 583 008e FFF7FEFF 	 bl vListInsertEnd
1127:../Dave/Generated/FREERTOS/tasks.c **** 
1128:../Dave/Generated/FREERTOS/tasks.c ****         portSETUP_TCB( pxNewTCB );
1129:../Dave/Generated/FREERTOS/tasks.c ****     }
1130:../Dave/Generated/FREERTOS/tasks.c ****     taskEXIT_CRITICAL();
 584              	 .loc 1 1130 0
 585 0092 FFF7FEFF 	 bl vPortExitCritical
1131:../Dave/Generated/FREERTOS/tasks.c **** 
1132:../Dave/Generated/FREERTOS/tasks.c ****     if( xSchedulerRunning != pdFALSE )
 586              	 .loc 1 1132 0
 587 0096 0D4B     	 ldr r3,.L24+8
 588 0098 1B68     	 ldr r3,[r3]
 589 009a 002B     	 cmp r3,#0
 590 009c 0ED0     	 beq .L20
1133:../Dave/Generated/FREERTOS/tasks.c ****     {
1134:../Dave/Generated/FREERTOS/tasks.c ****         /* If the created task is of a higher priority than the current task
1135:../Dave/Generated/FREERTOS/tasks.c ****          * then it should run now. */
1136:../Dave/Generated/FREERTOS/tasks.c ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 591              	 .loc 1 1136 0
 592 009e 0A4B     	 ldr r3,.L24+4
 593 00a0 1B68     	 ldr r3,[r3]
 594 00a2 DA6A     	 ldr r2,[r3,#44]
 595 00a4 7B68     	 ldr r3,[r7,#4]
 596 00a6 DB6A     	 ldr r3,[r3,#44]
 597 00a8 9A42     	 cmp r2,r3
 598 00aa 07D2     	 bcs .L20
1137:../Dave/Generated/FREERTOS/tasks.c ****         {
1138:../Dave/Generated/FREERTOS/tasks.c ****             taskYIELD_IF_USING_PREEMPTION();
 599              	 .loc 1 1138 0
 600 00ac 0B4B     	 ldr r3,.L24+24
 601 00ae 4FF08052 	 mov r2,#268435456
 602 00b2 1A60     	 str r2,[r3]
 603              	
 604 00b4 BFF34F8F 	 dsb
 605              	
 606              	
 607 00b8 BFF36F8F 	 isb
 608              	
 609              	 .thumb
 610              	.L20:
1139:../Dave/Generated/FREERTOS/tasks.c ****         }
1140:../Dave/Generated/FREERTOS/tasks.c ****         else
1141:../Dave/Generated/FREERTOS/tasks.c ****         {
1142:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1143:../Dave/Generated/FREERTOS/tasks.c ****         }
1144:../Dave/Generated/FREERTOS/tasks.c ****     }
1145:../Dave/Generated/FREERTOS/tasks.c ****     else
1146:../Dave/Generated/FREERTOS/tasks.c ****     {
1147:../Dave/Generated/FREERTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1148:../Dave/Generated/FREERTOS/tasks.c ****     }
1149:../Dave/Generated/FREERTOS/tasks.c **** }
 611              	 .loc 1 1149 0
 612 00bc 0837     	 adds r7,r7,#8
 613              	.LCFI13:
 614              	 .cfi_def_cfa_offset 8
 615 00be BD46     	 mov sp,r7
 616              	.LCFI14:
 617              	 .cfi_def_cfa_register 13
 618              	 
 619 00c0 80BD     	 pop {r7,pc}
 620              	.L25:
 621 00c2 00BF     	 .align 2
 622              	.L24:
 623 00c4 00000000 	 .word uxCurrentNumberOfTasks
 624 00c8 00000000 	 .word pxCurrentTCB
 625 00cc 00000000 	 .word xSchedulerRunning
 626 00d0 00000000 	 .word uxTaskNumber
 627 00d4 00000000 	 .word uxTopReadyPriority
 628 00d8 00000000 	 .word pxReadyTasksLists
 629 00dc 04ED00E0 	 .word -536810236
 630              	 .cfi_endproc
 631              	.LFE140:
 633              	 .section .text.vTaskDelete,"ax",%progbits
 634              	 .align 2
 635              	 .global vTaskDelete
 636              	 .thumb
 637              	 .thumb_func
 639              	vTaskDelete:
 640              	.LFB141:
1150:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1151:../Dave/Generated/FREERTOS/tasks.c **** 
1152:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1153:../Dave/Generated/FREERTOS/tasks.c **** 
1154:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1155:../Dave/Generated/FREERTOS/tasks.c ****     {
 641              	 .loc 1 1155 0
 642              	 .cfi_startproc
 643              	 
 644              	 
 645 0000 80B5     	 push {r7,lr}
 646              	.LCFI15:
 647              	 .cfi_def_cfa_offset 8
 648              	 .cfi_offset 7,-8
 649              	 .cfi_offset 14,-4
 650 0002 84B0     	 sub sp,sp,#16
 651              	.LCFI16:
 652              	 .cfi_def_cfa_offset 24
 653 0004 00AF     	 add r7,sp,#0
 654              	.LCFI17:
 655              	 .cfi_def_cfa_register 7
 656 0006 7860     	 str r0,[r7,#4]
1156:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
1157:../Dave/Generated/FREERTOS/tasks.c **** 
1158:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 657              	 .loc 1 1158 0
 658 0008 FFF7FEFF 	 bl vPortEnterCritical
1159:../Dave/Generated/FREERTOS/tasks.c ****         {
1160:../Dave/Generated/FREERTOS/tasks.c ****             /* If null is passed in here then it is the calling task that is
1161:../Dave/Generated/FREERTOS/tasks.c ****              * being deleted. */
1162:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 659              	 .loc 1 1162 0
 660 000c 7B68     	 ldr r3,[r7,#4]
 661 000e 002B     	 cmp r3,#0
 662 0010 02D1     	 bne .L27
 663              	 .loc 1 1162 0 is_stmt 0 discriminator 1
 664 0012 384B     	 ldr r3,.L37
 665 0014 1B68     	 ldr r3,[r3]
 666 0016 00E0     	 b .L28
 667              	.L27:
 668              	 .loc 1 1162 0 discriminator 2
 669 0018 7B68     	 ldr r3,[r7,#4]
 670              	.L28:
 671              	 .loc 1 1162 0 discriminator 4
 672 001a FB60     	 str r3,[r7,#12]
1163:../Dave/Generated/FREERTOS/tasks.c **** 
1164:../Dave/Generated/FREERTOS/tasks.c ****             /* Remove task from the ready/delayed list. */
1165:../Dave/Generated/FREERTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 673              	 .loc 1 1165 0 is_stmt 1 discriminator 4
 674 001c FB68     	 ldr r3,[r7,#12]
 675 001e 0433     	 adds r3,r3,#4
 676 0020 1846     	 mov r0,r3
 677 0022 FFF7FEFF 	 bl uxListRemove
 678 0026 0346     	 mov r3,r0
 679 0028 002B     	 cmp r3,#0
 680 002a 15D1     	 bne .L29
1166:../Dave/Generated/FREERTOS/tasks.c ****             {
1167:../Dave/Generated/FREERTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 681              	 .loc 1 1167 0
 682 002c FB68     	 ldr r3,[r7,#12]
 683 002e DA6A     	 ldr r2,[r3,#44]
 684 0030 3149     	 ldr r1,.L37+4
 685 0032 1346     	 mov r3,r2
 686 0034 9B00     	 lsls r3,r3,#2
 687 0036 1344     	 add r3,r3,r2
 688 0038 9B00     	 lsls r3,r3,#2
 689 003a 0B44     	 add r3,r3,r1
 690 003c 1B68     	 ldr r3,[r3]
 691 003e 002B     	 cmp r3,#0
 692 0040 0AD1     	 bne .L29
 693              	 .loc 1 1167 0 is_stmt 0 discriminator 1
 694 0042 FB68     	 ldr r3,[r7,#12]
 695 0044 DB6A     	 ldr r3,[r3,#44]
 696 0046 1A46     	 mov r2,r3
 697 0048 0123     	 movs r3,#1
 698 004a 9340     	 lsls r3,r3,r2
 699 004c DA43     	 mvns r2,r3
 700 004e 2B4B     	 ldr r3,.L37+8
 701 0050 1B68     	 ldr r3,[r3]
 702 0052 1340     	 ands r3,r3,r2
 703 0054 294A     	 ldr r2,.L37+8
 704 0056 1360     	 str r3,[r2]
 705              	.L29:
1168:../Dave/Generated/FREERTOS/tasks.c ****             }
1169:../Dave/Generated/FREERTOS/tasks.c ****             else
1170:../Dave/Generated/FREERTOS/tasks.c ****             {
1171:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1172:../Dave/Generated/FREERTOS/tasks.c ****             }
1173:../Dave/Generated/FREERTOS/tasks.c **** 
1174:../Dave/Generated/FREERTOS/tasks.c ****             /* Is the task waiting on an event also? */
1175:../Dave/Generated/FREERTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 706              	 .loc 1 1175 0 is_stmt 1
 707 0058 FB68     	 ldr r3,[r7,#12]
 708 005a 9B6A     	 ldr r3,[r3,#40]
 709 005c 002B     	 cmp r3,#0
 710 005e 04D0     	 beq .L31
1176:../Dave/Generated/FREERTOS/tasks.c ****             {
1177:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 711              	 .loc 1 1177 0
 712 0060 FB68     	 ldr r3,[r7,#12]
 713 0062 1833     	 adds r3,r3,#24
 714 0064 1846     	 mov r0,r3
 715 0066 FFF7FEFF 	 bl uxListRemove
 716              	.L31:
1178:../Dave/Generated/FREERTOS/tasks.c ****             }
1179:../Dave/Generated/FREERTOS/tasks.c ****             else
1180:../Dave/Generated/FREERTOS/tasks.c ****             {
1181:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1182:../Dave/Generated/FREERTOS/tasks.c ****             }
1183:../Dave/Generated/FREERTOS/tasks.c **** 
1184:../Dave/Generated/FREERTOS/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1185:../Dave/Generated/FREERTOS/tasks.c ****              * detect that the task lists need re-generating.  This is done before
1186:../Dave/Generated/FREERTOS/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1187:../Dave/Generated/FREERTOS/tasks.c ****              * not return. */
1188:../Dave/Generated/FREERTOS/tasks.c ****             uxTaskNumber++;
 717              	 .loc 1 1188 0
 718 006a 254B     	 ldr r3,.L37+12
 719 006c 1B68     	 ldr r3,[r3]
 720 006e 0133     	 adds r3,r3,#1
 721 0070 234A     	 ldr r2,.L37+12
 722 0072 1360     	 str r3,[r2]
1189:../Dave/Generated/FREERTOS/tasks.c **** 
1190:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
 723              	 .loc 1 1190 0
 724 0074 1F4B     	 ldr r3,.L37
 725 0076 1B68     	 ldr r3,[r3]
 726 0078 FA68     	 ldr r2,[r7,#12]
 727 007a 9A42     	 cmp r2,r3
 728 007c 0BD1     	 bne .L32
1191:../Dave/Generated/FREERTOS/tasks.c ****             {
1192:../Dave/Generated/FREERTOS/tasks.c ****                 /* A task is deleting itself.  This cannot complete within the
1193:../Dave/Generated/FREERTOS/tasks.c ****                  * task itself, as a context switch to another task is required.
1194:../Dave/Generated/FREERTOS/tasks.c ****                  * Place the task in the termination list.  The idle task will
1195:../Dave/Generated/FREERTOS/tasks.c ****                  * check the termination list and free up any memory allocated by
1196:../Dave/Generated/FREERTOS/tasks.c ****                  * the scheduler for the TCB and stack of the deleted task. */
1197:../Dave/Generated/FREERTOS/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 729              	 .loc 1 1197 0
 730 007e FB68     	 ldr r3,[r7,#12]
 731 0080 0433     	 adds r3,r3,#4
 732 0082 2048     	 ldr r0,.L37+16
 733 0084 1946     	 mov r1,r3
 734 0086 FFF7FEFF 	 bl vListInsertEnd
1198:../Dave/Generated/FREERTOS/tasks.c **** 
1199:../Dave/Generated/FREERTOS/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1200:../Dave/Generated/FREERTOS/tasks.c ****                  * there is a task that has been deleted and that it should therefore
1201:../Dave/Generated/FREERTOS/tasks.c ****                  * check the xTasksWaitingTermination list. */
1202:../Dave/Generated/FREERTOS/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
 735              	 .loc 1 1202 0
 736 008a 1F4B     	 ldr r3,.L37+20
 737 008c 1B68     	 ldr r3,[r3]
 738 008e 0133     	 adds r3,r3,#1
 739 0090 1D4A     	 ldr r2,.L37+20
 740 0092 1360     	 str r3,[r2]
 741 0094 09E0     	 b .L33
 742              	.L32:
1203:../Dave/Generated/FREERTOS/tasks.c **** 
1204:../Dave/Generated/FREERTOS/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1205:../Dave/Generated/FREERTOS/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1206:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1207:../Dave/Generated/FREERTOS/tasks.c **** 
1208:../Dave/Generated/FREERTOS/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
1209:../Dave/Generated/FREERTOS/tasks.c ****                  * in which Windows specific clean up operations are performed,
1210:../Dave/Generated/FREERTOS/tasks.c ****                  * after which it is not possible to yield away from this task -
1211:../Dave/Generated/FREERTOS/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
1212:../Dave/Generated/FREERTOS/tasks.c ****                  * required. */
1213:../Dave/Generated/FREERTOS/tasks.c ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1214:../Dave/Generated/FREERTOS/tasks.c ****             }
1215:../Dave/Generated/FREERTOS/tasks.c ****             else
1216:../Dave/Generated/FREERTOS/tasks.c ****             {
1217:../Dave/Generated/FREERTOS/tasks.c ****                 --uxCurrentNumberOfTasks;
 743              	 .loc 1 1217 0
 744 0096 1D4B     	 ldr r3,.L37+24
 745 0098 1B68     	 ldr r3,[r3]
 746 009a 013B     	 subs r3,r3,#1
 747 009c 1B4A     	 ldr r2,.L37+24
 748 009e 1360     	 str r3,[r2]
1218:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1219:../Dave/Generated/FREERTOS/tasks.c ****                 prvDeleteTCB( pxTCB );
 749              	 .loc 1 1219 0
 750 00a0 F868     	 ldr r0,[r7,#12]
 751 00a2 FFF7FEFF 	 bl prvDeleteTCB
1220:../Dave/Generated/FREERTOS/tasks.c **** 
1221:../Dave/Generated/FREERTOS/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
1222:../Dave/Generated/FREERTOS/tasks.c ****                  * the task that has just been deleted. */
1223:../Dave/Generated/FREERTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
 752              	 .loc 1 1223 0
 753 00a6 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 754              	.L33:
1224:../Dave/Generated/FREERTOS/tasks.c ****             }
1225:../Dave/Generated/FREERTOS/tasks.c ****         }
1226:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 755              	 .loc 1 1226 0
 756 00aa FFF7FEFF 	 bl vPortExitCritical
1227:../Dave/Generated/FREERTOS/tasks.c **** 
1228:../Dave/Generated/FREERTOS/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
1229:../Dave/Generated/FREERTOS/tasks.c ****          * been deleted. */
1230:../Dave/Generated/FREERTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
 757              	 .loc 1 1230 0
 758 00ae 184B     	 ldr r3,.L37+28
 759 00b0 1B68     	 ldr r3,[r3]
 760 00b2 002B     	 cmp r3,#0
 761 00b4 1AD0     	 beq .L26
1231:../Dave/Generated/FREERTOS/tasks.c ****         {
1232:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
 762              	 .loc 1 1232 0
 763 00b6 0F4B     	 ldr r3,.L37
 764 00b8 1B68     	 ldr r3,[r3]
 765 00ba FA68     	 ldr r2,[r7,#12]
 766 00bc 9A42     	 cmp r2,r3
 767 00be 15D1     	 bne .L26
1233:../Dave/Generated/FREERTOS/tasks.c ****             {
1234:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
 768              	 .loc 1 1234 0
 769 00c0 144B     	 ldr r3,.L37+32
 770 00c2 1B68     	 ldr r3,[r3]
 771 00c4 002B     	 cmp r3,#0
 772 00c6 09D0     	 beq .L35
 773              	.LBB136:
 774              	.LBB137:
 775              	 .loc 2 197 0 discriminator 1
 776              	
 777 00c8 4FF0FC03 	 mov r3,#252
 778 00cc 83F31188 	 msr basepri,r3
 779 00d0 BFF36F8F 	 isb 
 780 00d4 BFF34F8F 	 dsb 
 781              	
 782              	
 783              	 .thumb
 784 00d8 BB60     	 str r3,[r7,#8]
 785              	.L36:
 786              	.LBE137:
 787              	.LBE136:
 788              	 .loc 1 1234 0 discriminator 1
 789 00da FEE7     	 b .L36
 790              	.L35:
1235:../Dave/Generated/FREERTOS/tasks.c ****                 portYIELD_WITHIN_API();
 791              	 .loc 1 1235 0
 792 00dc 0E4B     	 ldr r3,.L37+36
 793 00de 4FF08052 	 mov r2,#268435456
 794 00e2 1A60     	 str r2,[r3]
 795              	
 796 00e4 BFF34F8F 	 dsb
 797              	
 798              	
 799 00e8 BFF36F8F 	 isb
 800              	
 801              	 .thumb
 802              	.L26:
1236:../Dave/Generated/FREERTOS/tasks.c ****             }
1237:../Dave/Generated/FREERTOS/tasks.c ****             else
1238:../Dave/Generated/FREERTOS/tasks.c ****             {
1239:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1240:../Dave/Generated/FREERTOS/tasks.c ****             }
1241:../Dave/Generated/FREERTOS/tasks.c ****         }
1242:../Dave/Generated/FREERTOS/tasks.c ****     }
 803              	 .loc 1 1242 0
 804 00ec 1037     	 adds r7,r7,#16
 805              	.LCFI18:
 806              	 .cfi_def_cfa_offset 8
 807 00ee BD46     	 mov sp,r7
 808              	.LCFI19:
 809              	 .cfi_def_cfa_register 13
 810              	 
 811 00f0 80BD     	 pop {r7,pc}
 812              	.L38:
 813 00f2 00BF     	 .align 2
 814              	.L37:
 815 00f4 00000000 	 .word pxCurrentTCB
 816 00f8 00000000 	 .word pxReadyTasksLists
 817 00fc 00000000 	 .word uxTopReadyPriority
 818 0100 00000000 	 .word uxTaskNumber
 819 0104 00000000 	 .word xTasksWaitingTermination
 820 0108 00000000 	 .word uxDeletedTasksWaitingCleanUp
 821 010c 00000000 	 .word uxCurrentNumberOfTasks
 822 0110 00000000 	 .word xSchedulerRunning
 823 0114 00000000 	 .word uxSchedulerSuspended
 824 0118 04ED00E0 	 .word -536810236
 825              	 .cfi_endproc
 826              	.LFE141:
 828              	 .section .text.xTaskDelayUntil,"ax",%progbits
 829              	 .align 2
 830              	 .global xTaskDelayUntil
 831              	 .thumb
 832              	 .thumb_func
 834              	xTaskDelayUntil:
 835              	.LFB142:
1243:../Dave/Generated/FREERTOS/tasks.c **** 
1244:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1246:../Dave/Generated/FREERTOS/tasks.c **** 
1247:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskDelayUntil == 1 )
1248:../Dave/Generated/FREERTOS/tasks.c **** 
1249:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1250:../Dave/Generated/FREERTOS/tasks.c ****                                 const TickType_t xTimeIncrement )
1251:../Dave/Generated/FREERTOS/tasks.c ****     {
 836              	 .loc 1 1251 0
 837              	 .cfi_startproc
 838              	 
 839              	 
 840 0000 80B5     	 push {r7,lr}
 841              	.LCFI20:
 842              	 .cfi_def_cfa_offset 8
 843              	 .cfi_offset 7,-8
 844              	 .cfi_offset 14,-4
 845 0002 8AB0     	 sub sp,sp,#40
 846              	.LCFI21:
 847              	 .cfi_def_cfa_offset 48
 848 0004 00AF     	 add r7,sp,#0
 849              	.LCFI22:
 850              	 .cfi_def_cfa_register 7
 851 0006 7860     	 str r0,[r7,#4]
 852 0008 3960     	 str r1,[r7]
1252:../Dave/Generated/FREERTOS/tasks.c ****         TickType_t xTimeToWake;
1253:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 853              	 .loc 1 1253 0
 854 000a 0023     	 movs r3,#0
 855 000c 7B62     	 str r3,[r7,#36]
1254:../Dave/Generated/FREERTOS/tasks.c **** 
1255:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxPreviousWakeTime );
 856              	 .loc 1 1255 0
 857 000e 7B68     	 ldr r3,[r7,#4]
 858 0010 002B     	 cmp r3,#0
 859 0012 09D1     	 bne .L40
 860              	.LBB138:
 861              	.LBB139:
 862              	 .loc 2 197 0 discriminator 1
 863              	
 864 0014 4FF0FC03 	 mov r3,#252
 865 0018 83F31188 	 msr basepri,r3
 866 001c BFF36F8F 	 isb 
 867 0020 BFF34F8F 	 dsb 
 868              	
 869              	
 870              	 .thumb
 871 0024 7B61     	 str r3,[r7,#20]
 872              	.L41:
 873              	.LBE139:
 874              	.LBE138:
 875              	 .loc 1 1255 0 discriminator 1
 876 0026 FEE7     	 b .L41
 877              	.L40:
1256:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 878              	 .loc 1 1256 0
 879 0028 3B68     	 ldr r3,[r7]
 880 002a 002B     	 cmp r3,#0
 881 002c 09D1     	 bne .L42
 882              	.LBB140:
 883              	.LBB141:
 884              	 .loc 2 197 0 discriminator 1
 885              	
 886 002e 4FF0FC03 	 mov r3,#252
 887 0032 83F31188 	 msr basepri,r3
 888 0036 BFF36F8F 	 isb 
 889 003a BFF34F8F 	 dsb 
 890              	
 891              	
 892              	 .thumb
 893 003e 3B61     	 str r3,[r7,#16]
 894              	.L43:
 895              	.LBE141:
 896              	.LBE140:
 897              	 .loc 1 1256 0 discriminator 2
 898 0040 FEE7     	 b .L43
 899              	.L42:
1257:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 900              	 .loc 1 1257 0
 901 0042 2A4B     	 ldr r3,.L52
 902 0044 1B68     	 ldr r3,[r3]
 903 0046 002B     	 cmp r3,#0
 904 0048 09D0     	 beq .L44
 905              	.LBB142:
 906              	.LBB143:
 907              	 .loc 2 197 0 discriminator 1
 908              	
 909 004a 4FF0FC03 	 mov r3,#252
 910 004e 83F31188 	 msr basepri,r3
 911 0052 BFF36F8F 	 isb 
 912 0056 BFF34F8F 	 dsb 
 913              	
 914              	
 915              	 .thumb
 916 005a FB60     	 str r3,[r7,#12]
 917              	.L45:
 918              	.LBE143:
 919              	.LBE142:
 920              	 .loc 1 1257 0 discriminator 3
 921 005c FEE7     	 b .L45
 922              	.L44:
1258:../Dave/Generated/FREERTOS/tasks.c **** 
1259:../Dave/Generated/FREERTOS/tasks.c ****         vTaskSuspendAll();
 923              	 .loc 1 1259 0
 924 005e FFF7FEFF 	 bl vTaskSuspendAll
 925              	.LBB144:
1260:../Dave/Generated/FREERTOS/tasks.c ****         {
1261:../Dave/Generated/FREERTOS/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
1262:../Dave/Generated/FREERTOS/tasks.c ****              * block. */
1263:../Dave/Generated/FREERTOS/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
 926              	 .loc 1 1263 0
 927 0062 234B     	 ldr r3,.L52+4
 928 0064 1B68     	 ldr r3,[r3]
 929 0066 3B62     	 str r3,[r7,#32]
1264:../Dave/Generated/FREERTOS/tasks.c **** 
1265:../Dave/Generated/FREERTOS/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
1266:../Dave/Generated/FREERTOS/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 930              	 .loc 1 1266 0
 931 0068 7B68     	 ldr r3,[r7,#4]
 932 006a 1A68     	 ldr r2,[r3]
 933 006c 3B68     	 ldr r3,[r7]
 934 006e 1344     	 add r3,r3,r2
 935 0070 FB61     	 str r3,[r7,#28]
1267:../Dave/Generated/FREERTOS/tasks.c **** 
1268:../Dave/Generated/FREERTOS/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
 936              	 .loc 1 1268 0
 937 0072 7B68     	 ldr r3,[r7,#4]
 938 0074 1A68     	 ldr r2,[r3]
 939 0076 3B6A     	 ldr r3,[r7,#32]
 940 0078 9A42     	 cmp r2,r3
 941 007a 0BD9     	 bls .L46
1269:../Dave/Generated/FREERTOS/tasks.c ****             {
1270:../Dave/Generated/FREERTOS/tasks.c ****                 /* The tick count has overflowed since this function was
1271:../Dave/Generated/FREERTOS/tasks.c ****                  * lasted called.  In this case the only time we should ever
1272:../Dave/Generated/FREERTOS/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
1273:../Dave/Generated/FREERTOS/tasks.c ****                  * and the wake time is greater than the tick time.  When this
1274:../Dave/Generated/FREERTOS/tasks.c ****                  * is the case it is as if neither time had overflowed. */
1275:../Dave/Generated/FREERTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 942              	 .loc 1 1275 0
 943 007c 7B68     	 ldr r3,[r7,#4]
 944 007e 1A68     	 ldr r2,[r3]
 945 0080 FB69     	 ldr r3,[r7,#28]
 946 0082 9A42     	 cmp r2,r3
 947 0084 11D9     	 bls .L47
 948              	 .loc 1 1275 0 is_stmt 0 discriminator 1
 949 0086 FA69     	 ldr r2,[r7,#28]
 950 0088 3B6A     	 ldr r3,[r7,#32]
 951 008a 9A42     	 cmp r2,r3
 952 008c 0DD9     	 bls .L47
1276:../Dave/Generated/FREERTOS/tasks.c ****                 {
1277:../Dave/Generated/FREERTOS/tasks.c ****                     xShouldDelay = pdTRUE;
 953              	 .loc 1 1277 0 is_stmt 1
 954 008e 0123     	 movs r3,#1
 955 0090 7B62     	 str r3,[r7,#36]
 956 0092 0AE0     	 b .L47
 957              	.L46:
1278:../Dave/Generated/FREERTOS/tasks.c ****                 }
1279:../Dave/Generated/FREERTOS/tasks.c ****                 else
1280:../Dave/Generated/FREERTOS/tasks.c ****                 {
1281:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1282:../Dave/Generated/FREERTOS/tasks.c ****                 }
1283:../Dave/Generated/FREERTOS/tasks.c ****             }
1284:../Dave/Generated/FREERTOS/tasks.c ****             else
1285:../Dave/Generated/FREERTOS/tasks.c ****             {
1286:../Dave/Generated/FREERTOS/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
1287:../Dave/Generated/FREERTOS/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
1288:../Dave/Generated/FREERTOS/tasks.c ****                  * tick time is less than the wake time. */
1289:../Dave/Generated/FREERTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 958              	 .loc 1 1289 0
 959 0094 7B68     	 ldr r3,[r7,#4]
 960 0096 1A68     	 ldr r2,[r3]
 961 0098 FB69     	 ldr r3,[r7,#28]
 962 009a 9A42     	 cmp r2,r3
 963 009c 03D8     	 bhi .L48
 964              	 .loc 1 1289 0 is_stmt 0 discriminator 1
 965 009e FA69     	 ldr r2,[r7,#28]
 966 00a0 3B6A     	 ldr r3,[r7,#32]
 967 00a2 9A42     	 cmp r2,r3
 968 00a4 01D9     	 bls .L47
 969              	.L48:
1290:../Dave/Generated/FREERTOS/tasks.c ****                 {
1291:../Dave/Generated/FREERTOS/tasks.c ****                     xShouldDelay = pdTRUE;
 970              	 .loc 1 1291 0 is_stmt 1
 971 00a6 0123     	 movs r3,#1
 972 00a8 7B62     	 str r3,[r7,#36]
 973              	.L47:
1292:../Dave/Generated/FREERTOS/tasks.c ****                 }
1293:../Dave/Generated/FREERTOS/tasks.c ****                 else
1294:../Dave/Generated/FREERTOS/tasks.c ****                 {
1295:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1296:../Dave/Generated/FREERTOS/tasks.c ****                 }
1297:../Dave/Generated/FREERTOS/tasks.c ****             }
1298:../Dave/Generated/FREERTOS/tasks.c **** 
1299:../Dave/Generated/FREERTOS/tasks.c ****             /* Update the wake time ready for the next call. */
1300:../Dave/Generated/FREERTOS/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
 974              	 .loc 1 1300 0
 975 00aa 7B68     	 ldr r3,[r7,#4]
 976 00ac FA69     	 ldr r2,[r7,#28]
 977 00ae 1A60     	 str r2,[r3]
1301:../Dave/Generated/FREERTOS/tasks.c **** 
1302:../Dave/Generated/FREERTOS/tasks.c ****             if( xShouldDelay != pdFALSE )
 978              	 .loc 1 1302 0
 979 00b0 7B6A     	 ldr r3,[r7,#36]
 980 00b2 002B     	 cmp r3,#0
 981 00b4 06D0     	 beq .L49
1303:../Dave/Generated/FREERTOS/tasks.c ****             {
1304:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1305:../Dave/Generated/FREERTOS/tasks.c **** 
1306:../Dave/Generated/FREERTOS/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1307:../Dave/Generated/FREERTOS/tasks.c ****                  * the time to wake, so subtract the current tick count. */
1308:../Dave/Generated/FREERTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 982              	 .loc 1 1308 0
 983 00b6 FA69     	 ldr r2,[r7,#28]
 984 00b8 3B6A     	 ldr r3,[r7,#32]
 985 00ba D31A     	 subs r3,r2,r3
 986 00bc 1846     	 mov r0,r3
 987 00be 0021     	 movs r1,#0
 988 00c0 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
 989              	.L49:
 990              	.LBE144:
1309:../Dave/Generated/FREERTOS/tasks.c ****             }
1310:../Dave/Generated/FREERTOS/tasks.c ****             else
1311:../Dave/Generated/FREERTOS/tasks.c ****             {
1312:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1313:../Dave/Generated/FREERTOS/tasks.c ****             }
1314:../Dave/Generated/FREERTOS/tasks.c ****         }
1315:../Dave/Generated/FREERTOS/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
 991              	 .loc 1 1315 0
 992 00c4 FFF7FEFF 	 bl xTaskResumeAll
 993 00c8 B861     	 str r0,[r7,#24]
1316:../Dave/Generated/FREERTOS/tasks.c **** 
1317:../Dave/Generated/FREERTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1318:../Dave/Generated/FREERTOS/tasks.c ****          * have put ourselves to sleep. */
1319:../Dave/Generated/FREERTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
 994              	 .loc 1 1319 0
 995 00ca BB69     	 ldr r3,[r7,#24]
 996 00cc 002B     	 cmp r3,#0
 997 00ce 07D1     	 bne .L50
1320:../Dave/Generated/FREERTOS/tasks.c ****         {
1321:../Dave/Generated/FREERTOS/tasks.c ****             portYIELD_WITHIN_API();
 998              	 .loc 1 1321 0
 999 00d0 084B     	 ldr r3,.L52+8
 1000 00d2 4FF08052 	 mov r2,#268435456
 1001 00d6 1A60     	 str r2,[r3]
 1002              	
 1003 00d8 BFF34F8F 	 dsb
 1004              	
 1005              	
 1006 00dc BFF36F8F 	 isb
 1007              	
 1008              	 .thumb
 1009              	.L50:
1322:../Dave/Generated/FREERTOS/tasks.c ****         }
1323:../Dave/Generated/FREERTOS/tasks.c ****         else
1324:../Dave/Generated/FREERTOS/tasks.c ****         {
1325:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1326:../Dave/Generated/FREERTOS/tasks.c ****         }
1327:../Dave/Generated/FREERTOS/tasks.c **** 
1328:../Dave/Generated/FREERTOS/tasks.c ****         return xShouldDelay;
 1010              	 .loc 1 1328 0
 1011 00e0 7B6A     	 ldr r3,[r7,#36]
1329:../Dave/Generated/FREERTOS/tasks.c ****     }
 1012              	 .loc 1 1329 0
 1013 00e2 1846     	 mov r0,r3
 1014 00e4 2837     	 adds r7,r7,#40
 1015              	.LCFI23:
 1016              	 .cfi_def_cfa_offset 8
 1017 00e6 BD46     	 mov sp,r7
 1018              	.LCFI24:
 1019              	 .cfi_def_cfa_register 13
 1020              	 
 1021 00e8 80BD     	 pop {r7,pc}
 1022              	.L53:
 1023 00ea 00BF     	 .align 2
 1024              	.L52:
 1025 00ec 00000000 	 .word uxSchedulerSuspended
 1026 00f0 00000000 	 .word xTickCount
 1027 00f4 04ED00E0 	 .word -536810236
 1028              	 .cfi_endproc
 1029              	.LFE142:
 1031              	 .section .text.vTaskDelay,"ax",%progbits
 1032              	 .align 2
 1033              	 .global vTaskDelay
 1034              	 .thumb
 1035              	 .thumb_func
 1037              	vTaskDelay:
 1038              	.LFB143:
1330:../Dave/Generated/FREERTOS/tasks.c **** 
1331:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskDelayUntil */
1332:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1333:../Dave/Generated/FREERTOS/tasks.c **** 
1334:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1335:../Dave/Generated/FREERTOS/tasks.c **** 
1336:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
1337:../Dave/Generated/FREERTOS/tasks.c ****     {
 1039              	 .loc 1 1337 0
 1040              	 .cfi_startproc
 1041              	 
 1042              	 
 1043 0000 80B5     	 push {r7,lr}
 1044              	.LCFI25:
 1045              	 .cfi_def_cfa_offset 8
 1046              	 .cfi_offset 7,-8
 1047              	 .cfi_offset 14,-4
 1048 0002 84B0     	 sub sp,sp,#16
 1049              	.LCFI26:
 1050              	 .cfi_def_cfa_offset 24
 1051 0004 00AF     	 add r7,sp,#0
 1052              	.LCFI27:
 1053              	 .cfi_def_cfa_register 7
 1054 0006 7860     	 str r0,[r7,#4]
1338:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 1055              	 .loc 1 1338 0
 1056 0008 0023     	 movs r3,#0
 1057 000a FB60     	 str r3,[r7,#12]
1339:../Dave/Generated/FREERTOS/tasks.c **** 
1340:../Dave/Generated/FREERTOS/tasks.c ****         /* A delay time of zero just forces a reschedule. */
1341:../Dave/Generated/FREERTOS/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
 1058              	 .loc 1 1341 0
 1059 000c 7B68     	 ldr r3,[r7,#4]
 1060 000e 002B     	 cmp r3,#0
 1061 0010 16D0     	 beq .L55
1342:../Dave/Generated/FREERTOS/tasks.c ****         {
1343:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( uxSchedulerSuspended == 0 );
 1062              	 .loc 1 1343 0
 1063 0012 124B     	 ldr r3,.L59
 1064 0014 1B68     	 ldr r3,[r3]
 1065 0016 002B     	 cmp r3,#0
 1066 0018 09D0     	 beq .L56
 1067              	.LBB145:
 1068              	.LBB146:
 1069              	 .loc 2 197 0 discriminator 1
 1070              	
 1071 001a 4FF0FC03 	 mov r3,#252
 1072 001e 83F31188 	 msr basepri,r3
 1073 0022 BFF36F8F 	 isb 
 1074 0026 BFF34F8F 	 dsb 
 1075              	
 1076              	
 1077              	 .thumb
 1078 002a BB60     	 str r3,[r7,#8]
 1079              	.L57:
 1080              	.LBE146:
 1081              	.LBE145:
 1082              	 .loc 1 1343 0 discriminator 1
 1083 002c FEE7     	 b .L57
 1084              	.L56:
1344:../Dave/Generated/FREERTOS/tasks.c ****             vTaskSuspendAll();
 1085              	 .loc 1 1344 0
 1086 002e FFF7FEFF 	 bl vTaskSuspendAll
1345:../Dave/Generated/FREERTOS/tasks.c ****             {
1346:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_DELAY();
1347:../Dave/Generated/FREERTOS/tasks.c **** 
1348:../Dave/Generated/FREERTOS/tasks.c ****                 /* A task that is removed from the event list while the
1349:../Dave/Generated/FREERTOS/tasks.c ****                  * scheduler is suspended will not get placed in the ready
1350:../Dave/Generated/FREERTOS/tasks.c ****                  * list or removed from the blocked list until the scheduler
1351:../Dave/Generated/FREERTOS/tasks.c ****                  * is resumed.
1352:../Dave/Generated/FREERTOS/tasks.c ****                  *
1353:../Dave/Generated/FREERTOS/tasks.c ****                  * This task cannot be in an event list as it is the currently
1354:../Dave/Generated/FREERTOS/tasks.c ****                  * executing task. */
1355:../Dave/Generated/FREERTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1087              	 .loc 1 1355 0
 1088 0032 7868     	 ldr r0,[r7,#4]
 1089 0034 0021     	 movs r1,#0
 1090 0036 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
1356:../Dave/Generated/FREERTOS/tasks.c ****             }
1357:../Dave/Generated/FREERTOS/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
 1091              	 .loc 1 1357 0
 1092 003a FFF7FEFF 	 bl xTaskResumeAll
 1093 003e F860     	 str r0,[r7,#12]
 1094              	.L55:
1358:../Dave/Generated/FREERTOS/tasks.c ****         }
1359:../Dave/Generated/FREERTOS/tasks.c ****         else
1360:../Dave/Generated/FREERTOS/tasks.c ****         {
1361:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1362:../Dave/Generated/FREERTOS/tasks.c ****         }
1363:../Dave/Generated/FREERTOS/tasks.c **** 
1364:../Dave/Generated/FREERTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1365:../Dave/Generated/FREERTOS/tasks.c ****          * have put ourselves to sleep. */
1366:../Dave/Generated/FREERTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
 1095              	 .loc 1 1366 0
 1096 0040 FB68     	 ldr r3,[r7,#12]
 1097 0042 002B     	 cmp r3,#0
 1098 0044 07D1     	 bne .L54
1367:../Dave/Generated/FREERTOS/tasks.c ****         {
1368:../Dave/Generated/FREERTOS/tasks.c ****             portYIELD_WITHIN_API();
 1099              	 .loc 1 1368 0
 1100 0046 064B     	 ldr r3,.L59+4
 1101 0048 4FF08052 	 mov r2,#268435456
 1102 004c 1A60     	 str r2,[r3]
 1103              	
 1104 004e BFF34F8F 	 dsb
 1105              	
 1106              	
 1107 0052 BFF36F8F 	 isb
 1108              	
 1109              	 .thumb
 1110              	.L54:
1369:../Dave/Generated/FREERTOS/tasks.c ****         }
1370:../Dave/Generated/FREERTOS/tasks.c ****         else
1371:../Dave/Generated/FREERTOS/tasks.c ****         {
1372:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1373:../Dave/Generated/FREERTOS/tasks.c ****         }
1374:../Dave/Generated/FREERTOS/tasks.c ****     }
 1111              	 .loc 1 1374 0
 1112 0056 1037     	 adds r7,r7,#16
 1113              	.LCFI28:
 1114              	 .cfi_def_cfa_offset 8
 1115 0058 BD46     	 mov sp,r7
 1116              	.LCFI29:
 1117              	 .cfi_def_cfa_register 13
 1118              	 
 1119 005a 80BD     	 pop {r7,pc}
 1120              	.L60:
 1121              	 .align 2
 1122              	.L59:
 1123 005c 00000000 	 .word uxSchedulerSuspended
 1124 0060 04ED00E0 	 .word -536810236
 1125              	 .cfi_endproc
 1126              	.LFE143:
 1128              	 .section .text.eTaskGetState,"ax",%progbits
 1129              	 .align 2
 1130              	 .global eTaskGetState
 1131              	 .thumb
 1132              	 .thumb_func
 1134              	eTaskGetState:
 1135              	.LFB144:
1375:../Dave/Generated/FREERTOS/tasks.c **** 
1376:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1377:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1378:../Dave/Generated/FREERTOS/tasks.c **** 
1379:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1380:../Dave/Generated/FREERTOS/tasks.c **** 
1381:../Dave/Generated/FREERTOS/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1382:../Dave/Generated/FREERTOS/tasks.c ****     {
 1136              	 .loc 1 1382 0
 1137              	 .cfi_startproc
 1138              	 
 1139              	 
 1140 0000 80B5     	 push {r7,lr}
 1141              	.LCFI30:
 1142              	 .cfi_def_cfa_offset 8
 1143              	 .cfi_offset 7,-8
 1144              	 .cfi_offset 14,-4
 1145 0002 8AB0     	 sub sp,sp,#40
 1146              	.LCFI31:
 1147              	 .cfi_def_cfa_offset 48
 1148 0004 00AF     	 add r7,sp,#0
 1149              	.LCFI32:
 1150              	 .cfi_def_cfa_register 7
 1151 0006 7860     	 str r0,[r7,#4]
1383:../Dave/Generated/FREERTOS/tasks.c ****         eTaskState eReturn;
1384:../Dave/Generated/FREERTOS/tasks.c ****         List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
1385:../Dave/Generated/FREERTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 1152              	 .loc 1 1385 0
 1153 0008 7B68     	 ldr r3,[r7,#4]
 1154 000a FB61     	 str r3,[r7,#28]
1386:../Dave/Generated/FREERTOS/tasks.c **** 
1387:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTCB );
 1155              	 .loc 1 1387 0
 1156 000c FB69     	 ldr r3,[r7,#28]
 1157 000e 002B     	 cmp r3,#0
 1158 0010 09D1     	 bne .L62
 1159              	.LBB147:
 1160              	.LBB148:
 1161              	 .loc 2 197 0 discriminator 1
 1162              	
 1163 0012 4FF0FC03 	 mov r3,#252
 1164 0016 83F31188 	 msr basepri,r3
 1165 001a BFF36F8F 	 isb 
 1166 001e BFF34F8F 	 dsb 
 1167              	
 1168              	
 1169              	 .thumb
 1170 0022 FB60     	 str r3,[r7,#12]
 1171              	.L63:
 1172              	.LBE148:
 1173              	.LBE147:
 1174              	 .loc 1 1387 0 discriminator 1
 1175 0024 FEE7     	 b .L63
 1176              	.L62:
1388:../Dave/Generated/FREERTOS/tasks.c **** 
1389:../Dave/Generated/FREERTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
 1177              	 .loc 1 1389 0
 1178 0026 2D4B     	 ldr r3,.L78
 1179 0028 1B68     	 ldr r3,[r3]
 1180 002a FA69     	 ldr r2,[r7,#28]
 1181 002c 9A42     	 cmp r2,r3
 1182 002e 03D1     	 bne .L64
1390:../Dave/Generated/FREERTOS/tasks.c ****         {
1391:../Dave/Generated/FREERTOS/tasks.c ****             /* The task calling this function is querying its own state. */
1392:../Dave/Generated/FREERTOS/tasks.c ****             eReturn = eRunning;
 1183              	 .loc 1 1392 0
 1184 0030 0023     	 movs r3,#0
 1185 0032 87F82730 	 strb r3,[r7,#39]
 1186 0036 4BE0     	 b .L65
 1187              	.L64:
1393:../Dave/Generated/FREERTOS/tasks.c ****         }
1394:../Dave/Generated/FREERTOS/tasks.c ****         else
1395:../Dave/Generated/FREERTOS/tasks.c ****         {
1396:../Dave/Generated/FREERTOS/tasks.c ****             taskENTER_CRITICAL();
 1188              	 .loc 1 1396 0
 1189 0038 FFF7FEFF 	 bl vPortEnterCritical
1397:../Dave/Generated/FREERTOS/tasks.c ****             {
1398:../Dave/Generated/FREERTOS/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1190              	 .loc 1 1398 0
 1191 003c FB69     	 ldr r3,[r7,#28]
 1192 003e 5B69     	 ldr r3,[r3,#20]
 1193 0040 BB61     	 str r3,[r7,#24]
1399:../Dave/Generated/FREERTOS/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
 1194              	 .loc 1 1399 0
 1195 0042 274B     	 ldr r3,.L78+4
 1196 0044 1B68     	 ldr r3,[r3]
 1197 0046 7B61     	 str r3,[r7,#20]
1400:../Dave/Generated/FREERTOS/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1198              	 .loc 1 1400 0
 1199 0048 264B     	 ldr r3,.L78+8
 1200 004a 1B68     	 ldr r3,[r3]
 1201 004c 3B61     	 str r3,[r7,#16]
1401:../Dave/Generated/FREERTOS/tasks.c ****             }
1402:../Dave/Generated/FREERTOS/tasks.c ****             taskEXIT_CRITICAL();
 1202              	 .loc 1 1402 0
 1203 004e FFF7FEFF 	 bl vPortExitCritical
1403:../Dave/Generated/FREERTOS/tasks.c **** 
1404:../Dave/Generated/FREERTOS/tasks.c ****             if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1204              	 .loc 1 1404 0
 1205 0052 BA69     	 ldr r2,[r7,#24]
 1206 0054 7B69     	 ldr r3,[r7,#20]
 1207 0056 9A42     	 cmp r2,r3
 1208 0058 03D0     	 beq .L66
 1209              	 .loc 1 1404 0 is_stmt 0 discriminator 1
 1210 005a BA69     	 ldr r2,[r7,#24]
 1211 005c 3B69     	 ldr r3,[r7,#16]
 1212 005e 9A42     	 cmp r2,r3
 1213 0060 03D1     	 bne .L67
 1214              	.L66:
1405:../Dave/Generated/FREERTOS/tasks.c ****             {
1406:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
1407:../Dave/Generated/FREERTOS/tasks.c ****                  * lists. */
1408:../Dave/Generated/FREERTOS/tasks.c ****                 eReturn = eBlocked;
 1215              	 .loc 1 1408 0 is_stmt 1
 1216 0062 0223     	 movs r3,#2
 1217 0064 87F82730 	 strb r3,[r7,#39]
 1218 0068 32E0     	 b .L65
 1219              	.L67:
1409:../Dave/Generated/FREERTOS/tasks.c ****             }
1410:../Dave/Generated/FREERTOS/tasks.c **** 
1411:../Dave/Generated/FREERTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
1412:../Dave/Generated/FREERTOS/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
 1220              	 .loc 1 1412 0
 1221 006a BB69     	 ldr r3,[r7,#24]
 1222 006c 1E4A     	 ldr r2,.L78+12
 1223 006e 9342     	 cmp r3,r2
 1224 0070 20D1     	 bne .L68
1413:../Dave/Generated/FREERTOS/tasks.c ****                 {
1414:../Dave/Generated/FREERTOS/tasks.c ****                     /* The task being queried is referenced from the suspended
1415:../Dave/Generated/FREERTOS/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
1416:../Dave/Generated/FREERTOS/tasks.c ****                      * indefinitely? */
1417:../Dave/Generated/FREERTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1225              	 .loc 1 1417 0
 1226 0072 FB69     	 ldr r3,[r7,#28]
 1227 0074 9B6A     	 ldr r3,[r3,#40]
 1228 0076 002B     	 cmp r3,#0
 1229 0078 18D1     	 bne .L69
 1230              	.LBB149:
1418:../Dave/Generated/FREERTOS/tasks.c ****                     {
1419:../Dave/Generated/FREERTOS/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1420:../Dave/Generated/FREERTOS/tasks.c ****                             {
1421:../Dave/Generated/FREERTOS/tasks.c ****                                 BaseType_t x;
1422:../Dave/Generated/FREERTOS/tasks.c **** 
1423:../Dave/Generated/FREERTOS/tasks.c ****                                 /* The task does not appear on the event list item of
1424:../Dave/Generated/FREERTOS/tasks.c ****                                  * and of the RTOS objects, but could still be in the
1425:../Dave/Generated/FREERTOS/tasks.c ****                                  * blocked state if it is waiting on its notification
1426:../Dave/Generated/FREERTOS/tasks.c ****                                  * rather than waiting on an object.  If not, is
1427:../Dave/Generated/FREERTOS/tasks.c ****                                  * suspended. */
1428:../Dave/Generated/FREERTOS/tasks.c ****                                 eReturn = eSuspended;
 1231              	 .loc 1 1428 0
 1232 007a 0323     	 movs r3,#3
 1233 007c 87F82730 	 strb r3,[r7,#39]
1429:../Dave/Generated/FREERTOS/tasks.c **** 
1430:../Dave/Generated/FREERTOS/tasks.c ****                                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 1234              	 .loc 1 1430 0
 1235 0080 0023     	 movs r3,#0
 1236 0082 3B62     	 str r3,[r7,#32]
 1237 0084 0EE0     	 b .L70
 1238              	.L73:
1431:../Dave/Generated/FREERTOS/tasks.c ****                                 {
1432:../Dave/Generated/FREERTOS/tasks.c ****                                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 1239              	 .loc 1 1432 0
 1240 0086 FA69     	 ldr r2,[r7,#28]
 1241 0088 3B6A     	 ldr r3,[r7,#32]
 1242 008a 1344     	 add r3,r3,r2
 1243 008c 6833     	 adds r3,r3,#104
 1244 008e 1B79     	 ldrb r3,[r3,#4]
 1245 0090 DBB2     	 uxtb r3,r3
 1246 0092 012B     	 cmp r3,#1
 1247 0094 03D1     	 bne .L71
1433:../Dave/Generated/FREERTOS/tasks.c ****                                     {
1434:../Dave/Generated/FREERTOS/tasks.c ****                                         eReturn = eBlocked;
 1248              	 .loc 1 1434 0
 1249 0096 0223     	 movs r3,#2
 1250 0098 87F82730 	 strb r3,[r7,#39]
1435:../Dave/Generated/FREERTOS/tasks.c ****                                         break;
 1251              	 .loc 1 1435 0
 1252 009c 05E0     	 b .L72
 1253              	.L71:
1430:../Dave/Generated/FREERTOS/tasks.c ****                                 {
 1254              	 .loc 1 1430 0 discriminator 2
 1255 009e 3B6A     	 ldr r3,[r7,#32]
 1256 00a0 0133     	 adds r3,r3,#1
 1257 00a2 3B62     	 str r3,[r7,#32]
 1258              	.L70:
1430:../Dave/Generated/FREERTOS/tasks.c ****                                 {
 1259              	 .loc 1 1430 0 is_stmt 0 discriminator 1
 1260 00a4 3B6A     	 ldr r3,[r7,#32]
 1261 00a6 002B     	 cmp r3,#0
 1262 00a8 EDDD     	 ble .L73
 1263              	.L72:
 1264              	.LBE149:
 1265 00aa 11E0     	 b .L65
 1266              	.L69:
1436:../Dave/Generated/FREERTOS/tasks.c ****                                     }
1437:../Dave/Generated/FREERTOS/tasks.c ****                                 }
1438:../Dave/Generated/FREERTOS/tasks.c ****                             }
1439:../Dave/Generated/FREERTOS/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1440:../Dave/Generated/FREERTOS/tasks.c ****                             {
1441:../Dave/Generated/FREERTOS/tasks.c ****                                 eReturn = eSuspended;
1442:../Dave/Generated/FREERTOS/tasks.c ****                             }
1443:../Dave/Generated/FREERTOS/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1444:../Dave/Generated/FREERTOS/tasks.c ****                     }
1445:../Dave/Generated/FREERTOS/tasks.c ****                     else
1446:../Dave/Generated/FREERTOS/tasks.c ****                     {
1447:../Dave/Generated/FREERTOS/tasks.c ****                         eReturn = eBlocked;
 1267              	 .loc 1 1447 0 is_stmt 1
 1268 00ac 0223     	 movs r3,#2
 1269 00ae 87F82730 	 strb r3,[r7,#39]
 1270 00b2 0DE0     	 b .L65
 1271              	.L68:
1448:../Dave/Generated/FREERTOS/tasks.c ****                     }
1449:../Dave/Generated/FREERTOS/tasks.c ****                 }
1450:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1451:../Dave/Generated/FREERTOS/tasks.c **** 
1452:../Dave/Generated/FREERTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
1453:../Dave/Generated/FREERTOS/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1272              	 .loc 1 1453 0
 1273 00b4 BB69     	 ldr r3,[r7,#24]
 1274 00b6 0D4A     	 ldr r2,.L78+16
 1275 00b8 9342     	 cmp r3,r2
 1276 00ba 02D0     	 beq .L75
 1277              	 .loc 1 1453 0 is_stmt 0 discriminator 1
 1278 00bc BB69     	 ldr r3,[r7,#24]
 1279 00be 002B     	 cmp r3,#0
 1280 00c0 03D1     	 bne .L76
 1281              	.L75:
1454:../Dave/Generated/FREERTOS/tasks.c ****                 {
1455:../Dave/Generated/FREERTOS/tasks.c ****                     /* The task being queried is referenced from the deleted
1456:../Dave/Generated/FREERTOS/tasks.c ****                      * tasks list, or it is not referenced from any lists at
1457:../Dave/Generated/FREERTOS/tasks.c ****                      * all. */
1458:../Dave/Generated/FREERTOS/tasks.c ****                     eReturn = eDeleted;
 1282              	 .loc 1 1458 0 is_stmt 1
 1283 00c2 0423     	 movs r3,#4
 1284 00c4 87F82730 	 strb r3,[r7,#39]
 1285 00c8 02E0     	 b .L65
 1286              	.L76:
1459:../Dave/Generated/FREERTOS/tasks.c ****                 }
1460:../Dave/Generated/FREERTOS/tasks.c ****             #endif
1461:../Dave/Generated/FREERTOS/tasks.c **** 
1462:../Dave/Generated/FREERTOS/tasks.c ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1463:../Dave/Generated/FREERTOS/tasks.c ****             {
1464:../Dave/Generated/FREERTOS/tasks.c ****                 /* If the task is not in any other state, it must be in the
1465:../Dave/Generated/FREERTOS/tasks.c ****                  * Ready (including pending ready) state. */
1466:../Dave/Generated/FREERTOS/tasks.c ****                 eReturn = eReady;
 1287              	 .loc 1 1466 0
 1288 00ca 0123     	 movs r3,#1
 1289 00cc 87F82730 	 strb r3,[r7,#39]
 1290              	.L65:
1467:../Dave/Generated/FREERTOS/tasks.c ****             }
1468:../Dave/Generated/FREERTOS/tasks.c ****         }
1469:../Dave/Generated/FREERTOS/tasks.c **** 
1470:../Dave/Generated/FREERTOS/tasks.c ****         return eReturn;
 1291              	 .loc 1 1470 0
 1292 00d0 97F82730 	 ldrb r3,[r7,#39]
1471:../Dave/Generated/FREERTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1293              	 .loc 1 1471 0
 1294 00d4 1846     	 mov r0,r3
 1295 00d6 2837     	 adds r7,r7,#40
 1296              	.LCFI33:
 1297              	 .cfi_def_cfa_offset 8
 1298 00d8 BD46     	 mov sp,r7
 1299              	.LCFI34:
 1300              	 .cfi_def_cfa_register 13
 1301              	 
 1302 00da 80BD     	 pop {r7,pc}
 1303              	.L79:
 1304              	 .align 2
 1305              	.L78:
 1306 00dc 00000000 	 .word pxCurrentTCB
 1307 00e0 00000000 	 .word pxDelayedTaskList
 1308 00e4 00000000 	 .word pxOverflowDelayedTaskList
 1309 00e8 00000000 	 .word xSuspendedTaskList
 1310 00ec 00000000 	 .word xTasksWaitingTermination
 1311              	 .cfi_endproc
 1312              	.LFE144:
 1314              	 .section .text.uxTaskPriorityGet,"ax",%progbits
 1315              	 .align 2
 1316              	 .global uxTaskPriorityGet
 1317              	 .thumb
 1318              	 .thumb_func
 1320              	uxTaskPriorityGet:
 1321              	.LFB145:
1472:../Dave/Generated/FREERTOS/tasks.c **** 
1473:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1475:../Dave/Generated/FREERTOS/tasks.c **** 
1476:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:../Dave/Generated/FREERTOS/tasks.c **** 
1478:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:../Dave/Generated/FREERTOS/tasks.c ****     {
 1322              	 .loc 1 1479 0
 1323              	 .cfi_startproc
 1324              	 
 1325              	 
 1326 0000 80B5     	 push {r7,lr}
 1327              	.LCFI35:
 1328              	 .cfi_def_cfa_offset 8
 1329              	 .cfi_offset 7,-8
 1330              	 .cfi_offset 14,-4
 1331 0002 84B0     	 sub sp,sp,#16
 1332              	.LCFI36:
 1333              	 .cfi_def_cfa_offset 24
 1334 0004 00AF     	 add r7,sp,#0
 1335              	.LCFI37:
 1336              	 .cfi_def_cfa_register 7
 1337 0006 7860     	 str r0,[r7,#4]
1480:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t const * pxTCB;
1481:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxReturn;
1482:../Dave/Generated/FREERTOS/tasks.c **** 
1483:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 1338              	 .loc 1 1483 0
 1339 0008 FFF7FEFF 	 bl vPortEnterCritical
1484:../Dave/Generated/FREERTOS/tasks.c ****         {
1485:../Dave/Generated/FREERTOS/tasks.c ****             /* If null is passed in here then it is the priority of the task
1486:../Dave/Generated/FREERTOS/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
1487:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1340              	 .loc 1 1487 0
 1341 000c 7B68     	 ldr r3,[r7,#4]
 1342 000e 002B     	 cmp r3,#0
 1343 0010 02D1     	 bne .L81
 1344              	 .loc 1 1487 0 is_stmt 0 discriminator 1
 1345 0012 074B     	 ldr r3,.L84
 1346 0014 1B68     	 ldr r3,[r3]
 1347 0016 00E0     	 b .L82
 1348              	.L81:
 1349              	 .loc 1 1487 0 discriminator 2
 1350 0018 7B68     	 ldr r3,[r7,#4]
 1351              	.L82:
 1352              	 .loc 1 1487 0 discriminator 4
 1353 001a FB60     	 str r3,[r7,#12]
1488:../Dave/Generated/FREERTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1354              	 .loc 1 1488 0 is_stmt 1 discriminator 4
 1355 001c FB68     	 ldr r3,[r7,#12]
 1356 001e DB6A     	 ldr r3,[r3,#44]
 1357 0020 BB60     	 str r3,[r7,#8]
1489:../Dave/Generated/FREERTOS/tasks.c ****         }
1490:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 1358              	 .loc 1 1490 0 discriminator 4
 1359 0022 FFF7FEFF 	 bl vPortExitCritical
1491:../Dave/Generated/FREERTOS/tasks.c **** 
1492:../Dave/Generated/FREERTOS/tasks.c ****         return uxReturn;
 1360              	 .loc 1 1492 0 discriminator 4
 1361 0026 BB68     	 ldr r3,[r7,#8]
1493:../Dave/Generated/FREERTOS/tasks.c ****     }
 1362              	 .loc 1 1493 0 discriminator 4
 1363 0028 1846     	 mov r0,r3
 1364 002a 1037     	 adds r7,r7,#16
 1365              	.LCFI38:
 1366              	 .cfi_def_cfa_offset 8
 1367 002c BD46     	 mov sp,r7
 1368              	.LCFI39:
 1369              	 .cfi_def_cfa_register 13
 1370              	 
 1371 002e 80BD     	 pop {r7,pc}
 1372              	.L85:
 1373              	 .align 2
 1374              	.L84:
 1375 0030 00000000 	 .word pxCurrentTCB
 1376              	 .cfi_endproc
 1377              	.LFE145:
 1379              	 .section .text.uxTaskPriorityGetFromISR,"ax",%progbits
 1380              	 .align 2
 1381              	 .global uxTaskPriorityGetFromISR
 1382              	 .thumb
 1383              	 .thumb_func
 1385              	uxTaskPriorityGetFromISR:
 1386              	.LFB146:
1494:../Dave/Generated/FREERTOS/tasks.c **** 
1495:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1497:../Dave/Generated/FREERTOS/tasks.c **** 
1498:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:../Dave/Generated/FREERTOS/tasks.c **** 
1500:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:../Dave/Generated/FREERTOS/tasks.c ****     {
 1387              	 .loc 1 1501 0
 1388              	 .cfi_startproc
 1389              	 
 1390              	 
 1391 0000 80B5     	 push {r7,lr}
 1392              	.LCFI40:
 1393              	 .cfi_def_cfa_offset 8
 1394              	 .cfi_offset 7,-8
 1395              	 .cfi_offset 14,-4
 1396 0002 88B0     	 sub sp,sp,#32
 1397              	.LCFI41:
 1398              	 .cfi_def_cfa_offset 40
 1399 0004 00AF     	 add r7,sp,#0
 1400              	.LCFI42:
 1401              	 .cfi_def_cfa_register 7
 1402 0006 7860     	 str r0,[r7,#4]
1502:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t const * pxTCB;
1503:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
1504:../Dave/Generated/FREERTOS/tasks.c **** 
1505:../Dave/Generated/FREERTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1506:../Dave/Generated/FREERTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1507:../Dave/Generated/FREERTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1508:../Dave/Generated/FREERTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1509:../Dave/Generated/FREERTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:../Dave/Generated/FREERTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1511:../Dave/Generated/FREERTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:../Dave/Generated/FREERTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1513:../Dave/Generated/FREERTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1514:../Dave/Generated/FREERTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1515:../Dave/Generated/FREERTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1516:../Dave/Generated/FREERTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:../Dave/Generated/FREERTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1518:../Dave/Generated/FREERTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1519:../Dave/Generated/FREERTOS/tasks.c ****          * provided on the following link:
1520:../Dave/Generated/FREERTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1521:../Dave/Generated/FREERTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1403              	 .loc 1 1521 0
 1404 0008 FFF7FEFF 	 bl vPortValidateInterruptPriority
 1405              	.LBB150:
 1406              	.LBB151:
 198:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 199:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	mov %0, %1												\n"\
 200:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	msr basepri, %0											\n"\
 201:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	isb														\n"\
 202:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	dsb														\n"\
 203:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         );
 205:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 206:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 207:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 208:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 209:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {
 211:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 213:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile
 1407              	 .loc 2 213 0
 1408              	
 1409 000c EFF31182 	 mrs r2,basepri
 1410 0010 4FF0FC03 	 mov r3,#252
 1411 0014 83F31188 	 msr basepri,r3
 1412 0018 BFF36F8F 	 isb 
 1413 001c BFF34F8F 	 dsb 
 1414              	
 1415              	
 1416              	 .thumb
 1417 0020 3A61     	 str r2,[r7,#16]
 1418 0022 FB60     	 str r3,[r7,#12]
 214:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 215:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	mrs %0, basepri											\n"\
 216:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	mov %1, %2												\n"\
 217:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	msr basepri, %1											\n"\
 218:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	isb														\n"\
 219:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	dsb														\n"\
 220:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 221:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         );
 222:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 223:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 224:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****          * warnings. */
 225:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         return ulOriginalBASEPRI;
 1419              	 .loc 2 225 0
 1420 0024 3B69     	 ldr r3,[r7,#16]
 1421              	.LBE151:
 1422              	.LBE150:
1522:../Dave/Generated/FREERTOS/tasks.c **** 
1523:../Dave/Generated/FREERTOS/tasks.c ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1423              	 .loc 1 1523 0
 1424 0026 FB61     	 str r3,[r7,#28]
1524:../Dave/Generated/FREERTOS/tasks.c ****         {
1525:../Dave/Generated/FREERTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1526:../Dave/Generated/FREERTOS/tasks.c ****              * task that is being queried. */
1527:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1425              	 .loc 1 1527 0
 1426 0028 7B68     	 ldr r3,[r7,#4]
 1427 002a 002B     	 cmp r3,#0
 1428 002c 02D1     	 bne .L88
 1429              	 .loc 1 1527 0 is_stmt 0 discriminator 1
 1430 002e 094B     	 ldr r3,.L91
 1431 0030 1B68     	 ldr r3,[r3]
 1432 0032 00E0     	 b .L89
 1433              	.L88:
 1434              	 .loc 1 1527 0 discriminator 2
 1435 0034 7B68     	 ldr r3,[r7,#4]
 1436              	.L89:
 1437              	 .loc 1 1527 0 discriminator 4
 1438 0036 BB61     	 str r3,[r7,#24]
1528:../Dave/Generated/FREERTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1439              	 .loc 1 1528 0 is_stmt 1 discriminator 4
 1440 0038 BB69     	 ldr r3,[r7,#24]
 1441 003a DB6A     	 ldr r3,[r3,#44]
 1442 003c 7B61     	 str r3,[r7,#20]
 1443 003e FB69     	 ldr r3,[r7,#28]
 1444 0040 BB60     	 str r3,[r7,#8]
 1445              	.LBB152:
 1446              	.LBB153:
 226:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 227:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 228:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 229:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {
 231:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile
 1447              	 .loc 2 231 0 discriminator 4
 1448 0042 BB68     	 ldr r3,[r7,#8]
 1449              	
 1450 0044 83F31188 	 msr basepri,r3
 1451              	
 1452              	 .thumb
 1453              	.LBE153:
 1454              	.LBE152:
1529:../Dave/Generated/FREERTOS/tasks.c ****         }
1530:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:../Dave/Generated/FREERTOS/tasks.c **** 
1532:../Dave/Generated/FREERTOS/tasks.c ****         return uxReturn;
 1455              	 .loc 1 1532 0 discriminator 4
 1456 0048 7B69     	 ldr r3,[r7,#20]
1533:../Dave/Generated/FREERTOS/tasks.c ****     }
 1457              	 .loc 1 1533 0 discriminator 4
 1458 004a 1846     	 mov r0,r3
 1459 004c 2037     	 adds r7,r7,#32
 1460              	.LCFI43:
 1461              	 .cfi_def_cfa_offset 8
 1462 004e BD46     	 mov sp,r7
 1463              	.LCFI44:
 1464              	 .cfi_def_cfa_register 13
 1465              	 
 1466 0050 80BD     	 pop {r7,pc}
 1467              	.L92:
 1468 0052 00BF     	 .align 2
 1469              	.L91:
 1470 0054 00000000 	 .word pxCurrentTCB
 1471              	 .cfi_endproc
 1472              	.LFE146:
 1474              	 .section .text.vTaskPrioritySet,"ax",%progbits
 1475              	 .align 2
 1476              	 .global vTaskPrioritySet
 1477              	 .thumb
 1478              	 .thumb_func
 1480              	vTaskPrioritySet:
 1481              	.LFB147:
1534:../Dave/Generated/FREERTOS/tasks.c **** 
1535:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1537:../Dave/Generated/FREERTOS/tasks.c **** 
1538:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:../Dave/Generated/FREERTOS/tasks.c **** 
1540:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
1541:../Dave/Generated/FREERTOS/tasks.c ****                            UBaseType_t uxNewPriority )
1542:../Dave/Generated/FREERTOS/tasks.c ****     {
 1482              	 .loc 1 1542 0
 1483              	 .cfi_startproc
 1484              	 
 1485              	 
 1486 0000 80B5     	 push {r7,lr}
 1487              	.LCFI45:
 1488              	 .cfi_def_cfa_offset 8
 1489              	 .cfi_offset 7,-8
 1490              	 .cfi_offset 14,-4
 1491 0002 88B0     	 sub sp,sp,#32
 1492              	.LCFI46:
 1493              	 .cfi_def_cfa_offset 40
 1494 0004 00AF     	 add r7,sp,#0
 1495              	.LCFI47:
 1496              	 .cfi_def_cfa_register 7
 1497 0006 7860     	 str r0,[r7,#4]
 1498 0008 3960     	 str r1,[r7]
1543:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
1544:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1545:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1499              	 .loc 1 1545 0
 1500 000a 0023     	 movs r3,#0
 1501 000c FB61     	 str r3,[r7,#28]
1546:../Dave/Generated/FREERTOS/tasks.c **** 
1547:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1502              	 .loc 1 1547 0
 1503 000e 3B68     	 ldr r3,[r7]
 1504 0010 042B     	 cmp r3,#4
 1505 0012 09D9     	 bls .L94
 1506              	.LBB154:
 1507              	.LBB155:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 1508              	 .loc 2 197 0 discriminator 1
 1509              	
 1510 0014 4FF0FC03 	 mov r3,#252
 1511 0018 83F31188 	 msr basepri,r3
 1512 001c BFF36F8F 	 isb 
 1513 0020 BFF34F8F 	 dsb 
 1514              	
 1515              	
 1516              	 .thumb
 1517 0024 FB60     	 str r3,[r7,#12]
 1518              	.L95:
 1519              	.LBE155:
 1520              	.LBE154:
 1521              	 .loc 1 1547 0 discriminator 1
 1522 0026 FEE7     	 b .L95
 1523              	.L94:
1548:../Dave/Generated/FREERTOS/tasks.c **** 
1549:../Dave/Generated/FREERTOS/tasks.c ****         /* Ensure the new priority is valid. */
1550:../Dave/Generated/FREERTOS/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1524              	 .loc 1 1550 0
 1525 0028 3B68     	 ldr r3,[r7]
 1526 002a 042B     	 cmp r3,#4
 1527 002c 01D9     	 bls .L96
1551:../Dave/Generated/FREERTOS/tasks.c ****         {
1552:../Dave/Generated/FREERTOS/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1528              	 .loc 1 1552 0
 1529 002e 0423     	 movs r3,#4
 1530 0030 3B60     	 str r3,[r7]
 1531              	.L96:
1553:../Dave/Generated/FREERTOS/tasks.c ****         }
1554:../Dave/Generated/FREERTOS/tasks.c ****         else
1555:../Dave/Generated/FREERTOS/tasks.c ****         {
1556:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1557:../Dave/Generated/FREERTOS/tasks.c ****         }
1558:../Dave/Generated/FREERTOS/tasks.c **** 
1559:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 1532              	 .loc 1 1559 0
 1533 0032 FFF7FEFF 	 bl vPortEnterCritical
1560:../Dave/Generated/FREERTOS/tasks.c ****         {
1561:../Dave/Generated/FREERTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1562:../Dave/Generated/FREERTOS/tasks.c ****              * task that is being changed. */
1563:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1534              	 .loc 1 1563 0
 1535 0036 7B68     	 ldr r3,[r7,#4]
 1536 0038 002B     	 cmp r3,#0
 1537 003a 02D1     	 bne .L97
 1538              	 .loc 1 1563 0 is_stmt 0 discriminator 1
 1539 003c 414B     	 ldr r3,.L106
 1540 003e 1B68     	 ldr r3,[r3]
 1541 0040 00E0     	 b .L98
 1542              	.L97:
 1543              	 .loc 1 1563 0 discriminator 2
 1544 0042 7B68     	 ldr r3,[r7,#4]
 1545              	.L98:
 1546              	 .loc 1 1563 0 discriminator 4
 1547 0044 BB61     	 str r3,[r7,#24]
1564:../Dave/Generated/FREERTOS/tasks.c **** 
1565:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1566:../Dave/Generated/FREERTOS/tasks.c **** 
1567:../Dave/Generated/FREERTOS/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
1568:../Dave/Generated/FREERTOS/tasks.c ****                 {
1569:../Dave/Generated/FREERTOS/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxBasePriority;
 1548              	 .loc 1 1569 0 is_stmt 1 discriminator 4
 1549 0046 BB69     	 ldr r3,[r7,#24]
 1550 0048 DB6C     	 ldr r3,[r3,#76]
 1551 004a 7B61     	 str r3,[r7,#20]
1570:../Dave/Generated/FREERTOS/tasks.c ****                 }
1571:../Dave/Generated/FREERTOS/tasks.c ****             #else
1572:../Dave/Generated/FREERTOS/tasks.c ****                 {
1573:../Dave/Generated/FREERTOS/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxPriority;
1574:../Dave/Generated/FREERTOS/tasks.c ****                 }
1575:../Dave/Generated/FREERTOS/tasks.c ****             #endif
1576:../Dave/Generated/FREERTOS/tasks.c **** 
1577:../Dave/Generated/FREERTOS/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
 1552              	 .loc 1 1577 0 discriminator 4
 1553 004c 7A69     	 ldr r2,[r7,#20]
 1554 004e 3B68     	 ldr r3,[r7]
 1555 0050 9A42     	 cmp r2,r3
 1556 0052 71D0     	 beq .L99
1578:../Dave/Generated/FREERTOS/tasks.c ****             {
1579:../Dave/Generated/FREERTOS/tasks.c ****                 /* The priority change may have readied a task of higher
1580:../Dave/Generated/FREERTOS/tasks.c ****                  * priority than the calling task. */
1581:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
 1557              	 .loc 1 1581 0
 1558 0054 3A68     	 ldr r2,[r7]
 1559 0056 7B69     	 ldr r3,[r7,#20]
 1560 0058 9A42     	 cmp r2,r3
 1561 005a 0DD9     	 bls .L100
1582:../Dave/Generated/FREERTOS/tasks.c ****                 {
1583:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB != pxCurrentTCB )
 1562              	 .loc 1 1583 0
 1563 005c 394B     	 ldr r3,.L106
 1564 005e 1B68     	 ldr r3,[r3]
 1565 0060 BA69     	 ldr r2,[r7,#24]
 1566 0062 9A42     	 cmp r2,r3
 1567 0064 0FD0     	 beq .L101
1584:../Dave/Generated/FREERTOS/tasks.c ****                     {
1585:../Dave/Generated/FREERTOS/tasks.c ****                         /* The priority of a task other than the currently
1586:../Dave/Generated/FREERTOS/tasks.c ****                          * running task is being raised.  Is the priority being
1587:../Dave/Generated/FREERTOS/tasks.c ****                          * raised above that of the running task? */
1588:../Dave/Generated/FREERTOS/tasks.c ****                         if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1568              	 .loc 1 1588 0
 1569 0066 374B     	 ldr r3,.L106
 1570 0068 1B68     	 ldr r3,[r3]
 1571 006a DA6A     	 ldr r2,[r3,#44]
 1572 006c 3B68     	 ldr r3,[r7]
 1573 006e 9A42     	 cmp r2,r3
 1574 0070 09D8     	 bhi .L101
1589:../Dave/Generated/FREERTOS/tasks.c ****                         {
1590:../Dave/Generated/FREERTOS/tasks.c ****                             xYieldRequired = pdTRUE;
 1575              	 .loc 1 1590 0
 1576 0072 0123     	 movs r3,#1
 1577 0074 FB61     	 str r3,[r7,#28]
 1578 0076 06E0     	 b .L101
 1579              	.L100:
1591:../Dave/Generated/FREERTOS/tasks.c ****                         }
1592:../Dave/Generated/FREERTOS/tasks.c ****                         else
1593:../Dave/Generated/FREERTOS/tasks.c ****                         {
1594:../Dave/Generated/FREERTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1595:../Dave/Generated/FREERTOS/tasks.c ****                         }
1596:../Dave/Generated/FREERTOS/tasks.c ****                     }
1597:../Dave/Generated/FREERTOS/tasks.c ****                     else
1598:../Dave/Generated/FREERTOS/tasks.c ****                     {
1599:../Dave/Generated/FREERTOS/tasks.c ****                         /* The priority of the running task is being raised,
1600:../Dave/Generated/FREERTOS/tasks.c ****                          * but the running task must already be the highest
1601:../Dave/Generated/FREERTOS/tasks.c ****                          * priority task able to run so no yield is required. */
1602:../Dave/Generated/FREERTOS/tasks.c ****                     }
1603:../Dave/Generated/FREERTOS/tasks.c ****                 }
1604:../Dave/Generated/FREERTOS/tasks.c ****                 else if( pxTCB == pxCurrentTCB )
 1580              	 .loc 1 1604 0
 1581 0078 324B     	 ldr r3,.L106
 1582 007a 1B68     	 ldr r3,[r3]
 1583 007c BA69     	 ldr r2,[r7,#24]
 1584 007e 9A42     	 cmp r2,r3
 1585 0080 01D1     	 bne .L101
1605:../Dave/Generated/FREERTOS/tasks.c ****                 {
1606:../Dave/Generated/FREERTOS/tasks.c ****                     /* Setting the priority of the running task down means
1607:../Dave/Generated/FREERTOS/tasks.c ****                      * there may now be another task of higher priority that
1608:../Dave/Generated/FREERTOS/tasks.c ****                      * is ready to execute. */
1609:../Dave/Generated/FREERTOS/tasks.c ****                     xYieldRequired = pdTRUE;
 1586              	 .loc 1 1609 0
 1587 0082 0123     	 movs r3,#1
 1588 0084 FB61     	 str r3,[r7,#28]
 1589              	.L101:
1610:../Dave/Generated/FREERTOS/tasks.c ****                 }
1611:../Dave/Generated/FREERTOS/tasks.c ****                 else
1612:../Dave/Generated/FREERTOS/tasks.c ****                 {
1613:../Dave/Generated/FREERTOS/tasks.c ****                     /* Setting the priority of any other task down does not
1614:../Dave/Generated/FREERTOS/tasks.c ****                      * require a yield as the running task must be above the
1615:../Dave/Generated/FREERTOS/tasks.c ****                      * new priority of the task being modified. */
1616:../Dave/Generated/FREERTOS/tasks.c ****                 }
1617:../Dave/Generated/FREERTOS/tasks.c **** 
1618:../Dave/Generated/FREERTOS/tasks.c ****                 /* Remember the ready list the task might be referenced from
1619:../Dave/Generated/FREERTOS/tasks.c ****                  * before its uxPriority member is changed so the
1620:../Dave/Generated/FREERTOS/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1621:../Dave/Generated/FREERTOS/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1590              	 .loc 1 1621 0
 1591 0086 BB69     	 ldr r3,[r7,#24]
 1592 0088 DB6A     	 ldr r3,[r3,#44]
 1593 008a 3B61     	 str r3,[r7,#16]
1622:../Dave/Generated/FREERTOS/tasks.c **** 
1623:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
1624:../Dave/Generated/FREERTOS/tasks.c ****                     {
1625:../Dave/Generated/FREERTOS/tasks.c ****                         /* Only change the priority being used if the task is not
1626:../Dave/Generated/FREERTOS/tasks.c ****                          * currently using an inherited priority. */
1627:../Dave/Generated/FREERTOS/tasks.c ****                         if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1594              	 .loc 1 1627 0
 1595 008c BB69     	 ldr r3,[r7,#24]
 1596 008e DA6C     	 ldr r2,[r3,#76]
 1597 0090 BB69     	 ldr r3,[r7,#24]
 1598 0092 DB6A     	 ldr r3,[r3,#44]
 1599 0094 9A42     	 cmp r2,r3
 1600 0096 02D1     	 bne .L102
1628:../Dave/Generated/FREERTOS/tasks.c ****                         {
1629:../Dave/Generated/FREERTOS/tasks.c ****                             pxTCB->uxPriority = uxNewPriority;
 1601              	 .loc 1 1629 0
 1602 0098 BB69     	 ldr r3,[r7,#24]
 1603 009a 3A68     	 ldr r2,[r7]
 1604 009c DA62     	 str r2,[r3,#44]
 1605              	.L102:
1630:../Dave/Generated/FREERTOS/tasks.c ****                         }
1631:../Dave/Generated/FREERTOS/tasks.c ****                         else
1632:../Dave/Generated/FREERTOS/tasks.c ****                         {
1633:../Dave/Generated/FREERTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1634:../Dave/Generated/FREERTOS/tasks.c ****                         }
1635:../Dave/Generated/FREERTOS/tasks.c **** 
1636:../Dave/Generated/FREERTOS/tasks.c ****                         /* The base priority gets set whatever. */
1637:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB->uxBasePriority = uxNewPriority;
 1606              	 .loc 1 1637 0
 1607 009e BB69     	 ldr r3,[r7,#24]
 1608 00a0 3A68     	 ldr r2,[r7]
 1609 00a2 DA64     	 str r2,[r3,#76]
1638:../Dave/Generated/FREERTOS/tasks.c ****                     }
1639:../Dave/Generated/FREERTOS/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1640:../Dave/Generated/FREERTOS/tasks.c ****                     {
1641:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
1642:../Dave/Generated/FREERTOS/tasks.c ****                     }
1643:../Dave/Generated/FREERTOS/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1644:../Dave/Generated/FREERTOS/tasks.c **** 
1645:../Dave/Generated/FREERTOS/tasks.c ****                 /* Only reset the event list item value if the value is not
1646:../Dave/Generated/FREERTOS/tasks.c ****                  * being used for anything else. */
1647:../Dave/Generated/FREERTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
 1610              	 .loc 1 1647 0
 1611 00a4 BB69     	 ldr r3,[r7,#24]
 1612 00a6 9B69     	 ldr r3,[r3,#24]
 1613 00a8 002B     	 cmp r3,#0
 1614 00aa 04DB     	 blt .L103
1648:../Dave/Generated/FREERTOS/tasks.c ****                 {
1649:../Dave/Generated/FREERTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
 1615              	 .loc 1 1649 0
 1616 00ac 3B68     	 ldr r3,[r7]
 1617 00ae C3F10502 	 rsb r2,r3,#5
 1618 00b2 BB69     	 ldr r3,[r7,#24]
 1619 00b4 9A61     	 str r2,[r3,#24]
 1620              	.L103:
1650:../Dave/Generated/FREERTOS/tasks.c ****                 }
1651:../Dave/Generated/FREERTOS/tasks.c ****                 else
1652:../Dave/Generated/FREERTOS/tasks.c ****                 {
1653:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1654:../Dave/Generated/FREERTOS/tasks.c ****                 }
1655:../Dave/Generated/FREERTOS/tasks.c **** 
1656:../Dave/Generated/FREERTOS/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
1657:../Dave/Generated/FREERTOS/tasks.c ****                  * nothing more than change its priority variable. However, if
1658:../Dave/Generated/FREERTOS/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
1659:../Dave/Generated/FREERTOS/tasks.c ****                  * in the list appropriate to its new priority. */
1660:../Dave/Generated/FREERTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
 1621              	 .loc 1 1660 0
 1622 00b6 BB69     	 ldr r3,[r7,#24]
 1623 00b8 5969     	 ldr r1,[r3,#20]
 1624 00ba 3A69     	 ldr r2,[r7,#16]
 1625 00bc 1346     	 mov r3,r2
 1626 00be 9B00     	 lsls r3,r3,#2
 1627 00c0 1344     	 add r3,r3,r2
 1628 00c2 9B00     	 lsls r3,r3,#2
 1629 00c4 204A     	 ldr r2,.L106+4
 1630 00c6 1344     	 add r3,r3,r2
 1631 00c8 9942     	 cmp r1,r3
 1632 00ca 2AD1     	 bne .L104
1661:../Dave/Generated/FREERTOS/tasks.c ****                 {
1662:../Dave/Generated/FREERTOS/tasks.c ****                     /* The task is currently in its ready list - remove before
1663:../Dave/Generated/FREERTOS/tasks.c ****                      * adding it to it's new ready list.  As we are in a critical
1664:../Dave/Generated/FREERTOS/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
1665:../Dave/Generated/FREERTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1633              	 .loc 1 1665 0
 1634 00cc BB69     	 ldr r3,[r7,#24]
 1635 00ce 0433     	 adds r3,r3,#4
 1636 00d0 1846     	 mov r0,r3
 1637 00d2 FFF7FEFF 	 bl uxListRemove
 1638 00d6 0346     	 mov r3,r0
 1639 00d8 002B     	 cmp r3,#0
 1640 00da 09D1     	 bne .L105
1666:../Dave/Generated/FREERTOS/tasks.c ****                     {
1667:../Dave/Generated/FREERTOS/tasks.c ****                         /* It is known that the task is in its ready list so
1668:../Dave/Generated/FREERTOS/tasks.c ****                          * there is no need to check again and the port level
1669:../Dave/Generated/FREERTOS/tasks.c ****                          * reset macro can be called directly. */
1670:../Dave/Generated/FREERTOS/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1641              	 .loc 1 1670 0
 1642 00dc 3B69     	 ldr r3,[r7,#16]
 1643 00de 0122     	 movs r2,#1
 1644 00e0 02FA03F3 	 lsl r3,r2,r3
 1645 00e4 DA43     	 mvns r2,r3
 1646 00e6 194B     	 ldr r3,.L106+8
 1647 00e8 1B68     	 ldr r3,[r3]
 1648 00ea 1340     	 ands r3,r3,r2
 1649 00ec 174A     	 ldr r2,.L106+8
 1650 00ee 1360     	 str r3,[r2]
 1651              	.L105:
1671:../Dave/Generated/FREERTOS/tasks.c ****                     }
1672:../Dave/Generated/FREERTOS/tasks.c ****                     else
1673:../Dave/Generated/FREERTOS/tasks.c ****                     {
1674:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1675:../Dave/Generated/FREERTOS/tasks.c ****                     }
1676:../Dave/Generated/FREERTOS/tasks.c **** 
1677:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1652              	 .loc 1 1677 0
 1653 00f0 BB69     	 ldr r3,[r7,#24]
 1654 00f2 DB6A     	 ldr r3,[r3,#44]
 1655 00f4 1A46     	 mov r2,r3
 1656 00f6 0123     	 movs r3,#1
 1657 00f8 03FA02F2 	 lsl r2,r3,r2
 1658 00fc 134B     	 ldr r3,.L106+8
 1659 00fe 1B68     	 ldr r3,[r3]
 1660 0100 1343     	 orrs r3,r3,r2
 1661 0102 124A     	 ldr r2,.L106+8
 1662 0104 1360     	 str r3,[r2]
 1663 0106 BB69     	 ldr r3,[r7,#24]
 1664 0108 DA6A     	 ldr r2,[r3,#44]
 1665 010a 1346     	 mov r3,r2
 1666 010c 9B00     	 lsls r3,r3,#2
 1667 010e 1344     	 add r3,r3,r2
 1668 0110 9B00     	 lsls r3,r3,#2
 1669 0112 0D4A     	 ldr r2,.L106+4
 1670 0114 1A44     	 add r2,r2,r3
 1671 0116 BB69     	 ldr r3,[r7,#24]
 1672 0118 0433     	 adds r3,r3,#4
 1673 011a 1046     	 mov r0,r2
 1674 011c 1946     	 mov r1,r3
 1675 011e FFF7FEFF 	 bl vListInsertEnd
 1676              	.L104:
1678:../Dave/Generated/FREERTOS/tasks.c ****                 }
1679:../Dave/Generated/FREERTOS/tasks.c ****                 else
1680:../Dave/Generated/FREERTOS/tasks.c ****                 {
1681:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1682:../Dave/Generated/FREERTOS/tasks.c ****                 }
1683:../Dave/Generated/FREERTOS/tasks.c **** 
1684:../Dave/Generated/FREERTOS/tasks.c ****                 if( xYieldRequired != pdFALSE )
 1677              	 .loc 1 1684 0
 1678 0122 FB69     	 ldr r3,[r7,#28]
 1679 0124 002B     	 cmp r3,#0
 1680 0126 07D0     	 beq .L99
1685:../Dave/Generated/FREERTOS/tasks.c ****                 {
1686:../Dave/Generated/FREERTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
 1681              	 .loc 1 1686 0
 1682 0128 094B     	 ldr r3,.L106+12
 1683 012a 4FF08052 	 mov r2,#268435456
 1684 012e 1A60     	 str r2,[r3]
 1685              	
 1686 0130 BFF34F8F 	 dsb
 1687              	
 1688              	
 1689 0134 BFF36F8F 	 isb
 1690              	
 1691              	 .thumb
 1692              	.L99:
1687:../Dave/Generated/FREERTOS/tasks.c ****                 }
1688:../Dave/Generated/FREERTOS/tasks.c ****                 else
1689:../Dave/Generated/FREERTOS/tasks.c ****                 {
1690:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1691:../Dave/Generated/FREERTOS/tasks.c ****                 }
1692:../Dave/Generated/FREERTOS/tasks.c **** 
1693:../Dave/Generated/FREERTOS/tasks.c ****                 /* Remove compiler warning about unused variables when the port
1694:../Dave/Generated/FREERTOS/tasks.c ****                  * optimised task selection is not being used. */
1695:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
1696:../Dave/Generated/FREERTOS/tasks.c ****             }
1697:../Dave/Generated/FREERTOS/tasks.c ****         }
1698:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 1693              	 .loc 1 1698 0
 1694 0138 FFF7FEFF 	 bl vPortExitCritical
1699:../Dave/Generated/FREERTOS/tasks.c ****     }
 1695              	 .loc 1 1699 0
 1696 013c 2037     	 adds r7,r7,#32
 1697              	.LCFI48:
 1698              	 .cfi_def_cfa_offset 8
 1699 013e BD46     	 mov sp,r7
 1700              	.LCFI49:
 1701              	 .cfi_def_cfa_register 13
 1702              	 
 1703 0140 80BD     	 pop {r7,pc}
 1704              	.L107:
 1705 0142 00BF     	 .align 2
 1706              	.L106:
 1707 0144 00000000 	 .word pxCurrentTCB
 1708 0148 00000000 	 .word pxReadyTasksLists
 1709 014c 00000000 	 .word uxTopReadyPriority
 1710 0150 04ED00E0 	 .word -536810236
 1711              	 .cfi_endproc
 1712              	.LFE147:
 1714              	 .section .text.vTaskSuspend,"ax",%progbits
 1715              	 .align 2
 1716              	 .global vTaskSuspend
 1717              	 .thumb
 1718              	 .thumb_func
 1720              	vTaskSuspend:
 1721              	.LFB148:
1700:../Dave/Generated/FREERTOS/tasks.c **** 
1701:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1702:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1703:../Dave/Generated/FREERTOS/tasks.c **** 
1704:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1705:../Dave/Generated/FREERTOS/tasks.c **** 
1706:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1707:../Dave/Generated/FREERTOS/tasks.c ****     {
 1722              	 .loc 1 1707 0
 1723              	 .cfi_startproc
 1724              	 
 1725              	 
 1726 0000 80B5     	 push {r7,lr}
 1727              	.LCFI50:
 1728              	 .cfi_def_cfa_offset 8
 1729              	 .cfi_offset 7,-8
 1730              	 .cfi_offset 14,-4
 1731 0002 86B0     	 sub sp,sp,#24
 1732              	.LCFI51:
 1733              	 .cfi_def_cfa_offset 32
 1734 0004 00AF     	 add r7,sp,#0
 1735              	.LCFI52:
 1736              	 .cfi_def_cfa_register 7
 1737 0006 7860     	 str r0,[r7,#4]
1708:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
1709:../Dave/Generated/FREERTOS/tasks.c **** 
1710:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 1738              	 .loc 1 1710 0
 1739 0008 FFF7FEFF 	 bl vPortEnterCritical
1711:../Dave/Generated/FREERTOS/tasks.c ****         {
1712:../Dave/Generated/FREERTOS/tasks.c ****             /* If null is passed in here then it is the running task that is
1713:../Dave/Generated/FREERTOS/tasks.c ****              * being suspended. */
1714:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1740              	 .loc 1 1714 0
 1741 000c 7B68     	 ldr r3,[r7,#4]
 1742 000e 002B     	 cmp r3,#0
 1743 0010 02D1     	 bne .L109
 1744              	 .loc 1 1714 0 is_stmt 0 discriminator 1
 1745 0012 424B     	 ldr r3,.L124
 1746 0014 1B68     	 ldr r3,[r3]
 1747 0016 00E0     	 b .L110
 1748              	.L109:
 1749              	 .loc 1 1714 0 discriminator 2
 1750 0018 7B68     	 ldr r3,[r7,#4]
 1751              	.L110:
 1752              	 .loc 1 1714 0 discriminator 4
 1753 001a 3B61     	 str r3,[r7,#16]
1715:../Dave/Generated/FREERTOS/tasks.c **** 
1716:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_SUSPEND( pxTCB );
1717:../Dave/Generated/FREERTOS/tasks.c **** 
1718:../Dave/Generated/FREERTOS/tasks.c ****             /* Remove task from the ready/delayed list and place in the
1719:../Dave/Generated/FREERTOS/tasks.c ****              * suspended list. */
1720:../Dave/Generated/FREERTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1754              	 .loc 1 1720 0 is_stmt 1 discriminator 4
 1755 001c 3B69     	 ldr r3,[r7,#16]
 1756 001e 0433     	 adds r3,r3,#4
 1757 0020 1846     	 mov r0,r3
 1758 0022 FFF7FEFF 	 bl uxListRemove
 1759 0026 0346     	 mov r3,r0
 1760 0028 002B     	 cmp r3,#0
 1761 002a 15D1     	 bne .L111
1721:../Dave/Generated/FREERTOS/tasks.c ****             {
1722:../Dave/Generated/FREERTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1762              	 .loc 1 1722 0
 1763 002c 3B69     	 ldr r3,[r7,#16]
 1764 002e DA6A     	 ldr r2,[r3,#44]
 1765 0030 3B49     	 ldr r1,.L124+4
 1766 0032 1346     	 mov r3,r2
 1767 0034 9B00     	 lsls r3,r3,#2
 1768 0036 1344     	 add r3,r3,r2
 1769 0038 9B00     	 lsls r3,r3,#2
 1770 003a 0B44     	 add r3,r3,r1
 1771 003c 1B68     	 ldr r3,[r3]
 1772 003e 002B     	 cmp r3,#0
 1773 0040 0AD1     	 bne .L111
 1774              	 .loc 1 1722 0 is_stmt 0 discriminator 1
 1775 0042 3B69     	 ldr r3,[r7,#16]
 1776 0044 DB6A     	 ldr r3,[r3,#44]
 1777 0046 1A46     	 mov r2,r3
 1778 0048 0123     	 movs r3,#1
 1779 004a 9340     	 lsls r3,r3,r2
 1780 004c DA43     	 mvns r2,r3
 1781 004e 354B     	 ldr r3,.L124+8
 1782 0050 1B68     	 ldr r3,[r3]
 1783 0052 1340     	 ands r3,r3,r2
 1784 0054 334A     	 ldr r2,.L124+8
 1785 0056 1360     	 str r3,[r2]
 1786              	.L111:
1723:../Dave/Generated/FREERTOS/tasks.c ****             }
1724:../Dave/Generated/FREERTOS/tasks.c ****             else
1725:../Dave/Generated/FREERTOS/tasks.c ****             {
1726:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1727:../Dave/Generated/FREERTOS/tasks.c ****             }
1728:../Dave/Generated/FREERTOS/tasks.c **** 
1729:../Dave/Generated/FREERTOS/tasks.c ****             /* Is the task waiting on an event also? */
1730:../Dave/Generated/FREERTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1787              	 .loc 1 1730 0 is_stmt 1
 1788 0058 3B69     	 ldr r3,[r7,#16]
 1789 005a 9B6A     	 ldr r3,[r3,#40]
 1790 005c 002B     	 cmp r3,#0
 1791 005e 04D0     	 beq .L113
1731:../Dave/Generated/FREERTOS/tasks.c ****             {
1732:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1792              	 .loc 1 1732 0
 1793 0060 3B69     	 ldr r3,[r7,#16]
 1794 0062 1833     	 adds r3,r3,#24
 1795 0064 1846     	 mov r0,r3
 1796 0066 FFF7FEFF 	 bl uxListRemove
 1797              	.L113:
1733:../Dave/Generated/FREERTOS/tasks.c ****             }
1734:../Dave/Generated/FREERTOS/tasks.c ****             else
1735:../Dave/Generated/FREERTOS/tasks.c ****             {
1736:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1737:../Dave/Generated/FREERTOS/tasks.c ****             }
1738:../Dave/Generated/FREERTOS/tasks.c **** 
1739:../Dave/Generated/FREERTOS/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1798              	 .loc 1 1739 0
 1799 006a 3B69     	 ldr r3,[r7,#16]
 1800 006c 0433     	 adds r3,r3,#4
 1801 006e 2E48     	 ldr r0,.L124+12
 1802 0070 1946     	 mov r1,r3
 1803 0072 FFF7FEFF 	 bl vListInsertEnd
 1804              	.LBB156:
1740:../Dave/Generated/FREERTOS/tasks.c **** 
1741:../Dave/Generated/FREERTOS/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1742:../Dave/Generated/FREERTOS/tasks.c ****                 {
1743:../Dave/Generated/FREERTOS/tasks.c ****                     BaseType_t x;
1744:../Dave/Generated/FREERTOS/tasks.c **** 
1745:../Dave/Generated/FREERTOS/tasks.c ****                     for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 1805              	 .loc 1 1745 0
 1806 0076 0023     	 movs r3,#0
 1807 0078 7B61     	 str r3,[r7,#20]
 1808 007a 10E0     	 b .L114
 1809              	.L116:
1746:../Dave/Generated/FREERTOS/tasks.c ****                     {
1747:../Dave/Generated/FREERTOS/tasks.c ****                         if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 1810              	 .loc 1 1747 0
 1811 007c 3A69     	 ldr r2,[r7,#16]
 1812 007e 7B69     	 ldr r3,[r7,#20]
 1813 0080 1344     	 add r3,r3,r2
 1814 0082 6833     	 adds r3,r3,#104
 1815 0084 1B79     	 ldrb r3,[r3,#4]
 1816 0086 DBB2     	 uxtb r3,r3
 1817 0088 012B     	 cmp r3,#1
 1818 008a 05D1     	 bne .L115
1748:../Dave/Generated/FREERTOS/tasks.c ****                         {
1749:../Dave/Generated/FREERTOS/tasks.c ****                             /* The task was blocked to wait for a notification, but is
1750:../Dave/Generated/FREERTOS/tasks.c ****                              * now suspended, so no notification was received. */
1751:../Dave/Generated/FREERTOS/tasks.c ****                             pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 1819              	 .loc 1 1751 0
 1820 008c 3A69     	 ldr r2,[r7,#16]
 1821 008e 7B69     	 ldr r3,[r7,#20]
 1822 0090 1344     	 add r3,r3,r2
 1823 0092 6833     	 adds r3,r3,#104
 1824 0094 0022     	 movs r2,#0
 1825 0096 1A71     	 strb r2,[r3,#4]
 1826              	.L115:
1745:../Dave/Generated/FREERTOS/tasks.c ****                     {
 1827              	 .loc 1 1745 0 discriminator 2
 1828 0098 7B69     	 ldr r3,[r7,#20]
 1829 009a 0133     	 adds r3,r3,#1
 1830 009c 7B61     	 str r3,[r7,#20]
 1831              	.L114:
1745:../Dave/Generated/FREERTOS/tasks.c ****                     {
 1832              	 .loc 1 1745 0 is_stmt 0 discriminator 1
 1833 009e 7B69     	 ldr r3,[r7,#20]
 1834 00a0 002B     	 cmp r3,#0
 1835 00a2 EBDD     	 ble .L116
 1836              	.LBE156:
1752:../Dave/Generated/FREERTOS/tasks.c ****                         }
1753:../Dave/Generated/FREERTOS/tasks.c ****                     }
1754:../Dave/Generated/FREERTOS/tasks.c ****                 }
1755:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1756:../Dave/Generated/FREERTOS/tasks.c ****         }
1757:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 1837              	 .loc 1 1757 0 is_stmt 1
 1838 00a4 FFF7FEFF 	 bl vPortExitCritical
1758:../Dave/Generated/FREERTOS/tasks.c **** 
1759:../Dave/Generated/FREERTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
 1839              	 .loc 1 1759 0
 1840 00a8 204B     	 ldr r3,.L124+16
 1841 00aa 1B68     	 ldr r3,[r3]
 1842 00ac 002B     	 cmp r3,#0
 1843 00ae 05D0     	 beq .L117
1760:../Dave/Generated/FREERTOS/tasks.c ****         {
1761:../Dave/Generated/FREERTOS/tasks.c ****             /* Reset the next expected unblock time in case it referred to the
1762:../Dave/Generated/FREERTOS/tasks.c ****              * task that is now in the Suspended state. */
1763:../Dave/Generated/FREERTOS/tasks.c ****             taskENTER_CRITICAL();
 1844              	 .loc 1 1763 0
 1845 00b0 FFF7FEFF 	 bl vPortEnterCritical
1764:../Dave/Generated/FREERTOS/tasks.c ****             {
1765:../Dave/Generated/FREERTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
 1846              	 .loc 1 1765 0
 1847 00b4 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
1766:../Dave/Generated/FREERTOS/tasks.c ****             }
1767:../Dave/Generated/FREERTOS/tasks.c ****             taskEXIT_CRITICAL();
 1848              	 .loc 1 1767 0
 1849 00b8 FFF7FEFF 	 bl vPortExitCritical
 1850              	.L117:
1768:../Dave/Generated/FREERTOS/tasks.c ****         }
1769:../Dave/Generated/FREERTOS/tasks.c ****         else
1770:../Dave/Generated/FREERTOS/tasks.c ****         {
1771:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1772:../Dave/Generated/FREERTOS/tasks.c ****         }
1773:../Dave/Generated/FREERTOS/tasks.c **** 
1774:../Dave/Generated/FREERTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
 1851              	 .loc 1 1774 0
 1852 00bc 174B     	 ldr r3,.L124
 1853 00be 1B68     	 ldr r3,[r3]
 1854 00c0 3A69     	 ldr r2,[r7,#16]
 1855 00c2 9A42     	 cmp r2,r3
 1856 00c4 26D1     	 bne .L108
1775:../Dave/Generated/FREERTOS/tasks.c ****         {
1776:../Dave/Generated/FREERTOS/tasks.c ****             if( xSchedulerRunning != pdFALSE )
 1857              	 .loc 1 1776 0
 1858 00c6 194B     	 ldr r3,.L124+16
 1859 00c8 1B68     	 ldr r3,[r3]
 1860 00ca 002B     	 cmp r3,#0
 1861 00cc 16D0     	 beq .L119
1777:../Dave/Generated/FREERTOS/tasks.c ****             {
1778:../Dave/Generated/FREERTOS/tasks.c ****                 /* The current task has just been suspended. */
1779:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
 1862              	 .loc 1 1779 0
 1863 00ce 184B     	 ldr r3,.L124+20
 1864 00d0 1B68     	 ldr r3,[r3]
 1865 00d2 002B     	 cmp r3,#0
 1866 00d4 09D0     	 beq .L120
 1867              	.LBB157:
 1868              	.LBB158:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 1869              	 .loc 2 197 0 discriminator 1
 1870              	
 1871 00d6 4FF0FC03 	 mov r3,#252
 1872 00da 83F31188 	 msr basepri,r3
 1873 00de BFF36F8F 	 isb 
 1874 00e2 BFF34F8F 	 dsb 
 1875              	
 1876              	
 1877              	 .thumb
 1878 00e6 FB60     	 str r3,[r7,#12]
 1879              	.L121:
 1880              	.LBE158:
 1881              	.LBE157:
 1882              	 .loc 1 1779 0 discriminator 1
 1883 00e8 FEE7     	 b .L121
 1884              	.L120:
1780:../Dave/Generated/FREERTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1885              	 .loc 1 1780 0
 1886 00ea 124B     	 ldr r3,.L124+24
 1887 00ec 4FF08052 	 mov r2,#268435456
 1888 00f0 1A60     	 str r2,[r3]
 1889              	
 1890 00f2 BFF34F8F 	 dsb
 1891              	
 1892              	
 1893 00f6 BFF36F8F 	 isb
 1894              	
 1895              	 .thumb
 1896 00fa 0BE0     	 b .L108
 1897              	.L119:
1781:../Dave/Generated/FREERTOS/tasks.c ****             }
1782:../Dave/Generated/FREERTOS/tasks.c ****             else
1783:../Dave/Generated/FREERTOS/tasks.c ****             {
1784:../Dave/Generated/FREERTOS/tasks.c ****                 /* The scheduler is not running, but the task that was pointed
1785:../Dave/Generated/FREERTOS/tasks.c ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1786:../Dave/Generated/FREERTOS/tasks.c ****                  * must be adjusted to point to a different task. */
1787:../Dave/Generated/FREERTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
 1898              	 .loc 1 1787 0
 1899 00fc 0A4B     	 ldr r3,.L124+12
 1900 00fe 1A68     	 ldr r2,[r3]
 1901 0100 0D4B     	 ldr r3,.L124+28
 1902 0102 1B68     	 ldr r3,[r3]
 1903 0104 9A42     	 cmp r2,r3
 1904 0106 03D1     	 bne .L123
1788:../Dave/Generated/FREERTOS/tasks.c ****                 {
1789:../Dave/Generated/FREERTOS/tasks.c ****                     /* No other tasks are ready, so set pxCurrentTCB back to
1790:../Dave/Generated/FREERTOS/tasks.c ****                      * NULL so when the next task is created pxCurrentTCB will
1791:../Dave/Generated/FREERTOS/tasks.c ****                      * be set to point to it no matter what its relative priority
1792:../Dave/Generated/FREERTOS/tasks.c ****                      * is. */
1793:../Dave/Generated/FREERTOS/tasks.c ****                     pxCurrentTCB = NULL;
 1905              	 .loc 1 1793 0
 1906 0108 044B     	 ldr r3,.L124
 1907 010a 0022     	 movs r2,#0
 1908 010c 1A60     	 str r2,[r3]
 1909 010e 01E0     	 b .L108
 1910              	.L123:
1794:../Dave/Generated/FREERTOS/tasks.c ****                 }
1795:../Dave/Generated/FREERTOS/tasks.c ****                 else
1796:../Dave/Generated/FREERTOS/tasks.c ****                 {
1797:../Dave/Generated/FREERTOS/tasks.c ****                     vTaskSwitchContext();
 1911              	 .loc 1 1797 0
 1912 0110 FFF7FEFF 	 bl vTaskSwitchContext
 1913              	.L108:
1798:../Dave/Generated/FREERTOS/tasks.c ****                 }
1799:../Dave/Generated/FREERTOS/tasks.c ****             }
1800:../Dave/Generated/FREERTOS/tasks.c ****         }
1801:../Dave/Generated/FREERTOS/tasks.c ****         else
1802:../Dave/Generated/FREERTOS/tasks.c ****         {
1803:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1804:../Dave/Generated/FREERTOS/tasks.c ****         }
1805:../Dave/Generated/FREERTOS/tasks.c ****     }
 1914              	 .loc 1 1805 0
 1915 0114 1837     	 adds r7,r7,#24
 1916              	.LCFI53:
 1917              	 .cfi_def_cfa_offset 8
 1918 0116 BD46     	 mov sp,r7
 1919              	.LCFI54:
 1920              	 .cfi_def_cfa_register 13
 1921              	 
 1922 0118 80BD     	 pop {r7,pc}
 1923              	.L125:
 1924 011a 00BF     	 .align 2
 1925              	.L124:
 1926 011c 00000000 	 .word pxCurrentTCB
 1927 0120 00000000 	 .word pxReadyTasksLists
 1928 0124 00000000 	 .word uxTopReadyPriority
 1929 0128 00000000 	 .word xSuspendedTaskList
 1930 012c 00000000 	 .word xSchedulerRunning
 1931 0130 00000000 	 .word uxSchedulerSuspended
 1932 0134 04ED00E0 	 .word -536810236
 1933 0138 00000000 	 .word uxCurrentNumberOfTasks
 1934              	 .cfi_endproc
 1935              	.LFE148:
 1937              	 .section .text.prvTaskIsTaskSuspended,"ax",%progbits
 1938              	 .align 2
 1939              	 .thumb
 1940              	 .thumb_func
 1942              	prvTaskIsTaskSuspended:
 1943              	.LFB149:
1806:../Dave/Generated/FREERTOS/tasks.c **** 
1807:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1808:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1809:../Dave/Generated/FREERTOS/tasks.c **** 
1810:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1811:../Dave/Generated/FREERTOS/tasks.c **** 
1812:../Dave/Generated/FREERTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1813:../Dave/Generated/FREERTOS/tasks.c ****     {
 1944              	 .loc 1 1813 0
 1945              	 .cfi_startproc
 1946              	 
 1947              	 
 1948              	 
 1949 0000 80B4     	 push {r7}
 1950              	.LCFI55:
 1951              	 .cfi_def_cfa_offset 4
 1952              	 .cfi_offset 7,-4
 1953 0002 87B0     	 sub sp,sp,#28
 1954              	.LCFI56:
 1955              	 .cfi_def_cfa_offset 32
 1956 0004 00AF     	 add r7,sp,#0
 1957              	.LCFI57:
 1958              	 .cfi_def_cfa_register 7
 1959 0006 7860     	 str r0,[r7,#4]
1814:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 1960              	 .loc 1 1814 0
 1961 0008 0023     	 movs r3,#0
 1962 000a 7B61     	 str r3,[r7,#20]
1815:../Dave/Generated/FREERTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 1963              	 .loc 1 1815 0
 1964 000c 7B68     	 ldr r3,[r7,#4]
 1965 000e 3B61     	 str r3,[r7,#16]
1816:../Dave/Generated/FREERTOS/tasks.c **** 
1817:../Dave/Generated/FREERTOS/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
1818:../Dave/Generated/FREERTOS/tasks.c ****          * section. */
1819:../Dave/Generated/FREERTOS/tasks.c **** 
1820:../Dave/Generated/FREERTOS/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
1821:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTask );
 1966              	 .loc 1 1821 0
 1967 0010 7B68     	 ldr r3,[r7,#4]
 1968 0012 002B     	 cmp r3,#0
 1969 0014 09D1     	 bne .L127
 1970              	.LBB159:
 1971              	.LBB160:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 1972              	 .loc 2 197 0 discriminator 1
 1973              	
 1974 0016 4FF0FC03 	 mov r3,#252
 1975 001a 83F31188 	 msr basepri,r3
 1976 001e BFF36F8F 	 isb 
 1977 0022 BFF34F8F 	 dsb 
 1978              	
 1979              	
 1980              	 .thumb
 1981 0026 FB60     	 str r3,[r7,#12]
 1982              	.L128:
 1983              	.LBE160:
 1984              	.LBE159:
 1985              	 .loc 1 1821 0 discriminator 1
 1986 0028 FEE7     	 b .L128
 1987              	.L127:
1822:../Dave/Generated/FREERTOS/tasks.c **** 
1823:../Dave/Generated/FREERTOS/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
1824:../Dave/Generated/FREERTOS/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1988              	 .loc 1 1824 0
 1989 002a 3B69     	 ldr r3,[r7,#16]
 1990 002c 5B69     	 ldr r3,[r3,#20]
 1991 002e 0A4A     	 ldr r2,.L131
 1992 0030 9342     	 cmp r3,r2
 1993 0032 0AD1     	 bne .L129
1825:../Dave/Generated/FREERTOS/tasks.c ****         {
1826:../Dave/Generated/FREERTOS/tasks.c ****             /* Has the task already been resumed from within an ISR? */
1827:../Dave/Generated/FREERTOS/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
 1994              	 .loc 1 1827 0
 1995 0034 3B69     	 ldr r3,[r7,#16]
 1996 0036 9B6A     	 ldr r3,[r3,#40]
 1997 0038 084A     	 ldr r2,.L131+4
 1998 003a 9342     	 cmp r3,r2
 1999 003c 05D0     	 beq .L129
1828:../Dave/Generated/FREERTOS/tasks.c ****             {
1829:../Dave/Generated/FREERTOS/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
1830:../Dave/Generated/FREERTOS/tasks.c ****                  * state, or because is is blocked with no timeout? */
1831:../Dave/Generated/FREERTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
 2000              	 .loc 1 1831 0
 2001 003e 3B69     	 ldr r3,[r7,#16]
 2002 0040 9B6A     	 ldr r3,[r3,#40]
 2003 0042 002B     	 cmp r3,#0
 2004 0044 01D1     	 bne .L129
1832:../Dave/Generated/FREERTOS/tasks.c ****                 {
1833:../Dave/Generated/FREERTOS/tasks.c ****                     xReturn = pdTRUE;
 2005              	 .loc 1 1833 0
 2006 0046 0123     	 movs r3,#1
 2007 0048 7B61     	 str r3,[r7,#20]
 2008              	.L129:
1834:../Dave/Generated/FREERTOS/tasks.c ****                 }
1835:../Dave/Generated/FREERTOS/tasks.c ****                 else
1836:../Dave/Generated/FREERTOS/tasks.c ****                 {
1837:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1838:../Dave/Generated/FREERTOS/tasks.c ****                 }
1839:../Dave/Generated/FREERTOS/tasks.c ****             }
1840:../Dave/Generated/FREERTOS/tasks.c ****             else
1841:../Dave/Generated/FREERTOS/tasks.c ****             {
1842:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1843:../Dave/Generated/FREERTOS/tasks.c ****             }
1844:../Dave/Generated/FREERTOS/tasks.c ****         }
1845:../Dave/Generated/FREERTOS/tasks.c ****         else
1846:../Dave/Generated/FREERTOS/tasks.c ****         {
1847:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1848:../Dave/Generated/FREERTOS/tasks.c ****         }
1849:../Dave/Generated/FREERTOS/tasks.c **** 
1850:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 2009              	 .loc 1 1850 0
 2010 004a 7B69     	 ldr r3,[r7,#20]
1851:../Dave/Generated/FREERTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 2011              	 .loc 1 1851 0
 2012 004c 1846     	 mov r0,r3
 2013 004e 1C37     	 adds r7,r7,#28
 2014              	.LCFI58:
 2015              	 .cfi_def_cfa_offset 4
 2016 0050 BD46     	 mov sp,r7
 2017              	.LCFI59:
 2018              	 .cfi_def_cfa_register 13
 2019              	 
 2020 0052 5DF8047B 	 ldr r7,[sp],#4
 2021              	.LCFI60:
 2022              	 .cfi_restore 7
 2023              	 .cfi_def_cfa_offset 0
 2024 0056 7047     	 bx lr
 2025              	.L132:
 2026              	 .align 2
 2027              	.L131:
 2028 0058 00000000 	 .word xSuspendedTaskList
 2029 005c 00000000 	 .word xPendingReadyList
 2030              	 .cfi_endproc
 2031              	.LFE149:
 2033              	 .section .text.vTaskResume,"ax",%progbits
 2034              	 .align 2
 2035              	 .global vTaskResume
 2036              	 .thumb
 2037              	 .thumb_func
 2039              	vTaskResume:
 2040              	.LFB150:
1852:../Dave/Generated/FREERTOS/tasks.c **** 
1853:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1854:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1855:../Dave/Generated/FREERTOS/tasks.c **** 
1856:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1857:../Dave/Generated/FREERTOS/tasks.c **** 
1858:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
1859:../Dave/Generated/FREERTOS/tasks.c ****     {
 2041              	 .loc 1 1859 0
 2042              	 .cfi_startproc
 2043              	 
 2044              	 
 2045 0000 80B5     	 push {r7,lr}
 2046              	.LCFI61:
 2047              	 .cfi_def_cfa_offset 8
 2048              	 .cfi_offset 7,-8
 2049              	 .cfi_offset 14,-4
 2050 0002 84B0     	 sub sp,sp,#16
 2051              	.LCFI62:
 2052              	 .cfi_def_cfa_offset 24
 2053 0004 00AF     	 add r7,sp,#0
 2054              	.LCFI63:
 2055              	 .cfi_def_cfa_register 7
 2056 0006 7860     	 str r0,[r7,#4]
1860:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2057              	 .loc 1 1860 0
 2058 0008 7B68     	 ldr r3,[r7,#4]
 2059 000a FB60     	 str r3,[r7,#12]
1861:../Dave/Generated/FREERTOS/tasks.c **** 
1862:../Dave/Generated/FREERTOS/tasks.c ****         /* It does not make sense to resume the calling task. */
1863:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTaskToResume );
 2060              	 .loc 1 1863 0
 2061 000c 7B68     	 ldr r3,[r7,#4]
 2062 000e 002B     	 cmp r3,#0
 2063 0010 09D1     	 bne .L134
 2064              	.LBB161:
 2065              	.LBB162:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2066              	 .loc 2 197 0 discriminator 1
 2067              	
 2068 0012 4FF0FC03 	 mov r3,#252
 2069 0016 83F31188 	 msr basepri,r3
 2070 001a BFF36F8F 	 isb 
 2071 001e BFF34F8F 	 dsb 
 2072              	
 2073              	
 2074              	 .thumb
 2075 0022 BB60     	 str r3,[r7,#8]
 2076              	.L135:
 2077              	.LBE162:
 2078              	.LBE161:
 2079              	 .loc 1 1863 0 discriminator 1
 2080 0024 FEE7     	 b .L135
 2081              	.L134:
1864:../Dave/Generated/FREERTOS/tasks.c **** 
1865:../Dave/Generated/FREERTOS/tasks.c ****         /* The parameter cannot be NULL as it is impossible to resume the
1866:../Dave/Generated/FREERTOS/tasks.c ****          * currently executing task. */
1867:../Dave/Generated/FREERTOS/tasks.c ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 2082              	 .loc 1 1867 0
 2083 0026 214B     	 ldr r3,.L138
 2084 0028 1B68     	 ldr r3,[r3]
 2085 002a FA68     	 ldr r2,[r7,#12]
 2086 002c 9A42     	 cmp r2,r3
 2087 002e 39D0     	 beq .L133
 2088              	 .loc 1 1867 0 is_stmt 0 discriminator 1
 2089 0030 FB68     	 ldr r3,[r7,#12]
 2090 0032 002B     	 cmp r3,#0
 2091 0034 36D0     	 beq .L133
1868:../Dave/Generated/FREERTOS/tasks.c ****         {
1869:../Dave/Generated/FREERTOS/tasks.c ****             taskENTER_CRITICAL();
 2092              	 .loc 1 1869 0 is_stmt 1
 2093 0036 FFF7FEFF 	 bl vPortEnterCritical
1870:../Dave/Generated/FREERTOS/tasks.c ****             {
1871:../Dave/Generated/FREERTOS/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2094              	 .loc 1 1871 0
 2095 003a F868     	 ldr r0,[r7,#12]
 2096 003c FFF7FEFF 	 bl prvTaskIsTaskSuspended
 2097 0040 0346     	 mov r3,r0
 2098 0042 002B     	 cmp r3,#0
 2099 0044 2CD0     	 beq .L137
1872:../Dave/Generated/FREERTOS/tasks.c ****                 {
1873:../Dave/Generated/FREERTOS/tasks.c ****                     traceTASK_RESUME( pxTCB );
1874:../Dave/Generated/FREERTOS/tasks.c **** 
1875:../Dave/Generated/FREERTOS/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
1876:../Dave/Generated/FREERTOS/tasks.c ****                      * suspended because this is inside a critical section. */
1877:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2100              	 .loc 1 1877 0
 2101 0046 FB68     	 ldr r3,[r7,#12]
 2102 0048 0433     	 adds r3,r3,#4
 2103 004a 1846     	 mov r0,r3
 2104 004c FFF7FEFF 	 bl uxListRemove
1878:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2105              	 .loc 1 1878 0
 2106 0050 FB68     	 ldr r3,[r7,#12]
 2107 0052 DB6A     	 ldr r3,[r3,#44]
 2108 0054 1A46     	 mov r2,r3
 2109 0056 0123     	 movs r3,#1
 2110 0058 03FA02F2 	 lsl r2,r3,r2
 2111 005c 144B     	 ldr r3,.L138+4
 2112 005e 1B68     	 ldr r3,[r3]
 2113 0060 1343     	 orrs r3,r3,r2
 2114 0062 134A     	 ldr r2,.L138+4
 2115 0064 1360     	 str r3,[r2]
 2116 0066 FB68     	 ldr r3,[r7,#12]
 2117 0068 DA6A     	 ldr r2,[r3,#44]
 2118 006a 1346     	 mov r3,r2
 2119 006c 9B00     	 lsls r3,r3,#2
 2120 006e 1344     	 add r3,r3,r2
 2121 0070 9B00     	 lsls r3,r3,#2
 2122 0072 104A     	 ldr r2,.L138+8
 2123 0074 1A44     	 add r2,r2,r3
 2124 0076 FB68     	 ldr r3,[r7,#12]
 2125 0078 0433     	 adds r3,r3,#4
 2126 007a 1046     	 mov r0,r2
 2127 007c 1946     	 mov r1,r3
 2128 007e FFF7FEFF 	 bl vListInsertEnd
1879:../Dave/Generated/FREERTOS/tasks.c **** 
1880:../Dave/Generated/FREERTOS/tasks.c ****                     /* A higher priority task may have just been resumed. */
1881:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2129              	 .loc 1 1881 0
 2130 0082 FB68     	 ldr r3,[r7,#12]
 2131 0084 DA6A     	 ldr r2,[r3,#44]
 2132 0086 094B     	 ldr r3,.L138
 2133 0088 1B68     	 ldr r3,[r3]
 2134 008a DB6A     	 ldr r3,[r3,#44]
 2135 008c 9A42     	 cmp r2,r3
 2136 008e 07D3     	 bcc .L137
1882:../Dave/Generated/FREERTOS/tasks.c ****                     {
1883:../Dave/Generated/FREERTOS/tasks.c ****                         /* This yield may not cause the task just resumed to run,
1884:../Dave/Generated/FREERTOS/tasks.c ****                          * but will leave the lists in the correct state for the
1885:../Dave/Generated/FREERTOS/tasks.c ****                          * next yield. */
1886:../Dave/Generated/FREERTOS/tasks.c ****                         taskYIELD_IF_USING_PREEMPTION();
 2137              	 .loc 1 1886 0
 2138 0090 094B     	 ldr r3,.L138+12
 2139 0092 4FF08052 	 mov r2,#268435456
 2140 0096 1A60     	 str r2,[r3]
 2141              	
 2142 0098 BFF34F8F 	 dsb
 2143              	
 2144              	
 2145 009c BFF36F8F 	 isb
 2146              	
 2147              	 .thumb
 2148              	.L137:
1887:../Dave/Generated/FREERTOS/tasks.c ****                     }
1888:../Dave/Generated/FREERTOS/tasks.c ****                     else
1889:../Dave/Generated/FREERTOS/tasks.c ****                     {
1890:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1891:../Dave/Generated/FREERTOS/tasks.c ****                     }
1892:../Dave/Generated/FREERTOS/tasks.c ****                 }
1893:../Dave/Generated/FREERTOS/tasks.c ****                 else
1894:../Dave/Generated/FREERTOS/tasks.c ****                 {
1895:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1896:../Dave/Generated/FREERTOS/tasks.c ****                 }
1897:../Dave/Generated/FREERTOS/tasks.c ****             }
1898:../Dave/Generated/FREERTOS/tasks.c ****             taskEXIT_CRITICAL();
 2149              	 .loc 1 1898 0
 2150 00a0 FFF7FEFF 	 bl vPortExitCritical
 2151              	.L133:
1899:../Dave/Generated/FREERTOS/tasks.c ****         }
1900:../Dave/Generated/FREERTOS/tasks.c ****         else
1901:../Dave/Generated/FREERTOS/tasks.c ****         {
1902:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1903:../Dave/Generated/FREERTOS/tasks.c ****         }
1904:../Dave/Generated/FREERTOS/tasks.c ****     }
 2152              	 .loc 1 1904 0
 2153 00a4 1037     	 adds r7,r7,#16
 2154              	.LCFI64:
 2155              	 .cfi_def_cfa_offset 8
 2156 00a6 BD46     	 mov sp,r7
 2157              	.LCFI65:
 2158              	 .cfi_def_cfa_register 13
 2159              	 
 2160 00a8 80BD     	 pop {r7,pc}
 2161              	.L139:
 2162 00aa 00BF     	 .align 2
 2163              	.L138:
 2164 00ac 00000000 	 .word pxCurrentTCB
 2165 00b0 00000000 	 .word uxTopReadyPriority
 2166 00b4 00000000 	 .word pxReadyTasksLists
 2167 00b8 04ED00E0 	 .word -536810236
 2168              	 .cfi_endproc
 2169              	.LFE150:
 2171              	 .section .text.xTaskResumeFromISR,"ax",%progbits
 2172              	 .align 2
 2173              	 .global xTaskResumeFromISR
 2174              	 .thumb
 2175              	 .thumb_func
 2177              	xTaskResumeFromISR:
 2178              	.LFB151:
1905:../Dave/Generated/FREERTOS/tasks.c **** 
1906:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1907:../Dave/Generated/FREERTOS/tasks.c **** 
1908:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1909:../Dave/Generated/FREERTOS/tasks.c **** 
1910:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1911:../Dave/Generated/FREERTOS/tasks.c **** 
1912:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1913:../Dave/Generated/FREERTOS/tasks.c ****     {
 2179              	 .loc 1 1913 0
 2180              	 .cfi_startproc
 2181              	 
 2182              	 
 2183 0000 80B5     	 push {r7,lr}
 2184              	.LCFI66:
 2185              	 .cfi_def_cfa_offset 8
 2186              	 .cfi_offset 7,-8
 2187              	 .cfi_offset 14,-4
 2188 0002 8AB0     	 sub sp,sp,#40
 2189              	.LCFI67:
 2190              	 .cfi_def_cfa_offset 48
 2191 0004 00AF     	 add r7,sp,#0
 2192              	.LCFI68:
 2193              	 .cfi_def_cfa_register 7
 2194 0006 7860     	 str r0,[r7,#4]
1914:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 2195              	 .loc 1 1914 0
 2196 0008 0023     	 movs r3,#0
 2197 000a 7B62     	 str r3,[r7,#36]
1915:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2198              	 .loc 1 1915 0
 2199 000c 7B68     	 ldr r3,[r7,#4]
 2200 000e 3B62     	 str r3,[r7,#32]
1916:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
1917:../Dave/Generated/FREERTOS/tasks.c **** 
1918:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTaskToResume );
 2201              	 .loc 1 1918 0
 2202 0010 7B68     	 ldr r3,[r7,#4]
 2203 0012 002B     	 cmp r3,#0
 2204 0014 09D1     	 bne .L141
 2205              	.LBB163:
 2206              	.LBB164:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2207              	 .loc 2 197 0 discriminator 1
 2208              	
 2209 0016 4FF0FC03 	 mov r3,#252
 2210 001a 83F31188 	 msr basepri,r3
 2211 001e BFF36F8F 	 isb 
 2212 0022 BFF34F8F 	 dsb 
 2213              	
 2214              	
 2215              	 .thumb
 2216 0026 BB61     	 str r3,[r7,#24]
 2217              	.L142:
 2218              	.LBE164:
 2219              	.LBE163:
 2220              	 .loc 1 1918 0 discriminator 1
 2221 0028 FEE7     	 b .L142
 2222              	.L141:
1919:../Dave/Generated/FREERTOS/tasks.c **** 
1920:../Dave/Generated/FREERTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1921:../Dave/Generated/FREERTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1922:../Dave/Generated/FREERTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1923:../Dave/Generated/FREERTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1924:../Dave/Generated/FREERTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1925:../Dave/Generated/FREERTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1926:../Dave/Generated/FREERTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1927:../Dave/Generated/FREERTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1928:../Dave/Generated/FREERTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1929:../Dave/Generated/FREERTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1930:../Dave/Generated/FREERTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1931:../Dave/Generated/FREERTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1932:../Dave/Generated/FREERTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1933:../Dave/Generated/FREERTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1934:../Dave/Generated/FREERTOS/tasks.c ****          * provided on the following link:
1935:../Dave/Generated/FREERTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1936:../Dave/Generated/FREERTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2223              	 .loc 1 1936 0
 2224 002a FFF7FEFF 	 bl vPortValidateInterruptPriority
 2225              	.LBB165:
 2226              	.LBB166:
 213:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2227              	 .loc 2 213 0
 2228              	
 2229 002e EFF31182 	 mrs r2,basepri
 2230 0032 4FF0FC03 	 mov r3,#252
 2231 0036 83F31188 	 msr basepri,r3
 2232 003a BFF36F8F 	 isb 
 2233 003e BFF34F8F 	 dsb 
 2234              	
 2235              	
 2236              	 .thumb
 2237 0042 7A61     	 str r2,[r7,#20]
 2238 0044 3B61     	 str r3,[r7,#16]
 225:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 2239              	 .loc 2 225 0
 2240 0046 7B69     	 ldr r3,[r7,#20]
 2241              	.LBE166:
 2242              	.LBE165:
1937:../Dave/Generated/FREERTOS/tasks.c **** 
1938:../Dave/Generated/FREERTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2243              	 .loc 1 1938 0
 2244 0048 FB61     	 str r3,[r7,#28]
1939:../Dave/Generated/FREERTOS/tasks.c ****         {
1940:../Dave/Generated/FREERTOS/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2245              	 .loc 1 1940 0
 2246 004a 386A     	 ldr r0,[r7,#32]
 2247 004c FFF7FEFF 	 bl prvTaskIsTaskSuspended
 2248 0050 0346     	 mov r3,r0
 2249 0052 002B     	 cmp r3,#0
 2250 0054 34D0     	 beq .L144
1941:../Dave/Generated/FREERTOS/tasks.c ****             {
1942:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
1943:../Dave/Generated/FREERTOS/tasks.c **** 
1944:../Dave/Generated/FREERTOS/tasks.c ****                 /* Check the ready lists can be accessed. */
1945:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2251              	 .loc 1 1945 0
 2252 0056 1F4B     	 ldr r3,.L149
 2253 0058 1B68     	 ldr r3,[r3]
 2254 005a 002B     	 cmp r3,#0
 2255 005c 2AD1     	 bne .L145
1946:../Dave/Generated/FREERTOS/tasks.c ****                 {
1947:../Dave/Generated/FREERTOS/tasks.c ****                     /* Ready lists can be accessed so move the task from the
1948:../Dave/Generated/FREERTOS/tasks.c ****                      * suspended list to the ready list directly. */
1949:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2256              	 .loc 1 1949 0
 2257 005e 3B6A     	 ldr r3,[r7,#32]
 2258 0060 DA6A     	 ldr r2,[r3,#44]
 2259 0062 1D4B     	 ldr r3,.L149+4
 2260 0064 1B68     	 ldr r3,[r3]
 2261 0066 DB6A     	 ldr r3,[r3,#44]
 2262 0068 9A42     	 cmp r2,r3
 2263 006a 04D3     	 bcc .L146
1950:../Dave/Generated/FREERTOS/tasks.c ****                     {
1951:../Dave/Generated/FREERTOS/tasks.c ****                         xYieldRequired = pdTRUE;
 2264              	 .loc 1 1951 0
 2265 006c 0123     	 movs r3,#1
 2266 006e 7B62     	 str r3,[r7,#36]
1952:../Dave/Generated/FREERTOS/tasks.c **** 
1953:../Dave/Generated/FREERTOS/tasks.c ****                         /* Mark that a yield is pending in case the user is not
1954:../Dave/Generated/FREERTOS/tasks.c ****                          * using the return value to initiate a context switch
1955:../Dave/Generated/FREERTOS/tasks.c ****                          * from the ISR using portYIELD_FROM_ISR. */
1956:../Dave/Generated/FREERTOS/tasks.c ****                         xYieldPending = pdTRUE;
 2267              	 .loc 1 1956 0
 2268 0070 1A4B     	 ldr r3,.L149+8
 2269 0072 0122     	 movs r2,#1
 2270 0074 1A60     	 str r2,[r3]
 2271              	.L146:
1957:../Dave/Generated/FREERTOS/tasks.c ****                     }
1958:../Dave/Generated/FREERTOS/tasks.c ****                     else
1959:../Dave/Generated/FREERTOS/tasks.c ****                     {
1960:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1961:../Dave/Generated/FREERTOS/tasks.c ****                     }
1962:../Dave/Generated/FREERTOS/tasks.c **** 
1963:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2272              	 .loc 1 1963 0
 2273 0076 3B6A     	 ldr r3,[r7,#32]
 2274 0078 0433     	 adds r3,r3,#4
 2275 007a 1846     	 mov r0,r3
 2276 007c FFF7FEFF 	 bl uxListRemove
1964:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2277              	 .loc 1 1964 0
 2278 0080 3B6A     	 ldr r3,[r7,#32]
 2279 0082 DB6A     	 ldr r3,[r3,#44]
 2280 0084 1A46     	 mov r2,r3
 2281 0086 0123     	 movs r3,#1
 2282 0088 03FA02F2 	 lsl r2,r3,r2
 2283 008c 144B     	 ldr r3,.L149+12
 2284 008e 1B68     	 ldr r3,[r3]
 2285 0090 1343     	 orrs r3,r3,r2
 2286 0092 134A     	 ldr r2,.L149+12
 2287 0094 1360     	 str r3,[r2]
 2288 0096 3B6A     	 ldr r3,[r7,#32]
 2289 0098 DA6A     	 ldr r2,[r3,#44]
 2290 009a 1346     	 mov r3,r2
 2291 009c 9B00     	 lsls r3,r3,#2
 2292 009e 1344     	 add r3,r3,r2
 2293 00a0 9B00     	 lsls r3,r3,#2
 2294 00a2 104A     	 ldr r2,.L149+16
 2295 00a4 1A44     	 add r2,r2,r3
 2296 00a6 3B6A     	 ldr r3,[r7,#32]
 2297 00a8 0433     	 adds r3,r3,#4
 2298 00aa 1046     	 mov r0,r2
 2299 00ac 1946     	 mov r1,r3
 2300 00ae FFF7FEFF 	 bl vListInsertEnd
 2301 00b2 05E0     	 b .L144
 2302              	.L145:
1965:../Dave/Generated/FREERTOS/tasks.c ****                 }
1966:../Dave/Generated/FREERTOS/tasks.c ****                 else
1967:../Dave/Generated/FREERTOS/tasks.c ****                 {
1968:../Dave/Generated/FREERTOS/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
1969:../Dave/Generated/FREERTOS/tasks.c ****                      * is held in the pending ready list until the scheduler is
1970:../Dave/Generated/FREERTOS/tasks.c ****                      * unsuspended. */
1971:../Dave/Generated/FREERTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2303              	 .loc 1 1971 0
 2304 00b4 3B6A     	 ldr r3,[r7,#32]
 2305 00b6 1833     	 adds r3,r3,#24
 2306 00b8 0B48     	 ldr r0,.L149+20
 2307 00ba 1946     	 mov r1,r3
 2308 00bc FFF7FEFF 	 bl vListInsertEnd
 2309              	.L144:
 2310 00c0 FB69     	 ldr r3,[r7,#28]
 2311 00c2 FB60     	 str r3,[r7,#12]
 2312              	.LBB167:
 2313              	.LBB168:
 2314              	 .loc 2 231 0
 2315 00c4 FB68     	 ldr r3,[r7,#12]
 2316              	
 2317 00c6 83F31188 	 msr basepri,r3
 2318              	
 2319              	 .thumb
 2320              	.LBE168:
 2321              	.LBE167:
1972:../Dave/Generated/FREERTOS/tasks.c ****                 }
1973:../Dave/Generated/FREERTOS/tasks.c ****             }
1974:../Dave/Generated/FREERTOS/tasks.c ****             else
1975:../Dave/Generated/FREERTOS/tasks.c ****             {
1976:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1977:../Dave/Generated/FREERTOS/tasks.c ****             }
1978:../Dave/Generated/FREERTOS/tasks.c ****         }
1979:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1980:../Dave/Generated/FREERTOS/tasks.c **** 
1981:../Dave/Generated/FREERTOS/tasks.c ****         return xYieldRequired;
 2322              	 .loc 1 1981 0
 2323 00ca 7B6A     	 ldr r3,[r7,#36]
1982:../Dave/Generated/FREERTOS/tasks.c ****     }
 2324              	 .loc 1 1982 0
 2325 00cc 1846     	 mov r0,r3
 2326 00ce 2837     	 adds r7,r7,#40
 2327              	.LCFI69:
 2328              	 .cfi_def_cfa_offset 8
 2329 00d0 BD46     	 mov sp,r7
 2330              	.LCFI70:
 2331              	 .cfi_def_cfa_register 13
 2332              	 
 2333 00d2 80BD     	 pop {r7,pc}
 2334              	.L150:
 2335              	 .align 2
 2336              	.L149:
 2337 00d4 00000000 	 .word uxSchedulerSuspended
 2338 00d8 00000000 	 .word pxCurrentTCB
 2339 00dc 00000000 	 .word xYieldPending
 2340 00e0 00000000 	 .word uxTopReadyPriority
 2341 00e4 00000000 	 .word pxReadyTasksLists
 2342 00e8 00000000 	 .word xPendingReadyList
 2343              	 .cfi_endproc
 2344              	.LFE151:
 2346              	 .section .rodata
 2347              	 .align 2
 2348              	.LC0:
 2349 0000 49444C45 	 .ascii "IDLE\000"
 2349      00
 2350              	 .section .text.vTaskStartScheduler,"ax",%progbits
 2351              	 .align 2
 2352              	 .global vTaskStartScheduler
 2353              	 .thumb
 2354              	 .thumb_func
 2356              	vTaskStartScheduler:
 2357              	.LFB152:
1983:../Dave/Generated/FREERTOS/tasks.c **** 
1984:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1985:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1986:../Dave/Generated/FREERTOS/tasks.c **** 
1987:../Dave/Generated/FREERTOS/tasks.c **** void vTaskStartScheduler( void )
1988:../Dave/Generated/FREERTOS/tasks.c **** {
 2358              	 .loc 1 1988 0
 2359              	 .cfi_startproc
 2360              	 
 2361              	 
 2362 0000 80B5     	 push {r7,lr}
 2363              	.LCFI71:
 2364              	 .cfi_def_cfa_offset 8
 2365              	 .cfi_offset 7,-8
 2366              	 .cfi_offset 14,-4
 2367 0002 86B0     	 sub sp,sp,#24
 2368              	.LCFI72:
 2369              	 .cfi_def_cfa_offset 32
 2370 0004 02AF     	 add r7,sp,#8
 2371              	.LCFI73:
 2372              	 .cfi_def_cfa 7,24
1989:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xReturn;
1990:../Dave/Generated/FREERTOS/tasks.c **** 
1991:../Dave/Generated/FREERTOS/tasks.c ****     /* Add the idle task at the lowest priority. */
1992:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
1993:../Dave/Generated/FREERTOS/tasks.c ****         {
1994:../Dave/Generated/FREERTOS/tasks.c ****             StaticTask_t * pxIdleTaskTCBBuffer = NULL;
1995:../Dave/Generated/FREERTOS/tasks.c ****             StackType_t * pxIdleTaskStackBuffer = NULL;
1996:../Dave/Generated/FREERTOS/tasks.c ****             uint32_t ulIdleTaskStackSize;
1997:../Dave/Generated/FREERTOS/tasks.c **** 
1998:../Dave/Generated/FREERTOS/tasks.c ****             /* The Idle task is created using user provided RAM - obtain the
1999:../Dave/Generated/FREERTOS/tasks.c ****              * address of the RAM then create the idle task. */
2000:../Dave/Generated/FREERTOS/tasks.c ****             vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTas
2001:../Dave/Generated/FREERTOS/tasks.c ****             xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
2002:../Dave/Generated/FREERTOS/tasks.c ****                                                  configIDLE_TASK_NAME,
2003:../Dave/Generated/FREERTOS/tasks.c ****                                                  ulIdleTaskStackSize,
2004:../Dave/Generated/FREERTOS/tasks.c ****                                                  ( void * ) NULL,       /*lint !e961.  The cast is 
2005:../Dave/Generated/FREERTOS/tasks.c ****                                                  portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIO
2006:../Dave/Generated/FREERTOS/tasks.c ****                                                  pxIdleTaskStackBuffer,
2007:../Dave/Generated/FREERTOS/tasks.c ****                                                  pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exceptio
2008:../Dave/Generated/FREERTOS/tasks.c **** 
2009:../Dave/Generated/FREERTOS/tasks.c ****             if( xIdleTaskHandle != NULL )
2010:../Dave/Generated/FREERTOS/tasks.c ****             {
2011:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdPASS;
2012:../Dave/Generated/FREERTOS/tasks.c ****             }
2013:../Dave/Generated/FREERTOS/tasks.c ****             else
2014:../Dave/Generated/FREERTOS/tasks.c ****             {
2015:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdFAIL;
2016:../Dave/Generated/FREERTOS/tasks.c ****             }
2017:../Dave/Generated/FREERTOS/tasks.c ****         }
2018:../Dave/Generated/FREERTOS/tasks.c ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
2019:../Dave/Generated/FREERTOS/tasks.c ****         {
2020:../Dave/Generated/FREERTOS/tasks.c ****             /* The Idle task is being created using dynamically allocated RAM. */
2021:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = xTaskCreate( prvIdleTask,
 2373              	 .loc 1 2021 0
 2374 0006 0023     	 movs r3,#0
 2375 0008 0093     	 str r3,[sp]
 2376 000a 1D4B     	 ldr r3,.L156
 2377 000c 0193     	 str r3,[sp,#4]
 2378 000e 1D48     	 ldr r0,.L156+4
 2379 0010 1D49     	 ldr r1,.L156+8
 2380 0012 8222     	 movs r2,#130
 2381 0014 0023     	 movs r3,#0
 2382 0016 FFF7FEFF 	 bl xTaskCreate
 2383 001a F860     	 str r0,[r7,#12]
2022:../Dave/Generated/FREERTOS/tasks.c ****                                    configIDLE_TASK_NAME,
2023:../Dave/Generated/FREERTOS/tasks.c ****                                    configMINIMAL_STACK_SIZE,
2024:../Dave/Generated/FREERTOS/tasks.c ****                                    ( void * ) NULL,
2025:../Dave/Generated/FREERTOS/tasks.c ****                                    portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVIL
2026:../Dave/Generated/FREERTOS/tasks.c ****                                    &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as i
2027:../Dave/Generated/FREERTOS/tasks.c ****         }
2028:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
2029:../Dave/Generated/FREERTOS/tasks.c **** 
2030:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_TIMERS == 1 )
2031:../Dave/Generated/FREERTOS/tasks.c ****         {
2032:../Dave/Generated/FREERTOS/tasks.c ****             if( xReturn == pdPASS )
 2384              	 .loc 1 2032 0
 2385 001c FB68     	 ldr r3,[r7,#12]
 2386 001e 012B     	 cmp r3,#1
 2387 0020 02D1     	 bne .L152
2033:../Dave/Generated/FREERTOS/tasks.c ****             {
2034:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = xTimerCreateTimerTask();
 2388              	 .loc 1 2034 0
 2389 0022 FFF7FEFF 	 bl xTimerCreateTimerTask
 2390 0026 F860     	 str r0,[r7,#12]
 2391              	.L152:
2035:../Dave/Generated/FREERTOS/tasks.c ****             }
2036:../Dave/Generated/FREERTOS/tasks.c ****             else
2037:../Dave/Generated/FREERTOS/tasks.c ****             {
2038:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2039:../Dave/Generated/FREERTOS/tasks.c ****             }
2040:../Dave/Generated/FREERTOS/tasks.c ****         }
2041:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* configUSE_TIMERS */
2042:../Dave/Generated/FREERTOS/tasks.c **** 
2043:../Dave/Generated/FREERTOS/tasks.c ****     if( xReturn == pdPASS )
 2392              	 .loc 1 2043 0
 2393 0028 FB68     	 ldr r3,[r7,#12]
 2394 002a 012B     	 cmp r3,#1
 2395 002c 15D1     	 bne .L153
 2396              	.LBB169:
 2397              	.LBB170:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2398              	 .loc 2 197 0
 2399              	
 2400 002e 4FF0FC03 	 mov r3,#252
 2401 0032 83F31188 	 msr basepri,r3
 2402 0036 BFF36F8F 	 isb 
 2403 003a BFF34F8F 	 dsb 
 2404              	
 2405              	
 2406              	 .thumb
 2407 003e BB60     	 str r3,[r7,#8]
 2408              	.LBE170:
 2409              	.LBE169:
2044:../Dave/Generated/FREERTOS/tasks.c ****     {
2045:../Dave/Generated/FREERTOS/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
2046:../Dave/Generated/FREERTOS/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2047:../Dave/Generated/FREERTOS/tasks.c ****          * the only macro called by the function. */
2048:../Dave/Generated/FREERTOS/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2049:../Dave/Generated/FREERTOS/tasks.c ****             {
2050:../Dave/Generated/FREERTOS/tasks.c ****                 freertos_tasks_c_additions_init();
2051:../Dave/Generated/FREERTOS/tasks.c ****             }
2052:../Dave/Generated/FREERTOS/tasks.c ****         #endif
2053:../Dave/Generated/FREERTOS/tasks.c **** 
2054:../Dave/Generated/FREERTOS/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
2055:../Dave/Generated/FREERTOS/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
2056:../Dave/Generated/FREERTOS/tasks.c ****          * the created tasks contain a status word with interrupts switched on
2057:../Dave/Generated/FREERTOS/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
2058:../Dave/Generated/FREERTOS/tasks.c ****          * starts to run. */
2059:../Dave/Generated/FREERTOS/tasks.c ****         portDISABLE_INTERRUPTS();
2060:../Dave/Generated/FREERTOS/tasks.c **** 
2061:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
2062:../Dave/Generated/FREERTOS/tasks.c ****             {
2063:../Dave/Generated/FREERTOS/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
2064:../Dave/Generated/FREERTOS/tasks.c ****                  * structure specific to the task that will run first.
2065:../Dave/Generated/FREERTOS/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2066:../Dave/Generated/FREERTOS/tasks.c ****                  * for additional information. */
2067:../Dave/Generated/FREERTOS/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2068:../Dave/Generated/FREERTOS/tasks.c ****             }
2069:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
2070:../Dave/Generated/FREERTOS/tasks.c **** 
2071:../Dave/Generated/FREERTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 2410              	 .loc 1 2071 0
 2411 0040 124B     	 ldr r3,.L156+12
 2412 0042 4FF0FF32 	 mov r2,#-1
 2413 0046 1A60     	 str r2,[r3]
2072:../Dave/Generated/FREERTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
 2414              	 .loc 1 2072 0
 2415 0048 114B     	 ldr r3,.L156+16
 2416 004a 0122     	 movs r2,#1
 2417 004c 1A60     	 str r2,[r3]
2073:../Dave/Generated/FREERTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2418              	 .loc 1 2073 0
 2419 004e 114B     	 ldr r3,.L156+20
 2420 0050 0022     	 movs r2,#0
 2421 0052 1A60     	 str r2,[r3]
2074:../Dave/Generated/FREERTOS/tasks.c **** 
2075:../Dave/Generated/FREERTOS/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2076:../Dave/Generated/FREERTOS/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
2077:../Dave/Generated/FREERTOS/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2078:../Dave/Generated/FREERTOS/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
2079:../Dave/Generated/FREERTOS/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2080:../Dave/Generated/FREERTOS/tasks.c ****          * FreeRTOSConfig.h file. */
2081:../Dave/Generated/FREERTOS/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2082:../Dave/Generated/FREERTOS/tasks.c **** 
2083:../Dave/Generated/FREERTOS/tasks.c ****         traceTASK_SWITCHED_IN();
2084:../Dave/Generated/FREERTOS/tasks.c **** 
2085:../Dave/Generated/FREERTOS/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
2086:../Dave/Generated/FREERTOS/tasks.c ****          * portable interface. */
2087:../Dave/Generated/FREERTOS/tasks.c ****         if( xPortStartScheduler() != pdFALSE )
 2422              	 .loc 1 2087 0
 2423 0054 FFF7FEFF 	 bl xPortStartScheduler
 2424 0058 0DE0     	 b .L154
 2425              	.L153:
2088:../Dave/Generated/FREERTOS/tasks.c ****         {
2089:../Dave/Generated/FREERTOS/tasks.c ****             /* Should not reach here as if the scheduler is running the
2090:../Dave/Generated/FREERTOS/tasks.c ****              * function will not return. */
2091:../Dave/Generated/FREERTOS/tasks.c ****         }
2092:../Dave/Generated/FREERTOS/tasks.c ****         else
2093:../Dave/Generated/FREERTOS/tasks.c ****         {
2094:../Dave/Generated/FREERTOS/tasks.c ****             /* Should only reach here if a task calls xTaskEndScheduler(). */
2095:../Dave/Generated/FREERTOS/tasks.c ****         }
2096:../Dave/Generated/FREERTOS/tasks.c ****     }
2097:../Dave/Generated/FREERTOS/tasks.c ****     else
2098:../Dave/Generated/FREERTOS/tasks.c ****     {
2099:../Dave/Generated/FREERTOS/tasks.c ****         /* This line will only be reached if the kernel could not be started,
2100:../Dave/Generated/FREERTOS/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
2101:../Dave/Generated/FREERTOS/tasks.c ****          * or the timer task. */
2102:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 2426              	 .loc 1 2102 0
 2427 005a FB68     	 ldr r3,[r7,#12]
 2428 005c B3F1FF3F 	 cmp r3,#-1
 2429 0060 09D1     	 bne .L154
 2430              	.LBB171:
 2431              	.LBB172:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2432              	 .loc 2 197 0 discriminator 1
 2433              	
 2434 0062 4FF0FC03 	 mov r3,#252
 2435 0066 83F31188 	 msr basepri,r3
 2436 006a BFF36F8F 	 isb 
 2437 006e BFF34F8F 	 dsb 
 2438              	
 2439              	
 2440              	 .thumb
 2441 0072 7B60     	 str r3,[r7,#4]
 2442              	.L155:
 2443              	.LBE172:
 2444              	.LBE171:
 2445              	 .loc 1 2102 0 discriminator 2
 2446 0074 FEE7     	 b .L155
 2447              	.L154:
2103:../Dave/Generated/FREERTOS/tasks.c ****     }
2104:../Dave/Generated/FREERTOS/tasks.c **** 
2105:../Dave/Generated/FREERTOS/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2106:../Dave/Generated/FREERTOS/tasks.c ****      * meaning xIdleTaskHandle is not used anywhere else. */
2107:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) xIdleTaskHandle;
2108:../Dave/Generated/FREERTOS/tasks.c **** 
2109:../Dave/Generated/FREERTOS/tasks.c ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
2110:../Dave/Generated/FREERTOS/tasks.c ****      * from getting optimized out as it is no longer used by the kernel. */
2111:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) uxTopUsedPriority;
 2448              	 .loc 1 2111 0
 2449 0076 084B     	 ldr r3,.L156+24
 2450 0078 1B68     	 ldr r3,[r3]
2112:../Dave/Generated/FREERTOS/tasks.c **** }
 2451              	 .loc 1 2112 0
 2452 007a 1037     	 adds r7,r7,#16
 2453              	.LCFI74:
 2454              	 .cfi_def_cfa_offset 8
 2455 007c BD46     	 mov sp,r7
 2456              	.LCFI75:
 2457              	 .cfi_def_cfa_register 13
 2458              	 
 2459 007e 80BD     	 pop {r7,pc}
 2460              	.L157:
 2461              	 .align 2
 2462              	.L156:
 2463 0080 00000000 	 .word xIdleTaskHandle
 2464 0084 00000000 	 .word prvIdleTask
 2465 0088 00000000 	 .word .LC0
 2466 008c 00000000 	 .word xNextTaskUnblockTime
 2467 0090 00000000 	 .word xSchedulerRunning
 2468 0094 00000000 	 .word xTickCount
 2469 0098 00000000 	 .word uxTopUsedPriority
 2470              	 .cfi_endproc
 2471              	.LFE152:
 2473              	 .section .text.vTaskEndScheduler,"ax",%progbits
 2474              	 .align 2
 2475              	 .global vTaskEndScheduler
 2476              	 .thumb
 2477              	 .thumb_func
 2479              	vTaskEndScheduler:
 2480              	.LFB153:
2113:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2114:../Dave/Generated/FREERTOS/tasks.c **** 
2115:../Dave/Generated/FREERTOS/tasks.c **** void vTaskEndScheduler( void )
2116:../Dave/Generated/FREERTOS/tasks.c **** {
 2481              	 .loc 1 2116 0
 2482              	 .cfi_startproc
 2483              	 
 2484              	 
 2485 0000 80B5     	 push {r7,lr}
 2486              	.LCFI76:
 2487              	 .cfi_def_cfa_offset 8
 2488              	 .cfi_offset 7,-8
 2489              	 .cfi_offset 14,-4
 2490 0002 82B0     	 sub sp,sp,#8
 2491              	.LCFI77:
 2492              	 .cfi_def_cfa_offset 16
 2493 0004 00AF     	 add r7,sp,#0
 2494              	.LCFI78:
 2495              	 .cfi_def_cfa_register 7
 2496              	.LBB173:
 2497              	.LBB174:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2498              	 .loc 2 197 0
 2499              	
 2500 0006 4FF0FC03 	 mov r3,#252
 2501 000a 83F31188 	 msr basepri,r3
 2502 000e BFF36F8F 	 isb 
 2503 0012 BFF34F8F 	 dsb 
 2504              	
 2505              	
 2506              	 .thumb
 2507 0016 7B60     	 str r3,[r7,#4]
 2508              	.LBE174:
 2509              	.LBE173:
2117:../Dave/Generated/FREERTOS/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
2118:../Dave/Generated/FREERTOS/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
2119:../Dave/Generated/FREERTOS/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
2120:../Dave/Generated/FREERTOS/tasks.c ****     portDISABLE_INTERRUPTS();
2121:../Dave/Generated/FREERTOS/tasks.c ****     xSchedulerRunning = pdFALSE;
 2510              	 .loc 1 2121 0
 2511 0018 034B     	 ldr r3,.L159
 2512 001a 0022     	 movs r2,#0
 2513 001c 1A60     	 str r2,[r3]
2122:../Dave/Generated/FREERTOS/tasks.c ****     vPortEndScheduler();
 2514              	 .loc 1 2122 0
 2515 001e FFF7FEFF 	 bl vPortEndScheduler
2123:../Dave/Generated/FREERTOS/tasks.c **** }
 2516              	 .loc 1 2123 0
 2517 0022 0837     	 adds r7,r7,#8
 2518              	.LCFI79:
 2519              	 .cfi_def_cfa_offset 8
 2520 0024 BD46     	 mov sp,r7
 2521              	.LCFI80:
 2522              	 .cfi_def_cfa_register 13
 2523              	 
 2524 0026 80BD     	 pop {r7,pc}
 2525              	.L160:
 2526              	 .align 2
 2527              	.L159:
 2528 0028 00000000 	 .word xSchedulerRunning
 2529              	 .cfi_endproc
 2530              	.LFE153:
 2532              	 .section .text.vTaskSuspendAll,"ax",%progbits
 2533              	 .align 2
 2534              	 .global vTaskSuspendAll
 2535              	 .thumb
 2536              	 .thumb_func
 2538              	vTaskSuspendAll:
 2539              	.LFB154:
2124:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2125:../Dave/Generated/FREERTOS/tasks.c **** 
2126:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSuspendAll( void )
2127:../Dave/Generated/FREERTOS/tasks.c **** {
 2540              	 .loc 1 2127 0
 2541              	 .cfi_startproc
 2542              	 
 2543              	 
 2544              	 
 2545 0000 80B4     	 push {r7}
 2546              	.LCFI81:
 2547              	 .cfi_def_cfa_offset 4
 2548              	 .cfi_offset 7,-4
 2549 0002 00AF     	 add r7,sp,#0
 2550              	.LCFI82:
 2551              	 .cfi_def_cfa_register 7
2128:../Dave/Generated/FREERTOS/tasks.c ****     /* A critical section is not required as the variable is of type
2129:../Dave/Generated/FREERTOS/tasks.c ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2130:../Dave/Generated/FREERTOS/tasks.c ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2131:../Dave/Generated/FREERTOS/tasks.c ****      * https://goo.gl/wu4acr */
2132:../Dave/Generated/FREERTOS/tasks.c **** 
2133:../Dave/Generated/FREERTOS/tasks.c ****     /* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2134:../Dave/Generated/FREERTOS/tasks.c ****      * do not otherwise exhibit real time behaviour. */
2135:../Dave/Generated/FREERTOS/tasks.c ****     portSOFTWARE_BARRIER();
2136:../Dave/Generated/FREERTOS/tasks.c **** 
2137:../Dave/Generated/FREERTOS/tasks.c ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2138:../Dave/Generated/FREERTOS/tasks.c ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2139:../Dave/Generated/FREERTOS/tasks.c ****     ++uxSchedulerSuspended;
 2552              	 .loc 1 2139 0
 2553 0004 044B     	 ldr r3,.L162
 2554 0006 1B68     	 ldr r3,[r3]
 2555 0008 0133     	 adds r3,r3,#1
 2556 000a 034A     	 ldr r2,.L162
 2557 000c 1360     	 str r3,[r2]
2140:../Dave/Generated/FREERTOS/tasks.c **** 
2141:../Dave/Generated/FREERTOS/tasks.c ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2142:../Dave/Generated/FREERTOS/tasks.c ****      * the above increment elsewhere. */
2143:../Dave/Generated/FREERTOS/tasks.c ****     portMEMORY_BARRIER();
 2558              	 .loc 1 2143 0
2144:../Dave/Generated/FREERTOS/tasks.c **** }
 2559              	 .loc 1 2144 0
 2560 000e BD46     	 mov sp,r7
 2561              	.LCFI83:
 2562              	 .cfi_def_cfa_register 13
 2563              	 
 2564 0010 5DF8047B 	 ldr r7,[sp],#4
 2565              	.LCFI84:
 2566              	 .cfi_restore 7
 2567              	 .cfi_def_cfa_offset 0
 2568 0014 7047     	 bx lr
 2569              	.L163:
 2570 0016 00BF     	 .align 2
 2571              	.L162:
 2572 0018 00000000 	 .word uxSchedulerSuspended
 2573              	 .cfi_endproc
 2574              	.LFE154:
 2576              	 .section .text.xTaskResumeAll,"ax",%progbits
 2577              	 .align 2
 2578              	 .global xTaskResumeAll
 2579              	 .thumb
 2580              	 .thumb_func
 2582              	xTaskResumeAll:
 2583              	.LFB155:
2145:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2146:../Dave/Generated/FREERTOS/tasks.c **** 
2147:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2148:../Dave/Generated/FREERTOS/tasks.c **** 
2149:../Dave/Generated/FREERTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
2150:../Dave/Generated/FREERTOS/tasks.c ****     {
2151:../Dave/Generated/FREERTOS/tasks.c ****         TickType_t xReturn;
2152:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2153:../Dave/Generated/FREERTOS/tasks.c **** 
2154:../Dave/Generated/FREERTOS/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
2155:../Dave/Generated/FREERTOS/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2156:../Dave/Generated/FREERTOS/tasks.c ****          * task that are in the Ready state, even though the idle task is
2157:../Dave/Generated/FREERTOS/tasks.c ****          * running. */
2158:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2159:../Dave/Generated/FREERTOS/tasks.c ****             {
2160:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxTopReadyPriority > tskIDLE_PRIORITY )
2161:../Dave/Generated/FREERTOS/tasks.c ****                 {
2162:../Dave/Generated/FREERTOS/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
2163:../Dave/Generated/FREERTOS/tasks.c ****                 }
2164:../Dave/Generated/FREERTOS/tasks.c ****             }
2165:../Dave/Generated/FREERTOS/tasks.c ****         #else
2166:../Dave/Generated/FREERTOS/tasks.c ****             {
2167:../Dave/Generated/FREERTOS/tasks.c ****                 const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2168:../Dave/Generated/FREERTOS/tasks.c **** 
2169:../Dave/Generated/FREERTOS/tasks.c ****                 /* When port optimised task selection is used the uxTopReadyPriority
2170:../Dave/Generated/FREERTOS/tasks.c ****                  * variable is used as a bit map.  If bits other than the least
2171:../Dave/Generated/FREERTOS/tasks.c ****                  * significant bit are set then there are tasks that have a priority
2172:../Dave/Generated/FREERTOS/tasks.c ****                  * above the idle priority that are in the Ready state.  This takes
2173:../Dave/Generated/FREERTOS/tasks.c ****                  * care of the case where the co-operative scheduler is in use. */
2174:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxTopReadyPriority > uxLeastSignificantBit )
2175:../Dave/Generated/FREERTOS/tasks.c ****                 {
2176:../Dave/Generated/FREERTOS/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
2177:../Dave/Generated/FREERTOS/tasks.c ****                 }
2178:../Dave/Generated/FREERTOS/tasks.c ****             }
2179:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2180:../Dave/Generated/FREERTOS/tasks.c **** 
2181:../Dave/Generated/FREERTOS/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2182:../Dave/Generated/FREERTOS/tasks.c ****         {
2183:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = 0;
2184:../Dave/Generated/FREERTOS/tasks.c ****         }
2185:../Dave/Generated/FREERTOS/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2186:../Dave/Generated/FREERTOS/tasks.c ****         {
2187:../Dave/Generated/FREERTOS/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
2188:../Dave/Generated/FREERTOS/tasks.c ****              * time slicing is used then the very next tick interrupt must be
2189:../Dave/Generated/FREERTOS/tasks.c ****              * processed. */
2190:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = 0;
2191:../Dave/Generated/FREERTOS/tasks.c ****         }
2192:../Dave/Generated/FREERTOS/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
2193:../Dave/Generated/FREERTOS/tasks.c ****         {
2194:../Dave/Generated/FREERTOS/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
2195:../Dave/Generated/FREERTOS/tasks.c ****              * idle priority.  This path can only be reached if
2196:../Dave/Generated/FREERTOS/tasks.c ****              * configUSE_PREEMPTION is 0. */
2197:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = 0;
2198:../Dave/Generated/FREERTOS/tasks.c ****         }
2199:../Dave/Generated/FREERTOS/tasks.c ****         else
2200:../Dave/Generated/FREERTOS/tasks.c ****         {
2201:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = xNextTaskUnblockTime - xTickCount;
2202:../Dave/Generated/FREERTOS/tasks.c ****         }
2203:../Dave/Generated/FREERTOS/tasks.c **** 
2204:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
2205:../Dave/Generated/FREERTOS/tasks.c ****     }
2206:../Dave/Generated/FREERTOS/tasks.c **** 
2207:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2208:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2209:../Dave/Generated/FREERTOS/tasks.c **** 
2210:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2211:../Dave/Generated/FREERTOS/tasks.c **** {
 2584              	 .loc 1 2211 0
 2585              	 .cfi_startproc
 2586              	 
 2587              	 
 2588 0000 80B5     	 push {r7,lr}
 2589              	.LCFI85:
 2590              	 .cfi_def_cfa_offset 8
 2591              	 .cfi_offset 7,-8
 2592              	 .cfi_offset 14,-4
 2593 0002 84B0     	 sub sp,sp,#16
 2594              	.LCFI86:
 2595              	 .cfi_def_cfa_offset 24
 2596 0004 00AF     	 add r7,sp,#0
 2597              	.LCFI87:
 2598              	 .cfi_def_cfa_register 7
2212:../Dave/Generated/FREERTOS/tasks.c ****     TCB_t * pxTCB = NULL;
 2599              	 .loc 1 2212 0
 2600 0006 0023     	 movs r3,#0
 2601 0008 FB60     	 str r3,[r7,#12]
2213:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 2602              	 .loc 1 2213 0
 2603 000a 0023     	 movs r3,#0
 2604 000c BB60     	 str r3,[r7,#8]
2214:../Dave/Generated/FREERTOS/tasks.c **** 
2215:../Dave/Generated/FREERTOS/tasks.c ****     /* If uxSchedulerSuspended is zero then this function does not match a
2216:../Dave/Generated/FREERTOS/tasks.c ****      * previous call to vTaskSuspendAll(). */
2217:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( uxSchedulerSuspended );
 2605              	 .loc 1 2217 0
 2606 000e 424B     	 ldr r3,.L175
 2607 0010 1B68     	 ldr r3,[r3]
 2608 0012 002B     	 cmp r3,#0
 2609 0014 09D1     	 bne .L165
 2610              	.LBB175:
 2611              	.LBB176:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2612              	 .loc 2 197 0 discriminator 1
 2613              	
 2614 0016 4FF0FC03 	 mov r3,#252
 2615 001a 83F31188 	 msr basepri,r3
 2616 001e BFF36F8F 	 isb 
 2617 0022 BFF34F8F 	 dsb 
 2618              	
 2619              	
 2620              	 .thumb
 2621 0026 3B60     	 str r3,[r7]
 2622              	.L166:
 2623              	.LBE176:
 2624              	.LBE175:
 2625              	 .loc 1 2217 0 discriminator 1
 2626 0028 FEE7     	 b .L166
 2627              	.L165:
2218:../Dave/Generated/FREERTOS/tasks.c **** 
2219:../Dave/Generated/FREERTOS/tasks.c ****     /* It is possible that an ISR caused a task to be removed from an event
2220:../Dave/Generated/FREERTOS/tasks.c ****      * list while the scheduler was suspended.  If this was the case then the
2221:../Dave/Generated/FREERTOS/tasks.c ****      * removed task will have been added to the xPendingReadyList.  Once the
2222:../Dave/Generated/FREERTOS/tasks.c ****      * scheduler has been resumed it is safe to move all the pending ready
2223:../Dave/Generated/FREERTOS/tasks.c ****      * tasks from this list into their appropriate ready list. */
2224:../Dave/Generated/FREERTOS/tasks.c ****     taskENTER_CRITICAL();
 2628              	 .loc 1 2224 0
 2629 002a FFF7FEFF 	 bl vPortEnterCritical
2225:../Dave/Generated/FREERTOS/tasks.c ****     {
2226:../Dave/Generated/FREERTOS/tasks.c ****         --uxSchedulerSuspended;
 2630              	 .loc 1 2226 0
 2631 002e 3A4B     	 ldr r3,.L175
 2632 0030 1B68     	 ldr r3,[r3]
 2633 0032 013B     	 subs r3,r3,#1
 2634 0034 384A     	 ldr r2,.L175
 2635 0036 1360     	 str r3,[r2]
2227:../Dave/Generated/FREERTOS/tasks.c **** 
2228:../Dave/Generated/FREERTOS/tasks.c ****         if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2636              	 .loc 1 2228 0
 2637 0038 374B     	 ldr r3,.L175
 2638 003a 1B68     	 ldr r3,[r3]
 2639 003c 002B     	 cmp r3,#0
 2640 003e 63D1     	 bne .L167
2229:../Dave/Generated/FREERTOS/tasks.c ****         {
2230:../Dave/Generated/FREERTOS/tasks.c ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2641              	 .loc 1 2230 0
 2642 0040 364B     	 ldr r3,.L175+4
 2643 0042 1B68     	 ldr r3,[r3]
 2644 0044 002B     	 cmp r3,#0
 2645 0046 5FD0     	 beq .L167
2231:../Dave/Generated/FREERTOS/tasks.c ****             {
2232:../Dave/Generated/FREERTOS/tasks.c ****                 /* Move any readied tasks from the pending list into the
2233:../Dave/Generated/FREERTOS/tasks.c ****                  * appropriate ready list. */
2234:../Dave/Generated/FREERTOS/tasks.c ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2646              	 .loc 1 2234 0
 2647 0048 30E0     	 b .L168
 2648              	.L169:
2235:../Dave/Generated/FREERTOS/tasks.c ****                 {
2236:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
 2649              	 .loc 1 2236 0
 2650 004a 354B     	 ldr r3,.L175+8
 2651 004c DB68     	 ldr r3,[r3,#12]
 2652 004e DB68     	 ldr r3,[r3,#12]
 2653 0050 FB60     	 str r3,[r7,#12]
2237:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2654              	 .loc 1 2237 0
 2655 0052 FB68     	 ldr r3,[r7,#12]
 2656 0054 1833     	 adds r3,r3,#24
 2657 0056 1846     	 mov r0,r3
 2658 0058 FFF7FEFF 	 bl uxListRemove
2238:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2659              	 .loc 1 2238 0
 2660 005c FB68     	 ldr r3,[r7,#12]
 2661 005e 0433     	 adds r3,r3,#4
 2662 0060 1846     	 mov r0,r3
 2663 0062 FFF7FEFF 	 bl uxListRemove
2239:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2664              	 .loc 1 2239 0
 2665 0066 FB68     	 ldr r3,[r7,#12]
 2666 0068 DB6A     	 ldr r3,[r3,#44]
 2667 006a 1A46     	 mov r2,r3
 2668 006c 0123     	 movs r3,#1
 2669 006e 03FA02F2 	 lsl r2,r3,r2
 2670 0072 2C4B     	 ldr r3,.L175+12
 2671 0074 1B68     	 ldr r3,[r3]
 2672 0076 1343     	 orrs r3,r3,r2
 2673 0078 2A4A     	 ldr r2,.L175+12
 2674 007a 1360     	 str r3,[r2]
 2675 007c FB68     	 ldr r3,[r7,#12]
 2676 007e DA6A     	 ldr r2,[r3,#44]
 2677 0080 1346     	 mov r3,r2
 2678 0082 9B00     	 lsls r3,r3,#2
 2679 0084 1344     	 add r3,r3,r2
 2680 0086 9B00     	 lsls r3,r3,#2
 2681 0088 274A     	 ldr r2,.L175+16
 2682 008a 1A44     	 add r2,r2,r3
 2683 008c FB68     	 ldr r3,[r7,#12]
 2684 008e 0433     	 adds r3,r3,#4
 2685 0090 1046     	 mov r0,r2
 2686 0092 1946     	 mov r1,r3
 2687 0094 FFF7FEFF 	 bl vListInsertEnd
2240:../Dave/Generated/FREERTOS/tasks.c **** 
2241:../Dave/Generated/FREERTOS/tasks.c ****                     /* If the moved task has a priority higher than the current
2242:../Dave/Generated/FREERTOS/tasks.c ****                      * task then a yield must be performed. */
2243:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2688              	 .loc 1 2243 0
 2689 0098 FB68     	 ldr r3,[r7,#12]
 2690 009a DA6A     	 ldr r2,[r3,#44]
 2691 009c 234B     	 ldr r3,.L175+20
 2692 009e 1B68     	 ldr r3,[r3]
 2693 00a0 DB6A     	 ldr r3,[r3,#44]
 2694 00a2 9A42     	 cmp r2,r3
 2695 00a4 02D3     	 bcc .L168
2244:../Dave/Generated/FREERTOS/tasks.c ****                     {
2245:../Dave/Generated/FREERTOS/tasks.c ****                         xYieldPending = pdTRUE;
 2696              	 .loc 1 2245 0
 2697 00a6 224B     	 ldr r3,.L175+24
 2698 00a8 0122     	 movs r2,#1
 2699 00aa 1A60     	 str r2,[r3]
 2700              	.L168:
2234:../Dave/Generated/FREERTOS/tasks.c ****                 {
 2701              	 .loc 1 2234 0
 2702 00ac 1C4B     	 ldr r3,.L175+8
 2703 00ae 1B68     	 ldr r3,[r3]
 2704 00b0 002B     	 cmp r3,#0
 2705 00b2 CAD1     	 bne .L169
2246:../Dave/Generated/FREERTOS/tasks.c ****                     }
2247:../Dave/Generated/FREERTOS/tasks.c ****                     else
2248:../Dave/Generated/FREERTOS/tasks.c ****                     {
2249:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2250:../Dave/Generated/FREERTOS/tasks.c ****                     }
2251:../Dave/Generated/FREERTOS/tasks.c ****                 }
2252:../Dave/Generated/FREERTOS/tasks.c **** 
2253:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB != NULL )
 2706              	 .loc 1 2253 0
 2707 00b4 FB68     	 ldr r3,[r7,#12]
 2708 00b6 002B     	 cmp r3,#0
 2709 00b8 01D0     	 beq .L170
2254:../Dave/Generated/FREERTOS/tasks.c ****                 {
2255:../Dave/Generated/FREERTOS/tasks.c ****                     /* A task was unblocked while the scheduler was suspended,
2256:../Dave/Generated/FREERTOS/tasks.c ****                      * which may have prevented the next unblock time from being
2257:../Dave/Generated/FREERTOS/tasks.c ****                      * re-calculated, in which case re-calculate it now.  Mainly
2258:../Dave/Generated/FREERTOS/tasks.c ****                      * important for low power tickless implementations, where
2259:../Dave/Generated/FREERTOS/tasks.c ****                      * this can prevent an unnecessary exit from low power
2260:../Dave/Generated/FREERTOS/tasks.c ****                      * state. */
2261:../Dave/Generated/FREERTOS/tasks.c ****                     prvResetNextTaskUnblockTime();
 2710              	 .loc 1 2261 0
 2711 00ba FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 2712              	.L170:
 2713              	.LBB177:
2262:../Dave/Generated/FREERTOS/tasks.c ****                 }
2263:../Dave/Generated/FREERTOS/tasks.c **** 
2264:../Dave/Generated/FREERTOS/tasks.c ****                 /* If any ticks occurred while the scheduler was suspended then
2265:../Dave/Generated/FREERTOS/tasks.c ****                  * they should be processed now.  This ensures the tick count does
2266:../Dave/Generated/FREERTOS/tasks.c ****                  * not  slip, and that any delayed tasks are resumed at the correct
2267:../Dave/Generated/FREERTOS/tasks.c ****                  * time. */
2268:../Dave/Generated/FREERTOS/tasks.c ****                 {
2269:../Dave/Generated/FREERTOS/tasks.c ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 2714              	 .loc 1 2269 0
 2715 00be 1D4B     	 ldr r3,.L175+28
 2716 00c0 1B68     	 ldr r3,[r3]
 2717 00c2 7B60     	 str r3,[r7,#4]
2270:../Dave/Generated/FREERTOS/tasks.c **** 
2271:../Dave/Generated/FREERTOS/tasks.c ****                     if( xPendedCounts > ( TickType_t ) 0U )
 2718              	 .loc 1 2271 0
 2719 00c4 7B68     	 ldr r3,[r7,#4]
 2720 00c6 002B     	 cmp r3,#0
 2721 00c8 10D0     	 beq .L171
 2722              	.L173:
2272:../Dave/Generated/FREERTOS/tasks.c ****                     {
2273:../Dave/Generated/FREERTOS/tasks.c ****                         do
2274:../Dave/Generated/FREERTOS/tasks.c ****                         {
2275:../Dave/Generated/FREERTOS/tasks.c ****                             if( xTaskIncrementTick() != pdFALSE )
 2723              	 .loc 1 2275 0
 2724 00ca FFF7FEFF 	 bl xTaskIncrementTick
 2725 00ce 0346     	 mov r3,r0
 2726 00d0 002B     	 cmp r3,#0
 2727 00d2 02D0     	 beq .L172
2276:../Dave/Generated/FREERTOS/tasks.c ****                             {
2277:../Dave/Generated/FREERTOS/tasks.c ****                                 xYieldPending = pdTRUE;
 2728              	 .loc 1 2277 0
 2729 00d4 164B     	 ldr r3,.L175+24
 2730 00d6 0122     	 movs r2,#1
 2731 00d8 1A60     	 str r2,[r3]
 2732              	.L172:
2278:../Dave/Generated/FREERTOS/tasks.c ****                             }
2279:../Dave/Generated/FREERTOS/tasks.c ****                             else
2280:../Dave/Generated/FREERTOS/tasks.c ****                             {
2281:../Dave/Generated/FREERTOS/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2282:../Dave/Generated/FREERTOS/tasks.c ****                             }
2283:../Dave/Generated/FREERTOS/tasks.c **** 
2284:../Dave/Generated/FREERTOS/tasks.c ****                             --xPendedCounts;
 2733              	 .loc 1 2284 0
 2734 00da 7B68     	 ldr r3,[r7,#4]
 2735 00dc 013B     	 subs r3,r3,#1
 2736 00de 7B60     	 str r3,[r7,#4]
2285:../Dave/Generated/FREERTOS/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
 2737              	 .loc 1 2285 0
 2738 00e0 7B68     	 ldr r3,[r7,#4]
 2739 00e2 002B     	 cmp r3,#0
 2740 00e4 F1D1     	 bne .L173
2286:../Dave/Generated/FREERTOS/tasks.c **** 
2287:../Dave/Generated/FREERTOS/tasks.c ****                         xPendedTicks = 0;
 2741              	 .loc 1 2287 0
 2742 00e6 134B     	 ldr r3,.L175+28
 2743 00e8 0022     	 movs r2,#0
 2744 00ea 1A60     	 str r2,[r3]
 2745              	.L171:
 2746              	.LBE177:
2288:../Dave/Generated/FREERTOS/tasks.c ****                     }
2289:../Dave/Generated/FREERTOS/tasks.c ****                     else
2290:../Dave/Generated/FREERTOS/tasks.c ****                     {
2291:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2292:../Dave/Generated/FREERTOS/tasks.c ****                     }
2293:../Dave/Generated/FREERTOS/tasks.c ****                 }
2294:../Dave/Generated/FREERTOS/tasks.c **** 
2295:../Dave/Generated/FREERTOS/tasks.c ****                 if( xYieldPending != pdFALSE )
 2747              	 .loc 1 2295 0
 2748 00ec 104B     	 ldr r3,.L175+24
 2749 00ee 1B68     	 ldr r3,[r3]
 2750 00f0 002B     	 cmp r3,#0
 2751 00f2 09D0     	 beq .L167
2296:../Dave/Generated/FREERTOS/tasks.c ****                 {
2297:../Dave/Generated/FREERTOS/tasks.c ****                     #if ( configUSE_PREEMPTION != 0 )
2298:../Dave/Generated/FREERTOS/tasks.c ****                         {
2299:../Dave/Generated/FREERTOS/tasks.c ****                             xAlreadyYielded = pdTRUE;
 2752              	 .loc 1 2299 0
 2753 00f4 0123     	 movs r3,#1
 2754 00f6 BB60     	 str r3,[r7,#8]
2300:../Dave/Generated/FREERTOS/tasks.c ****                         }
2301:../Dave/Generated/FREERTOS/tasks.c ****                     #endif
2302:../Dave/Generated/FREERTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
 2755              	 .loc 1 2302 0
 2756 00f8 0F4B     	 ldr r3,.L175+32
 2757 00fa 4FF08052 	 mov r2,#268435456
 2758 00fe 1A60     	 str r2,[r3]
 2759              	
 2760 0100 BFF34F8F 	 dsb
 2761              	
 2762              	
 2763 0104 BFF36F8F 	 isb
 2764              	
 2765              	 .thumb
 2766              	.L167:
2303:../Dave/Generated/FREERTOS/tasks.c ****                 }
2304:../Dave/Generated/FREERTOS/tasks.c ****                 else
2305:../Dave/Generated/FREERTOS/tasks.c ****                 {
2306:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2307:../Dave/Generated/FREERTOS/tasks.c ****                 }
2308:../Dave/Generated/FREERTOS/tasks.c ****             }
2309:../Dave/Generated/FREERTOS/tasks.c ****         }
2310:../Dave/Generated/FREERTOS/tasks.c ****         else
2311:../Dave/Generated/FREERTOS/tasks.c ****         {
2312:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2313:../Dave/Generated/FREERTOS/tasks.c ****         }
2314:../Dave/Generated/FREERTOS/tasks.c ****     }
2315:../Dave/Generated/FREERTOS/tasks.c ****     taskEXIT_CRITICAL();
 2767              	 .loc 1 2315 0
 2768 0108 FFF7FEFF 	 bl vPortExitCritical
2316:../Dave/Generated/FREERTOS/tasks.c **** 
2317:../Dave/Generated/FREERTOS/tasks.c ****     return xAlreadyYielded;
 2769              	 .loc 1 2317 0
 2770 010c BB68     	 ldr r3,[r7,#8]
2318:../Dave/Generated/FREERTOS/tasks.c **** }
 2771              	 .loc 1 2318 0
 2772 010e 1846     	 mov r0,r3
 2773 0110 1037     	 adds r7,r7,#16
 2774              	.LCFI88:
 2775              	 .cfi_def_cfa_offset 8
 2776 0112 BD46     	 mov sp,r7
 2777              	.LCFI89:
 2778              	 .cfi_def_cfa_register 13
 2779              	 
 2780 0114 80BD     	 pop {r7,pc}
 2781              	.L176:
 2782 0116 00BF     	 .align 2
 2783              	.L175:
 2784 0118 00000000 	 .word uxSchedulerSuspended
 2785 011c 00000000 	 .word uxCurrentNumberOfTasks
 2786 0120 00000000 	 .word xPendingReadyList
 2787 0124 00000000 	 .word uxTopReadyPriority
 2788 0128 00000000 	 .word pxReadyTasksLists
 2789 012c 00000000 	 .word pxCurrentTCB
 2790 0130 00000000 	 .word xYieldPending
 2791 0134 00000000 	 .word xPendedTicks
 2792 0138 04ED00E0 	 .word -536810236
 2793              	 .cfi_endproc
 2794              	.LFE155:
 2796              	 .section .text.xTaskGetTickCount,"ax",%progbits
 2797              	 .align 2
 2798              	 .global xTaskGetTickCount
 2799              	 .thumb
 2800              	 .thumb_func
 2802              	xTaskGetTickCount:
 2803              	.LFB156:
2319:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2320:../Dave/Generated/FREERTOS/tasks.c **** 
2321:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2322:../Dave/Generated/FREERTOS/tasks.c **** {
 2804              	 .loc 1 2322 0
 2805              	 .cfi_startproc
 2806              	 
 2807              	 
 2808              	 
 2809 0000 80B4     	 push {r7}
 2810              	.LCFI90:
 2811              	 .cfi_def_cfa_offset 4
 2812              	 .cfi_offset 7,-4
 2813 0002 83B0     	 sub sp,sp,#12
 2814              	.LCFI91:
 2815              	 .cfi_def_cfa_offset 16
 2816 0004 00AF     	 add r7,sp,#0
 2817              	.LCFI92:
 2818              	 .cfi_def_cfa_register 7
2323:../Dave/Generated/FREERTOS/tasks.c ****     TickType_t xTicks;
2324:../Dave/Generated/FREERTOS/tasks.c **** 
2325:../Dave/Generated/FREERTOS/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
2326:../Dave/Generated/FREERTOS/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
2327:../Dave/Generated/FREERTOS/tasks.c ****     {
2328:../Dave/Generated/FREERTOS/tasks.c ****         xTicks = xTickCount;
 2819              	 .loc 1 2328 0
 2820 0006 054B     	 ldr r3,.L179
 2821 0008 1B68     	 ldr r3,[r3]
 2822 000a 7B60     	 str r3,[r7,#4]
2329:../Dave/Generated/FREERTOS/tasks.c ****     }
2330:../Dave/Generated/FREERTOS/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
2331:../Dave/Generated/FREERTOS/tasks.c **** 
2332:../Dave/Generated/FREERTOS/tasks.c ****     return xTicks;
 2823              	 .loc 1 2332 0
 2824 000c 7B68     	 ldr r3,[r7,#4]
2333:../Dave/Generated/FREERTOS/tasks.c **** }
 2825              	 .loc 1 2333 0
 2826 000e 1846     	 mov r0,r3
 2827 0010 0C37     	 adds r7,r7,#12
 2828              	.LCFI93:
 2829              	 .cfi_def_cfa_offset 4
 2830 0012 BD46     	 mov sp,r7
 2831              	.LCFI94:
 2832              	 .cfi_def_cfa_register 13
 2833              	 
 2834 0014 5DF8047B 	 ldr r7,[sp],#4
 2835              	.LCFI95:
 2836              	 .cfi_restore 7
 2837              	 .cfi_def_cfa_offset 0
 2838 0018 7047     	 bx lr
 2839              	.L180:
 2840 001a 00BF     	 .align 2
 2841              	.L179:
 2842 001c 00000000 	 .word xTickCount
 2843              	 .cfi_endproc
 2844              	.LFE156:
 2846              	 .section .text.xTaskGetTickCountFromISR,"ax",%progbits
 2847              	 .align 2
 2848              	 .global xTaskGetTickCountFromISR
 2849              	 .thumb
 2850              	 .thumb_func
 2852              	xTaskGetTickCountFromISR:
 2853              	.LFB157:
2334:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2335:../Dave/Generated/FREERTOS/tasks.c **** 
2336:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2337:../Dave/Generated/FREERTOS/tasks.c **** {
 2854              	 .loc 1 2337 0
 2855              	 .cfi_startproc
 2856              	 
 2857              	 
 2858 0000 80B5     	 push {r7,lr}
 2859              	.LCFI96:
 2860              	 .cfi_def_cfa_offset 8
 2861              	 .cfi_offset 7,-8
 2862              	 .cfi_offset 14,-4
 2863 0002 82B0     	 sub sp,sp,#8
 2864              	.LCFI97:
 2865              	 .cfi_def_cfa_offset 16
 2866 0004 00AF     	 add r7,sp,#0
 2867              	.LCFI98:
 2868              	 .cfi_def_cfa_register 7
2338:../Dave/Generated/FREERTOS/tasks.c ****     TickType_t xReturn;
2339:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
2340:../Dave/Generated/FREERTOS/tasks.c **** 
2341:../Dave/Generated/FREERTOS/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2342:../Dave/Generated/FREERTOS/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2343:../Dave/Generated/FREERTOS/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
2344:../Dave/Generated/FREERTOS/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2345:../Dave/Generated/FREERTOS/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2346:../Dave/Generated/FREERTOS/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2347:../Dave/Generated/FREERTOS/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2348:../Dave/Generated/FREERTOS/tasks.c ****      * assigned a priority above the configured maximum system call priority.
2349:../Dave/Generated/FREERTOS/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2350:../Dave/Generated/FREERTOS/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
2351:../Dave/Generated/FREERTOS/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2352:../Dave/Generated/FREERTOS/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2353:../Dave/Generated/FREERTOS/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
2354:../Dave/Generated/FREERTOS/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2355:../Dave/Generated/FREERTOS/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2869              	 .loc 1 2355 0
 2870 0006 FFF7FEFF 	 bl vPortValidateInterruptPriority
2356:../Dave/Generated/FREERTOS/tasks.c **** 
2357:../Dave/Generated/FREERTOS/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2871              	 .loc 1 2357 0
 2872 000a 0023     	 movs r3,#0
 2873 000c 7B60     	 str r3,[r7,#4]
2358:../Dave/Generated/FREERTOS/tasks.c ****     {
2359:../Dave/Generated/FREERTOS/tasks.c ****         xReturn = xTickCount;
 2874              	 .loc 1 2359 0
 2875 000e 044B     	 ldr r3,.L183
 2876 0010 1B68     	 ldr r3,[r3]
 2877 0012 3B60     	 str r3,[r7]
2360:../Dave/Generated/FREERTOS/tasks.c ****     }
2361:../Dave/Generated/FREERTOS/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2362:../Dave/Generated/FREERTOS/tasks.c **** 
2363:../Dave/Generated/FREERTOS/tasks.c ****     return xReturn;
 2878              	 .loc 1 2363 0
 2879 0014 3B68     	 ldr r3,[r7]
2364:../Dave/Generated/FREERTOS/tasks.c **** }
 2880              	 .loc 1 2364 0
 2881 0016 1846     	 mov r0,r3
 2882 0018 0837     	 adds r7,r7,#8
 2883              	.LCFI99:
 2884              	 .cfi_def_cfa_offset 8
 2885 001a BD46     	 mov sp,r7
 2886              	.LCFI100:
 2887              	 .cfi_def_cfa_register 13
 2888              	 
 2889 001c 80BD     	 pop {r7,pc}
 2890              	.L184:
 2891 001e 00BF     	 .align 2
 2892              	.L183:
 2893 0020 00000000 	 .word xTickCount
 2894              	 .cfi_endproc
 2895              	.LFE157:
 2897              	 .section .text.uxTaskGetNumberOfTasks,"ax",%progbits
 2898              	 .align 2
 2899              	 .global uxTaskGetNumberOfTasks
 2900              	 .thumb
 2901              	 .thumb_func
 2903              	uxTaskGetNumberOfTasks:
 2904              	.LFB158:
2365:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2366:../Dave/Generated/FREERTOS/tasks.c **** 
2367:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2368:../Dave/Generated/FREERTOS/tasks.c **** {
 2905              	 .loc 1 2368 0
 2906              	 .cfi_startproc
 2907              	 
 2908              	 
 2909              	 
 2910 0000 80B4     	 push {r7}
 2911              	.LCFI101:
 2912              	 .cfi_def_cfa_offset 4
 2913              	 .cfi_offset 7,-4
 2914 0002 00AF     	 add r7,sp,#0
 2915              	.LCFI102:
 2916              	 .cfi_def_cfa_register 7
2369:../Dave/Generated/FREERTOS/tasks.c ****     /* A critical section is not required because the variables are of type
2370:../Dave/Generated/FREERTOS/tasks.c ****      * BaseType_t. */
2371:../Dave/Generated/FREERTOS/tasks.c ****     return uxCurrentNumberOfTasks;
 2917              	 .loc 1 2371 0
 2918 0004 034B     	 ldr r3,.L187
 2919 0006 1B68     	 ldr r3,[r3]
2372:../Dave/Generated/FREERTOS/tasks.c **** }
 2920              	 .loc 1 2372 0
 2921 0008 1846     	 mov r0,r3
 2922 000a BD46     	 mov sp,r7
 2923              	.LCFI103:
 2924              	 .cfi_def_cfa_register 13
 2925              	 
 2926 000c 5DF8047B 	 ldr r7,[sp],#4
 2927              	.LCFI104:
 2928              	 .cfi_restore 7
 2929              	 .cfi_def_cfa_offset 0
 2930 0010 7047     	 bx lr
 2931              	.L188:
 2932 0012 00BF     	 .align 2
 2933              	.L187:
 2934 0014 00000000 	 .word uxCurrentNumberOfTasks
 2935              	 .cfi_endproc
 2936              	.LFE158:
 2938              	 .section .text.pcTaskGetName,"ax",%progbits
 2939              	 .align 2
 2940              	 .global pcTaskGetName
 2941              	 .thumb
 2942              	 .thumb_func
 2944              	pcTaskGetName:
 2945              	.LFB159:
2373:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2374:../Dave/Generated/FREERTOS/tasks.c **** 
2375:../Dave/Generated/FREERTOS/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2376:../Dave/Generated/FREERTOS/tasks.c **** {
 2946              	 .loc 1 2376 0
 2947              	 .cfi_startproc
 2948              	 
 2949              	 
 2950              	 
 2951 0000 80B4     	 push {r7}
 2952              	.LCFI105:
 2953              	 .cfi_def_cfa_offset 4
 2954              	 .cfi_offset 7,-4
 2955 0002 85B0     	 sub sp,sp,#20
 2956              	.LCFI106:
 2957              	 .cfi_def_cfa_offset 24
 2958 0004 00AF     	 add r7,sp,#0
 2959              	.LCFI107:
 2960              	 .cfi_def_cfa_register 7
 2961 0006 7860     	 str r0,[r7,#4]
2377:../Dave/Generated/FREERTOS/tasks.c ****     TCB_t * pxTCB;
2378:../Dave/Generated/FREERTOS/tasks.c **** 
2379:../Dave/Generated/FREERTOS/tasks.c ****     /* If null is passed in here then the name of the calling task is being
2380:../Dave/Generated/FREERTOS/tasks.c ****      * queried. */
2381:../Dave/Generated/FREERTOS/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2962              	 .loc 1 2381 0
 2963 0008 7B68     	 ldr r3,[r7,#4]
 2964 000a 002B     	 cmp r3,#0
 2965 000c 02D1     	 bne .L190
 2966              	 .loc 1 2381 0 is_stmt 0 discriminator 1
 2967 000e 0D4B     	 ldr r3,.L195
 2968 0010 1B68     	 ldr r3,[r3]
 2969 0012 00E0     	 b .L191
 2970              	.L190:
 2971              	 .loc 1 2381 0 discriminator 2
 2972 0014 7B68     	 ldr r3,[r7,#4]
 2973              	.L191:
 2974              	 .loc 1 2381 0 discriminator 4
 2975 0016 FB60     	 str r3,[r7,#12]
2382:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxTCB );
 2976              	 .loc 1 2382 0 is_stmt 1 discriminator 4
 2977 0018 FB68     	 ldr r3,[r7,#12]
 2978 001a 002B     	 cmp r3,#0
 2979 001c 09D1     	 bne .L192
 2980              	.LBB178:
 2981              	.LBB179:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2982              	 .loc 2 197 0 discriminator 1
 2983              	
 2984 001e 4FF0FC03 	 mov r3,#252
 2985 0022 83F31188 	 msr basepri,r3
 2986 0026 BFF36F8F 	 isb 
 2987 002a BFF34F8F 	 dsb 
 2988              	
 2989              	
 2990              	 .thumb
 2991 002e BB60     	 str r3,[r7,#8]
 2992              	.L193:
 2993              	.LBE179:
 2994              	.LBE178:
 2995              	 .loc 1 2382 0 discriminator 1
 2996 0030 FEE7     	 b .L193
 2997              	.L192:
2383:../Dave/Generated/FREERTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2998              	 .loc 1 2383 0
 2999 0032 FB68     	 ldr r3,[r7,#12]
 3000 0034 3433     	 adds r3,r3,#52
2384:../Dave/Generated/FREERTOS/tasks.c **** }
 3001              	 .loc 1 2384 0
 3002 0036 1846     	 mov r0,r3
 3003 0038 1437     	 adds r7,r7,#20
 3004              	.LCFI108:
 3005              	 .cfi_def_cfa_offset 4
 3006 003a BD46     	 mov sp,r7
 3007              	.LCFI109:
 3008              	 .cfi_def_cfa_register 13
 3009              	 
 3010 003c 5DF8047B 	 ldr r7,[sp],#4
 3011              	.LCFI110:
 3012              	 .cfi_restore 7
 3013              	 .cfi_def_cfa_offset 0
 3014 0040 7047     	 bx lr
 3015              	.L196:
 3016 0042 00BF     	 .align 2
 3017              	.L195:
 3018 0044 00000000 	 .word pxCurrentTCB
 3019              	 .cfi_endproc
 3020              	.LFE159:
 3022              	 .section .text.prvSearchForNameWithinSingleList,"ax",%progbits
 3023              	 .align 2
 3024              	 .thumb
 3025              	 .thumb_func
 3027              	prvSearchForNameWithinSingleList:
 3028              	.LFB160:
2385:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2386:../Dave/Generated/FREERTOS/tasks.c **** 
2387:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2388:../Dave/Generated/FREERTOS/tasks.c **** 
2389:../Dave/Generated/FREERTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2390:../Dave/Generated/FREERTOS/tasks.c ****                                                      const char pcNameToQuery[] )
2391:../Dave/Generated/FREERTOS/tasks.c ****     {
 3029              	 .loc 1 2391 0
 3030              	 .cfi_startproc
 3031              	 
 3032              	 
 3033              	 
 3034 0000 80B4     	 push {r7}
 3035              	.LCFI111:
 3036              	 .cfi_def_cfa_offset 4
 3037              	 .cfi_offset 7,-4
 3038 0002 8BB0     	 sub sp,sp,#44
 3039              	.LCFI112:
 3040              	 .cfi_def_cfa_offset 48
 3041 0004 00AF     	 add r7,sp,#0
 3042              	.LCFI113:
 3043              	 .cfi_def_cfa_register 7
 3044 0006 7860     	 str r0,[r7,#4]
 3045 0008 3960     	 str r1,[r7]
2392:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 3046              	 .loc 1 2392 0
 3047 000a 0023     	 movs r3,#0
 3048 000c 7B62     	 str r3,[r7,#36]
2393:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t x;
2394:../Dave/Generated/FREERTOS/tasks.c ****         char cNextChar;
2395:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xBreakLoop;
2396:../Dave/Generated/FREERTOS/tasks.c **** 
2397:../Dave/Generated/FREERTOS/tasks.c ****         /* This function is called with the scheduler suspended. */
2398:../Dave/Generated/FREERTOS/tasks.c **** 
2399:../Dave/Generated/FREERTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 3049              	 .loc 1 2399 0
 3050 000e 7B68     	 ldr r3,[r7,#4]
 3051 0010 1B68     	 ldr r3,[r3]
 3052 0012 002B     	 cmp r3,#0
 3053 0014 5AD0     	 beq .L198
 3054              	.LBB180:
2400:../Dave/Generated/FREERTOS/tasks.c ****         {
2401:../Dave/Generated/FREERTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
 3055              	 .loc 1 2401 0
 3056 0016 7B68     	 ldr r3,[r7,#4]
 3057 0018 BB61     	 str r3,[r7,#24]
 3058 001a BB69     	 ldr r3,[r7,#24]
 3059 001c 5B68     	 ldr r3,[r3,#4]
 3060 001e 5A68     	 ldr r2,[r3,#4]
 3061 0020 BB69     	 ldr r3,[r7,#24]
 3062 0022 5A60     	 str r2,[r3,#4]
 3063 0024 BB69     	 ldr r3,[r7,#24]
 3064 0026 5A68     	 ldr r2,[r3,#4]
 3065 0028 BB69     	 ldr r3,[r7,#24]
 3066 002a 0833     	 adds r3,r3,#8
 3067 002c 9A42     	 cmp r2,r3
 3068 002e 04D1     	 bne .L199
 3069              	 .loc 1 2401 0 is_stmt 0 discriminator 1
 3070 0030 BB69     	 ldr r3,[r7,#24]
 3071 0032 5B68     	 ldr r3,[r3,#4]
 3072 0034 5A68     	 ldr r2,[r3,#4]
 3073 0036 BB69     	 ldr r3,[r7,#24]
 3074 0038 5A60     	 str r2,[r3,#4]
 3075              	.L199:
 3076              	 .loc 1 2401 0 discriminator 3
 3077 003a BB69     	 ldr r3,[r7,#24]
 3078 003c 5B68     	 ldr r3,[r3,#4]
 3079 003e DB68     	 ldr r3,[r3,#12]
 3080 0040 7B61     	 str r3,[r7,#20]
 3081              	.L209:
 3082              	.LBE180:
 3083              	.LBB181:
2402:../Dave/Generated/FREERTOS/tasks.c **** 
2403:../Dave/Generated/FREERTOS/tasks.c ****             do
2404:../Dave/Generated/FREERTOS/tasks.c ****             {
2405:../Dave/Generated/FREERTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
 3084              	 .loc 1 2405 0 is_stmt 1
 3085 0042 7B68     	 ldr r3,[r7,#4]
 3086 0044 3B61     	 str r3,[r7,#16]
 3087 0046 3B69     	 ldr r3,[r7,#16]
 3088 0048 5B68     	 ldr r3,[r3,#4]
 3089 004a 5A68     	 ldr r2,[r3,#4]
 3090 004c 3B69     	 ldr r3,[r7,#16]
 3091 004e 5A60     	 str r2,[r3,#4]
 3092 0050 3B69     	 ldr r3,[r7,#16]
 3093 0052 5A68     	 ldr r2,[r3,#4]
 3094 0054 3B69     	 ldr r3,[r7,#16]
 3095 0056 0833     	 adds r3,r3,#8
 3096 0058 9A42     	 cmp r2,r3
 3097 005a 04D1     	 bne .L200
 3098              	 .loc 1 2405 0 is_stmt 0 discriminator 1
 3099 005c 3B69     	 ldr r3,[r7,#16]
 3100 005e 5B68     	 ldr r3,[r3,#4]
 3101 0060 5A68     	 ldr r2,[r3,#4]
 3102 0062 3B69     	 ldr r3,[r7,#16]
 3103 0064 5A60     	 str r2,[r3,#4]
 3104              	.L200:
 3105              	 .loc 1 2405 0 discriminator 3
 3106 0066 3B69     	 ldr r3,[r7,#16]
 3107 0068 5B68     	 ldr r3,[r3,#4]
 3108 006a DB68     	 ldr r3,[r3,#12]
 3109 006c FB60     	 str r3,[r7,#12]
 3110              	.LBE181:
2406:../Dave/Generated/FREERTOS/tasks.c **** 
2407:../Dave/Generated/FREERTOS/tasks.c ****                 /* Check each character in the name looking for a match or
2408:../Dave/Generated/FREERTOS/tasks.c ****                  * mismatch. */
2409:../Dave/Generated/FREERTOS/tasks.c ****                 xBreakLoop = pdFALSE;
 3111              	 .loc 1 2409 0 is_stmt 1 discriminator 3
 3112 006e 0023     	 movs r3,#0
 3113 0070 FB61     	 str r3,[r7,#28]
2410:../Dave/Generated/FREERTOS/tasks.c **** 
2411:../Dave/Generated/FREERTOS/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 3114              	 .loc 1 2411 0 discriminator 3
 3115 0072 0023     	 movs r3,#0
 3116 0074 3B62     	 str r3,[r7,#32]
 3117 0076 1DE0     	 b .L201
 3118              	.L206:
2412:../Dave/Generated/FREERTOS/tasks.c ****                 {
2413:../Dave/Generated/FREERTOS/tasks.c ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
 3119              	 .loc 1 2413 0
 3120 0078 FA68     	 ldr r2,[r7,#12]
 3121 007a 3B6A     	 ldr r3,[r7,#32]
 3122 007c 1344     	 add r3,r3,r2
 3123 007e 3033     	 adds r3,r3,#48
 3124 0080 1B79     	 ldrb r3,[r3,#4]
 3125 0082 FB72     	 strb r3,[r7,#11]
2414:../Dave/Generated/FREERTOS/tasks.c **** 
2415:../Dave/Generated/FREERTOS/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
 3126              	 .loc 1 2415 0
 3127 0084 3A68     	 ldr r2,[r7]
 3128 0086 3B6A     	 ldr r3,[r7,#32]
 3129 0088 1344     	 add r3,r3,r2
 3130 008a 1B78     	 ldrb r3,[r3]
 3131 008c FA7A     	 ldrb r2,[r7,#11]
 3132 008e 9A42     	 cmp r2,r3
 3133 0090 02D0     	 beq .L202
2416:../Dave/Generated/FREERTOS/tasks.c ****                     {
2417:../Dave/Generated/FREERTOS/tasks.c ****                         /* Characters didn't match. */
2418:../Dave/Generated/FREERTOS/tasks.c ****                         xBreakLoop = pdTRUE;
 3134              	 .loc 1 2418 0
 3135 0092 0123     	 movs r3,#1
 3136 0094 FB61     	 str r3,[r7,#28]
 3137 0096 06E0     	 b .L203
 3138              	.L202:
2419:../Dave/Generated/FREERTOS/tasks.c ****                     }
2420:../Dave/Generated/FREERTOS/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
 3139              	 .loc 1 2420 0
 3140 0098 FB7A     	 ldrb r3,[r7,#11]
 3141 009a 002B     	 cmp r3,#0
 3142 009c 03D1     	 bne .L203
2421:../Dave/Generated/FREERTOS/tasks.c ****                     {
2422:../Dave/Generated/FREERTOS/tasks.c ****                         /* Both strings terminated, a match must have been
2423:../Dave/Generated/FREERTOS/tasks.c ****                          * found. */
2424:../Dave/Generated/FREERTOS/tasks.c ****                         pxReturn = pxNextTCB;
 3143              	 .loc 1 2424 0
 3144 009e FB68     	 ldr r3,[r7,#12]
 3145 00a0 7B62     	 str r3,[r7,#36]
2425:../Dave/Generated/FREERTOS/tasks.c ****                         xBreakLoop = pdTRUE;
 3146              	 .loc 1 2425 0
 3147 00a2 0123     	 movs r3,#1
 3148 00a4 FB61     	 str r3,[r7,#28]
 3149              	.L203:
2426:../Dave/Generated/FREERTOS/tasks.c ****                     }
2427:../Dave/Generated/FREERTOS/tasks.c ****                     else
2428:../Dave/Generated/FREERTOS/tasks.c ****                     {
2429:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2430:../Dave/Generated/FREERTOS/tasks.c ****                     }
2431:../Dave/Generated/FREERTOS/tasks.c **** 
2432:../Dave/Generated/FREERTOS/tasks.c ****                     if( xBreakLoop != pdFALSE )
 3150              	 .loc 1 2432 0
 3151 00a6 FB69     	 ldr r3,[r7,#28]
 3152 00a8 002B     	 cmp r3,#0
 3153 00aa 00D0     	 beq .L204
2433:../Dave/Generated/FREERTOS/tasks.c ****                     {
2434:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 3154              	 .loc 1 2434 0
 3155 00ac 05E0     	 b .L205
 3156              	.L204:
2411:../Dave/Generated/FREERTOS/tasks.c ****                 {
 3157              	 .loc 1 2411 0 discriminator 2
 3158 00ae 3B6A     	 ldr r3,[r7,#32]
 3159 00b0 0133     	 adds r3,r3,#1
 3160 00b2 3B62     	 str r3,[r7,#32]
 3161              	.L201:
2411:../Dave/Generated/FREERTOS/tasks.c ****                 {
 3162              	 .loc 1 2411 0 is_stmt 0 discriminator 1
 3163 00b4 3B6A     	 ldr r3,[r7,#32]
 3164 00b6 0F2B     	 cmp r3,#15
 3165 00b8 DED9     	 bls .L206
 3166              	.L205:
2435:../Dave/Generated/FREERTOS/tasks.c ****                     }
2436:../Dave/Generated/FREERTOS/tasks.c ****                 }
2437:../Dave/Generated/FREERTOS/tasks.c **** 
2438:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxReturn != NULL )
 3167              	 .loc 1 2438 0 is_stmt 1
 3168 00ba 7B6A     	 ldr r3,[r7,#36]
 3169 00bc 002B     	 cmp r3,#0
 3170 00be 01D0     	 beq .L207
2439:../Dave/Generated/FREERTOS/tasks.c ****                 {
2440:../Dave/Generated/FREERTOS/tasks.c ****                     /* The handle has been found. */
2441:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 3171              	 .loc 1 2441 0
 3172 00c0 00BF     	 nop
 3173 00c2 03E0     	 b .L198
 3174              	.L207:
2442:../Dave/Generated/FREERTOS/tasks.c ****                 }
2443:../Dave/Generated/FREERTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 3175              	 .loc 1 2443 0
 3176 00c4 FA68     	 ldr r2,[r7,#12]
 3177 00c6 7B69     	 ldr r3,[r7,#20]
 3178 00c8 9A42     	 cmp r2,r3
 3179 00ca BAD1     	 bne .L209
 3180              	.L198:
2444:../Dave/Generated/FREERTOS/tasks.c ****         }
2445:../Dave/Generated/FREERTOS/tasks.c ****         else
2446:../Dave/Generated/FREERTOS/tasks.c ****         {
2447:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2448:../Dave/Generated/FREERTOS/tasks.c ****         }
2449:../Dave/Generated/FREERTOS/tasks.c **** 
2450:../Dave/Generated/FREERTOS/tasks.c ****         return pxReturn;
 3181              	 .loc 1 2450 0
 3182 00cc 7B6A     	 ldr r3,[r7,#36]
2451:../Dave/Generated/FREERTOS/tasks.c ****     }
 3183              	 .loc 1 2451 0
 3184 00ce 1846     	 mov r0,r3
 3185 00d0 2C37     	 adds r7,r7,#44
 3186              	.LCFI114:
 3187              	 .cfi_def_cfa_offset 4
 3188 00d2 BD46     	 mov sp,r7
 3189              	.LCFI115:
 3190              	 .cfi_def_cfa_register 13
 3191              	 
 3192 00d4 5DF8047B 	 ldr r7,[sp],#4
 3193              	.LCFI116:
 3194              	 .cfi_restore 7
 3195              	 .cfi_def_cfa_offset 0
 3196 00d8 7047     	 bx lr
 3197              	 .cfi_endproc
 3198              	.LFE160:
 3200 00da 00BF     	 .section .text.xTaskGetHandle,"ax",%progbits
 3201              	 .align 2
 3202              	 .global xTaskGetHandle
 3203              	 .thumb
 3204              	 .thumb_func
 3206              	xTaskGetHandle:
 3207              	.LFB161:
2452:../Dave/Generated/FREERTOS/tasks.c **** 
2453:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2454:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2455:../Dave/Generated/FREERTOS/tasks.c **** 
2456:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2457:../Dave/Generated/FREERTOS/tasks.c **** 
2458:../Dave/Generated/FREERTOS/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
2459:../Dave/Generated/FREERTOS/tasks.c ****     {
 3208              	 .loc 1 2459 0
 3209              	 .cfi_startproc
 3210              	 
 3211              	 
 3212 0000 80B5     	 push {r7,lr}
 3213              	.LCFI117:
 3214              	 .cfi_def_cfa_offset 8
 3215              	 .cfi_offset 7,-8
 3216              	 .cfi_offset 14,-4
 3217 0002 86B0     	 sub sp,sp,#24
 3218              	.LCFI118:
 3219              	 .cfi_def_cfa_offset 32
 3220 0004 00AF     	 add r7,sp,#0
 3221              	.LCFI119:
 3222              	 .cfi_def_cfa_register 7
 3223 0006 7860     	 str r0,[r7,#4]
2460:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
 3224              	 .loc 1 2460 0
 3225 0008 0523     	 movs r3,#5
 3226 000a 7B61     	 str r3,[r7,#20]
2461:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
2462:../Dave/Generated/FREERTOS/tasks.c **** 
2463:../Dave/Generated/FREERTOS/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2464:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 3227              	 .loc 1 2464 0
 3228 000c 7868     	 ldr r0,[r7,#4]
 3229 000e FFF7FEFF 	 bl strlen
 3230 0012 0346     	 mov r3,r0
 3231 0014 0F2B     	 cmp r3,#15
 3232 0016 09D9     	 bls .L212
 3233              	.LBB182:
 3234              	.LBB183:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3235              	 .loc 2 197 0 discriminator 1
 3236              	
 3237 0018 4FF0FC03 	 mov r3,#252
 3238 001c 83F31188 	 msr basepri,r3
 3239 0020 BFF36F8F 	 isb 
 3240 0024 BFF34F8F 	 dsb 
 3241              	
 3242              	
 3243              	 .thumb
 3244 0028 FB60     	 str r3,[r7,#12]
 3245              	.L213:
 3246              	.LBE183:
 3247              	.LBE182:
 3248              	 .loc 1 2464 0 discriminator 1
 3249 002a FEE7     	 b .L213
 3250              	.L212:
2465:../Dave/Generated/FREERTOS/tasks.c **** 
2466:../Dave/Generated/FREERTOS/tasks.c ****         vTaskSuspendAll();
 3251              	 .loc 1 2466 0
 3252 002c FFF7FEFF 	 bl vTaskSuspendAll
 3253              	.L216:
2467:../Dave/Generated/FREERTOS/tasks.c ****         {
2468:../Dave/Generated/FREERTOS/tasks.c ****             /* Search the ready lists. */
2469:../Dave/Generated/FREERTOS/tasks.c ****             do
2470:../Dave/Generated/FREERTOS/tasks.c ****             {
2471:../Dave/Generated/FREERTOS/tasks.c ****                 uxQueue--;
 3254              	 .loc 1 2471 0
 3255 0030 7B69     	 ldr r3,[r7,#20]
 3256 0032 013B     	 subs r3,r3,#1
 3257 0034 7B61     	 str r3,[r7,#20]
2472:../Dave/Generated/FREERTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
 3258              	 .loc 1 2472 0
 3259 0036 7A69     	 ldr r2,[r7,#20]
 3260 0038 1346     	 mov r3,r2
 3261 003a 9B00     	 lsls r3,r3,#2
 3262 003c 1344     	 add r3,r3,r2
 3263 003e 9B00     	 lsls r3,r3,#2
 3264 0040 1C4A     	 ldr r2,.L222
 3265 0042 1344     	 add r3,r3,r2
 3266 0044 1846     	 mov r0,r3
 3267 0046 7968     	 ldr r1,[r7,#4]
 3268 0048 FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3269 004c 3861     	 str r0,[r7,#16]
2473:../Dave/Generated/FREERTOS/tasks.c **** 
2474:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB != NULL )
 3270              	 .loc 1 2474 0
 3271 004e 3B69     	 ldr r3,[r7,#16]
 3272 0050 002B     	 cmp r3,#0
 3273 0052 00D0     	 beq .L214
2475:../Dave/Generated/FREERTOS/tasks.c ****                 {
2476:../Dave/Generated/FREERTOS/tasks.c ****                     /* Found the handle. */
2477:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 3274              	 .loc 1 2477 0
 3275 0054 02E0     	 b .L215
 3276              	.L214:
2478:../Dave/Generated/FREERTOS/tasks.c ****                 }
2479:../Dave/Generated/FREERTOS/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
 3277              	 .loc 1 2479 0
 3278 0056 7B69     	 ldr r3,[r7,#20]
 3279 0058 002B     	 cmp r3,#0
 3280 005a E9D1     	 bne .L216
 3281              	.L215:
2480:../Dave/Generated/FREERTOS/tasks.c **** 
2481:../Dave/Generated/FREERTOS/tasks.c ****             /* Search the delayed lists. */
2482:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB == NULL )
 3282              	 .loc 1 2482 0
 3283 005c 3B69     	 ldr r3,[r7,#16]
 3284 005e 002B     	 cmp r3,#0
 3285 0060 06D1     	 bne .L217
2483:../Dave/Generated/FREERTOS/tasks.c ****             {
2484:../Dave/Generated/FREERTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
 3286              	 .loc 1 2484 0
 3287 0062 154B     	 ldr r3,.L222+4
 3288 0064 1B68     	 ldr r3,[r3]
 3289 0066 1846     	 mov r0,r3
 3290 0068 7968     	 ldr r1,[r7,#4]
 3291 006a FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3292 006e 3861     	 str r0,[r7,#16]
 3293              	.L217:
2485:../Dave/Generated/FREERTOS/tasks.c ****             }
2486:../Dave/Generated/FREERTOS/tasks.c **** 
2487:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB == NULL )
 3294              	 .loc 1 2487 0
 3295 0070 3B69     	 ldr r3,[r7,#16]
 3296 0072 002B     	 cmp r3,#0
 3297 0074 06D1     	 bne .L218
2488:../Dave/Generated/FREERTOS/tasks.c ****             {
2489:../Dave/Generated/FREERTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
 3298              	 .loc 1 2489 0
 3299 0076 114B     	 ldr r3,.L222+8
 3300 0078 1B68     	 ldr r3,[r3]
 3301 007a 1846     	 mov r0,r3
 3302 007c 7968     	 ldr r1,[r7,#4]
 3303 007e FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3304 0082 3861     	 str r0,[r7,#16]
 3305              	.L218:
2490:../Dave/Generated/FREERTOS/tasks.c ****             }
2491:../Dave/Generated/FREERTOS/tasks.c **** 
2492:../Dave/Generated/FREERTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2493:../Dave/Generated/FREERTOS/tasks.c ****                 {
2494:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB == NULL )
 3306              	 .loc 1 2494 0
 3307 0084 3B69     	 ldr r3,[r7,#16]
 3308 0086 002B     	 cmp r3,#0
 3309 0088 04D1     	 bne .L219
2495:../Dave/Generated/FREERTOS/tasks.c ****                     {
2496:../Dave/Generated/FREERTOS/tasks.c ****                         /* Search the suspended list. */
2497:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuer
 3310              	 .loc 1 2497 0
 3311 008a 0D48     	 ldr r0,.L222+12
 3312 008c 7968     	 ldr r1,[r7,#4]
 3313 008e FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3314 0092 3861     	 str r0,[r7,#16]
 3315              	.L219:
2498:../Dave/Generated/FREERTOS/tasks.c ****                     }
2499:../Dave/Generated/FREERTOS/tasks.c ****                 }
2500:../Dave/Generated/FREERTOS/tasks.c ****             #endif
2501:../Dave/Generated/FREERTOS/tasks.c **** 
2502:../Dave/Generated/FREERTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
2503:../Dave/Generated/FREERTOS/tasks.c ****                 {
2504:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB == NULL )
 3316              	 .loc 1 2504 0
 3317 0094 3B69     	 ldr r3,[r7,#16]
 3318 0096 002B     	 cmp r3,#0
 3319 0098 04D1     	 bne .L220
2505:../Dave/Generated/FREERTOS/tasks.c ****                     {
2506:../Dave/Generated/FREERTOS/tasks.c ****                         /* Search the deleted list. */
2507:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcName
 3320              	 .loc 1 2507 0
 3321 009a 0A48     	 ldr r0,.L222+16
 3322 009c 7968     	 ldr r1,[r7,#4]
 3323 009e FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3324 00a2 3861     	 str r0,[r7,#16]
 3325              	.L220:
2508:../Dave/Generated/FREERTOS/tasks.c ****                     }
2509:../Dave/Generated/FREERTOS/tasks.c ****                 }
2510:../Dave/Generated/FREERTOS/tasks.c ****             #endif
2511:../Dave/Generated/FREERTOS/tasks.c ****         }
2512:../Dave/Generated/FREERTOS/tasks.c ****         ( void ) xTaskResumeAll();
 3326              	 .loc 1 2512 0
 3327 00a4 FFF7FEFF 	 bl xTaskResumeAll
2513:../Dave/Generated/FREERTOS/tasks.c **** 
2514:../Dave/Generated/FREERTOS/tasks.c ****         return pxTCB;
 3328              	 .loc 1 2514 0
 3329 00a8 3B69     	 ldr r3,[r7,#16]
2515:../Dave/Generated/FREERTOS/tasks.c ****     }
 3330              	 .loc 1 2515 0
 3331 00aa 1846     	 mov r0,r3
 3332 00ac 1837     	 adds r7,r7,#24
 3333              	.LCFI120:
 3334              	 .cfi_def_cfa_offset 8
 3335 00ae BD46     	 mov sp,r7
 3336              	.LCFI121:
 3337              	 .cfi_def_cfa_register 13
 3338              	 
 3339 00b0 80BD     	 pop {r7,pc}
 3340              	.L223:
 3341 00b2 00BF     	 .align 2
 3342              	.L222:
 3343 00b4 00000000 	 .word pxReadyTasksLists
 3344 00b8 00000000 	 .word pxDelayedTaskList
 3345 00bc 00000000 	 .word pxOverflowDelayedTaskList
 3346 00c0 00000000 	 .word xSuspendedTaskList
 3347 00c4 00000000 	 .word xTasksWaitingTermination
 3348              	 .cfi_endproc
 3349              	.LFE161:
 3351              	 .section .text.uxTaskGetSystemState,"ax",%progbits
 3352              	 .align 2
 3353              	 .global uxTaskGetSystemState
 3354              	 .thumb
 3355              	 .thumb_func
 3357              	uxTaskGetSystemState:
 3358              	.LFB162:
2516:../Dave/Generated/FREERTOS/tasks.c **** 
2517:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2518:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2519:../Dave/Generated/FREERTOS/tasks.c **** 
2520:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2521:../Dave/Generated/FREERTOS/tasks.c **** 
2522:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2523:../Dave/Generated/FREERTOS/tasks.c ****                                       const UBaseType_t uxArraySize,
2524:../Dave/Generated/FREERTOS/tasks.c ****                                       uint32_t * const pulTotalRunTime )
2525:../Dave/Generated/FREERTOS/tasks.c ****     {
 3359              	 .loc 1 2525 0
 3360              	 .cfi_startproc
 3361              	 
 3362              	 
 3363 0000 80B5     	 push {r7,lr}
 3364              	.LCFI122:
 3365              	 .cfi_def_cfa_offset 8
 3366              	 .cfi_offset 7,-8
 3367              	 .cfi_offset 14,-4
 3368 0002 86B0     	 sub sp,sp,#24
 3369              	.LCFI123:
 3370              	 .cfi_def_cfa_offset 32
 3371 0004 00AF     	 add r7,sp,#0
 3372              	.LCFI124:
 3373              	 .cfi_def_cfa_register 7
 3374 0006 F860     	 str r0,[r7,#12]
 3375 0008 B960     	 str r1,[r7,#8]
 3376 000a 7A60     	 str r2,[r7,#4]
2526:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3377              	 .loc 1 2526 0
 3378 000c 0023     	 movs r3,#0
 3379 000e 7B61     	 str r3,[r7,#20]
 3380 0010 0523     	 movs r3,#5
 3381 0012 3B61     	 str r3,[r7,#16]
2527:../Dave/Generated/FREERTOS/tasks.c **** 
2528:../Dave/Generated/FREERTOS/tasks.c ****         vTaskSuspendAll();
 3382              	 .loc 1 2528 0
 3383 0014 FFF7FEFF 	 bl vTaskSuspendAll
2529:../Dave/Generated/FREERTOS/tasks.c ****         {
2530:../Dave/Generated/FREERTOS/tasks.c ****             /* Is there a space in the array for each task in the system? */
2531:../Dave/Generated/FREERTOS/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
 3384              	 .loc 1 2531 0
 3385 0018 3B4B     	 ldr r3,.L229
 3386 001a 1B68     	 ldr r3,[r3]
 3387 001c BA68     	 ldr r2,[r7,#8]
 3388 001e 9A42     	 cmp r2,r3
 3389 0020 6BD3     	 bcc .L225
 3390              	.L226:
2532:../Dave/Generated/FREERTOS/tasks.c ****             {
2533:../Dave/Generated/FREERTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2534:../Dave/Generated/FREERTOS/tasks.c ****                  * task in the Ready state. */
2535:../Dave/Generated/FREERTOS/tasks.c ****                 do
2536:../Dave/Generated/FREERTOS/tasks.c ****                 {
2537:../Dave/Generated/FREERTOS/tasks.c ****                     uxQueue--;
 3391              	 .loc 1 2537 0 discriminator 1
 3392 0022 3B69     	 ldr r3,[r7,#16]
 3393 0024 013B     	 subs r3,r3,#1
 3394 0026 3B61     	 str r3,[r7,#16]
2538:../Dave/Generated/FREERTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
 3395              	 .loc 1 2538 0 discriminator 1
 3396 0028 7A69     	 ldr r2,[r7,#20]
 3397 002a 1346     	 mov r3,r2
 3398 002c DB00     	 lsls r3,r3,#3
 3399 002e 1344     	 add r3,r3,r2
 3400 0030 9B00     	 lsls r3,r3,#2
 3401 0032 1A46     	 mov r2,r3
 3402 0034 FB68     	 ldr r3,[r7,#12]
 3403 0036 9918     	 adds r1,r3,r2
 3404 0038 3A69     	 ldr r2,[r7,#16]
 3405 003a 1346     	 mov r3,r2
 3406 003c 9B00     	 lsls r3,r3,#2
 3407 003e 1344     	 add r3,r3,r2
 3408 0040 9B00     	 lsls r3,r3,#2
 3409 0042 324A     	 ldr r2,.L229+4
 3410 0044 1344     	 add r3,r3,r2
 3411 0046 0846     	 mov r0,r1
 3412 0048 1946     	 mov r1,r3
 3413 004a 0122     	 movs r2,#1
 3414 004c FFF7FEFF 	 bl prvListTasksWithinSingleList
 3415 0050 0246     	 mov r2,r0
 3416 0052 7B69     	 ldr r3,[r7,#20]
 3417 0054 1344     	 add r3,r3,r2
 3418 0056 7B61     	 str r3,[r7,#20]
2539:../Dave/Generated/FREERTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 3419              	 .loc 1 2539 0 discriminator 1
 3420 0058 3B69     	 ldr r3,[r7,#16]
 3421 005a 002B     	 cmp r3,#0
 3422 005c E1D1     	 bne .L226
2540:../Dave/Generated/FREERTOS/tasks.c **** 
2541:../Dave/Generated/FREERTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2542:../Dave/Generated/FREERTOS/tasks.c ****                  * task in the Blocked state. */
2543:../Dave/Generated/FREERTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 3423              	 .loc 1 2543 0
 3424 005e 7A69     	 ldr r2,[r7,#20]
 3425 0060 1346     	 mov r3,r2
 3426 0062 DB00     	 lsls r3,r3,#3
 3427 0064 1344     	 add r3,r3,r2
 3428 0066 9B00     	 lsls r3,r3,#2
 3429 0068 1A46     	 mov r2,r3
 3430 006a FB68     	 ldr r3,[r7,#12]
 3431 006c 1A44     	 add r2,r2,r3
 3432 006e 284B     	 ldr r3,.L229+8
 3433 0070 1B68     	 ldr r3,[r3]
 3434 0072 1046     	 mov r0,r2
 3435 0074 1946     	 mov r1,r3
 3436 0076 0222     	 movs r2,#2
 3437 0078 FFF7FEFF 	 bl prvListTasksWithinSingleList
 3438 007c 0246     	 mov r2,r0
 3439 007e 7B69     	 ldr r3,[r7,#20]
 3440 0080 1344     	 add r3,r3,r2
 3441 0082 7B61     	 str r3,[r7,#20]
2544:../Dave/Generated/FREERTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 3442              	 .loc 1 2544 0
 3443 0084 7A69     	 ldr r2,[r7,#20]
 3444 0086 1346     	 mov r3,r2
 3445 0088 DB00     	 lsls r3,r3,#3
 3446 008a 1344     	 add r3,r3,r2
 3447 008c 9B00     	 lsls r3,r3,#2
 3448 008e 1A46     	 mov r2,r3
 3449 0090 FB68     	 ldr r3,[r7,#12]
 3450 0092 1A44     	 add r2,r2,r3
 3451 0094 1F4B     	 ldr r3,.L229+12
 3452 0096 1B68     	 ldr r3,[r3]
 3453 0098 1046     	 mov r0,r2
 3454 009a 1946     	 mov r1,r3
 3455 009c 0222     	 movs r2,#2
 3456 009e FFF7FEFF 	 bl prvListTasksWithinSingleList
 3457 00a2 0246     	 mov r2,r0
 3458 00a4 7B69     	 ldr r3,[r7,#20]
 3459 00a6 1344     	 add r3,r3,r2
 3460 00a8 7B61     	 str r3,[r7,#20]
2545:../Dave/Generated/FREERTOS/tasks.c **** 
2546:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
2547:../Dave/Generated/FREERTOS/tasks.c ****                     {
2548:../Dave/Generated/FREERTOS/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2549:../Dave/Generated/FREERTOS/tasks.c ****                          * each task that has been deleted but not yet cleaned up. */
2550:../Dave/Generated/FREERTOS/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
 3461              	 .loc 1 2550 0
 3462 00aa 7A69     	 ldr r2,[r7,#20]
 3463 00ac 1346     	 mov r3,r2
 3464 00ae DB00     	 lsls r3,r3,#3
 3465 00b0 1344     	 add r3,r3,r2
 3466 00b2 9B00     	 lsls r3,r3,#2
 3467 00b4 1A46     	 mov r2,r3
 3468 00b6 FB68     	 ldr r3,[r7,#12]
 3469 00b8 1344     	 add r3,r3,r2
 3470 00ba 1846     	 mov r0,r3
 3471 00bc 1649     	 ldr r1,.L229+16
 3472 00be 0422     	 movs r2,#4
 3473 00c0 FFF7FEFF 	 bl prvListTasksWithinSingleList
 3474 00c4 0246     	 mov r2,r0
 3475 00c6 7B69     	 ldr r3,[r7,#20]
 3476 00c8 1344     	 add r3,r3,r2
 3477 00ca 7B61     	 str r3,[r7,#20]
2551:../Dave/Generated/FREERTOS/tasks.c ****                     }
2552:../Dave/Generated/FREERTOS/tasks.c ****                 #endif
2553:../Dave/Generated/FREERTOS/tasks.c **** 
2554:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2555:../Dave/Generated/FREERTOS/tasks.c ****                     {
2556:../Dave/Generated/FREERTOS/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2557:../Dave/Generated/FREERTOS/tasks.c ****                          * each task in the Suspended state. */
2558:../Dave/Generated/FREERTOS/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
 3478              	 .loc 1 2558 0
 3479 00cc 7A69     	 ldr r2,[r7,#20]
 3480 00ce 1346     	 mov r3,r2
 3481 00d0 DB00     	 lsls r3,r3,#3
 3482 00d2 1344     	 add r3,r3,r2
 3483 00d4 9B00     	 lsls r3,r3,#2
 3484 00d6 1A46     	 mov r2,r3
 3485 00d8 FB68     	 ldr r3,[r7,#12]
 3486 00da 1344     	 add r3,r3,r2
 3487 00dc 1846     	 mov r0,r3
 3488 00de 0F49     	 ldr r1,.L229+20
 3489 00e0 0322     	 movs r2,#3
 3490 00e2 FFF7FEFF 	 bl prvListTasksWithinSingleList
 3491 00e6 0246     	 mov r2,r0
 3492 00e8 7B69     	 ldr r3,[r7,#20]
 3493 00ea 1344     	 add r3,r3,r2
 3494 00ec 7B61     	 str r3,[r7,#20]
2559:../Dave/Generated/FREERTOS/tasks.c ****                     }
2560:../Dave/Generated/FREERTOS/tasks.c ****                 #endif
2561:../Dave/Generated/FREERTOS/tasks.c **** 
2562:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
2563:../Dave/Generated/FREERTOS/tasks.c ****                     {
2564:../Dave/Generated/FREERTOS/tasks.c ****                         if( pulTotalRunTime != NULL )
2565:../Dave/Generated/FREERTOS/tasks.c ****                         {
2566:../Dave/Generated/FREERTOS/tasks.c ****                             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2567:../Dave/Generated/FREERTOS/tasks.c ****                                 portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2568:../Dave/Generated/FREERTOS/tasks.c ****                             #else
2569:../Dave/Generated/FREERTOS/tasks.c ****                                 *pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2570:../Dave/Generated/FREERTOS/tasks.c ****                             #endif
2571:../Dave/Generated/FREERTOS/tasks.c ****                         }
2572:../Dave/Generated/FREERTOS/tasks.c ****                     }
2573:../Dave/Generated/FREERTOS/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2574:../Dave/Generated/FREERTOS/tasks.c ****                     {
2575:../Dave/Generated/FREERTOS/tasks.c ****                         if( pulTotalRunTime != NULL )
 3495              	 .loc 1 2575 0
 3496 00ee 7B68     	 ldr r3,[r7,#4]
 3497 00f0 002B     	 cmp r3,#0
 3498 00f2 02D0     	 beq .L225
2576:../Dave/Generated/FREERTOS/tasks.c ****                         {
2577:../Dave/Generated/FREERTOS/tasks.c ****                             *pulTotalRunTime = 0;
 3499              	 .loc 1 2577 0
 3500 00f4 7B68     	 ldr r3,[r7,#4]
 3501 00f6 0022     	 movs r2,#0
 3502 00f8 1A60     	 str r2,[r3]
 3503              	.L225:
2578:../Dave/Generated/FREERTOS/tasks.c ****                         }
2579:../Dave/Generated/FREERTOS/tasks.c ****                     }
2580:../Dave/Generated/FREERTOS/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2581:../Dave/Generated/FREERTOS/tasks.c ****             }
2582:../Dave/Generated/FREERTOS/tasks.c ****             else
2583:../Dave/Generated/FREERTOS/tasks.c ****             {
2584:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2585:../Dave/Generated/FREERTOS/tasks.c ****             }
2586:../Dave/Generated/FREERTOS/tasks.c ****         }
2587:../Dave/Generated/FREERTOS/tasks.c ****         ( void ) xTaskResumeAll();
 3504              	 .loc 1 2587 0
 3505 00fa FFF7FEFF 	 bl xTaskResumeAll
2588:../Dave/Generated/FREERTOS/tasks.c **** 
2589:../Dave/Generated/FREERTOS/tasks.c ****         return uxTask;
 3506              	 .loc 1 2589 0
 3507 00fe 7B69     	 ldr r3,[r7,#20]
2590:../Dave/Generated/FREERTOS/tasks.c ****     }
 3508              	 .loc 1 2590 0
 3509 0100 1846     	 mov r0,r3
 3510 0102 1837     	 adds r7,r7,#24
 3511              	.LCFI125:
 3512              	 .cfi_def_cfa_offset 8
 3513 0104 BD46     	 mov sp,r7
 3514              	.LCFI126:
 3515              	 .cfi_def_cfa_register 13
 3516              	 
 3517 0106 80BD     	 pop {r7,pc}
 3518              	.L230:
 3519              	 .align 2
 3520              	.L229:
 3521 0108 00000000 	 .word uxCurrentNumberOfTasks
 3522 010c 00000000 	 .word pxReadyTasksLists
 3523 0110 00000000 	 .word pxDelayedTaskList
 3524 0114 00000000 	 .word pxOverflowDelayedTaskList
 3525 0118 00000000 	 .word xTasksWaitingTermination
 3526 011c 00000000 	 .word xSuspendedTaskList
 3527              	 .cfi_endproc
 3528              	.LFE162:
 3530              	 .section .text.xTaskGetIdleTaskHandle,"ax",%progbits
 3531              	 .align 2
 3532              	 .global xTaskGetIdleTaskHandle
 3533              	 .thumb
 3534              	 .thumb_func
 3536              	xTaskGetIdleTaskHandle:
 3537              	.LFB163:
2591:../Dave/Generated/FREERTOS/tasks.c **** 
2592:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2593:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2594:../Dave/Generated/FREERTOS/tasks.c **** 
2595:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2596:../Dave/Generated/FREERTOS/tasks.c **** 
2597:../Dave/Generated/FREERTOS/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2598:../Dave/Generated/FREERTOS/tasks.c ****     {
 3538              	 .loc 1 2598 0
 3539              	 .cfi_startproc
 3540              	 
 3541              	 
 3542              	 
 3543 0000 80B4     	 push {r7}
 3544              	.LCFI127:
 3545              	 .cfi_def_cfa_offset 4
 3546              	 .cfi_offset 7,-4
 3547 0002 83B0     	 sub sp,sp,#12
 3548              	.LCFI128:
 3549              	 .cfi_def_cfa_offset 16
 3550 0004 00AF     	 add r7,sp,#0
 3551              	.LCFI129:
 3552              	 .cfi_def_cfa_register 7
2599:../Dave/Generated/FREERTOS/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2600:../Dave/Generated/FREERTOS/tasks.c ****          * started, then xIdleTaskHandle will be NULL. */
2601:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( ( xIdleTaskHandle != NULL ) );
 3553              	 .loc 1 2601 0
 3554 0006 0B4B     	 ldr r3,.L235
 3555 0008 1B68     	 ldr r3,[r3]
 3556 000a 002B     	 cmp r3,#0
 3557 000c 09D1     	 bne .L232
 3558              	.LBB184:
 3559              	.LBB185:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3560              	 .loc 2 197 0 discriminator 1
 3561              	
 3562 000e 4FF0FC03 	 mov r3,#252
 3563 0012 83F31188 	 msr basepri,r3
 3564 0016 BFF36F8F 	 isb 
 3565 001a BFF34F8F 	 dsb 
 3566              	
 3567              	
 3568              	 .thumb
 3569 001e 7B60     	 str r3,[r7,#4]
 3570              	.L233:
 3571              	.LBE185:
 3572              	.LBE184:
 3573              	 .loc 1 2601 0 discriminator 1
 3574 0020 FEE7     	 b .L233
 3575              	.L232:
2602:../Dave/Generated/FREERTOS/tasks.c ****         return xIdleTaskHandle;
 3576              	 .loc 1 2602 0
 3577 0022 044B     	 ldr r3,.L235
 3578 0024 1B68     	 ldr r3,[r3]
2603:../Dave/Generated/FREERTOS/tasks.c ****     }
 3579              	 .loc 1 2603 0
 3580 0026 1846     	 mov r0,r3
 3581 0028 0C37     	 adds r7,r7,#12
 3582              	.LCFI130:
 3583              	 .cfi_def_cfa_offset 4
 3584 002a BD46     	 mov sp,r7
 3585              	.LCFI131:
 3586              	 .cfi_def_cfa_register 13
 3587              	 
 3588 002c 5DF8047B 	 ldr r7,[sp],#4
 3589              	.LCFI132:
 3590              	 .cfi_restore 7
 3591              	 .cfi_def_cfa_offset 0
 3592 0030 7047     	 bx lr
 3593              	.L236:
 3594 0032 00BF     	 .align 2
 3595              	.L235:
 3596 0034 00000000 	 .word xIdleTaskHandle
 3597              	 .cfi_endproc
 3598              	.LFE163:
 3600              	 .section .text.xTaskCatchUpTicks,"ax",%progbits
 3601              	 .align 2
 3602              	 .global xTaskCatchUpTicks
 3603              	 .thumb
 3604              	 .thumb_func
 3606              	xTaskCatchUpTicks:
 3607              	.LFB164:
2604:../Dave/Generated/FREERTOS/tasks.c **** 
2605:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2606:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2607:../Dave/Generated/FREERTOS/tasks.c **** 
2608:../Dave/Generated/FREERTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2609:../Dave/Generated/FREERTOS/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
2610:../Dave/Generated/FREERTOS/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2611:../Dave/Generated/FREERTOS/tasks.c ****  * 1. */
2612:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2613:../Dave/Generated/FREERTOS/tasks.c **** 
2614:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskStepTick( const TickType_t xTicksToJump )
2615:../Dave/Generated/FREERTOS/tasks.c ****     {
2616:../Dave/Generated/FREERTOS/tasks.c ****         /* Correct the tick count value after a period during which the tick
2617:../Dave/Generated/FREERTOS/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
2618:../Dave/Generated/FREERTOS/tasks.c ****          * each stepped tick. */
2619:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2620:../Dave/Generated/FREERTOS/tasks.c ****         xTickCount += xTicksToJump;
2621:../Dave/Generated/FREERTOS/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2622:../Dave/Generated/FREERTOS/tasks.c ****     }
2623:../Dave/Generated/FREERTOS/tasks.c **** 
2624:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2625:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2626:../Dave/Generated/FREERTOS/tasks.c **** 
2627:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2628:../Dave/Generated/FREERTOS/tasks.c **** {
 3608              	 .loc 1 2628 0
 3609              	 .cfi_startproc
 3610              	 
 3611              	 
 3612 0000 80B5     	 push {r7,lr}
 3613              	.LCFI133:
 3614              	 .cfi_def_cfa_offset 8
 3615              	 .cfi_offset 7,-8
 3616              	 .cfi_offset 14,-4
 3617 0002 84B0     	 sub sp,sp,#16
 3618              	.LCFI134:
 3619              	 .cfi_def_cfa_offset 24
 3620 0004 00AF     	 add r7,sp,#0
 3621              	.LCFI135:
 3622              	 .cfi_def_cfa_register 7
 3623 0006 7860     	 str r0,[r7,#4]
2629:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xYieldOccurred;
2630:../Dave/Generated/FREERTOS/tasks.c **** 
2631:../Dave/Generated/FREERTOS/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
2632:../Dave/Generated/FREERTOS/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2633:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( uxSchedulerSuspended == 0 );
 3624              	 .loc 1 2633 0
 3625 0008 0E4B     	 ldr r3,.L241
 3626 000a 1B68     	 ldr r3,[r3]
 3627 000c 002B     	 cmp r3,#0
 3628 000e 09D0     	 beq .L238
 3629              	.LBB186:
 3630              	.LBB187:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3631              	 .loc 2 197 0 discriminator 1
 3632              	
 3633 0010 4FF0FC03 	 mov r3,#252
 3634 0014 83F31188 	 msr basepri,r3
 3635 0018 BFF36F8F 	 isb 
 3636 001c BFF34F8F 	 dsb 
 3637              	
 3638              	
 3639              	 .thumb
 3640 0020 BB60     	 str r3,[r7,#8]
 3641              	.L239:
 3642              	.LBE187:
 3643              	.LBE186:
 3644              	 .loc 1 2633 0 discriminator 1
 3645 0022 FEE7     	 b .L239
 3646              	.L238:
2634:../Dave/Generated/FREERTOS/tasks.c **** 
2635:../Dave/Generated/FREERTOS/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2636:../Dave/Generated/FREERTOS/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2637:../Dave/Generated/FREERTOS/tasks.c ****     vTaskSuspendAll();
 3647              	 .loc 1 2637 0
 3648 0024 FFF7FEFF 	 bl vTaskSuspendAll
2638:../Dave/Generated/FREERTOS/tasks.c ****     xPendedTicks += xTicksToCatchUp;
 3649              	 .loc 1 2638 0
 3650 0028 074B     	 ldr r3,.L241+4
 3651 002a 1A68     	 ldr r2,[r3]
 3652 002c 7B68     	 ldr r3,[r7,#4]
 3653 002e 1344     	 add r3,r3,r2
 3654 0030 054A     	 ldr r2,.L241+4
 3655 0032 1360     	 str r3,[r2]
2639:../Dave/Generated/FREERTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 3656              	 .loc 1 2639 0
 3657 0034 FFF7FEFF 	 bl xTaskResumeAll
 3658 0038 F860     	 str r0,[r7,#12]
2640:../Dave/Generated/FREERTOS/tasks.c **** 
2641:../Dave/Generated/FREERTOS/tasks.c ****     return xYieldOccurred;
 3659              	 .loc 1 2641 0
 3660 003a FB68     	 ldr r3,[r7,#12]
2642:../Dave/Generated/FREERTOS/tasks.c **** }
 3661              	 .loc 1 2642 0
 3662 003c 1846     	 mov r0,r3
 3663 003e 1037     	 adds r7,r7,#16
 3664              	.LCFI136:
 3665              	 .cfi_def_cfa_offset 8
 3666 0040 BD46     	 mov sp,r7
 3667              	.LCFI137:
 3668              	 .cfi_def_cfa_register 13
 3669              	 
 3670 0042 80BD     	 pop {r7,pc}
 3671              	.L242:
 3672              	 .align 2
 3673              	.L241:
 3674 0044 00000000 	 .word uxSchedulerSuspended
 3675 0048 00000000 	 .word xPendedTicks
 3676              	 .cfi_endproc
 3677              	.LFE164:
 3679              	 .section .text.xTaskAbortDelay,"ax",%progbits
 3680              	 .align 2
 3681              	 .global xTaskAbortDelay
 3682              	 .thumb
 3683              	 .thumb_func
 3685              	xTaskAbortDelay:
 3686              	.LFB165:
2643:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2644:../Dave/Generated/FREERTOS/tasks.c **** 
2645:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2646:../Dave/Generated/FREERTOS/tasks.c **** 
2647:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2648:../Dave/Generated/FREERTOS/tasks.c ****     {
 3687              	 .loc 1 2648 0
 3688              	 .cfi_startproc
 3689              	 
 3690              	 
 3691 0000 80B5     	 push {r7,lr}
 3692              	.LCFI138:
 3693              	 .cfi_def_cfa_offset 8
 3694              	 .cfi_offset 7,-8
 3695              	 .cfi_offset 14,-4
 3696 0002 86B0     	 sub sp,sp,#24
 3697              	.LCFI139:
 3698              	 .cfi_def_cfa_offset 32
 3699 0004 00AF     	 add r7,sp,#0
 3700              	.LCFI140:
 3701              	 .cfi_def_cfa_register 7
 3702 0006 7860     	 str r0,[r7,#4]
2649:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB = xTask;
 3703              	 .loc 1 2649 0
 3704 0008 7B68     	 ldr r3,[r7,#4]
 3705 000a 3B61     	 str r3,[r7,#16]
2650:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
2651:../Dave/Generated/FREERTOS/tasks.c **** 
2652:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTCB );
 3706              	 .loc 1 2652 0
 3707 000c 3B69     	 ldr r3,[r7,#16]
 3708 000e 002B     	 cmp r3,#0
 3709 0010 09D1     	 bne .L244
 3710              	.LBB188:
 3711              	.LBB189:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3712              	 .loc 2 197 0 discriminator 1
 3713              	
 3714 0012 4FF0FC03 	 mov r3,#252
 3715 0016 83F31188 	 msr basepri,r3
 3716 001a BFF36F8F 	 isb 
 3717 001e BFF34F8F 	 dsb 
 3718              	
 3719              	
 3720              	 .thumb
 3721 0022 FB60     	 str r3,[r7,#12]
 3722              	.L245:
 3723              	.LBE189:
 3724              	.LBE188:
 3725              	 .loc 1 2652 0 discriminator 1
 3726 0024 FEE7     	 b .L245
 3727              	.L244:
2653:../Dave/Generated/FREERTOS/tasks.c **** 
2654:../Dave/Generated/FREERTOS/tasks.c ****         vTaskSuspendAll();
 3728              	 .loc 1 2654 0
 3729 0026 FFF7FEFF 	 bl vTaskSuspendAll
2655:../Dave/Generated/FREERTOS/tasks.c ****         {
2656:../Dave/Generated/FREERTOS/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
2657:../Dave/Generated/FREERTOS/tasks.c ****              * it is actually in the Blocked state. */
2658:../Dave/Generated/FREERTOS/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
 3730              	 .loc 1 2658 0
 3731 002a 7868     	 ldr r0,[r7,#4]
 3732 002c FFF7FEFF 	 bl eTaskGetState
 3733 0030 0346     	 mov r3,r0
 3734 0032 022B     	 cmp r3,#2
 3735 0034 3BD1     	 bne .L246
2659:../Dave/Generated/FREERTOS/tasks.c ****             {
2660:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdPASS;
 3736              	 .loc 1 2660 0
 3737 0036 0123     	 movs r3,#1
 3738 0038 7B61     	 str r3,[r7,#20]
2661:../Dave/Generated/FREERTOS/tasks.c **** 
2662:../Dave/Generated/FREERTOS/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
2663:../Dave/Generated/FREERTOS/tasks.c ****                  * interrupt won't touch the xStateListItem because the
2664:../Dave/Generated/FREERTOS/tasks.c ****                  * scheduler is suspended. */
2665:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3739              	 .loc 1 2665 0
 3740 003a 3B69     	 ldr r3,[r7,#16]
 3741 003c 0433     	 adds r3,r3,#4
 3742 003e 1846     	 mov r0,r3
 3743 0040 FFF7FEFF 	 bl uxListRemove
2666:../Dave/Generated/FREERTOS/tasks.c **** 
2667:../Dave/Generated/FREERTOS/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
2668:../Dave/Generated/FREERTOS/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
2669:../Dave/Generated/FREERTOS/tasks.c ****                  * even though the scheduler is suspended, so a critical section
2670:../Dave/Generated/FREERTOS/tasks.c ****                  * is used. */
2671:../Dave/Generated/FREERTOS/tasks.c ****                 taskENTER_CRITICAL();
 3744              	 .loc 1 2671 0
 3745 0044 FFF7FEFF 	 bl vPortEnterCritical
2672:../Dave/Generated/FREERTOS/tasks.c ****                 {
2673:../Dave/Generated/FREERTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3746              	 .loc 1 2673 0
 3747 0048 3B69     	 ldr r3,[r7,#16]
 3748 004a 9B6A     	 ldr r3,[r3,#40]
 3749 004c 002B     	 cmp r3,#0
 3750 004e 08D0     	 beq .L247
2674:../Dave/Generated/FREERTOS/tasks.c ****                     {
2675:../Dave/Generated/FREERTOS/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3751              	 .loc 1 2675 0
 3752 0050 3B69     	 ldr r3,[r7,#16]
 3753 0052 1833     	 adds r3,r3,#24
 3754 0054 1846     	 mov r0,r3
 3755 0056 FFF7FEFF 	 bl uxListRemove
2676:../Dave/Generated/FREERTOS/tasks.c **** 
2677:../Dave/Generated/FREERTOS/tasks.c ****                         /* This lets the task know it was forcibly removed from the
2678:../Dave/Generated/FREERTOS/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
2679:../Dave/Generated/FREERTOS/tasks.c ****                          * then block again. */
2680:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB->ucDelayAborted = pdTRUE;
 3756              	 .loc 1 2680 0
 3757 005a 3B69     	 ldr r3,[r7,#16]
 3758 005c 0122     	 movs r2,#1
 3759 005e 83F86D20 	 strb r2,[r3,#109]
 3760              	.L247:
2681:../Dave/Generated/FREERTOS/tasks.c ****                     }
2682:../Dave/Generated/FREERTOS/tasks.c ****                     else
2683:../Dave/Generated/FREERTOS/tasks.c ****                     {
2684:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2685:../Dave/Generated/FREERTOS/tasks.c ****                     }
2686:../Dave/Generated/FREERTOS/tasks.c ****                 }
2687:../Dave/Generated/FREERTOS/tasks.c ****                 taskEXIT_CRITICAL();
 3761              	 .loc 1 2687 0
 3762 0062 FFF7FEFF 	 bl vPortExitCritical
2688:../Dave/Generated/FREERTOS/tasks.c **** 
2689:../Dave/Generated/FREERTOS/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
2690:../Dave/Generated/FREERTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 3763              	 .loc 1 2690 0
 3764 0066 3B69     	 ldr r3,[r7,#16]
 3765 0068 DB6A     	 ldr r3,[r3,#44]
 3766 006a 1A46     	 mov r2,r3
 3767 006c 0123     	 movs r3,#1
 3768 006e 03FA02F2 	 lsl r2,r3,r2
 3769 0072 134B     	 ldr r3,.L250
 3770 0074 1B68     	 ldr r3,[r3]
 3771 0076 1343     	 orrs r3,r3,r2
 3772 0078 114A     	 ldr r2,.L250
 3773 007a 1360     	 str r3,[r2]
 3774 007c 3B69     	 ldr r3,[r7,#16]
 3775 007e DA6A     	 ldr r2,[r3,#44]
 3776 0080 1346     	 mov r3,r2
 3777 0082 9B00     	 lsls r3,r3,#2
 3778 0084 1344     	 add r3,r3,r2
 3779 0086 9B00     	 lsls r3,r3,#2
 3780 0088 0E4A     	 ldr r2,.L250+4
 3781 008a 1A44     	 add r2,r2,r3
 3782 008c 3B69     	 ldr r3,[r7,#16]
 3783 008e 0433     	 adds r3,r3,#4
 3784 0090 1046     	 mov r0,r2
 3785 0092 1946     	 mov r1,r3
 3786 0094 FFF7FEFF 	 bl vListInsertEnd
2691:../Dave/Generated/FREERTOS/tasks.c **** 
2692:../Dave/Generated/FREERTOS/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
2693:../Dave/Generated/FREERTOS/tasks.c ****                  * switch if preemption is turned off. */
2694:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
2695:../Dave/Generated/FREERTOS/tasks.c ****                     {
2696:../Dave/Generated/FREERTOS/tasks.c ****                         /* Preemption is on, but a context switch should only be
2697:../Dave/Generated/FREERTOS/tasks.c ****                          *  performed if the unblocked task has a priority that is
2698:../Dave/Generated/FREERTOS/tasks.c ****                          *  equal to or higher than the currently executing task. */
2699:../Dave/Generated/FREERTOS/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 3787              	 .loc 1 2699 0
 3788 0098 3B69     	 ldr r3,[r7,#16]
 3789 009a DA6A     	 ldr r2,[r3,#44]
 3790 009c 0A4B     	 ldr r3,.L250+8
 3791 009e 1B68     	 ldr r3,[r3]
 3792 00a0 DB6A     	 ldr r3,[r3,#44]
 3793 00a2 9A42     	 cmp r2,r3
 3794 00a4 05D9     	 bls .L248
2700:../Dave/Generated/FREERTOS/tasks.c ****                         {
2701:../Dave/Generated/FREERTOS/tasks.c ****                             /* Pend the yield to be performed when the scheduler
2702:../Dave/Generated/FREERTOS/tasks.c ****                              * is unsuspended. */
2703:../Dave/Generated/FREERTOS/tasks.c ****                             xYieldPending = pdTRUE;
 3795              	 .loc 1 2703 0
 3796 00a6 094B     	 ldr r3,.L250+12
 3797 00a8 0122     	 movs r2,#1
 3798 00aa 1A60     	 str r2,[r3]
 3799 00ac 01E0     	 b .L248
 3800              	.L246:
2704:../Dave/Generated/FREERTOS/tasks.c ****                         }
2705:../Dave/Generated/FREERTOS/tasks.c ****                         else
2706:../Dave/Generated/FREERTOS/tasks.c ****                         {
2707:../Dave/Generated/FREERTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
2708:../Dave/Generated/FREERTOS/tasks.c ****                         }
2709:../Dave/Generated/FREERTOS/tasks.c ****                     }
2710:../Dave/Generated/FREERTOS/tasks.c ****                 #endif /* configUSE_PREEMPTION */
2711:../Dave/Generated/FREERTOS/tasks.c ****             }
2712:../Dave/Generated/FREERTOS/tasks.c ****             else
2713:../Dave/Generated/FREERTOS/tasks.c ****             {
2714:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdFAIL;
 3801              	 .loc 1 2714 0
 3802 00ae 0023     	 movs r3,#0
 3803 00b0 7B61     	 str r3,[r7,#20]
 3804              	.L248:
2715:../Dave/Generated/FREERTOS/tasks.c ****             }
2716:../Dave/Generated/FREERTOS/tasks.c ****         }
2717:../Dave/Generated/FREERTOS/tasks.c ****         ( void ) xTaskResumeAll();
 3805              	 .loc 1 2717 0
 3806 00b2 FFF7FEFF 	 bl xTaskResumeAll
2718:../Dave/Generated/FREERTOS/tasks.c **** 
2719:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 3807              	 .loc 1 2719 0
 3808 00b6 7B69     	 ldr r3,[r7,#20]
2720:../Dave/Generated/FREERTOS/tasks.c ****     }
 3809              	 .loc 1 2720 0
 3810 00b8 1846     	 mov r0,r3
 3811 00ba 1837     	 adds r7,r7,#24
 3812              	.LCFI141:
 3813              	 .cfi_def_cfa_offset 8
 3814 00bc BD46     	 mov sp,r7
 3815              	.LCFI142:
 3816              	 .cfi_def_cfa_register 13
 3817              	 
 3818 00be 80BD     	 pop {r7,pc}
 3819              	.L251:
 3820              	 .align 2
 3821              	.L250:
 3822 00c0 00000000 	 .word uxTopReadyPriority
 3823 00c4 00000000 	 .word pxReadyTasksLists
 3824 00c8 00000000 	 .word pxCurrentTCB
 3825 00cc 00000000 	 .word xYieldPending
 3826              	 .cfi_endproc
 3827              	.LFE165:
 3829              	 .section .text.xTaskIncrementTick,"ax",%progbits
 3830              	 .align 2
 3831              	 .global xTaskIncrementTick
 3832              	 .thumb
 3833              	 .thumb_func
 3835              	xTaskIncrementTick:
 3836              	.LFB166:
2721:../Dave/Generated/FREERTOS/tasks.c **** 
2722:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2723:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2724:../Dave/Generated/FREERTOS/tasks.c **** 
2725:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2726:../Dave/Generated/FREERTOS/tasks.c **** {
 3837              	 .loc 1 2726 0
 3838              	 .cfi_startproc
 3839              	 
 3840              	 
 3841 0000 80B5     	 push {r7,lr}
 3842              	.LCFI143:
 3843              	 .cfi_def_cfa_offset 8
 3844              	 .cfi_offset 7,-8
 3845              	 .cfi_offset 14,-4
 3846 0002 86B0     	 sub sp,sp,#24
 3847              	.LCFI144:
 3848              	 .cfi_def_cfa_offset 32
 3849 0004 00AF     	 add r7,sp,#0
 3850              	.LCFI145:
 3851              	 .cfi_def_cfa_register 7
2727:../Dave/Generated/FREERTOS/tasks.c ****     TCB_t * pxTCB;
2728:../Dave/Generated/FREERTOS/tasks.c ****     TickType_t xItemValue;
2729:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
 3852              	 .loc 1 2729 0
 3853 0006 0023     	 movs r3,#0
 3854 0008 7B61     	 str r3,[r7,#20]
2730:../Dave/Generated/FREERTOS/tasks.c **** 
2731:../Dave/Generated/FREERTOS/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
2732:../Dave/Generated/FREERTOS/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
2733:../Dave/Generated/FREERTOS/tasks.c ****      * tasks to be unblocked. */
2734:../Dave/Generated/FREERTOS/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
2735:../Dave/Generated/FREERTOS/tasks.c **** 
2736:../Dave/Generated/FREERTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3855              	 .loc 1 2736 0
 3856 000a 4F4B     	 ldr r3,.L267
 3857 000c 1B68     	 ldr r3,[r3]
 3858 000e 002B     	 cmp r3,#0
 3859 0010 40F08F80 	 bne .L253
 3860              	.LBB190:
2737:../Dave/Generated/FREERTOS/tasks.c ****     {
2738:../Dave/Generated/FREERTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
2739:../Dave/Generated/FREERTOS/tasks.c ****          * block. */
2740:../Dave/Generated/FREERTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3861              	 .loc 1 2740 0
 3862 0014 4D4B     	 ldr r3,.L267+4
 3863 0016 1B68     	 ldr r3,[r3]
 3864 0018 0133     	 adds r3,r3,#1
 3865 001a 3B61     	 str r3,[r7,#16]
2741:../Dave/Generated/FREERTOS/tasks.c **** 
2742:../Dave/Generated/FREERTOS/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
2743:../Dave/Generated/FREERTOS/tasks.c ****          * delayed lists if it wraps to 0. */
2744:../Dave/Generated/FREERTOS/tasks.c ****         xTickCount = xConstTickCount;
 3866              	 .loc 1 2744 0
 3867 001c 4B4A     	 ldr r2,.L267+4
 3868 001e 3B69     	 ldr r3,[r7,#16]
 3869 0020 1360     	 str r3,[r2]
2745:../Dave/Generated/FREERTOS/tasks.c **** 
2746:../Dave/Generated/FREERTOS/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
 3870              	 .loc 1 2746 0
 3871 0022 3B69     	 ldr r3,[r7,#16]
 3872 0024 002B     	 cmp r3,#0
 3873 0026 1FD1     	 bne .L254
 3874              	.LBB191:
2747:../Dave/Generated/FREERTOS/tasks.c ****         {
2748:../Dave/Generated/FREERTOS/tasks.c ****             taskSWITCH_DELAYED_LISTS();
 3875              	 .loc 1 2748 0
 3876 0028 494B     	 ldr r3,.L267+8
 3877 002a 1B68     	 ldr r3,[r3]
 3878 002c 1B68     	 ldr r3,[r3]
 3879 002e 002B     	 cmp r3,#0
 3880 0030 09D0     	 beq .L255
 3881              	.LBB192:
 3882              	.LBB193:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3883              	 .loc 2 197 0 discriminator 1
 3884              	
 3885 0032 4FF0FC03 	 mov r3,#252
 3886 0036 83F31188 	 msr basepri,r3
 3887 003a BFF36F8F 	 isb 
 3888 003e BFF34F8F 	 dsb 
 3889              	
 3890              	
 3891              	 .thumb
 3892 0042 3B60     	 str r3,[r7]
 3893              	.L256:
 3894              	.LBE193:
 3895              	.LBE192:
 3896              	 .loc 1 2748 0 discriminator 1
 3897 0044 FEE7     	 b .L256
 3898              	.L255:
 3899              	 .loc 1 2748 0 is_stmt 0 discriminator 2
 3900 0046 424B     	 ldr r3,.L267+8
 3901 0048 1B68     	 ldr r3,[r3]
 3902 004a FB60     	 str r3,[r7,#12]
 3903 004c 414B     	 ldr r3,.L267+12
 3904 004e 1B68     	 ldr r3,[r3]
 3905 0050 3F4A     	 ldr r2,.L267+8
 3906 0052 1360     	 str r3,[r2]
 3907 0054 3F4A     	 ldr r2,.L267+12
 3908 0056 FB68     	 ldr r3,[r7,#12]
 3909 0058 1360     	 str r3,[r2]
 3910 005a 3F4B     	 ldr r3,.L267+16
 3911 005c 1B68     	 ldr r3,[r3]
 3912 005e 0133     	 adds r3,r3,#1
 3913 0060 3D4A     	 ldr r2,.L267+16
 3914 0062 1360     	 str r3,[r2]
 3915 0064 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 3916              	.L254:
 3917              	.LBE191:
2749:../Dave/Generated/FREERTOS/tasks.c ****         }
2750:../Dave/Generated/FREERTOS/tasks.c ****         else
2751:../Dave/Generated/FREERTOS/tasks.c ****         {
2752:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2753:../Dave/Generated/FREERTOS/tasks.c ****         }
2754:../Dave/Generated/FREERTOS/tasks.c **** 
2755:../Dave/Generated/FREERTOS/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
2756:../Dave/Generated/FREERTOS/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
2757:../Dave/Generated/FREERTOS/tasks.c ****          * has been found whose block time has not expired there is no need to
2758:../Dave/Generated/FREERTOS/tasks.c ****          * look any further down the list. */
2759:../Dave/Generated/FREERTOS/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
 3918              	 .loc 1 2759 0 is_stmt 1
 3919 0068 3C4B     	 ldr r3,.L267+20
 3920 006a 1B68     	 ldr r3,[r3]
 3921 006c 3A69     	 ldr r2,[r7,#16]
 3922 006e 9A42     	 cmp r2,r3
 3923 0070 4AD3     	 bcc .L257
 3924              	.L262:
2760:../Dave/Generated/FREERTOS/tasks.c ****         {
2761:../Dave/Generated/FREERTOS/tasks.c ****             for( ; ; )
2762:../Dave/Generated/FREERTOS/tasks.c ****             {
2763:../Dave/Generated/FREERTOS/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3925              	 .loc 1 2763 0
 3926 0072 374B     	 ldr r3,.L267+8
 3927 0074 1B68     	 ldr r3,[r3]
 3928 0076 1B68     	 ldr r3,[r3]
 3929 0078 002B     	 cmp r3,#0
 3930 007a 04D1     	 bne .L258
2764:../Dave/Generated/FREERTOS/tasks.c ****                 {
2765:../Dave/Generated/FREERTOS/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2766:../Dave/Generated/FREERTOS/tasks.c ****                      * to the maximum possible value so it is extremely
2767:../Dave/Generated/FREERTOS/tasks.c ****                      * unlikely that the
2768:../Dave/Generated/FREERTOS/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2769:../Dave/Generated/FREERTOS/tasks.c ****                      * next time through. */
2770:../Dave/Generated/FREERTOS/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
 3931              	 .loc 1 2770 0
 3932 007c 374B     	 ldr r3,.L267+20
 3933 007e 4FF0FF32 	 mov r2,#-1
 3934 0082 1A60     	 str r2,[r3]
2771:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 3935              	 .loc 1 2771 0
 3936 0084 40E0     	 b .L257
 3937              	.L258:
2772:../Dave/Generated/FREERTOS/tasks.c ****                 }
2773:../Dave/Generated/FREERTOS/tasks.c ****                 else
2774:../Dave/Generated/FREERTOS/tasks.c ****                 {
2775:../Dave/Generated/FREERTOS/tasks.c ****                     /* The delayed list is not empty, get the value of the
2776:../Dave/Generated/FREERTOS/tasks.c ****                      * item at the head of the delayed list.  This is the time
2777:../Dave/Generated/FREERTOS/tasks.c ****                      * at which the task at the head of the delayed list must
2778:../Dave/Generated/FREERTOS/tasks.c ****                      * be removed from the Blocked state. */
2779:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
 3938              	 .loc 1 2779 0
 3939 0086 324B     	 ldr r3,.L267+8
 3940 0088 1B68     	 ldr r3,[r3]
 3941 008a DB68     	 ldr r3,[r3,#12]
 3942 008c DB68     	 ldr r3,[r3,#12]
 3943 008e BB60     	 str r3,[r7,#8]
2780:../Dave/Generated/FREERTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3944              	 .loc 1 2780 0
 3945 0090 BB68     	 ldr r3,[r7,#8]
 3946 0092 5B68     	 ldr r3,[r3,#4]
 3947 0094 7B60     	 str r3,[r7,#4]
2781:../Dave/Generated/FREERTOS/tasks.c **** 
2782:../Dave/Generated/FREERTOS/tasks.c ****                     if( xConstTickCount < xItemValue )
 3948              	 .loc 1 2782 0
 3949 0096 3A69     	 ldr r2,[r7,#16]
 3950 0098 7B68     	 ldr r3,[r7,#4]
 3951 009a 9A42     	 cmp r2,r3
 3952 009c 03D2     	 bcs .L259
2783:../Dave/Generated/FREERTOS/tasks.c ****                     {
2784:../Dave/Generated/FREERTOS/tasks.c ****                         /* It is not time to unblock this item yet, but the
2785:../Dave/Generated/FREERTOS/tasks.c ****                          * item value is the time at which the task at the head
2786:../Dave/Generated/FREERTOS/tasks.c ****                          * of the blocked list must be removed from the Blocked
2787:../Dave/Generated/FREERTOS/tasks.c ****                          * state -  so record the item value in
2788:../Dave/Generated/FREERTOS/tasks.c ****                          * xNextTaskUnblockTime. */
2789:../Dave/Generated/FREERTOS/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
 3953              	 .loc 1 2789 0
 3954 009e 2F4A     	 ldr r2,.L267+20
 3955 00a0 7B68     	 ldr r3,[r7,#4]
 3956 00a2 1360     	 str r3,[r2]
2790:../Dave/Generated/FREERTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deedmed easier to understand wi
 3957              	 .loc 1 2790 0
 3958 00a4 30E0     	 b .L257
 3959              	.L259:
2791:../Dave/Generated/FREERTOS/tasks.c ****                     }
2792:../Dave/Generated/FREERTOS/tasks.c ****                     else
2793:../Dave/Generated/FREERTOS/tasks.c ****                     {
2794:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2795:../Dave/Generated/FREERTOS/tasks.c ****                     }
2796:../Dave/Generated/FREERTOS/tasks.c **** 
2797:../Dave/Generated/FREERTOS/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
2798:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3960              	 .loc 1 2798 0
 3961 00a6 BB68     	 ldr r3,[r7,#8]
 3962 00a8 0433     	 adds r3,r3,#4
 3963 00aa 1846     	 mov r0,r3
 3964 00ac FFF7FEFF 	 bl uxListRemove
2799:../Dave/Generated/FREERTOS/tasks.c **** 
2800:../Dave/Generated/FREERTOS/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
2801:../Dave/Generated/FREERTOS/tasks.c ****                      * it from the event list. */
2802:../Dave/Generated/FREERTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3965              	 .loc 1 2802 0
 3966 00b0 BB68     	 ldr r3,[r7,#8]
 3967 00b2 9B6A     	 ldr r3,[r3,#40]
 3968 00b4 002B     	 cmp r3,#0
 3969 00b6 04D0     	 beq .L260
2803:../Dave/Generated/FREERTOS/tasks.c ****                     {
2804:../Dave/Generated/FREERTOS/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3970              	 .loc 1 2804 0
 3971 00b8 BB68     	 ldr r3,[r7,#8]
 3972 00ba 1833     	 adds r3,r3,#24
 3973 00bc 1846     	 mov r0,r3
 3974 00be FFF7FEFF 	 bl uxListRemove
 3975              	.L260:
2805:../Dave/Generated/FREERTOS/tasks.c ****                     }
2806:../Dave/Generated/FREERTOS/tasks.c ****                     else
2807:../Dave/Generated/FREERTOS/tasks.c ****                     {
2808:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2809:../Dave/Generated/FREERTOS/tasks.c ****                     }
2810:../Dave/Generated/FREERTOS/tasks.c **** 
2811:../Dave/Generated/FREERTOS/tasks.c ****                     /* Place the unblocked task into the appropriate ready
2812:../Dave/Generated/FREERTOS/tasks.c ****                      * list. */
2813:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3976              	 .loc 1 2813 0
 3977 00c2 BB68     	 ldr r3,[r7,#8]
 3978 00c4 DB6A     	 ldr r3,[r3,#44]
 3979 00c6 1A46     	 mov r2,r3
 3980 00c8 0123     	 movs r3,#1
 3981 00ca 03FA02F2 	 lsl r2,r3,r2
 3982 00ce 244B     	 ldr r3,.L267+24
 3983 00d0 1B68     	 ldr r3,[r3]
 3984 00d2 1343     	 orrs r3,r3,r2
 3985 00d4 224A     	 ldr r2,.L267+24
 3986 00d6 1360     	 str r3,[r2]
 3987 00d8 BB68     	 ldr r3,[r7,#8]
 3988 00da DA6A     	 ldr r2,[r3,#44]
 3989 00dc 1346     	 mov r3,r2
 3990 00de 9B00     	 lsls r3,r3,#2
 3991 00e0 1344     	 add r3,r3,r2
 3992 00e2 9B00     	 lsls r3,r3,#2
 3993 00e4 1F4A     	 ldr r2,.L267+28
 3994 00e6 1A44     	 add r2,r2,r3
 3995 00e8 BB68     	 ldr r3,[r7,#8]
 3996 00ea 0433     	 adds r3,r3,#4
 3997 00ec 1046     	 mov r0,r2
 3998 00ee 1946     	 mov r1,r3
 3999 00f0 FFF7FEFF 	 bl vListInsertEnd
2814:../Dave/Generated/FREERTOS/tasks.c **** 
2815:../Dave/Generated/FREERTOS/tasks.c ****                     /* A task being unblocked cannot cause an immediate
2816:../Dave/Generated/FREERTOS/tasks.c ****                      * context switch if preemption is turned off. */
2817:../Dave/Generated/FREERTOS/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
2818:../Dave/Generated/FREERTOS/tasks.c ****                         {
2819:../Dave/Generated/FREERTOS/tasks.c ****                             /* Preemption is on, but a context switch should
2820:../Dave/Generated/FREERTOS/tasks.c ****                              * only be performed if the unblocked task has a
2821:../Dave/Generated/FREERTOS/tasks.c ****                              * priority that is equal to or higher than the
2822:../Dave/Generated/FREERTOS/tasks.c ****                              * currently executing task. */
2823:../Dave/Generated/FREERTOS/tasks.c ****                             if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 4000              	 .loc 1 2823 0
 4001 00f4 BB68     	 ldr r3,[r7,#8]
 4002 00f6 DA6A     	 ldr r2,[r3,#44]
 4003 00f8 1B4B     	 ldr r3,.L267+32
 4004 00fa 1B68     	 ldr r3,[r3]
 4005 00fc DB6A     	 ldr r3,[r3,#44]
 4006 00fe 9A42     	 cmp r2,r3
 4007 0100 01D3     	 bcc .L261
2824:../Dave/Generated/FREERTOS/tasks.c ****                             {
2825:../Dave/Generated/FREERTOS/tasks.c ****                                 xSwitchRequired = pdTRUE;
 4008              	 .loc 1 2825 0
 4009 0102 0123     	 movs r3,#1
 4010 0104 7B61     	 str r3,[r7,#20]
 4011              	.L261:
2826:../Dave/Generated/FREERTOS/tasks.c ****                             }
2827:../Dave/Generated/FREERTOS/tasks.c ****                             else
2828:../Dave/Generated/FREERTOS/tasks.c ****                             {
2829:../Dave/Generated/FREERTOS/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2830:../Dave/Generated/FREERTOS/tasks.c ****                             }
2831:../Dave/Generated/FREERTOS/tasks.c ****                         }
2832:../Dave/Generated/FREERTOS/tasks.c ****                     #endif /* configUSE_PREEMPTION */
2833:../Dave/Generated/FREERTOS/tasks.c ****                 }
2834:../Dave/Generated/FREERTOS/tasks.c ****             }
 4012              	 .loc 1 2834 0
 4013 0106 B4E7     	 b .L262
 4014              	.L257:
2835:../Dave/Generated/FREERTOS/tasks.c ****         }
2836:../Dave/Generated/FREERTOS/tasks.c **** 
2837:../Dave/Generated/FREERTOS/tasks.c ****         /* Tasks of equal priority to the currently running task will share
2838:../Dave/Generated/FREERTOS/tasks.c ****          * processing time (time slice) if preemption is on, and the application
2839:../Dave/Generated/FREERTOS/tasks.c ****          * writer has not explicitly turned time slicing off. */
2840:../Dave/Generated/FREERTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2841:../Dave/Generated/FREERTOS/tasks.c ****             {
2842:../Dave/Generated/FREERTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) >
 4015              	 .loc 1 2842 0
 4016 0108 174B     	 ldr r3,.L267+32
 4017 010a 1B68     	 ldr r3,[r3]
 4018 010c DA6A     	 ldr r2,[r3,#44]
 4019 010e 1549     	 ldr r1,.L267+28
 4020 0110 1346     	 mov r3,r2
 4021 0112 9B00     	 lsls r3,r3,#2
 4022 0114 1344     	 add r3,r3,r2
 4023 0116 9B00     	 lsls r3,r3,#2
 4024 0118 0B44     	 add r3,r3,r1
 4025 011a 1B68     	 ldr r3,[r3]
 4026 011c 012B     	 cmp r3,#1
 4027 011e 01D9     	 bls .L263
2843:../Dave/Generated/FREERTOS/tasks.c ****                 {
2844:../Dave/Generated/FREERTOS/tasks.c ****                     xSwitchRequired = pdTRUE;
 4028              	 .loc 1 2844 0
 4029 0120 0123     	 movs r3,#1
 4030 0122 7B61     	 str r3,[r7,#20]
 4031              	.L263:
2845:../Dave/Generated/FREERTOS/tasks.c ****                 }
2846:../Dave/Generated/FREERTOS/tasks.c ****                 else
2847:../Dave/Generated/FREERTOS/tasks.c ****                 {
2848:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2849:../Dave/Generated/FREERTOS/tasks.c ****                 }
2850:../Dave/Generated/FREERTOS/tasks.c ****             }
2851:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2852:../Dave/Generated/FREERTOS/tasks.c **** 
2853:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2854:../Dave/Generated/FREERTOS/tasks.c ****             {
2855:../Dave/Generated/FREERTOS/tasks.c ****                 /* Guard against the tick hook being called when the pended tick
2856:../Dave/Generated/FREERTOS/tasks.c ****                  * count is being unwound (when the scheduler is being unlocked). */
2857:../Dave/Generated/FREERTOS/tasks.c ****                 if( xPendedTicks == ( TickType_t ) 0 )
2858:../Dave/Generated/FREERTOS/tasks.c ****                 {
2859:../Dave/Generated/FREERTOS/tasks.c ****                     vApplicationTickHook();
2860:../Dave/Generated/FREERTOS/tasks.c ****                 }
2861:../Dave/Generated/FREERTOS/tasks.c ****                 else
2862:../Dave/Generated/FREERTOS/tasks.c ****                 {
2863:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2864:../Dave/Generated/FREERTOS/tasks.c ****                 }
2865:../Dave/Generated/FREERTOS/tasks.c ****             }
2866:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_TICK_HOOK */
2867:../Dave/Generated/FREERTOS/tasks.c **** 
2868:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2869:../Dave/Generated/FREERTOS/tasks.c ****             {
2870:../Dave/Generated/FREERTOS/tasks.c ****                 if( xYieldPending != pdFALSE )
 4032              	 .loc 1 2870 0
 4033 0124 114B     	 ldr r3,.L267+36
 4034 0126 1B68     	 ldr r3,[r3]
 4035 0128 002B     	 cmp r3,#0
 4036 012a 01D0     	 beq .L264
2871:../Dave/Generated/FREERTOS/tasks.c ****                 {
2872:../Dave/Generated/FREERTOS/tasks.c ****                     xSwitchRequired = pdTRUE;
 4037              	 .loc 1 2872 0
 4038 012c 0123     	 movs r3,#1
 4039 012e 7B61     	 str r3,[r7,#20]
 4040              	.L264:
 4041              	.LBE190:
 4042 0130 04E0     	 b .L265
 4043              	.L253:
2873:../Dave/Generated/FREERTOS/tasks.c ****                 }
2874:../Dave/Generated/FREERTOS/tasks.c ****                 else
2875:../Dave/Generated/FREERTOS/tasks.c ****                 {
2876:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2877:../Dave/Generated/FREERTOS/tasks.c ****                 }
2878:../Dave/Generated/FREERTOS/tasks.c ****             }
2879:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
2880:../Dave/Generated/FREERTOS/tasks.c ****     }
2881:../Dave/Generated/FREERTOS/tasks.c ****     else
2882:../Dave/Generated/FREERTOS/tasks.c ****     {
2883:../Dave/Generated/FREERTOS/tasks.c ****         ++xPendedTicks;
 4044              	 .loc 1 2883 0
 4045 0132 0F4B     	 ldr r3,.L267+40
 4046 0134 1B68     	 ldr r3,[r3]
 4047 0136 0133     	 adds r3,r3,#1
 4048 0138 0D4A     	 ldr r2,.L267+40
 4049 013a 1360     	 str r3,[r2]
 4050              	.L265:
2884:../Dave/Generated/FREERTOS/tasks.c **** 
2885:../Dave/Generated/FREERTOS/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
2886:../Dave/Generated/FREERTOS/tasks.c ****          * scheduler is locked. */
2887:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2888:../Dave/Generated/FREERTOS/tasks.c ****             {
2889:../Dave/Generated/FREERTOS/tasks.c ****                 vApplicationTickHook();
2890:../Dave/Generated/FREERTOS/tasks.c ****             }
2891:../Dave/Generated/FREERTOS/tasks.c ****         #endif
2892:../Dave/Generated/FREERTOS/tasks.c ****     }
2893:../Dave/Generated/FREERTOS/tasks.c **** 
2894:../Dave/Generated/FREERTOS/tasks.c ****     return xSwitchRequired;
 4051              	 .loc 1 2894 0
 4052 013c 7B69     	 ldr r3,[r7,#20]
2895:../Dave/Generated/FREERTOS/tasks.c **** }
 4053              	 .loc 1 2895 0
 4054 013e 1846     	 mov r0,r3
 4055 0140 1837     	 adds r7,r7,#24
 4056              	.LCFI146:
 4057              	 .cfi_def_cfa_offset 8
 4058 0142 BD46     	 mov sp,r7
 4059              	.LCFI147:
 4060              	 .cfi_def_cfa_register 13
 4061              	 
 4062 0144 80BD     	 pop {r7,pc}
 4063              	.L268:
 4064 0146 00BF     	 .align 2
 4065              	.L267:
 4066 0148 00000000 	 .word uxSchedulerSuspended
 4067 014c 00000000 	 .word xTickCount
 4068 0150 00000000 	 .word pxDelayedTaskList
 4069 0154 00000000 	 .word pxOverflowDelayedTaskList
 4070 0158 00000000 	 .word xNumOfOverflows
 4071 015c 00000000 	 .word xNextTaskUnblockTime
 4072 0160 00000000 	 .word uxTopReadyPriority
 4073 0164 00000000 	 .word pxReadyTasksLists
 4074 0168 00000000 	 .word pxCurrentTCB
 4075 016c 00000000 	 .word xYieldPending
 4076 0170 00000000 	 .word xPendedTicks
 4077              	 .cfi_endproc
 4078              	.LFE166:
 4080              	 .section .text.vTaskSwitchContext,"ax",%progbits
 4081              	 .align 2
 4082              	 .global vTaskSwitchContext
 4083              	 .thumb
 4084              	 .thumb_func
 4086              	vTaskSwitchContext:
 4087              	.LFB167:
2896:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2897:../Dave/Generated/FREERTOS/tasks.c **** 
2898:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2899:../Dave/Generated/FREERTOS/tasks.c **** 
2900:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2901:../Dave/Generated/FREERTOS/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
2902:../Dave/Generated/FREERTOS/tasks.c ****     {
2903:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * xTCB;
2904:../Dave/Generated/FREERTOS/tasks.c **** 
2905:../Dave/Generated/FREERTOS/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
2906:../Dave/Generated/FREERTOS/tasks.c ****          * getting set. */
2907:../Dave/Generated/FREERTOS/tasks.c ****         if( xTask == NULL )
2908:../Dave/Generated/FREERTOS/tasks.c ****         {
2909:../Dave/Generated/FREERTOS/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2910:../Dave/Generated/FREERTOS/tasks.c ****         }
2911:../Dave/Generated/FREERTOS/tasks.c ****         else
2912:../Dave/Generated/FREERTOS/tasks.c ****         {
2913:../Dave/Generated/FREERTOS/tasks.c ****             xTCB = xTask;
2914:../Dave/Generated/FREERTOS/tasks.c ****         }
2915:../Dave/Generated/FREERTOS/tasks.c **** 
2916:../Dave/Generated/FREERTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2917:../Dave/Generated/FREERTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2918:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
2919:../Dave/Generated/FREERTOS/tasks.c ****         {
2920:../Dave/Generated/FREERTOS/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
2921:../Dave/Generated/FREERTOS/tasks.c ****         }
2922:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
2923:../Dave/Generated/FREERTOS/tasks.c ****     }
2924:../Dave/Generated/FREERTOS/tasks.c **** 
2925:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2926:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2927:../Dave/Generated/FREERTOS/tasks.c **** 
2928:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2929:../Dave/Generated/FREERTOS/tasks.c **** 
2930:../Dave/Generated/FREERTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2931:../Dave/Generated/FREERTOS/tasks.c ****     {
2932:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
2933:../Dave/Generated/FREERTOS/tasks.c ****         TaskHookFunction_t xReturn;
2934:../Dave/Generated/FREERTOS/tasks.c **** 
2935:../Dave/Generated/FREERTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2936:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2937:../Dave/Generated/FREERTOS/tasks.c **** 
2938:../Dave/Generated/FREERTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2939:../Dave/Generated/FREERTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2940:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
2941:../Dave/Generated/FREERTOS/tasks.c ****         {
2942:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2943:../Dave/Generated/FREERTOS/tasks.c ****         }
2944:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
2945:../Dave/Generated/FREERTOS/tasks.c **** 
2946:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
2947:../Dave/Generated/FREERTOS/tasks.c ****     }
2948:../Dave/Generated/FREERTOS/tasks.c **** 
2949:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2950:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2951:../Dave/Generated/FREERTOS/tasks.c **** 
2952:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2953:../Dave/Generated/FREERTOS/tasks.c **** 
2954:../Dave/Generated/FREERTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2955:../Dave/Generated/FREERTOS/tasks.c ****     {
2956:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
2957:../Dave/Generated/FREERTOS/tasks.c ****         TaskHookFunction_t xReturn;
2958:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
2959:../Dave/Generated/FREERTOS/tasks.c **** 
2960:../Dave/Generated/FREERTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2961:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2962:../Dave/Generated/FREERTOS/tasks.c **** 
2963:../Dave/Generated/FREERTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2964:../Dave/Generated/FREERTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2965:../Dave/Generated/FREERTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2966:../Dave/Generated/FREERTOS/tasks.c ****         {
2967:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2968:../Dave/Generated/FREERTOS/tasks.c ****         }
2969:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2970:../Dave/Generated/FREERTOS/tasks.c **** 
2971:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
2972:../Dave/Generated/FREERTOS/tasks.c ****     }
2973:../Dave/Generated/FREERTOS/tasks.c **** 
2974:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2975:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2976:../Dave/Generated/FREERTOS/tasks.c **** 
2977:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2978:../Dave/Generated/FREERTOS/tasks.c **** 
2979:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
2980:../Dave/Generated/FREERTOS/tasks.c ****                                              void * pvParameter )
2981:../Dave/Generated/FREERTOS/tasks.c ****     {
2982:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * xTCB;
2983:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
2984:../Dave/Generated/FREERTOS/tasks.c **** 
2985:../Dave/Generated/FREERTOS/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
2986:../Dave/Generated/FREERTOS/tasks.c ****         if( xTask == NULL )
2987:../Dave/Generated/FREERTOS/tasks.c ****         {
2988:../Dave/Generated/FREERTOS/tasks.c ****             xTCB = pxCurrentTCB;
2989:../Dave/Generated/FREERTOS/tasks.c ****         }
2990:../Dave/Generated/FREERTOS/tasks.c ****         else
2991:../Dave/Generated/FREERTOS/tasks.c ****         {
2992:../Dave/Generated/FREERTOS/tasks.c ****             xTCB = xTask;
2993:../Dave/Generated/FREERTOS/tasks.c ****         }
2994:../Dave/Generated/FREERTOS/tasks.c **** 
2995:../Dave/Generated/FREERTOS/tasks.c ****         if( xTCB->pxTaskTag != NULL )
2996:../Dave/Generated/FREERTOS/tasks.c ****         {
2997:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
2998:../Dave/Generated/FREERTOS/tasks.c ****         }
2999:../Dave/Generated/FREERTOS/tasks.c ****         else
3000:../Dave/Generated/FREERTOS/tasks.c ****         {
3001:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdFAIL;
3002:../Dave/Generated/FREERTOS/tasks.c ****         }
3003:../Dave/Generated/FREERTOS/tasks.c **** 
3004:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
3005:../Dave/Generated/FREERTOS/tasks.c ****     }
3006:../Dave/Generated/FREERTOS/tasks.c **** 
3007:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3008:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3009:../Dave/Generated/FREERTOS/tasks.c **** 
3010:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSwitchContext( void )
3011:../Dave/Generated/FREERTOS/tasks.c **** {
 4088              	 .loc 1 3011 0
 4089              	 .cfi_startproc
 4090              	 
 4091              	 
 4092              	 
 4093 0000 80B4     	 push {r7}
 4094              	.LCFI148:
 4095              	 .cfi_def_cfa_offset 4
 4096              	 .cfi_offset 7,-4
 4097 0002 87B0     	 sub sp,sp,#28
 4098              	.LCFI149:
 4099              	 .cfi_def_cfa_offset 32
 4100 0004 00AF     	 add r7,sp,#0
 4101              	.LCFI150:
 4102              	 .cfi_def_cfa_register 7
3012:../Dave/Generated/FREERTOS/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 4103              	 .loc 1 3012 0
 4104 0006 264B     	 ldr r3,.L276
 4105 0008 1B68     	 ldr r3,[r3]
 4106 000a 002B     	 cmp r3,#0
 4107 000c 03D0     	 beq .L270
3013:../Dave/Generated/FREERTOS/tasks.c ****     {
3014:../Dave/Generated/FREERTOS/tasks.c ****         /* The scheduler is currently suspended - do not allow a context
3015:../Dave/Generated/FREERTOS/tasks.c ****          * switch. */
3016:../Dave/Generated/FREERTOS/tasks.c ****         xYieldPending = pdTRUE;
 4108              	 .loc 1 3016 0
 4109 000e 254B     	 ldr r3,.L276+4
 4110 0010 0122     	 movs r2,#1
 4111 0012 1A60     	 str r2,[r3]
 4112 0014 3EE0     	 b .L269
 4113              	.L270:
3017:../Dave/Generated/FREERTOS/tasks.c ****     }
3018:../Dave/Generated/FREERTOS/tasks.c ****     else
3019:../Dave/Generated/FREERTOS/tasks.c ****     {
3020:../Dave/Generated/FREERTOS/tasks.c ****         xYieldPending = pdFALSE;
 4114              	 .loc 1 3020 0
 4115 0016 234B     	 ldr r3,.L276+4
 4116 0018 0022     	 movs r2,#0
 4117 001a 1A60     	 str r2,[r3]
 4118              	.LBB194:
3021:../Dave/Generated/FREERTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
3022:../Dave/Generated/FREERTOS/tasks.c **** 
3023:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3024:../Dave/Generated/FREERTOS/tasks.c ****             {
3025:../Dave/Generated/FREERTOS/tasks.c ****                 #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3026:../Dave/Generated/FREERTOS/tasks.c ****                     portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3027:../Dave/Generated/FREERTOS/tasks.c ****                 #else
3028:../Dave/Generated/FREERTOS/tasks.c ****                     ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3029:../Dave/Generated/FREERTOS/tasks.c ****                 #endif
3030:../Dave/Generated/FREERTOS/tasks.c **** 
3031:../Dave/Generated/FREERTOS/tasks.c ****                 /* Add the amount of time the task has been running to the
3032:../Dave/Generated/FREERTOS/tasks.c ****                  * accumulated time so far.  The time the task started running was
3033:../Dave/Generated/FREERTOS/tasks.c ****                  * stored in ulTaskSwitchedInTime.  Note that there is no overflow
3034:../Dave/Generated/FREERTOS/tasks.c ****                  * protection here so count values are only valid until the timer
3035:../Dave/Generated/FREERTOS/tasks.c ****                  * overflows.  The guard against negative values is to protect
3036:../Dave/Generated/FREERTOS/tasks.c ****                  * against suspect run time stat counter implementations - which
3037:../Dave/Generated/FREERTOS/tasks.c ****                  * are provided by the application, not the kernel. */
3038:../Dave/Generated/FREERTOS/tasks.c ****                 if( ulTotalRunTime > ulTaskSwitchedInTime )
3039:../Dave/Generated/FREERTOS/tasks.c ****                 {
3040:../Dave/Generated/FREERTOS/tasks.c ****                     pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3041:../Dave/Generated/FREERTOS/tasks.c ****                 }
3042:../Dave/Generated/FREERTOS/tasks.c ****                 else
3043:../Dave/Generated/FREERTOS/tasks.c ****                 {
3044:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3045:../Dave/Generated/FREERTOS/tasks.c ****                 }
3046:../Dave/Generated/FREERTOS/tasks.c **** 
3047:../Dave/Generated/FREERTOS/tasks.c ****                 ulTaskSwitchedInTime = ulTotalRunTime;
3048:../Dave/Generated/FREERTOS/tasks.c ****             }
3049:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configGENERATE_RUN_TIME_STATS */
3050:../Dave/Generated/FREERTOS/tasks.c **** 
3051:../Dave/Generated/FREERTOS/tasks.c ****         /* Check for stack overflow, if configured. */
3052:../Dave/Generated/FREERTOS/tasks.c ****         taskCHECK_FOR_STACK_OVERFLOW();
3053:../Dave/Generated/FREERTOS/tasks.c **** 
3054:../Dave/Generated/FREERTOS/tasks.c ****         /* Before the currently running task is switched out, save its errno. */
3055:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3056:../Dave/Generated/FREERTOS/tasks.c ****             {
3057:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3058:../Dave/Generated/FREERTOS/tasks.c ****             }
3059:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3060:../Dave/Generated/FREERTOS/tasks.c **** 
3061:../Dave/Generated/FREERTOS/tasks.c ****         /* Select a new task to run using either the generic C or port
3062:../Dave/Generated/FREERTOS/tasks.c ****          * optimised asm code. */
3063:../Dave/Generated/FREERTOS/tasks.c ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
 4119              	 .loc 1 3063 0
 4120 001c 224B     	 ldr r3,.L276+8
 4121 001e 1B68     	 ldr r3,[r3]
 4122 0020 FB60     	 str r3,[r7,#12]
 4123              	.LBB195:
 4124              	.LBB196:
 135:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 4125              	 .loc 2 135 0
 4126 0022 FB68     	 ldr r3,[r7,#12]
 4127              	
 4128 0024 B3FA83F3 	 clz r3,r3
 4129              	
 4130              	 .thumb
 4131 0028 FB72     	 strb r3,[r7,#11]
 137:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         }
 4132              	 .loc 2 137 0
 4133 002a FB7A     	 ldrb r3,[r7,#11]
 4134              	.LBE196:
 4135              	.LBE195:
 4136              	 .loc 1 3063 0
 4137 002c C3F11F03 	 rsb r3,r3,#31
 4138 0030 7B61     	 str r3,[r7,#20]
 4139 0032 1E49     	 ldr r1,.L276+12
 4140 0034 7A69     	 ldr r2,[r7,#20]
 4141 0036 1346     	 mov r3,r2
 4142 0038 9B00     	 lsls r3,r3,#2
 4143 003a 1344     	 add r3,r3,r2
 4144 003c 9B00     	 lsls r3,r3,#2
 4145 003e 0B44     	 add r3,r3,r1
 4146 0040 1B68     	 ldr r3,[r3]
 4147 0042 002B     	 cmp r3,#0
 4148 0044 09D1     	 bne .L273
 4149              	.LBB197:
 4150              	.LBB198:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4151              	 .loc 2 197 0 discriminator 1
 4152              	
 4153 0046 4FF0FC03 	 mov r3,#252
 4154 004a 83F31188 	 msr basepri,r3
 4155 004e BFF36F8F 	 isb 
 4156 0052 BFF34F8F 	 dsb 
 4157              	
 4158              	
 4159              	 .thumb
 4160 0056 7B60     	 str r3,[r7,#4]
 4161              	.L274:
 4162              	.LBE198:
 4163              	.LBE197:
 4164              	 .loc 1 3063 0 discriminator 1
 4165 0058 FEE7     	 b .L274
 4166              	.L273:
 4167              	.LBB199:
 4168              	 .loc 1 3063 0 is_stmt 0 discriminator 2
 4169 005a 7A69     	 ldr r2,[r7,#20]
 4170 005c 1346     	 mov r3,r2
 4171 005e 9B00     	 lsls r3,r3,#2
 4172 0060 1344     	 add r3,r3,r2
 4173 0062 9B00     	 lsls r3,r3,#2
 4174 0064 114A     	 ldr r2,.L276+12
 4175 0066 1344     	 add r3,r3,r2
 4176 0068 3B61     	 str r3,[r7,#16]
 4177 006a 3B69     	 ldr r3,[r7,#16]
 4178 006c 5B68     	 ldr r3,[r3,#4]
 4179 006e 5A68     	 ldr r2,[r3,#4]
 4180 0070 3B69     	 ldr r3,[r7,#16]
 4181 0072 5A60     	 str r2,[r3,#4]
 4182 0074 3B69     	 ldr r3,[r7,#16]
 4183 0076 5A68     	 ldr r2,[r3,#4]
 4184 0078 3B69     	 ldr r3,[r7,#16]
 4185 007a 0833     	 adds r3,r3,#8
 4186 007c 9A42     	 cmp r2,r3
 4187 007e 04D1     	 bne .L275
 4188              	 .loc 1 3063 0 discriminator 3
 4189 0080 3B69     	 ldr r3,[r7,#16]
 4190 0082 5B68     	 ldr r3,[r3,#4]
 4191 0084 5A68     	 ldr r2,[r3,#4]
 4192 0086 3B69     	 ldr r3,[r7,#16]
 4193 0088 5A60     	 str r2,[r3,#4]
 4194              	.L275:
 4195              	 .loc 1 3063 0 discriminator 5
 4196 008a 3B69     	 ldr r3,[r7,#16]
 4197 008c 5B68     	 ldr r3,[r3,#4]
 4198 008e DB68     	 ldr r3,[r3,#12]
 4199 0090 074A     	 ldr r2,.L276+16
 4200 0092 1360     	 str r3,[r2]
 4201              	.L269:
 4202              	.LBE199:
 4203              	.LBE194:
3064:../Dave/Generated/FREERTOS/tasks.c ****         traceTASK_SWITCHED_IN();
3065:../Dave/Generated/FREERTOS/tasks.c **** 
3066:../Dave/Generated/FREERTOS/tasks.c ****         /* After the new task is switched in, update the global errno. */
3067:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3068:../Dave/Generated/FREERTOS/tasks.c ****             {
3069:../Dave/Generated/FREERTOS/tasks.c ****                 FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3070:../Dave/Generated/FREERTOS/tasks.c ****             }
3071:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3072:../Dave/Generated/FREERTOS/tasks.c **** 
3073:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3074:../Dave/Generated/FREERTOS/tasks.c ****             {
3075:../Dave/Generated/FREERTOS/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
3076:../Dave/Generated/FREERTOS/tasks.c ****                  * structure specific to this task.
3077:../Dave/Generated/FREERTOS/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3078:../Dave/Generated/FREERTOS/tasks.c ****                  * for additional information. */
3079:../Dave/Generated/FREERTOS/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3080:../Dave/Generated/FREERTOS/tasks.c ****             }
3081:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3082:../Dave/Generated/FREERTOS/tasks.c ****     }
3083:../Dave/Generated/FREERTOS/tasks.c **** }
 4204              	 .loc 1 3083 0 is_stmt 1
 4205 0094 1C37     	 adds r7,r7,#28
 4206              	.LCFI151:
 4207              	 .cfi_def_cfa_offset 4
 4208 0096 BD46     	 mov sp,r7
 4209              	.LCFI152:
 4210              	 .cfi_def_cfa_register 13
 4211              	 
 4212 0098 5DF8047B 	 ldr r7,[sp],#4
 4213              	.LCFI153:
 4214              	 .cfi_restore 7
 4215              	 .cfi_def_cfa_offset 0
 4216 009c 7047     	 bx lr
 4217              	.L277:
 4218 009e 00BF     	 .align 2
 4219              	.L276:
 4220 00a0 00000000 	 .word uxSchedulerSuspended
 4221 00a4 00000000 	 .word xYieldPending
 4222 00a8 00000000 	 .word uxTopReadyPriority
 4223 00ac 00000000 	 .word pxReadyTasksLists
 4224 00b0 00000000 	 .word pxCurrentTCB
 4225              	 .cfi_endproc
 4226              	.LFE167:
 4228              	 .section .text.vTaskPlaceOnEventList,"ax",%progbits
 4229              	 .align 2
 4230              	 .global vTaskPlaceOnEventList
 4231              	 .thumb
 4232              	 .thumb_func
 4234              	vTaskPlaceOnEventList:
 4235              	.LFB168:
3084:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3085:../Dave/Generated/FREERTOS/tasks.c **** 
3086:../Dave/Generated/FREERTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
3087:../Dave/Generated/FREERTOS/tasks.c ****                             const TickType_t xTicksToWait )
3088:../Dave/Generated/FREERTOS/tasks.c **** {
 4236              	 .loc 1 3088 0
 4237              	 .cfi_startproc
 4238              	 
 4239              	 
 4240 0000 80B5     	 push {r7,lr}
 4241              	.LCFI154:
 4242              	 .cfi_def_cfa_offset 8
 4243              	 .cfi_offset 7,-8
 4244              	 .cfi_offset 14,-4
 4245 0002 84B0     	 sub sp,sp,#16
 4246              	.LCFI155:
 4247              	 .cfi_def_cfa_offset 24
 4248 0004 00AF     	 add r7,sp,#0
 4249              	.LCFI156:
 4250              	 .cfi_def_cfa_register 7
 4251 0006 7860     	 str r0,[r7,#4]
 4252 0008 3960     	 str r1,[r7]
3089:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxEventList );
 4253              	 .loc 1 3089 0
 4254 000a 7B68     	 ldr r3,[r7,#4]
 4255 000c 002B     	 cmp r3,#0
 4256 000e 09D1     	 bne .L279
 4257              	.LBB200:
 4258              	.LBB201:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4259              	 .loc 2 197 0 discriminator 1
 4260              	
 4261 0010 4FF0FC03 	 mov r3,#252
 4262 0014 83F31188 	 msr basepri,r3
 4263 0018 BFF36F8F 	 isb 
 4264 001c BFF34F8F 	 dsb 
 4265              	
 4266              	
 4267              	 .thumb
 4268 0020 FB60     	 str r3,[r7,#12]
 4269              	.L280:
 4270              	.LBE201:
 4271              	.LBE200:
 4272              	 .loc 1 3089 0 discriminator 1
 4273 0022 FEE7     	 b .L280
 4274              	.L279:
3090:../Dave/Generated/FREERTOS/tasks.c **** 
3091:../Dave/Generated/FREERTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3092:../Dave/Generated/FREERTOS/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3093:../Dave/Generated/FREERTOS/tasks.c **** 
3094:../Dave/Generated/FREERTOS/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
3095:../Dave/Generated/FREERTOS/tasks.c ****      * This is placed in the list in priority order so the highest priority task
3096:../Dave/Generated/FREERTOS/tasks.c ****      * is the first to be woken by the event.  The queue that contains the event
3097:../Dave/Generated/FREERTOS/tasks.c ****      * list is locked, preventing simultaneous access from interrupts. */
3098:../Dave/Generated/FREERTOS/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4275              	 .loc 1 3098 0
 4276 0024 064B     	 ldr r3,.L281
 4277 0026 1B68     	 ldr r3,[r3]
 4278 0028 1833     	 adds r3,r3,#24
 4279 002a 7868     	 ldr r0,[r7,#4]
 4280 002c 1946     	 mov r1,r3
 4281 002e FFF7FEFF 	 bl vListInsert
3099:../Dave/Generated/FREERTOS/tasks.c **** 
3100:../Dave/Generated/FREERTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4282              	 .loc 1 3100 0
 4283 0032 3868     	 ldr r0,[r7]
 4284 0034 0121     	 movs r1,#1
 4285 0036 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
3101:../Dave/Generated/FREERTOS/tasks.c **** }
 4286              	 .loc 1 3101 0
 4287 003a 1037     	 adds r7,r7,#16
 4288              	.LCFI157:
 4289              	 .cfi_def_cfa_offset 8
 4290 003c BD46     	 mov sp,r7
 4291              	.LCFI158:
 4292              	 .cfi_def_cfa_register 13
 4293              	 
 4294 003e 80BD     	 pop {r7,pc}
 4295              	.L282:
 4296              	 .align 2
 4297              	.L281:
 4298 0040 00000000 	 .word pxCurrentTCB
 4299              	 .cfi_endproc
 4300              	.LFE168:
 4302              	 .section .text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4303              	 .align 2
 4304              	 .global vTaskPlaceOnUnorderedEventList
 4305              	 .thumb
 4306              	 .thumb_func
 4308              	vTaskPlaceOnUnorderedEventList:
 4309              	.LFB169:
3102:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3103:../Dave/Generated/FREERTOS/tasks.c **** 
3104:../Dave/Generated/FREERTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3105:../Dave/Generated/FREERTOS/tasks.c ****                                      const TickType_t xItemValue,
3106:../Dave/Generated/FREERTOS/tasks.c ****                                      const TickType_t xTicksToWait )
3107:../Dave/Generated/FREERTOS/tasks.c **** {
 4310              	 .loc 1 3107 0
 4311              	 .cfi_startproc
 4312              	 
 4313              	 
 4314 0000 80B5     	 push {r7,lr}
 4315              	.LCFI159:
 4316              	 .cfi_def_cfa_offset 8
 4317              	 .cfi_offset 7,-8
 4318              	 .cfi_offset 14,-4
 4319 0002 86B0     	 sub sp,sp,#24
 4320              	.LCFI160:
 4321              	 .cfi_def_cfa_offset 32
 4322 0004 00AF     	 add r7,sp,#0
 4323              	.LCFI161:
 4324              	 .cfi_def_cfa_register 7
 4325 0006 F860     	 str r0,[r7,#12]
 4326 0008 B960     	 str r1,[r7,#8]
 4327 000a 7A60     	 str r2,[r7,#4]
3108:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxEventList );
 4328              	 .loc 1 3108 0
 4329 000c FB68     	 ldr r3,[r7,#12]
 4330 000e 002B     	 cmp r3,#0
 4331 0010 09D1     	 bne .L284
 4332              	.LBB202:
 4333              	.LBB203:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4334              	 .loc 2 197 0 discriminator 1
 4335              	
 4336 0012 4FF0FC03 	 mov r3,#252
 4337 0016 83F31188 	 msr basepri,r3
 4338 001a BFF36F8F 	 isb 
 4339 001e BFF34F8F 	 dsb 
 4340              	
 4341              	
 4342              	 .thumb
 4343 0022 7B61     	 str r3,[r7,#20]
 4344              	.L285:
 4345              	.LBE203:
 4346              	.LBE202:
 4347              	 .loc 1 3108 0 discriminator 1
 4348 0024 FEE7     	 b .L285
 4349              	.L284:
3109:../Dave/Generated/FREERTOS/tasks.c **** 
3110:../Dave/Generated/FREERTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3111:../Dave/Generated/FREERTOS/tasks.c ****      * the event groups implementation. */
3112:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != 0 );
 4350              	 .loc 1 3112 0
 4351 0026 114B     	 ldr r3,.L288
 4352 0028 1B68     	 ldr r3,[r3]
 4353 002a 002B     	 cmp r3,#0
 4354 002c 09D1     	 bne .L286
 4355              	.LBB204:
 4356              	.LBB205:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4357              	 .loc 2 197 0 discriminator 1
 4358              	
 4359 002e 4FF0FC03 	 mov r3,#252
 4360 0032 83F31188 	 msr basepri,r3
 4361 0036 BFF36F8F 	 isb 
 4362 003a BFF34F8F 	 dsb 
 4363              	
 4364              	
 4365              	 .thumb
 4366 003e 3B61     	 str r3,[r7,#16]
 4367              	.L287:
 4368              	.LBE205:
 4369              	.LBE204:
 4370              	 .loc 1 3112 0 discriminator 2
 4371 0040 FEE7     	 b .L287
 4372              	.L286:
3113:../Dave/Generated/FREERTOS/tasks.c **** 
3114:../Dave/Generated/FREERTOS/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
3115:../Dave/Generated/FREERTOS/tasks.c ****      * event list item here as interrupts won't access the event list item of a
3116:../Dave/Generated/FREERTOS/tasks.c ****      * task that is not in the Blocked state. */
3117:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
 4373              	 .loc 1 3117 0
 4374 0042 0B4B     	 ldr r3,.L288+4
 4375 0044 1B68     	 ldr r3,[r3]
 4376 0046 BA68     	 ldr r2,[r7,#8]
 4377 0048 42F00042 	 orr r2,r2,#-2147483648
 4378 004c 9A61     	 str r2,[r3,#24]
3118:../Dave/Generated/FREERTOS/tasks.c **** 
3119:../Dave/Generated/FREERTOS/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
3120:../Dave/Generated/FREERTOS/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
3121:../Dave/Generated/FREERTOS/tasks.c ****      * event group implementation - and interrupts don't access event groups
3122:../Dave/Generated/FREERTOS/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
3123:../Dave/Generated/FREERTOS/tasks.c ****      * the task level). */
3124:../Dave/Generated/FREERTOS/tasks.c ****     vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4379              	 .loc 1 3124 0
 4380 004e 084B     	 ldr r3,.L288+4
 4381 0050 1B68     	 ldr r3,[r3]
 4382 0052 1833     	 adds r3,r3,#24
 4383 0054 F868     	 ldr r0,[r7,#12]
 4384 0056 1946     	 mov r1,r3
 4385 0058 FFF7FEFF 	 bl vListInsertEnd
3125:../Dave/Generated/FREERTOS/tasks.c **** 
3126:../Dave/Generated/FREERTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4386              	 .loc 1 3126 0
 4387 005c 7868     	 ldr r0,[r7,#4]
 4388 005e 0121     	 movs r1,#1
 4389 0060 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
3127:../Dave/Generated/FREERTOS/tasks.c **** }
 4390              	 .loc 1 3127 0
 4391 0064 1837     	 adds r7,r7,#24
 4392              	.LCFI162:
 4393              	 .cfi_def_cfa_offset 8
 4394 0066 BD46     	 mov sp,r7
 4395              	.LCFI163:
 4396              	 .cfi_def_cfa_register 13
 4397              	 
 4398 0068 80BD     	 pop {r7,pc}
 4399              	.L289:
 4400 006a 00BF     	 .align 2
 4401              	.L288:
 4402 006c 00000000 	 .word uxSchedulerSuspended
 4403 0070 00000000 	 .word pxCurrentTCB
 4404              	 .cfi_endproc
 4405              	.LFE169:
 4407              	 .section .text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4408              	 .align 2
 4409              	 .global vTaskPlaceOnEventListRestricted
 4410              	 .thumb
 4411              	 .thumb_func
 4413              	vTaskPlaceOnEventListRestricted:
 4414              	.LFB170:
3128:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3129:../Dave/Generated/FREERTOS/tasks.c **** 
3130:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TIMERS == 1 )
3131:../Dave/Generated/FREERTOS/tasks.c **** 
3132:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
3133:../Dave/Generated/FREERTOS/tasks.c ****                                           TickType_t xTicksToWait,
3134:../Dave/Generated/FREERTOS/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
3135:../Dave/Generated/FREERTOS/tasks.c ****     {
 4415              	 .loc 1 3135 0
 4416              	 .cfi_startproc
 4417              	 
 4418              	 
 4419 0000 80B5     	 push {r7,lr}
 4420              	.LCFI164:
 4421              	 .cfi_def_cfa_offset 8
 4422              	 .cfi_offset 7,-8
 4423              	 .cfi_offset 14,-4
 4424 0002 86B0     	 sub sp,sp,#24
 4425              	.LCFI165:
 4426              	 .cfi_def_cfa_offset 32
 4427 0004 00AF     	 add r7,sp,#0
 4428              	.LCFI166:
 4429              	 .cfi_def_cfa_register 7
 4430 0006 F860     	 str r0,[r7,#12]
 4431 0008 B960     	 str r1,[r7,#8]
 4432 000a 7A60     	 str r2,[r7,#4]
3136:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxEventList );
 4433              	 .loc 1 3136 0
 4434 000c FB68     	 ldr r3,[r7,#12]
 4435 000e 002B     	 cmp r3,#0
 4436 0010 09D1     	 bne .L291
 4437              	.LBB206:
 4438              	.LBB207:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4439              	 .loc 2 197 0 discriminator 1
 4440              	
 4441 0012 4FF0FC03 	 mov r3,#252
 4442 0016 83F31188 	 msr basepri,r3
 4443 001a BFF36F8F 	 isb 
 4444 001e BFF34F8F 	 dsb 
 4445              	
 4446              	
 4447              	 .thumb
 4448 0022 7B61     	 str r3,[r7,#20]
 4449              	.L292:
 4450              	.LBE207:
 4451              	.LBE206:
 4452              	 .loc 1 3136 0 discriminator 1
 4453 0024 FEE7     	 b .L292
 4454              	.L291:
3137:../Dave/Generated/FREERTOS/tasks.c **** 
3138:../Dave/Generated/FREERTOS/tasks.c ****         /* This function should not be called by application code hence the
3139:../Dave/Generated/FREERTOS/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3140:../Dave/Generated/FREERTOS/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
3141:../Dave/Generated/FREERTOS/tasks.c ****          * it should be called with the scheduler suspended. */
3142:../Dave/Generated/FREERTOS/tasks.c **** 
3143:../Dave/Generated/FREERTOS/tasks.c **** 
3144:../Dave/Generated/FREERTOS/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
3145:../Dave/Generated/FREERTOS/tasks.c ****          * In this case it is assume that this is the only task that is going to
3146:../Dave/Generated/FREERTOS/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
3147:../Dave/Generated/FREERTOS/tasks.c ****          * can be used in place of vListInsert. */
3148:../Dave/Generated/FREERTOS/tasks.c ****         vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4455              	 .loc 1 3148 0
 4456 0026 0A4B     	 ldr r3,.L294
 4457 0028 1B68     	 ldr r3,[r3]
 4458 002a 1833     	 adds r3,r3,#24
 4459 002c F868     	 ldr r0,[r7,#12]
 4460 002e 1946     	 mov r1,r3
 4461 0030 FFF7FEFF 	 bl vListInsertEnd
3149:../Dave/Generated/FREERTOS/tasks.c **** 
3150:../Dave/Generated/FREERTOS/tasks.c ****         /* If the task should block indefinitely then set the block time to a
3151:../Dave/Generated/FREERTOS/tasks.c ****          * value that will be recognised as an indefinite delay inside the
3152:../Dave/Generated/FREERTOS/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
3153:../Dave/Generated/FREERTOS/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
 4462              	 .loc 1 3153 0
 4463 0034 7B68     	 ldr r3,[r7,#4]
 4464 0036 002B     	 cmp r3,#0
 4465 0038 02D0     	 beq .L293
3154:../Dave/Generated/FREERTOS/tasks.c ****         {
3155:../Dave/Generated/FREERTOS/tasks.c ****             xTicksToWait = portMAX_DELAY;
 4466              	 .loc 1 3155 0
 4467 003a 4FF0FF33 	 mov r3,#-1
 4468 003e BB60     	 str r3,[r7,#8]
 4469              	.L293:
3156:../Dave/Generated/FREERTOS/tasks.c ****         }
3157:../Dave/Generated/FREERTOS/tasks.c **** 
3158:../Dave/Generated/FREERTOS/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3159:../Dave/Generated/FREERTOS/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4470              	 .loc 1 3159 0
 4471 0040 B868     	 ldr r0,[r7,#8]
 4472 0042 7968     	 ldr r1,[r7,#4]
 4473 0044 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
3160:../Dave/Generated/FREERTOS/tasks.c ****     }
 4474              	 .loc 1 3160 0
 4475 0048 1837     	 adds r7,r7,#24
 4476              	.LCFI167:
 4477              	 .cfi_def_cfa_offset 8
 4478 004a BD46     	 mov sp,r7
 4479              	.LCFI168:
 4480              	 .cfi_def_cfa_register 13
 4481              	 
 4482 004c 80BD     	 pop {r7,pc}
 4483              	.L295:
 4484 004e 00BF     	 .align 2
 4485              	.L294:
 4486 0050 00000000 	 .word pxCurrentTCB
 4487              	 .cfi_endproc
 4488              	.LFE170:
 4490              	 .section .text.xTaskRemoveFromEventList,"ax",%progbits
 4491              	 .align 2
 4492              	 .global xTaskRemoveFromEventList
 4493              	 .thumb
 4494              	 .thumb_func
 4496              	xTaskRemoveFromEventList:
 4497              	.LFB171:
3161:../Dave/Generated/FREERTOS/tasks.c **** 
3162:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TIMERS */
3163:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3164:../Dave/Generated/FREERTOS/tasks.c **** 
3165:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3166:../Dave/Generated/FREERTOS/tasks.c **** {
 4498              	 .loc 1 3166 0
 4499              	 .cfi_startproc
 4500              	 
 4501              	 
 4502 0000 80B5     	 push {r7,lr}
 4503              	.LCFI169:
 4504              	 .cfi_def_cfa_offset 8
 4505              	 .cfi_offset 7,-8
 4506              	 .cfi_offset 14,-4
 4507 0002 86B0     	 sub sp,sp,#24
 4508              	.LCFI170:
 4509              	 .cfi_def_cfa_offset 32
 4510 0004 00AF     	 add r7,sp,#0
 4511              	.LCFI171:
 4512              	 .cfi_def_cfa_register 7
 4513 0006 7860     	 str r0,[r7,#4]
3167:../Dave/Generated/FREERTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3168:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xReturn;
3169:../Dave/Generated/FREERTOS/tasks.c **** 
3170:../Dave/Generated/FREERTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3171:../Dave/Generated/FREERTOS/tasks.c ****      * called from a critical section within an ISR. */
3172:../Dave/Generated/FREERTOS/tasks.c **** 
3173:../Dave/Generated/FREERTOS/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
3174:../Dave/Generated/FREERTOS/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3175:../Dave/Generated/FREERTOS/tasks.c ****      * the delayed list, and add it to the ready list.
3176:../Dave/Generated/FREERTOS/tasks.c ****      *
3177:../Dave/Generated/FREERTOS/tasks.c ****      * If an event is for a queue that is locked then this function will never
3178:../Dave/Generated/FREERTOS/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
3179:../Dave/Generated/FREERTOS/tasks.c ****      * means exclusive access to the event list is guaranteed here.
3180:../Dave/Generated/FREERTOS/tasks.c ****      *
3181:../Dave/Generated/FREERTOS/tasks.c ****      * This function assumes that a check has already been made to ensure that
3182:../Dave/Generated/FREERTOS/tasks.c ****      * pxEventList is not empty. */
3183:../Dave/Generated/FREERTOS/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
 4514              	 .loc 1 3183 0
 4515 0008 7B68     	 ldr r3,[r7,#4]
 4516 000a DB68     	 ldr r3,[r3,#12]
 4517 000c DB68     	 ldr r3,[r3,#12]
 4518 000e 3B61     	 str r3,[r7,#16]
3184:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4519              	 .loc 1 3184 0
 4520 0010 3B69     	 ldr r3,[r7,#16]
 4521 0012 002B     	 cmp r3,#0
 4522 0014 09D1     	 bne .L297
 4523              	.LBB208:
 4524              	.LBB209:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4525              	 .loc 2 197 0 discriminator 1
 4526              	
 4527 0016 4FF0FC03 	 mov r3,#252
 4528 001a 83F31188 	 msr basepri,r3
 4529 001e BFF36F8F 	 isb 
 4530 0022 BFF34F8F 	 dsb 
 4531              	
 4532              	
 4533              	 .thumb
 4534 0026 FB60     	 str r3,[r7,#12]
 4535              	.L298:
 4536              	.LBE209:
 4537              	.LBE208:
 4538              	 .loc 1 3184 0 discriminator 1
 4539 0028 FEE7     	 b .L298
 4540              	.L297:
3185:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4541              	 .loc 1 3185 0
 4542 002a 3B69     	 ldr r3,[r7,#16]
 4543 002c 1833     	 adds r3,r3,#24
 4544 002e 1846     	 mov r0,r3
 4545 0030 FFF7FEFF 	 bl uxListRemove
3186:../Dave/Generated/FREERTOS/tasks.c **** 
3187:../Dave/Generated/FREERTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4546              	 .loc 1 3187 0
 4547 0034 1E4B     	 ldr r3,.L304
 4548 0036 1B68     	 ldr r3,[r3]
 4549 0038 002B     	 cmp r3,#0
 4550 003a 1ED1     	 bne .L299
3188:../Dave/Generated/FREERTOS/tasks.c ****     {
3189:../Dave/Generated/FREERTOS/tasks.c ****         ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4551              	 .loc 1 3189 0
 4552 003c 3B69     	 ldr r3,[r7,#16]
 4553 003e 0433     	 adds r3,r3,#4
 4554 0040 1846     	 mov r0,r3
 4555 0042 FFF7FEFF 	 bl uxListRemove
3190:../Dave/Generated/FREERTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4556              	 .loc 1 3190 0
 4557 0046 3B69     	 ldr r3,[r7,#16]
 4558 0048 DB6A     	 ldr r3,[r3,#44]
 4559 004a 1A46     	 mov r2,r3
 4560 004c 0123     	 movs r3,#1
 4561 004e 03FA02F2 	 lsl r2,r3,r2
 4562 0052 184B     	 ldr r3,.L304+4
 4563 0054 1B68     	 ldr r3,[r3]
 4564 0056 1343     	 orrs r3,r3,r2
 4565 0058 164A     	 ldr r2,.L304+4
 4566 005a 1360     	 str r3,[r2]
 4567 005c 3B69     	 ldr r3,[r7,#16]
 4568 005e DA6A     	 ldr r2,[r3,#44]
 4569 0060 1346     	 mov r3,r2
 4570 0062 9B00     	 lsls r3,r3,#2
 4571 0064 1344     	 add r3,r3,r2
 4572 0066 9B00     	 lsls r3,r3,#2
 4573 0068 134A     	 ldr r2,.L304+8
 4574 006a 1A44     	 add r2,r2,r3
 4575 006c 3B69     	 ldr r3,[r7,#16]
 4576 006e 0433     	 adds r3,r3,#4
 4577 0070 1046     	 mov r0,r2
 4578 0072 1946     	 mov r1,r3
 4579 0074 FFF7FEFF 	 bl vListInsertEnd
 4580 0078 05E0     	 b .L300
 4581              	.L299:
3191:../Dave/Generated/FREERTOS/tasks.c **** 
3192:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3193:../Dave/Generated/FREERTOS/tasks.c ****             {
3194:../Dave/Generated/FREERTOS/tasks.c ****                 /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3195:../Dave/Generated/FREERTOS/tasks.c ****                  * might be set to the blocked task's time out time.  If the task is
3196:../Dave/Generated/FREERTOS/tasks.c ****                  * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3197:../Dave/Generated/FREERTOS/tasks.c ****                  * normally left unchanged, because it is automatically reset to a new
3198:../Dave/Generated/FREERTOS/tasks.c ****                  * value when the tick count equals xNextTaskUnblockTime.  However if
3199:../Dave/Generated/FREERTOS/tasks.c ****                  * tickless idling is used it might be more important to enter sleep mode
3200:../Dave/Generated/FREERTOS/tasks.c ****                  * at the earliest possible time - so reset xNextTaskUnblockTime here to
3201:../Dave/Generated/FREERTOS/tasks.c ****                  * ensure it is updated at the earliest possible time. */
3202:../Dave/Generated/FREERTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
3203:../Dave/Generated/FREERTOS/tasks.c ****             }
3204:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3205:../Dave/Generated/FREERTOS/tasks.c ****     }
3206:../Dave/Generated/FREERTOS/tasks.c ****     else
3207:../Dave/Generated/FREERTOS/tasks.c ****     {
3208:../Dave/Generated/FREERTOS/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
3209:../Dave/Generated/FREERTOS/tasks.c ****          * pending until the scheduler is resumed. */
3210:../Dave/Generated/FREERTOS/tasks.c ****         vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4582              	 .loc 1 3210 0
 4583 007a 3B69     	 ldr r3,[r7,#16]
 4584 007c 1833     	 adds r3,r3,#24
 4585 007e 0F48     	 ldr r0,.L304+12
 4586 0080 1946     	 mov r1,r3
 4587 0082 FFF7FEFF 	 bl vListInsertEnd
 4588              	.L300:
3211:../Dave/Generated/FREERTOS/tasks.c ****     }
3212:../Dave/Generated/FREERTOS/tasks.c **** 
3213:../Dave/Generated/FREERTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4589              	 .loc 1 3213 0
 4590 0086 3B69     	 ldr r3,[r7,#16]
 4591 0088 DA6A     	 ldr r2,[r3,#44]
 4592 008a 0D4B     	 ldr r3,.L304+16
 4593 008c 1B68     	 ldr r3,[r3]
 4594 008e DB6A     	 ldr r3,[r3,#44]
 4595 0090 9A42     	 cmp r2,r3
 4596 0092 05D9     	 bls .L301
3214:../Dave/Generated/FREERTOS/tasks.c ****     {
3215:../Dave/Generated/FREERTOS/tasks.c ****         /* Return true if the task removed from the event list has a higher
3216:../Dave/Generated/FREERTOS/tasks.c ****          * priority than the calling task.  This allows the calling task to know if
3217:../Dave/Generated/FREERTOS/tasks.c ****          * it should force a context switch now. */
3218:../Dave/Generated/FREERTOS/tasks.c ****         xReturn = pdTRUE;
 4597              	 .loc 1 3218 0
 4598 0094 0123     	 movs r3,#1
 4599 0096 7B61     	 str r3,[r7,#20]
3219:../Dave/Generated/FREERTOS/tasks.c **** 
3220:../Dave/Generated/FREERTOS/tasks.c ****         /* Mark that a yield is pending in case the user is not using the
3221:../Dave/Generated/FREERTOS/tasks.c ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3222:../Dave/Generated/FREERTOS/tasks.c ****         xYieldPending = pdTRUE;
 4600              	 .loc 1 3222 0
 4601 0098 0A4B     	 ldr r3,.L304+20
 4602 009a 0122     	 movs r2,#1
 4603 009c 1A60     	 str r2,[r3]
 4604 009e 01E0     	 b .L302
 4605              	.L301:
3223:../Dave/Generated/FREERTOS/tasks.c ****     }
3224:../Dave/Generated/FREERTOS/tasks.c ****     else
3225:../Dave/Generated/FREERTOS/tasks.c ****     {
3226:../Dave/Generated/FREERTOS/tasks.c ****         xReturn = pdFALSE;
 4606              	 .loc 1 3226 0
 4607 00a0 0023     	 movs r3,#0
 4608 00a2 7B61     	 str r3,[r7,#20]
 4609              	.L302:
3227:../Dave/Generated/FREERTOS/tasks.c ****     }
3228:../Dave/Generated/FREERTOS/tasks.c **** 
3229:../Dave/Generated/FREERTOS/tasks.c ****     return xReturn;
 4610              	 .loc 1 3229 0
 4611 00a4 7B69     	 ldr r3,[r7,#20]
3230:../Dave/Generated/FREERTOS/tasks.c **** }
 4612              	 .loc 1 3230 0
 4613 00a6 1846     	 mov r0,r3
 4614 00a8 1837     	 adds r7,r7,#24
 4615              	.LCFI172:
 4616              	 .cfi_def_cfa_offset 8
 4617 00aa BD46     	 mov sp,r7
 4618              	.LCFI173:
 4619              	 .cfi_def_cfa_register 13
 4620              	 
 4621 00ac 80BD     	 pop {r7,pc}
 4622              	.L305:
 4623 00ae 00BF     	 .align 2
 4624              	.L304:
 4625 00b0 00000000 	 .word uxSchedulerSuspended
 4626 00b4 00000000 	 .word uxTopReadyPriority
 4627 00b8 00000000 	 .word pxReadyTasksLists
 4628 00bc 00000000 	 .word xPendingReadyList
 4629 00c0 00000000 	 .word pxCurrentTCB
 4630 00c4 00000000 	 .word xYieldPending
 4631              	 .cfi_endproc
 4632              	.LFE171:
 4634              	 .section .text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4635              	 .align 2
 4636              	 .global vTaskRemoveFromUnorderedEventList
 4637              	 .thumb
 4638              	 .thumb_func
 4640              	vTaskRemoveFromUnorderedEventList:
 4641              	.LFB172:
3231:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3232:../Dave/Generated/FREERTOS/tasks.c **** 
3233:../Dave/Generated/FREERTOS/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3234:../Dave/Generated/FREERTOS/tasks.c ****                                         const TickType_t xItemValue )
3235:../Dave/Generated/FREERTOS/tasks.c **** {
 4642              	 .loc 1 3235 0
 4643              	 .cfi_startproc
 4644              	 
 4645              	 
 4646 0000 80B5     	 push {r7,lr}
 4647              	.LCFI174:
 4648              	 .cfi_def_cfa_offset 8
 4649              	 .cfi_offset 7,-8
 4650              	 .cfi_offset 14,-4
 4651 0002 86B0     	 sub sp,sp,#24
 4652              	.LCFI175:
 4653              	 .cfi_def_cfa_offset 32
 4654 0004 00AF     	 add r7,sp,#0
 4655              	.LCFI176:
 4656              	 .cfi_def_cfa_register 7
 4657 0006 7860     	 str r0,[r7,#4]
 4658 0008 3960     	 str r1,[r7]
3236:../Dave/Generated/FREERTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3237:../Dave/Generated/FREERTOS/tasks.c **** 
3238:../Dave/Generated/FREERTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3239:../Dave/Generated/FREERTOS/tasks.c ****      * the event flags implementation. */
3240:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != pdFALSE );
 4659              	 .loc 1 3240 0
 4660 000a 284B     	 ldr r3,.L312
 4661 000c 1B68     	 ldr r3,[r3]
 4662 000e 002B     	 cmp r3,#0
 4663 0010 09D1     	 bne .L307
 4664              	.LBB210:
 4665              	.LBB211:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4666              	 .loc 2 197 0 discriminator 1
 4667              	
 4668 0012 4FF0FC03 	 mov r3,#252
 4669 0016 83F31188 	 msr basepri,r3
 4670 001a BFF36F8F 	 isb 
 4671 001e BFF34F8F 	 dsb 
 4672              	
 4673              	
 4674              	 .thumb
 4675 0022 3B61     	 str r3,[r7,#16]
 4676              	.L308:
 4677              	.LBE211:
 4678              	.LBE210:
 4679              	 .loc 1 3240 0 discriminator 1
 4680 0024 FEE7     	 b .L308
 4681              	.L307:
3241:../Dave/Generated/FREERTOS/tasks.c **** 
3242:../Dave/Generated/FREERTOS/tasks.c ****     /* Store the new item value in the event list. */
3243:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4682              	 .loc 1 3243 0
 4683 0026 3B68     	 ldr r3,[r7]
 4684 0028 43F00042 	 orr r2,r3,#-2147483648
 4685 002c 7B68     	 ldr r3,[r7,#4]
 4686 002e 1A60     	 str r2,[r3]
3244:../Dave/Generated/FREERTOS/tasks.c **** 
3245:../Dave/Generated/FREERTOS/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
3246:../Dave/Generated/FREERTOS/tasks.c ****      * event flags. */
3247:../Dave/Generated/FREERTOS/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
 4687              	 .loc 1 3247 0
 4688 0030 7B68     	 ldr r3,[r7,#4]
 4689 0032 DB68     	 ldr r3,[r3,#12]
 4690 0034 7B61     	 str r3,[r7,#20]
3248:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4691              	 .loc 1 3248 0
 4692 0036 7B69     	 ldr r3,[r7,#20]
 4693 0038 002B     	 cmp r3,#0
 4694 003a 09D1     	 bne .L309
 4695              	.LBB212:
 4696              	.LBB213:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4697              	 .loc 2 197 0 discriminator 1
 4698              	
 4699 003c 4FF0FC03 	 mov r3,#252
 4700 0040 83F31188 	 msr basepri,r3
 4701 0044 BFF36F8F 	 isb 
 4702 0048 BFF34F8F 	 dsb 
 4703              	
 4704              	
 4705              	 .thumb
 4706 004c FB60     	 str r3,[r7,#12]
 4707              	.L310:
 4708              	.LBE213:
 4709              	.LBE212:
 4710              	 .loc 1 3248 0 discriminator 2
 4711 004e FEE7     	 b .L310
 4712              	.L309:
3249:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) uxListRemove( pxEventListItem );
 4713              	 .loc 1 3249 0
 4714 0050 7868     	 ldr r0,[r7,#4]
 4715 0052 FFF7FEFF 	 bl uxListRemove
3250:../Dave/Generated/FREERTOS/tasks.c **** 
3251:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3252:../Dave/Generated/FREERTOS/tasks.c ****         {
3253:../Dave/Generated/FREERTOS/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3254:../Dave/Generated/FREERTOS/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
3255:../Dave/Generated/FREERTOS/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3256:../Dave/Generated/FREERTOS/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
3257:../Dave/Generated/FREERTOS/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
3258:../Dave/Generated/FREERTOS/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
3259:../Dave/Generated/FREERTOS/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3260:../Dave/Generated/FREERTOS/tasks.c ****              * ensure it is updated at the earliest possible time. */
3261:../Dave/Generated/FREERTOS/tasks.c ****             prvResetNextTaskUnblockTime();
3262:../Dave/Generated/FREERTOS/tasks.c ****         }
3263:../Dave/Generated/FREERTOS/tasks.c ****     #endif
3264:../Dave/Generated/FREERTOS/tasks.c **** 
3265:../Dave/Generated/FREERTOS/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
3266:../Dave/Generated/FREERTOS/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
3267:../Dave/Generated/FREERTOS/tasks.c ****      * lists. */
3268:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4716              	 .loc 1 3268 0
 4717 0056 7B69     	 ldr r3,[r7,#20]
 4718 0058 0433     	 adds r3,r3,#4
 4719 005a 1846     	 mov r0,r3
 4720 005c FFF7FEFF 	 bl uxListRemove
3269:../Dave/Generated/FREERTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4721              	 .loc 1 3269 0
 4722 0060 7B69     	 ldr r3,[r7,#20]
 4723 0062 DB6A     	 ldr r3,[r3,#44]
 4724 0064 1A46     	 mov r2,r3
 4725 0066 0123     	 movs r3,#1
 4726 0068 03FA02F2 	 lsl r2,r3,r2
 4727 006c 104B     	 ldr r3,.L312+4
 4728 006e 1B68     	 ldr r3,[r3]
 4729 0070 1343     	 orrs r3,r3,r2
 4730 0072 0F4A     	 ldr r2,.L312+4
 4731 0074 1360     	 str r3,[r2]
 4732 0076 7B69     	 ldr r3,[r7,#20]
 4733 0078 DA6A     	 ldr r2,[r3,#44]
 4734 007a 1346     	 mov r3,r2
 4735 007c 9B00     	 lsls r3,r3,#2
 4736 007e 1344     	 add r3,r3,r2
 4737 0080 9B00     	 lsls r3,r3,#2
 4738 0082 0C4A     	 ldr r2,.L312+8
 4739 0084 1A44     	 add r2,r2,r3
 4740 0086 7B69     	 ldr r3,[r7,#20]
 4741 0088 0433     	 adds r3,r3,#4
 4742 008a 1046     	 mov r0,r2
 4743 008c 1946     	 mov r1,r3
 4744 008e FFF7FEFF 	 bl vListInsertEnd
3270:../Dave/Generated/FREERTOS/tasks.c **** 
3271:../Dave/Generated/FREERTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4745              	 .loc 1 3271 0
 4746 0092 7B69     	 ldr r3,[r7,#20]
 4747 0094 DA6A     	 ldr r2,[r3,#44]
 4748 0096 084B     	 ldr r3,.L312+12
 4749 0098 1B68     	 ldr r3,[r3]
 4750 009a DB6A     	 ldr r3,[r3,#44]
 4751 009c 9A42     	 cmp r2,r3
 4752 009e 02D9     	 bls .L306
3272:../Dave/Generated/FREERTOS/tasks.c ****     {
3273:../Dave/Generated/FREERTOS/tasks.c ****         /* The unblocked task has a priority above that of the calling task, so
3274:../Dave/Generated/FREERTOS/tasks.c ****          * a context switch is required.  This function is called with the
3275:../Dave/Generated/FREERTOS/tasks.c ****          * scheduler suspended so xYieldPending is set so the context switch
3276:../Dave/Generated/FREERTOS/tasks.c ****          * occurs immediately that the scheduler is resumed (unsuspended). */
3277:../Dave/Generated/FREERTOS/tasks.c ****         xYieldPending = pdTRUE;
 4753              	 .loc 1 3277 0
 4754 00a0 064B     	 ldr r3,.L312+16
 4755 00a2 0122     	 movs r2,#1
 4756 00a4 1A60     	 str r2,[r3]
 4757              	.L306:
3278:../Dave/Generated/FREERTOS/tasks.c ****     }
3279:../Dave/Generated/FREERTOS/tasks.c **** }
 4758              	 .loc 1 3279 0
 4759 00a6 1837     	 adds r7,r7,#24
 4760              	.LCFI177:
 4761              	 .cfi_def_cfa_offset 8
 4762 00a8 BD46     	 mov sp,r7
 4763              	.LCFI178:
 4764              	 .cfi_def_cfa_register 13
 4765              	 
 4766 00aa 80BD     	 pop {r7,pc}
 4767              	.L313:
 4768              	 .align 2
 4769              	.L312:
 4770 00ac 00000000 	 .word uxSchedulerSuspended
 4771 00b0 00000000 	 .word uxTopReadyPriority
 4772 00b4 00000000 	 .word pxReadyTasksLists
 4773 00b8 00000000 	 .word pxCurrentTCB
 4774 00bc 00000000 	 .word xYieldPending
 4775              	 .cfi_endproc
 4776              	.LFE172:
 4778              	 .section .text.vTaskSetTimeOutState,"ax",%progbits
 4779              	 .align 2
 4780              	 .global vTaskSetTimeOutState
 4781              	 .thumb
 4782              	 .thumb_func
 4784              	vTaskSetTimeOutState:
 4785              	.LFB173:
3280:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3281:../Dave/Generated/FREERTOS/tasks.c **** 
3282:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3283:../Dave/Generated/FREERTOS/tasks.c **** {
 4786              	 .loc 1 3283 0
 4787              	 .cfi_startproc
 4788              	 
 4789              	 
 4790 0000 80B5     	 push {r7,lr}
 4791              	.LCFI179:
 4792              	 .cfi_def_cfa_offset 8
 4793              	 .cfi_offset 7,-8
 4794              	 .cfi_offset 14,-4
 4795 0002 84B0     	 sub sp,sp,#16
 4796              	.LCFI180:
 4797              	 .cfi_def_cfa_offset 24
 4798 0004 00AF     	 add r7,sp,#0
 4799              	.LCFI181:
 4800              	 .cfi_def_cfa_register 7
 4801 0006 7860     	 str r0,[r7,#4]
3284:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxTimeOut );
 4802              	 .loc 1 3284 0
 4803 0008 7B68     	 ldr r3,[r7,#4]
 4804 000a 002B     	 cmp r3,#0
 4805 000c 09D1     	 bne .L315
 4806              	.LBB214:
 4807              	.LBB215:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4808              	 .loc 2 197 0 discriminator 1
 4809              	
 4810 000e 4FF0FC03 	 mov r3,#252
 4811 0012 83F31188 	 msr basepri,r3
 4812 0016 BFF36F8F 	 isb 
 4813 001a BFF34F8F 	 dsb 
 4814              	
 4815              	
 4816              	 .thumb
 4817 001e FB60     	 str r3,[r7,#12]
 4818              	.L316:
 4819              	.LBE215:
 4820              	.LBE214:
 4821              	 .loc 1 3284 0 discriminator 1
 4822 0020 FEE7     	 b .L316
 4823              	.L315:
3285:../Dave/Generated/FREERTOS/tasks.c ****     taskENTER_CRITICAL();
 4824              	 .loc 1 3285 0
 4825 0022 FFF7FEFF 	 bl vPortEnterCritical
3286:../Dave/Generated/FREERTOS/tasks.c ****     {
3287:../Dave/Generated/FREERTOS/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
 4826              	 .loc 1 3287 0
 4827 0026 064B     	 ldr r3,.L317
 4828 0028 1A68     	 ldr r2,[r3]
 4829 002a 7B68     	 ldr r3,[r7,#4]
 4830 002c 1A60     	 str r2,[r3]
3288:../Dave/Generated/FREERTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4831              	 .loc 1 3288 0
 4832 002e 054B     	 ldr r3,.L317+4
 4833 0030 1A68     	 ldr r2,[r3]
 4834 0032 7B68     	 ldr r3,[r7,#4]
 4835 0034 5A60     	 str r2,[r3,#4]
3289:../Dave/Generated/FREERTOS/tasks.c ****     }
3290:../Dave/Generated/FREERTOS/tasks.c ****     taskEXIT_CRITICAL();
 4836              	 .loc 1 3290 0
 4837 0036 FFF7FEFF 	 bl vPortExitCritical
3291:../Dave/Generated/FREERTOS/tasks.c **** }
 4838              	 .loc 1 3291 0
 4839 003a 1037     	 adds r7,r7,#16
 4840              	.LCFI182:
 4841              	 .cfi_def_cfa_offset 8
 4842 003c BD46     	 mov sp,r7
 4843              	.LCFI183:
 4844              	 .cfi_def_cfa_register 13
 4845              	 
 4846 003e 80BD     	 pop {r7,pc}
 4847              	.L318:
 4848              	 .align 2
 4849              	.L317:
 4850 0040 00000000 	 .word xNumOfOverflows
 4851 0044 00000000 	 .word xTickCount
 4852              	 .cfi_endproc
 4853              	.LFE173:
 4855              	 .section .text.vTaskInternalSetTimeOutState,"ax",%progbits
 4856              	 .align 2
 4857              	 .global vTaskInternalSetTimeOutState
 4858              	 .thumb
 4859              	 .thumb_func
 4861              	vTaskInternalSetTimeOutState:
 4862              	.LFB174:
3292:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3293:../Dave/Generated/FREERTOS/tasks.c **** 
3294:../Dave/Generated/FREERTOS/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3295:../Dave/Generated/FREERTOS/tasks.c **** {
 4863              	 .loc 1 3295 0
 4864              	 .cfi_startproc
 4865              	 
 4866              	 
 4867              	 
 4868 0000 80B4     	 push {r7}
 4869              	.LCFI184:
 4870              	 .cfi_def_cfa_offset 4
 4871              	 .cfi_offset 7,-4
 4872 0002 83B0     	 sub sp,sp,#12
 4873              	.LCFI185:
 4874              	 .cfi_def_cfa_offset 16
 4875 0004 00AF     	 add r7,sp,#0
 4876              	.LCFI186:
 4877              	 .cfi_def_cfa_register 7
 4878 0006 7860     	 str r0,[r7,#4]
3296:../Dave/Generated/FREERTOS/tasks.c ****     /* For internal use only as it does not use a critical section. */
3297:../Dave/Generated/FREERTOS/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
 4879              	 .loc 1 3297 0
 4880 0008 064B     	 ldr r3,.L320
 4881 000a 1A68     	 ldr r2,[r3]
 4882 000c 7B68     	 ldr r3,[r7,#4]
 4883 000e 1A60     	 str r2,[r3]
3298:../Dave/Generated/FREERTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 4884              	 .loc 1 3298 0
 4885 0010 054B     	 ldr r3,.L320+4
 4886 0012 1A68     	 ldr r2,[r3]
 4887 0014 7B68     	 ldr r3,[r7,#4]
 4888 0016 5A60     	 str r2,[r3,#4]
3299:../Dave/Generated/FREERTOS/tasks.c **** }
 4889              	 .loc 1 3299 0
 4890 0018 0C37     	 adds r7,r7,#12
 4891              	.LCFI187:
 4892              	 .cfi_def_cfa_offset 4
 4893 001a BD46     	 mov sp,r7
 4894              	.LCFI188:
 4895              	 .cfi_def_cfa_register 13
 4896              	 
 4897 001c 5DF8047B 	 ldr r7,[sp],#4
 4898              	.LCFI189:
 4899              	 .cfi_restore 7
 4900              	 .cfi_def_cfa_offset 0
 4901 0020 7047     	 bx lr
 4902              	.L321:
 4903 0022 00BF     	 .align 2
 4904              	.L320:
 4905 0024 00000000 	 .word xNumOfOverflows
 4906 0028 00000000 	 .word xTickCount
 4907              	 .cfi_endproc
 4908              	.LFE174:
 4910              	 .section .text.xTaskCheckForTimeOut,"ax",%progbits
 4911              	 .align 2
 4912              	 .global xTaskCheckForTimeOut
 4913              	 .thumb
 4914              	 .thumb_func
 4916              	xTaskCheckForTimeOut:
 4917              	.LFB175:
3300:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3301:../Dave/Generated/FREERTOS/tasks.c **** 
3302:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3303:../Dave/Generated/FREERTOS/tasks.c ****                                  TickType_t * const pxTicksToWait )
3304:../Dave/Generated/FREERTOS/tasks.c **** {
 4918              	 .loc 1 3304 0
 4919              	 .cfi_startproc
 4920              	 
 4921              	 
 4922 0000 80B5     	 push {r7,lr}
 4923              	.LCFI190:
 4924              	 .cfi_def_cfa_offset 8
 4925              	 .cfi_offset 7,-8
 4926              	 .cfi_offset 14,-4
 4927 0002 88B0     	 sub sp,sp,#32
 4928              	.LCFI191:
 4929              	 .cfi_def_cfa_offset 40
 4930 0004 00AF     	 add r7,sp,#0
 4931              	.LCFI192:
 4932              	 .cfi_def_cfa_register 7
 4933 0006 7860     	 str r0,[r7,#4]
 4934 0008 3960     	 str r1,[r7]
3305:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xReturn;
3306:../Dave/Generated/FREERTOS/tasks.c **** 
3307:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxTimeOut );
 4935              	 .loc 1 3307 0
 4936 000a 7B68     	 ldr r3,[r7,#4]
 4937 000c 002B     	 cmp r3,#0
 4938 000e 09D1     	 bne .L323
 4939              	.LBB216:
 4940              	.LBB217:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4941              	 .loc 2 197 0 discriminator 1
 4942              	
 4943 0010 4FF0FC03 	 mov r3,#252
 4944 0014 83F31188 	 msr basepri,r3
 4945 0018 BFF36F8F 	 isb 
 4946 001c BFF34F8F 	 dsb 
 4947              	
 4948              	
 4949              	 .thumb
 4950 0020 3B61     	 str r3,[r7,#16]
 4951              	.L324:
 4952              	.LBE217:
 4953              	.LBE216:
 4954              	 .loc 1 3307 0 discriminator 1
 4955 0022 FEE7     	 b .L324
 4956              	.L323:
3308:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4957              	 .loc 1 3308 0
 4958 0024 3B68     	 ldr r3,[r7]
 4959 0026 002B     	 cmp r3,#0
 4960 0028 09D1     	 bne .L325
 4961              	.LBB218:
 4962              	.LBB219:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4963              	 .loc 2 197 0 discriminator 1
 4964              	
 4965 002a 4FF0FC03 	 mov r3,#252
 4966 002e 83F31188 	 msr basepri,r3
 4967 0032 BFF36F8F 	 isb 
 4968 0036 BFF34F8F 	 dsb 
 4969              	
 4970              	
 4971              	 .thumb
 4972 003a FB60     	 str r3,[r7,#12]
 4973              	.L326:
 4974              	.LBE219:
 4975              	.LBE218:
 4976              	 .loc 1 3308 0 discriminator 2
 4977 003c FEE7     	 b .L326
 4978              	.L325:
3309:../Dave/Generated/FREERTOS/tasks.c **** 
3310:../Dave/Generated/FREERTOS/tasks.c ****     taskENTER_CRITICAL();
 4979              	 .loc 1 3310 0
 4980 003e FFF7FEFF 	 bl vPortEnterCritical
 4981              	.LBB220:
3311:../Dave/Generated/FREERTOS/tasks.c ****     {
3312:../Dave/Generated/FREERTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
3313:../Dave/Generated/FREERTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
 4982              	 .loc 1 3313 0
 4983 0042 264B     	 ldr r3,.L333
 4984 0044 1B68     	 ldr r3,[r3]
 4985 0046 BB61     	 str r3,[r7,#24]
3314:../Dave/Generated/FREERTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4986              	 .loc 1 3314 0
 4987 0048 7B68     	 ldr r3,[r7,#4]
 4988 004a 5B68     	 ldr r3,[r3,#4]
 4989 004c BA69     	 ldr r2,[r7,#24]
 4990 004e D31A     	 subs r3,r2,r3
 4991 0050 7B61     	 str r3,[r7,#20]
3315:../Dave/Generated/FREERTOS/tasks.c **** 
3316:../Dave/Generated/FREERTOS/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
3317:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 4992              	 .loc 1 3317 0
 4993 0052 234B     	 ldr r3,.L333+4
 4994 0054 1B68     	 ldr r3,[r3]
 4995 0056 93F86D30 	 ldrb r3,[r3,#109]
 4996 005a 002B     	 cmp r3,#0
 4997 005c 07D0     	 beq .L327
3318:../Dave/Generated/FREERTOS/tasks.c ****             {
3319:../Dave/Generated/FREERTOS/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
3320:../Dave/Generated/FREERTOS/tasks.c ****                  * but has the same result. */
3321:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
 4998              	 .loc 1 3321 0
 4999 005e 204B     	 ldr r3,.L333+4
 5000 0060 1B68     	 ldr r3,[r3]
 5001 0062 0022     	 movs r2,#0
 5002 0064 83F86D20 	 strb r2,[r3,#109]
3322:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdTRUE;
 5003              	 .loc 1 3322 0
 5004 0068 0123     	 movs r3,#1
 5005 006a FB61     	 str r3,[r7,#28]
 5006 006c 2EE0     	 b .L328
 5007              	.L327:
3323:../Dave/Generated/FREERTOS/tasks.c ****             }
3324:../Dave/Generated/FREERTOS/tasks.c ****             else
3325:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3326:../Dave/Generated/FREERTOS/tasks.c **** 
3327:../Dave/Generated/FREERTOS/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3328:../Dave/Generated/FREERTOS/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
 5008              	 .loc 1 3328 0
 5009 006e 3B68     	 ldr r3,[r7]
 5010 0070 1B68     	 ldr r3,[r3]
 5011 0072 B3F1FF3F 	 cmp r3,#-1
 5012 0076 02D1     	 bne .L329
3329:../Dave/Generated/FREERTOS/tasks.c ****             {
3330:../Dave/Generated/FREERTOS/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3331:../Dave/Generated/FREERTOS/tasks.c ****                  * specified is the maximum block time then the task should block
3332:../Dave/Generated/FREERTOS/tasks.c ****                  * indefinitely, and therefore never time out. */
3333:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdFALSE;
 5013              	 .loc 1 3333 0
 5014 0078 0023     	 movs r3,#0
 5015 007a FB61     	 str r3,[r7,#28]
 5016 007c 26E0     	 b .L328
 5017              	.L329:
3334:../Dave/Generated/FREERTOS/tasks.c ****             }
3335:../Dave/Generated/FREERTOS/tasks.c ****             else
3336:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3337:../Dave/Generated/FREERTOS/tasks.c **** 
3338:../Dave/Generated/FREERTOS/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
 5018              	 .loc 1 3338 0
 5019 007e 7B68     	 ldr r3,[r7,#4]
 5020 0080 1A68     	 ldr r2,[r3]
 5021 0082 184B     	 ldr r3,.L333+8
 5022 0084 1B68     	 ldr r3,[r3]
 5023 0086 9A42     	 cmp r2,r3
 5024 0088 0AD0     	 beq .L330
 5025              	 .loc 1 3338 0 is_stmt 0 discriminator 1
 5026 008a 7B68     	 ldr r3,[r7,#4]
 5027 008c 5A68     	 ldr r2,[r3,#4]
 5028 008e BB69     	 ldr r3,[r7,#24]
 5029 0090 9A42     	 cmp r2,r3
 5030 0092 05D8     	 bhi .L330
3339:../Dave/Generated/FREERTOS/tasks.c ****         {
3340:../Dave/Generated/FREERTOS/tasks.c ****             /* The tick count is greater than the time at which
3341:../Dave/Generated/FREERTOS/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
3342:../Dave/Generated/FREERTOS/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3343:../Dave/Generated/FREERTOS/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
3344:../Dave/Generated/FREERTOS/tasks.c ****              * was called. */
3345:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdTRUE;
 5031              	 .loc 1 3345 0 is_stmt 1
 5032 0094 0123     	 movs r3,#1
 5033 0096 FB61     	 str r3,[r7,#28]
3346:../Dave/Generated/FREERTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 5034              	 .loc 1 3346 0
 5035 0098 3B68     	 ldr r3,[r7]
 5036 009a 0022     	 movs r2,#0
 5037 009c 1A60     	 str r2,[r3]
 5038 009e 15E0     	 b .L328
 5039              	.L330:
3347:../Dave/Generated/FREERTOS/tasks.c ****         }
3348:../Dave/Generated/FREERTOS/tasks.c ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
 5040              	 .loc 1 3348 0
 5041 00a0 3B68     	 ldr r3,[r7]
 5042 00a2 1A68     	 ldr r2,[r3]
 5043 00a4 7B69     	 ldr r3,[r7,#20]
 5044 00a6 9A42     	 cmp r2,r3
 5045 00a8 0BD9     	 bls .L331
3349:../Dave/Generated/FREERTOS/tasks.c ****         {
3350:../Dave/Generated/FREERTOS/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
3351:../Dave/Generated/FREERTOS/tasks.c ****             *pxTicksToWait -= xElapsedTime;
 5046              	 .loc 1 3351 0
 5047 00aa 3B68     	 ldr r3,[r7]
 5048 00ac 1A68     	 ldr r2,[r3]
 5049 00ae 7B69     	 ldr r3,[r7,#20]
 5050 00b0 D21A     	 subs r2,r2,r3
 5051 00b2 3B68     	 ldr r3,[r7]
 5052 00b4 1A60     	 str r2,[r3]
3352:../Dave/Generated/FREERTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 5053              	 .loc 1 3352 0
 5054 00b6 7868     	 ldr r0,[r7,#4]
 5055 00b8 FFF7FEFF 	 bl vTaskInternalSetTimeOutState
3353:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdFALSE;
 5056              	 .loc 1 3353 0
 5057 00bc 0023     	 movs r3,#0
 5058 00be FB61     	 str r3,[r7,#28]
 5059 00c0 04E0     	 b .L328
 5060              	.L331:
3354:../Dave/Generated/FREERTOS/tasks.c ****         }
3355:../Dave/Generated/FREERTOS/tasks.c ****         else
3356:../Dave/Generated/FREERTOS/tasks.c ****         {
3357:../Dave/Generated/FREERTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 5061              	 .loc 1 3357 0
 5062 00c2 3B68     	 ldr r3,[r7]
 5063 00c4 0022     	 movs r2,#0
 5064 00c6 1A60     	 str r2,[r3]
3358:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdTRUE;
 5065              	 .loc 1 3358 0
 5066 00c8 0123     	 movs r3,#1
 5067 00ca FB61     	 str r3,[r7,#28]
 5068              	.L328:
 5069              	.LBE220:
3359:../Dave/Generated/FREERTOS/tasks.c ****         }
3360:../Dave/Generated/FREERTOS/tasks.c ****     }
3361:../Dave/Generated/FREERTOS/tasks.c ****     taskEXIT_CRITICAL();
 5070              	 .loc 1 3361 0
 5071 00cc FFF7FEFF 	 bl vPortExitCritical
3362:../Dave/Generated/FREERTOS/tasks.c **** 
3363:../Dave/Generated/FREERTOS/tasks.c ****     return xReturn;
 5072              	 .loc 1 3363 0
 5073 00d0 FB69     	 ldr r3,[r7,#28]
3364:../Dave/Generated/FREERTOS/tasks.c **** }
 5074              	 .loc 1 3364 0
 5075 00d2 1846     	 mov r0,r3
 5076 00d4 2037     	 adds r7,r7,#32
 5077              	.LCFI193:
 5078              	 .cfi_def_cfa_offset 8
 5079 00d6 BD46     	 mov sp,r7
 5080              	.LCFI194:
 5081              	 .cfi_def_cfa_register 13
 5082              	 
 5083 00d8 80BD     	 pop {r7,pc}
 5084              	.L334:
 5085 00da 00BF     	 .align 2
 5086              	.L333:
 5087 00dc 00000000 	 .word xTickCount
 5088 00e0 00000000 	 .word pxCurrentTCB
 5089 00e4 00000000 	 .word xNumOfOverflows
 5090              	 .cfi_endproc
 5091              	.LFE175:
 5093              	 .section .text.vTaskMissedYield,"ax",%progbits
 5094              	 .align 2
 5095              	 .global vTaskMissedYield
 5096              	 .thumb
 5097              	 .thumb_func
 5099              	vTaskMissedYield:
 5100              	.LFB176:
3365:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3366:../Dave/Generated/FREERTOS/tasks.c **** 
3367:../Dave/Generated/FREERTOS/tasks.c **** void vTaskMissedYield( void )
3368:../Dave/Generated/FREERTOS/tasks.c **** {
 5101              	 .loc 1 3368 0
 5102              	 .cfi_startproc
 5103              	 
 5104              	 
 5105              	 
 5106 0000 80B4     	 push {r7}
 5107              	.LCFI195:
 5108              	 .cfi_def_cfa_offset 4
 5109              	 .cfi_offset 7,-4
 5110 0002 00AF     	 add r7,sp,#0
 5111              	.LCFI196:
 5112              	 .cfi_def_cfa_register 7
3369:../Dave/Generated/FREERTOS/tasks.c ****     xYieldPending = pdTRUE;
 5113              	 .loc 1 3369 0
 5114 0004 034B     	 ldr r3,.L336
 5115 0006 0122     	 movs r2,#1
 5116 0008 1A60     	 str r2,[r3]
3370:../Dave/Generated/FREERTOS/tasks.c **** }
 5117              	 .loc 1 3370 0
 5118 000a BD46     	 mov sp,r7
 5119              	.LCFI197:
 5120              	 .cfi_def_cfa_register 13
 5121              	 
 5122 000c 5DF8047B 	 ldr r7,[sp],#4
 5123              	.LCFI198:
 5124              	 .cfi_restore 7
 5125              	 .cfi_def_cfa_offset 0
 5126 0010 7047     	 bx lr
 5127              	.L337:
 5128 0012 00BF     	 .align 2
 5129              	.L336:
 5130 0014 00000000 	 .word xYieldPending
 5131              	 .cfi_endproc
 5132              	.LFE176:
 5134              	 .section .text.uxTaskGetTaskNumber,"ax",%progbits
 5135              	 .align 2
 5136              	 .global uxTaskGetTaskNumber
 5137              	 .thumb
 5138              	 .thumb_func
 5140              	uxTaskGetTaskNumber:
 5141              	.LFB177:
3371:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3372:../Dave/Generated/FREERTOS/tasks.c **** 
3373:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3374:../Dave/Generated/FREERTOS/tasks.c **** 
3375:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3376:../Dave/Generated/FREERTOS/tasks.c ****     {
 5142              	 .loc 1 3376 0
 5143              	 .cfi_startproc
 5144              	 
 5145              	 
 5146              	 
 5147 0000 80B4     	 push {r7}
 5148              	.LCFI199:
 5149              	 .cfi_def_cfa_offset 4
 5150              	 .cfi_offset 7,-4
 5151 0002 85B0     	 sub sp,sp,#20
 5152              	.LCFI200:
 5153              	 .cfi_def_cfa_offset 24
 5154 0004 00AF     	 add r7,sp,#0
 5155              	.LCFI201:
 5156              	 .cfi_def_cfa_register 7
 5157 0006 7860     	 str r0,[r7,#4]
3377:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxReturn;
3378:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t const * pxTCB;
3379:../Dave/Generated/FREERTOS/tasks.c **** 
3380:../Dave/Generated/FREERTOS/tasks.c ****         if( xTask != NULL )
 5158              	 .loc 1 3380 0
 5159 0008 7B68     	 ldr r3,[r7,#4]
 5160 000a 002B     	 cmp r3,#0
 5161 000c 05D0     	 beq .L339
3381:../Dave/Generated/FREERTOS/tasks.c ****         {
3382:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = xTask;
 5162              	 .loc 1 3382 0
 5163 000e 7B68     	 ldr r3,[r7,#4]
 5164 0010 BB60     	 str r3,[r7,#8]
3383:../Dave/Generated/FREERTOS/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
 5165              	 .loc 1 3383 0
 5166 0012 BB68     	 ldr r3,[r7,#8]
 5167 0014 9B6C     	 ldr r3,[r3,#72]
 5168 0016 FB60     	 str r3,[r7,#12]
 5169 0018 01E0     	 b .L340
 5170              	.L339:
3384:../Dave/Generated/FREERTOS/tasks.c ****         }
3385:../Dave/Generated/FREERTOS/tasks.c ****         else
3386:../Dave/Generated/FREERTOS/tasks.c ****         {
3387:../Dave/Generated/FREERTOS/tasks.c ****             uxReturn = 0U;
 5171              	 .loc 1 3387 0
 5172 001a 0023     	 movs r3,#0
 5173 001c FB60     	 str r3,[r7,#12]
 5174              	.L340:
3388:../Dave/Generated/FREERTOS/tasks.c ****         }
3389:../Dave/Generated/FREERTOS/tasks.c **** 
3390:../Dave/Generated/FREERTOS/tasks.c ****         return uxReturn;
 5175              	 .loc 1 3390 0
 5176 001e FB68     	 ldr r3,[r7,#12]
3391:../Dave/Generated/FREERTOS/tasks.c ****     }
 5177              	 .loc 1 3391 0
 5178 0020 1846     	 mov r0,r3
 5179 0022 1437     	 adds r7,r7,#20
 5180              	.LCFI202:
 5181              	 .cfi_def_cfa_offset 4
 5182 0024 BD46     	 mov sp,r7
 5183              	.LCFI203:
 5184              	 .cfi_def_cfa_register 13
 5185              	 
 5186 0026 5DF8047B 	 ldr r7,[sp],#4
 5187              	.LCFI204:
 5188              	 .cfi_restore 7
 5189              	 .cfi_def_cfa_offset 0
 5190 002a 7047     	 bx lr
 5191              	 .cfi_endproc
 5192              	.LFE177:
 5194              	 .section .text.vTaskSetTaskNumber,"ax",%progbits
 5195              	 .align 2
 5196              	 .global vTaskSetTaskNumber
 5197              	 .thumb
 5198              	 .thumb_func
 5200              	vTaskSetTaskNumber:
 5201              	.LFB178:
3392:../Dave/Generated/FREERTOS/tasks.c **** 
3393:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3394:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3395:../Dave/Generated/FREERTOS/tasks.c **** 
3396:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3397:../Dave/Generated/FREERTOS/tasks.c **** 
3398:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3399:../Dave/Generated/FREERTOS/tasks.c ****                              const UBaseType_t uxHandle )
3400:../Dave/Generated/FREERTOS/tasks.c ****     {
 5202              	 .loc 1 3400 0
 5203              	 .cfi_startproc
 5204              	 
 5205              	 
 5206              	 
 5207 0000 80B4     	 push {r7}
 5208              	.LCFI205:
 5209              	 .cfi_def_cfa_offset 4
 5210              	 .cfi_offset 7,-4
 5211 0002 85B0     	 sub sp,sp,#20
 5212              	.LCFI206:
 5213              	 .cfi_def_cfa_offset 24
 5214 0004 00AF     	 add r7,sp,#0
 5215              	.LCFI207:
 5216              	 .cfi_def_cfa_register 7
 5217 0006 7860     	 str r0,[r7,#4]
 5218 0008 3960     	 str r1,[r7]
3401:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3402:../Dave/Generated/FREERTOS/tasks.c **** 
3403:../Dave/Generated/FREERTOS/tasks.c ****         if( xTask != NULL )
 5219              	 .loc 1 3403 0
 5220 000a 7B68     	 ldr r3,[r7,#4]
 5221 000c 002B     	 cmp r3,#0
 5222 000e 04D0     	 beq .L342
3404:../Dave/Generated/FREERTOS/tasks.c ****         {
3405:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = xTask;
 5223              	 .loc 1 3405 0
 5224 0010 7B68     	 ldr r3,[r7,#4]
 5225 0012 FB60     	 str r3,[r7,#12]
3406:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
 5226              	 .loc 1 3406 0
 5227 0014 FB68     	 ldr r3,[r7,#12]
 5228 0016 3A68     	 ldr r2,[r7]
 5229 0018 9A64     	 str r2,[r3,#72]
 5230              	.L342:
3407:../Dave/Generated/FREERTOS/tasks.c ****         }
3408:../Dave/Generated/FREERTOS/tasks.c ****     }
 5231              	 .loc 1 3408 0
 5232 001a 1437     	 adds r7,r7,#20
 5233              	.LCFI208:
 5234              	 .cfi_def_cfa_offset 4
 5235 001c BD46     	 mov sp,r7
 5236              	.LCFI209:
 5237              	 .cfi_def_cfa_register 13
 5238              	 
 5239 001e 5DF8047B 	 ldr r7,[sp],#4
 5240              	.LCFI210:
 5241              	 .cfi_restore 7
 5242              	 .cfi_def_cfa_offset 0
 5243 0022 7047     	 bx lr
 5244              	 .cfi_endproc
 5245              	.LFE178:
 5247              	 .section .text.prvIdleTask,"ax",%progbits
 5248              	 .align 2
 5249              	 .thumb
 5250              	 .thumb_func
 5252              	prvIdleTask:
 5253              	.LFB179:
3409:../Dave/Generated/FREERTOS/tasks.c **** 
3410:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3411:../Dave/Generated/FREERTOS/tasks.c **** 
3412:../Dave/Generated/FREERTOS/tasks.c **** /*
3413:../Dave/Generated/FREERTOS/tasks.c ****  * -----------------------------------------------------------
3414:../Dave/Generated/FREERTOS/tasks.c ****  * The Idle task.
3415:../Dave/Generated/FREERTOS/tasks.c ****  * ----------------------------------------------------------
3416:../Dave/Generated/FREERTOS/tasks.c ****  *
3417:../Dave/Generated/FREERTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3418:../Dave/Generated/FREERTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3419:../Dave/Generated/FREERTOS/tasks.c ****  *
3420:../Dave/Generated/FREERTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3421:../Dave/Generated/FREERTOS/tasks.c ****  *
3422:../Dave/Generated/FREERTOS/tasks.c ****  */
3423:../Dave/Generated/FREERTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3424:../Dave/Generated/FREERTOS/tasks.c **** {
 5254              	 .loc 1 3424 0
 5255              	 .cfi_startproc
 5256              	 
 5257              	 
 5258 0000 80B5     	 push {r7,lr}
 5259              	.LCFI211:
 5260              	 .cfi_def_cfa_offset 8
 5261              	 .cfi_offset 7,-8
 5262              	 .cfi_offset 14,-4
 5263 0002 82B0     	 sub sp,sp,#8
 5264              	.LCFI212:
 5265              	 .cfi_def_cfa_offset 16
 5266 0004 00AF     	 add r7,sp,#0
 5267              	.LCFI213:
 5268              	 .cfi_def_cfa_register 7
 5269 0006 7860     	 str r0,[r7,#4]
 5270              	.L346:
3425:../Dave/Generated/FREERTOS/tasks.c ****     /* Stop warnings. */
3426:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) pvParameters;
3427:../Dave/Generated/FREERTOS/tasks.c **** 
3428:../Dave/Generated/FREERTOS/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3429:../Dave/Generated/FREERTOS/tasks.c ****      * SCHEDULER IS STARTED. **/
3430:../Dave/Generated/FREERTOS/tasks.c **** 
3431:../Dave/Generated/FREERTOS/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
3432:../Dave/Generated/FREERTOS/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
3433:../Dave/Generated/FREERTOS/tasks.c ****      * any. */
3434:../Dave/Generated/FREERTOS/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3435:../Dave/Generated/FREERTOS/tasks.c **** 
3436:../Dave/Generated/FREERTOS/tasks.c ****     for( ; ; )
3437:../Dave/Generated/FREERTOS/tasks.c ****     {
3438:../Dave/Generated/FREERTOS/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
3439:../Dave/Generated/FREERTOS/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
3440:../Dave/Generated/FREERTOS/tasks.c ****         prvCheckTasksWaitingTermination();
 5271              	 .loc 1 3440 0
 5272 0008 FFF7FEFF 	 bl prvCheckTasksWaitingTermination
3441:../Dave/Generated/FREERTOS/tasks.c **** 
3442:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
3443:../Dave/Generated/FREERTOS/tasks.c ****             {
3444:../Dave/Generated/FREERTOS/tasks.c ****                 /* If we are not using preemption we keep forcing a task switch to
3445:../Dave/Generated/FREERTOS/tasks.c ****                  * see if any other task has become available.  If we are using
3446:../Dave/Generated/FREERTOS/tasks.c ****                  * preemption we don't need to do this as any task becoming available
3447:../Dave/Generated/FREERTOS/tasks.c ****                  * will automatically get the processor anyway. */
3448:../Dave/Generated/FREERTOS/tasks.c ****                 taskYIELD();
3449:../Dave/Generated/FREERTOS/tasks.c ****             }
3450:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
3451:../Dave/Generated/FREERTOS/tasks.c **** 
3452:../Dave/Generated/FREERTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3453:../Dave/Generated/FREERTOS/tasks.c ****             {
3454:../Dave/Generated/FREERTOS/tasks.c ****                 /* When using preemption tasks of equal priority will be
3455:../Dave/Generated/FREERTOS/tasks.c ****                  * timesliced.  If a task that is sharing the idle priority is ready
3456:../Dave/Generated/FREERTOS/tasks.c ****                  * to run then the idle task should yield before the end of the
3457:../Dave/Generated/FREERTOS/tasks.c ****                  * timeslice.
3458:../Dave/Generated/FREERTOS/tasks.c ****                  *
3459:../Dave/Generated/FREERTOS/tasks.c ****                  * A critical region is not required here as we are just reading from
3460:../Dave/Generated/FREERTOS/tasks.c ****                  * the list, and an occasional incorrect value will not matter.  If
3461:../Dave/Generated/FREERTOS/tasks.c ****                  * the ready list at the idle priority contains more than one task
3462:../Dave/Generated/FREERTOS/tasks.c ****                  * then a task other than the idle task is ready to execute. */
3463:../Dave/Generated/FREERTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBase
 5273              	 .loc 1 3463 0
 5274 000c 064B     	 ldr r3,.L347
 5275 000e 1B68     	 ldr r3,[r3]
 5276 0010 012B     	 cmp r3,#1
 5277 0012 07D9     	 bls .L345
3464:../Dave/Generated/FREERTOS/tasks.c ****                 {
3465:../Dave/Generated/FREERTOS/tasks.c ****                     taskYIELD();
 5278              	 .loc 1 3465 0
 5279 0014 054B     	 ldr r3,.L347+4
 5280 0016 4FF08052 	 mov r2,#268435456
 5281 001a 1A60     	 str r2,[r3]
 5282              	
 5283 001c BFF34F8F 	 dsb
 5284              	
 5285              	
 5286 0020 BFF36F8F 	 isb
 5287              	
 5288              	 .thumb
 5289              	.L345:
3466:../Dave/Generated/FREERTOS/tasks.c ****                 }
3467:../Dave/Generated/FREERTOS/tasks.c ****                 else
3468:../Dave/Generated/FREERTOS/tasks.c ****                 {
3469:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3470:../Dave/Generated/FREERTOS/tasks.c ****                 }
3471:../Dave/Generated/FREERTOS/tasks.c ****             }
3472:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3473:../Dave/Generated/FREERTOS/tasks.c **** 
3474:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
3475:../Dave/Generated/FREERTOS/tasks.c ****             {
3476:../Dave/Generated/FREERTOS/tasks.c ****                 extern void vApplicationIdleHook( void );
3477:../Dave/Generated/FREERTOS/tasks.c **** 
3478:../Dave/Generated/FREERTOS/tasks.c ****                 /* Call the user defined function from within the idle task.  This
3479:../Dave/Generated/FREERTOS/tasks.c ****                  * allows the application designer to add background functionality
3480:../Dave/Generated/FREERTOS/tasks.c ****                  * without the overhead of a separate task.
3481:../Dave/Generated/FREERTOS/tasks.c ****                  * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3482:../Dave/Generated/FREERTOS/tasks.c ****                  * CALL A FUNCTION THAT MIGHT BLOCK. */
3483:../Dave/Generated/FREERTOS/tasks.c ****                 vApplicationIdleHook();
3484:../Dave/Generated/FREERTOS/tasks.c ****             }
3485:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
3486:../Dave/Generated/FREERTOS/tasks.c **** 
3487:../Dave/Generated/FREERTOS/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
3488:../Dave/Generated/FREERTOS/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3489:../Dave/Generated/FREERTOS/tasks.c ****          * user defined low power mode  implementations require
3490:../Dave/Generated/FREERTOS/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3491:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3492:../Dave/Generated/FREERTOS/tasks.c ****             {
3493:../Dave/Generated/FREERTOS/tasks.c ****                 TickType_t xExpectedIdleTime;
3494:../Dave/Generated/FREERTOS/tasks.c **** 
3495:../Dave/Generated/FREERTOS/tasks.c ****                 /* It is not desirable to suspend then resume the scheduler on
3496:../Dave/Generated/FREERTOS/tasks.c ****                  * each iteration of the idle task.  Therefore, a preliminary
3497:../Dave/Generated/FREERTOS/tasks.c ****                  * test of the expected idle time is performed without the
3498:../Dave/Generated/FREERTOS/tasks.c ****                  * scheduler suspended.  The result here is not necessarily
3499:../Dave/Generated/FREERTOS/tasks.c ****                  * valid. */
3500:../Dave/Generated/FREERTOS/tasks.c ****                 xExpectedIdleTime = prvGetExpectedIdleTime();
3501:../Dave/Generated/FREERTOS/tasks.c **** 
3502:../Dave/Generated/FREERTOS/tasks.c ****                 if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3503:../Dave/Generated/FREERTOS/tasks.c ****                 {
3504:../Dave/Generated/FREERTOS/tasks.c ****                     vTaskSuspendAll();
3505:../Dave/Generated/FREERTOS/tasks.c ****                     {
3506:../Dave/Generated/FREERTOS/tasks.c ****                         /* Now the scheduler is suspended, the expected idle
3507:../Dave/Generated/FREERTOS/tasks.c ****                          * time can be sampled again, and this time its value can
3508:../Dave/Generated/FREERTOS/tasks.c ****                          * be used. */
3509:../Dave/Generated/FREERTOS/tasks.c ****                         configASSERT( xNextTaskUnblockTime >= xTickCount );
3510:../Dave/Generated/FREERTOS/tasks.c ****                         xExpectedIdleTime = prvGetExpectedIdleTime();
3511:../Dave/Generated/FREERTOS/tasks.c **** 
3512:../Dave/Generated/FREERTOS/tasks.c ****                         /* Define the following macro to set xExpectedIdleTime to 0
3513:../Dave/Generated/FREERTOS/tasks.c ****                          * if the application does not want
3514:../Dave/Generated/FREERTOS/tasks.c ****                          * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3515:../Dave/Generated/FREERTOS/tasks.c ****                         configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3516:../Dave/Generated/FREERTOS/tasks.c **** 
3517:../Dave/Generated/FREERTOS/tasks.c ****                         if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3518:../Dave/Generated/FREERTOS/tasks.c ****                         {
3519:../Dave/Generated/FREERTOS/tasks.c ****                             traceLOW_POWER_IDLE_BEGIN();
3520:../Dave/Generated/FREERTOS/tasks.c ****                             portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3521:../Dave/Generated/FREERTOS/tasks.c ****                             traceLOW_POWER_IDLE_END();
3522:../Dave/Generated/FREERTOS/tasks.c ****                         }
3523:../Dave/Generated/FREERTOS/tasks.c ****                         else
3524:../Dave/Generated/FREERTOS/tasks.c ****                         {
3525:../Dave/Generated/FREERTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
3526:../Dave/Generated/FREERTOS/tasks.c ****                         }
3527:../Dave/Generated/FREERTOS/tasks.c ****                     }
3528:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) xTaskResumeAll();
3529:../Dave/Generated/FREERTOS/tasks.c ****                 }
3530:../Dave/Generated/FREERTOS/tasks.c ****                 else
3531:../Dave/Generated/FREERTOS/tasks.c ****                 {
3532:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3533:../Dave/Generated/FREERTOS/tasks.c ****                 }
3534:../Dave/Generated/FREERTOS/tasks.c ****             }
3535:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
3536:../Dave/Generated/FREERTOS/tasks.c ****     }
 5290              	 .loc 1 3536 0
 5291 0024 F0E7     	 b .L346
 5292              	.L348:
 5293 0026 00BF     	 .align 2
 5294              	.L347:
 5295 0028 00000000 	 .word pxReadyTasksLists
 5296 002c 04ED00E0 	 .word -536810236
 5297              	 .cfi_endproc
 5298              	.LFE179:
 5300              	 .section .text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 5301              	 .align 2
 5302              	 .global vTaskSetThreadLocalStoragePointer
 5303              	 .thumb
 5304              	 .thumb_func
 5306              	vTaskSetThreadLocalStoragePointer:
 5307              	.LFB180:
3537:../Dave/Generated/FREERTOS/tasks.c **** }
3538:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3539:../Dave/Generated/FREERTOS/tasks.c **** 
3540:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
3541:../Dave/Generated/FREERTOS/tasks.c **** 
3542:../Dave/Generated/FREERTOS/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3543:../Dave/Generated/FREERTOS/tasks.c ****     {
3544:../Dave/Generated/FREERTOS/tasks.c ****         /* The idle task exists in addition to the application tasks. */
3545:../Dave/Generated/FREERTOS/tasks.c ****         const UBaseType_t uxNonApplicationTasks = 1;
3546:../Dave/Generated/FREERTOS/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
3547:../Dave/Generated/FREERTOS/tasks.c **** 
3548:../Dave/Generated/FREERTOS/tasks.c ****         /* This function must be called from a critical section. */
3549:../Dave/Generated/FREERTOS/tasks.c **** 
3550:../Dave/Generated/FREERTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3551:../Dave/Generated/FREERTOS/tasks.c ****         {
3552:../Dave/Generated/FREERTOS/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
3553:../Dave/Generated/FREERTOS/tasks.c ****             eReturn = eAbortSleep;
3554:../Dave/Generated/FREERTOS/tasks.c ****         }
3555:../Dave/Generated/FREERTOS/tasks.c ****         else if( xYieldPending != pdFALSE )
3556:../Dave/Generated/FREERTOS/tasks.c ****         {
3557:../Dave/Generated/FREERTOS/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
3558:../Dave/Generated/FREERTOS/tasks.c ****             eReturn = eAbortSleep;
3559:../Dave/Generated/FREERTOS/tasks.c ****         }
3560:../Dave/Generated/FREERTOS/tasks.c ****         else if( xPendedTicks != 0 )
3561:../Dave/Generated/FREERTOS/tasks.c ****         {
3562:../Dave/Generated/FREERTOS/tasks.c ****             /* A tick interrupt has already occurred but was held pending
3563:../Dave/Generated/FREERTOS/tasks.c ****              * because the scheduler is suspended. */
3564:../Dave/Generated/FREERTOS/tasks.c ****             eReturn = eAbortSleep;
3565:../Dave/Generated/FREERTOS/tasks.c ****         }
3566:../Dave/Generated/FREERTOS/tasks.c ****         else
3567:../Dave/Generated/FREERTOS/tasks.c ****         {
3568:../Dave/Generated/FREERTOS/tasks.c ****             /* If all the tasks are in the suspended list (which might mean they
3569:../Dave/Generated/FREERTOS/tasks.c ****              * have an infinite block time rather than actually being suspended)
3570:../Dave/Generated/FREERTOS/tasks.c ****              * then it is safe to turn all clocks off and just wait for external
3571:../Dave/Generated/FREERTOS/tasks.c ****              * interrupts. */
3572:../Dave/Generated/FREERTOS/tasks.c ****             if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonA
3573:../Dave/Generated/FREERTOS/tasks.c ****             {
3574:../Dave/Generated/FREERTOS/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
3575:../Dave/Generated/FREERTOS/tasks.c ****             }
3576:../Dave/Generated/FREERTOS/tasks.c ****             else
3577:../Dave/Generated/FREERTOS/tasks.c ****             {
3578:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3579:../Dave/Generated/FREERTOS/tasks.c ****             }
3580:../Dave/Generated/FREERTOS/tasks.c ****         }
3581:../Dave/Generated/FREERTOS/tasks.c **** 
3582:../Dave/Generated/FREERTOS/tasks.c ****         return eReturn;
3583:../Dave/Generated/FREERTOS/tasks.c ****     }
3584:../Dave/Generated/FREERTOS/tasks.c **** 
3585:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3586:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3587:../Dave/Generated/FREERTOS/tasks.c **** 
3588:../Dave/Generated/FREERTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3589:../Dave/Generated/FREERTOS/tasks.c **** 
3590:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3591:../Dave/Generated/FREERTOS/tasks.c ****                                             BaseType_t xIndex,
3592:../Dave/Generated/FREERTOS/tasks.c ****                                             void * pvValue )
3593:../Dave/Generated/FREERTOS/tasks.c ****     {
 5308              	 .loc 1 3593 0
 5309              	 .cfi_startproc
 5310              	 
 5311              	 
 5312              	 
 5313 0000 80B4     	 push {r7}
 5314              	.LCFI214:
 5315              	 .cfi_def_cfa_offset 4
 5316              	 .cfi_offset 7,-4
 5317 0002 87B0     	 sub sp,sp,#28
 5318              	.LCFI215:
 5319              	 .cfi_def_cfa_offset 32
 5320 0004 00AF     	 add r7,sp,#0
 5321              	.LCFI216:
 5322              	 .cfi_def_cfa_register 7
 5323 0006 F860     	 str r0,[r7,#12]
 5324 0008 B960     	 str r1,[r7,#8]
 5325 000a 7A60     	 str r2,[r7,#4]
3594:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3595:../Dave/Generated/FREERTOS/tasks.c **** 
3596:../Dave/Generated/FREERTOS/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 5326              	 .loc 1 3596 0
 5327 000c BB68     	 ldr r3,[r7,#8]
 5328 000e 042B     	 cmp r3,#4
 5329 0010 1BDC     	 bgt .L349
3597:../Dave/Generated/FREERTOS/tasks.c ****         {
3598:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
 5330              	 .loc 1 3598 0
 5331 0012 FB68     	 ldr r3,[r7,#12]
 5332 0014 002B     	 cmp r3,#0
 5333 0016 02D1     	 bne .L351
 5334              	 .loc 1 3598 0 is_stmt 0 discriminator 1
 5335 0018 0E4B     	 ldr r3,.L355
 5336 001a 1B68     	 ldr r3,[r3]
 5337 001c 00E0     	 b .L352
 5338              	.L351:
 5339              	 .loc 1 3598 0 discriminator 2
 5340 001e FB68     	 ldr r3,[r7,#12]
 5341              	.L352:
 5342              	 .loc 1 3598 0 discriminator 4
 5343 0020 7B61     	 str r3,[r7,#20]
3599:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( pxTCB != NULL );
 5344              	 .loc 1 3599 0 is_stmt 1 discriminator 4
 5345 0022 7B69     	 ldr r3,[r7,#20]
 5346 0024 002B     	 cmp r3,#0
 5347 0026 09D1     	 bne .L353
 5348              	.LBB221:
 5349              	.LBB222:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 5350              	 .loc 2 197 0 discriminator 1
 5351              	
 5352 0028 4FF0FC03 	 mov r3,#252
 5353 002c 83F31188 	 msr basepri,r3
 5354 0030 BFF36F8F 	 isb 
 5355 0034 BFF34F8F 	 dsb 
 5356              	
 5357              	
 5358              	 .thumb
 5359 0038 3B61     	 str r3,[r7,#16]
 5360              	.L354:
 5361              	.LBE222:
 5362              	.LBE221:
 5363              	 .loc 1 3599 0 discriminator 1
 5364 003a FEE7     	 b .L354
 5365              	.L353:
3600:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 5366              	 .loc 1 3600 0
 5367 003c 7A69     	 ldr r2,[r7,#20]
 5368 003e BB68     	 ldr r3,[r7,#8]
 5369 0040 1433     	 adds r3,r3,#20
 5370 0042 9B00     	 lsls r3,r3,#2
 5371 0044 1344     	 add r3,r3,r2
 5372 0046 7A68     	 ldr r2,[r7,#4]
 5373 0048 5A60     	 str r2,[r3,#4]
 5374              	.L349:
3601:../Dave/Generated/FREERTOS/tasks.c ****         }
3602:../Dave/Generated/FREERTOS/tasks.c ****     }
 5375              	 .loc 1 3602 0
 5376 004a 1C37     	 adds r7,r7,#28
 5377              	.LCFI217:
 5378              	 .cfi_def_cfa_offset 4
 5379 004c BD46     	 mov sp,r7
 5380              	.LCFI218:
 5381              	 .cfi_def_cfa_register 13
 5382              	 
 5383 004e 5DF8047B 	 ldr r7,[sp],#4
 5384              	.LCFI219:
 5385              	 .cfi_restore 7
 5386              	 .cfi_def_cfa_offset 0
 5387 0052 7047     	 bx lr
 5388              	.L356:
 5389              	 .align 2
 5390              	.L355:
 5391 0054 00000000 	 .word pxCurrentTCB
 5392              	 .cfi_endproc
 5393              	.LFE180:
 5395              	 .section .text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 5396              	 .align 2
 5397              	 .global pvTaskGetThreadLocalStoragePointer
 5398              	 .thumb
 5399              	 .thumb_func
 5401              	pvTaskGetThreadLocalStoragePointer:
 5402              	.LFB181:
3603:../Dave/Generated/FREERTOS/tasks.c **** 
3604:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3605:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3606:../Dave/Generated/FREERTOS/tasks.c **** 
3607:../Dave/Generated/FREERTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3608:../Dave/Generated/FREERTOS/tasks.c **** 
3609:../Dave/Generated/FREERTOS/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3610:../Dave/Generated/FREERTOS/tasks.c ****                                                BaseType_t xIndex )
3611:../Dave/Generated/FREERTOS/tasks.c ****     {
 5403              	 .loc 1 3611 0
 5404              	 .cfi_startproc
 5405              	 
 5406              	 
 5407              	 
 5408 0000 80B4     	 push {r7}
 5409              	.LCFI220:
 5410              	 .cfi_def_cfa_offset 4
 5411              	 .cfi_offset 7,-4
 5412 0002 85B0     	 sub sp,sp,#20
 5413              	.LCFI221:
 5414              	 .cfi_def_cfa_offset 24
 5415 0004 00AF     	 add r7,sp,#0
 5416              	.LCFI222:
 5417              	 .cfi_def_cfa_register 7
 5418 0006 7860     	 str r0,[r7,#4]
 5419 0008 3960     	 str r1,[r7]
3612:../Dave/Generated/FREERTOS/tasks.c ****         void * pvReturn = NULL;
 5420              	 .loc 1 3612 0
 5421 000a 0023     	 movs r3,#0
 5422 000c FB60     	 str r3,[r7,#12]
3613:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3614:../Dave/Generated/FREERTOS/tasks.c **** 
3615:../Dave/Generated/FREERTOS/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 5423              	 .loc 1 3615 0
 5424 000e 3B68     	 ldr r3,[r7]
 5425 0010 042B     	 cmp r3,#4
 5426 0012 0FDC     	 bgt .L358
3616:../Dave/Generated/FREERTOS/tasks.c ****         {
3617:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 5427              	 .loc 1 3617 0
 5428 0014 7B68     	 ldr r3,[r7,#4]
 5429 0016 002B     	 cmp r3,#0
 5430 0018 02D1     	 bne .L359
 5431              	 .loc 1 3617 0 is_stmt 0 discriminator 1
 5432 001a 0B4B     	 ldr r3,.L363
 5433 001c 1B68     	 ldr r3,[r3]
 5434 001e 00E0     	 b .L360
 5435              	.L359:
 5436              	 .loc 1 3617 0 discriminator 2
 5437 0020 7B68     	 ldr r3,[r7,#4]
 5438              	.L360:
 5439              	 .loc 1 3617 0 discriminator 4
 5440 0022 BB60     	 str r3,[r7,#8]
3618:../Dave/Generated/FREERTOS/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 5441              	 .loc 1 3618 0 is_stmt 1 discriminator 4
 5442 0024 BA68     	 ldr r2,[r7,#8]
 5443 0026 3B68     	 ldr r3,[r7]
 5444 0028 1433     	 adds r3,r3,#20
 5445 002a 9B00     	 lsls r3,r3,#2
 5446 002c 1344     	 add r3,r3,r2
 5447 002e 5B68     	 ldr r3,[r3,#4]
 5448 0030 FB60     	 str r3,[r7,#12]
 5449 0032 01E0     	 b .L361
 5450              	.L358:
3619:../Dave/Generated/FREERTOS/tasks.c ****         }
3620:../Dave/Generated/FREERTOS/tasks.c ****         else
3621:../Dave/Generated/FREERTOS/tasks.c ****         {
3622:../Dave/Generated/FREERTOS/tasks.c ****             pvReturn = NULL;
 5451              	 .loc 1 3622 0
 5452 0034 0023     	 movs r3,#0
 5453 0036 FB60     	 str r3,[r7,#12]
 5454              	.L361:
3623:../Dave/Generated/FREERTOS/tasks.c ****         }
3624:../Dave/Generated/FREERTOS/tasks.c **** 
3625:../Dave/Generated/FREERTOS/tasks.c ****         return pvReturn;
 5455              	 .loc 1 3625 0
 5456 0038 FB68     	 ldr r3,[r7,#12]
3626:../Dave/Generated/FREERTOS/tasks.c ****     }
 5457              	 .loc 1 3626 0
 5458 003a 1846     	 mov r0,r3
 5459 003c 1437     	 adds r7,r7,#20
 5460              	.LCFI223:
 5461              	 .cfi_def_cfa_offset 4
 5462 003e BD46     	 mov sp,r7
 5463              	.LCFI224:
 5464              	 .cfi_def_cfa_register 13
 5465              	 
 5466 0040 5DF8047B 	 ldr r7,[sp],#4
 5467              	.LCFI225:
 5468              	 .cfi_restore 7
 5469              	 .cfi_def_cfa_offset 0
 5470 0044 7047     	 bx lr
 5471              	.L364:
 5472 0046 00BF     	 .align 2
 5473              	.L363:
 5474 0048 00000000 	 .word pxCurrentTCB
 5475              	 .cfi_endproc
 5476              	.LFE181:
 5478              	 .section .text.prvInitialiseTaskLists,"ax",%progbits
 5479              	 .align 2
 5480              	 .thumb
 5481              	 .thumb_func
 5483              	prvInitialiseTaskLists:
 5484              	.LFB182:
3627:../Dave/Generated/FREERTOS/tasks.c **** 
3628:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3629:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3630:../Dave/Generated/FREERTOS/tasks.c **** 
3631:../Dave/Generated/FREERTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3632:../Dave/Generated/FREERTOS/tasks.c **** 
3633:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3634:../Dave/Generated/FREERTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
3635:../Dave/Generated/FREERTOS/tasks.c ****     {
3636:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3637:../Dave/Generated/FREERTOS/tasks.c **** 
3638:../Dave/Generated/FREERTOS/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
3639:../Dave/Generated/FREERTOS/tasks.c ****          * the calling task. */
3640:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
3641:../Dave/Generated/FREERTOS/tasks.c **** 
3642:../Dave/Generated/FREERTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3643:../Dave/Generated/FREERTOS/tasks.c ****     }
3644:../Dave/Generated/FREERTOS/tasks.c **** 
3645:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3646:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3647:../Dave/Generated/FREERTOS/tasks.c **** 
3648:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3649:../Dave/Generated/FREERTOS/tasks.c **** {
 5485              	 .loc 1 3649 0
 5486              	 .cfi_startproc
 5487              	 
 5488              	 
 5489 0000 80B5     	 push {r7,lr}
 5490              	.LCFI226:
 5491              	 .cfi_def_cfa_offset 8
 5492              	 .cfi_offset 7,-8
 5493              	 .cfi_offset 14,-4
 5494 0002 82B0     	 sub sp,sp,#8
 5495              	.LCFI227:
 5496              	 .cfi_def_cfa_offset 16
 5497 0004 00AF     	 add r7,sp,#0
 5498              	.LCFI228:
 5499              	 .cfi_def_cfa_register 7
3650:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxPriority;
3651:../Dave/Generated/FREERTOS/tasks.c **** 
3652:../Dave/Generated/FREERTOS/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
 5500              	 .loc 1 3652 0
 5501 0006 0023     	 movs r3,#0
 5502 0008 7B60     	 str r3,[r7,#4]
 5503 000a 0CE0     	 b .L366
 5504              	.L367:
3653:../Dave/Generated/FREERTOS/tasks.c ****     {
3654:../Dave/Generated/FREERTOS/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5505              	 .loc 1 3654 0 discriminator 3
 5506 000c 7A68     	 ldr r2,[r7,#4]
 5507 000e 1346     	 mov r3,r2
 5508 0010 9B00     	 lsls r3,r3,#2
 5509 0012 1344     	 add r3,r3,r2
 5510 0014 9B00     	 lsls r3,r3,#2
 5511 0016 114A     	 ldr r2,.L368
 5512 0018 1344     	 add r3,r3,r2
 5513 001a 1846     	 mov r0,r3
 5514 001c FFF7FEFF 	 bl vListInitialise
3652:../Dave/Generated/FREERTOS/tasks.c ****     {
 5515              	 .loc 1 3652 0 discriminator 3
 5516 0020 7B68     	 ldr r3,[r7,#4]
 5517 0022 0133     	 adds r3,r3,#1
 5518 0024 7B60     	 str r3,[r7,#4]
 5519              	.L366:
3652:../Dave/Generated/FREERTOS/tasks.c ****     {
 5520              	 .loc 1 3652 0 is_stmt 0 discriminator 1
 5521 0026 7B68     	 ldr r3,[r7,#4]
 5522 0028 042B     	 cmp r3,#4
 5523 002a EFD9     	 bls .L367
3655:../Dave/Generated/FREERTOS/tasks.c ****     }
3656:../Dave/Generated/FREERTOS/tasks.c **** 
3657:../Dave/Generated/FREERTOS/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
 5524              	 .loc 1 3657 0 is_stmt 1
 5525 002c 0C48     	 ldr r0,.L368+4
 5526 002e FFF7FEFF 	 bl vListInitialise
3658:../Dave/Generated/FREERTOS/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 5527              	 .loc 1 3658 0
 5528 0032 0C48     	 ldr r0,.L368+8
 5529 0034 FFF7FEFF 	 bl vListInitialise
3659:../Dave/Generated/FREERTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
 5530              	 .loc 1 3659 0
 5531 0038 0B48     	 ldr r0,.L368+12
 5532 003a FFF7FEFF 	 bl vListInitialise
3660:../Dave/Generated/FREERTOS/tasks.c **** 
3661:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3662:../Dave/Generated/FREERTOS/tasks.c ****         {
3663:../Dave/Generated/FREERTOS/tasks.c ****             vListInitialise( &xTasksWaitingTermination );
 5533              	 .loc 1 3663 0
 5534 003e 0B48     	 ldr r0,.L368+16
 5535 0040 FFF7FEFF 	 bl vListInitialise
3664:../Dave/Generated/FREERTOS/tasks.c ****         }
3665:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3666:../Dave/Generated/FREERTOS/tasks.c **** 
3667:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
3668:../Dave/Generated/FREERTOS/tasks.c ****         {
3669:../Dave/Generated/FREERTOS/tasks.c ****             vListInitialise( &xSuspendedTaskList );
 5536              	 .loc 1 3669 0
 5537 0044 0A48     	 ldr r0,.L368+20
 5538 0046 FFF7FEFF 	 bl vListInitialise
3670:../Dave/Generated/FREERTOS/tasks.c ****         }
3671:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
3672:../Dave/Generated/FREERTOS/tasks.c **** 
3673:../Dave/Generated/FREERTOS/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3674:../Dave/Generated/FREERTOS/tasks.c ****      * using list2. */
3675:../Dave/Generated/FREERTOS/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
 5539              	 .loc 1 3675 0
 5540 004a 0A4B     	 ldr r3,.L368+24
 5541 004c 044A     	 ldr r2,.L368+4
 5542 004e 1A60     	 str r2,[r3]
3676:../Dave/Generated/FREERTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5543              	 .loc 1 3676 0
 5544 0050 094B     	 ldr r3,.L368+28
 5545 0052 044A     	 ldr r2,.L368+8
 5546 0054 1A60     	 str r2,[r3]
3677:../Dave/Generated/FREERTOS/tasks.c **** }
 5547              	 .loc 1 3677 0
 5548 0056 0837     	 adds r7,r7,#8
 5549              	.LCFI229:
 5550              	 .cfi_def_cfa_offset 8
 5551 0058 BD46     	 mov sp,r7
 5552              	.LCFI230:
 5553              	 .cfi_def_cfa_register 13
 5554              	 
 5555 005a 80BD     	 pop {r7,pc}
 5556              	.L369:
 5557              	 .align 2
 5558              	.L368:
 5559 005c 00000000 	 .word pxReadyTasksLists
 5560 0060 00000000 	 .word xDelayedTaskList1
 5561 0064 00000000 	 .word xDelayedTaskList2
 5562 0068 00000000 	 .word xPendingReadyList
 5563 006c 00000000 	 .word xTasksWaitingTermination
 5564 0070 00000000 	 .word xSuspendedTaskList
 5565 0074 00000000 	 .word pxDelayedTaskList
 5566 0078 00000000 	 .word pxOverflowDelayedTaskList
 5567              	 .cfi_endproc
 5568              	.LFE182:
 5570              	 .section .text.prvCheckTasksWaitingTermination,"ax",%progbits
 5571              	 .align 2
 5572              	 .thumb
 5573              	 .thumb_func
 5575              	prvCheckTasksWaitingTermination:
 5576              	.LFB183:
3678:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3679:../Dave/Generated/FREERTOS/tasks.c **** 
3680:../Dave/Generated/FREERTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3681:../Dave/Generated/FREERTOS/tasks.c **** {
 5577              	 .loc 1 3681 0
 5578              	 .cfi_startproc
 5579              	 
 5580              	 
 5581 0000 80B5     	 push {r7,lr}
 5582              	.LCFI231:
 5583              	 .cfi_def_cfa_offset 8
 5584              	 .cfi_offset 7,-8
 5585              	 .cfi_offset 14,-4
 5586 0002 82B0     	 sub sp,sp,#8
 5587              	.LCFI232:
 5588              	 .cfi_def_cfa_offset 16
 5589 0004 00AF     	 add r7,sp,#0
 5590              	.LCFI233:
 5591              	 .cfi_def_cfa_register 7
 5592              	.LBB223:
3682:../Dave/Generated/FREERTOS/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3683:../Dave/Generated/FREERTOS/tasks.c **** 
3684:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3685:../Dave/Generated/FREERTOS/tasks.c ****         {
3686:../Dave/Generated/FREERTOS/tasks.c ****             TCB_t * pxTCB;
3687:../Dave/Generated/FREERTOS/tasks.c **** 
3688:../Dave/Generated/FREERTOS/tasks.c ****             /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3689:../Dave/Generated/FREERTOS/tasks.c ****              * being called too often in the idle task. */
3690:../Dave/Generated/FREERTOS/tasks.c ****             while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5593              	 .loc 1 3690 0
 5594 0006 19E0     	 b .L371
 5595              	.L372:
3691:../Dave/Generated/FREERTOS/tasks.c ****             {
3692:../Dave/Generated/FREERTOS/tasks.c ****                 taskENTER_CRITICAL();
 5596              	 .loc 1 3692 0
 5597 0008 FFF7FEFF 	 bl vPortEnterCritical
3693:../Dave/Generated/FREERTOS/tasks.c ****                 {
3694:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e
 5598              	 .loc 1 3694 0
 5599 000c 0F4B     	 ldr r3,.L373
 5600 000e DB68     	 ldr r3,[r3,#12]
 5601 0010 DB68     	 ldr r3,[r3,#12]
 5602 0012 7B60     	 str r3,[r7,#4]
3695:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5603              	 .loc 1 3695 0
 5604 0014 7B68     	 ldr r3,[r7,#4]
 5605 0016 0433     	 adds r3,r3,#4
 5606 0018 1846     	 mov r0,r3
 5607 001a FFF7FEFF 	 bl uxListRemove
3696:../Dave/Generated/FREERTOS/tasks.c ****                     --uxCurrentNumberOfTasks;
 5608              	 .loc 1 3696 0
 5609 001e 0C4B     	 ldr r3,.L373+4
 5610 0020 1B68     	 ldr r3,[r3]
 5611 0022 013B     	 subs r3,r3,#1
 5612 0024 0A4A     	 ldr r2,.L373+4
 5613 0026 1360     	 str r3,[r2]
3697:../Dave/Generated/FREERTOS/tasks.c ****                     --uxDeletedTasksWaitingCleanUp;
 5614              	 .loc 1 3697 0
 5615 0028 0A4B     	 ldr r3,.L373+8
 5616 002a 1B68     	 ldr r3,[r3]
 5617 002c 013B     	 subs r3,r3,#1
 5618 002e 094A     	 ldr r2,.L373+8
 5619 0030 1360     	 str r3,[r2]
3698:../Dave/Generated/FREERTOS/tasks.c ****                 }
3699:../Dave/Generated/FREERTOS/tasks.c ****                 taskEXIT_CRITICAL();
 5620              	 .loc 1 3699 0
 5621 0032 FFF7FEFF 	 bl vPortExitCritical
3700:../Dave/Generated/FREERTOS/tasks.c **** 
3701:../Dave/Generated/FREERTOS/tasks.c ****                 prvDeleteTCB( pxTCB );
 5622              	 .loc 1 3701 0
 5623 0036 7868     	 ldr r0,[r7,#4]
 5624 0038 FFF7FEFF 	 bl prvDeleteTCB
 5625              	.L371:
3690:../Dave/Generated/FREERTOS/tasks.c ****             {
 5626              	 .loc 1 3690 0
 5627 003c 054B     	 ldr r3,.L373+8
 5628 003e 1B68     	 ldr r3,[r3]
 5629 0040 002B     	 cmp r3,#0
 5630 0042 E1D1     	 bne .L372
 5631              	.LBE223:
3702:../Dave/Generated/FREERTOS/tasks.c ****             }
3703:../Dave/Generated/FREERTOS/tasks.c ****         }
3704:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3705:../Dave/Generated/FREERTOS/tasks.c **** }
 5632              	 .loc 1 3705 0
 5633 0044 0837     	 adds r7,r7,#8
 5634              	.LCFI234:
 5635              	 .cfi_def_cfa_offset 8
 5636 0046 BD46     	 mov sp,r7
 5637              	.LCFI235:
 5638              	 .cfi_def_cfa_register 13
 5639              	 
 5640 0048 80BD     	 pop {r7,pc}
 5641              	.L374:
 5642 004a 00BF     	 .align 2
 5643              	.L373:
 5644 004c 00000000 	 .word xTasksWaitingTermination
 5645 0050 00000000 	 .word uxCurrentNumberOfTasks
 5646 0054 00000000 	 .word uxDeletedTasksWaitingCleanUp
 5647              	 .cfi_endproc
 5648              	.LFE183:
 5650              	 .section .text.vTaskGetInfo,"ax",%progbits
 5651              	 .align 2
 5652              	 .global vTaskGetInfo
 5653              	 .thumb
 5654              	 .thumb_func
 5656              	vTaskGetInfo:
 5657              	.LFB184:
3706:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3707:../Dave/Generated/FREERTOS/tasks.c **** 
3708:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3709:../Dave/Generated/FREERTOS/tasks.c **** 
3710:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
3711:../Dave/Generated/FREERTOS/tasks.c ****                        TaskStatus_t * pxTaskStatus,
3712:../Dave/Generated/FREERTOS/tasks.c ****                        BaseType_t xGetFreeStackSpace,
3713:../Dave/Generated/FREERTOS/tasks.c ****                        eTaskState eState )
3714:../Dave/Generated/FREERTOS/tasks.c ****     {
 5658              	 .loc 1 3714 0
 5659              	 .cfi_startproc
 5660              	 
 5661              	 
 5662 0000 80B5     	 push {r7,lr}
 5663              	.LCFI236:
 5664              	 .cfi_def_cfa_offset 8
 5665              	 .cfi_offset 7,-8
 5666              	 .cfi_offset 14,-4
 5667 0002 86B0     	 sub sp,sp,#24
 5668              	.LCFI237:
 5669              	 .cfi_def_cfa_offset 32
 5670 0004 00AF     	 add r7,sp,#0
 5671              	.LCFI238:
 5672              	 .cfi_def_cfa_register 7
 5673 0006 F860     	 str r0,[r7,#12]
 5674 0008 B960     	 str r1,[r7,#8]
 5675 000a 7A60     	 str r2,[r7,#4]
 5676 000c FB70     	 strb r3,[r7,#3]
3715:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3716:../Dave/Generated/FREERTOS/tasks.c **** 
3717:../Dave/Generated/FREERTOS/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
3718:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 5677              	 .loc 1 3718 0
 5678 000e FB68     	 ldr r3,[r7,#12]
 5679 0010 002B     	 cmp r3,#0
 5680 0012 02D1     	 bne .L376
 5681              	 .loc 1 3718 0 is_stmt 0 discriminator 1
 5682 0014 2B4B     	 ldr r3,.L385
 5683 0016 1B68     	 ldr r3,[r3]
 5684 0018 00E0     	 b .L377
 5685              	.L376:
 5686              	 .loc 1 3718 0 discriminator 2
 5687 001a FB68     	 ldr r3,[r7,#12]
 5688              	.L377:
 5689              	 .loc 1 3718 0 discriminator 4
 5690 001c 7B61     	 str r3,[r7,#20]
3719:../Dave/Generated/FREERTOS/tasks.c **** 
3720:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 5691              	 .loc 1 3720 0 is_stmt 1 discriminator 4
 5692 001e BB68     	 ldr r3,[r7,#8]
 5693 0020 7A69     	 ldr r2,[r7,#20]
 5694 0022 1A60     	 str r2,[r3]
3721:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 5695              	 .loc 1 3721 0 discriminator 4
 5696 0024 7B69     	 ldr r3,[r7,#20]
 5697 0026 03F13402 	 add r2,r3,#52
 5698 002a BB68     	 ldr r3,[r7,#8]
 5699 002c 5A60     	 str r2,[r3,#4]
3722:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5700              	 .loc 1 3722 0 discriminator 4
 5701 002e 7B69     	 ldr r3,[r7,#20]
 5702 0030 DA6A     	 ldr r2,[r3,#44]
 5703 0032 BB68     	 ldr r3,[r7,#8]
 5704 0034 1A61     	 str r2,[r3,#16]
3723:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5705              	 .loc 1 3723 0 discriminator 4
 5706 0036 7B69     	 ldr r3,[r7,#20]
 5707 0038 1A6B     	 ldr r2,[r3,#48]
 5708 003a BB68     	 ldr r3,[r7,#8]
 5709 003c DA61     	 str r2,[r3,#28]
3724:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5710              	 .loc 1 3724 0 discriminator 4
 5711 003e 7B69     	 ldr r3,[r7,#20]
 5712 0040 5A6C     	 ldr r2,[r3,#68]
 5713 0042 BB68     	 ldr r3,[r7,#8]
 5714 0044 9A60     	 str r2,[r3,#8]
3725:../Dave/Generated/FREERTOS/tasks.c **** 
3726:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
3727:../Dave/Generated/FREERTOS/tasks.c ****             {
3728:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5715              	 .loc 1 3728 0 discriminator 4
 5716 0046 7B69     	 ldr r3,[r7,#20]
 5717 0048 DA6C     	 ldr r2,[r3,#76]
 5718 004a BB68     	 ldr r3,[r7,#8]
 5719 004c 5A61     	 str r2,[r3,#20]
3729:../Dave/Generated/FREERTOS/tasks.c ****             }
3730:../Dave/Generated/FREERTOS/tasks.c ****         #else
3731:../Dave/Generated/FREERTOS/tasks.c ****             {
3732:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->uxBasePriority = 0;
3733:../Dave/Generated/FREERTOS/tasks.c ****             }
3734:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3735:../Dave/Generated/FREERTOS/tasks.c **** 
3736:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3737:../Dave/Generated/FREERTOS/tasks.c ****             {
3738:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3739:../Dave/Generated/FREERTOS/tasks.c ****             }
3740:../Dave/Generated/FREERTOS/tasks.c ****         #else
3741:../Dave/Generated/FREERTOS/tasks.c ****             {
3742:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = 0;
 5720              	 .loc 1 3742 0 discriminator 4
 5721 004e BB68     	 ldr r3,[r7,#8]
 5722 0050 0022     	 movs r2,#0
 5723 0052 9A61     	 str r2,[r3,#24]
3743:../Dave/Generated/FREERTOS/tasks.c ****             }
3744:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3745:../Dave/Generated/FREERTOS/tasks.c **** 
3746:../Dave/Generated/FREERTOS/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
3747:../Dave/Generated/FREERTOS/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
3748:../Dave/Generated/FREERTOS/tasks.c ****          * state is just set to whatever is passed in. */
3749:../Dave/Generated/FREERTOS/tasks.c ****         if( eState != eInvalid )
 5724              	 .loc 1 3749 0 discriminator 4
 5725 0054 FB78     	 ldrb r3,[r7,#3]
 5726 0056 052B     	 cmp r3,#5
 5727 0058 1AD0     	 beq .L378
3750:../Dave/Generated/FREERTOS/tasks.c ****         {
3751:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
 5728              	 .loc 1 3751 0
 5729 005a 1A4B     	 ldr r3,.L385
 5730 005c 1B68     	 ldr r3,[r3]
 5731 005e 7A69     	 ldr r2,[r7,#20]
 5732 0060 9A42     	 cmp r2,r3
 5733 0062 03D1     	 bne .L379
3752:../Dave/Generated/FREERTOS/tasks.c ****             {
3753:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
 5734              	 .loc 1 3753 0
 5735 0064 BB68     	 ldr r3,[r7,#8]
 5736 0066 0022     	 movs r2,#0
 5737 0068 1A73     	 strb r2,[r3,#12]
 5738 006a 18E0     	 b .L382
 5739              	.L379:
3754:../Dave/Generated/FREERTOS/tasks.c ****             }
3755:../Dave/Generated/FREERTOS/tasks.c ****             else
3756:../Dave/Generated/FREERTOS/tasks.c ****             {
3757:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
 5740              	 .loc 1 3757 0
 5741 006c BB68     	 ldr r3,[r7,#8]
 5742 006e FA78     	 ldrb r2,[r7,#3]
 5743 0070 1A73     	 strb r2,[r3,#12]
3758:../Dave/Generated/FREERTOS/tasks.c **** 
3759:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
3760:../Dave/Generated/FREERTOS/tasks.c ****                     {
3761:../Dave/Generated/FREERTOS/tasks.c ****                         /* If the task is in the suspended list then there is a
3762:../Dave/Generated/FREERTOS/tasks.c ****                          *  chance it is actually just blocked indefinitely - so really
3763:../Dave/Generated/FREERTOS/tasks.c ****                          *  it should be reported as being in the Blocked state. */
3764:../Dave/Generated/FREERTOS/tasks.c ****                         if( eState == eSuspended )
 5744              	 .loc 1 3764 0
 5745 0072 FB78     	 ldrb r3,[r7,#3]
 5746 0074 032B     	 cmp r3,#3
 5747 0076 12D1     	 bne .L382
3765:../Dave/Generated/FREERTOS/tasks.c ****                         {
3766:../Dave/Generated/FREERTOS/tasks.c ****                             vTaskSuspendAll();
 5748              	 .loc 1 3766 0
 5749 0078 FFF7FEFF 	 bl vTaskSuspendAll
3767:../Dave/Generated/FREERTOS/tasks.c ****                             {
3768:../Dave/Generated/FREERTOS/tasks.c ****                                 if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5750              	 .loc 1 3768 0
 5751 007c 7B69     	 ldr r3,[r7,#20]
 5752 007e 9B6A     	 ldr r3,[r3,#40]
 5753 0080 002B     	 cmp r3,#0
 5754 0082 02D0     	 beq .L381
3769:../Dave/Generated/FREERTOS/tasks.c ****                                 {
3770:../Dave/Generated/FREERTOS/tasks.c ****                                     pxTaskStatus->eCurrentState = eBlocked;
 5755              	 .loc 1 3770 0
 5756 0084 BB68     	 ldr r3,[r7,#8]
 5757 0086 0222     	 movs r2,#2
 5758 0088 1A73     	 strb r2,[r3,#12]
 5759              	.L381:
3771:../Dave/Generated/FREERTOS/tasks.c ****                                 }
3772:../Dave/Generated/FREERTOS/tasks.c ****                             }
3773:../Dave/Generated/FREERTOS/tasks.c ****                             ( void ) xTaskResumeAll();
 5760              	 .loc 1 3773 0
 5761 008a FFF7FEFF 	 bl xTaskResumeAll
 5762 008e 06E0     	 b .L382
 5763              	.L378:
3774:../Dave/Generated/FREERTOS/tasks.c ****                         }
3775:../Dave/Generated/FREERTOS/tasks.c ****                     }
3776:../Dave/Generated/FREERTOS/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
3777:../Dave/Generated/FREERTOS/tasks.c ****             }
3778:../Dave/Generated/FREERTOS/tasks.c ****         }
3779:../Dave/Generated/FREERTOS/tasks.c ****         else
3780:../Dave/Generated/FREERTOS/tasks.c ****         {
3781:../Dave/Generated/FREERTOS/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5764              	 .loc 1 3781 0
 5765 0090 7869     	 ldr r0,[r7,#20]
 5766 0092 FFF7FEFF 	 bl eTaskGetState
 5767 0096 0346     	 mov r3,r0
 5768 0098 1A46     	 mov r2,r3
 5769 009a BB68     	 ldr r3,[r7,#8]
 5770 009c 1A73     	 strb r2,[r3,#12]
 5771              	.L382:
3782:../Dave/Generated/FREERTOS/tasks.c ****         }
3783:../Dave/Generated/FREERTOS/tasks.c **** 
3784:../Dave/Generated/FREERTOS/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3785:../Dave/Generated/FREERTOS/tasks.c ****          * parameter is provided to allow it to be skipped. */
3786:../Dave/Generated/FREERTOS/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
 5772              	 .loc 1 3786 0
 5773 009e 7B68     	 ldr r3,[r7,#4]
 5774 00a0 002B     	 cmp r3,#0
 5775 00a2 09D0     	 beq .L383
3787:../Dave/Generated/FREERTOS/tasks.c ****         {
3788:../Dave/Generated/FREERTOS/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
3789:../Dave/Generated/FREERTOS/tasks.c ****                 {
3790:../Dave/Generated/FREERTOS/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3791:../Dave/Generated/FREERTOS/tasks.c ****                 }
3792:../Dave/Generated/FREERTOS/tasks.c ****             #else
3793:../Dave/Generated/FREERTOS/tasks.c ****                 {
3794:../Dave/Generated/FREERTOS/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
 5776              	 .loc 1 3794 0
 5777 00a4 7B69     	 ldr r3,[r7,#20]
 5778 00a6 1B6B     	 ldr r3,[r3,#48]
 5779 00a8 1846     	 mov r0,r3
 5780 00aa FFF7FEFF 	 bl prvTaskCheckFreeStackSpace
 5781 00ae 0346     	 mov r3,r0
 5782 00b0 1A46     	 mov r2,r3
 5783 00b2 BB68     	 ldr r3,[r7,#8]
 5784 00b4 1A84     	 strh r2,[r3,#32]
 5785 00b6 02E0     	 b .L375
 5786              	.L383:
3795:../Dave/Generated/FREERTOS/tasks.c ****                 }
3796:../Dave/Generated/FREERTOS/tasks.c ****             #endif
3797:../Dave/Generated/FREERTOS/tasks.c ****         }
3798:../Dave/Generated/FREERTOS/tasks.c ****         else
3799:../Dave/Generated/FREERTOS/tasks.c ****         {
3800:../Dave/Generated/FREERTOS/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
 5787              	 .loc 1 3800 0
 5788 00b8 BB68     	 ldr r3,[r7,#8]
 5789 00ba 0022     	 movs r2,#0
 5790 00bc 1A84     	 strh r2,[r3,#32]
 5791              	.L375:
3801:../Dave/Generated/FREERTOS/tasks.c ****         }
3802:../Dave/Generated/FREERTOS/tasks.c ****     }
 5792              	 .loc 1 3802 0
 5793 00be 1837     	 adds r7,r7,#24
 5794              	.LCFI239:
 5795              	 .cfi_def_cfa_offset 8
 5796 00c0 BD46     	 mov sp,r7
 5797              	.LCFI240:
 5798              	 .cfi_def_cfa_register 13
 5799              	 
 5800 00c2 80BD     	 pop {r7,pc}
 5801              	.L386:
 5802              	 .align 2
 5803              	.L385:
 5804 00c4 00000000 	 .word pxCurrentTCB
 5805              	 .cfi_endproc
 5806              	.LFE184:
 5808              	 .section .text.prvListTasksWithinSingleList,"ax",%progbits
 5809              	 .align 2
 5810              	 .thumb
 5811              	 .thumb_func
 5813              	prvListTasksWithinSingleList:
 5814              	.LFB185:
3803:../Dave/Generated/FREERTOS/tasks.c **** 
3804:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3805:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3806:../Dave/Generated/FREERTOS/tasks.c **** 
3807:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3808:../Dave/Generated/FREERTOS/tasks.c **** 
3809:../Dave/Generated/FREERTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3810:../Dave/Generated/FREERTOS/tasks.c ****                                                      List_t * pxList,
3811:../Dave/Generated/FREERTOS/tasks.c ****                                                      eTaskState eState )
3812:../Dave/Generated/FREERTOS/tasks.c ****     {
 5815              	 .loc 1 3812 0
 5816              	 .cfi_startproc
 5817              	 
 5818              	 
 5819 0000 80B5     	 push {r7,lr}
 5820              	.LCFI241:
 5821              	 .cfi_def_cfa_offset 8
 5822              	 .cfi_offset 7,-8
 5823              	 .cfi_offset 14,-4
 5824 0002 8AB0     	 sub sp,sp,#40
 5825              	.LCFI242:
 5826              	 .cfi_def_cfa_offset 48
 5827 0004 00AF     	 add r7,sp,#0
 5828              	.LCFI243:
 5829              	 .cfi_def_cfa_register 7
 5830 0006 F860     	 str r0,[r7,#12]
 5831 0008 B960     	 str r1,[r7,#8]
 5832 000a 1346     	 mov r3,r2
 5833 000c FB71     	 strb r3,[r7,#7]
3813:../Dave/Generated/FREERTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
3814:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTask = 0;
 5834              	 .loc 1 3814 0
 5835 000e 0023     	 movs r3,#0
 5836 0010 7B62     	 str r3,[r7,#36]
3815:../Dave/Generated/FREERTOS/tasks.c **** 
3816:../Dave/Generated/FREERTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5837              	 .loc 1 3816 0
 5838 0012 BB68     	 ldr r3,[r7,#8]
 5839 0014 1B68     	 ldr r3,[r3]
 5840 0016 002B     	 cmp r3,#0
 5841 0018 40D0     	 beq .L388
 5842              	.LBB224:
3817:../Dave/Generated/FREERTOS/tasks.c ****         {
3818:../Dave/Generated/FREERTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
 5843              	 .loc 1 3818 0
 5844 001a BB68     	 ldr r3,[r7,#8]
 5845 001c 3B62     	 str r3,[r7,#32]
 5846 001e 3B6A     	 ldr r3,[r7,#32]
 5847 0020 5B68     	 ldr r3,[r3,#4]
 5848 0022 5A68     	 ldr r2,[r3,#4]
 5849 0024 3B6A     	 ldr r3,[r7,#32]
 5850 0026 5A60     	 str r2,[r3,#4]
 5851 0028 3B6A     	 ldr r3,[r7,#32]
 5852 002a 5A68     	 ldr r2,[r3,#4]
 5853 002c 3B6A     	 ldr r3,[r7,#32]
 5854 002e 0833     	 adds r3,r3,#8
 5855 0030 9A42     	 cmp r2,r3
 5856 0032 04D1     	 bne .L389
 5857              	 .loc 1 3818 0 is_stmt 0 discriminator 1
 5858 0034 3B6A     	 ldr r3,[r7,#32]
 5859 0036 5B68     	 ldr r3,[r3,#4]
 5860 0038 5A68     	 ldr r2,[r3,#4]
 5861 003a 3B6A     	 ldr r3,[r7,#32]
 5862 003c 5A60     	 str r2,[r3,#4]
 5863              	.L389:
 5864              	 .loc 1 3818 0 discriminator 3
 5865 003e 3B6A     	 ldr r3,[r7,#32]
 5866 0040 5B68     	 ldr r3,[r3,#4]
 5867 0042 DB68     	 ldr r3,[r3,#12]
 5868 0044 FB61     	 str r3,[r7,#28]
 5869              	.L391:
 5870              	.LBE224:
 5871              	.LBB225:
3819:../Dave/Generated/FREERTOS/tasks.c **** 
3820:../Dave/Generated/FREERTOS/tasks.c ****             /* Populate an TaskStatus_t structure within the
3821:../Dave/Generated/FREERTOS/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
3822:../Dave/Generated/FREERTOS/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3823:../Dave/Generated/FREERTOS/tasks.c ****              * meaning of each TaskStatus_t structure member. */
3824:../Dave/Generated/FREERTOS/tasks.c ****             do
3825:../Dave/Generated/FREERTOS/tasks.c ****             {
3826:../Dave/Generated/FREERTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
 5872              	 .loc 1 3826 0 is_stmt 1
 5873 0046 BB68     	 ldr r3,[r7,#8]
 5874 0048 BB61     	 str r3,[r7,#24]
 5875 004a BB69     	 ldr r3,[r7,#24]
 5876 004c 5B68     	 ldr r3,[r3,#4]
 5877 004e 5A68     	 ldr r2,[r3,#4]
 5878 0050 BB69     	 ldr r3,[r7,#24]
 5879 0052 5A60     	 str r2,[r3,#4]
 5880 0054 BB69     	 ldr r3,[r7,#24]
 5881 0056 5A68     	 ldr r2,[r3,#4]
 5882 0058 BB69     	 ldr r3,[r7,#24]
 5883 005a 0833     	 adds r3,r3,#8
 5884 005c 9A42     	 cmp r2,r3
 5885 005e 04D1     	 bne .L390
 5886              	 .loc 1 3826 0 is_stmt 0 discriminator 1
 5887 0060 BB69     	 ldr r3,[r7,#24]
 5888 0062 5B68     	 ldr r3,[r3,#4]
 5889 0064 5A68     	 ldr r2,[r3,#4]
 5890 0066 BB69     	 ldr r3,[r7,#24]
 5891 0068 5A60     	 str r2,[r3,#4]
 5892              	.L390:
 5893              	 .loc 1 3826 0 discriminator 3
 5894 006a BB69     	 ldr r3,[r7,#24]
 5895 006c 5B68     	 ldr r3,[r3,#4]
 5896 006e DB68     	 ldr r3,[r3,#12]
 5897 0070 7B61     	 str r3,[r7,#20]
 5898              	.LBE225:
3827:../Dave/Generated/FREERTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5899              	 .loc 1 3827 0 is_stmt 1 discriminator 3
 5900 0072 7A6A     	 ldr r2,[r7,#36]
 5901 0074 1346     	 mov r3,r2
 5902 0076 DB00     	 lsls r3,r3,#3
 5903 0078 1344     	 add r3,r3,r2
 5904 007a 9B00     	 lsls r3,r3,#2
 5905 007c 1A46     	 mov r2,r3
 5906 007e FB68     	 ldr r3,[r7,#12]
 5907 0080 1A44     	 add r2,r2,r3
 5908 0082 FB79     	 ldrb r3,[r7,#7]
 5909 0084 7869     	 ldr r0,[r7,#20]
 5910 0086 1146     	 mov r1,r2
 5911 0088 0122     	 movs r2,#1
 5912 008a FFF7FEFF 	 bl vTaskGetInfo
3828:../Dave/Generated/FREERTOS/tasks.c ****                 uxTask++;
 5913              	 .loc 1 3828 0 discriminator 3
 5914 008e 7B6A     	 ldr r3,[r7,#36]
 5915 0090 0133     	 adds r3,r3,#1
 5916 0092 7B62     	 str r3,[r7,#36]
3829:../Dave/Generated/FREERTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 5917              	 .loc 1 3829 0 discriminator 3
 5918 0094 7A69     	 ldr r2,[r7,#20]
 5919 0096 FB69     	 ldr r3,[r7,#28]
 5920 0098 9A42     	 cmp r2,r3
 5921 009a D4D1     	 bne .L391
 5922              	.L388:
3830:../Dave/Generated/FREERTOS/tasks.c ****         }
3831:../Dave/Generated/FREERTOS/tasks.c ****         else
3832:../Dave/Generated/FREERTOS/tasks.c ****         {
3833:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3834:../Dave/Generated/FREERTOS/tasks.c ****         }
3835:../Dave/Generated/FREERTOS/tasks.c **** 
3836:../Dave/Generated/FREERTOS/tasks.c ****         return uxTask;
 5923              	 .loc 1 3836 0
 5924 009c 7B6A     	 ldr r3,[r7,#36]
3837:../Dave/Generated/FREERTOS/tasks.c ****     }
 5925              	 .loc 1 3837 0
 5926 009e 1846     	 mov r0,r3
 5927 00a0 2837     	 adds r7,r7,#40
 5928              	.LCFI244:
 5929              	 .cfi_def_cfa_offset 8
 5930 00a2 BD46     	 mov sp,r7
 5931              	.LCFI245:
 5932              	 .cfi_def_cfa_register 13
 5933              	 
 5934 00a4 80BD     	 pop {r7,pc}
 5935              	 .cfi_endproc
 5936              	.LFE185:
 5938 00a6 00BF     	 .section .text.prvTaskCheckFreeStackSpace,"ax",%progbits
 5939              	 .align 2
 5940              	 .thumb
 5941              	 .thumb_func
 5943              	prvTaskCheckFreeStackSpace:
 5944              	.LFB186:
3838:../Dave/Generated/FREERTOS/tasks.c **** 
3839:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3840:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3841:../Dave/Generated/FREERTOS/tasks.c **** 
3842:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3843:../Dave/Generated/FREERTOS/tasks.c **** 
3844:../Dave/Generated/FREERTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3845:../Dave/Generated/FREERTOS/tasks.c ****     {
 5945              	 .loc 1 3845 0
 5946              	 .cfi_startproc
 5947              	 
 5948              	 
 5949              	 
 5950 0000 80B4     	 push {r7}
 5951              	.LCFI246:
 5952              	 .cfi_def_cfa_offset 4
 5953              	 .cfi_offset 7,-4
 5954 0002 85B0     	 sub sp,sp,#20
 5955              	.LCFI247:
 5956              	 .cfi_def_cfa_offset 24
 5957 0004 00AF     	 add r7,sp,#0
 5958              	.LCFI248:
 5959              	 .cfi_def_cfa_register 7
 5960 0006 7860     	 str r0,[r7,#4]
3846:../Dave/Generated/FREERTOS/tasks.c ****         uint32_t ulCount = 0U;
 5961              	 .loc 1 3846 0
 5962 0008 0023     	 movs r3,#0
 5963 000a FB60     	 str r3,[r7,#12]
3847:../Dave/Generated/FREERTOS/tasks.c **** 
3848:../Dave/Generated/FREERTOS/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 5964              	 .loc 1 3848 0
 5965 000c 05E0     	 b .L394
 5966              	.L395:
3849:../Dave/Generated/FREERTOS/tasks.c ****         {
3850:../Dave/Generated/FREERTOS/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
 5967              	 .loc 1 3850 0
 5968 000e 7B68     	 ldr r3,[r7,#4]
 5969 0010 0133     	 adds r3,r3,#1
 5970 0012 7B60     	 str r3,[r7,#4]
3851:../Dave/Generated/FREERTOS/tasks.c ****             ulCount++;
 5971              	 .loc 1 3851 0
 5972 0014 FB68     	 ldr r3,[r7,#12]
 5973 0016 0133     	 adds r3,r3,#1
 5974 0018 FB60     	 str r3,[r7,#12]
 5975              	.L394:
3848:../Dave/Generated/FREERTOS/tasks.c ****         {
 5976              	 .loc 1 3848 0
 5977 001a 7B68     	 ldr r3,[r7,#4]
 5978 001c 1B78     	 ldrb r3,[r3]
 5979 001e A52B     	 cmp r3,#165
 5980 0020 F5D0     	 beq .L395
3852:../Dave/Generated/FREERTOS/tasks.c ****         }
3853:../Dave/Generated/FREERTOS/tasks.c **** 
3854:../Dave/Generated/FREERTOS/tasks.c ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
 5981              	 .loc 1 3854 0
 5982 0022 FB68     	 ldr r3,[r7,#12]
 5983 0024 9B08     	 lsrs r3,r3,#2
 5984 0026 FB60     	 str r3,[r7,#12]
3855:../Dave/Generated/FREERTOS/tasks.c **** 
3856:../Dave/Generated/FREERTOS/tasks.c ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
 5985              	 .loc 1 3856 0
 5986 0028 FB68     	 ldr r3,[r7,#12]
 5987 002a 9BB2     	 uxth r3,r3
3857:../Dave/Generated/FREERTOS/tasks.c ****     }
 5988              	 .loc 1 3857 0
 5989 002c 1846     	 mov r0,r3
 5990 002e 1437     	 adds r7,r7,#20
 5991              	.LCFI249:
 5992              	 .cfi_def_cfa_offset 4
 5993 0030 BD46     	 mov sp,r7
 5994              	.LCFI250:
 5995              	 .cfi_def_cfa_register 13
 5996              	 
 5997 0032 5DF8047B 	 ldr r7,[sp],#4
 5998              	.LCFI251:
 5999              	 .cfi_restore 7
 6000              	 .cfi_def_cfa_offset 0
 6001 0036 7047     	 bx lr
 6002              	 .cfi_endproc
 6003              	.LFE186:
 6005              	 .section .text.uxTaskGetStackHighWaterMark,"ax",%progbits
 6006              	 .align 2
 6007              	 .global uxTaskGetStackHighWaterMark
 6008              	 .thumb
 6009              	 .thumb_func
 6011              	uxTaskGetStackHighWaterMark:
 6012              	.LFB187:
3858:../Dave/Generated/FREERTOS/tasks.c **** 
3859:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3860:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3861:../Dave/Generated/FREERTOS/tasks.c **** 
3862:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3863:../Dave/Generated/FREERTOS/tasks.c **** 
3864:../Dave/Generated/FREERTOS/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3865:../Dave/Generated/FREERTOS/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3866:../Dave/Generated/FREERTOS/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
3867:../Dave/Generated/FREERTOS/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
3868:../Dave/Generated/FREERTOS/tasks.c ****  * applications that expect an 8-bit return type. */
3869:../Dave/Generated/FREERTOS/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3870:../Dave/Generated/FREERTOS/tasks.c ****     {
3871:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3872:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t * pucEndOfStack;
3873:../Dave/Generated/FREERTOS/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
3874:../Dave/Generated/FREERTOS/tasks.c **** 
3875:../Dave/Generated/FREERTOS/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3876:../Dave/Generated/FREERTOS/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
3877:../Dave/Generated/FREERTOS/tasks.c ****          * allows the user to determine the return type.  It gets around the
3878:../Dave/Generated/FREERTOS/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
3879:../Dave/Generated/FREERTOS/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
3880:../Dave/Generated/FREERTOS/tasks.c ****          * type. */
3881:../Dave/Generated/FREERTOS/tasks.c **** 
3882:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3883:../Dave/Generated/FREERTOS/tasks.c **** 
3884:../Dave/Generated/FREERTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3885:../Dave/Generated/FREERTOS/tasks.c ****             {
3886:../Dave/Generated/FREERTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3887:../Dave/Generated/FREERTOS/tasks.c ****             }
3888:../Dave/Generated/FREERTOS/tasks.c ****         #else
3889:../Dave/Generated/FREERTOS/tasks.c ****             {
3890:../Dave/Generated/FREERTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3891:../Dave/Generated/FREERTOS/tasks.c ****             }
3892:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3893:../Dave/Generated/FREERTOS/tasks.c **** 
3894:../Dave/Generated/FREERTOS/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3895:../Dave/Generated/FREERTOS/tasks.c **** 
3896:../Dave/Generated/FREERTOS/tasks.c ****         return uxReturn;
3897:../Dave/Generated/FREERTOS/tasks.c ****     }
3898:../Dave/Generated/FREERTOS/tasks.c **** 
3899:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3900:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3901:../Dave/Generated/FREERTOS/tasks.c **** 
3902:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3903:../Dave/Generated/FREERTOS/tasks.c **** 
3904:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3905:../Dave/Generated/FREERTOS/tasks.c ****     {
 6013              	 .loc 1 3905 0
 6014              	 .cfi_startproc
 6015              	 
 6016              	 
 6017 0000 80B5     	 push {r7,lr}
 6018              	.LCFI252:
 6019              	 .cfi_def_cfa_offset 8
 6020              	 .cfi_offset 7,-8
 6021              	 .cfi_offset 14,-4
 6022 0002 86B0     	 sub sp,sp,#24
 6023              	.LCFI253:
 6024              	 .cfi_def_cfa_offset 32
 6025 0004 00AF     	 add r7,sp,#0
 6026              	.LCFI254:
 6027              	 .cfi_def_cfa_register 7
 6028 0006 7860     	 str r0,[r7,#4]
3906:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3907:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t * pucEndOfStack;
3908:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxReturn;
3909:../Dave/Generated/FREERTOS/tasks.c **** 
3910:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 6029              	 .loc 1 3910 0
 6030 0008 7B68     	 ldr r3,[r7,#4]
 6031 000a 002B     	 cmp r3,#0
 6032 000c 02D1     	 bne .L398
 6033              	 .loc 1 3910 0 is_stmt 0 discriminator 1
 6034 000e 094B     	 ldr r3,.L401
 6035 0010 1B68     	 ldr r3,[r3]
 6036 0012 00E0     	 b .L399
 6037              	.L398:
 6038              	 .loc 1 3910 0 discriminator 2
 6039 0014 7B68     	 ldr r3,[r7,#4]
 6040              	.L399:
 6041              	 .loc 1 3910 0 discriminator 4
 6042 0016 7B61     	 str r3,[r7,#20]
3911:../Dave/Generated/FREERTOS/tasks.c **** 
3912:../Dave/Generated/FREERTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3913:../Dave/Generated/FREERTOS/tasks.c ****             {
3914:../Dave/Generated/FREERTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 6043              	 .loc 1 3914 0 is_stmt 1 discriminator 4
 6044 0018 7B69     	 ldr r3,[r7,#20]
 6045 001a 1B6B     	 ldr r3,[r3,#48]
 6046 001c 3B61     	 str r3,[r7,#16]
3915:../Dave/Generated/FREERTOS/tasks.c ****             }
3916:../Dave/Generated/FREERTOS/tasks.c ****         #else
3917:../Dave/Generated/FREERTOS/tasks.c ****             {
3918:../Dave/Generated/FREERTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3919:../Dave/Generated/FREERTOS/tasks.c ****             }
3920:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3921:../Dave/Generated/FREERTOS/tasks.c **** 
3922:../Dave/Generated/FREERTOS/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 6047              	 .loc 1 3922 0 discriminator 4
 6048 001e 3869     	 ldr r0,[r7,#16]
 6049 0020 FFF7FEFF 	 bl prvTaskCheckFreeStackSpace
 6050 0024 0346     	 mov r3,r0
 6051 0026 FB60     	 str r3,[r7,#12]
3923:../Dave/Generated/FREERTOS/tasks.c **** 
3924:../Dave/Generated/FREERTOS/tasks.c ****         return uxReturn;
 6052              	 .loc 1 3924 0 discriminator 4
 6053 0028 FB68     	 ldr r3,[r7,#12]
3925:../Dave/Generated/FREERTOS/tasks.c ****     }
 6054              	 .loc 1 3925 0 discriminator 4
 6055 002a 1846     	 mov r0,r3
 6056 002c 1837     	 adds r7,r7,#24
 6057              	.LCFI255:
 6058              	 .cfi_def_cfa_offset 8
 6059 002e BD46     	 mov sp,r7
 6060              	.LCFI256:
 6061              	 .cfi_def_cfa_register 13
 6062              	 
 6063 0030 80BD     	 pop {r7,pc}
 6064              	.L402:
 6065 0032 00BF     	 .align 2
 6066              	.L401:
 6067 0034 00000000 	 .word pxCurrentTCB
 6068              	 .cfi_endproc
 6069              	.LFE187:
 6071              	 .section .text.prvDeleteTCB,"ax",%progbits
 6072              	 .align 2
 6073              	 .thumb
 6074              	 .thumb_func
 6076              	prvDeleteTCB:
 6077              	.LFB188:
3926:../Dave/Generated/FREERTOS/tasks.c **** 
3927:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3928:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3929:../Dave/Generated/FREERTOS/tasks.c **** 
3930:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3931:../Dave/Generated/FREERTOS/tasks.c **** 
3932:../Dave/Generated/FREERTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
3933:../Dave/Generated/FREERTOS/tasks.c ****     {
 6078              	 .loc 1 3933 0
 6079              	 .cfi_startproc
 6080              	 
 6081              	 
 6082 0000 80B5     	 push {r7,lr}
 6083              	.LCFI257:
 6084              	 .cfi_def_cfa_offset 8
 6085              	 .cfi_offset 7,-8
 6086              	 .cfi_offset 14,-4
 6087 0002 82B0     	 sub sp,sp,#8
 6088              	.LCFI258:
 6089              	 .cfi_def_cfa_offset 16
 6090 0004 00AF     	 add r7,sp,#0
 6091              	.LCFI259:
 6092              	 .cfi_def_cfa_register 7
 6093 0006 7860     	 str r0,[r7,#4]
3934:../Dave/Generated/FREERTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
3935:../Dave/Generated/FREERTOS/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
3936:../Dave/Generated/FREERTOS/tasks.c ****          * want to allocate and clean RAM statically. */
3937:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
3938:../Dave/Generated/FREERTOS/tasks.c **** 
3939:../Dave/Generated/FREERTOS/tasks.c ****         /* Free up the memory allocated by the scheduler for the task.  It is up
3940:../Dave/Generated/FREERTOS/tasks.c ****          * to the task to free any memory allocated at the application level.
3941:../Dave/Generated/FREERTOS/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3942:../Dave/Generated/FREERTOS/tasks.c ****          * for additional information. */
3943:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3944:../Dave/Generated/FREERTOS/tasks.c ****             {
3945:../Dave/Generated/FREERTOS/tasks.c ****                 _reclaim_reent( &( pxTCB->xNewLib_reent ) );
3946:../Dave/Generated/FREERTOS/tasks.c ****             }
3947:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3948:../Dave/Generated/FREERTOS/tasks.c **** 
3949:../Dave/Generated/FREERTOS/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
3950:../Dave/Generated/FREERTOS/tasks.c ****             {
3951:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task can only have been allocated dynamically - free both
3952:../Dave/Generated/FREERTOS/tasks.c ****                  * the stack and TCB. */
3953:../Dave/Generated/FREERTOS/tasks.c ****                 vPortFree( pxTCB->pxStack );
 6094              	 .loc 1 3953 0
 6095 0008 7B68     	 ldr r3,[r7,#4]
 6096 000a 1B6B     	 ldr r3,[r3,#48]
 6097 000c 1846     	 mov r0,r3
 6098 000e FFF7FEFF 	 bl vPortFree
3954:../Dave/Generated/FREERTOS/tasks.c ****                 vPortFree( pxTCB );
 6099              	 .loc 1 3954 0
 6100 0012 7868     	 ldr r0,[r7,#4]
 6101 0014 FFF7FEFF 	 bl vPortFree
3955:../Dave/Generated/FREERTOS/tasks.c ****             }
3956:../Dave/Generated/FREERTOS/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
3957:../Dave/Generated/FREERTOS/tasks.c ****             {
3958:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task could have been allocated statically or dynamically, so
3959:../Dave/Generated/FREERTOS/tasks.c ****                  * check what was statically allocated before trying to free the
3960:../Dave/Generated/FREERTOS/tasks.c ****                  * memory. */
3961:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3962:../Dave/Generated/FREERTOS/tasks.c ****                 {
3963:../Dave/Generated/FREERTOS/tasks.c ****                     /* Both the stack and TCB were allocated dynamically, so both
3964:../Dave/Generated/FREERTOS/tasks.c ****                      * must be freed. */
3965:../Dave/Generated/FREERTOS/tasks.c ****                     vPortFree( pxTCB->pxStack );
3966:../Dave/Generated/FREERTOS/tasks.c ****                     vPortFree( pxTCB );
3967:../Dave/Generated/FREERTOS/tasks.c ****                 }
3968:../Dave/Generated/FREERTOS/tasks.c ****                 else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3969:../Dave/Generated/FREERTOS/tasks.c ****                 {
3970:../Dave/Generated/FREERTOS/tasks.c ****                     /* Only the stack was statically allocated, so the TCB is the
3971:../Dave/Generated/FREERTOS/tasks.c ****                      * only memory that must be freed. */
3972:../Dave/Generated/FREERTOS/tasks.c ****                     vPortFree( pxTCB );
3973:../Dave/Generated/FREERTOS/tasks.c ****                 }
3974:../Dave/Generated/FREERTOS/tasks.c ****                 else
3975:../Dave/Generated/FREERTOS/tasks.c ****                 {
3976:../Dave/Generated/FREERTOS/tasks.c ****                     /* Neither the stack nor the TCB were allocated dynamically, so
3977:../Dave/Generated/FREERTOS/tasks.c ****                      * nothing needs to be freed. */
3978:../Dave/Generated/FREERTOS/tasks.c ****                     configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND
3979:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3980:../Dave/Generated/FREERTOS/tasks.c ****                 }
3981:../Dave/Generated/FREERTOS/tasks.c ****             }
3982:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3983:../Dave/Generated/FREERTOS/tasks.c ****     }
 6102              	 .loc 1 3983 0
 6103 0018 0837     	 adds r7,r7,#8
 6104              	.LCFI260:
 6105              	 .cfi_def_cfa_offset 8
 6106 001a BD46     	 mov sp,r7
 6107              	.LCFI261:
 6108              	 .cfi_def_cfa_register 13
 6109              	 
 6110 001c 80BD     	 pop {r7,pc}
 6111              	 .cfi_endproc
 6112              	.LFE188:
 6114 001e 00BF     	 .section .text.prvResetNextTaskUnblockTime,"ax",%progbits
 6115              	 .align 2
 6116              	 .thumb
 6117              	 .thumb_func
 6119              	prvResetNextTaskUnblockTime:
 6120              	.LFB189:
3984:../Dave/Generated/FREERTOS/tasks.c **** 
3985:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3986:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3987:../Dave/Generated/FREERTOS/tasks.c **** 
3988:../Dave/Generated/FREERTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3989:../Dave/Generated/FREERTOS/tasks.c **** {
 6121              	 .loc 1 3989 0
 6122              	 .cfi_startproc
 6123              	 
 6124              	 
 6125              	 
 6126 0000 80B4     	 push {r7}
 6127              	.LCFI262:
 6128              	 .cfi_def_cfa_offset 4
 6129              	 .cfi_offset 7,-4
 6130 0002 00AF     	 add r7,sp,#0
 6131              	.LCFI263:
 6132              	 .cfi_def_cfa_register 7
3990:../Dave/Generated/FREERTOS/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 6133              	 .loc 1 3990 0
 6134 0004 094B     	 ldr r3,.L407
 6135 0006 1B68     	 ldr r3,[r3]
 6136 0008 1B68     	 ldr r3,[r3]
 6137 000a 002B     	 cmp r3,#0
 6138 000c 04D1     	 bne .L405
3991:../Dave/Generated/FREERTOS/tasks.c ****     {
3992:../Dave/Generated/FREERTOS/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3993:../Dave/Generated/FREERTOS/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
3994:../Dave/Generated/FREERTOS/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3995:../Dave/Generated/FREERTOS/tasks.c ****          * there is an item in the delayed list. */
3996:../Dave/Generated/FREERTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 6139              	 .loc 1 3996 0
 6140 000e 084B     	 ldr r3,.L407+4
 6141 0010 4FF0FF32 	 mov r2,#-1
 6142 0014 1A60     	 str r2,[r3]
 6143 0016 05E0     	 b .L404
 6144              	.L405:
3997:../Dave/Generated/FREERTOS/tasks.c ****     }
3998:../Dave/Generated/FREERTOS/tasks.c ****     else
3999:../Dave/Generated/FREERTOS/tasks.c ****     {
4000:../Dave/Generated/FREERTOS/tasks.c ****         /* The new current delayed list is not empty, get the value of
4001:../Dave/Generated/FREERTOS/tasks.c ****          * the item at the head of the delayed list.  This is the time at
4002:../Dave/Generated/FREERTOS/tasks.c ****          * which the task at the head of the delayed list should be removed
4003:../Dave/Generated/FREERTOS/tasks.c ****          * from the Blocked state. */
4004:../Dave/Generated/FREERTOS/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 6145              	 .loc 1 4004 0
 6146 0018 044B     	 ldr r3,.L407
 6147 001a 1B68     	 ldr r3,[r3]
 6148 001c DB68     	 ldr r3,[r3,#12]
 6149 001e 1B68     	 ldr r3,[r3]
 6150 0020 034A     	 ldr r2,.L407+4
 6151 0022 1360     	 str r3,[r2]
 6152              	.L404:
4005:../Dave/Generated/FREERTOS/tasks.c ****     }
4006:../Dave/Generated/FREERTOS/tasks.c **** }
 6153              	 .loc 1 4006 0
 6154 0024 BD46     	 mov sp,r7
 6155              	.LCFI264:
 6156              	 .cfi_def_cfa_register 13
 6157              	 
 6158 0026 5DF8047B 	 ldr r7,[sp],#4
 6159              	.LCFI265:
 6160              	 .cfi_restore 7
 6161              	 .cfi_def_cfa_offset 0
 6162 002a 7047     	 bx lr
 6163              	.L408:
 6164              	 .align 2
 6165              	.L407:
 6166 002c 00000000 	 .word pxDelayedTaskList
 6167 0030 00000000 	 .word xNextTaskUnblockTime
 6168              	 .cfi_endproc
 6169              	.LFE189:
 6171              	 .section .text.xTaskGetCurrentTaskHandle,"ax",%progbits
 6172              	 .align 2
 6173              	 .global xTaskGetCurrentTaskHandle
 6174              	 .thumb
 6175              	 .thumb_func
 6177              	xTaskGetCurrentTaskHandle:
 6178              	.LFB190:
4007:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4008:../Dave/Generated/FREERTOS/tasks.c **** 
4009:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
4010:../Dave/Generated/FREERTOS/tasks.c **** 
4011:../Dave/Generated/FREERTOS/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
4012:../Dave/Generated/FREERTOS/tasks.c ****     {
 6179              	 .loc 1 4012 0
 6180              	 .cfi_startproc
 6181              	 
 6182              	 
 6183              	 
 6184 0000 80B4     	 push {r7}
 6185              	.LCFI266:
 6186              	 .cfi_def_cfa_offset 4
 6187              	 .cfi_offset 7,-4
 6188 0002 83B0     	 sub sp,sp,#12
 6189              	.LCFI267:
 6190              	 .cfi_def_cfa_offset 16
 6191 0004 00AF     	 add r7,sp,#0
 6192              	.LCFI268:
 6193              	 .cfi_def_cfa_register 7
4013:../Dave/Generated/FREERTOS/tasks.c ****         TaskHandle_t xReturn;
4014:../Dave/Generated/FREERTOS/tasks.c **** 
4015:../Dave/Generated/FREERTOS/tasks.c ****         /* A critical section is not required as this is not called from
4016:../Dave/Generated/FREERTOS/tasks.c ****          * an interrupt and the current TCB will always be the same for any
4017:../Dave/Generated/FREERTOS/tasks.c ****          * individual execution thread. */
4018:../Dave/Generated/FREERTOS/tasks.c ****         xReturn = pxCurrentTCB;
 6194              	 .loc 1 4018 0
 6195 0006 054B     	 ldr r3,.L411
 6196 0008 1B68     	 ldr r3,[r3]
 6197 000a 7B60     	 str r3,[r7,#4]
4019:../Dave/Generated/FREERTOS/tasks.c **** 
4020:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 6198              	 .loc 1 4020 0
 6199 000c 7B68     	 ldr r3,[r7,#4]
4021:../Dave/Generated/FREERTOS/tasks.c ****     }
 6200              	 .loc 1 4021 0
 6201 000e 1846     	 mov r0,r3
 6202 0010 0C37     	 adds r7,r7,#12
 6203              	.LCFI269:
 6204              	 .cfi_def_cfa_offset 4
 6205 0012 BD46     	 mov sp,r7
 6206              	.LCFI270:
 6207              	 .cfi_def_cfa_register 13
 6208              	 
 6209 0014 5DF8047B 	 ldr r7,[sp],#4
 6210              	.LCFI271:
 6211              	 .cfi_restore 7
 6212              	 .cfi_def_cfa_offset 0
 6213 0018 7047     	 bx lr
 6214              	.L412:
 6215 001a 00BF     	 .align 2
 6216              	.L411:
 6217 001c 00000000 	 .word pxCurrentTCB
 6218              	 .cfi_endproc
 6219              	.LFE190:
 6221              	 .section .text.xTaskGetSchedulerState,"ax",%progbits
 6222              	 .align 2
 6223              	 .global xTaskGetSchedulerState
 6224              	 .thumb
 6225              	 .thumb_func
 6227              	xTaskGetSchedulerState:
 6228              	.LFB191:
4022:../Dave/Generated/FREERTOS/tasks.c **** 
4023:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4024:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4025:../Dave/Generated/FREERTOS/tasks.c **** 
4026:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4027:../Dave/Generated/FREERTOS/tasks.c **** 
4028:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
4029:../Dave/Generated/FREERTOS/tasks.c ****     {
 6229              	 .loc 1 4029 0
 6230              	 .cfi_startproc
 6231              	 
 6232              	 
 6233              	 
 6234 0000 80B4     	 push {r7}
 6235              	.LCFI272:
 6236              	 .cfi_def_cfa_offset 4
 6237              	 .cfi_offset 7,-4
 6238 0002 83B0     	 sub sp,sp,#12
 6239              	.LCFI273:
 6240              	 .cfi_def_cfa_offset 16
 6241 0004 00AF     	 add r7,sp,#0
 6242              	.LCFI274:
 6243              	 .cfi_def_cfa_register 7
4030:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
4031:../Dave/Generated/FREERTOS/tasks.c **** 
4032:../Dave/Generated/FREERTOS/tasks.c ****         if( xSchedulerRunning == pdFALSE )
 6244              	 .loc 1 4032 0
 6245 0006 0B4B     	 ldr r3,.L418
 6246 0008 1B68     	 ldr r3,[r3]
 6247 000a 002B     	 cmp r3,#0
 6248 000c 02D1     	 bne .L414
4033:../Dave/Generated/FREERTOS/tasks.c ****         {
4034:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
 6249              	 .loc 1 4034 0
 6250 000e 0123     	 movs r3,#1
 6251 0010 7B60     	 str r3,[r7,#4]
 6252 0012 08E0     	 b .L415
 6253              	.L414:
4035:../Dave/Generated/FREERTOS/tasks.c ****         }
4036:../Dave/Generated/FREERTOS/tasks.c ****         else
4037:../Dave/Generated/FREERTOS/tasks.c ****         {
4038:../Dave/Generated/FREERTOS/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6254              	 .loc 1 4038 0
 6255 0014 084B     	 ldr r3,.L418+4
 6256 0016 1B68     	 ldr r3,[r3]
 6257 0018 002B     	 cmp r3,#0
 6258 001a 02D1     	 bne .L416
4039:../Dave/Generated/FREERTOS/tasks.c ****             {
4040:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = taskSCHEDULER_RUNNING;
 6259              	 .loc 1 4040 0
 6260 001c 0223     	 movs r3,#2
 6261 001e 7B60     	 str r3,[r7,#4]
 6262 0020 01E0     	 b .L415
 6263              	.L416:
4041:../Dave/Generated/FREERTOS/tasks.c ****             }
4042:../Dave/Generated/FREERTOS/tasks.c ****             else
4043:../Dave/Generated/FREERTOS/tasks.c ****             {
4044:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = taskSCHEDULER_SUSPENDED;
 6264              	 .loc 1 4044 0
 6265 0022 0023     	 movs r3,#0
 6266 0024 7B60     	 str r3,[r7,#4]
 6267              	.L415:
4045:../Dave/Generated/FREERTOS/tasks.c ****             }
4046:../Dave/Generated/FREERTOS/tasks.c ****         }
4047:../Dave/Generated/FREERTOS/tasks.c **** 
4048:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 6268              	 .loc 1 4048 0
 6269 0026 7B68     	 ldr r3,[r7,#4]
4049:../Dave/Generated/FREERTOS/tasks.c ****     }
 6270              	 .loc 1 4049 0
 6271 0028 1846     	 mov r0,r3
 6272 002a 0C37     	 adds r7,r7,#12
 6273              	.LCFI275:
 6274              	 .cfi_def_cfa_offset 4
 6275 002c BD46     	 mov sp,r7
 6276              	.LCFI276:
 6277              	 .cfi_def_cfa_register 13
 6278              	 
 6279 002e 5DF8047B 	 ldr r7,[sp],#4
 6280              	.LCFI277:
 6281              	 .cfi_restore 7
 6282              	 .cfi_def_cfa_offset 0
 6283 0032 7047     	 bx lr
 6284              	.L419:
 6285              	 .align 2
 6286              	.L418:
 6287 0034 00000000 	 .word xSchedulerRunning
 6288 0038 00000000 	 .word uxSchedulerSuspended
 6289              	 .cfi_endproc
 6290              	.LFE191:
 6292              	 .section .text.xTaskPriorityInherit,"ax",%progbits
 6293              	 .align 2
 6294              	 .global xTaskPriorityInherit
 6295              	 .thumb
 6296              	 .thumb_func
 6298              	xTaskPriorityInherit:
 6299              	.LFB192:
4050:../Dave/Generated/FREERTOS/tasks.c **** 
4051:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4052:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4053:../Dave/Generated/FREERTOS/tasks.c **** 
4054:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4055:../Dave/Generated/FREERTOS/tasks.c **** 
4056:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4057:../Dave/Generated/FREERTOS/tasks.c ****     {
 6300              	 .loc 1 4057 0
 6301              	 .cfi_startproc
 6302              	 
 6303              	 
 6304 0000 80B5     	 push {r7,lr}
 6305              	.LCFI278:
 6306              	 .cfi_def_cfa_offset 8
 6307              	 .cfi_offset 7,-8
 6308              	 .cfi_offset 14,-4
 6309 0002 84B0     	 sub sp,sp,#16
 6310              	.LCFI279:
 6311              	 .cfi_def_cfa_offset 24
 6312 0004 00AF     	 add r7,sp,#0
 6313              	.LCFI280:
 6314              	 .cfi_def_cfa_register 7
 6315 0006 7860     	 str r0,[r7,#4]
4058:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6316              	 .loc 1 4058 0
 6317 0008 7B68     	 ldr r3,[r7,#4]
 6318 000a BB60     	 str r3,[r7,#8]
4059:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 6319              	 .loc 1 4059 0
 6320 000c 0023     	 movs r3,#0
 6321 000e FB60     	 str r3,[r7,#12]
4060:../Dave/Generated/FREERTOS/tasks.c **** 
4061:../Dave/Generated/FREERTOS/tasks.c ****         /* If the mutex was given back by an interrupt while the queue was
4062:../Dave/Generated/FREERTOS/tasks.c ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4063:../Dave/Generated/FREERTOS/tasks.c ****          * needed as interrupts can no longer use mutexes? */
4064:../Dave/Generated/FREERTOS/tasks.c ****         if( pxMutexHolder != NULL )
 6322              	 .loc 1 4064 0
 6323 0010 7B68     	 ldr r3,[r7,#4]
 6324 0012 002B     	 cmp r3,#0
 6325 0014 60D0     	 beq .L421
4065:../Dave/Generated/FREERTOS/tasks.c ****         {
4066:../Dave/Generated/FREERTOS/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
4067:../Dave/Generated/FREERTOS/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
4068:../Dave/Generated/FREERTOS/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
4069:../Dave/Generated/FREERTOS/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 6326              	 .loc 1 4069 0
 6327 0016 BB68     	 ldr r3,[r7,#8]
 6328 0018 DA6A     	 ldr r2,[r3,#44]
 6329 001a 324B     	 ldr r3,.L428
 6330 001c 1B68     	 ldr r3,[r3]
 6331 001e DB6A     	 ldr r3,[r3,#44]
 6332 0020 9A42     	 cmp r2,r3
 6333 0022 50D2     	 bcs .L422
4070:../Dave/Generated/FREERTOS/tasks.c ****             {
4071:../Dave/Generated/FREERTOS/tasks.c ****                 /* Adjust the mutex holder state to account for its new
4072:../Dave/Generated/FREERTOS/tasks.c ****                  * priority.  Only reset the event list item value if the value is
4073:../Dave/Generated/FREERTOS/tasks.c ****                  * not being used for anything else. */
4074:../Dave/Generated/FREERTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
 6334              	 .loc 1 4074 0
 6335 0024 BB68     	 ldr r3,[r7,#8]
 6336 0026 9B69     	 ldr r3,[r3,#24]
 6337 0028 002B     	 cmp r3,#0
 6338 002a 06DB     	 blt .L423
4075:../Dave/Generated/FREERTOS/tasks.c ****                 {
4076:../Dave/Generated/FREERTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
 6339              	 .loc 1 4076 0
 6340 002c 2D4B     	 ldr r3,.L428
 6341 002e 1B68     	 ldr r3,[r3]
 6342 0030 DB6A     	 ldr r3,[r3,#44]
 6343 0032 C3F10502 	 rsb r2,r3,#5
 6344 0036 BB68     	 ldr r3,[r7,#8]
 6345 0038 9A61     	 str r2,[r3,#24]
 6346              	.L423:
4077:../Dave/Generated/FREERTOS/tasks.c ****                 }
4078:../Dave/Generated/FREERTOS/tasks.c ****                 else
4079:../Dave/Generated/FREERTOS/tasks.c ****                 {
4080:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4081:../Dave/Generated/FREERTOS/tasks.c ****                 }
4082:../Dave/Generated/FREERTOS/tasks.c **** 
4083:../Dave/Generated/FREERTOS/tasks.c ****                 /* If the task being modified is in the ready state it will need
4084:../Dave/Generated/FREERTOS/tasks.c ****                  * to be moved into a new list. */
4085:../Dave/Generated/FREERTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
 6347              	 .loc 1 4085 0
 6348 003a BB68     	 ldr r3,[r7,#8]
 6349 003c 5969     	 ldr r1,[r3,#20]
 6350 003e BB68     	 ldr r3,[r7,#8]
 6351 0040 DA6A     	 ldr r2,[r3,#44]
 6352 0042 1346     	 mov r3,r2
 6353 0044 9B00     	 lsls r3,r3,#2
 6354 0046 1344     	 add r3,r3,r2
 6355 0048 9B00     	 lsls r3,r3,#2
 6356 004a 274A     	 ldr r2,.L428+4
 6357 004c 1344     	 add r3,r3,r2
 6358 004e 9942     	 cmp r1,r3
 6359 0050 31D1     	 bne .L424
4086:../Dave/Generated/FREERTOS/tasks.c ****                 {
4087:../Dave/Generated/FREERTOS/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
 6360              	 .loc 1 4087 0
 6361 0052 BB68     	 ldr r3,[r7,#8]
 6362 0054 0433     	 adds r3,r3,#4
 6363 0056 1846     	 mov r0,r3
 6364 0058 FFF7FEFF 	 bl uxListRemove
 6365 005c 0346     	 mov r3,r0
 6366 005e 002B     	 cmp r3,#0
 6367 0060 0AD1     	 bne .L425
4088:../Dave/Generated/FREERTOS/tasks.c ****                     {
4089:../Dave/Generated/FREERTOS/tasks.c ****                         /* It is known that the task is in its ready list so
4090:../Dave/Generated/FREERTOS/tasks.c ****                          * there is no need to check again and the port level
4091:../Dave/Generated/FREERTOS/tasks.c ****                          * reset macro can be called directly. */
4092:../Dave/Generated/FREERTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
 6368              	 .loc 1 4092 0
 6369 0062 BB68     	 ldr r3,[r7,#8]
 6370 0064 DB6A     	 ldr r3,[r3,#44]
 6371 0066 1A46     	 mov r2,r3
 6372 0068 0123     	 movs r3,#1
 6373 006a 9340     	 lsls r3,r3,r2
 6374 006c DA43     	 mvns r2,r3
 6375 006e 1F4B     	 ldr r3,.L428+8
 6376 0070 1B68     	 ldr r3,[r3]
 6377 0072 1340     	 ands r3,r3,r2
 6378 0074 1D4A     	 ldr r2,.L428+8
 6379 0076 1360     	 str r3,[r2]
 6380              	.L425:
4093:../Dave/Generated/FREERTOS/tasks.c ****                     }
4094:../Dave/Generated/FREERTOS/tasks.c ****                     else
4095:../Dave/Generated/FREERTOS/tasks.c ****                     {
4096:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4097:../Dave/Generated/FREERTOS/tasks.c ****                     }
4098:../Dave/Generated/FREERTOS/tasks.c **** 
4099:../Dave/Generated/FREERTOS/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
4100:../Dave/Generated/FREERTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6381              	 .loc 1 4100 0
 6382 0078 1A4B     	 ldr r3,.L428
 6383 007a 1B68     	 ldr r3,[r3]
 6384 007c DA6A     	 ldr r2,[r3,#44]
 6385 007e BB68     	 ldr r3,[r7,#8]
 6386 0080 DA62     	 str r2,[r3,#44]
4101:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 6387              	 .loc 1 4101 0
 6388 0082 BB68     	 ldr r3,[r7,#8]
 6389 0084 DB6A     	 ldr r3,[r3,#44]
 6390 0086 1A46     	 mov r2,r3
 6391 0088 0123     	 movs r3,#1
 6392 008a 03FA02F2 	 lsl r2,r3,r2
 6393 008e 174B     	 ldr r3,.L428+8
 6394 0090 1B68     	 ldr r3,[r3]
 6395 0092 1343     	 orrs r3,r3,r2
 6396 0094 154A     	 ldr r2,.L428+8
 6397 0096 1360     	 str r3,[r2]
 6398 0098 BB68     	 ldr r3,[r7,#8]
 6399 009a DA6A     	 ldr r2,[r3,#44]
 6400 009c 1346     	 mov r3,r2
 6401 009e 9B00     	 lsls r3,r3,#2
 6402 00a0 1344     	 add r3,r3,r2
 6403 00a2 9B00     	 lsls r3,r3,#2
 6404 00a4 104A     	 ldr r2,.L428+4
 6405 00a6 1A44     	 add r2,r2,r3
 6406 00a8 BB68     	 ldr r3,[r7,#8]
 6407 00aa 0433     	 adds r3,r3,#4
 6408 00ac 1046     	 mov r0,r2
 6409 00ae 1946     	 mov r1,r3
 6410 00b0 FFF7FEFF 	 bl vListInsertEnd
 6411 00b4 04E0     	 b .L426
 6412              	.L424:
4102:../Dave/Generated/FREERTOS/tasks.c ****                 }
4103:../Dave/Generated/FREERTOS/tasks.c ****                 else
4104:../Dave/Generated/FREERTOS/tasks.c ****                 {
4105:../Dave/Generated/FREERTOS/tasks.c ****                     /* Just inherit the priority. */
4106:../Dave/Generated/FREERTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6413              	 .loc 1 4106 0
 6414 00b6 0B4B     	 ldr r3,.L428
 6415 00b8 1B68     	 ldr r3,[r3]
 6416 00ba DA6A     	 ldr r2,[r3,#44]
 6417 00bc BB68     	 ldr r3,[r7,#8]
 6418 00be DA62     	 str r2,[r3,#44]
 6419              	.L426:
4107:../Dave/Generated/FREERTOS/tasks.c ****                 }
4108:../Dave/Generated/FREERTOS/tasks.c **** 
4109:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4110:../Dave/Generated/FREERTOS/tasks.c **** 
4111:../Dave/Generated/FREERTOS/tasks.c ****                 /* Inheritance occurred. */
4112:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdTRUE;
 6420              	 .loc 1 4112 0
 6421 00c0 0123     	 movs r3,#1
 6422 00c2 FB60     	 str r3,[r7,#12]
 6423 00c4 08E0     	 b .L421
 6424              	.L422:
4113:../Dave/Generated/FREERTOS/tasks.c ****             }
4114:../Dave/Generated/FREERTOS/tasks.c ****             else
4115:../Dave/Generated/FREERTOS/tasks.c ****             {
4116:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6425              	 .loc 1 4116 0
 6426 00c6 BB68     	 ldr r3,[r7,#8]
 6427 00c8 DA6C     	 ldr r2,[r3,#76]
 6428 00ca 064B     	 ldr r3,.L428
 6429 00cc 1B68     	 ldr r3,[r3]
 6430 00ce DB6A     	 ldr r3,[r3,#44]
 6431 00d0 9A42     	 cmp r2,r3
 6432 00d2 01D2     	 bcs .L421
4117:../Dave/Generated/FREERTOS/tasks.c ****                 {
4118:../Dave/Generated/FREERTOS/tasks.c ****                     /* The base priority of the mutex holder is lower than the
4119:../Dave/Generated/FREERTOS/tasks.c ****                      * priority of the task attempting to take the mutex, but the
4120:../Dave/Generated/FREERTOS/tasks.c ****                      * current priority of the mutex holder is not lower than the
4121:../Dave/Generated/FREERTOS/tasks.c ****                      * priority of the task attempting to take the mutex.
4122:../Dave/Generated/FREERTOS/tasks.c ****                      * Therefore the mutex holder must have already inherited a
4123:../Dave/Generated/FREERTOS/tasks.c ****                      * priority, but inheritance would have occurred if that had
4124:../Dave/Generated/FREERTOS/tasks.c ****                      * not been the case. */
4125:../Dave/Generated/FREERTOS/tasks.c ****                     xReturn = pdTRUE;
 6433              	 .loc 1 4125 0
 6434 00d4 0123     	 movs r3,#1
 6435 00d6 FB60     	 str r3,[r7,#12]
 6436              	.L421:
4126:../Dave/Generated/FREERTOS/tasks.c ****                 }
4127:../Dave/Generated/FREERTOS/tasks.c ****                 else
4128:../Dave/Generated/FREERTOS/tasks.c ****                 {
4129:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4130:../Dave/Generated/FREERTOS/tasks.c ****                 }
4131:../Dave/Generated/FREERTOS/tasks.c ****             }
4132:../Dave/Generated/FREERTOS/tasks.c ****         }
4133:../Dave/Generated/FREERTOS/tasks.c ****         else
4134:../Dave/Generated/FREERTOS/tasks.c ****         {
4135:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4136:../Dave/Generated/FREERTOS/tasks.c ****         }
4137:../Dave/Generated/FREERTOS/tasks.c **** 
4138:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 6437              	 .loc 1 4138 0
 6438 00d8 FB68     	 ldr r3,[r7,#12]
4139:../Dave/Generated/FREERTOS/tasks.c ****     }
 6439              	 .loc 1 4139 0
 6440 00da 1846     	 mov r0,r3
 6441 00dc 1037     	 adds r7,r7,#16
 6442              	.LCFI281:
 6443              	 .cfi_def_cfa_offset 8
 6444 00de BD46     	 mov sp,r7
 6445              	.LCFI282:
 6446              	 .cfi_def_cfa_register 13
 6447              	 
 6448 00e0 80BD     	 pop {r7,pc}
 6449              	.L429:
 6450 00e2 00BF     	 .align 2
 6451              	.L428:
 6452 00e4 00000000 	 .word pxCurrentTCB
 6453 00e8 00000000 	 .word pxReadyTasksLists
 6454 00ec 00000000 	 .word uxTopReadyPriority
 6455              	 .cfi_endproc
 6456              	.LFE192:
 6458              	 .section .text.xTaskPriorityDisinherit,"ax",%progbits
 6459              	 .align 2
 6460              	 .global xTaskPriorityDisinherit
 6461              	 .thumb
 6462              	 .thumb_func
 6464              	xTaskPriorityDisinherit:
 6465              	.LFB193:
4140:../Dave/Generated/FREERTOS/tasks.c **** 
4141:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4142:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4143:../Dave/Generated/FREERTOS/tasks.c **** 
4144:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4145:../Dave/Generated/FREERTOS/tasks.c **** 
4146:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4147:../Dave/Generated/FREERTOS/tasks.c ****     {
 6466              	 .loc 1 4147 0
 6467              	 .cfi_startproc
 6468              	 
 6469              	 
 6470 0000 80B5     	 push {r7,lr}
 6471              	.LCFI283:
 6472              	 .cfi_def_cfa_offset 8
 6473              	 .cfi_offset 7,-8
 6474              	 .cfi_offset 14,-4
 6475 0002 86B0     	 sub sp,sp,#24
 6476              	.LCFI284:
 6477              	 .cfi_def_cfa_offset 32
 6478 0004 00AF     	 add r7,sp,#0
 6479              	.LCFI285:
 6480              	 .cfi_def_cfa_register 7
 6481 0006 7860     	 str r0,[r7,#4]
4148:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 6482              	 .loc 1 4148 0
 6483 0008 7B68     	 ldr r3,[r7,#4]
 6484 000a 3B61     	 str r3,[r7,#16]
4149:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 6485              	 .loc 1 4149 0
 6486 000c 0023     	 movs r3,#0
 6487 000e 7B61     	 str r3,[r7,#20]
4150:../Dave/Generated/FREERTOS/tasks.c **** 
4151:../Dave/Generated/FREERTOS/tasks.c ****         if( pxMutexHolder != NULL )
 6488              	 .loc 1 4151 0
 6489 0010 7B68     	 ldr r3,[r7,#4]
 6490 0012 002B     	 cmp r3,#0
 6491 0014 63D0     	 beq .L431
4152:../Dave/Generated/FREERTOS/tasks.c ****         {
4153:../Dave/Generated/FREERTOS/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
4154:../Dave/Generated/FREERTOS/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
4155:../Dave/Generated/FREERTOS/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
4156:../Dave/Generated/FREERTOS/tasks.c ****              * be the running state task. */
4157:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
 6492              	 .loc 1 4157 0
 6493 0016 344B     	 ldr r3,.L438
 6494 0018 1B68     	 ldr r3,[r3]
 6495 001a 3A69     	 ldr r2,[r7,#16]
 6496 001c 9A42     	 cmp r2,r3
 6497 001e 09D0     	 beq .L432
 6498              	.LBB226:
 6499              	.LBB227:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 6500              	 .loc 2 197 0 discriminator 1
 6501              	
 6502 0020 4FF0FC03 	 mov r3,#252
 6503 0024 83F31188 	 msr basepri,r3
 6504 0028 BFF36F8F 	 isb 
 6505 002c BFF34F8F 	 dsb 
 6506              	
 6507              	
 6508              	 .thumb
 6509 0030 FB60     	 str r3,[r7,#12]
 6510              	.L433:
 6511              	.LBE227:
 6512              	.LBE226:
 6513              	 .loc 1 4157 0 discriminator 1
 6514 0032 FEE7     	 b .L433
 6515              	.L432:
4158:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 6516              	 .loc 1 4158 0
 6517 0034 3B69     	 ldr r3,[r7,#16]
 6518 0036 1B6D     	 ldr r3,[r3,#80]
 6519 0038 002B     	 cmp r3,#0
 6520 003a 09D1     	 bne .L434
 6521              	.LBB228:
 6522              	.LBB229:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 6523              	 .loc 2 197 0 discriminator 1
 6524              	
 6525 003c 4FF0FC03 	 mov r3,#252
 6526 0040 83F31188 	 msr basepri,r3
 6527 0044 BFF36F8F 	 isb 
 6528 0048 BFF34F8F 	 dsb 
 6529              	
 6530              	
 6531              	 .thumb
 6532 004c BB60     	 str r3,[r7,#8]
 6533              	.L435:
 6534              	.LBE229:
 6535              	.LBE228:
 6536              	 .loc 1 4158 0 discriminator 2
 6537 004e FEE7     	 b .L435
 6538              	.L434:
4159:../Dave/Generated/FREERTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 6539              	 .loc 1 4159 0
 6540 0050 3B69     	 ldr r3,[r7,#16]
 6541 0052 1B6D     	 ldr r3,[r3,#80]
 6542 0054 5A1E     	 subs r2,r3,#1
 6543 0056 3B69     	 ldr r3,[r7,#16]
 6544 0058 1A65     	 str r2,[r3,#80]
4160:../Dave/Generated/FREERTOS/tasks.c **** 
4161:../Dave/Generated/FREERTOS/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
4162:../Dave/Generated/FREERTOS/tasks.c ****              * task? */
4163:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6545              	 .loc 1 4163 0
 6546 005a 3B69     	 ldr r3,[r7,#16]
 6547 005c DA6A     	 ldr r2,[r3,#44]
 6548 005e 3B69     	 ldr r3,[r7,#16]
 6549 0060 DB6C     	 ldr r3,[r3,#76]
 6550 0062 9A42     	 cmp r2,r3
 6551 0064 3BD0     	 beq .L431
4164:../Dave/Generated/FREERTOS/tasks.c ****             {
4165:../Dave/Generated/FREERTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
4166:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6552              	 .loc 1 4166 0
 6553 0066 3B69     	 ldr r3,[r7,#16]
 6554 0068 1B6D     	 ldr r3,[r3,#80]
 6555 006a 002B     	 cmp r3,#0
 6556 006c 37D1     	 bne .L431
4167:../Dave/Generated/FREERTOS/tasks.c ****                 {
4168:../Dave/Generated/FREERTOS/tasks.c ****                     /* A task can only have an inherited priority if it holds
4169:../Dave/Generated/FREERTOS/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
4170:../Dave/Generated/FREERTOS/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
4171:../Dave/Generated/FREERTOS/tasks.c ****                      * holding task then it must be the running state task.  Remove
4172:../Dave/Generated/FREERTOS/tasks.c ****                      * the holding task from the ready list. */
4173:../Dave/Generated/FREERTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6557              	 .loc 1 4173 0
 6558 006e 3B69     	 ldr r3,[r7,#16]
 6559 0070 0433     	 adds r3,r3,#4
 6560 0072 1846     	 mov r0,r3
 6561 0074 FFF7FEFF 	 bl uxListRemove
 6562 0078 0346     	 mov r3,r0
 6563 007a 002B     	 cmp r3,#0
 6564 007c 0AD1     	 bne .L436
4174:../Dave/Generated/FREERTOS/tasks.c ****                     {
4175:../Dave/Generated/FREERTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 6565              	 .loc 1 4175 0
 6566 007e 3B69     	 ldr r3,[r7,#16]
 6567 0080 DB6A     	 ldr r3,[r3,#44]
 6568 0082 1A46     	 mov r2,r3
 6569 0084 0123     	 movs r3,#1
 6570 0086 9340     	 lsls r3,r3,r2
 6571 0088 DA43     	 mvns r2,r3
 6572 008a 184B     	 ldr r3,.L438+4
 6573 008c 1B68     	 ldr r3,[r3]
 6574 008e 1340     	 ands r3,r3,r2
 6575 0090 164A     	 ldr r2,.L438+4
 6576 0092 1360     	 str r3,[r2]
 6577              	.L436:
4176:../Dave/Generated/FREERTOS/tasks.c ****                     }
4177:../Dave/Generated/FREERTOS/tasks.c ****                     else
4178:../Dave/Generated/FREERTOS/tasks.c ****                     {
4179:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4180:../Dave/Generated/FREERTOS/tasks.c ****                     }
4181:../Dave/Generated/FREERTOS/tasks.c **** 
4182:../Dave/Generated/FREERTOS/tasks.c ****                     /* Disinherit the priority before adding the task into the
4183:../Dave/Generated/FREERTOS/tasks.c ****                      * new  ready list. */
4184:../Dave/Generated/FREERTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4185:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
 6578              	 .loc 1 4185 0
 6579 0094 3B69     	 ldr r3,[r7,#16]
 6580 0096 DA6C     	 ldr r2,[r3,#76]
 6581 0098 3B69     	 ldr r3,[r7,#16]
 6582 009a DA62     	 str r2,[r3,#44]
4186:../Dave/Generated/FREERTOS/tasks.c **** 
4187:../Dave/Generated/FREERTOS/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
4188:../Dave/Generated/FREERTOS/tasks.c ****                      * any other purpose if this task is running, and it must be
4189:../Dave/Generated/FREERTOS/tasks.c ****                      * running to give back the mutex. */
4190:../Dave/Generated/FREERTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
 6583              	 .loc 1 4190 0
 6584 009c 3B69     	 ldr r3,[r7,#16]
 6585 009e DB6A     	 ldr r3,[r3,#44]
 6586 00a0 C3F10502 	 rsb r2,r3,#5
 6587 00a4 3B69     	 ldr r3,[r7,#16]
 6588 00a6 9A61     	 str r2,[r3,#24]
4191:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6589              	 .loc 1 4191 0
 6590 00a8 3B69     	 ldr r3,[r7,#16]
 6591 00aa DB6A     	 ldr r3,[r3,#44]
 6592 00ac 1A46     	 mov r2,r3
 6593 00ae 0123     	 movs r3,#1
 6594 00b0 03FA02F2 	 lsl r2,r3,r2
 6595 00b4 0D4B     	 ldr r3,.L438+4
 6596 00b6 1B68     	 ldr r3,[r3]
 6597 00b8 1343     	 orrs r3,r3,r2
 6598 00ba 0C4A     	 ldr r2,.L438+4
 6599 00bc 1360     	 str r3,[r2]
 6600 00be 3B69     	 ldr r3,[r7,#16]
 6601 00c0 DA6A     	 ldr r2,[r3,#44]
 6602 00c2 1346     	 mov r3,r2
 6603 00c4 9B00     	 lsls r3,r3,#2
 6604 00c6 1344     	 add r3,r3,r2
 6605 00c8 9B00     	 lsls r3,r3,#2
 6606 00ca 094A     	 ldr r2,.L438+8
 6607 00cc 1A44     	 add r2,r2,r3
 6608 00ce 3B69     	 ldr r3,[r7,#16]
 6609 00d0 0433     	 adds r3,r3,#4
 6610 00d2 1046     	 mov r0,r2
 6611 00d4 1946     	 mov r1,r3
 6612 00d6 FFF7FEFF 	 bl vListInsertEnd
4192:../Dave/Generated/FREERTOS/tasks.c **** 
4193:../Dave/Generated/FREERTOS/tasks.c ****                     /* Return true to indicate that a context switch is required.
4194:../Dave/Generated/FREERTOS/tasks.c ****                      * This is only actually required in the corner case whereby
4195:../Dave/Generated/FREERTOS/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
4196:../Dave/Generated/FREERTOS/tasks.c ****                      * in an order different to that in which they were taken.
4197:../Dave/Generated/FREERTOS/tasks.c ****                      * If a context switch did not occur when the first mutex was
4198:../Dave/Generated/FREERTOS/tasks.c ****                      * returned, even if a task was waiting on it, then a context
4199:../Dave/Generated/FREERTOS/tasks.c ****                      * switch should occur when the last mutex is returned whether
4200:../Dave/Generated/FREERTOS/tasks.c ****                      * a task is waiting on it or not. */
4201:../Dave/Generated/FREERTOS/tasks.c ****                     xReturn = pdTRUE;
 6613              	 .loc 1 4201 0
 6614 00da 0123     	 movs r3,#1
 6615 00dc 7B61     	 str r3,[r7,#20]
 6616              	.L431:
4202:../Dave/Generated/FREERTOS/tasks.c ****                 }
4203:../Dave/Generated/FREERTOS/tasks.c ****                 else
4204:../Dave/Generated/FREERTOS/tasks.c ****                 {
4205:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4206:../Dave/Generated/FREERTOS/tasks.c ****                 }
4207:../Dave/Generated/FREERTOS/tasks.c ****             }
4208:../Dave/Generated/FREERTOS/tasks.c ****             else
4209:../Dave/Generated/FREERTOS/tasks.c ****             {
4210:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4211:../Dave/Generated/FREERTOS/tasks.c ****             }
4212:../Dave/Generated/FREERTOS/tasks.c ****         }
4213:../Dave/Generated/FREERTOS/tasks.c ****         else
4214:../Dave/Generated/FREERTOS/tasks.c ****         {
4215:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4216:../Dave/Generated/FREERTOS/tasks.c ****         }
4217:../Dave/Generated/FREERTOS/tasks.c **** 
4218:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 6617              	 .loc 1 4218 0
 6618 00de 7B69     	 ldr r3,[r7,#20]
4219:../Dave/Generated/FREERTOS/tasks.c ****     }
 6619              	 .loc 1 4219 0
 6620 00e0 1846     	 mov r0,r3
 6621 00e2 1837     	 adds r7,r7,#24
 6622              	.LCFI286:
 6623              	 .cfi_def_cfa_offset 8
 6624 00e4 BD46     	 mov sp,r7
 6625              	.LCFI287:
 6626              	 .cfi_def_cfa_register 13
 6627              	 
 6628 00e6 80BD     	 pop {r7,pc}
 6629              	.L439:
 6630              	 .align 2
 6631              	.L438:
 6632 00e8 00000000 	 .word pxCurrentTCB
 6633 00ec 00000000 	 .word uxTopReadyPriority
 6634 00f0 00000000 	 .word pxReadyTasksLists
 6635              	 .cfi_endproc
 6636              	.LFE193:
 6638              	 .section .text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6639              	 .align 2
 6640              	 .global vTaskPriorityDisinheritAfterTimeout
 6641              	 .thumb
 6642              	 .thumb_func
 6644              	vTaskPriorityDisinheritAfterTimeout:
 6645              	.LFB194:
4220:../Dave/Generated/FREERTOS/tasks.c **** 
4221:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4222:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4223:../Dave/Generated/FREERTOS/tasks.c **** 
4224:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4225:../Dave/Generated/FREERTOS/tasks.c **** 
4226:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4227:../Dave/Generated/FREERTOS/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
4228:../Dave/Generated/FREERTOS/tasks.c ****     {
 6646              	 .loc 1 4228 0
 6647              	 .cfi_startproc
 6648              	 
 6649              	 
 6650 0000 80B5     	 push {r7,lr}
 6651              	.LCFI288:
 6652              	 .cfi_def_cfa_offset 8
 6653              	 .cfi_offset 7,-8
 6654              	 .cfi_offset 14,-4
 6655 0002 88B0     	 sub sp,sp,#32
 6656              	.LCFI289:
 6657              	 .cfi_def_cfa_offset 40
 6658 0004 00AF     	 add r7,sp,#0
 6659              	.LCFI290:
 6660              	 .cfi_def_cfa_register 7
 6661 0006 7860     	 str r0,[r7,#4]
 6662 0008 3960     	 str r1,[r7]
4229:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 6663              	 .loc 1 4229 0
 6664 000a 7B68     	 ldr r3,[r7,#4]
 6665 000c BB61     	 str r3,[r7,#24]
4230:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4231:../Dave/Generated/FREERTOS/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6666              	 .loc 1 4231 0
 6667 000e 0123     	 movs r3,#1
 6668 0010 7B61     	 str r3,[r7,#20]
4232:../Dave/Generated/FREERTOS/tasks.c **** 
4233:../Dave/Generated/FREERTOS/tasks.c ****         if( pxMutexHolder != NULL )
 6669              	 .loc 1 4233 0
 6670 0012 7B68     	 ldr r3,[r7,#4]
 6671 0014 002B     	 cmp r3,#0
 6672 0016 77D0     	 beq .L440
4234:../Dave/Generated/FREERTOS/tasks.c ****         {
4235:../Dave/Generated/FREERTOS/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
4236:../Dave/Generated/FREERTOS/tasks.c ****              * one mutex. */
4237:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 6673              	 .loc 1 4237 0
 6674 0018 BB69     	 ldr r3,[r7,#24]
 6675 001a 1B6D     	 ldr r3,[r3,#80]
 6676 001c 002B     	 cmp r3,#0
 6677 001e 09D1     	 bne .L442
 6678              	.LBB230:
 6679              	.LBB231:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 6680              	 .loc 2 197 0 discriminator 1
 6681              	
 6682 0020 4FF0FC03 	 mov r3,#252
 6683 0024 83F31188 	 msr basepri,r3
 6684 0028 BFF36F8F 	 isb 
 6685 002c BFF34F8F 	 dsb 
 6686              	
 6687              	
 6688              	 .thumb
 6689 0030 FB60     	 str r3,[r7,#12]
 6690              	.L443:
 6691              	.LBE231:
 6692              	.LBE230:
 6693              	 .loc 1 4237 0 discriminator 1
 6694 0032 FEE7     	 b .L443
 6695              	.L442:
4238:../Dave/Generated/FREERTOS/tasks.c **** 
4239:../Dave/Generated/FREERTOS/tasks.c ****             /* Determine the priority to which the priority of the task that
4240:../Dave/Generated/FREERTOS/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
4241:../Dave/Generated/FREERTOS/tasks.c ****              * holding task's base priority and the priority of the highest
4242:../Dave/Generated/FREERTOS/tasks.c ****              * priority task that is waiting to obtain the mutex. */
4243:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6696              	 .loc 1 4243 0
 6697 0034 BB69     	 ldr r3,[r7,#24]
 6698 0036 DA6C     	 ldr r2,[r3,#76]
 6699 0038 3B68     	 ldr r3,[r7]
 6700 003a 9A42     	 cmp r2,r3
 6701 003c 02D2     	 bcs .L444
4244:../Dave/Generated/FREERTOS/tasks.c ****             {
4245:../Dave/Generated/FREERTOS/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
 6702              	 .loc 1 4245 0
 6703 003e 3B68     	 ldr r3,[r7]
 6704 0040 FB61     	 str r3,[r7,#28]
 6705 0042 02E0     	 b .L445
 6706              	.L444:
4246:../Dave/Generated/FREERTOS/tasks.c ****             }
4247:../Dave/Generated/FREERTOS/tasks.c ****             else
4248:../Dave/Generated/FREERTOS/tasks.c ****             {
4249:../Dave/Generated/FREERTOS/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
 6707              	 .loc 1 4249 0
 6708 0044 BB69     	 ldr r3,[r7,#24]
 6709 0046 DB6C     	 ldr r3,[r3,#76]
 6710 0048 FB61     	 str r3,[r7,#28]
 6711              	.L445:
4250:../Dave/Generated/FREERTOS/tasks.c ****             }
4251:../Dave/Generated/FREERTOS/tasks.c **** 
4252:../Dave/Generated/FREERTOS/tasks.c ****             /* Does the priority need to change? */
4253:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
 6712              	 .loc 1 4253 0
 6713 004a BB69     	 ldr r3,[r7,#24]
 6714 004c DA6A     	 ldr r2,[r3,#44]
 6715 004e FB69     	 ldr r3,[r7,#28]
 6716 0050 9A42     	 cmp r2,r3
 6717 0052 59D0     	 beq .L440
4254:../Dave/Generated/FREERTOS/tasks.c ****             {
4255:../Dave/Generated/FREERTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
4256:../Dave/Generated/FREERTOS/tasks.c ****                  * simplification in the priority inheritance implementation.  If
4257:../Dave/Generated/FREERTOS/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
4258:../Dave/Generated/FREERTOS/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
4259:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6718              	 .loc 1 4259 0
 6719 0054 BB69     	 ldr r3,[r7,#24]
 6720 0056 1A6D     	 ldr r2,[r3,#80]
 6721 0058 7B69     	 ldr r3,[r7,#20]
 6722 005a 9A42     	 cmp r2,r3
 6723 005c 54D1     	 bne .L440
4260:../Dave/Generated/FREERTOS/tasks.c ****                 {
4261:../Dave/Generated/FREERTOS/tasks.c ****                     /* If a task has timed out because it already holds the
4262:../Dave/Generated/FREERTOS/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
4263:../Dave/Generated/FREERTOS/tasks.c ****                      * its own priority. */
4264:../Dave/Generated/FREERTOS/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
 6724              	 .loc 1 4264 0
 6725 005e 2C4B     	 ldr r3,.L450
 6726 0060 1B68     	 ldr r3,[r3]
 6727 0062 BA69     	 ldr r2,[r7,#24]
 6728 0064 9A42     	 cmp r2,r3
 6729 0066 09D1     	 bne .L446
 6730              	.LBB232:
 6731              	.LBB233:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 6732              	 .loc 2 197 0 discriminator 1
 6733              	
 6734 0068 4FF0FC03 	 mov r3,#252
 6735 006c 83F31188 	 msr basepri,r3
 6736 0070 BFF36F8F 	 isb 
 6737 0074 BFF34F8F 	 dsb 
 6738              	
 6739              	
 6740              	 .thumb
 6741 0078 BB60     	 str r3,[r7,#8]
 6742              	.L447:
 6743              	.LBE233:
 6744              	.LBE232:
 6745              	 .loc 1 4264 0 discriminator 2
 6746 007a FEE7     	 b .L447
 6747              	.L446:
4265:../Dave/Generated/FREERTOS/tasks.c **** 
4266:../Dave/Generated/FREERTOS/tasks.c ****                     /* Disinherit the priority, remembering the previous
4267:../Dave/Generated/FREERTOS/tasks.c ****                      * priority to facilitate determining the subject task's
4268:../Dave/Generated/FREERTOS/tasks.c ****                      * state. */
4269:../Dave/Generated/FREERTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4270:../Dave/Generated/FREERTOS/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6748              	 .loc 1 4270 0
 6749 007c BB69     	 ldr r3,[r7,#24]
 6750 007e DB6A     	 ldr r3,[r3,#44]
 6751 0080 3B61     	 str r3,[r7,#16]
4271:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
 6752              	 .loc 1 4271 0
 6753 0082 BB69     	 ldr r3,[r7,#24]
 6754 0084 FA69     	 ldr r2,[r7,#28]
 6755 0086 DA62     	 str r2,[r3,#44]
4272:../Dave/Generated/FREERTOS/tasks.c **** 
4273:../Dave/Generated/FREERTOS/tasks.c ****                     /* Only reset the event list item value if the value is not
4274:../Dave/Generated/FREERTOS/tasks.c ****                      * being used for anything else. */
4275:../Dave/Generated/FREERTOS/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
 6756              	 .loc 1 4275 0
 6757 0088 BB69     	 ldr r3,[r7,#24]
 6758 008a 9B69     	 ldr r3,[r3,#24]
 6759 008c 002B     	 cmp r3,#0
 6760 008e 04DB     	 blt .L448
4276:../Dave/Generated/FREERTOS/tasks.c ****                     {
4277:../Dave/Generated/FREERTOS/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
 6761              	 .loc 1 4277 0
 6762 0090 FB69     	 ldr r3,[r7,#28]
 6763 0092 C3F10502 	 rsb r2,r3,#5
 6764 0096 BB69     	 ldr r3,[r7,#24]
 6765 0098 9A61     	 str r2,[r3,#24]
 6766              	.L448:
4278:../Dave/Generated/FREERTOS/tasks.c ****                     }
4279:../Dave/Generated/FREERTOS/tasks.c ****                     else
4280:../Dave/Generated/FREERTOS/tasks.c ****                     {
4281:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4282:../Dave/Generated/FREERTOS/tasks.c ****                     }
4283:../Dave/Generated/FREERTOS/tasks.c **** 
4284:../Dave/Generated/FREERTOS/tasks.c ****                     /* If the running task is not the task that holds the mutex
4285:../Dave/Generated/FREERTOS/tasks.c ****                      * then the task that holds the mutex could be in either the
4286:../Dave/Generated/FREERTOS/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
4287:../Dave/Generated/FREERTOS/tasks.c ****                      * from its current state list if it is in the Ready state as
4288:../Dave/Generated/FREERTOS/tasks.c ****                      * the task's priority is going to change and there is one
4289:../Dave/Generated/FREERTOS/tasks.c ****                      * Ready list per priority. */
4290:../Dave/Generated/FREERTOS/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
 6767              	 .loc 1 4290 0
 6768 009a BB69     	 ldr r3,[r7,#24]
 6769 009c 5969     	 ldr r1,[r3,#20]
 6770 009e 3A69     	 ldr r2,[r7,#16]
 6771 00a0 1346     	 mov r3,r2
 6772 00a2 9B00     	 lsls r3,r3,#2
 6773 00a4 1344     	 add r3,r3,r2
 6774 00a6 9B00     	 lsls r3,r3,#2
 6775 00a8 1A4A     	 ldr r2,.L450+4
 6776 00aa 1344     	 add r3,r3,r2
 6777 00ac 9942     	 cmp r1,r3
 6778 00ae 2BD1     	 bne .L440
4291:../Dave/Generated/FREERTOS/tasks.c ****                     {
4292:../Dave/Generated/FREERTOS/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6779              	 .loc 1 4292 0
 6780 00b0 BB69     	 ldr r3,[r7,#24]
 6781 00b2 0433     	 adds r3,r3,#4
 6782 00b4 1846     	 mov r0,r3
 6783 00b6 FFF7FEFF 	 bl uxListRemove
 6784 00ba 0346     	 mov r3,r0
 6785 00bc 002B     	 cmp r3,#0
 6786 00be 0AD1     	 bne .L449
4293:../Dave/Generated/FREERTOS/tasks.c ****                         {
4294:../Dave/Generated/FREERTOS/tasks.c ****                             /* It is known that the task is in its ready list so
4295:../Dave/Generated/FREERTOS/tasks.c ****                              * there is no need to check again and the port level
4296:../Dave/Generated/FREERTOS/tasks.c ****                              * reset macro can be called directly. */
4297:../Dave/Generated/FREERTOS/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 6787              	 .loc 1 4297 0
 6788 00c0 BB69     	 ldr r3,[r7,#24]
 6789 00c2 DB6A     	 ldr r3,[r3,#44]
 6790 00c4 1A46     	 mov r2,r3
 6791 00c6 0123     	 movs r3,#1
 6792 00c8 9340     	 lsls r3,r3,r2
 6793 00ca DA43     	 mvns r2,r3
 6794 00cc 124B     	 ldr r3,.L450+8
 6795 00ce 1B68     	 ldr r3,[r3]
 6796 00d0 1340     	 ands r3,r3,r2
 6797 00d2 114A     	 ldr r2,.L450+8
 6798 00d4 1360     	 str r3,[r2]
 6799              	.L449:
4298:../Dave/Generated/FREERTOS/tasks.c ****                         }
4299:../Dave/Generated/FREERTOS/tasks.c ****                         else
4300:../Dave/Generated/FREERTOS/tasks.c ****                         {
4301:../Dave/Generated/FREERTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4302:../Dave/Generated/FREERTOS/tasks.c ****                         }
4303:../Dave/Generated/FREERTOS/tasks.c **** 
4304:../Dave/Generated/FREERTOS/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 6800              	 .loc 1 4304 0
 6801 00d6 BB69     	 ldr r3,[r7,#24]
 6802 00d8 DB6A     	 ldr r3,[r3,#44]
 6803 00da 1A46     	 mov r2,r3
 6804 00dc 0123     	 movs r3,#1
 6805 00de 03FA02F2 	 lsl r2,r3,r2
 6806 00e2 0D4B     	 ldr r3,.L450+8
 6807 00e4 1B68     	 ldr r3,[r3]
 6808 00e6 1343     	 orrs r3,r3,r2
 6809 00e8 0B4A     	 ldr r2,.L450+8
 6810 00ea 1360     	 str r3,[r2]
 6811 00ec BB69     	 ldr r3,[r7,#24]
 6812 00ee DA6A     	 ldr r2,[r3,#44]
 6813 00f0 1346     	 mov r3,r2
 6814 00f2 9B00     	 lsls r3,r3,#2
 6815 00f4 1344     	 add r3,r3,r2
 6816 00f6 9B00     	 lsls r3,r3,#2
 6817 00f8 064A     	 ldr r2,.L450+4
 6818 00fa 1A44     	 add r2,r2,r3
 6819 00fc BB69     	 ldr r3,[r7,#24]
 6820 00fe 0433     	 adds r3,r3,#4
 6821 0100 1046     	 mov r0,r2
 6822 0102 1946     	 mov r1,r3
 6823 0104 FFF7FEFF 	 bl vListInsertEnd
 6824              	.L440:
4305:../Dave/Generated/FREERTOS/tasks.c ****                     }
4306:../Dave/Generated/FREERTOS/tasks.c ****                     else
4307:../Dave/Generated/FREERTOS/tasks.c ****                     {
4308:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4309:../Dave/Generated/FREERTOS/tasks.c ****                     }
4310:../Dave/Generated/FREERTOS/tasks.c ****                 }
4311:../Dave/Generated/FREERTOS/tasks.c ****                 else
4312:../Dave/Generated/FREERTOS/tasks.c ****                 {
4313:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4314:../Dave/Generated/FREERTOS/tasks.c ****                 }
4315:../Dave/Generated/FREERTOS/tasks.c ****             }
4316:../Dave/Generated/FREERTOS/tasks.c ****             else
4317:../Dave/Generated/FREERTOS/tasks.c ****             {
4318:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4319:../Dave/Generated/FREERTOS/tasks.c ****             }
4320:../Dave/Generated/FREERTOS/tasks.c ****         }
4321:../Dave/Generated/FREERTOS/tasks.c ****         else
4322:../Dave/Generated/FREERTOS/tasks.c ****         {
4323:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4324:../Dave/Generated/FREERTOS/tasks.c ****         }
4325:../Dave/Generated/FREERTOS/tasks.c ****     }
 6825              	 .loc 1 4325 0
 6826 0108 2037     	 adds r7,r7,#32
 6827              	.LCFI291:
 6828              	 .cfi_def_cfa_offset 8
 6829 010a BD46     	 mov sp,r7
 6830              	.LCFI292:
 6831              	 .cfi_def_cfa_register 13
 6832              	 
 6833 010c 80BD     	 pop {r7,pc}
 6834              	.L451:
 6835 010e 00BF     	 .align 2
 6836              	.L450:
 6837 0110 00000000 	 .word pxCurrentTCB
 6838 0114 00000000 	 .word pxReadyTasksLists
 6839 0118 00000000 	 .word uxTopReadyPriority
 6840              	 .cfi_endproc
 6841              	.LFE194:
 6843              	 .section .text.prvWriteNameToBuffer,"ax",%progbits
 6844              	 .align 2
 6845              	 .thumb
 6846              	 .thumb_func
 6848              	prvWriteNameToBuffer:
 6849              	.LFB195:
4326:../Dave/Generated/FREERTOS/tasks.c **** 
4327:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4328:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4329:../Dave/Generated/FREERTOS/tasks.c **** 
4330:../Dave/Generated/FREERTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4331:../Dave/Generated/FREERTOS/tasks.c **** 
4332:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskEnterCritical( void )
4333:../Dave/Generated/FREERTOS/tasks.c ****     {
4334:../Dave/Generated/FREERTOS/tasks.c ****         portDISABLE_INTERRUPTS();
4335:../Dave/Generated/FREERTOS/tasks.c **** 
4336:../Dave/Generated/FREERTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4337:../Dave/Generated/FREERTOS/tasks.c ****         {
4338:../Dave/Generated/FREERTOS/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
4339:../Dave/Generated/FREERTOS/tasks.c **** 
4340:../Dave/Generated/FREERTOS/tasks.c ****             /* This is not the interrupt safe version of the enter critical
4341:../Dave/Generated/FREERTOS/tasks.c ****              * function so  assert() if it is being called from an interrupt
4342:../Dave/Generated/FREERTOS/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
4343:../Dave/Generated/FREERTOS/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
4344:../Dave/Generated/FREERTOS/tasks.c ****              * protect against recursive calls if the assert function also uses a
4345:../Dave/Generated/FREERTOS/tasks.c ****              * critical section. */
4346:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4347:../Dave/Generated/FREERTOS/tasks.c ****             {
4348:../Dave/Generated/FREERTOS/tasks.c ****                 portASSERT_IF_IN_ISR();
4349:../Dave/Generated/FREERTOS/tasks.c ****             }
4350:../Dave/Generated/FREERTOS/tasks.c ****         }
4351:../Dave/Generated/FREERTOS/tasks.c ****         else
4352:../Dave/Generated/FREERTOS/tasks.c ****         {
4353:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4354:../Dave/Generated/FREERTOS/tasks.c ****         }
4355:../Dave/Generated/FREERTOS/tasks.c ****     }
4356:../Dave/Generated/FREERTOS/tasks.c **** 
4357:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4358:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4359:../Dave/Generated/FREERTOS/tasks.c **** 
4360:../Dave/Generated/FREERTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4361:../Dave/Generated/FREERTOS/tasks.c **** 
4362:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskExitCritical( void )
4363:../Dave/Generated/FREERTOS/tasks.c ****     {
4364:../Dave/Generated/FREERTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4365:../Dave/Generated/FREERTOS/tasks.c ****         {
4366:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4367:../Dave/Generated/FREERTOS/tasks.c ****             {
4368:../Dave/Generated/FREERTOS/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4369:../Dave/Generated/FREERTOS/tasks.c **** 
4370:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4371:../Dave/Generated/FREERTOS/tasks.c ****                 {
4372:../Dave/Generated/FREERTOS/tasks.c ****                     portENABLE_INTERRUPTS();
4373:../Dave/Generated/FREERTOS/tasks.c ****                 }
4374:../Dave/Generated/FREERTOS/tasks.c ****                 else
4375:../Dave/Generated/FREERTOS/tasks.c ****                 {
4376:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4377:../Dave/Generated/FREERTOS/tasks.c ****                 }
4378:../Dave/Generated/FREERTOS/tasks.c ****             }
4379:../Dave/Generated/FREERTOS/tasks.c ****             else
4380:../Dave/Generated/FREERTOS/tasks.c ****             {
4381:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4382:../Dave/Generated/FREERTOS/tasks.c ****             }
4383:../Dave/Generated/FREERTOS/tasks.c ****         }
4384:../Dave/Generated/FREERTOS/tasks.c ****         else
4385:../Dave/Generated/FREERTOS/tasks.c ****         {
4386:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4387:../Dave/Generated/FREERTOS/tasks.c ****         }
4388:../Dave/Generated/FREERTOS/tasks.c ****     }
4389:../Dave/Generated/FREERTOS/tasks.c **** 
4390:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4391:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4392:../Dave/Generated/FREERTOS/tasks.c **** 
4393:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4394:../Dave/Generated/FREERTOS/tasks.c **** 
4395:../Dave/Generated/FREERTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4396:../Dave/Generated/FREERTOS/tasks.c ****                                         const char * pcTaskName )
4397:../Dave/Generated/FREERTOS/tasks.c ****     {
 6850              	 .loc 1 4397 0
 6851              	 .cfi_startproc
 6852              	 
 6853              	 
 6854 0000 80B5     	 push {r7,lr}
 6855              	.LCFI293:
 6856              	 .cfi_def_cfa_offset 8
 6857              	 .cfi_offset 7,-8
 6858              	 .cfi_offset 14,-4
 6859 0002 84B0     	 sub sp,sp,#16
 6860              	.LCFI294:
 6861              	 .cfi_def_cfa_offset 24
 6862 0004 00AF     	 add r7,sp,#0
 6863              	.LCFI295:
 6864              	 .cfi_def_cfa_register 7
 6865 0006 7860     	 str r0,[r7,#4]
 6866 0008 3960     	 str r1,[r7]
4398:../Dave/Generated/FREERTOS/tasks.c ****         size_t x;
4399:../Dave/Generated/FREERTOS/tasks.c **** 
4400:../Dave/Generated/FREERTOS/tasks.c ****         /* Start by copying the entire string. */
4401:../Dave/Generated/FREERTOS/tasks.c ****         strcpy( pcBuffer, pcTaskName );
 6867              	 .loc 1 4401 0
 6868 000a 7868     	 ldr r0,[r7,#4]
 6869 000c 3968     	 ldr r1,[r7]
 6870 000e FFF7FEFF 	 bl strcpy
4402:../Dave/Generated/FREERTOS/tasks.c **** 
4403:../Dave/Generated/FREERTOS/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
4404:../Dave/Generated/FREERTOS/tasks.c ****          * printed out. */
4405:../Dave/Generated/FREERTOS/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 6871              	 .loc 1 4405 0
 6872 0012 7868     	 ldr r0,[r7,#4]
 6873 0014 FFF7FEFF 	 bl strlen
 6874 0018 F860     	 str r0,[r7,#12]
 6875 001a 07E0     	 b .L453
 6876              	.L454:
4406:../Dave/Generated/FREERTOS/tasks.c ****         {
4407:../Dave/Generated/FREERTOS/tasks.c ****             pcBuffer[ x ] = ' ';
 6877              	 .loc 1 4407 0 discriminator 3
 6878 001c 7A68     	 ldr r2,[r7,#4]
 6879 001e FB68     	 ldr r3,[r7,#12]
 6880 0020 1344     	 add r3,r3,r2
 6881 0022 2022     	 movs r2,#32
 6882 0024 1A70     	 strb r2,[r3]
4405:../Dave/Generated/FREERTOS/tasks.c ****         {
 6883              	 .loc 1 4405 0 discriminator 3
 6884 0026 FB68     	 ldr r3,[r7,#12]
 6885 0028 0133     	 adds r3,r3,#1
 6886 002a FB60     	 str r3,[r7,#12]
 6887              	.L453:
4405:../Dave/Generated/FREERTOS/tasks.c ****         {
 6888              	 .loc 1 4405 0 is_stmt 0 discriminator 1
 6889 002c FB68     	 ldr r3,[r7,#12]
 6890 002e 0E2B     	 cmp r3,#14
 6891 0030 F4D9     	 bls .L454
4408:../Dave/Generated/FREERTOS/tasks.c ****         }
4409:../Dave/Generated/FREERTOS/tasks.c **** 
4410:../Dave/Generated/FREERTOS/tasks.c ****         /* Terminate. */
4411:../Dave/Generated/FREERTOS/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
 6892              	 .loc 1 4411 0 is_stmt 1
 6893 0032 7A68     	 ldr r2,[r7,#4]
 6894 0034 FB68     	 ldr r3,[r7,#12]
 6895 0036 1344     	 add r3,r3,r2
 6896 0038 0022     	 movs r2,#0
 6897 003a 1A70     	 strb r2,[r3]
4412:../Dave/Generated/FREERTOS/tasks.c **** 
4413:../Dave/Generated/FREERTOS/tasks.c ****         /* Return the new end of string. */
4414:../Dave/Generated/FREERTOS/tasks.c ****         return &( pcBuffer[ x ] );
 6898              	 .loc 1 4414 0
 6899 003c 7A68     	 ldr r2,[r7,#4]
 6900 003e FB68     	 ldr r3,[r7,#12]
 6901 0040 1344     	 add r3,r3,r2
4415:../Dave/Generated/FREERTOS/tasks.c ****     }
 6902              	 .loc 1 4415 0
 6903 0042 1846     	 mov r0,r3
 6904 0044 1037     	 adds r7,r7,#16
 6905              	.LCFI296:
 6906              	 .cfi_def_cfa_offset 8
 6907 0046 BD46     	 mov sp,r7
 6908              	.LCFI297:
 6909              	 .cfi_def_cfa_register 13
 6910              	 
 6911 0048 80BD     	 pop {r7,pc}
 6912              	 .cfi_endproc
 6913              	.LFE195:
 6915 004a 00BF     	 .section .rodata
 6916 0005 000000   	 .align 2
 6917              	.LC1:
 6918 0008 09256309 	 .ascii "\011%c\011%u\011%u\011%u\015\012\000"
 6918      25750925 
 6918      75092575 
 6918      0D0A00
 6919 0017 00       	 .section .text.vTaskList,"ax",%progbits
 6920              	 .align 2
 6921              	 .global vTaskList
 6922              	 .thumb
 6923              	 .thumb_func
 6925              	vTaskList:
 6926              	.LFB196:
4416:../Dave/Generated/FREERTOS/tasks.c **** 
4417:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4418:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4419:../Dave/Generated/FREERTOS/tasks.c **** 
4420:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4421:../Dave/Generated/FREERTOS/tasks.c **** 
4422:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskList( char * pcWriteBuffer )
4423:../Dave/Generated/FREERTOS/tasks.c ****     {
 6927              	 .loc 1 4423 0
 6928              	 .cfi_startproc
 6929              	 
 6930              	 
 6931 0000 B0B5     	 push {r4,r5,r7,lr}
 6932              	.LCFI298:
 6933              	 .cfi_def_cfa_offset 16
 6934              	 .cfi_offset 4,-16
 6935              	 .cfi_offset 5,-12
 6936              	 .cfi_offset 7,-8
 6937              	 .cfi_offset 14,-4
 6938 0002 88B0     	 sub sp,sp,#32
 6939              	.LCFI299:
 6940              	 .cfi_def_cfa_offset 48
 6941 0004 02AF     	 add r7,sp,#8
 6942              	.LCFI300:
 6943              	 .cfi_def_cfa 7,40
 6944 0006 7860     	 str r0,[r7,#4]
4424:../Dave/Generated/FREERTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4425:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4426:../Dave/Generated/FREERTOS/tasks.c ****         char cStatus;
4427:../Dave/Generated/FREERTOS/tasks.c **** 
4428:../Dave/Generated/FREERTOS/tasks.c ****         /*
4429:../Dave/Generated/FREERTOS/tasks.c ****          * PLEASE NOTE:
4430:../Dave/Generated/FREERTOS/tasks.c ****          *
4431:../Dave/Generated/FREERTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4432:../Dave/Generated/FREERTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4433:../Dave/Generated/FREERTOS/tasks.c ****          * scheduler.
4434:../Dave/Generated/FREERTOS/tasks.c ****          *
4435:../Dave/Generated/FREERTOS/tasks.c ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4436:../Dave/Generated/FREERTOS/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
4437:../Dave/Generated/FREERTOS/tasks.c ****          * displays task names, states and stack usage.
4438:../Dave/Generated/FREERTOS/tasks.c ****          *
4439:../Dave/Generated/FREERTOS/tasks.c ****          * vTaskList() has a dependency on the sprintf() C library function that
4440:../Dave/Generated/FREERTOS/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
4441:../Dave/Generated/FREERTOS/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
4442:../Dave/Generated/FREERTOS/tasks.c ****          * and limited functionality implementation of sprintf() is provided in
4443:../Dave/Generated/FREERTOS/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
4444:../Dave/Generated/FREERTOS/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
4445:../Dave/Generated/FREERTOS/tasks.c ****          * snprintf() implementation!).
4446:../Dave/Generated/FREERTOS/tasks.c ****          *
4447:../Dave/Generated/FREERTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4448:../Dave/Generated/FREERTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4449:../Dave/Generated/FREERTOS/tasks.c ****          * through a call to vTaskList().
4450:../Dave/Generated/FREERTOS/tasks.c ****          */
4451:../Dave/Generated/FREERTOS/tasks.c **** 
4452:../Dave/Generated/FREERTOS/tasks.c **** 
4453:../Dave/Generated/FREERTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4454:../Dave/Generated/FREERTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
 6945              	 .loc 1 4454 0
 6946 0008 7B68     	 ldr r3,[r7,#4]
 6947 000a 0022     	 movs r2,#0
 6948 000c 1A70     	 strb r2,[r3]
4455:../Dave/Generated/FREERTOS/tasks.c **** 
4456:../Dave/Generated/FREERTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4457:../Dave/Generated/FREERTOS/tasks.c ****          * function is executing. */
4458:../Dave/Generated/FREERTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
 6949              	 .loc 1 4458 0
 6950 000e 454B     	 ldr r3,.L468
 6951 0010 1B68     	 ldr r3,[r3]
 6952 0012 FB60     	 str r3,[r7,#12]
4459:../Dave/Generated/FREERTOS/tasks.c **** 
4460:../Dave/Generated/FREERTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
4461:../Dave/Generated/FREERTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4462:../Dave/Generated/FREERTOS/tasks.c ****          * equate to NULL. */
4463:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
 6953              	 .loc 1 4463 0
 6954 0014 434B     	 ldr r3,.L468
 6955 0016 1A68     	 ldr r2,[r3]
 6956 0018 1346     	 mov r3,r2
 6957 001a DB00     	 lsls r3,r3,#3
 6958 001c 1344     	 add r3,r3,r2
 6959 001e 9B00     	 lsls r3,r3,#2
 6960 0020 1846     	 mov r0,r3
 6961 0022 FFF7FEFF 	 bl pvPortMalloc
 6962 0026 B860     	 str r0,[r7,#8]
4464:../Dave/Generated/FREERTOS/tasks.c **** 
4465:../Dave/Generated/FREERTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
 6963              	 .loc 1 4465 0
 6964 0028 BB68     	 ldr r3,[r7,#8]
 6965 002a 002B     	 cmp r3,#0
 6966 002c 76D0     	 beq .L456
4466:../Dave/Generated/FREERTOS/tasks.c ****         {
4467:../Dave/Generated/FREERTOS/tasks.c ****             /* Generate the (binary) data. */
4468:../Dave/Generated/FREERTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 6967              	 .loc 1 4468 0
 6968 002e B868     	 ldr r0,[r7,#8]
 6969 0030 F968     	 ldr r1,[r7,#12]
 6970 0032 0022     	 movs r2,#0
 6971 0034 FFF7FEFF 	 bl uxTaskGetSystemState
 6972 0038 F860     	 str r0,[r7,#12]
4469:../Dave/Generated/FREERTOS/tasks.c **** 
4470:../Dave/Generated/FREERTOS/tasks.c ****             /* Create a human readable table from the binary data. */
4471:../Dave/Generated/FREERTOS/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
 6973              	 .loc 1 4471 0
 6974 003a 0023     	 movs r3,#0
 6975 003c 7B61     	 str r3,[r7,#20]
 6976 003e 66E0     	 b .L458
 6977              	.L467:
4472:../Dave/Generated/FREERTOS/tasks.c ****             {
4473:../Dave/Generated/FREERTOS/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
 6978              	 .loc 1 4473 0
 6979 0040 7A69     	 ldr r2,[r7,#20]
 6980 0042 1346     	 mov r3,r2
 6981 0044 DB00     	 lsls r3,r3,#3
 6982 0046 1344     	 add r3,r3,r2
 6983 0048 9B00     	 lsls r3,r3,#2
 6984 004a 1A46     	 mov r2,r3
 6985 004c BB68     	 ldr r3,[r7,#8]
 6986 004e 1344     	 add r3,r3,r2
 6987 0050 1B7B     	 ldrb r3,[r3,#12]
 6988 0052 042B     	 cmp r3,#4
 6989 0054 1BD8     	 bhi .L459
 6990 0056 01A2     	 adr r2,.L461
 6991 0058 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 6992              	 .p2align 2
 6993              	.L461:
 6994 005c 71000000 	 .word .L460+1
 6995 0060 77000000 	 .word .L462+1
 6996 0064 7D000000 	 .word .L463+1
 6997 0068 83000000 	 .word .L464+1
 6998 006c 89000000 	 .word .L465+1
 6999              	 .p2align 1
 7000              	.L460:
4474:../Dave/Generated/FREERTOS/tasks.c ****                 {
4475:../Dave/Generated/FREERTOS/tasks.c ****                     case eRunning:
4476:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = tskRUNNING_CHAR;
 7001              	 .loc 1 4476 0
 7002 0070 5823     	 movs r3,#88
 7003 0072 FB74     	 strb r3,[r7,#19]
4477:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 7004              	 .loc 1 4477 0
 7005 0074 0EE0     	 b .L466
 7006              	.L462:
4478:../Dave/Generated/FREERTOS/tasks.c **** 
4479:../Dave/Generated/FREERTOS/tasks.c ****                     case eReady:
4480:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = tskREADY_CHAR;
 7007              	 .loc 1 4480 0
 7008 0076 5223     	 movs r3,#82
 7009 0078 FB74     	 strb r3,[r7,#19]
4481:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 7010              	 .loc 1 4481 0
 7011 007a 0BE0     	 b .L466
 7012              	.L463:
4482:../Dave/Generated/FREERTOS/tasks.c **** 
4483:../Dave/Generated/FREERTOS/tasks.c ****                     case eBlocked:
4484:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
 7013              	 .loc 1 4484 0
 7014 007c 4223     	 movs r3,#66
 7015 007e FB74     	 strb r3,[r7,#19]
4485:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 7016              	 .loc 1 4485 0
 7017 0080 08E0     	 b .L466
 7018              	.L464:
4486:../Dave/Generated/FREERTOS/tasks.c **** 
4487:../Dave/Generated/FREERTOS/tasks.c ****                     case eSuspended:
4488:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
 7019              	 .loc 1 4488 0
 7020 0082 5323     	 movs r3,#83
 7021 0084 FB74     	 strb r3,[r7,#19]
4489:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 7022              	 .loc 1 4489 0
 7023 0086 05E0     	 b .L466
 7024              	.L465:
4490:../Dave/Generated/FREERTOS/tasks.c **** 
4491:../Dave/Generated/FREERTOS/tasks.c ****                     case eDeleted:
4492:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = tskDELETED_CHAR;
 7025              	 .loc 1 4492 0
 7026 0088 4423     	 movs r3,#68
 7027 008a FB74     	 strb r3,[r7,#19]
4493:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 7028              	 .loc 1 4493 0
 7029 008c 02E0     	 b .L466
 7030              	.L459:
4494:../Dave/Generated/FREERTOS/tasks.c **** 
4495:../Dave/Generated/FREERTOS/tasks.c ****                     case eInvalid: /* Fall through. */
4496:../Dave/Generated/FREERTOS/tasks.c ****                     default:       /* Should not get here, but it is included
4497:../Dave/Generated/FREERTOS/tasks.c ****                                     * to prevent static checking errors. */
4498:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = ( char ) 0x00;
 7031              	 .loc 1 4498 0
 7032 008e 0023     	 movs r3,#0
 7033 0090 FB74     	 strb r3,[r7,#19]
4499:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 7034              	 .loc 1 4499 0
 7035 0092 00BF     	 nop
 7036              	.L466:
4500:../Dave/Generated/FREERTOS/tasks.c ****                 }
4501:../Dave/Generated/FREERTOS/tasks.c **** 
4502:../Dave/Generated/FREERTOS/tasks.c ****                 /* Write the task name to the string, padding with spaces so it
4503:../Dave/Generated/FREERTOS/tasks.c ****                  * can be printed in tabular form more easily. */
4504:../Dave/Generated/FREERTOS/tasks.c ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
 7037              	 .loc 1 4504 0 discriminator 2
 7038 0094 7A69     	 ldr r2,[r7,#20]
 7039 0096 1346     	 mov r3,r2
 7040 0098 DB00     	 lsls r3,r3,#3
 7041 009a 1344     	 add r3,r3,r2
 7042 009c 9B00     	 lsls r3,r3,#2
 7043 009e 1A46     	 mov r2,r3
 7044 00a0 BB68     	 ldr r3,[r7,#8]
 7045 00a2 1344     	 add r3,r3,r2
 7046 00a4 5B68     	 ldr r3,[r3,#4]
 7047 00a6 7868     	 ldr r0,[r7,#4]
 7048 00a8 1946     	 mov r1,r3
 7049 00aa FFF7FEFF 	 bl prvWriteNameToBuffer
 7050 00ae 7860     	 str r0,[r7,#4]
4505:../Dave/Generated/FREERTOS/tasks.c **** 
4506:../Dave/Generated/FREERTOS/tasks.c ****                 /* Write the rest of the string. */
4507:../Dave/Generated/FREERTOS/tasks.c ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
 7051              	 .loc 1 4507 0 discriminator 2
 7052 00b0 FD7C     	 ldrb r5,[r7,#19]
 7053 00b2 7A69     	 ldr r2,[r7,#20]
 7054 00b4 1346     	 mov r3,r2
 7055 00b6 DB00     	 lsls r3,r3,#3
 7056 00b8 1344     	 add r3,r3,r2
 7057 00ba 9B00     	 lsls r3,r3,#2
 7058 00bc 1A46     	 mov r2,r3
 7059 00be BB68     	 ldr r3,[r7,#8]
 7060 00c0 1344     	 add r3,r3,r2
 7061 00c2 1C69     	 ldr r4,[r3,#16]
 7062 00c4 7A69     	 ldr r2,[r7,#20]
 7063 00c6 1346     	 mov r3,r2
 7064 00c8 DB00     	 lsls r3,r3,#3
 7065 00ca 1344     	 add r3,r3,r2
 7066 00cc 9B00     	 lsls r3,r3,#2
 7067 00ce 1A46     	 mov r2,r3
 7068 00d0 BB68     	 ldr r3,[r7,#8]
 7069 00d2 1344     	 add r3,r3,r2
 7070 00d4 1B8C     	 ldrh r3,[r3,#32]
 7071 00d6 1946     	 mov r1,r3
 7072 00d8 7A69     	 ldr r2,[r7,#20]
 7073 00da 1346     	 mov r3,r2
 7074 00dc DB00     	 lsls r3,r3,#3
 7075 00de 1344     	 add r3,r3,r2
 7076 00e0 9B00     	 lsls r3,r3,#2
 7077 00e2 1A46     	 mov r2,r3
 7078 00e4 BB68     	 ldr r3,[r7,#8]
 7079 00e6 1344     	 add r3,r3,r2
 7080 00e8 9B68     	 ldr r3,[r3,#8]
 7081 00ea 0091     	 str r1,[sp]
 7082 00ec 0193     	 str r3,[sp,#4]
 7083 00ee 7868     	 ldr r0,[r7,#4]
 7084 00f0 0D49     	 ldr r1,.L468+4
 7085 00f2 2A46     	 mov r2,r5
 7086 00f4 2346     	 mov r3,r4
 7087 00f6 FFF7FEFF 	 bl sprintf
4508:../Dave/Generated/FREERTOS/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
 7088              	 .loc 1 4508 0 discriminator 2
 7089 00fa 7868     	 ldr r0,[r7,#4]
 7090 00fc FFF7FEFF 	 bl strlen
 7091 0100 0246     	 mov r2,r0
 7092 0102 7B68     	 ldr r3,[r7,#4]
 7093 0104 1344     	 add r3,r3,r2
 7094 0106 7B60     	 str r3,[r7,#4]
4471:../Dave/Generated/FREERTOS/tasks.c ****             {
 7095              	 .loc 1 4471 0 discriminator 2
 7096 0108 7B69     	 ldr r3,[r7,#20]
 7097 010a 0133     	 adds r3,r3,#1
 7098 010c 7B61     	 str r3,[r7,#20]
 7099              	.L458:
4471:../Dave/Generated/FREERTOS/tasks.c ****             {
 7100              	 .loc 1 4471 0 is_stmt 0 discriminator 1
 7101 010e 7A69     	 ldr r2,[r7,#20]
 7102 0110 FB68     	 ldr r3,[r7,#12]
 7103 0112 9A42     	 cmp r2,r3
 7104 0114 94D3     	 bcc .L467
4509:../Dave/Generated/FREERTOS/tasks.c ****             }
4510:../Dave/Generated/FREERTOS/tasks.c **** 
4511:../Dave/Generated/FREERTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4512:../Dave/Generated/FREERTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4513:../Dave/Generated/FREERTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
 7105              	 .loc 1 4513 0 is_stmt 1
 7106 0116 B868     	 ldr r0,[r7,#8]
 7107 0118 FFF7FEFF 	 bl vPortFree
 7108              	.L456:
4514:../Dave/Generated/FREERTOS/tasks.c ****         }
4515:../Dave/Generated/FREERTOS/tasks.c ****         else
4516:../Dave/Generated/FREERTOS/tasks.c ****         {
4517:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4518:../Dave/Generated/FREERTOS/tasks.c ****         }
4519:../Dave/Generated/FREERTOS/tasks.c ****     }
 7109              	 .loc 1 4519 0
 7110 011c 1837     	 adds r7,r7,#24
 7111              	.LCFI301:
 7112              	 .cfi_def_cfa_offset 16
 7113 011e BD46     	 mov sp,r7
 7114              	.LCFI302:
 7115              	 .cfi_def_cfa_register 13
 7116              	 
 7117 0120 B0BD     	 pop {r4,r5,r7,pc}
 7118              	.L469:
 7119 0122 00BF     	 .align 2
 7120              	.L468:
 7121 0124 00000000 	 .word uxCurrentNumberOfTasks
 7122 0128 08000000 	 .word .LC1
 7123              	 .cfi_endproc
 7124              	.LFE196:
 7126              	 .section .text.uxTaskResetEventItemValue,"ax",%progbits
 7127              	 .align 2
 7128              	 .global uxTaskResetEventItemValue
 7129              	 .thumb
 7130              	 .thumb_func
 7132              	uxTaskResetEventItemValue:
 7133              	.LFB197:
4520:../Dave/Generated/FREERTOS/tasks.c **** 
4521:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4522:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
4523:../Dave/Generated/FREERTOS/tasks.c **** 
4524:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4525:../Dave/Generated/FREERTOS/tasks.c **** 
4526:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
4527:../Dave/Generated/FREERTOS/tasks.c ****     {
4528:../Dave/Generated/FREERTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4529:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4530:../Dave/Generated/FREERTOS/tasks.c ****         uint32_t ulTotalTime, ulStatsAsPercentage;
4531:../Dave/Generated/FREERTOS/tasks.c **** 
4532:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TRACE_FACILITY != 1 )
4533:../Dave/Generated/FREERTOS/tasks.c ****             {
4534:../Dave/Generated/FREERTOS/tasks.c ****                 #error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vT
4535:../Dave/Generated/FREERTOS/tasks.c ****             }
4536:../Dave/Generated/FREERTOS/tasks.c ****         #endif
4537:../Dave/Generated/FREERTOS/tasks.c **** 
4538:../Dave/Generated/FREERTOS/tasks.c ****         /*
4539:../Dave/Generated/FREERTOS/tasks.c ****          * PLEASE NOTE:
4540:../Dave/Generated/FREERTOS/tasks.c ****          *
4541:../Dave/Generated/FREERTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4542:../Dave/Generated/FREERTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4543:../Dave/Generated/FREERTOS/tasks.c ****          * scheduler.
4544:../Dave/Generated/FREERTOS/tasks.c ****          *
4545:../Dave/Generated/FREERTOS/tasks.c ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4546:../Dave/Generated/FREERTOS/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
4547:../Dave/Generated/FREERTOS/tasks.c ****          * displays the amount of time each task has spent in the Running state
4548:../Dave/Generated/FREERTOS/tasks.c ****          * in both absolute and percentage terms.
4549:../Dave/Generated/FREERTOS/tasks.c ****          *
4550:../Dave/Generated/FREERTOS/tasks.c ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4551:../Dave/Generated/FREERTOS/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
4552:../Dave/Generated/FREERTOS/tasks.c ****          * provide different results on different platforms.  An alternative,
4553:../Dave/Generated/FREERTOS/tasks.c ****          * tiny, third party, and limited functionality implementation of
4554:../Dave/Generated/FREERTOS/tasks.c ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4555:../Dave/Generated/FREERTOS/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4556:../Dave/Generated/FREERTOS/tasks.c ****          * a full snprintf() implementation!).
4557:../Dave/Generated/FREERTOS/tasks.c ****          *
4558:../Dave/Generated/FREERTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4559:../Dave/Generated/FREERTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4560:../Dave/Generated/FREERTOS/tasks.c ****          * through a call to vTaskGetRunTimeStats().
4561:../Dave/Generated/FREERTOS/tasks.c ****          */
4562:../Dave/Generated/FREERTOS/tasks.c **** 
4563:../Dave/Generated/FREERTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4564:../Dave/Generated/FREERTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4565:../Dave/Generated/FREERTOS/tasks.c **** 
4566:../Dave/Generated/FREERTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4567:../Dave/Generated/FREERTOS/tasks.c ****          * function is executing. */
4568:../Dave/Generated/FREERTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4569:../Dave/Generated/FREERTOS/tasks.c **** 
4570:../Dave/Generated/FREERTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
4571:../Dave/Generated/FREERTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4572:../Dave/Generated/FREERTOS/tasks.c ****          * equate to NULL. */
4573:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4574:../Dave/Generated/FREERTOS/tasks.c **** 
4575:../Dave/Generated/FREERTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
4576:../Dave/Generated/FREERTOS/tasks.c ****         {
4577:../Dave/Generated/FREERTOS/tasks.c ****             /* Generate the (binary) data. */
4578:../Dave/Generated/FREERTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4579:../Dave/Generated/FREERTOS/tasks.c **** 
4580:../Dave/Generated/FREERTOS/tasks.c ****             /* For percentage calculations. */
4581:../Dave/Generated/FREERTOS/tasks.c ****             ulTotalTime /= 100UL;
4582:../Dave/Generated/FREERTOS/tasks.c **** 
4583:../Dave/Generated/FREERTOS/tasks.c ****             /* Avoid divide by zero errors. */
4584:../Dave/Generated/FREERTOS/tasks.c ****             if( ulTotalTime > 0UL )
4585:../Dave/Generated/FREERTOS/tasks.c ****             {
4586:../Dave/Generated/FREERTOS/tasks.c ****                 /* Create a human readable table from the binary data. */
4587:../Dave/Generated/FREERTOS/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
4588:../Dave/Generated/FREERTOS/tasks.c ****                 {
4589:../Dave/Generated/FREERTOS/tasks.c ****                     /* What percentage of the total run time has the task used?
4590:../Dave/Generated/FREERTOS/tasks.c ****                      * This will always be rounded down to the nearest integer.
4591:../Dave/Generated/FREERTOS/tasks.c ****                      * ulTotalRunTimeDiv100 has already been divided by 100. */
4592:../Dave/Generated/FREERTOS/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4593:../Dave/Generated/FREERTOS/tasks.c **** 
4594:../Dave/Generated/FREERTOS/tasks.c ****                     /* Write the task name to the string, padding with
4595:../Dave/Generated/FREERTOS/tasks.c ****                      * spaces so it can be printed in tabular form more
4596:../Dave/Generated/FREERTOS/tasks.c ****                      * easily. */
4597:../Dave/Generated/FREERTOS/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
4598:../Dave/Generated/FREERTOS/tasks.c **** 
4599:../Dave/Generated/FREERTOS/tasks.c ****                     if( ulStatsAsPercentage > 0UL )
4600:../Dave/Generated/FREERTOS/tasks.c ****                     {
4601:../Dave/Generated/FREERTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4602:../Dave/Generated/FREERTOS/tasks.c ****                             {
4603:../Dave/Generated/FREERTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x 
4604:../Dave/Generated/FREERTOS/tasks.c ****                             }
4605:../Dave/Generated/FREERTOS/tasks.c ****                         #else
4606:../Dave/Generated/FREERTOS/tasks.c ****                             {
4607:../Dave/Generated/FREERTOS/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4608:../Dave/Generated/FREERTOS/tasks.c ****                                  * printf() library can be used. */
4609:../Dave/Generated/FREERTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTask
4610:../Dave/Generated/FREERTOS/tasks.c ****                             }
4611:../Dave/Generated/FREERTOS/tasks.c ****                         #endif
4612:../Dave/Generated/FREERTOS/tasks.c ****                     }
4613:../Dave/Generated/FREERTOS/tasks.c ****                     else
4614:../Dave/Generated/FREERTOS/tasks.c ****                     {
4615:../Dave/Generated/FREERTOS/tasks.c ****                         /* If the percentage is zero here then the task has
4616:../Dave/Generated/FREERTOS/tasks.c ****                          * consumed less than 1% of the total run time. */
4617:../Dave/Generated/FREERTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4618:../Dave/Generated/FREERTOS/tasks.c ****                             {
4619:../Dave/Generated/FREERTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ]
4620:../Dave/Generated/FREERTOS/tasks.c ****                             }
4621:../Dave/Generated/FREERTOS/tasks.c ****                         #else
4622:../Dave/Generated/FREERTOS/tasks.c ****                             {
4623:../Dave/Generated/FREERTOS/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4624:../Dave/Generated/FREERTOS/tasks.c ****                                  * printf() library can be used. */
4625:../Dave/Generated/FREERTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTask
4626:../Dave/Generated/FREERTOS/tasks.c ****                             }
4627:../Dave/Generated/FREERTOS/tasks.c ****                         #endif
4628:../Dave/Generated/FREERTOS/tasks.c ****                     }
4629:../Dave/Generated/FREERTOS/tasks.c **** 
4630:../Dave/Generated/FREERTOS/tasks.c ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4631:../Dave/Generated/FREERTOS/tasks.c ****                 }
4632:../Dave/Generated/FREERTOS/tasks.c ****             }
4633:../Dave/Generated/FREERTOS/tasks.c ****             else
4634:../Dave/Generated/FREERTOS/tasks.c ****             {
4635:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4636:../Dave/Generated/FREERTOS/tasks.c ****             }
4637:../Dave/Generated/FREERTOS/tasks.c **** 
4638:../Dave/Generated/FREERTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4639:../Dave/Generated/FREERTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4640:../Dave/Generated/FREERTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
4641:../Dave/Generated/FREERTOS/tasks.c ****         }
4642:../Dave/Generated/FREERTOS/tasks.c ****         else
4643:../Dave/Generated/FREERTOS/tasks.c ****         {
4644:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4645:../Dave/Generated/FREERTOS/tasks.c ****         }
4646:../Dave/Generated/FREERTOS/tasks.c ****     }
4647:../Dave/Generated/FREERTOS/tasks.c **** 
4648:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4649:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4650:../Dave/Generated/FREERTOS/tasks.c **** 
4651:../Dave/Generated/FREERTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4652:../Dave/Generated/FREERTOS/tasks.c **** {
 7134              	 .loc 1 4652 0
 7135              	 .cfi_startproc
 7136              	 
 7137              	 
 7138              	 
 7139 0000 80B4     	 push {r7}
 7140              	.LCFI303:
 7141              	 .cfi_def_cfa_offset 4
 7142              	 .cfi_offset 7,-4
 7143 0002 83B0     	 sub sp,sp,#12
 7144              	.LCFI304:
 7145              	 .cfi_def_cfa_offset 16
 7146 0004 00AF     	 add r7,sp,#0
 7147              	.LCFI305:
 7148              	 .cfi_def_cfa_register 7
4653:../Dave/Generated/FREERTOS/tasks.c ****     TickType_t uxReturn;
4654:../Dave/Generated/FREERTOS/tasks.c **** 
4655:../Dave/Generated/FREERTOS/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 7149              	 .loc 1 4655 0
 7150 0006 094B     	 ldr r3,.L472
 7151 0008 1B68     	 ldr r3,[r3]
 7152 000a 9B69     	 ldr r3,[r3,#24]
 7153 000c 7B60     	 str r3,[r7,#4]
4656:../Dave/Generated/FREERTOS/tasks.c **** 
4657:../Dave/Generated/FREERTOS/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
4658:../Dave/Generated/FREERTOS/tasks.c ****      * queues and semaphores. */
4659:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
 7154              	 .loc 1 4659 0
 7155 000e 074B     	 ldr r3,.L472
 7156 0010 1B68     	 ldr r3,[r3]
 7157 0012 064A     	 ldr r2,.L472
 7158 0014 1268     	 ldr r2,[r2]
 7159 0016 D26A     	 ldr r2,[r2,#44]
 7160 0018 C2F10502 	 rsb r2,r2,#5
 7161 001c 9A61     	 str r2,[r3,#24]
4660:../Dave/Generated/FREERTOS/tasks.c **** 
4661:../Dave/Generated/FREERTOS/tasks.c ****     return uxReturn;
 7162              	 .loc 1 4661 0
 7163 001e 7B68     	 ldr r3,[r7,#4]
4662:../Dave/Generated/FREERTOS/tasks.c **** }
 7164              	 .loc 1 4662 0
 7165 0020 1846     	 mov r0,r3
 7166 0022 0C37     	 adds r7,r7,#12
 7167              	.LCFI306:
 7168              	 .cfi_def_cfa_offset 4
 7169 0024 BD46     	 mov sp,r7
 7170              	.LCFI307:
 7171              	 .cfi_def_cfa_register 13
 7172              	 
 7173 0026 5DF8047B 	 ldr r7,[sp],#4
 7174              	.LCFI308:
 7175              	 .cfi_restore 7
 7176              	 .cfi_def_cfa_offset 0
 7177 002a 7047     	 bx lr
 7178              	.L473:
 7179              	 .align 2
 7180              	.L472:
 7181 002c 00000000 	 .word pxCurrentTCB
 7182              	 .cfi_endproc
 7183              	.LFE197:
 7185              	 .section .text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 7186              	 .align 2
 7187              	 .global pvTaskIncrementMutexHeldCount
 7188              	 .thumb
 7189              	 .thumb_func
 7191              	pvTaskIncrementMutexHeldCount:
 7192              	.LFB198:
4663:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4664:../Dave/Generated/FREERTOS/tasks.c **** 
4665:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4666:../Dave/Generated/FREERTOS/tasks.c **** 
4667:../Dave/Generated/FREERTOS/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4668:../Dave/Generated/FREERTOS/tasks.c ****     {
 7193              	 .loc 1 4668 0
 7194              	 .cfi_startproc
 7195              	 
 7196              	 
 7197              	 
 7198 0000 80B4     	 push {r7}
 7199              	.LCFI309:
 7200              	 .cfi_def_cfa_offset 4
 7201              	 .cfi_offset 7,-4
 7202 0002 00AF     	 add r7,sp,#0
 7203              	.LCFI310:
 7204              	 .cfi_def_cfa_register 7
4669:../Dave/Generated/FREERTOS/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4670:../Dave/Generated/FREERTOS/tasks.c ****          * then pxCurrentTCB will be NULL. */
4671:../Dave/Generated/FREERTOS/tasks.c ****         if( pxCurrentTCB != NULL )
 7205              	 .loc 1 4671 0
 7206 0004 074B     	 ldr r3,.L477
 7207 0006 1B68     	 ldr r3,[r3]
 7208 0008 002B     	 cmp r3,#0
 7209 000a 04D0     	 beq .L475
4672:../Dave/Generated/FREERTOS/tasks.c ****         {
4673:../Dave/Generated/FREERTOS/tasks.c ****             ( pxCurrentTCB->uxMutexesHeld )++;
 7210              	 .loc 1 4673 0
 7211 000c 054B     	 ldr r3,.L477
 7212 000e 1B68     	 ldr r3,[r3]
 7213 0010 1A6D     	 ldr r2,[r3,#80]
 7214 0012 0132     	 adds r2,r2,#1
 7215 0014 1A65     	 str r2,[r3,#80]
 7216              	.L475:
4674:../Dave/Generated/FREERTOS/tasks.c ****         }
4675:../Dave/Generated/FREERTOS/tasks.c **** 
4676:../Dave/Generated/FREERTOS/tasks.c ****         return pxCurrentTCB;
 7217              	 .loc 1 4676 0
 7218 0016 034B     	 ldr r3,.L477
 7219 0018 1B68     	 ldr r3,[r3]
4677:../Dave/Generated/FREERTOS/tasks.c ****     }
 7220              	 .loc 1 4677 0
 7221 001a 1846     	 mov r0,r3
 7222 001c BD46     	 mov sp,r7
 7223              	.LCFI311:
 7224              	 .cfi_def_cfa_register 13
 7225              	 
 7226 001e 5DF8047B 	 ldr r7,[sp],#4
 7227              	.LCFI312:
 7228              	 .cfi_restore 7
 7229              	 .cfi_def_cfa_offset 0
 7230 0022 7047     	 bx lr
 7231              	.L478:
 7232              	 .align 2
 7233              	.L477:
 7234 0024 00000000 	 .word pxCurrentTCB
 7235              	 .cfi_endproc
 7236              	.LFE198:
 7238              	 .section .text.ulTaskGenericNotifyTake,"ax",%progbits
 7239              	 .align 2
 7240              	 .global ulTaskGenericNotifyTake
 7241              	 .thumb
 7242              	 .thumb_func
 7244              	ulTaskGenericNotifyTake:
 7245              	.LFB199:
4678:../Dave/Generated/FREERTOS/tasks.c **** 
4679:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4680:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4681:../Dave/Generated/FREERTOS/tasks.c **** 
4682:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4683:../Dave/Generated/FREERTOS/tasks.c **** 
4684:../Dave/Generated/FREERTOS/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4685:../Dave/Generated/FREERTOS/tasks.c ****                                       BaseType_t xClearCountOnExit,
4686:../Dave/Generated/FREERTOS/tasks.c ****                                       TickType_t xTicksToWait )
4687:../Dave/Generated/FREERTOS/tasks.c ****     {
 7246              	 .loc 1 4687 0
 7247              	 .cfi_startproc
 7248              	 
 7249              	 
 7250 0000 80B5     	 push {r7,lr}
 7251              	.LCFI313:
 7252              	 .cfi_def_cfa_offset 8
 7253              	 .cfi_offset 7,-8
 7254              	 .cfi_offset 14,-4
 7255 0002 86B0     	 sub sp,sp,#24
 7256              	.LCFI314:
 7257              	 .cfi_def_cfa_offset 32
 7258 0004 00AF     	 add r7,sp,#0
 7259              	.LCFI315:
 7260              	 .cfi_def_cfa_register 7
 7261 0006 F860     	 str r0,[r7,#12]
 7262 0008 B960     	 str r1,[r7,#8]
 7263 000a 7A60     	 str r2,[r7,#4]
4688:../Dave/Generated/FREERTOS/tasks.c ****         uint32_t ulReturn;
4689:../Dave/Generated/FREERTOS/tasks.c **** 
4690:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7264              	 .loc 1 4690 0
 7265 000c FB68     	 ldr r3,[r7,#12]
 7266 000e 002B     	 cmp r3,#0
 7267 0010 09D0     	 beq .L480
 7268              	.LBB234:
 7269              	.LBB235:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 7270              	 .loc 2 197 0 discriminator 1
 7271              	
 7272 0012 4FF0FC03 	 mov r3,#252
 7273 0016 83F31188 	 msr basepri,r3
 7274 001a BFF36F8F 	 isb 
 7275 001e BFF34F8F 	 dsb 
 7276              	
 7277              	
 7278              	 .thumb
 7279 0022 3B61     	 str r3,[r7,#16]
 7280              	.L481:
 7281              	.LBE235:
 7282              	.LBE234:
 7283              	 .loc 1 4690 0 discriminator 1
 7284 0024 FEE7     	 b .L481
 7285              	.L480:
4691:../Dave/Generated/FREERTOS/tasks.c **** 
4692:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 7286              	 .loc 1 4692 0
 7287 0026 FFF7FEFF 	 bl vPortEnterCritical
4693:../Dave/Generated/FREERTOS/tasks.c ****         {
4694:../Dave/Generated/FREERTOS/tasks.c ****             /* Only block if the notification count is not already non-zero. */
4695:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 7288              	 .loc 1 4695 0
 7289 002a 264B     	 ldr r3,.L487
 7290 002c 1B68     	 ldr r3,[r3]
 7291 002e FA68     	 ldr r2,[r7,#12]
 7292 0030 1A32     	 adds r2,r2,#26
 7293 0032 53F82230 	 ldr r3,[r3,r2,lsl#2]
 7294 0036 002B     	 cmp r3,#0
 7295 0038 15D1     	 bne .L482
4696:../Dave/Generated/FREERTOS/tasks.c ****             {
4697:../Dave/Generated/FREERTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4698:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 7296              	 .loc 1 4698 0
 7297 003a 224B     	 ldr r3,.L487
 7298 003c 1A68     	 ldr r2,[r3]
 7299 003e FB68     	 ldr r3,[r7,#12]
 7300 0040 1344     	 add r3,r3,r2
 7301 0042 6833     	 adds r3,r3,#104
 7302 0044 0122     	 movs r2,#1
 7303 0046 1A71     	 strb r2,[r3,#4]
4699:../Dave/Generated/FREERTOS/tasks.c **** 
4700:../Dave/Generated/FREERTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
 7304              	 .loc 1 4700 0
 7305 0048 7B68     	 ldr r3,[r7,#4]
 7306 004a 002B     	 cmp r3,#0
 7307 004c 0BD0     	 beq .L482
4701:../Dave/Generated/FREERTOS/tasks.c ****                 {
4702:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7308              	 .loc 1 4702 0
 7309 004e 7868     	 ldr r0,[r7,#4]
 7310 0050 0121     	 movs r1,#1
 7311 0052 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
4703:../Dave/Generated/FREERTOS/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4704:../Dave/Generated/FREERTOS/tasks.c **** 
4705:../Dave/Generated/FREERTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4706:../Dave/Generated/FREERTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4707:../Dave/Generated/FREERTOS/tasks.c ****                      * critical section exits) - but it is not something that
4708:../Dave/Generated/FREERTOS/tasks.c ****                      * application code should ever do. */
4709:../Dave/Generated/FREERTOS/tasks.c ****                     portYIELD_WITHIN_API();
 7312              	 .loc 1 4709 0
 7313 0056 1C4B     	 ldr r3,.L487+4
 7314 0058 4FF08052 	 mov r2,#268435456
 7315 005c 1A60     	 str r2,[r3]
 7316              	
 7317 005e BFF34F8F 	 dsb
 7318              	
 7319              	
 7320 0062 BFF36F8F 	 isb
 7321              	
 7322              	 .thumb
 7323              	.L482:
4710:../Dave/Generated/FREERTOS/tasks.c ****                 }
4711:../Dave/Generated/FREERTOS/tasks.c ****                 else
4712:../Dave/Generated/FREERTOS/tasks.c ****                 {
4713:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4714:../Dave/Generated/FREERTOS/tasks.c ****                 }
4715:../Dave/Generated/FREERTOS/tasks.c ****             }
4716:../Dave/Generated/FREERTOS/tasks.c ****             else
4717:../Dave/Generated/FREERTOS/tasks.c ****             {
4718:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4719:../Dave/Generated/FREERTOS/tasks.c ****             }
4720:../Dave/Generated/FREERTOS/tasks.c ****         }
4721:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 7324              	 .loc 1 4721 0
 7325 0066 FFF7FEFF 	 bl vPortExitCritical
4722:../Dave/Generated/FREERTOS/tasks.c **** 
4723:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 7326              	 .loc 1 4723 0
 7327 006a FFF7FEFF 	 bl vPortEnterCritical
4724:../Dave/Generated/FREERTOS/tasks.c ****         {
4725:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4726:../Dave/Generated/FREERTOS/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 7328              	 .loc 1 4726 0
 7329 006e 154B     	 ldr r3,.L487
 7330 0070 1B68     	 ldr r3,[r3]
 7331 0072 FA68     	 ldr r2,[r7,#12]
 7332 0074 1A32     	 adds r2,r2,#26
 7333 0076 53F82230 	 ldr r3,[r3,r2,lsl#2]
 7334 007a 7B61     	 str r3,[r7,#20]
4727:../Dave/Generated/FREERTOS/tasks.c **** 
4728:../Dave/Generated/FREERTOS/tasks.c ****             if( ulReturn != 0UL )
 7335              	 .loc 1 4728 0
 7336 007c 7B69     	 ldr r3,[r7,#20]
 7337 007e 002B     	 cmp r3,#0
 7338 0080 12D0     	 beq .L483
4729:../Dave/Generated/FREERTOS/tasks.c ****             {
4730:../Dave/Generated/FREERTOS/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
 7339              	 .loc 1 4730 0
 7340 0082 BB68     	 ldr r3,[r7,#8]
 7341 0084 002B     	 cmp r3,#0
 7342 0086 07D0     	 beq .L484
4731:../Dave/Generated/FREERTOS/tasks.c ****                 {
4732:../Dave/Generated/FREERTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 7343              	 .loc 1 4732 0
 7344 0088 0E4B     	 ldr r3,.L487
 7345 008a 1B68     	 ldr r3,[r3]
 7346 008c FA68     	 ldr r2,[r7,#12]
 7347 008e 1A32     	 adds r2,r2,#26
 7348 0090 0021     	 movs r1,#0
 7349 0092 43F82210 	 str r1,[r3,r2,lsl#2]
 7350 0096 07E0     	 b .L483
 7351              	.L484:
4733:../Dave/Generated/FREERTOS/tasks.c ****                 }
4734:../Dave/Generated/FREERTOS/tasks.c ****                 else
4735:../Dave/Generated/FREERTOS/tasks.c ****                 {
4736:../Dave/Generated/FREERTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 7352              	 .loc 1 4736 0
 7353 0098 0A4B     	 ldr r3,.L487
 7354 009a 1B68     	 ldr r3,[r3]
 7355 009c 7A69     	 ldr r2,[r7,#20]
 7356 009e 511E     	 subs r1,r2,#1
 7357 00a0 FA68     	 ldr r2,[r7,#12]
 7358 00a2 1A32     	 adds r2,r2,#26
 7359 00a4 43F82210 	 str r1,[r3,r2,lsl#2]
 7360              	.L483:
4737:../Dave/Generated/FREERTOS/tasks.c ****                 }
4738:../Dave/Generated/FREERTOS/tasks.c ****             }
4739:../Dave/Generated/FREERTOS/tasks.c ****             else
4740:../Dave/Generated/FREERTOS/tasks.c ****             {
4741:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4742:../Dave/Generated/FREERTOS/tasks.c ****             }
4743:../Dave/Generated/FREERTOS/tasks.c **** 
4744:../Dave/Generated/FREERTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 7361              	 .loc 1 4744 0
 7362 00a8 064B     	 ldr r3,.L487
 7363 00aa 1A68     	 ldr r2,[r3]
 7364 00ac FB68     	 ldr r3,[r7,#12]
 7365 00ae 1344     	 add r3,r3,r2
 7366 00b0 6833     	 adds r3,r3,#104
 7367 00b2 0022     	 movs r2,#0
 7368 00b4 1A71     	 strb r2,[r3,#4]
4745:../Dave/Generated/FREERTOS/tasks.c ****         }
4746:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 7369              	 .loc 1 4746 0
 7370 00b6 FFF7FEFF 	 bl vPortExitCritical
4747:../Dave/Generated/FREERTOS/tasks.c **** 
4748:../Dave/Generated/FREERTOS/tasks.c ****         return ulReturn;
 7371              	 .loc 1 4748 0
 7372 00ba 7B69     	 ldr r3,[r7,#20]
4749:../Dave/Generated/FREERTOS/tasks.c ****     }
 7373              	 .loc 1 4749 0
 7374 00bc 1846     	 mov r0,r3
 7375 00be 1837     	 adds r7,r7,#24
 7376              	.LCFI316:
 7377              	 .cfi_def_cfa_offset 8
 7378 00c0 BD46     	 mov sp,r7
 7379              	.LCFI317:
 7380              	 .cfi_def_cfa_register 13
 7381              	 
 7382 00c2 80BD     	 pop {r7,pc}
 7383              	.L488:
 7384              	 .align 2
 7385              	.L487:
 7386 00c4 00000000 	 .word pxCurrentTCB
 7387 00c8 04ED00E0 	 .word -536810236
 7388              	 .cfi_endproc
 7389              	.LFE199:
 7391              	 .section .text.xTaskGenericNotifyWait,"ax",%progbits
 7392              	 .align 2
 7393              	 .global xTaskGenericNotifyWait
 7394              	 .thumb
 7395              	 .thumb_func
 7397              	xTaskGenericNotifyWait:
 7398              	.LFB200:
4750:../Dave/Generated/FREERTOS/tasks.c **** 
4751:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4752:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4753:../Dave/Generated/FREERTOS/tasks.c **** 
4754:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4755:../Dave/Generated/FREERTOS/tasks.c **** 
4756:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4757:../Dave/Generated/FREERTOS/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
4758:../Dave/Generated/FREERTOS/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
4759:../Dave/Generated/FREERTOS/tasks.c ****                                        uint32_t * pulNotificationValue,
4760:../Dave/Generated/FREERTOS/tasks.c ****                                        TickType_t xTicksToWait )
4761:../Dave/Generated/FREERTOS/tasks.c ****     {
 7399              	 .loc 1 4761 0
 7400              	 .cfi_startproc
 7401              	 
 7402              	 
 7403 0000 80B5     	 push {r7,lr}
 7404              	.LCFI318:
 7405              	 .cfi_def_cfa_offset 8
 7406              	 .cfi_offset 7,-8
 7407              	 .cfi_offset 14,-4
 7408 0002 86B0     	 sub sp,sp,#24
 7409              	.LCFI319:
 7410              	 .cfi_def_cfa_offset 32
 7411 0004 00AF     	 add r7,sp,#0
 7412              	.LCFI320:
 7413              	 .cfi_def_cfa_register 7
 7414 0006 F860     	 str r0,[r7,#12]
 7415 0008 B960     	 str r1,[r7,#8]
 7416 000a 7A60     	 str r2,[r7,#4]
 7417 000c 3B60     	 str r3,[r7]
4762:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
4763:../Dave/Generated/FREERTOS/tasks.c **** 
4764:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7418              	 .loc 1 4764 0
 7419 000e FB68     	 ldr r3,[r7,#12]
 7420 0010 002B     	 cmp r3,#0
 7421 0012 09D0     	 beq .L490
 7422              	.LBB236:
 7423              	.LBB237:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 7424              	 .loc 2 197 0 discriminator 1
 7425              	
 7426 0014 4FF0FC03 	 mov r3,#252
 7427 0018 83F31188 	 msr basepri,r3
 7428 001c BFF36F8F 	 isb 
 7429 0020 BFF34F8F 	 dsb 
 7430              	
 7431              	
 7432              	 .thumb
 7433 0024 3B61     	 str r3,[r7,#16]
 7434              	.L491:
 7435              	.LBE237:
 7436              	.LBE236:
 7437              	 .loc 1 4764 0 discriminator 1
 7438 0026 FEE7     	 b .L491
 7439              	.L490:
4765:../Dave/Generated/FREERTOS/tasks.c **** 
4766:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 7440              	 .loc 1 4766 0
 7441 0028 FFF7FEFF 	 bl vPortEnterCritical
4767:../Dave/Generated/FREERTOS/tasks.c ****         {
4768:../Dave/Generated/FREERTOS/tasks.c ****             /* Only block if a notification is not already pending. */
4769:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 7442              	 .loc 1 4769 0
 7443 002c 314B     	 ldr r3,.L497
 7444 002e 1A68     	 ldr r2,[r3]
 7445 0030 FB68     	 ldr r3,[r7,#12]
 7446 0032 1344     	 add r3,r3,r2
 7447 0034 6833     	 adds r3,r3,#104
 7448 0036 1B79     	 ldrb r3,[r3,#4]
 7449 0038 DBB2     	 uxtb r3,r3
 7450 003a 022B     	 cmp r3,#2
 7451 003c 22D0     	 beq .L492
4770:../Dave/Generated/FREERTOS/tasks.c ****             {
4771:../Dave/Generated/FREERTOS/tasks.c ****                 /* Clear bits in the task's notification value as bits may get
4772:../Dave/Generated/FREERTOS/tasks.c ****                  * set  by the notifying task or interrupt.  This can be used to
4773:../Dave/Generated/FREERTOS/tasks.c ****                  * clear the value to zero. */
4774:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 7452              	 .loc 1 4774 0
 7453 003e 2D4B     	 ldr r3,.L497
 7454 0040 1B68     	 ldr r3,[r3]
 7455 0042 FA68     	 ldr r2,[r7,#12]
 7456 0044 1A32     	 adds r2,r2,#26
 7457 0046 53F82210 	 ldr r1,[r3,r2,lsl#2]
 7458 004a BA68     	 ldr r2,[r7,#8]
 7459 004c D243     	 mvns r2,r2
 7460 004e 1140     	 ands r1,r1,r2
 7461 0050 FA68     	 ldr r2,[r7,#12]
 7462 0052 1A32     	 adds r2,r2,#26
 7463 0054 43F82210 	 str r1,[r3,r2,lsl#2]
4775:../Dave/Generated/FREERTOS/tasks.c **** 
4776:../Dave/Generated/FREERTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4777:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 7464              	 .loc 1 4777 0
 7465 0058 264B     	 ldr r3,.L497
 7466 005a 1A68     	 ldr r2,[r3]
 7467 005c FB68     	 ldr r3,[r7,#12]
 7468 005e 1344     	 add r3,r3,r2
 7469 0060 6833     	 adds r3,r3,#104
 7470 0062 0122     	 movs r2,#1
 7471 0064 1A71     	 strb r2,[r3,#4]
4778:../Dave/Generated/FREERTOS/tasks.c **** 
4779:../Dave/Generated/FREERTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
 7472              	 .loc 1 4779 0
 7473 0066 3B6A     	 ldr r3,[r7,#32]
 7474 0068 002B     	 cmp r3,#0
 7475 006a 0BD0     	 beq .L492
4780:../Dave/Generated/FREERTOS/tasks.c ****                 {
4781:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7476              	 .loc 1 4781 0
 7477 006c 386A     	 ldr r0,[r7,#32]
 7478 006e 0121     	 movs r1,#1
 7479 0070 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
4782:../Dave/Generated/FREERTOS/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4783:../Dave/Generated/FREERTOS/tasks.c **** 
4784:../Dave/Generated/FREERTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4785:../Dave/Generated/FREERTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4786:../Dave/Generated/FREERTOS/tasks.c ****                      * critical section exits) - but it is not something that
4787:../Dave/Generated/FREERTOS/tasks.c ****                      * application code should ever do. */
4788:../Dave/Generated/FREERTOS/tasks.c ****                     portYIELD_WITHIN_API();
 7480              	 .loc 1 4788 0
 7481 0074 204B     	 ldr r3,.L497+4
 7482 0076 4FF08052 	 mov r2,#268435456
 7483 007a 1A60     	 str r2,[r3]
 7484              	
 7485 007c BFF34F8F 	 dsb
 7486              	
 7487              	
 7488 0080 BFF36F8F 	 isb
 7489              	
 7490              	 .thumb
 7491              	.L492:
4789:../Dave/Generated/FREERTOS/tasks.c ****                 }
4790:../Dave/Generated/FREERTOS/tasks.c ****                 else
4791:../Dave/Generated/FREERTOS/tasks.c ****                 {
4792:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4793:../Dave/Generated/FREERTOS/tasks.c ****                 }
4794:../Dave/Generated/FREERTOS/tasks.c ****             }
4795:../Dave/Generated/FREERTOS/tasks.c ****             else
4796:../Dave/Generated/FREERTOS/tasks.c ****             {
4797:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4798:../Dave/Generated/FREERTOS/tasks.c ****             }
4799:../Dave/Generated/FREERTOS/tasks.c ****         }
4800:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 7492              	 .loc 1 4800 0
 7493 0084 FFF7FEFF 	 bl vPortExitCritical
4801:../Dave/Generated/FREERTOS/tasks.c **** 
4802:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 7494              	 .loc 1 4802 0
 7495 0088 FFF7FEFF 	 bl vPortEnterCritical
4803:../Dave/Generated/FREERTOS/tasks.c ****         {
4804:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
4805:../Dave/Generated/FREERTOS/tasks.c **** 
4806:../Dave/Generated/FREERTOS/tasks.c ****             if( pulNotificationValue != NULL )
 7496              	 .loc 1 4806 0
 7497 008c 3B68     	 ldr r3,[r7]
 7498 008e 002B     	 cmp r3,#0
 7499 0090 07D0     	 beq .L493
4807:../Dave/Generated/FREERTOS/tasks.c ****             {
4808:../Dave/Generated/FREERTOS/tasks.c ****                 /* Output the current notification value, which may or may not
4809:../Dave/Generated/FREERTOS/tasks.c ****                  * have changed. */
4810:../Dave/Generated/FREERTOS/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 7500              	 .loc 1 4810 0
 7501 0092 184B     	 ldr r3,.L497
 7502 0094 1B68     	 ldr r3,[r3]
 7503 0096 FA68     	 ldr r2,[r7,#12]
 7504 0098 1A32     	 adds r2,r2,#26
 7505 009a 53F82220 	 ldr r2,[r3,r2,lsl#2]
 7506 009e 3B68     	 ldr r3,[r7]
 7507 00a0 1A60     	 str r2,[r3]
 7508              	.L493:
4811:../Dave/Generated/FREERTOS/tasks.c ****             }
4812:../Dave/Generated/FREERTOS/tasks.c **** 
4813:../Dave/Generated/FREERTOS/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
4814:../Dave/Generated/FREERTOS/tasks.c ****              * blocked state (because a notification was already pending) or the
4815:../Dave/Generated/FREERTOS/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
4816:../Dave/Generated/FREERTOS/tasks.c ****              * unblocked because of a timeout. */
4817:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 7509              	 .loc 1 4817 0
 7510 00a2 144B     	 ldr r3,.L497
 7511 00a4 1A68     	 ldr r2,[r3]
 7512 00a6 FB68     	 ldr r3,[r7,#12]
 7513 00a8 1344     	 add r3,r3,r2
 7514 00aa 6833     	 adds r3,r3,#104
 7515 00ac 1B79     	 ldrb r3,[r3,#4]
 7516 00ae DBB2     	 uxtb r3,r3
 7517 00b0 022B     	 cmp r3,#2
 7518 00b2 02D0     	 beq .L494
4818:../Dave/Generated/FREERTOS/tasks.c ****             {
4819:../Dave/Generated/FREERTOS/tasks.c ****                 /* A notification was not received. */
4820:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdFALSE;
 7519              	 .loc 1 4820 0
 7520 00b4 0023     	 movs r3,#0
 7521 00b6 7B61     	 str r3,[r7,#20]
 7522 00b8 0EE0     	 b .L495
 7523              	.L494:
4821:../Dave/Generated/FREERTOS/tasks.c ****             }
4822:../Dave/Generated/FREERTOS/tasks.c ****             else
4823:../Dave/Generated/FREERTOS/tasks.c ****             {
4824:../Dave/Generated/FREERTOS/tasks.c ****                 /* A notification was already pending or a notification was
4825:../Dave/Generated/FREERTOS/tasks.c ****                  * received while the task was waiting. */
4826:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 7524              	 .loc 1 4826 0
 7525 00ba 0E4B     	 ldr r3,.L497
 7526 00bc 1B68     	 ldr r3,[r3]
 7527 00be FA68     	 ldr r2,[r7,#12]
 7528 00c0 1A32     	 adds r2,r2,#26
 7529 00c2 53F82210 	 ldr r1,[r3,r2,lsl#2]
 7530 00c6 7A68     	 ldr r2,[r7,#4]
 7531 00c8 D243     	 mvns r2,r2
 7532 00ca 1140     	 ands r1,r1,r2
 7533 00cc FA68     	 ldr r2,[r7,#12]
 7534 00ce 1A32     	 adds r2,r2,#26
 7535 00d0 43F82210 	 str r1,[r3,r2,lsl#2]
4827:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdTRUE;
 7536              	 .loc 1 4827 0
 7537 00d4 0123     	 movs r3,#1
 7538 00d6 7B61     	 str r3,[r7,#20]
 7539              	.L495:
4828:../Dave/Generated/FREERTOS/tasks.c ****             }
4829:../Dave/Generated/FREERTOS/tasks.c **** 
4830:../Dave/Generated/FREERTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 7540              	 .loc 1 4830 0
 7541 00d8 064B     	 ldr r3,.L497
 7542 00da 1A68     	 ldr r2,[r3]
 7543 00dc FB68     	 ldr r3,[r7,#12]
 7544 00de 1344     	 add r3,r3,r2
 7545 00e0 6833     	 adds r3,r3,#104
 7546 00e2 0022     	 movs r2,#0
 7547 00e4 1A71     	 strb r2,[r3,#4]
4831:../Dave/Generated/FREERTOS/tasks.c ****         }
4832:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 7548              	 .loc 1 4832 0
 7549 00e6 FFF7FEFF 	 bl vPortExitCritical
4833:../Dave/Generated/FREERTOS/tasks.c **** 
4834:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 7550              	 .loc 1 4834 0
 7551 00ea 7B69     	 ldr r3,[r7,#20]
4835:../Dave/Generated/FREERTOS/tasks.c ****     }
 7552              	 .loc 1 4835 0
 7553 00ec 1846     	 mov r0,r3
 7554 00ee 1837     	 adds r7,r7,#24
 7555              	.LCFI321:
 7556              	 .cfi_def_cfa_offset 8
 7557 00f0 BD46     	 mov sp,r7
 7558              	.LCFI322:
 7559              	 .cfi_def_cfa_register 13
 7560              	 
 7561 00f2 80BD     	 pop {r7,pc}
 7562              	.L498:
 7563              	 .align 2
 7564              	.L497:
 7565 00f4 00000000 	 .word pxCurrentTCB
 7566 00f8 04ED00E0 	 .word -536810236
 7567              	 .cfi_endproc
 7568              	.LFE200:
 7570              	 .section .text.xTaskGenericNotify,"ax",%progbits
 7571              	 .align 2
 7572              	 .global xTaskGenericNotify
 7573              	 .thumb
 7574              	 .thumb_func
 7576              	xTaskGenericNotify:
 7577              	.LFB201:
4836:../Dave/Generated/FREERTOS/tasks.c **** 
4837:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4838:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4839:../Dave/Generated/FREERTOS/tasks.c **** 
4840:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4841:../Dave/Generated/FREERTOS/tasks.c **** 
4842:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
4843:../Dave/Generated/FREERTOS/tasks.c ****                                    UBaseType_t uxIndexToNotify,
4844:../Dave/Generated/FREERTOS/tasks.c ****                                    uint32_t ulValue,
4845:../Dave/Generated/FREERTOS/tasks.c ****                                    eNotifyAction eAction,
4846:../Dave/Generated/FREERTOS/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
4847:../Dave/Generated/FREERTOS/tasks.c ****     {
 7578              	 .loc 1 4847 0
 7579              	 .cfi_startproc
 7580              	 
 7581              	 
 7582 0000 80B5     	 push {r7,lr}
 7583              	.LCFI323:
 7584              	 .cfi_def_cfa_offset 8
 7585              	 .cfi_offset 7,-8
 7586              	 .cfi_offset 14,-4
 7587 0002 8CB0     	 sub sp,sp,#48
 7588              	.LCFI324:
 7589              	 .cfi_def_cfa_offset 56
 7590 0004 00AF     	 add r7,sp,#0
 7591              	.LCFI325:
 7592              	 .cfi_def_cfa_register 7
 7593 0006 F860     	 str r0,[r7,#12]
 7594 0008 B960     	 str r1,[r7,#8]
 7595 000a 7A60     	 str r2,[r7,#4]
 7596 000c FB70     	 strb r3,[r7,#3]
4848:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
4849:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 7597              	 .loc 1 4849 0
 7598 000e 0123     	 movs r3,#1
 7599 0010 FB62     	 str r3,[r7,#44]
4850:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4851:../Dave/Generated/FREERTOS/tasks.c **** 
4852:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7600              	 .loc 1 4852 0
 7601 0012 BB68     	 ldr r3,[r7,#8]
 7602 0014 002B     	 cmp r3,#0
 7603 0016 09D0     	 beq .L500
 7604              	.LBB238:
 7605              	.LBB239:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 7606              	 .loc 2 197 0 discriminator 1
 7607              	
 7608 0018 4FF0FC03 	 mov r3,#252
 7609 001c 83F31188 	 msr basepri,r3
 7610 0020 BFF36F8F 	 isb 
 7611 0024 BFF34F8F 	 dsb 
 7612              	
 7613              	
 7614              	 .thumb
 7615 0028 3B62     	 str r3,[r7,#32]
 7616              	.L501:
 7617              	.LBE239:
 7618              	.LBE238:
 7619              	 .loc 1 4852 0 discriminator 1
 7620 002a FEE7     	 b .L501
 7621              	.L500:
4853:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTaskToNotify );
 7622              	 .loc 1 4853 0
 7623 002c FB68     	 ldr r3,[r7,#12]
 7624 002e 002B     	 cmp r3,#0
 7625 0030 09D1     	 bne .L502
 7626              	.LBB240:
 7627              	.LBB241:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 7628              	 .loc 2 197 0 discriminator 1
 7629              	
 7630 0032 4FF0FC03 	 mov r3,#252
 7631 0036 83F31188 	 msr basepri,r3
 7632 003a BFF36F8F 	 isb 
 7633 003e BFF34F8F 	 dsb 
 7634              	
 7635              	
 7636              	 .thumb
 7637 0042 FB61     	 str r3,[r7,#28]
 7638              	.L503:
 7639              	.LBE241:
 7640              	.LBE240:
 7641              	 .loc 1 4853 0 discriminator 2
 7642 0044 FEE7     	 b .L503
 7643              	.L502:
4854:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = xTaskToNotify;
 7644              	 .loc 1 4854 0
 7645 0046 FB68     	 ldr r3,[r7,#12]
 7646 0048 BB62     	 str r3,[r7,#40]
4855:../Dave/Generated/FREERTOS/tasks.c **** 
4856:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 7647              	 .loc 1 4856 0
 7648 004a FFF7FEFF 	 bl vPortEnterCritical
4857:../Dave/Generated/FREERTOS/tasks.c ****         {
4858:../Dave/Generated/FREERTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
 7649              	 .loc 1 4858 0
 7650 004e BB6B     	 ldr r3,[r7,#56]
 7651 0050 002B     	 cmp r3,#0
 7652 0052 06D0     	 beq .L504
4859:../Dave/Generated/FREERTOS/tasks.c ****             {
4860:../Dave/Generated/FREERTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 7653              	 .loc 1 4860 0
 7654 0054 BB6A     	 ldr r3,[r7,#40]
 7655 0056 BA68     	 ldr r2,[r7,#8]
 7656 0058 1A32     	 adds r2,r2,#26
 7657 005a 53F82220 	 ldr r2,[r3,r2,lsl#2]
 7658 005e BB6B     	 ldr r3,[r7,#56]
 7659 0060 1A60     	 str r2,[r3]
 7660              	.L504:
4861:../Dave/Generated/FREERTOS/tasks.c ****             }
4862:../Dave/Generated/FREERTOS/tasks.c **** 
4863:../Dave/Generated/FREERTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 7661              	 .loc 1 4863 0
 7662 0062 BA6A     	 ldr r2,[r7,#40]
 7663 0064 BB68     	 ldr r3,[r7,#8]
 7664 0066 1344     	 add r3,r3,r2
 7665 0068 6833     	 adds r3,r3,#104
 7666 006a 1B79     	 ldrb r3,[r3,#4]
 7667 006c 87F82730 	 strb r3,[r7,#39]
4864:../Dave/Generated/FREERTOS/tasks.c **** 
4865:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7668              	 .loc 1 4865 0
 7669 0070 BA6A     	 ldr r2,[r7,#40]
 7670 0072 BB68     	 ldr r3,[r7,#8]
 7671 0074 1344     	 add r3,r3,r2
 7672 0076 6833     	 adds r3,r3,#104
 7673 0078 0222     	 movs r2,#2
 7674 007a 1A71     	 strb r2,[r3,#4]
4866:../Dave/Generated/FREERTOS/tasks.c **** 
4867:../Dave/Generated/FREERTOS/tasks.c ****             switch( eAction )
 7675              	 .loc 1 4867 0
 7676 007c FB78     	 ldrb r3,[r7,#3]
 7677 007e 042B     	 cmp r3,#4
 7678 0080 3BD8     	 bhi .L505
 7679 0082 01A2     	 adr r2,.L507
 7680 0084 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 7681              	 .p2align 2
 7682              	.L507:
 7683 0088 19010000 	 .word .L521+1
 7684 008c 9D000000 	 .word .L508+1
 7685 0090 B9000000 	 .word .L509+1
 7686 0094 D1000000 	 .word .L510+1
 7687 0098 DF000000 	 .word .L511+1
 7688              	 .p2align 1
 7689              	.L508:
4868:../Dave/Generated/FREERTOS/tasks.c ****             {
4869:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetBits:
4870:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 7690              	 .loc 1 4870 0
 7691 009c BB6A     	 ldr r3,[r7,#40]
 7692 009e BA68     	 ldr r2,[r7,#8]
 7693 00a0 1A32     	 adds r2,r2,#26
 7694 00a2 53F82220 	 ldr r2,[r3,r2,lsl#2]
 7695 00a6 7B68     	 ldr r3,[r7,#4]
 7696 00a8 42EA0301 	 orr r1,r2,r3
 7697 00ac BB6A     	 ldr r3,[r7,#40]
 7698 00ae BA68     	 ldr r2,[r7,#8]
 7699 00b0 1A32     	 adds r2,r2,#26
 7700 00b2 43F82210 	 str r1,[r3,r2,lsl#2]
4871:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 7701              	 .loc 1 4871 0
 7702 00b6 30E0     	 b .L512
 7703              	.L509:
4872:../Dave/Generated/FREERTOS/tasks.c **** 
4873:../Dave/Generated/FREERTOS/tasks.c ****                 case eIncrement:
4874:../Dave/Generated/FREERTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 7704              	 .loc 1 4874 0
 7705 00b8 BB6A     	 ldr r3,[r7,#40]
 7706 00ba BA68     	 ldr r2,[r7,#8]
 7707 00bc 1A32     	 adds r2,r2,#26
 7708 00be 53F82230 	 ldr r3,[r3,r2,lsl#2]
 7709 00c2 591C     	 adds r1,r3,#1
 7710 00c4 BB6A     	 ldr r3,[r7,#40]
 7711 00c6 BA68     	 ldr r2,[r7,#8]
 7712 00c8 1A32     	 adds r2,r2,#26
 7713 00ca 43F82210 	 str r1,[r3,r2,lsl#2]
4875:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 7714              	 .loc 1 4875 0
 7715 00ce 24E0     	 b .L512
 7716              	.L510:
4876:../Dave/Generated/FREERTOS/tasks.c **** 
4877:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetValueWithOverwrite:
4878:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 7717              	 .loc 1 4878 0
 7718 00d0 BB6A     	 ldr r3,[r7,#40]
 7719 00d2 BA68     	 ldr r2,[r7,#8]
 7720 00d4 1A32     	 adds r2,r2,#26
 7721 00d6 7968     	 ldr r1,[r7,#4]
 7722 00d8 43F82210 	 str r1,[r3,r2,lsl#2]
4879:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 7723              	 .loc 1 4879 0
 7724 00dc 1DE0     	 b .L512
 7725              	.L511:
4880:../Dave/Generated/FREERTOS/tasks.c **** 
4881:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
4882:../Dave/Generated/FREERTOS/tasks.c **** 
4883:../Dave/Generated/FREERTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7726              	 .loc 1 4883 0
 7727 00de 97F82730 	 ldrb r3,[r7,#39]
 7728 00e2 022B     	 cmp r3,#2
 7729 00e4 06D0     	 beq .L513
4884:../Dave/Generated/FREERTOS/tasks.c ****                     {
4885:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 7730              	 .loc 1 4885 0
 7731 00e6 BB6A     	 ldr r3,[r7,#40]
 7732 00e8 BA68     	 ldr r2,[r7,#8]
 7733 00ea 1A32     	 adds r2,r2,#26
 7734 00ec 7968     	 ldr r1,[r7,#4]
 7735 00ee 43F82210 	 str r1,[r3,r2,lsl#2]
4886:../Dave/Generated/FREERTOS/tasks.c ****                     }
4887:../Dave/Generated/FREERTOS/tasks.c ****                     else
4888:../Dave/Generated/FREERTOS/tasks.c ****                     {
4889:../Dave/Generated/FREERTOS/tasks.c ****                         /* The value could not be written to the task. */
4890:../Dave/Generated/FREERTOS/tasks.c ****                         xReturn = pdFAIL;
4891:../Dave/Generated/FREERTOS/tasks.c ****                     }
4892:../Dave/Generated/FREERTOS/tasks.c **** 
4893:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 7736              	 .loc 1 4893 0
 7737 00f2 12E0     	 b .L512
 7738              	.L513:
4890:../Dave/Generated/FREERTOS/tasks.c ****                     }
 7739              	 .loc 1 4890 0
 7740 00f4 0023     	 movs r3,#0
 7741 00f6 FB62     	 str r3,[r7,#44]
 7742              	 .loc 1 4893 0
 7743 00f8 0FE0     	 b .L512
 7744              	.L505:
4894:../Dave/Generated/FREERTOS/tasks.c **** 
4895:../Dave/Generated/FREERTOS/tasks.c ****                 case eNoAction:
4896:../Dave/Generated/FREERTOS/tasks.c **** 
4897:../Dave/Generated/FREERTOS/tasks.c ****                     /* The task is being notified without its notify value being
4898:../Dave/Generated/FREERTOS/tasks.c ****                      * updated. */
4899:../Dave/Generated/FREERTOS/tasks.c ****                     break;
4900:../Dave/Generated/FREERTOS/tasks.c **** 
4901:../Dave/Generated/FREERTOS/tasks.c ****                 default:
4902:../Dave/Generated/FREERTOS/tasks.c **** 
4903:../Dave/Generated/FREERTOS/tasks.c ****                     /* Should not get here if all enums are handled.
4904:../Dave/Generated/FREERTOS/tasks.c ****                      * Artificially force an assert by testing a value the
4905:../Dave/Generated/FREERTOS/tasks.c ****                      * compiler can't assume is const. */
4906:../Dave/Generated/FREERTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
 7745              	 .loc 1 4906 0
 7746 00fa 2B4B     	 ldr r3,.L522
 7747 00fc 1B68     	 ldr r3,[r3]
 7748 00fe 002B     	 cmp r3,#0
 7749 0100 09D0     	 beq .L515
 7750              	.LBB242:
 7751              	.LBB243:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 7752              	 .loc 2 197 0 discriminator 1
 7753              	
 7754 0102 4FF0FC03 	 mov r3,#252
 7755 0106 83F31188 	 msr basepri,r3
 7756 010a BFF36F8F 	 isb 
 7757 010e BFF34F8F 	 dsb 
 7758              	
 7759              	
 7760              	 .thumb
 7761 0112 BB61     	 str r3,[r7,#24]
 7762              	.L516:
 7763              	.LBE243:
 7764              	.LBE242:
 7765              	 .loc 1 4906 0 discriminator 3
 7766 0114 FEE7     	 b .L516
 7767              	.L515:
4907:../Dave/Generated/FREERTOS/tasks.c **** 
4908:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 7768              	 .loc 1 4908 0
 7769 0116 00E0     	 b .L512
 7770              	.L521:
4899:../Dave/Generated/FREERTOS/tasks.c **** 
 7771              	 .loc 1 4899 0
 7772 0118 00BF     	 nop
 7773              	.L512:
4909:../Dave/Generated/FREERTOS/tasks.c ****             }
4910:../Dave/Generated/FREERTOS/tasks.c **** 
4911:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
4912:../Dave/Generated/FREERTOS/tasks.c **** 
4913:../Dave/Generated/FREERTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
4914:../Dave/Generated/FREERTOS/tasks.c ****              * notification then unblock it now. */
4915:../Dave/Generated/FREERTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7774              	 .loc 1 4915 0
 7775 011a 97F82730 	 ldrb r3,[r7,#39]
 7776 011e 012B     	 cmp r3,#1
 7777 0120 3AD1     	 bne .L517
4916:../Dave/Generated/FREERTOS/tasks.c ****             {
4917:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7778              	 .loc 1 4917 0
 7779 0122 BB6A     	 ldr r3,[r7,#40]
 7780 0124 0433     	 adds r3,r3,#4
 7781 0126 1846     	 mov r0,r3
 7782 0128 FFF7FEFF 	 bl uxListRemove
4918:../Dave/Generated/FREERTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7783              	 .loc 1 4918 0
 7784 012c BB6A     	 ldr r3,[r7,#40]
 7785 012e DB6A     	 ldr r3,[r3,#44]
 7786 0130 1A46     	 mov r2,r3
 7787 0132 0123     	 movs r3,#1
 7788 0134 03FA02F2 	 lsl r2,r3,r2
 7789 0138 1C4B     	 ldr r3,.L522+4
 7790 013a 1B68     	 ldr r3,[r3]
 7791 013c 1343     	 orrs r3,r3,r2
 7792 013e 1B4A     	 ldr r2,.L522+4
 7793 0140 1360     	 str r3,[r2]
 7794 0142 BB6A     	 ldr r3,[r7,#40]
 7795 0144 DA6A     	 ldr r2,[r3,#44]
 7796 0146 1346     	 mov r3,r2
 7797 0148 9B00     	 lsls r3,r3,#2
 7798 014a 1344     	 add r3,r3,r2
 7799 014c 9B00     	 lsls r3,r3,#2
 7800 014e 184A     	 ldr r2,.L522+8
 7801 0150 1A44     	 add r2,r2,r3
 7802 0152 BB6A     	 ldr r3,[r7,#40]
 7803 0154 0433     	 adds r3,r3,#4
 7804 0156 1046     	 mov r0,r2
 7805 0158 1946     	 mov r1,r3
 7806 015a FFF7FEFF 	 bl vListInsertEnd
4919:../Dave/Generated/FREERTOS/tasks.c **** 
4920:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task should not have been on an event list. */
4921:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7807              	 .loc 1 4921 0
 7808 015e BB6A     	 ldr r3,[r7,#40]
 7809 0160 9B6A     	 ldr r3,[r3,#40]
 7810 0162 002B     	 cmp r3,#0
 7811 0164 09D0     	 beq .L518
 7812              	.LBB244:
 7813              	.LBB245:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 7814              	 .loc 2 197 0 discriminator 1
 7815              	
 7816 0166 4FF0FC03 	 mov r3,#252
 7817 016a 83F31188 	 msr basepri,r3
 7818 016e BFF36F8F 	 isb 
 7819 0172 BFF34F8F 	 dsb 
 7820              	
 7821              	
 7822              	 .thumb
 7823 0176 7B61     	 str r3,[r7,#20]
 7824              	.L519:
 7825              	.LBE245:
 7826              	.LBE244:
 7827              	 .loc 1 4921 0 discriminator 4
 7828 0178 FEE7     	 b .L519
 7829              	.L518:
4922:../Dave/Generated/FREERTOS/tasks.c **** 
4923:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4924:../Dave/Generated/FREERTOS/tasks.c ****                     {
4925:../Dave/Generated/FREERTOS/tasks.c ****                         /* If a task is blocked waiting for a notification then
4926:../Dave/Generated/FREERTOS/tasks.c ****                          * xNextTaskUnblockTime might be set to the blocked task's time
4927:../Dave/Generated/FREERTOS/tasks.c ****                          * out time.  If the task is unblocked for a reason other than
4928:../Dave/Generated/FREERTOS/tasks.c ****                          * a timeout xNextTaskUnblockTime is normally left unchanged,
4929:../Dave/Generated/FREERTOS/tasks.c ****                          * because it will automatically get reset to a new value when
4930:../Dave/Generated/FREERTOS/tasks.c ****                          * the tick count equals xNextTaskUnblockTime.  However if
4931:../Dave/Generated/FREERTOS/tasks.c ****                          * tickless idling is used it might be more important to enter
4932:../Dave/Generated/FREERTOS/tasks.c ****                          * sleep mode at the earliest possible time - so reset
4933:../Dave/Generated/FREERTOS/tasks.c ****                          * xNextTaskUnblockTime here to ensure it is updated at the
4934:../Dave/Generated/FREERTOS/tasks.c ****                          * earliest possible time. */
4935:../Dave/Generated/FREERTOS/tasks.c ****                         prvResetNextTaskUnblockTime();
4936:../Dave/Generated/FREERTOS/tasks.c ****                     }
4937:../Dave/Generated/FREERTOS/tasks.c ****                 #endif
4938:../Dave/Generated/FREERTOS/tasks.c **** 
4939:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7830              	 .loc 1 4939 0
 7831 017a BB6A     	 ldr r3,[r7,#40]
 7832 017c DA6A     	 ldr r2,[r3,#44]
 7833 017e 0D4B     	 ldr r3,.L522+12
 7834 0180 1B68     	 ldr r3,[r3]
 7835 0182 DB6A     	 ldr r3,[r3,#44]
 7836 0184 9A42     	 cmp r2,r3
 7837 0186 07D9     	 bls .L517
4940:../Dave/Generated/FREERTOS/tasks.c ****                 {
4941:../Dave/Generated/FREERTOS/tasks.c ****                     /* The notified task has a priority above the currently
4942:../Dave/Generated/FREERTOS/tasks.c ****                      * executing task so a yield is required. */
4943:../Dave/Generated/FREERTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
 7838              	 .loc 1 4943 0
 7839 0188 0B4B     	 ldr r3,.L522+16
 7840 018a 4FF08052 	 mov r2,#268435456
 7841 018e 1A60     	 str r2,[r3]
 7842              	
 7843 0190 BFF34F8F 	 dsb
 7844              	
 7845              	
 7846 0194 BFF36F8F 	 isb
 7847              	
 7848              	 .thumb
 7849              	.L517:
4944:../Dave/Generated/FREERTOS/tasks.c ****                 }
4945:../Dave/Generated/FREERTOS/tasks.c ****                 else
4946:../Dave/Generated/FREERTOS/tasks.c ****                 {
4947:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4948:../Dave/Generated/FREERTOS/tasks.c ****                 }
4949:../Dave/Generated/FREERTOS/tasks.c ****             }
4950:../Dave/Generated/FREERTOS/tasks.c ****             else
4951:../Dave/Generated/FREERTOS/tasks.c ****             {
4952:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4953:../Dave/Generated/FREERTOS/tasks.c ****             }
4954:../Dave/Generated/FREERTOS/tasks.c ****         }
4955:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 7850              	 .loc 1 4955 0
 7851 0198 FFF7FEFF 	 bl vPortExitCritical
4956:../Dave/Generated/FREERTOS/tasks.c **** 
4957:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 7852              	 .loc 1 4957 0
 7853 019c FB6A     	 ldr r3,[r7,#44]
4958:../Dave/Generated/FREERTOS/tasks.c ****     }
 7854              	 .loc 1 4958 0
 7855 019e 1846     	 mov r0,r3
 7856 01a0 3037     	 adds r7,r7,#48
 7857              	.LCFI326:
 7858              	 .cfi_def_cfa_offset 8
 7859 01a2 BD46     	 mov sp,r7
 7860              	.LCFI327:
 7861              	 .cfi_def_cfa_register 13
 7862              	 
 7863 01a4 80BD     	 pop {r7,pc}
 7864              	.L523:
 7865 01a6 00BF     	 .align 2
 7866              	.L522:
 7867 01a8 00000000 	 .word xTickCount
 7868 01ac 00000000 	 .word uxTopReadyPriority
 7869 01b0 00000000 	 .word pxReadyTasksLists
 7870 01b4 00000000 	 .word pxCurrentTCB
 7871 01b8 04ED00E0 	 .word -536810236
 7872              	 .cfi_endproc
 7873              	.LFE201:
 7875              	 .section .text.xTaskGenericNotifyFromISR,"ax",%progbits
 7876              	 .align 2
 7877              	 .global xTaskGenericNotifyFromISR
 7878              	 .thumb
 7879              	 .thumb_func
 7881              	xTaskGenericNotifyFromISR:
 7882              	.LFB202:
4959:../Dave/Generated/FREERTOS/tasks.c **** 
4960:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4961:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4962:../Dave/Generated/FREERTOS/tasks.c **** 
4963:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4964:../Dave/Generated/FREERTOS/tasks.c **** 
4965:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
4966:../Dave/Generated/FREERTOS/tasks.c ****                                           UBaseType_t uxIndexToNotify,
4967:../Dave/Generated/FREERTOS/tasks.c ****                                           uint32_t ulValue,
4968:../Dave/Generated/FREERTOS/tasks.c ****                                           eNotifyAction eAction,
4969:../Dave/Generated/FREERTOS/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
4970:../Dave/Generated/FREERTOS/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
4971:../Dave/Generated/FREERTOS/tasks.c ****     {
 7883              	 .loc 1 4971 0
 7884              	 .cfi_startproc
 7885              	 
 7886              	 
 7887 0000 80B5     	 push {r7,lr}
 7888              	.LCFI328:
 7889              	 .cfi_def_cfa_offset 8
 7890              	 .cfi_offset 7,-8
 7891              	 .cfi_offset 14,-4
 7892 0002 90B0     	 sub sp,sp,#64
 7893              	.LCFI329:
 7894              	 .cfi_def_cfa_offset 72
 7895 0004 00AF     	 add r7,sp,#0
 7896              	.LCFI330:
 7897              	 .cfi_def_cfa_register 7
 7898 0006 F860     	 str r0,[r7,#12]
 7899 0008 B960     	 str r1,[r7,#8]
 7900 000a 7A60     	 str r2,[r7,#4]
 7901 000c FB70     	 strb r3,[r7,#3]
4972:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
4973:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4974:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 7902              	 .loc 1 4974 0
 7903 000e 0123     	 movs r3,#1
 7904 0010 FB63     	 str r3,[r7,#60]
4975:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
4976:../Dave/Generated/FREERTOS/tasks.c **** 
4977:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTaskToNotify );
 7905              	 .loc 1 4977 0
 7906 0012 FB68     	 ldr r3,[r7,#12]
 7907 0014 002B     	 cmp r3,#0
 7908 0016 09D1     	 bne .L525
 7909              	.LBB246:
 7910              	.LBB247:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 7911              	 .loc 2 197 0 discriminator 1
 7912              	
 7913 0018 4FF0FC03 	 mov r3,#252
 7914 001c 83F31188 	 msr basepri,r3
 7915 0020 BFF36F8F 	 isb 
 7916 0024 BFF34F8F 	 dsb 
 7917              	
 7918              	
 7919              	 .thumb
 7920 0028 FB62     	 str r3,[r7,#44]
 7921              	.L526:
 7922              	.LBE247:
 7923              	.LBE246:
 7924              	 .loc 1 4977 0 discriminator 1
 7925 002a FEE7     	 b .L526
 7926              	.L525:
4978:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7927              	 .loc 1 4978 0
 7928 002c BB68     	 ldr r3,[r7,#8]
 7929 002e 002B     	 cmp r3,#0
 7930 0030 09D0     	 beq .L527
 7931              	.LBB248:
 7932              	.LBB249:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 7933              	 .loc 2 197 0 discriminator 1
 7934              	
 7935 0032 4FF0FC03 	 mov r3,#252
 7936 0036 83F31188 	 msr basepri,r3
 7937 003a BFF36F8F 	 isb 
 7938 003e BFF34F8F 	 dsb 
 7939              	
 7940              	
 7941              	 .thumb
 7942 0042 BB62     	 str r3,[r7,#40]
 7943              	.L528:
 7944              	.LBE249:
 7945              	.LBE248:
 7946              	 .loc 1 4978 0 discriminator 2
 7947 0044 FEE7     	 b .L528
 7948              	.L527:
4979:../Dave/Generated/FREERTOS/tasks.c **** 
4980:../Dave/Generated/FREERTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
4981:../Dave/Generated/FREERTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
4982:../Dave/Generated/FREERTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
4983:../Dave/Generated/FREERTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
4984:../Dave/Generated/FREERTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4985:../Dave/Generated/FREERTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
4986:../Dave/Generated/FREERTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4987:../Dave/Generated/FREERTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
4988:../Dave/Generated/FREERTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
4989:../Dave/Generated/FREERTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
4990:../Dave/Generated/FREERTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
4991:../Dave/Generated/FREERTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
4992:../Dave/Generated/FREERTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
4993:../Dave/Generated/FREERTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
4994:../Dave/Generated/FREERTOS/tasks.c ****          * provided on the following link:
4995:../Dave/Generated/FREERTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
4996:../Dave/Generated/FREERTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7949              	 .loc 1 4996 0
 7950 0046 FFF7FEFF 	 bl vPortValidateInterruptPriority
4997:../Dave/Generated/FREERTOS/tasks.c **** 
4998:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = xTaskToNotify;
 7951              	 .loc 1 4998 0
 7952 004a FB68     	 ldr r3,[r7,#12]
 7953 004c BB63     	 str r3,[r7,#56]
 7954              	.LBB250:
 7955              	.LBB251:
 213:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 7956              	 .loc 2 213 0
 7957              	
 7958 004e EFF31182 	 mrs r2,basepri
 7959 0052 4FF0FC03 	 mov r3,#252
 7960 0056 83F31188 	 msr basepri,r3
 7961 005a BFF36F8F 	 isb 
 7962 005e BFF34F8F 	 dsb 
 7963              	
 7964              	
 7965              	 .thumb
 7966 0062 7A62     	 str r2,[r7,#36]
 7967 0064 3B62     	 str r3,[r7,#32]
 225:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 7968              	 .loc 2 225 0
 7969 0066 7B6A     	 ldr r3,[r7,#36]
 7970              	.LBE251:
 7971              	.LBE250:
4999:../Dave/Generated/FREERTOS/tasks.c **** 
5000:../Dave/Generated/FREERTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7972              	 .loc 1 5000 0
 7973 0068 7B63     	 str r3,[r7,#52]
5001:../Dave/Generated/FREERTOS/tasks.c ****         {
5002:../Dave/Generated/FREERTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
 7974              	 .loc 1 5002 0
 7975 006a BB6C     	 ldr r3,[r7,#72]
 7976 006c 002B     	 cmp r3,#0
 7977 006e 06D0     	 beq .L530
5003:../Dave/Generated/FREERTOS/tasks.c ****             {
5004:../Dave/Generated/FREERTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 7978              	 .loc 1 5004 0
 7979 0070 BB6B     	 ldr r3,[r7,#56]
 7980 0072 BA68     	 ldr r2,[r7,#8]
 7981 0074 1A32     	 adds r2,r2,#26
 7982 0076 53F82220 	 ldr r2,[r3,r2,lsl#2]
 7983 007a BB6C     	 ldr r3,[r7,#72]
 7984 007c 1A60     	 str r2,[r3]
 7985              	.L530:
5005:../Dave/Generated/FREERTOS/tasks.c ****             }
5006:../Dave/Generated/FREERTOS/tasks.c **** 
5007:../Dave/Generated/FREERTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 7986              	 .loc 1 5007 0
 7987 007e BA6B     	 ldr r2,[r7,#56]
 7988 0080 BB68     	 ldr r3,[r7,#8]
 7989 0082 1344     	 add r3,r3,r2
 7990 0084 6833     	 adds r3,r3,#104
 7991 0086 1B79     	 ldrb r3,[r3,#4]
 7992 0088 87F83330 	 strb r3,[r7,#51]
5008:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7993              	 .loc 1 5008 0
 7994 008c BA6B     	 ldr r2,[r7,#56]
 7995 008e BB68     	 ldr r3,[r7,#8]
 7996 0090 1344     	 add r3,r3,r2
 7997 0092 6833     	 adds r3,r3,#104
 7998 0094 0222     	 movs r2,#2
 7999 0096 1A71     	 strb r2,[r3,#4]
5009:../Dave/Generated/FREERTOS/tasks.c **** 
5010:../Dave/Generated/FREERTOS/tasks.c ****             switch( eAction )
 8000              	 .loc 1 5010 0
 8001 0098 FB78     	 ldrb r3,[r7,#3]
 8002 009a 042B     	 cmp r3,#4
 8003 009c 3BD8     	 bhi .L531
 8004 009e 01A2     	 adr r2,.L533
 8005 00a0 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 8006              	 .p2align 2
 8007              	.L533:
 8008 00a4 35010000 	 .word .L550+1
 8009 00a8 B9000000 	 .word .L534+1
 8010 00ac D5000000 	 .word .L535+1
 8011 00b0 ED000000 	 .word .L536+1
 8012 00b4 FB000000 	 .word .L537+1
 8013              	 .p2align 1
 8014              	.L534:
5011:../Dave/Generated/FREERTOS/tasks.c ****             {
5012:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetBits:
5013:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8015              	 .loc 1 5013 0
 8016 00b8 BB6B     	 ldr r3,[r7,#56]
 8017 00ba BA68     	 ldr r2,[r7,#8]
 8018 00bc 1A32     	 adds r2,r2,#26
 8019 00be 53F82220 	 ldr r2,[r3,r2,lsl#2]
 8020 00c2 7B68     	 ldr r3,[r7,#4]
 8021 00c4 42EA0301 	 orr r1,r2,r3
 8022 00c8 BB6B     	 ldr r3,[r7,#56]
 8023 00ca BA68     	 ldr r2,[r7,#8]
 8024 00cc 1A32     	 adds r2,r2,#26
 8025 00ce 43F82210 	 str r1,[r3,r2,lsl#2]
5014:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 8026              	 .loc 1 5014 0
 8027 00d2 30E0     	 b .L538
 8028              	.L535:
5015:../Dave/Generated/FREERTOS/tasks.c **** 
5016:../Dave/Generated/FREERTOS/tasks.c ****                 case eIncrement:
5017:../Dave/Generated/FREERTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8029              	 .loc 1 5017 0
 8030 00d4 BB6B     	 ldr r3,[r7,#56]
 8031 00d6 BA68     	 ldr r2,[r7,#8]
 8032 00d8 1A32     	 adds r2,r2,#26
 8033 00da 53F82230 	 ldr r3,[r3,r2,lsl#2]
 8034 00de 591C     	 adds r1,r3,#1
 8035 00e0 BB6B     	 ldr r3,[r7,#56]
 8036 00e2 BA68     	 ldr r2,[r7,#8]
 8037 00e4 1A32     	 adds r2,r2,#26
 8038 00e6 43F82210 	 str r1,[r3,r2,lsl#2]
5018:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 8039              	 .loc 1 5018 0
 8040 00ea 24E0     	 b .L538
 8041              	.L536:
5019:../Dave/Generated/FREERTOS/tasks.c **** 
5020:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetValueWithOverwrite:
5021:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8042              	 .loc 1 5021 0
 8043 00ec BB6B     	 ldr r3,[r7,#56]
 8044 00ee BA68     	 ldr r2,[r7,#8]
 8045 00f0 1A32     	 adds r2,r2,#26
 8046 00f2 7968     	 ldr r1,[r7,#4]
 8047 00f4 43F82210 	 str r1,[r3,r2,lsl#2]
5022:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 8048              	 .loc 1 5022 0
 8049 00f8 1DE0     	 b .L538
 8050              	.L537:
5023:../Dave/Generated/FREERTOS/tasks.c **** 
5024:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
5025:../Dave/Generated/FREERTOS/tasks.c **** 
5026:../Dave/Generated/FREERTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8051              	 .loc 1 5026 0
 8052 00fa 97F83330 	 ldrb r3,[r7,#51]
 8053 00fe 022B     	 cmp r3,#2
 8054 0100 06D0     	 beq .L539
5027:../Dave/Generated/FREERTOS/tasks.c ****                     {
5028:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8055              	 .loc 1 5028 0
 8056 0102 BB6B     	 ldr r3,[r7,#56]
 8057 0104 BA68     	 ldr r2,[r7,#8]
 8058 0106 1A32     	 adds r2,r2,#26
 8059 0108 7968     	 ldr r1,[r7,#4]
 8060 010a 43F82210 	 str r1,[r3,r2,lsl#2]
5029:../Dave/Generated/FREERTOS/tasks.c ****                     }
5030:../Dave/Generated/FREERTOS/tasks.c ****                     else
5031:../Dave/Generated/FREERTOS/tasks.c ****                     {
5032:../Dave/Generated/FREERTOS/tasks.c ****                         /* The value could not be written to the task. */
5033:../Dave/Generated/FREERTOS/tasks.c ****                         xReturn = pdFAIL;
5034:../Dave/Generated/FREERTOS/tasks.c ****                     }
5035:../Dave/Generated/FREERTOS/tasks.c **** 
5036:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 8061              	 .loc 1 5036 0
 8062 010e 12E0     	 b .L538
 8063              	.L539:
5033:../Dave/Generated/FREERTOS/tasks.c ****                     }
 8064              	 .loc 1 5033 0
 8065 0110 0023     	 movs r3,#0
 8066 0112 FB63     	 str r3,[r7,#60]
 8067              	 .loc 1 5036 0
 8068 0114 0FE0     	 b .L538
 8069              	.L531:
5037:../Dave/Generated/FREERTOS/tasks.c **** 
5038:../Dave/Generated/FREERTOS/tasks.c ****                 case eNoAction:
5039:../Dave/Generated/FREERTOS/tasks.c **** 
5040:../Dave/Generated/FREERTOS/tasks.c ****                     /* The task is being notified without its notify value being
5041:../Dave/Generated/FREERTOS/tasks.c ****                      * updated. */
5042:../Dave/Generated/FREERTOS/tasks.c ****                     break;
5043:../Dave/Generated/FREERTOS/tasks.c **** 
5044:../Dave/Generated/FREERTOS/tasks.c ****                 default:
5045:../Dave/Generated/FREERTOS/tasks.c **** 
5046:../Dave/Generated/FREERTOS/tasks.c ****                     /* Should not get here if all enums are handled.
5047:../Dave/Generated/FREERTOS/tasks.c ****                      * Artificially force an assert by testing a value the
5048:../Dave/Generated/FREERTOS/tasks.c ****                      * compiler can't assume is const. */
5049:../Dave/Generated/FREERTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
 8070              	 .loc 1 5049 0
 8071 0116 324B     	 ldr r3,.L551
 8072 0118 1B68     	 ldr r3,[r3]
 8073 011a 002B     	 cmp r3,#0
 8074 011c 09D0     	 beq .L541
 8075              	.LBB252:
 8076              	.LBB253:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 8077              	 .loc 2 197 0 discriminator 1
 8078              	
 8079 011e 4FF0FC03 	 mov r3,#252
 8080 0122 83F31188 	 msr basepri,r3
 8081 0126 BFF36F8F 	 isb 
 8082 012a BFF34F8F 	 dsb 
 8083              	
 8084              	
 8085              	 .thumb
 8086 012e FB61     	 str r3,[r7,#28]
 8087              	.L542:
 8088              	.LBE253:
 8089              	.LBE252:
 8090              	 .loc 1 5049 0 discriminator 3
 8091 0130 FEE7     	 b .L542
 8092              	.L541:
5050:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 8093              	 .loc 1 5050 0
 8094 0132 00E0     	 b .L538
 8095              	.L550:
5042:../Dave/Generated/FREERTOS/tasks.c **** 
 8096              	 .loc 1 5042 0
 8097 0134 00BF     	 nop
 8098              	.L538:
5051:../Dave/Generated/FREERTOS/tasks.c ****             }
5052:../Dave/Generated/FREERTOS/tasks.c **** 
5053:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5054:../Dave/Generated/FREERTOS/tasks.c **** 
5055:../Dave/Generated/FREERTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5056:../Dave/Generated/FREERTOS/tasks.c ****              * notification then unblock it now. */
5057:../Dave/Generated/FREERTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8099              	 .loc 1 5057 0
 8100 0136 97F83330 	 ldrb r3,[r7,#51]
 8101 013a 012B     	 cmp r3,#1
 8102 013c 46D1     	 bne .L543
5058:../Dave/Generated/FREERTOS/tasks.c ****             {
5059:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task should not have been on an event list. */
5060:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8103              	 .loc 1 5060 0
 8104 013e BB6B     	 ldr r3,[r7,#56]
 8105 0140 9B6A     	 ldr r3,[r3,#40]
 8106 0142 002B     	 cmp r3,#0
 8107 0144 09D0     	 beq .L544
 8108              	.LBB254:
 8109              	.LBB255:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 8110              	 .loc 2 197 0 discriminator 1
 8111              	
 8112 0146 4FF0FC03 	 mov r3,#252
 8113 014a 83F31188 	 msr basepri,r3
 8114 014e BFF36F8F 	 isb 
 8115 0152 BFF34F8F 	 dsb 
 8116              	
 8117              	
 8118              	 .thumb
 8119 0156 BB61     	 str r3,[r7,#24]
 8120              	.L545:
 8121              	.LBE255:
 8122              	.LBE254:
 8123              	 .loc 1 5060 0 discriminator 4
 8124 0158 FEE7     	 b .L545
 8125              	.L544:
5061:../Dave/Generated/FREERTOS/tasks.c **** 
5062:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8126              	 .loc 1 5062 0
 8127 015a 224B     	 ldr r3,.L551+4
 8128 015c 1B68     	 ldr r3,[r3]
 8129 015e 002B     	 cmp r3,#0
 8130 0160 1ED1     	 bne .L546
5063:../Dave/Generated/FREERTOS/tasks.c ****                 {
5064:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8131              	 .loc 1 5064 0
 8132 0162 BB6B     	 ldr r3,[r7,#56]
 8133 0164 0433     	 adds r3,r3,#4
 8134 0166 1846     	 mov r0,r3
 8135 0168 FFF7FEFF 	 bl uxListRemove
5065:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8136              	 .loc 1 5065 0
 8137 016c BB6B     	 ldr r3,[r7,#56]
 8138 016e DB6A     	 ldr r3,[r3,#44]
 8139 0170 1A46     	 mov r2,r3
 8140 0172 0123     	 movs r3,#1
 8141 0174 03FA02F2 	 lsl r2,r3,r2
 8142 0178 1B4B     	 ldr r3,.L551+8
 8143 017a 1B68     	 ldr r3,[r3]
 8144 017c 1343     	 orrs r3,r3,r2
 8145 017e 1A4A     	 ldr r2,.L551+8
 8146 0180 1360     	 str r3,[r2]
 8147 0182 BB6B     	 ldr r3,[r7,#56]
 8148 0184 DA6A     	 ldr r2,[r3,#44]
 8149 0186 1346     	 mov r3,r2
 8150 0188 9B00     	 lsls r3,r3,#2
 8151 018a 1344     	 add r3,r3,r2
 8152 018c 9B00     	 lsls r3,r3,#2
 8153 018e 174A     	 ldr r2,.L551+12
 8154 0190 1A44     	 add r2,r2,r3
 8155 0192 BB6B     	 ldr r3,[r7,#56]
 8156 0194 0433     	 adds r3,r3,#4
 8157 0196 1046     	 mov r0,r2
 8158 0198 1946     	 mov r1,r3
 8159 019a FFF7FEFF 	 bl vListInsertEnd
 8160 019e 05E0     	 b .L547
 8161              	.L546:
5066:../Dave/Generated/FREERTOS/tasks.c ****                 }
5067:../Dave/Generated/FREERTOS/tasks.c ****                 else
5068:../Dave/Generated/FREERTOS/tasks.c ****                 {
5069:../Dave/Generated/FREERTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5070:../Dave/Generated/FREERTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5071:../Dave/Generated/FREERTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8162              	 .loc 1 5071 0
 8163 01a0 BB6B     	 ldr r3,[r7,#56]
 8164 01a2 1833     	 adds r3,r3,#24
 8165 01a4 1248     	 ldr r0,.L551+16
 8166 01a6 1946     	 mov r1,r3
 8167 01a8 FFF7FEFF 	 bl vListInsertEnd
 8168              	.L547:
5072:../Dave/Generated/FREERTOS/tasks.c ****                 }
5073:../Dave/Generated/FREERTOS/tasks.c **** 
5074:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8169              	 .loc 1 5074 0
 8170 01ac BB6B     	 ldr r3,[r7,#56]
 8171 01ae DA6A     	 ldr r2,[r3,#44]
 8172 01b0 104B     	 ldr r3,.L551+20
 8173 01b2 1B68     	 ldr r3,[r3]
 8174 01b4 DB6A     	 ldr r3,[r3,#44]
 8175 01b6 9A42     	 cmp r2,r3
 8176 01b8 08D9     	 bls .L543
5075:../Dave/Generated/FREERTOS/tasks.c ****                 {
5076:../Dave/Generated/FREERTOS/tasks.c ****                     /* The notified task has a priority above the currently
5077:../Dave/Generated/FREERTOS/tasks.c ****                      * executing task so a yield is required. */
5078:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
 8177              	 .loc 1 5078 0
 8178 01ba FB6C     	 ldr r3,[r7,#76]
 8179 01bc 002B     	 cmp r3,#0
 8180 01be 02D0     	 beq .L548
5079:../Dave/Generated/FREERTOS/tasks.c ****                     {
5080:../Dave/Generated/FREERTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
 8181              	 .loc 1 5080 0
 8182 01c0 FB6C     	 ldr r3,[r7,#76]
 8183 01c2 0122     	 movs r2,#1
 8184 01c4 1A60     	 str r2,[r3]
 8185              	.L548:
5081:../Dave/Generated/FREERTOS/tasks.c ****                     }
5082:../Dave/Generated/FREERTOS/tasks.c **** 
5083:../Dave/Generated/FREERTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5084:../Dave/Generated/FREERTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5085:../Dave/Generated/FREERTOS/tasks.c ****                      * safe FreeRTOS function. */
5086:../Dave/Generated/FREERTOS/tasks.c ****                     xYieldPending = pdTRUE;
 8186              	 .loc 1 5086 0
 8187 01c6 0C4B     	 ldr r3,.L551+24
 8188 01c8 0122     	 movs r2,#1
 8189 01ca 1A60     	 str r2,[r3]
 8190              	.L543:
 8191 01cc 7B6B     	 ldr r3,[r7,#52]
 8192 01ce 7B61     	 str r3,[r7,#20]
 8193              	.LBB256:
 8194              	.LBB257:
 8195              	 .loc 2 231 0
 8196 01d0 7B69     	 ldr r3,[r7,#20]
 8197              	
 8198 01d2 83F31188 	 msr basepri,r3
 8199              	
 8200              	 .thumb
 8201              	.LBE257:
 8202              	.LBE256:
5087:../Dave/Generated/FREERTOS/tasks.c ****                 }
5088:../Dave/Generated/FREERTOS/tasks.c ****                 else
5089:../Dave/Generated/FREERTOS/tasks.c ****                 {
5090:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5091:../Dave/Generated/FREERTOS/tasks.c ****                 }
5092:../Dave/Generated/FREERTOS/tasks.c ****             }
5093:../Dave/Generated/FREERTOS/tasks.c ****         }
5094:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5095:../Dave/Generated/FREERTOS/tasks.c **** 
5096:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 8203              	 .loc 1 5096 0
 8204 01d6 FB6B     	 ldr r3,[r7,#60]
5097:../Dave/Generated/FREERTOS/tasks.c ****     }
 8205              	 .loc 1 5097 0
 8206 01d8 1846     	 mov r0,r3
 8207 01da 4037     	 adds r7,r7,#64
 8208              	.LCFI331:
 8209              	 .cfi_def_cfa_offset 8
 8210 01dc BD46     	 mov sp,r7
 8211              	.LCFI332:
 8212              	 .cfi_def_cfa_register 13
 8213              	 
 8214 01de 80BD     	 pop {r7,pc}
 8215              	.L552:
 8216              	 .align 2
 8217              	.L551:
 8218 01e0 00000000 	 .word xTickCount
 8219 01e4 00000000 	 .word uxSchedulerSuspended
 8220 01e8 00000000 	 .word uxTopReadyPriority
 8221 01ec 00000000 	 .word pxReadyTasksLists
 8222 01f0 00000000 	 .word xPendingReadyList
 8223 01f4 00000000 	 .word pxCurrentTCB
 8224 01f8 00000000 	 .word xYieldPending
 8225              	 .cfi_endproc
 8226              	.LFE202:
 8228              	 .section .text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 8229              	 .align 2
 8230              	 .global vTaskGenericNotifyGiveFromISR
 8231              	 .thumb
 8232              	 .thumb_func
 8234              	vTaskGenericNotifyGiveFromISR:
 8235              	.LFB203:
5098:../Dave/Generated/FREERTOS/tasks.c **** 
5099:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5100:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5101:../Dave/Generated/FREERTOS/tasks.c **** 
5102:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5103:../Dave/Generated/FREERTOS/tasks.c **** 
5104:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5105:../Dave/Generated/FREERTOS/tasks.c ****                                         UBaseType_t uxIndexToNotify,
5106:../Dave/Generated/FREERTOS/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5107:../Dave/Generated/FREERTOS/tasks.c ****     {
 8236              	 .loc 1 5107 0
 8237              	 .cfi_startproc
 8238              	 
 8239              	 
 8240 0000 80B5     	 push {r7,lr}
 8241              	.LCFI333:
 8242              	 .cfi_def_cfa_offset 8
 8243              	 .cfi_offset 7,-8
 8244              	 .cfi_offset 14,-4
 8245 0002 8EB0     	 sub sp,sp,#56
 8246              	.LCFI334:
 8247              	 .cfi_def_cfa_offset 64
 8248 0004 00AF     	 add r7,sp,#0
 8249              	.LCFI335:
 8250              	 .cfi_def_cfa_register 7
 8251 0006 F860     	 str r0,[r7,#12]
 8252 0008 B960     	 str r1,[r7,#8]
 8253 000a 7A60     	 str r2,[r7,#4]
5108:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
5109:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
5110:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5111:../Dave/Generated/FREERTOS/tasks.c **** 
5112:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTaskToNotify );
 8254              	 .loc 1 5112 0
 8255 000c FB68     	 ldr r3,[r7,#12]
 8256 000e 002B     	 cmp r3,#0
 8257 0010 09D1     	 bne .L554
 8258              	.LBB258:
 8259              	.LBB259:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 8260              	 .loc 2 197 0 discriminator 1
 8261              	
 8262 0012 4FF0FC03 	 mov r3,#252
 8263 0016 83F31188 	 msr basepri,r3
 8264 001a BFF36F8F 	 isb 
 8265 001e BFF34F8F 	 dsb 
 8266              	
 8267              	
 8268              	 .thumb
 8269 0022 BB62     	 str r3,[r7,#40]
 8270              	.L555:
 8271              	.LBE259:
 8272              	.LBE258:
 8273              	 .loc 1 5112 0 discriminator 1
 8274 0024 FEE7     	 b .L555
 8275              	.L554:
5113:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8276              	 .loc 1 5113 0
 8277 0026 BB68     	 ldr r3,[r7,#8]
 8278 0028 002B     	 cmp r3,#0
 8279 002a 09D0     	 beq .L556
 8280              	.LBB260:
 8281              	.LBB261:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 8282              	 .loc 2 197 0 discriminator 1
 8283              	
 8284 002c 4FF0FC03 	 mov r3,#252
 8285 0030 83F31188 	 msr basepri,r3
 8286 0034 BFF36F8F 	 isb 
 8287 0038 BFF34F8F 	 dsb 
 8288              	
 8289              	
 8290              	 .thumb
 8291 003c 7B62     	 str r3,[r7,#36]
 8292              	.L557:
 8293              	.LBE261:
 8294              	.LBE260:
 8295              	 .loc 1 5113 0 discriminator 2
 8296 003e FEE7     	 b .L557
 8297              	.L556:
5114:../Dave/Generated/FREERTOS/tasks.c **** 
5115:../Dave/Generated/FREERTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5116:../Dave/Generated/FREERTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5117:../Dave/Generated/FREERTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5118:../Dave/Generated/FREERTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5119:../Dave/Generated/FREERTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5120:../Dave/Generated/FREERTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
5121:../Dave/Generated/FREERTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5122:../Dave/Generated/FREERTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5123:../Dave/Generated/FREERTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
5124:../Dave/Generated/FREERTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5125:../Dave/Generated/FREERTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5126:../Dave/Generated/FREERTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5127:../Dave/Generated/FREERTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5128:../Dave/Generated/FREERTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5129:../Dave/Generated/FREERTOS/tasks.c ****          * provided on the following link:
5130:../Dave/Generated/FREERTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5131:../Dave/Generated/FREERTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8298              	 .loc 1 5131 0
 8299 0040 FFF7FEFF 	 bl vPortValidateInterruptPriority
5132:../Dave/Generated/FREERTOS/tasks.c **** 
5133:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = xTaskToNotify;
 8300              	 .loc 1 5133 0
 8301 0044 FB68     	 ldr r3,[r7,#12]
 8302 0046 7B63     	 str r3,[r7,#52]
 8303              	.LBB262:
 8304              	.LBB263:
 213:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 8305              	 .loc 2 213 0
 8306              	
 8307 0048 EFF31182 	 mrs r2,basepri
 8308 004c 4FF0FC03 	 mov r3,#252
 8309 0050 83F31188 	 msr basepri,r3
 8310 0054 BFF36F8F 	 isb 
 8311 0058 BFF34F8F 	 dsb 
 8312              	
 8313              	
 8314              	 .thumb
 8315 005c 3A62     	 str r2,[r7,#32]
 8316 005e FB61     	 str r3,[r7,#28]
 225:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 8317              	 .loc 2 225 0
 8318 0060 3B6A     	 ldr r3,[r7,#32]
 8319              	.LBE263:
 8320              	.LBE262:
5134:../Dave/Generated/FREERTOS/tasks.c **** 
5135:../Dave/Generated/FREERTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8321              	 .loc 1 5135 0
 8322 0062 3B63     	 str r3,[r7,#48]
5136:../Dave/Generated/FREERTOS/tasks.c ****         {
5137:../Dave/Generated/FREERTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8323              	 .loc 1 5137 0
 8324 0064 7A6B     	 ldr r2,[r7,#52]
 8325 0066 BB68     	 ldr r3,[r7,#8]
 8326 0068 1344     	 add r3,r3,r2
 8327 006a 6833     	 adds r3,r3,#104
 8328 006c 1B79     	 ldrb r3,[r3,#4]
 8329 006e 87F82F30 	 strb r3,[r7,#47]
5138:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8330              	 .loc 1 5138 0
 8331 0072 7A6B     	 ldr r2,[r7,#52]
 8332 0074 BB68     	 ldr r3,[r7,#8]
 8333 0076 1344     	 add r3,r3,r2
 8334 0078 6833     	 adds r3,r3,#104
 8335 007a 0222     	 movs r2,#2
 8336 007c 1A71     	 strb r2,[r3,#4]
5139:../Dave/Generated/FREERTOS/tasks.c **** 
5140:../Dave/Generated/FREERTOS/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
5141:../Dave/Generated/FREERTOS/tasks.c ****              * semaphore. */
5142:../Dave/Generated/FREERTOS/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8337              	 .loc 1 5142 0
 8338 007e 7B6B     	 ldr r3,[r7,#52]
 8339 0080 BA68     	 ldr r2,[r7,#8]
 8340 0082 1A32     	 adds r2,r2,#26
 8341 0084 53F82230 	 ldr r3,[r3,r2,lsl#2]
 8342 0088 591C     	 adds r1,r3,#1
 8343 008a 7B6B     	 ldr r3,[r7,#52]
 8344 008c BA68     	 ldr r2,[r7,#8]
 8345 008e 1A32     	 adds r2,r2,#26
 8346 0090 43F82210 	 str r1,[r3,r2,lsl#2]
5143:../Dave/Generated/FREERTOS/tasks.c **** 
5144:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5145:../Dave/Generated/FREERTOS/tasks.c **** 
5146:../Dave/Generated/FREERTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5147:../Dave/Generated/FREERTOS/tasks.c ****              * notification then unblock it now. */
5148:../Dave/Generated/FREERTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8347              	 .loc 1 5148 0
 8348 0094 97F82F30 	 ldrb r3,[r7,#47]
 8349 0098 012B     	 cmp r3,#1
 8350 009a 46D1     	 bne .L559
5149:../Dave/Generated/FREERTOS/tasks.c ****             {
5150:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task should not have been on an event list. */
5151:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8351              	 .loc 1 5151 0
 8352 009c 7B6B     	 ldr r3,[r7,#52]
 8353 009e 9B6A     	 ldr r3,[r3,#40]
 8354 00a0 002B     	 cmp r3,#0
 8355 00a2 09D0     	 beq .L560
 8356              	.LBB264:
 8357              	.LBB265:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 8358              	 .loc 2 197 0 discriminator 1
 8359              	
 8360 00a4 4FF0FC03 	 mov r3,#252
 8361 00a8 83F31188 	 msr basepri,r3
 8362 00ac BFF36F8F 	 isb 
 8363 00b0 BFF34F8F 	 dsb 
 8364              	
 8365              	
 8366              	 .thumb
 8367 00b4 BB61     	 str r3,[r7,#24]
 8368              	.L561:
 8369              	.LBE265:
 8370              	.LBE264:
 8371              	 .loc 1 5151 0 discriminator 3
 8372 00b6 FEE7     	 b .L561
 8373              	.L560:
5152:../Dave/Generated/FREERTOS/tasks.c **** 
5153:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8374              	 .loc 1 5153 0
 8375 00b8 204B     	 ldr r3,.L565
 8376 00ba 1B68     	 ldr r3,[r3]
 8377 00bc 002B     	 cmp r3,#0
 8378 00be 1ED1     	 bne .L562
5154:../Dave/Generated/FREERTOS/tasks.c ****                 {
5155:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8379              	 .loc 1 5155 0
 8380 00c0 7B6B     	 ldr r3,[r7,#52]
 8381 00c2 0433     	 adds r3,r3,#4
 8382 00c4 1846     	 mov r0,r3
 8383 00c6 FFF7FEFF 	 bl uxListRemove
5156:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8384              	 .loc 1 5156 0
 8385 00ca 7B6B     	 ldr r3,[r7,#52]
 8386 00cc DB6A     	 ldr r3,[r3,#44]
 8387 00ce 1A46     	 mov r2,r3
 8388 00d0 0123     	 movs r3,#1
 8389 00d2 03FA02F2 	 lsl r2,r3,r2
 8390 00d6 1A4B     	 ldr r3,.L565+4
 8391 00d8 1B68     	 ldr r3,[r3]
 8392 00da 1343     	 orrs r3,r3,r2
 8393 00dc 184A     	 ldr r2,.L565+4
 8394 00de 1360     	 str r3,[r2]
 8395 00e0 7B6B     	 ldr r3,[r7,#52]
 8396 00e2 DA6A     	 ldr r2,[r3,#44]
 8397 00e4 1346     	 mov r3,r2
 8398 00e6 9B00     	 lsls r3,r3,#2
 8399 00e8 1344     	 add r3,r3,r2
 8400 00ea 9B00     	 lsls r3,r3,#2
 8401 00ec 154A     	 ldr r2,.L565+8
 8402 00ee 1A44     	 add r2,r2,r3
 8403 00f0 7B6B     	 ldr r3,[r7,#52]
 8404 00f2 0433     	 adds r3,r3,#4
 8405 00f4 1046     	 mov r0,r2
 8406 00f6 1946     	 mov r1,r3
 8407 00f8 FFF7FEFF 	 bl vListInsertEnd
 8408 00fc 05E0     	 b .L563
 8409              	.L562:
5157:../Dave/Generated/FREERTOS/tasks.c ****                 }
5158:../Dave/Generated/FREERTOS/tasks.c ****                 else
5159:../Dave/Generated/FREERTOS/tasks.c ****                 {
5160:../Dave/Generated/FREERTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5161:../Dave/Generated/FREERTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5162:../Dave/Generated/FREERTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8410              	 .loc 1 5162 0
 8411 00fe 7B6B     	 ldr r3,[r7,#52]
 8412 0100 1833     	 adds r3,r3,#24
 8413 0102 1148     	 ldr r0,.L565+12
 8414 0104 1946     	 mov r1,r3
 8415 0106 FFF7FEFF 	 bl vListInsertEnd
 8416              	.L563:
5163:../Dave/Generated/FREERTOS/tasks.c ****                 }
5164:../Dave/Generated/FREERTOS/tasks.c **** 
5165:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8417              	 .loc 1 5165 0
 8418 010a 7B6B     	 ldr r3,[r7,#52]
 8419 010c DA6A     	 ldr r2,[r3,#44]
 8420 010e 0F4B     	 ldr r3,.L565+16
 8421 0110 1B68     	 ldr r3,[r3]
 8422 0112 DB6A     	 ldr r3,[r3,#44]
 8423 0114 9A42     	 cmp r2,r3
 8424 0116 08D9     	 bls .L559
5166:../Dave/Generated/FREERTOS/tasks.c ****                 {
5167:../Dave/Generated/FREERTOS/tasks.c ****                     /* The notified task has a priority above the currently
5168:../Dave/Generated/FREERTOS/tasks.c ****                      * executing task so a yield is required. */
5169:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
 8425              	 .loc 1 5169 0
 8426 0118 7B68     	 ldr r3,[r7,#4]
 8427 011a 002B     	 cmp r3,#0
 8428 011c 02D0     	 beq .L564
5170:../Dave/Generated/FREERTOS/tasks.c ****                     {
5171:../Dave/Generated/FREERTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
 8429              	 .loc 1 5171 0
 8430 011e 7B68     	 ldr r3,[r7,#4]
 8431 0120 0122     	 movs r2,#1
 8432 0122 1A60     	 str r2,[r3]
 8433              	.L564:
5172:../Dave/Generated/FREERTOS/tasks.c ****                     }
5173:../Dave/Generated/FREERTOS/tasks.c **** 
5174:../Dave/Generated/FREERTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5175:../Dave/Generated/FREERTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5176:../Dave/Generated/FREERTOS/tasks.c ****                      * safe FreeRTOS function. */
5177:../Dave/Generated/FREERTOS/tasks.c ****                     xYieldPending = pdTRUE;
 8434              	 .loc 1 5177 0
 8435 0124 0A4B     	 ldr r3,.L565+20
 8436 0126 0122     	 movs r2,#1
 8437 0128 1A60     	 str r2,[r3]
 8438              	.L559:
 8439 012a 3B6B     	 ldr r3,[r7,#48]
 8440 012c 7B61     	 str r3,[r7,#20]
 8441              	.LBB266:
 8442              	.LBB267:
 8443              	 .loc 2 231 0
 8444 012e 7B69     	 ldr r3,[r7,#20]
 8445              	
 8446 0130 83F31188 	 msr basepri,r3
 8447              	
 8448              	 .thumb
 8449              	.LBE267:
 8450              	.LBE266:
5178:../Dave/Generated/FREERTOS/tasks.c ****                 }
5179:../Dave/Generated/FREERTOS/tasks.c ****                 else
5180:../Dave/Generated/FREERTOS/tasks.c ****                 {
5181:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5182:../Dave/Generated/FREERTOS/tasks.c ****                 }
5183:../Dave/Generated/FREERTOS/tasks.c ****             }
5184:../Dave/Generated/FREERTOS/tasks.c ****         }
5185:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5186:../Dave/Generated/FREERTOS/tasks.c ****     }
 8451              	 .loc 1 5186 0
 8452 0134 3837     	 adds r7,r7,#56
 8453              	.LCFI336:
 8454              	 .cfi_def_cfa_offset 8
 8455 0136 BD46     	 mov sp,r7
 8456              	.LCFI337:
 8457              	 .cfi_def_cfa_register 13
 8458              	 
 8459 0138 80BD     	 pop {r7,pc}
 8460              	.L566:
 8461 013a 00BF     	 .align 2
 8462              	.L565:
 8463 013c 00000000 	 .word uxSchedulerSuspended
 8464 0140 00000000 	 .word uxTopReadyPriority
 8465 0144 00000000 	 .word pxReadyTasksLists
 8466 0148 00000000 	 .word xPendingReadyList
 8467 014c 00000000 	 .word pxCurrentTCB
 8468 0150 00000000 	 .word xYieldPending
 8469              	 .cfi_endproc
 8470              	.LFE203:
 8472              	 .section .text.xTaskGenericNotifyStateClear,"ax",%progbits
 8473              	 .align 2
 8474              	 .global xTaskGenericNotifyStateClear
 8475              	 .thumb
 8476              	 .thumb_func
 8478              	xTaskGenericNotifyStateClear:
 8479              	.LFB204:
5187:../Dave/Generated/FREERTOS/tasks.c **** 
5188:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5189:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5190:../Dave/Generated/FREERTOS/tasks.c **** 
5191:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5192:../Dave/Generated/FREERTOS/tasks.c **** 
5193:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5194:../Dave/Generated/FREERTOS/tasks.c ****                                              UBaseType_t uxIndexToClear )
5195:../Dave/Generated/FREERTOS/tasks.c ****     {
 8480              	 .loc 1 5195 0
 8481              	 .cfi_startproc
 8482              	 
 8483              	 
 8484 0000 80B5     	 push {r7,lr}
 8485              	.LCFI338:
 8486              	 .cfi_def_cfa_offset 8
 8487              	 .cfi_offset 7,-8
 8488              	 .cfi_offset 14,-4
 8489 0002 86B0     	 sub sp,sp,#24
 8490              	.LCFI339:
 8491              	 .cfi_def_cfa_offset 32
 8492 0004 00AF     	 add r7,sp,#0
 8493              	.LCFI340:
 8494              	 .cfi_def_cfa_register 7
 8495 0006 7860     	 str r0,[r7,#4]
 8496 0008 3960     	 str r1,[r7]
5196:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
5197:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
5198:../Dave/Generated/FREERTOS/tasks.c **** 
5199:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8497              	 .loc 1 5199 0
 8498 000a 3B68     	 ldr r3,[r7]
 8499 000c 002B     	 cmp r3,#0
 8500 000e 09D0     	 beq .L568
 8501              	.LBB268:
 8502              	.LBB269:
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 8503              	 .loc 2 197 0 discriminator 1
 8504              	
 8505 0010 4FF0FC03 	 mov r3,#252
 8506 0014 83F31188 	 msr basepri,r3
 8507 0018 BFF36F8F 	 isb 
 8508 001c BFF34F8F 	 dsb 
 8509              	
 8510              	
 8511              	 .thumb
 8512 0020 FB60     	 str r3,[r7,#12]
 8513              	.L569:
 8514              	.LBE269:
 8515              	.LBE268:
 8516              	 .loc 1 5199 0 discriminator 1
 8517 0022 FEE7     	 b .L569
 8518              	.L568:
5200:../Dave/Generated/FREERTOS/tasks.c **** 
5201:../Dave/Generated/FREERTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5202:../Dave/Generated/FREERTOS/tasks.c ****          * its notification state cleared. */
5203:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 8519              	 .loc 1 5203 0
 8520 0024 7B68     	 ldr r3,[r7,#4]
 8521 0026 002B     	 cmp r3,#0
 8522 0028 02D1     	 bne .L570
 8523              	 .loc 1 5203 0 is_stmt 0 discriminator 1
 8524 002a 104B     	 ldr r3,.L575
 8525 002c 1B68     	 ldr r3,[r3]
 8526 002e 00E0     	 b .L571
 8527              	.L570:
 8528              	 .loc 1 5203 0 discriminator 2
 8529 0030 7B68     	 ldr r3,[r7,#4]
 8530              	.L571:
 8531              	 .loc 1 5203 0 discriminator 4
 8532 0032 3B61     	 str r3,[r7,#16]
5204:../Dave/Generated/FREERTOS/tasks.c **** 
5205:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 8533              	 .loc 1 5205 0 is_stmt 1 discriminator 4
 8534 0034 FFF7FEFF 	 bl vPortEnterCritical
5206:../Dave/Generated/FREERTOS/tasks.c ****         {
5207:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8535              	 .loc 1 5207 0 discriminator 4
 8536 0038 3A69     	 ldr r2,[r7,#16]
 8537 003a 3B68     	 ldr r3,[r7]
 8538 003c 1344     	 add r3,r3,r2
 8539 003e 6833     	 adds r3,r3,#104
 8540 0040 1B79     	 ldrb r3,[r3,#4]
 8541 0042 DBB2     	 uxtb r3,r3
 8542 0044 022B     	 cmp r3,#2
 8543 0046 08D1     	 bne .L572
5208:../Dave/Generated/FREERTOS/tasks.c ****             {
5209:../Dave/Generated/FREERTOS/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 8544              	 .loc 1 5209 0
 8545 0048 3A69     	 ldr r2,[r7,#16]
 8546 004a 3B68     	 ldr r3,[r7]
 8547 004c 1344     	 add r3,r3,r2
 8548 004e 6833     	 adds r3,r3,#104
 8549 0050 0022     	 movs r2,#0
 8550 0052 1A71     	 strb r2,[r3,#4]
5210:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdPASS;
 8551              	 .loc 1 5210 0
 8552 0054 0123     	 movs r3,#1
 8553 0056 7B61     	 str r3,[r7,#20]
 8554 0058 01E0     	 b .L573
 8555              	.L572:
5211:../Dave/Generated/FREERTOS/tasks.c ****             }
5212:../Dave/Generated/FREERTOS/tasks.c ****             else
5213:../Dave/Generated/FREERTOS/tasks.c ****             {
5214:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdFAIL;
 8556              	 .loc 1 5214 0
 8557 005a 0023     	 movs r3,#0
 8558 005c 7B61     	 str r3,[r7,#20]
 8559              	.L573:
5215:../Dave/Generated/FREERTOS/tasks.c ****             }
5216:../Dave/Generated/FREERTOS/tasks.c ****         }
5217:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 8560              	 .loc 1 5217 0
 8561 005e FFF7FEFF 	 bl vPortExitCritical
5218:../Dave/Generated/FREERTOS/tasks.c **** 
5219:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 8562              	 .loc 1 5219 0
 8563 0062 7B69     	 ldr r3,[r7,#20]
5220:../Dave/Generated/FREERTOS/tasks.c ****     }
 8564              	 .loc 1 5220 0
 8565 0064 1846     	 mov r0,r3
 8566 0066 1837     	 adds r7,r7,#24
 8567              	.LCFI341:
 8568              	 .cfi_def_cfa_offset 8
 8569 0068 BD46     	 mov sp,r7
 8570              	.LCFI342:
 8571              	 .cfi_def_cfa_register 13
 8572              	 
 8573 006a 80BD     	 pop {r7,pc}
 8574              	.L576:
 8575              	 .align 2
 8576              	.L575:
 8577 006c 00000000 	 .word pxCurrentTCB
 8578              	 .cfi_endproc
 8579              	.LFE204:
 8581              	 .section .text.ulTaskGenericNotifyValueClear,"ax",%progbits
 8582              	 .align 2
 8583              	 .global ulTaskGenericNotifyValueClear
 8584              	 .thumb
 8585              	 .thumb_func
 8587              	ulTaskGenericNotifyValueClear:
 8588              	.LFB205:
5221:../Dave/Generated/FREERTOS/tasks.c **** 
5222:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5223:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5224:../Dave/Generated/FREERTOS/tasks.c **** 
5225:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5226:../Dave/Generated/FREERTOS/tasks.c **** 
5227:../Dave/Generated/FREERTOS/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5228:../Dave/Generated/FREERTOS/tasks.c ****                                             UBaseType_t uxIndexToClear,
5229:../Dave/Generated/FREERTOS/tasks.c ****                                             uint32_t ulBitsToClear )
5230:../Dave/Generated/FREERTOS/tasks.c ****     {
 8589              	 .loc 1 5230 0
 8590              	 .cfi_startproc
 8591              	 
 8592              	 
 8593 0000 80B5     	 push {r7,lr}
 8594              	.LCFI343:
 8595              	 .cfi_def_cfa_offset 8
 8596              	 .cfi_offset 7,-8
 8597              	 .cfi_offset 14,-4
 8598 0002 86B0     	 sub sp,sp,#24
 8599              	.LCFI344:
 8600              	 .cfi_def_cfa_offset 32
 8601 0004 00AF     	 add r7,sp,#0
 8602              	.LCFI345:
 8603              	 .cfi_def_cfa_register 7
 8604 0006 F860     	 str r0,[r7,#12]
 8605 0008 B960     	 str r1,[r7,#8]
 8606 000a 7A60     	 str r2,[r7,#4]
5231:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
5232:../Dave/Generated/FREERTOS/tasks.c ****         uint32_t ulReturn;
5233:../Dave/Generated/FREERTOS/tasks.c **** 
5234:../Dave/Generated/FREERTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5235:../Dave/Generated/FREERTOS/tasks.c ****          * its notification state cleared. */
5236:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 8607              	 .loc 1 5236 0
 8608 000c FB68     	 ldr r3,[r7,#12]
 8609 000e 002B     	 cmp r3,#0
 8610 0010 02D1     	 bne .L578
 8611              	 .loc 1 5236 0 is_stmt 0 discriminator 1
 8612 0012 114B     	 ldr r3,.L581
 8613 0014 1B68     	 ldr r3,[r3]
 8614 0016 00E0     	 b .L579
 8615              	.L578:
 8616              	 .loc 1 5236 0 discriminator 2
 8617 0018 FB68     	 ldr r3,[r7,#12]
 8618              	.L579:
 8619              	 .loc 1 5236 0 discriminator 4
 8620 001a 7B61     	 str r3,[r7,#20]
5237:../Dave/Generated/FREERTOS/tasks.c **** 
5238:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 8621              	 .loc 1 5238 0 is_stmt 1 discriminator 4
 8622 001c FFF7FEFF 	 bl vPortEnterCritical
5239:../Dave/Generated/FREERTOS/tasks.c ****         {
5240:../Dave/Generated/FREERTOS/tasks.c ****             /* Return the notification as it was before the bits were cleared,
5241:../Dave/Generated/FREERTOS/tasks.c ****              * then clear the bit mask. */
5242:../Dave/Generated/FREERTOS/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 8623              	 .loc 1 5242 0 discriminator 4
 8624 0020 7B69     	 ldr r3,[r7,#20]
 8625 0022 BA68     	 ldr r2,[r7,#8]
 8626 0024 1A32     	 adds r2,r2,#26
 8627 0026 53F82230 	 ldr r3,[r3,r2,lsl#2]
 8628 002a 3B61     	 str r3,[r7,#16]
5243:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8629              	 .loc 1 5243 0 discriminator 4
 8630 002c 7B69     	 ldr r3,[r7,#20]
 8631 002e BA68     	 ldr r2,[r7,#8]
 8632 0030 1A32     	 adds r2,r2,#26
 8633 0032 53F82220 	 ldr r2,[r3,r2,lsl#2]
 8634 0036 7B68     	 ldr r3,[r7,#4]
 8635 0038 DB43     	 mvns r3,r3
 8636 003a 02EA0301 	 and r1,r2,r3
 8637 003e 7B69     	 ldr r3,[r7,#20]
 8638 0040 BA68     	 ldr r2,[r7,#8]
 8639 0042 1A32     	 adds r2,r2,#26
 8640 0044 43F82210 	 str r1,[r3,r2,lsl#2]
5244:../Dave/Generated/FREERTOS/tasks.c ****         }
5245:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 8641              	 .loc 1 5245 0 discriminator 4
 8642 0048 FFF7FEFF 	 bl vPortExitCritical
5246:../Dave/Generated/FREERTOS/tasks.c **** 
5247:../Dave/Generated/FREERTOS/tasks.c ****         return ulReturn;
 8643              	 .loc 1 5247 0 discriminator 4
 8644 004c 3B69     	 ldr r3,[r7,#16]
5248:../Dave/Generated/FREERTOS/tasks.c ****     }
 8645              	 .loc 1 5248 0 discriminator 4
 8646 004e 1846     	 mov r0,r3
 8647 0050 1837     	 adds r7,r7,#24
 8648              	.LCFI346:
 8649              	 .cfi_def_cfa_offset 8
 8650 0052 BD46     	 mov sp,r7
 8651              	.LCFI347:
 8652              	 .cfi_def_cfa_register 13
 8653              	 
 8654 0054 80BD     	 pop {r7,pc}
 8655              	.L582:
 8656 0056 00BF     	 .align 2
 8657              	.L581:
 8658 0058 00000000 	 .word pxCurrentTCB
 8659              	 .cfi_endproc
 8660              	.LFE205:
 8662              	 .section .text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 8663              	 .align 2
 8664              	 .thumb
 8665              	 .thumb_func
 8667              	prvAddCurrentTaskToDelayedList:
 8668              	.LFB206:
5249:../Dave/Generated/FREERTOS/tasks.c **** 
5250:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5251:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5252:../Dave/Generated/FREERTOS/tasks.c **** 
5253:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5254:../Dave/Generated/FREERTOS/tasks.c **** 
5255:../Dave/Generated/FREERTOS/tasks.c ****     uint32_t ulTaskGetIdleRunTimeCounter( void )
5256:../Dave/Generated/FREERTOS/tasks.c ****     {
5257:../Dave/Generated/FREERTOS/tasks.c ****         return xIdleTaskHandle->ulRunTimeCounter;
5258:../Dave/Generated/FREERTOS/tasks.c ****     }
5259:../Dave/Generated/FREERTOS/tasks.c **** 
5260:../Dave/Generated/FREERTOS/tasks.c **** #endif
5261:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5262:../Dave/Generated/FREERTOS/tasks.c **** 
5263:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5264:../Dave/Generated/FREERTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
5265:../Dave/Generated/FREERTOS/tasks.c **** {
 8669              	 .loc 1 5265 0
 8670              	 .cfi_startproc
 8671              	 
 8672              	 
 8673 0000 80B5     	 push {r7,lr}
 8674              	.LCFI348:
 8675              	 .cfi_def_cfa_offset 8
 8676              	 .cfi_offset 7,-8
 8677              	 .cfi_offset 14,-4
 8678 0002 84B0     	 sub sp,sp,#16
 8679              	.LCFI349:
 8680              	 .cfi_def_cfa_offset 24
 8681 0004 00AF     	 add r7,sp,#0
 8682              	.LCFI350:
 8683              	 .cfi_def_cfa_register 7
 8684 0006 7860     	 str r0,[r7,#4]
 8685 0008 3960     	 str r1,[r7]
5266:../Dave/Generated/FREERTOS/tasks.c ****     TickType_t xTimeToWake;
5267:../Dave/Generated/FREERTOS/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 8686              	 .loc 1 5267 0
 8687 000a 2B4B     	 ldr r3,.L588
 8688 000c 1B68     	 ldr r3,[r3]
 8689 000e FB60     	 str r3,[r7,#12]
5268:../Dave/Generated/FREERTOS/tasks.c **** 
5269:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
5270:../Dave/Generated/FREERTOS/tasks.c ****         {
5271:../Dave/Generated/FREERTOS/tasks.c ****             /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5272:../Dave/Generated/FREERTOS/tasks.c ****              * reset to pdFALSE so it can be detected as having been set to pdTRUE
5273:../Dave/Generated/FREERTOS/tasks.c ****              * when the task leaves the Blocked state. */
5274:../Dave/Generated/FREERTOS/tasks.c ****             pxCurrentTCB->ucDelayAborted = pdFALSE;
 8690              	 .loc 1 5274 0
 8691 0010 2A4B     	 ldr r3,.L588+4
 8692 0012 1B68     	 ldr r3,[r3]
 8693 0014 0022     	 movs r2,#0
 8694 0016 83F86D20 	 strb r2,[r3,#109]
5275:../Dave/Generated/FREERTOS/tasks.c ****         }
5276:../Dave/Generated/FREERTOS/tasks.c ****     #endif
5277:../Dave/Generated/FREERTOS/tasks.c **** 
5278:../Dave/Generated/FREERTOS/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
5279:../Dave/Generated/FREERTOS/tasks.c ****      * as the same list item is used for both lists. */
5280:../Dave/Generated/FREERTOS/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8695              	 .loc 1 5280 0
 8696 001a 284B     	 ldr r3,.L588+4
 8697 001c 1B68     	 ldr r3,[r3]
 8698 001e 0433     	 adds r3,r3,#4
 8699 0020 1846     	 mov r0,r3
 8700 0022 FFF7FEFF 	 bl uxListRemove
 8701 0026 0346     	 mov r3,r0
 8702 0028 002B     	 cmp r3,#0
 8703 002a 0BD1     	 bne .L584
5281:../Dave/Generated/FREERTOS/tasks.c ****     {
5282:../Dave/Generated/FREERTOS/tasks.c ****         /* The current task must be in a ready list, so there is no need to
5283:../Dave/Generated/FREERTOS/tasks.c ****          * check, and the port reset macro can be called directly. */
5284:../Dave/Generated/FREERTOS/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
 8704              	 .loc 1 5284 0
 8705 002c 234B     	 ldr r3,.L588+4
 8706 002e 1B68     	 ldr r3,[r3]
 8707 0030 DB6A     	 ldr r3,[r3,#44]
 8708 0032 1A46     	 mov r2,r3
 8709 0034 0123     	 movs r3,#1
 8710 0036 9340     	 lsls r3,r3,r2
 8711 0038 DA43     	 mvns r2,r3
 8712 003a 214B     	 ldr r3,.L588+8
 8713 003c 1B68     	 ldr r3,[r3]
 8714 003e 1340     	 ands r3,r3,r2
 8715 0040 1F4A     	 ldr r2,.L588+8
 8716 0042 1360     	 str r3,[r2]
 8717              	.L584:
5285:../Dave/Generated/FREERTOS/tasks.c ****     }
5286:../Dave/Generated/FREERTOS/tasks.c ****     else
5287:../Dave/Generated/FREERTOS/tasks.c ****     {
5288:../Dave/Generated/FREERTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
5289:../Dave/Generated/FREERTOS/tasks.c ****     }
5290:../Dave/Generated/FREERTOS/tasks.c **** 
5291:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
5292:../Dave/Generated/FREERTOS/tasks.c ****         {
5293:../Dave/Generated/FREERTOS/tasks.c ****             if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8718              	 .loc 1 5293 0
 8719 0044 7B68     	 ldr r3,[r7,#4]
 8720 0046 B3F1FF3F 	 cmp r3,#-1
 8721 004a 0AD1     	 bne .L585
 8722              	 .loc 1 5293 0 is_stmt 0 discriminator 1
 8723 004c 3B68     	 ldr r3,[r7]
 8724 004e 002B     	 cmp r3,#0
 8725 0050 07D0     	 beq .L585
5294:../Dave/Generated/FREERTOS/tasks.c ****             {
5295:../Dave/Generated/FREERTOS/tasks.c ****                 /* Add the task to the suspended task list instead of a delayed task
5296:../Dave/Generated/FREERTOS/tasks.c ****                  * list to ensure it is not woken by a timing event.  It will block
5297:../Dave/Generated/FREERTOS/tasks.c ****                  * indefinitely. */
5298:../Dave/Generated/FREERTOS/tasks.c ****                 vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8726              	 .loc 1 5298 0 is_stmt 1
 8727 0052 1A4B     	 ldr r3,.L588+4
 8728 0054 1B68     	 ldr r3,[r3]
 8729 0056 0433     	 adds r3,r3,#4
 8730 0058 1A48     	 ldr r0,.L588+12
 8731 005a 1946     	 mov r1,r3
 8732 005c FFF7FEFF 	 bl vListInsertEnd
 8733 0060 26E0     	 b .L583
 8734              	.L585:
5299:../Dave/Generated/FREERTOS/tasks.c ****             }
5300:../Dave/Generated/FREERTOS/tasks.c ****             else
5301:../Dave/Generated/FREERTOS/tasks.c ****             {
5302:../Dave/Generated/FREERTOS/tasks.c ****                 /* Calculate the time at which the task should be woken if the event
5303:../Dave/Generated/FREERTOS/tasks.c ****                  * does not occur.  This may overflow but this doesn't matter, the
5304:../Dave/Generated/FREERTOS/tasks.c ****                  * kernel will manage it correctly. */
5305:../Dave/Generated/FREERTOS/tasks.c ****                 xTimeToWake = xConstTickCount + xTicksToWait;
 8735              	 .loc 1 5305 0
 8736 0062 FA68     	 ldr r2,[r7,#12]
 8737 0064 7B68     	 ldr r3,[r7,#4]
 8738 0066 1344     	 add r3,r3,r2
 8739 0068 BB60     	 str r3,[r7,#8]
5306:../Dave/Generated/FREERTOS/tasks.c **** 
5307:../Dave/Generated/FREERTOS/tasks.c ****                 /* The list item will be inserted in wake time order. */
5308:../Dave/Generated/FREERTOS/tasks.c ****                 listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8740              	 .loc 1 5308 0
 8741 006a 144B     	 ldr r3,.L588+4
 8742 006c 1B68     	 ldr r3,[r3]
 8743 006e BA68     	 ldr r2,[r7,#8]
 8744 0070 5A60     	 str r2,[r3,#4]
5309:../Dave/Generated/FREERTOS/tasks.c **** 
5310:../Dave/Generated/FREERTOS/tasks.c ****                 if( xTimeToWake < xConstTickCount )
 8745              	 .loc 1 5310 0
 8746 0072 BA68     	 ldr r2,[r7,#8]
 8747 0074 FB68     	 ldr r3,[r7,#12]
 8748 0076 9A42     	 cmp r2,r3
 8749 0078 09D2     	 bcs .L587
5311:../Dave/Generated/FREERTOS/tasks.c ****                 {
5312:../Dave/Generated/FREERTOS/tasks.c ****                     /* Wake time has overflowed.  Place this item in the overflow
5313:../Dave/Generated/FREERTOS/tasks.c ****                      * list. */
5314:../Dave/Generated/FREERTOS/tasks.c ****                     vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8750              	 .loc 1 5314 0
 8751 007a 134B     	 ldr r3,.L588+16
 8752 007c 1A68     	 ldr r2,[r3]
 8753 007e 0F4B     	 ldr r3,.L588+4
 8754 0080 1B68     	 ldr r3,[r3]
 8755 0082 0433     	 adds r3,r3,#4
 8756 0084 1046     	 mov r0,r2
 8757 0086 1946     	 mov r1,r3
 8758 0088 FFF7FEFF 	 bl vListInsert
 8759 008c 10E0     	 b .L583
 8760              	.L587:
5315:../Dave/Generated/FREERTOS/tasks.c ****                 }
5316:../Dave/Generated/FREERTOS/tasks.c ****                 else
5317:../Dave/Generated/FREERTOS/tasks.c ****                 {
5318:../Dave/Generated/FREERTOS/tasks.c ****                     /* The wake time has not overflowed, so the current block list
5319:../Dave/Generated/FREERTOS/tasks.c ****                      * is used. */
5320:../Dave/Generated/FREERTOS/tasks.c ****                     vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8761              	 .loc 1 5320 0
 8762 008e 0F4B     	 ldr r3,.L588+20
 8763 0090 1A68     	 ldr r2,[r3]
 8764 0092 0A4B     	 ldr r3,.L588+4
 8765 0094 1B68     	 ldr r3,[r3]
 8766 0096 0433     	 adds r3,r3,#4
 8767 0098 1046     	 mov r0,r2
 8768 009a 1946     	 mov r1,r3
 8769 009c FFF7FEFF 	 bl vListInsert
5321:../Dave/Generated/FREERTOS/tasks.c **** 
5322:../Dave/Generated/FREERTOS/tasks.c ****                     /* If the task entering the blocked state was placed at the
5323:../Dave/Generated/FREERTOS/tasks.c ****                      * head of the list of blocked tasks then xNextTaskUnblockTime
5324:../Dave/Generated/FREERTOS/tasks.c ****                      * needs to be updated too. */
5325:../Dave/Generated/FREERTOS/tasks.c ****                     if( xTimeToWake < xNextTaskUnblockTime )
 8770              	 .loc 1 5325 0
 8771 00a0 0B4B     	 ldr r3,.L588+24
 8772 00a2 1B68     	 ldr r3,[r3]
 8773 00a4 BA68     	 ldr r2,[r7,#8]
 8774 00a6 9A42     	 cmp r2,r3
 8775 00a8 02D2     	 bcs .L583
5326:../Dave/Generated/FREERTOS/tasks.c ****                     {
5327:../Dave/Generated/FREERTOS/tasks.c ****                         xNextTaskUnblockTime = xTimeToWake;
 8776              	 .loc 1 5327 0
 8777 00aa 094A     	 ldr r2,.L588+24
 8778 00ac BB68     	 ldr r3,[r7,#8]
 8779 00ae 1360     	 str r3,[r2]
 8780              	.L583:
5328:../Dave/Generated/FREERTOS/tasks.c ****                     }
5329:../Dave/Generated/FREERTOS/tasks.c ****                     else
5330:../Dave/Generated/FREERTOS/tasks.c ****                     {
5331:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
5332:../Dave/Generated/FREERTOS/tasks.c ****                     }
5333:../Dave/Generated/FREERTOS/tasks.c ****                 }
5334:../Dave/Generated/FREERTOS/tasks.c ****             }
5335:../Dave/Generated/FREERTOS/tasks.c ****         }
5336:../Dave/Generated/FREERTOS/tasks.c ****     #else /* INCLUDE_vTaskSuspend */
5337:../Dave/Generated/FREERTOS/tasks.c ****         {
5338:../Dave/Generated/FREERTOS/tasks.c ****             /* Calculate the time at which the task should be woken if the event
5339:../Dave/Generated/FREERTOS/tasks.c ****              * does not occur.  This may overflow but this doesn't matter, the kernel
5340:../Dave/Generated/FREERTOS/tasks.c ****              * will manage it correctly. */
5341:../Dave/Generated/FREERTOS/tasks.c ****             xTimeToWake = xConstTickCount + xTicksToWait;
5342:../Dave/Generated/FREERTOS/tasks.c **** 
5343:../Dave/Generated/FREERTOS/tasks.c ****             /* The list item will be inserted in wake time order. */
5344:../Dave/Generated/FREERTOS/tasks.c ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5345:../Dave/Generated/FREERTOS/tasks.c **** 
5346:../Dave/Generated/FREERTOS/tasks.c ****             if( xTimeToWake < xConstTickCount )
5347:../Dave/Generated/FREERTOS/tasks.c ****             {
5348:../Dave/Generated/FREERTOS/tasks.c ****                 /* Wake time has overflowed.  Place this item in the overflow list. */
5349:../Dave/Generated/FREERTOS/tasks.c ****                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5350:../Dave/Generated/FREERTOS/tasks.c ****             }
5351:../Dave/Generated/FREERTOS/tasks.c ****             else
5352:../Dave/Generated/FREERTOS/tasks.c ****             {
5353:../Dave/Generated/FREERTOS/tasks.c ****                 /* The wake time has not overflowed, so the current block list is used. */
5354:../Dave/Generated/FREERTOS/tasks.c ****                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5355:../Dave/Generated/FREERTOS/tasks.c **** 
5356:../Dave/Generated/FREERTOS/tasks.c ****                 /* If the task entering the blocked state was placed at the head of the
5357:../Dave/Generated/FREERTOS/tasks.c ****                  * list of blocked tasks then xNextTaskUnblockTime needs to be updated
5358:../Dave/Generated/FREERTOS/tasks.c ****                  * too. */
5359:../Dave/Generated/FREERTOS/tasks.c ****                 if( xTimeToWake < xNextTaskUnblockTime )
5360:../Dave/Generated/FREERTOS/tasks.c ****                 {
5361:../Dave/Generated/FREERTOS/tasks.c ****                     xNextTaskUnblockTime = xTimeToWake;
5362:../Dave/Generated/FREERTOS/tasks.c ****                 }
5363:../Dave/Generated/FREERTOS/tasks.c ****                 else
5364:../Dave/Generated/FREERTOS/tasks.c ****                 {
5365:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5366:../Dave/Generated/FREERTOS/tasks.c ****                 }
5367:../Dave/Generated/FREERTOS/tasks.c ****             }
5368:../Dave/Generated/FREERTOS/tasks.c **** 
5369:../Dave/Generated/FREERTOS/tasks.c ****             /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5370:../Dave/Generated/FREERTOS/tasks.c ****             ( void ) xCanBlockIndefinitely;
5371:../Dave/Generated/FREERTOS/tasks.c ****         }
5372:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
5373:../Dave/Generated/FREERTOS/tasks.c **** }
 8781              	 .loc 1 5373 0
 8782 00b0 1037     	 adds r7,r7,#16
 8783              	.LCFI351:
 8784              	 .cfi_def_cfa_offset 8
 8785 00b2 BD46     	 mov sp,r7
 8786              	.LCFI352:
 8787              	 .cfi_def_cfa_register 13
 8788              	 
 8789 00b4 80BD     	 pop {r7,pc}
 8790              	.L589:
 8791 00b6 00BF     	 .align 2
 8792              	.L588:
 8793 00b8 00000000 	 .word xTickCount
 8794 00bc 00000000 	 .word pxCurrentTCB
 8795 00c0 00000000 	 .word uxTopReadyPriority
 8796 00c4 00000000 	 .word xSuspendedTaskList
 8797 00c8 00000000 	 .word pxOverflowDelayedTaskList
 8798 00cc 00000000 	 .word pxDelayedTaskList
 8799 00d0 00000000 	 .word xNextTaskUnblockTime
 8800              	 .cfi_endproc
 8801              	.LFE206:
 8803              	 .text
 8804              	.Letext0:
 8805              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 8806              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 8807              	 .file 5 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 8808              	 .file 6 "../Dave/Generated/FREERTOS/projdefs.h"
 8809              	 .file 7 "../Dave/Generated/FREERTOS/list.h"
 8810              	 .file 8 "../Dave/Generated/FREERTOS/task.h"
 8811              	 .file 9 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Libraries/CMSIS/Include/cmsis_gcc.h"
 8812              	 .file 10 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/06_XMC/ADC_RTOS/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
    {standard input}:24     .bss.pxCurrentTCB:00000000 pxCurrentTCB
    {standard input}:21     .bss.pxCurrentTCB:00000000 $d
    {standard input}:27     .bss.pxReadyTasksLists:00000000 $d
    {standard input}:30     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
    {standard input}:33     .bss.xDelayedTaskList1:00000000 $d
    {standard input}:36     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
    {standard input}:39     .bss.xDelayedTaskList2:00000000 $d
    {standard input}:42     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
    {standard input}:45     .bss.pxDelayedTaskList:00000000 $d
    {standard input}:48     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
    {standard input}:51     .bss.pxOverflowDelayedTaskList:00000000 $d
    {standard input}:54     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
    {standard input}:57     .bss.xPendingReadyList:00000000 $d
    {standard input}:60     .bss.xPendingReadyList:00000000 xPendingReadyList
    {standard input}:63     .bss.xTasksWaitingTermination:00000000 $d
    {standard input}:66     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
    {standard input}:69     .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
    {standard input}:72     .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
    {standard input}:75     .bss.xSuspendedTaskList:00000000 $d
    {standard input}:78     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
    {standard input}:81     .bss.uxCurrentNumberOfTasks:00000000 $d
    {standard input}:84     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
    {standard input}:87     .bss.xTickCount:00000000 $d
    {standard input}:90     .bss.xTickCount:00000000 xTickCount
    {standard input}:93     .bss.uxTopReadyPriority:00000000 $d
    {standard input}:96     .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
    {standard input}:99     .bss.xSchedulerRunning:00000000 $d
    {standard input}:102    .bss.xSchedulerRunning:00000000 xSchedulerRunning
    {standard input}:105    .bss.xPendedTicks:00000000 $d
    {standard input}:108    .bss.xPendedTicks:00000000 xPendedTicks
    {standard input}:111    .bss.xYieldPending:00000000 $d
    {standard input}:114    .bss.xYieldPending:00000000 xYieldPending
    {standard input}:117    .bss.xNumOfOverflows:00000000 $d
    {standard input}:120    .bss.xNumOfOverflows:00000000 xNumOfOverflows
    {standard input}:123    .bss.uxTaskNumber:00000000 $d
    {standard input}:126    .bss.uxTaskNumber:00000000 uxTaskNumber
    {standard input}:129    .bss.xNextTaskUnblockTime:00000000 $d
    {standard input}:132    .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
    {standard input}:135    .bss.xIdleTaskHandle:00000000 $d
    {standard input}:138    .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
    {standard input}:145    .data.uxTopUsedPriority:00000000 uxTopUsedPriority
    {standard input}:142    .data.uxTopUsedPriority:00000000 $d
    {standard input}:148    .bss.uxSchedulerSuspended:00000000 $d
    {standard input}:151    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
    {standard input}:154    .text.xTaskCreate:00000000 $t
    {standard input}:159    .text.xTaskCreate:00000000 xTaskCreate
    {standard input}:267    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
    {standard input}:487    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
    {standard input}:263    .text.prvInitialiseNewTask:00000000 $t
    {standard input}:483    .text.prvAddNewTaskToReadyList:00000000 $t
    {standard input}:5483   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
    {standard input}:623    .text.prvAddNewTaskToReadyList:000000c4 $d
    {standard input}:634    .text.vTaskDelete:00000000 $t
    {standard input}:639    .text.vTaskDelete:00000000 vTaskDelete
    {standard input}:6076   .text.prvDeleteTCB:00000000 prvDeleteTCB
    {standard input}:6119   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
    {standard input}:815    .text.vTaskDelete:000000f4 $d
    {standard input}:829    .text.xTaskDelayUntil:00000000 $t
    {standard input}:834    .text.xTaskDelayUntil:00000000 xTaskDelayUntil
    {standard input}:2538   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
    {standard input}:8667   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
    {standard input}:2582   .text.xTaskResumeAll:00000000 xTaskResumeAll
    {standard input}:1025   .text.xTaskDelayUntil:000000ec $d
    {standard input}:1032   .text.vTaskDelay:00000000 $t
    {standard input}:1037   .text.vTaskDelay:00000000 vTaskDelay
    {standard input}:1123   .text.vTaskDelay:0000005c $d
    {standard input}:1129   .text.eTaskGetState:00000000 $t
    {standard input}:1134   .text.eTaskGetState:00000000 eTaskGetState
    {standard input}:1306   .text.eTaskGetState:000000dc $d
    {standard input}:1315   .text.uxTaskPriorityGet:00000000 $t
    {standard input}:1320   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
    {standard input}:1375   .text.uxTaskPriorityGet:00000030 $d
    {standard input}:1380   .text.uxTaskPriorityGetFromISR:00000000 $t
    {standard input}:1385   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
    {standard input}:1470   .text.uxTaskPriorityGetFromISR:00000054 $d
    {standard input}:1475   .text.vTaskPrioritySet:00000000 $t
    {standard input}:1480   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
    {standard input}:1707   .text.vTaskPrioritySet:00000144 $d
    {standard input}:1715   .text.vTaskSuspend:00000000 $t
    {standard input}:1720   .text.vTaskSuspend:00000000 vTaskSuspend
    {standard input}:4086   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
    {standard input}:1926   .text.vTaskSuspend:0000011c $d
    {standard input}:1938   .text.prvTaskIsTaskSuspended:00000000 $t
    {standard input}:1942   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
    {standard input}:2028   .text.prvTaskIsTaskSuspended:00000058 $d
    {standard input}:2034   .text.vTaskResume:00000000 $t
    {standard input}:2039   .text.vTaskResume:00000000 vTaskResume
    {standard input}:2164   .text.vTaskResume:000000ac $d
    {standard input}:2172   .text.xTaskResumeFromISR:00000000 $t
    {standard input}:2177   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
    {standard input}:2337   .text.xTaskResumeFromISR:000000d4 $d
    {standard input}:2347   .rodata:00000000 $d
    {standard input}:2351   .text.vTaskStartScheduler:00000000 $t
    {standard input}:2356   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
    {standard input}:2463   .text.vTaskStartScheduler:00000080 $d
    {standard input}:5252   .text.prvIdleTask:00000000 prvIdleTask
    {standard input}:2474   .text.vTaskEndScheduler:00000000 $t
    {standard input}:2479   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
    {standard input}:2528   .text.vTaskEndScheduler:00000028 $d
    {standard input}:2533   .text.vTaskSuspendAll:00000000 $t
    {standard input}:2572   .text.vTaskSuspendAll:00000018 $d
    {standard input}:2577   .text.xTaskResumeAll:00000000 $t
    {standard input}:3835   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
    {standard input}:2784   .text.xTaskResumeAll:00000118 $d
    {standard input}:2797   .text.xTaskGetTickCount:00000000 $t
    {standard input}:2802   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
    {standard input}:2842   .text.xTaskGetTickCount:0000001c $d
    {standard input}:2847   .text.xTaskGetTickCountFromISR:00000000 $t
    {standard input}:2852   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
    {standard input}:2893   .text.xTaskGetTickCountFromISR:00000020 $d
    {standard input}:2898   .text.uxTaskGetNumberOfTasks:00000000 $t
    {standard input}:2903   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
    {standard input}:2934   .text.uxTaskGetNumberOfTasks:00000014 $d
    {standard input}:2939   .text.pcTaskGetName:00000000 $t
    {standard input}:2944   .text.pcTaskGetName:00000000 pcTaskGetName
    {standard input}:3018   .text.pcTaskGetName:00000044 $d
    {standard input}:3023   .text.prvSearchForNameWithinSingleList:00000000 $t
    {standard input}:3027   .text.prvSearchForNameWithinSingleList:00000000 prvSearchForNameWithinSingleList
    {standard input}:3201   .text.xTaskGetHandle:00000000 $t
    {standard input}:3206   .text.xTaskGetHandle:00000000 xTaskGetHandle
    {standard input}:3343   .text.xTaskGetHandle:000000b4 $d
    {standard input}:3352   .text.uxTaskGetSystemState:00000000 $t
    {standard input}:3357   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
    {standard input}:5813   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
    {standard input}:3521   .text.uxTaskGetSystemState:00000108 $d
    {standard input}:3531   .text.xTaskGetIdleTaskHandle:00000000 $t
    {standard input}:3536   .text.xTaskGetIdleTaskHandle:00000000 xTaskGetIdleTaskHandle
    {standard input}:3596   .text.xTaskGetIdleTaskHandle:00000034 $d
    {standard input}:3601   .text.xTaskCatchUpTicks:00000000 $t
    {standard input}:3606   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
    {standard input}:3674   .text.xTaskCatchUpTicks:00000044 $d
    {standard input}:3680   .text.xTaskAbortDelay:00000000 $t
    {standard input}:3685   .text.xTaskAbortDelay:00000000 xTaskAbortDelay
    {standard input}:3822   .text.xTaskAbortDelay:000000c0 $d
    {standard input}:3830   .text.xTaskIncrementTick:00000000 $t
    {standard input}:4066   .text.xTaskIncrementTick:00000148 $d
    {standard input}:4081   .text.vTaskSwitchContext:00000000 $t
    {standard input}:4220   .text.vTaskSwitchContext:000000a0 $d
    {standard input}:4229   .text.vTaskPlaceOnEventList:00000000 $t
    {standard input}:4234   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
    {standard input}:4298   .text.vTaskPlaceOnEventList:00000040 $d
    {standard input}:4303   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
    {standard input}:4308   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
    {standard input}:4402   .text.vTaskPlaceOnUnorderedEventList:0000006c $d
    {standard input}:4408   .text.vTaskPlaceOnEventListRestricted:00000000 $t
    {standard input}:4413   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
    {standard input}:4486   .text.vTaskPlaceOnEventListRestricted:00000050 $d
    {standard input}:4491   .text.xTaskRemoveFromEventList:00000000 $t
    {standard input}:4496   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
    {standard input}:4625   .text.xTaskRemoveFromEventList:000000b0 $d
    {standard input}:4635   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
    {standard input}:4640   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
    {standard input}:4770   .text.vTaskRemoveFromUnorderedEventList:000000ac $d
    {standard input}:4779   .text.vTaskSetTimeOutState:00000000 $t
    {standard input}:4784   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
    {standard input}:4850   .text.vTaskSetTimeOutState:00000040 $d
    {standard input}:4856   .text.vTaskInternalSetTimeOutState:00000000 $t
    {standard input}:4861   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
    {standard input}:4905   .text.vTaskInternalSetTimeOutState:00000024 $d
    {standard input}:4911   .text.xTaskCheckForTimeOut:00000000 $t
    {standard input}:4916   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
    {standard input}:5087   .text.xTaskCheckForTimeOut:000000dc $d
    {standard input}:5094   .text.vTaskMissedYield:00000000 $t
    {standard input}:5099   .text.vTaskMissedYield:00000000 vTaskMissedYield
    {standard input}:5130   .text.vTaskMissedYield:00000014 $d
    {standard input}:5135   .text.uxTaskGetTaskNumber:00000000 $t
    {standard input}:5140   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
    {standard input}:5195   .text.vTaskSetTaskNumber:00000000 $t
    {standard input}:5200   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
    {standard input}:5248   .text.prvIdleTask:00000000 $t
    {standard input}:5575   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
    {standard input}:5295   .text.prvIdleTask:00000028 $d
    {standard input}:5301   .text.vTaskSetThreadLocalStoragePointer:00000000 $t
    {standard input}:5306   .text.vTaskSetThreadLocalStoragePointer:00000000 vTaskSetThreadLocalStoragePointer
    {standard input}:5391   .text.vTaskSetThreadLocalStoragePointer:00000054 $d
    {standard input}:5396   .text.pvTaskGetThreadLocalStoragePointer:00000000 $t
    {standard input}:5401   .text.pvTaskGetThreadLocalStoragePointer:00000000 pvTaskGetThreadLocalStoragePointer
    {standard input}:5474   .text.pvTaskGetThreadLocalStoragePointer:00000048 $d
    {standard input}:5479   .text.prvInitialiseTaskLists:00000000 $t
    {standard input}:5559   .text.prvInitialiseTaskLists:0000005c $d
    {standard input}:5571   .text.prvCheckTasksWaitingTermination:00000000 $t
    {standard input}:5644   .text.prvCheckTasksWaitingTermination:0000004c $d
    {standard input}:5651   .text.vTaskGetInfo:00000000 $t
    {standard input}:5656   .text.vTaskGetInfo:00000000 vTaskGetInfo
    {standard input}:5943   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
    {standard input}:5804   .text.vTaskGetInfo:000000c4 $d
    {standard input}:5809   .text.prvListTasksWithinSingleList:00000000 $t
    {standard input}:5939   .text.prvTaskCheckFreeStackSpace:00000000 $t
    {standard input}:6006   .text.uxTaskGetStackHighWaterMark:00000000 $t
    {standard input}:6011   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
    {standard input}:6067   .text.uxTaskGetStackHighWaterMark:00000034 $d
    {standard input}:6072   .text.prvDeleteTCB:00000000 $t
    {standard input}:6115   .text.prvResetNextTaskUnblockTime:00000000 $t
    {standard input}:6166   .text.prvResetNextTaskUnblockTime:0000002c $d
    {standard input}:6172   .text.xTaskGetCurrentTaskHandle:00000000 $t
    {standard input}:6177   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
    {standard input}:6217   .text.xTaskGetCurrentTaskHandle:0000001c $d
    {standard input}:6222   .text.xTaskGetSchedulerState:00000000 $t
    {standard input}:6227   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
    {standard input}:6287   .text.xTaskGetSchedulerState:00000034 $d
    {standard input}:6293   .text.xTaskPriorityInherit:00000000 $t
    {standard input}:6298   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
    {standard input}:6452   .text.xTaskPriorityInherit:000000e4 $d
    {standard input}:6459   .text.xTaskPriorityDisinherit:00000000 $t
    {standard input}:6464   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
    {standard input}:6632   .text.xTaskPriorityDisinherit:000000e8 $d
    {standard input}:6639   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
    {standard input}:6644   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
    {standard input}:6837   .text.vTaskPriorityDisinheritAfterTimeout:00000110 $d
    {standard input}:6844   .text.prvWriteNameToBuffer:00000000 $t
    {standard input}:6848   .text.prvWriteNameToBuffer:00000000 prvWriteNameToBuffer
    {standard input}:6920   .text.vTaskList:00000000 $t
    {standard input}:6925   .text.vTaskList:00000000 vTaskList
    {standard input}:6994   .text.vTaskList:0000005c $d
    {standard input}:6999   .text.vTaskList:00000070 $t
    {standard input}:7121   .text.vTaskList:00000124 $d
    {standard input}:7127   .text.uxTaskResetEventItemValue:00000000 $t
    {standard input}:7132   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
    {standard input}:7181   .text.uxTaskResetEventItemValue:0000002c $d
    {standard input}:7186   .text.pvTaskIncrementMutexHeldCount:00000000 $t
    {standard input}:7191   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
    {standard input}:7234   .text.pvTaskIncrementMutexHeldCount:00000024 $d
    {standard input}:7239   .text.ulTaskGenericNotifyTake:00000000 $t
    {standard input}:7244   .text.ulTaskGenericNotifyTake:00000000 ulTaskGenericNotifyTake
    {standard input}:7386   .text.ulTaskGenericNotifyTake:000000c4 $d
    {standard input}:7392   .text.xTaskGenericNotifyWait:00000000 $t
    {standard input}:7397   .text.xTaskGenericNotifyWait:00000000 xTaskGenericNotifyWait
    {standard input}:7565   .text.xTaskGenericNotifyWait:000000f4 $d
    {standard input}:7571   .text.xTaskGenericNotify:00000000 $t
    {standard input}:7576   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
    {standard input}:7683   .text.xTaskGenericNotify:00000088 $d
    {standard input}:7688   .text.xTaskGenericNotify:0000009c $t
    {standard input}:7867   .text.xTaskGenericNotify:000001a8 $d
    {standard input}:7876   .text.xTaskGenericNotifyFromISR:00000000 $t
    {standard input}:7881   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
    {standard input}:8008   .text.xTaskGenericNotifyFromISR:000000a4 $d
    {standard input}:8013   .text.xTaskGenericNotifyFromISR:000000b8 $t
    {standard input}:8218   .text.xTaskGenericNotifyFromISR:000001e0 $d
    {standard input}:8229   .text.vTaskGenericNotifyGiveFromISR:00000000 $t
    {standard input}:8234   .text.vTaskGenericNotifyGiveFromISR:00000000 vTaskGenericNotifyGiveFromISR
    {standard input}:8463   .text.vTaskGenericNotifyGiveFromISR:0000013c $d
    {standard input}:8473   .text.xTaskGenericNotifyStateClear:00000000 $t
    {standard input}:8478   .text.xTaskGenericNotifyStateClear:00000000 xTaskGenericNotifyStateClear
    {standard input}:8577   .text.xTaskGenericNotifyStateClear:0000006c $d
    {standard input}:8582   .text.ulTaskGenericNotifyValueClear:00000000 $t
    {standard input}:8587   .text.ulTaskGenericNotifyValueClear:00000000 ulTaskGenericNotifyValueClear
    {standard input}:8658   .text.ulTaskGenericNotifyValueClear:00000058 $d
    {standard input}:8663   .text.prvAddCurrentTaskToDelayedList:00000000 $t
    {standard input}:8793   .text.prvAddCurrentTaskToDelayedList:000000b8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
strlen
vListInsert
vListInitialise
strcpy
sprintf
