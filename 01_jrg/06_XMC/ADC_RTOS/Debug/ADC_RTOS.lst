
ADC_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d60  08000000  0c000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         00000128  20000000  0c004d60  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000001b0  20000128  0c004e88  00010128  2**2
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00001100  00000000  00000000  00010128  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00019dbc  00000000  00000000  00011228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031b1  00000000  00000000  0002afe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008af9  00000000  00000000  0002e195  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004924  00000000  00000000  00036c90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000097b0  00000000  00000000  0003b5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009468  00000000  00000000  00044d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f08  00000000  00000000  0004e1cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 000007e6  00000000  00000000  0004f0d4  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	d1 1a 00 08 b1 02 00 08 00 00 00 00 11 1d 00 08     ................
 800003c:	81 1d 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    Entry   GPDMA1_0_IRQHandler         /* Handler name for SR GPDMA1_0  */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    .thumb
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c004d60 	.word	0x0c004d60
 800024c:	20000000 	.word	0x20000000
 8000250:	00000128 	.word	0x00000128
 8000254:	0c004e88 	.word	0x0c004e88
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c004d60 	.word	0x0c004d60
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c004d60 	.word	0x0c004d60
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000128 	.word	0x20000128
 800027c:	000001b0 	.word	0x000001b0
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    Entry   GPDMA1_0_IRQHandler         /* Handler name for SR GPDMA1_0  */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000290:	10000800 	.word	0x10000800
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08004999 	.word	0x08004999
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	080048b5 	.word	0x080048b5

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f003 fe2b 	bl	8003f20 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f003 fe93 	bl	8003ff4 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f003 fe72 	bl	8003fe0 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	460b      	mov	r3, r1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	089b      	lsrs	r3, r3, #2
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	4618      	mov	r0, r3
 80003be:	7afb      	ldrb	r3, [r7, #11]
 80003c0:	089b      	lsrs	r3, r3, #2
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3204      	adds	r2, #4
 80003ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ce:	7afb      	ldrb	r3, [r7, #11]
 80003d0:	f003 0303 	and.w	r3, r3, #3
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	4619      	mov	r1, r3
 80003d8:	23f8      	movs	r3, #248	; 0xf8
 80003da:	408b      	lsls	r3, r1
 80003dc:	43db      	mvns	r3, r3
 80003de:	ea02 0103 	and.w	r1, r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	1d02      	adds	r2, r0, #4
 80003e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003ee:	7afb      	ldrb	r3, [r7, #11]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	4619      	mov	r1, r3
 80003f4:	2303      	movs	r3, #3
 80003f6:	408b      	lsls	r3, r1
 80003f8:	43db      	mvns	r3, r3
 80003fa:	401a      	ands	r2, r3
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	4a3a      	ldr	r2, [pc, #232]	; (80004ec <XMC_GPIO_Init+0x144>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d003      	beq.n	8000410 <XMC_GPIO_Init+0x68>
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4a39      	ldr	r2, [pc, #228]	; (80004f0 <XMC_GPIO_Init+0x148>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d10a      	bne.n	8000426 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000414:	7afb      	ldrb	r3, [r7, #11]
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	661a      	str	r2, [r3, #96]	; 0x60
 8000424:	e042      	b.n	80004ac <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	b2db      	uxtb	r3, r3
 800042c:	b25b      	sxtb	r3, r3
 800042e:	2b00      	cmp	r3, #0
 8000430:	da3c      	bge.n	80004ac <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	685a      	ldr	r2, [r3, #4]
 8000436:	7afb      	ldrb	r3, [r7, #11]
 8000438:	409a      	lsls	r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	08db      	lsrs	r3, r3, #3
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4618      	mov	r0, r3
 8000446:	7afb      	ldrb	r3, [r7, #11]
 8000448:	08db      	lsrs	r3, r3, #3
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3210      	adds	r2, #16
 8000452:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000456:	7afb      	ldrb	r3, [r7, #11]
 8000458:	f003 0307 	and.w	r3, r3, #7
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	4619      	mov	r1, r3
 8000460:	2307      	movs	r3, #7
 8000462:	408b      	lsls	r3, r1
 8000464:	43db      	mvns	r3, r3
 8000466:	ea02 0103 	and.w	r1, r2, r3
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	f100 0210 	add.w	r2, r0, #16
 8000470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000474:	7afb      	ldrb	r3, [r7, #11]
 8000476:	08db      	lsrs	r3, r3, #3
 8000478:	b2db      	uxtb	r3, r3
 800047a:	4618      	mov	r0, r3
 800047c:	7afb      	ldrb	r3, [r7, #11]
 800047e:	08db      	lsrs	r3, r3, #3
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	3210      	adds	r2, #16
 8000488:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	7a1b      	ldrb	r3, [r3, #8]
 8000490:	4619      	mov	r1, r3
 8000492:	7afb      	ldrb	r3, [r7, #11]
 8000494:	f003 0307 	and.w	r3, r3, #7
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	fa01 f303 	lsl.w	r3, r1, r3
 800049e:	ea42 0103 	orr.w	r1, r2, r3
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	f100 0210 	add.w	r2, r0, #16
 80004a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004ac:	7afb      	ldrb	r3, [r7, #11]
 80004ae:	089b      	lsrs	r3, r3, #2
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	4618      	mov	r0, r3
 80004b4:	7afb      	ldrb	r3, [r7, #11]
 80004b6:	089b      	lsrs	r3, r3, #2
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	461a      	mov	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	3204      	adds	r2, #4
 80004c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	4619      	mov	r1, r3
 80004ca:	7afb      	ldrb	r3, [r7, #11]
 80004cc:	f003 0303 	and.w	r3, r3, #3
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	ea42 0103 	orr.w	r1, r2, r3
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	1d02      	adds	r2, r0, #4
 80004de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	48028e00 	.word	0x48028e00
 80004f0:	48028f00 	.word	0x48028f00

080004f4 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004fa:	681b      	ldr	r3, [r3, #0]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000ffc0 	.word	0x2000ffc0

0800050c <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <XMC_SCU_GetMirrorStatus+0x14>)
 8000512:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000516:	4618      	mov	r0, r3
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	50004000 	.word	0x50004000

08000524 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 800052c:	f7ff fed2 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <XMC_SCU_lDelay+0x3c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <XMC_SCU_lDelay+0x40>)
 8000536:	fba2 2303 	umull	r2, r3, r2, r3
 800053a:	0c9a      	lsrs	r2, r3, #18
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	fb02 f303 	mul.w	r3, r2, r3
 8000542:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	e003      	b.n	8000552 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800054a:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	3301      	adds	r3, #1
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	429a      	cmp	r2, r3
 8000558:	d3f7      	bcc.n	800054a <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000ffc0 	.word	0x2000ffc0
 8000564:	431bde83 	.word	0x431bde83

08000568 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 800056c:	4b03      	ldr	r3, [pc, #12]	; (800057c <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800056e:	685b      	ldr	r3, [r3, #4]
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	50004074 	.word	0x50004074

08000580 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000588:	4a03      	ldr	r2, [pc, #12]	; (8000598 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	60d3      	str	r3, [r2, #12]
}
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	50004074 	.word	0x50004074

0800059c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 f8a1 	bl	80006ec <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80005aa:	f000 fa53 	bl	8000a54 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	79db      	ldrb	r3, [r3, #7]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00a      	beq.n	80005cc <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80005b6:	f000 fa8b 	bl	8000ad0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005ba:	bf00      	nop
 80005bc:	f000 fa76 	bl	8000aac <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005c0:	4603      	mov	r3, r0
 80005c2:	f083 0301 	eor.w	r3, r3, #1
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1f7      	bne.n	80005bc <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	7a5b      	ldrb	r3, [r3, #9]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f905 	bl	80007e0 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005d6:	bf00      	nop
 80005d8:	f7ff ff98 	bl	800050c <XMC_SCU_GetMirrorStatus>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1fa      	bne.n	80005d8 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	7a1b      	ldrb	r3, [r3, #8]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fa0e 	bl	8000a08 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	7c1b      	ldrb	r3, [r3, #16]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 f913 	bl	800081c <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7c5b      	ldrb	r3, [r3, #17]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f936 	bl	800086c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7c9b      	ldrb	r3, [r3, #18]
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f91d 	bl	8000844 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	7cdb      	ldrb	r3, [r3, #19]
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f940 	bl	8000894 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	799b      	ldrb	r3, [r3, #6]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00a      	beq.n	8000632 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 800061c:	f000 fa90 	bl	8000b40 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000620:	bf00      	nop
 8000622:	f000 fab5 	bl	8000b90 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8000626:	4603      	mov	r3, r0
 8000628:	f083 0301 	eor.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1f7      	bne.n	8000622 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	78db      	ldrb	r3, [r3, #3]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d109      	bne.n	800064e <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	799b      	ldrb	r3, [r3, #6]
 800063e:	f083 0301 	eor.w	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d017      	beq.n	8000678 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000648:	f000 fac6 	bl	8000bd8 <XMC_SCU_CLOCK_DisableSystemPll>
 800064c:	e014      	b.n	8000678 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800064e:	f000 fab3 	bl	8000bb8 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	8899      	ldrh	r1, [r3, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800065e:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000664:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	4608      	mov	r0, r1
 800066e:	4611      	mov	r1, r2
 8000670:	462a      	mov	r2, r5
 8000672:	4623      	mov	r3, r4
 8000674:	f000 fac0 	bl	8000bf8 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000680:	d103      	bne.n	800068a <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 8000682:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000686:	f000 f831 	bl	80006ec <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800068a:	f7ff fe23 	bl	80002d4 <SystemCoreClockUpdate>
}
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bdb0      	pop	{r4, r5, r7, pc}

08000694 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	0f1b      	lsrs	r3, r3, #28
 80006a0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006a8:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006b8:	4413      	add	r3, r2
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	601a      	str	r2, [r3, #0]
}
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	50004414 	.word	0x50004414

080006cc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006d0:	f7ff ff10 	bl	80004f4 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80006d4:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80006d8:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	50004600 	.word	0x50004600

080006ec <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006f4:	4906      	ldr	r1, [pc, #24]	; (8000710 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4313      	orrs	r3, r2
 8000702:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	50004600 	.word	0x50004600

08000714 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 800071c:	4906      	ldr	r1, [pc, #24]	; (8000738 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4313      	orrs	r3, r2
 800072a:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	50004600 	.word	0x50004600

0800073c <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000744:	4906      	ldr	r1, [pc, #24]	; (8000760 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4313      	orrs	r3, r2
 8000752:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	50004600 	.word	0x50004600

08000764 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800076e:	88fb      	ldrh	r3, [r7, #6]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d108      	bne.n	8000786 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000774:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000778:	68db      	ldr	r3, [r3, #12]
 800077a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800077e:	f023 0301 	bic.w	r3, r3, #1
 8000782:	60d3      	str	r3, [r2, #12]
 8000784:	e007      	b.n	8000796 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000786:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	60d3      	str	r3, [r2, #12]
  }
}
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	50004710 	.word	0x50004710

080007a4 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007ae:	bf00      	nop
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80007b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007b6:	f003 0308 	and.w	r3, r3, #8
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1f8      	bne.n	80007b0 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007be:	4907      	ldr	r1, [pc, #28]	; (80007dc <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007c8:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007ca:	4313      	orrs	r3, r2
 80007cc:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	50004000 	.word	0x50004000
 80007dc:	50004300 	.word	0x50004300

080007e0 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007ea:	bf00      	nop
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1f8      	bne.n	80007ec <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007fa:	4907      	ldr	r1, [pc, #28]	; (8000818 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000804:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000806:	4313      	orrs	r3, r2
 8000808:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	50004000 	.word	0x50004000
 8000818:	50004300 	.word	0x50004300

0800081c <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000824:	4906      	ldr	r1, [pc, #24]	; (8000840 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000832:	4313      	orrs	r3, r2
 8000834:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	50004600 	.word	0x50004600

08000844 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800084c:	4906      	ldr	r1, [pc, #24]	; (8000868 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000850:	6a1b      	ldr	r3, [r3, #32]
 8000852:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800085a:	4313      	orrs	r3, r2
 800085c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	50004600 	.word	0x50004600

0800086c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000874:	4906      	ldr	r1, [pc, #24]	; (8000890 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000878:	691b      	ldr	r3, [r3, #16]
 800087a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000882:	4313      	orrs	r3, r2
 8000884:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	50004600 	.word	0x50004600

08000894 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800089c:	4906      	ldr	r1, [pc, #24]	; (80008b8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008aa:	4313      	orrs	r3, r2
 80008ac:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	50004600 	.word	0x50004600

080008bc <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008c4:	4906      	ldr	r1, [pc, #24]	; (80008e0 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008d2:	4313      	orrs	r3, r2
 80008d4:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	50004600 	.word	0x50004600

080008e4 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008ec:	4906      	ldr	r1, [pc, #24]	; (8000908 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008fa:	4313      	orrs	r3, r2
 80008fc:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	50004600 	.word	0x50004600

0800090c <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000914:	4906      	ldr	r1, [pc, #24]	; (8000930 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800091a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000922:	4313      	orrs	r3, r2
 8000924:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	50004600 	.word	0x50004600

08000934 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000938:	4a05      	ldr	r2, [pc, #20]	; (8000950 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000942:	f023 0302 	bic.w	r3, r3, #2
 8000946:	6153      	str	r3, [r2, #20]
}
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	50004710 	.word	0x50004710

08000954 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800095e:	4a28      	ldr	r2, [pc, #160]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000960:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 800096a:	bf00      	nop
 800096c:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800096e:	691b      	ldr	r3, [r3, #16]
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0f9      	beq.n	800096c <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000978:	4a21      	ldr	r2, [pc, #132]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800097a:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f043 0310 	orr.w	r3, r3, #16
 8000982:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000984:	491e      	ldr	r1, [pc, #120]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	3b01      	subs	r3, #1
 800098a:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3b01      	subs	r3, #1
 8000990:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000992:	4313      	orrs	r3, r2
 8000994:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000996:	4a1a      	ldr	r2, [pc, #104]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a0:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009a2:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	f023 0310 	bic.w	r3, r3, #16
 80009ac:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80009ae:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009b2:	695b      	ldr	r3, [r3, #20]
 80009b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b8:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80009ba:	bf00      	nop
 80009bc:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d0f9      	beq.n	80009bc <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	f023 0301 	bic.w	r3, r3, #1
 80009d2:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 80009d4:	bf00      	nop
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009d8:	691b      	ldr	r3, [r3, #16]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1f9      	bne.n	80009d6 <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80009e2:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009ec:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 80009f0:	2208      	movs	r2, #8
 80009f2:	60da      	str	r2, [r3, #12]
}
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	50004710 	.word	0x50004710
 8000a04:	50004160 	.word	0x50004160

08000a08 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000a12:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a1c:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d10e      	bne.n	8000a42 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a2e:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000a30:	2064      	movs	r0, #100	; 0x64
 8000a32:	f7ff fd77 	bl	8000524 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000a36:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a40:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000a42:	2064      	movs	r0, #100	; 0x64
 8000a44:	f7ff fd6e 	bl	8000524 <XMC_SCU_lDelay>
}
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	50004710 	.word	0x50004710

08000a54 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d109      	bne.n	8000a78 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a6a:	bf00      	nop
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0f9      	beq.n	8000a6c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d00a      	beq.n	8000a9a <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8a:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a8c:	bf00      	nop
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d1f9      	bne.n	8000a8e <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	50004200 	.word	0x50004200
 8000aa8:	50004400 	.word	0x50004400

08000aac <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f003 0308 	and.w	r3, r3, #8
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	bf0c      	ite	eq
 8000abc:	2301      	moveq	r3, #1
 8000abe:	2300      	movne	r3, #0
 8000ac0:	b2db      	uxtb	r3, r3
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	50004300 	.word	0x50004300

08000ad0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000ad4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000ad8:	f7ff fd52 	bl	8000580 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000adc:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ae6:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000ae8:	bf00      	nop
 8000aea:	f7ff fd3d 	bl	8000568 <XMC_SCU_INTERUPT_GetEventStatus>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d0f8      	beq.n	8000aea <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000af8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000afc:	f7ff fd40 	bl	8000580 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b02:	2208      	movs	r2, #8
 8000b04:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000b06:	bf00      	nop
 8000b08:	f7ff fd2e 	bl	8000568 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d0f8      	beq.n	8000b08 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000b16:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000b1a:	f7ff fd31 	bl	8000580 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000b1e:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	f043 0308 	orr.w	r3, r3, #8
 8000b28:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000b2a:	bf00      	nop
 8000b2c:	f7ff fd1c 	bl	8000568 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b30:	4603      	mov	r3, r0
 8000b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d0f8      	beq.n	8000b2c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	50004300 	.word	0x50004300

08000b40 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000b44:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b4e:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b50:	4d0d      	ldr	r5, [pc, #52]	; (8000b88 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000b5a:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000b5e:	f003 fa3f 	bl	8003fe0 <OSCHP_GetFrequency>
 8000b62:	4602      	mov	r2, r0
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000b66:	fba3 2302 	umull	r2, r3, r3, r2
 8000b6a:	0d1b      	lsrs	r3, r3, #20
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b70:	4323      	orrs	r3, r4
 8000b72:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000b74:	4a03      	ldr	r2, [pc, #12]	; (8000b84 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b76:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b7e:	6053      	str	r3, [r2, #4]
}
 8000b80:	bdb0      	pop	{r4, r5, r7, pc}
 8000b82:	bf00      	nop
 8000b84:	50004710 	.word	0x50004710
 8000b88:	50004700 	.word	0x50004700
 8000b8c:	6b5fca6b 	.word	0x6b5fca6b

08000b90 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b9c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000ba0:	bf0c      	ite	eq
 8000ba2:	2301      	moveq	r3, #1
 8000ba4:	2300      	movne	r3, #0
 8000ba6:	b2db      	uxtb	r3, r3
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	50004710 	.word	0x50004710

08000bb8 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000bbc:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc6:	f023 0302 	bic.w	r3, r3, #2
 8000bca:	6053      	str	r3, [r2, #4]
}
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	50004710 	.word	0x50004710

08000bd8 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000bdc:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000bde:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be6:	f043 0302 	orr.w	r3, r3, #2
 8000bea:	6053      	str	r3, [r2, #4]
}
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	50004710 	.word	0x50004710

08000bf8 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60ba      	str	r2, [r7, #8]
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4603      	mov	r3, r0
 8000c04:	81fb      	strh	r3, [r7, #14]
 8000c06:	460b      	mov	r3, r1
 8000c08:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000c0a:	89fb      	ldrh	r3, [r7, #14]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fda9 	bl	8000764 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000c12:	7b7b      	ldrb	r3, [r7, #13]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	f040 808b 	bne.w	8000d30 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000c1a:	89fb      	ldrh	r3, [r7, #14]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d109      	bne.n	8000c34 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000c20:	f003 f9de 	bl	8003fe0 <OSCHP_GetFrequency>
 8000c24:	4602      	mov	r2, r0
 8000c26:	4b54      	ldr	r3, [pc, #336]	; (8000d78 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000c28:	fba3 2302 	umull	r2, r3, r3, r2
 8000c2c:	0c9b      	lsrs	r3, r3, #18
 8000c2e:	059b      	lsls	r3, r3, #22
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	e002      	b.n	8000c3a <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000c34:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000c38:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	fb02 f203 	mul.w	r2, r2, r3
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c48:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	4a4b      	ldr	r2, [pc, #300]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c52:	091b      	lsrs	r3, r3, #4
 8000c54:	0d9b      	lsrs	r3, r3, #22
 8000c56:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c58:	4a49      	ldr	r2, [pc, #292]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c5a:	4b49      	ldr	r3, [pc, #292]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000c64:	bf00      	nop
 8000c66:	4b46      	ldr	r3, [pc, #280]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0f9      	beq.n	8000c66 <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c72:	4a43      	ldr	r2, [pc, #268]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c74:	4b42      	ldr	r3, [pc, #264]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f043 0310 	orr.w	r3, r3, #16
 8000c7c:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c7e:	4940      	ldr	r1, [pc, #256]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c80:	4b3f      	ldr	r3, [pc, #252]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	4b3f      	ldr	r3, [pc, #252]	; (8000d84 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000c86:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	3a01      	subs	r2, #1
 8000c8c:	0212      	lsls	r2, r2, #8
 8000c8e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c96:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000ca2:	4a37      	ldr	r2, [pc, #220]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ca4:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cac:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000cae:	4a34      	ldr	r2, [pc, #208]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb0:	4b33      	ldr	r3, [pc, #204]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f023 0310 	bic.w	r3, r3, #16
 8000cb8:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000cba:	4a31      	ldr	r2, [pc, #196]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cbc:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc4:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000cc6:	bf00      	nop
 8000cc8:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0f9      	beq.n	8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cd4:	4a2a      	ldr	r2, [pc, #168]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cd6:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f023 0301 	bic.w	r3, r3, #1
 8000cde:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000ce0:	bf00      	nop
 8000ce2:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f9      	bne.n	8000ce2 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	4a25      	ldr	r2, [pc, #148]	; (8000d88 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	0d9b      	lsrs	r3, r3, #22
 8000cfa:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000cfc:	6a3a      	ldr	r2, [r7, #32]
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d202      	bcs.n	8000d0a <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d04:	6938      	ldr	r0, [r7, #16]
 8000d06:	f000 f845 	bl	8000d94 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	085b      	lsrs	r3, r3, #1
 8000d0e:	4a1f      	ldr	r2, [pc, #124]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000d10:	fba2 2303 	umull	r2, r3, r2, r3
 8000d14:	095b      	lsrs	r3, r3, #5
 8000d16:	0d9b      	lsrs	r3, r3, #22
 8000d18:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d1a:	6a3a      	ldr	r2, [r7, #32]
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d202      	bcs.n	8000d28 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d22:	6938      	ldr	r0, [r7, #16]
 8000d24:	f000 f836 	bl	8000d94 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000d28:	6a38      	ldr	r0, [r7, #32]
 8000d2a:	f000 f833 	bl	8000d94 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000d2e:	e01c      	b.n	8000d6a <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d30:	4913      	ldr	r1, [pc, #76]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000d3a:	6a3b      	ldr	r3, [r7, #32]
 8000d3c:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000d42:	bf00      	nop
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0310 	and.w	r3, r3, #16
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0f9      	beq.n	8000d44 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d50:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d5c:	bf00      	nop
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0f9      	beq.n	8000d5e <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000d6c:	2205      	movs	r2, #5
 8000d6e:	60da      	str	r2, [r3, #12]
}
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	431bde83 	.word	0x431bde83
 8000d7c:	aaaaaaab 	.word	0xaaaaaaab
 8000d80:	50004710 	.word	0x50004710
 8000d84:	f08080ff 	.word	0xf08080ff
 8000d88:	88888889 	.word	0x88888889
 8000d8c:	b60b60b7 	.word	0xb60b60b7
 8000d90:	50004160 	.word	0x50004160

08000d94 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d9c:	490b      	ldr	r1, [pc, #44]	; (8000dcc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000dac:	4313      	orrs	r3, r2
 8000dae:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000db0:	bf00      	nop
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0320 	and.w	r3, r3, #32
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0f9      	beq.n	8000db2 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000dbe:	2032      	movs	r0, #50	; 0x32
 8000dc0:	f7ff fbb0 	bl	8000524 <XMC_SCU_lDelay>
}
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	50004710 	.word	0x50004710

08000dd0 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8000dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	bf0c      	ite	eq
 8000de6:	2301      	moveq	r3, #1
 8000de8:	2300      	movne	r3, #0
 8000dea:	b2db      	uxtb	r3, r3
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	4608      	mov	r0, r1
 8000e02:	4611      	mov	r1, r2
 8000e04:	461a      	mov	r2, r3
 8000e06:	4603      	mov	r3, r0
 8000e08:	70fb      	strb	r3, [r7, #3]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	70bb      	strb	r3, [r7, #2]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000e12:	78fa      	ldrb	r2, [r7, #3]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000e14:	78bb      	ldrb	r3, [r7, #2]
 8000e16:	041b      	lsls	r3, r3, #16
 8000e18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000e1c:	431a      	orrs	r2, r3
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8000e1e:	787b      	ldrb	r3, [r7, #1]
 8000e20:	061b      	lsls	r3, r3, #24
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000e22:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	601a      	str	r2, [r3, #0]
}
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8000e7e:	683a      	ldr	r2, [r7, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4293      	cmp	r3, r2
 8000e84:	bf38      	it	cc
 8000e86:	4613      	movcc	r3, r2
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	bf28      	it	cs
 8000ea6:	4613      	movcs	r3, r2
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	6852      	ldr	r2, [r2, #4]
 8000ec6:	fbb3 f1f2 	udiv	r1, r3, r2
 8000eca:	fb02 f201 	mul.w	r2, r2, r1
 8000ece:	1a9b      	subs	r3, r3, r2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f040 8090 	bne.w	8000ff6 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x142>
  {
    uint32_t prescaler = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    uint32_t div8 = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 8000eec:	2319      	movs	r3, #25
 8000eee:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000ef8:	e04b      	b.n	8000f92 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f02:	6979      	ldr	r1, [r7, #20]
 8000f04:	fb01 f202 	mul.w	r2, r1, r2
 8000f08:	1a9b      	subs	r3, r3, r2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d13e      	bne.n	8000f8c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
      {
        div8 = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d034      	beq.n	8000f8c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f28:	d830      	bhi.n	8000f8c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
        {
          if (prescaler >= 64)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	2b3f      	cmp	r3, #63	; 0x3f
 8000f2e:	d90a      	bls.n	8000f46 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x92>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
            {
              --ntq;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
              continue;
 8000f40:	e027      	b.n	8000f92 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
            }
            else
            {
              div8 = 1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	8912      	ldrh	r2, [r2, #8]
 8000f4e:	fb02 f303 	mul.w	r3, r2, r3
 8000f52:	4a2b      	ldr	r2, [pc, #172]	; (8001000 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14c>)
 8000f54:	fba2 2303 	umull	r2, r3, r2, r3
 8000f58:	0b5b      	lsrs	r3, r3, #13
 8000f5a:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	3b01      	subs	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d90f      	bls.n	8000f8c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	2b0f      	cmp	r3, #15
 8000f70:	d80c      	bhi.n	8000f8c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d909      	bls.n	8000f8c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
              (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d806      	bhi.n	8000f8c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	895b      	ldrh	r3, [r3, #10]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d800      	bhi.n	8000f8c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
          {
            break;
 8000f8a:	e005      	b.n	8000f98 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe4>
          }


        }
      }
      --ntq;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2b07      	cmp	r3, #7
 8000f96:	d8b0      	bhi.n	8000efa <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x46>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	d92b      	bls.n	8000ff6 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x142>

      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: prescaler", (prescaler != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg1", (tseg1 != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ff48 	bl	8000e34 <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	031b      	lsls	r3, r3, #12
 8000faa:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	895b      	ldrh	r3, [r3, #10]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	019b      	lsls	r3, r3, #6
 8000fb6:	b2db      	uxtb	r3, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000fb8:	431a      	orrs	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8000fc4:	ea42 0103 	orr.w	r1, r2, r3
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	40d3      	lsrs	r3, r2
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8000fdc:	ea41 0203 	orr.w	r2, r1, r3
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	03db      	lsls	r3, r3, #15
 8000fe4:	b29b      	uxth	r3, r3

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8000fe6:	431a      	orrs	r2, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	611a      	str	r2, [r3, #16]
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff31 	bl	8000e54 <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e000      	b.n	8000ff8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x144>
    }
  }

  return XMC_CAN_STATUS_ERROR;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	d1b71759 	.word	0xd1b71759

08001004 <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	70fb      	strb	r3, [r7, #3]
 8001010:	4613      	mov	r3, r2
 8001012:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 8001014:	bf00      	nop
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff feda 	bl	8000dd0 <XMC_CAN_IsPanelControlReady>
 800101c:	4603      	mov	r3, r0
 800101e:	f083 0301 	eor.w	r3, r3, #1
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1f6      	bne.n	8001016 <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE, mo_num, (node_num + 1U));
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	3301      	adds	r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	78ba      	ldrb	r2, [r7, #2]
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	2102      	movs	r1, #2
 8001034:	f7ff fee0 	bl	8000df8 <XMC_CAN_PanelControl>
}
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop

08001040 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <XMC_CAN_Enable+0x30>)
 800104a:	f7ff fb23 	bl	8000694 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f023 0201 	bic.w	r2, r3, #1
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 800105a:	bf00      	nop
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f9      	bne.n	800105c <XMC_CAN_Enable+0x1c>
  {
    /*Do nothing*/
  };
}
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	10000010 	.word	0x10000010

08001074 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <XMC_CAN_GetBaudrateClockFrequency>:
  return XMC_CAN_CANCLKSRC_FPERI;
#endif
}

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
      frequency = OSCHP_GetFrequency();
      break;
  }
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8001098:	f7ff fb18 	bl	80006cc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 800109c:	60f8      	str	r0, [r7, #12]
#endif

  return frequency;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	460b      	mov	r3, r1
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	72fb      	strb	r3, [r7, #11]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f7ff ffc2 	bl	8001040 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 80010bc:	7afb      	ldrb	r3, [r7, #11]
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff ffd7 	bl	8001074 <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f7ff ffe0 	bl	800108c <XMC_CAN_GetBaudrateClockFrequency>
 80010cc:	61f8      	str	r0, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80010da:	2000      	movs	r0, #0
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fec9 	bl	8000e74 <max>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80010ea:	f7ff fed3 	bl	8000e94 <min>
 80010ee:	61b8      	str	r0, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fc:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8001106:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	60da      	str	r2, [r3, #12]

  return freq_n;
 800111e:	697b      	ldr	r3, [r7, #20]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t reg;

  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 8001138:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 800113c:	095b      	lsrs	r3, r3, #5
 800113e:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	035a      	lsls	r2, r3, #13
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	6812      	ldr	r2, [r2, #0]
 800115a:	6892      	ldr	r2, [r2, #8]
 800115c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001160:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	6891      	ldr	r1, [r2, #8]
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	430a      	orrs	r2, r1
 8001170:	609a      	str	r2, [r3, #8]

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	79db      	ldrb	r3, [r3, #7]
 8001176:	f003 0320 	and.w	r3, r3, #32
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d007      	beq.n	8001190 <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	79db      	ldrb	r3, [r3, #7]
 8001184:	f003 0320 	and.w	r3, r3, #32
 8001188:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 800118a:	2b00      	cmp	r3, #0
 800118c:	d100      	bne.n	8001190 <XMC_CAN_MO_Config+0x68>
 800118e:	e060      	b.n	8001252 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8001194:	2b00      	cmp	r3, #0
 8001196:	d004      	beq.n	80011a2 <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 800119c:	2b01      	cmp	r3, #1
 800119e:	d000      	beq.n	80011a2 <XMC_CAN_MO_Config+0x7a>
 80011a0:	e057      	b.n	8001252 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2220      	movs	r2, #32
 80011a8:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	79db      	ldrb	r3, [r3, #7]
 80011ae:	f003 0320 	and.w	r3, r3, #32
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d128      	bne.n	800120a <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80011c4:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80011ce:	049b      	lsls	r3, r3, #18
 80011d0:	461a      	mov	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80011ec:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80011f6:	049b      	lsls	r3, r3, #18
 80011f8:	461a      	mov	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	e009      	b.n	800121e <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6852      	ldr	r2, [r2, #4]
 8001212:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	6892      	ldr	r2, [r2, #8]
 800121c:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7e1b      	ldrb	r3, [r3, #24]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d10c      	bne.n	8001240 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f81a 	bl	8001260 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001234:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <XMC_CAN_MO_Config+0x130>)
 800123c:	61da      	str	r2, [r3, #28]
 800123e:	e008      	b.n	8001252 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001248:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a03      	ldr	r2, [pc, #12]	; (800125c <XMC_CAN_MO_Config+0x134>)
 8001250:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	062000c0 	.word	0x062000c0
 800125c:	00a00640 	.word	0x00a00640

08001260 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8001268:	2303      	movs	r3, #3
 800126a:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7e1b      	ldrb	r3, [r3, #24]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d122      	bne.n	80012ba <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2220      	movs	r2, #32
 800127a:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	7b12      	ldrb	r2, [r2, #12]
 800128e:	0612      	lsls	r2, r2, #24
 8001290:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	6912      	ldr	r2, [r2, #16]
 80012a0:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6952      	ldr	r2, [r2, #20]
 80012aa:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a06      	ldr	r2, [pc, #24]	; (80012cc <XMC_CAN_MO_UpdateData+0x6c>)
 80012b2:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e001      	b.n	80012be <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80012ba:	2303      	movs	r3, #3
 80012bc:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	00280040 	.word	0x00280040

080012d0 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f003 0320 	and.w	r3, r3, #32
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 80012fe:	2304      	movs	r3, #4
 8001300:	75fb      	strb	r3, [r7, #23]
 8001302:	e00c      	b.n	800131e <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d102      	bne.n	8001310 <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 800130a:	2302      	movs	r3, #2
 800130c:	75fb      	strb	r3, [r7, #23]
 800130e:	e006      	b.n	800131e <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001318:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 800131a:	2300      	movs	r3, #0
 800131c:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 800131e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001320:	4618      	mov	r0, r3
 8001322:	371c      	adds	r7, #28
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <XMC_CAN_NODE_EnableEvent>:
  return error;
}

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  if (event != XMC_CAN_NODE_EVENT_CFCIE)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800133c:	d006      	beq.n	800134c <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	e005      	b.n	8001358 <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699a      	ldr	r2, [r3, #24]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
}
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop

08001364 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
    const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 800136e:	783b      	ldrb	r3, [r7, #0]
 8001370:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	461a      	mov	r2, r3
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8001378:	78bb      	ldrb	r3, [r7, #2]
 800137a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800137e:	b2db      	uxtb	r3, r3
 8001380:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001382:	4313      	orrs	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80013a2:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013de:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop

080013f4 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001402:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 800141c:	2001      	movs	r0, #1
 800141e:	f7ff f939 	bl	8000694 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8001422:	bd80      	pop	{r7, pc}

08001424 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
#if (UC_SERIES == XMC14)
  XMC_SCU_CLOCK_SetAdcClockSrc(XMC_SCU_CLOCK_ADCCLKSRC_48MHZ);
#endif

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 800142e:	f7ff fff3 	bl	8001418 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	691a      	ldr	r2, [r3, #16]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop

08001478 <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	4613      	mov	r3, r2
 8001486:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d109      	bne.n	80014a2 <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f240 731f 	movw	r3, #1823	; 0x71f
 8001494:	4013      	ands	r3, r2
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	6839      	ldr	r1, [r7, #0]
 800149a:	3128      	adds	r1, #40	; 0x28
 800149c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80014a0:	e007      	b.n	80014b2 <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	6839      	ldr	r1, [r7, #0]
 80014ac:	3128      	adds	r1, #40	; 0x28
 80014ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	071f0000 	.word	0x071f0000

080014c0 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e017      	b.n	800150e <XMC_VADC_GLOBAL_StartupCalibration+0x4e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	4a0f      	ldr	r2, [pc, #60]	; (8001520 <XMC_VADC_GLOBAL_StartupCalibration+0x60>)
 80014e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e6:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d008      	beq.n	8001508 <XMC_VADC_GLOBAL_StartupCalibration+0x48>
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 80014f6:	e000      	b.n	80014fa <XMC_VADC_GLOBAL_StartupCalibration+0x3a>
      {
        __NOP();
 80014f8:	bf00      	nop
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f7      	bne.n	80014f8 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	3301      	adds	r3, #1
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	2b03      	cmp	r3, #3
 8001512:	d9e4      	bls.n	80014de <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	08004b80 	.word	0x08004b80

08001524 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
  uint32_t node;

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d903      	bls.n	800153e <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	3b04      	subs	r3, #4
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	e001      	b.n	8001542 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001548:	f023 020f 	bic.w	r2, r3, #15
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	6859      	ldr	r1, [r3, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	2300      	movs	r3, #0
 8001580:	f000 f828 	bl	80015d4 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	6859      	ldr	r1, [r3, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	2300      	movs	r3, #0
 800158e:	f000 f821 	bl	80015d4 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	6899      	ldr	r1, [r3, #8]
 8001598:	2200      	movs	r2, #0
 800159a:	2301      	movs	r3, #1
 800159c:	f000 f81a 	bl	80015d4 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	6899      	ldr	r1, [r3, #8]
 80015a6:	2201      	movs	r2, #1
 80015a8:	2301      	movs	r3, #1
 80015aa:	f000 f813 	bl	80015d4 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	691a      	ldr	r2, [r3, #16]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr, config->emux_config);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	6819      	ldr	r1, [r3, #0]
 80015c8:	f7ff fecc 	bl	8001364 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop

080015d4 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                   const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b08d      	sub	sp, #52	; 0x34
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	4613      	mov	r3, r2
 80015e2:	71fb      	strb	r3, [r7, #7]

  /*
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d113      	bne.n	8001612 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 80015ea:	2308      	movs	r3, #8
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 80015ee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 80015f8:	231f      	movs	r3, #31
 80015fa:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 80015fc:	7a3b      	ldrb	r3, [r7, #8]
 80015fe:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001602:	b2db      	uxtb	r3, r3
 8001604:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8001606:	7a7b      	ldrb	r3, [r7, #9]
 8001608:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	76fb      	strb	r3, [r7, #27]
 8001610:	e013      	b.n	800163a <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8001612:	2318      	movs	r3, #24
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8001616:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 800161c:	2310      	movs	r3, #16
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8001620:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8001624:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8001626:	7abb      	ldrb	r3, [r7, #10]
 8001628:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800162c:	b2db      	uxtb	r3, r3
 800162e:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8001630:	7afb      	ldrb	r3, [r7, #11]
 8001632:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	3228      	adds	r2, #40	; 0x28
 8001640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001644:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	43db      	mvns	r3, r3
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	4013      	ands	r3, r2
 800164e:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8001650:	7efa      	ldrb	r2, [r7, #27]
 8001652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	4313      	orrs	r3, r2
 800165c:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	43db      	mvns	r3, r3
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	4013      	ands	r3, r2
 8001666:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8001668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	4313      	orrs	r3, r2
 8001674:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	3228      	adds	r2, #40	; 0x28
 800167c:	6979      	ldr	r1, [r7, #20]
 800167e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001682:	3734      	adds	r7, #52	; 0x34
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800169e:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f023 0303 	bic.w	r3, r3, #3
 80016a6:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop

080016c4 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	75fb      	strb	r3, [r7, #23]
 80016d2:	e009      	b.n	80016e8 <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
 80016d6:	4a39      	ldr	r2, [pc, #228]	; (80017bc <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80016d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fe89 	bl	80013f4 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80016e2:	7dfb      	ldrb	r3, [r7, #23]
 80016e4:	3301      	adds	r3, #1
 80016e6:	75fb      	strb	r3, [r7, #23]
 80016e8:	7dfb      	ldrb	r3, [r7, #23]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d9f2      	bls.n	80016d4 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }

  conv_start_mask = (uint32_t) 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d002      	beq.n	8001706 <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8001700:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001704:	613b      	str	r3, [r7, #16]
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001706:	2300      	movs	r3, #0
 8001708:	75fb      	strb	r3, [r7, #23]
 800170a:	e021      	b.n	8001750 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 800170c:	7dfb      	ldrb	r3, [r7, #23]
 800170e:	4a2b      	ldr	r2, [pc, #172]	; (80017bc <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001718:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001720:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800172a:	b2db      	uxtb	r3, r3
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4313      	orrs	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]

    /* Program the start mode */
    reg |= conv_start_mask;
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	4a1f      	ldr	r2, [pc, #124]	; (80017bc <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	3301      	adds	r3, #1
 800174e:	75fb      	strb	r3, [r7, #23]
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	2b03      	cmp	r3, #3
 8001754:	d9da      	bls.n	800170c <XMC_VADC_GLOBAL_BackgroundInit+0x48>

  }
#endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800175e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f043 0201 	orr.w	r2, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d107      	bne.n	8001794 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800178a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001794:	2300      	movs	r3, #0
 8001796:	75fb      	strb	r3, [r7, #23]
 8001798:	e009      	b.n	80017ae <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 800179a:	7dfb      	ldrb	r3, [r7, #23]
 800179c:	4a07      	ldr	r2, [pc, #28]	; (80017bc <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 800179e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fe14 	bl	80013d0 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
 80017aa:	3301      	adds	r3, #1
 80017ac:	75fb      	strb	r3, [r7, #23]
 80017ae:	7dfb      	ldrb	r3, [r7, #23]
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d9f2      	bls.n	800179a <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
#endif

}
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	08004b80 	.word	0x08004b80

080017c0 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  prio  = (uint32_t)config->channel_priority;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7a1b      	ldrb	r3, [r3, #8]
 80017d0:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d8:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2201      	movs	r2, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	4013      	ands	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7a5b      	ldrb	r3, [r3, #9]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	db29      	blt.n	800185e <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d10a      	bne.n	800182a <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8001814:	2308      	movs	r3, #8
 8001816:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800181e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001828:	e00c      	b.n	8001844 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d109      	bne.n	8001844 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800183a:	f023 021f 	bic.w	r2, r3, #31
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	7a52      	ldrb	r2, [r2, #9]
 800184e:	b251      	sxtb	r1, r2
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	fa01 f202 	lsl.w	r2, r1, r2
 8001856:	431a      	orrs	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	431a      	orrs	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6819      	ldr	r1, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	3280      	adds	r2, #128	; 0x80
 800187a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800187e:	3724      	adds	r7, #36	; 0x24
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <_sbrk+0x5c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <_sbrk+0x5c>)
 800189a:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <_sbrk+0x60>)
 800189c:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <_sbrk+0x5c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3303      	adds	r3, #3
 80018a8:	f023 0303 	bic.w	r3, r3, #3
 80018ac:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <_sbrk+0x5c>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	4a0d      	ldr	r2, [pc, #52]	; (80018ec <_sbrk+0x64>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d207      	bcs.n	80018cc <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <_sbrk+0x5c>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <_sbrk+0x5c>)
 80018c6:	6013      	str	r3, [r2, #0]
    return (base);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	e006      	b.n	80018da <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 80018cc:	f003 f85e 	bl	800498c <__errno>
 80018d0:	4602      	mov	r2, r0
 80018d2:	230c      	movs	r3, #12
 80018d4:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000128 	.word	0x20000128
 80018e8:	200002d8 	.word	0x200002d8
 80018ec:	2000ffc0 	.word	0x2000ffc0

080018f0 <_init>:

/* Init */
void _init(void)
{}
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7a5b      	ldrb	r3, [r3, #9]
 800190c:	f083 0301 	eor.w	r3, r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00d      	beq.n	8001932 <GLOBAL_CAN_Init+0x36>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4610      	mov	r0, r2
 8001920:	2101      	movs	r1, #1
 8001922:	461a      	mov	r2, r3
 8001924:	f7ff fbc0 	bl	80010a8 <XMC_CAN_InitEx>
#endif
    handle->init_status = true;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8001932:	7bfb      	ldrb	r3, [r7, #15]

}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	3310      	adds	r3, #16
 8001950:	4619      	mov	r1, r3
 8001952:	2301      	movs	r3, #1
 8001954:	408b      	lsls	r3, r1
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL));
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7e1b      	ldrb	r3, [r3, #24]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d149      	bne.n	8001a0c <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695a      	ldr	r2, [r3, #20]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	f7ff fd4e 	bl	8001424 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e02f      	b.n	80019ee <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001996:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4608      	mov	r0, r1
 80019a4:	4619      	mov	r1, r3
 80019a6:	f7ff fde1 	bl	800156c <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	2103      	movs	r1, #3
 80019b8:	f7ff fe68 	bl	800168c <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c4:	7a1b      	ldrb	r3, [r3, #8]
 80019c6:	f083 0301 	eor.w	r3, r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	4618      	mov	r0, r3
 80019d6:	68f9      	ldr	r1, [r7, #12]
 80019d8:	f7ff ffb0 	bl	800193c <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	2200      	movs	r2, #0
 80019e6:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3301      	adds	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d9cc      	bls.n	800198e <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7e5b      	ldrb	r3, [r3, #25]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fd5d 	bl	80014c0 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7e1b      	ldrb	r3, [r3, #24]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3b04      	subs	r3, #4
 8001a28:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a30:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	3b04      	subs	r3, #4
 8001a36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f023 0201 	bic.w	r2, r3, #1
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3b04      	subs	r3, #4
 8001a46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001a48:	4a0c      	ldr	r2, [pc, #48]	; (8001a7c <pxPortInitialiseStack+0x64>)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3b14      	subs	r3, #20
 8001a52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	3b04      	subs	r3, #4
 8001a5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f06f 0202 	mvn.w	r2, #2
 8001a66:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3b20      	subs	r3, #32
 8001a6c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	08001a81 	.word	0x08001a81

08001a80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <prvTaskExitError+0x4c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a92:	d009      	beq.n	8001aa8 <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001a94:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001a98:	f383 8811 	msr	BASEPRI, r3
 8001a9c:	f3bf 8f6f 	isb	sy
 8001aa0:	f3bf 8f4f 	dsb	sy
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	e7fe      	b.n	8001aa6 <prvTaskExitError+0x26>
 8001aa8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001aac:	f383 8811 	msr	BASEPRI, r3
 8001ab0:	f3bf 8f6f 	isb	sy
 8001ab4:	f3bf 8f4f 	dsb	sy
 8001ab8:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001aba:	bf00      	nop
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0fc      	beq.n	8001abc <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	20000058 	.word	0x20000058

08001ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <pxCurrentTCBConst2>)
 8001ad2:	6819      	ldr	r1, [r3, #0]
 8001ad4:	6808      	ldr	r0, [r1, #0]
 8001ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ada:	f380 8809 	msr	PSP, r0
 8001ade:	f3bf 8f6f 	isb	sy
 8001ae2:	f04f 0000 	mov.w	r0, #0
 8001ae6:	f380 8811 	msr	BASEPRI, r0
 8001aea:	4770      	bx	lr
 8001aec:	f3af 8000 	nop.w

08001af0 <pxCurrentTCBConst2>:
 8001af0:	20000134 	.word	0x20000134
 8001af4:	f3af 8000 	nop.w
 8001af8:	f3af 8000 	nop.w
 8001afc:	f3af 8000 	nop.w

08001b00 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001b00:	4808      	ldr	r0, [pc, #32]	; (8001b24 <prvPortStartFirstTask+0x24>)
 8001b02:	6800      	ldr	r0, [r0, #0]
 8001b04:	6800      	ldr	r0, [r0, #0]
 8001b06:	f380 8808 	msr	MSP, r0
 8001b0a:	f04f 0000 	mov.w	r0, #0
 8001b0e:	f380 8814 	msr	CONTROL, r0
 8001b12:	b662      	cpsie	i
 8001b14:	b661      	cpsie	f
 8001b16:	f3bf 8f4f 	dsb	sy
 8001b1a:	f3bf 8f6f 	isb	sy
 8001b1e:	df00      	svc	0
 8001b20:	bf00      	nop
 8001b22:	0000      	.short	0x0000
 8001b24:	e000ed08 	.word	0xe000ed08

08001b28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001b2e:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <xPortStartScheduler+0x118>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a44      	ldr	r2, [pc, #272]	; (8001c44 <xPortStartScheduler+0x11c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d109      	bne.n	8001b4c <xPortStartScheduler+0x24>
 8001b38:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001b3c:	f383 8811 	msr	BASEPRI, r3
 8001b40:	f3bf 8f6f 	isb	sy
 8001b44:	f3bf 8f4f 	dsb	sy
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	e7fe      	b.n	8001b4a <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001b4c:	4b3c      	ldr	r3, [pc, #240]	; (8001c40 <xPortStartScheduler+0x118>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a3d      	ldr	r2, [pc, #244]	; (8001c48 <xPortStartScheduler+0x120>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d109      	bne.n	8001b6a <xPortStartScheduler+0x42>
 8001b56:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001b5a:	f383 8811 	msr	BASEPRI, r3
 8001b5e:	f3bf 8f6f 	isb	sy
 8001b62:	f3bf 8f4f 	dsb	sy
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	e7fe      	b.n	8001b68 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001b6a:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <xPortStartScheduler+0x124>)
 8001b6c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	22ff      	movs	r2, #255	; 0xff
 8001b7a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	f023 0303 	bic.w	r3, r3, #3
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <xPortStartScheduler+0x128>)
 8001b90:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001b92:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <xPortStartScheduler+0x12c>)
 8001b94:	2207      	movs	r2, #7
 8001b96:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001b98:	e009      	b.n	8001bae <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8001b9a:	4b2e      	ldr	r3, [pc, #184]	; (8001c54 <xPortStartScheduler+0x12c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	4a2c      	ldr	r2, [pc, #176]	; (8001c54 <xPortStartScheduler+0x12c>)
 8001ba2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	70fb      	strb	r3, [r7, #3]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	dbef      	blt.n	8001b9a <xPortStartScheduler+0x72>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <xPortStartScheduler+0x12c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d009      	beq.n	8001bda <xPortStartScheduler+0xb2>
 8001bc6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001bca:	f383 8811 	msr	BASEPRI, r3
 8001bce:	f3bf 8f6f 	isb	sy
 8001bd2:	f3bf 8f4f 	dsb	sy
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	e7fe      	b.n	8001bd8 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <xPortStartScheduler+0x12c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	4a1c      	ldr	r2, [pc, #112]	; (8001c54 <xPortStartScheduler+0x12c>)
 8001be2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <xPortStartScheduler+0x12c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001bec:	4a19      	ldr	r2, [pc, #100]	; (8001c54 <xPortStartScheduler+0x12c>)
 8001bee:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001bf8:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <xPortStartScheduler+0x130>)
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <xPortStartScheduler+0x130>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f443 037c 	orr.w	r3, r3, #16515072	; 0xfc0000
 8001c02:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001c04:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <xPortStartScheduler+0x130>)
 8001c06:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <xPortStartScheduler+0x130>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f043 437c 	orr.w	r3, r3, #4227858432	; 0xfc000000
 8001c0e:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001c10:	f000 f8d6 	bl	8001dc0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <xPortStartScheduler+0x134>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001c1a:	f000 f8f3 	bl	8001e04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001c1e:	4a10      	ldr	r2, [pc, #64]	; (8001c60 <xPortStartScheduler+0x138>)
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <xPortStartScheduler+0x138>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001c28:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001c2a:	f7ff ff69 	bl	8001b00 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001c2e:	f001 fad5 	bl	80031dc <vTaskSwitchContext>
    prvTaskExitError();
 8001c32:	f7ff ff25 	bl	8001a80 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	e000ed00 	.word	0xe000ed00
 8001c44:	410fc271 	.word	0x410fc271
 8001c48:	410fc270 	.word	0x410fc270
 8001c4c:	e000e400 	.word	0xe000e400
 8001c50:	2000012c 	.word	0x2000012c
 8001c54:	20000130 	.word	0x20000130
 8001c58:	e000ed20 	.word	0xe000ed20
 8001c5c:	20000058 	.word	0x20000058
 8001c60:	e000ef34 	.word	0xe000ef34

08001c64 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001c6e:	f383 8811 	msr	BASEPRI, r3
 8001c72:	f3bf 8f6f 	isb	sy
 8001c76:	f3bf 8f4f 	dsb	sy
 8001c7a:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <vPortEnterCritical+0x54>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	3301      	adds	r3, #1
 8001c82:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <vPortEnterCritical+0x54>)
 8001c84:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <vPortEnterCritical+0x54>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d10e      	bne.n	8001cac <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <vPortEnterCritical+0x58>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d009      	beq.n	8001cac <vPortEnterCritical+0x48>
 8001c98:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001c9c:	f383 8811 	msr	BASEPRI, r3
 8001ca0:	f3bf 8f6f 	isb	sy
 8001ca4:	f3bf 8f4f 	dsb	sy
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	e7fe      	b.n	8001caa <vPortEnterCritical+0x46>
    }
}
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000058 	.word	0x20000058
 8001cbc:	e000ed04 	.word	0xe000ed04

08001cc0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <vPortExitCritical+0x48>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d109      	bne.n	8001ce2 <vPortExitCritical+0x22>
 8001cce:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001cd2:	f383 8811 	msr	BASEPRI, r3
 8001cd6:	f3bf 8f6f 	isb	sy
 8001cda:	f3bf 8f4f 	dsb	sy
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	e7fe      	b.n	8001ce0 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <vPortExitCritical+0x48>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <vPortExitCritical+0x48>)
 8001cea:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <vPortExitCritical+0x48>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d104      	bne.n	8001cfe <vPortExitCritical+0x3e>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	20000058 	.word	0x20000058
 8001d0c:	00000000 	.word	0x00000000

08001d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001d10:	f3ef 8009 	mrs	r0, PSP
 8001d14:	f3bf 8f6f 	isb	sy
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <pxCurrentTCBConst>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	f01e 0f10 	tst.w	lr, #16
 8001d20:	bf08      	it	eq
 8001d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d2a:	6010      	str	r0, [r2, #0]
 8001d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001d30:	f04f 00fc 	mov.w	r0, #252	; 0xfc
 8001d34:	f380 8811 	msr	BASEPRI, r0
 8001d38:	f3bf 8f4f 	dsb	sy
 8001d3c:	f3bf 8f6f 	isb	sy
 8001d40:	f001 fa4c 	bl	80031dc <vTaskSwitchContext>
 8001d44:	f04f 0000 	mov.w	r0, #0
 8001d48:	f380 8811 	msr	BASEPRI, r0
 8001d4c:	bc09      	pop	{r0, r3}
 8001d4e:	6819      	ldr	r1, [r3, #0]
 8001d50:	6808      	ldr	r0, [r1, #0]
 8001d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d56:	f01e 0f10 	tst.w	lr, #16
 8001d5a:	bf08      	it	eq
 8001d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001d60:	f380 8809 	msr	PSP, r0
 8001d64:	f3bf 8f6f 	isb	sy
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	f3af 8000 	nop.w

08001d70 <pxCurrentTCBConst>:
 8001d70:	20000134 	.word	0x20000134
 8001d74:	f3af 8000 	nop.w
 8001d78:	f3af 8000 	nop.w
 8001d7c:	f3af 8000 	nop.w

08001d80 <SysTick_Handler>:
    );
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001d86:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001d8a:	f383 8811 	msr	BASEPRI, r3
 8001d8e:	f3bf 8f6f 	isb	sy
 8001d92:	f3bf 8f4f 	dsb	sy
 8001d96:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001d98:	f001 f966 	bl	8003068 <xTaskIncrementTick>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <SysTick_Handler+0x3c>)
 8001da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	2300      	movs	r3, #0
 8001dac:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	e000ed04 	.word	0xe000ed04

08001dc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <vPortSetupTimerInterrupt+0x30>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <vPortSetupTimerInterrupt+0x34>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001dd0:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <vPortSetupTimerInterrupt+0x38>)
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <vPortSetupTimerInterrupt+0x3c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	490a      	ldr	r1, [pc, #40]	; (8001e00 <vPortSetupTimerInterrupt+0x40>)
 8001dd8:	fba1 1303 	umull	r1, r3, r1, r3
 8001ddc:	099b      	lsrs	r3, r3, #6
 8001dde:	3b01      	subs	r3, #1
 8001de0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001de2:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <vPortSetupTimerInterrupt+0x30>)
 8001de4:	2207      	movs	r2, #7
 8001de6:	601a      	str	r2, [r3, #0]
}
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e010 	.word	0xe000e010
 8001df4:	e000e018 	.word	0xe000e018
 8001df8:	e000e014 	.word	0xe000e014
 8001dfc:	2000ffc0 	.word	0x2000ffc0
 8001e00:	10624dd3 	.word	0x10624dd3

08001e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001e04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001e14 <vPortEnableVFP+0x10>
 8001e08:	6801      	ldr	r1, [r0, #0]
 8001e0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001e0e:	6001      	str	r1, [r0, #0]
 8001e10:	4770      	bx	lr
 8001e12:	0000      	.short	0x0000
 8001e14:	e000ed88 	.word	0xe000ed88

08001e18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001e1e:	f3ef 8305 	mrs	r3, IPSR
 8001e22:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b0f      	cmp	r3, #15
 8001e28:	d913      	bls.n	8001e52 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001e2a:	4a15      	ldr	r2, [pc, #84]	; (8001e80 <vPortValidateInterruptPriority+0x68>)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001e34:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <vPortValidateInterruptPriority+0x6c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	7afa      	ldrb	r2, [r7, #11]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d209      	bcs.n	8001e52 <vPortValidateInterruptPriority+0x3a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001e3e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001e42:	f383 8811 	msr	BASEPRI, r3
 8001e46:	f3bf 8f6f 	isb	sy
 8001e4a:	f3bf 8f4f 	dsb	sy
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	e7fe      	b.n	8001e50 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <vPortValidateInterruptPriority+0x70>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <vPortValidateInterruptPriority+0x74>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d909      	bls.n	8001e76 <vPortValidateInterruptPriority+0x5e>
 8001e62:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001e66:	f383 8811 	msr	BASEPRI, r3
 8001e6a:	f3bf 8f6f 	isb	sy
 8001e6e:	f3bf 8f4f 	dsb	sy
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	e7fe      	b.n	8001e74 <vPortValidateInterruptPriority+0x5c>
    }
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000e3f0 	.word	0xe000e3f0
 8001e84:	2000012c 	.word	0x2000012c
 8001e88:	e000ed0c 	.word	0xe000ed0c
 8001e8c:	20000130 	.word	0x20000130

08001e90 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 8001e98:	f001 f82a 	bl	8002ef0 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f002 fda1 	bl	80049e4 <malloc>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001ea6:	f001 f831 	bl	8002f0c <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
    if( pv )
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d006      	beq.n	8001ed0 <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 8001ec2:	f001 f815 	bl	8002ef0 <vTaskSuspendAll>
        {
            free( pv );
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f002 fd94 	bl	80049f4 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 8001ecc:	f001 f81e 	bl	8002f0c <xTaskResumeAll>
    }
}
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop

08001ed8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f103 0208 	add.w	r2, r3, #8
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f103 0208 	add.w	r2, r3, #8
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f103 0208 	add.w	r2, r3, #8
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop

08001f18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	601a      	str	r2, [r3, #0]
}
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop

08001f78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8e:	d103      	bne.n	8001f98 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	e00c      	b.n	8001fb2 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3308      	adds	r3, #8
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	e002      	b.n	8001fa6 <vListInsert+0x2e>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d9f6      	bls.n	8001fa0 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	601a      	str	r2, [r3, #0]
}
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6892      	ldr	r2, [r2, #8]
 8001ffe:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6852      	ldr	r2, [r2, #4]
 8002008:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	429a      	cmp	r2, r3
 8002012:	d103      	bne.n	800201c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	1e5a      	subs	r2, r3, #1
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d109      	bne.n	8002064 <xQueueGenericReset+0x28>
 8002050:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002054:	f383 8811 	msr	BASEPRI, r3
 8002058:	f3bf 8f6f 	isb	sy
 800205c:	f3bf 8f4f 	dsb	sy
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	e7fe      	b.n	8002062 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8002064:	f7ff fdfe 	bl	8001c64 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002070:	68f9      	ldr	r1, [r7, #12]
 8002072:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	441a      	add	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	3b01      	subs	r3, #1
 8002096:	68f9      	ldr	r1, [r7, #12]
 8002098:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	441a      	add	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	22ff      	movs	r2, #255	; 0xff
 80020a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	22ff      	movs	r2, #255	; 0xff
 80020b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d114      	bne.n	80020e4 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01a      	beq.n	80020f8 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	3310      	adds	r3, #16
 80020c6:	4618      	mov	r0, r3
 80020c8:	f001 f92e 	bl	8003328 <xTaskRemoveFromEventList>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d012      	beq.n	80020f8 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <xQueueGenericReset+0xcc>)
 80020d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	f3bf 8f4f 	dsb	sy
 80020de:	f3bf 8f6f 	isb	sy
 80020e2:	e009      	b.n	80020f8 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	3310      	adds	r3, #16
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fef5 	bl	8001ed8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	3324      	adds	r3, #36	; 0x24
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fef0 	bl	8001ed8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80020f8:	f7ff fde2 	bl	8001cc0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80020fc:	2301      	movs	r3, #1
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	e000ed04 	.word	0xe000ed04

0800210c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b08d      	sub	sp, #52	; 0x34
 8002110:	af02      	add	r7, sp, #8
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	4613      	mov	r3, r2
 8002118:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d109      	bne.n	8002134 <xQueueGenericCreate+0x28>
 8002120:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002124:	f383 8811 	msr	BASEPRI, r3
 8002128:	f3bf 8f6f 	isb	sy
 800212c:	f3bf 8f4f 	dsb	sy
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	e7fe      	b.n	8002132 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	fb02 f303 	mul.w	r3, r2, r3
 800213c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <xQueueGenericCreate+0x46>
 8002144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	fbb2 f2f3 	udiv	r2, r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	429a      	cmp	r2, r3
 8002150:	d101      	bne.n	8002156 <xQueueGenericCreate+0x4a>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <xQueueGenericCreate+0x4c>
 8002156:	2300      	movs	r3, #0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <xQueueGenericCreate+0x64>
 800215c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002160:	f383 8811 	msr	BASEPRI, r3
 8002164:	f3bf 8f6f 	isb	sy
 8002168:	f3bf 8f4f 	dsb	sy
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	e7fe      	b.n	800216e <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	429a      	cmp	r2, r3
 800217a:	d809      	bhi.n	8002190 <xQueueGenericCreate+0x84>
 800217c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	e7fe      	b.n	800218e <xQueueGenericCreate+0x82>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	3354      	adds	r3, #84	; 0x54
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fe7b 	bl	8001e90 <pvPortMalloc>
 800219a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00d      	beq.n	80021be <xQueueGenericCreate+0xb2>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3354      	adds	r3, #84	; 0x54
 80021aa:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80021ac:	79fc      	ldrb	r4, [r7, #7]
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	4623      	mov	r3, r4
 80021ba:	f000 f805 	bl	80021c8 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80021be:	6a3b      	ldr	r3, [r7, #32]
    }
 80021c0:	4618      	mov	r0, r3
 80021c2:	372c      	adds	r7, #44	; 0x2c
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd90      	pop	{r4, r7, pc}

080021c8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d103      	bne.n	80021e4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	e002      	b.n	80021ea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80021f6:	69b8      	ldr	r0, [r7, #24]
 80021f8:	2101      	movs	r1, #1
 80021fa:	f7ff ff1f 	bl	800203c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
        {
            pxNewQueue->pxQueueSetContainer = NULL;
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2200      	movs	r2, #0
 800220a:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop

08002214 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08e      	sub	sp, #56	; 0x38
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002222:	2300      	movs	r3, #0
 8002224:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222c:	2b00      	cmp	r3, #0
 800222e:	d109      	bne.n	8002244 <xQueueGenericSend+0x30>
 8002230:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002234:	f383 8811 	msr	BASEPRI, r3
 8002238:	f3bf 8f6f 	isb	sy
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
 8002242:	e7fe      	b.n	8002242 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d103      	bne.n	8002252 <xQueueGenericSend+0x3e>
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <xQueueGenericSend+0x42>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <xQueueGenericSend+0x44>
 8002256:	2300      	movs	r3, #0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <xQueueGenericSend+0x5c>
 800225c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002260:	f383 8811 	msr	BASEPRI, r3
 8002264:	f3bf 8f6f 	isb	sy
 8002268:	f3bf 8f4f 	dsb	sy
 800226c:	623b      	str	r3, [r7, #32]
 800226e:	e7fe      	b.n	800226e <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d103      	bne.n	800227e <xQueueGenericSend+0x6a>
 8002276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <xQueueGenericSend+0x6e>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <xQueueGenericSend+0x70>
 8002282:	2300      	movs	r3, #0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d109      	bne.n	800229c <xQueueGenericSend+0x88>
 8002288:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800228c:	f383 8811 	msr	BASEPRI, r3
 8002290:	f3bf 8f6f 	isb	sy
 8002294:	f3bf 8f4f 	dsb	sy
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	e7fe      	b.n	800229a <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800229c:	f001 f9ea 	bl	8003674 <xTaskGetSchedulerState>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <xQueueGenericSend+0x98>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <xQueueGenericSend+0x9c>
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <xQueueGenericSend+0x9e>
 80022b0:	2300      	movs	r3, #0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <xQueueGenericSend+0xb6>
 80022b6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80022ba:	f383 8811 	msr	BASEPRI, r3
 80022be:	f3bf 8f6f 	isb	sy
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	61bb      	str	r3, [r7, #24]
 80022c8:	e7fe      	b.n	80022c8 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80022ca:	f7ff fccb 	bl	8001c64 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d302      	bcc.n	80022e0 <xQueueGenericSend+0xcc>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d147      	bne.n	8002370 <xQueueGenericSend+0x15c>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c

                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	f000 fa4c 	bl	8002788 <prvCopyDataToQueue>
 80022f0:	62b8      	str	r0, [r7, #40]	; 0x28

                        if( pxQueue->pxQueueSetContainer != NULL )
 80022f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d016      	beq.n	8002328 <xQueueGenericSend+0x114>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d104      	bne.n	800230a <xQueueGenericSend+0xf6>
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <xQueueGenericSend+0xf6>
 8002306:	bf00      	nop
 8002308:	e02e      	b.n	8002368 <xQueueGenericSend+0x154>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800230a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800230c:	f000 fbb8 	bl	8002a80 <prvNotifyQueueSetContainer>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d028      	beq.n	8002368 <xQueueGenericSend+0x154>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock. A context switch is required. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002316:	4b4c      	ldr	r3, [pc, #304]	; (8002448 <xQueueGenericSend+0x234>)
 8002318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	f3bf 8f6f 	isb	sy
 8002326:	e01f      	b.n	8002368 <xQueueGenericSend+0x154>
                        }
                        else
                        {
                            /* If there was a task waiting for data to arrive on the
                             * queue then unblock it now. */
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	2b00      	cmp	r3, #0
 800232e:	d010      	beq.n	8002352 <xQueueGenericSend+0x13e>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	3324      	adds	r3, #36	; 0x24
 8002334:	4618      	mov	r0, r3
 8002336:	f000 fff7 	bl	8003328 <xTaskRemoveFromEventList>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <xQueueGenericSend+0x154>
                                {
                                    /* The unblocked task has a priority higher than
                                     * our own so yield immediately.  Yes it is ok to
                                     * do this from within the critical section - the
                                     * kernel takes care of that. */
                                    queueYIELD_IF_USING_PREEMPTION();
 8002340:	4b41      	ldr	r3, [pc, #260]	; (8002448 <xQueueGenericSend+0x234>)
 8002342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	f3bf 8f4f 	dsb	sy
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	e00a      	b.n	8002368 <xQueueGenericSend+0x154>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }
                            }
                            else if( xYieldRequired != pdFALSE )
 8002352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <xQueueGenericSend+0x154>
                            {
                                /* This path is a special case that will only get
                                 * executed if the task was holding multiple mutexes
                                 * and the mutexes were given back in an order that is
                                 * different to that in which they were taken. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002358:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <xQueueGenericSend+0x234>)
 800235a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002368:	f7ff fcaa 	bl	8001cc0 <vPortExitCritical>
                return pdPASS;
 800236c:	2301      	movs	r3, #1
 800236e:	e067      	b.n	8002440 <xQueueGenericSend+0x22c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002376:	f7ff fca3 	bl	8001cc0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800237a:	2300      	movs	r3, #0
 800237c:	e060      	b.n	8002440 <xQueueGenericSend+0x22c>
                }
                else if( xEntryTimeSet == pdFALSE )
 800237e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002380:	2b00      	cmp	r3, #0
 8002382:	d106      	bne.n	8002392 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002384:	f107 0310 	add.w	r3, r7, #16
 8002388:	4618      	mov	r0, r3
 800238a:	f001 f831 	bl	80033f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800238e:	2301      	movs	r3, #1
 8002390:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002392:	f7ff fc95 	bl	8001cc0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002396:	f000 fdab 	bl	8002ef0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800239a:	f7ff fc63 	bl	8001c64 <vPortEnterCritical>
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	b25b      	sxtb	r3, r3
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d103      	bne.n	80023b6 <xQueueGenericSend+0x1a2>
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	b25b      	sxtb	r3, r3
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d103      	bne.n	80023ce <xQueueGenericSend+0x1ba>
 80023c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023ce:	f7ff fc77 	bl	8001cc0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023d2:	f107 0210 	add.w	r2, r7, #16
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	f001 f81e 	bl	800341c <xTaskCheckForTimeOut>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d124      	bne.n	8002430 <xQueueGenericSend+0x21c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80023e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023e8:	f000 fad4 	bl	8002994 <prvIsQueueFull>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d018      	beq.n	8002424 <xQueueGenericSend+0x210>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80023f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f4:	f103 0210 	add.w	r2, r3, #16
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	f000 ff47 	bl	8003290 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002402:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002404:	f000 fa52 	bl	80028ac <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002408:	f000 fd80 	bl	8002f0c <xTaskResumeAll>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d115      	bne.n	800243e <xQueueGenericSend+0x22a>
                {
                    portYIELD_WITHIN_API();
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <xQueueGenericSend+0x234>)
 8002414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	f3bf 8f4f 	dsb	sy
 800241e:	f3bf 8f6f 	isb	sy
 8002422:	e00c      	b.n	800243e <xQueueGenericSend+0x22a>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002426:	f000 fa41 	bl	80028ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800242a:	f000 fd6f 	bl	8002f0c <xTaskResumeAll>
 800242e:	e74c      	b.n	80022ca <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002432:	f000 fa3b 	bl	80028ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002436:	f000 fd69 	bl	8002f0c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800243a:	2300      	movs	r3, #0
 800243c:	e000      	b.n	8002440 <xQueueGenericSend+0x22c>
        }
    } /*lint -restore */
 800243e:	e744      	b.n	80022ca <xQueueGenericSend+0xb6>
}
 8002440:	4618      	mov	r0, r3
 8002442:	3738      	adds	r7, #56	; 0x38
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	e000ed04 	.word	0xe000ed04

0800244c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b090      	sub	sp, #64	; 0x40
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800245e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002460:	2b00      	cmp	r3, #0
 8002462:	d109      	bne.n	8002478 <xQueueGenericSendFromISR+0x2c>
 8002464:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002468:	f383 8811 	msr	BASEPRI, r3
 800246c:	f3bf 8f6f 	isb	sy
 8002470:	f3bf 8f4f 	dsb	sy
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
 8002476:	e7fe      	b.n	8002476 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <xQueueGenericSendFromISR+0x3a>
 800247e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <xQueueGenericSendFromISR+0x3e>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <xQueueGenericSendFromISR+0x40>
 800248a:	2300      	movs	r3, #0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d109      	bne.n	80024a4 <xQueueGenericSendFromISR+0x58>
 8002490:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
 80024a2:	e7fe      	b.n	80024a2 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d103      	bne.n	80024b2 <xQueueGenericSendFromISR+0x66>
 80024aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <xQueueGenericSendFromISR+0x6a>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <xQueueGenericSendFromISR+0x6c>
 80024b6:	2300      	movs	r3, #0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d109      	bne.n	80024d0 <xQueueGenericSendFromISR+0x84>
 80024bc:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	623b      	str	r3, [r7, #32]
 80024ce:	e7fe      	b.n	80024ce <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80024d0:	f7ff fca2 	bl	8001e18 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80024d4:	f3ef 8211 	mrs	r2, BASEPRI
 80024d8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	61fa      	str	r2, [r7, #28]
 80024ea:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80024ec:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d302      	bcc.n	8002502 <xQueueGenericSendFromISR+0xb6>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d156      	bne.n	80025b0 <xQueueGenericSendFromISR+0x164>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002508:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800250c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002512:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	f000 f936 	bl	8002788 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800251c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d12b      	bne.n	800257e <xQueueGenericSendFromISR+0x132>
            {
                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        if( pxQueue->pxQueueSetContainer != NULL )
 8002526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252a:	2b00      	cmp	r3, #0
 800252c:	d014      	beq.n	8002558 <xQueueGenericSendFromISR+0x10c>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d104      	bne.n	800253e <xQueueGenericSendFromISR+0xf2>
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <xQueueGenericSendFromISR+0xf2>
 800253a:	bf00      	nop
 800253c:	e035      	b.n	80025aa <xQueueGenericSendFromISR+0x15e>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800253e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002540:	f000 fa9e 	bl	8002a80 <prvNotifyQueueSetContainer>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d02f      	beq.n	80025aa <xQueueGenericSendFromISR+0x15e>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock.  A context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d02c      	beq.n	80025aa <xQueueGenericSendFromISR+0x15e>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e028      	b.n	80025aa <xQueueGenericSendFromISR+0x15e>
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else
                        {
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	2b00      	cmp	r3, #0
 800255e:	d024      	beq.n	80025aa <xQueueGenericSendFromISR+0x15e>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	3324      	adds	r3, #36	; 0x24
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fedf 	bl	8003328 <xTaskRemoveFromEventList>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d01c      	beq.n	80025aa <xQueueGenericSendFromISR+0x15e>
                                {
                                    /* The task waiting has a higher priority so
                                     *  record that a context switch is required. */
                                    if( pxHigherPriorityTaskWoken != NULL )
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d019      	beq.n	80025aa <xQueueGenericSendFromISR+0x15e>
                                    {
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e015      	b.n	80025aa <xQueueGenericSendFromISR+0x15e>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800257e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002582:	2b7f      	cmp	r3, #127	; 0x7f
 8002584:	d109      	bne.n	800259a <xQueueGenericSendFromISR+0x14e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002586:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800258a:	f383 8811 	msr	BASEPRI, r3
 800258e:	f3bf 8f6f 	isb	sy
 8002592:	f3bf 8f4f 	dsb	sy
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	e7fe      	b.n	8002598 <xQueueGenericSendFromISR+0x14c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800259a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800259e:	3301      	adds	r3, #1
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80025aa:	2301      	movs	r3, #1
 80025ac:	63fb      	str	r3, [r7, #60]	; 0x3c
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
        {
 80025ae:	e001      	b.n	80025b4 <xQueueGenericSendFromISR+0x168>
            xReturn = pdPASS;
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b6:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80025be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3740      	adds	r7, #64	; 0x40
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08c      	sub	sp, #48	; 0x30
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <xQueueReceive+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80025e2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80025e6:	f383 8811 	msr	BASEPRI, r3
 80025ea:	f3bf 8f6f 	isb	sy
 80025ee:	f3bf 8f4f 	dsb	sy
 80025f2:	623b      	str	r3, [r7, #32]
 80025f4:	e7fe      	b.n	80025f4 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d103      	bne.n	8002604 <xQueueReceive+0x3c>
 80025fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <xQueueReceive+0x40>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <xQueueReceive+0x42>
 8002608:	2300      	movs	r3, #0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d109      	bne.n	8002622 <xQueueReceive+0x5a>
 800260e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002612:	f383 8811 	msr	BASEPRI, r3
 8002616:	f3bf 8f6f 	isb	sy
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	e7fe      	b.n	8002620 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002622:	f001 f827 	bl	8003674 <xTaskGetSchedulerState>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <xQueueReceive+0x6a>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <xQueueReceive+0x6e>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <xQueueReceive+0x70>
 8002636:	2300      	movs	r3, #0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d109      	bne.n	8002650 <xQueueReceive+0x88>
 800263c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002640:	f383 8811 	msr	BASEPRI, r3
 8002644:	f3bf 8f6f 	isb	sy
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	e7fe      	b.n	800264e <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002650:	f7ff fb08 	bl	8001c64 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01f      	beq.n	80026a0 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	f000 f8fc 	bl	8002860 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	1e5a      	subs	r2, r3, #1
 800266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00f      	beq.n	8002698 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	3310      	adds	r3, #16
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fe53 	bl	8003328 <xTaskRemoveFromEventList>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002688:	4b3e      	ldr	r3, [pc, #248]	; (8002784 <xQueueReceive+0x1bc>)
 800268a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002698:	f7ff fb12 	bl	8001cc0 <vPortExitCritical>
                return pdPASS;
 800269c:	2301      	movs	r3, #1
 800269e:	e06d      	b.n	800277c <xQueueReceive+0x1b4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d103      	bne.n	80026ae <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026a6:	f7ff fb0b 	bl	8001cc0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e066      	b.n	800277c <xQueueReceive+0x1b4>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d106      	bne.n	80026c2 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026b4:	f107 0310 	add.w	r3, r7, #16
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fe99 	bl	80033f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026be:	2301      	movs	r3, #1
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026c2:	f7ff fafd 	bl	8001cc0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026c6:	f000 fc13 	bl	8002ef0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026ca:	f7ff facb 	bl	8001c64 <vPortEnterCritical>
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	b25b      	sxtb	r3, r3
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026dc:	d103      	bne.n	80026e6 <xQueueReceive+0x11e>
 80026de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	b25b      	sxtb	r3, r3
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d103      	bne.n	80026fe <xQueueReceive+0x136>
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026fe:	f7ff fadf 	bl	8001cc0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002702:	f107 0210 	add.w	r2, r7, #16
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	f000 fe86 	bl	800341c <xTaskCheckForTimeOut>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d124      	bne.n	8002760 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002718:	f000 f926 	bl	8002968 <prvIsQueueEmpty>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d018      	beq.n	8002754 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	f000 fdaf 	bl	8003290 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002734:	f000 f8ba 	bl	80028ac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002738:	f000 fbe8 	bl	8002f0c <xTaskResumeAll>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d11b      	bne.n	800277a <xQueueReceive+0x1b2>
                {
                    portYIELD_WITHIN_API();
 8002742:	4b10      	ldr	r3, [pc, #64]	; (8002784 <xQueueReceive+0x1bc>)
 8002744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	e012      	b.n	800277a <xQueueReceive+0x1b2>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002756:	f000 f8a9 	bl	80028ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800275a:	f000 fbd7 	bl	8002f0c <xTaskResumeAll>
 800275e:	e777      	b.n	8002650 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002762:	f000 f8a3 	bl	80028ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002766:	f000 fbd1 	bl	8002f0c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800276a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800276c:	f000 f8fc 	bl	8002968 <prvIsQueueEmpty>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <xQueueReceive+0x1b2>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002776:	2300      	movs	r3, #0
 8002778:	e000      	b.n	800277c <xQueueReceive+0x1b4>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
 800277a:	e769      	b.n	8002650 <xQueueReceive+0x88>
}
 800277c:	4618      	mov	r0, r3
 800277e:	3730      	adds	r7, #48	; 0x30
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	e000ed04 	.word	0xe000ed04

08002788 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10d      	bne.n	80027c2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d14f      	bne.n	800284e <prvCopyDataToQueue+0xc6>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 ff7c 	bl	80036b0 <xTaskPriorityDisinherit>
 80027b8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	e045      	b.n	800284e <prvCopyDataToQueue+0xc6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d11a      	bne.n	80027fe <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	4610      	mov	r0, r2
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	461a      	mov	r2, r3
 80027d6:	f002 f915 	bl	8004a04 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	441a      	add	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d32c      	bcc.n	800284e <prvCopyDataToQueue+0xc6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	e027      	b.n	800284e <prvCopyDataToQueue+0xc6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	4610      	mov	r0, r2
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	461a      	mov	r2, r3
 800280c:	f002 f8fa 	bl	8004a04 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	425b      	negs	r3, r3
 800281a:	441a      	add	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d207      	bcs.n	800283c <prvCopyDataToQueue+0xb4>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	425b      	negs	r3, r3
 8002836:	441a      	add	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d105      	bne.n	800284e <prvCopyDataToQueue+0xc6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <prvCopyDataToQueue+0xc6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	3b01      	subs	r3, #1
 800284c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002856:	697b      	ldr	r3, [r7, #20]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d019      	beq.n	80028a6 <prvCopyDataFromQueue+0x46>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	441a      	add	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	429a      	cmp	r2, r3
 800288a:	d303      	bcc.n	8002894 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	6838      	ldr	r0, [r7, #0]
 800289e:	4611      	mov	r1, r2
 80028a0:	461a      	mov	r2, r3
 80028a2:	f002 f8af 	bl	8004a04 <memcpy>
    }
}
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80028b4:	f7ff f9d6 	bl	8001c64 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028be:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028c0:	e020      	b.n	8002904 <prvUnlockQueue+0x58>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d008      	beq.n	80028dc <prvUnlockQueue+0x30>
                    {
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f8d8 	bl	8002a80 <prvNotifyQueueSetContainer>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d012      	beq.n	80028fc <prvUnlockQueue+0x50>
                        {
                            /* The queue is a member of a queue set, and posting to
                             * the queue set caused a higher priority task to unblock.
                             * A context switch is required. */
                            vTaskMissedYield();
 80028d6:	f000 fe15 	bl	8003504 <vTaskMissedYield>
 80028da:	e00f      	b.n	80028fc <prvUnlockQueue+0x50>
                    else
                    {
                        /* Tasks that are removed from the event list will get
                         * added to the pending ready list as the scheduler is still
                         * suspended. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <prvUnlockQueue+0x4e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3324      	adds	r3, #36	; 0x24
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fd1d 	bl	8003328 <xTaskRemoveFromEventList>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <prvUnlockQueue+0x50>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                vTaskMissedYield();
 80028f4:	f000 fe06 	bl	8003504 <vTaskMissedYield>
 80028f8:	e000      	b.n	80028fc <prvUnlockQueue+0x50>
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else
                        {
                            break;
 80028fa:	e007      	b.n	800290c <prvUnlockQueue+0x60>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	3b01      	subs	r3, #1
 8002900:	b2db      	uxtb	r3, r3
 8002902:	73fb      	strb	r3, [r7, #15]
    taskENTER_CRITICAL();
    {
        int8_t cTxLock = pxQueue->cTxLock;

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002908:	2b00      	cmp	r3, #0
 800290a:	dcda      	bgt.n	80028c2 <prvUnlockQueue+0x16>
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	22ff      	movs	r2, #255	; 0xff
 8002910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002914:	f7ff f9d4 	bl	8001cc0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002918:	f7ff f9a4 	bl	8001c64 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002922:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002924:	e013      	b.n	800294e <prvUnlockQueue+0xa2>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00e      	beq.n	800294c <prvUnlockQueue+0xa0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3310      	adds	r3, #16
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fcf8 	bl	8003328 <xTaskRemoveFromEventList>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 800293e:	f000 fde1 	bl	8003504 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002942:	7bbb      	ldrb	r3, [r7, #14]
 8002944:	3b01      	subs	r3, #1
 8002946:	b2db      	uxtb	r3, r3
 8002948:	73bb      	strb	r3, [r7, #14]
 800294a:	e000      	b.n	800294e <prvUnlockQueue+0xa2>
            }
            else
            {
                break;
 800294c:	e003      	b.n	8002956 <prvUnlockQueue+0xaa>
    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
    {
        int8_t cRxLock = pxQueue->cRxLock;

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800294e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002952:	2b00      	cmp	r3, #0
 8002954:	dce7      	bgt.n	8002926 <prvUnlockQueue+0x7a>
            {
                break;
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	22ff      	movs	r2, #255	; 0xff
 800295a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800295e:	f7ff f9af 	bl	8001cc0 <vPortExitCritical>
}
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002970:	f7ff f978 	bl	8001c64 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800297c:	2301      	movs	r3, #1
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	e001      	b.n	8002986 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002986:	f7ff f99b 	bl	8001cc0 <vPortExitCritical>

    return xReturn;
 800298a:	68fb      	ldr	r3, [r7, #12]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800299c:	f7ff f962 	bl	8001c64 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d102      	bne.n	80029b2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80029ac:	2301      	movs	r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	e001      	b.n	80029b6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80029b6:	f7ff f983 	bl	8001cc0 <vPortExitCritical>

    return xReturn;
 80029ba:	68fb      	ldr	r3, [r7, #12]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	e014      	b.n	80029fe <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80029d4:	4a0e      	ldr	r2, [pc, #56]	; (8002a10 <vQueueAddToRegistry+0x4c>)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10b      	bne.n	80029f8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80029e0:	490b      	ldr	r1, [pc, #44]	; (8002a10 <vQueueAddToRegistry+0x4c>)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80029ea:	4a09      	ldr	r2, [pc, #36]	; (8002a10 <vQueueAddToRegistry+0x4c>)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80029f6:	e005      	b.n	8002a04 <vQueueAddToRegistry+0x40>
    {
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3301      	adds	r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b07      	cmp	r3, #7
 8002a02:	d9e7      	bls.n	80029d4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20000290 	.word	0x20000290

08002a14 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a24:	f7ff f91e 	bl	8001c64 <vPortEnterCritical>
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	b25b      	sxtb	r3, r3
 8002a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a36:	d103      	bne.n	8002a40 <vQueueWaitForMessageRestricted+0x2c>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	b25b      	sxtb	r3, r3
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4e:	d103      	bne.n	8002a58 <vQueueWaitForMessageRestricted+0x44>
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a58:	f7ff f932 	bl	8001cc0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d106      	bne.n	8002a72 <vQueueWaitForMessageRestricted+0x5e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	3324      	adds	r3, #36	; 0x24
 8002a68:	4618      	mov	r0, r3
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	f000 fc31 	bl	80032d4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a72:	6978      	ldr	r0, [r7, #20]
 8002a74:	f7ff ff1a 	bl	80028ac <prvUnlockQueue>
    }
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop

08002a80 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a8c:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]

        /* This function must be called form a critical section. */

        configASSERT( pxQueueSetContainer );
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <prvNotifyQueueSetContainer+0x2c>
 8002a98:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	e7fe      	b.n	8002aaa <prvNotifyQueueSetContainer+0x2a>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d309      	bcc.n	8002acc <prvNotifyQueueSetContainer+0x4c>
 8002ab8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	e7fe      	b.n	8002aca <prvNotifyQueueSetContainer+0x4a>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d234      	bcs.n	8002b42 <prvNotifyQueueSetContainer+0xc2>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ade:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	69b8      	ldr	r0, [r7, #24]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f7ff fe4e 	bl	8002788 <prvCopyDataToQueue>
 8002aec:	61f8      	str	r0, [r7, #28]

            if( cTxLock == queueUNLOCKED )
 8002aee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af6:	d10e      	bne.n	8002b16 <prvNotifyQueueSetContainer+0x96>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d020      	beq.n	8002b42 <prvNotifyQueueSetContainer+0xc2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	3324      	adds	r3, #36	; 0x24
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fc0f 	bl	8003328 <xTaskRemoveFromEventList>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d018      	beq.n	8002b42 <prvNotifyQueueSetContainer+0xc2>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8002b10:	2301      	movs	r3, #1
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	e015      	b.n	8002b42 <prvNotifyQueueSetContainer+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );
 8002b16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8002b1c:	d109      	bne.n	8002b32 <prvNotifyQueueSetContainer+0xb2>
 8002b1e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	e7fe      	b.n	8002b30 <prvNotifyQueueSetContainer+0xb0>

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b32:	7dfb      	ldrb	r3, [r7, #23]
 8002b34:	3301      	adds	r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b40:	e7ff      	b.n	8002b42 <prvNotifyQueueSetContainer+0xc2>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002b42:	69fb      	ldr	r3, [r7, #28]
    }
 8002b44:	4618      	mov	r0, r3
 8002b46:	3720      	adds	r7, #32
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08c      	sub	sp, #48	; 0x30
 8002b50:	af04      	add	r7, sp, #16
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff f995 	bl	8001e90 <pvPortMalloc>
 8002b66:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00e      	beq.n	8002b8c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b6e:	2070      	movs	r0, #112	; 0x70
 8002b70:	f7ff f98e 	bl	8001e90 <pvPortMalloc>
 8002b74:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	631a      	str	r2, [r3, #48]	; 0x30
 8002b82:	e005      	b.n	8002b90 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002b84:	6978      	ldr	r0, [r7, #20]
 8002b86:	f7ff f995 	bl	8001eb4 <vPortFree>
 8002b8a:	e001      	b.n	8002b90 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d013      	beq.n	8002bbe <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b96:	88fa      	ldrh	r2, [r7, #6]
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	9302      	str	r3, [sp, #8]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	9303      	str	r3, [sp, #12]
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	f000 f80f 	bl	8002bd0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002bb2:	69f8      	ldr	r0, [r7, #28]
 8002bb4:	f000 f8ac 	bl	8002d10 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	61bb      	str	r3, [r7, #24]
 8002bbc:	e002      	b.n	8002bc4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002bc4:	69bb      	ldr	r3, [r7, #24]
    }
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3720      	adds	r7, #32
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop

08002bd0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4610      	mov	r0, r2
 8002be8:	21a5      	movs	r1, #165	; 0xa5
 8002bea:	461a      	mov	r2, r3
 8002bec:	f001 ff15 	bl	8004a1a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	f023 0307 	bic.w	r3, r3, #7
 8002c08:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d009      	beq.n	8002c28 <prvInitialiseNewTask+0x58>
 8002c14:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	e7fe      	b.n	8002c26 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d01e      	beq.n	8002c6c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	e013      	b.n	8002c5c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	4413      	add	r3, r2
 8002c3a:	7819      	ldrb	r1, [r3, #0]
 8002c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	4413      	add	r3, r2
 8002c42:	3330      	adds	r3, #48	; 0x30
 8002c44:	460a      	mov	r2, r1
 8002c46:	711a      	strb	r2, [r3, #4]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d100      	bne.n	8002c56 <prvInitialiseNewTask+0x86>
            {
                break;
 8002c54:	e005      	b.n	8002c62 <prvInitialiseNewTask+0x92>
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	61fb      	str	r3, [r7, #28]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	2b0f      	cmp	r3, #15
 8002c60:	d9e8      	bls.n	8002c34 <prvInitialiseNewTask+0x64>
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c6a:	e003      	b.n	8002c74 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d901      	bls.n	8002c7e <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c88:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c92:	3304      	adds	r3, #4
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff f93f 	bl	8001f18 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	3318      	adds	r3, #24
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff f93a 	bl	8001f18 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ca8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cac:	f1c3 0205 	rsb	r2, r3, #5
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
        {
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	3354      	adds	r3, #84	; 0x54
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	2214      	movs	r2, #20
 8002cc4:	f001 fea9 	bl	8004a1a <memset>
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	3368      	adds	r3, #104	; 0x68
 8002ccc:	4618      	mov	r0, r3
 8002cce:	2100      	movs	r1, #0
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	f001 fea2 	bl	8004a1a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	336c      	adds	r3, #108	; 0x6c
 8002cda:	4618      	mov	r0, r3
 8002cdc:	2100      	movs	r1, #0
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f001 fe9b 	bl	8004a1a <memset>
        }
    #endif

    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            pxNewTCB->ucDelayAborted = pdFALSE;
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cec:	69b8      	ldr	r0, [r7, #24]
 8002cee:	68f9      	ldr	r1, [r7, #12]
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	f7fe fe91 	bl	8001a18 <pxPortInitialiseStack>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <prvInitialiseNewTask+0x138>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d06:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop

08002d10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002d18:	f7fe ffa4 	bl	8001c64 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002d1c:	4b2d      	ldr	r3, [pc, #180]	; (8002dd4 <prvAddNewTaskToReadyList+0xc4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3301      	adds	r3, #1
 8002d22:	4a2c      	ldr	r2, [pc, #176]	; (8002dd4 <prvAddNewTaskToReadyList+0xc4>)
 8002d24:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002d26:	4b2c      	ldr	r3, [pc, #176]	; (8002dd8 <prvAddNewTaskToReadyList+0xc8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002d2e:	4a2a      	ldr	r2, [pc, #168]	; (8002dd8 <prvAddNewTaskToReadyList+0xc8>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d34:	4b27      	ldr	r3, [pc, #156]	; (8002dd4 <prvAddNewTaskToReadyList+0xc4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d110      	bne.n	8002d5e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002d3c:	f000 fc06 	bl	800354c <prvInitialiseTaskLists>
 8002d40:	e00d      	b.n	8002d5e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002d42:	4b26      	ldr	r3, [pc, #152]	; (8002ddc <prvAddNewTaskToReadyList+0xcc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d4a:	4b23      	ldr	r3, [pc, #140]	; (8002dd8 <prvAddNewTaskToReadyList+0xc8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d802      	bhi.n	8002d5e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002d58:	4a1f      	ldr	r2, [pc, #124]	; (8002dd8 <prvAddNewTaskToReadyList+0xc8>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002d5e:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <prvAddNewTaskToReadyList+0xd0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3301      	adds	r3, #1
 8002d64:	4a1e      	ldr	r2, [pc, #120]	; (8002de0 <prvAddNewTaskToReadyList+0xd0>)
 8002d66:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d68:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <prvAddNewTaskToReadyList+0xd0>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	461a      	mov	r2, r3
 8002d76:	2301      	movs	r3, #1
 8002d78:	fa03 f202 	lsl.w	r2, r3, r2
 8002d7c:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <prvAddNewTaskToReadyList+0xd4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <prvAddNewTaskToReadyList+0xd4>)
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4a15      	ldr	r2, [pc, #84]	; (8002de8 <prvAddNewTaskToReadyList+0xd8>)
 8002d94:	441a      	add	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f7ff f8c7 	bl	8001f30 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002da2:	f7fe ff8d 	bl	8001cc0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <prvAddNewTaskToReadyList+0xcc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00e      	beq.n	8002dcc <prvAddNewTaskToReadyList+0xbc>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <prvAddNewTaskToReadyList+0xc8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d207      	bcs.n	8002dcc <prvAddNewTaskToReadyList+0xbc>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <prvAddNewTaskToReadyList+0xdc>)
 8002dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	2000020c 	.word	0x2000020c
 8002dd8:	20000134 	.word	0x20000134
 8002ddc:	20000218 	.word	0x20000218
 8002de0:	20000228 	.word	0x20000228
 8002de4:	20000214 	.word	0x20000214
 8002de8:	20000138 	.word	0x20000138
 8002dec:	e000ed04 	.word	0xe000ed04

08002df0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d016      	beq.n	8002e30 <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002e02:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <vTaskDelay+0x5c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <vTaskDelay+0x2e>
 8002e0a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	e7fe      	b.n	8002e1c <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8002e1e:	f000 f867 	bl	8002ef0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	2100      	movs	r1, #0
 8002e26:	f000 fcbd 	bl	80037a4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002e2a:	f000 f86f 	bl	8002f0c <xTaskResumeAll>
 8002e2e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d107      	bne.n	8002e46 <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <vTaskDelay+0x60>)
 8002e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000234 	.word	0x20000234
 8002e50:	e000ed04 	.word	0xe000ed04

08002e54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <vTaskStartScheduler+0x80>)
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	481d      	ldr	r0, [pc, #116]	; (8002ed8 <vTaskStartScheduler+0x84>)
 8002e64:	491d      	ldr	r1, [pc, #116]	; (8002edc <vTaskStartScheduler+0x88>)
 8002e66:	2282      	movs	r2, #130	; 0x82
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f7ff fe6f 	bl	8002b4c <xTaskCreate>
 8002e6e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d102      	bne.n	8002e7c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002e76:	f000 fcff 	bl	8003878 <xTimerCreateTimerTask>
 8002e7a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d115      	bne.n	8002eae <vTaskStartScheduler+0x5a>
 8002e82:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e94:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <vTaskStartScheduler+0x8c>)
 8002e96:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <vTaskStartScheduler+0x90>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <vTaskStartScheduler+0x94>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002ea8:	f7fe fe3e 	bl	8001b28 <xPortStartScheduler>
 8002eac:	e00d      	b.n	8002eca <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d109      	bne.n	8002eca <vTaskStartScheduler+0x76>
 8002eb6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	e7fe      	b.n	8002ec8 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <vTaskStartScheduler+0x98>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
}
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000230 	.word	0x20000230
 8002ed8:	0800351d 	.word	0x0800351d
 8002edc:	08004bf8 	.word	0x08004bf8
 8002ee0:	2000022c 	.word	0x2000022c
 8002ee4:	20000218 	.word	0x20000218
 8002ee8:	20000210 	.word	0x20000210
 8002eec:	2000005c 	.word	0x2000005c

08002ef0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <vTaskSuspendAll+0x18>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	4a03      	ldr	r2, [pc, #12]	; (8002f08 <vTaskSuspendAll+0x18>)
 8002efc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	20000234 	.word	0x20000234

08002f0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f1a:	4b42      	ldr	r3, [pc, #264]	; (8003024 <xTaskResumeAll+0x118>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <xTaskResumeAll+0x2a>
 8002f22:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	e7fe      	b.n	8002f34 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002f36:	f7fe fe95 	bl	8001c64 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002f3a:	4b3a      	ldr	r3, [pc, #232]	; (8003024 <xTaskResumeAll+0x118>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	4a38      	ldr	r2, [pc, #224]	; (8003024 <xTaskResumeAll+0x118>)
 8002f42:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f44:	4b37      	ldr	r3, [pc, #220]	; (8003024 <xTaskResumeAll+0x118>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d163      	bne.n	8003014 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f4c:	4b36      	ldr	r3, [pc, #216]	; (8003028 <xTaskResumeAll+0x11c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d05f      	beq.n	8003014 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f54:	e030      	b.n	8002fb8 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f56:	4b35      	ldr	r3, [pc, #212]	; (800302c <xTaskResumeAll+0x120>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3318      	adds	r3, #24
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff f840 	bl	8001fe8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff f83b 	bl	8001fe8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	461a      	mov	r2, r3
 8002f78:	2301      	movs	r3, #1
 8002f7a:	fa03 f202 	lsl.w	r2, r3, r2
 8002f7e:	4b2c      	ldr	r3, [pc, #176]	; (8003030 <xTaskResumeAll+0x124>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	4a2a      	ldr	r2, [pc, #168]	; (8003030 <xTaskResumeAll+0x124>)
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4a27      	ldr	r2, [pc, #156]	; (8003034 <xTaskResumeAll+0x128>)
 8002f96:	441a      	add	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f7fe ffc6 	bl	8001f30 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa8:	4b23      	ldr	r3, [pc, #140]	; (8003038 <xTaskResumeAll+0x12c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d302      	bcc.n	8002fb8 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8002fb2:	4b22      	ldr	r3, [pc, #136]	; (800303c <xTaskResumeAll+0x130>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fb8:	4b1c      	ldr	r3, [pc, #112]	; (800302c <xTaskResumeAll+0x120>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ca      	bne.n	8002f56 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fc6:	f000 fb3b 	bl	8003640 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <xTaskResumeAll+0x134>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d010      	beq.n	8002ff8 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002fd6:	f000 f847 	bl	8003068 <xTaskIncrementTick>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8002fe0:	4b16      	ldr	r3, [pc, #88]	; (800303c <xTaskResumeAll+0x130>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f1      	bne.n	8002fd6 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8002ff2:	4b13      	ldr	r3, [pc, #76]	; (8003040 <xTaskResumeAll+0x134>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ff8:	4b10      	ldr	r3, [pc, #64]	; (800303c <xTaskResumeAll+0x130>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003000:	2301      	movs	r3, #1
 8003002:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003004:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <xTaskResumeAll+0x138>)
 8003006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003014:	f7fe fe54 	bl	8001cc0 <vPortExitCritical>

    return xAlreadyYielded;
 8003018:	68bb      	ldr	r3, [r7, #8]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000234 	.word	0x20000234
 8003028:	2000020c 	.word	0x2000020c
 800302c:	200001cc 	.word	0x200001cc
 8003030:	20000214 	.word	0x20000214
 8003034:	20000138 	.word	0x20000138
 8003038:	20000134 	.word	0x20000134
 800303c:	20000220 	.word	0x20000220
 8003040:	2000021c 	.word	0x2000021c
 8003044:	e000ed04 	.word	0xe000ed04

08003048 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <xTaskGetTickCount+0x1c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003054:	687b      	ldr	r3, [r7, #4]
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	20000210 	.word	0x20000210

08003068 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003072:	4b4f      	ldr	r3, [pc, #316]	; (80031b0 <xTaskIncrementTick+0x148>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f040 808f 	bne.w	800319a <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800307c:	4b4d      	ldr	r3, [pc, #308]	; (80031b4 <xTaskIncrementTick+0x14c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003084:	4a4b      	ldr	r2, [pc, #300]	; (80031b4 <xTaskIncrementTick+0x14c>)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d11f      	bne.n	80030d0 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003090:	4b49      	ldr	r3, [pc, #292]	; (80031b8 <xTaskIncrementTick+0x150>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <xTaskIncrementTick+0x46>
 800309a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800309e:	f383 8811 	msr	BASEPRI, r3
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	e7fe      	b.n	80030ac <xTaskIncrementTick+0x44>
 80030ae:	4b42      	ldr	r3, [pc, #264]	; (80031b8 <xTaskIncrementTick+0x150>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	4b41      	ldr	r3, [pc, #260]	; (80031bc <xTaskIncrementTick+0x154>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a3f      	ldr	r2, [pc, #252]	; (80031b8 <xTaskIncrementTick+0x150>)
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4a3f      	ldr	r2, [pc, #252]	; (80031bc <xTaskIncrementTick+0x154>)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b3f      	ldr	r3, [pc, #252]	; (80031c0 <xTaskIncrementTick+0x158>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3301      	adds	r3, #1
 80030c8:	4a3d      	ldr	r2, [pc, #244]	; (80031c0 <xTaskIncrementTick+0x158>)
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	f000 fab8 	bl	8003640 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030d0:	4b3c      	ldr	r3, [pc, #240]	; (80031c4 <xTaskIncrementTick+0x15c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d34a      	bcc.n	8003170 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030da:	4b37      	ldr	r3, [pc, #220]	; (80031b8 <xTaskIncrementTick+0x150>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d104      	bne.n	80030ee <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030e4:	4b37      	ldr	r3, [pc, #220]	; (80031c4 <xTaskIncrementTick+0x15c>)
 80030e6:	f04f 32ff 	mov.w	r2, #4294967295
 80030ea:	601a      	str	r2, [r3, #0]
                    break;
 80030ec:	e040      	b.n	8003170 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030ee:	4b32      	ldr	r3, [pc, #200]	; (80031b8 <xTaskIncrementTick+0x150>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	429a      	cmp	r2, r3
 8003104:	d203      	bcs.n	800310e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003106:	4a2f      	ldr	r2, [pc, #188]	; (80031c4 <xTaskIncrementTick+0x15c>)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800310c:	e030      	b.n	8003170 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	3304      	adds	r3, #4
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe ff68 	bl	8001fe8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	2b00      	cmp	r3, #0
 800311e:	d004      	beq.n	800312a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	3318      	adds	r3, #24
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe ff5f 	bl	8001fe8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	461a      	mov	r2, r3
 8003130:	2301      	movs	r3, #1
 8003132:	fa03 f202 	lsl.w	r2, r3, r2
 8003136:	4b24      	ldr	r3, [pc, #144]	; (80031c8 <xTaskIncrementTick+0x160>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	4a22      	ldr	r2, [pc, #136]	; (80031c8 <xTaskIncrementTick+0x160>)
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4a1f      	ldr	r2, [pc, #124]	; (80031cc <xTaskIncrementTick+0x164>)
 800314e:	441a      	add	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	3304      	adds	r3, #4
 8003154:	4610      	mov	r0, r2
 8003156:	4619      	mov	r1, r3
 8003158:	f7fe feea 	bl	8001f30 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003160:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <xTaskIncrementTick+0x168>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003166:	429a      	cmp	r2, r3
 8003168:	d301      	bcc.n	800316e <xTaskIncrementTick+0x106>
                            {
                                xSwitchRequired = pdTRUE;
 800316a:	2301      	movs	r3, #1
 800316c:	617b      	str	r3, [r7, #20]
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                    #endif /* configUSE_PREEMPTION */
                }
            }
 800316e:	e7b4      	b.n	80030da <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003170:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <xTaskIncrementTick+0x168>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003176:	4915      	ldr	r1, [pc, #84]	; (80031cc <xTaskIncrementTick+0x164>)
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d901      	bls.n	800318c <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8003188:	2301      	movs	r3, #1
 800318a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <xTaskIncrementTick+0x16c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <xTaskIncrementTick+0x130>
                {
                    xSwitchRequired = pdTRUE;
 8003194:	2301      	movs	r3, #1
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	e004      	b.n	80031a4 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800319a:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <xTaskIncrementTick+0x170>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3301      	adds	r3, #1
 80031a0:	4a0d      	ldr	r2, [pc, #52]	; (80031d8 <xTaskIncrementTick+0x170>)
 80031a2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80031a4:	697b      	ldr	r3, [r7, #20]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000234 	.word	0x20000234
 80031b4:	20000210 	.word	0x20000210
 80031b8:	200001c4 	.word	0x200001c4
 80031bc:	200001c8 	.word	0x200001c8
 80031c0:	20000224 	.word	0x20000224
 80031c4:	2000022c 	.word	0x2000022c
 80031c8:	20000214 	.word	0x20000214
 80031cc:	20000138 	.word	0x20000138
 80031d0:	20000134 	.word	0x20000134
 80031d4:	20000220 	.word	0x20000220
 80031d8:	2000021c 	.word	0x2000021c

080031dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031e2:	4b26      	ldr	r3, [pc, #152]	; (800327c <vTaskSwitchContext+0xa0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80031ea:	4b25      	ldr	r3, [pc, #148]	; (8003280 <vTaskSwitchContext+0xa4>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e03e      	b.n	8003270 <vTaskSwitchContext+0x94>
    }
    else
    {
        xYieldPending = pdFALSE;
 80031f2:	4b23      	ldr	r3, [pc, #140]	; (8003280 <vTaskSwitchContext+0xa4>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031f8:	4b22      	ldr	r3, [pc, #136]	; (8003284 <vTaskSwitchContext+0xa8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]
/* Generic helper function. */
        __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
        {
            uint8_t ucReturn;

            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	72fb      	strb	r3, [r7, #11]

            return ucReturn;
 8003206:	7afb      	ldrb	r3, [r7, #11]
 8003208:	f1c3 031f 	rsb	r3, r3, #31
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	491e      	ldr	r1, [pc, #120]	; (8003288 <vTaskSwitchContext+0xac>)
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <vTaskSwitchContext+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003222:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	607b      	str	r3, [r7, #4]
 8003234:	e7fe      	b.n	8003234 <vTaskSwitchContext+0x58>
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4a11      	ldr	r2, [pc, #68]	; (8003288 <vTaskSwitchContext+0xac>)
 8003242:	4413      	add	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	605a      	str	r2, [r3, #4]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	3308      	adds	r3, #8
 8003258:	429a      	cmp	r2, r3
 800325a:	d104      	bne.n	8003266 <vTaskSwitchContext+0x8a>
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4a07      	ldr	r2, [pc, #28]	; (800328c <vTaskSwitchContext+0xb0>)
 800326e:	6013      	str	r3, [r2, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20000234 	.word	0x20000234
 8003280:	20000220 	.word	0x20000220
 8003284:	20000214 	.word	0x20000214
 8003288:	20000138 	.word	0x20000138
 800328c:	20000134 	.word	0x20000134

08003290 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d109      	bne.n	80032b4 <vTaskPlaceOnEventList+0x24>
 80032a0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	e7fe      	b.n	80032b2 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <vTaskPlaceOnEventList+0x40>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3318      	adds	r3, #24
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	4619      	mov	r1, r3
 80032be:	f7fe fe5b 	bl	8001f78 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032c2:	6838      	ldr	r0, [r7, #0]
 80032c4:	2101      	movs	r1, #1
 80032c6:	f000 fa6d 	bl	80037a4 <prvAddCurrentTaskToDelayedList>
}
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20000134 	.word	0x20000134

080032d4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <vTaskPlaceOnEventListRestricted+0x26>
 80032e6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	e7fe      	b.n	80032f8 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <vTaskPlaceOnEventListRestricted+0x50>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3318      	adds	r3, #24
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	4619      	mov	r1, r3
 8003304:	f7fe fe14 	bl	8001f30 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 800330e:	f04f 33ff 	mov.w	r3, #4294967295
 8003312:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003314:	68b8      	ldr	r0, [r7, #8]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	f000 fa44 	bl	80037a4 <prvAddCurrentTaskToDelayedList>
    }
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000134 	.word	0x20000134

08003328 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d109      	bne.n	8003352 <xTaskRemoveFromEventList+0x2a>
 800333e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003342:	f383 8811 	msr	BASEPRI, r3
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	e7fe      	b.n	8003350 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	3318      	adds	r3, #24
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe fe46 	bl	8001fe8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800335c:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <xTaskRemoveFromEventList+0xb0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d11e      	bne.n	80033a2 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	3304      	adds	r3, #4
 8003368:	4618      	mov	r0, r3
 800336a:	f7fe fe3d 	bl	8001fe8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	461a      	mov	r2, r3
 8003374:	2301      	movs	r3, #1
 8003376:	fa03 f202 	lsl.w	r2, r3, r2
 800337a:	4b18      	ldr	r3, [pc, #96]	; (80033dc <xTaskRemoveFromEventList+0xb4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4313      	orrs	r3, r2
 8003380:	4a16      	ldr	r2, [pc, #88]	; (80033dc <xTaskRemoveFromEventList+0xb4>)
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <xTaskRemoveFromEventList+0xb8>)
 8003392:	441a      	add	r2, r3
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	3304      	adds	r3, #4
 8003398:	4610      	mov	r0, r2
 800339a:	4619      	mov	r1, r3
 800339c:	f7fe fdc8 	bl	8001f30 <vListInsertEnd>
 80033a0:	e005      	b.n	80033ae <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	3318      	adds	r3, #24
 80033a6:	480f      	ldr	r0, [pc, #60]	; (80033e4 <xTaskRemoveFromEventList+0xbc>)
 80033a8:	4619      	mov	r1, r3
 80033aa:	f7fe fdc1 	bl	8001f30 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <xTaskRemoveFromEventList+0xc0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d905      	bls.n	80033c8 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80033bc:	2301      	movs	r3, #1
 80033be:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <xTaskRemoveFromEventList+0xc4>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e001      	b.n	80033cc <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80033cc:	697b      	ldr	r3, [r7, #20]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000234 	.word	0x20000234
 80033dc:	20000214 	.word	0x20000214
 80033e0:	20000138 	.word	0x20000138
 80033e4:	200001cc 	.word	0x200001cc
 80033e8:	20000134 	.word	0x20000134
 80033ec:	20000220 	.word	0x20000220

080033f0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <vTaskInternalSetTimeOutState+0x24>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <vTaskInternalSetTimeOutState+0x28>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	605a      	str	r2, [r3, #4]
}
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20000224 	.word	0x20000224
 8003418:	20000210 	.word	0x20000210

0800341c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d109      	bne.n	8003440 <xTaskCheckForTimeOut+0x24>
 800342c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	e7fe      	b.n	800343e <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <xTaskCheckForTimeOut+0x3e>
 8003446:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e7fe      	b.n	8003458 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 800345a:	f7fe fc03 	bl	8001c64 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800345e:	4b26      	ldr	r3, [pc, #152]	; (80034f8 <xTaskCheckForTimeOut+0xdc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	617b      	str	r3, [r7, #20]

        #if ( INCLUDE_xTaskAbortDelay == 1 )
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800346e:	4b23      	ldr	r3, [pc, #140]	; (80034fc <xTaskCheckForTimeOut+0xe0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8003476:	2b00      	cmp	r3, #0
 8003478:	d007      	beq.n	800348a <xTaskCheckForTimeOut+0x6e>
            {
                /* The delay was aborted, which is not the same as a time out,
                 * but has the same result. */
                pxCurrentTCB->ucDelayAborted = pdFALSE;
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <xTaskCheckForTimeOut+0xe0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
                xReturn = pdTRUE;
 8003484:	2301      	movs	r3, #1
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	e02e      	b.n	80034e8 <xTaskCheckForTimeOut+0xcc>
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d102      	bne.n	800349a <xTaskCheckForTimeOut+0x7e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	e026      	b.n	80034e8 <xTaskCheckForTimeOut+0xcc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4b18      	ldr	r3, [pc, #96]	; (8003500 <xTaskCheckForTimeOut+0xe4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d00a      	beq.n	80034bc <xTaskCheckForTimeOut+0xa0>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d805      	bhi.n	80034bc <xTaskCheckForTimeOut+0xa0>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80034b0:	2301      	movs	r3, #1
 80034b2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e015      	b.n	80034e8 <xTaskCheckForTimeOut+0xcc>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d90b      	bls.n	80034de <xTaskCheckForTimeOut+0xc2>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	1ad2      	subs	r2, r2, r3
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ff8c 	bl	80033f0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	e004      	b.n	80034e8 <xTaskCheckForTimeOut+0xcc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80034e4:	2301      	movs	r3, #1
 80034e6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80034e8:	f7fe fbea 	bl	8001cc0 <vPortExitCritical>

    return xReturn;
 80034ec:	69fb      	ldr	r3, [r7, #28]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000210 	.word	0x20000210
 80034fc:	20000134 	.word	0x20000134
 8003500:	20000224 	.word	0x20000224

08003504 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <vTaskMissedYield+0x14>)
 800350a:	2201      	movs	r2, #1
 800350c:	601a      	str	r2, [r3, #0]
}
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000220 	.word	0x20000220

0800351c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003524:	f000 f850 	bl	80035c8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <prvIdleTask+0x28>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d907      	bls.n	8003540 <prvIdleTask+0x24>
                {
                    taskYIELD();
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <prvIdleTask+0x2c>)
 8003532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	f3bf 8f6f 	isb	sy
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_TICKLESS_IDLE */
    }
 8003540:	e7f0      	b.n	8003524 <prvIdleTask+0x8>
 8003542:	bf00      	nop
 8003544:	20000138 	.word	0x20000138
 8003548:	e000ed04 	.word	0xe000ed04

0800354c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003552:	2300      	movs	r3, #0
 8003554:	607b      	str	r3, [r7, #4]
 8003556:	e00c      	b.n	8003572 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <prvInitialiseTaskLists+0x5c>)
 8003564:	4413      	add	r3, r2
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe fcb6 	bl	8001ed8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3301      	adds	r3, #1
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b04      	cmp	r3, #4
 8003576:	d9ef      	bls.n	8003558 <prvInitialiseTaskLists+0xc>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    }

    vListInitialise( &xDelayedTaskList1 );
 8003578:	480c      	ldr	r0, [pc, #48]	; (80035ac <prvInitialiseTaskLists+0x60>)
 800357a:	f7fe fcad 	bl	8001ed8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800357e:	480c      	ldr	r0, [pc, #48]	; (80035b0 <prvInitialiseTaskLists+0x64>)
 8003580:	f7fe fcaa 	bl	8001ed8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003584:	480b      	ldr	r0, [pc, #44]	; (80035b4 <prvInitialiseTaskLists+0x68>)
 8003586:	f7fe fca7 	bl	8001ed8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800358a:	480b      	ldr	r0, [pc, #44]	; (80035b8 <prvInitialiseTaskLists+0x6c>)
 800358c:	f7fe fca4 	bl	8001ed8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003590:	480a      	ldr	r0, [pc, #40]	; (80035bc <prvInitialiseTaskLists+0x70>)
 8003592:	f7fe fca1 	bl	8001ed8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <prvInitialiseTaskLists+0x74>)
 8003598:	4a04      	ldr	r2, [pc, #16]	; (80035ac <prvInitialiseTaskLists+0x60>)
 800359a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <prvInitialiseTaskLists+0x78>)
 800359e:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <prvInitialiseTaskLists+0x64>)
 80035a0:	601a      	str	r2, [r3, #0]
}
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000138 	.word	0x20000138
 80035ac:	2000019c 	.word	0x2000019c
 80035b0:	200001b0 	.word	0x200001b0
 80035b4:	200001cc 	.word	0x200001cc
 80035b8:	200001e0 	.word	0x200001e0
 80035bc:	200001f8 	.word	0x200001f8
 80035c0:	200001c4 	.word	0x200001c4
 80035c4:	200001c8 	.word	0x200001c8

080035c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035ce:	e019      	b.n	8003604 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80035d0:	f7fe fb48 	bl	8001c64 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <prvCheckTasksWaitingTermination+0x4c>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fe fd01 	bl	8001fe8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80035e6:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <prvCheckTasksWaitingTermination+0x50>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	4a0a      	ldr	r2, [pc, #40]	; (8003618 <prvCheckTasksWaitingTermination+0x50>)
 80035ee:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80035f0:	4b0a      	ldr	r3, [pc, #40]	; (800361c <prvCheckTasksWaitingTermination+0x54>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	4a09      	ldr	r2, [pc, #36]	; (800361c <prvCheckTasksWaitingTermination+0x54>)
 80035f8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80035fa:	f7fe fb61 	bl	8001cc0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f80e 	bl	8003620 <prvDeleteTCB>
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <prvCheckTasksWaitingTermination+0x54>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e1      	bne.n	80035d0 <prvCheckTasksWaitingTermination+0x8>

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	200001e0 	.word	0x200001e0
 8003618:	2000020c 	.word	0x2000020c
 800361c:	200001f4 	.word	0x200001f4

08003620 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	4618      	mov	r0, r3
 800362e:	f7fe fc41 	bl	8001eb4 <vPortFree>
                vPortFree( pxTCB );
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fe fc3e 	bl	8001eb4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop

08003640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003644:	4b09      	ldr	r3, [pc, #36]	; (800366c <prvResetNextTaskUnblockTime+0x2c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d104      	bne.n	8003658 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800364e:	4b08      	ldr	r3, [pc, #32]	; (8003670 <prvResetNextTaskUnblockTime+0x30>)
 8003650:	f04f 32ff 	mov.w	r2, #4294967295
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	e005      	b.n	8003664 <prvResetNextTaskUnblockTime+0x24>
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <prvResetNextTaskUnblockTime+0x2c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a03      	ldr	r2, [pc, #12]	; (8003670 <prvResetNextTaskUnblockTime+0x30>)
 8003662:	6013      	str	r3, [r2, #0]
    }
}
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	200001c4 	.word	0x200001c4
 8003670:	2000022c 	.word	0x2000022c

08003674 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <xTaskGetSchedulerState+0x34>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003682:	2301      	movs	r3, #1
 8003684:	607b      	str	r3, [r7, #4]
 8003686:	e008      	b.n	800369a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003688:	4b08      	ldr	r3, [pc, #32]	; (80036ac <xTaskGetSchedulerState+0x38>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d102      	bne.n	8003696 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003690:	2302      	movs	r3, #2
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	e001      	b.n	800369a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800369a:	687b      	ldr	r3, [r7, #4]
    }
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	20000218 	.word	0x20000218
 80036ac:	20000234 	.word	0x20000234

080036b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d063      	beq.n	800378e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80036c6:	4b34      	ldr	r3, [pc, #208]	; (8003798 <xTaskPriorityDisinherit+0xe8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d009      	beq.n	80036e4 <xTaskPriorityDisinherit+0x34>
 80036d0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	e7fe      	b.n	80036e2 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <xTaskPriorityDisinherit+0x50>
 80036ec:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	e7fe      	b.n	80036fe <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003704:	1e5a      	subs	r2, r3, #1
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003712:	429a      	cmp	r2, r3
 8003714:	d03b      	beq.n	800378e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371a:	2b00      	cmp	r3, #0
 800371c:	d137      	bne.n	800378e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	3304      	adds	r3, #4
 8003722:	4618      	mov	r0, r3
 8003724:	f7fe fc60 	bl	8001fe8 <uxListRemove>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10a      	bne.n	8003744 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	461a      	mov	r2, r3
 8003734:	2301      	movs	r3, #1
 8003736:	4093      	lsls	r3, r2
 8003738:	43da      	mvns	r2, r3
 800373a:	4b18      	ldr	r3, [pc, #96]	; (800379c <xTaskPriorityDisinherit+0xec>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4013      	ands	r3, r2
 8003740:	4a16      	ldr	r2, [pc, #88]	; (800379c <xTaskPriorityDisinherit+0xec>)
 8003742:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	f1c3 0205 	rsb	r2, r3, #5
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	461a      	mov	r2, r3
 800375e:	2301      	movs	r3, #1
 8003760:	fa03 f202 	lsl.w	r2, r3, r2
 8003764:	4b0d      	ldr	r3, [pc, #52]	; (800379c <xTaskPriorityDisinherit+0xec>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4313      	orrs	r3, r2
 800376a:	4a0c      	ldr	r2, [pc, #48]	; (800379c <xTaskPriorityDisinherit+0xec>)
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4a09      	ldr	r2, [pc, #36]	; (80037a0 <xTaskPriorityDisinherit+0xf0>)
 800377c:	441a      	add	r2, r3
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	3304      	adds	r3, #4
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	f7fe fbd3 	bl	8001f30 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800378a:	2301      	movs	r3, #1
 800378c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800378e:	697b      	ldr	r3, [r7, #20]
    }
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	20000134 	.word	0x20000134
 800379c:	20000214 	.word	0x20000214
 80037a0:	20000138 	.word	0x20000138

080037a4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80037ae:	4b2b      	ldr	r3, [pc, #172]	; (800385c <prvAddCurrentTaskToDelayedList+0xb8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60fb      	str	r3, [r7, #12]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            /* About to enter a delayed list, so ensure the ucDelayAborted flag is
             * reset to pdFALSE so it can be detected as having been set to pdTRUE
             * when the task leaves the Blocked state. */
            pxCurrentTCB->ucDelayAborted = pdFALSE;
 80037b4:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <prvAddCurrentTaskToDelayedList+0xbc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037be:	4b28      	ldr	r3, [pc, #160]	; (8003860 <prvAddCurrentTaskToDelayedList+0xbc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3304      	adds	r3, #4
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe fc0f 	bl	8001fe8 <uxListRemove>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <prvAddCurrentTaskToDelayedList+0x44>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037d0:	4b23      	ldr	r3, [pc, #140]	; (8003860 <prvAddCurrentTaskToDelayedList+0xbc>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	461a      	mov	r2, r3
 80037d8:	2301      	movs	r3, #1
 80037da:	4093      	lsls	r3, r2
 80037dc:	43da      	mvns	r2, r3
 80037de:	4b21      	ldr	r3, [pc, #132]	; (8003864 <prvAddCurrentTaskToDelayedList+0xc0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4013      	ands	r3, r2
 80037e4:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <prvAddCurrentTaskToDelayedList+0xc0>)
 80037e6:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ee:	d10a      	bne.n	8003806 <prvAddCurrentTaskToDelayedList+0x62>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <prvAddCurrentTaskToDelayedList+0x62>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037f6:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <prvAddCurrentTaskToDelayedList+0xbc>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3304      	adds	r3, #4
 80037fc:	481a      	ldr	r0, [pc, #104]	; (8003868 <prvAddCurrentTaskToDelayedList+0xc4>)
 80037fe:	4619      	mov	r1, r3
 8003800:	f7fe fb96 	bl	8001f30 <vListInsertEnd>
 8003804:	e026      	b.n	8003854 <prvAddCurrentTaskToDelayedList+0xb0>
            else
            {
                /* Calculate the time at which the task should be woken if the event
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4413      	add	r3, r2
 800380c:	60bb      	str	r3, [r7, #8]

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800380e:	4b14      	ldr	r3, [pc, #80]	; (8003860 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	605a      	str	r2, [r3, #4]

                if( xTimeToWake < xConstTickCount )
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	429a      	cmp	r2, r3
 800381c:	d209      	bcs.n	8003832 <prvAddCurrentTaskToDelayedList+0x8e>
                {
                    /* Wake time has overflowed.  Place this item in the overflow
                     * list. */
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800381e:	4b13      	ldr	r3, [pc, #76]	; (800386c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3304      	adds	r3, #4
 8003828:	4610      	mov	r0, r2
 800382a:	4619      	mov	r1, r3
 800382c:	f7fe fba4 	bl	8001f78 <vListInsert>
 8003830:	e010      	b.n	8003854 <prvAddCurrentTaskToDelayedList+0xb0>
                }
                else
                {
                    /* The wake time has not overflowed, so the current block list
                     * is used. */
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003832:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3304      	adds	r3, #4
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	f7fe fb9a 	bl	8001f78 <vListInsert>

                    /* If the task entering the blocked state was placed at the
                     * head of the list of blocked tasks then xNextTaskUnblockTime
                     * needs to be updated too. */
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <prvAddCurrentTaskToDelayedList+0xd0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	429a      	cmp	r2, r3
 800384c:	d202      	bcs.n	8003854 <prvAddCurrentTaskToDelayedList+0xb0>
                    {
                        xNextTaskUnblockTime = xTimeToWake;
 800384e:	4a09      	ldr	r2, [pc, #36]	; (8003874 <prvAddCurrentTaskToDelayedList+0xd0>)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	6013      	str	r3, [r2, #0]

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000210 	.word	0x20000210
 8003860:	20000134 	.word	0x20000134
 8003864:	20000214 	.word	0x20000214
 8003868:	200001f8 	.word	0x200001f8
 800386c:	200001c8 	.word	0x200001c8
 8003870:	200001c4 	.word	0x200001c4
 8003874:	2000022c 	.word	0x2000022c

08003878 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800387e:	2300      	movs	r3, #0
 8003880:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003882:	f000 faf3 	bl	8003e6c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <xTimerCreateTimerTask+0x54>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00b      	beq.n	80038a6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800388e:	2302      	movs	r3, #2
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <xTimerCreateTimerTask+0x58>)
 8003894:	9301      	str	r3, [sp, #4]
 8003896:	480f      	ldr	r0, [pc, #60]	; (80038d4 <xTimerCreateTimerTask+0x5c>)
 8003898:	490f      	ldr	r1, [pc, #60]	; (80038d8 <xTimerCreateTimerTask+0x60>)
 800389a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800389e:	2300      	movs	r3, #0
 80038a0:	f7ff f954 	bl	8002b4c <xTaskCreate>
 80038a4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <xTimerCreateTimerTask+0x48>
 80038ac:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	603b      	str	r3, [r7, #0]
 80038be:	e7fe      	b.n	80038be <xTimerCreateTimerTask+0x46>
        return xReturn;
 80038c0:	687b      	ldr	r3, [r7, #4]
    }
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000268 	.word	0x20000268
 80038d0:	2000026c 	.word	0x2000026c
 80038d4:	08003a19 	.word	0x08003a19
 80038d8:	08004c10 	.word	0x08004c10

080038dc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	; 0x28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d109      	bne.n	8003908 <xTimerGenericCommand+0x2c>
 80038f4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	623b      	str	r3, [r7, #32]
 8003906:	e7fe      	b.n	8003906 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003908:	4b1c      	ldr	r3, [pc, #112]	; (800397c <xTimerGenericCommand+0xa0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d030      	beq.n	8003972 <xTimerGenericCommand+0x96>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	61bb      	str	r3, [r7, #24]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b05      	cmp	r3, #5
 8003920:	dc1c      	bgt.n	800395c <xTimerGenericCommand+0x80>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003922:	f7ff fea7 	bl	8003674 <xTaskGetSchedulerState>
 8003926:	4603      	mov	r3, r0
 8003928:	2b02      	cmp	r3, #2
 800392a:	d10b      	bne.n	8003944 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800392c:	4b13      	ldr	r3, [pc, #76]	; (800397c <xTimerGenericCommand+0xa0>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	f107 0310 	add.w	r3, r7, #16
 8003934:	4610      	mov	r0, r2
 8003936:	4619      	mov	r1, r3
 8003938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800393a:	2300      	movs	r3, #0
 800393c:	f7fe fc6a 	bl	8002214 <xQueueGenericSend>
 8003940:	6278      	str	r0, [r7, #36]	; 0x24
 8003942:	e016      	b.n	8003972 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003944:	4b0d      	ldr	r3, [pc, #52]	; (800397c <xTimerGenericCommand+0xa0>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	f107 0310 	add.w	r3, r7, #16
 800394c:	4610      	mov	r0, r2
 800394e:	4619      	mov	r1, r3
 8003950:	2200      	movs	r2, #0
 8003952:	2300      	movs	r3, #0
 8003954:	f7fe fc5e 	bl	8002214 <xQueueGenericSend>
 8003958:	6278      	str	r0, [r7, #36]	; 0x24
 800395a:	e00a      	b.n	8003972 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800395c:	4b07      	ldr	r3, [pc, #28]	; (800397c <xTimerGenericCommand+0xa0>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	f107 0310 	add.w	r3, r7, #16
 8003964:	4610      	mov	r0, r2
 8003966:	4619      	mov	r1, r3
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	2300      	movs	r3, #0
 800396c:	f7fe fd6e 	bl	800244c <xQueueGenericSendFromISR>
 8003970:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003974:	4618      	mov	r0, r3
 8003976:	3728      	adds	r7, #40	; 0x28
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20000268 	.word	0x20000268

08003980 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af02      	add	r7, sp, #8
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800398a:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <prvProcessExpiredTimer+0x94>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	3304      	adds	r3, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fb25 	bl	8001fe8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d022      	beq.n	80039f2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	699a      	ldr	r2, [r3, #24]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4413      	add	r3, r2
 80039b4:	6978      	ldr	r0, [r7, #20]
 80039b6:	4619      	mov	r1, r3
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f000 f8d0 	bl	8003b60 <prvInsertTimerInActiveList>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d01e      	beq.n	8003a04 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80039c6:	2300      	movs	r3, #0
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	6978      	ldr	r0, [r7, #20]
 80039cc:	2100      	movs	r1, #0
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	2300      	movs	r3, #0
 80039d2:	f7ff ff83 	bl	80038dc <xTimerGenericCommand>
 80039d6:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d112      	bne.n	8003a04 <prvProcessExpiredTimer+0x84>
 80039de:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	e7fe      	b.n	80039f0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	6978      	ldr	r0, [r7, #20]
 8003a0a:	4798      	blx	r3
    }
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000260 	.word	0x20000260

08003a18 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a20:	f107 0308 	add.w	r3, r7, #8
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 f857 	bl	8003ad8 <prvGetNextExpireTime>
 8003a2a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	4619      	mov	r1, r3
 8003a32:	f000 f803 	bl	8003a3c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003a36:	f000 f8d5 	bl	8003be4 <prvProcessReceivedCommands>
        }
 8003a3a:	e7f1      	b.n	8003a20 <prvTimerTask+0x8>

08003a3c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003a46:	f7ff fa53 	bl	8002ef0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a4a:	f107 0308 	add.w	r3, r7, #8
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f866 	bl	8003b20 <prvSampleTimeNow>
 8003a54:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d131      	bne.n	8003ac0 <prvProcessTimerOrBlockTask+0x84>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <prvProcessTimerOrBlockTask+0x3c>
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d806      	bhi.n	8003a78 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003a6a:	f7ff fa4f 	bl	8002f0c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	68f9      	ldr	r1, [r7, #12]
 8003a72:	f7ff ff85 	bl	8003980 <prvProcessExpiredTimer>
 8003a76:	e025      	b.n	8003ac4 <prvProcessTimerOrBlockTask+0x88>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d008      	beq.n	8003a90 <prvProcessTimerOrBlockTask+0x54>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003a7e:	4b13      	ldr	r3, [pc, #76]	; (8003acc <prvProcessTimerOrBlockTask+0x90>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <prvProcessTimerOrBlockTask+0x50>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <prvProcessTimerOrBlockTask+0x52>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	603b      	str	r3, [r7, #0]
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a90:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <prvProcessTimerOrBlockTask+0x94>)
 8003a92:	6819      	ldr	r1, [r3, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	4608      	mov	r0, r1
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	f7fe ffb8 	bl	8002a14 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
 8003aa4:	f7ff fa32 	bl	8002f0c <xTaskResumeAll>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <prvProcessTimerOrBlockTask+0x88>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
 8003aae:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <prvProcessTimerOrBlockTask+0x98>)
 8003ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	e001      	b.n	8003ac4 <prvProcessTimerOrBlockTask+0x88>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
 8003ac0:	f7ff fa24 	bl	8002f0c <xTaskResumeAll>
            }
        }
    }
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000264 	.word	0x20000264
 8003ad0:	20000268 	.word	0x20000268
 8003ad4:	e000ed04 	.word	0xe000ed04

08003ad8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <prvGetNextExpireTime+0x44>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <prvGetNextExpireTime+0x16>
 8003aea:	2201      	movs	r2, #1
 8003aec:	e000      	b.n	8003af0 <prvGetNextExpireTime+0x18>
 8003aee:	2200      	movs	r2, #0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d105      	bne.n	8003b08 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003afc:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <prvGetNextExpireTime+0x44>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	e001      	b.n	8003b0c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
    }
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000260 	.word	0x20000260

08003b20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003b28:	f7ff fa8e 	bl	8003048 <xTaskGetTickCount>
 8003b2c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <prvSampleTimeNow+0x3c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d205      	bcs.n	8003b44 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003b38:	f000 f936 	bl	8003da8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e002      	b.n	8003b4a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003b4a:	4a04      	ldr	r2, [pc, #16]	; (8003b5c <prvSampleTimeNow+0x3c>)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003b50:	68fb      	ldr	r3, [r7, #12]
    }
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000270 	.word	0x20000270

08003b60 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d812      	bhi.n	8003bac <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	1ad2      	subs	r2, r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d302      	bcc.n	8003b9a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003b94:	2301      	movs	r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e01b      	b.n	8003bd2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b9a:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <prvInsertTimerInActiveList+0x7c>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f7fe f9e7 	bl	8001f78 <vListInsert>
 8003baa:	e012      	b.n	8003bd2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d206      	bcs.n	8003bc2 <prvInsertTimerInActiveList+0x62>
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d302      	bcc.n	8003bc2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	e007      	b.n	8003bd2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003bc2:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <prvInsertTimerInActiveList+0x80>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	4610      	mov	r0, r2
 8003bcc:	4619      	mov	r1, r3
 8003bce:	f7fe f9d3 	bl	8001f78 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003bd2:	697b      	ldr	r3, [r7, #20]
    }
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000264 	.word	0x20000264
 8003be0:	20000260 	.word	0x20000260

08003be4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08e      	sub	sp, #56	; 0x38
 8003be8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bea:	e0cb      	b.n	8003d84 <prvProcessReceivedCommands+0x1a0>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	da18      	bge.n	8003c24 <prvProcessReceivedCommands+0x40>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003bf2:	1d3b      	adds	r3, r7, #4
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <prvProcessReceivedCommands+0x2e>
 8003bfe:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	e7fe      	b.n	8003c10 <prvProcessReceivedCommands+0x2c>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c18:	6851      	ldr	r1, [r2, #4]
 8003c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c1c:	6892      	ldr	r2, [r2, #8]
 8003c1e:	4608      	mov	r0, r1
 8003c20:	4611      	mov	r1, r2
 8003c22:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f2c0 80ac 	blt.w	8003d84 <prvProcessReceivedCommands+0x1a0>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d004      	beq.n	8003c42 <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe f9d3 	bl	8001fe8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c42:	463b      	mov	r3, r7
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff ff6b 	bl	8003b20 <prvSampleTimeNow>
 8003c4a:	6278      	str	r0, [r7, #36]	; 0x24

                switch( xMessage.xMessageID )
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b09      	cmp	r3, #9
 8003c50:	f200 8097 	bhi.w	8003d82 <prvProcessReceivedCommands+0x19e>
 8003c54:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <prvProcessReceivedCommands+0x78>)
 8003c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5a:	bf00      	nop
 8003c5c:	08003c85 	.word	0x08003c85
 8003c60:	08003c85 	.word	0x08003c85
 8003c64:	08003c85 	.word	0x08003c85
 8003c68:	08003cfb 	.word	0x08003cfb
 8003c6c:	08003d0f 	.word	0x08003d0f
 8003c70:	08003d59 	.word	0x08003d59
 8003c74:	08003c85 	.word	0x08003c85
 8003c78:	08003c85 	.word	0x08003c85
 8003c7c:	08003cfb 	.word	0x08003cfb
 8003c80:	08003d0f 	.word	0x08003d0f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	441a      	add	r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca6:	f7ff ff5b 	bl	8003b60 <prvInsertTimerInActiveList>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d023      	beq.n	8003cf8 <prvProcessReceivedCommands+0x114>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cb6:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d018      	beq.n	8003cf8 <prvProcessReceivedCommands+0x114>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	441a      	add	r2, r3
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f7ff fe00 	bl	80038dc <xTimerGenericCommand>
 8003cdc:	6238      	str	r0, [r7, #32]
                                configASSERT( xResult );
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d109      	bne.n	8003cf8 <prvProcessReceivedCommands+0x114>
 8003ce4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	e7fe      	b.n	8003cf6 <prvProcessReceivedCommands+0x112>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003cf8:	e044      	b.n	8003d84 <prvProcessReceivedCommands+0x1a0>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003d0c:	e03a      	b.n	8003d84 <prvProcessReceivedCommands+0x1a0>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <prvProcessReceivedCommands+0x15e>
 8003d2e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e7fe      	b.n	8003d40 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	4413      	add	r3, r2
 8003d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	f7ff ff05 	bl	8003b60 <prvInsertTimerInActiveList>
                        break;
 8003d56:	e015      	b.n	8003d84 <prvProcessReceivedCommands+0x1a0>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <prvProcessReceivedCommands+0x18a>
                                {
                                    vPortFree( pxTimer );
 8003d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d68:	f7fe f8a4 	bl	8001eb4 <vPortFree>
 8003d6c:	e008      	b.n	8003d80 <prvProcessReceivedCommands+0x19c>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003d80:	e000      	b.n	8003d84 <prvProcessReceivedCommands+0x1a0>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003d82:	bf00      	nop
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d84:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <prvProcessReceivedCommands+0x1c0>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	1d3b      	adds	r3, r7, #4
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f7fe fc1a 	bl	80025c8 <xQueueReceive>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f47f af28 	bne.w	8003bec <prvProcessReceivedCommands+0x8>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
 8003d9c:	3730      	adds	r7, #48	; 0x30
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000268 	.word	0x20000268

08003da8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003dae:	e047      	b.n	8003e40 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003db0:	4b2c      	ldr	r3, [pc, #176]	; (8003e64 <prvSwitchTimerLists+0xbc>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	617b      	str	r3, [r7, #20]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dba:	4b2a      	ldr	r3, [pc, #168]	; (8003e64 <prvSwitchTimerLists+0xbc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	613b      	str	r3, [r7, #16]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fe f90d 	bl	8001fe8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	6938      	ldr	r0, [r7, #16]
 8003dd4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d02d      	beq.n	8003e40 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	699a      	ldr	r2, [r3, #24]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	4413      	add	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

                if( xReloadTime > xNextExpireTime )
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d90e      	bls.n	8003e14 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e02:	4b18      	ldr	r3, [pc, #96]	; (8003e64 <prvSwitchTimerLists+0xbc>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f7fe f8b3 	bl	8001f78 <vListInsert>
 8003e12:	e015      	b.n	8003e40 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e14:	2300      	movs	r3, #0
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	6938      	ldr	r0, [r7, #16]
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f7ff fd5c 	bl	80038dc <xTimerGenericCommand>
 8003e24:	60b8      	str	r0, [r7, #8]
                    configASSERT( xResult );
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d109      	bne.n	8003e40 <prvSwitchTimerLists+0x98>
 8003e2c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	e7fe      	b.n	8003e3e <prvSwitchTimerLists+0x96>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e40:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <prvSwitchTimerLists+0xbc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1b2      	bne.n	8003db0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003e4a:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <prvSwitchTimerLists+0xbc>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <prvSwitchTimerLists+0xc0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a03      	ldr	r2, [pc, #12]	; (8003e64 <prvSwitchTimerLists+0xbc>)
 8003e56:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003e58:	4a03      	ldr	r2, [pc, #12]	; (8003e68 <prvSwitchTimerLists+0xc0>)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6013      	str	r3, [r2, #0]
    }
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000260 	.word	0x20000260
 8003e68:	20000264 	.word	0x20000264

08003e6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003e70:	f7fd fef8 	bl	8001c64 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003e74:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <prvCheckForValidListAndQueue+0x54>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d11d      	bne.n	8003eb8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003e7c:	4811      	ldr	r0, [pc, #68]	; (8003ec4 <prvCheckForValidListAndQueue+0x58>)
 8003e7e:	f7fe f82b 	bl	8001ed8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003e82:	4811      	ldr	r0, [pc, #68]	; (8003ec8 <prvCheckForValidListAndQueue+0x5c>)
 8003e84:	f7fe f828 	bl	8001ed8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003e88:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <prvCheckForValidListAndQueue+0x60>)
 8003e8a:	4a0e      	ldr	r2, [pc, #56]	; (8003ec4 <prvCheckForValidListAndQueue+0x58>)
 8003e8c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003e8e:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <prvCheckForValidListAndQueue+0x64>)
 8003e90:	4a0d      	ldr	r2, [pc, #52]	; (8003ec8 <prvCheckForValidListAndQueue+0x5c>)
 8003e92:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003e94:	2005      	movs	r0, #5
 8003e96:	2110      	movs	r1, #16
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f7fe f937 	bl	800210c <xQueueGenericCreate>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <prvCheckForValidListAndQueue+0x54>)
 8003ea2:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <prvCheckForValidListAndQueue+0x54>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003eac:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <prvCheckForValidListAndQueue+0x54>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	4908      	ldr	r1, [pc, #32]	; (8003ed4 <prvCheckForValidListAndQueue+0x68>)
 8003eb4:	f7fe fd86 	bl	80029c4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003eb8:	f7fd ff02 	bl	8001cc0 <vPortExitCritical>
    }
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000268 	.word	0x20000268
 8003ec4:	20000238 	.word	0x20000238
 8003ec8:	2000024c 	.word	0x2000024c
 8003ecc:	20000260 	.word	0x20000260
 8003ed0:	20000264 	.word	0x20000264
 8003ed4:	08004c18 	.word	0x08004c18

08003ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <__NVIC_SetPriorityGrouping+0x44>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8003f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f08:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8003f0a:	4a04      	ldr	r2, [pc, #16]	; (8003f1c <__NVIC_SetPriorityGrouping+0x44>)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	60d3      	str	r3, [r2, #12]
}
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8003f26:	2001      	movs	r0, #1
 8003f28:	f7ff ffd6 	bl	8003ed8 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f2c:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8003f2e:	4b21      	ldr	r3, [pc, #132]	; (8003fb4 <SystemCoreSetup+0x94>)
 8003f30:	4a21      	ldr	r2, [pc, #132]	; (8003fb8 <SystemCoreSetup+0x98>)
 8003f32:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f34:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003f38:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8003f3a:	4a1e      	ldr	r2, [pc, #120]	; (8003fb4 <SystemCoreSetup+0x94>)
 8003f3c:	4b1d      	ldr	r3, [pc, #116]	; (8003fb4 <SystemCoreSetup+0x94>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8003f4a:	4b1c      	ldr	r3, [pc, #112]	; (8003fbc <SystemCoreSetup+0x9c>)
 8003f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f50:	3314      	adds	r3, #20
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f023 030f 	bic.w	r3, r3, #15
 8003f5c:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f043 0303 	orr.w	r3, r3, #3
 8003f64:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8003f66:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <SystemCoreSetup+0x9c>)
 8003f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6c:	3314      	adds	r3, #20
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8003f72:	4a10      	ldr	r2, [pc, #64]	; (8003fb4 <SystemCoreSetup+0x94>)
 8003f74:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <SystemCoreSetup+0x94>)
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f023 0310 	bic.w	r3, r3, #16
 8003f7c:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8003f7e:	4a0d      	ldr	r2, [pc, #52]	; (8003fb4 <SystemCoreSetup+0x94>)
 8003f80:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <SystemCoreSetup+0x94>)
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f023 0308 	bic.w	r3, r3, #8
 8003f88:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <SystemCoreSetup+0x94>)
 8003f8c:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <SystemCoreSetup+0x94>)
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f94:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8003f96:	4a07      	ldr	r2, [pc, #28]	; (8003fb4 <SystemCoreSetup+0x94>)
 8003f98:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <SystemCoreSetup+0x94>)
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003fa0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8003fa2:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <SystemCoreSetup+0x94>)
 8003fa4:	4b03      	ldr	r3, [pc, #12]	; (8003fb4 <SystemCoreSetup+0x94>)
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fac:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	e000ed00 	.word	0xe000ed00
 8003fb8:	08000000 	.word	0x08000000
 8003fbc:	58001000 	.word	0x58001000

08003fc0 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	701a      	strb	r2, [r3, #0]

  return (status);
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8003fe4:	4b02      	ldr	r3, [pc, #8]	; (8003ff0 <OSCHP_GetFrequency+0x10>)
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	00b71b00 	.word	0x00b71b00

08003ff4 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8003ff4:	b5b0      	push	{r4, r5, r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8003ffa:	4b13      	ldr	r3, [pc, #76]	; (8004048 <SystemCoreClockSetup+0x54>)
 8003ffc:	1d3c      	adds	r4, r7, #4
 8003ffe:	461d      	mov	r5, r3
 8004000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8004008:	1d3b      	adds	r3, r7, #4
 800400a:	4618      	mov	r0, r3
 800400c:	f7fc fac6 	bl	800059c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8004010:	2000      	movs	r0, #0
 8004012:	f7fc fbc7 	bl	80007a4 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8004016:	2000      	movs	r0, #0
 8004018:	f7fc fb7c 	bl	8000714 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 800401c:	2004      	movs	r0, #4
 800401e:	f7fc fc4d 	bl	80008bc <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8004022:	f7fc fc87 	bl	8000934 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8004026:	2001      	movs	r0, #1
 8004028:	2120      	movs	r1, #32
 800402a:	f7fc fc93 	bl	8000954 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 800402e:	2000      	movs	r0, #0
 8004030:	f7fc fb84 	bl	800073c <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8004034:	2001      	movs	r0, #1
 8004036:	f7fc fc69 	bl	800090c <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800403a:	2001      	movs	r0, #1
 800403c:	f7fc fc52 	bl	80008e4 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bdb0      	pop	{r4, r5, r7, pc}
 8004046:	bf00      	nop
 8004048:	08004c20 	.word	0x08004c20

0800404c <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
    const uint32_t service_request)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	460b      	mov	r3, r1
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	7afb      	ldrb	r3, [r7, #11]
 8004060:	2107      	movs	r1, #7
 8004062:	fa01 f303 	lsl.w	r3, r1, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	401a      	ands	r2, r3
 800406a:	7afb      	ldrb	r3, [r7, #11]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	fa01 f303 	lsl.w	r3, r1, r3
 8004072:	431a      	orrs	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	609a      	str	r2, [r3, #8]
}
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop

08004084 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop

080040b0 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	60da      	str	r2, [r3, #12]
}
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop

080040d0 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	601a      	str	r2, [r3, #0]
}
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop

080040f0 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	601a      	str	r2, [r3, #0]
}
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop

08004110 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f043 0201 	orr.w	r2, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	601a      	str	r2, [r3, #0]
}
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop

08004130 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f023 0201 	bic.w	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	601a      	str	r2, [r3, #0]
}
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop

08004150 <XMC_CAN_NODE_ReSetAnalyzerMode>:
 * XMC_CAN_NODE_SetAnalyzerMode()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	601a      	str	r2, [r3, #0]
}
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop

08004170 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	460b      	mov	r3, r1
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	6891      	ldr	r1, [r2, #8]
 8004188:	7afa      	ldrb	r2, [r7, #11]
 800418a:	2007      	movs	r0, #7
 800418c:	fa00 f202 	lsl.w	r2, r0, r2
 8004190:	43d2      	mvns	r2, r2
 8004192:	4011      	ands	r1, r2
                              (service_request << (uint32_t)can_mo_ptr_int);
 8004194:	7afa      	ldrb	r2, [r7, #11]
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 800419c:	430a      	orrs	r2, r1
 800419e:	609a      	str	r2, [r3, #8]
                              (service_request << (uint32_t)can_mo_ptr_int);
}
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop

080041ac <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
    const uint32_t event)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	6811      	ldr	r1, [r2, #0]
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	601a      	str	r2, [r3, #0]
}
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <CAN_NODE_MO_EnableTxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80041e2:	f7ff ffe3 	bl	80041ac <XMC_CAN_MO_EnableEvent>
}
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <CAN_NODE_MO_EnableRxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80041fe:	f7ff ffd5 	bl	80041ac <XMC_CAN_MO_EnableEvent>
}
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f831 	bl	800427c <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f043 0302 	orr.w	r3, r3, #2
 800422a:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f043 0304 	orr.w	r3, r3, #4
 800423c:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f043 0308 	orr.w	r3, r3, #8
 800424e:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4618      	mov	r0, r3
 8004256:	68f9      	ldr	r1, [r7, #12]
 8004258:	f7fd f868 	bl	800132c <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8004262:	2b00      	cmp	r3, #0
 8004264:	d006      	beq.n	8004274 <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4618      	mov	r0, r3
 800426c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004270:	f7fd f85c 	bl	800132c <XMC_CAN_NODE_EnableEvent>
  }

}
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop

0800427c <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800428e:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8004290:	4610      	mov	r0, r2
 8004292:	2100      	movs	r1, #0
 8004294:	461a      	mov	r2, r3
 8004296:	f7ff fed9 	bl	800404c <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a4:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 80042a6:	4610      	mov	r0, r2
 80042a8:	2104      	movs	r1, #4
 80042aa:	461a      	mov	r2, r3
 80042ac:	f7ff fece 	bl	800404c <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ba:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 80042bc:	4610      	mov	r0, r2
 80042be:	2108      	movs	r1, #8
 80042c0:	461a      	mov	r2, r3
 80042c2:	f7ff fec3 	bl	800404c <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d0:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 80042d2:	4610      	mov	r0, r2
 80042d4:	210c      	movs	r1, #12
 80042d6:	461a      	mov	r2, r3
 80042d8:	f7ff feb8 	bl	800404c <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop

080042e4 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fc ff19 	bl	8001128 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	79db      	ldrb	r3, [r3, #7]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00b      	beq.n	8004316 <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	795b      	ldrb	r3, [r3, #5]
 8004306:	4610      	mov	r0, r2
 8004308:	2104      	movs	r1, #4
 800430a:	461a      	mov	r2, r3
 800430c:	f7ff ff30 	bl	8004170 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff ff5d 	bl	80041d0 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	7a1b      	ldrb	r3, [r3, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	799b      	ldrb	r3, [r3, #6]
 8004326:	4610      	mov	r0, r2
 8004328:	2100      	movs	r1, #0
 800432a:	461a      	mov	r2, r3
 800432c:	f7ff ff20 	bl	8004170 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff ff5b 	bl	80041ec <CAN_NODE_MO_EnableRxEvent>
  }

}
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8004344:	2300      	movs	r3, #0
 8004346:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f7fc ffbf 	bl	80012d0 <XMC_CAN_MO_Transmit>
 8004352:	4603      	mov	r3, r0
 8004354:	73fb      	strb	r3, [r7, #15]
  return (status);
 8004356:	7bfb      	ldrb	r3, [r7, #15]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800436a:	2300      	movs	r3, #0
 800436c:	73fb      	strb	r3, [r7, #15]
  uint32_t *data_pointer = (uint32_t*) array_data;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	6852      	ldr	r2, [r2, #4]
 8004384:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7fc ff68 	bl	8001260 <XMC_CAN_MO_UpdateData>
 8004390:	4603      	mov	r3, r0
 8004392:	73fb      	strb	r3, [r7, #15]
  return (status);
 8004394:	7bfb      	ldrb	r3, [r7, #15]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop

080043a0 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 80043a8:	2300      	movs	r3, #0
 80043aa:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fd fa9f 	bl	80018fc <GLOBAL_CAN_Init>
 80043be:	4603      	mov	r3, r0
 80043c0:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f040 8087 	bne.w	80044d8 <CAN_NODE_Init+0x138>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	f7fc fd6d 	bl	8000eb4 <XMC_CAN_NODE_NominalBitTimeConfigureEx>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d178      	bne.n	80044d2 <CAN_NODE_Init+0x132>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fe73 	bl	80040d0 <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fe8e 	bl	8004110 <XMC_CAN_NODE_SetInitBit>
      XMC_CAN_NODE_ReSetAnalyzerMode(handle->node_ptr);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fea9 	bl	8004150 <XMC_CAN_NODE_ReSetAnalyzerMode>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <CAN_NODE_Init+0x74>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff fe4f 	bl	80040b0 <XMC_CAN_NODE_EnableLoopBack>
 8004412:	e018      	b.n	8004446 <CAN_NODE_Init+0xa6>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800441a:	6819      	ldr	r1, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004422:	791a      	ldrb	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800442a:	4608      	mov	r0, r1
 800442c:	4611      	mov	r1, r2
 800442e:	461a      	mov	r2, r3
 8004430:	f7fb ffba 	bl	80003a8 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800443e:	4610      	mov	r0, r2
 8004440:	4619      	mov	r1, r3
 8004442:	f7ff fe1f 	bl	8004084 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff fede 	bl	8004208 <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	e019      	b.n	8004486 <CAN_NODE_Init+0xe6>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	3302      	adds	r3, #2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6859      	ldr	r1, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	791b      	ldrb	r3, [r3, #4]
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	461a      	mov	r2, r3
 8004476:	f7fc fdc5 	bl	8001004 <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
 800447a:	68b8      	ldr	r0, [r7, #8]
 800447c:	f7ff ff32 	bl	80042e4 <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	3301      	adds	r3, #1
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800448c:	461a      	mov	r2, r3
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	429a      	cmp	r2, r3
 8004492:	d8de      	bhi.n	8004452 <CAN_NODE_Init+0xb2>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff fe29 	bl	80040f0 <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff fe44 	bl	8004130 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 80044ae:	f083 0301 	eor.w	r3, r3, #1
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d011      	beq.n	80044dc <CAN_NODE_Init+0x13c>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6819      	ldr	r1, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	791a      	ldrb	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c6:	4608      	mov	r0, r1
 80044c8:	4611      	mov	r1, r2
 80044ca:	461a      	mov	r2, r3
 80044cc:	f7fb ff6c 	bl	80003a8 <XMC_GPIO_Init>
 80044d0:	e004      	b.n	80044dc <CAN_NODE_Init+0x13c>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
 80044d2:	2301      	movs	r3, #1
 80044d4:	75fb      	strb	r3, [r7, #23]
 80044d6:	e001      	b.n	80044dc <CAN_NODE_Init+0x13c>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 80044d8:	2301      	movs	r3, #1
 80044da:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 80044dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop

080044e8 <ANALOG_IO_Init>:
 * Input Parameter  : Handler Pointer pointing to APP data structure.
 * Output Parameter : ANALOG_IO_STATUS_t (ANALOG_IO APP initialization status).
 */

ANALOG_IO_STATUS_t ANALOG_IO_Init(const ANALOG_IO_t *const handle)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ANALOG_IO_Init: Passed handler is a null pointer", handler != NULL);
  if (*(handle->state) == ANALOG_IO_STATE_NOT_INITIALIZED)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10a      	bne.n	8004510 <ANALOG_IO_Init+0x28>
  {
    if (handle->config_ptr != NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <ANALOG_IO_Init+0x20>
    {
      /* Instance specific initialization function call*/
      handle->config_ptr();
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4798      	blx	r3
    }
    /* Set the state variable to initialized state*/
    *(handle->state) = ANALOG_IO_STATE_INITIALIZED;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	701a      	strb	r2, [r3, #0]
  }
  return (ANALOG_IO_STATUS_OK);
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop

0800451c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004520:	4b04      	ldr	r3, [pc, #16]	; (8004534 <__NVIC_GetPriorityGrouping+0x18>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004528:	0a1b      	lsrs	r3, r3, #8
}
 800452a:	4618      	mov	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004546:	2b00      	cmp	r3, #0
 8004548:	db0b      	blt.n	8004562 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800454a:	4908      	ldr	r1, [pc, #32]	; (800456c <__NVIC_EnableIRQ+0x34>)
 800454c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	79fa      	ldrb	r2, [r7, #7]
 8004554:	f002 021f 	and.w	r2, r2, #31
 8004558:	2001      	movs	r0, #1
 800455a:	fa00 f202 	lsl.w	r2, r0, r2
 800455e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	e000e100 	.word	0xe000e100

08004570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	6039      	str	r1, [r7, #0]
 800457a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800457c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004580:	2b00      	cmp	r3, #0
 8004582:	db0a      	blt.n	800459a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004584:	490d      	ldr	r1, [pc, #52]	; (80045bc <__NVIC_SetPriority+0x4c>)
 8004586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	0092      	lsls	r2, r2, #2
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	440b      	add	r3, r1
 8004594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004598:	e00a      	b.n	80045b0 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800459a:	4909      	ldr	r1, [pc, #36]	; (80045c0 <__NVIC_SetPriority+0x50>)
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	3b04      	subs	r3, #4
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	0092      	lsls	r2, r2, #2
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	440b      	add	r3, r1
 80045ae:	761a      	strb	r2, [r3, #24]
  }
}
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	e000e100 	.word	0xe000e100
 80045c0:	e000ed00 	.word	0xe000ed00

080045c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b089      	sub	sp, #36	; 0x24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f1c3 0307 	rsb	r3, r3, #7
 80045de:	2b06      	cmp	r3, #6
 80045e0:	bf28      	it	cs
 80045e2:	2306      	movcs	r3, #6
 80045e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	3306      	adds	r3, #6
 80045ea:	2b06      	cmp	r3, #6
 80045ec:	d902      	bls.n	80045f4 <NVIC_EncodePriority+0x30>
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	e000      	b.n	80045f6 <NVIC_EncodePriority+0x32>
 80045f4:	2300      	movs	r3, #0
 80045f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	2201      	movs	r2, #1
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	1e5a      	subs	r2, r3, #1
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	401a      	ands	r2, r3
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2101      	movs	r1, #1
 800460e:	fa01 f303 	lsl.w	r3, r1, r3
 8004612:	1e59      	subs	r1, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8004618:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800461a:	4618      	mov	r0, r3
 800461c:	3724      	adds	r7, #36	; 0x24
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop

08004628 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004636:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop

0800464c <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
    const uint32_t grp_num,
    const uint32_t ch_num)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number", ((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	3260      	adds	r2, #96	; 0x60
 800465e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2101      	movs	r1, #1
 8004666:	fa01 f303 	lsl.w	r3, r1, r3
 800466a:	ea42 0103 	orr.w	r1, r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	3260      	adds	r2, #96	; 0x60
 8004674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop

08004684 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg_num,
    const XMC_VADC_RESULT_CONFIG_t *config)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6819      	ldr	r1, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	32a0      	adds	r2, #160	; 0xa0
 800469a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	32c0      	adds	r2, #192	; 0xc0
 80046b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046bc:	b29b      	uxth	r3, r3
}
 80046be:	4618      	mov	r0, r3
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop

080046cc <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 80046cc:	b590      	push	{r4, r7, lr}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL));

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	7e1b      	ldrb	r3, [r3, #24]
 80046d8:	2b02      	cmp	r3, #2
 80046da:	f040 80a7 	bne.w	800482c <ADC_MEASUREMENT_Init+0x160>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fd f940 	bl	8001968 <GLOBAL_ADC_Init>
 80046e8:	4603      	mov	r3, r0
 80046ea:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	695a      	ldr	r2, [r3, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	4610      	mov	r0, r2
 80046f8:	6819      	ldr	r1, [r3, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	2300      	movs	r3, #0
 80046fe:	f7fc febb 	bl	8001478 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
                                      XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	695a      	ldr	r2, [r3, #20]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4610      	mov	r0, r2
 800470e:	4619      	mov	r1, r3
 8004710:	f7fc ffd8 	bl	80016c4 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 8004714:	2300      	movs	r3, #0
 8004716:	73fb      	strb	r3, [r7, #15]
 8004718:	e03c      	b.n	8004794 <ADC_MEASUREMENT_Init+0xc8>
    {
      indexed = handle_ptr->array->channel_array[j];
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	7bfa      	ldrb	r2, [r7, #15]
 8004720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004724:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	7c5b      	ldrb	r3, [r3, #17]
 800472e:	4619      	mov	r1, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4610      	mov	r0, r2
 8004736:	461a      	mov	r2, r3
 8004738:	f7fd f842 	bl	80017c0 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	789b      	ldrb	r3, [r3, #2]
 8004746:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800474a:	b2db      	uxtb	r3, r3
 800474c:	4619      	mov	r1, r3
                                indexed->res_handle);
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8004752:	4610      	mov	r0, r2
 8004754:	461a      	mov	r2, r3
 8004756:	f7ff ff95 	bl	8004684 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	7c1b      	ldrb	r3, [r3, #16]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8004764:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	7c5b      	ldrb	r3, [r3, #17]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800476a:	4610      	mov	r0, r2
 800476c:	461a      	mov	r2, r3
 800476e:	f7ff ff6d 	bl	800464c <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);

#ifdef ADC_MEASUREMENT_ANALOG_IO_USED
      /* ANALOG_IO initialization for the channel*/
      if(indexed->analog_io_config != NULL)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <ADC_MEASUREMENT_Init+0xc2>
      {
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff feb2 	bl	80044e8 <ANALOG_IO_Init>
 8004784:	4603      	mov	r3, r0
 8004786:	461a      	mov	r2, r3
 8004788:	7bbb      	ldrb	r3, [r7, #14]
 800478a:	4313      	orrs	r3, r2
 800478c:	73bb      	strb	r3, [r7, #14]
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	3301      	adds	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0bf      	beq.n	800471a <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	7a1b      	ldrb	r3, [r3, #8]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d02c      	beq.n	8004804 <ADC_MEASUREMENT_Init+0x138>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d028      	beq.n	8004804 <ADC_MEASUREMENT_Init+0x138>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	b2dc      	uxtb	r4, r3
 80047ba:	f7ff feaf 	bl	800451c <__NVIC_GetPriorityGrouping>
 80047be:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80047c4:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	4608      	mov	r0, r1
 80047ce:	4611      	mov	r1, r2
 80047d0:	461a      	mov	r2, r3
 80047d2:	f7ff fef7 	bl	80045c4 <NVIC_EncodePriority>
 80047d6:	4602      	mov	r2, r0
 80047d8:	b263      	sxtb	r3, r4
 80047da:	4618      	mov	r0, r3
 80047dc:	4611      	mov	r1, r2
 80047de:	f7ff fec7 	bl	8004570 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	7e5b      	ldrb	r3, [r3, #25]
 80047ec:	4610      	mov	r0, r2
 80047ee:	4619      	mov	r1, r3
 80047f0:	f7fc fe98 	bl	8001524 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
                                                 (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	b25b      	sxtb	r3, r3
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff fe9a 	bl	8004538 <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <ADC_MEASUREMENT_Init+0x146>
    {
      (handle_ptr->mux_config)();
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	7e9b      	ldrb	r3, [r3, #26]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d005      	beq.n	8004826 <ADC_MEASUREMENT_Init+0x15a>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff ff01 	bl	8004628 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	7bba      	ldrb	r2, [r7, #14]
 800482a:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	7e1b      	ldrb	r3, [r3, #24]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	bd90      	pop	{r4, r7, pc}

08004838 <ADC_MEASUREMENT_GetResult>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL));

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	789b      	ldrb	r3, [r3, #2]
 800484a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800484e:	b2db      	uxtb	r3, r3
 8004850:	4610      	mov	r0, r2
 8004852:	4619      	mov	r1, r3
 8004854:	f7ff ff28 	bl	80046a8 <XMC_VADC_GROUP_GetResult>
 8004858:	4603      	mov	r3, r0
 800485a:	81fb      	strh	r3, [r7, #14]

  return (result);
 800485c:	89fb      	ldrh	r3, [r7, #14]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop

08004868 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800486e:	2300      	movs	r3, #0
 8004870:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8004872:	480d      	ldr	r0, [pc, #52]	; (80048a8 <DAVE_Init+0x40>)
 8004874:	f7ff fba4 	bl	8003fc0 <CLOCK_XMC4_Init>
 8004878:	4603      	mov	r3, r0
 800487a:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d104      	bne.n	800488c <DAVE_Init+0x24>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
 8004882:	480a      	ldr	r0, [pc, #40]	; (80048ac <DAVE_Init+0x44>)
 8004884:	f7ff ff22 	bl	80046cc <ADC_MEASUREMENT_Init>
 8004888:	4603      	mov	r3, r0
 800488a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d104      	bne.n	800489c <DAVE_Init+0x34>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0); 
 8004892:	4807      	ldr	r0, [pc, #28]	; (80048b0 <DAVE_Init+0x48>)
 8004894:	f7ff fd84 	bl	80043a0 <CAN_NODE_Init>
 8004898:	4603      	mov	r3, r0
 800489a:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 800489c:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000274 	.word	0x20000274
 80048ac:	200000a4 	.word	0x200000a4
 80048b0:	08004c78 	.word	0x08004c78

080048b4 <main>:
uint8_t CAN0_data_TX_LM01[8] = {0};
void Task_CAN_Transmit();
void Task_ANA_Read();

int main(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af02      	add	r7, sp, #8
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 80048ba:	f7ff ffd5 	bl	8004868 <DAVE_Init>
 80048be:	4603      	mov	r3, r0
 80048c0:	71fb      	strb	r3, [r7, #7]

  xTaskCreate(Task_CAN_Transmit,"CAN_Transmit",1000, NULL, 0, NULL);
 80048c2:	2300      	movs	r3, #0
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	2300      	movs	r3, #0
 80048c8:	9301      	str	r3, [sp, #4]
 80048ca:	480c      	ldr	r0, [pc, #48]	; (80048fc <main+0x48>)
 80048cc:	490c      	ldr	r1, [pc, #48]	; (8004900 <main+0x4c>)
 80048ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048d2:	2300      	movs	r3, #0
 80048d4:	f7fe f93a 	bl	8002b4c <xTaskCreate>
  xTaskCreate(Task_ANA_Read,"ANA_Read",1000, NULL, 0, NULL);
 80048d8:	2300      	movs	r3, #0
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	2300      	movs	r3, #0
 80048de:	9301      	str	r3, [sp, #4]
 80048e0:	4808      	ldr	r0, [pc, #32]	; (8004904 <main+0x50>)
 80048e2:	4909      	ldr	r1, [pc, #36]	; (8004908 <main+0x54>)
 80048e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048e8:	2300      	movs	r3, #0
 80048ea:	f7fe f92f 	bl	8002b4c <xTaskCreate>

  vTaskStartScheduler();
 80048ee:	f7fe fab1 	bl	8002e54 <vTaskStartScheduler>

  if (status != DAVE_STATUS_SUCCESS)
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d000      	beq.n	80048fa <main+0x46>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 80048f8:	e7fe      	b.n	80048f8 <main+0x44>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {

  }
 80048fa:	e7fe      	b.n	80048fa <main+0x46>
 80048fc:	0800490d 	.word	0x0800490d
 8004900:	08004d40 	.word	0x08004d40
 8004904:	08004969 	.word	0x08004969
 8004908:	08004d50 	.word	0x08004d50

0800490c <Task_CAN_Transmit>:
}

void Task_CAN_Transmit()
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
	while(1)
	{
		CAN0_data_TX_LM01[0]=(uint8_t)(ADC_Value>>8);
 8004910:	4b10      	ldr	r3, [pc, #64]	; (8004954 <Task_CAN_Transmit+0x48>)
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	0a1b      	lsrs	r3, r3, #8
 8004916:	b29b      	uxth	r3, r3
 8004918:	b2da      	uxtb	r2, r3
 800491a:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <Task_CAN_Transmit+0x4c>)
 800491c:	701a      	strb	r2, [r3, #0]
		CAN0_data_TX_LM01[1]=(uint8_t)(ADC_Value&0x00FF);
 800491e:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <Task_CAN_Transmit+0x48>)
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b2da      	uxtb	r2, r3
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <Task_CAN_Transmit+0x4c>)
 8004926:	705a      	strb	r2, [r3, #1]

		CAN_NODE_MO_UpdateData(&CAN_NODE_0_LMO_01_Config, CAN0_data_TX_LM01);
 8004928:	480c      	ldr	r0, [pc, #48]	; (800495c <Task_CAN_Transmit+0x50>)
 800492a:	490b      	ldr	r1, [pc, #44]	; (8004958 <Task_CAN_Transmit+0x4c>)
 800492c:	f7ff fd18 	bl	8004360 <CAN_NODE_MO_UpdateData>
		CAN_NODE_MO_Transmit(&CAN_NODE_0_LMO_01_Config);
 8004930:	480a      	ldr	r0, [pc, #40]	; (800495c <Task_CAN_Transmit+0x50>)
 8004932:	f7ff fd03 	bl	800433c <CAN_NODE_MO_Transmit>

		vTaskDelay(pdMS_TO_TICKS(delay_for_CAN_Transmit));
 8004936:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <Task_CAN_Transmit+0x54>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004940:	fb03 f302 	mul.w	r3, r3, r2
 8004944:	4a07      	ldr	r2, [pc, #28]	; (8004964 <Task_CAN_Transmit+0x58>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	099b      	lsrs	r3, r3, #6
 800494c:	4618      	mov	r0, r3
 800494e:	f7fe fa4f 	bl	8002df0 <vTaskDelay>

	}
 8004952:	e7dd      	b.n	8004910 <Task_CAN_Transmit+0x4>
 8004954:	200002d0 	.word	0x200002d0
 8004958:	20000280 	.word	0x20000280
 800495c:	08004c6c 	.word	0x08004c6c
 8004960:	200000c0 	.word	0x200000c0
 8004964:	10624dd3 	.word	0x10624dd3

08004968 <Task_ANA_Read>:
}

void Task_ANA_Read()
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
	while(1)
	{
		ADC_Value = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);
 800496c:	4805      	ldr	r0, [pc, #20]	; (8004984 <Task_ANA_Read+0x1c>)
 800496e:	f7ff ff63 	bl	8004838 <ADC_MEASUREMENT_GetResult>
 8004972:	4603      	mov	r3, r0
 8004974:	461a      	mov	r2, r3
 8004976:	4b04      	ldr	r3, [pc, #16]	; (8004988 <Task_ANA_Read+0x20>)
 8004978:	801a      	strh	r2, [r3, #0]
		vTaskDelay(pdMS_TO_TICKS(1));
 800497a:	2001      	movs	r0, #1
 800497c:	f7fe fa38 	bl	8002df0 <vTaskDelay>
	}
 8004980:	e7f4      	b.n	800496c <Task_ANA_Read+0x4>
 8004982:	bf00      	nop
 8004984:	2000008c 	.word	0x2000008c
 8004988:	200002d0 	.word	0x200002d0

0800498c <__errno>:
 800498c:	4b01      	ldr	r3, [pc, #4]	; (8004994 <__errno+0x8>)
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20000124 	.word	0x20000124

08004998 <__libc_init_array>:
 8004998:	b570      	push	{r4, r5, r6, lr}
 800499a:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <__libc_init_array+0x3c>)
 800499c:	4c0e      	ldr	r4, [pc, #56]	; (80049d8 <__libc_init_array+0x40>)
 800499e:	1ae4      	subs	r4, r4, r3
 80049a0:	10a4      	asrs	r4, r4, #2
 80049a2:	2500      	movs	r5, #0
 80049a4:	461e      	mov	r6, r3
 80049a6:	42a5      	cmp	r5, r4
 80049a8:	d004      	beq.n	80049b4 <__libc_init_array+0x1c>
 80049aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049ae:	4798      	blx	r3
 80049b0:	3501      	adds	r5, #1
 80049b2:	e7f8      	b.n	80049a6 <__libc_init_array+0xe>
 80049b4:	f7fc ff9c 	bl	80018f0 <_init>
 80049b8:	4c08      	ldr	r4, [pc, #32]	; (80049dc <__libc_init_array+0x44>)
 80049ba:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <__libc_init_array+0x48>)
 80049bc:	1ae4      	subs	r4, r4, r3
 80049be:	10a4      	asrs	r4, r4, #2
 80049c0:	2500      	movs	r5, #0
 80049c2:	461e      	mov	r6, r3
 80049c4:	42a5      	cmp	r5, r4
 80049c6:	d004      	beq.n	80049d2 <__libc_init_array+0x3a>
 80049c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049cc:	4798      	blx	r3
 80049ce:	3501      	adds	r5, #1
 80049d0:	e7f8      	b.n	80049c4 <__libc_init_array+0x2c>
 80049d2:	bd70      	pop	{r4, r5, r6, pc}
 80049d4:	20000128 	.word	0x20000128
 80049d8:	20000128 	.word	0x20000128
 80049dc:	20000128 	.word	0x20000128
 80049e0:	20000128 	.word	0x20000128

080049e4 <malloc>:
 80049e4:	4b02      	ldr	r3, [pc, #8]	; (80049f0 <malloc+0xc>)
 80049e6:	4601      	mov	r1, r0
 80049e8:	6818      	ldr	r0, [r3, #0]
 80049ea:	f000 b863 	b.w	8004ab4 <_malloc_r>
 80049ee:	bf00      	nop
 80049f0:	20000124 	.word	0x20000124

080049f4 <free>:
 80049f4:	4b02      	ldr	r3, [pc, #8]	; (8004a00 <free+0xc>)
 80049f6:	4601      	mov	r1, r0
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	f000 b817 	b.w	8004a2c <_free_r>
 80049fe:	bf00      	nop
 8004a00:	20000124 	.word	0x20000124

08004a04 <memcpy>:
 8004a04:	b510      	push	{r4, lr}
 8004a06:	1e43      	subs	r3, r0, #1
 8004a08:	440a      	add	r2, r1
 8004a0a:	4291      	cmp	r1, r2
 8004a0c:	d004      	beq.n	8004a18 <memcpy+0x14>
 8004a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a16:	e7f8      	b.n	8004a0a <memcpy+0x6>
 8004a18:	bd10      	pop	{r4, pc}

08004a1a <memset>:
 8004a1a:	4402      	add	r2, r0
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d002      	beq.n	8004a28 <memset+0xe>
 8004a22:	f803 1b01 	strb.w	r1, [r3], #1
 8004a26:	e7fa      	b.n	8004a1e <memset+0x4>
 8004a28:	4770      	bx	lr
	...

08004a2c <_free_r>:
 8004a2c:	b530      	push	{r4, r5, lr}
 8004a2e:	2900      	cmp	r1, #0
 8004a30:	d03d      	beq.n	8004aae <_free_r+0x82>
 8004a32:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8004a36:	1f0b      	subs	r3, r1, #4
 8004a38:	491d      	ldr	r1, [pc, #116]	; (8004ab0 <_free_r+0x84>)
 8004a3a:	2a00      	cmp	r2, #0
 8004a3c:	bfb8      	it	lt
 8004a3e:	189b      	addlt	r3, r3, r2
 8004a40:	680a      	ldr	r2, [r1, #0]
 8004a42:	460c      	mov	r4, r1
 8004a44:	b912      	cbnz	r2, 8004a4c <_free_r+0x20>
 8004a46:	605a      	str	r2, [r3, #4]
 8004a48:	600b      	str	r3, [r1, #0]
 8004a4a:	bd30      	pop	{r4, r5, pc}
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d20d      	bcs.n	8004a6c <_free_r+0x40>
 8004a50:	6819      	ldr	r1, [r3, #0]
 8004a52:	1858      	adds	r0, r3, r1
 8004a54:	4290      	cmp	r0, r2
 8004a56:	bf01      	itttt	eq
 8004a58:	585a      	ldreq	r2, [r3, r1]
 8004a5a:	1852      	addeq	r2, r2, r1
 8004a5c:	601a      	streq	r2, [r3, #0]
 8004a5e:	6842      	ldreq	r2, [r0, #4]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	6023      	str	r3, [r4, #0]
 8004a64:	bd30      	pop	{r4, r5, pc}
 8004a66:	4299      	cmp	r1, r3
 8004a68:	d803      	bhi.n	8004a72 <_free_r+0x46>
 8004a6a:	460a      	mov	r2, r1
 8004a6c:	6851      	ldr	r1, [r2, #4]
 8004a6e:	2900      	cmp	r1, #0
 8004a70:	d1f9      	bne.n	8004a66 <_free_r+0x3a>
 8004a72:	6814      	ldr	r4, [r2, #0]
 8004a74:	1915      	adds	r5, r2, r4
 8004a76:	429d      	cmp	r5, r3
 8004a78:	d10a      	bne.n	8004a90 <_free_r+0x64>
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4423      	add	r3, r4
 8004a7e:	18d0      	adds	r0, r2, r3
 8004a80:	4288      	cmp	r0, r1
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	d113      	bne.n	8004aae <_free_r+0x82>
 8004a86:	6808      	ldr	r0, [r1, #0]
 8004a88:	4403      	add	r3, r0
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	684b      	ldr	r3, [r1, #4]
 8004a8e:	e00d      	b.n	8004aac <_free_r+0x80>
 8004a90:	d902      	bls.n	8004a98 <_free_r+0x6c>
 8004a92:	230c      	movs	r3, #12
 8004a94:	6003      	str	r3, [r0, #0]
 8004a96:	bd30      	pop	{r4, r5, pc}
 8004a98:	681c      	ldr	r4, [r3, #0]
 8004a9a:	1918      	adds	r0, r3, r4
 8004a9c:	4288      	cmp	r0, r1
 8004a9e:	bf04      	itt	eq
 8004aa0:	6808      	ldreq	r0, [r1, #0]
 8004aa2:	6849      	ldreq	r1, [r1, #4]
 8004aa4:	6059      	str	r1, [r3, #4]
 8004aa6:	bf04      	itt	eq
 8004aa8:	1900      	addeq	r0, r0, r4
 8004aaa:	6018      	streq	r0, [r3, #0]
 8004aac:	6053      	str	r3, [r2, #4]
 8004aae:	bd30      	pop	{r4, r5, pc}
 8004ab0:	2000028c 	.word	0x2000028c

08004ab4 <_malloc_r>:
 8004ab4:	b570      	push	{r4, r5, r6, lr}
 8004ab6:	1ccc      	adds	r4, r1, #3
 8004ab8:	f024 0403 	bic.w	r4, r4, #3
 8004abc:	3408      	adds	r4, #8
 8004abe:	2c0c      	cmp	r4, #12
 8004ac0:	bf38      	it	cc
 8004ac2:	240c      	movcc	r4, #12
 8004ac4:	2c00      	cmp	r4, #0
 8004ac6:	4606      	mov	r6, r0
 8004ac8:	da03      	bge.n	8004ad2 <_malloc_r+0x1e>
 8004aca:	230c      	movs	r3, #12
 8004acc:	6033      	str	r3, [r6, #0]
 8004ace:	2000      	movs	r0, #0
 8004ad0:	bd70      	pop	{r4, r5, r6, pc}
 8004ad2:	428c      	cmp	r4, r1
 8004ad4:	d3f9      	bcc.n	8004aca <_malloc_r+0x16>
 8004ad6:	4a20      	ldr	r2, [pc, #128]	; (8004b58 <_malloc_r+0xa4>)
 8004ad8:	6813      	ldr	r3, [r2, #0]
 8004ada:	4610      	mov	r0, r2
 8004adc:	4619      	mov	r1, r3
 8004ade:	b1a1      	cbz	r1, 8004b0a <_malloc_r+0x56>
 8004ae0:	680a      	ldr	r2, [r1, #0]
 8004ae2:	1b12      	subs	r2, r2, r4
 8004ae4:	d40e      	bmi.n	8004b04 <_malloc_r+0x50>
 8004ae6:	2a0b      	cmp	r2, #11
 8004ae8:	d903      	bls.n	8004af2 <_malloc_r+0x3e>
 8004aea:	600a      	str	r2, [r1, #0]
 8004aec:	188b      	adds	r3, r1, r2
 8004aee:	508c      	str	r4, [r1, r2]
 8004af0:	e01f      	b.n	8004b32 <_malloc_r+0x7e>
 8004af2:	428b      	cmp	r3, r1
 8004af4:	bf0d      	iteet	eq
 8004af6:	685a      	ldreq	r2, [r3, #4]
 8004af8:	684a      	ldrne	r2, [r1, #4]
 8004afa:	605a      	strne	r2, [r3, #4]
 8004afc:	6002      	streq	r2, [r0, #0]
 8004afe:	bf18      	it	ne
 8004b00:	460b      	movne	r3, r1
 8004b02:	e016      	b.n	8004b32 <_malloc_r+0x7e>
 8004b04:	460b      	mov	r3, r1
 8004b06:	6849      	ldr	r1, [r1, #4]
 8004b08:	e7e9      	b.n	8004ade <_malloc_r+0x2a>
 8004b0a:	4d14      	ldr	r5, [pc, #80]	; (8004b5c <_malloc_r+0xa8>)
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	b91b      	cbnz	r3, 8004b18 <_malloc_r+0x64>
 8004b10:	4630      	mov	r0, r6
 8004b12:	f000 f825 	bl	8004b60 <_sbrk_r>
 8004b16:	6028      	str	r0, [r5, #0]
 8004b18:	4630      	mov	r0, r6
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	f000 f820 	bl	8004b60 <_sbrk_r>
 8004b20:	1c42      	adds	r2, r0, #1
 8004b22:	4603      	mov	r3, r0
 8004b24:	d0d1      	beq.n	8004aca <_malloc_r+0x16>
 8004b26:	1cc5      	adds	r5, r0, #3
 8004b28:	f025 0503 	bic.w	r5, r5, #3
 8004b2c:	4285      	cmp	r5, r0
 8004b2e:	d10a      	bne.n	8004b46 <_malloc_r+0x92>
 8004b30:	601c      	str	r4, [r3, #0]
 8004b32:	f103 000b 	add.w	r0, r3, #11
 8004b36:	1d1a      	adds	r2, r3, #4
 8004b38:	f020 0007 	bic.w	r0, r0, #7
 8004b3c:	1a82      	subs	r2, r0, r2
 8004b3e:	d00a      	beq.n	8004b56 <_malloc_r+0xa2>
 8004b40:	4251      	negs	r1, r2
 8004b42:	5099      	str	r1, [r3, r2]
 8004b44:	bd70      	pop	{r4, r5, r6, pc}
 8004b46:	4630      	mov	r0, r6
 8004b48:	1ae9      	subs	r1, r5, r3
 8004b4a:	f000 f809 	bl	8004b60 <_sbrk_r>
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d0bb      	beq.n	8004aca <_malloc_r+0x16>
 8004b52:	462b      	mov	r3, r5
 8004b54:	e7ec      	b.n	8004b30 <_malloc_r+0x7c>
 8004b56:	bd70      	pop	{r4, r5, r6, pc}
 8004b58:	2000028c 	.word	0x2000028c
 8004b5c:	20000288 	.word	0x20000288

08004b60 <_sbrk_r>:
 8004b60:	b538      	push	{r3, r4, r5, lr}
 8004b62:	4c06      	ldr	r4, [pc, #24]	; (8004b7c <_sbrk_r+0x1c>)
 8004b64:	2300      	movs	r3, #0
 8004b66:	4605      	mov	r5, r0
 8004b68:	4608      	mov	r0, r1
 8004b6a:	6023      	str	r3, [r4, #0]
 8004b6c:	f7fc fe8c 	bl	8001888 <_sbrk>
 8004b70:	1c43      	adds	r3, r0, #1
 8004b72:	d102      	bne.n	8004b7a <_sbrk_r+0x1a>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	b103      	cbz	r3, 8004b7a <_sbrk_r+0x1a>
 8004b78:	602b      	str	r3, [r5, #0]
 8004b7a:	bd38      	pop	{r3, r4, r5, pc}
 8004b7c:	200002d4 	.word	0x200002d4

08004b80 <g_xmc_vadc_group_array>:
 8004b80:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

08004b90 <group_init_handle0>:
	...

08004ba4 <group_init_handle1>:
	...

08004bb8 <group_init_handle2>:
	...

08004bcc <group_init_handle3>:
	...

08004be0 <global_config>:
 8004be0:	00000000 00000003 00000000 00000000     ................
	...
 8004bf8:	454c4449 00000000 09632509 25097525     IDLE.....%c.%u.%
 8004c08:	75250975 00000a0d 20726d54 00637653     u.%u....Tmr Svc.
 8004c18:	51726d54 00000000 01040250 00010000     TmrQ....P.......
 8004c28:	00000000 00010000 01010101              ............

08004c34 <CAN_NODE_0_gpio_out>:
 8004c34:	48028100 0000000c                       ...H....

08004c3c <CAN_NODE_0_gpio_out_config>:
 8004c3c:	00000090 00000001 00000002              ............

08004c48 <CAN_NODE_0_gpio_in>:
 8004c48:	48028100 0000000d                       ...H....

08004c50 <CAN_NODE_0_gpio_in_config>:
	...

08004c5c <CAN_NODE_0_BitTimeConfig>:
 8004c5c:	07270e00 000f4240 00011f40              ..'.@B..@...

08004c68 <CAN_NODE_0_sr>:
 8004c68:	00000000                                ....

08004c6c <CAN_NODE_0_LMO_01_Config>:
 8004c6c:	20000060 01000023 00000000              `.. #.......

08004c78 <CAN_NODE_0>:
 8004c78:	20000000 48014300 08004c5c 08004c6c     ... .C.H\L..lL..
	...
 8004d04:	08004c68 08004c34 08004c3c 08004c48     hL..4L..<L..HL..
 8004d14:	08004c50 00010102 00000000              PL..........

08004d20 <ANALOG_IO_0>:
 8004d20:	00000000 20000278 48028e00 00000000     ....x.. ...H....

08004d30 <global_iclass_config>:
 8004d30:	0000000d                                ....

08004d34 <backgnd_config>:
 8004d34:	00000005 00000000 00000010 5f4e4143     ............CAN_
 8004d44:	6e617254 74696d73 00000000 5f414e41     Transmit....ANA_
 8004d54:	64616552 00000000 00000043              Read....C...
