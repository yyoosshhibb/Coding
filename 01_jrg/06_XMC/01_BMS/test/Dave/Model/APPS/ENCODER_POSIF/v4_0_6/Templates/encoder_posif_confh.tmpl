package Model.APPS.ENCODER_POSIF.v4_0_6.Templates;

import Model.APPS.ENCODER_POSIF.v4_0_6.ENCODER_POSIF

out.print("""
/**
 * @cond
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015-2020, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2015-07-06:
 *     - Initial version
 *
 * 2019-11-26:
 *     - Add XMC14 interrupts muxing
 *
 * @endcond
 *
 */
/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/

/**********************************************************************************************************************
 * MACROS
 **********************************************************************************************************************/
#ifndef ENCODER_POSIFCONF_H_
#define ENCODER_POSIFCONF_H_
""");
out.print("""
/* Macro to extract MAJOR, MINOR and PATCH version */
#define ENCODER_POSIF_MAJOR_VERSION ${(ENCODER_POSIF.version).findAll( /\d+/ )*.toInteger()[0]}U
#define ENCODER_POSIF_MINOR_VERSION ${(ENCODER_POSIF.version).findAll( /\d+/ )*.toInteger()[1]}U
#define ENCODER_POSIF_PATCH_VERSION ${(ENCODER_POSIF.version).findAll( /\d+/ )*.toInteger()[2]}U
""");

String appInst  = null
Integer eruavalable = 0
Integer Is_MotLibs_Available = 0
String series = daveEnv.project.selectedDevice.deviceId.family + daveEnv.project.selectedDevice.deviceId.series

for (Object appIns : appInstancesList ) {
	appInst = appIns.getInstanceLabel()
	String isr_handler = appIns.gstring_isr_handler.value.replaceAll("<APP_Inst>","${appInst}")
	
	if((appIns.hwres_ers_etl_1.getSolverUri())||
		(appIns.hwres_ers_etl_2.getSolverUri())||
		(appIns.hwres_ers_etl_3.getSolverUri()))
	{
		eruavalable = 1 
	}	
	if(appIns.appres_motorlibs.getInstanceLabel())
	{
	  Is_MotLibs_Available = 1
	}
	if(appIns.gcheck_timestamp_pmisr.value == true )
	{
		
		List MappedUri = appIns.hwres_ccu4_slice3.getSolverUri()
		
out.print("""
/* Primary Control Loop ISR mapped to IRQ Handler */
#define ${isr_handler} IRQ_Hdlr_${appIns.hwres_nvic_trigslice_pm.getSolverUri()[7]}
""");
if (series == 'XMC14')
{
out.print("""
#define ${appInst}_TimeStampTrigger_IRQMUX XMC_SCU_IRQCTRL_CCU4${MappedUri[4]}_SR${appIns.hwres_ccu4_slice3.getRegValue("srs","srs_posr")}_IRQ${appIns.hwres_nvic_trigslice_pm.getSolverUri()[7]}
""");
}
	}
}

out.print("""

#define ENCODER_POSIF_ERU_AVAILABLE ${eruavalable}U
#define ENCODER_POSIF_ISMOTORLIB_AVAILABLE  ${Is_MotLibs_Available}U
  
#endif

""");